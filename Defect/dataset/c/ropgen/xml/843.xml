<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/843.c" pos:tabs="8"><function pos:start="1:1" pos:end="623:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:27">do_arm_semihosting</name><parameter_list pos:start="1:28" pos:end="1:42">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:36">CPUState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="623:1">{<block_content pos:start="5:5" pos:end="621:5">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">target_ulong</name></type> <name pos:start="5:18" pos:end="5:21">args</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type> <name pos:start="7:12" pos:end="7:12">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">nr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">len</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="15:1" pos:end="15:23">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:23">CONFIG_USER_ONLY</name></cpp:ifdef>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">TaskState</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:17">ts</name> <init pos:start="17:19" pos:end="17:31">= <expr pos:start="17:21" pos:end="17:31"><name pos:start="17:21" pos:end="17:31"><name pos:start="17:21" pos:end="17:23">env</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:31">opaque</name></name></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">CPUState</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:16">ts</name> <init pos:start="21:18" pos:end="21:22">= <expr pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">env</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:6">nr</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <name pos:start="27:10" pos:end="27:21"><name pos:start="27:10" pos:end="27:12">env</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:18">regs</name><index pos:start="27:19" pos:end="27:21">[<expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:8">args</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <name pos:start="29:12" pos:end="29:23"><name pos:start="29:12" pos:end="29:14">env</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:20">regs</name><index pos:start="29:21" pos:end="29:23">[<expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <switch pos:start="31:5" pos:end="621:5">switch <condition pos:start="31:12" pos:end="31:15">(<expr pos:start="31:13" pos:end="31:14"><name pos:start="31:13" pos:end="31:14">nr</name></expr>)</condition> <block pos:start="31:17" pos:end="621:5">{<block_content pos:start="33:5" pos:end="619:16">

    <case pos:start="33:5" pos:end="33:18">case <expr pos:start="33:10" pos:end="33:17"><name pos:start="33:10" pos:end="33:17">SYS_OPEN</name></expr>:</case>

        <if_stmt pos:start="35:9" pos:end="39:32"><if pos:start="35:9" pos:end="39:32">if <condition pos:start="35:12" pos:end="35:44">(<expr pos:start="35:13" pos:end="35:43"><operator pos:start="35:13" pos:end="35:13">!</operator><operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:15">s</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:42"><name pos:start="35:19" pos:end="35:34">lock_user_string</name><argument_list pos:start="35:35" pos:end="35:42">(<argument pos:start="35:36" pos:end="35:41"><expr pos:start="35:36" pos:end="35:41"><call pos:start="35:36" pos:end="35:41"><name pos:start="35:36" pos:end="35:38">ARG</name><argument_list pos:start="35:39" pos:end="35:41">(<argument pos:start="35:40" pos:end="35:40"><expr pos:start="35:40" pos:end="35:40"><literal type="number" pos:start="35:40" pos:end="35:40">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="35:43" pos:end="35:43">)</operator></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:32"><block_content pos:start="39:13" pos:end="39:32">

            <comment type="block" pos:start="37:13" pos:end="37:68">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

            <return pos:start="39:13" pos:end="39:32">return <expr pos:start="39:20" pos:end="39:31"><operator pos:start="39:20" pos:end="39:20">(</operator><name pos:start="39:21" pos:end="39:28">uint32_t</name><operator pos:start="39:29" pos:end="39:29">)</operator><operator pos:start="39:30" pos:end="39:30">-</operator><literal type="number" pos:start="39:31" pos:end="39:31">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="43:32"><if pos:start="41:9" pos:end="43:32">if <condition pos:start="41:12" pos:end="41:25">(<expr pos:start="41:13" pos:end="41:24"><call pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:15">ARG</name><argument_list pos:start="41:16" pos:end="41:18">(<argument pos:start="41:17" pos:end="41:17"><expr pos:start="41:17" pos:end="41:17"><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr></argument>)</argument_list></call> <operator pos:start="41:20" pos:end="41:21">&gt;=</operator> <literal type="number" pos:start="41:23" pos:end="41:24">12</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:32"><block_content pos:start="43:13" pos:end="43:32">

            <return pos:start="43:13" pos:end="43:32">return <expr pos:start="43:20" pos:end="43:31"><operator pos:start="43:20" pos:end="43:20">(</operator><name pos:start="43:21" pos:end="43:28">uint32_t</name><operator pos:start="43:29" pos:end="43:29">)</operator><operator pos:start="43:30" pos:end="43:30">-</operator><literal type="number" pos:start="43:31" pos:end="43:31">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="55:9">if <condition pos:start="45:12" pos:end="45:34">(<expr pos:start="45:13" pos:end="45:33"><call pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:18">strcmp</name><argument_list pos:start="45:19" pos:end="45:28">(<argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">s</name></expr></argument>, <argument pos:start="45:23" pos:end="45:27"><expr pos:start="45:23" pos:end="45:27"><literal type="string" pos:start="45:23" pos:end="45:27">":tt"</literal></expr></argument>)</argument_list></call> <operator pos:start="45:30" pos:end="45:31">==</operator> <literal type="number" pos:start="45:33" pos:end="45:33">0</literal></expr>)</condition> <block pos:start="45:36" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:37">

            <if_stmt pos:start="47:13" pos:end="53:37"><if pos:start="47:13" pos:end="49:36">if <condition pos:start="47:16" pos:end="47:27">(<expr pos:start="47:17" pos:end="47:26"><call pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:19">ARG</name><argument_list pos:start="47:20" pos:end="47:22">(<argument pos:start="47:21" pos:end="47:21"><expr pos:start="47:21" pos:end="47:21"><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr></argument>)</argument_list></call> <operator pos:start="47:24" pos:end="47:24">&lt;</operator> <literal type="number" pos:start="47:26" pos:end="47:26">4</literal></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:36"><block_content pos:start="49:17" pos:end="49:36">

                <return pos:start="49:17" pos:end="49:36">return <expr pos:start="49:24" pos:end="49:35"><name pos:start="49:24" pos:end="49:35">STDIN_FILENO</name></expr>;</return></block_content></block></if>

            <else pos:start="51:13" pos:end="53:37">else<block type="pseudo" pos:start="53:17" pos:end="53:37"><block_content pos:start="53:17" pos:end="53:37">

                <return pos:start="53:17" pos:end="53:37">return <expr pos:start="53:24" pos:end="53:36"><name pos:start="53:24" pos:end="53:36">STDOUT_FILENO</name></expr>;</return></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="69:9"><if pos:start="57:9" pos:end="65:9">if <condition pos:start="57:12" pos:end="57:31">(<expr pos:start="57:13" pos:end="57:30"><call pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:28">use_gdb_syscalls</name><argument_list pos:start="57:29" pos:end="57:30">()</argument_list></call></expr>)</condition> <block pos:start="57:33" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:32">

            <expr_stmt pos:start="59:13" pos:end="61:70"><expr pos:start="59:13" pos:end="61:69"><call pos:start="59:13" pos:end="61:69"><name pos:start="59:13" pos:end="59:26">gdb_do_syscall</name><argument_list pos:start="59:27" pos:end="61:69">(<argument pos:start="59:28" pos:end="59:38"><expr pos:start="59:28" pos:end="59:38"><name pos:start="59:28" pos:end="59:38">arm_semi_cb</name></expr></argument>, <argument pos:start="59:41" pos:end="59:56"><expr pos:start="59:41" pos:end="59:56"><literal type="string" pos:start="59:41" pos:end="59:56">"open,%s,%x,1a4"</literal></expr></argument>, <argument pos:start="59:59" pos:end="59:64"><expr pos:start="59:59" pos:end="59:64"><call pos:start="59:59" pos:end="59:64"><name pos:start="59:59" pos:end="59:61">ARG</name><argument_list pos:start="59:62" pos:end="59:64">(<argument pos:start="59:63" pos:end="59:63"><expr pos:start="59:63" pos:end="59:63"><literal type="number" pos:start="59:63" pos:end="59:63">0</literal></expr></argument>)</argument_list></call></expr></argument>,

			   <argument pos:start="61:28" pos:end="61:40"><expr pos:start="61:28" pos:end="61:40"><operator pos:start="61:28" pos:end="61:28">(</operator><name pos:start="61:29" pos:end="61:31">int</name><operator pos:start="61:32" pos:end="61:32">)</operator><call pos:start="61:33" pos:end="61:38"><name pos:start="61:33" pos:end="61:35">ARG</name><argument_list pos:start="61:36" pos:end="61:38">(<argument pos:start="61:37" pos:end="61:37"><expr pos:start="61:37" pos:end="61:37"><literal type="number" pos:start="61:37" pos:end="61:37">2</literal></expr></argument>)</argument_list></call><operator pos:start="61:39" pos:end="61:39">+</operator><literal type="number" pos:start="61:40" pos:end="61:40">1</literal></expr></argument>, <argument pos:start="61:43" pos:end="61:68"><expr pos:start="61:43" pos:end="61:68"><name pos:start="61:43" pos:end="61:68"><name pos:start="61:43" pos:end="61:60">gdb_open_modeflags</name><index pos:start="61:61" pos:end="61:68">[<expr pos:start="61:62" pos:end="61:67"><call pos:start="61:62" pos:end="61:67"><name pos:start="61:62" pos:end="61:64">ARG</name><argument_list pos:start="61:65" pos:end="61:67">(<argument pos:start="61:66" pos:end="61:66"><expr pos:start="61:66" pos:end="61:66"><literal type="number" pos:start="61:66" pos:end="61:66">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="63:13" pos:end="63:32">return <expr pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:22">env</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:28">regs</name><index pos:start="63:29" pos:end="63:31">[<expr pos:start="63:30" pos:end="63:30"><literal type="number" pos:start="63:30" pos:end="63:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="69:9">else <block pos:start="65:16" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:75">

            <expr_stmt pos:start="67:13" pos:end="67:75"><expr pos:start="67:13" pos:end="67:74"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:74"><name pos:start="67:19" pos:end="67:31">set_swi_errno</name><argument_list pos:start="67:32" pos:end="67:74">(<argument pos:start="67:33" pos:end="67:34"><expr pos:start="67:33" pos:end="67:34"><name pos:start="67:33" pos:end="67:34">ts</name></expr></argument>, <argument pos:start="67:37" pos:end="67:73"><expr pos:start="67:37" pos:end="67:73"><call pos:start="67:37" pos:end="67:73"><name pos:start="67:37" pos:end="67:40">open</name><argument_list pos:start="67:41" pos:end="67:73">(<argument pos:start="67:42" pos:end="67:42"><expr pos:start="67:42" pos:end="67:42"><name pos:start="67:42" pos:end="67:42">s</name></expr></argument>, <argument pos:start="67:45" pos:end="67:66"><expr pos:start="67:45" pos:end="67:66"><name pos:start="67:45" pos:end="67:66"><name pos:start="67:45" pos:end="67:58">open_modeflags</name><index pos:start="67:59" pos:end="67:66">[<expr pos:start="67:60" pos:end="67:65"><call pos:start="67:60" pos:end="67:65"><name pos:start="67:60" pos:end="67:62">ARG</name><argument_list pos:start="67:63" pos:end="67:65">(<argument pos:start="67:64" pos:end="67:64"><expr pos:start="67:64" pos:end="67:64"><literal type="number" pos:start="67:64" pos:end="67:64">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument pos:start="67:69" pos:end="67:72"><expr pos:start="67:69" pos:end="67:72"><literal type="number" pos:start="67:69" pos:end="67:72">0644</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><call pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:19">unlock_user</name><argument_list pos:start="71:20" pos:end="71:33">(<argument pos:start="71:21" pos:end="71:21"><expr pos:start="71:21" pos:end="71:21"><name pos:start="71:21" pos:end="71:21">s</name></expr></argument>, <argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><call pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:26">ARG</name><argument_list pos:start="71:27" pos:end="71:29">(<argument pos:start="71:28" pos:end="71:28"><expr pos:start="71:28" pos:end="71:28"><literal type="number" pos:start="71:28" pos:end="71:28">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:32" pos:end="71:32"><expr pos:start="71:32" pos:end="71:32"><literal type="number" pos:start="71:32" pos:end="71:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:19">return <expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ret</name></expr>;</return>

    <case pos:start="75:5" pos:end="75:19">case <expr pos:start="75:10" pos:end="75:18"><name pos:start="75:10" pos:end="75:18">SYS_CLOSE</name></expr>:</case>

        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:31">(<expr pos:start="77:13" pos:end="77:30"><call pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:28">use_gdb_syscalls</name><argument_list pos:start="77:29" pos:end="77:30">()</argument_list></call></expr>)</condition> <block pos:start="77:33" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:32">

            <expr_stmt pos:start="79:13" pos:end="79:60"><expr pos:start="79:13" pos:end="79:59"><call pos:start="79:13" pos:end="79:59"><name pos:start="79:13" pos:end="79:26">gdb_do_syscall</name><argument_list pos:start="79:27" pos:end="79:59">(<argument pos:start="79:28" pos:end="79:38"><expr pos:start="79:28" pos:end="79:38"><name pos:start="79:28" pos:end="79:38">arm_semi_cb</name></expr></argument>, <argument pos:start="79:41" pos:end="79:50"><expr pos:start="79:41" pos:end="79:50"><literal type="string" pos:start="79:41" pos:end="79:50">"close,%x"</literal></expr></argument>, <argument pos:start="79:53" pos:end="79:58"><expr pos:start="79:53" pos:end="79:58"><call pos:start="79:53" pos:end="79:58"><name pos:start="79:53" pos:end="79:55">ARG</name><argument_list pos:start="79:56" pos:end="79:58">(<argument pos:start="79:57" pos:end="79:57"><expr pos:start="79:57" pos:end="79:57"><literal type="number" pos:start="79:57" pos:end="79:57">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:32">return <expr pos:start="81:20" pos:end="81:31"><name pos:start="81:20" pos:end="81:31"><name pos:start="81:20" pos:end="81:22">env</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:28">regs</name><index pos:start="81:29" pos:end="81:31">[<expr pos:start="81:30" pos:end="81:30"><literal type="number" pos:start="81:30" pos:end="81:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="87:9">else <block pos:start="83:16" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:52">

            <return pos:start="85:13" pos:end="85:52">return <expr pos:start="85:20" pos:end="85:51"><call pos:start="85:20" pos:end="85:51"><name pos:start="85:20" pos:end="85:32">set_swi_errno</name><argument_list pos:start="85:33" pos:end="85:51">(<argument pos:start="85:34" pos:end="85:35"><expr pos:start="85:34" pos:end="85:35"><name pos:start="85:34" pos:end="85:35">ts</name></expr></argument>, <argument pos:start="85:38" pos:end="85:50"><expr pos:start="85:38" pos:end="85:50"><call pos:start="85:38" pos:end="85:50"><name pos:start="85:38" pos:end="85:42">close</name><argument_list pos:start="85:43" pos:end="85:50">(<argument pos:start="85:44" pos:end="85:49"><expr pos:start="85:44" pos:end="85:49"><call pos:start="85:44" pos:end="85:49"><name pos:start="85:44" pos:end="85:46">ARG</name><argument_list pos:start="85:47" pos:end="85:49">(<argument pos:start="85:48" pos:end="85:48"><expr pos:start="85:48" pos:end="85:48"><literal type="number" pos:start="85:48" pos:end="85:48">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="89:5" pos:end="89:20">case <expr pos:start="89:10" pos:end="89:19"><name pos:start="89:10" pos:end="89:19">SYS_WRITEC</name></expr>:</case>

        <block pos:start="91:9" pos:end="117:9">{<block_content pos:start="93:11" pos:end="115:11">

          <decl_stmt pos:start="93:11" pos:end="93:17"><decl pos:start="93:11" pos:end="93:16"><type pos:start="93:11" pos:end="93:14"><name pos:start="93:11" pos:end="93:14">char</name></type> <name pos:start="93:16" pos:end="93:16">c</name></decl>;</decl_stmt>



          <if_stmt pos:start="97:11" pos:end="101:34"><if pos:start="97:11" pos:end="101:34">if <condition pos:start="97:14" pos:end="97:35">(<expr pos:start="97:15" pos:end="97:34"><call pos:start="97:15" pos:end="97:34"><name pos:start="97:15" pos:end="97:25">get_user_u8</name><argument_list pos:start="97:26" pos:end="97:34">(<argument pos:start="97:27" pos:end="97:27"><expr pos:start="97:27" pos:end="97:27"><name pos:start="97:27" pos:end="97:27">c</name></expr></argument>, <argument pos:start="97:30" pos:end="97:33"><expr pos:start="97:30" pos:end="97:33"><name pos:start="97:30" pos:end="97:33">args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="101:15" pos:end="101:34"><block_content pos:start="101:15" pos:end="101:34">

              <comment type="block" pos:start="99:15" pos:end="99:70">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

              <return pos:start="101:15" pos:end="101:34">return <expr pos:start="101:22" pos:end="101:33"><operator pos:start="101:22" pos:end="101:22">(</operator><name pos:start="101:23" pos:end="101:30">uint32_t</name><operator pos:start="101:31" pos:end="101:31">)</operator><operator pos:start="101:32" pos:end="101:32">-</operator><literal type="number" pos:start="101:33" pos:end="101:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

          <comment type="block" pos:start="103:11" pos:end="103:64">/* Write to debug console.  stderr is near enough.  */</comment>

          <if_stmt pos:start="105:11" pos:end="115:11"><if pos:start="105:11" pos:end="111:11">if <condition pos:start="105:14" pos:end="105:33">(<expr pos:start="105:15" pos:end="105:32"><call pos:start="105:15" pos:end="105:32"><name pos:start="105:15" pos:end="105:30">use_gdb_syscalls</name><argument_list pos:start="105:31" pos:end="105:32">()</argument_list></call></expr>)</condition> <block pos:start="105:35" pos:end="111:11">{<block_content pos:start="107:17" pos:end="109:36">

                <expr_stmt pos:start="107:17" pos:end="107:66"><expr pos:start="107:17" pos:end="107:65"><call pos:start="107:17" pos:end="107:65"><name pos:start="107:17" pos:end="107:30">gdb_do_syscall</name><argument_list pos:start="107:31" pos:end="107:65">(<argument pos:start="107:32" pos:end="107:42"><expr pos:start="107:32" pos:end="107:42"><name pos:start="107:32" pos:end="107:42">arm_semi_cb</name></expr></argument>, <argument pos:start="107:45" pos:end="107:58"><expr pos:start="107:45" pos:end="107:58"><literal type="string" pos:start="107:45" pos:end="107:58">"write,2,%x,1"</literal></expr></argument>, <argument pos:start="107:61" pos:end="107:64"><expr pos:start="107:61" pos:end="107:64"><name pos:start="107:61" pos:end="107:64">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="109:17" pos:end="109:36">return <expr pos:start="109:24" pos:end="109:35"><name pos:start="109:24" pos:end="109:35"><name pos:start="109:24" pos:end="109:26">env</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:32">regs</name><index pos:start="109:33" pos:end="109:35">[<expr pos:start="109:34" pos:end="109:34"><literal type="number" pos:start="109:34" pos:end="109:34">0</literal></expr>]</index></name></expr>;</return>

          </block_content>}</block></if> <else pos:start="111:13" pos:end="115:11">else <block pos:start="111:18" pos:end="115:11">{<block_content pos:start="113:17" pos:end="113:51">

                <return pos:start="113:17" pos:end="113:51">return <expr pos:start="113:24" pos:end="113:50"><call pos:start="113:24" pos:end="113:50"><name pos:start="113:24" pos:end="113:28">write</name><argument_list pos:start="113:29" pos:end="113:50">(<argument pos:start="113:30" pos:end="113:42"><expr pos:start="113:30" pos:end="113:42"><name pos:start="113:30" pos:end="113:42">STDERR_FILENO</name></expr></argument>, <argument pos:start="113:45" pos:end="113:46"><expr pos:start="113:45" pos:end="113:46"><operator pos:start="113:45" pos:end="113:45">&amp;</operator><name pos:start="113:46" pos:end="113:46">c</name></expr></argument>, <argument pos:start="113:49" pos:end="113:49"><expr pos:start="113:49" pos:end="113:49"><literal type="number" pos:start="113:49" pos:end="113:49">1</literal></expr></argument>)</argument_list></call></expr>;</return>

          </block_content>}</block></else></if_stmt>

        </block_content>}</block>

    <case pos:start="119:5" pos:end="119:20">case <expr pos:start="119:10" pos:end="119:19"><name pos:start="119:10" pos:end="119:19">SYS_WRITE0</name></expr>:</case>

        <if_stmt pos:start="121:9" pos:end="125:32"><if pos:start="121:9" pos:end="125:32">if <condition pos:start="121:12" pos:end="121:42">(<expr pos:start="121:13" pos:end="121:41"><operator pos:start="121:13" pos:end="121:13">!</operator><operator pos:start="121:14" pos:end="121:14">(</operator><name pos:start="121:15" pos:end="121:15">s</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:40"><name pos:start="121:19" pos:end="121:34">lock_user_string</name><argument_list pos:start="121:35" pos:end="121:40">(<argument pos:start="121:36" pos:end="121:39"><expr pos:start="121:36" pos:end="121:39"><name pos:start="121:36" pos:end="121:39">args</name></expr></argument>)</argument_list></call><operator pos:start="121:41" pos:end="121:41">)</operator></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:32"><block_content pos:start="125:13" pos:end="125:32">

            <comment type="block" pos:start="123:13" pos:end="123:68">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

            <return pos:start="125:13" pos:end="125:32">return <expr pos:start="125:20" pos:end="125:31"><operator pos:start="125:20" pos:end="125:20">(</operator><name pos:start="125:21" pos:end="125:28">uint32_t</name><operator pos:start="125:29" pos:end="125:29">)</operator><operator pos:start="125:30" pos:end="125:30">-</operator><literal type="number" pos:start="125:31" pos:end="125:31">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:24"><expr pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:11">len</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="127:23"><name pos:start="127:15" pos:end="127:20">strlen</name><argument_list pos:start="127:21" pos:end="127:23">(<argument pos:start="127:22" pos:end="127:22"><expr pos:start="127:22" pos:end="127:22"><name pos:start="127:22" pos:end="127:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="139:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:31">(<expr pos:start="129:13" pos:end="129:30"><call pos:start="129:13" pos:end="129:30"><name pos:start="129:13" pos:end="129:28">use_gdb_syscalls</name><argument_list pos:start="129:29" pos:end="129:30">()</argument_list></call></expr>)</condition> <block pos:start="129:33" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:31">

            <expr_stmt pos:start="131:13" pos:end="131:70"><expr pos:start="131:13" pos:end="131:69"><call pos:start="131:13" pos:end="131:69"><name pos:start="131:13" pos:end="131:26">gdb_do_syscall</name><argument_list pos:start="131:27" pos:end="131:69">(<argument pos:start="131:28" pos:end="131:38"><expr pos:start="131:28" pos:end="131:38"><name pos:start="131:28" pos:end="131:38">arm_semi_cb</name></expr></argument>, <argument pos:start="131:41" pos:end="131:57"><expr pos:start="131:41" pos:end="131:57"><literal type="string" pos:start="131:41" pos:end="131:57">"write,2,%x,%x\n"</literal></expr></argument>, <argument pos:start="131:60" pos:end="131:63"><expr pos:start="131:60" pos:end="131:63"><name pos:start="131:60" pos:end="131:63">args</name></expr></argument>, <argument pos:start="131:66" pos:end="131:68"><expr pos:start="131:66" pos:end="131:68"><name pos:start="131:66" pos:end="131:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:31"><expr pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <name pos:start="133:19" pos:end="133:30"><name pos:start="133:19" pos:end="133:21">env</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:27">regs</name><index pos:start="133:28" pos:end="133:30">[<expr pos:start="133:29" pos:end="133:29"><literal type="number" pos:start="133:29" pos:end="133:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="139:9">else <block pos:start="135:16" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:47">

            <expr_stmt pos:start="137:13" pos:end="137:47"><expr pos:start="137:13" pos:end="137:46"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="137:46"><name pos:start="137:19" pos:end="137:23">write</name><argument_list pos:start="137:24" pos:end="137:46">(<argument pos:start="137:25" pos:end="137:37"><expr pos:start="137:25" pos:end="137:37"><name pos:start="137:25" pos:end="137:37">STDERR_FILENO</name></expr></argument>, <argument pos:start="137:40" pos:end="137:40"><expr pos:start="137:40" pos:end="137:40"><name pos:start="137:40" pos:end="137:40">s</name></expr></argument>, <argument pos:start="137:43" pos:end="137:45"><expr pos:start="137:43" pos:end="137:45"><name pos:start="137:43" pos:end="137:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:32"><expr pos:start="141:9" pos:end="141:31"><call pos:start="141:9" pos:end="141:31"><name pos:start="141:9" pos:end="141:19">unlock_user</name><argument_list pos:start="141:20" pos:end="141:31">(<argument pos:start="141:21" pos:end="141:21"><expr pos:start="141:21" pos:end="141:21"><name pos:start="141:21" pos:end="141:21">s</name></expr></argument>, <argument pos:start="141:24" pos:end="141:27"><expr pos:start="141:24" pos:end="141:27"><name pos:start="141:24" pos:end="141:27">args</name></expr></argument>, <argument pos:start="141:30" pos:end="141:30"><expr pos:start="141:30" pos:end="141:30"><literal type="number" pos:start="141:30" pos:end="141:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:19">return <expr pos:start="143:16" pos:end="143:18"><name pos:start="143:16" pos:end="143:18">ret</name></expr>;</return>

    <case pos:start="145:5" pos:end="145:19">case <expr pos:start="145:10" pos:end="145:18"><name pos:start="145:10" pos:end="145:18">SYS_WRITE</name></expr>:</case>

        <expr_stmt pos:start="147:9" pos:end="147:21"><expr pos:start="147:9" pos:end="147:20"><name pos:start="147:9" pos:end="147:11">len</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:20"><name pos:start="147:15" pos:end="147:17">ARG</name><argument_list pos:start="147:18" pos:end="147:20">(<argument pos:start="147:19" pos:end="147:19"><expr pos:start="147:19" pos:end="147:19"><literal type="number" pos:start="147:19" pos:end="147:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="175:9"><if pos:start="149:9" pos:end="157:9">if <condition pos:start="149:12" pos:end="149:31">(<expr pos:start="149:13" pos:end="149:30"><call pos:start="149:13" pos:end="149:30"><name pos:start="149:13" pos:end="149:28">use_gdb_syscalls</name><argument_list pos:start="149:29" pos:end="149:30">()</argument_list></call></expr>)</condition> <block pos:start="149:33" pos:end="157:9">{<block_content pos:start="151:13" pos:end="155:32">

            <expr_stmt pos:start="151:13" pos:end="151:39"><expr pos:start="151:13" pos:end="151:38"><name pos:start="151:13" pos:end="151:32">arm_semi_syscall_len</name> <operator pos:start="151:34" pos:end="151:34">=</operator> <name pos:start="151:36" pos:end="151:38">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:79"><expr pos:start="153:13" pos:end="153:78"><call pos:start="153:13" pos:end="153:78"><name pos:start="153:13" pos:end="153:26">gdb_do_syscall</name><argument_list pos:start="153:27" pos:end="153:78">(<argument pos:start="153:28" pos:end="153:38"><expr pos:start="153:28" pos:end="153:38"><name pos:start="153:28" pos:end="153:38">arm_semi_cb</name></expr></argument>, <argument pos:start="153:41" pos:end="153:56"><expr pos:start="153:41" pos:end="153:56"><literal type="string" pos:start="153:41" pos:end="153:56">"write,%x,%x,%x"</literal></expr></argument>, <argument pos:start="153:59" pos:end="153:64"><expr pos:start="153:59" pos:end="153:64"><call pos:start="153:59" pos:end="153:64"><name pos:start="153:59" pos:end="153:61">ARG</name><argument_list pos:start="153:62" pos:end="153:64">(<argument pos:start="153:63" pos:end="153:63"><expr pos:start="153:63" pos:end="153:63"><literal type="number" pos:start="153:63" pos:end="153:63">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:67" pos:end="153:72"><expr pos:start="153:67" pos:end="153:72"><call pos:start="153:67" pos:end="153:72"><name pos:start="153:67" pos:end="153:69">ARG</name><argument_list pos:start="153:70" pos:end="153:72">(<argument pos:start="153:71" pos:end="153:71"><expr pos:start="153:71" pos:end="153:71"><literal type="number" pos:start="153:71" pos:end="153:71">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:75" pos:end="153:77"><expr pos:start="153:75" pos:end="153:77"><name pos:start="153:75" pos:end="153:77">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="155:13" pos:end="155:32">return <expr pos:start="155:20" pos:end="155:31"><name pos:start="155:20" pos:end="155:31"><name pos:start="155:20" pos:end="155:22">env</name><operator pos:start="155:23" pos:end="155:24">-&gt;</operator><name pos:start="155:25" pos:end="155:28">regs</name><index pos:start="155:29" pos:end="155:31">[<expr pos:start="155:30" pos:end="155:30"><literal type="number" pos:start="155:30" pos:end="155:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="175:9">else <block pos:start="157:16" pos:end="175:9">{<block_content pos:start="159:13" pos:end="173:29">

            <if_stmt pos:start="159:13" pos:end="163:36"><if pos:start="159:13" pos:end="163:36">if <condition pos:start="159:16" pos:end="159:62">(<expr pos:start="159:17" pos:end="159:61"><operator pos:start="159:17" pos:end="159:17">!</operator><operator pos:start="159:18" pos:end="159:18">(</operator><name pos:start="159:19" pos:end="159:19">s</name> <operator pos:start="159:21" pos:end="159:21">=</operator> <call pos:start="159:23" pos:end="159:60"><name pos:start="159:23" pos:end="159:31">lock_user</name><argument_list pos:start="159:32" pos:end="159:60">(<argument pos:start="159:33" pos:end="159:43"><expr pos:start="159:33" pos:end="159:43"><name pos:start="159:33" pos:end="159:43">VERIFY_READ</name></expr></argument>, <argument pos:start="159:46" pos:end="159:51"><expr pos:start="159:46" pos:end="159:51"><call pos:start="159:46" pos:end="159:51"><name pos:start="159:46" pos:end="159:48">ARG</name><argument_list pos:start="159:49" pos:end="159:51">(<argument pos:start="159:50" pos:end="159:50"><expr pos:start="159:50" pos:end="159:50"><literal type="number" pos:start="159:50" pos:end="159:50">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="159:54" pos:end="159:56"><expr pos:start="159:54" pos:end="159:56"><name pos:start="159:54" pos:end="159:56">len</name></expr></argument>, <argument pos:start="159:59" pos:end="159:59"><expr pos:start="159:59" pos:end="159:59"><literal type="number" pos:start="159:59" pos:end="159:59">1</literal></expr></argument>)</argument_list></call><operator pos:start="159:61" pos:end="159:61">)</operator></expr>)</condition><block type="pseudo" pos:start="163:17" pos:end="163:36"><block_content pos:start="163:17" pos:end="163:36">

                <comment type="block" pos:start="161:17" pos:end="161:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="163:17" pos:end="163:36">return <expr pos:start="163:24" pos:end="163:35"><operator pos:start="163:24" pos:end="163:24">(</operator><name pos:start="163:25" pos:end="163:32">uint32_t</name><operator pos:start="163:33" pos:end="163:33">)</operator><operator pos:start="163:34" pos:end="163:34">-</operator><literal type="number" pos:start="163:35" pos:end="163:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:59"><expr pos:start="165:13" pos:end="165:58"><name pos:start="165:13" pos:end="165:15">ret</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="165:58"><name pos:start="165:19" pos:end="165:31">set_swi_errno</name><argument_list pos:start="165:32" pos:end="165:58">(<argument pos:start="165:33" pos:end="165:34"><expr pos:start="165:33" pos:end="165:34"><name pos:start="165:33" pos:end="165:34">ts</name></expr></argument>, <argument pos:start="165:37" pos:end="165:57"><expr pos:start="165:37" pos:end="165:57"><call pos:start="165:37" pos:end="165:57"><name pos:start="165:37" pos:end="165:41">write</name><argument_list pos:start="165:42" pos:end="165:57">(<argument pos:start="165:43" pos:end="165:48"><expr pos:start="165:43" pos:end="165:48"><call pos:start="165:43" pos:end="165:48"><name pos:start="165:43" pos:end="165:45">ARG</name><argument_list pos:start="165:46" pos:end="165:48">(<argument pos:start="165:47" pos:end="165:47"><expr pos:start="165:47" pos:end="165:47"><literal type="number" pos:start="165:47" pos:end="165:47">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="165:51" pos:end="165:51"><expr pos:start="165:51" pos:end="165:51"><name pos:start="165:51" pos:end="165:51">s</name></expr></argument>, <argument pos:start="165:54" pos:end="165:56"><expr pos:start="165:54" pos:end="165:56"><name pos:start="165:54" pos:end="165:56">len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:38"><expr pos:start="167:13" pos:end="167:37"><call pos:start="167:13" pos:end="167:37"><name pos:start="167:13" pos:end="167:23">unlock_user</name><argument_list pos:start="167:24" pos:end="167:37">(<argument pos:start="167:25" pos:end="167:25"><expr pos:start="167:25" pos:end="167:25"><name pos:start="167:25" pos:end="167:25">s</name></expr></argument>, <argument pos:start="167:28" pos:end="167:33"><expr pos:start="167:28" pos:end="167:33"><call pos:start="167:28" pos:end="167:33"><name pos:start="167:28" pos:end="167:30">ARG</name><argument_list pos:start="167:31" pos:end="167:33">(<argument pos:start="167:32" pos:end="167:32"><expr pos:start="167:32" pos:end="167:32"><literal type="number" pos:start="167:32" pos:end="167:32">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="167:36" pos:end="167:36"><expr pos:start="167:36" pos:end="167:36"><literal type="number" pos:start="167:36" pos:end="167:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="169:13" pos:end="171:26"><if pos:start="169:13" pos:end="171:26">if <condition pos:start="169:16" pos:end="169:36">(<expr pos:start="169:17" pos:end="169:35"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:22">==</operator> <operator pos:start="169:24" pos:end="169:24">(</operator><name pos:start="169:25" pos:end="169:32">uint32_t</name><operator pos:start="169:33" pos:end="169:33">)</operator><operator pos:start="169:34" pos:end="169:34">-</operator><literal type="number" pos:start="169:35" pos:end="169:35">1</literal></expr>)</condition><block type="pseudo" pos:start="171:17" pos:end="171:26"><block_content pos:start="171:17" pos:end="171:26">

                <return pos:start="171:17" pos:end="171:26">return <expr pos:start="171:24" pos:end="171:25"><operator pos:start="171:24" pos:end="171:24">-</operator><literal type="number" pos:start="171:25" pos:end="171:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="173:13" pos:end="173:29">return <expr pos:start="173:20" pos:end="173:28"><name pos:start="173:20" pos:end="173:22">len</name> <operator pos:start="173:24" pos:end="173:24">-</operator> <name pos:start="173:26" pos:end="173:28">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="177:5" pos:end="177:18">case <expr pos:start="177:10" pos:end="177:17"><name pos:start="177:10" pos:end="177:17">SYS_READ</name></expr>:</case>

        <expr_stmt pos:start="179:9" pos:end="179:21"><expr pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:11">len</name> <operator pos:start="179:13" pos:end="179:13">=</operator> <call pos:start="179:15" pos:end="179:20"><name pos:start="179:15" pos:end="179:17">ARG</name><argument_list pos:start="179:18" pos:end="179:20">(<argument pos:start="179:19" pos:end="179:19"><expr pos:start="179:19" pos:end="179:19"><literal type="number" pos:start="179:19" pos:end="179:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="211:9"><if pos:start="181:9" pos:end="189:9">if <condition pos:start="181:12" pos:end="181:31">(<expr pos:start="181:13" pos:end="181:30"><call pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:28">use_gdb_syscalls</name><argument_list pos:start="181:29" pos:end="181:30">()</argument_list></call></expr>)</condition> <block pos:start="181:33" pos:end="189:9">{<block_content pos:start="183:13" pos:end="187:32">

            <expr_stmt pos:start="183:13" pos:end="183:39"><expr pos:start="183:13" pos:end="183:38"><name pos:start="183:13" pos:end="183:32">arm_semi_syscall_len</name> <operator pos:start="183:34" pos:end="183:34">=</operator> <name pos:start="183:36" pos:end="183:38">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:78"><expr pos:start="185:13" pos:end="185:77"><call pos:start="185:13" pos:end="185:77"><name pos:start="185:13" pos:end="185:26">gdb_do_syscall</name><argument_list pos:start="185:27" pos:end="185:77">(<argument pos:start="185:28" pos:end="185:38"><expr pos:start="185:28" pos:end="185:38"><name pos:start="185:28" pos:end="185:38">arm_semi_cb</name></expr></argument>, <argument pos:start="185:41" pos:end="185:55"><expr pos:start="185:41" pos:end="185:55"><literal type="string" pos:start="185:41" pos:end="185:55">"read,%x,%x,%x"</literal></expr></argument>, <argument pos:start="185:58" pos:end="185:63"><expr pos:start="185:58" pos:end="185:63"><call pos:start="185:58" pos:end="185:63"><name pos:start="185:58" pos:end="185:60">ARG</name><argument_list pos:start="185:61" pos:end="185:63">(<argument pos:start="185:62" pos:end="185:62"><expr pos:start="185:62" pos:end="185:62"><literal type="number" pos:start="185:62" pos:end="185:62">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="185:66" pos:end="185:71"><expr pos:start="185:66" pos:end="185:71"><call pos:start="185:66" pos:end="185:71"><name pos:start="185:66" pos:end="185:68">ARG</name><argument_list pos:start="185:69" pos:end="185:71">(<argument pos:start="185:70" pos:end="185:70"><expr pos:start="185:70" pos:end="185:70"><literal type="number" pos:start="185:70" pos:end="185:70">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="185:74" pos:end="185:76"><expr pos:start="185:74" pos:end="185:76"><name pos:start="185:74" pos:end="185:76">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="187:13" pos:end="187:32">return <expr pos:start="187:20" pos:end="187:31"><name pos:start="187:20" pos:end="187:31"><name pos:start="187:20" pos:end="187:22">env</name><operator pos:start="187:23" pos:end="187:24">-&gt;</operator><name pos:start="187:25" pos:end="187:28">regs</name><index pos:start="187:29" pos:end="187:31">[<expr pos:start="187:30" pos:end="187:30"><literal type="number" pos:start="187:30" pos:end="187:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="189:11" pos:end="211:9">else <block pos:start="189:16" pos:end="211:9">{<block_content pos:start="191:13" pos:end="209:29">

            <if_stmt pos:start="191:13" pos:end="195:36"><if pos:start="191:13" pos:end="195:36">if <condition pos:start="191:16" pos:end="191:63">(<expr pos:start="191:17" pos:end="191:62"><operator pos:start="191:17" pos:end="191:17">!</operator><operator pos:start="191:18" pos:end="191:18">(</operator><name pos:start="191:19" pos:end="191:19">s</name> <operator pos:start="191:21" pos:end="191:21">=</operator> <call pos:start="191:23" pos:end="191:61"><name pos:start="191:23" pos:end="191:31">lock_user</name><argument_list pos:start="191:32" pos:end="191:61">(<argument pos:start="191:33" pos:end="191:44"><expr pos:start="191:33" pos:end="191:44"><name pos:start="191:33" pos:end="191:44">VERIFY_WRITE</name></expr></argument>, <argument pos:start="191:47" pos:end="191:52"><expr pos:start="191:47" pos:end="191:52"><call pos:start="191:47" pos:end="191:52"><name pos:start="191:47" pos:end="191:49">ARG</name><argument_list pos:start="191:50" pos:end="191:52">(<argument pos:start="191:51" pos:end="191:51"><expr pos:start="191:51" pos:end="191:51"><literal type="number" pos:start="191:51" pos:end="191:51">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="191:55" pos:end="191:57"><expr pos:start="191:55" pos:end="191:57"><name pos:start="191:55" pos:end="191:57">len</name></expr></argument>, <argument pos:start="191:60" pos:end="191:60"><expr pos:start="191:60" pos:end="191:60"><literal type="number" pos:start="191:60" pos:end="191:60">0</literal></expr></argument>)</argument_list></call><operator pos:start="191:62" pos:end="191:62">)</operator></expr>)</condition><block type="pseudo" pos:start="195:17" pos:end="195:36"><block_content pos:start="195:17" pos:end="195:36">

                <comment type="block" pos:start="193:17" pos:end="193:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="195:17" pos:end="195:36">return <expr pos:start="195:24" pos:end="195:35"><operator pos:start="195:24" pos:end="195:24">(</operator><name pos:start="195:25" pos:end="195:32">uint32_t</name><operator pos:start="195:33" pos:end="195:33">)</operator><operator pos:start="195:34" pos:end="195:34">-</operator><literal type="number" pos:start="195:35" pos:end="195:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <do pos:start="197:13" pos:end="201:48">do<block type="pseudo" pos:start="199:15" pos:end="199:60"><block_content pos:start="199:15" pos:end="199:60">

              <expr_stmt pos:start="199:15" pos:end="199:60"><expr pos:start="199:15" pos:end="199:59"><name pos:start="199:15" pos:end="199:17">ret</name> <operator pos:start="199:19" pos:end="199:19">=</operator> <call pos:start="199:21" pos:end="199:59"><name pos:start="199:21" pos:end="199:33">set_swi_errno</name><argument_list pos:start="199:34" pos:end="199:59">(<argument pos:start="199:35" pos:end="199:36"><expr pos:start="199:35" pos:end="199:36"><name pos:start="199:35" pos:end="199:36">ts</name></expr></argument>, <argument pos:start="199:39" pos:end="199:58"><expr pos:start="199:39" pos:end="199:58"><call pos:start="199:39" pos:end="199:58"><name pos:start="199:39" pos:end="199:42">read</name><argument_list pos:start="199:43" pos:end="199:58">(<argument pos:start="199:44" pos:end="199:49"><expr pos:start="199:44" pos:end="199:49"><call pos:start="199:44" pos:end="199:49"><name pos:start="199:44" pos:end="199:46">ARG</name><argument_list pos:start="199:47" pos:end="199:49">(<argument pos:start="199:48" pos:end="199:48"><expr pos:start="199:48" pos:end="199:48"><literal type="number" pos:start="199:48" pos:end="199:48">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="199:52" pos:end="199:52"><expr pos:start="199:52" pos:end="199:52"><name pos:start="199:52" pos:end="199:52">s</name></expr></argument>, <argument pos:start="199:55" pos:end="199:57"><expr pos:start="199:55" pos:end="199:57"><name pos:start="199:55" pos:end="199:57">len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>

            while <condition pos:start="201:19" pos:end="201:47">(<expr pos:start="201:20" pos:end="201:46"><name pos:start="201:20" pos:end="201:22">ret</name> <operator pos:start="201:24" pos:end="201:25">==</operator> <operator pos:start="201:27" pos:end="201:27">-</operator><literal type="number" pos:start="201:28" pos:end="201:28">1</literal> <operator pos:start="201:30" pos:end="201:31">&amp;&amp;</operator> <name pos:start="201:33" pos:end="201:37">errno</name> <operator pos:start="201:39" pos:end="201:40">==</operator> <name pos:start="201:42" pos:end="201:46">EINTR</name></expr>)</condition>;</do>

            <expr_stmt pos:start="203:13" pos:end="203:40"><expr pos:start="203:13" pos:end="203:39"><call pos:start="203:13" pos:end="203:39"><name pos:start="203:13" pos:end="203:23">unlock_user</name><argument_list pos:start="203:24" pos:end="203:39">(<argument pos:start="203:25" pos:end="203:25"><expr pos:start="203:25" pos:end="203:25"><name pos:start="203:25" pos:end="203:25">s</name></expr></argument>, <argument pos:start="203:28" pos:end="203:33"><expr pos:start="203:28" pos:end="203:33"><call pos:start="203:28" pos:end="203:33"><name pos:start="203:28" pos:end="203:30">ARG</name><argument_list pos:start="203:31" pos:end="203:33">(<argument pos:start="203:32" pos:end="203:32"><expr pos:start="203:32" pos:end="203:32"><literal type="number" pos:start="203:32" pos:end="203:32">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="203:36" pos:end="203:38"><expr pos:start="203:36" pos:end="203:38"><name pos:start="203:36" pos:end="203:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="205:13" pos:end="207:26"><if pos:start="205:13" pos:end="207:26">if <condition pos:start="205:16" pos:end="205:36">(<expr pos:start="205:17" pos:end="205:35"><name pos:start="205:17" pos:end="205:19">ret</name> <operator pos:start="205:21" pos:end="205:22">==</operator> <operator pos:start="205:24" pos:end="205:24">(</operator><name pos:start="205:25" pos:end="205:32">uint32_t</name><operator pos:start="205:33" pos:end="205:33">)</operator><operator pos:start="205:34" pos:end="205:34">-</operator><literal type="number" pos:start="205:35" pos:end="205:35">1</literal></expr>)</condition><block type="pseudo" pos:start="207:17" pos:end="207:26"><block_content pos:start="207:17" pos:end="207:26">

                <return pos:start="207:17" pos:end="207:26">return <expr pos:start="207:24" pos:end="207:25"><operator pos:start="207:24" pos:end="207:24">-</operator><literal type="number" pos:start="207:25" pos:end="207:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="209:13" pos:end="209:29">return <expr pos:start="209:20" pos:end="209:28"><name pos:start="209:20" pos:end="209:22">len</name> <operator pos:start="209:24" pos:end="209:24">-</operator> <name pos:start="209:26" pos:end="209:28">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="213:5" pos:end="213:19">case <expr pos:start="213:10" pos:end="213:18"><name pos:start="213:10" pos:end="213:18">SYS_READC</name></expr>:</case>

       <comment type="block" pos:start="215:8" pos:end="215:59">/* XXX: Read from debug cosole. Not implemented.  */</comment>

        <return pos:start="217:9" pos:end="217:17">return <expr pos:start="217:16" pos:end="217:16"><literal type="number" pos:start="217:16" pos:end="217:16">0</literal></expr>;</return>

    <case pos:start="219:5" pos:end="219:19">case <expr pos:start="219:10" pos:end="219:18"><name pos:start="219:10" pos:end="219:18">SYS_ISTTY</name></expr>:</case>

        <if_stmt pos:start="221:9" pos:end="231:9"><if pos:start="221:9" pos:end="227:9">if <condition pos:start="221:12" pos:end="221:31">(<expr pos:start="221:13" pos:end="221:30"><call pos:start="221:13" pos:end="221:30"><name pos:start="221:13" pos:end="221:28">use_gdb_syscalls</name><argument_list pos:start="221:29" pos:end="221:30">()</argument_list></call></expr>)</condition> <block pos:start="221:33" pos:end="227:9">{<block_content pos:start="223:13" pos:end="225:32">

            <expr_stmt pos:start="223:13" pos:end="223:61"><expr pos:start="223:13" pos:end="223:60"><call pos:start="223:13" pos:end="223:60"><name pos:start="223:13" pos:end="223:26">gdb_do_syscall</name><argument_list pos:start="223:27" pos:end="223:60">(<argument pos:start="223:28" pos:end="223:38"><expr pos:start="223:28" pos:end="223:38"><name pos:start="223:28" pos:end="223:38">arm_semi_cb</name></expr></argument>, <argument pos:start="223:41" pos:end="223:51"><expr pos:start="223:41" pos:end="223:51"><literal type="string" pos:start="223:41" pos:end="223:51">"isatty,%x"</literal></expr></argument>, <argument pos:start="223:54" pos:end="223:59"><expr pos:start="223:54" pos:end="223:59"><call pos:start="223:54" pos:end="223:59"><name pos:start="223:54" pos:end="223:56">ARG</name><argument_list pos:start="223:57" pos:end="223:59">(<argument pos:start="223:58" pos:end="223:58"><expr pos:start="223:58" pos:end="223:58"><literal type="number" pos:start="223:58" pos:end="223:58">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="225:13" pos:end="225:32">return <expr pos:start="225:20" pos:end="225:31"><name pos:start="225:20" pos:end="225:31"><name pos:start="225:20" pos:end="225:22">env</name><operator pos:start="225:23" pos:end="225:24">-&gt;</operator><name pos:start="225:25" pos:end="225:28">regs</name><index pos:start="225:29" pos:end="225:31">[<expr pos:start="225:30" pos:end="225:30"><literal type="number" pos:start="225:30" pos:end="225:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="227:11" pos:end="231:9">else <block pos:start="227:16" pos:end="231:9">{<block_content pos:start="229:13" pos:end="229:34">

            <return pos:start="229:13" pos:end="229:34">return <expr pos:start="229:20" pos:end="229:33"><call pos:start="229:20" pos:end="229:33"><name pos:start="229:20" pos:end="229:25">isatty</name><argument_list pos:start="229:26" pos:end="229:33">(<argument pos:start="229:27" pos:end="229:32"><expr pos:start="229:27" pos:end="229:32"><call pos:start="229:27" pos:end="229:32"><name pos:start="229:27" pos:end="229:29">ARG</name><argument_list pos:start="229:30" pos:end="229:32">(<argument pos:start="229:31" pos:end="229:31"><expr pos:start="229:31" pos:end="229:31"><literal type="number" pos:start="229:31" pos:end="229:31">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="233:5" pos:end="233:18">case <expr pos:start="233:10" pos:end="233:17"><name pos:start="233:10" pos:end="233:17">SYS_SEEK</name></expr>:</case>

        <if_stmt pos:start="235:9" pos:end="251:9"><if pos:start="235:9" pos:end="241:9">if <condition pos:start="235:12" pos:end="235:31">(<expr pos:start="235:13" pos:end="235:30"><call pos:start="235:13" pos:end="235:30"><name pos:start="235:13" pos:end="235:28">use_gdb_syscalls</name><argument_list pos:start="235:29" pos:end="235:30">()</argument_list></call></expr>)</condition> <block pos:start="235:33" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:32">

            <expr_stmt pos:start="237:13" pos:end="237:73"><expr pos:start="237:13" pos:end="237:72"><call pos:start="237:13" pos:end="237:72"><name pos:start="237:13" pos:end="237:26">gdb_do_syscall</name><argument_list pos:start="237:27" pos:end="237:72">(<argument pos:start="237:28" pos:end="237:38"><expr pos:start="237:28" pos:end="237:38"><name pos:start="237:28" pos:end="237:38">arm_semi_cb</name></expr></argument>, <argument pos:start="237:41" pos:end="237:55"><expr pos:start="237:41" pos:end="237:55"><literal type="string" pos:start="237:41" pos:end="237:55">"lseek,%x,%x,0"</literal></expr></argument>, <argument pos:start="237:58" pos:end="237:63"><expr pos:start="237:58" pos:end="237:63"><call pos:start="237:58" pos:end="237:63"><name pos:start="237:58" pos:end="237:60">ARG</name><argument_list pos:start="237:61" pos:end="237:63">(<argument pos:start="237:62" pos:end="237:62"><expr pos:start="237:62" pos:end="237:62"><literal type="number" pos:start="237:62" pos:end="237:62">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="237:66" pos:end="237:71"><expr pos:start="237:66" pos:end="237:71"><call pos:start="237:66" pos:end="237:71"><name pos:start="237:66" pos:end="237:68">ARG</name><argument_list pos:start="237:69" pos:end="237:71">(<argument pos:start="237:70" pos:end="237:70"><expr pos:start="237:70" pos:end="237:70"><literal type="number" pos:start="237:70" pos:end="237:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="239:13" pos:end="239:32">return <expr pos:start="239:20" pos:end="239:31"><name pos:start="239:20" pos:end="239:31"><name pos:start="239:20" pos:end="239:22">env</name><operator pos:start="239:23" pos:end="239:24">-&gt;</operator><name pos:start="239:25" pos:end="239:28">regs</name><index pos:start="239:29" pos:end="239:31">[<expr pos:start="239:30" pos:end="239:30"><literal type="number" pos:start="239:30" pos:end="239:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="241:11" pos:end="251:9">else <block pos:start="241:16" pos:end="251:9">{<block_content pos:start="243:13" pos:end="249:21">

            <expr_stmt pos:start="243:13" pos:end="243:69"><expr pos:start="243:13" pos:end="243:68"><name pos:start="243:13" pos:end="243:15">ret</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <call pos:start="243:19" pos:end="243:68"><name pos:start="243:19" pos:end="243:31">set_swi_errno</name><argument_list pos:start="243:32" pos:end="243:68">(<argument pos:start="243:33" pos:end="243:34"><expr pos:start="243:33" pos:end="243:34"><name pos:start="243:33" pos:end="243:34">ts</name></expr></argument>, <argument pos:start="243:37" pos:end="243:67"><expr pos:start="243:37" pos:end="243:67"><call pos:start="243:37" pos:end="243:67"><name pos:start="243:37" pos:end="243:41">lseek</name><argument_list pos:start="243:42" pos:end="243:67">(<argument pos:start="243:43" pos:end="243:48"><expr pos:start="243:43" pos:end="243:48"><call pos:start="243:43" pos:end="243:48"><name pos:start="243:43" pos:end="243:45">ARG</name><argument_list pos:start="243:46" pos:end="243:48">(<argument pos:start="243:47" pos:end="243:47"><expr pos:start="243:47" pos:end="243:47"><literal type="number" pos:start="243:47" pos:end="243:47">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="243:51" pos:end="243:56"><expr pos:start="243:51" pos:end="243:56"><call pos:start="243:51" pos:end="243:56"><name pos:start="243:51" pos:end="243:53">ARG</name><argument_list pos:start="243:54" pos:end="243:56">(<argument pos:start="243:55" pos:end="243:55"><expr pos:start="243:55" pos:end="243:55"><literal type="number" pos:start="243:55" pos:end="243:55">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="243:59" pos:end="243:66"><expr pos:start="243:59" pos:end="243:66"><name pos:start="243:59" pos:end="243:66">SEEK_SET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="245:13" pos:end="247:24"><if pos:start="245:13" pos:end="247:24">if <condition pos:start="245:16" pos:end="245:36">(<expr pos:start="245:17" pos:end="245:35"><name pos:start="245:17" pos:end="245:19">ret</name> <operator pos:start="245:21" pos:end="245:22">==</operator> <operator pos:start="245:24" pos:end="245:24">(</operator><name pos:start="245:25" pos:end="245:32">uint32_t</name><operator pos:start="245:33" pos:end="245:33">)</operator><operator pos:start="245:34" pos:end="245:34">-</operator><literal type="number" pos:start="245:35" pos:end="245:35">1</literal></expr>)</condition><block type="pseudo" pos:start="247:15" pos:end="247:24"><block_content pos:start="247:15" pos:end="247:24">

              <return pos:start="247:15" pos:end="247:24">return <expr pos:start="247:22" pos:end="247:23"><operator pos:start="247:22" pos:end="247:22">-</operator><literal type="number" pos:start="247:23" pos:end="247:23">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="249:13" pos:end="249:21">return <expr pos:start="249:20" pos:end="249:20"><literal type="number" pos:start="249:20" pos:end="249:20">0</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="253:5" pos:end="253:18">case <expr pos:start="253:10" pos:end="253:17"><name pos:start="253:10" pos:end="253:17">SYS_FLEN</name></expr>:</case>

        <if_stmt pos:start="255:9" pos:end="275:9"><if pos:start="255:9" pos:end="263:9">if <condition pos:start="255:12" pos:end="255:31">(<expr pos:start="255:13" pos:end="255:30"><call pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:28">use_gdb_syscalls</name><argument_list pos:start="255:29" pos:end="255:30">()</argument_list></call></expr>)</condition> <block pos:start="255:33" pos:end="263:9">{<block_content pos:start="257:13" pos:end="261:32">

            <expr_stmt pos:start="257:13" pos:end="259:53"><expr pos:start="257:13" pos:end="259:52"><call pos:start="257:13" pos:end="259:52"><name pos:start="257:13" pos:end="257:26">gdb_do_syscall</name><argument_list pos:start="257:27" pos:end="259:52">(<argument pos:start="257:28" pos:end="257:43"><expr pos:start="257:28" pos:end="257:43"><name pos:start="257:28" pos:end="257:43">arm_semi_flen_cb</name></expr></argument>, <argument pos:start="257:46" pos:end="257:58"><expr pos:start="257:46" pos:end="257:58"><literal type="string" pos:start="257:46" pos:end="257:58">"fstat,%x,%x"</literal></expr></argument>,

			   <argument pos:start="259:28" pos:end="259:33"><expr pos:start="259:28" pos:end="259:33"><call pos:start="259:28" pos:end="259:33"><name pos:start="259:28" pos:end="259:30">ARG</name><argument_list pos:start="259:31" pos:end="259:33">(<argument pos:start="259:32" pos:end="259:32"><expr pos:start="259:32" pos:end="259:32"><literal type="number" pos:start="259:32" pos:end="259:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="259:36" pos:end="259:51"><expr pos:start="259:36" pos:end="259:51"><name pos:start="259:36" pos:end="259:48"><name pos:start="259:36" pos:end="259:38">env</name><operator pos:start="259:39" pos:end="259:40">-&gt;</operator><name pos:start="259:41" pos:end="259:44">regs</name><index pos:start="259:45" pos:end="259:48">[<expr pos:start="259:46" pos:end="259:47"><literal type="number" pos:start="259:46" pos:end="259:47">13</literal></expr>]</index></name><operator pos:start="259:49" pos:end="259:49">-</operator><literal type="number" pos:start="259:50" pos:end="259:51">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="261:13" pos:end="261:32">return <expr pos:start="261:20" pos:end="261:31"><name pos:start="261:20" pos:end="261:31"><name pos:start="261:20" pos:end="261:22">env</name><operator pos:start="261:23" pos:end="261:24">-&gt;</operator><name pos:start="261:25" pos:end="261:28">regs</name><index pos:start="261:29" pos:end="261:31">[<expr pos:start="261:30" pos:end="261:30"><literal type="number" pos:start="261:30" pos:end="261:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="263:11" pos:end="275:9">else <block pos:start="263:16" pos:end="275:9">{<block_content pos:start="265:13" pos:end="273:31">

            <decl_stmt pos:start="265:13" pos:end="265:28"><decl pos:start="265:13" pos:end="265:27"><type pos:start="265:13" pos:end="265:23"><name pos:start="265:13" pos:end="265:23"><name pos:start="265:13" pos:end="265:18">struct</name> <name pos:start="265:20" pos:end="265:23">stat</name></name></type> <name pos:start="265:25" pos:end="265:27">buf</name></decl>;</decl_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:57"><expr pos:start="267:13" pos:end="267:56"><name pos:start="267:13" pos:end="267:15">ret</name> <operator pos:start="267:17" pos:end="267:17">=</operator> <call pos:start="267:19" pos:end="267:56"><name pos:start="267:19" pos:end="267:31">set_swi_errno</name><argument_list pos:start="267:32" pos:end="267:56">(<argument pos:start="267:33" pos:end="267:34"><expr pos:start="267:33" pos:end="267:34"><name pos:start="267:33" pos:end="267:34">ts</name></expr></argument>, <argument pos:start="267:37" pos:end="267:55"><expr pos:start="267:37" pos:end="267:55"><call pos:start="267:37" pos:end="267:55"><name pos:start="267:37" pos:end="267:41">fstat</name><argument_list pos:start="267:42" pos:end="267:55">(<argument pos:start="267:43" pos:end="267:48"><expr pos:start="267:43" pos:end="267:48"><call pos:start="267:43" pos:end="267:48"><name pos:start="267:43" pos:end="267:45">ARG</name><argument_list pos:start="267:46" pos:end="267:48">(<argument pos:start="267:47" pos:end="267:47"><expr pos:start="267:47" pos:end="267:47"><literal type="number" pos:start="267:47" pos:end="267:47">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="267:51" pos:end="267:54"><expr pos:start="267:51" pos:end="267:54"><operator pos:start="267:51" pos:end="267:51">&amp;</operator><name pos:start="267:52" pos:end="267:54">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="269:13" pos:end="271:26"><if pos:start="269:13" pos:end="271:26">if <condition pos:start="269:16" pos:end="269:36">(<expr pos:start="269:17" pos:end="269:35"><name pos:start="269:17" pos:end="269:19">ret</name> <operator pos:start="269:21" pos:end="269:22">==</operator> <operator pos:start="269:24" pos:end="269:24">(</operator><name pos:start="269:25" pos:end="269:32">uint32_t</name><operator pos:start="269:33" pos:end="269:33">)</operator><operator pos:start="269:34" pos:end="269:34">-</operator><literal type="number" pos:start="269:35" pos:end="269:35">1</literal></expr>)</condition><block type="pseudo" pos:start="271:17" pos:end="271:26"><block_content pos:start="271:17" pos:end="271:26">

                <return pos:start="271:17" pos:end="271:26">return <expr pos:start="271:24" pos:end="271:25"><operator pos:start="271:24" pos:end="271:24">-</operator><literal type="number" pos:start="271:25" pos:end="271:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="273:13" pos:end="273:31">return <expr pos:start="273:20" pos:end="273:30"><name pos:start="273:20" pos:end="273:30"><name pos:start="273:20" pos:end="273:22">buf</name><operator pos:start="273:23" pos:end="273:23">.</operator><name pos:start="273:24" pos:end="273:30">st_size</name></name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="277:5" pos:end="277:20">case <expr pos:start="277:10" pos:end="277:19"><name pos:start="277:10" pos:end="277:19">SYS_TMPNAM</name></expr>:</case>

        <comment type="block" pos:start="279:9" pos:end="279:36">/* XXX: Not implemented.  */</comment>

        <return pos:start="281:9" pos:end="281:18">return <expr pos:start="281:16" pos:end="281:17"><operator pos:start="281:16" pos:end="281:16">-</operator><literal type="number" pos:start="281:17" pos:end="281:17">1</literal></expr>;</return>

    <case pos:start="283:5" pos:end="283:20">case <expr pos:start="283:10" pos:end="283:19"><name pos:start="283:10" pos:end="283:19">SYS_REMOVE</name></expr>:</case>

        <if_stmt pos:start="285:9" pos:end="303:9"><if pos:start="285:9" pos:end="291:9">if <condition pos:start="285:12" pos:end="285:31">(<expr pos:start="285:13" pos:end="285:30"><call pos:start="285:13" pos:end="285:30"><name pos:start="285:13" pos:end="285:28">use_gdb_syscalls</name><argument_list pos:start="285:29" pos:end="285:30">()</argument_list></call></expr>)</condition> <block pos:start="285:33" pos:end="291:9">{<block_content pos:start="287:13" pos:end="289:31">

            <expr_stmt pos:start="287:13" pos:end="287:76"><expr pos:start="287:13" pos:end="287:75"><call pos:start="287:13" pos:end="287:75"><name pos:start="287:13" pos:end="287:26">gdb_do_syscall</name><argument_list pos:start="287:27" pos:end="287:75">(<argument pos:start="287:28" pos:end="287:38"><expr pos:start="287:28" pos:end="287:38"><name pos:start="287:28" pos:end="287:38">arm_semi_cb</name></expr></argument>, <argument pos:start="287:41" pos:end="287:51"><expr pos:start="287:41" pos:end="287:51"><literal type="string" pos:start="287:41" pos:end="287:51">"unlink,%s"</literal></expr></argument>, <argument pos:start="287:54" pos:end="287:59"><expr pos:start="287:54" pos:end="287:59"><call pos:start="287:54" pos:end="287:59"><name pos:start="287:54" pos:end="287:56">ARG</name><argument_list pos:start="287:57" pos:end="287:59">(<argument pos:start="287:58" pos:end="287:58"><expr pos:start="287:58" pos:end="287:58"><literal type="number" pos:start="287:58" pos:end="287:58">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="287:62" pos:end="287:74"><expr pos:start="287:62" pos:end="287:74"><operator pos:start="287:62" pos:end="287:62">(</operator><name pos:start="287:63" pos:end="287:65">int</name><operator pos:start="287:66" pos:end="287:66">)</operator><call pos:start="287:67" pos:end="287:72"><name pos:start="287:67" pos:end="287:69">ARG</name><argument_list pos:start="287:70" pos:end="287:72">(<argument pos:start="287:71" pos:end="287:71"><expr pos:start="287:71" pos:end="287:71"><literal type="number" pos:start="287:71" pos:end="287:71">1</literal></expr></argument>)</argument_list></call><operator pos:start="287:73" pos:end="287:73">+</operator><literal type="number" pos:start="287:74" pos:end="287:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:31"><expr pos:start="289:13" pos:end="289:30"><name pos:start="289:13" pos:end="289:15">ret</name> <operator pos:start="289:17" pos:end="289:17">=</operator> <name pos:start="289:19" pos:end="289:30"><name pos:start="289:19" pos:end="289:21">env</name><operator pos:start="289:22" pos:end="289:23">-&gt;</operator><name pos:start="289:24" pos:end="289:27">regs</name><index pos:start="289:28" pos:end="289:30">[<expr pos:start="289:29" pos:end="289:29"><literal type="number" pos:start="289:29" pos:end="289:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="291:11" pos:end="303:9">else <block pos:start="291:16" pos:end="303:9">{<block_content pos:start="293:13" pos:end="301:38">

            <if_stmt pos:start="293:13" pos:end="297:36"><if pos:start="293:13" pos:end="297:36">if <condition pos:start="293:16" pos:end="293:48">(<expr pos:start="293:17" pos:end="293:47"><operator pos:start="293:17" pos:end="293:17">!</operator><operator pos:start="293:18" pos:end="293:18">(</operator><name pos:start="293:19" pos:end="293:19">s</name> <operator pos:start="293:21" pos:end="293:21">=</operator> <call pos:start="293:23" pos:end="293:46"><name pos:start="293:23" pos:end="293:38">lock_user_string</name><argument_list pos:start="293:39" pos:end="293:46">(<argument pos:start="293:40" pos:end="293:45"><expr pos:start="293:40" pos:end="293:45"><call pos:start="293:40" pos:end="293:45"><name pos:start="293:40" pos:end="293:42">ARG</name><argument_list pos:start="293:43" pos:end="293:45">(<argument pos:start="293:44" pos:end="293:44"><expr pos:start="293:44" pos:end="293:44"><literal type="number" pos:start="293:44" pos:end="293:44">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="293:47" pos:end="293:47">)</operator></expr>)</condition><block type="pseudo" pos:start="297:17" pos:end="297:36"><block_content pos:start="297:17" pos:end="297:36">

                <comment type="block" pos:start="295:17" pos:end="295:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="297:17" pos:end="297:36">return <expr pos:start="297:24" pos:end="297:35"><operator pos:start="297:24" pos:end="297:24">(</operator><name pos:start="297:25" pos:end="297:32">uint32_t</name><operator pos:start="297:33" pos:end="297:33">)</operator><operator pos:start="297:34" pos:end="297:34">-</operator><literal type="number" pos:start="297:35" pos:end="297:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:48"><expr pos:start="299:13" pos:end="299:47"><name pos:start="299:13" pos:end="299:15">ret</name> <operator pos:start="299:17" pos:end="299:17">=</operator>  <call pos:start="299:20" pos:end="299:47"><name pos:start="299:20" pos:end="299:32">set_swi_errno</name><argument_list pos:start="299:33" pos:end="299:47">(<argument pos:start="299:34" pos:end="299:35"><expr pos:start="299:34" pos:end="299:35"><name pos:start="299:34" pos:end="299:35">ts</name></expr></argument>, <argument pos:start="299:38" pos:end="299:46"><expr pos:start="299:38" pos:end="299:46"><call pos:start="299:38" pos:end="299:46"><name pos:start="299:38" pos:end="299:43">remove</name><argument_list pos:start="299:44" pos:end="299:46">(<argument pos:start="299:45" pos:end="299:45"><expr pos:start="299:45" pos:end="299:45"><name pos:start="299:45" pos:end="299:45">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:38"><expr pos:start="301:13" pos:end="301:37"><call pos:start="301:13" pos:end="301:37"><name pos:start="301:13" pos:end="301:23">unlock_user</name><argument_list pos:start="301:24" pos:end="301:37">(<argument pos:start="301:25" pos:end="301:25"><expr pos:start="301:25" pos:end="301:25"><name pos:start="301:25" pos:end="301:25">s</name></expr></argument>, <argument pos:start="301:28" pos:end="301:33"><expr pos:start="301:28" pos:end="301:33"><call pos:start="301:28" pos:end="301:33"><name pos:start="301:28" pos:end="301:30">ARG</name><argument_list pos:start="301:31" pos:end="301:33">(<argument pos:start="301:32" pos:end="301:32"><expr pos:start="301:32" pos:end="301:32"><literal type="number" pos:start="301:32" pos:end="301:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="301:36" pos:end="301:36"><expr pos:start="301:36" pos:end="301:36"><literal type="number" pos:start="301:36" pos:end="301:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="305:9" pos:end="305:19">return <expr pos:start="305:16" pos:end="305:18"><name pos:start="305:16" pos:end="305:18">ret</name></expr>;</return>

    <case pos:start="307:5" pos:end="307:20">case <expr pos:start="307:10" pos:end="307:19"><name pos:start="307:10" pos:end="307:19">SYS_RENAME</name></expr>:</case>

        <if_stmt pos:start="309:9" pos:end="345:9"><if pos:start="309:9" pos:end="317:9">if <condition pos:start="309:12" pos:end="309:31">(<expr pos:start="309:13" pos:end="309:30"><call pos:start="309:13" pos:end="309:30"><name pos:start="309:13" pos:end="309:28">use_gdb_syscalls</name><argument_list pos:start="309:29" pos:end="309:30">()</argument_list></call></expr>)</condition> <block pos:start="309:33" pos:end="317:9">{<block_content pos:start="311:13" pos:end="315:32">

            <expr_stmt pos:start="311:13" pos:end="313:73"><expr pos:start="311:13" pos:end="313:72"><call pos:start="311:13" pos:end="313:72"><name pos:start="311:13" pos:end="311:26">gdb_do_syscall</name><argument_list pos:start="311:27" pos:end="313:72">(<argument pos:start="311:28" pos:end="311:38"><expr pos:start="311:28" pos:end="311:38"><name pos:start="311:28" pos:end="311:38">arm_semi_cb</name></expr></argument>, <argument pos:start="311:41" pos:end="311:54"><expr pos:start="311:41" pos:end="311:54"><literal type="string" pos:start="311:41" pos:end="311:54">"rename,%s,%s"</literal></expr></argument>,

                           <argument pos:start="313:28" pos:end="313:33"><expr pos:start="313:28" pos:end="313:33"><call pos:start="313:28" pos:end="313:33"><name pos:start="313:28" pos:end="313:30">ARG</name><argument_list pos:start="313:31" pos:end="313:33">(<argument pos:start="313:32" pos:end="313:32"><expr pos:start="313:32" pos:end="313:32"><literal type="number" pos:start="313:32" pos:end="313:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="313:36" pos:end="313:48"><expr pos:start="313:36" pos:end="313:48"><operator pos:start="313:36" pos:end="313:36">(</operator><name pos:start="313:37" pos:end="313:39">int</name><operator pos:start="313:40" pos:end="313:40">)</operator><call pos:start="313:41" pos:end="313:46"><name pos:start="313:41" pos:end="313:43">ARG</name><argument_list pos:start="313:44" pos:end="313:46">(<argument pos:start="313:45" pos:end="313:45"><expr pos:start="313:45" pos:end="313:45"><literal type="number" pos:start="313:45" pos:end="313:45">1</literal></expr></argument>)</argument_list></call><operator pos:start="313:47" pos:end="313:47">+</operator><literal type="number" pos:start="313:48" pos:end="313:48">1</literal></expr></argument>, <argument pos:start="313:51" pos:end="313:56"><expr pos:start="313:51" pos:end="313:56"><call pos:start="313:51" pos:end="313:56"><name pos:start="313:51" pos:end="313:53">ARG</name><argument_list pos:start="313:54" pos:end="313:56">(<argument pos:start="313:55" pos:end="313:55"><expr pos:start="313:55" pos:end="313:55"><literal type="number" pos:start="313:55" pos:end="313:55">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="313:59" pos:end="313:71"><expr pos:start="313:59" pos:end="313:71"><operator pos:start="313:59" pos:end="313:59">(</operator><name pos:start="313:60" pos:end="313:62">int</name><operator pos:start="313:63" pos:end="313:63">)</operator><call pos:start="313:64" pos:end="313:69"><name pos:start="313:64" pos:end="313:66">ARG</name><argument_list pos:start="313:67" pos:end="313:69">(<argument pos:start="313:68" pos:end="313:68"><expr pos:start="313:68" pos:end="313:68"><literal type="number" pos:start="313:68" pos:end="313:68">3</literal></expr></argument>)</argument_list></call><operator pos:start="313:70" pos:end="313:70">+</operator><literal type="number" pos:start="313:71" pos:end="313:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="315:13" pos:end="315:32">return <expr pos:start="315:20" pos:end="315:31"><name pos:start="315:20" pos:end="315:31"><name pos:start="315:20" pos:end="315:22">env</name><operator pos:start="315:23" pos:end="315:24">-&gt;</operator><name pos:start="315:25" pos:end="315:28">regs</name><index pos:start="315:29" pos:end="315:31">[<expr pos:start="315:30" pos:end="315:30"><literal type="number" pos:start="315:30" pos:end="315:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="317:11" pos:end="345:9">else <block pos:start="317:16" pos:end="345:9">{<block_content pos:start="319:13" pos:end="343:23">

            <decl_stmt pos:start="319:13" pos:end="319:21"><decl pos:start="319:13" pos:end="319:20"><type pos:start="319:13" pos:end="319:18"><name pos:start="319:13" pos:end="319:16">char</name> <modifier pos:start="319:18" pos:end="319:18">*</modifier></type><name pos:start="319:19" pos:end="319:20">s2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:41"><expr pos:start="321:13" pos:end="321:40"><name pos:start="321:13" pos:end="321:13">s</name> <operator pos:start="321:15" pos:end="321:15">=</operator> <call pos:start="321:17" pos:end="321:40"><name pos:start="321:17" pos:end="321:32">lock_user_string</name><argument_list pos:start="321:33" pos:end="321:40">(<argument pos:start="321:34" pos:end="321:39"><expr pos:start="321:34" pos:end="321:39"><call pos:start="321:34" pos:end="321:39"><name pos:start="321:34" pos:end="321:36">ARG</name><argument_list pos:start="321:37" pos:end="321:39">(<argument pos:start="321:38" pos:end="321:38"><expr pos:start="321:38" pos:end="321:38"><literal type="number" pos:start="321:38" pos:end="321:38">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:42"><expr pos:start="323:13" pos:end="323:41"><name pos:start="323:13" pos:end="323:14">s2</name> <operator pos:start="323:16" pos:end="323:16">=</operator> <call pos:start="323:18" pos:end="323:41"><name pos:start="323:18" pos:end="323:33">lock_user_string</name><argument_list pos:start="323:34" pos:end="323:41">(<argument pos:start="323:35" pos:end="323:40"><expr pos:start="323:35" pos:end="323:40"><call pos:start="323:35" pos:end="323:40"><name pos:start="323:35" pos:end="323:37">ARG</name><argument_list pos:start="323:38" pos:end="323:40">(<argument pos:start="323:39" pos:end="323:39"><expr pos:start="323:39" pos:end="323:39"><literal type="number" pos:start="323:39" pos:end="323:39">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="325:13" pos:end="333:55"><if pos:start="325:13" pos:end="329:35">if <condition pos:start="325:16" pos:end="325:26">(<expr pos:start="325:17" pos:end="325:25"><operator pos:start="325:17" pos:end="325:17">!</operator><name pos:start="325:18" pos:end="325:18">s</name> <operator pos:start="325:20" pos:end="325:21">||</operator> <operator pos:start="325:23" pos:end="325:23">!</operator><name pos:start="325:24" pos:end="325:25">s2</name></expr>)</condition><block type="pseudo" pos:start="329:17" pos:end="329:35"><block_content pos:start="329:17" pos:end="329:35">

                <comment type="block" pos:start="327:17" pos:end="327:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <expr_stmt pos:start="329:17" pos:end="329:35"><expr pos:start="329:17" pos:end="329:34"><name pos:start="329:17" pos:end="329:19">ret</name> <operator pos:start="329:21" pos:end="329:21">=</operator> <operator pos:start="329:23" pos:end="329:23">(</operator><name pos:start="329:24" pos:end="329:31">uint32_t</name><operator pos:start="329:32" pos:end="329:32">)</operator><operator pos:start="329:33" pos:end="329:33">-</operator><literal type="number" pos:start="329:34" pos:end="329:34">1</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="331:13" pos:end="333:55">else<block type="pseudo" pos:start="333:17" pos:end="333:55"><block_content pos:start="333:17" pos:end="333:55">

                <expr_stmt pos:start="333:17" pos:end="333:55"><expr pos:start="333:17" pos:end="333:54"><name pos:start="333:17" pos:end="333:19">ret</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <call pos:start="333:23" pos:end="333:54"><name pos:start="333:23" pos:end="333:35">set_swi_errno</name><argument_list pos:start="333:36" pos:end="333:54">(<argument pos:start="333:37" pos:end="333:38"><expr pos:start="333:37" pos:end="333:38"><name pos:start="333:37" pos:end="333:38">ts</name></expr></argument>, <argument pos:start="333:41" pos:end="333:53"><expr pos:start="333:41" pos:end="333:53"><call pos:start="333:41" pos:end="333:53"><name pos:start="333:41" pos:end="333:46">rename</name><argument_list pos:start="333:47" pos:end="333:53">(<argument pos:start="333:48" pos:end="333:48"><expr pos:start="333:48" pos:end="333:48"><name pos:start="333:48" pos:end="333:48">s</name></expr></argument>, <argument pos:start="333:51" pos:end="333:52"><expr pos:start="333:51" pos:end="333:52"><name pos:start="333:51" pos:end="333:52">s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="335:13" pos:end="337:43"><if pos:start="335:13" pos:end="337:43">if <condition pos:start="335:16" pos:end="335:19">(<expr pos:start="335:17" pos:end="335:18"><name pos:start="335:17" pos:end="335:18">s2</name></expr>)</condition><block type="pseudo" pos:start="337:17" pos:end="337:43"><block_content pos:start="337:17" pos:end="337:43">

                <expr_stmt pos:start="337:17" pos:end="337:43"><expr pos:start="337:17" pos:end="337:42"><call pos:start="337:17" pos:end="337:42"><name pos:start="337:17" pos:end="337:27">unlock_user</name><argument_list pos:start="337:28" pos:end="337:42">(<argument pos:start="337:29" pos:end="337:30"><expr pos:start="337:29" pos:end="337:30"><name pos:start="337:29" pos:end="337:30">s2</name></expr></argument>, <argument pos:start="337:33" pos:end="337:38"><expr pos:start="337:33" pos:end="337:38"><call pos:start="337:33" pos:end="337:38"><name pos:start="337:33" pos:end="337:35">ARG</name><argument_list pos:start="337:36" pos:end="337:38">(<argument pos:start="337:37" pos:end="337:37"><expr pos:start="337:37" pos:end="337:37"><literal type="number" pos:start="337:37" pos:end="337:37">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="337:41" pos:end="337:41"><expr pos:start="337:41" pos:end="337:41"><literal type="number" pos:start="337:41" pos:end="337:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="339:13" pos:end="341:42"><if pos:start="339:13" pos:end="341:42">if <condition pos:start="339:16" pos:end="339:18">(<expr pos:start="339:17" pos:end="339:17"><name pos:start="339:17" pos:end="339:17">s</name></expr>)</condition><block type="pseudo" pos:start="341:17" pos:end="341:42"><block_content pos:start="341:17" pos:end="341:42">

                <expr_stmt pos:start="341:17" pos:end="341:42"><expr pos:start="341:17" pos:end="341:41"><call pos:start="341:17" pos:end="341:41"><name pos:start="341:17" pos:end="341:27">unlock_user</name><argument_list pos:start="341:28" pos:end="341:41">(<argument pos:start="341:29" pos:end="341:29"><expr pos:start="341:29" pos:end="341:29"><name pos:start="341:29" pos:end="341:29">s</name></expr></argument>, <argument pos:start="341:32" pos:end="341:37"><expr pos:start="341:32" pos:end="341:37"><call pos:start="341:32" pos:end="341:37"><name pos:start="341:32" pos:end="341:34">ARG</name><argument_list pos:start="341:35" pos:end="341:37">(<argument pos:start="341:36" pos:end="341:36"><expr pos:start="341:36" pos:end="341:36"><literal type="number" pos:start="341:36" pos:end="341:36">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="341:40" pos:end="341:40"><expr pos:start="341:40" pos:end="341:40"><literal type="number" pos:start="341:40" pos:end="341:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return pos:start="343:13" pos:end="343:23">return <expr pos:start="343:20" pos:end="343:22"><name pos:start="343:20" pos:end="343:22">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="347:5" pos:end="347:19">case <expr pos:start="347:10" pos:end="347:18"><name pos:start="347:10" pos:end="347:18">SYS_CLOCK</name></expr>:</case>

        <return pos:start="349:9" pos:end="349:48">return <expr pos:start="349:16" pos:end="349:47"><call pos:start="349:16" pos:end="349:22"><name pos:start="349:16" pos:end="349:20">clock</name><argument_list pos:start="349:21" pos:end="349:22">()</argument_list></call> <operator pos:start="349:24" pos:end="349:24">/</operator> <operator pos:start="349:26" pos:end="349:26">(</operator><name pos:start="349:27" pos:end="349:40">CLOCKS_PER_SEC</name> <operator pos:start="349:42" pos:end="349:42">/</operator> <literal type="number" pos:start="349:44" pos:end="349:46">100</literal><operator pos:start="349:47" pos:end="349:47">)</operator></expr>;</return>

    <case pos:start="351:5" pos:end="351:18">case <expr pos:start="351:10" pos:end="351:17"><name pos:start="351:10" pos:end="351:17">SYS_TIME</name></expr>:</case>

        <return pos:start="353:9" pos:end="353:45">return <expr pos:start="353:16" pos:end="353:44"><call pos:start="353:16" pos:end="353:44"><name pos:start="353:16" pos:end="353:28">set_swi_errno</name><argument_list pos:start="353:29" pos:end="353:44">(<argument pos:start="353:30" pos:end="353:31"><expr pos:start="353:30" pos:end="353:31"><name pos:start="353:30" pos:end="353:31">ts</name></expr></argument>, <argument pos:start="353:34" pos:end="353:43"><expr pos:start="353:34" pos:end="353:43"><call pos:start="353:34" pos:end="353:43"><name pos:start="353:34" pos:end="353:37">time</name><argument_list pos:start="353:38" pos:end="353:43">(<argument pos:start="353:39" pos:end="353:42"><expr pos:start="353:39" pos:end="353:42"><name pos:start="353:39" pos:end="353:42">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="355:5" pos:end="355:20">case <expr pos:start="355:10" pos:end="355:19"><name pos:start="355:10" pos:end="355:19">SYS_SYSTEM</name></expr>:</case>

        <if_stmt pos:start="357:9" pos:end="377:9"><if pos:start="357:9" pos:end="363:9">if <condition pos:start="357:12" pos:end="357:31">(<expr pos:start="357:13" pos:end="357:30"><call pos:start="357:13" pos:end="357:30"><name pos:start="357:13" pos:end="357:28">use_gdb_syscalls</name><argument_list pos:start="357:29" pos:end="357:30">()</argument_list></call></expr>)</condition> <block pos:start="357:33" pos:end="363:9">{<block_content pos:start="359:13" pos:end="361:32">

            <expr_stmt pos:start="359:13" pos:end="359:76"><expr pos:start="359:13" pos:end="359:75"><call pos:start="359:13" pos:end="359:75"><name pos:start="359:13" pos:end="359:26">gdb_do_syscall</name><argument_list pos:start="359:27" pos:end="359:75">(<argument pos:start="359:28" pos:end="359:38"><expr pos:start="359:28" pos:end="359:38"><name pos:start="359:28" pos:end="359:38">arm_semi_cb</name></expr></argument>, <argument pos:start="359:41" pos:end="359:51"><expr pos:start="359:41" pos:end="359:51"><literal type="string" pos:start="359:41" pos:end="359:51">"system,%s"</literal></expr></argument>, <argument pos:start="359:54" pos:end="359:59"><expr pos:start="359:54" pos:end="359:59"><call pos:start="359:54" pos:end="359:59"><name pos:start="359:54" pos:end="359:56">ARG</name><argument_list pos:start="359:57" pos:end="359:59">(<argument pos:start="359:58" pos:end="359:58"><expr pos:start="359:58" pos:end="359:58"><literal type="number" pos:start="359:58" pos:end="359:58">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="359:62" pos:end="359:74"><expr pos:start="359:62" pos:end="359:74"><operator pos:start="359:62" pos:end="359:62">(</operator><name pos:start="359:63" pos:end="359:65">int</name><operator pos:start="359:66" pos:end="359:66">)</operator><call pos:start="359:67" pos:end="359:72"><name pos:start="359:67" pos:end="359:69">ARG</name><argument_list pos:start="359:70" pos:end="359:72">(<argument pos:start="359:71" pos:end="359:71"><expr pos:start="359:71" pos:end="359:71"><literal type="number" pos:start="359:71" pos:end="359:71">1</literal></expr></argument>)</argument_list></call><operator pos:start="359:73" pos:end="359:73">+</operator><literal type="number" pos:start="359:74" pos:end="359:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="361:13" pos:end="361:32">return <expr pos:start="361:20" pos:end="361:31"><name pos:start="361:20" pos:end="361:31"><name pos:start="361:20" pos:end="361:22">env</name><operator pos:start="361:23" pos:end="361:24">-&gt;</operator><name pos:start="361:25" pos:end="361:28">regs</name><index pos:start="361:29" pos:end="361:31">[<expr pos:start="361:30" pos:end="361:30"><literal type="number" pos:start="361:30" pos:end="361:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="363:11" pos:end="377:9">else <block pos:start="363:16" pos:end="377:9">{<block_content pos:start="365:13" pos:end="375:23">

            <if_stmt pos:start="365:13" pos:end="369:36"><if pos:start="365:13" pos:end="369:36">if <condition pos:start="365:16" pos:end="365:48">(<expr pos:start="365:17" pos:end="365:47"><operator pos:start="365:17" pos:end="365:17">!</operator><operator pos:start="365:18" pos:end="365:18">(</operator><name pos:start="365:19" pos:end="365:19">s</name> <operator pos:start="365:21" pos:end="365:21">=</operator> <call pos:start="365:23" pos:end="365:46"><name pos:start="365:23" pos:end="365:38">lock_user_string</name><argument_list pos:start="365:39" pos:end="365:46">(<argument pos:start="365:40" pos:end="365:45"><expr pos:start="365:40" pos:end="365:45"><call pos:start="365:40" pos:end="365:45"><name pos:start="365:40" pos:end="365:42">ARG</name><argument_list pos:start="365:43" pos:end="365:45">(<argument pos:start="365:44" pos:end="365:44"><expr pos:start="365:44" pos:end="365:44"><literal type="number" pos:start="365:44" pos:end="365:44">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="365:47" pos:end="365:47">)</operator></expr>)</condition><block type="pseudo" pos:start="369:17" pos:end="369:36"><block_content pos:start="369:17" pos:end="369:36">

                <comment type="block" pos:start="367:17" pos:end="367:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="369:17" pos:end="369:36">return <expr pos:start="369:24" pos:end="369:35"><operator pos:start="369:24" pos:end="369:24">(</operator><name pos:start="369:25" pos:end="369:32">uint32_t</name><operator pos:start="369:33" pos:end="369:33">)</operator><operator pos:start="369:34" pos:end="369:34">-</operator><literal type="number" pos:start="369:35" pos:end="369:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:47"><expr pos:start="371:13" pos:end="371:46"><name pos:start="371:13" pos:end="371:15">ret</name> <operator pos:start="371:17" pos:end="371:17">=</operator> <call pos:start="371:19" pos:end="371:46"><name pos:start="371:19" pos:end="371:31">set_swi_errno</name><argument_list pos:start="371:32" pos:end="371:46">(<argument pos:start="371:33" pos:end="371:34"><expr pos:start="371:33" pos:end="371:34"><name pos:start="371:33" pos:end="371:34">ts</name></expr></argument>, <argument pos:start="371:37" pos:end="371:45"><expr pos:start="371:37" pos:end="371:45"><call pos:start="371:37" pos:end="371:45"><name pos:start="371:37" pos:end="371:42">system</name><argument_list pos:start="371:43" pos:end="371:45">(<argument pos:start="371:44" pos:end="371:44"><expr pos:start="371:44" pos:end="371:44"><name pos:start="371:44" pos:end="371:44">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:38"><expr pos:start="373:13" pos:end="373:37"><call pos:start="373:13" pos:end="373:37"><name pos:start="373:13" pos:end="373:23">unlock_user</name><argument_list pos:start="373:24" pos:end="373:37">(<argument pos:start="373:25" pos:end="373:25"><expr pos:start="373:25" pos:end="373:25"><name pos:start="373:25" pos:end="373:25">s</name></expr></argument>, <argument pos:start="373:28" pos:end="373:33"><expr pos:start="373:28" pos:end="373:33"><call pos:start="373:28" pos:end="373:33"><name pos:start="373:28" pos:end="373:30">ARG</name><argument_list pos:start="373:31" pos:end="373:33">(<argument pos:start="373:32" pos:end="373:32"><expr pos:start="373:32" pos:end="373:32"><literal type="number" pos:start="373:32" pos:end="373:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="373:36" pos:end="373:36"><expr pos:start="373:36" pos:end="373:36"><literal type="number" pos:start="373:36" pos:end="373:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="375:13" pos:end="375:23">return <expr pos:start="375:20" pos:end="375:22"><name pos:start="375:20" pos:end="375:22">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="379:5" pos:end="382:0">case <expr pos:start="379:10" pos:end="379:18"><name pos:start="379:10" pos:end="379:18">SYS_ERRNO</name></expr>:</case>

<cpp:ifdef pos:start="381:1" pos:end="381:23">#<cpp:directive pos:start="381:2" pos:end="381:6">ifdef</cpp:directive> <name pos:start="381:8" pos:end="381:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <return pos:start="383:9" pos:end="386:0">return <expr pos:start="383:16" pos:end="383:28"><name pos:start="383:16" pos:end="383:28"><name pos:start="383:16" pos:end="383:17">ts</name><operator pos:start="383:18" pos:end="383:19">-&gt;</operator><name pos:start="383:20" pos:end="383:28">swi_errno</name></name></expr>;</return>

<cpp:else pos:start="385:1" pos:end="385:5">#<cpp:directive pos:start="385:2" pos:end="385:5">else</cpp:directive></cpp:else>

        <return pos:start="387:9" pos:end="390:0">return <expr pos:start="387:16" pos:end="387:26"><name pos:start="387:16" pos:end="387:26">syscall_err</name></expr>;</return>

<cpp:endif pos:start="389:1" pos:end="389:6">#<cpp:directive pos:start="389:2" pos:end="389:6">endif</cpp:directive></cpp:endif>

    <case pos:start="391:5" pos:end="394:0">case <expr pos:start="391:10" pos:end="391:24"><name pos:start="391:10" pos:end="391:24">SYS_GET_CMDLINE</name></expr>:</case>

<cpp:ifdef pos:start="393:1" pos:end="393:23">#<cpp:directive pos:start="393:2" pos:end="393:6">ifdef</cpp:directive> <name pos:start="393:8" pos:end="393:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <comment type="block" pos:start="395:9" pos:end="395:58">/* Build a commandline from the original argv.  */</comment>

        <block pos:start="397:9" pos:end="512:0">{<block_content pos:start="399:13" pos:end="507:72">

            <decl_stmt pos:start="399:13" pos:end="399:37"><decl pos:start="399:13" pos:end="399:36"><type pos:start="399:13" pos:end="399:18"><name pos:start="399:13" pos:end="399:16">char</name> <modifier pos:start="399:18" pos:end="399:18">*</modifier></type><name pos:start="399:19" pos:end="399:36">arm_cmdline_buffer</name></decl>;</decl_stmt>

            <decl_stmt pos:start="401:13" pos:end="401:44"><decl pos:start="401:13" pos:end="401:43"><type pos:start="401:13" pos:end="401:24"><specifier pos:start="401:13" pos:end="401:17">const</specifier> <name pos:start="401:19" pos:end="401:22">char</name> <modifier pos:start="401:24" pos:end="401:24">*</modifier></type><name pos:start="401:25" pos:end="401:43">host_cmdline_buffer</name></decl>;</decl_stmt>



            <decl_stmt pos:start="405:13" pos:end="405:27"><decl pos:start="405:13" pos:end="405:26"><type pos:start="405:13" pos:end="405:24"><name pos:start="405:13" pos:end="405:20">unsigned</name> <name pos:start="405:22" pos:end="405:24">int</name></type> <name pos:start="405:26" pos:end="405:26">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="407:13" pos:end="407:50"><decl pos:start="407:13" pos:end="407:49"><type pos:start="407:13" pos:end="407:24"><name pos:start="407:13" pos:end="407:20">unsigned</name> <name pos:start="407:22" pos:end="407:24">int</name></type> <name pos:start="407:26" pos:end="407:40">arm_cmdline_len</name> <init pos:start="407:42" pos:end="407:49">= <expr pos:start="407:44" pos:end="407:49"><call pos:start="407:44" pos:end="407:49"><name pos:start="407:44" pos:end="407:46">ARG</name><argument_list pos:start="407:47" pos:end="407:49">(<argument pos:start="407:48" pos:end="407:48"><expr pos:start="407:48" pos:end="407:48"><literal type="number" pos:start="407:48" pos:end="407:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="409:13" pos:end="411:54"><decl pos:start="409:13" pos:end="411:53"><type pos:start="409:13" pos:end="409:24"><name pos:start="409:13" pos:end="409:20">unsigned</name> <name pos:start="409:22" pos:end="409:24">int</name></type> <name pos:start="409:26" pos:end="409:41">host_cmdline_len</name> <init pos:start="409:43" pos:end="411:53">=

                <expr pos:start="411:17" pos:end="411:53"><name pos:start="411:17" pos:end="411:33"><name pos:start="411:17" pos:end="411:18">ts</name><operator pos:start="411:19" pos:end="411:20">-&gt;</operator><name pos:start="411:21" pos:end="411:24">info</name><operator pos:start="411:25" pos:end="411:26">-&gt;</operator><name pos:start="411:27" pos:end="411:33">arg_end</name></name><operator pos:start="411:34" pos:end="411:34">-</operator><name pos:start="411:35" pos:end="411:53"><name pos:start="411:35" pos:end="411:36">ts</name><operator pos:start="411:37" pos:end="411:38">-&gt;</operator><name pos:start="411:39" pos:end="411:42">info</name><operator pos:start="411:43" pos:end="411:44">-&gt;</operator><name pos:start="411:45" pos:end="411:53">arg_start</name></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="415:13" pos:end="419:13"><if pos:start="415:13" pos:end="419:13">if <condition pos:start="415:16" pos:end="415:71">(<expr pos:start="415:17" pos:end="415:70"><operator pos:start="415:17" pos:end="415:17">!</operator><name pos:start="415:18" pos:end="415:32">arm_cmdline_len</name> <operator pos:start="415:34" pos:end="415:35">||</operator> <name pos:start="415:37" pos:end="415:52">host_cmdline_len</name> <operator pos:start="415:54" pos:end="415:54">&gt;</operator> <name pos:start="415:56" pos:end="415:70">arm_cmdline_len</name></expr>)</condition> <block pos:start="415:73" pos:end="419:13">{<block_content pos:start="417:17" pos:end="417:26">

                <return pos:start="417:17" pos:end="417:26">return <expr pos:start="417:24" pos:end="417:25"><operator pos:start="417:24" pos:end="417:24">-</operator><literal type="number" pos:start="417:25" pos:end="417:25">1</literal></expr>;</return> <comment type="block" pos:start="417:28" pos:end="417:71">/* not enough space to store command line */</comment>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="423:13" pos:end="443:13"><if pos:start="423:13" pos:end="443:13">if <condition pos:start="423:16" pos:end="423:34">(<expr pos:start="423:17" pos:end="423:33"><operator pos:start="423:17" pos:end="423:17">!</operator><name pos:start="423:18" pos:end="423:33">host_cmdline_len</name></expr>)</condition> <block pos:start="423:36" pos:end="443:13">{<block_content pos:start="429:17" pos:end="441:25">

                <comment type="block" pos:start="425:17" pos:end="427:53">/* We special-case the "empty command line" case (argc==0).

                   Just provide the terminating 0. */</comment>

                <expr_stmt pos:start="429:17" pos:end="429:75"><expr pos:start="429:17" pos:end="429:74"><name pos:start="429:17" pos:end="429:34">arm_cmdline_buffer</name> <operator pos:start="429:36" pos:end="429:36">=</operator> <call pos:start="429:38" pos:end="429:74"><name pos:start="429:38" pos:end="429:46">lock_user</name><argument_list pos:start="429:47" pos:end="429:74">(<argument pos:start="429:48" pos:end="429:59"><expr pos:start="429:48" pos:end="429:59"><name pos:start="429:48" pos:end="429:59">VERIFY_WRITE</name></expr></argument>, <argument pos:start="429:62" pos:end="429:67"><expr pos:start="429:62" pos:end="429:67"><call pos:start="429:62" pos:end="429:67"><name pos:start="429:62" pos:end="429:64">ARG</name><argument_list pos:start="429:65" pos:end="429:67">(<argument pos:start="429:66" pos:end="429:66"><expr pos:start="429:66" pos:end="429:66"><literal type="number" pos:start="429:66" pos:end="429:66">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="429:70" pos:end="429:70"><expr pos:start="429:70" pos:end="429:70"><literal type="number" pos:start="429:70" pos:end="429:70">1</literal></expr></argument>, <argument pos:start="429:73" pos:end="429:73"><expr pos:start="429:73" pos:end="429:73"><literal type="number" pos:start="429:73" pos:end="429:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="431:17" pos:end="431:42"><expr pos:start="431:17" pos:end="431:41"><name pos:start="431:17" pos:end="431:37"><name pos:start="431:17" pos:end="431:34">arm_cmdline_buffer</name><index pos:start="431:35" pos:end="431:37">[<expr pos:start="431:36" pos:end="431:36"><literal type="number" pos:start="431:36" pos:end="431:36">0</literal></expr>]</index></name> <operator pos:start="431:39" pos:end="431:39">=</operator> <literal type="number" pos:start="431:41" pos:end="431:41">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="433:59"><expr pos:start="433:17" pos:end="433:58"><call pos:start="433:17" pos:end="433:58"><name pos:start="433:17" pos:end="433:27">unlock_user</name><argument_list pos:start="433:28" pos:end="433:58">(<argument pos:start="433:29" pos:end="433:46"><expr pos:start="433:29" pos:end="433:46"><name pos:start="433:29" pos:end="433:46">arm_cmdline_buffer</name></expr></argument>, <argument pos:start="433:49" pos:end="433:54"><expr pos:start="433:49" pos:end="433:54"><call pos:start="433:49" pos:end="433:54"><name pos:start="433:49" pos:end="433:51">ARG</name><argument_list pos:start="433:52" pos:end="433:54">(<argument pos:start="433:53" pos:end="433:53"><expr pos:start="433:53" pos:end="433:53"><literal type="number" pos:start="433:53" pos:end="433:53">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="433:57" pos:end="433:57"><expr pos:start="433:57" pos:end="433:57"><literal type="number" pos:start="433:57" pos:end="433:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="437:17" pos:end="437:61">/* Adjust the commandline length argument. */</comment>

                <expr_stmt pos:start="439:17" pos:end="439:30"><expr pos:start="439:17" pos:end="439:29"><call pos:start="439:17" pos:end="439:29"><name pos:start="439:17" pos:end="439:23">SET_ARG</name><argument_list pos:start="439:24" pos:end="439:29">(<argument pos:start="439:25" pos:end="439:25"><expr pos:start="439:25" pos:end="439:25"><literal type="number" pos:start="439:25" pos:end="439:25">1</literal></expr></argument>, <argument pos:start="439:28" pos:end="439:28"><expr pos:start="439:28" pos:end="439:28"><literal type="number" pos:start="439:28" pos:end="439:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="441:17" pos:end="441:25">return <expr pos:start="441:24" pos:end="441:24"><literal type="number" pos:start="441:24" pos:end="441:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="447:13" pos:end="447:50">/* lock the buffers on the ARM side */</comment>

            <expr_stmt pos:start="449:13" pos:end="451:69"><expr pos:start="449:13" pos:end="451:68"><name pos:start="449:13" pos:end="449:30">arm_cmdline_buffer</name> <operator pos:start="449:32" pos:end="449:32">=</operator>

                <call pos:start="451:17" pos:end="451:68"><name pos:start="451:17" pos:end="451:25">lock_user</name><argument_list pos:start="451:26" pos:end="451:68">(<argument pos:start="451:27" pos:end="451:38"><expr pos:start="451:27" pos:end="451:38"><name pos:start="451:27" pos:end="451:38">VERIFY_WRITE</name></expr></argument>, <argument pos:start="451:41" pos:end="451:46"><expr pos:start="451:41" pos:end="451:46"><call pos:start="451:41" pos:end="451:46"><name pos:start="451:41" pos:end="451:43">ARG</name><argument_list pos:start="451:44" pos:end="451:46">(<argument pos:start="451:45" pos:end="451:45"><expr pos:start="451:45" pos:end="451:45"><literal type="number" pos:start="451:45" pos:end="451:45">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="451:49" pos:end="451:64"><expr pos:start="451:49" pos:end="451:64"><name pos:start="451:49" pos:end="451:64">host_cmdline_len</name></expr></argument>, <argument pos:start="451:67" pos:end="451:67"><expr pos:start="451:67" pos:end="451:67"><literal type="number" pos:start="451:67" pos:end="451:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="457:60"><expr pos:start="453:13" pos:end="457:59"><name pos:start="453:13" pos:end="453:31">host_cmdline_buffer</name> <operator pos:start="453:33" pos:end="453:33">=</operator>

                <call pos:start="455:17" pos:end="457:59"><name pos:start="455:17" pos:end="455:25">lock_user</name><argument_list pos:start="455:26" pos:end="457:59">(<argument pos:start="455:27" pos:end="455:37"><expr pos:start="455:27" pos:end="455:37"><name pos:start="455:27" pos:end="455:37">VERIFY_READ</name></expr></argument>, <argument pos:start="455:40" pos:end="455:58"><expr pos:start="455:40" pos:end="455:58"><name pos:start="455:40" pos:end="455:58"><name pos:start="455:40" pos:end="455:41">ts</name><operator pos:start="455:42" pos:end="455:43">-&gt;</operator><name pos:start="455:44" pos:end="455:47">info</name><operator pos:start="455:48" pos:end="455:49">-&gt;</operator><name pos:start="455:50" pos:end="455:58">arg_start</name></name></expr></argument>,

                                       <argument pos:start="457:40" pos:end="457:55"><expr pos:start="457:40" pos:end="457:55"><name pos:start="457:40" pos:end="457:55">host_cmdline_len</name></expr></argument>, <argument pos:start="457:58" pos:end="457:58"><expr pos:start="457:58" pos:end="457:58"><literal type="number" pos:start="457:58" pos:end="457:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="461:13" pos:end="493:13"><if pos:start="461:13" pos:end="493:13">if <condition pos:start="461:16" pos:end="461:58">(<expr pos:start="461:17" pos:end="461:57"><name pos:start="461:17" pos:end="461:34">arm_cmdline_buffer</name> <operator pos:start="461:36" pos:end="461:37">&amp;&amp;</operator> <name pos:start="461:39" pos:end="461:57">host_cmdline_buffer</name></expr>)</condition>

            <block pos:start="463:13" pos:end="493:13">{<block_content pos:start="469:17" pos:end="491:47">

                <comment type="block" pos:start="465:17" pos:end="467:56">/* the last argument is zero-terminated;

                   no need for additional termination */</comment>

                <expr_stmt pos:start="469:17" pos:end="471:41"><expr pos:start="469:17" pos:end="471:40"><call pos:start="469:17" pos:end="471:40"><name pos:start="469:17" pos:end="469:22">memcpy</name><argument_list pos:start="469:23" pos:end="471:40">(<argument pos:start="469:24" pos:end="469:41"><expr pos:start="469:24" pos:end="469:41"><name pos:start="469:24" pos:end="469:41">arm_cmdline_buffer</name></expr></argument>, <argument pos:start="469:44" pos:end="469:62"><expr pos:start="469:44" pos:end="469:62"><name pos:start="469:44" pos:end="469:62">host_cmdline_buffer</name></expr></argument>,

                       <argument pos:start="471:24" pos:end="471:39"><expr pos:start="471:24" pos:end="471:39"><name pos:start="471:24" pos:end="471:39">host_cmdline_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="475:17" pos:end="475:56">/* separate arguments by white spaces */</comment>

                <for pos:start="477:17" pos:end="485:17">for <control pos:start="477:21" pos:end="477:56">(<init pos:start="477:22" pos:end="477:27"><expr pos:start="477:22" pos:end="477:26"><name pos:start="477:22" pos:end="477:22">i</name> <operator pos:start="477:24" pos:end="477:24">=</operator> <literal type="number" pos:start="477:26" pos:end="477:26">0</literal></expr>;</init> <condition pos:start="477:29" pos:end="477:51"><expr pos:start="477:29" pos:end="477:50"><name pos:start="477:29" pos:end="477:29">i</name> <operator pos:start="477:31" pos:end="477:31">&lt;</operator> <name pos:start="477:33" pos:end="477:48">host_cmdline_len</name><operator pos:start="477:49" pos:end="477:49">-</operator><literal type="number" pos:start="477:50" pos:end="477:50">1</literal></expr>;</condition> <incr pos:start="477:53" pos:end="477:55"><expr pos:start="477:53" pos:end="477:55"><name pos:start="477:53" pos:end="477:53">i</name><operator pos:start="477:54" pos:end="477:55">++</operator></expr></incr>)</control> <block pos:start="477:58" pos:end="485:17">{<block_content pos:start="479:21" pos:end="483:21">

                    <if_stmt pos:start="479:21" pos:end="483:21"><if pos:start="479:21" pos:end="483:21">if <condition pos:start="479:24" pos:end="479:51">(<expr pos:start="479:25" pos:end="479:50"><name pos:start="479:25" pos:end="479:45"><name pos:start="479:25" pos:end="479:42">arm_cmdline_buffer</name><index pos:start="479:43" pos:end="479:45">[<expr pos:start="479:44" pos:end="479:44"><name pos:start="479:44" pos:end="479:44">i</name></expr>]</index></name> <operator pos:start="479:47" pos:end="479:48">==</operator> <literal type="number" pos:start="479:50" pos:end="479:50">0</literal></expr>)</condition> <block pos:start="479:53" pos:end="483:21">{<block_content pos:start="481:25" pos:end="481:52">

                        <expr_stmt pos:start="481:25" pos:end="481:52"><expr pos:start="481:25" pos:end="481:51"><name pos:start="481:25" pos:end="481:45"><name pos:start="481:25" pos:end="481:42">arm_cmdline_buffer</name><index pos:start="481:43" pos:end="481:45">[<expr pos:start="481:44" pos:end="481:44"><name pos:start="481:44" pos:end="481:44">i</name></expr>]</index></name> <operator pos:start="481:47" pos:end="481:47">=</operator> <literal type="char" pos:start="481:49" pos:end="481:51">' '</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>



                <comment type="block" pos:start="489:17" pos:end="489:61">/* Adjust the commandline length argument. */</comment>

                <expr_stmt pos:start="491:17" pos:end="491:47"><expr pos:start="491:17" pos:end="491:46"><call pos:start="491:17" pos:end="491:46"><name pos:start="491:17" pos:end="491:23">SET_ARG</name><argument_list pos:start="491:24" pos:end="491:46">(<argument pos:start="491:25" pos:end="491:25"><expr pos:start="491:25" pos:end="491:25"><literal type="number" pos:start="491:25" pos:end="491:25">1</literal></expr></argument>, <argument pos:start="491:28" pos:end="491:45"><expr pos:start="491:28" pos:end="491:45"><name pos:start="491:28" pos:end="491:43">host_cmdline_len</name><operator pos:start="491:44" pos:end="491:44">-</operator><literal type="number" pos:start="491:45" pos:end="491:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="497:13" pos:end="497:54">/* Unlock the buffers on the ARM side.  */</comment>

            <expr_stmt pos:start="499:13" pos:end="499:70"><expr pos:start="499:13" pos:end="499:69"><call pos:start="499:13" pos:end="499:69"><name pos:start="499:13" pos:end="499:23">unlock_user</name><argument_list pos:start="499:24" pos:end="499:69">(<argument pos:start="499:25" pos:end="499:42"><expr pos:start="499:25" pos:end="499:42"><name pos:start="499:25" pos:end="499:42">arm_cmdline_buffer</name></expr></argument>, <argument pos:start="499:45" pos:end="499:50"><expr pos:start="499:45" pos:end="499:50"><call pos:start="499:45" pos:end="499:50"><name pos:start="499:45" pos:end="499:47">ARG</name><argument_list pos:start="499:48" pos:end="499:50">(<argument pos:start="499:49" pos:end="499:49"><expr pos:start="499:49" pos:end="499:49"><literal type="number" pos:start="499:49" pos:end="499:49">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="499:53" pos:end="499:68"><expr pos:start="499:53" pos:end="499:68"><name pos:start="499:53" pos:end="499:68">host_cmdline_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:76"><expr pos:start="501:13" pos:end="501:75"><call pos:start="501:13" pos:end="501:75"><name pos:start="501:13" pos:end="501:23">unlock_user</name><argument_list pos:start="501:24" pos:end="501:75">(<argument pos:start="501:25" pos:end="501:50"><expr pos:start="501:25" pos:end="501:50"><operator pos:start="501:25" pos:end="501:25">(</operator><name pos:start="501:26" pos:end="501:29">void</name><operator pos:start="501:30" pos:end="501:30">*</operator><operator pos:start="501:31" pos:end="501:31">)</operator><name pos:start="501:32" pos:end="501:50">host_cmdline_buffer</name></expr></argument>, <argument pos:start="501:53" pos:end="501:71"><expr pos:start="501:53" pos:end="501:71"><name pos:start="501:53" pos:end="501:71"><name pos:start="501:53" pos:end="501:54">ts</name><operator pos:start="501:55" pos:end="501:56">-&gt;</operator><name pos:start="501:57" pos:end="501:60">info</name><operator pos:start="501:61" pos:end="501:62">-&gt;</operator><name pos:start="501:63" pos:end="501:71">arg_start</name></name></expr></argument>, <argument pos:start="501:74" pos:end="501:74"><expr pos:start="501:74" pos:end="501:74"><literal type="number" pos:start="501:74" pos:end="501:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="505:13" pos:end="505:67">/* Return success if we could return a commandline.  */</comment>

            <return pos:start="507:13" pos:end="507:72">return <expr pos:start="507:20" pos:end="507:71"><ternary pos:start="507:20" pos:end="507:71"><condition pos:start="507:20" pos:end="507:64"><expr pos:start="507:20" pos:end="507:62"><operator pos:start="507:20" pos:end="507:20">(</operator><name pos:start="507:21" pos:end="507:38">arm_cmdline_buffer</name> <operator pos:start="507:40" pos:end="507:41">&amp;&amp;</operator> <name pos:start="507:43" pos:end="507:61">host_cmdline_buffer</name><operator pos:start="507:62" pos:end="507:62">)</operator></expr> ?</condition><then pos:start="507:66" pos:end="507:66"> <expr pos:start="507:66" pos:end="507:66"><literal type="number" pos:start="507:66" pos:end="507:66">0</literal></expr> </then><else pos:start="507:68" pos:end="507:71">: <expr pos:start="507:70" pos:end="507:71"><operator pos:start="507:70" pos:end="507:70">-</operator><literal type="number" pos:start="507:71" pos:end="507:71">1</literal></expr></else></ternary></expr>;</return>

        </block_content>}</block>

<cpp:else pos:start="511:1" pos:end="511:5">#<cpp:directive pos:start="511:2" pos:end="511:5">else</cpp:directive></cpp:else>

        <return pos:start="513:9" pos:end="516:0">return <expr pos:start="513:16" pos:end="513:17"><operator pos:start="513:16" pos:end="513:16">-</operator><literal type="number" pos:start="513:17" pos:end="513:17">1</literal></expr>;</return>

<cpp:endif pos:start="515:1" pos:end="515:6">#<cpp:directive pos:start="515:2" pos:end="515:6">endif</cpp:directive></cpp:endif>

    <case pos:start="517:5" pos:end="517:22">case <expr pos:start="517:10" pos:end="517:21"><name pos:start="517:10" pos:end="517:21">SYS_HEAPINFO</name></expr>:</case>

        <block pos:start="519:9" pos:end="605:9">{<block_content pos:start="521:13" pos:end="603:21">

            <decl_stmt pos:start="521:13" pos:end="521:26"><decl pos:start="521:13" pos:end="521:25"><type pos:start="521:13" pos:end="521:22"><name pos:start="521:13" pos:end="521:20">uint32_t</name> <modifier pos:start="521:22" pos:end="521:22">*</modifier></type><name pos:start="521:23" pos:end="521:25">ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="523:13" pos:end="528:0"><decl pos:start="523:13" pos:end="523:26"><type pos:start="523:13" pos:end="523:20"><name pos:start="523:13" pos:end="523:20">uint32_t</name></type> <name pos:start="523:22" pos:end="523:26">limit</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="527:1" pos:end="527:23">#<cpp:directive pos:start="527:2" pos:end="527:6">ifdef</cpp:directive> <name pos:start="527:8" pos:end="527:23">CONFIG_USER_ONLY</name></cpp:ifdef>

            <comment type="block" pos:start="529:13" pos:end="531:42">/* Some C libraries assume the heap immediately follows .bss, so

               allocate it using sbrk.  */</comment>

            <if_stmt pos:start="533:13" pos:end="559:13"><if pos:start="533:13" pos:end="559:13">if <condition pos:start="533:16" pos:end="533:32">(<expr pos:start="533:17" pos:end="533:31"><operator pos:start="533:17" pos:end="533:17">!</operator><name pos:start="533:18" pos:end="533:31"><name pos:start="533:18" pos:end="533:19">ts</name><operator pos:start="533:20" pos:end="533:21">-&gt;</operator><name pos:start="533:22" pos:end="533:31">heap_limit</name></name></expr>)</condition> <block pos:start="533:34" pos:end="559:13">{<block_content pos:start="535:17" pos:end="557:39">

                <decl_stmt pos:start="535:17" pos:end="535:25"><decl pos:start="535:17" pos:end="535:24"><type pos:start="535:17" pos:end="535:20"><name pos:start="535:17" pos:end="535:20">long</name></type> <name pos:start="535:22" pos:end="535:24">ret</name></decl>;</decl_stmt>



                <expr_stmt pos:start="539:17" pos:end="539:42"><expr pos:start="539:17" pos:end="539:41"><name pos:start="539:17" pos:end="539:29"><name pos:start="539:17" pos:end="539:18">ts</name><operator pos:start="539:19" pos:end="539:20">-&gt;</operator><name pos:start="539:21" pos:end="539:29">heap_base</name></name> <operator pos:start="539:31" pos:end="539:31">=</operator> <call pos:start="539:33" pos:end="539:41"><name pos:start="539:33" pos:end="539:38">do_brk</name><argument_list pos:start="539:39" pos:end="539:41">(<argument pos:start="539:40" pos:end="539:40"><expr pos:start="539:40" pos:end="539:40"><literal type="number" pos:start="539:40" pos:end="539:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="541:17" pos:end="541:60"><expr pos:start="541:17" pos:end="541:59"><name pos:start="541:17" pos:end="541:21">limit</name> <operator pos:start="541:23" pos:end="541:23">=</operator> <name pos:start="541:25" pos:end="541:37"><name pos:start="541:25" pos:end="541:26">ts</name><operator pos:start="541:27" pos:end="541:28">-&gt;</operator><name pos:start="541:29" pos:end="541:37">heap_base</name></name> <operator pos:start="541:39" pos:end="541:39">+</operator> <name pos:start="541:41" pos:end="541:59">ARM_ANGEL_HEAP_SIZE</name></expr>;</expr_stmt>

                <comment type="block" pos:start="543:17" pos:end="543:73">/* Try a big heap, and reduce the size if that fails.  */</comment>

                <for pos:start="545:17" pos:end="555:17">for <control pos:start="545:21" pos:end="545:24">(<init pos:start="545:22" pos:end="545:22">;</init><condition pos:start="545:23" pos:end="545:23">;</condition><incr/>)</control> <block pos:start="545:26" pos:end="555:17">{<block_content pos:start="547:21" pos:end="553:64">

                    <expr_stmt pos:start="547:21" pos:end="547:40"><expr pos:start="547:21" pos:end="547:39"><name pos:start="547:21" pos:end="547:23">ret</name> <operator pos:start="547:25" pos:end="547:25">=</operator> <call pos:start="547:27" pos:end="547:39"><name pos:start="547:27" pos:end="547:32">do_brk</name><argument_list pos:start="547:33" pos:end="547:39">(<argument pos:start="547:34" pos:end="547:38"><expr pos:start="547:34" pos:end="547:38"><name pos:start="547:34" pos:end="547:38">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="549:21" pos:end="551:30"><if pos:start="549:21" pos:end="551:30">if <condition pos:start="549:24" pos:end="549:34">(<expr pos:start="549:25" pos:end="549:33"><name pos:start="549:25" pos:end="549:27">ret</name> <operator pos:start="549:29" pos:end="549:30">!=</operator> <operator pos:start="549:32" pos:end="549:32">-</operator><literal type="number" pos:start="549:33" pos:end="549:33">1</literal></expr>)</condition><block type="pseudo" pos:start="551:25" pos:end="551:30"><block_content pos:start="551:25" pos:end="551:30">

                        <break pos:start="551:25" pos:end="551:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="553:21" pos:end="553:64"><expr pos:start="553:21" pos:end="553:63"><name pos:start="553:21" pos:end="553:25">limit</name> <operator pos:start="553:27" pos:end="553:27">=</operator> <operator pos:start="553:29" pos:end="553:29">(</operator><name pos:start="553:30" pos:end="553:42"><name pos:start="553:30" pos:end="553:31">ts</name><operator pos:start="553:32" pos:end="553:33">-&gt;</operator><name pos:start="553:34" pos:end="553:42">heap_base</name></name> <operator pos:start="553:44" pos:end="553:45">&gt;&gt;</operator> <literal type="number" pos:start="553:47" pos:end="553:47">1</literal><operator pos:start="553:48" pos:end="553:48">)</operator> <operator pos:start="553:50" pos:end="553:50">+</operator> <operator pos:start="553:52" pos:end="553:52">(</operator><name pos:start="553:53" pos:end="553:57">limit</name> <operator pos:start="553:59" pos:end="553:60">&gt;&gt;</operator> <literal type="number" pos:start="553:62" pos:end="553:62">1</literal><operator pos:start="553:63" pos:end="553:63">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="557:17" pos:end="557:39"><expr pos:start="557:17" pos:end="557:38"><name pos:start="557:17" pos:end="557:30"><name pos:start="557:17" pos:end="557:18">ts</name><operator pos:start="557:19" pos:end="557:20">-&gt;</operator><name pos:start="557:21" pos:end="557:30">heap_limit</name></name> <operator pos:start="557:32" pos:end="557:32">=</operator> <name pos:start="557:34" pos:end="557:38">limit</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="563:13" pos:end="567:36"><if pos:start="563:13" pos:end="567:36">if <condition pos:start="563:16" pos:end="563:64">(<expr pos:start="563:17" pos:end="563:63"><operator pos:start="563:17" pos:end="563:17">!</operator><operator pos:start="563:18" pos:end="563:18">(</operator><name pos:start="563:19" pos:end="563:21">ptr</name> <operator pos:start="563:23" pos:end="563:23">=</operator> <call pos:start="563:25" pos:end="563:62"><name pos:start="563:25" pos:end="563:33">lock_user</name><argument_list pos:start="563:34" pos:end="563:62">(<argument pos:start="563:35" pos:end="563:46"><expr pos:start="563:35" pos:end="563:46"><name pos:start="563:35" pos:end="563:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="563:49" pos:end="563:54"><expr pos:start="563:49" pos:end="563:54"><call pos:start="563:49" pos:end="563:54"><name pos:start="563:49" pos:end="563:51">ARG</name><argument_list pos:start="563:52" pos:end="563:54">(<argument pos:start="563:53" pos:end="563:53"><expr pos:start="563:53" pos:end="563:53"><literal type="number" pos:start="563:53" pos:end="563:53">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="563:57" pos:end="563:58"><expr pos:start="563:57" pos:end="563:58"><literal type="number" pos:start="563:57" pos:end="563:58">16</literal></expr></argument>, <argument pos:start="563:61" pos:end="563:61"><expr pos:start="563:61" pos:end="563:61"><literal type="number" pos:start="563:61" pos:end="563:61">0</literal></expr></argument>)</argument_list></call><operator pos:start="563:63" pos:end="563:63">)</operator></expr>)</condition><block type="pseudo" pos:start="567:17" pos:end="567:36"><block_content pos:start="567:17" pos:end="567:36">

                <comment type="block" pos:start="565:17" pos:end="565:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="567:17" pos:end="567:36">return <expr pos:start="567:24" pos:end="567:35"><operator pos:start="567:24" pos:end="567:24">(</operator><name pos:start="567:25" pos:end="567:32">uint32_t</name><operator pos:start="567:33" pos:end="567:33">)</operator><operator pos:start="567:34" pos:end="567:34">-</operator><literal type="number" pos:start="567:35" pos:end="567:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="569:13" pos:end="569:44"><expr pos:start="569:13" pos:end="569:43"><name pos:start="569:13" pos:end="569:18"><name pos:start="569:13" pos:end="569:15">ptr</name><index pos:start="569:16" pos:end="569:18">[<expr pos:start="569:17" pos:end="569:17"><literal type="number" pos:start="569:17" pos:end="569:17">0</literal></expr>]</index></name> <operator pos:start="569:20" pos:end="569:20">=</operator> <call pos:start="569:22" pos:end="569:43"><name pos:start="569:22" pos:end="569:28">tswap32</name><argument_list pos:start="569:29" pos:end="569:43">(<argument pos:start="569:30" pos:end="569:42"><expr pos:start="569:30" pos:end="569:42"><name pos:start="569:30" pos:end="569:42"><name pos:start="569:30" pos:end="569:31">ts</name><operator pos:start="569:32" pos:end="569:33">-&gt;</operator><name pos:start="569:34" pos:end="569:42">heap_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="571:13" pos:end="571:45"><expr pos:start="571:13" pos:end="571:44"><name pos:start="571:13" pos:end="571:18"><name pos:start="571:13" pos:end="571:15">ptr</name><index pos:start="571:16" pos:end="571:18">[<expr pos:start="571:17" pos:end="571:17"><literal type="number" pos:start="571:17" pos:end="571:17">1</literal></expr>]</index></name> <operator pos:start="571:20" pos:end="571:20">=</operator> <call pos:start="571:22" pos:end="571:44"><name pos:start="571:22" pos:end="571:28">tswap32</name><argument_list pos:start="571:29" pos:end="571:44">(<argument pos:start="571:30" pos:end="571:43"><expr pos:start="571:30" pos:end="571:43"><name pos:start="571:30" pos:end="571:43"><name pos:start="571:30" pos:end="571:31">ts</name><operator pos:start="571:32" pos:end="571:33">-&gt;</operator><name pos:start="571:34" pos:end="571:43">heap_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="573:13" pos:end="573:45"><expr pos:start="573:13" pos:end="573:44"><name pos:start="573:13" pos:end="573:18"><name pos:start="573:13" pos:end="573:15">ptr</name><index pos:start="573:16" pos:end="573:18">[<expr pos:start="573:17" pos:end="573:17"><literal type="number" pos:start="573:17" pos:end="573:17">2</literal></expr>]</index></name> <operator pos:start="573:20" pos:end="573:20">=</operator> <call pos:start="573:22" pos:end="573:44"><name pos:start="573:22" pos:end="573:28">tswap32</name><argument_list pos:start="573:29" pos:end="573:44">(<argument pos:start="573:30" pos:end="573:43"><expr pos:start="573:30" pos:end="573:43"><name pos:start="573:30" pos:end="573:43"><name pos:start="573:30" pos:end="573:31">ts</name><operator pos:start="573:32" pos:end="573:33">-&gt;</operator><name pos:start="573:34" pos:end="573:43">stack_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="575:13" pos:end="575:32"><expr pos:start="575:13" pos:end="575:31"><name pos:start="575:13" pos:end="575:18"><name pos:start="575:13" pos:end="575:15">ptr</name><index pos:start="575:16" pos:end="575:18">[<expr pos:start="575:17" pos:end="575:17"><literal type="number" pos:start="575:17" pos:end="575:17">3</literal></expr>]</index></name> <operator pos:start="575:20" pos:end="575:20">=</operator> <call pos:start="575:22" pos:end="575:31"><name pos:start="575:22" pos:end="575:28">tswap32</name><argument_list pos:start="575:29" pos:end="575:31">(<argument pos:start="575:30" pos:end="575:30"><expr pos:start="575:30" pos:end="575:30"><literal type="number" pos:start="575:30" pos:end="575:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="575:34" pos:end="575:52">/* Stack limit.  */</comment>

            <expr_stmt pos:start="577:13" pos:end="580:0"><expr pos:start="577:13" pos:end="577:40"><call pos:start="577:13" pos:end="577:40"><name pos:start="577:13" pos:end="577:23">unlock_user</name><argument_list pos:start="577:24" pos:end="577:40">(<argument pos:start="577:25" pos:end="577:27"><expr pos:start="577:25" pos:end="577:27"><name pos:start="577:25" pos:end="577:27">ptr</name></expr></argument>, <argument pos:start="577:30" pos:end="577:35"><expr pos:start="577:30" pos:end="577:35"><call pos:start="577:30" pos:end="577:35"><name pos:start="577:30" pos:end="577:32">ARG</name><argument_list pos:start="577:33" pos:end="577:35">(<argument pos:start="577:34" pos:end="577:34"><expr pos:start="577:34" pos:end="577:34"><literal type="number" pos:start="577:34" pos:end="577:34">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="577:38" pos:end="577:39"><expr pos:start="577:38" pos:end="577:39"><literal type="number" pos:start="577:38" pos:end="577:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="579:1" pos:end="579:5">#<cpp:directive pos:start="579:2" pos:end="579:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="581:13" pos:end="581:29"><expr pos:start="581:13" pos:end="581:28"><name pos:start="581:13" pos:end="581:17">limit</name> <operator pos:start="581:19" pos:end="581:19">=</operator> <name pos:start="581:21" pos:end="581:28">ram_size</name></expr>;</expr_stmt>

            <if_stmt pos:start="583:13" pos:end="587:36"><if pos:start="583:13" pos:end="587:36">if <condition pos:start="583:16" pos:end="583:64">(<expr pos:start="583:17" pos:end="583:63"><operator pos:start="583:17" pos:end="583:17">!</operator><operator pos:start="583:18" pos:end="583:18">(</operator><name pos:start="583:19" pos:end="583:21">ptr</name> <operator pos:start="583:23" pos:end="583:23">=</operator> <call pos:start="583:25" pos:end="583:62"><name pos:start="583:25" pos:end="583:33">lock_user</name><argument_list pos:start="583:34" pos:end="583:62">(<argument pos:start="583:35" pos:end="583:46"><expr pos:start="583:35" pos:end="583:46"><name pos:start="583:35" pos:end="583:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="583:49" pos:end="583:54"><expr pos:start="583:49" pos:end="583:54"><call pos:start="583:49" pos:end="583:54"><name pos:start="583:49" pos:end="583:51">ARG</name><argument_list pos:start="583:52" pos:end="583:54">(<argument pos:start="583:53" pos:end="583:53"><expr pos:start="583:53" pos:end="583:53"><literal type="number" pos:start="583:53" pos:end="583:53">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="583:57" pos:end="583:58"><expr pos:start="583:57" pos:end="583:58"><literal type="number" pos:start="583:57" pos:end="583:58">16</literal></expr></argument>, <argument pos:start="583:61" pos:end="583:61"><expr pos:start="583:61" pos:end="583:61"><literal type="number" pos:start="583:61" pos:end="583:61">0</literal></expr></argument>)</argument_list></call><operator pos:start="583:63" pos:end="583:63">)</operator></expr>)</condition><block type="pseudo" pos:start="587:17" pos:end="587:36"><block_content pos:start="587:17" pos:end="587:36">

                <comment type="block" pos:start="585:17" pos:end="585:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="587:17" pos:end="587:36">return <expr pos:start="587:24" pos:end="587:35"><operator pos:start="587:24" pos:end="587:24">(</operator><name pos:start="587:25" pos:end="587:32">uint32_t</name><operator pos:start="587:33" pos:end="587:33">)</operator><operator pos:start="587:34" pos:end="587:34">-</operator><literal type="number" pos:start="587:35" pos:end="587:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="589:13" pos:end="589:75">/* TODO: Make this use the limit of the loaded application.  */</comment>

            <expr_stmt pos:start="591:13" pos:end="591:40"><expr pos:start="591:13" pos:end="591:39"><name pos:start="591:13" pos:end="591:18"><name pos:start="591:13" pos:end="591:15">ptr</name><index pos:start="591:16" pos:end="591:18">[<expr pos:start="591:17" pos:end="591:17"><literal type="number" pos:start="591:17" pos:end="591:17">0</literal></expr>]</index></name> <operator pos:start="591:20" pos:end="591:20">=</operator> <call pos:start="591:22" pos:end="591:39"><name pos:start="591:22" pos:end="591:28">tswap32</name><argument_list pos:start="591:29" pos:end="591:39">(<argument pos:start="591:30" pos:end="591:38"><expr pos:start="591:30" pos:end="591:38"><name pos:start="591:30" pos:end="591:34">limit</name> <operator pos:start="591:36" pos:end="591:36">/</operator> <literal type="number" pos:start="591:38" pos:end="591:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="593:13" pos:end="593:36"><expr pos:start="593:13" pos:end="593:35"><name pos:start="593:13" pos:end="593:18"><name pos:start="593:13" pos:end="593:15">ptr</name><index pos:start="593:16" pos:end="593:18">[<expr pos:start="593:17" pos:end="593:17"><literal type="number" pos:start="593:17" pos:end="593:17">1</literal></expr>]</index></name> <operator pos:start="593:20" pos:end="593:20">=</operator> <call pos:start="593:22" pos:end="593:35"><name pos:start="593:22" pos:end="593:28">tswap32</name><argument_list pos:start="593:29" pos:end="593:35">(<argument pos:start="593:30" pos:end="593:34"><expr pos:start="593:30" pos:end="593:34"><name pos:start="593:30" pos:end="593:34">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="595:13" pos:end="595:36"><expr pos:start="595:13" pos:end="595:35"><name pos:start="595:13" pos:end="595:18"><name pos:start="595:13" pos:end="595:15">ptr</name><index pos:start="595:16" pos:end="595:18">[<expr pos:start="595:17" pos:end="595:17"><literal type="number" pos:start="595:17" pos:end="595:17">2</literal></expr>]</index></name> <operator pos:start="595:20" pos:end="595:20">=</operator> <call pos:start="595:22" pos:end="595:35"><name pos:start="595:22" pos:end="595:28">tswap32</name><argument_list pos:start="595:29" pos:end="595:35">(<argument pos:start="595:30" pos:end="595:34"><expr pos:start="595:30" pos:end="595:34"><name pos:start="595:30" pos:end="595:34">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="595:38" pos:end="595:53">/* Stack base */</comment>

            <expr_stmt pos:start="597:13" pos:end="597:32"><expr pos:start="597:13" pos:end="597:31"><name pos:start="597:13" pos:end="597:18"><name pos:start="597:13" pos:end="597:15">ptr</name><index pos:start="597:16" pos:end="597:18">[<expr pos:start="597:17" pos:end="597:17"><literal type="number" pos:start="597:17" pos:end="597:17">3</literal></expr>]</index></name> <operator pos:start="597:20" pos:end="597:20">=</operator> <call pos:start="597:22" pos:end="597:31"><name pos:start="597:22" pos:end="597:28">tswap32</name><argument_list pos:start="597:29" pos:end="597:31">(<argument pos:start="597:30" pos:end="597:30"><expr pos:start="597:30" pos:end="597:30"><literal type="number" pos:start="597:30" pos:end="597:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="597:34" pos:end="597:52">/* Stack limit.  */</comment>

            <expr_stmt pos:start="599:13" pos:end="602:0"><expr pos:start="599:13" pos:end="599:40"><call pos:start="599:13" pos:end="599:40"><name pos:start="599:13" pos:end="599:23">unlock_user</name><argument_list pos:start="599:24" pos:end="599:40">(<argument pos:start="599:25" pos:end="599:27"><expr pos:start="599:25" pos:end="599:27"><name pos:start="599:25" pos:end="599:27">ptr</name></expr></argument>, <argument pos:start="599:30" pos:end="599:35"><expr pos:start="599:30" pos:end="599:35"><call pos:start="599:30" pos:end="599:35"><name pos:start="599:30" pos:end="599:32">ARG</name><argument_list pos:start="599:33" pos:end="599:35">(<argument pos:start="599:34" pos:end="599:34"><expr pos:start="599:34" pos:end="599:34"><literal type="number" pos:start="599:34" pos:end="599:34">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="599:38" pos:end="599:39"><expr pos:start="599:38" pos:end="599:39"><literal type="number" pos:start="599:38" pos:end="599:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="601:1" pos:end="601:6">#<cpp:directive pos:start="601:2" pos:end="601:6">endif</cpp:directive></cpp:endif>

            <return pos:start="603:13" pos:end="603:21">return <expr pos:start="603:20" pos:end="603:20"><literal type="number" pos:start="603:20" pos:end="603:20">0</literal></expr>;</return>

        </block_content>}</block>

    <case pos:start="607:5" pos:end="607:18">case <expr pos:start="607:10" pos:end="607:17"><name pos:start="607:10" pos:end="607:17">SYS_EXIT</name></expr>:</case>

        <expr_stmt pos:start="609:9" pos:end="609:25"><expr pos:start="609:9" pos:end="609:24"><call pos:start="609:9" pos:end="609:24"><name pos:start="609:9" pos:end="609:16">gdb_exit</name><argument_list pos:start="609:17" pos:end="609:24">(<argument pos:start="609:18" pos:end="609:20"><expr pos:start="609:18" pos:end="609:20"><name pos:start="609:18" pos:end="609:20">env</name></expr></argument>, <argument pos:start="609:23" pos:end="609:23"><expr pos:start="609:23" pos:end="609:23"><literal type="number" pos:start="609:23" pos:end="609:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="611:9" pos:end="611:16"><expr pos:start="611:9" pos:end="611:15"><call pos:start="611:9" pos:end="611:15"><name pos:start="611:9" pos:end="611:12">exit</name><argument_list pos:start="611:13" pos:end="611:15">(<argument pos:start="611:14" pos:end="611:14"><expr pos:start="611:14" pos:end="611:14"><literal type="number" pos:start="611:14" pos:end="611:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <default pos:start="613:5" pos:end="613:12">default:</default>

        <expr_stmt pos:start="615:9" pos:end="615:74"><expr pos:start="615:9" pos:end="615:73"><call pos:start="615:9" pos:end="615:73"><name pos:start="615:9" pos:end="615:15">fprintf</name><argument_list pos:start="615:16" pos:end="615:73">(<argument pos:start="615:17" pos:end="615:22"><expr pos:start="615:17" pos:end="615:22"><name pos:start="615:17" pos:end="615:22">stderr</name></expr></argument>, <argument pos:start="615:25" pos:end="615:68"><expr pos:start="615:25" pos:end="615:68"><literal type="string" pos:start="615:25" pos:end="615:68">"qemu: Unsupported SemiHosting SWI 0x%02x\n"</literal></expr></argument>, <argument pos:start="615:71" pos:end="615:72"><expr pos:start="615:71" pos:end="615:72"><name pos:start="615:71" pos:end="615:72">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="617:9" pos:end="617:48"><expr pos:start="617:9" pos:end="617:47"><call pos:start="617:9" pos:end="617:47"><name pos:start="617:9" pos:end="617:22">cpu_dump_state</name><argument_list pos:start="617:23" pos:end="617:47">(<argument pos:start="617:24" pos:end="617:26"><expr pos:start="617:24" pos:end="617:26"><name pos:start="617:24" pos:end="617:26">env</name></expr></argument>, <argument pos:start="617:29" pos:end="617:34"><expr pos:start="617:29" pos:end="617:34"><name pos:start="617:29" pos:end="617:34">stderr</name></expr></argument>, <argument pos:start="617:37" pos:end="617:43"><expr pos:start="617:37" pos:end="617:43"><name pos:start="617:37" pos:end="617:43">fprintf</name></expr></argument>, <argument pos:start="617:46" pos:end="617:46"><expr pos:start="617:46" pos:end="617:46"><literal type="number" pos:start="617:46" pos:end="617:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="619:9" pos:end="619:16"><expr pos:start="619:9" pos:end="619:15"><call pos:start="619:9" pos:end="619:15"><name pos:start="619:9" pos:end="619:13">abort</name><argument_list pos:start="619:14" pos:end="619:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
