<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20736.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">uint8_t</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:33">csrhci_out_packet</name><parameter_list pos:start="1:34" pos:end="1:62">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:49"><name pos:start="1:35" pos:end="1:40">struct</name> <name pos:start="1:42" pos:end="1:49">csrhci_s</name></name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:61"><decl pos:start="1:55" pos:end="1:61"><type pos:start="1:55" pos:end="1:61"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:61">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:42">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">off</name> <init pos:start="5:13" pos:end="5:39">= <expr pos:start="5:15" pos:end="5:39"><name pos:start="5:15" pos:end="5:26"><name pos:start="5:15" pos:end="5:15">s</name><operator pos:start="5:16" pos:end="5:17">-&gt;</operator><name pos:start="5:18" pos:end="5:26">out_start</name></name> <operator pos:start="5:28" pos:end="5:28">+</operator> <name pos:start="5:30" pos:end="5:39"><name pos:start="5:30" pos:end="5:30">s</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:39">out_len</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:51">/* TODO: do the padding here, i.e. align len */</comment>

    <expr_stmt pos:start="11:5" pos:end="11:22"><expr pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:14">out_len</name></name> <operator pos:start="11:16" pos:end="11:17">+=</operator> <name pos:start="11:19" pos:end="11:21">len</name></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="27:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:11">off</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <name pos:start="15:15" pos:end="15:22">FIFO_LEN</name></expr>)</condition> <block pos:start="15:25" pos:end="27:5">{<block_content pos:start="17:9" pos:end="25:32">

        <if_stmt pos:start="17:9" pos:end="23:9"><if pos:start="17:9" pos:end="23:9">if <condition pos:start="17:12" pos:end="17:77">(<expr pos:start="17:13" pos:end="17:76"><name pos:start="17:13" pos:end="17:15">off</name> <operator pos:start="17:17" pos:end="17:17">+</operator> <name pos:start="17:19" pos:end="17:21">len</name> <operator pos:start="17:23" pos:end="17:23">&gt;</operator> <name pos:start="17:25" pos:end="17:32">FIFO_LEN</name> <operator pos:start="17:34" pos:end="17:35">&amp;&amp;</operator> <operator pos:start="17:37" pos:end="17:37">(</operator><name pos:start="17:38" pos:end="17:48"><name pos:start="17:38" pos:end="17:38">s</name><operator pos:start="17:39" pos:end="17:40">-&gt;</operator><name pos:start="17:41" pos:end="17:48">out_size</name></name> <operator pos:start="17:50" pos:end="17:50">=</operator> <name pos:start="17:52" pos:end="17:54">off</name> <operator pos:start="17:56" pos:end="17:56">+</operator> <name pos:start="17:58" pos:end="17:60">len</name><operator pos:start="17:61" pos:end="17:61">)</operator> <operator pos:start="17:63" pos:end="17:63">&gt;</operator> <name pos:start="17:65" pos:end="17:72">FIFO_LEN</name> <operator pos:start="17:74" pos:end="17:74">*</operator> <literal type="number" pos:start="17:76" pos:end="17:76">2</literal></expr>)</condition> <block pos:start="17:79" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:21">

            <expr_stmt pos:start="19:13" pos:end="19:73"><expr pos:start="19:13" pos:end="19:72"><call pos:start="19:13" pos:end="19:72"><name pos:start="19:13" pos:end="19:19">fprintf</name><argument_list pos:start="19:20" pos:end="19:72">(<argument pos:start="19:21" pos:end="19:26"><expr pos:start="19:21" pos:end="19:26"><name pos:start="19:21" pos:end="19:26">stderr</name></expr></argument>, <argument pos:start="19:29" pos:end="19:56"><expr pos:start="19:29" pos:end="19:56"><literal type="string" pos:start="19:29" pos:end="19:56">"%s: can't alloc %i bytes\n"</literal></expr></argument>, <argument pos:start="19:59" pos:end="19:66"><expr pos:start="19:59" pos:end="19:66"><name pos:start="19:59" pos:end="19:66">__func__</name></expr></argument>, <argument pos:start="19:69" pos:end="19:71"><expr pos:start="19:69" pos:end="19:71"><name pos:start="19:69" pos:end="19:71">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:21"><expr pos:start="21:13" pos:end="21:20"><call pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:16">exit</name><argument_list pos:start="21:17" pos:end="21:20">(<argument pos:start="21:18" pos:end="21:19"><expr pos:start="21:18" pos:end="21:19"><operator pos:start="21:18" pos:end="21:18">-</operator><literal type="number" pos:start="21:19" pos:end="21:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="25:9" pos:end="25:32">return <expr pos:start="25:16" pos:end="25:31"><name pos:start="25:16" pos:end="25:25"><name pos:start="25:16" pos:end="25:16">s</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:25">outfifo</name></name> <operator pos:start="25:27" pos:end="25:27">+</operator> <name pos:start="25:29" pos:end="25:31">off</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:33">(<expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:18">out_len</name></name> <operator pos:start="31:20" pos:end="31:20">&gt;</operator> <name pos:start="31:22" pos:end="31:32"><name pos:start="31:22" pos:end="31:22">s</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:32">out_size</name></name></expr>)</condition> <block pos:start="31:35" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:69"><expr pos:start="33:9" pos:end="33:68"><call pos:start="33:9" pos:end="33:68"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:68">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:52"><expr pos:start="33:25" pos:end="33:52"><literal type="string" pos:start="33:25" pos:end="33:52">"%s: can't alloc %i bytes\n"</literal></expr></argument>, <argument pos:start="33:55" pos:end="33:62"><expr pos:start="33:55" pos:end="33:62"><name pos:start="33:55" pos:end="33:62">__func__</name></expr></argument>, <argument pos:start="33:65" pos:end="33:67"><expr pos:start="33:65" pos:end="33:67"><name pos:start="33:65" pos:end="33:67">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:17"><expr pos:start="35:9" pos:end="35:16"><call pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:12">exit</name><argument_list pos:start="35:13" pos:end="35:16">(<argument pos:start="35:14" pos:end="35:15"><expr pos:start="35:14" pos:end="35:15"><operator pos:start="35:14" pos:end="35:14">-</operator><literal type="number" pos:start="35:15" pos:end="35:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="41:5" pos:end="41:42">return <expr pos:start="41:12" pos:end="41:41"><name pos:start="41:12" pos:end="41:21"><name pos:start="41:12" pos:end="41:12">s</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:21">outfifo</name></name> <operator pos:start="41:23" pos:end="41:23">+</operator> <name pos:start="41:25" pos:end="41:27">off</name> <operator pos:start="41:29" pos:end="41:29">-</operator> <name pos:start="41:31" pos:end="41:41"><name pos:start="41:31" pos:end="41:31">s</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:41">out_size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
