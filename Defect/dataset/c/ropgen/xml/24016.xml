<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24016.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">mirror_cow_align</name><parameter_list pos:start="1:28" pos:end="3:44">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:42">MirrorBlockJob</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:62"><decl pos:start="1:48" pos:end="1:62"><type pos:start="1:48" pos:end="1:62"><name pos:start="1:48" pos:end="1:54">int64_t</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:62">offset</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:36">uint64_t</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">bytes</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:15">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:17">need_cow</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:24">align_offset</name> <init pos:start="11:26" pos:end="11:34">= <expr pos:start="11:28" pos:end="11:34"><operator pos:start="11:28" pos:end="11:28">*</operator><name pos:start="11:29" pos:end="11:34">offset</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:28">align_bytes</name> <init pos:start="13:30" pos:end="13:37">= <expr pos:start="13:32" pos:end="13:37"><operator pos:start="13:32" pos:end="13:32">*</operator><name pos:start="13:33" pos:end="13:37">bytes</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">max_bytes</name> <init pos:start="15:19" pos:end="15:47">= <expr pos:start="15:21" pos:end="15:47"><name pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:21">s</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:34">granularity</name></name> <operator pos:start="15:36" pos:end="15:36">*</operator> <name pos:start="15:38" pos:end="15:47"><name pos:start="15:38" pos:end="15:38">s</name><operator pos:start="15:39" pos:end="15:40">-&gt;</operator><name pos:start="15:41" pos:end="15:47">max_iov</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><call pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:28">(<argument pos:start="19:12" pos:end="19:27"><expr pos:start="19:12" pos:end="19:27"><operator pos:start="19:12" pos:end="19:12">*</operator><name pos:start="19:13" pos:end="19:17">bytes</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:27">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:66"><expr pos:start="21:5" pos:end="21:65"><name pos:start="21:5" pos:end="21:12">need_cow</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <operator pos:start="21:16" pos:end="21:16">!</operator><call pos:start="21:17" pos:end="21:65"><name pos:start="21:17" pos:end="21:24">test_bit</name><argument_list pos:start="21:25" pos:end="21:65">(<argument pos:start="21:26" pos:end="21:49"><expr pos:start="21:26" pos:end="21:49"><operator pos:start="21:26" pos:end="21:26">*</operator><name pos:start="21:27" pos:end="21:32">offset</name> <operator pos:start="21:34" pos:end="21:34">/</operator> <name pos:start="21:36" pos:end="21:49"><name pos:start="21:36" pos:end="21:36">s</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:49">granularity</name></name></expr></argument>, <argument pos:start="21:52" pos:end="21:64"><expr pos:start="21:52" pos:end="21:64"><name pos:start="21:52" pos:end="21:64"><name pos:start="21:52" pos:end="21:52">s</name><operator pos:start="21:53" pos:end="21:54">-&gt;</operator><name pos:start="21:55" pos:end="21:64">cow_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="25:41"><expr pos:start="23:5" pos:end="25:40"><name pos:start="23:5" pos:end="23:12">need_cow</name> <operator pos:start="23:14" pos:end="23:15">|=</operator> <operator pos:start="23:17" pos:end="23:17">!</operator><call pos:start="23:18" pos:end="25:40"><name pos:start="23:18" pos:end="23:25">test_bit</name><argument_list pos:start="23:26" pos:end="25:40">(<argument pos:start="23:27" pos:end="23:65"><expr pos:start="23:27" pos:end="23:65"><operator pos:start="23:27" pos:end="23:27">(</operator><operator pos:start="23:28" pos:end="23:28">*</operator><name pos:start="23:29" pos:end="23:34">offset</name> <operator pos:start="23:36" pos:end="23:36">+</operator> <operator pos:start="23:38" pos:end="23:38">*</operator><name pos:start="23:39" pos:end="23:43">bytes</name> <operator pos:start="23:45" pos:end="23:45">-</operator> <literal type="number" pos:start="23:47" pos:end="23:47">1</literal><operator pos:start="23:48" pos:end="23:48">)</operator> <operator pos:start="23:50" pos:end="23:50">/</operator> <name pos:start="23:52" pos:end="23:65"><name pos:start="23:52" pos:end="23:52">s</name><operator pos:start="23:53" pos:end="23:54">-&gt;</operator><name pos:start="23:55" pos:end="23:65">granularity</name></name></expr></argument>,

                          <argument pos:start="25:27" pos:end="25:39"><expr pos:start="25:27" pos:end="25:39"><name pos:start="25:27" pos:end="25:39"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:39">cow_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:17">(<expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:16">need_cow</name></expr>)</condition> <block pos:start="27:19" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:60">

        <expr_stmt pos:start="29:9" pos:end="31:60"><expr pos:start="29:9" pos:end="31:59"><call pos:start="29:9" pos:end="31:59"><name pos:start="29:9" pos:end="29:30">bdrv_round_to_clusters</name><argument_list pos:start="29:31" pos:end="31:59">(<argument pos:start="29:32" pos:end="29:48"><expr pos:start="29:32" pos:end="29:48"><call pos:start="29:32" pos:end="29:48"><name pos:start="29:32" pos:end="29:37">blk_bs</name><argument_list pos:start="29:38" pos:end="29:48">(<argument pos:start="29:39" pos:end="29:47"><expr pos:start="29:39" pos:end="29:47"><name pos:start="29:39" pos:end="29:47"><name pos:start="29:39" pos:end="29:39">s</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:47">target</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="29:51" pos:end="29:57"><expr pos:start="29:51" pos:end="29:57"><operator pos:start="29:51" pos:end="29:51">*</operator><name pos:start="29:52" pos:end="29:57">offset</name></expr></argument>, <argument pos:start="29:60" pos:end="29:65"><expr pos:start="29:60" pos:end="29:65"><operator pos:start="29:60" pos:end="29:60">*</operator><name pos:start="29:61" pos:end="29:65">bytes</name></expr></argument>,

                               <argument pos:start="31:32" pos:end="31:44"><expr pos:start="31:32" pos:end="31:44"><operator pos:start="31:32" pos:end="31:32">&amp;</operator><name pos:start="31:33" pos:end="31:44">align_offset</name></expr></argument>, <argument pos:start="31:47" pos:end="31:58"><expr pos:start="31:47" pos:end="31:58"><operator pos:start="31:47" pos:end="31:47">&amp;</operator><name pos:start="31:48" pos:end="31:58">align_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="47:5">if <condition pos:start="37:8" pos:end="37:32">(<expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:19">align_bytes</name> <operator pos:start="37:21" pos:end="37:21">&gt;</operator> <name pos:start="37:23" pos:end="37:31">max_bytes</name></expr>)</condition> <block pos:start="37:34" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:9">

        <expr_stmt pos:start="39:9" pos:end="39:32"><expr pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:19">align_bytes</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:31">max_bytes</name></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:21">(<expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:20">need_cow</name></expr>)</condition> <block pos:start="41:23" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:79">

            <expr_stmt pos:start="43:13" pos:end="43:79"><expr pos:start="43:13" pos:end="43:78"><name pos:start="43:13" pos:end="43:23">align_bytes</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <call pos:start="43:27" pos:end="43:78"><name pos:start="43:27" pos:end="43:41">QEMU_ALIGN_DOWN</name><argument_list pos:start="43:42" pos:end="43:78">(<argument pos:start="43:43" pos:end="43:53"><expr pos:start="43:43" pos:end="43:53"><name pos:start="43:43" pos:end="43:53">align_bytes</name></expr></argument>, <argument pos:start="43:56" pos:end="43:77"><expr pos:start="43:56" pos:end="43:77"><name pos:start="43:56" pos:end="43:77"><name pos:start="43:56" pos:end="43:56">s</name><operator pos:start="43:57" pos:end="43:58">-&gt;</operator><name pos:start="43:59" pos:end="43:77">target_cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="49:5" pos:end="51:75">/* Clipping may result in align_bytes unaligned to chunk boundary, but

     * that doesn't matter because it's already the end of source image. */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:66"><expr pos:start="53:5" pos:end="53:65"><name pos:start="53:5" pos:end="53:15">align_bytes</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:65"><name pos:start="53:19" pos:end="53:35">mirror_clip_bytes</name><argument_list pos:start="53:36" pos:end="53:65">(<argument pos:start="53:37" pos:end="53:37"><expr pos:start="53:37" pos:end="53:37"><name pos:start="53:37" pos:end="53:37">s</name></expr></argument>, <argument pos:start="53:40" pos:end="53:51"><expr pos:start="53:40" pos:end="53:51"><name pos:start="53:40" pos:end="53:51">align_offset</name></expr></argument>, <argument pos:start="53:54" pos:end="53:64"><expr pos:start="53:54" pos:end="53:64"><name pos:start="53:54" pos:end="53:64">align_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:58"><expr pos:start="57:5" pos:end="57:57"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:22">align_offset</name> <operator pos:start="57:24" pos:end="57:24">+</operator> <name pos:start="57:26" pos:end="57:36">align_bytes</name> <operator pos:start="57:38" pos:end="57:38">-</operator> <operator pos:start="57:40" pos:end="57:40">(</operator><operator pos:start="57:41" pos:end="57:41">*</operator><name pos:start="57:42" pos:end="57:47">offset</name> <operator pos:start="57:49" pos:end="57:49">+</operator> <operator pos:start="57:51" pos:end="57:51">*</operator><name pos:start="57:52" pos:end="57:56">bytes</name><operator pos:start="57:57" pos:end="57:57">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><operator pos:start="59:5" pos:end="59:5">*</operator><name pos:start="59:6" pos:end="59:11">offset</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:26">align_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:25"><expr pos:start="61:5" pos:end="61:24"><operator pos:start="61:5" pos:end="61:5">*</operator><name pos:start="61:6" pos:end="61:10">bytes</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <name pos:start="61:14" pos:end="61:24">align_bytes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:21"><expr pos:start="63:5" pos:end="63:20"><call pos:start="63:5" pos:end="63:20"><name pos:start="63:5" pos:end="63:10">assert</name><argument_list pos:start="63:11" pos:end="63:20">(<argument pos:start="63:12" pos:end="63:19"><expr pos:start="63:12" pos:end="63:19"><name pos:start="63:12" pos:end="63:14">ret</name> <operator pos:start="63:16" pos:end="63:17">&gt;=</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="65:15">return <expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
