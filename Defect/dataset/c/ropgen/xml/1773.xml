<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1773.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">nbd_send_rep_list</name><parameter_list pos:start="1:29" pos:end="1:55">(<parameter pos:start="1:30" pos:end="1:38"><decl pos:start="1:30" pos:end="1:38"><type pos:start="1:30" pos:end="1:38"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:38">csock</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:54"><decl pos:start="1:41" pos:end="1:54"><type pos:start="1:41" pos:end="1:54"><name pos:start="1:41" pos:end="1:49">NBDExport</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">exp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:13">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:18">magic</name></decl>, <decl pos:start="5:21" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:21" pos:end="5:28">name_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">opt</name></decl>, <decl pos:start="7:19" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:19" pos:end="7:22">type</name></decl>, <decl pos:start="7:25" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:25" pos:end="7:27">len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:33"><expr pos:start="11:5" pos:end="11:32"><name pos:start="11:5" pos:end="11:12">name_len</name> <operator pos:start="11:14" pos:end="11:14">=</operator> <call pos:start="11:16" pos:end="11:32"><name pos:start="11:16" pos:end="11:21">strlen</name><argument_list pos:start="11:22" pos:end="11:32">(<argument pos:start="11:23" pos:end="11:31"><expr pos:start="11:23" pos:end="11:31"><name pos:start="11:23" pos:end="11:31"><name pos:start="11:23" pos:end="11:25">exp</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:31">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:9">magic</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:38"><name pos:start="13:13" pos:end="13:23">cpu_to_be64</name><argument_list pos:start="13:24" pos:end="13:38">(<argument pos:start="13:25" pos:end="13:37"><expr pos:start="13:25" pos:end="13:37"><name pos:start="13:25" pos:end="13:37">NBD_REP_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:6"><if pos:start="15:5" pos:end="21:6">if <condition pos:start="15:8" pos:end="15:66">(<expr pos:start="15:9" pos:end="15:65"><call pos:start="15:9" pos:end="15:48"><name pos:start="15:9" pos:end="15:18">write_sync</name><argument_list pos:start="15:19" pos:end="15:48">(<argument pos:start="15:20" pos:end="15:24"><expr pos:start="15:20" pos:end="15:24"><name pos:start="15:20" pos:end="15:24">csock</name></expr></argument>, <argument pos:start="15:27" pos:end="15:32"><expr pos:start="15:27" pos:end="15:32"><operator pos:start="15:27" pos:end="15:27">&amp;</operator><name pos:start="15:28" pos:end="15:32">magic</name></expr></argument>, <argument pos:start="15:35" pos:end="15:47"><expr pos:start="15:35" pos:end="15:47"><sizeof pos:start="15:35" pos:end="15:47">sizeof<argument_list pos:start="15:41" pos:end="15:47">(<argument pos:start="15:42" pos:end="15:46"><expr pos:start="15:42" pos:end="15:46"><name pos:start="15:42" pos:end="15:46">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="15:50" pos:end="15:51">!=</operator> <sizeof pos:start="15:53" pos:end="15:65">sizeof<argument_list pos:start="15:59" pos:end="15:65">(<argument pos:start="15:60" pos:end="15:64"><expr pos:start="15:60" pos:end="15:64"><name pos:start="15:60" pos:end="15:64">magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="15:68" pos:end="21:6">{<block_content pos:start="17:9" pos:end="19:23">

        <expr_stmt pos:start="17:9" pos:end="17:36"><expr pos:start="17:9" pos:end="17:35"><call pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:11">LOG</name><argument_list pos:start="17:12" pos:end="17:35">(<argument pos:start="17:13" pos:end="17:34"><expr pos:start="17:13" pos:end="17:34"><literal type="string" pos:start="17:13" pos:end="17:34">"write failed (magic)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:23">return <expr pos:start="19:16" pos:end="19:22"><operator pos:start="19:16" pos:end="19:16">-</operator><name pos:start="19:17" pos:end="19:22">EINVAL</name></expr>;</return>

     </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:7">opt</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:35"><name pos:start="23:11" pos:end="23:21">cpu_to_be32</name><argument_list pos:start="23:22" pos:end="23:35">(<argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">NBD_OPT_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:60">(<expr pos:start="25:9" pos:end="25:59"><call pos:start="25:9" pos:end="25:44"><name pos:start="25:9" pos:end="25:18">write_sync</name><argument_list pos:start="25:19" pos:end="25:44">(<argument pos:start="25:20" pos:end="25:24"><expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:24">csock</name></expr></argument>, <argument pos:start="25:27" pos:end="25:30"><expr pos:start="25:27" pos:end="25:30"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:30">opt</name></expr></argument>, <argument pos:start="25:33" pos:end="25:43"><expr pos:start="25:33" pos:end="25:43"><sizeof pos:start="25:33" pos:end="25:43">sizeof<argument_list pos:start="25:39" pos:end="25:43">(<argument pos:start="25:40" pos:end="25:42"><expr pos:start="25:40" pos:end="25:42"><name pos:start="25:40" pos:end="25:42">opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="25:46" pos:end="25:47">!=</operator> <sizeof pos:start="25:49" pos:end="25:59">sizeof<argument_list pos:start="25:55" pos:end="25:59">(<argument pos:start="25:56" pos:end="25:58"><expr pos:start="25:56" pos:end="25:58"><name pos:start="25:56" pos:end="25:58">opt</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="25:62" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:23">

        <expr_stmt pos:start="27:9" pos:end="27:34"><expr pos:start="27:9" pos:end="27:33"><call pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:11">LOG</name><argument_list pos:start="27:12" pos:end="27:33">(<argument pos:start="27:13" pos:end="27:32"><expr pos:start="27:13" pos:end="27:32"><literal type="string" pos:start="27:13" pos:end="27:32">"write failed (opt)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:8">type</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:38"><name pos:start="33:12" pos:end="33:22">cpu_to_be32</name><argument_list pos:start="33:23" pos:end="33:38">(<argument pos:start="33:24" pos:end="33:37"><expr pos:start="33:24" pos:end="33:37"><name pos:start="33:24" pos:end="33:37">NBD_REP_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:63">(<expr pos:start="35:9" pos:end="35:62"><call pos:start="35:9" pos:end="35:46"><name pos:start="35:9" pos:end="35:18">write_sync</name><argument_list pos:start="35:19" pos:end="35:46">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">csock</name></expr></argument>, <argument pos:start="35:27" pos:end="35:31"><expr pos:start="35:27" pos:end="35:31"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:31">type</name></expr></argument>, <argument pos:start="35:34" pos:end="35:45"><expr pos:start="35:34" pos:end="35:45"><sizeof pos:start="35:34" pos:end="35:45">sizeof<argument_list pos:start="35:40" pos:end="35:45">(<argument pos:start="35:41" pos:end="35:44"><expr pos:start="35:41" pos:end="35:44"><name pos:start="35:41" pos:end="35:44">type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="35:48" pos:end="35:49">!=</operator> <sizeof pos:start="35:51" pos:end="35:62">sizeof<argument_list pos:start="35:57" pos:end="35:62">(<argument pos:start="35:58" pos:end="35:61"><expr pos:start="35:58" pos:end="35:61"><name pos:start="35:58" pos:end="35:61">type</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="35:65" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:23">

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:11">LOG</name><argument_list pos:start="37:12" pos:end="37:40">(<argument pos:start="37:13" pos:end="37:39"><expr pos:start="37:13" pos:end="37:39"><literal type="string" pos:start="37:13" pos:end="37:39">"write failed (reply type)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:23">return <expr pos:start="39:16" pos:end="39:22"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:7">len</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:45"><name pos:start="43:11" pos:end="43:21">cpu_to_be32</name><argument_list pos:start="43:22" pos:end="43:45">(<argument pos:start="43:23" pos:end="43:44"><expr pos:start="43:23" pos:end="43:44"><name pos:start="43:23" pos:end="43:30">name_len</name> <operator pos:start="43:32" pos:end="43:32">+</operator> <sizeof pos:start="43:34" pos:end="43:44">sizeof<argument_list pos:start="43:40" pos:end="43:44">(<argument pos:start="43:41" pos:end="43:43"><expr pos:start="43:41" pos:end="43:43"><name pos:start="43:41" pos:end="43:43">len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:60">(<expr pos:start="45:9" pos:end="45:59"><call pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:18">write_sync</name><argument_list pos:start="45:19" pos:end="45:44">(<argument pos:start="45:20" pos:end="45:24"><expr pos:start="45:20" pos:end="45:24"><name pos:start="45:20" pos:end="45:24">csock</name></expr></argument>, <argument pos:start="45:27" pos:end="45:30"><expr pos:start="45:27" pos:end="45:30"><operator pos:start="45:27" pos:end="45:27">&amp;</operator><name pos:start="45:28" pos:end="45:30">len</name></expr></argument>, <argument pos:start="45:33" pos:end="45:43"><expr pos:start="45:33" pos:end="45:43"><sizeof pos:start="45:33" pos:end="45:43">sizeof<argument_list pos:start="45:39" pos:end="45:43">(<argument pos:start="45:40" pos:end="45:42"><expr pos:start="45:40" pos:end="45:42"><name pos:start="45:40" pos:end="45:42">len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="45:46" pos:end="45:47">!=</operator> <sizeof pos:start="45:49" pos:end="45:59">sizeof<argument_list pos:start="45:55" pos:end="45:59">(<argument pos:start="45:56" pos:end="45:58"><expr pos:start="45:56" pos:end="45:58"><name pos:start="45:56" pos:end="45:58">len</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="45:62" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:23">

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><call pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:11">LOG</name><argument_list pos:start="47:12" pos:end="47:36">(<argument pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:35"><literal type="string" pos:start="47:13" pos:end="47:35">"write failed (length)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:23">return <expr pos:start="49:16" pos:end="49:22"><operator pos:start="49:16" pos:end="49:16">-</operator><name pos:start="49:17" pos:end="49:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:32"><expr pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:7">len</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:31"><name pos:start="53:11" pos:end="53:21">cpu_to_be32</name><argument_list pos:start="53:22" pos:end="53:31">(<argument pos:start="53:23" pos:end="53:30"><expr pos:start="53:23" pos:end="53:30"><name pos:start="53:23" pos:end="53:30">name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:60">(<expr pos:start="55:9" pos:end="55:59"><call pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:18">write_sync</name><argument_list pos:start="55:19" pos:end="55:44">(<argument pos:start="55:20" pos:end="55:24"><expr pos:start="55:20" pos:end="55:24"><name pos:start="55:20" pos:end="55:24">csock</name></expr></argument>, <argument pos:start="55:27" pos:end="55:30"><expr pos:start="55:27" pos:end="55:30"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:30">len</name></expr></argument>, <argument pos:start="55:33" pos:end="55:43"><expr pos:start="55:33" pos:end="55:43"><sizeof pos:start="55:33" pos:end="55:43">sizeof<argument_list pos:start="55:39" pos:end="55:43">(<argument pos:start="55:40" pos:end="55:42"><expr pos:start="55:40" pos:end="55:42"><name pos:start="55:40" pos:end="55:42">len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="55:46" pos:end="55:47">!=</operator> <sizeof pos:start="55:49" pos:end="55:59">sizeof<argument_list pos:start="55:55" pos:end="55:59">(<argument pos:start="55:56" pos:end="55:58"><expr pos:start="55:56" pos:end="55:58"><name pos:start="55:56" pos:end="55:58">len</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="55:62" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:23">

        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><call pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:11">LOG</name><argument_list pos:start="57:12" pos:end="57:36">(<argument pos:start="57:13" pos:end="57:35"><expr pos:start="57:13" pos:end="57:35"><literal type="string" pos:start="57:13" pos:end="57:35">"write failed (length)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:23">return <expr pos:start="59:16" pos:end="59:22"><operator pos:start="59:16" pos:end="59:16">-</operator><name pos:start="59:17" pos:end="59:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:59">(<expr pos:start="63:9" pos:end="63:58"><call pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:18">write_sync</name><argument_list pos:start="63:19" pos:end="63:46">(<argument pos:start="63:20" pos:end="63:24"><expr pos:start="63:20" pos:end="63:24"><name pos:start="63:20" pos:end="63:24">csock</name></expr></argument>, <argument pos:start="63:27" pos:end="63:35"><expr pos:start="63:27" pos:end="63:35"><name pos:start="63:27" pos:end="63:35"><name pos:start="63:27" pos:end="63:29">exp</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:35">name</name></name></expr></argument>, <argument pos:start="63:38" pos:end="63:45"><expr pos:start="63:38" pos:end="63:45"><name pos:start="63:38" pos:end="63:45">name_len</name></expr></argument>)</argument_list></call> <operator pos:start="63:48" pos:end="63:49">!=</operator> <name pos:start="63:51" pos:end="63:58">name_len</name></expr>)</condition> <block pos:start="63:61" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:23">

        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><call pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:11">LOG</name><argument_list pos:start="65:12" pos:end="65:36">(<argument pos:start="65:13" pos:end="65:35"><expr pos:start="65:13" pos:end="65:35"><literal type="string" pos:start="65:13" pos:end="65:35">"write failed (buffer)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:23">return <expr pos:start="67:16" pos:end="67:22"><operator pos:start="67:16" pos:end="67:16">-</operator><name pos:start="67:17" pos:end="67:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
