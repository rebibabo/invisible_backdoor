<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10940.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">kvm_insert_breakpoint</name><parameter_list pos:start="1:26" pos:end="3:53">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:47">current_env</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:66"><decl pos:start="1:50" pos:end="1:66"><type pos:start="1:50" pos:end="1:66"><name pos:start="1:50" pos:end="1:61">target_ulong</name></type> <name pos:start="1:63" pos:end="1:66">addr</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:42"><decl pos:start="3:27" pos:end="3:42"><type pos:start="3:27" pos:end="3:42"><name pos:start="3:27" pos:end="3:38">target_ulong</name></type> <name pos:start="3:40" pos:end="3:42">len</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:52"><decl pos:start="3:45" pos:end="3:52"><type pos:start="3:45" pos:end="3:52"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:52">type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:13">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:30"><name pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:28">kvm_sw_breakpoint</name></name> <modifier pos:start="7:30" pos:end="7:30">*</modifier></type><name pos:start="7:31" pos:end="7:32">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">err</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="65:5"><if pos:start="15:5" pos:end="57:5">if <condition pos:start="15:8" pos:end="15:34">(<expr pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:12">type</name> <operator pos:start="15:14" pos:end="15:15">==</operator> <name pos:start="15:17" pos:end="15:33">GDB_BREAKPOINT_SW</name></expr>)</condition> <block pos:start="15:36" pos:end="57:5">{<block_content pos:start="17:9" pos:end="55:37">

        <expr_stmt pos:start="17:9" pos:end="17:55"><expr pos:start="17:9" pos:end="17:54"><name pos:start="17:9" pos:end="17:10">bp</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:54"><name pos:start="17:14" pos:end="17:35">kvm_find_sw_breakpoint</name><argument_list pos:start="17:36" pos:end="17:54">(<argument pos:start="17:37" pos:end="17:47"><expr pos:start="17:37" pos:end="17:47"><name pos:start="17:37" pos:end="17:47">current_env</name></expr></argument>, <argument pos:start="17:50" pos:end="17:53"><expr pos:start="17:50" pos:end="17:53"><name pos:start="17:50" pos:end="17:53">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:15">(<expr pos:start="19:13" pos:end="19:14"><name pos:start="19:13" pos:end="19:14">bp</name></expr>)</condition> <block pos:start="19:17" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:21">

            <expr_stmt pos:start="21:13" pos:end="21:28"><expr pos:start="21:13" pos:end="21:27"><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:14">bp</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:25">use_count</name></name><operator pos:start="21:26" pos:end="21:27">++</operator></expr>;</expr_stmt>

            <return pos:start="23:13" pos:end="23:21">return <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:59"><expr pos:start="29:9" pos:end="29:58"><name pos:start="29:9" pos:end="29:10">bp</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="29:58"><name pos:start="29:14" pos:end="29:24">qemu_malloc</name><argument_list pos:start="29:25" pos:end="29:58">(<argument pos:start="29:26" pos:end="29:57"><expr pos:start="29:26" pos:end="29:57"><sizeof pos:start="29:26" pos:end="29:57">sizeof<argument_list pos:start="29:32" pos:end="29:57">(<argument pos:start="29:33" pos:end="29:56"><expr pos:start="29:33" pos:end="29:56">struct <name pos:start="29:40" pos:end="29:56">kvm_sw_breakpoint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:27"><if pos:start="31:9" pos:end="33:27">if <condition pos:start="31:12" pos:end="31:16">(<expr pos:start="31:13" pos:end="31:15"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:15">bp</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:27"><block_content pos:start="33:13" pos:end="33:27">

            <return pos:start="33:13" pos:end="33:27">return <expr pos:start="33:20" pos:end="33:26"><operator pos:start="33:20" pos:end="33:20">-</operator><name pos:start="33:21" pos:end="33:26">ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:22"><expr pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:10">bp</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:14">pc</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:21">addr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:10">bp</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:21">use_count</name></name> <operator pos:start="39:23" pos:end="39:23">=</operator> <literal type="number" pos:start="39:25" pos:end="39:25">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:11">err</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:60"><name pos:start="41:15" pos:end="41:43">kvm_arch_insert_sw_breakpoint</name><argument_list pos:start="41:44" pos:end="41:60">(<argument pos:start="41:45" pos:end="41:55"><expr pos:start="41:45" pos:end="41:55"><name pos:start="41:45" pos:end="41:55">current_env</name></expr></argument>, <argument pos:start="41:58" pos:end="41:59"><expr pos:start="41:58" pos:end="41:59"><name pos:start="41:58" pos:end="41:59">bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:16">(<expr pos:start="43:13" pos:end="43:15"><name pos:start="43:13" pos:end="43:15">err</name></expr>)</condition> <block pos:start="43:18" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:23">

            <expr_stmt pos:start="45:13" pos:end="45:21"><expr pos:start="45:13" pos:end="45:20"><call pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:16">free</name><argument_list pos:start="45:17" pos:end="45:20">(<argument pos:start="45:18" pos:end="45:19"><expr pos:start="45:18" pos:end="45:19"><name pos:start="45:18" pos:end="45:19">bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:23">return <expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">err</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="53:9" pos:end="55:37"><expr pos:start="53:9" pos:end="55:36"><call pos:start="53:9" pos:end="55:36"><name pos:start="53:9" pos:end="53:26">QTAILQ_INSERT_HEAD</name><argument_list pos:start="53:27" pos:end="55:36">(<argument pos:start="53:28" pos:end="53:70"><expr pos:start="53:28" pos:end="53:70"><operator pos:start="53:28" pos:end="53:28">&amp;</operator><name pos:start="53:29" pos:end="53:70"><name pos:start="53:29" pos:end="53:39">current_env</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:50">kvm_state</name><operator pos:start="53:51" pos:end="53:52">-&gt;</operator><name pos:start="53:53" pos:end="53:70">kvm_sw_breakpoints</name></name></expr></argument>,

                          <argument pos:start="55:27" pos:end="55:28"><expr pos:start="55:27" pos:end="55:28"><name pos:start="55:27" pos:end="55:28">bp</name></expr></argument>, <argument pos:start="55:31" pos:end="55:35"><expr pos:start="55:31" pos:end="55:35"><name pos:start="55:31" pos:end="55:35">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="65:5">else <block pos:start="57:12" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:23">

        <expr_stmt pos:start="59:9" pos:end="59:61"><expr pos:start="59:9" pos:end="59:60"><name pos:start="59:9" pos:end="59:11">err</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:60"><name pos:start="59:15" pos:end="59:43">kvm_arch_insert_hw_breakpoint</name><argument_list pos:start="59:44" pos:end="59:60">(<argument pos:start="59:45" pos:end="59:48"><expr pos:start="59:45" pos:end="59:48"><name pos:start="59:45" pos:end="59:48">addr</name></expr></argument>, <argument pos:start="59:51" pos:end="59:53"><expr pos:start="59:51" pos:end="59:53"><name pos:start="59:51" pos:end="59:53">len</name></expr></argument>, <argument pos:start="59:56" pos:end="59:59"><expr pos:start="59:56" pos:end="59:59"><name pos:start="59:56" pos:end="59:59">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="63:23"><if pos:start="61:9" pos:end="63:23">if <condition pos:start="61:12" pos:end="61:16">(<expr pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">err</name></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:23"><block_content pos:start="63:13" pos:end="63:23">

            <return pos:start="63:13" pos:end="63:23">return <expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">err</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="69:5" pos:end="77:5">for <control pos:start="69:9" pos:end="69:59">(<init pos:start="69:10" pos:end="69:25"><expr pos:start="69:10" pos:end="69:24"><name pos:start="69:10" pos:end="69:12">env</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <name pos:start="69:16" pos:end="69:24">first_cpu</name></expr>;</init> <condition pos:start="69:27" pos:end="69:38"><expr pos:start="69:27" pos:end="69:37"><name pos:start="69:27" pos:end="69:29">env</name> <operator pos:start="69:31" pos:end="69:32">!=</operator> <name pos:start="69:34" pos:end="69:37">NULL</name></expr>;</condition> <incr pos:start="69:40" pos:end="69:58"><expr pos:start="69:40" pos:end="69:58"><name pos:start="69:40" pos:end="69:42">env</name> <operator pos:start="69:44" pos:end="69:44">=</operator> <name pos:start="69:46" pos:end="69:58"><name pos:start="69:46" pos:end="69:48">env</name><operator pos:start="69:49" pos:end="69:50">-&gt;</operator><name pos:start="69:51" pos:end="69:58">next_cpu</name></name></expr></incr>)</control> <block pos:start="69:61" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:23">

        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:11">err</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:44"><name pos:start="71:15" pos:end="71:36">kvm_update_guest_debug</name><argument_list pos:start="71:37" pos:end="71:44">(<argument pos:start="71:38" pos:end="71:40"><expr pos:start="71:38" pos:end="71:40"><name pos:start="71:38" pos:end="71:40">env</name></expr></argument>, <argument pos:start="71:43" pos:end="71:43"><expr pos:start="71:43" pos:end="71:43"><literal type="number" pos:start="71:43" pos:end="71:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="75:23"><if pos:start="73:9" pos:end="75:23">if <condition pos:start="73:12" pos:end="73:16">(<expr pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">err</name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:23"><block_content pos:start="75:13" pos:end="75:23">

            <return pos:start="75:13" pos:end="75:23">return <expr pos:start="75:20" pos:end="75:22"><name pos:start="75:20" pos:end="75:22">err</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
