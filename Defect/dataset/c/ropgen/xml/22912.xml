<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22912.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">test_identify</name><parameter_list pos:start="1:26" pos:end="1:31">(<parameter pos:start="1:27" pos:end="1:30"><decl pos:start="1:27" pos:end="1:30"><type pos:start="1:27" pos:end="1:30"><name pos:start="1:27" pos:end="1:30">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:20">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:16">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:21"><name pos:start="7:14" pos:end="7:16">buf</name><index pos:start="7:17" pos:end="7:21">[<expr pos:start="7:18" pos:end="7:20"><literal type="number" pos:start="7:18" pos:end="7:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="23:41"><expr pos:start="15:5" pos:end="23:40"><call pos:start="15:5" pos:end="23:40"><name pos:start="15:5" pos:end="15:18">ide_test_start</name><argument_list pos:start="15:19" pos:end="23:40">(

        <argument pos:start="17:9" pos:end="21:31"><expr pos:start="17:9" pos:end="21:31"><literal type="string" pos:start="17:9" pos:end="17:20">"-vnc none "</literal>

        <literal type="string" pos:start="19:9" pos:end="19:58">"-drive file=%s,if=ide,serial=%s,cache=writeback "</literal>

        <literal type="string" pos:start="21:9" pos:end="21:31">"-global ide-hd.ver=%s"</literal></expr></argument>,

        <argument pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">tmp_path</name></expr></argument>, <argument pos:start="23:19" pos:end="23:28"><expr pos:start="23:19" pos:end="23:28"><literal type="string" pos:start="23:19" pos:end="23:28">"testdisk"</literal></expr></argument>, <argument pos:start="23:31" pos:end="23:39"><expr pos:start="23:31" pos:end="23:39"><literal type="string" pos:start="23:31" pos:end="23:39">"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:37">/* IDENTIFY command on device 0*/</comment>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><call pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:8">outb</name><argument_list pos:start="29:9" pos:end="29:34">(<argument pos:start="29:10" pos:end="29:30"><expr pos:start="29:10" pos:end="29:30"><name pos:start="29:10" pos:end="29:17">IDE_BASE</name> <operator pos:start="29:19" pos:end="29:19">+</operator> <name pos:start="29:21" pos:end="29:30">reg_device</name></expr></argument>, <argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><literal type="number" pos:start="29:33" pos:end="29:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:47"><expr pos:start="31:5" pos:end="31:46"><call pos:start="31:5" pos:end="31:46"><name pos:start="31:5" pos:end="31:8">outb</name><argument_list pos:start="31:9" pos:end="31:46">(<argument pos:start="31:10" pos:end="31:31"><expr pos:start="31:10" pos:end="31:31"><name pos:start="31:10" pos:end="31:17">IDE_BASE</name> <operator pos:start="31:19" pos:end="31:19">+</operator> <name pos:start="31:21" pos:end="31:31">reg_command</name></expr></argument>, <argument pos:start="31:34" pos:end="31:45"><expr pos:start="31:34" pos:end="31:45"><name pos:start="31:34" pos:end="31:45">CMD_IDENTIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:57">/* Read in the IDENTIFY buffer and check registers */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:8">data</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:37"><name pos:start="37:12" pos:end="37:14">inb</name><argument_list pos:start="37:15" pos:end="37:37">(<argument pos:start="37:16" pos:end="37:36"><expr pos:start="37:16" pos:end="37:36"><name pos:start="37:16" pos:end="37:23">IDE_BASE</name> <operator pos:start="37:25" pos:end="37:25">+</operator> <name pos:start="37:27" pos:end="37:36">reg_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:39"><expr pos:start="39:5" pos:end="39:38"><call pos:start="39:5" pos:end="39:38"><name pos:start="39:5" pos:end="39:19">g_assert_cmpint</name><argument_list pos:start="39:20" pos:end="39:38">(<argument pos:start="39:21" pos:end="39:30"><expr pos:start="39:21" pos:end="39:30"><name pos:start="39:21" pos:end="39:24">data</name> <operator pos:start="39:26" pos:end="39:26">&amp;</operator> <name pos:start="39:28" pos:end="39:30">DEV</name></expr></argument>, <argument pos:start="39:33" pos:end="39:34"><expr pos:start="39:33" pos:end="39:34"><operator pos:start="39:33" pos:end="39:34">==</operator></expr></argument>, <argument pos:start="39:37" pos:end="39:37"><expr pos:start="39:37" pos:end="39:37"><literal type="number" pos:start="39:37" pos:end="39:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="43:5" pos:end="55:5">for <control pos:start="43:9" pos:end="43:29">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:24"><expr pos:start="43:17" pos:end="43:23"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <literal type="number" pos:start="43:21" pos:end="43:23">256</literal></expr>;</condition> <incr pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:26">i</name><operator pos:start="43:27" pos:end="43:28">++</operator></expr></incr>)</control> <block pos:start="43:31" pos:end="55:5">{<block_content pos:start="45:9" pos:end="53:56">

        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:12">data</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:41"><name pos:start="45:16" pos:end="45:18">inb</name><argument_list pos:start="45:19" pos:end="45:41">(<argument pos:start="45:20" pos:end="45:40"><expr pos:start="45:20" pos:end="45:40"><name pos:start="45:20" pos:end="45:27">IDE_BASE</name> <operator pos:start="45:29" pos:end="45:29">+</operator> <name pos:start="45:31" pos:end="45:40">reg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:41"><expr pos:start="47:9" pos:end="47:40"><call pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:22">assert_bit_set</name><argument_list pos:start="47:23" pos:end="47:40">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">data</name></expr></argument>, <argument pos:start="47:30" pos:end="47:39"><expr pos:start="47:30" pos:end="47:39"><name pos:start="47:30" pos:end="47:33">DRDY</name> <operator pos:start="47:35" pos:end="47:35">|</operator> <name pos:start="47:37" pos:end="47:39">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:47"><expr pos:start="49:9" pos:end="49:46"><call pos:start="49:9" pos:end="49:46"><name pos:start="49:9" pos:end="49:24">assert_bit_clear</name><argument_list pos:start="49:25" pos:end="49:46">(<argument pos:start="49:26" pos:end="49:29"><expr pos:start="49:26" pos:end="49:29"><name pos:start="49:26" pos:end="49:29">data</name></expr></argument>, <argument pos:start="49:32" pos:end="49:45"><expr pos:start="49:32" pos:end="49:45"><name pos:start="49:32" pos:end="49:34">BSY</name> <operator pos:start="49:36" pos:end="49:36">|</operator> <name pos:start="49:38" pos:end="49:39">DF</name> <operator pos:start="49:41" pos:end="49:41">|</operator> <name pos:start="49:43" pos:end="49:45">ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:56"><expr pos:start="53:9" pos:end="53:55"><operator pos:start="53:9" pos:end="53:9">(</operator><operator pos:start="53:10" pos:end="53:10">(</operator><name pos:start="53:11" pos:end="53:18">uint16_t</name><operator pos:start="53:19" pos:end="53:19">*</operator><operator pos:start="53:20" pos:end="53:20">)</operator> <name pos:start="53:22" pos:end="53:24">buf</name><operator pos:start="53:25" pos:end="53:25">)</operator><index pos:start="53:26" pos:end="53:28">[<expr pos:start="53:27" pos:end="53:27"><name pos:start="53:27" pos:end="53:27">i</name></expr>]</index> <operator pos:start="53:30" pos:end="53:30">=</operator> <call pos:start="53:32" pos:end="53:55"><name pos:start="53:32" pos:end="53:34">inw</name><argument_list pos:start="53:35" pos:end="53:55">(<argument pos:start="53:36" pos:end="53:54"><expr pos:start="53:36" pos:end="53:54"><name pos:start="53:36" pos:end="53:43">IDE_BASE</name> <operator pos:start="53:45" pos:end="53:45">+</operator> <name pos:start="53:47" pos:end="53:54">reg_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="59:5" pos:end="59:38"><expr pos:start="59:5" pos:end="59:37"><name pos:start="59:5" pos:end="59:8">data</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <call pos:start="59:12" pos:end="59:37"><name pos:start="59:12" pos:end="59:14">inb</name><argument_list pos:start="59:15" pos:end="59:37">(<argument pos:start="59:16" pos:end="59:36"><expr pos:start="59:16" pos:end="59:36"><name pos:start="59:16" pos:end="59:23">IDE_BASE</name> <operator pos:start="59:25" pos:end="59:25">+</operator> <name pos:start="59:27" pos:end="59:36">reg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:31"><expr pos:start="61:5" pos:end="61:30"><call pos:start="61:5" pos:end="61:30"><name pos:start="61:5" pos:end="61:18">assert_bit_set</name><argument_list pos:start="61:19" pos:end="61:30">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">data</name></expr></argument>, <argument pos:start="61:26" pos:end="61:29"><expr pos:start="61:26" pos:end="61:29"><name pos:start="61:26" pos:end="61:29">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:49"><expr pos:start="63:5" pos:end="63:48"><call pos:start="63:5" pos:end="63:48"><name pos:start="63:5" pos:end="63:20">assert_bit_clear</name><argument_list pos:start="63:21" pos:end="63:48">(<argument pos:start="63:22" pos:end="63:25"><expr pos:start="63:22" pos:end="63:25"><name pos:start="63:22" pos:end="63:25">data</name></expr></argument>, <argument pos:start="63:28" pos:end="63:47"><expr pos:start="63:28" pos:end="63:47"><name pos:start="63:28" pos:end="63:30">BSY</name> <operator pos:start="63:32" pos:end="63:32">|</operator> <name pos:start="63:34" pos:end="63:35">DF</name> <operator pos:start="63:37" pos:end="63:37">|</operator> <name pos:start="63:39" pos:end="63:41">ERR</name> <operator pos:start="63:43" pos:end="63:43">|</operator> <name pos:start="63:45" pos:end="63:47">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:51">/* Check serial number/version in the buffer */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><call pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:22">string_cpu_to_be16</name><argument_list pos:start="69:23" pos:end="69:36">(<argument pos:start="69:24" pos:end="69:31"><expr pos:start="69:24" pos:end="69:31"><operator pos:start="69:24" pos:end="69:24">&amp;</operator><name pos:start="69:25" pos:end="69:31"><name pos:start="69:25" pos:end="69:27">buf</name><index pos:start="69:28" pos:end="69:31">[<expr pos:start="69:29" pos:end="69:30"><literal type="number" pos:start="69:29" pos:end="69:30">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:34" pos:end="69:35"><expr pos:start="69:34" pos:end="69:35"><literal type="number" pos:start="69:34" pos:end="69:35">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:55"><expr pos:start="71:5" pos:end="71:54"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:54"><name pos:start="71:11" pos:end="71:16">memcmp</name><argument_list pos:start="71:17" pos:end="71:54">(<argument pos:start="71:18" pos:end="71:25"><expr pos:start="71:18" pos:end="71:25"><operator pos:start="71:18" pos:end="71:18">&amp;</operator><name pos:start="71:19" pos:end="71:25"><name pos:start="71:19" pos:end="71:21">buf</name><index pos:start="71:22" pos:end="71:25">[<expr pos:start="71:23" pos:end="71:24"><literal type="number" pos:start="71:23" pos:end="71:24">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="71:28" pos:end="71:49"><expr pos:start="71:28" pos:end="71:49"><literal type="string" pos:start="71:28" pos:end="71:49">"testdisk            "</literal></expr></argument>, <argument pos:start="71:52" pos:end="71:53"><expr pos:start="71:52" pos:end="71:53"><literal type="number" pos:start="71:52" pos:end="71:53">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:23"><expr pos:start="73:5" pos:end="73:22"><call pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:12">g_assert</name><argument_list pos:start="73:13" pos:end="73:22">(<argument pos:start="73:14" pos:end="73:21"><expr pos:start="73:14" pos:end="73:21"><name pos:start="73:14" pos:end="73:16">ret</name> <operator pos:start="73:18" pos:end="73:19">==</operator> <literal type="number" pos:start="73:21" pos:end="73:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:36"><expr pos:start="77:5" pos:end="77:35"><call pos:start="77:5" pos:end="77:35"><name pos:start="77:5" pos:end="77:22">string_cpu_to_be16</name><argument_list pos:start="77:23" pos:end="77:35">(<argument pos:start="77:24" pos:end="77:31"><expr pos:start="77:24" pos:end="77:31"><operator pos:start="77:24" pos:end="77:24">&amp;</operator><name pos:start="77:25" pos:end="77:31"><name pos:start="77:25" pos:end="77:27">buf</name><index pos:start="77:28" pos:end="77:31">[<expr pos:start="77:29" pos:end="77:30"><literal type="number" pos:start="77:29" pos:end="77:30">23</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:34" pos:end="77:34"><expr pos:start="77:34" pos:end="77:34"><literal type="number" pos:start="77:34" pos:end="77:34">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:42"><expr pos:start="79:5" pos:end="79:41"><name pos:start="79:5" pos:end="79:7">ret</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:41"><name pos:start="79:11" pos:end="79:16">memcmp</name><argument_list pos:start="79:17" pos:end="79:41">(<argument pos:start="79:18" pos:end="79:25"><expr pos:start="79:18" pos:end="79:25"><operator pos:start="79:18" pos:end="79:18">&amp;</operator><name pos:start="79:19" pos:end="79:25"><name pos:start="79:19" pos:end="79:21">buf</name><index pos:start="79:22" pos:end="79:25">[<expr pos:start="79:23" pos:end="79:24"><literal type="number" pos:start="79:23" pos:end="79:24">23</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:28" pos:end="79:37"><expr pos:start="79:28" pos:end="79:37"><literal type="string" pos:start="79:28" pos:end="79:37">"version "</literal></expr></argument>, <argument pos:start="79:40" pos:end="79:40"><expr pos:start="79:40" pos:end="79:40"><literal type="number" pos:start="79:40" pos:end="79:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:23"><expr pos:start="81:5" pos:end="81:22"><call pos:start="81:5" pos:end="81:22"><name pos:start="81:5" pos:end="81:12">g_assert</name><argument_list pos:start="81:13" pos:end="81:22">(<argument pos:start="81:14" pos:end="81:21"><expr pos:start="81:14" pos:end="81:21"><name pos:start="81:14" pos:end="81:16">ret</name> <operator pos:start="81:18" pos:end="81:19">==</operator> <literal type="number" pos:start="81:21" pos:end="81:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:33">/* Write cache enabled bit */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:34"><expr pos:start="87:5" pos:end="87:33"><call pos:start="87:5" pos:end="87:33"><name pos:start="87:5" pos:end="87:18">assert_bit_set</name><argument_list pos:start="87:19" pos:end="87:33">(<argument pos:start="87:20" pos:end="87:26"><expr pos:start="87:20" pos:end="87:26"><name pos:start="87:20" pos:end="87:26"><name pos:start="87:20" pos:end="87:22">buf</name><index pos:start="87:23" pos:end="87:26">[<expr pos:start="87:24" pos:end="87:25"><literal type="number" pos:start="87:24" pos:end="87:25">85</literal></expr>]</index></name></expr></argument>, <argument pos:start="87:29" pos:end="87:32"><expr pos:start="87:29" pos:end="87:32"><literal type="number" pos:start="87:29" pos:end="87:32">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:20"><expr pos:start="91:5" pos:end="91:19"><call pos:start="91:5" pos:end="91:19"><name pos:start="91:5" pos:end="91:17">ide_test_quit</name><argument_list pos:start="91:18" pos:end="91:19">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
