<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4455.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:37">kvm_arch_get_supported_cpuid</name><parameter_list pos:start="1:38" pos:end="3:62">(<parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">CPUState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">env</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:70"><decl pos:start="1:54" pos:end="1:70"><type pos:start="1:54" pos:end="1:70"><name pos:start="1:54" pos:end="1:61">uint32_t</name></type> <name pos:start="1:63" pos:end="1:70">function</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:52"><decl pos:start="3:39" pos:end="3:52"><type pos:start="3:39" pos:end="3:52"><name pos:start="3:39" pos:end="3:46">uint32_t</name></type> <name pos:start="3:48" pos:end="3:52">index</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:61"><decl pos:start="3:55" pos:end="3:61"><type pos:start="3:55" pos:end="3:61"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:61">reg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="117:1">{<block_content pos:start="7:5" pos:end="115:15">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">kvm_cpuid2</name></name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">cpuid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">ret</name> <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:24">cpuid_1_edx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:24">has_kvm_features</name> <init pos:start="15:26" pos:end="15:28">= <expr pos:start="15:28" pos:end="15:28"><literal type="number" pos:start="15:28" pos:end="15:28">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:12"><expr pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:7">max</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <literal type="number" pos:start="19:11" pos:end="19:11">1</literal></expr>;</expr_stmt>

    <while pos:start="21:5" pos:end="25:5">while <condition pos:start="21:11" pos:end="21:64">(<expr pos:start="21:12" pos:end="21:63"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:17">cpuid</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:54"><name pos:start="21:21" pos:end="21:33">try_get_cpuid</name><argument_list pos:start="21:34" pos:end="21:54">(<argument pos:start="21:35" pos:end="21:48"><expr pos:start="21:35" pos:end="21:48"><name pos:start="21:35" pos:end="21:48"><name pos:start="21:35" pos:end="21:37">env</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:48">kvm_state</name></name></expr></argument>, <argument pos:start="21:51" pos:end="21:53"><expr pos:start="21:51" pos:end="21:53"><name pos:start="21:51" pos:end="21:53">max</name></expr></argument>)</argument_list></call><operator pos:start="21:55" pos:end="21:55">)</operator> <operator pos:start="21:57" pos:end="21:58">==</operator> <name pos:start="21:60" pos:end="21:63">NULL</name></expr>)</condition> <block pos:start="21:66" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:17">

        <expr_stmt pos:start="23:9" pos:end="23:17"><expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:11">max</name> <operator pos:start="23:13" pos:end="23:14">*=</operator> <literal type="number" pos:start="23:16" pos:end="23:16">2</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <for pos:start="29:5" pos:end="97:5">for <control pos:start="29:9" pos:end="29:37">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:32"><expr pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:17">i</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:31"><name pos:start="29:21" pos:end="29:25">cpuid</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:31">nent</name></name></expr>;</condition> <incr pos:start="29:34" pos:end="29:36"><expr pos:start="29:34" pos:end="29:36"><operator pos:start="29:34" pos:end="29:35">++</operator><name pos:start="29:36" pos:end="29:36">i</name></expr></incr>)</control> <block pos:start="29:39" pos:end="97:5">{<block_content pos:start="31:9" pos:end="95:9">

        <if_stmt pos:start="31:9" pos:end="95:9"><if pos:start="31:9" pos:end="95:9">if <condition pos:start="31:12" pos:end="33:45">(<expr pos:start="31:13" pos:end="33:44"><name pos:start="31:13" pos:end="31:29"><name pos:start="31:13" pos:end="31:17">cpuid</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:26">entries</name><index pos:start="31:27" pos:end="31:29">[<expr pos:start="31:28" pos:end="31:28"><name pos:start="31:28" pos:end="31:28">i</name></expr>]</index></name><operator pos:start="31:30" pos:end="31:30">.</operator><name pos:start="31:31" pos:end="31:38">function</name> <operator pos:start="31:40" pos:end="31:41">==</operator> <name pos:start="31:43" pos:end="31:50">function</name> <operator pos:start="31:52" pos:end="31:53">&amp;&amp;</operator>

            <name pos:start="33:13" pos:end="33:29"><name pos:start="33:13" pos:end="33:17">cpuid</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:26">entries</name><index pos:start="33:27" pos:end="33:29">[<expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">i</name></expr>]</index></name><operator pos:start="33:30" pos:end="33:30">.</operator><name pos:start="33:31" pos:end="33:35">index</name> <operator pos:start="33:37" pos:end="33:38">==</operator> <name pos:start="33:40" pos:end="33:44">index</name></expr>)</condition> <block pos:start="33:47" pos:end="95:9">{<block_content pos:start="35:13" pos:end="93:13">

            <if_stmt pos:start="35:13" pos:end="39:13"><if pos:start="35:13" pos:end="39:13">if <condition pos:start="35:16" pos:end="35:65">(<expr pos:start="35:17" pos:end="35:64"><name pos:start="35:17" pos:end="35:33"><name pos:start="35:17" pos:end="35:21">cpuid</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:30">entries</name><index pos:start="35:31" pos:end="35:33">[<expr pos:start="35:32" pos:end="35:32"><name pos:start="35:32" pos:end="35:32">i</name></expr>]</index></name><operator pos:start="35:34" pos:end="35:34">.</operator><name pos:start="35:35" pos:end="35:42">function</name> <operator pos:start="35:44" pos:end="35:45">==</operator> <name pos:start="35:47" pos:end="35:64">KVM_CPUID_FEATURES</name></expr>)</condition> <block pos:start="35:67" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:37">

                <expr_stmt pos:start="37:17" pos:end="37:37"><expr pos:start="37:17" pos:end="37:36"><name pos:start="37:17" pos:end="37:32">has_kvm_features</name> <operator pos:start="37:34" pos:end="37:34">=</operator> <literal type="number" pos:start="37:36" pos:end="37:36">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="41:13" pos:end="93:13">switch <condition pos:start="41:20" pos:end="41:24">(<expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">reg</name></expr>)</condition> <block pos:start="41:26" pos:end="93:13">{<block_content pos:start="43:13" pos:end="91:22">

            <case pos:start="43:13" pos:end="43:23">case <expr pos:start="43:18" pos:end="43:22"><name pos:start="43:18" pos:end="43:22">R_EAX</name></expr>:</case>

                <expr_stmt pos:start="45:17" pos:end="45:44"><expr pos:start="45:17" pos:end="45:43"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:39"><name pos:start="45:23" pos:end="45:27">cpuid</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:36">entries</name><index pos:start="45:37" pos:end="45:39">[<expr pos:start="45:38" pos:end="45:38"><name pos:start="45:38" pos:end="45:38">i</name></expr>]</index></name><operator pos:start="45:40" pos:end="45:40">.</operator><name pos:start="45:41" pos:end="45:43">eax</name></expr>;</expr_stmt>

                <break pos:start="47:17" pos:end="47:22">break;</break>

            <case pos:start="49:13" pos:end="49:23">case <expr pos:start="49:18" pos:end="49:22"><name pos:start="49:18" pos:end="49:22">R_EBX</name></expr>:</case>

                <expr_stmt pos:start="51:17" pos:end="51:44"><expr pos:start="51:17" pos:end="51:43"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:39"><name pos:start="51:23" pos:end="51:27">cpuid</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:36">entries</name><index pos:start="51:37" pos:end="51:39">[<expr pos:start="51:38" pos:end="51:38"><name pos:start="51:38" pos:end="51:38">i</name></expr>]</index></name><operator pos:start="51:40" pos:end="51:40">.</operator><name pos:start="51:41" pos:end="51:43">ebx</name></expr>;</expr_stmt>

                <break pos:start="53:17" pos:end="53:22">break;</break>

            <case pos:start="55:13" pos:end="55:23">case <expr pos:start="55:18" pos:end="55:22"><name pos:start="55:18" pos:end="55:22">R_ECX</name></expr>:</case>

                <expr_stmt pos:start="57:17" pos:end="57:44"><expr pos:start="57:17" pos:end="57:43"><name pos:start="57:17" pos:end="57:19">ret</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <name pos:start="57:23" pos:end="57:39"><name pos:start="57:23" pos:end="57:27">cpuid</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:36">entries</name><index pos:start="57:37" pos:end="57:39">[<expr pos:start="57:38" pos:end="57:38"><name pos:start="57:38" pos:end="57:38">i</name></expr>]</index></name><operator pos:start="57:40" pos:end="57:40">.</operator><name pos:start="57:41" pos:end="57:43">ecx</name></expr>;</expr_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            <case pos:start="61:13" pos:end="61:23">case <expr pos:start="61:18" pos:end="61:22"><name pos:start="61:18" pos:end="61:22">R_EDX</name></expr>:</case>

                <expr_stmt pos:start="63:17" pos:end="63:44"><expr pos:start="63:17" pos:end="63:43"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:39"><name pos:start="63:23" pos:end="63:27">cpuid</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:36">entries</name><index pos:start="63:37" pos:end="63:39">[<expr pos:start="63:38" pos:end="63:38"><name pos:start="63:38" pos:end="63:38">i</name></expr>]</index></name><operator pos:start="63:40" pos:end="63:40">.</operator><name pos:start="63:41" pos:end="63:43">edx</name></expr>;</expr_stmt>

                <switch pos:start="65:17" pos:end="89:17">switch <condition pos:start="65:24" pos:end="65:33">(<expr pos:start="65:25" pos:end="65:32"><name pos:start="65:25" pos:end="65:32">function</name></expr>)</condition> <block pos:start="65:35" pos:end="89:17">{<block_content pos:start="67:17" pos:end="87:26">

                <case pos:start="67:17" pos:end="67:23">case <expr pos:start="67:22" pos:end="67:22"><literal type="number" pos:start="67:22" pos:end="67:22">1</literal></expr>:</case>

                    <comment type="block" pos:start="69:21" pos:end="69:77">/* KVM before 2.6.30 misreports the following features */</comment>

                    <expr_stmt pos:start="71:21" pos:end="71:74"><expr pos:start="71:21" pos:end="71:73"><name pos:start="71:21" pos:end="71:23">ret</name> <operator pos:start="71:25" pos:end="71:26">|=</operator> <name pos:start="71:28" pos:end="71:37">CPUID_MTRR</name> <operator pos:start="71:39" pos:end="71:39">|</operator> <name pos:start="71:41" pos:end="71:49">CPUID_PAT</name> <operator pos:start="71:51" pos:end="71:51">|</operator> <name pos:start="71:53" pos:end="71:61">CPUID_MCE</name> <operator pos:start="71:63" pos:end="71:63">|</operator> <name pos:start="71:65" pos:end="71:73">CPUID_MCA</name></expr>;</expr_stmt>

                    <break pos:start="73:21" pos:end="73:26">break;</break>

                <case pos:start="75:17" pos:end="75:32">case <expr pos:start="75:22" pos:end="75:31"><literal type="number" pos:start="75:22" pos:end="75:31">0x80000001</literal></expr>:</case>

                    <comment type="block" pos:start="77:21" pos:end="81:23">/* On Intel, kvm returns cpuid according to the Intel spec,

                     * so add missing bits according to the AMD spec:

                     */</comment>

                    <expr_stmt pos:start="83:21" pos:end="83:81"><expr pos:start="83:21" pos:end="83:80"><name pos:start="83:21" pos:end="83:31">cpuid_1_edx</name> <operator pos:start="83:33" pos:end="83:33">=</operator> <call pos:start="83:35" pos:end="83:80"><name pos:start="83:35" pos:end="83:62">kvm_arch_get_supported_cpuid</name><argument_list pos:start="83:63" pos:end="83:80">(<argument pos:start="83:64" pos:end="83:66"><expr pos:start="83:64" pos:end="83:66"><name pos:start="83:64" pos:end="83:66">env</name></expr></argument>, <argument pos:start="83:69" pos:end="83:69"><expr pos:start="83:69" pos:end="83:69"><literal type="number" pos:start="83:69" pos:end="83:69">1</literal></expr></argument>, <argument pos:start="83:72" pos:end="83:72"><expr pos:start="83:72" pos:end="83:72"><literal type="number" pos:start="83:72" pos:end="83:72">0</literal></expr></argument>, <argument pos:start="83:75" pos:end="83:79"><expr pos:start="83:75" pos:end="83:79"><name pos:start="83:75" pos:end="83:79">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="85:21" pos:end="85:51"><expr pos:start="85:21" pos:end="85:50"><name pos:start="85:21" pos:end="85:23">ret</name> <operator pos:start="85:25" pos:end="85:26">|=</operator> <name pos:start="85:28" pos:end="85:38">cpuid_1_edx</name> <operator pos:start="85:40" pos:end="85:40">&amp;</operator> <literal type="number" pos:start="85:42" pos:end="85:50">0x183f7ff</literal></expr>;</expr_stmt>

                    <break pos:start="87:21" pos:end="87:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="91:17" pos:end="91:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="101:5" pos:end="101:21"><expr pos:start="101:5" pos:end="101:20"><call pos:start="101:5" pos:end="101:20"><name pos:start="101:5" pos:end="101:13">qemu_free</name><argument_list pos:start="101:14" pos:end="101:20">(<argument pos:start="101:15" pos:end="101:19"><expr pos:start="101:15" pos:end="101:19"><name pos:start="101:15" pos:end="101:19">cpuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:36">/* fallback for older kernels */</comment>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:62">(<expr pos:start="107:9" pos:end="107:61"><operator pos:start="107:9" pos:end="107:9">!</operator><name pos:start="107:10" pos:end="107:25">has_kvm_features</name> <operator pos:start="107:27" pos:end="107:28">&amp;&amp;</operator> <operator pos:start="107:30" pos:end="107:30">(</operator><name pos:start="107:31" pos:end="107:38">function</name> <operator pos:start="107:40" pos:end="107:41">==</operator> <name pos:start="107:43" pos:end="107:60">KVM_CPUID_FEATURES</name><operator pos:start="107:61" pos:end="107:61">)</operator></expr>)</condition> <block pos:start="107:64" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:37">

        <expr_stmt pos:start="109:9" pos:end="109:37"><expr pos:start="109:9" pos:end="109:36"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="109:36"><name pos:start="109:15" pos:end="109:31">get_para_features</name><argument_list pos:start="109:32" pos:end="109:36">(<argument pos:start="109:33" pos:end="109:35"><expr pos:start="109:33" pos:end="109:35"><name pos:start="109:33" pos:end="109:35">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="115:5" pos:end="115:15">return <expr pos:start="115:12" pos:end="115:14"><name pos:start="115:12" pos:end="115:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
