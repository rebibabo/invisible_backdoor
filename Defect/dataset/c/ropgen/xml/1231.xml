<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1231.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:18">MemTxResult</name></type> <name pos:start="1:20" pos:end="1:36">nvic_sysreg_write</name><parameter_list pos:start="1:37" pos:end="5:54">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:41">void</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">opaque</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:57">hwaddr</name></type> <name pos:start="1:59" pos:end="1:62">addr</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:45">uint64_t</name></type> <name pos:start="3:47" pos:end="3:51">value</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:66"><decl pos:start="3:54" pos:end="3:66"><type pos:start="3:54" pos:end="3:66"><name pos:start="3:54" pos:end="3:61">unsigned</name></type> <name pos:start="3:63" pos:end="3:66">size</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:53"><decl pos:start="5:38" pos:end="5:53"><type pos:start="5:38" pos:end="5:53"><name pos:start="5:38" pos:end="5:47">MemTxAttrs</name></type> <name pos:start="5:49" pos:end="5:53">attrs</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="149:1">{<block_content pos:start="9:5" pos:end="147:20">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">NVICState</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:16">s</name> <init pos:start="9:18" pos:end="9:38">= <expr pos:start="9:20" pos:end="9:38"><operator pos:start="9:20" pos:end="9:20">(</operator><name pos:start="9:21" pos:end="9:29">NVICState</name> <operator pos:start="9:31" pos:end="9:31">*</operator><operator pos:start="9:32" pos:end="9:32">)</operator><name pos:start="9:33" pos:end="9:38">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:19">offset</name> <init pos:start="11:21" pos:end="11:26">= <expr pos:start="11:23" pos:end="11:26"><name pos:start="11:23" pos:end="11:26">addr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:14">i</name></decl>, <decl pos:start="13:17" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:17" pos:end="13:24">startvec</name></decl>, <decl pos:start="13:27" pos:end="13:29"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:27" pos:end="13:29">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:19">setval</name> <init pos:start="15:21" pos:end="15:23">= <expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:47"><expr pos:start="19:5" pos:end="19:46"><call pos:start="19:5" pos:end="19:46"><name pos:start="19:5" pos:end="19:27">trace_nvic_sysreg_write</name><argument_list pos:start="19:28" pos:end="19:46">(<argument pos:start="19:29" pos:end="19:32"><expr pos:start="19:29" pos:end="19:32"><name pos:start="19:29" pos:end="19:32">addr</name></expr></argument>, <argument pos:start="19:35" pos:end="19:39"><expr pos:start="19:35" pos:end="19:39"><name pos:start="19:35" pos:end="19:39">value</name></expr></argument>, <argument pos:start="19:42" pos:end="19:45"><expr pos:start="19:42" pos:end="19:45"><name pos:start="19:42" pos:end="19:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:52">(<expr pos:start="23:9" pos:end="23:51"><name pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:13">attrs</name><operator pos:start="23:14" pos:end="23:14">.</operator><name pos:start="23:15" pos:end="23:18">user</name></name> <operator pos:start="23:20" pos:end="23:21">&amp;&amp;</operator> <operator pos:start="23:23" pos:end="23:23">!</operator><call pos:start="23:24" pos:end="23:51"><name pos:start="23:24" pos:end="23:42">nvic_user_access_ok</name><argument_list pos:start="23:43" pos:end="23:51">(<argument pos:start="23:44" pos:end="23:44"><expr pos:start="23:44" pos:end="23:44"><name pos:start="23:44" pos:end="23:44">s</name></expr></argument>, <argument pos:start="23:47" pos:end="23:50"><expr pos:start="23:47" pos:end="23:50"><name pos:start="23:47" pos:end="23:50">addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:54" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:27">

        <comment type="block" pos:start="25:9" pos:end="25:57">/* Generate BusFault for unprivileged accesses */</comment>

        <return pos:start="27:9" pos:end="27:27">return <expr pos:start="27:16" pos:end="27:26"><name pos:start="27:16" pos:end="27:26">MEMTX_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="33:5" pos:end="131:5">switch <condition pos:start="33:12" pos:end="33:19">(<expr pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:18">offset</name></expr>)</condition> <block pos:start="33:21" pos:end="131:5">{<block_content pos:start="35:5" pos:end="129:24">

    <case pos:start="35:5" pos:end="35:25">case <expr pos:start="35:10" pos:end="35:24"><literal type="number" pos:start="35:10" pos:end="35:14">0x100</literal> <operator pos:start="35:16" pos:end="35:18">...</operator> <literal type="number" pos:start="35:20" pos:end="35:24">0x13f</literal></expr>:</case> <comment type="block" pos:start="35:27" pos:end="35:47">/* NVIC Set enable */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:14">offset</name> <operator pos:start="37:16" pos:end="37:17">+=</operator> <literal type="number" pos:start="37:19" pos:end="37:22">0x80</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:19"><expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:14">setval</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="41:9" pos:end="41:26">/* fall through */</comment>

    <case pos:start="43:5" pos:end="43:25">case <expr pos:start="43:10" pos:end="43:24"><literal type="number" pos:start="43:10" pos:end="43:14">0x180</literal> <operator pos:start="43:16" pos:end="43:18">...</operator> <literal type="number" pos:start="43:20" pos:end="43:24">0x1bf</literal></expr>:</case> <comment type="block" pos:start="43:27" pos:end="43:49">/* NVIC Clear enable */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:57"><expr pos:start="45:9" pos:end="45:56"><name pos:start="45:9" pos:end="45:16">startvec</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:20">8</literal> <operator pos:start="45:22" pos:end="45:22">*</operator> <operator pos:start="45:24" pos:end="45:24">(</operator><name pos:start="45:25" pos:end="45:30">offset</name> <operator pos:start="45:32" pos:end="45:32">-</operator> <literal type="number" pos:start="45:34" pos:end="45:38">0x180</literal><operator pos:start="45:39" pos:end="45:39">)</operator> <operator pos:start="45:41" pos:end="45:41">+</operator> <name pos:start="45:43" pos:end="45:56">NVIC_FIRST_IRQ</name></expr>;</expr_stmt>



        <for pos:start="49:9" pos:end="57:9">for <control pos:start="49:13" pos:end="49:78">(<init pos:start="49:14" pos:end="49:35"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr><operator pos:start="49:19" pos:end="49:19">,</operator> <expr pos:start="49:21" pos:end="49:34"><name pos:start="49:21" pos:end="49:23">end</name> <operator pos:start="49:25" pos:end="49:25">=</operator> <name pos:start="49:27" pos:end="49:30">size</name> <operator pos:start="49:32" pos:end="49:32">*</operator> <literal type="number" pos:start="49:34" pos:end="49:34">8</literal></expr>;</init> <condition pos:start="49:37" pos:end="49:73"><expr pos:start="49:37" pos:end="49:72"><name pos:start="49:37" pos:end="49:37">i</name> <operator pos:start="49:39" pos:end="49:39">&lt;</operator> <name pos:start="49:41" pos:end="49:43">end</name> <operator pos:start="49:45" pos:end="49:46">&amp;&amp;</operator> <name pos:start="49:48" pos:end="49:55">startvec</name> <operator pos:start="49:57" pos:end="49:57">+</operator> <name pos:start="49:59" pos:end="49:59">i</name> <operator pos:start="49:61" pos:end="49:61">&lt;</operator> <name pos:start="49:63" pos:end="49:72"><name pos:start="49:63" pos:end="49:63">s</name><operator pos:start="49:64" pos:end="49:65">-&gt;</operator><name pos:start="49:66" pos:end="49:72">num_irq</name></name></expr>;</condition> <incr pos:start="49:75" pos:end="49:77"><expr pos:start="49:75" pos:end="49:77"><name pos:start="49:75" pos:end="49:75">i</name><operator pos:start="49:76" pos:end="49:77">++</operator></expr></incr>)</control> <block pos:start="49:80" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:13">

            <if_stmt pos:start="51:13" pos:end="55:13"><if pos:start="51:13" pos:end="55:13">if <condition pos:start="51:16" pos:end="51:33">(<expr pos:start="51:17" pos:end="51:32"><name pos:start="51:17" pos:end="51:21">value</name> <operator pos:start="51:23" pos:end="51:23">&amp;</operator> <operator pos:start="51:25" pos:end="51:25">(</operator><literal type="number" pos:start="51:26" pos:end="51:26">1</literal> <operator pos:start="51:28" pos:end="51:29">&lt;&lt;</operator> <name pos:start="51:31" pos:end="51:31">i</name><operator pos:start="51:32" pos:end="51:32">)</operator></expr>)</condition> <block pos:start="51:35" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:58">

                <expr_stmt pos:start="53:17" pos:end="53:58"><expr pos:start="53:17" pos:end="53:57"><name pos:start="53:17" pos:end="53:40"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:26">vectors</name><index pos:start="53:27" pos:end="53:40">[<expr pos:start="53:28" pos:end="53:39"><name pos:start="53:28" pos:end="53:35">startvec</name> <operator pos:start="53:37" pos:end="53:37">+</operator> <name pos:start="53:39" pos:end="53:39">i</name></expr>]</index></name><operator pos:start="53:41" pos:end="53:41">.</operator><name pos:start="53:42" pos:end="53:48">enabled</name> <operator pos:start="53:50" pos:end="53:50">=</operator> <name pos:start="53:52" pos:end="53:57">setval</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><call pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:23">nvic_irq_update</name><argument_list pos:start="59:24" pos:end="59:26">(<argument pos:start="59:25" pos:end="59:25"><expr pos:start="59:25" pos:end="59:25"><name pos:start="59:25" pos:end="59:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:24">return <expr pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:23">MEMTX_OK</name></expr>;</return>

    <case pos:start="63:5" pos:end="63:25">case <expr pos:start="63:10" pos:end="63:24"><literal type="number" pos:start="63:10" pos:end="63:14">0x200</literal> <operator pos:start="63:16" pos:end="63:18">...</operator> <literal type="number" pos:start="63:20" pos:end="63:24">0x23f</literal></expr>:</case> <comment type="block" pos:start="63:27" pos:end="63:45">/* NVIC Set pend */</comment>

        <comment type="block" pos:start="65:9" pos:end="69:11">/* the special logic in armv7m_nvic_set_pending()

         * is not needed since IRQs are never escalated

         */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:23"><expr pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:14">offset</name> <operator pos:start="71:16" pos:end="71:17">+=</operator> <literal type="number" pos:start="71:19" pos:end="71:22">0x80</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:19"><expr pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:14">setval</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="75:9" pos:end="75:26">/* fall through */</comment>

    <case pos:start="77:5" pos:end="77:25">case <expr pos:start="77:10" pos:end="77:24"><literal type="number" pos:start="77:10" pos:end="77:14">0x280</literal> <operator pos:start="77:16" pos:end="77:18">...</operator> <literal type="number" pos:start="77:20" pos:end="77:24">0x2bf</literal></expr>:</case> <comment type="block" pos:start="77:27" pos:end="77:47">/* NVIC Clear pend */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:57"><expr pos:start="79:9" pos:end="79:56"><name pos:start="79:9" pos:end="79:16">startvec</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <literal type="number" pos:start="79:20" pos:end="79:20">8</literal> <operator pos:start="79:22" pos:end="79:22">*</operator> <operator pos:start="79:24" pos:end="79:24">(</operator><name pos:start="79:25" pos:end="79:30">offset</name> <operator pos:start="79:32" pos:end="79:32">-</operator> <literal type="number" pos:start="79:34" pos:end="79:38">0x280</literal><operator pos:start="79:39" pos:end="79:39">)</operator> <operator pos:start="79:41" pos:end="79:41">+</operator> <name pos:start="79:43" pos:end="79:56">NVIC_FIRST_IRQ</name></expr>;</expr_stmt> <comment type="block" pos:start="79:59" pos:end="79:72">/* vector # */</comment>



        <for pos:start="83:9" pos:end="91:9">for <control pos:start="83:13" pos:end="83:78">(<init pos:start="83:14" pos:end="83:35"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">i</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">0</literal></expr><operator pos:start="83:19" pos:end="83:19">,</operator> <expr pos:start="83:21" pos:end="83:34"><name pos:start="83:21" pos:end="83:23">end</name> <operator pos:start="83:25" pos:end="83:25">=</operator> <name pos:start="83:27" pos:end="83:30">size</name> <operator pos:start="83:32" pos:end="83:32">*</operator> <literal type="number" pos:start="83:34" pos:end="83:34">8</literal></expr>;</init> <condition pos:start="83:37" pos:end="83:73"><expr pos:start="83:37" pos:end="83:72"><name pos:start="83:37" pos:end="83:37">i</name> <operator pos:start="83:39" pos:end="83:39">&lt;</operator> <name pos:start="83:41" pos:end="83:43">end</name> <operator pos:start="83:45" pos:end="83:46">&amp;&amp;</operator> <name pos:start="83:48" pos:end="83:55">startvec</name> <operator pos:start="83:57" pos:end="83:57">+</operator> <name pos:start="83:59" pos:end="83:59">i</name> <operator pos:start="83:61" pos:end="83:61">&lt;</operator> <name pos:start="83:63" pos:end="83:72"><name pos:start="83:63" pos:end="83:63">s</name><operator pos:start="83:64" pos:end="83:65">-&gt;</operator><name pos:start="83:66" pos:end="83:72">num_irq</name></name></expr>;</condition> <incr pos:start="83:75" pos:end="83:77"><expr pos:start="83:75" pos:end="83:77"><name pos:start="83:75" pos:end="83:75">i</name><operator pos:start="83:76" pos:end="83:77">++</operator></expr></incr>)</control> <block pos:start="83:80" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:13">

            <if_stmt pos:start="85:13" pos:end="89:13"><if pos:start="85:13" pos:end="89:13">if <condition pos:start="85:16" pos:end="85:33">(<expr pos:start="85:17" pos:end="85:32"><name pos:start="85:17" pos:end="85:21">value</name> <operator pos:start="85:23" pos:end="85:23">&amp;</operator> <operator pos:start="85:25" pos:end="85:25">(</operator><literal type="number" pos:start="85:26" pos:end="85:26">1</literal> <operator pos:start="85:28" pos:end="85:29">&lt;&lt;</operator> <name pos:start="85:31" pos:end="85:31">i</name><operator pos:start="85:32" pos:end="85:32">)</operator></expr>)</condition> <block pos:start="85:35" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:58">

                <expr_stmt pos:start="87:17" pos:end="87:58"><expr pos:start="87:17" pos:end="87:57"><name pos:start="87:17" pos:end="87:40"><name pos:start="87:17" pos:end="87:17">s</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:26">vectors</name><index pos:start="87:27" pos:end="87:40">[<expr pos:start="87:28" pos:end="87:39"><name pos:start="87:28" pos:end="87:35">startvec</name> <operator pos:start="87:37" pos:end="87:37">+</operator> <name pos:start="87:39" pos:end="87:39">i</name></expr>]</index></name><operator pos:start="87:41" pos:end="87:41">.</operator><name pos:start="87:42" pos:end="87:48">pending</name> <operator pos:start="87:50" pos:end="87:50">=</operator> <name pos:start="87:52" pos:end="87:57">setval</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><call pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:23">nvic_irq_update</name><argument_list pos:start="93:24" pos:end="93:26">(<argument pos:start="93:25" pos:end="93:25"><expr pos:start="93:25" pos:end="93:25"><name pos:start="93:25" pos:end="93:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:24">return <expr pos:start="95:16" pos:end="95:23"><name pos:start="95:16" pos:end="95:23">MEMTX_OK</name></expr>;</return>

    <case pos:start="97:5" pos:end="97:25">case <expr pos:start="97:10" pos:end="97:24"><literal type="number" pos:start="97:10" pos:end="97:14">0x300</literal> <operator pos:start="97:16" pos:end="97:18">...</operator> <literal type="number" pos:start="97:20" pos:end="97:24">0x33f</literal></expr>:</case> <comment type="block" pos:start="97:27" pos:end="97:43">/* NVIC Active */</comment>

        <return pos:start="99:9" pos:end="99:24">return <expr pos:start="99:16" pos:end="99:23"><name pos:start="99:16" pos:end="99:23">MEMTX_OK</name></expr>;</return> <comment type="block" pos:start="99:26" pos:end="99:34">/* R/O */</comment>

    <case pos:start="101:5" pos:end="101:25">case <expr pos:start="101:10" pos:end="101:24"><literal type="number" pos:start="101:10" pos:end="101:14">0x400</literal> <operator pos:start="101:16" pos:end="101:18">...</operator> <literal type="number" pos:start="101:20" pos:end="101:24">0x5ef</literal></expr>:</case> <comment type="block" pos:start="101:27" pos:end="101:45">/* NVIC Priority */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:57"><expr pos:start="103:9" pos:end="103:56"><name pos:start="103:9" pos:end="103:16">startvec</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <literal type="number" pos:start="103:20" pos:end="103:20">8</literal> <operator pos:start="103:22" pos:end="103:22">*</operator> <operator pos:start="103:24" pos:end="103:24">(</operator><name pos:start="103:25" pos:end="103:30">offset</name> <operator pos:start="103:32" pos:end="103:32">-</operator> <literal type="number" pos:start="103:34" pos:end="103:38">0x400</literal><operator pos:start="103:39" pos:end="103:39">)</operator> <operator pos:start="103:41" pos:end="103:41">+</operator> <name pos:start="103:43" pos:end="103:56">NVIC_FIRST_IRQ</name></expr>;</expr_stmt> <comment type="block" pos:start="103:59" pos:end="103:72">/* vector # */</comment>



        <for pos:start="107:9" pos:end="111:9">for <control pos:start="107:13" pos:end="107:63">(<init pos:start="107:14" pos:end="107:19"><expr pos:start="107:14" pos:end="107:18"><name pos:start="107:14" pos:end="107:14">i</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>;</init> <condition pos:start="107:21" pos:end="107:58"><expr pos:start="107:21" pos:end="107:57"><name pos:start="107:21" pos:end="107:21">i</name> <operator pos:start="107:23" pos:end="107:23">&lt;</operator> <name pos:start="107:25" pos:end="107:28">size</name> <operator pos:start="107:30" pos:end="107:31">&amp;&amp;</operator> <name pos:start="107:33" pos:end="107:40">startvec</name> <operator pos:start="107:42" pos:end="107:42">+</operator> <name pos:start="107:44" pos:end="107:44">i</name> <operator pos:start="107:46" pos:end="107:46">&lt;</operator> <name pos:start="107:48" pos:end="107:57"><name pos:start="107:48" pos:end="107:48">s</name><operator pos:start="107:49" pos:end="107:50">-&gt;</operator><name pos:start="107:51" pos:end="107:57">num_irq</name></name></expr>;</condition> <incr pos:start="107:60" pos:end="107:62"><expr pos:start="107:60" pos:end="107:62"><name pos:start="107:60" pos:end="107:60">i</name><operator pos:start="107:61" pos:end="107:62">++</operator></expr></incr>)</control> <block pos:start="107:65" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:65">

            <expr_stmt pos:start="109:13" pos:end="109:65"><expr pos:start="109:13" pos:end="109:64"><call pos:start="109:13" pos:end="109:64"><name pos:start="109:13" pos:end="109:20">set_prio</name><argument_list pos:start="109:21" pos:end="109:64">(<argument pos:start="109:22" pos:end="109:22"><expr pos:start="109:22" pos:end="109:22"><name pos:start="109:22" pos:end="109:22">s</name></expr></argument>, <argument pos:start="109:25" pos:end="109:36"><expr pos:start="109:25" pos:end="109:36"><name pos:start="109:25" pos:end="109:32">startvec</name> <operator pos:start="109:34" pos:end="109:34">+</operator> <name pos:start="109:36" pos:end="109:36">i</name></expr></argument>, <argument pos:start="109:39" pos:end="109:63"><expr pos:start="109:39" pos:end="109:63"><operator pos:start="109:39" pos:end="109:39">(</operator><name pos:start="109:40" pos:end="109:44">value</name> <operator pos:start="109:46" pos:end="109:47">&gt;&gt;</operator> <operator pos:start="109:49" pos:end="109:49">(</operator><name pos:start="109:50" pos:end="109:50">i</name> <operator pos:start="109:52" pos:end="109:52">*</operator> <literal type="number" pos:start="109:54" pos:end="109:54">8</literal><operator pos:start="109:55" pos:end="109:55">)</operator><operator pos:start="109:56" pos:end="109:56">)</operator> <operator pos:start="109:58" pos:end="109:58">&amp;</operator> <literal type="number" pos:start="109:60" pos:end="109:63">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="113:9" pos:end="113:27"><expr pos:start="113:9" pos:end="113:26"><call pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:23">nvic_irq_update</name><argument_list pos:start="113:24" pos:end="113:26">(<argument pos:start="113:25" pos:end="113:25"><expr pos:start="113:25" pos:end="113:25"><name pos:start="113:25" pos:end="113:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:24">return <expr pos:start="115:16" pos:end="115:23"><name pos:start="115:16" pos:end="115:23">MEMTX_OK</name></expr>;</return>

    <case pos:start="117:5" pos:end="117:25">case <expr pos:start="117:10" pos:end="117:24"><literal type="number" pos:start="117:10" pos:end="117:14">0xd18</literal> <operator pos:start="117:16" pos:end="117:18">...</operator> <literal type="number" pos:start="117:20" pos:end="117:24">0xd23</literal></expr>:</case> <comment type="block" pos:start="117:27" pos:end="117:57">/* System Handler Priority.  */</comment>

        <for pos:start="119:9" pos:end="125:9">for <control pos:start="119:13" pos:end="119:34">(<init pos:start="119:14" pos:end="119:19"><expr pos:start="119:14" pos:end="119:18"><name pos:start="119:14" pos:end="119:14">i</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <literal type="number" pos:start="119:18" pos:end="119:18">0</literal></expr>;</init> <condition pos:start="119:21" pos:end="119:29"><expr pos:start="119:21" pos:end="119:28"><name pos:start="119:21" pos:end="119:21">i</name> <operator pos:start="119:23" pos:end="119:23">&lt;</operator> <name pos:start="119:25" pos:end="119:28">size</name></expr>;</condition> <incr pos:start="119:31" pos:end="119:33"><expr pos:start="119:31" pos:end="119:33"><name pos:start="119:31" pos:end="119:31">i</name><operator pos:start="119:32" pos:end="119:33">++</operator></expr></incr>)</control> <block pos:start="119:36" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:59">

            <decl_stmt pos:start="121:13" pos:end="121:51"><decl pos:start="121:13" pos:end="121:50"><type pos:start="121:13" pos:end="121:20"><name pos:start="121:13" pos:end="121:20">unsigned</name></type> <name pos:start="121:22" pos:end="121:27">hdlidx</name> <init pos:start="121:29" pos:end="121:50">= <expr pos:start="121:31" pos:end="121:50"><operator pos:start="121:31" pos:end="121:31">(</operator><name pos:start="121:32" pos:end="121:37">offset</name> <operator pos:start="121:39" pos:end="121:39">-</operator> <literal type="number" pos:start="121:41" pos:end="121:45">0xd14</literal><operator pos:start="121:46" pos:end="121:46">)</operator> <operator pos:start="121:48" pos:end="121:48">+</operator> <name pos:start="121:50" pos:end="121:50">i</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:59"><expr pos:start="123:13" pos:end="123:58"><call pos:start="123:13" pos:end="123:58"><name pos:start="123:13" pos:end="123:20">set_prio</name><argument_list pos:start="123:21" pos:end="123:58">(<argument pos:start="123:22" pos:end="123:22"><expr pos:start="123:22" pos:end="123:22"><name pos:start="123:22" pos:end="123:22">s</name></expr></argument>, <argument pos:start="123:25" pos:end="123:30"><expr pos:start="123:25" pos:end="123:30"><name pos:start="123:25" pos:end="123:30">hdlidx</name></expr></argument>, <argument pos:start="123:33" pos:end="123:57"><expr pos:start="123:33" pos:end="123:57"><operator pos:start="123:33" pos:end="123:33">(</operator><name pos:start="123:34" pos:end="123:38">value</name> <operator pos:start="123:40" pos:end="123:41">&gt;&gt;</operator> <operator pos:start="123:43" pos:end="123:43">(</operator><name pos:start="123:44" pos:end="123:44">i</name> <operator pos:start="123:46" pos:end="123:46">*</operator> <literal type="number" pos:start="123:48" pos:end="123:48">8</literal><operator pos:start="123:49" pos:end="123:49">)</operator><operator pos:start="123:50" pos:end="123:50">)</operator> <operator pos:start="123:52" pos:end="123:52">&amp;</operator> <literal type="number" pos:start="123:54" pos:end="123:57">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="127:9" pos:end="127:27"><expr pos:start="127:9" pos:end="127:26"><call pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:23">nvic_irq_update</name><argument_list pos:start="127:24" pos:end="127:26">(<argument pos:start="127:25" pos:end="127:25"><expr pos:start="127:25" pos:end="127:25"><name pos:start="127:25" pos:end="127:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:24">return <expr pos:start="129:16" pos:end="129:23"><name pos:start="129:16" pos:end="129:23">MEMTX_OK</name></expr>;</return>

    </block_content>}</block></switch>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:18">(<expr pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:12">size</name> <operator pos:start="133:14" pos:end="133:15">==</operator> <literal type="number" pos:start="133:17" pos:end="133:17">4</literal></expr>)</condition> <block pos:start="133:20" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:24">

        <expr_stmt pos:start="135:9" pos:end="135:38"><expr pos:start="135:9" pos:end="135:37"><call pos:start="135:9" pos:end="135:37"><name pos:start="135:9" pos:end="135:19">nvic_writel</name><argument_list pos:start="135:20" pos:end="135:37">(<argument pos:start="135:21" pos:end="135:21"><expr pos:start="135:21" pos:end="135:21"><name pos:start="135:21" pos:end="135:21">s</name></expr></argument>, <argument pos:start="135:24" pos:end="135:29"><expr pos:start="135:24" pos:end="135:29"><name pos:start="135:24" pos:end="135:29">offset</name></expr></argument>, <argument pos:start="135:32" pos:end="135:36"><expr pos:start="135:32" pos:end="135:36"><name pos:start="135:32" pos:end="135:36">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="137:9" pos:end="137:24">return <expr pos:start="137:16" pos:end="137:23"><name pos:start="137:16" pos:end="137:23">MEMTX_OK</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="143:79"><expr pos:start="141:5" pos:end="143:78"><call pos:start="141:5" pos:end="143:78"><name pos:start="141:5" pos:end="141:17">qemu_log_mask</name><argument_list pos:start="141:18" pos:end="143:78">(<argument pos:start="141:19" pos:end="141:33"><expr pos:start="141:19" pos:end="141:33"><name pos:start="141:19" pos:end="141:33">LOG_GUEST_ERROR</name></expr></argument>,

                  <argument pos:start="143:19" pos:end="143:63"><expr pos:start="143:19" pos:end="143:63"><literal type="string" pos:start="143:19" pos:end="143:63">"NVIC: Bad write of size %d at offset 0x%x\n"</literal></expr></argument>, <argument pos:start="143:66" pos:end="143:69"><expr pos:start="143:66" pos:end="143:69"><name pos:start="143:66" pos:end="143:69">size</name></expr></argument>, <argument pos:start="143:72" pos:end="143:77"><expr pos:start="143:72" pos:end="143:77"><name pos:start="143:72" pos:end="143:77">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="145:5" pos:end="145:48">/* This is UNPREDICTABLE; treat as RAZ/WI */</comment>

    <return pos:start="147:5" pos:end="147:20">return <expr pos:start="147:12" pos:end="147:19"><name pos:start="147:12" pos:end="147:19">MEMTX_OK</name></expr>;</return>

</block_content>}</block></function>
</unit>
