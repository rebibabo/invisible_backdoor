<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19829.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">tcg_handle_interrupt</name><parameter_list pos:start="1:33" pos:end="1:61">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:45">CPUArchState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">env</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:60"><decl pos:start="1:53" pos:end="1:60"><type pos:start="1:53" pos:end="1:60"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:60">mask</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:5">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><call pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:31">ENV_GET_CPU</name><argument_list pos:start="5:32" pos:end="5:36">(<argument pos:start="5:33" pos:end="5:35"><expr pos:start="5:33" pos:end="5:35"><name pos:start="5:33" pos:end="5:35">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">old_mask</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:38"><expr pos:start="11:5" pos:end="11:37"><name pos:start="11:5" pos:end="11:12">old_mask</name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:37"><name pos:start="11:16" pos:end="11:18">env</name><operator pos:start="11:19" pos:end="11:20">-&gt;</operator><name pos:start="11:21" pos:end="11:37">interrupt_request</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:35"><expr pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:7">env</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:26">interrupt_request</name></name> <operator pos:start="13:28" pos:end="13:29">|=</operator> <name pos:start="13:31" pos:end="13:34">mask</name></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="23:7">/*

     * If called from iothread context, wake the target cpu in

     * case its halted.

     */</comment>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:31">(<expr pos:start="25:9" pos:end="25:30"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:30"><name pos:start="25:10" pos:end="25:25">qemu_cpu_is_self</name><argument_list pos:start="25:26" pos:end="25:30">(<argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><name pos:start="25:27" pos:end="25:29">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:33" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:27"><expr pos:start="27:9" pos:end="27:26"><call pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:21">qemu_cpu_kick</name><argument_list pos:start="27:22" pos:end="27:26">(<argument pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:25">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="51:5"><if pos:start="35:5" pos:end="47:5">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:18">use_icount</name></expr>)</condition> <block pos:start="35:21" pos:end="47:5">{<block_content pos:start="37:9" pos:end="45:9">

        <expr_stmt pos:start="37:9" pos:end="37:43"><expr pos:start="37:9" pos:end="37:42"><name pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:11">env</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:24">icount_decr</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:28">u16</name><operator pos:start="37:29" pos:end="37:29">.</operator><name pos:start="37:30" pos:end="37:33">high</name></name> <operator pos:start="37:35" pos:end="37:35">=</operator> <literal type="number" pos:start="37:37" pos:end="37:42">0xffff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="41:39">(<expr pos:start="39:13" pos:end="41:38"><operator pos:start="39:13" pos:end="39:13">!</operator><call pos:start="39:14" pos:end="39:27"><name pos:start="39:14" pos:end="39:22">can_do_io</name><argument_list pos:start="39:23" pos:end="39:27">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">env</name></expr></argument>)</argument_list></call>

            <operator pos:start="41:13" pos:end="41:14">&amp;&amp;</operator> <operator pos:start="41:16" pos:end="41:16">(</operator><name pos:start="41:17" pos:end="41:20">mask</name> <operator pos:start="41:22" pos:end="41:22">&amp;</operator> <operator pos:start="41:24" pos:end="41:24">~</operator><name pos:start="41:25" pos:end="41:32">old_mask</name><operator pos:start="41:33" pos:end="41:33">)</operator> <operator pos:start="41:35" pos:end="41:36">!=</operator> <literal type="number" pos:start="41:38" pos:end="41:38">0</literal></expr>)</condition> <block pos:start="41:41" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:73">

            <expr_stmt pos:start="43:13" pos:end="43:73"><expr pos:start="43:13" pos:end="43:72"><call pos:start="43:13" pos:end="43:72"><name pos:start="43:13" pos:end="43:21">cpu_abort</name><argument_list pos:start="43:22" pos:end="43:72">(<argument pos:start="43:23" pos:end="43:25"><expr pos:start="43:23" pos:end="43:25"><name pos:start="43:23" pos:end="43:25">env</name></expr></argument>, <argument pos:start="43:28" pos:end="43:71"><expr pos:start="43:28" pos:end="43:71"><literal type="string" pos:start="43:28" pos:end="43:71">"Raised interrupt while not in I/O function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="51:5">else <block pos:start="47:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:27">

        <expr_stmt pos:start="49:9" pos:end="49:27"><expr pos:start="49:9" pos:end="49:26"><call pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:21">cpu_unlink_tb</name><argument_list pos:start="49:22" pos:end="49:26">(<argument pos:start="49:23" pos:end="49:25"><expr pos:start="49:23" pos:end="49:25"><name pos:start="49:23" pos:end="49:25">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
