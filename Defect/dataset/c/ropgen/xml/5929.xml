<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5929.c" pos:tabs="8"><function pos:start="1:1" pos:end="114:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">cook_decode_init</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="114:1">{<block_content pos:start="3:5" pos:end="113:13">
    <decl_stmt pos:start="3:5" pos:end="3:40"><decl pos:start="3:5" pos:end="3:39"><type pos:start="3:5" pos:end="3:19"><name pos:start="3:5" pos:end="3:17">COOKextradata</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:20">e</name> <init pos:start="3:22" pos:end="3:39">= <expr pos:start="3:24" pos:end="3:39"><name pos:start="3:24" pos:end="3:39"><name pos:start="3:24" pos:end="3:28">avctx</name><operator pos:start="3:29" pos:end="3:30">-&gt;</operator><name pos:start="3:31" pos:end="3:39">extradata</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:38"><decl pos:start="4:5" pos:end="4:37"><type pos:start="4:5" pos:end="4:17"><name pos:start="4:5" pos:end="4:15">COOKContext</name> <modifier pos:start="4:17" pos:end="4:17">*</modifier></type><name pos:start="4:18" pos:end="4:18">q</name> <init pos:start="4:20" pos:end="4:37">= <expr pos:start="4:22" pos:end="4:37"><name pos:start="4:22" pos:end="4:37"><name pos:start="4:22" pos:end="4:26">avctx</name><operator pos:start="4:27" pos:end="4:28">-&gt;</operator><name pos:start="4:29" pos:end="4:37">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="5:5" pos:end="5:52">/* Take care of the codec specific extradata. */</comment>
    <if_stmt pos:start="6:5" pos:end="21:5"><if pos:start="6:5" pos:end="8:5">if <condition pos:start="6:8" pos:end="6:35">(<expr pos:start="6:9" pos:end="6:34"><name pos:start="6:9" pos:end="6:29"><name pos:start="6:9" pos:end="6:13">avctx</name><operator pos:start="6:14" pos:end="6:15">-&gt;</operator><name pos:start="6:16" pos:end="6:29">extradata_size</name></name> <operator pos:start="6:31" pos:end="6:32">&lt;=</operator> <literal type="number" pos:start="6:34" pos:end="6:34">0</literal></expr>)</condition> <block pos:start="6:37" pos:end="8:5">{<block_content pos:start="7:9" pos:end="7:67">
        <expr_stmt pos:start="7:9" pos:end="7:67"><expr pos:start="7:9" pos:end="7:66"><call pos:start="7:9" pos:end="7:66"><name pos:start="7:9" pos:end="7:14">av_log</name><argument_list pos:start="7:15" pos:end="7:66">(<argument pos:start="7:16" pos:end="7:19"><expr pos:start="7:16" pos:end="7:19"><name pos:start="7:16" pos:end="7:19">NULL</name></expr></argument>,<argument pos:start="7:21" pos:end="7:32"><expr pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:32">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="7:34" pos:end="7:65"><expr pos:start="7:34" pos:end="7:65"><literal type="string" pos:start="7:34" pos:end="7:65">"Necessary extradata missing!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="8:7" pos:end="21:5">else <block pos:start="8:12" pos:end="21:5">{<block_content pos:start="11:9" pos:end="20:9">
        <comment type="block" pos:start="9:9" pos:end="10:73">/* 8 for mono, 16 for stereo, ? for multichannel
           Swap to right endianness so we don't need to care later on. */</comment>
        <expr_stmt pos:start="11:9" pos:end="11:80"><expr pos:start="11:9" pos:end="11:79"><call pos:start="11:9" pos:end="11:79"><name pos:start="11:9" pos:end="11:14">av_log</name><argument_list pos:start="11:15" pos:end="11:79">(<argument pos:start="11:16" pos:end="11:19"><expr pos:start="11:16" pos:end="11:19"><name pos:start="11:16" pos:end="11:19">NULL</name></expr></argument>,<argument pos:start="11:21" pos:end="11:32"><expr pos:start="11:21" pos:end="11:32"><name pos:start="11:21" pos:end="11:32">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="11:34" pos:end="11:56"><expr pos:start="11:34" pos:end="11:56"><literal type="string" pos:start="11:34" pos:end="11:56">"codecdata_length=%d\n"</literal></expr></argument>,<argument pos:start="11:58" pos:end="11:78"><expr pos:start="11:58" pos:end="11:78"><name pos:start="11:58" pos:end="11:78"><name pos:start="11:58" pos:end="11:62">avctx</name><operator pos:start="11:63" pos:end="11:64">-&gt;</operator><name pos:start="11:65" pos:end="11:78">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="12:9" pos:end="16:9"><if pos:start="12:9" pos:end="16:9">if <condition pos:start="12:12" pos:end="12:39">(<expr pos:start="12:13" pos:end="12:38"><name pos:start="12:13" pos:end="12:33"><name pos:start="12:13" pos:end="12:17">avctx</name><operator pos:start="12:18" pos:end="12:19">-&gt;</operator><name pos:start="12:20" pos:end="12:33">extradata_size</name></name> <operator pos:start="12:35" pos:end="12:36">&gt;=</operator> <literal type="number" pos:start="12:38" pos:end="12:38">8</literal></expr>)</condition><block pos:start="12:40" pos:end="16:9">{<block_content pos:start="13:13" pos:end="15:48">
            <expr_stmt pos:start="13:13" pos:end="13:54"><expr pos:start="13:13" pos:end="13:53"><name pos:start="13:13" pos:end="13:26"><name pos:start="13:13" pos:end="13:13">e</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:26">cookversion</name></name> <operator pos:start="13:28" pos:end="13:28">=</operator> <call pos:start="13:30" pos:end="13:53"><name pos:start="13:30" pos:end="13:37">be2me_32</name><argument_list pos:start="13:38" pos:end="13:53">(<argument pos:start="13:39" pos:end="13:52"><expr pos:start="13:39" pos:end="13:52"><name pos:start="13:39" pos:end="13:52"><name pos:start="13:39" pos:end="13:39">e</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:52">cookversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="14:13" pos:end="14:66"><expr pos:start="14:13" pos:end="14:65"><name pos:start="14:13" pos:end="14:32"><name pos:start="14:13" pos:end="14:13">e</name><operator pos:start="14:14" pos:end="14:15">-&gt;</operator><name pos:start="14:16" pos:end="14:32">samples_per_frame</name></name> <operator pos:start="14:34" pos:end="14:34">=</operator> <call pos:start="14:36" pos:end="14:65"><name pos:start="14:36" pos:end="14:43">be2me_16</name><argument_list pos:start="14:44" pos:end="14:65">(<argument pos:start="14:45" pos:end="14:64"><expr pos:start="14:45" pos:end="14:64"><name pos:start="14:45" pos:end="14:64"><name pos:start="14:45" pos:end="14:45">e</name><operator pos:start="14:46" pos:end="14:47">-&gt;</operator><name pos:start="14:48" pos:end="14:64">samples_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="15:13" pos:end="15:48"><expr pos:start="15:13" pos:end="15:47"><name pos:start="15:13" pos:end="15:23"><name pos:start="15:13" pos:end="15:13">e</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:23">subbands</name></name> <operator pos:start="15:25" pos:end="15:25">=</operator> <call pos:start="15:27" pos:end="15:47"><name pos:start="15:27" pos:end="15:34">be2me_16</name><argument_list pos:start="15:35" pos:end="15:47">(<argument pos:start="15:36" pos:end="15:46"><expr pos:start="15:36" pos:end="15:46"><name pos:start="15:36" pos:end="15:46"><name pos:start="15:36" pos:end="15:36">e</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:46">subbands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="17:9" pos:end="20:9"><if pos:start="17:9" pos:end="20:9">if <condition pos:start="17:12" pos:end="17:40">(<expr pos:start="17:13" pos:end="17:39"><name pos:start="17:13" pos:end="17:33"><name pos:start="17:13" pos:end="17:17">avctx</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:33">extradata_size</name></name> <operator pos:start="17:35" pos:end="17:36">&gt;=</operator> <literal type="number" pos:start="17:38" pos:end="17:39">16</literal></expr>)</condition><block pos:start="17:41" pos:end="20:9">{<block_content pos:start="18:13" pos:end="19:54">
            <expr_stmt pos:start="18:13" pos:end="18:64"><expr pos:start="18:13" pos:end="18:63"><name pos:start="18:13" pos:end="18:31"><name pos:start="18:13" pos:end="18:13">e</name><operator pos:start="18:14" pos:end="18:15">-&gt;</operator><name pos:start="18:16" pos:end="18:31">js_subband_start</name></name> <operator pos:start="18:33" pos:end="18:33">=</operator> <call pos:start="18:35" pos:end="18:63"><name pos:start="18:35" pos:end="18:42">be2me_16</name><argument_list pos:start="18:43" pos:end="18:63">(<argument pos:start="18:44" pos:end="18:62"><expr pos:start="18:44" pos:end="18:62"><name pos:start="18:44" pos:end="18:62"><name pos:start="18:44" pos:end="18:44">e</name><operator pos:start="18:45" pos:end="18:46">-&gt;</operator><name pos:start="18:47" pos:end="18:62">js_subband_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="19:13" pos:end="19:54"><expr pos:start="19:13" pos:end="19:53"><name pos:start="19:13" pos:end="19:26"><name pos:start="19:13" pos:end="19:13">e</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:26">js_vlc_bits</name></name> <operator pos:start="19:28" pos:end="19:28">=</operator> <call pos:start="19:30" pos:end="19:53"><name pos:start="19:30" pos:end="19:37">be2me_16</name><argument_list pos:start="19:38" pos:end="19:53">(<argument pos:start="19:39" pos:end="19:52"><expr pos:start="19:39" pos:end="19:52"><name pos:start="19:39" pos:end="19:52"><name pos:start="19:39" pos:end="19:39">e</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:52">js_vlc_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block" pos:start="22:5" pos:end="22:59">/* Take data from the AVCodecContext (RM container). */</comment>
    <expr_stmt pos:start="23:5" pos:end="23:40"><expr pos:start="23:5" pos:end="23:39"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:5">q</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:18">sample_rate</name></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <name pos:start="23:22" pos:end="23:39"><name pos:start="23:22" pos:end="23:26">avctx</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:39">sample_rate</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:37"><expr pos:start="24:5" pos:end="24:36"><name pos:start="24:5" pos:end="24:18"><name pos:start="24:5" pos:end="24:5">q</name><operator pos:start="24:6" pos:end="24:7">-&gt;</operator><name pos:start="24:8" pos:end="24:18">nb_channels</name></name> <operator pos:start="24:20" pos:end="24:20">=</operator> <name pos:start="24:22" pos:end="24:36"><name pos:start="24:22" pos:end="24:26">avctx</name><operator pos:start="24:27" pos:end="24:28">-&gt;</operator><name pos:start="24:29" pos:end="24:36">channels</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:5">q</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:15">bit_rate</name></name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:33"><name pos:start="25:19" pos:end="25:23">avctx</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:33">bit_rate</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="26:5" pos:end="26:27">/* Initialize state. */</comment>
    <expr_stmt pos:start="27:5" pos:end="27:24"><expr pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:5">q</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:19">random_state</name></name> <operator pos:start="27:21" pos:end="27:21">=</operator> <literal type="number" pos:start="27:23" pos:end="27:23">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="28:5" pos:end="28:49">/* Initialize extradata related variables. */</comment>
    <expr_stmt pos:start="29:5" pos:end="29:67"><expr pos:start="29:5" pos:end="29:66"><name pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:5">q</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:26">samples_per_channel</name></name> <operator pos:start="29:28" pos:end="29:28">=</operator> <name pos:start="29:30" pos:end="29:49"><name pos:start="29:30" pos:end="29:30">e</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:49">samples_per_frame</name></name> <operator pos:start="29:51" pos:end="29:51">/</operator> <name pos:start="29:53" pos:end="29:66"><name pos:start="29:53" pos:end="29:53">q</name><operator pos:start="29:54" pos:end="29:55">-&gt;</operator><name pos:start="29:56" pos:end="29:66">nb_channels</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:48"><expr pos:start="30:5" pos:end="30:47"><name pos:start="30:5" pos:end="30:24"><name pos:start="30:5" pos:end="30:5">q</name><operator pos:start="30:6" pos:end="30:7">-&gt;</operator><name pos:start="30:8" pos:end="30:24">samples_per_frame</name></name> <operator pos:start="30:26" pos:end="30:26">=</operator> <name pos:start="30:28" pos:end="30:47"><name pos:start="30:28" pos:end="30:28">e</name><operator pos:start="30:29" pos:end="30:30">-&gt;</operator><name pos:start="30:31" pos:end="30:47">samples_per_frame</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:5">q</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:15">subbands</name></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:29"><name pos:start="31:19" pos:end="31:19">e</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:29">subbands</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:51"><expr pos:start="32:5" pos:end="32:50"><name pos:start="32:5" pos:end="32:25"><name pos:start="32:5" pos:end="32:5">q</name><operator pos:start="32:6" pos:end="32:7">-&gt;</operator><name pos:start="32:8" pos:end="32:25">bits_per_subpacket</name></name> <operator pos:start="32:27" pos:end="32:27">=</operator> <name pos:start="32:29" pos:end="32:46"><name pos:start="32:29" pos:end="32:33">avctx</name><operator pos:start="32:34" pos:end="32:35">-&gt;</operator><name pos:start="32:36" pos:end="32:46">block_align</name></name> <operator pos:start="32:48" pos:end="32:48">*</operator> <literal type="number" pos:start="32:50" pos:end="32:50">8</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="33:5" pos:end="33:41">/* Initialize default data states. */</comment>
    <expr_stmt pos:start="34:5" pos:end="34:28"><expr pos:start="34:5" pos:end="34:27"><name pos:start="34:5" pos:end="34:23"><name pos:start="34:5" pos:end="34:5">q</name><operator pos:start="34:6" pos:end="34:7">-&gt;</operator><name pos:start="34:8" pos:end="34:23">js_subband_start</name></name> <operator pos:start="34:25" pos:end="34:25">=</operator> <literal type="number" pos:start="34:27" pos:end="34:27">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:5">q</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:26">log2_numvector_size</name></name> <operator pos:start="35:28" pos:end="35:28">=</operator> <literal type="number" pos:start="35:30" pos:end="35:30">5</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:36"><expr pos:start="36:5" pos:end="36:35"><name pos:start="36:5" pos:end="36:21"><name pos:start="36:5" pos:end="36:5">q</name><operator pos:start="36:6" pos:end="36:7">-&gt;</operator><name pos:start="36:8" pos:end="36:21">total_subbands</name></name> <operator pos:start="36:23" pos:end="36:23">=</operator> <name pos:start="36:25" pos:end="36:35"><name pos:start="36:25" pos:end="36:25">q</name><operator pos:start="36:26" pos:end="36:27">-&gt;</operator><name pos:start="36:28" pos:end="36:35">subbands</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="37:5" pos:end="37:48">/* Initialize version-dependent variables */</comment>
    <expr_stmt pos:start="38:5" pos:end="38:67"><expr pos:start="38:5" pos:end="38:66"><call pos:start="38:5" pos:end="38:66"><name pos:start="38:5" pos:end="38:10">av_log</name><argument_list pos:start="38:11" pos:end="38:66">(<argument pos:start="38:12" pos:end="38:15"><expr pos:start="38:12" pos:end="38:15"><name pos:start="38:12" pos:end="38:15">NULL</name></expr></argument>,<argument pos:start="38:17" pos:end="38:28"><expr pos:start="38:17" pos:end="38:28"><name pos:start="38:17" pos:end="38:28">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="38:30" pos:end="38:50"><expr pos:start="38:30" pos:end="38:50"><literal type="string" pos:start="38:30" pos:end="38:50">"e-&gt;cookversion=%x\n"</literal></expr></argument>,<argument pos:start="38:52" pos:end="38:65"><expr pos:start="38:52" pos:end="38:65"><name pos:start="38:52" pos:end="38:65"><name pos:start="38:52" pos:end="38:52">e</name><operator pos:start="38:53" pos:end="38:54">-&gt;</operator><name pos:start="38:55" pos:end="38:65">cookversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="39:5" pos:end="77:5">switch <condition pos:start="39:12" pos:end="39:27">(<expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:13">e</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:26">cookversion</name></name></expr>)</condition> <block pos:start="39:29" pos:end="77:5">{<block_content pos:start="40:9" pos:end="76:18">
        <case pos:start="40:9" pos:end="40:24">case <expr pos:start="40:14" pos:end="40:23"><name pos:start="40:14" pos:end="40:23">MONO_COOK1</name></expr>:</case>
            <if_stmt pos:start="41:13" pos:end="43:13"><if pos:start="41:13" pos:end="43:13">if <condition pos:start="41:16" pos:end="41:36">(<expr pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:17">q</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:30">nb_channels</name></name> <operator pos:start="41:32" pos:end="41:33">!=</operator> <literal type="number" pos:start="41:35" pos:end="41:35">1</literal></expr>)</condition> <block pos:start="41:38" pos:end="43:13">{<block_content pos:start="42:17" pos:end="42:86">
                <expr_stmt pos:start="42:17" pos:end="42:86"><expr pos:start="42:17" pos:end="42:85"><call pos:start="42:17" pos:end="42:85"><name pos:start="42:17" pos:end="42:22">av_log</name><argument_list pos:start="42:23" pos:end="42:85">(<argument pos:start="42:24" pos:end="42:27"><expr pos:start="42:24" pos:end="42:27"><name pos:start="42:24" pos:end="42:27">NULL</name></expr></argument>,<argument pos:start="42:29" pos:end="42:40"><expr pos:start="42:29" pos:end="42:40"><name pos:start="42:29" pos:end="42:40">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="42:42" pos:end="42:84"><expr pos:start="42:42" pos:end="42:84"><literal type="string" pos:start="42:42" pos:end="42:84">"Container channels != 1, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="44:13" pos:end="44:53"><expr pos:start="44:13" pos:end="44:52"><call pos:start="44:13" pos:end="44:52"><name pos:start="44:13" pos:end="44:18">av_log</name><argument_list pos:start="44:19" pos:end="44:52">(<argument pos:start="44:20" pos:end="44:23"><expr pos:start="44:20" pos:end="44:23"><name pos:start="44:20" pos:end="44:23">NULL</name></expr></argument>,<argument pos:start="44:25" pos:end="44:36"><expr pos:start="44:25" pos:end="44:36"><name pos:start="44:25" pos:end="44:36">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="44:38" pos:end="44:51"><expr pos:start="44:38" pos:end="44:51"><literal type="string" pos:start="44:38" pos:end="44:51">"MONO_COOK1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="45:13" pos:end="45:18">break;</break>
        <case pos:start="46:9" pos:end="46:24">case <expr pos:start="46:14" pos:end="46:23"><name pos:start="46:14" pos:end="46:23">MONO_COOK2</name></expr>:</case>
            <if_stmt pos:start="47:13" pos:end="50:13"><if pos:start="47:13" pos:end="50:13">if <condition pos:start="47:16" pos:end="47:36">(<expr pos:start="47:17" pos:end="47:35"><name pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:17">q</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:30">nb_channels</name></name> <operator pos:start="47:32" pos:end="47:33">!=</operator> <literal type="number" pos:start="47:35" pos:end="47:35">1</literal></expr>)</condition> <block pos:start="47:38" pos:end="50:13">{<block_content pos:start="48:17" pos:end="49:64">
                <expr_stmt pos:start="48:17" pos:end="48:36"><expr pos:start="48:17" pos:end="48:35"><name pos:start="48:17" pos:end="48:31"><name pos:start="48:17" pos:end="48:17">q</name><operator pos:start="48:18" pos:end="48:19">-&gt;</operator><name pos:start="48:20" pos:end="48:31">joint_stereo</name></name> <operator pos:start="48:33" pos:end="48:33">=</operator> <literal type="number" pos:start="48:35" pos:end="48:35">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="49:17" pos:end="49:64"><expr pos:start="49:17" pos:end="49:63"><name pos:start="49:17" pos:end="49:37"><name pos:start="49:17" pos:end="49:17">q</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:37">bits_per_subpacket</name></name> <operator pos:start="49:39" pos:end="49:39">=</operator> <name pos:start="49:41" pos:end="49:61"><name pos:start="49:41" pos:end="49:41">q</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:61">bits_per_subpacket</name></name><operator pos:start="49:62" pos:end="49:62">/</operator><literal type="number" pos:start="49:63" pos:end="49:63">2</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="51:13" pos:end="51:53"><expr pos:start="51:13" pos:end="51:52"><call pos:start="51:13" pos:end="51:52"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="51:52">(<argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">NULL</name></expr></argument>,<argument pos:start="51:25" pos:end="51:36"><expr pos:start="51:25" pos:end="51:36"><name pos:start="51:25" pos:end="51:36">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="51:38" pos:end="51:51"><expr pos:start="51:38" pos:end="51:51"><literal type="string" pos:start="51:38" pos:end="51:51">"MONO_COOK2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="52:13" pos:end="52:18">break;</break>
        <case pos:start="53:9" pos:end="53:26">case <expr pos:start="53:14" pos:end="53:25"><name pos:start="53:14" pos:end="53:25">JOINT_STEREO</name></expr>:</case>
            <if_stmt pos:start="54:13" pos:end="56:13"><if pos:start="54:13" pos:end="56:13">if <condition pos:start="54:16" pos:end="54:36">(<expr pos:start="54:17" pos:end="54:35"><name pos:start="54:17" pos:end="54:30"><name pos:start="54:17" pos:end="54:17">q</name><operator pos:start="54:18" pos:end="54:19">-&gt;</operator><name pos:start="54:20" pos:end="54:30">nb_channels</name></name> <operator pos:start="54:32" pos:end="54:33">!=</operator> <literal type="number" pos:start="54:35" pos:end="54:35">2</literal></expr>)</condition> <block pos:start="54:38" pos:end="56:13">{<block_content pos:start="55:17" pos:end="55:86">
                <expr_stmt pos:start="55:17" pos:end="55:86"><expr pos:start="55:17" pos:end="55:85"><call pos:start="55:17" pos:end="55:85"><name pos:start="55:17" pos:end="55:22">av_log</name><argument_list pos:start="55:23" pos:end="55:85">(<argument pos:start="55:24" pos:end="55:27"><expr pos:start="55:24" pos:end="55:27"><name pos:start="55:24" pos:end="55:27">NULL</name></expr></argument>,<argument pos:start="55:29" pos:end="55:40"><expr pos:start="55:29" pos:end="55:40"><name pos:start="55:29" pos:end="55:40">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="55:42" pos:end="55:84"><expr pos:start="55:42" pos:end="55:84"><literal type="string" pos:start="55:42" pos:end="55:84">"Container channels != 2, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="57:13" pos:end="57:55"><expr pos:start="57:13" pos:end="57:54"><call pos:start="57:13" pos:end="57:54"><name pos:start="57:13" pos:end="57:18">av_log</name><argument_list pos:start="57:19" pos:end="57:54">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">NULL</name></expr></argument>,<argument pos:start="57:25" pos:end="57:36"><expr pos:start="57:25" pos:end="57:36"><name pos:start="57:25" pos:end="57:36">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="57:38" pos:end="57:53"><expr pos:start="57:38" pos:end="57:53"><literal type="string" pos:start="57:38" pos:end="57:53">"JOINT_STEREO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="58:13" pos:end="63:13"><if pos:start="58:13" pos:end="63:13">if <condition pos:start="58:16" pos:end="58:44">(<expr pos:start="58:17" pos:end="58:43"><name pos:start="58:17" pos:end="58:37"><name pos:start="58:17" pos:end="58:21">avctx</name><operator pos:start="58:22" pos:end="58:23">-&gt;</operator><name pos:start="58:24" pos:end="58:37">extradata_size</name></name> <operator pos:start="58:39" pos:end="58:40">&gt;=</operator> <literal type="number" pos:start="58:42" pos:end="58:43">16</literal></expr>)</condition><block pos:start="58:45" pos:end="63:13">{<block_content pos:start="59:17" pos:end="62:48">
                <expr_stmt pos:start="59:17" pos:end="59:70"><expr pos:start="59:17" pos:end="59:69"><name pos:start="59:17" pos:end="59:33"><name pos:start="59:17" pos:end="59:17">q</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:33">total_subbands</name></name> <operator pos:start="59:35" pos:end="59:35">=</operator> <name pos:start="59:37" pos:end="59:47"><name pos:start="59:37" pos:end="59:37">q</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:47">subbands</name></name> <operator pos:start="59:49" pos:end="59:49">+</operator> <name pos:start="59:51" pos:end="59:69"><name pos:start="59:51" pos:end="59:51">e</name><operator pos:start="59:52" pos:end="59:53">-&gt;</operator><name pos:start="59:54" pos:end="59:69">js_subband_start</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="60:17" pos:end="60:58"><expr pos:start="60:17" pos:end="60:57"><name pos:start="60:17" pos:end="60:35"><name pos:start="60:17" pos:end="60:17">q</name><operator pos:start="60:18" pos:end="60:19">-&gt;</operator><name pos:start="60:20" pos:end="60:35">js_subband_start</name></name> <operator pos:start="60:37" pos:end="60:37">=</operator> <name pos:start="60:39" pos:end="60:57"><name pos:start="60:39" pos:end="60:39">e</name><operator pos:start="60:40" pos:end="60:41">-&gt;</operator><name pos:start="60:42" pos:end="60:57">js_subband_start</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="61:17" pos:end="61:36"><expr pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:31"><name pos:start="61:17" pos:end="61:17">q</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:31">joint_stereo</name></name> <operator pos:start="61:33" pos:end="61:33">=</operator> <literal type="number" pos:start="61:35" pos:end="61:35">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="62:17" pos:end="62:48"><expr pos:start="62:17" pos:end="62:47"><name pos:start="62:17" pos:end="62:30"><name pos:start="62:17" pos:end="62:17">q</name><operator pos:start="62:18" pos:end="62:19">-&gt;</operator><name pos:start="62:20" pos:end="62:30">js_vlc_bits</name></name> <operator pos:start="62:32" pos:end="62:32">=</operator> <name pos:start="62:34" pos:end="62:47"><name pos:start="62:34" pos:end="62:34">e</name><operator pos:start="62:35" pos:end="62:36">-&gt;</operator><name pos:start="62:37" pos:end="62:47">js_vlc_bits</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="64:13" pos:end="66:13"><if pos:start="64:13" pos:end="66:13">if <condition pos:start="64:16" pos:end="64:45">(<expr pos:start="64:17" pos:end="64:44"><name pos:start="64:17" pos:end="64:38"><name pos:start="64:17" pos:end="64:17">q</name><operator pos:start="64:18" pos:end="64:19">-&gt;</operator><name pos:start="64:20" pos:end="64:38">samples_per_channel</name></name> <operator pos:start="64:40" pos:end="64:40">&gt;</operator> <literal type="number" pos:start="64:42" pos:end="64:44">256</literal></expr>)</condition> <block pos:start="64:47" pos:end="66:13">{<block_content pos:start="65:17" pos:end="65:44">
                <expr_stmt pos:start="65:17" pos:end="65:44"><expr pos:start="65:17" pos:end="65:43"><name pos:start="65:17" pos:end="65:38"><name pos:start="65:17" pos:end="65:17">q</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:38">log2_numvector_size</name></name>  <operator pos:start="65:41" pos:end="65:41">=</operator> <literal type="number" pos:start="65:43" pos:end="65:43">6</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="67:13" pos:end="69:13"><if pos:start="67:13" pos:end="69:13">if <condition pos:start="67:16" pos:end="67:45">(<expr pos:start="67:17" pos:end="67:44"><name pos:start="67:17" pos:end="67:38"><name pos:start="67:17" pos:end="67:17">q</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:38">samples_per_channel</name></name> <operator pos:start="67:40" pos:end="67:40">&gt;</operator> <literal type="number" pos:start="67:42" pos:end="67:44">512</literal></expr>)</condition> <block pos:start="67:47" pos:end="69:13">{<block_content pos:start="68:17" pos:end="68:44">
                <expr_stmt pos:start="68:17" pos:end="68:44"><expr pos:start="68:17" pos:end="68:43"><name pos:start="68:17" pos:end="68:38"><name pos:start="68:17" pos:end="68:17">q</name><operator pos:start="68:18" pos:end="68:19">-&gt;</operator><name pos:start="68:20" pos:end="68:38">log2_numvector_size</name></name>  <operator pos:start="68:41" pos:end="68:41">=</operator> <literal type="number" pos:start="68:43" pos:end="68:43">7</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break pos:start="70:13" pos:end="70:18">break;</break>
        <case pos:start="71:9" pos:end="71:21">case <expr pos:start="71:14" pos:end="71:20"><name pos:start="71:14" pos:end="71:20">MC_COOK</name></expr>:</case>
            <expr_stmt pos:start="72:13" pos:end="72:65"><expr pos:start="72:13" pos:end="72:64"><call pos:start="72:13" pos:end="72:64"><name pos:start="72:13" pos:end="72:18">av_log</name><argument_list pos:start="72:19" pos:end="72:64">(<argument pos:start="72:20" pos:end="72:23"><expr pos:start="72:20" pos:end="72:23"><name pos:start="72:20" pos:end="72:23">NULL</name></expr></argument>,<argument pos:start="72:25" pos:end="72:36"><expr pos:start="72:25" pos:end="72:36"><name pos:start="72:25" pos:end="72:36">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="72:38" pos:end="72:63"><expr pos:start="72:38" pos:end="72:63"><literal type="string" pos:start="72:38" pos:end="72:63">"MC_COOK not supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="73:13" pos:end="73:18">break;</break>
        <default pos:start="74:9" pos:end="74:16">default:</default>
            <expr_stmt pos:start="75:13" pos:end="75:79"><expr pos:start="75:13" pos:end="75:78"><call pos:start="75:13" pos:end="75:78"><name pos:start="75:13" pos:end="75:18">av_log</name><argument_list pos:start="75:19" pos:end="75:78">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">NULL</name></expr></argument>,<argument pos:start="75:25" pos:end="75:36"><expr pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:36">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="75:38" pos:end="75:77"><expr pos:start="75:38" pos:end="75:77"><literal type="string" pos:start="75:38" pos:end="75:77">"Unknown Cook version, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="76:13" pos:end="76:18">break;</break>
    </block_content>}</block></switch>
    <comment type="block" pos:start="78:5" pos:end="78:39">/* Initialize variable relations */</comment>
    <expr_stmt pos:start="79:5" pos:end="79:41"><expr pos:start="79:5" pos:end="79:40"><name pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:5">q</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:15">mlt_size</name></name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:40"><name pos:start="79:19" pos:end="79:19">q</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:40">samples_per_channel</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="80:5" pos:end="80:54"><expr pos:start="80:5" pos:end="80:53"><name pos:start="80:5" pos:end="80:21"><name pos:start="80:5" pos:end="80:5">q</name><operator pos:start="80:6" pos:end="80:7">-&gt;</operator><name pos:start="80:8" pos:end="80:21">numvector_size</name></name> <operator pos:start="80:23" pos:end="80:23">=</operator> <operator pos:start="80:25" pos:end="80:25">(</operator><literal type="number" pos:start="80:26" pos:end="80:26">1</literal> <operator pos:start="80:28" pos:end="80:29">&lt;&lt;</operator> <name pos:start="80:31" pos:end="80:52"><name pos:start="80:31" pos:end="80:31">q</name><operator pos:start="80:32" pos:end="80:33">-&gt;</operator><name pos:start="80:34" pos:end="80:52">log2_numvector_size</name></name><operator pos:start="80:53" pos:end="80:53">)</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="81:5" pos:end="81:25">/* Generate tables */</comment>
    <expr_stmt pos:start="82:5" pos:end="82:26"><expr pos:start="82:5" pos:end="82:25"><call pos:start="82:5" pos:end="82:25"><name pos:start="82:5" pos:end="82:22">init_rootpow2table</name><argument_list pos:start="82:23" pos:end="82:25">(<argument pos:start="82:24" pos:end="82:24"><expr pos:start="82:24" pos:end="82:24"><name pos:start="82:24" pos:end="82:24">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="83:5" pos:end="83:22"><expr pos:start="83:5" pos:end="83:21"><call pos:start="83:5" pos:end="83:21"><name pos:start="83:5" pos:end="83:18">init_pow2table</name><argument_list pos:start="83:19" pos:end="83:21">(<argument pos:start="83:20" pos:end="83:20"><expr pos:start="83:20" pos:end="83:20"><name pos:start="83:20" pos:end="83:20">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="84:5" pos:end="84:23"><expr pos:start="84:5" pos:end="84:22"><call pos:start="84:5" pos:end="84:22"><name pos:start="84:5" pos:end="84:19">init_gain_table</name><argument_list pos:start="84:20" pos:end="84:22">(<argument pos:start="84:21" pos:end="84:21"><expr pos:start="84:21" pos:end="84:21"><name pos:start="84:21" pos:end="84:21">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="85:5" pos:end="89:46"><if pos:start="85:5" pos:end="89:46">if <condition pos:start="85:8" pos:end="85:37">(<expr pos:start="85:9" pos:end="85:36"><call pos:start="85:9" pos:end="85:31"><name pos:start="85:9" pos:end="85:28">init_cook_vlc_tables</name><argument_list pos:start="85:29" pos:end="85:31">(<argument pos:start="85:30" pos:end="85:30"><expr pos:start="85:30" pos:end="85:30"><name pos:start="85:30" pos:end="85:30">q</name></expr></argument>)</argument_list></call> <operator pos:start="85:33" pos:end="85:34">!=</operator> <literal type="number" pos:start="85:36" pos:end="85:36">0</literal></expr>)</condition><block type="pseudo" pos:start="88:5" pos:end="89:46"><block_content pos:start="88:5" pos:end="89:46">
    <comment type="block" pos:start="86:5" pos:end="87:42">/* Pad the databuffer with FF_INPUT_BUFFER_PADDING_SIZE,
       this is for the bitstreamreader. */</comment>
    <if_stmt pos:start="88:5" pos:end="89:46"><if pos:start="88:5" pos:end="89:46">if <condition pos:start="88:8" pos:end="88:150">(<expr pos:start="88:9" pos:end="88:149"><operator pos:start="88:9" pos:end="88:9">(</operator><name pos:start="88:10" pos:end="88:32"><name pos:start="88:10" pos:end="88:10">q</name><operator pos:start="88:11" pos:end="88:12">-&gt;</operator><name pos:start="88:13" pos:end="88:32">decoded_bytes_buffer</name></name> <operator pos:start="88:34" pos:end="88:34">=</operator> <call pos:start="88:36" pos:end="88:139"><name pos:start="88:36" pos:end="88:45">av_mallocz</name><argument_list pos:start="88:46" pos:end="88:139">(<argument pos:start="88:47" pos:end="88:138"><expr pos:start="88:47" pos:end="88:138"><operator pos:start="88:47" pos:end="88:47">(</operator><name pos:start="88:48" pos:end="88:65"><name pos:start="88:48" pos:end="88:52">avctx</name><operator pos:start="88:53" pos:end="88:54">-&gt;</operator><name pos:start="88:55" pos:end="88:65">block_align</name></name><operator pos:start="88:66" pos:end="88:66">+</operator><operator pos:start="88:67" pos:end="88:67">(</operator><literal type="number" pos:start="88:68" pos:end="88:69">4</literal><operator pos:start="88:69" pos:end="88:69">-</operator><name pos:start="88:70" pos:end="88:87"><name pos:start="88:70" pos:end="88:74">avctx</name><operator pos:start="88:75" pos:end="88:76">-&gt;</operator><name pos:start="88:77" pos:end="88:87">block_align</name></name><operator pos:start="88:88" pos:end="88:88">%</operator><literal type="number" pos:start="88:89" pos:end="88:89">4</literal><operator pos:start="88:90" pos:end="88:90">)</operator> <operator pos:start="88:92" pos:end="88:92">+</operator> <name pos:start="88:94" pos:end="88:121">FF_INPUT_BUFFER_PADDING_SIZE</name><operator pos:start="88:122" pos:end="88:122">)</operator><operator pos:start="88:123" pos:end="88:123">*</operator><sizeof pos:start="88:124" pos:end="88:138">sizeof<argument_list pos:start="88:130" pos:end="88:138">(<argument pos:start="88:131" pos:end="88:137"><expr pos:start="88:131" pos:end="88:137"><name pos:start="88:131" pos:end="88:137">uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="88:140" pos:end="88:140">)</operator>  <operator pos:start="88:143" pos:end="88:144">==</operator> <name pos:start="88:146" pos:end="88:149">NULL</name></expr>)</condition><block type="pseudo" pos:start="89:5" pos:end="89:46"><block_content pos:start="89:5" pos:end="89:46">
    <expr_stmt pos:start="89:5" pos:end="89:46"><expr pos:start="89:5" pos:end="89:45"><name pos:start="89:5" pos:end="89:24"><name pos:start="89:5" pos:end="89:5">q</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:21">decode_buf_ptr</name><index pos:start="89:22" pos:end="89:24">[<expr pos:start="89:23" pos:end="89:23"><literal type="number" pos:start="89:23" pos:end="89:23">0</literal></expr>]</index></name> <operator pos:start="89:26" pos:end="89:26">=</operator> <name pos:start="89:28" pos:end="89:45"><name pos:start="89:28" pos:end="89:28">q</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:45">decode_buffer_1</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="90:5" pos:end="90:46"><expr pos:start="90:5" pos:end="90:45"><name pos:start="90:5" pos:end="90:24"><name pos:start="90:5" pos:end="90:5">q</name><operator pos:start="90:6" pos:end="90:7">-&gt;</operator><name pos:start="90:8" pos:end="90:21">decode_buf_ptr</name><index pos:start="90:22" pos:end="90:24">[<expr pos:start="90:23" pos:end="90:23"><literal type="number" pos:start="90:23" pos:end="90:23">1</literal></expr>]</index></name> <operator pos:start="90:26" pos:end="90:26">=</operator> <name pos:start="90:28" pos:end="90:45"><name pos:start="90:28" pos:end="90:28">q</name><operator pos:start="90:29" pos:end="90:30">-&gt;</operator><name pos:start="90:31" pos:end="90:45">decode_buffer_2</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:46"><expr pos:start="91:5" pos:end="91:45"><name pos:start="91:5" pos:end="91:24"><name pos:start="91:5" pos:end="91:5">q</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:21">decode_buf_ptr</name><index pos:start="91:22" pos:end="91:24">[<expr pos:start="91:23" pos:end="91:23"><literal type="number" pos:start="91:23" pos:end="91:23">2</literal></expr>]</index></name> <operator pos:start="91:26" pos:end="91:26">=</operator> <name pos:start="91:28" pos:end="91:45"><name pos:start="91:28" pos:end="91:28">q</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:45">decode_buffer_3</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:46"><expr pos:start="92:5" pos:end="92:45"><name pos:start="92:5" pos:end="92:24"><name pos:start="92:5" pos:end="92:5">q</name><operator pos:start="92:6" pos:end="92:7">-&gt;</operator><name pos:start="92:8" pos:end="92:21">decode_buf_ptr</name><index pos:start="92:22" pos:end="92:24">[<expr pos:start="92:23" pos:end="92:23"><literal type="number" pos:start="92:23" pos:end="92:23">3</literal></expr>]</index></name> <operator pos:start="92:26" pos:end="92:26">=</operator> <name pos:start="92:28" pos:end="92:45"><name pos:start="92:28" pos:end="92:28">q</name><operator pos:start="92:29" pos:end="92:30">-&gt;</operator><name pos:start="92:31" pos:end="92:45">decode_buffer_4</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:47"><expr pos:start="93:5" pos:end="93:46"><name pos:start="93:5" pos:end="93:25"><name pos:start="93:5" pos:end="93:5">q</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:22">decode_buf_ptr2</name><index pos:start="93:23" pos:end="93:25">[<expr pos:start="93:24" pos:end="93:24"><literal type="number" pos:start="93:24" pos:end="93:24">0</literal></expr>]</index></name> <operator pos:start="93:27" pos:end="93:27">=</operator> <name pos:start="93:29" pos:end="93:46"><name pos:start="93:29" pos:end="93:29">q</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:46">decode_buffer_3</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="94:5" pos:end="94:47"><expr pos:start="94:5" pos:end="94:46"><name pos:start="94:5" pos:end="94:25"><name pos:start="94:5" pos:end="94:5">q</name><operator pos:start="94:6" pos:end="94:7">-&gt;</operator><name pos:start="94:8" pos:end="94:22">decode_buf_ptr2</name><index pos:start="94:23" pos:end="94:25">[<expr pos:start="94:24" pos:end="94:24"><literal type="number" pos:start="94:24" pos:end="94:24">1</literal></expr>]</index></name> <operator pos:start="94:27" pos:end="94:27">=</operator> <name pos:start="94:29" pos:end="94:46"><name pos:start="94:29" pos:end="94:29">q</name><operator pos:start="94:30" pos:end="94:31">-&gt;</operator><name pos:start="94:32" pos:end="94:46">decode_buffer_4</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:57"><expr pos:start="95:5" pos:end="95:56"><name pos:start="95:5" pos:end="95:29"><name pos:start="95:5" pos:end="95:5">q</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:26">previous_buffer_ptr</name><index pos:start="95:27" pos:end="95:29">[<expr pos:start="95:28" pos:end="95:28"><literal type="number" pos:start="95:28" pos:end="95:28">0</literal></expr>]</index></name> <operator pos:start="95:31" pos:end="95:31">=</operator> <name pos:start="95:33" pos:end="95:56"><name pos:start="95:33" pos:end="95:33">q</name><operator pos:start="95:34" pos:end="95:35">-&gt;</operator><name pos:start="95:36" pos:end="95:56">mono_previous_buffer1</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="96:5" pos:end="96:57"><expr pos:start="96:5" pos:end="96:56"><name pos:start="96:5" pos:end="96:29"><name pos:start="96:5" pos:end="96:5">q</name><operator pos:start="96:6" pos:end="96:7">-&gt;</operator><name pos:start="96:8" pos:end="96:26">previous_buffer_ptr</name><index pos:start="96:27" pos:end="96:29">[<expr pos:start="96:28" pos:end="96:28"><literal type="number" pos:start="96:28" pos:end="96:28">1</literal></expr>]</index></name> <operator pos:start="96:31" pos:end="96:31">=</operator> <name pos:start="96:33" pos:end="96:56"><name pos:start="96:33" pos:end="96:33">q</name><operator pos:start="96:34" pos:end="96:35">-&gt;</operator><name pos:start="96:36" pos:end="96:56">mono_previous_buffer2</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="97:5" pos:end="97:31">/* Initialize transform. */</comment>
    <if_stmt pos:start="98:5" pos:end="102:5"><if pos:start="98:5" pos:end="102:5">if <condition pos:start="98:8" pos:end="98:32">( <expr pos:start="98:10" pos:end="98:30"><call pos:start="98:10" pos:end="98:25"><name pos:start="98:10" pos:end="98:22">init_cook_mlt</name><argument_list pos:start="98:23" pos:end="98:25">(<argument pos:start="98:24" pos:end="98:24"><expr pos:start="98:24" pos:end="98:24"><name pos:start="98:24" pos:end="98:24">q</name></expr></argument>)</argument_list></call> <operator pos:start="98:27" pos:end="98:28">==</operator> <literal type="number" pos:start="98:30" pos:end="98:30">0</literal></expr> )</condition><block type="pseudo" pos:start="100:5" pos:end="102:5"><block_content pos:start="100:5" pos:end="102:5">
    <comment type="block" pos:start="99:5" pos:end="99:87">/* Try to catch some obviously faulty streams, othervise it might be exploitable */</comment>
    <if_stmt pos:start="100:5" pos:end="102:5"><if pos:start="100:5" pos:end="102:5">if <condition pos:start="100:8" pos:end="100:31">(<expr pos:start="100:9" pos:end="100:30"><name pos:start="100:9" pos:end="100:25"><name pos:start="100:9" pos:end="100:9">q</name><operator pos:start="100:10" pos:end="100:11">-&gt;</operator><name pos:start="100:12" pos:end="100:25">total_subbands</name></name> <operator pos:start="100:27" pos:end="100:27">&gt;</operator> <literal type="number" pos:start="100:29" pos:end="100:30">53</literal></expr>)</condition> <block pos:start="100:33" pos:end="102:5">{<block_content pos:start="101:9" pos:end="101:74">
        <expr_stmt pos:start="101:9" pos:end="101:74"><expr pos:start="101:9" pos:end="101:73"><call pos:start="101:9" pos:end="101:73"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="101:73">(<argument pos:start="101:16" pos:end="101:19"><expr pos:start="101:16" pos:end="101:19"><name pos:start="101:16" pos:end="101:19">NULL</name></expr></argument>,<argument pos:start="101:21" pos:end="101:32"><expr pos:start="101:21" pos:end="101:32"><name pos:start="101:21" pos:end="101:32">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="101:34" pos:end="101:72"><expr pos:start="101:34" pos:end="101:72"><literal type="string" pos:start="101:34" pos:end="101:72">"total_subbands &gt; 53, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="103:5" pos:end="105:5"><if pos:start="103:5" pos:end="105:5">if <condition pos:start="103:8" pos:end="103:25">(<expr pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:9">q</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:19">subbands</name></name> <operator pos:start="103:21" pos:end="103:21">&gt;</operator> <literal type="number" pos:start="103:23" pos:end="103:24">50</literal></expr>)</condition> <block pos:start="103:27" pos:end="105:5">{<block_content pos:start="104:9" pos:end="104:68">
        <expr_stmt pos:start="104:9" pos:end="104:68"><expr pos:start="104:9" pos:end="104:67"><call pos:start="104:9" pos:end="104:67"><name pos:start="104:9" pos:end="104:14">av_log</name><argument_list pos:start="104:15" pos:end="104:67">(<argument pos:start="104:16" pos:end="104:19"><expr pos:start="104:16" pos:end="104:19"><name pos:start="104:16" pos:end="104:19">NULL</name></expr></argument>,<argument pos:start="104:21" pos:end="104:32"><expr pos:start="104:21" pos:end="104:32"><name pos:start="104:21" pos:end="104:32">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="104:34" pos:end="104:66"><expr pos:start="104:34" pos:end="104:66"><literal type="string" pos:start="104:34" pos:end="104:66">"subbands &gt; 50, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="106:5" pos:end="111:0"><if pos:start="106:5" pos:end="107:5">if <condition pos:start="106:8" pos:end="106:111">(<expr pos:start="106:9" pos:end="106:110"><operator pos:start="106:9" pos:end="106:9">(</operator><name pos:start="106:10" pos:end="106:31"><name pos:start="106:10" pos:end="106:10">q</name><operator pos:start="106:11" pos:end="106:12">-&gt;</operator><name pos:start="106:13" pos:end="106:31">samples_per_channel</name></name> <operator pos:start="106:33" pos:end="106:34">==</operator> <literal type="number" pos:start="106:36" pos:end="106:38">256</literal><operator pos:start="106:39" pos:end="106:39">)</operator> <operator pos:start="106:41" pos:end="106:42">||</operator> <operator pos:start="106:44" pos:end="106:44">(</operator><name pos:start="106:45" pos:end="106:66"><name pos:start="106:45" pos:end="106:45">q</name><operator pos:start="106:46" pos:end="106:47">-&gt;</operator><name pos:start="106:48" pos:end="106:66">samples_per_channel</name></name> <operator pos:start="106:68" pos:end="106:69">==</operator> <literal type="number" pos:start="106:71" pos:end="106:73">512</literal><operator pos:start="106:74" pos:end="106:74">)</operator> <operator pos:start="106:76" pos:end="106:77">||</operator> <operator pos:start="106:79" pos:end="106:79">(</operator><name pos:start="106:80" pos:end="106:101"><name pos:start="106:80" pos:end="106:80">q</name><operator pos:start="106:81" pos:end="106:82">-&gt;</operator><name pos:start="106:83" pos:end="106:101">samples_per_channel</name></name> <operator pos:start="106:103" pos:end="106:104">==</operator> <literal type="number" pos:start="106:106" pos:end="106:109">1024</literal><operator pos:start="106:110" pos:end="106:110">)</operator></expr>)</condition> <block pos:start="106:113" pos:end="107:5">{<block_content>
    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:0">else <block pos:start="107:12" pos:end="111:0">{<block_content pos:start="108:9" pos:end="108:120">
        <expr_stmt pos:start="108:9" pos:end="108:120"><expr pos:start="108:9" pos:end="108:119"><call pos:start="108:9" pos:end="108:119"><name pos:start="108:9" pos:end="108:14">av_log</name><argument_list pos:start="108:15" pos:end="108:119">(<argument pos:start="108:16" pos:end="108:19"><expr pos:start="108:16" pos:end="108:19"><name pos:start="108:16" pos:end="108:19">NULL</name></expr></argument>,<argument pos:start="108:21" pos:end="108:32"><expr pos:start="108:21" pos:end="108:32"><name pos:start="108:21" pos:end="108:32">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="108:34" pos:end="108:95"><expr pos:start="108:34" pos:end="108:95"><literal type="string" pos:start="108:34" pos:end="108:95">"unknown amount of samples_per_channel = %d, report sample!\n"</literal></expr></argument>,<argument pos:start="108:97" pos:end="108:118"><expr pos:start="108:97" pos:end="108:118"><name pos:start="108:97" pos:end="108:118"><name pos:start="108:97" pos:end="108:97">q</name><operator pos:start="108:98" pos:end="108:99">-&gt;</operator><name pos:start="108:100" pos:end="108:118">samples_per_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:ifdef pos:start="110:1" pos:end="110:16">#<cpp:directive pos:start="110:2" pos:end="110:6">ifdef</cpp:directive> <name pos:start="110:8" pos:end="110:16">COOKDEBUG</name></cpp:ifdef>
    <expr_stmt pos:start="111:5" pos:end="113:0"><expr pos:start="111:5" pos:end="111:26"><call pos:start="111:5" pos:end="111:26"><name pos:start="111:5" pos:end="111:21">dump_cook_context</name><argument_list pos:start="111:22" pos:end="111:26">(<argument pos:start="111:23" pos:end="111:23"><expr pos:start="111:23" pos:end="111:23"><name pos:start="111:23" pos:end="111:23">q</name></expr></argument>,<argument pos:start="111:25" pos:end="111:25"><expr pos:start="111:25" pos:end="111:25"><name pos:start="111:25" pos:end="111:25">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="112:1" pos:end="112:6">#<cpp:directive pos:start="112:2" pos:end="112:6">endif</cpp:directive></cpp:endif>
    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>
</block_content>}</block></function></unit>
