<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24475.c" pos:tabs="8"><function pos:start="1:1" pos:end="98:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="3:60">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">data</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:42"><decl pos:start="3:25" pos:end="3:42"><type pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:27">int</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:42">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="98:1">{<block_content pos:start="7:5" pos:end="96:20">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BinkAudioContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:23">s</name> <init pos:start="7:25" pos:end="7:42">= <expr pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:31">avctx</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:18">frame</name>      <init pos:start="9:25" pos:end="9:30">= <expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">GetBitContext</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:21">gb</name> <init pos:start="11:23" pos:end="11:30">= <expr pos:start="11:25" pos:end="11:30"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:30"><name pos:start="11:26" pos:end="11:26">s</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:21">consumed</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="62:5"><if pos:start="17:5" pos:end="62:5">if <condition pos:start="17:8" pos:end="17:27">(<expr pos:start="17:9" pos:end="17:26"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:26"><name pos:start="17:10" pos:end="17:22">get_bits_left</name><argument_list pos:start="17:23" pos:end="17:26">(<argument pos:start="17:24" pos:end="17:25"><expr pos:start="17:24" pos:end="17:25"><name pos:start="17:24" pos:end="17:25">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:29" pos:end="62:5">{<block_content pos:start="19:9" pos:end="60:31">

        <decl_stmt pos:start="19:9" pos:end="19:21"><decl pos:start="19:9" pos:end="19:20"><type pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:15">uint8_t</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">buf</name></decl>;</decl_stmt>

        <comment type="block" pos:start="21:9" pos:end="21:34">/* handle end-of-stream */</comment>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:25">(<expr pos:start="23:13" pos:end="23:24"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:24"><name pos:start="23:14" pos:end="23:18">avpkt</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:24">size</name></name></expr>)</condition> <block pos:start="23:27" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:21">

            <expr_stmt pos:start="25:13" pos:end="25:31"><expr pos:start="25:13" pos:end="25:30"><operator pos:start="25:13" pos:end="25:13">*</operator><name pos:start="25:14" pos:end="25:26">got_frame_ptr</name> <operator pos:start="25:28" pos:end="25:28">=</operator> <literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:21">return <expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:28">(<expr pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:17">avpkt</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">size</name></name> <operator pos:start="31:25" pos:end="31:25">&lt;</operator> <literal type="number" pos:start="31:27" pos:end="31:27">4</literal></expr>)</condition> <block pos:start="31:30" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:39">

            <expr_stmt pos:start="33:13" pos:end="33:65"><expr pos:start="33:13" pos:end="33:64"><call pos:start="33:13" pos:end="33:64"><name pos:start="33:13" pos:end="33:18">av_log</name><argument_list pos:start="33:19" pos:end="33:64">(<argument pos:start="33:20" pos:end="33:24"><expr pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:24">avctx</name></expr></argument>, <argument pos:start="33:27" pos:end="33:38"><expr pos:start="33:27" pos:end="33:38"><name pos:start="33:27" pos:end="33:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:41" pos:end="33:63"><expr pos:start="33:41" pos:end="33:63"><literal type="string" pos:start="33:41" pos:end="33:63">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:39">return <expr pos:start="35:20" pos:end="35:38"><name pos:start="35:20" pos:end="35:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:87"><expr pos:start="39:9" pos:end="39:86"><name pos:start="39:9" pos:end="39:11">buf</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:86"><name pos:start="39:15" pos:end="39:24">av_realloc</name><argument_list pos:start="39:25" pos:end="39:86">(<argument pos:start="39:26" pos:end="39:41"><expr pos:start="39:26" pos:end="39:41"><name pos:start="39:26" pos:end="39:41"><name pos:start="39:26" pos:end="39:26">s</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:41">packet_buffer</name></name></expr></argument>, <argument pos:start="39:44" pos:end="39:85"><expr pos:start="39:44" pos:end="39:85"><name pos:start="39:44" pos:end="39:54"><name pos:start="39:44" pos:end="39:48">avpkt</name><operator pos:start="39:49" pos:end="39:50">-&gt;</operator><name pos:start="39:51" pos:end="39:54">size</name></name> <operator pos:start="39:56" pos:end="39:56">+</operator> <name pos:start="39:58" pos:end="39:85">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:35"><if pos:start="41:9" pos:end="43:35">if <condition pos:start="41:12" pos:end="41:17">(<expr pos:start="41:13" pos:end="41:16"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:16">buf</name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:35"><block_content pos:start="43:13" pos:end="43:35">

            <return pos:start="43:13" pos:end="43:35">return <expr pos:start="43:20" pos:end="43:34"><call pos:start="43:20" pos:end="43:34"><name pos:start="43:20" pos:end="43:26">AVERROR</name><argument_list pos:start="43:27" pos:end="43:34">(<argument pos:start="43:28" pos:end="43:33"><expr pos:start="43:28" pos:end="43:33"><name pos:start="43:28" pos:end="43:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


        <expr_stmt pos:start="46:9" pos:end="46:31"><expr pos:start="46:9" pos:end="46:30"><name pos:start="46:9" pos:end="46:24"><name pos:start="46:9" pos:end="46:9">s</name><operator pos:start="46:10" pos:end="46:11">-&gt;</operator><name pos:start="46:12" pos:end="46:24">packet_buffer</name></name> <operator pos:start="46:26" pos:end="46:26">=</operator> <name pos:start="46:28" pos:end="46:30">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="48:9" pos:end="48:59"><expr pos:start="48:9" pos:end="48:58"><call pos:start="48:9" pos:end="48:58"><name pos:start="48:9" pos:end="48:14">memcpy</name><argument_list pos:start="48:15" pos:end="48:58">(<argument pos:start="48:16" pos:end="48:31"><expr pos:start="48:16" pos:end="48:31"><name pos:start="48:16" pos:end="48:31"><name pos:start="48:16" pos:end="48:16">s</name><operator pos:start="48:17" pos:end="48:18">-&gt;</operator><name pos:start="48:19" pos:end="48:31">packet_buffer</name></name></expr></argument>, <argument pos:start="48:34" pos:end="48:44"><expr pos:start="48:34" pos:end="48:44"><name pos:start="48:34" pos:end="48:44"><name pos:start="48:34" pos:end="48:38">avpkt</name><operator pos:start="48:39" pos:end="48:40">-&gt;</operator><name pos:start="48:41" pos:end="48:44">data</name></name></expr></argument>, <argument pos:start="48:47" pos:end="48:57"><expr pos:start="48:47" pos:end="48:57"><name pos:start="48:47" pos:end="48:57"><name pos:start="48:47" pos:end="48:51">avpkt</name><operator pos:start="48:52" pos:end="48:53">-&gt;</operator><name pos:start="48:54" pos:end="48:57">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="50:9" pos:end="52:23"><if pos:start="50:9" pos:end="52:23">if <condition pos:start="50:12" pos:end="50:74">(<expr pos:start="50:13" pos:end="50:73"><operator pos:start="50:13" pos:end="50:13">(</operator><name pos:start="50:14" pos:end="50:16">ret</name> <operator pos:start="50:18" pos:end="50:18">=</operator> <call pos:start="50:20" pos:end="50:68"><name pos:start="50:20" pos:end="50:33">init_get_bits8</name><argument_list pos:start="50:34" pos:end="50:68">(<argument pos:start="50:35" pos:end="50:36"><expr pos:start="50:35" pos:end="50:36"><name pos:start="50:35" pos:end="50:36">gb</name></expr></argument>, <argument pos:start="50:39" pos:end="50:54"><expr pos:start="50:39" pos:end="50:54"><name pos:start="50:39" pos:end="50:54"><name pos:start="50:39" pos:end="50:39">s</name><operator pos:start="50:40" pos:end="50:41">-&gt;</operator><name pos:start="50:42" pos:end="50:54">packet_buffer</name></name></expr></argument>, <argument pos:start="50:57" pos:end="50:67"><expr pos:start="50:57" pos:end="50:67"><name pos:start="50:57" pos:end="50:67"><name pos:start="50:57" pos:end="50:61">avpkt</name><operator pos:start="50:62" pos:end="50:63">-&gt;</operator><name pos:start="50:64" pos:end="50:67">size</name></name></expr></argument>)</argument_list></call><operator pos:start="50:69" pos:end="50:69">)</operator> <operator pos:start="50:71" pos:end="50:71">&lt;</operator> <literal type="number" pos:start="50:73" pos:end="50:73">0</literal></expr>)</condition><block type="pseudo" pos:start="52:13" pos:end="52:23"><block_content pos:start="52:13" pos:end="52:23">

            <return pos:start="52:13" pos:end="52:23">return <expr pos:start="52:20" pos:end="52:22"><name pos:start="52:20" pos:end="52:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="54:9" pos:end="54:31"><expr pos:start="54:9" pos:end="54:30"><name pos:start="54:9" pos:end="54:16">consumed</name> <operator pos:start="54:18" pos:end="54:18">=</operator> <name pos:start="54:20" pos:end="54:30"><name pos:start="54:20" pos:end="54:24">avpkt</name><operator pos:start="54:25" pos:end="54:26">-&gt;</operator><name pos:start="54:27" pos:end="54:30">size</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="58:9" pos:end="58:32">/* skip reported size */</comment>

        <expr_stmt pos:start="60:9" pos:end="60:31"><expr pos:start="60:9" pos:end="60:30"><call pos:start="60:9" pos:end="60:30"><name pos:start="60:9" pos:end="60:22">skip_bits_long</name><argument_list pos:start="60:23" pos:end="60:30">(<argument pos:start="60:24" pos:end="60:25"><expr pos:start="60:24" pos:end="60:25"><name pos:start="60:24" pos:end="60:25">gb</name></expr></argument>, <argument pos:start="60:28" pos:end="60:29"><expr pos:start="60:28" pos:end="60:29"><literal type="number" pos:start="60:28" pos:end="60:29">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="66:5" pos:end="66:27">/* get output buffer */</comment>

    <expr_stmt pos:start="68:5" pos:end="68:37"><expr pos:start="68:5" pos:end="68:36"><name pos:start="68:5" pos:end="68:21"><name pos:start="68:5" pos:end="68:9">frame</name><operator pos:start="68:10" pos:end="68:11">-&gt;</operator><name pos:start="68:12" pos:end="68:21">nb_samples</name></name> <operator pos:start="68:23" pos:end="68:23">=</operator> <name pos:start="68:25" pos:end="68:36"><name pos:start="68:25" pos:end="68:25">s</name><operator pos:start="68:26" pos:end="68:27">-&gt;</operator><name pos:start="68:28" pos:end="68:36">frame_len</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="70:5" pos:end="72:19"><if pos:start="70:5" pos:end="72:19">if <condition pos:start="70:8" pos:end="70:51">(<expr pos:start="70:9" pos:end="70:50"><operator pos:start="70:9" pos:end="70:9">(</operator><name pos:start="70:10" pos:end="70:12">ret</name> <operator pos:start="70:14" pos:end="70:14">=</operator> <call pos:start="70:16" pos:end="70:45"><name pos:start="70:16" pos:end="70:28">ff_get_buffer</name><argument_list pos:start="70:29" pos:end="70:45">(<argument pos:start="70:30" pos:end="70:34"><expr pos:start="70:30" pos:end="70:34"><name pos:start="70:30" pos:end="70:34">avctx</name></expr></argument>, <argument pos:start="70:37" pos:end="70:41"><expr pos:start="70:37" pos:end="70:41"><name pos:start="70:37" pos:end="70:41">frame</name></expr></argument>, <argument pos:start="70:44" pos:end="70:44"><expr pos:start="70:44" pos:end="70:44"><literal type="number" pos:start="70:44" pos:end="70:44">0</literal></expr></argument>)</argument_list></call><operator pos:start="70:46" pos:end="70:46">)</operator> <operator pos:start="70:48" pos:end="70:48">&lt;</operator> <literal type="number" pos:start="70:50" pos:end="70:50">0</literal></expr>)</condition><block type="pseudo" pos:start="72:9" pos:end="72:19"><block_content pos:start="72:9" pos:end="72:19">

        <return pos:start="72:9" pos:end="72:19">return <expr pos:start="72:16" pos:end="72:18"><name pos:start="72:16" pos:end="72:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="76:5" pos:end="84:5"><if pos:start="76:5" pos:end="84:5">if <condition pos:start="76:8" pos:end="78:68">(<expr pos:start="76:9" pos:end="78:67"><call pos:start="76:9" pos:end="78:67"><name pos:start="76:9" pos:end="76:20">decode_block</name><argument_list pos:start="76:21" pos:end="78:67">(<argument pos:start="76:22" pos:end="76:22"><expr pos:start="76:22" pos:end="76:22"><name pos:start="76:22" pos:end="76:22">s</name></expr></argument>, <argument pos:start="76:25" pos:end="76:54"><expr pos:start="76:25" pos:end="76:54"><operator pos:start="76:25" pos:end="76:25">(</operator><name pos:start="76:26" pos:end="76:30">float</name> <operator pos:start="76:32" pos:end="76:32">*</operator><operator pos:start="76:33" pos:end="76:33">*</operator><operator pos:start="76:34" pos:end="76:34">)</operator><name pos:start="76:35" pos:end="76:54"><name pos:start="76:35" pos:end="76:39">frame</name><operator pos:start="76:40" pos:end="76:41">-&gt;</operator><name pos:start="76:42" pos:end="76:54">extended_data</name></name></expr></argument>,

                     <argument pos:start="78:22" pos:end="78:66"><expr pos:start="78:22" pos:end="78:66"><name pos:start="78:22" pos:end="78:37"><name pos:start="78:22" pos:end="78:26">avctx</name><operator pos:start="78:27" pos:end="78:28">-&gt;</operator><name pos:start="78:29" pos:end="78:33">codec</name><operator pos:start="78:34" pos:end="78:35">-&gt;</operator><name pos:start="78:36" pos:end="78:37">id</name></name> <operator pos:start="78:39" pos:end="78:40">==</operator> <name pos:start="78:42" pos:end="78:66">AV_CODEC_ID_BINKAUDIO_DCT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="78:70" pos:end="84:5">{<block_content pos:start="80:9" pos:end="82:35">

        <expr_stmt pos:start="80:9" pos:end="80:59"><expr pos:start="80:9" pos:end="80:58"><call pos:start="80:9" pos:end="80:58"><name pos:start="80:9" pos:end="80:14">av_log</name><argument_list pos:start="80:15" pos:end="80:58">(<argument pos:start="80:16" pos:end="80:20"><expr pos:start="80:16" pos:end="80:20"><name pos:start="80:16" pos:end="80:20">avctx</name></expr></argument>, <argument pos:start="80:23" pos:end="80:34"><expr pos:start="80:23" pos:end="80:34"><name pos:start="80:23" pos:end="80:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="80:37" pos:end="80:57"><expr pos:start="80:37" pos:end="80:57"><literal type="string" pos:start="80:37" pos:end="80:57">"Incomplete packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="82:9" pos:end="82:35">return <expr pos:start="82:16" pos:end="82:34"><name pos:start="82:16" pos:end="82:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="86:5" pos:end="86:25"><expr pos:start="86:5" pos:end="86:24"><call pos:start="86:5" pos:end="86:24"><name pos:start="86:5" pos:end="86:20">get_bits_align32</name><argument_list pos:start="86:21" pos:end="86:24">(<argument pos:start="86:22" pos:end="86:23"><expr pos:start="86:22" pos:end="86:23"><name pos:start="86:22" pos:end="86:23">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="90:5" pos:end="90:56"><expr pos:start="90:5" pos:end="90:55"><name pos:start="90:5" pos:end="90:21"><name pos:start="90:5" pos:end="90:9">frame</name><operator pos:start="90:10" pos:end="90:11">-&gt;</operator><name pos:start="90:12" pos:end="90:21">nb_samples</name></name> <operator pos:start="90:23" pos:end="90:23">=</operator> <name pos:start="90:25" pos:end="90:37"><name pos:start="90:25" pos:end="90:25">s</name><operator pos:start="90:26" pos:end="90:27">-&gt;</operator><name pos:start="90:28" pos:end="90:37">block_size</name></name> <operator pos:start="90:39" pos:end="90:39">/</operator> <name pos:start="90:41" pos:end="90:55"><name pos:start="90:41" pos:end="90:45">avctx</name><operator pos:start="90:46" pos:end="90:47">-&gt;</operator><name pos:start="90:48" pos:end="90:55">channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="92:5" pos:end="92:26"><expr pos:start="92:5" pos:end="92:25"><operator pos:start="92:5" pos:end="92:5">*</operator><name pos:start="92:6" pos:end="92:18">got_frame_ptr</name>    <operator pos:start="92:23" pos:end="92:23">=</operator> <literal type="number" pos:start="92:25" pos:end="92:25">1</literal></expr>;</expr_stmt>



    <return pos:start="96:5" pos:end="96:20">return <expr pos:start="96:12" pos:end="96:19"><name pos:start="96:12" pos:end="96:19">consumed</name></expr>;</return>

</block_content>}</block></function></unit>
