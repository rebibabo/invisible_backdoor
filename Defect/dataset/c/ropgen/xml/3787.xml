<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3787.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">clear_blocks_dcbz32_ppc</name><parameter_list pos:start="1:29" pos:end="1:45">(<parameter pos:start="1:30" pos:end="1:44"><decl pos:start="1:30" pos:end="1:44"><type pos:start="1:30" pos:end="1:38"><name pos:start="1:30" pos:end="1:36">DCTELEM</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">blocks</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:1" pos:end="55:55">

<expr_stmt pos:start="5:1" pos:end="5:52"><expr pos:start="5:1" pos:end="5:51"><call pos:start="5:1" pos:end="5:51"><name pos:start="5:1" pos:end="5:19">POWERPC_TBL_DECLARE</name><argument_list pos:start="5:20" pos:end="5:51">(<argument pos:start="5:21" pos:end="5:47"><expr pos:start="5:21" pos:end="5:47"><name pos:start="5:21" pos:end="5:47">powerpc_clear_blocks_dcbz32</name></expr></argument>, <argument pos:start="5:50" pos:end="5:50"><expr pos:start="5:50" pos:end="5:50"><literal type="number" pos:start="5:50" pos:end="5:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:12">register</specifier> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:22">misal</name> <init pos:start="7:24" pos:end="7:61">= <expr pos:start="7:26" pos:end="7:61"><operator pos:start="7:26" pos:end="7:26">(</operator><operator pos:start="7:27" pos:end="7:27">(</operator><name pos:start="7:28" pos:end="7:35">unsigned</name> <name pos:start="7:37" pos:end="7:40">long</name><operator pos:start="7:41" pos:end="7:41">)</operator><name pos:start="7:42" pos:end="7:47">blocks</name> <operator pos:start="7:49" pos:end="7:49">&amp;</operator> <literal type="number" pos:start="7:51" pos:end="7:60">0x00000010</literal><operator pos:start="7:61" pos:end="7:61">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:12">register</specifier> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt pos:start="11:1" pos:end="14:0"><expr pos:start="11:1" pos:end="11:55"><call pos:start="11:1" pos:end="11:55"><name pos:start="11:1" pos:end="11:23">POWERPC_TBL_START_COUNT</name><argument_list pos:start="11:24" pos:end="11:55">(<argument pos:start="11:25" pos:end="11:51"><expr pos:start="11:25" pos:end="11:51"><name pos:start="11:25" pos:end="11:51">powerpc_clear_blocks_dcbz32</name></expr></argument>, <argument pos:start="11:54" pos:end="11:54"><expr pos:start="11:54" pos:end="11:54"><literal type="number" pos:start="11:54" pos:end="11:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="13:1" pos:end="13:5">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:5"><literal type="number" pos:start="13:5" pos:end="13:5">1</literal></expr></cpp:if>

    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="27:5">if <condition pos:start="15:8" pos:end="15:14">(<expr pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:13">misal</name></expr>)</condition> <block pos:start="15:16" pos:end="27:5">{<block_content pos:start="17:7" pos:end="25:14">

      <expr_stmt pos:start="17:7" pos:end="17:39"><expr pos:start="17:7" pos:end="17:38"><operator pos:start="17:7" pos:end="17:7">(</operator><operator pos:start="17:8" pos:end="17:8">(</operator><name pos:start="17:9" pos:end="17:16">unsigned</name> <name pos:start="17:18" pos:end="17:21">long</name><operator pos:start="17:22" pos:end="17:22">*</operator><operator pos:start="17:23" pos:end="17:23">)</operator><name pos:start="17:24" pos:end="17:29">blocks</name><operator pos:start="17:30" pos:end="17:30">)</operator><index pos:start="17:31" pos:end="17:33">[<expr pos:start="17:32" pos:end="17:32"><literal type="number" pos:start="17:32" pos:end="17:32">0</literal></expr>]</index> <operator pos:start="17:35" pos:end="17:35">=</operator> <literal type="number" pos:start="17:37" pos:end="17:38">0L</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="19:7" pos:end="19:39"><expr pos:start="19:7" pos:end="19:38"><operator pos:start="19:7" pos:end="19:7">(</operator><operator pos:start="19:8" pos:end="19:8">(</operator><name pos:start="19:9" pos:end="19:16">unsigned</name> <name pos:start="19:18" pos:end="19:21">long</name><operator pos:start="19:22" pos:end="19:22">*</operator><operator pos:start="19:23" pos:end="19:23">)</operator><name pos:start="19:24" pos:end="19:29">blocks</name><operator pos:start="19:30" pos:end="19:30">)</operator><index pos:start="19:31" pos:end="19:33">[<expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">1</literal></expr>]</index> <operator pos:start="19:35" pos:end="19:35">=</operator> <literal type="number" pos:start="19:37" pos:end="19:38">0L</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="21:7" pos:end="21:39"><expr pos:start="21:7" pos:end="21:38"><operator pos:start="21:7" pos:end="21:7">(</operator><operator pos:start="21:8" pos:end="21:8">(</operator><name pos:start="21:9" pos:end="21:16">unsigned</name> <name pos:start="21:18" pos:end="21:21">long</name><operator pos:start="21:22" pos:end="21:22">*</operator><operator pos:start="21:23" pos:end="21:23">)</operator><name pos:start="21:24" pos:end="21:29">blocks</name><operator pos:start="21:30" pos:end="21:30">)</operator><index pos:start="21:31" pos:end="21:33">[<expr pos:start="21:32" pos:end="21:32"><literal type="number" pos:start="21:32" pos:end="21:32">2</literal></expr>]</index> <operator pos:start="21:35" pos:end="21:35">=</operator> <literal type="number" pos:start="21:37" pos:end="21:38">0L</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="23:7" pos:end="23:39"><expr pos:start="23:7" pos:end="23:38"><operator pos:start="23:7" pos:end="23:7">(</operator><operator pos:start="23:8" pos:end="23:8">(</operator><name pos:start="23:9" pos:end="23:16">unsigned</name> <name pos:start="23:18" pos:end="23:21">long</name><operator pos:start="23:22" pos:end="23:22">*</operator><operator pos:start="23:23" pos:end="23:23">)</operator><name pos:start="23:24" pos:end="23:29">blocks</name><operator pos:start="23:30" pos:end="23:30">)</operator><index pos:start="23:31" pos:end="23:33">[<expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">3</literal></expr>]</index> <operator pos:start="23:35" pos:end="23:35">=</operator> <literal type="number" pos:start="23:37" pos:end="23:38">0L</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="25:7" pos:end="25:14"><expr pos:start="25:7" pos:end="25:13"><name pos:start="25:7" pos:end="25:7">i</name> <operator pos:start="25:9" pos:end="25:10">+=</operator> <literal type="number" pos:start="25:12" pos:end="25:13">16</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="29:5" pos:end="33:5">for <control pos:start="29:9" pos:end="29:47">( <init pos:start="29:11" pos:end="29:11">;</init> <condition pos:start="29:13" pos:end="29:38"><expr pos:start="29:13" pos:end="29:36"><name pos:start="29:13" pos:end="29:13">i</name> <operator pos:start="29:15" pos:end="29:15">&lt;</operator> <sizeof pos:start="29:17" pos:end="29:31">sizeof<argument_list pos:start="29:23" pos:end="29:31">(<argument pos:start="29:24" pos:end="29:30"><expr pos:start="29:24" pos:end="29:30"><name pos:start="29:24" pos:end="29:30">DCTELEM</name></expr></argument>)</argument_list></sizeof><operator pos:start="29:32" pos:end="29:32">*</operator><literal type="number" pos:start="29:33" pos:end="29:33">6</literal><operator pos:start="29:34" pos:end="29:34">*</operator><literal type="number" pos:start="29:35" pos:end="29:36">64</literal></expr> ;</condition> <incr pos:start="29:40" pos:end="29:46"><expr pos:start="29:40" pos:end="29:46"><name pos:start="29:40" pos:end="29:40">i</name> <operator pos:start="29:42" pos:end="29:43">+=</operator> <literal type="number" pos:start="29:45" pos:end="29:46">32</literal></expr></incr>)</control> <block pos:start="29:49" pos:end="33:5">{<block_content pos:start="31:7" pos:end="31:70">

      <asm pos:start="31:7" pos:end="31:70">asm <specifier pos:start="31:11" pos:end="31:18">volatile</specifier>("dcbz %0,%1" : : "b" (blocks), "r" (i) : "memory");</asm>

    </block_content>}</block></for>

    <if_stmt pos:start="35:5" pos:end="50:0"><if pos:start="35:5" pos:end="50:0">if <condition pos:start="35:8" pos:end="35:14">(<expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:13">misal</name></expr>)</condition> <block pos:start="35:16" pos:end="50:0">{<block_content pos:start="37:7" pos:end="45:14">

      <expr_stmt pos:start="37:7" pos:end="37:41"><expr pos:start="37:7" pos:end="37:40"><operator pos:start="37:7" pos:end="37:7">(</operator><operator pos:start="37:8" pos:end="37:8">(</operator><name pos:start="37:9" pos:end="37:16">unsigned</name> <name pos:start="37:18" pos:end="37:21">long</name><operator pos:start="37:22" pos:end="37:22">*</operator><operator pos:start="37:23" pos:end="37:23">)</operator><name pos:start="37:24" pos:end="37:29">blocks</name><operator pos:start="37:30" pos:end="37:30">)</operator><index pos:start="37:31" pos:end="37:35">[<expr pos:start="37:32" pos:end="37:34"><literal type="number" pos:start="37:32" pos:end="37:34">188</literal></expr>]</index> <operator pos:start="37:37" pos:end="37:37">=</operator> <literal type="number" pos:start="37:39" pos:end="37:40">0L</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="39:7" pos:end="39:41"><expr pos:start="39:7" pos:end="39:40"><operator pos:start="39:7" pos:end="39:7">(</operator><operator pos:start="39:8" pos:end="39:8">(</operator><name pos:start="39:9" pos:end="39:16">unsigned</name> <name pos:start="39:18" pos:end="39:21">long</name><operator pos:start="39:22" pos:end="39:22">*</operator><operator pos:start="39:23" pos:end="39:23">)</operator><name pos:start="39:24" pos:end="39:29">blocks</name><operator pos:start="39:30" pos:end="39:30">)</operator><index pos:start="39:31" pos:end="39:35">[<expr pos:start="39:32" pos:end="39:34"><literal type="number" pos:start="39:32" pos:end="39:34">189</literal></expr>]</index> <operator pos:start="39:37" pos:end="39:37">=</operator> <literal type="number" pos:start="39:39" pos:end="39:40">0L</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="41:7" pos:end="41:41"><expr pos:start="41:7" pos:end="41:40"><operator pos:start="41:7" pos:end="41:7">(</operator><operator pos:start="41:8" pos:end="41:8">(</operator><name pos:start="41:9" pos:end="41:16">unsigned</name> <name pos:start="41:18" pos:end="41:21">long</name><operator pos:start="41:22" pos:end="41:22">*</operator><operator pos:start="41:23" pos:end="41:23">)</operator><name pos:start="41:24" pos:end="41:29">blocks</name><operator pos:start="41:30" pos:end="41:30">)</operator><index pos:start="41:31" pos:end="41:35">[<expr pos:start="41:32" pos:end="41:34"><literal type="number" pos:start="41:32" pos:end="41:34">190</literal></expr>]</index> <operator pos:start="41:37" pos:end="41:37">=</operator> <literal type="number" pos:start="41:39" pos:end="41:40">0L</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="43:7" pos:end="43:41"><expr pos:start="43:7" pos:end="43:40"><operator pos:start="43:7" pos:end="43:7">(</operator><operator pos:start="43:8" pos:end="43:8">(</operator><name pos:start="43:9" pos:end="43:16">unsigned</name> <name pos:start="43:18" pos:end="43:21">long</name><operator pos:start="43:22" pos:end="43:22">*</operator><operator pos:start="43:23" pos:end="43:23">)</operator><name pos:start="43:24" pos:end="43:29">blocks</name><operator pos:start="43:30" pos:end="43:30">)</operator><index pos:start="43:31" pos:end="43:35">[<expr pos:start="43:32" pos:end="43:34"><literal type="number" pos:start="43:32" pos:end="43:34">191</literal></expr>]</index> <operator pos:start="43:37" pos:end="43:37">=</operator> <literal type="number" pos:start="43:39" pos:end="43:40">0L</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="45:7" pos:end="45:14"><expr pos:start="45:7" pos:end="45:13"><name pos:start="45:7" pos:end="45:7">i</name> <operator pos:start="45:9" pos:end="45:10">+=</operator> <literal type="number" pos:start="45:12" pos:end="45:13">16</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:43"><call pos:start="51:5" pos:end="51:43"><name pos:start="51:5" pos:end="51:10">memset</name><argument_list pos:start="51:11" pos:end="51:43">(<argument pos:start="51:12" pos:end="51:17"><expr pos:start="51:12" pos:end="51:17"><name pos:start="51:12" pos:end="51:17">blocks</name></expr></argument>, <argument pos:start="51:20" pos:end="51:20"><expr pos:start="51:20" pos:end="51:20"><literal type="number" pos:start="51:20" pos:end="51:20">0</literal></expr></argument>, <argument pos:start="51:23" pos:end="51:42"><expr pos:start="51:23" pos:end="51:42"><sizeof pos:start="51:23" pos:end="51:37">sizeof<argument_list pos:start="51:29" pos:end="51:37">(<argument pos:start="51:30" pos:end="51:36"><expr pos:start="51:30" pos:end="51:36"><name pos:start="51:30" pos:end="51:36">DCTELEM</name></expr></argument>)</argument_list></sizeof><operator pos:start="51:38" pos:end="51:38">*</operator><literal type="number" pos:start="51:39" pos:end="51:39">6</literal><operator pos:start="51:40" pos:end="51:40">*</operator><literal type="number" pos:start="51:41" pos:end="51:42">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

<expr_stmt pos:start="55:1" pos:end="55:55"><expr pos:start="55:1" pos:end="55:54"><call pos:start="55:1" pos:end="55:54"><name pos:start="55:1" pos:end="55:22">POWERPC_TBL_STOP_COUNT</name><argument_list pos:start="55:23" pos:end="55:54">(<argument pos:start="55:24" pos:end="55:50"><expr pos:start="55:24" pos:end="55:50"><name pos:start="55:24" pos:end="55:50">powerpc_clear_blocks_dcbz32</name></expr></argument>, <argument pos:start="55:53" pos:end="55:53"><expr pos:start="55:53" pos:end="55:53"><literal type="number" pos:start="55:53" pos:end="55:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
