<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6157.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">http_connect</name><parameter_list pos:start="1:24" pos:end="5:65">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">URLContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">h</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">path</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:79"><decl pos:start="1:58" pos:end="1:79"><type pos:start="1:58" pos:end="1:79"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:67">char</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:79">local_path</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:43"><decl pos:start="3:25" pos:end="3:43"><type pos:start="3:25" pos:end="3:43"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:43">hoststr</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:61"><decl pos:start="3:46" pos:end="3:61"><type pos:start="3:46" pos:end="3:61"><specifier pos:start="3:46" pos:end="3:50">const</specifier> <name pos:start="3:52" pos:end="3:55">char</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:61">auth</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:45"><decl pos:start="5:25" pos:end="5:45"><type pos:start="5:25" pos:end="5:45"><specifier pos:start="5:25" pos:end="5:29">const</specifier> <name pos:start="5:31" pos:end="5:34">char</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:45">proxyauth</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:64"><decl pos:start="5:48" pos:end="5:64"><type pos:start="5:48" pos:end="5:64"><name pos:start="5:48" pos:end="5:50">int</name> <modifier pos:start="5:52" pos:end="5:52">*</modifier></type><name pos:start="5:53" pos:end="5:64">new_location</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="215:1">{<block_content pos:start="9:5" pos:end="213:36">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">HTTPContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:33">= <expr pos:start="9:22" pos:end="9:33"><name pos:start="9:22" pos:end="9:33"><name pos:start="9:22" pos:end="9:22">h</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:33">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">post</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:22"><name pos:start="13:10" pos:end="13:16">headers</name><index pos:start="13:17" pos:end="13:22">[<expr pos:start="13:18" pos:end="13:21"><literal type="number" pos:start="13:18" pos:end="13:21">1024</literal></expr>]</index></name> <init pos:start="13:24" pos:end="13:27">= <expr pos:start="13:26" pos:end="13:27"><literal type="string" pos:start="13:26" pos:end="13:27">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:17">authstr</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>, <decl pos:start="15:27" pos:end="15:46"><type ref="prev" pos:start="15:5" pos:end="15:10"><modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:39">proxyauthstr</name> <init pos:start="15:41" pos:end="15:46">= <expr pos:start="15:43" pos:end="15:46"><name pos:start="15:43" pos:end="15:46">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:15">off</name> <init pos:start="17:17" pos:end="17:24">= <expr pos:start="17:19" pos:end="17:24"><name pos:start="17:19" pos:end="17:24"><name pos:start="17:19" pos:end="17:19">s</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:24">off</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">len</name> <init pos:start="19:13" pos:end="19:15">= <expr pos:start="19:15" pos:end="19:15"><literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:22">method</name></decl>;</decl_stmt>





    <comment type="block" pos:start="27:5" pos:end="27:26">/* send http header */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:8">post</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <name pos:start="29:12" pos:end="29:19"><name pos:start="29:12" pos:end="29:12">h</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:19">flags</name></name> <operator pos:start="29:21" pos:end="29:21">&amp;</operator> <name pos:start="29:23" pos:end="29:37">AVIO_FLAG_WRITE</name></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="43:5"><if pos:start="33:5" pos:end="43:5">if <condition pos:start="33:8" pos:end="33:21">(<expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:20">post_data</name></name></expr>)</condition> <block pos:start="33:23" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:28">

        <comment type="block" pos:start="35:9" pos:end="37:42">/* force POST method and disable chunked encoding when

         * custom HTTP post data is set */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:17"><expr pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:12">post</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <literal type="number" pos:start="39:16" pos:end="39:16">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:23">chunked_post</name></name> <operator pos:start="41:25" pos:end="41:25">=</operator> <literal type="number" pos:start="41:27" pos:end="41:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:10">method</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <ternary pos:start="47:14" pos:end="47:34"><condition pos:start="47:14" pos:end="47:19"><expr pos:start="47:14" pos:end="47:17"><name pos:start="47:14" pos:end="47:17">post</name></expr> ?</condition><then pos:start="47:21" pos:end="47:26"> <expr pos:start="47:21" pos:end="47:26"><literal type="string" pos:start="47:21" pos:end="47:26">"POST"</literal></expr> </then><else pos:start="47:28" pos:end="47:34">: <expr pos:start="47:30" pos:end="47:34"><literal type="string" pos:start="47:30" pos:end="47:34">"GET"</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:51"><expr pos:start="49:5" pos:end="51:50"><name pos:start="49:5" pos:end="49:11">authstr</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="51:50"><name pos:start="49:15" pos:end="49:42">ff_http_auth_create_response</name><argument_list pos:start="49:43" pos:end="51:50">(<argument pos:start="49:44" pos:end="49:57"><expr pos:start="49:44" pos:end="49:57"><operator pos:start="49:44" pos:end="49:44">&amp;</operator><name pos:start="49:45" pos:end="49:57"><name pos:start="49:45" pos:end="49:45">s</name><operator pos:start="49:46" pos:end="49:47">-&gt;</operator><name pos:start="49:48" pos:end="49:57">auth_state</name></name></expr></argument>, <argument pos:start="49:60" pos:end="49:63"><expr pos:start="49:60" pos:end="49:63"><name pos:start="49:60" pos:end="49:63">auth</name></expr></argument>, <argument pos:start="49:66" pos:end="49:75"><expr pos:start="49:66" pos:end="49:75"><name pos:start="49:66" pos:end="49:75">local_path</name></expr></argument>,

                                           <argument pos:start="51:44" pos:end="51:49"><expr pos:start="51:44" pos:end="51:49"><name pos:start="51:44" pos:end="51:49">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="55:68"><expr pos:start="53:5" pos:end="55:67"><name pos:start="53:5" pos:end="53:16">proxyauthstr</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="55:67"><name pos:start="53:20" pos:end="53:47">ff_http_auth_create_response</name><argument_list pos:start="53:48" pos:end="55:67">(<argument pos:start="53:49" pos:end="53:68"><expr pos:start="53:49" pos:end="53:68"><operator pos:start="53:49" pos:end="53:49">&amp;</operator><name pos:start="53:50" pos:end="53:68"><name pos:start="53:50" pos:end="53:50">s</name><operator pos:start="53:51" pos:end="53:52">-&gt;</operator><name pos:start="53:53" pos:end="53:68">proxy_auth_state</name></name></expr></argument>, <argument pos:start="53:71" pos:end="53:79"><expr pos:start="53:71" pos:end="53:79"><name pos:start="53:71" pos:end="53:79">proxyauth</name></expr></argument>,

                                                <argument pos:start="55:49" pos:end="55:58"><expr pos:start="55:49" pos:end="55:58"><name pos:start="55:49" pos:end="55:58">local_path</name></expr></argument>, <argument pos:start="55:61" pos:end="55:66"><expr pos:start="55:61" pos:end="55:66"><name pos:start="55:61" pos:end="55:66">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:39">/* set default headers if needed */</comment>

    <if_stmt pos:start="61:5" pos:end="65:67"><if pos:start="61:5" pos:end="65:67">if <condition pos:start="61:8" pos:end="61:52">(<expr pos:start="61:9" pos:end="61:51"><operator pos:start="61:9" pos:end="61:9">!</operator><call pos:start="61:10" pos:end="61:51"><name pos:start="61:10" pos:end="61:19">has_header</name><argument_list pos:start="61:20" pos:end="61:51">(<argument pos:start="61:21" pos:end="61:30"><expr pos:start="61:21" pos:end="61:30"><name pos:start="61:21" pos:end="61:30"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:30">headers</name></name></expr></argument>, <argument pos:start="61:33" pos:end="61:50"><expr pos:start="61:33" pos:end="61:50"><literal type="string" pos:start="61:33" pos:end="61:50">"\r\nUser-Agent: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="63:8" pos:end="65:67"><block_content pos:start="63:8" pos:end="65:67">

       <expr_stmt pos:start="63:8" pos:end="65:67"><expr pos:start="63:8" pos:end="65:66"><name pos:start="63:8" pos:end="63:10">len</name> <operator pos:start="63:12" pos:end="63:13">+=</operator> <call pos:start="63:15" pos:end="65:66"><name pos:start="63:15" pos:end="63:25">av_strlcatf</name><argument_list pos:start="63:26" pos:end="65:66">(<argument pos:start="63:27" pos:end="63:39"><expr pos:start="63:27" pos:end="63:39"><name pos:start="63:27" pos:end="63:33">headers</name> <operator pos:start="63:35" pos:end="63:35">+</operator> <name pos:start="63:37" pos:end="63:39">len</name></expr></argument>, <argument pos:start="63:42" pos:end="63:62"><expr pos:start="63:42" pos:end="63:62"><sizeof pos:start="63:42" pos:end="63:56">sizeof<argument_list pos:start="63:48" pos:end="63:56">(<argument pos:start="63:49" pos:end="63:55"><expr pos:start="63:49" pos:end="63:55"><name pos:start="63:49" pos:end="63:55">headers</name></expr></argument>)</argument_list></sizeof> <operator pos:start="63:58" pos:end="63:58">-</operator> <name pos:start="63:60" pos:end="63:62">len</name></expr></argument>,

                          <argument pos:start="65:27" pos:end="65:46"><expr pos:start="65:27" pos:end="65:46"><literal type="string" pos:start="65:27" pos:end="65:46">"User-Agent: %s\r\n"</literal></expr></argument>, <argument pos:start="65:49" pos:end="65:65"><expr pos:start="65:49" pos:end="65:65"><name pos:start="65:49" pos:end="65:65">LIBAVFORMAT_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="71:49"><if pos:start="67:5" pos:end="71:49">if <condition pos:start="67:8" pos:end="67:48">(<expr pos:start="67:9" pos:end="67:47"><operator pos:start="67:9" pos:end="67:9">!</operator><call pos:start="67:10" pos:end="67:47"><name pos:start="67:10" pos:end="67:19">has_header</name><argument_list pos:start="67:20" pos:end="67:47">(<argument pos:start="67:21" pos:end="67:30"><expr pos:start="67:21" pos:end="67:30"><name pos:start="67:21" pos:end="67:30"><name pos:start="67:21" pos:end="67:21">s</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:30">headers</name></name></expr></argument>, <argument pos:start="67:33" pos:end="67:46"><expr pos:start="67:33" pos:end="67:46"><literal type="string" pos:start="67:33" pos:end="67:46">"\r\nAccept: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="71:49"><block_content pos:start="69:9" pos:end="71:49">

        <expr_stmt pos:start="69:9" pos:end="71:49"><expr pos:start="69:9" pos:end="71:48"><name pos:start="69:9" pos:end="69:11">len</name> <operator pos:start="69:13" pos:end="69:14">+=</operator> <call pos:start="69:16" pos:end="71:48"><name pos:start="69:16" pos:end="69:25">av_strlcpy</name><argument_list pos:start="69:26" pos:end="71:48">(<argument pos:start="69:27" pos:end="69:39"><expr pos:start="69:27" pos:end="69:39"><name pos:start="69:27" pos:end="69:33">headers</name> <operator pos:start="69:35" pos:end="69:35">+</operator> <name pos:start="69:37" pos:end="69:39">len</name></expr></argument>, <argument pos:start="69:42" pos:end="69:58"><expr pos:start="69:42" pos:end="69:58"><literal type="string" pos:start="69:42" pos:end="69:58">"Accept: */*\r\n"</literal></expr></argument>,

                          <argument pos:start="71:27" pos:end="71:47"><expr pos:start="71:27" pos:end="71:47"><sizeof pos:start="71:27" pos:end="71:41">sizeof<argument_list pos:start="71:33" pos:end="71:41">(<argument pos:start="71:34" pos:end="71:40"><expr pos:start="71:34" pos:end="71:40"><name pos:start="71:34" pos:end="71:40">headers</name></expr></argument>)</argument_list></sizeof> <operator pos:start="71:43" pos:end="71:43">-</operator> <name pos:start="71:45" pos:end="71:47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="73:5" pos:end="77:66"><if pos:start="73:5" pos:end="77:66">if <condition pos:start="73:8" pos:end="73:56">(<expr pos:start="73:9" pos:end="73:55"><operator pos:start="73:9" pos:end="73:9">!</operator><call pos:start="73:10" pos:end="73:46"><name pos:start="73:10" pos:end="73:19">has_header</name><argument_list pos:start="73:20" pos:end="73:46">(<argument pos:start="73:21" pos:end="73:30"><expr pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:30">headers</name></name></expr></argument>, <argument pos:start="73:33" pos:end="73:45"><expr pos:start="73:33" pos:end="73:45"><literal type="string" pos:start="73:33" pos:end="73:45">"\r\nRange: "</literal></expr></argument>)</argument_list></call> <operator pos:start="73:48" pos:end="73:49">&amp;&amp;</operator> <operator pos:start="73:51" pos:end="73:51">!</operator><name pos:start="73:52" pos:end="73:55">post</name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="77:66"><block_content pos:start="75:9" pos:end="77:66">

        <expr_stmt pos:start="75:9" pos:end="77:66"><expr pos:start="75:9" pos:end="77:65"><name pos:start="75:9" pos:end="75:11">len</name> <operator pos:start="75:13" pos:end="75:14">+=</operator> <call pos:start="75:16" pos:end="77:65"><name pos:start="75:16" pos:end="75:26">av_strlcatf</name><argument_list pos:start="75:27" pos:end="77:65">(<argument pos:start="75:28" pos:end="75:40"><expr pos:start="75:28" pos:end="75:40"><name pos:start="75:28" pos:end="75:34">headers</name> <operator pos:start="75:36" pos:end="75:36">+</operator> <name pos:start="75:38" pos:end="75:40">len</name></expr></argument>, <argument pos:start="75:43" pos:end="75:63"><expr pos:start="75:43" pos:end="75:63"><sizeof pos:start="75:43" pos:end="75:57">sizeof<argument_list pos:start="75:49" pos:end="75:57">(<argument pos:start="75:50" pos:end="75:56"><expr pos:start="75:50" pos:end="75:56"><name pos:start="75:50" pos:end="75:56">headers</name></expr></argument>)</argument_list></sizeof> <operator pos:start="75:59" pos:end="75:59">-</operator> <name pos:start="75:61" pos:end="75:63">len</name></expr></argument>,

                           <argument pos:start="77:28" pos:end="77:56"><expr pos:start="77:28" pos:end="77:56"><literal type="string" pos:start="77:28" pos:end="77:43">"Range: bytes=%"</literal><name pos:start="77:44" pos:end="77:49">PRId64</name><literal type="string" pos:start="77:50" pos:end="77:56">"-\r\n"</literal></expr></argument>, <argument pos:start="77:59" pos:end="77:64"><expr pos:start="77:59" pos:end="77:64"><name pos:start="77:59" pos:end="77:64"><name pos:start="77:59" pos:end="77:59">s</name><operator pos:start="77:60" pos:end="77:61">-&gt;</operator><name pos:start="77:62" pos:end="77:64">off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="97:5"><if pos:start="81:5" pos:end="97:5">if <condition pos:start="81:8" pos:end="81:52">(<expr pos:start="81:9" pos:end="81:51"><operator pos:start="81:9" pos:end="81:9">!</operator><call pos:start="81:10" pos:end="81:51"><name pos:start="81:10" pos:end="81:19">has_header</name><argument_list pos:start="81:20" pos:end="81:51">(<argument pos:start="81:21" pos:end="81:30"><expr pos:start="81:21" pos:end="81:30"><name pos:start="81:21" pos:end="81:30"><name pos:start="81:21" pos:end="81:21">s</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:30">headers</name></name></expr></argument>, <argument pos:start="81:33" pos:end="81:50"><expr pos:start="81:33" pos:end="81:50"><literal type="string" pos:start="81:33" pos:end="81:50">"\r\nConnection: "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:54" pos:end="97:5">{<block_content pos:start="83:9" pos:end="95:9">

        <if_stmt pos:start="83:9" pos:end="95:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:33">(<expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:32">multiple_requests</name></name></expr>)</condition> <block pos:start="83:35" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:53">

            <expr_stmt pos:start="85:13" pos:end="87:53"><expr pos:start="85:13" pos:end="87:52"><name pos:start="85:13" pos:end="85:15">len</name> <operator pos:start="85:17" pos:end="85:18">+=</operator> <call pos:start="85:20" pos:end="87:52"><name pos:start="85:20" pos:end="85:29">av_strlcpy</name><argument_list pos:start="85:30" pos:end="87:52">(<argument pos:start="85:31" pos:end="85:43"><expr pos:start="85:31" pos:end="85:43"><name pos:start="85:31" pos:end="85:37">headers</name> <operator pos:start="85:39" pos:end="85:39">+</operator> <name pos:start="85:41" pos:end="85:43">len</name></expr></argument>, <argument pos:start="85:46" pos:end="85:73"><expr pos:start="85:46" pos:end="85:73"><literal type="string" pos:start="85:46" pos:end="85:73">"Connection: keep-alive\r\n"</literal></expr></argument>,

                              <argument pos:start="87:31" pos:end="87:51"><expr pos:start="87:31" pos:end="87:51"><sizeof pos:start="87:31" pos:end="87:45">sizeof<argument_list pos:start="87:37" pos:end="87:45">(<argument pos:start="87:38" pos:end="87:44"><expr pos:start="87:38" pos:end="87:44"><name pos:start="87:38" pos:end="87:44">headers</name></expr></argument>)</argument_list></sizeof> <operator pos:start="87:47" pos:end="87:47">-</operator> <name pos:start="87:49" pos:end="87:51">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="95:9">else <block pos:start="89:16" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:53">

            <expr_stmt pos:start="91:13" pos:end="93:53"><expr pos:start="91:13" pos:end="93:52"><name pos:start="91:13" pos:end="91:15">len</name> <operator pos:start="91:17" pos:end="91:18">+=</operator> <call pos:start="91:20" pos:end="93:52"><name pos:start="91:20" pos:end="91:29">av_strlcpy</name><argument_list pos:start="91:30" pos:end="93:52">(<argument pos:start="91:31" pos:end="91:43"><expr pos:start="91:31" pos:end="91:43"><name pos:start="91:31" pos:end="91:37">headers</name> <operator pos:start="91:39" pos:end="91:39">+</operator> <name pos:start="91:41" pos:end="91:43">len</name></expr></argument>, <argument pos:start="91:46" pos:end="91:68"><expr pos:start="91:46" pos:end="91:68"><literal type="string" pos:start="91:46" pos:end="91:68">"Connection: close\r\n"</literal></expr></argument>,

                              <argument pos:start="93:31" pos:end="93:51"><expr pos:start="93:31" pos:end="93:51"><sizeof pos:start="93:31" pos:end="93:45">sizeof<argument_list pos:start="93:37" pos:end="93:45">(<argument pos:start="93:38" pos:end="93:44"><expr pos:start="93:38" pos:end="93:44"><name pos:start="93:38" pos:end="93:44">headers</name></expr></argument>)</argument_list></sizeof> <operator pos:start="93:47" pos:end="93:47">-</operator> <name pos:start="93:49" pos:end="93:51">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="105:52"><if pos:start="101:5" pos:end="105:52">if <condition pos:start="101:8" pos:end="101:46">(<expr pos:start="101:9" pos:end="101:45"><operator pos:start="101:9" pos:end="101:9">!</operator><call pos:start="101:10" pos:end="101:45"><name pos:start="101:10" pos:end="101:19">has_header</name><argument_list pos:start="101:20" pos:end="101:45">(<argument pos:start="101:21" pos:end="101:30"><expr pos:start="101:21" pos:end="101:30"><name pos:start="101:21" pos:end="101:30"><name pos:start="101:21" pos:end="101:21">s</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:30">headers</name></name></expr></argument>, <argument pos:start="101:33" pos:end="101:44"><expr pos:start="101:33" pos:end="101:44"><literal type="string" pos:start="101:33" pos:end="101:44">"\r\nHost: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="105:52"><block_content pos:start="103:9" pos:end="105:52">

        <expr_stmt pos:start="103:9" pos:end="105:52"><expr pos:start="103:9" pos:end="105:51"><name pos:start="103:9" pos:end="103:11">len</name> <operator pos:start="103:13" pos:end="103:14">+=</operator> <call pos:start="103:16" pos:end="105:51"><name pos:start="103:16" pos:end="103:26">av_strlcatf</name><argument_list pos:start="103:27" pos:end="105:51">(<argument pos:start="103:28" pos:end="103:40"><expr pos:start="103:28" pos:end="103:40"><name pos:start="103:28" pos:end="103:34">headers</name> <operator pos:start="103:36" pos:end="103:36">+</operator> <name pos:start="103:38" pos:end="103:40">len</name></expr></argument>, <argument pos:start="103:43" pos:end="103:63"><expr pos:start="103:43" pos:end="103:63"><sizeof pos:start="103:43" pos:end="103:57">sizeof<argument_list pos:start="103:49" pos:end="103:57">(<argument pos:start="103:50" pos:end="103:56"><expr pos:start="103:50" pos:end="103:56"><name pos:start="103:50" pos:end="103:56">headers</name></expr></argument>)</argument_list></sizeof> <operator pos:start="103:59" pos:end="103:59">-</operator> <name pos:start="103:61" pos:end="103:63">len</name></expr></argument>,

                           <argument pos:start="105:28" pos:end="105:41"><expr pos:start="105:28" pos:end="105:41"><literal type="string" pos:start="105:28" pos:end="105:41">"Host: %s\r\n"</literal></expr></argument>, <argument pos:start="105:44" pos:end="105:50"><expr pos:start="105:44" pos:end="105:50"><name pos:start="105:44" pos:end="105:50">hoststr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="107:5" pos:end="111:70"><if pos:start="107:5" pos:end="111:70">if <condition pos:start="107:8" pos:end="107:72">(<expr pos:start="107:9" pos:end="107:71"><operator pos:start="107:9" pos:end="107:9">!</operator><call pos:start="107:10" pos:end="107:55"><name pos:start="107:10" pos:end="107:19">has_header</name><argument_list pos:start="107:20" pos:end="107:55">(<argument pos:start="107:21" pos:end="107:30"><expr pos:start="107:21" pos:end="107:30"><name pos:start="107:21" pos:end="107:30"><name pos:start="107:21" pos:end="107:21">s</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:30">headers</name></name></expr></argument>, <argument pos:start="107:33" pos:end="107:54"><expr pos:start="107:33" pos:end="107:54"><literal type="string" pos:start="107:33" pos:end="107:54">"\r\nContent-Length: "</literal></expr></argument>)</argument_list></call> <operator pos:start="107:57" pos:end="107:58">&amp;&amp;</operator> <name pos:start="107:60" pos:end="107:71"><name pos:start="107:60" pos:end="107:60">s</name><operator pos:start="107:61" pos:end="107:62">-&gt;</operator><name pos:start="107:63" pos:end="107:71">post_data</name></name></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="111:70"><block_content pos:start="109:9" pos:end="111:70">

        <expr_stmt pos:start="109:9" pos:end="111:70"><expr pos:start="109:9" pos:end="111:69"><name pos:start="109:9" pos:end="109:11">len</name> <operator pos:start="109:13" pos:end="109:14">+=</operator> <call pos:start="109:16" pos:end="111:69"><name pos:start="109:16" pos:end="109:26">av_strlcatf</name><argument_list pos:start="109:27" pos:end="111:69">(<argument pos:start="109:28" pos:end="109:40"><expr pos:start="109:28" pos:end="109:40"><name pos:start="109:28" pos:end="109:34">headers</name> <operator pos:start="109:36" pos:end="109:36">+</operator> <name pos:start="109:38" pos:end="109:40">len</name></expr></argument>, <argument pos:start="109:43" pos:end="109:63"><expr pos:start="109:43" pos:end="109:63"><sizeof pos:start="109:43" pos:end="109:57">sizeof<argument_list pos:start="109:49" pos:end="109:57">(<argument pos:start="109:50" pos:end="109:56"><expr pos:start="109:50" pos:end="109:56"><name pos:start="109:50" pos:end="109:56">headers</name></expr></argument>)</argument_list></sizeof> <operator pos:start="109:59" pos:end="109:59">-</operator> <name pos:start="109:61" pos:end="109:63">len</name></expr></argument>,

                           <argument pos:start="111:28" pos:end="111:51"><expr pos:start="111:28" pos:end="111:51"><literal type="string" pos:start="111:28" pos:end="111:51">"Content-Length: %d\r\n"</literal></expr></argument>, <argument pos:start="111:54" pos:end="111:68"><expr pos:start="111:54" pos:end="111:68"><name pos:start="111:54" pos:end="111:68"><name pos:start="111:54" pos:end="111:54">s</name><operator pos:start="111:55" pos:end="111:56">-&gt;</operator><name pos:start="111:57" pos:end="111:68">post_datalen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:35">/* now add in custom headers */</comment>

    <if_stmt pos:start="117:5" pos:end="119:69"><if pos:start="117:5" pos:end="119:69">if <condition pos:start="117:8" pos:end="117:19">(<expr pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:18">headers</name></name></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:69"><block_content pos:start="119:9" pos:end="119:69">

        <expr_stmt pos:start="119:9" pos:end="119:69"><expr pos:start="119:9" pos:end="119:68"><call pos:start="119:9" pos:end="119:68"><name pos:start="119:9" pos:end="119:18">av_strlcpy</name><argument_list pos:start="119:19" pos:end="119:68">(<argument pos:start="119:20" pos:end="119:32"><expr pos:start="119:20" pos:end="119:32"><name pos:start="119:20" pos:end="119:26">headers</name> <operator pos:start="119:28" pos:end="119:28">+</operator> <name pos:start="119:30" pos:end="119:32">len</name></expr></argument>, <argument pos:start="119:35" pos:end="119:44"><expr pos:start="119:35" pos:end="119:44"><name pos:start="119:35" pos:end="119:44"><name pos:start="119:35" pos:end="119:35">s</name><operator pos:start="119:36" pos:end="119:37">-&gt;</operator><name pos:start="119:38" pos:end="119:44">headers</name></name></expr></argument>, <argument pos:start="119:47" pos:end="119:67"><expr pos:start="119:47" pos:end="119:67"><sizeof pos:start="119:47" pos:end="119:61">sizeof<argument_list pos:start="119:53" pos:end="119:61">(<argument pos:start="119:54" pos:end="119:60"><expr pos:start="119:54" pos:end="119:60"><name pos:start="119:54" pos:end="119:60">headers</name></expr></argument>)</argument_list></sizeof> <operator pos:start="119:63" pos:end="119:63">-</operator> <name pos:start="119:65" pos:end="119:67">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="147:77"><expr pos:start="123:5" pos:end="147:76"><call pos:start="123:5" pos:end="147:76"><name pos:start="123:5" pos:end="123:12">snprintf</name><argument_list pos:start="123:13" pos:end="147:76">(<argument pos:start="123:14" pos:end="123:22"><expr pos:start="123:14" pos:end="123:22"><name pos:start="123:14" pos:end="123:22"><name pos:start="123:14" pos:end="123:14">s</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:22">buffer</name></name></expr></argument>, <argument pos:start="123:25" pos:end="123:41"><expr pos:start="123:25" pos:end="123:41"><sizeof pos:start="123:25" pos:end="123:41">sizeof<argument_list pos:start="123:31" pos:end="123:41">(<argument pos:start="123:32" pos:end="123:40"><expr pos:start="123:32" pos:end="123:40"><name pos:start="123:32" pos:end="123:40"><name pos:start="123:32" pos:end="123:32">s</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:40">buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="125:14" pos:end="135:19"><expr pos:start="125:14" pos:end="135:19"><literal type="string" pos:start="125:14" pos:end="125:33">"%s %s HTTP/1.1\r\n"</literal>

             <literal type="string" pos:start="127:14" pos:end="127:17">"%s"</literal>

             <literal type="string" pos:start="129:14" pos:end="129:17">"%s"</literal>

             <literal type="string" pos:start="131:14" pos:end="131:17">"%s"</literal>

             <literal type="string" pos:start="133:14" pos:end="133:19">"%s%s"</literal>

             <literal type="string" pos:start="135:14" pos:end="135:19">"\r\n"</literal></expr></argument>,

             <argument pos:start="137:14" pos:end="137:19"><expr pos:start="137:14" pos:end="137:19"><name pos:start="137:14" pos:end="137:19">method</name></expr></argument>,

             <argument pos:start="139:14" pos:end="139:17"><expr pos:start="139:14" pos:end="139:17"><name pos:start="139:14" pos:end="139:17">path</name></expr></argument>,

             <argument pos:start="141:14" pos:end="141:76"><expr pos:start="141:14" pos:end="141:76"><ternary pos:start="141:14" pos:end="141:76"><condition pos:start="141:14" pos:end="141:38"><expr pos:start="141:14" pos:end="141:36"><name pos:start="141:14" pos:end="141:17">post</name> <operator pos:start="141:19" pos:end="141:20">&amp;&amp;</operator> <name pos:start="141:22" pos:end="141:36"><name pos:start="141:22" pos:end="141:22">s</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:36">chunked_post</name></name></expr> ?</condition><then pos:start="141:40" pos:end="141:71"> <expr pos:start="141:40" pos:end="141:71"><literal type="string" pos:start="141:40" pos:end="141:71">"Transfer-Encoding: chunked\r\n"</literal></expr> </then><else pos:start="141:73" pos:end="141:76">: <expr pos:start="141:75" pos:end="141:76"><literal type="string" pos:start="141:75" pos:end="141:76">""</literal></expr></else></ternary></expr></argument>,

             <argument pos:start="143:14" pos:end="143:20"><expr pos:start="143:14" pos:end="143:20"><name pos:start="143:14" pos:end="143:20">headers</name></expr></argument>,

             <argument pos:start="145:14" pos:end="145:35"><expr pos:start="145:14" pos:end="145:35"><ternary pos:start="145:14" pos:end="145:35"><condition pos:start="145:14" pos:end="145:22"><expr pos:start="145:14" pos:end="145:20"><name pos:start="145:14" pos:end="145:20">authstr</name></expr> ?</condition><then pos:start="145:24" pos:end="145:30"> <expr pos:start="145:24" pos:end="145:30"><name pos:start="145:24" pos:end="145:30">authstr</name></expr> </then><else pos:start="145:32" pos:end="145:35">: <expr pos:start="145:34" pos:end="145:35"><literal type="string" pos:start="145:34" pos:end="145:35">""</literal></expr></else></ternary></expr></argument>,

             <argument pos:start="147:14" pos:end="147:41"><expr pos:start="147:14" pos:end="147:41"><ternary pos:start="147:14" pos:end="147:41"><condition pos:start="147:14" pos:end="147:27"><expr pos:start="147:14" pos:end="147:25"><name pos:start="147:14" pos:end="147:25">proxyauthstr</name></expr> ?</condition><then pos:start="147:29" pos:end="147:36"> <expr pos:start="147:29" pos:end="147:36"><literal type="string" pos:start="147:29" pos:end="147:36">"Proxy-"</literal></expr> </then><else pos:start="147:38" pos:end="147:41">: <expr pos:start="147:40" pos:end="147:41"><literal type="string" pos:start="147:40" pos:end="147:41">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="147:44" pos:end="147:75"><expr pos:start="147:44" pos:end="147:75"><ternary pos:start="147:44" pos:end="147:75"><condition pos:start="147:44" pos:end="147:57"><expr pos:start="147:44" pos:end="147:55"><name pos:start="147:44" pos:end="147:55">proxyauthstr</name></expr> ?</condition><then pos:start="147:59" pos:end="147:70"> <expr pos:start="147:59" pos:end="147:70"><name pos:start="147:59" pos:end="147:70">proxyauthstr</name></expr> </then><else pos:start="147:72" pos:end="147:75">: <expr pos:start="147:74" pos:end="147:75"><literal type="string" pos:start="147:74" pos:end="147:75">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:23"><expr pos:start="151:5" pos:end="151:22"><call pos:start="151:5" pos:end="151:22"><name pos:start="151:5" pos:end="151:12">av_freep</name><argument_list pos:start="151:13" pos:end="151:22">(<argument pos:start="151:14" pos:end="151:21"><expr pos:start="151:14" pos:end="151:21"><operator pos:start="151:14" pos:end="151:14">&amp;</operator><name pos:start="151:15" pos:end="151:21">authstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:28"><expr pos:start="153:5" pos:end="153:27"><call pos:start="153:5" pos:end="153:27"><name pos:start="153:5" pos:end="153:12">av_freep</name><argument_list pos:start="153:13" pos:end="153:27">(<argument pos:start="153:14" pos:end="153:26"><expr pos:start="153:14" pos:end="153:26"><operator pos:start="153:14" pos:end="153:14">&amp;</operator><name pos:start="153:15" pos:end="153:26">proxyauthstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="157:19"><if pos:start="155:5" pos:end="157:19">if <condition pos:start="155:8" pos:end="155:69">(<expr pos:start="155:9" pos:end="155:68"><operator pos:start="155:9" pos:end="155:9">(</operator><name pos:start="155:10" pos:end="155:12">err</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <call pos:start="155:16" pos:end="155:63"><name pos:start="155:16" pos:end="155:26">ffurl_write</name><argument_list pos:start="155:27" pos:end="155:63">(<argument pos:start="155:28" pos:end="155:32"><expr pos:start="155:28" pos:end="155:32"><name pos:start="155:28" pos:end="155:32"><name pos:start="155:28" pos:end="155:28">s</name><operator pos:start="155:29" pos:end="155:30">-&gt;</operator><name pos:start="155:31" pos:end="155:32">hd</name></name></expr></argument>, <argument pos:start="155:35" pos:end="155:43"><expr pos:start="155:35" pos:end="155:43"><name pos:start="155:35" pos:end="155:43"><name pos:start="155:35" pos:end="155:35">s</name><operator pos:start="155:36" pos:end="155:37">-&gt;</operator><name pos:start="155:38" pos:end="155:43">buffer</name></name></expr></argument>, <argument pos:start="155:46" pos:end="155:62"><expr pos:start="155:46" pos:end="155:62"><call pos:start="155:46" pos:end="155:62"><name pos:start="155:46" pos:end="155:51">strlen</name><argument_list pos:start="155:52" pos:end="155:62">(<argument pos:start="155:53" pos:end="155:61"><expr pos:start="155:53" pos:end="155:61"><name pos:start="155:53" pos:end="155:61"><name pos:start="155:53" pos:end="155:53">s</name><operator pos:start="155:54" pos:end="155:55">-&gt;</operator><name pos:start="155:56" pos:end="155:61">buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="155:64" pos:end="155:64">)</operator> <operator pos:start="155:66" pos:end="155:66">&lt;</operator> <literal type="number" pos:start="155:68" pos:end="155:68">0</literal></expr>)</condition><block type="pseudo" pos:start="157:9" pos:end="157:19"><block_content pos:start="157:9" pos:end="157:19">

        <return pos:start="157:9" pos:end="157:19">return <expr pos:start="157:16" pos:end="157:18"><name pos:start="157:16" pos:end="157:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="165:23"><if pos:start="161:5" pos:end="165:23">if <condition pos:start="161:8" pos:end="161:21">(<expr pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:20">post_data</name></name></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="165:23"><block_content pos:start="163:9" pos:end="165:23">

        <if_stmt pos:start="163:9" pos:end="165:23"><if pos:start="163:9" pos:end="165:23">if <condition pos:start="163:12" pos:end="163:74">(<expr pos:start="163:13" pos:end="163:73"><operator pos:start="163:13" pos:end="163:13">(</operator><name pos:start="163:14" pos:end="163:16">err</name> <operator pos:start="163:18" pos:end="163:18">=</operator> <call pos:start="163:20" pos:end="163:68"><name pos:start="163:20" pos:end="163:30">ffurl_write</name><argument_list pos:start="163:31" pos:end="163:68">(<argument pos:start="163:32" pos:end="163:36"><expr pos:start="163:32" pos:end="163:36"><name pos:start="163:32" pos:end="163:36"><name pos:start="163:32" pos:end="163:32">s</name><operator pos:start="163:33" pos:end="163:34">-&gt;</operator><name pos:start="163:35" pos:end="163:36">hd</name></name></expr></argument>, <argument pos:start="163:39" pos:end="163:50"><expr pos:start="163:39" pos:end="163:50"><name pos:start="163:39" pos:end="163:50"><name pos:start="163:39" pos:end="163:39">s</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:50">post_data</name></name></expr></argument>, <argument pos:start="163:53" pos:end="163:67"><expr pos:start="163:53" pos:end="163:67"><name pos:start="163:53" pos:end="163:67"><name pos:start="163:53" pos:end="163:53">s</name><operator pos:start="163:54" pos:end="163:55">-&gt;</operator><name pos:start="163:56" pos:end="163:67">post_datalen</name></name></expr></argument>)</argument_list></call><operator pos:start="163:69" pos:end="163:69">)</operator> <operator pos:start="163:71" pos:end="163:71">&lt;</operator> <literal type="number" pos:start="163:73" pos:end="163:73">0</literal></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:23"><block_content pos:start="165:13" pos:end="165:23">

            <return pos:start="165:13" pos:end="165:23">return <expr pos:start="165:20" pos:end="165:22"><name pos:start="165:20" pos:end="165:22">err</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:27">/* init input buffer */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:27"><expr pos:start="171:5" pos:end="171:26"><name pos:start="171:5" pos:end="171:14"><name pos:start="171:5" pos:end="171:5">s</name><operator pos:start="171:6" pos:end="171:7">-&gt;</operator><name pos:start="171:8" pos:end="171:14">buf_ptr</name></name> <operator pos:start="171:16" pos:end="171:16">=</operator> <name pos:start="171:18" pos:end="171:26"><name pos:start="171:18" pos:end="171:18">s</name><operator pos:start="171:19" pos:end="171:20">-&gt;</operator><name pos:start="171:21" pos:end="171:26">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:27"><expr pos:start="173:5" pos:end="173:26"><name pos:start="173:5" pos:end="173:14"><name pos:start="173:5" pos:end="173:5">s</name><operator pos:start="173:6" pos:end="173:7">-&gt;</operator><name pos:start="173:8" pos:end="173:14">buf_end</name></name> <operator pos:start="173:16" pos:end="173:16">=</operator> <name pos:start="173:18" pos:end="173:26"><name pos:start="173:18" pos:end="173:18">s</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:26">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:22"><expr pos:start="175:5" pos:end="175:21"><name pos:start="175:5" pos:end="175:17"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:17">line_count</name></name> <operator pos:start="175:19" pos:end="175:19">=</operator> <literal type="number" pos:start="175:21" pos:end="175:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:15"><expr pos:start="177:5" pos:end="177:14"><name pos:start="177:5" pos:end="177:10"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:10">off</name></name> <operator pos:start="177:12" pos:end="177:12">=</operator> <literal type="number" pos:start="177:14" pos:end="177:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:21"><expr pos:start="179:5" pos:end="179:20"><name pos:start="179:5" pos:end="179:15"><name pos:start="179:5" pos:end="179:5">s</name><operator pos:start="179:6" pos:end="179:7">-&gt;</operator><name pos:start="179:8" pos:end="179:15">filesize</name></name> <operator pos:start="179:17" pos:end="179:17">=</operator> <operator pos:start="179:19" pos:end="179:19">-</operator><literal type="number" pos:start="179:20" pos:end="179:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:21"><expr pos:start="181:5" pos:end="181:20"><name pos:start="181:5" pos:end="181:16"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:16">willclose</name></name> <operator pos:start="181:18" pos:end="181:18">=</operator> <literal type="number" pos:start="181:20" pos:end="181:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:28"><expr pos:start="183:5" pos:end="183:27"><name pos:start="183:5" pos:end="183:23"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:23">end_chunked_post</name></name> <operator pos:start="183:25" pos:end="183:25">=</operator> <literal type="number" pos:start="183:27" pos:end="183:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:22"><expr pos:start="185:5" pos:end="185:21"><name pos:start="185:5" pos:end="185:17"><name pos:start="185:5" pos:end="185:5">s</name><operator pos:start="185:6" pos:end="185:7">-&gt;</operator><name pos:start="185:8" pos:end="185:17">end_header</name></name> <operator pos:start="185:19" pos:end="185:19">=</operator> <literal type="number" pos:start="185:21" pos:end="185:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="199:5"><if pos:start="187:5" pos:end="199:5">if <condition pos:start="187:8" pos:end="187:30">(<expr pos:start="187:9" pos:end="187:29"><name pos:start="187:9" pos:end="187:12">post</name> <operator pos:start="187:14" pos:end="187:15">&amp;&amp;</operator> <operator pos:start="187:17" pos:end="187:17">!</operator><name pos:start="187:18" pos:end="187:29"><name pos:start="187:18" pos:end="187:18">s</name><operator pos:start="187:19" pos:end="187:20">-&gt;</operator><name pos:start="187:21" pos:end="187:29">post_data</name></name></expr>)</condition> <block pos:start="187:32" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:17">

        <comment type="block" pos:start="189:9" pos:end="193:60">/* Pretend that it did work. We didn't read any header yet, since

         * we've still to send the POST data, but the code calling this

         * function will check http_code after we return. */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:27"><expr pos:start="195:9" pos:end="195:26"><name pos:start="195:9" pos:end="195:20"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:20">http_code</name></name> <operator pos:start="195:22" pos:end="195:22">=</operator> <literal type="number" pos:start="195:24" pos:end="195:26">200</literal></expr>;</expr_stmt>

        <return pos:start="197:9" pos:end="197:17">return <expr pos:start="197:16" pos:end="197:16"><literal type="number" pos:start="197:16" pos:end="197:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:25">/* wait for header */</comment>

    <expr_stmt pos:start="205:5" pos:end="205:44"><expr pos:start="205:5" pos:end="205:43"><name pos:start="205:5" pos:end="205:7">err</name> <operator pos:start="205:9" pos:end="205:9">=</operator> <call pos:start="205:11" pos:end="205:43"><name pos:start="205:11" pos:end="205:26">http_read_header</name><argument_list pos:start="205:27" pos:end="205:43">(<argument pos:start="205:28" pos:end="205:28"><expr pos:start="205:28" pos:end="205:28"><name pos:start="205:28" pos:end="205:28">h</name></expr></argument>, <argument pos:start="205:31" pos:end="205:42"><expr pos:start="205:31" pos:end="205:42"><name pos:start="205:31" pos:end="205:42">new_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="207:5" pos:end="209:19"><if pos:start="207:5" pos:end="209:19">if <condition pos:start="207:8" pos:end="207:16">(<expr pos:start="207:9" pos:end="207:15"><name pos:start="207:9" pos:end="207:11">err</name> <operator pos:start="207:13" pos:end="207:13">&lt;</operator> <literal type="number" pos:start="207:15" pos:end="207:15">0</literal></expr>)</condition><block type="pseudo" pos:start="209:9" pos:end="209:19"><block_content pos:start="209:9" pos:end="209:19">

        <return pos:start="209:9" pos:end="209:19">return <expr pos:start="209:16" pos:end="209:18"><name pos:start="209:16" pos:end="209:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="213:5" pos:end="213:36">return <expr pos:start="213:12" pos:end="213:35"><ternary pos:start="213:12" pos:end="213:35"><condition pos:start="213:12" pos:end="213:28"><expr pos:start="213:12" pos:end="213:26"><operator pos:start="213:12" pos:end="213:12">(</operator><name pos:start="213:13" pos:end="213:15">off</name> <operator pos:start="213:17" pos:end="213:18">==</operator> <name pos:start="213:20" pos:end="213:25"><name pos:start="213:20" pos:end="213:20">s</name><operator pos:start="213:21" pos:end="213:22">-&gt;</operator><name pos:start="213:23" pos:end="213:25">off</name></name><operator pos:start="213:26" pos:end="213:26">)</operator></expr> ?</condition><then pos:start="213:30" pos:end="213:30"> <expr pos:start="213:30" pos:end="213:30"><literal type="number" pos:start="213:30" pos:end="213:30">0</literal></expr> </then><else pos:start="213:32" pos:end="213:35">: <expr pos:start="213:34" pos:end="213:35"><operator pos:start="213:34" pos:end="213:34">-</operator><literal type="number" pos:start="213:35" pos:end="213:35">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
