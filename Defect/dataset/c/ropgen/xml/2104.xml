<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2104.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">xio3130_downstream_initfn</name><parameter_list pos:start="1:37" pos:end="1:50">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:48"><name pos:start="1:38" pos:end="1:46">PCIDevice</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:14">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">PCIEPort</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">p</name> <init pos:start="5:17" pos:end="5:30">= <expr pos:start="5:19" pos:end="5:30"><call pos:start="5:19" pos:end="5:30"><name pos:start="5:19" pos:end="5:27">PCIE_PORT</name><argument_list pos:start="5:28" pos:end="5:30">(<argument pos:start="5:29" pos:end="5:29"><expr pos:start="5:29" pos:end="5:29"><name pos:start="5:29" pos:end="5:29">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">PCIESlot</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:30">= <expr pos:start="7:19" pos:end="7:30"><call pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:27">PCIE_SLOT</name><argument_list pos:start="7:28" pos:end="7:30">(<argument pos:start="7:29" pos:end="7:29"><expr pos:start="7:29" pos:end="7:29"><name pos:start="7:29" pos:end="7:29">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:40"><expr pos:start="13:5" pos:end="13:39"><call pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:21">pci_bridge_initfn</name><argument_list pos:start="13:22" pos:end="13:39">(<argument pos:start="13:23" pos:end="13:23"><expr pos:start="13:23" pos:end="13:23"><name pos:start="13:23" pos:end="13:23">d</name></expr></argument>, <argument pos:start="13:26" pos:end="13:38"><expr pos:start="13:26" pos:end="13:38"><name pos:start="13:26" pos:end="13:38">TYPE_PCIE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:22">pcie_port_init_reg</name><argument_list pos:start="15:23" pos:end="15:25">(<argument pos:start="15:24" pos:end="15:24"><expr pos:start="15:24" pos:end="15:24"><name pos:start="15:24" pos:end="15:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="23:71"><expr pos:start="19:5" pos:end="23:70"><name pos:start="19:5" pos:end="19:6">rc</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="23:70"><name pos:start="19:10" pos:end="19:17">msi_init</name><argument_list pos:start="19:18" pos:end="23:70">(<argument pos:start="19:19" pos:end="19:19"><expr pos:start="19:19" pos:end="19:19"><name pos:start="19:19" pos:end="19:19">d</name></expr></argument>, <argument pos:start="19:22" pos:end="19:39"><expr pos:start="19:22" pos:end="19:39"><name pos:start="19:22" pos:end="19:39">XIO3130_MSI_OFFSET</name></expr></argument>, <argument pos:start="19:42" pos:end="19:62"><expr pos:start="19:42" pos:end="19:62"><name pos:start="19:42" pos:end="19:62">XIO3130_MSI_NR_VECTOR</name></expr></argument>,

                  <argument pos:start="21:19" pos:end="21:67"><expr pos:start="21:19" pos:end="21:67"><name pos:start="21:19" pos:end="21:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="21:47" pos:end="21:47">&amp;</operator> <name pos:start="21:49" pos:end="21:67">PCI_MSI_FLAGS_64BIT</name></expr></argument>,

                  <argument pos:start="23:19" pos:end="23:69"><expr pos:start="23:19" pos:end="23:69"><name pos:start="23:19" pos:end="23:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="23:47" pos:end="23:47">&amp;</operator> <name pos:start="23:49" pos:end="23:69">PCI_MSI_FLAGS_MASKBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:10">rc</name> <operator pos:start="25:12" pos:end="25:12">&lt;</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>)</condition> <block pos:start="25:17" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:24">

        <goto pos:start="27:9" pos:end="27:24">goto <name pos:start="27:14" pos:end="27:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="35:71"><expr pos:start="33:5" pos:end="35:70"><name pos:start="33:5" pos:end="33:6">rc</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="35:70"><name pos:start="33:10" pos:end="33:30">pci_bridge_ssvid_init</name><argument_list pos:start="33:31" pos:end="35:70">(<argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><name pos:start="33:32" pos:end="33:32">d</name></expr></argument>, <argument pos:start="33:35" pos:end="33:54"><expr pos:start="33:35" pos:end="33:54"><name pos:start="33:35" pos:end="33:54">XIO3130_SSVID_OFFSET</name></expr></argument>,

                               <argument pos:start="35:32" pos:end="35:49"><expr pos:start="35:32" pos:end="35:49"><name pos:start="35:32" pos:end="35:49">XIO3130_SSVID_SVID</name></expr></argument>, <argument pos:start="35:52" pos:end="35:69"><expr pos:start="35:52" pos:end="35:69"><name pos:start="35:52" pos:end="35:69">XIO3130_SSVID_SSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:15">(<expr pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:10">rc</name> <operator pos:start="37:12" pos:end="37:12">&lt;</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr>)</condition> <block pos:start="37:17" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:24">

        <goto pos:start="39:9" pos:end="39:24">goto <name pos:start="39:14" pos:end="39:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="47:32"><expr pos:start="45:5" pos:end="47:31"><name pos:start="45:5" pos:end="45:6">rc</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="47:31"><name pos:start="45:10" pos:end="45:22">pcie_cap_init</name><argument_list pos:start="45:23" pos:end="47:31">(<argument pos:start="45:24" pos:end="45:24"><expr pos:start="45:24" pos:end="45:24"><name pos:start="45:24" pos:end="45:24">d</name></expr></argument>, <argument pos:start="45:27" pos:end="45:44"><expr pos:start="45:27" pos:end="45:44"><name pos:start="45:27" pos:end="45:44">XIO3130_EXP_OFFSET</name></expr></argument>, <argument pos:start="45:47" pos:end="45:69"><expr pos:start="45:47" pos:end="45:69"><name pos:start="45:47" pos:end="45:69">PCI_EXP_TYPE_DOWNSTREAM</name></expr></argument>,

                       <argument pos:start="47:24" pos:end="47:30"><expr pos:start="47:24" pos:end="47:30"><name pos:start="47:24" pos:end="47:30"><name pos:start="47:24" pos:end="47:24">p</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:30">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:15">(<expr pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:10">rc</name> <operator pos:start="49:12" pos:end="49:12">&lt;</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>)</condition> <block pos:start="49:17" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:21">

        <goto pos:start="51:9" pos:end="51:21">goto <name pos:start="51:14" pos:end="51:20">err_msi</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:25"><expr pos:start="55:5" pos:end="55:24"><call pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:21">pcie_cap_flr_init</name><argument_list pos:start="55:22" pos:end="55:24">(<argument pos:start="55:23" pos:end="55:23"><expr pos:start="55:23" pos:end="55:23"><name pos:start="55:23" pos:end="55:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:28"><expr pos:start="57:5" pos:end="57:27"><call pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:24">pcie_cap_deverr_init</name><argument_list pos:start="57:25" pos:end="57:27">(<argument pos:start="57:26" pos:end="57:26"><expr pos:start="57:26" pos:end="57:26"><name pos:start="57:26" pos:end="57:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:35"><expr pos:start="59:5" pos:end="59:34"><call pos:start="59:5" pos:end="59:34"><name pos:start="59:5" pos:end="59:22">pcie_cap_slot_init</name><argument_list pos:start="59:23" pos:end="59:34">(<argument pos:start="59:24" pos:end="59:24"><expr pos:start="59:24" pos:end="59:24"><name pos:start="59:24" pos:end="59:24">d</name></expr></argument>, <argument pos:start="59:27" pos:end="59:33"><expr pos:start="59:27" pos:end="59:33"><name pos:start="59:27" pos:end="59:33"><name pos:start="59:27" pos:end="59:27">s</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:33">slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:28"><expr pos:start="61:5" pos:end="61:27"><call pos:start="61:5" pos:end="61:27"><name pos:start="61:5" pos:end="61:24">pcie_cap_arifwd_init</name><argument_list pos:start="61:25" pos:end="61:27">(<argument pos:start="61:26" pos:end="61:26"><expr pos:start="61:26" pos:end="61:26"><name pos:start="61:26" pos:end="61:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:36"><expr pos:start="65:5" pos:end="65:35"><call pos:start="65:5" pos:end="65:35"><name pos:start="65:5" pos:end="65:23">pcie_chassis_create</name><argument_list pos:start="65:24" pos:end="65:35">(<argument pos:start="65:25" pos:end="65:34"><expr pos:start="65:25" pos:end="65:34"><name pos:start="65:25" pos:end="65:34"><name pos:start="65:25" pos:end="65:25">s</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:34">chassis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:34"><expr pos:start="67:5" pos:end="67:33"><name pos:start="67:5" pos:end="67:6">rc</name> <operator pos:start="67:8" pos:end="67:8">=</operator> <call pos:start="67:10" pos:end="67:33"><name pos:start="67:10" pos:end="67:30">pcie_chassis_add_slot</name><argument_list pos:start="67:31" pos:end="67:33">(<argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><name pos:start="67:32" pos:end="67:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:15">(<expr pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:10">rc</name> <operator pos:start="69:12" pos:end="69:12">&lt;</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>)</condition> <block pos:start="69:17" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:26">

        <goto pos:start="71:9" pos:end="71:26">goto <name pos:start="71:14" pos:end="71:25">err_pcie_cap</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:62"><expr pos:start="77:5" pos:end="77:61"><name pos:start="77:5" pos:end="77:6">rc</name> <operator pos:start="77:8" pos:end="77:8">=</operator> <call pos:start="77:10" pos:end="77:61"><name pos:start="77:10" pos:end="77:22">pcie_aer_init</name><argument_list pos:start="77:23" pos:end="77:61">(<argument pos:start="77:24" pos:end="77:24"><expr pos:start="77:24" pos:end="77:24"><name pos:start="77:24" pos:end="77:24">d</name></expr></argument>, <argument pos:start="77:27" pos:end="77:44"><expr pos:start="77:27" pos:end="77:44"><name pos:start="77:27" pos:end="77:44">XIO3130_AER_OFFSET</name></expr></argument>, <argument pos:start="77:47" pos:end="77:60"><expr pos:start="77:47" pos:end="77:60"><name pos:start="77:47" pos:end="77:60">PCI_ERR_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:15">(<expr pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:10">rc</name> <operator pos:start="79:12" pos:end="79:12">&lt;</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>)</condition> <block pos:start="79:17" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:17">

        <goto pos:start="81:9" pos:end="81:17">goto <name pos:start="81:14" pos:end="81:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>



<label pos:start="91:1" pos:end="91:4"><name pos:start="91:1" pos:end="91:3">err</name>:</label>

    <expr_stmt pos:start="93:5" pos:end="93:29"><expr pos:start="93:5" pos:end="93:28"><call pos:start="93:5" pos:end="93:28"><name pos:start="93:5" pos:end="93:25">pcie_chassis_del_slot</name><argument_list pos:start="93:26" pos:end="93:28">(<argument pos:start="93:27" pos:end="93:27"><expr pos:start="93:27" pos:end="93:27"><name pos:start="93:27" pos:end="93:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="95:1" pos:end="95:13"><name pos:start="95:1" pos:end="95:12">err_pcie_cap</name>:</label>

    <expr_stmt pos:start="97:5" pos:end="97:21"><expr pos:start="97:5" pos:end="97:20"><call pos:start="97:5" pos:end="97:20"><name pos:start="97:5" pos:end="97:17">pcie_cap_exit</name><argument_list pos:start="97:18" pos:end="97:20">(<argument pos:start="97:19" pos:end="97:19"><expr pos:start="97:19" pos:end="97:19"><name pos:start="97:19" pos:end="97:19">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="99:1" pos:end="99:8"><name pos:start="99:1" pos:end="99:7">err_msi</name>:</label>

    <expr_stmt pos:start="101:5" pos:end="101:18"><expr pos:start="101:5" pos:end="101:17"><call pos:start="101:5" pos:end="101:17"><name pos:start="101:5" pos:end="101:14">msi_uninit</name><argument_list pos:start="101:15" pos:end="101:17">(<argument pos:start="101:16" pos:end="101:16"><expr pos:start="101:16" pos:end="101:16"><name pos:start="101:16" pos:end="101:16">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="103:1" pos:end="103:11"><name pos:start="103:1" pos:end="103:10">err_bridge</name>:</label>

    <expr_stmt pos:start="105:5" pos:end="105:25"><expr pos:start="105:5" pos:end="105:24"><call pos:start="105:5" pos:end="105:24"><name pos:start="105:5" pos:end="105:21">pci_bridge_exitfn</name><argument_list pos:start="105:22" pos:end="105:24">(<argument pos:start="105:23" pos:end="105:23"><expr pos:start="105:23" pos:end="105:23"><name pos:start="105:23" pos:end="105:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="107:5" pos:end="107:14">return <expr pos:start="107:12" pos:end="107:13"><name pos:start="107:12" pos:end="107:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
