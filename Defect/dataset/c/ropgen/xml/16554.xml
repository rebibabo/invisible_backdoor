<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16554.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">kvm_on_sigbus</name><parameter_list pos:start="1:18" pos:end="1:39">(<parameter pos:start="1:19" pos:end="1:26"><decl pos:start="1:19" pos:end="1:26"><type pos:start="1:19" pos:end="1:26"><name pos:start="1:19" pos:end="1:21">int</name></type> <name pos:start="1:23" pos:end="1:26">code</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:38"><decl pos:start="1:29" pos:end="1:38"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:13">

<cpp:if pos:start="5:1" pos:end="5:24">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:24"><call pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:24">(<argument pos:start="5:13" pos:end="5:23"><expr pos:start="5:13" pos:end="5:23"><name pos:start="5:13" pos:end="5:23">KVM_CAP_MCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="7:5" pos:end="69:5"><if pos:start="7:5" pos:end="49:5">if <condition pos:start="7:8" pos:end="7:74">(<expr pos:start="7:9" pos:end="7:73"><operator pos:start="7:9" pos:end="7:9">(</operator><name pos:start="7:10" pos:end="7:27"><name pos:start="7:10" pos:end="7:18">first_cpu</name><operator pos:start="7:19" pos:end="7:20">-&gt;</operator><name pos:start="7:21" pos:end="7:27">mcg_cap</name></name> <operator pos:start="7:29" pos:end="7:29">&amp;</operator> <name pos:start="7:31" pos:end="7:39">MCG_SER_P</name><operator pos:start="7:40" pos:end="7:40">)</operator> <operator pos:start="7:42" pos:end="7:43">&amp;&amp;</operator> <name pos:start="7:45" pos:end="7:48">addr</name> <operator pos:start="7:50" pos:end="7:51">&amp;&amp;</operator> <name pos:start="7:53" pos:end="7:56">code</name> <operator pos:start="7:58" pos:end="7:59">==</operator> <name pos:start="7:61" pos:end="7:73">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="7:76" pos:end="49:5">{<block_content pos:start="9:9" pos:end="47:42">

        <decl_stmt pos:start="9:9" pos:end="9:24"><decl pos:start="9:9" pos:end="9:23"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">uint64_t</name></type> <name pos:start="9:18" pos:end="9:23">status</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:20"><decl pos:start="11:9" pos:end="11:19"><type pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:12">void</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:19">vaddr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:28"><decl pos:start="13:9" pos:end="13:27"><type pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:18">ram_addr_t</name></type> <name pos:start="13:20" pos:end="13:27">ram_addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:33"><decl pos:start="15:9" pos:end="15:32"><type pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:26">target_phys_addr_t</name></type> <name pos:start="15:28" pos:end="15:32">paddr</name></decl>;</decl_stmt>



        <comment type="block" pos:start="19:9" pos:end="19:42">/* Hope we are lucky for AO MCE */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:21"><expr pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:13">vaddr</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <name pos:start="21:17" pos:end="21:20">addr</name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="33:9">if <condition pos:start="23:12" pos:end="25:87">(<expr pos:start="23:13" pos:end="25:86"><call pos:start="23:13" pos:end="23:53"><name pos:start="23:13" pos:end="23:35">qemu_ram_addr_from_host</name><argument_list pos:start="23:36" pos:end="23:53">(<argument pos:start="23:37" pos:end="23:41"><expr pos:start="23:37" pos:end="23:41"><name pos:start="23:37" pos:end="23:41">vaddr</name></expr></argument>, <argument pos:start="23:44" pos:end="23:52"><expr pos:start="23:44" pos:end="23:52"><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:52">ram_addr</name></expr></argument>)</argument_list></call> <operator pos:start="23:55" pos:end="23:56">||</operator>

            <operator pos:start="25:13" pos:end="25:13">!</operator><call pos:start="25:14" pos:end="25:86"><name pos:start="25:14" pos:end="25:46">kvm_physical_memory_addr_from_ram</name><argument_list pos:start="25:47" pos:end="25:86">(<argument pos:start="25:48" pos:end="25:67"><expr pos:start="25:48" pos:end="25:67"><name pos:start="25:48" pos:end="25:67"><name pos:start="25:48" pos:end="25:56">first_cpu</name><operator pos:start="25:57" pos:end="25:58">-&gt;</operator><name pos:start="25:59" pos:end="25:67">kvm_state</name></name></expr></argument>, <argument pos:start="25:70" pos:end="25:77"><expr pos:start="25:70" pos:end="25:77"><name pos:start="25:70" pos:end="25:77">ram_addr</name></expr></argument>, <argument pos:start="25:80" pos:end="25:85"><expr pos:start="25:80" pos:end="25:85"><operator pos:start="25:80" pos:end="25:80">&amp;</operator><name pos:start="25:81" pos:end="25:85">paddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:89" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:21">

            <expr_stmt pos:start="27:13" pos:end="29:72"><expr pos:start="27:13" pos:end="29:71"><call pos:start="27:13" pos:end="29:71"><name pos:start="27:13" pos:end="27:19">fprintf</name><argument_list pos:start="27:20" pos:end="29:71">(<argument pos:start="27:21" pos:end="27:26"><expr pos:start="27:21" pos:end="27:26"><name pos:start="27:21" pos:end="27:26">stderr</name></expr></argument>, <argument pos:start="27:29" pos:end="29:64"><expr pos:start="27:29" pos:end="29:64"><literal type="string" pos:start="27:29" pos:end="27:71">"Hardware memory error for memory used by "</literal>

                    <literal type="string" pos:start="29:21" pos:end="29:64">"QEMU itself instead of guest system!: %p\n"</literal></expr></argument>, <argument pos:start="29:67" pos:end="29:70"><expr pos:start="29:67" pos:end="29:70"><name pos:start="29:67" pos:end="29:70">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:21">return <expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="39:19"><expr pos:start="35:9" pos:end="39:18"><name pos:start="35:9" pos:end="35:14">status</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:31">MCI_STATUS_VAL</name> <operator pos:start="35:33" pos:end="35:33">|</operator> <name pos:start="35:35" pos:end="35:47">MCI_STATUS_UC</name> <operator pos:start="35:49" pos:end="35:49">|</operator> <name pos:start="35:51" pos:end="35:63">MCI_STATUS_EN</name>

            <operator pos:start="37:13" pos:end="37:13">|</operator> <name pos:start="37:15" pos:end="37:30">MCI_STATUS_MISCV</name> <operator pos:start="37:32" pos:end="37:32">|</operator> <name pos:start="37:34" pos:end="37:49">MCI_STATUS_ADDRV</name> <operator pos:start="37:51" pos:end="37:51">|</operator> <name pos:start="37:53" pos:end="37:64">MCI_STATUS_S</name>

            <operator pos:start="39:13" pos:end="39:13">|</operator> <literal type="number" pos:start="39:15" pos:end="39:18">0xc0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="45:71"><expr pos:start="41:9" pos:end="45:70"><call pos:start="41:9" pos:end="45:70"><name pos:start="41:9" pos:end="41:26">kvm_inject_x86_mce</name><argument_list pos:start="41:27" pos:end="45:70">(<argument pos:start="41:28" pos:end="41:36"><expr pos:start="41:28" pos:end="41:36"><name pos:start="41:28" pos:end="41:36">first_cpu</name></expr></argument>, <argument pos:start="41:39" pos:end="41:39"><expr pos:start="41:39" pos:end="41:39"><literal type="number" pos:start="41:39" pos:end="41:39">9</literal></expr></argument>, <argument pos:start="41:42" pos:end="41:47"><expr pos:start="41:42" pos:end="41:47"><name pos:start="41:42" pos:end="41:47">status</name></expr></argument>,

                           <argument pos:start="43:28" pos:end="43:60"><expr pos:start="43:28" pos:end="43:60"><name pos:start="43:28" pos:end="43:42">MCG_STATUS_MCIP</name> <operator pos:start="43:44" pos:end="43:44">|</operator> <name pos:start="43:46" pos:end="43:60">MCG_STATUS_RIPV</name></expr></argument>, <argument pos:start="43:63" pos:end="43:67"><expr pos:start="43:63" pos:end="43:67"><name pos:start="43:63" pos:end="43:67">paddr</name></expr></argument>,

                           <argument pos:start="45:28" pos:end="45:53"><expr pos:start="45:28" pos:end="45:53"><operator pos:start="45:28" pos:end="45:28">(</operator><name pos:start="45:29" pos:end="45:41">MCM_ADDR_PHYS</name> <operator pos:start="45:43" pos:end="45:44">&lt;&lt;</operator> <literal type="number" pos:start="45:46" pos:end="45:46">6</literal><operator pos:start="45:47" pos:end="45:47">)</operator> <operator pos:start="45:49" pos:end="45:49">|</operator> <literal type="number" pos:start="45:51" pos:end="45:53">0xc</literal></expr></argument>, <argument pos:start="45:56" pos:end="45:69"><expr pos:start="45:56" pos:end="45:69"><name pos:start="45:56" pos:end="45:69">ABORT_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><call pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:30">kvm_mce_broadcast_rest</name><argument_list pos:start="47:31" pos:end="47:41">(<argument pos:start="47:32" pos:end="47:40"><expr pos:start="47:32" pos:end="47:40"><name pos:start="47:32" pos:end="47:40">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="69:5">else

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    <block pos:start="53:5" pos:end="69:5">{<block_content pos:start="55:9" pos:end="67:9">

        <if_stmt pos:start="55:9" pos:end="67:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:34">(<expr pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:16">code</name> <operator pos:start="55:18" pos:end="55:19">==</operator> <name pos:start="55:21" pos:end="55:33">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="55:36" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:21">

            <return pos:start="57:13" pos:end="57:21">return <expr pos:start="57:20" pos:end="57:20"><literal type="number" pos:start="57:20" pos:end="57:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="59:11" pos:end="63:9">else if <condition pos:start="59:19" pos:end="59:41">(<expr pos:start="59:20" pos:end="59:40"><name pos:start="59:20" pos:end="59:23">code</name> <operator pos:start="59:25" pos:end="59:26">==</operator> <name pos:start="59:28" pos:end="59:40">BUS_MCEERR_AR</name></expr>)</condition> <block pos:start="59:43" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:36">

            <expr_stmt pos:start="61:13" pos:end="61:36"><expr pos:start="61:13" pos:end="61:35"><call pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:33">hardware_memory_error</name><argument_list pos:start="61:34" pos:end="61:35">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:21">

            <return pos:start="65:13" pos:end="65:21">return <expr pos:start="65:20" pos:end="65:20"><literal type="number" pos:start="65:20" pos:end="65:20">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
