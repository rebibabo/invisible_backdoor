<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11811.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">net_init_nic</name><parameter_list pos:start="1:24" pos:end="3:59">(<parameter pos:start="1:25" pos:end="1:52"><decl pos:start="1:25" pos:end="1:52"><type pos:start="1:25" pos:end="1:52"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:46">NetClientOptions</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">opts</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:70"><decl pos:start="1:55" pos:end="1:70"><type pos:start="1:55" pos:end="1:70"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">name</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:44"><decl pos:start="3:25" pos:end="3:44"><type pos:start="3:25" pos:end="3:44"><name pos:start="3:25" pos:end="3:38">NetClientState</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:44">peer</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:51">Error</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier><modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:58">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="9:5" pos:end="129:15">

    <comment type="block" pos:start="7:5" pos:end="7:48">/* FIXME error_setg(errp, ...) on failure */</comment>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">NICInfo</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:31"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:29">NetLegacyNicOptions</name> <modifier pos:start="13:31" pos:end="13:31">*</modifier></type><name pos:start="13:32" pos:end="13:34">nic</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:54"><expr pos:start="17:5" pos:end="17:53"><call pos:start="17:5" pos:end="17:53"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:53">(<argument pos:start="17:12" pos:end="17:52"><expr pos:start="17:12" pos:end="17:52"><name pos:start="17:12" pos:end="17:21"><name pos:start="17:12" pos:end="17:15">opts</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:21">kind</name></name> <operator pos:start="17:23" pos:end="17:24">==</operator> <name pos:start="17:26" pos:end="17:52">NET_CLIENT_OPTIONS_KIND_NIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:20"><expr pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:7">nic</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <name pos:start="19:11" pos:end="19:19"><name pos:start="19:11" pos:end="19:14">opts</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:19">nic</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:7">idx</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:28"><name pos:start="23:11" pos:end="23:26">nic_get_free_idx</name><argument_list pos:start="23:27" pos:end="23:28">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:41">(<expr pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:11">idx</name> <operator pos:start="25:13" pos:end="25:14">==</operator> <operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal> <operator pos:start="25:19" pos:end="25:20">||</operator> <name pos:start="25:22" pos:end="25:28">nb_nics</name> <operator pos:start="25:30" pos:end="25:31">&gt;=</operator> <name pos:start="25:33" pos:end="25:40">MAX_NICS</name></expr>)</condition> <block pos:start="25:43" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:38"><expr pos:start="27:9" pos:end="27:37"><call pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:20">error_report</name><argument_list pos:start="27:21" pos:end="27:37">(<argument pos:start="27:22" pos:end="27:36"><expr pos:start="27:22" pos:end="27:36"><literal type="string" pos:start="27:22" pos:end="27:36">"Too Many NICs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:6">nd</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <operator pos:start="35:10" pos:end="35:10">&amp;</operator><name pos:start="35:11" pos:end="35:23"><name pos:start="35:11" pos:end="35:18">nd_table</name><index pos:start="35:19" pos:end="35:23">[<expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">idx</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><call pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:10">memset</name><argument_list pos:start="39:11" pos:end="39:30">(<argument pos:start="39:12" pos:end="39:13"><expr pos:start="39:12" pos:end="39:13"><name pos:start="39:12" pos:end="39:13">nd</name></expr></argument>, <argument pos:start="39:16" pos:end="39:16"><expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr></argument>, <argument pos:start="39:19" pos:end="39:29"><expr pos:start="39:19" pos:end="39:29"><sizeof pos:start="39:19" pos:end="39:29">sizeof<argument_list pos:start="39:25" pos:end="39:29">(<argument pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><operator pos:start="39:26" pos:end="39:26">*</operator><name pos:start="39:27" pos:end="39:28">nd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="61:5"><if pos:start="43:5" pos:end="55:5">if <condition pos:start="43:8" pos:end="43:24">(<expr pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:11">nic</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:23">has_netdev</name></name></expr>)</condition> <block pos:start="43:26" pos:end="55:5">{<block_content pos:start="45:9" pos:end="53:9">

        <expr_stmt pos:start="45:9" pos:end="45:51"><expr pos:start="45:9" pos:end="45:50"><name pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:10">nd</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:18">netdev</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <call pos:start="45:22" pos:end="45:50"><name pos:start="45:22" pos:end="45:37">qemu_find_netdev</name><argument_list pos:start="45:38" pos:end="45:50">(<argument pos:start="45:39" pos:end="45:49"><expr pos:start="45:39" pos:end="45:49"><name pos:start="45:39" pos:end="45:49"><name pos:start="45:39" pos:end="45:41">nic</name><operator pos:start="45:42" pos:end="45:43">-&gt;</operator><name pos:start="45:44" pos:end="45:49">netdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:24">(<expr pos:start="47:13" pos:end="47:23"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:23"><name pos:start="47:14" pos:end="47:15">nd</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:23">netdev</name></name></expr>)</condition> <block pos:start="47:26" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:22">

            <expr_stmt pos:start="49:13" pos:end="49:63"><expr pos:start="49:13" pos:end="49:62"><call pos:start="49:13" pos:end="49:62"><name pos:start="49:13" pos:end="49:24">error_report</name><argument_list pos:start="49:25" pos:end="49:62">(<argument pos:start="49:26" pos:end="49:48"><expr pos:start="49:26" pos:end="49:48"><literal type="string" pos:start="49:26" pos:end="49:48">"netdev '%s' not found"</literal></expr></argument>, <argument pos:start="49:51" pos:end="49:61"><expr pos:start="49:51" pos:end="49:61"><name pos:start="49:51" pos:end="49:61"><name pos:start="49:51" pos:end="49:53">nic</name><operator pos:start="49:54" pos:end="49:55">-&gt;</operator><name pos:start="49:56" pos:end="49:61">netdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:22">return <expr pos:start="51:20" pos:end="51:21"><operator pos:start="51:20" pos:end="51:20">-</operator><literal type="number" pos:start="51:21" pos:end="51:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="61:5">else <block pos:start="55:12" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:26">

        <expr_stmt pos:start="57:9" pos:end="57:21"><expr pos:start="57:9" pos:end="57:20"><call pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:14">assert</name><argument_list pos:start="57:15" pos:end="57:20">(<argument pos:start="57:16" pos:end="57:19"><expr pos:start="57:16" pos:end="57:19"><name pos:start="57:16" pos:end="57:19">peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:26"><expr pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:10">nd</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:18">netdev</name></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <name pos:start="59:22" pos:end="59:25">peer</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:30"><expr pos:start="63:5" pos:end="63:29"><name pos:start="63:5" pos:end="63:12"><name pos:start="63:5" pos:end="63:6">nd</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:12">name</name></name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:29"><name pos:start="63:16" pos:end="63:23">g_strdup</name><argument_list pos:start="63:24" pos:end="63:29">(<argument pos:start="63:25" pos:end="63:28"><expr pos:start="63:25" pos:end="63:28"><name pos:start="63:25" pos:end="63:28">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:23">(<expr pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:11">nic</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:22">has_model</name></name></expr>)</condition> <block pos:start="65:25" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:41">

        <expr_stmt pos:start="67:9" pos:end="67:41"><expr pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:10">nd</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:17">model</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <call pos:start="67:21" pos:end="67:40"><name pos:start="67:21" pos:end="67:28">g_strdup</name><argument_list pos:start="67:29" pos:end="67:40">(<argument pos:start="67:30" pos:end="67:39"><expr pos:start="67:30" pos:end="67:39"><name pos:start="67:30" pos:end="67:39"><name pos:start="67:30" pos:end="67:32">nic</name><operator pos:start="67:33" pos:end="67:34">-&gt;</operator><name pos:start="67:35" pos:end="67:39">model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:22">(<expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:11">nic</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:21">has_addr</name></name></expr>)</condition> <block pos:start="71:24" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:42">

        <expr_stmt pos:start="73:9" pos:end="73:42"><expr pos:start="73:9" pos:end="73:41"><name pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:10">nd</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:19">devaddr</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <call pos:start="73:23" pos:end="73:41"><name pos:start="73:23" pos:end="73:30">g_strdup</name><argument_list pos:start="73:31" pos:end="73:41">(<argument pos:start="73:32" pos:end="73:40"><expr pos:start="73:32" pos:end="73:40"><name pos:start="73:32" pos:end="73:40"><name pos:start="73:32" pos:end="73:34">nic</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:40">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="81:59">(<expr pos:start="79:9" pos:end="81:58"><name pos:start="79:9" pos:end="79:24"><name pos:start="79:9" pos:end="79:11">nic</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:24">has_macaddr</name></name> <operator pos:start="79:26" pos:end="79:27">&amp;&amp;</operator>

        <call pos:start="81:9" pos:end="81:54"><name pos:start="81:9" pos:end="81:25">net_parse_macaddr</name><argument_list pos:start="81:26" pos:end="81:54">(<argument pos:start="81:27" pos:end="81:39"><expr pos:start="81:27" pos:end="81:39"><name pos:start="81:27" pos:end="81:39"><name pos:start="81:27" pos:end="81:28">nd</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:37">macaddr</name><operator pos:start="81:38" pos:end="81:38">.</operator><name pos:start="81:39" pos:end="81:39">a</name></name></expr></argument>, <argument pos:start="81:42" pos:end="81:53"><expr pos:start="81:42" pos:end="81:53"><name pos:start="81:42" pos:end="81:53"><name pos:start="81:42" pos:end="81:44">nic</name><operator pos:start="81:45" pos:end="81:46">-&gt;</operator><name pos:start="81:47" pos:end="81:53">macaddr</name></name></expr></argument>)</argument_list></call> <operator pos:start="81:56" pos:end="81:56">&lt;</operator> <literal type="number" pos:start="81:58" pos:end="81:58">0</literal></expr>)</condition> <block pos:start="81:61" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:18">

        <expr_stmt pos:start="83:9" pos:end="83:60"><expr pos:start="83:9" pos:end="83:59"><call pos:start="83:9" pos:end="83:59"><name pos:start="83:9" pos:end="83:20">error_report</name><argument_list pos:start="83:21" pos:end="83:59">(<argument pos:start="83:22" pos:end="83:58"><expr pos:start="83:22" pos:end="83:58"><literal type="string" pos:start="83:22" pos:end="83:58">"invalid syntax for ethernet address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:18">return <expr pos:start="85:16" pos:end="85:17"><operator pos:start="85:16" pos:end="85:16">-</operator><literal type="number" pos:start="85:17" pos:end="85:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="91:47">(<expr pos:start="89:9" pos:end="91:46"><name pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:11">nic</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:24">has_macaddr</name></name> <operator pos:start="89:26" pos:end="89:27">&amp;&amp;</operator>

        <call pos:start="91:9" pos:end="91:46"><name pos:start="91:9" pos:end="91:31">is_multicast_ether_addr</name><argument_list pos:start="91:32" pos:end="91:46">(<argument pos:start="91:33" pos:end="91:45"><expr pos:start="91:33" pos:end="91:45"><name pos:start="91:33" pos:end="91:45"><name pos:start="91:33" pos:end="91:34">nd</name><operator pos:start="91:35" pos:end="91:36">-&gt;</operator><name pos:start="91:37" pos:end="91:43">macaddr</name><operator pos:start="91:44" pos:end="91:44">.</operator><name pos:start="91:45" pos:end="91:45">a</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:49" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:18">

        <expr_stmt pos:start="93:9" pos:end="93:77"><expr pos:start="93:9" pos:end="93:76"><call pos:start="93:9" pos:end="93:76"><name pos:start="93:9" pos:end="93:20">error_report</name><argument_list pos:start="93:21" pos:end="93:76">(<argument pos:start="93:22" pos:end="93:75"><expr pos:start="93:22" pos:end="93:75"><literal type="string" pos:start="93:22" pos:end="93:75">"NIC cannot have multicast MAC address (odd 1st byte)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:18">return <expr pos:start="95:16" pos:end="95:17"><operator pos:start="95:16" pos:end="95:16">-</operator><literal type="number" pos:start="95:17" pos:end="95:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:48"><expr pos:start="99:5" pos:end="99:47"><call pos:start="99:5" pos:end="99:47"><name pos:start="99:5" pos:end="99:33">qemu_macaddr_default_if_unset</name><argument_list pos:start="99:34" pos:end="99:47">(<argument pos:start="99:35" pos:end="99:46"><expr pos:start="99:35" pos:end="99:46"><operator pos:start="99:35" pos:end="99:35">&amp;</operator><name pos:start="99:36" pos:end="99:46"><name pos:start="99:36" pos:end="99:37">nd</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:46">macaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="103:5" pos:end="119:5"><if pos:start="103:5" pos:end="115:5">if <condition pos:start="103:8" pos:end="103:25">(<expr pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:11">nic</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:24">has_vectors</name></name></expr>)</condition> <block pos:start="103:27" pos:end="115:5">{<block_content pos:start="105:9" pos:end="113:36">

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:37">(<expr pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:15">nic</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:24">vectors</name></name> <operator pos:start="105:26" pos:end="105:26">&gt;</operator> <literal type="number" pos:start="105:28" pos:end="105:36">0x7ffffff</literal></expr>)</condition> <block pos:start="105:39" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:22">

            <expr_stmt pos:start="107:13" pos:end="107:72"><expr pos:start="107:13" pos:end="107:71"><call pos:start="107:13" pos:end="107:71"><name pos:start="107:13" pos:end="107:24">error_report</name><argument_list pos:start="107:25" pos:end="107:71">(<argument pos:start="107:26" pos:end="107:56"><expr pos:start="107:26" pos:end="107:56"><literal type="string" pos:start="107:26" pos:end="107:50">"invalid # of vectors: %"</literal><name pos:start="107:51" pos:end="107:56">PRIu32</name></expr></argument>, <argument pos:start="107:59" pos:end="107:70"><expr pos:start="107:59" pos:end="107:70"><name pos:start="107:59" pos:end="107:70"><name pos:start="107:59" pos:end="107:61">nic</name><operator pos:start="107:62" pos:end="107:63">-&gt;</operator><name pos:start="107:64" pos:end="107:70">vectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:22">return <expr pos:start="109:20" pos:end="109:21"><operator pos:start="109:20" pos:end="109:20">-</operator><literal type="number" pos:start="109:21" pos:end="109:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:36"><expr pos:start="113:9" pos:end="113:35"><name pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:10">nd</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:20">nvectors</name></name> <operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:35"><name pos:start="113:24" pos:end="113:26">nic</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:35">vectors</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="119:5">else <block pos:start="115:12" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:48">

        <expr_stmt pos:start="117:9" pos:end="117:48"><expr pos:start="117:9" pos:end="117:47"><name pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:10">nd</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:20">nvectors</name></name> <operator pos:start="117:22" pos:end="117:22">=</operator> <name pos:start="117:24" pos:end="117:47">DEV_NVECTORS_UNSPECIFIED</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:17"><expr pos:start="123:5" pos:end="123:16"><name pos:start="123:5" pos:end="123:12"><name pos:start="123:5" pos:end="123:6">nd</name><operator pos:start="123:7" pos:end="123:8">-&gt;</operator><name pos:start="123:9" pos:end="123:12">used</name></name> <operator pos:start="123:14" pos:end="123:14">=</operator> <literal type="number" pos:start="123:16" pos:end="123:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:14"><expr pos:start="125:5" pos:end="125:13"><name pos:start="125:5" pos:end="125:11">nb_nics</name><operator pos:start="125:12" pos:end="125:13">++</operator></expr>;</expr_stmt>



    <return pos:start="129:5" pos:end="129:15">return <expr pos:start="129:12" pos:end="129:14"><name pos:start="129:12" pos:end="129:14">idx</name></expr>;</return>

</block_content>}</block></function>
</unit>
