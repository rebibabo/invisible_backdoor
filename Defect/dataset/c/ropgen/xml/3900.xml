<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3900.c" pos:tabs="8"><function pos:start="1:1" pos:end="207:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">generate_fake_vps</name><parameter_list pos:start="1:29" pos:end="1:69">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:42">QSVEncContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">q</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:68"><decl pos:start="1:48" pos:end="1:68"><type pos:start="1:48" pos:end="1:68"><name pos:start="1:48" pos:end="1:61">AVCodecContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:68">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="207:1">{<block_content pos:start="5:5" pos:end="205:13">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18">GetByteContext</name></type> <name pos:start="5:20" pos:end="5:22">gbc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18">PutByteContext</name></type> <name pos:start="7:20" pos:end="7:22">pbc</name></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">H2645NAL</name></type> <name pos:start="13:14" pos:end="13:20">sps_nal</name> <init pos:start="13:22" pos:end="13:31">= <expr pos:start="13:24" pos:end="13:31"><block pos:start="13:24" pos:end="13:31">{ <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">HEVCSPS</name></type> <name pos:start="15:13" pos:end="15:15">sps</name> <init pos:start="15:17" pos:end="15:23">= <expr pos:start="15:19" pos:end="15:23"><block pos:start="15:19" pos:end="15:23">{ <expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">HEVCVPS</name></type> <name pos:start="17:13" pos:end="17:15">vps</name> <init pos:start="17:17" pos:end="17:23">= <expr pos:start="17:19" pos:end="17:23"><block pos:start="17:19" pos:end="17:23">{ <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:19">vps_buf</name><index pos:start="19:20" pos:end="19:24">[<expr pos:start="19:21" pos:end="19:23"><literal type="number" pos:start="19:21" pos:end="19:23">128</literal></expr>]</index></name></decl>, <decl pos:start="19:27" pos:end="19:43"><type ref="prev" pos:start="19:5" pos:end="19:11"/><name pos:start="19:27" pos:end="19:43"><name pos:start="19:27" pos:end="19:38">vps_rbsp_buf</name><index pos:start="19:39" pos:end="19:43">[<expr pos:start="19:40" pos:end="19:42"><literal type="number" pos:start="19:40" pos:end="19:42">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:26">new_extradata</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:23">sps_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name></decl>, <decl pos:start="25:14" pos:end="25:14"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:14" pos:end="25:14">i</name></decl>, <decl pos:start="25:17" pos:end="25:20"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:17" pos:end="25:20">type</name></decl>, <decl pos:start="25:23" pos:end="25:30"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:23" pos:end="25:30">vps_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:31">(<expr pos:start="29:9" pos:end="29:30"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:30"><name pos:start="29:10" pos:end="29:14">avctx</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:30">extradata_size</name></name></expr>)</condition> <block pos:start="29:33" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:31">

        <expr_stmt pos:start="31:9" pos:end="31:75"><expr pos:start="31:9" pos:end="31:74"><call pos:start="31:9" pos:end="31:74"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:74">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:73"><expr pos:start="31:37" pos:end="31:73"><literal type="string" pos:start="31:37" pos:end="31:73">"No extradata returned from libmfx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:30">AVERROR_UNKNOWN</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:23">/* parse the SPS */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:91"><expr pos:start="41:5" pos:end="41:90"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:90"><name pos:start="41:11" pos:end="41:31">ff_h2645_extract_rbsp</name><argument_list pos:start="41:32" pos:end="41:90">(<argument pos:start="41:33" pos:end="41:52"><expr pos:start="41:33" pos:end="41:52"><name pos:start="41:33" pos:end="41:48"><name pos:start="41:33" pos:end="41:37">avctx</name><operator pos:start="41:38" pos:end="41:39">-&gt;</operator><name pos:start="41:40" pos:end="41:48">extradata</name></name> <operator pos:start="41:50" pos:end="41:50">+</operator> <literal type="number" pos:start="41:52" pos:end="41:52">4</literal></expr></argument>, <argument pos:start="41:55" pos:end="41:79"><expr pos:start="41:55" pos:end="41:79"><name pos:start="41:55" pos:end="41:75"><name pos:start="41:55" pos:end="41:59">avctx</name><operator pos:start="41:60" pos:end="41:61">-&gt;</operator><name pos:start="41:62" pos:end="41:75">extradata_size</name></name> <operator pos:start="41:77" pos:end="41:77">-</operator> <literal type="number" pos:start="41:79" pos:end="41:79">4</literal></expr></argument>, <argument pos:start="41:82" pos:end="41:89"><expr pos:start="41:82" pos:end="41:89"><operator pos:start="41:82" pos:end="41:82">&amp;</operator><name pos:start="41:83" pos:end="41:89">sps_nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:19">

        <expr_stmt pos:start="45:9" pos:end="45:73"><expr pos:start="45:9" pos:end="45:72"><call pos:start="45:9" pos:end="45:72"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:72">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">avctx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:37" pos:end="45:71"><expr pos:start="45:37" pos:end="45:71"><literal type="string" pos:start="45:37" pos:end="45:71">"Error unescaping the SPS buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:19">return <expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:58"><expr pos:start="53:5" pos:end="53:57"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:57"><name pos:start="53:11" pos:end="53:24">init_get_bits8</name><argument_list pos:start="53:25" pos:end="53:57">(<argument pos:start="53:26" pos:end="53:28"><expr pos:start="53:26" pos:end="53:28"><operator pos:start="53:26" pos:end="53:26">&amp;</operator><name pos:start="53:27" pos:end="53:28">gb</name></expr></argument>, <argument pos:start="53:31" pos:end="53:42"><expr pos:start="53:31" pos:end="53:42"><name pos:start="53:31" pos:end="53:42"><name pos:start="53:31" pos:end="53:37">sps_nal</name><operator pos:start="53:38" pos:end="53:38">.</operator><name pos:start="53:39" pos:end="53:42">data</name></name></expr></argument>, <argument pos:start="53:45" pos:end="53:56"><expr pos:start="53:45" pos:end="53:56"><name pos:start="53:45" pos:end="53:56"><name pos:start="53:45" pos:end="53:51">sps_nal</name><operator pos:start="53:52" pos:end="53:52">.</operator><name pos:start="53:53" pos:end="53:56">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">&lt;</operator> <literal type="number" pos:start="55:15" pos:end="55:15">0</literal></expr>)</condition> <block pos:start="55:18" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:19">

        <expr_stmt pos:start="57:9" pos:end="57:39"><expr pos:start="57:9" pos:end="57:38"><call pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:16">av_freep</name><argument_list pos:start="57:17" pos:end="57:38">(<argument pos:start="57:18" pos:end="57:37"><expr pos:start="57:18" pos:end="57:37"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:37"><name pos:start="57:19" pos:end="57:25">sps_nal</name><operator pos:start="57:26" pos:end="57:26">.</operator><name pos:start="57:27" pos:end="57:37">rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:19">return <expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:21"><expr pos:start="65:5" pos:end="65:20"><call pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:12">get_bits</name><argument_list pos:start="65:13" pos:end="65:20">(<argument pos:start="65:14" pos:end="65:16"><expr pos:start="65:14" pos:end="65:16"><operator pos:start="65:14" pos:end="65:14">&amp;</operator><name pos:start="65:15" pos:end="65:16">gb</name></expr></argument>, <argument pos:start="65:19" pos:end="65:19"><expr pos:start="65:19" pos:end="65:19"><literal type="number" pos:start="65:19" pos:end="65:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:28"><expr pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:8">type</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <call pos:start="67:12" pos:end="67:27"><name pos:start="67:12" pos:end="67:19">get_bits</name><argument_list pos:start="67:20" pos:end="67:27">(<argument pos:start="67:21" pos:end="67:23"><expr pos:start="67:21" pos:end="67:23"><operator pos:start="67:21" pos:end="67:21">&amp;</operator><name pos:start="67:22" pos:end="67:23">gb</name></expr></argument>, <argument pos:start="67:26" pos:end="67:26"><expr pos:start="67:26" pos:end="67:26"><literal type="number" pos:start="67:26" pos:end="67:26">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="79:5"><if pos:start="69:5" pos:end="79:5">if <condition pos:start="69:8" pos:end="69:24">(<expr pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:12">type</name> <operator pos:start="69:14" pos:end="69:15">!=</operator> <name pos:start="69:17" pos:end="69:23">NAL_SPS</name></expr>)</condition> <block pos:start="69:26" pos:end="79:5">{<block_content pos:start="71:9" pos:end="77:35">

        <expr_stmt pos:start="71:9" pos:end="73:21"><expr pos:start="71:9" pos:end="73:20"><call pos:start="71:9" pos:end="73:20"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="73:20">(<argument pos:start="71:16" pos:end="71:20"><expr pos:start="71:16" pos:end="71:20"><name pos:start="71:16" pos:end="71:20">avctx</name></expr></argument>, <argument pos:start="71:23" pos:end="71:34"><expr pos:start="71:23" pos:end="71:34"><name pos:start="71:23" pos:end="71:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:37" pos:end="71:80"><expr pos:start="71:37" pos:end="71:80"><literal type="string" pos:start="71:37" pos:end="71:80">"Unexpected NAL type in the extradata: %d\n"</literal></expr></argument>,

               <argument pos:start="73:16" pos:end="73:19"><expr pos:start="73:16" pos:end="73:19"><name pos:start="73:16" pos:end="73:19">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><call pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:16">av_freep</name><argument_list pos:start="75:17" pos:end="75:38">(<argument pos:start="75:18" pos:end="75:37"><expr pos:start="75:18" pos:end="75:37"><operator pos:start="75:18" pos:end="75:18">&amp;</operator><name pos:start="75:19" pos:end="75:37"><name pos:start="75:19" pos:end="75:25">sps_nal</name><operator pos:start="75:26" pos:end="75:26">.</operator><name pos:start="75:27" pos:end="75:37">rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:35">return <expr pos:start="77:16" pos:end="77:34"><name pos:start="77:16" pos:end="77:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:21"><expr pos:start="81:5" pos:end="81:20"><call pos:start="81:5" pos:end="81:20"><name pos:start="81:5" pos:end="81:12">get_bits</name><argument_list pos:start="81:13" pos:end="81:20">(<argument pos:start="81:14" pos:end="81:16"><expr pos:start="81:14" pos:end="81:16"><operator pos:start="81:14" pos:end="81:14">&amp;</operator><name pos:start="81:15" pos:end="81:16">gb</name></expr></argument>, <argument pos:start="81:19" pos:end="81:19"><expr pos:start="81:19" pos:end="81:19"><literal type="number" pos:start="81:19" pos:end="81:19">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:64"><expr pos:start="85:5" pos:end="85:63"><name pos:start="85:5" pos:end="85:7">ret</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:63"><name pos:start="85:11" pos:end="85:27">ff_hevc_parse_sps</name><argument_list pos:start="85:28" pos:end="85:63">(<argument pos:start="85:29" pos:end="85:32"><expr pos:start="85:29" pos:end="85:32"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:32">sps</name></expr></argument>, <argument pos:start="85:35" pos:end="85:37"><expr pos:start="85:35" pos:end="85:37"><operator pos:start="85:35" pos:end="85:35">&amp;</operator><name pos:start="85:36" pos:end="85:37">gb</name></expr></argument>, <argument pos:start="85:40" pos:end="85:46"><expr pos:start="85:40" pos:end="85:46"><operator pos:start="85:40" pos:end="85:40">&amp;</operator><name pos:start="85:41" pos:end="85:46">sps_id</name></expr></argument>, <argument pos:start="85:49" pos:end="85:49"><expr pos:start="85:49" pos:end="85:49"><literal type="number" pos:start="85:49" pos:end="85:49">0</literal></expr></argument>, <argument pos:start="85:52" pos:end="85:55"><expr pos:start="85:52" pos:end="85:55"><name pos:start="85:52" pos:end="85:55">NULL</name></expr></argument>, <argument pos:start="85:58" pos:end="85:62"><expr pos:start="85:58" pos:end="85:62"><name pos:start="85:58" pos:end="85:62">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:35"><expr pos:start="87:5" pos:end="87:34"><call pos:start="87:5" pos:end="87:34"><name pos:start="87:5" pos:end="87:12">av_freep</name><argument_list pos:start="87:13" pos:end="87:34">(<argument pos:start="87:14" pos:end="87:33"><expr pos:start="87:14" pos:end="87:33"><operator pos:start="87:14" pos:end="87:14">&amp;</operator><name pos:start="87:15" pos:end="87:33"><name pos:start="87:15" pos:end="87:21">sps_nal</name><operator pos:start="87:22" pos:end="87:22">.</operator><name pos:start="87:23" pos:end="87:33">rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:16">(<expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">&lt;</operator> <literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>)</condition> <block pos:start="89:18" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:19">

        <expr_stmt pos:start="91:9" pos:end="91:63"><expr pos:start="91:9" pos:end="91:62"><call pos:start="91:9" pos:end="91:62"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="91:62">(<argument pos:start="91:16" pos:end="91:20"><expr pos:start="91:16" pos:end="91:20"><name pos:start="91:16" pos:end="91:20">avctx</name></expr></argument>, <argument pos:start="91:23" pos:end="91:34"><expr pos:start="91:23" pos:end="91:34"><name pos:start="91:23" pos:end="91:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:37" pos:end="91:61"><expr pos:start="91:37" pos:end="91:61"><literal type="string" pos:start="91:37" pos:end="91:61">"Error parsing the SPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:19">return <expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:26">/* generate the VPS */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:31"><expr pos:start="101:5" pos:end="101:30"><name pos:start="101:5" pos:end="101:22"><name pos:start="101:5" pos:end="101:7">vps</name><operator pos:start="101:8" pos:end="101:8">.</operator><name pos:start="101:9" pos:end="101:22">vps_max_layers</name></name>     <operator pos:start="101:28" pos:end="101:28">=</operator> <literal type="number" pos:start="101:30" pos:end="101:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:48"><expr pos:start="103:5" pos:end="103:47"><name pos:start="103:5" pos:end="103:26"><name pos:start="103:5" pos:end="103:7">vps</name><operator pos:start="103:8" pos:end="103:8">.</operator><name pos:start="103:9" pos:end="103:26">vps_max_sub_layers</name></name> <operator pos:start="103:28" pos:end="103:28">=</operator> <name pos:start="103:30" pos:end="103:47"><name pos:start="103:30" pos:end="103:32">sps</name><operator pos:start="103:33" pos:end="103:33">.</operator><name pos:start="103:34" pos:end="103:47">max_sub_layers</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:48"><expr pos:start="105:5" pos:end="105:47"><call pos:start="105:5" pos:end="105:47"><name pos:start="105:5" pos:end="105:10">memcpy</name><argument_list pos:start="105:11" pos:end="105:47">(<argument pos:start="105:12" pos:end="105:19"><expr pos:start="105:12" pos:end="105:19"><operator pos:start="105:12" pos:end="105:12">&amp;</operator><name pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:15">vps</name><operator pos:start="105:16" pos:end="105:16">.</operator><name pos:start="105:17" pos:end="105:19">ptl</name></name></expr></argument>, <argument pos:start="105:22" pos:end="105:29"><expr pos:start="105:22" pos:end="105:29"><operator pos:start="105:22" pos:end="105:22">&amp;</operator><name pos:start="105:23" pos:end="105:29"><name pos:start="105:23" pos:end="105:25">sps</name><operator pos:start="105:26" pos:end="105:26">.</operator><name pos:start="105:27" pos:end="105:29">ptl</name></name></expr></argument>, <argument pos:start="105:32" pos:end="105:46"><expr pos:start="105:32" pos:end="105:46"><sizeof pos:start="105:32" pos:end="105:46">sizeof<argument_list pos:start="105:38" pos:end="105:46">(<argument pos:start="105:39" pos:end="105:45"><expr pos:start="105:39" pos:end="105:45"><name pos:start="105:39" pos:end="105:45"><name pos:start="105:39" pos:end="105:41">vps</name><operator pos:start="105:42" pos:end="105:42">.</operator><name pos:start="105:43" pos:end="105:45">ptl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:53"><expr pos:start="107:5" pos:end="107:52"><name pos:start="107:5" pos:end="107:48"><name pos:start="107:5" pos:end="107:7">vps</name><operator pos:start="107:8" pos:end="107:8">.</operator><name pos:start="107:9" pos:end="107:48">vps_sub_layer_ordering_info_present_flag</name></name> <operator pos:start="107:50" pos:end="107:50">=</operator> <literal type="number" pos:start="107:52" pos:end="107:52">1</literal></expr>;</expr_stmt>

    <for pos:start="109:5" pos:end="117:5">for <control pos:start="109:9" pos:end="109:40">(<init pos:start="109:10" pos:end="109:15"><expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:10">i</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>;</init> <condition pos:start="109:17" pos:end="109:35"><expr pos:start="109:17" pos:end="109:34"><name pos:start="109:17" pos:end="109:17">i</name> <operator pos:start="109:19" pos:end="109:19">&lt;</operator> <name pos:start="109:21" pos:end="109:34">MAX_SUB_LAYERS</name></expr>;</condition> <incr pos:start="109:37" pos:end="109:39"><expr pos:start="109:37" pos:end="109:39"><name pos:start="109:37" pos:end="109:37">i</name><operator pos:start="109:38" pos:end="109:39">++</operator></expr></incr>)</control> <block pos:start="109:42" pos:end="117:5">{<block_content pos:start="111:9" pos:end="115:86">

        <expr_stmt pos:start="111:9" pos:end="111:87"><expr pos:start="111:9" pos:end="111:86"><name pos:start="111:9" pos:end="111:40"><name pos:start="111:9" pos:end="111:11">vps</name><operator pos:start="111:12" pos:end="111:12">.</operator><name pos:start="111:13" pos:end="111:37">vps_max_dec_pic_buffering</name><index pos:start="111:38" pos:end="111:40">[<expr pos:start="111:39" pos:end="111:39"><name pos:start="111:39" pos:end="111:39">i</name></expr>]</index></name> <operator pos:start="111:42" pos:end="111:42">=</operator> <name pos:start="111:44" pos:end="111:64"><name pos:start="111:44" pos:end="111:46">sps</name><operator pos:start="111:47" pos:end="111:47">.</operator><name pos:start="111:48" pos:end="111:61">temporal_layer</name><index pos:start="111:62" pos:end="111:64">[<expr pos:start="111:63" pos:end="111:63"><name pos:start="111:63" pos:end="111:63">i</name></expr>]</index></name><operator pos:start="111:65" pos:end="111:65">.</operator><name pos:start="111:66" pos:end="111:86">max_dec_pic_buffering</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:82"><expr pos:start="113:9" pos:end="113:81"><name pos:start="113:9" pos:end="113:35"><name pos:start="113:9" pos:end="113:11">vps</name><operator pos:start="113:12" pos:end="113:12">.</operator><name pos:start="113:13" pos:end="113:32">vps_num_reorder_pics</name><index pos:start="113:33" pos:end="113:35">[<expr pos:start="113:34" pos:end="113:34"><name pos:start="113:34" pos:end="113:34">i</name></expr>]</index></name>      <operator pos:start="113:42" pos:end="113:42">=</operator> <name pos:start="113:44" pos:end="113:64"><name pos:start="113:44" pos:end="113:46">sps</name><operator pos:start="113:47" pos:end="113:47">.</operator><name pos:start="113:48" pos:end="113:61">temporal_layer</name><index pos:start="113:62" pos:end="113:64">[<expr pos:start="113:63" pos:end="113:63"><name pos:start="113:63" pos:end="113:63">i</name></expr>]</index></name><operator pos:start="113:65" pos:end="113:65">.</operator><name pos:start="113:66" pos:end="113:81">num_reorder_pics</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:86"><expr pos:start="115:9" pos:end="115:85"><name pos:start="115:9" pos:end="115:39"><name pos:start="115:9" pos:end="115:11">vps</name><operator pos:start="115:12" pos:end="115:12">.</operator><name pos:start="115:13" pos:end="115:36">vps_max_latency_increase</name><index pos:start="115:37" pos:end="115:39">[<expr pos:start="115:38" pos:end="115:38"><name pos:start="115:38" pos:end="115:38">i</name></expr>]</index></name>  <operator pos:start="115:42" pos:end="115:42">=</operator> <name pos:start="115:44" pos:end="115:64"><name pos:start="115:44" pos:end="115:46">sps</name><operator pos:start="115:47" pos:end="115:47">.</operator><name pos:start="115:48" pos:end="115:61">temporal_layer</name><index pos:start="115:62" pos:end="115:64">[<expr pos:start="115:63" pos:end="115:63"><name pos:start="115:63" pos:end="115:63">i</name></expr>]</index></name><operator pos:start="115:65" pos:end="115:65">.</operator><name pos:start="115:66" pos:end="115:85">max_latency_increase</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="121:5" pos:end="121:48"><expr pos:start="121:5" pos:end="121:47"><name pos:start="121:5" pos:end="121:26"><name pos:start="121:5" pos:end="121:7">vps</name><operator pos:start="121:8" pos:end="121:8">.</operator><name pos:start="121:9" pos:end="121:26">vps_num_layer_sets</name></name>                  <operator pos:start="121:45" pos:end="121:45">=</operator> <literal type="number" pos:start="121:47" pos:end="121:47">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:83"><expr pos:start="123:5" pos:end="123:82"><name pos:start="123:5" pos:end="123:36"><name pos:start="123:5" pos:end="123:7">vps</name><operator pos:start="123:8" pos:end="123:8">.</operator><name pos:start="123:9" pos:end="123:36">vps_timing_info_present_flag</name></name>        <operator pos:start="123:45" pos:end="123:45">=</operator> <name pos:start="123:47" pos:end="123:82"><name pos:start="123:47" pos:end="123:49">sps</name><operator pos:start="123:50" pos:end="123:50">.</operator><name pos:start="123:51" pos:end="123:53">vui</name><operator pos:start="123:54" pos:end="123:54">.</operator><name pos:start="123:55" pos:end="123:82">vui_timing_info_present_flag</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:76"><expr pos:start="125:5" pos:end="125:75"><name pos:start="125:5" pos:end="125:29"><name pos:start="125:5" pos:end="125:7">vps</name><operator pos:start="125:8" pos:end="125:8">.</operator><name pos:start="125:9" pos:end="125:29">vps_num_units_in_tick</name></name>               <operator pos:start="125:45" pos:end="125:45">=</operator> <name pos:start="125:47" pos:end="125:75"><name pos:start="125:47" pos:end="125:49">sps</name><operator pos:start="125:50" pos:end="125:50">.</operator><name pos:start="125:51" pos:end="125:53">vui</name><operator pos:start="125:54" pos:end="125:54">.</operator><name pos:start="125:55" pos:end="125:75">vui_num_units_in_tick</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:69"><expr pos:start="127:5" pos:end="127:68"><name pos:start="127:5" pos:end="127:22"><name pos:start="127:5" pos:end="127:7">vps</name><operator pos:start="127:8" pos:end="127:8">.</operator><name pos:start="127:9" pos:end="127:22">vps_time_scale</name></name>                      <operator pos:start="127:45" pos:end="127:45">=</operator> <name pos:start="127:47" pos:end="127:68"><name pos:start="127:47" pos:end="127:49">sps</name><operator pos:start="127:50" pos:end="127:50">.</operator><name pos:start="127:51" pos:end="127:53">vui</name><operator pos:start="127:54" pos:end="127:54">.</operator><name pos:start="127:55" pos:end="127:68">vui_time_scale</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:90"><expr pos:start="129:5" pos:end="129:89"><name pos:start="129:5" pos:end="129:43"><name pos:start="129:5" pos:end="129:7">vps</name><operator pos:start="129:8" pos:end="129:8">.</operator><name pos:start="129:9" pos:end="129:43">vps_poc_proportional_to_timing_flag</name></name> <operator pos:start="129:45" pos:end="129:45">=</operator> <name pos:start="129:47" pos:end="129:89"><name pos:start="129:47" pos:end="129:49">sps</name><operator pos:start="129:50" pos:end="129:50">.</operator><name pos:start="129:51" pos:end="129:53">vui</name><operator pos:start="129:54" pos:end="129:54">.</operator><name pos:start="129:55" pos:end="129:89">vui_poc_proportional_to_timing_flag</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:92"><expr pos:start="131:5" pos:end="131:91"><name pos:start="131:5" pos:end="131:34"><name pos:start="131:5" pos:end="131:7">vps</name><operator pos:start="131:8" pos:end="131:8">.</operator><name pos:start="131:9" pos:end="131:34">vps_num_ticks_poc_diff_one</name></name>          <operator pos:start="131:45" pos:end="131:45">=</operator> <name pos:start="131:47" pos:end="131:87"><name pos:start="131:47" pos:end="131:49">sps</name><operator pos:start="131:50" pos:end="131:50">.</operator><name pos:start="131:51" pos:end="131:53">vui</name><operator pos:start="131:54" pos:end="131:54">.</operator><name pos:start="131:55" pos:end="131:87">vui_num_ticks_poc_diff_one_minus1</name></name> <operator pos:start="131:89" pos:end="131:89">+</operator> <literal type="number" pos:start="131:91" pos:end="131:91">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:51">/* generate the encoded RBSP form of the VPS */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:87"><expr pos:start="137:5" pos:end="137:86"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:86"><name pos:start="137:11" pos:end="137:32">ff_hevc_encode_nal_vps</name><argument_list pos:start="137:33" pos:end="137:86">(<argument pos:start="137:34" pos:end="137:37"><expr pos:start="137:34" pos:end="137:37"><operator pos:start="137:34" pos:end="137:34">&amp;</operator><name pos:start="137:35" pos:end="137:37">vps</name></expr></argument>, <argument pos:start="137:40" pos:end="137:49"><expr pos:start="137:40" pos:end="137:49"><name pos:start="137:40" pos:end="137:49"><name pos:start="137:40" pos:end="137:42">sps</name><operator pos:start="137:43" pos:end="137:43">.</operator><name pos:start="137:44" pos:end="137:49">vps_id</name></name></expr></argument>, <argument pos:start="137:52" pos:end="137:63"><expr pos:start="137:52" pos:end="137:63"><name pos:start="137:52" pos:end="137:63">vps_rbsp_buf</name></expr></argument>, <argument pos:start="137:66" pos:end="137:85"><expr pos:start="137:66" pos:end="137:85"><sizeof pos:start="137:66" pos:end="137:85">sizeof<argument_list pos:start="137:72" pos:end="137:85">(<argument pos:start="137:73" pos:end="137:84"><expr pos:start="137:73" pos:end="137:84"><name pos:start="137:73" pos:end="137:84">vps_rbsp_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">&lt;</operator> <literal type="number" pos:start="139:15" pos:end="139:15">0</literal></expr>)</condition> <block pos:start="139:18" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:19">

        <expr_stmt pos:start="141:9" pos:end="141:63"><expr pos:start="141:9" pos:end="141:62"><call pos:start="141:9" pos:end="141:62"><name pos:start="141:9" pos:end="141:14">av_log</name><argument_list pos:start="141:15" pos:end="141:62">(<argument pos:start="141:16" pos:end="141:20"><expr pos:start="141:16" pos:end="141:20"><name pos:start="141:16" pos:end="141:20">avctx</name></expr></argument>, <argument pos:start="141:23" pos:end="141:34"><expr pos:start="141:23" pos:end="141:34"><name pos:start="141:23" pos:end="141:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="141:37" pos:end="141:61"><expr pos:start="141:37" pos:end="141:61"><literal type="string" pos:start="141:37" pos:end="141:61">"Error writing the VPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:19">return <expr pos:start="143:16" pos:end="143:18"><name pos:start="143:16" pos:end="143:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="149:5" pos:end="149:38">/* escape and add the startcode */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:46"><expr pos:start="151:5" pos:end="151:45"><call pos:start="151:5" pos:end="151:45"><name pos:start="151:5" pos:end="151:20">bytestream2_init</name><argument_list pos:start="151:21" pos:end="151:45">(<argument pos:start="151:22" pos:end="151:25"><expr pos:start="151:22" pos:end="151:25"><operator pos:start="151:22" pos:end="151:22">&amp;</operator><name pos:start="151:23" pos:end="151:25">gbc</name></expr></argument>, <argument pos:start="151:28" pos:end="151:39"><expr pos:start="151:28" pos:end="151:39"><name pos:start="151:28" pos:end="151:39">vps_rbsp_buf</name></expr></argument>, <argument pos:start="151:42" pos:end="151:44"><expr pos:start="151:42" pos:end="151:44"><name pos:start="151:42" pos:end="151:44">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:60"><expr pos:start="153:5" pos:end="153:59"><call pos:start="153:5" pos:end="153:59"><name pos:start="153:5" pos:end="153:27">bytestream2_init_writer</name><argument_list pos:start="153:28" pos:end="153:59">(<argument pos:start="153:29" pos:end="153:32"><expr pos:start="153:29" pos:end="153:32"><operator pos:start="153:29" pos:end="153:29">&amp;</operator><name pos:start="153:30" pos:end="153:32">pbc</name></expr></argument>, <argument pos:start="153:35" pos:end="153:41"><expr pos:start="153:35" pos:end="153:41"><name pos:start="153:35" pos:end="153:41">vps_buf</name></expr></argument>, <argument pos:start="153:44" pos:end="153:58"><expr pos:start="153:44" pos:end="153:58"><sizeof pos:start="153:44" pos:end="153:58">sizeof<argument_list pos:start="153:50" pos:end="153:58">(<argument pos:start="153:51" pos:end="153:57"><expr pos:start="153:51" pos:end="153:57"><name pos:start="153:51" pos:end="153:57">vps_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:34"><expr pos:start="157:5" pos:end="157:33"><call pos:start="157:5" pos:end="157:33"><name pos:start="157:5" pos:end="157:24">bytestream2_put_be32</name><argument_list pos:start="157:25" pos:end="157:33">(<argument pos:start="157:26" pos:end="157:29"><expr pos:start="157:26" pos:end="157:29"><operator pos:start="157:26" pos:end="157:26">&amp;</operator><name pos:start="157:27" pos:end="157:29">pbc</name></expr></argument>, <argument pos:start="157:32" pos:end="157:32"><expr pos:start="157:32" pos:end="157:32"><literal type="number" pos:start="157:32" pos:end="157:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <comment type="line" pos:start="157:49" pos:end="157:60">// startcode</comment>

    <expr_stmt pos:start="159:5" pos:end="159:45"><expr pos:start="159:5" pos:end="159:44"><call pos:start="159:5" pos:end="159:44"><name pos:start="159:5" pos:end="159:24">bytestream2_put_byte</name><argument_list pos:start="159:25" pos:end="159:44">(<argument pos:start="159:26" pos:end="159:29"><expr pos:start="159:26" pos:end="159:29"><operator pos:start="159:26" pos:end="159:26">&amp;</operator><name pos:start="159:27" pos:end="159:29">pbc</name></expr></argument>, <argument pos:start="159:32" pos:end="159:43"><expr pos:start="159:32" pos:end="159:43"><name pos:start="159:32" pos:end="159:38">NAL_VPS</name> <operator pos:start="159:40" pos:end="159:41">&lt;&lt;</operator> <literal type="number" pos:start="159:43" pos:end="159:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="159:49" pos:end="159:54">// NAL</comment>

    <expr_stmt pos:start="161:5" pos:end="161:34"><expr pos:start="161:5" pos:end="161:33"><call pos:start="161:5" pos:end="161:33"><name pos:start="161:5" pos:end="161:24">bytestream2_put_byte</name><argument_list pos:start="161:25" pos:end="161:33">(<argument pos:start="161:26" pos:end="161:29"><expr pos:start="161:26" pos:end="161:29"><operator pos:start="161:26" pos:end="161:26">&amp;</operator><name pos:start="161:27" pos:end="161:29">pbc</name></expr></argument>, <argument pos:start="161:32" pos:end="161:32"><expr pos:start="161:32" pos:end="161:32"><literal type="number" pos:start="161:32" pos:end="161:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <comment type="line" pos:start="161:49" pos:end="161:57">// header</comment>



    <while pos:start="165:5" pos:end="179:5">while <condition pos:start="165:11" pos:end="165:44">(<expr pos:start="165:12" pos:end="165:43"><call pos:start="165:12" pos:end="165:43"><name pos:start="165:12" pos:end="165:37">bytestream2_get_bytes_left</name><argument_list pos:start="165:38" pos:end="165:43">(<argument pos:start="165:39" pos:end="165:42"><expr pos:start="165:39" pos:end="165:42"><operator pos:start="165:39" pos:end="165:39">&amp;</operator><name pos:start="165:40" pos:end="165:42">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:46" pos:end="179:5">{<block_content pos:start="167:9" pos:end="177:67">

        <decl_stmt pos:start="167:9" pos:end="167:49"><decl pos:start="167:9" pos:end="167:48"><type pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:16">uint32_t</name></type> <name pos:start="167:18" pos:end="167:18">b</name> <init pos:start="167:20" pos:end="167:48">= <expr pos:start="167:22" pos:end="167:48"><call pos:start="167:22" pos:end="167:48"><name pos:start="167:22" pos:end="167:42">bytestream2_peek_be24</name><argument_list pos:start="167:43" pos:end="167:48">(<argument pos:start="167:44" pos:end="167:47"><expr pos:start="167:44" pos:end="167:47"><operator pos:start="167:44" pos:end="167:44">&amp;</operator><name pos:start="167:45" pos:end="167:47">gbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="169:9" pos:end="177:67"><if pos:start="169:9" pos:end="175:9">if <condition pos:start="169:12" pos:end="169:19">(<expr pos:start="169:13" pos:end="169:18"><name pos:start="169:13" pos:end="169:13">b</name> <operator pos:start="169:15" pos:end="169:16">&lt;=</operator> <literal type="number" pos:start="169:18" pos:end="169:18">3</literal></expr>)</condition> <block pos:start="169:21" pos:end="175:9">{<block_content pos:start="171:13" pos:end="173:38">

            <expr_stmt pos:start="171:13" pos:end="171:42"><expr pos:start="171:13" pos:end="171:41"><call pos:start="171:13" pos:end="171:41"><name pos:start="171:13" pos:end="171:32">bytestream2_put_be24</name><argument_list pos:start="171:33" pos:end="171:41">(<argument pos:start="171:34" pos:end="171:37"><expr pos:start="171:34" pos:end="171:37"><operator pos:start="171:34" pos:end="171:34">&amp;</operator><name pos:start="171:35" pos:end="171:37">pbc</name></expr></argument>, <argument pos:start="171:40" pos:end="171:40"><expr pos:start="171:40" pos:end="171:40"><literal type="number" pos:start="171:40" pos:end="171:40">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:38"><expr pos:start="173:13" pos:end="173:37"><call pos:start="173:13" pos:end="173:37"><name pos:start="173:13" pos:end="173:28">bytestream2_skip</name><argument_list pos:start="173:29" pos:end="173:37">(<argument pos:start="173:30" pos:end="173:33"><expr pos:start="173:30" pos:end="173:33"><operator pos:start="173:30" pos:end="173:30">&amp;</operator><name pos:start="173:31" pos:end="173:33">gbc</name></expr></argument>, <argument pos:start="173:36" pos:end="173:36"><expr pos:start="173:36" pos:end="173:36"><literal type="number" pos:start="173:36" pos:end="173:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="175:11" pos:end="177:67">else<block type="pseudo" pos:start="177:13" pos:end="177:67"><block_content pos:start="177:13" pos:end="177:67">

            <expr_stmt pos:start="177:13" pos:end="177:67"><expr pos:start="177:13" pos:end="177:66"><call pos:start="177:13" pos:end="177:66"><name pos:start="177:13" pos:end="177:32">bytestream2_put_byte</name><argument_list pos:start="177:33" pos:end="177:66">(<argument pos:start="177:34" pos:end="177:37"><expr pos:start="177:34" pos:end="177:37"><operator pos:start="177:34" pos:end="177:34">&amp;</operator><name pos:start="177:35" pos:end="177:37">pbc</name></expr></argument>, <argument pos:start="177:40" pos:end="177:65"><expr pos:start="177:40" pos:end="177:65"><call pos:start="177:40" pos:end="177:65"><name pos:start="177:40" pos:end="177:59">bytestream2_get_byte</name><argument_list pos:start="177:60" pos:end="177:65">(<argument pos:start="177:61" pos:end="177:64"><expr pos:start="177:61" pos:end="177:64"><operator pos:start="177:61" pos:end="177:61">&amp;</operator><name pos:start="177:62" pos:end="177:64">gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="183:5" pos:end="183:40"><expr pos:start="183:5" pos:end="183:39"><name pos:start="183:5" pos:end="183:12">vps_size</name> <operator pos:start="183:14" pos:end="183:14">=</operator> <call pos:start="183:16" pos:end="183:39"><name pos:start="183:16" pos:end="183:33">bytestream2_tell_p</name><argument_list pos:start="183:34" pos:end="183:39">(<argument pos:start="183:35" pos:end="183:38"><expr pos:start="183:35" pos:end="183:38"><operator pos:start="183:35" pos:end="183:35">&amp;</operator><name pos:start="183:36" pos:end="183:38">pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:96"><expr pos:start="185:5" pos:end="185:95"><name pos:start="185:5" pos:end="185:17">new_extradata</name> <operator pos:start="185:19" pos:end="185:19">=</operator> <call pos:start="185:21" pos:end="185:95"><name pos:start="185:21" pos:end="185:30">av_mallocz</name><argument_list pos:start="185:31" pos:end="185:95">(<argument pos:start="185:32" pos:end="185:94"><expr pos:start="185:32" pos:end="185:94"><name pos:start="185:32" pos:end="185:39">vps_size</name> <operator pos:start="185:41" pos:end="185:41">+</operator> <name pos:start="185:43" pos:end="185:63"><name pos:start="185:43" pos:end="185:47">avctx</name><operator pos:start="185:48" pos:end="185:49">-&gt;</operator><name pos:start="185:50" pos:end="185:63">extradata_size</name></name> <operator pos:start="185:65" pos:end="185:65">+</operator> <name pos:start="185:67" pos:end="185:94">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="189:31"><if pos:start="187:5" pos:end="189:31">if <condition pos:start="187:8" pos:end="187:23">(<expr pos:start="187:9" pos:end="187:22"><operator pos:start="187:9" pos:end="187:9">!</operator><name pos:start="187:10" pos:end="187:22">new_extradata</name></expr>)</condition><block type="pseudo" pos:start="189:9" pos:end="189:31"><block_content pos:start="189:9" pos:end="189:31">

        <return pos:start="189:9" pos:end="189:31">return <expr pos:start="189:16" pos:end="189:30"><call pos:start="189:16" pos:end="189:30"><name pos:start="189:16" pos:end="189:22">AVERROR</name><argument_list pos:start="189:23" pos:end="189:30">(<argument pos:start="189:24" pos:end="189:29"><expr pos:start="189:24" pos:end="189:29"><name pos:start="189:24" pos:end="189:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:45"><expr pos:start="191:5" pos:end="191:44"><call pos:start="191:5" pos:end="191:44"><name pos:start="191:5" pos:end="191:10">memcpy</name><argument_list pos:start="191:11" pos:end="191:44">(<argument pos:start="191:12" pos:end="191:24"><expr pos:start="191:12" pos:end="191:24"><name pos:start="191:12" pos:end="191:24">new_extradata</name></expr></argument>, <argument pos:start="191:27" pos:end="191:33"><expr pos:start="191:27" pos:end="191:33"><name pos:start="191:27" pos:end="191:33">vps_buf</name></expr></argument>, <argument pos:start="191:36" pos:end="191:43"><expr pos:start="191:36" pos:end="191:43"><name pos:start="191:36" pos:end="191:43">vps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:78"><expr pos:start="193:5" pos:end="193:77"><call pos:start="193:5" pos:end="193:77"><name pos:start="193:5" pos:end="193:10">memcpy</name><argument_list pos:start="193:11" pos:end="193:77">(<argument pos:start="193:12" pos:end="193:35"><expr pos:start="193:12" pos:end="193:35"><name pos:start="193:12" pos:end="193:24">new_extradata</name> <operator pos:start="193:26" pos:end="193:26">+</operator> <name pos:start="193:28" pos:end="193:35">vps_size</name></expr></argument>, <argument pos:start="193:38" pos:end="193:53"><expr pos:start="193:38" pos:end="193:53"><name pos:start="193:38" pos:end="193:53"><name pos:start="193:38" pos:end="193:42">avctx</name><operator pos:start="193:43" pos:end="193:44">-&gt;</operator><name pos:start="193:45" pos:end="193:53">extradata</name></name></expr></argument>, <argument pos:start="193:56" pos:end="193:76"><expr pos:start="193:56" pos:end="193:76"><name pos:start="193:56" pos:end="193:76"><name pos:start="193:56" pos:end="193:60">avctx</name><operator pos:start="193:61" pos:end="193:62">-&gt;</operator><name pos:start="193:63" pos:end="193:76">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:32"><expr pos:start="197:5" pos:end="197:31"><call pos:start="197:5" pos:end="197:31"><name pos:start="197:5" pos:end="197:12">av_freep</name><argument_list pos:start="197:13" pos:end="197:31">(<argument pos:start="197:14" pos:end="197:30"><expr pos:start="197:14" pos:end="197:30"><operator pos:start="197:14" pos:end="197:14">&amp;</operator><name pos:start="197:15" pos:end="197:30"><name pos:start="197:15" pos:end="197:19">avctx</name><operator pos:start="197:20" pos:end="197:21">-&gt;</operator><name pos:start="197:22" pos:end="197:30">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:43"><expr pos:start="199:5" pos:end="199:42"><name pos:start="199:5" pos:end="199:20"><name pos:start="199:5" pos:end="199:9">avctx</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:20">extradata</name></name>       <operator pos:start="199:28" pos:end="199:28">=</operator> <name pos:start="199:30" pos:end="199:42">new_extradata</name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:38"><expr pos:start="201:5" pos:end="201:37"><name pos:start="201:5" pos:end="201:25"><name pos:start="201:5" pos:end="201:9">avctx</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:25">extradata_size</name></name> <operator pos:start="201:27" pos:end="201:28">+=</operator> <name pos:start="201:30" pos:end="201:37">vps_size</name></expr>;</expr_stmt>



    <return pos:start="205:5" pos:end="205:13">return <expr pos:start="205:12" pos:end="205:12"><literal type="number" pos:start="205:12" pos:end="205:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
