<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13791.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">x86_cpu_common_class_init</name><parameter_list pos:start="1:38" pos:end="1:66">(<parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:49">ObjectClass</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">oc</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="41:1">{<block_content pos:start="3:5" pos:end="40:42">
    <decl_stmt pos:start="3:5" pos:end="3:41"><decl pos:start="3:5" pos:end="3:40"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:15">X86CPUClass</name> <modifier pos:start="3:17" pos:end="3:17">*</modifier></type><name pos:start="3:18" pos:end="3:20">xcc</name> <init pos:start="3:22" pos:end="3:40">= <expr pos:start="3:24" pos:end="3:40"><call pos:start="3:24" pos:end="3:40"><name pos:start="3:24" pos:end="3:36">X86_CPU_CLASS</name><argument_list pos:start="3:37" pos:end="3:40">(<argument pos:start="3:38" pos:end="3:39"><expr pos:start="3:38" pos:end="3:39"><name pos:start="3:38" pos:end="3:39">oc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:33"><decl pos:start="4:5" pos:end="4:32"><type pos:start="4:5" pos:end="4:14"><name pos:start="4:5" pos:end="4:12">CPUClass</name> <modifier pos:start="4:14" pos:end="4:14">*</modifier></type><name pos:start="4:15" pos:end="4:16">cc</name> <init pos:start="4:18" pos:end="4:32">= <expr pos:start="4:20" pos:end="4:32"><call pos:start="4:20" pos:end="4:32"><name pos:start="4:20" pos:end="4:28">CPU_CLASS</name><argument_list pos:start="4:29" pos:end="4:32">(<argument pos:start="4:30" pos:end="4:31"><expr pos:start="4:30" pos:end="4:31"><name pos:start="4:30" pos:end="4:31">oc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">DeviceClass</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">dc</name> <init pos:start="5:21" pos:end="5:38">= <expr pos:start="5:23" pos:end="5:38"><call pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:34">DEVICE_CLASS</name><argument_list pos:start="5:35" pos:end="5:38">(<argument pos:start="5:36" pos:end="5:37"><expr pos:start="5:36" pos:end="5:37"><name pos:start="5:36" pos:end="5:37">oc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:38"><expr pos:start="6:5" pos:end="6:37"><name pos:start="6:5" pos:end="6:23"><name pos:start="6:5" pos:end="6:7">xcc</name><operator pos:start="6:8" pos:end="6:9">-&gt;</operator><name pos:start="6:10" pos:end="6:23">parent_realize</name></name> <operator pos:start="6:25" pos:end="6:25">=</operator> <name pos:start="6:27" pos:end="6:37"><name pos:start="6:27" pos:end="6:28">dc</name><operator pos:start="6:29" pos:end="6:30">-&gt;</operator><name pos:start="6:31" pos:end="6:37">realize</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:36"><expr pos:start="7:5" pos:end="7:35"><name pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:6">dc</name><operator pos:start="7:7" pos:end="7:8">-&gt;</operator><name pos:start="7:9" pos:end="7:15">realize</name></name> <operator pos:start="7:17" pos:end="7:17">=</operator> <name pos:start="7:19" pos:end="7:35">x86_cpu_realizefn</name></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:35"><expr pos:start="8:5" pos:end="8:34"><name pos:start="8:5" pos:end="8:13"><name pos:start="8:5" pos:end="8:6">dc</name><operator pos:start="8:7" pos:end="8:8">-&gt;</operator><name pos:start="8:9" pos:end="8:13">props</name></name> <operator pos:start="8:15" pos:end="8:15">=</operator> <name pos:start="8:17" pos:end="8:34">x86_cpu_properties</name></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:34"><expr pos:start="9:5" pos:end="9:33"><name pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:7">xcc</name><operator pos:start="9:8" pos:end="9:9">-&gt;</operator><name pos:start="9:10" pos:end="9:21">parent_reset</name></name> <operator pos:start="9:23" pos:end="9:23">=</operator> <name pos:start="9:25" pos:end="9:33"><name pos:start="9:25" pos:end="9:26">cc</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:33">reset</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:30"><expr pos:start="10:5" pos:end="10:29"><name pos:start="10:5" pos:end="10:13"><name pos:start="10:5" pos:end="10:6">cc</name><operator pos:start="10:7" pos:end="10:8">-&gt;</operator><name pos:start="10:9" pos:end="10:13">reset</name></name> <operator pos:start="10:15" pos:end="10:15">=</operator> <name pos:start="10:17" pos:end="10:29">x86_cpu_reset</name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:56"><expr pos:start="11:5" pos:end="11:55"><name pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:6">cc</name><operator pos:start="11:7" pos:end="11:8">-&gt;</operator><name pos:start="11:9" pos:end="11:24">reset_dump_flags</name></name> <operator pos:start="11:26" pos:end="11:26">=</operator> <name pos:start="11:28" pos:end="11:39">CPU_DUMP_FPU</name> <operator pos:start="11:41" pos:end="11:41">|</operator> <name pos:start="11:43" pos:end="11:55">CPU_DUMP_CCOP</name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:46"><expr pos:start="12:5" pos:end="12:45"><name pos:start="12:5" pos:end="12:21"><name pos:start="12:5" pos:end="12:6">cc</name><operator pos:start="12:7" pos:end="12:8">-&gt;</operator><name pos:start="12:9" pos:end="12:21">class_by_name</name></name> <operator pos:start="12:23" pos:end="12:23">=</operator> <name pos:start="12:25" pos:end="12:45">x86_cpu_class_by_name</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:50"><expr pos:start="13:5" pos:end="13:49"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:6">cc</name><operator pos:start="13:7" pos:end="13:8">-&gt;</operator><name pos:start="13:9" pos:end="13:22">parse_features</name></name> <operator pos:start="13:24" pos:end="13:24">=</operator> <name pos:start="13:26" pos:end="13:49">x86_cpu_parse_featurestr</name></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:36"><expr pos:start="14:5" pos:end="14:35"><name pos:start="14:5" pos:end="14:16"><name pos:start="14:5" pos:end="14:6">cc</name><operator pos:start="14:7" pos:end="14:8">-&gt;</operator><name pos:start="14:9" pos:end="14:16">has_work</name></name> <operator pos:start="14:18" pos:end="14:18">=</operator> <name pos:start="14:20" pos:end="14:35">x86_cpu_has_work</name></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:44"><expr pos:start="15:5" pos:end="15:43"><name pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:6">cc</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:20">do_interrupt</name></name> <operator pos:start="15:22" pos:end="15:22">=</operator> <name pos:start="15:24" pos:end="15:43">x86_cpu_do_interrupt</name></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:52"><expr pos:start="16:5" pos:end="16:51"><name pos:start="16:5" pos:end="16:26"><name pos:start="16:5" pos:end="16:6">cc</name><operator pos:start="16:7" pos:end="16:8">-&gt;</operator><name pos:start="16:9" pos:end="16:26">cpu_exec_interrupt</name></name> <operator pos:start="16:28" pos:end="16:28">=</operator> <name pos:start="16:30" pos:end="16:51">x86_cpu_exec_interrupt</name></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:6">cc</name><operator pos:start="17:7" pos:end="17:8">-&gt;</operator><name pos:start="17:9" pos:end="17:18">dump_state</name></name> <operator pos:start="17:20" pos:end="17:20">=</operator> <name pos:start="17:22" pos:end="17:39">x86_cpu_dump_state</name></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:32"><expr pos:start="18:5" pos:end="18:31"><name pos:start="18:5" pos:end="18:14"><name pos:start="18:5" pos:end="18:6">cc</name><operator pos:start="18:7" pos:end="18:8">-&gt;</operator><name pos:start="18:9" pos:end="18:14">set_pc</name></name> <operator pos:start="18:16" pos:end="18:16">=</operator> <name pos:start="18:18" pos:end="18:31">x86_cpu_set_pc</name></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:58"><expr pos:start="19:5" pos:end="19:57"><name pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:6">cc</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:27">synchronize_from_tb</name></name> <operator pos:start="19:29" pos:end="19:29">=</operator> <name pos:start="19:31" pos:end="19:57">x86_cpu_synchronize_from_tb</name></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:54"><expr pos:start="20:5" pos:end="20:53"><name pos:start="20:5" pos:end="20:25"><name pos:start="20:5" pos:end="20:6">cc</name><operator pos:start="20:7" pos:end="20:8">-&gt;</operator><name pos:start="20:9" pos:end="20:25">gdb_read_register</name></name> <operator pos:start="20:27" pos:end="20:27">=</operator> <name pos:start="20:29" pos:end="20:53">x86_cpu_gdb_read_register</name></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:56"><expr pos:start="21:5" pos:end="21:55"><name pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:6">cc</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:26">gdb_write_register</name></name> <operator pos:start="21:28" pos:end="21:28">=</operator> <name pos:start="21:30" pos:end="21:55">x86_cpu_gdb_write_register</name></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:42"><expr pos:start="22:5" pos:end="22:41"><name pos:start="22:5" pos:end="22:19"><name pos:start="22:5" pos:end="22:6">cc</name><operator pos:start="22:7" pos:end="22:8">-&gt;</operator><name pos:start="22:9" pos:end="22:19">get_arch_id</name></name> <operator pos:start="22:21" pos:end="22:21">=</operator> <name pos:start="22:23" pos:end="22:41">x86_cpu_get_arch_id</name></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="25:0"><expr pos:start="23:5" pos:end="23:55"><name pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:6">cc</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:26">get_paging_enabled</name></name> <operator pos:start="23:28" pos:end="23:28">=</operator> <name pos:start="23:30" pos:end="23:55">x86_cpu_get_paging_enabled</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="24:1" pos:end="24:23">#<cpp:directive pos:start="24:2" pos:end="24:6">ifdef</cpp:directive> <name pos:start="24:8" pos:end="24:23">CONFIG_USER_ONLY</name></cpp:ifdef>
    <expr_stmt pos:start="25:5" pos:end="27:0"><expr pos:start="25:5" pos:end="25:51"><name pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:6">cc</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:24">handle_mmu_fault</name></name> <operator pos:start="25:26" pos:end="25:26">=</operator> <name pos:start="25:28" pos:end="25:51">x86_cpu_handle_mmu_fault</name></expr>;</expr_stmt>
<cpp:else pos:start="26:1" pos:end="26:5">#<cpp:directive pos:start="26:2" pos:end="26:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="27:5" pos:end="27:56"><expr pos:start="27:5" pos:end="27:55"><name pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:6">cc</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:26">get_memory_mapping</name></name> <operator pos:start="27:28" pos:end="27:28">=</operator> <name pos:start="27:30" pos:end="27:55">x86_cpu_get_memory_mapping</name></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:58"><expr pos:start="28:5" pos:end="28:57"><name pos:start="28:5" pos:end="28:27"><name pos:start="28:5" pos:end="28:6">cc</name><operator pos:start="28:7" pos:end="28:8">-&gt;</operator><name pos:start="28:9" pos:end="28:27">get_phys_page_debug</name></name> <operator pos:start="28:29" pos:end="28:29">=</operator> <name pos:start="28:31" pos:end="28:57">x86_cpu_get_phys_page_debug</name></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:6">cc</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:24">write_elf64_note</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <name pos:start="29:28" pos:end="29:51">x86_cpu_write_elf64_note</name></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:60"><expr pos:start="30:5" pos:end="30:59"><name pos:start="30:5" pos:end="30:28"><name pos:start="30:5" pos:end="30:6">cc</name><operator pos:start="30:7" pos:end="30:8">-&gt;</operator><name pos:start="30:9" pos:end="30:28">write_elf64_qemunote</name></name> <operator pos:start="30:30" pos:end="30:30">=</operator> <name pos:start="30:32" pos:end="30:59">x86_cpu_write_elf64_qemunote</name></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:24"><name pos:start="31:5" pos:end="31:6">cc</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:24">write_elf32_note</name></name> <operator pos:start="31:26" pos:end="31:26">=</operator> <name pos:start="31:28" pos:end="31:51">x86_cpu_write_elf32_note</name></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:60"><expr pos:start="32:5" pos:end="32:59"><name pos:start="32:5" pos:end="32:28"><name pos:start="32:5" pos:end="32:6">cc</name><operator pos:start="32:7" pos:end="32:8">-&gt;</operator><name pos:start="32:9" pos:end="32:28">write_elf32_qemunote</name></name> <operator pos:start="32:30" pos:end="32:30">=</operator> <name pos:start="32:32" pos:end="32:59">x86_cpu_write_elf32_qemunote</name></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="35:0"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:6">cc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:12">vmsd</name></name> <operator pos:start="33:14" pos:end="33:14">=</operator> <operator pos:start="33:16" pos:end="33:16">&amp;</operator><name pos:start="33:17" pos:end="33:31">vmstate_x86_cpu</name></expr>;</expr_stmt>
<cpp:endif pos:start="34:1" pos:end="34:6">#<cpp:directive pos:start="34:2" pos:end="34:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="35:5" pos:end="37:0"><expr pos:start="35:5" pos:end="35:48"><name pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:6">cc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:25">gdb_num_core_regs</name></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:39">CPU_NB_REGS</name> <operator pos:start="35:41" pos:end="35:41">*</operator> <literal type="number" pos:start="35:43" pos:end="35:45">2</literal> <operator pos:start="35:45" pos:end="35:45">+</operator> <literal type="number" pos:start="35:47" pos:end="35:48">25</literal></expr>;</expr_stmt>
<cpp:ifndef pos:start="36:1" pos:end="36:24">#<cpp:directive pos:start="36:2" pos:end="36:7">ifndef</cpp:directive> <name pos:start="36:9" pos:end="36:24">CONFIG_USER_ONLY</name></cpp:ifndef>
    <expr_stmt pos:start="37:5" pos:end="39:0"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:6">cc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:26">debug_excp_handler</name></name> <operator pos:start="37:28" pos:end="37:28">=</operator> <name pos:start="37:30" pos:end="37:47">breakpoint_handler</name></expr>;</expr_stmt>
<cpp:endif pos:start="38:1" pos:end="38:6">#<cpp:directive pos:start="38:2" pos:end="38:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="39:5" pos:end="39:44"><expr pos:start="39:5" pos:end="39:43"><name pos:start="39:5" pos:end="39:22"><name pos:start="39:5" pos:end="39:6">cc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:22">cpu_exec_enter</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:43">x86_cpu_exec_enter</name></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:42"><expr pos:start="40:5" pos:end="40:41"><name pos:start="40:5" pos:end="40:21"><name pos:start="40:5" pos:end="40:6">cc</name><operator pos:start="40:7" pos:end="40:8">-&gt;</operator><name pos:start="40:9" pos:end="40:21">cpu_exec_exit</name></name> <operator pos:start="40:23" pos:end="40:23">=</operator> <name pos:start="40:25" pos:end="40:41">x86_cpu_exec_exit</name></expr>;</expr_stmt>
</block_content>}</block></function></unit>
