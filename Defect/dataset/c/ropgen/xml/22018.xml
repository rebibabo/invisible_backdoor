<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22018.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">bool</name></type> <name pos:start="1:20" pos:end="1:34">cpu_handle_halt</name><parameter_list pos:start="1:35" pos:end="1:49">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:45"><name pos:start="1:36" pos:end="1:43">CPUState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:17">

    <if_stmt pos:start="5:5" pos:end="39:5"><if pos:start="5:5" pos:end="39:5">if <condition pos:start="5:8" pos:end="5:20">(<expr pos:start="5:9" pos:end="5:19"><name pos:start="5:9" pos:end="5:19"><name pos:start="5:9" pos:end="5:11">cpu</name><operator pos:start="5:12" pos:end="5:13">-&gt;</operator><name pos:start="5:14" pos:end="5:19">halted</name></name></expr>)</condition> <block pos:start="5:22" pos:end="39:5">{<block_content pos:start="9:9" pos:end="37:24">

<cpp:if pos:start="7:1" pos:end="7:54">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:54"><call pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:11">defined</name><argument_list pos:start="7:12" pos:end="7:24">(<argument pos:start="7:13" pos:end="7:23"><expr pos:start="7:13" pos:end="7:23"><name pos:start="7:13" pos:end="7:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="7:26" pos:end="7:27">&amp;&amp;</operator> <operator pos:start="7:29" pos:end="7:29">!</operator><call pos:start="7:30" pos:end="7:54"><name pos:start="7:30" pos:end="7:36">defined</name><argument_list pos:start="7:37" pos:end="7:54">(<argument pos:start="7:38" pos:end="7:53"><expr pos:start="7:38" pos:end="7:53"><name pos:start="7:38" pos:end="7:53">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="9:9" pos:end="26:0"><if pos:start="9:9" pos:end="26:0">if <condition pos:start="9:12" pos:end="11:34">(<expr pos:start="9:13" pos:end="11:33"><operator pos:start="9:13" pos:end="9:13">(</operator><name pos:start="9:14" pos:end="9:35"><name pos:start="9:14" pos:end="9:16">cpu</name><operator pos:start="9:17" pos:end="9:18">-&gt;</operator><name pos:start="9:19" pos:end="9:35">interrupt_request</name></name> <operator pos:start="9:37" pos:end="9:37">&amp;</operator> <name pos:start="9:39" pos:end="9:56">CPU_INTERRUPT_POLL</name><operator pos:start="9:57" pos:end="9:57">)</operator>

            <operator pos:start="11:13" pos:end="11:14">&amp;&amp;</operator> <call pos:start="11:16" pos:end="11:33"><name pos:start="11:16" pos:end="11:31">replay_interrupt</name><argument_list pos:start="11:32" pos:end="11:33">()</argument_list></call></expr>)</condition> <block pos:start="11:36" pos:end="26:0">{<block_content pos:start="13:13" pos:end="21:41">

            <decl_stmt pos:start="13:13" pos:end="13:43"><decl pos:start="13:13" pos:end="13:42"><type pos:start="13:13" pos:end="13:20"><name pos:start="13:13" pos:end="13:18">X86CPU</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:27">x86_cpu</name> <init pos:start="13:29" pos:end="13:42">= <expr pos:start="13:31" pos:end="13:42"><call pos:start="13:31" pos:end="13:42"><name pos:start="13:31" pos:end="13:37">X86_CPU</name><argument_list pos:start="13:38" pos:end="13:42">(<argument pos:start="13:39" pos:end="13:41"><expr pos:start="13:39" pos:end="13:41"><name pos:start="13:39" pos:end="13:41">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="15:13" pos:end="15:39"><expr pos:start="15:13" pos:end="15:38"><call pos:start="15:13" pos:end="15:38"><name pos:start="15:13" pos:end="15:36">qemu_mutex_lock_iothread</name><argument_list pos:start="15:37" pos:end="15:38">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="17:13" pos:end="17:47"><expr pos:start="17:13" pos:end="17:46"><call pos:start="17:13" pos:end="17:46"><name pos:start="17:13" pos:end="17:25">apic_poll_irq</name><argument_list pos:start="17:26" pos:end="17:46">(<argument pos:start="17:27" pos:end="17:45"><expr pos:start="17:27" pos:end="17:45"><name pos:start="17:27" pos:end="17:45"><name pos:start="17:27" pos:end="17:33">x86_cpu</name><operator pos:start="17:34" pos:end="17:35">-&gt;</operator><name pos:start="17:36" pos:end="17:45">apic_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="19:13" pos:end="19:57"><expr pos:start="19:13" pos:end="19:56"><call pos:start="19:13" pos:end="19:56"><name pos:start="19:13" pos:end="19:31">cpu_reset_interrupt</name><argument_list pos:start="19:32" pos:end="19:56">(<argument pos:start="19:33" pos:end="19:35"><expr pos:start="19:33" pos:end="19:35"><name pos:start="19:33" pos:end="19:35">cpu</name></expr></argument>, <argument pos:start="19:38" pos:end="19:55"><expr pos:start="19:38" pos:end="19:55"><name pos:start="19:38" pos:end="19:55">CPU_INTERRUPT_POLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:41"><expr pos:start="21:13" pos:end="21:40"><call pos:start="21:13" pos:end="21:40"><name pos:start="21:13" pos:end="21:38">qemu_mutex_unlock_iothread</name><argument_list pos:start="21:39" pos:end="21:40">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:31">(<expr pos:start="27:13" pos:end="27:30"><operator pos:start="27:13" pos:end="27:13">!</operator><call pos:start="27:14" pos:end="27:30"><name pos:start="27:14" pos:end="27:25">cpu_has_work</name><argument_list pos:start="27:26" pos:end="27:30">(<argument pos:start="27:27" pos:end="27:29"><expr pos:start="27:27" pos:end="27:29"><name pos:start="27:27" pos:end="27:29">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:33" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:24">

            <expr_stmt pos:start="29:13" pos:end="29:31"><expr pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:23">current_cpu</name> <operator pos:start="29:25" pos:end="29:25">=</operator> <name pos:start="29:27" pos:end="29:30">NULL</name></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:24">return <expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">true</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:11">cpu</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:19">halted</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <literal type="number" pos:start="37:23" pos:end="37:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="43:5" pos:end="43:17">return <expr pos:start="43:12" pos:end="43:16"><name pos:start="43:12" pos:end="43:16">false</name></expr>;</return>

</block_content>}</block></function>
</unit>
