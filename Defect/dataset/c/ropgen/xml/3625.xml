<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3625.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">unsigned</name></type> <name pos:start="1:10" pos:end="1:31">ff_els_decode_unsigned</name><parameter_list pos:start="1:32" pos:end="1:68">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:41">ElsDecCtx</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">ctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:67"><decl pos:start="1:49" pos:end="1:67"><type pos:start="1:49" pos:end="1:67"><name pos:start="1:49" pos:end="1:63">ElsUnsignedRung</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">ur</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:28">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">n</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">r</name></decl>, <decl pos:start="5:18" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:20">bit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">ElsRungNode</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:26">rung_node</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:17">(<expr pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:11">ctx</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:16">err</name></name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:29">/* decode unary prefix */</comment>

    <for pos:start="19:5" pos:end="23:18">for <control pos:start="19:9" pos:end="19:47">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">n</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:42"><expr pos:start="19:17" pos:end="19:41"><name pos:start="19:17" pos:end="19:17">n</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:37">ELS_EXPGOLOMB_LEN</name> <operator pos:start="19:39" pos:end="19:39">+</operator> <literal type="number" pos:start="19:41" pos:end="19:41">1</literal></expr>;</condition> <incr pos:start="19:44" pos:end="19:46"><expr pos:start="19:44" pos:end="19:46"><name pos:start="19:44" pos:end="19:44">n</name><operator pos:start="19:45" pos:end="19:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="21:9" pos:end="23:18"><block_content pos:start="21:9" pos:end="23:18">

        <if_stmt pos:start="21:9" pos:end="23:18"><if pos:start="21:9" pos:end="23:18">if <condition pos:start="21:12" pos:end="21:56">(<expr pos:start="21:13" pos:end="21:55"><call pos:start="21:13" pos:end="21:55"><name pos:start="21:13" pos:end="21:29">ff_els_decode_bit</name><argument_list pos:start="21:30" pos:end="21:55">(<argument pos:start="21:31" pos:end="21:33"><expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">ctx</name></expr></argument>, <argument pos:start="21:36" pos:end="21:54"><expr pos:start="21:36" pos:end="21:54"><operator pos:start="21:36" pos:end="21:36">&amp;</operator><name pos:start="21:37" pos:end="21:54"><name pos:start="21:37" pos:end="21:38">ur</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:51">prefix_rung</name><index pos:start="21:52" pos:end="21:54">[<expr pos:start="21:53" pos:end="21:53"><name pos:start="21:53" pos:end="21:53">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:18"><block_content pos:start="23:13" pos:end="23:18">

            <break pos:start="23:13" pos:end="23:18">break;</break></block_content></block></if></if_stmt></block_content></block></for>



    <comment type="block" pos:start="27:5" pos:end="27:40">/* handle the error/overflow case */</comment>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:43">(<expr pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:11">ctx</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:16">err</name></name> <operator pos:start="29:18" pos:end="29:19">||</operator> <name pos:start="29:21" pos:end="29:21">n</name> <operator pos:start="29:23" pos:end="29:24">&gt;=</operator> <name pos:start="29:26" pos:end="29:42">ELS_EXPGOLOMB_LEN</name></expr>)</condition> <block pos:start="29:45" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:17">

        <expr_stmt pos:start="31:9" pos:end="31:38"><expr pos:start="31:9" pos:end="31:37"><name pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:11">ctx</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:16">err</name></name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:37"><name pos:start="31:20" pos:end="31:26">AVERROR</name><argument_list pos:start="31:27" pos:end="31:37">(<argument pos:start="31:28" pos:end="31:36"><expr pos:start="31:28" pos:end="31:36"><name pos:start="31:28" pos:end="31:36">EOVERFLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:30">/* handle the zero case */</comment>

    <if_stmt pos:start="41:5" pos:end="43:17"><if pos:start="41:5" pos:end="43:17">if <condition pos:start="41:8" pos:end="41:11">(<expr pos:start="41:9" pos:end="41:10"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:10">n</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:17"><block_content pos:start="43:9" pos:end="43:17">

        <return pos:start="43:9" pos:end="43:17">return <expr pos:start="43:16" pos:end="43:16"><literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:37">/* initialize probability tree */</comment>

    <if_stmt pos:start="49:5" pos:end="67:5"><if pos:start="49:5" pos:end="67:5">if <condition pos:start="49:8" pos:end="49:27">(<expr pos:start="49:9" pos:end="49:26"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:26"><name pos:start="49:10" pos:end="49:11">ur</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:26">rem_rung_list</name></name></expr>)</condition> <block pos:start="49:29" pos:end="67:5">{<block_content pos:start="51:9" pos:end="65:47">

        <expr_stmt pos:start="51:9" pos:end="51:57"><expr pos:start="51:9" pos:end="51:56"><name pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:10">ur</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:25">rem_rung_list</name></name> <operator pos:start="51:27" pos:end="51:27">=</operator> <call pos:start="51:29" pos:end="51:56"><name pos:start="51:29" pos:end="51:38">av_realloc</name><argument_list pos:start="51:39" pos:end="51:56">(<argument pos:start="51:40" pos:end="51:43"><expr pos:start="51:40" pos:end="51:43"><name pos:start="51:40" pos:end="51:43">NULL</name></expr></argument>, <argument pos:start="51:46" pos:end="51:55"><expr pos:start="51:46" pos:end="51:55"><name pos:start="51:46" pos:end="51:55">RUNG_SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:31">(<expr pos:start="53:13" pos:end="53:30"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:30"><name pos:start="53:14" pos:end="53:15">ur</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:30">rem_rung_list</name></name></expr>)</condition> <block pos:start="53:33" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:21">

            <expr_stmt pos:start="55:13" pos:end="55:39"><expr pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:15">ctx</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:20">err</name></name> <operator pos:start="55:22" pos:end="55:22">=</operator> <call pos:start="55:24" pos:end="55:38"><name pos:start="55:24" pos:end="55:30">AVERROR</name><argument_list pos:start="55:31" pos:end="55:38">(<argument pos:start="55:32" pos:end="55:37"><expr pos:start="55:32" pos:end="55:37"><name pos:start="55:32" pos:end="55:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:21">return <expr pos:start="57:20" pos:end="57:20"><literal type="number" pos:start="57:20" pos:end="57:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:49"><expr pos:start="61:9" pos:end="61:48"><call pos:start="61:9" pos:end="61:48"><name pos:start="61:9" pos:end="61:14">memset</name><argument_list pos:start="61:15" pos:end="61:48">(<argument pos:start="61:16" pos:end="61:32"><expr pos:start="61:16" pos:end="61:32"><name pos:start="61:16" pos:end="61:32"><name pos:start="61:16" pos:end="61:17">ur</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:32">rem_rung_list</name></name></expr></argument>, <argument pos:start="61:35" pos:end="61:35"><expr pos:start="61:35" pos:end="61:35"><literal type="number" pos:start="61:35" pos:end="61:35">0</literal></expr></argument>, <argument pos:start="61:38" pos:end="61:47"><expr pos:start="61:38" pos:end="61:47"><name pos:start="61:38" pos:end="61:47">RUNG_SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:10">ur</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:26">rung_list_size</name></name> <operator pos:start="63:28" pos:end="63:28">=</operator> <name pos:start="63:30" pos:end="63:39">RUNG_SPACE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:47"><expr pos:start="65:9" pos:end="65:46"><name pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:10">ur</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:23">avail_index</name></name>    <operator pos:start="65:28" pos:end="65:28">=</operator> <name pos:start="65:30" pos:end="65:46">ELS_EXPGOLOMB_LEN</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:30">/* decode the remainder */</comment>

    <for pos:start="73:5" pos:end="139:5">for <control pos:start="73:9" pos:end="73:43">(<init pos:start="73:10" pos:end="73:31"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr><operator pos:start="73:15" pos:end="73:15">,</operator> <expr pos:start="73:17" pos:end="73:21"><name pos:start="73:17" pos:end="73:17">r</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <literal type="number" pos:start="73:21" pos:end="73:21">0</literal></expr><operator pos:start="73:22" pos:end="73:22">,</operator> <expr pos:start="73:24" pos:end="73:30"><name pos:start="73:24" pos:end="73:26">bit</name> <operator pos:start="73:28" pos:end="73:28">=</operator> <literal type="number" pos:start="73:30" pos:end="73:30">0</literal></expr>;</init> <condition pos:start="73:33" pos:end="73:38"><expr pos:start="73:33" pos:end="73:37"><name pos:start="73:33" pos:end="73:33">i</name> <operator pos:start="73:35" pos:end="73:35">&lt;</operator> <name pos:start="73:37" pos:end="73:37">n</name></expr>;</condition> <incr pos:start="73:40" pos:end="73:42"><expr pos:start="73:40" pos:end="73:42"><name pos:start="73:40" pos:end="73:40">i</name><operator pos:start="73:41" pos:end="73:42">++</operator></expr></incr>)</control> <block pos:start="73:45" pos:end="139:5">{<block_content pos:start="75:9" pos:end="137:27">

        <if_stmt pos:start="75:9" pos:end="125:9"><if pos:start="75:9" pos:end="77:46">if <condition pos:start="75:12" pos:end="75:15">(<expr pos:start="75:13" pos:end="75:14"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:14">i</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:46"><block_content pos:start="77:13" pos:end="77:46">

            <expr_stmt pos:start="77:13" pos:end="77:46"><expr pos:start="77:13" pos:end="77:45"><name pos:start="77:13" pos:end="77:21">rung_node</name> <operator pos:start="77:23" pos:end="77:23">=</operator> <operator pos:start="77:25" pos:end="77:25">&amp;</operator><name pos:start="77:26" pos:end="77:45"><name pos:start="77:26" pos:end="77:27">ur</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:42">rem_rung_list</name><index pos:start="77:43" pos:end="77:45">[<expr pos:start="77:44" pos:end="77:44"><name pos:start="77:44" pos:end="77:44">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="79:9" pos:end="125:9">else <block pos:start="79:14" pos:end="125:9">{<block_content pos:start="81:13" pos:end="123:72">

            <if_stmt pos:start="81:13" pos:end="121:13"><if pos:start="81:13" pos:end="121:13">if <condition pos:start="81:16" pos:end="81:39">(<expr pos:start="81:17" pos:end="81:38"><operator pos:start="81:17" pos:end="81:17">!</operator><name pos:start="81:18" pos:end="81:38"><name pos:start="81:18" pos:end="81:26">rung_node</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:38">next_index</name></name></expr>)</condition> <block pos:start="81:41" pos:end="121:13">{<block_content pos:start="83:17" pos:end="119:42">

                <if_stmt pos:start="83:17" pos:end="115:17"><if pos:start="83:17" pos:end="115:17">if <condition pos:start="83:20" pos:end="83:86">(<expr pos:start="83:21" pos:end="83:85"><name pos:start="83:21" pos:end="83:38"><name pos:start="83:21" pos:end="83:22">ur</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:38">rung_list_size</name></name> <operator pos:start="83:40" pos:end="83:41">&lt;=</operator> <operator pos:start="83:43" pos:end="83:43">(</operator><name pos:start="83:44" pos:end="83:58"><name pos:start="83:44" pos:end="83:45">ur</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:58">avail_index</name></name> <operator pos:start="83:60" pos:end="83:60">+</operator> <literal type="number" pos:start="83:62" pos:end="83:62">2</literal><operator pos:start="83:63" pos:end="83:63">)</operator> <operator pos:start="83:65" pos:end="83:65">*</operator> <sizeof pos:start="83:67" pos:end="83:85">sizeof<argument_list pos:start="83:73" pos:end="83:85">(<argument pos:start="83:74" pos:end="83:84"><expr pos:start="83:74" pos:end="83:84"><name pos:start="83:74" pos:end="83:84">ElsRungNode</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="83:88" pos:end="115:17">{<block_content pos:start="87:21" pos:end="113:56">

                    <comment type="line" pos:start="85:21" pos:end="85:50">// remember rung_node position</comment>

                    <decl_stmt pos:start="87:21" pos:end="87:70"><decl pos:start="87:21" pos:end="87:69"><type pos:start="87:21" pos:end="87:29"><name pos:start="87:21" pos:end="87:29">ptrdiff_t</name></type> <name pos:start="87:31" pos:end="87:33">pos</name>     <init pos:start="87:39" pos:end="87:69">= <expr pos:start="87:41" pos:end="87:69"><name pos:start="87:41" pos:end="87:49">rung_node</name> <operator pos:start="87:51" pos:end="87:51">-</operator> <name pos:start="87:53" pos:end="87:69"><name pos:start="87:53" pos:end="87:54">ur</name><operator pos:start="87:55" pos:end="87:56">-&gt;</operator><name pos:start="87:57" pos:end="87:69">rem_rung_list</name></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="89:21" pos:end="93:63"><expr pos:start="89:21" pos:end="93:62"><name pos:start="89:21" pos:end="89:37"><name pos:start="89:21" pos:end="89:22">ur</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:37">rem_rung_list</name></name> <operator pos:start="89:39" pos:end="89:39">=</operator> <call pos:start="89:41" pos:end="93:62"><name pos:start="89:41" pos:end="89:50">av_realloc</name><argument_list pos:start="89:51" pos:end="93:62">(<argument pos:start="89:52" pos:end="89:68"><expr pos:start="89:52" pos:end="89:68"><name pos:start="89:52" pos:end="89:68"><name pos:start="89:52" pos:end="89:53">ur</name><operator pos:start="89:54" pos:end="89:55">-&gt;</operator><name pos:start="89:56" pos:end="89:68">rem_rung_list</name></name></expr></argument>,

                                                   <argument pos:start="91:52" pos:end="93:61"><expr pos:start="91:52" pos:end="93:61"><name pos:start="91:52" pos:end="91:69"><name pos:start="91:52" pos:end="91:53">ur</name><operator pos:start="91:54" pos:end="91:55">-&gt;</operator><name pos:start="91:56" pos:end="91:69">rung_list_size</name></name> <operator pos:start="91:71" pos:end="91:71">+</operator>

                                                   <name pos:start="93:52" pos:end="93:61">RUNG_SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="95:21" pos:end="103:21"><if pos:start="95:21" pos:end="103:21">if <condition pos:start="95:24" pos:end="95:43">(<expr pos:start="95:25" pos:end="95:42"><operator pos:start="95:25" pos:end="95:25">!</operator><name pos:start="95:26" pos:end="95:42"><name pos:start="95:26" pos:end="95:27">ur</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:42">rem_rung_list</name></name></expr>)</condition> <block pos:start="95:45" pos:end="103:21">{<block_content pos:start="97:25" pos:end="101:33">

                        <expr_stmt pos:start="97:25" pos:end="97:51"><expr pos:start="97:25" pos:end="97:50"><call pos:start="97:25" pos:end="97:50"><name pos:start="97:25" pos:end="97:31">av_free</name><argument_list pos:start="97:32" pos:end="97:50">(<argument pos:start="97:33" pos:end="97:49"><expr pos:start="97:33" pos:end="97:49"><name pos:start="97:33" pos:end="97:49"><name pos:start="97:33" pos:end="97:34">ur</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:49">rem_rung_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="99:25" pos:end="99:51"><expr pos:start="99:25" pos:end="99:50"><name pos:start="99:25" pos:end="99:32"><name pos:start="99:25" pos:end="99:27">ctx</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:32">err</name></name> <operator pos:start="99:34" pos:end="99:34">=</operator> <call pos:start="99:36" pos:end="99:50"><name pos:start="99:36" pos:end="99:42">AVERROR</name><argument_list pos:start="99:43" pos:end="99:50">(<argument pos:start="99:44" pos:end="99:49"><expr pos:start="99:44" pos:end="99:49"><name pos:start="99:44" pos:end="99:49">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="101:25" pos:end="101:33">return <expr pos:start="101:32" pos:end="101:32"><literal type="number" pos:start="101:32" pos:end="101:32">0</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="105:21" pos:end="107:39"><expr pos:start="105:21" pos:end="107:38"><call pos:start="105:21" pos:end="107:38"><name pos:start="105:21" pos:end="105:26">memset</name><argument_list pos:start="105:27" pos:end="107:38">(<argument pos:start="105:28" pos:end="105:77"><expr pos:start="105:28" pos:end="105:77"><operator pos:start="105:28" pos:end="105:28">(</operator><name pos:start="105:29" pos:end="105:35">uint8_t</name> <operator pos:start="105:37" pos:end="105:37">*</operator><operator pos:start="105:38" pos:end="105:38">)</operator> <name pos:start="105:40" pos:end="105:56"><name pos:start="105:40" pos:end="105:41">ur</name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:56">rem_rung_list</name></name> <operator pos:start="105:58" pos:end="105:58">+</operator> <name pos:start="105:60" pos:end="105:77"><name pos:start="105:60" pos:end="105:61">ur</name><operator pos:start="105:62" pos:end="105:63">-&gt;</operator><name pos:start="105:64" pos:end="105:77">rung_list_size</name></name></expr></argument>, <argument pos:start="105:80" pos:end="105:80"><expr pos:start="105:80" pos:end="105:80"><literal type="number" pos:start="105:80" pos:end="105:80">0</literal></expr></argument>,

                           <argument pos:start="107:28" pos:end="107:37"><expr pos:start="107:28" pos:end="107:37"><name pos:start="107:28" pos:end="107:37">RUNG_SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:53"><expr pos:start="109:21" pos:end="109:52"><name pos:start="109:21" pos:end="109:38"><name pos:start="109:21" pos:end="109:22">ur</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:38">rung_list_size</name></name> <operator pos:start="109:40" pos:end="109:41">+=</operator> <name pos:start="109:43" pos:end="109:52">RUNG_SPACE</name></expr>;</expr_stmt>

                    <comment type="line" pos:start="111:21" pos:end="111:65">// restore rung_node position in the new list</comment>

                    <expr_stmt pos:start="113:21" pos:end="113:56"><expr pos:start="113:21" pos:end="113:55"><name pos:start="113:21" pos:end="113:29">rung_node</name> <operator pos:start="113:31" pos:end="113:31">=</operator> <operator pos:start="113:33" pos:end="113:33">&amp;</operator><name pos:start="113:34" pos:end="113:55"><name pos:start="113:34" pos:end="113:35">ur</name><operator pos:start="113:36" pos:end="113:37">-&gt;</operator><name pos:start="113:38" pos:end="113:50">rem_rung_list</name><index pos:start="113:51" pos:end="113:55">[<expr pos:start="113:52" pos:end="113:54"><name pos:start="113:52" pos:end="113:54">pos</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:56"><expr pos:start="117:17" pos:end="117:55"><name pos:start="117:17" pos:end="117:37"><name pos:start="117:17" pos:end="117:25">rung_node</name><operator pos:start="117:26" pos:end="117:27">-&gt;</operator><name pos:start="117:28" pos:end="117:37">next_index</name></name> <operator pos:start="117:39" pos:end="117:39">=</operator> <name pos:start="117:41" pos:end="117:55"><name pos:start="117:41" pos:end="117:42">ur</name><operator pos:start="117:43" pos:end="117:44">-&gt;</operator><name pos:start="117:45" pos:end="117:55">avail_index</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:42"><expr pos:start="119:17" pos:end="119:41"><name pos:start="119:17" pos:end="119:31"><name pos:start="119:17" pos:end="119:18">ur</name><operator pos:start="119:19" pos:end="119:20">-&gt;</operator><name pos:start="119:21" pos:end="119:31">avail_index</name></name>      <operator pos:start="119:38" pos:end="119:39">+=</operator> <literal type="number" pos:start="119:41" pos:end="119:41">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:72"><expr pos:start="123:13" pos:end="123:71"><name pos:start="123:13" pos:end="123:21">rung_node</name> <operator pos:start="123:23" pos:end="123:23">=</operator> <operator pos:start="123:25" pos:end="123:25">&amp;</operator><name pos:start="123:26" pos:end="123:71"><name pos:start="123:26" pos:end="123:27">ur</name><operator pos:start="123:28" pos:end="123:29">-&gt;</operator><name pos:start="123:30" pos:end="123:42">rem_rung_list</name><index pos:start="123:43" pos:end="123:71">[<expr pos:start="123:44" pos:end="123:70"><name pos:start="123:44" pos:end="123:64"><name pos:start="123:44" pos:end="123:52">rung_node</name><operator pos:start="123:53" pos:end="123:54">-&gt;</operator><name pos:start="123:55" pos:end="123:64">next_index</name></name> <operator pos:start="123:66" pos:end="123:66">+</operator> <name pos:start="123:68" pos:end="123:70">bit</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:55"><expr pos:start="129:9" pos:end="129:54"><name pos:start="129:9" pos:end="129:11">bit</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="129:54"><name pos:start="129:15" pos:end="129:31">ff_els_decode_bit</name><argument_list pos:start="129:32" pos:end="129:54">(<argument pos:start="129:33" pos:end="129:35"><expr pos:start="129:33" pos:end="129:35"><name pos:start="129:33" pos:end="129:35">ctx</name></expr></argument>, <argument pos:start="129:38" pos:end="129:53"><expr pos:start="129:38" pos:end="129:53"><operator pos:start="129:38" pos:end="129:38">&amp;</operator><name pos:start="129:39" pos:end="129:53"><name pos:start="129:39" pos:end="129:47">rung_node</name><operator pos:start="129:48" pos:end="129:49">-&gt;</operator><name pos:start="129:50" pos:end="129:53">rung</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="133:23"><if pos:start="131:9" pos:end="133:23">if <condition pos:start="131:12" pos:end="131:21">(<expr pos:start="131:13" pos:end="131:20"><name pos:start="131:13" pos:end="131:20"><name pos:start="131:13" pos:end="131:15">ctx</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:20">err</name></name></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:23"><block_content pos:start="133:13" pos:end="133:23">

            <return pos:start="133:13" pos:end="133:23">return <expr pos:start="133:20" pos:end="133:22"><name pos:start="133:20" pos:end="133:22">bit</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:27"><expr pos:start="137:9" pos:end="137:26"><name pos:start="137:9" pos:end="137:9">r</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <operator pos:start="137:13" pos:end="137:13">(</operator><name pos:start="137:14" pos:end="137:14">r</name> <operator pos:start="137:16" pos:end="137:17">&lt;&lt;</operator> <literal type="number" pos:start="137:19" pos:end="137:19">1</literal><operator pos:start="137:20" pos:end="137:20">)</operator> <operator pos:start="137:22" pos:end="137:22">+</operator> <name pos:start="137:24" pos:end="137:26">bit</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="143:5" pos:end="143:28">return <expr pos:start="143:12" pos:end="143:27"><operator pos:start="143:12" pos:end="143:12">(</operator><literal type="number" pos:start="143:13" pos:end="143:13">1</literal> <operator pos:start="143:15" pos:end="143:16">&lt;&lt;</operator> <name pos:start="143:18" pos:end="143:18">n</name><operator pos:start="143:19" pos:end="143:19">)</operator> <operator pos:start="143:21" pos:end="143:21">-</operator> <literal type="number" pos:start="143:23" pos:end="143:25">1</literal> <operator pos:start="143:25" pos:end="143:25">+</operator> <name pos:start="143:27" pos:end="143:27">r</name></expr>;</return> <comment type="block" pos:start="143:30" pos:end="143:66">/* make value from exp golomb code */</comment>

</block_content>}</block></function>
</unit>
