<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4622.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">huffman_decode</name><parameter_list pos:start="1:26" pos:end="3:59">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:42">MPADecodeContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:57">GranuleDef</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">g</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:44"><decl pos:start="3:27" pos:end="3:44"><type pos:start="3:27" pos:end="3:44"><name pos:start="3:27" pos:end="3:33">int16_t</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">exponents</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:58">end_pos2</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="303:1">{<block_content pos:start="7:5" pos:end="301:13">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">s_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">last_pos</name></decl>, <decl pos:start="11:19" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:27">bits_left</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:7">VLC</name> <modifier pos:start="13:9" pos:end="13:9">*</modifier></type><name pos:start="13:10" pos:end="13:12">vlc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:53"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">end_pos</name> <init pos:start="15:17" pos:end="15:53">= <expr pos:start="15:19" pos:end="15:53"><call pos:start="15:19" pos:end="15:53"><name pos:start="15:19" pos:end="15:23">FFMIN</name><argument_list pos:start="15:24" pos:end="15:53">(<argument pos:start="15:25" pos:end="15:32"><expr pos:start="15:25" pos:end="15:32"><name pos:start="15:25" pos:end="15:32">end_pos2</name></expr></argument>, <argument pos:start="15:35" pos:end="15:52"><expr pos:start="15:35" pos:end="15:52"><name pos:start="15:35" pos:end="15:52"><name pos:start="15:35" pos:end="15:35">s</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:39">gb</name><operator pos:start="15:40" pos:end="15:40">.</operator><name pos:start="15:41" pos:end="15:52">size_in_bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:45">/* low frequencies (called big values) */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:11">s_index</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="185:5">for <control pos:start="23:9" pos:end="23:27">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:21"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <literal type="number" pos:start="23:21" pos:end="23:21">3</literal></expr>;</condition> <incr pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:24">i</name><operator pos:start="23:25" pos:end="23:26">++</operator></expr></incr>)</control> <block pos:start="23:29" pos:end="185:5">{<block_content pos:start="25:9" pos:end="183:9">

        <decl_stmt pos:start="25:9" pos:end="25:29"><decl pos:start="25:9" pos:end="25:13"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:13">j</name></decl>, <decl pos:start="25:16" pos:end="25:16"><type ref="prev" pos:start="25:9" pos:end="25:11"/><name pos:start="25:16" pos:end="25:16">k</name></decl>, <decl pos:start="25:19" pos:end="25:19"><type ref="prev" pos:start="25:9" pos:end="25:11"/><name pos:start="25:19" pos:end="25:19">l</name></decl>, <decl pos:start="25:22" pos:end="25:28"><type ref="prev" pos:start="25:9" pos:end="25:11"/><name pos:start="25:22" pos:end="25:28">linbits</name></decl>;</decl_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:9">j</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:29"><name pos:start="27:13" pos:end="27:13">g</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:26">region_size</name><index pos:start="27:27" pos:end="27:29">[<expr pos:start="27:28" pos:end="27:28"><name pos:start="27:28" pos:end="27:28">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if <condition pos:start="29:12" pos:end="29:19">(<expr pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:13">j</name> <operator pos:start="29:15" pos:end="29:16">==</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <continue pos:start="31:13" pos:end="31:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="block" pos:start="33:9" pos:end="33:30">/* select vlc table */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:37"><expr pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:9">k</name>       <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:36"><name pos:start="35:19" pos:end="35:19">g</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:33">table_select</name><index pos:start="35:34" pos:end="35:36">[<expr pos:start="35:35" pos:end="35:35"><name pos:start="35:35" pos:end="35:35">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:38"><expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:9">l</name>       <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:37"><name pos:start="37:19" pos:end="37:31">mpa_huff_data</name><index pos:start="37:32" pos:end="37:34">[<expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">k</name></expr>]</index><index pos:start="37:35" pos:end="37:37">[<expr pos:start="37:36" pos:end="37:36"><literal type="number" pos:start="37:36" pos:end="37:36">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:38"><expr pos:start="39:9" pos:end="39:37"><name pos:start="39:9" pos:end="39:15">linbits</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:37"><name pos:start="39:19" pos:end="39:31">mpa_huff_data</name><index pos:start="39:32" pos:end="39:34">[<expr pos:start="39:33" pos:end="39:33"><name pos:start="39:33" pos:end="39:33">k</name></expr>]</index><index pos:start="39:35" pos:end="39:37">[<expr pos:start="39:36" pos:end="39:36"><literal type="number" pos:start="39:36" pos:end="39:36">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:31"><expr pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:11">vlc</name>     <operator pos:start="41:17" pos:end="41:17">=</operator> <operator pos:start="41:19" pos:end="41:19">&amp;</operator><name pos:start="41:20" pos:end="41:30"><name pos:start="41:20" pos:end="41:27">huff_vlc</name><index pos:start="41:28" pos:end="41:30">[<expr pos:start="41:29" pos:end="41:29"><name pos:start="41:29" pos:end="41:29">l</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:15">(<expr pos:start="45:13" pos:end="45:14"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:14">l</name></expr>)</condition> <block pos:start="45:17" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:21">

            <expr_stmt pos:start="47:13" pos:end="47:77"><expr pos:start="47:13" pos:end="47:76"><call pos:start="47:13" pos:end="47:76"><name pos:start="47:13" pos:end="47:18">memset</name><argument_list pos:start="47:19" pos:end="47:76">(<argument pos:start="47:20" pos:end="47:41"><expr pos:start="47:20" pos:end="47:41"><operator pos:start="47:20" pos:end="47:20">&amp;</operator><name pos:start="47:21" pos:end="47:41"><name pos:start="47:21" pos:end="47:21">g</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:32">sb_hybrid</name><index pos:start="47:33" pos:end="47:41">[<expr pos:start="47:34" pos:end="47:40"><name pos:start="47:34" pos:end="47:40">s_index</name></expr>]</index></name></expr></argument>, <argument pos:start="47:44" pos:end="47:44"><expr pos:start="47:44" pos:end="47:44"><literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:75"><expr pos:start="47:47" pos:end="47:75"><sizeof pos:start="47:47" pos:end="47:67">sizeof<argument_list pos:start="47:53" pos:end="47:67">(<argument pos:start="47:54" pos:end="47:66"><expr pos:start="47:54" pos:end="47:66"><operator pos:start="47:54" pos:end="47:54">*</operator><name pos:start="47:55" pos:end="47:66"><name pos:start="47:55" pos:end="47:55">g</name><operator pos:start="47:56" pos:end="47:57">-&gt;</operator><name pos:start="47:58" pos:end="47:66">sb_hybrid</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="47:69" pos:end="47:69">*</operator> <literal type="number" pos:start="47:71" pos:end="47:71">2</literal> <operator pos:start="47:73" pos:end="47:73">*</operator> <name pos:start="47:75" pos:end="47:75">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:29"><expr pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:19">s_index</name> <operator pos:start="49:21" pos:end="49:22">+=</operator> <literal type="number" pos:start="49:24" pos:end="49:24">2</literal> <operator pos:start="49:26" pos:end="49:26">*</operator> <name pos:start="49:28" pos:end="49:28">j</name></expr>;</expr_stmt>

            <continue pos:start="51:13" pos:end="51:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="57:9" pos:end="57:51">/* read huffcode and compute each couple */</comment>

        <for pos:start="59:9" pos:end="183:9">for <control pos:start="59:13" pos:end="59:26">(<init pos:start="59:14" pos:end="59:14">;</init> <condition pos:start="59:16" pos:end="59:21"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:16">j</name> <operator pos:start="59:18" pos:end="59:18">&gt;</operator> <literal type="number" pos:start="59:20" pos:end="59:20">0</literal></expr>;</condition> <incr pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:23">j</name><operator pos:start="59:24" pos:end="59:25">--</operator></expr></incr>)</control> <block pos:start="59:28" pos:end="183:9">{<block_content pos:start="61:13" pos:end="181:25">

            <decl_stmt pos:start="61:13" pos:end="61:31"><decl pos:start="61:13" pos:end="61:24"><type pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">int</name></type> <name pos:start="61:17" pos:end="61:24">exponent</name></decl>, <decl pos:start="61:27" pos:end="61:27"><type ref="prev" pos:start="61:13" pos:end="61:15"/><name pos:start="61:27" pos:end="61:27">x</name></decl>, <decl pos:start="61:30" pos:end="61:30"><type ref="prev" pos:start="61:13" pos:end="61:15"/><name pos:start="61:30" pos:end="61:30">y</name></decl>;</decl_stmt>

            <decl_stmt pos:start="63:13" pos:end="63:18"><decl pos:start="63:13" pos:end="63:17"><type pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">int</name></type> <name pos:start="63:17" pos:end="63:17">v</name></decl>;</decl_stmt>

            <decl_stmt pos:start="65:13" pos:end="65:45"><decl pos:start="65:13" pos:end="65:44"><type pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:15">int</name></type> <name pos:start="65:17" pos:end="65:19">pos</name> <init pos:start="65:21" pos:end="65:44">= <expr pos:start="65:23" pos:end="65:44"><call pos:start="65:23" pos:end="65:44"><name pos:start="65:23" pos:end="65:36">get_bits_count</name><argument_list pos:start="65:37" pos:end="65:44">(<argument pos:start="65:38" pos:end="65:43"><expr pos:start="65:38" pos:end="65:43"><operator pos:start="65:38" pos:end="65:38">&amp;</operator><name pos:start="65:39" pos:end="65:43"><name pos:start="65:39" pos:end="65:39">s</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:43">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="69:13" pos:end="81:13"><if pos:start="69:13" pos:end="81:13">if <condition pos:start="69:16" pos:end="69:31">(<expr pos:start="69:17" pos:end="69:30"><name pos:start="69:17" pos:end="69:19">pos</name> <operator pos:start="69:21" pos:end="69:22">&gt;=</operator> <name pos:start="69:24" pos:end="69:30">end_pos</name></expr>)</condition><block pos:start="69:32" pos:end="81:13">{<block_content pos:start="73:17" pos:end="79:26">

<comment type="line" pos:start="71:1" pos:end="71:100">//                av_log(NULL, AV_LOG_ERROR, "pos: %d %d %d %d\n", pos, end_pos, end_pos2, s_index);</comment>

                <expr_stmt pos:start="73:17" pos:end="73:60"><expr pos:start="73:17" pos:end="73:59"><call pos:start="73:17" pos:end="73:59"><name pos:start="73:17" pos:end="73:29">switch_buffer</name><argument_list pos:start="73:30" pos:end="73:59">(<argument pos:start="73:31" pos:end="73:31"><expr pos:start="73:31" pos:end="73:31"><name pos:start="73:31" pos:end="73:31">s</name></expr></argument>, <argument pos:start="73:34" pos:end="73:37"><expr pos:start="73:34" pos:end="73:37"><operator pos:start="73:34" pos:end="73:34">&amp;</operator><name pos:start="73:35" pos:end="73:37">pos</name></expr></argument>, <argument pos:start="73:40" pos:end="73:47"><expr pos:start="73:40" pos:end="73:47"><operator pos:start="73:40" pos:end="73:40">&amp;</operator><name pos:start="73:41" pos:end="73:47">end_pos</name></expr></argument>, <argument pos:start="73:50" pos:end="73:58"><expr pos:start="73:50" pos:end="73:58"><operator pos:start="73:50" pos:end="73:50">&amp;</operator><name pos:start="73:51" pos:end="73:58">end_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="75:1" pos:end="75:79">//                av_log(NULL, AV_LOG_ERROR, "new pos: %d %d\n", pos, end_pos);</comment>

                <if_stmt pos:start="77:17" pos:end="79:26"><if pos:start="77:17" pos:end="79:26">if <condition pos:start="77:20" pos:end="77:35">(<expr pos:start="77:21" pos:end="77:34"><name pos:start="77:21" pos:end="77:23">pos</name> <operator pos:start="77:25" pos:end="77:26">&gt;=</operator> <name pos:start="77:28" pos:end="77:34">end_pos</name></expr>)</condition><block type="pseudo" pos:start="79:21" pos:end="79:26"><block_content pos:start="79:21" pos:end="79:26">

                    <break pos:start="79:21" pos:end="79:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:51"><expr pos:start="83:13" pos:end="83:50"><name pos:start="83:13" pos:end="83:13">y</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <call pos:start="83:17" pos:end="83:50"><name pos:start="83:17" pos:end="83:24">get_vlc2</name><argument_list pos:start="83:25" pos:end="83:50">(<argument pos:start="83:26" pos:end="83:31"><expr pos:start="83:26" pos:end="83:31"><operator pos:start="83:26" pos:end="83:26">&amp;</operator><name pos:start="83:27" pos:end="83:31"><name pos:start="83:27" pos:end="83:27">s</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:31">gb</name></name></expr></argument>, <argument pos:start="83:34" pos:end="83:43"><expr pos:start="83:34" pos:end="83:43"><name pos:start="83:34" pos:end="83:43"><name pos:start="83:34" pos:end="83:36">vlc</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:43">table</name></name></expr></argument>, <argument pos:start="83:46" pos:end="83:46"><expr pos:start="83:46" pos:end="83:46"><literal type="number" pos:start="83:46" pos:end="83:46">7</literal></expr></argument>, <argument pos:start="83:49" pos:end="83:49"><expr pos:start="83:49" pos:end="83:49"><literal type="number" pos:start="83:49" pos:end="83:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="87:13" pos:end="97:13"><if pos:start="87:13" pos:end="97:13">if <condition pos:start="87:16" pos:end="87:19">(<expr pos:start="87:17" pos:end="87:18"><operator pos:start="87:17" pos:end="87:17">!</operator><name pos:start="87:18" pos:end="87:18">y</name></expr>)</condition> <block pos:start="87:21" pos:end="97:13">{<block_content pos:start="89:17" pos:end="95:25">

                <expr_stmt pos:start="89:17" pos:end="91:44"><expr pos:start="89:17" pos:end="91:43"><name pos:start="89:17" pos:end="89:39"><name pos:start="89:17" pos:end="89:17">g</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:28">sb_hybrid</name><index pos:start="89:29" pos:end="89:39">[<expr pos:start="89:30" pos:end="89:36"><name pos:start="89:30" pos:end="89:36">s_index</name></expr>  ]</index></name> <operator pos:start="89:41" pos:end="89:41">=</operator>

                <name pos:start="91:17" pos:end="91:39"><name pos:start="91:17" pos:end="91:17">g</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:28">sb_hybrid</name><index pos:start="91:29" pos:end="91:39">[<expr pos:start="91:30" pos:end="91:38"><name pos:start="91:30" pos:end="91:36">s_index</name><operator pos:start="91:37" pos:end="91:37">+</operator><literal type="number" pos:start="91:38" pos:end="91:38">1</literal></expr>]</index></name> <operator pos:start="91:41" pos:end="91:41">=</operator> <literal type="number" pos:start="91:43" pos:end="91:43">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:29"><expr pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:23">s_index</name> <operator pos:start="93:25" pos:end="93:26">+=</operator> <literal type="number" pos:start="93:28" pos:end="93:28">2</literal></expr>;</expr_stmt>

                <continue pos:start="95:17" pos:end="95:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:41"><expr pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:20">exponent</name><operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:40"><name pos:start="101:23" pos:end="101:31">exponents</name><index pos:start="101:32" pos:end="101:40">[<expr pos:start="101:33" pos:end="101:39"><name pos:start="101:33" pos:end="101:39">s_index</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="105:13" pos:end="107:62"><expr pos:start="105:13" pos:end="107:61"><call pos:start="105:13" pos:end="107:61"><name pos:start="105:13" pos:end="105:19">av_dlog</name><argument_list pos:start="105:20" pos:end="107:61">(<argument pos:start="105:21" pos:end="105:28"><expr pos:start="105:21" pos:end="105:28"><name pos:start="105:21" pos:end="105:28"><name pos:start="105:21" pos:end="105:21">s</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:28">avctx</name></name></expr></argument>, <argument pos:start="105:31" pos:end="105:65"><expr pos:start="105:31" pos:end="105:65"><literal type="string" pos:start="105:31" pos:end="105:65">"region=%d n=%d x=%d y=%d exp=%d\n"</literal></expr></argument>,

                    <argument pos:start="107:21" pos:end="107:21"><expr pos:start="107:21" pos:end="107:21"><name pos:start="107:21" pos:end="107:21">i</name></expr></argument>, <argument pos:start="107:24" pos:end="107:44"><expr pos:start="107:24" pos:end="107:44"><name pos:start="107:24" pos:end="107:40"><name pos:start="107:24" pos:end="107:24">g</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:37">region_size</name><index pos:start="107:38" pos:end="107:40">[<expr pos:start="107:39" pos:end="107:39"><name pos:start="107:39" pos:end="107:39">i</name></expr>]</index></name> <operator pos:start="107:42" pos:end="107:42">-</operator> <name pos:start="107:44" pos:end="107:44">j</name></expr></argument>, <argument pos:start="107:47" pos:end="107:47"><expr pos:start="107:47" pos:end="107:47"><name pos:start="107:47" pos:end="107:47">x</name></expr></argument>, <argument pos:start="107:50" pos:end="107:50"><expr pos:start="107:50" pos:end="107:50"><name pos:start="107:50" pos:end="107:50">y</name></expr></argument>, <argument pos:start="107:53" pos:end="107:60"><expr pos:start="107:53" pos:end="107:60"><name pos:start="107:53" pos:end="107:60">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="179:13"><if pos:start="109:13" pos:end="151:13">if <condition pos:start="109:16" pos:end="109:23">(<expr pos:start="109:17" pos:end="109:22"><name pos:start="109:17" pos:end="109:17">y</name> <operator pos:start="109:19" pos:end="109:19">&amp;</operator> <literal type="number" pos:start="109:21" pos:end="109:22">16</literal></expr>)</condition> <block pos:start="109:25" pos:end="151:13">{<block_content pos:start="111:17" pos:end="149:17">

                <expr_stmt pos:start="111:17" pos:end="111:27"><expr pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:17">x</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <name pos:start="111:21" pos:end="111:21">y</name> <operator pos:start="111:23" pos:end="111:24">&gt;&gt;</operator> <literal type="number" pos:start="111:26" pos:end="111:26">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:29"><expr pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:17">y</name> <operator pos:start="113:19" pos:end="113:19">=</operator> <name pos:start="113:21" pos:end="113:21">y</name> <operator pos:start="113:23" pos:end="113:23">&amp;</operator> <literal type="number" pos:start="113:25" pos:end="113:28">0x0f</literal></expr>;</expr_stmt>

                <if_stmt pos:start="115:17" pos:end="131:17"><if pos:start="115:17" pos:end="119:17">if <condition pos:start="115:20" pos:end="115:27">(<expr pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:21">x</name> <operator pos:start="115:23" pos:end="115:23">&lt;</operator> <literal type="number" pos:start="115:25" pos:end="115:26">15</literal></expr>)</condition> <block pos:start="115:29" pos:end="119:17">{<block_content pos:start="117:21" pos:end="117:94">

                    <macro pos:start="117:21" pos:end="117:94"><name pos:start="117:21" pos:end="117:34">READ_FLIP_SIGN</name><argument_list pos:start="117:35" pos:end="117:94">(<argument pos:start="117:36" pos:end="117:57">g-&gt;sb_hybrid + s_index</argument>, <argument pos:start="117:60" pos:end="117:93">RENAME(expval_table)[exponent] + x</argument>)</argument_list></macro>

                </block_content>}</block></if> <else pos:start="119:19" pos:end="131:17">else <block pos:start="119:24" pos:end="131:17">{<block_content pos:start="121:21" pos:end="129:46">

                    <expr_stmt pos:start="121:21" pos:end="121:52"><expr pos:start="121:21" pos:end="121:51"><name pos:start="121:21" pos:end="121:21">x</name> <operator pos:start="121:23" pos:end="121:24">+=</operator> <call pos:start="121:26" pos:end="121:51"><name pos:start="121:26" pos:end="121:34">get_bitsz</name><argument_list pos:start="121:35" pos:end="121:51">(<argument pos:start="121:36" pos:end="121:41"><expr pos:start="121:36" pos:end="121:41"><operator pos:start="121:36" pos:end="121:36">&amp;</operator><name pos:start="121:37" pos:end="121:41"><name pos:start="121:37" pos:end="121:37">s</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:41">gb</name></name></expr></argument>, <argument pos:start="121:44" pos:end="121:50"><expr pos:start="121:44" pos:end="121:50"><name pos:start="121:44" pos:end="121:50">linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="123:21" pos:end="123:49"><expr pos:start="123:21" pos:end="123:48"><name pos:start="123:21" pos:end="123:21">v</name>  <operator pos:start="123:24" pos:end="123:24">=</operator> <call pos:start="123:26" pos:end="123:48"><name pos:start="123:26" pos:end="123:35">l3_unscale</name><argument_list pos:start="123:36" pos:end="123:48">(<argument pos:start="123:37" pos:end="123:37"><expr pos:start="123:37" pos:end="123:37"><name pos:start="123:37" pos:end="123:37">x</name></expr></argument>, <argument pos:start="123:40" pos:end="123:47"><expr pos:start="123:40" pos:end="123:47"><name pos:start="123:40" pos:end="123:47">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="125:21" pos:end="127:31"><if pos:start="125:21" pos:end="127:31">if <condition pos:start="125:24" pos:end="125:42">(<expr pos:start="125:25" pos:end="125:41"><call pos:start="125:25" pos:end="125:41"><name pos:start="125:25" pos:end="125:33">get_bits1</name><argument_list pos:start="125:34" pos:end="125:41">(<argument pos:start="125:35" pos:end="125:40"><expr pos:start="125:35" pos:end="125:40"><operator pos:start="125:35" pos:end="125:35">&amp;</operator><name pos:start="125:36" pos:end="125:40"><name pos:start="125:36" pos:end="125:36">s</name><operator pos:start="125:37" pos:end="125:38">-&gt;</operator><name pos:start="125:39" pos:end="125:40">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="127:25" pos:end="127:31"><block_content pos:start="127:25" pos:end="127:31">

                        <expr_stmt pos:start="127:25" pos:end="127:31"><expr pos:start="127:25" pos:end="127:30"><name pos:start="127:25" pos:end="127:25">v</name> <operator pos:start="127:27" pos:end="127:27">=</operator> <operator pos:start="127:29" pos:end="127:29">-</operator><name pos:start="127:30" pos:end="127:30">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:46"><expr pos:start="129:21" pos:end="129:45"><name pos:start="129:21" pos:end="129:41"><name pos:start="129:21" pos:end="129:21">g</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:32">sb_hybrid</name><index pos:start="129:33" pos:end="129:41">[<expr pos:start="129:34" pos:end="129:40"><name pos:start="129:34" pos:end="129:40">s_index</name></expr>]</index></name> <operator pos:start="129:43" pos:end="129:43">=</operator> <name pos:start="129:45" pos:end="129:45">v</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="133:17" pos:end="149:17"><if pos:start="133:17" pos:end="137:17">if <condition pos:start="133:20" pos:end="133:27">(<expr pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:21">y</name> <operator pos:start="133:23" pos:end="133:23">&lt;</operator> <literal type="number" pos:start="133:25" pos:end="133:26">15</literal></expr>)</condition> <block pos:start="133:29" pos:end="137:17">{<block_content pos:start="135:21" pos:end="135:98">

                    <macro pos:start="135:21" pos:end="135:98"><name pos:start="135:21" pos:end="135:34">READ_FLIP_SIGN</name><argument_list pos:start="135:35" pos:end="135:98">(<argument pos:start="135:36" pos:end="135:61">g-&gt;sb_hybrid + s_index + <literal type="number" pos:start="135:61" pos:end="135:61">1</literal></argument>, <argument pos:start="135:64" pos:end="135:97">RENAME(expval_table)[exponent] + y</argument>)</argument_list></macro>

                </block_content>}</block></if> <else pos:start="137:19" pos:end="149:17">else <block pos:start="137:24" pos:end="149:17">{<block_content pos:start="139:21" pos:end="147:48">

                    <expr_stmt pos:start="139:21" pos:end="139:52"><expr pos:start="139:21" pos:end="139:51"><name pos:start="139:21" pos:end="139:21">y</name> <operator pos:start="139:23" pos:end="139:24">+=</operator> <call pos:start="139:26" pos:end="139:51"><name pos:start="139:26" pos:end="139:34">get_bitsz</name><argument_list pos:start="139:35" pos:end="139:51">(<argument pos:start="139:36" pos:end="139:41"><expr pos:start="139:36" pos:end="139:41"><operator pos:start="139:36" pos:end="139:36">&amp;</operator><name pos:start="139:37" pos:end="139:41"><name pos:start="139:37" pos:end="139:37">s</name><operator pos:start="139:38" pos:end="139:39">-&gt;</operator><name pos:start="139:40" pos:end="139:41">gb</name></name></expr></argument>, <argument pos:start="139:44" pos:end="139:50"><expr pos:start="139:44" pos:end="139:50"><name pos:start="139:44" pos:end="139:50">linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="141:21" pos:end="141:49"><expr pos:start="141:21" pos:end="141:48"><name pos:start="141:21" pos:end="141:21">v</name>  <operator pos:start="141:24" pos:end="141:24">=</operator> <call pos:start="141:26" pos:end="141:48"><name pos:start="141:26" pos:end="141:35">l3_unscale</name><argument_list pos:start="141:36" pos:end="141:48">(<argument pos:start="141:37" pos:end="141:37"><expr pos:start="141:37" pos:end="141:37"><name pos:start="141:37" pos:end="141:37">y</name></expr></argument>, <argument pos:start="141:40" pos:end="141:47"><expr pos:start="141:40" pos:end="141:47"><name pos:start="141:40" pos:end="141:47">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="143:21" pos:end="145:31"><if pos:start="143:21" pos:end="145:31">if <condition pos:start="143:24" pos:end="143:42">(<expr pos:start="143:25" pos:end="143:41"><call pos:start="143:25" pos:end="143:41"><name pos:start="143:25" pos:end="143:33">get_bits1</name><argument_list pos:start="143:34" pos:end="143:41">(<argument pos:start="143:35" pos:end="143:40"><expr pos:start="143:35" pos:end="143:40"><operator pos:start="143:35" pos:end="143:35">&amp;</operator><name pos:start="143:36" pos:end="143:40"><name pos:start="143:36" pos:end="143:36">s</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:40">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="145:25" pos:end="145:31"><block_content pos:start="145:25" pos:end="145:31">

                        <expr_stmt pos:start="145:25" pos:end="145:31"><expr pos:start="145:25" pos:end="145:30"><name pos:start="145:25" pos:end="145:25">v</name> <operator pos:start="145:27" pos:end="145:27">=</operator> <operator pos:start="145:29" pos:end="145:29">-</operator><name pos:start="145:30" pos:end="145:30">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="147:21" pos:end="147:48"><expr pos:start="147:21" pos:end="147:47"><name pos:start="147:21" pos:end="147:43"><name pos:start="147:21" pos:end="147:21">g</name><operator pos:start="147:22" pos:end="147:23">-&gt;</operator><name pos:start="147:24" pos:end="147:32">sb_hybrid</name><index pos:start="147:33" pos:end="147:43">[<expr pos:start="147:34" pos:end="147:42"><name pos:start="147:34" pos:end="147:40">s_index</name><operator pos:start="147:41" pos:end="147:41">+</operator><literal type="number" pos:start="147:42" pos:end="147:42">1</literal></expr>]</index></name> <operator pos:start="147:45" pos:end="147:45">=</operator> <name pos:start="147:47" pos:end="147:47">v</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="151:15" pos:end="179:13">else <block pos:start="151:20" pos:end="179:13">{<block_content pos:start="153:17" pos:end="177:47">

                <expr_stmt pos:start="153:17" pos:end="153:27"><expr pos:start="153:17" pos:end="153:26"><name pos:start="153:17" pos:end="153:17">x</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <name pos:start="153:21" pos:end="153:21">y</name> <operator pos:start="153:23" pos:end="153:24">&gt;&gt;</operator> <literal type="number" pos:start="153:26" pos:end="153:26">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:29"><expr pos:start="155:17" pos:end="155:28"><name pos:start="155:17" pos:end="155:17">y</name> <operator pos:start="155:19" pos:end="155:19">=</operator> <name pos:start="155:21" pos:end="155:21">y</name> <operator pos:start="155:23" pos:end="155:23">&amp;</operator> <literal type="number" pos:start="155:25" pos:end="155:28">0x0f</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:23"><expr pos:start="157:17" pos:end="157:22"><name pos:start="157:17" pos:end="157:17">x</name> <operator pos:start="157:19" pos:end="157:20">+=</operator> <name pos:start="157:22" pos:end="157:22">y</name></expr>;</expr_stmt>

                <if_stmt pos:start="159:17" pos:end="175:17"><if pos:start="159:17" pos:end="163:17">if <condition pos:start="159:20" pos:end="159:27">(<expr pos:start="159:21" pos:end="159:26"><name pos:start="159:21" pos:end="159:21">x</name> <operator pos:start="159:23" pos:end="159:23">&lt;</operator> <literal type="number" pos:start="159:25" pos:end="159:26">15</literal></expr>)</condition> <block pos:start="159:29" pos:end="163:17">{<block_content pos:start="161:21" pos:end="161:100">

                    <macro pos:start="161:21" pos:end="161:100"><name pos:start="161:21" pos:end="161:34">READ_FLIP_SIGN</name><argument_list pos:start="161:35" pos:end="161:100">(<argument pos:start="161:36" pos:end="161:63">g-&gt;sb_hybrid + s_index + !!y</argument>, <argument pos:start="161:66" pos:end="161:99">RENAME(expval_table)[exponent] + x</argument>)</argument_list></macro>

                </block_content>}</block></if> <else pos:start="163:19" pos:end="175:17">else <block pos:start="163:24" pos:end="175:17">{<block_content pos:start="165:21" pos:end="173:50">

                    <expr_stmt pos:start="165:21" pos:end="165:52"><expr pos:start="165:21" pos:end="165:51"><name pos:start="165:21" pos:end="165:21">x</name> <operator pos:start="165:23" pos:end="165:24">+=</operator> <call pos:start="165:26" pos:end="165:51"><name pos:start="165:26" pos:end="165:34">get_bitsz</name><argument_list pos:start="165:35" pos:end="165:51">(<argument pos:start="165:36" pos:end="165:41"><expr pos:start="165:36" pos:end="165:41"><operator pos:start="165:36" pos:end="165:36">&amp;</operator><name pos:start="165:37" pos:end="165:41"><name pos:start="165:37" pos:end="165:37">s</name><operator pos:start="165:38" pos:end="165:39">-&gt;</operator><name pos:start="165:40" pos:end="165:41">gb</name></name></expr></argument>, <argument pos:start="165:44" pos:end="165:50"><expr pos:start="165:44" pos:end="165:50"><name pos:start="165:44" pos:end="165:50">linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="167:21" pos:end="167:49"><expr pos:start="167:21" pos:end="167:48"><name pos:start="167:21" pos:end="167:21">v</name>  <operator pos:start="167:24" pos:end="167:24">=</operator> <call pos:start="167:26" pos:end="167:48"><name pos:start="167:26" pos:end="167:35">l3_unscale</name><argument_list pos:start="167:36" pos:end="167:48">(<argument pos:start="167:37" pos:end="167:37"><expr pos:start="167:37" pos:end="167:37"><name pos:start="167:37" pos:end="167:37">x</name></expr></argument>, <argument pos:start="167:40" pos:end="167:47"><expr pos:start="167:40" pos:end="167:47"><name pos:start="167:40" pos:end="167:47">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="169:21" pos:end="171:31"><if pos:start="169:21" pos:end="171:31">if <condition pos:start="169:24" pos:end="169:42">(<expr pos:start="169:25" pos:end="169:41"><call pos:start="169:25" pos:end="169:41"><name pos:start="169:25" pos:end="169:33">get_bits1</name><argument_list pos:start="169:34" pos:end="169:41">(<argument pos:start="169:35" pos:end="169:40"><expr pos:start="169:35" pos:end="169:40"><operator pos:start="169:35" pos:end="169:35">&amp;</operator><name pos:start="169:36" pos:end="169:40"><name pos:start="169:36" pos:end="169:36">s</name><operator pos:start="169:37" pos:end="169:38">-&gt;</operator><name pos:start="169:39" pos:end="169:40">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="171:25" pos:end="171:31"><block_content pos:start="171:25" pos:end="171:31">

                        <expr_stmt pos:start="171:25" pos:end="171:31"><expr pos:start="171:25" pos:end="171:30"><name pos:start="171:25" pos:end="171:25">v</name> <operator pos:start="171:27" pos:end="171:27">=</operator> <operator pos:start="171:29" pos:end="171:29">-</operator><name pos:start="171:30" pos:end="171:30">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="173:21" pos:end="173:50"><expr pos:start="173:21" pos:end="173:49"><name pos:start="173:21" pos:end="173:45"><name pos:start="173:21" pos:end="173:21">g</name><operator pos:start="173:22" pos:end="173:23">-&gt;</operator><name pos:start="173:24" pos:end="173:32">sb_hybrid</name><index pos:start="173:33" pos:end="173:45">[<expr pos:start="173:34" pos:end="173:44"><name pos:start="173:34" pos:end="173:40">s_index</name><operator pos:start="173:41" pos:end="173:41">+</operator><operator pos:start="173:42" pos:end="173:42">!</operator><operator pos:start="173:43" pos:end="173:43">!</operator><name pos:start="173:44" pos:end="173:44">y</name></expr>]</index></name> <operator pos:start="173:47" pos:end="173:47">=</operator> <name pos:start="173:49" pos:end="173:49">v</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:47"><expr pos:start="177:17" pos:end="177:46"><name pos:start="177:17" pos:end="177:42"><name pos:start="177:17" pos:end="177:17">g</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:28">sb_hybrid</name><index pos:start="177:29" pos:end="177:42">[<expr pos:start="177:30" pos:end="177:41"><name pos:start="177:30" pos:end="177:36">s_index</name> <operator pos:start="177:38" pos:end="177:38">+</operator> <operator pos:start="177:40" pos:end="177:40">!</operator><name pos:start="177:41" pos:end="177:41">y</name></expr>]</index></name> <operator pos:start="177:44" pos:end="177:44">=</operator> <literal type="number" pos:start="177:46" pos:end="177:46">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:25"><expr pos:start="181:13" pos:end="181:24"><name pos:start="181:13" pos:end="181:19">s_index</name> <operator pos:start="181:21" pos:end="181:22">+=</operator> <literal type="number" pos:start="181:24" pos:end="181:24">2</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="189:5" pos:end="189:26">/* high frequencies */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:48"><expr pos:start="191:5" pos:end="191:47"><name pos:start="191:5" pos:end="191:7">vlc</name> <operator pos:start="191:9" pos:end="191:9">=</operator> <operator pos:start="191:11" pos:end="191:11">&amp;</operator><name pos:start="191:12" pos:end="191:47"><name pos:start="191:12" pos:end="191:24">huff_quad_vlc</name><index pos:start="191:25" pos:end="191:47">[<expr pos:start="191:26" pos:end="191:46"><name pos:start="191:26" pos:end="191:46"><name pos:start="191:26" pos:end="191:26">g</name><operator pos:start="191:27" pos:end="191:28">-&gt;</operator><name pos:start="191:29" pos:end="191:46">count1table_select</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:17"><expr pos:start="193:5" pos:end="193:16"><name pos:start="193:5" pos:end="193:12">last_pos</name> <operator pos:start="193:14" pos:end="193:14">=</operator> <literal type="number" pos:start="193:16" pos:end="193:16">0</literal></expr>;</expr_stmt>

    <while pos:start="195:5" pos:end="267:5">while <condition pos:start="195:11" pos:end="195:26">(<expr pos:start="195:12" pos:end="195:25"><name pos:start="195:12" pos:end="195:18">s_index</name> <operator pos:start="195:20" pos:end="195:21">&lt;=</operator> <literal type="number" pos:start="195:23" pos:end="195:25">572</literal></expr>)</condition> <block pos:start="195:28" pos:end="267:5">{<block_content pos:start="197:9" pos:end="265:21">

        <decl_stmt pos:start="197:9" pos:end="197:22"><decl pos:start="197:9" pos:end="197:15"><type pos:start="197:9" pos:end="197:11"><name pos:start="197:9" pos:end="197:11">int</name></type> <name pos:start="197:13" pos:end="197:15">pos</name></decl>, <decl pos:start="197:18" pos:end="197:21"><type ref="prev" pos:start="197:9" pos:end="197:11"/><name pos:start="197:18" pos:end="197:21">code</name></decl>;</decl_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:37"><expr pos:start="199:9" pos:end="199:36"><name pos:start="199:9" pos:end="199:11">pos</name> <operator pos:start="199:13" pos:end="199:13">=</operator> <call pos:start="199:15" pos:end="199:36"><name pos:start="199:15" pos:end="199:28">get_bits_count</name><argument_list pos:start="199:29" pos:end="199:36">(<argument pos:start="199:30" pos:end="199:35"><expr pos:start="199:30" pos:end="199:35"><operator pos:start="199:30" pos:end="199:30">&amp;</operator><name pos:start="199:31" pos:end="199:35"><name pos:start="199:31" pos:end="199:31">s</name><operator pos:start="199:32" pos:end="199:33">-&gt;</operator><name pos:start="199:34" pos:end="199:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="233:9"><if pos:start="201:9" pos:end="233:9">if <condition pos:start="201:12" pos:end="201:27">(<expr pos:start="201:13" pos:end="201:26"><name pos:start="201:13" pos:end="201:15">pos</name> <operator pos:start="201:17" pos:end="201:18">&gt;=</operator> <name pos:start="201:20" pos:end="201:26">end_pos</name></expr>)</condition> <block pos:start="201:29" pos:end="233:9">{<block_content pos:start="203:13" pos:end="231:22">

            <if_stmt pos:start="203:13" pos:end="221:13"><if pos:start="203:13" pos:end="221:13">if <condition pos:start="203:16" pos:end="203:43">(<expr pos:start="203:17" pos:end="203:42"><name pos:start="203:17" pos:end="203:19">pos</name> <operator pos:start="203:21" pos:end="203:21">&gt;</operator> <name pos:start="203:23" pos:end="203:30">end_pos2</name> <operator pos:start="203:32" pos:end="203:33">&amp;&amp;</operator> <name pos:start="203:35" pos:end="203:42">last_pos</name></expr>)</condition> <block pos:start="203:45" pos:end="221:13">{<block_content pos:start="209:17" pos:end="219:22">

                <comment type="block" pos:start="205:17" pos:end="207:57">/* some encoders generate an incorrect size for this

                   part. We must go back into the data */</comment>

                <expr_stmt pos:start="209:17" pos:end="209:29"><expr pos:start="209:17" pos:end="209:28"><name pos:start="209:17" pos:end="209:23">s_index</name> <operator pos:start="209:25" pos:end="209:26">-=</operator> <literal type="number" pos:start="209:28" pos:end="209:28">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:55"><expr pos:start="211:17" pos:end="211:54"><call pos:start="211:17" pos:end="211:54"><name pos:start="211:17" pos:end="211:30">skip_bits_long</name><argument_list pos:start="211:31" pos:end="211:54">(<argument pos:start="211:32" pos:end="211:37"><expr pos:start="211:32" pos:end="211:37"><operator pos:start="211:32" pos:end="211:32">&amp;</operator><name pos:start="211:33" pos:end="211:37"><name pos:start="211:33" pos:end="211:33">s</name><operator pos:start="211:34" pos:end="211:35">-&gt;</operator><name pos:start="211:36" pos:end="211:37">gb</name></name></expr></argument>, <argument pos:start="211:40" pos:end="211:53"><expr pos:start="211:40" pos:end="211:53"><name pos:start="211:40" pos:end="211:47">last_pos</name> <operator pos:start="211:49" pos:end="211:49">-</operator> <name pos:start="211:51" pos:end="211:53">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:128"><expr pos:start="213:17" pos:end="213:127"><call pos:start="213:17" pos:end="213:127"><name pos:start="213:17" pos:end="213:22">av_log</name><argument_list pos:start="213:23" pos:end="213:127">(<argument pos:start="213:24" pos:end="213:31"><expr pos:start="213:24" pos:end="213:31"><name pos:start="213:24" pos:end="213:31"><name pos:start="213:24" pos:end="213:24">s</name><operator pos:start="213:25" pos:end="213:26">-&gt;</operator><name pos:start="213:27" pos:end="213:31">avctx</name></name></expr></argument>, <argument pos:start="213:34" pos:end="213:44"><expr pos:start="213:34" pos:end="213:44"><name pos:start="213:34" pos:end="213:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="213:47" pos:end="213:83"><expr pos:start="213:47" pos:end="213:83"><literal type="string" pos:start="213:47" pos:end="213:83">"overread, skip %d enddists: %d %d\n"</literal></expr></argument>, <argument pos:start="213:86" pos:end="213:99"><expr pos:start="213:86" pos:end="213:99"><name pos:start="213:86" pos:end="213:93">last_pos</name> <operator pos:start="213:95" pos:end="213:95">-</operator> <name pos:start="213:97" pos:end="213:99">pos</name></expr></argument>, <argument pos:start="213:102" pos:end="213:112"><expr pos:start="213:102" pos:end="213:112"><name pos:start="213:102" pos:end="213:108">end_pos</name><operator pos:start="213:109" pos:end="213:109">-</operator><name pos:start="213:110" pos:end="213:112">pos</name></expr></argument>, <argument pos:start="213:115" pos:end="213:126"><expr pos:start="213:115" pos:end="213:126"><name pos:start="213:115" pos:end="213:122">end_pos2</name><operator pos:start="213:123" pos:end="213:123">-</operator><name pos:start="213:124" pos:end="213:126">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="215:17" pos:end="217:30"><if pos:start="215:17" pos:end="217:30">if<condition pos:start="215:19" pos:end="215:56">(<expr pos:start="215:20" pos:end="215:55"><name pos:start="215:20" pos:end="215:37"><name pos:start="215:20" pos:end="215:20">s</name><operator pos:start="215:21" pos:end="215:22">-&gt;</operator><name pos:start="215:23" pos:end="215:37">err_recognition</name></name> <operator pos:start="215:39" pos:end="215:39">&amp;</operator> <name pos:start="215:41" pos:end="215:55">AV_EF_BITSTREAM</name></expr>)</condition><block type="pseudo" pos:start="217:21" pos:end="217:30"><block_content pos:start="217:21" pos:end="217:30">

                    <expr_stmt pos:start="217:21" pos:end="217:30"><expr pos:start="217:21" pos:end="217:29"><name pos:start="217:21" pos:end="217:27">s_index</name><operator pos:start="217:28" pos:end="217:28">=</operator><literal type="number" pos:start="217:29" pos:end="217:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="219:17" pos:end="219:22">break;</break>

            </block_content>}</block></if></if_stmt>

<comment type="line" pos:start="223:1" pos:end="223:101">//                av_log(NULL, AV_LOG_ERROR, "pos2: %d %d %d %d\n", pos, end_pos, end_pos2, s_index);</comment>

            <expr_stmt pos:start="225:13" pos:end="225:56"><expr pos:start="225:13" pos:end="225:55"><call pos:start="225:13" pos:end="225:55"><name pos:start="225:13" pos:end="225:25">switch_buffer</name><argument_list pos:start="225:26" pos:end="225:55">(<argument pos:start="225:27" pos:end="225:27"><expr pos:start="225:27" pos:end="225:27"><name pos:start="225:27" pos:end="225:27">s</name></expr></argument>, <argument pos:start="225:30" pos:end="225:33"><expr pos:start="225:30" pos:end="225:33"><operator pos:start="225:30" pos:end="225:30">&amp;</operator><name pos:start="225:31" pos:end="225:33">pos</name></expr></argument>, <argument pos:start="225:36" pos:end="225:43"><expr pos:start="225:36" pos:end="225:43"><operator pos:start="225:36" pos:end="225:36">&amp;</operator><name pos:start="225:37" pos:end="225:43">end_pos</name></expr></argument>, <argument pos:start="225:46" pos:end="225:54"><expr pos:start="225:46" pos:end="225:54"><operator pos:start="225:46" pos:end="225:46">&amp;</operator><name pos:start="225:47" pos:end="225:54">end_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="227:1" pos:end="227:92">//                av_log(NULL, AV_LOG_ERROR, "new pos2: %d %d %d\n", pos, end_pos, s_index);</comment>

            <if_stmt pos:start="229:13" pos:end="231:22"><if pos:start="229:13" pos:end="231:22">if <condition pos:start="229:16" pos:end="229:31">(<expr pos:start="229:17" pos:end="229:30"><name pos:start="229:17" pos:end="229:19">pos</name> <operator pos:start="229:21" pos:end="229:22">&gt;=</operator> <name pos:start="229:24" pos:end="229:30">end_pos</name></expr>)</condition><block type="pseudo" pos:start="231:17" pos:end="231:22"><block_content pos:start="231:17" pos:end="231:22">

                <break pos:start="231:17" pos:end="231:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:23"><expr pos:start="235:9" pos:end="235:22"><name pos:start="235:9" pos:end="235:16">last_pos</name> <operator pos:start="235:18" pos:end="235:18">=</operator> <name pos:start="235:20" pos:end="235:22">pos</name></expr>;</expr_stmt>



        <expr_stmt pos:start="239:9" pos:end="239:58"><expr pos:start="239:9" pos:end="239:57"><name pos:start="239:9" pos:end="239:12">code</name> <operator pos:start="239:14" pos:end="239:14">=</operator> <call pos:start="239:16" pos:end="239:57"><name pos:start="239:16" pos:end="239:23">get_vlc2</name><argument_list pos:start="239:24" pos:end="239:57">(<argument pos:start="239:25" pos:end="239:30"><expr pos:start="239:25" pos:end="239:30"><operator pos:start="239:25" pos:end="239:25">&amp;</operator><name pos:start="239:26" pos:end="239:30"><name pos:start="239:26" pos:end="239:26">s</name><operator pos:start="239:27" pos:end="239:28">-&gt;</operator><name pos:start="239:29" pos:end="239:30">gb</name></name></expr></argument>, <argument pos:start="239:33" pos:end="239:42"><expr pos:start="239:33" pos:end="239:42"><name pos:start="239:33" pos:end="239:42"><name pos:start="239:33" pos:end="239:35">vlc</name><operator pos:start="239:36" pos:end="239:37">-&gt;</operator><name pos:start="239:38" pos:end="239:42">table</name></name></expr></argument>, <argument pos:start="239:45" pos:end="239:53"><expr pos:start="239:45" pos:end="239:53"><name pos:start="239:45" pos:end="239:53"><name pos:start="239:45" pos:end="239:47">vlc</name><operator pos:start="239:48" pos:end="239:49">-&gt;</operator><name pos:start="239:50" pos:end="239:53">bits</name></name></expr></argument>, <argument pos:start="239:56" pos:end="239:56"><expr pos:start="239:56" pos:end="239:56"><literal type="number" pos:start="239:56" pos:end="239:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:73"><expr pos:start="241:9" pos:end="241:72"><call pos:start="241:9" pos:end="241:72"><name pos:start="241:9" pos:end="241:15">av_dlog</name><argument_list pos:start="241:16" pos:end="241:72">(<argument pos:start="241:17" pos:end="241:24"><expr pos:start="241:17" pos:end="241:24"><name pos:start="241:17" pos:end="241:24"><name pos:start="241:17" pos:end="241:17">s</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:24">avctx</name></name></expr></argument>, <argument pos:start="241:27" pos:end="241:42"><expr pos:start="241:27" pos:end="241:42"><literal type="string" pos:start="241:27" pos:end="241:42">"t=%d code=%d\n"</literal></expr></argument>, <argument pos:start="241:45" pos:end="241:65"><expr pos:start="241:45" pos:end="241:65"><name pos:start="241:45" pos:end="241:65"><name pos:start="241:45" pos:end="241:45">g</name><operator pos:start="241:46" pos:end="241:47">-&gt;</operator><name pos:start="241:48" pos:end="241:65">count1table_select</name></name></expr></argument>, <argument pos:start="241:68" pos:end="241:71"><expr pos:start="241:68" pos:end="241:71"><name pos:start="241:68" pos:end="241:71">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="249:36"><expr pos:start="243:9" pos:end="249:35"><name pos:start="243:9" pos:end="243:31"><name pos:start="243:9" pos:end="243:9">g</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:20">sb_hybrid</name><index pos:start="243:21" pos:end="243:31">[<expr pos:start="243:22" pos:end="243:30"><name pos:start="243:22" pos:end="243:28">s_index</name><operator pos:start="243:29" pos:end="243:29">+</operator><literal type="number" pos:start="243:30" pos:end="243:30">0</literal></expr>]</index></name> <operator pos:start="243:33" pos:end="243:33">=</operator>

        <name pos:start="245:9" pos:end="245:31"><name pos:start="245:9" pos:end="245:9">g</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:20">sb_hybrid</name><index pos:start="245:21" pos:end="245:31">[<expr pos:start="245:22" pos:end="245:30"><name pos:start="245:22" pos:end="245:28">s_index</name><operator pos:start="245:29" pos:end="245:29">+</operator><literal type="number" pos:start="245:30" pos:end="245:30">1</literal></expr>]</index></name> <operator pos:start="245:33" pos:end="245:33">=</operator>

        <name pos:start="247:9" pos:end="247:31"><name pos:start="247:9" pos:end="247:9">g</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:20">sb_hybrid</name><index pos:start="247:21" pos:end="247:31">[<expr pos:start="247:22" pos:end="247:30"><name pos:start="247:22" pos:end="247:28">s_index</name><operator pos:start="247:29" pos:end="247:29">+</operator><literal type="number" pos:start="247:30" pos:end="247:30">2</literal></expr>]</index></name> <operator pos:start="247:33" pos:end="247:33">=</operator>

        <name pos:start="249:9" pos:end="249:31"><name pos:start="249:9" pos:end="249:9">g</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:20">sb_hybrid</name><index pos:start="249:21" pos:end="249:31">[<expr pos:start="249:22" pos:end="249:30"><name pos:start="249:22" pos:end="249:28">s_index</name><operator pos:start="249:29" pos:end="249:29">+</operator><literal type="number" pos:start="249:30" pos:end="249:30">3</literal></expr>]</index></name> <operator pos:start="249:33" pos:end="249:33">=</operator> <literal type="number" pos:start="249:35" pos:end="249:35">0</literal></expr>;</expr_stmt>

        <while pos:start="251:9" pos:end="263:9">while <condition pos:start="251:15" pos:end="251:20">(<expr pos:start="251:16" pos:end="251:19"><name pos:start="251:16" pos:end="251:19">code</name></expr>)</condition> <block pos:start="251:22" pos:end="263:9">{<block_content pos:start="253:13" pos:end="261:80">

            <decl_stmt pos:start="253:13" pos:end="253:78"><decl pos:start="253:13" pos:end="253:77"><type pos:start="253:13" pos:end="253:28"><specifier pos:start="253:13" pos:end="253:18">static</specifier> <specifier pos:start="253:20" pos:end="253:24">const</specifier> <name pos:start="253:26" pos:end="253:28">int</name></type> <name pos:start="253:30" pos:end="253:39"><name pos:start="253:30" pos:end="253:35">idxtab</name><index pos:start="253:36" pos:end="253:39">[<expr pos:start="253:37" pos:end="253:38"><literal type="number" pos:start="253:37" pos:end="253:38">16</literal></expr>]</index></name> <init pos:start="253:41" pos:end="253:77">= <expr pos:start="253:43" pos:end="253:77"><block pos:start="253:43" pos:end="253:77">{ <expr pos:start="253:45" pos:end="253:45"><literal type="number" pos:start="253:45" pos:end="253:45">3</literal></expr>,<expr pos:start="253:47" pos:end="253:47"><literal type="number" pos:start="253:47" pos:end="253:47">3</literal></expr>,<expr pos:start="253:49" pos:end="253:49"><literal type="number" pos:start="253:49" pos:end="253:49">2</literal></expr>,<expr pos:start="253:51" pos:end="253:51"><literal type="number" pos:start="253:51" pos:end="253:51">2</literal></expr>,<expr pos:start="253:53" pos:end="253:53"><literal type="number" pos:start="253:53" pos:end="253:53">1</literal></expr>,<expr pos:start="253:55" pos:end="253:55"><literal type="number" pos:start="253:55" pos:end="253:55">1</literal></expr>,<expr pos:start="253:57" pos:end="253:57"><literal type="number" pos:start="253:57" pos:end="253:57">1</literal></expr>,<expr pos:start="253:59" pos:end="253:59"><literal type="number" pos:start="253:59" pos:end="253:59">1</literal></expr>,<expr pos:start="253:61" pos:end="253:61"><literal type="number" pos:start="253:61" pos:end="253:61">0</literal></expr>,<expr pos:start="253:63" pos:end="253:63"><literal type="number" pos:start="253:63" pos:end="253:63">0</literal></expr>,<expr pos:start="253:65" pos:end="253:65"><literal type="number" pos:start="253:65" pos:end="253:65">0</literal></expr>,<expr pos:start="253:67" pos:end="253:67"><literal type="number" pos:start="253:67" pos:end="253:67">0</literal></expr>,<expr pos:start="253:69" pos:end="253:69"><literal type="number" pos:start="253:69" pos:end="253:69">0</literal></expr>,<expr pos:start="253:71" pos:end="253:71"><literal type="number" pos:start="253:71" pos:end="253:71">0</literal></expr>,<expr pos:start="253:73" pos:end="253:73"><literal type="number" pos:start="253:73" pos:end="253:73">0</literal></expr>,<expr pos:start="253:75" pos:end="253:75"><literal type="number" pos:start="253:75" pos:end="253:75">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="255:13" pos:end="255:18"><decl pos:start="255:13" pos:end="255:17"><type pos:start="255:13" pos:end="255:15"><name pos:start="255:13" pos:end="255:15">int</name></type> <name pos:start="255:17" pos:end="255:17">v</name></decl>;</decl_stmt>

            <decl_stmt pos:start="257:13" pos:end="257:45"><decl pos:start="257:13" pos:end="257:44"><type pos:start="257:13" pos:end="257:15"><name pos:start="257:13" pos:end="257:15">int</name></type> <name pos:start="257:17" pos:end="257:19">pos</name> <init pos:start="257:21" pos:end="257:44">= <expr pos:start="257:23" pos:end="257:44"><name pos:start="257:23" pos:end="257:29">s_index</name> <operator pos:start="257:31" pos:end="257:31">+</operator> <name pos:start="257:33" pos:end="257:44"><name pos:start="257:33" pos:end="257:38">idxtab</name><index pos:start="257:39" pos:end="257:44">[<expr pos:start="257:40" pos:end="257:43"><name pos:start="257:40" pos:end="257:43">code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:40"><expr pos:start="259:13" pos:end="259:39"><name pos:start="259:13" pos:end="259:16">code</name>   <operator pos:start="259:20" pos:end="259:21">^=</operator> <literal type="number" pos:start="259:23" pos:end="259:23">8</literal> <operator pos:start="259:25" pos:end="259:26">&gt;&gt;</operator> <name pos:start="259:28" pos:end="259:39"><name pos:start="259:28" pos:end="259:33">idxtab</name><index pos:start="259:34" pos:end="259:39">[<expr pos:start="259:35" pos:end="259:38"><name pos:start="259:35" pos:end="259:38">code</name></expr>]</index></name></expr>;</expr_stmt>

            <macro pos:start="261:13" pos:end="261:80"><name pos:start="261:13" pos:end="261:26">READ_FLIP_SIGN</name><argument_list pos:start="261:27" pos:end="261:80">(<argument pos:start="261:28" pos:end="261:45">g-&gt;sb_hybrid + pos</argument>, <argument pos:start="261:48" pos:end="261:79">RENAME(exp_table)+exponents[pos]</argument>)</argument_list></macro>

        </block_content>}</block></while>

        <expr_stmt pos:start="265:9" pos:end="265:21"><expr pos:start="265:9" pos:end="265:20"><name pos:start="265:9" pos:end="265:15">s_index</name> <operator pos:start="265:17" pos:end="265:18">+=</operator> <literal type="number" pos:start="265:20" pos:end="265:20">4</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="269:5" pos:end="269:29">/* skip extension bits */</comment>

    <expr_stmt pos:start="271:5" pos:end="271:50"><expr pos:start="271:5" pos:end="271:49"><name pos:start="271:5" pos:end="271:13">bits_left</name> <operator pos:start="271:15" pos:end="271:15">=</operator> <name pos:start="271:17" pos:end="271:24">end_pos2</name> <operator pos:start="271:26" pos:end="271:26">-</operator> <call pos:start="271:28" pos:end="271:49"><name pos:start="271:28" pos:end="271:41">get_bits_count</name><argument_list pos:start="271:42" pos:end="271:49">(<argument pos:start="271:43" pos:end="271:48"><expr pos:start="271:43" pos:end="271:48"><operator pos:start="271:43" pos:end="271:43">&amp;</operator><name pos:start="271:44" pos:end="271:48"><name pos:start="271:44" pos:end="271:44">s</name><operator pos:start="271:45" pos:end="271:46">-&gt;</operator><name pos:start="271:47" pos:end="271:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="273:1" pos:end="273:77">//av_log(NULL, AV_LOG_ERROR, "left:%d buf:%p\n", bits_left, s-&gt;in_gb.buffer);</comment>

    <if_stmt pos:start="275:5" pos:end="287:5"><if pos:start="275:5" pos:end="281:5">if <condition pos:start="275:8" pos:end="275:64">(<expr pos:start="275:9" pos:end="275:63"><name pos:start="275:9" pos:end="275:17">bits_left</name> <operator pos:start="275:19" pos:end="275:19">&lt;</operator> <literal type="number" pos:start="275:21" pos:end="275:21">0</literal> <operator pos:start="275:23" pos:end="275:24">&amp;&amp;</operator> <operator pos:start="275:26" pos:end="275:26">(</operator><name pos:start="275:27" pos:end="275:44"><name pos:start="275:27" pos:end="275:27">s</name><operator pos:start="275:28" pos:end="275:29">-&gt;</operator><name pos:start="275:30" pos:end="275:44">err_recognition</name></name> <operator pos:start="275:46" pos:end="275:46">&amp;</operator> <name pos:start="275:48" pos:end="275:62">AV_EF_BITSTREAM</name><operator pos:start="275:63" pos:end="275:63">)</operator></expr>)</condition> <block pos:start="275:66" pos:end="281:5">{<block_content pos:start="277:9" pos:end="279:18">

        <expr_stmt pos:start="277:9" pos:end="277:68"><expr pos:start="277:9" pos:end="277:67"><call pos:start="277:9" pos:end="277:67"><name pos:start="277:9" pos:end="277:14">av_log</name><argument_list pos:start="277:15" pos:end="277:67">(<argument pos:start="277:16" pos:end="277:23"><expr pos:start="277:16" pos:end="277:23"><name pos:start="277:16" pos:end="277:23"><name pos:start="277:16" pos:end="277:16">s</name><operator pos:start="277:17" pos:end="277:18">-&gt;</operator><name pos:start="277:19" pos:end="277:23">avctx</name></name></expr></argument>, <argument pos:start="277:26" pos:end="277:37"><expr pos:start="277:26" pos:end="277:37"><name pos:start="277:26" pos:end="277:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="277:40" pos:end="277:55"><expr pos:start="277:40" pos:end="277:55"><literal type="string" pos:start="277:40" pos:end="277:55">"bits_left=%d\n"</literal></expr></argument>, <argument pos:start="277:58" pos:end="277:66"><expr pos:start="277:58" pos:end="277:66"><name pos:start="277:58" pos:end="277:66">bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:18"><expr pos:start="279:9" pos:end="279:17"><name pos:start="279:9" pos:end="279:15">s_index</name><operator pos:start="279:16" pos:end="279:16">=</operator><literal type="number" pos:start="279:17" pos:end="279:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="281:7" pos:end="287:5">else if <condition pos:start="281:15" pos:end="281:68">(<expr pos:start="281:16" pos:end="281:67"><name pos:start="281:16" pos:end="281:24">bits_left</name> <operator pos:start="281:26" pos:end="281:26">&gt;</operator> <literal type="number" pos:start="281:28" pos:end="281:28">0</literal> <operator pos:start="281:30" pos:end="281:31">&amp;&amp;</operator> <operator pos:start="281:33" pos:end="281:33">(</operator><name pos:start="281:34" pos:end="281:51"><name pos:start="281:34" pos:end="281:34">s</name><operator pos:start="281:35" pos:end="281:36">-&gt;</operator><name pos:start="281:37" pos:end="281:51">err_recognition</name></name> <operator pos:start="281:53" pos:end="281:53">&amp;</operator> <name pos:start="281:55" pos:end="281:66">AV_EF_BUFFER</name><operator pos:start="281:67" pos:end="281:67">)</operator></expr>)</condition> <block pos:start="281:70" pos:end="287:5">{<block_content pos:start="283:9" pos:end="285:20">

        <expr_stmt pos:start="283:9" pos:end="283:68"><expr pos:start="283:9" pos:end="283:67"><call pos:start="283:9" pos:end="283:67"><name pos:start="283:9" pos:end="283:14">av_log</name><argument_list pos:start="283:15" pos:end="283:67">(<argument pos:start="283:16" pos:end="283:23"><expr pos:start="283:16" pos:end="283:23"><name pos:start="283:16" pos:end="283:23"><name pos:start="283:16" pos:end="283:16">s</name><operator pos:start="283:17" pos:end="283:18">-&gt;</operator><name pos:start="283:19" pos:end="283:23">avctx</name></name></expr></argument>, <argument pos:start="283:26" pos:end="283:37"><expr pos:start="283:26" pos:end="283:37"><name pos:start="283:26" pos:end="283:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="283:40" pos:end="283:55"><expr pos:start="283:40" pos:end="283:55"><literal type="string" pos:start="283:40" pos:end="283:55">"bits_left=%d\n"</literal></expr></argument>, <argument pos:start="283:58" pos:end="283:66"><expr pos:start="283:58" pos:end="283:66"><name pos:start="283:58" pos:end="283:66">bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:20"><expr pos:start="285:9" pos:end="285:19"><name pos:start="285:9" pos:end="285:15">s_index</name> <operator pos:start="285:17" pos:end="285:17">=</operator> <literal type="number" pos:start="285:19" pos:end="285:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:79"><expr pos:start="289:5" pos:end="289:78"><call pos:start="289:5" pos:end="289:78"><name pos:start="289:5" pos:end="289:10">memset</name><argument_list pos:start="289:11" pos:end="289:78">(<argument pos:start="289:12" pos:end="289:33"><expr pos:start="289:12" pos:end="289:33"><operator pos:start="289:12" pos:end="289:12">&amp;</operator><name pos:start="289:13" pos:end="289:33"><name pos:start="289:13" pos:end="289:13">g</name><operator pos:start="289:14" pos:end="289:15">-&gt;</operator><name pos:start="289:16" pos:end="289:24">sb_hybrid</name><index pos:start="289:25" pos:end="289:33">[<expr pos:start="289:26" pos:end="289:32"><name pos:start="289:26" pos:end="289:32">s_index</name></expr>]</index></name></expr></argument>, <argument pos:start="289:36" pos:end="289:36"><expr pos:start="289:36" pos:end="289:36"><literal type="number" pos:start="289:36" pos:end="289:36">0</literal></expr></argument>, <argument pos:start="289:39" pos:end="289:77"><expr pos:start="289:39" pos:end="289:77"><sizeof pos:start="289:39" pos:end="289:59">sizeof<argument_list pos:start="289:45" pos:end="289:59">(<argument pos:start="289:46" pos:end="289:58"><expr pos:start="289:46" pos:end="289:58"><operator pos:start="289:46" pos:end="289:46">*</operator><name pos:start="289:47" pos:end="289:58"><name pos:start="289:47" pos:end="289:47">g</name><operator pos:start="289:48" pos:end="289:49">-&gt;</operator><name pos:start="289:50" pos:end="289:58">sb_hybrid</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="289:61" pos:end="289:61">*</operator> <operator pos:start="289:63" pos:end="289:63">(</operator><literal type="number" pos:start="289:64" pos:end="289:68">576</literal> <operator pos:start="289:68" pos:end="289:68">-</operator> <name pos:start="289:70" pos:end="289:76">s_index</name><operator pos:start="289:77" pos:end="289:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:38"><expr pos:start="291:5" pos:end="291:37"><call pos:start="291:5" pos:end="291:37"><name pos:start="291:5" pos:end="291:18">skip_bits_long</name><argument_list pos:start="291:19" pos:end="291:37">(<argument pos:start="291:20" pos:end="291:25"><expr pos:start="291:20" pos:end="291:25"><operator pos:start="291:20" pos:end="291:20">&amp;</operator><name pos:start="291:21" pos:end="291:25"><name pos:start="291:21" pos:end="291:21">s</name><operator pos:start="291:22" pos:end="291:23">-&gt;</operator><name pos:start="291:24" pos:end="291:25">gb</name></name></expr></argument>, <argument pos:start="291:28" pos:end="291:36"><expr pos:start="291:28" pos:end="291:36"><name pos:start="291:28" pos:end="291:36">bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="295:5" pos:end="295:31"><expr pos:start="295:5" pos:end="295:30"><name pos:start="295:5" pos:end="295:5">i</name> <operator pos:start="295:7" pos:end="295:7">=</operator> <call pos:start="295:9" pos:end="295:30"><name pos:start="295:9" pos:end="295:22">get_bits_count</name><argument_list pos:start="295:23" pos:end="295:30">(<argument pos:start="295:24" pos:end="295:29"><expr pos:start="295:24" pos:end="295:29"><operator pos:start="295:24" pos:end="295:24">&amp;</operator><name pos:start="295:25" pos:end="295:29"><name pos:start="295:25" pos:end="295:25">s</name><operator pos:start="295:26" pos:end="295:27">-&gt;</operator><name pos:start="295:28" pos:end="295:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:46"><expr pos:start="297:5" pos:end="297:45"><call pos:start="297:5" pos:end="297:45"><name pos:start="297:5" pos:end="297:17">switch_buffer</name><argument_list pos:start="297:18" pos:end="297:45">(<argument pos:start="297:19" pos:end="297:19"><expr pos:start="297:19" pos:end="297:19"><name pos:start="297:19" pos:end="297:19">s</name></expr></argument>, <argument pos:start="297:22" pos:end="297:23"><expr pos:start="297:22" pos:end="297:23"><operator pos:start="297:22" pos:end="297:22">&amp;</operator><name pos:start="297:23" pos:end="297:23">i</name></expr></argument>, <argument pos:start="297:26" pos:end="297:33"><expr pos:start="297:26" pos:end="297:33"><operator pos:start="297:26" pos:end="297:26">&amp;</operator><name pos:start="297:27" pos:end="297:33">end_pos</name></expr></argument>, <argument pos:start="297:36" pos:end="297:44"><expr pos:start="297:36" pos:end="297:44"><operator pos:start="297:36" pos:end="297:36">&amp;</operator><name pos:start="297:37" pos:end="297:44">end_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="301:5" pos:end="301:13">return <expr pos:start="301:12" pos:end="301:12"><literal type="number" pos:start="301:12" pos:end="301:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
