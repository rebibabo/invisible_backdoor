<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5862.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">tgen_andi</name><parameter_list pos:start="1:22" pos:end="1:77">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:35"><name pos:start="1:23" pos:end="1:32">TCGContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:35">s</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:44">TCGType</name></type> <name pos:start="1:46" pos:end="1:49">type</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:57">TCGReg</name></type> <name pos:start="1:59" pos:end="1:62">dest</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:76"><decl pos:start="1:65" pos:end="1:76"><type pos:start="1:65" pos:end="1:76"><name pos:start="1:65" pos:end="1:72">uint64_t</name></type> <name pos:start="1:74" pos:end="1:76">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:5">

    <decl_stmt pos:start="5:5" pos:end="9:6"><decl pos:start="5:5" pos:end="9:5"><type pos:start="5:5" pos:end="5:27"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:27">S390Opcode</name></type> <name pos:start="5:29" pos:end="5:39"><name pos:start="5:29" pos:end="5:36">ni_insns</name><index pos:start="5:37" pos:end="5:39">[<expr pos:start="5:38" pos:end="5:38"><literal type="number" pos:start="5:38" pos:end="5:38">4</literal></expr>]</index></name> <init pos:start="5:41" pos:end="9:5">= <expr pos:start="5:43" pos:end="9:5"><block pos:start="5:43" pos:end="9:5">{

        <expr pos:start="7:9" pos:end="7:15"><name pos:start="7:9" pos:end="7:15">RI_NILL</name></expr>, <expr pos:start="7:18" pos:end="7:24"><name pos:start="7:18" pos:end="7:24">RI_NILH</name></expr>, <expr pos:start="7:27" pos:end="7:33"><name pos:start="7:27" pos:end="7:33">RI_NIHL</name></expr>, <expr pos:start="7:36" pos:end="7:42"><name pos:start="7:36" pos:end="7:42">RI_NIHH</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="15:6"><decl pos:start="11:5" pos:end="15:5"><type pos:start="11:5" pos:end="11:27"><specifier pos:start="11:5" pos:end="11:10">static</specifier> <specifier pos:start="11:12" pos:end="11:16">const</specifier> <name pos:start="11:18" pos:end="11:27">S390Opcode</name></type> <name pos:start="11:29" pos:end="11:40"><name pos:start="11:29" pos:end="11:37">nif_insns</name><index pos:start="11:38" pos:end="11:40">[<expr pos:start="11:39" pos:end="11:39"><literal type="number" pos:start="11:39" pos:end="11:39">2</literal></expr>]</index></name> <init pos:start="11:42" pos:end="15:5">= <expr pos:start="11:44" pos:end="15:5"><block pos:start="11:44" pos:end="15:5">{

        <expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">RIL_NILF</name></expr>, <expr pos:start="13:19" pos:end="13:26"><name pos:start="13:19" pos:end="13:26">RIL_NIHF</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:68"><decl pos:start="17:5" pos:end="17:67"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:18">valid</name> <init pos:start="17:20" pos:end="17:67">= <expr pos:start="17:22" pos:end="17:67"><operator pos:start="17:22" pos:end="17:22">(</operator><ternary pos:start="17:23" pos:end="17:66"><condition pos:start="17:23" pos:end="17:44"><expr pos:start="17:23" pos:end="17:42"><name pos:start="17:23" pos:end="17:26">type</name> <operator pos:start="17:28" pos:end="17:29">==</operator> <name pos:start="17:31" pos:end="17:42">TCG_TYPE_I32</name></expr> ?</condition><then pos:start="17:46" pos:end="17:58"> <expr pos:start="17:46" pos:end="17:58"><literal type="number" pos:start="17:46" pos:end="17:58">0xffffffffull</literal></expr> </then><else pos:start="17:60" pos:end="17:66">: <expr pos:start="17:62" pos:end="17:66"><operator pos:start="17:62" pos:end="17:62">-</operator><literal type="number" pos:start="17:63" pos:end="17:66">1ull</literal></expr></else></ternary><operator pos:start="17:67" pos:end="17:67">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:40">/* Look for the zero-extensions.  */</comment>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:36">(<expr pos:start="25:9" pos:end="25:35"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:12">val</name> <operator pos:start="25:14" pos:end="25:14">&amp;</operator> <name pos:start="25:16" pos:end="25:20">valid</name><operator pos:start="25:21" pos:end="25:21">)</operator> <operator pos:start="25:23" pos:end="25:24">==</operator> <literal type="number" pos:start="25:26" pos:end="25:35">0xffffffff</literal></expr>)</condition> <block pos:start="25:38" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:35"><expr pos:start="27:9" pos:end="27:34"><call pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:19">tgen_ext32u</name><argument_list pos:start="27:20" pos:end="27:34">(<argument pos:start="27:21" pos:end="27:21"><expr pos:start="27:21" pos:end="27:21"><name pos:start="27:21" pos:end="27:21">s</name></expr></argument>, <argument pos:start="27:24" pos:end="27:27"><expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">dest</name></expr></argument>, <argument pos:start="27:30" pos:end="27:33"><expr pos:start="27:30" pos:end="27:33"><name pos:start="27:30" pos:end="27:33">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="51:5">if <condition pos:start="33:8" pos:end="33:38">(<expr pos:start="33:9" pos:end="33:37"><name pos:start="33:9" pos:end="33:18">facilities</name> <operator pos:start="33:20" pos:end="33:20">&amp;</operator> <name pos:start="33:22" pos:end="33:37">FACILITY_EXT_IMM</name></expr>)</condition> <block pos:start="33:40" pos:end="51:5">{<block_content pos:start="35:9" pos:end="49:9">

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:34">(<expr pos:start="35:13" pos:end="35:33"><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:16">val</name> <operator pos:start="35:18" pos:end="35:18">&amp;</operator> <name pos:start="35:20" pos:end="35:24">valid</name><operator pos:start="35:25" pos:end="35:25">)</operator> <operator pos:start="35:27" pos:end="35:28">==</operator> <literal type="number" pos:start="35:30" pos:end="35:33">0xff</literal></expr>)</condition> <block pos:start="35:36" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:19">

            <expr_stmt pos:start="37:13" pos:end="37:52"><expr pos:start="37:13" pos:end="37:51"><call pos:start="37:13" pos:end="37:51"><name pos:start="37:13" pos:end="37:22">tgen_ext8u</name><argument_list pos:start="37:23" pos:end="37:51">(<argument pos:start="37:24" pos:end="37:24"><expr pos:start="37:24" pos:end="37:24"><name pos:start="37:24" pos:end="37:24">s</name></expr></argument>, <argument pos:start="37:27" pos:end="37:38"><expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">TCG_TYPE_I64</name></expr></argument>, <argument pos:start="37:41" pos:end="37:44"><expr pos:start="37:41" pos:end="37:44"><name pos:start="37:41" pos:end="37:44">dest</name></expr></argument>, <argument pos:start="37:47" pos:end="37:50"><expr pos:start="37:47" pos:end="37:50"><name pos:start="37:47" pos:end="37:50">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:36">(<expr pos:start="43:13" pos:end="43:35"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:16">val</name> <operator pos:start="43:18" pos:end="43:18">&amp;</operator> <name pos:start="43:20" pos:end="43:24">valid</name><operator pos:start="43:25" pos:end="43:25">)</operator> <operator pos:start="43:27" pos:end="43:28">==</operator> <literal type="number" pos:start="43:30" pos:end="43:35">0xffff</literal></expr>)</condition> <block pos:start="43:38" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:19">

            <expr_stmt pos:start="45:13" pos:end="45:53"><expr pos:start="45:13" pos:end="45:52"><call pos:start="45:13" pos:end="45:52"><name pos:start="45:13" pos:end="45:23">tgen_ext16u</name><argument_list pos:start="45:24" pos:end="45:52">(<argument pos:start="45:25" pos:end="45:25"><expr pos:start="45:25" pos:end="45:25"><name pos:start="45:25" pos:end="45:25">s</name></expr></argument>, <argument pos:start="45:28" pos:end="45:39"><expr pos:start="45:28" pos:end="45:39"><name pos:start="45:28" pos:end="45:39">TCG_TYPE_I64</name></expr></argument>, <argument pos:start="45:42" pos:end="45:45"><expr pos:start="45:42" pos:end="45:45"><name pos:start="45:42" pos:end="45:45">dest</name></expr></argument>, <argument pos:start="45:48" pos:end="45:51"><expr pos:start="45:48" pos:end="45:51"><name pos:start="45:48" pos:end="45:51">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:62">/* Try all 32-bit insns that can perform it in one go.  */</comment>

    <for pos:start="57:5" pos:end="69:5">for <control pos:start="57:9" pos:end="57:27">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:21"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <literal type="number" pos:start="57:21" pos:end="57:21">4</literal></expr>;</condition> <incr pos:start="57:24" pos:end="57:26"><expr pos:start="57:24" pos:end="57:26"><name pos:start="57:24" pos:end="57:24">i</name><operator pos:start="57:25" pos:end="57:26">++</operator></expr></incr>)</control> <block pos:start="57:29" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:9">

        <decl_stmt pos:start="59:9" pos:end="59:53"><decl pos:start="59:9" pos:end="59:52"><type pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:24">tcg_target_ulong</name></type> <name pos:start="59:26" pos:end="59:29">mask</name> <init pos:start="59:31" pos:end="59:52">= <expr pos:start="59:33" pos:end="59:52"><operator pos:start="59:33" pos:end="59:33">~</operator><operator pos:start="59:34" pos:end="59:34">(</operator><literal type="number" pos:start="59:35" pos:end="59:43">0xffffull</literal> <operator pos:start="59:45" pos:end="59:46">&lt;&lt;</operator> <name pos:start="59:48" pos:end="59:48">i</name><operator pos:start="59:49" pos:end="59:49">*</operator><literal type="number" pos:start="59:50" pos:end="59:51">16</literal><operator pos:start="59:52" pos:end="59:52">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:44">(<expr pos:start="61:13" pos:end="61:43"><operator pos:start="61:13" pos:end="61:13">(</operator><operator pos:start="61:14" pos:end="61:14">(</operator><name pos:start="61:15" pos:end="61:17">val</name> <operator pos:start="61:19" pos:end="61:19">|</operator> <operator pos:start="61:21" pos:end="61:21">~</operator><name pos:start="61:22" pos:end="61:26">valid</name><operator pos:start="61:27" pos:end="61:27">)</operator> <operator pos:start="61:29" pos:end="61:29">&amp;</operator> <name pos:start="61:31" pos:end="61:34">mask</name><operator pos:start="61:35" pos:end="61:35">)</operator> <operator pos:start="61:37" pos:end="61:38">==</operator> <name pos:start="61:40" pos:end="61:43">mask</name></expr>)</condition> <block pos:start="61:46" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:19">

            <expr_stmt pos:start="63:13" pos:end="63:63"><expr pos:start="63:13" pos:end="63:62"><call pos:start="63:13" pos:end="63:62"><name pos:start="63:13" pos:end="63:27">tcg_out_insn_RI</name><argument_list pos:start="63:28" pos:end="63:62">(<argument pos:start="63:29" pos:end="63:29"><expr pos:start="63:29" pos:end="63:29"><name pos:start="63:29" pos:end="63:29">s</name></expr></argument>, <argument pos:start="63:32" pos:end="63:42"><expr pos:start="63:32" pos:end="63:42"><name pos:start="63:32" pos:end="63:42"><name pos:start="63:32" pos:end="63:39">ni_insns</name><index pos:start="63:40" pos:end="63:42">[<expr pos:start="63:41" pos:end="63:41"><name pos:start="63:41" pos:end="63:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="63:45" pos:end="63:48"><expr pos:start="63:45" pos:end="63:48"><name pos:start="63:45" pos:end="63:48">dest</name></expr></argument>, <argument pos:start="63:51" pos:end="63:61"><expr pos:start="63:51" pos:end="63:61"><name pos:start="63:51" pos:end="63:53">val</name> <operator pos:start="63:55" pos:end="63:56">&gt;&gt;</operator> <name pos:start="63:58" pos:end="63:58">i</name><operator pos:start="63:59" pos:end="63:59">*</operator><literal type="number" pos:start="63:60" pos:end="63:61">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="73:5" pos:end="73:62">/* Try all 48-bit insns that can perform it in one go.  */</comment>

    <if_stmt pos:start="75:5" pos:end="91:5"><if pos:start="75:5" pos:end="91:5">if <condition pos:start="75:8" pos:end="75:38">(<expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:18">facilities</name> <operator pos:start="75:20" pos:end="75:20">&amp;</operator> <name pos:start="75:22" pos:end="75:37">FACILITY_EXT_IMM</name></expr>)</condition> <block pos:start="75:40" pos:end="91:5">{<block_content pos:start="77:9" pos:end="89:9">

        <for pos:start="77:9" pos:end="89:9">for <control pos:start="77:13" pos:end="77:31">(<init pos:start="77:14" pos:end="77:19"><expr pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:14">i</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</init> <condition pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:25"><name pos:start="77:21" pos:end="77:21">i</name> <operator pos:start="77:23" pos:end="77:23">&lt;</operator> <literal type="number" pos:start="77:25" pos:end="77:25">2</literal></expr>;</condition> <incr pos:start="77:28" pos:end="77:30"><expr pos:start="77:28" pos:end="77:30"><name pos:start="77:28" pos:end="77:28">i</name><operator pos:start="77:29" pos:end="77:30">++</operator></expr></incr>)</control> <block pos:start="77:33" pos:end="89:9">{<block_content pos:start="79:13" pos:end="87:13">

            <decl_stmt pos:start="79:13" pos:end="79:61"><decl pos:start="79:13" pos:end="79:60"><type pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:28">tcg_target_ulong</name></type> <name pos:start="79:30" pos:end="79:33">mask</name> <init pos:start="79:35" pos:end="79:60">= <expr pos:start="79:37" pos:end="79:60"><operator pos:start="79:37" pos:end="79:37">~</operator><operator pos:start="79:38" pos:end="79:38">(</operator><literal type="number" pos:start="79:39" pos:end="79:51">0xffffffffull</literal> <operator pos:start="79:53" pos:end="79:54">&lt;&lt;</operator> <name pos:start="79:56" pos:end="79:56">i</name><operator pos:start="79:57" pos:end="79:57">*</operator><literal type="number" pos:start="79:58" pos:end="79:59">32</literal><operator pos:start="79:60" pos:end="79:60">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="81:13" pos:end="87:13"><if pos:start="81:13" pos:end="87:13">if <condition pos:start="81:16" pos:end="81:48">(<expr pos:start="81:17" pos:end="81:47"><operator pos:start="81:17" pos:end="81:17">(</operator><operator pos:start="81:18" pos:end="81:18">(</operator><name pos:start="81:19" pos:end="81:21">val</name> <operator pos:start="81:23" pos:end="81:23">|</operator> <operator pos:start="81:25" pos:end="81:25">~</operator><name pos:start="81:26" pos:end="81:30">valid</name><operator pos:start="81:31" pos:end="81:31">)</operator> <operator pos:start="81:33" pos:end="81:33">&amp;</operator> <name pos:start="81:35" pos:end="81:38">mask</name><operator pos:start="81:39" pos:end="81:39">)</operator> <operator pos:start="81:41" pos:end="81:42">==</operator> <name pos:start="81:44" pos:end="81:47">mask</name></expr>)</condition> <block pos:start="81:50" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:23">

                <expr_stmt pos:start="83:17" pos:end="83:69"><expr pos:start="83:17" pos:end="83:68"><call pos:start="83:17" pos:end="83:68"><name pos:start="83:17" pos:end="83:32">tcg_out_insn_RIL</name><argument_list pos:start="83:33" pos:end="83:68">(<argument pos:start="83:34" pos:end="83:34"><expr pos:start="83:34" pos:end="83:34"><name pos:start="83:34" pos:end="83:34">s</name></expr></argument>, <argument pos:start="83:37" pos:end="83:48"><expr pos:start="83:37" pos:end="83:48"><name pos:start="83:37" pos:end="83:48"><name pos:start="83:37" pos:end="83:45">nif_insns</name><index pos:start="83:46" pos:end="83:48">[<expr pos:start="83:47" pos:end="83:47"><name pos:start="83:47" pos:end="83:47">i</name></expr>]</index></name></expr></argument>, <argument pos:start="83:51" pos:end="83:54"><expr pos:start="83:51" pos:end="83:54"><name pos:start="83:51" pos:end="83:54">dest</name></expr></argument>, <argument pos:start="83:57" pos:end="83:67"><expr pos:start="83:57" pos:end="83:67"><name pos:start="83:57" pos:end="83:59">val</name> <operator pos:start="83:61" pos:end="83:62">&gt;&gt;</operator> <name pos:start="83:64" pos:end="83:64">i</name><operator pos:start="83:65" pos:end="83:65">*</operator><literal type="number" pos:start="83:66" pos:end="83:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="85:17" pos:end="85:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="117:5"><if pos:start="93:5" pos:end="117:5">if <condition pos:start="93:8" pos:end="93:64">(<expr pos:start="93:9" pos:end="93:63"><operator pos:start="93:9" pos:end="93:9">(</operator><name pos:start="93:10" pos:end="93:19">facilities</name> <operator pos:start="93:21" pos:end="93:21">&amp;</operator> <name pos:start="93:23" pos:end="93:43">FACILITY_GEN_INST_EXT</name><operator pos:start="93:44" pos:end="93:44">)</operator> <operator pos:start="93:46" pos:end="93:47">&amp;&amp;</operator> <call pos:start="93:49" pos:end="93:63"><name pos:start="93:49" pos:end="93:58">risbg_mask</name><argument_list pos:start="93:59" pos:end="93:63">(<argument pos:start="93:60" pos:end="93:62"><expr pos:start="93:60" pos:end="93:62"><name pos:start="93:60" pos:end="93:62">val</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:66" pos:end="117:5">{<block_content pos:start="95:9" pos:end="115:15">

        <decl_stmt pos:start="95:9" pos:end="95:21"><decl pos:start="95:9" pos:end="95:15"><type pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">int</name></type> <name pos:start="95:13" pos:end="95:15">msb</name></decl>, <decl pos:start="95:18" pos:end="95:20"><type ref="prev" pos:start="95:9" pos:end="95:11"/><name pos:start="95:18" pos:end="95:20">lsb</name></decl>;</decl_stmt>

        <if_stmt pos:start="97:9" pos:end="111:9"><if pos:start="97:9" pos:end="105:9">if <condition pos:start="97:12" pos:end="97:67">(<expr pos:start="97:13" pos:end="97:66"><operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:16">val</name> <operator pos:start="97:18" pos:end="97:18">&amp;</operator> <literal type="number" pos:start="97:20" pos:end="97:40">0x8000000000000001ull</literal><operator pos:start="97:41" pos:end="97:41">)</operator> <operator pos:start="97:43" pos:end="97:44">==</operator> <literal type="number" pos:start="97:46" pos:end="97:66">0x8000000000000001ull</literal></expr>)</condition> <block pos:start="97:69" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:34">

            <comment type="block" pos:start="99:13" pos:end="99:62">/* Achieve wraparound by swapping msb and lsb.  */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:35"><expr pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:15">msb</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <literal type="number" pos:start="101:19" pos:end="101:22">63</literal> <operator pos:start="101:22" pos:end="101:22">-</operator> <call pos:start="101:24" pos:end="101:34"><name pos:start="101:24" pos:end="101:28">ctz64</name><argument_list pos:start="101:29" pos:end="101:34">(<argument pos:start="101:30" pos:end="101:33"><expr pos:start="101:30" pos:end="101:33"><operator pos:start="101:30" pos:end="101:30">~</operator><name pos:start="101:31" pos:end="101:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:34"><expr pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:15">lsb</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:29"><name pos:start="103:19" pos:end="103:23">clz64</name><argument_list pos:start="103:24" pos:end="103:29">(<argument pos:start="103:25" pos:end="103:28"><expr pos:start="103:25" pos:end="103:28"><operator pos:start="103:25" pos:end="103:25">~</operator><name pos:start="103:26" pos:end="103:28">val</name></expr></argument>)</argument_list></call> <operator pos:start="103:31" pos:end="103:31">+</operator> <literal type="number" pos:start="103:33" pos:end="103:33">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="111:9">else <block pos:start="105:16" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:34">

            <expr_stmt pos:start="107:13" pos:end="107:29"><expr pos:start="107:13" pos:end="107:28"><name pos:start="107:13" pos:end="107:15">msb</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <call pos:start="107:19" pos:end="107:28"><name pos:start="107:19" pos:end="107:23">clz64</name><argument_list pos:start="107:24" pos:end="107:28">(<argument pos:start="107:25" pos:end="107:27"><expr pos:start="107:25" pos:end="107:27"><name pos:start="107:25" pos:end="107:27">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:34"><expr pos:start="109:13" pos:end="109:33"><name pos:start="109:13" pos:end="109:15">lsb</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <literal type="number" pos:start="109:19" pos:end="109:22">63</literal> <operator pos:start="109:22" pos:end="109:22">-</operator> <call pos:start="109:24" pos:end="109:33"><name pos:start="109:24" pos:end="109:28">ctz64</name><argument_list pos:start="109:29" pos:end="109:33">(<argument pos:start="109:30" pos:end="109:32"><expr pos:start="109:30" pos:end="109:32"><name pos:start="109:30" pos:end="109:32">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:53"><expr pos:start="113:9" pos:end="113:52"><call pos:start="113:9" pos:end="113:52"><name pos:start="113:9" pos:end="113:21">tcg_out_risbg</name><argument_list pos:start="113:22" pos:end="113:52">(<argument pos:start="113:23" pos:end="113:23"><expr pos:start="113:23" pos:end="113:23"><name pos:start="113:23" pos:end="113:23">s</name></expr></argument>, <argument pos:start="113:26" pos:end="113:29"><expr pos:start="113:26" pos:end="113:29"><name pos:start="113:26" pos:end="113:29">dest</name></expr></argument>, <argument pos:start="113:32" pos:end="113:35"><expr pos:start="113:32" pos:end="113:35"><name pos:start="113:32" pos:end="113:35">dest</name></expr></argument>, <argument pos:start="113:38" pos:end="113:40"><expr pos:start="113:38" pos:end="113:40"><name pos:start="113:38" pos:end="113:40">msb</name></expr></argument>, <argument pos:start="113:43" pos:end="113:45"><expr pos:start="113:43" pos:end="113:45"><name pos:start="113:43" pos:end="113:45">lsb</name></expr></argument>, <argument pos:start="113:48" pos:end="113:48"><expr pos:start="113:48" pos:end="113:48"><literal type="number" pos:start="113:48" pos:end="113:48">0</literal></expr></argument>, <argument pos:start="113:51" pos:end="113:51"><expr pos:start="113:51" pos:end="113:51"><literal type="number" pos:start="113:51" pos:end="113:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:45">/* Fall back to loading the constant.  */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:41"><expr pos:start="123:5" pos:end="123:40"><call pos:start="123:5" pos:end="123:40"><name pos:start="123:5" pos:end="123:16">tcg_out_movi</name><argument_list pos:start="123:17" pos:end="123:40">(<argument pos:start="123:18" pos:end="123:18"><expr pos:start="123:18" pos:end="123:18"><name pos:start="123:18" pos:end="123:18">s</name></expr></argument>, <argument pos:start="123:21" pos:end="123:24"><expr pos:start="123:21" pos:end="123:24"><name pos:start="123:21" pos:end="123:24">type</name></expr></argument>, <argument pos:start="123:27" pos:end="123:34"><expr pos:start="123:27" pos:end="123:34"><name pos:start="123:27" pos:end="123:34">TCG_TMP0</name></expr></argument>, <argument pos:start="123:37" pos:end="123:39"><expr pos:start="123:37" pos:end="123:39"><name pos:start="123:37" pos:end="123:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="133:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:29">(<expr pos:start="125:9" pos:end="125:28"><name pos:start="125:9" pos:end="125:12">type</name> <operator pos:start="125:14" pos:end="125:15">==</operator> <name pos:start="125:17" pos:end="125:28">TCG_TYPE_I32</name></expr>)</condition> <block pos:start="125:31" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:48">

        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><call pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:20">tcg_out_insn</name><argument_list pos:start="127:21" pos:end="127:47">(<argument pos:start="127:22" pos:end="127:22"><expr pos:start="127:22" pos:end="127:22"><name pos:start="127:22" pos:end="127:22">s</name></expr></argument>, <argument pos:start="127:25" pos:end="127:26"><expr pos:start="127:25" pos:end="127:26"><name pos:start="127:25" pos:end="127:26">RR</name></expr></argument>, <argument pos:start="127:29" pos:end="127:30"><expr pos:start="127:29" pos:end="127:30"><name pos:start="127:29" pos:end="127:30">NR</name></expr></argument>, <argument pos:start="127:33" pos:end="127:36"><expr pos:start="127:33" pos:end="127:36"><name pos:start="127:33" pos:end="127:36">dest</name></expr></argument>, <argument pos:start="127:39" pos:end="127:46"><expr pos:start="127:39" pos:end="127:46"><name pos:start="127:39" pos:end="127:46">TCG_TMP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="129:7" pos:end="133:5">else <block pos:start="129:12" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:50">

        <expr_stmt pos:start="131:9" pos:end="131:50"><expr pos:start="131:9" pos:end="131:49"><call pos:start="131:9" pos:end="131:49"><name pos:start="131:9" pos:end="131:20">tcg_out_insn</name><argument_list pos:start="131:21" pos:end="131:49">(<argument pos:start="131:22" pos:end="131:22"><expr pos:start="131:22" pos:end="131:22"><name pos:start="131:22" pos:end="131:22">s</name></expr></argument>, <argument pos:start="131:25" pos:end="131:27"><expr pos:start="131:25" pos:end="131:27"><name pos:start="131:25" pos:end="131:27">RRE</name></expr></argument>, <argument pos:start="131:30" pos:end="131:32"><expr pos:start="131:30" pos:end="131:32"><name pos:start="131:30" pos:end="131:32">NGR</name></expr></argument>, <argument pos:start="131:35" pos:end="131:38"><expr pos:start="131:35" pos:end="131:38"><name pos:start="131:35" pos:end="131:38">dest</name></expr></argument>, <argument pos:start="131:41" pos:end="131:48"><expr pos:start="131:41" pos:end="131:48"><name pos:start="131:41" pos:end="131:48">TCG_TMP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
