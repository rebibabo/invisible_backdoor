<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7830.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:41">usbredir_handle_interrupt_data</name><parameter_list pos:start="1:42" pos:end="3:68">(<parameter pos:start="1:43" pos:end="1:61"><decl pos:start="1:43" pos:end="1:61"><type pos:start="1:43" pos:end="1:61"><name pos:start="1:43" pos:end="1:56">USBRedirDevice</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">dev</name></decl></parameter>,

                                           <parameter pos:start="3:44" pos:end="3:55"><decl pos:start="3:44" pos:end="3:55"><type pos:start="3:44" pos:end="3:55"><name pos:start="3:44" pos:end="3:52">USBPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:55">p</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:67"><decl pos:start="3:58" pos:end="3:67"><type pos:start="3:58" pos:end="3:67"><name pos:start="3:58" pos:end="3:64">uint8_t</name></type> <name pos:start="3:66" pos:end="3:67">ep</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="149:1">{<block_content pos:start="7:5" pos:end="147:5">

    <if_stmt pos:start="7:5" pos:end="147:5"><if pos:start="7:5" pos:end="109:5">if <condition pos:start="7:8" pos:end="7:24">(<expr pos:start="7:9" pos:end="7:23"><name pos:start="7:9" pos:end="7:10">ep</name> <operator pos:start="7:12" pos:end="7:12">&amp;</operator> <name pos:start="7:14" pos:end="7:23">USB_DIR_IN</name></expr>)</condition> <block pos:start="7:26" pos:end="109:5">{<block_content pos:start="11:9" pos:end="107:19">

        <comment type="block" pos:start="9:9" pos:end="9:61">/* Input interrupt endpoint, buffered packet input */</comment>

        <decl_stmt pos:start="11:9" pos:end="11:32"><decl pos:start="11:9" pos:end="11:31"><type pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:14">struct</name> <name pos:start="11:16" pos:end="11:25">buf_packet</name></name> <modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:31">intp</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:24"><decl pos:start="13:9" pos:end="13:18"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:18">status</name></decl>, <decl pos:start="13:21" pos:end="13:23"><type ref="prev" pos:start="13:9" pos:end="13:11"/><name pos:start="13:21" pos:end="13:23">len</name></decl>;</decl_stmt>



        <if_stmt pos:start="17:9" pos:end="47:9"><if pos:start="17:9" pos:end="47:9">if <condition pos:start="17:12" pos:end="19:57">(<expr pos:start="17:13" pos:end="19:56"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:36"><name pos:start="17:14" pos:end="17:16">dev</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:26">endpoint</name><index pos:start="17:27" pos:end="17:36">[<expr pos:start="17:28" pos:end="17:35"><call pos:start="17:28" pos:end="17:35"><name pos:start="17:28" pos:end="17:31">EP2I</name><argument_list pos:start="17:32" pos:end="17:35">(<argument pos:start="17:33" pos:end="17:34"><expr pos:start="17:33" pos:end="17:34"><name pos:start="17:33" pos:end="17:34">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="17:37" pos:end="17:37">.</operator><name pos:start="17:38" pos:end="17:54">interrupt_started</name> <operator pos:start="17:56" pos:end="17:57">&amp;&amp;</operator>

                <operator pos:start="19:17" pos:end="19:17">!</operator><name pos:start="19:18" pos:end="19:40"><name pos:start="19:18" pos:end="19:20">dev</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:30">endpoint</name><index pos:start="19:31" pos:end="19:40">[<expr pos:start="19:32" pos:end="19:39"><call pos:start="19:32" pos:end="19:39"><name pos:start="19:32" pos:end="19:35">EP2I</name><argument_list pos:start="19:36" pos:end="19:39">(<argument pos:start="19:37" pos:end="19:38"><expr pos:start="19:37" pos:end="19:38"><name pos:start="19:37" pos:end="19:38">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="19:41" pos:end="19:41">.</operator><name pos:start="19:42" pos:end="19:56">interrupt_error</name></expr>)</condition> <block pos:start="19:59" pos:end="47:9">{<block_content pos:start="21:13" pos:end="45:63">

            <decl_stmt pos:start="21:13" pos:end="25:14"><decl pos:start="21:13" pos:end="25:13"><type pos:start="21:13" pos:end="21:61"><name pos:start="21:13" pos:end="21:61"><name pos:start="21:13" pos:end="21:18">struct</name> <name pos:start="21:20" pos:end="21:61">usb_redir_start_interrupt_receiving_header</name></name></type> <name pos:start="21:63" pos:end="21:71">start_int</name> <init pos:start="21:73" pos:end="25:13">= <expr pos:start="21:75" pos:end="25:13"><block pos:start="21:75" pos:end="25:13">{

                <expr pos:start="23:17" pos:end="23:30"><operator pos:start="23:17" pos:end="23:17">.</operator><name pos:start="23:18" pos:end="23:25">endpoint</name> <operator pos:start="23:27" pos:end="23:27">=</operator> <name pos:start="23:29" pos:end="23:30">ep</name></expr>,

            }</block></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="27:13" pos:end="27:71">/* No id, we look at the ep when receiving a status back */</comment>

            <expr_stmt pos:start="29:13" pos:end="31:70"><expr pos:start="29:13" pos:end="31:69"><call pos:start="29:13" pos:end="31:69"><name pos:start="29:13" pos:end="29:57">usbredirparser_send_start_interrupt_receiving</name><argument_list pos:start="29:58" pos:end="31:69">(<argument pos:start="29:59" pos:end="29:69"><expr pos:start="29:59" pos:end="29:69"><name pos:start="29:59" pos:end="29:69"><name pos:start="29:59" pos:end="29:61">dev</name><operator pos:start="29:62" pos:end="29:63">-&gt;</operator><name pos:start="29:64" pos:end="29:69">parser</name></name></expr></argument>, <argument pos:start="29:72" pos:end="29:72"><expr pos:start="29:72" pos:end="29:72"><literal type="number" pos:start="29:72" pos:end="29:72">0</literal></expr></argument>,

                                                          <argument pos:start="31:59" pos:end="31:68"><expr pos:start="31:59" pos:end="31:68"><operator pos:start="31:59" pos:end="31:59">&amp;</operator><name pos:start="31:60" pos:end="31:68">start_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:49"><expr pos:start="33:13" pos:end="33:48"><call pos:start="33:13" pos:end="33:48"><name pos:start="33:13" pos:end="33:35">usbredirparser_do_write</name><argument_list pos:start="33:36" pos:end="33:48">(<argument pos:start="33:37" pos:end="33:47"><expr pos:start="33:37" pos:end="33:47"><name pos:start="33:37" pos:end="33:47"><name pos:start="33:37" pos:end="33:39">dev</name><operator pos:start="33:40" pos:end="33:41">-&gt;</operator><name pos:start="33:42" pos:end="33:47">parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:60"><expr pos:start="35:13" pos:end="35:59"><call pos:start="35:13" pos:end="35:59"><name pos:start="35:13" pos:end="35:19">DPRINTF</name><argument_list pos:start="35:20" pos:end="35:59">(<argument pos:start="35:21" pos:end="35:54"><expr pos:start="35:21" pos:end="35:54"><literal type="string" pos:start="35:21" pos:end="35:54">"interrupt recv started ep %02X\n"</literal></expr></argument>, <argument pos:start="35:57" pos:end="35:58"><expr pos:start="35:57" pos:end="35:58"><name pos:start="35:57" pos:end="35:58">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:58"><expr pos:start="37:13" pos:end="37:57"><name pos:start="37:13" pos:end="37:35"><name pos:start="37:13" pos:end="37:15">dev</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:25">endpoint</name><index pos:start="37:26" pos:end="37:35">[<expr pos:start="37:27" pos:end="37:34"><call pos:start="37:27" pos:end="37:34"><name pos:start="37:27" pos:end="37:30">EP2I</name><argument_list pos:start="37:31" pos:end="37:34">(<argument pos:start="37:32" pos:end="37:33"><expr pos:start="37:32" pos:end="37:33"><name pos:start="37:32" pos:end="37:33">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="37:36" pos:end="37:36">.</operator><name pos:start="37:37" pos:end="37:53">interrupt_started</name> <operator pos:start="37:55" pos:end="37:55">=</operator> <literal type="number" pos:start="37:57" pos:end="37:57">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="39:13" pos:end="41:72">/* We don't really want to drop interrupt packets ever, but

               having some upper limit to how much we buffer is good. */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:61"><expr pos:start="43:13" pos:end="43:60"><name pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:15">dev</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:25">endpoint</name><index pos:start="43:26" pos:end="43:35">[<expr pos:start="43:27" pos:end="43:34"><call pos:start="43:27" pos:end="43:34"><name pos:start="43:27" pos:end="43:30">EP2I</name><argument_list pos:start="43:31" pos:end="43:34">(<argument pos:start="43:32" pos:end="43:33"><expr pos:start="43:32" pos:end="43:33"><name pos:start="43:32" pos:end="43:33">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="43:36" pos:end="43:36">.</operator><name pos:start="43:37" pos:end="43:53">bufpq_target_size</name> <operator pos:start="43:55" pos:end="43:55">=</operator> <literal type="number" pos:start="43:57" pos:end="43:60">1000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:63"><expr pos:start="45:13" pos:end="45:62"><name pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:15">dev</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:25">endpoint</name><index pos:start="45:26" pos:end="45:35">[<expr pos:start="45:27" pos:end="45:34"><call pos:start="45:27" pos:end="45:34"><name pos:start="45:27" pos:end="45:30">EP2I</name><argument_list pos:start="45:31" pos:end="45:34">(<argument pos:start="45:32" pos:end="45:33"><expr pos:start="45:32" pos:end="45:33"><name pos:start="45:32" pos:end="45:33">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="45:36" pos:end="45:36">.</operator><name pos:start="45:37" pos:end="45:58">bufpq_dropping_packets</name> <operator pos:start="45:60" pos:end="45:60">=</operator> <literal type="number" pos:start="45:62" pos:end="45:62">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:12">intp</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:59"><name pos:start="51:16" pos:end="51:27">QTAILQ_FIRST</name><argument_list pos:start="51:28" pos:end="51:59">(<argument pos:start="51:29" pos:end="51:58"><expr pos:start="51:29" pos:end="51:58"><operator pos:start="51:29" pos:end="51:29">&amp;</operator><name pos:start="51:30" pos:end="51:52"><name pos:start="51:30" pos:end="51:32">dev</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:42">endpoint</name><index pos:start="51:43" pos:end="51:52">[<expr pos:start="51:44" pos:end="51:51"><call pos:start="51:44" pos:end="51:51"><name pos:start="51:44" pos:end="51:47">EP2I</name><argument_list pos:start="51:48" pos:end="51:51">(<argument pos:start="51:49" pos:end="51:50"><expr pos:start="51:49" pos:end="51:50"><name pos:start="51:49" pos:end="51:50">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="51:53" pos:end="51:53">.</operator><name pos:start="51:54" pos:end="51:58">bufpq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="71:9"><if pos:start="53:9" pos:end="71:9">if <condition pos:start="53:12" pos:end="53:25">(<expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:16">intp</name> <operator pos:start="53:18" pos:end="53:19">==</operator> <name pos:start="53:21" pos:end="53:24">NULL</name></expr>)</condition> <block pos:start="53:27" pos:end="71:9">{<block_content pos:start="55:13" pos:end="69:31">

            <expr_stmt pos:start="55:13" pos:end="55:66"><expr pos:start="55:13" pos:end="55:65"><call pos:start="55:13" pos:end="55:65"><name pos:start="55:13" pos:end="55:20">DPRINTF2</name><argument_list pos:start="55:21" pos:end="55:65">(<argument pos:start="55:22" pos:end="55:60"><expr pos:start="55:22" pos:end="55:60"><literal type="string" pos:start="55:22" pos:end="55:60">"interrupt-token-in ep %02X, no intp\n"</literal></expr></argument>, <argument pos:start="55:63" pos:end="55:64"><expr pos:start="55:63" pos:end="55:64"><name pos:start="55:63" pos:end="55:64">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="57:13" pos:end="57:57">/* Check interrupt_error for stream errors */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:61"><expr pos:start="59:13" pos:end="59:60"><name pos:start="59:13" pos:end="59:18">status</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <name pos:start="59:22" pos:end="59:44"><name pos:start="59:22" pos:end="59:24">dev</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:34">endpoint</name><index pos:start="59:35" pos:end="59:44">[<expr pos:start="59:36" pos:end="59:43"><call pos:start="59:36" pos:end="59:43"><name pos:start="59:36" pos:end="59:39">EP2I</name><argument_list pos:start="59:40" pos:end="59:43">(<argument pos:start="59:41" pos:end="59:42"><expr pos:start="59:41" pos:end="59:42"><name pos:start="59:41" pos:end="59:42">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="59:45" pos:end="59:45">.</operator><name pos:start="59:46" pos:end="59:60">interrupt_error</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:56"><expr pos:start="61:13" pos:end="61:55"><name pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:15">dev</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:25">endpoint</name><index pos:start="61:26" pos:end="61:35">[<expr pos:start="61:27" pos:end="61:34"><call pos:start="61:27" pos:end="61:34"><name pos:start="61:27" pos:end="61:30">EP2I</name><argument_list pos:start="61:31" pos:end="61:34">(<argument pos:start="61:32" pos:end="61:33"><expr pos:start="61:32" pos:end="61:33"><name pos:start="61:32" pos:end="61:33">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="61:36" pos:end="61:36">.</operator><name pos:start="61:37" pos:end="61:51">interrupt_error</name> <operator pos:start="61:53" pos:end="61:53">=</operator> <literal type="number" pos:start="61:55" pos:end="61:55">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="67:13"><if pos:start="63:13" pos:end="67:13">if <condition pos:start="63:16" pos:end="63:23">(<expr pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:22">status</name></expr>)</condition> <block pos:start="63:25" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:62">

                <return pos:start="65:17" pos:end="65:62">return <expr pos:start="65:24" pos:end="65:61"><call pos:start="65:24" pos:end="65:61"><name pos:start="65:24" pos:end="65:45">usbredir_handle_status</name><argument_list pos:start="65:46" pos:end="65:61">(<argument pos:start="65:47" pos:end="65:49"><expr pos:start="65:47" pos:end="65:49"><name pos:start="65:47" pos:end="65:49">dev</name></expr></argument>, <argument pos:start="65:52" pos:end="65:57"><expr pos:start="65:52" pos:end="65:57"><name pos:start="65:52" pos:end="65:57">status</name></expr></argument>, <argument pos:start="65:60" pos:end="65:60"><expr pos:start="65:60" pos:end="65:60"><literal type="number" pos:start="65:60" pos:end="65:60">0</literal></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <return pos:start="69:13" pos:end="69:31">return <expr pos:start="69:20" pos:end="69:30"><name pos:start="69:20" pos:end="69:30">USB_RET_NAK</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="75:41"><expr pos:start="73:9" pos:end="75:40"><call pos:start="73:9" pos:end="75:40"><name pos:start="73:9" pos:end="73:15">DPRINTF</name><argument_list pos:start="73:16" pos:end="75:40">(<argument pos:start="73:17" pos:end="73:63"><expr pos:start="73:17" pos:end="73:63"><literal type="string" pos:start="73:17" pos:end="73:63">"interrupt-token-in ep %02X status %d len %d\n"</literal></expr></argument>, <argument pos:start="73:66" pos:end="73:67"><expr pos:start="73:66" pos:end="73:67"><name pos:start="73:66" pos:end="73:67">ep</name></expr></argument>,

                <argument pos:start="75:17" pos:end="75:28"><expr pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:20">intp</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:28">status</name></name></expr></argument>, <argument pos:start="75:31" pos:end="75:39"><expr pos:start="75:31" pos:end="75:39"><name pos:start="75:31" pos:end="75:39"><name pos:start="75:31" pos:end="75:34">intp</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:39">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:14">status</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:29"><name pos:start="79:18" pos:end="79:21">intp</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:29">status</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:40">(<expr pos:start="81:13" pos:end="81:39"><name pos:start="81:13" pos:end="81:18">status</name> <operator pos:start="81:20" pos:end="81:21">!=</operator> <name pos:start="81:23" pos:end="81:39">usb_redir_success</name></expr>)</condition> <block pos:start="81:42" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:58">

            <expr_stmt pos:start="83:13" pos:end="83:37"><expr pos:start="83:13" pos:end="83:36"><call pos:start="83:13" pos:end="83:36"><name pos:start="83:13" pos:end="83:21">bufp_free</name><argument_list pos:start="83:22" pos:end="83:36">(<argument pos:start="83:23" pos:end="83:25"><expr pos:start="83:23" pos:end="83:25"><name pos:start="83:23" pos:end="83:25">dev</name></expr></argument>, <argument pos:start="83:28" pos:end="83:31"><expr pos:start="83:28" pos:end="83:31"><name pos:start="83:28" pos:end="83:31">intp</name></expr></argument>, <argument pos:start="83:34" pos:end="83:35"><expr pos:start="83:34" pos:end="83:35"><name pos:start="83:34" pos:end="83:35">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:58">return <expr pos:start="85:20" pos:end="85:57"><call pos:start="85:20" pos:end="85:57"><name pos:start="85:20" pos:end="85:41">usbredir_handle_status</name><argument_list pos:start="85:42" pos:end="85:57">(<argument pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><name pos:start="85:43" pos:end="85:45">dev</name></expr></argument>, <argument pos:start="85:48" pos:end="85:53"><expr pos:start="85:48" pos:end="85:53"><name pos:start="85:48" pos:end="85:53">status</name></expr></argument>, <argument pos:start="85:56" pos:end="85:56"><expr pos:start="85:56" pos:end="85:56"><literal type="number" pos:start="85:56" pos:end="85:56">0</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:24"><expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:11">len</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:23"><name pos:start="91:15" pos:end="91:18">intp</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:23">len</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="101:9"><if pos:start="93:9" pos:end="101:9">if <condition pos:start="93:12" pos:end="93:30">(<expr pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:15">len</name> <operator pos:start="93:17" pos:end="93:17">&gt;</operator> <name pos:start="93:19" pos:end="93:29"><name pos:start="93:19" pos:end="93:19">p</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:24">iov</name><operator pos:start="93:25" pos:end="93:25">.</operator><name pos:start="93:26" pos:end="93:29">size</name></name></expr>)</condition> <block pos:start="93:32" pos:end="101:9">{<block_content pos:start="95:13" pos:end="99:34">

            <expr_stmt pos:start="95:13" pos:end="95:75"><expr pos:start="95:13" pos:end="95:74"><call pos:start="95:13" pos:end="95:74"><name pos:start="95:13" pos:end="95:17">ERROR</name><argument_list pos:start="95:18" pos:end="95:74">(<argument pos:start="95:19" pos:end="95:69"><expr pos:start="95:19" pos:end="95:69"><literal type="string" pos:start="95:19" pos:end="95:69">"received int data is larger then packet ep %02X\n"</literal></expr></argument>, <argument pos:start="95:72" pos:end="95:73"><expr pos:start="95:72" pos:end="95:73"><name pos:start="95:72" pos:end="95:73">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:37"><expr pos:start="97:13" pos:end="97:36"><call pos:start="97:13" pos:end="97:36"><name pos:start="97:13" pos:end="97:21">bufp_free</name><argument_list pos:start="97:22" pos:end="97:36">(<argument pos:start="97:23" pos:end="97:25"><expr pos:start="97:23" pos:end="97:25"><name pos:start="97:23" pos:end="97:25">dev</name></expr></argument>, <argument pos:start="97:28" pos:end="97:31"><expr pos:start="97:28" pos:end="97:31"><name pos:start="97:28" pos:end="97:31">intp</name></expr></argument>, <argument pos:start="97:34" pos:end="97:35"><expr pos:start="97:34" pos:end="97:35"><name pos:start="97:34" pos:end="97:35">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:34">return <expr pos:start="99:20" pos:end="99:33"><name pos:start="99:20" pos:end="99:33">USB_RET_BABBLE</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:44"><expr pos:start="103:9" pos:end="103:43"><call pos:start="103:9" pos:end="103:43"><name pos:start="103:9" pos:end="103:23">usb_packet_copy</name><argument_list pos:start="103:24" pos:end="103:43">(<argument pos:start="103:25" pos:end="103:25"><expr pos:start="103:25" pos:end="103:25"><name pos:start="103:25" pos:end="103:25">p</name></expr></argument>, <argument pos:start="103:28" pos:end="103:37"><expr pos:start="103:28" pos:end="103:37"><name pos:start="103:28" pos:end="103:37"><name pos:start="103:28" pos:end="103:31">intp</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:37">data</name></name></expr></argument>, <argument pos:start="103:40" pos:end="103:42"><expr pos:start="103:40" pos:end="103:42"><name pos:start="103:40" pos:end="103:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:33"><expr pos:start="105:9" pos:end="105:32"><call pos:start="105:9" pos:end="105:32"><name pos:start="105:9" pos:end="105:17">bufp_free</name><argument_list pos:start="105:18" pos:end="105:32">(<argument pos:start="105:19" pos:end="105:21"><expr pos:start="105:19" pos:end="105:21"><name pos:start="105:19" pos:end="105:21">dev</name></expr></argument>, <argument pos:start="105:24" pos:end="105:27"><expr pos:start="105:24" pos:end="105:27"><name pos:start="105:24" pos:end="105:27">intp</name></expr></argument>, <argument pos:start="105:30" pos:end="105:31"><expr pos:start="105:30" pos:end="105:31"><name pos:start="105:30" pos:end="105:31">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:19">return <expr pos:start="107:16" pos:end="107:18"><name pos:start="107:16" pos:end="107:18">len</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="147:5">else <block pos:start="109:12" pos:end="147:5">{<block_content pos:start="113:9" pos:end="145:29">

        <comment type="block" pos:start="111:9" pos:end="111:63">/* Output interrupt endpoint, normal async operation */</comment>

        <decl_stmt pos:start="113:9" pos:end="113:45"><decl pos:start="113:9" pos:end="113:44"><type pos:start="113:9" pos:end="113:18"><name pos:start="113:9" pos:end="113:16">AsyncURB</name> <modifier pos:start="113:18" pos:end="113:18">*</modifier></type><name pos:start="113:19" pos:end="113:22">aurb</name> <init pos:start="113:24" pos:end="113:44">= <expr pos:start="113:26" pos:end="113:44"><call pos:start="113:26" pos:end="113:44"><name pos:start="113:26" pos:end="113:36">async_alloc</name><argument_list pos:start="113:37" pos:end="113:44">(<argument pos:start="113:38" pos:end="113:40"><expr pos:start="113:38" pos:end="113:40"><name pos:start="113:38" pos:end="113:40">dev</name></expr></argument>, <argument pos:start="113:43" pos:end="113:43"><expr pos:start="113:43" pos:end="113:43"><name pos:start="113:43" pos:end="113:43">p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:66"><decl pos:start="115:9" pos:end="115:65"><type pos:start="115:9" pos:end="115:48"><name pos:start="115:9" pos:end="115:48"><name pos:start="115:9" pos:end="115:14">struct</name> <name pos:start="115:16" pos:end="115:48">usb_redir_interrupt_packet_header</name></name></type> <name pos:start="115:50" pos:end="115:65">interrupt_packet</name></decl>;</decl_stmt>

        <decl_stmt pos:start="117:9" pos:end="117:33"><decl pos:start="117:9" pos:end="117:32"><type pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:15">uint8_t</name></type> <name pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:19">buf</name><index pos:start="117:20" pos:end="117:32">[<expr pos:start="117:21" pos:end="117:31"><name pos:start="117:21" pos:end="117:31"><name pos:start="117:21" pos:end="117:21">p</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:26">iov</name><operator pos:start="117:27" pos:end="117:27">.</operator><name pos:start="117:28" pos:end="117:31">size</name></name></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="121:9" pos:end="123:33"><expr pos:start="121:9" pos:end="123:32"><call pos:start="121:9" pos:end="123:32"><name pos:start="121:9" pos:end="121:15">DPRINTF</name><argument_list pos:start="121:16" pos:end="123:32">(<argument pos:start="121:17" pos:end="121:55"><expr pos:start="121:17" pos:end="121:55"><literal type="string" pos:start="121:17" pos:end="121:55">"interrupt-out ep %02X len %zd id %u\n"</literal></expr></argument>, <argument pos:start="121:58" pos:end="121:59"><expr pos:start="121:58" pos:end="121:59"><name pos:start="121:58" pos:end="121:59">ep</name></expr></argument>, <argument pos:start="121:62" pos:end="121:72"><expr pos:start="121:62" pos:end="121:72"><name pos:start="121:62" pos:end="121:72"><name pos:start="121:62" pos:end="121:62">p</name><operator pos:start="121:63" pos:end="121:64">-&gt;</operator><name pos:start="121:65" pos:end="121:67">iov</name><operator pos:start="121:68" pos:end="121:68">.</operator><name pos:start="121:69" pos:end="121:72">size</name></name></expr></argument>,

                <argument pos:start="123:17" pos:end="123:31"><expr pos:start="123:17" pos:end="123:31"><name pos:start="123:17" pos:end="123:31"><name pos:start="123:17" pos:end="123:20">aurb</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:31">packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:40"><expr pos:start="127:9" pos:end="127:39"><name pos:start="127:9" pos:end="127:33"><name pos:start="127:9" pos:end="127:24">interrupt_packet</name><operator pos:start="127:25" pos:end="127:25">.</operator><name pos:start="127:26" pos:end="127:33">endpoint</name></name>  <operator pos:start="127:36" pos:end="127:36">=</operator> <name pos:start="127:38" pos:end="127:39">ep</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:49"><expr pos:start="129:9" pos:end="129:48"><name pos:start="129:9" pos:end="129:31"><name pos:start="129:9" pos:end="129:24">interrupt_packet</name><operator pos:start="129:25" pos:end="129:25">.</operator><name pos:start="129:26" pos:end="129:31">length</name></name>    <operator pos:start="129:36" pos:end="129:36">=</operator> <name pos:start="129:38" pos:end="129:48"><name pos:start="129:38" pos:end="129:38">p</name><operator pos:start="129:39" pos:end="129:40">-&gt;</operator><name pos:start="129:41" pos:end="129:43">iov</name><operator pos:start="129:44" pos:end="129:44">.</operator><name pos:start="129:45" pos:end="129:48">size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:54"><expr pos:start="131:9" pos:end="131:53"><name pos:start="131:9" pos:end="131:30"><name pos:start="131:9" pos:end="131:12">aurb</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:30">interrupt_packet</name></name>     <operator pos:start="131:36" pos:end="131:36">=</operator> <name pos:start="131:38" pos:end="131:53">interrupt_packet</name></expr>;</expr_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:45"><expr pos:start="135:9" pos:end="135:44"><call pos:start="135:9" pos:end="135:44"><name pos:start="135:9" pos:end="135:23">usb_packet_copy</name><argument_list pos:start="135:24" pos:end="135:44">(<argument pos:start="135:25" pos:end="135:25"><expr pos:start="135:25" pos:end="135:25"><name pos:start="135:25" pos:end="135:25">p</name></expr></argument>, <argument pos:start="135:28" pos:end="135:30"><expr pos:start="135:28" pos:end="135:30"><name pos:start="135:28" pos:end="135:30">buf</name></expr></argument>, <argument pos:start="135:33" pos:end="135:43"><expr pos:start="135:33" pos:end="135:43"><name pos:start="135:33" pos:end="135:43"><name pos:start="135:33" pos:end="135:33">p</name><operator pos:start="135:34" pos:end="135:35">-&gt;</operator><name pos:start="135:36" pos:end="135:38">iov</name><operator pos:start="135:39" pos:end="135:39">.</operator><name pos:start="135:40" pos:end="135:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:72"><expr pos:start="137:9" pos:end="137:71"><call pos:start="137:9" pos:end="137:71"><name pos:start="137:9" pos:end="137:25">usbredir_log_data</name><argument_list pos:start="137:26" pos:end="137:71">(<argument pos:start="137:27" pos:end="137:29"><expr pos:start="137:27" pos:end="137:29"><name pos:start="137:27" pos:end="137:29">dev</name></expr></argument>, <argument pos:start="137:32" pos:end="137:52"><expr pos:start="137:32" pos:end="137:52"><literal type="string" pos:start="137:32" pos:end="137:52">"interrupt data out:"</literal></expr></argument>, <argument pos:start="137:55" pos:end="137:57"><expr pos:start="137:55" pos:end="137:57"><name pos:start="137:55" pos:end="137:57">buf</name></expr></argument>, <argument pos:start="137:60" pos:end="137:70"><expr pos:start="137:60" pos:end="137:70"><name pos:start="137:60" pos:end="137:70"><name pos:start="137:60" pos:end="137:60">p</name><operator pos:start="137:61" pos:end="137:62">-&gt;</operator><name pos:start="137:63" pos:end="137:65">iov</name><operator pos:start="137:66" pos:end="137:66">.</operator><name pos:start="137:67" pos:end="137:70">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="141:77"><expr pos:start="139:9" pos:end="141:76"><call pos:start="139:9" pos:end="141:76"><name pos:start="139:9" pos:end="139:44">usbredirparser_send_interrupt_packet</name><argument_list pos:start="139:45" pos:end="141:76">(<argument pos:start="139:46" pos:end="139:56"><expr pos:start="139:46" pos:end="139:56"><name pos:start="139:46" pos:end="139:56"><name pos:start="139:46" pos:end="139:48">dev</name><operator pos:start="139:49" pos:end="139:50">-&gt;</operator><name pos:start="139:51" pos:end="139:56">parser</name></name></expr></argument>, <argument pos:start="139:59" pos:end="139:73"><expr pos:start="139:59" pos:end="139:73"><name pos:start="139:59" pos:end="139:73"><name pos:start="139:59" pos:end="139:62">aurb</name><operator pos:start="139:63" pos:end="139:64">-&gt;</operator><name pos:start="139:65" pos:end="139:73">packet_id</name></name></expr></argument>,

                                        <argument pos:start="141:41" pos:end="141:57"><expr pos:start="141:41" pos:end="141:57"><operator pos:start="141:41" pos:end="141:41">&amp;</operator><name pos:start="141:42" pos:end="141:57">interrupt_packet</name></expr></argument>, <argument pos:start="141:60" pos:end="141:62"><expr pos:start="141:60" pos:end="141:62"><name pos:start="141:60" pos:end="141:62">buf</name></expr></argument>, <argument pos:start="141:65" pos:end="141:75"><expr pos:start="141:65" pos:end="141:75"><name pos:start="141:65" pos:end="141:75"><name pos:start="141:65" pos:end="141:65">p</name><operator pos:start="141:66" pos:end="141:67">-&gt;</operator><name pos:start="141:68" pos:end="141:70">iov</name><operator pos:start="141:71" pos:end="141:71">.</operator><name pos:start="141:72" pos:end="141:75">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:45"><expr pos:start="143:9" pos:end="143:44"><call pos:start="143:9" pos:end="143:44"><name pos:start="143:9" pos:end="143:31">usbredirparser_do_write</name><argument_list pos:start="143:32" pos:end="143:44">(<argument pos:start="143:33" pos:end="143:43"><expr pos:start="143:33" pos:end="143:43"><name pos:start="143:33" pos:end="143:43"><name pos:start="143:33" pos:end="143:35">dev</name><operator pos:start="143:36" pos:end="143:37">-&gt;</operator><name pos:start="143:38" pos:end="143:43">parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="145:9" pos:end="145:29">return <expr pos:start="145:16" pos:end="145:28"><name pos:start="145:16" pos:end="145:28">USB_RET_ASYNC</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
