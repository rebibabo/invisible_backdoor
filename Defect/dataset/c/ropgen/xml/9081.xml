<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9081.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">nbd_co_receive_request</name><parameter_list pos:start="1:34" pos:end="3:47">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:48">NBDRequestData</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">req</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:74"><decl pos:start="1:56" pos:end="1:74"><type pos:start="1:56" pos:end="1:74"><name pos:start="1:56" pos:end="1:65">NBDRequest</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:74">request</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:39">Error</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="159:1">{<block_content pos:start="7:5" pos:end="157:13">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">NBDClient</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:21">client</name> <init pos:start="7:23" pos:end="7:35">= <expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">req</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">client</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">valid_flags</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:34"><expr pos:start="13:5" pos:end="13:33"><call pos:start="13:5" pos:end="13:33"><name pos:start="13:5" pos:end="13:12">g_assert</name><argument_list pos:start="13:13" pos:end="13:33">(<argument pos:start="13:14" pos:end="13:32"><expr pos:start="13:14" pos:end="13:32"><call pos:start="13:14" pos:end="13:32"><name pos:start="13:14" pos:end="13:30">qemu_in_coroutine</name><argument_list pos:start="13:31" pos:end="13:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:60"><expr pos:start="15:5" pos:end="15:59"><call pos:start="15:5" pos:end="15:59"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:59">(<argument pos:start="15:12" pos:end="15:58"><expr pos:start="15:12" pos:end="15:58"><name pos:start="15:12" pos:end="15:33"><name pos:start="15:12" pos:end="15:17">client</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:33">recv_coroutine</name></name> <operator pos:start="15:35" pos:end="15:36">==</operator> <call pos:start="15:38" pos:end="15:58"><name pos:start="15:38" pos:end="15:56">qemu_coroutine_self</name><argument_list pos:start="15:57" pos:end="15:58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:60">(<expr pos:start="17:9" pos:end="17:59"><call pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:27">nbd_receive_request</name><argument_list pos:start="17:28" pos:end="17:55">(<argument pos:start="17:29" pos:end="17:39"><expr pos:start="17:29" pos:end="17:39"><name pos:start="17:29" pos:end="17:39"><name pos:start="17:29" pos:end="17:34">client</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:39">ioc</name></name></expr></argument>, <argument pos:start="17:42" pos:end="17:48"><expr pos:start="17:42" pos:end="17:48"><name pos:start="17:42" pos:end="17:48">request</name></expr></argument>, <argument pos:start="17:51" pos:end="17:54"><expr pos:start="17:51" pos:end="17:54"><name pos:start="17:51" pos:end="17:54">errp</name></expr></argument>)</argument_list></call> <operator pos:start="17:57" pos:end="17:57">&lt;</operator> <literal type="number" pos:start="17:59" pos:end="17:59">0</literal></expr>)</condition> <block pos:start="17:62" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><operator pos:start="19:16" pos:end="19:16">-</operator><name pos:start="19:17" pos:end="19:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="27:76"><expr pos:start="25:5" pos:end="27:75"><call pos:start="25:5" pos:end="27:75"><name pos:start="25:5" pos:end="25:44">trace_nbd_co_receive_request_decode_type</name><argument_list pos:start="25:45" pos:end="27:75">(<argument pos:start="25:46" pos:end="25:60"><expr pos:start="25:46" pos:end="25:60"><name pos:start="25:46" pos:end="25:60"><name pos:start="25:46" pos:end="25:52">request</name><operator pos:start="25:53" pos:end="25:54">-&gt;</operator><name pos:start="25:55" pos:end="25:60">handle</name></name></expr></argument>, <argument pos:start="25:63" pos:end="25:75"><expr pos:start="25:63" pos:end="25:75"><name pos:start="25:63" pos:end="25:75"><name pos:start="25:63" pos:end="25:69">request</name><operator pos:start="25:70" pos:end="25:71">-&gt;</operator><name pos:start="25:72" pos:end="25:75">type</name></name></expr></argument>,

                                             <argument pos:start="27:46" pos:end="27:74"><expr pos:start="27:46" pos:end="27:74"><call pos:start="27:46" pos:end="27:74"><name pos:start="27:46" pos:end="27:59">nbd_cmd_lookup</name><argument_list pos:start="27:60" pos:end="27:74">(<argument pos:start="27:61" pos:end="27:73"><expr pos:start="27:61" pos:end="27:73"><name pos:start="27:61" pos:end="27:73"><name pos:start="27:61" pos:end="27:67">request</name><operator pos:start="27:68" pos:end="27:69">-&gt;</operator><name pos:start="27:70" pos:end="27:73">type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:39">(<expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:15">request</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:21">type</name></name> <operator pos:start="31:23" pos:end="31:24">!=</operator> <name pos:start="31:26" pos:end="31:38">NBD_CMD_WRITE</name></expr>)</condition> <block pos:start="31:41" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:29">

        <comment type="block" pos:start="33:9" pos:end="33:65">/* No payload, we are ready to read the next request.  */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:29"><expr pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:11">req</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:21">complete</name></name> <operator pos:start="35:23" pos:end="35:23">=</operator> <name pos:start="35:25" pos:end="35:28">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:38">(<expr pos:start="41:9" pos:end="41:37"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:15">request</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:21">type</name></name> <operator pos:start="41:23" pos:end="41:24">==</operator> <name pos:start="41:26" pos:end="41:37">NBD_CMD_DISC</name></expr>)</condition> <block pos:start="41:40" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:20">

        <comment type="block" pos:start="43:9" pos:end="45:58">/* Special case: we're going to disconnect without a reply,

         * whether or not flags, from, or len are bogus */</comment>

        <return pos:start="47:9" pos:end="47:20">return <expr pos:start="47:16" pos:end="47:19"><operator pos:start="47:16" pos:end="47:16">-</operator><name pos:start="47:17" pos:end="47:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="57:64">/* Check for sanity in the parameters, part 1.  Defer as many

     * checks as possible until after reading any NBD_CMD_WRITE

     * payload, so we can try and keep the connection alive.  */</comment>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:55">(<expr pos:start="59:9" pos:end="59:54"><operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:22"><name pos:start="59:10" pos:end="59:16">request</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:22">from</name></name> <operator pos:start="59:24" pos:end="59:24">+</operator> <name pos:start="59:26" pos:end="59:37"><name pos:start="59:26" pos:end="59:32">request</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:37">len</name></name><operator pos:start="59:38" pos:end="59:38">)</operator> <operator pos:start="59:40" pos:end="59:40">&lt;</operator> <name pos:start="59:42" pos:end="59:54"><name pos:start="59:42" pos:end="59:48">request</name><operator pos:start="59:49" pos:end="59:50">-&gt;</operator><name pos:start="59:51" pos:end="59:54">from</name></name></expr>)</condition> <block pos:start="59:57" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:23">

        <expr_stmt pos:start="61:9" pos:end="63:80"><expr pos:start="61:9" pos:end="63:79"><call pos:start="61:9" pos:end="63:79"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="63:79">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:78"><expr pos:start="63:20" pos:end="63:78"><literal type="string" pos:start="63:20" pos:end="63:78">"integer overflow detected, you're probably being attacked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:23">return <expr pos:start="65:16" pos:end="65:22"><operator pos:start="65:16" pos:end="65:16">-</operator><name pos:start="65:17" pos:end="65:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="95:5"><if pos:start="71:5" pos:end="95:5">if <condition pos:start="71:8" pos:end="71:72">(<expr pos:start="71:9" pos:end="71:71"><name pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:15">request</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:21">type</name></name> <operator pos:start="71:23" pos:end="71:24">==</operator> <name pos:start="71:26" pos:end="71:37">NBD_CMD_READ</name> <operator pos:start="71:39" pos:end="71:40">||</operator> <name pos:start="71:42" pos:end="71:54"><name pos:start="71:42" pos:end="71:48">request</name><operator pos:start="71:49" pos:end="71:50">-&gt;</operator><name pos:start="71:51" pos:end="71:54">type</name></name> <operator pos:start="71:56" pos:end="71:57">==</operator> <name pos:start="71:59" pos:end="71:71">NBD_CMD_WRITE</name></expr>)</condition> <block pos:start="71:74" pos:end="95:5">{<block_content pos:start="73:9" pos:end="93:9">

        <if_stmt pos:start="73:9" pos:end="81:9"><if pos:start="73:9" pos:end="81:9">if <condition pos:start="73:12" pos:end="73:47">(<expr pos:start="73:13" pos:end="73:46"><name pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:19">request</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:24">len</name></name> <operator pos:start="73:26" pos:end="73:26">&gt;</operator> <name pos:start="73:28" pos:end="73:46">NBD_MAX_BUFFER_SIZE</name></expr>)</condition> <block pos:start="73:49" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:27">

            <expr_stmt pos:start="75:13" pos:end="77:58"><expr pos:start="75:13" pos:end="77:57"><call pos:start="75:13" pos:end="77:57"><name pos:start="75:13" pos:end="75:22">error_setg</name><argument_list pos:start="75:23" pos:end="77:57">(<argument pos:start="75:24" pos:end="75:27"><expr pos:start="75:24" pos:end="75:27"><name pos:start="75:24" pos:end="75:27">errp</name></expr></argument>, <argument pos:start="75:30" pos:end="75:76"><expr pos:start="75:30" pos:end="75:76"><literal type="string" pos:start="75:30" pos:end="75:37">"len (%"</literal> <name pos:start="75:39" pos:end="75:44">PRIu32</name><literal type="string" pos:start="75:45" pos:end="75:76">" ) is larger than max len (%u)"</literal></expr></argument>,

                       <argument pos:start="77:24" pos:end="77:35"><expr pos:start="77:24" pos:end="77:35"><name pos:start="77:24" pos:end="77:35"><name pos:start="77:24" pos:end="77:30">request</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:35">len</name></name></expr></argument>, <argument pos:start="77:38" pos:end="77:56"><expr pos:start="77:38" pos:end="77:56"><name pos:start="77:38" pos:end="77:56">NBD_MAX_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:27">return <expr pos:start="79:20" pos:end="79:26"><operator pos:start="79:20" pos:end="79:20">-</operator><name pos:start="79:21" pos:end="79:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:71"><expr pos:start="85:9" pos:end="85:70"><name pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:11">req</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:17">data</name></name> <operator pos:start="85:19" pos:end="85:19">=</operator> <call pos:start="85:21" pos:end="85:70"><name pos:start="85:21" pos:end="85:38">blk_try_blockalign</name><argument_list pos:start="85:39" pos:end="85:70">(<argument pos:start="85:40" pos:end="85:55"><expr pos:start="85:40" pos:end="85:55"><name pos:start="85:40" pos:end="85:55"><name pos:start="85:40" pos:end="85:45">client</name><operator pos:start="85:46" pos:end="85:47">-&gt;</operator><name pos:start="85:48" pos:end="85:50">exp</name><operator pos:start="85:51" pos:end="85:52">-&gt;</operator><name pos:start="85:53" pos:end="85:55">blk</name></name></expr></argument>, <argument pos:start="85:58" pos:end="85:69"><expr pos:start="85:58" pos:end="85:69"><name pos:start="85:58" pos:end="85:69"><name pos:start="85:58" pos:end="85:64">request</name><operator pos:start="85:65" pos:end="85:66">-&gt;</operator><name pos:start="85:67" pos:end="85:69">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:30">(<expr pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:15">req</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:21">data</name></name> <operator pos:start="87:23" pos:end="87:24">==</operator> <name pos:start="87:26" pos:end="87:29">NULL</name></expr>)</condition> <block pos:start="87:32" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:27">

            <expr_stmt pos:start="89:13" pos:end="89:42"><expr pos:start="89:13" pos:end="89:41"><call pos:start="89:13" pos:end="89:41"><name pos:start="89:13" pos:end="89:22">error_setg</name><argument_list pos:start="89:23" pos:end="89:41">(<argument pos:start="89:24" pos:end="89:27"><expr pos:start="89:24" pos:end="89:27"><name pos:start="89:24" pos:end="89:27">errp</name></expr></argument>, <argument pos:start="89:30" pos:end="89:40"><expr pos:start="89:30" pos:end="89:40"><literal type="string" pos:start="89:30" pos:end="89:40">"No memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:27">return <expr pos:start="91:20" pos:end="91:26"><operator pos:start="91:20" pos:end="91:20">-</operator><name pos:start="91:21" pos:end="91:26">ENOMEM</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="115:5"><if pos:start="97:5" pos:end="115:5">if <condition pos:start="97:8" pos:end="97:39">(<expr pos:start="97:9" pos:end="97:38"><name pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:15">request</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:21">type</name></name> <operator pos:start="97:23" pos:end="97:24">==</operator> <name pos:start="97:26" pos:end="97:38">NBD_CMD_WRITE</name></expr>)</condition> <block pos:start="97:41" pos:end="115:5">{<block_content pos:start="99:9" pos:end="113:68">

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:69">(<expr pos:start="99:13" pos:end="99:68"><call pos:start="99:13" pos:end="99:64"><name pos:start="99:13" pos:end="99:20">nbd_read</name><argument_list pos:start="99:21" pos:end="99:64">(<argument pos:start="99:22" pos:end="99:32"><expr pos:start="99:22" pos:end="99:32"><name pos:start="99:22" pos:end="99:32"><name pos:start="99:22" pos:end="99:27">client</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:32">ioc</name></name></expr></argument>, <argument pos:start="99:35" pos:end="99:43"><expr pos:start="99:35" pos:end="99:43"><name pos:start="99:35" pos:end="99:43"><name pos:start="99:35" pos:end="99:37">req</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:43">data</name></name></expr></argument>, <argument pos:start="99:46" pos:end="99:57"><expr pos:start="99:46" pos:end="99:57"><name pos:start="99:46" pos:end="99:57"><name pos:start="99:46" pos:end="99:52">request</name><operator pos:start="99:53" pos:end="99:54">-&gt;</operator><name pos:start="99:55" pos:end="99:57">len</name></name></expr></argument>, <argument pos:start="99:60" pos:end="99:63"><expr pos:start="99:60" pos:end="99:63"><name pos:start="99:60" pos:end="99:63">errp</name></expr></argument>)</argument_list></call> <operator pos:start="99:66" pos:end="99:66">&lt;</operator> <literal type="number" pos:start="99:68" pos:end="99:68">0</literal></expr>)</condition> <block pos:start="99:71" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:24">

            <expr_stmt pos:start="101:13" pos:end="101:64"><expr pos:start="101:13" pos:end="101:63"><call pos:start="101:13" pos:end="101:63"><name pos:start="101:13" pos:end="101:25">error_prepend</name><argument_list pos:start="101:26" pos:end="101:63">(<argument pos:start="101:27" pos:end="101:30"><expr pos:start="101:27" pos:end="101:30"><name pos:start="101:27" pos:end="101:30">errp</name></expr></argument>, <argument pos:start="101:33" pos:end="101:62"><expr pos:start="101:33" pos:end="101:62"><literal type="string" pos:start="101:33" pos:end="101:62">"reading from socket failed: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:24">return <expr pos:start="103:20" pos:end="103:23"><operator pos:start="103:20" pos:end="103:20">-</operator><name pos:start="103:21" pos:end="103:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:29"><expr pos:start="107:9" pos:end="107:28"><name pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:11">req</name><operator pos:start="107:12" pos:end="107:13">-&gt;</operator><name pos:start="107:14" pos:end="107:21">complete</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:28">true</name></expr>;</expr_stmt>



        <expr_stmt pos:start="111:9" pos:end="113:68"><expr pos:start="111:9" pos:end="113:67"><call pos:start="111:9" pos:end="113:67"><name pos:start="111:9" pos:end="111:53">trace_nbd_co_receive_request_payload_received</name><argument_list pos:start="111:54" pos:end="113:67">(<argument pos:start="111:55" pos:end="111:69"><expr pos:start="111:55" pos:end="111:69"><name pos:start="111:55" pos:end="111:69"><name pos:start="111:55" pos:end="111:61">request</name><operator pos:start="111:62" pos:end="111:63">-&gt;</operator><name pos:start="111:64" pos:end="111:69">handle</name></name></expr></argument>,

                                                      <argument pos:start="113:55" pos:end="113:66"><expr pos:start="113:55" pos:end="113:66"><name pos:start="113:55" pos:end="113:66"><name pos:start="113:55" pos:end="113:61">request</name><operator pos:start="113:62" pos:end="113:63">-&gt;</operator><name pos:start="113:64" pos:end="113:66">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:32">/* Sanity checks, part 2. */</comment>

    <if_stmt pos:start="121:5" pos:end="131:5"><if pos:start="121:5" pos:end="131:5">if <condition pos:start="121:8" pos:end="121:57">(<expr pos:start="121:9" pos:end="121:56"><name pos:start="121:9" pos:end="121:21"><name pos:start="121:9" pos:end="121:15">request</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:21">from</name></name> <operator pos:start="121:23" pos:end="121:23">+</operator> <name pos:start="121:25" pos:end="121:36"><name pos:start="121:25" pos:end="121:31">request</name><operator pos:start="121:32" pos:end="121:33">-&gt;</operator><name pos:start="121:34" pos:end="121:36">len</name></name> <operator pos:start="121:38" pos:end="121:38">&gt;</operator> <name pos:start="121:40" pos:end="121:56"><name pos:start="121:40" pos:end="121:45">client</name><operator pos:start="121:46" pos:end="121:47">-&gt;</operator><name pos:start="121:48" pos:end="121:50">exp</name><operator pos:start="121:51" pos:end="121:52">-&gt;</operator><name pos:start="121:53" pos:end="121:56">size</name></name></expr>)</condition> <block pos:start="121:59" pos:end="131:5">{<block_content pos:start="123:9" pos:end="129:66">

        <expr_stmt pos:start="123:9" pos:end="127:48"><expr pos:start="123:9" pos:end="127:47"><call pos:start="123:9" pos:end="127:47"><name pos:start="123:9" pos:end="123:18">error_setg</name><argument_list pos:start="123:19" pos:end="127:47">(<argument pos:start="123:20" pos:end="123:23"><expr pos:start="123:20" pos:end="123:23"><name pos:start="123:20" pos:end="123:23">errp</name></expr></argument>, <argument pos:start="123:26" pos:end="125:37"><expr pos:start="123:26" pos:end="125:37"><literal type="string" pos:start="123:26" pos:end="123:54">"operation past EOF; From: %"</literal> <name pos:start="123:56" pos:end="123:61">PRIu64</name> <literal type="string" pos:start="123:63" pos:end="123:72">", Len: %"</literal> <name pos:start="123:74" pos:end="123:79">PRIu32</name>

                   <literal type="string" pos:start="125:20" pos:end="125:30">", Size: %"</literal> <name pos:start="125:32" pos:end="125:37">PRIu64</name></expr></argument>, <argument pos:start="125:40" pos:end="125:52"><expr pos:start="125:40" pos:end="125:52"><name pos:start="125:40" pos:end="125:52"><name pos:start="125:40" pos:end="125:46">request</name><operator pos:start="125:47" pos:end="125:48">-&gt;</operator><name pos:start="125:49" pos:end="125:52">from</name></name></expr></argument>, <argument pos:start="125:55" pos:end="125:66"><expr pos:start="125:55" pos:end="125:66"><name pos:start="125:55" pos:end="125:66"><name pos:start="125:55" pos:end="125:61">request</name><operator pos:start="125:62" pos:end="125:63">-&gt;</operator><name pos:start="125:64" pos:end="125:66">len</name></name></expr></argument>,

                   <argument pos:start="127:20" pos:end="127:46"><expr pos:start="127:20" pos:end="127:46"><operator pos:start="127:20" pos:end="127:20">(</operator><name pos:start="127:21" pos:end="127:28">uint64_t</name><operator pos:start="127:29" pos:end="127:29">)</operator><name pos:start="127:30" pos:end="127:46"><name pos:start="127:30" pos:end="127:35">client</name><operator pos:start="127:36" pos:end="127:37">-&gt;</operator><name pos:start="127:38" pos:end="127:40">exp</name><operator pos:start="127:41" pos:end="127:42">-&gt;</operator><name pos:start="127:43" pos:end="127:46">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:66">return <expr pos:start="129:16" pos:end="129:65"><ternary pos:start="129:16" pos:end="129:65"><condition pos:start="129:16" pos:end="129:47"><expr pos:start="129:16" pos:end="129:45"><name pos:start="129:16" pos:end="129:28"><name pos:start="129:16" pos:end="129:22">request</name><operator pos:start="129:23" pos:end="129:24">-&gt;</operator><name pos:start="129:25" pos:end="129:28">type</name></name> <operator pos:start="129:30" pos:end="129:31">==</operator> <name pos:start="129:33" pos:end="129:45">NBD_CMD_WRITE</name></expr> ?</condition><then pos:start="129:49" pos:end="129:55"> <expr pos:start="129:49" pos:end="129:55"><operator pos:start="129:49" pos:end="129:49">-</operator><name pos:start="129:50" pos:end="129:55">ENOSPC</name></expr> </then><else pos:start="129:57" pos:end="129:65">: <expr pos:start="129:59" pos:end="129:65"><operator pos:start="129:59" pos:end="129:59">-</operator><name pos:start="129:60" pos:end="129:65">EINVAL</name></expr></else></ternary></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:35"><expr pos:start="133:5" pos:end="133:34"><name pos:start="133:5" pos:end="133:15">valid_flags</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <name pos:start="133:19" pos:end="133:34">NBD_CMD_FLAG_FUA</name></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="143:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:66">(<expr pos:start="135:9" pos:end="135:65"><name pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:15">request</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:21">type</name></name> <operator pos:start="135:23" pos:end="135:24">==</operator> <name pos:start="135:26" pos:end="135:37">NBD_CMD_READ</name> <operator pos:start="135:39" pos:end="135:40">&amp;&amp;</operator> <name pos:start="135:42" pos:end="135:65"><name pos:start="135:42" pos:end="135:47">client</name><operator pos:start="135:48" pos:end="135:49">-&gt;</operator><name pos:start="135:50" pos:end="135:65">structured_reply</name></name></expr>)</condition> <block pos:start="135:68" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:39">

        <expr_stmt pos:start="137:9" pos:end="137:39"><expr pos:start="137:9" pos:end="137:38"><name pos:start="137:9" pos:end="137:19">valid_flags</name> <operator pos:start="137:21" pos:end="137:22">|=</operator> <name pos:start="137:24" pos:end="137:38">NBD_CMD_FLAG_DF</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="143:5">else if <condition pos:start="139:15" pos:end="139:53">(<expr pos:start="139:16" pos:end="139:52"><name pos:start="139:16" pos:end="139:28"><name pos:start="139:16" pos:end="139:22">request</name><operator pos:start="139:23" pos:end="139:24">-&gt;</operator><name pos:start="139:25" pos:end="139:28">type</name></name> <operator pos:start="139:30" pos:end="139:31">==</operator> <name pos:start="139:33" pos:end="139:52">NBD_CMD_WRITE_ZEROES</name></expr>)</condition> <block pos:start="139:55" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:44">

        <expr_stmt pos:start="141:9" pos:end="141:44"><expr pos:start="141:9" pos:end="141:43"><name pos:start="141:9" pos:end="141:19">valid_flags</name> <operator pos:start="141:21" pos:end="141:22">|=</operator> <name pos:start="141:24" pos:end="141:43">NBD_CMD_FLAG_NO_HOLE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="145:5" pos:end="153:5"><if pos:start="145:5" pos:end="153:5">if <condition pos:start="145:8" pos:end="145:38">(<expr pos:start="145:9" pos:end="145:37"><name pos:start="145:9" pos:end="145:22"><name pos:start="145:9" pos:end="145:15">request</name><operator pos:start="145:16" pos:end="145:17">-&gt;</operator><name pos:start="145:18" pos:end="145:22">flags</name></name> <operator pos:start="145:24" pos:end="145:24">&amp;</operator> <operator pos:start="145:26" pos:end="145:26">~</operator><name pos:start="145:27" pos:end="145:37">valid_flags</name></expr>)</condition> <block pos:start="145:40" pos:end="153:5">{<block_content pos:start="147:9" pos:end="151:23">

        <expr_stmt pos:start="147:9" pos:end="149:66"><expr pos:start="147:9" pos:end="149:65"><call pos:start="147:9" pos:end="149:65"><name pos:start="147:9" pos:end="147:18">error_setg</name><argument_list pos:start="147:19" pos:end="149:65">(<argument pos:start="147:20" pos:end="147:23"><expr pos:start="147:20" pos:end="147:23"><name pos:start="147:20" pos:end="147:23">errp</name></expr></argument>, <argument pos:start="147:26" pos:end="147:70"><expr pos:start="147:26" pos:end="147:70"><literal type="string" pos:start="147:26" pos:end="147:70">"unsupported flags for command %s (got 0x%x)"</literal></expr></argument>,

                   <argument pos:start="149:20" pos:end="149:48"><expr pos:start="149:20" pos:end="149:48"><call pos:start="149:20" pos:end="149:48"><name pos:start="149:20" pos:end="149:33">nbd_cmd_lookup</name><argument_list pos:start="149:34" pos:end="149:48">(<argument pos:start="149:35" pos:end="149:47"><expr pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:41">request</name><operator pos:start="149:42" pos:end="149:43">-&gt;</operator><name pos:start="149:44" pos:end="149:47">type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="149:51" pos:end="149:64"><expr pos:start="149:51" pos:end="149:64"><name pos:start="149:51" pos:end="149:64"><name pos:start="149:51" pos:end="149:57">request</name><operator pos:start="149:58" pos:end="149:59">-&gt;</operator><name pos:start="149:60" pos:end="149:64">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="151:9" pos:end="151:23">return <expr pos:start="151:16" pos:end="151:22"><operator pos:start="151:16" pos:end="151:16">-</operator><name pos:start="151:17" pos:end="151:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="157:5" pos:end="157:13">return <expr pos:start="157:12" pos:end="157:12"><literal type="number" pos:start="157:12" pos:end="157:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
