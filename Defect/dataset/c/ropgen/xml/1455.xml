<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1455.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">stpcifc_service_call</name><parameter_list pos:start="1:25" pos:end="1:77">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:32">S390CPU</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">cpu</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:49"><decl pos:start="1:40" pos:end="1:49"><type pos:start="1:40" pos:end="1:49"><name pos:start="1:40" pos:end="1:46">uint8_t</name></type> <name pos:start="1:48" pos:end="1:49">r1</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:59">uint64_t</name></type> <name pos:start="1:61" pos:end="1:64">fiba</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:76"><decl pos:start="1:67" pos:end="1:76"><type pos:start="1:67" pos:end="1:76"><name pos:start="1:67" pos:end="1:73">uint8_t</name></type> <name pos:start="1:75" pos:end="1:76">ar</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUS390XState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">env</name> <init pos:start="5:24" pos:end="5:34">= <expr pos:start="5:26" pos:end="5:34"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:34"><name pos:start="5:27" pos:end="5:29">cpu</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ZpciFib</name></type> <name pos:start="9:13" pos:end="9:15">fib</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">S390PCIBusDevice</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:27">pbdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:15">cc</name> <init pos:start="15:17" pos:end="15:32">= <expr pos:start="15:19" pos:end="15:32"><name pos:start="15:19" pos:end="15:32">ZPCI_PCI_LS_OK</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:40">(<expr pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:11">env</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:16">psw</name><operator pos:start="19:17" pos:end="19:17">.</operator><name pos:start="19:18" pos:end="19:21">mask</name></name> <operator pos:start="19:23" pos:end="19:23">&amp;</operator> <name pos:start="19:25" pos:end="19:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="19:42" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:17">

        <expr_stmt pos:start="21:9" pos:end="21:50"><expr pos:start="21:9" pos:end="21:49"><call pos:start="21:9" pos:end="21:49"><name pos:start="21:9" pos:end="21:25">program_interrupt</name><argument_list pos:start="21:26" pos:end="21:49">(<argument pos:start="21:27" pos:end="21:29"><expr pos:start="21:27" pos:end="21:29"><name pos:start="21:27" pos:end="21:29">env</name></expr></argument>, <argument pos:start="21:32" pos:end="21:45"><expr pos:start="21:32" pos:end="21:45"><name pos:start="21:32" pos:end="21:45">PGM_PRIVILEGED</name></expr></argument>, <argument pos:start="21:48" pos:end="21:48"><expr pos:start="21:48" pos:end="21:48"><literal type="number" pos:start="21:48" pos:end="21:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:6">fh</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <name pos:start="29:10" pos:end="29:22"><name pos:start="29:10" pos:end="29:12">env</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:18">regs</name><index pos:start="29:19" pos:end="29:22">[<expr pos:start="29:20" pos:end="29:21"><name pos:start="29:20" pos:end="29:21">r1</name></expr>]</index></name> <operator pos:start="29:24" pos:end="29:25">&gt;&gt;</operator> <literal type="number" pos:start="29:27" pos:end="29:28">32</literal></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:12">fiba</name> <operator pos:start="33:14" pos:end="33:14">&amp;</operator> <literal type="number" pos:start="33:16" pos:end="33:18">0x7</literal></expr>)</condition> <block pos:start="33:21" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:17">

        <expr_stmt pos:start="35:9" pos:end="35:53"><expr pos:start="35:9" pos:end="35:52"><call pos:start="35:9" pos:end="35:52"><name pos:start="35:9" pos:end="35:25">program_interrupt</name><argument_list pos:start="35:26" pos:end="35:52">(<argument pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><name pos:start="35:27" pos:end="35:29">env</name></expr></argument>, <argument pos:start="35:32" pos:end="35:48"><expr pos:start="35:32" pos:end="35:48"><name pos:start="35:32" pos:end="35:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="35:51" pos:end="35:51"><expr pos:start="35:51" pos:end="35:51"><literal type="number" pos:start="35:51" pos:end="35:51">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:17">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:40"><expr pos:start="43:5" pos:end="43:39"><name pos:start="43:5" pos:end="43:9">pbdev</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:39"><name pos:start="43:13" pos:end="43:35">s390_pci_find_dev_by_fh</name><argument_list pos:start="43:36" pos:end="43:39">(<argument pos:start="43:37" pos:end="43:38"><expr pos:start="43:37" pos:end="43:38"><name pos:start="43:37" pos:end="43:38">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:15">(<expr pos:start="45:9" pos:end="45:14"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:14">pbdev</name></expr>)</condition> <block pos:start="45:17" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:17">

        <expr_stmt pos:start="47:9" pos:end="47:45"><expr pos:start="47:9" pos:end="47:44"><call pos:start="47:9" pos:end="47:44"><name pos:start="47:9" pos:end="47:13">setcc</name><argument_list pos:start="47:14" pos:end="47:44">(<argument pos:start="47:15" pos:end="47:17"><expr pos:start="47:15" pos:end="47:17"><name pos:start="47:15" pos:end="47:17">cpu</name></expr></argument>, <argument pos:start="47:20" pos:end="47:43"><expr pos:start="47:20" pos:end="47:43"><name pos:start="47:20" pos:end="47:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:17">return <expr pos:start="49:16" pos:end="49:16"><literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><call pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:10">memset</name><argument_list pos:start="55:11" pos:end="55:32">(<argument pos:start="55:12" pos:end="55:15"><expr pos:start="55:12" pos:end="55:15"><operator pos:start="55:12" pos:end="55:12">&amp;</operator><name pos:start="55:13" pos:end="55:15">fib</name></expr></argument>, <argument pos:start="55:18" pos:end="55:18"><expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr></argument>, <argument pos:start="55:21" pos:end="55:31"><expr pos:start="55:21" pos:end="55:31"><sizeof pos:start="55:21" pos:end="55:31">sizeof<argument_list pos:start="55:27" pos:end="55:31">(<argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">fib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="59:5" pos:end="119:5">switch <condition pos:start="59:12" pos:end="59:25">(<expr pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:17">pbdev</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:24">state</name></name></expr>)</condition> <block pos:start="59:27" pos:end="119:5">{<block_content pos:start="61:5" pos:end="117:17">

    <case pos:start="61:5" pos:end="61:26">case <expr pos:start="61:10" pos:end="61:25"><name pos:start="61:10" pos:end="61:25">ZPCI_FS_RESERVED</name></expr>:</case>

    <case pos:start="63:5" pos:end="63:25">case <expr pos:start="63:10" pos:end="63:24"><name pos:start="63:10" pos:end="63:24">ZPCI_FS_STANDBY</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><call pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:13">setcc</name><argument_list pos:start="65:14" pos:end="65:44">(<argument pos:start="65:15" pos:end="65:17"><expr pos:start="65:15" pos:end="65:17"><name pos:start="65:15" pos:end="65:17">cpu</name></expr></argument>, <argument pos:start="65:20" pos:end="65:43"><expr pos:start="65:20" pos:end="65:43"><name pos:start="65:20" pos:end="65:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:17">return <expr pos:start="67:16" pos:end="67:16"><literal type="number" pos:start="67:16" pos:end="67:16">0</literal></expr>;</return>

    <case pos:start="69:5" pos:end="69:26">case <expr pos:start="69:10" pos:end="69:25"><name pos:start="69:10" pos:end="69:25">ZPCI_FS_DISABLED</name></expr>:</case>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:32">(<expr pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:14">fh</name> <operator pos:start="71:16" pos:end="71:16">&amp;</operator> <name pos:start="71:18" pos:end="71:31">FH_MASK_ENABLE</name></expr>)</condition> <block pos:start="71:34" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:21">

            <expr_stmt pos:start="73:13" pos:end="73:49"><expr pos:start="73:13" pos:end="73:48"><call pos:start="73:13" pos:end="73:48"><name pos:start="73:13" pos:end="73:17">setcc</name><argument_list pos:start="73:18" pos:end="73:48">(<argument pos:start="73:19" pos:end="73:21"><expr pos:start="73:19" pos:end="73:21"><name pos:start="73:19" pos:end="73:21">cpu</name></expr></argument>, <argument pos:start="73:24" pos:end="73:47"><expr pos:start="73:24" pos:end="73:47"><name pos:start="73:24" pos:end="73:47">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="75:13" pos:end="75:21">return <expr pos:start="75:20" pos:end="75:20"><literal type="number" pos:start="75:20" pos:end="75:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="79:9" pos:end="79:17">goto <name pos:start="79:14" pos:end="79:16">out</name>;</goto>

    <comment type="block" pos:start="81:5" pos:end="83:78">/* BLOCKED bit is set to one coincident with the setting of ERROR bit.

     * FH Enabled bit is set to one in states of ENABLED, BLOCKED or ERROR. */</comment>

    <case pos:start="85:5" pos:end="85:23">case <expr pos:start="85:10" pos:end="85:22"><name pos:start="85:10" pos:end="85:22">ZPCI_FS_ERROR</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:23"><expr pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:11">fib</name><operator pos:start="87:12" pos:end="87:12">.</operator><name pos:start="87:13" pos:end="87:14">fc</name></name> <operator pos:start="87:16" pos:end="87:17">|=</operator> <literal type="number" pos:start="87:19" pos:end="87:22">0x20</literal></expr>;</expr_stmt>

    <case pos:start="89:5" pos:end="89:25">case <expr pos:start="89:10" pos:end="89:24"><name pos:start="89:10" pos:end="89:24">ZPCI_FS_BLOCKED</name></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:23"><expr pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:14"><name pos:start="91:9" pos:end="91:11">fib</name><operator pos:start="91:12" pos:end="91:12">.</operator><name pos:start="91:13" pos:end="91:14">fc</name></name> <operator pos:start="91:16" pos:end="91:17">|=</operator> <literal type="number" pos:start="91:19" pos:end="91:22">0x40</literal></expr>;</expr_stmt>

    <case pos:start="93:5" pos:end="93:25">case <expr pos:start="93:10" pos:end="93:24"><name pos:start="93:10" pos:end="93:24">ZPCI_FS_ENABLED</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:23"><expr pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:11">fib</name><operator pos:start="95:12" pos:end="95:12">.</operator><name pos:start="95:13" pos:end="95:14">fc</name></name> <operator pos:start="95:16" pos:end="95:17">|=</operator> <literal type="number" pos:start="95:19" pos:end="95:22">0x80</literal></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:33">(<expr pos:start="97:13" pos:end="97:32"><name pos:start="97:13" pos:end="97:32"><name pos:start="97:13" pos:end="97:17">pbdev</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:32">iommu_enabled</name></name></expr>)</condition> <block pos:start="97:35" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:27">

            <expr_stmt pos:start="99:13" pos:end="99:27"><expr pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:18"><name pos:start="99:13" pos:end="99:15">fib</name><operator pos:start="99:16" pos:end="99:16">.</operator><name pos:start="99:17" pos:end="99:18">fc</name></name> <operator pos:start="99:20" pos:end="99:21">|=</operator> <literal type="number" pos:start="99:23" pos:end="99:26">0x10</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:35">(<expr pos:start="103:13" pos:end="103:34"><operator pos:start="103:13" pos:end="103:13">!</operator><operator pos:start="103:14" pos:end="103:14">(</operator><name pos:start="103:15" pos:end="103:16">fh</name> <operator pos:start="103:18" pos:end="103:18">&amp;</operator> <name pos:start="103:20" pos:end="103:33">FH_MASK_ENABLE</name><operator pos:start="103:34" pos:end="103:34">)</operator></expr>)</condition> <block pos:start="103:37" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:40">

            <expr_stmt pos:start="105:13" pos:end="105:40"><expr pos:start="105:13" pos:end="105:39"><name pos:start="105:13" pos:end="105:25"><name pos:start="105:13" pos:end="105:15">env</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:21">regs</name><index pos:start="105:22" pos:end="105:25">[<expr pos:start="105:23" pos:end="105:24"><name pos:start="105:23" pos:end="105:24">r1</name></expr>]</index></name> <operator pos:start="105:27" pos:end="105:28">|=</operator> <literal type="number" pos:start="105:30" pos:end="105:33">1ULL</literal> <operator pos:start="105:35" pos:end="105:36">&lt;&lt;</operator> <literal type="number" pos:start="105:38" pos:end="105:39">63</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:33">case <expr pos:start="111:10" pos:end="111:32"><name pos:start="111:10" pos:end="111:32">ZPCI_FS_PERMANENT_ERROR</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:36"><expr pos:start="113:9" pos:end="113:35"><call pos:start="113:9" pos:end="113:35"><name pos:start="113:9" pos:end="113:13">setcc</name><argument_list pos:start="113:14" pos:end="113:35">(<argument pos:start="113:15" pos:end="113:17"><expr pos:start="113:15" pos:end="113:17"><name pos:start="113:15" pos:end="113:17">cpu</name></expr></argument>, <argument pos:start="113:20" pos:end="113:34"><expr pos:start="113:20" pos:end="113:34"><name pos:start="113:20" pos:end="113:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:66"><expr pos:start="115:9" pos:end="115:65"><call pos:start="115:9" pos:end="115:65"><name pos:start="115:9" pos:end="115:28">s390_set_status_code</name><argument_list pos:start="115:29" pos:end="115:65">(<argument pos:start="115:30" pos:end="115:32"><expr pos:start="115:30" pos:end="115:32"><name pos:start="115:30" pos:end="115:32">env</name></expr></argument>, <argument pos:start="115:35" pos:end="115:36"><expr pos:start="115:35" pos:end="115:36"><name pos:start="115:35" pos:end="115:36">r1</name></expr></argument>, <argument pos:start="115:39" pos:end="115:64"><expr pos:start="115:39" pos:end="115:64"><name pos:start="115:39" pos:end="115:64">ZPCI_STPCIFC_ST_PERM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:17">return <expr pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">0</literal></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="123:5" pos:end="123:32"><expr pos:start="123:5" pos:end="123:31"><call pos:start="123:5" pos:end="123:31"><name pos:start="123:5" pos:end="123:9">stq_p</name><argument_list pos:start="123:10" pos:end="123:31">(<argument pos:start="123:11" pos:end="123:18"><expr pos:start="123:11" pos:end="123:18"><operator pos:start="123:11" pos:end="123:11">&amp;</operator><name pos:start="123:12" pos:end="123:18"><name pos:start="123:12" pos:end="123:14">fib</name><operator pos:start="123:15" pos:end="123:15">.</operator><name pos:start="123:16" pos:end="123:18">pba</name></name></expr></argument>, <argument pos:start="123:21" pos:end="123:30"><expr pos:start="123:21" pos:end="123:30"><name pos:start="123:21" pos:end="123:30"><name pos:start="123:21" pos:end="123:25">pbdev</name><operator pos:start="123:26" pos:end="123:27">-&gt;</operator><name pos:start="123:28" pos:end="123:30">pba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:32"><expr pos:start="125:5" pos:end="125:31"><call pos:start="125:5" pos:end="125:31"><name pos:start="125:5" pos:end="125:9">stq_p</name><argument_list pos:start="125:10" pos:end="125:31">(<argument pos:start="125:11" pos:end="125:18"><expr pos:start="125:11" pos:end="125:18"><operator pos:start="125:11" pos:end="125:11">&amp;</operator><name pos:start="125:12" pos:end="125:18"><name pos:start="125:12" pos:end="125:14">fib</name><operator pos:start="125:15" pos:end="125:15">.</operator><name pos:start="125:16" pos:end="125:18">pal</name></name></expr></argument>, <argument pos:start="125:21" pos:end="125:30"><expr pos:start="125:21" pos:end="125:30"><name pos:start="125:21" pos:end="125:30"><name pos:start="125:21" pos:end="125:25">pbdev</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:30">pal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:36"><expr pos:start="127:5" pos:end="127:35"><call pos:start="127:5" pos:end="127:35"><name pos:start="127:5" pos:end="127:9">stq_p</name><argument_list pos:start="127:10" pos:end="127:35">(<argument pos:start="127:11" pos:end="127:19"><expr pos:start="127:11" pos:end="127:19"><operator pos:start="127:11" pos:end="127:11">&amp;</operator><name pos:start="127:12" pos:end="127:19"><name pos:start="127:12" pos:end="127:14">fib</name><operator pos:start="127:15" pos:end="127:15">.</operator><name pos:start="127:16" pos:end="127:19">iota</name></name></expr></argument>, <argument pos:start="127:22" pos:end="127:34"><expr pos:start="127:22" pos:end="127:34"><name pos:start="127:22" pos:end="127:34"><name pos:start="127:22" pos:end="127:26">pbdev</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:34">g_iota</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:53"><expr pos:start="129:5" pos:end="129:52"><call pos:start="129:5" pos:end="129:52"><name pos:start="129:5" pos:end="129:9">stq_p</name><argument_list pos:start="129:10" pos:end="129:52">(<argument pos:start="129:11" pos:end="129:19"><expr pos:start="129:11" pos:end="129:19"><operator pos:start="129:11" pos:end="129:11">&amp;</operator><name pos:start="129:12" pos:end="129:19"><name pos:start="129:12" pos:end="129:14">fib</name><operator pos:start="129:15" pos:end="129:15">.</operator><name pos:start="129:16" pos:end="129:19">aibv</name></name></expr></argument>, <argument pos:start="129:22" pos:end="129:51"><expr pos:start="129:22" pos:end="129:51"><name pos:start="129:22" pos:end="129:51"><name pos:start="129:22" pos:end="129:26">pbdev</name><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:34">routes</name><operator pos:start="129:35" pos:end="129:35">.</operator><name pos:start="129:36" pos:end="129:42">adapter</name><operator pos:start="129:43" pos:end="129:43">.</operator><name pos:start="129:44" pos:end="129:51">ind_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:57"><expr pos:start="131:5" pos:end="131:56"><call pos:start="131:5" pos:end="131:56"><name pos:start="131:5" pos:end="131:9">stq_p</name><argument_list pos:start="131:10" pos:end="131:56">(<argument pos:start="131:11" pos:end="131:19"><expr pos:start="131:11" pos:end="131:19"><operator pos:start="131:11" pos:end="131:11">&amp;</operator><name pos:start="131:12" pos:end="131:19"><name pos:start="131:12" pos:end="131:14">fib</name><operator pos:start="131:15" pos:end="131:15">.</operator><name pos:start="131:16" pos:end="131:19">aisb</name></name></expr></argument>, <argument pos:start="131:22" pos:end="131:55"><expr pos:start="131:22" pos:end="131:55"><name pos:start="131:22" pos:end="131:55"><name pos:start="131:22" pos:end="131:26">pbdev</name><operator pos:start="131:27" pos:end="131:28">-&gt;</operator><name pos:start="131:29" pos:end="131:34">routes</name><operator pos:start="131:35" pos:end="131:35">.</operator><name pos:start="131:36" pos:end="131:42">adapter</name><operator pos:start="131:43" pos:end="131:43">.</operator><name pos:start="131:44" pos:end="131:55">summary_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:42"><expr pos:start="133:5" pos:end="133:41"><call pos:start="133:5" pos:end="133:41"><name pos:start="133:5" pos:end="133:9">stq_p</name><argument_list pos:start="133:10" pos:end="133:41">(<argument pos:start="133:11" pos:end="133:23"><expr pos:start="133:11" pos:end="133:23"><operator pos:start="133:11" pos:end="133:11">&amp;</operator><name pos:start="133:12" pos:end="133:23"><name pos:start="133:12" pos:end="133:14">fib</name><operator pos:start="133:15" pos:end="133:15">.</operator><name pos:start="133:16" pos:end="133:23">fmb_addr</name></name></expr></argument>, <argument pos:start="133:26" pos:end="133:40"><expr pos:start="133:26" pos:end="133:40"><name pos:start="133:26" pos:end="133:40"><name pos:start="133:26" pos:end="133:30">pbdev</name><operator pos:start="133:31" pos:end="133:32">-&gt;</operator><name pos:start="133:33" pos:end="133:40">fmb_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="141:78"><expr pos:start="137:5" pos:end="141:77"><name pos:start="137:5" pos:end="137:8">data</name> <operator pos:start="137:10" pos:end="137:10">=</operator> <operator pos:start="137:12" pos:end="137:12">(</operator><operator pos:start="137:13" pos:end="137:13">(</operator><name pos:start="137:14" pos:end="137:21">uint32_t</name><operator pos:start="137:22" pos:end="137:22">)</operator><name pos:start="137:23" pos:end="137:32"><name pos:start="137:23" pos:end="137:27">pbdev</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:32">isc</name></name> <operator pos:start="137:34" pos:end="137:35">&lt;&lt;</operator> <literal type="number" pos:start="137:37" pos:end="137:38">28</literal><operator pos:start="137:39" pos:end="137:39">)</operator> <operator pos:start="137:41" pos:end="137:41">|</operator> <operator pos:start="137:43" pos:end="137:43">(</operator><operator pos:start="137:44" pos:end="137:44">(</operator><name pos:start="137:45" pos:end="137:52">uint32_t</name><operator pos:start="137:53" pos:end="137:53">)</operator><name pos:start="137:54" pos:end="137:63"><name pos:start="137:54" pos:end="137:58">pbdev</name><operator pos:start="137:59" pos:end="137:60">-&gt;</operator><name pos:start="137:61" pos:end="137:63">noi</name></name> <operator pos:start="137:65" pos:end="137:66">&lt;&lt;</operator> <literal type="number" pos:start="137:68" pos:end="137:69">16</literal><operator pos:start="137:70" pos:end="137:70">)</operator> <operator pos:start="137:72" pos:end="137:72">|</operator>

           <operator pos:start="139:12" pos:end="139:12">(</operator><operator pos:start="139:13" pos:end="139:13">(</operator><name pos:start="139:14" pos:end="139:21">uint32_t</name><operator pos:start="139:22" pos:end="139:22">)</operator><name pos:start="139:23" pos:end="139:54"><name pos:start="139:23" pos:end="139:27">pbdev</name><operator pos:start="139:28" pos:end="139:29">-&gt;</operator><name pos:start="139:30" pos:end="139:35">routes</name><operator pos:start="139:36" pos:end="139:36">.</operator><name pos:start="139:37" pos:end="139:43">adapter</name><operator pos:start="139:44" pos:end="139:44">.</operator><name pos:start="139:45" pos:end="139:54">ind_offset</name></name> <operator pos:start="139:56" pos:end="139:57">&lt;&lt;</operator> <literal type="number" pos:start="139:59" pos:end="139:59">8</literal><operator pos:start="139:60" pos:end="139:60">)</operator> <operator pos:start="139:62" pos:end="139:62">|</operator>

           <operator pos:start="141:12" pos:end="141:12">(</operator><operator pos:start="141:13" pos:end="141:13">(</operator><name pos:start="141:14" pos:end="141:21">uint32_t</name><operator pos:start="141:22" pos:end="141:22">)</operator><name pos:start="141:23" pos:end="141:32"><name pos:start="141:23" pos:end="141:27">pbdev</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:32">sum</name></name> <operator pos:start="141:34" pos:end="141:35">&lt;&lt;</operator> <literal type="number" pos:start="141:37" pos:end="141:37">7</literal><operator pos:start="141:38" pos:end="141:38">)</operator> <operator pos:start="141:40" pos:end="141:40">|</operator> <name pos:start="141:42" pos:end="141:77"><name pos:start="141:42" pos:end="141:46">pbdev</name><operator pos:start="141:47" pos:end="141:48">-&gt;</operator><name pos:start="141:49" pos:end="141:54">routes</name><operator pos:start="141:55" pos:end="141:55">.</operator><name pos:start="141:56" pos:end="141:62">adapter</name><operator pos:start="141:63" pos:end="141:63">.</operator><name pos:start="141:64" pos:end="141:77">summary_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:27"><expr pos:start="143:5" pos:end="143:26"><call pos:start="143:5" pos:end="143:26"><name pos:start="143:5" pos:end="143:9">stl_p</name><argument_list pos:start="143:10" pos:end="143:26">(<argument pos:start="143:11" pos:end="143:19"><expr pos:start="143:11" pos:end="143:19"><operator pos:start="143:11" pos:end="143:11">&amp;</operator><name pos:start="143:12" pos:end="143:19"><name pos:start="143:12" pos:end="143:14">fib</name><operator pos:start="143:15" pos:end="143:15">.</operator><name pos:start="143:16" pos:end="143:19">data</name></name></expr></argument>, <argument pos:start="143:22" pos:end="143:25"><expr pos:start="143:22" pos:end="143:25"><name pos:start="143:22" pos:end="143:25">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="147:1" pos:end="147:4"><name pos:start="147:1" pos:end="147:3">out</name>:</label>

    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:77">(<expr pos:start="149:9" pos:end="149:76"><call pos:start="149:9" pos:end="149:76"><name pos:start="149:9" pos:end="149:31">s390_cpu_virt_mem_write</name><argument_list pos:start="149:32" pos:end="149:76">(<argument pos:start="149:33" pos:end="149:35"><expr pos:start="149:33" pos:end="149:35"><name pos:start="149:33" pos:end="149:35">cpu</name></expr></argument>, <argument pos:start="149:38" pos:end="149:41"><expr pos:start="149:38" pos:end="149:41"><name pos:start="149:38" pos:end="149:41">fiba</name></expr></argument>, <argument pos:start="149:44" pos:end="149:45"><expr pos:start="149:44" pos:end="149:45"><name pos:start="149:44" pos:end="149:45">ar</name></expr></argument>, <argument pos:start="149:48" pos:end="149:62"><expr pos:start="149:48" pos:end="149:62"><operator pos:start="149:48" pos:end="149:48">(</operator><name pos:start="149:49" pos:end="149:55">uint8_t</name> <operator pos:start="149:57" pos:end="149:57">*</operator><operator pos:start="149:58" pos:end="149:58">)</operator><operator pos:start="149:59" pos:end="149:59">&amp;</operator><name pos:start="149:60" pos:end="149:62">fib</name></expr></argument>, <argument pos:start="149:65" pos:end="149:75"><expr pos:start="149:65" pos:end="149:75"><sizeof pos:start="149:65" pos:end="149:75">sizeof<argument_list pos:start="149:71" pos:end="149:75">(<argument pos:start="149:72" pos:end="149:74"><expr pos:start="149:72" pos:end="149:74"><name pos:start="149:72" pos:end="149:74">fib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:79" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:17">

        <return pos:start="151:9" pos:end="151:17">return <expr pos:start="151:16" pos:end="151:16"><literal type="number" pos:start="151:16" pos:end="151:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:19"><expr pos:start="157:5" pos:end="157:18"><call pos:start="157:5" pos:end="157:18"><name pos:start="157:5" pos:end="157:9">setcc</name><argument_list pos:start="157:10" pos:end="157:18">(<argument pos:start="157:11" pos:end="157:13"><expr pos:start="157:11" pos:end="157:13"><name pos:start="157:11" pos:end="157:13">cpu</name></expr></argument>, <argument pos:start="157:16" pos:end="157:17"><expr pos:start="157:16" pos:end="157:17"><name pos:start="157:16" pos:end="157:17">cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
