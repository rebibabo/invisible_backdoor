<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19474.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:48">bdrv_co_do_pwrite_zeroes</name><parameter_list pos:start="1:49" pos:end="3:54">(<parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">BlockDriverState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:18">offset</name></decl></parameter>, <parameter pos:start="3:21" pos:end="3:29"><decl pos:start="3:21" pos:end="3:29"><type pos:start="3:21" pos:end="3:29"><name pos:start="3:21" pos:end="3:23">int</name></type> <name pos:start="3:25" pos:end="3:29">count</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:53"><decl pos:start="3:32" pos:end="3:53"><type pos:start="3:32" pos:end="3:53"><name pos:start="3:32" pos:end="3:47">BdrvRequestFlags</name></type> <name pos:start="3:49" pos:end="3:53">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="201:1">{<block_content pos:start="7:5" pos:end="199:15">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">drv</name> <init pos:start="7:22" pos:end="7:30">= <expr pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">QEMUIOVector</name></type> <name pos:start="9:18" pos:end="9:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:16">iovec</name></name></type> <name pos:start="11:18" pos:end="11:20">iov</name> <init pos:start="11:22" pos:end="11:26">= <expr pos:start="11:24" pos:end="11:26"><block pos:start="11:24" pos:end="11:26">{<expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:19">need_flush</name> <init pos:start="15:21" pos:end="15:27">= <expr pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">head</name> <init pos:start="17:14" pos:end="17:16">= <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">tail</name> <init pos:start="19:14" pos:end="19:16">= <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:75"><decl pos:start="23:5" pos:end="23:74"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:24">max_write_zeroes</name> <init pos:start="23:26" pos:end="23:74">= <expr pos:start="23:28" pos:end="23:74"><call pos:start="23:28" pos:end="23:74"><name pos:start="23:28" pos:end="23:39">MIN_NON_ZERO</name><argument_list pos:start="23:40" pos:end="23:74">(<argument pos:start="23:41" pos:end="23:64"><expr pos:start="23:41" pos:end="23:64"><name pos:start="23:41" pos:end="23:64"><name pos:start="23:41" pos:end="23:42">bs</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:46">bl</name><operator pos:start="23:47" pos:end="23:47">.</operator><name pos:start="23:48" pos:end="23:64">max_pwrite_zeroes</name></name></expr></argument>, <argument pos:start="23:67" pos:end="23:73"><expr pos:start="23:67" pos:end="23:73"><name pos:start="23:67" pos:end="23:73">INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="27:47"><decl pos:start="25:5" pos:end="27:46"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">alignment</name> <init pos:start="25:19" pos:end="27:46">= <expr pos:start="25:21" pos:end="27:46"><call pos:start="25:21" pos:end="27:46"><name pos:start="25:21" pos:end="25:23">MAX</name><argument_list pos:start="25:24" pos:end="27:46">(<argument pos:start="25:25" pos:end="25:59"><expr pos:start="25:25" pos:end="25:59"><ternary pos:start="25:25" pos:end="25:59"><condition pos:start="25:25" pos:end="25:56"><expr pos:start="25:25" pos:end="25:54"><name pos:start="25:25" pos:end="25:54"><name pos:start="25:25" pos:end="25:26">bs</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:30">bl</name><operator pos:start="25:31" pos:end="25:31">.</operator><name pos:start="25:32" pos:end="25:54">pwrite_zeroes_alignment</name></name></expr> ?</condition><then/><else pos:start="25:57" pos:end="25:59">: <expr pos:start="25:59" pos:end="25:59"><literal type="number" pos:start="25:59" pos:end="25:59">1</literal></expr></else></ternary></expr></argument>,

                        <argument pos:start="27:25" pos:end="27:45"><expr pos:start="27:25" pos:end="27:45"><name pos:start="27:25" pos:end="27:45"><name pos:start="27:25" pos:end="27:26">bs</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:45">request_alignment</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><call pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:36">(<argument pos:start="31:12" pos:end="31:35"><expr pos:start="31:12" pos:end="31:35"><call pos:start="31:12" pos:end="31:35"><name pos:start="31:12" pos:end="31:24">is_power_of_2</name><argument_list pos:start="31:25" pos:end="31:35">(<argument pos:start="31:26" pos:end="31:34"><expr pos:start="31:26" pos:end="31:34"><name pos:start="31:26" pos:end="31:34">alignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:36"><expr pos:start="33:5" pos:end="33:35"><name pos:start="33:5" pos:end="33:8">head</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <name pos:start="33:12" pos:end="33:17">offset</name> <operator pos:start="33:19" pos:end="33:19">&amp;</operator> <operator pos:start="33:21" pos:end="33:21">(</operator><name pos:start="33:22" pos:end="33:30">alignment</name> <operator pos:start="33:32" pos:end="33:32">-</operator> <literal type="number" pos:start="33:34" pos:end="33:34">1</literal><operator pos:start="33:35" pos:end="33:35">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:46"><expr pos:start="35:5" pos:end="35:45"><name pos:start="35:5" pos:end="35:8">tail</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <operator pos:start="35:12" pos:end="35:12">(</operator><name pos:start="35:13" pos:end="35:18">offset</name> <operator pos:start="35:20" pos:end="35:20">+</operator> <name pos:start="35:22" pos:end="35:26">count</name><operator pos:start="35:27" pos:end="35:27">)</operator> <operator pos:start="35:29" pos:end="35:29">&amp;</operator> <operator pos:start="35:31" pos:end="35:31">(</operator><name pos:start="35:32" pos:end="35:40">alignment</name> <operator pos:start="35:42" pos:end="35:42">-</operator> <literal type="number" pos:start="35:44" pos:end="35:44">1</literal><operator pos:start="35:45" pos:end="35:45">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:41"><expr pos:start="37:5" pos:end="37:40"><name pos:start="37:5" pos:end="37:20">max_write_zeroes</name> <operator pos:start="37:22" pos:end="37:23">&amp;=</operator> <operator pos:start="37:25" pos:end="37:25">~</operator><operator pos:start="37:26" pos:end="37:26">(</operator><name pos:start="37:27" pos:end="37:35">alignment</name> <operator pos:start="37:37" pos:end="37:37">-</operator> <literal type="number" pos:start="37:39" pos:end="37:39">1</literal><operator pos:start="37:40" pos:end="37:40">)</operator></expr>;</expr_stmt>



    <while pos:start="41:5" pos:end="185:5">while <condition pos:start="41:11" pos:end="41:29">(<expr pos:start="41:12" pos:end="41:28"><name pos:start="41:12" pos:end="41:16">count</name> <operator pos:start="41:18" pos:end="41:18">&gt;</operator> <literal type="number" pos:start="41:20" pos:end="41:20">0</literal> <operator pos:start="41:22" pos:end="41:23">&amp;&amp;</operator> <operator pos:start="41:25" pos:end="41:25">!</operator><name pos:start="41:26" pos:end="41:28">ret</name></expr>)</condition> <block pos:start="41:31" pos:end="185:5">{<block_content pos:start="43:9" pos:end="183:21">

        <decl_stmt pos:start="43:9" pos:end="43:24"><decl pos:start="43:9" pos:end="43:23"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:15">num</name> <init pos:start="43:17" pos:end="43:23">= <expr pos:start="43:19" pos:end="43:23"><name pos:start="43:19" pos:end="43:23">count</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="47:9" pos:end="53:11">/* Align request.  Block drivers can expect the "bulk" of the request

         * to be aligned, and that unaligned requests do not cross cluster

         * boundaries.

         */</comment>

        <if_stmt pos:start="55:9" pos:end="69:9"><if pos:start="55:9" pos:end="63:9">if <condition pos:start="55:12" pos:end="55:17">(<expr pos:start="55:13" pos:end="55:16"><name pos:start="55:13" pos:end="55:16">head</name></expr>)</condition> <block pos:start="55:19" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:21">

            <comment type="block" pos:start="57:13" pos:end="57:71">/* Make a small request up to the first aligned sector.  */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:47"><expr pos:start="59:13" pos:end="59:46"><name pos:start="59:13" pos:end="59:15">num</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:46"><name pos:start="59:19" pos:end="59:21">MIN</name><argument_list pos:start="59:22" pos:end="59:46">(<argument pos:start="59:23" pos:end="59:27"><expr pos:start="59:23" pos:end="59:27"><name pos:start="59:23" pos:end="59:27">count</name></expr></argument>, <argument pos:start="59:30" pos:end="59:45"><expr pos:start="59:30" pos:end="59:45"><name pos:start="59:30" pos:end="59:38">alignment</name> <operator pos:start="59:40" pos:end="59:40">-</operator> <name pos:start="59:42" pos:end="59:45">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:21"><expr pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:16">head</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <literal type="number" pos:start="61:20" pos:end="61:20">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="69:9">else if <condition pos:start="63:19" pos:end="63:43">(<expr pos:start="63:20" pos:end="63:42"><name pos:start="63:20" pos:end="63:23">tail</name> <operator pos:start="63:25" pos:end="63:26">&amp;&amp;</operator> <name pos:start="63:28" pos:end="63:30">num</name> <operator pos:start="63:32" pos:end="63:32">&gt;</operator> <name pos:start="63:34" pos:end="63:42">alignment</name></expr>)</condition> <block pos:start="63:45" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:24">

            <comment type="block" pos:start="65:13" pos:end="65:66">/* Shorten the request to the last aligned sector.  */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:24"><expr pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:15">num</name> <operator pos:start="67:17" pos:end="67:18">-=</operator> <name pos:start="67:20" pos:end="67:23">tail</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="73:9" pos:end="73:32">/* limit request size */</comment>

        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:35">(<expr pos:start="75:13" pos:end="75:34"><name pos:start="75:13" pos:end="75:15">num</name> <operator pos:start="75:17" pos:end="75:17">&gt;</operator> <name pos:start="75:19" pos:end="75:34">max_write_zeroes</name></expr>)</condition> <block pos:start="75:37" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:35">

            <expr_stmt pos:start="77:13" pos:end="77:35"><expr pos:start="77:13" pos:end="77:34"><name pos:start="77:13" pos:end="77:15">num</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:34">max_write_zeroes</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:23"><expr pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <operator pos:start="83:15" pos:end="83:15">-</operator><name pos:start="83:16" pos:end="83:22">ENOTSUP</name></expr>;</expr_stmt>

        <comment type="block" pos:start="85:9" pos:end="85:60">/* First try the efficient write zeroes operation */</comment>

        <if_stmt pos:start="87:9" pos:end="105:9"><if pos:start="87:9" pos:end="101:9">if <condition pos:start="87:12" pos:end="87:39">(<expr pos:start="87:13" pos:end="87:38"><name pos:start="87:13" pos:end="87:38"><name pos:start="87:13" pos:end="87:15">drv</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:38">bdrv_co_pwrite_zeroes</name></name></expr>)</condition> <block pos:start="87:41" pos:end="101:9">{<block_content pos:start="89:13" pos:end="99:13">

            <expr_stmt pos:start="89:13" pos:end="91:79"><expr pos:start="89:13" pos:end="91:78"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="91:78"><name pos:start="89:19" pos:end="89:44"><name pos:start="89:19" pos:end="89:21">drv</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:44">bdrv_co_pwrite_zeroes</name></name><argument_list pos:start="89:45" pos:end="91:78">(<argument pos:start="89:46" pos:end="89:47"><expr pos:start="89:46" pos:end="89:47"><name pos:start="89:46" pos:end="89:47">bs</name></expr></argument>, <argument pos:start="89:50" pos:end="89:55"><expr pos:start="89:50" pos:end="89:55"><name pos:start="89:50" pos:end="89:55">offset</name></expr></argument>, <argument pos:start="89:58" pos:end="89:60"><expr pos:start="89:58" pos:end="89:60"><name pos:start="89:58" pos:end="89:60">num</name></expr></argument>,

                                             <argument pos:start="91:46" pos:end="91:77"><expr pos:start="91:46" pos:end="91:77"><name pos:start="91:46" pos:end="91:50">flags</name> <operator pos:start="91:52" pos:end="91:52">&amp;</operator> <name pos:start="91:54" pos:end="91:77"><name pos:start="91:54" pos:end="91:55">bs</name><operator pos:start="91:56" pos:end="91:57">-&gt;</operator><name pos:start="91:58" pos:end="91:77">supported_zero_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="95:59">(<expr pos:start="93:17" pos:end="95:58"><name pos:start="93:17" pos:end="93:19">ret</name> <operator pos:start="93:21" pos:end="93:22">!=</operator> <operator pos:start="93:24" pos:end="93:24">-</operator><name pos:start="93:25" pos:end="93:31">ENOTSUP</name> <operator pos:start="93:33" pos:end="93:34">&amp;&amp;</operator> <operator pos:start="93:36" pos:end="93:36">(</operator><name pos:start="93:37" pos:end="93:41">flags</name> <operator pos:start="93:43" pos:end="93:43">&amp;</operator> <name pos:start="93:45" pos:end="93:56">BDRV_REQ_FUA</name><operator pos:start="93:57" pos:end="93:57">)</operator> <operator pos:start="93:59" pos:end="93:60">&amp;&amp;</operator>

                <operator pos:start="95:17" pos:end="95:17">!</operator><operator pos:start="95:18" pos:end="95:18">(</operator><name pos:start="95:19" pos:end="95:42"><name pos:start="95:19" pos:end="95:20">bs</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:42">supported_zero_flags</name></name> <operator pos:start="95:44" pos:end="95:44">&amp;</operator> <name pos:start="95:46" pos:end="95:57">BDRV_REQ_FUA</name><operator pos:start="95:58" pos:end="95:58">)</operator></expr>)</condition> <block pos:start="95:61" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:34">

                <expr_stmt pos:start="97:17" pos:end="97:34"><expr pos:start="97:17" pos:end="97:33"><name pos:start="97:17" pos:end="97:26">need_flush</name> <operator pos:start="97:28" pos:end="97:28">=</operator> <name pos:start="97:30" pos:end="97:33">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="105:9">else <block pos:start="101:16" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:46">

            <expr_stmt pos:start="103:13" pos:end="103:46"><expr pos:start="103:13" pos:end="103:45"><call pos:start="103:13" pos:end="103:45"><name pos:start="103:13" pos:end="103:18">assert</name><argument_list pos:start="103:19" pos:end="103:45">(<argument pos:start="103:20" pos:end="103:44"><expr pos:start="103:20" pos:end="103:44"><operator pos:start="103:20" pos:end="103:20">!</operator><name pos:start="103:21" pos:end="103:44"><name pos:start="103:21" pos:end="103:22">bs</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:44">supported_zero_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="109:9" pos:end="177:9"><if pos:start="109:9" pos:end="177:9">if <condition pos:start="109:12" pos:end="109:28">(<expr pos:start="109:13" pos:end="109:27"><name pos:start="109:13" pos:end="109:15">ret</name> <operator pos:start="109:17" pos:end="109:18">==</operator> <operator pos:start="109:20" pos:end="109:20">-</operator><name pos:start="109:21" pos:end="109:27">ENOTSUP</name></expr>)</condition> <block pos:start="109:30" pos:end="177:9">{<block_content pos:start="113:13" pos:end="175:13">

            <comment type="block" pos:start="111:13" pos:end="111:75">/* Fall back to bounce buffer if write zeroes is unsupported */</comment>

            <decl_stmt pos:start="113:13" pos:end="115:76"><decl pos:start="113:13" pos:end="115:75"><type pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">int</name></type> <name pos:start="113:17" pos:end="113:28">max_xfer_len</name> <init pos:start="113:30" pos:end="115:75">= <expr pos:start="113:32" pos:end="115:75"><call pos:start="113:32" pos:end="115:75"><name pos:start="113:32" pos:end="113:43">MIN_NON_ZERO</name><argument_list pos:start="113:44" pos:end="115:75">(<argument pos:start="113:45" pos:end="113:70"><expr pos:start="113:45" pos:end="113:70"><name pos:start="113:45" pos:end="113:70"><name pos:start="113:45" pos:end="113:46">bs</name><operator pos:start="113:47" pos:end="113:48">-&gt;</operator><name pos:start="113:49" pos:end="113:50">bl</name><operator pos:start="113:51" pos:end="113:51">.</operator><name pos:start="113:52" pos:end="113:70">max_transfer_length</name></name></expr></argument>,

                                            <argument pos:start="115:45" pos:end="115:74"><expr pos:start="115:45" pos:end="115:74"><name pos:start="115:45" pos:end="115:74">MAX_WRITE_ZEROES_BOUNCE_BUFFER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="117:13" pos:end="117:72"><decl pos:start="117:13" pos:end="117:71"><type pos:start="117:13" pos:end="117:28"><name pos:start="117:13" pos:end="117:28">BdrvRequestFlags</name></type> <name pos:start="117:30" pos:end="117:40">write_flags</name> <init pos:start="117:42" pos:end="117:71">= <expr pos:start="117:44" pos:end="117:71"><name pos:start="117:44" pos:end="117:48">flags</name> <operator pos:start="117:50" pos:end="117:50">&amp;</operator> <operator pos:start="117:52" pos:end="117:52">~</operator><name pos:start="117:53" pos:end="117:71">BDRV_REQ_ZERO_WRITE</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="121:13" pos:end="133:13"><if pos:start="121:13" pos:end="133:13">if <condition pos:start="121:16" pos:end="123:60">(<expr pos:start="121:17" pos:end="123:59"><operator pos:start="121:17" pos:end="121:17">(</operator><name pos:start="121:18" pos:end="121:22">flags</name> <operator pos:start="121:24" pos:end="121:24">&amp;</operator> <name pos:start="121:26" pos:end="121:37">BDRV_REQ_FUA</name><operator pos:start="121:38" pos:end="121:38">)</operator> <operator pos:start="121:40" pos:end="121:41">&amp;&amp;</operator>

                <operator pos:start="123:17" pos:end="123:17">!</operator><operator pos:start="123:18" pos:end="123:18">(</operator><name pos:start="123:19" pos:end="123:43"><name pos:start="123:19" pos:end="123:20">bs</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:43">supported_write_flags</name></name> <operator pos:start="123:45" pos:end="123:45">&amp;</operator> <name pos:start="123:47" pos:end="123:58">BDRV_REQ_FUA</name><operator pos:start="123:59" pos:end="123:59">)</operator></expr>)</condition> <block pos:start="123:62" pos:end="133:13">{<block_content pos:start="129:17" pos:end="131:34">

                <comment type="block" pos:start="125:17" pos:end="127:66">/* No need for bdrv_driver_pwrite() to do a fallback

                 * flush on each chunk; use just one at the end */</comment>

                <expr_stmt pos:start="129:17" pos:end="129:45"><expr pos:start="129:17" pos:end="129:44"><name pos:start="129:17" pos:end="129:27">write_flags</name> <operator pos:start="129:29" pos:end="129:30">&amp;=</operator> <operator pos:start="129:32" pos:end="129:32">~</operator><name pos:start="129:33" pos:end="129:44">BDRV_REQ_FUA</name></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:34"><expr pos:start="131:17" pos:end="131:33"><name pos:start="131:17" pos:end="131:26">need_flush</name> <operator pos:start="131:28" pos:end="131:28">=</operator> <name pos:start="131:30" pos:end="131:33">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:61"><expr pos:start="135:13" pos:end="135:60"><name pos:start="135:13" pos:end="135:15">num</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <call pos:start="135:19" pos:end="135:60"><name pos:start="135:19" pos:end="135:21">MIN</name><argument_list pos:start="135:22" pos:end="135:60">(<argument pos:start="135:23" pos:end="135:25"><expr pos:start="135:23" pos:end="135:25"><name pos:start="135:23" pos:end="135:25">num</name></expr></argument>, <argument pos:start="135:28" pos:end="135:59"><expr pos:start="135:28" pos:end="135:59"><name pos:start="135:28" pos:end="135:39">max_xfer_len</name> <operator pos:start="135:41" pos:end="135:42">&lt;&lt;</operator> <name pos:start="135:44" pos:end="135:59">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:30"><expr pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:23"><name pos:start="137:13" pos:end="137:15">iov</name><operator pos:start="137:16" pos:end="137:16">.</operator><name pos:start="137:17" pos:end="137:23">iov_len</name></name> <operator pos:start="137:25" pos:end="137:25">=</operator> <name pos:start="137:27" pos:end="137:29">num</name></expr>;</expr_stmt>

            <if_stmt pos:start="139:13" pos:end="153:13"><if pos:start="139:13" pos:end="153:13">if <condition pos:start="139:16" pos:end="139:37">(<expr pos:start="139:17" pos:end="139:36"><name pos:start="139:17" pos:end="139:28"><name pos:start="139:17" pos:end="139:19">iov</name><operator pos:start="139:20" pos:end="139:20">.</operator><name pos:start="139:21" pos:end="139:28">iov_base</name></name> <operator pos:start="139:30" pos:end="139:31">==</operator> <name pos:start="139:33" pos:end="139:36">NULL</name></expr>)</condition> <block pos:start="139:39" pos:end="153:13">{<block_content pos:start="141:17" pos:end="151:45">

                <expr_stmt pos:start="141:17" pos:end="141:60"><expr pos:start="141:17" pos:end="141:59"><name pos:start="141:17" pos:end="141:28"><name pos:start="141:17" pos:end="141:19">iov</name><operator pos:start="141:20" pos:end="141:20">.</operator><name pos:start="141:21" pos:end="141:28">iov_base</name></name> <operator pos:start="141:30" pos:end="141:30">=</operator> <call pos:start="141:32" pos:end="141:59"><name pos:start="141:32" pos:end="141:50">qemu_try_blockalign</name><argument_list pos:start="141:51" pos:end="141:59">(<argument pos:start="141:52" pos:end="141:53"><expr pos:start="141:52" pos:end="141:53"><name pos:start="141:52" pos:end="141:53">bs</name></expr></argument>, <argument pos:start="141:56" pos:end="141:58"><expr pos:start="141:56" pos:end="141:58"><name pos:start="141:56" pos:end="141:58">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="143:17" pos:end="149:17"><if pos:start="143:17" pos:end="149:17">if <condition pos:start="143:20" pos:end="143:41">(<expr pos:start="143:21" pos:end="143:40"><name pos:start="143:21" pos:end="143:32"><name pos:start="143:21" pos:end="143:23">iov</name><operator pos:start="143:24" pos:end="143:24">.</operator><name pos:start="143:25" pos:end="143:32">iov_base</name></name> <operator pos:start="143:34" pos:end="143:35">==</operator> <name pos:start="143:37" pos:end="143:40">NULL</name></expr>)</condition> <block pos:start="143:43" pos:end="149:17">{<block_content pos:start="145:21" pos:end="147:30">

                    <expr_stmt pos:start="145:21" pos:end="145:34"><expr pos:start="145:21" pos:end="145:33"><name pos:start="145:21" pos:end="145:23">ret</name> <operator pos:start="145:25" pos:end="145:25">=</operator> <operator pos:start="145:27" pos:end="145:27">-</operator><name pos:start="145:28" pos:end="145:33">ENOMEM</name></expr>;</expr_stmt>

                    <goto pos:start="147:21" pos:end="147:30">goto <name pos:start="147:26" pos:end="147:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:45"><expr pos:start="151:17" pos:end="151:44"><call pos:start="151:17" pos:end="151:44"><name pos:start="151:17" pos:end="151:22">memset</name><argument_list pos:start="151:23" pos:end="151:44">(<argument pos:start="151:24" pos:end="151:35"><expr pos:start="151:24" pos:end="151:35"><name pos:start="151:24" pos:end="151:35"><name pos:start="151:24" pos:end="151:26">iov</name><operator pos:start="151:27" pos:end="151:27">.</operator><name pos:start="151:28" pos:end="151:35">iov_base</name></name></expr></argument>, <argument pos:start="151:38" pos:end="151:38"><expr pos:start="151:38" pos:end="151:38"><literal type="number" pos:start="151:38" pos:end="151:38">0</literal></expr></argument>, <argument pos:start="151:41" pos:end="151:43"><expr pos:start="151:41" pos:end="151:43"><name pos:start="151:41" pos:end="151:43">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:53"><expr pos:start="155:13" pos:end="155:52"><call pos:start="155:13" pos:end="155:52"><name pos:start="155:13" pos:end="155:36">qemu_iovec_init_external</name><argument_list pos:start="155:37" pos:end="155:52">(<argument pos:start="155:38" pos:end="155:42"><expr pos:start="155:38" pos:end="155:42"><operator pos:start="155:38" pos:end="155:38">&amp;</operator><name pos:start="155:39" pos:end="155:42">qiov</name></expr></argument>, <argument pos:start="155:45" pos:end="155:48"><expr pos:start="155:45" pos:end="155:48"><operator pos:start="155:45" pos:end="155:45">&amp;</operator><name pos:start="155:46" pos:end="155:48">iov</name></expr></argument>, <argument pos:start="155:51" pos:end="155:51"><expr pos:start="155:51" pos:end="155:51"><literal type="number" pos:start="155:51" pos:end="155:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="159:13" pos:end="159:75"><expr pos:start="159:13" pos:end="159:74"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:74"><name pos:start="159:19" pos:end="159:37">bdrv_driver_pwritev</name><argument_list pos:start="159:38" pos:end="159:74">(<argument pos:start="159:39" pos:end="159:40"><expr pos:start="159:39" pos:end="159:40"><name pos:start="159:39" pos:end="159:40">bs</name></expr></argument>, <argument pos:start="159:43" pos:end="159:48"><expr pos:start="159:43" pos:end="159:48"><name pos:start="159:43" pos:end="159:48">offset</name></expr></argument>, <argument pos:start="159:51" pos:end="159:53"><expr pos:start="159:51" pos:end="159:53"><name pos:start="159:51" pos:end="159:53">num</name></expr></argument>, <argument pos:start="159:56" pos:end="159:60"><expr pos:start="159:56" pos:end="159:60"><operator pos:start="159:56" pos:end="159:56">&amp;</operator><name pos:start="159:57" pos:end="159:60">qiov</name></expr></argument>, <argument pos:start="159:63" pos:end="159:73"><expr pos:start="159:63" pos:end="159:73"><name pos:start="159:63" pos:end="159:73">write_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="163:13" pos:end="167:15">/* Keep bounce buffer around if it is big enough for all

             * all future requests.

             */</comment>

            <if_stmt pos:start="169:13" pos:end="175:13"><if pos:start="169:13" pos:end="175:13">if <condition pos:start="169:16" pos:end="169:55">(<expr pos:start="169:17" pos:end="169:54"><name pos:start="169:17" pos:end="169:19">num</name> <operator pos:start="169:21" pos:end="169:21">&lt;</operator> <name pos:start="169:23" pos:end="169:34">max_xfer_len</name> <operator pos:start="169:36" pos:end="169:37">&lt;&lt;</operator> <name pos:start="169:39" pos:end="169:54">BDRV_SECTOR_BITS</name></expr>)</condition> <block pos:start="169:57" pos:end="175:13">{<block_content pos:start="171:17" pos:end="173:36">

                <expr_stmt pos:start="171:17" pos:end="171:41"><expr pos:start="171:17" pos:end="171:40"><call pos:start="171:17" pos:end="171:40"><name pos:start="171:17" pos:end="171:26">qemu_vfree</name><argument_list pos:start="171:27" pos:end="171:40">(<argument pos:start="171:28" pos:end="171:39"><expr pos:start="171:28" pos:end="171:39"><name pos:start="171:28" pos:end="171:39"><name pos:start="171:28" pos:end="171:30">iov</name><operator pos:start="171:31" pos:end="171:31">.</operator><name pos:start="171:32" pos:end="171:39">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:36"><expr pos:start="173:17" pos:end="173:35"><name pos:start="173:17" pos:end="173:28"><name pos:start="173:17" pos:end="173:19">iov</name><operator pos:start="173:20" pos:end="173:20">.</operator><name pos:start="173:21" pos:end="173:28">iov_base</name></name> <operator pos:start="173:30" pos:end="173:30">=</operator> <name pos:start="173:32" pos:end="173:35">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:22"><expr pos:start="181:9" pos:end="181:21"><name pos:start="181:9" pos:end="181:14">offset</name> <operator pos:start="181:16" pos:end="181:17">+=</operator> <name pos:start="181:19" pos:end="181:21">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:21"><expr pos:start="183:9" pos:end="183:20"><name pos:start="183:9" pos:end="183:13">count</name> <operator pos:start="183:15" pos:end="183:16">-=</operator> <name pos:start="183:18" pos:end="183:20">num</name></expr>;</expr_stmt>

    </block_content>}</block></while>



<label pos:start="189:1" pos:end="189:5"><name pos:start="189:1" pos:end="189:4">fail</name>:</label>

    <if_stmt pos:start="191:5" pos:end="195:5"><if pos:start="191:5" pos:end="195:5">if <condition pos:start="191:8" pos:end="191:31">(<expr pos:start="191:9" pos:end="191:30"><name pos:start="191:9" pos:end="191:11">ret</name> <operator pos:start="191:13" pos:end="191:14">==</operator> <literal type="number" pos:start="191:16" pos:end="191:16">0</literal> <operator pos:start="191:18" pos:end="191:19">&amp;&amp;</operator> <name pos:start="191:21" pos:end="191:30">need_flush</name></expr>)</condition> <block pos:start="191:33" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:32">

        <expr_stmt pos:start="193:9" pos:end="193:32"><expr pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <call pos:start="193:15" pos:end="193:31"><name pos:start="193:15" pos:end="193:27">bdrv_co_flush</name><argument_list pos:start="193:28" pos:end="193:31">(<argument pos:start="193:29" pos:end="193:30"><expr pos:start="193:29" pos:end="193:30"><name pos:start="193:29" pos:end="193:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:29"><expr pos:start="197:5" pos:end="197:28"><call pos:start="197:5" pos:end="197:28"><name pos:start="197:5" pos:end="197:14">qemu_vfree</name><argument_list pos:start="197:15" pos:end="197:28">(<argument pos:start="197:16" pos:end="197:27"><expr pos:start="197:16" pos:end="197:27"><name pos:start="197:16" pos:end="197:27"><name pos:start="197:16" pos:end="197:18">iov</name><operator pos:start="197:19" pos:end="197:19">.</operator><name pos:start="197:20" pos:end="197:27">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="199:5" pos:end="199:15">return <expr pos:start="199:12" pos:end="199:14"><name pos:start="199:12" pos:end="199:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
