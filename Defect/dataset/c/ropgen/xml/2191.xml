<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2191.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">qemu_aio_set_fd_handler</name><parameter_list pos:start="1:28" pos:end="9:41">(<parameter pos:start="1:29" pos:end="1:34"><decl pos:start="1:29" pos:end="1:34"><type pos:start="1:29" pos:end="1:34"><name pos:start="1:29" pos:end="1:31">int</name></type> <name pos:start="1:33" pos:end="1:34">fd</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:37">IOHandler</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:46">io_read</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:47"><decl pos:start="5:29" pos:end="5:47"><type pos:start="5:29" pos:end="5:47"><name pos:start="5:29" pos:end="5:37">IOHandler</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:47">io_write</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:53"><decl pos:start="7:29" pos:end="7:53"><type pos:start="7:29" pos:end="7:53"><name pos:start="7:29" pos:end="7:43">AioFlushHandler</name> <modifier pos:start="7:45" pos:end="7:45">*</modifier></type><name pos:start="7:46" pos:end="7:53">io_flush</name></decl></parameter>,

                            <parameter pos:start="9:29" pos:end="9:40"><decl pos:start="9:29" pos:end="9:40"><type pos:start="9:29" pos:end="9:40"><name pos:start="9:29" pos:end="9:32">void</name> <modifier pos:start="9:34" pos:end="9:34">*</modifier></type><name pos:start="9:35" pos:end="9:40">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="85:1">{<block_content pos:start="13:5" pos:end="83:13">

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">AioHandler</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:20">node</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:32"><expr pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:8">node</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:31"><name pos:start="17:12" pos:end="17:27">find_aio_handler</name><argument_list pos:start="17:28" pos:end="17:31">(<argument pos:start="17:29" pos:end="17:30"><expr pos:start="17:29" pos:end="17:30"><name pos:start="17:29" pos:end="17:30">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:41">/* Are we deleting the fd handler? */</comment>

    <if_stmt pos:start="23:5" pos:end="75:5"><if pos:start="23:5" pos:end="51:5">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:16">io_read</name> <operator pos:start="23:18" pos:end="23:19">&amp;&amp;</operator> <operator pos:start="23:21" pos:end="23:21">!</operator><name pos:start="23:22" pos:end="23:29">io_write</name></expr>)</condition> <block pos:start="23:32" pos:end="51:5">{<block_content pos:start="25:9" pos:end="49:9">

        <if_stmt pos:start="25:9" pos:end="49:9"><if pos:start="25:9" pos:end="49:9">if <condition pos:start="25:12" pos:end="25:17">(<expr pos:start="25:13" pos:end="25:16"><name pos:start="25:13" pos:end="25:16">node</name></expr>)</condition> <block pos:start="25:19" pos:end="49:9">{<block_content pos:start="29:13" pos:end="47:13">

            <comment type="block" pos:start="27:13" pos:end="27:68">/* If the lock is held, just mark the node as deleted */</comment>

            <if_stmt pos:start="29:13" pos:end="47:13"><if pos:start="29:13" pos:end="31:34">if <condition pos:start="29:16" pos:end="29:33">(<expr pos:start="29:17" pos:end="29:32"><name pos:start="29:17" pos:end="29:32">walking_handlers</name></expr>)</condition><block type="pseudo" pos:start="31:17" pos:end="31:34"><block_content pos:start="31:17" pos:end="31:34">

                <expr_stmt pos:start="31:17" pos:end="31:34"><expr pos:start="31:17" pos:end="31:33"><name pos:start="31:17" pos:end="31:29"><name pos:start="31:17" pos:end="31:20">node</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:29">deleted</name></name> <operator pos:start="31:31" pos:end="31:31">=</operator> <literal type="number" pos:start="31:33" pos:end="31:33">1</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="33:13" pos:end="47:13">else <block pos:start="33:18" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:32">

                <comment type="block" pos:start="35:17" pos:end="41:19">/* Otherwise, delete it for real.  We can't just mark it as

                 * deleted because deleted nodes are only cleaned up after

                 * releasing the walking_handlers lock.

                 */</comment>

                <expr_stmt pos:start="43:17" pos:end="43:40"><expr pos:start="43:17" pos:end="43:39"><call pos:start="43:17" pos:end="43:39"><name pos:start="43:17" pos:end="43:27">LIST_REMOVE</name><argument_list pos:start="43:28" pos:end="43:39">(<argument pos:start="43:29" pos:end="43:32"><expr pos:start="43:29" pos:end="43:32"><name pos:start="43:29" pos:end="43:32">node</name></expr></argument>, <argument pos:start="43:35" pos:end="43:38"><expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:32"><expr pos:start="45:17" pos:end="45:31"><call pos:start="45:17" pos:end="45:31"><name pos:start="45:17" pos:end="45:25">qemu_free</name><argument_list pos:start="45:26" pos:end="45:31">(<argument pos:start="45:27" pos:end="45:30"><expr pos:start="45:27" pos:end="45:30"><name pos:start="45:27" pos:end="45:30">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="75:5">else <block pos:start="51:12" pos:end="75:5">{<block_content pos:start="53:9" pos:end="73:30">

        <if_stmt pos:start="53:9" pos:end="63:9"><if pos:start="53:9" pos:end="63:9">if <condition pos:start="53:12" pos:end="53:25">(<expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:16">node</name> <operator pos:start="53:18" pos:end="53:19">==</operator> <name pos:start="53:21" pos:end="53:24">NULL</name></expr>)</condition> <block pos:start="53:27" pos:end="63:9">{<block_content pos:start="57:13" pos:end="61:56">

            <comment type="block" pos:start="55:13" pos:end="55:60">/* Alloc and insert if it's not already there */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:52"><expr pos:start="57:13" pos:end="57:51"><name pos:start="57:13" pos:end="57:16">node</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:51"><name pos:start="57:20" pos:end="57:31">qemu_mallocz</name><argument_list pos:start="57:32" pos:end="57:51">(<argument pos:start="57:33" pos:end="57:50"><expr pos:start="57:33" pos:end="57:50"><sizeof pos:start="57:33" pos:end="57:50">sizeof<argument_list pos:start="57:39" pos:end="57:50">(<argument pos:start="57:40" pos:end="57:49"><expr pos:start="57:40" pos:end="57:49"><name pos:start="57:40" pos:end="57:49">AioHandler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:26"><expr pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:16">node</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:20">fd</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <name pos:start="59:24" pos:end="59:25">fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:56"><expr pos:start="61:13" pos:end="61:55"><call pos:start="61:13" pos:end="61:55"><name pos:start="61:13" pos:end="61:28">LIST_INSERT_HEAD</name><argument_list pos:start="61:29" pos:end="61:55">(<argument pos:start="61:30" pos:end="61:42"><expr pos:start="61:30" pos:end="61:42"><operator pos:start="61:30" pos:end="61:30">&amp;</operator><name pos:start="61:31" pos:end="61:42">aio_handlers</name></expr></argument>, <argument pos:start="61:45" pos:end="61:48"><expr pos:start="61:45" pos:end="61:48"><name pos:start="61:45" pos:end="61:48">node</name></expr></argument>, <argument pos:start="61:51" pos:end="61:54"><expr pos:start="61:51" pos:end="61:54"><name pos:start="61:51" pos:end="61:54">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="65:9" pos:end="65:52">/* Update handler with latest information */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:12">node</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:21">io_read</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:31">io_read</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:34"><expr pos:start="69:9" pos:end="69:33"><name pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:12">node</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:22">io_write</name></name> <operator pos:start="69:24" pos:end="69:24">=</operator> <name pos:start="69:26" pos:end="69:33">io_write</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:12">node</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:22">io_flush</name></name> <operator pos:start="71:24" pos:end="71:24">=</operator> <name pos:start="71:26" pos:end="71:33">io_flush</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:12">node</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:20">opaque</name></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <name pos:start="73:24" pos:end="73:29">opaque</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:62"><expr pos:start="79:5" pos:end="79:61"><call pos:start="79:5" pos:end="79:61"><name pos:start="79:5" pos:end="79:24">qemu_set_fd_handler2</name><argument_list pos:start="79:25" pos:end="79:61">(<argument pos:start="79:26" pos:end="79:27"><expr pos:start="79:26" pos:end="79:27"><name pos:start="79:26" pos:end="79:27">fd</name></expr></argument>, <argument pos:start="79:30" pos:end="79:33"><expr pos:start="79:30" pos:end="79:33"><name pos:start="79:30" pos:end="79:33">NULL</name></expr></argument>, <argument pos:start="79:36" pos:end="79:42"><expr pos:start="79:36" pos:end="79:42"><name pos:start="79:36" pos:end="79:42">io_read</name></expr></argument>, <argument pos:start="79:45" pos:end="79:52"><expr pos:start="79:45" pos:end="79:52"><name pos:start="79:45" pos:end="79:52">io_write</name></expr></argument>, <argument pos:start="79:55" pos:end="79:60"><expr pos:start="79:55" pos:end="79:60"><name pos:start="79:55" pos:end="79:60">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
