<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13835.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">evalPrimary</name><parameter_list pos:start="1:24" pos:end="1:34">(<parameter pos:start="1:25" pos:end="1:33"><decl pos:start="1:25" pos:end="1:33"><type pos:start="1:25" pos:end="1:32"><name pos:start="1:25" pos:end="1:30">Parser</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">p</name></decl></parameter>)</parameter_list><block pos:start="1:35" pos:end="169:1">{<block_content pos:start="3:5" pos:end="167:15">

    <decl_stmt pos:start="3:5" pos:end="3:21"><decl pos:start="3:5" pos:end="3:12"><type pos:start="3:5" pos:end="3:10"><name pos:start="3:5" pos:end="3:10">double</name></type> <name pos:start="3:12" pos:end="3:12">d</name></decl>, <decl pos:start="3:15" pos:end="3:20"><type ref="prev" pos:start="3:5" pos:end="3:10"/><name pos:start="3:15" pos:end="3:16">d2</name><init pos:start="3:17" pos:end="3:20">=<expr pos:start="3:18" pos:end="3:20"><name pos:start="3:18" pos:end="3:20">NAN</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:14">next</name><init pos:start="5:15" pos:end="5:20">= <expr pos:start="5:17" pos:end="5:20"><name pos:start="5:17" pos:end="5:20"><name pos:start="5:17" pos:end="5:17">p</name><operator pos:start="5:18" pos:end="5:19">-&gt;</operator><name pos:start="5:20" pos:end="5:20">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:16">/* number */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:27"><expr pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:5">d</name><operator pos:start="13:6" pos:end="13:6">=</operator> <call pos:start="13:8" pos:end="13:26"><name pos:start="13:8" pos:end="13:13">strtod</name><argument_list pos:start="13:14" pos:end="13:26">(<argument pos:start="13:15" pos:end="13:18"><expr pos:start="13:15" pos:end="13:18"><name pos:start="13:15" pos:end="13:18"><name pos:start="13:15" pos:end="13:15">p</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:18">s</name></name></expr></argument>, <argument pos:start="13:21" pos:end="13:25"><expr pos:start="13:21" pos:end="13:25"><operator pos:start="13:21" pos:end="13:21">&amp;</operator><name pos:start="13:22" pos:end="13:25">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if<condition pos:start="15:7" pos:end="15:20">(<expr pos:start="15:8" pos:end="15:19"><name pos:start="15:8" pos:end="15:11">next</name> <operator pos:start="15:13" pos:end="15:14">!=</operator> <name pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:16">p</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:19">s</name></name></expr>)</condition><block pos:start="15:21" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:15">

        <expr_stmt pos:start="17:9" pos:end="17:19"><expr pos:start="17:9" pos:end="17:18"><call pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:12">push</name><argument_list pos:start="17:13" pos:end="17:18">(<argument pos:start="17:14" pos:end="17:14"><expr pos:start="17:14" pos:end="17:14"><name pos:start="17:14" pos:end="17:14">p</name></expr></argument>, <argument pos:start="17:17" pos:end="17:17"><expr pos:start="17:17" pos:end="17:17"><name pos:start="17:17" pos:end="17:17">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:19"><expr pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:12"><name pos:start="19:9" pos:end="19:9">p</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:12">s</name></name><operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:18">next</name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

    

    <comment type="block" pos:start="27:5" pos:end="27:25">/* named constants */</comment>

    <for pos:start="29:5" pos:end="41:5">for<control pos:start="29:8" pos:end="29:35">(<init pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">i</name><operator pos:start="29:10" pos:end="29:10">=</operator><literal type="number" pos:start="29:11" pos:end="29:11">0</literal></expr>;</init> <condition pos:start="29:14" pos:end="29:30"><expr pos:start="29:14" pos:end="29:29"><name pos:start="29:14" pos:end="29:29"><name pos:start="29:14" pos:end="29:14">p</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:26">const_name</name><index pos:start="29:27" pos:end="29:29">[<expr pos:start="29:28" pos:end="29:28"><name pos:start="29:28" pos:end="29:28">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><name pos:start="29:32" pos:end="29:32">i</name><operator pos:start="29:33" pos:end="29:34">++</operator></expr></incr>)</control><block pos:start="29:36" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:9">

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if<condition pos:start="31:11" pos:end="31:44">(<expr pos:start="31:12" pos:end="31:43"><call pos:start="31:12" pos:end="31:43"><name pos:start="31:12" pos:end="31:19">strmatch</name><argument_list pos:start="31:20" pos:end="31:43">(<argument pos:start="31:21" pos:end="31:24"><expr pos:start="31:21" pos:end="31:24"><name pos:start="31:21" pos:end="31:24"><name pos:start="31:21" pos:end="31:21">p</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:24">s</name></name></expr></argument>, <argument pos:start="31:27" pos:end="31:42"><expr pos:start="31:27" pos:end="31:42"><name pos:start="31:27" pos:end="31:42"><name pos:start="31:27" pos:end="31:27">p</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:39">const_name</name><index pos:start="31:40" pos:end="31:42">[<expr pos:start="31:41" pos:end="31:41"><name pos:start="31:41" pos:end="31:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="31:45" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:19">

            <expr_stmt pos:start="33:13" pos:end="33:39"><expr pos:start="33:13" pos:end="33:38"><call pos:start="33:13" pos:end="33:38"><name pos:start="33:13" pos:end="33:16">push</name><argument_list pos:start="33:17" pos:end="33:38">(<argument pos:start="33:18" pos:end="33:18"><expr pos:start="33:18" pos:end="33:18"><name pos:start="33:18" pos:end="33:18">p</name></expr></argument>, <argument pos:start="33:21" pos:end="33:37"><expr pos:start="33:21" pos:end="33:37"><name pos:start="33:21" pos:end="33:37"><name pos:start="33:21" pos:end="33:21">p</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:34">const_value</name><index pos:start="33:35" pos:end="33:37">[<expr pos:start="33:36" pos:end="33:36"><name pos:start="33:36" pos:end="33:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:44"><expr pos:start="35:13" pos:end="35:43"><name pos:start="35:13" pos:end="35:16"><name pos:start="35:13" pos:end="35:13">p</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:16">s</name></name><operator pos:start="35:17" pos:end="35:18">+=</operator> <call pos:start="35:20" pos:end="35:43"><name pos:start="35:20" pos:end="35:25">strlen</name><argument_list pos:start="35:26" pos:end="35:43">(<argument pos:start="35:27" pos:end="35:42"><expr pos:start="35:27" pos:end="35:42"><name pos:start="35:27" pos:end="35:42"><name pos:start="35:27" pos:end="35:27">p</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:39">const_name</name><index pos:start="35:40" pos:end="35:42">[<expr pos:start="35:41" pos:end="35:41"><name pos:start="35:41" pos:end="35:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    

    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:8"><name pos:start="45:5" pos:end="45:5">p</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:8">s</name></name><operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:27"><name pos:start="45:11" pos:end="45:16">strchr</name><argument_list pos:start="45:17" pos:end="45:27">(<argument pos:start="45:18" pos:end="45:21"><expr pos:start="45:18" pos:end="45:21"><name pos:start="45:18" pos:end="45:21"><name pos:start="45:18" pos:end="45:18">p</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:21">s</name></name></expr></argument>, <argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><literal type="char" pos:start="45:24" pos:end="45:26">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if<condition pos:start="47:7" pos:end="47:18">(<expr pos:start="47:8" pos:end="47:17"><name pos:start="47:8" pos:end="47:11"><name pos:start="47:8" pos:end="47:8">p</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:11">s</name></name><operator pos:start="47:12" pos:end="47:13">==</operator><name pos:start="47:14" pos:end="47:17">NULL</name></expr>)</condition><block pos:start="47:19" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:15">

        <expr_stmt pos:start="49:9" pos:end="49:74"><expr pos:start="49:9" pos:end="49:73"><call pos:start="49:9" pos:end="49:73"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:73">(<argument pos:start="49:16" pos:end="49:19"><expr pos:start="49:16" pos:end="49:19"><name pos:start="49:16" pos:end="49:19">NULL</name></expr></argument>, <argument pos:start="49:22" pos:end="49:33"><expr pos:start="49:22" pos:end="49:33"><name pos:start="49:22" pos:end="49:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:36" pos:end="49:66"><expr pos:start="49:36" pos:end="49:66"><literal type="string" pos:start="49:36" pos:end="49:66">"Parser: missing ( in \"%s\"\n"</literal></expr></argument>, <argument pos:start="49:69" pos:end="49:72"><expr pos:start="49:69" pos:end="49:72"><name pos:start="49:69" pos:end="49:72">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:11"><expr pos:start="55:5" pos:end="55:10"><name pos:start="55:5" pos:end="55:8"><name pos:start="55:5" pos:end="55:5">p</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:8">s</name></name><operator pos:start="55:9" pos:end="55:10">++</operator></expr>;</expr_stmt> <comment type="line" pos:start="55:13" pos:end="55:18">// "("</comment>

    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><call pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:18">evalExpression</name><argument_list pos:start="57:19" pos:end="57:21">(<argument pos:start="57:20" pos:end="57:20"><expr pos:start="57:20" pos:end="57:20"><name pos:start="57:20" pos:end="57:20">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:14"><expr pos:start="59:5" pos:end="59:13"><name pos:start="59:5" pos:end="59:5">d</name><operator pos:start="59:6" pos:end="59:6">=</operator> <call pos:start="59:8" pos:end="59:13"><name pos:start="59:8" pos:end="59:10">pop</name><argument_list pos:start="59:11" pos:end="59:13">(<argument pos:start="59:12" pos:end="59:12"><expr pos:start="59:12" pos:end="59:12"><name pos:start="59:12" pos:end="59:12">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:11"><expr pos:start="61:5" pos:end="61:10"><name pos:start="61:5" pos:end="61:8"><name pos:start="61:5" pos:end="61:5">p</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:8">s</name></name><operator pos:start="61:9" pos:end="61:10">++</operator></expr>;</expr_stmt> <comment type="line" pos:start="61:13" pos:end="61:25">// ")" or ","</comment>

    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if<condition pos:start="63:7" pos:end="63:22">(<expr pos:start="63:8" pos:end="63:21"><name pos:start="63:8" pos:end="63:15"><name pos:start="63:8" pos:end="63:8">p</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:11">s</name><index pos:start="63:12" pos:end="63:15">[<expr pos:start="63:13" pos:end="63:14"><operator pos:start="63:13" pos:end="63:13">-</operator><literal type="number" pos:start="63:14" pos:end="63:14">1</literal></expr>]</index></name><operator pos:start="63:16" pos:end="63:17">==</operator> <literal type="char" pos:start="63:19" pos:end="63:21">','</literal></expr>)</condition><block pos:start="63:23" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:15">

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><call pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:22">evalExpression</name><argument_list pos:start="65:23" pos:end="65:25">(<argument pos:start="65:24" pos:end="65:24"><expr pos:start="65:24" pos:end="65:24"><name pos:start="65:24" pos:end="65:24">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:19"><expr pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:10">d2</name><operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:18"><name pos:start="67:13" pos:end="67:15">pop</name><argument_list pos:start="67:16" pos:end="67:18">(<argument pos:start="67:17" pos:end="67:17"><expr pos:start="67:17" pos:end="67:17"><name pos:start="67:17" pos:end="67:17">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:15"><expr pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:12"><name pos:start="69:9" pos:end="69:9">p</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:12">s</name></name><operator pos:start="69:13" pos:end="69:14">++</operator></expr>;</expr_stmt> <comment type="line" pos:start="69:17" pos:end="69:22">// ")"</comment>

    </block_content>}</block></if></if_stmt>

    

         <if_stmt pos:start="75:10" pos:end="155:5"><if pos:start="75:10" pos:end="75:51">if<condition pos:start="75:12" pos:end="75:39">( <expr pos:start="75:14" pos:end="75:37"><call pos:start="75:14" pos:end="75:37"><name pos:start="75:14" pos:end="75:21">strmatch</name><argument_list pos:start="75:22" pos:end="75:37">(<argument pos:start="75:23" pos:end="75:26"><expr pos:start="75:23" pos:end="75:26"><name pos:start="75:23" pos:end="75:26">next</name></expr></argument>, <argument pos:start="75:29" pos:end="75:34"><expr pos:start="75:29" pos:end="75:34"><literal type="string" pos:start="75:29" pos:end="75:34">"sinh"</literal></expr></argument>  )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="75:41" pos:end="75:51"><block_content pos:start="75:41" pos:end="75:51"> <expr_stmt pos:start="75:41" pos:end="75:51"><expr pos:start="75:41" pos:end="75:50"><name pos:start="75:41" pos:end="75:41">d</name><operator pos:start="75:42" pos:end="75:42">=</operator> <call pos:start="75:44" pos:end="75:50"><name pos:start="75:44" pos:end="75:47">sinh</name><argument_list pos:start="75:48" pos:end="75:50">(<argument pos:start="75:49" pos:end="75:49"><expr pos:start="75:49" pos:end="75:49"><name pos:start="75:49" pos:end="75:49">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="77:5" pos:end="77:51">else if<condition pos:start="77:12" pos:end="77:39">( <expr pos:start="77:14" pos:end="77:37"><call pos:start="77:14" pos:end="77:37"><name pos:start="77:14" pos:end="77:21">strmatch</name><argument_list pos:start="77:22" pos:end="77:37">(<argument pos:start="77:23" pos:end="77:26"><expr pos:start="77:23" pos:end="77:26"><name pos:start="77:23" pos:end="77:26">next</name></expr></argument>, <argument pos:start="77:29" pos:end="77:34"><expr pos:start="77:29" pos:end="77:34"><literal type="string" pos:start="77:29" pos:end="77:34">"cosh"</literal></expr></argument>  )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="77:41" pos:end="77:51"><block_content pos:start="77:41" pos:end="77:51"> <expr_stmt pos:start="77:41" pos:end="77:51"><expr pos:start="77:41" pos:end="77:50"><name pos:start="77:41" pos:end="77:41">d</name><operator pos:start="77:42" pos:end="77:42">=</operator> <call pos:start="77:44" pos:end="77:50"><name pos:start="77:44" pos:end="77:47">cosh</name><argument_list pos:start="77:48" pos:end="77:50">(<argument pos:start="77:49" pos:end="77:49"><expr pos:start="77:49" pos:end="77:49"><name pos:start="77:49" pos:end="77:49">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="79:5" pos:end="79:51">else if<condition pos:start="79:12" pos:end="79:39">( <expr pos:start="79:14" pos:end="79:37"><call pos:start="79:14" pos:end="79:37"><name pos:start="79:14" pos:end="79:21">strmatch</name><argument_list pos:start="79:22" pos:end="79:37">(<argument pos:start="79:23" pos:end="79:26"><expr pos:start="79:23" pos:end="79:26"><name pos:start="79:23" pos:end="79:26">next</name></expr></argument>, <argument pos:start="79:29" pos:end="79:34"><expr pos:start="79:29" pos:end="79:34"><literal type="string" pos:start="79:29" pos:end="79:34">"tanh"</literal></expr></argument>  )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="79:41" pos:end="79:51"><block_content pos:start="79:41" pos:end="79:51"> <expr_stmt pos:start="79:41" pos:end="79:51"><expr pos:start="79:41" pos:end="79:50"><name pos:start="79:41" pos:end="79:41">d</name><operator pos:start="79:42" pos:end="79:42">=</operator> <call pos:start="79:44" pos:end="79:50"><name pos:start="79:44" pos:end="79:47">tanh</name><argument_list pos:start="79:48" pos:end="79:50">(<argument pos:start="79:49" pos:end="79:49"><expr pos:start="79:49" pos:end="79:49"><name pos:start="79:49" pos:end="79:49">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="81:5" pos:end="81:50">else if<condition pos:start="81:12" pos:end="81:39">( <expr pos:start="81:14" pos:end="81:37"><call pos:start="81:14" pos:end="81:37"><name pos:start="81:14" pos:end="81:21">strmatch</name><argument_list pos:start="81:22" pos:end="81:37">(<argument pos:start="81:23" pos:end="81:26"><expr pos:start="81:23" pos:end="81:26"><name pos:start="81:23" pos:end="81:26">next</name></expr></argument>, <argument pos:start="81:29" pos:end="81:33"><expr pos:start="81:29" pos:end="81:33"><literal type="string" pos:start="81:29" pos:end="81:33">"sin"</literal></expr></argument>   )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="81:41" pos:end="81:50"><block_content pos:start="81:41" pos:end="81:50"> <expr_stmt pos:start="81:41" pos:end="81:50"><expr pos:start="81:41" pos:end="81:49"><name pos:start="81:41" pos:end="81:41">d</name><operator pos:start="81:42" pos:end="81:42">=</operator> <call pos:start="81:44" pos:end="81:49"><name pos:start="81:44" pos:end="81:46">sin</name><argument_list pos:start="81:47" pos:end="81:49">(<argument pos:start="81:48" pos:end="81:48"><expr pos:start="81:48" pos:end="81:48"><name pos:start="81:48" pos:end="81:48">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="83:5" pos:end="83:50">else if<condition pos:start="83:12" pos:end="83:39">( <expr pos:start="83:14" pos:end="83:37"><call pos:start="83:14" pos:end="83:37"><name pos:start="83:14" pos:end="83:21">strmatch</name><argument_list pos:start="83:22" pos:end="83:37">(<argument pos:start="83:23" pos:end="83:26"><expr pos:start="83:23" pos:end="83:26"><name pos:start="83:23" pos:end="83:26">next</name></expr></argument>, <argument pos:start="83:29" pos:end="83:33"><expr pos:start="83:29" pos:end="83:33"><literal type="string" pos:start="83:29" pos:end="83:33">"cos"</literal></expr></argument>   )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="83:41" pos:end="83:50"><block_content pos:start="83:41" pos:end="83:50"> <expr_stmt pos:start="83:41" pos:end="83:50"><expr pos:start="83:41" pos:end="83:49"><name pos:start="83:41" pos:end="83:41">d</name><operator pos:start="83:42" pos:end="83:42">=</operator> <call pos:start="83:44" pos:end="83:49"><name pos:start="83:44" pos:end="83:46">cos</name><argument_list pos:start="83:47" pos:end="83:49">(<argument pos:start="83:48" pos:end="83:48"><expr pos:start="83:48" pos:end="83:48"><name pos:start="83:48" pos:end="83:48">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="85:5" pos:end="85:50">else if<condition pos:start="85:12" pos:end="85:39">( <expr pos:start="85:14" pos:end="85:37"><call pos:start="85:14" pos:end="85:37"><name pos:start="85:14" pos:end="85:21">strmatch</name><argument_list pos:start="85:22" pos:end="85:37">(<argument pos:start="85:23" pos:end="85:26"><expr pos:start="85:23" pos:end="85:26"><name pos:start="85:23" pos:end="85:26">next</name></expr></argument>, <argument pos:start="85:29" pos:end="85:33"><expr pos:start="85:29" pos:end="85:33"><literal type="string" pos:start="85:29" pos:end="85:33">"tan"</literal></expr></argument>   )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="85:41" pos:end="85:50"><block_content pos:start="85:41" pos:end="85:50"> <expr_stmt pos:start="85:41" pos:end="85:50"><expr pos:start="85:41" pos:end="85:49"><name pos:start="85:41" pos:end="85:41">d</name><operator pos:start="85:42" pos:end="85:42">=</operator> <call pos:start="85:44" pos:end="85:49"><name pos:start="85:44" pos:end="85:46">tan</name><argument_list pos:start="85:47" pos:end="85:49">(<argument pos:start="85:48" pos:end="85:48"><expr pos:start="85:48" pos:end="85:48"><name pos:start="85:48" pos:end="85:48">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="87:5" pos:end="87:50">else if<condition pos:start="87:12" pos:end="87:39">( <expr pos:start="87:14" pos:end="87:37"><call pos:start="87:14" pos:end="87:37"><name pos:start="87:14" pos:end="87:21">strmatch</name><argument_list pos:start="87:22" pos:end="87:37">(<argument pos:start="87:23" pos:end="87:26"><expr pos:start="87:23" pos:end="87:26"><name pos:start="87:23" pos:end="87:26">next</name></expr></argument>, <argument pos:start="87:29" pos:end="87:33"><expr pos:start="87:29" pos:end="87:33"><literal type="string" pos:start="87:29" pos:end="87:33">"exp"</literal></expr></argument>   )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="87:41" pos:end="87:50"><block_content pos:start="87:41" pos:end="87:50"> <expr_stmt pos:start="87:41" pos:end="87:50"><expr pos:start="87:41" pos:end="87:49"><name pos:start="87:41" pos:end="87:41">d</name><operator pos:start="87:42" pos:end="87:42">=</operator> <call pos:start="87:44" pos:end="87:49"><name pos:start="87:44" pos:end="87:46">exp</name><argument_list pos:start="87:47" pos:end="87:49">(<argument pos:start="87:48" pos:end="87:48"><expr pos:start="87:48" pos:end="87:48"><name pos:start="87:48" pos:end="87:48">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="89:5" pos:end="89:50">else if<condition pos:start="89:12" pos:end="89:39">( <expr pos:start="89:14" pos:end="89:37"><call pos:start="89:14" pos:end="89:37"><name pos:start="89:14" pos:end="89:21">strmatch</name><argument_list pos:start="89:22" pos:end="89:37">(<argument pos:start="89:23" pos:end="89:26"><expr pos:start="89:23" pos:end="89:26"><name pos:start="89:23" pos:end="89:26">next</name></expr></argument>, <argument pos:start="89:29" pos:end="89:33"><expr pos:start="89:29" pos:end="89:33"><literal type="string" pos:start="89:29" pos:end="89:33">"log"</literal></expr></argument>   )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="89:41" pos:end="89:50"><block_content pos:start="89:41" pos:end="89:50"> <expr_stmt pos:start="89:41" pos:end="89:50"><expr pos:start="89:41" pos:end="89:49"><name pos:start="89:41" pos:end="89:41">d</name><operator pos:start="89:42" pos:end="89:42">=</operator> <call pos:start="89:44" pos:end="89:49"><name pos:start="89:44" pos:end="89:46">log</name><argument_list pos:start="89:47" pos:end="89:49">(<argument pos:start="89:48" pos:end="89:48"><expr pos:start="89:48" pos:end="89:48"><name pos:start="89:48" pos:end="89:48">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="91:5" pos:end="91:58">else if<condition pos:start="91:12" pos:end="91:39">( <expr pos:start="91:14" pos:end="91:37"><call pos:start="91:14" pos:end="91:37"><name pos:start="91:14" pos:end="91:21">strmatch</name><argument_list pos:start="91:22" pos:end="91:37">(<argument pos:start="91:23" pos:end="91:26"><expr pos:start="91:23" pos:end="91:26"><name pos:start="91:23" pos:end="91:26">next</name></expr></argument>, <argument pos:start="91:29" pos:end="91:36"><expr pos:start="91:29" pos:end="91:36"><literal type="string" pos:start="91:29" pos:end="91:36">"squish"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo" pos:start="91:41" pos:end="91:58"><block_content pos:start="91:41" pos:end="91:58"> <expr_stmt pos:start="91:41" pos:end="91:58"><expr pos:start="91:41" pos:end="91:57"><name pos:start="91:41" pos:end="91:41">d</name><operator pos:start="91:42" pos:end="91:42">=</operator> <literal type="number" pos:start="91:44" pos:end="91:44">1</literal><operator pos:start="91:45" pos:end="91:45">/</operator><operator pos:start="91:46" pos:end="91:46">(</operator><literal type="number" pos:start="91:47" pos:end="91:48">1</literal><operator pos:start="91:48" pos:end="91:48">+</operator><call pos:start="91:49" pos:end="91:56"><name pos:start="91:49" pos:end="91:51">exp</name><argument_list pos:start="91:52" pos:end="91:56">(<argument pos:start="91:53" pos:end="91:55"><expr pos:start="91:53" pos:end="91:55"><literal type="number" pos:start="91:53" pos:end="91:53">4</literal><operator pos:start="91:54" pos:end="91:54">*</operator><name pos:start="91:55" pos:end="91:55">d</name></expr></argument>)</argument_list></call><operator pos:start="91:57" pos:end="91:57">)</operator></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="93:5" pos:end="93:68">else if<condition pos:start="93:12" pos:end="93:39">( <expr pos:start="93:14" pos:end="93:37"><call pos:start="93:14" pos:end="93:37"><name pos:start="93:14" pos:end="93:21">strmatch</name><argument_list pos:start="93:22" pos:end="93:37">(<argument pos:start="93:23" pos:end="93:26"><expr pos:start="93:23" pos:end="93:26"><name pos:start="93:23" pos:end="93:26">next</name></expr></argument>, <argument pos:start="93:29" pos:end="93:35"><expr pos:start="93:29" pos:end="93:35"><literal type="string" pos:start="93:29" pos:end="93:35">"gauss"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="93:41" pos:end="93:68"><block_content pos:start="93:41" pos:end="93:68"> <expr_stmt pos:start="93:41" pos:end="93:68"><expr pos:start="93:41" pos:end="93:67"><name pos:start="93:41" pos:end="93:41">d</name><operator pos:start="93:42" pos:end="93:42">=</operator> <call pos:start="93:44" pos:end="93:54"><name pos:start="93:44" pos:end="93:46">exp</name><argument_list pos:start="93:47" pos:end="93:54">(<argument pos:start="93:48" pos:end="93:53"><expr pos:start="93:48" pos:end="93:53"><operator pos:start="93:48" pos:end="93:48">-</operator><name pos:start="93:49" pos:end="93:49">d</name><operator pos:start="93:50" pos:end="93:50">*</operator><name pos:start="93:51" pos:end="93:51">d</name><operator pos:start="93:52" pos:end="93:52">/</operator><literal type="number" pos:start="93:53" pos:end="93:53">2</literal></expr></argument>)</argument_list></call><operator pos:start="93:55" pos:end="93:55">/</operator><call pos:start="93:56" pos:end="93:67"><name pos:start="93:56" pos:end="93:59">sqrt</name><argument_list pos:start="93:60" pos:end="93:67">(<argument pos:start="93:61" pos:end="93:66"><expr pos:start="93:61" pos:end="93:66"><literal type="number" pos:start="93:61" pos:end="93:61">2</literal><operator pos:start="93:62" pos:end="93:62">*</operator><name pos:start="93:63" pos:end="93:66">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="95:5" pos:end="95:51">else if<condition pos:start="95:12" pos:end="95:39">( <expr pos:start="95:14" pos:end="95:37"><call pos:start="95:14" pos:end="95:37"><name pos:start="95:14" pos:end="95:21">strmatch</name><argument_list pos:start="95:22" pos:end="95:37">(<argument pos:start="95:23" pos:end="95:26"><expr pos:start="95:23" pos:end="95:26"><name pos:start="95:23" pos:end="95:26">next</name></expr></argument>, <argument pos:start="95:29" pos:end="95:33"><expr pos:start="95:29" pos:end="95:33"><literal type="string" pos:start="95:29" pos:end="95:33">"abs"</literal></expr></argument>   )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="95:41" pos:end="95:51"><block_content pos:start="95:41" pos:end="95:51"> <expr_stmt pos:start="95:41" pos:end="95:51"><expr pos:start="95:41" pos:end="95:50"><name pos:start="95:41" pos:end="95:41">d</name><operator pos:start="95:42" pos:end="95:42">=</operator> <call pos:start="95:44" pos:end="95:50"><name pos:start="95:44" pos:end="95:47">fabs</name><argument_list pos:start="95:48" pos:end="95:50">(<argument pos:start="95:49" pos:end="95:49"><expr pos:start="95:49" pos:end="95:49"><name pos:start="95:49" pos:end="95:49">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="97:5" pos:end="97:59">else if<condition pos:start="97:12" pos:end="97:39">( <expr pos:start="97:14" pos:end="97:37"><call pos:start="97:14" pos:end="97:37"><name pos:start="97:14" pos:end="97:21">strmatch</name><argument_list pos:start="97:22" pos:end="97:37">(<argument pos:start="97:23" pos:end="97:26"><expr pos:start="97:23" pos:end="97:26"><name pos:start="97:23" pos:end="97:26">next</name></expr></argument>, <argument pos:start="97:29" pos:end="97:33"><expr pos:start="97:29" pos:end="97:33"><literal type="string" pos:start="97:29" pos:end="97:33">"max"</literal></expr></argument>   )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="97:41" pos:end="97:59"><block_content pos:start="97:41" pos:end="97:59"> <expr_stmt pos:start="97:41" pos:end="97:59"><expr pos:start="97:41" pos:end="97:58"><name pos:start="97:41" pos:end="97:41">d</name><operator pos:start="97:42" pos:end="97:42">=</operator> <ternary pos:start="97:44" pos:end="97:58"><condition pos:start="97:44" pos:end="97:51"><expr pos:start="97:44" pos:end="97:49"><name pos:start="97:44" pos:end="97:44">d</name> <operator pos:start="97:46" pos:end="97:46">&gt;</operator> <name pos:start="97:48" pos:end="97:49">d2</name></expr> ?</condition><then pos:start="97:53" pos:end="97:53"> <expr pos:start="97:53" pos:end="97:53"><name pos:start="97:53" pos:end="97:53">d</name></expr> </then><else pos:start="97:55" pos:end="97:58">: <expr pos:start="97:57" pos:end="97:58"><name pos:start="97:57" pos:end="97:58">d2</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="99:5" pos:end="99:59">else if<condition pos:start="99:12" pos:end="99:39">( <expr pos:start="99:14" pos:end="99:37"><call pos:start="99:14" pos:end="99:37"><name pos:start="99:14" pos:end="99:21">strmatch</name><argument_list pos:start="99:22" pos:end="99:37">(<argument pos:start="99:23" pos:end="99:26"><expr pos:start="99:23" pos:end="99:26"><name pos:start="99:23" pos:end="99:26">next</name></expr></argument>, <argument pos:start="99:29" pos:end="99:33"><expr pos:start="99:29" pos:end="99:33"><literal type="string" pos:start="99:29" pos:end="99:33">"min"</literal></expr></argument>   )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="99:41" pos:end="99:59"><block_content pos:start="99:41" pos:end="99:59"> <expr_stmt pos:start="99:41" pos:end="99:59"><expr pos:start="99:41" pos:end="99:58"><name pos:start="99:41" pos:end="99:41">d</name><operator pos:start="99:42" pos:end="99:42">=</operator> <ternary pos:start="99:44" pos:end="99:58"><condition pos:start="99:44" pos:end="99:51"><expr pos:start="99:44" pos:end="99:49"><name pos:start="99:44" pos:end="99:44">d</name> <operator pos:start="99:46" pos:end="99:46">&lt;</operator> <name pos:start="99:48" pos:end="99:49">d2</name></expr> ?</condition><then pos:start="99:53" pos:end="99:53"> <expr pos:start="99:53" pos:end="99:53"><name pos:start="99:53" pos:end="99:53">d</name></expr> </then><else pos:start="99:55" pos:end="99:58">: <expr pos:start="99:57" pos:end="99:58"><name pos:start="99:57" pos:end="99:58">d2</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="101:5" pos:end="101:62">else if<condition pos:start="101:12" pos:end="101:39">( <expr pos:start="101:14" pos:end="101:37"><call pos:start="101:14" pos:end="101:37"><name pos:start="101:14" pos:end="101:21">strmatch</name><argument_list pos:start="101:22" pos:end="101:37">(<argument pos:start="101:23" pos:end="101:26"><expr pos:start="101:23" pos:end="101:26"><name pos:start="101:23" pos:end="101:26">next</name></expr></argument>, <argument pos:start="101:29" pos:end="101:32"><expr pos:start="101:29" pos:end="101:32"><literal type="string" pos:start="101:29" pos:end="101:32">"gt"</literal></expr></argument>    )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="101:41" pos:end="101:62"><block_content pos:start="101:41" pos:end="101:62"> <expr_stmt pos:start="101:41" pos:end="101:62"><expr pos:start="101:41" pos:end="101:61"><name pos:start="101:41" pos:end="101:41">d</name><operator pos:start="101:42" pos:end="101:42">=</operator> <ternary pos:start="101:44" pos:end="101:61"><condition pos:start="101:44" pos:end="101:51"><expr pos:start="101:44" pos:end="101:49"><name pos:start="101:44" pos:end="101:44">d</name> <operator pos:start="101:46" pos:end="101:46">&gt;</operator> <name pos:start="101:48" pos:end="101:49">d2</name></expr> ?</condition><then pos:start="101:53" pos:end="101:55"> <expr pos:start="101:53" pos:end="101:55"><literal type="number" pos:start="101:53" pos:end="101:55">1.0</literal></expr> </then><else pos:start="101:57" pos:end="101:61">: <expr pos:start="101:59" pos:end="101:61"><literal type="number" pos:start="101:59" pos:end="101:61">0.0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="103:5" pos:end="103:62">else if<condition pos:start="103:12" pos:end="103:39">( <expr pos:start="103:14" pos:end="103:37"><call pos:start="103:14" pos:end="103:37"><name pos:start="103:14" pos:end="103:21">strmatch</name><argument_list pos:start="103:22" pos:end="103:37">(<argument pos:start="103:23" pos:end="103:26"><expr pos:start="103:23" pos:end="103:26"><name pos:start="103:23" pos:end="103:26">next</name></expr></argument>, <argument pos:start="103:29" pos:end="103:32"><expr pos:start="103:29" pos:end="103:32"><literal type="string" pos:start="103:29" pos:end="103:32">"lt"</literal></expr></argument>    )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="103:41" pos:end="103:62"><block_content pos:start="103:41" pos:end="103:62"> <expr_stmt pos:start="103:41" pos:end="103:62"><expr pos:start="103:41" pos:end="103:61"><name pos:start="103:41" pos:end="103:41">d</name><operator pos:start="103:42" pos:end="103:42">=</operator> <ternary pos:start="103:44" pos:end="103:61"><condition pos:start="103:44" pos:end="103:51"><expr pos:start="103:44" pos:end="103:49"><name pos:start="103:44" pos:end="103:44">d</name> <operator pos:start="103:46" pos:end="103:46">&gt;</operator> <name pos:start="103:48" pos:end="103:49">d2</name></expr> ?</condition><then pos:start="103:53" pos:end="103:55"> <expr pos:start="103:53" pos:end="103:55"><literal type="number" pos:start="103:53" pos:end="103:55">0.0</literal></expr> </then><else pos:start="103:57" pos:end="103:61">: <expr pos:start="103:59" pos:end="103:61"><literal type="number" pos:start="103:59" pos:end="103:61">1.0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="105:5" pos:end="105:63">else if<condition pos:start="105:12" pos:end="105:39">( <expr pos:start="105:14" pos:end="105:37"><call pos:start="105:14" pos:end="105:37"><name pos:start="105:14" pos:end="105:21">strmatch</name><argument_list pos:start="105:22" pos:end="105:37">(<argument pos:start="105:23" pos:end="105:26"><expr pos:start="105:23" pos:end="105:26"><name pos:start="105:23" pos:end="105:26">next</name></expr></argument>, <argument pos:start="105:29" pos:end="105:32"><expr pos:start="105:29" pos:end="105:32"><literal type="string" pos:start="105:29" pos:end="105:32">"eq"</literal></expr></argument>    )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="105:41" pos:end="105:63"><block_content pos:start="105:41" pos:end="105:63"> <expr_stmt pos:start="105:41" pos:end="105:63"><expr pos:start="105:41" pos:end="105:62"><name pos:start="105:41" pos:end="105:41">d</name><operator pos:start="105:42" pos:end="105:42">=</operator> <ternary pos:start="105:44" pos:end="105:62"><condition pos:start="105:44" pos:end="105:52"><expr pos:start="105:44" pos:end="105:50"><name pos:start="105:44" pos:end="105:44">d</name> <operator pos:start="105:46" pos:end="105:47">==</operator> <name pos:start="105:49" pos:end="105:50">d2</name></expr> ?</condition><then pos:start="105:54" pos:end="105:56"> <expr pos:start="105:54" pos:end="105:56"><literal type="number" pos:start="105:54" pos:end="105:56">1.0</literal></expr> </then><else pos:start="105:58" pos:end="105:62">: <expr pos:start="105:60" pos:end="105:62"><literal type="number" pos:start="105:60" pos:end="105:62">0.0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<comment type="line" pos:start="107:1" pos:end="107:60">//    else if( strmatch(next, "l1"    ) ) d= 1 + d2*(d - 1);</comment>

<comment type="line" pos:start="109:1" pos:end="109:79">//    else if( strmatch(next, "sq01"  ) ) d= (d &gt;= 0.0 &amp;&amp; d &lt;=1.0) ? 1.0 : 0.0;</comment>

    <else pos:start="111:5" pos:end="155:5">else<block pos:start="111:9" pos:end="155:5">{<block_content pos:start="113:9" pos:end="153:9">

        <decl_stmt pos:start="113:9" pos:end="113:20"><decl pos:start="113:9" pos:end="113:19"><type pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">int</name></type> <name pos:start="113:13" pos:end="113:17">error</name><init pos:start="113:18" pos:end="113:19">=<expr pos:start="113:19" pos:end="113:19"><literal type="number" pos:start="113:19" pos:end="113:19">1</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="115:9" pos:end="127:9">for<control pos:start="115:12" pos:end="115:56">(<init pos:start="115:13" pos:end="115:16"><expr pos:start="115:13" pos:end="115:15"><name pos:start="115:13" pos:end="115:13">i</name><operator pos:start="115:14" pos:end="115:14">=</operator><literal type="number" pos:start="115:15" pos:end="115:15">0</literal></expr>;</init> <condition pos:start="115:18" pos:end="115:51"><expr pos:start="115:18" pos:end="115:50"><name pos:start="115:18" pos:end="115:30"><name pos:start="115:18" pos:end="115:18">p</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:30">func1_name</name></name> <operator pos:start="115:32" pos:end="115:33">&amp;&amp;</operator> <name pos:start="115:35" pos:end="115:50"><name pos:start="115:35" pos:end="115:35">p</name><operator pos:start="115:36" pos:end="115:37">-&gt;</operator><name pos:start="115:38" pos:end="115:47">func1_name</name><index pos:start="115:48" pos:end="115:50">[<expr pos:start="115:49" pos:end="115:49"><name pos:start="115:49" pos:end="115:49">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="115:53" pos:end="115:55"><expr pos:start="115:53" pos:end="115:55"><name pos:start="115:53" pos:end="115:53">i</name><operator pos:start="115:54" pos:end="115:55">++</operator></expr></incr>)</control><block pos:start="115:57" pos:end="127:9">{<block_content pos:start="117:13" pos:end="125:13">

            <if_stmt pos:start="117:13" pos:end="125:13"><if pos:start="117:13" pos:end="125:13">if<condition pos:start="117:15" pos:end="117:48">(<expr pos:start="117:16" pos:end="117:47"><call pos:start="117:16" pos:end="117:47"><name pos:start="117:16" pos:end="117:23">strmatch</name><argument_list pos:start="117:24" pos:end="117:47">(<argument pos:start="117:25" pos:end="117:28"><expr pos:start="117:25" pos:end="117:28"><name pos:start="117:25" pos:end="117:28">next</name></expr></argument>, <argument pos:start="117:31" pos:end="117:46"><expr pos:start="117:31" pos:end="117:46"><name pos:start="117:31" pos:end="117:46"><name pos:start="117:31" pos:end="117:31">p</name><operator pos:start="117:32" pos:end="117:33">-&gt;</operator><name pos:start="117:34" pos:end="117:43">func1_name</name><index pos:start="117:44" pos:end="117:46">[<expr pos:start="117:45" pos:end="117:45"><name pos:start="117:45" pos:end="117:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="117:49" pos:end="125:13">{<block_content pos:start="119:17" pos:end="123:22">

                <expr_stmt pos:start="119:17" pos:end="119:45"><expr pos:start="119:17" pos:end="119:44"><name pos:start="119:17" pos:end="119:17">d</name><operator pos:start="119:18" pos:end="119:18">=</operator> <name pos:start="119:20" pos:end="119:30"><name pos:start="119:20" pos:end="119:20">p</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:27">func1</name><index pos:start="119:28" pos:end="119:30">[<expr pos:start="119:29" pos:end="119:29"><name pos:start="119:29" pos:end="119:29">i</name></expr>]</index></name><operator pos:start="119:31" pos:end="119:31">(</operator><name pos:start="119:32" pos:end="119:40"><name pos:start="119:32" pos:end="119:32">p</name><operator pos:start="119:33" pos:end="119:34">-&gt;</operator><name pos:start="119:35" pos:end="119:40">opaque</name></name><operator pos:start="119:41" pos:end="119:41">,</operator> <name pos:start="119:43" pos:end="119:43">d</name><operator pos:start="119:44" pos:end="119:44">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:24"><expr pos:start="121:17" pos:end="121:23"><name pos:start="121:17" pos:end="121:21">error</name><operator pos:start="121:22" pos:end="121:22">=</operator><literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr>;</expr_stmt>

                <break pos:start="123:17" pos:end="123:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <for pos:start="131:9" pos:end="143:9">for<control pos:start="131:12" pos:end="131:56">(<init pos:start="131:13" pos:end="131:16"><expr pos:start="131:13" pos:end="131:15"><name pos:start="131:13" pos:end="131:13">i</name><operator pos:start="131:14" pos:end="131:14">=</operator><literal type="number" pos:start="131:15" pos:end="131:15">0</literal></expr>;</init> <condition pos:start="131:18" pos:end="131:51"><expr pos:start="131:18" pos:end="131:50"><name pos:start="131:18" pos:end="131:30"><name pos:start="131:18" pos:end="131:18">p</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:30">func2_name</name></name> <operator pos:start="131:32" pos:end="131:33">&amp;&amp;</operator> <name pos:start="131:35" pos:end="131:50"><name pos:start="131:35" pos:end="131:35">p</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:47">func2_name</name><index pos:start="131:48" pos:end="131:50">[<expr pos:start="131:49" pos:end="131:49"><name pos:start="131:49" pos:end="131:49">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="131:53" pos:end="131:55"><expr pos:start="131:53" pos:end="131:55"><name pos:start="131:53" pos:end="131:53">i</name><operator pos:start="131:54" pos:end="131:55">++</operator></expr></incr>)</control><block pos:start="131:57" pos:end="143:9">{<block_content pos:start="133:13" pos:end="141:13">

            <if_stmt pos:start="133:13" pos:end="141:13"><if pos:start="133:13" pos:end="141:13">if<condition pos:start="133:15" pos:end="133:48">(<expr pos:start="133:16" pos:end="133:47"><call pos:start="133:16" pos:end="133:47"><name pos:start="133:16" pos:end="133:23">strmatch</name><argument_list pos:start="133:24" pos:end="133:47">(<argument pos:start="133:25" pos:end="133:28"><expr pos:start="133:25" pos:end="133:28"><name pos:start="133:25" pos:end="133:28">next</name></expr></argument>, <argument pos:start="133:31" pos:end="133:46"><expr pos:start="133:31" pos:end="133:46"><name pos:start="133:31" pos:end="133:46"><name pos:start="133:31" pos:end="133:31">p</name><operator pos:start="133:32" pos:end="133:33">-&gt;</operator><name pos:start="133:34" pos:end="133:43">func2_name</name><index pos:start="133:44" pos:end="133:46">[<expr pos:start="133:45" pos:end="133:45"><name pos:start="133:45" pos:end="133:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="133:49" pos:end="141:13">{<block_content pos:start="135:17" pos:end="139:22">

                <expr_stmt pos:start="135:17" pos:end="135:49"><expr pos:start="135:17" pos:end="135:48"><name pos:start="135:17" pos:end="135:17">d</name><operator pos:start="135:18" pos:end="135:18">=</operator> <name pos:start="135:20" pos:end="135:30"><name pos:start="135:20" pos:end="135:20">p</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:27">func2</name><index pos:start="135:28" pos:end="135:30">[<expr pos:start="135:29" pos:end="135:29"><name pos:start="135:29" pos:end="135:29">i</name></expr>]</index></name><operator pos:start="135:31" pos:end="135:31">(</operator><name pos:start="135:32" pos:end="135:40"><name pos:start="135:32" pos:end="135:32">p</name><operator pos:start="135:33" pos:end="135:34">-&gt;</operator><name pos:start="135:35" pos:end="135:40">opaque</name></name><operator pos:start="135:41" pos:end="135:41">,</operator> <name pos:start="135:43" pos:end="135:43">d</name><operator pos:start="135:44" pos:end="135:44">,</operator> <name pos:start="135:46" pos:end="135:47">d2</name><operator pos:start="135:48" pos:end="135:48">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:24"><expr pos:start="137:17" pos:end="137:23"><name pos:start="137:17" pos:end="137:21">error</name><operator pos:start="137:22" pos:end="137:22">=</operator><literal type="number" pos:start="137:23" pos:end="137:23">0</literal></expr>;</expr_stmt>

                <break pos:start="139:17" pos:end="139:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="147:9" pos:end="153:9"><if pos:start="147:9" pos:end="153:9">if<condition pos:start="147:11" pos:end="147:17">(<expr pos:start="147:12" pos:end="147:16"><name pos:start="147:12" pos:end="147:16">error</name></expr>)</condition><block pos:start="147:18" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:19">

            <expr_stmt pos:start="149:13" pos:end="149:85"><expr pos:start="149:13" pos:end="149:84"><call pos:start="149:13" pos:end="149:84"><name pos:start="149:13" pos:end="149:18">av_log</name><argument_list pos:start="149:19" pos:end="149:84">(<argument pos:start="149:20" pos:end="149:23"><expr pos:start="149:20" pos:end="149:23"><name pos:start="149:20" pos:end="149:23">NULL</name></expr></argument>, <argument pos:start="149:26" pos:end="149:37"><expr pos:start="149:26" pos:end="149:37"><name pos:start="149:26" pos:end="149:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="149:40" pos:end="149:77"><expr pos:start="149:40" pos:end="149:77"><literal type="string" pos:start="149:40" pos:end="149:77">"Parser: unknown function in \"%s\"\n"</literal></expr></argument>, <argument pos:start="149:80" pos:end="149:83"><expr pos:start="149:80" pos:end="149:83"><name pos:start="149:80" pos:end="149:83">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="151:13" pos:end="151:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    

    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if<condition pos:start="159:7" pos:end="159:22">(<expr pos:start="159:8" pos:end="159:21"><name pos:start="159:8" pos:end="159:15"><name pos:start="159:8" pos:end="159:8">p</name><operator pos:start="159:9" pos:end="159:10">-&gt;</operator><name pos:start="159:11" pos:end="159:11">s</name><index pos:start="159:12" pos:end="159:15">[<expr pos:start="159:13" pos:end="159:14"><operator pos:start="159:13" pos:end="159:13">-</operator><literal type="number" pos:start="159:14" pos:end="159:14">1</literal></expr>]</index></name><operator pos:start="159:16" pos:end="159:17">!=</operator> <literal type="char" pos:start="159:19" pos:end="159:21">')'</literal></expr>)</condition><block pos:start="159:23" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:15">

        <expr_stmt pos:start="161:9" pos:end="161:74"><expr pos:start="161:9" pos:end="161:73"><call pos:start="161:9" pos:end="161:73"><name pos:start="161:9" pos:end="161:14">av_log</name><argument_list pos:start="161:15" pos:end="161:73">(<argument pos:start="161:16" pos:end="161:19"><expr pos:start="161:16" pos:end="161:19"><name pos:start="161:16" pos:end="161:19">NULL</name></expr></argument>, <argument pos:start="161:22" pos:end="161:33"><expr pos:start="161:22" pos:end="161:33"><name pos:start="161:22" pos:end="161:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:36" pos:end="161:66"><expr pos:start="161:36" pos:end="161:66"><literal type="string" pos:start="161:36" pos:end="161:66">"Parser: missing ) in \"%s\"\n"</literal></expr></argument>, <argument pos:start="161:69" pos:end="161:72"><expr pos:start="161:69" pos:end="161:72"><name pos:start="161:69" pos:end="161:72">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:15"><expr pos:start="167:5" pos:end="167:14"><call pos:start="167:5" pos:end="167:14"><name pos:start="167:5" pos:end="167:8">push</name><argument_list pos:start="167:9" pos:end="167:14">(<argument pos:start="167:10" pos:end="167:10"><expr pos:start="167:10" pos:end="167:10"><name pos:start="167:10" pos:end="167:10">p</name></expr></argument>, <argument pos:start="167:13" pos:end="167:13"><expr pos:start="167:13" pos:end="167:13"><name pos:start="167:13" pos:end="167:13">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>      
</unit>
