<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14173.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">qemu_irq</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:34">ppce500_init_mpic</name><parameter_list pos:start="1:35" pos:end="3:71">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:56"><name pos:start="1:36" pos:end="1:47">MachineState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">machine</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:79"><decl pos:start="1:59" pos:end="1:79"><type pos:start="1:59" pos:end="1:79"><name pos:start="1:59" pos:end="1:71">PPCE500Params</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:79">params</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:53"><decl pos:start="3:36" pos:end="3:53"><type pos:start="3:36" pos:end="3:53"><name pos:start="3:36" pos:end="3:47">MemoryRegion</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">ccsr</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:70"><decl pos:start="3:56" pos:end="3:70"><type pos:start="3:56" pos:end="3:70"><name pos:start="3:56" pos:end="3:63">qemu_irq</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier><modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:70">irqs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:16">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">qemu_irq</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">mpic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">DeviceState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">dev</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">SysBusDevice</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:8">mpic</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:32"><name pos:start="17:12" pos:end="17:17">g_new0</name><argument_list pos:start="17:18" pos:end="17:32">(<argument pos:start="17:19" pos:end="17:26"><expr pos:start="17:19" pos:end="17:26"><name pos:start="17:19" pos:end="17:26">qemu_irq</name></expr></argument>, <argument pos:start="17:29" pos:end="17:31"><expr pos:start="17:29" pos:end="17:31"><literal type="number" pos:start="17:29" pos:end="17:31">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="43:5"><if pos:start="21:5" pos:end="43:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><call pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:19">kvm_enabled</name><argument_list pos:start="21:20" pos:end="21:21">()</argument_list></call></expr>)</condition> <block pos:start="21:24" pos:end="43:5">{<block_content pos:start="23:9" pos:end="41:9">

        <decl_stmt pos:start="23:9" pos:end="23:26"><decl pos:start="23:9" pos:end="23:25"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:13">Error</name> <modifier pos:start="23:15" pos:end="23:15">*</modifier></type><name pos:start="23:16" pos:end="23:18">err</name> <init pos:start="23:20" pos:end="23:25">= <expr pos:start="23:22" pos:end="23:25"><name pos:start="23:22" pos:end="23:25">NULL</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:52">(<expr pos:start="27:13" pos:end="27:51"><call pos:start="27:13" pos:end="27:51"><name pos:start="27:13" pos:end="27:42">machine_kernel_irqchip_allowed</name><argument_list pos:start="27:43" pos:end="27:51">(<argument pos:start="27:44" pos:end="27:50"><expr pos:start="27:44" pos:end="27:50"><name pos:start="27:44" pos:end="27:50">machine</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:54" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:60">

            <expr_stmt pos:start="29:13" pos:end="29:60"><expr pos:start="29:13" pos:end="29:59"><name pos:start="29:13" pos:end="29:15">dev</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:59"><name pos:start="29:19" pos:end="29:39">ppce500_init_mpic_kvm</name><argument_list pos:start="29:40" pos:end="29:59">(<argument pos:start="29:41" pos:end="29:46"><expr pos:start="29:41" pos:end="29:46"><name pos:start="29:41" pos:end="29:46">params</name></expr></argument>, <argument pos:start="29:49" pos:end="29:52"><expr pos:start="29:49" pos:end="29:52"><name pos:start="29:49" pos:end="29:52">irqs</name></expr></argument>, <argument pos:start="29:55" pos:end="29:58"><expr pos:start="29:55" pos:end="29:58"><operator pos:start="29:55" pos:end="29:55">&amp;</operator><name pos:start="29:56" pos:end="29:58">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:61">(<expr pos:start="33:13" pos:end="33:60"><call pos:start="33:13" pos:end="33:52"><name pos:start="33:13" pos:end="33:43">machine_kernel_irqchip_required</name><argument_list pos:start="33:44" pos:end="33:52">(<argument pos:start="33:45" pos:end="33:51"><expr pos:start="33:45" pos:end="33:51"><name pos:start="33:45" pos:end="33:51">machine</name></expr></argument>)</argument_list></call> <operator pos:start="33:54" pos:end="33:55">&amp;&amp;</operator> <operator pos:start="33:57" pos:end="33:57">!</operator><name pos:start="33:58" pos:end="33:60">dev</name></expr>)</condition> <block pos:start="33:63" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:20">

            <expr_stmt pos:start="35:13" pos:end="37:76"><expr pos:start="35:13" pos:end="37:75"><call pos:start="35:13" pos:end="37:75"><name pos:start="35:13" pos:end="35:29">error_reportf_err</name><argument_list pos:start="35:30" pos:end="37:75">(<argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:33">err</name></expr></argument>,

                              <argument pos:start="37:31" pos:end="37:74"><expr pos:start="37:31" pos:end="37:74"><literal type="string" pos:start="37:31" pos:end="37:74">"kernel_irqchip requested but unavailable: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:20"><expr pos:start="39:13" pos:end="39:19"><call pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:16">exit</name><argument_list pos:start="39:17" pos:end="39:19">(<argument pos:start="39:18" pos:end="39:18"><expr pos:start="39:18" pos:end="39:18"><literal type="number" pos:start="39:18" pos:end="39:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:13">(<expr pos:start="47:9" pos:end="47:12"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:12">dev</name></expr>)</condition> <block pos:start="47:15" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:51">

        <expr_stmt pos:start="49:9" pos:end="49:51"><expr pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:11">dev</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:50"><name pos:start="49:15" pos:end="49:36">ppce500_init_mpic_qemu</name><argument_list pos:start="49:37" pos:end="49:50">(<argument pos:start="49:38" pos:end="49:43"><expr pos:start="49:38" pos:end="49:43"><name pos:start="49:38" pos:end="49:43">params</name></expr></argument>, <argument pos:start="49:46" pos:end="49:49"><expr pos:start="49:46" pos:end="49:49"><name pos:start="49:46" pos:end="49:49">irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="55:5" pos:end="59:5">for <control pos:start="55:9" pos:end="55:29">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:24"><expr pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <literal type="number" pos:start="55:21" pos:end="55:23">256</literal></expr>;</condition> <incr pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><name pos:start="55:26" pos:end="55:26">i</name><operator pos:start="55:27" pos:end="55:28">++</operator></expr></incr>)</control> <block pos:start="55:31" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:43">

        <expr_stmt pos:start="57:9" pos:end="57:43"><expr pos:start="57:9" pos:end="57:42"><name pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">mpic</name><index pos:start="57:13" pos:end="57:15">[<expr pos:start="57:14" pos:end="57:14"><name pos:start="57:14" pos:end="57:14">i</name></expr>]</index></name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="57:42"><name pos:start="57:19" pos:end="57:34">qdev_get_gpio_in</name><argument_list pos:start="57:35" pos:end="57:42">(<argument pos:start="57:36" pos:end="57:38"><expr pos:start="57:36" pos:end="57:38"><name pos:start="57:36" pos:end="57:38">dev</name></expr></argument>, <argument pos:start="57:41" pos:end="57:41"><expr pos:start="57:41" pos:end="57:41"><name pos:start="57:41" pos:end="57:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:5">s</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <call pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:22">SYS_BUS_DEVICE</name><argument_list pos:start="63:23" pos:end="63:27">(<argument pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><name pos:start="63:24" pos:end="63:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:51"><expr pos:start="65:5" pos:end="67:50"><call pos:start="65:5" pos:end="67:50"><name pos:start="65:5" pos:end="65:31">memory_region_add_subregion</name><argument_list pos:start="65:32" pos:end="67:50">(<argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">ccsr</name></expr></argument>, <argument pos:start="65:39" pos:end="65:62"><expr pos:start="65:39" pos:end="65:62"><name pos:start="65:39" pos:end="65:62">MPC8544_MPIC_REGS_OFFSET</name></expr></argument>,

                                <argument pos:start="67:33" pos:end="67:49"><expr pos:start="67:33" pos:end="67:49"><name pos:start="67:33" pos:end="67:42"><name pos:start="67:33" pos:end="67:33">s</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:39">mmio</name><index pos:start="67:40" pos:end="67:42">[<expr pos:start="67:41" pos:end="67:41"><literal type="number" pos:start="67:41" pos:end="67:41">0</literal></expr>]</index></name><operator pos:start="67:43" pos:end="67:43">.</operator><name pos:start="67:44" pos:end="67:49">memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="71:5" pos:end="71:16">return <expr pos:start="71:12" pos:end="71:15"><name pos:start="71:12" pos:end="71:15">mpic</name></expr>;</return>

</block_content>}</block></function>
</unit>
