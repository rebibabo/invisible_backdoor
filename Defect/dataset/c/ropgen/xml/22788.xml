<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22788.c" pos:tabs="8"><function pos:start="1:1" pos:end="309:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">external_snapshot_prepare</name><parameter_list pos:start="1:38" pos:end="3:51">(<parameter pos:start="1:39" pos:end="1:60"><decl pos:start="1:39" pos:end="1:60"><type pos:start="1:39" pos:end="1:60"><name pos:start="1:39" pos:end="1:52">BlkActionState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">common</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:50"><decl pos:start="3:39" pos:end="3:50"><type pos:start="3:39" pos:end="3:50"><name pos:start="3:39" pos:end="3:43">Error</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier><modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="309:1">{<block_content pos:start="7:5" pos:end="307:5">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">flags</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>, <decl pos:start="7:20" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:22">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">QDict</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:18">options</name> <init pos:start="9:20" pos:end="9:25">= <expr pos:start="9:22" pos:end="9:25"><name pos:start="9:22" pos:end="9:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="13:5" pos:end="13:73">/* Device and node name of the image to generate the snapshot from */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:22">device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:25">node_name</name></decl>;</decl_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:62">/* Reference to the new image (for 'blockdev-snapshot') */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:28">snapshot_ref</name></decl>;</decl_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:67">/* File name of the new image (for 'blockdev-snapshot-sync') */</comment>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:30">new_image_file</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="29:78"><decl pos:start="27:5" pos:end="29:77"><type pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:25">ExternalSnapshotState</name> <modifier pos:start="27:27" pos:end="27:27">*</modifier></type><name pos:start="27:28" pos:end="27:32">state</name> <init pos:start="27:34" pos:end="29:77">=

                             <expr pos:start="29:30" pos:end="29:77"><call pos:start="29:30" pos:end="29:77"><name pos:start="29:30" pos:end="29:38">DO_UPCAST</name><argument_list pos:start="29:39" pos:end="29:77">(<argument pos:start="29:40" pos:end="29:60"><expr pos:start="29:40" pos:end="29:60"><name pos:start="29:40" pos:end="29:60">ExternalSnapshotState</name></expr></argument>, <argument pos:start="29:63" pos:end="29:68"><expr pos:start="29:63" pos:end="29:68"><name pos:start="29:63" pos:end="29:68">common</name></expr></argument>, <argument pos:start="29:71" pos:end="29:76"><expr pos:start="29:71" pos:end="29:76"><name pos:start="29:71" pos:end="29:76">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:47"><decl pos:start="31:5" pos:end="31:46"><type pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:21">TransactionAction</name> <modifier pos:start="31:23" pos:end="31:23">*</modifier></type><name pos:start="31:24" pos:end="31:29">action</name> <init pos:start="31:31" pos:end="31:46">= <expr pos:start="31:33" pos:end="31:46"><name pos:start="31:33" pos:end="31:46"><name pos:start="31:33" pos:end="31:38">common</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:46">action</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="37:51">/* 'blockdev-snapshot' and 'blockdev-snapshot-sync' have similar

     * purpose but a different set of parameters */</comment>

    <switch pos:start="39:5" pos:end="81:5">switch <condition pos:start="39:12" pos:end="39:25">(<expr pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:18">action</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:24">type</name></name></expr>)</condition> <block pos:start="39:27" pos:end="81:5">{<block_content pos:start="41:5" pos:end="79:31">

    <case pos:start="41:5" pos:end="41:51">case <expr pos:start="41:10" pos:end="41:50"><name pos:start="41:10" pos:end="41:50">TRANSACTION_ACTION_KIND_BLOCKDEV_SNAPSHOT</name></expr>:</case>

        <block pos:start="43:9" pos:end="55:9">{<block_content pos:start="45:13" pos:end="53:38">

            <decl_stmt pos:start="45:13" pos:end="45:62"><decl pos:start="45:13" pos:end="45:61"><type pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:28">BlockdevSnapshot</name> <modifier pos:start="45:30" pos:end="45:30">*</modifier></type><name pos:start="45:31" pos:end="45:31">s</name> <init pos:start="45:33" pos:end="45:61">= <expr pos:start="45:35" pos:end="45:61"><name pos:start="45:35" pos:end="45:61"><name pos:start="45:35" pos:end="45:40">action</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:43">u</name><operator pos:start="45:44" pos:end="45:44">.</operator><name pos:start="45:45" pos:end="45:61">blockdev_snapshot</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:29"><expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:18">device</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:28"><name pos:start="47:22" pos:end="47:22">s</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:28">node</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:32"><expr pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:21">node_name</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:31"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:31">node</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:34"><expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:26">new_image_file</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <name pos:start="51:30" pos:end="51:33">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:38"><expr pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:24">snapshot_ref</name> <operator pos:start="53:26" pos:end="53:26">=</operator> <name pos:start="53:28" pos:end="53:37"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:37">overlay</name></name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:56">case <expr pos:start="59:10" pos:end="59:55"><name pos:start="59:10" pos:end="59:55">TRANSACTION_ACTION_KIND_BLOCKDEV_SNAPSHOT_SYNC</name></expr>:</case>

        <block pos:start="61:9" pos:end="73:9">{<block_content pos:start="63:13" pos:end="71:32">

            <decl_stmt pos:start="63:13" pos:end="63:71"><decl pos:start="63:13" pos:end="63:70"><type pos:start="63:13" pos:end="63:34"><name pos:start="63:13" pos:end="63:32">BlockdevSnapshotSync</name> <modifier pos:start="63:34" pos:end="63:34">*</modifier></type><name pos:start="63:35" pos:end="63:35">s</name> <init pos:start="63:37" pos:end="63:70">= <expr pos:start="63:39" pos:end="63:70"><name pos:start="63:39" pos:end="63:70"><name pos:start="63:39" pos:end="63:44">action</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:47">u</name><operator pos:start="63:48" pos:end="63:48">.</operator><name pos:start="63:49" pos:end="63:70">blockdev_snapshot_sync</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:54"><expr pos:start="65:13" pos:end="65:53"><name pos:start="65:13" pos:end="65:18">device</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <ternary pos:start="65:22" pos:end="65:53"><condition pos:start="65:22" pos:end="65:36"><expr pos:start="65:22" pos:end="65:34"><name pos:start="65:22" pos:end="65:34"><name pos:start="65:22" pos:end="65:22">s</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:34">has_device</name></name></expr> ?</condition><then pos:start="65:38" pos:end="65:46"> <expr pos:start="65:38" pos:end="65:46"><name pos:start="65:38" pos:end="65:46"><name pos:start="65:38" pos:end="65:38">s</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:46">device</name></name></expr> </then><else pos:start="65:48" pos:end="65:53">: <expr pos:start="65:50" pos:end="65:53"><name pos:start="65:50" pos:end="65:53">NULL</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:63"><expr pos:start="67:13" pos:end="67:62"><name pos:start="67:13" pos:end="67:21">node_name</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <ternary pos:start="67:25" pos:end="67:62"><condition pos:start="67:25" pos:end="67:42"><expr pos:start="67:25" pos:end="67:40"><name pos:start="67:25" pos:end="67:40"><name pos:start="67:25" pos:end="67:25">s</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:40">has_node_name</name></name></expr> ?</condition><then pos:start="67:44" pos:end="67:55"> <expr pos:start="67:44" pos:end="67:55"><name pos:start="67:44" pos:end="67:55"><name pos:start="67:44" pos:end="67:44">s</name><operator pos:start="67:45" pos:end="67:46">-&gt;</operator><name pos:start="67:47" pos:end="67:55">node_name</name></name></expr> </then><else pos:start="67:57" pos:end="67:62">: <expr pos:start="67:59" pos:end="67:62"><name pos:start="67:59" pos:end="67:62">NULL</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:46"><expr pos:start="69:13" pos:end="69:45"><name pos:start="69:13" pos:end="69:26">new_image_file</name> <operator pos:start="69:28" pos:end="69:28">=</operator> <name pos:start="69:30" pos:end="69:45"><name pos:start="69:30" pos:end="69:30">s</name><operator pos:start="69:31" pos:end="69:32">-&gt;</operator><name pos:start="69:33" pos:end="69:45">snapshot_file</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:32"><expr pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:24">snapshot_ref</name> <operator pos:start="71:26" pos:end="71:26">=</operator> <name pos:start="71:28" pos:end="71:31">NULL</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <default pos:start="77:5" pos:end="77:12">default:</default>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><call pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:28">g_assert_not_reached</name><argument_list pos:start="79:29" pos:end="79:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="block" pos:start="85:5" pos:end="85:26">/* start processing */</comment>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:55">(<expr pos:start="87:9" pos:end="87:54"><call pos:start="87:9" pos:end="87:50"><name pos:start="87:9" pos:end="87:36">action_check_completion_mode</name><argument_list pos:start="87:37" pos:end="87:50">(<argument pos:start="87:38" pos:end="87:43"><expr pos:start="87:38" pos:end="87:43"><name pos:start="87:38" pos:end="87:43">common</name></expr></argument>, <argument pos:start="87:46" pos:end="87:49"><expr pos:start="87:46" pos:end="87:49"><name pos:start="87:46" pos:end="87:49">errp</name></expr></argument>)</argument_list></call> <operator pos:start="87:52" pos:end="87:52">&lt;</operator> <literal type="number" pos:start="87:54" pos:end="87:54">0</literal></expr>)</condition> <block pos:start="87:57" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:15">

        <return pos:start="89:9" pos:end="89:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:60"><expr pos:start="95:5" pos:end="95:59"><name pos:start="95:5" pos:end="95:17"><name pos:start="95:5" pos:end="95:9">state</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:17">old_bs</name></name> <operator pos:start="95:19" pos:end="95:19">=</operator> <call pos:start="95:21" pos:end="95:59"><name pos:start="95:21" pos:end="95:34">bdrv_lookup_bs</name><argument_list pos:start="95:35" pos:end="95:59">(<argument pos:start="95:36" pos:end="95:41"><expr pos:start="95:36" pos:end="95:41"><name pos:start="95:36" pos:end="95:41">device</name></expr></argument>, <argument pos:start="95:44" pos:end="95:52"><expr pos:start="95:44" pos:end="95:52"><name pos:start="95:44" pos:end="95:52">node_name</name></expr></argument>, <argument pos:start="95:55" pos:end="95:58"><expr pos:start="95:55" pos:end="95:58"><name pos:start="95:55" pos:end="95:58">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:23">(<expr pos:start="97:9" pos:end="97:22"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:22"><name pos:start="97:10" pos:end="97:14">state</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:22">old_bs</name></name></expr>)</condition> <block pos:start="97:25" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:15">

        <return pos:start="99:9" pos:end="99:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:72">/* Acquire AioContext now so any threads operating on old_bs stop */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:61"><expr pos:start="107:5" pos:end="107:60"><name pos:start="107:5" pos:end="107:22"><name pos:start="107:5" pos:end="107:9">state</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:22">aio_context</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <call pos:start="107:26" pos:end="107:60"><name pos:start="107:26" pos:end="107:45">bdrv_get_aio_context</name><argument_list pos:start="107:46" pos:end="107:60">(<argument pos:start="107:47" pos:end="107:59"><expr pos:start="107:47" pos:end="107:59"><name pos:start="107:47" pos:end="107:59"><name pos:start="107:47" pos:end="107:51">state</name><operator pos:start="107:52" pos:end="107:53">-&gt;</operator><name pos:start="107:54" pos:end="107:59">old_bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:44"><expr pos:start="109:5" pos:end="109:43"><call pos:start="109:5" pos:end="109:43"><name pos:start="109:5" pos:end="109:23">aio_context_acquire</name><argument_list pos:start="109:24" pos:end="109:43">(<argument pos:start="109:25" pos:end="109:42"><expr pos:start="109:25" pos:end="109:42"><name pos:start="109:25" pos:end="109:42"><name pos:start="109:25" pos:end="109:29">state</name><operator pos:start="109:30" pos:end="109:31">-&gt;</operator><name pos:start="109:32" pos:end="109:42">aio_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:38"><expr pos:start="111:5" pos:end="111:37"><call pos:start="111:5" pos:end="111:37"><name pos:start="111:5" pos:end="111:22">bdrv_drained_begin</name><argument_list pos:start="111:23" pos:end="111:37">(<argument pos:start="111:24" pos:end="111:36"><expr pos:start="111:24" pos:end="111:36"><name pos:start="111:24" pos:end="111:36"><name pos:start="111:24" pos:end="111:28">state</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:36">old_bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:41">(<expr pos:start="115:9" pos:end="115:40"><operator pos:start="115:9" pos:end="115:9">!</operator><call pos:start="115:10" pos:end="115:40"><name pos:start="115:10" pos:end="115:25">bdrv_is_inserted</name><argument_list pos:start="115:26" pos:end="115:40">(<argument pos:start="115:27" pos:end="115:39"><expr pos:start="115:27" pos:end="115:39"><name pos:start="115:27" pos:end="115:39"><name pos:start="115:27" pos:end="115:31">state</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:39">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:43" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:15">

        <expr_stmt pos:start="117:9" pos:end="117:60"><expr pos:start="117:9" pos:end="117:59"><call pos:start="117:9" pos:end="117:59"><name pos:start="117:9" pos:end="117:18">error_setg</name><argument_list pos:start="117:19" pos:end="117:59">(<argument pos:start="117:20" pos:end="117:23"><expr pos:start="117:20" pos:end="117:23"><name pos:start="117:20" pos:end="117:23">errp</name></expr></argument>, <argument pos:start="117:26" pos:end="117:50"><expr pos:start="117:26" pos:end="117:50"><name pos:start="117:26" pos:end="117:50">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="117:53" pos:end="117:58"><expr pos:start="117:53" pos:end="117:58"><name pos:start="117:53" pos:end="117:58">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="127:66">(<expr pos:start="125:9" pos:end="127:65"><call pos:start="125:9" pos:end="127:65"><name pos:start="125:9" pos:end="125:26">bdrv_op_is_blocked</name><argument_list pos:start="125:27" pos:end="127:65">(<argument pos:start="125:28" pos:end="125:40"><expr pos:start="125:28" pos:end="125:40"><name pos:start="125:28" pos:end="125:40"><name pos:start="125:28" pos:end="125:32">state</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:40">old_bs</name></name></expr></argument>,

                           <argument pos:start="127:28" pos:end="127:58"><expr pos:start="127:28" pos:end="127:58"><name pos:start="127:28" pos:end="127:58">BLOCK_OP_TYPE_EXTERNAL_SNAPSHOT</name></expr></argument>, <argument pos:start="127:61" pos:end="127:64"><expr pos:start="127:61" pos:end="127:64"><name pos:start="127:61" pos:end="127:64">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:68" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:15">

        <return pos:start="129:9" pos:end="129:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="135:5" pos:end="145:5"><if pos:start="135:5" pos:end="145:5">if <condition pos:start="135:8" pos:end="135:42">(<expr pos:start="135:9" pos:end="135:41"><operator pos:start="135:9" pos:end="135:9">!</operator><call pos:start="135:10" pos:end="135:41"><name pos:start="135:10" pos:end="135:26">bdrv_is_read_only</name><argument_list pos:start="135:27" pos:end="135:41">(<argument pos:start="135:28" pos:end="135:40"><expr pos:start="135:28" pos:end="135:40"><name pos:start="135:28" pos:end="135:40"><name pos:start="135:28" pos:end="135:32">state</name><operator pos:start="135:33" pos:end="135:34">-&gt;</operator><name pos:start="135:35" pos:end="135:40">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:44" pos:end="145:5">{<block_content pos:start="137:9" pos:end="143:9">

        <if_stmt pos:start="137:9" pos:end="143:9"><if pos:start="137:9" pos:end="143:9">if <condition pos:start="137:12" pos:end="137:38">(<expr pos:start="137:13" pos:end="137:37"><call pos:start="137:13" pos:end="137:37"><name pos:start="137:13" pos:end="137:22">bdrv_flush</name><argument_list pos:start="137:23" pos:end="137:37">(<argument pos:start="137:24" pos:end="137:36"><expr pos:start="137:24" pos:end="137:36"><name pos:start="137:24" pos:end="137:36"><name pos:start="137:24" pos:end="137:28">state</name><operator pos:start="137:29" pos:end="137:30">-&gt;</operator><name pos:start="137:31" pos:end="137:36">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:40" pos:end="143:9">{<block_content pos:start="139:13" pos:end="141:19">

            <expr_stmt pos:start="139:13" pos:end="139:44"><expr pos:start="139:13" pos:end="139:43"><call pos:start="139:13" pos:end="139:43"><name pos:start="139:13" pos:end="139:22">error_setg</name><argument_list pos:start="139:23" pos:end="139:43">(<argument pos:start="139:24" pos:end="139:27"><expr pos:start="139:24" pos:end="139:27"><name pos:start="139:24" pos:end="139:27">errp</name></expr></argument>, <argument pos:start="139:30" pos:end="139:42"><expr pos:start="139:30" pos:end="139:42"><name pos:start="139:30" pos:end="139:42">QERR_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="141:13" pos:end="141:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="155:5"><if pos:start="149:5" pos:end="155:5">if <condition pos:start="149:8" pos:end="149:49">(<expr pos:start="149:9" pos:end="149:48"><operator pos:start="149:9" pos:end="149:9">!</operator><call pos:start="149:10" pos:end="149:48"><name pos:start="149:10" pos:end="149:33">bdrv_is_first_non_filter</name><argument_list pos:start="149:34" pos:end="149:48">(<argument pos:start="149:35" pos:end="149:47"><expr pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:39">state</name><operator pos:start="149:40" pos:end="149:41">-&gt;</operator><name pos:start="149:42" pos:end="149:47">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:51" pos:end="155:5">{<block_content pos:start="151:9" pos:end="153:15">

        <expr_stmt pos:start="151:9" pos:end="151:60"><expr pos:start="151:9" pos:end="151:59"><call pos:start="151:9" pos:end="151:59"><name pos:start="151:9" pos:end="151:18">error_setg</name><argument_list pos:start="151:19" pos:end="151:59">(<argument pos:start="151:20" pos:end="151:23"><expr pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:23">errp</name></expr></argument>, <argument pos:start="151:26" pos:end="151:46"><expr pos:start="151:26" pos:end="151:46"><name pos:start="151:26" pos:end="151:46">QERR_FEATURE_DISABLED</name></expr></argument>, <argument pos:start="151:49" pos:end="151:58"><expr pos:start="151:49" pos:end="151:58"><literal type="string" pos:start="151:49" pos:end="151:58">"snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="153:9" pos:end="153:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="159:5" pos:end="251:5"><if pos:start="159:5" pos:end="251:5">if <condition pos:start="159:8" pos:end="159:71">(<expr pos:start="159:9" pos:end="159:70"><name pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:14">action</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:20">type</name></name> <operator pos:start="159:22" pos:end="159:23">==</operator> <name pos:start="159:25" pos:end="159:70">TRANSACTION_ACTION_KIND_BLOCKDEV_SNAPSHOT_SYNC</name></expr>)</condition> <block pos:start="159:73" pos:end="251:5">{<block_content pos:start="161:9" pos:end="249:35">

        <decl_stmt pos:start="161:9" pos:end="161:67"><decl pos:start="161:9" pos:end="161:66"><type pos:start="161:9" pos:end="161:30"><name pos:start="161:9" pos:end="161:28">BlockdevSnapshotSync</name> <modifier pos:start="161:30" pos:end="161:30">*</modifier></type><name pos:start="161:31" pos:end="161:31">s</name> <init pos:start="161:33" pos:end="161:66">= <expr pos:start="161:35" pos:end="161:66"><name pos:start="161:35" pos:end="161:66"><name pos:start="161:35" pos:end="161:40">action</name><operator pos:start="161:41" pos:end="161:42">-&gt;</operator><name pos:start="161:43" pos:end="161:43">u</name><operator pos:start="161:44" pos:end="161:44">.</operator><name pos:start="161:45" pos:end="161:66">blockdev_snapshot_sync</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="163:9" pos:end="163:65"><decl pos:start="163:9" pos:end="163:64"><type pos:start="163:9" pos:end="163:20"><specifier pos:start="163:9" pos:end="163:13">const</specifier> <name pos:start="163:15" pos:end="163:18">char</name> <modifier pos:start="163:20" pos:end="163:20">*</modifier></type><name pos:start="163:21" pos:end="163:26">format</name> <init pos:start="163:28" pos:end="163:64">= <expr pos:start="163:30" pos:end="163:64"><ternary pos:start="163:30" pos:end="163:64"><condition pos:start="163:30" pos:end="163:44"><expr pos:start="163:30" pos:end="163:42"><name pos:start="163:30" pos:end="163:42"><name pos:start="163:30" pos:end="163:30">s</name><operator pos:start="163:31" pos:end="163:32">-&gt;</operator><name pos:start="163:33" pos:end="163:42">has_format</name></name></expr> ?</condition><then pos:start="163:46" pos:end="163:54"> <expr pos:start="163:46" pos:end="163:54"><name pos:start="163:46" pos:end="163:54"><name pos:start="163:46" pos:end="163:46">s</name><operator pos:start="163:47" pos:end="163:48">-&gt;</operator><name pos:start="163:49" pos:end="163:54">format</name></name></expr> </then><else pos:start="163:56" pos:end="163:64">: <expr pos:start="163:58" pos:end="163:64"><literal type="string" pos:start="163:58" pos:end="163:64">"qcow2"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:31"><decl pos:start="165:9" pos:end="165:30"><type pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:12">enum</name> <name pos:start="165:14" pos:end="165:25">NewImageMode</name></name></type> <name pos:start="165:27" pos:end="165:30">mode</name></decl>;</decl_stmt>

        <decl_stmt pos:start="167:9" pos:end="169:69"><decl pos:start="167:9" pos:end="169:68"><type pos:start="167:9" pos:end="167:20"><specifier pos:start="167:9" pos:end="167:13">const</specifier> <name pos:start="167:15" pos:end="167:18">char</name> <modifier pos:start="167:20" pos:end="167:20">*</modifier></type><name pos:start="167:21" pos:end="167:38">snapshot_node_name</name> <init pos:start="167:40" pos:end="169:68">=

            <expr pos:start="169:13" pos:end="169:68"><ternary pos:start="169:13" pos:end="169:68"><condition pos:start="169:13" pos:end="169:39"><expr pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:13">s</name><operator pos:start="169:14" pos:end="169:15">-&gt;</operator><name pos:start="169:16" pos:end="169:37">has_snapshot_node_name</name></name></expr> ?</condition><then pos:start="169:41" pos:end="169:61"> <expr pos:start="169:41" pos:end="169:61"><name pos:start="169:41" pos:end="169:61"><name pos:start="169:41" pos:end="169:41">s</name><operator pos:start="169:42" pos:end="169:43">-&gt;</operator><name pos:start="169:44" pos:end="169:61">snapshot_node_name</name></name></expr> </then><else pos:start="169:63" pos:end="169:68">: <expr pos:start="169:65" pos:end="169:68"><name pos:start="169:65" pos:end="169:68">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="173:9" pos:end="179:9"><if pos:start="173:9" pos:end="179:9">if <condition pos:start="173:12" pos:end="173:45">(<expr pos:start="173:13" pos:end="173:44"><name pos:start="173:13" pos:end="173:21">node_name</name> <operator pos:start="173:23" pos:end="173:24">&amp;&amp;</operator> <operator pos:start="173:26" pos:end="173:26">!</operator><name pos:start="173:27" pos:end="173:44">snapshot_node_name</name></expr>)</condition> <block pos:start="173:47" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:19">

            <expr_stmt pos:start="175:13" pos:end="175:63"><expr pos:start="175:13" pos:end="175:62"><call pos:start="175:13" pos:end="175:62"><name pos:start="175:13" pos:end="175:22">error_setg</name><argument_list pos:start="175:23" pos:end="175:62">(<argument pos:start="175:24" pos:end="175:27"><expr pos:start="175:24" pos:end="175:27"><name pos:start="175:24" pos:end="175:27">errp</name></expr></argument>, <argument pos:start="175:30" pos:end="175:61"><expr pos:start="175:30" pos:end="175:61"><literal type="string" pos:start="175:30" pos:end="175:61">"New snapshot node name missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="177:13" pos:end="177:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="183:9" pos:end="191:9"><if pos:start="183:9" pos:end="191:9">if <condition pos:start="183:12" pos:end="185:73">(<expr pos:start="183:13" pos:end="185:72"><name pos:start="183:13" pos:end="183:30">snapshot_node_name</name> <operator pos:start="183:32" pos:end="183:33">&amp;&amp;</operator>

            <call pos:start="185:13" pos:end="185:72"><name pos:start="185:13" pos:end="185:26">bdrv_lookup_bs</name><argument_list pos:start="185:27" pos:end="185:72">(<argument pos:start="185:28" pos:end="185:45"><expr pos:start="185:28" pos:end="185:45"><name pos:start="185:28" pos:end="185:45">snapshot_node_name</name></expr></argument>, <argument pos:start="185:48" pos:end="185:65"><expr pos:start="185:48" pos:end="185:65"><name pos:start="185:48" pos:end="185:65">snapshot_node_name</name></expr></argument>, <argument pos:start="185:68" pos:end="185:71"><expr pos:start="185:68" pos:end="185:71"><name pos:start="185:68" pos:end="185:71">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:75" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:19">

            <expr_stmt pos:start="187:13" pos:end="187:70"><expr pos:start="187:13" pos:end="187:69"><call pos:start="187:13" pos:end="187:69"><name pos:start="187:13" pos:end="187:22">error_setg</name><argument_list pos:start="187:23" pos:end="187:69">(<argument pos:start="187:24" pos:end="187:27"><expr pos:start="187:24" pos:end="187:27"><name pos:start="187:24" pos:end="187:27">errp</name></expr></argument>, <argument pos:start="187:30" pos:end="187:68"><expr pos:start="187:30" pos:end="187:68"><literal type="string" pos:start="187:30" pos:end="187:68">"New snapshot node name already in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="189:13" pos:end="189:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="195:9" pos:end="195:42"><expr pos:start="195:9" pos:end="195:41"><name pos:start="195:9" pos:end="195:13">flags</name> <operator pos:start="195:15" pos:end="195:15">=</operator> <name pos:start="195:17" pos:end="195:41"><name pos:start="195:17" pos:end="195:21">state</name><operator pos:start="195:22" pos:end="195:23">-&gt;</operator><name pos:start="195:24" pos:end="195:29">old_bs</name><operator pos:start="195:30" pos:end="195:31">-&gt;</operator><name pos:start="195:32" pos:end="195:41">open_flags</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="199:9" pos:end="199:45">/* create new image w/backing file */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:69"><expr pos:start="201:9" pos:end="201:68"><name pos:start="201:9" pos:end="201:12">mode</name> <operator pos:start="201:14" pos:end="201:14">=</operator> <ternary pos:start="201:16" pos:end="201:68"><condition pos:start="201:16" pos:end="201:28"><expr pos:start="201:16" pos:end="201:26"><name pos:start="201:16" pos:end="201:26"><name pos:start="201:16" pos:end="201:16">s</name><operator pos:start="201:17" pos:end="201:18">-&gt;</operator><name pos:start="201:19" pos:end="201:26">has_mode</name></name></expr> ?</condition><then pos:start="201:30" pos:end="201:36"> <expr pos:start="201:30" pos:end="201:36"><name pos:start="201:30" pos:end="201:36"><name pos:start="201:30" pos:end="201:30">s</name><operator pos:start="201:31" pos:end="201:32">-&gt;</operator><name pos:start="201:33" pos:end="201:36">mode</name></name></expr> </then><else pos:start="201:38" pos:end="201:68">: <expr pos:start="201:40" pos:end="201:68"><name pos:start="201:40" pos:end="201:68">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="203:9" pos:end="231:9"><if pos:start="203:9" pos:end="231:9">if <condition pos:start="203:12" pos:end="203:44">(<expr pos:start="203:13" pos:end="203:43"><name pos:start="203:13" pos:end="203:16">mode</name> <operator pos:start="203:18" pos:end="203:19">!=</operator> <name pos:start="203:21" pos:end="203:43">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition> <block pos:start="203:46" pos:end="231:9">{<block_content pos:start="205:13" pos:end="229:13">

            <decl_stmt pos:start="205:13" pos:end="205:57"><decl pos:start="205:13" pos:end="205:56"><type pos:start="205:13" pos:end="205:19"><name pos:start="205:13" pos:end="205:19">int64_t</name></type> <name pos:start="205:21" pos:end="205:24">size</name> <init pos:start="205:26" pos:end="205:56">= <expr pos:start="205:28" pos:end="205:56"><call pos:start="205:28" pos:end="205:56"><name pos:start="205:28" pos:end="205:41">bdrv_getlength</name><argument_list pos:start="205:42" pos:end="205:56">(<argument pos:start="205:43" pos:end="205:55"><expr pos:start="205:43" pos:end="205:55"><name pos:start="205:43" pos:end="205:55"><name pos:start="205:43" pos:end="205:47">state</name><operator pos:start="205:48" pos:end="205:49">-&gt;</operator><name pos:start="205:50" pos:end="205:55">old_bs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="207:13" pos:end="213:13"><if pos:start="207:13" pos:end="213:13">if <condition pos:start="207:16" pos:end="207:25">(<expr pos:start="207:17" pos:end="207:24"><name pos:start="207:17" pos:end="207:20">size</name> <operator pos:start="207:22" pos:end="207:22">&lt;</operator> <literal type="number" pos:start="207:24" pos:end="207:24">0</literal></expr>)</condition> <block pos:start="207:27" pos:end="213:13">{<block_content pos:start="209:17" pos:end="211:23">

                <expr_stmt pos:start="209:17" pos:end="209:71"><expr pos:start="209:17" pos:end="209:70"><call pos:start="209:17" pos:end="209:70"><name pos:start="209:17" pos:end="209:32">error_setg_errno</name><argument_list pos:start="209:33" pos:end="209:70">(<argument pos:start="209:34" pos:end="209:37"><expr pos:start="209:34" pos:end="209:37"><name pos:start="209:34" pos:end="209:37">errp</name></expr></argument>, <argument pos:start="209:40" pos:end="209:44"><expr pos:start="209:40" pos:end="209:44"><operator pos:start="209:40" pos:end="209:40">-</operator><name pos:start="209:41" pos:end="209:44">size</name></expr></argument>, <argument pos:start="209:47" pos:end="209:69"><expr pos:start="209:47" pos:end="209:69"><literal type="string" pos:start="209:47" pos:end="209:69">"bdrv_getlength failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="211:17" pos:end="211:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="221:66"><expr pos:start="215:13" pos:end="221:65"><call pos:start="215:13" pos:end="221:65"><name pos:start="215:13" pos:end="215:27">bdrv_img_create</name><argument_list pos:start="215:28" pos:end="221:65">(<argument pos:start="215:29" pos:end="215:42"><expr pos:start="215:29" pos:end="215:42"><name pos:start="215:29" pos:end="215:42">new_image_file</name></expr></argument>, <argument pos:start="215:45" pos:end="215:50"><expr pos:start="215:45" pos:end="215:50"><name pos:start="215:45" pos:end="215:50">format</name></expr></argument>,

                            <argument pos:start="217:29" pos:end="217:51"><expr pos:start="217:29" pos:end="217:51"><name pos:start="217:29" pos:end="217:51"><name pos:start="217:29" pos:end="217:33">state</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:41">old_bs</name><operator pos:start="217:42" pos:end="217:43">-&gt;</operator><name pos:start="217:44" pos:end="217:51">filename</name></name></expr></argument>,

                            <argument pos:start="219:29" pos:end="219:59"><expr pos:start="219:29" pos:end="219:59"><name pos:start="219:29" pos:end="219:59"><name pos:start="219:29" pos:end="219:33">state</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:41">old_bs</name><operator pos:start="219:42" pos:end="219:43">-&gt;</operator><name pos:start="219:44" pos:end="219:46">drv</name><operator pos:start="219:47" pos:end="219:48">-&gt;</operator><name pos:start="219:49" pos:end="219:59">format_name</name></name></expr></argument>,

                            <argument pos:start="221:29" pos:end="221:32"><expr pos:start="221:29" pos:end="221:32"><name pos:start="221:29" pos:end="221:32">NULL</name></expr></argument>, <argument pos:start="221:35" pos:end="221:38"><expr pos:start="221:35" pos:end="221:38"><name pos:start="221:35" pos:end="221:38">size</name></expr></argument>, <argument pos:start="221:41" pos:end="221:45"><expr pos:start="221:41" pos:end="221:45"><name pos:start="221:41" pos:end="221:45">flags</name></expr></argument>, <argument pos:start="221:48" pos:end="221:57"><expr pos:start="221:48" pos:end="221:57"><operator pos:start="221:48" pos:end="221:48">&amp;</operator><name pos:start="221:49" pos:end="221:57">local_err</name></expr></argument>, <argument pos:start="221:60" pos:end="221:64"><expr pos:start="221:60" pos:end="221:64"><name pos:start="221:60" pos:end="221:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="223:13" pos:end="229:13"><if pos:start="223:13" pos:end="229:13">if <condition pos:start="223:16" pos:end="223:26">(<expr pos:start="223:17" pos:end="223:25"><name pos:start="223:17" pos:end="223:25">local_err</name></expr>)</condition> <block pos:start="223:28" pos:end="229:13">{<block_content pos:start="225:17" pos:end="227:23">

                <expr_stmt pos:start="225:17" pos:end="225:49"><expr pos:start="225:17" pos:end="225:48"><call pos:start="225:17" pos:end="225:48"><name pos:start="225:17" pos:end="225:31">error_propagate</name><argument_list pos:start="225:32" pos:end="225:48">(<argument pos:start="225:33" pos:end="225:36"><expr pos:start="225:33" pos:end="225:36"><name pos:start="225:33" pos:end="225:36">errp</name></expr></argument>, <argument pos:start="225:39" pos:end="225:47"><expr pos:start="225:39" pos:end="225:47"><name pos:start="225:39" pos:end="225:47">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="227:17" pos:end="227:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="235:9" pos:end="235:30"><expr pos:start="235:9" pos:end="235:29"><name pos:start="235:9" pos:end="235:15">options</name> <operator pos:start="235:17" pos:end="235:17">=</operator> <call pos:start="235:19" pos:end="235:29"><name pos:start="235:19" pos:end="235:27">qdict_new</name><argument_list pos:start="235:28" pos:end="235:29">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="237:9" pos:end="243:9"><if pos:start="237:9" pos:end="243:9">if <condition pos:start="237:12" pos:end="237:38">(<expr pos:start="237:13" pos:end="237:37"><name pos:start="237:13" pos:end="237:37"><name pos:start="237:13" pos:end="237:13">s</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:37">has_snapshot_node_name</name></name></expr>)</condition> <block pos:start="237:40" pos:end="243:9">{<block_content pos:start="239:13" pos:end="241:60">

            <expr_stmt pos:start="239:13" pos:end="241:60"><expr pos:start="239:13" pos:end="241:59"><call pos:start="239:13" pos:end="241:59"><name pos:start="239:13" pos:end="239:21">qdict_put</name><argument_list pos:start="239:22" pos:end="241:59">(<argument pos:start="239:23" pos:end="239:29"><expr pos:start="239:23" pos:end="239:29"><name pos:start="239:23" pos:end="239:29">options</name></expr></argument>, <argument pos:start="239:32" pos:end="239:42"><expr pos:start="239:32" pos:end="239:42"><literal type="string" pos:start="239:32" pos:end="239:42">"node-name"</literal></expr></argument>,

                      <argument pos:start="241:23" pos:end="241:58"><expr pos:start="241:23" pos:end="241:58"><call pos:start="241:23" pos:end="241:58"><name pos:start="241:23" pos:end="241:38">qstring_from_str</name><argument_list pos:start="241:39" pos:end="241:58">(<argument pos:start="241:40" pos:end="241:57"><expr pos:start="241:40" pos:end="241:57"><name pos:start="241:40" pos:end="241:57">snapshot_node_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:63"><expr pos:start="245:9" pos:end="245:62"><call pos:start="245:9" pos:end="245:62"><name pos:start="245:9" pos:end="245:17">qdict_put</name><argument_list pos:start="245:18" pos:end="245:62">(<argument pos:start="245:19" pos:end="245:25"><expr pos:start="245:19" pos:end="245:25"><name pos:start="245:19" pos:end="245:25">options</name></expr></argument>, <argument pos:start="245:28" pos:end="245:35"><expr pos:start="245:28" pos:end="245:35"><literal type="string" pos:start="245:28" pos:end="245:35">"driver"</literal></expr></argument>, <argument pos:start="245:38" pos:end="245:61"><expr pos:start="245:38" pos:end="245:61"><call pos:start="245:38" pos:end="245:61"><name pos:start="245:38" pos:end="245:53">qstring_from_str</name><argument_list pos:start="245:54" pos:end="245:61">(<argument pos:start="245:55" pos:end="245:60"><expr pos:start="245:55" pos:end="245:60"><name pos:start="245:55" pos:end="245:60">format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="249:9" pos:end="249:35"><expr pos:start="249:9" pos:end="249:34"><name pos:start="249:9" pos:end="249:13">flags</name> <operator pos:start="249:15" pos:end="249:16">|=</operator> <name pos:start="249:18" pos:end="249:34">BDRV_O_NO_BACKING</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="255:34"><expr pos:start="255:5" pos:end="255:33"><call pos:start="255:5" pos:end="255:33"><name pos:start="255:5" pos:end="255:10">assert</name><argument_list pos:start="255:11" pos:end="255:33">(<argument pos:start="255:12" pos:end="255:32"><expr pos:start="255:12" pos:end="255:32"><name pos:start="255:12" pos:end="255:24"><name pos:start="255:12" pos:end="255:16">state</name><operator pos:start="255:17" pos:end="255:18">-&gt;</operator><name pos:start="255:19" pos:end="255:24">new_bs</name></name> <operator pos:start="255:26" pos:end="255:27">==</operator> <name pos:start="255:29" pos:end="255:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="259:33"><expr pos:start="257:5" pos:end="259:32"><name pos:start="257:5" pos:end="257:7">ret</name> <operator pos:start="257:9" pos:end="257:9">=</operator> <call pos:start="257:11" pos:end="259:32"><name pos:start="257:11" pos:end="257:19">bdrv_open</name><argument_list pos:start="257:20" pos:end="259:32">(<argument pos:start="257:21" pos:end="257:34"><expr pos:start="257:21" pos:end="257:34"><operator pos:start="257:21" pos:end="257:21">&amp;</operator><name pos:start="257:22" pos:end="257:34"><name pos:start="257:22" pos:end="257:26">state</name><operator pos:start="257:27" pos:end="257:28">-&gt;</operator><name pos:start="257:29" pos:end="257:34">new_bs</name></name></expr></argument>, <argument pos:start="257:37" pos:end="257:50"><expr pos:start="257:37" pos:end="257:50"><name pos:start="257:37" pos:end="257:50">new_image_file</name></expr></argument>, <argument pos:start="257:53" pos:end="257:64"><expr pos:start="257:53" pos:end="257:64"><name pos:start="257:53" pos:end="257:64">snapshot_ref</name></expr></argument>, <argument pos:start="257:67" pos:end="257:73"><expr pos:start="257:67" pos:end="257:73"><name pos:start="257:67" pos:end="257:73">options</name></expr></argument>,

                    <argument pos:start="259:21" pos:end="259:25"><expr pos:start="259:21" pos:end="259:25"><name pos:start="259:21" pos:end="259:25">flags</name></expr></argument>, <argument pos:start="259:28" pos:end="259:31"><expr pos:start="259:28" pos:end="259:31"><name pos:start="259:28" pos:end="259:31">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="261:5" pos:end="261:67">/* We will manually add the backing_hd field to the bs later */</comment>

    <if_stmt pos:start="263:5" pos:end="267:5"><if pos:start="263:5" pos:end="267:5">if <condition pos:start="263:8" pos:end="263:17">(<expr pos:start="263:9" pos:end="263:16"><name pos:start="263:9" pos:end="263:11">ret</name> <operator pos:start="263:13" pos:end="263:14">!=</operator> <literal type="number" pos:start="263:16" pos:end="263:16">0</literal></expr>)</condition> <block pos:start="263:19" pos:end="267:5">{<block_content pos:start="265:9" pos:end="265:15">

        <return pos:start="265:9" pos:end="265:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="271:5" pos:end="279:5"><if pos:start="271:5" pos:end="279:5">if <condition pos:start="271:8" pos:end="271:35">(<expr pos:start="271:9" pos:end="271:34"><name pos:start="271:9" pos:end="271:26"><name pos:start="271:9" pos:end="271:13">state</name><operator pos:start="271:14" pos:end="271:15">-&gt;</operator><name pos:start="271:16" pos:end="271:21">new_bs</name><operator pos:start="271:22" pos:end="271:23">-&gt;</operator><name pos:start="271:24" pos:end="271:26">blk</name></name> <operator pos:start="271:28" pos:end="271:29">!=</operator> <name pos:start="271:31" pos:end="271:34">NULL</name></expr>)</condition> <block pos:start="271:37" pos:end="279:5">{<block_content pos:start="273:9" pos:end="277:15">

        <expr_stmt pos:start="273:9" pos:end="275:49"><expr pos:start="273:9" pos:end="275:48"><call pos:start="273:9" pos:end="275:48"><name pos:start="273:9" pos:end="273:18">error_setg</name><argument_list pos:start="273:19" pos:end="275:48">(<argument pos:start="273:20" pos:end="273:23"><expr pos:start="273:20" pos:end="273:23"><name pos:start="273:20" pos:end="273:23">errp</name></expr></argument>, <argument pos:start="273:26" pos:end="273:63"><expr pos:start="273:26" pos:end="273:63"><literal type="string" pos:start="273:26" pos:end="273:63">"The snapshot is already in use by %s"</literal></expr></argument>,

                   <argument pos:start="275:20" pos:end="275:47"><expr pos:start="275:20" pos:end="275:47"><call pos:start="275:20" pos:end="275:47"><name pos:start="275:20" pos:end="275:27">blk_name</name><argument_list pos:start="275:28" pos:end="275:47">(<argument pos:start="275:29" pos:end="275:46"><expr pos:start="275:29" pos:end="275:46"><name pos:start="275:29" pos:end="275:46"><name pos:start="275:29" pos:end="275:33">state</name><operator pos:start="275:34" pos:end="275:35">-&gt;</operator><name pos:start="275:36" pos:end="275:41">new_bs</name><operator pos:start="275:42" pos:end="275:43">-&gt;</operator><name pos:start="275:44" pos:end="275:46">blk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="277:9" pos:end="277:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="283:5" pos:end="289:5"><if pos:start="283:5" pos:end="289:5">if <condition pos:start="283:8" pos:end="285:33">(<expr pos:start="283:9" pos:end="285:32"><call pos:start="283:9" pos:end="285:32"><name pos:start="283:9" pos:end="283:26">bdrv_op_is_blocked</name><argument_list pos:start="283:27" pos:end="285:32">(<argument pos:start="283:28" pos:end="283:40"><expr pos:start="283:28" pos:end="283:40"><name pos:start="283:28" pos:end="283:40"><name pos:start="283:28" pos:end="283:32">state</name><operator pos:start="283:33" pos:end="283:34">-&gt;</operator><name pos:start="283:35" pos:end="283:40">new_bs</name></name></expr></argument>, <argument pos:start="283:43" pos:end="283:73"><expr pos:start="283:43" pos:end="283:73"><name pos:start="283:43" pos:end="283:73">BLOCK_OP_TYPE_EXTERNAL_SNAPSHOT</name></expr></argument>,

                           <argument pos:start="285:28" pos:end="285:31"><expr pos:start="285:28" pos:end="285:31"><name pos:start="285:28" pos:end="285:31">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="285:35" pos:end="289:5">{<block_content pos:start="287:9" pos:end="287:15">

        <return pos:start="287:9" pos:end="287:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:39">(<expr pos:start="293:9" pos:end="293:38"><name pos:start="293:9" pos:end="293:30"><name pos:start="293:9" pos:end="293:13">state</name><operator pos:start="293:14" pos:end="293:15">-&gt;</operator><name pos:start="293:16" pos:end="293:21">new_bs</name><operator pos:start="293:22" pos:end="293:23">-&gt;</operator><name pos:start="293:24" pos:end="293:30">backing</name></name> <operator pos:start="293:32" pos:end="293:33">!=</operator> <name pos:start="293:35" pos:end="293:38">NULL</name></expr>)</condition> <block pos:start="293:41" pos:end="299:5">{<block_content pos:start="295:9" pos:end="297:15">

        <expr_stmt pos:start="295:9" pos:end="295:69"><expr pos:start="295:9" pos:end="295:68"><call pos:start="295:9" pos:end="295:68"><name pos:start="295:9" pos:end="295:18">error_setg</name><argument_list pos:start="295:19" pos:end="295:68">(<argument pos:start="295:20" pos:end="295:23"><expr pos:start="295:20" pos:end="295:23"><name pos:start="295:20" pos:end="295:23">errp</name></expr></argument>, <argument pos:start="295:26" pos:end="295:67"><expr pos:start="295:26" pos:end="295:67"><literal type="string" pos:start="295:26" pos:end="295:67">"The snapshot already has a backing image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="297:9" pos:end="297:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="303:5" pos:end="307:5"><if pos:start="303:5" pos:end="307:5">if <condition pos:start="303:8" pos:end="303:46">(<expr pos:start="303:9" pos:end="303:45"><operator pos:start="303:9" pos:end="303:9">!</operator><name pos:start="303:10" pos:end="303:45"><name pos:start="303:10" pos:end="303:14">state</name><operator pos:start="303:15" pos:end="303:16">-&gt;</operator><name pos:start="303:17" pos:end="303:22">new_bs</name><operator pos:start="303:23" pos:end="303:24">-&gt;</operator><name pos:start="303:25" pos:end="303:27">drv</name><operator pos:start="303:28" pos:end="303:29">-&gt;</operator><name pos:start="303:30" pos:end="303:45">supports_backing</name></name></expr>)</condition> <block pos:start="303:48" pos:end="307:5">{<block_content pos:start="305:9" pos:end="305:73">

        <expr_stmt pos:start="305:9" pos:end="305:73"><expr pos:start="305:9" pos:end="305:72"><call pos:start="305:9" pos:end="305:72"><name pos:start="305:9" pos:end="305:18">error_setg</name><argument_list pos:start="305:19" pos:end="305:72">(<argument pos:start="305:20" pos:end="305:23"><expr pos:start="305:20" pos:end="305:23"><name pos:start="305:20" pos:end="305:23">errp</name></expr></argument>, <argument pos:start="305:26" pos:end="305:71"><expr pos:start="305:26" pos:end="305:71"><literal type="string" pos:start="305:26" pos:end="305:71">"The snapshot does not support backing images"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
