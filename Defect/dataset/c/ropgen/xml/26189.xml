<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26189.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_open_dref</name><parameter_list pos:start="1:25" pos:end="3:49">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier><modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">pb</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:73"><decl pos:start="1:59" pos:end="1:73"><type pos:start="1:59" pos:end="1:73"><specifier pos:start="1:59" pos:end="1:63">const</specifier> <name pos:start="1:65" pos:end="1:68">char</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">src</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:87"><decl pos:start="1:76" pos:end="1:87"><type pos:start="1:76" pos:end="1:87"><name pos:start="1:76" pos:end="1:82">MOVDref</name> <modifier pos:start="1:84" pos:end="1:84">*</modifier></type><name pos:start="1:85" pos:end="1:87">ref</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:48"><decl pos:start="3:26" pos:end="3:48"><type pos:start="3:26" pos:end="3:48"><name pos:start="3:26" pos:end="3:40">AVIOInterruptCB</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:48">int_cb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:27">

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18">AVOpenCallback</name></type> <name pos:start="7:20" pos:end="7:28">open_func</name> <init pos:start="7:30" pos:end="7:45">= <expr pos:start="7:32" pos:end="7:45"><name pos:start="7:32" pos:end="7:45"><name pos:start="7:32" pos:end="7:32">c</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:36">fc</name><operator pos:start="7:37" pos:end="7:38">-&gt;</operator><name pos:start="7:39" pos:end="7:45">open_cb</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:39"><if pos:start="11:5" pos:end="13:39">if <condition pos:start="11:8" pos:end="11:19">(<expr pos:start="11:9" pos:end="11:18"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:18">open_func</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:39"><block_content pos:start="13:9" pos:end="13:39">

        <expr_stmt pos:start="13:9" pos:end="13:39"><expr pos:start="13:9" pos:end="13:38"><name pos:start="13:9" pos:end="13:17">open_func</name> <operator pos:start="13:19" pos:end="13:19">=</operator> <name pos:start="13:21" pos:end="13:38">ffio_open2_wrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="17:5" pos:end="19:31">/* try relative path, we do not try the absolute because it can leak information about our

       system to an attacker */</comment>

    <if_stmt pos:start="21:5" pos:end="125:5"><if pos:start="21:5" pos:end="99:5">if <condition pos:start="21:8" pos:end="21:70">(<expr pos:start="21:9" pos:end="21:69"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:11">ref</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:20">nlvl_to</name></name> <operator pos:start="21:22" pos:end="21:22">&gt;</operator> <literal type="number" pos:start="21:24" pos:end="21:24">0</literal> <operator pos:start="21:26" pos:end="21:27">&amp;&amp;</operator> <name pos:start="21:29" pos:end="21:42"><name pos:start="21:29" pos:end="21:31">ref</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:42">nlvl_from</name></name> <operator pos:start="21:44" pos:end="21:44">&gt;</operator> <literal type="number" pos:start="21:46" pos:end="21:46">0</literal> <operator pos:start="21:48" pos:end="21:49">&amp;&amp;</operator> <name pos:start="21:51" pos:end="21:62"><name pos:start="21:51" pos:end="21:53">ref</name><operator pos:start="21:54" pos:end="21:55">-&gt;</operator><name pos:start="21:56" pos:end="21:59">path</name><index pos:start="21:60" pos:end="21:62">[<expr pos:start="21:61" pos:end="21:61"><literal type="number" pos:start="21:61" pos:end="21:61">0</literal></expr>]</index></name> <operator pos:start="21:64" pos:end="21:65">!=</operator> <literal type="char" pos:start="21:67" pos:end="21:69">'/'</literal></expr>)</condition> <block pos:start="21:72" pos:end="99:5">{<block_content pos:start="23:9" pos:end="97:9">

        <decl_stmt pos:start="23:9" pos:end="23:28"><decl pos:start="23:9" pos:end="23:27"><type pos:start="23:9" pos:end="23:12"><name pos:start="23:9" pos:end="23:12">char</name></type> <name pos:start="23:14" pos:end="23:27"><name pos:start="23:14" pos:end="23:21">filename</name><index pos:start="23:22" pos:end="23:27">[<expr pos:start="23:23" pos:end="23:26"><literal type="number" pos:start="23:23" pos:end="23:26">1025</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:29"><decl pos:start="25:9" pos:end="25:28"><type pos:start="25:9" pos:end="25:20"><specifier pos:start="25:9" pos:end="25:13">const</specifier> <name pos:start="25:15" pos:end="25:18">char</name> <modifier pos:start="25:20" pos:end="25:20">*</modifier></type><name pos:start="25:21" pos:end="25:28">src_path</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:17"><decl pos:start="27:9" pos:end="27:13"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:13">i</name></decl>, <decl pos:start="27:16" pos:end="27:16"><type ref="prev" pos:start="27:9" pos:end="27:11"/><name pos:start="27:16" pos:end="27:16">l</name></decl>;</decl_stmt>



        <comment type="block" pos:start="31:9" pos:end="31:31">/* find a source dir */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:37"><expr pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:16">src_path</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:36"><name pos:start="33:20" pos:end="33:26">strrchr</name><argument_list pos:start="33:27" pos:end="33:36">(<argument pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><name pos:start="33:28" pos:end="33:30">src</name></expr></argument>, <argument pos:start="33:33" pos:end="33:35"><expr pos:start="33:33" pos:end="33:35"><literal type="char" pos:start="33:33" pos:end="33:35">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="41:27"><if pos:start="35:9" pos:end="37:23">if <condition pos:start="35:12" pos:end="35:21">(<expr pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:20">src_path</name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:23"><block_content pos:start="37:13" pos:end="37:23">

            <expr_stmt pos:start="37:13" pos:end="37:23"><expr pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:20">src_path</name><operator pos:start="37:21" pos:end="37:22">++</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="39:9" pos:end="41:27">else<block type="pseudo" pos:start="41:13" pos:end="41:27"><block_content pos:start="41:13" pos:end="41:27">

            <expr_stmt pos:start="41:13" pos:end="41:27"><expr pos:start="41:13" pos:end="41:26"><name pos:start="41:13" pos:end="41:20">src_path</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <name pos:start="41:24" pos:end="41:26">src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <comment type="block" pos:start="45:9" pos:end="45:46">/* find a next level down to target */</comment>

        <for pos:start="47:9" pos:end="59:13">for <control pos:start="47:13" pos:end="47:59">(<init pos:start="47:14" pos:end="47:46"><expr pos:start="47:14" pos:end="47:18"><name pos:start="47:14" pos:end="47:14">i</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr><operator pos:start="47:19" pos:end="47:19">,</operator> <expr pos:start="47:21" pos:end="47:45"><name pos:start="47:21" pos:end="47:21">l</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <call pos:start="47:25" pos:end="47:41"><name pos:start="47:25" pos:end="47:30">strlen</name><argument_list pos:start="47:31" pos:end="47:41">(<argument pos:start="47:32" pos:end="47:40"><expr pos:start="47:32" pos:end="47:40"><name pos:start="47:32" pos:end="47:40"><name pos:start="47:32" pos:end="47:34">ref</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:40">path</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:43" pos:end="47:43">-</operator> <literal type="number" pos:start="47:45" pos:end="47:45">1</literal></expr>;</init> <condition pos:start="47:48" pos:end="47:54"><expr pos:start="47:48" pos:end="47:53"><name pos:start="47:48" pos:end="47:48">l</name> <operator pos:start="47:50" pos:end="47:51">&gt;=</operator> <literal type="number" pos:start="47:53" pos:end="47:53">0</literal></expr>;</condition> <incr pos:start="47:56" pos:end="47:58"><expr pos:start="47:56" pos:end="47:58"><name pos:start="47:56" pos:end="47:56">l</name><operator pos:start="47:57" pos:end="47:58">--</operator></expr></incr>)</control><block type="pseudo" pos:start="49:13" pos:end="59:13"><block_content pos:start="49:13" pos:end="59:13">

            <if_stmt pos:start="49:13" pos:end="59:13"><if pos:start="49:13" pos:end="59:13">if <condition pos:start="49:16" pos:end="49:36">(<expr pos:start="49:17" pos:end="49:35"><name pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:19">ref</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:25">path</name><index pos:start="49:26" pos:end="49:28">[<expr pos:start="49:27" pos:end="49:27"><name pos:start="49:27" pos:end="49:27">l</name></expr>]</index></name> <operator pos:start="49:30" pos:end="49:31">==</operator> <literal type="char" pos:start="49:33" pos:end="49:35">'/'</literal></expr>)</condition> <block pos:start="49:38" pos:end="59:13">{<block_content pos:start="51:17" pos:end="57:24">

                <if_stmt pos:start="51:17" pos:end="57:24"><if pos:start="51:17" pos:end="53:26">if <condition pos:start="51:20" pos:end="51:42">(<expr pos:start="51:21" pos:end="51:41"><name pos:start="51:21" pos:end="51:21">i</name> <operator pos:start="51:23" pos:end="51:24">==</operator> <name pos:start="51:26" pos:end="51:37"><name pos:start="51:26" pos:end="51:28">ref</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:37">nlvl_to</name></name> <operator pos:start="51:39" pos:end="51:39">-</operator> <literal type="number" pos:start="51:41" pos:end="51:41">1</literal></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:26"><block_content pos:start="53:21" pos:end="53:26">

                    <break pos:start="53:21" pos:end="53:26">break;</break></block_content></block></if>

                <else pos:start="55:17" pos:end="57:24">else<block type="pseudo" pos:start="57:21" pos:end="57:24"><block_content pos:start="57:21" pos:end="57:24">

                    <expr_stmt pos:start="57:21" pos:end="57:24"><expr pos:start="57:21" pos:end="57:23"><name pos:start="57:21" pos:end="57:21">i</name><operator pos:start="57:22" pos:end="57:23">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>



        <comment type="block" pos:start="63:9" pos:end="63:69">/* compose filename if next level down to target was found */</comment>

        <if_stmt pos:start="65:9" pos:end="97:9"><if pos:start="65:9" pos:end="97:9">if <condition pos:start="65:12" pos:end="65:72">(<expr pos:start="65:13" pos:end="65:71"><name pos:start="65:13" pos:end="65:13">i</name> <operator pos:start="65:15" pos:end="65:16">==</operator> <name pos:start="65:18" pos:end="65:29"><name pos:start="65:18" pos:end="65:20">ref</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:29">nlvl_to</name></name> <operator pos:start="65:31" pos:end="65:31">-</operator> <literal type="number" pos:start="65:33" pos:end="65:33">1</literal> <operator pos:start="65:35" pos:end="65:36">&amp;&amp;</operator> <name pos:start="65:38" pos:end="65:45">src_path</name> <operator pos:start="65:47" pos:end="65:47">-</operator> <name pos:start="65:49" pos:end="65:51">src</name>  <operator pos:start="65:54" pos:end="65:54">&lt;</operator> <sizeof pos:start="65:56" pos:end="65:71">sizeof<argument_list pos:start="65:62" pos:end="65:71">(<argument pos:start="65:63" pos:end="65:70"><expr pos:start="65:63" pos:end="65:70"><name pos:start="65:63" pos:end="65:70">filename</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="65:74" pos:end="97:9">{<block_content pos:start="67:13" pos:end="95:25">

            <expr_stmt pos:start="67:13" pos:end="67:50"><expr pos:start="67:13" pos:end="67:49"><call pos:start="67:13" pos:end="67:49"><name pos:start="67:13" pos:end="67:18">memcpy</name><argument_list pos:start="67:19" pos:end="67:49">(<argument pos:start="67:20" pos:end="67:27"><expr pos:start="67:20" pos:end="67:27"><name pos:start="67:20" pos:end="67:27">filename</name></expr></argument>, <argument pos:start="67:30" pos:end="67:32"><expr pos:start="67:30" pos:end="67:32"><name pos:start="67:30" pos:end="67:32">src</name></expr></argument>, <argument pos:start="67:35" pos:end="67:48"><expr pos:start="67:35" pos:end="67:48"><name pos:start="67:35" pos:end="67:42">src_path</name> <operator pos:start="67:44" pos:end="67:44">-</operator> <name pos:start="67:46" pos:end="67:48">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:41"><expr pos:start="69:13" pos:end="69:40"><name pos:start="69:13" pos:end="69:36"><name pos:start="69:13" pos:end="69:20">filename</name><index pos:start="69:21" pos:end="69:36">[<expr pos:start="69:22" pos:end="69:35"><name pos:start="69:22" pos:end="69:29">src_path</name> <operator pos:start="69:31" pos:end="69:31">-</operator> <name pos:start="69:33" pos:end="69:35">src</name></expr>]</index></name> <operator pos:start="69:38" pos:end="69:38">=</operator> <literal type="number" pos:start="69:40" pos:end="69:40">0</literal></expr>;</expr_stmt>



            <for pos:start="73:13" pos:end="75:62">for <control pos:start="73:17" pos:end="73:48">(<init pos:start="73:18" pos:end="73:23"><expr pos:start="73:18" pos:end="73:22"><name pos:start="73:18" pos:end="73:18">i</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">1</literal></expr>;</init> <condition pos:start="73:25" pos:end="73:43"><expr pos:start="73:25" pos:end="73:42"><name pos:start="73:25" pos:end="73:25">i</name> <operator pos:start="73:27" pos:end="73:27">&lt;</operator> <name pos:start="73:29" pos:end="73:42"><name pos:start="73:29" pos:end="73:31">ref</name><operator pos:start="73:32" pos:end="73:33">-&gt;</operator><name pos:start="73:34" pos:end="73:42">nlvl_from</name></name></expr>;</condition> <incr pos:start="73:45" pos:end="73:47"><expr pos:start="73:45" pos:end="73:47"><name pos:start="73:45" pos:end="73:45">i</name><operator pos:start="73:46" pos:end="73:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="75:17" pos:end="75:62"><block_content pos:start="75:17" pos:end="75:62">

                <expr_stmt pos:start="75:17" pos:end="75:62"><expr pos:start="75:17" pos:end="75:61"><call pos:start="75:17" pos:end="75:61"><name pos:start="75:17" pos:end="75:26">av_strlcat</name><argument_list pos:start="75:27" pos:end="75:61">(<argument pos:start="75:28" pos:end="75:35"><expr pos:start="75:28" pos:end="75:35"><name pos:start="75:28" pos:end="75:35">filename</name></expr></argument>, <argument pos:start="75:38" pos:end="75:42"><expr pos:start="75:38" pos:end="75:42"><literal type="string" pos:start="75:38" pos:end="75:42">"../"</literal></expr></argument>, <argument pos:start="75:45" pos:end="75:60"><expr pos:start="75:45" pos:end="75:60"><sizeof pos:start="75:45" pos:end="75:60">sizeof<argument_list pos:start="75:51" pos:end="75:60">(<argument pos:start="75:52" pos:end="75:59"><expr pos:start="75:52" pos:end="75:59"><name pos:start="75:52" pos:end="75:59">filename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



            <expr_stmt pos:start="79:13" pos:end="79:70"><expr pos:start="79:13" pos:end="79:69"><call pos:start="79:13" pos:end="79:69"><name pos:start="79:13" pos:end="79:22">av_strlcat</name><argument_list pos:start="79:23" pos:end="79:69">(<argument pos:start="79:24" pos:end="79:31"><expr pos:start="79:24" pos:end="79:31"><name pos:start="79:24" pos:end="79:31">filename</name></expr></argument>, <argument pos:start="79:34" pos:end="79:50"><expr pos:start="79:34" pos:end="79:50"><name pos:start="79:34" pos:end="79:42"><name pos:start="79:34" pos:end="79:36">ref</name><operator pos:start="79:37" pos:end="79:38">-&gt;</operator><name pos:start="79:39" pos:end="79:42">path</name></name> <operator pos:start="79:44" pos:end="79:44">+</operator> <name pos:start="79:46" pos:end="79:46">l</name> <operator pos:start="79:48" pos:end="79:48">+</operator> <literal type="number" pos:start="79:50" pos:end="79:50">1</literal></expr></argument>, <argument pos:start="79:53" pos:end="79:68"><expr pos:start="79:53" pos:end="79:68"><sizeof pos:start="79:53" pos:end="79:68">sizeof<argument_list pos:start="79:59" pos:end="79:68">(<argument pos:start="79:60" pos:end="79:67"><expr pos:start="79:60" pos:end="79:67"><name pos:start="79:60" pos:end="79:67">filename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="85:43"><if pos:start="81:13" pos:end="85:43">if <condition pos:start="81:16" pos:end="81:57">(<expr pos:start="81:17" pos:end="81:56"><operator pos:start="81:17" pos:end="81:17">!</operator><name pos:start="81:18" pos:end="81:37"><name pos:start="81:18" pos:end="81:18">c</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:37">use_absolute_path</name></name> <operator pos:start="81:39" pos:end="81:40">&amp;&amp;</operator> <operator pos:start="81:42" pos:end="81:42">!</operator><name pos:start="81:43" pos:end="81:56"><name pos:start="81:43" pos:end="81:43">c</name><operator pos:start="81:44" pos:end="81:45">-&gt;</operator><name pos:start="81:46" pos:end="81:47">fc</name><operator pos:start="81:48" pos:end="81:49">-&gt;</operator><name pos:start="81:50" pos:end="81:56">open_cb</name></name></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="85:43"><block_content pos:start="83:17" pos:end="85:43">

                <if_stmt pos:start="83:17" pos:end="85:43"><if pos:start="83:17" pos:end="85:43">if<condition pos:start="83:19" pos:end="83:73">(<expr pos:start="83:20" pos:end="83:72"><call pos:start="83:20" pos:end="83:50"><name pos:start="83:20" pos:end="83:25">strstr</name><argument_list pos:start="83:26" pos:end="83:50">(<argument pos:start="83:27" pos:end="83:43"><expr pos:start="83:27" pos:end="83:43"><name pos:start="83:27" pos:end="83:35"><name pos:start="83:27" pos:end="83:29">ref</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:35">path</name></name> <operator pos:start="83:37" pos:end="83:37">+</operator> <name pos:start="83:39" pos:end="83:39">l</name> <operator pos:start="83:41" pos:end="83:41">+</operator> <literal type="number" pos:start="83:43" pos:end="83:43">1</literal></expr></argument>, <argument pos:start="83:46" pos:end="83:49"><expr pos:start="83:46" pos:end="83:49"><literal type="string" pos:start="83:46" pos:end="83:49">".."</literal></expr></argument>)</argument_list></call> <operator pos:start="83:52" pos:end="83:53">||</operator> <name pos:start="83:55" pos:end="83:68"><name pos:start="83:55" pos:end="83:57">ref</name><operator pos:start="83:58" pos:end="83:59">-&gt;</operator><name pos:start="83:60" pos:end="83:68">nlvl_from</name></name> <operator pos:start="83:70" pos:end="83:70">&gt;</operator> <literal type="number" pos:start="83:72" pos:end="83:72">1</literal></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:43"><block_content pos:start="85:21" pos:end="85:43">

                    <return pos:start="85:21" pos:end="85:43">return <expr pos:start="85:28" pos:end="85:42"><call pos:start="85:28" pos:end="85:42"><name pos:start="85:28" pos:end="85:34">AVERROR</name><argument_list pos:start="85:35" pos:end="85:42">(<argument pos:start="85:36" pos:end="85:41"><expr pos:start="85:36" pos:end="85:41"><name pos:start="85:36" pos:end="85:41">ENOENT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="89:13" pos:end="91:39"><if pos:start="89:13" pos:end="91:39">if <condition pos:start="89:16" pos:end="89:57">(<expr pos:start="89:17" pos:end="89:56"><call pos:start="89:17" pos:end="89:32"><name pos:start="89:17" pos:end="89:22">strlen</name><argument_list pos:start="89:23" pos:end="89:32">(<argument pos:start="89:24" pos:end="89:31"><expr pos:start="89:24" pos:end="89:31"><name pos:start="89:24" pos:end="89:31">filename</name></expr></argument>)</argument_list></call> <operator pos:start="89:34" pos:end="89:34">+</operator> <literal type="number" pos:start="89:36" pos:end="89:36">1</literal> <operator pos:start="89:38" pos:end="89:39">==</operator> <sizeof pos:start="89:41" pos:end="89:56">sizeof<argument_list pos:start="89:47" pos:end="89:56">(<argument pos:start="89:48" pos:end="89:55"><expr pos:start="89:48" pos:end="89:55"><name pos:start="89:48" pos:end="89:55">filename</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:39"><block_content pos:start="91:17" pos:end="91:39">

                <return pos:start="91:17" pos:end="91:39">return <expr pos:start="91:24" pos:end="91:38"><call pos:start="91:24" pos:end="91:38"><name pos:start="91:24" pos:end="91:30">AVERROR</name><argument_list pos:start="91:31" pos:end="91:38">(<argument pos:start="91:32" pos:end="91:37"><expr pos:start="91:32" pos:end="91:37"><name pos:start="91:32" pos:end="91:37">ENOENT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="93:13" pos:end="95:25"><if pos:start="93:13" pos:end="95:25">if <condition pos:start="93:16" pos:end="93:78">(<expr pos:start="93:17" pos:end="93:77"><operator pos:start="93:17" pos:end="93:17">!</operator><call pos:start="93:18" pos:end="93:77"><name pos:start="93:18" pos:end="93:26">open_func</name><argument_list pos:start="93:27" pos:end="93:77">(<argument pos:start="93:28" pos:end="93:32"><expr pos:start="93:28" pos:end="93:32"><name pos:start="93:28" pos:end="93:32"><name pos:start="93:28" pos:end="93:28">c</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:32">fc</name></name></expr></argument>, <argument pos:start="93:35" pos:end="93:36"><expr pos:start="93:35" pos:end="93:36"><name pos:start="93:35" pos:end="93:36">pb</name></expr></argument>, <argument pos:start="93:39" pos:end="93:46"><expr pos:start="93:39" pos:end="93:46"><name pos:start="93:39" pos:end="93:46">filename</name></expr></argument>, <argument pos:start="93:49" pos:end="93:62"><expr pos:start="93:49" pos:end="93:62"><name pos:start="93:49" pos:end="93:62">AVIO_FLAG_READ</name></expr></argument>, <argument pos:start="93:65" pos:end="93:70"><expr pos:start="93:65" pos:end="93:70"><name pos:start="93:65" pos:end="93:70">int_cb</name></expr></argument>, <argument pos:start="93:73" pos:end="93:76"><expr pos:start="93:73" pos:end="93:76"><name pos:start="93:73" pos:end="93:76">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:25"><block_content pos:start="95:17" pos:end="95:25">

                <return pos:start="95:17" pos:end="95:25">return <expr pos:start="95:24" pos:end="95:24"><literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="99:7" pos:end="109:5">else if <condition pos:start="99:15" pos:end="99:36">(<expr pos:start="99:16" pos:end="99:35"><name pos:start="99:16" pos:end="99:35"><name pos:start="99:16" pos:end="99:16">c</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:35">use_absolute_path</name></name></expr>)</condition> <block pos:start="99:38" pos:end="109:5">{<block_content pos:start="101:9" pos:end="107:21">

        <expr_stmt pos:start="101:9" pos:end="103:54"><expr pos:start="101:9" pos:end="103:53"><call pos:start="101:9" pos:end="103:53"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="103:53">(<argument pos:start="101:16" pos:end="101:20"><expr pos:start="101:16" pos:end="101:20"><name pos:start="101:16" pos:end="101:20"><name pos:start="101:16" pos:end="101:16">c</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:20">fc</name></name></expr></argument>, <argument pos:start="101:23" pos:end="101:36"><expr pos:start="101:23" pos:end="101:36"><name pos:start="101:23" pos:end="101:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="101:39" pos:end="103:52"><expr pos:start="101:39" pos:end="103:52"><literal type="string" pos:start="101:39" pos:end="101:77">"Using absolute path on user request, "</literal>

               <literal type="string" pos:start="103:16" pos:end="103:52">"this is a possible security issue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="107:21"><if pos:start="105:9" pos:end="107:21">if <condition pos:start="105:12" pos:end="105:75">(<expr pos:start="105:13" pos:end="105:74"><operator pos:start="105:13" pos:end="105:13">!</operator><call pos:start="105:14" pos:end="105:74"><name pos:start="105:14" pos:end="105:22">open_func</name><argument_list pos:start="105:23" pos:end="105:74">(<argument pos:start="105:24" pos:end="105:28"><expr pos:start="105:24" pos:end="105:28"><name pos:start="105:24" pos:end="105:28"><name pos:start="105:24" pos:end="105:24">c</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:28">fc</name></name></expr></argument>, <argument pos:start="105:31" pos:end="105:32"><expr pos:start="105:31" pos:end="105:32"><name pos:start="105:31" pos:end="105:32">pb</name></expr></argument>, <argument pos:start="105:35" pos:end="105:43"><expr pos:start="105:35" pos:end="105:43"><name pos:start="105:35" pos:end="105:43"><name pos:start="105:35" pos:end="105:37">ref</name><operator pos:start="105:38" pos:end="105:39">-&gt;</operator><name pos:start="105:40" pos:end="105:43">path</name></name></expr></argument>, <argument pos:start="105:46" pos:end="105:59"><expr pos:start="105:46" pos:end="105:59"><name pos:start="105:46" pos:end="105:59">AVIO_FLAG_READ</name></expr></argument>, <argument pos:start="105:62" pos:end="105:67"><expr pos:start="105:62" pos:end="105:67"><name pos:start="105:62" pos:end="105:67">int_cb</name></expr></argument>, <argument pos:start="105:70" pos:end="105:73"><expr pos:start="105:70" pos:end="105:73"><name pos:start="105:70" pos:end="105:73">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:21"><block_content pos:start="107:13" pos:end="107:21">

            <return pos:start="107:13" pos:end="107:21">return <expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="109:7" pos:end="115:5">else if <condition pos:start="109:15" pos:end="109:30">(<expr pos:start="109:16" pos:end="109:29"><name pos:start="109:16" pos:end="109:29"><name pos:start="109:16" pos:end="109:16">c</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:20">fc</name><operator pos:start="109:21" pos:end="109:22">-&gt;</operator><name pos:start="109:23" pos:end="109:29">open_cb</name></name></expr>)</condition> <block pos:start="109:32" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:21">

        <if_stmt pos:start="111:9" pos:end="113:21"><if pos:start="111:9" pos:end="113:21">if <condition pos:start="111:12" pos:end="111:75">(<expr pos:start="111:13" pos:end="111:74"><operator pos:start="111:13" pos:end="111:13">!</operator><call pos:start="111:14" pos:end="111:74"><name pos:start="111:14" pos:end="111:22">open_func</name><argument_list pos:start="111:23" pos:end="111:74">(<argument pos:start="111:24" pos:end="111:28"><expr pos:start="111:24" pos:end="111:28"><name pos:start="111:24" pos:end="111:28"><name pos:start="111:24" pos:end="111:24">c</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:28">fc</name></name></expr></argument>, <argument pos:start="111:31" pos:end="111:32"><expr pos:start="111:31" pos:end="111:32"><name pos:start="111:31" pos:end="111:32">pb</name></expr></argument>, <argument pos:start="111:35" pos:end="111:43"><expr pos:start="111:35" pos:end="111:43"><name pos:start="111:35" pos:end="111:43"><name pos:start="111:35" pos:end="111:37">ref</name><operator pos:start="111:38" pos:end="111:39">-&gt;</operator><name pos:start="111:40" pos:end="111:43">path</name></name></expr></argument>, <argument pos:start="111:46" pos:end="111:59"><expr pos:start="111:46" pos:end="111:59"><name pos:start="111:46" pos:end="111:59">AVIO_FLAG_READ</name></expr></argument>, <argument pos:start="111:62" pos:end="111:67"><expr pos:start="111:62" pos:end="111:67"><name pos:start="111:62" pos:end="111:67">int_cb</name></expr></argument>, <argument pos:start="111:70" pos:end="111:73"><expr pos:start="111:70" pos:end="111:73"><name pos:start="111:70" pos:end="111:73">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:21"><block_content pos:start="113:13" pos:end="113:21">

            <return pos:start="113:13" pos:end="113:21">return <expr pos:start="113:20" pos:end="113:20"><literal type="number" pos:start="113:20" pos:end="113:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="125:5">else <block pos:start="115:12" pos:end="125:5">{<block_content pos:start="117:9" pos:end="123:26">

        <expr_stmt pos:start="117:9" pos:end="123:26"><expr pos:start="117:9" pos:end="123:25"><call pos:start="117:9" pos:end="123:25"><name pos:start="117:9" pos:end="117:14">av_log</name><argument_list pos:start="117:15" pos:end="123:25">(<argument pos:start="117:16" pos:end="117:20"><expr pos:start="117:16" pos:end="117:20"><name pos:start="117:16" pos:end="117:20"><name pos:start="117:16" pos:end="117:16">c</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:20">fc</name></name></expr></argument>, <argument pos:start="117:23" pos:end="117:34"><expr pos:start="117:23" pos:end="117:34"><name pos:start="117:23" pos:end="117:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="119:16" pos:end="121:79"><expr pos:start="119:16" pos:end="121:79"><literal type="string" pos:start="119:16" pos:end="119:66">"Absolute path %s not tried for security reasons, "</literal>

               <literal type="string" pos:start="121:16" pos:end="121:79">"set demuxer option use_absolute_path to allow absolute paths\n"</literal></expr></argument>,

               <argument pos:start="123:16" pos:end="123:24"><expr pos:start="123:16" pos:end="123:24"><name pos:start="123:16" pos:end="123:24"><name pos:start="123:16" pos:end="123:18">ref</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:24">path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="129:5" pos:end="129:27">return <expr pos:start="129:12" pos:end="129:26"><call pos:start="129:12" pos:end="129:26"><name pos:start="129:12" pos:end="129:18">AVERROR</name><argument_list pos:start="129:19" pos:end="129:26">(<argument pos:start="129:20" pos:end="129:25"><expr pos:start="129:20" pos:end="129:25"><name pos:start="129:20" pos:end="129:25">ENOENT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
