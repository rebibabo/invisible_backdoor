<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14374.c" pos:tabs="8"><function pos:start="1:1" pos:end="433:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vc9_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:55">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:40"><decl pos:start="5:29" pos:end="5:40"><type pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="433:1">{<block_content pos:start="9:5" pos:end="431:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">VC9Context</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">v</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:29">= <expr pos:start="11:25" pos:end="11:29"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:26">v</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:26">= <expr pos:start="13:15" pos:end="13:26"><name pos:start="13:15" pos:end="13:26">FRAME_SKIPED</name></expr></init></decl>, <decl pos:start="13:29" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:29" pos:end="13:31">len</name></decl>, <decl pos:start="13:34" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:34" pos:end="13:43">start_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">AVFrame</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:17">pict</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:20">tmp_buf</name></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:5">v</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:8">s</name><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:14">avctx</name></name> <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:22">avctx</name></expr>;</expr_stmt>



    <comment type="line" pos:start="23:5" pos:end="23:32">//buf_size = 0 -&gt; last frame</comment>

    <if_stmt pos:start="25:5" pos:end="25:28"><if pos:start="25:5" pos:end="25:28">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:17">buf_size</name></expr>)</condition><block type="pseudo" pos:start="25:20" pos:end="25:28"><block_content pos:start="25:20" pos:end="25:28"> <return pos:start="25:20" pos:end="25:28">return <expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="31:44"><expr pos:start="29:5" pos:end="31:43"><name pos:start="29:5" pos:end="29:7">len</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="31:43"><name pos:start="29:11" pos:end="29:28">avpicture_get_size</name><argument_list pos:start="29:29" pos:end="31:43">(<argument pos:start="29:30" pos:end="29:43"><expr pos:start="29:30" pos:end="29:43"><name pos:start="29:30" pos:end="29:43"><name pos:start="29:30" pos:end="29:34">avctx</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:43">pix_fmt</name></name></expr></argument>, <argument pos:start="29:46" pos:end="29:57"><expr pos:start="29:46" pos:end="29:57"><name pos:start="29:46" pos:end="29:57"><name pos:start="29:46" pos:end="29:50">avctx</name><operator pos:start="29:51" pos:end="29:52">-&gt;</operator><name pos:start="29:53" pos:end="29:57">width</name></name></expr></argument>,

                             <argument pos:start="31:30" pos:end="31:42"><expr pos:start="31:30" pos:end="31:42"><name pos:start="31:30" pos:end="31:42"><name pos:start="31:30" pos:end="31:34">avctx</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:42">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:11">tmp_buf</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <operator pos:start="33:15" pos:end="33:15">(</operator><name pos:start="33:16" pos:end="33:22">uint8_t</name> <operator pos:start="33:24" pos:end="33:24">*</operator><operator pos:start="33:25" pos:end="33:25">)</operator><call pos:start="33:26" pos:end="33:40"><name pos:start="33:26" pos:end="33:35">av_mallocz</name><argument_list pos:start="33:36" pos:end="33:40">(<argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="37:48"><expr pos:start="35:5" pos:end="37:47"><call pos:start="35:5" pos:end="37:47"><name pos:start="35:5" pos:end="35:18">avpicture_fill</name><argument_list pos:start="35:19" pos:end="37:47">(<argument pos:start="35:20" pos:end="35:36"><expr pos:start="35:20" pos:end="35:36"><operator pos:start="35:20" pos:end="35:20">(</operator><name pos:start="35:21" pos:end="35:29">AVPicture</name> <operator pos:start="35:31" pos:end="35:31">*</operator><operator pos:start="35:32" pos:end="35:32">)</operator><name pos:start="35:33" pos:end="35:36">pict</name></expr></argument>, <argument pos:start="35:39" pos:end="35:45"><expr pos:start="35:39" pos:end="35:45"><name pos:start="35:39" pos:end="35:45">tmp_buf</name></expr></argument>, <argument pos:start="35:48" pos:end="35:61"><expr pos:start="35:48" pos:end="35:61"><name pos:start="35:48" pos:end="35:61"><name pos:start="35:48" pos:end="35:52">avctx</name><operator pos:start="35:53" pos:end="35:54">-&gt;</operator><name pos:start="35:55" pos:end="35:61">pix_fmt</name></name></expr></argument>,

                   <argument pos:start="37:20" pos:end="37:31"><expr pos:start="37:20" pos:end="37:31"><name pos:start="37:20" pos:end="37:31"><name pos:start="37:20" pos:end="37:24">avctx</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:31">width</name></name></expr></argument>, <argument pos:start="37:34" pos:end="37:46"><expr pos:start="37:34" pos:end="37:46"><name pos:start="37:34" pos:end="37:46"><name pos:start="37:34" pos:end="37:38">avctx</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:46">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="147:49"><if pos:start="41:5" pos:end="143:5">if <condition pos:start="41:8" pos:end="41:40">(<expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:13">avctx</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:23">codec_id</name></name> <operator pos:start="41:25" pos:end="41:26">==</operator> <name pos:start="41:28" pos:end="41:39">CODEC_ID_VC9</name></expr>)</condition>

    <block pos:start="43:5" pos:end="143:5">{<block_content pos:start="139:9" pos:end="142:0">

<cpp:if pos:start="45:1" pos:end="45:5">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:5"><literal type="number" pos:start="45:5" pos:end="45:5">0</literal></expr></cpp:if>

	<comment type="line" pos:start="47:9" pos:end="47:27">// search for IDU's</comment>

	<comment type="line" pos:start="49:9" pos:end="49:16">// FIXME</comment>

	uint32_t scp = 0;

	int scs = 0, i = 0;



	while (i &lt; buf_size)

	{

	    for (; i &lt; buf_size &amp;&amp; scp != 0x000001; i++)

		scp = ((scp&lt;&lt;8)|buf[i])&amp;0xffffff;



	    if (scp != 0x000001)

		break; <comment type="line" pos:start="69:24" pos:end="69:31">// eof ?</comment>

	

	    scs = buf[i++];	



	    init_get_bits(gb, buf+i, (buf_size-i)*8);

	

	    switch(scs)

	    {

            case 0x0A: <comment type="line" pos:start="85:24" pos:end="85:42">//Sequence End Code</comment>

                return 0;

            case 0x0B: <comment type="line" pos:start="89:24" pos:end="89:41">//Slice Start Code</comment>

                av_log(avctx, AV_LOG_ERROR, "Slice coding not supported\n");

                return -1;

            case 0x0C: <comment type="line" pos:start="95:24" pos:end="95:41">//Field start code</comment>

                av_log(avctx, AV_LOG_ERROR, "Interlaced coding not supported\n");

                return -1;

            case 0x0D: <comment type="line" pos:start="101:24" pos:end="101:41">//Frame start code</comment>

                break;

            case 0x0E: <comment type="line" pos:start="105:24" pos:end="105:47">//Entry point Start Code</comment>

                if (v-&gt;profile &lt;= MAIN_PROFILE)

                    av_log(avctx, AV_LOG_ERROR,

                           "Found an entry point in profile %i\n", v-&gt;profile);

                advanced_entry_point_process(avctx, gb);

                break;

            case 0x0F: <comment type="line" pos:start="117:24" pos:end="117:51">//Sequence header Start Code</comment>

                decode_sequence_header(avctx, gb);

                break;

            default:

                av_log(avctx, AV_LOG_ERROR,

                       "Unsupported IDU suffix %lX\n", scs);

            }

	    

	    i += get_bits_count(gb)*8;

	}

<cpp:else pos:start="137:1" pos:end="137:5">#<cpp:directive pos:start="137:2" pos:end="137:5">else</cpp:directive></cpp:else>

	<expr_stmt pos:start="139:9" pos:end="142:0"><expr pos:start="139:9" pos:end="139:18"><call pos:start="139:9" pos:end="139:18"><name pos:start="139:9" pos:end="139:16">av_abort</name><argument_list pos:start="139:17" pos:end="139:18">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if>

    <else pos:start="145:5" pos:end="147:49">else<block type="pseudo" pos:start="147:9" pos:end="147:49"><block_content pos:start="147:9" pos:end="147:49">

        <expr_stmt pos:start="147:9" pos:end="147:49"><expr pos:start="147:9" pos:end="147:48"><call pos:start="147:9" pos:end="147:48"><name pos:start="147:9" pos:end="147:21">init_get_bits</name><argument_list pos:start="147:22" pos:end="147:48">(<argument pos:start="147:23" pos:end="147:30"><expr pos:start="147:23" pos:end="147:30"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:30"><name pos:start="147:24" pos:end="147:24">v</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:27">s</name><operator pos:start="147:28" pos:end="147:28">.</operator><name pos:start="147:29" pos:end="147:30">gb</name></name></expr></argument>, <argument pos:start="147:33" pos:end="147:35"><expr pos:start="147:33" pos:end="147:35"><name pos:start="147:33" pos:end="147:35">buf</name></expr></argument>, <argument pos:start="147:38" pos:end="147:47"><expr pos:start="147:38" pos:end="147:47"><name pos:start="147:38" pos:end="147:45">buf_size</name><operator pos:start="147:46" pos:end="147:46">*</operator><literal type="number" pos:start="147:47" pos:end="147:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:27"><expr pos:start="151:5" pos:end="151:26"><name pos:start="151:5" pos:end="151:12"><name pos:start="151:5" pos:end="151:5">s</name><operator pos:start="151:6" pos:end="151:7">-&gt;</operator><name pos:start="151:8" pos:end="151:12">flags</name></name><operator pos:start="151:13" pos:end="151:13">=</operator> <name pos:start="151:15" pos:end="151:26"><name pos:start="151:15" pos:end="151:19">avctx</name><operator pos:start="151:20" pos:end="151:21">-&gt;</operator><name pos:start="151:22" pos:end="151:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:29"><expr pos:start="153:5" pos:end="153:28"><name pos:start="153:5" pos:end="153:13"><name pos:start="153:5" pos:end="153:5">s</name><operator pos:start="153:6" pos:end="153:7">-&gt;</operator><name pos:start="153:8" pos:end="153:13">flags2</name></name><operator pos:start="153:14" pos:end="153:14">=</operator> <name pos:start="153:16" pos:end="153:28"><name pos:start="153:16" pos:end="153:20">avctx</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:28">flags2</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="159:5" pos:end="179:5"><if pos:start="159:5" pos:end="179:5">if <condition pos:start="159:8" pos:end="159:22">(<expr pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:16">buf_size</name> <operator pos:start="159:18" pos:end="159:19">==</operator> <literal type="number" pos:start="159:21" pos:end="159:21">0</literal></expr>)</condition> <block pos:start="159:24" pos:end="179:5">{<block_content pos:start="163:9" pos:end="177:17">

        <comment type="block" pos:start="161:9" pos:end="161:43">/* special case for last picture */</comment>

        <if_stmt pos:start="163:9" pos:end="173:9"><if pos:start="163:9" pos:end="173:9">if <condition pos:start="163:12" pos:end="163:51">(<expr pos:start="163:13" pos:end="163:50"><name pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:24">low_delay</name></name><operator pos:start="163:25" pos:end="163:26">==</operator><literal type="number" pos:start="163:27" pos:end="163:27">0</literal> <operator pos:start="163:29" pos:end="163:30">&amp;&amp;</operator> <name pos:start="163:32" pos:end="163:50"><name pos:start="163:32" pos:end="163:32">s</name><operator pos:start="163:33" pos:end="163:34">-&gt;</operator><name pos:start="163:35" pos:end="163:50">next_picture_ptr</name></name></expr>)</condition> <block pos:start="163:53" pos:end="173:9">{<block_content pos:start="165:13" pos:end="171:41">

            <expr_stmt pos:start="165:13" pos:end="165:50"><expr pos:start="165:13" pos:end="165:49"><operator pos:start="165:13" pos:end="165:13">*</operator><name pos:start="165:14" pos:end="165:17">pict</name><operator pos:start="165:18" pos:end="165:18">=</operator> <operator pos:start="165:20" pos:end="165:20">*</operator><operator pos:start="165:21" pos:end="165:21">(</operator><name pos:start="165:22" pos:end="165:28">AVFrame</name><operator pos:start="165:29" pos:end="165:29">*</operator><operator pos:start="165:30" pos:end="165:30">)</operator><name pos:start="165:31" pos:end="165:49"><name pos:start="165:31" pos:end="165:31">s</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:49">next_picture_ptr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:38"><expr pos:start="167:13" pos:end="167:37"><name pos:start="167:13" pos:end="167:31"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:31">next_picture_ptr</name></name><operator pos:start="167:32" pos:end="167:32">=</operator> <name pos:start="167:34" pos:end="167:37">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="171:13" pos:end="171:41"><expr pos:start="171:13" pos:end="171:40"><operator pos:start="171:13" pos:end="171:13">*</operator><name pos:start="171:14" pos:end="171:22">data_size</name> <operator pos:start="171:24" pos:end="171:24">=</operator> <sizeof pos:start="171:26" pos:end="171:40">sizeof<argument_list pos:start="171:32" pos:end="171:40">(<argument pos:start="171:33" pos:end="171:39"><expr pos:start="171:33" pos:end="171:39"><name pos:start="171:33" pos:end="171:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="177:9" pos:end="177:17">return <expr pos:start="177:16" pos:end="177:16"><literal type="number" pos:start="177:16" pos:end="177:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="183:5" pos:end="183:44">//No IDU - we mimic ff_h263_decode_frame</comment>

    <expr_stmt pos:start="185:5" pos:end="185:31"><expr pos:start="185:5" pos:end="185:30"><name pos:start="185:5" pos:end="185:28"><name pos:start="185:5" pos:end="185:5">s</name><operator pos:start="185:6" pos:end="185:7">-&gt;</operator><name pos:start="185:8" pos:end="185:28">bitstream_buffer_size</name></name><operator pos:start="185:29" pos:end="185:29">=</operator><literal type="number" pos:start="185:30" pos:end="185:30">0</literal></expr>;</expr_stmt>

        

    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:32">(<expr pos:start="189:9" pos:end="189:31"><operator pos:start="189:9" pos:end="189:9">!</operator><name pos:start="189:10" pos:end="189:31"><name pos:start="189:10" pos:end="189:10">s</name><operator pos:start="189:11" pos:end="189:12">-&gt;</operator><name pos:start="189:13" pos:end="189:31">context_initialized</name></name></expr>)</condition> <block pos:start="189:34" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:22">

        <if_stmt pos:start="191:9" pos:end="193:22"><if pos:start="191:9" pos:end="193:22">if <condition pos:start="191:12" pos:end="191:35">(<expr pos:start="191:13" pos:end="191:34"><call pos:start="191:13" pos:end="191:30"><name pos:start="191:13" pos:end="191:27">MPV_common_init</name><argument_list pos:start="191:28" pos:end="191:30">(<argument pos:start="191:29" pos:end="191:29"><expr pos:start="191:29" pos:end="191:29"><name pos:start="191:29" pos:end="191:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="191:32" pos:end="191:32">&lt;</operator> <literal type="number" pos:start="191:34" pos:end="191:34">0</literal></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:22"><block_content pos:start="193:13" pos:end="193:22"> <comment type="line" pos:start="191:37" pos:end="191:93">//we need the idct permutaton for reading a custom matrix</comment>

            <return pos:start="193:13" pos:end="193:22">return <expr pos:start="193:20" pos:end="193:21"><operator pos:start="193:20" pos:end="193:20">-</operator><literal type="number" pos:start="193:21" pos:end="193:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    

    <comment type="line" pos:start="199:5" pos:end="199:108">//we need to set current_picture_ptr before reading the header, otherwise we cant store anyting im there</comment>

    <if_stmt pos:start="201:5" pos:end="208:0"><if pos:start="201:5" pos:end="208:0">if<condition pos:start="201:7" pos:end="201:71">(<expr pos:start="201:8" pos:end="201:70"><name pos:start="201:8" pos:end="201:29"><name pos:start="201:8" pos:end="201:8">s</name><operator pos:start="201:9" pos:end="201:10">-&gt;</operator><name pos:start="201:11" pos:end="201:29">current_picture_ptr</name></name><operator pos:start="201:30" pos:end="201:31">==</operator><name pos:start="201:32" pos:end="201:35">NULL</name> <operator pos:start="201:37" pos:end="201:38">||</operator> <name pos:start="201:40" pos:end="201:70"><name pos:start="201:40" pos:end="201:40">s</name><operator pos:start="201:41" pos:end="201:42">-&gt;</operator><name pos:start="201:43" pos:end="201:61">current_picture_ptr</name><operator pos:start="201:62" pos:end="201:63">-&gt;</operator><name pos:start="201:64" pos:end="201:67">data</name><index pos:start="201:68" pos:end="201:70">[<expr pos:start="201:69" pos:end="201:69"><literal type="number" pos:start="201:69" pos:end="201:69">0</literal></expr>]</index></name></expr>)</condition><block pos:start="201:72" pos:end="208:0">{<block_content pos:start="203:9" pos:end="203:74">

        <expr_stmt pos:start="203:9" pos:end="203:74"><expr pos:start="203:9" pos:end="203:73"><name pos:start="203:9" pos:end="203:30"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:30">current_picture_ptr</name></name><operator pos:start="203:31" pos:end="203:31">=</operator> <operator pos:start="203:33" pos:end="203:33">&amp;</operator><name pos:start="203:34" pos:end="203:73"><name pos:start="203:34" pos:end="203:34">s</name><operator pos:start="203:35" pos:end="203:36">-&gt;</operator><name pos:start="203:37" pos:end="203:43">picture</name><index pos:start="203:44" pos:end="203:73">[<expr pos:start="203:45" pos:end="203:72"><call pos:start="203:45" pos:end="203:72"><name pos:start="203:45" pos:end="203:66">ff_find_unused_picture</name><argument_list pos:start="203:67" pos:end="203:72">(<argument pos:start="203:68" pos:end="203:68"><expr pos:start="203:68" pos:end="203:68"><name pos:start="203:68" pos:end="203:68">s</name></expr></argument>, <argument pos:start="203:71" pos:end="203:71"><expr pos:start="203:71" pos:end="203:71"><literal type="number" pos:start="203:71" pos:end="203:71">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="207:1" pos:end="207:24">#<cpp:directive pos:start="207:2" pos:end="207:3">if</cpp:directive> <expr pos:start="207:5" pos:end="207:24"><name pos:start="207:5" pos:end="207:24">HAS_ADVANCED_PROFILE</name></expr></cpp:if>

    <if_stmt pos:start="209:5" pos:end="217:55"><if pos:start="209:5" pos:end="211:55">if <condition pos:start="209:8" pos:end="209:34">(<expr pos:start="209:9" pos:end="209:33"><name pos:start="209:9" pos:end="209:18"><name pos:start="209:9" pos:end="209:9">v</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:18">profile</name></name> <operator pos:start="209:20" pos:end="209:20">&gt;</operator> <name pos:start="209:22" pos:end="209:33">PROFILE_MAIN</name></expr>)</condition><block type="pseudo" pos:start="211:9" pos:end="211:55"><block_content pos:start="211:9" pos:end="211:55">

        <expr_stmt pos:start="211:9" pos:end="211:55"><expr pos:start="211:9" pos:end="211:54"><name pos:start="211:9" pos:end="211:11">ret</name><operator pos:start="211:12" pos:end="211:12">=</operator> <call pos:start="211:14" pos:end="211:54"><name pos:start="211:14" pos:end="211:51">advanced_decode_picture_primary_header</name><argument_list pos:start="211:52" pos:end="211:54">(<argument pos:start="211:53" pos:end="211:53"><expr pos:start="211:53" pos:end="211:53"><name pos:start="211:53" pos:end="211:53">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="213:5" pos:end="217:55">else<block type="pseudo" pos:start="217:9" pos:end="217:55"><block_content pos:start="217:9" pos:end="217:55">

<cpp:endif pos:start="215:1" pos:end="215:6">#<cpp:directive pos:start="215:2" pos:end="215:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="217:9" pos:end="217:55"><expr pos:start="217:9" pos:end="217:54"><name pos:start="217:9" pos:end="217:11">ret</name><operator pos:start="217:12" pos:end="217:12">=</operator> <call pos:start="217:14" pos:end="217:54"><name pos:start="217:14" pos:end="217:51">standard_decode_picture_primary_header</name><argument_list pos:start="217:52" pos:end="217:54">(<argument pos:start="217:53" pos:end="217:53"><expr pos:start="217:53" pos:end="217:53"><name pos:start="217:53" pos:end="217:53">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="219:5" pos:end="219:45"><if pos:start="219:5" pos:end="219:45">if <condition pos:start="219:8" pos:end="219:28">(<expr pos:start="219:9" pos:end="219:27"><name pos:start="219:9" pos:end="219:11">ret</name> <operator pos:start="219:13" pos:end="219:14">==</operator> <name pos:start="219:16" pos:end="219:27">FRAME_SKIPED</name></expr>)</condition><block type="pseudo" pos:start="219:30" pos:end="219:45"><block_content pos:start="219:30" pos:end="219:45"> <return pos:start="219:30" pos:end="219:45">return <expr pos:start="219:37" pos:end="219:44"><name pos:start="219:37" pos:end="219:44">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="221:5" pos:end="221:41">/* skip if the header was thrashed */</comment>

    <if_stmt pos:start="223:5" pos:end="229:5"><if pos:start="223:5" pos:end="229:5">if <condition pos:start="223:8" pos:end="223:16">(<expr pos:start="223:9" pos:end="223:15"><name pos:start="223:9" pos:end="223:11">ret</name> <operator pos:start="223:13" pos:end="223:13">&lt;</operator> <literal type="number" pos:start="223:15" pos:end="223:15">0</literal></expr>)</condition><block pos:start="223:17" pos:end="229:5">{<block_content pos:start="225:9" pos:end="227:18">

        <expr_stmt pos:start="225:9" pos:end="225:59"><expr pos:start="225:9" pos:end="225:58"><call pos:start="225:9" pos:end="225:58"><name pos:start="225:9" pos:end="225:14">av_log</name><argument_list pos:start="225:15" pos:end="225:58">(<argument pos:start="225:16" pos:end="225:23"><expr pos:start="225:16" pos:end="225:23"><name pos:start="225:16" pos:end="225:23"><name pos:start="225:16" pos:end="225:16">s</name><operator pos:start="225:17" pos:end="225:18">-&gt;</operator><name pos:start="225:19" pos:end="225:23">avctx</name></name></expr></argument>, <argument pos:start="225:26" pos:end="225:37"><expr pos:start="225:26" pos:end="225:37"><name pos:start="225:26" pos:end="225:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="225:40" pos:end="225:57"><expr pos:start="225:40" pos:end="225:57"><literal type="string" pos:start="225:40" pos:end="225:57">"header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="227:9" pos:end="227:18">return <expr pos:start="227:16" pos:end="227:17"><operator pos:start="227:16" pos:end="227:16">-</operator><literal type="number" pos:start="227:17" pos:end="227:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="233:5" pos:end="233:47">//No bug workaround yet, no DCT conformance</comment>



    <comment type="line" pos:start="237:5" pos:end="237:35">//WMV9 does have resized images</comment>

    <if_stmt pos:start="239:5" pos:end="243:5"><if pos:start="239:5" pos:end="243:5">if <condition pos:start="239:8" pos:end="239:50">(<expr pos:start="239:9" pos:end="239:49"><name pos:start="239:9" pos:end="239:18"><name pos:start="239:9" pos:end="239:9">v</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:18">profile</name></name> <operator pos:start="239:20" pos:end="239:21">&lt;=</operator> <name pos:start="239:23" pos:end="239:34">PROFILE_MAIN</name> <operator pos:start="239:36" pos:end="239:37">&amp;&amp;</operator> <name pos:start="239:39" pos:end="239:49"><name pos:start="239:39" pos:end="239:39">v</name><operator pos:start="239:40" pos:end="239:41">-&gt;</operator><name pos:start="239:42" pos:end="239:49">multires</name></name></expr>)</condition><block pos:start="239:51" pos:end="243:5">{<block_content>

        <comment type="line" pos:start="241:9" pos:end="241:69">//Parse context stuff in here, don't know how appliable it is</comment>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="245:5" pos:end="245:43">//Not sure about context initialization</comment>



    <comment type="line" pos:start="249:5" pos:end="249:22">// for hurry_up==5</comment>

    <expr_stmt pos:start="251:5" pos:end="251:47"><expr pos:start="251:5" pos:end="251:46"><name pos:start="251:5" pos:end="251:32"><name pos:start="251:5" pos:end="251:5">s</name><operator pos:start="251:6" pos:end="251:7">-&gt;</operator><name pos:start="251:8" pos:end="251:22">current_picture</name><operator pos:start="251:23" pos:end="251:23">.</operator><name pos:start="251:24" pos:end="251:32">pict_type</name></name><operator pos:start="251:33" pos:end="251:33">=</operator> <name pos:start="251:35" pos:end="251:46"><name pos:start="251:35" pos:end="251:35">s</name><operator pos:start="251:36" pos:end="251:37">-&gt;</operator><name pos:start="251:38" pos:end="251:46">pict_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:57"><expr pos:start="253:5" pos:end="253:56"><name pos:start="253:5" pos:end="253:32"><name pos:start="253:5" pos:end="253:5">s</name><operator pos:start="253:6" pos:end="253:7">-&gt;</operator><name pos:start="253:8" pos:end="253:22">current_picture</name><operator pos:start="253:23" pos:end="253:23">.</operator><name pos:start="253:24" pos:end="253:32">key_frame</name></name><operator pos:start="253:33" pos:end="253:33">=</operator> <name pos:start="253:35" pos:end="253:46"><name pos:start="253:35" pos:end="253:35">s</name><operator pos:start="253:36" pos:end="253:37">-&gt;</operator><name pos:start="253:38" pos:end="253:46">pict_type</name></name> <operator pos:start="253:48" pos:end="253:49">==</operator> <name pos:start="253:51" pos:end="253:56">I_TYPE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="257:5" pos:end="257:56">/* skip b frames if we dont have reference frames */</comment>

    <if_stmt pos:start="259:5" pos:end="261:24"><if pos:start="259:5" pos:end="261:24">if<condition pos:start="259:7" pos:end="259:74">(<expr pos:start="259:8" pos:end="259:73"><name pos:start="259:8" pos:end="259:26"><name pos:start="259:8" pos:end="259:8">s</name><operator pos:start="259:9" pos:end="259:10">-&gt;</operator><name pos:start="259:11" pos:end="259:26">last_picture_ptr</name></name><operator pos:start="259:27" pos:end="259:28">==</operator><name pos:start="259:29" pos:end="259:32">NULL</name> <operator pos:start="259:34" pos:end="259:35">&amp;&amp;</operator> <operator pos:start="259:37" pos:end="259:37">(</operator><name pos:start="259:38" pos:end="259:49"><name pos:start="259:38" pos:end="259:38">s</name><operator pos:start="259:39" pos:end="259:40">-&gt;</operator><name pos:start="259:41" pos:end="259:49">pict_type</name></name><operator pos:start="259:50" pos:end="259:51">==</operator><name pos:start="259:52" pos:end="259:57">B_TYPE</name> <operator pos:start="259:59" pos:end="259:60">||</operator> <name pos:start="259:62" pos:end="259:72"><name pos:start="259:62" pos:end="259:62">s</name><operator pos:start="259:63" pos:end="259:64">-&gt;</operator><name pos:start="259:65" pos:end="259:72">dropable</name></name><operator pos:start="259:73" pos:end="259:73">)</operator></expr>)</condition><block type="pseudo" pos:start="261:9" pos:end="261:24"><block_content pos:start="261:9" pos:end="261:24">

        <return pos:start="261:9" pos:end="261:24">return <expr pos:start="261:16" pos:end="261:23"><name pos:start="261:16" pos:end="261:23">buf_size</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="261:26" pos:end="261:63">//FIXME simulating all buffer consumed</comment>

    <comment type="block" pos:start="263:5" pos:end="263:44">/* skip b frames if we are in a hurry */</comment>

    <if_stmt pos:start="265:5" pos:end="267:24"><if pos:start="265:5" pos:end="267:24">if<condition pos:start="265:7" pos:end="265:47">(<expr pos:start="265:8" pos:end="265:46"><name pos:start="265:8" pos:end="265:22"><name pos:start="265:8" pos:end="265:12">avctx</name><operator pos:start="265:13" pos:end="265:14">-&gt;</operator><name pos:start="265:15" pos:end="265:22">hurry_up</name></name> <operator pos:start="265:24" pos:end="265:25">&amp;&amp;</operator> <name pos:start="265:27" pos:end="265:38"><name pos:start="265:27" pos:end="265:27">s</name><operator pos:start="265:28" pos:end="265:29">-&gt;</operator><name pos:start="265:30" pos:end="265:38">pict_type</name></name><operator pos:start="265:39" pos:end="265:40">==</operator><name pos:start="265:41" pos:end="265:46">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="267:9" pos:end="267:24"><block_content pos:start="267:9" pos:end="267:24">

        <return pos:start="267:9" pos:end="267:24">return <expr pos:start="267:16" pos:end="267:23"><name pos:start="267:16" pos:end="267:23">buf_size</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="267:26" pos:end="267:63">//FIXME simulating all buffer consumed</comment>

    <comment type="block" pos:start="269:5" pos:end="269:49">/* skip everything if we are in a hurry&gt;=5 */</comment>

    <if_stmt pos:start="271:5" pos:end="273:24"><if pos:start="271:5" pos:end="273:24">if<condition pos:start="271:7" pos:end="271:26">(<expr pos:start="271:8" pos:end="271:25"><name pos:start="271:8" pos:end="271:22"><name pos:start="271:8" pos:end="271:12">avctx</name><operator pos:start="271:13" pos:end="271:14">-&gt;</operator><name pos:start="271:15" pos:end="271:22">hurry_up</name></name><operator pos:start="271:23" pos:end="271:24">&gt;=</operator><literal type="number" pos:start="271:25" pos:end="271:25">5</literal></expr>)</condition><block type="pseudo" pos:start="273:9" pos:end="273:24"><block_content pos:start="273:9" pos:end="273:24">

        <return pos:start="273:9" pos:end="273:24">return <expr pos:start="273:16" pos:end="273:23"><name pos:start="273:16" pos:end="273:23">buf_size</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="273:26" pos:end="273:63">//FIXME simulating all buffer consumed</comment>

    

    <if_stmt pos:start="277:5" pos:end="287:5"><if pos:start="277:5" pos:end="287:5">if<condition pos:start="277:7" pos:end="277:31">(<expr pos:start="277:8" pos:end="277:30"><name pos:start="277:8" pos:end="277:30"><name pos:start="277:8" pos:end="277:8">s</name><operator pos:start="277:9" pos:end="277:10">-&gt;</operator><name pos:start="277:11" pos:end="277:30">next_p_frame_damaged</name></name></expr>)</condition><block pos:start="277:32" pos:end="287:5">{<block_content pos:start="279:9" pos:end="285:38">

        <if_stmt pos:start="279:9" pos:end="285:38"><if pos:start="279:9" pos:end="281:28">if<condition pos:start="279:11" pos:end="279:32">(<expr pos:start="279:12" pos:end="279:31"><name pos:start="279:12" pos:end="279:23"><name pos:start="279:12" pos:end="279:12">s</name><operator pos:start="279:13" pos:end="279:14">-&gt;</operator><name pos:start="279:15" pos:end="279:23">pict_type</name></name><operator pos:start="279:24" pos:end="279:25">==</operator><name pos:start="279:26" pos:end="279:31">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="281:13" pos:end="281:28"><block_content pos:start="281:13" pos:end="281:28">

            <return pos:start="281:13" pos:end="281:28">return <expr pos:start="281:20" pos:end="281:27"><name pos:start="281:20" pos:end="281:27">buf_size</name></expr>;</return></block_content></block></if> <comment type="line" pos:start="281:30" pos:end="281:67">//FIXME simulating all buffer consumed</comment>

        <else pos:start="283:9" pos:end="285:38">else<block type="pseudo" pos:start="285:13" pos:end="285:38"><block_content pos:start="285:13" pos:end="285:38">

            <expr_stmt pos:start="285:13" pos:end="285:38"><expr pos:start="285:13" pos:end="285:37"><name pos:start="285:13" pos:end="285:35"><name pos:start="285:13" pos:end="285:13">s</name><operator pos:start="285:14" pos:end="285:15">-&gt;</operator><name pos:start="285:16" pos:end="285:35">next_p_frame_damaged</name></name><operator pos:start="285:36" pos:end="285:36">=</operator><literal type="number" pos:start="285:37" pos:end="285:37">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="291:5" pos:end="293:18"><if pos:start="291:5" pos:end="293:18">if<condition pos:start="291:7" pos:end="291:37">(<expr pos:start="291:8" pos:end="291:36"><call pos:start="291:8" pos:end="291:32"><name pos:start="291:8" pos:end="291:22">MPV_frame_start</name><argument_list pos:start="291:23" pos:end="291:32">(<argument pos:start="291:24" pos:end="291:24"><expr pos:start="291:24" pos:end="291:24"><name pos:start="291:24" pos:end="291:24">s</name></expr></argument>, <argument pos:start="291:27" pos:end="291:31"><expr pos:start="291:27" pos:end="291:31"><name pos:start="291:27" pos:end="291:31">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="291:34" pos:end="291:34">&lt;</operator> <literal type="number" pos:start="291:36" pos:end="291:36">0</literal></expr>)</condition><block type="pseudo" pos:start="293:9" pos:end="293:18"><block_content pos:start="293:9" pos:end="293:18">

        <return pos:start="293:9" pos:end="293:18">return <expr pos:start="293:16" pos:end="293:17"><operator pos:start="293:16" pos:end="293:16">-</operator><literal type="number" pos:start="293:17" pos:end="293:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="297:5" pos:end="304:0"><expr pos:start="297:5" pos:end="297:24"><call pos:start="297:5" pos:end="297:24"><name pos:start="297:5" pos:end="297:21">ff_er_frame_start</name><argument_list pos:start="297:22" pos:end="297:24">(<argument pos:start="297:23" pos:end="297:23"><expr pos:start="297:23" pos:end="297:23"><name pos:start="297:23" pos:end="297:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="301:5" pos:end="301:40">//wmv9 may or may not have skip bits</comment>

<cpp:if pos:start="303:1" pos:end="303:24">#<cpp:directive pos:start="303:2" pos:end="303:3">if</cpp:directive> <expr pos:start="303:5" pos:end="303:24"><name pos:start="303:5" pos:end="303:24">HAS_ADVANCED_PROFILE</name></expr></cpp:if>

    <if_stmt pos:start="305:5" pos:end="313:58"><if pos:start="305:5" pos:end="307:57">if <condition pos:start="305:8" pos:end="305:34">(<expr pos:start="305:9" pos:end="305:33"><name pos:start="305:9" pos:end="305:18"><name pos:start="305:9" pos:end="305:9">v</name><operator pos:start="305:10" pos:end="305:11">-&gt;</operator><name pos:start="305:12" pos:end="305:18">profile</name></name> <operator pos:start="305:20" pos:end="305:20">&gt;</operator> <name pos:start="305:22" pos:end="305:33">PROFILE_MAIN</name></expr>)</condition><block type="pseudo" pos:start="307:9" pos:end="307:57"><block_content pos:start="307:9" pos:end="307:57">

        <expr_stmt pos:start="307:9" pos:end="307:57"><expr pos:start="307:9" pos:end="307:56"><name pos:start="307:9" pos:end="307:11">ret</name><operator pos:start="307:12" pos:end="307:12">=</operator> <call pos:start="307:14" pos:end="307:56"><name pos:start="307:14" pos:end="307:53">advanced_decode_picture_secondary_header</name><argument_list pos:start="307:54" pos:end="307:56">(<argument pos:start="307:55" pos:end="307:55"><expr pos:start="307:55" pos:end="307:55"><name pos:start="307:55" pos:end="307:55">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="309:5" pos:end="313:58">else<block type="pseudo" pos:start="313:9" pos:end="313:58"><block_content pos:start="313:9" pos:end="313:58">

<cpp:endif pos:start="311:1" pos:end="311:6">#<cpp:directive pos:start="311:2" pos:end="311:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="313:9" pos:end="313:58"><expr pos:start="313:9" pos:end="313:57"><name pos:start="313:9" pos:end="313:11">ret</name> <operator pos:start="313:13" pos:end="313:13">=</operator> <call pos:start="313:15" pos:end="313:57"><name pos:start="313:15" pos:end="313:54">standard_decode_picture_secondary_header</name><argument_list pos:start="313:55" pos:end="313:57">(<argument pos:start="313:56" pos:end="313:56"><expr pos:start="313:56" pos:end="313:56"><name pos:start="313:56" pos:end="313:56">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="315:5" pos:end="322:0"><if pos:start="315:5" pos:end="322:0">if <condition pos:start="315:8" pos:end="315:14">(<expr pos:start="315:9" pos:end="315:13"><name pos:start="315:9" pos:end="315:11">ret</name><operator pos:start="315:12" pos:end="315:12">&lt;</operator><literal type="number" pos:start="315:13" pos:end="315:13">0</literal></expr>)</condition><block type="pseudo" pos:start="315:16" pos:end="322:0"><block_content pos:start="315:16" pos:end="322:0"> <return pos:start="315:16" pos:end="322:0">return <expr pos:start="315:23" pos:end="315:34"><name pos:start="315:23" pos:end="315:34">FRAME_SKIPED</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="315:37" pos:end="315:61">//FIXME Non fatal for now</comment>



    <comment type="line" pos:start="319:5" pos:end="319:51">//We consider the image coded in only one slice</comment>

<cpp:if pos:start="321:1" pos:end="321:24">#<cpp:directive pos:start="321:2" pos:end="321:3">if</cpp:directive> <expr pos:start="321:5" pos:end="321:24"><name pos:start="321:5" pos:end="321:24">HAS_ADVANCED_PROFILE</name></expr></cpp:if>

    <if_stmt pos:start="323:5" pos:end="371:5"><if pos:start="323:5" pos:end="345:5">if <condition pos:start="323:8" pos:end="323:34">(<expr pos:start="323:9" pos:end="323:33"><name pos:start="323:9" pos:end="323:18"><name pos:start="323:9" pos:end="323:9">v</name><operator pos:start="323:10" pos:end="323:11">-&gt;</operator><name pos:start="323:12" pos:end="323:18">profile</name></name> <operator pos:start="323:20" pos:end="323:20">&gt;</operator> <name pos:start="323:22" pos:end="323:33">PROFILE_MAIN</name></expr>)</condition>

    <block pos:start="325:5" pos:end="345:5">{<block_content pos:start="327:9" pos:end="343:49">

        <switch pos:start="327:9" pos:end="341:9">switch<condition pos:start="327:15" pos:end="327:28">(<expr pos:start="327:16" pos:end="327:27"><name pos:start="327:16" pos:end="327:27"><name pos:start="327:16" pos:end="327:16">s</name><operator pos:start="327:17" pos:end="327:18">-&gt;</operator><name pos:start="327:19" pos:end="327:27">pict_type</name></name></expr>)</condition>

        <block pos:start="329:9" pos:end="341:9">{<block_content pos:start="331:13" pos:end="339:40">

            <case pos:start="331:13" pos:end="331:24">case <expr pos:start="331:18" pos:end="331:23"><name pos:start="331:18" pos:end="331:23">I_TYPE</name></expr>:</case> <expr_stmt pos:start="331:26" pos:end="331:56"><expr pos:start="331:26" pos:end="331:55"><name pos:start="331:26" pos:end="331:28">ret</name> <operator pos:start="331:30" pos:end="331:30">=</operator> <call pos:start="331:32" pos:end="331:55"><name pos:start="331:32" pos:end="331:52">advanced_decode_i_mbs</name><argument_list pos:start="331:53" pos:end="331:55">(<argument pos:start="331:54" pos:end="331:54"><expr pos:start="331:54" pos:end="331:54"><name pos:start="331:54" pos:end="331:54">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="331:58" pos:end="331:63">break;</break>

            <case pos:start="333:13" pos:end="333:24">case <expr pos:start="333:18" pos:end="333:23"><name pos:start="333:18" pos:end="333:23">P_TYPE</name></expr>:</case> <expr_stmt pos:start="333:26" pos:end="333:47"><expr pos:start="333:26" pos:end="333:46"><name pos:start="333:26" pos:end="333:28">ret</name> <operator pos:start="333:30" pos:end="333:30">=</operator> <call pos:start="333:32" pos:end="333:46"><name pos:start="333:32" pos:end="333:43">decode_p_mbs</name><argument_list pos:start="333:44" pos:end="333:46">(<argument pos:start="333:45" pos:end="333:45"><expr pos:start="333:45" pos:end="333:45"><name pos:start="333:45" pos:end="333:45">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="333:49" pos:end="333:54">break;</break>

            <case pos:start="335:13" pos:end="335:24">case <expr pos:start="335:18" pos:end="335:23"><name pos:start="335:18" pos:end="335:23">B_TYPE</name></expr>:</case>

            <case pos:start="337:13" pos:end="337:25">case <expr pos:start="337:18" pos:end="337:24"><name pos:start="337:18" pos:end="337:24">BI_TYPE</name></expr>:</case> <expr_stmt pos:start="337:27" pos:end="337:48"><expr pos:start="337:27" pos:end="337:47"><name pos:start="337:27" pos:end="337:29">ret</name> <operator pos:start="337:31" pos:end="337:31">=</operator> <call pos:start="337:33" pos:end="337:47"><name pos:start="337:33" pos:end="337:44">decode_b_mbs</name><argument_list pos:start="337:45" pos:end="337:47">(<argument pos:start="337:46" pos:end="337:46"><expr pos:start="337:46" pos:end="337:46"><name pos:start="337:46" pos:end="337:46">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="337:50" pos:end="337:55">break;</break>

            <default pos:start="339:13" pos:end="339:20">default:</default> <expr_stmt pos:start="339:22" pos:end="339:40"><expr pos:start="339:22" pos:end="339:39"><name pos:start="339:22" pos:end="339:24">ret</name> <operator pos:start="339:26" pos:end="339:26">=</operator> <name pos:start="339:28" pos:end="339:39">FRAME_SKIPED</name></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="343:9" pos:end="343:49"><if pos:start="343:9" pos:end="343:49">if <condition pos:start="343:12" pos:end="343:32">(<expr pos:start="343:13" pos:end="343:31"><name pos:start="343:13" pos:end="343:15">ret</name> <operator pos:start="343:17" pos:end="343:18">==</operator> <name pos:start="343:20" pos:end="343:31">FRAME_SKIPED</name></expr>)</condition><block type="pseudo" pos:start="343:34" pos:end="343:49"><block_content pos:start="343:34" pos:end="343:49"> <return pos:start="343:34" pos:end="343:49">return <expr pos:start="343:41" pos:end="343:48"><name pos:start="343:41" pos:end="343:48">buf_size</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="343:51" pos:end="343:78">//We ignore for now failures</comment>

    </block_content>}</block></if>

    <else pos:start="347:5" pos:end="371:5">else

<cpp:endif pos:start="349:1" pos:end="349:6">#<cpp:directive pos:start="349:2" pos:end="349:6">endif</cpp:directive></cpp:endif>

    <block pos:start="351:5" pos:end="371:5">{<block_content pos:start="353:9" pos:end="369:49">

        <switch pos:start="353:9" pos:end="367:9">switch<condition pos:start="353:15" pos:end="353:28">(<expr pos:start="353:16" pos:end="353:27"><name pos:start="353:16" pos:end="353:27"><name pos:start="353:16" pos:end="353:16">s</name><operator pos:start="353:17" pos:end="353:18">-&gt;</operator><name pos:start="353:19" pos:end="353:27">pict_type</name></name></expr>)</condition>

        <block pos:start="355:9" pos:end="367:9">{<block_content pos:start="357:13" pos:end="365:40">

            <case pos:start="357:13" pos:end="357:24">case <expr pos:start="357:18" pos:end="357:23"><name pos:start="357:18" pos:end="357:23">I_TYPE</name></expr>:</case> <expr_stmt pos:start="357:26" pos:end="357:56"><expr pos:start="357:26" pos:end="357:55"><name pos:start="357:26" pos:end="357:28">ret</name> <operator pos:start="357:30" pos:end="357:30">=</operator> <call pos:start="357:32" pos:end="357:55"><name pos:start="357:32" pos:end="357:52">standard_decode_i_mbs</name><argument_list pos:start="357:53" pos:end="357:55">(<argument pos:start="357:54" pos:end="357:54"><expr pos:start="357:54" pos:end="357:54"><name pos:start="357:54" pos:end="357:54">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="357:58" pos:end="357:63">break;</break>

            <case pos:start="359:13" pos:end="359:24">case <expr pos:start="359:18" pos:end="359:23"><name pos:start="359:18" pos:end="359:23">P_TYPE</name></expr>:</case> <expr_stmt pos:start="359:26" pos:end="359:47"><expr pos:start="359:26" pos:end="359:46"><name pos:start="359:26" pos:end="359:28">ret</name> <operator pos:start="359:30" pos:end="359:30">=</operator> <call pos:start="359:32" pos:end="359:46"><name pos:start="359:32" pos:end="359:43">decode_p_mbs</name><argument_list pos:start="359:44" pos:end="359:46">(<argument pos:start="359:45" pos:end="359:45"><expr pos:start="359:45" pos:end="359:45"><name pos:start="359:45" pos:end="359:45">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="359:49" pos:end="359:54">break;</break>

            <case pos:start="361:13" pos:end="361:24">case <expr pos:start="361:18" pos:end="361:23"><name pos:start="361:18" pos:end="361:23">B_TYPE</name></expr>:</case>

            <case pos:start="363:13" pos:end="363:25">case <expr pos:start="363:18" pos:end="363:24"><name pos:start="363:18" pos:end="363:24">BI_TYPE</name></expr>:</case> <expr_stmt pos:start="363:27" pos:end="363:48"><expr pos:start="363:27" pos:end="363:47"><name pos:start="363:27" pos:end="363:29">ret</name> <operator pos:start="363:31" pos:end="363:31">=</operator> <call pos:start="363:33" pos:end="363:47"><name pos:start="363:33" pos:end="363:44">decode_b_mbs</name><argument_list pos:start="363:45" pos:end="363:47">(<argument pos:start="363:46" pos:end="363:46"><expr pos:start="363:46" pos:end="363:46"><name pos:start="363:46" pos:end="363:46">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="363:50" pos:end="363:55">break;</break>

            <default pos:start="365:13" pos:end="365:20">default:</default> <expr_stmt pos:start="365:22" pos:end="365:40"><expr pos:start="365:22" pos:end="365:39"><name pos:start="365:22" pos:end="365:24">ret</name> <operator pos:start="365:26" pos:end="365:26">=</operator> <name pos:start="365:28" pos:end="365:39">FRAME_SKIPED</name></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="369:9" pos:end="369:49"><if pos:start="369:9" pos:end="369:49">if <condition pos:start="369:12" pos:end="369:32">(<expr pos:start="369:13" pos:end="369:31"><name pos:start="369:13" pos:end="369:15">ret</name> <operator pos:start="369:17" pos:end="369:18">==</operator> <name pos:start="369:20" pos:end="369:31">FRAME_SKIPED</name></expr>)</condition><block type="pseudo" pos:start="369:34" pos:end="369:49"><block_content pos:start="369:34" pos:end="369:49"> <return pos:start="369:34" pos:end="369:49">return <expr pos:start="369:41" pos:end="369:48"><name pos:start="369:41" pos:end="369:48">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="375:5" pos:end="375:23"><expr pos:start="375:5" pos:end="375:22"><call pos:start="375:5" pos:end="375:22"><name pos:start="375:5" pos:end="375:19">ff_er_frame_end</name><argument_list pos:start="375:20" pos:end="375:22">(<argument pos:start="375:21" pos:end="375:21"><expr pos:start="375:21" pos:end="375:21"><name pos:start="375:21" pos:end="375:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="379:5" pos:end="379:21"><expr pos:start="379:5" pos:end="379:20"><call pos:start="379:5" pos:end="379:20"><name pos:start="379:5" pos:end="379:17">MPV_frame_end</name><argument_list pos:start="379:18" pos:end="379:20">(<argument pos:start="379:19" pos:end="379:19"><expr pos:start="379:19" pos:end="379:19"><name pos:start="379:19" pos:end="379:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="383:5" pos:end="383:78"><expr pos:start="383:5" pos:end="383:77"><call pos:start="383:5" pos:end="383:77"><name pos:start="383:5" pos:end="383:10">assert</name><argument_list pos:start="383:11" pos:end="383:77">(<argument pos:start="383:12" pos:end="383:76"><expr pos:start="383:12" pos:end="383:76"><name pos:start="383:12" pos:end="383:39"><name pos:start="383:12" pos:end="383:12">s</name><operator pos:start="383:13" pos:end="383:14">-&gt;</operator><name pos:start="383:15" pos:end="383:29">current_picture</name><operator pos:start="383:30" pos:end="383:30">.</operator><name pos:start="383:31" pos:end="383:39">pict_type</name></name> <operator pos:start="383:41" pos:end="383:42">==</operator> <name pos:start="383:44" pos:end="383:76"><name pos:start="383:44" pos:end="383:44">s</name><operator pos:start="383:45" pos:end="383:46">-&gt;</operator><name pos:start="383:47" pos:end="383:65">current_picture_ptr</name><operator pos:start="383:66" pos:end="383:67">-&gt;</operator><name pos:start="383:68" pos:end="383:76">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:57"><expr pos:start="385:5" pos:end="385:56"><call pos:start="385:5" pos:end="385:56"><name pos:start="385:5" pos:end="385:10">assert</name><argument_list pos:start="385:11" pos:end="385:56">(<argument pos:start="385:12" pos:end="385:55"><expr pos:start="385:12" pos:end="385:55"><name pos:start="385:12" pos:end="385:39"><name pos:start="385:12" pos:end="385:12">s</name><operator pos:start="385:13" pos:end="385:14">-&gt;</operator><name pos:start="385:15" pos:end="385:29">current_picture</name><operator pos:start="385:30" pos:end="385:30">.</operator><name pos:start="385:31" pos:end="385:39">pict_type</name></name> <operator pos:start="385:41" pos:end="385:42">==</operator> <name pos:start="385:44" pos:end="385:55"><name pos:start="385:44" pos:end="385:44">s</name><operator pos:start="385:45" pos:end="385:46">-&gt;</operator><name pos:start="385:47" pos:end="385:55">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="387:5" pos:end="401:5"><if pos:start="387:5" pos:end="393:5">if<condition pos:start="387:7" pos:end="387:44">(<expr pos:start="387:8" pos:end="387:43"><name pos:start="387:8" pos:end="387:19"><name pos:start="387:8" pos:end="387:8">s</name><operator pos:start="387:9" pos:end="387:10">-&gt;</operator><name pos:start="387:11" pos:end="387:19">pict_type</name></name><operator pos:start="387:20" pos:end="387:21">==</operator><name pos:start="387:22" pos:end="387:27">B_TYPE</name> <operator pos:start="387:29" pos:end="387:30">||</operator> <name pos:start="387:32" pos:end="387:43"><name pos:start="387:32" pos:end="387:32">s</name><operator pos:start="387:33" pos:end="387:34">-&gt;</operator><name pos:start="387:35" pos:end="387:43">low_delay</name></name></expr>)</condition><block pos:start="387:45" pos:end="393:5">{<block_content pos:start="389:9" pos:end="391:37">

        <expr_stmt pos:start="389:9" pos:end="389:46"><expr pos:start="389:9" pos:end="389:45"><operator pos:start="389:9" pos:end="389:9">*</operator><name pos:start="389:10" pos:end="389:13">pict</name><operator pos:start="389:14" pos:end="389:14">=</operator> <operator pos:start="389:16" pos:end="389:16">*</operator><operator pos:start="389:17" pos:end="389:17">(</operator><name pos:start="389:18" pos:end="389:24">AVFrame</name><operator pos:start="389:25" pos:end="389:25">*</operator><operator pos:start="389:26" pos:end="389:26">)</operator><operator pos:start="389:27" pos:end="389:27">&amp;</operator><name pos:start="389:28" pos:end="389:45"><name pos:start="389:28" pos:end="389:28">s</name><operator pos:start="389:29" pos:end="389:30">-&gt;</operator><name pos:start="389:31" pos:end="389:45">current_picture</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:37"><expr pos:start="391:9" pos:end="391:36"><call pos:start="391:9" pos:end="391:36"><name pos:start="391:9" pos:end="391:27">ff_print_debug_info</name><argument_list pos:start="391:28" pos:end="391:36">(<argument pos:start="391:29" pos:end="391:29"><expr pos:start="391:29" pos:end="391:29"><name pos:start="391:29" pos:end="391:29">s</name></expr></argument>, <argument pos:start="391:32" pos:end="391:35"><expr pos:start="391:32" pos:end="391:35"><name pos:start="391:32" pos:end="391:35">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="393:7" pos:end="401:5">else <block pos:start="393:12" pos:end="401:5">{<block_content pos:start="395:9" pos:end="399:41">

        <expr_stmt pos:start="395:9" pos:end="395:43"><expr pos:start="395:9" pos:end="395:42"><operator pos:start="395:9" pos:end="395:9">*</operator><name pos:start="395:10" pos:end="395:13">pict</name><operator pos:start="395:14" pos:end="395:14">=</operator> <operator pos:start="395:16" pos:end="395:16">*</operator><operator pos:start="395:17" pos:end="395:17">(</operator><name pos:start="395:18" pos:end="395:24">AVFrame</name><operator pos:start="395:25" pos:end="395:25">*</operator><operator pos:start="395:26" pos:end="395:26">)</operator><operator pos:start="395:27" pos:end="395:27">&amp;</operator><name pos:start="395:28" pos:end="395:42"><name pos:start="395:28" pos:end="395:28">s</name><operator pos:start="395:29" pos:end="395:30">-&gt;</operator><name pos:start="395:31" pos:end="395:42">last_picture</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="397:9" pos:end="399:41"><if pos:start="397:9" pos:end="399:41">if<condition pos:start="397:11" pos:end="397:16">(<expr pos:start="397:12" pos:end="397:15"><name pos:start="397:12" pos:end="397:15">pict</name></expr>)</condition><block type="pseudo" pos:start="399:13" pos:end="399:41"><block_content pos:start="399:13" pos:end="399:41">

            <expr_stmt pos:start="399:13" pos:end="399:41"><expr pos:start="399:13" pos:end="399:40"><call pos:start="399:13" pos:end="399:40"><name pos:start="399:13" pos:end="399:31">ff_print_debug_info</name><argument_list pos:start="399:32" pos:end="399:40">(<argument pos:start="399:33" pos:end="399:33"><expr pos:start="399:33" pos:end="399:33"><name pos:start="399:33" pos:end="399:33">s</name></expr></argument>, <argument pos:start="399:36" pos:end="399:39"><expr pos:start="399:36" pos:end="399:39"><name pos:start="399:36" pos:end="399:39">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="405:5" pos:end="405:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="407:5" pos:end="407:58">/* we substract 1 because it is added on utils.c    */</comment>

    <expr_stmt pos:start="409:5" pos:end="409:48"><expr pos:start="409:5" pos:end="409:47"><name pos:start="409:5" pos:end="409:23"><name pos:start="409:5" pos:end="409:9">avctx</name><operator pos:start="409:10" pos:end="409:11">-&gt;</operator><name pos:start="409:12" pos:end="409:23">frame_number</name></name> <operator pos:start="409:25" pos:end="409:25">=</operator> <name pos:start="409:27" pos:end="409:43"><name pos:start="409:27" pos:end="409:27">s</name><operator pos:start="409:28" pos:end="409:29">-&gt;</operator><name pos:start="409:30" pos:end="409:43">picture_number</name></name> <operator pos:start="409:45" pos:end="409:45">-</operator> <literal type="number" pos:start="409:47" pos:end="409:47">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="413:5" pos:end="413:48">/* dont output the last pic after seeking */</comment>

    <if_stmt pos:start="415:5" pos:end="417:37"><if pos:start="415:5" pos:end="417:37">if<condition pos:start="415:7" pos:end="415:43">(<expr pos:start="415:8" pos:end="415:42"><name pos:start="415:8" pos:end="415:26"><name pos:start="415:8" pos:end="415:8">s</name><operator pos:start="415:9" pos:end="415:10">-&gt;</operator><name pos:start="415:11" pos:end="415:26">last_picture_ptr</name></name> <operator pos:start="415:28" pos:end="415:29">||</operator> <name pos:start="415:31" pos:end="415:42"><name pos:start="415:31" pos:end="415:31">s</name><operator pos:start="415:32" pos:end="415:33">-&gt;</operator><name pos:start="415:34" pos:end="415:42">low_delay</name></name></expr>)</condition><block type="pseudo" pos:start="417:9" pos:end="417:37"><block_content pos:start="417:9" pos:end="417:37">

        <expr_stmt pos:start="417:9" pos:end="417:37"><expr pos:start="417:9" pos:end="417:36"><operator pos:start="417:9" pos:end="417:9">*</operator><name pos:start="417:10" pos:end="417:18">data_size</name> <operator pos:start="417:20" pos:end="417:20">=</operator> <sizeof pos:start="417:22" pos:end="417:36">sizeof<argument_list pos:start="417:28" pos:end="417:36">(<argument pos:start="417:29" pos:end="417:35"><expr pos:start="417:29" pos:end="417:35"><name pos:start="417:29" pos:end="417:35">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="421:5" pos:end="423:47"><expr pos:start="421:5" pos:end="423:46"><call pos:start="421:5" pos:end="423:46"><name pos:start="421:5" pos:end="421:10">av_log</name><argument_list pos:start="421:11" pos:end="423:46">(<argument pos:start="421:12" pos:end="421:16"><expr pos:start="421:12" pos:end="421:16"><name pos:start="421:12" pos:end="421:16">avctx</name></expr></argument>, <argument pos:start="421:19" pos:end="421:30"><expr pos:start="421:19" pos:end="421:30"><name pos:start="421:19" pos:end="421:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="421:33" pos:end="421:55"><expr pos:start="421:33" pos:end="421:55"><literal type="string" pos:start="421:33" pos:end="421:55">"Consumed %i/%i bits\n"</literal></expr></argument>,

           <argument pos:start="423:12" pos:end="423:33"><expr pos:start="423:12" pos:end="423:33"><call pos:start="423:12" pos:end="423:33"><name pos:start="423:12" pos:end="423:25">get_bits_count</name><argument_list pos:start="423:26" pos:end="423:33">(<argument pos:start="423:27" pos:end="423:32"><expr pos:start="423:27" pos:end="423:32"><operator pos:start="423:27" pos:end="423:27">&amp;</operator><name pos:start="423:28" pos:end="423:32"><name pos:start="423:28" pos:end="423:28">s</name><operator pos:start="423:29" pos:end="423:30">-&gt;</operator><name pos:start="423:31" pos:end="423:32">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="423:36" pos:end="423:45"><expr pos:start="423:36" pos:end="423:45"><name pos:start="423:36" pos:end="423:43">buf_size</name><operator pos:start="423:44" pos:end="423:44">*</operator><literal type="number" pos:start="423:45" pos:end="423:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="427:5" pos:end="427:38">/* Fake consumption of all data */</comment>

    <expr_stmt pos:start="429:5" pos:end="429:21"><expr pos:start="429:5" pos:end="429:20"><operator pos:start="429:5" pos:end="429:5">*</operator><name pos:start="429:6" pos:end="429:14">data_size</name> <operator pos:start="429:16" pos:end="429:16">=</operator> <name pos:start="429:18" pos:end="429:20">len</name></expr>;</expr_stmt>

    <return pos:start="431:5" pos:end="431:20">return <expr pos:start="431:12" pos:end="431:19"><name pos:start="431:12" pos:end="431:19">buf_size</name></expr>;</return> <comment type="line" pos:start="431:22" pos:end="431:47">//Number of bytes consumed</comment>

</block_content>}</block></function>
</unit>
