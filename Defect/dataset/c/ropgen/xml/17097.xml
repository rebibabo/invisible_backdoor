<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17097.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">i386_tr_translate_insn</name><parameter_list pos:start="1:35" pos:end="1:75">(<parameter pos:start="1:36" pos:end="1:59"><decl pos:start="1:36" pos:end="1:59"><type pos:start="1:36" pos:end="1:59"><name pos:start="1:36" pos:end="1:51">DisasContextBase</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:59">dcbase</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:74"><decl pos:start="1:62" pos:end="1:74"><type pos:start="1:62" pos:end="1:74"><name pos:start="1:62" pos:end="1:69">CPUState</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:31">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">DisasContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">dc</name> <init pos:start="5:22" pos:end="5:63">= <expr pos:start="5:24" pos:end="5:63"><call pos:start="5:24" pos:end="5:63"><name pos:start="5:24" pos:end="5:35">container_of</name><argument_list pos:start="5:36" pos:end="5:63">(<argument pos:start="5:37" pos:end="5:42"><expr pos:start="5:37" pos:end="5:42"><name pos:start="5:37" pos:end="5:42">dcbase</name></expr></argument>, <argument pos:start="5:45" pos:end="5:56"><expr pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:56">DisasContext</name></expr></argument>, <argument pos:start="5:59" pos:end="5:62"><expr pos:start="5:59" pos:end="5:62"><name pos:start="5:59" pos:end="5:62">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:24">pc_next</name> <init pos:start="7:26" pos:end="7:46">= <expr pos:start="7:28" pos:end="7:46"><call pos:start="7:28" pos:end="7:46"><name pos:start="7:28" pos:end="7:37">disas_insn</name><argument_list pos:start="7:38" pos:end="7:46">(<argument pos:start="7:39" pos:end="7:40"><expr pos:start="7:39" pos:end="7:40"><name pos:start="7:39" pos:end="7:40">dc</name></expr></argument>, <argument pos:start="7:43" pos:end="7:45"><expr pos:start="7:43" pos:end="7:45"><name pos:start="7:43" pos:end="7:45">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="53:5"><if pos:start="11:5" pos:end="25:5">if <condition pos:start="11:8" pos:end="11:61">(<expr pos:start="11:9" pos:end="11:60"><name pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:10">dc</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:14">tf</name></name> <operator pos:start="11:16" pos:end="11:17">||</operator> <operator pos:start="11:19" pos:end="11:19">(</operator><name pos:start="11:20" pos:end="11:37"><name pos:start="11:20" pos:end="11:21">dc</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:27">base</name><operator pos:start="11:28" pos:end="11:28">.</operator><name pos:start="11:29" pos:end="11:30">tb</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:37">flags</name></name> <operator pos:start="11:39" pos:end="11:39">&amp;</operator> <name pos:start="11:41" pos:end="11:59">HF_INHIBIT_IRQ_MASK</name><operator pos:start="11:60" pos:end="11:60">)</operator></expr>)</condition> <block pos:start="11:63" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:41">

        <comment type="block" pos:start="13:9" pos:end="15:35">/* if single step mode, we generate only one instruction and

           generate an exception */</comment>

        <comment type="block" pos:start="17:9" pos:end="21:30">/* if irq were inhibited with HF_INHIBIT_IRQ_MASK, we clear

           the flag and abort the translation to give the irqs a

           chance to happen */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:10">dc</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:16">base</name><operator pos:start="23:17" pos:end="23:17">.</operator><name pos:start="23:18" pos:end="23:23">is_jmp</name></name> <operator pos:start="23:25" pos:end="23:25">=</operator> <name pos:start="23:27" pos:end="23:40">DISAS_TOO_MANY</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="25:7" pos:end="49:5">else if <condition pos:start="25:15" pos:end="33:67">(<expr pos:start="25:16" pos:end="33:66"><operator pos:start="25:16" pos:end="25:16">(</operator><name pos:start="25:17" pos:end="25:35"><name pos:start="25:17" pos:end="25:18">dc</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:24">base</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:27">tb</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:35">cflags</name></name> <operator pos:start="25:37" pos:end="25:37">&amp;</operator> <name pos:start="25:39" pos:end="25:51">CF_USE_ICOUNT</name><operator pos:start="25:52" pos:end="25:52">)</operator>

               <operator pos:start="27:16" pos:end="27:17">&amp;&amp;</operator> <operator pos:start="27:19" pos:end="27:19">(</operator><operator pos:start="27:20" pos:end="27:20">(</operator><name pos:start="27:21" pos:end="27:36"><name pos:start="27:21" pos:end="27:22">dc</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:28">base</name><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:36">pc_next</name></name> <operator pos:start="27:38" pos:end="27:38">&amp;</operator> <name pos:start="27:40" pos:end="27:55">TARGET_PAGE_MASK</name><operator pos:start="27:56" pos:end="27:56">)</operator>

                   <operator pos:start="29:20" pos:end="29:21">!=</operator> <operator pos:start="29:23" pos:end="29:23">(</operator><operator pos:start="29:24" pos:end="29:24">(</operator><name pos:start="29:25" pos:end="29:40"><name pos:start="29:25" pos:end="29:26">dc</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:32">base</name><operator pos:start="29:33" pos:end="29:33">.</operator><name pos:start="29:34" pos:end="29:40">pc_next</name></name> <operator pos:start="29:42" pos:end="29:42">+</operator> <name pos:start="29:44" pos:end="29:63">TARGET_MAX_INSN_SIZE</name> <operator pos:start="29:65" pos:end="29:65">-</operator> <literal type="number" pos:start="29:67" pos:end="29:67">1</literal><operator pos:start="29:68" pos:end="29:68">)</operator>

                       <operator pos:start="31:24" pos:end="31:24">&amp;</operator> <name pos:start="31:26" pos:end="31:41">TARGET_PAGE_MASK</name><operator pos:start="31:42" pos:end="31:42">)</operator>

                   <operator pos:start="33:20" pos:end="33:21">||</operator> <operator pos:start="33:23" pos:end="33:23">(</operator><name pos:start="33:24" pos:end="33:39"><name pos:start="33:24" pos:end="33:25">dc</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:31">base</name><operator pos:start="33:32" pos:end="33:32">.</operator><name pos:start="33:33" pos:end="33:39">pc_next</name></name> <operator pos:start="33:41" pos:end="33:41">&amp;</operator> <operator pos:start="33:43" pos:end="33:43">~</operator><name pos:start="33:44" pos:end="33:59">TARGET_PAGE_MASK</name><operator pos:start="33:60" pos:end="33:60">)</operator> <operator pos:start="33:62" pos:end="33:63">==</operator> <literal type="number" pos:start="33:65" pos:end="33:65">0</literal><operator pos:start="33:66" pos:end="33:66">)</operator></expr>)</condition> <block pos:start="33:69" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:41">

        <comment type="block" pos:start="35:9" pos:end="45:11">/* Do not cross the boundary of the pages in icount mode,

           it can cause an exception. Do it only when boundary is

           crossed by the first instruction in the block.

           If current instruction already crossed the bound - it's ok,

           because an exception hasn't stopped this code.

         */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:41"><expr pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:10">dc</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:16">base</name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:23">is_jmp</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:40">DISAS_TOO_MANY</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="49:7" pos:end="53:5">else if <condition pos:start="49:15" pos:end="49:72">(<expr pos:start="49:16" pos:end="49:71"><operator pos:start="49:16" pos:end="49:16">(</operator><name pos:start="49:17" pos:end="49:23">pc_next</name> <operator pos:start="49:25" pos:end="49:25">-</operator> <name pos:start="49:27" pos:end="49:43"><name pos:start="49:27" pos:end="49:28">dc</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:34">base</name><operator pos:start="49:35" pos:end="49:35">.</operator><name pos:start="49:36" pos:end="49:43">pc_first</name></name><operator pos:start="49:44" pos:end="49:44">)</operator> <operator pos:start="49:46" pos:end="49:47">&gt;=</operator> <operator pos:start="49:49" pos:end="49:49">(</operator><name pos:start="49:50" pos:end="49:65">TARGET_PAGE_SIZE</name> <operator pos:start="49:67" pos:end="49:67">-</operator> <literal type="number" pos:start="49:69" pos:end="49:70">32</literal><operator pos:start="49:71" pos:end="49:71">)</operator></expr>)</condition> <block pos:start="49:74" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:41">

        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:10">dc</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:16">base</name><operator pos:start="51:17" pos:end="51:17">.</operator><name pos:start="51:18" pos:end="51:23">is_jmp</name></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <name pos:start="51:27" pos:end="51:40">DISAS_TOO_MANY</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:20"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:12">base</name><operator pos:start="57:13" pos:end="57:13">.</operator><name pos:start="57:14" pos:end="57:20">pc_next</name></name> <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:30">pc_next</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
