<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21534.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:32">LEToUV</name>)<parameter_list pos:start="1:34" pos:end="1:135">(<parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:41">uint8_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">dstU</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:56">uint8_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">dstV</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:83"><decl pos:start="1:65" pos:end="1:83"><type pos:start="1:65" pos:end="1:83"><specifier pos:start="1:65" pos:end="1:69">const</specifier> <name pos:start="1:71" pos:end="1:77">uint8_t</name> <modifier pos:start="1:79" pos:end="1:79">*</modifier></type><name pos:start="1:80" pos:end="1:83">src1</name></decl></parameter>, <parameter pos:start="1:86" pos:end="1:104"><decl pos:start="1:86" pos:end="1:104"><type pos:start="1:86" pos:end="1:104"><specifier pos:start="1:86" pos:end="1:90">const</specifier> <name pos:start="1:92" pos:end="1:98">uint8_t</name> <modifier pos:start="1:100" pos:end="1:100">*</modifier></type><name pos:start="1:101" pos:end="1:104">src2</name></decl></parameter>, <parameter pos:start="1:107" pos:end="1:116"><decl pos:start="1:107" pos:end="1:116"><type pos:start="1:107" pos:end="1:116"><name pos:start="1:107" pos:end="1:110">long</name></type> <name pos:start="1:112" pos:end="1:116">width</name></decl></parameter>, <parameter pos:start="1:119" pos:end="1:134"><decl pos:start="1:119" pos:end="1:134"><type pos:start="1:119" pos:end="1:134"><name pos:start="1:119" pos:end="1:126">uint32_t</name> <modifier pos:start="1:128" pos:end="1:128">*</modifier></type><name pos:start="1:129" pos:end="1:134">unused</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="7:5" pos:end="64:0">

<cpp:if pos:start="5:1" pos:end="5:24">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <asm pos:start="7:5" pos:end="48:0">__asm__ <specifier pos:start="7:13" pos:end="7:20">volatile</specifier>(

        "mov                    %0, %%"REG_a"       \n\t"

        "1:                                         \n\t"

        "movq    (%1, %%"REG_a",2), %%mm0           \n\t"

        "movq   8(%1, %%"REG_a",2), %%mm1           \n\t"

        "movq    (%2, %%"REG_a",2), %%mm2           \n\t"

        "movq   8(%2, %%"REG_a",2), %%mm3           \n\t"

        "psrlw                  $8, %%mm0           \n\t"

        "psrlw                  $8, %%mm1           \n\t"

        "psrlw                  $8, %%mm2           \n\t"

        "psrlw                  $8, %%mm3           \n\t"

        "packuswb            %%mm1, %%mm0           \n\t"

        "packuswb            %%mm3, %%mm2           \n\t"

        "movq                %%mm0, (%3, %%"REG_a") \n\t"

        "movq                %%mm2, (%4, %%"REG_a") \n\t"

        "add                    $8, %%"REG_a"       \n\t"

        " js                    1b                  \n\t"

        : : "g" ((x86_reg)-width), "r" (src1+width*2), "r" (src2+width*2), "r" (dstU+width), "r" (dstV+width)

        : "%"REG_a

    );</asm>

<cpp:else pos:start="47:1" pos:end="47:5">#<cpp:directive pos:start="47:2" pos:end="47:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="49:5" pos:end="49:10"><decl pos:start="49:5" pos:end="49:9"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:9">i</name></decl>;</decl_stmt>

    <comment type="line" pos:start="51:5" pos:end="51:95">// FIXME I don't think this code is right for YUV444/422, since then h is not subsampled so</comment>

    <comment type="line" pos:start="53:5" pos:end="53:58">// we need to skip each second pixel. Same for BEToUV.</comment>

    <for pos:start="55:5" pos:end="64:0">for <control pos:start="55:9" pos:end="55:27">(<init pos:start="55:10" pos:end="55:13"><expr pos:start="55:10" pos:end="55:12"><name pos:start="55:10" pos:end="55:10">i</name><operator pos:start="55:11" pos:end="55:11">=</operator><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</init> <condition pos:start="55:15" pos:end="55:22"><expr pos:start="55:15" pos:end="55:21"><name pos:start="55:15" pos:end="55:15">i</name><operator pos:start="55:16" pos:end="55:16">&lt;</operator><name pos:start="55:17" pos:end="55:21">width</name></expr>;</condition> <incr pos:start="55:24" pos:end="55:26"><expr pos:start="55:24" pos:end="55:26"><name pos:start="55:24" pos:end="55:24">i</name><operator pos:start="55:25" pos:end="55:26">++</operator></expr></incr>)</control> <block pos:start="55:29" pos:end="64:0">{<block_content pos:start="57:9" pos:end="59:31">

        <expr_stmt pos:start="57:9" pos:end="57:31"><expr pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">dstU</name><index pos:start="57:13" pos:end="57:15">[<expr pos:start="57:14" pos:end="57:14"><name pos:start="57:14" pos:end="57:14">i</name></expr>]</index></name><operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:30"><name pos:start="57:18" pos:end="57:21">src1</name><index pos:start="57:22" pos:end="57:30">[<expr pos:start="57:23" pos:end="57:29"><literal type="number" pos:start="57:23" pos:end="57:23">2</literal><operator pos:start="57:24" pos:end="57:24">*</operator><name pos:start="57:25" pos:end="57:25">i</name> <operator pos:start="57:27" pos:end="57:27">+</operator> <literal type="number" pos:start="57:29" pos:end="57:29">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:31"><expr pos:start="59:9" pos:end="59:30"><name pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:12">dstV</name><index pos:start="59:13" pos:end="59:15">[<expr pos:start="59:14" pos:end="59:14"><name pos:start="59:14" pos:end="59:14">i</name></expr>]</index></name><operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:30"><name pos:start="59:18" pos:end="59:21">src2</name><index pos:start="59:22" pos:end="59:30">[<expr pos:start="59:23" pos:end="59:29"><literal type="number" pos:start="59:23" pos:end="59:23">2</literal><operator pos:start="59:24" pos:end="59:24">*</operator><name pos:start="59:25" pos:end="59:25">i</name> <operator pos:start="59:27" pos:end="59:27">+</operator> <literal type="number" pos:start="59:29" pos:end="59:29">1</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
