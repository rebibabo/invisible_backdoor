<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4721.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">scsi_read_data</name><parameter_list pos:start="1:27" pos:end="1:44">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:38">SCSIRequest</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">req</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:53">= <expr pos:start="5:22" pos:end="5:53"><call pos:start="5:22" pos:end="5:53"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:53">(<argument pos:start="5:32" pos:end="5:42"><expr pos:start="5:32" pos:end="5:42"><name pos:start="5:32" pos:end="5:42">SCSIDiskReq</name></expr></argument>, <argument pos:start="5:45" pos:end="5:47"><expr pos:start="5:45" pos:end="5:47"><name pos:start="5:45" pos:end="5:47">req</name></expr></argument>, <argument pos:start="5:50" pos:end="5:52"><expr pos:start="5:50" pos:end="5:52"><name pos:start="5:50" pos:end="5:52">req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:65">= <expr pos:start="7:24" pos:end="7:65"><call pos:start="7:24" pos:end="7:65"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:65">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:64"><expr pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:55">r</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:60">req</name><operator pos:start="7:61" pos:end="7:61">.</operator><name pos:start="7:62" pos:end="7:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:14">first</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:55"><expr pos:start="13:5" pos:end="13:54"><call pos:start="13:5" pos:end="13:54"><name pos:start="13:5" pos:end="13:11">DPRINTF</name><argument_list pos:start="13:12" pos:end="13:54">(<argument pos:start="13:13" pos:end="13:36"><expr pos:start="13:13" pos:end="13:36"><literal type="string" pos:start="13:13" pos:end="13:36">"Read sector_count=%d\n"</literal></expr></argument>, <argument pos:start="13:39" pos:end="13:53"><expr pos:start="13:39" pos:end="13:53"><name pos:start="13:39" pos:end="13:53"><name pos:start="13:39" pos:end="13:39">r</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:53">sector_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:29">(<expr pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:9">r</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:23">sector_count</name></name> <operator pos:start="15:25" pos:end="15:26">==</operator> <literal type="number" pos:start="15:28" pos:end="15:28">0</literal></expr>)</condition> <block pos:start="15:31" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <comment type="block" pos:start="17:9" pos:end="17:67">/* This also clears the sense buffer for REQUEST SENSE.  */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><call pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:25">scsi_req_complete</name><argument_list pos:start="19:26" pos:end="19:40">(<argument pos:start="19:27" pos:end="19:33"><expr pos:start="19:27" pos:end="19:33"><operator pos:start="19:27" pos:end="19:27">&amp;</operator><name pos:start="19:28" pos:end="19:33"><name pos:start="19:28" pos:end="19:28">r</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:33">req</name></name></expr></argument>, <argument pos:start="19:36" pos:end="19:39"><expr pos:start="19:36" pos:end="19:39"><name pos:start="19:36" pos:end="19:39">GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:53">/* No data transfer may already be in progress */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><call pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:32">(<argument pos:start="29:12" pos:end="29:31"><expr pos:start="29:12" pos:end="29:31"><name pos:start="29:12" pos:end="29:23"><name pos:start="29:12" pos:end="29:12">r</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:17">req</name><operator pos:start="29:18" pos:end="29:18">.</operator><name pos:start="29:19" pos:end="29:23">aiocb</name></name> <operator pos:start="29:25" pos:end="29:26">==</operator> <name pos:start="29:28" pos:end="29:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:69">/* The request is used as the AIO opaque value, so add a ref.  */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:26"><expr pos:start="35:5" pos:end="35:25"><call pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:16">scsi_req_ref</name><argument_list pos:start="35:17" pos:end="35:25">(<argument pos:start="35:18" pos:end="35:24"><expr pos:start="35:18" pos:end="35:24"><operator pos:start="35:18" pos:end="35:18">&amp;</operator><name pos:start="35:19" pos:end="35:24"><name pos:start="35:19" pos:end="35:19">r</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:24">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:44">(<expr pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:9">r</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:14">req</name><operator pos:start="37:15" pos:end="37:15">.</operator><name pos:start="37:16" pos:end="37:18">cmd</name><operator pos:start="37:19" pos:end="37:19">.</operator><name pos:start="37:20" pos:end="37:23">mode</name></name> <operator pos:start="37:25" pos:end="37:26">==</operator> <name pos:start="37:28" pos:end="37:43">SCSI_XFER_TO_DEV</name></expr>)</condition> <block pos:start="37:46" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:15">

        <expr_stmt pos:start="39:9" pos:end="39:53"><expr pos:start="39:9" pos:end="39:52"><call pos:start="39:9" pos:end="39:52"><name pos:start="39:9" pos:end="39:15">DPRINTF</name><argument_list pos:start="39:16" pos:end="39:52">(<argument pos:start="39:17" pos:end="39:51"><expr pos:start="39:17" pos:end="39:51"><literal type="string" pos:start="39:17" pos:end="39:51">"Data transfer direction invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:39"><expr pos:start="41:9" pos:end="41:38"><call pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:26">scsi_read_complete</name><argument_list pos:start="41:27" pos:end="41:38">(<argument pos:start="41:28" pos:end="41:28"><expr pos:start="41:28" pos:end="41:28"><name pos:start="41:28" pos:end="41:28">r</name></expr></argument>, <argument pos:start="41:31" pos:end="41:37"><expr pos:start="41:31" pos:end="41:37"><operator pos:start="41:31" pos:end="41:31">-</operator><name pos:start="41:32" pos:end="41:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:21">(<expr pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:20">tray_open</name></name></expr>)</condition> <block pos:start="49:23" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:15">

        <expr_stmt pos:start="51:9" pos:end="51:42"><expr pos:start="51:9" pos:end="51:41"><call pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:26">scsi_read_complete</name><argument_list pos:start="51:27" pos:end="51:41">(<argument pos:start="51:28" pos:end="51:28"><expr pos:start="51:28" pos:end="51:28"><name pos:start="51:28" pos:end="51:28">r</name></expr></argument>, <argument pos:start="51:31" pos:end="51:40"><expr pos:start="51:31" pos:end="51:40"><operator pos:start="51:31" pos:end="51:31">-</operator><name pos:start="51:32" pos:end="51:40">ENOMEDIUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:24"><expr pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:9">first</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:23"><name pos:start="59:14" pos:end="59:14">r</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:23">started</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:22"><expr pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:5">r</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:14">started</name></name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:21">true</name></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="75:5"><if pos:start="63:5" pos:end="71:5">if <condition pos:start="63:8" pos:end="63:39">(<expr pos:start="63:9" pos:end="63:38"><name pos:start="63:9" pos:end="63:13">first</name> <operator pos:start="63:15" pos:end="63:16">&amp;&amp;</operator> <name pos:start="63:18" pos:end="63:38"><name pos:start="63:18" pos:end="63:18">r</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:38">need_fua_emulation</name></name></expr>)</condition> <block pos:start="63:41" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:75">

        <expr_stmt pos:start="65:9" pos:end="67:43"><expr pos:start="65:9" pos:end="67:42"><call pos:start="65:9" pos:end="67:42"><name pos:start="65:9" pos:end="65:24">block_acct_start</name><argument_list pos:start="65:25" pos:end="67:42">(<argument pos:start="65:26" pos:end="65:56"><expr pos:start="65:26" pos:end="65:56"><call pos:start="65:26" pos:end="65:56"><name pos:start="65:26" pos:end="65:38">blk_get_stats</name><argument_list pos:start="65:39" pos:end="65:56">(<argument pos:start="65:40" pos:end="65:55"><expr pos:start="65:40" pos:end="65:55"><name pos:start="65:40" pos:end="65:55"><name pos:start="65:40" pos:end="65:40">s</name><operator pos:start="65:41" pos:end="65:42">-&gt;</operator><name pos:start="65:43" pos:end="65:46">qdev</name><operator pos:start="65:47" pos:end="65:47">.</operator><name pos:start="65:48" pos:end="65:51">conf</name><operator pos:start="65:52" pos:end="65:52">.</operator><name pos:start="65:53" pos:end="65:55">blk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:59" pos:end="65:66"><expr pos:start="65:59" pos:end="65:66"><operator pos:start="65:59" pos:end="65:59">&amp;</operator><name pos:start="65:60" pos:end="65:66"><name pos:start="65:60" pos:end="65:60">r</name><operator pos:start="65:61" pos:end="65:62">-&gt;</operator><name pos:start="65:63" pos:end="65:66">acct</name></name></expr></argument>, <argument pos:start="65:69" pos:end="65:69"><expr pos:start="65:69" pos:end="65:69"><literal type="number" pos:start="65:69" pos:end="65:69">0</literal></expr></argument>,

                         <argument pos:start="67:26" pos:end="67:41"><expr pos:start="67:26" pos:end="67:41"><name pos:start="67:26" pos:end="67:41">BLOCK_ACCT_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:75"><expr pos:start="69:9" pos:end="69:74"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:9">r</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:14">req</name><operator pos:start="69:15" pos:end="69:15">.</operator><name pos:start="69:16" pos:end="69:20">aiocb</name></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <call pos:start="69:24" pos:end="69:74"><name pos:start="69:24" pos:end="69:36">blk_aio_flush</name><argument_list pos:start="69:37" pos:end="69:74">(<argument pos:start="69:38" pos:end="69:53"><expr pos:start="69:38" pos:end="69:53"><name pos:start="69:38" pos:end="69:53"><name pos:start="69:38" pos:end="69:38">s</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:44">qdev</name><operator pos:start="69:45" pos:end="69:45">.</operator><name pos:start="69:46" pos:end="69:49">conf</name><operator pos:start="69:50" pos:end="69:50">.</operator><name pos:start="69:51" pos:end="69:53">blk</name></name></expr></argument>, <argument pos:start="69:56" pos:end="69:70"><expr pos:start="69:56" pos:end="69:70"><name pos:start="69:56" pos:end="69:70">scsi_do_read_cb</name></expr></argument>, <argument pos:start="69:73" pos:end="69:73"><expr pos:start="69:73" pos:end="69:73"><name pos:start="69:73" pos:end="69:73">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="75:5">else <block pos:start="71:12" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:27">

        <expr_stmt pos:start="73:9" pos:end="73:27"><expr pos:start="73:9" pos:end="73:26"><call pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:20">scsi_do_read</name><argument_list pos:start="73:21" pos:end="73:26">(<argument pos:start="73:22" pos:end="73:22"><expr pos:start="73:22" pos:end="73:22"><name pos:start="73:22" pos:end="73:22">r</name></expr></argument>, <argument pos:start="73:25" pos:end="73:25"><expr pos:start="73:25" pos:end="73:25"><literal type="number" pos:start="73:25" pos:end="73:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
