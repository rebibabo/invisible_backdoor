<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3271.c" pos:tabs="8"><function pos:start="1:1" pos:end="301:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:17">read_f</name><parameter_list pos:start="1:18" pos:end="1:40">(<parameter pos:start="1:19" pos:end="1:26"><decl pos:start="1:19" pos:end="1:26"><type pos:start="1:19" pos:end="1:26"><name pos:start="1:19" pos:end="1:21">int</name></type> <name pos:start="1:23" pos:end="1:26">argc</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:39"><name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier><modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:39">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="301:1">{<block_content pos:start="5:5" pos:end="299:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">timeval</name></name></type> <name pos:start="5:20" pos:end="5:21">t1</name></decl>, <decl pos:start="5:24" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:18"/><name pos:start="5:24" pos:end="5:25">t2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">Cflag</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>, <decl pos:start="7:20" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:24">pflag</name> <init pos:start="7:26" pos:end="7:28">= <expr pos:start="7:28" pos:end="7:28"><literal type="number" pos:start="7:28" pos:end="7:28">0</literal></expr></init></decl>, <decl pos:start="7:31" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:31" pos:end="7:35">qflag</name> <init pos:start="7:37" pos:end="7:39">= <expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">0</literal></expr></init></decl>, <decl pos:start="7:42" pos:end="7:50"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:42" pos:end="7:46">vflag</name> <init pos:start="7:48" pos:end="7:50">= <expr pos:start="7:50" pos:end="7:50"><literal type="number" pos:start="7:50" pos:end="7:50">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">Pflag</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr></init></decl>, <decl pos:start="9:20" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:24">sflag</name> <init pos:start="9:26" pos:end="9:28">= <expr pos:start="9:28" pos:end="9:28"><literal type="number" pos:start="9:28" pos:end="9:28">0</literal></expr></init></decl>, <decl pos:start="9:31" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:31" pos:end="9:35">lflag</name> <init pos:start="9:37" pos:end="9:39">= <expr pos:start="9:39" pos:end="9:39"><literal type="number" pos:start="9:39" pos:end="9:39">0</literal></expr></init></decl>, <decl pos:start="9:42" pos:end="9:50"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:42" pos:end="9:46">bflag</name> <init pos:start="9:48" pos:end="9:50">= <expr pos:start="9:50" pos:end="9:50"><literal type="number" pos:start="9:50" pos:end="9:50">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">c</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">cnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">count</name></decl>;</decl_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:75">/* Some compilers get confused and warn if this is not initialized.  */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">total</name> <init pos:start="21:15" pos:end="21:17">= <expr pos:start="21:17" pos:end="21:17"><literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:59"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">pattern</name> <init pos:start="23:17" pos:end="23:19">= <expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr></init></decl>, <decl pos:start="23:22" pos:end="23:39"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:22" pos:end="23:35">pattern_offset</name> <init pos:start="23:37" pos:end="23:39">= <expr pos:start="23:39" pos:end="23:39"><literal type="number" pos:start="23:39" pos:end="23:39">0</literal></expr></init></decl>, <decl pos:start="23:42" pos:end="23:58"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:42" pos:end="23:54">pattern_count</name> <init pos:start="23:56" pos:end="23:58">= <expr pos:start="23:58" pos:end="23:58"><literal type="number" pos:start="23:58" pos:end="23:58">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="27:5" pos:end="113:5">while <condition pos:start="27:11" pos:end="27:58">(<expr pos:start="27:12" pos:end="27:57"><operator pos:start="27:12" pos:end="27:12">(</operator><name pos:start="27:13" pos:end="27:13">c</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:49"><name pos:start="27:17" pos:end="27:22">getopt</name><argument_list pos:start="27:23" pos:end="27:49">(<argument pos:start="27:24" pos:end="27:27"><expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">argc</name></expr></argument>, <argument pos:start="27:30" pos:end="27:33"><expr pos:start="27:30" pos:end="27:33"><name pos:start="27:30" pos:end="27:33">argv</name></expr></argument>, <argument pos:start="27:36" pos:end="27:48"><expr pos:start="27:36" pos:end="27:48"><literal type="string" pos:start="27:36" pos:end="27:48">"bCl:pP:qs:v"</literal></expr></argument>)</argument_list></call><operator pos:start="27:50" pos:end="27:50">)</operator> <operator pos:start="27:52" pos:end="27:53">!=</operator> <name pos:start="27:55" pos:end="27:57">EOF</name></expr>)</condition> <block pos:start="27:60" pos:end="113:5">{<block_content pos:start="29:9" pos:end="111:9">

        <switch pos:start="29:9" pos:end="111:9">switch <condition pos:start="29:16" pos:end="29:18">(<expr pos:start="29:17" pos:end="29:17"><name pos:start="29:17" pos:end="29:17">c</name></expr>)</condition> <block pos:start="29:20" pos:end="111:9">{<block_content pos:start="31:9" pos:end="109:44">

        <case pos:start="31:9" pos:end="31:17">case <expr pos:start="31:14" pos:end="31:16"><literal type="char" pos:start="31:14" pos:end="31:16">'b'</literal></expr>:</case>

            <expr_stmt pos:start="33:13" pos:end="33:22"><expr pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:17">bflag</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</expr_stmt>

            <break pos:start="35:13" pos:end="35:18">break;</break>

        <case pos:start="37:9" pos:end="37:17">case <expr pos:start="37:14" pos:end="37:16"><literal type="char" pos:start="37:14" pos:end="37:16">'C'</literal></expr>:</case>

            <expr_stmt pos:start="39:13" pos:end="39:22"><expr pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:17">Cflag</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        <case pos:start="43:9" pos:end="43:17">case <expr pos:start="43:14" pos:end="43:16"><literal type="char" pos:start="43:14" pos:end="43:16">'l'</literal></expr>:</case>

            <expr_stmt pos:start="45:13" pos:end="45:22"><expr pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:17">lflag</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:43"><expr pos:start="47:13" pos:end="47:42"><name pos:start="47:13" pos:end="47:25">pattern_count</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <call pos:start="47:29" pos:end="47:42"><name pos:start="47:29" pos:end="47:34">cvtnum</name><argument_list pos:start="47:35" pos:end="47:42">(<argument pos:start="47:36" pos:end="47:41"><expr pos:start="47:36" pos:end="47:41"><name pos:start="47:36" pos:end="47:41">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="55:13"><if pos:start="49:13" pos:end="55:13">if <condition pos:start="49:16" pos:end="49:34">(<expr pos:start="49:17" pos:end="49:33"><name pos:start="49:17" pos:end="49:29">pattern_count</name> <operator pos:start="49:31" pos:end="49:31">&lt;</operator> <literal type="number" pos:start="49:33" pos:end="49:33">0</literal></expr>)</condition> <block pos:start="49:36" pos:end="55:13">{<block_content pos:start="51:17" pos:end="53:25">

                <expr_stmt pos:start="51:17" pos:end="51:70"><expr pos:start="51:17" pos:end="51:69"><call pos:start="51:17" pos:end="51:69"><name pos:start="51:17" pos:end="51:22">printf</name><argument_list pos:start="51:23" pos:end="51:69">(<argument pos:start="51:24" pos:end="51:60"><expr pos:start="51:24" pos:end="51:60"><literal type="string" pos:start="51:24" pos:end="51:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="51:63" pos:end="51:68"><expr pos:start="51:63" pos:end="51:68"><name pos:start="51:63" pos:end="51:68">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="53:17" pos:end="53:25">return <expr pos:start="53:24" pos:end="53:24"><literal type="number" pos:start="53:24" pos:end="53:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        <case pos:start="59:9" pos:end="59:17">case <expr pos:start="59:14" pos:end="59:16"><literal type="char" pos:start="59:14" pos:end="59:16">'p'</literal></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:22"><expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:17">pflag</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <case pos:start="65:9" pos:end="65:17">case <expr pos:start="65:14" pos:end="65:16"><literal type="char" pos:start="65:14" pos:end="65:16">'P'</literal></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="67:22"><expr pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:17">Pflag</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:44"><expr pos:start="69:13" pos:end="69:43"><name pos:start="69:13" pos:end="69:19">pattern</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:43"><name pos:start="69:23" pos:end="69:35">parse_pattern</name><argument_list pos:start="69:36" pos:end="69:43">(<argument pos:start="69:37" pos:end="69:42"><expr pos:start="69:37" pos:end="69:42"><name pos:start="69:37" pos:end="69:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="75:13"><if pos:start="71:13" pos:end="75:13">if <condition pos:start="71:16" pos:end="71:28">(<expr pos:start="71:17" pos:end="71:27"><name pos:start="71:17" pos:end="71:23">pattern</name> <operator pos:start="71:25" pos:end="71:25">&lt;</operator> <literal type="number" pos:start="71:27" pos:end="71:27">0</literal></expr>)</condition> <block pos:start="71:30" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:25">

                <return pos:start="73:17" pos:end="73:25">return <expr pos:start="73:24" pos:end="73:24"><literal type="number" pos:start="73:24" pos:end="73:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        <case pos:start="79:9" pos:end="79:17">case <expr pos:start="79:14" pos:end="79:16"><literal type="char" pos:start="79:14" pos:end="79:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="81:13" pos:end="81:22"><expr pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:17">qflag</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:17">case <expr pos:start="85:14" pos:end="85:16"><literal type="char" pos:start="85:14" pos:end="85:16">'s'</literal></expr>:</case>

            <expr_stmt pos:start="87:13" pos:end="87:22"><expr pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:17">sflag</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <literal type="number" pos:start="87:21" pos:end="87:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:44"><expr pos:start="89:13" pos:end="89:43"><name pos:start="89:13" pos:end="89:26">pattern_offset</name> <operator pos:start="89:28" pos:end="89:28">=</operator> <call pos:start="89:30" pos:end="89:43"><name pos:start="89:30" pos:end="89:35">cvtnum</name><argument_list pos:start="89:36" pos:end="89:43">(<argument pos:start="89:37" pos:end="89:42"><expr pos:start="89:37" pos:end="89:42"><name pos:start="89:37" pos:end="89:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:35">(<expr pos:start="91:17" pos:end="91:34"><name pos:start="91:17" pos:end="91:30">pattern_offset</name> <operator pos:start="91:32" pos:end="91:32">&lt;</operator> <literal type="number" pos:start="91:34" pos:end="91:34">0</literal></expr>)</condition> <block pos:start="91:37" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:25">

                <expr_stmt pos:start="93:17" pos:end="93:70"><expr pos:start="93:17" pos:end="93:69"><call pos:start="93:17" pos:end="93:69"><name pos:start="93:17" pos:end="93:22">printf</name><argument_list pos:start="93:23" pos:end="93:69">(<argument pos:start="93:24" pos:end="93:60"><expr pos:start="93:24" pos:end="93:60"><literal type="string" pos:start="93:24" pos:end="93:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="93:63" pos:end="93:68"><expr pos:start="93:63" pos:end="93:68"><name pos:start="93:63" pos:end="93:68">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="95:17" pos:end="95:25">return <expr pos:start="95:24" pos:end="95:24"><literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <case pos:start="101:9" pos:end="101:17">case <expr pos:start="101:14" pos:end="101:16"><literal type="char" pos:start="101:14" pos:end="101:16">'v'</literal></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:22"><expr pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:17">vflag</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <default pos:start="107:9" pos:end="107:16">default:</default>

            <return pos:start="109:13" pos:end="109:44">return <expr pos:start="109:20" pos:end="109:43"><call pos:start="109:20" pos:end="109:43"><name pos:start="109:20" pos:end="109:32">command_usage</name><argument_list pos:start="109:33" pos:end="109:43">(<argument pos:start="109:34" pos:end="109:42"><expr pos:start="109:34" pos:end="109:42"><operator pos:start="109:34" pos:end="109:34">&amp;</operator><name pos:start="109:35" pos:end="109:42">read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:27">(<expr pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:14">optind</name> <operator pos:start="117:16" pos:end="117:17">!=</operator> <name pos:start="117:19" pos:end="117:22">argc</name> <operator pos:start="117:24" pos:end="117:24">-</operator> <literal type="number" pos:start="117:26" pos:end="117:26">2</literal></expr>)</condition> <block pos:start="117:29" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:40">

        <return pos:start="119:9" pos:end="119:40">return <expr pos:start="119:16" pos:end="119:39"><call pos:start="119:16" pos:end="119:39"><name pos:start="119:16" pos:end="119:28">command_usage</name><argument_list pos:start="119:29" pos:end="119:39">(<argument pos:start="119:30" pos:end="119:38"><expr pos:start="119:30" pos:end="119:38"><operator pos:start="119:30" pos:end="119:30">&amp;</operator><name pos:start="119:31" pos:end="119:38">read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:23">(<expr pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:13">bflag</name> <operator pos:start="125:15" pos:end="125:16">&amp;&amp;</operator> <name pos:start="125:18" pos:end="125:22">pflag</name></expr>)</condition> <block pos:start="125:25" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:17">

        <expr_stmt pos:start="127:9" pos:end="127:67"><expr pos:start="127:9" pos:end="127:66"><call pos:start="127:9" pos:end="127:66"><name pos:start="127:9" pos:end="127:14">printf</name><argument_list pos:start="127:15" pos:end="127:66">(<argument pos:start="127:16" pos:end="127:65"><expr pos:start="127:16" pos:end="127:65"><literal type="string" pos:start="127:16" pos:end="127:65">"-b and -p cannot be specified at the same time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:17">return <expr pos:start="129:16" pos:end="129:16"><literal type="number" pos:start="129:16" pos:end="129:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:34"><expr pos:start="135:5" pos:end="135:33"><name pos:start="135:5" pos:end="135:10">offset</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <call pos:start="135:14" pos:end="135:33"><name pos:start="135:14" pos:end="135:19">cvtnum</name><argument_list pos:start="135:20" pos:end="135:33">(<argument pos:start="135:21" pos:end="135:32"><expr pos:start="135:21" pos:end="135:32"><name pos:start="135:21" pos:end="135:32"><name pos:start="135:21" pos:end="135:24">argv</name><index pos:start="135:25" pos:end="135:32">[<expr pos:start="135:26" pos:end="135:31"><name pos:start="135:26" pos:end="135:31">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:19">(<expr pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:14">offset</name> <operator pos:start="137:16" pos:end="137:16">&lt;</operator> <literal type="number" pos:start="137:18" pos:end="137:18">0</literal></expr>)</condition> <block pos:start="137:21" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:17">

        <expr_stmt pos:start="139:9" pos:end="139:68"><expr pos:start="139:9" pos:end="139:67"><call pos:start="139:9" pos:end="139:67"><name pos:start="139:9" pos:end="139:14">printf</name><argument_list pos:start="139:15" pos:end="139:67">(<argument pos:start="139:16" pos:end="139:52"><expr pos:start="139:16" pos:end="139:52"><literal type="string" pos:start="139:16" pos:end="139:52">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="139:55" pos:end="139:66"><expr pos:start="139:55" pos:end="139:66"><name pos:start="139:55" pos:end="139:66"><name pos:start="139:55" pos:end="139:58">argv</name><index pos:start="139:59" pos:end="139:66">[<expr pos:start="139:60" pos:end="139:65"><name pos:start="139:60" pos:end="139:65">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:17">return <expr pos:start="141:16" pos:end="141:16"><literal type="number" pos:start="141:16" pos:end="141:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:13"><expr pos:start="147:5" pos:end="147:12"><name pos:start="147:5" pos:end="147:10">optind</name><operator pos:start="147:11" pos:end="147:12">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:33"><expr pos:start="149:5" pos:end="149:32"><name pos:start="149:5" pos:end="149:9">count</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <call pos:start="149:13" pos:end="149:32"><name pos:start="149:13" pos:end="149:18">cvtnum</name><argument_list pos:start="149:19" pos:end="149:32">(<argument pos:start="149:20" pos:end="149:31"><expr pos:start="149:20" pos:end="149:31"><name pos:start="149:20" pos:end="149:31"><name pos:start="149:20" pos:end="149:23">argv</name><index pos:start="149:24" pos:end="149:31">[<expr pos:start="149:25" pos:end="149:30"><name pos:start="149:25" pos:end="149:30">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="157:5"><if pos:start="151:5" pos:end="157:5">if <condition pos:start="151:8" pos:end="151:18">(<expr pos:start="151:9" pos:end="151:17"><name pos:start="151:9" pos:end="151:13">count</name> <operator pos:start="151:15" pos:end="151:15">&lt;</operator> <literal type="number" pos:start="151:17" pos:end="151:17">0</literal></expr>)</condition> <block pos:start="151:20" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:17">

        <expr_stmt pos:start="153:9" pos:end="153:68"><expr pos:start="153:9" pos:end="153:67"><call pos:start="153:9" pos:end="153:67"><name pos:start="153:9" pos:end="153:14">printf</name><argument_list pos:start="153:15" pos:end="153:67">(<argument pos:start="153:16" pos:end="153:52"><expr pos:start="153:16" pos:end="153:52"><literal type="string" pos:start="153:16" pos:end="153:52">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="153:55" pos:end="153:66"><expr pos:start="153:55" pos:end="153:66"><name pos:start="153:55" pos:end="153:66"><name pos:start="153:55" pos:end="153:58">argv</name><index pos:start="153:59" pos:end="153:66">[<expr pos:start="153:60" pos:end="153:65"><name pos:start="153:60" pos:end="153:65">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="155:9" pos:end="155:17">return <expr pos:start="155:16" pos:end="155:16"><literal type="number" pos:start="155:16" pos:end="155:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:35">(<expr pos:start="161:9" pos:end="161:34"><operator pos:start="161:9" pos:end="161:9">!</operator><name pos:start="161:10" pos:end="161:14">Pflag</name> <operator pos:start="161:16" pos:end="161:17">&amp;&amp;</operator> <operator pos:start="161:19" pos:end="161:19">(</operator><name pos:start="161:20" pos:end="161:24">lflag</name> <operator pos:start="161:26" pos:end="161:27">||</operator> <name pos:start="161:29" pos:end="161:33">sflag</name><operator pos:start="161:34" pos:end="161:34">)</operator></expr>)</condition> <block pos:start="161:37" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:40">

        <return pos:start="163:9" pos:end="163:40">return <expr pos:start="163:16" pos:end="163:39"><call pos:start="163:16" pos:end="163:39"><name pos:start="163:16" pos:end="163:28">command_usage</name><argument_list pos:start="163:29" pos:end="163:39">(<argument pos:start="163:30" pos:end="163:38"><expr pos:start="163:30" pos:end="163:38"><operator pos:start="163:30" pos:end="163:30">&amp;</operator><name pos:start="163:31" pos:end="163:38">read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="173:5"><if pos:start="169:5" pos:end="173:5">if <condition pos:start="169:8" pos:end="169:15">(<expr pos:start="169:9" pos:end="169:14"><operator pos:start="169:9" pos:end="169:9">!</operator><name pos:start="169:10" pos:end="169:14">lflag</name></expr>)</condition> <block pos:start="169:17" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:47">

        <expr_stmt pos:start="171:9" pos:end="171:47"><expr pos:start="171:9" pos:end="171:46"><name pos:start="171:9" pos:end="171:21">pattern_count</name> <operator pos:start="171:23" pos:end="171:23">=</operator> <name pos:start="171:25" pos:end="171:29">count</name> <operator pos:start="171:31" pos:end="171:31">-</operator> <name pos:start="171:33" pos:end="171:46">pattern_offset</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="177:5" pos:end="183:5"><if pos:start="177:5" pos:end="183:5">if <condition pos:start="177:8" pos:end="177:72">(<expr pos:start="177:9" pos:end="177:71"><operator pos:start="177:9" pos:end="177:9">(</operator><name pos:start="177:10" pos:end="177:22">pattern_count</name> <operator pos:start="177:24" pos:end="177:24">&lt;</operator> <literal type="number" pos:start="177:26" pos:end="177:26">0</literal><operator pos:start="177:27" pos:end="177:27">)</operator> <operator pos:start="177:29" pos:end="177:30">||</operator> <operator pos:start="177:32" pos:end="177:32">(</operator><name pos:start="177:33" pos:end="177:45">pattern_count</name> <operator pos:start="177:47" pos:end="177:47">+</operator> <name pos:start="177:49" pos:end="177:62">pattern_offset</name> <operator pos:start="177:64" pos:end="177:64">&gt;</operator> <name pos:start="177:66" pos:end="177:70">count</name><operator pos:start="177:71" pos:end="177:71">)</operator></expr>)</condition>  <block pos:start="177:75" pos:end="183:5">{<block_content pos:start="179:9" pos:end="181:17">

        <expr_stmt pos:start="179:9" pos:end="179:72"><expr pos:start="179:9" pos:end="179:71"><call pos:start="179:9" pos:end="179:71"><name pos:start="179:9" pos:end="179:14">printf</name><argument_list pos:start="179:15" pos:end="179:71">(<argument pos:start="179:16" pos:end="179:70"><expr pos:start="179:16" pos:end="179:70"><literal type="string" pos:start="179:16" pos:end="179:70">"pattern verification range exceeds end of read data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="181:9" pos:end="181:17">return <expr pos:start="181:16" pos:end="181:16"><literal type="number" pos:start="181:16" pos:end="181:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="209:5"><if pos:start="187:5" pos:end="209:5">if <condition pos:start="187:8" pos:end="187:15">(<expr pos:start="187:9" pos:end="187:14"><operator pos:start="187:9" pos:end="187:9">!</operator><name pos:start="187:10" pos:end="187:14">pflag</name></expr>)</condition> <block pos:start="187:17" pos:end="209:5">{<block_content pos:start="189:9" pos:end="207:9">

        <if_stmt pos:start="189:9" pos:end="197:9"><if pos:start="189:9" pos:end="197:9">if <condition pos:start="189:12" pos:end="189:27">(<expr pos:start="189:13" pos:end="189:26"><name pos:start="189:13" pos:end="189:18">offset</name> <operator pos:start="189:20" pos:end="189:20">&amp;</operator> <literal type="number" pos:start="189:22" pos:end="189:26">0x1ff</literal></expr>)</condition> <block pos:start="189:29" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:21">

            <expr_stmt pos:start="191:13" pos:end="193:27"><expr pos:start="191:13" pos:end="193:26"><call pos:start="191:13" pos:end="193:26"><name pos:start="191:13" pos:end="191:18">printf</name><argument_list pos:start="191:19" pos:end="193:26">(<argument pos:start="191:20" pos:end="191:63"><expr pos:start="191:20" pos:end="191:63"><literal type="string" pos:start="191:20" pos:end="191:29">"offset %"</literal> <name pos:start="191:31" pos:end="191:36">PRId64</name> <literal type="string" pos:start="191:38" pos:end="191:63">" is not sector aligned\n"</literal></expr></argument>,

                   <argument pos:start="193:20" pos:end="193:25"><expr pos:start="193:20" pos:end="193:25"><name pos:start="193:20" pos:end="193:25">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="195:13" pos:end="195:21">return <expr pos:start="195:20" pos:end="195:20"><literal type="number" pos:start="195:20" pos:end="195:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="199:9" pos:end="207:9"><if pos:start="199:9" pos:end="207:9">if <condition pos:start="199:12" pos:end="199:26">(<expr pos:start="199:13" pos:end="199:25"><name pos:start="199:13" pos:end="199:17">count</name> <operator pos:start="199:19" pos:end="199:19">&amp;</operator> <literal type="number" pos:start="199:21" pos:end="199:25">0x1ff</literal></expr>)</condition> <block pos:start="199:28" pos:end="207:9">{<block_content pos:start="201:13" pos:end="205:21">

            <expr_stmt pos:start="201:13" pos:end="203:26"><expr pos:start="201:13" pos:end="203:25"><call pos:start="201:13" pos:end="203:25"><name pos:start="201:13" pos:end="201:18">printf</name><argument_list pos:start="201:19" pos:end="203:25">(<argument pos:start="201:20" pos:end="201:53"><expr pos:start="201:20" pos:end="201:53"><literal type="string" pos:start="201:20" pos:end="201:53">"count %d is not sector aligned\n"</literal></expr></argument>,

                   <argument pos:start="203:20" pos:end="203:24"><expr pos:start="203:20" pos:end="203:24"><name pos:start="203:20" pos:end="203:24">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="205:13" pos:end="205:21">return <expr pos:start="205:20" pos:end="205:20"><literal type="number" pos:start="205:20" pos:end="205:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:37"><expr pos:start="213:5" pos:end="213:36"><name pos:start="213:5" pos:end="213:7">buf</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <call pos:start="213:11" pos:end="213:36"><name pos:start="213:11" pos:end="213:23">qemu_io_alloc</name><argument_list pos:start="213:24" pos:end="213:36">(<argument pos:start="213:25" pos:end="213:29"><expr pos:start="213:25" pos:end="213:29"><name pos:start="213:25" pos:end="213:29">count</name></expr></argument>, <argument pos:start="213:32" pos:end="213:35"><expr pos:start="213:32" pos:end="213:35"><literal type="number" pos:start="213:32" pos:end="213:35">0xab</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:28"><expr pos:start="217:5" pos:end="217:27"><call pos:start="217:5" pos:end="217:27"><name pos:start="217:5" pos:end="217:16">gettimeofday</name><argument_list pos:start="217:17" pos:end="217:27">(<argument pos:start="217:18" pos:end="217:20"><expr pos:start="217:18" pos:end="217:20"><operator pos:start="217:18" pos:end="217:18">&amp;</operator><name pos:start="217:19" pos:end="217:20">t1</name></expr></argument>, <argument pos:start="217:23" pos:end="217:26"><expr pos:start="217:23" pos:end="217:26"><name pos:start="217:23" pos:end="217:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="231:5"><if pos:start="219:5" pos:end="223:5">if <condition pos:start="219:8" pos:end="219:14">(<expr pos:start="219:9" pos:end="219:13"><name pos:start="219:9" pos:end="219:13">pflag</name></expr>)</condition> <block pos:start="219:16" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:51">

        <expr_stmt pos:start="221:9" pos:end="221:51"><expr pos:start="221:9" pos:end="221:50"><name pos:start="221:9" pos:end="221:11">cnt</name> <operator pos:start="221:13" pos:end="221:13">=</operator> <call pos:start="221:15" pos:end="221:50"><name pos:start="221:15" pos:end="221:22">do_pread</name><argument_list pos:start="221:23" pos:end="221:50">(<argument pos:start="221:24" pos:end="221:26"><expr pos:start="221:24" pos:end="221:26"><name pos:start="221:24" pos:end="221:26">buf</name></expr></argument>, <argument pos:start="221:29" pos:end="221:34"><expr pos:start="221:29" pos:end="221:34"><name pos:start="221:29" pos:end="221:34">offset</name></expr></argument>, <argument pos:start="221:37" pos:end="221:41"><expr pos:start="221:37" pos:end="221:41"><name pos:start="221:37" pos:end="221:41">count</name></expr></argument>, <argument pos:start="221:44" pos:end="221:49"><expr pos:start="221:44" pos:end="221:49"><operator pos:start="221:44" pos:end="221:44">&amp;</operator><name pos:start="221:45" pos:end="221:49">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="223:7" pos:end="227:5">else if <condition pos:start="223:15" pos:end="223:21">(<expr pos:start="223:16" pos:end="223:20"><name pos:start="223:16" pos:end="223:20">bflag</name></expr>)</condition> <block pos:start="223:23" pos:end="227:5">{<block_content pos:start="225:9" pos:end="225:58">

        <expr_stmt pos:start="225:9" pos:end="225:58"><expr pos:start="225:9" pos:end="225:57"><name pos:start="225:9" pos:end="225:11">cnt</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <call pos:start="225:15" pos:end="225:57"><name pos:start="225:15" pos:end="225:29">do_load_vmstate</name><argument_list pos:start="225:30" pos:end="225:57">(<argument pos:start="225:31" pos:end="225:33"><expr pos:start="225:31" pos:end="225:33"><name pos:start="225:31" pos:end="225:33">buf</name></expr></argument>, <argument pos:start="225:36" pos:end="225:41"><expr pos:start="225:36" pos:end="225:41"><name pos:start="225:36" pos:end="225:41">offset</name></expr></argument>, <argument pos:start="225:44" pos:end="225:48"><expr pos:start="225:44" pos:end="225:48"><name pos:start="225:44" pos:end="225:48">count</name></expr></argument>, <argument pos:start="225:51" pos:end="225:56"><expr pos:start="225:51" pos:end="225:56"><operator pos:start="225:51" pos:end="225:51">&amp;</operator><name pos:start="225:52" pos:end="225:56">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="227:7" pos:end="231:5">else <block pos:start="227:12" pos:end="231:5">{<block_content pos:start="229:9" pos:end="229:50">

        <expr_stmt pos:start="229:9" pos:end="229:50"><expr pos:start="229:9" pos:end="229:49"><name pos:start="229:9" pos:end="229:11">cnt</name> <operator pos:start="229:13" pos:end="229:13">=</operator> <call pos:start="229:15" pos:end="229:49"><name pos:start="229:15" pos:end="229:21">do_read</name><argument_list pos:start="229:22" pos:end="229:49">(<argument pos:start="229:23" pos:end="229:25"><expr pos:start="229:23" pos:end="229:25"><name pos:start="229:23" pos:end="229:25">buf</name></expr></argument>, <argument pos:start="229:28" pos:end="229:33"><expr pos:start="229:28" pos:end="229:33"><name pos:start="229:28" pos:end="229:33">offset</name></expr></argument>, <argument pos:start="229:36" pos:end="229:40"><expr pos:start="229:36" pos:end="229:40"><name pos:start="229:36" pos:end="229:40">count</name></expr></argument>, <argument pos:start="229:43" pos:end="229:48"><expr pos:start="229:43" pos:end="229:48"><operator pos:start="229:43" pos:end="229:43">&amp;</operator><name pos:start="229:44" pos:end="229:48">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:28"><expr pos:start="233:5" pos:end="233:27"><call pos:start="233:5" pos:end="233:27"><name pos:start="233:5" pos:end="233:16">gettimeofday</name><argument_list pos:start="233:17" pos:end="233:27">(<argument pos:start="233:18" pos:end="233:20"><expr pos:start="233:18" pos:end="233:20"><operator pos:start="233:18" pos:end="233:18">&amp;</operator><name pos:start="233:19" pos:end="233:20">t2</name></expr></argument>, <argument pos:start="233:23" pos:end="233:26"><expr pos:start="233:23" pos:end="233:26"><name pos:start="233:23" pos:end="233:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="237:5" pos:end="243:5"><if pos:start="237:5" pos:end="243:5">if <condition pos:start="237:8" pos:end="237:16">(<expr pos:start="237:9" pos:end="237:15"><name pos:start="237:9" pos:end="237:11">cnt</name> <operator pos:start="237:13" pos:end="237:13">&lt;</operator> <literal type="number" pos:start="237:15" pos:end="237:15">0</literal></expr>)</condition> <block pos:start="237:18" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:17">

        <expr_stmt pos:start="239:9" pos:end="239:52"><expr pos:start="239:9" pos:end="239:51"><call pos:start="239:9" pos:end="239:51"><name pos:start="239:9" pos:end="239:14">printf</name><argument_list pos:start="239:15" pos:end="239:51">(<argument pos:start="239:16" pos:end="239:34"><expr pos:start="239:16" pos:end="239:34"><literal type="string" pos:start="239:16" pos:end="239:34">"read failed: %s\n"</literal></expr></argument>, <argument pos:start="239:37" pos:end="239:50"><expr pos:start="239:37" pos:end="239:50"><call pos:start="239:37" pos:end="239:50"><name pos:start="239:37" pos:end="239:44">strerror</name><argument_list pos:start="239:45" pos:end="239:50">(<argument pos:start="239:46" pos:end="239:49"><expr pos:start="239:46" pos:end="239:49"><operator pos:start="239:46" pos:end="239:46">-</operator><name pos:start="239:47" pos:end="239:49">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="241:9" pos:end="241:17">goto <name pos:start="241:14" pos:end="241:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="247:5" pos:end="265:5"><if pos:start="247:5" pos:end="265:5">if <condition pos:start="247:8" pos:end="247:14">(<expr pos:start="247:9" pos:end="247:13"><name pos:start="247:9" pos:end="247:13">Pflag</name></expr>)</condition> <block pos:start="247:16" pos:end="265:5">{<block_content pos:start="249:9" pos:end="263:22">

        <decl_stmt pos:start="249:9" pos:end="249:46"><decl pos:start="249:9" pos:end="249:45"><type pos:start="249:9" pos:end="249:14"><name pos:start="249:9" pos:end="249:12">void</name> <modifier pos:start="249:14" pos:end="249:14">*</modifier></type><name pos:start="249:15" pos:end="249:21">cmp_buf</name> <init pos:start="249:23" pos:end="249:45">= <expr pos:start="249:25" pos:end="249:45"><call pos:start="249:25" pos:end="249:45"><name pos:start="249:25" pos:end="249:30">malloc</name><argument_list pos:start="249:31" pos:end="249:45">(<argument pos:start="249:32" pos:end="249:44"><expr pos:start="249:32" pos:end="249:44"><name pos:start="249:32" pos:end="249:44">pattern_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:48"><expr pos:start="251:9" pos:end="251:47"><call pos:start="251:9" pos:end="251:47"><name pos:start="251:9" pos:end="251:14">memset</name><argument_list pos:start="251:15" pos:end="251:47">(<argument pos:start="251:16" pos:end="251:22"><expr pos:start="251:16" pos:end="251:22"><name pos:start="251:16" pos:end="251:22">cmp_buf</name></expr></argument>, <argument pos:start="251:25" pos:end="251:31"><expr pos:start="251:25" pos:end="251:31"><name pos:start="251:25" pos:end="251:31">pattern</name></expr></argument>, <argument pos:start="251:34" pos:end="251:46"><expr pos:start="251:34" pos:end="251:46"><name pos:start="251:34" pos:end="251:46">pattern_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="253:9" pos:end="261:9"><if pos:start="253:9" pos:end="261:9">if <condition pos:start="253:12" pos:end="253:65">(<expr pos:start="253:13" pos:end="253:64"><call pos:start="253:13" pos:end="253:64"><name pos:start="253:13" pos:end="253:18">memcmp</name><argument_list pos:start="253:19" pos:end="253:64">(<argument pos:start="253:20" pos:end="253:39"><expr pos:start="253:20" pos:end="253:39"><name pos:start="253:20" pos:end="253:22">buf</name> <operator pos:start="253:24" pos:end="253:24">+</operator> <name pos:start="253:26" pos:end="253:39">pattern_offset</name></expr></argument>, <argument pos:start="253:42" pos:end="253:48"><expr pos:start="253:42" pos:end="253:48"><name pos:start="253:42" pos:end="253:48">cmp_buf</name></expr></argument>, <argument pos:start="253:51" pos:end="253:63"><expr pos:start="253:51" pos:end="253:63"><name pos:start="253:51" pos:end="253:63">pattern_count</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="253:67" pos:end="261:9">{<block_content pos:start="255:13" pos:end="259:59">

            <expr_stmt pos:start="255:13" pos:end="259:59"><expr pos:start="255:13" pos:end="259:58"><call pos:start="255:13" pos:end="259:58"><name pos:start="255:13" pos:end="255:18">printf</name><argument_list pos:start="255:19" pos:end="259:58">(<argument pos:start="255:20" pos:end="257:40"><expr pos:start="255:20" pos:end="257:40"><literal type="string" pos:start="255:20" pos:end="255:60">"Pattern verification failed at offset %"</literal>

                   <name pos:start="257:20" pos:end="257:25">PRId64</name> <literal type="string" pos:start="257:27" pos:end="257:40">", %d bytes\n"</literal></expr></argument>,

                   <argument pos:start="259:20" pos:end="259:42"><expr pos:start="259:20" pos:end="259:42"><name pos:start="259:20" pos:end="259:25">offset</name> <operator pos:start="259:27" pos:end="259:27">+</operator> <name pos:start="259:29" pos:end="259:42">pattern_offset</name></expr></argument>, <argument pos:start="259:45" pos:end="259:57"><expr pos:start="259:45" pos:end="259:57"><name pos:start="259:45" pos:end="259:57">pattern_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:22"><expr pos:start="263:9" pos:end="263:21"><call pos:start="263:9" pos:end="263:21"><name pos:start="263:9" pos:end="263:12">free</name><argument_list pos:start="263:13" pos:end="263:21">(<argument pos:start="263:14" pos:end="263:20"><expr pos:start="263:14" pos:end="263:20"><name pos:start="263:14" pos:end="263:20">cmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="269:5" pos:end="273:5"><if pos:start="269:5" pos:end="273:5">if <condition pos:start="269:8" pos:end="269:14">(<expr pos:start="269:9" pos:end="269:13"><name pos:start="269:9" pos:end="269:13">qflag</name></expr>)</condition> <block pos:start="269:16" pos:end="273:5">{<block_content pos:start="271:9" pos:end="271:17">

        <goto pos:start="271:9" pos:end="271:17">goto <name pos:start="271:14" pos:end="271:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="277:5" pos:end="281:5"><if pos:start="277:5" pos:end="281:5">if <condition pos:start="277:8" pos:end="277:14">(<expr pos:start="277:9" pos:end="277:13"><name pos:start="277:9" pos:end="277:13">vflag</name></expr>)</condition> <block pos:start="277:16" pos:end="281:5">{<block_content pos:start="279:9" pos:end="279:40">

        <expr_stmt pos:start="279:9" pos:end="279:40"><expr pos:start="279:9" pos:end="279:39"><call pos:start="279:9" pos:end="279:39"><name pos:start="279:9" pos:end="279:19">dump_buffer</name><argument_list pos:start="279:20" pos:end="279:39">(<argument pos:start="279:21" pos:end="279:23"><expr pos:start="279:21" pos:end="279:23"><name pos:start="279:21" pos:end="279:23">buf</name></expr></argument>, <argument pos:start="279:26" pos:end="279:31"><expr pos:start="279:26" pos:end="279:31"><name pos:start="279:26" pos:end="279:31">offset</name></expr></argument>, <argument pos:start="279:34" pos:end="279:38"><expr pos:start="279:34" pos:end="279:38"><name pos:start="279:34" pos:end="279:38">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="285:5" pos:end="285:60">/* Finally, report back -- -C gives a parsable format */</comment>

    <expr_stmt pos:start="287:5" pos:end="287:22"><expr pos:start="287:5" pos:end="287:21"><name pos:start="287:5" pos:end="287:6">t2</name> <operator pos:start="287:8" pos:end="287:8">=</operator> <call pos:start="287:10" pos:end="287:21"><name pos:start="287:10" pos:end="287:13">tsub</name><argument_list pos:start="287:14" pos:end="287:21">(<argument pos:start="287:15" pos:end="287:16"><expr pos:start="287:15" pos:end="287:16"><name pos:start="287:15" pos:end="287:16">t2</name></expr></argument>, <argument pos:start="287:19" pos:end="287:20"><expr pos:start="287:19" pos:end="287:20"><name pos:start="287:19" pos:end="287:20">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:64"><expr pos:start="289:5" pos:end="289:63"><call pos:start="289:5" pos:end="289:63"><name pos:start="289:5" pos:end="289:16">print_report</name><argument_list pos:start="289:17" pos:end="289:63">(<argument pos:start="289:18" pos:end="289:23"><expr pos:start="289:18" pos:end="289:23"><literal type="string" pos:start="289:18" pos:end="289:23">"read"</literal></expr></argument>, <argument pos:start="289:26" pos:end="289:28"><expr pos:start="289:26" pos:end="289:28"><operator pos:start="289:26" pos:end="289:26">&amp;</operator><name pos:start="289:27" pos:end="289:28">t2</name></expr></argument>, <argument pos:start="289:31" pos:end="289:36"><expr pos:start="289:31" pos:end="289:36"><name pos:start="289:31" pos:end="289:36">offset</name></expr></argument>, <argument pos:start="289:39" pos:end="289:43"><expr pos:start="289:39" pos:end="289:43"><name pos:start="289:39" pos:end="289:43">count</name></expr></argument>, <argument pos:start="289:46" pos:end="289:50"><expr pos:start="289:46" pos:end="289:50"><name pos:start="289:46" pos:end="289:50">total</name></expr></argument>, <argument pos:start="289:53" pos:end="289:55"><expr pos:start="289:53" pos:end="289:55"><name pos:start="289:53" pos:end="289:55">cnt</name></expr></argument>, <argument pos:start="289:58" pos:end="289:62"><expr pos:start="289:58" pos:end="289:62"><name pos:start="289:58" pos:end="289:62">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="293:1" pos:end="293:4"><name pos:start="293:1" pos:end="293:3">out</name>:</label>

    <expr_stmt pos:start="295:5" pos:end="295:22"><expr pos:start="295:5" pos:end="295:21"><call pos:start="295:5" pos:end="295:21"><name pos:start="295:5" pos:end="295:16">qemu_io_free</name><argument_list pos:start="295:17" pos:end="295:21">(<argument pos:start="295:18" pos:end="295:20"><expr pos:start="295:18" pos:end="295:20"><name pos:start="295:18" pos:end="295:20">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="299:5" pos:end="299:13">return <expr pos:start="299:12" pos:end="299:12"><literal type="number" pos:start="299:12" pos:end="299:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
