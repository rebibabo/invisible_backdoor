<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25033.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">pmac_ide_transfer</name><parameter_list pos:start="1:30" pos:end="1:43">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:40"><name pos:start="1:31" pos:end="1:38">DBDMA_io</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">io</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:32">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">MACIOIDEState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">m</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">io</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IDEState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:43">= <expr pos:start="7:19" pos:end="7:43"><call pos:start="7:19" pos:end="7:43"><name pos:start="7:19" pos:end="7:34">idebus_active_if</name><argument_list pos:start="7:35" pos:end="7:43">(<argument pos:start="7:36" pos:end="7:42"><expr pos:start="7:36" pos:end="7:42"><operator pos:start="7:36" pos:end="7:36">&amp;</operator><name pos:start="7:37" pos:end="7:42"><name pos:start="7:37" pos:end="7:37">m</name><operator pos:start="7:38" pos:end="7:39">-&gt;</operator><name pos:start="7:40" pos:end="7:42">bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:24"><expr pos:start="11:5" pos:end="11:23"><call pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:17">MACIO_DPRINTF</name><argument_list pos:start="11:18" pos:end="11:23">(<argument pos:start="11:19" pos:end="11:22"><expr pos:start="11:19" pos:end="11:22"><literal type="string" pos:start="11:19" pos:end="11:22">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:21">io_buffer_size</name></name> <operator pos:start="15:23" pos:end="15:23">=</operator> <literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="69:5"><if pos:start="17:5" pos:end="69:5">if <condition pos:start="17:8" pos:end="17:32">(<expr pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:21">drive_kind</name></name> <operator pos:start="17:23" pos:end="17:24">==</operator> <name pos:start="17:26" pos:end="17:31">IDE_CD</name></expr>)</condition> <block pos:start="17:34" pos:end="69:5">{<block_content pos:start="23:9" pos:end="67:15">



        <comment type="block" pos:start="21:9" pos:end="21:50">/* Handle non-block ATAPI DMA transfers */</comment>

        <if_stmt pos:start="23:9" pos:end="57:9"><if pos:start="23:9" pos:end="57:9">if <condition pos:start="23:12" pos:end="23:25">(<expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:18">lba</name></name> <operator pos:start="23:20" pos:end="23:21">==</operator> <operator pos:start="23:23" pos:end="23:23">-</operator><literal type="number" pos:start="23:24" pos:end="23:24">1</literal></expr>)</condition> <block pos:start="23:27" pos:end="57:9">{<block_content pos:start="25:13" pos:end="55:19">

            <expr_stmt pos:start="25:13" pos:end="25:70"><expr pos:start="25:13" pos:end="25:69"><name pos:start="25:13" pos:end="25:29"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:29">io_buffer_size</name></name> <operator pos:start="25:31" pos:end="25:31">=</operator> <call pos:start="25:33" pos:end="25:69"><name pos:start="25:33" pos:end="25:35">MIN</name><argument_list pos:start="25:36" pos:end="25:69">(<argument pos:start="25:37" pos:end="25:43"><expr pos:start="25:37" pos:end="25:43"><name pos:start="25:37" pos:end="25:43"><name pos:start="25:37" pos:end="25:38">io</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:43">len</name></name></expr></argument>, <argument pos:start="25:46" pos:end="25:68"><expr pos:start="25:46" pos:end="25:68"><name pos:start="25:46" pos:end="25:68"><name pos:start="25:46" pos:end="25:46">s</name><operator pos:start="25:47" pos:end="25:48">-&gt;</operator><name pos:start="25:49" pos:end="25:68">packet_transfer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="29:46"><expr pos:start="27:13" pos:end="29:45"><call pos:start="27:13" pos:end="29:45"><name pos:start="27:13" pos:end="27:28">block_acct_start</name><argument_list pos:start="27:29" pos:end="29:45">(<argument pos:start="27:30" pos:end="27:50"><expr pos:start="27:30" pos:end="27:50"><call pos:start="27:30" pos:end="27:50"><name pos:start="27:30" pos:end="27:43">bdrv_get_stats</name><argument_list pos:start="27:44" pos:end="27:50">(<argument pos:start="27:45" pos:end="27:49"><expr pos:start="27:45" pos:end="27:49"><name pos:start="27:45" pos:end="27:49"><name pos:start="27:45" pos:end="27:45">s</name><operator pos:start="27:46" pos:end="27:47">-&gt;</operator><name pos:start="27:48" pos:end="27:49">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:53" pos:end="27:60"><expr pos:start="27:53" pos:end="27:60"><operator pos:start="27:53" pos:end="27:53">&amp;</operator><name pos:start="27:54" pos:end="27:60"><name pos:start="27:54" pos:end="27:54">s</name><operator pos:start="27:55" pos:end="27:56">-&gt;</operator><name pos:start="27:57" pos:end="27:60">acct</name></name></expr></argument>, <argument pos:start="27:63" pos:end="27:79"><expr pos:start="27:63" pos:end="27:79"><name pos:start="27:63" pos:end="27:79"><name pos:start="27:63" pos:end="27:63">s</name><operator pos:start="27:64" pos:end="27:65">-&gt;</operator><name pos:start="27:66" pos:end="27:79">io_buffer_size</name></name></expr></argument>,

                             <argument pos:start="29:30" pos:end="29:44"><expr pos:start="29:30" pos:end="29:44"><name pos:start="29:30" pos:end="29:44">BLOCK_ACCT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="33:45"><expr pos:start="31:13" pos:end="33:44"><call pos:start="31:13" pos:end="33:44"><name pos:start="31:13" pos:end="31:25">MACIO_DPRINTF</name><argument_list pos:start="31:26" pos:end="33:44">(<argument pos:start="31:27" pos:end="31:67"><expr pos:start="31:27" pos:end="31:67"><literal type="string" pos:start="31:27" pos:end="31:67">"non-block ATAPI DMA transfer size: %d\n"</literal></expr></argument>,

                          <argument pos:start="33:27" pos:end="33:43"><expr pos:start="33:27" pos:end="33:43"><name pos:start="33:27" pos:end="33:43"><name pos:start="33:27" pos:end="33:27">s</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:43">io_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="37:13" pos:end="37:62">/* Copy ATAPI buffer directly to RAM and finish */</comment>

            <expr_stmt pos:start="39:13" pos:end="41:57"><expr pos:start="39:13" pos:end="41:56"><call pos:start="39:13" pos:end="41:56"><name pos:start="39:13" pos:end="39:37">cpu_physical_memory_write</name><argument_list pos:start="39:38" pos:end="41:56">(<argument pos:start="39:39" pos:end="39:46"><expr pos:start="39:39" pos:end="39:46"><name pos:start="39:39" pos:end="39:46"><name pos:start="39:39" pos:end="39:40">io</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:46">addr</name></name></expr></argument>, <argument pos:start="39:49" pos:end="39:60"><expr pos:start="39:49" pos:end="39:60"><name pos:start="39:49" pos:end="39:60"><name pos:start="39:49" pos:end="39:49">s</name><operator pos:start="39:50" pos:end="39:51">-&gt;</operator><name pos:start="39:52" pos:end="39:60">io_buffer</name></name></expr></argument>,

                                      <argument pos:start="41:39" pos:end="41:55"><expr pos:start="41:39" pos:end="41:55"><name pos:start="41:39" pos:end="41:55"><name pos:start="41:39" pos:end="41:39">s</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:55">io_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:32"><expr pos:start="43:13" pos:end="43:31"><call pos:start="43:13" pos:end="43:31"><name pos:start="43:13" pos:end="43:28">ide_atapi_cmd_ok</name><argument_list pos:start="43:29" pos:end="43:31">(<argument pos:start="43:30" pos:end="43:30"><expr pos:start="43:30" pos:end="43:30"><name pos:start="43:30" pos:end="43:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:13">m</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:25">dma_active</name></name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:33">false</name></expr>;</expr_stmt>



            <expr_stmt pos:start="49:13" pos:end="49:67"><expr pos:start="49:13" pos:end="49:66"><call pos:start="49:13" pos:end="49:66"><name pos:start="49:13" pos:end="49:25">MACIO_DPRINTF</name><argument_list pos:start="49:26" pos:end="49:66">(<argument pos:start="49:27" pos:end="49:65"><expr pos:start="49:27" pos:end="49:65"><literal type="string" pos:start="49:27" pos:end="49:65">"end of non-block ATAPI DMA transfer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:61"><expr pos:start="51:13" pos:end="51:60"><call pos:start="51:13" pos:end="51:60"><name pos:start="51:13" pos:end="51:27">block_acct_done</name><argument_list pos:start="51:28" pos:end="51:60">(<argument pos:start="51:29" pos:end="51:49"><expr pos:start="51:29" pos:end="51:49"><call pos:start="51:29" pos:end="51:49"><name pos:start="51:29" pos:end="51:42">bdrv_get_stats</name><argument_list pos:start="51:43" pos:end="51:49">(<argument pos:start="51:44" pos:end="51:48"><expr pos:start="51:44" pos:end="51:48"><name pos:start="51:44" pos:end="51:48"><name pos:start="51:44" pos:end="51:44">s</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:48">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:52" pos:end="51:59"><expr pos:start="51:52" pos:end="51:59"><operator pos:start="51:52" pos:end="51:52">&amp;</operator><name pos:start="51:53" pos:end="51:59"><name pos:start="51:53" pos:end="51:53">s</name><operator pos:start="51:54" pos:end="51:55">-&gt;</operator><name pos:start="51:56" pos:end="51:59">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:28"><expr pos:start="53:13" pos:end="53:27"><call pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:14">io</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:23">dma_end</name></name><argument_list pos:start="53:24" pos:end="53:27">(<argument pos:start="53:25" pos:end="53:26"><expr pos:start="53:25" pos:end="53:26"><name pos:start="53:25" pos:end="53:26">io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="63:42"><expr pos:start="61:9" pos:end="63:41"><call pos:start="61:9" pos:end="63:41"><name pos:start="61:9" pos:end="61:24">block_acct_start</name><argument_list pos:start="61:25" pos:end="63:41">(<argument pos:start="61:26" pos:end="61:46"><expr pos:start="61:26" pos:end="61:46"><call pos:start="61:26" pos:end="61:46"><name pos:start="61:26" pos:end="61:39">bdrv_get_stats</name><argument_list pos:start="61:40" pos:end="61:46">(<argument pos:start="61:41" pos:end="61:45"><expr pos:start="61:41" pos:end="61:45"><name pos:start="61:41" pos:end="61:45"><name pos:start="61:41" pos:end="61:41">s</name><operator pos:start="61:42" pos:end="61:43">-&gt;</operator><name pos:start="61:44" pos:end="61:45">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:49" pos:end="61:56"><expr pos:start="61:49" pos:end="61:56"><operator pos:start="61:49" pos:end="61:49">&amp;</operator><name pos:start="61:50" pos:end="61:56"><name pos:start="61:50" pos:end="61:50">s</name><operator pos:start="61:51" pos:end="61:52">-&gt;</operator><name pos:start="61:53" pos:end="61:56">acct</name></name></expr></argument>, <argument pos:start="61:59" pos:end="61:65"><expr pos:start="61:59" pos:end="61:65"><name pos:start="61:59" pos:end="61:65"><name pos:start="61:59" pos:end="61:60">io</name><operator pos:start="61:61" pos:end="61:62">-&gt;</operator><name pos:start="61:63" pos:end="61:65">len</name></name></expr></argument>,

                         <argument pos:start="63:26" pos:end="63:40"><expr pos:start="63:26" pos:end="63:40"><name pos:start="63:26" pos:end="63:40">BLOCK_ACCT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:42"><expr pos:start="65:9" pos:end="65:41"><call pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:34">pmac_ide_atapi_transfer_cb</name><argument_list pos:start="65:35" pos:end="65:41">(<argument pos:start="65:36" pos:end="65:37"><expr pos:start="65:36" pos:end="65:37"><name pos:start="65:36" pos:end="65:37">io</name></expr></argument>, <argument pos:start="65:40" pos:end="65:40"><expr pos:start="65:40" pos:end="65:40"><literal type="number" pos:start="65:40" pos:end="65:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="73:5" pos:end="95:5">switch <condition pos:start="73:12" pos:end="73:23">(<expr pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:22">dma_cmd</name></name></expr>)</condition> <block pos:start="73:25" pos:end="95:5">{<block_content pos:start="75:5" pos:end="93:14">

    <case pos:start="75:5" pos:end="75:22">case <expr pos:start="75:10" pos:end="75:21"><name pos:start="75:10" pos:end="75:21">IDE_DMA_READ</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="79:42"><expr pos:start="77:9" pos:end="79:41"><call pos:start="77:9" pos:end="79:41"><name pos:start="77:9" pos:end="77:24">block_acct_start</name><argument_list pos:start="77:25" pos:end="79:41">(<argument pos:start="77:26" pos:end="77:46"><expr pos:start="77:26" pos:end="77:46"><call pos:start="77:26" pos:end="77:46"><name pos:start="77:26" pos:end="77:39">bdrv_get_stats</name><argument_list pos:start="77:40" pos:end="77:46">(<argument pos:start="77:41" pos:end="77:45"><expr pos:start="77:41" pos:end="77:45"><name pos:start="77:41" pos:end="77:45"><name pos:start="77:41" pos:end="77:41">s</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:45">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:49" pos:end="77:56"><expr pos:start="77:49" pos:end="77:56"><operator pos:start="77:49" pos:end="77:49">&amp;</operator><name pos:start="77:50" pos:end="77:56"><name pos:start="77:50" pos:end="77:50">s</name><operator pos:start="77:51" pos:end="77:52">-&gt;</operator><name pos:start="77:53" pos:end="77:56">acct</name></name></expr></argument>, <argument pos:start="77:59" pos:end="77:65"><expr pos:start="77:59" pos:end="77:65"><name pos:start="77:59" pos:end="77:65"><name pos:start="77:59" pos:end="77:60">io</name><operator pos:start="77:61" pos:end="77:62">-&gt;</operator><name pos:start="77:63" pos:end="77:65">len</name></name></expr></argument>,

                         <argument pos:start="79:26" pos:end="79:40"><expr pos:start="79:26" pos:end="79:40"><name pos:start="79:26" pos:end="79:40">BLOCK_ACCT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:23">case <expr pos:start="83:10" pos:end="83:22"><name pos:start="83:10" pos:end="83:22">IDE_DMA_WRITE</name></expr>:</case>

        <expr_stmt pos:start="85:9" pos:end="87:43"><expr pos:start="85:9" pos:end="87:42"><call pos:start="85:9" pos:end="87:42"><name pos:start="85:9" pos:end="85:24">block_acct_start</name><argument_list pos:start="85:25" pos:end="87:42">(<argument pos:start="85:26" pos:end="85:46"><expr pos:start="85:26" pos:end="85:46"><call pos:start="85:26" pos:end="85:46"><name pos:start="85:26" pos:end="85:39">bdrv_get_stats</name><argument_list pos:start="85:40" pos:end="85:46">(<argument pos:start="85:41" pos:end="85:45"><expr pos:start="85:41" pos:end="85:45"><name pos:start="85:41" pos:end="85:45"><name pos:start="85:41" pos:end="85:41">s</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:45">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="85:49" pos:end="85:56"><expr pos:start="85:49" pos:end="85:56"><operator pos:start="85:49" pos:end="85:49">&amp;</operator><name pos:start="85:50" pos:end="85:56"><name pos:start="85:50" pos:end="85:50">s</name><operator pos:start="85:51" pos:end="85:52">-&gt;</operator><name pos:start="85:53" pos:end="85:56">acct</name></name></expr></argument>, <argument pos:start="85:59" pos:end="85:65"><expr pos:start="85:59" pos:end="85:65"><name pos:start="85:59" pos:end="85:65"><name pos:start="85:59" pos:end="85:60">io</name><operator pos:start="85:61" pos:end="85:62">-&gt;</operator><name pos:start="85:63" pos:end="85:65">len</name></name></expr></argument>,

                         <argument pos:start="87:26" pos:end="87:41"><expr pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:41">BLOCK_ACCT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <default pos:start="91:5" pos:end="91:12">default:</default>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="99:5" pos:end="99:19"><expr pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:6">io</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:16">requests</name></name><operator pos:start="99:17" pos:end="99:18">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:32"><expr pos:start="101:5" pos:end="101:31"><call pos:start="101:5" pos:end="101:31"><name pos:start="101:5" pos:end="101:24">pmac_ide_transfer_cb</name><argument_list pos:start="101:25" pos:end="101:31">(<argument pos:start="101:26" pos:end="101:27"><expr pos:start="101:26" pos:end="101:27"><name pos:start="101:26" pos:end="101:27">io</name></expr></argument>, <argument pos:start="101:30" pos:end="101:30"><expr pos:start="101:30" pos:end="101:30"><literal type="number" pos:start="101:30" pos:end="101:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
