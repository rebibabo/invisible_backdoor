<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20325.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:34">tta_decode_init</name><parameter_list pos:start="1:35" pos:end="1:58">(<parameter pos:start="1:36" pos:end="1:57"><decl pos:start="1:36" pos:end="1:57"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type> <name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="209:1">{<block_content pos:start="5:5" pos:end="207:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">TTAContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:25">avctx</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">total_frames</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:12">avctx</name></name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:20">avctx</name></expr>;</expr_stmt>



    <comment type="line" pos:start="15:5" pos:end="15:35">// 30bytes includes TTA1 header</comment>

    <if_stmt pos:start="17:5" pos:end="19:35"><if pos:start="17:5" pos:end="19:35">if <condition pos:start="17:8" pos:end="17:35">(<expr pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:13">avctx</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:29">extradata_size</name></name> <operator pos:start="17:31" pos:end="17:31">&lt;</operator> <literal type="number" pos:start="17:33" pos:end="17:34">22</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:35"><block_content pos:start="19:9" pos:end="19:35">

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:71"><expr pos:start="23:5" pos:end="23:70"><call pos:start="23:5" pos:end="23:70"><name pos:start="23:5" pos:end="23:17">init_get_bits</name><argument_list pos:start="23:18" pos:end="23:70">(<argument pos:start="23:19" pos:end="23:24"><expr pos:start="23:19" pos:end="23:24"><operator pos:start="23:19" pos:end="23:19">&amp;</operator><name pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:20">s</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:24">gb</name></name></expr></argument>, <argument pos:start="23:27" pos:end="23:42"><expr pos:start="23:27" pos:end="23:42"><name pos:start="23:27" pos:end="23:42"><name pos:start="23:27" pos:end="23:31">avctx</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:42">extradata</name></name></expr></argument>, <argument pos:start="23:45" pos:end="23:69"><expr pos:start="23:45" pos:end="23:69"><name pos:start="23:45" pos:end="23:65"><name pos:start="23:45" pos:end="23:49">avctx</name><operator pos:start="23:50" pos:end="23:51">-&gt;</operator><name pos:start="23:52" pos:end="23:65">extradata_size</name></name> <operator pos:start="23:67" pos:end="23:67">*</operator> <literal type="number" pos:start="23:69" pos:end="23:69">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="203:5"><if pos:start="25:5" pos:end="197:5">if <condition pos:start="25:8" pos:end="25:54">(<expr pos:start="25:9" pos:end="25:53"><call pos:start="25:9" pos:end="25:34"><name pos:start="25:9" pos:end="25:22">show_bits_long</name><argument_list pos:start="25:23" pos:end="25:34">(<argument pos:start="25:24" pos:end="25:29"><expr pos:start="25:24" pos:end="25:29"><operator pos:start="25:24" pos:end="25:24">&amp;</operator><name pos:start="25:25" pos:end="25:29"><name pos:start="25:25" pos:end="25:25">s</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:29">gb</name></name></expr></argument>, <argument pos:start="25:32" pos:end="25:33"><expr pos:start="25:32" pos:end="25:33"><literal type="number" pos:start="25:32" pos:end="25:33">32</literal></expr></argument>)</argument_list></call> <operator pos:start="25:36" pos:end="25:37">==</operator> <call pos:start="25:39" pos:end="25:53"><name pos:start="25:39" pos:end="25:45">AV_RL32</name><argument_list pos:start="25:46" pos:end="25:53">(<argument pos:start="25:47" pos:end="25:52"><expr pos:start="25:47" pos:end="25:52"><literal type="string" pos:start="25:47" pos:end="25:52">"TTA1"</literal></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="27:5" pos:end="197:5">{<block_content pos:start="29:9" pos:end="195:9">

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:52">(<expr pos:start="29:13" pos:end="29:51"><name pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:17">avctx</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:34">err_recognition</name></name> <operator pos:start="29:36" pos:end="29:36">&amp;</operator> <name pos:start="29:38" pos:end="29:51">AV_EF_CRCCHECK</name></expr>)</condition> <block pos:start="29:54" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:51">

            <expr_stmt pos:start="31:13" pos:end="31:63"><expr pos:start="31:13" pos:end="31:62"><name pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:24">crc_table</name></name> <operator pos:start="31:26" pos:end="31:26">=</operator> <call pos:start="31:28" pos:end="31:62"><name pos:start="31:28" pos:end="31:43">av_crc_get_table</name><argument_list pos:start="31:44" pos:end="31:62">(<argument pos:start="31:45" pos:end="31:61"><expr pos:start="31:45" pos:end="31:61"><name pos:start="31:45" pos:end="31:61">AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:51"><expr pos:start="33:13" pos:end="33:50"><call pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:25">tta_check_crc</name><argument_list pos:start="33:26" pos:end="33:50">(<argument pos:start="33:27" pos:end="33:27"><expr pos:start="33:27" pos:end="33:27"><name pos:start="33:27" pos:end="33:27">s</name></expr></argument>, <argument pos:start="33:30" pos:end="33:45"><expr pos:start="33:30" pos:end="33:45"><name pos:start="33:30" pos:end="33:45"><name pos:start="33:30" pos:end="33:34">avctx</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:45">extradata</name></name></expr></argument>, <argument pos:start="33:48" pos:end="33:49"><expr pos:start="33:48" pos:end="33:49"><literal type="number" pos:start="33:48" pos:end="33:49">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:23">/* signature */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><call pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:22">skip_bits_long</name><argument_list pos:start="41:23" pos:end="41:34">(<argument pos:start="41:24" pos:end="41:29"><expr pos:start="41:24" pos:end="41:29"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:29"><name pos:start="41:25" pos:end="41:25">s</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:29">gb</name></name></expr></argument>, <argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><literal type="number" pos:start="41:32" pos:end="41:33">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:41"><expr pos:start="45:9" pos:end="45:40"><name pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:17">format</name></name> <operator pos:start="45:19" pos:end="45:19">=</operator> <call pos:start="45:21" pos:end="45:40"><name pos:start="45:21" pos:end="45:28">get_bits</name><argument_list pos:start="45:29" pos:end="45:40">(<argument pos:start="45:30" pos:end="45:35"><expr pos:start="45:30" pos:end="45:35"><operator pos:start="45:30" pos:end="45:30">&amp;</operator><name pos:start="45:31" pos:end="45:35"><name pos:start="45:31" pos:end="45:31">s</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:35">gb</name></name></expr></argument>, <argument pos:start="45:38" pos:end="45:39"><expr pos:start="45:38" pos:end="45:39"><literal type="number" pos:start="45:38" pos:end="45:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:26">(<expr pos:start="47:13" pos:end="47:25"><name pos:start="47:13" pos:end="47:21"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:21">format</name></name> <operator pos:start="47:23" pos:end="47:23">&gt;</operator> <literal type="number" pos:start="47:25" pos:end="47:25">2</literal></expr>)</condition> <block pos:start="47:28" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:39">

            <expr_stmt pos:start="49:13" pos:end="49:60"><expr pos:start="49:13" pos:end="49:59"><call pos:start="49:13" pos:end="49:59"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="49:59">(<argument pos:start="49:20" pos:end="49:24"><expr pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:24">avctx</name></expr></argument>, <argument pos:start="49:27" pos:end="49:38"><expr pos:start="49:27" pos:end="49:38"><name pos:start="49:27" pos:end="49:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:41" pos:end="49:58"><expr pos:start="49:41" pos:end="49:58"><literal type="string" pos:start="49:41" pos:end="49:58">"Invalid format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:39">return <expr pos:start="51:20" pos:end="51:38"><name pos:start="51:20" pos:end="51:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="67:9"><if pos:start="55:9" pos:end="67:9">if <condition pos:start="55:12" pos:end="55:42">(<expr pos:start="55:13" pos:end="55:41"><name pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:21">format</name></name> <operator pos:start="55:23" pos:end="55:24">==</operator> <name pos:start="55:26" pos:end="55:41">FORMAT_ENCRYPTED</name></expr>)</condition> <block pos:start="55:44" pos:end="67:9">{<block_content pos:start="57:13" pos:end="65:59">

            <if_stmt pos:start="57:13" pos:end="63:13"><if pos:start="57:13" pos:end="63:13">if <condition pos:start="57:16" pos:end="57:25">(<expr pos:start="57:17" pos:end="57:24"><operator pos:start="57:17" pos:end="57:17">!</operator><name pos:start="57:18" pos:end="57:24"><name pos:start="57:18" pos:end="57:18">s</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:24">pass</name></name></expr>)</condition> <block pos:start="57:27" pos:end="63:13">{<block_content pos:start="59:17" pos:end="61:39">

                <expr_stmt pos:start="59:17" pos:end="59:120"><expr pos:start="59:17" pos:end="59:119"><call pos:start="59:17" pos:end="59:119"><name pos:start="59:17" pos:end="59:22">av_log</name><argument_list pos:start="59:23" pos:end="59:119">(<argument pos:start="59:24" pos:end="59:28"><expr pos:start="59:24" pos:end="59:28"><name pos:start="59:24" pos:end="59:28">avctx</name></expr></argument>, <argument pos:start="59:31" pos:end="59:42"><expr pos:start="59:31" pos:end="59:42"><name pos:start="59:31" pos:end="59:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:45" pos:end="59:118"><expr pos:start="59:45" pos:end="59:118"><literal type="string" pos:start="59:45" pos:end="59:118">"Missing password for encrypted stream. Please use the -password option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="61:17" pos:end="61:39">return <expr pos:start="61:24" pos:end="61:38"><call pos:start="61:24" pos:end="61:38"><name pos:start="61:24" pos:end="61:30">AVERROR</name><argument_list pos:start="61:31" pos:end="61:38">(<argument pos:start="61:32" pos:end="61:37"><expr pos:start="61:32" pos:end="61:37"><name pos:start="61:32" pos:end="61:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:59"><expr pos:start="65:13" pos:end="65:58"><call pos:start="65:13" pos:end="65:58"><name pos:start="65:13" pos:end="65:19">AV_WL64</name><argument_list pos:start="65:20" pos:end="65:58">(<argument pos:start="65:21" pos:end="65:31"><expr pos:start="65:21" pos:end="65:31"><name pos:start="65:21" pos:end="65:31"><name pos:start="65:21" pos:end="65:21">s</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:31">crc_pass</name></name></expr></argument>, <argument pos:start="65:34" pos:end="65:57"><expr pos:start="65:34" pos:end="65:57"><call pos:start="65:34" pos:end="65:57"><name pos:start="65:34" pos:end="65:48">tta_check_crc64</name><argument_list pos:start="65:49" pos:end="65:57">(<argument pos:start="65:50" pos:end="65:56"><expr pos:start="65:50" pos:end="65:56"><name pos:start="65:50" pos:end="65:56"><name pos:start="65:50" pos:end="65:50">s</name><operator pos:start="65:51" pos:end="65:52">-&gt;</operator><name pos:start="65:53" pos:end="65:56">pass</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:13">avctx</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:23">channels</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:37"><name pos:start="69:27" pos:end="69:27">s</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:37">channels</name></name> <operator pos:start="69:39" pos:end="69:39">=</operator> <call pos:start="69:41" pos:end="69:60"><name pos:start="69:41" pos:end="69:48">get_bits</name><argument_list pos:start="69:49" pos:end="69:60">(<argument pos:start="69:50" pos:end="69:55"><expr pos:start="69:50" pos:end="69:55"><operator pos:start="69:50" pos:end="69:50">&amp;</operator><name pos:start="69:51" pos:end="69:55"><name pos:start="69:51" pos:end="69:51">s</name><operator pos:start="69:52" pos:end="69:53">-&gt;</operator><name pos:start="69:54" pos:end="69:55">gb</name></name></expr></argument>, <argument pos:start="69:58" pos:end="69:59"><expr pos:start="69:58" pos:end="69:59"><literal type="number" pos:start="69:58" pos:end="69:59">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="73:71"><if pos:start="71:9" pos:end="73:71">if <condition pos:start="71:12" pos:end="71:47">(<expr pos:start="71:13" pos:end="71:46"><name pos:start="71:13" pos:end="71:23"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:23">channels</name></name> <operator pos:start="71:25" pos:end="71:25">&gt;</operator> <literal type="number" pos:start="71:27" pos:end="71:27">1</literal> <operator pos:start="71:29" pos:end="71:30">&amp;&amp;</operator> <name pos:start="71:32" pos:end="71:42"><name pos:start="71:32" pos:end="71:32">s</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:42">channels</name></name> <operator pos:start="71:44" pos:end="71:44">&lt;</operator> <literal type="number" pos:start="71:46" pos:end="71:46">9</literal></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:71"><block_content pos:start="73:13" pos:end="73:71">

            <expr_stmt pos:start="73:13" pos:end="73:71"><expr pos:start="73:13" pos:end="73:70"><name pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:17">avctx</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:33">channel_layout</name></name> <operator pos:start="73:35" pos:end="73:35">=</operator> <name pos:start="73:37" pos:end="73:70"><name pos:start="73:37" pos:end="73:55">tta_channel_layouts</name><index pos:start="73:56" pos:end="73:70">[<expr pos:start="73:57" pos:end="73:69"><name pos:start="73:57" pos:end="73:67"><name pos:start="73:57" pos:end="73:57">s</name><operator pos:start="73:58" pos:end="73:59">-&gt;</operator><name pos:start="73:60" pos:end="73:67">channels</name></name><operator pos:start="73:68" pos:end="73:68">-</operator><literal type="number" pos:start="73:69" pos:end="73:69">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:58"><expr pos:start="75:9" pos:end="75:57"><name pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:13">avctx</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:34">bits_per_raw_sample</name></name> <operator pos:start="75:36" pos:end="75:36">=</operator> <call pos:start="75:38" pos:end="75:57"><name pos:start="75:38" pos:end="75:45">get_bits</name><argument_list pos:start="75:46" pos:end="75:57">(<argument pos:start="75:47" pos:end="75:52"><expr pos:start="75:47" pos:end="75:52"><operator pos:start="75:47" pos:end="75:47">&amp;</operator><name pos:start="75:48" pos:end="75:52"><name pos:start="75:48" pos:end="75:48">s</name><operator pos:start="75:49" pos:end="75:50">-&gt;</operator><name pos:start="75:51" pos:end="75:52">gb</name></name></expr></argument>, <argument pos:start="75:55" pos:end="75:56"><expr pos:start="75:55" pos:end="75:56"><literal type="number" pos:start="75:55" pos:end="75:56">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:54"><expr pos:start="77:9" pos:end="77:53"><name pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:14">bps</name></name> <operator pos:start="77:16" pos:end="77:16">=</operator> <operator pos:start="77:18" pos:end="77:18">(</operator><name pos:start="77:19" pos:end="77:44"><name pos:start="77:19" pos:end="77:23">avctx</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:44">bits_per_raw_sample</name></name> <operator pos:start="77:46" pos:end="77:46">+</operator> <literal type="number" pos:start="77:48" pos:end="77:48">7</literal><operator pos:start="77:49" pos:end="77:49">)</operator> <operator pos:start="77:51" pos:end="77:51">/</operator> <literal type="number" pos:start="77:53" pos:end="77:53">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:55"><expr pos:start="79:9" pos:end="79:54"><name pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:13">avctx</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:26">sample_rate</name></name> <operator pos:start="79:28" pos:end="79:28">=</operator> <call pos:start="79:30" pos:end="79:54"><name pos:start="79:30" pos:end="79:42">get_bits_long</name><argument_list pos:start="79:43" pos:end="79:54">(<argument pos:start="79:44" pos:end="79:49"><expr pos:start="79:44" pos:end="79:49"><operator pos:start="79:44" pos:end="79:44">&amp;</operator><name pos:start="79:45" pos:end="79:49"><name pos:start="79:45" pos:end="79:45">s</name><operator pos:start="79:46" pos:end="79:47">-&gt;</operator><name pos:start="79:48" pos:end="79:49">gb</name></name></expr></argument>, <argument pos:start="79:52" pos:end="79:53"><expr pos:start="79:52" pos:end="79:53"><literal type="number" pos:start="79:52" pos:end="79:53">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:51"><expr pos:start="81:9" pos:end="81:50"><name pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:22">data_length</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <call pos:start="81:26" pos:end="81:50"><name pos:start="81:26" pos:end="81:38">get_bits_long</name><argument_list pos:start="81:39" pos:end="81:50">(<argument pos:start="81:40" pos:end="81:45"><expr pos:start="81:40" pos:end="81:45"><operator pos:start="81:40" pos:end="81:40">&amp;</operator><name pos:start="81:41" pos:end="81:45"><name pos:start="81:41" pos:end="81:41">s</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:45">gb</name></name></expr></argument>, <argument pos:start="81:48" pos:end="81:49"><expr pos:start="81:48" pos:end="81:49"><literal type="number" pos:start="81:48" pos:end="81:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:35"><expr pos:start="83:9" pos:end="83:34"><call pos:start="83:9" pos:end="83:34"><name pos:start="83:9" pos:end="83:22">skip_bits_long</name><argument_list pos:start="83:23" pos:end="83:34">(<argument pos:start="83:24" pos:end="83:29"><expr pos:start="83:24" pos:end="83:29"><operator pos:start="83:24" pos:end="83:24">&amp;</operator><name pos:start="83:25" pos:end="83:29"><name pos:start="83:25" pos:end="83:25">s</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:29">gb</name></name></expr></argument>, <argument pos:start="83:32" pos:end="83:33"><expr pos:start="83:32" pos:end="83:33"><literal type="number" pos:start="83:32" pos:end="83:33">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="83:37" pos:end="83:54">// CRC32 of header</comment>



        <if_stmt pos:start="87:9" pos:end="99:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:29">(<expr pos:start="87:13" pos:end="87:28"><name pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:23">channels</name></name> <operator pos:start="87:25" pos:end="87:26">==</operator> <literal type="number" pos:start="87:28" pos:end="87:28">0</literal></expr>)</condition> <block pos:start="87:31" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:39">

            <expr_stmt pos:start="89:13" pos:end="89:72"><expr pos:start="89:13" pos:end="89:71"><call pos:start="89:13" pos:end="89:71"><name pos:start="89:13" pos:end="89:18">av_log</name><argument_list pos:start="89:19" pos:end="89:71">(<argument pos:start="89:20" pos:end="89:24"><expr pos:start="89:20" pos:end="89:24"><name pos:start="89:20" pos:end="89:24">avctx</name></expr></argument>, <argument pos:start="89:27" pos:end="89:38"><expr pos:start="89:27" pos:end="89:38"><name pos:start="89:27" pos:end="89:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:41" pos:end="89:70"><expr pos:start="89:41" pos:end="89:70"><literal type="string" pos:start="89:41" pos:end="89:70">"Invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:39">return <expr pos:start="91:20" pos:end="91:38"><name pos:start="91:20" pos:end="91:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="93:11" pos:end="99:9">else if <condition pos:start="93:19" pos:end="93:43">(<expr pos:start="93:20" pos:end="93:42"><name pos:start="93:20" pos:end="93:37"><name pos:start="93:20" pos:end="93:24">avctx</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:37">sample_rate</name></name> <operator pos:start="93:39" pos:end="93:40">==</operator> <literal type="number" pos:start="93:42" pos:end="93:42">0</literal></expr>)</condition> <block pos:start="93:45" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:39">

            <expr_stmt pos:start="95:13" pos:end="95:64"><expr pos:start="95:13" pos:end="95:63"><call pos:start="95:13" pos:end="95:63"><name pos:start="95:13" pos:end="95:18">av_log</name><argument_list pos:start="95:19" pos:end="95:63">(<argument pos:start="95:20" pos:end="95:24"><expr pos:start="95:20" pos:end="95:24"><name pos:start="95:20" pos:end="95:24">avctx</name></expr></argument>, <argument pos:start="95:27" pos:end="95:38"><expr pos:start="95:27" pos:end="95:38"><name pos:start="95:27" pos:end="95:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:41" pos:end="95:62"><expr pos:start="95:41" pos:end="95:62"><literal type="string" pos:start="95:41" pos:end="95:62">"Invalid samplerate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:39">return <expr pos:start="97:20" pos:end="97:38"><name pos:start="97:20" pos:end="97:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="103:9" pos:end="127:9">switch<condition pos:start="103:15" pos:end="103:22">(<expr pos:start="103:16" pos:end="103:21"><name pos:start="103:16" pos:end="103:21"><name pos:start="103:16" pos:end="103:16">s</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:21">bps</name></name></expr>)</condition> <block pos:start="103:24" pos:end="127:9">{<block_content pos:start="105:9" pos:end="125:39">

        <case pos:start="105:9" pos:end="105:15">case <expr pos:start="105:14" pos:end="105:14"><literal type="number" pos:start="105:14" pos:end="105:14">1</literal></expr>:</case> <expr_stmt pos:start="105:17" pos:end="105:53"><expr pos:start="105:17" pos:end="105:52"><name pos:start="105:17" pos:end="105:33"><name pos:start="105:17" pos:end="105:21">avctx</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:33">sample_fmt</name></name> <operator pos:start="105:35" pos:end="105:35">=</operator> <name pos:start="105:37" pos:end="105:52">AV_SAMPLE_FMT_U8</name></expr>;</expr_stmt> <break pos:start="105:55" pos:end="105:60">break;</break>

        <case pos:start="107:9" pos:end="107:15">case <expr pos:start="107:14" pos:end="107:14"><literal type="number" pos:start="107:14" pos:end="107:14">2</literal></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:50"><expr pos:start="109:13" pos:end="109:49"><name pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:17">avctx</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:29">sample_fmt</name></name> <operator pos:start="109:31" pos:end="109:31">=</operator> <name pos:start="109:33" pos:end="109:49">AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        <case pos:start="113:9" pos:end="113:15">case <expr pos:start="113:14" pos:end="113:14"><literal type="number" pos:start="113:14" pos:end="113:14">3</literal></expr>:</case>

            <expr_stmt pos:start="115:13" pos:end="115:50"><expr pos:start="115:13" pos:end="115:49"><name pos:start="115:13" pos:end="115:29"><name pos:start="115:13" pos:end="115:17">avctx</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:29">sample_fmt</name></name> <operator pos:start="115:31" pos:end="115:31">=</operator> <name pos:start="115:33" pos:end="115:49">AV_SAMPLE_FMT_S32</name></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <comment type="line" pos:start="119:9" pos:end="119:63">//case 4: avctx-&gt;sample_fmt = AV_SAMPLE_FMT_S32; break;</comment>

        <default pos:start="121:9" pos:end="121:16">default:</default>

            <expr_stmt pos:start="123:13" pos:end="123:80"><expr pos:start="123:13" pos:end="123:79"><call pos:start="123:13" pos:end="123:79"><name pos:start="123:13" pos:end="123:18">av_log</name><argument_list pos:start="123:19" pos:end="123:79">(<argument pos:start="123:20" pos:end="123:24"><expr pos:start="123:20" pos:end="123:24"><name pos:start="123:20" pos:end="123:24">avctx</name></expr></argument>, <argument pos:start="123:27" pos:end="123:38"><expr pos:start="123:27" pos:end="123:38"><name pos:start="123:27" pos:end="123:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="123:41" pos:end="123:78"><expr pos:start="123:41" pos:end="123:78"><literal type="string" pos:start="123:41" pos:end="123:78">"Invalid/unsupported sample format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="125:13" pos:end="125:39">return <expr pos:start="125:20" pos:end="125:38"><name pos:start="125:20" pos:end="125:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></switch>



        <comment type="line" pos:start="131:9" pos:end="131:27">// prevent overflow</comment>

        <if_stmt pos:start="133:9" pos:end="139:9"><if pos:start="133:9" pos:end="139:9">if <condition pos:start="133:12" pos:end="133:43">(<expr pos:start="133:13" pos:end="133:42"><name pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:17">avctx</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:30">sample_rate</name></name> <operator pos:start="133:32" pos:end="133:32">&gt;</operator> <literal type="number" pos:start="133:34" pos:end="133:42">0x7FFFFFu</literal></expr>)</condition> <block pos:start="133:45" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:35">

            <expr_stmt pos:start="135:13" pos:end="135:67"><expr pos:start="135:13" pos:end="135:66"><call pos:start="135:13" pos:end="135:66"><name pos:start="135:13" pos:end="135:18">av_log</name><argument_list pos:start="135:19" pos:end="135:66">(<argument pos:start="135:20" pos:end="135:24"><expr pos:start="135:20" pos:end="135:24"><name pos:start="135:20" pos:end="135:24">avctx</name></expr></argument>, <argument pos:start="135:27" pos:end="135:38"><expr pos:start="135:27" pos:end="135:38"><name pos:start="135:27" pos:end="135:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:41" pos:end="135:65"><expr pos:start="135:41" pos:end="135:65"><literal type="string" pos:start="135:41" pos:end="135:65">"sample_rate too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="137:13" pos:end="137:35">return <expr pos:start="137:20" pos:end="137:34"><call pos:start="137:20" pos:end="137:34"><name pos:start="137:20" pos:end="137:26">AVERROR</name><argument_list pos:start="137:27" pos:end="137:34">(<argument pos:start="137:28" pos:end="137:33"><expr pos:start="137:28" pos:end="137:33"><name pos:start="137:28" pos:end="137:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:57"><expr pos:start="141:9" pos:end="141:56"><name pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:23">frame_length</name></name> <operator pos:start="141:25" pos:end="141:25">=</operator> <literal type="number" pos:start="141:27" pos:end="141:29">256</literal> <operator pos:start="141:31" pos:end="141:31">*</operator> <name pos:start="141:33" pos:end="141:50"><name pos:start="141:33" pos:end="141:37">avctx</name><operator pos:start="141:38" pos:end="141:39">-&gt;</operator><name pos:start="141:40" pos:end="141:50">sample_rate</name></name> <operator pos:start="141:52" pos:end="141:52">/</operator> <literal type="number" pos:start="141:54" pos:end="141:56">245</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:64"><expr pos:start="145:9" pos:end="145:63"><name pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:28">last_frame_length</name></name> <operator pos:start="145:30" pos:end="145:30">=</operator> <name pos:start="145:32" pos:end="145:45"><name pos:start="145:32" pos:end="145:32">s</name><operator pos:start="145:33" pos:end="145:34">-&gt;</operator><name pos:start="145:35" pos:end="145:45">data_length</name></name> <operator pos:start="145:47" pos:end="145:47">%</operator> <name pos:start="145:49" pos:end="145:63"><name pos:start="145:49" pos:end="145:49">s</name><operator pos:start="145:50" pos:end="145:51">-&gt;</operator><name pos:start="145:52" pos:end="145:63">frame_length</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="149:54"><expr pos:start="147:9" pos:end="149:53"><name pos:start="147:9" pos:end="147:20">total_frames</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <name pos:start="147:24" pos:end="147:37"><name pos:start="147:24" pos:end="147:24">s</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:37">data_length</name></name> <operator pos:start="147:39" pos:end="147:39">/</operator> <name pos:start="147:41" pos:end="147:55"><name pos:start="147:41" pos:end="147:41">s</name><operator pos:start="147:42" pos:end="147:43">-&gt;</operator><name pos:start="147:44" pos:end="147:55">frame_length</name></name> <operator pos:start="147:57" pos:end="147:57">+</operator>

                       <operator pos:start="149:24" pos:end="149:24">(</operator><ternary pos:start="149:25" pos:end="149:52"><condition pos:start="149:25" pos:end="149:46"><expr pos:start="149:25" pos:end="149:44"><name pos:start="149:25" pos:end="149:44"><name pos:start="149:25" pos:end="149:25">s</name><operator pos:start="149:26" pos:end="149:27">-&gt;</operator><name pos:start="149:28" pos:end="149:44">last_frame_length</name></name></expr> ?</condition><then pos:start="149:48" pos:end="149:48"> <expr pos:start="149:48" pos:end="149:48"><literal type="number" pos:start="149:48" pos:end="149:48">1</literal></expr> </then><else pos:start="149:50" pos:end="149:52">: <expr pos:start="149:52" pos:end="149:52"><literal type="number" pos:start="149:52" pos:end="149:52">0</literal></expr></else></ternary><operator pos:start="149:53" pos:end="149:53">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="153:9" pos:end="157:32"><expr pos:start="153:9" pos:end="157:31"><call pos:start="153:9" pos:end="157:31"><name pos:start="153:9" pos:end="153:14">av_log</name><argument_list pos:start="153:15" pos:end="157:31">(<argument pos:start="153:16" pos:end="153:20"><expr pos:start="153:16" pos:end="153:20"><name pos:start="153:16" pos:end="153:20">avctx</name></expr></argument>, <argument pos:start="153:23" pos:end="153:34"><expr pos:start="153:23" pos:end="153:34"><name pos:start="153:23" pos:end="153:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="153:37" pos:end="153:87"><expr pos:start="153:37" pos:end="153:87"><literal type="string" pos:start="153:37" pos:end="153:87">"format: %d chans: %d bps: %d rate: %d block: %d\n"</literal></expr></argument>,

            <argument pos:start="155:13" pos:end="155:21"><expr pos:start="155:13" pos:end="155:21"><name pos:start="155:13" pos:end="155:21"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:21">format</name></name></expr></argument>, <argument pos:start="155:24" pos:end="155:38"><expr pos:start="155:24" pos:end="155:38"><name pos:start="155:24" pos:end="155:38"><name pos:start="155:24" pos:end="155:28">avctx</name><operator pos:start="155:29" pos:end="155:30">-&gt;</operator><name pos:start="155:31" pos:end="155:38">channels</name></name></expr></argument>, <argument pos:start="155:41" pos:end="155:68"><expr pos:start="155:41" pos:end="155:68"><name pos:start="155:41" pos:end="155:68"><name pos:start="155:41" pos:end="155:45">avctx</name><operator pos:start="155:46" pos:end="155:47">-&gt;</operator><name pos:start="155:48" pos:end="155:68">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="155:71" pos:end="155:88"><expr pos:start="155:71" pos:end="155:88"><name pos:start="155:71" pos:end="155:88"><name pos:start="155:71" pos:end="155:75">avctx</name><operator pos:start="155:76" pos:end="155:77">-&gt;</operator><name pos:start="155:78" pos:end="155:88">sample_rate</name></name></expr></argument>,

            <argument pos:start="157:13" pos:end="157:30"><expr pos:start="157:13" pos:end="157:30"><name pos:start="157:13" pos:end="157:30"><name pos:start="157:13" pos:end="157:17">avctx</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:30">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="161:81"><expr pos:start="159:9" pos:end="161:80"><call pos:start="159:9" pos:end="161:80"><name pos:start="159:9" pos:end="159:14">av_log</name><argument_list pos:start="159:15" pos:end="161:80">(<argument pos:start="159:16" pos:end="159:20"><expr pos:start="159:16" pos:end="159:20"><name pos:start="159:16" pos:end="159:20">avctx</name></expr></argument>, <argument pos:start="159:23" pos:end="159:34"><expr pos:start="159:23" pos:end="159:34"><name pos:start="159:23" pos:end="159:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="159:37" pos:end="159:91"><expr pos:start="159:37" pos:end="159:91"><literal type="string" pos:start="159:37" pos:end="159:91">"data_length: %d frame_length: %d last: %d total: %d\n"</literal></expr></argument>,

            <argument pos:start="161:13" pos:end="161:26"><expr pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:26">data_length</name></name></expr></argument>, <argument pos:start="161:29" pos:end="161:43"><expr pos:start="161:29" pos:end="161:43"><name pos:start="161:29" pos:end="161:43"><name pos:start="161:29" pos:end="161:29">s</name><operator pos:start="161:30" pos:end="161:31">-&gt;</operator><name pos:start="161:32" pos:end="161:43">frame_length</name></name></expr></argument>, <argument pos:start="161:46" pos:end="161:65"><expr pos:start="161:46" pos:end="161:65"><name pos:start="161:46" pos:end="161:65"><name pos:start="161:46" pos:end="161:46">s</name><operator pos:start="161:47" pos:end="161:48">-&gt;</operator><name pos:start="161:49" pos:end="161:65">last_frame_length</name></name></expr></argument>, <argument pos:start="161:68" pos:end="161:79"><expr pos:start="161:68" pos:end="161:79"><name pos:start="161:68" pos:end="161:79">total_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="165:9" pos:end="171:9"><if pos:start="165:9" pos:end="171:9">if<condition pos:start="165:11" pos:end="165:73">(<expr pos:start="165:12" pos:end="165:72"><name pos:start="165:12" pos:end="165:26"><name pos:start="165:12" pos:end="165:12">s</name><operator pos:start="165:13" pos:end="165:14">-&gt;</operator><name pos:start="165:15" pos:end="165:26">frame_length</name></name> <operator pos:start="165:28" pos:end="165:29">&gt;=</operator> <name pos:start="165:31" pos:end="165:38">UINT_MAX</name> <operator pos:start="165:40" pos:end="165:40">/</operator> <operator pos:start="165:42" pos:end="165:42">(</operator><name pos:start="165:43" pos:end="165:53"><name pos:start="165:43" pos:end="165:43">s</name><operator pos:start="165:44" pos:end="165:45">-&gt;</operator><name pos:start="165:46" pos:end="165:53">channels</name></name> <operator pos:start="165:55" pos:end="165:55">*</operator> <sizeof pos:start="165:57" pos:end="165:71">sizeof<argument_list pos:start="165:63" pos:end="165:71">(<argument pos:start="165:64" pos:end="165:70"><expr pos:start="165:64" pos:end="165:70"><name pos:start="165:64" pos:end="165:70">int32_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="165:72" pos:end="165:72">)</operator></expr>)</condition><block pos:start="165:74" pos:end="171:9">{<block_content pos:start="167:13" pos:end="169:39">

            <expr_stmt pos:start="167:13" pos:end="167:68"><expr pos:start="167:13" pos:end="167:67"><call pos:start="167:13" pos:end="167:67"><name pos:start="167:13" pos:end="167:18">av_log</name><argument_list pos:start="167:19" pos:end="167:67">(<argument pos:start="167:20" pos:end="167:24"><expr pos:start="167:20" pos:end="167:24"><name pos:start="167:20" pos:end="167:24">avctx</name></expr></argument>, <argument pos:start="167:27" pos:end="167:38"><expr pos:start="167:27" pos:end="167:38"><name pos:start="167:27" pos:end="167:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:41" pos:end="167:66"><expr pos:start="167:41" pos:end="167:66"><literal type="string" pos:start="167:41" pos:end="167:66">"frame_length too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="169:13" pos:end="169:39">return <expr pos:start="169:20" pos:end="169:38"><name pos:start="169:20" pos:end="169:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="175:9" pos:end="185:36"><if pos:start="175:9" pos:end="183:9">if <condition pos:start="175:12" pos:end="175:23">(<expr pos:start="175:13" pos:end="175:22"><name pos:start="175:13" pos:end="175:18"><name pos:start="175:13" pos:end="175:13">s</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:18">bps</name></name> <operator pos:start="175:20" pos:end="175:20">&lt;</operator> <literal type="number" pos:start="175:22" pos:end="175:22">3</literal></expr>)</condition> <block pos:start="175:25" pos:end="183:9">{<block_content pos:start="177:13" pos:end="181:39">

            <expr_stmt pos:start="177:13" pos:end="177:87"><expr pos:start="177:13" pos:end="177:86"><name pos:start="177:13" pos:end="177:28"><name pos:start="177:13" pos:end="177:13">s</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:28">decode_buffer</name></name> <operator pos:start="177:30" pos:end="177:30">=</operator> <call pos:start="177:32" pos:end="177:86"><name pos:start="177:32" pos:end="177:41">av_mallocz</name><argument_list pos:start="177:42" pos:end="177:86">(<argument pos:start="177:43" pos:end="177:85"><expr pos:start="177:43" pos:end="177:85"><sizeof pos:start="177:43" pos:end="177:57">sizeof<argument_list pos:start="177:49" pos:end="177:57">(<argument pos:start="177:50" pos:end="177:56"><expr pos:start="177:50" pos:end="177:56"><name pos:start="177:50" pos:end="177:56">int32_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="177:58" pos:end="177:58">*</operator><name pos:start="177:59" pos:end="177:73"><name pos:start="177:59" pos:end="177:59">s</name><operator pos:start="177:60" pos:end="177:61">-&gt;</operator><name pos:start="177:62" pos:end="177:73">frame_length</name></name><operator pos:start="177:74" pos:end="177:74">*</operator><name pos:start="177:75" pos:end="177:85"><name pos:start="177:75" pos:end="177:75">s</name><operator pos:start="177:76" pos:end="177:77">-&gt;</operator><name pos:start="177:78" pos:end="177:85">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="181:39"><if pos:start="179:13" pos:end="181:39">if <condition pos:start="179:16" pos:end="179:34">(<expr pos:start="179:17" pos:end="179:33"><operator pos:start="179:17" pos:end="179:17">!</operator><name pos:start="179:18" pos:end="179:33"><name pos:start="179:18" pos:end="179:18">s</name><operator pos:start="179:19" pos:end="179:20">-&gt;</operator><name pos:start="179:21" pos:end="179:33">decode_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="181:17" pos:end="181:39"><block_content pos:start="181:17" pos:end="181:39">

                <return pos:start="181:17" pos:end="181:39">return <expr pos:start="181:24" pos:end="181:38"><call pos:start="181:24" pos:end="181:38"><name pos:start="181:24" pos:end="181:30">AVERROR</name><argument_list pos:start="181:31" pos:end="181:38">(<argument pos:start="181:32" pos:end="181:37"><expr pos:start="181:32" pos:end="181:37"><name pos:start="181:32" pos:end="181:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="183:11" pos:end="185:36">else<block type="pseudo" pos:start="185:13" pos:end="185:36"><block_content pos:start="185:13" pos:end="185:36">

            <expr_stmt pos:start="185:13" pos:end="185:36"><expr pos:start="185:13" pos:end="185:35"><name pos:start="185:13" pos:end="185:28"><name pos:start="185:13" pos:end="185:13">s</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:28">decode_buffer</name></name> <operator pos:start="185:30" pos:end="185:30">=</operator> <name pos:start="185:32" pos:end="185:35">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:68"><expr pos:start="187:9" pos:end="187:67"><name pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:17">ch_ctx</name></name> <operator pos:start="187:19" pos:end="187:19">=</operator> <call pos:start="187:21" pos:end="187:67"><name pos:start="187:21" pos:end="187:29">av_malloc</name><argument_list pos:start="187:30" pos:end="187:67">(<argument pos:start="187:31" pos:end="187:66"><expr pos:start="187:31" pos:end="187:66"><name pos:start="187:31" pos:end="187:45"><name pos:start="187:31" pos:end="187:35">avctx</name><operator pos:start="187:36" pos:end="187:37">-&gt;</operator><name pos:start="187:38" pos:end="187:45">channels</name></name> <operator pos:start="187:47" pos:end="187:47">*</operator> <sizeof pos:start="187:49" pos:end="187:66">sizeof<argument_list pos:start="187:55" pos:end="187:66">(<argument pos:start="187:56" pos:end="187:65"><expr pos:start="187:56" pos:end="187:65"><operator pos:start="187:56" pos:end="187:56">*</operator><name pos:start="187:57" pos:end="187:65"><name pos:start="187:57" pos:end="187:57">s</name><operator pos:start="187:58" pos:end="187:59">-&gt;</operator><name pos:start="187:60" pos:end="187:65">ch_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="195:9"><if pos:start="189:9" pos:end="195:9">if <condition pos:start="189:12" pos:end="189:23">(<expr pos:start="189:13" pos:end="189:22"><operator pos:start="189:13" pos:end="189:13">!</operator><name pos:start="189:14" pos:end="189:22"><name pos:start="189:14" pos:end="189:14">s</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:22">ch_ctx</name></name></expr>)</condition> <block pos:start="189:25" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:35">

            <expr_stmt pos:start="191:13" pos:end="191:40"><expr pos:start="191:13" pos:end="191:39"><call pos:start="191:13" pos:end="191:39"><name pos:start="191:13" pos:end="191:20">av_freep</name><argument_list pos:start="191:21" pos:end="191:39">(<argument pos:start="191:22" pos:end="191:38"><expr pos:start="191:22" pos:end="191:38"><operator pos:start="191:22" pos:end="191:22">&amp;</operator><name pos:start="191:23" pos:end="191:38"><name pos:start="191:23" pos:end="191:23">s</name><operator pos:start="191:24" pos:end="191:25">-&gt;</operator><name pos:start="191:26" pos:end="191:38">decode_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="193:13" pos:end="193:35">return <expr pos:start="193:20" pos:end="193:34"><call pos:start="193:20" pos:end="193:34"><name pos:start="193:20" pos:end="193:26">AVERROR</name><argument_list pos:start="193:27" pos:end="193:34">(<argument pos:start="193:28" pos:end="193:33"><expr pos:start="193:28" pos:end="193:33"><name pos:start="193:28" pos:end="193:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="197:7" pos:end="203:5">else <block pos:start="197:12" pos:end="203:5">{<block_content pos:start="199:9" pos:end="201:35">

        <expr_stmt pos:start="199:9" pos:end="199:65"><expr pos:start="199:9" pos:end="199:64"><call pos:start="199:9" pos:end="199:64"><name pos:start="199:9" pos:end="199:14">av_log</name><argument_list pos:start="199:15" pos:end="199:64">(<argument pos:start="199:16" pos:end="199:20"><expr pos:start="199:16" pos:end="199:20"><name pos:start="199:16" pos:end="199:20">avctx</name></expr></argument>, <argument pos:start="199:23" pos:end="199:34"><expr pos:start="199:23" pos:end="199:34"><name pos:start="199:23" pos:end="199:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:37" pos:end="199:63"><expr pos:start="199:37" pos:end="199:63"><literal type="string" pos:start="199:37" pos:end="199:63">"Wrong extradata present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="201:9" pos:end="201:35">return <expr pos:start="201:16" pos:end="201:34"><name pos:start="201:16" pos:end="201:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <return pos:start="207:5" pos:end="207:13">return <expr pos:start="207:12" pos:end="207:12"><literal type="number" pos:start="207:12" pos:end="207:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
