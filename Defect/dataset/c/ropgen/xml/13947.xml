<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13947.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">openfile</name><parameter_list pos:start="1:20" pos:end="1:55">(<parameter pos:start="1:21" pos:end="1:30"><decl pos:start="1:21" pos:end="1:30"><type pos:start="1:21" pos:end="1:30"><name pos:start="1:21" pos:end="1:24">char</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:30">name</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:41"><decl pos:start="1:33" pos:end="1:41"><type pos:start="1:33" pos:end="1:41"><name pos:start="1:33" pos:end="1:35">int</name></type> <name pos:start="1:37" pos:end="1:41">flags</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:48">QDict</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">opts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:19">(<expr pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:18">qemuio_blk</name></expr>)</condition> <block pos:start="11:21" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:17">

        <expr_stmt pos:start="13:9" pos:end="13:60"><expr pos:start="13:9" pos:end="13:59"><call pos:start="13:9" pos:end="13:59"><name pos:start="13:9" pos:end="13:20">error_report</name><argument_list pos:start="13:21" pos:end="13:59">(<argument pos:start="13:22" pos:end="13:58"><expr pos:start="13:22" pos:end="13:58"><literal type="string" pos:start="13:22" pos:end="13:58">"file open already, try 'help close'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:22"><expr pos:start="15:9" pos:end="15:21"><call pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:15">QDECREF</name><argument_list pos:start="15:16" pos:end="15:21">(<argument pos:start="15:17" pos:end="15:20"><expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:67"><expr pos:start="23:5" pos:end="23:66"><name pos:start="23:5" pos:end="23:14">qemuio_blk</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <call pos:start="23:18" pos:end="23:66"><name pos:start="23:18" pos:end="23:29">blk_new_open</name><argument_list pos:start="23:30" pos:end="23:66">(<argument pos:start="23:31" pos:end="23:34"><expr pos:start="23:31" pos:end="23:34"><name pos:start="23:31" pos:end="23:34">name</name></expr></argument>, <argument pos:start="23:37" pos:end="23:40"><expr pos:start="23:37" pos:end="23:40"><name pos:start="23:37" pos:end="23:40">NULL</name></expr></argument>, <argument pos:start="23:43" pos:end="23:46"><expr pos:start="23:43" pos:end="23:46"><name pos:start="23:43" pos:end="23:46">opts</name></expr></argument>, <argument pos:start="23:49" pos:end="23:53"><expr pos:start="23:49" pos:end="23:53"><name pos:start="23:49" pos:end="23:53">flags</name></expr></argument>, <argument pos:start="23:56" pos:end="23:65"><expr pos:start="23:56" pos:end="23:65"><operator pos:start="23:56" pos:end="23:56">&amp;</operator><name pos:start="23:57" pos:end="23:65">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:20">(<expr pos:start="25:9" pos:end="25:19"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:19">qemuio_blk</name></expr>)</condition> <block pos:start="25:22" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:17">

        <expr_stmt pos:start="27:9" pos:end="29:62"><expr pos:start="27:9" pos:end="29:61"><call pos:start="27:9" pos:end="29:61"><name pos:start="27:9" pos:end="27:25">error_reportf_err</name><argument_list pos:start="27:26" pos:end="29:61">(<argument pos:start="27:27" pos:end="27:35"><expr pos:start="27:27" pos:end="27:35"><name pos:start="27:27" pos:end="27:35">local_err</name></expr></argument>, <argument pos:start="27:38" pos:end="27:55"><expr pos:start="27:38" pos:end="27:55"><literal type="string" pos:start="27:38" pos:end="27:55">"can't open%s%s: "</literal></expr></argument>,

                          <argument pos:start="29:27" pos:end="29:48"><expr pos:start="29:27" pos:end="29:48"><ternary pos:start="29:27" pos:end="29:48"><condition pos:start="29:27" pos:end="29:32"><expr pos:start="29:27" pos:end="29:30"><name pos:start="29:27" pos:end="29:30">name</name></expr> ?</condition><then pos:start="29:34" pos:end="29:43"> <expr pos:start="29:34" pos:end="29:43"><literal type="string" pos:start="29:34" pos:end="29:43">" device "</literal></expr> </then><else pos:start="29:45" pos:end="29:48">: <expr pos:start="29:47" pos:end="29:48"><literal type="string" pos:start="29:47" pos:end="29:48">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="29:51" pos:end="29:60"><expr pos:start="29:51" pos:end="29:60"><ternary pos:start="29:51" pos:end="29:60"><condition pos:start="29:51" pos:end="29:56"><expr pos:start="29:51" pos:end="29:54"><name pos:start="29:51" pos:end="29:54">name</name></expr> ?</condition><then/><else pos:start="29:57" pos:end="29:60">: <expr pos:start="29:59" pos:end="29:60"><literal type="string" pos:start="29:59" pos:end="29:60">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:6">bs</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:27"><name pos:start="37:10" pos:end="37:15">blk_bs</name><argument_list pos:start="37:16" pos:end="37:27">(<argument pos:start="37:17" pos:end="37:26"><expr pos:start="37:17" pos:end="37:26"><name pos:start="37:17" pos:end="37:26">qemuio_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="61:5"><if pos:start="39:5" pos:end="61:5">if <condition pos:start="39:8" pos:end="39:30">(<expr pos:start="39:9" pos:end="39:29"><call pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:25">bdrv_is_encrypted</name><argument_list pos:start="39:26" pos:end="39:29">(<argument pos:start="39:27" pos:end="39:28"><expr pos:start="39:27" pos:end="39:28"><name pos:start="39:27" pos:end="39:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:32" pos:end="61:5">{<block_content pos:start="41:9" pos:end="59:9">

        <decl_stmt pos:start="41:9" pos:end="41:27"><decl pos:start="41:9" pos:end="41:26"><type pos:start="41:9" pos:end="41:12"><name pos:start="41:9" pos:end="41:12">char</name></type> <name pos:start="41:14" pos:end="41:26"><name pos:start="41:14" pos:end="41:21">password</name><index pos:start="41:22" pos:end="41:26">[<expr pos:start="41:23" pos:end="41:25"><literal type="number" pos:start="41:23" pos:end="41:25">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:56"><expr pos:start="43:9" pos:end="43:55"><call pos:start="43:9" pos:end="43:55"><name pos:start="43:9" pos:end="43:14">printf</name><argument_list pos:start="43:15" pos:end="43:55">(<argument pos:start="43:16" pos:end="43:48"><expr pos:start="43:16" pos:end="43:48"><literal type="string" pos:start="43:16" pos:end="43:48">"Disk image '%s' is encrypted.\n"</literal></expr></argument>, <argument pos:start="43:51" pos:end="43:54"><expr pos:start="43:51" pos:end="43:54"><name pos:start="43:51" pos:end="43:54">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:63">(<expr pos:start="45:13" pos:end="45:62"><call pos:start="45:13" pos:end="45:58"><name pos:start="45:13" pos:end="45:30">qemu_read_password</name><argument_list pos:start="45:31" pos:end="45:58">(<argument pos:start="45:32" pos:end="45:39"><expr pos:start="45:32" pos:end="45:39"><name pos:start="45:32" pos:end="45:39">password</name></expr></argument>, <argument pos:start="45:42" pos:end="45:57"><expr pos:start="45:42" pos:end="45:57"><sizeof pos:start="45:42" pos:end="45:57">sizeof<argument_list pos:start="45:48" pos:end="45:57">(<argument pos:start="45:49" pos:end="45:56"><expr pos:start="45:49" pos:end="45:56"><name pos:start="45:49" pos:end="45:56">password</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="45:60" pos:end="45:60">&lt;</operator> <literal type="number" pos:start="45:62" pos:end="45:62">0</literal></expr>)</condition> <block pos:start="45:65" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:23">

            <expr_stmt pos:start="47:13" pos:end="47:46"><expr pos:start="47:13" pos:end="47:45"><call pos:start="47:13" pos:end="47:45"><name pos:start="47:13" pos:end="47:24">error_report</name><argument_list pos:start="47:25" pos:end="47:45">(<argument pos:start="47:26" pos:end="47:44"><expr pos:start="47:26" pos:end="47:44"><literal type="string" pos:start="47:26" pos:end="47:44">"No password given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="49:13" pos:end="49:23">goto <name pos:start="49:18" pos:end="49:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:43">(<expr pos:start="53:13" pos:end="53:42"><call pos:start="53:13" pos:end="53:38"><name pos:start="53:13" pos:end="53:24">bdrv_set_key</name><argument_list pos:start="53:25" pos:end="53:38">(<argument pos:start="53:26" pos:end="53:27"><expr pos:start="53:26" pos:end="53:27"><name pos:start="53:26" pos:end="53:27">bs</name></expr></argument>, <argument pos:start="53:30" pos:end="53:37"><expr pos:start="53:30" pos:end="53:37"><name pos:start="53:30" pos:end="53:37">password</name></expr></argument>)</argument_list></call> <operator pos:start="53:40" pos:end="53:40">&lt;</operator> <literal type="number" pos:start="53:42" pos:end="53:42">0</literal></expr>)</condition> <block pos:start="53:45" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:23">

            <expr_stmt pos:start="55:13" pos:end="55:45"><expr pos:start="55:13" pos:end="55:44"><call pos:start="55:13" pos:end="55:44"><name pos:start="55:13" pos:end="55:24">error_report</name><argument_list pos:start="55:25" pos:end="55:44">(<argument pos:start="55:26" pos:end="55:43"><expr pos:start="55:26" pos:end="55:43"><literal type="string" pos:start="55:26" pos:end="55:43">"invalid password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="57:13" pos:end="57:23">goto <name pos:start="57:18" pos:end="57:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>



 <label pos:start="71:2" pos:end="71:7"><name pos:start="71:2" pos:end="71:6">error</name>:</label>

    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><call pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:13">blk_unref</name><argument_list pos:start="73:14" pos:end="73:25">(<argument pos:start="73:15" pos:end="73:24"><expr pos:start="73:15" pos:end="73:24"><name pos:start="73:15" pos:end="73:24">qemuio_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:22"><expr pos:start="75:5" pos:end="75:21"><name pos:start="75:5" pos:end="75:14">qemuio_blk</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <name pos:start="75:18" pos:end="75:21">NULL</name></expr>;</expr_stmt>

    <return pos:start="77:5" pos:end="77:13">return <expr pos:start="77:12" pos:end="77:12"><literal type="number" pos:start="77:12" pos:end="77:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
