<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25952.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:34">vc1_decode_init</name><parameter_list pos:start="1:35" pos:end="1:57">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">avctx</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="129:1">{<block_content pos:start="3:5" pos:end="128:13">
    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:14">VC1Context</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:17">v</name> <init pos:start="3:19" pos:end="3:36">= <expr pos:start="3:21" pos:end="3:36"><name pos:start="3:21" pos:end="3:36"><name pos:start="3:21" pos:end="3:25">avctx</name><operator pos:start="3:26" pos:end="3:27">-&gt;</operator><name pos:start="3:28" pos:end="3:36">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:30"><decl pos:start="4:5" pos:end="4:29"><type pos:start="4:5" pos:end="4:20"><name pos:start="4:5" pos:end="4:18">MpegEncContext</name> <modifier pos:start="4:20" pos:end="4:20">*</modifier></type><name pos:start="4:21" pos:end="4:21">s</name> <init pos:start="4:23" pos:end="4:29">= <expr pos:start="4:25" pos:end="4:29"><operator pos:start="4:25" pos:end="4:25">&amp;</operator><name pos:start="4:26" pos:end="4:29"><name pos:start="4:26" pos:end="4:26">v</name><operator pos:start="4:27" pos:end="4:28">-&gt;</operator><name pos:start="4:29" pos:end="4:29">s</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">GetBitContext</name></type> <name pos:start="5:19" pos:end="5:20">gb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:12"><decl pos:start="6:5" pos:end="6:11"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:11">ret</name></decl>;</decl_stmt>
    <comment type="block" pos:start="7:5" pos:end="7:52">/* save the container output size for WMImage */</comment>
    <expr_stmt pos:start="8:5" pos:end="8:36"><expr pos:start="8:5" pos:end="8:35"><name pos:start="8:5" pos:end="8:19"><name pos:start="8:5" pos:end="8:5">v</name><operator pos:start="8:6" pos:end="8:7">-&gt;</operator><name pos:start="8:8" pos:end="8:19">output_width</name></name>  <operator pos:start="8:22" pos:end="8:22">=</operator> <name pos:start="8:24" pos:end="8:35"><name pos:start="8:24" pos:end="8:28">avctx</name><operator pos:start="8:29" pos:end="8:30">-&gt;</operator><name pos:start="8:31" pos:end="8:35">width</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:37"><expr pos:start="9:5" pos:end="9:36"><name pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:5">v</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:20">output_height</name></name> <operator pos:start="9:22" pos:end="9:22">=</operator> <name pos:start="9:24" pos:end="9:36"><name pos:start="9:24" pos:end="9:28">avctx</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:36">height</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="10:5" pos:end="11:18"><if pos:start="10:5" pos:end="11:18">if <condition pos:start="10:8" pos:end="10:52">(<expr pos:start="10:9" pos:end="10:51"><operator pos:start="10:9" pos:end="10:9">!</operator><name pos:start="10:10" pos:end="10:30"><name pos:start="10:10" pos:end="10:14">avctx</name><operator pos:start="10:15" pos:end="10:16">-&gt;</operator><name pos:start="10:17" pos:end="10:30">extradata_size</name></name> <operator pos:start="10:32" pos:end="10:33">||</operator> <operator pos:start="10:35" pos:end="10:35">!</operator><name pos:start="10:36" pos:end="10:51"><name pos:start="10:36" pos:end="10:40">avctx</name><operator pos:start="10:41" pos:end="10:42">-&gt;</operator><name pos:start="10:43" pos:end="10:51">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:18"><block_content pos:start="11:9" pos:end="11:18">
        <return pos:start="11:9" pos:end="11:18">return <expr pos:start="11:16" pos:end="11:17"><operator pos:start="11:16" pos:end="11:16">-</operator><literal type="number" pos:start="11:17" pos:end="11:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="12:5" pos:end="15:42"><if pos:start="12:5" pos:end="13:70">if <condition pos:start="12:8" pos:end="12:42">(<expr pos:start="12:9" pos:end="12:41"><operator pos:start="12:9" pos:end="12:9">!</operator><operator pos:start="12:10" pos:end="12:10">(</operator><name pos:start="12:11" pos:end="12:22"><name pos:start="12:11" pos:end="12:15">avctx</name><operator pos:start="12:16" pos:end="12:17">-&gt;</operator><name pos:start="12:18" pos:end="12:22">flags</name></name> <operator pos:start="12:24" pos:end="12:24">&amp;</operator> <name pos:start="12:26" pos:end="12:40">CODEC_FLAG_GRAY</name><operator pos:start="12:41" pos:end="12:41">)</operator></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:70"><block_content pos:start="13:9" pos:end="13:70">
        <expr_stmt pos:start="13:9" pos:end="13:70"><expr pos:start="13:9" pos:end="13:69"><name pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:13">avctx</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:22">pix_fmt</name></name> <operator pos:start="13:24" pos:end="13:24">=</operator> <call pos:start="13:26" pos:end="13:69"><name pos:start="13:26" pos:end="13:38">ff_get_format</name><argument_list pos:start="13:39" pos:end="13:69">(<argument pos:start="13:40" pos:end="13:44"><expr pos:start="13:40" pos:end="13:44"><name pos:start="13:40" pos:end="13:44">avctx</name></expr></argument>, <argument pos:start="13:47" pos:end="13:68"><expr pos:start="13:47" pos:end="13:68"><name pos:start="13:47" pos:end="13:68"><name pos:start="13:47" pos:end="13:51">avctx</name><operator pos:start="13:52" pos:end="13:53">-&gt;</operator><name pos:start="13:54" pos:end="13:58">codec</name><operator pos:start="13:59" pos:end="13:60">-&gt;</operator><name pos:start="13:61" pos:end="13:68">pix_fmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="14:5" pos:end="15:42">else<block type="pseudo" pos:start="15:9" pos:end="15:42"><block_content pos:start="15:9" pos:end="15:42">
        <expr_stmt pos:start="15:9" pos:end="15:42"><expr pos:start="15:9" pos:end="15:41"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:13">avctx</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:22">pix_fmt</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <name pos:start="15:26" pos:end="15:41">AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:23"><expr pos:start="16:5" pos:end="16:22"><name pos:start="16:5" pos:end="16:14"><name pos:start="16:5" pos:end="16:5">v</name><operator pos:start="16:6" pos:end="16:7">-&gt;</operator><name pos:start="16:8" pos:end="16:8">s</name><operator pos:start="16:9" pos:end="16:9">.</operator><name pos:start="16:10" pos:end="16:14">avctx</name></name> <operator pos:start="16:16" pos:end="16:16">=</operator> <name pos:start="16:18" pos:end="16:22">avctx</name></expr>;</expr_stmt>
    <if_stmt pos:start="17:5" pos:end="18:19"><if pos:start="17:5" pos:end="18:19">if <condition pos:start="17:8" pos:end="17:42">(<expr pos:start="17:9" pos:end="17:41"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:12">ret</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:36"><name pos:start="17:16" pos:end="17:33">ff_vc1_init_common</name><argument_list pos:start="17:34" pos:end="17:36">(<argument pos:start="17:35" pos:end="17:35"><expr pos:start="17:35" pos:end="17:35"><name pos:start="17:35" pos:end="17:35">v</name></expr></argument>)</argument_list></call><operator pos:start="17:37" pos:end="17:37">)</operator> <operator pos:start="17:39" pos:end="17:39">&lt;</operator> <literal type="number" pos:start="17:41" pos:end="17:41">0</literal></expr>)</condition><block type="pseudo" pos:start="18:9" pos:end="18:19"><block_content pos:start="18:9" pos:end="18:19">
        <return pos:start="18:9" pos:end="18:19">return <expr pos:start="18:16" pos:end="18:18"><name pos:start="18:16" pos:end="18:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line" pos:start="19:5" pos:end="19:47">// ensure static VLC tables are initialized</comment>
    <if_stmt pos:start="20:5" pos:end="21:19"><if pos:start="20:5" pos:end="21:19">if <condition pos:start="20:8" pos:end="20:50">(<expr pos:start="20:9" pos:end="20:49"><operator pos:start="20:9" pos:end="20:9">(</operator><name pos:start="20:10" pos:end="20:12">ret</name> <operator pos:start="20:14" pos:end="20:14">=</operator> <call pos:start="20:16" pos:end="20:44"><name pos:start="20:16" pos:end="20:37">ff_msmpeg4_decode_init</name><argument_list pos:start="20:38" pos:end="20:44">(<argument pos:start="20:39" pos:end="20:43"><expr pos:start="20:39" pos:end="20:43"><name pos:start="20:39" pos:end="20:43">avctx</name></expr></argument>)</argument_list></call><operator pos:start="20:45" pos:end="20:45">)</operator> <operator pos:start="20:47" pos:end="20:47">&lt;</operator> <literal type="number" pos:start="20:49" pos:end="20:49">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:19"><block_content pos:start="21:9" pos:end="21:19">
        <return pos:start="21:9" pos:end="21:19">return <expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="22:5" pos:end="23:19"><if pos:start="22:5" pos:end="23:19">if <condition pos:start="22:8" pos:end="22:55">(<expr pos:start="22:9" pos:end="22:54"><operator pos:start="22:9" pos:end="22:9">(</operator><name pos:start="22:10" pos:end="22:12">ret</name> <operator pos:start="22:14" pos:end="22:14">=</operator> <call pos:start="22:16" pos:end="22:49"><name pos:start="22:16" pos:end="22:46">ff_vc1_decode_init_alloc_tables</name><argument_list pos:start="22:47" pos:end="22:49">(<argument pos:start="22:48" pos:end="22:48"><expr pos:start="22:48" pos:end="22:48"><name pos:start="22:48" pos:end="22:48">v</name></expr></argument>)</argument_list></call><operator pos:start="22:50" pos:end="22:50">)</operator> <operator pos:start="22:52" pos:end="22:52">&lt;</operator> <literal type="number" pos:start="22:54" pos:end="22:54">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:19"><block_content pos:start="23:9" pos:end="23:19">
        <return pos:start="23:9" pos:end="23:19">return <expr pos:start="23:16" pos:end="23:18"><name pos:start="23:16" pos:end="23:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line" pos:start="24:5" pos:end="24:56">// Hack to ensure the above functions will be called</comment>
    <comment type="line" pos:start="25:5" pos:end="25:49">// again once we know all necessary settings.</comment>
    <comment type="line" pos:start="26:5" pos:end="26:51">// That this is necessary might indicate a bug.</comment>
    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><call pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:21">ff_vc1_decode_end</name><argument_list pos:start="27:22" pos:end="27:28">(<argument pos:start="27:23" pos:end="27:27"><expr pos:start="27:23" pos:end="27:27"><name pos:start="27:23" pos:end="27:27">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:38"><expr pos:start="28:5" pos:end="28:37"><call pos:start="28:5" pos:end="28:37"><name pos:start="28:5" pos:end="28:20">ff_blockdsp_init</name><argument_list pos:start="28:21" pos:end="28:37">(<argument pos:start="28:22" pos:end="28:29"><expr pos:start="28:22" pos:end="28:29"><operator pos:start="28:22" pos:end="28:22">&amp;</operator><name pos:start="28:23" pos:end="28:29"><name pos:start="28:23" pos:end="28:23">s</name><operator pos:start="28:24" pos:end="28:25">-&gt;</operator><name pos:start="28:26" pos:end="28:29">bdsp</name></name></expr></argument>, <argument pos:start="28:32" pos:end="28:36"><expr pos:start="28:32" pos:end="28:36"><name pos:start="28:32" pos:end="28:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><call pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:22">ff_h264chroma_init</name><argument_list pos:start="29:23" pos:end="29:41">(<argument pos:start="29:24" pos:end="29:37"><expr pos:start="29:24" pos:end="29:37"><operator pos:start="29:24" pos:end="29:24">&amp;</operator><name pos:start="29:25" pos:end="29:37"><name pos:start="29:25" pos:end="29:25">v</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:37">h264chroma</name></name></expr></argument>, <argument pos:start="29:40" pos:end="29:40"><expr pos:start="29:40" pos:end="29:40"><literal type="number" pos:start="29:40" pos:end="29:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:30"><expr pos:start="30:5" pos:end="30:29"><call pos:start="30:5" pos:end="30:29"><name pos:start="30:5" pos:end="30:19">ff_qpeldsp_init</name><argument_list pos:start="30:20" pos:end="30:29">(<argument pos:start="30:21" pos:end="30:28"><expr pos:start="30:21" pos:end="30:28"><operator pos:start="30:21" pos:end="30:21">&amp;</operator><name pos:start="30:22" pos:end="30:28"><name pos:start="30:22" pos:end="30:22">s</name><operator pos:start="30:23" pos:end="30:24">-&gt;</operator><name pos:start="30:25" pos:end="30:28">qdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="31:5" pos:end="91:5"><if pos:start="31:5" pos:end="47:5">if <condition pos:start="31:8" pos:end="31:88">(<expr pos:start="31:9" pos:end="31:87"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:13">avctx</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:23">codec_id</name></name> <operator pos:start="31:25" pos:end="31:26">==</operator> <name pos:start="31:28" pos:end="31:43">AV_CODEC_ID_WMV3</name> <operator pos:start="31:45" pos:end="31:46">||</operator> <name pos:start="31:48" pos:end="31:62"><name pos:start="31:48" pos:end="31:52">avctx</name><operator pos:start="31:53" pos:end="31:54">-&gt;</operator><name pos:start="31:55" pos:end="31:62">codec_id</name></name> <operator pos:start="31:64" pos:end="31:65">==</operator> <name pos:start="31:67" pos:end="31:87">AV_CODEC_ID_WMV3IMAGE</name></expr>)</condition> <block pos:start="31:90" pos:end="47:5">{<block_content pos:start="32:9" pos:end="46:9">
        <decl_stmt pos:start="32:9" pos:end="32:22"><decl pos:start="32:9" pos:end="32:21"><type pos:start="32:9" pos:end="32:11"><name pos:start="32:9" pos:end="32:11">int</name></type> <name pos:start="32:13" pos:end="32:17">count</name> <init pos:start="32:19" pos:end="32:21">= <expr pos:start="32:21" pos:end="32:21"><literal type="number" pos:start="32:21" pos:end="32:21">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:start="33:9" pos:end="33:72">// looks like WMV3 has a sequence header stored in the extradata</comment>
        <comment type="line" pos:start="34:9" pos:end="34:65">// advanced sequence header may be before the first frame</comment>
        <comment type="line" pos:start="35:9" pos:end="35:72">// the last byte of the extradata is a version number, 1 for the</comment>
        <comment type="line" pos:start="36:9" pos:end="36:32">// samples we can decode</comment>
        <expr_stmt pos:start="37:9" pos:end="37:70"><expr pos:start="37:9" pos:end="37:69"><call pos:start="37:9" pos:end="37:69"><name pos:start="37:9" pos:end="37:21">init_get_bits</name><argument_list pos:start="37:22" pos:end="37:69">(<argument pos:start="37:23" pos:end="37:25"><expr pos:start="37:23" pos:end="37:25"><operator pos:start="37:23" pos:end="37:23">&amp;</operator><name pos:start="37:24" pos:end="37:25">gb</name></expr></argument>, <argument pos:start="37:28" pos:end="37:43"><expr pos:start="37:28" pos:end="37:43"><name pos:start="37:28" pos:end="37:43"><name pos:start="37:28" pos:end="37:32">avctx</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:43">extradata</name></name></expr></argument>, <argument pos:start="37:46" pos:end="37:68"><expr pos:start="37:46" pos:end="37:68"><name pos:start="37:46" pos:end="37:66"><name pos:start="37:46" pos:end="37:50">avctx</name><operator pos:start="37:51" pos:end="37:52">-&gt;</operator><name pos:start="37:53" pos:end="37:66">extradata_size</name></name><operator pos:start="37:67" pos:end="37:67">*</operator><literal type="number" pos:start="37:68" pos:end="37:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="38:9" pos:end="39:21"><if pos:start="38:9" pos:end="39:21">if <condition pos:start="38:12" pos:end="38:69">(<expr pos:start="38:13" pos:end="38:68"><operator pos:start="38:13" pos:end="38:13">(</operator><name pos:start="38:14" pos:end="38:16">ret</name> <operator pos:start="38:18" pos:end="38:18">=</operator> <call pos:start="38:20" pos:end="38:63"><name pos:start="38:20" pos:end="38:48">ff_vc1_decode_sequence_header</name><argument_list pos:start="38:49" pos:end="38:63">(<argument pos:start="38:50" pos:end="38:54"><expr pos:start="38:50" pos:end="38:54"><name pos:start="38:50" pos:end="38:54">avctx</name></expr></argument>, <argument pos:start="38:57" pos:end="38:57"><expr pos:start="38:57" pos:end="38:57"><name pos:start="38:57" pos:end="38:57">v</name></expr></argument>, <argument pos:start="38:60" pos:end="38:62"><expr pos:start="38:60" pos:end="38:62"><operator pos:start="38:60" pos:end="38:60">&amp;</operator><name pos:start="38:61" pos:end="38:62">gb</name></expr></argument>)</argument_list></call><operator pos:start="38:64" pos:end="38:64">)</operator> <operator pos:start="38:66" pos:end="38:66">&lt;</operator> <literal type="number" pos:start="38:68" pos:end="38:68">0</literal></expr>)</condition><block type="pseudo" pos:start="39:11" pos:end="39:21"><block_content pos:start="39:11" pos:end="39:21">
          <return pos:start="39:11" pos:end="39:21">return <expr pos:start="39:18" pos:end="39:20"><name pos:start="39:18" pos:end="39:20">ret</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="40:9" pos:end="40:62"><expr pos:start="40:9" pos:end="40:61"><name pos:start="40:9" pos:end="40:13">count</name> <operator pos:start="40:15" pos:end="40:15">=</operator> <name pos:start="40:17" pos:end="40:37"><name pos:start="40:17" pos:end="40:21">avctx</name><operator pos:start="40:22" pos:end="40:23">-&gt;</operator><name pos:start="40:24" pos:end="40:37">extradata_size</name></name><operator pos:start="40:38" pos:end="40:38">*</operator><literal type="number" pos:start="40:39" pos:end="40:41">8</literal> <operator pos:start="40:41" pos:end="40:41">-</operator> <call pos:start="40:43" pos:end="40:61"><name pos:start="40:43" pos:end="40:56">get_bits_count</name><argument_list pos:start="40:57" pos:end="40:61">(<argument pos:start="40:58" pos:end="40:60"><expr pos:start="40:58" pos:end="40:60"><operator pos:start="40:58" pos:end="40:58">&amp;</operator><name pos:start="40:59" pos:end="40:60">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="41:9" pos:end="46:9"><if pos:start="41:9" pos:end="44:9">if <condition pos:start="41:12" pos:end="41:22">(<expr pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:17">count</name> <operator pos:start="41:19" pos:end="41:19">&gt;</operator> <literal type="number" pos:start="41:21" pos:end="41:21">0</literal></expr>)</condition> <block pos:start="41:24" pos:end="44:9">{<block_content pos:start="42:13" pos:end="43:48">
            <expr_stmt pos:start="42:13" pos:end="43:48"><expr pos:start="42:13" pos:end="43:47"><call pos:start="42:13" pos:end="43:47"><name pos:start="42:13" pos:end="42:18">av_log</name><argument_list pos:start="42:19" pos:end="43:47">(<argument pos:start="42:20" pos:end="42:24"><expr pos:start="42:20" pos:end="42:24"><name pos:start="42:20" pos:end="42:24">avctx</name></expr></argument>, <argument pos:start="42:27" pos:end="42:37"><expr pos:start="42:27" pos:end="42:37"><name pos:start="42:27" pos:end="42:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="42:40" pos:end="42:78"><expr pos:start="42:40" pos:end="42:78"><literal type="string" pos:start="42:40" pos:end="42:78">"Extra data: %i bits left, value: %X\n"</literal></expr></argument>,
                   <argument pos:start="43:20" pos:end="43:24"><expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">count</name></expr></argument>, <argument pos:start="43:27" pos:end="43:46"><expr pos:start="43:27" pos:end="43:46"><call pos:start="43:27" pos:end="43:46"><name pos:start="43:27" pos:end="43:34">get_bits</name><argument_list pos:start="43:35" pos:end="43:46">(<argument pos:start="43:36" pos:end="43:38"><expr pos:start="43:36" pos:end="43:38"><operator pos:start="43:36" pos:end="43:36">&amp;</operator><name pos:start="43:37" pos:end="43:38">gb</name></expr></argument>, <argument pos:start="43:41" pos:end="43:45"><expr pos:start="43:41" pos:end="43:45"><name pos:start="43:41" pos:end="43:45">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="44:11" pos:end="46:9">else if <condition pos:start="44:19" pos:end="44:29">(<expr pos:start="44:20" pos:end="44:28"><name pos:start="44:20" pos:end="44:24">count</name> <operator pos:start="44:26" pos:end="44:26">&lt;</operator> <literal type="number" pos:start="44:28" pos:end="44:28">0</literal></expr>)</condition> <block pos:start="44:31" pos:end="46:9">{<block_content pos:start="45:13" pos:end="45:77">
            <expr_stmt pos:start="45:13" pos:end="45:77"><expr pos:start="45:13" pos:end="45:76"><call pos:start="45:13" pos:end="45:76"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="45:76">(<argument pos:start="45:20" pos:end="45:24"><expr pos:start="45:20" pos:end="45:24"><name pos:start="45:20" pos:end="45:24">avctx</name></expr></argument>, <argument pos:start="45:27" pos:end="45:37"><expr pos:start="45:27" pos:end="45:37"><name pos:start="45:27" pos:end="45:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="45:40" pos:end="45:67"><expr pos:start="45:40" pos:end="45:67"><literal type="string" pos:start="45:40" pos:end="45:67">"Read %i bits in overflow\n"</literal></expr></argument>, <argument pos:start="45:70" pos:end="45:75"><expr pos:start="45:70" pos:end="45:75"><operator pos:start="45:70" pos:end="45:70">-</operator><name pos:start="45:71" pos:end="45:75">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="47:7" pos:end="91:5">else <block pos:start="47:12" pos:end="91:5">{<block_content pos:start="48:9" pos:end="90:66"> <comment type="line" pos:start="47:14" pos:end="47:29">// VC1/WVC1/WVP2</comment>
        <decl_stmt pos:start="48:9" pos:end="48:48"><decl pos:start="48:9" pos:end="48:47"><type pos:start="48:9" pos:end="48:23"><specifier pos:start="48:9" pos:end="48:13">const</specifier> <name pos:start="48:15" pos:end="48:21">uint8_t</name> <modifier pos:start="48:23" pos:end="48:23">*</modifier></type><name pos:start="48:24" pos:end="48:28">start</name> <init pos:start="48:30" pos:end="48:47">= <expr pos:start="48:32" pos:end="48:47"><name pos:start="48:32" pos:end="48:47"><name pos:start="48:32" pos:end="48:36">avctx</name><operator pos:start="48:37" pos:end="48:38">-&gt;</operator><name pos:start="48:39" pos:end="48:47">extradata</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="49:9" pos:end="49:64"><decl pos:start="49:9" pos:end="49:63"><type pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:15">uint8_t</name> <modifier pos:start="49:17" pos:end="49:17">*</modifier></type><name pos:start="49:18" pos:end="49:20">end</name> <init pos:start="49:22" pos:end="49:63">= <expr pos:start="49:24" pos:end="49:63"><name pos:start="49:24" pos:end="49:39"><name pos:start="49:24" pos:end="49:28">avctx</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:39">extradata</name></name> <operator pos:start="49:41" pos:end="49:41">+</operator> <name pos:start="49:43" pos:end="49:63"><name pos:start="49:43" pos:end="49:47">avctx</name><operator pos:start="49:48" pos:end="49:49">-&gt;</operator><name pos:start="49:50" pos:end="49:63">extradata_size</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="50:9" pos:end="50:28"><decl pos:start="50:9" pos:end="50:27"><type pos:start="50:9" pos:end="50:23"><specifier pos:start="50:9" pos:end="50:13">const</specifier> <name pos:start="50:15" pos:end="50:21">uint8_t</name> <modifier pos:start="50:23" pos:end="50:23">*</modifier></type><name pos:start="50:24" pos:end="50:27">next</name></decl>;</decl_stmt>
        <decl_stmt pos:start="51:9" pos:end="51:28"><decl pos:start="51:9" pos:end="51:16"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:16">size</name></decl>, <decl pos:start="51:19" pos:end="51:27"><type ref="prev" pos:start="51:9" pos:end="51:11"/><name pos:start="51:19" pos:end="51:27">buf2_size</name></decl>;</decl_stmt>
        <decl_stmt pos:start="52:9" pos:end="52:29"><decl pos:start="52:9" pos:end="52:28"><type pos:start="52:9" pos:end="52:17"><name pos:start="52:9" pos:end="52:15">uint8_t</name> <modifier pos:start="52:17" pos:end="52:17">*</modifier></type><name pos:start="52:18" pos:end="52:21">buf2</name> <init pos:start="52:23" pos:end="52:28">= <expr pos:start="52:25" pos:end="52:28"><name pos:start="52:25" pos:end="52:28">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="53:9" pos:end="53:52"><decl pos:start="53:9" pos:end="53:31"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:27">seq_initialized</name> <init pos:start="53:29" pos:end="53:31">= <expr pos:start="53:31" pos:end="53:31"><literal type="number" pos:start="53:31" pos:end="53:31">0</literal></expr></init></decl>, <decl pos:start="53:34" pos:end="53:51"><type ref="prev" pos:start="53:9" pos:end="53:11"/><name pos:start="53:34" pos:end="53:47">ep_initialized</name> <init pos:start="53:49" pos:end="53:51">= <expr pos:start="53:51" pos:end="53:51"><literal type="number" pos:start="53:51" pos:end="53:51">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="54:9" pos:end="57:9"><if pos:start="54:9" pos:end="57:9">if <condition pos:start="54:12" pos:end="54:39">(<expr pos:start="54:13" pos:end="54:38"><name pos:start="54:13" pos:end="54:33"><name pos:start="54:13" pos:end="54:17">avctx</name><operator pos:start="54:18" pos:end="54:19">-&gt;</operator><name pos:start="54:20" pos:end="54:33">extradata_size</name></name> <operator pos:start="54:35" pos:end="54:35">&lt;</operator> <literal type="number" pos:start="54:37" pos:end="54:38">16</literal></expr>)</condition> <block pos:start="54:41" pos:end="57:9">{<block_content pos:start="55:13" pos:end="56:22">
            <expr_stmt pos:start="55:13" pos:end="55:97"><expr pos:start="55:13" pos:end="55:96"><call pos:start="55:13" pos:end="55:96"><name pos:start="55:13" pos:end="55:18">av_log</name><argument_list pos:start="55:19" pos:end="55:96">(<argument pos:start="55:20" pos:end="55:24"><expr pos:start="55:20" pos:end="55:24"><name pos:start="55:20" pos:end="55:24">avctx</name></expr></argument>, <argument pos:start="55:27" pos:end="55:38"><expr pos:start="55:27" pos:end="55:38"><name pos:start="55:27" pos:end="55:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:41" pos:end="55:72"><expr pos:start="55:41" pos:end="55:72"><literal type="string" pos:start="55:41" pos:end="55:72">"Extradata size too small: %i\n"</literal></expr></argument>, <argument pos:start="55:75" pos:end="55:95"><expr pos:start="55:75" pos:end="55:95"><name pos:start="55:75" pos:end="55:95"><name pos:start="55:75" pos:end="55:79">avctx</name><operator pos:start="55:80" pos:end="55:81">-&gt;</operator><name pos:start="55:82" pos:end="55:95">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="56:13" pos:end="56:22">return <expr pos:start="56:20" pos:end="56:21"><operator pos:start="56:20" pos:end="56:20">-</operator><literal type="number" pos:start="56:21" pos:end="56:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="58:9" pos:end="58:81"><expr pos:start="58:9" pos:end="58:80"><name pos:start="58:9" pos:end="58:12">buf2</name>  <operator pos:start="58:15" pos:end="58:15">=</operator> <call pos:start="58:17" pos:end="58:80"><name pos:start="58:17" pos:end="58:26">av_mallocz</name><argument_list pos:start="58:27" pos:end="58:80">(<argument pos:start="58:28" pos:end="58:79"><expr pos:start="58:28" pos:end="58:79"><name pos:start="58:28" pos:end="58:48"><name pos:start="58:28" pos:end="58:32">avctx</name><operator pos:start="58:33" pos:end="58:34">-&gt;</operator><name pos:start="58:35" pos:end="58:48">extradata_size</name></name> <operator pos:start="58:50" pos:end="58:50">+</operator> <name pos:start="58:52" pos:end="58:79">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="59:9" pos:end="59:45"><expr pos:start="59:9" pos:end="59:44"><name pos:start="59:9" pos:end="59:13">start</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:44"><name pos:start="59:17" pos:end="59:32">find_next_marker</name><argument_list pos:start="59:33" pos:end="59:44">(<argument pos:start="59:34" pos:end="59:38"><expr pos:start="59:34" pos:end="59:38"><name pos:start="59:34" pos:end="59:38">start</name></expr></argument>, <argument pos:start="59:41" pos:end="59:43"><expr pos:start="59:41" pos:end="59:43"><name pos:start="59:41" pos:end="59:43">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="59:47" pos:end="59:110">// in WVC1 extradata first byte is its size, but can be 0 in mkv</comment>
        <expr_stmt pos:start="60:9" pos:end="60:22"><expr pos:start="60:9" pos:end="60:21"><name pos:start="60:9" pos:end="60:12">next</name>  <operator pos:start="60:15" pos:end="60:15">=</operator> <name pos:start="60:17" pos:end="60:21">start</name></expr>;</expr_stmt>
        <for pos:start="61:9" pos:end="84:9">for <control pos:start="61:13" pos:end="61:40">(<init pos:start="61:14" pos:end="61:14">;</init> <condition pos:start="61:16" pos:end="61:26"><expr pos:start="61:16" pos:end="61:25"><name pos:start="61:16" pos:end="61:19">next</name> <operator pos:start="61:21" pos:end="61:21">&lt;</operator> <name pos:start="61:23" pos:end="61:25">end</name></expr>;</condition> <incr pos:start="61:28" pos:end="61:39"><expr pos:start="61:28" pos:end="61:39"><name pos:start="61:28" pos:end="61:32">start</name> <operator pos:start="61:34" pos:end="61:34">=</operator> <name pos:start="61:36" pos:end="61:39">next</name></expr></incr>)</control> <block pos:start="61:42" pos:end="84:9">{<block_content pos:start="62:13" pos:end="83:13">
            <expr_stmt pos:start="62:13" pos:end="62:52"><expr pos:start="62:13" pos:end="62:51"><name pos:start="62:13" pos:end="62:16">next</name> <operator pos:start="62:18" pos:end="62:18">=</operator> <call pos:start="62:20" pos:end="62:51"><name pos:start="62:20" pos:end="62:35">find_next_marker</name><argument_list pos:start="62:36" pos:end="62:51">(<argument pos:start="62:37" pos:end="62:45"><expr pos:start="62:37" pos:end="62:45"><name pos:start="62:37" pos:end="62:41">start</name> <operator pos:start="62:43" pos:end="62:43">+</operator> <literal type="number" pos:start="62:45" pos:end="62:45">4</literal></expr></argument>, <argument pos:start="62:48" pos:end="62:50"><expr pos:start="62:48" pos:end="62:50"><name pos:start="62:48" pos:end="62:50">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="63:13" pos:end="63:36"><expr pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:16">size</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:23">next</name> <operator pos:start="63:25" pos:end="63:25">-</operator> <name pos:start="63:27" pos:end="63:31">start</name> <operator pos:start="63:33" pos:end="63:33">-</operator> <literal type="number" pos:start="63:35" pos:end="63:35">4</literal></expr>;</expr_stmt>
            <if_stmt pos:start="64:13" pos:end="65:25"><if pos:start="64:13" pos:end="65:25">if <condition pos:start="64:16" pos:end="64:26">(<expr pos:start="64:17" pos:end="64:25"><name pos:start="64:17" pos:end="64:20">size</name> <operator pos:start="64:22" pos:end="64:23">&lt;=</operator> <literal type="number" pos:start="64:25" pos:end="64:25">0</literal></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:25"><block_content pos:start="65:17" pos:end="65:25">
                <continue pos:start="65:17" pos:end="65:25">continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt pos:start="66:13" pos:end="66:67"><expr pos:start="66:13" pos:end="66:66"><name pos:start="66:13" pos:end="66:21">buf2_size</name> <operator pos:start="66:23" pos:end="66:23">=</operator> <call pos:start="66:25" pos:end="66:66"><name pos:start="66:25" pos:end="66:43">vc1_unescape_buffer</name><argument_list pos:start="66:44" pos:end="66:66">(<argument pos:start="66:45" pos:end="66:53"><expr pos:start="66:45" pos:end="66:53"><name pos:start="66:45" pos:end="66:49">start</name> <operator pos:start="66:51" pos:end="66:51">+</operator> <literal type="number" pos:start="66:53" pos:end="66:53">4</literal></expr></argument>, <argument pos:start="66:56" pos:end="66:59"><expr pos:start="66:56" pos:end="66:59"><name pos:start="66:56" pos:end="66:59">size</name></expr></argument>, <argument pos:start="66:62" pos:end="66:65"><expr pos:start="66:62" pos:end="66:65"><name pos:start="66:62" pos:end="66:65">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="67:13" pos:end="67:52"><expr pos:start="67:13" pos:end="67:51"><call pos:start="67:13" pos:end="67:51"><name pos:start="67:13" pos:end="67:25">init_get_bits</name><argument_list pos:start="67:26" pos:end="67:51">(<argument pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><operator pos:start="67:27" pos:end="67:27">&amp;</operator><name pos:start="67:28" pos:end="67:29">gb</name></expr></argument>, <argument pos:start="67:32" pos:end="67:35"><expr pos:start="67:32" pos:end="67:35"><name pos:start="67:32" pos:end="67:35">buf2</name></expr></argument>, <argument pos:start="67:38" pos:end="67:50"><expr pos:start="67:38" pos:end="67:50"><name pos:start="67:38" pos:end="67:46">buf2_size</name> <operator pos:start="67:48" pos:end="67:48">*</operator> <literal type="number" pos:start="67:50" pos:end="67:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="68:13" pos:end="83:13">switch <condition pos:start="68:20" pos:end="68:35">(<expr pos:start="68:21" pos:end="68:34"><call pos:start="68:21" pos:end="68:34"><name pos:start="68:21" pos:end="68:27">AV_RB32</name><argument_list pos:start="68:28" pos:end="68:34">(<argument pos:start="68:29" pos:end="68:33"><expr pos:start="68:29" pos:end="68:33"><name pos:start="68:29" pos:end="68:33">start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="68:37" pos:end="83:13">{<block_content pos:start="69:13" pos:end="82:22">
            <case pos:start="69:13" pos:end="69:33">case <expr pos:start="69:18" pos:end="69:32"><name pos:start="69:18" pos:end="69:32">VC1_CODE_SEQHDR</name></expr>:</case>
                <if_stmt pos:start="70:17" pos:end="73:17"><if pos:start="70:17" pos:end="73:17">if <condition pos:start="70:20" pos:end="70:77">(<expr pos:start="70:21" pos:end="70:76"><operator pos:start="70:21" pos:end="70:21">(</operator><name pos:start="70:22" pos:end="70:24">ret</name> <operator pos:start="70:26" pos:end="70:26">=</operator> <call pos:start="70:28" pos:end="70:71"><name pos:start="70:28" pos:end="70:56">ff_vc1_decode_sequence_header</name><argument_list pos:start="70:57" pos:end="70:71">(<argument pos:start="70:58" pos:end="70:62"><expr pos:start="70:58" pos:end="70:62"><name pos:start="70:58" pos:end="70:62">avctx</name></expr></argument>, <argument pos:start="70:65" pos:end="70:65"><expr pos:start="70:65" pos:end="70:65"><name pos:start="70:65" pos:end="70:65">v</name></expr></argument>, <argument pos:start="70:68" pos:end="70:70"><expr pos:start="70:68" pos:end="70:70"><operator pos:start="70:68" pos:end="70:68">&amp;</operator><name pos:start="70:69" pos:end="70:70">gb</name></expr></argument>)</argument_list></call><operator pos:start="70:72" pos:end="70:72">)</operator> <operator pos:start="70:74" pos:end="70:74">&lt;</operator> <literal type="number" pos:start="70:76" pos:end="70:76">0</literal></expr>)</condition> <block pos:start="70:79" pos:end="73:17">{<block_content pos:start="71:21" pos:end="72:31">
                    <expr_stmt pos:start="71:21" pos:end="71:34"><expr pos:start="71:21" pos:end="71:33"><call pos:start="71:21" pos:end="71:33"><name pos:start="71:21" pos:end="71:27">av_free</name><argument_list pos:start="71:28" pos:end="71:33">(<argument pos:start="71:29" pos:end="71:32"><expr pos:start="71:29" pos:end="71:32"><name pos:start="71:29" pos:end="71:32">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="72:21" pos:end="72:31">return <expr pos:start="72:28" pos:end="72:30"><name pos:start="72:28" pos:end="72:30">ret</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="74:17" pos:end="74:36"><expr pos:start="74:17" pos:end="74:35"><name pos:start="74:17" pos:end="74:31">seq_initialized</name> <operator pos:start="74:33" pos:end="74:33">=</operator> <literal type="number" pos:start="74:35" pos:end="74:35">1</literal></expr>;</expr_stmt>
                <break pos:start="75:17" pos:end="75:22">break;</break>
            <case pos:start="76:13" pos:end="76:37">case <expr pos:start="76:18" pos:end="76:36"><name pos:start="76:18" pos:end="76:36">VC1_CODE_ENTRYPOINT</name></expr>:</case>
                <if_stmt pos:start="77:17" pos:end="80:17"><if pos:start="77:17" pos:end="80:17">if <condition pos:start="77:20" pos:end="77:73">(<expr pos:start="77:21" pos:end="77:72"><operator pos:start="77:21" pos:end="77:21">(</operator><name pos:start="77:22" pos:end="77:24">ret</name> <operator pos:start="77:26" pos:end="77:26">=</operator> <call pos:start="77:28" pos:end="77:67"><name pos:start="77:28" pos:end="77:52">ff_vc1_decode_entry_point</name><argument_list pos:start="77:53" pos:end="77:67">(<argument pos:start="77:54" pos:end="77:58"><expr pos:start="77:54" pos:end="77:58"><name pos:start="77:54" pos:end="77:58">avctx</name></expr></argument>, <argument pos:start="77:61" pos:end="77:61"><expr pos:start="77:61" pos:end="77:61"><name pos:start="77:61" pos:end="77:61">v</name></expr></argument>, <argument pos:start="77:64" pos:end="77:66"><expr pos:start="77:64" pos:end="77:66"><operator pos:start="77:64" pos:end="77:64">&amp;</operator><name pos:start="77:65" pos:end="77:66">gb</name></expr></argument>)</argument_list></call><operator pos:start="77:68" pos:end="77:68">)</operator> <operator pos:start="77:70" pos:end="77:70">&lt;</operator> <literal type="number" pos:start="77:72" pos:end="77:72">0</literal></expr>)</condition> <block pos:start="77:75" pos:end="80:17">{<block_content pos:start="78:21" pos:end="79:31">
                    <expr_stmt pos:start="78:21" pos:end="78:34"><expr pos:start="78:21" pos:end="78:33"><call pos:start="78:21" pos:end="78:33"><name pos:start="78:21" pos:end="78:27">av_free</name><argument_list pos:start="78:28" pos:end="78:33">(<argument pos:start="78:29" pos:end="78:32"><expr pos:start="78:29" pos:end="78:32"><name pos:start="78:29" pos:end="78:32">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="79:21" pos:end="79:31">return <expr pos:start="79:28" pos:end="79:30"><name pos:start="79:28" pos:end="79:30">ret</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="81:17" pos:end="81:35"><expr pos:start="81:17" pos:end="81:34"><name pos:start="81:17" pos:end="81:30">ep_initialized</name> <operator pos:start="81:32" pos:end="81:32">=</operator> <literal type="number" pos:start="81:34" pos:end="81:34">1</literal></expr>;</expr_stmt>
                <break pos:start="82:17" pos:end="82:22">break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></for>
        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><call pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:15">av_free</name><argument_list pos:start="85:16" pos:end="85:21">(<argument pos:start="85:17" pos:end="85:20"><expr pos:start="85:17" pos:end="85:20"><name pos:start="85:17" pos:end="85:20">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="86:9" pos:end="89:9"><if pos:start="86:9" pos:end="89:9">if <condition pos:start="86:12" pos:end="86:48">(<expr pos:start="86:13" pos:end="86:47"><operator pos:start="86:13" pos:end="86:13">!</operator><name pos:start="86:14" pos:end="86:28">seq_initialized</name> <operator pos:start="86:30" pos:end="86:31">||</operator> <operator pos:start="86:33" pos:end="86:33">!</operator><name pos:start="86:34" pos:end="86:47">ep_initialized</name></expr>)</condition> <block pos:start="86:50" pos:end="89:9">{<block_content pos:start="87:13" pos:end="88:22">
            <expr_stmt pos:start="87:13" pos:end="87:66"><expr pos:start="87:13" pos:end="87:65"><call pos:start="87:13" pos:end="87:65"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="87:65">(<argument pos:start="87:20" pos:end="87:24"><expr pos:start="87:20" pos:end="87:24"><name pos:start="87:20" pos:end="87:24">avctx</name></expr></argument>, <argument pos:start="87:27" pos:end="87:38"><expr pos:start="87:27" pos:end="87:38"><name pos:start="87:27" pos:end="87:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:41" pos:end="87:64"><expr pos:start="87:41" pos:end="87:64"><literal type="string" pos:start="87:41" pos:end="87:64">"Incomplete extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="88:13" pos:end="88:22">return <expr pos:start="88:20" pos:end="88:21"><operator pos:start="88:20" pos:end="88:20">-</operator><literal type="number" pos:start="88:21" pos:end="88:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="90:9" pos:end="90:66"><expr pos:start="90:9" pos:end="90:65"><name pos:start="90:9" pos:end="90:21"><name pos:start="90:9" pos:end="90:9">v</name><operator pos:start="90:10" pos:end="90:11">-&gt;</operator><name pos:start="90:12" pos:end="90:21">res_sprite</name></name> <operator pos:start="90:23" pos:end="90:23">=</operator> <operator pos:start="90:25" pos:end="90:25">(</operator><name pos:start="90:26" pos:end="90:40"><name pos:start="90:26" pos:end="90:30">avctx</name><operator pos:start="90:31" pos:end="90:32">-&gt;</operator><name pos:start="90:33" pos:end="90:40">codec_id</name></name> <operator pos:start="90:42" pos:end="90:43">==</operator> <name pos:start="90:45" pos:end="90:64">AV_CODEC_ID_VC1IMAGE</name><operator pos:start="90:65" pos:end="90:65">)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:46"><expr pos:start="92:5" pos:end="92:45"><name pos:start="92:5" pos:end="92:26"><name pos:start="92:5" pos:end="92:5">v</name><operator pos:start="92:6" pos:end="92:7">-&gt;</operator><name pos:start="92:8" pos:end="92:26">sprite_output_frame</name></name> <operator pos:start="92:28" pos:end="92:28">=</operator> <call pos:start="92:30" pos:end="92:45"><name pos:start="92:30" pos:end="92:43">av_frame_alloc</name><argument_list pos:start="92:44" pos:end="92:45">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="93:5" pos:end="94:32"><if pos:start="93:5" pos:end="94:32">if <condition pos:start="93:8" pos:end="93:32">(<expr pos:start="93:9" pos:end="93:31"><operator pos:start="93:9" pos:end="93:9">!</operator><name pos:start="93:10" pos:end="93:31"><name pos:start="93:10" pos:end="93:10">v</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:31">sprite_output_frame</name></name></expr>)</condition><block type="pseudo" pos:start="94:5" pos:end="94:32"><block_content pos:start="94:5" pos:end="94:32">
    <expr_stmt pos:start="94:5" pos:end="94:32"><expr pos:start="94:5" pos:end="94:31"><name pos:start="94:5" pos:end="94:18"><name pos:start="94:5" pos:end="94:9">avctx</name><operator pos:start="94:10" pos:end="94:11">-&gt;</operator><name pos:start="94:12" pos:end="94:18">profile</name></name> <operator pos:start="94:20" pos:end="94:20">=</operator> <name pos:start="94:22" pos:end="94:31"><name pos:start="94:22" pos:end="94:22">v</name><operator pos:start="94:23" pos:end="94:24">-&gt;</operator><name pos:start="94:25" pos:end="94:31">profile</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="95:5" pos:end="96:32"><if pos:start="95:5" pos:end="96:32">if <condition pos:start="95:8" pos:end="95:39">(<expr pos:start="95:9" pos:end="95:38"><name pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:9">v</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:18">profile</name></name> <operator pos:start="95:20" pos:end="95:21">==</operator> <name pos:start="95:23" pos:end="95:38">PROFILE_ADVANCED</name></expr>)</condition><block type="pseudo" pos:start="96:9" pos:end="96:32"><block_content pos:start="96:9" pos:end="96:32">
        <expr_stmt pos:start="96:9" pos:end="96:32"><expr pos:start="96:9" pos:end="96:31"><name pos:start="96:9" pos:end="96:20"><name pos:start="96:9" pos:end="96:13">avctx</name><operator pos:start="96:14" pos:end="96:15">-&gt;</operator><name pos:start="96:16" pos:end="96:20">level</name></name> <operator pos:start="96:22" pos:end="96:22">=</operator> <name pos:start="96:24" pos:end="96:31"><name pos:start="96:24" pos:end="96:24">v</name><operator pos:start="96:25" pos:end="96:26">-&gt;</operator><name pos:start="96:27" pos:end="96:31">level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="97:5" pos:end="97:48"><expr pos:start="97:5" pos:end="97:47"><name pos:start="97:5" pos:end="97:23"><name pos:start="97:5" pos:end="97:9">avctx</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:23">has_b_frames</name></name> <operator pos:start="97:25" pos:end="97:25">=</operator> <operator pos:start="97:27" pos:end="97:27">!</operator><operator pos:start="97:28" pos:end="97:28">!</operator><name pos:start="97:29" pos:end="97:47"><name pos:start="97:29" pos:end="97:33">avctx</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:47">max_b_frames</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="98:5" pos:end="99:47"><if pos:start="98:5" pos:end="99:47">if <condition pos:start="98:8" pos:end="98:71">(<expr pos:start="98:9" pos:end="98:70"><name pos:start="98:9" pos:end="98:21"><name pos:start="98:9" pos:end="98:9">v</name><operator pos:start="98:10" pos:end="98:11">-&gt;</operator><name pos:start="98:12" pos:end="98:21">color_prim</name></name> <operator pos:start="98:23" pos:end="98:24">==</operator> <literal type="number" pos:start="98:26" pos:end="98:26">1</literal> <operator pos:start="98:28" pos:end="98:29">||</operator> <name pos:start="98:31" pos:end="98:43"><name pos:start="98:31" pos:end="98:31">v</name><operator pos:start="98:32" pos:end="98:33">-&gt;</operator><name pos:start="98:34" pos:end="98:43">color_prim</name></name> <operator pos:start="98:45" pos:end="98:46">==</operator> <literal type="number" pos:start="98:48" pos:end="98:48">5</literal> <operator pos:start="98:50" pos:end="98:51">||</operator> <name pos:start="98:53" pos:end="98:65"><name pos:start="98:53" pos:end="98:53">v</name><operator pos:start="98:54" pos:end="98:55">-&gt;</operator><name pos:start="98:56" pos:end="98:65">color_prim</name></name> <operator pos:start="98:67" pos:end="98:68">==</operator> <literal type="number" pos:start="98:70" pos:end="98:70">6</literal></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:47"><block_content pos:start="99:9" pos:end="99:47">
        <expr_stmt pos:start="99:9" pos:end="99:47"><expr pos:start="99:9" pos:end="99:46"><name pos:start="99:9" pos:end="99:30"><name pos:start="99:9" pos:end="99:13">avctx</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:30">color_primaries</name></name> <operator pos:start="99:32" pos:end="99:32">=</operator> <name pos:start="99:34" pos:end="99:46"><name pos:start="99:34" pos:end="99:34">v</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:46">color_prim</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="100:5" pos:end="101:44"><if pos:start="100:5" pos:end="101:44">if <condition pos:start="100:8" pos:end="100:55">(<expr pos:start="100:9" pos:end="100:54"><name pos:start="100:9" pos:end="100:24"><name pos:start="100:9" pos:end="100:9">v</name><operator pos:start="100:10" pos:end="100:11">-&gt;</operator><name pos:start="100:12" pos:end="100:24">transfer_char</name></name> <operator pos:start="100:26" pos:end="100:27">==</operator> <literal type="number" pos:start="100:29" pos:end="100:29">1</literal> <operator pos:start="100:31" pos:end="100:32">||</operator> <name pos:start="100:34" pos:end="100:49"><name pos:start="100:34" pos:end="100:34">v</name><operator pos:start="100:35" pos:end="100:36">-&gt;</operator><name pos:start="100:37" pos:end="100:49">transfer_char</name></name> <operator pos:start="100:51" pos:end="100:52">==</operator> <literal type="number" pos:start="100:54" pos:end="100:54">7</literal></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:44"><block_content pos:start="101:9" pos:end="101:44">
        <expr_stmt pos:start="101:9" pos:end="101:44"><expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:24"><name pos:start="101:9" pos:end="101:13">avctx</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:24">color_trc</name></name> <operator pos:start="101:26" pos:end="101:26">=</operator> <name pos:start="101:28" pos:end="101:43"><name pos:start="101:28" pos:end="101:28">v</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:43">transfer_char</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="102:5" pos:end="103:43"><if pos:start="102:5" pos:end="103:43">if <condition pos:start="102:8" pos:end="102:74">(<expr pos:start="102:9" pos:end="102:73"><name pos:start="102:9" pos:end="102:22"><name pos:start="102:9" pos:end="102:9">v</name><operator pos:start="102:10" pos:end="102:11">-&gt;</operator><name pos:start="102:12" pos:end="102:22">matrix_coef</name></name> <operator pos:start="102:24" pos:end="102:25">==</operator> <literal type="number" pos:start="102:27" pos:end="102:27">1</literal> <operator pos:start="102:29" pos:end="102:30">||</operator> <name pos:start="102:32" pos:end="102:45"><name pos:start="102:32" pos:end="102:32">v</name><operator pos:start="102:33" pos:end="102:34">-&gt;</operator><name pos:start="102:35" pos:end="102:45">matrix_coef</name></name> <operator pos:start="102:47" pos:end="102:48">==</operator> <literal type="number" pos:start="102:50" pos:end="102:50">6</literal> <operator pos:start="102:52" pos:end="102:53">||</operator> <name pos:start="102:55" pos:end="102:68"><name pos:start="102:55" pos:end="102:55">v</name><operator pos:start="102:56" pos:end="102:57">-&gt;</operator><name pos:start="102:58" pos:end="102:68">matrix_coef</name></name> <operator pos:start="102:70" pos:end="102:71">==</operator> <literal type="number" pos:start="102:73" pos:end="102:73">7</literal></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:43"><block_content pos:start="103:9" pos:end="103:43">
        <expr_stmt pos:start="103:9" pos:end="103:43"><expr pos:start="103:9" pos:end="103:42"><name pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:13">avctx</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:25">colorspace</name></name> <operator pos:start="103:27" pos:end="103:27">=</operator> <name pos:start="103:29" pos:end="103:42"><name pos:start="103:29" pos:end="103:29">v</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:42">matrix_coef</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="104:5" pos:end="104:51"><expr pos:start="104:5" pos:end="104:50"><name pos:start="104:5" pos:end="104:15"><name pos:start="104:5" pos:end="104:5">s</name><operator pos:start="104:6" pos:end="104:7">-&gt;</operator><name pos:start="104:8" pos:end="104:15">mb_width</name></name>  <operator pos:start="104:18" pos:end="104:18">=</operator> <operator pos:start="104:20" pos:end="104:20">(</operator><name pos:start="104:21" pos:end="104:38"><name pos:start="104:21" pos:end="104:25">avctx</name><operator pos:start="104:26" pos:end="104:27">-&gt;</operator><name pos:start="104:28" pos:end="104:38">coded_width</name></name>  <operator pos:start="104:41" pos:end="104:41">+</operator> <literal type="number" pos:start="104:43" pos:end="104:44">15</literal><operator pos:start="104:45" pos:end="104:45">)</operator> <operator pos:start="104:47" pos:end="104:48">&gt;&gt;</operator> <literal type="number" pos:start="104:50" pos:end="104:50">4</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="105:5" pos:end="105:51"><expr pos:start="105:5" pos:end="105:50"><name pos:start="105:5" pos:end="105:16"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:16">mb_height</name></name> <operator pos:start="105:18" pos:end="105:18">=</operator> <operator pos:start="105:20" pos:end="105:20">(</operator><name pos:start="105:21" pos:end="105:39"><name pos:start="105:21" pos:end="105:25">avctx</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:39">coded_height</name></name> <operator pos:start="105:41" pos:end="105:41">+</operator> <literal type="number" pos:start="105:43" pos:end="105:44">15</literal><operator pos:start="105:45" pos:end="105:45">)</operator> <operator pos:start="105:47" pos:end="105:48">&gt;&gt;</operator> <literal type="number" pos:start="105:50" pos:end="105:50">4</literal></expr>;</expr_stmt>
    <if_stmt pos:start="106:5" pos:end="112:5"><if pos:start="106:5" pos:end="108:5">if <condition pos:start="106:8" pos:end="106:56">(<expr pos:start="106:9" pos:end="106:55"><name pos:start="106:9" pos:end="106:18"><name pos:start="106:9" pos:end="106:9">v</name><operator pos:start="106:10" pos:end="106:11">-&gt;</operator><name pos:start="106:12" pos:end="106:18">profile</name></name> <operator pos:start="106:20" pos:end="106:21">==</operator> <name pos:start="106:23" pos:end="106:38">PROFILE_ADVANCED</name> <operator pos:start="106:40" pos:end="106:41">||</operator> <name pos:start="106:43" pos:end="106:55"><name pos:start="106:43" pos:end="106:43">v</name><operator pos:start="106:44" pos:end="106:45">-&gt;</operator><name pos:start="106:46" pos:end="106:55">res_fasttx</name></name></expr>)</condition> <block pos:start="106:58" pos:end="108:5">{<block_content pos:start="107:9" pos:end="107:45">
        <expr_stmt pos:start="107:9" pos:end="107:45"><expr pos:start="107:9" pos:end="107:44"><call pos:start="107:9" pos:end="107:44"><name pos:start="107:9" pos:end="107:41">ff_vc1_init_transposed_scantables</name><argument_list pos:start="107:42" pos:end="107:44">(<argument pos:start="107:43" pos:end="107:43"><expr pos:start="107:43" pos:end="107:43"><name pos:start="107:43" pos:end="107:43">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="108:7" pos:end="112:5">else <block pos:start="108:12" pos:end="112:5">{<block_content pos:start="109:9" pos:end="111:27">
        <expr_stmt pos:start="109:9" pos:end="109:51"><expr pos:start="109:9" pos:end="109:50"><call pos:start="109:9" pos:end="109:50"><name pos:start="109:9" pos:end="109:14">memcpy</name><argument_list pos:start="109:15" pos:end="109:50">(<argument pos:start="109:16" pos:end="109:24"><expr pos:start="109:16" pos:end="109:24"><name pos:start="109:16" pos:end="109:24"><name pos:start="109:16" pos:end="109:16">v</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:24">zz_8x8</name></name></expr></argument>, <argument pos:start="109:27" pos:end="109:43"><expr pos:start="109:27" pos:end="109:43"><name pos:start="109:27" pos:end="109:43">ff_wmv1_scantable</name></expr></argument>, <argument pos:start="109:46" pos:end="109:49"><expr pos:start="109:46" pos:end="109:49"><literal type="number" pos:start="109:46" pos:end="109:46">4</literal><operator pos:start="109:47" pos:end="109:47">*</operator><literal type="number" pos:start="109:48" pos:end="109:49">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="110:9" pos:end="110:27"><expr pos:start="110:9" pos:end="110:26"><name pos:start="110:9" pos:end="110:22"><name pos:start="110:9" pos:end="110:9">v</name><operator pos:start="110:10" pos:end="110:11">-&gt;</operator><name pos:start="110:12" pos:end="110:22">left_blk_sh</name></name> <operator pos:start="110:24" pos:end="110:24">=</operator> <literal type="number" pos:start="110:26" pos:end="110:26">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="111:9" pos:end="111:27"><expr pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:9">v</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:21">top_blk_sh</name></name>  <operator pos:start="111:24" pos:end="111:24">=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="113:5" pos:end="127:5"><if pos:start="113:5" pos:end="127:5">if <condition pos:start="113:8" pos:end="113:92">(<expr pos:start="113:9" pos:end="113:91"><name pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:13">avctx</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:23">codec_id</name></name> <operator pos:start="113:25" pos:end="113:26">==</operator> <name pos:start="113:28" pos:end="113:48">AV_CODEC_ID_WMV3IMAGE</name> <operator pos:start="113:50" pos:end="113:51">||</operator> <name pos:start="113:53" pos:end="113:67"><name pos:start="113:53" pos:end="113:57">avctx</name><operator pos:start="113:58" pos:end="113:59">-&gt;</operator><name pos:start="113:60" pos:end="113:67">codec_id</name></name> <operator pos:start="113:69" pos:end="113:70">==</operator> <name pos:start="113:72" pos:end="113:91">AV_CODEC_ID_VC1IMAGE</name></expr>)</condition> <block pos:start="113:94" pos:end="127:5">{<block_content pos:start="114:9" pos:end="126:9">
        <expr_stmt pos:start="114:9" pos:end="114:46"><expr pos:start="114:9" pos:end="114:45"><name pos:start="114:9" pos:end="114:23"><name pos:start="114:9" pos:end="114:9">v</name><operator pos:start="114:10" pos:end="114:11">-&gt;</operator><name pos:start="114:12" pos:end="114:23">sprite_width</name></name>  <operator pos:start="114:26" pos:end="114:26">=</operator> <name pos:start="114:28" pos:end="114:45"><name pos:start="114:28" pos:end="114:32">avctx</name><operator pos:start="114:33" pos:end="114:34">-&gt;</operator><name pos:start="114:35" pos:end="114:45">coded_width</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="115:9" pos:end="115:47"><expr pos:start="115:9" pos:end="115:46"><name pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:9">v</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:24">sprite_height</name></name> <operator pos:start="115:26" pos:end="115:26">=</operator> <name pos:start="115:28" pos:end="115:46"><name pos:start="115:28" pos:end="115:32">avctx</name><operator pos:start="115:33" pos:end="115:34">-&gt;</operator><name pos:start="115:35" pos:end="115:46">coded_height</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="116:9" pos:end="116:62"><expr pos:start="116:9" pos:end="116:61"><name pos:start="116:9" pos:end="116:26"><name pos:start="116:9" pos:end="116:13">avctx</name><operator pos:start="116:14" pos:end="116:15">-&gt;</operator><name pos:start="116:16" pos:end="116:26">coded_width</name></name>  <operator pos:start="116:29" pos:end="116:29">=</operator> <name pos:start="116:31" pos:end="116:42"><name pos:start="116:31" pos:end="116:35">avctx</name><operator pos:start="116:36" pos:end="116:37">-&gt;</operator><name pos:start="116:38" pos:end="116:42">width</name></name>  <operator pos:start="116:45" pos:end="116:45">=</operator> <name pos:start="116:47" pos:end="116:61"><name pos:start="116:47" pos:end="116:47">v</name><operator pos:start="116:48" pos:end="116:49">-&gt;</operator><name pos:start="116:50" pos:end="116:61">output_width</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="117:9" pos:end="117:63"><expr pos:start="117:9" pos:end="117:62"><name pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:13">avctx</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:27">coded_height</name></name> <operator pos:start="117:29" pos:end="117:29">=</operator> <name pos:start="117:31" pos:end="117:43"><name pos:start="117:31" pos:end="117:35">avctx</name><operator pos:start="117:36" pos:end="117:37">-&gt;</operator><name pos:start="117:38" pos:end="117:43">height</name></name> <operator pos:start="117:45" pos:end="117:45">=</operator> <name pos:start="117:47" pos:end="117:62"><name pos:start="117:47" pos:end="117:47">v</name><operator pos:start="117:48" pos:end="117:49">-&gt;</operator><name pos:start="117:50" pos:end="117:62">output_height</name></name></expr>;</expr_stmt>
        <comment type="line" pos:start="118:9" pos:end="118:34">// prevent 16.16 overflows</comment>
        <if_stmt pos:start="119:9" pos:end="122:50"><if pos:start="119:9" pos:end="122:50">if <condition pos:start="119:12" pos:end="122:39">(<expr pos:start="119:13" pos:end="122:38"><name pos:start="119:13" pos:end="119:27"><name pos:start="119:13" pos:end="119:13">v</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:27">sprite_width</name></name>  <operator pos:start="119:30" pos:end="119:30">&gt;</operator> <literal type="number" pos:start="119:32" pos:end="119:32">1</literal> <operator pos:start="119:34" pos:end="119:35">&lt;&lt;</operator> <literal type="number" pos:start="119:37" pos:end="119:38">14</literal> <operator pos:start="119:40" pos:end="119:41">||</operator>
            <name pos:start="120:13" pos:end="120:28"><name pos:start="120:13" pos:end="120:13">v</name><operator pos:start="120:14" pos:end="120:15">-&gt;</operator><name pos:start="120:16" pos:end="120:28">sprite_height</name></name> <operator pos:start="120:30" pos:end="120:30">&gt;</operator> <literal type="number" pos:start="120:32" pos:end="120:32">1</literal> <operator pos:start="120:34" pos:end="120:35">&lt;&lt;</operator> <literal type="number" pos:start="120:37" pos:end="120:38">14</literal> <operator pos:start="120:40" pos:end="120:41">||</operator>
            <name pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:13">v</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:27">output_width</name></name>  <operator pos:start="121:30" pos:end="121:30">&gt;</operator> <literal type="number" pos:start="121:32" pos:end="121:32">1</literal> <operator pos:start="121:34" pos:end="121:35">&lt;&lt;</operator> <literal type="number" pos:start="121:37" pos:end="121:38">14</literal> <operator pos:start="121:40" pos:end="121:41">||</operator>
            <name pos:start="122:13" pos:end="122:28"><name pos:start="122:13" pos:end="122:13">v</name><operator pos:start="122:14" pos:end="122:15">-&gt;</operator><name pos:start="122:16" pos:end="122:28">output_height</name></name> <operator pos:start="122:30" pos:end="122:30">&gt;</operator> <literal type="number" pos:start="122:32" pos:end="122:32">1</literal> <operator pos:start="122:34" pos:end="122:35">&lt;&lt;</operator> <literal type="number" pos:start="122:37" pos:end="122:38">14</literal></expr>)</condition><block type="pseudo" pos:start="122:41" pos:end="122:50"><block_content pos:start="122:41" pos:end="122:50"> <return pos:start="122:41" pos:end="122:50">return <expr pos:start="122:48" pos:end="122:49"><operator pos:start="122:48" pos:end="122:48">-</operator><literal type="number" pos:start="122:49" pos:end="122:49">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="123:9" pos:end="126:9"><if pos:start="123:9" pos:end="126:9">if <condition pos:start="123:12" pos:end="123:56">(<expr pos:start="123:13" pos:end="123:55"><operator pos:start="123:13" pos:end="123:13">(</operator><name pos:start="123:14" pos:end="123:28"><name pos:start="123:14" pos:end="123:14">v</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:28">sprite_width</name></name><operator pos:start="123:29" pos:end="123:29">&amp;</operator><literal type="number" pos:start="123:30" pos:end="123:30">1</literal><operator pos:start="123:31" pos:end="123:31">)</operator> <operator pos:start="123:33" pos:end="123:34">||</operator> <operator pos:start="123:36" pos:end="123:36">(</operator><name pos:start="123:37" pos:end="123:52"><name pos:start="123:37" pos:end="123:37">v</name><operator pos:start="123:38" pos:end="123:39">-&gt;</operator><name pos:start="123:40" pos:end="123:52">sprite_height</name></name><operator pos:start="123:53" pos:end="123:53">&amp;</operator><literal type="number" pos:start="123:54" pos:end="123:54">1</literal><operator pos:start="123:55" pos:end="123:55">)</operator></expr>)</condition> <block pos:start="123:58" pos:end="126:9">{<block_content pos:start="124:13" pos:end="125:40">
            <expr_stmt pos:start="124:13" pos:end="124:64"><expr pos:start="124:13" pos:end="124:63"><call pos:start="124:13" pos:end="124:63"><name pos:start="124:13" pos:end="124:33">avpriv_request_sample</name><argument_list pos:start="124:34" pos:end="124:63">(<argument pos:start="124:35" pos:end="124:39"><expr pos:start="124:35" pos:end="124:39"><name pos:start="124:35" pos:end="124:39">avctx</name></expr></argument>, <argument pos:start="124:42" pos:end="124:62"><expr pos:start="124:42" pos:end="124:62"><literal type="string" pos:start="124:42" pos:end="124:62">"odd sprites support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="125:13" pos:end="125:40">return <expr pos:start="125:20" pos:end="125:39"><name pos:start="125:20" pos:end="125:39">AVERROR_PATCHWELCOME</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="128:5" pos:end="128:13">return <expr pos:start="128:12" pos:end="128:12"><literal type="number" pos:start="128:12" pos:end="128:12">0</literal></expr>;</return>
</block_content>}</block></function></unit>
