<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20649.c" pos:tabs="8"><function pos:start="1:1" pos:end="387:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">ref405ep_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">MachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:47">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="387:1">{<block_content pos:start="5:5" pos:end="386:0">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:20">ppc4xx_bd_info_t</name></type> <name pos:start="15:22" pos:end="15:23">bd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">CPUPPCState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:22">bios</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:48"><decl pos:start="23:5" pos:end="23:47"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:22">sram</name> <init pos:start="23:24" pos:end="23:47">= <expr pos:start="23:26" pos:end="23:47"><call pos:start="23:26" pos:end="23:47"><name pos:start="23:26" pos:end="23:30">g_new</name><argument_list pos:start="23:31" pos:end="23:47">(<argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43">MemoryRegion</name></expr></argument>, <argument pos:start="23:46" pos:end="23:46"><expr pos:start="23:46" pos:end="23:46"><literal type="number" pos:start="23:46" pos:end="23:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:14">ram_addr_t</name></type> <name pos:start="25:16" pos:end="25:20">bdloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:69"><decl pos:start="27:5" pos:end="27:68"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:30">ram_memories</name> <init pos:start="27:32" pos:end="27:68">= <expr pos:start="27:34" pos:end="27:68"><call pos:start="27:34" pos:end="27:68"><name pos:start="27:34" pos:end="27:41">g_malloc</name><argument_list pos:start="27:42" pos:end="27:68">(<argument pos:start="27:43" pos:end="27:67"><expr pos:start="27:43" pos:end="27:67"><literal type="number" pos:start="27:43" pos:end="27:43">2</literal> <operator pos:start="27:45" pos:end="27:45">*</operator> <sizeof pos:start="27:47" pos:end="27:67">sizeof<argument_list pos:start="27:53" pos:end="27:67">(<argument pos:start="27:54" pos:end="27:66"><expr pos:start="27:54" pos:end="27:66"><operator pos:start="27:54" pos:end="27:54">*</operator><name pos:start="27:55" pos:end="27:66">ram_memories</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:38"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:10">hwaddr</name></type> <name pos:start="29:12" pos:end="29:23"><name pos:start="29:12" pos:end="29:20">ram_bases</name><index pos:start="29:21" pos:end="29:23">[<expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">2</literal></expr>]</index></name></decl>, <decl pos:start="29:26" pos:end="29:37"><type ref="prev" pos:start="29:5" pos:end="29:10"/><name pos:start="29:26" pos:end="29:37"><name pos:start="29:26" pos:end="29:34">ram_sizes</name><index pos:start="29:35" pos:end="29:37">[<expr pos:start="29:36" pos:end="29:36"><literal type="number" pos:start="29:36" pos:end="29:36">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:27"><decl pos:start="31:5" pos:end="31:26"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:16">target_ulong</name></type> <name pos:start="31:18" pos:end="31:26">sram_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:19"><decl pos:start="33:5" pos:end="33:18"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">long</name></type> <name pos:start="33:10" pos:end="33:18">bios_size</name></decl>;</decl_stmt>

    <comment type="line" pos:start="35:5" pos:end="35:23">//int phy_addr = 0;</comment>

    <comment type="line" pos:start="37:5" pos:end="37:30">//static int phy_addr = 1;</comment>

    <decl_stmt pos:start="39:5" pos:end="39:42"><decl pos:start="39:5" pos:end="39:28"><type pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:16">target_ulong</name></type> <name pos:start="39:18" pos:end="39:28">kernel_base</name></decl>, <decl pos:start="39:31" pos:end="39:41"><type ref="prev" pos:start="39:5" pos:end="39:16"/><name pos:start="39:31" pos:end="39:41">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:34"><decl pos:start="41:5" pos:end="41:20"><type pos:start="41:5" pos:end="41:8"><name pos:start="41:5" pos:end="41:8">long</name></type> <name pos:start="41:10" pos:end="41:20">kernel_size</name></decl>, <decl pos:start="41:23" pos:end="41:33"><type ref="prev" pos:start="41:5" pos:end="41:8"/><name pos:start="41:23" pos:end="41:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:19"><decl pos:start="43:5" pos:end="43:18"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:18">linux_boot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:32"><decl pos:start="45:5" pos:end="45:14"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:14">fl_idx</name></decl>, <decl pos:start="45:17" pos:end="45:26"><type ref="prev" pos:start="45:5" pos:end="45:7"/><name pos:start="45:17" pos:end="45:26">fl_sectors</name></decl>, <decl pos:start="45:29" pos:end="45:31"><type ref="prev" pos:start="45:5" pos:end="45:7"/><name pos:start="45:29" pos:end="45:31">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:21"><decl pos:start="47:5" pos:end="47:20"><type pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:13">DriveInfo</name> <modifier pos:start="47:15" pos:end="47:15">*</modifier></type><name pos:start="47:16" pos:end="47:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:47"><decl pos:start="49:5" pos:end="49:46"><type pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:16">MemoryRegion</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:24">sysmem</name> <init pos:start="49:26" pos:end="49:46">= <expr pos:start="49:28" pos:end="49:46"><call pos:start="49:28" pos:end="49:46"><name pos:start="49:28" pos:end="49:44">get_system_memory</name><argument_list pos:start="49:45" pos:end="49:46">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:23">/* XXX: fix this */</comment>

    <expr_stmt pos:start="55:5" pos:end="57:53"><expr pos:start="55:5" pos:end="57:52"><call pos:start="55:5" pos:end="57:52"><name pos:start="55:5" pos:end="55:40">memory_region_allocate_system_memory</name><argument_list pos:start="55:41" pos:end="57:52">(<argument pos:start="55:42" pos:end="55:57"><expr pos:start="55:42" pos:end="55:57"><operator pos:start="55:42" pos:end="55:42">&amp;</operator><name pos:start="55:43" pos:end="55:57"><name pos:start="55:43" pos:end="55:54">ram_memories</name><index pos:start="55:55" pos:end="55:57">[<expr pos:start="55:56" pos:end="55:56"><literal type="number" pos:start="55:56" pos:end="55:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="55:60" pos:end="55:63"><expr pos:start="55:60" pos:end="55:63"><name pos:start="55:60" pos:end="55:63">NULL</name></expr></argument>, <argument pos:start="55:66" pos:end="55:78"><expr pos:start="55:66" pos:end="55:78"><literal type="string" pos:start="55:66" pos:end="55:78">"ef405ep.ram"</literal></expr></argument>,

                                         <argument pos:start="57:42" pos:end="57:51"><expr pos:start="57:42" pos:end="57:51"><literal type="number" pos:start="57:42" pos:end="57:51">0x08000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:21"><expr pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:16"><name pos:start="59:5" pos:end="59:13">ram_bases</name><index pos:start="59:14" pos:end="59:16">[<expr pos:start="59:15" pos:end="59:15"><literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>]</index></name> <operator pos:start="59:18" pos:end="59:18">=</operator> <literal type="number" pos:start="59:20" pos:end="59:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:30"><expr pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:13">ram_sizes</name><index pos:start="61:14" pos:end="61:16">[<expr pos:start="61:15" pos:end="61:15"><literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>]</index></name> <operator pos:start="61:18" pos:end="61:18">=</operator> <literal type="number" pos:start="61:20" pos:end="61:29">0x08000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:66"><expr pos:start="63:5" pos:end="63:65"><call pos:start="63:5" pos:end="63:65"><name pos:start="63:5" pos:end="63:22">memory_region_init</name><argument_list pos:start="63:23" pos:end="63:65">(<argument pos:start="63:24" pos:end="63:39"><expr pos:start="63:24" pos:end="63:39"><operator pos:start="63:24" pos:end="63:24">&amp;</operator><name pos:start="63:25" pos:end="63:39"><name pos:start="63:25" pos:end="63:36">ram_memories</name><index pos:start="63:37" pos:end="63:39">[<expr pos:start="63:38" pos:end="63:38"><literal type="number" pos:start="63:38" pos:end="63:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="63:42" pos:end="63:45"><expr pos:start="63:42" pos:end="63:45"><name pos:start="63:42" pos:end="63:45">NULL</name></expr></argument>, <argument pos:start="63:48" pos:end="63:61"><expr pos:start="63:48" pos:end="63:61"><literal type="string" pos:start="63:48" pos:end="63:61">"ef405ep.ram1"</literal></expr></argument>, <argument pos:start="63:64" pos:end="63:64"><expr pos:start="63:64" pos:end="63:64"><literal type="number" pos:start="63:64" pos:end="63:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:13">ram_bases</name><index pos:start="65:14" pos:end="65:16">[<expr pos:start="65:15" pos:end="65:15"><literal type="number" pos:start="65:15" pos:end="65:15">1</literal></expr>]</index></name> <operator pos:start="65:18" pos:end="65:18">=</operator> <literal type="number" pos:start="65:20" pos:end="65:29">0x00000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:30"><expr pos:start="67:5" pos:end="67:29"><name pos:start="67:5" pos:end="67:16"><name pos:start="67:5" pos:end="67:13">ram_sizes</name><index pos:start="67:14" pos:end="67:16">[<expr pos:start="67:15" pos:end="67:15"><literal type="number" pos:start="67:15" pos:end="67:15">1</literal></expr>]</index></name> <operator pos:start="67:18" pos:end="67:18">=</operator> <literal type="number" pos:start="67:20" pos:end="67:29">0x00000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="72:0"><expr pos:start="69:5" pos:end="69:32"><name pos:start="69:5" pos:end="69:12">ram_size</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <literal type="number" pos:start="69:16" pos:end="69:18">128</literal> <operator pos:start="69:20" pos:end="69:20">*</operator> <literal type="number" pos:start="69:22" pos:end="69:25">1024</literal> <operator pos:start="69:27" pos:end="69:27">*</operator> <literal type="number" pos:start="69:29" pos:end="69:32">1024</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="71:1" pos:end="71:23">#<cpp:directive pos:start="71:2" pos:end="71:6">ifdef</cpp:directive> <name pos:start="71:8" pos:end="71:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="73:5" pos:end="76:0"><expr pos:start="73:5" pos:end="73:42"><call pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:10">printf</name><argument_list pos:start="73:11" pos:end="73:42">(<argument pos:start="73:12" pos:end="73:31"><expr pos:start="73:12" pos:end="73:31"><literal type="string" pos:start="73:12" pos:end="73:31">"%s: register cpu\n"</literal></expr></argument>, <argument pos:start="73:34" pos:end="73:41"><expr pos:start="73:34" pos:end="73:41"><name pos:start="73:34" pos:end="73:41">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="77:5" pos:end="79:73"><expr pos:start="77:5" pos:end="79:72"><name pos:start="77:5" pos:end="77:7">env</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="79:72"><name pos:start="77:11" pos:end="77:23">ppc405ep_init</name><argument_list pos:start="77:24" pos:end="79:72">(<argument pos:start="77:25" pos:end="77:30"><expr pos:start="77:25" pos:end="77:30"><name pos:start="77:25" pos:end="77:30">sysmem</name></expr></argument>, <argument pos:start="77:33" pos:end="77:44"><expr pos:start="77:33" pos:end="77:44"><name pos:start="77:33" pos:end="77:44">ram_memories</name></expr></argument>, <argument pos:start="77:47" pos:end="77:55"><expr pos:start="77:47" pos:end="77:55"><name pos:start="77:47" pos:end="77:55">ram_bases</name></expr></argument>, <argument pos:start="77:58" pos:end="77:66"><expr pos:start="77:58" pos:end="77:66"><name pos:start="77:58" pos:end="77:66">ram_sizes</name></expr></argument>,

                        <argument pos:start="79:25" pos:end="79:32"><expr pos:start="79:25" pos:end="79:32"><literal type="number" pos:start="79:25" pos:end="79:32">33333333</literal></expr></argument>, <argument pos:start="79:35" pos:end="79:38"><expr pos:start="79:35" pos:end="79:38"><operator pos:start="79:35" pos:end="79:35">&amp;</operator><name pos:start="79:36" pos:end="79:38">pic</name></expr></argument>, <argument pos:start="79:41" pos:end="79:71"><expr pos:start="79:41" pos:end="79:71"><ternary pos:start="79:41" pos:end="79:71"><condition pos:start="79:41" pos:end="79:65"><expr pos:start="79:41" pos:end="79:63"><name pos:start="79:41" pos:end="79:55">kernel_filename</name> <operator pos:start="79:57" pos:end="79:58">==</operator> <name pos:start="79:60" pos:end="79:63">NULL</name></expr> ?</condition><then pos:start="79:67" pos:end="79:67"> <expr pos:start="79:67" pos:end="79:67"><literal type="number" pos:start="79:67" pos:end="79:67">0</literal></expr> </then><else pos:start="79:69" pos:end="79:71">: <expr pos:start="79:71" pos:end="79:71"><literal type="number" pos:start="79:71" pos:end="79:71">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="81:5" pos:end="81:23">/* allocate SRAM */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:13">sram_size</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <literal type="number" pos:start="83:17" pos:end="83:19">512</literal> <operator pos:start="83:21" pos:end="83:21">*</operator> <literal type="number" pos:start="83:23" pos:end="83:26">1024</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:80"><expr pos:start="85:5" pos:end="85:79"><call pos:start="85:5" pos:end="85:79"><name pos:start="85:5" pos:end="85:26">memory_region_init_ram</name><argument_list pos:start="85:27" pos:end="85:79">(<argument pos:start="85:28" pos:end="85:31"><expr pos:start="85:28" pos:end="85:31"><name pos:start="85:28" pos:end="85:31">sram</name></expr></argument>, <argument pos:start="85:34" pos:end="85:37"><expr pos:start="85:34" pos:end="85:37"><name pos:start="85:34" pos:end="85:37">NULL</name></expr></argument>, <argument pos:start="85:40" pos:end="85:53"><expr pos:start="85:40" pos:end="85:53"><literal type="string" pos:start="85:40" pos:end="85:53">"ef405ep.sram"</literal></expr></argument>, <argument pos:start="85:56" pos:end="85:64"><expr pos:start="85:56" pos:end="85:64"><name pos:start="85:56" pos:end="85:64">sram_size</name></expr></argument>, <argument pos:start="85:67" pos:end="85:78"><expr pos:start="85:67" pos:end="85:78"><operator pos:start="85:67" pos:end="85:67">&amp;</operator><name pos:start="85:68" pos:end="85:78">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:38"><expr pos:start="87:5" pos:end="87:37"><call pos:start="87:5" pos:end="87:37"><name pos:start="87:5" pos:end="87:31">vmstate_register_ram_global</name><argument_list pos:start="87:32" pos:end="87:37">(<argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="94:0"><expr pos:start="89:5" pos:end="89:57"><call pos:start="89:5" pos:end="89:57"><name pos:start="89:5" pos:end="89:31">memory_region_add_subregion</name><argument_list pos:start="89:32" pos:end="89:57">(<argument pos:start="89:33" pos:end="89:38"><expr pos:start="89:33" pos:end="89:38"><name pos:start="89:33" pos:end="89:38">sysmem</name></expr></argument>, <argument pos:start="89:41" pos:end="89:50"><expr pos:start="89:41" pos:end="89:50"><literal type="number" pos:start="89:41" pos:end="89:50">0xFFF00000</literal></expr></argument>, <argument pos:start="89:53" pos:end="89:56"><expr pos:start="89:53" pos:end="89:56"><name pos:start="89:53" pos:end="89:56">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="91:5" pos:end="91:32">/* allocate and load BIOS */</comment>

<cpp:ifdef pos:start="93:1" pos:end="93:23">#<cpp:directive pos:start="93:2" pos:end="93:6">ifdef</cpp:directive> <name pos:start="93:8" pos:end="93:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="95:5" pos:end="98:0"><expr pos:start="95:5" pos:end="95:43"><call pos:start="95:5" pos:end="95:43"><name pos:start="95:5" pos:end="95:10">printf</name><argument_list pos:start="95:11" pos:end="95:43">(<argument pos:start="95:12" pos:end="95:32"><expr pos:start="95:12" pos:end="95:32"><literal type="string" pos:start="95:12" pos:end="95:32">"%s: register BIOS\n"</literal></expr></argument>, <argument pos:start="95:35" pos:end="95:42"><expr pos:start="95:35" pos:end="95:42"><name pos:start="95:35" pos:end="95:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="99:5" pos:end="102:0"><expr pos:start="99:5" pos:end="99:14"><name pos:start="99:5" pos:end="99:10">fl_idx</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <literal type="number" pos:start="99:14" pos:end="99:14">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="101:1" pos:end="101:21">#<cpp:directive pos:start="101:2" pos:end="101:6">ifdef</cpp:directive> <name pos:start="101:8" pos:end="101:21">USE_FLASH_BIOS</name></cpp:ifdef>

    <expr_stmt pos:start="103:5" pos:end="103:44"><expr pos:start="103:5" pos:end="103:43"><name pos:start="103:5" pos:end="103:9">dinfo</name> <operator pos:start="103:11" pos:end="103:11">=</operator> <call pos:start="103:13" pos:end="103:43"><name pos:start="103:13" pos:end="103:21">drive_get</name><argument_list pos:start="103:22" pos:end="103:43">(<argument pos:start="103:23" pos:end="103:31"><expr pos:start="103:23" pos:end="103:31"><name pos:start="103:23" pos:end="103:31">IF_PFLASH</name></expr></argument>, <argument pos:start="103:34" pos:end="103:34"><expr pos:start="103:34" pos:end="103:34"><literal type="number" pos:start="103:34" pos:end="103:34">0</literal></expr></argument>, <argument pos:start="103:37" pos:end="103:42"><expr pos:start="103:37" pos:end="103:42"><name pos:start="103:37" pos:end="103:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="206:0"><if pos:start="105:5" pos:end="139:5">if <condition pos:start="105:8" pos:end="105:14">(<expr pos:start="105:9" pos:end="105:13"><name pos:start="105:9" pos:end="105:13">dinfo</name></expr>)</condition> <block pos:start="105:16" pos:end="139:5">{<block_content pos:start="107:9" pos:end="137:17">

        <decl_stmt pos:start="107:9" pos:end="107:55"><decl pos:start="107:9" pos:end="107:54"><type pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:20">BlockBackend</name> <modifier pos:start="107:22" pos:end="107:22">*</modifier></type><name pos:start="107:23" pos:end="107:25">blk</name> <init pos:start="107:27" pos:end="107:54">= <expr pos:start="107:29" pos:end="107:54"><call pos:start="107:29" pos:end="107:54"><name pos:start="107:29" pos:end="107:47">blk_by_legacy_dinfo</name><argument_list pos:start="107:48" pos:end="107:54">(<argument pos:start="107:49" pos:end="107:53"><expr pos:start="107:49" pos:end="107:53"><name pos:start="107:49" pos:end="107:53">dinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:39"><expr pos:start="111:9" pos:end="111:38"><name pos:start="111:9" pos:end="111:17">bios_size</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="111:38"><name pos:start="111:21" pos:end="111:33">blk_getlength</name><argument_list pos:start="111:34" pos:end="111:38">(<argument pos:start="111:35" pos:end="111:37"><expr pos:start="111:35" pos:end="111:37"><name pos:start="111:35" pos:end="111:37">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="116:0"><expr pos:start="113:9" pos:end="113:46"><name pos:start="113:9" pos:end="113:18">fl_sectors</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <operator pos:start="113:22" pos:end="113:22">(</operator><name pos:start="113:23" pos:end="113:31">bios_size</name> <operator pos:start="113:33" pos:end="113:33">+</operator> <literal type="number" pos:start="113:35" pos:end="113:39">65535</literal><operator pos:start="113:40" pos:end="113:40">)</operator> <operator pos:start="113:42" pos:end="113:43">&gt;&gt;</operator> <literal type="number" pos:start="113:45" pos:end="113:46">16</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="115:1" pos:end="115:23">#<cpp:directive pos:start="115:2" pos:end="115:6">ifdef</cpp:directive> <name pos:start="115:8" pos:end="115:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="117:9" pos:end="126:0"><expr pos:start="117:9" pos:end="123:41"><call pos:start="117:9" pos:end="123:41"><name pos:start="117:9" pos:end="117:14">printf</name><argument_list pos:start="117:15" pos:end="123:41">(<argument pos:start="117:16" pos:end="119:39"><expr pos:start="117:16" pos:end="119:39"><literal type="string" pos:start="117:16" pos:end="117:52">"Register parallel flash %d size %lx"</literal>

               <literal type="string" pos:start="119:16" pos:end="119:39">" at addr %lx '%s' %d\n"</literal></expr></argument>,

               <argument pos:start="121:16" pos:end="121:21"><expr pos:start="121:16" pos:end="121:21"><name pos:start="121:16" pos:end="121:21">fl_idx</name></expr></argument>, <argument pos:start="121:24" pos:end="121:32"><expr pos:start="121:24" pos:end="121:32"><name pos:start="121:24" pos:end="121:32">bios_size</name></expr></argument>, <argument pos:start="121:35" pos:end="121:44"><expr pos:start="121:35" pos:end="121:44"><operator pos:start="121:35" pos:end="121:35">-</operator><name pos:start="121:36" pos:end="121:44">bios_size</name></expr></argument>,

               <argument pos:start="123:16" pos:end="123:28"><expr pos:start="123:16" pos:end="123:28"><call pos:start="123:16" pos:end="123:28"><name pos:start="123:16" pos:end="123:23">blk_name</name><argument_list pos:start="123:24" pos:end="123:28">(<argument pos:start="123:25" pos:end="123:27"><expr pos:start="123:25" pos:end="123:27"><name pos:start="123:25" pos:end="123:27">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:31" pos:end="123:40"><expr pos:start="123:31" pos:end="123:40"><name pos:start="123:31" pos:end="123:40">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="127:9" pos:end="135:33"><expr pos:start="127:9" pos:end="135:32"><call pos:start="127:9" pos:end="135:32"><name pos:start="127:9" pos:end="127:29">pflash_cfi02_register</name><argument_list pos:start="127:30" pos:end="135:32">(<argument pos:start="127:31" pos:end="127:52"><expr pos:start="127:31" pos:end="127:52"><operator pos:start="127:31" pos:end="127:31">(</operator><name pos:start="127:32" pos:end="127:39">uint32_t</name><operator pos:start="127:40" pos:end="127:40">)</operator><operator pos:start="127:41" pos:end="127:41">(</operator><operator pos:start="127:42" pos:end="127:42">-</operator><name pos:start="127:43" pos:end="127:51">bios_size</name><operator pos:start="127:52" pos:end="127:52">)</operator></expr></argument>,

                              <argument pos:start="129:31" pos:end="129:34"><expr pos:start="129:31" pos:end="129:34"><name pos:start="129:31" pos:end="129:34">NULL</name></expr></argument>, <argument pos:start="129:37" pos:end="129:50"><expr pos:start="129:37" pos:end="129:50"><literal type="string" pos:start="129:37" pos:end="129:50">"ef405ep.bios"</literal></expr></argument>, <argument pos:start="129:53" pos:end="129:61"><expr pos:start="129:53" pos:end="129:61"><name pos:start="129:53" pos:end="129:61">bios_size</name></expr></argument>,

                              <argument pos:start="131:31" pos:end="131:33"><expr pos:start="131:31" pos:end="131:33"><name pos:start="131:31" pos:end="131:33">blk</name></expr></argument>, <argument pos:start="131:36" pos:end="131:40"><expr pos:start="131:36" pos:end="131:40"><literal type="number" pos:start="131:36" pos:end="131:40">65536</literal></expr></argument>, <argument pos:start="131:43" pos:end="131:52"><expr pos:start="131:43" pos:end="131:52"><name pos:start="131:43" pos:end="131:52">fl_sectors</name></expr></argument>, <argument pos:start="131:55" pos:end="131:55"><expr pos:start="131:55" pos:end="131:55"><literal type="number" pos:start="131:55" pos:end="131:55">1</literal></expr></argument>,

                              <argument pos:start="133:31" pos:end="133:31"><expr pos:start="133:31" pos:end="133:31"><literal type="number" pos:start="133:31" pos:end="133:31">2</literal></expr></argument>, <argument pos:start="133:34" pos:end="133:39"><expr pos:start="133:34" pos:end="133:39"><literal type="number" pos:start="133:34" pos:end="133:39">0x0001</literal></expr></argument>, <argument pos:start="133:42" pos:end="133:47"><expr pos:start="133:42" pos:end="133:47"><literal type="number" pos:start="133:42" pos:end="133:47">0x22DA</literal></expr></argument>, <argument pos:start="133:50" pos:end="133:55"><expr pos:start="133:50" pos:end="133:55"><literal type="number" pos:start="133:50" pos:end="133:55">0x0000</literal></expr></argument>, <argument pos:start="133:58" pos:end="133:63"><expr pos:start="133:58" pos:end="133:63"><literal type="number" pos:start="133:58" pos:end="133:63">0x0000</literal></expr></argument>, <argument pos:start="133:66" pos:end="133:70"><expr pos:start="133:66" pos:end="133:70"><literal type="number" pos:start="133:66" pos:end="133:70">0x555</literal></expr></argument>, <argument pos:start="133:73" pos:end="133:77"><expr pos:start="133:73" pos:end="133:77"><literal type="number" pos:start="133:73" pos:end="133:77">0x2AA</literal></expr></argument>,

                              <argument pos:start="135:31" pos:end="135:31"><expr pos:start="135:31" pos:end="135:31"><literal type="number" pos:start="135:31" pos:end="135:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:17"><expr pos:start="137:9" pos:end="137:16"><name pos:start="137:9" pos:end="137:14">fl_idx</name><operator pos:start="137:15" pos:end="137:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="139:7" pos:end="206:0">else

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

    <block pos:start="143:5" pos:end="206:0">{<block_content pos:start="147:9" pos:end="199:47">

<cpp:ifdef pos:start="145:1" pos:end="145:23">#<cpp:directive pos:start="145:2" pos:end="145:6">ifdef</cpp:directive> <name pos:start="145:8" pos:end="145:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="147:9" pos:end="150:0"><expr pos:start="147:9" pos:end="147:39"><call pos:start="147:9" pos:end="147:39"><name pos:start="147:9" pos:end="147:14">printf</name><argument_list pos:start="147:15" pos:end="147:39">(<argument pos:start="147:16" pos:end="147:38"><expr pos:start="147:16" pos:end="147:38"><literal type="string" pos:start="147:16" pos:end="147:38">"Load BIOS from file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="151:9" pos:end="151:38"><expr pos:start="151:9" pos:end="151:37"><name pos:start="151:9" pos:end="151:12">bios</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <call pos:start="151:16" pos:end="151:37"><name pos:start="151:16" pos:end="151:20">g_new</name><argument_list pos:start="151:21" pos:end="151:37">(<argument pos:start="151:22" pos:end="151:33"><expr pos:start="151:22" pos:end="151:33"><name pos:start="151:22" pos:end="151:33">MemoryRegion</name></expr></argument>, <argument pos:start="151:36" pos:end="151:36"><expr pos:start="151:36" pos:end="151:36"><literal type="number" pos:start="151:36" pos:end="151:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="155:45"><expr pos:start="153:9" pos:end="155:44"><call pos:start="153:9" pos:end="155:44"><name pos:start="153:9" pos:end="153:30">memory_region_init_ram</name><argument_list pos:start="153:31" pos:end="155:44">(<argument pos:start="153:32" pos:end="153:35"><expr pos:start="153:32" pos:end="153:35"><name pos:start="153:32" pos:end="153:35">bios</name></expr></argument>, <argument pos:start="153:38" pos:end="153:41"><expr pos:start="153:38" pos:end="153:41"><name pos:start="153:38" pos:end="153:41">NULL</name></expr></argument>, <argument pos:start="153:44" pos:end="153:57"><expr pos:start="153:44" pos:end="153:57"><literal type="string" pos:start="153:44" pos:end="153:57">"ef405ep.bios"</literal></expr></argument>, <argument pos:start="153:60" pos:end="153:68"><expr pos:start="153:60" pos:end="153:68"><name pos:start="153:60" pos:end="153:68">BIOS_SIZE</name></expr></argument>,

                               <argument pos:start="155:32" pos:end="155:43"><expr pos:start="155:32" pos:end="155:43"><operator pos:start="155:32" pos:end="155:32">&amp;</operator><name pos:start="155:33" pos:end="155:43">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:42"><expr pos:start="157:9" pos:end="157:41"><call pos:start="157:9" pos:end="157:41"><name pos:start="157:9" pos:end="157:35">vmstate_register_ram_global</name><argument_list pos:start="157:36" pos:end="157:41">(<argument pos:start="157:37" pos:end="157:40"><expr pos:start="157:37" pos:end="157:40"><name pos:start="157:37" pos:end="157:40">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="161:9" pos:end="163:38"><if pos:start="161:9" pos:end="163:38">if <condition pos:start="161:12" pos:end="161:30">(<expr pos:start="161:13" pos:end="161:29"><name pos:start="161:13" pos:end="161:21">bios_name</name> <operator pos:start="161:23" pos:end="161:24">==</operator> <name pos:start="161:26" pos:end="161:29">NULL</name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:38"><block_content pos:start="163:13" pos:end="163:38">

            <expr_stmt pos:start="163:13" pos:end="163:38"><expr pos:start="163:13" pos:end="163:37"><name pos:start="163:13" pos:end="163:21">bios_name</name> <operator pos:start="163:23" pos:end="163:23">=</operator> <name pos:start="163:25" pos:end="163:37">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:66"><expr pos:start="165:9" pos:end="165:65"><name pos:start="165:9" pos:end="165:16">filename</name> <operator pos:start="165:18" pos:end="165:18">=</operator> <call pos:start="165:20" pos:end="165:65"><name pos:start="165:20" pos:end="165:33">qemu_find_file</name><argument_list pos:start="165:34" pos:end="165:65">(<argument pos:start="165:35" pos:end="165:53"><expr pos:start="165:35" pos:end="165:53"><name pos:start="165:35" pos:end="165:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="165:56" pos:end="165:64"><expr pos:start="165:56" pos:end="165:64"><name pos:start="165:56" pos:end="165:64">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="197:9"><if pos:start="167:9" pos:end="185:9">if <condition pos:start="167:12" pos:end="167:21">(<expr pos:start="167:13" pos:end="167:20"><name pos:start="167:13" pos:end="167:20">filename</name></expr>)</condition> <block pos:start="167:23" pos:end="185:9">{<block_content pos:start="169:13" pos:end="183:78">

            <expr_stmt pos:start="169:13" pos:end="169:78"><expr pos:start="169:13" pos:end="169:77"><name pos:start="169:13" pos:end="169:21">bios_size</name> <operator pos:start="169:23" pos:end="169:23">=</operator> <call pos:start="169:25" pos:end="169:77"><name pos:start="169:25" pos:end="169:34">load_image</name><argument_list pos:start="169:35" pos:end="169:77">(<argument pos:start="169:36" pos:end="169:43"><expr pos:start="169:36" pos:end="169:43"><name pos:start="169:36" pos:end="169:43">filename</name></expr></argument>, <argument pos:start="169:46" pos:end="169:76"><expr pos:start="169:46" pos:end="169:76"><call pos:start="169:46" pos:end="169:76"><name pos:start="169:46" pos:end="169:70">memory_region_get_ram_ptr</name><argument_list pos:start="169:71" pos:end="169:76">(<argument pos:start="169:72" pos:end="169:75"><expr pos:start="169:72" pos:end="169:75"><name pos:start="169:72" pos:end="169:75">bios</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:29"><expr pos:start="171:13" pos:end="171:28"><call pos:start="171:13" pos:end="171:28"><name pos:start="171:13" pos:end="171:18">g_free</name><argument_list pos:start="171:19" pos:end="171:28">(<argument pos:start="171:20" pos:end="171:27"><expr pos:start="171:20" pos:end="171:27"><name pos:start="171:20" pos:end="171:27">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="179:13"><if pos:start="173:13" pos:end="179:13">if <condition pos:start="173:16" pos:end="173:55">(<expr pos:start="173:17" pos:end="173:54"><name pos:start="173:17" pos:end="173:44"><name pos:start="173:17" pos:end="173:25">bios_size</name> <argument_list type="generic" pos:start="173:27" pos:end="173:44">&lt; <argument pos:start="173:29" pos:end="173:42"><expr pos:start="173:29" pos:end="173:42"><literal type="number" pos:start="173:29" pos:end="173:29">0</literal> <operator pos:start="173:31" pos:end="173:32">||</operator> <name pos:start="173:34" pos:end="173:42">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="173:46" pos:end="173:54">BIOS_SIZE</name></expr>)</condition> <block pos:start="173:57" pos:end="179:13">{<block_content pos:start="175:17" pos:end="177:24">

                <expr_stmt pos:start="175:17" pos:end="175:76"><expr pos:start="175:17" pos:end="175:75"><call pos:start="175:17" pos:end="175:75"><name pos:start="175:17" pos:end="175:28">error_report</name><argument_list pos:start="175:29" pos:end="175:75">(<argument pos:start="175:30" pos:end="175:63"><expr pos:start="175:30" pos:end="175:63"><literal type="string" pos:start="175:30" pos:end="175:63">"Could not load PowerPC BIOS '%s'"</literal></expr></argument>, <argument pos:start="175:66" pos:end="175:74"><expr pos:start="175:66" pos:end="175:74"><name pos:start="175:66" pos:end="175:74">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:24"><expr pos:start="177:17" pos:end="177:23"><call pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:20">exit</name><argument_list pos:start="177:21" pos:end="177:23">(<argument pos:start="177:22" pos:end="177:22"><expr pos:start="177:22" pos:end="177:22"><literal type="number" pos:start="177:22" pos:end="177:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:53"><expr pos:start="181:13" pos:end="181:52"><name pos:start="181:13" pos:end="181:21">bios_size</name> <operator pos:start="181:23" pos:end="181:23">=</operator> <operator pos:start="181:25" pos:end="181:25">(</operator><name pos:start="181:26" pos:end="181:34">bios_size</name> <operator pos:start="181:36" pos:end="181:36">+</operator> <literal type="number" pos:start="181:38" pos:end="181:42">0xfff</literal><operator pos:start="181:43" pos:end="181:43">)</operator> <operator pos:start="181:45" pos:end="181:45">&amp;</operator> <operator pos:start="181:47" pos:end="181:47">~</operator><literal type="number" pos:start="181:48" pos:end="181:52">0xfff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:78"><expr pos:start="183:13" pos:end="183:77"><call pos:start="183:13" pos:end="183:77"><name pos:start="183:13" pos:end="183:39">memory_region_add_subregion</name><argument_list pos:start="183:40" pos:end="183:77">(<argument pos:start="183:41" pos:end="183:46"><expr pos:start="183:41" pos:end="183:46"><name pos:start="183:41" pos:end="183:46">sysmem</name></expr></argument>, <argument pos:start="183:49" pos:end="183:70"><expr pos:start="183:49" pos:end="183:70"><operator pos:start="183:49" pos:end="183:49">(</operator><name pos:start="183:50" pos:end="183:57">uint32_t</name><operator pos:start="183:58" pos:end="183:58">)</operator><operator pos:start="183:59" pos:end="183:59">(</operator><operator pos:start="183:60" pos:end="183:60">-</operator><name pos:start="183:61" pos:end="183:69">bios_size</name><operator pos:start="183:70" pos:end="183:70">)</operator></expr></argument>, <argument pos:start="183:73" pos:end="183:76"><expr pos:start="183:73" pos:end="183:76"><name pos:start="183:73" pos:end="183:76">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="185:11" pos:end="191:9">else if <condition pos:start="185:19" pos:end="185:63">(<expr pos:start="185:20" pos:end="185:62"><operator pos:start="185:20" pos:end="185:20">!</operator><call pos:start="185:21" pos:end="185:35"><name pos:start="185:21" pos:end="185:33">qtest_enabled</name><argument_list pos:start="185:34" pos:end="185:35">()</argument_list></call> <operator pos:start="185:37" pos:end="185:38">||</operator> <name pos:start="185:40" pos:end="185:54">kernel_filename</name> <operator pos:start="185:56" pos:end="185:57">!=</operator> <name pos:start="185:59" pos:end="185:62">NULL</name></expr>)</condition> <block pos:start="185:65" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:20">

            <expr_stmt pos:start="187:13" pos:end="187:72"><expr pos:start="187:13" pos:end="187:71"><call pos:start="187:13" pos:end="187:71"><name pos:start="187:13" pos:end="187:24">error_report</name><argument_list pos:start="187:25" pos:end="187:71">(<argument pos:start="187:26" pos:end="187:59"><expr pos:start="187:26" pos:end="187:59"><literal type="string" pos:start="187:26" pos:end="187:59">"Could not load PowerPC BIOS '%s'"</literal></expr></argument>, <argument pos:start="187:62" pos:end="187:70"><expr pos:start="187:62" pos:end="187:70"><name pos:start="187:62" pos:end="187:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:20"><expr pos:start="189:13" pos:end="189:19"><call pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:16">exit</name><argument_list pos:start="189:17" pos:end="189:19">(<argument pos:start="189:18" pos:end="189:18"><expr pos:start="189:18" pos:end="189:18"><literal type="number" pos:start="189:18" pos:end="189:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="191:11" pos:end="197:9">else <block pos:start="191:16" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:27">

            <comment type="block" pos:start="193:13" pos:end="193:57">/* Avoid an uninitialized variable warning */</comment>

            <expr_stmt pos:start="195:13" pos:end="195:27"><expr pos:start="195:13" pos:end="195:26"><name pos:start="195:13" pos:end="195:21">bios_size</name> <operator pos:start="195:23" pos:end="195:23">=</operator> <operator pos:start="195:25" pos:end="195:25">-</operator><literal type="number" pos:start="195:26" pos:end="195:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:47"><expr pos:start="199:9" pos:end="199:46"><call pos:start="199:9" pos:end="199:46"><name pos:start="199:9" pos:end="199:34">memory_region_set_readonly</name><argument_list pos:start="199:35" pos:end="199:46">(<argument pos:start="199:36" pos:end="199:39"><expr pos:start="199:36" pos:end="199:39"><name pos:start="199:36" pos:end="199:39">bios</name></expr></argument>, <argument pos:start="199:42" pos:end="199:45"><expr pos:start="199:42" pos:end="199:45"><name pos:start="199:42" pos:end="199:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="203:5" pos:end="203:23">/* Register FPGA */</comment>

<cpp:ifdef pos:start="205:1" pos:end="205:23">#<cpp:directive pos:start="205:2" pos:end="205:6">ifdef</cpp:directive> <name pos:start="205:8" pos:end="205:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="207:5" pos:end="210:0"><expr pos:start="207:5" pos:end="207:43"><call pos:start="207:5" pos:end="207:43"><name pos:start="207:5" pos:end="207:10">printf</name><argument_list pos:start="207:11" pos:end="207:43">(<argument pos:start="207:12" pos:end="207:32"><expr pos:start="207:12" pos:end="207:32"><literal type="string" pos:start="207:12" pos:end="207:32">"%s: register FPGA\n"</literal></expr></argument>, <argument pos:start="207:35" pos:end="207:42"><expr pos:start="207:35" pos:end="207:42"><name pos:start="207:35" pos:end="207:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="211:5" pos:end="216:0"><expr pos:start="211:5" pos:end="211:42"><call pos:start="211:5" pos:end="211:42"><name pos:start="211:5" pos:end="211:22">ref405ep_fpga_init</name><argument_list pos:start="211:23" pos:end="211:42">(<argument pos:start="211:24" pos:end="211:29"><expr pos:start="211:24" pos:end="211:29"><name pos:start="211:24" pos:end="211:29">sysmem</name></expr></argument>, <argument pos:start="211:32" pos:end="211:41"><expr pos:start="211:32" pos:end="211:41"><literal type="number" pos:start="211:32" pos:end="211:41">0xF0300000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="213:5" pos:end="213:24">/* Register NVRAM */</comment>

<cpp:ifdef pos:start="215:1" pos:end="215:23">#<cpp:directive pos:start="215:2" pos:end="215:6">ifdef</cpp:directive> <name pos:start="215:8" pos:end="215:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="217:5" pos:end="220:0"><expr pos:start="217:5" pos:end="217:44"><call pos:start="217:5" pos:end="217:44"><name pos:start="217:5" pos:end="217:10">printf</name><argument_list pos:start="217:11" pos:end="217:44">(<argument pos:start="217:12" pos:end="217:33"><expr pos:start="217:12" pos:end="217:33"><literal type="string" pos:start="217:12" pos:end="217:33">"%s: register NVRAM\n"</literal></expr></argument>, <argument pos:start="217:36" pos:end="217:43"><expr pos:start="217:36" pos:end="217:43"><name pos:start="217:36" pos:end="217:43">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="219:1" pos:end="219:6">#<cpp:directive pos:start="219:2" pos:end="219:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="221:5" pos:end="221:52"><expr pos:start="221:5" pos:end="221:51"><call pos:start="221:5" pos:end="221:51"><name pos:start="221:5" pos:end="221:15">m48t59_init</name><argument_list pos:start="221:16" pos:end="221:51">(<argument pos:start="221:17" pos:end="221:20"><expr pos:start="221:17" pos:end="221:20"><name pos:start="221:17" pos:end="221:20">NULL</name></expr></argument>, <argument pos:start="221:23" pos:end="221:32"><expr pos:start="221:23" pos:end="221:32"><literal type="number" pos:start="221:23" pos:end="221:32">0xF0000000</literal></expr></argument>, <argument pos:start="221:35" pos:end="221:35"><expr pos:start="221:35" pos:end="221:35"><literal type="number" pos:start="221:35" pos:end="221:35">0</literal></expr></argument>, <argument pos:start="221:38" pos:end="221:41"><expr pos:start="221:38" pos:end="221:41"><literal type="number" pos:start="221:38" pos:end="221:41">8192</literal></expr></argument>, <argument pos:start="221:44" pos:end="221:47"><expr pos:start="221:44" pos:end="221:47"><literal type="number" pos:start="221:44" pos:end="221:47">1968</literal></expr></argument>, <argument pos:start="221:50" pos:end="221:50"><expr pos:start="221:50" pos:end="221:50"><literal type="number" pos:start="221:50" pos:end="221:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="223:5" pos:end="223:21">/* Load kernel */</comment>

    <expr_stmt pos:start="225:5" pos:end="225:43"><expr pos:start="225:5" pos:end="225:42"><name pos:start="225:5" pos:end="225:14">linux_boot</name> <operator pos:start="225:16" pos:end="225:16">=</operator> <operator pos:start="225:18" pos:end="225:18">(</operator><name pos:start="225:19" pos:end="225:33">kernel_filename</name> <operator pos:start="225:35" pos:end="225:36">!=</operator> <name pos:start="225:38" pos:end="225:41">NULL</name><operator pos:start="225:42" pos:end="225:42">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="227:5" pos:end="380:0"><if pos:start="227:5" pos:end="365:5">if <condition pos:start="227:8" pos:end="227:19">(<expr pos:start="227:9" pos:end="227:18"><name pos:start="227:9" pos:end="227:18">linux_boot</name></expr>)</condition> <block pos:start="227:21" pos:end="365:5">{<block_content pos:start="231:9" pos:end="363:36">

<cpp:ifdef pos:start="229:1" pos:end="229:23">#<cpp:directive pos:start="229:2" pos:end="229:6">ifdef</cpp:directive> <name pos:start="229:8" pos:end="229:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="231:9" pos:end="234:0"><expr pos:start="231:9" pos:end="231:45"><call pos:start="231:9" pos:end="231:45"><name pos:start="231:9" pos:end="231:14">printf</name><argument_list pos:start="231:15" pos:end="231:45">(<argument pos:start="231:16" pos:end="231:34"><expr pos:start="231:16" pos:end="231:34"><literal type="string" pos:start="231:16" pos:end="231:34">"%s: load kernel\n"</literal></expr></argument>, <argument pos:start="231:37" pos:end="231:44"><expr pos:start="231:37" pos:end="231:44"><name pos:start="231:37" pos:end="231:44">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="233:1" pos:end="233:6">#<cpp:directive pos:start="233:2" pos:end="233:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="235:9" pos:end="235:35"><expr pos:start="235:9" pos:end="235:34"><call pos:start="235:9" pos:end="235:34"><name pos:start="235:9" pos:end="235:14">memset</name><argument_list pos:start="235:15" pos:end="235:34">(<argument pos:start="235:16" pos:end="235:18"><expr pos:start="235:16" pos:end="235:18"><operator pos:start="235:16" pos:end="235:16">&amp;</operator><name pos:start="235:17" pos:end="235:18">bd</name></expr></argument>, <argument pos:start="235:21" pos:end="235:21"><expr pos:start="235:21" pos:end="235:21"><literal type="number" pos:start="235:21" pos:end="235:21">0</literal></expr></argument>, <argument pos:start="235:24" pos:end="235:33"><expr pos:start="235:24" pos:end="235:33"><sizeof pos:start="235:24" pos:end="235:33">sizeof<argument_list pos:start="235:30" pos:end="235:33">(<argument pos:start="235:31" pos:end="235:32"><expr pos:start="235:31" pos:end="235:32"><name pos:start="235:31" pos:end="235:32">bd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:36"><expr pos:start="237:9" pos:end="237:35"><name pos:start="237:9" pos:end="237:22"><name pos:start="237:9" pos:end="237:10">bd</name><operator pos:start="237:11" pos:end="237:11">.</operator><name pos:start="237:12" pos:end="237:22">bi_memstart</name></name> <operator pos:start="237:24" pos:end="237:24">=</operator> <literal type="number" pos:start="237:26" pos:end="237:35">0x00000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:33"><expr pos:start="239:9" pos:end="239:32"><name pos:start="239:9" pos:end="239:21"><name pos:start="239:9" pos:end="239:10">bd</name><operator pos:start="239:11" pos:end="239:11">.</operator><name pos:start="239:12" pos:end="239:21">bi_memsize</name></name> <operator pos:start="239:23" pos:end="239:23">=</operator> <name pos:start="239:25" pos:end="239:32">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:38"><expr pos:start="241:9" pos:end="241:37"><name pos:start="241:9" pos:end="241:24"><name pos:start="241:9" pos:end="241:10">bd</name><operator pos:start="241:11" pos:end="241:11">.</operator><name pos:start="241:12" pos:end="241:24">bi_flashstart</name></name> <operator pos:start="241:26" pos:end="241:26">=</operator> <operator pos:start="241:28" pos:end="241:28">-</operator><name pos:start="241:29" pos:end="241:37">bios_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:37"><expr pos:start="243:9" pos:end="243:36"><name pos:start="243:9" pos:end="243:23"><name pos:start="243:9" pos:end="243:10">bd</name><operator pos:start="243:11" pos:end="243:11">.</operator><name pos:start="243:12" pos:end="243:23">bi_flashsize</name></name> <operator pos:start="243:25" pos:end="243:25">=</operator> <operator pos:start="243:27" pos:end="243:27">-</operator><name pos:start="243:28" pos:end="243:36">bios_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:30"><expr pos:start="245:9" pos:end="245:29"><name pos:start="245:9" pos:end="245:25"><name pos:start="245:9" pos:end="245:10">bd</name><operator pos:start="245:11" pos:end="245:11">.</operator><name pos:start="245:12" pos:end="245:25">bi_flashoffset</name></name> <operator pos:start="245:27" pos:end="245:27">=</operator> <literal type="number" pos:start="245:29" pos:end="245:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:37"><expr pos:start="247:9" pos:end="247:36"><name pos:start="247:9" pos:end="247:23"><name pos:start="247:9" pos:end="247:10">bd</name><operator pos:start="247:11" pos:end="247:11">.</operator><name pos:start="247:12" pos:end="247:23">bi_sramstart</name></name> <operator pos:start="247:25" pos:end="247:25">=</operator> <literal type="number" pos:start="247:27" pos:end="247:36">0xFFF00000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:35"><expr pos:start="249:9" pos:end="249:34"><name pos:start="249:9" pos:end="249:22"><name pos:start="249:9" pos:end="249:10">bd</name><operator pos:start="249:11" pos:end="249:11">.</operator><name pos:start="249:12" pos:end="249:22">bi_sramsize</name></name> <operator pos:start="249:24" pos:end="249:24">=</operator> <name pos:start="249:26" pos:end="249:34">sram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:28"><expr pos:start="251:9" pos:end="251:27"><name pos:start="251:9" pos:end="251:23"><name pos:start="251:9" pos:end="251:10">bd</name><operator pos:start="251:11" pos:end="251:11">.</operator><name pos:start="251:12" pos:end="251:23">bi_bootflags</name></name> <operator pos:start="251:25" pos:end="251:25">=</operator> <literal type="number" pos:start="251:27" pos:end="251:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:34"><expr pos:start="253:9" pos:end="253:33"><name pos:start="253:9" pos:end="253:21"><name pos:start="253:9" pos:end="253:10">bd</name><operator pos:start="253:11" pos:end="253:11">.</operator><name pos:start="253:12" pos:end="253:21">bi_intfreq</name></name> <operator pos:start="253:23" pos:end="253:23">=</operator> <literal type="number" pos:start="253:25" pos:end="253:33">133333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:33"><expr pos:start="255:9" pos:end="255:32"><name pos:start="255:9" pos:end="255:21"><name pos:start="255:9" pos:end="255:10">bd</name><operator pos:start="255:11" pos:end="255:11">.</operator><name pos:start="255:12" pos:end="255:21">bi_busfreq</name></name> <operator pos:start="255:23" pos:end="255:23">=</operator> <literal type="number" pos:start="255:25" pos:end="255:32">33333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:32"><expr pos:start="257:9" pos:end="257:31"><name pos:start="257:9" pos:end="257:22"><name pos:start="257:9" pos:end="257:10">bd</name><operator pos:start="257:11" pos:end="257:11">.</operator><name pos:start="257:12" pos:end="257:22">bi_baudrate</name></name> <operator pos:start="257:24" pos:end="257:24">=</operator> <literal type="number" pos:start="257:26" pos:end="257:31">115200</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:33"><expr pos:start="259:9" pos:end="259:32"><name pos:start="259:9" pos:end="259:26"><name pos:start="259:9" pos:end="259:10">bd</name><operator pos:start="259:11" pos:end="259:11">.</operator><name pos:start="259:12" pos:end="259:23">bi_s_version</name><index pos:start="259:24" pos:end="259:26">[<expr pos:start="259:25" pos:end="259:25"><literal type="number" pos:start="259:25" pos:end="259:25">0</literal></expr>]</index></name> <operator pos:start="259:28" pos:end="259:28">=</operator> <literal type="char" pos:start="259:30" pos:end="259:32">'Q'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:33"><expr pos:start="261:9" pos:end="261:32"><name pos:start="261:9" pos:end="261:26"><name pos:start="261:9" pos:end="261:10">bd</name><operator pos:start="261:11" pos:end="261:11">.</operator><name pos:start="261:12" pos:end="261:23">bi_s_version</name><index pos:start="261:24" pos:end="261:26">[<expr pos:start="261:25" pos:end="261:25"><literal type="number" pos:start="261:25" pos:end="261:25">1</literal></expr>]</index></name> <operator pos:start="261:28" pos:end="261:28">=</operator> <literal type="char" pos:start="261:30" pos:end="261:32">'M'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:33"><expr pos:start="263:9" pos:end="263:32"><name pos:start="263:9" pos:end="263:26"><name pos:start="263:9" pos:end="263:10">bd</name><operator pos:start="263:11" pos:end="263:11">.</operator><name pos:start="263:12" pos:end="263:23">bi_s_version</name><index pos:start="263:24" pos:end="263:26">[<expr pos:start="263:25" pos:end="263:25"><literal type="number" pos:start="263:25" pos:end="263:25">2</literal></expr>]</index></name> <operator pos:start="263:28" pos:end="263:28">=</operator> <literal type="char" pos:start="263:30" pos:end="263:32">'U'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:34"><expr pos:start="265:9" pos:end="265:33"><name pos:start="265:9" pos:end="265:26"><name pos:start="265:9" pos:end="265:10">bd</name><operator pos:start="265:11" pos:end="265:11">.</operator><name pos:start="265:12" pos:end="265:23">bi_s_version</name><index pos:start="265:24" pos:end="265:26">[<expr pos:start="265:25" pos:end="265:25"><literal type="number" pos:start="265:25" pos:end="265:25">3</literal></expr>]</index></name> <operator pos:start="265:28" pos:end="265:28">=</operator> <literal type="char" pos:start="265:30" pos:end="265:33">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:33"><expr pos:start="267:9" pos:end="267:32"><name pos:start="267:9" pos:end="267:26"><name pos:start="267:9" pos:end="267:10">bd</name><operator pos:start="267:11" pos:end="267:11">.</operator><name pos:start="267:12" pos:end="267:23">bi_r_version</name><index pos:start="267:24" pos:end="267:26">[<expr pos:start="267:25" pos:end="267:25"><literal type="number" pos:start="267:25" pos:end="267:25">0</literal></expr>]</index></name> <operator pos:start="267:28" pos:end="267:28">=</operator> <literal type="char" pos:start="267:30" pos:end="267:32">'Q'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:33"><expr pos:start="269:9" pos:end="269:32"><name pos:start="269:9" pos:end="269:26"><name pos:start="269:9" pos:end="269:10">bd</name><operator pos:start="269:11" pos:end="269:11">.</operator><name pos:start="269:12" pos:end="269:23">bi_r_version</name><index pos:start="269:24" pos:end="269:26">[<expr pos:start="269:25" pos:end="269:25"><literal type="number" pos:start="269:25" pos:end="269:25">1</literal></expr>]</index></name> <operator pos:start="269:28" pos:end="269:28">=</operator> <literal type="char" pos:start="269:30" pos:end="269:32">'E'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:33"><expr pos:start="271:9" pos:end="271:32"><name pos:start="271:9" pos:end="271:26"><name pos:start="271:9" pos:end="271:10">bd</name><operator pos:start="271:11" pos:end="271:11">.</operator><name pos:start="271:12" pos:end="271:23">bi_r_version</name><index pos:start="271:24" pos:end="271:26">[<expr pos:start="271:25" pos:end="271:25"><literal type="number" pos:start="271:25" pos:end="271:25">2</literal></expr>]</index></name> <operator pos:start="271:28" pos:end="271:28">=</operator> <literal type="char" pos:start="271:30" pos:end="271:32">'M'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:33"><expr pos:start="273:9" pos:end="273:32"><name pos:start="273:9" pos:end="273:26"><name pos:start="273:9" pos:end="273:10">bd</name><operator pos:start="273:11" pos:end="273:11">.</operator><name pos:start="273:12" pos:end="273:23">bi_r_version</name><index pos:start="273:24" pos:end="273:26">[<expr pos:start="273:25" pos:end="273:25"><literal type="number" pos:start="273:25" pos:end="273:25">3</literal></expr>]</index></name> <operator pos:start="273:28" pos:end="273:28">=</operator> <literal type="char" pos:start="273:30" pos:end="273:32">'U'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:34"><expr pos:start="275:9" pos:end="275:33"><name pos:start="275:9" pos:end="275:26"><name pos:start="275:9" pos:end="275:10">bd</name><operator pos:start="275:11" pos:end="275:11">.</operator><name pos:start="275:12" pos:end="275:23">bi_r_version</name><index pos:start="275:24" pos:end="275:26">[<expr pos:start="275:25" pos:end="275:25"><literal type="number" pos:start="275:25" pos:end="275:25">4</literal></expr>]</index></name> <operator pos:start="275:28" pos:end="275:28">=</operator> <literal type="char" pos:start="275:30" pos:end="275:33">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:35"><expr pos:start="277:9" pos:end="277:34"><name pos:start="277:9" pos:end="277:22"><name pos:start="277:9" pos:end="277:10">bd</name><operator pos:start="277:11" pos:end="277:11">.</operator><name pos:start="277:12" pos:end="277:22">bi_procfreq</name></name> <operator pos:start="277:24" pos:end="277:24">=</operator> <literal type="number" pos:start="277:26" pos:end="277:34">133333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:37"><expr pos:start="279:9" pos:end="279:36"><name pos:start="279:9" pos:end="279:25"><name pos:start="279:9" pos:end="279:10">bd</name><operator pos:start="279:11" pos:end="279:11">.</operator><name pos:start="279:12" pos:end="279:25">bi_plb_busfreq</name></name> <operator pos:start="279:27" pos:end="279:27">=</operator> <literal type="number" pos:start="279:29" pos:end="279:36">33333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:37"><expr pos:start="281:9" pos:end="281:36"><name pos:start="281:9" pos:end="281:25"><name pos:start="281:9" pos:end="281:10">bd</name><operator pos:start="281:11" pos:end="281:11">.</operator><name pos:start="281:12" pos:end="281:25">bi_pci_busfreq</name></name> <operator pos:start="281:27" pos:end="281:27">=</operator> <literal type="number" pos:start="281:29" pos:end="281:36">33333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:33"><expr pos:start="283:9" pos:end="283:32"><name pos:start="283:9" pos:end="283:21"><name pos:start="283:9" pos:end="283:10">bd</name><operator pos:start="283:11" pos:end="283:11">.</operator><name pos:start="283:12" pos:end="283:21">bi_opbfreq</name></name> <operator pos:start="283:23" pos:end="283:23">=</operator> <literal type="number" pos:start="283:25" pos:end="283:32">33333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:58"><expr pos:start="285:9" pos:end="285:57"><name pos:start="285:9" pos:end="285:13">bdloc</name> <operator pos:start="285:15" pos:end="285:15">=</operator> <call pos:start="285:17" pos:end="285:57"><name pos:start="285:17" pos:end="285:35">ppc405_set_bootinfo</name><argument_list pos:start="285:36" pos:end="285:57">(<argument pos:start="285:37" pos:end="285:39"><expr pos:start="285:37" pos:end="285:39"><name pos:start="285:37" pos:end="285:39">env</name></expr></argument>, <argument pos:start="285:42" pos:end="285:44"><expr pos:start="285:42" pos:end="285:44"><operator pos:start="285:42" pos:end="285:42">&amp;</operator><name pos:start="285:43" pos:end="285:44">bd</name></expr></argument>, <argument pos:start="285:47" pos:end="285:56"><expr pos:start="285:47" pos:end="285:56"><literal type="number" pos:start="285:47" pos:end="285:56">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:28"><expr pos:start="287:9" pos:end="287:27"><name pos:start="287:9" pos:end="287:19"><name pos:start="287:9" pos:end="287:11">env</name><operator pos:start="287:12" pos:end="287:13">-&gt;</operator><name pos:start="287:14" pos:end="287:16">gpr</name><index pos:start="287:17" pos:end="287:19">[<expr pos:start="287:18" pos:end="287:18"><literal type="number" pos:start="287:18" pos:end="287:18">3</literal></expr>]</index></name> <operator pos:start="287:21" pos:end="287:21">=</operator> <name pos:start="287:23" pos:end="287:27">bdloc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:39"><expr pos:start="289:9" pos:end="289:38"><name pos:start="289:9" pos:end="289:19">kernel_base</name> <operator pos:start="289:21" pos:end="289:21">=</operator> <name pos:start="289:23" pos:end="289:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="291:9" pos:end="291:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="293:9" pos:end="295:66"><expr pos:start="293:9" pos:end="295:65"><name pos:start="293:9" pos:end="293:19">kernel_size</name> <operator pos:start="293:21" pos:end="293:21">=</operator> <call pos:start="293:23" pos:end="295:65"><name pos:start="293:23" pos:end="293:41">load_image_targphys</name><argument_list pos:start="293:42" pos:end="295:65">(<argument pos:start="293:43" pos:end="293:57"><expr pos:start="293:43" pos:end="293:57"><name pos:start="293:43" pos:end="293:57">kernel_filename</name></expr></argument>, <argument pos:start="293:60" pos:end="293:70"><expr pos:start="293:60" pos:end="293:70"><name pos:start="293:60" pos:end="293:70">kernel_base</name></expr></argument>,

                                          <argument pos:start="295:43" pos:end="295:64"><expr pos:start="295:43" pos:end="295:64"><name pos:start="295:43" pos:end="295:50">ram_size</name> <operator pos:start="295:52" pos:end="295:52">-</operator> <name pos:start="295:54" pos:end="295:64">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="297:9" pos:end="305:9"><if pos:start="297:9" pos:end="305:9">if <condition pos:start="297:12" pos:end="297:28">(<expr pos:start="297:13" pos:end="297:27"><name pos:start="297:13" pos:end="297:23">kernel_size</name> <operator pos:start="297:25" pos:end="297:25">&lt;</operator> <literal type="number" pos:start="297:27" pos:end="297:27">0</literal></expr>)</condition> <block pos:start="297:30" pos:end="305:9">{<block_content pos:start="299:13" pos:end="303:20">

            <expr_stmt pos:start="299:13" pos:end="301:37"><expr pos:start="299:13" pos:end="301:36"><call pos:start="299:13" pos:end="301:36"><name pos:start="299:13" pos:end="299:19">fprintf</name><argument_list pos:start="299:20" pos:end="301:36">(<argument pos:start="299:21" pos:end="299:26"><expr pos:start="299:21" pos:end="299:26"><name pos:start="299:21" pos:end="299:26">stderr</name></expr></argument>, <argument pos:start="299:29" pos:end="299:64"><expr pos:start="299:29" pos:end="299:64"><literal type="string" pos:start="299:29" pos:end="299:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="301:21" pos:end="301:35"><expr pos:start="301:21" pos:end="301:35"><name pos:start="301:21" pos:end="301:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:20"><expr pos:start="303:13" pos:end="303:19"><call pos:start="303:13" pos:end="303:19"><name pos:start="303:13" pos:end="303:16">exit</name><argument_list pos:start="303:17" pos:end="303:19">(<argument pos:start="303:18" pos:end="303:18"><expr pos:start="303:18" pos:end="303:18"><literal type="number" pos:start="303:18" pos:end="303:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="307:9" pos:end="309:41"><expr pos:start="307:9" pos:end="309:40"><call pos:start="307:9" pos:end="309:40"><name pos:start="307:9" pos:end="307:14">printf</name><argument_list pos:start="307:15" pos:end="309:40">(<argument pos:start="307:16" pos:end="307:55"><expr pos:start="307:16" pos:end="307:55"><literal type="string" pos:start="307:16" pos:end="307:41">"Load kernel size %ld at "</literal> <name pos:start="307:43" pos:end="307:55">TARGET_FMT_lx</name></expr></argument>,

               <argument pos:start="309:16" pos:end="309:26"><expr pos:start="309:16" pos:end="309:26"><name pos:start="309:16" pos:end="309:26">kernel_size</name></expr></argument>, <argument pos:start="309:29" pos:end="309:39"><expr pos:start="309:29" pos:end="309:39"><name pos:start="309:29" pos:end="309:39">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="311:9" pos:end="311:25">/* load initrd */</comment>

        <if_stmt pos:start="313:9" pos:end="337:9"><if pos:start="313:9" pos:end="331:9">if <condition pos:start="313:12" pos:end="313:28">(<expr pos:start="313:13" pos:end="313:27"><name pos:start="313:13" pos:end="313:27">initrd_filename</name></expr>)</condition> <block pos:start="313:30" pos:end="331:9">{<block_content pos:start="315:13" pos:end="329:13">

            <expr_stmt pos:start="315:13" pos:end="315:43"><expr pos:start="315:13" pos:end="315:42"><name pos:start="315:13" pos:end="315:23">initrd_base</name> <operator pos:start="315:25" pos:end="315:25">=</operator> <name pos:start="315:27" pos:end="315:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="319:70"><expr pos:start="317:13" pos:end="319:69"><name pos:start="317:13" pos:end="317:23">initrd_size</name> <operator pos:start="317:25" pos:end="317:25">=</operator> <call pos:start="317:27" pos:end="319:69"><name pos:start="317:27" pos:end="317:45">load_image_targphys</name><argument_list pos:start="317:46" pos:end="319:69">(<argument pos:start="317:47" pos:end="317:61"><expr pos:start="317:47" pos:end="317:61"><name pos:start="317:47" pos:end="317:61">initrd_filename</name></expr></argument>, <argument pos:start="317:64" pos:end="317:74"><expr pos:start="317:64" pos:end="317:74"><name pos:start="317:64" pos:end="317:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="319:47" pos:end="319:68"><expr pos:start="319:47" pos:end="319:68"><name pos:start="319:47" pos:end="319:54">ram_size</name> <operator pos:start="319:56" pos:end="319:56">-</operator> <name pos:start="319:58" pos:end="319:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="321:13" pos:end="329:13"><if pos:start="321:13" pos:end="329:13">if <condition pos:start="321:16" pos:end="321:32">(<expr pos:start="321:17" pos:end="321:31"><name pos:start="321:17" pos:end="321:27">initrd_size</name> <operator pos:start="321:29" pos:end="321:29">&lt;</operator> <literal type="number" pos:start="321:31" pos:end="321:31">0</literal></expr>)</condition> <block pos:start="321:34" pos:end="329:13">{<block_content pos:start="323:17" pos:end="327:24">

                <expr_stmt pos:start="323:17" pos:end="325:41"><expr pos:start="323:17" pos:end="325:40"><call pos:start="323:17" pos:end="325:40"><name pos:start="323:17" pos:end="323:23">fprintf</name><argument_list pos:start="323:24" pos:end="325:40">(<argument pos:start="323:25" pos:end="323:30"><expr pos:start="323:25" pos:end="323:30"><name pos:start="323:25" pos:end="323:30">stderr</name></expr></argument>, <argument pos:start="323:33" pos:end="323:78"><expr pos:start="323:33" pos:end="323:78"><literal type="string" pos:start="323:33" pos:end="323:78">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="325:25" pos:end="325:39"><expr pos:start="325:25" pos:end="325:39"><name pos:start="325:25" pos:end="325:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:24"><expr pos:start="327:17" pos:end="327:23"><call pos:start="327:17" pos:end="327:23"><name pos:start="327:17" pos:end="327:20">exit</name><argument_list pos:start="327:21" pos:end="327:23">(<argument pos:start="327:22" pos:end="327:22"><expr pos:start="327:22" pos:end="327:22"><literal type="number" pos:start="327:22" pos:end="327:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="331:11" pos:end="337:9">else <block pos:start="331:16" pos:end="337:9">{<block_content pos:start="333:13" pos:end="335:28">

            <expr_stmt pos:start="333:13" pos:end="333:28"><expr pos:start="333:13" pos:end="333:27"><name pos:start="333:13" pos:end="333:23">initrd_base</name> <operator pos:start="333:25" pos:end="333:25">=</operator> <literal type="number" pos:start="333:27" pos:end="333:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:28"><expr pos:start="335:13" pos:end="335:27"><name pos:start="335:13" pos:end="335:23">initrd_size</name> <operator pos:start="335:25" pos:end="335:25">=</operator> <literal type="number" pos:start="335:27" pos:end="335:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:34"><expr pos:start="339:9" pos:end="339:33"><name pos:start="339:9" pos:end="339:19"><name pos:start="339:9" pos:end="339:11">env</name><operator pos:start="339:12" pos:end="339:13">-&gt;</operator><name pos:start="339:14" pos:end="339:16">gpr</name><index pos:start="339:17" pos:end="339:19">[<expr pos:start="339:18" pos:end="339:18"><literal type="number" pos:start="339:18" pos:end="339:18">4</literal></expr>]</index></name> <operator pos:start="339:21" pos:end="339:21">=</operator> <name pos:start="339:23" pos:end="339:33">initrd_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:34"><expr pos:start="341:9" pos:end="341:33"><name pos:start="341:9" pos:end="341:19"><name pos:start="341:9" pos:end="341:11">env</name><operator pos:start="341:12" pos:end="341:13">-&gt;</operator><name pos:start="341:14" pos:end="341:16">gpr</name><index pos:start="341:17" pos:end="341:19">[<expr pos:start="341:18" pos:end="341:18"><literal type="number" pos:start="341:18" pos:end="341:18">5</literal></expr>]</index></name> <operator pos:start="341:21" pos:end="341:21">=</operator> <name pos:start="341:23" pos:end="341:33">initrd_size</name></expr>;</expr_stmt>

        <if_stmt pos:start="343:9" pos:end="361:9"><if pos:start="343:9" pos:end="355:9">if <condition pos:start="343:12" pos:end="343:35">(<expr pos:start="343:13" pos:end="343:34"><name pos:start="343:13" pos:end="343:26">kernel_cmdline</name> <operator pos:start="343:28" pos:end="343:29">!=</operator> <name pos:start="343:31" pos:end="343:34">NULL</name></expr>)</condition> <block pos:start="343:37" pos:end="355:9">{<block_content pos:start="345:13" pos:end="353:38">

            <expr_stmt pos:start="345:13" pos:end="345:41"><expr pos:start="345:13" pos:end="345:40"><name pos:start="345:13" pos:end="345:15">len</name> <operator pos:start="345:17" pos:end="345:17">=</operator> <call pos:start="345:19" pos:end="345:40"><name pos:start="345:19" pos:end="345:24">strlen</name><argument_list pos:start="345:25" pos:end="345:40">(<argument pos:start="345:26" pos:end="345:39"><expr pos:start="345:26" pos:end="345:39"><name pos:start="345:26" pos:end="345:39">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="347:13" pos:end="347:42"><expr pos:start="347:13" pos:end="347:41"><name pos:start="347:13" pos:end="347:17">bdloc</name> <operator pos:start="347:19" pos:end="347:20">-=</operator> <operator pos:start="347:22" pos:end="347:22">(</operator><operator pos:start="347:23" pos:end="347:23">(</operator><name pos:start="347:24" pos:end="347:26">len</name> <operator pos:start="347:28" pos:end="347:28">+</operator> <literal type="number" pos:start="347:30" pos:end="347:32">255</literal><operator pos:start="347:33" pos:end="347:33">)</operator> <operator pos:start="347:35" pos:end="347:35">&amp;</operator> <operator pos:start="347:37" pos:end="347:37">~</operator><literal type="number" pos:start="347:38" pos:end="347:40">255</literal><operator pos:start="347:41" pos:end="347:41">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="349:13" pos:end="349:70"><expr pos:start="349:13" pos:end="349:69"><call pos:start="349:13" pos:end="349:69"><name pos:start="349:13" pos:end="349:37">cpu_physical_memory_write</name><argument_list pos:start="349:38" pos:end="349:69">(<argument pos:start="349:39" pos:end="349:43"><expr pos:start="349:39" pos:end="349:43"><name pos:start="349:39" pos:end="349:43">bdloc</name></expr></argument>, <argument pos:start="349:46" pos:end="349:59"><expr pos:start="349:46" pos:end="349:59"><name pos:start="349:46" pos:end="349:59">kernel_cmdline</name></expr></argument>, <argument pos:start="349:62" pos:end="349:68"><expr pos:start="349:62" pos:end="349:68"><name pos:start="349:62" pos:end="349:64">len</name> <operator pos:start="349:66" pos:end="349:66">+</operator> <literal type="number" pos:start="349:68" pos:end="349:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:32"><expr pos:start="351:13" pos:end="351:31"><name pos:start="351:13" pos:end="351:23"><name pos:start="351:13" pos:end="351:15">env</name><operator pos:start="351:16" pos:end="351:17">-&gt;</operator><name pos:start="351:18" pos:end="351:20">gpr</name><index pos:start="351:21" pos:end="351:23">[<expr pos:start="351:22" pos:end="351:22"><literal type="number" pos:start="351:22" pos:end="351:22">6</literal></expr>]</index></name> <operator pos:start="351:25" pos:end="351:25">=</operator> <name pos:start="351:27" pos:end="351:31">bdloc</name></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:38"><expr pos:start="353:13" pos:end="353:37"><name pos:start="353:13" pos:end="353:23"><name pos:start="353:13" pos:end="353:15">env</name><operator pos:start="353:16" pos:end="353:17">-&gt;</operator><name pos:start="353:18" pos:end="353:20">gpr</name><index pos:start="353:21" pos:end="353:23">[<expr pos:start="353:22" pos:end="353:22"><literal type="number" pos:start="353:22" pos:end="353:22">7</literal></expr>]</index></name> <operator pos:start="353:25" pos:end="353:25">=</operator> <name pos:start="353:27" pos:end="353:31">bdloc</name> <operator pos:start="353:33" pos:end="353:33">+</operator> <name pos:start="353:35" pos:end="353:37">len</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="355:11" pos:end="361:9">else <block pos:start="355:16" pos:end="361:9">{<block_content pos:start="357:13" pos:end="359:28">

            <expr_stmt pos:start="357:13" pos:end="357:28"><expr pos:start="357:13" pos:end="357:27"><name pos:start="357:13" pos:end="357:23"><name pos:start="357:13" pos:end="357:15">env</name><operator pos:start="357:16" pos:end="357:17">-&gt;</operator><name pos:start="357:18" pos:end="357:20">gpr</name><index pos:start="357:21" pos:end="357:23">[<expr pos:start="357:22" pos:end="357:22"><literal type="number" pos:start="357:22" pos:end="357:22">6</literal></expr>]</index></name> <operator pos:start="357:25" pos:end="357:25">=</operator> <literal type="number" pos:start="357:27" pos:end="357:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:28"><expr pos:start="359:13" pos:end="359:27"><name pos:start="359:13" pos:end="359:23"><name pos:start="359:13" pos:end="359:15">env</name><operator pos:start="359:16" pos:end="359:17">-&gt;</operator><name pos:start="359:18" pos:end="359:20">gpr</name><index pos:start="359:21" pos:end="359:23">[<expr pos:start="359:22" pos:end="359:22"><literal type="number" pos:start="359:22" pos:end="359:22">7</literal></expr>]</index></name> <operator pos:start="359:25" pos:end="359:25">=</operator> <literal type="number" pos:start="359:27" pos:end="359:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:36"><expr pos:start="363:9" pos:end="363:35"><name pos:start="363:9" pos:end="363:16"><name pos:start="363:9" pos:end="363:11">env</name><operator pos:start="363:12" pos:end="363:13">-&gt;</operator><name pos:start="363:14" pos:end="363:16">nip</name></name> <operator pos:start="363:18" pos:end="363:18">=</operator> <name pos:start="363:20" pos:end="363:35">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="365:7" pos:end="380:0">else <block pos:start="365:12" pos:end="380:0">{<block_content pos:start="367:9" pos:end="375:18">

        <expr_stmt pos:start="367:9" pos:end="367:24"><expr pos:start="367:9" pos:end="367:23"><name pos:start="367:9" pos:end="367:19">kernel_base</name> <operator pos:start="367:21" pos:end="367:21">=</operator> <literal type="number" pos:start="367:23" pos:end="367:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:24"><expr pos:start="369:9" pos:end="369:23"><name pos:start="369:9" pos:end="369:19">kernel_size</name> <operator pos:start="369:21" pos:end="369:21">=</operator> <literal type="number" pos:start="369:23" pos:end="369:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:24"><expr pos:start="371:9" pos:end="371:23"><name pos:start="371:9" pos:end="371:19">initrd_base</name> <operator pos:start="371:21" pos:end="371:21">=</operator> <literal type="number" pos:start="371:23" pos:end="371:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:24"><expr pos:start="373:9" pos:end="373:23"><name pos:start="373:9" pos:end="373:19">initrd_size</name> <operator pos:start="373:21" pos:end="373:21">=</operator> <literal type="number" pos:start="373:23" pos:end="373:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:18"><expr pos:start="375:9" pos:end="375:17"><name pos:start="375:9" pos:end="375:13">bdloc</name> <operator pos:start="375:15" pos:end="375:15">=</operator> <literal type="number" pos:start="375:17" pos:end="375:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="379:1" pos:end="379:23">#<cpp:directive pos:start="379:2" pos:end="379:6">ifdef</cpp:directive> <name pos:start="379:8" pos:end="379:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="381:5" pos:end="381:46"><expr pos:start="381:5" pos:end="381:45"><call pos:start="381:5" pos:end="381:45"><name pos:start="381:5" pos:end="381:10">printf</name><argument_list pos:start="381:11" pos:end="381:45">(<argument pos:start="381:12" pos:end="381:37"><expr pos:start="381:12" pos:end="381:37"><literal type="string" pos:start="381:12" pos:end="381:19">"bdloc "</literal> <name pos:start="381:21" pos:end="381:32">RAM_ADDR_FMT</name> <literal type="string" pos:start="381:34" pos:end="381:37">"\n"</literal></expr></argument>, <argument pos:start="381:40" pos:end="381:44"><expr pos:start="381:40" pos:end="381:44"><name pos:start="381:40" pos:end="381:44">bdloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="386:0"><expr pos:start="383:5" pos:end="383:34"><call pos:start="383:5" pos:end="383:34"><name pos:start="383:5" pos:end="383:10">printf</name><argument_list pos:start="383:11" pos:end="383:34">(<argument pos:start="383:12" pos:end="383:23"><expr pos:start="383:12" pos:end="383:23"><literal type="string" pos:start="383:12" pos:end="383:23">"%s: Done\n"</literal></expr></argument>, <argument pos:start="383:26" pos:end="383:33"><expr pos:start="383:26" pos:end="383:33"><name pos:start="383:26" pos:end="383:33">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="385:1" pos:end="385:6">#<cpp:directive pos:start="385:2" pos:end="385:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
