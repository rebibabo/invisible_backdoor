<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12539.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:46">test_dynamic_globalprop_subprocess</name><parameter_list pos:start="1:47" pos:end="1:52">(<parameter pos:start="1:48" pos:end="1:51"><decl pos:start="1:48" pos:end="1:51"><type pos:start="1:48" pos:end="1:51"><name pos:start="1:48" pos:end="1:51">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:32">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">MyType</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:14">mt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="25:6"><decl pos:start="7:5" pos:end="25:5"><type pos:start="7:5" pos:end="7:25"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:25">GlobalProperty</name></type> <name pos:start="7:27" pos:end="7:33"><name pos:start="7:27" pos:end="7:31">props</name><index pos:start="7:32" pos:end="7:33">[]</index></name> <init pos:start="7:35" pos:end="25:5">= <expr pos:start="7:37" pos:end="25:5"><block pos:start="7:37" pos:end="25:5">{

        <expr pos:start="9:9" pos:end="9:52"><block pos:start="9:9" pos:end="9:52">{ <expr pos:start="9:11" pos:end="9:28"><name pos:start="9:11" pos:end="9:28">TYPE_DYNAMIC_PROPS</name></expr>, <expr pos:start="9:31" pos:end="9:37"><literal type="string" pos:start="9:31" pos:end="9:37">"prop1"</literal></expr>, <expr pos:start="9:40" pos:end="9:44"><literal type="string" pos:start="9:40" pos:end="9:44">"101"</literal></expr>, <expr pos:start="9:47" pos:end="9:50"><name pos:start="9:47" pos:end="9:50">true</name></expr> }</block></expr>,

        <expr pos:start="11:9" pos:end="11:52"><block pos:start="11:9" pos:end="11:52">{ <expr pos:start="11:11" pos:end="11:28"><name pos:start="11:11" pos:end="11:28">TYPE_DYNAMIC_PROPS</name></expr>, <expr pos:start="11:31" pos:end="11:37"><literal type="string" pos:start="11:31" pos:end="11:37">"prop2"</literal></expr>, <expr pos:start="11:40" pos:end="11:44"><literal type="string" pos:start="11:40" pos:end="11:44">"102"</literal></expr>, <expr pos:start="11:47" pos:end="11:50"><name pos:start="11:47" pos:end="11:50">true</name></expr> }</block></expr>,

        <expr pos:start="13:9" pos:end="13:58"><block pos:start="13:9" pos:end="13:58">{ <expr pos:start="13:11" pos:end="13:34"><name pos:start="13:11" pos:end="13:28">TYPE_DYNAMIC_PROPS</name><literal type="string" pos:start="13:29" pos:end="13:34">"-bad"</literal></expr>, <expr pos:start="13:37" pos:end="13:43"><literal type="string" pos:start="13:37" pos:end="13:43">"prop3"</literal></expr>, <expr pos:start="13:46" pos:end="13:50"><literal type="string" pos:start="13:46" pos:end="13:50">"103"</literal></expr>, <expr pos:start="13:53" pos:end="13:56"><name pos:start="13:53" pos:end="13:56">true</name></expr> }</block></expr>,

        <comment type="block" pos:start="15:9" pos:end="15:73">/* .not_used=false to emulate what qdev_add_one_global() does: */</comment>

        <expr pos:start="17:9" pos:end="17:54"><block pos:start="17:9" pos:end="17:54">{ <expr pos:start="17:11" pos:end="17:29"><name pos:start="17:11" pos:end="17:29">TYPE_UNUSED_HOTPLUG</name></expr>, <expr pos:start="17:32" pos:end="17:38"><literal type="string" pos:start="17:32" pos:end="17:38">"prop4"</literal></expr>, <expr pos:start="17:41" pos:end="17:45"><literal type="string" pos:start="17:41" pos:end="17:45">"104"</literal></expr>, <expr pos:start="17:48" pos:end="17:52"><name pos:start="17:48" pos:end="17:52">false</name></expr> }</block></expr>,

        <expr pos:start="19:9" pos:end="19:55"><block pos:start="19:9" pos:end="19:55">{ <expr pos:start="19:11" pos:end="19:31"><name pos:start="19:11" pos:end="19:31">TYPE_UNUSED_NOHOTPLUG</name></expr>, <expr pos:start="19:34" pos:end="19:40"><literal type="string" pos:start="19:34" pos:end="19:40">"prop5"</literal></expr>, <expr pos:start="19:43" pos:end="19:47"><literal type="string" pos:start="19:43" pos:end="19:47">"105"</literal></expr>, <expr pos:start="19:50" pos:end="19:53"><name pos:start="19:50" pos:end="19:53">true</name></expr> }</block></expr>,

        <expr pos:start="21:9" pos:end="21:48"><block pos:start="21:9" pos:end="21:48">{ <expr pos:start="21:11" pos:end="21:24"><name pos:start="21:11" pos:end="21:24">TYPE_NONDEVICE</name></expr>, <expr pos:start="21:27" pos:end="21:33"><literal type="string" pos:start="21:27" pos:end="21:33">"prop6"</literal></expr>, <expr pos:start="21:36" pos:end="21:40"><literal type="string" pos:start="21:36" pos:end="21:40">"106"</literal></expr>, <expr pos:start="21:43" pos:end="21:46"><name pos:start="21:43" pos:end="21:46">true</name></expr> }</block></expr>,

        <expr pos:start="23:9" pos:end="23:10"><block pos:start="23:9" pos:end="23:10">{}</block></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:16"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:16">all_used</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:42"><expr pos:start="31:5" pos:end="31:41"><call pos:start="31:5" pos:end="31:41"><name pos:start="31:5" pos:end="31:34">qdev_prop_register_global_list</name><argument_list pos:start="31:35" pos:end="31:41">(<argument pos:start="31:36" pos:end="31:40"><expr pos:start="31:36" pos:end="31:40"><name pos:start="31:36" pos:end="31:40">props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:54"><expr pos:start="35:5" pos:end="35:53"><name pos:start="35:5" pos:end="35:6">mt</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <call pos:start="35:10" pos:end="35:53"><name pos:start="35:10" pos:end="35:21">DYNAMIC_TYPE</name><argument_list pos:start="35:22" pos:end="35:53">(<argument pos:start="35:23" pos:end="35:52"><expr pos:start="35:23" pos:end="35:52"><call pos:start="35:23" pos:end="35:52"><name pos:start="35:23" pos:end="35:32">object_new</name><argument_list pos:start="35:33" pos:end="35:52">(<argument pos:start="35:34" pos:end="35:51"><expr pos:start="35:34" pos:end="35:51"><name pos:start="35:34" pos:end="35:51">TYPE_DYNAMIC_PROPS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><call pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:20">qdev_init_nofail</name><argument_list pos:start="37:21" pos:end="37:32">(<argument pos:start="37:22" pos:end="37:31"><expr pos:start="37:22" pos:end="37:31"><call pos:start="37:22" pos:end="37:31"><name pos:start="37:22" pos:end="37:27">DEVICE</name><argument_list pos:start="37:28" pos:end="37:31">(<argument pos:start="37:29" pos:end="37:30"><expr pos:start="37:29" pos:end="37:30"><name pos:start="37:29" pos:end="37:30">mt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:41"><expr pos:start="41:5" pos:end="41:40"><call pos:start="41:5" pos:end="41:40"><name pos:start="41:5" pos:end="41:20">g_assert_cmpuint</name><argument_list pos:start="41:21" pos:end="41:40">(<argument pos:start="41:22" pos:end="41:30"><expr pos:start="41:22" pos:end="41:30"><name pos:start="41:22" pos:end="41:30"><name pos:start="41:22" pos:end="41:23">mt</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:30">prop1</name></name></expr></argument>, <argument pos:start="41:33" pos:end="41:34"><expr pos:start="41:33" pos:end="41:34"><operator pos:start="41:33" pos:end="41:34">==</operator></expr></argument>, <argument pos:start="41:37" pos:end="41:39"><expr pos:start="41:37" pos:end="41:39"><literal type="number" pos:start="41:37" pos:end="41:39">101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:41"><expr pos:start="43:5" pos:end="43:40"><call pos:start="43:5" pos:end="43:40"><name pos:start="43:5" pos:end="43:20">g_assert_cmpuint</name><argument_list pos:start="43:21" pos:end="43:40">(<argument pos:start="43:22" pos:end="43:30"><expr pos:start="43:22" pos:end="43:30"><name pos:start="43:22" pos:end="43:30"><name pos:start="43:22" pos:end="43:23">mt</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:30">prop2</name></name></expr></argument>, <argument pos:start="43:33" pos:end="43:34"><expr pos:start="43:33" pos:end="43:34"><operator pos:start="43:33" pos:end="43:34">==</operator></expr></argument>, <argument pos:start="43:37" pos:end="43:39"><expr pos:start="43:37" pos:end="43:39"><literal type="number" pos:start="43:37" pos:end="43:39">102</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:12">all_used</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:40"><name pos:start="45:16" pos:end="45:38">qdev_prop_check_globals</name><argument_list pos:start="45:39" pos:end="45:40">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:38"><expr pos:start="47:5" pos:end="47:37"><call pos:start="47:5" pos:end="47:37"><name pos:start="47:5" pos:end="47:20">g_assert_cmpuint</name><argument_list pos:start="47:21" pos:end="47:37">(<argument pos:start="47:22" pos:end="47:29"><expr pos:start="47:22" pos:end="47:29"><name pos:start="47:22" pos:end="47:29">all_used</name></expr></argument>, <argument pos:start="47:32" pos:end="47:33"><expr pos:start="47:32" pos:end="47:33"><operator pos:start="47:32" pos:end="47:33">==</operator></expr></argument>, <argument pos:start="47:36" pos:end="47:36"><expr pos:start="47:36" pos:end="47:36"><literal type="number" pos:start="47:36" pos:end="47:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:33"><expr pos:start="49:5" pos:end="49:32"><call pos:start="49:5" pos:end="49:32"><name pos:start="49:5" pos:end="49:12">g_assert</name><argument_list pos:start="49:13" pos:end="49:32">(<argument pos:start="49:14" pos:end="49:31"><expr pos:start="49:14" pos:end="49:31"><operator pos:start="49:14" pos:end="49:14">!</operator><name pos:start="49:15" pos:end="49:22"><name pos:start="49:15" pos:end="49:19">props</name><index pos:start="49:20" pos:end="49:22">[<expr pos:start="49:21" pos:end="49:21"><literal type="number" pos:start="49:21" pos:end="49:21">0</literal></expr>]</index></name><operator pos:start="49:23" pos:end="49:23">.</operator><name pos:start="49:24" pos:end="49:31">not_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:33"><expr pos:start="51:5" pos:end="51:32"><call pos:start="51:5" pos:end="51:32"><name pos:start="51:5" pos:end="51:12">g_assert</name><argument_list pos:start="51:13" pos:end="51:32">(<argument pos:start="51:14" pos:end="51:31"><expr pos:start="51:14" pos:end="51:31"><operator pos:start="51:14" pos:end="51:14">!</operator><name pos:start="51:15" pos:end="51:22"><name pos:start="51:15" pos:end="51:19">props</name><index pos:start="51:20" pos:end="51:22">[<expr pos:start="51:21" pos:end="51:21"><literal type="number" pos:start="51:21" pos:end="51:21">1</literal></expr>]</index></name><operator pos:start="51:23" pos:end="51:23">.</operator><name pos:start="51:24" pos:end="51:31">not_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:32"><expr pos:start="53:5" pos:end="53:31"><call pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:12">g_assert</name><argument_list pos:start="53:13" pos:end="53:31">(<argument pos:start="53:14" pos:end="53:30"><expr pos:start="53:14" pos:end="53:30"><name pos:start="53:14" pos:end="53:21"><name pos:start="53:14" pos:end="53:18">props</name><index pos:start="53:19" pos:end="53:21">[<expr pos:start="53:20" pos:end="53:20"><literal type="number" pos:start="53:20" pos:end="53:20">2</literal></expr>]</index></name><operator pos:start="53:22" pos:end="53:22">.</operator><name pos:start="53:23" pos:end="53:30">not_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><call pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:12">g_assert</name><argument_list pos:start="55:13" pos:end="55:32">(<argument pos:start="55:14" pos:end="55:31"><expr pos:start="55:14" pos:end="55:31"><operator pos:start="55:14" pos:end="55:14">!</operator><name pos:start="55:15" pos:end="55:22"><name pos:start="55:15" pos:end="55:19">props</name><index pos:start="55:20" pos:end="55:22">[<expr pos:start="55:21" pos:end="55:21"><literal type="number" pos:start="55:21" pos:end="55:21">3</literal></expr>]</index></name><operator pos:start="55:23" pos:end="55:23">.</operator><name pos:start="55:24" pos:end="55:31">not_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><call pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:12">g_assert</name><argument_list pos:start="57:13" pos:end="57:31">(<argument pos:start="57:14" pos:end="57:30"><expr pos:start="57:14" pos:end="57:30"><name pos:start="57:14" pos:end="57:21"><name pos:start="57:14" pos:end="57:18">props</name><index pos:start="57:19" pos:end="57:21">[<expr pos:start="57:20" pos:end="57:20"><literal type="number" pos:start="57:20" pos:end="57:20">4</literal></expr>]</index></name><operator pos:start="57:22" pos:end="57:22">.</operator><name pos:start="57:23" pos:end="57:30">not_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:32"><expr pos:start="59:5" pos:end="59:31"><call pos:start="59:5" pos:end="59:31"><name pos:start="59:5" pos:end="59:12">g_assert</name><argument_list pos:start="59:13" pos:end="59:31">(<argument pos:start="59:14" pos:end="59:30"><expr pos:start="59:14" pos:end="59:30"><name pos:start="59:14" pos:end="59:21"><name pos:start="59:14" pos:end="59:18">props</name><index pos:start="59:19" pos:end="59:21">[<expr pos:start="59:20" pos:end="59:20"><literal type="number" pos:start="59:20" pos:end="59:20">5</literal></expr>]</index></name><operator pos:start="59:22" pos:end="59:22">.</operator><name pos:start="59:23" pos:end="59:30">not_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
