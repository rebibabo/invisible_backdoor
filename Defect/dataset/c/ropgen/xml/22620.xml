<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22620.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:42">vorbis_parse_setup_hdr_residues</name><parameter_list pos:start="1:43" pos:end="1:62">(<parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:59"><name pos:start="1:44" pos:end="1:57">vorbis_context</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:61">vc</name></decl></parameter>)</parameter_list><block pos:start="1:63" pos:end="43:13">{<block_content pos:start="2:5" pos:end="43:13">
    <decl_stmt pos:start="2:5" pos:end="2:30"><decl pos:start="2:5" pos:end="2:29"><type pos:start="2:5" pos:end="2:19"><name pos:start="2:5" pos:end="2:17">GetBitContext</name> <modifier pos:start="2:19" pos:end="2:19">*</modifier></type><name pos:start="2:20" pos:end="2:21">gb</name><init pos:start="2:22" pos:end="2:29">=<expr pos:start="2:23" pos:end="2:29"><operator pos:start="2:23" pos:end="2:23">&amp;</operator><name pos:start="2:24" pos:end="2:29"><name pos:start="2:24" pos:end="2:25">vc</name><operator pos:start="2:26" pos:end="2:27">-&gt;</operator><name pos:start="2:28" pos:end="2:29">gb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3:5" pos:end="3:25"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:16">uint_fast8_t</name></type> <name pos:start="3:18" pos:end="3:18">i</name></decl>, <decl pos:start="3:21" pos:end="3:21"><type ref="prev" pos:start="3:5" pos:end="3:16"/><name pos:start="3:21" pos:end="3:21">j</name></decl>, <decl pos:start="3:24" pos:end="3:24"><type ref="prev" pos:start="3:5" pos:end="3:16"/><name pos:start="3:24" pos:end="3:24">k</name></decl>;</decl_stmt>
    <expr_stmt pos:start="4:5" pos:end="4:40"><expr pos:start="4:5" pos:end="4:39"><name pos:start="4:5" pos:end="4:21"><name pos:start="4:5" pos:end="4:6">vc</name><operator pos:start="4:7" pos:end="4:8">-&gt;</operator><name pos:start="4:9" pos:end="4:21">residue_count</name></name><operator pos:start="4:22" pos:end="4:22">=</operator><call pos:start="4:23" pos:end="4:37"><name pos:start="4:23" pos:end="4:30">get_bits</name><argument_list pos:start="4:31" pos:end="4:37">(<argument pos:start="4:32" pos:end="4:33"><expr pos:start="4:32" pos:end="4:33"><name pos:start="4:32" pos:end="4:33">gb</name></expr></argument>, <argument pos:start="4:36" pos:end="4:36"><expr pos:start="4:36" pos:end="4:36"><literal type="number" pos:start="4:36" pos:end="4:36">6</literal></expr></argument>)</argument_list></call><operator pos:start="4:38" pos:end="4:38">+</operator><literal type="number" pos:start="4:39" pos:end="4:39">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="5:5" pos:end="5:72"><expr pos:start="5:5" pos:end="5:71"><name pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:6">vc</name><operator pos:start="5:7" pos:end="5:8">-&gt;</operator><name pos:start="5:9" pos:end="5:16">residues</name></name><operator pos:start="5:17" pos:end="5:17">=</operator><call pos:start="5:18" pos:end="5:71"><name pos:start="5:18" pos:end="5:27">av_mallocz</name><argument_list pos:start="5:28" pos:end="5:71">(<argument pos:start="5:29" pos:end="5:70"><expr pos:start="5:29" pos:end="5:70"><name pos:start="5:29" pos:end="5:45"><name pos:start="5:29" pos:end="5:30">vc</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:45">residue_count</name></name> <operator pos:start="5:47" pos:end="5:47">*</operator> <sizeof pos:start="5:49" pos:end="5:70">sizeof<argument_list pos:start="5:55" pos:end="5:70">(<argument pos:start="5:56" pos:end="5:69"><expr pos:start="5:56" pos:end="5:69"><name pos:start="5:56" pos:end="5:69">vorbis_residue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:62"><expr pos:start="6:5" pos:end="6:61"><call pos:start="6:5" pos:end="6:61"><name pos:start="6:5" pos:end="6:12">AV_DEBUG</name><argument_list pos:start="6:13" pos:end="6:61">(<argument pos:start="6:14" pos:end="6:41"><expr pos:start="6:14" pos:end="6:41"><literal type="string" pos:start="6:14" pos:end="6:41">" There are %d residues. \n"</literal></expr></argument>, <argument pos:start="6:44" pos:end="6:60"><expr pos:start="6:44" pos:end="6:60"><name pos:start="6:44" pos:end="6:60"><name pos:start="6:44" pos:end="6:45">vc</name><operator pos:start="6:46" pos:end="6:47">-&gt;</operator><name pos:start="6:48" pos:end="6:60">residue_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="7:5" pos:end="43:13">for<control pos:start="7:8" pos:end="7:36">(<init pos:start="7:9" pos:end="7:12"><expr pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:9">i</name><operator pos:start="7:10" pos:end="7:10">=</operator><literal type="number" pos:start="7:11" pos:end="7:11">0</literal></expr>;</init><condition pos:start="7:13" pos:end="7:32"><expr pos:start="7:13" pos:end="7:31"><name pos:start="7:13" pos:end="7:13">i</name><operator pos:start="7:14" pos:end="7:14">&lt;</operator><name pos:start="7:15" pos:end="7:31"><name pos:start="7:15" pos:end="7:16">vc</name><operator pos:start="7:17" pos:end="7:18">-&gt;</operator><name pos:start="7:19" pos:end="7:31">residue_count</name></name></expr>;</condition><incr pos:start="7:33" pos:end="7:35"><expr pos:start="7:33" pos:end="7:35"><operator pos:start="7:33" pos:end="7:34">++</operator><name pos:start="7:35" pos:end="7:35">i</name></expr></incr>)</control> <block pos:start="7:38" pos:end="43:13">{<block_content pos:start="8:9" pos:end="43:13">
        <decl_stmt pos:start="8:9" pos:end="8:51"><decl pos:start="8:9" pos:end="8:50"><type pos:start="8:9" pos:end="8:24"><name pos:start="8:9" pos:end="8:22">vorbis_residue</name> <modifier pos:start="8:24" pos:end="8:24">*</modifier></type><name pos:start="8:25" pos:end="8:33">res_setup</name><init pos:start="8:34" pos:end="8:50">=<expr pos:start="8:35" pos:end="8:50"><operator pos:start="8:35" pos:end="8:35">&amp;</operator><name pos:start="8:36" pos:end="8:50"><name pos:start="8:36" pos:end="8:37">vc</name><operator pos:start="8:38" pos:end="8:39">-&gt;</operator><name pos:start="8:40" pos:end="8:47">residues</name><index pos:start="8:48" pos:end="8:50">[<expr pos:start="8:49" pos:end="8:49"><name pos:start="8:49" pos:end="8:49">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="9:9" pos:end="9:33"><decl pos:start="9:9" pos:end="9:32"><type pos:start="9:9" pos:end="9:20"><name pos:start="9:9" pos:end="9:20">uint_fast8_t</name></type> <name pos:start="9:22" pos:end="9:32"><name pos:start="9:22" pos:end="9:28">cascade</name><index pos:start="9:29" pos:end="9:32">[<expr pos:start="9:30" pos:end="9:31"><literal type="number" pos:start="9:30" pos:end="9:31">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="10:9" pos:end="10:31"><decl pos:start="10:9" pos:end="10:30"><type pos:start="10:9" pos:end="10:20"><name pos:start="10:9" pos:end="10:20">uint_fast8_t</name></type> <name pos:start="10:22" pos:end="10:30">high_bits</name></decl>;</decl_stmt>
        <decl_stmt pos:start="11:9" pos:end="11:30"><decl pos:start="11:9" pos:end="11:29"><type pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:20">uint_fast8_t</name></type> <name pos:start="11:22" pos:end="11:29">low_bits</name></decl>;</decl_stmt>
        <expr_stmt pos:start="12:9" pos:end="12:41"><expr pos:start="12:9" pos:end="12:40"><name pos:start="12:9" pos:end="12:23"><name pos:start="12:9" pos:end="12:17">res_setup</name><operator pos:start="12:18" pos:end="12:19">-&gt;</operator><name pos:start="12:20" pos:end="12:23">type</name></name><operator pos:start="12:24" pos:end="12:24">=</operator><call pos:start="12:25" pos:end="12:40"><name pos:start="12:25" pos:end="12:32">get_bits</name><argument_list pos:start="12:33" pos:end="12:40">(<argument pos:start="12:34" pos:end="12:35"><expr pos:start="12:34" pos:end="12:35"><name pos:start="12:34" pos:end="12:35">gb</name></expr></argument>, <argument pos:start="12:38" pos:end="12:39"><expr pos:start="12:38" pos:end="12:39"><literal type="number" pos:start="12:38" pos:end="12:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="13:9" pos:end="13:64"><expr pos:start="13:9" pos:end="13:63"><call pos:start="13:9" pos:end="13:63"><name pos:start="13:9" pos:end="13:16">AV_DEBUG</name><argument_list pos:start="13:17" pos:end="13:63">(<argument pos:start="13:18" pos:end="13:42"><expr pos:start="13:18" pos:end="13:42"><literal type="string" pos:start="13:18" pos:end="13:42">" %d. residue type %d \n"</literal></expr></argument>, <argument pos:start="13:45" pos:end="13:45"><expr pos:start="13:45" pos:end="13:45"><name pos:start="13:45" pos:end="13:45">i</name></expr></argument>, <argument pos:start="13:48" pos:end="13:62"><expr pos:start="13:48" pos:end="13:62"><name pos:start="13:48" pos:end="13:62"><name pos:start="13:48" pos:end="13:56">res_setup</name><operator pos:start="13:57" pos:end="13:58">-&gt;</operator><name pos:start="13:59" pos:end="13:62">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="14:9" pos:end="14:42"><expr pos:start="14:9" pos:end="14:41"><name pos:start="14:9" pos:end="14:24"><name pos:start="14:9" pos:end="14:17">res_setup</name><operator pos:start="14:18" pos:end="14:19">-&gt;</operator><name pos:start="14:20" pos:end="14:24">begin</name></name><operator pos:start="14:25" pos:end="14:25">=</operator><call pos:start="14:26" pos:end="14:41"><name pos:start="14:26" pos:end="14:33">get_bits</name><argument_list pos:start="14:34" pos:end="14:41">(<argument pos:start="14:35" pos:end="14:36"><expr pos:start="14:35" pos:end="14:36"><name pos:start="14:35" pos:end="14:36">gb</name></expr></argument>, <argument pos:start="14:39" pos:end="14:40"><expr pos:start="14:39" pos:end="14:40"><literal type="number" pos:start="14:39" pos:end="14:40">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="15:9" pos:end="15:40"><expr pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:17">res_setup</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:22">end</name></name><operator pos:start="15:23" pos:end="15:23">=</operator><call pos:start="15:24" pos:end="15:39"><name pos:start="15:24" pos:end="15:31">get_bits</name><argument_list pos:start="15:32" pos:end="15:39">(<argument pos:start="15:33" pos:end="15:34"><expr pos:start="15:33" pos:end="15:34"><name pos:start="15:33" pos:end="15:34">gb</name></expr></argument>, <argument pos:start="15:37" pos:end="15:38"><expr pos:start="15:37" pos:end="15:38"><literal type="number" pos:start="15:37" pos:end="15:38">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:53"><expr pos:start="16:9" pos:end="16:52"><name pos:start="16:9" pos:end="16:33"><name pos:start="16:9" pos:end="16:17">res_setup</name><operator pos:start="16:18" pos:end="16:19">-&gt;</operator><name pos:start="16:20" pos:end="16:33">partition_size</name></name><operator pos:start="16:34" pos:end="16:34">=</operator><call pos:start="16:35" pos:end="16:50"><name pos:start="16:35" pos:end="16:42">get_bits</name><argument_list pos:start="16:43" pos:end="16:50">(<argument pos:start="16:44" pos:end="16:45"><expr pos:start="16:44" pos:end="16:45"><name pos:start="16:44" pos:end="16:45">gb</name></expr></argument>, <argument pos:start="16:48" pos:end="16:49"><expr pos:start="16:48" pos:end="16:49"><literal type="number" pos:start="16:48" pos:end="16:49">24</literal></expr></argument>)</argument_list></call><operator pos:start="16:51" pos:end="16:51">+</operator><literal type="number" pos:start="16:52" pos:end="16:52">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:53"><expr pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:17">res_setup</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:34">classifications</name></name><operator pos:start="17:35" pos:end="17:35">=</operator><call pos:start="17:36" pos:end="17:50"><name pos:start="17:36" pos:end="17:43">get_bits</name><argument_list pos:start="17:44" pos:end="17:50">(<argument pos:start="17:45" pos:end="17:46"><expr pos:start="17:45" pos:end="17:46"><name pos:start="17:45" pos:end="17:46">gb</name></expr></argument>, <argument pos:start="17:49" pos:end="17:49"><expr pos:start="17:49" pos:end="17:49"><literal type="number" pos:start="17:49" pos:end="17:49">6</literal></expr></argument>)</argument_list></call><operator pos:start="17:51" pos:end="17:51">+</operator><literal type="number" pos:start="17:52" pos:end="17:52">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="18:9" pos:end="18:45"><expr pos:start="18:9" pos:end="18:44"><name pos:start="18:9" pos:end="18:28"><name pos:start="18:9" pos:end="18:17">res_setup</name><operator pos:start="18:18" pos:end="18:19">-&gt;</operator><name pos:start="18:20" pos:end="18:28">classbook</name></name><operator pos:start="18:29" pos:end="18:29">=</operator><call pos:start="18:30" pos:end="18:44"><name pos:start="18:30" pos:end="18:37">get_bits</name><argument_list pos:start="18:38" pos:end="18:44">(<argument pos:start="18:39" pos:end="18:40"><expr pos:start="18:39" pos:end="18:40"><name pos:start="18:39" pos:end="18:40">gb</name></expr></argument>, <argument pos:start="18:43" pos:end="18:43"><expr pos:start="18:43" pos:end="18:43"><literal type="number" pos:start="18:43" pos:end="18:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="19:9" pos:end="43:13"><if pos:start="19:9" pos:end="43:13">if <condition pos:start="19:12" pos:end="19:53">(<expr pos:start="19:13" pos:end="19:52"><name pos:start="19:13" pos:end="19:32"><name pos:start="19:13" pos:end="19:21">res_setup</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:32">classbook</name></name><operator pos:start="19:33" pos:end="19:34">&gt;=</operator><name pos:start="19:35" pos:end="19:52"><name pos:start="19:35" pos:end="19:36">vc</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:52">codebook_count</name></name></expr>)</condition> <block pos:start="19:55" pos:end="43:13">{<block_content pos:start="20:13" pos:end="43:13">
            <expr_stmt pos:start="20:13" pos:end="20:110"><expr pos:start="20:13" pos:end="20:109"><call pos:start="20:13" pos:end="20:109"><name pos:start="20:13" pos:end="20:18">av_log</name><argument_list pos:start="20:19" pos:end="20:109">(<argument pos:start="20:20" pos:end="20:33"><expr pos:start="20:20" pos:end="20:33"><name pos:start="20:20" pos:end="20:33"><name pos:start="20:20" pos:end="20:21">vc</name><operator pos:start="20:22" pos:end="20:23">-&gt;</operator><name pos:start="20:24" pos:end="20:33">avccontext</name></name></expr></argument>, <argument pos:start="20:36" pos:end="20:47"><expr pos:start="20:36" pos:end="20:47"><name pos:start="20:36" pos:end="20:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="20:50" pos:end="20:86"><expr pos:start="20:50" pos:end="20:86"><literal type="string" pos:start="20:50" pos:end="20:86">"classbook value %d out of range. \n"</literal></expr></argument>, <argument pos:start="20:89" pos:end="20:108"><expr pos:start="20:89" pos:end="20:108"><name pos:start="20:89" pos:end="20:108"><name pos:start="20:89" pos:end="20:97">res_setup</name><operator pos:start="20:98" pos:end="20:99">-&gt;</operator><name pos:start="20:100" pos:end="20:108">classbook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="21:9" pos:end="22:60"><expr pos:start="21:9" pos:end="22:59"><call pos:start="21:9" pos:end="22:59"><name pos:start="21:9" pos:end="21:16">AV_DEBUG</name><argument_list pos:start="21:17" pos:end="22:59">(<argument pos:start="21:18" pos:end="21:80"><expr pos:start="21:18" pos:end="21:80"><literal type="string" pos:start="21:18" pos:end="21:80">"    begin %d end %d part.size %d classif.s %d classbook %d \n"</literal></expr></argument>, <argument pos:start="21:83" pos:end="21:98"><expr pos:start="21:83" pos:end="21:98"><name pos:start="21:83" pos:end="21:98"><name pos:start="21:83" pos:end="21:91">res_setup</name><operator pos:start="21:92" pos:end="21:93">-&gt;</operator><name pos:start="21:94" pos:end="21:98">begin</name></name></expr></argument>, <argument pos:start="21:101" pos:end="21:114"><expr pos:start="21:101" pos:end="21:114"><name pos:start="21:101" pos:end="21:114"><name pos:start="21:101" pos:end="21:109">res_setup</name><operator pos:start="21:110" pos:end="21:111">-&gt;</operator><name pos:start="21:112" pos:end="21:114">end</name></name></expr></argument>, <argument pos:start="21:117" pos:end="21:141"><expr pos:start="21:117" pos:end="21:141"><name pos:start="21:117" pos:end="21:141"><name pos:start="21:117" pos:end="21:125">res_setup</name><operator pos:start="21:126" pos:end="21:127">-&gt;</operator><name pos:start="21:128" pos:end="21:141">partition_size</name></name></expr></argument>,
          <argument pos:start="22:11" pos:end="22:36"><expr pos:start="22:11" pos:end="22:36"><name pos:start="22:11" pos:end="22:36"><name pos:start="22:11" pos:end="22:19">res_setup</name><operator pos:start="22:20" pos:end="22:21">-&gt;</operator><name pos:start="22:22" pos:end="22:36">classifications</name></name></expr></argument>, <argument pos:start="22:39" pos:end="22:58"><expr pos:start="22:39" pos:end="22:58"><name pos:start="22:39" pos:end="22:58"><name pos:start="22:39" pos:end="22:47">res_setup</name><operator pos:start="22:48" pos:end="22:49">-&gt;</operator><name pos:start="22:50" pos:end="22:58">classbook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="23:9" pos:end="43:13">for<control pos:start="23:12" pos:end="23:49">(<init pos:start="23:13" pos:end="23:16"><expr pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:13">j</name><operator pos:start="23:14" pos:end="23:14">=</operator><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>;</init><condition pos:start="23:17" pos:end="23:45"><expr pos:start="23:17" pos:end="23:44"><name pos:start="23:17" pos:end="23:17">j</name><operator pos:start="23:18" pos:end="23:18">&lt;</operator><name pos:start="23:19" pos:end="23:44"><name pos:start="23:19" pos:end="23:27">res_setup</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:44">classifications</name></name></expr>;</condition><incr pos:start="23:46" pos:end="23:48"><expr pos:start="23:46" pos:end="23:48"><operator pos:start="23:46" pos:end="23:47">++</operator><name pos:start="23:48" pos:end="23:48">j</name></expr></incr>)</control> <block pos:start="23:51" pos:end="43:13">{<block_content pos:start="24:13" pos:end="43:13">
            <expr_stmt pos:start="24:13" pos:end="24:24"><expr pos:start="24:13" pos:end="24:23"><name pos:start="24:13" pos:end="24:21">high_bits</name><operator pos:start="24:22" pos:end="24:22">=</operator><literal type="number" pos:start="24:23" pos:end="24:23">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="25:13" pos:end="25:37"><expr pos:start="25:13" pos:end="25:36"><name pos:start="25:13" pos:end="25:20">low_bits</name><operator pos:start="25:21" pos:end="25:21">=</operator><call pos:start="25:22" pos:end="25:36"><name pos:start="25:22" pos:end="25:29">get_bits</name><argument_list pos:start="25:30" pos:end="25:36">(<argument pos:start="25:31" pos:end="25:32"><expr pos:start="25:31" pos:end="25:32"><name pos:start="25:31" pos:end="25:32">gb</name></expr></argument>, <argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><literal type="number" pos:start="25:35" pos:end="25:35">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="26:13" pos:end="43:13"><if pos:start="26:13" pos:end="43:13">if <condition pos:start="26:16" pos:end="26:30">(<expr pos:start="26:17" pos:end="26:29"><call pos:start="26:17" pos:end="26:29"><name pos:start="26:17" pos:end="26:25">get_bits1</name><argument_list pos:start="26:26" pos:end="26:29">(<argument pos:start="26:27" pos:end="26:28"><expr pos:start="26:27" pos:end="26:28"><name pos:start="26:27" pos:end="26:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="26:32" pos:end="43:13">{<block_content pos:start="27:17" pos:end="43:13">
                <expr_stmt pos:start="27:17" pos:end="27:42"><expr pos:start="27:17" pos:end="27:41"><name pos:start="27:17" pos:end="27:25">high_bits</name><operator pos:start="27:26" pos:end="27:26">=</operator><call pos:start="27:27" pos:end="27:41"><name pos:start="27:27" pos:end="27:34">get_bits</name><argument_list pos:start="27:35" pos:end="27:41">(<argument pos:start="27:36" pos:end="27:37"><expr pos:start="27:36" pos:end="27:37"><name pos:start="27:36" pos:end="27:37">gb</name></expr></argument>, <argument pos:start="27:40" pos:end="27:40"><expr pos:start="27:40" pos:end="27:40"><literal type="number" pos:start="27:40" pos:end="27:40">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="28:13" pos:end="28:47"><expr pos:start="28:13" pos:end="28:46"><name pos:start="28:13" pos:end="28:22"><name pos:start="28:13" pos:end="28:19">cascade</name><index pos:start="28:20" pos:end="28:22">[<expr pos:start="28:21" pos:end="28:21"><name pos:start="28:21" pos:end="28:21">j</name></expr>]</index></name><operator pos:start="28:23" pos:end="28:23">=</operator><operator pos:start="28:24" pos:end="28:24">(</operator><name pos:start="28:25" pos:end="28:33">high_bits</name><operator pos:start="28:34" pos:end="28:35">&lt;&lt;</operator><literal type="number" pos:start="28:36" pos:end="28:36">3</literal><operator pos:start="28:37" pos:end="28:37">)</operator><operator pos:start="28:38" pos:end="28:38">+</operator><name pos:start="28:39" pos:end="28:46">low_bits</name></expr>;</expr_stmt>
            <expr_stmt pos:start="29:13" pos:end="29:81"><expr pos:start="29:13" pos:end="29:80"><call pos:start="29:13" pos:end="29:80"><name pos:start="29:13" pos:end="29:20">AV_DEBUG</name><argument_list pos:start="29:21" pos:end="29:80">(<argument pos:start="29:22" pos:end="29:58"><expr pos:start="29:22" pos:end="29:58"><literal type="string" pos:start="29:22" pos:end="29:58">"     %d class casscade depth: %d \n"</literal></expr></argument>, <argument pos:start="29:61" pos:end="29:61"><expr pos:start="29:61" pos:end="29:61"><name pos:start="29:61" pos:end="29:61">j</name></expr></argument>, <argument pos:start="29:64" pos:end="29:79"><expr pos:start="29:64" pos:end="29:79"><call pos:start="29:64" pos:end="29:79"><name pos:start="29:64" pos:end="29:67">ilog</name><argument_list pos:start="29:68" pos:end="29:79">(<argument pos:start="29:69" pos:end="29:78"><expr pos:start="29:69" pos:end="29:78"><name pos:start="29:69" pos:end="29:78"><name pos:start="29:69" pos:end="29:75">cascade</name><index pos:start="29:76" pos:end="29:78">[<expr pos:start="29:77" pos:end="29:77"><name pos:start="29:77" pos:end="29:77">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:29"><expr pos:start="30:9" pos:end="30:28"><name pos:start="30:9" pos:end="30:26"><name pos:start="30:9" pos:end="30:17">res_setup</name><operator pos:start="30:18" pos:end="30:19">-&gt;</operator><name pos:start="30:20" pos:end="30:26">maxpass</name></name><operator pos:start="30:27" pos:end="30:27">=</operator><literal type="number" pos:start="30:28" pos:end="30:28">0</literal></expr>;</expr_stmt>
        <for pos:start="31:9" pos:end="43:13">for<control pos:start="31:12" pos:end="31:49">(<init pos:start="31:13" pos:end="31:16"><expr pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:13">j</name><operator pos:start="31:14" pos:end="31:14">=</operator><literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>;</init><condition pos:start="31:17" pos:end="31:45"><expr pos:start="31:17" pos:end="31:44"><name pos:start="31:17" pos:end="31:17">j</name><operator pos:start="31:18" pos:end="31:18">&lt;</operator><name pos:start="31:19" pos:end="31:44"><name pos:start="31:19" pos:end="31:27">res_setup</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:44">classifications</name></name></expr>;</condition><incr pos:start="31:46" pos:end="31:48"><expr pos:start="31:46" pos:end="31:48"><operator pos:start="31:46" pos:end="31:47">++</operator><name pos:start="31:48" pos:end="31:48">j</name></expr></incr>)</control> <block pos:start="31:51" pos:end="43:13">{<block_content pos:start="32:13" pos:end="43:13">
            <for pos:start="32:13" pos:end="43:13">for<control pos:start="32:16" pos:end="32:28">(<init pos:start="32:17" pos:end="32:20"><expr pos:start="32:17" pos:end="32:19"><name pos:start="32:17" pos:end="32:17">k</name><operator pos:start="32:18" pos:end="32:18">=</operator><literal type="number" pos:start="32:19" pos:end="32:19">0</literal></expr>;</init><condition pos:start="32:21" pos:end="32:24"><expr pos:start="32:21" pos:end="32:23"><name pos:start="32:21" pos:end="32:21">k</name><operator pos:start="32:22" pos:end="32:22">&lt;</operator><literal type="number" pos:start="32:23" pos:end="32:23">8</literal></expr>;</condition><incr pos:start="32:25" pos:end="32:27"><expr pos:start="32:25" pos:end="32:27"><operator pos:start="32:25" pos:end="32:26">++</operator><name pos:start="32:27" pos:end="32:27">k</name></expr></incr>)</control> <block pos:start="32:30" pos:end="43:13">{<block_content pos:start="33:17" pos:end="43:13">
                <if_stmt pos:start="33:17" pos:end="43:13"><if pos:start="33:17" pos:end="43:13">if <condition pos:start="33:20" pos:end="33:38">(<expr pos:start="33:21" pos:end="33:37"><name pos:start="33:21" pos:end="33:30"><name pos:start="33:21" pos:end="33:27">cascade</name><index pos:start="33:28" pos:end="33:30">[<expr pos:start="33:29" pos:end="33:29"><name pos:start="33:29" pos:end="33:29">j</name></expr>]</index></name><operator pos:start="33:31" pos:end="33:31">&amp;</operator><operator pos:start="33:32" pos:end="33:32">(</operator><literal type="number" pos:start="33:33" pos:end="33:33">1</literal><operator pos:start="33:34" pos:end="33:35">&lt;&lt;</operator><name pos:start="33:36" pos:end="33:36">k</name><operator pos:start="33:37" pos:end="33:37">)</operator></expr>)</condition> <block pos:start="33:40" pos:end="43:13">{<block_content pos:start="34:21" pos:end="43:13">
                    <decl_stmt pos:start="34:21" pos:end="34:45"><decl pos:start="34:21" pos:end="34:44"><type pos:start="34:21" pos:end="34:23"><name pos:start="34:21" pos:end="34:23">int</name></type> <name pos:start="34:25" pos:end="34:28">bits</name><init pos:start="34:29" pos:end="34:44">=<expr pos:start="34:30" pos:end="34:44"><call pos:start="34:30" pos:end="34:44"><name pos:start="34:30" pos:end="34:37">get_bits</name><argument_list pos:start="34:38" pos:end="34:44">(<argument pos:start="34:39" pos:end="34:40"><expr pos:start="34:39" pos:end="34:40"><name pos:start="34:39" pos:end="34:40">gb</name></expr></argument>, <argument pos:start="34:43" pos:end="34:43"><expr pos:start="34:43" pos:end="34:43"><literal type="number" pos:start="34:43" pos:end="34:43">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt pos:start="35:21" pos:end="43:13"><if pos:start="35:21" pos:end="43:13">if <condition pos:start="35:24" pos:end="35:49">(<expr pos:start="35:25" pos:end="35:48"><name pos:start="35:25" pos:end="35:28">bits</name><operator pos:start="35:29" pos:end="35:30">&gt;=</operator><name pos:start="35:31" pos:end="35:48"><name pos:start="35:31" pos:end="35:32">vc</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:48">codebook_count</name></name></expr>)</condition> <block pos:start="35:51" pos:end="43:13">{<block_content pos:start="36:25" pos:end="43:13">
                        <expr_stmt pos:start="36:25" pos:end="36:101"><expr pos:start="36:25" pos:end="36:100"><call pos:start="36:25" pos:end="36:100"><name pos:start="36:25" pos:end="36:30">av_log</name><argument_list pos:start="36:31" pos:end="36:100">(<argument pos:start="36:32" pos:end="36:45"><expr pos:start="36:32" pos:end="36:45"><name pos:start="36:32" pos:end="36:45"><name pos:start="36:32" pos:end="36:33">vc</name><operator pos:start="36:34" pos:end="36:35">-&gt;</operator><name pos:start="36:36" pos:end="36:45">avccontext</name></name></expr></argument>, <argument pos:start="36:48" pos:end="36:59"><expr pos:start="36:48" pos:end="36:59"><name pos:start="36:48" pos:end="36:59">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="36:62" pos:end="36:93"><expr pos:start="36:62" pos:end="36:93"><literal type="string" pos:start="36:62" pos:end="36:93">"book value %d out of range. \n"</literal></expr></argument>, <argument pos:start="36:96" pos:end="36:99"><expr pos:start="36:96" pos:end="36:99"><name pos:start="36:96" pos:end="36:99">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="37:21" pos:end="37:48"><expr pos:start="37:21" pos:end="37:47"><name pos:start="37:21" pos:end="37:42"><name pos:start="37:21" pos:end="37:29">res_setup</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:36">books</name><index pos:start="37:37" pos:end="37:39">[<expr pos:start="37:38" pos:end="37:38"><name pos:start="37:38" pos:end="37:38">j</name></expr>]</index><index pos:start="37:40" pos:end="37:42">[<expr pos:start="37:41" pos:end="37:41"><name pos:start="37:41" pos:end="37:41">k</name></expr>]</index></name><operator pos:start="37:43" pos:end="37:43">=</operator><name pos:start="37:44" pos:end="37:47">bits</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="38:21" pos:end="38:106"><expr pos:start="38:21" pos:end="38:105"><call pos:start="38:21" pos:end="38:105"><name pos:start="38:21" pos:end="38:28">AV_DEBUG</name><argument_list pos:start="38:29" pos:end="38:105">(<argument pos:start="38:30" pos:end="38:74"><expr pos:start="38:30" pos:end="38:74"><literal type="string" pos:start="38:30" pos:end="38:74">"     %d class casscade depth %d book: %d \n"</literal></expr></argument>, <argument pos:start="38:77" pos:end="38:77"><expr pos:start="38:77" pos:end="38:77"><name pos:start="38:77" pos:end="38:77">j</name></expr></argument>, <argument pos:start="38:80" pos:end="38:80"><expr pos:start="38:80" pos:end="38:80"><name pos:start="38:80" pos:end="38:80">k</name></expr></argument>, <argument pos:start="38:83" pos:end="38:104"><expr pos:start="38:83" pos:end="38:104"><name pos:start="38:83" pos:end="38:104"><name pos:start="38:83" pos:end="38:91">res_setup</name><operator pos:start="38:92" pos:end="38:93">-&gt;</operator><name pos:start="38:94" pos:end="38:98">books</name><index pos:start="38:99" pos:end="38:101">[<expr pos:start="38:100" pos:end="38:100"><name pos:start="38:100" pos:end="38:100">j</name></expr>]</index><index pos:start="38:102" pos:end="38:104">[<expr pos:start="38:103" pos:end="38:103"><name pos:start="38:103" pos:end="38:103">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="39:21" pos:end="43:13"><if pos:start="39:21" pos:end="41:17">if <condition pos:start="39:24" pos:end="39:45">(<expr pos:start="39:25" pos:end="39:44"><name pos:start="39:25" pos:end="39:25">k</name><operator pos:start="39:26" pos:end="39:26">&gt;</operator><name pos:start="39:27" pos:end="39:44"><name pos:start="39:27" pos:end="39:35">res_setup</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:44">maxpass</name></name></expr>)</condition> <block pos:start="39:47" pos:end="41:17">{<block_content pos:start="40:25" pos:end="40:45">
                        <expr_stmt pos:start="40:25" pos:end="40:45"><expr pos:start="40:25" pos:end="40:44"><name pos:start="40:25" pos:end="40:42"><name pos:start="40:25" pos:end="40:33">res_setup</name><operator pos:start="40:34" pos:end="40:35">-&gt;</operator><name pos:start="40:36" pos:end="40:42">maxpass</name></name><operator pos:start="40:43" pos:end="40:43">=</operator><name pos:start="40:44" pos:end="40:44">k</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="41:19" pos:end="43:13">else <block pos:start="41:24" pos:end="43:13">{<block_content pos:start="42:21" pos:end="43:13">
                    <expr_stmt pos:start="42:21" pos:end="42:46"><expr pos:start="42:21" pos:end="42:45"><name pos:start="42:21" pos:end="42:42"><name pos:start="42:21" pos:end="42:29">res_setup</name><operator pos:start="42:30" pos:end="42:31">-&gt;</operator><name pos:start="42:32" pos:end="42:36">books</name><index pos:start="42:37" pos:end="42:39">[<expr pos:start="42:38" pos:end="42:38"><name pos:start="42:38" pos:end="42:38">j</name></expr>]</index><index pos:start="42:40" pos:end="42:42">[<expr pos:start="42:41" pos:end="42:41"><name pos:start="42:41" pos:end="42:41">k</name></expr>]</index></name><operator pos:start="42:43" pos:end="42:43">=</operator><operator pos:start="42:44" pos:end="42:44">-</operator><literal type="number" pos:start="42:45" pos:end="42:45">1</literal></expr>;</expr_stmt>
    <return pos:start="43:5" pos:end="43:13">return <expr pos:start="43:12" pos:end="43:12"><literal type="number" pos:start="43:12" pos:end="43:12">0</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function></unit>
