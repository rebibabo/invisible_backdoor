<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11207.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">udp_read_packet</name><parameter_list pos:start="1:27" pos:end="3:72">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:68"><decl pos:start="1:48" pos:end="1:68"><type pos:start="1:48" pos:end="1:68"><name pos:start="1:48" pos:end="1:57">RTSPStream</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:68">prtsp_st</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:34">uint8_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">buf</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:53"><decl pos:start="3:42" pos:end="3:53"><type pos:start="3:42" pos:end="3:53"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:53">buf_size</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:71"><decl pos:start="3:56" pos:end="3:71"><type pos:start="3:56" pos:end="3:71"><name pos:start="3:56" pos:end="3:62">int64_t</name></type> <name pos:start="3:64" pos:end="3:71">wait_end</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="145:1">{<block_content pos:start="7:5" pos:end="143:5">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">RTSPState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:17">rt</name> <init pos:start="7:19" pos:end="7:32">= <expr pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:21">s</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">RTSPStream</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:23">rtsp_st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">n</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">i</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">ret</name></decl>, <decl pos:start="11:20" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:30">timeout_cnt</name> <init pos:start="11:32" pos:end="11:34">= <expr pos:start="11:34" pos:end="11:34"><literal type="number" pos:start="11:34" pos:end="11:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:17">pollfd</name></name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:20">p</name> <init pos:start="13:22" pos:end="13:28">= <expr pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:25">rt</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:28">p</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:7">int</name> <modifier pos:start="15:9" pos:end="15:9">*</modifier></type><name pos:start="15:10" pos:end="15:12">fds</name> <init pos:start="15:14" pos:end="15:19">= <expr pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">NULL</name></expr></init></decl>, <decl pos:start="15:22" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:9"/><name pos:start="15:22" pos:end="15:27">fdsnum</name></decl>, <decl pos:start="15:30" pos:end="15:35"><type ref="prev" pos:start="15:5" pos:end="15:9"/><name pos:start="15:30" pos:end="15:35">fdsidx</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="77:5"><if pos:start="19:5" pos:end="77:5">if <condition pos:start="19:8" pos:end="19:11">(<expr pos:start="19:9" pos:end="19:10"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:10">p</name></expr>)</condition> <block pos:start="19:13" pos:end="77:5">{<block_content pos:start="21:9" pos:end="75:9">

        <expr_stmt pos:start="21:9" pos:end="21:90"><expr pos:start="21:9" pos:end="21:89"><name pos:start="21:9" pos:end="21:9">p</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <name pos:start="21:13" pos:end="21:17"><name pos:start="21:13" pos:end="21:14">rt</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:17">p</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:89"><name pos:start="21:21" pos:end="21:35">av_malloc_array</name><argument_list pos:start="21:36" pos:end="21:89">(<argument pos:start="21:37" pos:end="21:65"><expr pos:start="21:37" pos:end="21:65"><literal type="number" pos:start="21:37" pos:end="21:37">2</literal> <operator pos:start="21:39" pos:end="21:39">*</operator> <operator pos:start="21:41" pos:end="21:41">(</operator><name pos:start="21:42" pos:end="21:60"><name pos:start="21:42" pos:end="21:43">rt</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:60">nb_rtsp_streams</name></name> <operator pos:start="21:62" pos:end="21:62">+</operator> <literal type="number" pos:start="21:64" pos:end="21:64">1</literal><operator pos:start="21:65" pos:end="21:65">)</operator></expr></argument>, <argument pos:start="21:68" pos:end="21:88"><expr pos:start="21:68" pos:end="21:88"><sizeof pos:start="21:68" pos:end="21:88">sizeof<argument_list pos:start="21:74" pos:end="21:88">(<argument pos:start="21:75" pos:end="21:87"><expr pos:start="21:75" pos:end="21:87">struct <name pos:start="21:82" pos:end="21:87">pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="25:35"><if pos:start="23:9" pos:end="25:35">if <condition pos:start="23:12" pos:end="23:15">(<expr pos:start="23:13" pos:end="23:14"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:14">p</name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:35"><block_content pos:start="25:13" pos:end="25:35">

            <return pos:start="25:13" pos:end="25:35">return <expr pos:start="25:20" pos:end="25:34"><call pos:start="25:20" pos:end="25:34"><name pos:start="25:20" pos:end="25:26">AVERROR</name><argument_list pos:start="25:27" pos:end="25:34">(<argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><name pos:start="25:28" pos:end="25:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:14">rt</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:23">rtsp_hd</name></name></expr>)</condition> <block pos:start="29:26" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:43">

            <expr_stmt pos:start="31:13" pos:end="31:65"><expr pos:start="31:13" pos:end="31:64"><name pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:13">p</name><index pos:start="31:14" pos:end="31:24">[<expr pos:start="31:15" pos:end="31:23"><name pos:start="31:15" pos:end="31:23"><name pos:start="31:15" pos:end="31:16">rt</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:23">max_p</name></name></expr>]</index></name><operator pos:start="31:25" pos:end="31:25">.</operator><name pos:start="31:26" pos:end="31:27">fd</name> <operator pos:start="31:29" pos:end="31:29">=</operator> <call pos:start="31:31" pos:end="31:64"><name pos:start="31:31" pos:end="31:51">ffurl_get_file_handle</name><argument_list pos:start="31:52" pos:end="31:64">(<argument pos:start="31:53" pos:end="31:63"><expr pos:start="31:53" pos:end="31:63"><name pos:start="31:53" pos:end="31:63"><name pos:start="31:53" pos:end="31:54">rt</name><operator pos:start="31:55" pos:end="31:56">-&gt;</operator><name pos:start="31:57" pos:end="31:63">rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:43"><expr pos:start="33:13" pos:end="33:42"><name pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:13">p</name><index pos:start="33:14" pos:end="33:26">[<expr pos:start="33:15" pos:end="33:25"><name pos:start="33:15" pos:end="33:23"><name pos:start="33:15" pos:end="33:16">rt</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:23">max_p</name></name><operator pos:start="33:24" pos:end="33:25">++</operator></expr>]</index></name><operator pos:start="33:27" pos:end="33:27">.</operator><name pos:start="33:28" pos:end="33:33">events</name> <operator pos:start="33:35" pos:end="33:35">=</operator> <name pos:start="33:37" pos:end="33:42">POLLIN</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="37:9" pos:end="75:9">for <control pos:start="37:13" pos:end="37:49">(<init pos:start="37:14" pos:end="37:19"><expr pos:start="37:14" pos:end="37:18"><name pos:start="37:14" pos:end="37:14">i</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>;</init> <condition pos:start="37:21" pos:end="37:44"><expr pos:start="37:21" pos:end="37:43"><name pos:start="37:21" pos:end="37:21">i</name> <operator pos:start="37:23" pos:end="37:23">&lt;</operator> <name pos:start="37:25" pos:end="37:43"><name pos:start="37:25" pos:end="37:26">rt</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:43">nb_rtsp_streams</name></name></expr>;</condition> <incr pos:start="37:46" pos:end="37:48"><expr pos:start="37:46" pos:end="37:48"><name pos:start="37:46" pos:end="37:46">i</name><operator pos:start="37:47" pos:end="37:48">++</operator></expr></incr>)</control> <block pos:start="37:51" pos:end="75:9">{<block_content pos:start="39:13" pos:end="73:13">

            <expr_stmt pos:start="39:13" pos:end="39:42"><expr pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:19">rtsp_st</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:41"><name pos:start="39:23" pos:end="39:24">rt</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:38">rtsp_streams</name><index pos:start="39:39" pos:end="39:41">[<expr pos:start="39:40" pos:end="39:40"><name pos:start="39:40" pos:end="39:40">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="73:13"><if pos:start="41:13" pos:end="73:13">if <condition pos:start="41:16" pos:end="41:36">(<expr pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:23">rtsp_st</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:35">rtp_handle</name></name></expr>)</condition> <block pos:start="41:38" pos:end="73:13">{<block_content pos:start="43:17" pos:end="71:29">

                <if_stmt pos:start="43:17" pos:end="51:17"><if pos:start="43:17" pos:end="51:17">if <condition pos:start="43:20" pos:end="45:69">(<expr pos:start="43:21" pos:end="45:68"><name pos:start="43:21" pos:end="43:23">ret</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <call pos:start="43:27" pos:end="45:68"><name pos:start="43:27" pos:end="43:53">ffurl_get_multi_file_handle</name><argument_list pos:start="43:54" pos:end="45:68">(<argument pos:start="43:55" pos:end="43:73"><expr pos:start="43:55" pos:end="43:73"><name pos:start="43:55" pos:end="43:73"><name pos:start="43:55" pos:end="43:61">rtsp_st</name><operator pos:start="43:62" pos:end="43:63">-&gt;</operator><name pos:start="43:64" pos:end="43:73">rtp_handle</name></name></expr></argument>,

                                                      <argument pos:start="45:55" pos:end="45:58"><expr pos:start="45:55" pos:end="45:58"><operator pos:start="45:55" pos:end="45:55">&amp;</operator><name pos:start="45:56" pos:end="45:58">fds</name></expr></argument>, <argument pos:start="45:61" pos:end="45:67"><expr pos:start="45:61" pos:end="45:67"><operator pos:start="45:61" pos:end="45:61">&amp;</operator><name pos:start="45:62" pos:end="45:67">fdsnum</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:71" pos:end="51:17">{<block_content pos:start="47:21" pos:end="49:31">

                    <expr_stmt pos:start="47:21" pos:end="47:77"><expr pos:start="47:21" pos:end="47:76"><call pos:start="47:21" pos:end="47:76"><name pos:start="47:21" pos:end="47:26">av_log</name><argument_list pos:start="47:27" pos:end="47:76">(<argument pos:start="47:28" pos:end="47:28"><expr pos:start="47:28" pos:end="47:28"><name pos:start="47:28" pos:end="47:28">s</name></expr></argument>, <argument pos:start="47:31" pos:end="47:42"><expr pos:start="47:31" pos:end="47:42"><name pos:start="47:31" pos:end="47:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:45" pos:end="47:75"><expr pos:start="47:45" pos:end="47:75"><literal type="string" pos:start="47:45" pos:end="47:75">"Unable to recover rtp ports\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="49:21" pos:end="49:31">return <expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="53:17" pos:end="61:17"><if pos:start="53:17" pos:end="61:17">if <condition pos:start="53:20" pos:end="53:32">(<expr pos:start="53:21" pos:end="53:31"><name pos:start="53:21" pos:end="53:26">fdsnum</name> <operator pos:start="53:28" pos:end="53:29">!=</operator> <literal type="number" pos:start="53:31" pos:end="53:31">2</literal></expr>)</condition> <block pos:start="53:34" pos:end="61:17">{<block_content pos:start="55:21" pos:end="59:47">

                    <expr_stmt pos:start="55:21" pos:end="57:71"><expr pos:start="55:21" pos:end="57:70"><call pos:start="55:21" pos:end="57:70"><name pos:start="55:21" pos:end="55:26">av_log</name><argument_list pos:start="55:27" pos:end="57:70">(<argument pos:start="55:28" pos:end="55:28"><expr pos:start="55:28" pos:end="55:28"><name pos:start="55:28" pos:end="55:28">s</name></expr></argument>, <argument pos:start="55:31" pos:end="55:42"><expr pos:start="55:31" pos:end="55:42"><name pos:start="55:31" pos:end="55:42">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="57:28" pos:end="57:61"><expr pos:start="57:28" pos:end="57:61"><literal type="string" pos:start="57:28" pos:end="57:61">"Number of fds %d not supported\n"</literal></expr></argument>, <argument pos:start="57:64" pos:end="57:69"><expr pos:start="57:64" pos:end="57:69"><name pos:start="57:64" pos:end="57:69">fdsnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="59:21" pos:end="59:47">return <expr pos:start="59:28" pos:end="59:46"><name pos:start="59:28" pos:end="59:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <for pos:start="63:17" pos:end="69:17">for <control pos:start="63:21" pos:end="63:59">(<init pos:start="63:22" pos:end="63:32"><expr pos:start="63:22" pos:end="63:31"><name pos:start="63:22" pos:end="63:27">fdsidx</name> <operator pos:start="63:29" pos:end="63:29">=</operator> <literal type="number" pos:start="63:31" pos:end="63:31">0</literal></expr>;</init> <condition pos:start="63:34" pos:end="63:49"><expr pos:start="63:34" pos:end="63:48"><name pos:start="63:34" pos:end="63:39">fdsidx</name> <operator pos:start="63:41" pos:end="63:41">&lt;</operator> <name pos:start="63:43" pos:end="63:48">fdsnum</name></expr>;</condition> <incr pos:start="63:51" pos:end="63:58"><expr pos:start="63:51" pos:end="63:58"><name pos:start="63:51" pos:end="63:56">fdsidx</name><operator pos:start="63:57" pos:end="63:58">++</operator></expr></incr>)</control> <block pos:start="63:61" pos:end="69:17">{<block_content pos:start="65:21" pos:end="67:51">

                    <expr_stmt pos:start="65:21" pos:end="65:56"><expr pos:start="65:21" pos:end="65:55"><name pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:21">p</name><index pos:start="65:22" pos:end="65:32">[<expr pos:start="65:23" pos:end="65:31"><name pos:start="65:23" pos:end="65:31"><name pos:start="65:23" pos:end="65:24">rt</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:31">max_p</name></name></expr>]</index></name><operator pos:start="65:33" pos:end="65:33">.</operator><name pos:start="65:34" pos:end="65:35">fd</name>       <operator pos:start="65:43" pos:end="65:43">=</operator> <name pos:start="65:45" pos:end="65:55"><name pos:start="65:45" pos:end="65:47">fds</name><index pos:start="65:48" pos:end="65:55">[<expr pos:start="65:49" pos:end="65:54"><name pos:start="65:49" pos:end="65:54">fdsidx</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:51"><expr pos:start="67:21" pos:end="67:50"><name pos:start="67:21" pos:end="67:34"><name pos:start="67:21" pos:end="67:21">p</name><index pos:start="67:22" pos:end="67:34">[<expr pos:start="67:23" pos:end="67:33"><name pos:start="67:23" pos:end="67:31"><name pos:start="67:23" pos:end="67:24">rt</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:31">max_p</name></name><operator pos:start="67:32" pos:end="67:33">++</operator></expr>]</index></name><operator pos:start="67:35" pos:end="67:35">.</operator><name pos:start="67:36" pos:end="67:41">events</name> <operator pos:start="67:43" pos:end="67:43">=</operator> <name pos:start="67:45" pos:end="67:50">POLLIN</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="71:17" pos:end="71:29"><expr pos:start="71:17" pos:end="71:28"><call pos:start="71:17" pos:end="71:28"><name pos:start="71:17" pos:end="71:23">av_free</name><argument_list pos:start="71:24" pos:end="71:28">(<argument pos:start="71:25" pos:end="71:27"><expr pos:start="71:25" pos:end="71:27"><name pos:start="71:25" pos:end="71:27">fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <for pos:start="81:5" pos:end="143:5">for <control pos:start="81:9" pos:end="81:12">(<init pos:start="81:10" pos:end="81:10">;</init><condition pos:start="81:11" pos:end="81:11">;</condition><incr/>)</control> <block pos:start="81:14" pos:end="143:5">{<block_content pos:start="83:9" pos:end="141:34">

        <if_stmt pos:start="83:9" pos:end="85:32"><if pos:start="83:9" pos:end="85:32">if <condition pos:start="83:12" pos:end="83:55">(<expr pos:start="83:13" pos:end="83:54"><call pos:start="83:13" pos:end="83:54"><name pos:start="83:13" pos:end="83:30">ff_check_interrupt</name><argument_list pos:start="83:31" pos:end="83:54">(<argument pos:start="83:32" pos:end="83:53"><expr pos:start="83:32" pos:end="83:53"><operator pos:start="83:32" pos:end="83:32">&amp;</operator><name pos:start="83:33" pos:end="83:53"><name pos:start="83:33" pos:end="83:33">s</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:53">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:32"><block_content pos:start="85:13" pos:end="85:32">

            <return pos:start="85:13" pos:end="85:32">return <expr pos:start="85:20" pos:end="85:31"><name pos:start="85:20" pos:end="85:31">AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="89:35"><if pos:start="87:9" pos:end="89:35">if <condition pos:start="87:12" pos:end="87:61">(<expr pos:start="87:13" pos:end="87:60"><name pos:start="87:13" pos:end="87:20">wait_end</name> <operator pos:start="87:22" pos:end="87:23">&amp;&amp;</operator> <name pos:start="87:25" pos:end="87:32">wait_end</name> <operator pos:start="87:34" pos:end="87:34">-</operator> <call pos:start="87:36" pos:end="87:56"><name pos:start="87:36" pos:end="87:54">av_gettime_relative</name><argument_list pos:start="87:55" pos:end="87:56">()</argument_list></call> <operator pos:start="87:58" pos:end="87:58">&lt;</operator> <literal type="number" pos:start="87:60" pos:end="87:60">0</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:35"><block_content pos:start="89:13" pos:end="89:35">

            <return pos:start="89:13" pos:end="89:35">return <expr pos:start="89:20" pos:end="89:34"><call pos:start="89:20" pos:end="89:34"><name pos:start="89:20" pos:end="89:26">AVERROR</name><argument_list pos:start="89:27" pos:end="89:34">(<argument pos:start="89:28" pos:end="89:33"><expr pos:start="89:28" pos:end="89:33"><name pos:start="89:28" pos:end="89:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:48"><expr pos:start="91:9" pos:end="91:47"><name pos:start="91:9" pos:end="91:9">n</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <call pos:start="91:13" pos:end="91:47"><name pos:start="91:13" pos:end="91:16">poll</name><argument_list pos:start="91:17" pos:end="91:47">(<argument pos:start="91:18" pos:end="91:18"><expr pos:start="91:18" pos:end="91:18"><name pos:start="91:18" pos:end="91:18">p</name></expr></argument>, <argument pos:start="91:21" pos:end="91:29"><expr pos:start="91:21" pos:end="91:29"><name pos:start="91:21" pos:end="91:29"><name pos:start="91:21" pos:end="91:22">rt</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:29">max_p</name></name></expr></argument>, <argument pos:start="91:32" pos:end="91:46"><expr pos:start="91:32" pos:end="91:46"><name pos:start="91:32" pos:end="91:46">POLL_TIMEOUT_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="141:34"><if pos:start="93:9" pos:end="135:9">if <condition pos:start="93:12" pos:end="93:18">(<expr pos:start="93:13" pos:end="93:17"><name pos:start="93:13" pos:end="93:13">n</name> <operator pos:start="93:15" pos:end="93:15">&gt;</operator> <literal type="number" pos:start="93:17" pos:end="93:17">0</literal></expr>)</condition> <block pos:start="93:20" pos:end="135:9">{<block_content pos:start="95:13" pos:end="134:0">

            <decl_stmt pos:start="95:13" pos:end="95:40"><decl pos:start="95:13" pos:end="95:39"><type pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">int</name></type> <name pos:start="95:17" pos:end="95:17">j</name> <init pos:start="95:19" pos:end="95:39">= <expr pos:start="95:21" pos:end="95:39"><ternary pos:start="95:21" pos:end="95:39"><condition pos:start="95:21" pos:end="95:33"><expr pos:start="95:21" pos:end="95:31"><name pos:start="95:21" pos:end="95:31"><name pos:start="95:21" pos:end="95:22">rt</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:31">rtsp_hd</name></name></expr> ?</condition><then pos:start="95:35" pos:end="95:35"> <expr pos:start="95:35" pos:end="95:35"><literal type="number" pos:start="95:35" pos:end="95:35">1</literal></expr> </then><else pos:start="95:37" pos:end="95:39">: <expr pos:start="95:39" pos:end="95:39"><literal type="number" pos:start="95:39" pos:end="95:39">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:28"><expr pos:start="97:13" pos:end="97:27"><name pos:start="97:13" pos:end="97:23">timeout_cnt</name> <operator pos:start="97:25" pos:end="97:25">=</operator> <literal type="number" pos:start="97:27" pos:end="97:27">0</literal></expr>;</expr_stmt>

            <for pos:start="99:13" pos:end="126:0">for <control pos:start="99:17" pos:end="99:53">(<init pos:start="99:18" pos:end="99:23"><expr pos:start="99:18" pos:end="99:22"><name pos:start="99:18" pos:end="99:18">i</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <literal type="number" pos:start="99:22" pos:end="99:22">0</literal></expr>;</init> <condition pos:start="99:25" pos:end="99:48"><expr pos:start="99:25" pos:end="99:47"><name pos:start="99:25" pos:end="99:25">i</name> <operator pos:start="99:27" pos:end="99:27">&lt;</operator> <name pos:start="99:29" pos:end="99:47"><name pos:start="99:29" pos:end="99:30">rt</name><operator pos:start="99:31" pos:end="99:32">-&gt;</operator><name pos:start="99:33" pos:end="99:47">nb_rtsp_streams</name></name></expr>;</condition> <incr pos:start="99:50" pos:end="99:52"><expr pos:start="99:50" pos:end="99:52"><name pos:start="99:50" pos:end="99:50">i</name><operator pos:start="99:51" pos:end="99:52">++</operator></expr></incr>)</control> <block pos:start="99:55" pos:end="126:0">{<block_content pos:start="101:17" pos:end="121:17">

                <expr_stmt pos:start="101:17" pos:end="101:46"><expr pos:start="101:17" pos:end="101:45"><name pos:start="101:17" pos:end="101:23">rtsp_st</name> <operator pos:start="101:25" pos:end="101:25">=</operator> <name pos:start="101:27" pos:end="101:45"><name pos:start="101:27" pos:end="101:28">rt</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:42">rtsp_streams</name><index pos:start="101:43" pos:end="101:45">[<expr pos:start="101:44" pos:end="101:44"><name pos:start="101:44" pos:end="101:44">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="103:17" pos:end="121:17"><if pos:start="103:17" pos:end="121:17">if <condition pos:start="103:20" pos:end="103:40">(<expr pos:start="103:21" pos:end="103:39"><name pos:start="103:21" pos:end="103:39"><name pos:start="103:21" pos:end="103:27">rtsp_st</name><operator pos:start="103:28" pos:end="103:29">-&gt;</operator><name pos:start="103:30" pos:end="103:39">rtp_handle</name></name></expr>)</condition> <block pos:start="103:42" pos:end="121:17">{<block_content pos:start="105:21" pos:end="119:25">

                    <if_stmt pos:start="105:21" pos:end="117:21"><if pos:start="105:21" pos:end="117:21">if <condition pos:start="105:24" pos:end="105:73">(<expr pos:start="105:25" pos:end="105:72"><name pos:start="105:25" pos:end="105:28"><name pos:start="105:25" pos:end="105:25">p</name><index pos:start="105:26" pos:end="105:28">[<expr pos:start="105:27" pos:end="105:27"><name pos:start="105:27" pos:end="105:27">j</name></expr>]</index></name><operator pos:start="105:29" pos:end="105:29">.</operator><name pos:start="105:30" pos:end="105:36">revents</name> <operator pos:start="105:38" pos:end="105:38">&amp;</operator> <name pos:start="105:40" pos:end="105:45">POLLIN</name> <operator pos:start="105:47" pos:end="105:48">||</operator> <name pos:start="105:50" pos:end="105:55"><name pos:start="105:50" pos:end="105:50">p</name><index pos:start="105:51" pos:end="105:55">[<expr pos:start="105:52" pos:end="105:54"><name pos:start="105:52" pos:end="105:52">j</name><operator pos:start="105:53" pos:end="105:53">+</operator><literal type="number" pos:start="105:54" pos:end="105:54">1</literal></expr>]</index></name><operator pos:start="105:56" pos:end="105:56">.</operator><name pos:start="105:57" pos:end="105:63">revents</name> <operator pos:start="105:65" pos:end="105:65">&amp;</operator> <name pos:start="105:67" pos:end="105:72">POLLIN</name></expr>)</condition> <block pos:start="105:75" pos:end="117:21">{<block_content pos:start="107:25" pos:end="115:25">

                        <expr_stmt pos:start="107:25" pos:end="107:77"><expr pos:start="107:25" pos:end="107:76"><name pos:start="107:25" pos:end="107:27">ret</name> <operator pos:start="107:29" pos:end="107:29">=</operator> <call pos:start="107:31" pos:end="107:76"><name pos:start="107:31" pos:end="107:40">ffurl_read</name><argument_list pos:start="107:41" pos:end="107:76">(<argument pos:start="107:42" pos:end="107:60"><expr pos:start="107:42" pos:end="107:60"><name pos:start="107:42" pos:end="107:60"><name pos:start="107:42" pos:end="107:48">rtsp_st</name><operator pos:start="107:49" pos:end="107:50">-&gt;</operator><name pos:start="107:51" pos:end="107:60">rtp_handle</name></name></expr></argument>, <argument pos:start="107:63" pos:end="107:65"><expr pos:start="107:63" pos:end="107:65"><name pos:start="107:63" pos:end="107:65">buf</name></expr></argument>, <argument pos:start="107:68" pos:end="107:75"><expr pos:start="107:68" pos:end="107:75"><name pos:start="107:68" pos:end="107:75">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="109:25" pos:end="115:25"><if pos:start="109:25" pos:end="115:25">if <condition pos:start="109:28" pos:end="109:36">(<expr pos:start="109:29" pos:end="109:35"><name pos:start="109:29" pos:end="109:31">ret</name> <operator pos:start="109:33" pos:end="109:33">&gt;</operator> <literal type="number" pos:start="109:35" pos:end="109:35">0</literal></expr>)</condition> <block pos:start="109:38" pos:end="115:25">{<block_content pos:start="111:29" pos:end="113:39">

                            <expr_stmt pos:start="111:29" pos:end="111:48"><expr pos:start="111:29" pos:end="111:47"><operator pos:start="111:29" pos:end="111:29">*</operator><name pos:start="111:30" pos:end="111:37">prtsp_st</name> <operator pos:start="111:39" pos:end="111:39">=</operator> <name pos:start="111:41" pos:end="111:47">rtsp_st</name></expr>;</expr_stmt>

                            <return pos:start="113:29" pos:end="113:39">return <expr pos:start="113:36" pos:end="113:38"><name pos:start="113:36" pos:end="113:38">ret</name></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:25"><expr pos:start="119:21" pos:end="119:24"><name pos:start="119:21" pos:end="119:21">j</name><operator pos:start="119:22" pos:end="119:23">+=</operator><literal type="number" pos:start="119:24" pos:end="119:24">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

<cpp:if pos:start="125:1" pos:end="125:23">#<cpp:directive pos:start="125:2" pos:end="125:3">if</cpp:directive> <expr pos:start="125:5" pos:end="125:23"><name pos:start="125:5" pos:end="125:23">CONFIG_RTSP_DEMUXER</name></expr></cpp:if>

            <if_stmt pos:start="127:13" pos:end="134:0"><if pos:start="127:13" pos:end="134:0">if <condition pos:start="127:16" pos:end="127:53">(<expr pos:start="127:17" pos:end="127:52"><name pos:start="127:17" pos:end="127:27"><name pos:start="127:17" pos:end="127:18">rt</name><operator pos:start="127:19" pos:end="127:20">-&gt;</operator><name pos:start="127:21" pos:end="127:27">rtsp_hd</name></name> <operator pos:start="127:29" pos:end="127:30">&amp;&amp;</operator> <name pos:start="127:32" pos:end="127:35"><name pos:start="127:32" pos:end="127:32">p</name><index pos:start="127:33" pos:end="127:35">[<expr pos:start="127:34" pos:end="127:34"><literal type="number" pos:start="127:34" pos:end="127:34">0</literal></expr>]</index></name><operator pos:start="127:36" pos:end="127:36">.</operator><name pos:start="127:37" pos:end="127:43">revents</name> <operator pos:start="127:45" pos:end="127:45">&amp;</operator> <name pos:start="127:47" pos:end="127:52">POLLIN</name></expr>)</condition> <block pos:start="127:55" pos:end="134:0">{<block_content pos:start="129:17" pos:end="129:45">

                <return pos:start="129:17" pos:end="129:45">return <expr pos:start="129:24" pos:end="129:44"><call pos:start="129:24" pos:end="129:44"><name pos:start="129:24" pos:end="129:41">parse_rtsp_message</name><argument_list pos:start="129:42" pos:end="129:44">(<argument pos:start="129:43" pos:end="129:43"><expr pos:start="129:43" pos:end="129:43"><name pos:start="129:43" pos:end="129:43">s</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <if type="elseif" pos:start="135:11" pos:end="139:9">else if <condition pos:start="135:19" pos:end="135:59">(<expr pos:start="135:20" pos:end="135:58"><name pos:start="135:20" pos:end="135:20">n</name> <operator pos:start="135:22" pos:end="135:23">==</operator> <literal type="number" pos:start="135:25" pos:end="135:25">0</literal> <operator pos:start="135:27" pos:end="135:28">&amp;&amp;</operator> <operator pos:start="135:30" pos:end="135:31">++</operator><name pos:start="135:32" pos:end="135:42">timeout_cnt</name> <operator pos:start="135:44" pos:end="135:45">&gt;=</operator> <name pos:start="135:47" pos:end="135:58">MAX_TIMEOUTS</name></expr>)</condition> <block pos:start="135:61" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:38">

            <return pos:start="137:13" pos:end="137:38">return <expr pos:start="137:20" pos:end="137:37"><call pos:start="137:20" pos:end="137:37"><name pos:start="137:20" pos:end="137:26">AVERROR</name><argument_list pos:start="137:27" pos:end="137:37">(<argument pos:start="137:28" pos:end="137:36"><expr pos:start="137:28" pos:end="137:36"><name pos:start="137:28" pos:end="137:36">ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="139:11" pos:end="141:34">else if <condition pos:start="139:19" pos:end="139:43">(<expr pos:start="139:20" pos:end="139:42"><name pos:start="139:20" pos:end="139:20">n</name> <operator pos:start="139:22" pos:end="139:22">&lt;</operator> <literal type="number" pos:start="139:24" pos:end="139:24">0</literal> <operator pos:start="139:26" pos:end="139:27">&amp;&amp;</operator> <name pos:start="139:29" pos:end="139:33">errno</name> <operator pos:start="139:35" pos:end="139:36">!=</operator> <name pos:start="139:38" pos:end="139:42">EINTR</name></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:34"><block_content pos:start="141:13" pos:end="141:34">

            <return pos:start="141:13" pos:end="141:34">return <expr pos:start="141:20" pos:end="141:33"><call pos:start="141:20" pos:end="141:33"><name pos:start="141:20" pos:end="141:26">AVERROR</name><argument_list pos:start="141:27" pos:end="141:33">(<argument pos:start="141:28" pos:end="141:32"><expr pos:start="141:28" pos:end="141:32"><name pos:start="141:28" pos:end="141:32">errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
