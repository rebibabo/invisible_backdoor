<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6842.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">stellaris_enet_receive</name><parameter_list pos:start="1:35" pos:end="1:81">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:67"><decl pos:start="1:50" pos:end="1:67"><type pos:start="1:50" pos:end="1:67"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:62">uint8_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">buf</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:80"><decl pos:start="1:70" pos:end="1:80"><type pos:start="1:70" pos:end="1:80"><name pos:start="1:70" pos:end="1:75">size_t</name></type> <name pos:start="1:77" pos:end="1:80">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:29">

    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:60"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:24">stellaris_enet_state</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:27">s</name> <init pos:start="5:29" pos:end="5:60">= <expr pos:start="5:31" pos:end="5:60"><operator pos:start="5:31" pos:end="5:31">(</operator><name pos:start="5:32" pos:end="5:51">stellaris_enet_state</name> <operator pos:start="5:53" pos:end="5:53">*</operator><operator pos:start="5:54" pos:end="5:54">)</operator><name pos:start="5:55" pos:end="5:60">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">crc</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:15"><if pos:start="15:5" pos:end="17:15">if <condition pos:start="15:8" pos:end="15:38">(<expr pos:start="15:9" pos:end="15:37"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:16"><name pos:start="15:10" pos:end="15:10">s</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:16">rctl</name></name> <operator pos:start="15:18" pos:end="15:18">&amp;</operator> <name pos:start="15:20" pos:end="15:31">SE_RCTL_RXEN</name><operator pos:start="15:32" pos:end="15:32">)</operator> <operator pos:start="15:34" pos:end="15:35">==</operator> <literal type="number" pos:start="15:37" pos:end="15:37">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:15"><block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:13">np</name></name> <operator pos:start="19:15" pos:end="19:16">&gt;=</operator> <literal type="number" pos:start="19:18" pos:end="19:19">31</literal></expr>)</condition> <block pos:start="19:22" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><call pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:15">DPRINTF</name><argument_list pos:start="21:16" pos:end="21:35">(<argument pos:start="21:17" pos:end="21:34"><expr pos:start="21:17" pos:end="21:34"><literal type="string" pos:start="21:17" pos:end="21:34">"Packet dropped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><call pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:11">DPRINTF</name><argument_list pos:start="29:12" pos:end="29:45">(<argument pos:start="29:13" pos:end="29:38"><expr pos:start="29:13" pos:end="29:38"><literal type="string" pos:start="29:13" pos:end="29:38">"Received packet len=%d\n"</literal></expr></argument>, <argument pos:start="29:41" pos:end="29:44"><expr pos:start="29:41" pos:end="29:44"><name pos:start="29:41" pos:end="29:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:5">n</name> <operator pos:start="31:7" pos:end="31:7">=</operator> <name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:22">next_packet</name></name> <operator pos:start="31:24" pos:end="31:24">+</operator> <name pos:start="31:26" pos:end="31:30"><name pos:start="31:26" pos:end="31:26">s</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:30">np</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:16"><if pos:start="33:5" pos:end="35:16">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:9">n</name> <operator pos:start="33:11" pos:end="33:12">&gt;=</operator> <literal type="number" pos:start="33:14" pos:end="33:15">31</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:16"><block_content pos:start="35:9" pos:end="35:16">

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:9">n</name> <operator pos:start="35:11" pos:end="35:12">-=</operator> <literal type="number" pos:start="35:14" pos:end="35:15">31</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:12"><expr pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:9"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:9">np</name></name><operator pos:start="37:10" pos:end="37:11">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:28"><expr pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:9">rx</name><index pos:start="41:10" pos:end="41:12">[<expr pos:start="41:11" pos:end="41:11"><name pos:start="41:11" pos:end="41:11">n</name></expr>]</index></name><operator pos:start="41:13" pos:end="41:13">.</operator><name pos:start="41:14" pos:end="41:16">len</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <name pos:start="41:20" pos:end="41:23">size</name> <operator pos:start="41:25" pos:end="41:25">+</operator> <literal type="number" pos:start="41:27" pos:end="41:27">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:5">p</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <name pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:13">rx</name><index pos:start="43:14" pos:end="43:16">[<expr pos:start="43:15" pos:end="43:15"><name pos:start="43:15" pos:end="43:15">n</name></expr>]</index></name><operator pos:start="43:17" pos:end="43:17">.</operator><name pos:start="43:18" pos:end="43:21">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:24"><expr pos:start="45:5" pos:end="45:23"><operator pos:start="45:5" pos:end="45:5">*</operator><operator pos:start="45:6" pos:end="45:6">(</operator><name pos:start="45:7" pos:end="45:7">p</name><operator pos:start="45:8" pos:end="45:9">++</operator><operator pos:start="45:10" pos:end="45:10">)</operator> <operator pos:start="45:12" pos:end="45:12">=</operator> <operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:18">size</name> <operator pos:start="45:20" pos:end="45:20">+</operator> <literal type="number" pos:start="45:22" pos:end="45:22">6</literal><operator pos:start="45:23" pos:end="45:23">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><operator pos:start="47:5" pos:end="47:5">*</operator><operator pos:start="47:6" pos:end="47:6">(</operator><name pos:start="47:7" pos:end="47:7">p</name><operator pos:start="47:8" pos:end="47:9">++</operator><operator pos:start="47:10" pos:end="47:10">)</operator> <operator pos:start="47:12" pos:end="47:12">=</operator> <operator pos:start="47:14" pos:end="47:14">(</operator><name pos:start="47:15" pos:end="47:18">size</name> <operator pos:start="47:20" pos:end="47:20">+</operator> <literal type="number" pos:start="47:22" pos:end="47:22">6</literal><operator pos:start="47:23" pos:end="47:23">)</operator> <operator pos:start="47:25" pos:end="47:26">&gt;&gt;</operator> <literal type="number" pos:start="47:28" pos:end="47:28">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><call pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:10">memcpy</name> <argument_list pos:start="49:12" pos:end="49:25">(<argument pos:start="49:13" pos:end="49:13"><expr pos:start="49:13" pos:end="49:13"><name pos:start="49:13" pos:end="49:13">p</name></expr></argument>, <argument pos:start="49:16" pos:end="49:18"><expr pos:start="49:16" pos:end="49:18"><name pos:start="49:16" pos:end="49:18">buf</name></expr></argument>, <argument pos:start="49:21" pos:end="49:24"><expr pos:start="49:21" pos:end="49:24"><name pos:start="49:21" pos:end="49:24">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:14"><expr pos:start="51:5" pos:end="51:13"><name pos:start="51:5" pos:end="51:5">p</name> <operator pos:start="51:7" pos:end="51:8">+=</operator> <name pos:start="51:10" pos:end="51:13">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:7">crc</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:30"><name pos:start="53:11" pos:end="53:15">crc32</name><argument_list pos:start="53:16" pos:end="53:30">(<argument pos:start="53:17" pos:end="53:18"><expr pos:start="53:17" pos:end="53:18"><operator pos:start="53:17" pos:end="53:17">~</operator><literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr></argument>, <argument pos:start="53:21" pos:end="53:23"><expr pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:23">buf</name></expr></argument>, <argument pos:start="53:26" pos:end="53:29"><expr pos:start="53:26" pos:end="53:29"><name pos:start="53:26" pos:end="53:29">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:17"><expr pos:start="55:5" pos:end="55:16"><operator pos:start="55:5" pos:end="55:5">*</operator><operator pos:start="55:6" pos:end="55:6">(</operator><name pos:start="55:7" pos:end="55:7">p</name><operator pos:start="55:8" pos:end="55:9">++</operator><operator pos:start="55:10" pos:end="55:10">)</operator> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:16">crc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><operator pos:start="57:5" pos:end="57:5">*</operator><operator pos:start="57:6" pos:end="57:6">(</operator><name pos:start="57:7" pos:end="57:7">p</name><operator pos:start="57:8" pos:end="57:9">++</operator><operator pos:start="57:10" pos:end="57:10">)</operator> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:16">crc</name> <operator pos:start="57:18" pos:end="57:19">&gt;&gt;</operator> <literal type="number" pos:start="57:21" pos:end="57:21">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:23"><expr pos:start="59:5" pos:end="59:22"><operator pos:start="59:5" pos:end="59:5">*</operator><operator pos:start="59:6" pos:end="59:6">(</operator><name pos:start="59:7" pos:end="59:7">p</name><operator pos:start="59:8" pos:end="59:9">++</operator><operator pos:start="59:10" pos:end="59:10">)</operator> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:16">crc</name> <operator pos:start="59:18" pos:end="59:19">&gt;&gt;</operator> <literal type="number" pos:start="59:21" pos:end="59:22">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:23"><expr pos:start="61:5" pos:end="61:22"><operator pos:start="61:5" pos:end="61:5">*</operator><operator pos:start="61:6" pos:end="61:6">(</operator><name pos:start="61:7" pos:end="61:7">p</name><operator pos:start="61:8" pos:end="61:9">++</operator><operator pos:start="61:10" pos:end="61:10">)</operator> <operator pos:start="61:12" pos:end="61:12">=</operator> <name pos:start="61:14" pos:end="61:16">crc</name> <operator pos:start="61:18" pos:end="61:19">&gt;&gt;</operator> <literal type="number" pos:start="61:21" pos:end="61:22">24</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="63:54">/* Clear the remaining bytes in the last word.  */</comment>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:24">(<expr pos:start="65:9" pos:end="65:23"><operator pos:start="65:9" pos:end="65:9">(</operator><name pos:start="65:10" pos:end="65:13">size</name> <operator pos:start="65:15" pos:end="65:15">&amp;</operator> <literal type="number" pos:start="65:17" pos:end="65:17">3</literal><operator pos:start="65:18" pos:end="65:18">)</operator> <operator pos:start="65:20" pos:end="65:21">!=</operator> <literal type="number" pos:start="65:23" pos:end="65:23">2</literal></expr>)</condition> <block pos:start="65:26" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:37">

        <expr_stmt pos:start="67:9" pos:end="67:37"><expr pos:start="67:9" pos:end="67:36"><call pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:14">memset</name><argument_list pos:start="67:15" pos:end="67:36">(<argument pos:start="67:16" pos:end="67:16"><expr pos:start="67:16" pos:end="67:16"><name pos:start="67:16" pos:end="67:16">p</name></expr></argument>, <argument pos:start="67:19" pos:end="67:19"><expr pos:start="67:19" pos:end="67:19"><literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr></argument>, <argument pos:start="67:22" pos:end="67:35"><expr pos:start="67:22" pos:end="67:35"><operator pos:start="67:22" pos:end="67:22">(</operator><literal type="number" pos:start="67:23" pos:end="67:25">6</literal> <operator pos:start="67:25" pos:end="67:25">-</operator> <name pos:start="67:27" pos:end="67:30">size</name><operator pos:start="67:31" pos:end="67:31">)</operator> <operator pos:start="67:33" pos:end="67:33">&amp;</operator> <literal type="number" pos:start="67:35" pos:end="67:35">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:24"><expr pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:10"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:10">ris</name></name> <operator pos:start="73:12" pos:end="73:13">|=</operator> <name pos:start="73:15" pos:end="73:23">SE_INT_RX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><call pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:25">stellaris_enet_update</name><argument_list pos:start="75:26" pos:end="75:28">(<argument pos:start="75:27" pos:end="75:27"><expr pos:start="75:27" pos:end="75:27"><name pos:start="75:27" pos:end="75:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
