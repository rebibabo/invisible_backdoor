<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/761.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">set_context_opts</name><parameter_list pos:start="1:22" pos:end="1:75">(<parameter pos:start="1:23" pos:end="1:31"><decl pos:start="1:23" pos:end="1:31"><type pos:start="1:23" pos:end="1:31"><name pos:start="1:23" pos:end="1:26">void</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">ctx</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:47"><decl pos:start="1:34" pos:end="1:47"><type pos:start="1:34" pos:end="1:47"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:47">opts_ctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:58"><decl pos:start="1:50" pos:end="1:58"><type pos:start="1:50" pos:end="1:58"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:58">flags</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:74"><decl pos:start="1:61" pos:end="1:74"><type pos:start="1:61" pos:end="1:74"><name pos:start="1:61" pos:end="1:67">AVCodec</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:74">codec</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:18">priv_ctx</name><init pos:start="7:19" pos:end="7:23">=<expr pos:start="7:20" pos:end="7:23"><name pos:start="7:20" pos:end="7:23">NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="9:5" pos:end="29:5"><if pos:start="9:5" pos:end="19:5">if<condition pos:start="9:7" pos:end="9:64">(<expr pos:start="9:8" pos:end="9:63"><operator pos:start="9:8" pos:end="9:8">!</operator><call pos:start="9:9" pos:end="9:63"><name pos:start="9:9" pos:end="9:14">strcmp</name><argument_list pos:start="9:15" pos:end="9:63">(<argument pos:start="9:16" pos:end="9:31"><expr pos:start="9:16" pos:end="9:31"><literal type="string" pos:start="9:16" pos:end="9:31">"AVCodecContext"</literal></expr></argument>, <argument pos:start="9:34" pos:end="9:62"><expr pos:start="9:34" pos:end="9:62"><operator pos:start="9:34" pos:end="9:34">(</operator><operator pos:start="9:35" pos:end="9:35">*</operator><operator pos:start="9:36" pos:end="9:36">(</operator><name pos:start="9:37" pos:end="9:43">AVClass</name><operator pos:start="9:44" pos:end="9:44">*</operator><operator pos:start="9:45" pos:end="9:45">*</operator><operator pos:start="9:46" pos:end="9:46">)</operator><name pos:start="9:47" pos:end="9:49">ctx</name><operator pos:start="9:50" pos:end="9:50">)</operator><operator pos:start="9:51" pos:end="9:52">-&gt;</operator><name pos:start="9:53" pos:end="9:62">class_name</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="9:65" pos:end="19:5">{<block_content pos:start="11:9" pos:end="17:9">

        <decl_stmt pos:start="11:9" pos:end="11:35"><decl pos:start="11:9" pos:end="11:34"><type pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:22">AVCodecContext</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:29">avctx</name><init pos:start="11:30" pos:end="11:34">= <expr pos:start="11:32" pos:end="11:34"><name pos:start="11:32" pos:end="11:34">ctx</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="13:9" pos:end="17:9"><if pos:start="13:9" pos:end="17:9">if<condition pos:start="13:11" pos:end="13:58">(<expr pos:start="13:12" pos:end="13:57"><name pos:start="13:12" pos:end="13:16">codec</name> <operator pos:start="13:18" pos:end="13:19">&amp;&amp;</operator> <name pos:start="13:21" pos:end="13:37"><name pos:start="13:21" pos:end="13:25">codec</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:37">priv_class</name></name> <operator pos:start="13:39" pos:end="13:40">&amp;&amp;</operator> <name pos:start="13:42" pos:end="13:57"><name pos:start="13:42" pos:end="13:46">avctx</name><operator pos:start="13:47" pos:end="13:48">-&gt;</operator><name pos:start="13:49" pos:end="13:57">priv_data</name></name></expr>)</condition><block pos:start="13:59" pos:end="17:9">{<block_content pos:start="15:13" pos:end="15:39">

            <expr_stmt pos:start="15:13" pos:end="15:39"><expr pos:start="15:13" pos:end="15:38"><name pos:start="15:13" pos:end="15:20">priv_ctx</name><operator pos:start="15:21" pos:end="15:21">=</operator> <name pos:start="15:23" pos:end="15:38"><name pos:start="15:23" pos:end="15:27">avctx</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:38">priv_data</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="19:7" pos:end="29:5">else if <condition pos:start="19:15" pos:end="19:73">(<expr pos:start="19:16" pos:end="19:72"><operator pos:start="19:16" pos:end="19:16">!</operator><call pos:start="19:17" pos:end="19:72"><name pos:start="19:17" pos:end="19:22">strcmp</name><argument_list pos:start="19:23" pos:end="19:72">(<argument pos:start="19:24" pos:end="19:40"><expr pos:start="19:24" pos:end="19:40"><literal type="string" pos:start="19:24" pos:end="19:40">"AVFormatContext"</literal></expr></argument>, <argument pos:start="19:43" pos:end="19:71"><expr pos:start="19:43" pos:end="19:71"><operator pos:start="19:43" pos:end="19:43">(</operator><operator pos:start="19:44" pos:end="19:44">*</operator><operator pos:start="19:45" pos:end="19:45">(</operator><name pos:start="19:46" pos:end="19:52">AVClass</name><operator pos:start="19:53" pos:end="19:53">*</operator><operator pos:start="19:54" pos:end="19:54">*</operator><operator pos:start="19:55" pos:end="19:55">)</operator><name pos:start="19:56" pos:end="19:58">ctx</name><operator pos:start="19:59" pos:end="19:59">)</operator><operator pos:start="19:60" pos:end="19:61">-&gt;</operator><name pos:start="19:62" pos:end="19:71">class_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:75" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:9">

        <decl_stmt pos:start="21:9" pos:end="21:37"><decl pos:start="21:9" pos:end="21:36"><type pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:23">AVFormatContext</name> <modifier pos:start="21:25" pos:end="21:25">*</modifier></type><name pos:start="21:26" pos:end="21:30">avctx</name> <init pos:start="21:32" pos:end="21:36">= <expr pos:start="21:34" pos:end="21:36"><name pos:start="21:34" pos:end="21:36">ctx</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:57">(<expr pos:start="23:13" pos:end="23:56"><name pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:17">avctx</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:26">oformat</name></name> <operator pos:start="23:28" pos:end="23:29">&amp;&amp;</operator> <name pos:start="23:31" pos:end="23:56"><name pos:start="23:31" pos:end="23:35">avctx</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:44">oformat</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:56">priv_class</name></name></expr>)</condition> <block pos:start="23:59" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:40">

            <expr_stmt pos:start="25:13" pos:end="25:40"><expr pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:20">priv_ctx</name> <operator pos:start="25:22" pos:end="25:22">=</operator> <name pos:start="25:24" pos:end="25:39"><name pos:start="25:24" pos:end="25:28">avctx</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:39">priv_data</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="33:5" pos:end="61:5">for<control pos:start="33:8" pos:end="33:35">(<init pos:start="33:9" pos:end="33:12"><expr pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:9">i</name><operator pos:start="33:10" pos:end="33:10">=</operator><literal type="number" pos:start="33:11" pos:end="33:11">0</literal></expr>;</init> <condition pos:start="33:14" pos:end="33:30"><expr pos:start="33:14" pos:end="33:29"><name pos:start="33:14" pos:end="33:14">i</name><operator pos:start="33:15" pos:end="33:15">&lt;</operator><name pos:start="33:16" pos:end="33:29">opt_name_count</name></expr>;</condition> <incr pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:32">i</name><operator pos:start="33:33" pos:end="33:34">++</operator></expr></incr>)</control><block pos:start="33:36" pos:end="61:5">{<block_content pos:start="35:9" pos:end="59:9">

        <decl_stmt pos:start="35:9" pos:end="35:22"><decl pos:start="35:9" pos:end="35:21"><type pos:start="35:9" pos:end="35:12"><name pos:start="35:9" pos:end="35:12">char</name></type> <name pos:start="35:14" pos:end="35:21"><name pos:start="35:14" pos:end="35:16">buf</name><index pos:start="35:17" pos:end="35:21">[<expr pos:start="35:18" pos:end="35:20"><literal type="number" pos:start="35:18" pos:end="35:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:28"><decl pos:start="37:9" pos:end="37:27"><type pos:start="37:9" pos:end="37:24"><specifier pos:start="37:9" pos:end="37:13">const</specifier> <name pos:start="37:15" pos:end="37:22">AVOption</name> <modifier pos:start="37:24" pos:end="37:24">*</modifier></type><name pos:start="37:25" pos:end="37:27">opt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:87"><decl pos:start="39:9" pos:end="39:86"><type pos:start="39:9" pos:end="39:20"><specifier pos:start="39:9" pos:end="39:13">const</specifier> <name pos:start="39:15" pos:end="39:18">char</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:23">str</name><init pos:start="39:24" pos:end="39:86">= <expr pos:start="39:26" pos:end="39:86"><call pos:start="39:26" pos:end="39:86"><name pos:start="39:26" pos:end="39:38">av_get_string</name><argument_list pos:start="39:39" pos:end="39:86">(<argument pos:start="39:40" pos:end="39:47"><expr pos:start="39:40" pos:end="39:47"><name pos:start="39:40" pos:end="39:47">opts_ctx</name></expr></argument>, <argument pos:start="39:50" pos:end="39:61"><expr pos:start="39:50" pos:end="39:61"><name pos:start="39:50" pos:end="39:61"><name pos:start="39:50" pos:end="39:58">opt_names</name><index pos:start="39:59" pos:end="39:61">[<expr pos:start="39:60" pos:end="39:60"><name pos:start="39:60" pos:end="39:60">i</name></expr>]</index></name></expr></argument>, <argument pos:start="39:64" pos:end="39:67"><expr pos:start="39:64" pos:end="39:67"><operator pos:start="39:64" pos:end="39:64">&amp;</operator><name pos:start="39:65" pos:end="39:67">opt</name></expr></argument>, <argument pos:start="39:70" pos:end="39:72"><expr pos:start="39:70" pos:end="39:72"><name pos:start="39:70" pos:end="39:72">buf</name></expr></argument>, <argument pos:start="39:75" pos:end="39:85"><expr pos:start="39:75" pos:end="39:85"><sizeof pos:start="39:75" pos:end="39:85">sizeof<argument_list pos:start="39:81" pos:end="39:85">(<argument pos:start="39:82" pos:end="39:84"><expr pos:start="39:82" pos:end="39:84"><name pos:start="39:82" pos:end="39:84">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="41:9" pos:end="41:93">/* if an option with name opt_names[i] is present in opts_ctx then str is non-NULL */</comment>

        <if_stmt pos:start="43:9" pos:end="45:60"><if pos:start="43:9" pos:end="45:60">if<condition pos:start="43:11" pos:end="43:50">(<expr pos:start="43:12" pos:end="43:49"><name pos:start="43:12" pos:end="43:14">str</name> <operator pos:start="43:16" pos:end="43:17">&amp;&amp;</operator> <operator pos:start="43:19" pos:end="43:19">(</operator><operator pos:start="43:20" pos:end="43:20">(</operator><name pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:23">opt</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:30">flags</name></name> <operator pos:start="43:32" pos:end="43:32">&amp;</operator> <name pos:start="43:34" pos:end="43:38">flags</name><operator pos:start="43:39" pos:end="43:39">)</operator> <operator pos:start="43:41" pos:end="43:42">==</operator> <name pos:start="43:44" pos:end="43:48">flags</name><operator pos:start="43:49" pos:end="43:49">)</operator></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:60"><block_content pos:start="45:13" pos:end="45:60">

            <expr_stmt pos:start="45:13" pos:end="45:60"><expr pos:start="45:13" pos:end="45:59"><call pos:start="45:13" pos:end="45:59"><name pos:start="45:13" pos:end="45:26">av_set_string3</name><argument_list pos:start="45:27" pos:end="45:59">(<argument pos:start="45:28" pos:end="45:30"><expr pos:start="45:28" pos:end="45:30"><name pos:start="45:28" pos:end="45:30">ctx</name></expr></argument>, <argument pos:start="45:33" pos:end="45:44"><expr pos:start="45:33" pos:end="45:44"><name pos:start="45:33" pos:end="45:44"><name pos:start="45:33" pos:end="45:41">opt_names</name><index pos:start="45:42" pos:end="45:44">[<expr pos:start="45:43" pos:end="45:43"><name pos:start="45:43" pos:end="45:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="45:47" pos:end="45:49"><expr pos:start="45:47" pos:end="45:49"><name pos:start="45:47" pos:end="45:49">str</name></expr></argument>, <argument pos:start="45:52" pos:end="45:52"><expr pos:start="45:52" pos:end="45:52"><literal type="number" pos:start="45:52" pos:end="45:52">1</literal></expr></argument>, <argument pos:start="45:55" pos:end="45:58"><expr pos:start="45:55" pos:end="45:58"><name pos:start="45:55" pos:end="45:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="47:9" pos:end="51:65">/* We need to use a differnt system to pass options to the private context because

           it is not known which codec and thus context kind that will be when parsing options

           we thus use opt_values directly instead of opts_ctx */</comment>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if<condition pos:start="53:11" pos:end="53:28">(<expr pos:start="53:12" pos:end="53:27"><operator pos:start="53:12" pos:end="53:12">!</operator><name pos:start="53:13" pos:end="53:15">str</name> <operator pos:start="53:17" pos:end="53:18">&amp;&amp;</operator> <name pos:start="53:20" pos:end="53:27">priv_ctx</name></expr>)</condition> <block pos:start="53:30" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:79">

            <if_stmt pos:start="55:13" pos:end="57:79"><if pos:start="55:13" pos:end="57:79">if <condition pos:start="55:16" pos:end="55:72">(<expr pos:start="55:17" pos:end="55:71"><call pos:start="55:17" pos:end="55:71"><name pos:start="55:17" pos:end="55:27">av_find_opt</name><argument_list pos:start="55:28" pos:end="55:71">(<argument pos:start="55:29" pos:end="55:36"><expr pos:start="55:29" pos:end="55:36"><name pos:start="55:29" pos:end="55:36">priv_ctx</name></expr></argument>, <argument pos:start="55:39" pos:end="55:50"><expr pos:start="55:39" pos:end="55:50"><name pos:start="55:39" pos:end="55:50"><name pos:start="55:39" pos:end="55:47">opt_names</name><index pos:start="55:48" pos:end="55:50">[<expr pos:start="55:49" pos:end="55:49"><name pos:start="55:49" pos:end="55:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="55:53" pos:end="55:56"><expr pos:start="55:53" pos:end="55:56"><name pos:start="55:53" pos:end="55:56">NULL</name></expr></argument>, <argument pos:start="55:59" pos:end="55:63"><expr pos:start="55:59" pos:end="55:63"><name pos:start="55:59" pos:end="55:63">flags</name></expr></argument>, <argument pos:start="55:66" pos:end="55:70"><expr pos:start="55:66" pos:end="55:70"><name pos:start="55:66" pos:end="55:70">flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:79"><block_content pos:start="57:17" pos:end="57:79">

                <expr_stmt pos:start="57:17" pos:end="57:79"><expr pos:start="57:17" pos:end="57:78"><call pos:start="57:17" pos:end="57:78"><name pos:start="57:17" pos:end="57:30">av_set_string3</name><argument_list pos:start="57:31" pos:end="57:78">(<argument pos:start="57:32" pos:end="57:39"><expr pos:start="57:32" pos:end="57:39"><name pos:start="57:32" pos:end="57:39">priv_ctx</name></expr></argument>, <argument pos:start="57:42" pos:end="57:53"><expr pos:start="57:42" pos:end="57:53"><name pos:start="57:42" pos:end="57:53"><name pos:start="57:42" pos:end="57:50">opt_names</name><index pos:start="57:51" pos:end="57:53">[<expr pos:start="57:52" pos:end="57:52"><name pos:start="57:52" pos:end="57:52">i</name></expr>]</index></name></expr></argument>, <argument pos:start="57:56" pos:end="57:68"><expr pos:start="57:56" pos:end="57:68"><name pos:start="57:56" pos:end="57:68"><name pos:start="57:56" pos:end="57:65">opt_values</name><index pos:start="57:66" pos:end="57:68">[<expr pos:start="57:67" pos:end="57:67"><name pos:start="57:67" pos:end="57:67">i</name></expr>]</index></name></expr></argument>, <argument pos:start="57:71" pos:end="57:71"><expr pos:start="57:71" pos:end="57:71"><literal type="number" pos:start="57:71" pos:end="57:71">0</literal></expr></argument>, <argument pos:start="57:74" pos:end="57:77"><expr pos:start="57:74" pos:end="57:77"><name pos:start="57:74" pos:end="57:77">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
