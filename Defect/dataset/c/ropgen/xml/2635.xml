<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2635.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">kbd_write_command</name><parameter_list pos:start="1:30" pos:end="3:58">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:50">hwaddr</name></type> <name pos:start="1:52" pos:end="1:55">addr</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:42"><decl pos:start="3:31" pos:end="3:42"><type pos:start="3:31" pos:end="3:42"><name pos:start="3:31" pos:end="3:38">uint64_t</name></type> <name pos:start="3:40" pos:end="3:42">val</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:52">unsigned</name></type> <name pos:start="3:54" pos:end="3:57">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="169:1">{<block_content pos:start="7:5" pos:end="167:5">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">KBDState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:24">= <expr pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:24">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:53"><expr pos:start="11:5" pos:end="11:52"><call pos:start="11:5" pos:end="11:52"><name pos:start="11:5" pos:end="11:11">DPRINTF</name><argument_list pos:start="11:12" pos:end="11:52">(<argument pos:start="11:13" pos:end="11:46"><expr pos:start="11:13" pos:end="11:46"><literal type="string" pos:start="11:13" pos:end="11:34">"kbd: write cmd=0x%02"</literal> <name pos:start="11:36" pos:end="11:41">PRIx64</name> <literal type="string" pos:start="11:43" pos:end="11:46">"\n"</literal></expr></argument>, <argument pos:start="11:49" pos:end="11:51"><expr pos:start="11:49" pos:end="11:51"><name pos:start="11:49" pos:end="11:51">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="27:7">/* Bits 3-0 of the output port P2 of the keyboard controller may be pulsed

     * low for approximately 6 micro seconds. Bits 3-0 of the KBD_CCMD_PULSE

     * command specify the output port bits to be pulsed.

     * 0: Bit should be pulsed. 1: Bit should not be modified.

     * The only useful version of this command is pulsing bit 0,

     * which does a CPU reset.

     */</comment>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if<condition pos:start="29:7" pos:end="29:66">(<expr pos:start="29:8" pos:end="29:65"><operator pos:start="29:8" pos:end="29:8">(</operator><name pos:start="29:9" pos:end="29:11">val</name> <operator pos:start="29:13" pos:end="29:13">&amp;</operator> <name pos:start="29:15" pos:end="29:37">KBD_CCMD_PULSE_BITS_3_0</name><operator pos:start="29:38" pos:end="29:38">)</operator> <operator pos:start="29:40" pos:end="29:41">==</operator> <name pos:start="29:43" pos:end="29:65">KBD_CCMD_PULSE_BITS_3_0</name></expr>)</condition> <block pos:start="29:68" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:33">

        <if_stmt pos:start="31:9" pos:end="37:33"><if pos:start="31:9" pos:end="33:33">if<condition pos:start="31:11" pos:end="31:22">(<expr pos:start="31:12" pos:end="31:21"><operator pos:start="31:12" pos:end="31:12">!</operator><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:16">val</name> <operator pos:start="31:18" pos:end="31:18">&amp;</operator> <literal type="number" pos:start="31:20" pos:end="31:20">1</literal><operator pos:start="31:21" pos:end="31:21">)</operator></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:33"><block_content pos:start="33:13" pos:end="33:33">

            <expr_stmt pos:start="33:13" pos:end="33:33"><expr pos:start="33:13" pos:end="33:32"><name pos:start="33:13" pos:end="33:15">val</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:32">KBD_CCMD_RESET</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="35:9" pos:end="37:33">else<block type="pseudo" pos:start="37:13" pos:end="37:33"><block_content pos:start="37:13" pos:end="37:33">

            <expr_stmt pos:start="37:13" pos:end="37:33"><expr pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:15">val</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:32">KBD_CCMD_NO_OP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="43:5" pos:end="167:5">switch<condition pos:start="43:11" pos:end="43:15">(<expr pos:start="43:12" pos:end="43:14"><name pos:start="43:12" pos:end="43:14">val</name></expr>)</condition> <block pos:start="43:17" pos:end="167:5">{<block_content pos:start="45:5" pos:end="165:14">

    <case pos:start="45:5" pos:end="45:28">case <expr pos:start="45:10" pos:end="45:27"><name pos:start="45:10" pos:end="45:27">KBD_CCMD_READ_MODE</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><call pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:17">kbd_queue</name><argument_list pos:start="47:18" pos:end="47:32">(<argument pos:start="47:19" pos:end="47:19"><expr pos:start="47:19" pos:end="47:19"><name pos:start="47:19" pos:end="47:19">s</name></expr></argument>, <argument pos:start="47:22" pos:end="47:28"><expr pos:start="47:22" pos:end="47:28"><name pos:start="47:22" pos:end="47:28"><name pos:start="47:22" pos:end="47:22">s</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:28">mode</name></name></expr></argument>, <argument pos:start="47:31" pos:end="47:31"><expr pos:start="47:31" pos:end="47:31"><literal type="number" pos:start="47:31" pos:end="47:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:29">case <expr pos:start="51:10" pos:end="51:28"><name pos:start="51:10" pos:end="51:28">KBD_CCMD_WRITE_MODE</name></expr>:</case>

    <case pos:start="53:5" pos:end="53:29">case <expr pos:start="53:10" pos:end="53:28"><name pos:start="53:10" pos:end="53:28">KBD_CCMD_WRITE_OBUF</name></expr>:</case>

    <case pos:start="55:5" pos:end="55:33">case <expr pos:start="55:10" pos:end="55:32"><name pos:start="55:10" pos:end="55:32">KBD_CCMD_WRITE_AUX_OBUF</name></expr>:</case>

    <case pos:start="57:5" pos:end="57:30">case <expr pos:start="57:10" pos:end="57:29"><name pos:start="57:10" pos:end="57:29">KBD_CCMD_WRITE_MOUSE</name></expr>:</case>

    <case pos:start="59:5" pos:end="59:32">case <expr pos:start="59:10" pos:end="59:31"><name pos:start="59:10" pos:end="59:31">KBD_CCMD_WRITE_OUTPORT</name></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:27"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:20">write_cmd</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:26">val</name></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:32">case <expr pos:start="65:10" pos:end="65:31"><name pos:start="65:10" pos:end="65:31">KBD_CCMD_MOUSE_DISABLE</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:42"><expr pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:15">mode</name></name> <operator pos:start="67:17" pos:end="67:18">|=</operator> <name pos:start="67:20" pos:end="67:41">KBD_MODE_DISABLE_MOUSE</name></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:31">case <expr pos:start="71:10" pos:end="71:30"><name pos:start="71:10" pos:end="71:30">KBD_CCMD_MOUSE_ENABLE</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:43"><expr pos:start="73:9" pos:end="73:42"><name pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:15">mode</name></name> <operator pos:start="73:17" pos:end="73:18">&amp;=</operator> <operator pos:start="73:20" pos:end="73:20">~</operator><name pos:start="73:21" pos:end="73:42">KBD_MODE_DISABLE_MOUSE</name></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:29">case <expr pos:start="77:10" pos:end="77:28"><name pos:start="77:10" pos:end="77:28">KBD_CCMD_TEST_MOUSE</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><call pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:17">kbd_queue</name><argument_list pos:start="79:18" pos:end="79:29">(<argument pos:start="79:19" pos:end="79:19"><expr pos:start="79:19" pos:end="79:19"><name pos:start="79:19" pos:end="79:19">s</name></expr></argument>, <argument pos:start="79:22" pos:end="79:25"><expr pos:start="79:22" pos:end="79:25"><literal type="number" pos:start="79:22" pos:end="79:25">0x00</literal></expr></argument>, <argument pos:start="79:28" pos:end="79:28"><expr pos:start="79:28" pos:end="79:28"><literal type="number" pos:start="79:28" pos:end="79:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:28">case <expr pos:start="83:10" pos:end="83:27"><name pos:start="83:10" pos:end="83:27">KBD_CCMD_SELF_TEST</name></expr>:</case>

        <expr_stmt pos:start="85:9" pos:end="85:39"><expr pos:start="85:9" pos:end="85:38"><name pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:17">status</name></name> <operator pos:start="85:19" pos:end="85:20">|=</operator> <name pos:start="85:22" pos:end="85:38">KBD_STAT_SELFTEST</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><call pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:17">kbd_queue</name><argument_list pos:start="87:18" pos:end="87:29">(<argument pos:start="87:19" pos:end="87:19"><expr pos:start="87:19" pos:end="87:19"><name pos:start="87:19" pos:end="87:19">s</name></expr></argument>, <argument pos:start="87:22" pos:end="87:25"><expr pos:start="87:22" pos:end="87:25"><literal type="number" pos:start="87:22" pos:end="87:25">0x55</literal></expr></argument>, <argument pos:start="87:28" pos:end="87:28"><expr pos:start="87:28" pos:end="87:28"><literal type="number" pos:start="87:28" pos:end="87:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:27">case <expr pos:start="91:10" pos:end="91:26"><name pos:start="91:10" pos:end="91:26">KBD_CCMD_KBD_TEST</name></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:30"><expr pos:start="93:9" pos:end="93:29"><call pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:17">kbd_queue</name><argument_list pos:start="93:18" pos:end="93:29">(<argument pos:start="93:19" pos:end="93:19"><expr pos:start="93:19" pos:end="93:19"><name pos:start="93:19" pos:end="93:19">s</name></expr></argument>, <argument pos:start="93:22" pos:end="93:25"><expr pos:start="93:22" pos:end="93:25"><literal type="number" pos:start="93:22" pos:end="93:25">0x00</literal></expr></argument>, <argument pos:start="93:28" pos:end="93:28"><expr pos:start="93:28" pos:end="93:28"><literal type="number" pos:start="93:28" pos:end="93:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:30">case <expr pos:start="97:10" pos:end="97:29"><name pos:start="97:10" pos:end="97:29">KBD_CCMD_KBD_DISABLE</name></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:40"><expr pos:start="99:9" pos:end="99:39"><name pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:15">mode</name></name> <operator pos:start="99:17" pos:end="99:18">|=</operator> <name pos:start="99:20" pos:end="99:39">KBD_MODE_DISABLE_KBD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:26"><expr pos:start="101:9" pos:end="101:25"><call pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:22">kbd_update_irq</name><argument_list pos:start="101:23" pos:end="101:25">(<argument pos:start="101:24" pos:end="101:24"><expr pos:start="101:24" pos:end="101:24"><name pos:start="101:24" pos:end="101:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <case pos:start="105:5" pos:end="105:29">case <expr pos:start="105:10" pos:end="105:28"><name pos:start="105:10" pos:end="105:28">KBD_CCMD_KBD_ENABLE</name></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:41"><expr pos:start="107:9" pos:end="107:40"><name pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:15">mode</name></name> <operator pos:start="107:17" pos:end="107:18">&amp;=</operator> <operator pos:start="107:20" pos:end="107:20">~</operator><name pos:start="107:21" pos:end="107:40">KBD_MODE_DISABLE_KBD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:26"><expr pos:start="109:9" pos:end="109:25"><call pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:22">kbd_update_irq</name><argument_list pos:start="109:23" pos:end="109:25">(<argument pos:start="109:24" pos:end="109:24"><expr pos:start="109:24" pos:end="109:24"><name pos:start="109:24" pos:end="109:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:30">case <expr pos:start="113:10" pos:end="113:29"><name pos:start="113:10" pos:end="113:29">KBD_CCMD_READ_INPORT</name></expr>:</case>

        <expr_stmt pos:start="115:9" pos:end="115:30"><expr pos:start="115:9" pos:end="115:29"><call pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:17">kbd_queue</name><argument_list pos:start="115:18" pos:end="115:29">(<argument pos:start="115:19" pos:end="115:19"><expr pos:start="115:19" pos:end="115:19"><name pos:start="115:19" pos:end="115:19">s</name></expr></argument>, <argument pos:start="115:22" pos:end="115:25"><expr pos:start="115:22" pos:end="115:25"><literal type="number" pos:start="115:22" pos:end="115:25">0x80</literal></expr></argument>, <argument pos:start="115:28" pos:end="115:28"><expr pos:start="115:28" pos:end="115:28"><literal type="number" pos:start="115:28" pos:end="115:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:31">case <expr pos:start="119:10" pos:end="119:30"><name pos:start="119:10" pos:end="119:30">KBD_CCMD_READ_OUTPORT</name></expr>:</case>

        <expr_stmt pos:start="121:9" pos:end="121:36"><expr pos:start="121:9" pos:end="121:35"><call pos:start="121:9" pos:end="121:35"><name pos:start="121:9" pos:end="121:17">kbd_queue</name><argument_list pos:start="121:18" pos:end="121:35">(<argument pos:start="121:19" pos:end="121:19"><expr pos:start="121:19" pos:end="121:19"><name pos:start="121:19" pos:end="121:19">s</name></expr></argument>, <argument pos:start="121:22" pos:end="121:31"><expr pos:start="121:22" pos:end="121:31"><name pos:start="121:22" pos:end="121:31"><name pos:start="121:22" pos:end="121:22">s</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:31">outport</name></name></expr></argument>, <argument pos:start="121:34" pos:end="121:34"><expr pos:start="121:34" pos:end="121:34"><literal type="number" pos:start="121:34" pos:end="121:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <case pos:start="125:5" pos:end="125:29">case <expr pos:start="125:10" pos:end="125:28"><name pos:start="125:10" pos:end="125:28">KBD_CCMD_ENABLE_A20</name></expr>:</case>

        <if_stmt pos:start="127:9" pos:end="131:9"><if pos:start="127:9" pos:end="131:9">if <condition pos:start="127:12" pos:end="127:23">(<expr pos:start="127:13" pos:end="127:22"><name pos:start="127:13" pos:end="127:22"><name pos:start="127:13" pos:end="127:13">s</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:22">a20_out</name></name></expr>)</condition> <block pos:start="127:25" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:40">

            <expr_stmt pos:start="129:13" pos:end="129:40"><expr pos:start="129:13" pos:end="129:39"><call pos:start="129:13" pos:end="129:39"><name pos:start="129:13" pos:end="129:26">qemu_irq_raise</name><argument_list pos:start="129:27" pos:end="129:39">(<argument pos:start="129:28" pos:end="129:38"><expr pos:start="129:28" pos:end="129:38"><operator pos:start="129:28" pos:end="129:28">*</operator><name pos:start="129:29" pos:end="129:38"><name pos:start="129:29" pos:end="129:29">s</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:38">a20_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:34"><expr pos:start="133:9" pos:end="133:33"><name pos:start="133:9" pos:end="133:18"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:18">outport</name></name> <operator pos:start="133:20" pos:end="133:21">|=</operator> <name pos:start="133:23" pos:end="133:33">KBD_OUT_A20</name></expr>;</expr_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:30">case <expr pos:start="137:10" pos:end="137:29"><name pos:start="137:10" pos:end="137:29">KBD_CCMD_DISABLE_A20</name></expr>:</case>

        <if_stmt pos:start="139:9" pos:end="143:9"><if pos:start="139:9" pos:end="143:9">if <condition pos:start="139:12" pos:end="139:23">(<expr pos:start="139:13" pos:end="139:22"><name pos:start="139:13" pos:end="139:22"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:22">a20_out</name></name></expr>)</condition> <block pos:start="139:25" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:40">

            <expr_stmt pos:start="141:13" pos:end="141:40"><expr pos:start="141:13" pos:end="141:39"><call pos:start="141:13" pos:end="141:39"><name pos:start="141:13" pos:end="141:26">qemu_irq_lower</name><argument_list pos:start="141:27" pos:end="141:39">(<argument pos:start="141:28" pos:end="141:38"><expr pos:start="141:28" pos:end="141:38"><operator pos:start="141:28" pos:end="141:28">*</operator><name pos:start="141:29" pos:end="141:38"><name pos:start="141:29" pos:end="141:29">s</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:38">a20_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:35"><expr pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:18"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:18">outport</name></name> <operator pos:start="145:20" pos:end="145:21">&amp;=</operator> <operator pos:start="145:23" pos:end="145:23">~</operator><name pos:start="145:24" pos:end="145:34">KBD_OUT_A20</name></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:24">case <expr pos:start="149:10" pos:end="149:23"><name pos:start="149:10" pos:end="149:23">KBD_CCMD_RESET</name></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:36"><expr pos:start="151:9" pos:end="151:35"><call pos:start="151:9" pos:end="151:35"><name pos:start="151:9" pos:end="151:33">qemu_system_reset_request</name><argument_list pos:start="151:34" pos:end="151:35">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:24">case <expr pos:start="155:10" pos:end="155:23"><name pos:start="155:10" pos:end="155:23">KBD_CCMD_NO_OP</name></expr>:</case>

        <comment type="block" pos:start="157:9" pos:end="157:25">/* ignore that */</comment>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    <default pos:start="161:5" pos:end="161:12">default:</default>

        <expr_stmt pos:start="163:9" pos:end="163:77"><expr pos:start="163:9" pos:end="163:76"><call pos:start="163:9" pos:end="163:76"><name pos:start="163:9" pos:end="163:15">fprintf</name><argument_list pos:start="163:16" pos:end="163:76">(<argument pos:start="163:17" pos:end="163:22"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:22">stderr</name></expr></argument>, <argument pos:start="163:25" pos:end="163:65"><expr pos:start="163:25" pos:end="163:65"><literal type="string" pos:start="163:25" pos:end="163:65">"qemu: unsupported keyboard cmd=0x%02x\n"</literal></expr></argument>, <argument pos:start="163:68" pos:end="163:75"><expr pos:start="163:68" pos:end="163:75"><operator pos:start="163:68" pos:end="163:68">(</operator><name pos:start="163:69" pos:end="163:71">int</name><operator pos:start="163:72" pos:end="163:72">)</operator><name pos:start="163:73" pos:end="163:75">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
