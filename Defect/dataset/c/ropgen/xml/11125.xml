<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11125.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">ide_init_drive</name><parameter_list pos:start="1:19" pos:end="9:33">(<parameter pos:start="1:20" pos:end="1:30"><decl pos:start="1:20" pos:end="1:30"><type pos:start="1:20" pos:end="1:30"><name pos:start="1:20" pos:end="1:27">IDEState</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:30">s</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:71"><decl pos:start="1:55" pos:end="1:71"><type pos:start="1:55" pos:end="1:71"><name pos:start="1:55" pos:end="1:66">IDEDriveKind</name></type> <name pos:start="1:68" pos:end="1:71">kind</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:38"><decl pos:start="3:20" pos:end="3:38"><type pos:start="3:20" pos:end="3:38"><specifier pos:start="3:20" pos:end="3:24">const</specifier> <name pos:start="3:26" pos:end="3:29">char</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:38">version</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><specifier pos:start="3:41" pos:end="3:45">const</specifier> <name pos:start="3:47" pos:end="3:50">char</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:58">serial</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:77"><decl pos:start="3:61" pos:end="3:77"><type pos:start="3:61" pos:end="3:77"><specifier pos:start="3:61" pos:end="3:65">const</specifier> <name pos:start="3:67" pos:end="3:70">char</name> <modifier pos:start="3:72" pos:end="3:72">*</modifier></type><name pos:start="3:73" pos:end="3:77">model</name></decl></parameter>,

                   <parameter pos:start="5:20" pos:end="5:31"><decl pos:start="5:20" pos:end="5:31"><type pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:27">uint64_t</name></type> <name pos:start="5:29" pos:end="5:31">wwn</name></decl></parameter>,

                   <parameter pos:start="7:20" pos:end="7:37"><decl pos:start="7:20" pos:end="7:37"><type pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:27">uint32_t</name></type> <name pos:start="7:29" pos:end="7:37">cylinders</name></decl></parameter>, <parameter pos:start="7:40" pos:end="7:53"><decl pos:start="7:40" pos:end="7:53"><type pos:start="7:40" pos:end="7:53"><name pos:start="7:40" pos:end="7:47">uint32_t</name></type> <name pos:start="7:49" pos:end="7:53">heads</name></decl></parameter>, <parameter pos:start="7:56" pos:end="7:68"><decl pos:start="7:56" pos:end="7:68"><type pos:start="7:56" pos:end="7:68"><name pos:start="7:56" pos:end="7:63">uint32_t</name></type> <name pos:start="7:65" pos:end="7:68">secs</name></decl></parameter>,

                   <parameter pos:start="9:20" pos:end="9:32"><decl pos:start="9:20" pos:end="9:32"><type pos:start="9:20" pos:end="9:32"><name pos:start="9:20" pos:end="9:22">int</name></type> <name pos:start="9:24" pos:end="9:32">chs_trans</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="161:1">{<block_content pos:start="13:5" pos:end="159:13">

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:23">nb_sectors</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:9">bs</name></name> <operator pos:start="17:11" pos:end="17:11">=</operator> <name pos:start="17:13" pos:end="17:14">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:25"><expr pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:17">drive_kind</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <name pos:start="19:21" pos:end="19:24">kind</name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><call pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:21">bdrv_get_geometry</name><argument_list pos:start="23:22" pos:end="23:38">(<argument pos:start="23:23" pos:end="23:24"><expr pos:start="23:23" pos:end="23:24"><name pos:start="23:23" pos:end="23:24">bs</name></expr></argument>, <argument pos:start="23:27" pos:end="23:37"><expr pos:start="23:27" pos:end="23:37"><operator pos:start="23:27" pos:end="23:27">&amp;</operator><name pos:start="23:28" pos:end="23:37">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:43">(<expr pos:start="25:9" pos:end="25:42"><name pos:start="25:9" pos:end="25:36"><name pos:start="25:9" pos:end="25:17">cylinders</name> <argument_list type="generic" pos:start="25:19" pos:end="25:36">&lt; <argument pos:start="25:21" pos:end="25:34"><expr pos:start="25:21" pos:end="25:34"><literal type="number" pos:start="25:21" pos:end="25:21">1</literal> <operator pos:start="25:23" pos:end="25:24">||</operator> <name pos:start="25:26" pos:end="25:34">cylinders</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="25:38" pos:end="25:42">16383</literal></expr>)</condition> <block pos:start="25:45" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:57"><expr pos:start="27:9" pos:end="27:56"><call pos:start="27:9" pos:end="27:56"><name pos:start="27:9" pos:end="27:20">error_report</name><argument_list pos:start="27:21" pos:end="27:56">(<argument pos:start="27:22" pos:end="27:55"><expr pos:start="27:22" pos:end="27:55"><literal type="string" pos:start="27:22" pos:end="27:55">"cyls must be between 1 and 16383"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:32">(<expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:13">heads</name> <argument_list type="generic" pos:start="33:15" pos:end="33:28">&lt; <argument pos:start="33:17" pos:end="33:26"><expr pos:start="33:17" pos:end="33:26"><literal type="number" pos:start="33:17" pos:end="33:17">1</literal> <operator pos:start="33:19" pos:end="33:20">||</operator> <name pos:start="33:22" pos:end="33:26">heads</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="33:30" pos:end="33:31">16</literal></expr>)</condition> <block pos:start="33:34" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:55"><expr pos:start="35:9" pos:end="35:54"><call pos:start="35:9" pos:end="35:54"><name pos:start="35:9" pos:end="35:20">error_report</name><argument_list pos:start="35:21" pos:end="35:54">(<argument pos:start="35:22" pos:end="35:53"><expr pos:start="35:22" pos:end="35:53"><literal type="string" pos:start="35:22" pos:end="35:53">"heads must be between 1 and 16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:30">(<expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:12">secs</name> <argument_list type="generic" pos:start="41:14" pos:end="41:26">&lt; <argument pos:start="41:16" pos:end="41:24"><expr pos:start="41:16" pos:end="41:24"><literal type="number" pos:start="41:16" pos:end="41:16">1</literal> <operator pos:start="41:18" pos:end="41:19">||</operator> <name pos:start="41:21" pos:end="41:24">secs</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="41:28" pos:end="41:29">63</literal></expr>)</condition> <block pos:start="41:32" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:54"><expr pos:start="43:9" pos:end="43:53"><call pos:start="43:9" pos:end="43:53"><name pos:start="43:9" pos:end="43:20">error_report</name><argument_list pos:start="43:21" pos:end="43:53">(<argument pos:start="43:22" pos:end="43:52"><expr pos:start="43:22" pos:end="43:52"><literal type="string" pos:start="43:22" pos:end="43:52">"secs must be between 1 and 63"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:16">cylinders</name></name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:28">cylinders</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:21"><expr pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:12">heads</name></name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:20">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:22"><expr pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:14">sectors</name></name> <operator pos:start="53:16" pos:end="53:16">=</operator> <name pos:start="53:18" pos:end="53:21">secs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:29"><expr pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:16">chs_trans</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:28">chs_trans</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:17">nb_sectors</name></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:30">nb_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:17"><expr pos:start="59:5" pos:end="59:16"><name pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:10">wwn</name></name> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:16">wwn</name></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="63:27">/* The SMART values should be preserved across power cycles

       but they aren't.  */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:20">smart_enabled</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <literal type="number" pos:start="65:24" pos:end="65:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:26"><expr pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:21"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:21">smart_autosave</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <literal type="number" pos:start="67:25" pos:end="67:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:24"><expr pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:19"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:19">smart_errors</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <literal type="number" pos:start="69:23" pos:end="69:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:32"><expr pos:start="71:5" pos:end="71:31"><name pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:27">smart_selftest_count</name></name> <operator pos:start="71:29" pos:end="71:29">=</operator> <literal type="number" pos:start="71:31" pos:end="71:31">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="97:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:23">(<expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:12">kind</name> <operator pos:start="73:14" pos:end="73:15">==</operator> <name pos:start="73:17" pos:end="73:22">IDE_CD</name></expr>)</condition> <block pos:start="73:25" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:44">

        <expr_stmt pos:start="75:9" pos:end="75:51"><expr pos:start="75:9" pos:end="75:50"><call pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:24">bdrv_set_dev_ops</name><argument_list pos:start="75:25" pos:end="75:50">(<argument pos:start="75:26" pos:end="75:27"><expr pos:start="75:26" pos:end="75:27"><name pos:start="75:26" pos:end="75:27">bs</name></expr></argument>, <argument pos:start="75:30" pos:end="75:46"><expr pos:start="75:30" pos:end="75:46"><operator pos:start="75:30" pos:end="75:30">&amp;</operator><name pos:start="75:31" pos:end="75:46">ide_cd_block_ops</name></expr></argument>, <argument pos:start="75:49" pos:end="75:49"><expr pos:start="75:49" pos:end="75:49"><name pos:start="75:49" pos:end="75:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:44"><expr pos:start="77:9" pos:end="77:43"><call pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:33">bdrv_set_buffer_alignment</name><argument_list pos:start="77:34" pos:end="77:43">(<argument pos:start="77:35" pos:end="77:36"><expr pos:start="77:35" pos:end="77:36"><name pos:start="77:35" pos:end="77:36">bs</name></expr></argument>, <argument pos:start="77:39" pos:end="77:42"><expr pos:start="77:39" pos:end="77:42"><literal type="number" pos:start="77:39" pos:end="77:42">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="79:7" pos:end="97:5">else <block pos:start="79:12" pos:end="97:5">{<block_content pos:start="81:9" pos:end="95:9">

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:37">(<expr pos:start="81:13" pos:end="81:36"><operator pos:start="81:13" pos:end="81:13">!</operator><call pos:start="81:14" pos:end="81:36"><name pos:start="81:14" pos:end="81:29">bdrv_is_inserted</name><argument_list pos:start="81:30" pos:end="81:36">(<argument pos:start="81:31" pos:end="81:35"><expr pos:start="81:31" pos:end="81:35"><name pos:start="81:31" pos:end="81:35"><name pos:start="81:31" pos:end="81:31">s</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:35">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:39" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:22">

            <expr_stmt pos:start="83:13" pos:end="83:67"><expr pos:start="83:13" pos:end="83:66"><call pos:start="83:13" pos:end="83:66"><name pos:start="83:13" pos:end="83:24">error_report</name><argument_list pos:start="83:25" pos:end="83:66">(<argument pos:start="83:26" pos:end="83:65"><expr pos:start="83:26" pos:end="83:65"><literal type="string" pos:start="83:26" pos:end="83:65">"Device needs media, but drive is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:22">return <expr pos:start="85:20" pos:end="85:21"><operator pos:start="85:20" pos:end="85:20">-</operator><literal type="number" pos:start="85:21" pos:end="85:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:34">(<expr pos:start="89:13" pos:end="89:33"><call pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:29">bdrv_is_read_only</name><argument_list pos:start="89:30" pos:end="89:33">(<argument pos:start="89:31" pos:end="89:32"><expr pos:start="89:31" pos:end="89:32"><name pos:start="89:31" pos:end="89:32">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:36" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:22">

            <expr_stmt pos:start="91:13" pos:end="91:56"><expr pos:start="91:13" pos:end="91:55"><call pos:start="91:13" pos:end="91:55"><name pos:start="91:13" pos:end="91:24">error_report</name><argument_list pos:start="91:25" pos:end="91:55">(<argument pos:start="91:26" pos:end="91:54"><expr pos:start="91:26" pos:end="91:54"><literal type="string" pos:start="91:26" pos:end="91:54">"Can't use a read-only drive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="99:5" pos:end="109:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:15">(<expr pos:start="99:9" pos:end="99:14"><name pos:start="99:9" pos:end="99:14">serial</name></expr>)</condition> <block pos:start="99:17" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:74">

        <expr_stmt pos:start="101:9" pos:end="101:74"><expr pos:start="101:9" pos:end="101:73"><call pos:start="101:9" pos:end="101:73"><name pos:start="101:9" pos:end="101:15">pstrcpy</name><argument_list pos:start="101:16" pos:end="101:73">(<argument pos:start="101:17" pos:end="101:35"><expr pos:start="101:17" pos:end="101:35"><name pos:start="101:17" pos:end="101:35"><name pos:start="101:17" pos:end="101:17">s</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:35">drive_serial_str</name></name></expr></argument>, <argument pos:start="101:38" pos:end="101:64"><expr pos:start="101:38" pos:end="101:64"><sizeof pos:start="101:38" pos:end="101:64">sizeof<argument_list pos:start="101:44" pos:end="101:64">(<argument pos:start="101:45" pos:end="101:63"><expr pos:start="101:45" pos:end="101:63"><name pos:start="101:45" pos:end="101:63"><name pos:start="101:45" pos:end="101:45">s</name><operator pos:start="101:46" pos:end="101:47">-&gt;</operator><name pos:start="101:48" pos:end="101:63">drive_serial_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="101:67" pos:end="101:72"><expr pos:start="101:67" pos:end="101:72"><name pos:start="101:67" pos:end="101:72">serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="109:5">else <block pos:start="103:12" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:44">

        <expr_stmt pos:start="105:9" pos:end="107:44"><expr pos:start="105:9" pos:end="107:43"><call pos:start="105:9" pos:end="107:43"><name pos:start="105:9" pos:end="105:16">snprintf</name><argument_list pos:start="105:17" pos:end="107:43">(<argument pos:start="105:18" pos:end="105:36"><expr pos:start="105:18" pos:end="105:36"><name pos:start="105:18" pos:end="105:36"><name pos:start="105:18" pos:end="105:18">s</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:36">drive_serial_str</name></name></expr></argument>, <argument pos:start="105:39" pos:end="105:65"><expr pos:start="105:39" pos:end="105:65"><sizeof pos:start="105:39" pos:end="105:65">sizeof<argument_list pos:start="105:45" pos:end="105:65">(<argument pos:start="105:46" pos:end="105:64"><expr pos:start="105:46" pos:end="105:64"><name pos:start="105:46" pos:end="105:64"><name pos:start="105:46" pos:end="105:46">s</name><operator pos:start="105:47" pos:end="105:48">-&gt;</operator><name pos:start="105:49" pos:end="105:64">drive_serial_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="107:18" pos:end="107:25"><expr pos:start="107:18" pos:end="107:25"><literal type="string" pos:start="107:18" pos:end="107:25">"QM%05d"</literal></expr></argument>, <argument pos:start="107:28" pos:end="107:42"><expr pos:start="107:28" pos:end="107:42"><name pos:start="107:28" pos:end="107:42"><name pos:start="107:28" pos:end="107:28">s</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:42">drive_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="111:5" pos:end="139:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:14">(<expr pos:start="111:9" pos:end="111:13"><name pos:start="111:9" pos:end="111:13">model</name></expr>)</condition> <block pos:start="111:16" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:71">

        <expr_stmt pos:start="113:9" pos:end="113:71"><expr pos:start="113:9" pos:end="113:70"><call pos:start="113:9" pos:end="113:70"><name pos:start="113:9" pos:end="113:15">pstrcpy</name><argument_list pos:start="113:16" pos:end="113:70">(<argument pos:start="113:17" pos:end="113:34"><expr pos:start="113:17" pos:end="113:34"><name pos:start="113:17" pos:end="113:34"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:34">drive_model_str</name></name></expr></argument>, <argument pos:start="113:37" pos:end="113:62"><expr pos:start="113:37" pos:end="113:62"><sizeof pos:start="113:37" pos:end="113:62">sizeof<argument_list pos:start="113:43" pos:end="113:62">(<argument pos:start="113:44" pos:end="113:61"><expr pos:start="113:44" pos:end="113:61"><name pos:start="113:44" pos:end="113:61"><name pos:start="113:44" pos:end="113:44">s</name><operator pos:start="113:45" pos:end="113:46">-&gt;</operator><name pos:start="113:47" pos:end="113:61">drive_model_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="113:65" pos:end="113:69"><expr pos:start="113:65" pos:end="113:69"><name pos:start="113:65" pos:end="113:69">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="139:5">else <block pos:start="115:12" pos:end="139:5">{<block_content pos:start="117:9" pos:end="137:9">

        <switch pos:start="117:9" pos:end="137:9">switch <condition pos:start="117:16" pos:end="117:21">(<expr pos:start="117:17" pos:end="117:20"><name pos:start="117:17" pos:end="117:20">kind</name></expr>)</condition> <block pos:start="117:23" pos:end="137:9">{<block_content pos:start="119:9" pos:end="135:18">

        <case pos:start="119:9" pos:end="119:20">case <expr pos:start="119:14" pos:end="119:19"><name pos:start="119:14" pos:end="119:19">IDE_CD</name></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:55"><expr pos:start="121:13" pos:end="121:54"><call pos:start="121:13" pos:end="121:54"><name pos:start="121:13" pos:end="121:18">strcpy</name><argument_list pos:start="121:19" pos:end="121:54">(<argument pos:start="121:20" pos:end="121:37"><expr pos:start="121:20" pos:end="121:37"><name pos:start="121:20" pos:end="121:37"><name pos:start="121:20" pos:end="121:20">s</name><operator pos:start="121:21" pos:end="121:22">-&gt;</operator><name pos:start="121:23" pos:end="121:37">drive_model_str</name></name></expr></argument>, <argument pos:start="121:40" pos:end="121:53"><expr pos:start="121:40" pos:end="121:53"><literal type="string" pos:start="121:40" pos:end="121:53">"QEMU DVD-ROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <case pos:start="125:9" pos:end="125:23">case <expr pos:start="125:14" pos:end="125:22"><name pos:start="125:14" pos:end="125:22">IDE_CFATA</name></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:58"><expr pos:start="127:13" pos:end="127:57"><call pos:start="127:13" pos:end="127:57"><name pos:start="127:13" pos:end="127:18">strcpy</name><argument_list pos:start="127:19" pos:end="127:57">(<argument pos:start="127:20" pos:end="127:37"><expr pos:start="127:20" pos:end="127:37"><name pos:start="127:20" pos:end="127:37"><name pos:start="127:20" pos:end="127:20">s</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:37">drive_model_str</name></name></expr></argument>, <argument pos:start="127:40" pos:end="127:56"><expr pos:start="127:40" pos:end="127:56"><literal type="string" pos:start="127:40" pos:end="127:56">"QEMU MICRODRIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        <default pos:start="131:9" pos:end="131:16">default:</default>

            <expr_stmt pos:start="133:13" pos:end="133:56"><expr pos:start="133:13" pos:end="133:55"><call pos:start="133:13" pos:end="133:55"><name pos:start="133:13" pos:end="133:18">strcpy</name><argument_list pos:start="133:19" pos:end="133:55">(<argument pos:start="133:20" pos:end="133:37"><expr pos:start="133:20" pos:end="133:37"><name pos:start="133:20" pos:end="133:37"><name pos:start="133:20" pos:end="133:20">s</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:37">drive_model_str</name></name></expr></argument>, <argument pos:start="133:40" pos:end="133:54"><expr pos:start="133:40" pos:end="133:54"><literal type="string" pos:start="133:40" pos:end="133:54">"QEMU HARDDISK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="135:13" pos:end="135:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="143:5" pos:end="151:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:16">(<expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:15">version</name></expr>)</condition> <block pos:start="143:18" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:57">

        <expr_stmt pos:start="145:9" pos:end="145:57"><expr pos:start="145:9" pos:end="145:56"><call pos:start="145:9" pos:end="145:56"><name pos:start="145:9" pos:end="145:15">pstrcpy</name><argument_list pos:start="145:16" pos:end="145:56">(<argument pos:start="145:17" pos:end="145:26"><expr pos:start="145:17" pos:end="145:26"><name pos:start="145:17" pos:end="145:26"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:26">version</name></name></expr></argument>, <argument pos:start="145:29" pos:end="145:46"><expr pos:start="145:29" pos:end="145:46"><sizeof pos:start="145:29" pos:end="145:46">sizeof<argument_list pos:start="145:35" pos:end="145:46">(<argument pos:start="145:36" pos:end="145:45"><expr pos:start="145:36" pos:end="145:45"><name pos:start="145:36" pos:end="145:45"><name pos:start="145:36" pos:end="145:36">s</name><operator pos:start="145:37" pos:end="145:38">-&gt;</operator><name pos:start="145:39" pos:end="145:45">version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="145:49" pos:end="145:55"><expr pos:start="145:49" pos:end="145:55"><name pos:start="145:49" pos:end="145:55">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="147:7" pos:end="151:5">else <block pos:start="147:12" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:68">

        <expr_stmt pos:start="149:9" pos:end="149:68"><expr pos:start="149:9" pos:end="149:67"><call pos:start="149:9" pos:end="149:67"><name pos:start="149:9" pos:end="149:15">pstrcpy</name><argument_list pos:start="149:16" pos:end="149:67">(<argument pos:start="149:17" pos:end="149:26"><expr pos:start="149:17" pos:end="149:26"><name pos:start="149:17" pos:end="149:26"><name pos:start="149:17" pos:end="149:17">s</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:26">version</name></name></expr></argument>, <argument pos:start="149:29" pos:end="149:46"><expr pos:start="149:29" pos:end="149:46"><sizeof pos:start="149:29" pos:end="149:46">sizeof<argument_list pos:start="149:35" pos:end="149:46">(<argument pos:start="149:36" pos:end="149:45"><expr pos:start="149:36" pos:end="149:45"><name pos:start="149:36" pos:end="149:45"><name pos:start="149:36" pos:end="149:36">s</name><operator pos:start="149:37" pos:end="149:38">-&gt;</operator><name pos:start="149:39" pos:end="149:45">version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="149:49" pos:end="149:66"><expr pos:start="149:49" pos:end="149:66"><call pos:start="149:49" pos:end="149:66"><name pos:start="149:49" pos:end="149:64">qemu_get_version</name><argument_list pos:start="149:65" pos:end="149:66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:17"><expr pos:start="155:5" pos:end="155:16"><call pos:start="155:5" pos:end="155:16"><name pos:start="155:5" pos:end="155:13">ide_reset</name><argument_list pos:start="155:14" pos:end="155:16">(<argument pos:start="155:15" pos:end="155:15"><expr pos:start="155:15" pos:end="155:15"><name pos:start="155:15" pos:end="155:15">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:29"><expr pos:start="157:5" pos:end="157:28"><call pos:start="157:5" pos:end="157:28"><name pos:start="157:5" pos:end="157:24">bdrv_iostatus_enable</name><argument_list pos:start="157:25" pos:end="157:28">(<argument pos:start="157:26" pos:end="157:27"><expr pos:start="157:26" pos:end="157:27"><name pos:start="157:26" pos:end="157:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
