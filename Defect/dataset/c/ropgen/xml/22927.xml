<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22927.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">shift_data</name><parameter_list pos:start="1:22" pos:end="1:41">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:39"><name pos:start="1:23" pos:end="1:37">AVFormatContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:15">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:26">moov_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">MOVMuxContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">mov</name> <init pos:start="7:24" pos:end="7:37">= <expr pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">pos</name></decl>, <decl pos:start="9:18" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:18" pos:end="9:24">pos_end</name> <init pos:start="9:26" pos:end="9:43">= <expr pos:start="9:28" pos:end="9:43"><call pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:36">avio_tell</name><argument_list pos:start="9:37" pos:end="9:43">(<argument pos:start="9:38" pos:end="9:42"><expr pos:start="9:38" pos:end="9:42"><name pos:start="9:38" pos:end="9:42"><name pos:start="9:38" pos:end="9:38">s</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:42">pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">buf</name></decl>, <decl pos:start="11:19" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:27">read_buf</name><index pos:start="11:28" pos:end="11:30">[<expr pos:start="11:29" pos:end="11:29"><literal type="number" pos:start="11:29" pos:end="11:29">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">read_buf_id</name> <init pos:start="13:21" pos:end="13:23">= <expr pos:start="13:23" pos:end="13:23"><literal type="number" pos:start="13:23" pos:end="13:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:17">read_size</name><index pos:start="15:18" pos:end="15:20">[<expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">AVIOContext</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:24">read_pb</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:41"><if pos:start="21:5" pos:end="23:41">if <condition pos:start="21:8" pos:end="21:42">(<expr pos:start="21:9" pos:end="21:41"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:11">mov</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:18">flags</name></name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <name pos:start="21:22" pos:end="21:41">FF_MOV_FLAG_FRAGMENT</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:41"><block_content pos:start="23:9" pos:end="23:41">

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:17">moov_size</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="23:40"><name pos:start="23:21" pos:end="23:37">compute_sidx_size</name><argument_list pos:start="23:38" pos:end="23:40">(<argument pos:start="23:39" pos:end="23:39"><expr pos:start="23:39" pos:end="23:39"><name pos:start="23:39" pos:end="23:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="25:5" pos:end="27:41">else<block type="pseudo" pos:start="27:9" pos:end="27:41"><block_content pos:start="27:9" pos:end="27:41">

        <expr_stmt pos:start="27:9" pos:end="27:41"><expr pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:17">moov_size</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <call pos:start="27:21" pos:end="27:40"><name pos:start="27:21" pos:end="27:37">compute_moov_size</name><argument_list pos:start="27:38" pos:end="27:40">(<argument pos:start="27:39" pos:end="27:39"><expr pos:start="27:39" pos:end="27:39"><name pos:start="27:39" pos:end="27:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="29:5" pos:end="31:25"><if pos:start="29:5" pos:end="31:25">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:17">moov_size</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:25"><block_content pos:start="31:9" pos:end="31:25">

        <return pos:start="31:9" pos:end="31:25">return <expr pos:start="31:16" pos:end="31:24"><name pos:start="31:16" pos:end="31:24">moov_size</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:7">buf</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:34"><name pos:start="35:11" pos:end="35:19">av_malloc</name><argument_list pos:start="35:20" pos:end="35:34">(<argument pos:start="35:21" pos:end="35:33"><expr pos:start="35:21" pos:end="35:33"><name pos:start="35:21" pos:end="35:29">moov_size</name> <operator pos:start="35:31" pos:end="35:31">*</operator> <literal type="number" pos:start="35:33" pos:end="35:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:31"><if pos:start="37:5" pos:end="39:31">if <condition pos:start="37:8" pos:end="37:13">(<expr pos:start="37:9" pos:end="37:12"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:12">buf</name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:31"><block_content pos:start="39:9" pos:end="39:31">

        <return pos:start="39:9" pos:end="39:31">return <expr pos:start="39:16" pos:end="39:30"><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:30">(<argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:12">read_buf</name><index pos:start="41:13" pos:end="41:15">[<expr pos:start="41:14" pos:end="41:14"><literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>]</index></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:21">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:12">read_buf</name><index pos:start="43:13" pos:end="43:15">[<expr pos:start="43:14" pos:end="43:14"><literal type="number" pos:start="43:14" pos:end="43:14">1</literal></expr>]</index></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:21">buf</name> <operator pos:start="43:23" pos:end="43:23">+</operator> <name pos:start="43:25" pos:end="43:33">moov_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="51:48">/* Shift the data: the AVIO context of the output can only be used for

     * writing, so we re-open the same output, but for reading. It also avoids

     * a read/seek/write/seek back and forth. */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:22"><expr pos:start="53:5" pos:end="53:21"><call pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:14">avio_flush</name><argument_list pos:start="53:15" pos:end="53:21">(<argument pos:start="53:16" pos:end="53:20"><expr pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:16">s</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:20">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:59"><expr pos:start="55:5" pos:end="55:58"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:58"><name pos:start="55:11" pos:end="55:19">avio_open</name><argument_list pos:start="55:20" pos:end="55:58">(<argument pos:start="55:21" pos:end="55:28"><expr pos:start="55:21" pos:end="55:28"><operator pos:start="55:21" pos:end="55:21">&amp;</operator><name pos:start="55:22" pos:end="55:28">read_pb</name></expr></argument>, <argument pos:start="55:31" pos:end="55:41"><expr pos:start="55:31" pos:end="55:41"><name pos:start="55:31" pos:end="55:41"><name pos:start="55:31" pos:end="55:31">s</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:41">filename</name></name></expr></argument>, <argument pos:start="55:44" pos:end="55:57"><expr pos:start="55:44" pos:end="55:57"><name pos:start="55:44" pos:end="55:57">AVIO_FLAG_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>)</condition> <block pos:start="57:18" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:17">

        <expr_stmt pos:start="59:9" pos:end="61:61"><expr pos:start="59:9" pos:end="61:60"><call pos:start="59:9" pos:end="61:60"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="61:60">(<argument pos:start="59:16" pos:end="59:16"><expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">s</name></expr></argument>, <argument pos:start="59:19" pos:end="59:30"><expr pos:start="59:19" pos:end="59:30"><name pos:start="59:19" pos:end="59:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:33" pos:end="61:46"><expr pos:start="59:33" pos:end="61:46"><literal type="string" pos:start="59:33" pos:end="59:71">"Unable to re-open %s output file for "</literal>

               <literal type="string" pos:start="61:16" pos:end="61:46">"the second pass (faststart)\n"</literal></expr></argument>, <argument pos:start="61:49" pos:end="61:59"><expr pos:start="61:49" pos:end="61:59"><name pos:start="61:49" pos:end="61:59"><name pos:start="61:49" pos:end="61:49">s</name><operator pos:start="61:50" pos:end="61:51">-&gt;</operator><name pos:start="61:52" pos:end="61:59">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:17">goto <name pos:start="63:14" pos:end="63:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="71:21">/* mark the end of the shift to up to the last data we wrote, and get ready

     * for writing */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:31"><expr pos:start="73:5" pos:end="73:30"><name pos:start="73:5" pos:end="73:11">pos_end</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:30"><name pos:start="73:15" pos:end="73:23">avio_tell</name><argument_list pos:start="73:24" pos:end="73:30">(<argument pos:start="73:25" pos:end="73:29"><expr pos:start="73:25" pos:end="73:29"><name pos:start="73:25" pos:end="73:29"><name pos:start="73:25" pos:end="73:25">s</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:29">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:69"><expr pos:start="75:5" pos:end="75:68"><call pos:start="75:5" pos:end="75:68"><name pos:start="75:5" pos:end="75:13">avio_seek</name><argument_list pos:start="75:14" pos:end="75:68">(<argument pos:start="75:15" pos:end="75:19"><expr pos:start="75:15" pos:end="75:19"><name pos:start="75:15" pos:end="75:19"><name pos:start="75:15" pos:end="75:15">s</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:19">pb</name></name></expr></argument>, <argument pos:start="75:22" pos:end="75:57"><expr pos:start="75:22" pos:end="75:57"><name pos:start="75:22" pos:end="75:45"><name pos:start="75:22" pos:end="75:24">mov</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:45">reserved_header_pos</name></name> <operator pos:start="75:47" pos:end="75:47">+</operator> <name pos:start="75:49" pos:end="75:57">moov_size</name></expr></argument>, <argument pos:start="75:60" pos:end="75:67"><expr pos:start="75:60" pos:end="75:67"><name pos:start="75:60" pos:end="75:67">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:60">/* start reading at where the new moov will be placed */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:59"><expr pos:start="81:5" pos:end="81:58"><call pos:start="81:5" pos:end="81:58"><name pos:start="81:5" pos:end="81:13">avio_seek</name><argument_list pos:start="81:14" pos:end="81:58">(<argument pos:start="81:15" pos:end="81:21"><expr pos:start="81:15" pos:end="81:21"><name pos:start="81:15" pos:end="81:21">read_pb</name></expr></argument>, <argument pos:start="81:24" pos:end="81:47"><expr pos:start="81:24" pos:end="81:47"><name pos:start="81:24" pos:end="81:47"><name pos:start="81:24" pos:end="81:26">mov</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:47">reserved_header_pos</name></name></expr></argument>, <argument pos:start="81:50" pos:end="81:57"><expr pos:start="81:50" pos:end="81:57"><name pos:start="81:50" pos:end="81:57">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="94:0"><expr pos:start="83:5" pos:end="83:28"><name pos:start="83:5" pos:end="83:7">pos</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:28"><name pos:start="83:11" pos:end="83:19">avio_tell</name><argument_list pos:start="83:20" pos:end="83:28">(<argument pos:start="83:21" pos:end="83:27"><expr pos:start="83:21" pos:end="83:27"><name pos:start="83:21" pos:end="83:27">read_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:define pos:start="87:1" pos:end="93:11">#<cpp:directive pos:start="87:2" pos:end="87:7">define</cpp:directive> <cpp:macro pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:18">READ_BLOCK</name></cpp:macro> <cpp:value pos:start="87:20" pos:end="93:11">do {                                                             \

    read_size[read_buf_id] = avio_read(read_pb, read_buf[read_buf_id], moov_size);  \

    read_buf_id ^= 1;                                                               \

} while (0)</cpp:value></cpp:define>



    <comment type="block" pos:start="97:5" pos:end="97:50">/* shift data by chunk of at most moov_size */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:15"><expr pos:start="99:5" pos:end="99:14"><name pos:start="99:5" pos:end="99:14">READ_BLOCK</name></expr>;</expr_stmt>

    <do pos:start="101:5" pos:end="117:28">do <block pos:start="101:8" pos:end="117:5">{<block_content pos:start="103:9" pos:end="115:17">

        <decl_stmt pos:start="103:9" pos:end="103:14"><decl pos:start="103:9" pos:end="103:13"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:13">n</name></decl>;</decl_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:19"><expr pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:18">READ_BLOCK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:35"><expr pos:start="107:9" pos:end="107:34"><name pos:start="107:9" pos:end="107:9">n</name> <operator pos:start="107:11" pos:end="107:11">=</operator> <name pos:start="107:13" pos:end="107:34"><name pos:start="107:13" pos:end="107:21">read_size</name><index pos:start="107:22" pos:end="107:34">[<expr pos:start="107:23" pos:end="107:33"><name pos:start="107:23" pos:end="107:33">read_buf_id</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="111:18"><if pos:start="109:9" pos:end="111:18">if <condition pos:start="109:12" pos:end="109:19">(<expr pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:13">n</name> <operator pos:start="109:15" pos:end="109:16">&lt;=</operator> <literal type="number" pos:start="109:18" pos:end="109:18">0</literal></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:18"><block_content pos:start="111:13" pos:end="111:18">

            <break pos:start="111:13" pos:end="111:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:52"><expr pos:start="113:9" pos:end="113:51"><call pos:start="113:9" pos:end="113:51"><name pos:start="113:9" pos:end="113:18">avio_write</name><argument_list pos:start="113:19" pos:end="113:51">(<argument pos:start="113:20" pos:end="113:24"><expr pos:start="113:20" pos:end="113:24"><name pos:start="113:20" pos:end="113:24"><name pos:start="113:20" pos:end="113:20">s</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:24">pb</name></name></expr></argument>, <argument pos:start="113:27" pos:end="113:47"><expr pos:start="113:27" pos:end="113:47"><name pos:start="113:27" pos:end="113:47"><name pos:start="113:27" pos:end="113:34">read_buf</name><index pos:start="113:35" pos:end="113:47">[<expr pos:start="113:36" pos:end="113:46"><name pos:start="113:36" pos:end="113:46">read_buf_id</name></expr>]</index></name></expr></argument>, <argument pos:start="113:50" pos:end="113:50"><expr pos:start="113:50" pos:end="113:50"><name pos:start="113:50" pos:end="113:50">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:17"><expr pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:11">pos</name> <operator pos:start="115:13" pos:end="115:14">+=</operator> <name pos:start="115:16" pos:end="115:16">n</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="117:13" pos:end="117:27">(<expr pos:start="117:14" pos:end="117:26"><name pos:start="117:14" pos:end="117:16">pos</name> <operator pos:start="117:18" pos:end="117:18">&lt;</operator> <name pos:start="117:20" pos:end="117:26">pos_end</name></expr>)</condition>;</do>

    <expr_stmt pos:start="119:5" pos:end="119:24"><expr pos:start="119:5" pos:end="119:23"><call pos:start="119:5" pos:end="119:23"><name pos:start="119:5" pos:end="119:14">avio_close</name><argument_list pos:start="119:15" pos:end="119:23">(<argument pos:start="119:16" pos:end="119:22"><expr pos:start="119:16" pos:end="119:22"><name pos:start="119:16" pos:end="119:22">read_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="123:1" pos:end="123:4"><name pos:start="123:1" pos:end="123:3">end</name>:</label>

    <expr_stmt pos:start="125:5" pos:end="125:17"><expr pos:start="125:5" pos:end="125:16"><call pos:start="125:5" pos:end="125:16"><name pos:start="125:5" pos:end="125:11">av_free</name><argument_list pos:start="125:12" pos:end="125:16">(<argument pos:start="125:13" pos:end="125:15"><expr pos:start="125:13" pos:end="125:15"><name pos:start="125:13" pos:end="125:15">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="127:5" pos:end="127:15">return <expr pos:start="127:12" pos:end="127:14"><name pos:start="127:12" pos:end="127:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
