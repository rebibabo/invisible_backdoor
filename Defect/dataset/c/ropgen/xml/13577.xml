<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13577.c" pos:tabs="8"><function pos:start="1:1" pos:end="291:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">test_qga_file_ops</name><parameter_list pos:start="1:30" pos:end="1:48">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:43">gconstpointer</name></type> <name pos:start="1:45" pos:end="1:47">fix</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="291:1">{<block_content pos:start="5:5" pos:end="289:16">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:23"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:21">TestFixture</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:30">fixture</name> <init pos:start="5:32" pos:end="5:36">= <expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">fix</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:23"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:18">unsigned</name> <name pos:start="7:20" pos:end="7:23">char</name></type> <name pos:start="7:25" pos:end="7:36"><name pos:start="7:25" pos:end="7:34">helloworld</name><index pos:start="7:35" pos:end="7:36">[]</index></name> <init pos:start="7:38" pos:end="7:55">= <expr pos:start="7:40" pos:end="7:55"><literal type="string" pos:start="7:40" pos:end="7:55">"Hello World!\n"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">b64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">gchar</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">cmd</name></decl>, <decl pos:start="11:17" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:11"><modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">path</name></decl>, <decl pos:start="11:24" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:11"><modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:27">enc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">dec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">QDict</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:14">ret</name></decl>, <decl pos:start="15:17" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:11"><modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:14">id</name></decl>, <decl pos:start="17:17" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:17" pos:end="17:19">eof</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">gsize</name></type> <name pos:start="19:11" pos:end="19:15">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">FILE</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">char</name></type> <name pos:start="23:10" pos:end="23:17"><name pos:start="23:10" pos:end="23:12">tmp</name><index pos:start="23:13" pos:end="23:17">[<expr pos:start="23:14" pos:end="23:16"><literal type="number" pos:start="23:14" pos:end="23:16">100</literal></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:14">/* open */</comment>

    <expr_stmt pos:start="29:5" pos:end="31:68"><expr pos:start="29:5" pos:end="31:67"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="31:67"><name pos:start="29:11" pos:end="29:16">qmp_fd</name><argument_list pos:start="29:17" pos:end="31:67">(<argument pos:start="29:18" pos:end="29:28"><expr pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:24">fixture</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:28">fd</name></name></expr></argument>, <argument pos:start="29:31" pos:end="31:66"><expr pos:start="29:31" pos:end="31:66"><literal type="string" pos:start="29:31" pos:end="29:62">"{'execute': 'guest-file-open',"</literal>

                 <literal type="string" pos:start="31:18" pos:end="31:66">" 'arguments': { 'path': 'foo', 'mode': 'w+' } }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:26"><expr pos:start="33:5" pos:end="33:25"><call pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:20">g_assert_nonnull</name><argument_list pos:start="33:21" pos:end="33:25">(<argument pos:start="33:22" pos:end="33:24"><expr pos:start="33:22" pos:end="33:24"><name pos:start="33:22" pos:end="33:24">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:29"><expr pos:start="35:5" pos:end="35:28"><call pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:23">qmp_assert_no_error</name><argument_list pos:start="35:24" pos:end="35:28">(<argument pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:6">id</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:37"><name pos:start="37:10" pos:end="37:22">qdict_get_int</name><argument_list pos:start="37:23" pos:end="37:37">(<argument pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">ret</name></expr></argument>, <argument pos:start="37:29" pos:end="37:36"><expr pos:start="37:29" pos:end="37:36"><literal type="string" pos:start="37:29" pos:end="37:36">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><call pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:11">QDECREF</name><argument_list pos:start="39:12" pos:end="39:16">(<argument pos:start="39:13" pos:end="39:15"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:58"><expr pos:start="43:5" pos:end="43:57"><name pos:start="43:5" pos:end="43:7">enc</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:57"><name pos:start="43:11" pos:end="43:25">g_base64_encode</name><argument_list pos:start="43:26" pos:end="43:57">(<argument pos:start="43:27" pos:end="43:36"><expr pos:start="43:27" pos:end="43:36"><name pos:start="43:27" pos:end="43:36">helloworld</name></expr></argument>, <argument pos:start="43:39" pos:end="43:56"><expr pos:start="43:39" pos:end="43:56"><sizeof pos:start="43:39" pos:end="43:56">sizeof<argument_list pos:start="43:45" pos:end="43:56">(<argument pos:start="43:46" pos:end="43:55"><expr pos:start="43:46" pos:end="43:55"><name pos:start="43:46" pos:end="43:55">helloworld</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:15">/* write */</comment>

    <expr_stmt pos:start="47:5" pos:end="51:59"><expr pos:start="47:5" pos:end="51:58"><name pos:start="47:5" pos:end="47:7">cmd</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="51:58"><name pos:start="47:11" pos:end="47:25">g_strdup_printf</name><argument_list pos:start="47:26" pos:end="51:58">(<argument pos:start="47:27" pos:end="51:48"><expr pos:start="47:27" pos:end="51:48"><literal type="string" pos:start="47:27" pos:end="47:59">"{'execute': 'guest-file-write',"</literal>

                          <literal type="string" pos:start="49:27" pos:end="49:55">" 'arguments': { 'handle': %"</literal> <name pos:start="49:57" pos:end="49:62">PRId64</name> <literal type="string" pos:start="49:64" pos:end="49:66">","</literal>

                          <literal type="string" pos:start="51:27" pos:end="51:48">" 'buf-b64': '%s' } }"</literal></expr></argument>, <argument pos:start="51:51" pos:end="51:52"><expr pos:start="51:51" pos:end="51:52"><name pos:start="51:51" pos:end="51:52">id</name></expr></argument>, <argument pos:start="51:55" pos:end="51:57"><expr pos:start="51:55" pos:end="51:57"><name pos:start="51:55" pos:end="51:57">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:34"><name pos:start="53:11" pos:end="53:16">qmp_fd</name><argument_list pos:start="53:17" pos:end="53:34">(<argument pos:start="53:18" pos:end="53:28"><expr pos:start="53:18" pos:end="53:28"><name pos:start="53:18" pos:end="53:28"><name pos:start="53:18" pos:end="53:24">fixture</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:28">fd</name></name></expr></argument>, <argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><call pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:20">g_assert_nonnull</name><argument_list pos:start="55:21" pos:end="55:25">(<argument pos:start="55:22" pos:end="55:24"><expr pos:start="55:22" pos:end="55:24"><name pos:start="55:22" pos:end="55:24">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:29"><expr pos:start="57:5" pos:end="57:28"><call pos:start="57:5" pos:end="57:28"><name pos:start="57:5" pos:end="57:23">qmp_assert_no_error</name><argument_list pos:start="57:24" pos:end="57:28">(<argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:41"><expr pos:start="61:5" pos:end="61:40"><name pos:start="61:5" pos:end="61:7">val</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:40"><name pos:start="61:11" pos:end="61:25">qdict_get_qdict</name><argument_list pos:start="61:26" pos:end="61:40">(<argument pos:start="61:27" pos:end="61:29"><expr pos:start="61:27" pos:end="61:29"><name pos:start="61:27" pos:end="61:29">ret</name></expr></argument>, <argument pos:start="61:32" pos:end="61:39"><expr pos:start="61:32" pos:end="61:39"><literal type="string" pos:start="61:32" pos:end="61:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:40"><expr pos:start="63:5" pos:end="63:39"><name pos:start="63:5" pos:end="63:9">count</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:39"><name pos:start="63:13" pos:end="63:25">qdict_get_int</name><argument_list pos:start="63:26" pos:end="63:39">(<argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">val</name></expr></argument>, <argument pos:start="63:32" pos:end="63:38"><expr pos:start="63:32" pos:end="63:38"><literal type="string" pos:start="63:32" pos:end="63:38">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:37"><expr pos:start="65:5" pos:end="65:36"><name pos:start="65:5" pos:end="65:7">eof</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:36"><name pos:start="65:11" pos:end="65:24">qdict_get_bool</name><argument_list pos:start="65:25" pos:end="65:36">(<argument pos:start="65:26" pos:end="65:28"><expr pos:start="65:26" pos:end="65:28"><name pos:start="65:26" pos:end="65:28">val</name></expr></argument>, <argument pos:start="65:31" pos:end="65:35"><expr pos:start="65:31" pos:end="65:35"><literal type="string" pos:start="65:31" pos:end="65:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:51"><expr pos:start="67:5" pos:end="67:50"><call pos:start="67:5" pos:end="67:50"><name pos:start="67:5" pos:end="67:19">g_assert_cmpint</name><argument_list pos:start="67:20" pos:end="67:50">(<argument pos:start="67:21" pos:end="67:25"><expr pos:start="67:21" pos:end="67:25"><name pos:start="67:21" pos:end="67:25">count</name></expr></argument>, <argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><operator pos:start="67:28" pos:end="67:29">==</operator></expr></argument>, <argument pos:start="67:32" pos:end="67:49"><expr pos:start="67:32" pos:end="67:49"><sizeof pos:start="67:32" pos:end="67:49">sizeof<argument_list pos:start="67:38" pos:end="67:49">(<argument pos:start="67:39" pos:end="67:48"><expr pos:start="67:39" pos:end="67:48"><name pos:start="67:39" pos:end="67:48">helloworld</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:32"><expr pos:start="69:5" pos:end="69:31"><call pos:start="69:5" pos:end="69:31"><name pos:start="69:5" pos:end="69:19">g_assert_cmpint</name><argument_list pos:start="69:20" pos:end="69:31">(<argument pos:start="69:21" pos:end="69:23"><expr pos:start="69:21" pos:end="69:23"><name pos:start="69:21" pos:end="69:23">eof</name></expr></argument>, <argument pos:start="69:26" pos:end="69:27"><expr pos:start="69:26" pos:end="69:27"><operator pos:start="69:26" pos:end="69:27">==</operator></expr></argument>, <argument pos:start="69:30" pos:end="69:30"><expr pos:start="69:30" pos:end="69:30"><literal type="number" pos:start="69:30" pos:end="69:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:17"><expr pos:start="71:5" pos:end="71:16"><call pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:11">QDECREF</name><argument_list pos:start="71:12" pos:end="71:16">(<argument pos:start="71:13" pos:end="71:15"><expr pos:start="71:13" pos:end="71:15"><name pos:start="71:13" pos:end="71:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:16"><expr pos:start="73:5" pos:end="73:15"><call pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:15">(<argument pos:start="73:12" pos:end="73:14"><expr pos:start="73:12" pos:end="73:14"><name pos:start="73:12" pos:end="73:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:15">/* flush */</comment>

    <expr_stmt pos:start="79:5" pos:end="83:30"><expr pos:start="79:5" pos:end="83:29"><name pos:start="79:5" pos:end="79:7">cmd</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="83:29"><name pos:start="79:11" pos:end="79:25">g_strdup_printf</name><argument_list pos:start="79:26" pos:end="83:29">(<argument pos:start="79:27" pos:end="81:67"><expr pos:start="79:27" pos:end="81:67"><literal type="string" pos:start="79:27" pos:end="79:59">"{'execute': 'guest-file-flush',"</literal>

                          <literal type="string" pos:start="81:27" pos:end="81:54">" 'arguments': {'handle': %"</literal> <name pos:start="81:56" pos:end="81:61">PRId64</name> <literal type="string" pos:start="81:63" pos:end="81:67">"} }"</literal></expr></argument>,

                          <argument pos:start="83:27" pos:end="83:28"><expr pos:start="83:27" pos:end="83:28"><name pos:start="83:27" pos:end="83:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:35"><expr pos:start="85:5" pos:end="85:34"><name pos:start="85:5" pos:end="85:7">ret</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:34"><name pos:start="85:11" pos:end="85:16">qmp_fd</name><argument_list pos:start="85:17" pos:end="85:34">(<argument pos:start="85:18" pos:end="85:28"><expr pos:start="85:18" pos:end="85:28"><name pos:start="85:18" pos:end="85:28"><name pos:start="85:18" pos:end="85:24">fixture</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:28">fd</name></name></expr></argument>, <argument pos:start="85:31" pos:end="85:33"><expr pos:start="85:31" pos:end="85:33"><name pos:start="85:31" pos:end="85:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:17"><expr pos:start="87:5" pos:end="87:16"><call pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:11">QDECREF</name><argument_list pos:start="87:12" pos:end="87:16">(<argument pos:start="87:13" pos:end="87:15"><expr pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:16"><expr pos:start="89:5" pos:end="89:15"><call pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:10">g_free</name><argument_list pos:start="89:11" pos:end="89:15">(<argument pos:start="89:12" pos:end="89:14"><expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:15">/* close */</comment>

    <expr_stmt pos:start="95:5" pos:end="99:30"><expr pos:start="95:5" pos:end="99:29"><name pos:start="95:5" pos:end="95:7">cmd</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="99:29"><name pos:start="95:11" pos:end="95:25">g_strdup_printf</name><argument_list pos:start="95:26" pos:end="99:29">(<argument pos:start="95:27" pos:end="97:67"><expr pos:start="95:27" pos:end="97:67"><literal type="string" pos:start="95:27" pos:end="95:59">"{'execute': 'guest-file-close',"</literal>

                          <literal type="string" pos:start="97:27" pos:end="97:54">" 'arguments': {'handle': %"</literal> <name pos:start="97:56" pos:end="97:61">PRId64</name> <literal type="string" pos:start="97:63" pos:end="97:67">"} }"</literal></expr></argument>,

                          <argument pos:start="99:27" pos:end="99:28"><expr pos:start="99:27" pos:end="99:28"><name pos:start="99:27" pos:end="99:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:35"><expr pos:start="101:5" pos:end="101:34"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:34"><name pos:start="101:11" pos:end="101:16">qmp_fd</name><argument_list pos:start="101:17" pos:end="101:34">(<argument pos:start="101:18" pos:end="101:28"><expr pos:start="101:18" pos:end="101:28"><name pos:start="101:18" pos:end="101:28"><name pos:start="101:18" pos:end="101:24">fixture</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:28">fd</name></name></expr></argument>, <argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:17"><expr pos:start="103:5" pos:end="103:16"><call pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:11">QDECREF</name><argument_list pos:start="103:12" pos:end="103:16">(<argument pos:start="103:13" pos:end="103:15"><expr pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:16"><expr pos:start="105:5" pos:end="105:15"><call pos:start="105:5" pos:end="105:15"><name pos:start="105:5" pos:end="105:10">g_free</name><argument_list pos:start="105:11" pos:end="105:15">(<argument pos:start="105:12" pos:end="105:14"><expr pos:start="105:12" pos:end="105:14"><name pos:start="105:12" pos:end="105:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:23">/* check content */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:60"><expr pos:start="111:5" pos:end="111:59"><name pos:start="111:5" pos:end="111:8">path</name> <operator pos:start="111:10" pos:end="111:10">=</operator> <call pos:start="111:12" pos:end="111:59"><name pos:start="111:12" pos:end="111:27">g_build_filename</name><argument_list pos:start="111:28" pos:end="111:59">(<argument pos:start="111:29" pos:end="111:45"><expr pos:start="111:29" pos:end="111:45"><name pos:start="111:29" pos:end="111:45"><name pos:start="111:29" pos:end="111:35">fixture</name><operator pos:start="111:36" pos:end="111:37">-&gt;</operator><name pos:start="111:38" pos:end="111:45">test_dir</name></name></expr></argument>, <argument pos:start="111:48" pos:end="111:52"><expr pos:start="111:48" pos:end="111:52"><literal type="string" pos:start="111:48" pos:end="111:52">"foo"</literal></expr></argument>, <argument pos:start="111:55" pos:end="111:58"><expr pos:start="111:55" pos:end="111:58"><name pos:start="111:55" pos:end="111:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:25"><expr pos:start="113:5" pos:end="113:24"><name pos:start="113:5" pos:end="113:5">f</name> <operator pos:start="113:7" pos:end="113:7">=</operator> <call pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:13">fopen</name><argument_list pos:start="113:14" pos:end="113:24">(<argument pos:start="113:15" pos:end="113:18"><expr pos:start="113:15" pos:end="113:18"><name pos:start="113:15" pos:end="113:18">path</name></expr></argument>, <argument pos:start="113:21" pos:end="113:23"><expr pos:start="113:21" pos:end="113:23"><literal type="string" pos:start="113:21" pos:end="113:23">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:24"><expr pos:start="115:5" pos:end="115:23"><call pos:start="115:5" pos:end="115:23"><name pos:start="115:5" pos:end="115:20">g_assert_nonnull</name><argument_list pos:start="115:21" pos:end="115:23">(<argument pos:start="115:22" pos:end="115:22"><expr pos:start="115:22" pos:end="115:22"><name pos:start="115:22" pos:end="115:22">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:42"><expr pos:start="117:5" pos:end="117:41"><name pos:start="117:5" pos:end="117:9">count</name> <operator pos:start="117:11" pos:end="117:11">=</operator> <call pos:start="117:13" pos:end="117:41"><name pos:start="117:13" pos:end="117:17">fread</name><argument_list pos:start="117:18" pos:end="117:41">(<argument pos:start="117:19" pos:end="117:21"><expr pos:start="117:19" pos:end="117:21"><name pos:start="117:19" pos:end="117:21">tmp</name></expr></argument>, <argument pos:start="117:24" pos:end="117:24"><expr pos:start="117:24" pos:end="117:24"><literal type="number" pos:start="117:24" pos:end="117:24">1</literal></expr></argument>, <argument pos:start="117:27" pos:end="117:37"><expr pos:start="117:27" pos:end="117:37"><sizeof pos:start="117:27" pos:end="117:37">sizeof<argument_list pos:start="117:33" pos:end="117:37">(<argument pos:start="117:34" pos:end="117:36"><expr pos:start="117:34" pos:end="117:36"><name pos:start="117:34" pos:end="117:36">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="117:40" pos:end="117:40"><expr pos:start="117:40" pos:end="117:40"><name pos:start="117:40" pos:end="117:40">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:51"><expr pos:start="119:5" pos:end="119:50"><call pos:start="119:5" pos:end="119:50"><name pos:start="119:5" pos:end="119:19">g_assert_cmpint</name><argument_list pos:start="119:20" pos:end="119:50">(<argument pos:start="119:21" pos:end="119:25"><expr pos:start="119:21" pos:end="119:25"><name pos:start="119:21" pos:end="119:25">count</name></expr></argument>, <argument pos:start="119:28" pos:end="119:29"><expr pos:start="119:28" pos:end="119:29"><operator pos:start="119:28" pos:end="119:29">==</operator></expr></argument>, <argument pos:start="119:32" pos:end="119:49"><expr pos:start="119:32" pos:end="119:49"><sizeof pos:start="119:32" pos:end="119:49">sizeof<argument_list pos:start="119:38" pos:end="119:49">(<argument pos:start="119:39" pos:end="119:48"><expr pos:start="119:39" pos:end="119:48"><name pos:start="119:39" pos:end="119:48">helloworld</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:19"><expr pos:start="121:5" pos:end="121:18"><name pos:start="121:5" pos:end="121:14"><name pos:start="121:5" pos:end="121:7">tmp</name><index pos:start="121:8" pos:end="121:14">[<expr pos:start="121:9" pos:end="121:13"><name pos:start="121:9" pos:end="121:13">count</name></expr>]</index></name> <operator pos:start="121:16" pos:end="121:16">=</operator> <literal type="number" pos:start="121:18" pos:end="121:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:49"><expr pos:start="123:5" pos:end="123:48"><call pos:start="123:5" pos:end="123:48"><name pos:start="123:5" pos:end="123:19">g_assert_cmpstr</name><argument_list pos:start="123:20" pos:end="123:48">(<argument pos:start="123:21" pos:end="123:23"><expr pos:start="123:21" pos:end="123:23"><name pos:start="123:21" pos:end="123:23">tmp</name></expr></argument>, <argument pos:start="123:26" pos:end="123:27"><expr pos:start="123:26" pos:end="123:27"><operator pos:start="123:26" pos:end="123:27">==</operator></expr></argument>, <argument pos:start="123:30" pos:end="123:47"><expr pos:start="123:30" pos:end="123:47"><operator pos:start="123:30" pos:end="123:30">(</operator><name pos:start="123:31" pos:end="123:34">char</name> <operator pos:start="123:36" pos:end="123:36">*</operator><operator pos:start="123:37" pos:end="123:37">)</operator><name pos:start="123:38" pos:end="123:47">helloworld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:14"><expr pos:start="125:5" pos:end="125:13"><call pos:start="125:5" pos:end="125:13"><name pos:start="125:5" pos:end="125:10">fclose</name><argument_list pos:start="125:11" pos:end="125:13">(<argument pos:start="125:12" pos:end="125:12"><expr pos:start="125:12" pos:end="125:12"><name pos:start="125:12" pos:end="125:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:14">/* open */</comment>

    <expr_stmt pos:start="131:5" pos:end="133:67"><expr pos:start="131:5" pos:end="133:66"><name pos:start="131:5" pos:end="131:7">ret</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <call pos:start="131:11" pos:end="133:66"><name pos:start="131:11" pos:end="131:16">qmp_fd</name><argument_list pos:start="131:17" pos:end="133:66">(<argument pos:start="131:18" pos:end="131:28"><expr pos:start="131:18" pos:end="131:28"><name pos:start="131:18" pos:end="131:28"><name pos:start="131:18" pos:end="131:24">fixture</name><operator pos:start="131:25" pos:end="131:26">-&gt;</operator><name pos:start="131:27" pos:end="131:28">fd</name></name></expr></argument>, <argument pos:start="131:31" pos:end="133:65"><expr pos:start="131:31" pos:end="133:65"><literal type="string" pos:start="131:31" pos:end="131:62">"{'execute': 'guest-file-open',"</literal>

                 <literal type="string" pos:start="133:18" pos:end="133:65">" 'arguments': { 'path': 'foo', 'mode': 'r' } }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:26"><expr pos:start="135:5" pos:end="135:25"><call pos:start="135:5" pos:end="135:25"><name pos:start="135:5" pos:end="135:20">g_assert_nonnull</name><argument_list pos:start="135:21" pos:end="135:25">(<argument pos:start="135:22" pos:end="135:24"><expr pos:start="135:22" pos:end="135:24"><name pos:start="135:22" pos:end="135:24">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:29"><expr pos:start="137:5" pos:end="137:28"><call pos:start="137:5" pos:end="137:28"><name pos:start="137:5" pos:end="137:23">qmp_assert_no_error</name><argument_list pos:start="137:24" pos:end="137:28">(<argument pos:start="137:25" pos:end="137:27"><expr pos:start="137:25" pos:end="137:27"><name pos:start="137:25" pos:end="137:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:38"><expr pos:start="139:5" pos:end="139:37"><name pos:start="139:5" pos:end="139:6">id</name> <operator pos:start="139:8" pos:end="139:8">=</operator> <call pos:start="139:10" pos:end="139:37"><name pos:start="139:10" pos:end="139:22">qdict_get_int</name><argument_list pos:start="139:23" pos:end="139:37">(<argument pos:start="139:24" pos:end="139:26"><expr pos:start="139:24" pos:end="139:26"><name pos:start="139:24" pos:end="139:26">ret</name></expr></argument>, <argument pos:start="139:29" pos:end="139:36"><expr pos:start="139:29" pos:end="139:36"><literal type="string" pos:start="139:29" pos:end="139:36">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:17"><expr pos:start="141:5" pos:end="141:16"><call pos:start="141:5" pos:end="141:16"><name pos:start="141:5" pos:end="141:11">QDECREF</name><argument_list pos:start="141:12" pos:end="141:16">(<argument pos:start="141:13" pos:end="141:15"><expr pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:14">/* read */</comment>

    <expr_stmt pos:start="147:5" pos:end="151:30"><expr pos:start="147:5" pos:end="151:29"><name pos:start="147:5" pos:end="147:7">cmd</name> <operator pos:start="147:9" pos:end="147:9">=</operator> <call pos:start="147:11" pos:end="151:29"><name pos:start="147:11" pos:end="147:25">g_strdup_printf</name><argument_list pos:start="147:26" pos:end="151:29">(<argument pos:start="147:27" pos:end="149:68"><expr pos:start="147:27" pos:end="149:68"><literal type="string" pos:start="147:27" pos:end="147:58">"{'execute': 'guest-file-read',"</literal>

                          <literal type="string" pos:start="149:27" pos:end="149:55">" 'arguments': { 'handle': %"</literal> <name pos:start="149:57" pos:end="149:62">PRId64</name> <literal type="string" pos:start="149:64" pos:end="149:68">"} }"</literal></expr></argument>,

                          <argument pos:start="151:27" pos:end="151:28"><expr pos:start="151:27" pos:end="151:28"><name pos:start="151:27" pos:end="151:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:35"><expr pos:start="153:5" pos:end="153:34"><name pos:start="153:5" pos:end="153:7">ret</name> <operator pos:start="153:9" pos:end="153:9">=</operator> <call pos:start="153:11" pos:end="153:34"><name pos:start="153:11" pos:end="153:16">qmp_fd</name><argument_list pos:start="153:17" pos:end="153:34">(<argument pos:start="153:18" pos:end="153:28"><expr pos:start="153:18" pos:end="153:28"><name pos:start="153:18" pos:end="153:28"><name pos:start="153:18" pos:end="153:24">fixture</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:28">fd</name></name></expr></argument>, <argument pos:start="153:31" pos:end="153:33"><expr pos:start="153:31" pos:end="153:33"><name pos:start="153:31" pos:end="153:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:41"><expr pos:start="155:5" pos:end="155:40"><name pos:start="155:5" pos:end="155:7">val</name> <operator pos:start="155:9" pos:end="155:9">=</operator> <call pos:start="155:11" pos:end="155:40"><name pos:start="155:11" pos:end="155:25">qdict_get_qdict</name><argument_list pos:start="155:26" pos:end="155:40">(<argument pos:start="155:27" pos:end="155:29"><expr pos:start="155:27" pos:end="155:29"><name pos:start="155:27" pos:end="155:29">ret</name></expr></argument>, <argument pos:start="155:32" pos:end="155:39"><expr pos:start="155:32" pos:end="155:39"><literal type="string" pos:start="155:32" pos:end="155:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:40"><expr pos:start="157:5" pos:end="157:39"><name pos:start="157:5" pos:end="157:9">count</name> <operator pos:start="157:11" pos:end="157:11">=</operator> <call pos:start="157:13" pos:end="157:39"><name pos:start="157:13" pos:end="157:25">qdict_get_int</name><argument_list pos:start="157:26" pos:end="157:39">(<argument pos:start="157:27" pos:end="157:29"><expr pos:start="157:27" pos:end="157:29"><name pos:start="157:27" pos:end="157:29">val</name></expr></argument>, <argument pos:start="157:32" pos:end="157:38"><expr pos:start="157:32" pos:end="157:38"><literal type="string" pos:start="157:32" pos:end="157:38">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:37"><expr pos:start="159:5" pos:end="159:36"><name pos:start="159:5" pos:end="159:7">eof</name> <operator pos:start="159:9" pos:end="159:9">=</operator> <call pos:start="159:11" pos:end="159:36"><name pos:start="159:11" pos:end="159:24">qdict_get_bool</name><argument_list pos:start="159:25" pos:end="159:36">(<argument pos:start="159:26" pos:end="159:28"><expr pos:start="159:26" pos:end="159:28"><name pos:start="159:26" pos:end="159:28">val</name></expr></argument>, <argument pos:start="159:31" pos:end="159:35"><expr pos:start="159:31" pos:end="159:35"><literal type="string" pos:start="159:31" pos:end="159:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:40"><expr pos:start="161:5" pos:end="161:39"><name pos:start="161:5" pos:end="161:7">b64</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <call pos:start="161:11" pos:end="161:39"><name pos:start="161:11" pos:end="161:23">qdict_get_str</name><argument_list pos:start="161:24" pos:end="161:39">(<argument pos:start="161:25" pos:end="161:27"><expr pos:start="161:25" pos:end="161:27"><name pos:start="161:25" pos:end="161:27">val</name></expr></argument>, <argument pos:start="161:30" pos:end="161:38"><expr pos:start="161:30" pos:end="161:38"><literal type="string" pos:start="161:30" pos:end="161:38">"buf-b64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:51"><expr pos:start="163:5" pos:end="163:50"><call pos:start="163:5" pos:end="163:50"><name pos:start="163:5" pos:end="163:19">g_assert_cmpint</name><argument_list pos:start="163:20" pos:end="163:50">(<argument pos:start="163:21" pos:end="163:25"><expr pos:start="163:21" pos:end="163:25"><name pos:start="163:21" pos:end="163:25">count</name></expr></argument>, <argument pos:start="163:28" pos:end="163:29"><expr pos:start="163:28" pos:end="163:29"><operator pos:start="163:28" pos:end="163:29">==</operator></expr></argument>, <argument pos:start="163:32" pos:end="163:49"><expr pos:start="163:32" pos:end="163:49"><sizeof pos:start="163:32" pos:end="163:49">sizeof<argument_list pos:start="163:38" pos:end="163:49">(<argument pos:start="163:39" pos:end="163:48"><expr pos:start="163:39" pos:end="163:48"><name pos:start="163:39" pos:end="163:48">helloworld</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:18"><expr pos:start="165:5" pos:end="165:17"><call pos:start="165:5" pos:end="165:17"><name pos:start="165:5" pos:end="165:12">g_assert</name><argument_list pos:start="165:13" pos:end="165:17">(<argument pos:start="165:14" pos:end="165:16"><expr pos:start="165:14" pos:end="165:16"><name pos:start="165:14" pos:end="165:16">eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:34"><expr pos:start="167:5" pos:end="167:33"><call pos:start="167:5" pos:end="167:33"><name pos:start="167:5" pos:end="167:19">g_assert_cmpstr</name><argument_list pos:start="167:20" pos:end="167:33">(<argument pos:start="167:21" pos:end="167:23"><expr pos:start="167:21" pos:end="167:23"><name pos:start="167:21" pos:end="167:23">b64</name></expr></argument>, <argument pos:start="167:26" pos:end="167:27"><expr pos:start="167:26" pos:end="167:27"><operator pos:start="167:26" pos:end="167:27">==</operator></expr></argument>, <argument pos:start="167:30" pos:end="167:32"><expr pos:start="167:30" pos:end="167:32"><name pos:start="167:30" pos:end="167:32">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:17"><expr pos:start="171:5" pos:end="171:16"><call pos:start="171:5" pos:end="171:16"><name pos:start="171:5" pos:end="171:11">QDECREF</name><argument_list pos:start="171:12" pos:end="171:16">(<argument pos:start="171:13" pos:end="171:15"><expr pos:start="171:13" pos:end="171:15"><name pos:start="171:13" pos:end="171:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:16"><expr pos:start="173:5" pos:end="173:15"><call pos:start="173:5" pos:end="173:15"><name pos:start="173:5" pos:end="173:10">g_free</name><argument_list pos:start="173:11" pos:end="173:15">(<argument pos:start="173:12" pos:end="173:14"><expr pos:start="173:12" pos:end="173:14"><name pos:start="173:12" pos:end="173:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:16"><expr pos:start="175:5" pos:end="175:15"><call pos:start="175:5" pos:end="175:15"><name pos:start="175:5" pos:end="175:10">g_free</name><argument_list pos:start="175:11" pos:end="175:15">(<argument pos:start="175:12" pos:end="175:14"><expr pos:start="175:12" pos:end="175:14"><name pos:start="175:12" pos:end="175:14">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:18">/* read eof */</comment>

    <expr_stmt pos:start="181:5" pos:end="185:30"><expr pos:start="181:5" pos:end="185:29"><name pos:start="181:5" pos:end="181:7">cmd</name> <operator pos:start="181:9" pos:end="181:9">=</operator> <call pos:start="181:11" pos:end="185:29"><name pos:start="181:11" pos:end="181:25">g_strdup_printf</name><argument_list pos:start="181:26" pos:end="185:29">(<argument pos:start="181:27" pos:end="183:68"><expr pos:start="181:27" pos:end="183:68"><literal type="string" pos:start="181:27" pos:end="181:58">"{'execute': 'guest-file-read',"</literal>

                          <literal type="string" pos:start="183:27" pos:end="183:55">" 'arguments': { 'handle': %"</literal> <name pos:start="183:57" pos:end="183:62">PRId64</name> <literal type="string" pos:start="183:64" pos:end="183:68">"} }"</literal></expr></argument>,

                          <argument pos:start="185:27" pos:end="185:28"><expr pos:start="185:27" pos:end="185:28"><name pos:start="185:27" pos:end="185:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:35"><expr pos:start="187:5" pos:end="187:34"><name pos:start="187:5" pos:end="187:7">ret</name> <operator pos:start="187:9" pos:end="187:9">=</operator> <call pos:start="187:11" pos:end="187:34"><name pos:start="187:11" pos:end="187:16">qmp_fd</name><argument_list pos:start="187:17" pos:end="187:34">(<argument pos:start="187:18" pos:end="187:28"><expr pos:start="187:18" pos:end="187:28"><name pos:start="187:18" pos:end="187:28"><name pos:start="187:18" pos:end="187:24">fixture</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:28">fd</name></name></expr></argument>, <argument pos:start="187:31" pos:end="187:33"><expr pos:start="187:31" pos:end="187:33"><name pos:start="187:31" pos:end="187:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:41"><expr pos:start="189:5" pos:end="189:40"><name pos:start="189:5" pos:end="189:7">val</name> <operator pos:start="189:9" pos:end="189:9">=</operator> <call pos:start="189:11" pos:end="189:40"><name pos:start="189:11" pos:end="189:25">qdict_get_qdict</name><argument_list pos:start="189:26" pos:end="189:40">(<argument pos:start="189:27" pos:end="189:29"><expr pos:start="189:27" pos:end="189:29"><name pos:start="189:27" pos:end="189:29">ret</name></expr></argument>, <argument pos:start="189:32" pos:end="189:39"><expr pos:start="189:32" pos:end="189:39"><literal type="string" pos:start="189:32" pos:end="189:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:40"><expr pos:start="191:5" pos:end="191:39"><name pos:start="191:5" pos:end="191:9">count</name> <operator pos:start="191:11" pos:end="191:11">=</operator> <call pos:start="191:13" pos:end="191:39"><name pos:start="191:13" pos:end="191:25">qdict_get_int</name><argument_list pos:start="191:26" pos:end="191:39">(<argument pos:start="191:27" pos:end="191:29"><expr pos:start="191:27" pos:end="191:29"><name pos:start="191:27" pos:end="191:29">val</name></expr></argument>, <argument pos:start="191:32" pos:end="191:38"><expr pos:start="191:32" pos:end="191:38"><literal type="string" pos:start="191:32" pos:end="191:38">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:37"><expr pos:start="193:5" pos:end="193:36"><name pos:start="193:5" pos:end="193:7">eof</name> <operator pos:start="193:9" pos:end="193:9">=</operator> <call pos:start="193:11" pos:end="193:36"><name pos:start="193:11" pos:end="193:24">qdict_get_bool</name><argument_list pos:start="193:25" pos:end="193:36">(<argument pos:start="193:26" pos:end="193:28"><expr pos:start="193:26" pos:end="193:28"><name pos:start="193:26" pos:end="193:28">val</name></expr></argument>, <argument pos:start="193:31" pos:end="193:35"><expr pos:start="193:31" pos:end="193:35"><literal type="string" pos:start="193:31" pos:end="193:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:40"><expr pos:start="195:5" pos:end="195:39"><name pos:start="195:5" pos:end="195:7">b64</name> <operator pos:start="195:9" pos:end="195:9">=</operator> <call pos:start="195:11" pos:end="195:39"><name pos:start="195:11" pos:end="195:23">qdict_get_str</name><argument_list pos:start="195:24" pos:end="195:39">(<argument pos:start="195:25" pos:end="195:27"><expr pos:start="195:25" pos:end="195:27"><name pos:start="195:25" pos:end="195:27">val</name></expr></argument>, <argument pos:start="195:30" pos:end="195:38"><expr pos:start="195:30" pos:end="195:38"><literal type="string" pos:start="195:30" pos:end="195:38">"buf-b64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:34"><expr pos:start="197:5" pos:end="197:33"><call pos:start="197:5" pos:end="197:33"><name pos:start="197:5" pos:end="197:19">g_assert_cmpint</name><argument_list pos:start="197:20" pos:end="197:33">(<argument pos:start="197:21" pos:end="197:25"><expr pos:start="197:21" pos:end="197:25"><name pos:start="197:21" pos:end="197:25">count</name></expr></argument>, <argument pos:start="197:28" pos:end="197:29"><expr pos:start="197:28" pos:end="197:29"><operator pos:start="197:28" pos:end="197:29">==</operator></expr></argument>, <argument pos:start="197:32" pos:end="197:32"><expr pos:start="197:32" pos:end="197:32"><literal type="number" pos:start="197:32" pos:end="197:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:18"><expr pos:start="199:5" pos:end="199:17"><call pos:start="199:5" pos:end="199:17"><name pos:start="199:5" pos:end="199:12">g_assert</name><argument_list pos:start="199:13" pos:end="199:17">(<argument pos:start="199:14" pos:end="199:16"><expr pos:start="199:14" pos:end="199:16"><name pos:start="199:14" pos:end="199:16">eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:33"><expr pos:start="201:5" pos:end="201:32"><call pos:start="201:5" pos:end="201:32"><name pos:start="201:5" pos:end="201:19">g_assert_cmpstr</name><argument_list pos:start="201:20" pos:end="201:32">(<argument pos:start="201:21" pos:end="201:23"><expr pos:start="201:21" pos:end="201:23"><name pos:start="201:21" pos:end="201:23">b64</name></expr></argument>, <argument pos:start="201:26" pos:end="201:27"><expr pos:start="201:26" pos:end="201:27"><operator pos:start="201:26" pos:end="201:27">==</operator></expr></argument>, <argument pos:start="201:30" pos:end="201:31"><expr pos:start="201:30" pos:end="201:31"><literal type="string" pos:start="201:30" pos:end="201:31">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:17"><expr pos:start="203:5" pos:end="203:16"><call pos:start="203:5" pos:end="203:16"><name pos:start="203:5" pos:end="203:11">QDECREF</name><argument_list pos:start="203:12" pos:end="203:16">(<argument pos:start="203:13" pos:end="203:15"><expr pos:start="203:13" pos:end="203:15"><name pos:start="203:13" pos:end="203:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:16"><expr pos:start="205:5" pos:end="205:15"><call pos:start="205:5" pos:end="205:15"><name pos:start="205:5" pos:end="205:10">g_free</name><argument_list pos:start="205:11" pos:end="205:15">(<argument pos:start="205:12" pos:end="205:14"><expr pos:start="205:12" pos:end="205:14"><name pos:start="205:12" pos:end="205:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="209:5" pos:end="209:14">/* seek */</comment>

    <expr_stmt pos:start="211:5" pos:end="217:43"><expr pos:start="211:5" pos:end="217:42"><name pos:start="211:5" pos:end="211:7">cmd</name> <operator pos:start="211:9" pos:end="211:9">=</operator> <call pos:start="211:11" pos:end="217:42"><name pos:start="211:11" pos:end="211:25">g_strdup_printf</name><argument_list pos:start="211:26" pos:end="217:42">(<argument pos:start="211:27" pos:end="215:59"><expr pos:start="211:27" pos:end="215:59"><literal type="string" pos:start="211:27" pos:end="211:58">"{'execute': 'guest-file-seek',"</literal>

                          <literal type="string" pos:start="213:27" pos:end="213:55">" 'arguments': { 'handle': %"</literal> <name pos:start="213:57" pos:end="213:62">PRId64</name> <literal type="string" pos:start="213:64" pos:end="213:67">", "</literal>

                          <literal type="string" pos:start="215:27" pos:end="215:59">" 'offset': %d, 'whence': %d } }"</literal></expr></argument>,

                          <argument pos:start="217:27" pos:end="217:28"><expr pos:start="217:27" pos:end="217:28"><name pos:start="217:27" pos:end="217:28">id</name></expr></argument>, <argument pos:start="217:31" pos:end="217:31"><expr pos:start="217:31" pos:end="217:31"><literal type="number" pos:start="217:31" pos:end="217:31">6</literal></expr></argument>, <argument pos:start="217:34" pos:end="217:41"><expr pos:start="217:34" pos:end="217:41"><name pos:start="217:34" pos:end="217:41">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:35"><expr pos:start="219:5" pos:end="219:34"><name pos:start="219:5" pos:end="219:7">ret</name> <operator pos:start="219:9" pos:end="219:9">=</operator> <call pos:start="219:11" pos:end="219:34"><name pos:start="219:11" pos:end="219:16">qmp_fd</name><argument_list pos:start="219:17" pos:end="219:34">(<argument pos:start="219:18" pos:end="219:28"><expr pos:start="219:18" pos:end="219:28"><name pos:start="219:18" pos:end="219:28"><name pos:start="219:18" pos:end="219:24">fixture</name><operator pos:start="219:25" pos:end="219:26">-&gt;</operator><name pos:start="219:27" pos:end="219:28">fd</name></name></expr></argument>, <argument pos:start="219:31" pos:end="219:33"><expr pos:start="219:31" pos:end="219:33"><name pos:start="219:31" pos:end="219:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:29"><expr pos:start="221:5" pos:end="221:28"><call pos:start="221:5" pos:end="221:28"><name pos:start="221:5" pos:end="221:23">qmp_assert_no_error</name><argument_list pos:start="221:24" pos:end="221:28">(<argument pos:start="221:25" pos:end="221:27"><expr pos:start="221:25" pos:end="221:27"><name pos:start="221:25" pos:end="221:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:41"><expr pos:start="223:5" pos:end="223:40"><name pos:start="223:5" pos:end="223:7">val</name> <operator pos:start="223:9" pos:end="223:9">=</operator> <call pos:start="223:11" pos:end="223:40"><name pos:start="223:11" pos:end="223:25">qdict_get_qdict</name><argument_list pos:start="223:26" pos:end="223:40">(<argument pos:start="223:27" pos:end="223:29"><expr pos:start="223:27" pos:end="223:29"><name pos:start="223:27" pos:end="223:29">ret</name></expr></argument>, <argument pos:start="223:32" pos:end="223:39"><expr pos:start="223:32" pos:end="223:39"><literal type="string" pos:start="223:32" pos:end="223:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:43"><expr pos:start="225:5" pos:end="225:42"><name pos:start="225:5" pos:end="225:9">count</name> <operator pos:start="225:11" pos:end="225:11">=</operator> <call pos:start="225:13" pos:end="225:42"><name pos:start="225:13" pos:end="225:25">qdict_get_int</name><argument_list pos:start="225:26" pos:end="225:42">(<argument pos:start="225:27" pos:end="225:29"><expr pos:start="225:27" pos:end="225:29"><name pos:start="225:27" pos:end="225:29">val</name></expr></argument>, <argument pos:start="225:32" pos:end="225:41"><expr pos:start="225:32" pos:end="225:41"><literal type="string" pos:start="225:32" pos:end="225:41">"position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:37"><expr pos:start="227:5" pos:end="227:36"><name pos:start="227:5" pos:end="227:7">eof</name> <operator pos:start="227:9" pos:end="227:9">=</operator> <call pos:start="227:11" pos:end="227:36"><name pos:start="227:11" pos:end="227:24">qdict_get_bool</name><argument_list pos:start="227:25" pos:end="227:36">(<argument pos:start="227:26" pos:end="227:28"><expr pos:start="227:26" pos:end="227:28"><name pos:start="227:26" pos:end="227:28">val</name></expr></argument>, <argument pos:start="227:31" pos:end="227:35"><expr pos:start="227:31" pos:end="227:35"><literal type="string" pos:start="227:31" pos:end="227:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:34"><expr pos:start="229:5" pos:end="229:33"><call pos:start="229:5" pos:end="229:33"><name pos:start="229:5" pos:end="229:19">g_assert_cmpint</name><argument_list pos:start="229:20" pos:end="229:33">(<argument pos:start="229:21" pos:end="229:25"><expr pos:start="229:21" pos:end="229:25"><name pos:start="229:21" pos:end="229:25">count</name></expr></argument>, <argument pos:start="229:28" pos:end="229:29"><expr pos:start="229:28" pos:end="229:29"><operator pos:start="229:28" pos:end="229:29">==</operator></expr></argument>, <argument pos:start="229:32" pos:end="229:32"><expr pos:start="229:32" pos:end="229:32"><literal type="number" pos:start="229:32" pos:end="229:32">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:19"><expr pos:start="231:5" pos:end="231:18"><call pos:start="231:5" pos:end="231:18"><name pos:start="231:5" pos:end="231:12">g_assert</name><argument_list pos:start="231:13" pos:end="231:18">(<argument pos:start="231:14" pos:end="231:17"><expr pos:start="231:14" pos:end="231:17"><operator pos:start="231:14" pos:end="231:14">!</operator><name pos:start="231:15" pos:end="231:17">eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:17"><expr pos:start="233:5" pos:end="233:16"><call pos:start="233:5" pos:end="233:16"><name pos:start="233:5" pos:end="233:11">QDECREF</name><argument_list pos:start="233:12" pos:end="233:16">(<argument pos:start="233:13" pos:end="233:15"><expr pos:start="233:13" pos:end="233:15"><name pos:start="233:13" pos:end="233:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:16"><expr pos:start="235:5" pos:end="235:15"><call pos:start="235:5" pos:end="235:15"><name pos:start="235:5" pos:end="235:10">g_free</name><argument_list pos:start="235:11" pos:end="235:15">(<argument pos:start="235:12" pos:end="235:14"><expr pos:start="235:12" pos:end="235:14"><name pos:start="235:12" pos:end="235:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:22">/* partial read */</comment>

    <expr_stmt pos:start="241:5" pos:end="245:30"><expr pos:start="241:5" pos:end="245:29"><name pos:start="241:5" pos:end="241:7">cmd</name> <operator pos:start="241:9" pos:end="241:9">=</operator> <call pos:start="241:11" pos:end="245:29"><name pos:start="241:11" pos:end="241:25">g_strdup_printf</name><argument_list pos:start="241:26" pos:end="245:29">(<argument pos:start="241:27" pos:end="243:68"><expr pos:start="241:27" pos:end="243:68"><literal type="string" pos:start="241:27" pos:end="241:58">"{'execute': 'guest-file-read',"</literal>

                          <literal type="string" pos:start="243:27" pos:end="243:55">" 'arguments': { 'handle': %"</literal> <name pos:start="243:57" pos:end="243:62">PRId64</name> <literal type="string" pos:start="243:64" pos:end="243:68">"} }"</literal></expr></argument>,

                          <argument pos:start="245:27" pos:end="245:28"><expr pos:start="245:27" pos:end="245:28"><name pos:start="245:27" pos:end="245:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:35"><expr pos:start="247:5" pos:end="247:34"><name pos:start="247:5" pos:end="247:7">ret</name> <operator pos:start="247:9" pos:end="247:9">=</operator> <call pos:start="247:11" pos:end="247:34"><name pos:start="247:11" pos:end="247:16">qmp_fd</name><argument_list pos:start="247:17" pos:end="247:34">(<argument pos:start="247:18" pos:end="247:28"><expr pos:start="247:18" pos:end="247:28"><name pos:start="247:18" pos:end="247:28"><name pos:start="247:18" pos:end="247:24">fixture</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:28">fd</name></name></expr></argument>, <argument pos:start="247:31" pos:end="247:33"><expr pos:start="247:31" pos:end="247:33"><name pos:start="247:31" pos:end="247:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:41"><expr pos:start="249:5" pos:end="249:40"><name pos:start="249:5" pos:end="249:7">val</name> <operator pos:start="249:9" pos:end="249:9">=</operator> <call pos:start="249:11" pos:end="249:40"><name pos:start="249:11" pos:end="249:25">qdict_get_qdict</name><argument_list pos:start="249:26" pos:end="249:40">(<argument pos:start="249:27" pos:end="249:29"><expr pos:start="249:27" pos:end="249:29"><name pos:start="249:27" pos:end="249:29">ret</name></expr></argument>, <argument pos:start="249:32" pos:end="249:39"><expr pos:start="249:32" pos:end="249:39"><literal type="string" pos:start="249:32" pos:end="249:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:40"><expr pos:start="251:5" pos:end="251:39"><name pos:start="251:5" pos:end="251:9">count</name> <operator pos:start="251:11" pos:end="251:11">=</operator> <call pos:start="251:13" pos:end="251:39"><name pos:start="251:13" pos:end="251:25">qdict_get_int</name><argument_list pos:start="251:26" pos:end="251:39">(<argument pos:start="251:27" pos:end="251:29"><expr pos:start="251:27" pos:end="251:29"><name pos:start="251:27" pos:end="251:29">val</name></expr></argument>, <argument pos:start="251:32" pos:end="251:38"><expr pos:start="251:32" pos:end="251:38"><literal type="string" pos:start="251:32" pos:end="251:38">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:37"><expr pos:start="253:5" pos:end="253:36"><name pos:start="253:5" pos:end="253:7">eof</name> <operator pos:start="253:9" pos:end="253:9">=</operator> <call pos:start="253:11" pos:end="253:36"><name pos:start="253:11" pos:end="253:24">qdict_get_bool</name><argument_list pos:start="253:25" pos:end="253:36">(<argument pos:start="253:26" pos:end="253:28"><expr pos:start="253:26" pos:end="253:28"><name pos:start="253:26" pos:end="253:28">val</name></expr></argument>, <argument pos:start="253:31" pos:end="253:35"><expr pos:start="253:31" pos:end="253:35"><literal type="string" pos:start="253:31" pos:end="253:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:40"><expr pos:start="255:5" pos:end="255:39"><name pos:start="255:5" pos:end="255:7">b64</name> <operator pos:start="255:9" pos:end="255:9">=</operator> <call pos:start="255:11" pos:end="255:39"><name pos:start="255:11" pos:end="255:23">qdict_get_str</name><argument_list pos:start="255:24" pos:end="255:39">(<argument pos:start="255:25" pos:end="255:27"><expr pos:start="255:25" pos:end="255:27"><name pos:start="255:25" pos:end="255:27">val</name></expr></argument>, <argument pos:start="255:30" pos:end="255:38"><expr pos:start="255:30" pos:end="255:38"><literal type="string" pos:start="255:30" pos:end="255:38">"buf-b64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:55"><expr pos:start="257:5" pos:end="257:54"><call pos:start="257:5" pos:end="257:54"><name pos:start="257:5" pos:end="257:19">g_assert_cmpint</name><argument_list pos:start="257:20" pos:end="257:54">(<argument pos:start="257:21" pos:end="257:25"><expr pos:start="257:21" pos:end="257:25"><name pos:start="257:21" pos:end="257:25">count</name></expr></argument>, <argument pos:start="257:28" pos:end="257:29"><expr pos:start="257:28" pos:end="257:29"><operator pos:start="257:28" pos:end="257:29">==</operator></expr></argument>, <argument pos:start="257:32" pos:end="257:53"><expr pos:start="257:32" pos:end="257:53"><sizeof pos:start="257:32" pos:end="257:49">sizeof<argument_list pos:start="257:38" pos:end="257:49">(<argument pos:start="257:39" pos:end="257:48"><expr pos:start="257:39" pos:end="257:48"><name pos:start="257:39" pos:end="257:48">helloworld</name></expr></argument>)</argument_list></sizeof> <operator pos:start="257:51" pos:end="257:51">-</operator> <literal type="number" pos:start="257:53" pos:end="257:53">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:18"><expr pos:start="259:5" pos:end="259:17"><call pos:start="259:5" pos:end="259:17"><name pos:start="259:5" pos:end="259:12">g_assert</name><argument_list pos:start="259:13" pos:end="259:17">(<argument pos:start="259:14" pos:end="259:16"><expr pos:start="259:14" pos:end="259:16"><name pos:start="259:14" pos:end="259:16">eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:39"><expr pos:start="261:5" pos:end="261:38"><name pos:start="261:5" pos:end="261:7">dec</name> <operator pos:start="261:9" pos:end="261:9">=</operator> <call pos:start="261:11" pos:end="261:38"><name pos:start="261:11" pos:end="261:25">g_base64_decode</name><argument_list pos:start="261:26" pos:end="261:38">(<argument pos:start="261:27" pos:end="261:29"><expr pos:start="261:27" pos:end="261:29"><name pos:start="261:27" pos:end="261:29">b64</name></expr></argument>, <argument pos:start="261:32" pos:end="261:37"><expr pos:start="261:32" pos:end="261:37"><operator pos:start="261:32" pos:end="261:32">&amp;</operator><name pos:start="261:33" pos:end="261:37">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:55"><expr pos:start="263:5" pos:end="263:54"><call pos:start="263:5" pos:end="263:54"><name pos:start="263:5" pos:end="263:19">g_assert_cmpint</name><argument_list pos:start="263:20" pos:end="263:54">(<argument pos:start="263:21" pos:end="263:25"><expr pos:start="263:21" pos:end="263:25"><name pos:start="263:21" pos:end="263:25">count</name></expr></argument>, <argument pos:start="263:28" pos:end="263:29"><expr pos:start="263:28" pos:end="263:29"><operator pos:start="263:28" pos:end="263:29">==</operator></expr></argument>, <argument pos:start="263:32" pos:end="263:53"><expr pos:start="263:32" pos:end="263:53"><sizeof pos:start="263:32" pos:end="263:49">sizeof<argument_list pos:start="263:38" pos:end="263:49">(<argument pos:start="263:39" pos:end="263:48"><expr pos:start="263:39" pos:end="263:48"><name pos:start="263:39" pos:end="263:48">helloworld</name></expr></argument>)</argument_list></sizeof> <operator pos:start="263:51" pos:end="263:51">-</operator> <literal type="number" pos:start="263:53" pos:end="263:53">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:72"><expr pos:start="265:5" pos:end="265:71"><call pos:start="265:5" pos:end="265:71"><name pos:start="265:5" pos:end="265:19">g_assert_cmpmem</name><argument_list pos:start="265:20" pos:end="265:71">(<argument pos:start="265:21" pos:end="265:23"><expr pos:start="265:21" pos:end="265:23"><name pos:start="265:21" pos:end="265:23">dec</name></expr></argument>, <argument pos:start="265:26" pos:end="265:30"><expr pos:start="265:26" pos:end="265:30"><name pos:start="265:26" pos:end="265:30">count</name></expr></argument>, <argument pos:start="265:33" pos:end="265:46"><expr pos:start="265:33" pos:end="265:46"><name pos:start="265:33" pos:end="265:42">helloworld</name> <operator pos:start="265:44" pos:end="265:44">+</operator> <literal type="number" pos:start="265:46" pos:end="265:46">6</literal></expr></argument>, <argument pos:start="265:49" pos:end="265:70"><expr pos:start="265:49" pos:end="265:70"><sizeof pos:start="265:49" pos:end="265:66">sizeof<argument_list pos:start="265:55" pos:end="265:66">(<argument pos:start="265:56" pos:end="265:65"><expr pos:start="265:56" pos:end="265:65"><name pos:start="265:56" pos:end="265:65">helloworld</name></expr></argument>)</argument_list></sizeof> <operator pos:start="265:68" pos:end="265:68">-</operator> <literal type="number" pos:start="265:70" pos:end="265:70">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:16"><expr pos:start="267:5" pos:end="267:15"><call pos:start="267:5" pos:end="267:15"><name pos:start="267:5" pos:end="267:10">g_free</name><argument_list pos:start="267:11" pos:end="267:15">(<argument pos:start="267:12" pos:end="267:14"><expr pos:start="267:12" pos:end="267:14"><name pos:start="267:12" pos:end="267:14">dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="271:5" pos:end="271:17"><expr pos:start="271:5" pos:end="271:16"><call pos:start="271:5" pos:end="271:16"><name pos:start="271:5" pos:end="271:11">QDECREF</name><argument_list pos:start="271:12" pos:end="271:16">(<argument pos:start="271:13" pos:end="271:15"><expr pos:start="271:13" pos:end="271:15"><name pos:start="271:13" pos:end="271:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:16"><expr pos:start="273:5" pos:end="273:15"><call pos:start="273:5" pos:end="273:15"><name pos:start="273:5" pos:end="273:10">g_free</name><argument_list pos:start="273:11" pos:end="273:15">(<argument pos:start="273:12" pos:end="273:14"><expr pos:start="273:12" pos:end="273:14"><name pos:start="273:12" pos:end="273:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="277:5" pos:end="277:15">/* close */</comment>

    <expr_stmt pos:start="279:5" pos:end="283:30"><expr pos:start="279:5" pos:end="283:29"><name pos:start="279:5" pos:end="279:7">cmd</name> <operator pos:start="279:9" pos:end="279:9">=</operator> <call pos:start="279:11" pos:end="283:29"><name pos:start="279:11" pos:end="279:25">g_strdup_printf</name><argument_list pos:start="279:26" pos:end="283:29">(<argument pos:start="279:27" pos:end="281:67"><expr pos:start="279:27" pos:end="281:67"><literal type="string" pos:start="279:27" pos:end="279:59">"{'execute': 'guest-file-close',"</literal>

                          <literal type="string" pos:start="281:27" pos:end="281:54">" 'arguments': {'handle': %"</literal> <name pos:start="281:56" pos:end="281:61">PRId64</name> <literal type="string" pos:start="281:63" pos:end="281:67">"} }"</literal></expr></argument>,

                          <argument pos:start="283:27" pos:end="283:28"><expr pos:start="283:27" pos:end="283:28"><name pos:start="283:27" pos:end="283:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:35"><expr pos:start="285:5" pos:end="285:34"><name pos:start="285:5" pos:end="285:7">ret</name> <operator pos:start="285:9" pos:end="285:9">=</operator> <call pos:start="285:11" pos:end="285:34"><name pos:start="285:11" pos:end="285:16">qmp_fd</name><argument_list pos:start="285:17" pos:end="285:34">(<argument pos:start="285:18" pos:end="285:28"><expr pos:start="285:18" pos:end="285:28"><name pos:start="285:18" pos:end="285:28"><name pos:start="285:18" pos:end="285:24">fixture</name><operator pos:start="285:25" pos:end="285:26">-&gt;</operator><name pos:start="285:27" pos:end="285:28">fd</name></name></expr></argument>, <argument pos:start="285:31" pos:end="285:33"><expr pos:start="285:31" pos:end="285:33"><name pos:start="285:31" pos:end="285:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:17"><expr pos:start="287:5" pos:end="287:16"><call pos:start="287:5" pos:end="287:16"><name pos:start="287:5" pos:end="287:11">QDECREF</name><argument_list pos:start="287:12" pos:end="287:16">(<argument pos:start="287:13" pos:end="287:15"><expr pos:start="287:13" pos:end="287:15"><name pos:start="287:13" pos:end="287:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:16"><expr pos:start="289:5" pos:end="289:15"><call pos:start="289:5" pos:end="289:15"><name pos:start="289:5" pos:end="289:10">g_free</name><argument_list pos:start="289:11" pos:end="289:15">(<argument pos:start="289:12" pos:end="289:14"><expr pos:start="289:12" pos:end="289:14"><name pos:start="289:12" pos:end="289:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
