<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6653.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">residual_interp</name><parameter_list pos:start="1:28" pos:end="3:49">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:35">int16_t</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">buf</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:49">int16_t</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">out</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:63"><decl pos:start="1:57" pos:end="1:63"><type pos:start="1:57" pos:end="1:63"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:63">lag</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:36"><decl pos:start="3:29" pos:end="3:36"><type pos:start="3:29" pos:end="3:36"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:36">gain</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:48"><decl pos:start="3:39" pos:end="3:48"><type pos:start="3:39" pos:end="3:48"><name pos:start="3:39" pos:end="3:41">int</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">rseed</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="37:1">{<block_content pos:start="7:5" pos:end="35:5">

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <if_stmt pos:start="9:5" pos:end="35:5"><if pos:start="9:5" pos:end="23:5">if <condition pos:start="9:8" pos:end="9:12">(<expr pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">lag</name></expr>)</condition> <block pos:start="9:14" pos:end="23:5">{<block_content pos:start="11:9" pos:end="21:60"> <comment type="block" pos:start="9:16" pos:end="9:27">/* Voiced */</comment>

        <decl_stmt pos:start="11:9" pos:end="11:46"><decl pos:start="11:9" pos:end="11:45"><type pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:15">int16_t</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:27">vector_ptr</name> <init pos:start="11:29" pos:end="11:45">= <expr pos:start="11:31" pos:end="11:45"><name pos:start="11:31" pos:end="11:33">buf</name> <operator pos:start="11:35" pos:end="11:35">+</operator> <name pos:start="11:37" pos:end="11:45">PITCH_MAX</name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="13:9" pos:end="13:23">/* Attenuate */</comment>

        <for pos:start="15:9" pos:end="17:50">for <control pos:start="15:13" pos:end="15:33">(<init pos:start="15:14" pos:end="15:19"><expr pos:start="15:14" pos:end="15:18"><name pos:start="15:14" pos:end="15:14">i</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr>;</init> <condition pos:start="15:21" pos:end="15:28"><expr pos:start="15:21" pos:end="15:27"><name pos:start="15:21" pos:end="15:21">i</name> <operator pos:start="15:23" pos:end="15:23">&lt;</operator> <name pos:start="15:25" pos:end="15:27">lag</name></expr>;</condition> <incr pos:start="15:30" pos:end="15:32"><expr pos:start="15:30" pos:end="15:32"><name pos:start="15:30" pos:end="15:30">i</name><operator pos:start="15:31" pos:end="15:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="17:13" pos:end="17:50"><block_content pos:start="17:13" pos:end="17:50">

            <expr_stmt pos:start="17:13" pos:end="17:50"><expr pos:start="17:13" pos:end="17:49"><name pos:start="17:13" pos:end="17:18"><name pos:start="17:13" pos:end="17:15">out</name><index pos:start="17:16" pos:end="17:18">[<expr pos:start="17:17" pos:end="17:17"><name pos:start="17:17" pos:end="17:17">i</name></expr>]</index></name> <operator pos:start="17:20" pos:end="17:20">=</operator> <name pos:start="17:22" pos:end="17:40"><name pos:start="17:22" pos:end="17:31">vector_ptr</name><index pos:start="17:32" pos:end="17:40">[<expr pos:start="17:33" pos:end="17:39"><name pos:start="17:33" pos:end="17:33">i</name> <operator pos:start="17:35" pos:end="17:35">-</operator> <name pos:start="17:37" pos:end="17:39">lag</name></expr>]</index></name> <operator pos:start="17:42" pos:end="17:42">*</operator> <literal type="number" pos:start="17:44" pos:end="17:44">3</literal> <operator pos:start="17:46" pos:end="17:47">&gt;&gt;</operator> <literal type="number" pos:start="17:49" pos:end="17:49">2</literal></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="19:9" pos:end="21:60"><expr pos:start="19:9" pos:end="21:59"><call pos:start="19:9" pos:end="21:59"><name pos:start="19:9" pos:end="19:25">av_memcpy_backptr</name><argument_list pos:start="19:26" pos:end="21:59">(<argument pos:start="19:27" pos:end="19:47"><expr pos:start="19:27" pos:end="19:47"><operator pos:start="19:27" pos:end="19:27">(</operator><name pos:start="19:28" pos:end="19:34">uint8_t</name><operator pos:start="19:35" pos:end="19:35">*</operator><operator pos:start="19:36" pos:end="19:36">)</operator><operator pos:start="19:37" pos:end="19:37">(</operator><name pos:start="19:38" pos:end="19:40">out</name> <operator pos:start="19:42" pos:end="19:42">+</operator> <name pos:start="19:44" pos:end="19:46">lag</name><operator pos:start="19:47" pos:end="19:47">)</operator></expr></argument>, <argument pos:start="19:50" pos:end="19:67"><expr pos:start="19:50" pos:end="19:67"><name pos:start="19:50" pos:end="19:52">lag</name> <operator pos:start="19:54" pos:end="19:54">*</operator> <sizeof pos:start="19:56" pos:end="19:67">sizeof<argument_list pos:start="19:62" pos:end="19:67">(<argument pos:start="19:63" pos:end="19:66"><expr pos:start="19:63" pos:end="19:66"><operator pos:start="19:63" pos:end="19:63">*</operator><name pos:start="19:64" pos:end="19:66">out</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                          <argument pos:start="21:27" pos:end="21:58"><expr pos:start="21:27" pos:end="21:58"><operator pos:start="21:27" pos:end="21:27">(</operator><name pos:start="21:28" pos:end="21:36">FRAME_LEN</name> <operator pos:start="21:38" pos:end="21:38">-</operator> <name pos:start="21:40" pos:end="21:42">lag</name><operator pos:start="21:43" pos:end="21:43">)</operator> <operator pos:start="21:45" pos:end="21:45">*</operator> <sizeof pos:start="21:47" pos:end="21:58">sizeof<argument_list pos:start="21:53" pos:end="21:58">(<argument pos:start="21:54" pos:end="21:57"><expr pos:start="21:54" pos:end="21:57"><operator pos:start="21:54" pos:end="21:54">*</operator><name pos:start="21:55" pos:end="21:57">out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="35:5">else <block pos:start="23:12" pos:end="35:5">{<block_content pos:start="25:9" pos:end="33:63">  <comment type="block" pos:start="23:15" pos:end="23:28">/* Unvoiced */</comment>

        <for pos:start="25:9" pos:end="31:9">for <control pos:start="25:13" pos:end="25:39">(<init pos:start="25:14" pos:end="25:19"><expr pos:start="25:14" pos:end="25:18"><name pos:start="25:14" pos:end="25:14">i</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</init> <condition pos:start="25:21" pos:end="25:34"><expr pos:start="25:21" pos:end="25:33"><name pos:start="25:21" pos:end="25:21">i</name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <name pos:start="25:25" pos:end="25:33">FRAME_LEN</name></expr>;</condition> <incr pos:start="25:36" pos:end="25:38"><expr pos:start="25:36" pos:end="25:38"><name pos:start="25:36" pos:end="25:36">i</name><operator pos:start="25:37" pos:end="25:38">++</operator></expr></incr>)</control> <block pos:start="25:41" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:41">

            <expr_stmt pos:start="27:13" pos:end="27:40"><expr pos:start="27:13" pos:end="27:39"><operator pos:start="27:13" pos:end="27:13">*</operator><name pos:start="27:14" pos:end="27:18">rseed</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <operator pos:start="27:22" pos:end="27:22">*</operator><name pos:start="27:23" pos:end="27:27">rseed</name> <operator pos:start="27:29" pos:end="27:29">*</operator> <literal type="number" pos:start="27:31" pos:end="27:35">521</literal> <operator pos:start="27:35" pos:end="27:35">+</operator> <literal type="number" pos:start="27:37" pos:end="27:39">259</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:41"><expr pos:start="29:13" pos:end="29:40"><name pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:15">out</name><index pos:start="29:16" pos:end="29:18">[<expr pos:start="29:17" pos:end="29:17"><name pos:start="29:17" pos:end="29:17">i</name></expr>]</index></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:25">gain</name> <operator pos:start="29:27" pos:end="29:27">*</operator> <operator pos:start="29:29" pos:end="29:29">*</operator><name pos:start="29:30" pos:end="29:34">rseed</name> <operator pos:start="29:36" pos:end="29:37">&gt;&gt;</operator> <literal type="number" pos:start="29:39" pos:end="29:40">15</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="33:9" pos:end="33:63"><expr pos:start="33:9" pos:end="33:62"><call pos:start="33:9" pos:end="33:62"><name pos:start="33:9" pos:end="33:14">memset</name><argument_list pos:start="33:15" pos:end="33:62">(<argument pos:start="33:16" pos:end="33:18"><expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">buf</name></expr></argument>, <argument pos:start="33:21" pos:end="33:21"><expr pos:start="33:21" pos:end="33:21"><literal type="number" pos:start="33:21" pos:end="33:21">0</literal></expr></argument>, <argument pos:start="33:24" pos:end="33:61"><expr pos:start="33:24" pos:end="33:61"><operator pos:start="33:24" pos:end="33:24">(</operator><name pos:start="33:25" pos:end="33:33">FRAME_LEN</name> <operator pos:start="33:35" pos:end="33:35">+</operator> <name pos:start="33:37" pos:end="33:45">PITCH_MAX</name><operator pos:start="33:46" pos:end="33:46">)</operator> <operator pos:start="33:48" pos:end="33:48">*</operator> <sizeof pos:start="33:50" pos:end="33:61">sizeof<argument_list pos:start="33:56" pos:end="33:61">(<argument pos:start="33:57" pos:end="33:60"><expr pos:start="33:57" pos:end="33:60"><operator pos:start="33:57" pos:end="33:57">*</operator><name pos:start="33:58" pos:end="33:60">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
