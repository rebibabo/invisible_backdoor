<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/787.c" pos:tabs="8"><function pos:start="1:1" pos:end="641:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">test_primitive_lists</name><parameter_list pos:start="1:33" pos:end="1:54">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:46">gconstpointer</name></type> <name pos:start="1:48" pos:end="1:53">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="641:1">{<block_content pos:start="5:5" pos:end="639:17">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">TestArgs</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">args</name> <init pos:start="5:20" pos:end="5:40">= <expr pos:start="5:22" pos:end="5:40"><operator pos:start="5:22" pos:end="5:22">(</operator><name pos:start="5:23" pos:end="5:30">TestArgs</name> <operator pos:start="5:32" pos:end="5:32">*</operator><operator pos:start="5:33" pos:end="5:33">)</operator> <name pos:start="5:35" pos:end="5:40">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:24"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:22">SerializeOps</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">ops</name> <init pos:start="7:29" pos:end="7:39">= <expr pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:34">args</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:39">ops</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">PrimitiveType</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">pt</name> <init pos:start="9:23" pos:end="9:39">= <expr pos:start="9:25" pos:end="9:39"><name pos:start="9:25" pos:end="9:39"><name pos:start="9:25" pos:end="9:28">args</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:39">test_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">PrimitiveList</name></type> <name pos:start="11:19" pos:end="11:20">pl</name> <init pos:start="11:22" pos:end="11:44">= <expr pos:start="11:24" pos:end="11:44"><block pos:start="11:24" pos:end="11:44">{ <expr pos:start="11:26" pos:end="11:42"><operator pos:start="11:26" pos:end="11:26">.</operator><name pos:start="11:27" pos:end="11:31">value</name> <operator pos:start="11:33" pos:end="11:33">=</operator> <block pos:start="11:35" pos:end="11:42">{ <expr pos:start="11:37" pos:end="11:40"><name pos:start="11:37" pos:end="11:40">NULL</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">PrimitiveList</name></type> <name pos:start="13:19" pos:end="13:25">pl_copy</name> <init pos:start="13:27" pos:end="13:49">= <expr pos:start="13:29" pos:end="13:49"><block pos:start="13:29" pos:end="13:49">{ <expr pos:start="13:31" pos:end="13:47"><operator pos:start="13:31" pos:end="13:31">.</operator><name pos:start="13:32" pos:end="13:36">value</name> <operator pos:start="13:38" pos:end="13:38">=</operator> <block pos:start="13:40" pos:end="13:47">{ <expr pos:start="13:42" pos:end="13:45"><name pos:start="13:42" pos:end="13:45">NULL</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:41"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">PrimitiveList</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:30">pl_copy_ptr</name> <init pos:start="15:32" pos:end="15:41">= <expr pos:start="15:34" pos:end="15:41"><operator pos:start="15:34" pos:end="15:34">&amp;</operator><name pos:start="15:35" pos:end="15:41">pl_copy</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">Error</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:14">err</name> <init pos:start="17:16" pos:end="17:21">= <expr pos:start="17:18" pos:end="17:21"><name pos:start="17:18" pos:end="17:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:24">serialize_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">void</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:18">cur_head</name> <init pos:start="21:20" pos:end="21:25">= <expr pos:start="21:22" pos:end="21:25"><name pos:start="21:22" pos:end="21:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:6">pl</name><operator pos:start="27:7" pos:end="27:7">.</operator><name pos:start="27:8" pos:end="27:11">type</name></name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:26"><name pos:start="27:15" pos:end="27:21">pl_copy</name><operator pos:start="27:22" pos:end="27:22">.</operator><name pos:start="27:23" pos:end="27:26">type</name></name> <operator pos:start="27:28" pos:end="27:28">=</operator> <name pos:start="27:30" pos:end="27:37"><name pos:start="27:30" pos:end="27:31">pt</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:37">type</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:46">/* build up our list of primitive types */</comment>

    <for pos:start="33:5" pos:end="307:5">for <control pos:start="33:9" pos:end="33:28">(<init pos:start="33:10" pos:end="33:15"><expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:10">i</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>;</init> <condition pos:start="33:17" pos:end="33:23"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:17">i</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <literal type="number" pos:start="33:21" pos:end="33:22">32</literal></expr>;</condition> <incr pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:25">i</name><operator pos:start="33:26" pos:end="33:27">++</operator></expr></incr>)</control> <block pos:start="33:30" pos:end="307:5">{<block_content pos:start="35:9" pos:end="305:9">

        <switch pos:start="35:9" pos:end="305:9">switch <condition pos:start="35:16" pos:end="35:24">(<expr pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:18">pl</name><operator pos:start="35:19" pos:end="35:19">.</operator><name pos:start="35:20" pos:end="35:23">type</name></name></expr>)</condition> <block pos:start="35:26" pos:end="305:9">{<block_content pos:start="37:9" pos:end="303:35">

        <case pos:start="37:9" pos:end="37:26">case <expr pos:start="37:14" pos:end="37:25"><name pos:start="37:14" pos:end="37:25">PTYPE_STRING</name></expr>:</case> <block pos:start="37:28" pos:end="57:9">{<block_content pos:start="39:13" pos:end="55:18">

            <decl_stmt pos:start="39:13" pos:end="39:46"><decl pos:start="39:13" pos:end="39:45"><type pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:19">strList</name> <modifier pos:start="39:21" pos:end="39:21">*</modifier></type><name pos:start="39:22" pos:end="39:24">tmp</name> <init pos:start="39:26" pos:end="39:45">= <expr pos:start="39:28" pos:end="39:45"><call pos:start="39:28" pos:end="39:45"><name pos:start="39:28" pos:end="39:33">g_new0</name><argument_list pos:start="39:34" pos:end="39:45">(<argument pos:start="39:35" pos:end="39:41"><expr pos:start="39:35" pos:end="39:41"><name pos:start="39:35" pos:end="39:41">strList</name></expr></argument>, <argument pos:start="39:44" pos:end="39:44"><expr pos:start="39:44" pos:end="39:44"><literal type="number" pos:start="39:44" pos:end="39:44">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:52"><expr pos:start="41:13" pos:end="41:51"><name pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:15">tmp</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:22">value</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <call pos:start="41:26" pos:end="41:51"><name pos:start="41:26" pos:end="41:33">g_strdup</name><argument_list pos:start="41:34" pos:end="41:51">(<argument pos:start="41:35" pos:end="41:50"><expr pos:start="41:35" pos:end="41:50"><name pos:start="41:35" pos:end="41:50"><name pos:start="41:35" pos:end="41:36">pt</name><operator pos:start="41:37" pos:end="41:38">-&gt;</operator><name pos:start="41:39" pos:end="41:43">value</name><operator pos:start="41:44" pos:end="41:44">.</operator><name pos:start="41:45" pos:end="41:50">string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="53:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:41">(<expr pos:start="43:17" pos:end="43:40"><name pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:18">pl</name><operator pos:start="43:19" pos:end="43:19">.</operator><name pos:start="43:20" pos:end="43:24">value</name><operator pos:start="43:25" pos:end="43:25">.</operator><name pos:start="43:26" pos:end="43:32">strings</name></name> <operator pos:start="43:34" pos:end="43:35">==</operator> <name pos:start="43:37" pos:end="43:40">NULL</name></expr>)</condition> <block pos:start="43:43" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:39">

                <expr_stmt pos:start="45:17" pos:end="45:39"><expr pos:start="45:17" pos:end="45:38"><name pos:start="45:17" pos:end="45:32"><name pos:start="45:17" pos:end="45:18">pl</name><operator pos:start="45:19" pos:end="45:19">.</operator><name pos:start="45:20" pos:end="45:24">value</name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:32">strings</name></name> <operator pos:start="45:34" pos:end="45:34">=</operator> <name pos:start="45:36" pos:end="45:38">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="47:15" pos:end="53:13">else <block pos:start="47:20" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:39">

                <expr_stmt pos:start="49:17" pos:end="49:45"><expr pos:start="49:17" pos:end="49:44"><name pos:start="49:17" pos:end="49:25"><name pos:start="49:17" pos:end="49:19">tmp</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:25">next</name></name> <operator pos:start="49:27" pos:end="49:27">=</operator> <name pos:start="49:29" pos:end="49:44"><name pos:start="49:29" pos:end="49:30">pl</name><operator pos:start="49:31" pos:end="49:31">.</operator><name pos:start="49:32" pos:end="49:36">value</name><operator pos:start="49:37" pos:end="49:37">.</operator><name pos:start="49:38" pos:end="49:44">strings</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:39"><expr pos:start="51:17" pos:end="51:38"><name pos:start="51:17" pos:end="51:32"><name pos:start="51:17" pos:end="51:18">pl</name><operator pos:start="51:19" pos:end="51:19">.</operator><name pos:start="51:20" pos:end="51:24">value</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:32">strings</name></name> <operator pos:start="51:34" pos:end="51:34">=</operator> <name pos:start="51:36" pos:end="51:38">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block>

        <case pos:start="59:9" pos:end="59:27">case <expr pos:start="59:14" pos:end="59:26"><name pos:start="59:14" pos:end="59:26">PTYPE_INTEGER</name></expr>:</case> <block pos:start="59:29" pos:end="79:9">{<block_content pos:start="61:13" pos:end="77:18">

            <decl_stmt pos:start="61:13" pos:end="61:46"><decl pos:start="61:13" pos:end="61:45"><type pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:19">intList</name> <modifier pos:start="61:21" pos:end="61:21">*</modifier></type><name pos:start="61:22" pos:end="61:24">tmp</name> <init pos:start="61:26" pos:end="61:45">= <expr pos:start="61:28" pos:end="61:45"><call pos:start="61:28" pos:end="61:45"><name pos:start="61:28" pos:end="61:33">g_new0</name><argument_list pos:start="61:34" pos:end="61:45">(<argument pos:start="61:35" pos:end="61:41"><expr pos:start="61:35" pos:end="61:41"><name pos:start="61:35" pos:end="61:41">intList</name></expr></argument>, <argument pos:start="61:44" pos:end="61:44"><expr pos:start="61:44" pos:end="61:44"><literal type="number" pos:start="61:44" pos:end="61:44">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:43"><expr pos:start="63:13" pos:end="63:42"><name pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:15">tmp</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:22">value</name></name> <operator pos:start="63:24" pos:end="63:24">=</operator> <name pos:start="63:26" pos:end="63:42"><name pos:start="63:26" pos:end="63:27">pt</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:34">value</name><operator pos:start="63:35" pos:end="63:35">.</operator><name pos:start="63:36" pos:end="63:42">integer</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="75:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:42">(<expr pos:start="65:17" pos:end="65:41"><name pos:start="65:17" pos:end="65:33"><name pos:start="65:17" pos:end="65:18">pl</name><operator pos:start="65:19" pos:end="65:19">.</operator><name pos:start="65:20" pos:end="65:24">value</name><operator pos:start="65:25" pos:end="65:25">.</operator><name pos:start="65:26" pos:end="65:33">integers</name></name> <operator pos:start="65:35" pos:end="65:36">==</operator> <name pos:start="65:38" pos:end="65:41">NULL</name></expr>)</condition> <block pos:start="65:44" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:40">

                <expr_stmt pos:start="67:17" pos:end="67:40"><expr pos:start="67:17" pos:end="67:39"><name pos:start="67:17" pos:end="67:33"><name pos:start="67:17" pos:end="67:18">pl</name><operator pos:start="67:19" pos:end="67:19">.</operator><name pos:start="67:20" pos:end="67:24">value</name><operator pos:start="67:25" pos:end="67:25">.</operator><name pos:start="67:26" pos:end="67:33">integers</name></name> <operator pos:start="67:35" pos:end="67:35">=</operator> <name pos:start="67:37" pos:end="67:39">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="69:15" pos:end="75:13">else <block pos:start="69:20" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:40">

                <expr_stmt pos:start="71:17" pos:end="71:46"><expr pos:start="71:17" pos:end="71:45"><name pos:start="71:17" pos:end="71:25"><name pos:start="71:17" pos:end="71:19">tmp</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:25">next</name></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <name pos:start="71:29" pos:end="71:45"><name pos:start="71:29" pos:end="71:30">pl</name><operator pos:start="71:31" pos:end="71:31">.</operator><name pos:start="71:32" pos:end="71:36">value</name><operator pos:start="71:37" pos:end="71:37">.</operator><name pos:start="71:38" pos:end="71:45">integers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:40"><expr pos:start="73:17" pos:end="73:39"><name pos:start="73:17" pos:end="73:33"><name pos:start="73:17" pos:end="73:18">pl</name><operator pos:start="73:19" pos:end="73:19">.</operator><name pos:start="73:20" pos:end="73:24">value</name><operator pos:start="73:25" pos:end="73:25">.</operator><name pos:start="73:26" pos:end="73:33">integers</name></name> <operator pos:start="73:35" pos:end="73:35">=</operator> <name pos:start="73:37" pos:end="73:39">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        </block_content>}</block>

        <case pos:start="81:9" pos:end="81:22">case <expr pos:start="81:14" pos:end="81:21"><name pos:start="81:14" pos:end="81:21">PTYPE_S8</name></expr>:</case> <block pos:start="81:24" pos:end="101:9">{<block_content pos:start="83:13" pos:end="99:18">

            <decl_stmt pos:start="83:13" pos:end="83:48"><decl pos:start="83:13" pos:end="83:47"><type pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:20">int8List</name> <modifier pos:start="83:22" pos:end="83:22">*</modifier></type><name pos:start="83:23" pos:end="83:25">tmp</name> <init pos:start="83:27" pos:end="83:47">= <expr pos:start="83:29" pos:end="83:47"><call pos:start="83:29" pos:end="83:47"><name pos:start="83:29" pos:end="83:34">g_new0</name><argument_list pos:start="83:35" pos:end="83:47">(<argument pos:start="83:36" pos:end="83:43"><expr pos:start="83:36" pos:end="83:43"><name pos:start="83:36" pos:end="83:43">int8List</name></expr></argument>, <argument pos:start="83:46" pos:end="83:46"><expr pos:start="83:46" pos:end="83:46"><literal type="number" pos:start="83:46" pos:end="83:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:38"><expr pos:start="85:13" pos:end="85:37"><name pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:15">tmp</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:22">value</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:37"><name pos:start="85:26" pos:end="85:27">pt</name><operator pos:start="85:28" pos:end="85:29">-&gt;</operator><name pos:start="85:30" pos:end="85:34">value</name><operator pos:start="85:35" pos:end="85:35">.</operator><name pos:start="85:36" pos:end="85:37">s8</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="97:13"><if pos:start="87:13" pos:end="91:13">if <condition pos:start="87:16" pos:end="87:45">(<expr pos:start="87:17" pos:end="87:44"><name pos:start="87:17" pos:end="87:36"><name pos:start="87:17" pos:end="87:18">pl</name><operator pos:start="87:19" pos:end="87:19">.</operator><name pos:start="87:20" pos:end="87:24">value</name><operator pos:start="87:25" pos:end="87:25">.</operator><name pos:start="87:26" pos:end="87:36">s8_integers</name></name> <operator pos:start="87:38" pos:end="87:39">==</operator> <name pos:start="87:41" pos:end="87:44">NULL</name></expr>)</condition> <block pos:start="87:47" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:43">

                <expr_stmt pos:start="89:17" pos:end="89:43"><expr pos:start="89:17" pos:end="89:42"><name pos:start="89:17" pos:end="89:36"><name pos:start="89:17" pos:end="89:18">pl</name><operator pos:start="89:19" pos:end="89:19">.</operator><name pos:start="89:20" pos:end="89:24">value</name><operator pos:start="89:25" pos:end="89:25">.</operator><name pos:start="89:26" pos:end="89:36">s8_integers</name></name> <operator pos:start="89:38" pos:end="89:38">=</operator> <name pos:start="89:40" pos:end="89:42">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="91:15" pos:end="97:13">else <block pos:start="91:20" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:43">

                <expr_stmt pos:start="93:17" pos:end="93:49"><expr pos:start="93:17" pos:end="93:48"><name pos:start="93:17" pos:end="93:25"><name pos:start="93:17" pos:end="93:19">tmp</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:25">next</name></name> <operator pos:start="93:27" pos:end="93:27">=</operator> <name pos:start="93:29" pos:end="93:48"><name pos:start="93:29" pos:end="93:30">pl</name><operator pos:start="93:31" pos:end="93:31">.</operator><name pos:start="93:32" pos:end="93:36">value</name><operator pos:start="93:37" pos:end="93:37">.</operator><name pos:start="93:38" pos:end="93:48">s8_integers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:43"><expr pos:start="95:17" pos:end="95:42"><name pos:start="95:17" pos:end="95:36"><name pos:start="95:17" pos:end="95:18">pl</name><operator pos:start="95:19" pos:end="95:19">.</operator><name pos:start="95:20" pos:end="95:24">value</name><operator pos:start="95:25" pos:end="95:25">.</operator><name pos:start="95:26" pos:end="95:36">s8_integers</name></name> <operator pos:start="95:38" pos:end="95:38">=</operator> <name pos:start="95:40" pos:end="95:42">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        </block_content>}</block>

        <case pos:start="103:9" pos:end="103:23">case <expr pos:start="103:14" pos:end="103:22"><name pos:start="103:14" pos:end="103:22">PTYPE_S16</name></expr>:</case> <block pos:start="103:25" pos:end="123:9">{<block_content pos:start="105:13" pos:end="121:18">

            <decl_stmt pos:start="105:13" pos:end="105:50"><decl pos:start="105:13" pos:end="105:49"><type pos:start="105:13" pos:end="105:23"><name pos:start="105:13" pos:end="105:21">int16List</name> <modifier pos:start="105:23" pos:end="105:23">*</modifier></type><name pos:start="105:24" pos:end="105:26">tmp</name> <init pos:start="105:28" pos:end="105:49">= <expr pos:start="105:30" pos:end="105:49"><call pos:start="105:30" pos:end="105:49"><name pos:start="105:30" pos:end="105:35">g_new0</name><argument_list pos:start="105:36" pos:end="105:49">(<argument pos:start="105:37" pos:end="105:45"><expr pos:start="105:37" pos:end="105:45"><name pos:start="105:37" pos:end="105:45">int16List</name></expr></argument>, <argument pos:start="105:48" pos:end="105:48"><expr pos:start="105:48" pos:end="105:48"><literal type="number" pos:start="105:48" pos:end="105:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:39"><expr pos:start="107:13" pos:end="107:38"><name pos:start="107:13" pos:end="107:22"><name pos:start="107:13" pos:end="107:15">tmp</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:22">value</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <name pos:start="107:26" pos:end="107:38"><name pos:start="107:26" pos:end="107:27">pt</name><operator pos:start="107:28" pos:end="107:29">-&gt;</operator><name pos:start="107:30" pos:end="107:34">value</name><operator pos:start="107:35" pos:end="107:35">.</operator><name pos:start="107:36" pos:end="107:38">s16</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="119:13"><if pos:start="109:13" pos:end="113:13">if <condition pos:start="109:16" pos:end="109:46">(<expr pos:start="109:17" pos:end="109:45"><name pos:start="109:17" pos:end="109:37"><name pos:start="109:17" pos:end="109:18">pl</name><operator pos:start="109:19" pos:end="109:19">.</operator><name pos:start="109:20" pos:end="109:24">value</name><operator pos:start="109:25" pos:end="109:25">.</operator><name pos:start="109:26" pos:end="109:37">s16_integers</name></name> <operator pos:start="109:39" pos:end="109:40">==</operator> <name pos:start="109:42" pos:end="109:45">NULL</name></expr>)</condition> <block pos:start="109:48" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:44">

                <expr_stmt pos:start="111:17" pos:end="111:44"><expr pos:start="111:17" pos:end="111:43"><name pos:start="111:17" pos:end="111:37"><name pos:start="111:17" pos:end="111:18">pl</name><operator pos:start="111:19" pos:end="111:19">.</operator><name pos:start="111:20" pos:end="111:24">value</name><operator pos:start="111:25" pos:end="111:25">.</operator><name pos:start="111:26" pos:end="111:37">s16_integers</name></name> <operator pos:start="111:39" pos:end="111:39">=</operator> <name pos:start="111:41" pos:end="111:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="113:15" pos:end="119:13">else <block pos:start="113:20" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:44">

                <expr_stmt pos:start="115:17" pos:end="115:50"><expr pos:start="115:17" pos:end="115:49"><name pos:start="115:17" pos:end="115:25"><name pos:start="115:17" pos:end="115:19">tmp</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:25">next</name></name> <operator pos:start="115:27" pos:end="115:27">=</operator> <name pos:start="115:29" pos:end="115:49"><name pos:start="115:29" pos:end="115:30">pl</name><operator pos:start="115:31" pos:end="115:31">.</operator><name pos:start="115:32" pos:end="115:36">value</name><operator pos:start="115:37" pos:end="115:37">.</operator><name pos:start="115:38" pos:end="115:49">s16_integers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:44"><expr pos:start="117:17" pos:end="117:43"><name pos:start="117:17" pos:end="117:37"><name pos:start="117:17" pos:end="117:18">pl</name><operator pos:start="117:19" pos:end="117:19">.</operator><name pos:start="117:20" pos:end="117:24">value</name><operator pos:start="117:25" pos:end="117:25">.</operator><name pos:start="117:26" pos:end="117:37">s16_integers</name></name> <operator pos:start="117:39" pos:end="117:39">=</operator> <name pos:start="117:41" pos:end="117:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>

        </block_content>}</block>

        <case pos:start="125:9" pos:end="125:23">case <expr pos:start="125:14" pos:end="125:22"><name pos:start="125:14" pos:end="125:22">PTYPE_S32</name></expr>:</case> <block pos:start="125:25" pos:end="145:9">{<block_content pos:start="127:13" pos:end="143:18">

            <decl_stmt pos:start="127:13" pos:end="127:50"><decl pos:start="127:13" pos:end="127:49"><type pos:start="127:13" pos:end="127:23"><name pos:start="127:13" pos:end="127:21">int32List</name> <modifier pos:start="127:23" pos:end="127:23">*</modifier></type><name pos:start="127:24" pos:end="127:26">tmp</name> <init pos:start="127:28" pos:end="127:49">= <expr pos:start="127:30" pos:end="127:49"><call pos:start="127:30" pos:end="127:49"><name pos:start="127:30" pos:end="127:35">g_new0</name><argument_list pos:start="127:36" pos:end="127:49">(<argument pos:start="127:37" pos:end="127:45"><expr pos:start="127:37" pos:end="127:45"><name pos:start="127:37" pos:end="127:45">int32List</name></expr></argument>, <argument pos:start="127:48" pos:end="127:48"><expr pos:start="127:48" pos:end="127:48"><literal type="number" pos:start="127:48" pos:end="127:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:39"><expr pos:start="129:13" pos:end="129:38"><name pos:start="129:13" pos:end="129:22"><name pos:start="129:13" pos:end="129:15">tmp</name><operator pos:start="129:16" pos:end="129:17">-&gt;</operator><name pos:start="129:18" pos:end="129:22">value</name></name> <operator pos:start="129:24" pos:end="129:24">=</operator> <name pos:start="129:26" pos:end="129:38"><name pos:start="129:26" pos:end="129:27">pt</name><operator pos:start="129:28" pos:end="129:29">-&gt;</operator><name pos:start="129:30" pos:end="129:34">value</name><operator pos:start="129:35" pos:end="129:35">.</operator><name pos:start="129:36" pos:end="129:38">s32</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="131:13" pos:end="141:13"><if pos:start="131:13" pos:end="135:13">if <condition pos:start="131:16" pos:end="131:46">(<expr pos:start="131:17" pos:end="131:45"><name pos:start="131:17" pos:end="131:37"><name pos:start="131:17" pos:end="131:18">pl</name><operator pos:start="131:19" pos:end="131:19">.</operator><name pos:start="131:20" pos:end="131:24">value</name><operator pos:start="131:25" pos:end="131:25">.</operator><name pos:start="131:26" pos:end="131:37">s32_integers</name></name> <operator pos:start="131:39" pos:end="131:40">==</operator> <name pos:start="131:42" pos:end="131:45">NULL</name></expr>)</condition> <block pos:start="131:48" pos:end="135:13">{<block_content pos:start="133:17" pos:end="133:44">

                <expr_stmt pos:start="133:17" pos:end="133:44"><expr pos:start="133:17" pos:end="133:43"><name pos:start="133:17" pos:end="133:37"><name pos:start="133:17" pos:end="133:18">pl</name><operator pos:start="133:19" pos:end="133:19">.</operator><name pos:start="133:20" pos:end="133:24">value</name><operator pos:start="133:25" pos:end="133:25">.</operator><name pos:start="133:26" pos:end="133:37">s32_integers</name></name> <operator pos:start="133:39" pos:end="133:39">=</operator> <name pos:start="133:41" pos:end="133:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="135:15" pos:end="141:13">else <block pos:start="135:20" pos:end="141:13">{<block_content pos:start="137:17" pos:end="139:44">

                <expr_stmt pos:start="137:17" pos:end="137:50"><expr pos:start="137:17" pos:end="137:49"><name pos:start="137:17" pos:end="137:25"><name pos:start="137:17" pos:end="137:19">tmp</name><operator pos:start="137:20" pos:end="137:21">-&gt;</operator><name pos:start="137:22" pos:end="137:25">next</name></name> <operator pos:start="137:27" pos:end="137:27">=</operator> <name pos:start="137:29" pos:end="137:49"><name pos:start="137:29" pos:end="137:30">pl</name><operator pos:start="137:31" pos:end="137:31">.</operator><name pos:start="137:32" pos:end="137:36">value</name><operator pos:start="137:37" pos:end="137:37">.</operator><name pos:start="137:38" pos:end="137:49">s32_integers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:44"><expr pos:start="139:17" pos:end="139:43"><name pos:start="139:17" pos:end="139:37"><name pos:start="139:17" pos:end="139:18">pl</name><operator pos:start="139:19" pos:end="139:19">.</operator><name pos:start="139:20" pos:end="139:24">value</name><operator pos:start="139:25" pos:end="139:25">.</operator><name pos:start="139:26" pos:end="139:37">s32_integers</name></name> <operator pos:start="139:39" pos:end="139:39">=</operator> <name pos:start="139:41" pos:end="139:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        </block_content>}</block>

        <case pos:start="147:9" pos:end="147:23">case <expr pos:start="147:14" pos:end="147:22"><name pos:start="147:14" pos:end="147:22">PTYPE_S64</name></expr>:</case> <block pos:start="147:25" pos:end="167:9">{<block_content pos:start="149:13" pos:end="165:18">

            <decl_stmt pos:start="149:13" pos:end="149:50"><decl pos:start="149:13" pos:end="149:49"><type pos:start="149:13" pos:end="149:23"><name pos:start="149:13" pos:end="149:21">int64List</name> <modifier pos:start="149:23" pos:end="149:23">*</modifier></type><name pos:start="149:24" pos:end="149:26">tmp</name> <init pos:start="149:28" pos:end="149:49">= <expr pos:start="149:30" pos:end="149:49"><call pos:start="149:30" pos:end="149:49"><name pos:start="149:30" pos:end="149:35">g_new0</name><argument_list pos:start="149:36" pos:end="149:49">(<argument pos:start="149:37" pos:end="149:45"><expr pos:start="149:37" pos:end="149:45"><name pos:start="149:37" pos:end="149:45">int64List</name></expr></argument>, <argument pos:start="149:48" pos:end="149:48"><expr pos:start="149:48" pos:end="149:48"><literal type="number" pos:start="149:48" pos:end="149:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:39"><expr pos:start="151:13" pos:end="151:38"><name pos:start="151:13" pos:end="151:22"><name pos:start="151:13" pos:end="151:15">tmp</name><operator pos:start="151:16" pos:end="151:17">-&gt;</operator><name pos:start="151:18" pos:end="151:22">value</name></name> <operator pos:start="151:24" pos:end="151:24">=</operator> <name pos:start="151:26" pos:end="151:38"><name pos:start="151:26" pos:end="151:27">pt</name><operator pos:start="151:28" pos:end="151:29">-&gt;</operator><name pos:start="151:30" pos:end="151:34">value</name><operator pos:start="151:35" pos:end="151:35">.</operator><name pos:start="151:36" pos:end="151:38">s64</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="153:13" pos:end="163:13"><if pos:start="153:13" pos:end="157:13">if <condition pos:start="153:16" pos:end="153:46">(<expr pos:start="153:17" pos:end="153:45"><name pos:start="153:17" pos:end="153:37"><name pos:start="153:17" pos:end="153:18">pl</name><operator pos:start="153:19" pos:end="153:19">.</operator><name pos:start="153:20" pos:end="153:24">value</name><operator pos:start="153:25" pos:end="153:25">.</operator><name pos:start="153:26" pos:end="153:37">s64_integers</name></name> <operator pos:start="153:39" pos:end="153:40">==</operator> <name pos:start="153:42" pos:end="153:45">NULL</name></expr>)</condition> <block pos:start="153:48" pos:end="157:13">{<block_content pos:start="155:17" pos:end="155:44">

                <expr_stmt pos:start="155:17" pos:end="155:44"><expr pos:start="155:17" pos:end="155:43"><name pos:start="155:17" pos:end="155:37"><name pos:start="155:17" pos:end="155:18">pl</name><operator pos:start="155:19" pos:end="155:19">.</operator><name pos:start="155:20" pos:end="155:24">value</name><operator pos:start="155:25" pos:end="155:25">.</operator><name pos:start="155:26" pos:end="155:37">s64_integers</name></name> <operator pos:start="155:39" pos:end="155:39">=</operator> <name pos:start="155:41" pos:end="155:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="157:15" pos:end="163:13">else <block pos:start="157:20" pos:end="163:13">{<block_content pos:start="159:17" pos:end="161:44">

                <expr_stmt pos:start="159:17" pos:end="159:50"><expr pos:start="159:17" pos:end="159:49"><name pos:start="159:17" pos:end="159:25"><name pos:start="159:17" pos:end="159:19">tmp</name><operator pos:start="159:20" pos:end="159:21">-&gt;</operator><name pos:start="159:22" pos:end="159:25">next</name></name> <operator pos:start="159:27" pos:end="159:27">=</operator> <name pos:start="159:29" pos:end="159:49"><name pos:start="159:29" pos:end="159:30">pl</name><operator pos:start="159:31" pos:end="159:31">.</operator><name pos:start="159:32" pos:end="159:36">value</name><operator pos:start="159:37" pos:end="159:37">.</operator><name pos:start="159:38" pos:end="159:49">s64_integers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:44"><expr pos:start="161:17" pos:end="161:43"><name pos:start="161:17" pos:end="161:37"><name pos:start="161:17" pos:end="161:18">pl</name><operator pos:start="161:19" pos:end="161:19">.</operator><name pos:start="161:20" pos:end="161:24">value</name><operator pos:start="161:25" pos:end="161:25">.</operator><name pos:start="161:26" pos:end="161:37">s64_integers</name></name> <operator pos:start="161:39" pos:end="161:39">=</operator> <name pos:start="161:41" pos:end="161:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        </block_content>}</block>

        <case pos:start="169:9" pos:end="169:22">case <expr pos:start="169:14" pos:end="169:21"><name pos:start="169:14" pos:end="169:21">PTYPE_U8</name></expr>:</case> <block pos:start="169:24" pos:end="189:9">{<block_content pos:start="171:13" pos:end="187:18">

            <decl_stmt pos:start="171:13" pos:end="171:50"><decl pos:start="171:13" pos:end="171:49"><type pos:start="171:13" pos:end="171:23"><name pos:start="171:13" pos:end="171:21">uint8List</name> <modifier pos:start="171:23" pos:end="171:23">*</modifier></type><name pos:start="171:24" pos:end="171:26">tmp</name> <init pos:start="171:28" pos:end="171:49">= <expr pos:start="171:30" pos:end="171:49"><call pos:start="171:30" pos:end="171:49"><name pos:start="171:30" pos:end="171:35">g_new0</name><argument_list pos:start="171:36" pos:end="171:49">(<argument pos:start="171:37" pos:end="171:45"><expr pos:start="171:37" pos:end="171:45"><name pos:start="171:37" pos:end="171:45">uint8List</name></expr></argument>, <argument pos:start="171:48" pos:end="171:48"><expr pos:start="171:48" pos:end="171:48"><literal type="number" pos:start="171:48" pos:end="171:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:38"><expr pos:start="173:13" pos:end="173:37"><name pos:start="173:13" pos:end="173:22"><name pos:start="173:13" pos:end="173:15">tmp</name><operator pos:start="173:16" pos:end="173:17">-&gt;</operator><name pos:start="173:18" pos:end="173:22">value</name></name> <operator pos:start="173:24" pos:end="173:24">=</operator> <name pos:start="173:26" pos:end="173:37"><name pos:start="173:26" pos:end="173:27">pt</name><operator pos:start="173:28" pos:end="173:29">-&gt;</operator><name pos:start="173:30" pos:end="173:34">value</name><operator pos:start="173:35" pos:end="173:35">.</operator><name pos:start="173:36" pos:end="173:37">u8</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="175:13" pos:end="185:13"><if pos:start="175:13" pos:end="179:13">if <condition pos:start="175:16" pos:end="175:45">(<expr pos:start="175:17" pos:end="175:44"><name pos:start="175:17" pos:end="175:36"><name pos:start="175:17" pos:end="175:18">pl</name><operator pos:start="175:19" pos:end="175:19">.</operator><name pos:start="175:20" pos:end="175:24">value</name><operator pos:start="175:25" pos:end="175:25">.</operator><name pos:start="175:26" pos:end="175:36">u8_integers</name></name> <operator pos:start="175:38" pos:end="175:39">==</operator> <name pos:start="175:41" pos:end="175:44">NULL</name></expr>)</condition> <block pos:start="175:47" pos:end="179:13">{<block_content pos:start="177:17" pos:end="177:43">

                <expr_stmt pos:start="177:17" pos:end="177:43"><expr pos:start="177:17" pos:end="177:42"><name pos:start="177:17" pos:end="177:36"><name pos:start="177:17" pos:end="177:18">pl</name><operator pos:start="177:19" pos:end="177:19">.</operator><name pos:start="177:20" pos:end="177:24">value</name><operator pos:start="177:25" pos:end="177:25">.</operator><name pos:start="177:26" pos:end="177:36">u8_integers</name></name> <operator pos:start="177:38" pos:end="177:38">=</operator> <name pos:start="177:40" pos:end="177:42">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="179:15" pos:end="185:13">else <block pos:start="179:20" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:43">

                <expr_stmt pos:start="181:17" pos:end="181:49"><expr pos:start="181:17" pos:end="181:48"><name pos:start="181:17" pos:end="181:25"><name pos:start="181:17" pos:end="181:19">tmp</name><operator pos:start="181:20" pos:end="181:21">-&gt;</operator><name pos:start="181:22" pos:end="181:25">next</name></name> <operator pos:start="181:27" pos:end="181:27">=</operator> <name pos:start="181:29" pos:end="181:48"><name pos:start="181:29" pos:end="181:30">pl</name><operator pos:start="181:31" pos:end="181:31">.</operator><name pos:start="181:32" pos:end="181:36">value</name><operator pos:start="181:37" pos:end="181:37">.</operator><name pos:start="181:38" pos:end="181:48">u8_integers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:43"><expr pos:start="183:17" pos:end="183:42"><name pos:start="183:17" pos:end="183:36"><name pos:start="183:17" pos:end="183:18">pl</name><operator pos:start="183:19" pos:end="183:19">.</operator><name pos:start="183:20" pos:end="183:24">value</name><operator pos:start="183:25" pos:end="183:25">.</operator><name pos:start="183:26" pos:end="183:36">u8_integers</name></name> <operator pos:start="183:38" pos:end="183:38">=</operator> <name pos:start="183:40" pos:end="183:42">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        </block_content>}</block>

        <case pos:start="191:9" pos:end="191:23">case <expr pos:start="191:14" pos:end="191:22"><name pos:start="191:14" pos:end="191:22">PTYPE_U16</name></expr>:</case> <block pos:start="191:25" pos:end="211:9">{<block_content pos:start="193:13" pos:end="209:18">

            <decl_stmt pos:start="193:13" pos:end="193:52"><decl pos:start="193:13" pos:end="193:51"><type pos:start="193:13" pos:end="193:24"><name pos:start="193:13" pos:end="193:22">uint16List</name> <modifier pos:start="193:24" pos:end="193:24">*</modifier></type><name pos:start="193:25" pos:end="193:27">tmp</name> <init pos:start="193:29" pos:end="193:51">= <expr pos:start="193:31" pos:end="193:51"><call pos:start="193:31" pos:end="193:51"><name pos:start="193:31" pos:end="193:36">g_new0</name><argument_list pos:start="193:37" pos:end="193:51">(<argument pos:start="193:38" pos:end="193:47"><expr pos:start="193:38" pos:end="193:47"><name pos:start="193:38" pos:end="193:47">uint16List</name></expr></argument>, <argument pos:start="193:50" pos:end="193:50"><expr pos:start="193:50" pos:end="193:50"><literal type="number" pos:start="193:50" pos:end="193:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:39"><expr pos:start="195:13" pos:end="195:38"><name pos:start="195:13" pos:end="195:22"><name pos:start="195:13" pos:end="195:15">tmp</name><operator pos:start="195:16" pos:end="195:17">-&gt;</operator><name pos:start="195:18" pos:end="195:22">value</name></name> <operator pos:start="195:24" pos:end="195:24">=</operator> <name pos:start="195:26" pos:end="195:38"><name pos:start="195:26" pos:end="195:27">pt</name><operator pos:start="195:28" pos:end="195:29">-&gt;</operator><name pos:start="195:30" pos:end="195:34">value</name><operator pos:start="195:35" pos:end="195:35">.</operator><name pos:start="195:36" pos:end="195:38">u16</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="197:13" pos:end="207:13"><if pos:start="197:13" pos:end="201:13">if <condition pos:start="197:16" pos:end="197:46">(<expr pos:start="197:17" pos:end="197:45"><name pos:start="197:17" pos:end="197:37"><name pos:start="197:17" pos:end="197:18">pl</name><operator pos:start="197:19" pos:end="197:19">.</operator><name pos:start="197:20" pos:end="197:24">value</name><operator pos:start="197:25" pos:end="197:25">.</operator><name pos:start="197:26" pos:end="197:37">u16_integers</name></name> <operator pos:start="197:39" pos:end="197:40">==</operator> <name pos:start="197:42" pos:end="197:45">NULL</name></expr>)</condition> <block pos:start="197:48" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:44">

                <expr_stmt pos:start="199:17" pos:end="199:44"><expr pos:start="199:17" pos:end="199:43"><name pos:start="199:17" pos:end="199:37"><name pos:start="199:17" pos:end="199:18">pl</name><operator pos:start="199:19" pos:end="199:19">.</operator><name pos:start="199:20" pos:end="199:24">value</name><operator pos:start="199:25" pos:end="199:25">.</operator><name pos:start="199:26" pos:end="199:37">u16_integers</name></name> <operator pos:start="199:39" pos:end="199:39">=</operator> <name pos:start="199:41" pos:end="199:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="201:15" pos:end="207:13">else <block pos:start="201:20" pos:end="207:13">{<block_content pos:start="203:17" pos:end="205:44">

                <expr_stmt pos:start="203:17" pos:end="203:50"><expr pos:start="203:17" pos:end="203:49"><name pos:start="203:17" pos:end="203:25"><name pos:start="203:17" pos:end="203:19">tmp</name><operator pos:start="203:20" pos:end="203:21">-&gt;</operator><name pos:start="203:22" pos:end="203:25">next</name></name> <operator pos:start="203:27" pos:end="203:27">=</operator> <name pos:start="203:29" pos:end="203:49"><name pos:start="203:29" pos:end="203:30">pl</name><operator pos:start="203:31" pos:end="203:31">.</operator><name pos:start="203:32" pos:end="203:36">value</name><operator pos:start="203:37" pos:end="203:37">.</operator><name pos:start="203:38" pos:end="203:49">u16_integers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:44"><expr pos:start="205:17" pos:end="205:43"><name pos:start="205:17" pos:end="205:37"><name pos:start="205:17" pos:end="205:18">pl</name><operator pos:start="205:19" pos:end="205:19">.</operator><name pos:start="205:20" pos:end="205:24">value</name><operator pos:start="205:25" pos:end="205:25">.</operator><name pos:start="205:26" pos:end="205:37">u16_integers</name></name> <operator pos:start="205:39" pos:end="205:39">=</operator> <name pos:start="205:41" pos:end="205:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="209:13" pos:end="209:18">break;</break>

        </block_content>}</block>

        <case pos:start="213:9" pos:end="213:23">case <expr pos:start="213:14" pos:end="213:22"><name pos:start="213:14" pos:end="213:22">PTYPE_U32</name></expr>:</case> <block pos:start="213:25" pos:end="233:9">{<block_content pos:start="215:13" pos:end="231:18">

            <decl_stmt pos:start="215:13" pos:end="215:52"><decl pos:start="215:13" pos:end="215:51"><type pos:start="215:13" pos:end="215:24"><name pos:start="215:13" pos:end="215:22">uint32List</name> <modifier pos:start="215:24" pos:end="215:24">*</modifier></type><name pos:start="215:25" pos:end="215:27">tmp</name> <init pos:start="215:29" pos:end="215:51">= <expr pos:start="215:31" pos:end="215:51"><call pos:start="215:31" pos:end="215:51"><name pos:start="215:31" pos:end="215:36">g_new0</name><argument_list pos:start="215:37" pos:end="215:51">(<argument pos:start="215:38" pos:end="215:47"><expr pos:start="215:38" pos:end="215:47"><name pos:start="215:38" pos:end="215:47">uint32List</name></expr></argument>, <argument pos:start="215:50" pos:end="215:50"><expr pos:start="215:50" pos:end="215:50"><literal type="number" pos:start="215:50" pos:end="215:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:39"><expr pos:start="217:13" pos:end="217:38"><name pos:start="217:13" pos:end="217:22"><name pos:start="217:13" pos:end="217:15">tmp</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:22">value</name></name> <operator pos:start="217:24" pos:end="217:24">=</operator> <name pos:start="217:26" pos:end="217:38"><name pos:start="217:26" pos:end="217:27">pt</name><operator pos:start="217:28" pos:end="217:29">-&gt;</operator><name pos:start="217:30" pos:end="217:34">value</name><operator pos:start="217:35" pos:end="217:35">.</operator><name pos:start="217:36" pos:end="217:38">u32</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="229:13"><if pos:start="219:13" pos:end="223:13">if <condition pos:start="219:16" pos:end="219:46">(<expr pos:start="219:17" pos:end="219:45"><name pos:start="219:17" pos:end="219:37"><name pos:start="219:17" pos:end="219:18">pl</name><operator pos:start="219:19" pos:end="219:19">.</operator><name pos:start="219:20" pos:end="219:24">value</name><operator pos:start="219:25" pos:end="219:25">.</operator><name pos:start="219:26" pos:end="219:37">u32_integers</name></name> <operator pos:start="219:39" pos:end="219:40">==</operator> <name pos:start="219:42" pos:end="219:45">NULL</name></expr>)</condition> <block pos:start="219:48" pos:end="223:13">{<block_content pos:start="221:17" pos:end="221:44">

                <expr_stmt pos:start="221:17" pos:end="221:44"><expr pos:start="221:17" pos:end="221:43"><name pos:start="221:17" pos:end="221:37"><name pos:start="221:17" pos:end="221:18">pl</name><operator pos:start="221:19" pos:end="221:19">.</operator><name pos:start="221:20" pos:end="221:24">value</name><operator pos:start="221:25" pos:end="221:25">.</operator><name pos:start="221:26" pos:end="221:37">u32_integers</name></name> <operator pos:start="221:39" pos:end="221:39">=</operator> <name pos:start="221:41" pos:end="221:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="223:15" pos:end="229:13">else <block pos:start="223:20" pos:end="229:13">{<block_content pos:start="225:17" pos:end="227:44">

                <expr_stmt pos:start="225:17" pos:end="225:50"><expr pos:start="225:17" pos:end="225:49"><name pos:start="225:17" pos:end="225:25"><name pos:start="225:17" pos:end="225:19">tmp</name><operator pos:start="225:20" pos:end="225:21">-&gt;</operator><name pos:start="225:22" pos:end="225:25">next</name></name> <operator pos:start="225:27" pos:end="225:27">=</operator> <name pos:start="225:29" pos:end="225:49"><name pos:start="225:29" pos:end="225:30">pl</name><operator pos:start="225:31" pos:end="225:31">.</operator><name pos:start="225:32" pos:end="225:36">value</name><operator pos:start="225:37" pos:end="225:37">.</operator><name pos:start="225:38" pos:end="225:49">u32_integers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:44"><expr pos:start="227:17" pos:end="227:43"><name pos:start="227:17" pos:end="227:37"><name pos:start="227:17" pos:end="227:18">pl</name><operator pos:start="227:19" pos:end="227:19">.</operator><name pos:start="227:20" pos:end="227:24">value</name><operator pos:start="227:25" pos:end="227:25">.</operator><name pos:start="227:26" pos:end="227:37">u32_integers</name></name> <operator pos:start="227:39" pos:end="227:39">=</operator> <name pos:start="227:41" pos:end="227:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="231:13" pos:end="231:18">break;</break>

        </block_content>}</block>

        <case pos:start="235:9" pos:end="235:23">case <expr pos:start="235:14" pos:end="235:22"><name pos:start="235:14" pos:end="235:22">PTYPE_U64</name></expr>:</case> <block pos:start="235:25" pos:end="255:9">{<block_content pos:start="237:13" pos:end="253:18">

            <decl_stmt pos:start="237:13" pos:end="237:52"><decl pos:start="237:13" pos:end="237:51"><type pos:start="237:13" pos:end="237:24"><name pos:start="237:13" pos:end="237:22">uint64List</name> <modifier pos:start="237:24" pos:end="237:24">*</modifier></type><name pos:start="237:25" pos:end="237:27">tmp</name> <init pos:start="237:29" pos:end="237:51">= <expr pos:start="237:31" pos:end="237:51"><call pos:start="237:31" pos:end="237:51"><name pos:start="237:31" pos:end="237:36">g_new0</name><argument_list pos:start="237:37" pos:end="237:51">(<argument pos:start="237:38" pos:end="237:47"><expr pos:start="237:38" pos:end="237:47"><name pos:start="237:38" pos:end="237:47">uint64List</name></expr></argument>, <argument pos:start="237:50" pos:end="237:50"><expr pos:start="237:50" pos:end="237:50"><literal type="number" pos:start="237:50" pos:end="237:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:39"><expr pos:start="239:13" pos:end="239:38"><name pos:start="239:13" pos:end="239:22"><name pos:start="239:13" pos:end="239:15">tmp</name><operator pos:start="239:16" pos:end="239:17">-&gt;</operator><name pos:start="239:18" pos:end="239:22">value</name></name> <operator pos:start="239:24" pos:end="239:24">=</operator> <name pos:start="239:26" pos:end="239:38"><name pos:start="239:26" pos:end="239:27">pt</name><operator pos:start="239:28" pos:end="239:29">-&gt;</operator><name pos:start="239:30" pos:end="239:34">value</name><operator pos:start="239:35" pos:end="239:35">.</operator><name pos:start="239:36" pos:end="239:38">u64</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="241:13" pos:end="251:13"><if pos:start="241:13" pos:end="245:13">if <condition pos:start="241:16" pos:end="241:46">(<expr pos:start="241:17" pos:end="241:45"><name pos:start="241:17" pos:end="241:37"><name pos:start="241:17" pos:end="241:18">pl</name><operator pos:start="241:19" pos:end="241:19">.</operator><name pos:start="241:20" pos:end="241:24">value</name><operator pos:start="241:25" pos:end="241:25">.</operator><name pos:start="241:26" pos:end="241:37">u64_integers</name></name> <operator pos:start="241:39" pos:end="241:40">==</operator> <name pos:start="241:42" pos:end="241:45">NULL</name></expr>)</condition> <block pos:start="241:48" pos:end="245:13">{<block_content pos:start="243:17" pos:end="243:44">

                <expr_stmt pos:start="243:17" pos:end="243:44"><expr pos:start="243:17" pos:end="243:43"><name pos:start="243:17" pos:end="243:37"><name pos:start="243:17" pos:end="243:18">pl</name><operator pos:start="243:19" pos:end="243:19">.</operator><name pos:start="243:20" pos:end="243:24">value</name><operator pos:start="243:25" pos:end="243:25">.</operator><name pos:start="243:26" pos:end="243:37">u64_integers</name></name> <operator pos:start="243:39" pos:end="243:39">=</operator> <name pos:start="243:41" pos:end="243:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="245:15" pos:end="251:13">else <block pos:start="245:20" pos:end="251:13">{<block_content pos:start="247:17" pos:end="249:44">

                <expr_stmt pos:start="247:17" pos:end="247:50"><expr pos:start="247:17" pos:end="247:49"><name pos:start="247:17" pos:end="247:25"><name pos:start="247:17" pos:end="247:19">tmp</name><operator pos:start="247:20" pos:end="247:21">-&gt;</operator><name pos:start="247:22" pos:end="247:25">next</name></name> <operator pos:start="247:27" pos:end="247:27">=</operator> <name pos:start="247:29" pos:end="247:49"><name pos:start="247:29" pos:end="247:30">pl</name><operator pos:start="247:31" pos:end="247:31">.</operator><name pos:start="247:32" pos:end="247:36">value</name><operator pos:start="247:37" pos:end="247:37">.</operator><name pos:start="247:38" pos:end="247:49">u64_integers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:44"><expr pos:start="249:17" pos:end="249:43"><name pos:start="249:17" pos:end="249:37"><name pos:start="249:17" pos:end="249:18">pl</name><operator pos:start="249:19" pos:end="249:19">.</operator><name pos:start="249:20" pos:end="249:24">value</name><operator pos:start="249:25" pos:end="249:25">.</operator><name pos:start="249:26" pos:end="249:37">u64_integers</name></name> <operator pos:start="249:39" pos:end="249:39">=</operator> <name pos:start="249:41" pos:end="249:43">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="253:13" pos:end="253:18">break;</break>

        </block_content>}</block>

        <case pos:start="257:9" pos:end="257:26">case <expr pos:start="257:14" pos:end="257:25"><name pos:start="257:14" pos:end="257:25">PTYPE_NUMBER</name></expr>:</case> <block pos:start="257:28" pos:end="277:9">{<block_content pos:start="259:13" pos:end="275:18">

            <decl_stmt pos:start="259:13" pos:end="259:52"><decl pos:start="259:13" pos:end="259:51"><type pos:start="259:13" pos:end="259:24"><name pos:start="259:13" pos:end="259:22">numberList</name> <modifier pos:start="259:24" pos:end="259:24">*</modifier></type><name pos:start="259:25" pos:end="259:27">tmp</name> <init pos:start="259:29" pos:end="259:51">= <expr pos:start="259:31" pos:end="259:51"><call pos:start="259:31" pos:end="259:51"><name pos:start="259:31" pos:end="259:36">g_new0</name><argument_list pos:start="259:37" pos:end="259:51">(<argument pos:start="259:38" pos:end="259:47"><expr pos:start="259:38" pos:end="259:47"><name pos:start="259:38" pos:end="259:47">numberList</name></expr></argument>, <argument pos:start="259:50" pos:end="259:50"><expr pos:start="259:50" pos:end="259:50"><literal type="number" pos:start="259:50" pos:end="259:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:42"><expr pos:start="261:13" pos:end="261:41"><name pos:start="261:13" pos:end="261:22"><name pos:start="261:13" pos:end="261:15">tmp</name><operator pos:start="261:16" pos:end="261:17">-&gt;</operator><name pos:start="261:18" pos:end="261:22">value</name></name> <operator pos:start="261:24" pos:end="261:24">=</operator> <name pos:start="261:26" pos:end="261:41"><name pos:start="261:26" pos:end="261:27">pt</name><operator pos:start="261:28" pos:end="261:29">-&gt;</operator><name pos:start="261:30" pos:end="261:34">value</name><operator pos:start="261:35" pos:end="261:35">.</operator><name pos:start="261:36" pos:end="261:41">number</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="263:13" pos:end="273:13"><if pos:start="263:13" pos:end="267:13">if <condition pos:start="263:16" pos:end="263:41">(<expr pos:start="263:17" pos:end="263:40"><name pos:start="263:17" pos:end="263:32"><name pos:start="263:17" pos:end="263:18">pl</name><operator pos:start="263:19" pos:end="263:19">.</operator><name pos:start="263:20" pos:end="263:24">value</name><operator pos:start="263:25" pos:end="263:25">.</operator><name pos:start="263:26" pos:end="263:32">numbers</name></name> <operator pos:start="263:34" pos:end="263:35">==</operator> <name pos:start="263:37" pos:end="263:40">NULL</name></expr>)</condition> <block pos:start="263:43" pos:end="267:13">{<block_content pos:start="265:17" pos:end="265:39">

                <expr_stmt pos:start="265:17" pos:end="265:39"><expr pos:start="265:17" pos:end="265:38"><name pos:start="265:17" pos:end="265:32"><name pos:start="265:17" pos:end="265:18">pl</name><operator pos:start="265:19" pos:end="265:19">.</operator><name pos:start="265:20" pos:end="265:24">value</name><operator pos:start="265:25" pos:end="265:25">.</operator><name pos:start="265:26" pos:end="265:32">numbers</name></name> <operator pos:start="265:34" pos:end="265:34">=</operator> <name pos:start="265:36" pos:end="265:38">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="267:15" pos:end="273:13">else <block pos:start="267:20" pos:end="273:13">{<block_content pos:start="269:17" pos:end="271:39">

                <expr_stmt pos:start="269:17" pos:end="269:45"><expr pos:start="269:17" pos:end="269:44"><name pos:start="269:17" pos:end="269:25"><name pos:start="269:17" pos:end="269:19">tmp</name><operator pos:start="269:20" pos:end="269:21">-&gt;</operator><name pos:start="269:22" pos:end="269:25">next</name></name> <operator pos:start="269:27" pos:end="269:27">=</operator> <name pos:start="269:29" pos:end="269:44"><name pos:start="269:29" pos:end="269:30">pl</name><operator pos:start="269:31" pos:end="269:31">.</operator><name pos:start="269:32" pos:end="269:36">value</name><operator pos:start="269:37" pos:end="269:37">.</operator><name pos:start="269:38" pos:end="269:44">numbers</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:39"><expr pos:start="271:17" pos:end="271:38"><name pos:start="271:17" pos:end="271:32"><name pos:start="271:17" pos:end="271:18">pl</name><operator pos:start="271:19" pos:end="271:19">.</operator><name pos:start="271:20" pos:end="271:24">value</name><operator pos:start="271:25" pos:end="271:25">.</operator><name pos:start="271:26" pos:end="271:32">numbers</name></name> <operator pos:start="271:34" pos:end="271:34">=</operator> <name pos:start="271:36" pos:end="271:38">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="275:13" pos:end="275:18">break;</break>

        </block_content>}</block>

        <case pos:start="279:9" pos:end="279:27">case <expr pos:start="279:14" pos:end="279:26"><name pos:start="279:14" pos:end="279:26">PTYPE_BOOLEAN</name></expr>:</case> <block pos:start="279:29" pos:end="299:9">{<block_content pos:start="281:13" pos:end="297:18">

            <decl_stmt pos:start="281:13" pos:end="281:48"><decl pos:start="281:13" pos:end="281:47"><type pos:start="281:13" pos:end="281:22"><name pos:start="281:13" pos:end="281:20">boolList</name> <modifier pos:start="281:22" pos:end="281:22">*</modifier></type><name pos:start="281:23" pos:end="281:25">tmp</name> <init pos:start="281:27" pos:end="281:47">= <expr pos:start="281:29" pos:end="281:47"><call pos:start="281:29" pos:end="281:47"><name pos:start="281:29" pos:end="281:34">g_new0</name><argument_list pos:start="281:35" pos:end="281:47">(<argument pos:start="281:36" pos:end="281:43"><expr pos:start="281:36" pos:end="281:43"><name pos:start="281:36" pos:end="281:43">boolList</name></expr></argument>, <argument pos:start="281:46" pos:end="281:46"><expr pos:start="281:46" pos:end="281:46"><literal type="number" pos:start="281:46" pos:end="281:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:43"><expr pos:start="283:13" pos:end="283:42"><name pos:start="283:13" pos:end="283:22"><name pos:start="283:13" pos:end="283:15">tmp</name><operator pos:start="283:16" pos:end="283:17">-&gt;</operator><name pos:start="283:18" pos:end="283:22">value</name></name> <operator pos:start="283:24" pos:end="283:24">=</operator> <name pos:start="283:26" pos:end="283:42"><name pos:start="283:26" pos:end="283:27">pt</name><operator pos:start="283:28" pos:end="283:29">-&gt;</operator><name pos:start="283:30" pos:end="283:34">value</name><operator pos:start="283:35" pos:end="283:35">.</operator><name pos:start="283:36" pos:end="283:42">boolean</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="285:13" pos:end="295:13"><if pos:start="285:13" pos:end="289:13">if <condition pos:start="285:16" pos:end="285:42">(<expr pos:start="285:17" pos:end="285:41"><name pos:start="285:17" pos:end="285:33"><name pos:start="285:17" pos:end="285:18">pl</name><operator pos:start="285:19" pos:end="285:19">.</operator><name pos:start="285:20" pos:end="285:24">value</name><operator pos:start="285:25" pos:end="285:25">.</operator><name pos:start="285:26" pos:end="285:33">booleans</name></name> <operator pos:start="285:35" pos:end="285:36">==</operator> <name pos:start="285:38" pos:end="285:41">NULL</name></expr>)</condition> <block pos:start="285:44" pos:end="289:13">{<block_content pos:start="287:17" pos:end="287:40">

                <expr_stmt pos:start="287:17" pos:end="287:40"><expr pos:start="287:17" pos:end="287:39"><name pos:start="287:17" pos:end="287:33"><name pos:start="287:17" pos:end="287:18">pl</name><operator pos:start="287:19" pos:end="287:19">.</operator><name pos:start="287:20" pos:end="287:24">value</name><operator pos:start="287:25" pos:end="287:25">.</operator><name pos:start="287:26" pos:end="287:33">booleans</name></name> <operator pos:start="287:35" pos:end="287:35">=</operator> <name pos:start="287:37" pos:end="287:39">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="289:15" pos:end="295:13">else <block pos:start="289:20" pos:end="295:13">{<block_content pos:start="291:17" pos:end="293:40">

                <expr_stmt pos:start="291:17" pos:end="291:46"><expr pos:start="291:17" pos:end="291:45"><name pos:start="291:17" pos:end="291:25"><name pos:start="291:17" pos:end="291:19">tmp</name><operator pos:start="291:20" pos:end="291:21">-&gt;</operator><name pos:start="291:22" pos:end="291:25">next</name></name> <operator pos:start="291:27" pos:end="291:27">=</operator> <name pos:start="291:29" pos:end="291:45"><name pos:start="291:29" pos:end="291:30">pl</name><operator pos:start="291:31" pos:end="291:31">.</operator><name pos:start="291:32" pos:end="291:36">value</name><operator pos:start="291:37" pos:end="291:37">.</operator><name pos:start="291:38" pos:end="291:45">booleans</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:40"><expr pos:start="293:17" pos:end="293:39"><name pos:start="293:17" pos:end="293:33"><name pos:start="293:17" pos:end="293:18">pl</name><operator pos:start="293:19" pos:end="293:19">.</operator><name pos:start="293:20" pos:end="293:24">value</name><operator pos:start="293:25" pos:end="293:25">.</operator><name pos:start="293:26" pos:end="293:33">booleans</name></name> <operator pos:start="293:35" pos:end="293:35">=</operator> <name pos:start="293:37" pos:end="293:39">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="297:13" pos:end="297:18">break;</break>

        </block_content>}</block>

        <default pos:start="301:9" pos:end="301:16">default:</default>

            <expr_stmt pos:start="303:13" pos:end="303:35"><expr pos:start="303:13" pos:end="303:34"><call pos:start="303:13" pos:end="303:34"><name pos:start="303:13" pos:end="303:32">g_assert_not_reached</name><argument_list pos:start="303:33" pos:end="303:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <expr_stmt pos:start="311:5" pos:end="311:78"><expr pos:start="311:5" pos:end="311:77"><call pos:start="311:5" pos:end="311:77"><name pos:start="311:5" pos:end="311:18"><name pos:start="311:5" pos:end="311:7">ops</name><operator pos:start="311:8" pos:end="311:9">-&gt;</operator><name pos:start="311:10" pos:end="311:18">serialize</name></name><argument_list pos:start="311:19" pos:end="311:77">(<argument pos:start="311:20" pos:end="311:31"><expr pos:start="311:20" pos:end="311:31"><operator pos:start="311:20" pos:end="311:20">(</operator><name pos:start="311:21" pos:end="311:24">void</name> <operator pos:start="311:26" pos:end="311:26">*</operator><operator pos:start="311:27" pos:end="311:27">*</operator><operator pos:start="311:28" pos:end="311:28">)</operator><operator pos:start="311:29" pos:end="311:29">&amp;</operator><name pos:start="311:30" pos:end="311:31">pl</name></expr></argument>, <argument pos:start="311:34" pos:end="311:48"><expr pos:start="311:34" pos:end="311:48"><operator pos:start="311:34" pos:end="311:34">&amp;</operator><name pos:start="311:35" pos:end="311:48">serialize_data</name></expr></argument>, <argument pos:start="311:51" pos:end="311:70"><expr pos:start="311:51" pos:end="311:70"><name pos:start="311:51" pos:end="311:70">visit_primitive_list</name></expr></argument>, <argument pos:start="311:73" pos:end="311:76"><expr pos:start="311:73" pos:end="311:76"><operator pos:start="311:73" pos:end="311:73">&amp;</operator><name pos:start="311:74" pos:end="311:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:88"><expr pos:start="313:5" pos:end="313:87"><call pos:start="313:5" pos:end="313:87"><name pos:start="313:5" pos:end="313:20"><name pos:start="313:5" pos:end="313:7">ops</name><operator pos:start="313:8" pos:end="313:9">-&gt;</operator><name pos:start="313:10" pos:end="313:20">deserialize</name></name><argument_list pos:start="313:21" pos:end="313:87">(<argument pos:start="313:22" pos:end="313:42"><expr pos:start="313:22" pos:end="313:42"><operator pos:start="313:22" pos:end="313:22">(</operator><name pos:start="313:23" pos:end="313:26">void</name> <operator pos:start="313:28" pos:end="313:28">*</operator><operator pos:start="313:29" pos:end="313:29">*</operator><operator pos:start="313:30" pos:end="313:30">)</operator><operator pos:start="313:31" pos:end="313:31">&amp;</operator><name pos:start="313:32" pos:end="313:42">pl_copy_ptr</name></expr></argument>, <argument pos:start="313:45" pos:end="313:58"><expr pos:start="313:45" pos:end="313:58"><name pos:start="313:45" pos:end="313:58">serialize_data</name></expr></argument>, <argument pos:start="313:61" pos:end="313:80"><expr pos:start="313:61" pos:end="313:80"><name pos:start="313:61" pos:end="313:80">visit_primitive_list</name></expr></argument>, <argument pos:start="313:83" pos:end="313:86"><expr pos:start="313:83" pos:end="313:86"><operator pos:start="313:83" pos:end="313:83">&amp;</operator><name pos:start="313:84" pos:end="313:86">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="317:5" pos:end="317:26"><expr pos:start="317:5" pos:end="317:25"><call pos:start="317:5" pos:end="317:25"><name pos:start="317:5" pos:end="317:12">g_assert</name><argument_list pos:start="317:13" pos:end="317:25">(<argument pos:start="317:14" pos:end="317:24"><expr pos:start="317:14" pos:end="317:24"><name pos:start="317:14" pos:end="317:16">err</name> <operator pos:start="317:18" pos:end="317:19">==</operator> <name pos:start="317:21" pos:end="317:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:10"><expr pos:start="319:5" pos:end="319:9"><name pos:start="319:5" pos:end="319:5">i</name> <operator pos:start="319:7" pos:end="319:7">=</operator> <literal type="number" pos:start="319:9" pos:end="319:9">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="323:5" pos:end="323:69">/* compare our deserialized list of primitives to the original */</comment>

    <do pos:start="325:5" pos:end="621:23">do <block pos:start="325:8" pos:end="621:5">{<block_content pos:start="327:9" pos:end="619:12">

        <switch pos:start="327:9" pos:end="617:9">switch <condition pos:start="327:16" pos:end="327:29">(<expr pos:start="327:17" pos:end="327:28"><name pos:start="327:17" pos:end="327:28"><name pos:start="327:17" pos:end="327:23">pl_copy</name><operator pos:start="327:24" pos:end="327:24">.</operator><name pos:start="327:25" pos:end="327:28">type</name></name></expr>)</condition> <block pos:start="327:31" pos:end="617:9">{<block_content pos:start="329:9" pos:end="615:35">

        <case pos:start="329:9" pos:end="329:26">case <expr pos:start="329:14" pos:end="329:25"><name pos:start="329:14" pos:end="329:25">PTYPE_STRING</name></expr>:</case> <block pos:start="329:28" pos:end="349:9">{<block_content pos:start="331:13" pos:end="347:18">

            <decl_stmt pos:start="331:13" pos:end="331:25"><decl pos:start="331:13" pos:end="331:24"><type pos:start="331:13" pos:end="331:21"><name pos:start="331:13" pos:end="331:19">strList</name> <modifier pos:start="331:21" pos:end="331:21">*</modifier></type><name pos:start="331:22" pos:end="331:24">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="333:13" pos:end="343:13"><if pos:start="333:13" pos:end="339:13">if <condition pos:start="333:16" pos:end="333:25">(<expr pos:start="333:17" pos:end="333:24"><name pos:start="333:17" pos:end="333:24">cur_head</name></expr>)</condition> <block pos:start="333:27" pos:end="339:13">{<block_content pos:start="335:17" pos:end="337:37">

                <expr_stmt pos:start="335:17" pos:end="335:31"><expr pos:start="335:17" pos:end="335:30"><name pos:start="335:17" pos:end="335:19">ptr</name> <operator pos:start="335:21" pos:end="335:21">=</operator> <name pos:start="335:23" pos:end="335:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="337:17" pos:end="337:37"><expr pos:start="337:17" pos:end="337:36"><name pos:start="337:17" pos:end="337:24">cur_head</name> <operator pos:start="337:26" pos:end="337:26">=</operator> <name pos:start="337:28" pos:end="337:36"><name pos:start="337:28" pos:end="337:30">ptr</name><operator pos:start="337:31" pos:end="337:32">-&gt;</operator><name pos:start="337:33" pos:end="337:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="339:15" pos:end="343:13">else <block pos:start="339:20" pos:end="343:13">{<block_content pos:start="341:17" pos:end="341:55">

                <expr_stmt pos:start="341:17" pos:end="341:55"><expr pos:start="341:17" pos:end="341:54"><name pos:start="341:17" pos:end="341:24">cur_head</name> <operator pos:start="341:26" pos:end="341:26">=</operator> <name pos:start="341:28" pos:end="341:30">ptr</name> <operator pos:start="341:32" pos:end="341:32">=</operator> <name pos:start="341:34" pos:end="341:54"><name pos:start="341:34" pos:end="341:40">pl_copy</name><operator pos:start="341:41" pos:end="341:41">.</operator><name pos:start="341:42" pos:end="341:46">value</name><operator pos:start="341:47" pos:end="341:47">.</operator><name pos:start="341:48" pos:end="341:54">strings</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:62"><expr pos:start="345:13" pos:end="345:61"><call pos:start="345:13" pos:end="345:61"><name pos:start="345:13" pos:end="345:27">g_assert_cmpstr</name><argument_list pos:start="345:28" pos:end="345:61">(<argument pos:start="345:29" pos:end="345:44"><expr pos:start="345:29" pos:end="345:44"><name pos:start="345:29" pos:end="345:44"><name pos:start="345:29" pos:end="345:30">pt</name><operator pos:start="345:31" pos:end="345:32">-&gt;</operator><name pos:start="345:33" pos:end="345:37">value</name><operator pos:start="345:38" pos:end="345:38">.</operator><name pos:start="345:39" pos:end="345:44">string</name></name></expr></argument>, <argument pos:start="345:47" pos:end="345:48"><expr pos:start="345:47" pos:end="345:48"><operator pos:start="345:47" pos:end="345:48">==</operator></expr></argument>, <argument pos:start="345:51" pos:end="345:60"><expr pos:start="345:51" pos:end="345:60"><name pos:start="345:51" pos:end="345:60"><name pos:start="345:51" pos:end="345:53">ptr</name><operator pos:start="345:54" pos:end="345:55">-&gt;</operator><name pos:start="345:56" pos:end="345:60">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="347:13" pos:end="347:18">break;</break>

        </block_content>}</block>

        <case pos:start="351:9" pos:end="351:27">case <expr pos:start="351:14" pos:end="351:26"><name pos:start="351:14" pos:end="351:26">PTYPE_INTEGER</name></expr>:</case> <block pos:start="351:29" pos:end="371:9">{<block_content pos:start="353:13" pos:end="369:18">

            <decl_stmt pos:start="353:13" pos:end="353:25"><decl pos:start="353:13" pos:end="353:24"><type pos:start="353:13" pos:end="353:21"><name pos:start="353:13" pos:end="353:19">intList</name> <modifier pos:start="353:21" pos:end="353:21">*</modifier></type><name pos:start="353:22" pos:end="353:24">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="355:13" pos:end="365:13"><if pos:start="355:13" pos:end="361:13">if <condition pos:start="355:16" pos:end="355:25">(<expr pos:start="355:17" pos:end="355:24"><name pos:start="355:17" pos:end="355:24">cur_head</name></expr>)</condition> <block pos:start="355:27" pos:end="361:13">{<block_content pos:start="357:17" pos:end="359:37">

                <expr_stmt pos:start="357:17" pos:end="357:31"><expr pos:start="357:17" pos:end="357:30"><name pos:start="357:17" pos:end="357:19">ptr</name> <operator pos:start="357:21" pos:end="357:21">=</operator> <name pos:start="357:23" pos:end="357:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:37"><expr pos:start="359:17" pos:end="359:36"><name pos:start="359:17" pos:end="359:24">cur_head</name> <operator pos:start="359:26" pos:end="359:26">=</operator> <name pos:start="359:28" pos:end="359:36"><name pos:start="359:28" pos:end="359:30">ptr</name><operator pos:start="359:31" pos:end="359:32">-&gt;</operator><name pos:start="359:33" pos:end="359:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="361:15" pos:end="365:13">else <block pos:start="361:20" pos:end="365:13">{<block_content pos:start="363:17" pos:end="363:56">

                <expr_stmt pos:start="363:17" pos:end="363:56"><expr pos:start="363:17" pos:end="363:55"><name pos:start="363:17" pos:end="363:24">cur_head</name> <operator pos:start="363:26" pos:end="363:26">=</operator> <name pos:start="363:28" pos:end="363:30">ptr</name> <operator pos:start="363:32" pos:end="363:32">=</operator> <name pos:start="363:34" pos:end="363:55"><name pos:start="363:34" pos:end="363:40">pl_copy</name><operator pos:start="363:41" pos:end="363:41">.</operator><name pos:start="363:42" pos:end="363:46">value</name><operator pos:start="363:47" pos:end="363:47">.</operator><name pos:start="363:48" pos:end="363:55">integers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:63"><expr pos:start="367:13" pos:end="367:62"><call pos:start="367:13" pos:end="367:62"><name pos:start="367:13" pos:end="367:27">g_assert_cmpint</name><argument_list pos:start="367:28" pos:end="367:62">(<argument pos:start="367:29" pos:end="367:45"><expr pos:start="367:29" pos:end="367:45"><name pos:start="367:29" pos:end="367:45"><name pos:start="367:29" pos:end="367:30">pt</name><operator pos:start="367:31" pos:end="367:32">-&gt;</operator><name pos:start="367:33" pos:end="367:37">value</name><operator pos:start="367:38" pos:end="367:38">.</operator><name pos:start="367:39" pos:end="367:45">integer</name></name></expr></argument>, <argument pos:start="367:48" pos:end="367:49"><expr pos:start="367:48" pos:end="367:49"><operator pos:start="367:48" pos:end="367:49">==</operator></expr></argument>, <argument pos:start="367:52" pos:end="367:61"><expr pos:start="367:52" pos:end="367:61"><name pos:start="367:52" pos:end="367:61"><name pos:start="367:52" pos:end="367:54">ptr</name><operator pos:start="367:55" pos:end="367:56">-&gt;</operator><name pos:start="367:57" pos:end="367:61">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="369:13" pos:end="369:18">break;</break>

        </block_content>}</block>

        <case pos:start="373:9" pos:end="373:22">case <expr pos:start="373:14" pos:end="373:21"><name pos:start="373:14" pos:end="373:21">PTYPE_S8</name></expr>:</case> <block pos:start="373:24" pos:end="393:9">{<block_content pos:start="375:13" pos:end="391:18">

            <decl_stmt pos:start="375:13" pos:end="375:26"><decl pos:start="375:13" pos:end="375:25"><type pos:start="375:13" pos:end="375:22"><name pos:start="375:13" pos:end="375:20">int8List</name> <modifier pos:start="375:22" pos:end="375:22">*</modifier></type><name pos:start="375:23" pos:end="375:25">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="377:13" pos:end="387:13"><if pos:start="377:13" pos:end="383:13">if <condition pos:start="377:16" pos:end="377:25">(<expr pos:start="377:17" pos:end="377:24"><name pos:start="377:17" pos:end="377:24">cur_head</name></expr>)</condition> <block pos:start="377:27" pos:end="383:13">{<block_content pos:start="379:17" pos:end="381:37">

                <expr_stmt pos:start="379:17" pos:end="379:31"><expr pos:start="379:17" pos:end="379:30"><name pos:start="379:17" pos:end="379:19">ptr</name> <operator pos:start="379:21" pos:end="379:21">=</operator> <name pos:start="379:23" pos:end="379:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:37"><expr pos:start="381:17" pos:end="381:36"><name pos:start="381:17" pos:end="381:24">cur_head</name> <operator pos:start="381:26" pos:end="381:26">=</operator> <name pos:start="381:28" pos:end="381:36"><name pos:start="381:28" pos:end="381:30">ptr</name><operator pos:start="381:31" pos:end="381:32">-&gt;</operator><name pos:start="381:33" pos:end="381:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="383:15" pos:end="387:13">else <block pos:start="383:20" pos:end="387:13">{<block_content pos:start="385:17" pos:end="385:59">

                <expr_stmt pos:start="385:17" pos:end="385:59"><expr pos:start="385:17" pos:end="385:58"><name pos:start="385:17" pos:end="385:24">cur_head</name> <operator pos:start="385:26" pos:end="385:26">=</operator> <name pos:start="385:28" pos:end="385:30">ptr</name> <operator pos:start="385:32" pos:end="385:32">=</operator> <name pos:start="385:34" pos:end="385:58"><name pos:start="385:34" pos:end="385:40">pl_copy</name><operator pos:start="385:41" pos:end="385:41">.</operator><name pos:start="385:42" pos:end="385:46">value</name><operator pos:start="385:47" pos:end="385:47">.</operator><name pos:start="385:48" pos:end="385:58">s8_integers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:58"><expr pos:start="389:13" pos:end="389:57"><call pos:start="389:13" pos:end="389:57"><name pos:start="389:13" pos:end="389:27">g_assert_cmpint</name><argument_list pos:start="389:28" pos:end="389:57">(<argument pos:start="389:29" pos:end="389:40"><expr pos:start="389:29" pos:end="389:40"><name pos:start="389:29" pos:end="389:40"><name pos:start="389:29" pos:end="389:30">pt</name><operator pos:start="389:31" pos:end="389:32">-&gt;</operator><name pos:start="389:33" pos:end="389:37">value</name><operator pos:start="389:38" pos:end="389:38">.</operator><name pos:start="389:39" pos:end="389:40">s8</name></name></expr></argument>, <argument pos:start="389:43" pos:end="389:44"><expr pos:start="389:43" pos:end="389:44"><operator pos:start="389:43" pos:end="389:44">==</operator></expr></argument>, <argument pos:start="389:47" pos:end="389:56"><expr pos:start="389:47" pos:end="389:56"><name pos:start="389:47" pos:end="389:56"><name pos:start="389:47" pos:end="389:49">ptr</name><operator pos:start="389:50" pos:end="389:51">-&gt;</operator><name pos:start="389:52" pos:end="389:56">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="391:13" pos:end="391:18">break;</break>

        </block_content>}</block>

        <case pos:start="395:9" pos:end="395:23">case <expr pos:start="395:14" pos:end="395:22"><name pos:start="395:14" pos:end="395:22">PTYPE_S16</name></expr>:</case> <block pos:start="395:25" pos:end="415:9">{<block_content pos:start="397:13" pos:end="413:18">

            <decl_stmt pos:start="397:13" pos:end="397:27"><decl pos:start="397:13" pos:end="397:26"><type pos:start="397:13" pos:end="397:23"><name pos:start="397:13" pos:end="397:21">int16List</name> <modifier pos:start="397:23" pos:end="397:23">*</modifier></type><name pos:start="397:24" pos:end="397:26">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="399:13" pos:end="409:13"><if pos:start="399:13" pos:end="405:13">if <condition pos:start="399:16" pos:end="399:25">(<expr pos:start="399:17" pos:end="399:24"><name pos:start="399:17" pos:end="399:24">cur_head</name></expr>)</condition> <block pos:start="399:27" pos:end="405:13">{<block_content pos:start="401:17" pos:end="403:37">

                <expr_stmt pos:start="401:17" pos:end="401:31"><expr pos:start="401:17" pos:end="401:30"><name pos:start="401:17" pos:end="401:19">ptr</name> <operator pos:start="401:21" pos:end="401:21">=</operator> <name pos:start="401:23" pos:end="401:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="403:17" pos:end="403:37"><expr pos:start="403:17" pos:end="403:36"><name pos:start="403:17" pos:end="403:24">cur_head</name> <operator pos:start="403:26" pos:end="403:26">=</operator> <name pos:start="403:28" pos:end="403:36"><name pos:start="403:28" pos:end="403:30">ptr</name><operator pos:start="403:31" pos:end="403:32">-&gt;</operator><name pos:start="403:33" pos:end="403:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="405:15" pos:end="409:13">else <block pos:start="405:20" pos:end="409:13">{<block_content pos:start="407:17" pos:end="407:60">

                <expr_stmt pos:start="407:17" pos:end="407:60"><expr pos:start="407:17" pos:end="407:59"><name pos:start="407:17" pos:end="407:24">cur_head</name> <operator pos:start="407:26" pos:end="407:26">=</operator> <name pos:start="407:28" pos:end="407:30">ptr</name> <operator pos:start="407:32" pos:end="407:32">=</operator> <name pos:start="407:34" pos:end="407:59"><name pos:start="407:34" pos:end="407:40">pl_copy</name><operator pos:start="407:41" pos:end="407:41">.</operator><name pos:start="407:42" pos:end="407:46">value</name><operator pos:start="407:47" pos:end="407:47">.</operator><name pos:start="407:48" pos:end="407:59">s16_integers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:59"><expr pos:start="411:13" pos:end="411:58"><call pos:start="411:13" pos:end="411:58"><name pos:start="411:13" pos:end="411:27">g_assert_cmpint</name><argument_list pos:start="411:28" pos:end="411:58">(<argument pos:start="411:29" pos:end="411:41"><expr pos:start="411:29" pos:end="411:41"><name pos:start="411:29" pos:end="411:41"><name pos:start="411:29" pos:end="411:30">pt</name><operator pos:start="411:31" pos:end="411:32">-&gt;</operator><name pos:start="411:33" pos:end="411:37">value</name><operator pos:start="411:38" pos:end="411:38">.</operator><name pos:start="411:39" pos:end="411:41">s16</name></name></expr></argument>, <argument pos:start="411:44" pos:end="411:45"><expr pos:start="411:44" pos:end="411:45"><operator pos:start="411:44" pos:end="411:45">==</operator></expr></argument>, <argument pos:start="411:48" pos:end="411:57"><expr pos:start="411:48" pos:end="411:57"><name pos:start="411:48" pos:end="411:57"><name pos:start="411:48" pos:end="411:50">ptr</name><operator pos:start="411:51" pos:end="411:52">-&gt;</operator><name pos:start="411:53" pos:end="411:57">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="413:13" pos:end="413:18">break;</break>

        </block_content>}</block>

        <case pos:start="417:9" pos:end="417:23">case <expr pos:start="417:14" pos:end="417:22"><name pos:start="417:14" pos:end="417:22">PTYPE_S32</name></expr>:</case> <block pos:start="417:25" pos:end="437:9">{<block_content pos:start="419:13" pos:end="435:18">

            <decl_stmt pos:start="419:13" pos:end="419:27"><decl pos:start="419:13" pos:end="419:26"><type pos:start="419:13" pos:end="419:23"><name pos:start="419:13" pos:end="419:21">int32List</name> <modifier pos:start="419:23" pos:end="419:23">*</modifier></type><name pos:start="419:24" pos:end="419:26">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="421:13" pos:end="431:13"><if pos:start="421:13" pos:end="427:13">if <condition pos:start="421:16" pos:end="421:25">(<expr pos:start="421:17" pos:end="421:24"><name pos:start="421:17" pos:end="421:24">cur_head</name></expr>)</condition> <block pos:start="421:27" pos:end="427:13">{<block_content pos:start="423:17" pos:end="425:37">

                <expr_stmt pos:start="423:17" pos:end="423:31"><expr pos:start="423:17" pos:end="423:30"><name pos:start="423:17" pos:end="423:19">ptr</name> <operator pos:start="423:21" pos:end="423:21">=</operator> <name pos:start="423:23" pos:end="423:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:37"><expr pos:start="425:17" pos:end="425:36"><name pos:start="425:17" pos:end="425:24">cur_head</name> <operator pos:start="425:26" pos:end="425:26">=</operator> <name pos:start="425:28" pos:end="425:36"><name pos:start="425:28" pos:end="425:30">ptr</name><operator pos:start="425:31" pos:end="425:32">-&gt;</operator><name pos:start="425:33" pos:end="425:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="427:15" pos:end="431:13">else <block pos:start="427:20" pos:end="431:13">{<block_content pos:start="429:17" pos:end="429:60">

                <expr_stmt pos:start="429:17" pos:end="429:60"><expr pos:start="429:17" pos:end="429:59"><name pos:start="429:17" pos:end="429:24">cur_head</name> <operator pos:start="429:26" pos:end="429:26">=</operator> <name pos:start="429:28" pos:end="429:30">ptr</name> <operator pos:start="429:32" pos:end="429:32">=</operator> <name pos:start="429:34" pos:end="429:59"><name pos:start="429:34" pos:end="429:40">pl_copy</name><operator pos:start="429:41" pos:end="429:41">.</operator><name pos:start="429:42" pos:end="429:46">value</name><operator pos:start="429:47" pos:end="429:47">.</operator><name pos:start="429:48" pos:end="429:59">s32_integers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="433:13" pos:end="433:59"><expr pos:start="433:13" pos:end="433:58"><call pos:start="433:13" pos:end="433:58"><name pos:start="433:13" pos:end="433:27">g_assert_cmpint</name><argument_list pos:start="433:28" pos:end="433:58">(<argument pos:start="433:29" pos:end="433:41"><expr pos:start="433:29" pos:end="433:41"><name pos:start="433:29" pos:end="433:41"><name pos:start="433:29" pos:end="433:30">pt</name><operator pos:start="433:31" pos:end="433:32">-&gt;</operator><name pos:start="433:33" pos:end="433:37">value</name><operator pos:start="433:38" pos:end="433:38">.</operator><name pos:start="433:39" pos:end="433:41">s32</name></name></expr></argument>, <argument pos:start="433:44" pos:end="433:45"><expr pos:start="433:44" pos:end="433:45"><operator pos:start="433:44" pos:end="433:45">==</operator></expr></argument>, <argument pos:start="433:48" pos:end="433:57"><expr pos:start="433:48" pos:end="433:57"><name pos:start="433:48" pos:end="433:57"><name pos:start="433:48" pos:end="433:50">ptr</name><operator pos:start="433:51" pos:end="433:52">-&gt;</operator><name pos:start="433:53" pos:end="433:57">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="435:13" pos:end="435:18">break;</break>

        </block_content>}</block>

        <case pos:start="439:9" pos:end="439:23">case <expr pos:start="439:14" pos:end="439:22"><name pos:start="439:14" pos:end="439:22">PTYPE_S64</name></expr>:</case> <block pos:start="439:25" pos:end="459:9">{<block_content pos:start="441:13" pos:end="457:18">

            <decl_stmt pos:start="441:13" pos:end="441:27"><decl pos:start="441:13" pos:end="441:26"><type pos:start="441:13" pos:end="441:23"><name pos:start="441:13" pos:end="441:21">int64List</name> <modifier pos:start="441:23" pos:end="441:23">*</modifier></type><name pos:start="441:24" pos:end="441:26">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="443:13" pos:end="453:13"><if pos:start="443:13" pos:end="449:13">if <condition pos:start="443:16" pos:end="443:25">(<expr pos:start="443:17" pos:end="443:24"><name pos:start="443:17" pos:end="443:24">cur_head</name></expr>)</condition> <block pos:start="443:27" pos:end="449:13">{<block_content pos:start="445:17" pos:end="447:37">

                <expr_stmt pos:start="445:17" pos:end="445:31"><expr pos:start="445:17" pos:end="445:30"><name pos:start="445:17" pos:end="445:19">ptr</name> <operator pos:start="445:21" pos:end="445:21">=</operator> <name pos:start="445:23" pos:end="445:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="447:17" pos:end="447:37"><expr pos:start="447:17" pos:end="447:36"><name pos:start="447:17" pos:end="447:24">cur_head</name> <operator pos:start="447:26" pos:end="447:26">=</operator> <name pos:start="447:28" pos:end="447:36"><name pos:start="447:28" pos:end="447:30">ptr</name><operator pos:start="447:31" pos:end="447:32">-&gt;</operator><name pos:start="447:33" pos:end="447:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="449:15" pos:end="453:13">else <block pos:start="449:20" pos:end="453:13">{<block_content pos:start="451:17" pos:end="451:60">

                <expr_stmt pos:start="451:17" pos:end="451:60"><expr pos:start="451:17" pos:end="451:59"><name pos:start="451:17" pos:end="451:24">cur_head</name> <operator pos:start="451:26" pos:end="451:26">=</operator> <name pos:start="451:28" pos:end="451:30">ptr</name> <operator pos:start="451:32" pos:end="451:32">=</operator> <name pos:start="451:34" pos:end="451:59"><name pos:start="451:34" pos:end="451:40">pl_copy</name><operator pos:start="451:41" pos:end="451:41">.</operator><name pos:start="451:42" pos:end="451:46">value</name><operator pos:start="451:47" pos:end="451:47">.</operator><name pos:start="451:48" pos:end="451:59">s64_integers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:59"><expr pos:start="455:13" pos:end="455:58"><call pos:start="455:13" pos:end="455:58"><name pos:start="455:13" pos:end="455:27">g_assert_cmpint</name><argument_list pos:start="455:28" pos:end="455:58">(<argument pos:start="455:29" pos:end="455:41"><expr pos:start="455:29" pos:end="455:41"><name pos:start="455:29" pos:end="455:41"><name pos:start="455:29" pos:end="455:30">pt</name><operator pos:start="455:31" pos:end="455:32">-&gt;</operator><name pos:start="455:33" pos:end="455:37">value</name><operator pos:start="455:38" pos:end="455:38">.</operator><name pos:start="455:39" pos:end="455:41">s64</name></name></expr></argument>, <argument pos:start="455:44" pos:end="455:45"><expr pos:start="455:44" pos:end="455:45"><operator pos:start="455:44" pos:end="455:45">==</operator></expr></argument>, <argument pos:start="455:48" pos:end="455:57"><expr pos:start="455:48" pos:end="455:57"><name pos:start="455:48" pos:end="455:57"><name pos:start="455:48" pos:end="455:50">ptr</name><operator pos:start="455:51" pos:end="455:52">-&gt;</operator><name pos:start="455:53" pos:end="455:57">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="457:13" pos:end="457:18">break;</break>

        </block_content>}</block>

        <case pos:start="461:9" pos:end="461:22">case <expr pos:start="461:14" pos:end="461:21"><name pos:start="461:14" pos:end="461:21">PTYPE_U8</name></expr>:</case> <block pos:start="461:24" pos:end="481:9">{<block_content pos:start="463:13" pos:end="479:18">

            <decl_stmt pos:start="463:13" pos:end="463:27"><decl pos:start="463:13" pos:end="463:26"><type pos:start="463:13" pos:end="463:23"><name pos:start="463:13" pos:end="463:21">uint8List</name> <modifier pos:start="463:23" pos:end="463:23">*</modifier></type><name pos:start="463:24" pos:end="463:26">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="465:13" pos:end="475:13"><if pos:start="465:13" pos:end="471:13">if <condition pos:start="465:16" pos:end="465:25">(<expr pos:start="465:17" pos:end="465:24"><name pos:start="465:17" pos:end="465:24">cur_head</name></expr>)</condition> <block pos:start="465:27" pos:end="471:13">{<block_content pos:start="467:17" pos:end="469:37">

                <expr_stmt pos:start="467:17" pos:end="467:31"><expr pos:start="467:17" pos:end="467:30"><name pos:start="467:17" pos:end="467:19">ptr</name> <operator pos:start="467:21" pos:end="467:21">=</operator> <name pos:start="467:23" pos:end="467:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="469:17" pos:end="469:37"><expr pos:start="469:17" pos:end="469:36"><name pos:start="469:17" pos:end="469:24">cur_head</name> <operator pos:start="469:26" pos:end="469:26">=</operator> <name pos:start="469:28" pos:end="469:36"><name pos:start="469:28" pos:end="469:30">ptr</name><operator pos:start="469:31" pos:end="469:32">-&gt;</operator><name pos:start="469:33" pos:end="469:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="471:15" pos:end="475:13">else <block pos:start="471:20" pos:end="475:13">{<block_content pos:start="473:17" pos:end="473:59">

                <expr_stmt pos:start="473:17" pos:end="473:59"><expr pos:start="473:17" pos:end="473:58"><name pos:start="473:17" pos:end="473:24">cur_head</name> <operator pos:start="473:26" pos:end="473:26">=</operator> <name pos:start="473:28" pos:end="473:30">ptr</name> <operator pos:start="473:32" pos:end="473:32">=</operator> <name pos:start="473:34" pos:end="473:58"><name pos:start="473:34" pos:end="473:40">pl_copy</name><operator pos:start="473:41" pos:end="473:41">.</operator><name pos:start="473:42" pos:end="473:46">value</name><operator pos:start="473:47" pos:end="473:47">.</operator><name pos:start="473:48" pos:end="473:58">u8_integers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="477:13" pos:end="477:58"><expr pos:start="477:13" pos:end="477:57"><call pos:start="477:13" pos:end="477:57"><name pos:start="477:13" pos:end="477:27">g_assert_cmpint</name><argument_list pos:start="477:28" pos:end="477:57">(<argument pos:start="477:29" pos:end="477:40"><expr pos:start="477:29" pos:end="477:40"><name pos:start="477:29" pos:end="477:40"><name pos:start="477:29" pos:end="477:30">pt</name><operator pos:start="477:31" pos:end="477:32">-&gt;</operator><name pos:start="477:33" pos:end="477:37">value</name><operator pos:start="477:38" pos:end="477:38">.</operator><name pos:start="477:39" pos:end="477:40">u8</name></name></expr></argument>, <argument pos:start="477:43" pos:end="477:44"><expr pos:start="477:43" pos:end="477:44"><operator pos:start="477:43" pos:end="477:44">==</operator></expr></argument>, <argument pos:start="477:47" pos:end="477:56"><expr pos:start="477:47" pos:end="477:56"><name pos:start="477:47" pos:end="477:56"><name pos:start="477:47" pos:end="477:49">ptr</name><operator pos:start="477:50" pos:end="477:51">-&gt;</operator><name pos:start="477:52" pos:end="477:56">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="479:13" pos:end="479:18">break;</break>

        </block_content>}</block>

        <case pos:start="483:9" pos:end="483:23">case <expr pos:start="483:14" pos:end="483:22"><name pos:start="483:14" pos:end="483:22">PTYPE_U16</name></expr>:</case> <block pos:start="483:25" pos:end="503:9">{<block_content pos:start="485:13" pos:end="501:18">

            <decl_stmt pos:start="485:13" pos:end="485:28"><decl pos:start="485:13" pos:end="485:27"><type pos:start="485:13" pos:end="485:24"><name pos:start="485:13" pos:end="485:22">uint16List</name> <modifier pos:start="485:24" pos:end="485:24">*</modifier></type><name pos:start="485:25" pos:end="485:27">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="487:13" pos:end="497:13"><if pos:start="487:13" pos:end="493:13">if <condition pos:start="487:16" pos:end="487:25">(<expr pos:start="487:17" pos:end="487:24"><name pos:start="487:17" pos:end="487:24">cur_head</name></expr>)</condition> <block pos:start="487:27" pos:end="493:13">{<block_content pos:start="489:17" pos:end="491:37">

                <expr_stmt pos:start="489:17" pos:end="489:31"><expr pos:start="489:17" pos:end="489:30"><name pos:start="489:17" pos:end="489:19">ptr</name> <operator pos:start="489:21" pos:end="489:21">=</operator> <name pos:start="489:23" pos:end="489:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="491:17" pos:end="491:37"><expr pos:start="491:17" pos:end="491:36"><name pos:start="491:17" pos:end="491:24">cur_head</name> <operator pos:start="491:26" pos:end="491:26">=</operator> <name pos:start="491:28" pos:end="491:36"><name pos:start="491:28" pos:end="491:30">ptr</name><operator pos:start="491:31" pos:end="491:32">-&gt;</operator><name pos:start="491:33" pos:end="491:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="493:15" pos:end="497:13">else <block pos:start="493:20" pos:end="497:13">{<block_content pos:start="495:17" pos:end="495:60">

                <expr_stmt pos:start="495:17" pos:end="495:60"><expr pos:start="495:17" pos:end="495:59"><name pos:start="495:17" pos:end="495:24">cur_head</name> <operator pos:start="495:26" pos:end="495:26">=</operator> <name pos:start="495:28" pos:end="495:30">ptr</name> <operator pos:start="495:32" pos:end="495:32">=</operator> <name pos:start="495:34" pos:end="495:59"><name pos:start="495:34" pos:end="495:40">pl_copy</name><operator pos:start="495:41" pos:end="495:41">.</operator><name pos:start="495:42" pos:end="495:46">value</name><operator pos:start="495:47" pos:end="495:47">.</operator><name pos:start="495:48" pos:end="495:59">u16_integers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="499:13" pos:end="499:59"><expr pos:start="499:13" pos:end="499:58"><call pos:start="499:13" pos:end="499:58"><name pos:start="499:13" pos:end="499:27">g_assert_cmpint</name><argument_list pos:start="499:28" pos:end="499:58">(<argument pos:start="499:29" pos:end="499:41"><expr pos:start="499:29" pos:end="499:41"><name pos:start="499:29" pos:end="499:41"><name pos:start="499:29" pos:end="499:30">pt</name><operator pos:start="499:31" pos:end="499:32">-&gt;</operator><name pos:start="499:33" pos:end="499:37">value</name><operator pos:start="499:38" pos:end="499:38">.</operator><name pos:start="499:39" pos:end="499:41">u16</name></name></expr></argument>, <argument pos:start="499:44" pos:end="499:45"><expr pos:start="499:44" pos:end="499:45"><operator pos:start="499:44" pos:end="499:45">==</operator></expr></argument>, <argument pos:start="499:48" pos:end="499:57"><expr pos:start="499:48" pos:end="499:57"><name pos:start="499:48" pos:end="499:57"><name pos:start="499:48" pos:end="499:50">ptr</name><operator pos:start="499:51" pos:end="499:52">-&gt;</operator><name pos:start="499:53" pos:end="499:57">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="501:13" pos:end="501:18">break;</break>

        </block_content>}</block>

        <case pos:start="505:9" pos:end="505:23">case <expr pos:start="505:14" pos:end="505:22"><name pos:start="505:14" pos:end="505:22">PTYPE_U32</name></expr>:</case> <block pos:start="505:25" pos:end="525:9">{<block_content pos:start="507:13" pos:end="523:18">

            <decl_stmt pos:start="507:13" pos:end="507:28"><decl pos:start="507:13" pos:end="507:27"><type pos:start="507:13" pos:end="507:24"><name pos:start="507:13" pos:end="507:22">uint32List</name> <modifier pos:start="507:24" pos:end="507:24">*</modifier></type><name pos:start="507:25" pos:end="507:27">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="509:13" pos:end="519:13"><if pos:start="509:13" pos:end="515:13">if <condition pos:start="509:16" pos:end="509:25">(<expr pos:start="509:17" pos:end="509:24"><name pos:start="509:17" pos:end="509:24">cur_head</name></expr>)</condition> <block pos:start="509:27" pos:end="515:13">{<block_content pos:start="511:17" pos:end="513:37">

                <expr_stmt pos:start="511:17" pos:end="511:31"><expr pos:start="511:17" pos:end="511:30"><name pos:start="511:17" pos:end="511:19">ptr</name> <operator pos:start="511:21" pos:end="511:21">=</operator> <name pos:start="511:23" pos:end="511:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="513:17" pos:end="513:37"><expr pos:start="513:17" pos:end="513:36"><name pos:start="513:17" pos:end="513:24">cur_head</name> <operator pos:start="513:26" pos:end="513:26">=</operator> <name pos:start="513:28" pos:end="513:36"><name pos:start="513:28" pos:end="513:30">ptr</name><operator pos:start="513:31" pos:end="513:32">-&gt;</operator><name pos:start="513:33" pos:end="513:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="515:15" pos:end="519:13">else <block pos:start="515:20" pos:end="519:13">{<block_content pos:start="517:17" pos:end="517:60">

                <expr_stmt pos:start="517:17" pos:end="517:60"><expr pos:start="517:17" pos:end="517:59"><name pos:start="517:17" pos:end="517:24">cur_head</name> <operator pos:start="517:26" pos:end="517:26">=</operator> <name pos:start="517:28" pos:end="517:30">ptr</name> <operator pos:start="517:32" pos:end="517:32">=</operator> <name pos:start="517:34" pos:end="517:59"><name pos:start="517:34" pos:end="517:40">pl_copy</name><operator pos:start="517:41" pos:end="517:41">.</operator><name pos:start="517:42" pos:end="517:46">value</name><operator pos:start="517:47" pos:end="517:47">.</operator><name pos:start="517:48" pos:end="517:59">u32_integers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="521:13" pos:end="521:59"><expr pos:start="521:13" pos:end="521:58"><call pos:start="521:13" pos:end="521:58"><name pos:start="521:13" pos:end="521:27">g_assert_cmpint</name><argument_list pos:start="521:28" pos:end="521:58">(<argument pos:start="521:29" pos:end="521:41"><expr pos:start="521:29" pos:end="521:41"><name pos:start="521:29" pos:end="521:41"><name pos:start="521:29" pos:end="521:30">pt</name><operator pos:start="521:31" pos:end="521:32">-&gt;</operator><name pos:start="521:33" pos:end="521:37">value</name><operator pos:start="521:38" pos:end="521:38">.</operator><name pos:start="521:39" pos:end="521:41">u32</name></name></expr></argument>, <argument pos:start="521:44" pos:end="521:45"><expr pos:start="521:44" pos:end="521:45"><operator pos:start="521:44" pos:end="521:45">==</operator></expr></argument>, <argument pos:start="521:48" pos:end="521:57"><expr pos:start="521:48" pos:end="521:57"><name pos:start="521:48" pos:end="521:57"><name pos:start="521:48" pos:end="521:50">ptr</name><operator pos:start="521:51" pos:end="521:52">-&gt;</operator><name pos:start="521:53" pos:end="521:57">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="523:13" pos:end="523:18">break;</break>

        </block_content>}</block>

        <case pos:start="527:9" pos:end="527:23">case <expr pos:start="527:14" pos:end="527:22"><name pos:start="527:14" pos:end="527:22">PTYPE_U64</name></expr>:</case> <block pos:start="527:25" pos:end="547:9">{<block_content pos:start="529:13" pos:end="545:18">

            <decl_stmt pos:start="529:13" pos:end="529:28"><decl pos:start="529:13" pos:end="529:27"><type pos:start="529:13" pos:end="529:24"><name pos:start="529:13" pos:end="529:22">uint64List</name> <modifier pos:start="529:24" pos:end="529:24">*</modifier></type><name pos:start="529:25" pos:end="529:27">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="531:13" pos:end="541:13"><if pos:start="531:13" pos:end="537:13">if <condition pos:start="531:16" pos:end="531:25">(<expr pos:start="531:17" pos:end="531:24"><name pos:start="531:17" pos:end="531:24">cur_head</name></expr>)</condition> <block pos:start="531:27" pos:end="537:13">{<block_content pos:start="533:17" pos:end="535:37">

                <expr_stmt pos:start="533:17" pos:end="533:31"><expr pos:start="533:17" pos:end="533:30"><name pos:start="533:17" pos:end="533:19">ptr</name> <operator pos:start="533:21" pos:end="533:21">=</operator> <name pos:start="533:23" pos:end="533:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="535:17" pos:end="535:37"><expr pos:start="535:17" pos:end="535:36"><name pos:start="535:17" pos:end="535:24">cur_head</name> <operator pos:start="535:26" pos:end="535:26">=</operator> <name pos:start="535:28" pos:end="535:36"><name pos:start="535:28" pos:end="535:30">ptr</name><operator pos:start="535:31" pos:end="535:32">-&gt;</operator><name pos:start="535:33" pos:end="535:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="537:15" pos:end="541:13">else <block pos:start="537:20" pos:end="541:13">{<block_content pos:start="539:17" pos:end="539:60">

                <expr_stmt pos:start="539:17" pos:end="539:60"><expr pos:start="539:17" pos:end="539:59"><name pos:start="539:17" pos:end="539:24">cur_head</name> <operator pos:start="539:26" pos:end="539:26">=</operator> <name pos:start="539:28" pos:end="539:30">ptr</name> <operator pos:start="539:32" pos:end="539:32">=</operator> <name pos:start="539:34" pos:end="539:59"><name pos:start="539:34" pos:end="539:40">pl_copy</name><operator pos:start="539:41" pos:end="539:41">.</operator><name pos:start="539:42" pos:end="539:46">value</name><operator pos:start="539:47" pos:end="539:47">.</operator><name pos:start="539:48" pos:end="539:59">u64_integers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="543:13" pos:end="543:59"><expr pos:start="543:13" pos:end="543:58"><call pos:start="543:13" pos:end="543:58"><name pos:start="543:13" pos:end="543:27">g_assert_cmpint</name><argument_list pos:start="543:28" pos:end="543:58">(<argument pos:start="543:29" pos:end="543:41"><expr pos:start="543:29" pos:end="543:41"><name pos:start="543:29" pos:end="543:41"><name pos:start="543:29" pos:end="543:30">pt</name><operator pos:start="543:31" pos:end="543:32">-&gt;</operator><name pos:start="543:33" pos:end="543:37">value</name><operator pos:start="543:38" pos:end="543:38">.</operator><name pos:start="543:39" pos:end="543:41">u64</name></name></expr></argument>, <argument pos:start="543:44" pos:end="543:45"><expr pos:start="543:44" pos:end="543:45"><operator pos:start="543:44" pos:end="543:45">==</operator></expr></argument>, <argument pos:start="543:48" pos:end="543:57"><expr pos:start="543:48" pos:end="543:57"><name pos:start="543:48" pos:end="543:57"><name pos:start="543:48" pos:end="543:50">ptr</name><operator pos:start="543:51" pos:end="543:52">-&gt;</operator><name pos:start="543:53" pos:end="543:57">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="545:13" pos:end="545:18">break;</break>

        </block_content>}</block>

        <case pos:start="549:9" pos:end="549:26">case <expr pos:start="549:14" pos:end="549:25"><name pos:start="549:14" pos:end="549:25">PTYPE_NUMBER</name></expr>:</case> <block pos:start="549:28" pos:end="589:9">{<block_content pos:start="551:13" pos:end="587:18">

            <decl_stmt pos:start="551:13" pos:end="551:28"><decl pos:start="551:13" pos:end="551:27"><type pos:start="551:13" pos:end="551:24"><name pos:start="551:13" pos:end="551:22">numberList</name> <modifier pos:start="551:24" pos:end="551:24">*</modifier></type><name pos:start="551:25" pos:end="551:27">ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="553:13" pos:end="553:56"><decl pos:start="553:13" pos:end="553:55"><type pos:start="553:13" pos:end="553:21"><name pos:start="553:13" pos:end="553:19">GString</name> <modifier pos:start="553:21" pos:end="553:21">*</modifier></type><name pos:start="553:22" pos:end="553:36">double_expected</name> <init pos:start="553:38" pos:end="553:55">= <expr pos:start="553:40" pos:end="553:55"><call pos:start="553:40" pos:end="553:55"><name pos:start="553:40" pos:end="553:51">g_string_new</name><argument_list pos:start="553:52" pos:end="553:55">(<argument pos:start="553:53" pos:end="553:54"><expr pos:start="553:53" pos:end="553:54"><literal type="string" pos:start="553:53" pos:end="553:54">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="555:13" pos:end="555:54"><decl pos:start="555:13" pos:end="555:53"><type pos:start="555:13" pos:end="555:21"><name pos:start="555:13" pos:end="555:19">GString</name> <modifier pos:start="555:21" pos:end="555:21">*</modifier></type><name pos:start="555:22" pos:end="555:34">double_actual</name> <init pos:start="555:36" pos:end="555:53">= <expr pos:start="555:38" pos:end="555:53"><call pos:start="555:38" pos:end="555:53"><name pos:start="555:38" pos:end="555:49">g_string_new</name><argument_list pos:start="555:50" pos:end="555:53">(<argument pos:start="555:51" pos:end="555:52"><expr pos:start="555:51" pos:end="555:52"><literal type="string" pos:start="555:51" pos:end="555:52">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="557:13" pos:end="567:13"><if pos:start="557:13" pos:end="563:13">if <condition pos:start="557:16" pos:end="557:25">(<expr pos:start="557:17" pos:end="557:24"><name pos:start="557:17" pos:end="557:24">cur_head</name></expr>)</condition> <block pos:start="557:27" pos:end="563:13">{<block_content pos:start="559:17" pos:end="561:37">

                <expr_stmt pos:start="559:17" pos:end="559:31"><expr pos:start="559:17" pos:end="559:30"><name pos:start="559:17" pos:end="559:19">ptr</name> <operator pos:start="559:21" pos:end="559:21">=</operator> <name pos:start="559:23" pos:end="559:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="561:17" pos:end="561:37"><expr pos:start="561:17" pos:end="561:36"><name pos:start="561:17" pos:end="561:24">cur_head</name> <operator pos:start="561:26" pos:end="561:26">=</operator> <name pos:start="561:28" pos:end="561:36"><name pos:start="561:28" pos:end="561:30">ptr</name><operator pos:start="561:31" pos:end="561:32">-&gt;</operator><name pos:start="561:33" pos:end="561:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="563:15" pos:end="567:13">else <block pos:start="563:20" pos:end="567:13">{<block_content pos:start="565:17" pos:end="565:55">

                <expr_stmt pos:start="565:17" pos:end="565:55"><expr pos:start="565:17" pos:end="565:54"><name pos:start="565:17" pos:end="565:24">cur_head</name> <operator pos:start="565:26" pos:end="565:26">=</operator> <name pos:start="565:28" pos:end="565:30">ptr</name> <operator pos:start="565:32" pos:end="565:32">=</operator> <name pos:start="565:34" pos:end="565:54"><name pos:start="565:34" pos:end="565:40">pl_copy</name><operator pos:start="565:41" pos:end="565:41">.</operator><name pos:start="565:42" pos:end="565:46">value</name><operator pos:start="565:47" pos:end="565:47">.</operator><name pos:start="565:48" pos:end="565:54">numbers</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="569:13" pos:end="575:15">/* we serialize with %f for our reference visitors, so rather than

             * fuzzy floating math to test "equality", just compare the

             * formatted values

             */</comment>

            <expr_stmt pos:start="577:13" pos:end="577:71"><expr pos:start="577:13" pos:end="577:70"><call pos:start="577:13" pos:end="577:70"><name pos:start="577:13" pos:end="577:27">g_string_printf</name><argument_list pos:start="577:28" pos:end="577:70">(<argument pos:start="577:29" pos:end="577:43"><expr pos:start="577:29" pos:end="577:43"><name pos:start="577:29" pos:end="577:43">double_expected</name></expr></argument>, <argument pos:start="577:46" pos:end="577:51"><expr pos:start="577:46" pos:end="577:51"><literal type="string" pos:start="577:46" pos:end="577:51">"%.6f"</literal></expr></argument>, <argument pos:start="577:54" pos:end="577:69"><expr pos:start="577:54" pos:end="577:69"><name pos:start="577:54" pos:end="577:69"><name pos:start="577:54" pos:end="577:55">pt</name><operator pos:start="577:56" pos:end="577:57">-&gt;</operator><name pos:start="577:58" pos:end="577:62">value</name><operator pos:start="577:63" pos:end="577:63">.</operator><name pos:start="577:64" pos:end="577:69">number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="579:13" pos:end="579:63"><expr pos:start="579:13" pos:end="579:62"><call pos:start="579:13" pos:end="579:62"><name pos:start="579:13" pos:end="579:27">g_string_printf</name><argument_list pos:start="579:28" pos:end="579:62">(<argument pos:start="579:29" pos:end="579:41"><expr pos:start="579:29" pos:end="579:41"><name pos:start="579:29" pos:end="579:41">double_actual</name></expr></argument>, <argument pos:start="579:44" pos:end="579:49"><expr pos:start="579:44" pos:end="579:49"><literal type="string" pos:start="579:44" pos:end="579:49">"%.6f"</literal></expr></argument>, <argument pos:start="579:52" pos:end="579:61"><expr pos:start="579:52" pos:end="579:61"><name pos:start="579:52" pos:end="579:61"><name pos:start="579:52" pos:end="579:54">ptr</name><operator pos:start="579:55" pos:end="579:56">-&gt;</operator><name pos:start="579:57" pos:end="579:61">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="581:13" pos:end="581:74"><expr pos:start="581:13" pos:end="581:73"><call pos:start="581:13" pos:end="581:73"><name pos:start="581:13" pos:end="581:27">g_assert_cmpstr</name><argument_list pos:start="581:28" pos:end="581:73">(<argument pos:start="581:29" pos:end="581:46"><expr pos:start="581:29" pos:end="581:46"><name pos:start="581:29" pos:end="581:46"><name pos:start="581:29" pos:end="581:41">double_actual</name><operator pos:start="581:42" pos:end="581:43">-&gt;</operator><name pos:start="581:44" pos:end="581:46">str</name></name></expr></argument>, <argument pos:start="581:49" pos:end="581:50"><expr pos:start="581:49" pos:end="581:50"><operator pos:start="581:49" pos:end="581:50">==</operator></expr></argument>, <argument pos:start="581:53" pos:end="581:72"><expr pos:start="581:53" pos:end="581:72"><name pos:start="581:53" pos:end="581:72"><name pos:start="581:53" pos:end="581:67">double_expected</name><operator pos:start="581:68" pos:end="581:69">-&gt;</operator><name pos:start="581:70" pos:end="581:72">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:49"><expr pos:start="583:13" pos:end="583:48"><call pos:start="583:13" pos:end="583:48"><name pos:start="583:13" pos:end="583:25">g_string_free</name><argument_list pos:start="583:26" pos:end="583:48">(<argument pos:start="583:27" pos:end="583:41"><expr pos:start="583:27" pos:end="583:41"><name pos:start="583:27" pos:end="583:41">double_expected</name></expr></argument>, <argument pos:start="583:44" pos:end="583:47"><expr pos:start="583:44" pos:end="583:47"><name pos:start="583:44" pos:end="583:47">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="585:13" pos:end="585:47"><expr pos:start="585:13" pos:end="585:46"><call pos:start="585:13" pos:end="585:46"><name pos:start="585:13" pos:end="585:25">g_string_free</name><argument_list pos:start="585:26" pos:end="585:46">(<argument pos:start="585:27" pos:end="585:39"><expr pos:start="585:27" pos:end="585:39"><name pos:start="585:27" pos:end="585:39">double_actual</name></expr></argument>, <argument pos:start="585:42" pos:end="585:45"><expr pos:start="585:42" pos:end="585:45"><name pos:start="585:42" pos:end="585:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="587:13" pos:end="587:18">break;</break>

        </block_content>}</block>

        <case pos:start="591:9" pos:end="591:27">case <expr pos:start="591:14" pos:end="591:26"><name pos:start="591:14" pos:end="591:26">PTYPE_BOOLEAN</name></expr>:</case> <block pos:start="591:29" pos:end="611:9">{<block_content pos:start="593:13" pos:end="609:18">

            <decl_stmt pos:start="593:13" pos:end="593:26"><decl pos:start="593:13" pos:end="593:25"><type pos:start="593:13" pos:end="593:22"><name pos:start="593:13" pos:end="593:20">boolList</name> <modifier pos:start="593:22" pos:end="593:22">*</modifier></type><name pos:start="593:23" pos:end="593:25">ptr</name></decl>;</decl_stmt>

            <if_stmt pos:start="595:13" pos:end="605:13"><if pos:start="595:13" pos:end="601:13">if <condition pos:start="595:16" pos:end="595:25">(<expr pos:start="595:17" pos:end="595:24"><name pos:start="595:17" pos:end="595:24">cur_head</name></expr>)</condition> <block pos:start="595:27" pos:end="601:13">{<block_content pos:start="597:17" pos:end="599:37">

                <expr_stmt pos:start="597:17" pos:end="597:31"><expr pos:start="597:17" pos:end="597:30"><name pos:start="597:17" pos:end="597:19">ptr</name> <operator pos:start="597:21" pos:end="597:21">=</operator> <name pos:start="597:23" pos:end="597:30">cur_head</name></expr>;</expr_stmt>

                <expr_stmt pos:start="599:17" pos:end="599:37"><expr pos:start="599:17" pos:end="599:36"><name pos:start="599:17" pos:end="599:24">cur_head</name> <operator pos:start="599:26" pos:end="599:26">=</operator> <name pos:start="599:28" pos:end="599:36"><name pos:start="599:28" pos:end="599:30">ptr</name><operator pos:start="599:31" pos:end="599:32">-&gt;</operator><name pos:start="599:33" pos:end="599:36">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="601:15" pos:end="605:13">else <block pos:start="601:20" pos:end="605:13">{<block_content pos:start="603:17" pos:end="603:56">

                <expr_stmt pos:start="603:17" pos:end="603:56"><expr pos:start="603:17" pos:end="603:55"><name pos:start="603:17" pos:end="603:24">cur_head</name> <operator pos:start="603:26" pos:end="603:26">=</operator> <name pos:start="603:28" pos:end="603:30">ptr</name> <operator pos:start="603:32" pos:end="603:32">=</operator> <name pos:start="603:34" pos:end="603:55"><name pos:start="603:34" pos:end="603:40">pl_copy</name><operator pos:start="603:41" pos:end="603:41">.</operator><name pos:start="603:42" pos:end="603:46">value</name><operator pos:start="603:47" pos:end="603:47">.</operator><name pos:start="603:48" pos:end="603:55">booleans</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="607:13" pos:end="607:67"><expr pos:start="607:13" pos:end="607:66"><call pos:start="607:13" pos:end="607:66"><name pos:start="607:13" pos:end="607:27">g_assert_cmpint</name><argument_list pos:start="607:28" pos:end="607:66">(<argument pos:start="607:29" pos:end="607:47"><expr pos:start="607:29" pos:end="607:47"><operator pos:start="607:29" pos:end="607:29">!</operator><operator pos:start="607:30" pos:end="607:30">!</operator><name pos:start="607:31" pos:end="607:47"><name pos:start="607:31" pos:end="607:32">pt</name><operator pos:start="607:33" pos:end="607:34">-&gt;</operator><name pos:start="607:35" pos:end="607:39">value</name><operator pos:start="607:40" pos:end="607:40">.</operator><name pos:start="607:41" pos:end="607:47">boolean</name></name></expr></argument>, <argument pos:start="607:50" pos:end="607:51"><expr pos:start="607:50" pos:end="607:51"><operator pos:start="607:50" pos:end="607:51">==</operator></expr></argument>, <argument pos:start="607:54" pos:end="607:65"><expr pos:start="607:54" pos:end="607:65"><operator pos:start="607:54" pos:end="607:54">!</operator><operator pos:start="607:55" pos:end="607:55">!</operator><name pos:start="607:56" pos:end="607:65"><name pos:start="607:56" pos:end="607:58">ptr</name><operator pos:start="607:59" pos:end="607:60">-&gt;</operator><name pos:start="607:61" pos:end="607:65">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="609:13" pos:end="609:18">break;</break>

        </block_content>}</block>

        <default pos:start="613:9" pos:end="613:16">default:</default>

            <expr_stmt pos:start="615:13" pos:end="615:35"><expr pos:start="615:13" pos:end="615:34"><call pos:start="615:13" pos:end="615:34"><name pos:start="615:13" pos:end="615:32">g_assert_not_reached</name><argument_list pos:start="615:33" pos:end="615:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="619:9" pos:end="619:12"><expr pos:start="619:9" pos:end="619:11"><name pos:start="619:9" pos:end="619:9">i</name><operator pos:start="619:10" pos:end="619:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="621:13" pos:end="621:22">(<expr pos:start="621:14" pos:end="621:21"><name pos:start="621:14" pos:end="621:21">cur_head</name></expr>)</condition>;</do>



    <expr_stmt pos:start="625:5" pos:end="625:31"><expr pos:start="625:5" pos:end="625:30"><call pos:start="625:5" pos:end="625:30"><name pos:start="625:5" pos:end="625:19">g_assert_cmpint</name><argument_list pos:start="625:20" pos:end="625:30">(<argument pos:start="625:21" pos:end="625:21"><expr pos:start="625:21" pos:end="625:21"><name pos:start="625:21" pos:end="625:21">i</name></expr></argument>, <argument pos:start="625:24" pos:end="625:25"><expr pos:start="625:24" pos:end="625:25"><operator pos:start="625:24" pos:end="625:25">==</operator></expr></argument>, <argument pos:start="625:28" pos:end="625:29"><expr pos:start="625:28" pos:end="625:29"><literal type="number" pos:start="625:28" pos:end="625:29">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="629:5" pos:end="629:33"><expr pos:start="629:5" pos:end="629:32"><call pos:start="629:5" pos:end="629:32"><name pos:start="629:5" pos:end="629:16"><name pos:start="629:5" pos:end="629:7">ops</name><operator pos:start="629:8" pos:end="629:9">-&gt;</operator><name pos:start="629:10" pos:end="629:16">cleanup</name></name><argument_list pos:start="629:17" pos:end="629:32">(<argument pos:start="629:18" pos:end="629:31"><expr pos:start="629:18" pos:end="629:31"><name pos:start="629:18" pos:end="629:31">serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="631:5" pos:end="631:52"><expr pos:start="631:5" pos:end="631:51"><call pos:start="631:5" pos:end="631:51"><name pos:start="631:5" pos:end="631:18">dealloc_helper</name><argument_list pos:start="631:19" pos:end="631:51">(<argument pos:start="631:20" pos:end="631:22"><expr pos:start="631:20" pos:end="631:22"><operator pos:start="631:20" pos:end="631:20">&amp;</operator><name pos:start="631:21" pos:end="631:22">pl</name></expr></argument>, <argument pos:start="631:25" pos:end="631:44"><expr pos:start="631:25" pos:end="631:44"><name pos:start="631:25" pos:end="631:44">visit_primitive_list</name></expr></argument>, <argument pos:start="631:47" pos:end="631:50"><expr pos:start="631:47" pos:end="631:50"><operator pos:start="631:47" pos:end="631:47">&amp;</operator><name pos:start="631:48" pos:end="631:50">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="633:5" pos:end="633:19"><expr pos:start="633:5" pos:end="633:18"><call pos:start="633:5" pos:end="633:18"><name pos:start="633:5" pos:end="633:12">g_assert</name><argument_list pos:start="633:13" pos:end="633:18">(<argument pos:start="633:14" pos:end="633:17"><expr pos:start="633:14" pos:end="633:17"><operator pos:start="633:14" pos:end="633:14">!</operator><name pos:start="633:15" pos:end="633:17">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="635:5" pos:end="635:57"><expr pos:start="635:5" pos:end="635:56"><call pos:start="635:5" pos:end="635:56"><name pos:start="635:5" pos:end="635:18">dealloc_helper</name><argument_list pos:start="635:19" pos:end="635:56">(<argument pos:start="635:20" pos:end="635:27"><expr pos:start="635:20" pos:end="635:27"><operator pos:start="635:20" pos:end="635:20">&amp;</operator><name pos:start="635:21" pos:end="635:27">pl_copy</name></expr></argument>, <argument pos:start="635:30" pos:end="635:49"><expr pos:start="635:30" pos:end="635:49"><name pos:start="635:30" pos:end="635:49">visit_primitive_list</name></expr></argument>, <argument pos:start="635:52" pos:end="635:55"><expr pos:start="635:52" pos:end="635:55"><operator pos:start="635:52" pos:end="635:52">&amp;</operator><name pos:start="635:53" pos:end="635:55">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="637:5" pos:end="637:19"><expr pos:start="637:5" pos:end="637:18"><call pos:start="637:5" pos:end="637:18"><name pos:start="637:5" pos:end="637:12">g_assert</name><argument_list pos:start="637:13" pos:end="637:18">(<argument pos:start="637:14" pos:end="637:17"><expr pos:start="637:14" pos:end="637:17"><operator pos:start="637:14" pos:end="637:14">!</operator><name pos:start="637:15" pos:end="637:17">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="639:5" pos:end="639:17"><expr pos:start="639:5" pos:end="639:16"><call pos:start="639:5" pos:end="639:16"><name pos:start="639:5" pos:end="639:10">g_free</name><argument_list pos:start="639:11" pos:end="639:16">(<argument pos:start="639:12" pos:end="639:15"><expr pos:start="639:12" pos:end="639:15"><name pos:start="639:12" pos:end="639:15">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
