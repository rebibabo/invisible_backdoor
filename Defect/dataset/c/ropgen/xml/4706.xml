<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4706.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:62"><name pos:start="1:1" pos:end="1:16">vcard_emul_login</name><argument_list pos:start="1:17" pos:end="1:62">(<argument pos:start="1:18" pos:end="1:28">VCard *card</argument>, <argument pos:start="1:31" pos:end="1:48">unsigned char *pin</argument>, <argument pos:start="1:51" pos:end="1:61">int pin_len</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:58">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">PK11SlotInfo</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:22">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:29">pin_string</name> <init pos:start="7:31" pos:end="7:36">= <expr pos:start="7:33" pos:end="7:36"><name pos:start="7:33" pos:end="7:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">SECStatus</name></type> <name pos:start="11:15" pos:end="11:16">rv</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:22">nss_emul_init</name></expr>)</condition> <block pos:start="15:25" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:62">

        <return pos:start="17:9" pos:end="17:62">return <expr pos:start="17:16" pos:end="17:61"><name pos:start="17:16" pos:end="17:61">VCARD7816_STATUS_ERROR_CONDITION_NOT_SATISFIED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:42"><expr pos:start="21:5" pos:end="21:41"><name pos:start="21:5" pos:end="21:8">slot</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:41"><name pos:start="21:12" pos:end="21:35">vcard_emul_card_get_slot</name><argument_list pos:start="21:36" pos:end="21:41">(<argument pos:start="21:37" pos:end="21:40"><expr pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:40">card</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block" pos:start="23:6" pos:end="31:10">/* We depend on the PKCS #11 module internal login state here because we

      * create a separate process to handle each guest instance. If we needed

      * to handle multiple guests from one process, then we would need to keep

      * a lot of extra state in our card structure

      * */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:37"><expr pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:14">pin_string</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:36"><name pos:start="33:18" pos:end="33:25">g_malloc</name><argument_list pos:start="33:26" pos:end="33:36">(<argument pos:start="33:27" pos:end="33:35"><expr pos:start="33:27" pos:end="33:35"><name pos:start="33:27" pos:end="33:33">pin_len</name><operator pos:start="33:34" pos:end="33:34">+</operator><literal type="number" pos:start="33:35" pos:end="33:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><call pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:10">memcpy</name><argument_list pos:start="35:11" pos:end="35:36">(<argument pos:start="35:12" pos:end="35:21"><expr pos:start="35:12" pos:end="35:21"><name pos:start="35:12" pos:end="35:21">pin_string</name></expr></argument>, <argument pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><name pos:start="35:24" pos:end="35:26">pin</name></expr></argument>, <argument pos:start="35:29" pos:end="35:35"><expr pos:start="35:29" pos:end="35:35"><name pos:start="35:29" pos:end="35:35">pin_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:14">pin_string</name><index pos:start="37:15" pos:end="37:23">[<expr pos:start="37:16" pos:end="37:22"><name pos:start="37:16" pos:end="37:22">pin_len</name></expr>]</index></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <literal type="number" pos:start="37:27" pos:end="37:27">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:44">/* handle CAC expanded pins correctly */</comment>

    <for pos:start="43:5" pos:end="47:5">for <control pos:start="43:9" pos:end="43:63">(<init pos:start="43:10" pos:end="43:23"><expr pos:start="43:10" pos:end="43:22"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <name pos:start="43:14" pos:end="43:20">pin_len</name><operator pos:start="43:21" pos:end="43:21">-</operator><literal type="number" pos:start="43:22" pos:end="43:22">1</literal></expr>;</init> <condition pos:start="43:25" pos:end="43:58"><expr pos:start="43:25" pos:end="43:57"><name pos:start="43:25" pos:end="43:25">i</name> <operator pos:start="43:27" pos:end="43:28">&gt;=</operator> <literal type="number" pos:start="43:30" pos:end="43:30">0</literal> <operator pos:start="43:32" pos:end="43:33">&amp;&amp;</operator> <operator pos:start="43:35" pos:end="43:35">(</operator><name pos:start="43:36" pos:end="43:48"><name pos:start="43:36" pos:end="43:45">pin_string</name><index pos:start="43:46" pos:end="43:48">[<expr pos:start="43:47" pos:end="43:47"><name pos:start="43:47" pos:end="43:47">i</name></expr>]</index></name> <operator pos:start="43:50" pos:end="43:51">==</operator> <literal type="number" pos:start="43:53" pos:end="43:56">0xff</literal><operator pos:start="43:57" pos:end="43:57">)</operator></expr>;</condition> <incr pos:start="43:60" pos:end="43:62"><expr pos:start="43:60" pos:end="43:62"><name pos:start="43:60" pos:end="43:60">i</name><operator pos:start="43:61" pos:end="43:62">--</operator></expr></incr>)</control> <block pos:start="43:65" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:26">

        <expr_stmt pos:start="45:9" pos:end="45:26"><expr pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:18">pin_string</name><index pos:start="45:19" pos:end="45:21">[<expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">i</name></expr>]</index></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <literal type="number" pos:start="45:25" pos:end="45:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="51:5" pos:end="51:55"><expr pos:start="51:5" pos:end="51:54"><name pos:start="51:5" pos:end="51:6">rv</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="51:54"><name pos:start="51:10" pos:end="51:26">PK11_Authenticate</name><argument_list pos:start="51:27" pos:end="51:54">(<argument pos:start="51:28" pos:end="51:31"><expr pos:start="51:28" pos:end="51:31"><name pos:start="51:28" pos:end="51:31">slot</name></expr></argument>, <argument pos:start="51:34" pos:end="51:41"><expr pos:start="51:34" pos:end="51:41"><name pos:start="51:34" pos:end="51:41">PR_FALSE</name></expr></argument>, <argument pos:start="51:44" pos:end="51:53"><expr pos:start="51:44" pos:end="51:53"><name pos:start="51:44" pos:end="51:53">pin_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><call pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:10">memset</name><argument_list pos:start="53:11" pos:end="53:34">(<argument pos:start="53:12" pos:end="53:21"><expr pos:start="53:12" pos:end="53:21"><name pos:start="53:12" pos:end="53:21">pin_string</name></expr></argument>, <argument pos:start="53:24" pos:end="53:24"><expr pos:start="53:24" pos:end="53:24"><literal type="number" pos:start="53:24" pos:end="53:24">0</literal></expr></argument>, <argument pos:start="53:27" pos:end="53:33"><expr pos:start="53:27" pos:end="53:33"><name pos:start="53:27" pos:end="53:33">pin_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="53:38" pos:end="55:56">/* don't let the pin hang around in memory

                                        to be snooped */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:23"><expr pos:start="57:5" pos:end="57:22"><call pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:10">g_free</name><argument_list pos:start="57:11" pos:end="57:22">(<argument pos:start="57:12" pos:end="57:21"><expr pos:start="57:12" pos:end="57:21"><name pos:start="57:12" pos:end="57:21">pin_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:25">(<expr pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:10">rv</name> <operator pos:start="59:12" pos:end="59:13">==</operator> <name pos:start="59:15" pos:end="59:24">SECSuccess</name></expr>)</condition> <block pos:start="59:27" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:40">

        <return pos:start="61:9" pos:end="61:40">return <expr pos:start="61:16" pos:end="61:39"><name pos:start="61:16" pos:end="61:39">VCARD7816_STATUS_SUCCESS</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="65:5" pos:end="65:43">/* map the error from port get error */</comment>

    <return pos:start="67:5" pos:end="67:58">return <expr pos:start="67:12" pos:end="67:57"><name pos:start="67:12" pos:end="67:57">VCARD7816_STATUS_ERROR_CONDITION_NOT_SATISFIED</name></expr>;</return>

</block_content>}</block>
</unit>
