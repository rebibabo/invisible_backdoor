<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3053.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">acpi_build_update</name><parameter_list pos:start="1:30" pos:end="1:66">(<parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:48">build_opaque</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:65">offset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:45">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AcpiBuildState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:31">build_state</name> <init pos:start="5:33" pos:end="5:46">= <expr pos:start="5:35" pos:end="5:46"><name pos:start="5:35" pos:end="5:46">build_opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19">AcpiBuildTables</name></type> <name pos:start="7:21" pos:end="7:26">tables</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:63">/* No state to update or already patched? Nothing to do. */</comment>

    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:45">(<expr pos:start="13:9" pos:end="13:44"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:20">build_state</name> <operator pos:start="13:22" pos:end="13:23">||</operator> <name pos:start="13:25" pos:end="13:44"><name pos:start="13:25" pos:end="13:35">build_state</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:44">patched</name></name></expr>)</condition> <block pos:start="13:47" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:15">build_state</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:24">patched</name></name> <operator pos:start="19:26" pos:end="19:26">=</operator> <literal type="number" pos:start="19:28" pos:end="19:28">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><call pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:26">acpi_build_tables_init</name><argument_list pos:start="23:27" pos:end="23:35">(<argument pos:start="23:28" pos:end="23:34"><expr pos:start="23:28" pos:end="23:34"><operator pos:start="23:28" pos:end="23:28">&amp;</operator><name pos:start="23:29" pos:end="23:34">tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:49"><expr pos:start="27:5" pos:end="27:48"><call pos:start="27:5" pos:end="27:48"><name pos:start="27:5" pos:end="27:14">acpi_build</name><argument_list pos:start="27:15" pos:end="27:48">(<argument pos:start="27:16" pos:end="27:38"><expr pos:start="27:16" pos:end="27:38"><name pos:start="27:16" pos:end="27:38"><name pos:start="27:16" pos:end="27:26">build_state</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:38">guest_info</name></name></expr></argument>, <argument pos:start="27:41" pos:end="27:47"><expr pos:start="27:41" pos:end="27:47"><operator pos:start="27:41" pos:end="27:41">&amp;</operator><name pos:start="27:42" pos:end="27:47">tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:72"><expr pos:start="31:5" pos:end="31:71"><call pos:start="31:5" pos:end="31:71"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:71">(<argument pos:start="31:12" pos:end="31:70"><expr pos:start="31:12" pos:end="31:70"><call pos:start="31:12" pos:end="31:43"><name pos:start="31:12" pos:end="31:24">acpi_data_len</name><argument_list pos:start="31:25" pos:end="31:43">(<argument pos:start="31:26" pos:end="31:42"><expr pos:start="31:26" pos:end="31:42"><name pos:start="31:26" pos:end="31:42"><name pos:start="31:26" pos:end="31:31">tables</name><operator pos:start="31:32" pos:end="31:32">.</operator><name pos:start="31:33" pos:end="31:42">table_data</name></name></expr></argument>)</argument_list></call> <operator pos:start="31:45" pos:end="31:46">==</operator> <name pos:start="31:48" pos:end="31:70"><name pos:start="31:48" pos:end="31:58">build_state</name><operator pos:start="31:59" pos:end="31:60">-&gt;</operator><name pos:start="31:61" pos:end="31:70">table_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:77">/* Make sure RAM size is correct - in case it got changed by migration */</comment>

    <expr_stmt pos:start="37:5" pos:end="39:34"><expr pos:start="37:5" pos:end="39:33"><call pos:start="37:5" pos:end="39:33"><name pos:start="37:5" pos:end="37:19">qemu_ram_resize</name><argument_list pos:start="37:20" pos:end="39:33">(<argument pos:start="37:21" pos:end="37:42"><expr pos:start="37:21" pos:end="37:42"><name pos:start="37:21" pos:end="37:42"><name pos:start="37:21" pos:end="37:31">build_state</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:42">table_ram</name></name></expr></argument>, <argument pos:start="37:45" pos:end="37:67"><expr pos:start="37:45" pos:end="37:67"><name pos:start="37:45" pos:end="37:67"><name pos:start="37:45" pos:end="37:55">build_state</name><operator pos:start="37:56" pos:end="37:57">-&gt;</operator><name pos:start="37:58" pos:end="37:67">table_size</name></name></expr></argument>,

                    <argument pos:start="39:21" pos:end="39:32"><expr pos:start="39:21" pos:end="39:32"><operator pos:start="39:21" pos:end="39:21">&amp;</operator><name pos:start="39:22" pos:end="39:32">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="45:36"><expr pos:start="43:5" pos:end="45:35"><call pos:start="43:5" pos:end="45:35"><name pos:start="43:5" pos:end="43:10">memcpy</name><argument_list pos:start="43:11" pos:end="45:35">(<argument pos:start="43:12" pos:end="43:51"><expr pos:start="43:12" pos:end="43:51"><call pos:start="43:12" pos:end="43:51"><name pos:start="43:12" pos:end="43:27">qemu_get_ram_ptr</name><argument_list pos:start="43:28" pos:end="43:51">(<argument pos:start="43:29" pos:end="43:50"><expr pos:start="43:29" pos:end="43:50"><name pos:start="43:29" pos:end="43:50"><name pos:start="43:29" pos:end="43:39">build_state</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:50">table_ram</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:54" pos:end="43:76"><expr pos:start="43:54" pos:end="43:76"><name pos:start="43:54" pos:end="43:76"><name pos:start="43:54" pos:end="43:59">tables</name><operator pos:start="43:60" pos:end="43:60">.</operator><name pos:start="43:61" pos:end="43:70">table_data</name><operator pos:start="43:71" pos:end="43:72">-&gt;</operator><name pos:start="43:73" pos:end="43:76">data</name></name></expr></argument>,

           <argument pos:start="45:12" pos:end="45:34"><expr pos:start="45:12" pos:end="45:34"><name pos:start="45:12" pos:end="45:34"><name pos:start="45:12" pos:end="45:22">build_state</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:34">table_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:77"><expr pos:start="47:5" pos:end="47:76"><call pos:start="47:5" pos:end="47:76"><name pos:start="47:5" pos:end="47:10">memcpy</name><argument_list pos:start="47:11" pos:end="47:76">(<argument pos:start="47:12" pos:end="47:28"><expr pos:start="47:12" pos:end="47:28"><name pos:start="47:12" pos:end="47:28"><name pos:start="47:12" pos:end="47:22">build_state</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:28">rsdp</name></name></expr></argument>, <argument pos:start="47:31" pos:end="47:47"><expr pos:start="47:31" pos:end="47:47"><name pos:start="47:31" pos:end="47:47"><name pos:start="47:31" pos:end="47:36">tables</name><operator pos:start="47:37" pos:end="47:37">.</operator><name pos:start="47:38" pos:end="47:41">rsdp</name><operator pos:start="47:42" pos:end="47:43">-&gt;</operator><name pos:start="47:44" pos:end="47:47">data</name></name></expr></argument>, <argument pos:start="47:50" pos:end="47:75"><expr pos:start="47:50" pos:end="47:75"><call pos:start="47:50" pos:end="47:75"><name pos:start="47:50" pos:end="47:62">acpi_data_len</name><argument_list pos:start="47:63" pos:end="47:75">(<argument pos:start="47:64" pos:end="47:74"><expr pos:start="47:64" pos:end="47:74"><name pos:start="47:64" pos:end="47:74"><name pos:start="47:64" pos:end="47:69">tables</name><operator pos:start="47:70" pos:end="47:70">.</operator><name pos:start="47:71" pos:end="47:74">rsdp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:37"><expr pos:start="49:5" pos:end="51:36"><call pos:start="49:5" pos:end="51:36"><name pos:start="49:5" pos:end="49:10">memcpy</name><argument_list pos:start="49:11" pos:end="51:36">(<argument pos:start="49:12" pos:end="49:52"><expr pos:start="49:12" pos:end="49:52"><call pos:start="49:12" pos:end="49:52"><name pos:start="49:12" pos:end="49:27">qemu_get_ram_ptr</name><argument_list pos:start="49:28" pos:end="49:52">(<argument pos:start="49:29" pos:end="49:51"><expr pos:start="49:29" pos:end="49:51"><name pos:start="49:29" pos:end="49:51"><name pos:start="49:29" pos:end="49:39">build_state</name><operator pos:start="49:40" pos:end="49:41">-&gt;</operator><name pos:start="49:42" pos:end="49:51">linker_ram</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:55" pos:end="49:73"><expr pos:start="49:55" pos:end="49:73"><name pos:start="49:55" pos:end="49:73"><name pos:start="49:55" pos:end="49:60">tables</name><operator pos:start="49:61" pos:end="49:61">.</operator><name pos:start="49:62" pos:end="49:67">linker</name><operator pos:start="49:68" pos:end="49:69">-&gt;</operator><name pos:start="49:70" pos:end="49:73">data</name></name></expr></argument>,

           <argument pos:start="51:12" pos:end="51:35"><expr pos:start="51:12" pos:end="51:35"><name pos:start="51:12" pos:end="51:35"><name pos:start="51:12" pos:end="51:22">build_state</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:35">linker_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:72"><expr pos:start="55:5" pos:end="57:71"><call pos:start="55:5" pos:end="57:71"><name pos:start="55:5" pos:end="55:46">cpu_physical_memory_set_dirty_range_nocode</name><argument_list pos:start="55:47" pos:end="57:71">(<argument pos:start="55:48" pos:end="55:69"><expr pos:start="55:48" pos:end="55:69"><name pos:start="55:48" pos:end="55:69"><name pos:start="55:48" pos:end="55:58">build_state</name><operator pos:start="55:59" pos:end="55:60">-&gt;</operator><name pos:start="55:61" pos:end="55:69">table_ram</name></name></expr></argument>,

                                               <argument pos:start="57:48" pos:end="57:70"><expr pos:start="57:48" pos:end="57:70"><name pos:start="57:48" pos:end="57:70"><name pos:start="57:48" pos:end="57:58">build_state</name><operator pos:start="57:59" pos:end="57:60">-&gt;</operator><name pos:start="57:61" pos:end="57:70">table_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:45"><expr pos:start="61:5" pos:end="61:44"><call pos:start="61:5" pos:end="61:44"><name pos:start="61:5" pos:end="61:29">acpi_build_tables_cleanup</name><argument_list pos:start="61:30" pos:end="61:44">(<argument pos:start="61:31" pos:end="61:37"><expr pos:start="61:31" pos:end="61:37"><operator pos:start="61:31" pos:end="61:31">&amp;</operator><name pos:start="61:32" pos:end="61:37">tables</name></expr></argument>, <argument pos:start="61:40" pos:end="61:43"><expr pos:start="61:40" pos:end="61:43"><name pos:start="61:40" pos:end="61:43">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
