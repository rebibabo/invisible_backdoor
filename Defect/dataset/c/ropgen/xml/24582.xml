<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24582.c" pos:tabs="8"><function pos:start="1:1" pos:end="44:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:40">get_a32_user_mem_index</name><parameter_list pos:start="1:41" pos:end="1:57">(<parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:53">DisasContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="44:1">{<block_content pos:start="15:5" pos:end="42:5">

    <comment type="block" pos:start="5:5" pos:end="13:7">/* Return the core mmu_idx to use for A32/T32 "unprivileged load/store"

     * insns:

     *  if PL2, UNPREDICTABLE (we choose to implement as if PL0)

     *  otherwise, access as if at PL0.

     */</comment>

    <switch pos:start="15:5" pos:end="42:5">switch <condition pos:start="15:12" pos:end="15:23">(<expr pos:start="15:13" pos:end="15:22"><name pos:start="15:13" pos:end="15:22"><name pos:start="15:13" pos:end="15:13">s</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:22">mmu_idx</name></name></expr>)</condition> <block pos:start="15:25" pos:end="42:5">{<block_content pos:start="17:5" pos:end="40:31">

    <case pos:start="17:5" pos:end="17:24">case <expr pos:start="17:10" pos:end="17:23"><name pos:start="17:10" pos:end="17:23">ARMMMUIdx_S1E2</name></expr>:</case>        <comment type="block" pos:start="17:33" pos:end="17:63">/* this one is UNPREDICTABLE */</comment>

    <case pos:start="19:5" pos:end="19:27">case <expr pos:start="19:10" pos:end="19:26"><name pos:start="19:10" pos:end="19:26">ARMMMUIdx_S12NSE0</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:27">case <expr pos:start="21:10" pos:end="21:26"><name pos:start="21:10" pos:end="21:26">ARMMMUIdx_S12NSE1</name></expr>:</case>

        <return pos:start="23:9" pos:end="23:54">return <expr pos:start="23:16" pos:end="23:53"><call pos:start="23:16" pos:end="23:53"><name pos:start="23:16" pos:end="23:34">arm_to_core_mmu_idx</name><argument_list pos:start="23:35" pos:end="23:53">(<argument pos:start="23:36" pos:end="23:52"><expr pos:start="23:36" pos:end="23:52"><name pos:start="23:36" pos:end="23:52">ARMMMUIdx_S12NSE0</name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="25:5" pos:end="25:24">case <expr pos:start="25:10" pos:end="25:23"><name pos:start="25:10" pos:end="25:23">ARMMMUIdx_S1E3</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:25">case <expr pos:start="27:10" pos:end="27:24"><name pos:start="27:10" pos:end="27:24">ARMMMUIdx_S1SE0</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:25">case <expr pos:start="29:10" pos:end="29:24"><name pos:start="29:10" pos:end="29:24">ARMMMUIdx_S1SE1</name></expr>:</case>

        <return pos:start="31:9" pos:end="31:52">return <expr pos:start="31:16" pos:end="31:51"><call pos:start="31:16" pos:end="31:51"><name pos:start="31:16" pos:end="31:34">arm_to_core_mmu_idx</name><argument_list pos:start="31:35" pos:end="31:51">(<argument pos:start="31:36" pos:end="31:50"><expr pos:start="31:36" pos:end="31:50"><name pos:start="31:36" pos:end="31:50">ARMMMUIdx_S1SE0</name></expr></argument>)</argument_list></call></expr>;</return>




    <case pos:start="36:5" pos:end="36:24">case <expr pos:start="36:10" pos:end="36:23"><name pos:start="36:10" pos:end="36:23">ARMMMUIdx_S2NS</name></expr>:</case>

    <default pos:start="38:5" pos:end="38:12">default:</default>

        <expr_stmt pos:start="40:9" pos:end="40:31"><expr pos:start="40:9" pos:end="40:30"><call pos:start="40:9" pos:end="40:30"><name pos:start="40:9" pos:end="40:28">g_assert_not_reached</name><argument_list pos:start="40:29" pos:end="40:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function></unit>
