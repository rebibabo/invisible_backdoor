<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26187.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">usb_net_handle_dataout</name><parameter_list pos:start="1:35" pos:end="1:64">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:46">USBNetState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:60">USBPacket</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:54">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">sz</name> <init pos:start="5:12" pos:end="5:44">= <expr pos:start="5:14" pos:end="5:44"><sizeof pos:start="5:14" pos:end="5:31">sizeof<argument_list pos:start="5:20" pos:end="5:31">(<argument pos:start="5:21" pos:end="5:30"><expr pos:start="5:21" pos:end="5:30"><name pos:start="5:21" pos:end="5:30"><name pos:start="5:21" pos:end="5:21">s</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:30">out_buf</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="5:33" pos:end="5:33">-</operator> <name pos:start="5:35" pos:end="5:44"><name pos:start="5:35" pos:end="5:35">s</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:44">out_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="9:56"><decl pos:start="7:5" pos:end="9:55"><type pos:start="7:5" pos:end="7:34"><name pos:start="7:5" pos:end="7:32"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:32">rndis_packet_msg_type</name></name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:37">msg</name> <init pos:start="7:39" pos:end="9:55">=

            <expr pos:start="9:13" pos:end="9:55"><operator pos:start="9:13" pos:end="9:13">(</operator>struct <name pos:start="9:21" pos:end="9:41">rndis_packet_msg_type</name> <operator pos:start="9:43" pos:end="9:43">*</operator><operator pos:start="9:44" pos:end="9:44">)</operator> <name pos:start="9:46" pos:end="9:55"><name pos:start="9:46" pos:end="9:46">s</name><operator pos:start="9:47" pos:end="9:48">-&gt;</operator><name pos:start="9:49" pos:end="9:55">out_buf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">len</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="15:1" pos:end="15:20">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:20">TRAFFIC_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="17:5" pos:end="17:63"><expr pos:start="17:5" pos:end="17:62"><call pos:start="17:5" pos:end="17:62"><name pos:start="17:5" pos:end="17:11">fprintf</name><argument_list pos:start="17:12" pos:end="17:62">(<argument pos:start="17:13" pos:end="17:18"><expr pos:start="17:13" pos:end="17:18"><name pos:start="17:13" pos:end="17:18">stderr</name></expr></argument>, <argument pos:start="17:21" pos:end="17:48"><expr pos:start="17:21" pos:end="17:48"><literal type="string" pos:start="17:21" pos:end="17:48">"usbnet: data out len %zu\n"</literal></expr></argument>, <argument pos:start="17:51" pos:end="17:61"><expr pos:start="17:51" pos:end="17:61"><name pos:start="17:51" pos:end="17:61"><name pos:start="17:51" pos:end="17:51">p</name><operator pos:start="17:52" pos:end="17:53">-&gt;</operator><name pos:start="17:54" pos:end="17:56">iov</name><operator pos:start="17:57" pos:end="17:57">.</operator><name pos:start="17:58" pos:end="17:61">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:71"><call pos:start="19:5" pos:end="19:71"><name pos:start="19:5" pos:end="19:15">iov_hexdump</name><argument_list pos:start="19:16" pos:end="19:71">(<argument pos:start="19:17" pos:end="19:26"><expr pos:start="19:17" pos:end="19:26"><name pos:start="19:17" pos:end="19:26"><name pos:start="19:17" pos:end="19:17">p</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:22">iov</name><operator pos:start="19:23" pos:end="19:23">.</operator><name pos:start="19:24" pos:end="19:26">iov</name></name></expr></argument>, <argument pos:start="19:29" pos:end="19:39"><expr pos:start="19:29" pos:end="19:39"><name pos:start="19:29" pos:end="19:39"><name pos:start="19:29" pos:end="19:29">p</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:34">iov</name><operator pos:start="19:35" pos:end="19:35">.</operator><name pos:start="19:36" pos:end="19:39">niov</name></name></expr></argument>, <argument pos:start="19:42" pos:end="19:47"><expr pos:start="19:42" pos:end="19:47"><name pos:start="19:42" pos:end="19:47">stderr</name></expr></argument>, <argument pos:start="19:50" pos:end="19:57"><expr pos:start="19:50" pos:end="19:57"><literal type="string" pos:start="19:50" pos:end="19:57">"usbnet"</literal></expr></argument>, <argument pos:start="19:60" pos:end="19:70"><expr pos:start="19:60" pos:end="19:70"><name pos:start="19:60" pos:end="19:70"><name pos:start="19:60" pos:end="19:60">p</name><operator pos:start="19:61" pos:end="19:62">-&gt;</operator><name pos:start="19:63" pos:end="19:65">iov</name><operator pos:start="19:66" pos:end="19:66">.</operator><name pos:start="19:67" pos:end="19:70">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:25">(<expr pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:10">sz</name> <operator pos:start="25:12" pos:end="25:12">&gt;</operator> <name pos:start="25:14" pos:end="25:24"><name pos:start="25:14" pos:end="25:14">p</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:19">iov</name><operator pos:start="25:20" pos:end="25:20">.</operator><name pos:start="25:21" pos:end="25:24">size</name></name></expr>)</condition> <block pos:start="25:27" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:25">

        <expr_stmt pos:start="27:9" pos:end="27:25"><expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:10">sz</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:24"><name pos:start="27:14" pos:end="27:14">p</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:19">iov</name><operator pos:start="27:20" pos:end="27:20">.</operator><name pos:start="27:21" pos:end="27:24">size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><call pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:19">usb_packet_copy</name><argument_list pos:start="31:20" pos:end="31:51">(<argument pos:start="31:21" pos:end="31:21"><expr pos:start="31:21" pos:end="31:21"><name pos:start="31:21" pos:end="31:21">p</name></expr></argument>, <argument pos:start="31:24" pos:end="31:46"><expr pos:start="31:24" pos:end="31:46"><operator pos:start="31:24" pos:end="31:24">&amp;</operator><name pos:start="31:25" pos:end="31:46"><name pos:start="31:25" pos:end="31:25">s</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:34">out_buf</name><index pos:start="31:35" pos:end="31:46">[<expr pos:start="31:36" pos:end="31:45"><name pos:start="31:36" pos:end="31:45"><name pos:start="31:36" pos:end="31:36">s</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:45">out_ptr</name></name></expr>]</index></name></expr></argument>, <argument pos:start="31:49" pos:end="31:50"><expr pos:start="31:49" pos:end="31:50"><name pos:start="31:49" pos:end="31:50">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:14">out_ptr</name></name> <operator pos:start="33:16" pos:end="33:17">+=</operator> <name pos:start="33:19" pos:end="33:20">sz</name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="49:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><operator pos:start="37:9" pos:end="37:9">!</operator><call pos:start="37:10" pos:end="37:20"><name pos:start="37:10" pos:end="37:17">is_rndis</name><argument_list pos:start="37:18" pos:end="37:20">(<argument pos:start="37:19" pos:end="37:19"><expr pos:start="37:19" pos:end="37:19"><name pos:start="37:19" pos:end="37:19">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:23" pos:end="49:5">{<block_content pos:start="39:9" pos:end="47:15">

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:29">(<expr pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:13">p</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:18">iov</name><operator pos:start="39:19" pos:end="39:19">.</operator><name pos:start="39:20" pos:end="39:23">size</name></name> <operator pos:start="39:25" pos:end="39:25">&lt;</operator> <literal type="number" pos:start="39:27" pos:end="39:28">64</literal></expr>)</condition> <block pos:start="39:31" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:27">

            <expr_stmt pos:start="41:13" pos:end="41:77"><expr pos:start="41:13" pos:end="41:76"><call pos:start="41:13" pos:end="41:76"><name pos:start="41:13" pos:end="41:28">qemu_send_packet</name><argument_list pos:start="41:29" pos:end="41:76">(<argument pos:start="41:30" pos:end="41:51"><expr pos:start="41:30" pos:end="41:51"><call pos:start="41:30" pos:end="41:51"><name pos:start="41:30" pos:end="41:43">qemu_get_queue</name><argument_list pos:start="41:44" pos:end="41:51">(<argument pos:start="41:45" pos:end="41:50"><expr pos:start="41:45" pos:end="41:50"><name pos:start="41:45" pos:end="41:50"><name pos:start="41:45" pos:end="41:45">s</name><operator pos:start="41:46" pos:end="41:47">-&gt;</operator><name pos:start="41:48" pos:end="41:50">nic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:54" pos:end="41:63"><expr pos:start="41:54" pos:end="41:63"><name pos:start="41:54" pos:end="41:63"><name pos:start="41:54" pos:end="41:54">s</name><operator pos:start="41:55" pos:end="41:56">-&gt;</operator><name pos:start="41:57" pos:end="41:63">out_buf</name></name></expr></argument>, <argument pos:start="41:66" pos:end="41:75"><expr pos:start="41:66" pos:end="41:75"><name pos:start="41:66" pos:end="41:75"><name pos:start="41:66" pos:end="41:66">s</name><operator pos:start="41:67" pos:end="41:68">-&gt;</operator><name pos:start="41:69" pos:end="41:75">out_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:27"><expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:22">out_ptr</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <literal type="number" pos:start="43:26" pos:end="43:26">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:7">len</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:41"><name pos:start="51:11" pos:end="51:21">le32_to_cpu</name><argument_list pos:start="51:22" pos:end="51:41">(<argument pos:start="51:23" pos:end="51:40"><expr pos:start="51:23" pos:end="51:40"><name pos:start="51:23" pos:end="51:40"><name pos:start="51:23" pos:end="51:25">msg</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:40">MessageLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:43">(<expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:18">out_ptr</name></name> <operator pos:start="53:20" pos:end="53:20">&lt;</operator> <literal type="number" pos:start="53:22" pos:end="53:22">8</literal> <operator pos:start="53:24" pos:end="53:25">||</operator> <name pos:start="53:27" pos:end="53:36"><name pos:start="53:27" pos:end="53:27">s</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:36">out_ptr</name></name> <operator pos:start="53:38" pos:end="53:38">&lt;</operator> <name pos:start="53:40" pos:end="53:42">len</name></expr>)</condition> <block pos:start="53:45" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:15">

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="69:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:58">(<expr pos:start="59:9" pos:end="59:57"><call pos:start="59:9" pos:end="59:37"><name pos:start="59:9" pos:end="59:19">le32_to_cpu</name><argument_list pos:start="59:20" pos:end="59:37">(<argument pos:start="59:21" pos:end="59:36"><expr pos:start="59:21" pos:end="59:36"><name pos:start="59:21" pos:end="59:36"><name pos:start="59:21" pos:end="59:23">msg</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:36">MessageType</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:39" pos:end="59:40">==</operator> <name pos:start="59:42" pos:end="59:57">RNDIS_PACKET_MSG</name></expr>)</condition> <block pos:start="59:60" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:78">

        <decl_stmt pos:start="61:9" pos:end="61:57"><decl pos:start="61:9" pos:end="61:56"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">uint32_t</name></type> <name pos:start="61:18" pos:end="61:21">offs</name> <init pos:start="61:23" pos:end="61:56">= <expr pos:start="61:25" pos:end="61:56"><literal type="number" pos:start="61:25" pos:end="61:27">8</literal> <operator pos:start="61:27" pos:end="61:27">+</operator> <call pos:start="61:29" pos:end="61:56"><name pos:start="61:29" pos:end="61:39">le32_to_cpu</name><argument_list pos:start="61:40" pos:end="61:56">(<argument pos:start="61:41" pos:end="61:55"><expr pos:start="61:41" pos:end="61:55"><name pos:start="61:41" pos:end="61:55"><name pos:start="61:41" pos:end="61:43">msg</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:55">DataOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="63:9" pos:end="63:53"><decl pos:start="63:9" pos:end="63:52"><type pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:16">uint32_t</name></type> <name pos:start="63:18" pos:end="63:21">size</name> <init pos:start="63:23" pos:end="63:52">= <expr pos:start="63:25" pos:end="63:52"><call pos:start="63:25" pos:end="63:52"><name pos:start="63:25" pos:end="63:35">le32_to_cpu</name><argument_list pos:start="63:36" pos:end="63:52">(<argument pos:start="63:37" pos:end="63:51"><expr pos:start="63:37" pos:end="63:51"><name pos:start="63:37" pos:end="63:51"><name pos:start="63:37" pos:end="63:39">msg</name><operator pos:start="63:40" pos:end="63:41">-&gt;</operator><name pos:start="63:42" pos:end="63:51">DataLength</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="65:9" pos:end="67:78"><if pos:start="65:9" pos:end="67:78">if <condition pos:start="65:12" pos:end="65:31">(<expr pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:16">offs</name> <operator pos:start="65:18" pos:end="65:18">+</operator> <name pos:start="65:20" pos:end="65:23">size</name> <operator pos:start="65:25" pos:end="65:26">&lt;=</operator> <name pos:start="65:28" pos:end="65:30">len</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:78"><block_content pos:start="67:13" pos:end="67:78">

            <expr_stmt pos:start="67:13" pos:end="67:78"><expr pos:start="67:13" pos:end="67:77"><call pos:start="67:13" pos:end="67:77"><name pos:start="67:13" pos:end="67:28">qemu_send_packet</name><argument_list pos:start="67:29" pos:end="67:77">(<argument pos:start="67:30" pos:end="67:51"><expr pos:start="67:30" pos:end="67:51"><call pos:start="67:30" pos:end="67:51"><name pos:start="67:30" pos:end="67:43">qemu_get_queue</name><argument_list pos:start="67:44" pos:end="67:51">(<argument pos:start="67:45" pos:end="67:50"><expr pos:start="67:45" pos:end="67:50"><name pos:start="67:45" pos:end="67:50"><name pos:start="67:45" pos:end="67:45">s</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:50">nic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:54" pos:end="67:70"><expr pos:start="67:54" pos:end="67:70"><name pos:start="67:54" pos:end="67:63"><name pos:start="67:54" pos:end="67:54">s</name><operator pos:start="67:55" pos:end="67:56">-&gt;</operator><name pos:start="67:57" pos:end="67:63">out_buf</name></name> <operator pos:start="67:65" pos:end="67:65">+</operator> <name pos:start="67:67" pos:end="67:70">offs</name></expr></argument>, <argument pos:start="67:73" pos:end="67:76"><expr pos:start="67:73" pos:end="67:76"><name pos:start="67:73" pos:end="67:76">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:22"><expr pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:14"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:14">out_ptr</name></name> <operator pos:start="71:16" pos:end="71:17">-=</operator> <name pos:start="71:19" pos:end="71:21">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:54"><expr pos:start="73:5" pos:end="73:53"><call pos:start="73:5" pos:end="73:53"><name pos:start="73:5" pos:end="73:11">memmove</name><argument_list pos:start="73:12" pos:end="73:53">(<argument pos:start="73:13" pos:end="73:22"><expr pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:22">out_buf</name></name></expr></argument>, <argument pos:start="73:25" pos:end="73:40"><expr pos:start="73:25" pos:end="73:40"><operator pos:start="73:25" pos:end="73:25">&amp;</operator><name pos:start="73:26" pos:end="73:40"><name pos:start="73:26" pos:end="73:26">s</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:35">out_buf</name><index pos:start="73:36" pos:end="73:40">[<expr pos:start="73:37" pos:end="73:39"><name pos:start="73:37" pos:end="73:39">len</name></expr>]</index></name></expr></argument>, <argument pos:start="73:43" pos:end="73:52"><expr pos:start="73:43" pos:end="73:52"><name pos:start="73:43" pos:end="73:52"><name pos:start="73:43" pos:end="73:43">s</name><operator pos:start="73:44" pos:end="73:45">-&gt;</operator><name pos:start="73:46" pos:end="73:52">out_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
