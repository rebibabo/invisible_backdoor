<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20739.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">musicpal_init</name><parameter_list pos:start="1:26" pos:end="7:66">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:36">ram_addr_t</name></type> <name pos:start="1:38" pos:end="1:45">ram_size</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:63"><decl pos:start="1:48" pos:end="1:63"><type pos:start="1:48" pos:end="1:63"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:63">vga_ram_size</name></decl></parameter>,

               <parameter pos:start="3:16" pos:end="3:38"><decl pos:start="3:16" pos:end="3:38"><type pos:start="3:16" pos:end="3:38"><specifier pos:start="3:16" pos:end="3:20">const</specifier> <name pos:start="3:22" pos:end="3:25">char</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:38">boot_device</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:56"><decl pos:start="3:41" pos:end="3:56"><type pos:start="3:41" pos:end="3:56"><name pos:start="3:41" pos:end="3:52">DisplayState</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:56">ds</name></decl></parameter>,

               <parameter pos:start="5:16" pos:end="5:42"><decl pos:start="5:16" pos:end="5:42"><type pos:start="5:16" pos:end="5:42"><specifier pos:start="5:16" pos:end="5:20">const</specifier> <name pos:start="5:22" pos:end="5:25">char</name> <modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:42">kernel_filename</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:70"><decl pos:start="5:45" pos:end="5:70"><type pos:start="5:45" pos:end="5:70"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:70">kernel_cmdline</name></decl></parameter>,

               <parameter pos:start="7:16" pos:end="7:42"><decl pos:start="7:16" pos:end="7:42"><type pos:start="7:16" pos:end="7:42"><specifier pos:start="7:16" pos:end="7:20">const</specifier> <name pos:start="7:22" pos:end="7:25">char</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:42">initrd_filename</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:65"><decl pos:start="7:45" pos:end="7:65"><type pos:start="7:45" pos:end="7:65"><specifier pos:start="7:45" pos:end="7:49">const</specifier> <name pos:start="7:51" pos:end="7:54">char</name> <modifier pos:start="7:56" pos:end="7:56">*</modifier></type><name pos:start="7:57" pos:end="7:65">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="173:1">{<block_content pos:start="11:5" pos:end="171:42">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">qemu_irq</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">iomemtype</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:29"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:17">long</name></type> <name pos:start="19:19" pos:end="19:28">flash_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:29"><if pos:start="23:5" pos:end="25:29">if <condition pos:start="23:8" pos:end="23:19">(<expr pos:start="23:9" pos:end="23:18"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:29"><block_content pos:start="25:9" pos:end="25:29">

        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:17">cpu_model</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="string" pos:start="25:21" pos:end="25:28">"arm926"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:7">env</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:29"><name pos:start="29:11" pos:end="29:18">cpu_init</name><argument_list pos:start="29:19" pos:end="29:29">(<argument pos:start="29:20" pos:end="29:28"><expr pos:start="29:20" pos:end="29:28"><name pos:start="29:20" pos:end="29:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">env</name></expr>)</condition> <block pos:start="31:15" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:16">

        <expr_stmt pos:start="33:9" pos:end="33:59"><expr pos:start="33:9" pos:end="33:58"><call pos:start="33:9" pos:end="33:58"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:58">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:57"><expr pos:start="33:25" pos:end="33:57"><literal type="string" pos:start="33:25" pos:end="33:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><call pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:12">exit</name><argument_list pos:start="35:13" pos:end="35:15">(<argument pos:start="35:14" pos:end="35:14"><expr pos:start="35:14" pos:end="35:14"><literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:7">pic</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:31"><name pos:start="39:11" pos:end="39:26">arm_pic_init_cpu</name><argument_list pos:start="39:27" pos:end="39:31">(<argument pos:start="39:28" pos:end="39:30"><expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:58">/* For now we use a fixed - the original - RAM size */</comment>

    <expr_stmt pos:start="45:5" pos:end="47:70"><expr pos:start="45:5" pos:end="47:69"><call pos:start="45:5" pos:end="47:69"><name pos:start="45:5" pos:end="45:32">cpu_register_physical_memory</name><argument_list pos:start="45:33" pos:end="47:69">(<argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><literal type="number" pos:start="45:34" pos:end="45:34">0</literal></expr></argument>, <argument pos:start="45:37" pos:end="45:55"><expr pos:start="45:37" pos:end="45:55"><name pos:start="45:37" pos:end="45:55">MP_RAM_DEFAULT_SIZE</name></expr></argument>,

                                 <argument pos:start="47:34" pos:end="47:68"><expr pos:start="47:34" pos:end="47:68"><call pos:start="47:34" pos:end="47:68"><name pos:start="47:34" pos:end="47:47">qemu_ram_alloc</name><argument_list pos:start="47:48" pos:end="47:68">(<argument pos:start="47:49" pos:end="47:67"><expr pos:start="47:49" pos:end="47:67"><name pos:start="47:49" pos:end="47:67">MP_RAM_DEFAULT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:44"><expr pos:start="51:5" pos:end="51:43"><name pos:start="51:5" pos:end="51:12">sram_off</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:43"><name pos:start="51:16" pos:end="51:29">qemu_ram_alloc</name><argument_list pos:start="51:30" pos:end="51:43">(<argument pos:start="51:31" pos:end="51:42"><expr pos:start="51:31" pos:end="51:42"><name pos:start="51:31" pos:end="51:42">MP_SRAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:71"><expr pos:start="53:5" pos:end="53:70"><call pos:start="53:5" pos:end="53:70"><name pos:start="53:5" pos:end="53:32">cpu_register_physical_memory</name><argument_list pos:start="53:33" pos:end="53:70">(<argument pos:start="53:34" pos:end="53:45"><expr pos:start="53:34" pos:end="53:45"><name pos:start="53:34" pos:end="53:45">MP_SRAM_BASE</name></expr></argument>, <argument pos:start="53:48" pos:end="53:59"><expr pos:start="53:48" pos:end="53:59"><name pos:start="53:48" pos:end="53:59">MP_SRAM_SIZE</name></expr></argument>, <argument pos:start="53:62" pos:end="53:69"><expr pos:start="53:62" pos:end="53:69"><name pos:start="53:62" pos:end="53:69">sram_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:64">/* Catch various stuff not handled by separate subsystems */</comment>

    <expr_stmt pos:start="59:5" pos:end="61:62"><expr pos:start="59:5" pos:end="61:61"><name pos:start="59:5" pos:end="59:13">iomemtype</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="61:61"><name pos:start="59:17" pos:end="59:38">cpu_register_io_memory</name><argument_list pos:start="59:39" pos:end="61:61">(<argument pos:start="59:40" pos:end="59:40"><expr pos:start="59:40" pos:end="59:40"><literal type="number" pos:start="59:40" pos:end="59:40">0</literal></expr></argument>, <argument pos:start="59:43" pos:end="59:57"><expr pos:start="59:43" pos:end="59:57"><name pos:start="59:43" pos:end="59:57">musicpal_readfn</name></expr></argument>,

                                       <argument pos:start="61:40" pos:end="61:55"><expr pos:start="61:40" pos:end="61:55"><name pos:start="61:40" pos:end="61:55">musicpal_writefn</name></expr></argument>, <argument pos:start="61:58" pos:end="61:60"><expr pos:start="61:58" pos:end="61:60"><name pos:start="61:58" pos:end="61:60">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:65"><expr pos:start="63:5" pos:end="63:64"><call pos:start="63:5" pos:end="63:64"><name pos:start="63:5" pos:end="63:32">cpu_register_physical_memory</name><argument_list pos:start="63:33" pos:end="63:64">(<argument pos:start="63:34" pos:end="63:43"><expr pos:start="63:34" pos:end="63:43"><literal type="number" pos:start="63:34" pos:end="63:43">0x80000000</literal></expr></argument>, <argument pos:start="63:46" pos:end="63:52"><expr pos:start="63:46" pos:end="63:52"><literal type="number" pos:start="63:46" pos:end="63:52">0x10000</literal></expr></argument>, <argument pos:start="63:55" pos:end="63:63"><expr pos:start="63:55" pos:end="63:63"><name pos:start="63:55" pos:end="63:63">iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:64"><expr pos:start="67:5" pos:end="67:63"><name pos:start="67:5" pos:end="67:7">pic</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:63"><name pos:start="67:11" pos:end="67:28">mv88w8618_pic_init</name><argument_list pos:start="67:29" pos:end="67:63">(<argument pos:start="67:30" pos:end="67:40"><expr pos:start="67:30" pos:end="67:40"><name pos:start="67:30" pos:end="67:40">MP_PIC_BASE</name></expr></argument>, <argument pos:start="67:43" pos:end="67:62"><expr pos:start="67:43" pos:end="67:62"><name pos:start="67:43" pos:end="67:62"><name pos:start="67:43" pos:end="67:45">pic</name><index pos:start="67:46" pos:end="67:62">[<expr pos:start="67:47" pos:end="67:61"><name pos:start="67:47" pos:end="67:61">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:56"><expr pos:start="69:5" pos:end="69:55"><call pos:start="69:5" pos:end="69:55"><name pos:start="69:5" pos:end="69:22">mv88w8618_pit_init</name><argument_list pos:start="69:23" pos:end="69:55">(<argument pos:start="69:24" pos:end="69:34"><expr pos:start="69:24" pos:end="69:34"><name pos:start="69:24" pos:end="69:34">MP_PIT_BASE</name></expr></argument>, <argument pos:start="69:37" pos:end="69:39"><expr pos:start="69:37" pos:end="69:39"><name pos:start="69:37" pos:end="69:39">pic</name></expr></argument>, <argument pos:start="69:42" pos:end="69:54"><expr pos:start="69:42" pos:end="69:54"><name pos:start="69:42" pos:end="69:54">MP_TIMER1_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="77:37"><if pos:start="73:5" pos:end="77:37">if <condition pos:start="73:8" pos:end="73:22">(<expr pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:18">serial_hds</name><index pos:start="73:19" pos:end="73:21">[<expr pos:start="73:20" pos:end="73:20"><literal type="number" pos:start="73:20" pos:end="73:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="77:37"><block_content pos:start="75:9" pos:end="77:37">

        <expr_stmt pos:start="75:9" pos:end="77:37"><expr pos:start="75:9" pos:end="77:36"><call pos:start="75:9" pos:end="77:36"><name pos:start="75:9" pos:end="75:22">serial_mm_init</name><argument_list pos:start="75:23" pos:end="77:36">(<argument pos:start="75:24" pos:end="75:36"><expr pos:start="75:24" pos:end="75:36"><name pos:start="75:24" pos:end="75:36">MP_UART1_BASE</name></expr></argument>, <argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><literal type="number" pos:start="75:39" pos:end="75:39">2</literal></expr></argument>, <argument pos:start="75:42" pos:end="75:58"><expr pos:start="75:42" pos:end="75:58"><name pos:start="75:42" pos:end="75:58"><name pos:start="75:42" pos:end="75:44">pic</name><index pos:start="75:45" pos:end="75:58">[<expr pos:start="75:46" pos:end="75:57"><name pos:start="75:46" pos:end="75:57">MP_UART1_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="75:61" pos:end="75:67"><expr pos:start="75:61" pos:end="75:67"><literal type="number" pos:start="75:61" pos:end="75:67">1825000</literal></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:32"><expr pos:start="77:20" pos:end="77:32"><name pos:start="77:20" pos:end="77:32"><name pos:start="77:20" pos:end="77:29">serial_hds</name><index pos:start="77:30" pos:end="77:32">[<expr pos:start="77:31" pos:end="77:31"><literal type="number" pos:start="77:31" pos:end="77:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:35" pos:end="77:35"><expr pos:start="77:35" pos:end="77:35"><literal type="number" pos:start="77:35" pos:end="77:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="83:37"><if pos:start="79:5" pos:end="83:37">if <condition pos:start="79:8" pos:end="79:22">(<expr pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:18">serial_hds</name><index pos:start="79:19" pos:end="79:21">[<expr pos:start="79:20" pos:end="79:20"><literal type="number" pos:start="79:20" pos:end="79:20">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="83:37"><block_content pos:start="81:9" pos:end="83:37">

        <expr_stmt pos:start="81:9" pos:end="83:37"><expr pos:start="81:9" pos:end="83:36"><call pos:start="81:9" pos:end="83:36"><name pos:start="81:9" pos:end="81:22">serial_mm_init</name><argument_list pos:start="81:23" pos:end="83:36">(<argument pos:start="81:24" pos:end="81:36"><expr pos:start="81:24" pos:end="81:36"><name pos:start="81:24" pos:end="81:36">MP_UART2_BASE</name></expr></argument>, <argument pos:start="81:39" pos:end="81:39"><expr pos:start="81:39" pos:end="81:39"><literal type="number" pos:start="81:39" pos:end="81:39">2</literal></expr></argument>, <argument pos:start="81:42" pos:end="81:58"><expr pos:start="81:42" pos:end="81:58"><name pos:start="81:42" pos:end="81:58"><name pos:start="81:42" pos:end="81:44">pic</name><index pos:start="81:45" pos:end="81:58">[<expr pos:start="81:46" pos:end="81:57"><name pos:start="81:46" pos:end="81:57">MP_UART2_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="81:61" pos:end="81:67"><expr pos:start="81:61" pos:end="81:67"><literal type="number" pos:start="81:61" pos:end="81:67">1825000</literal></expr></argument>,

                   <argument pos:start="83:20" pos:end="83:32"><expr pos:start="83:20" pos:end="83:32"><name pos:start="83:20" pos:end="83:32"><name pos:start="83:20" pos:end="83:29">serial_hds</name><index pos:start="83:30" pos:end="83:32">[<expr pos:start="83:31" pos:end="83:31"><literal type="number" pos:start="83:31" pos:end="83:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:35" pos:end="83:35"><expr pos:start="83:35" pos:end="83:35"><literal type="number" pos:start="83:35" pos:end="83:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:24">/* Register flash */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:45"><expr pos:start="89:5" pos:end="89:44"><name pos:start="89:5" pos:end="89:9">index</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <call pos:start="89:13" pos:end="89:44"><name pos:start="89:13" pos:end="89:27">drive_get_index</name><argument_list pos:start="89:28" pos:end="89:44">(<argument pos:start="89:29" pos:end="89:37"><expr pos:start="89:29" pos:end="89:37"><name pos:start="89:29" pos:end="89:37">IF_PFLASH</name></expr></argument>, <argument pos:start="89:40" pos:end="89:40"><expr pos:start="89:40" pos:end="89:40"><literal type="number" pos:start="89:40" pos:end="89:40">0</literal></expr></argument>, <argument pos:start="89:43" pos:end="89:43"><expr pos:start="89:43" pos:end="89:43"><literal type="number" pos:start="89:43" pos:end="89:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="129:5"><if pos:start="91:5" pos:end="129:5">if <condition pos:start="91:8" pos:end="91:20">(<expr pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:13">index</name> <operator pos:start="91:15" pos:end="91:16">!=</operator> <operator pos:start="91:18" pos:end="91:18">-</operator><literal type="number" pos:start="91:19" pos:end="91:19">1</literal></expr>)</condition> <block pos:start="91:22" pos:end="129:5">{<block_content pos:start="93:9" pos:end="127:46">

        <expr_stmt pos:start="93:9" pos:end="93:62"><expr pos:start="93:9" pos:end="93:61"><name pos:start="93:9" pos:end="93:18">flash_size</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <call pos:start="93:22" pos:end="93:61"><name pos:start="93:22" pos:end="93:35">bdrv_getlength</name><argument_list pos:start="93:36" pos:end="93:61">(<argument pos:start="93:37" pos:end="93:60"><expr pos:start="93:37" pos:end="93:60"><name pos:start="93:37" pos:end="93:55"><name pos:start="93:37" pos:end="93:48">drives_table</name><index pos:start="93:49" pos:end="93:55">[<expr pos:start="93:50" pos:end="93:54"><name pos:start="93:50" pos:end="93:54">index</name></expr>]</index></name><operator pos:start="93:56" pos:end="93:56">.</operator><name pos:start="93:57" pos:end="93:60">bdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="103:9"><if pos:start="95:9" pos:end="103:9">if <condition pos:start="95:12" pos:end="97:39">(<expr pos:start="95:13" pos:end="97:38"><name pos:start="95:13" pos:end="95:22">flash_size</name> <operator pos:start="95:24" pos:end="95:25">!=</operator> <literal type="number" pos:start="95:27" pos:end="95:27">8</literal><operator pos:start="95:28" pos:end="95:28">*</operator><literal type="number" pos:start="95:29" pos:end="95:32">1024</literal><operator pos:start="95:33" pos:end="95:33">*</operator><literal type="number" pos:start="95:34" pos:end="95:37">1024</literal> <operator pos:start="95:39" pos:end="95:40">&amp;&amp;</operator> <name pos:start="95:42" pos:end="95:51">flash_size</name> <operator pos:start="95:53" pos:end="95:54">!=</operator> <literal type="number" pos:start="95:56" pos:end="95:57">16</literal><operator pos:start="95:58" pos:end="95:58">*</operator><literal type="number" pos:start="95:59" pos:end="95:62">1024</literal><operator pos:start="95:63" pos:end="95:63">*</operator><literal type="number" pos:start="95:64" pos:end="95:67">1024</literal> <operator pos:start="95:69" pos:end="95:70">&amp;&amp;</operator>

            <name pos:start="97:13" pos:end="97:22">flash_size</name> <operator pos:start="97:24" pos:end="97:25">!=</operator> <literal type="number" pos:start="97:27" pos:end="97:28">32</literal><operator pos:start="97:29" pos:end="97:29">*</operator><literal type="number" pos:start="97:30" pos:end="97:33">1024</literal><operator pos:start="97:34" pos:end="97:34">*</operator><literal type="number" pos:start="97:35" pos:end="97:38">1024</literal></expr>)</condition> <block pos:start="97:41" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:20">

            <expr_stmt pos:start="99:13" pos:end="99:58"><expr pos:start="99:13" pos:end="99:57"><call pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="99:57">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="99:56"><expr pos:start="99:29" pos:end="99:56"><literal type="string" pos:start="99:29" pos:end="99:56">"Invalid flash image size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:20"><expr pos:start="101:13" pos:end="101:19"><call pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:16">exit</name><argument_list pos:start="101:17" pos:end="101:19">(<argument pos:start="101:18" pos:end="101:18"><expr pos:start="101:18" pos:end="101:18"><literal type="number" pos:start="101:18" pos:end="101:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="107:9" pos:end="115:11">/*

         * The original U-Boot accesses the flash at 0xFE000000 instead of

         * 0xFF800000 (if there is 8 MB flash). So remap flash access if the

         * image is smaller than 32 MB.

         */</comment>

        <expr_stmt pos:start="117:9" pos:end="127:46"><expr pos:start="117:9" pos:end="127:45"><call pos:start="117:9" pos:end="127:45"><name pos:start="117:9" pos:end="117:29">pflash_cfi02_register</name><argument_list pos:start="117:30" pos:end="127:45">(<argument pos:start="117:31" pos:end="117:49"><expr pos:start="117:31" pos:end="117:49"><literal type="number" pos:start="117:31" pos:end="117:32">0</literal><operator pos:start="117:32" pos:end="117:32">-</operator><name pos:start="117:33" pos:end="117:49">MP_FLASH_SIZE_MAX</name></expr></argument>, <argument pos:start="117:52" pos:end="117:77"><expr pos:start="117:52" pos:end="117:77"><call pos:start="117:52" pos:end="117:77"><name pos:start="117:52" pos:end="117:65">qemu_ram_alloc</name><argument_list pos:start="117:66" pos:end="117:77">(<argument pos:start="117:67" pos:end="117:76"><expr pos:start="117:67" pos:end="117:76"><name pos:start="117:67" pos:end="117:76">flash_size</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="119:31" pos:end="119:54"><expr pos:start="119:31" pos:end="119:54"><name pos:start="119:31" pos:end="119:49"><name pos:start="119:31" pos:end="119:42">drives_table</name><index pos:start="119:43" pos:end="119:49">[<expr pos:start="119:44" pos:end="119:48"><name pos:start="119:44" pos:end="119:48">index</name></expr>]</index></name><operator pos:start="119:50" pos:end="119:50">.</operator><name pos:start="119:51" pos:end="119:54">bdrv</name></expr></argument>, <argument pos:start="119:57" pos:end="119:63"><expr pos:start="119:57" pos:end="119:63"><literal type="number" pos:start="119:57" pos:end="119:63">0x10000</literal></expr></argument>,

                              <argument pos:start="121:31" pos:end="121:57"><expr pos:start="121:31" pos:end="121:57"><operator pos:start="121:31" pos:end="121:31">(</operator><name pos:start="121:32" pos:end="121:41">flash_size</name> <operator pos:start="121:43" pos:end="121:43">+</operator> <literal type="number" pos:start="121:45" pos:end="121:50">0xffff</literal><operator pos:start="121:51" pos:end="121:51">)</operator> <operator pos:start="121:53" pos:end="121:54">&gt;&gt;</operator> <literal type="number" pos:start="121:56" pos:end="121:57">16</literal></expr></argument>,

                              <argument pos:start="123:31" pos:end="123:60"><expr pos:start="123:31" pos:end="123:60"><name pos:start="123:31" pos:end="123:47">MP_FLASH_SIZE_MAX</name> <operator pos:start="123:49" pos:end="123:49">/</operator> <name pos:start="123:51" pos:end="123:60">flash_size</name></expr></argument>,

                              <argument pos:start="125:31" pos:end="125:31"><expr pos:start="125:31" pos:end="125:31"><literal type="number" pos:start="125:31" pos:end="125:31">2</literal></expr></argument>, <argument pos:start="125:34" pos:end="125:39"><expr pos:start="125:34" pos:end="125:39"><literal type="number" pos:start="125:34" pos:end="125:39">0x00BF</literal></expr></argument>, <argument pos:start="125:42" pos:end="125:47"><expr pos:start="125:42" pos:end="125:47"><literal type="number" pos:start="125:42" pos:end="125:47">0x236D</literal></expr></argument>, <argument pos:start="125:50" pos:end="125:55"><expr pos:start="125:50" pos:end="125:55"><literal type="number" pos:start="125:50" pos:end="125:55">0x0000</literal></expr></argument>, <argument pos:start="125:58" pos:end="125:63"><expr pos:start="125:58" pos:end="125:63"><literal type="number" pos:start="125:58" pos:end="125:63">0x0000</literal></expr></argument>,

                              <argument pos:start="127:31" pos:end="127:36"><expr pos:start="127:31" pos:end="127:36"><literal type="number" pos:start="127:31" pos:end="127:36">0x5555</literal></expr></argument>, <argument pos:start="127:39" pos:end="127:44"><expr pos:start="127:39" pos:end="127:44"><literal type="number" pos:start="127:39" pos:end="127:44">0x2AAA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:46"><expr pos:start="131:5" pos:end="131:45"><call pos:start="131:5" pos:end="131:45"><name pos:start="131:5" pos:end="131:27">mv88w8618_flashcfg_init</name><argument_list pos:start="131:28" pos:end="131:45">(<argument pos:start="131:29" pos:end="131:44"><expr pos:start="131:29" pos:end="131:44"><name pos:start="131:29" pos:end="131:44">MP_FLASHCFG_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:39"><expr pos:start="135:5" pos:end="135:38"><call pos:start="135:5" pos:end="135:38"><name pos:start="135:5" pos:end="135:21">musicpal_lcd_init</name><argument_list pos:start="135:22" pos:end="135:38">(<argument pos:start="135:23" pos:end="135:24"><expr pos:start="135:23" pos:end="135:24"><name pos:start="135:23" pos:end="135:24">ds</name></expr></argument>, <argument pos:start="135:27" pos:end="135:37"><expr pos:start="135:27" pos:end="135:37"><name pos:start="135:27" pos:end="135:37">MP_LCD_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:69"><expr pos:start="139:5" pos:end="139:68"><call pos:start="139:5" pos:end="139:68"><name pos:start="139:5" pos:end="139:30">qemu_add_kbd_event_handler</name><argument_list pos:start="139:31" pos:end="139:68">(<argument pos:start="139:32" pos:end="139:49"><expr pos:start="139:32" pos:end="139:49"><name pos:start="139:32" pos:end="139:49">musicpal_key_event</name></expr></argument>, <argument pos:start="139:52" pos:end="139:67"><expr pos:start="139:52" pos:end="139:67"><name pos:start="139:52" pos:end="139:67"><name pos:start="139:52" pos:end="139:54">pic</name><index pos:start="139:55" pos:end="139:67">[<expr pos:start="139:56" pos:end="139:66"><name pos:start="139:56" pos:end="139:66">MP_GPIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="143:5" pos:end="149:7">/*

     * Wait a bit to catch menu button during U-Boot start-up

     * (to trigger emergency update).

     */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:13"><expr pos:start="151:5" pos:end="151:12"><call pos:start="151:5" pos:end="151:12"><name pos:start="151:5" pos:end="151:9">sleep</name><argument_list pos:start="151:10" pos:end="151:12">(<argument pos:start="151:11" pos:end="151:11"><expr pos:start="151:11" pos:end="151:11"><literal type="number" pos:start="151:11" pos:end="151:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:67"><expr pos:start="155:5" pos:end="155:66"><call pos:start="155:5" pos:end="155:66"><name pos:start="155:5" pos:end="155:22">mv88w8618_eth_init</name><argument_list pos:start="155:23" pos:end="155:66">(<argument pos:start="155:24" pos:end="155:35"><expr pos:start="155:24" pos:end="155:35"><operator pos:start="155:24" pos:end="155:24">&amp;</operator><name pos:start="155:25" pos:end="155:35"><name pos:start="155:25" pos:end="155:32">nd_table</name><index pos:start="155:33" pos:end="155:35">[<expr pos:start="155:34" pos:end="155:34"><literal type="number" pos:start="155:34" pos:end="155:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="155:38" pos:end="155:48"><expr pos:start="155:38" pos:end="155:48"><name pos:start="155:38" pos:end="155:48">MP_ETH_BASE</name></expr></argument>, <argument pos:start="155:51" pos:end="155:65"><expr pos:start="155:51" pos:end="155:65"><name pos:start="155:51" pos:end="155:65"><name pos:start="155:51" pos:end="155:53">pic</name><index pos:start="155:54" pos:end="155:65">[<expr pos:start="155:55" pos:end="155:64"><name pos:start="155:55" pos:end="155:64">MP_ETH_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:70"><expr pos:start="159:5" pos:end="159:69"><name pos:start="159:5" pos:end="159:13">mixer_i2c</name> <operator pos:start="159:15" pos:end="159:15">=</operator> <call pos:start="159:17" pos:end="159:69"><name pos:start="159:17" pos:end="159:35">musicpal_audio_init</name><argument_list pos:start="159:36" pos:end="159:69">(<argument pos:start="159:37" pos:end="159:49"><expr pos:start="159:37" pos:end="159:49"><name pos:start="159:37" pos:end="159:49">MP_AUDIO_BASE</name></expr></argument>, <argument pos:start="159:52" pos:end="159:68"><expr pos:start="159:52" pos:end="159:68"><name pos:start="159:52" pos:end="159:68"><name pos:start="159:52" pos:end="159:54">pic</name><index pos:start="159:55" pos:end="159:68">[<expr pos:start="159:56" pos:end="159:67"><name pos:start="159:56" pos:end="159:67">MP_AUDIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:50"><expr pos:start="163:5" pos:end="163:49"><name pos:start="163:5" pos:end="163:27"><name pos:start="163:5" pos:end="163:18">musicpal_binfo</name><operator pos:start="163:19" pos:end="163:19">.</operator><name pos:start="163:20" pos:end="163:27">ram_size</name></name> <operator pos:start="163:29" pos:end="163:29">=</operator> <name pos:start="163:31" pos:end="163:49">MP_RAM_DEFAULT_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:53"><expr pos:start="165:5" pos:end="165:52"><name pos:start="165:5" pos:end="165:34"><name pos:start="165:5" pos:end="165:18">musicpal_binfo</name><operator pos:start="165:19" pos:end="165:19">.</operator><name pos:start="165:20" pos:end="165:34">kernel_filename</name></name> <operator pos:start="165:36" pos:end="165:36">=</operator> <name pos:start="165:38" pos:end="165:52">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:51"><expr pos:start="167:5" pos:end="167:50"><name pos:start="167:5" pos:end="167:33"><name pos:start="167:5" pos:end="167:18">musicpal_binfo</name><operator pos:start="167:19" pos:end="167:19">.</operator><name pos:start="167:20" pos:end="167:33">kernel_cmdline</name></name> <operator pos:start="167:35" pos:end="167:35">=</operator> <name pos:start="167:37" pos:end="167:50">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:53"><expr pos:start="169:5" pos:end="169:52"><name pos:start="169:5" pos:end="169:34"><name pos:start="169:5" pos:end="169:18">musicpal_binfo</name><operator pos:start="169:19" pos:end="169:19">.</operator><name pos:start="169:20" pos:end="169:34">initrd_filename</name></name> <operator pos:start="169:36" pos:end="169:36">=</operator> <name pos:start="169:38" pos:end="169:52">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:42"><expr pos:start="171:5" pos:end="171:41"><call pos:start="171:5" pos:end="171:41"><name pos:start="171:5" pos:end="171:19">arm_load_kernel</name><argument_list pos:start="171:20" pos:end="171:41">(<argument pos:start="171:21" pos:end="171:23"><expr pos:start="171:21" pos:end="171:23"><name pos:start="171:21" pos:end="171:23">env</name></expr></argument>, <argument pos:start="171:26" pos:end="171:40"><expr pos:start="171:26" pos:end="171:40"><operator pos:start="171:26" pos:end="171:26">&amp;</operator><name pos:start="171:27" pos:end="171:40">musicpal_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
