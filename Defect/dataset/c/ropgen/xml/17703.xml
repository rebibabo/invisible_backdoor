<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17703.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">xlnx_ep108_init</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:40">MachineState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:49">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:60">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">XlnxEP108</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">s</name> <init pos:start="5:18" pos:end="5:39">= <expr pos:start="5:20" pos:end="5:39"><call pos:start="5:20" pos:end="5:39"><name pos:start="5:20" pos:end="5:25">g_new0</name><argument_list pos:start="5:26" pos:end="5:39">(<argument pos:start="5:27" pos:end="5:35"><expr pos:start="5:27" pos:end="5:35"><name pos:start="5:27" pos:end="5:35">XlnxEP108</name></expr></argument>, <argument pos:start="5:38" pos:end="5:38"><expr pos:start="5:38" pos:end="5:38"><literal type="number" pos:start="5:38" pos:end="5:38">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:21">ram_size</name> <init pos:start="9:23" pos:end="9:41">= <expr pos:start="9:25" pos:end="9:41"><name pos:start="9:25" pos:end="9:41"><name pos:start="9:25" pos:end="9:31">machine</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:41">ram_size</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:53">/* Create the memory region to pass to the SoC */</comment>

    <if_stmt pos:start="15:5" pos:end="25:5"><if pos:start="15:5" pos:end="25:5">if <condition pos:start="15:8" pos:end="15:44">(<expr pos:start="15:9" pos:end="15:43"><name pos:start="15:9" pos:end="15:16">ram_size</name> <operator pos:start="15:18" pos:end="15:18">&gt;</operator> <name pos:start="15:20" pos:end="15:43">XLNX_ZYNQMP_MAX_RAM_SIZE</name></expr>)</condition> <block pos:start="15:46" pos:end="25:5">{<block_content pos:start="17:9" pos:end="23:16">

        <expr_stmt pos:start="17:9" pos:end="21:47"><expr pos:start="17:9" pos:end="21:46"><call pos:start="17:9" pos:end="21:46"><name pos:start="17:9" pos:end="17:20">error_report</name><argument_list pos:start="17:21" pos:end="21:46">(<argument pos:start="17:22" pos:end="19:29"><expr pos:start="17:22" pos:end="19:29"><literal type="string" pos:start="17:22" pos:end="17:42">"ERROR: RAM size 0x%"</literal> <name pos:start="17:44" pos:end="17:49">PRIx64</name> <literal type="string" pos:start="17:51" pos:end="17:76">" above max supported of "</literal>

                     <literal type="string" pos:start="19:22" pos:end="19:29">"0x%llx"</literal></expr></argument>, <argument pos:start="19:32" pos:end="19:39"><expr pos:start="19:32" pos:end="19:39"><name pos:start="19:32" pos:end="19:39">ram_size</name></expr></argument>,

                     <argument pos:start="21:22" pos:end="21:45"><expr pos:start="21:22" pos:end="21:45"><name pos:start="21:22" pos:end="21:45">XLNX_ZYNQMP_MAX_RAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:15"><call pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:12">exit</name><argument_list pos:start="23:13" pos:end="23:15">(<argument pos:start="23:14" pos:end="23:14"><expr pos:start="23:14" pos:end="23:14"><literal type="number" pos:start="23:14" pos:end="23:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:30">(<expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:16">ram_size</name> <operator pos:start="29:18" pos:end="29:18">&lt;</operator> <literal type="number" pos:start="29:20" pos:end="29:29">0x08000000</literal></expr>)</condition> <block pos:start="29:32" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:27">

        <expr_stmt pos:start="31:9" pos:end="33:27"><expr pos:start="31:9" pos:end="33:26"><call pos:start="31:9" pos:end="33:26"><name pos:start="31:9" pos:end="31:16">qemu_log</name><argument_list pos:start="31:17" pos:end="33:26">(<argument pos:start="31:18" pos:end="31:69"><expr pos:start="31:18" pos:end="31:69"><literal type="string" pos:start="31:18" pos:end="31:40">"WARNING: RAM size 0x%"</literal> <name pos:start="31:42" pos:end="31:47">PRIx64</name> <literal type="string" pos:start="31:49" pos:end="31:69">" is small for EP108"</literal></expr></argument>,

                 <argument pos:start="33:18" pos:end="33:25"><expr pos:start="33:18" pos:end="33:25"><name pos:start="33:18" pos:end="33:25">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="41:51"><expr pos:start="39:5" pos:end="41:50"><call pos:start="39:5" pos:end="41:50"><name pos:start="39:5" pos:end="39:40">memory_region_allocate_system_memory</name><argument_list pos:start="39:41" pos:end="41:50">(<argument pos:start="39:42" pos:end="39:52"><expr pos:start="39:42" pos:end="39:52"><operator pos:start="39:42" pos:end="39:42">&amp;</operator><name pos:start="39:43" pos:end="39:52"><name pos:start="39:43" pos:end="39:43">s</name><operator pos:start="39:44" pos:end="39:45">-&gt;</operator><name pos:start="39:46" pos:end="39:52">ddr_ram</name></name></expr></argument>, <argument pos:start="39:55" pos:end="39:58"><expr pos:start="39:55" pos:end="39:58"><name pos:start="39:55" pos:end="39:58">NULL</name></expr></argument>, <argument pos:start="39:61" pos:end="39:69"><expr pos:start="39:61" pos:end="39:69"><literal type="string" pos:start="39:61" pos:end="39:69">"ddr-ram"</literal></expr></argument>,

                                         <argument pos:start="41:42" pos:end="41:49"><expr pos:start="41:42" pos:end="41:49"><name pos:start="41:42" pos:end="41:49">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:65"><expr pos:start="45:5" pos:end="45:64"><call pos:start="45:5" pos:end="45:64"><name pos:start="45:5" pos:end="45:21">object_initialize</name><argument_list pos:start="45:22" pos:end="45:64">(<argument pos:start="45:23" pos:end="45:29"><expr pos:start="45:23" pos:end="45:29"><operator pos:start="45:23" pos:end="45:23">&amp;</operator><name pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:24">s</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:29">soc</name></name></expr></argument>, <argument pos:start="45:32" pos:end="45:45"><expr pos:start="45:32" pos:end="45:45"><sizeof pos:start="45:32" pos:end="45:45">sizeof<argument_list pos:start="45:38" pos:end="45:45">(<argument pos:start="45:39" pos:end="45:44"><expr pos:start="45:39" pos:end="45:44"><name pos:start="45:39" pos:end="45:44"><name pos:start="45:39" pos:end="45:39">s</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:44">soc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="45:48" pos:end="45:63"><expr pos:start="45:48" pos:end="45:63"><name pos:start="45:48" pos:end="45:63">TYPE_XLNX_ZYNQMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="49:44"><expr pos:start="47:5" pos:end="49:43"><call pos:start="47:5" pos:end="49:43"><name pos:start="47:5" pos:end="47:29">object_property_add_child</name><argument_list pos:start="47:30" pos:end="49:43">(<argument pos:start="47:31" pos:end="47:45"><expr pos:start="47:31" pos:end="47:45"><call pos:start="47:31" pos:end="47:45"><name pos:start="47:31" pos:end="47:36">OBJECT</name><argument_list pos:start="47:37" pos:end="47:45">(<argument pos:start="47:38" pos:end="47:44"><expr pos:start="47:38" pos:end="47:44"><name pos:start="47:38" pos:end="47:44">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:48" pos:end="47:52"><expr pos:start="47:48" pos:end="47:52"><literal type="string" pos:start="47:48" pos:end="47:52">"soc"</literal></expr></argument>, <argument pos:start="47:55" pos:end="47:69"><expr pos:start="47:55" pos:end="47:69"><call pos:start="47:55" pos:end="47:69"><name pos:start="47:55" pos:end="47:60">OBJECT</name><argument_list pos:start="47:61" pos:end="47:69">(<argument pos:start="47:62" pos:end="47:68"><expr pos:start="47:62" pos:end="47:68"><operator pos:start="47:62" pos:end="47:62">&amp;</operator><name pos:start="47:63" pos:end="47:68"><name pos:start="47:63" pos:end="47:63">s</name><operator pos:start="47:64" pos:end="47:65">-&gt;</operator><name pos:start="47:66" pos:end="47:68">soc</name></name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="49:31" pos:end="49:42"><expr pos:start="49:31" pos:end="49:42"><operator pos:start="49:31" pos:end="49:31">&amp;</operator><name pos:start="49:32" pos:end="49:42">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="55:50"><expr pos:start="53:5" pos:end="55:49"><call pos:start="53:5" pos:end="55:49"><name pos:start="53:5" pos:end="53:28">object_property_set_link</name><argument_list pos:start="53:29" pos:end="55:49">(<argument pos:start="53:30" pos:end="53:44"><expr pos:start="53:30" pos:end="53:44"><call pos:start="53:30" pos:end="53:44"><name pos:start="53:30" pos:end="53:35">OBJECT</name><argument_list pos:start="53:36" pos:end="53:44">(<argument pos:start="53:37" pos:end="53:43"><expr pos:start="53:37" pos:end="53:43"><operator pos:start="53:37" pos:end="53:37">&amp;</operator><name pos:start="53:38" pos:end="53:43"><name pos:start="53:38" pos:end="53:38">s</name><operator pos:start="53:39" pos:end="53:40">-&gt;</operator><name pos:start="53:41" pos:end="53:43">soc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:47" pos:end="53:65"><expr pos:start="53:47" pos:end="53:65"><call pos:start="53:47" pos:end="53:65"><name pos:start="53:47" pos:end="53:52">OBJECT</name><argument_list pos:start="53:53" pos:end="53:65">(<argument pos:start="53:54" pos:end="53:64"><expr pos:start="53:54" pos:end="53:64"><operator pos:start="53:54" pos:end="53:54">&amp;</operator><name pos:start="53:55" pos:end="53:64"><name pos:start="53:55" pos:end="53:55">s</name><operator pos:start="53:56" pos:end="53:57">-&gt;</operator><name pos:start="53:58" pos:end="53:64">ddr_ram</name></name></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="55:26" pos:end="55:34"><expr pos:start="55:26" pos:end="55:34"><literal type="string" pos:start="55:26" pos:end="55:34">"ddr-ram"</literal></expr></argument>, <argument pos:start="55:37" pos:end="55:48"><expr pos:start="55:37" pos:end="55:48"><operator pos:start="55:37" pos:end="55:37">&amp;</operator><name pos:start="55:38" pos:end="55:48">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:78"><expr pos:start="59:5" pos:end="59:77"><call pos:start="59:5" pos:end="59:77"><name pos:start="59:5" pos:end="59:28">object_property_set_bool</name><argument_list pos:start="59:29" pos:end="59:77">(<argument pos:start="59:30" pos:end="59:44"><expr pos:start="59:30" pos:end="59:44"><call pos:start="59:30" pos:end="59:44"><name pos:start="59:30" pos:end="59:35">OBJECT</name><argument_list pos:start="59:36" pos:end="59:44">(<argument pos:start="59:37" pos:end="59:43"><expr pos:start="59:37" pos:end="59:43"><operator pos:start="59:37" pos:end="59:37">&amp;</operator><name pos:start="59:38" pos:end="59:43"><name pos:start="59:38" pos:end="59:38">s</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:43">soc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="59:47" pos:end="59:50"><expr pos:start="59:47" pos:end="59:50"><name pos:start="59:47" pos:end="59:50">true</name></expr></argument>, <argument pos:start="59:53" pos:end="59:62"><expr pos:start="59:53" pos:end="59:62"><literal type="string" pos:start="59:53" pos:end="59:62">"realized"</literal></expr></argument>, <argument pos:start="59:65" pos:end="59:76"><expr pos:start="59:65" pos:end="59:76"><operator pos:start="59:65" pos:end="59:65">&amp;</operator><name pos:start="59:66" pos:end="59:76">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:41">/* Create and plug in the SD cards */</comment>

    <for pos:start="65:5" pos:end="101:5">for <control pos:start="65:9" pos:end="65:47">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:42"><expr pos:start="65:17" pos:end="65:41"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <name pos:start="65:21" pos:end="65:41">XLNX_ZYNQMP_NUM_SDHCI</name></expr>;</condition> <incr pos:start="65:44" pos:end="65:46"><expr pos:start="65:44" pos:end="65:46"><name pos:start="65:44" pos:end="65:44">i</name><operator pos:start="65:45" pos:end="65:46">++</operator></expr></incr>)</control> <block pos:start="65:49" pos:end="101:5">{<block_content pos:start="67:9" pos:end="99:47">

        <decl_stmt pos:start="67:9" pos:end="67:22"><decl pos:start="67:9" pos:end="67:21"><type pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:16">BusState</name> <modifier pos:start="67:18" pos:end="67:18">*</modifier></type><name pos:start="67:19" pos:end="67:21">bus</name></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:46"><decl pos:start="69:9" pos:end="69:45"><type pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:17">DriveInfo</name> <modifier pos:start="69:19" pos:end="69:19">*</modifier></type><name pos:start="69:20" pos:end="69:21">di</name> <init pos:start="69:23" pos:end="69:45">= <expr pos:start="69:25" pos:end="69:45"><call pos:start="69:25" pos:end="69:45"><name pos:start="69:25" pos:end="69:38">drive_get_next</name><argument_list pos:start="69:39" pos:end="69:45">(<argument pos:start="69:40" pos:end="69:44"><expr pos:start="69:40" pos:end="69:44"><name pos:start="69:40" pos:end="69:44">IF_SD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:64"><decl pos:start="71:9" pos:end="71:63"><type pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:20">BlockBackend</name> <modifier pos:start="71:22" pos:end="71:22">*</modifier></type><name pos:start="71:23" pos:end="71:25">blk</name> <init pos:start="71:27" pos:end="71:63">= <expr pos:start="71:29" pos:end="71:63"><ternary pos:start="71:29" pos:end="71:63"><condition pos:start="71:29" pos:end="71:32"><expr pos:start="71:29" pos:end="71:30"><name pos:start="71:29" pos:end="71:30">di</name></expr> ?</condition><then pos:start="71:34" pos:end="71:56"> <expr pos:start="71:34" pos:end="71:56"><call pos:start="71:34" pos:end="71:56"><name pos:start="71:34" pos:end="71:52">blk_by_legacy_dinfo</name><argument_list pos:start="71:53" pos:end="71:56">(<argument pos:start="71:54" pos:end="71:55"><expr pos:start="71:54" pos:end="71:55"><name pos:start="71:54" pos:end="71:55">di</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="71:58" pos:end="71:63">: <expr pos:start="71:60" pos:end="71:63"><name pos:start="71:60" pos:end="71:63">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:29"><decl pos:start="73:9" pos:end="73:28"><type pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:19">DeviceState</name> <modifier pos:start="73:21" pos:end="73:21">*</modifier></type><name pos:start="73:22" pos:end="73:28">carddev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:23"><decl pos:start="75:9" pos:end="75:22"><type pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:12">char</name> <modifier pos:start="75:14" pos:end="75:14">*</modifier></type><name pos:start="75:15" pos:end="75:22">bus_name</name></decl>;</decl_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:50"><expr pos:start="79:9" pos:end="79:49"><name pos:start="79:9" pos:end="79:16">bus_name</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:49"><name pos:start="79:20" pos:end="79:34">g_strdup_printf</name><argument_list pos:start="79:35" pos:end="79:49">(<argument pos:start="79:36" pos:end="79:45"><expr pos:start="79:36" pos:end="79:45"><literal type="string" pos:start="79:36" pos:end="79:45">"sd-bus%d"</literal></expr></argument>, <argument pos:start="79:48" pos:end="79:48"><expr pos:start="79:48" pos:end="79:48"><name pos:start="79:48" pos:end="79:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:11">bus</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:59"><name pos:start="81:15" pos:end="81:32">qdev_get_child_bus</name><argument_list pos:start="81:33" pos:end="81:59">(<argument pos:start="81:34" pos:end="81:48"><expr pos:start="81:34" pos:end="81:48"><call pos:start="81:34" pos:end="81:48"><name pos:start="81:34" pos:end="81:39">DEVICE</name><argument_list pos:start="81:40" pos:end="81:48">(<argument pos:start="81:41" pos:end="81:47"><expr pos:start="81:41" pos:end="81:47"><operator pos:start="81:41" pos:end="81:41">&amp;</operator><name pos:start="81:42" pos:end="81:47"><name pos:start="81:42" pos:end="81:42">s</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:47">soc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:51" pos:end="81:58"><expr pos:start="81:51" pos:end="81:58"><name pos:start="81:51" pos:end="81:58">bus_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:25"><expr pos:start="83:9" pos:end="83:24"><call pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:14">g_free</name><argument_list pos:start="83:15" pos:end="83:24">(<argument pos:start="83:16" pos:end="83:23"><expr pos:start="83:16" pos:end="83:23"><name pos:start="83:16" pos:end="83:23">bus_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:17">(<expr pos:start="85:13" pos:end="85:16"><operator pos:start="85:13" pos:end="85:13">!</operator><name pos:start="85:14" pos:end="85:16">bus</name></expr>)</condition> <block pos:start="85:19" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:20">

            <expr_stmt pos:start="87:13" pos:end="87:62"><expr pos:start="87:13" pos:end="87:61"><call pos:start="87:13" pos:end="87:61"><name pos:start="87:13" pos:end="87:24">error_report</name><argument_list pos:start="87:25" pos:end="87:61">(<argument pos:start="87:26" pos:end="87:57"><expr pos:start="87:26" pos:end="87:57"><literal type="string" pos:start="87:26" pos:end="87:57">"No SD bus found for SD card %d"</literal></expr></argument>, <argument pos:start="87:60" pos:end="87:60"><expr pos:start="87:60" pos:end="87:60"><name pos:start="87:60" pos:end="87:60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:20"><expr pos:start="89:13" pos:end="89:19"><call pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:16">exit</name><argument_list pos:start="89:17" pos:end="89:19">(<argument pos:start="89:18" pos:end="89:18"><expr pos:start="89:18" pos:end="89:18"><literal type="number" pos:start="89:18" pos:end="89:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:49"><expr pos:start="93:9" pos:end="93:48"><name pos:start="93:9" pos:end="93:15">carddev</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:48"><name pos:start="93:19" pos:end="93:29">qdev_create</name><argument_list pos:start="93:30" pos:end="93:48">(<argument pos:start="93:31" pos:end="93:33"><expr pos:start="93:31" pos:end="93:33"><name pos:start="93:31" pos:end="93:33">bus</name></expr></argument>, <argument pos:start="93:36" pos:end="93:47"><expr pos:start="93:36" pos:end="93:47"><name pos:start="93:36" pos:end="93:47">TYPE_SD_CARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:65"><expr pos:start="95:9" pos:end="95:64"><call pos:start="95:9" pos:end="95:64"><name pos:start="95:9" pos:end="95:27">qdev_prop_set_drive</name><argument_list pos:start="95:28" pos:end="95:64">(<argument pos:start="95:29" pos:end="95:35"><expr pos:start="95:29" pos:end="95:35"><name pos:start="95:29" pos:end="95:35">carddev</name></expr></argument>, <argument pos:start="95:38" pos:end="95:44"><expr pos:start="95:38" pos:end="95:44"><literal type="string" pos:start="95:38" pos:end="95:44">"drive"</literal></expr></argument>, <argument pos:start="95:47" pos:end="95:49"><expr pos:start="95:47" pos:end="95:49"><name pos:start="95:47" pos:end="95:49">blk</name></expr></argument>, <argument pos:start="95:52" pos:end="95:63"><expr pos:start="95:52" pos:end="95:63"><operator pos:start="95:52" pos:end="95:52">&amp;</operator><name pos:start="95:53" pos:end="95:63">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="99:47"><expr pos:start="97:9" pos:end="99:46"><call pos:start="97:9" pos:end="99:46"><name pos:start="97:9" pos:end="97:32">object_property_set_bool</name><argument_list pos:start="97:33" pos:end="99:46">(<argument pos:start="97:34" pos:end="97:48"><expr pos:start="97:34" pos:end="97:48"><call pos:start="97:34" pos:end="97:48"><name pos:start="97:34" pos:end="97:39">OBJECT</name><argument_list pos:start="97:40" pos:end="97:48">(<argument pos:start="97:41" pos:end="97:47"><expr pos:start="97:41" pos:end="97:47"><name pos:start="97:41" pos:end="97:47">carddev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:51" pos:end="97:54"><expr pos:start="97:51" pos:end="97:54"><name pos:start="97:51" pos:end="97:54">true</name></expr></argument>, <argument pos:start="97:57" pos:end="97:66"><expr pos:start="97:57" pos:end="97:66"><literal type="string" pos:start="97:57" pos:end="97:66">"realized"</literal></expr></argument>,

                                 <argument pos:start="99:34" pos:end="99:45"><expr pos:start="99:34" pos:end="99:45"><operator pos:start="99:34" pos:end="99:34">&amp;</operator><name pos:start="99:35" pos:end="99:45">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="105:5" pos:end="145:5">for <control pos:start="105:9" pos:end="105:46">(<init pos:start="105:10" pos:end="105:15"><expr pos:start="105:10" pos:end="105:14"><name pos:start="105:10" pos:end="105:10">i</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <literal type="number" pos:start="105:14" pos:end="105:14">0</literal></expr>;</init> <condition pos:start="105:17" pos:end="105:41"><expr pos:start="105:17" pos:end="105:40"><name pos:start="105:17" pos:end="105:17">i</name> <operator pos:start="105:19" pos:end="105:19">&lt;</operator> <name pos:start="105:21" pos:end="105:40">XLNX_ZYNQMP_NUM_SPIS</name></expr>;</condition> <incr pos:start="105:43" pos:end="105:45"><expr pos:start="105:43" pos:end="105:45"><name pos:start="105:43" pos:end="105:43">i</name><operator pos:start="105:44" pos:end="105:45">++</operator></expr></incr>)</control> <block pos:start="105:48" pos:end="145:5">{<block_content pos:start="107:9" pos:end="143:71">

        <decl_stmt pos:start="107:9" pos:end="107:24"><decl pos:start="107:9" pos:end="107:23"><type pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:14">SSIBus</name> <modifier pos:start="107:16" pos:end="107:16">*</modifier></type><name pos:start="107:17" pos:end="107:23">spi_bus</name></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:31"><decl pos:start="109:9" pos:end="109:30"><type pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:19">DeviceState</name> <modifier pos:start="109:21" pos:end="109:21">*</modifier></type><name pos:start="109:22" pos:end="109:30">flash_dev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="111:9" pos:end="111:25"><decl pos:start="111:9" pos:end="111:24"><type pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:16">qemu_irq</name></type> <name pos:start="111:18" pos:end="111:24">cs_line</name></decl>;</decl_stmt>

        <decl_stmt pos:start="113:9" pos:end="113:50"><decl pos:start="113:9" pos:end="113:49"><type pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:17">DriveInfo</name> <modifier pos:start="113:19" pos:end="113:19">*</modifier></type><name pos:start="113:20" pos:end="113:24">dinfo</name> <init pos:start="113:26" pos:end="113:49">= <expr pos:start="113:28" pos:end="113:49"><call pos:start="113:28" pos:end="113:49"><name pos:start="113:28" pos:end="113:41">drive_get_next</name><argument_list pos:start="113:42" pos:end="113:49">(<argument pos:start="113:43" pos:end="113:48"><expr pos:start="113:43" pos:end="113:48"><name pos:start="113:43" pos:end="113:48">IF_MTD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:54"><decl pos:start="115:9" pos:end="115:53"><type pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:13">gchar</name> <modifier pos:start="115:15" pos:end="115:15">*</modifier></type><name pos:start="115:16" pos:end="115:23">bus_name</name> <init pos:start="115:25" pos:end="115:53">= <expr pos:start="115:27" pos:end="115:53"><call pos:start="115:27" pos:end="115:53"><name pos:start="115:27" pos:end="115:41">g_strdup_printf</name><argument_list pos:start="115:42" pos:end="115:53">(<argument pos:start="115:43" pos:end="115:49"><expr pos:start="115:43" pos:end="115:49"><literal type="string" pos:start="115:43" pos:end="115:49">"spi%d"</literal></expr></argument>, <argument pos:start="115:52" pos:end="115:52"><expr pos:start="115:52" pos:end="115:52"><name pos:start="115:52" pos:end="115:52">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:74"><expr pos:start="119:9" pos:end="119:73"><name pos:start="119:9" pos:end="119:15">spi_bus</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <operator pos:start="119:19" pos:end="119:19">(</operator><name pos:start="119:20" pos:end="119:25">SSIBus</name> <operator pos:start="119:27" pos:end="119:27">*</operator><operator pos:start="119:28" pos:end="119:28">)</operator><call pos:start="119:29" pos:end="119:73"><name pos:start="119:29" pos:end="119:46">qdev_get_child_bus</name><argument_list pos:start="119:47" pos:end="119:73">(<argument pos:start="119:48" pos:end="119:62"><expr pos:start="119:48" pos:end="119:62"><call pos:start="119:48" pos:end="119:62"><name pos:start="119:48" pos:end="119:53">DEVICE</name><argument_list pos:start="119:54" pos:end="119:62">(<argument pos:start="119:55" pos:end="119:61"><expr pos:start="119:55" pos:end="119:61"><operator pos:start="119:55" pos:end="119:55">&amp;</operator><name pos:start="119:56" pos:end="119:61"><name pos:start="119:56" pos:end="119:56">s</name><operator pos:start="119:57" pos:end="119:58">-&gt;</operator><name pos:start="119:59" pos:end="119:61">soc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:65" pos:end="119:72"><expr pos:start="119:65" pos:end="119:72"><name pos:start="119:65" pos:end="119:72">bus_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:25"><expr pos:start="121:9" pos:end="121:24"><call pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:14">g_free</name><argument_list pos:start="121:15" pos:end="121:24">(<argument pos:start="121:16" pos:end="121:23"><expr pos:start="121:16" pos:end="121:23"><name pos:start="121:16" pos:end="121:23">bus_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:68"><expr pos:start="125:9" pos:end="125:67"><name pos:start="125:9" pos:end="125:17">flash_dev</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <call pos:start="125:21" pos:end="125:67"><name pos:start="125:21" pos:end="125:44">ssi_create_slave_no_init</name><argument_list pos:start="125:45" pos:end="125:67">(<argument pos:start="125:46" pos:end="125:52"><expr pos:start="125:46" pos:end="125:52"><name pos:start="125:46" pos:end="125:52">spi_bus</name></expr></argument>, <argument pos:start="125:55" pos:end="125:66"><expr pos:start="125:55" pos:end="125:66"><literal type="string" pos:start="125:55" pos:end="125:66">"sst25wf080"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:18">(<expr pos:start="127:13" pos:end="127:17"><name pos:start="127:13" pos:end="127:17">dinfo</name></expr>)</condition> <block pos:start="127:20" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:46">

            <expr_stmt pos:start="129:13" pos:end="131:46"><expr pos:start="129:13" pos:end="131:45"><call pos:start="129:13" pos:end="131:45"><name pos:start="129:13" pos:end="129:31">qdev_prop_set_drive</name><argument_list pos:start="129:32" pos:end="131:45">(<argument pos:start="129:33" pos:end="129:41"><expr pos:start="129:33" pos:end="129:41"><name pos:start="129:33" pos:end="129:41">flash_dev</name></expr></argument>, <argument pos:start="129:44" pos:end="129:50"><expr pos:start="129:44" pos:end="129:50"><literal type="string" pos:start="129:44" pos:end="129:50">"drive"</literal></expr></argument>, <argument pos:start="129:53" pos:end="129:78"><expr pos:start="129:53" pos:end="129:78"><call pos:start="129:53" pos:end="129:78"><name pos:start="129:53" pos:end="129:71">blk_by_legacy_dinfo</name><argument_list pos:start="129:72" pos:end="129:78">(<argument pos:start="129:73" pos:end="129:77"><expr pos:start="129:73" pos:end="129:77"><name pos:start="129:73" pos:end="129:77">dinfo</name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="131:33" pos:end="131:44"><expr pos:start="131:33" pos:end="131:44"><operator pos:start="131:33" pos:end="131:33">&amp;</operator><name pos:start="131:34" pos:end="131:44">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:36"><expr pos:start="135:9" pos:end="135:35"><call pos:start="135:9" pos:end="135:35"><name pos:start="135:9" pos:end="135:24">qdev_init_nofail</name><argument_list pos:start="135:25" pos:end="135:35">(<argument pos:start="135:26" pos:end="135:34"><expr pos:start="135:26" pos:end="135:34"><name pos:start="135:26" pos:end="135:34">flash_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="139:9" pos:end="139:68"><expr pos:start="139:9" pos:end="139:67"><name pos:start="139:9" pos:end="139:15">cs_line</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <call pos:start="139:19" pos:end="139:67"><name pos:start="139:19" pos:end="139:40">qdev_get_gpio_in_named</name><argument_list pos:start="139:41" pos:end="139:67">(<argument pos:start="139:42" pos:end="139:50"><expr pos:start="139:42" pos:end="139:50"><name pos:start="139:42" pos:end="139:50">flash_dev</name></expr></argument>, <argument pos:start="139:53" pos:end="139:63"><expr pos:start="139:53" pos:end="139:63"><name pos:start="139:53" pos:end="139:63">SSI_GPIO_CS</name></expr></argument>, <argument pos:start="139:66" pos:end="139:66"><expr pos:start="139:66" pos:end="139:66"><literal type="number" pos:start="139:66" pos:end="139:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:71"><expr pos:start="143:9" pos:end="143:70"><call pos:start="143:9" pos:end="143:70"><name pos:start="143:9" pos:end="143:26">sysbus_connect_irq</name><argument_list pos:start="143:27" pos:end="143:70">(<argument pos:start="143:28" pos:end="143:57"><expr pos:start="143:28" pos:end="143:57"><call pos:start="143:28" pos:end="143:57"><name pos:start="143:28" pos:end="143:41">SYS_BUS_DEVICE</name><argument_list pos:start="143:42" pos:end="143:57">(<argument pos:start="143:43" pos:end="143:56"><expr pos:start="143:43" pos:end="143:56"><operator pos:start="143:43" pos:end="143:43">&amp;</operator><name pos:start="143:44" pos:end="143:56"><name pos:start="143:44" pos:end="143:44">s</name><operator pos:start="143:45" pos:end="143:46">-&gt;</operator><name pos:start="143:47" pos:end="143:49">soc</name><operator pos:start="143:50" pos:end="143:50">.</operator><name pos:start="143:51" pos:end="143:53">spi</name><index pos:start="143:54" pos:end="143:56">[<expr pos:start="143:55" pos:end="143:55"><name pos:start="143:55" pos:end="143:55">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="143:60" pos:end="143:60"><expr pos:start="143:60" pos:end="143:60"><literal type="number" pos:start="143:60" pos:end="143:60">1</literal></expr></argument>, <argument pos:start="143:63" pos:end="143:69"><expr pos:start="143:63" pos:end="143:69"><name pos:start="143:63" pos:end="143:69">cs_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="149:5" pos:end="149:65">/* TODO create and connect IDE devices for ide_drive_get() */</comment>



    <expr_stmt pos:start="153:5" pos:end="153:41"><expr pos:start="153:5" pos:end="153:40"><name pos:start="153:5" pos:end="153:29"><name pos:start="153:5" pos:end="153:20">xlnx_ep108_binfo</name><operator pos:start="153:21" pos:end="153:21">.</operator><name pos:start="153:22" pos:end="153:29">ram_size</name></name> <operator pos:start="153:31" pos:end="153:31">=</operator> <name pos:start="153:33" pos:end="153:40">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:64"><expr pos:start="155:5" pos:end="155:63"><name pos:start="155:5" pos:end="155:36"><name pos:start="155:5" pos:end="155:20">xlnx_ep108_binfo</name><operator pos:start="155:21" pos:end="155:21">.</operator><name pos:start="155:22" pos:end="155:36">kernel_filename</name></name> <operator pos:start="155:38" pos:end="155:38">=</operator> <name pos:start="155:40" pos:end="155:63"><name pos:start="155:40" pos:end="155:46">machine</name><operator pos:start="155:47" pos:end="155:48">-&gt;</operator><name pos:start="155:49" pos:end="155:63">kernel_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:62"><expr pos:start="157:5" pos:end="157:61"><name pos:start="157:5" pos:end="157:35"><name pos:start="157:5" pos:end="157:20">xlnx_ep108_binfo</name><operator pos:start="157:21" pos:end="157:21">.</operator><name pos:start="157:22" pos:end="157:35">kernel_cmdline</name></name> <operator pos:start="157:37" pos:end="157:37">=</operator> <name pos:start="157:39" pos:end="157:61"><name pos:start="157:39" pos:end="157:45">machine</name><operator pos:start="157:46" pos:end="157:47">-&gt;</operator><name pos:start="157:48" pos:end="157:61">kernel_cmdline</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:64"><expr pos:start="159:5" pos:end="159:63"><name pos:start="159:5" pos:end="159:36"><name pos:start="159:5" pos:end="159:20">xlnx_ep108_binfo</name><operator pos:start="159:21" pos:end="159:21">.</operator><name pos:start="159:22" pos:end="159:36">initrd_filename</name></name> <operator pos:start="159:38" pos:end="159:38">=</operator> <name pos:start="159:40" pos:end="159:63"><name pos:start="159:40" pos:end="159:46">machine</name><operator pos:start="159:47" pos:end="159:48">-&gt;</operator><name pos:start="159:49" pos:end="159:63">initrd_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:38"><expr pos:start="161:5" pos:end="161:37"><name pos:start="161:5" pos:end="161:33"><name pos:start="161:5" pos:end="161:20">xlnx_ep108_binfo</name><operator pos:start="161:21" pos:end="161:21">.</operator><name pos:start="161:22" pos:end="161:33">loader_start</name></name> <operator pos:start="161:35" pos:end="161:35">=</operator> <literal type="number" pos:start="161:37" pos:end="161:37">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:60"><expr pos:start="163:5" pos:end="163:59"><call pos:start="163:5" pos:end="163:59"><name pos:start="163:5" pos:end="163:19">arm_load_kernel</name><argument_list pos:start="163:20" pos:end="163:59">(<argument pos:start="163:21" pos:end="163:39"><expr pos:start="163:21" pos:end="163:39"><name pos:start="163:21" pos:end="163:39"><name pos:start="163:21" pos:end="163:21">s</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:26">soc</name><operator pos:start="163:27" pos:end="163:27">.</operator><name pos:start="163:28" pos:end="163:39">boot_cpu_ptr</name></name></expr></argument>, <argument pos:start="163:42" pos:end="163:58"><expr pos:start="163:42" pos:end="163:58"><operator pos:start="163:42" pos:end="163:42">&amp;</operator><name pos:start="163:43" pos:end="163:58">xlnx_ep108_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
