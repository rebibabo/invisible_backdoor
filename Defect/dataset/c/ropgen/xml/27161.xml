<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27161.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:30">ich_elrsr_read</name><parameter_list pos:start="1:31" pos:end="1:72">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:42">CPUARMState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:71"><decl pos:start="1:50" pos:end="1:71"><type pos:start="1:50" pos:end="1:71"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:67">ARMCPRegInfo</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">ri</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:17">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">GICv3CPUState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">cs</name> <init pos:start="5:23" pos:end="5:44">= <expr pos:start="5:25" pos:end="5:44"><call pos:start="5:25" pos:end="5:44"><name pos:start="5:25" pos:end="5:39">icc_cs_from_env</name><argument_list pos:start="5:40" pos:end="5:44">(<argument pos:start="5:41" pos:end="5:43"><expr pos:start="5:41" pos:end="5:43"><name pos:start="5:41" pos:end="5:43">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:18">value</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="27:5">for <control pos:start="13:9" pos:end="13:43">(<init pos:start="13:10" pos:end="13:15"><expr pos:start="13:10" pos:end="13:14"><name pos:start="13:10" pos:end="13:10">i</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</init> <condition pos:start="13:17" pos:end="13:38"><expr pos:start="13:17" pos:end="13:37"><name pos:start="13:17" pos:end="13:17">i</name> <operator pos:start="13:19" pos:end="13:19">&lt;</operator> <name pos:start="13:21" pos:end="13:37"><name pos:start="13:21" pos:end="13:22">cs</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:37">num_list_regs</name></name></expr>;</condition> <incr pos:start="13:40" pos:end="13:42"><expr pos:start="13:40" pos:end="13:42"><name pos:start="13:40" pos:end="13:40">i</name><operator pos:start="13:41" pos:end="13:42">++</operator></expr></incr>)</control> <block pos:start="13:45" pos:end="27:5">{<block_content pos:start="15:9" pos:end="25:9">

        <decl_stmt pos:start="15:9" pos:end="15:40"><decl pos:start="15:9" pos:end="15:39"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint64_t</name></type> <name pos:start="15:18" pos:end="15:19">lr</name> <init pos:start="15:21" pos:end="15:39">= <expr pos:start="15:23" pos:end="15:39"><name pos:start="15:23" pos:end="15:39"><name pos:start="15:23" pos:end="15:24">cs</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:36">ich_lr_el2</name><index pos:start="15:37" pos:end="15:39">[<expr pos:start="15:38" pos:end="15:38"><name pos:start="15:38" pos:end="15:38">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="21:70">(<expr pos:start="19:13" pos:end="21:69"><operator pos:start="19:13" pos:end="19:13">(</operator><name pos:start="19:14" pos:end="19:15">lr</name> <operator pos:start="19:17" pos:end="19:17">&amp;</operator> <name pos:start="19:19" pos:end="19:39">ICH_LR_EL2_STATE_MASK</name><operator pos:start="19:40" pos:end="19:40">)</operator> <operator pos:start="19:42" pos:end="19:43">==</operator> <literal type="number" pos:start="19:45" pos:end="19:45">0</literal> <operator pos:start="19:47" pos:end="19:48">&amp;&amp;</operator>

            <operator pos:start="21:13" pos:end="21:13">(</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:16">lr</name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <name pos:start="21:20" pos:end="21:32">ICH_LR_EL2_HW</name><operator pos:start="21:33" pos:end="21:33">)</operator> <operator pos:start="21:35" pos:end="21:36">==</operator> <literal type="number" pos:start="21:38" pos:end="21:38">1</literal> <operator pos:start="21:40" pos:end="21:41">||</operator> <operator pos:start="21:43" pos:end="21:43">(</operator><name pos:start="21:44" pos:end="21:45">lr</name> <operator pos:start="21:47" pos:end="21:47">&amp;</operator> <name pos:start="21:49" pos:end="21:62">ICH_LR_EL2_EOI</name><operator pos:start="21:63" pos:end="21:63">)</operator> <operator pos:start="21:65" pos:end="21:66">==</operator> <literal type="number" pos:start="21:68" pos:end="21:68">0</literal><operator pos:start="21:69" pos:end="21:69">)</operator></expr>)</condition> <block pos:start="21:72" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:30">

            <expr_stmt pos:start="23:13" pos:end="23:30"><expr pos:start="23:13" pos:end="23:29"><name pos:start="23:13" pos:end="23:17">value</name> <operator pos:start="23:19" pos:end="23:20">|=</operator> <operator pos:start="23:22" pos:end="23:22">(</operator><literal type="number" pos:start="23:23" pos:end="23:23">1</literal> <operator pos:start="23:25" pos:end="23:26">&lt;&lt;</operator> <name pos:start="23:28" pos:end="23:28">i</name><operator pos:start="23:29" pos:end="23:29">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="31:5" pos:end="31:62"><expr pos:start="31:5" pos:end="31:61"><call pos:start="31:5" pos:end="31:61"><name pos:start="31:5" pos:end="31:30">trace_gicv3_ich_elrsr_read</name><argument_list pos:start="31:31" pos:end="31:61">(<argument pos:start="31:32" pos:end="31:53"><expr pos:start="31:32" pos:end="31:53"><call pos:start="31:32" pos:end="31:53"><name pos:start="31:32" pos:end="31:49">gicv3_redist_affid</name><argument_list pos:start="31:50" pos:end="31:53">(<argument pos:start="31:51" pos:end="31:52"><expr pos:start="31:51" pos:end="31:52"><name pos:start="31:51" pos:end="31:52">cs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:56" pos:end="31:60"><expr pos:start="31:56" pos:end="31:60"><name pos:start="31:56" pos:end="31:60">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="33:5" pos:end="33:17">return <expr pos:start="33:12" pos:end="33:16"><name pos:start="33:12" pos:end="33:16">value</name></expr>;</return>

</block_content>}</block></function>
</unit>
