<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5084.c" pos:tabs="8"><function pos:start="1:1" pos:end="371:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vp3_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">got_frame</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="371:1">{<block_content pos:start="9:5" pos:end="369:14">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">Vp3DecodeContext</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:23">s</name> <init pos:start="13:25" pos:end="13:42">= <expr pos:start="13:27" pos:end="13:42"><name pos:start="13:27" pos:end="13:42"><name pos:start="13:27" pos:end="13:31">avctx</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="28:0"><expr pos:start="23:5" pos:end="23:41"><call pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:17">init_get_bits</name><argument_list pos:start="23:18" pos:end="23:41">(<argument pos:start="23:19" pos:end="23:21"><expr pos:start="23:19" pos:end="23:21"><operator pos:start="23:19" pos:end="23:19">&amp;</operator><name pos:start="23:20" pos:end="23:21">gb</name></expr></argument>, <argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">buf</name></expr></argument>, <argument pos:start="23:29" pos:end="23:40"><expr pos:start="23:29" pos:end="23:40"><name pos:start="23:29" pos:end="23:36">buf_size</name> <operator pos:start="23:38" pos:end="23:38">*</operator> <literal type="number" pos:start="23:40" pos:end="23:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="27:1" pos:end="27:25">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:25">CONFIG_THEORA_DECODER</name></expr></cpp:if>

    <if_stmt pos:start="29:5" pos:end="90:0"><if pos:start="29:5" pos:end="90:0">if <condition pos:start="29:8" pos:end="29:36">(<expr pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:17">theora</name></name> <operator pos:start="29:19" pos:end="29:20">&amp;&amp;</operator> <call pos:start="29:22" pos:end="29:35"><name pos:start="29:22" pos:end="29:30">get_bits1</name><argument_list pos:start="29:31" pos:end="29:35">(<argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><operator pos:start="29:32" pos:end="29:32">&amp;</operator><name pos:start="29:33" pos:end="29:34">gb</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="31:5" pos:end="90:0">{<block_content pos:start="33:9" pos:end="85:18">

        <decl_stmt pos:start="33:9" pos:end="33:36"><decl pos:start="33:9" pos:end="33:35"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:16">type</name> <init pos:start="33:18" pos:end="33:35">= <expr pos:start="33:20" pos:end="33:35"><call pos:start="33:20" pos:end="33:35"><name pos:start="33:20" pos:end="33:27">get_bits</name><argument_list pos:start="33:28" pos:end="33:35">(<argument pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><operator pos:start="33:29" pos:end="33:29">&amp;</operator><name pos:start="33:30" pos:end="33:31">gb</name></expr></argument>, <argument pos:start="33:34" pos:end="33:34"><expr pos:start="33:34" pos:end="33:34"><literal type="number" pos:start="33:34" pos:end="33:34">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:33"><expr pos:start="35:9" pos:end="35:32"><call pos:start="35:9" pos:end="35:32"><name pos:start="35:9" pos:end="35:22">skip_bits_long</name><argument_list pos:start="35:23" pos:end="35:32">(<argument pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><operator pos:start="35:24" pos:end="35:24">&amp;</operator><name pos:start="35:25" pos:end="35:26">gb</name></expr></argument>, <argument pos:start="35:29" pos:end="35:31"><expr pos:start="35:29" pos:end="35:31"><literal type="number" pos:start="35:29" pos:end="35:29">6</literal><operator pos:start="35:30" pos:end="35:30">*</operator><literal type="number" pos:start="35:31" pos:end="35:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="35:35" pos:end="35:48">/* "theora" */</comment>



        <if_stmt pos:start="39:9" pos:end="79:9"><if pos:start="39:9" pos:end="65:9">if <condition pos:start="39:12" pos:end="39:22">(<expr pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:16">type</name> <operator pos:start="39:18" pos:end="39:19">==</operator> <literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr>)</condition> <block pos:start="39:24" pos:end="65:9">{<block_content pos:start="41:13" pos:end="63:23">

            <if_stmt pos:start="41:13" pos:end="47:13"><if pos:start="41:13" pos:end="47:13">if <condition pos:start="41:16" pos:end="41:61">(<expr pos:start="41:17" pos:end="41:60"><name pos:start="41:17" pos:end="41:44"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:24">avctx</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:44">active_thread_type</name></name><operator pos:start="41:45" pos:end="41:45">&amp;</operator><name pos:start="41:46" pos:end="41:60">FF_THREAD_FRAME</name></expr>)</condition> <block pos:start="41:63" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:44">

                <expr_stmt pos:start="43:17" pos:end="43:126"><expr pos:start="43:17" pos:end="43:125"><call pos:start="43:17" pos:end="43:125"><name pos:start="43:17" pos:end="43:22">av_log</name><argument_list pos:start="43:23" pos:end="43:125">(<argument pos:start="43:24" pos:end="43:28"><expr pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:28">avctx</name></expr></argument>, <argument pos:start="43:31" pos:end="43:42"><expr pos:start="43:31" pos:end="43:42"><name pos:start="43:31" pos:end="43:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:45" pos:end="43:124"><expr pos:start="43:45" pos:end="43:124"><literal type="string" pos:start="43:45" pos:end="43:124">"midstream reconfiguration with multithreading is unsupported, try -threads 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="45:17" pos:end="45:44">return <expr pos:start="45:24" pos:end="45:43"><name pos:start="45:24" pos:end="45:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:34"><expr pos:start="49:13" pos:end="49:33"><call pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:26">vp3_decode_end</name><argument_list pos:start="49:27" pos:end="49:33">(<argument pos:start="49:28" pos:end="49:32"><expr pos:start="49:28" pos:end="49:32"><name pos:start="49:28" pos:end="49:32">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:51"><expr pos:start="51:13" pos:end="51:50"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:50"><name pos:start="51:19" pos:end="51:38">theora_decode_header</name><argument_list pos:start="51:39" pos:end="51:50">(<argument pos:start="51:40" pos:end="51:44"><expr pos:start="51:40" pos:end="51:44"><name pos:start="51:40" pos:end="51:44">avctx</name></expr></argument>, <argument pos:start="51:47" pos:end="51:49"><expr pos:start="51:47" pos:end="51:49"><operator pos:start="51:47" pos:end="51:47">&amp;</operator><name pos:start="51:48" pos:end="51:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="55:13" pos:end="61:45"><if pos:start="55:13" pos:end="59:13">if <condition pos:start="55:16" pos:end="55:24">(<expr pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:19">ret</name> <operator pos:start="55:21" pos:end="55:21">&lt;</operator> <literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr>)</condition> <block pos:start="55:26" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:38">

                <expr_stmt pos:start="57:17" pos:end="57:38"><expr pos:start="57:17" pos:end="57:37"><call pos:start="57:17" pos:end="57:37"><name pos:start="57:17" pos:end="57:30">vp3_decode_end</name><argument_list pos:start="57:31" pos:end="57:37">(<argument pos:start="57:32" pos:end="57:36"><expr pos:start="57:32" pos:end="57:36"><name pos:start="57:32" pos:end="57:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="59:15" pos:end="61:45">else<block type="pseudo" pos:start="61:17" pos:end="61:45"><block_content pos:start="61:17" pos:end="61:45">

                <expr_stmt pos:start="61:17" pos:end="61:45"><expr pos:start="61:17" pos:end="61:44"><name pos:start="61:17" pos:end="61:19">ret</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:44"><name pos:start="61:23" pos:end="61:37">vp3_decode_init</name><argument_list pos:start="61:38" pos:end="61:44">(<argument pos:start="61:39" pos:end="61:43"><expr pos:start="61:39" pos:end="61:43"><name pos:start="61:39" pos:end="61:43">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <return pos:start="63:13" pos:end="63:23">return <expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">ret</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="79:9">else if <condition pos:start="65:19" pos:end="65:29">(<expr pos:start="65:20" pos:end="65:28"><name pos:start="65:20" pos:end="65:23">type</name> <operator pos:start="65:25" pos:end="65:26">==</operator> <literal type="number" pos:start="65:28" pos:end="65:28">2</literal></expr>)</condition> <block pos:start="65:31" pos:end="79:9">{<block_content pos:start="67:13" pos:end="77:23">

            <expr_stmt pos:start="67:13" pos:end="67:51"><expr pos:start="67:13" pos:end="67:50"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:50"><name pos:start="67:19" pos:end="67:38">theora_decode_tables</name><argument_list pos:start="67:39" pos:end="67:50">(<argument pos:start="67:40" pos:end="67:44"><expr pos:start="67:40" pos:end="67:44"><name pos:start="67:40" pos:end="67:44">avctx</name></expr></argument>, <argument pos:start="67:47" pos:end="67:49"><expr pos:start="67:47" pos:end="67:49"><operator pos:start="67:47" pos:end="67:47">&amp;</operator><name pos:start="67:48" pos:end="67:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="75:45"><if pos:start="69:13" pos:end="73:13">if <condition pos:start="69:16" pos:end="69:24">(<expr pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:19">ret</name> <operator pos:start="69:21" pos:end="69:21">&lt;</operator> <literal type="number" pos:start="69:23" pos:end="69:23">0</literal></expr>)</condition> <block pos:start="69:26" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:38">

                <expr_stmt pos:start="71:17" pos:end="71:38"><expr pos:start="71:17" pos:end="71:37"><call pos:start="71:17" pos:end="71:37"><name pos:start="71:17" pos:end="71:30">vp3_decode_end</name><argument_list pos:start="71:31" pos:end="71:37">(<argument pos:start="71:32" pos:end="71:36"><expr pos:start="71:32" pos:end="71:36"><name pos:start="71:32" pos:end="71:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="73:15" pos:end="75:45">else<block type="pseudo" pos:start="75:17" pos:end="75:45"><block_content pos:start="75:17" pos:end="75:45">

                <expr_stmt pos:start="75:17" pos:end="75:45"><expr pos:start="75:17" pos:end="75:44"><name pos:start="75:17" pos:end="75:19">ret</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:44"><name pos:start="75:23" pos:end="75:37">vp3_decode_init</name><argument_list pos:start="75:38" pos:end="75:44">(<argument pos:start="75:39" pos:end="75:43"><expr pos:start="75:39" pos:end="75:43"><name pos:start="75:39" pos:end="75:43">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <return pos:start="77:13" pos:end="77:23">return <expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:89"><expr pos:start="83:9" pos:end="83:88"><call pos:start="83:9" pos:end="83:88"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:88">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:87"><expr pos:start="83:37" pos:end="83:87"><literal type="string" pos:start="83:37" pos:end="83:87">"Header packet passed to frame decoder, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:18">return <expr pos:start="85:16" pos:end="85:17"><operator pos:start="85:16" pos:end="85:16">-</operator><literal type="number" pos:start="85:17" pos:end="85:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="93:5" pos:end="93:34"><expr pos:start="93:5" pos:end="93:33"><name pos:start="93:5" pos:end="93:15"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:15">keyframe</name></name> <operator pos:start="93:17" pos:end="93:17">=</operator> <operator pos:start="93:19" pos:end="93:19">!</operator><call pos:start="93:20" pos:end="93:33"><name pos:start="93:20" pos:end="93:28">get_bits1</name><argument_list pos:start="93:29" pos:end="93:33">(<argument pos:start="93:30" pos:end="93:32"><expr pos:start="93:30" pos:end="93:32"><operator pos:start="93:30" pos:end="93:30">&amp;</operator><name pos:start="93:31" pos:end="93:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:26">(<expr pos:start="95:9" pos:end="95:25"><operator pos:start="95:9" pos:end="95:9">!</operator><name pos:start="95:10" pos:end="95:25"><name pos:start="95:10" pos:end="95:10">s</name><operator pos:start="95:11" pos:end="95:12">-&gt;</operator><name pos:start="95:13" pos:end="95:25">all_fragments</name></name></expr>)</condition> <block pos:start="95:28" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:18">

        <expr_stmt pos:start="97:9" pos:end="97:81"><expr pos:start="97:9" pos:end="97:80"><call pos:start="97:9" pos:end="97:80"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="97:80">(<argument pos:start="97:16" pos:end="97:20"><expr pos:start="97:16" pos:end="97:20"><name pos:start="97:16" pos:end="97:20">avctx</name></expr></argument>, <argument pos:start="97:23" pos:end="97:34"><expr pos:start="97:23" pos:end="97:34"><name pos:start="97:23" pos:end="97:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:37" pos:end="97:79"><expr pos:start="97:37" pos:end="97:79"><literal type="string" pos:start="97:37" pos:end="97:79">"Data packet without prior valid headers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:18">return <expr pos:start="99:16" pos:end="99:17"><operator pos:start="99:16" pos:end="99:16">-</operator><literal type="number" pos:start="99:17" pos:end="99:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="105:26"><if pos:start="103:5" pos:end="105:26">if <condition pos:start="103:8" pos:end="103:19">(<expr pos:start="103:9" pos:end="103:18"><operator pos:start="103:9" pos:end="103:9">!</operator><name pos:start="103:10" pos:end="103:18"><name pos:start="103:10" pos:end="103:10">s</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:18">theora</name></name></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:26"><block_content pos:start="105:9" pos:end="105:26">

        <expr_stmt pos:start="105:9" pos:end="105:26"><expr pos:start="105:9" pos:end="105:25"><call pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:17">skip_bits</name><argument_list pos:start="105:18" pos:end="105:25">(<argument pos:start="105:19" pos:end="105:21"><expr pos:start="105:19" pos:end="105:21"><operator pos:start="105:19" pos:end="105:19">&amp;</operator><name pos:start="105:20" pos:end="105:21">gb</name></expr></argument>, <argument pos:start="105:24" pos:end="105:24"><expr pos:start="105:24" pos:end="105:24"><literal type="number" pos:start="105:24" pos:end="105:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="107:5" pos:end="109:35">for <control pos:start="107:9" pos:end="107:27">(<init pos:start="107:10" pos:end="107:15"><expr pos:start="107:10" pos:end="107:14"><name pos:start="107:10" pos:end="107:10">i</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <literal type="number" pos:start="107:14" pos:end="107:14">0</literal></expr>;</init> <condition pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:21"><name pos:start="107:17" pos:end="107:17">i</name> <operator pos:start="107:19" pos:end="107:19">&lt;</operator> <literal type="number" pos:start="107:21" pos:end="107:21">3</literal></expr>;</condition> <incr pos:start="107:24" pos:end="107:26"><expr pos:start="107:24" pos:end="107:26"><name pos:start="107:24" pos:end="107:24">i</name><operator pos:start="107:25" pos:end="107:26">++</operator></expr></incr>)</control><block type="pseudo" pos:start="109:9" pos:end="109:35"><block_content pos:start="109:9" pos:end="109:35">

        <expr_stmt pos:start="109:9" pos:end="109:35"><expr pos:start="109:9" pos:end="109:34"><name pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:19">last_qps</name><index pos:start="109:20" pos:end="109:22">[<expr pos:start="109:21" pos:end="109:21"><name pos:start="109:21" pos:end="109:21">i</name></expr>]</index></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <name pos:start="109:26" pos:end="109:34"><name pos:start="109:26" pos:end="109:26">s</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:31">qps</name><index pos:start="109:32" pos:end="109:34">[<expr pos:start="109:33" pos:end="109:33"><name pos:start="109:33" pos:end="109:33">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="113:5" pos:end="113:14"><expr pos:start="113:5" pos:end="113:13"><name pos:start="113:5" pos:end="113:11"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:11">nqps</name></name><operator pos:start="113:12" pos:end="113:12">=</operator><literal type="number" pos:start="113:13" pos:end="113:13">0</literal></expr>;</expr_stmt>

    <do pos:start="115:5" pos:end="119:66">do<block pos:start="115:7" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:44">

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:14">qps</name><index pos:start="117:15" pos:end="117:25">[<expr pos:start="117:16" pos:end="117:24"><name pos:start="117:16" pos:end="117:22"><name pos:start="117:16" pos:end="117:16">s</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:22">nqps</name></name><operator pos:start="117:23" pos:end="117:24">++</operator></expr>]</index></name><operator pos:start="117:26" pos:end="117:26">=</operator> <call pos:start="117:28" pos:end="117:43"><name pos:start="117:28" pos:end="117:35">get_bits</name><argument_list pos:start="117:36" pos:end="117:43">(<argument pos:start="117:37" pos:end="117:39"><expr pos:start="117:37" pos:end="117:39"><operator pos:start="117:37" pos:end="117:37">&amp;</operator><name pos:start="117:38" pos:end="117:39">gb</name></expr></argument>, <argument pos:start="117:42" pos:end="117:42"><expr pos:start="117:42" pos:end="117:42"><literal type="number" pos:start="117:42" pos:end="117:42">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while<condition pos:start="119:12" pos:end="119:65">(<expr pos:start="119:13" pos:end="119:64"><name pos:start="119:13" pos:end="119:21"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:21">theora</name></name> <operator pos:start="119:23" pos:end="119:24">&gt;=</operator> <literal type="number" pos:start="119:26" pos:end="119:33">0x030200</literal> <operator pos:start="119:35" pos:end="119:36">&amp;&amp;</operator> <name pos:start="119:38" pos:end="119:44"><name pos:start="119:38" pos:end="119:38">s</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:44">nqps</name></name><operator pos:start="119:45" pos:end="119:45">&lt;</operator><literal type="number" pos:start="119:46" pos:end="119:46">3</literal> <operator pos:start="119:48" pos:end="119:49">&amp;&amp;</operator> <call pos:start="119:51" pos:end="119:64"><name pos:start="119:51" pos:end="119:59">get_bits1</name><argument_list pos:start="119:60" pos:end="119:64">(<argument pos:start="119:61" pos:end="119:63"><expr pos:start="119:61" pos:end="119:63"><operator pos:start="119:61" pos:end="119:61">&amp;</operator><name pos:start="119:62" pos:end="119:63">gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    <for pos:start="121:5" pos:end="123:23">for <control pos:start="121:9" pos:end="121:33">(<init pos:start="121:10" pos:end="121:21"><expr pos:start="121:10" pos:end="121:20"><name pos:start="121:10" pos:end="121:10">i</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <name pos:start="121:14" pos:end="121:20"><name pos:start="121:14" pos:end="121:14">s</name><operator pos:start="121:15" pos:end="121:16">-&gt;</operator><name pos:start="121:17" pos:end="121:20">nqps</name></name></expr>;</init> <condition pos:start="121:23" pos:end="121:28"><expr pos:start="121:23" pos:end="121:27"><name pos:start="121:23" pos:end="121:23">i</name> <operator pos:start="121:25" pos:end="121:25">&lt;</operator> <literal type="number" pos:start="121:27" pos:end="121:27">3</literal></expr>;</condition> <incr pos:start="121:30" pos:end="121:32"><expr pos:start="121:30" pos:end="121:32"><name pos:start="121:30" pos:end="121:30">i</name><operator pos:start="121:31" pos:end="121:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:9" pos:end="123:23"><block_content pos:start="123:9" pos:end="123:23">

        <expr_stmt pos:start="123:9" pos:end="123:23"><expr pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:17"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:14">qps</name><index pos:start="123:15" pos:end="123:17">[<expr pos:start="123:16" pos:end="123:16"><name pos:start="123:16" pos:end="123:16">i</name></expr>]</index></name> <operator pos:start="123:19" pos:end="123:19">=</operator> <operator pos:start="123:21" pos:end="123:21">-</operator><literal type="number" pos:start="123:22" pos:end="123:22">1</literal></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="127:5" pos:end="131:68"><if pos:start="127:5" pos:end="131:68">if <condition pos:start="127:8" pos:end="127:45">(<expr pos:start="127:9" pos:end="127:44"><name pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:16">avctx</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:23">debug</name></name> <operator pos:start="127:25" pos:end="127:25">&amp;</operator> <name pos:start="127:27" pos:end="127:44">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="131:68"><block_content pos:start="129:9" pos:end="131:68">

        <expr_stmt pos:start="129:9" pos:end="131:68"><expr pos:start="129:9" pos:end="131:67"><call pos:start="129:9" pos:end="131:67"><name pos:start="129:9" pos:end="129:14">av_log</name><argument_list pos:start="129:15" pos:end="131:67">(<argument pos:start="129:16" pos:end="129:23"><expr pos:start="129:16" pos:end="129:23"><name pos:start="129:16" pos:end="129:23"><name pos:start="129:16" pos:end="129:16">s</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:23">avctx</name></name></expr></argument>, <argument pos:start="129:26" pos:end="129:36"><expr pos:start="129:26" pos:end="129:36"><name pos:start="129:26" pos:end="129:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="129:39" pos:end="129:72"><expr pos:start="129:39" pos:end="129:72"><literal type="string" pos:start="129:39" pos:end="129:72">" VP3 %sframe #%d: Q index = %d\n"</literal></expr></argument>,

            <argument pos:start="131:13" pos:end="131:32"><expr pos:start="131:13" pos:end="131:32"><ternary pos:start="131:13" pos:end="131:32"><condition pos:start="131:13" pos:end="131:24"><expr pos:start="131:13" pos:end="131:23"><name pos:start="131:13" pos:end="131:23"><name pos:start="131:13" pos:end="131:13">s</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:23">keyframe</name></name></expr>?</condition><then pos:start="131:25" pos:end="131:29"><expr pos:start="131:25" pos:end="131:29"><literal type="string" pos:start="131:25" pos:end="131:29">"key"</literal></expr></then><else pos:start="131:30" pos:end="131:32">:<expr pos:start="131:31" pos:end="131:32"><literal type="string" pos:start="131:31" pos:end="131:32">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="131:35" pos:end="131:55"><expr pos:start="131:35" pos:end="131:55"><name pos:start="131:35" pos:end="131:53"><name pos:start="131:35" pos:end="131:39">avctx</name><operator pos:start="131:40" pos:end="131:41">-&gt;</operator><name pos:start="131:42" pos:end="131:53">frame_number</name></name><operator pos:start="131:54" pos:end="131:54">+</operator><literal type="number" pos:start="131:55" pos:end="131:55">1</literal></expr></argument>, <argument pos:start="131:58" pos:end="131:66"><expr pos:start="131:58" pos:end="131:66"><name pos:start="131:58" pos:end="131:66"><name pos:start="131:58" pos:end="131:58">s</name><operator pos:start="131:59" pos:end="131:60">-&gt;</operator><name pos:start="131:61" pos:end="131:63">qps</name><index pos:start="131:64" pos:end="131:66">[<expr pos:start="131:65" pos:end="131:65"><literal type="number" pos:start="131:65" pos:end="131:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="137:84"><expr pos:start="135:5" pos:end="137:83"><name pos:start="135:5" pos:end="135:23"><name pos:start="135:5" pos:end="135:5">s</name><operator pos:start="135:6" pos:end="135:7">-&gt;</operator><name pos:start="135:8" pos:end="135:23">skip_loop_filter</name></name> <operator pos:start="135:25" pos:end="135:25">=</operator> <operator pos:start="135:27" pos:end="135:27">!</operator><name pos:start="135:28" pos:end="135:60"><name pos:start="135:28" pos:end="135:28">s</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:49">filter_limit_values</name><index pos:start="135:50" pos:end="135:60">[<expr pos:start="135:51" pos:end="135:59"><name pos:start="135:51" pos:end="135:59"><name pos:start="135:51" pos:end="135:51">s</name><operator pos:start="135:52" pos:end="135:53">-&gt;</operator><name pos:start="135:54" pos:end="135:56">qps</name><index pos:start="135:57" pos:end="135:59">[<expr pos:start="135:58" pos:end="135:58"><literal type="number" pos:start="135:58" pos:end="135:58">0</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="135:62" pos:end="135:63">||</operator>

        <name pos:start="137:9" pos:end="137:31"><name pos:start="137:9" pos:end="137:13">avctx</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:31">skip_loop_filter</name></name> <operator pos:start="137:33" pos:end="137:34">&gt;=</operator> <operator pos:start="137:36" pos:end="137:36">(</operator><ternary pos:start="137:37" pos:end="137:82"><condition pos:start="137:37" pos:end="137:49"><expr pos:start="137:37" pos:end="137:47"><name pos:start="137:37" pos:end="137:47"><name pos:start="137:37" pos:end="137:37">s</name><operator pos:start="137:38" pos:end="137:39">-&gt;</operator><name pos:start="137:40" pos:end="137:47">keyframe</name></name></expr> ?</condition><then pos:start="137:51" pos:end="137:63"> <expr pos:start="137:51" pos:end="137:63"><name pos:start="137:51" pos:end="137:63">AVDISCARD_ALL</name></expr> </then><else pos:start="137:65" pos:end="137:82">: <expr pos:start="137:67" pos:end="137:82"><name pos:start="137:67" pos:end="137:82">AVDISCARD_NONKEY</name></expr></else></ternary><operator pos:start="137:83" pos:end="137:83">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="141:5" pos:end="143:28"><if pos:start="141:5" pos:end="143:28">if <condition pos:start="141:8" pos:end="141:36">(<expr pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:17"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:14">qps</name><index pos:start="141:15" pos:end="141:17">[<expr pos:start="141:16" pos:end="141:16"><literal type="number" pos:start="141:16" pos:end="141:16">0</literal></expr>]</index></name> <operator pos:start="141:19" pos:end="141:20">!=</operator> <name pos:start="141:22" pos:end="141:35"><name pos:start="141:22" pos:end="141:22">s</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:32">last_qps</name><index pos:start="141:33" pos:end="141:35">[<expr pos:start="141:34" pos:end="141:34"><literal type="number" pos:start="141:34" pos:end="141:34">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:28"><block_content pos:start="143:9" pos:end="143:28">

        <expr_stmt pos:start="143:9" pos:end="143:28"><expr pos:start="143:9" pos:end="143:27"><call pos:start="143:9" pos:end="143:27"><name pos:start="143:9" pos:end="143:24">init_loop_filter</name><argument_list pos:start="143:25" pos:end="143:27">(<argument pos:start="143:26" pos:end="143:26"><expr pos:start="143:26" pos:end="143:26"><name pos:start="143:26" pos:end="143:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="147:5" pos:end="155:35">for <control pos:start="147:9" pos:end="147:33">(<init pos:start="147:10" pos:end="147:15"><expr pos:start="147:10" pos:end="147:14"><name pos:start="147:10" pos:end="147:10">i</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <literal type="number" pos:start="147:14" pos:end="147:14">0</literal></expr>;</init> <condition pos:start="147:17" pos:end="147:28"><expr pos:start="147:17" pos:end="147:27"><name pos:start="147:17" pos:end="147:17">i</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <name pos:start="147:21" pos:end="147:27"><name pos:start="147:21" pos:end="147:21">s</name><operator pos:start="147:22" pos:end="147:23">-&gt;</operator><name pos:start="147:24" pos:end="147:27">nqps</name></name></expr>;</condition> <incr pos:start="147:30" pos:end="147:32"><expr pos:start="147:30" pos:end="147:32"><name pos:start="147:30" pos:end="147:30">i</name><operator pos:start="147:31" pos:end="147:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="153:9" pos:end="155:35"><block_content pos:start="153:9" pos:end="155:35">

        <comment type="line" pos:start="149:9" pos:end="149:68">// reinit all dequantizers if the first one changed, because</comment>

        <comment type="line" pos:start="151:9" pos:end="151:70">// the DC of the first quantizer must be used for all matrices</comment>

        <if_stmt pos:start="153:9" pos:end="155:35"><if pos:start="153:9" pos:end="155:35">if <condition pos:start="153:12" pos:end="153:71">(<expr pos:start="153:13" pos:end="153:70"><name pos:start="153:13" pos:end="153:21"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:18">qps</name><index pos:start="153:19" pos:end="153:21">[<expr pos:start="153:20" pos:end="153:20"><name pos:start="153:20" pos:end="153:20">i</name></expr>]</index></name> <operator pos:start="153:23" pos:end="153:24">!=</operator> <name pos:start="153:26" pos:end="153:39"><name pos:start="153:26" pos:end="153:26">s</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:36">last_qps</name><index pos:start="153:37" pos:end="153:39">[<expr pos:start="153:38" pos:end="153:38"><name pos:start="153:38" pos:end="153:38">i</name></expr>]</index></name> <operator pos:start="153:41" pos:end="153:42">||</operator> <name pos:start="153:44" pos:end="153:52"><name pos:start="153:44" pos:end="153:44">s</name><operator pos:start="153:45" pos:end="153:46">-&gt;</operator><name pos:start="153:47" pos:end="153:49">qps</name><index pos:start="153:50" pos:end="153:52">[<expr pos:start="153:51" pos:end="153:51"><literal type="number" pos:start="153:51" pos:end="153:51">0</literal></expr>]</index></name> <operator pos:start="153:54" pos:end="153:55">!=</operator> <name pos:start="153:57" pos:end="153:70"><name pos:start="153:57" pos:end="153:57">s</name><operator pos:start="153:58" pos:end="153:59">-&gt;</operator><name pos:start="153:60" pos:end="153:67">last_qps</name><index pos:start="153:68" pos:end="153:70">[<expr pos:start="153:69" pos:end="153:69"><literal type="number" pos:start="153:69" pos:end="153:69">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:35"><block_content pos:start="155:13" pos:end="155:35">

            <expr_stmt pos:start="155:13" pos:end="155:35"><expr pos:start="155:13" pos:end="155:34"><call pos:start="155:13" pos:end="155:34"><name pos:start="155:13" pos:end="155:28">init_dequantizer</name><argument_list pos:start="155:29" pos:end="155:34">(<argument pos:start="155:30" pos:end="155:30"><expr pos:start="155:30" pos:end="155:30"><name pos:start="155:30" pos:end="155:30">s</name></expr></argument>, <argument pos:start="155:33" pos:end="155:33"><expr pos:start="155:33" pos:end="155:33"><name pos:start="155:33" pos:end="155:33">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



    <if_stmt pos:start="159:5" pos:end="161:24"><if pos:start="159:5" pos:end="161:24">if <condition pos:start="159:8" pos:end="159:62">(<expr pos:start="159:9" pos:end="159:61"><name pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:13">avctx</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:25">skip_frame</name></name> <operator pos:start="159:27" pos:end="159:28">&gt;=</operator> <name pos:start="159:30" pos:end="159:45">AVDISCARD_NONKEY</name> <operator pos:start="159:47" pos:end="159:48">&amp;&amp;</operator> <operator pos:start="159:50" pos:end="159:50">!</operator><name pos:start="159:51" pos:end="159:61"><name pos:start="159:51" pos:end="159:51">s</name><operator pos:start="159:52" pos:end="159:53">-&gt;</operator><name pos:start="159:54" pos:end="159:61">keyframe</name></name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:24"><block_content pos:start="161:9" pos:end="161:24">

        <return pos:start="161:9" pos:end="161:24">return <expr pos:start="161:16" pos:end="161:23"><name pos:start="161:16" pos:end="161:23">buf_size</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:35"><expr pos:start="165:5" pos:end="165:34"><name pos:start="165:5" pos:end="165:30"><name pos:start="165:5" pos:end="165:5">s</name><operator pos:start="165:6" pos:end="165:7">-&gt;</operator><name pos:start="165:8" pos:end="165:20">current_frame</name><operator pos:start="165:21" pos:end="165:21">.</operator><name pos:start="165:22" pos:end="165:30">reference</name></name> <operator pos:start="165:32" pos:end="165:32">=</operator> <literal type="number" pos:start="165:34" pos:end="165:34">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:85"><expr pos:start="167:5" pos:end="167:84"><name pos:start="167:5" pos:end="167:30"><name pos:start="167:5" pos:end="167:5">s</name><operator pos:start="167:6" pos:end="167:7">-&gt;</operator><name pos:start="167:8" pos:end="167:20">current_frame</name><operator pos:start="167:21" pos:end="167:21">.</operator><name pos:start="167:22" pos:end="167:30">pict_type</name></name> <operator pos:start="167:32" pos:end="167:32">=</operator> <ternary pos:start="167:34" pos:end="167:84"><condition pos:start="167:34" pos:end="167:46"><expr pos:start="167:34" pos:end="167:44"><name pos:start="167:34" pos:end="167:44"><name pos:start="167:34" pos:end="167:34">s</name><operator pos:start="167:35" pos:end="167:36">-&gt;</operator><name pos:start="167:37" pos:end="167:44">keyframe</name></name></expr> ?</condition><then pos:start="167:48" pos:end="167:64"> <expr pos:start="167:48" pos:end="167:64"><name pos:start="167:48" pos:end="167:64">AV_PICTURE_TYPE_I</name></expr> </then><else pos:start="167:66" pos:end="167:84">: <expr pos:start="167:68" pos:end="167:84"><name pos:start="167:68" pos:end="167:84">AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:45"><expr pos:start="169:5" pos:end="169:44"><name pos:start="169:5" pos:end="169:30"><name pos:start="169:5" pos:end="169:5">s</name><operator pos:start="169:6" pos:end="169:7">-&gt;</operator><name pos:start="169:8" pos:end="169:20">current_frame</name><operator pos:start="169:21" pos:end="169:21">.</operator><name pos:start="169:22" pos:end="169:30">key_frame</name></name> <operator pos:start="169:32" pos:end="169:32">=</operator> <name pos:start="169:34" pos:end="169:44"><name pos:start="169:34" pos:end="169:34">s</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:44">keyframe</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="177:5"><if pos:start="171:5" pos:end="177:5">if <condition pos:start="171:8" pos:end="171:59">(<expr pos:start="171:9" pos:end="171:58"><call pos:start="171:9" pos:end="171:54"><name pos:start="171:9" pos:end="171:28">ff_thread_get_buffer</name><argument_list pos:start="171:29" pos:end="171:54">(<argument pos:start="171:30" pos:end="171:34"><expr pos:start="171:30" pos:end="171:34"><name pos:start="171:30" pos:end="171:34">avctx</name></expr></argument>, <argument pos:start="171:37" pos:end="171:53"><expr pos:start="171:37" pos:end="171:53"><operator pos:start="171:37" pos:end="171:37">&amp;</operator><name pos:start="171:38" pos:end="171:53"><name pos:start="171:38" pos:end="171:38">s</name><operator pos:start="171:39" pos:end="171:40">-&gt;</operator><name pos:start="171:41" pos:end="171:53">current_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="171:56" pos:end="171:56">&lt;</operator> <literal type="number" pos:start="171:58" pos:end="171:58">0</literal></expr>)</condition> <block pos:start="171:61" pos:end="177:5">{<block_content pos:start="173:9" pos:end="175:19">

        <expr_stmt pos:start="173:9" pos:end="173:64"><expr pos:start="173:9" pos:end="173:63"><call pos:start="173:9" pos:end="173:63"><name pos:start="173:9" pos:end="173:14">av_log</name><argument_list pos:start="173:15" pos:end="173:63">(<argument pos:start="173:16" pos:end="173:23"><expr pos:start="173:16" pos:end="173:23"><name pos:start="173:16" pos:end="173:23"><name pos:start="173:16" pos:end="173:16">s</name><operator pos:start="173:17" pos:end="173:18">-&gt;</operator><name pos:start="173:19" pos:end="173:23">avctx</name></name></expr></argument>, <argument pos:start="173:26" pos:end="173:37"><expr pos:start="173:26" pos:end="173:37"><name pos:start="173:26" pos:end="173:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="173:40" pos:end="173:62"><expr pos:start="173:40" pos:end="173:62"><literal type="string" pos:start="173:40" pos:end="173:62">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="175:9" pos:end="175:19">goto <name pos:start="175:14" pos:end="175:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="181:5" pos:end="183:78"><if pos:start="181:5" pos:end="183:78">if <condition pos:start="181:8" pos:end="181:28">(<expr pos:start="181:9" pos:end="181:27"><operator pos:start="181:9" pos:end="181:9">!</operator><name pos:start="181:10" pos:end="181:27"><name pos:start="181:10" pos:end="181:10">s</name><operator pos:start="181:11" pos:end="181:12">-&gt;</operator><name pos:start="181:13" pos:end="181:27">edge_emu_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="183:9" pos:end="183:78"><block_content pos:start="183:9" pos:end="183:78">

        <expr_stmt pos:start="183:9" pos:end="183:78"><expr pos:start="183:9" pos:end="183:77"><name pos:start="183:9" pos:end="183:26"><name pos:start="183:9" pos:end="183:9">s</name><operator pos:start="183:10" pos:end="183:11">-&gt;</operator><name pos:start="183:12" pos:end="183:26">edge_emu_buffer</name></name> <operator pos:start="183:28" pos:end="183:28">=</operator> <call pos:start="183:30" pos:end="183:77"><name pos:start="183:30" pos:end="183:38">av_malloc</name><argument_list pos:start="183:39" pos:end="183:77">(<argument pos:start="183:40" pos:end="183:76"><expr pos:start="183:40" pos:end="183:76"><literal type="number" pos:start="183:40" pos:end="183:40">9</literal><operator pos:start="183:41" pos:end="183:41">*</operator><call pos:start="183:42" pos:end="183:76"><name pos:start="183:42" pos:end="183:46">FFABS</name><argument_list pos:start="183:47" pos:end="183:76">(<argument pos:start="183:48" pos:end="183:75"><expr pos:start="183:48" pos:end="183:75"><name pos:start="183:48" pos:end="183:75"><name pos:start="183:48" pos:end="183:48">s</name><operator pos:start="183:49" pos:end="183:50">-&gt;</operator><name pos:start="183:51" pos:end="183:63">current_frame</name><operator pos:start="183:64" pos:end="183:64">.</operator><name pos:start="183:65" pos:end="183:72">linesize</name><index pos:start="183:73" pos:end="183:75">[<expr pos:start="183:74" pos:end="183:74"><literal type="number" pos:start="183:74" pos:end="183:74">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="251:5"><if pos:start="187:5" pos:end="223:5">if <condition pos:start="187:8" pos:end="187:20">(<expr pos:start="187:9" pos:end="187:19"><name pos:start="187:9" pos:end="187:19"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:19">keyframe</name></name></expr>)</condition> <block pos:start="187:22" pos:end="223:5">{<block_content pos:start="189:9" pos:end="221:9">

        <if_stmt pos:start="189:9" pos:end="209:9"><if pos:start="189:9" pos:end="209:9">if <condition pos:start="189:12" pos:end="189:23">(<expr pos:start="189:13" pos:end="189:22"><operator pos:start="189:13" pos:end="189:13">!</operator><name pos:start="189:14" pos:end="189:22"><name pos:start="189:14" pos:end="189:14">s</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:22">theora</name></name></expr>)</condition>

        <block pos:start="191:9" pos:end="209:9">{<block_content pos:start="193:13" pos:end="207:13">

            <expr_stmt pos:start="193:13" pos:end="193:30"><expr pos:start="193:13" pos:end="193:29"><call pos:start="193:13" pos:end="193:29"><name pos:start="193:13" pos:end="193:21">skip_bits</name><argument_list pos:start="193:22" pos:end="193:29">(<argument pos:start="193:23" pos:end="193:25"><expr pos:start="193:23" pos:end="193:25"><operator pos:start="193:23" pos:end="193:23">&amp;</operator><name pos:start="193:24" pos:end="193:25">gb</name></expr></argument>, <argument pos:start="193:28" pos:end="193:28"><expr pos:start="193:28" pos:end="193:28"><literal type="number" pos:start="193:28" pos:end="193:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="193:32" pos:end="193:47">/* width code */</comment>

            <expr_stmt pos:start="195:13" pos:end="195:30"><expr pos:start="195:13" pos:end="195:29"><call pos:start="195:13" pos:end="195:29"><name pos:start="195:13" pos:end="195:21">skip_bits</name><argument_list pos:start="195:22" pos:end="195:29">(<argument pos:start="195:23" pos:end="195:25"><expr pos:start="195:23" pos:end="195:25"><operator pos:start="195:23" pos:end="195:23">&amp;</operator><name pos:start="195:24" pos:end="195:25">gb</name></expr></argument>, <argument pos:start="195:28" pos:end="195:28"><expr pos:start="195:28" pos:end="195:28"><literal type="number" pos:start="195:28" pos:end="195:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="195:32" pos:end="195:48">/* height code */</comment>

            <if_stmt pos:start="197:13" pos:end="207:13"><if pos:start="197:13" pos:end="207:13">if <condition pos:start="197:16" pos:end="197:27">(<expr pos:start="197:17" pos:end="197:26"><name pos:start="197:17" pos:end="197:26"><name pos:start="197:17" pos:end="197:17">s</name><operator pos:start="197:18" pos:end="197:19">-&gt;</operator><name pos:start="197:20" pos:end="197:26">version</name></name></expr>)</condition>

            <block pos:start="199:13" pos:end="207:13">{<block_content pos:start="201:17" pos:end="205:83">

                <expr_stmt pos:start="201:17" pos:end="201:46"><expr pos:start="201:17" pos:end="201:45"><name pos:start="201:17" pos:end="201:26"><name pos:start="201:17" pos:end="201:17">s</name><operator pos:start="201:18" pos:end="201:19">-&gt;</operator><name pos:start="201:20" pos:end="201:26">version</name></name> <operator pos:start="201:28" pos:end="201:28">=</operator> <call pos:start="201:30" pos:end="201:45"><name pos:start="201:30" pos:end="201:37">get_bits</name><argument_list pos:start="201:38" pos:end="201:45">(<argument pos:start="201:39" pos:end="201:41"><expr pos:start="201:39" pos:end="201:41"><operator pos:start="201:39" pos:end="201:39">&amp;</operator><name pos:start="201:40" pos:end="201:41">gb</name></expr></argument>, <argument pos:start="201:44" pos:end="201:44"><expr pos:start="201:44" pos:end="201:44"><literal type="number" pos:start="201:44" pos:end="201:44">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="203:17" pos:end="205:83"><if pos:start="203:17" pos:end="205:83">if <condition pos:start="203:20" pos:end="203:45">(<expr pos:start="203:21" pos:end="203:44"><name pos:start="203:21" pos:end="203:39"><name pos:start="203:21" pos:end="203:25">avctx</name><operator pos:start="203:26" pos:end="203:27">-&gt;</operator><name pos:start="203:28" pos:end="203:39">frame_number</name></name> <operator pos:start="203:41" pos:end="203:42">==</operator> <literal type="number" pos:start="203:44" pos:end="203:44">0</literal></expr>)</condition><block type="pseudo" pos:start="205:21" pos:end="205:83"><block_content pos:start="205:21" pos:end="205:83">

                    <expr_stmt pos:start="205:21" pos:end="205:83"><expr pos:start="205:21" pos:end="205:82"><call pos:start="205:21" pos:end="205:82"><name pos:start="205:21" pos:end="205:26">av_log</name><argument_list pos:start="205:27" pos:end="205:82">(<argument pos:start="205:28" pos:end="205:35"><expr pos:start="205:28" pos:end="205:35"><name pos:start="205:28" pos:end="205:35"><name pos:start="205:28" pos:end="205:28">s</name><operator pos:start="205:29" pos:end="205:30">-&gt;</operator><name pos:start="205:31" pos:end="205:35">avctx</name></name></expr></argument>, <argument pos:start="205:38" pos:end="205:49"><expr pos:start="205:38" pos:end="205:49"><name pos:start="205:38" pos:end="205:49">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="205:52" pos:end="205:69"><expr pos:start="205:52" pos:end="205:69"><literal type="string" pos:start="205:52" pos:end="205:69">"VP version: %d\n"</literal></expr></argument>, <argument pos:start="205:72" pos:end="205:81"><expr pos:start="205:72" pos:end="205:81"><name pos:start="205:72" pos:end="205:81"><name pos:start="205:72" pos:end="205:72">s</name><operator pos:start="205:73" pos:end="205:74">-&gt;</operator><name pos:start="205:75" pos:end="205:81">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="211:9" pos:end="221:9"><if pos:start="211:9" pos:end="221:9">if <condition pos:start="211:12" pos:end="211:36">(<expr pos:start="211:13" pos:end="211:35"><name pos:start="211:13" pos:end="211:22"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:22">version</name></name> <operator pos:start="211:24" pos:end="211:25">||</operator> <name pos:start="211:27" pos:end="211:35"><name pos:start="211:27" pos:end="211:27">s</name><operator pos:start="211:28" pos:end="211:29">-&gt;</operator><name pos:start="211:30" pos:end="211:35">theora</name></name></expr>)</condition>

        <block pos:start="213:9" pos:end="221:9">{<block_content pos:start="215:17" pos:end="219:30">

                <if_stmt pos:start="215:17" pos:end="217:100"><if pos:start="215:17" pos:end="217:100">if <condition pos:start="215:20" pos:end="215:35">(<expr pos:start="215:21" pos:end="215:34"><call pos:start="215:21" pos:end="215:34"><name pos:start="215:21" pos:end="215:29">get_bits1</name><argument_list pos:start="215:30" pos:end="215:34">(<argument pos:start="215:31" pos:end="215:33"><expr pos:start="215:31" pos:end="215:33"><operator pos:start="215:31" pos:end="215:31">&amp;</operator><name pos:start="215:32" pos:end="215:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="217:21" pos:end="217:100"><block_content pos:start="217:21" pos:end="217:100">

                    <expr_stmt pos:start="217:21" pos:end="217:100"><expr pos:start="217:21" pos:end="217:99"><call pos:start="217:21" pos:end="217:99"><name pos:start="217:21" pos:end="217:26">av_log</name><argument_list pos:start="217:27" pos:end="217:99">(<argument pos:start="217:28" pos:end="217:35"><expr pos:start="217:28" pos:end="217:35"><name pos:start="217:28" pos:end="217:35"><name pos:start="217:28" pos:end="217:28">s</name><operator pos:start="217:29" pos:end="217:30">-&gt;</operator><name pos:start="217:31" pos:end="217:35">avctx</name></name></expr></argument>, <argument pos:start="217:38" pos:end="217:49"><expr pos:start="217:38" pos:end="217:49"><name pos:start="217:38" pos:end="217:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:52" pos:end="217:98"><expr pos:start="217:52" pos:end="217:98"><literal type="string" pos:start="217:52" pos:end="217:98">"Warning, unsupported keyframe coding type?!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:30"><expr pos:start="219:13" pos:end="219:29"><call pos:start="219:13" pos:end="219:29"><name pos:start="219:13" pos:end="219:21">skip_bits</name><argument_list pos:start="219:22" pos:end="219:29">(<argument pos:start="219:23" pos:end="219:25"><expr pos:start="219:23" pos:end="219:25"><operator pos:start="219:23" pos:end="219:23">&amp;</operator><name pos:start="219:24" pos:end="219:25">gb</name></expr></argument>, <argument pos:start="219:28" pos:end="219:28"><expr pos:start="219:28" pos:end="219:28"><literal type="number" pos:start="219:28" pos:end="219:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="219:32" pos:end="219:46">/* reserved? */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="223:7" pos:end="251:5">else <block pos:start="223:12" pos:end="251:5">{<block_content pos:start="225:9" pos:end="249:9">

        <if_stmt pos:start="225:9" pos:end="249:9"><if pos:start="225:9" pos:end="249:9">if <condition pos:start="225:12" pos:end="225:37">(<expr pos:start="225:13" pos:end="225:36"><operator pos:start="225:13" pos:end="225:13">!</operator><name pos:start="225:14" pos:end="225:36"><name pos:start="225:14" pos:end="225:14">s</name><operator pos:start="225:15" pos:end="225:16">-&gt;</operator><name pos:start="225:17" pos:end="225:28">golden_frame</name><operator pos:start="225:29" pos:end="225:29">.</operator><name pos:start="225:30" pos:end="225:33">data</name><index pos:start="225:34" pos:end="225:36">[<expr pos:start="225:35" pos:end="225:35"><literal type="number" pos:start="225:35" pos:end="225:35">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="225:39" pos:end="249:9">{<block_content pos:start="227:13" pos:end="247:66">

            <expr_stmt pos:start="227:13" pos:end="227:82"><expr pos:start="227:13" pos:end="227:81"><call pos:start="227:13" pos:end="227:81"><name pos:start="227:13" pos:end="227:18">av_log</name><argument_list pos:start="227:19" pos:end="227:81">(<argument pos:start="227:20" pos:end="227:27"><expr pos:start="227:20" pos:end="227:27"><name pos:start="227:20" pos:end="227:27"><name pos:start="227:20" pos:end="227:20">s</name><operator pos:start="227:21" pos:end="227:22">-&gt;</operator><name pos:start="227:23" pos:end="227:27">avctx</name></name></expr></argument>, <argument pos:start="227:30" pos:end="227:43"><expr pos:start="227:30" pos:end="227:43"><name pos:start="227:30" pos:end="227:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="227:46" pos:end="227:80"><expr pos:start="227:46" pos:end="227:80"><literal type="string" pos:start="227:46" pos:end="227:80">"vp3: first frame not a keyframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="231:13" pos:end="231:42"><expr pos:start="231:13" pos:end="231:41"><name pos:start="231:13" pos:end="231:37"><name pos:start="231:13" pos:end="231:13">s</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:27">golden_frame</name><operator pos:start="231:28" pos:end="231:28">.</operator><name pos:start="231:29" pos:end="231:37">reference</name></name> <operator pos:start="231:39" pos:end="231:39">=</operator> <literal type="number" pos:start="231:41" pos:end="231:41">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:58"><expr pos:start="233:13" pos:end="233:57"><name pos:start="233:13" pos:end="233:37"><name pos:start="233:13" pos:end="233:13">s</name><operator pos:start="233:14" pos:end="233:15">-&gt;</operator><name pos:start="233:16" pos:end="233:27">golden_frame</name><operator pos:start="233:28" pos:end="233:28">.</operator><name pos:start="233:29" pos:end="233:37">pict_type</name></name> <operator pos:start="233:39" pos:end="233:39">=</operator> <name pos:start="233:41" pos:end="233:57">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

            <if_stmt pos:start="235:13" pos:end="241:13"><if pos:start="235:13" pos:end="241:13">if <condition pos:start="235:16" pos:end="235:66">(<expr pos:start="235:17" pos:end="235:65"><call pos:start="235:17" pos:end="235:61"><name pos:start="235:17" pos:end="235:36">ff_thread_get_buffer</name><argument_list pos:start="235:37" pos:end="235:61">(<argument pos:start="235:38" pos:end="235:42"><expr pos:start="235:38" pos:end="235:42"><name pos:start="235:38" pos:end="235:42">avctx</name></expr></argument>, <argument pos:start="235:45" pos:end="235:60"><expr pos:start="235:45" pos:end="235:60"><operator pos:start="235:45" pos:end="235:45">&amp;</operator><name pos:start="235:46" pos:end="235:60"><name pos:start="235:46" pos:end="235:46">s</name><operator pos:start="235:47" pos:end="235:48">-&gt;</operator><name pos:start="235:49" pos:end="235:60">golden_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="235:63" pos:end="235:63">&lt;</operator> <literal type="number" pos:start="235:65" pos:end="235:65">0</literal></expr>)</condition> <block pos:start="235:68" pos:end="241:13">{<block_content pos:start="237:17" pos:end="239:27">

                <expr_stmt pos:start="237:17" pos:end="237:72"><expr pos:start="237:17" pos:end="237:71"><call pos:start="237:17" pos:end="237:71"><name pos:start="237:17" pos:end="237:22">av_log</name><argument_list pos:start="237:23" pos:end="237:71">(<argument pos:start="237:24" pos:end="237:31"><expr pos:start="237:24" pos:end="237:31"><name pos:start="237:24" pos:end="237:31"><name pos:start="237:24" pos:end="237:24">s</name><operator pos:start="237:25" pos:end="237:26">-&gt;</operator><name pos:start="237:27" pos:end="237:31">avctx</name></name></expr></argument>, <argument pos:start="237:34" pos:end="237:45"><expr pos:start="237:34" pos:end="237:45"><name pos:start="237:34" pos:end="237:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="237:48" pos:end="237:70"><expr pos:start="237:48" pos:end="237:70"><literal type="string" pos:start="237:48" pos:end="237:70">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="239:17" pos:end="239:27">goto <name pos:start="239:22" pos:end="239:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:44"><expr pos:start="243:13" pos:end="243:43"><name pos:start="243:13" pos:end="243:25"><name pos:start="243:13" pos:end="243:13">s</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:25">last_frame</name></name> <operator pos:start="243:27" pos:end="243:27">=</operator> <name pos:start="243:29" pos:end="243:43"><name pos:start="243:29" pos:end="243:29">s</name><operator pos:start="243:30" pos:end="243:31">-&gt;</operator><name pos:start="243:32" pos:end="243:43">golden_frame</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:53"><expr pos:start="245:13" pos:end="245:52"><name pos:start="245:13" pos:end="245:30"><name pos:start="245:13" pos:end="245:13">s</name><operator pos:start="245:14" pos:end="245:15">-&gt;</operator><name pos:start="245:16" pos:end="245:25">last_frame</name><operator pos:start="245:26" pos:end="245:26">.</operator><name pos:start="245:27" pos:end="245:30">type</name></name> <operator pos:start="245:32" pos:end="245:32">=</operator> <name pos:start="245:34" pos:end="245:52">FF_BUFFER_TYPE_COPY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:66"><expr pos:start="247:13" pos:end="247:65"><call pos:start="247:13" pos:end="247:65"><name pos:start="247:13" pos:end="247:37">ff_thread_report_progress</name><argument_list pos:start="247:38" pos:end="247:65">(<argument pos:start="247:39" pos:end="247:52"><expr pos:start="247:39" pos:end="247:52"><operator pos:start="247:39" pos:end="247:39">&amp;</operator><name pos:start="247:40" pos:end="247:52"><name pos:start="247:40" pos:end="247:40">s</name><operator pos:start="247:41" pos:end="247:42">-&gt;</operator><name pos:start="247:43" pos:end="247:52">last_frame</name></name></expr></argument>, <argument pos:start="247:55" pos:end="247:61"><expr pos:start="247:55" pos:end="247:61"><name pos:start="247:55" pos:end="247:61">INT_MAX</name></expr></argument>, <argument pos:start="247:64" pos:end="247:64"><expr pos:start="247:64" pos:end="247:64"><literal type="number" pos:start="247:64" pos:end="247:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="255:73"><expr pos:start="255:5" pos:end="255:72"><call pos:start="255:5" pos:end="255:72"><name pos:start="255:5" pos:end="255:10">memset</name><argument_list pos:start="255:11" pos:end="255:72">(<argument pos:start="255:12" pos:end="255:27"><expr pos:start="255:12" pos:end="255:27"><name pos:start="255:12" pos:end="255:27"><name pos:start="255:12" pos:end="255:12">s</name><operator pos:start="255:13" pos:end="255:14">-&gt;</operator><name pos:start="255:15" pos:end="255:27">all_fragments</name></name></expr></argument>, <argument pos:start="255:30" pos:end="255:30"><expr pos:start="255:30" pos:end="255:30"><literal type="number" pos:start="255:30" pos:end="255:30">0</literal></expr></argument>, <argument pos:start="255:33" pos:end="255:71"><expr pos:start="255:33" pos:end="255:71"><name pos:start="255:33" pos:end="255:49"><name pos:start="255:33" pos:end="255:33">s</name><operator pos:start="255:34" pos:end="255:35">-&gt;</operator><name pos:start="255:36" pos:end="255:49">fragment_count</name></name> <operator pos:start="255:51" pos:end="255:51">*</operator> <sizeof pos:start="255:53" pos:end="255:71">sizeof<argument_list pos:start="255:59" pos:end="255:71">(<argument pos:start="255:60" pos:end="255:70"><expr pos:start="255:60" pos:end="255:70"><name pos:start="255:60" pos:end="255:70">Vp3Fragment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:34"><expr pos:start="257:5" pos:end="257:33"><call pos:start="257:5" pos:end="257:33"><name pos:start="257:5" pos:end="257:26">ff_thread_finish_setup</name><argument_list pos:start="257:27" pos:end="257:33">(<argument pos:start="257:28" pos:end="257:32"><expr pos:start="257:28" pos:end="257:32"><name pos:start="257:28" pos:end="257:32">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="261:5" pos:end="267:5"><if pos:start="261:5" pos:end="267:5">if <condition pos:start="261:8" pos:end="261:35">(<expr pos:start="261:9" pos:end="261:34"><call pos:start="261:9" pos:end="261:34"><name pos:start="261:9" pos:end="261:26">unpack_superblocks</name><argument_list pos:start="261:27" pos:end="261:34">(<argument pos:start="261:28" pos:end="261:28"><expr pos:start="261:28" pos:end="261:28"><name pos:start="261:28" pos:end="261:28">s</name></expr></argument>, <argument pos:start="261:31" pos:end="261:33"><expr pos:start="261:31" pos:end="261:33"><operator pos:start="261:31" pos:end="261:31">&amp;</operator><name pos:start="261:32" pos:end="261:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="261:36" pos:end="267:5">{<block_content pos:start="263:9" pos:end="265:19">

        <expr_stmt pos:start="263:9" pos:end="263:72"><expr pos:start="263:9" pos:end="263:71"><call pos:start="263:9" pos:end="263:71"><name pos:start="263:9" pos:end="263:14">av_log</name><argument_list pos:start="263:15" pos:end="263:71">(<argument pos:start="263:16" pos:end="263:23"><expr pos:start="263:16" pos:end="263:23"><name pos:start="263:16" pos:end="263:23"><name pos:start="263:16" pos:end="263:16">s</name><operator pos:start="263:17" pos:end="263:18">-&gt;</operator><name pos:start="263:19" pos:end="263:23">avctx</name></name></expr></argument>, <argument pos:start="263:26" pos:end="263:37"><expr pos:start="263:26" pos:end="263:37"><name pos:start="263:26" pos:end="263:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="263:40" pos:end="263:70"><expr pos:start="263:40" pos:end="263:70"><literal type="string" pos:start="263:40" pos:end="263:70">"error in unpack_superblocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="265:9" pos:end="265:19">goto <name pos:start="265:14" pos:end="265:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="269:5" pos:end="275:5"><if pos:start="269:5" pos:end="275:5">if <condition pos:start="269:8" pos:end="269:29">(<expr pos:start="269:9" pos:end="269:28"><call pos:start="269:9" pos:end="269:28"><name pos:start="269:9" pos:end="269:20">unpack_modes</name><argument_list pos:start="269:21" pos:end="269:28">(<argument pos:start="269:22" pos:end="269:22"><expr pos:start="269:22" pos:end="269:22"><name pos:start="269:22" pos:end="269:22">s</name></expr></argument>, <argument pos:start="269:25" pos:end="269:27"><expr pos:start="269:25" pos:end="269:27"><operator pos:start="269:25" pos:end="269:25">&amp;</operator><name pos:start="269:26" pos:end="269:27">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="269:30" pos:end="275:5">{<block_content pos:start="271:9" pos:end="273:19">

        <expr_stmt pos:start="271:9" pos:end="271:66"><expr pos:start="271:9" pos:end="271:65"><call pos:start="271:9" pos:end="271:65"><name pos:start="271:9" pos:end="271:14">av_log</name><argument_list pos:start="271:15" pos:end="271:65">(<argument pos:start="271:16" pos:end="271:23"><expr pos:start="271:16" pos:end="271:23"><name pos:start="271:16" pos:end="271:23"><name pos:start="271:16" pos:end="271:16">s</name><operator pos:start="271:17" pos:end="271:18">-&gt;</operator><name pos:start="271:19" pos:end="271:23">avctx</name></name></expr></argument>, <argument pos:start="271:26" pos:end="271:37"><expr pos:start="271:26" pos:end="271:37"><name pos:start="271:26" pos:end="271:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="271:40" pos:end="271:64"><expr pos:start="271:40" pos:end="271:64"><literal type="string" pos:start="271:40" pos:end="271:64">"error in unpack_modes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="273:9" pos:end="273:19">goto <name pos:start="273:14" pos:end="273:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="277:5" pos:end="283:5"><if pos:start="277:5" pos:end="283:5">if <condition pos:start="277:8" pos:end="277:31">(<expr pos:start="277:9" pos:end="277:30"><call pos:start="277:9" pos:end="277:30"><name pos:start="277:9" pos:end="277:22">unpack_vectors</name><argument_list pos:start="277:23" pos:end="277:30">(<argument pos:start="277:24" pos:end="277:24"><expr pos:start="277:24" pos:end="277:24"><name pos:start="277:24" pos:end="277:24">s</name></expr></argument>, <argument pos:start="277:27" pos:end="277:29"><expr pos:start="277:27" pos:end="277:29"><operator pos:start="277:27" pos:end="277:27">&amp;</operator><name pos:start="277:28" pos:end="277:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="277:32" pos:end="283:5">{<block_content pos:start="279:9" pos:end="281:19">

        <expr_stmt pos:start="279:9" pos:end="279:68"><expr pos:start="279:9" pos:end="279:67"><call pos:start="279:9" pos:end="279:67"><name pos:start="279:9" pos:end="279:14">av_log</name><argument_list pos:start="279:15" pos:end="279:67">(<argument pos:start="279:16" pos:end="279:23"><expr pos:start="279:16" pos:end="279:23"><name pos:start="279:16" pos:end="279:23"><name pos:start="279:16" pos:end="279:16">s</name><operator pos:start="279:17" pos:end="279:18">-&gt;</operator><name pos:start="279:19" pos:end="279:23">avctx</name></name></expr></argument>, <argument pos:start="279:26" pos:end="279:37"><expr pos:start="279:26" pos:end="279:37"><name pos:start="279:26" pos:end="279:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="279:40" pos:end="279:66"><expr pos:start="279:40" pos:end="279:66"><literal type="string" pos:start="279:40" pos:end="279:66">"error in unpack_vectors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="281:9" pos:end="281:19">goto <name pos:start="281:14" pos:end="281:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="285:5" pos:end="291:5"><if pos:start="285:5" pos:end="291:5">if <condition pos:start="285:8" pos:end="285:34">(<expr pos:start="285:9" pos:end="285:33"><call pos:start="285:9" pos:end="285:33"><name pos:start="285:9" pos:end="285:25">unpack_block_qpis</name><argument_list pos:start="285:26" pos:end="285:33">(<argument pos:start="285:27" pos:end="285:27"><expr pos:start="285:27" pos:end="285:27"><name pos:start="285:27" pos:end="285:27">s</name></expr></argument>, <argument pos:start="285:30" pos:end="285:32"><expr pos:start="285:30" pos:end="285:32"><operator pos:start="285:30" pos:end="285:30">&amp;</operator><name pos:start="285:31" pos:end="285:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="285:35" pos:end="291:5">{<block_content pos:start="287:9" pos:end="289:19">

        <expr_stmt pos:start="287:9" pos:end="287:71"><expr pos:start="287:9" pos:end="287:70"><call pos:start="287:9" pos:end="287:70"><name pos:start="287:9" pos:end="287:14">av_log</name><argument_list pos:start="287:15" pos:end="287:70">(<argument pos:start="287:16" pos:end="287:23"><expr pos:start="287:16" pos:end="287:23"><name pos:start="287:16" pos:end="287:23"><name pos:start="287:16" pos:end="287:16">s</name><operator pos:start="287:17" pos:end="287:18">-&gt;</operator><name pos:start="287:19" pos:end="287:23">avctx</name></name></expr></argument>, <argument pos:start="287:26" pos:end="287:37"><expr pos:start="287:26" pos:end="287:37"><name pos:start="287:26" pos:end="287:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="287:40" pos:end="287:69"><expr pos:start="287:40" pos:end="287:69"><literal type="string" pos:start="287:40" pos:end="287:69">"error in unpack_block_qpis\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="289:9" pos:end="289:19">goto <name pos:start="289:14" pos:end="289:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:34">(<expr pos:start="293:9" pos:end="293:33"><call pos:start="293:9" pos:end="293:33"><name pos:start="293:9" pos:end="293:25">unpack_dct_coeffs</name><argument_list pos:start="293:26" pos:end="293:33">(<argument pos:start="293:27" pos:end="293:27"><expr pos:start="293:27" pos:end="293:27"><name pos:start="293:27" pos:end="293:27">s</name></expr></argument>, <argument pos:start="293:30" pos:end="293:32"><expr pos:start="293:30" pos:end="293:32"><operator pos:start="293:30" pos:end="293:30">&amp;</operator><name pos:start="293:31" pos:end="293:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="293:35" pos:end="299:5">{<block_content pos:start="295:9" pos:end="297:19">

        <expr_stmt pos:start="295:9" pos:end="295:71"><expr pos:start="295:9" pos:end="295:70"><call pos:start="295:9" pos:end="295:70"><name pos:start="295:9" pos:end="295:14">av_log</name><argument_list pos:start="295:15" pos:end="295:70">(<argument pos:start="295:16" pos:end="295:23"><expr pos:start="295:16" pos:end="295:23"><name pos:start="295:16" pos:end="295:23"><name pos:start="295:16" pos:end="295:16">s</name><operator pos:start="295:17" pos:end="295:18">-&gt;</operator><name pos:start="295:19" pos:end="295:23">avctx</name></name></expr></argument>, <argument pos:start="295:26" pos:end="295:37"><expr pos:start="295:26" pos:end="295:37"><name pos:start="295:26" pos:end="295:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="295:40" pos:end="295:69"><expr pos:start="295:40" pos:end="295:69"><literal type="string" pos:start="295:40" pos:end="295:69">"error in unpack_dct_coeffs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="297:9" pos:end="297:19">goto <name pos:start="297:14" pos:end="297:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="303:5" pos:end="315:5">for <control pos:start="303:9" pos:end="303:27">(<init pos:start="303:10" pos:end="303:15"><expr pos:start="303:10" pos:end="303:14"><name pos:start="303:10" pos:end="303:10">i</name> <operator pos:start="303:12" pos:end="303:12">=</operator> <literal type="number" pos:start="303:14" pos:end="303:14">0</literal></expr>;</init> <condition pos:start="303:17" pos:end="303:22"><expr pos:start="303:17" pos:end="303:21"><name pos:start="303:17" pos:end="303:17">i</name> <operator pos:start="303:19" pos:end="303:19">&lt;</operator> <literal type="number" pos:start="303:21" pos:end="303:21">3</literal></expr>;</condition> <incr pos:start="303:24" pos:end="303:26"><expr pos:start="303:24" pos:end="303:26"><name pos:start="303:24" pos:end="303:24">i</name><operator pos:start="303:25" pos:end="303:26">++</operator></expr></incr>)</control> <block pos:start="303:29" pos:end="315:5">{<block_content pos:start="305:9" pos:end="313:74">

        <decl_stmt pos:start="305:9" pos:end="305:59"><decl pos:start="305:9" pos:end="305:58"><type pos:start="305:9" pos:end="305:11"><name pos:start="305:9" pos:end="305:11">int</name></type> <name pos:start="305:13" pos:end="305:18">height</name> <init pos:start="305:20" pos:end="305:58">= <expr pos:start="305:22" pos:end="305:58"><name pos:start="305:22" pos:end="305:30"><name pos:start="305:22" pos:end="305:22">s</name><operator pos:start="305:23" pos:end="305:24">-&gt;</operator><name pos:start="305:25" pos:end="305:30">height</name></name> <operator pos:start="305:32" pos:end="305:33">&gt;&gt;</operator> <operator pos:start="305:35" pos:end="305:35">(</operator><name pos:start="305:36" pos:end="305:36">i</name> <operator pos:start="305:38" pos:end="305:39">&amp;&amp;</operator> <name pos:start="305:41" pos:end="305:57"><name pos:start="305:41" pos:end="305:41">s</name><operator pos:start="305:42" pos:end="305:43">-&gt;</operator><name pos:start="305:44" pos:end="305:57">chroma_y_shift</name></name><operator pos:start="305:58" pos:end="305:58">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="307:9" pos:end="313:74"><if pos:start="307:9" pos:end="309:34">if <condition pos:start="307:12" pos:end="307:29">(<expr pos:start="307:13" pos:end="307:28"><name pos:start="307:13" pos:end="307:28"><name pos:start="307:13" pos:end="307:13">s</name><operator pos:start="307:14" pos:end="307:15">-&gt;</operator><name pos:start="307:16" pos:end="307:28">flipped_image</name></name></expr>)</condition><block type="pseudo" pos:start="309:13" pos:end="309:34"><block_content pos:start="309:13" pos:end="309:34">

            <expr_stmt pos:start="309:13" pos:end="309:34"><expr pos:start="309:13" pos:end="309:33"><name pos:start="309:13" pos:end="309:29"><name pos:start="309:13" pos:end="309:13">s</name><operator pos:start="309:14" pos:end="309:15">-&gt;</operator><name pos:start="309:16" pos:end="309:26">data_offset</name><index pos:start="309:27" pos:end="309:29">[<expr pos:start="309:28" pos:end="309:28"><name pos:start="309:28" pos:end="309:28">i</name></expr>]</index></name> <operator pos:start="309:31" pos:end="309:31">=</operator> <literal type="number" pos:start="309:33" pos:end="309:33">0</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="311:9" pos:end="313:74">else<block type="pseudo" pos:start="313:13" pos:end="313:74"><block_content pos:start="313:13" pos:end="313:74">

            <expr_stmt pos:start="313:13" pos:end="313:74"><expr pos:start="313:13" pos:end="313:73"><name pos:start="313:13" pos:end="313:29"><name pos:start="313:13" pos:end="313:13">s</name><operator pos:start="313:14" pos:end="313:15">-&gt;</operator><name pos:start="313:16" pos:end="313:26">data_offset</name><index pos:start="313:27" pos:end="313:29">[<expr pos:start="313:28" pos:end="313:28"><name pos:start="313:28" pos:end="313:28">i</name></expr>]</index></name> <operator pos:start="313:31" pos:end="313:31">=</operator> <operator pos:start="313:33" pos:end="313:33">(</operator><name pos:start="313:34" pos:end="313:39">height</name><operator pos:start="313:40" pos:end="313:40">-</operator><literal type="number" pos:start="313:41" pos:end="313:41">1</literal><operator pos:start="313:42" pos:end="313:42">)</operator> <operator pos:start="313:44" pos:end="313:44">*</operator> <name pos:start="313:46" pos:end="313:73"><name pos:start="313:46" pos:end="313:46">s</name><operator pos:start="313:47" pos:end="313:48">-&gt;</operator><name pos:start="313:49" pos:end="313:61">current_frame</name><operator pos:start="313:62" pos:end="313:62">.</operator><name pos:start="313:63" pos:end="313:70">linesize</name><index pos:start="313:71" pos:end="313:73">[<expr pos:start="313:72" pos:end="313:72"><name pos:start="313:72" pos:end="313:72">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="319:5" pos:end="319:26"><expr pos:start="319:5" pos:end="319:25"><name pos:start="319:5" pos:end="319:21"><name pos:start="319:5" pos:end="319:5">s</name><operator pos:start="319:6" pos:end="319:7">-&gt;</operator><name pos:start="319:8" pos:end="319:21">last_slice_end</name></name> <operator pos:start="319:23" pos:end="319:23">=</operator> <literal type="number" pos:start="319:25" pos:end="319:25">0</literal></expr>;</expr_stmt>

    <for pos:start="321:5" pos:end="323:27">for <control pos:start="321:9" pos:end="321:48">(<init pos:start="321:10" pos:end="321:15"><expr pos:start="321:10" pos:end="321:14"><name pos:start="321:10" pos:end="321:10">i</name> <operator pos:start="321:12" pos:end="321:12">=</operator> <literal type="number" pos:start="321:14" pos:end="321:14">0</literal></expr>;</init> <condition pos:start="321:17" pos:end="321:43"><expr pos:start="321:17" pos:end="321:42"><name pos:start="321:17" pos:end="321:17">i</name> <operator pos:start="321:19" pos:end="321:19">&lt;</operator> <name pos:start="321:21" pos:end="321:42"><name pos:start="321:21" pos:end="321:21">s</name><operator pos:start="321:22" pos:end="321:23">-&gt;</operator><name pos:start="321:24" pos:end="321:42">c_superblock_height</name></name></expr>;</condition> <incr pos:start="321:45" pos:end="321:47"><expr pos:start="321:45" pos:end="321:47"><name pos:start="321:45" pos:end="321:45">i</name><operator pos:start="321:46" pos:end="321:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="323:9" pos:end="323:27"><block_content pos:start="323:9" pos:end="323:27">

        <expr_stmt pos:start="323:9" pos:end="323:27"><expr pos:start="323:9" pos:end="323:26"><call pos:start="323:9" pos:end="323:26"><name pos:start="323:9" pos:end="323:20">render_slice</name><argument_list pos:start="323:21" pos:end="323:26">(<argument pos:start="323:22" pos:end="323:22"><expr pos:start="323:22" pos:end="323:22"><name pos:start="323:22" pos:end="323:22">s</name></expr></argument>, <argument pos:start="323:25" pos:end="323:25"><expr pos:start="323:25" pos:end="323:25"><name pos:start="323:25" pos:end="323:25">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="line" pos:start="327:5" pos:end="327:26">// filter the last row</comment>

    <for pos:start="329:5" pos:end="335:5">for <control pos:start="329:9" pos:end="329:27">(<init pos:start="329:10" pos:end="329:15"><expr pos:start="329:10" pos:end="329:14"><name pos:start="329:10" pos:end="329:10">i</name> <operator pos:start="329:12" pos:end="329:12">=</operator> <literal type="number" pos:start="329:14" pos:end="329:14">0</literal></expr>;</init> <condition pos:start="329:17" pos:end="329:22"><expr pos:start="329:17" pos:end="329:21"><name pos:start="329:17" pos:end="329:17">i</name> <operator pos:start="329:19" pos:end="329:19">&lt;</operator> <literal type="number" pos:start="329:21" pos:end="329:21">3</literal></expr>;</condition> <incr pos:start="329:24" pos:end="329:26"><expr pos:start="329:24" pos:end="329:26"><name pos:start="329:24" pos:end="329:24">i</name><operator pos:start="329:25" pos:end="329:26">++</operator></expr></incr>)</control> <block pos:start="329:29" pos:end="335:5">{<block_content pos:start="331:9" pos:end="333:44">

        <decl_stmt pos:start="331:9" pos:end="331:66"><decl pos:start="331:9" pos:end="331:65"><type pos:start="331:9" pos:end="331:11"><name pos:start="331:9" pos:end="331:11">int</name></type> <name pos:start="331:13" pos:end="331:15">row</name> <init pos:start="331:17" pos:end="331:65">= <expr pos:start="331:19" pos:end="331:65"><operator pos:start="331:19" pos:end="331:19">(</operator><name pos:start="331:20" pos:end="331:28"><name pos:start="331:20" pos:end="331:20">s</name><operator pos:start="331:21" pos:end="331:22">-&gt;</operator><name pos:start="331:23" pos:end="331:28">height</name></name> <operator pos:start="331:30" pos:end="331:31">&gt;&gt;</operator> <operator pos:start="331:33" pos:end="331:33">(</operator><literal type="number" pos:start="331:34" pos:end="331:35">3</literal><operator pos:start="331:35" pos:end="331:35">+</operator><operator pos:start="331:36" pos:end="331:36">(</operator><name pos:start="331:37" pos:end="331:37">i</name> <operator pos:start="331:39" pos:end="331:40">&amp;&amp;</operator> <name pos:start="331:42" pos:end="331:58"><name pos:start="331:42" pos:end="331:42">s</name><operator pos:start="331:43" pos:end="331:44">-&gt;</operator><name pos:start="331:45" pos:end="331:58">chroma_y_shift</name></name><operator pos:start="331:59" pos:end="331:59">)</operator><operator pos:start="331:60" pos:end="331:60">)</operator><operator pos:start="331:61" pos:end="331:61">)</operator> <operator pos:start="331:63" pos:end="331:63">-</operator> <literal type="number" pos:start="331:65" pos:end="331:65">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:44"><expr pos:start="333:9" pos:end="333:43"><call pos:start="333:9" pos:end="333:43"><name pos:start="333:9" pos:end="333:25">apply_loop_filter</name><argument_list pos:start="333:26" pos:end="333:43">(<argument pos:start="333:27" pos:end="333:27"><expr pos:start="333:27" pos:end="333:27"><name pos:start="333:27" pos:end="333:27">s</name></expr></argument>, <argument pos:start="333:30" pos:end="333:30"><expr pos:start="333:30" pos:end="333:30"><name pos:start="333:30" pos:end="333:30">i</name></expr></argument>, <argument pos:start="333:33" pos:end="333:35"><expr pos:start="333:33" pos:end="333:35"><name pos:start="333:33" pos:end="333:35">row</name></expr></argument>, <argument pos:start="333:38" pos:end="333:42"><expr pos:start="333:38" pos:end="333:42"><name pos:start="333:38" pos:end="333:40">row</name><operator pos:start="333:41" pos:end="333:41">+</operator><literal type="number" pos:start="333:42" pos:end="333:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="337:5" pos:end="337:45"><expr pos:start="337:5" pos:end="337:44"><call pos:start="337:5" pos:end="337:44"><name pos:start="337:5" pos:end="337:23">vp3_draw_horiz_band</name><argument_list pos:start="337:24" pos:end="337:44">(<argument pos:start="337:25" pos:end="337:25"><expr pos:start="337:25" pos:end="337:25"><name pos:start="337:25" pos:end="337:25">s</name></expr></argument>, <argument pos:start="337:28" pos:end="337:43"><expr pos:start="337:28" pos:end="337:43"><name pos:start="337:28" pos:end="337:43"><name pos:start="337:28" pos:end="337:28">s</name><operator pos:start="337:29" pos:end="337:30">-&gt;</operator><name pos:start="337:31" pos:end="337:35">avctx</name><operator pos:start="337:36" pos:end="337:37">-&gt;</operator><name pos:start="337:38" pos:end="337:43">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="341:5" pos:end="341:19"><expr pos:start="341:5" pos:end="341:18"><operator pos:start="341:5" pos:end="341:5">*</operator><name pos:start="341:6" pos:end="341:14">got_frame</name> <operator pos:start="341:16" pos:end="341:16">=</operator> <literal type="number" pos:start="341:18" pos:end="341:18">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="343:5" pos:end="343:38"><expr pos:start="343:5" pos:end="343:37"><operator pos:start="343:5" pos:end="343:5">*</operator><operator pos:start="343:6" pos:end="343:6">(</operator><name pos:start="343:7" pos:end="343:13">AVFrame</name><operator pos:start="343:14" pos:end="343:14">*</operator><operator pos:start="343:15" pos:end="343:15">)</operator><name pos:start="343:16" pos:end="343:19">data</name><operator pos:start="343:20" pos:end="343:20">=</operator> <name pos:start="343:22" pos:end="343:37"><name pos:start="343:22" pos:end="343:22">s</name><operator pos:start="343:23" pos:end="343:24">-&gt;</operator><name pos:start="343:25" pos:end="343:37">current_frame</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="347:5" pos:end="349:29"><if pos:start="347:5" pos:end="349:29">if <condition pos:start="347:8" pos:end="347:73">(<expr pos:start="347:9" pos:end="347:72"><operator pos:start="347:9" pos:end="347:9">!</operator><name pos:start="347:10" pos:end="347:21">HAVE_THREADS</name> <operator pos:start="347:23" pos:end="347:24">||</operator> <operator pos:start="347:26" pos:end="347:26">!</operator><operator pos:start="347:27" pos:end="347:27">(</operator><name pos:start="347:28" pos:end="347:55"><name pos:start="347:28" pos:end="347:28">s</name><operator pos:start="347:29" pos:end="347:30">-&gt;</operator><name pos:start="347:31" pos:end="347:35">avctx</name><operator pos:start="347:36" pos:end="347:37">-&gt;</operator><name pos:start="347:38" pos:end="347:55">active_thread_type</name></name><operator pos:start="347:56" pos:end="347:56">&amp;</operator><name pos:start="347:57" pos:end="347:71">FF_THREAD_FRAME</name><operator pos:start="347:72" pos:end="347:72">)</operator></expr>)</condition><block type="pseudo" pos:start="349:9" pos:end="349:29"><block_content pos:start="349:9" pos:end="349:29">

        <expr_stmt pos:start="349:9" pos:end="349:29"><expr pos:start="349:9" pos:end="349:28"><call pos:start="349:9" pos:end="349:28"><name pos:start="349:9" pos:end="349:21">update_frames</name><argument_list pos:start="349:22" pos:end="349:28">(<argument pos:start="349:23" pos:end="349:27"><expr pos:start="349:23" pos:end="349:27"><name pos:start="349:23" pos:end="349:27">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="353:5" pos:end="353:20">return <expr pos:start="353:12" pos:end="353:19"><name pos:start="353:12" pos:end="353:19">buf_size</name></expr>;</return>



<label pos:start="357:1" pos:end="357:6"><name pos:start="357:1" pos:end="357:5">error</name>:</label>

    <expr_stmt pos:start="359:5" pos:end="359:61"><expr pos:start="359:5" pos:end="359:60"><call pos:start="359:5" pos:end="359:60"><name pos:start="359:5" pos:end="359:29">ff_thread_report_progress</name><argument_list pos:start="359:30" pos:end="359:60">(<argument pos:start="359:31" pos:end="359:47"><expr pos:start="359:31" pos:end="359:47"><operator pos:start="359:31" pos:end="359:31">&amp;</operator><name pos:start="359:32" pos:end="359:47"><name pos:start="359:32" pos:end="359:32">s</name><operator pos:start="359:33" pos:end="359:34">-&gt;</operator><name pos:start="359:35" pos:end="359:47">current_frame</name></name></expr></argument>, <argument pos:start="359:50" pos:end="359:56"><expr pos:start="359:50" pos:end="359:56"><name pos:start="359:50" pos:end="359:56">INT_MAX</name></expr></argument>, <argument pos:start="359:59" pos:end="359:59"><expr pos:start="359:59" pos:end="359:59"><literal type="number" pos:start="359:59" pos:end="359:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="363:5" pos:end="365:56"><if pos:start="363:5" pos:end="365:56">if <condition pos:start="363:8" pos:end="363:73">(<expr pos:start="363:9" pos:end="363:72"><operator pos:start="363:9" pos:end="363:9">!</operator><name pos:start="363:10" pos:end="363:21">HAVE_THREADS</name> <operator pos:start="363:23" pos:end="363:24">||</operator> <operator pos:start="363:26" pos:end="363:26">!</operator><operator pos:start="363:27" pos:end="363:27">(</operator><name pos:start="363:28" pos:end="363:55"><name pos:start="363:28" pos:end="363:28">s</name><operator pos:start="363:29" pos:end="363:30">-&gt;</operator><name pos:start="363:31" pos:end="363:35">avctx</name><operator pos:start="363:36" pos:end="363:37">-&gt;</operator><name pos:start="363:38" pos:end="363:55">active_thread_type</name></name><operator pos:start="363:56" pos:end="363:56">&amp;</operator><name pos:start="363:57" pos:end="363:71">FF_THREAD_FRAME</name><operator pos:start="363:72" pos:end="363:72">)</operator></expr>)</condition><block type="pseudo" pos:start="365:9" pos:end="365:56"><block_content pos:start="365:9" pos:end="365:56">

        <expr_stmt pos:start="365:9" pos:end="365:56"><expr pos:start="365:9" pos:end="365:55"><call pos:start="365:9" pos:end="365:55"><name pos:start="365:9" pos:end="365:29"><name pos:start="365:9" pos:end="365:13">avctx</name><operator pos:start="365:14" pos:end="365:15">-&gt;</operator><name pos:start="365:16" pos:end="365:29">release_buffer</name></name><argument_list pos:start="365:30" pos:end="365:55">(<argument pos:start="365:31" pos:end="365:35"><expr pos:start="365:31" pos:end="365:35"><name pos:start="365:31" pos:end="365:35">avctx</name></expr></argument>, <argument pos:start="365:38" pos:end="365:54"><expr pos:start="365:38" pos:end="365:54"><operator pos:start="365:38" pos:end="365:38">&amp;</operator><name pos:start="365:39" pos:end="365:54"><name pos:start="365:39" pos:end="365:39">s</name><operator pos:start="365:40" pos:end="365:41">-&gt;</operator><name pos:start="365:42" pos:end="365:54">current_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="369:5" pos:end="369:14">return <expr pos:start="369:12" pos:end="369:13"><operator pos:start="369:12" pos:end="369:12">-</operator><literal type="number" pos:start="369:13" pos:end="369:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
