<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18944.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">vncws_decode_frame</name><parameter_list pos:start="1:23" pos:end="3:68">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:29">Buffer</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:36">input</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:55"><decl pos:start="1:39" pos:end="1:55"><type pos:start="1:39" pos:end="1:55"><name pos:start="1:39" pos:end="1:45">uint8_t</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier><modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:55">payload</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:47"><decl pos:start="3:28" pos:end="3:47"><type pos:start="3:28" pos:end="3:47"><name pos:start="3:28" pos:end="3:33">size_t</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:47">payload_size</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:67"><decl pos:start="3:50" pos:end="3:67"><type pos:start="3:50" pos:end="3:67"><name pos:start="3:50" pos:end="3:55">size_t</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:67">frame_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="145:1">{<block_content pos:start="7:5" pos:end="143:13">

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:24">opcode</name> <init pos:start="7:26" pos:end="7:28">= <expr pos:start="7:28" pos:end="7:28"><literal type="number" pos:start="7:28" pos:end="7:28">0</literal></expr></init></decl>, <decl pos:start="7:31" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:17"/><name pos:start="7:31" pos:end="7:33">fin</name> <init pos:start="7:35" pos:end="7:37">= <expr pos:start="7:37" pos:end="7:37"><literal type="number" pos:start="7:37" pos:end="7:37">0</literal></expr></init></decl>, <decl pos:start="7:40" pos:end="7:51"><type ref="prev" pos:start="7:5" pos:end="7:17"/><name pos:start="7:40" pos:end="7:47">has_mask</name> <init pos:start="7:49" pos:end="7:51">= <expr pos:start="7:51" pos:end="7:51"><literal type="number" pos:start="7:51" pos:end="7:51">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:22">header_size</name> <init pos:start="9:24" pos:end="9:26">= <expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint32_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:23">payload32</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:49"><decl pos:start="13:5" pos:end="13:48"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">WsHeader</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:20">header</name> <init pos:start="13:22" pos:end="13:48">= <expr pos:start="13:24" pos:end="13:48"><operator pos:start="13:24" pos:end="13:24">(</operator><name pos:start="13:25" pos:end="13:32">WsHeader</name> <operator pos:start="13:34" pos:end="13:34">*</operator><operator pos:start="13:35" pos:end="13:35">)</operator><name pos:start="13:36" pos:end="13:48"><name pos:start="13:36" pos:end="13:40">input</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:48">buffer</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">WsMask</name></type> <name pos:start="15:12" pos:end="15:15">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:44">(<expr pos:start="21:9" pos:end="21:43"><name pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:13">input</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:21">offset</name></name> <operator pos:start="21:23" pos:end="21:23">&lt;</operator> <name pos:start="21:25" pos:end="21:39">WS_HEAD_MIN_LEN</name> <operator pos:start="21:41" pos:end="21:41">+</operator> <literal type="number" pos:start="21:43" pos:end="21:43">4</literal></expr>)</condition> <block pos:start="21:46" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:17">

        <comment type="block" pos:start="23:9" pos:end="23:33">/* header not complete */</comment>

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:35"><expr pos:start="31:5" pos:end="31:34"><name pos:start="31:5" pos:end="31:7">fin</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <operator pos:start="31:11" pos:end="31:11">(</operator><name pos:start="31:12" pos:end="31:21"><name pos:start="31:12" pos:end="31:17">header</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:21">b0</name></name> <operator pos:start="31:23" pos:end="31:23">&amp;</operator> <literal type="number" pos:start="31:25" pos:end="31:28">0x80</literal><operator pos:start="31:29" pos:end="31:29">)</operator> <operator pos:start="31:31" pos:end="31:32">&gt;&gt;</operator> <literal type="number" pos:start="31:34" pos:end="31:34">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:10">opcode</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:23"><name pos:start="33:14" pos:end="33:19">header</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:23">b0</name></name> <operator pos:start="33:25" pos:end="33:25">&amp;</operator> <literal type="number" pos:start="33:27" pos:end="33:30">0x0f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:12">has_mask</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <operator pos:start="35:16" pos:end="35:16">(</operator><name pos:start="35:17" pos:end="35:26"><name pos:start="35:17" pos:end="35:22">header</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:26">b1</name></name> <operator pos:start="35:28" pos:end="35:28">&amp;</operator> <literal type="number" pos:start="35:30" pos:end="35:33">0x80</literal><operator pos:start="35:34" pos:end="35:34">)</operator> <operator pos:start="35:36" pos:end="35:37">&gt;&gt;</operator> <literal type="number" pos:start="35:39" pos:end="35:39">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><operator pos:start="37:5" pos:end="37:5">*</operator><name pos:start="37:6" pos:end="37:17">payload_size</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:30"><name pos:start="37:21" pos:end="37:26">header</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:30">b1</name></name> <operator pos:start="37:32" pos:end="37:32">&amp;</operator> <literal type="number" pos:start="37:34" pos:end="37:37">0x7f</literal></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:34">(<expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:14">opcode</name> <operator pos:start="41:16" pos:end="41:17">==</operator> <name pos:start="41:19" pos:end="41:33">WS_OPCODE_CLOSE</name></expr>)</condition> <block pos:start="41:36" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:18">

        <comment type="block" pos:start="43:9" pos:end="43:24">/* disconnect */</comment>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="59:7">/* Websocket frame sanity check:

     * * Websocket fragmentation is not supported.

     * * All  websockets frames sent by a client have to be masked.

     * * Only binary encoding is supported.

     */</comment>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:62">(<expr pos:start="61:9" pos:end="61:61"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:12">fin</name> <operator pos:start="61:14" pos:end="61:15">||</operator> <operator pos:start="61:17" pos:end="61:17">!</operator><name pos:start="61:18" pos:end="61:25">has_mask</name> <operator pos:start="61:27" pos:end="61:28">||</operator> <name pos:start="61:30" pos:end="61:35">opcode</name> <operator pos:start="61:37" pos:end="61:38">!=</operator> <name pos:start="61:40" pos:end="61:61">WS_OPCODE_BINARY_FRAME</name></expr>)</condition> <block pos:start="61:64" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:18">

        <expr_stmt pos:start="63:9" pos:end="63:67"><expr pos:start="63:9" pos:end="63:66"><call pos:start="63:9" pos:end="63:66"><name pos:start="63:9" pos:end="63:17">VNC_DEBUG</name><argument_list pos:start="63:18" pos:end="63:66">(<argument pos:start="63:19" pos:end="63:65"><expr pos:start="63:19" pos:end="63:65"><literal type="string" pos:start="63:19" pos:end="63:65">"Received faulty/unsupported Websocket frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">2</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="99:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:28">(<expr pos:start="71:9" pos:end="71:27"><operator pos:start="71:9" pos:end="71:9">*</operator><name pos:start="71:10" pos:end="71:21">payload_size</name> <operator pos:start="71:23" pos:end="71:23">&lt;</operator> <literal type="number" pos:start="71:25" pos:end="71:27">126</literal></expr>)</condition> <block pos:start="71:30" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:27">

        <expr_stmt pos:start="73:9" pos:end="73:24"><expr pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:19">header_size</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <literal type="number" pos:start="73:23" pos:end="73:23">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:27"><expr pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:12">mask</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <name pos:start="75:16" pos:end="75:26"><name pos:start="75:16" pos:end="75:21">header</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:24">u</name><operator pos:start="75:25" pos:end="75:25">.</operator><name pos:start="75:26" pos:end="75:26">m</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="85:5">else if <condition pos:start="77:15" pos:end="77:58">(<expr pos:start="77:16" pos:end="77:57"><operator pos:start="77:16" pos:end="77:16">*</operator><name pos:start="77:17" pos:end="77:28">payload_size</name> <operator pos:start="77:30" pos:end="77:31">==</operator> <literal type="number" pos:start="77:33" pos:end="77:35">126</literal> <operator pos:start="77:37" pos:end="77:38">&amp;&amp;</operator> <name pos:start="77:40" pos:end="77:52"><name pos:start="77:40" pos:end="77:44">input</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:52">offset</name></name> <operator pos:start="77:54" pos:end="77:55">&gt;=</operator> <literal type="number" pos:start="77:57" pos:end="77:57">8</literal></expr>)</condition> <block pos:start="77:60" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:33">

        <expr_stmt pos:start="79:9" pos:end="79:55"><expr pos:start="79:9" pos:end="79:54"><operator pos:start="79:9" pos:end="79:9">*</operator><name pos:start="79:10" pos:end="79:21">payload_size</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <call pos:start="79:25" pos:end="79:54"><name pos:start="79:25" pos:end="79:35">be16_to_cpu</name><argument_list pos:start="79:36" pos:end="79:54">(<argument pos:start="79:37" pos:end="79:53"><expr pos:start="79:37" pos:end="79:53"><name pos:start="79:37" pos:end="79:53"><name pos:start="79:37" pos:end="79:42">header</name><operator pos:start="79:43" pos:end="79:44">-&gt;</operator><name pos:start="79:45" pos:end="79:45">u</name><operator pos:start="79:46" pos:end="79:46">.</operator><name pos:start="79:47" pos:end="79:49">s16</name><operator pos:start="79:50" pos:end="79:50">.</operator><name pos:start="79:51" pos:end="79:53">l16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:24"><expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:19">header_size</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <literal type="number" pos:start="81:23" pos:end="81:23">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:33"><expr pos:start="83:9" pos:end="83:32"><name pos:start="83:9" pos:end="83:12">mask</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <name pos:start="83:16" pos:end="83:32"><name pos:start="83:16" pos:end="83:21">header</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:24">u</name><operator pos:start="83:25" pos:end="83:25">.</operator><name pos:start="83:26" pos:end="83:28">s16</name><operator pos:start="83:29" pos:end="83:29">.</operator><name pos:start="83:30" pos:end="83:32">m16</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="85:7" pos:end="93:5">else if <condition pos:start="85:15" pos:end="85:59">(<expr pos:start="85:16" pos:end="85:58"><operator pos:start="85:16" pos:end="85:16">*</operator><name pos:start="85:17" pos:end="85:28">payload_size</name> <operator pos:start="85:30" pos:end="85:31">==</operator> <literal type="number" pos:start="85:33" pos:end="85:35">127</literal> <operator pos:start="85:37" pos:end="85:38">&amp;&amp;</operator> <name pos:start="85:40" pos:end="85:52"><name pos:start="85:40" pos:end="85:44">input</name><operator pos:start="85:45" pos:end="85:46">-&gt;</operator><name pos:start="85:47" pos:end="85:52">offset</name></name> <operator pos:start="85:54" pos:end="85:55">&gt;=</operator> <literal type="number" pos:start="85:57" pos:end="85:58">14</literal></expr>)</condition> <block pos:start="85:61" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:33">

        <expr_stmt pos:start="87:9" pos:end="87:55"><expr pos:start="87:9" pos:end="87:54"><operator pos:start="87:9" pos:end="87:9">*</operator><name pos:start="87:10" pos:end="87:21">payload_size</name> <operator pos:start="87:23" pos:end="87:23">=</operator> <call pos:start="87:25" pos:end="87:54"><name pos:start="87:25" pos:end="87:35">be64_to_cpu</name><argument_list pos:start="87:36" pos:end="87:54">(<argument pos:start="87:37" pos:end="87:53"><expr pos:start="87:37" pos:end="87:53"><name pos:start="87:37" pos:end="87:53"><name pos:start="87:37" pos:end="87:42">header</name><operator pos:start="87:43" pos:end="87:44">-&gt;</operator><name pos:start="87:45" pos:end="87:45">u</name><operator pos:start="87:46" pos:end="87:46">.</operator><name pos:start="87:47" pos:end="87:49">s64</name><operator pos:start="87:50" pos:end="87:50">.</operator><name pos:start="87:51" pos:end="87:53">l64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:25"><expr pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:19">header_size</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <literal type="number" pos:start="89:23" pos:end="89:24">14</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:12">mask</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <name pos:start="91:16" pos:end="91:32"><name pos:start="91:16" pos:end="91:21">header</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:24">u</name><operator pos:start="91:25" pos:end="91:25">.</operator><name pos:start="91:26" pos:end="91:28">s64</name><operator pos:start="91:29" pos:end="91:29">.</operator><name pos:start="91:30" pos:end="91:32">m64</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="99:5">else <block pos:start="93:12" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:17">

        <comment type="block" pos:start="95:9" pos:end="95:33">/* header not complete */</comment>

        <return pos:start="97:9" pos:end="97:17">return <expr pos:start="97:16" pos:end="97:16"><literal type="number" pos:start="97:16" pos:end="97:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:46"><expr pos:start="103:5" pos:end="103:45"><operator pos:start="103:5" pos:end="103:5">*</operator><name pos:start="103:6" pos:end="103:15">frame_size</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:29">header_size</name> <operator pos:start="103:31" pos:end="103:31">+</operator> <operator pos:start="103:33" pos:end="103:33">*</operator><name pos:start="103:34" pos:end="103:45">payload_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:36">(<expr pos:start="107:9" pos:end="107:35"><name pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:13">input</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:21">offset</name></name> <operator pos:start="107:23" pos:end="107:23">&lt;</operator> <operator pos:start="107:25" pos:end="107:25">*</operator><name pos:start="107:26" pos:end="107:35">frame_size</name></expr>)</condition> <block pos:start="107:38" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:17">

        <comment type="block" pos:start="109:9" pos:end="109:32">/* frame not complete */</comment>

        <return pos:start="111:9" pos:end="111:17">return <expr pos:start="111:16" pos:end="111:16"><literal type="number" pos:start="111:16" pos:end="111:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:43"><expr pos:start="117:5" pos:end="117:42"><operator pos:start="117:5" pos:end="117:5">*</operator><name pos:start="117:6" pos:end="117:12">payload</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <name pos:start="117:16" pos:end="117:28"><name pos:start="117:16" pos:end="117:20">input</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:28">buffer</name></name> <operator pos:start="117:30" pos:end="117:30">+</operator> <name pos:start="117:32" pos:end="117:42">header_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:22">/* unmask frame */</comment>

    <comment type="block" pos:start="123:5" pos:end="123:37">/* process 1 frame (32 bit op) */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:39"><expr pos:start="125:5" pos:end="125:38"><name pos:start="125:5" pos:end="125:13">payload32</name> <operator pos:start="125:15" pos:end="125:15">=</operator> <operator pos:start="125:17" pos:end="125:17">(</operator><name pos:start="125:18" pos:end="125:25">uint32_t</name> <operator pos:start="125:27" pos:end="125:27">*</operator><operator pos:start="125:28" pos:end="125:28">)</operator><operator pos:start="125:29" pos:end="125:29">(</operator><operator pos:start="125:30" pos:end="125:30">*</operator><name pos:start="125:31" pos:end="125:37">payload</name><operator pos:start="125:38" pos:end="125:38">)</operator></expr>;</expr_stmt>

    <for pos:start="127:5" pos:end="131:5">for <control pos:start="127:9" pos:end="127:43">(<init pos:start="127:10" pos:end="127:15"><expr pos:start="127:10" pos:end="127:14"><name pos:start="127:10" pos:end="127:10">i</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr>;</init> <condition pos:start="127:17" pos:end="127:38"><expr pos:start="127:17" pos:end="127:37"><name pos:start="127:17" pos:end="127:17">i</name> <operator pos:start="127:19" pos:end="127:19">&lt;</operator> <operator pos:start="127:21" pos:end="127:21">*</operator><name pos:start="127:22" pos:end="127:33">payload_size</name> <operator pos:start="127:35" pos:end="127:35">/</operator> <literal type="number" pos:start="127:37" pos:end="127:37">4</literal></expr>;</condition> <incr pos:start="127:40" pos:end="127:42"><expr pos:start="127:40" pos:end="127:42"><name pos:start="127:40" pos:end="127:40">i</name><operator pos:start="127:41" pos:end="127:42">++</operator></expr></incr>)</control> <block pos:start="127:45" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:31">

        <expr_stmt pos:start="129:9" pos:end="129:31"><expr pos:start="129:9" pos:end="129:30"><name pos:start="129:9" pos:end="129:20"><name pos:start="129:9" pos:end="129:17">payload32</name><index pos:start="129:18" pos:end="129:20">[<expr pos:start="129:19" pos:end="129:19"><name pos:start="129:19" pos:end="129:19">i</name></expr>]</index></name> <operator pos:start="129:22" pos:end="129:23">^=</operator> <name pos:start="129:25" pos:end="129:30"><name pos:start="129:25" pos:end="129:28">mask</name><operator pos:start="129:29" pos:end="129:29">.</operator><name pos:start="129:30" pos:end="129:30">u</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="133:5" pos:end="133:46">/* process the remaining bytes (if any) */</comment>

    <for pos:start="135:5" pos:end="139:5">for <control pos:start="135:9" pos:end="135:40">(<init pos:start="135:10" pos:end="135:16"><expr pos:start="135:10" pos:end="135:15"><name pos:start="135:10" pos:end="135:10">i</name> <operator pos:start="135:12" pos:end="135:13">*=</operator> <literal type="number" pos:start="135:15" pos:end="135:15">4</literal></expr>;</init> <condition pos:start="135:18" pos:end="135:35"><expr pos:start="135:18" pos:end="135:34"><name pos:start="135:18" pos:end="135:18">i</name> <operator pos:start="135:20" pos:end="135:20">&lt;</operator> <operator pos:start="135:22" pos:end="135:22">*</operator><name pos:start="135:23" pos:end="135:34">payload_size</name></expr>;</condition> <incr pos:start="135:37" pos:end="135:39"><expr pos:start="135:37" pos:end="135:39"><name pos:start="135:37" pos:end="135:37">i</name><operator pos:start="135:38" pos:end="135:39">++</operator></expr></incr>)</control> <block pos:start="135:42" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:39">

        <expr_stmt pos:start="137:9" pos:end="137:39"><expr pos:start="137:9" pos:end="137:38"><operator pos:start="137:9" pos:end="137:9">(</operator><operator pos:start="137:10" pos:end="137:10">*</operator><name pos:start="137:11" pos:end="137:17">payload</name><operator pos:start="137:18" pos:end="137:18">)</operator><index pos:start="137:19" pos:end="137:21">[<expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">i</name></expr>]</index> <operator pos:start="137:23" pos:end="137:24">^=</operator> <name pos:start="137:26" pos:end="137:38"><name pos:start="137:26" pos:end="137:29">mask</name><operator pos:start="137:30" pos:end="137:30">.</operator><name pos:start="137:31" pos:end="137:31">c</name><index pos:start="137:32" pos:end="137:38">[<expr pos:start="137:33" pos:end="137:37"><name pos:start="137:33" pos:end="137:33">i</name> <operator pos:start="137:35" pos:end="137:35">%</operator> <literal type="number" pos:start="137:37" pos:end="137:37">4</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="143:5" pos:end="143:13">return <expr pos:start="143:12" pos:end="143:12"><literal type="number" pos:start="143:12" pos:end="143:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
