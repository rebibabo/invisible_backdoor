<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23196.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:15">av_malloc</name><parameter_list pos:start="1:16" pos:end="1:28">(<parameter pos:start="1:17" pos:end="1:27"><decl pos:start="1:17" pos:end="1:27"><type pos:start="1:17" pos:end="1:22"><name pos:start="1:17" pos:end="1:22">size_t</name></type> <name pos:start="1:24" pos:end="1:27">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:15">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">ptr</name> <init pos:start="5:15" pos:end="5:20">= <expr pos:start="5:17" pos:end="5:20"><name pos:start="5:17" pos:end="5:20">NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="7:1" pos:end="7:24">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:24">CONFIG_MEMALIGN_HACK</name></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">long</name></type> <name pos:start="9:10" pos:end="9:13">diff</name></decl>;</decl_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="15:5" pos:end="15:49">/* let's disallow possible ambiguous cases */</comment>

    <if_stmt pos:start="17:5" pos:end="24:0"><if pos:start="17:5" pos:end="24:0">if<condition pos:start="17:7" pos:end="17:28">(<expr pos:start="17:8" pos:end="17:26"><name pos:start="17:8" pos:end="17:11">size</name> <operator pos:start="17:13" pos:end="17:13">&gt;</operator> <operator pos:start="17:15" pos:end="17:15">(</operator><name pos:start="17:16" pos:end="17:22">INT_MAX</name><operator pos:start="17:23" pos:end="17:23">-</operator><literal type="number" pos:start="17:24" pos:end="17:25">32</literal><operator pos:start="17:26" pos:end="17:26">)</operator></expr> )</condition><block type="pseudo" pos:start="19:9" pos:end="24:0"><block_content pos:start="19:9" pos:end="24:0">

        <return pos:start="19:9" pos:end="24:0">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



<cpp:if pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:24">CONFIG_MEMALIGN_HACK</name></expr></cpp:if>

    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:7">ptr</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:25"><name pos:start="25:11" pos:end="25:16">malloc</name><argument_list pos:start="25:17" pos:end="25:25">(<argument pos:start="25:18" pos:end="25:24"><expr pos:start="25:18" pos:end="25:24"><name pos:start="25:18" pos:end="25:21">size</name><operator pos:start="25:22" pos:end="25:22">+</operator><literal type="number" pos:start="25:23" pos:end="25:24">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:19"><if pos:start="27:5" pos:end="29:19">if<condition pos:start="27:7" pos:end="27:12">(<expr pos:start="27:8" pos:end="27:11"><operator pos:start="27:8" pos:end="27:8">!</operator><name pos:start="27:9" pos:end="27:11">ptr</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:19"><block_content pos:start="29:9" pos:end="29:19">

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ptr</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:8">diff</name><operator pos:start="31:9" pos:end="31:9">=</operator> <operator pos:start="31:11" pos:end="31:11">(</operator><operator pos:start="31:12" pos:end="31:12">(</operator><operator pos:start="31:13" pos:end="31:13">-</operator><operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:18">long</name><operator pos:start="31:19" pos:end="31:19">)</operator><name pos:start="31:20" pos:end="31:22">ptr</name> <operator pos:start="31:24" pos:end="31:24">-</operator> <literal type="number" pos:start="31:26" pos:end="31:26">1</literal><operator pos:start="31:27" pos:end="31:27">)</operator><operator pos:start="31:28" pos:end="31:28">&amp;</operator><literal type="number" pos:start="31:29" pos:end="31:30">31</literal><operator pos:start="31:31" pos:end="31:31">)</operator> <operator pos:start="31:33" pos:end="31:33">+</operator> <literal type="number" pos:start="31:35" pos:end="31:35">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:28"><expr pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:7">ptr</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <operator pos:start="33:11" pos:end="33:11">(</operator><name pos:start="33:12" pos:end="33:15">char</name><operator pos:start="33:16" pos:end="33:16">*</operator><operator pos:start="33:17" pos:end="33:17">)</operator><name pos:start="33:18" pos:end="33:20">ptr</name> <operator pos:start="33:22" pos:end="33:22">+</operator> <name pos:start="33:24" pos:end="33:27">diff</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:26"><operator pos:start="35:5" pos:end="35:5">(</operator><operator pos:start="35:6" pos:end="35:6">(</operator><name pos:start="35:7" pos:end="35:10">char</name><operator pos:start="35:11" pos:end="35:11">*</operator><operator pos:start="35:12" pos:end="35:12">)</operator><name pos:start="35:13" pos:end="35:15">ptr</name><operator pos:start="35:16" pos:end="35:16">)</operator><index pos:start="35:17" pos:end="35:20">[<expr pos:start="35:18" pos:end="35:19"><operator pos:start="35:18" pos:end="35:18">-</operator><literal type="number" pos:start="35:19" pos:end="35:19">1</literal></expr>]</index><operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:26">diff</name></expr>;</expr_stmt>

<cpp:elif pos:start="37:1" pos:end="37:25">#<cpp:directive pos:start="37:2" pos:end="37:5">elif</cpp:directive> <expr pos:start="37:7" pos:end="37:25"><name pos:start="37:7" pos:end="37:25">HAVE_POSIX_MEMALIGN</name></expr></cpp:elif>

    <if_stmt pos:start="39:5" pos:end="44:0"><if pos:start="39:5" pos:end="44:0">if <condition pos:start="39:8" pos:end="39:37">(<expr pos:start="39:9" pos:end="39:36"><call pos:start="39:9" pos:end="39:36"><name pos:start="39:9" pos:end="39:22">posix_memalign</name><argument_list pos:start="39:23" pos:end="39:36">(<argument pos:start="39:24" pos:end="39:27"><expr pos:start="39:24" pos:end="39:27"><operator pos:start="39:24" pos:end="39:24">&amp;</operator><name pos:start="39:25" pos:end="39:27">ptr</name></expr></argument>,<argument pos:start="39:29" pos:end="39:30"><expr pos:start="39:29" pos:end="39:30"><literal type="number" pos:start="39:29" pos:end="39:30">32</literal></expr></argument>,<argument pos:start="39:32" pos:end="39:35"><expr pos:start="39:32" pos:end="39:35"><name pos:start="39:32" pos:end="39:35">size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="44:0"><block_content pos:start="41:9" pos:end="44:0">

        <expr_stmt pos:start="41:9" pos:end="44:0"><expr pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:11">ptr</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:18">NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif pos:start="43:1" pos:end="43:19">#<cpp:directive pos:start="43:2" pos:end="43:5">elif</cpp:directive> <expr pos:start="43:7" pos:end="43:19"><name pos:start="43:7" pos:end="43:19">HAVE_MEMALIGN</name></expr></cpp:elif>

    <expr_stmt pos:start="45:5" pos:end="96:0"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:7">ptr</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:27"><name pos:start="45:11" pos:end="45:18">memalign</name><argument_list pos:start="45:19" pos:end="45:27">(<argument pos:start="45:20" pos:end="45:21"><expr pos:start="45:20" pos:end="45:21"><literal type="number" pos:start="45:20" pos:end="45:21">32</literal></expr></argument>,<argument pos:start="45:23" pos:end="45:26"><expr pos:start="45:23" pos:end="45:26"><name pos:start="45:23" pos:end="45:26">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="47:5" pos:end="63:7">/* Why 64?

       Indeed, we should align it:

         on 4 for 386

         on 16 for 486

         on 32 for 586, PPro - K6-III

         on 64 for K7 (maybe for P3 too).

       Because L1 and L2 caches are aligned on those values.

       But I don't want to code such logic here!

     */</comment>

     <comment type="block" pos:start="65:6" pos:end="71:7">/* Why 32?

        For AVX ASM. SSE / NEON needs only 16.

        Why not larger? Because I did not see a difference in benchmarks ...

     */</comment>

     <comment type="block" pos:start="73:6" pos:end="93:7">/* benchmarks with P3

        memalign(64)+1          3071,3051,3032

        memalign(64)+2          3051,3032,3041

        memalign(64)+4          2911,2896,2915

        memalign(64)+8          2545,2554,2550

        memalign(64)+16         2543,2572,2563

        memalign(64)+32         2546,2545,2571

        memalign(64)+64         2570,2533,2558



        BTW, malloc seems to do 8-byte alignment by default here.

     */</comment>

<cpp:else pos:start="95:1" pos:end="95:5">#<cpp:directive pos:start="95:2" pos:end="95:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="97:5" pos:end="100:0"><expr pos:start="97:5" pos:end="97:22"><name pos:start="97:5" pos:end="97:7">ptr</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:22"><name pos:start="97:11" pos:end="97:16">malloc</name><argument_list pos:start="97:17" pos:end="97:22">(<argument pos:start="97:18" pos:end="97:21"><expr pos:start="97:18" pos:end="97:21"><name pos:start="97:18" pos:end="97:21">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

    <return pos:start="101:5" pos:end="101:15">return <expr pos:start="101:12" pos:end="101:14"><name pos:start="101:12" pos:end="101:14">ptr</name></expr>;</return>

</block_content>}</block></function>
</unit>
