<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23176.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:30">qmp_block_set_io_throttle</name><parameter_list pos:start="1:31" pos:end="5:61">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">device</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:58">int64_t</name></type> <name pos:start="1:60" pos:end="1:62">bps</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:71">int64_t</name></type> <name pos:start="1:73" pos:end="1:78">bps_rd</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:45"><decl pos:start="3:32" pos:end="3:45"><type pos:start="3:32" pos:end="3:45"><name pos:start="3:32" pos:end="3:38">int64_t</name></type> <name pos:start="3:40" pos:end="3:45">bps_wr</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:59"><decl pos:start="3:48" pos:end="3:59"><type pos:start="3:48" pos:end="3:59"><name pos:start="3:48" pos:end="3:54">int64_t</name></type> <name pos:start="3:56" pos:end="3:59">iops</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:76"><decl pos:start="3:62" pos:end="3:76"><type pos:start="3:62" pos:end="3:76"><name pos:start="3:62" pos:end="3:68">int64_t</name></type> <name pos:start="3:70" pos:end="3:76">iops_rd</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:46"><decl pos:start="5:32" pos:end="5:46"><type pos:start="5:32" pos:end="5:46"><name pos:start="5:32" pos:end="5:38">int64_t</name></type> <name pos:start="5:40" pos:end="5:46">iops_wr</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:60"><decl pos:start="5:49" pos:end="5:60"><type pos:start="5:49" pos:end="5:60"><name pos:start="5:49" pos:end="5:53">Error</name> <modifier pos:start="5:55" pos:end="5:55">*</modifier><modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="75:1">{<block_content pos:start="9:5" pos:end="73:5">

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">BlockIOLimit</name></type> <name pos:start="9:18" pos:end="9:26">io_limits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:6">bs</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="15:26"><name pos:start="15:10" pos:end="15:18">bdrv_find</name><argument_list pos:start="15:19" pos:end="15:26">(<argument pos:start="15:20" pos:end="15:25"><expr pos:start="15:20" pos:end="15:25"><name pos:start="15:20" pos:end="15:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:12">(<expr pos:start="17:9" pos:end="17:11"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:11">bs</name></expr>)</condition> <block pos:start="17:14" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:55"><expr pos:start="19:9" pos:end="19:54"><call pos:start="19:9" pos:end="19:54"><name pos:start="19:9" pos:end="19:17">error_set</name><argument_list pos:start="19:18" pos:end="19:54">(<argument pos:start="19:19" pos:end="19:22"><expr pos:start="19:19" pos:end="19:22"><name pos:start="19:19" pos:end="19:22">errp</name></expr></argument>, <argument pos:start="19:25" pos:end="19:45"><expr pos:start="19:25" pos:end="19:45"><name pos:start="19:25" pos:end="19:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="19:48" pos:end="19:53"><expr pos:start="19:48" pos:end="19:53"><name pos:start="19:48" pos:end="19:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:46"><expr pos:start="27:5" pos:end="27:45"><name pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:13">io_limits</name><operator pos:start="27:14" pos:end="27:14">.</operator><name pos:start="27:15" pos:end="27:17">bps</name><index pos:start="27:18" pos:end="27:39">[<expr pos:start="27:19" pos:end="27:38"><name pos:start="27:19" pos:end="27:38">BLOCK_IO_LIMIT_TOTAL</name></expr>]</index></name> <operator pos:start="27:41" pos:end="27:41">=</operator> <name pos:start="27:43" pos:end="27:45">bps</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:49"><expr pos:start="29:5" pos:end="29:48"><name pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:13">io_limits</name><operator pos:start="29:14" pos:end="29:14">.</operator><name pos:start="29:15" pos:end="29:17">bps</name><index pos:start="29:18" pos:end="29:38">[<expr pos:start="29:19" pos:end="29:37"><name pos:start="29:19" pos:end="29:37">BLOCK_IO_LIMIT_READ</name></expr>]</index></name>  <operator pos:start="29:41" pos:end="29:41">=</operator> <name pos:start="29:43" pos:end="29:48">bps_rd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:49"><expr pos:start="31:5" pos:end="31:48"><name pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:13">io_limits</name><operator pos:start="31:14" pos:end="31:14">.</operator><name pos:start="31:15" pos:end="31:17">bps</name><index pos:start="31:18" pos:end="31:39">[<expr pos:start="31:19" pos:end="31:38"><name pos:start="31:19" pos:end="31:38">BLOCK_IO_LIMIT_WRITE</name></expr>]</index></name> <operator pos:start="31:41" pos:end="31:41">=</operator> <name pos:start="31:43" pos:end="31:48">bps_wr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:47"><expr pos:start="33:5" pos:end="33:46"><name pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:13">io_limits</name><operator pos:start="33:14" pos:end="33:14">.</operator><name pos:start="33:15" pos:end="33:18">iops</name><index pos:start="33:19" pos:end="33:40">[<expr pos:start="33:20" pos:end="33:39"><name pos:start="33:20" pos:end="33:39">BLOCK_IO_LIMIT_TOTAL</name></expr>]</index></name><operator pos:start="33:41" pos:end="33:41">=</operator> <name pos:start="33:43" pos:end="33:46">iops</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:50"><expr pos:start="35:5" pos:end="35:49"><name pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:13">io_limits</name><operator pos:start="35:14" pos:end="35:14">.</operator><name pos:start="35:15" pos:end="35:18">iops</name><index pos:start="35:19" pos:end="35:39">[<expr pos:start="35:20" pos:end="35:38"><name pos:start="35:20" pos:end="35:38">BLOCK_IO_LIMIT_READ</name></expr>]</index></name> <operator pos:start="35:41" pos:end="35:41">=</operator> <name pos:start="35:43" pos:end="35:49">iops_rd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:50"><expr pos:start="37:5" pos:end="37:49"><name pos:start="37:5" pos:end="37:40"><name pos:start="37:5" pos:end="37:13">io_limits</name><operator pos:start="37:14" pos:end="37:14">.</operator><name pos:start="37:15" pos:end="37:18">iops</name><index pos:start="37:19" pos:end="37:40">[<expr pos:start="37:20" pos:end="37:39"><name pos:start="37:20" pos:end="37:39">BLOCK_IO_LIMIT_WRITE</name></expr>]</index></name><operator pos:start="37:41" pos:end="37:41">=</operator> <name pos:start="37:43" pos:end="37:49">iops_wr</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:40">(<expr pos:start="41:9" pos:end="41:39"><operator pos:start="41:9" pos:end="41:9">!</operator><call pos:start="41:10" pos:end="41:39"><name pos:start="41:10" pos:end="41:27">do_check_io_limits</name><argument_list pos:start="41:28" pos:end="41:39">(<argument pos:start="41:29" pos:end="41:38"><expr pos:start="41:29" pos:end="41:38"><operator pos:start="41:29" pos:end="41:29">&amp;</operator><name pos:start="41:30" pos:end="41:38">io_limits</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:42" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:60"><expr pos:start="43:9" pos:end="43:59"><call pos:start="43:9" pos:end="43:59"><name pos:start="43:9" pos:end="43:17">error_set</name><argument_list pos:start="43:18" pos:end="43:59">(<argument pos:start="43:19" pos:end="43:22"><expr pos:start="43:19" pos:end="43:22"><name pos:start="43:19" pos:end="43:22">errp</name></expr></argument>, <argument pos:start="43:25" pos:end="43:58"><expr pos:start="43:25" pos:end="43:58"><name pos:start="43:25" pos:end="43:58">QERR_INVALID_PARAMETER_COMBINATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:6">bs</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:17">io_limits</name></name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:29">io_limits</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:41"><expr pos:start="53:5" pos:end="53:40"><name pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:6">bs</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:18">slice_time</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:40">BLOCK_IO_SLICE_TIME</name></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="73:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:61">(<expr pos:start="57:9" pos:end="57:60"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:30"><name pos:start="57:10" pos:end="57:11">bs</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:30">io_limits_enabled</name></name> <operator pos:start="57:32" pos:end="57:33">&amp;&amp;</operator> <call pos:start="57:35" pos:end="57:60"><name pos:start="57:35" pos:end="57:56">bdrv_io_limits_enabled</name><argument_list pos:start="57:57" pos:end="57:60">(<argument pos:start="57:58" pos:end="57:59"><expr pos:start="57:58" pos:end="57:59"><name pos:start="57:58" pos:end="57:59">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:63" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:34">

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><call pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:29">bdrv_io_limits_enable</name><argument_list pos:start="59:30" pos:end="59:33">(<argument pos:start="59:31" pos:end="59:32"><expr pos:start="59:31" pos:end="59:32"><name pos:start="59:31" pos:end="59:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="65:5">else if <condition pos:start="61:15" pos:end="61:68">(<expr pos:start="61:16" pos:end="61:67"><name pos:start="61:16" pos:end="61:36"><name pos:start="61:16" pos:end="61:17">bs</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:36">io_limits_enabled</name></name> <operator pos:start="61:38" pos:end="61:39">&amp;&amp;</operator> <operator pos:start="61:41" pos:end="61:41">!</operator><call pos:start="61:42" pos:end="61:67"><name pos:start="61:42" pos:end="61:63">bdrv_io_limits_enabled</name><argument_list pos:start="61:64" pos:end="61:67">(<argument pos:start="61:65" pos:end="61:66"><expr pos:start="61:65" pos:end="61:66"><name pos:start="61:65" pos:end="61:66">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:70" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:35">

        <expr_stmt pos:start="63:9" pos:end="63:35"><expr pos:start="63:9" pos:end="63:34"><call pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:30">bdrv_io_limits_disable</name><argument_list pos:start="63:31" pos:end="63:34">(<argument pos:start="63:32" pos:end="63:33"><expr pos:start="63:32" pos:end="63:33"><name pos:start="63:32" pos:end="63:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="73:5">else <block pos:start="65:12" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:9">

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:28">(<expr pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:14">bs</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:27">block_timer</name></name></expr>)</condition> <block pos:start="67:30" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:73">

            <expr_stmt pos:start="69:13" pos:end="69:73"><expr pos:start="69:13" pos:end="69:72"><call pos:start="69:13" pos:end="69:72"><name pos:start="69:13" pos:end="69:26">qemu_mod_timer</name><argument_list pos:start="69:27" pos:end="69:72">(<argument pos:start="69:28" pos:end="69:42"><expr pos:start="69:28" pos:end="69:42"><name pos:start="69:28" pos:end="69:42"><name pos:start="69:28" pos:end="69:29">bs</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:42">block_timer</name></name></expr></argument>, <argument pos:start="69:45" pos:end="69:71"><expr pos:start="69:45" pos:end="69:71"><call pos:start="69:45" pos:end="69:71"><name pos:start="69:45" pos:end="69:61">qemu_get_clock_ns</name><argument_list pos:start="69:62" pos:end="69:71">(<argument pos:start="69:63" pos:end="69:70"><expr pos:start="69:63" pos:end="69:70"><name pos:start="69:63" pos:end="69:70">vm_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
