<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5348.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">guess_disk_lchs</name><parameter_list pos:start="1:27" pos:end="3:71">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:38"><name pos:start="1:28" pos:end="1:35">IDEState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:42"><decl pos:start="3:28" pos:end="3:42"><type pos:start="3:28" pos:end="3:42"><name pos:start="3:28" pos:end="3:30">int</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:42">pcylinders</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:55"><decl pos:start="3:45" pos:end="3:55"><type pos:start="3:45" pos:end="3:55"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:55">pheads</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:70"><decl pos:start="3:58" pos:end="3:70"><type pos:start="3:58" pos:end="3:70"><name pos:start="3:58" pos:end="3:60">int</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:70">psectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:14">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">i</name></decl>, <decl pos:start="9:17" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:21">heads</name></decl>, <decl pos:start="9:24" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:30">sectors</name></decl>, <decl pos:start="9:33" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:33" pos:end="9:41">cylinders</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:20">partition</name></name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:21">nr_sects</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:7">buf</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:33"><name pos:start="17:11" pos:end="17:23">qemu_memalign</name><argument_list pos:start="17:24" pos:end="17:33">(<argument pos:start="17:25" pos:end="17:27"><expr pos:start="17:25" pos:end="17:27"><literal type="number" pos:start="17:25" pos:end="17:27">512</literal></expr></argument>, <argument pos:start="17:30" pos:end="17:32"><expr pos:start="17:30" pos:end="17:32"><literal type="number" pos:start="17:30" pos:end="17:32">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:18"><if pos:start="19:5" pos:end="21:18">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:11">buf</name> <operator pos:start="19:13" pos:end="19:14">==</operator> <name pos:start="19:16" pos:end="19:19">NULL</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:18"><block_content pos:start="21:9" pos:end="21:18">

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:37"><name pos:start="23:11" pos:end="23:19">bdrv_read</name><argument_list pos:start="23:20" pos:end="23:37">(<argument pos:start="23:21" pos:end="23:25"><expr pos:start="23:21" pos:end="23:25"><name pos:start="23:21" pos:end="23:25"><name pos:start="23:21" pos:end="23:21">s</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:25">bs</name></name></expr></argument>, <argument pos:start="23:28" pos:end="23:28"><expr pos:start="23:28" pos:end="23:28"><literal type="number" pos:start="23:28" pos:end="23:28">0</literal></expr></argument>, <argument pos:start="23:31" pos:end="23:33"><expr pos:start="23:31" pos:end="23:33"><name pos:start="23:31" pos:end="23:33">buf</name></expr></argument>, <argument pos:start="23:36" pos:end="23:36"><expr pos:start="23:36" pos:end="23:36"><literal type="number" pos:start="23:36" pos:end="23:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><call pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:17">qemu_free</name><argument_list pos:start="27:18" pos:end="27:22">(<argument pos:start="27:19" pos:end="27:21"><expr pos:start="27:19" pos:end="27:21"><name pos:start="27:19" pos:end="27:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="33:5" pos:end="33:26">/* test msdos magic */</comment>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:45">(<expr pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:11">buf</name><index pos:start="35:12" pos:end="35:16">[<expr pos:start="35:13" pos:end="35:15"><literal type="number" pos:start="35:13" pos:end="35:15">510</literal></expr>]</index></name> <operator pos:start="35:18" pos:end="35:19">!=</operator> <literal type="number" pos:start="35:21" pos:end="35:24">0x55</literal> <operator pos:start="35:26" pos:end="35:27">||</operator> <name pos:start="35:29" pos:end="35:36"><name pos:start="35:29" pos:end="35:31">buf</name><index pos:start="35:32" pos:end="35:36">[<expr pos:start="35:33" pos:end="35:35"><literal type="number" pos:start="35:33" pos:end="35:35">511</literal></expr>]</index></name> <operator pos:start="35:38" pos:end="35:39">!=</operator> <literal type="number" pos:start="35:41" pos:end="35:44">0xaa</literal></expr>)</condition> <block pos:start="35:47" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><call pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:17">qemu_free</name><argument_list pos:start="37:18" pos:end="37:22">(<argument pos:start="37:19" pos:end="37:21"><expr pos:start="37:19" pos:end="37:21"><name pos:start="37:19" pos:end="37:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="43:5" pos:end="89:5">for<control pos:start="43:8" pos:end="43:26">(<init pos:start="43:9" pos:end="43:14"><expr pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:9">i</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <literal type="number" pos:start="43:13" pos:end="43:13">0</literal></expr>;</init> <condition pos:start="43:16" pos:end="43:21"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:16">i</name> <operator pos:start="43:18" pos:end="43:18">&lt;</operator> <literal type="number" pos:start="43:20" pos:end="43:20">4</literal></expr>;</condition> <incr pos:start="43:23" pos:end="43:25"><expr pos:start="43:23" pos:end="43:25"><name pos:start="43:23" pos:end="43:23">i</name><operator pos:start="43:24" pos:end="43:25">++</operator></expr></incr>)</control> <block pos:start="43:28" pos:end="89:5">{<block_content pos:start="45:9" pos:end="87:9">

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:9">p</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <operator pos:start="45:13" pos:end="45:13">(</operator><operator pos:start="45:14" pos:end="45:14">(</operator>struct <name pos:start="45:22" pos:end="45:30">partition</name> <operator pos:start="45:32" pos:end="45:32">*</operator><operator pos:start="45:33" pos:end="45:33">)</operator><operator pos:start="45:34" pos:end="45:34">(</operator><name pos:start="45:35" pos:end="45:37">buf</name> <operator pos:start="45:39" pos:end="45:39">+</operator> <literal type="number" pos:start="45:41" pos:end="45:45">0x1be</literal><operator pos:start="45:46" pos:end="45:46">)</operator><operator pos:start="45:47" pos:end="45:47">)</operator> <operator pos:start="45:49" pos:end="45:49">+</operator> <name pos:start="45:51" pos:end="45:51">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:16">nr_sects</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <call pos:start="47:20" pos:end="47:43"><name pos:start="47:20" pos:end="47:30">le32_to_cpu</name><argument_list pos:start="47:31" pos:end="47:43">(<argument pos:start="47:32" pos:end="47:42"><expr pos:start="47:32" pos:end="47:42"><name pos:start="47:32" pos:end="47:42"><name pos:start="47:32" pos:end="47:32">p</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:42">nr_sects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="87:9"><if pos:start="49:9" pos:end="87:9">if <condition pos:start="49:12" pos:end="49:36">(<expr pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:20">nr_sects</name> <operator pos:start="49:22" pos:end="49:23">&amp;&amp;</operator> <name pos:start="49:25" pos:end="49:35"><name pos:start="49:25" pos:end="49:25">p</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:35">end_head</name></name></expr>)</condition> <block pos:start="49:38" pos:end="87:9">{<block_content pos:start="55:13" pos:end="85:21">

            <comment type="block" pos:start="51:13" pos:end="53:37">/* We make the assumption that the partition terminates on

               a cylinder boundary */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:36"><expr pos:start="55:13" pos:end="55:35"><name pos:start="55:13" pos:end="55:17">heads</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <name pos:start="55:21" pos:end="55:31"><name pos:start="55:21" pos:end="55:21">p</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:31">end_head</name></name> <operator pos:start="55:33" pos:end="55:33">+</operator> <literal type="number" pos:start="55:35" pos:end="55:35">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:41"><expr pos:start="57:13" pos:end="57:40"><name pos:start="57:13" pos:end="57:19">sectors</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <name pos:start="57:23" pos:end="57:35"><name pos:start="57:23" pos:end="57:23">p</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:35">end_sector</name></name> <operator pos:start="57:37" pos:end="57:37">&amp;</operator> <literal type="number" pos:start="57:39" pos:end="57:40">63</literal></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="61:25"><if pos:start="59:13" pos:end="61:25">if <condition pos:start="59:16" pos:end="59:29">(<expr pos:start="59:17" pos:end="59:28"><name pos:start="59:17" pos:end="59:23">sectors</name> <operator pos:start="59:25" pos:end="59:26">==</operator> <literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:25"><block_content pos:start="61:17" pos:end="61:25">

                <continue pos:start="61:17" pos:end="61:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:58"><expr pos:start="63:13" pos:end="63:57"><name pos:start="63:13" pos:end="63:21">cylinders</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:37"><name pos:start="63:25" pos:end="63:25">s</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:37">nb_sectors</name></name> <operator pos:start="63:39" pos:end="63:39">/</operator> <operator pos:start="63:41" pos:end="63:41">(</operator><name pos:start="63:42" pos:end="63:46">heads</name> <operator pos:start="63:48" pos:end="63:48">*</operator> <name pos:start="63:50" pos:end="63:56">sectors</name><operator pos:start="63:57" pos:end="63:57">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="67:25"><if pos:start="65:13" pos:end="67:25">if <condition pos:start="65:16" pos:end="65:51">(<expr pos:start="65:17" pos:end="65:50"><name pos:start="65:17" pos:end="65:44"><name pos:start="65:17" pos:end="65:25">cylinders</name> <argument_list type="generic" pos:start="65:27" pos:end="65:44">&lt; <argument pos:start="65:29" pos:end="65:42"><expr pos:start="65:29" pos:end="65:42"><literal type="number" pos:start="65:29" pos:end="65:29">1</literal> <operator pos:start="65:31" pos:end="65:32">||</operator> <name pos:start="65:34" pos:end="65:42">cylinders</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="65:46" pos:end="65:50">16383</literal></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="67:25"><block_content pos:start="67:17" pos:end="67:25">

                <continue pos:start="67:17" pos:end="67:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:28"><expr pos:start="69:13" pos:end="69:27"><operator pos:start="69:13" pos:end="69:13">*</operator><name pos:start="69:14" pos:end="69:19">pheads</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:27">heads</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:32"><expr pos:start="71:13" pos:end="71:31"><operator pos:start="71:13" pos:end="71:13">*</operator><name pos:start="71:14" pos:end="71:21">psectors</name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:31">sectors</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="82:0"><expr pos:start="73:13" pos:end="73:35"><operator pos:start="73:13" pos:end="73:13">*</operator><name pos:start="73:14" pos:end="73:23">pcylinders</name> <operator pos:start="73:25" pos:end="73:25">=</operator> <name pos:start="73:27" pos:end="73:35">cylinders</name></expr>;</expr_stmt>

<cpp:if pos:start="75:1" pos:end="75:5">#<cpp:directive pos:start="75:2" pos:end="75:3">if</cpp:directive> <expr pos:start="75:5" pos:end="75:5"><literal type="number" pos:start="75:5" pos:end="75:5">0</literal></expr></cpp:if>

            printf("guessed geometry: LCHS=%d %d %d\n",

                   cylinders, heads, sectors);

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="83:13" pos:end="83:27"><expr pos:start="83:13" pos:end="83:26"><call pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:21">qemu_free</name><argument_list pos:start="83:22" pos:end="83:26">(<argument pos:start="83:23" pos:end="83:25"><expr pos:start="83:23" pos:end="83:25"><name pos:start="83:23" pos:end="83:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:21">return <expr pos:start="85:20" pos:end="85:20"><literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="91:5" pos:end="91:19"><expr pos:start="91:5" pos:end="91:18"><call pos:start="91:5" pos:end="91:18"><name pos:start="91:5" pos:end="91:13">qemu_free</name><argument_list pos:start="91:14" pos:end="91:18">(<argument pos:start="91:15" pos:end="91:17"><expr pos:start="91:15" pos:end="91:17"><name pos:start="91:15" pos:end="91:17">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="93:5" pos:end="93:14">return <expr pos:start="93:12" pos:end="93:13"><operator pos:start="93:12" pos:end="93:12">-</operator><literal type="number" pos:start="93:13" pos:end="93:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
