<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5703.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">xen_pt_msgdata_reg_write</name><parameter_list pos:start="1:36" pos:end="5:76">(<parameter pos:start="1:37" pos:end="1:61"><decl pos:start="1:37" pos:end="1:61"><type pos:start="1:37" pos:end="1:61"><name pos:start="1:37" pos:end="1:58">XenPCIPassthroughState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:55"><decl pos:start="3:37" pos:end="3:55"><type pos:start="3:37" pos:end="3:55"><name pos:start="3:37" pos:end="3:44">XenPTReg</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">cfg_entry</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:70"><decl pos:start="3:58" pos:end="3:70"><type pos:start="3:58" pos:end="3:70"><name pos:start="3:58" pos:end="3:65">uint16_t</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:70">val</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:54"><decl pos:start="5:37" pos:end="5:54"><type pos:start="5:37" pos:end="5:54"><name pos:start="5:37" pos:end="5:44">uint16_t</name></type> <name pos:start="5:46" pos:end="5:54">dev_value</name></decl></parameter>, <parameter pos:start="5:57" pos:end="5:75"><decl pos:start="5:57" pos:end="5:75"><type pos:start="5:57" pos:end="5:75"><name pos:start="5:57" pos:end="5:64">uint16_t</name></type> <name pos:start="5:66" pos:end="5:75">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="69:1">{<block_content pos:start="9:5" pos:end="67:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">XenPTMSI</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">msi</name> <init pos:start="11:19" pos:end="11:26">= <expr pos:start="11:21" pos:end="11:26"><name pos:start="11:21" pos:end="11:26"><name pos:start="11:21" pos:end="11:21">s</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:26">msi</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:26">writable_mask</name> <init pos:start="13:28" pos:end="13:30">= <expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:40"><decl pos:start="15:5" pos:end="15:39"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:21">old_data</name> <init pos:start="15:23" pos:end="15:39">= <expr pos:start="15:25" pos:end="15:39"><name pos:start="15:25" pos:end="15:39"><name pos:start="15:25" pos:end="15:33">cfg_entry</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:39">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:19">offset</name> <init pos:start="17:21" pos:end="17:33">= <expr pos:start="17:23" pos:end="17:33"><name pos:start="17:23" pos:end="17:33"><name pos:start="17:23" pos:end="17:25">reg</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:33">offset</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:58">/* check the offset whether matches the type or not */</comment>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:57">(<expr pos:start="23:9" pos:end="23:56"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:56"><name pos:start="23:10" pos:end="23:30">xen_pt_msi_check_type</name><argument_list pos:start="23:31" pos:end="23:56">(<argument pos:start="23:32" pos:end="23:37"><expr pos:start="23:32" pos:end="23:37"><name pos:start="23:32" pos:end="23:37">offset</name></expr></argument>, <argument pos:start="23:40" pos:end="23:49"><expr pos:start="23:40" pos:end="23:49"><name pos:start="23:40" pos:end="23:49"><name pos:start="23:40" pos:end="23:42">msi</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:49">flags</name></name></expr></argument>, <argument pos:start="23:52" pos:end="23:55"><expr pos:start="23:52" pos:end="23:55"><name pos:start="23:52" pos:end="23:55">DATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:59" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <comment type="block" pos:start="25:9" pos:end="25:31">/* exit I/O emulator */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:79"><expr pos:start="27:9" pos:end="27:78"><call pos:start="27:9" pos:end="27:78"><name pos:start="27:9" pos:end="27:18">XEN_PT_ERR</name><argument_list pos:start="27:19" pos:end="27:78">(<argument pos:start="27:20" pos:end="27:26"><expr pos:start="27:20" pos:end="27:26"><operator pos:start="27:20" pos:end="27:20">&amp;</operator><name pos:start="27:21" pos:end="27:26"><name pos:start="27:21" pos:end="27:21">s</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:26">dev</name></name></expr></argument>, <argument pos:start="27:29" pos:end="27:77"><expr pos:start="27:29" pos:end="27:77"><literal type="string" pos:start="27:29" pos:end="27:77">"the offset does not match the 32/64 bit type!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:63"><expr pos:start="37:5" pos:end="37:62"><name pos:start="37:5" pos:end="37:17">writable_mask</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:33"><name pos:start="37:21" pos:end="37:23">reg</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:33">emu_mask</name></name> <operator pos:start="37:35" pos:end="37:35">&amp;</operator> <operator pos:start="37:37" pos:end="37:37">~</operator><name pos:start="37:38" pos:end="37:49"><name pos:start="37:38" pos:end="37:40">reg</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:49">ro_mask</name></name> <operator pos:start="37:51" pos:end="37:51">&amp;</operator> <name pos:start="37:53" pos:end="37:62">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:79"><expr pos:start="39:5" pos:end="39:78"><name pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:13">cfg_entry</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:19">data</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:78"><name pos:start="39:23" pos:end="39:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="39:41" pos:end="39:78">(<argument pos:start="39:42" pos:end="39:45"><expr pos:start="39:42" pos:end="39:45"><operator pos:start="39:42" pos:end="39:42">*</operator><name pos:start="39:43" pos:end="39:45">val</name></expr></argument>, <argument pos:start="39:48" pos:end="39:62"><expr pos:start="39:48" pos:end="39:62"><name pos:start="39:48" pos:end="39:62"><name pos:start="39:48" pos:end="39:56">cfg_entry</name><operator pos:start="39:57" pos:end="39:58">-&gt;</operator><name pos:start="39:59" pos:end="39:62">data</name></name></expr></argument>, <argument pos:start="39:65" pos:end="39:77"><expr pos:start="39:65" pos:end="39:77"><name pos:start="39:65" pos:end="39:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="41:5" pos:end="41:33">/* update the msi_info too */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:32"><expr pos:start="43:5" pos:end="43:31"><name pos:start="43:5" pos:end="43:13"><name pos:start="43:5" pos:end="43:7">msi</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:13">data</name></name> <operator pos:start="43:15" pos:end="43:15">=</operator> <name pos:start="43:17" pos:end="43:31"><name pos:start="43:17" pos:end="43:25">cfg_entry</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:31">data</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:57">/* create value for writing to I/O device register */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:50"><expr pos:start="49:5" pos:end="49:49"><operator pos:start="49:5" pos:end="49:5">*</operator><name pos:start="49:6" pos:end="49:8">val</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <call pos:start="49:12" pos:end="49:49"><name pos:start="49:12" pos:end="49:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="49:30" pos:end="49:49">(<argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><operator pos:start="49:31" pos:end="49:31">*</operator><name pos:start="49:32" pos:end="49:34">val</name></expr></argument>, <argument pos:start="49:37" pos:end="49:45"><expr pos:start="49:37" pos:end="49:45"><name pos:start="49:37" pos:end="49:45">dev_value</name></expr></argument>, <argument pos:start="49:48" pos:end="49:48"><expr pos:start="49:48" pos:end="49:48"><literal type="number" pos:start="49:48" pos:end="49:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:20">/* update MSI */</comment>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:36">(<expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:17">cfg_entry</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:23">data</name></name> <operator pos:start="55:25" pos:end="55:26">!=</operator> <name pos:start="55:28" pos:end="55:35">old_data</name></expr>)</condition> <block pos:start="55:38" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:9">

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:24">(<expr pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:15">msi</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:23">mapped</name></name></expr>)</condition> <block pos:start="57:26" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:33">

            <expr_stmt pos:start="59:13" pos:end="59:33"><expr pos:start="59:13" pos:end="59:32"><call pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:29">xen_pt_msi_update</name><argument_list pos:start="59:30" pos:end="59:32">(<argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><name pos:start="59:31" pos:end="59:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
