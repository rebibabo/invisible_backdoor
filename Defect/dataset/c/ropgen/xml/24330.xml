<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24330.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">bdrv_all_delete_snapshot</name><parameter_list pos:start="1:29" pos:end="3:41">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:45">name</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:78"><decl pos:start="1:48" pos:end="1:78"><type pos:start="1:48" pos:end="1:78"><name pos:start="1:48" pos:end="1:63">BlockDriverState</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier><modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:78">first_bad_bs</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:40"><decl pos:start="3:30" pos:end="3:40"><type pos:start="3:30" pos:end="3:40"><name pos:start="3:30" pos:end="3:34">Error</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier><modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:40">err</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="43:1">{<block_content pos:start="7:5" pos:end="41:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BdrvNextIterator</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">it</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:20">QEMUSnapshotInfo</name></type> <name pos:start="13:22" pos:end="13:24">sn1</name></decl>, <decl pos:start="13:27" pos:end="13:42"><type ref="prev" pos:start="13:5" pos:end="13:20"><modifier pos:start="13:27" pos:end="13:27">*</modifier></type><name pos:start="13:28" pos:end="13:35">snapshot</name> <init pos:start="13:37" pos:end="13:42">= <expr pos:start="13:39" pos:end="13:42"><operator pos:start="13:39" pos:end="13:39">&amp;</operator><name pos:start="13:40" pos:end="13:42">sn1</name></expr></init></decl>;</decl_stmt>



    <while pos:start="17:5" pos:end="35:5">while <condition pos:start="17:11" pos:end="17:49">(<expr pos:start="17:12" pos:end="17:48"><name pos:start="17:12" pos:end="17:14">ret</name> <operator pos:start="17:16" pos:end="17:17">==</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal> <operator pos:start="17:21" pos:end="17:22">&amp;&amp;</operator> <operator pos:start="17:24" pos:end="17:24">(</operator><name pos:start="17:25" pos:end="17:26">it</name> <operator pos:start="17:28" pos:end="17:28">=</operator> <call pos:start="17:30" pos:end="17:47"><name pos:start="17:30" pos:end="17:38">bdrv_next</name><argument_list pos:start="17:39" pos:end="17:47">(<argument pos:start="17:40" pos:end="17:41"><expr pos:start="17:40" pos:end="17:41"><name pos:start="17:40" pos:end="17:41">it</name></expr></argument>, <argument pos:start="17:44" pos:end="17:46"><expr pos:start="17:44" pos:end="17:46"><operator pos:start="17:44" pos:end="17:44">&amp;</operator><name pos:start="17:45" pos:end="17:46">bs</name></expr></argument>)</argument_list></call><operator pos:start="17:48" pos:end="17:48">)</operator></expr>)</condition> <block pos:start="17:51" pos:end="35:5">{<block_content pos:start="19:9" pos:end="33:33">

        <decl_stmt pos:start="19:9" pos:end="19:51"><decl pos:start="19:9" pos:end="19:50"><type pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:18">AioContext</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:23">ctx</name> <init pos:start="19:25" pos:end="19:50">= <expr pos:start="19:27" pos:end="19:50"><call pos:start="19:27" pos:end="19:50"><name pos:start="19:27" pos:end="19:46">bdrv_get_aio_context</name><argument_list pos:start="19:47" pos:end="19:50">(<argument pos:start="19:48" pos:end="19:49"><expr pos:start="19:48" pos:end="19:49"><name pos:start="19:48" pos:end="19:49">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:33"><expr pos:start="23:9" pos:end="23:32"><call pos:start="23:9" pos:end="23:32"><name pos:start="23:9" pos:end="23:27">aio_context_acquire</name><argument_list pos:start="23:28" pos:end="23:32">(<argument pos:start="23:29" pos:end="23:31"><expr pos:start="23:29" pos:end="23:31"><name pos:start="23:29" pos:end="23:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="31:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="27:60">(<expr pos:start="25:13" pos:end="27:59"><call pos:start="25:13" pos:end="25:33"><name pos:start="25:13" pos:end="25:29">bdrv_can_snapshot</name><argument_list pos:start="25:30" pos:end="25:33">(<argument pos:start="25:31" pos:end="25:32"><expr pos:start="25:31" pos:end="25:32"><name pos:start="25:31" pos:end="25:32">bs</name></expr></argument>)</argument_list></call> <operator pos:start="25:35" pos:end="25:36">&amp;&amp;</operator>

                <call pos:start="27:17" pos:end="27:54"><name pos:start="27:17" pos:end="27:34">bdrv_snapshot_find</name><argument_list pos:start="27:35" pos:end="27:54">(<argument pos:start="27:36" pos:end="27:37"><expr pos:start="27:36" pos:end="27:37"><name pos:start="27:36" pos:end="27:37">bs</name></expr></argument>, <argument pos:start="27:40" pos:end="27:47"><expr pos:start="27:40" pos:end="27:47"><name pos:start="27:40" pos:end="27:47">snapshot</name></expr></argument>, <argument pos:start="27:50" pos:end="27:53"><expr pos:start="27:50" pos:end="27:53"><name pos:start="27:50" pos:end="27:53">name</name></expr></argument>)</argument_list></call> <operator pos:start="27:56" pos:end="27:57">&gt;=</operator> <literal type="number" pos:start="27:59" pos:end="27:59">0</literal></expr>)</condition> <block pos:start="27:62" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:68">

            <expr_stmt pos:start="29:13" pos:end="29:68"><expr pos:start="29:13" pos:end="29:67"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:67"><name pos:start="29:19" pos:end="29:52">bdrv_snapshot_delete_by_id_or_name</name><argument_list pos:start="29:53" pos:end="29:67">(<argument pos:start="29:54" pos:end="29:55"><expr pos:start="29:54" pos:end="29:55"><name pos:start="29:54" pos:end="29:55">bs</name></expr></argument>, <argument pos:start="29:58" pos:end="29:61"><expr pos:start="29:58" pos:end="29:61"><name pos:start="29:58" pos:end="29:61">name</name></expr></argument>, <argument pos:start="29:64" pos:end="29:66"><expr pos:start="29:64" pos:end="29:66"><name pos:start="29:64" pos:end="29:66">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><call pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:27">aio_context_release</name><argument_list pos:start="33:28" pos:end="33:32">(<argument pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="39:5" pos:end="39:23"><expr pos:start="39:5" pos:end="39:22"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:17">first_bad_bs</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:22">bs</name></expr>;</expr_stmt>

    <return pos:start="41:5" pos:end="41:15">return <expr pos:start="41:12" pos:end="41:14"><name pos:start="41:12" pos:end="41:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
