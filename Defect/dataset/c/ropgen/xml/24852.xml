<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24852.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">imx_epit_write</name><parameter_list pos:start="1:27" pos:end="3:41">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:54"><decl pos:start="1:42" pos:end="1:54"><type pos:start="1:42" pos:end="1:54"><name pos:start="1:42" pos:end="1:47">hwaddr</name></type> <name pos:start="1:49" pos:end="1:54">offset</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:70"><decl pos:start="1:57" pos:end="1:70"><type pos:start="1:57" pos:end="1:70"><name pos:start="1:57" pos:end="1:64">uint64_t</name></type> <name pos:start="1:66" pos:end="1:70">value</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:40"><decl pos:start="3:28" pos:end="3:40"><type pos:start="3:28" pos:end="3:40"><name pos:start="3:28" pos:end="3:35">unsigned</name></type> <name pos:start="3:37" pos:end="3:40">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="179:1">{<block_content pos:start="7:5" pos:end="177:5">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">IMXEPITState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><call pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:30">IMX_EPIT</name><argument_list pos:start="7:31" pos:end="7:38">(<argument pos:start="7:32" pos:end="7:37"><expr pos:start="7:32" pos:end="7:37"><name pos:start="7:32" pos:end="7:37">opaque</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">reg</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:25">offset</name> <operator pos:start="9:27" pos:end="9:28">&gt;&gt;</operator> <literal type="number" pos:start="9:30" pos:end="9:30">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:18">oldcr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:79"><expr pos:start="15:5" pos:end="15:78"><call pos:start="15:5" pos:end="15:78"><name pos:start="15:5" pos:end="15:11">DPRINTF</name><argument_list pos:start="15:12" pos:end="15:78">(<argument pos:start="15:13" pos:end="15:36"><expr pos:start="15:13" pos:end="15:36"><literal type="string" pos:start="15:13" pos:end="15:36">"(%s, value = 0x%08x)\n"</literal></expr></argument>, <argument pos:start="15:39" pos:end="15:60"><expr pos:start="15:39" pos:end="15:60"><call pos:start="15:39" pos:end="15:60"><name pos:start="15:39" pos:end="15:55">imx_epit_reg_name</name><argument_list pos:start="15:56" pos:end="15:60">(<argument pos:start="15:57" pos:end="15:59"><expr pos:start="15:57" pos:end="15:59"><name pos:start="15:57" pos:end="15:59">reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:63" pos:end="15:77"><expr pos:start="15:63" pos:end="15:77"><operator pos:start="15:63" pos:end="15:63">(</operator><name pos:start="15:64" pos:end="15:71">uint32_t</name><operator pos:start="15:72" pos:end="15:72">)</operator><name pos:start="15:73" pos:end="15:77">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="19:5" pos:end="177:5">switch <condition pos:start="19:12" pos:end="19:16">(<expr pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:15">reg</name></expr>)</condition> <block pos:start="19:18" pos:end="177:5">{<block_content pos:start="21:5" pos:end="175:14">

    <case pos:start="21:5" pos:end="21:11">case <expr pos:start="21:10" pos:end="21:10"><literal type="number" pos:start="21:10" pos:end="21:10">0</literal></expr>:</case> <comment type="block" pos:start="21:13" pos:end="21:20">/* CR */</comment>



        <expr_stmt pos:start="25:9" pos:end="25:22"><expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:13">oldcr</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:21"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:21">cr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:35"><expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:13"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:13">cr</name></name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:21">value</name> <operator pos:start="27:23" pos:end="27:23">&amp;</operator> <literal type="number" pos:start="27:25" pos:end="27:34">0x03ffffff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="39:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:27">(<expr pos:start="29:13" pos:end="29:26"><name pos:start="29:13" pos:end="29:17"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:17">cr</name></name> <operator pos:start="29:19" pos:end="29:19">&amp;</operator> <name pos:start="29:21" pos:end="29:26">CR_SWR</name></expr>)</condition> <block pos:start="29:29" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:38">

            <comment type="block" pos:start="31:13" pos:end="31:34">/* handle the reset */</comment>

            <expr_stmt pos:start="33:13" pos:end="33:38"><expr pos:start="33:13" pos:end="33:37"><call pos:start="33:13" pos:end="33:37"><name pos:start="33:13" pos:end="33:26">imx_epit_reset</name><argument_list pos:start="33:27" pos:end="33:37">(<argument pos:start="33:28" pos:end="33:36"><expr pos:start="33:28" pos:end="33:36"><call pos:start="33:28" pos:end="33:36"><name pos:start="33:28" pos:end="33:33">DEVICE</name><argument_list pos:start="33:34" pos:end="33:36">(<argument pos:start="33:35" pos:end="33:35"><expr pos:start="33:35" pos:end="33:35"><name pos:start="33:35" pos:end="33:35">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="35:11" pos:end="39:9">else <block pos:start="35:16" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:33">

            <expr_stmt pos:start="37:13" pos:end="37:33"><expr pos:start="37:13" pos:end="37:32"><call pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:29">imx_epit_set_freq</name><argument_list pos:start="37:30" pos:end="37:32">(<argument pos:start="37:31" pos:end="37:31"><expr pos:start="37:31" pos:end="37:31"><name pos:start="37:31" pos:end="37:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="43:9" pos:end="101:9"><if pos:start="43:9" pos:end="79:9">if <condition pos:start="43:12" pos:end="43:59">(<expr pos:start="43:13" pos:end="43:58"><name pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:19">freq</name></name> <operator pos:start="43:21" pos:end="43:22">&amp;&amp;</operator> <operator pos:start="43:24" pos:end="43:24">(</operator><name pos:start="43:25" pos:end="43:29"><name pos:start="43:25" pos:end="43:25">s</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:29">cr</name></name> <operator pos:start="43:31" pos:end="43:31">&amp;</operator> <name pos:start="43:33" pos:end="43:37">CR_EN</name><operator pos:start="43:38" pos:end="43:38">)</operator> <operator pos:start="43:40" pos:end="43:41">&amp;&amp;</operator> <operator pos:start="43:43" pos:end="43:43">!</operator><operator pos:start="43:44" pos:end="43:44">(</operator><name pos:start="43:45" pos:end="43:49">oldcr</name> <operator pos:start="43:51" pos:end="43:51">&amp;</operator> <name pos:start="43:53" pos:end="43:57">CR_EN</name><operator pos:start="43:58" pos:end="43:58">)</operator></expr>)</condition> <block pos:start="43:61" pos:end="79:9">{<block_content pos:start="45:13" pos:end="77:13">

            <if_stmt pos:start="45:13" pos:end="61:13"><if pos:start="45:13" pos:end="61:13">if <condition pos:start="45:16" pos:end="45:33">(<expr pos:start="45:17" pos:end="45:32"><name pos:start="45:17" pos:end="45:21"><name pos:start="45:17" pos:end="45:17">s</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:21">cr</name></name> <operator pos:start="45:23" pos:end="45:23">&amp;</operator> <name pos:start="45:25" pos:end="45:32">CR_ENMOD</name></expr>)</condition> <block pos:start="45:35" pos:end="61:13">{<block_content pos:start="47:17" pos:end="59:17">

                <if_stmt pos:start="47:17" pos:end="59:17"><if pos:start="47:17" pos:end="53:17">if <condition pos:start="47:20" pos:end="47:35">(<expr pos:start="47:21" pos:end="47:34"><name pos:start="47:21" pos:end="47:25"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:25">cr</name></name> <operator pos:start="47:27" pos:end="47:27">&amp;</operator> <name pos:start="47:29" pos:end="47:34">CR_RLD</name></expr>)</condition> <block pos:start="47:37" pos:end="53:17">{<block_content pos:start="49:21" pos:end="51:61">

                    <expr_stmt pos:start="49:21" pos:end="49:64"><expr pos:start="49:21" pos:end="49:63"><call pos:start="49:21" pos:end="49:63"><name pos:start="49:21" pos:end="49:36">ptimer_set_limit</name><argument_list pos:start="49:37" pos:end="49:63">(<argument pos:start="49:38" pos:end="49:52"><expr pos:start="49:38" pos:end="49:52"><name pos:start="49:38" pos:end="49:52"><name pos:start="49:38" pos:end="49:38">s</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:52">timer_reload</name></name></expr></argument>, <argument pos:start="49:55" pos:end="49:59"><expr pos:start="49:55" pos:end="49:59"><name pos:start="49:55" pos:end="49:59"><name pos:start="49:55" pos:end="49:55">s</name><operator pos:start="49:56" pos:end="49:57">-&gt;</operator><name pos:start="49:58" pos:end="49:59">lr</name></name></expr></argument>, <argument pos:start="49:62" pos:end="49:62"><expr pos:start="49:62" pos:end="49:62"><literal type="number" pos:start="49:62" pos:end="49:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="51:21" pos:end="51:61"><expr pos:start="51:21" pos:end="51:60"><call pos:start="51:21" pos:end="51:60"><name pos:start="51:21" pos:end="51:36">ptimer_set_limit</name><argument_list pos:start="51:37" pos:end="51:60">(<argument pos:start="51:38" pos:end="51:49"><expr pos:start="51:38" pos:end="51:49"><name pos:start="51:38" pos:end="51:49"><name pos:start="51:38" pos:end="51:38">s</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:49">timer_cmp</name></name></expr></argument>, <argument pos:start="51:52" pos:end="51:56"><expr pos:start="51:52" pos:end="51:56"><name pos:start="51:52" pos:end="51:56"><name pos:start="51:52" pos:end="51:52">s</name><operator pos:start="51:53" pos:end="51:54">-&gt;</operator><name pos:start="51:55" pos:end="51:56">lr</name></name></expr></argument>, <argument pos:start="51:59" pos:end="51:59"><expr pos:start="51:59" pos:end="51:59"><literal type="number" pos:start="51:59" pos:end="51:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="53:19" pos:end="59:17">else <block pos:start="53:24" pos:end="59:17">{<block_content pos:start="55:21" pos:end="57:65">

                    <expr_stmt pos:start="55:21" pos:end="55:68"><expr pos:start="55:21" pos:end="55:67"><call pos:start="55:21" pos:end="55:67"><name pos:start="55:21" pos:end="55:36">ptimer_set_limit</name><argument_list pos:start="55:37" pos:end="55:67">(<argument pos:start="55:38" pos:end="55:52"><expr pos:start="55:38" pos:end="55:52"><name pos:start="55:38" pos:end="55:52"><name pos:start="55:38" pos:end="55:38">s</name><operator pos:start="55:39" pos:end="55:40">-&gt;</operator><name pos:start="55:41" pos:end="55:52">timer_reload</name></name></expr></argument>, <argument pos:start="55:55" pos:end="55:63"><expr pos:start="55:55" pos:end="55:63"><name pos:start="55:55" pos:end="55:63">TIMER_MAX</name></expr></argument>, <argument pos:start="55:66" pos:end="55:66"><expr pos:start="55:66" pos:end="55:66"><literal type="number" pos:start="55:66" pos:end="55:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:65"><expr pos:start="57:21" pos:end="57:64"><call pos:start="57:21" pos:end="57:64"><name pos:start="57:21" pos:end="57:36">ptimer_set_limit</name><argument_list pos:start="57:37" pos:end="57:64">(<argument pos:start="57:38" pos:end="57:49"><expr pos:start="57:38" pos:end="57:49"><name pos:start="57:38" pos:end="57:49"><name pos:start="57:38" pos:end="57:38">s</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:49">timer_cmp</name></name></expr></argument>, <argument pos:start="57:52" pos:end="57:60"><expr pos:start="57:52" pos:end="57:60"><name pos:start="57:52" pos:end="57:60">TIMER_MAX</name></expr></argument>, <argument pos:start="57:63" pos:end="57:63"><expr pos:start="57:63" pos:end="57:63"><literal type="number" pos:start="57:63" pos:end="57:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="65:13" pos:end="65:45"><expr pos:start="65:13" pos:end="65:44"><call pos:start="65:13" pos:end="65:44"><name pos:start="65:13" pos:end="65:41">imx_epit_reload_compare_timer</name><argument_list pos:start="65:42" pos:end="65:44">(<argument pos:start="65:43" pos:end="65:43"><expr pos:start="65:43" pos:end="65:43"><name pos:start="65:43" pos:end="65:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:43"><expr pos:start="67:13" pos:end="67:42"><call pos:start="67:13" pos:end="67:42"><name pos:start="67:13" pos:end="67:22">ptimer_run</name><argument_list pos:start="67:23" pos:end="67:42">(<argument pos:start="67:24" pos:end="67:38"><expr pos:start="67:24" pos:end="67:38"><name pos:start="67:24" pos:end="67:38"><name pos:start="67:24" pos:end="67:24">s</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:38">timer_reload</name></name></expr></argument>, <argument pos:start="67:41" pos:end="67:41"><expr pos:start="67:41" pos:end="67:41"><literal type="number" pos:start="67:41" pos:end="67:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="77:13"><if pos:start="69:13" pos:end="73:13">if <condition pos:start="69:16" pos:end="69:33">(<expr pos:start="69:17" pos:end="69:32"><name pos:start="69:17" pos:end="69:21"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:21">cr</name></name> <operator pos:start="69:23" pos:end="69:23">&amp;</operator> <name pos:start="69:25" pos:end="69:32">CR_OCIEN</name></expr>)</condition> <block pos:start="69:35" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:44">

                <expr_stmt pos:start="71:17" pos:end="71:44"><expr pos:start="71:17" pos:end="71:43"><call pos:start="71:17" pos:end="71:43"><name pos:start="71:17" pos:end="71:26">ptimer_run</name><argument_list pos:start="71:27" pos:end="71:43">(<argument pos:start="71:28" pos:end="71:39"><expr pos:start="71:28" pos:end="71:39"><name pos:start="71:28" pos:end="71:39"><name pos:start="71:28" pos:end="71:28">s</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:39">timer_cmp</name></name></expr></argument>, <argument pos:start="71:42" pos:end="71:42"><expr pos:start="71:42" pos:end="71:42"><literal type="number" pos:start="71:42" pos:end="71:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="73:15" pos:end="77:13">else <block pos:start="73:20" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:42">

                <expr_stmt pos:start="75:17" pos:end="75:42"><expr pos:start="75:17" pos:end="75:41"><call pos:start="75:17" pos:end="75:41"><name pos:start="75:17" pos:end="75:27">ptimer_stop</name><argument_list pos:start="75:28" pos:end="75:41">(<argument pos:start="75:29" pos:end="75:40"><expr pos:start="75:29" pos:end="75:40"><name pos:start="75:29" pos:end="75:40"><name pos:start="75:29" pos:end="75:29">s</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:40">timer_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="79:11" pos:end="87:9">else if <condition pos:start="79:19" pos:end="79:36">(<expr pos:start="79:20" pos:end="79:35"><operator pos:start="79:20" pos:end="79:20">!</operator><operator pos:start="79:21" pos:end="79:21">(</operator><name pos:start="79:22" pos:end="79:26"><name pos:start="79:22" pos:end="79:22">s</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:26">cr</name></name> <operator pos:start="79:28" pos:end="79:28">&amp;</operator> <name pos:start="79:30" pos:end="79:34">CR_EN</name><operator pos:start="79:35" pos:end="79:35">)</operator></expr>)</condition> <block pos:start="79:38" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:38">

            <comment type="block" pos:start="81:13" pos:end="81:34">/* stop both timers */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:41"><expr pos:start="83:13" pos:end="83:40"><call pos:start="83:13" pos:end="83:40"><name pos:start="83:13" pos:end="83:23">ptimer_stop</name><argument_list pos:start="83:24" pos:end="83:40">(<argument pos:start="83:25" pos:end="83:39"><expr pos:start="83:25" pos:end="83:39"><name pos:start="83:25" pos:end="83:39"><name pos:start="83:25" pos:end="83:25">s</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:39">timer_reload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:38"><expr pos:start="85:13" pos:end="85:37"><call pos:start="85:13" pos:end="85:37"><name pos:start="85:13" pos:end="85:23">ptimer_stop</name><argument_list pos:start="85:24" pos:end="85:37">(<argument pos:start="85:25" pos:end="85:36"><expr pos:start="85:25" pos:end="85:36"><name pos:start="85:25" pos:end="85:36"><name pos:start="85:25" pos:end="85:25">s</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:36">timer_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="87:11" pos:end="97:9">else  if <condition pos:start="87:20" pos:end="87:37">(<expr pos:start="87:21" pos:end="87:36"><name pos:start="87:21" pos:end="87:25"><name pos:start="87:21" pos:end="87:21">s</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:25">cr</name></name> <operator pos:start="87:27" pos:end="87:27">&amp;</operator> <name pos:start="87:29" pos:end="87:36">CR_OCIEN</name></expr>)</condition> <block pos:start="87:39" pos:end="97:9">{<block_content pos:start="89:13" pos:end="95:13">

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="89:36">(<expr pos:start="89:17" pos:end="89:35"><operator pos:start="89:17" pos:end="89:17">!</operator><operator pos:start="89:18" pos:end="89:18">(</operator><name pos:start="89:19" pos:end="89:23">oldcr</name> <operator pos:start="89:25" pos:end="89:25">&amp;</operator> <name pos:start="89:27" pos:end="89:34">CR_OCIEN</name><operator pos:start="89:35" pos:end="89:35">)</operator></expr>)</condition> <block pos:start="89:38" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:44">

                <expr_stmt pos:start="91:17" pos:end="91:49"><expr pos:start="91:17" pos:end="91:48"><call pos:start="91:17" pos:end="91:48"><name pos:start="91:17" pos:end="91:45">imx_epit_reload_compare_timer</name><argument_list pos:start="91:46" pos:end="91:48">(<argument pos:start="91:47" pos:end="91:47"><expr pos:start="91:47" pos:end="91:47"><name pos:start="91:47" pos:end="91:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:44"><expr pos:start="93:17" pos:end="93:43"><call pos:start="93:17" pos:end="93:43"><name pos:start="93:17" pos:end="93:26">ptimer_run</name><argument_list pos:start="93:27" pos:end="93:43">(<argument pos:start="93:28" pos:end="93:39"><expr pos:start="93:28" pos:end="93:39"><name pos:start="93:28" pos:end="93:39"><name pos:start="93:28" pos:end="93:28">s</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:39">timer_cmp</name></name></expr></argument>, <argument pos:start="93:42" pos:end="93:42"><expr pos:start="93:42" pos:end="93:42"><literal type="number" pos:start="93:42" pos:end="93:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="101:9">else <block pos:start="97:16" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:38">

            <expr_stmt pos:start="99:13" pos:end="99:38"><expr pos:start="99:13" pos:end="99:37"><call pos:start="99:13" pos:end="99:37"><name pos:start="99:13" pos:end="99:23">ptimer_stop</name><argument_list pos:start="99:24" pos:end="99:37">(<argument pos:start="99:25" pos:end="99:36"><expr pos:start="99:25" pos:end="99:36"><name pos:start="99:25" pos:end="99:36"><name pos:start="99:25" pos:end="99:25">s</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:36">timer_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>



    <case pos:start="107:5" pos:end="107:11">case <expr pos:start="107:10" pos:end="107:10"><literal type="number" pos:start="107:10" pos:end="107:10">1</literal></expr>:</case> <comment type="block" pos:start="107:13" pos:end="107:25">/* SR - ACK*/</comment>

        <comment type="block" pos:start="109:9" pos:end="109:50">/* writing 1 to OCIF clear the OCIF bit */</comment>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:25">(<expr pos:start="111:13" pos:end="111:24"><name pos:start="111:13" pos:end="111:17">value</name> <operator pos:start="111:19" pos:end="111:19">&amp;</operator> <literal type="number" pos:start="111:21" pos:end="111:24">0x01</literal></expr>)</condition> <block pos:start="111:27" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:35">

            <expr_stmt pos:start="113:13" pos:end="113:22"><expr pos:start="113:13" pos:end="113:21"><name pos:start="113:13" pos:end="113:17"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:17">sr</name></name> <operator pos:start="113:19" pos:end="113:19">=</operator> <literal type="number" pos:start="113:21" pos:end="113:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:35"><expr pos:start="115:13" pos:end="115:34"><call pos:start="115:13" pos:end="115:34"><name pos:start="115:13" pos:end="115:31">imx_epit_update_int</name><argument_list pos:start="115:32" pos:end="115:34">(<argument pos:start="115:33" pos:end="115:33"><expr pos:start="115:33" pos:end="115:33"><name pos:start="115:33" pos:end="115:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>



    <case pos:start="123:5" pos:end="123:11">case <expr pos:start="123:10" pos:end="123:10"><literal type="number" pos:start="123:10" pos:end="123:10">2</literal></expr>:</case> <comment type="block" pos:start="123:13" pos:end="123:32">/* LR - set ticks */</comment>

        <expr_stmt pos:start="125:9" pos:end="125:22"><expr pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:13"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:13">lr</name></name> <operator pos:start="125:15" pos:end="125:15">=</operator> <name pos:start="125:17" pos:end="125:21">value</name></expr>;</expr_stmt>



        <if_stmt pos:start="129:9" pos:end="145:9"><if pos:start="129:9" pos:end="139:9">if <condition pos:start="129:12" pos:end="129:27">(<expr pos:start="129:13" pos:end="129:26"><name pos:start="129:13" pos:end="129:17"><name pos:start="129:13" pos:end="129:13">s</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:17">cr</name></name> <operator pos:start="129:19" pos:end="129:19">&amp;</operator> <name pos:start="129:21" pos:end="129:26">CR_RLD</name></expr>)</condition> <block pos:start="129:29" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:53">

            <comment type="block" pos:start="131:13" pos:end="131:58">/* Also set the limit if the LRD bit is set */</comment>

            <comment type="block" pos:start="133:13" pos:end="133:61">/* If IOVW bit is set then set the timer value */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:70"><expr pos:start="135:13" pos:end="135:69"><call pos:start="135:13" pos:end="135:69"><name pos:start="135:13" pos:end="135:28">ptimer_set_limit</name><argument_list pos:start="135:29" pos:end="135:69">(<argument pos:start="135:30" pos:end="135:44"><expr pos:start="135:30" pos:end="135:44"><name pos:start="135:30" pos:end="135:44"><name pos:start="135:30" pos:end="135:30">s</name><operator pos:start="135:31" pos:end="135:32">-&gt;</operator><name pos:start="135:33" pos:end="135:44">timer_reload</name></name></expr></argument>, <argument pos:start="135:47" pos:end="135:51"><expr pos:start="135:47" pos:end="135:51"><name pos:start="135:47" pos:end="135:51"><name pos:start="135:47" pos:end="135:47">s</name><operator pos:start="135:48" pos:end="135:49">-&gt;</operator><name pos:start="135:50" pos:end="135:51">lr</name></name></expr></argument>, <argument pos:start="135:54" pos:end="135:68"><expr pos:start="135:54" pos:end="135:68"><name pos:start="135:54" pos:end="135:58"><name pos:start="135:54" pos:end="135:54">s</name><operator pos:start="135:55" pos:end="135:56">-&gt;</operator><name pos:start="135:57" pos:end="135:58">cr</name></name> <operator pos:start="135:60" pos:end="135:60">&amp;</operator> <name pos:start="135:62" pos:end="135:68">CR_IOVW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:53"><expr pos:start="137:13" pos:end="137:52"><call pos:start="137:13" pos:end="137:52"><name pos:start="137:13" pos:end="137:28">ptimer_set_limit</name><argument_list pos:start="137:29" pos:end="137:52">(<argument pos:start="137:30" pos:end="137:41"><expr pos:start="137:30" pos:end="137:41"><name pos:start="137:30" pos:end="137:41"><name pos:start="137:30" pos:end="137:30">s</name><operator pos:start="137:31" pos:end="137:32">-&gt;</operator><name pos:start="137:33" pos:end="137:41">timer_cmp</name></name></expr></argument>, <argument pos:start="137:44" pos:end="137:48"><expr pos:start="137:44" pos:end="137:48"><name pos:start="137:44" pos:end="137:48"><name pos:start="137:44" pos:end="137:44">s</name><operator pos:start="137:45" pos:end="137:46">-&gt;</operator><name pos:start="137:47" pos:end="137:48">lr</name></name></expr></argument>, <argument pos:start="137:51" pos:end="137:51"><expr pos:start="137:51" pos:end="137:51"><literal type="number" pos:start="137:51" pos:end="137:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="139:11" pos:end="145:9">else if <condition pos:start="139:19" pos:end="139:35">(<expr pos:start="139:20" pos:end="139:34"><name pos:start="139:20" pos:end="139:24"><name pos:start="139:20" pos:end="139:20">s</name><operator pos:start="139:21" pos:end="139:22">-&gt;</operator><name pos:start="139:23" pos:end="139:24">cr</name></name> <operator pos:start="139:26" pos:end="139:26">&amp;</operator> <name pos:start="139:28" pos:end="139:34">CR_IOVW</name></expr>)</condition> <block pos:start="139:37" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:53">

            <comment type="block" pos:start="141:13" pos:end="141:61">/* If IOVW bit is set then set the timer value */</comment>

            <expr_stmt pos:start="143:13" pos:end="143:53"><expr pos:start="143:13" pos:end="143:52"><call pos:start="143:13" pos:end="143:52"><name pos:start="143:13" pos:end="143:28">ptimer_set_count</name><argument_list pos:start="143:29" pos:end="143:52">(<argument pos:start="143:30" pos:end="143:44"><expr pos:start="143:30" pos:end="143:44"><name pos:start="143:30" pos:end="143:44"><name pos:start="143:30" pos:end="143:30">s</name><operator pos:start="143:31" pos:end="143:32">-&gt;</operator><name pos:start="143:33" pos:end="143:44">timer_reload</name></name></expr></argument>, <argument pos:start="143:47" pos:end="143:51"><expr pos:start="143:47" pos:end="143:51"><name pos:start="143:47" pos:end="143:51"><name pos:start="143:47" pos:end="143:47">s</name><operator pos:start="143:48" pos:end="143:49">-&gt;</operator><name pos:start="143:50" pos:end="143:51">lr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:41"><expr pos:start="149:9" pos:end="149:40"><call pos:start="149:9" pos:end="149:40"><name pos:start="149:9" pos:end="149:37">imx_epit_reload_compare_timer</name><argument_list pos:start="149:38" pos:end="149:40">(<argument pos:start="149:39" pos:end="149:39"><expr pos:start="149:39" pos:end="149:39"><name pos:start="149:39" pos:end="149:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>



    <case pos:start="155:5" pos:end="155:11">case <expr pos:start="155:10" pos:end="155:10"><literal type="number" pos:start="155:10" pos:end="155:10">3</literal></expr>:</case> <comment type="block" pos:start="155:13" pos:end="155:21">/* CMP */</comment>

        <expr_stmt pos:start="157:9" pos:end="157:23"><expr pos:start="157:9" pos:end="157:22"><name pos:start="157:9" pos:end="157:14"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:14">cmp</name></name> <operator pos:start="157:16" pos:end="157:16">=</operator> <name pos:start="157:18" pos:end="157:22">value</name></expr>;</expr_stmt>



        <expr_stmt pos:start="161:9" pos:end="161:41"><expr pos:start="161:9" pos:end="161:40"><call pos:start="161:9" pos:end="161:40"><name pos:start="161:9" pos:end="161:37">imx_epit_reload_compare_timer</name><argument_list pos:start="161:38" pos:end="161:40">(<argument pos:start="161:39" pos:end="161:39"><expr pos:start="161:39" pos:end="161:39"><name pos:start="161:39" pos:end="161:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="165:9" pos:end="165:14">break;</break>



    <default pos:start="169:5" pos:end="169:12">default:</default>

        <expr_stmt pos:start="171:9" pos:end="171:40"><expr pos:start="171:9" pos:end="171:39"><call pos:start="171:9" pos:end="171:39"><name pos:start="171:9" pos:end="171:15">IPRINTF</name><argument_list pos:start="171:16" pos:end="171:39">(<argument pos:start="171:17" pos:end="171:33"><expr pos:start="171:17" pos:end="171:33"><literal type="string" pos:start="171:17" pos:end="171:33">"Bad offset %x\n"</literal></expr></argument>, <argument pos:start="171:36" pos:end="171:38"><expr pos:start="171:36" pos:end="171:38"><name pos:start="171:36" pos:end="171:38">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="175:9" pos:end="175:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
