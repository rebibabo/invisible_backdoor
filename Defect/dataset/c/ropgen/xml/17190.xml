<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17190.c" pos:tabs="8"><function pos:start="1:1" pos:end="206:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">theora_decode_tables</name><parameter_list pos:start="1:32" pos:end="1:73">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:72"><decl pos:start="1:56" pos:end="1:72"><type pos:start="1:56" pos:end="1:72"><name pos:start="1:56" pos:end="1:68">GetBitContext</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:72">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="206:13">{<block_content pos:start="5:5" pos:end="206:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">Vp3DecodeContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">n</name></decl>, <decl pos:start="7:15" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:22">matrices</name></decl>, <decl pos:start="7:25" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:29">inter</name></decl>, <decl pos:start="7:32" pos:end="7:36"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:32" pos:end="7:36">plane</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="206:13"><if pos:start="11:5" pos:end="206:13">if <condition pos:start="11:8" pos:end="11:30">(<expr pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:17">theora</name></name> <operator pos:start="11:19" pos:end="11:20">&gt;=</operator> <literal type="number" pos:start="11:22" pos:end="11:29">0x030200</literal></expr>)</condition> <block pos:start="11:32" pos:end="206:13">{<block_content pos:start="13:9" pos:end="206:13">

        <expr_stmt pos:start="13:9" pos:end="13:28"><expr pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:9">n</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:27"><name pos:start="13:13" pos:end="13:20">get_bits</name><argument_list pos:start="13:21" pos:end="13:27">(<argument pos:start="13:22" pos:end="13:23"><expr pos:start="13:22" pos:end="13:23"><name pos:start="13:22" pos:end="13:23">gb</name></expr></argument>, <argument pos:start="13:26" pos:end="13:26"><expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="15:9" pos:end="15:44">/* loop filter limit values table */</comment>

        <if_stmt pos:start="17:9" pos:end="206:13"><if pos:start="17:9" pos:end="206:13">if <condition pos:start="17:12" pos:end="17:14">(<expr pos:start="17:13" pos:end="17:13"><name pos:start="17:13" pos:end="17:13">n</name></expr>)</condition> <block pos:start="17:16" pos:end="206:13">{<block_content pos:start="19:9" pos:end="206:13">

        <for pos:start="19:9" pos:end="206:13">for <control pos:start="19:13" pos:end="19:32">(<init pos:start="19:14" pos:end="19:19"><expr pos:start="19:14" pos:end="19:18"><name pos:start="19:14" pos:end="19:14">i</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>;</init> <condition pos:start="19:21" pos:end="19:27"><expr pos:start="19:21" pos:end="19:26"><name pos:start="19:21" pos:end="19:21">i</name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <literal type="number" pos:start="19:25" pos:end="19:26">64</literal></expr>;</condition> <incr pos:start="19:29" pos:end="19:31"><expr pos:start="19:29" pos:end="19:31"><name pos:start="19:29" pos:end="19:29">i</name><operator pos:start="19:30" pos:end="19:31">++</operator></expr></incr>)</control> <block pos:start="19:34" pos:end="206:13">{<block_content pos:start="21:13" pos:end="206:13">

            <expr_stmt pos:start="21:13" pos:end="21:56"><expr pos:start="21:13" pos:end="21:55"><name pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:34">filter_limit_values</name><index pos:start="21:35" pos:end="21:37">[<expr pos:start="21:36" pos:end="21:36"><name pos:start="21:36" pos:end="21:36">i</name></expr>]</index></name> <operator pos:start="21:39" pos:end="21:39">=</operator> <call pos:start="21:41" pos:end="21:55"><name pos:start="21:41" pos:end="21:48">get_bits</name><argument_list pos:start="21:49" pos:end="21:55">(<argument pos:start="21:50" pos:end="21:51"><expr pos:start="21:50" pos:end="21:51"><name pos:start="21:50" pos:end="21:51">gb</name></expr></argument>, <argument pos:start="21:54" pos:end="21:54"><expr pos:start="21:54" pos:end="21:54"><name pos:start="21:54" pos:end="21:54">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="23:13" pos:end="206:13"><if pos:start="23:13" pos:end="206:13">if <condition pos:start="23:16" pos:end="23:48">(<expr pos:start="23:17" pos:end="23:47"><name pos:start="23:17" pos:end="23:41"><name pos:start="23:17" pos:end="23:17">s</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:38">filter_limit_values</name><index pos:start="23:39" pos:end="23:41">[<expr pos:start="23:40" pos:end="23:40"><name pos:start="23:40" pos:end="23:40">i</name></expr>]</index></name> <operator pos:start="23:43" pos:end="23:43">&gt;</operator> <literal type="number" pos:start="23:45" pos:end="23:47">127</literal></expr>)</condition> <block pos:start="23:50" pos:end="206:13">{<block_content pos:start="25:17" pos:end="206:13">

                <expr_stmt pos:start="25:17" pos:end="25:126"><expr pos:start="25:17" pos:end="25:125"><call pos:start="25:17" pos:end="25:125"><name pos:start="25:17" pos:end="25:22">av_log</name><argument_list pos:start="25:23" pos:end="25:125">(<argument pos:start="25:24" pos:end="25:28"><expr pos:start="25:24" pos:end="25:28"><name pos:start="25:24" pos:end="25:28">avctx</name></expr></argument>, <argument pos:start="25:31" pos:end="25:42"><expr pos:start="25:31" pos:end="25:42"><name pos:start="25:31" pos:end="25:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:45" pos:end="25:97"><expr pos:start="25:45" pos:end="25:97"><literal type="string" pos:start="25:45" pos:end="25:97">"filter limit value too large (%i &gt; 127), clamping\n"</literal></expr></argument>, <argument pos:start="25:100" pos:end="25:124"><expr pos:start="25:100" pos:end="25:124"><name pos:start="25:100" pos:end="25:124"><name pos:start="25:100" pos:end="25:100">s</name><operator pos:start="25:101" pos:end="25:102">-&gt;</operator><name pos:start="25:103" pos:end="25:121">filter_limit_values</name><index pos:start="25:122" pos:end="25:124">[<expr pos:start="25:123" pos:end="25:123"><name pos:start="25:123" pos:end="25:123">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="27:17" pos:end="27:48"><expr pos:start="27:17" pos:end="27:47"><name pos:start="27:17" pos:end="27:41"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:38">filter_limit_values</name><index pos:start="27:39" pos:end="27:41">[<expr pos:start="27:40" pos:end="27:40"><name pos:start="27:40" pos:end="27:40">i</name></expr>]</index></name> <operator pos:start="27:43" pos:end="27:43">=</operator> <literal type="number" pos:start="27:45" pos:end="27:47">127</literal></expr>;</expr_stmt>







    <if_stmt pos:start="35:5" pos:end="41:15"><if pos:start="35:5" pos:end="37:32">if <condition pos:start="35:8" pos:end="35:30">(<expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:17">theora</name></name> <operator pos:start="35:19" pos:end="35:20">&gt;=</operator> <literal type="number" pos:start="35:22" pos:end="35:29">0x030200</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:32"><block_content pos:start="37:9" pos:end="37:32">

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:9">n</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:27"><name pos:start="37:13" pos:end="37:20">get_bits</name><argument_list pos:start="37:21" pos:end="37:27">(<argument pos:start="37:22" pos:end="37:23"><expr pos:start="37:22" pos:end="37:23"><name pos:start="37:22" pos:end="37:23">gb</name></expr></argument>, <argument pos:start="37:26" pos:end="37:26"><expr pos:start="37:26" pos:end="37:26"><literal type="number" pos:start="37:26" pos:end="37:26">4</literal></expr></argument>)</argument_list></call> <operator pos:start="37:29" pos:end="37:29">+</operator> <literal type="number" pos:start="37:31" pos:end="37:31">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="39:5" pos:end="41:15">else<block type="pseudo" pos:start="41:9" pos:end="41:15"><block_content pos:start="41:9" pos:end="41:15">

        <expr_stmt pos:start="41:9" pos:end="41:15"><expr pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:9">n</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <literal type="number" pos:start="41:13" pos:end="41:14">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:33">/* quality threshold table */</comment>

    <for pos:start="45:5" pos:end="47:54">for <control pos:start="45:9" pos:end="45:28">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:23"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <literal type="number" pos:start="45:21" pos:end="45:22">64</literal></expr>;</condition> <incr pos:start="45:25" pos:end="45:27"><expr pos:start="45:25" pos:end="45:27"><name pos:start="45:25" pos:end="45:25">i</name><operator pos:start="45:26" pos:end="45:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:9" pos:end="47:54"><block_content pos:start="47:9" pos:end="47:54">

        <expr_stmt pos:start="47:9" pos:end="47:54"><expr pos:start="47:9" pos:end="47:53"><name pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:32">coded_ac_scale_factor</name><index pos:start="47:33" pos:end="47:35">[<expr pos:start="47:34" pos:end="47:34"><name pos:start="47:34" pos:end="47:34">i</name></expr>]</index></name> <operator pos:start="47:37" pos:end="47:37">=</operator> <call pos:start="47:39" pos:end="47:53"><name pos:start="47:39" pos:end="47:46">get_bits</name><argument_list pos:start="47:47" pos:end="47:53">(<argument pos:start="47:48" pos:end="47:49"><expr pos:start="47:48" pos:end="47:49"><name pos:start="47:48" pos:end="47:49">gb</name></expr></argument>, <argument pos:start="47:52" pos:end="47:52"><expr pos:start="47:52" pos:end="47:52"><name pos:start="47:52" pos:end="47:52">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="51:5" pos:end="57:15"><if pos:start="51:5" pos:end="53:32">if <condition pos:start="51:8" pos:end="51:30">(<expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:17">theora</name></name> <operator pos:start="51:19" pos:end="51:20">&gt;=</operator> <literal type="number" pos:start="51:22" pos:end="51:29">0x030200</literal></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:32"><block_content pos:start="53:9" pos:end="53:32">

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:9">n</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <call pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:20">get_bits</name><argument_list pos:start="53:21" pos:end="53:27">(<argument pos:start="53:22" pos:end="53:23"><expr pos:start="53:22" pos:end="53:23"><name pos:start="53:22" pos:end="53:23">gb</name></expr></argument>, <argument pos:start="53:26" pos:end="53:26"><expr pos:start="53:26" pos:end="53:26"><literal type="number" pos:start="53:26" pos:end="53:26">4</literal></expr></argument>)</argument_list></call> <operator pos:start="53:29" pos:end="53:29">+</operator> <literal type="number" pos:start="53:31" pos:end="53:31">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="55:5" pos:end="57:15">else<block type="pseudo" pos:start="57:9" pos:end="57:15"><block_content pos:start="57:9" pos:end="57:15">

        <expr_stmt pos:start="57:9" pos:end="57:15"><expr pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:9">n</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <literal type="number" pos:start="57:13" pos:end="57:14">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block" pos:start="59:5" pos:end="59:31">/* dc scale factor table */</comment>

    <for pos:start="61:5" pos:end="63:54">for <control pos:start="61:9" pos:end="61:28">(<init pos:start="61:10" pos:end="61:15"><expr pos:start="61:10" pos:end="61:14"><name pos:start="61:10" pos:end="61:10">i</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</init> <condition pos:start="61:17" pos:end="61:23"><expr pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:19">&lt;</operator> <literal type="number" pos:start="61:21" pos:end="61:22">64</literal></expr>;</condition> <incr pos:start="61:25" pos:end="61:27"><expr pos:start="61:25" pos:end="61:27"><name pos:start="61:25" pos:end="61:25">i</name><operator pos:start="61:26" pos:end="61:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="63:9" pos:end="63:54"><block_content pos:start="63:9" pos:end="63:54">

        <expr_stmt pos:start="63:9" pos:end="63:54"><expr pos:start="63:9" pos:end="63:53"><name pos:start="63:9" pos:end="63:35"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:32">coded_dc_scale_factor</name><index pos:start="63:33" pos:end="63:35">[<expr pos:start="63:34" pos:end="63:34"><name pos:start="63:34" pos:end="63:34">i</name></expr>]</index></name> <operator pos:start="63:37" pos:end="63:37">=</operator> <call pos:start="63:39" pos:end="63:53"><name pos:start="63:39" pos:end="63:46">get_bits</name><argument_list pos:start="63:47" pos:end="63:53">(<argument pos:start="63:48" pos:end="63:49"><expr pos:start="63:48" pos:end="63:49"><name pos:start="63:48" pos:end="63:49">gb</name></expr></argument>, <argument pos:start="63:52" pos:end="63:52"><expr pos:start="63:52" pos:end="63:52"><name pos:start="63:52" pos:end="63:52">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="67:5" pos:end="73:21"><if pos:start="67:5" pos:end="69:39">if <condition pos:start="67:8" pos:end="67:30">(<expr pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:17">theora</name></name> <operator pos:start="67:19" pos:end="67:20">&gt;=</operator> <literal type="number" pos:start="67:22" pos:end="67:29">0x030200</literal></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:39"><block_content pos:start="69:9" pos:end="69:39">

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:16">matrices</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <call pos:start="69:20" pos:end="69:34"><name pos:start="69:20" pos:end="69:27">get_bits</name><argument_list pos:start="69:28" pos:end="69:34">(<argument pos:start="69:29" pos:end="69:30"><expr pos:start="69:29" pos:end="69:30"><name pos:start="69:29" pos:end="69:30">gb</name></expr></argument>, <argument pos:start="69:33" pos:end="69:33"><expr pos:start="69:33" pos:end="69:33"><literal type="number" pos:start="69:33" pos:end="69:33">9</literal></expr></argument>)</argument_list></call> <operator pos:start="69:36" pos:end="69:36">+</operator> <literal type="number" pos:start="69:38" pos:end="69:38">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="71:5" pos:end="73:21">else<block type="pseudo" pos:start="73:9" pos:end="73:21"><block_content pos:start="73:9" pos:end="73:21">

        <expr_stmt pos:start="73:9" pos:end="73:21"><expr pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:16">matrices</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <literal type="number" pos:start="73:20" pos:end="73:20">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="77:5" pos:end="206:13"><if pos:start="77:5" pos:end="206:13">if<condition pos:start="77:7" pos:end="77:22">(<expr pos:start="77:8" pos:end="77:21"><name pos:start="77:8" pos:end="77:15">matrices</name> <operator pos:start="77:17" pos:end="77:17">&gt;</operator> <literal type="number" pos:start="77:19" pos:end="77:21">384</literal></expr>)</condition><block pos:start="77:23" pos:end="206:13">{<block_content pos:start="79:9" pos:end="206:13">

        <expr_stmt pos:start="79:9" pos:end="79:73"><expr pos:start="79:9" pos:end="79:72"><call pos:start="79:9" pos:end="79:72"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:72">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:20">avctx</name></expr></argument>, <argument pos:start="79:23" pos:end="79:34"><expr pos:start="79:23" pos:end="79:34"><name pos:start="79:23" pos:end="79:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:37" pos:end="79:71"><expr pos:start="79:37" pos:end="79:71"><literal type="string" pos:start="79:37" pos:end="79:71">"invalid number of base matrixes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>;</return>




    <for pos:start="86:5" pos:end="206:13">for<control pos:start="86:8" pos:end="86:29">(<init pos:start="86:9" pos:end="86:12"><expr pos:start="86:9" pos:end="86:11"><name pos:start="86:9" pos:end="86:9">n</name><operator pos:start="86:10" pos:end="86:10">=</operator><literal type="number" pos:start="86:11" pos:end="86:11">0</literal></expr>;</init> <condition pos:start="86:14" pos:end="86:24"><expr pos:start="86:14" pos:end="86:23"><name pos:start="86:14" pos:end="86:14">n</name><operator pos:start="86:15" pos:end="86:15">&lt;</operator><name pos:start="86:16" pos:end="86:23">matrices</name></expr>;</condition> <incr pos:start="86:26" pos:end="86:28"><expr pos:start="86:26" pos:end="86:28"><name pos:start="86:26" pos:end="86:26">n</name><operator pos:start="86:27" pos:end="86:28">++</operator></expr></incr>)</control><block pos:start="86:30" pos:end="206:13">{<block_content pos:start="88:9" pos:end="206:13">

        <for pos:start="88:9" pos:end="90:50">for <control pos:start="88:13" pos:end="88:32">(<init pos:start="88:14" pos:end="88:19"><expr pos:start="88:14" pos:end="88:18"><name pos:start="88:14" pos:end="88:14">i</name> <operator pos:start="88:16" pos:end="88:16">=</operator> <literal type="number" pos:start="88:18" pos:end="88:18">0</literal></expr>;</init> <condition pos:start="88:21" pos:end="88:27"><expr pos:start="88:21" pos:end="88:26"><name pos:start="88:21" pos:end="88:21">i</name> <operator pos:start="88:23" pos:end="88:23">&lt;</operator> <literal type="number" pos:start="88:25" pos:end="88:26">64</literal></expr>;</condition> <incr pos:start="88:29" pos:end="88:31"><expr pos:start="88:29" pos:end="88:31"><name pos:start="88:29" pos:end="88:29">i</name><operator pos:start="88:30" pos:end="88:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="90:13" pos:end="90:50"><block_content pos:start="90:13" pos:end="90:50">

            <expr_stmt pos:start="90:13" pos:end="90:50"><expr pos:start="90:13" pos:end="90:49"><name pos:start="90:13" pos:end="90:32"><name pos:start="90:13" pos:end="90:13">s</name><operator pos:start="90:14" pos:end="90:15">-&gt;</operator><name pos:start="90:16" pos:end="90:26">base_matrix</name><index pos:start="90:27" pos:end="90:29">[<expr pos:start="90:28" pos:end="90:28"><name pos:start="90:28" pos:end="90:28">n</name></expr>]</index><index pos:start="90:30" pos:end="90:32">[<expr pos:start="90:31" pos:end="90:31"><name pos:start="90:31" pos:end="90:31">i</name></expr>]</index></name><operator pos:start="90:33" pos:end="90:33">=</operator> <call pos:start="90:35" pos:end="90:49"><name pos:start="90:35" pos:end="90:42">get_bits</name><argument_list pos:start="90:43" pos:end="90:49">(<argument pos:start="90:44" pos:end="90:45"><expr pos:start="90:44" pos:end="90:45"><name pos:start="90:44" pos:end="90:45">gb</name></expr></argument>, <argument pos:start="90:48" pos:end="90:48"><expr pos:start="90:48" pos:end="90:48"><literal type="number" pos:start="90:48" pos:end="90:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>




    <for pos:start="95:5" pos:end="206:13">for <control pos:start="95:9" pos:end="95:40">(<init pos:start="95:10" pos:end="95:19"><expr pos:start="95:10" pos:end="95:18"><name pos:start="95:10" pos:end="95:14">inter</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <literal type="number" pos:start="95:18" pos:end="95:18">0</literal></expr>;</init> <condition pos:start="95:21" pos:end="95:31"><expr pos:start="95:21" pos:end="95:30"><name pos:start="95:21" pos:end="95:25">inter</name> <operator pos:start="95:27" pos:end="95:28">&lt;=</operator> <literal type="number" pos:start="95:30" pos:end="95:30">1</literal></expr>;</condition> <incr pos:start="95:33" pos:end="95:39"><expr pos:start="95:33" pos:end="95:39"><name pos:start="95:33" pos:end="95:37">inter</name><operator pos:start="95:38" pos:end="95:39">++</operator></expr></incr>)</control> <block pos:start="95:42" pos:end="206:13">{<block_content pos:start="97:9" pos:end="206:13">

        <for pos:start="97:9" pos:end="206:13">for <control pos:start="97:13" pos:end="97:44">(<init pos:start="97:14" pos:end="97:23"><expr pos:start="97:14" pos:end="97:22"><name pos:start="97:14" pos:end="97:18">plane</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <literal type="number" pos:start="97:22" pos:end="97:22">0</literal></expr>;</init> <condition pos:start="97:25" pos:end="97:35"><expr pos:start="97:25" pos:end="97:34"><name pos:start="97:25" pos:end="97:29">plane</name> <operator pos:start="97:31" pos:end="97:32">&lt;=</operator> <literal type="number" pos:start="97:34" pos:end="97:34">2</literal></expr>;</condition> <incr pos:start="97:37" pos:end="97:43"><expr pos:start="97:37" pos:end="97:43"><name pos:start="97:37" pos:end="97:41">plane</name><operator pos:start="97:42" pos:end="97:43">++</operator></expr></incr>)</control> <block pos:start="97:46" pos:end="206:13">{<block_content pos:start="99:13" pos:end="206:13">

            <decl_stmt pos:start="99:13" pos:end="99:25"><decl pos:start="99:13" pos:end="99:24"><type pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:15">int</name></type> <name pos:start="99:17" pos:end="99:21">newqr</name><init pos:start="99:22" pos:end="99:24">= <expr pos:start="99:24" pos:end="99:24"><literal type="number" pos:start="99:24" pos:end="99:24">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="101:13" pos:end="103:38"><if pos:start="101:13" pos:end="103:38">if <condition pos:start="101:16" pos:end="101:35">(<expr pos:start="101:17" pos:end="101:34"><name pos:start="101:17" pos:end="101:21">inter</name> <operator pos:start="101:23" pos:end="101:24">||</operator> <name pos:start="101:26" pos:end="101:30">plane</name> <operator pos:start="101:32" pos:end="101:32">&gt;</operator> <literal type="number" pos:start="101:34" pos:end="101:34">0</literal></expr>)</condition><block type="pseudo" pos:start="103:17" pos:end="103:38"><block_content pos:start="103:17" pos:end="103:38">

                <expr_stmt pos:start="103:17" pos:end="103:38"><expr pos:start="103:17" pos:end="103:37"><name pos:start="103:17" pos:end="103:21">newqr</name> <operator pos:start="103:23" pos:end="103:23">=</operator> <call pos:start="103:25" pos:end="103:37"><name pos:start="103:25" pos:end="103:33">get_bits1</name><argument_list pos:start="103:34" pos:end="103:37">(<argument pos:start="103:35" pos:end="103:36"><expr pos:start="103:35" pos:end="103:36"><name pos:start="103:35" pos:end="103:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="105:13" pos:end="206:13"><if pos:start="105:13" pos:end="206:13">if <condition pos:start="105:16" pos:end="105:23">(<expr pos:start="105:17" pos:end="105:22"><operator pos:start="105:17" pos:end="105:17">!</operator><name pos:start="105:18" pos:end="105:22">newqr</name></expr>)</condition> <block pos:start="105:25" pos:end="206:13">{<block_content pos:start="107:17" pos:end="206:13">

                <decl_stmt pos:start="107:17" pos:end="107:29"><decl pos:start="107:17" pos:end="107:23"><type pos:start="107:17" pos:end="107:19"><name pos:start="107:17" pos:end="107:19">int</name></type> <name pos:start="107:21" pos:end="107:23">qtj</name></decl>, <decl pos:start="107:26" pos:end="107:28"><type ref="prev" pos:start="107:17" pos:end="107:19"/><name pos:start="107:26" pos:end="107:28">plj</name></decl>;</decl_stmt>

                <if_stmt pos:start="109:17" pos:end="128:13"><if pos:start="109:17" pos:end="115:17">if<condition pos:start="109:19" pos:end="109:42">(<expr pos:start="109:20" pos:end="109:41"><name pos:start="109:20" pos:end="109:24">inter</name> <operator pos:start="109:26" pos:end="109:27">&amp;&amp;</operator> <call pos:start="109:29" pos:end="109:41"><name pos:start="109:29" pos:end="109:37">get_bits1</name><argument_list pos:start="109:38" pos:end="109:41">(<argument pos:start="109:39" pos:end="109:40"><expr pos:start="109:39" pos:end="109:40"><name pos:start="109:39" pos:end="109:40">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="109:43" pos:end="115:17">{<block_content pos:start="111:21" pos:end="113:32">

                    <expr_stmt pos:start="111:21" pos:end="111:28"><expr pos:start="111:21" pos:end="111:27"><name pos:start="111:21" pos:end="111:23">qtj</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <literal type="number" pos:start="111:27" pos:end="111:27">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="113:21" pos:end="113:32"><expr pos:start="113:21" pos:end="113:31"><name pos:start="113:21" pos:end="113:23">plj</name> <operator pos:start="113:25" pos:end="113:25">=</operator> <name pos:start="113:27" pos:end="113:31">plane</name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="115:18" pos:end="128:13">else<block pos:start="115:22" pos:end="128:13">{<block_content pos:start="117:21" pos:end="126:97">

                    <expr_stmt pos:start="117:21" pos:end="117:51"><expr pos:start="117:21" pos:end="117:50"><name pos:start="117:21" pos:end="117:23">qtj</name><operator pos:start="117:24" pos:end="117:24">=</operator> <operator pos:start="117:26" pos:end="117:26">(</operator><literal type="number" pos:start="117:27" pos:end="117:27">3</literal><operator pos:start="117:28" pos:end="117:28">*</operator><name pos:start="117:29" pos:end="117:33">inter</name> <operator pos:start="117:35" pos:end="117:35">+</operator> <name pos:start="117:37" pos:end="117:41">plane</name> <operator pos:start="117:43" pos:end="117:43">-</operator> <literal type="number" pos:start="117:45" pos:end="117:45">1</literal><operator pos:start="117:46" pos:end="117:46">)</operator> <operator pos:start="117:48" pos:end="117:48">/</operator> <literal type="number" pos:start="117:50" pos:end="117:50">3</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:41"><expr pos:start="119:21" pos:end="119:40"><name pos:start="119:21" pos:end="119:23">plj</name><operator pos:start="119:24" pos:end="119:24">=</operator> <operator pos:start="119:26" pos:end="119:26">(</operator><name pos:start="119:27" pos:end="119:31">plane</name> <operator pos:start="119:33" pos:end="119:33">+</operator> <literal type="number" pos:start="119:35" pos:end="119:35">2</literal><operator pos:start="119:36" pos:end="119:36">)</operator> <operator pos:start="119:38" pos:end="119:38">%</operator> <literal type="number" pos:start="119:40" pos:end="119:40">3</literal></expr>;</expr_stmt>


                <expr_stmt pos:start="122:17" pos:end="122:65"><expr pos:start="122:17" pos:end="122:64"><name pos:start="122:17" pos:end="122:41"><name pos:start="122:17" pos:end="122:17">s</name><operator pos:start="122:18" pos:end="122:19">-&gt;</operator><name pos:start="122:20" pos:end="122:27">qr_count</name><index pos:start="122:28" pos:end="122:34">[<expr pos:start="122:29" pos:end="122:33"><name pos:start="122:29" pos:end="122:33">inter</name></expr>]</index><index pos:start="122:35" pos:end="122:41">[<expr pos:start="122:36" pos:end="122:40"><name pos:start="122:36" pos:end="122:40">plane</name></expr>]</index></name><operator pos:start="122:42" pos:end="122:42">=</operator> <name pos:start="122:44" pos:end="122:64"><name pos:start="122:44" pos:end="122:44">s</name><operator pos:start="122:45" pos:end="122:46">-&gt;</operator><name pos:start="122:47" pos:end="122:54">qr_count</name><index pos:start="122:55" pos:end="122:59">[<expr pos:start="122:56" pos:end="122:58"><name pos:start="122:56" pos:end="122:58">qtj</name></expr>]</index><index pos:start="122:60" pos:end="122:64">[<expr pos:start="122:61" pos:end="122:63"><name pos:start="122:61" pos:end="122:63">plj</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="124:17" pos:end="124:97"><expr pos:start="124:17" pos:end="124:96"><call pos:start="124:17" pos:end="124:96"><name pos:start="124:17" pos:end="124:22">memcpy</name><argument_list pos:start="124:23" pos:end="124:96">(<argument pos:start="124:24" pos:end="124:47"><expr pos:start="124:24" pos:end="124:47"><name pos:start="124:24" pos:end="124:47"><name pos:start="124:24" pos:end="124:24">s</name><operator pos:start="124:25" pos:end="124:26">-&gt;</operator><name pos:start="124:27" pos:end="124:33">qr_size</name><index pos:start="124:34" pos:end="124:40">[<expr pos:start="124:35" pos:end="124:39"><name pos:start="124:35" pos:end="124:39">inter</name></expr>]</index><index pos:start="124:41" pos:end="124:47">[<expr pos:start="124:42" pos:end="124:46"><name pos:start="124:42" pos:end="124:46">plane</name></expr>]</index></name></expr></argument>, <argument pos:start="124:50" pos:end="124:69"><expr pos:start="124:50" pos:end="124:69"><name pos:start="124:50" pos:end="124:69"><name pos:start="124:50" pos:end="124:50">s</name><operator pos:start="124:51" pos:end="124:52">-&gt;</operator><name pos:start="124:53" pos:end="124:59">qr_size</name><index pos:start="124:60" pos:end="124:64">[<expr pos:start="124:61" pos:end="124:63"><name pos:start="124:61" pos:end="124:63">qtj</name></expr>]</index><index pos:start="124:65" pos:end="124:69">[<expr pos:start="124:66" pos:end="124:68"><name pos:start="124:66" pos:end="124:68">plj</name></expr>]</index></name></expr></argument>, <argument pos:start="124:72" pos:end="124:95"><expr pos:start="124:72" pos:end="124:95"><sizeof pos:start="124:72" pos:end="124:95">sizeof<argument_list pos:start="124:78" pos:end="124:95">(<argument pos:start="124:79" pos:end="124:94"><expr pos:start="124:79" pos:end="124:94"><name pos:start="124:79" pos:end="124:94"><name pos:start="124:79" pos:end="124:79">s</name><operator pos:start="124:80" pos:end="124:81">-&gt;</operator><name pos:start="124:82" pos:end="124:88">qr_size</name><index pos:start="124:89" pos:end="124:91">[<expr pos:start="124:90" pos:end="124:90"><literal type="number" pos:start="124:90" pos:end="124:90">0</literal></expr>]</index><index pos:start="124:92" pos:end="124:94">[<expr pos:start="124:93" pos:end="124:93"><literal type="number" pos:start="124:93" pos:end="124:93">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="126:17" pos:end="126:97"><expr pos:start="126:17" pos:end="126:96"><call pos:start="126:17" pos:end="126:96"><name pos:start="126:17" pos:end="126:22">memcpy</name><argument_list pos:start="126:23" pos:end="126:96">(<argument pos:start="126:24" pos:end="126:47"><expr pos:start="126:24" pos:end="126:47"><name pos:start="126:24" pos:end="126:47"><name pos:start="126:24" pos:end="126:24">s</name><operator pos:start="126:25" pos:end="126:26">-&gt;</operator><name pos:start="126:27" pos:end="126:33">qr_base</name><index pos:start="126:34" pos:end="126:40">[<expr pos:start="126:35" pos:end="126:39"><name pos:start="126:35" pos:end="126:39">inter</name></expr>]</index><index pos:start="126:41" pos:end="126:47">[<expr pos:start="126:42" pos:end="126:46"><name pos:start="126:42" pos:end="126:46">plane</name></expr>]</index></name></expr></argument>, <argument pos:start="126:50" pos:end="126:69"><expr pos:start="126:50" pos:end="126:69"><name pos:start="126:50" pos:end="126:69"><name pos:start="126:50" pos:end="126:50">s</name><operator pos:start="126:51" pos:end="126:52">-&gt;</operator><name pos:start="126:53" pos:end="126:59">qr_base</name><index pos:start="126:60" pos:end="126:64">[<expr pos:start="126:61" pos:end="126:63"><name pos:start="126:61" pos:end="126:63">qtj</name></expr>]</index><index pos:start="126:65" pos:end="126:69">[<expr pos:start="126:66" pos:end="126:68"><name pos:start="126:66" pos:end="126:68">plj</name></expr>]</index></name></expr></argument>, <argument pos:start="126:72" pos:end="126:95"><expr pos:start="126:72" pos:end="126:95"><sizeof pos:start="126:72" pos:end="126:95">sizeof<argument_list pos:start="126:78" pos:end="126:95">(<argument pos:start="126:79" pos:end="126:94"><expr pos:start="126:79" pos:end="126:94"><name pos:start="126:79" pos:end="126:94"><name pos:start="126:79" pos:end="126:79">s</name><operator pos:start="126:80" pos:end="126:81">-&gt;</operator><name pos:start="126:82" pos:end="126:88">qr_base</name><index pos:start="126:89" pos:end="126:91">[<expr pos:start="126:90" pos:end="126:90"><literal type="number" pos:start="126:90" pos:end="126:90">0</literal></expr>]</index><index pos:start="126:92" pos:end="126:94">[<expr pos:start="126:93" pos:end="126:93"><literal type="number" pos:start="126:93" pos:end="126:93">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt> <if_stmt pos:start="128:15" pos:end="206:13"><else pos:start="128:15" pos:end="206:13">else <block pos:start="128:20" pos:end="206:13">{<block_content pos:start="130:17" pos:end="206:13">

                <decl_stmt pos:start="130:17" pos:end="130:27"><decl pos:start="130:17" pos:end="130:26"><type pos:start="130:17" pos:end="130:19"><name pos:start="130:17" pos:end="130:19">int</name></type> <name pos:start="130:21" pos:end="130:23">qri</name><init pos:start="130:24" pos:end="130:26">= <expr pos:start="130:26" pos:end="130:26"><literal type="number" pos:start="130:26" pos:end="130:26">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="132:17" pos:end="132:27"><decl pos:start="132:17" pos:end="132:26"><type pos:start="132:17" pos:end="132:19"><name pos:start="132:17" pos:end="132:19">int</name></type> <name pos:start="132:21" pos:end="132:22">qi</name> <init pos:start="132:24" pos:end="132:26">= <expr pos:start="132:26" pos:end="132:26"><literal type="number" pos:start="132:26" pos:end="132:26">0</literal></expr></init></decl>;</decl_stmt>



                <for pos:start="136:17" pos:end="206:13">for<control pos:start="136:20" pos:end="136:23">(<init pos:start="136:21" pos:end="136:21">;</init><condition pos:start="136:22" pos:end="136:22">;</condition><incr/>)</control><block pos:start="136:24" pos:end="206:13">{<block_content pos:start="138:21" pos:end="206:13">

                    <expr_stmt pos:start="138:21" pos:end="138:59"><expr pos:start="138:21" pos:end="138:58"><name pos:start="138:21" pos:end="138:21">i</name><operator pos:start="138:22" pos:end="138:22">=</operator> <call pos:start="138:24" pos:end="138:58"><name pos:start="138:24" pos:end="138:31">get_bits</name><argument_list pos:start="138:32" pos:end="138:58">(<argument pos:start="138:33" pos:end="138:34"><expr pos:start="138:33" pos:end="138:34"><name pos:start="138:33" pos:end="138:34">gb</name></expr></argument>, <argument pos:start="138:37" pos:end="138:57"><expr pos:start="138:37" pos:end="138:57"><call pos:start="138:37" pos:end="138:55"><name pos:start="138:37" pos:end="138:43">av_log2</name><argument_list pos:start="138:44" pos:end="138:55">(<argument pos:start="138:45" pos:end="138:54"><expr pos:start="138:45" pos:end="138:54"><name pos:start="138:45" pos:end="138:52">matrices</name><operator pos:start="138:53" pos:end="138:53">-</operator><literal type="number" pos:start="138:54" pos:end="138:54">1</literal></expr></argument>)</argument_list></call><operator pos:start="138:56" pos:end="138:56">+</operator><literal type="number" pos:start="138:57" pos:end="138:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="140:21" pos:end="206:13"><if pos:start="140:21" pos:end="206:13">if<condition pos:start="140:23" pos:end="140:36">(<expr pos:start="140:24" pos:end="140:35"><name pos:start="140:24" pos:end="140:24">i</name><operator pos:start="140:25" pos:end="140:26">&gt;=</operator> <name pos:start="140:28" pos:end="140:35">matrices</name></expr>)</condition><block pos:start="140:37" pos:end="206:13">{<block_content pos:start="142:25" pos:end="206:13">

                        <expr_stmt pos:start="142:25" pos:end="142:83"><expr pos:start="142:25" pos:end="142:82"><call pos:start="142:25" pos:end="142:82"><name pos:start="142:25" pos:end="142:30">av_log</name><argument_list pos:start="142:31" pos:end="142:82">(<argument pos:start="142:32" pos:end="142:36"><expr pos:start="142:32" pos:end="142:36"><name pos:start="142:32" pos:end="142:36">avctx</name></expr></argument>, <argument pos:start="142:39" pos:end="142:50"><expr pos:start="142:39" pos:end="142:50"><name pos:start="142:39" pos:end="142:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="142:53" pos:end="142:81"><expr pos:start="142:53" pos:end="142:81"><literal type="string" pos:start="142:53" pos:end="142:81">"invalid base matrix index\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="144:25" pos:end="144:34">return <expr pos:start="144:32" pos:end="144:33"><operator pos:start="144:32" pos:end="144:32">-</operator><literal type="number" pos:start="144:33" pos:end="144:33">1</literal></expr>;</return>


                    <expr_stmt pos:start="147:21" pos:end="147:53"><expr pos:start="147:21" pos:end="147:52"><name pos:start="147:21" pos:end="147:49"><name pos:start="147:21" pos:end="147:21">s</name><operator pos:start="147:22" pos:end="147:23">-&gt;</operator><name pos:start="147:24" pos:end="147:30">qr_base</name><index pos:start="147:31" pos:end="147:37">[<expr pos:start="147:32" pos:end="147:36"><name pos:start="147:32" pos:end="147:36">inter</name></expr>]</index><index pos:start="147:38" pos:end="147:44">[<expr pos:start="147:39" pos:end="147:43"><name pos:start="147:39" pos:end="147:43">plane</name></expr>]</index><index pos:start="147:45" pos:end="147:49">[<expr pos:start="147:46" pos:end="147:48"><name pos:start="147:46" pos:end="147:48">qri</name></expr>]</index></name><operator pos:start="147:50" pos:end="147:50">=</operator> <name pos:start="147:52" pos:end="147:52">i</name></expr>;</expr_stmt>

                    <if_stmt pos:start="149:21" pos:end="151:30"><if pos:start="149:21" pos:end="151:30">if<condition pos:start="149:23" pos:end="149:32">(<expr pos:start="149:24" pos:end="149:31"><name pos:start="149:24" pos:end="149:25">qi</name> <operator pos:start="149:27" pos:end="149:28">&gt;=</operator> <literal type="number" pos:start="149:30" pos:end="149:31">63</literal></expr>)</condition><block type="pseudo" pos:start="151:25" pos:end="151:30"><block_content pos:start="151:25" pos:end="151:30">

                        <break pos:start="151:25" pos:end="151:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="153:21" pos:end="153:59"><expr pos:start="153:21" pos:end="153:58"><name pos:start="153:21" pos:end="153:21">i</name> <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="153:54"><name pos:start="153:25" pos:end="153:32">get_bits</name><argument_list pos:start="153:33" pos:end="153:54">(<argument pos:start="153:34" pos:end="153:35"><expr pos:start="153:34" pos:end="153:35"><name pos:start="153:34" pos:end="153:35">gb</name></expr></argument>, <argument pos:start="153:38" pos:end="153:53"><expr pos:start="153:38" pos:end="153:53"><call pos:start="153:38" pos:end="153:51"><name pos:start="153:38" pos:end="153:44">av_log2</name><argument_list pos:start="153:45" pos:end="153:51">(<argument pos:start="153:46" pos:end="153:50"><expr pos:start="153:46" pos:end="153:50"><literal type="number" pos:start="153:46" pos:end="153:48">63</literal><operator pos:start="153:48" pos:end="153:48">-</operator><name pos:start="153:49" pos:end="153:50">qi</name></expr></argument>)</argument_list></call><operator pos:start="153:52" pos:end="153:52">+</operator><literal type="number" pos:start="153:53" pos:end="153:53">1</literal></expr></argument>)</argument_list></call> <operator pos:start="153:56" pos:end="153:56">+</operator> <literal type="number" pos:start="153:58" pos:end="153:58">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="155:21" pos:end="155:55"><expr pos:start="155:21" pos:end="155:54"><name pos:start="155:21" pos:end="155:51"><name pos:start="155:21" pos:end="155:21">s</name><operator pos:start="155:22" pos:end="155:23">-&gt;</operator><name pos:start="155:24" pos:end="155:30">qr_size</name><index pos:start="155:31" pos:end="155:37">[<expr pos:start="155:32" pos:end="155:36"><name pos:start="155:32" pos:end="155:36">inter</name></expr>]</index><index pos:start="155:38" pos:end="155:44">[<expr pos:start="155:39" pos:end="155:43"><name pos:start="155:39" pos:end="155:43">plane</name></expr>]</index><index pos:start="155:45" pos:end="155:51">[<expr pos:start="155:46" pos:end="155:50"><name pos:start="155:46" pos:end="155:48">qri</name><operator pos:start="155:49" pos:end="155:50">++</operator></expr>]</index></name><operator pos:start="155:52" pos:end="155:52">=</operator> <name pos:start="155:54" pos:end="155:54">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:28"><expr pos:start="157:21" pos:end="157:27"><name pos:start="157:21" pos:end="157:22">qi</name> <operator pos:start="157:24" pos:end="157:25">+=</operator> <name pos:start="157:27" pos:end="157:27">i</name></expr>;</expr_stmt>




                <if_stmt pos:start="162:17" pos:end="206:13"><if pos:start="162:17" pos:end="206:13">if <condition pos:start="162:20" pos:end="162:28">(<expr pos:start="162:21" pos:end="162:27"><name pos:start="162:21" pos:end="162:22">qi</name> <operator pos:start="162:24" pos:end="162:24">&gt;</operator> <literal type="number" pos:start="162:26" pos:end="162:27">63</literal></expr>)</condition> <block pos:start="162:30" pos:end="206:13">{<block_content pos:start="164:21" pos:end="206:13">

                    <expr_stmt pos:start="164:21" pos:end="164:76"><expr pos:start="164:21" pos:end="164:75"><call pos:start="164:21" pos:end="164:75"><name pos:start="164:21" pos:end="164:26">av_log</name><argument_list pos:start="164:27" pos:end="164:75">(<argument pos:start="164:28" pos:end="164:32"><expr pos:start="164:28" pos:end="164:32"><name pos:start="164:28" pos:end="164:32">avctx</name></expr></argument>, <argument pos:start="164:35" pos:end="164:46"><expr pos:start="164:35" pos:end="164:46"><name pos:start="164:35" pos:end="164:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="164:49" pos:end="164:70"><expr pos:start="164:49" pos:end="164:70"><literal type="string" pos:start="164:49" pos:end="164:70">"invalid qi %d &gt; 63\n"</literal></expr></argument>, <argument pos:start="164:73" pos:end="164:74"><expr pos:start="164:73" pos:end="164:74"><name pos:start="164:73" pos:end="164:74">qi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="166:21" pos:end="166:30">return <expr pos:start="166:28" pos:end="166:29"><operator pos:start="166:28" pos:end="166:28">-</operator><literal type="number" pos:start="166:29" pos:end="166:29">1</literal></expr>;</return>


                <expr_stmt pos:start="169:17" pos:end="169:47"><expr pos:start="169:17" pos:end="169:46"><name pos:start="169:17" pos:end="169:41"><name pos:start="169:17" pos:end="169:17">s</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:27">qr_count</name><index pos:start="169:28" pos:end="169:34">[<expr pos:start="169:29" pos:end="169:33"><name pos:start="169:29" pos:end="169:33">inter</name></expr>]</index><index pos:start="169:35" pos:end="169:41">[<expr pos:start="169:36" pos:end="169:40"><name pos:start="169:36" pos:end="169:40">plane</name></expr>]</index></name><operator pos:start="169:42" pos:end="169:42">=</operator> <name pos:start="169:44" pos:end="169:46">qri</name></expr>;</expr_stmt>






    <comment type="block" pos:start="176:5" pos:end="176:24">/* Huffman tables */</comment>

    <for pos:start="178:5" pos:end="206:13">for <control pos:start="178:9" pos:end="178:43">(<init pos:start="178:10" pos:end="178:20"><expr pos:start="178:10" pos:end="178:19"><name pos:start="178:10" pos:end="178:15"><name pos:start="178:10" pos:end="178:10">s</name><operator pos:start="178:11" pos:end="178:12">-&gt;</operator><name pos:start="178:13" pos:end="178:15">hti</name></name> <operator pos:start="178:17" pos:end="178:17">=</operator> <literal type="number" pos:start="178:19" pos:end="178:19">0</literal></expr>;</init> <condition pos:start="178:22" pos:end="178:33"><expr pos:start="178:22" pos:end="178:32"><name pos:start="178:22" pos:end="178:27"><name pos:start="178:22" pos:end="178:22">s</name><operator pos:start="178:23" pos:end="178:24">-&gt;</operator><name pos:start="178:25" pos:end="178:27">hti</name></name> <operator pos:start="178:29" pos:end="178:29">&lt;</operator> <literal type="number" pos:start="178:31" pos:end="178:32">80</literal></expr>;</condition> <incr pos:start="178:35" pos:end="178:42"><expr pos:start="178:35" pos:end="178:42"><name pos:start="178:35" pos:end="178:40"><name pos:start="178:35" pos:end="178:35">s</name><operator pos:start="178:36" pos:end="178:37">-&gt;</operator><name pos:start="178:38" pos:end="178:40">hti</name></name><operator pos:start="178:41" pos:end="178:42">++</operator></expr></incr>)</control> <block pos:start="178:45" pos:end="206:13">{<block_content pos:start="180:9" pos:end="206:13">

        <expr_stmt pos:start="180:9" pos:end="180:23"><expr pos:start="180:9" pos:end="180:22"><name pos:start="180:9" pos:end="180:18"><name pos:start="180:9" pos:end="180:9">s</name><operator pos:start="180:10" pos:end="180:11">-&gt;</operator><name pos:start="180:12" pos:end="180:18">entries</name></name> <operator pos:start="180:20" pos:end="180:20">=</operator> <literal type="number" pos:start="180:22" pos:end="180:22">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="182:9" pos:end="182:30"><expr pos:start="182:9" pos:end="182:29"><name pos:start="182:9" pos:end="182:25"><name pos:start="182:9" pos:end="182:9">s</name><operator pos:start="182:10" pos:end="182:11">-&gt;</operator><name pos:start="182:12" pos:end="182:25">huff_code_size</name></name> <operator pos:start="182:27" pos:end="182:27">=</operator> <literal type="number" pos:start="182:29" pos:end="182:29">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="184:9" pos:end="206:13"><if pos:start="184:9" pos:end="206:13">if <condition pos:start="184:12" pos:end="184:27">(<expr pos:start="184:13" pos:end="184:26"><operator pos:start="184:13" pos:end="184:13">!</operator><call pos:start="184:14" pos:end="184:26"><name pos:start="184:14" pos:end="184:22">get_bits1</name><argument_list pos:start="184:23" pos:end="184:26">(<argument pos:start="184:24" pos:end="184:25"><expr pos:start="184:24" pos:end="184:25"><name pos:start="184:24" pos:end="184:25">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="184:29" pos:end="206:13">{<block_content pos:start="186:13" pos:end="206:13">

            <expr_stmt pos:start="186:13" pos:end="186:25"><expr pos:start="186:13" pos:end="186:24"><name pos:start="186:13" pos:end="186:20"><name pos:start="186:13" pos:end="186:13">s</name><operator pos:start="186:14" pos:end="186:15">-&gt;</operator><name pos:start="186:16" pos:end="186:20">hbits</name></name> <operator pos:start="186:22" pos:end="186:22">=</operator> <literal type="number" pos:start="186:24" pos:end="186:24">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="188:13" pos:end="190:26"><if pos:start="188:13" pos:end="190:26">if<condition pos:start="188:15" pos:end="188:44">(<expr pos:start="188:16" pos:end="188:43"><call pos:start="188:16" pos:end="188:43"><name pos:start="188:16" pos:end="188:32">read_huffman_tree</name><argument_list pos:start="188:33" pos:end="188:43">(<argument pos:start="188:34" pos:end="188:38"><expr pos:start="188:34" pos:end="188:38"><name pos:start="188:34" pos:end="188:38">avctx</name></expr></argument>, <argument pos:start="188:41" pos:end="188:42"><expr pos:start="188:41" pos:end="188:42"><name pos:start="188:41" pos:end="188:42">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="190:17" pos:end="190:26"><block_content pos:start="190:17" pos:end="190:26">

                <return pos:start="190:17" pos:end="190:26">return <expr pos:start="190:24" pos:end="190:25"><operator pos:start="190:24" pos:end="190:24">-</operator><literal type="number" pos:start="190:25" pos:end="190:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="192:13" pos:end="192:25"><expr pos:start="192:13" pos:end="192:24"><name pos:start="192:13" pos:end="192:20"><name pos:start="192:13" pos:end="192:13">s</name><operator pos:start="192:14" pos:end="192:15">-&gt;</operator><name pos:start="192:16" pos:end="192:20">hbits</name></name> <operator pos:start="192:22" pos:end="192:22">=</operator> <literal type="number" pos:start="192:24" pos:end="192:24">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="194:13" pos:end="196:26"><if pos:start="194:13" pos:end="196:26">if<condition pos:start="194:15" pos:end="194:44">(<expr pos:start="194:16" pos:end="194:43"><call pos:start="194:16" pos:end="194:43"><name pos:start="194:16" pos:end="194:32">read_huffman_tree</name><argument_list pos:start="194:33" pos:end="194:43">(<argument pos:start="194:34" pos:end="194:38"><expr pos:start="194:34" pos:end="194:38"><name pos:start="194:34" pos:end="194:38">avctx</name></expr></argument>, <argument pos:start="194:41" pos:end="194:42"><expr pos:start="194:41" pos:end="194:42"><name pos:start="194:41" pos:end="194:42">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="196:17" pos:end="196:26"><block_content pos:start="196:17" pos:end="196:26">

                <return pos:start="196:17" pos:end="196:26">return <expr pos:start="196:24" pos:end="196:25"><operator pos:start="196:24" pos:end="196:24">-</operator><literal type="number" pos:start="196:25" pos:end="196:25">1</literal></expr>;</return></block_content></block></if></if_stmt>





    <expr_stmt pos:start="202:5" pos:end="202:25"><expr pos:start="202:5" pos:end="202:24"><name pos:start="202:5" pos:end="202:20"><name pos:start="202:5" pos:end="202:5">s</name><operator pos:start="202:6" pos:end="202:7">-&gt;</operator><name pos:start="202:8" pos:end="202:20">theora_tables</name></name> <operator pos:start="202:22" pos:end="202:22">=</operator> <literal type="number" pos:start="202:24" pos:end="202:24">1</literal></expr>;</expr_stmt>



    <return pos:start="206:5" pos:end="206:13">return <expr pos:start="206:12" pos:end="206:12"><literal type="number" pos:start="206:12" pos:end="206:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
