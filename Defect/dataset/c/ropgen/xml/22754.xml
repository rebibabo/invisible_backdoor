<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22754.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">vhost_net_set_vnet_endian</name><parameter_list pos:start="1:37" pos:end="3:46">(<parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:49">VirtIODevice</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">dev</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:76"><decl pos:start="1:57" pos:end="1:76"><type pos:start="1:57" pos:end="1:76"><name pos:start="1:57" pos:end="1:70">NetClientState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:76">peer</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:45"><decl pos:start="3:38" pos:end="3:45"><type pos:start="3:38" pos:end="3:45"><name pos:start="3:38" pos:end="3:41">bool</name></type> <name pos:start="3:43" pos:end="3:45">set</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="39:1">{<block_content pos:start="7:5" pos:end="37:13">

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">r</name> <init pos:start="7:11" pos:end="7:13">= <expr pos:start="7:13" pos:end="7:13"><literal type="number" pos:start="7:13" pos:end="7:13">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="33:5"><if pos:start="11:5" pos:end="23:5">if <condition pos:start="11:8" pos:end="13:75">(<expr pos:start="11:9" pos:end="13:74"><call pos:start="11:9" pos:end="11:51"><name pos:start="11:9" pos:end="11:26">virtio_has_feature</name><argument_list pos:start="11:27" pos:end="11:51">(<argument pos:start="11:28" pos:end="11:30"><expr pos:start="11:28" pos:end="11:30"><name pos:start="11:28" pos:end="11:30">dev</name></expr></argument>, <argument pos:start="11:33" pos:end="11:50"><expr pos:start="11:33" pos:end="11:50"><name pos:start="11:33" pos:end="11:50">VIRTIO_F_VERSION_1</name></expr></argument>)</argument_list></call> <operator pos:start="11:53" pos:end="11:54">||</operator>

        <operator pos:start="13:9" pos:end="13:9">(</operator><call pos:start="13:10" pos:end="13:43"><name pos:start="13:10" pos:end="13:38">virtio_legacy_is_cross_endian</name><argument_list pos:start="13:39" pos:end="13:43">(<argument pos:start="13:40" pos:end="13:42"><expr pos:start="13:40" pos:end="13:42"><name pos:start="13:40" pos:end="13:42">dev</name></expr></argument>)</argument_list></call> <operator pos:start="13:45" pos:end="13:46">&amp;&amp;</operator> <operator pos:start="13:48" pos:end="13:48">!</operator><call pos:start="13:49" pos:end="13:73"><name pos:start="13:49" pos:end="13:68">virtio_is_big_endian</name><argument_list pos:start="13:69" pos:end="13:73">(<argument pos:start="13:70" pos:end="13:72"><expr pos:start="13:70" pos:end="13:72"><name pos:start="13:70" pos:end="13:72">dev</name></expr></argument>)</argument_list></call><operator pos:start="13:74" pos:end="13:74">)</operator></expr>)</condition> <block pos:start="13:77" pos:end="23:5">{<block_content pos:start="15:9" pos:end="21:9">

        <expr_stmt pos:start="15:9" pos:end="15:40"><expr pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:9">r</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <call pos:start="15:13" pos:end="15:39"><name pos:start="15:13" pos:end="15:28">qemu_set_vnet_le</name><argument_list pos:start="15:29" pos:end="15:39">(<argument pos:start="15:30" pos:end="15:33"><expr pos:start="15:30" pos:end="15:33"><name pos:start="15:30" pos:end="15:33">peer</name></expr></argument>, <argument pos:start="15:36" pos:end="15:38"><expr pos:start="15:36" pos:end="15:38"><name pos:start="15:36" pos:end="15:38">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="21:9"><if pos:start="17:9" pos:end="21:9">if <condition pos:start="17:12" pos:end="17:14">(<expr pos:start="17:13" pos:end="17:13"><name pos:start="17:13" pos:end="17:13">r</name></expr>)</condition> <block pos:start="17:16" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:69">

            <expr_stmt pos:start="19:13" pos:end="19:69"><expr pos:start="19:13" pos:end="19:68"><call pos:start="19:13" pos:end="19:68"><name pos:start="19:13" pos:end="19:24">error_report</name><argument_list pos:start="19:25" pos:end="19:68">(<argument pos:start="19:26" pos:end="19:67"><expr pos:start="19:26" pos:end="19:67"><literal type="string" pos:start="19:26" pos:end="19:67">"backend does not support LE vnet headers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="23:7" pos:end="33:5">else if <condition pos:start="23:15" pos:end="23:50">(<expr pos:start="23:16" pos:end="23:49"><call pos:start="23:16" pos:end="23:49"><name pos:start="23:16" pos:end="23:44">virtio_legacy_is_cross_endian</name><argument_list pos:start="23:45" pos:end="23:49">(<argument pos:start="23:46" pos:end="23:48"><expr pos:start="23:46" pos:end="23:48"><name pos:start="23:46" pos:end="23:48">dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:52" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:9">

        <expr_stmt pos:start="25:9" pos:end="25:40"><expr pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:9">r</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <call pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:28">qemu_set_vnet_be</name><argument_list pos:start="25:29" pos:end="25:39">(<argument pos:start="25:30" pos:end="25:33"><expr pos:start="25:30" pos:end="25:33"><name pos:start="25:30" pos:end="25:33">peer</name></expr></argument>, <argument pos:start="25:36" pos:end="25:38"><expr pos:start="25:36" pos:end="25:38"><name pos:start="25:36" pos:end="25:38">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:14">(<expr pos:start="27:13" pos:end="27:13"><name pos:start="27:13" pos:end="27:13">r</name></expr>)</condition> <block pos:start="27:16" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:69">

            <expr_stmt pos:start="29:13" pos:end="29:69"><expr pos:start="29:13" pos:end="29:68"><call pos:start="29:13" pos:end="29:68"><name pos:start="29:13" pos:end="29:24">error_report</name><argument_list pos:start="29:25" pos:end="29:68">(<argument pos:start="29:26" pos:end="29:67"><expr pos:start="29:26" pos:end="29:67"><literal type="string" pos:start="29:26" pos:end="29:67">"backend does not support BE vnet headers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="37:5" pos:end="37:13">return <expr pos:start="37:12" pos:end="37:12"><name pos:start="37:12" pos:end="37:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
