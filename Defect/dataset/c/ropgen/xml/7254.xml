<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7254.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:27">ppc_slb_invalidate_all</name> <parameter_list pos:start="1:29" pos:end="1:46">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:40">CPUPPCState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:26">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22">target_phys_addr_t</name></type> <name pos:start="5:24" pos:end="5:30">sr_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:18">tmp64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>, <decl pos:start="9:12" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:24">do_invalidate</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:17">do_invalidate</name> <operator pos:start="13:19" pos:end="13:19">=</operator> <literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:32"><expr pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:11">sr_base</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:31"><name pos:start="15:15" pos:end="15:17">env</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:22">spr</name><index pos:start="15:23" pos:end="15:31">[<expr pos:start="15:24" pos:end="15:30"><name pos:start="15:24" pos:end="15:30">SPR_ASR</name></expr>]</index></name></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="41:5">for <control pos:start="17:9" pos:end="17:37">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">n</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:32"><expr pos:start="17:17" pos:end="17:31"><name pos:start="17:17" pos:end="17:17">n</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:31"><name pos:start="17:21" pos:end="17:23">env</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:31">slb_nr</name></name></expr>;</condition> <incr pos:start="17:34" pos:end="17:36"><expr pos:start="17:34" pos:end="17:36"><name pos:start="17:34" pos:end="17:34">n</name><operator pos:start="17:35" pos:end="17:36">++</operator></expr></incr>)</control> <block pos:start="17:39" pos:end="41:5">{<block_content pos:start="19:9" pos:end="39:22">

        <expr_stmt pos:start="19:9" pos:end="19:34"><expr pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:13">tmp64</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <call pos:start="19:17" pos:end="19:33"><name pos:start="19:17" pos:end="19:24">ldq_phys</name><argument_list pos:start="19:25" pos:end="19:33">(<argument pos:start="19:26" pos:end="19:32"><expr pos:start="19:26" pos:end="19:32"><name pos:start="19:26" pos:end="19:32">sr_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="37:9"><if pos:start="21:9" pos:end="37:9">if <condition pos:start="21:12" pos:end="21:32">(<expr pos:start="21:13" pos:end="21:31"><call pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:24">slb_is_valid</name><argument_list pos:start="21:25" pos:end="21:31">(<argument pos:start="21:26" pos:end="21:30"><expr pos:start="21:26" pos:end="21:30"><name pos:start="21:26" pos:end="21:30">tmp64</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:34" pos:end="37:9">{<block_content pos:start="23:13" pos:end="35:30">

            <expr_stmt pos:start="23:13" pos:end="23:35"><expr pos:start="23:13" pos:end="23:34"><call pos:start="23:13" pos:end="23:34"><name pos:start="23:13" pos:end="23:26">slb_invalidate</name><argument_list pos:start="23:27" pos:end="23:34">(<argument pos:start="23:28" pos:end="23:33"><expr pos:start="23:28" pos:end="23:33"><operator pos:start="23:28" pos:end="23:28">&amp;</operator><name pos:start="23:29" pos:end="23:33">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:37"><expr pos:start="25:13" pos:end="25:36"><call pos:start="25:13" pos:end="25:36"><name pos:start="25:13" pos:end="25:20">stq_phys</name><argument_list pos:start="25:21" pos:end="25:36">(<argument pos:start="25:22" pos:end="25:28"><expr pos:start="25:22" pos:end="25:28"><name pos:start="25:22" pos:end="25:28">sr_base</name></expr></argument>, <argument pos:start="25:31" pos:end="25:35"><expr pos:start="25:31" pos:end="25:35"><name pos:start="25:31" pos:end="25:35">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="27:13" pos:end="33:15">/* XXX: given the fact that segment size is 256 MB or 1TB,

             *      and we still don't have a tlb_flush_mask(env, n, mask)

             *      in Qemu, we just invalidate all TLBs

             */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:30"><expr pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:25">do_invalidate</name> <operator pos:start="35:27" pos:end="35:27">=</operator> <literal type="number" pos:start="35:29" pos:end="35:29">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:22"><expr pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:15">sr_base</name> <operator pos:start="39:17" pos:end="39:18">+=</operator> <literal type="number" pos:start="39:20" pos:end="39:21">12</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="43:5" pos:end="45:26"><if pos:start="43:5" pos:end="45:26">if <condition pos:start="43:8" pos:end="43:22">(<expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:21">do_invalidate</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:26"><block_content pos:start="45:9" pos:end="45:26">

        <expr_stmt pos:start="45:9" pos:end="45:26"><expr pos:start="45:9" pos:end="45:25"><call pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:17">tlb_flush</name><argument_list pos:start="45:18" pos:end="45:25">(<argument pos:start="45:19" pos:end="45:21"><expr pos:start="45:19" pos:end="45:21"><name pos:start="45:19" pos:end="45:21">env</name></expr></argument>, <argument pos:start="45:24" pos:end="45:24"><expr pos:start="45:24" pos:end="45:24"><literal type="number" pos:start="45:24" pos:end="45:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
