<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26155.c" pos:tabs="8"><function pos:start="1:1" pos:end="21:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:30">cpu_breakpoint_remove_all</name><parameter_list pos:start="1:31" pos:end="1:55">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:39">CPUState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:54"><decl pos:start="1:47" pos:end="1:54"><type pos:start="1:47" pos:end="1:54"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:54">mask</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="21:1">{<block_content pos:start="7:5" pos:end="20:0">

<cpp:if pos:start="5:1" pos:end="5:27">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:27"><call pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:27">(<argument pos:start="5:13" pos:end="5:26"><expr pos:start="5:13" pos:end="5:26"><name pos:start="5:13" pos:end="5:26">TARGET_HAS_ICE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">CPUBreakpoint</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">bp</name></decl>, <decl pos:start="7:24" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:19"><modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:28">next</name></decl>;</decl_stmt>



    <macro pos:start="11:5" pos:end="11:58"><name pos:start="11:5" pos:end="11:22">TAILQ_FOREACH_SAFE</name><argument_list pos:start="11:23" pos:end="11:58">(<argument pos:start="11:24" pos:end="11:25">bp</argument>, <argument pos:start="11:28" pos:end="11:44">&amp;env-&gt;breakpoints</argument>, <argument pos:start="11:47" pos:end="11:51">entry</argument>, <argument pos:start="11:54" pos:end="11:57">next</argument>)</argument_list></macro> <block pos:start="11:60" pos:end="20:0">{<block_content pos:start="13:9" pos:end="15:50">

        <if_stmt pos:start="13:9" pos:end="15:50"><if pos:start="13:9" pos:end="15:50">if <condition pos:start="13:12" pos:end="13:29">(<expr pos:start="13:13" pos:end="13:28"><name pos:start="13:13" pos:end="13:21"><name pos:start="13:13" pos:end="13:14">bp</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:21">flags</name></name> <operator pos:start="13:23" pos:end="13:23">&amp;</operator> <name pos:start="13:25" pos:end="13:28">mask</name></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:50"><block_content pos:start="15:13" pos:end="15:50">

            <expr_stmt pos:start="15:13" pos:end="15:50"><expr pos:start="15:13" pos:end="15:49"><call pos:start="15:13" pos:end="15:49"><name pos:start="15:13" pos:end="15:40">cpu_breakpoint_remove_by_ref</name><argument_list pos:start="15:41" pos:end="15:49">(<argument pos:start="15:42" pos:end="15:44"><expr pos:start="15:42" pos:end="15:44"><name pos:start="15:42" pos:end="15:44">env</name></expr></argument>, <argument pos:start="15:47" pos:end="15:48"><expr pos:start="15:47" pos:end="15:48"><name pos:start="15:47" pos:end="15:48">bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
