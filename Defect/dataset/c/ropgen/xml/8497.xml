<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8497.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">uhci_handle_td</name><parameter_list pos:start="1:26" pos:end="2:76">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:35">UHCIState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:49">UHCIQueue</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">q</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:70"><decl pos:start="1:55" pos:end="1:70"><type pos:start="1:55" pos:end="1:70"><name pos:start="1:55" pos:end="1:62">uint32_t</name></type> <name pos:start="1:64" pos:end="1:70">qh_addr</name></decl></parameter>,
                          <parameter pos:start="2:27" pos:end="2:37"><decl pos:start="2:27" pos:end="2:37"><type pos:start="2:27" pos:end="2:37"><name pos:start="2:27" pos:end="2:33">UHCI_TD</name> <modifier pos:start="2:35" pos:end="2:35">*</modifier></type><name pos:start="2:36" pos:end="2:37">td</name></decl></parameter>, <parameter pos:start="2:40" pos:end="2:55"><decl pos:start="2:40" pos:end="2:55"><type pos:start="2:40" pos:end="2:55"><name pos:start="2:40" pos:end="2:47">uint32_t</name></type> <name pos:start="2:49" pos:end="2:55">td_addr</name></decl></parameter>, <parameter pos:start="2:58" pos:end="2:75"><decl pos:start="2:58" pos:end="2:75"><type pos:start="2:58" pos:end="2:75"><name pos:start="2:58" pos:end="2:65">uint32_t</name> <modifier pos:start="2:67" pos:end="2:67">*</modifier></type><name pos:start="2:68" pos:end="2:75">int_mask</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="93:15">{<block_content pos:start="4:5" pos:end="93:15">
    <decl_stmt pos:start="4:5" pos:end="4:25"><decl pos:start="4:5" pos:end="4:15"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:11">len</name> <init pos:start="4:13" pos:end="4:15">= <expr pos:start="4:15" pos:end="4:15"><literal type="number" pos:start="4:15" pos:end="4:15">0</literal></expr></init></decl>, <decl pos:start="4:18" pos:end="4:24"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:18" pos:end="4:24">max_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:12">spd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:31"><decl pos:start="6:5" pos:end="6:30"><type pos:start="6:5" pos:end="6:8"><name pos:start="6:5" pos:end="6:8">bool</name></type> <name pos:start="6:10" pos:end="6:16">queuing</name> <init pos:start="6:18" pos:end="6:30">= <expr pos:start="6:20" pos:end="6:30"><operator pos:start="6:20" pos:end="6:20">(</operator><name pos:start="6:21" pos:end="6:21">q</name> <operator pos:start="6:23" pos:end="6:24">!=</operator> <name pos:start="6:26" pos:end="6:29">NULL</name><operator pos:start="6:30" pos:end="6:30">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:15">pid</name> <init pos:start="7:17" pos:end="7:34">= <expr pos:start="7:19" pos:end="7:34"><name pos:start="7:19" pos:end="7:27"><name pos:start="7:19" pos:end="7:20">td</name><operator pos:start="7:21" pos:end="7:22">-&gt;</operator><name pos:start="7:23" pos:end="7:27">token</name></name> <operator pos:start="7:29" pos:end="7:29">&amp;</operator> <literal type="number" pos:start="7:31" pos:end="7:34">0xff</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:54"><decl pos:start="8:5" pos:end="8:53"><type pos:start="8:5" pos:end="8:15"><name pos:start="8:5" pos:end="8:13">UHCIAsync</name> <modifier pos:start="8:15" pos:end="8:15">*</modifier></type><name pos:start="8:16" pos:end="8:20">async</name> <init pos:start="8:22" pos:end="8:53">= <expr pos:start="8:24" pos:end="8:53"><call pos:start="8:24" pos:end="8:53"><name pos:start="8:24" pos:end="8:41">uhci_async_find_td</name><argument_list pos:start="8:42" pos:end="8:53">(<argument pos:start="8:43" pos:end="8:43"><expr pos:start="8:43" pos:end="8:43"><name pos:start="8:43" pos:end="8:43">s</name></expr></argument>, <argument pos:start="8:46" pos:end="8:52"><expr pos:start="8:46" pos:end="8:52"><name pos:start="8:46" pos:end="8:52">td_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="9:5" pos:end="93:15"><if pos:start="9:5" pos:end="93:15">if <condition pos:start="9:8" pos:end="9:14">(<expr pos:start="9:9" pos:end="9:13"><name pos:start="9:9" pos:end="9:13">async</name></expr>)</condition> <block pos:start="9:16" pos:end="93:15">{<block_content pos:start="10:9" pos:end="93:15">
        <if_stmt pos:start="10:9" pos:end="93:15"><if pos:start="10:9" pos:end="13:9">if <condition pos:start="10:12" pos:end="10:75">(<expr pos:start="10:13" pos:end="10:74"><call pos:start="10:13" pos:end="10:74"><name pos:start="10:13" pos:end="10:29">uhci_queue_verify</name><argument_list pos:start="10:30" pos:end="10:74">(<argument pos:start="10:31" pos:end="10:42"><expr pos:start="10:31" pos:end="10:42"><name pos:start="10:31" pos:end="10:42"><name pos:start="10:31" pos:end="10:35">async</name><operator pos:start="10:36" pos:end="10:37">-&gt;</operator><name pos:start="10:38" pos:end="10:42">queue</name></name></expr></argument>, <argument pos:start="10:45" pos:end="10:51"><expr pos:start="10:45" pos:end="10:51"><name pos:start="10:45" pos:end="10:51">qh_addr</name></expr></argument>, <argument pos:start="10:54" pos:end="10:55"><expr pos:start="10:54" pos:end="10:55"><name pos:start="10:54" pos:end="10:55">td</name></expr></argument>, <argument pos:start="10:58" pos:end="10:64"><expr pos:start="10:58" pos:end="10:64"><name pos:start="10:58" pos:end="10:64">td_addr</name></expr></argument>, <argument pos:start="10:67" pos:end="10:73"><expr pos:start="10:67" pos:end="10:73"><name pos:start="10:67" pos:end="10:73">queuing</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="10:77" pos:end="13:9">{<block_content pos:start="11:13" pos:end="12:29">
            <expr_stmt pos:start="11:13" pos:end="11:51"><expr pos:start="11:13" pos:end="11:50"><call pos:start="11:13" pos:end="11:50"><name pos:start="11:13" pos:end="11:18">assert</name><argument_list pos:start="11:19" pos:end="11:50">(<argument pos:start="11:20" pos:end="11:49"><expr pos:start="11:20" pos:end="11:49"><name pos:start="11:20" pos:end="11:20">q</name> <operator pos:start="11:22" pos:end="11:23">==</operator> <name pos:start="11:25" pos:end="11:28">NULL</name> <operator pos:start="11:30" pos:end="11:31">||</operator> <name pos:start="11:33" pos:end="11:33">q</name> <operator pos:start="11:35" pos:end="11:36">==</operator> <name pos:start="11:38" pos:end="11:49"><name pos:start="11:38" pos:end="11:42">async</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:49">queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="12:13" pos:end="12:29"><expr pos:start="12:13" pos:end="12:28"><name pos:start="12:13" pos:end="12:13">q</name> <operator pos:start="12:15" pos:end="12:15">=</operator> <name pos:start="12:17" pos:end="12:28"><name pos:start="12:17" pos:end="12:21">async</name><operator pos:start="12:22" pos:end="12:23">-&gt;</operator><name pos:start="12:24" pos:end="12:28">queue</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="13:11" pos:end="93:15">else <block pos:start="13:16" pos:end="93:15">{<block_content pos:start="14:13" pos:end="93:15">
            <expr_stmt pos:start="14:13" pos:end="14:70"><expr pos:start="14:13" pos:end="14:69"><call pos:start="14:13" pos:end="14:69"><name pos:start="14:13" pos:end="14:27">uhci_queue_free</name><argument_list pos:start="14:28" pos:end="14:69">(<argument pos:start="14:29" pos:end="14:40"><expr pos:start="14:29" pos:end="14:40"><name pos:start="14:29" pos:end="14:40"><name pos:start="14:29" pos:end="14:33">async</name><operator pos:start="14:34" pos:end="14:35">-&gt;</operator><name pos:start="14:36" pos:end="14:40">queue</name></name></expr></argument>, <argument pos:start="14:43" pos:end="14:68"><expr pos:start="14:43" pos:end="14:68"><literal type="string" pos:start="14:43" pos:end="14:68">"guest re-used pending td"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="15:13" pos:end="15:25"><expr pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:17">async</name> <operator pos:start="15:19" pos:end="15:19">=</operator> <name pos:start="15:21" pos:end="15:24">NULL</name></expr>;</expr_stmt>
    <if_stmt pos:start="16:5" pos:end="93:15"><if pos:start="16:5" pos:end="93:15">if <condition pos:start="16:8" pos:end="16:18">(<expr pos:start="16:9" pos:end="16:17"><name pos:start="16:9" pos:end="16:9">q</name> <operator pos:start="16:11" pos:end="16:12">==</operator> <name pos:start="16:14" pos:end="16:17">NULL</name></expr>)</condition> <block pos:start="16:20" pos:end="93:15">{<block_content pos:start="17:9" pos:end="93:15">
        <expr_stmt pos:start="17:9" pos:end="17:35"><expr pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:9">q</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:34"><name pos:start="17:13" pos:end="17:27">uhci_queue_find</name><argument_list pos:start="17:28" pos:end="17:34">(<argument pos:start="17:29" pos:end="17:29"><expr pos:start="17:29" pos:end="17:29"><name pos:start="17:29" pos:end="17:29">s</name></expr></argument>, <argument pos:start="17:32" pos:end="17:33"><expr pos:start="17:32" pos:end="17:33"><name pos:start="17:32" pos:end="17:33">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="18:9" pos:end="93:15"><if pos:start="18:9" pos:end="93:15">if <condition pos:start="18:12" pos:end="18:70">(<expr pos:start="18:13" pos:end="18:69"><name pos:start="18:13" pos:end="18:13">q</name> <operator pos:start="18:15" pos:end="18:16">&amp;&amp;</operator> <operator pos:start="18:18" pos:end="18:18">!</operator><call pos:start="18:19" pos:end="18:69"><name pos:start="18:19" pos:end="18:35">uhci_queue_verify</name><argument_list pos:start="18:36" pos:end="18:69">(<argument pos:start="18:37" pos:end="18:37"><expr pos:start="18:37" pos:end="18:37"><name pos:start="18:37" pos:end="18:37">q</name></expr></argument>, <argument pos:start="18:40" pos:end="18:46"><expr pos:start="18:40" pos:end="18:46"><name pos:start="18:40" pos:end="18:46">qh_addr</name></expr></argument>, <argument pos:start="18:49" pos:end="18:50"><expr pos:start="18:49" pos:end="18:50"><name pos:start="18:49" pos:end="18:50">td</name></expr></argument>, <argument pos:start="18:53" pos:end="18:59"><expr pos:start="18:53" pos:end="18:59"><name pos:start="18:53" pos:end="18:59">td_addr</name></expr></argument>, <argument pos:start="18:62" pos:end="18:68"><expr pos:start="18:62" pos:end="18:68"><name pos:start="18:62" pos:end="18:68">queuing</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="18:72" pos:end="93:15">{<block_content pos:start="19:13" pos:end="93:15">
            <expr_stmt pos:start="19:13" pos:end="19:51"><expr pos:start="19:13" pos:end="19:50"><call pos:start="19:13" pos:end="19:50"><name pos:start="19:13" pos:end="19:27">uhci_queue_free</name><argument_list pos:start="19:28" pos:end="19:50">(<argument pos:start="19:29" pos:end="19:29"><expr pos:start="19:29" pos:end="19:29"><name pos:start="19:29" pos:end="19:29">q</name></expr></argument>, <argument pos:start="19:32" pos:end="19:49"><expr pos:start="19:32" pos:end="19:49"><literal type="string" pos:start="19:32" pos:end="19:49">"guest re-used qh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="20:13" pos:end="20:21"><expr pos:start="20:13" pos:end="20:20"><name pos:start="20:13" pos:end="20:13">q</name> <operator pos:start="20:15" pos:end="20:15">=</operator> <name pos:start="20:17" pos:end="20:20">NULL</name></expr>;</expr_stmt>
    <if_stmt pos:start="21:5" pos:end="93:15"><if pos:start="21:5" pos:end="93:15">if <condition pos:start="21:8" pos:end="21:10">(<expr pos:start="21:9" pos:end="21:9"><name pos:start="21:9" pos:end="21:9">q</name></expr>)</condition> <block pos:start="21:12" pos:end="93:15">{<block_content pos:start="22:9" pos:end="93:15">
        <expr_stmt pos:start="22:9" pos:end="22:22"><expr pos:start="22:9" pos:end="22:21"><name pos:start="22:9" pos:end="22:16"><name pos:start="22:9" pos:end="22:9">q</name><operator pos:start="22:10" pos:end="22:11">-&gt;</operator><name pos:start="22:12" pos:end="22:16">valid</name></name> <operator pos:start="22:18" pos:end="22:18">=</operator> <literal type="number" pos:start="22:20" pos:end="22:21">32</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="23:5" pos:end="23:21">/* Is active ? */</comment>
    <if_stmt pos:start="24:5" pos:end="93:15"><if pos:start="24:5" pos:end="93:15">if <condition pos:start="24:8" pos:end="24:37">(<expr pos:start="24:9" pos:end="24:36"><operator pos:start="24:9" pos:end="24:9">!</operator><operator pos:start="24:10" pos:end="24:10">(</operator><name pos:start="24:11" pos:end="24:18"><name pos:start="24:11" pos:end="24:12">td</name><operator pos:start="24:13" pos:end="24:14">-&gt;</operator><name pos:start="24:15" pos:end="24:18">ctrl</name></name> <operator pos:start="24:20" pos:end="24:20">&amp;</operator> <name pos:start="24:22" pos:end="24:35">TD_CTRL_ACTIVE</name><operator pos:start="24:36" pos:end="24:36">)</operator></expr>)</condition> <block pos:start="24:39" pos:end="93:15">{<block_content pos:start="25:9" pos:end="93:15">
        <if_stmt pos:start="25:9" pos:end="93:15"><if pos:start="25:9" pos:end="93:15">if <condition pos:start="25:12" pos:end="25:18">(<expr pos:start="25:13" pos:end="25:17"><name pos:start="25:13" pos:end="25:17">async</name></expr>)</condition> <block pos:start="25:20" pos:end="93:15">{<block_content pos:start="27:13" pos:end="93:15">
            <comment type="block" pos:start="26:13" pos:end="26:72">/* Guest marked a pending td non-active, cancel the queue */</comment>
            <expr_stmt pos:start="27:13" pos:end="27:67"><expr pos:start="27:13" pos:end="27:66"><call pos:start="27:13" pos:end="27:66"><name pos:start="27:13" pos:end="27:27">uhci_queue_free</name><argument_list pos:start="27:28" pos:end="27:66">(<argument pos:start="27:29" pos:end="27:40"><expr pos:start="27:29" pos:end="27:40"><name pos:start="27:29" pos:end="27:40"><name pos:start="27:29" pos:end="27:33">async</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:40">queue</name></name></expr></argument>, <argument pos:start="27:43" pos:end="27:65"><expr pos:start="27:43" pos:end="27:65"><literal type="string" pos:start="27:43" pos:end="27:65">"pending td non-active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="28:9" pos:end="31:11">/*
         * ehci11d spec page 22: "Even if the Active bit in the TD is already
         * cleared when the TD is fetched ... an IOC interrupt is generated"
         */</comment>
        <if_stmt pos:start="32:9" pos:end="93:15"><if pos:start="32:9" pos:end="93:15">if <condition pos:start="32:12" pos:end="32:35">(<expr pos:start="32:13" pos:end="32:34"><name pos:start="32:13" pos:end="32:20"><name pos:start="32:13" pos:end="32:14">td</name><operator pos:start="32:15" pos:end="32:16">-&gt;</operator><name pos:start="32:17" pos:end="32:20">ctrl</name></name> <operator pos:start="32:22" pos:end="32:22">&amp;</operator> <name pos:start="32:24" pos:end="32:34">TD_CTRL_IOC</name></expr>)</condition> <block pos:start="32:37" pos:end="93:15">{<block_content pos:start="33:17" pos:end="93:15">
                <expr_stmt pos:start="33:17" pos:end="33:34"><expr pos:start="33:17" pos:end="33:33"><operator pos:start="33:17" pos:end="33:17">*</operator><name pos:start="33:18" pos:end="33:25">int_mask</name> <operator pos:start="33:27" pos:end="33:28">|=</operator> <literal type="number" pos:start="33:30" pos:end="33:33">0x01</literal></expr>;</expr_stmt>
        <return pos:start="34:9" pos:end="34:33">return <expr pos:start="34:16" pos:end="34:32"><name pos:start="34:16" pos:end="34:32">TD_RESULT_NEXT_QH</name></expr>;</return>
    <if_stmt pos:start="35:5" pos:end="93:15"><if pos:start="35:5" pos:end="93:15">if <condition pos:start="35:8" pos:end="35:14">(<expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:13">async</name></expr>)</condition> <block pos:start="35:16" pos:end="93:15">{<block_content pos:start="36:9" pos:end="93:15">
        <if_stmt pos:start="36:9" pos:end="93:15"><if pos:start="36:9" pos:end="93:15">if <condition pos:start="36:12" pos:end="36:20">(<expr pos:start="36:13" pos:end="36:19"><name pos:start="36:13" pos:end="36:19">queuing</name></expr>)</condition> <block pos:start="36:22" pos:end="93:15">{<block_content pos:start="40:13" pos:end="93:15">
            <comment type="block" pos:start="37:13" pos:end="39:32">/* we are busy filling the queue, we are not prepared
               to consume completed packages then, just leave them
               in async state */</comment>
            <return pos:start="40:13" pos:end="40:40">return <expr pos:start="40:20" pos:end="40:39"><name pos:start="40:20" pos:end="40:39">TD_RESULT_ASYNC_CONT</name></expr>;</return>
        <if_stmt pos:start="41:9" pos:end="93:15"><if pos:start="41:9" pos:end="93:15">if <condition pos:start="41:12" pos:end="41:25">(<expr pos:start="41:13" pos:end="41:24"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:24"><name pos:start="41:14" pos:end="41:18">async</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:24">done</name></name></expr>)</condition> <block pos:start="41:27" pos:end="93:15">{<block_content pos:start="42:13" pos:end="93:15">
            <decl_stmt pos:start="42:13" pos:end="42:28"><decl pos:start="42:13" pos:end="42:27"><type pos:start="42:13" pos:end="42:19"><name pos:start="42:13" pos:end="42:19">UHCI_TD</name></type> <name pos:start="42:21" pos:end="42:27">last_td</name></decl>;</decl_stmt>
            <decl_stmt pos:start="43:13" pos:end="43:78"><decl pos:start="43:13" pos:end="43:77"><type pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:21">UHCIAsync</name> <modifier pos:start="43:23" pos:end="43:23">*</modifier></type><name pos:start="43:24" pos:end="43:27">last</name> <init pos:start="43:29" pos:end="43:77">= <expr pos:start="43:31" pos:end="43:77"><call pos:start="43:31" pos:end="43:77"><name pos:start="43:31" pos:end="43:41">QTAILQ_LAST</name><argument_list pos:start="43:42" pos:end="43:77">(<argument pos:start="43:43" pos:end="43:63"><expr pos:start="43:43" pos:end="43:63"><operator pos:start="43:43" pos:end="43:43">&amp;</operator><name pos:start="43:44" pos:end="43:63"><name pos:start="43:44" pos:end="43:48">async</name><operator pos:start="43:49" pos:end="43:50">-&gt;</operator><name pos:start="43:51" pos:end="43:55">queue</name><operator pos:start="43:56" pos:end="43:57">-&gt;</operator><name pos:start="43:58" pos:end="43:63">asyncs</name></name></expr></argument>, <argument pos:start="43:66" pos:end="43:76"><expr pos:start="43:66" pos:end="43:76"><name pos:start="43:66" pos:end="43:76">asyncs_head</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="block" pos:start="44:13" pos:end="48:15">/*
             * While we are waiting for the current td to complete, the guest
             * may have added more tds to the queue. Note we re-read the td
             * rather then caching it, as we want to see guest made changes!
             */</comment>
            <expr_stmt pos:start="49:13" pos:end="49:53"><expr pos:start="49:13" pos:end="49:52"><call pos:start="49:13" pos:end="49:52"><name pos:start="49:13" pos:end="49:24">uhci_read_td</name><argument_list pos:start="49:25" pos:end="49:52">(<argument pos:start="49:26" pos:end="49:26"><expr pos:start="49:26" pos:end="49:26"><name pos:start="49:26" pos:end="49:26">s</name></expr></argument>, <argument pos:start="49:29" pos:end="49:36"><expr pos:start="49:29" pos:end="49:36"><operator pos:start="49:29" pos:end="49:29">&amp;</operator><name pos:start="49:30" pos:end="49:36">last_td</name></expr></argument>, <argument pos:start="49:39" pos:end="49:51"><expr pos:start="49:39" pos:end="49:51"><name pos:start="49:39" pos:end="49:51"><name pos:start="49:39" pos:end="49:42">last</name><operator pos:start="49:43" pos:end="49:44">-&gt;</operator><name pos:start="49:45" pos:end="49:51">td_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="50:13" pos:end="50:52"><expr pos:start="50:13" pos:end="50:51"><call pos:start="50:13" pos:end="50:51"><name pos:start="50:13" pos:end="50:27">uhci_queue_fill</name><argument_list pos:start="50:28" pos:end="50:51">(<argument pos:start="50:29" pos:end="50:40"><expr pos:start="50:29" pos:end="50:40"><name pos:start="50:29" pos:end="50:40"><name pos:start="50:29" pos:end="50:33">async</name><operator pos:start="50:34" pos:end="50:35">-&gt;</operator><name pos:start="50:36" pos:end="50:40">queue</name></name></expr></argument>, <argument pos:start="50:43" pos:end="50:50"><expr pos:start="50:43" pos:end="50:50"><operator pos:start="50:43" pos:end="50:43">&amp;</operator><name pos:start="50:44" pos:end="50:50">last_td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="51:13" pos:end="51:40">return <expr pos:start="51:20" pos:end="51:39"><name pos:start="51:20" pos:end="51:39">TD_RESULT_ASYNC_CONT</name></expr>;</return>
        <expr_stmt pos:start="52:9" pos:end="52:33"><expr pos:start="52:9" pos:end="52:32"><call pos:start="52:9" pos:end="52:32"><name pos:start="52:9" pos:end="52:25">uhci_async_unlink</name><argument_list pos:start="52:26" pos:end="52:32">(<argument pos:start="52:27" pos:end="52:31"><expr pos:start="52:27" pos:end="52:31"><name pos:start="52:27" pos:end="52:31">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">done</name>;</goto>
    <comment type="block" pos:start="54:5" pos:end="54:29">/* Allocate new packet */</comment>
    <if_stmt pos:start="55:5" pos:end="93:15"><if pos:start="55:5" pos:end="93:15">if <condition pos:start="55:8" pos:end="55:18">(<expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:9">q</name> <operator pos:start="55:11" pos:end="55:12">==</operator> <name pos:start="55:14" pos:end="55:17">NULL</name></expr>)</condition> <block pos:start="55:20" pos:end="93:15">{<block_content pos:start="56:9" pos:end="93:15">
        <decl_stmt pos:start="56:9" pos:end="56:70"><decl pos:start="56:9" pos:end="56:69"><type pos:start="56:9" pos:end="56:19"><name pos:start="56:9" pos:end="56:17">USBDevice</name> <modifier pos:start="56:19" pos:end="56:19">*</modifier></type><name pos:start="56:20" pos:end="56:22">dev</name> <init pos:start="56:24" pos:end="56:69">= <expr pos:start="56:26" pos:end="56:69"><call pos:start="56:26" pos:end="56:69"><name pos:start="56:26" pos:end="56:41">uhci_find_device</name><argument_list pos:start="56:42" pos:end="56:69">(<argument pos:start="56:43" pos:end="56:43"><expr pos:start="56:43" pos:end="56:43"><name pos:start="56:43" pos:end="56:43">s</name></expr></argument>, <argument pos:start="56:46" pos:end="56:68"><expr pos:start="56:46" pos:end="56:68"><operator pos:start="56:46" pos:end="56:46">(</operator><name pos:start="56:47" pos:end="56:55"><name pos:start="56:47" pos:end="56:48">td</name><operator pos:start="56:49" pos:end="56:50">-&gt;</operator><name pos:start="56:51" pos:end="56:55">token</name></name> <operator pos:start="56:57" pos:end="56:58">&gt;&gt;</operator> <literal type="number" pos:start="56:60" pos:end="56:60">8</literal><operator pos:start="56:61" pos:end="56:61">)</operator> <operator pos:start="56:63" pos:end="56:63">&amp;</operator> <literal type="number" pos:start="56:65" pos:end="56:68">0x7f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="57:9" pos:end="57:72"><decl pos:start="57:9" pos:end="57:71"><type pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:19">USBEndpoint</name> <modifier pos:start="57:21" pos:end="57:21">*</modifier></type><name pos:start="57:22" pos:end="57:23">ep</name> <init pos:start="57:25" pos:end="57:71">= <expr pos:start="57:27" pos:end="57:71"><call pos:start="57:27" pos:end="57:71"><name pos:start="57:27" pos:end="57:36">usb_ep_get</name><argument_list pos:start="57:37" pos:end="57:71">(<argument pos:start="57:38" pos:end="57:40"><expr pos:start="57:38" pos:end="57:40"><name pos:start="57:38" pos:end="57:40">dev</name></expr></argument>, <argument pos:start="57:43" pos:end="57:45"><expr pos:start="57:43" pos:end="57:45"><name pos:start="57:43" pos:end="57:45">pid</name></expr></argument>, <argument pos:start="57:48" pos:end="57:70"><expr pos:start="57:48" pos:end="57:70"><operator pos:start="57:48" pos:end="57:48">(</operator><name pos:start="57:49" pos:end="57:57"><name pos:start="57:49" pos:end="57:50">td</name><operator pos:start="57:51" pos:end="57:52">-&gt;</operator><name pos:start="57:53" pos:end="57:57">token</name></name> <operator pos:start="57:59" pos:end="57:60">&gt;&gt;</operator> <literal type="number" pos:start="57:62" pos:end="57:63">15</literal><operator pos:start="57:64" pos:end="57:64">)</operator> <operator pos:start="57:66" pos:end="57:66">&amp;</operator> <literal type="number" pos:start="57:68" pos:end="57:70">0xf</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="58:9" pos:end="58:47"><expr pos:start="58:9" pos:end="58:46"><name pos:start="58:9" pos:end="58:9">q</name> <operator pos:start="58:11" pos:end="58:11">=</operator> <call pos:start="58:13" pos:end="58:46"><name pos:start="58:13" pos:end="58:26">uhci_queue_new</name><argument_list pos:start="58:27" pos:end="58:46">(<argument pos:start="58:28" pos:end="58:28"><expr pos:start="58:28" pos:end="58:28"><name pos:start="58:28" pos:end="58:28">s</name></expr></argument>, <argument pos:start="58:31" pos:end="58:37"><expr pos:start="58:31" pos:end="58:37"><name pos:start="58:31" pos:end="58:37">qh_addr</name></expr></argument>, <argument pos:start="58:40" pos:end="58:41"><expr pos:start="58:40" pos:end="58:41"><name pos:start="58:40" pos:end="58:41">td</name></expr></argument>, <argument pos:start="58:44" pos:end="58:45"><expr pos:start="58:44" pos:end="58:45"><name pos:start="58:44" pos:end="58:45">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:9">async</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <call pos:start="59:13" pos:end="59:40"><name pos:start="59:13" pos:end="59:28">uhci_async_alloc</name><argument_list pos:start="59:29" pos:end="59:40">(<argument pos:start="59:30" pos:end="59:30"><expr pos:start="59:30" pos:end="59:30"><name pos:start="59:30" pos:end="59:30">q</name></expr></argument>, <argument pos:start="59:33" pos:end="59:39"><expr pos:start="59:33" pos:end="59:39"><name pos:start="59:33" pos:end="59:39">td_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="60:5" pos:end="60:46"><expr pos:start="60:5" pos:end="60:45"><name pos:start="60:5" pos:end="60:11">max_len</name> <operator pos:start="60:13" pos:end="60:13">=</operator> <operator pos:start="60:15" pos:end="60:15">(</operator><operator pos:start="60:16" pos:end="60:16">(</operator><name pos:start="60:17" pos:end="60:25"><name pos:start="60:17" pos:end="60:18">td</name><operator pos:start="60:19" pos:end="60:20">-&gt;</operator><name pos:start="60:21" pos:end="60:25">token</name></name> <operator pos:start="60:27" pos:end="60:28">&gt;&gt;</operator> <literal type="number" pos:start="60:30" pos:end="60:31">21</literal><operator pos:start="60:32" pos:end="60:32">)</operator> <operator pos:start="60:34" pos:end="60:34">+</operator> <literal type="number" pos:start="60:36" pos:end="60:36">1</literal><operator pos:start="60:37" pos:end="60:37">)</operator> <operator pos:start="60:39" pos:end="60:39">&amp;</operator> <literal type="number" pos:start="60:41" pos:end="60:45">0x7ff</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="61:5" pos:end="61:65"><expr pos:start="61:5" pos:end="61:64"><name pos:start="61:5" pos:end="61:7">spd</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <operator pos:start="61:11" pos:end="61:11">(</operator><name pos:start="61:12" pos:end="61:14">pid</name> <operator pos:start="61:16" pos:end="61:17">==</operator> <name pos:start="61:19" pos:end="61:30">USB_TOKEN_IN</name> <operator pos:start="61:32" pos:end="61:33">&amp;&amp;</operator> <operator pos:start="61:35" pos:end="61:35">(</operator><name pos:start="61:36" pos:end="61:43"><name pos:start="61:36" pos:end="61:37">td</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:43">ctrl</name></name> <operator pos:start="61:45" pos:end="61:45">&amp;</operator> <name pos:start="61:47" pos:end="61:57">TD_CTRL_SPD</name><operator pos:start="61:58" pos:end="61:58">)</operator> <operator pos:start="61:60" pos:end="61:61">!=</operator> <literal type="number" pos:start="61:63" pos:end="61:63">0</literal><operator pos:start="61:64" pos:end="61:64">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="62:5" pos:end="63:52"><expr pos:start="62:5" pos:end="63:51"><call pos:start="62:5" pos:end="63:51"><name pos:start="62:5" pos:end="62:20">usb_packet_setup</name><argument_list pos:start="62:21" pos:end="63:51">(<argument pos:start="62:22" pos:end="62:35"><expr pos:start="62:22" pos:end="62:35"><operator pos:start="62:22" pos:end="62:22">&amp;</operator><name pos:start="62:23" pos:end="62:35"><name pos:start="62:23" pos:end="62:27">async</name><operator pos:start="62:28" pos:end="62:29">-&gt;</operator><name pos:start="62:30" pos:end="62:35">packet</name></name></expr></argument>, <argument pos:start="62:38" pos:end="62:40"><expr pos:start="62:38" pos:end="62:40"><name pos:start="62:38" pos:end="62:40">pid</name></expr></argument>, <argument pos:start="62:43" pos:end="62:47"><expr pos:start="62:43" pos:end="62:47"><name pos:start="62:43" pos:end="62:47"><name pos:start="62:43" pos:end="62:43">q</name><operator pos:start="62:44" pos:end="62:45">-&gt;</operator><name pos:start="62:46" pos:end="62:47">ep</name></name></expr></argument>, <argument pos:start="62:50" pos:end="62:56"><expr pos:start="62:50" pos:end="62:56"><name pos:start="62:50" pos:end="62:56">td_addr</name></expr></argument>, <argument pos:start="62:59" pos:end="62:61"><expr pos:start="62:59" pos:end="62:61"><name pos:start="62:59" pos:end="62:61">spd</name></expr></argument>,
                     <argument pos:start="63:22" pos:end="63:50"><expr pos:start="63:22" pos:end="63:50"><operator pos:start="63:22" pos:end="63:22">(</operator><name pos:start="63:23" pos:end="63:30"><name pos:start="63:23" pos:end="63:24">td</name><operator pos:start="63:25" pos:end="63:26">-&gt;</operator><name pos:start="63:27" pos:end="63:30">ctrl</name></name> <operator pos:start="63:32" pos:end="63:32">&amp;</operator> <name pos:start="63:34" pos:end="63:44">TD_CTRL_IOC</name><operator pos:start="63:45" pos:end="63:45">)</operator> <operator pos:start="63:47" pos:end="63:48">!=</operator> <literal type="number" pos:start="63:50" pos:end="63:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:54"><expr pos:start="64:5" pos:end="64:53"><call pos:start="64:5" pos:end="64:53"><name pos:start="64:5" pos:end="64:19">qemu_sglist_add</name><argument_list pos:start="64:20" pos:end="64:53">(<argument pos:start="64:21" pos:end="64:31"><expr pos:start="64:21" pos:end="64:31"><operator pos:start="64:21" pos:end="64:21">&amp;</operator><name pos:start="64:22" pos:end="64:31"><name pos:start="64:22" pos:end="64:26">async</name><operator pos:start="64:27" pos:end="64:28">-&gt;</operator><name pos:start="64:29" pos:end="64:31">sgl</name></name></expr></argument>, <argument pos:start="64:34" pos:end="64:43"><expr pos:start="64:34" pos:end="64:43"><name pos:start="64:34" pos:end="64:43"><name pos:start="64:34" pos:end="64:35">td</name><operator pos:start="64:36" pos:end="64:37">-&gt;</operator><name pos:start="64:38" pos:end="64:43">buffer</name></name></expr></argument>, <argument pos:start="64:46" pos:end="64:52"><expr pos:start="64:46" pos:end="64:52"><name pos:start="64:46" pos:end="64:52">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:48"><expr pos:start="65:5" pos:end="65:47"><call pos:start="65:5" pos:end="65:47"><name pos:start="65:5" pos:end="65:18">usb_packet_map</name><argument_list pos:start="65:19" pos:end="65:47">(<argument pos:start="65:20" pos:end="65:33"><expr pos:start="65:20" pos:end="65:33"><operator pos:start="65:20" pos:end="65:20">&amp;</operator><name pos:start="65:21" pos:end="65:33"><name pos:start="65:21" pos:end="65:25">async</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:33">packet</name></name></expr></argument>, <argument pos:start="65:36" pos:end="65:46"><expr pos:start="65:36" pos:end="65:46"><operator pos:start="65:36" pos:end="65:36">&amp;</operator><name pos:start="65:37" pos:end="65:46"><name pos:start="65:37" pos:end="65:41">async</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:46">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="66:5" pos:end="93:15">switch<condition pos:start="66:11" pos:end="66:15">(<expr pos:start="66:12" pos:end="66:14"><name pos:start="66:12" pos:end="66:14">pid</name></expr>)</condition> <block pos:start="66:17" pos:end="93:15">{<block_content pos:start="67:5" pos:end="93:15">
    <case pos:start="67:5" pos:end="67:23">case <expr pos:start="67:10" pos:end="67:22"><name pos:start="67:10" pos:end="67:22">USB_TOKEN_OUT</name></expr>:</case>
    <case pos:start="68:5" pos:end="68:25">case <expr pos:start="68:10" pos:end="68:24"><name pos:start="68:10" pos:end="68:24">USB_TOKEN_SETUP</name></expr>:</case>
        <expr_stmt pos:start="69:9" pos:end="69:60"><expr pos:start="69:9" pos:end="69:59"><name pos:start="69:9" pos:end="69:11">len</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:59"><name pos:start="69:15" pos:end="69:31">usb_handle_packet</name><argument_list pos:start="69:32" pos:end="69:59">(<argument pos:start="69:33" pos:end="69:42"><expr pos:start="69:33" pos:end="69:42"><name pos:start="69:33" pos:end="69:42"><name pos:start="69:33" pos:end="69:33">q</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:37">ep</name><operator pos:start="69:38" pos:end="69:39">-&gt;</operator><name pos:start="69:40" pos:end="69:42">dev</name></name></expr></argument>, <argument pos:start="69:45" pos:end="69:58"><expr pos:start="69:45" pos:end="69:58"><operator pos:start="69:45" pos:end="69:45">&amp;</operator><name pos:start="69:46" pos:end="69:58"><name pos:start="69:46" pos:end="69:50">async</name><operator pos:start="69:51" pos:end="69:52">-&gt;</operator><name pos:start="69:53" pos:end="69:58">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="70:9" pos:end="71:26"><if pos:start="70:9" pos:end="71:26">if <condition pos:start="70:12" pos:end="70:21">(<expr pos:start="70:13" pos:end="70:20"><name pos:start="70:13" pos:end="70:15">len</name> <operator pos:start="70:17" pos:end="70:18">&gt;=</operator> <literal type="number" pos:start="70:20" pos:end="70:20">0</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:26"><block_content pos:start="71:13" pos:end="71:26">
            <expr_stmt pos:start="71:13" pos:end="71:26"><expr pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:15">len</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:25">max_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break pos:start="72:9" pos:end="72:14">break;</break>
    <case pos:start="73:5" pos:end="73:22">case <expr pos:start="73:10" pos:end="73:21"><name pos:start="73:10" pos:end="73:21">USB_TOKEN_IN</name></expr>:</case>
        <expr_stmt pos:start="74:9" pos:end="74:60"><expr pos:start="74:9" pos:end="74:59"><name pos:start="74:9" pos:end="74:11">len</name> <operator pos:start="74:13" pos:end="74:13">=</operator> <call pos:start="74:15" pos:end="74:59"><name pos:start="74:15" pos:end="74:31">usb_handle_packet</name><argument_list pos:start="74:32" pos:end="74:59">(<argument pos:start="74:33" pos:end="74:42"><expr pos:start="74:33" pos:end="74:42"><name pos:start="74:33" pos:end="74:42"><name pos:start="74:33" pos:end="74:33">q</name><operator pos:start="74:34" pos:end="74:35">-&gt;</operator><name pos:start="74:36" pos:end="74:37">ep</name><operator pos:start="74:38" pos:end="74:39">-&gt;</operator><name pos:start="74:40" pos:end="74:42">dev</name></name></expr></argument>, <argument pos:start="74:45" pos:end="74:58"><expr pos:start="74:45" pos:end="74:58"><operator pos:start="74:45" pos:end="74:45">&amp;</operator><name pos:start="74:46" pos:end="74:58"><name pos:start="74:46" pos:end="74:50">async</name><operator pos:start="74:51" pos:end="74:52">-&gt;</operator><name pos:start="74:53" pos:end="74:58">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="75:9" pos:end="75:14">break;</break>
    <default pos:start="76:5" pos:end="76:12">default:</default>
        <comment type="block" pos:start="77:9" pos:end="77:45">/* invalid pid : frame interrupted */</comment>
        <expr_stmt pos:start="78:9" pos:end="78:54"><expr pos:start="78:9" pos:end="78:53"><call pos:start="78:9" pos:end="78:53"><name pos:start="78:9" pos:end="78:24">usb_packet_unmap</name><argument_list pos:start="78:25" pos:end="78:53">(<argument pos:start="78:26" pos:end="78:39"><expr pos:start="78:26" pos:end="78:39"><operator pos:start="78:26" pos:end="78:26">&amp;</operator><name pos:start="78:27" pos:end="78:39"><name pos:start="78:27" pos:end="78:31">async</name><operator pos:start="78:32" pos:end="78:33">-&gt;</operator><name pos:start="78:34" pos:end="78:39">packet</name></name></expr></argument>, <argument pos:start="78:42" pos:end="78:52"><expr pos:start="78:42" pos:end="78:52"><operator pos:start="78:42" pos:end="78:42">&amp;</operator><name pos:start="78:43" pos:end="78:52"><name pos:start="78:43" pos:end="78:47">async</name><operator pos:start="78:48" pos:end="78:49">-&gt;</operator><name pos:start="78:50" pos:end="78:52">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><call pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:23">uhci_async_free</name><argument_list pos:start="79:24" pos:end="79:30">(<argument pos:start="79:25" pos:end="79:29"><expr pos:start="79:25" pos:end="79:29"><name pos:start="79:25" pos:end="79:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="80:9" pos:end="80:37"><expr pos:start="80:9" pos:end="80:36"><name pos:start="80:9" pos:end="80:17"><name pos:start="80:9" pos:end="80:9">s</name><operator pos:start="80:10" pos:end="80:11">-&gt;</operator><name pos:start="80:12" pos:end="80:17">status</name></name> <operator pos:start="80:19" pos:end="80:20">|=</operator> <name pos:start="80:22" pos:end="80:36">UHCI_STS_HCPERR</name></expr>;</expr_stmt>
        <expr_stmt pos:start="81:9" pos:end="81:27"><expr pos:start="81:9" pos:end="81:26"><call pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:23">uhci_update_irq</name><argument_list pos:start="81:24" pos:end="81:26">(<argument pos:start="81:25" pos:end="81:25"><expr pos:start="81:25" pos:end="81:25"><name pos:start="81:25" pos:end="81:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="82:9" pos:end="82:36">return <expr pos:start="82:16" pos:end="82:35"><name pos:start="82:16" pos:end="82:35">TD_RESULT_STOP_FRAME</name></expr>;</return>
    <if_stmt pos:start="83:5" pos:end="93:15"><if pos:start="83:5" pos:end="93:15">if <condition pos:start="83:8" pos:end="83:29">(<expr pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:11">len</name> <operator pos:start="83:13" pos:end="83:14">==</operator> <name pos:start="83:16" pos:end="83:28">USB_RET_ASYNC</name></expr>)</condition> <block pos:start="83:31" pos:end="93:15">{<block_content pos:start="84:9" pos:end="93:15">
        <expr_stmt pos:start="84:9" pos:end="84:31"><expr pos:start="84:9" pos:end="84:30"><call pos:start="84:9" pos:end="84:30"><name pos:start="84:9" pos:end="84:23">uhci_async_link</name><argument_list pos:start="84:24" pos:end="84:30">(<argument pos:start="84:25" pos:end="84:29"><expr pos:start="84:25" pos:end="84:29"><name pos:start="84:25" pos:end="84:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="85:9" pos:end="93:15"><if pos:start="85:9" pos:end="93:15">if <condition pos:start="85:12" pos:end="85:21">(<expr pos:start="85:13" pos:end="85:20"><operator pos:start="85:13" pos:end="85:13">!</operator><name pos:start="85:14" pos:end="85:20">queuing</name></expr>)</condition> <block pos:start="85:23" pos:end="93:15">{<block_content pos:start="86:13" pos:end="93:15">
            <expr_stmt pos:start="86:13" pos:end="86:35"><expr pos:start="86:13" pos:end="86:34"><call pos:start="86:13" pos:end="86:34"><name pos:start="86:13" pos:end="86:27">uhci_queue_fill</name><argument_list pos:start="86:28" pos:end="86:34">(<argument pos:start="86:29" pos:end="86:29"><expr pos:start="86:29" pos:end="86:29"><name pos:start="86:29" pos:end="86:29">q</name></expr></argument>, <argument pos:start="86:32" pos:end="86:33"><expr pos:start="86:32" pos:end="86:33"><name pos:start="86:32" pos:end="86:33">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="87:9" pos:end="87:37">return <expr pos:start="87:16" pos:end="87:36"><name pos:start="87:16" pos:end="87:36">TD_RESULT_ASYNC_START</name></expr>;</return>
    <expr_stmt pos:start="88:5" pos:end="88:31"><expr pos:start="88:5" pos:end="88:30"><name pos:start="88:5" pos:end="88:24"><name pos:start="88:5" pos:end="88:9">async</name><operator pos:start="88:10" pos:end="88:11">-&gt;</operator><name pos:start="88:12" pos:end="88:17">packet</name><operator pos:start="88:18" pos:end="88:18">.</operator><name pos:start="88:19" pos:end="88:24">result</name></name> <operator pos:start="88:26" pos:end="88:26">=</operator> <name pos:start="88:28" pos:end="88:30">len</name></expr>;</expr_stmt>
<label pos:start="89:1" pos:end="89:5"><name pos:start="89:1" pos:end="89:4">done</name>:</label>
    <expr_stmt pos:start="90:5" pos:end="90:51"><expr pos:start="90:5" pos:end="90:50"><name pos:start="90:5" pos:end="90:7">len</name> <operator pos:start="90:9" pos:end="90:9">=</operator> <call pos:start="90:11" pos:end="90:50"><name pos:start="90:11" pos:end="90:26">uhci_complete_td</name><argument_list pos:start="90:27" pos:end="90:50">(<argument pos:start="90:28" pos:end="90:28"><expr pos:start="90:28" pos:end="90:28"><name pos:start="90:28" pos:end="90:28">s</name></expr></argument>, <argument pos:start="90:31" pos:end="90:32"><expr pos:start="90:31" pos:end="90:32"><name pos:start="90:31" pos:end="90:32">td</name></expr></argument>, <argument pos:start="90:35" pos:end="90:39"><expr pos:start="90:35" pos:end="90:39"><name pos:start="90:35" pos:end="90:39">async</name></expr></argument>, <argument pos:start="90:42" pos:end="90:49"><expr pos:start="90:42" pos:end="90:49"><name pos:start="90:42" pos:end="90:49">int_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:50"><expr pos:start="91:5" pos:end="91:49"><call pos:start="91:5" pos:end="91:49"><name pos:start="91:5" pos:end="91:20">usb_packet_unmap</name><argument_list pos:start="91:21" pos:end="91:49">(<argument pos:start="91:22" pos:end="91:35"><expr pos:start="91:22" pos:end="91:35"><operator pos:start="91:22" pos:end="91:22">&amp;</operator><name pos:start="91:23" pos:end="91:35"><name pos:start="91:23" pos:end="91:27">async</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:35">packet</name></name></expr></argument>, <argument pos:start="91:38" pos:end="91:48"><expr pos:start="91:38" pos:end="91:48"><operator pos:start="91:38" pos:end="91:38">&amp;</operator><name pos:start="91:39" pos:end="91:48"><name pos:start="91:39" pos:end="91:43">async</name><operator pos:start="91:44" pos:end="91:45">-&gt;</operator><name pos:start="91:46" pos:end="91:48">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:27"><expr pos:start="92:5" pos:end="92:26"><call pos:start="92:5" pos:end="92:26"><name pos:start="92:5" pos:end="92:19">uhci_async_free</name><argument_list pos:start="92:20" pos:end="92:26">(<argument pos:start="92:21" pos:end="92:25"><expr pos:start="92:21" pos:end="92:25"><name pos:start="92:21" pos:end="92:25">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="93:5" pos:end="93:15">return <expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">len</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
