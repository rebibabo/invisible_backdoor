<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23620.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:35">handle_cpu_signal</name><parameter_list pos:start="1:36" pos:end="3:68">(<parameter pos:start="1:37" pos:end="1:52"><decl pos:start="1:37" pos:end="1:52"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:44">unsigned</name> <name pos:start="1:46" pos:end="1:49">long</name></type> <name pos:start="1:51" pos:end="1:52">pc</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:75"><decl pos:start="1:55" pos:end="1:75"><type pos:start="1:55" pos:end="1:75"><name pos:start="1:55" pos:end="1:62">unsigned</name> <name pos:start="1:64" pos:end="1:67">long</name></type> <name pos:start="1:69" pos:end="1:75">address</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:48"><decl pos:start="3:37" pos:end="3:48"><type pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:48">is_write</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:67"><decl pos:start="3:51" pos:end="3:67"><type pos:start="3:51" pos:end="3:67"><name pos:start="3:51" pos:end="3:58">sigset_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:67">old_set</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:5">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">TranslationBlock</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">found_pc</name></decl>;</decl_stmt>

    

<cpp:if pos:start="15:1" pos:end="15:25">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:25">(<argument pos:start="15:13" pos:end="15:24"><expr pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:24">DEBUG_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="17:5" pos:end="22:0"><expr pos:start="17:5" pos:end="19:60"><call pos:start="17:5" pos:end="19:60"><name pos:start="17:5" pos:end="17:10">printf</name><argument_list pos:start="17:11" pos:end="19:60">(<argument pos:start="17:12" pos:end="17:74"><expr pos:start="17:12" pos:end="17:74"><literal type="string" pos:start="17:12" pos:end="17:74">"qemu: SIGSEGV pc=0x%08lx address=%08lx wr=%d oldset=0x%08lx\n"</literal></expr></argument>, 

           <argument pos:start="19:12" pos:end="19:13"><expr pos:start="19:12" pos:end="19:13"><name pos:start="19:12" pos:end="19:13">pc</name></expr></argument>, <argument pos:start="19:16" pos:end="19:22"><expr pos:start="19:16" pos:end="19:22"><name pos:start="19:16" pos:end="19:22">address</name></expr></argument>, <argument pos:start="19:25" pos:end="19:32"><expr pos:start="19:25" pos:end="19:32"><name pos:start="19:25" pos:end="19:32">is_write</name></expr></argument>, <argument pos:start="19:35" pos:end="19:59"><expr pos:start="19:35" pos:end="19:59"><operator pos:start="19:35" pos:end="19:35">*</operator><operator pos:start="19:36" pos:end="19:36">(</operator><name pos:start="19:37" pos:end="19:44">unsigned</name> <name pos:start="19:46" pos:end="19:49">long</name> <operator pos:start="19:51" pos:end="19:51">*</operator><operator pos:start="19:52" pos:end="19:52">)</operator><name pos:start="19:53" pos:end="19:59">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="23:5" pos:end="23:28">/* XXX: locking issue */</comment>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:44">(<expr pos:start="25:9" pos:end="25:43"><name pos:start="25:9" pos:end="25:16">is_write</name> <operator pos:start="25:18" pos:end="25:19">&amp;&amp;</operator> <call pos:start="25:21" pos:end="25:43"><name pos:start="25:21" pos:end="25:34">page_unprotect</name><argument_list pos:start="25:35" pos:end="25:43">(<argument pos:start="25:36" pos:end="25:42"><expr pos:start="25:36" pos:end="25:42"><name pos:start="25:36" pos:end="25:42">address</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:46" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:17">

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:24"><expr pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:6">tb</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:23"><name pos:start="31:10" pos:end="31:19">tb_find_pc</name><argument_list pos:start="31:20" pos:end="31:23">(<argument pos:start="31:21" pos:end="31:22"><expr pos:start="31:21" pos:end="31:22"><name pos:start="31:21" pos:end="31:22">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="65:5"><if pos:start="33:5" pos:end="61:5">if <condition pos:start="33:8" pos:end="33:11">(<expr pos:start="33:9" pos:end="33:10"><name pos:start="33:9" pos:end="33:10">tb</name></expr>)</condition> <block pos:start="33:13" pos:end="61:5">{<block_content pos:start="39:9" pos:end="59:17">

        <comment type="block" pos:start="35:9" pos:end="37:33">/* the PC is inside the translated code. It means that we have

           a virtual CPU fault */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:51"><expr pos:start="39:9" pos:end="39:50"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:50"><name pos:start="39:15" pos:end="39:31">cpu_x86_search_pc</name><argument_list pos:start="39:32" pos:end="39:50">(<argument pos:start="39:33" pos:end="39:34"><expr pos:start="39:33" pos:end="39:34"><name pos:start="39:33" pos:end="39:34">tb</name></expr></argument>, <argument pos:start="39:37" pos:end="39:45"><expr pos:start="39:37" pos:end="39:45"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:45">found_pc</name></expr></argument>, <argument pos:start="39:48" pos:end="39:49"><expr pos:start="39:48" pos:end="39:49"><name pos:start="39:48" pos:end="39:49">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:21"><if pos:start="41:9" pos:end="43:21">if <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">&lt;</operator> <literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:21"><block_content pos:start="43:13" pos:end="43:21">

            <return pos:start="43:13" pos:end="43:21">return <expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:11">env</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:16">eip</name></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <name pos:start="45:20" pos:end="45:27">found_pc</name> <operator pos:start="45:29" pos:end="45:29">-</operator> <name pos:start="45:31" pos:end="45:41"><name pos:start="45:31" pos:end="45:32">tb</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:41">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:27"><expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">env</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:16">cr2</name></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:26">address</name></expr>;</expr_stmt>

        <comment type="block" pos:start="49:9" pos:end="51:40">/* we restore the process signal mask as the sigreturn should

           do it (XXX: use sigsetjmp) */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:48"><expr pos:start="53:9" pos:end="53:47"><call pos:start="53:9" pos:end="53:47"><name pos:start="53:9" pos:end="53:19">sigprocmask</name><argument_list pos:start="53:20" pos:end="53:47">(<argument pos:start="53:21" pos:end="53:31"><expr pos:start="53:21" pos:end="53:31"><name pos:start="53:21" pos:end="53:31">SIG_SETMASK</name></expr></argument>, <argument pos:start="53:34" pos:end="53:40"><expr pos:start="53:34" pos:end="53:40"><name pos:start="53:34" pos:end="53:40">old_set</name></expr></argument>, <argument pos:start="53:43" pos:end="53:46"><expr pos:start="53:43" pos:end="53:46"><name pos:start="53:43" pos:end="53:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:62"><expr pos:start="55:9" pos:end="55:61"><call pos:start="55:9" pos:end="55:61"><name pos:start="55:9" pos:end="55:27">raise_exception_err</name><argument_list pos:start="55:28" pos:end="55:61">(<argument pos:start="55:29" pos:end="55:39"><expr pos:start="55:29" pos:end="55:39"><name pos:start="55:29" pos:end="55:39">EXCP0E_PAGE</name></expr></argument>, <argument pos:start="55:42" pos:end="55:60"><expr pos:start="55:42" pos:end="55:60"><literal type="number" pos:start="55:42" pos:end="55:42">4</literal> <operator pos:start="55:44" pos:end="55:44">|</operator> <operator pos:start="55:46" pos:end="55:46">(</operator><name pos:start="55:47" pos:end="55:54">is_write</name> <operator pos:start="55:56" pos:end="55:57">&lt;&lt;</operator> <literal type="number" pos:start="55:59" pos:end="55:59">1</literal><operator pos:start="55:60" pos:end="55:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="57:9" pos:end="57:30">/* never comes here */</comment>

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">1</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="65:5">else <block pos:start="61:12" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:17">

        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
