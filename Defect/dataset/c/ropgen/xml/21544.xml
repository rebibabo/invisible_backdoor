<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21544.c" pos:tabs="8"><function pos:start="1:1" pos:end="253:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">handle_vm86_fault</name><parameter_list pos:start="1:23" pos:end="1:40">(<parameter pos:start="1:24" pos:end="1:39"><decl pos:start="1:24" pos:end="1:39"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:34">CPUX86State</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="253:1">{<block_content pos:start="5:5" pos:end="251:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">TaskState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">ts</name> <init pos:start="5:19" pos:end="5:31">= <expr pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:23">env</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:31">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">csp</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:13"><modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">pc</name></decl>, <decl pos:start="7:24" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:13"><modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">ssp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:19">ip</name></decl>, <decl pos:start="9:22" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:22" pos:end="9:23">sp</name></decl>, <decl pos:start="9:26" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:26" pos:end="9:33">newflags</name></decl>, <decl pos:start="9:36" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:36" pos:end="9:40">newip</name></decl>, <decl pos:start="9:43" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:43" pos:end="9:47">newcs</name></decl>, <decl pos:start="9:50" pos:end="9:55"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:50" pos:end="9:55">opcode</name></decl>, <decl pos:start="9:58" pos:end="9:62"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:58" pos:end="9:62">intno</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">data32</name></decl>, <decl pos:start="11:17" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:25">pref_done</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:44"><expr pos:start="15:5" pos:end="15:43"><name pos:start="15:5" pos:end="15:7">csp</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <operator pos:start="15:11" pos:end="15:11">(</operator><name pos:start="15:12" pos:end="15:18">uint8_t</name> <operator pos:start="15:20" pos:end="15:20">*</operator><operator pos:start="15:21" pos:end="15:21">)</operator><operator pos:start="15:22" pos:end="15:22">(</operator><name pos:start="15:23" pos:end="15:37"><name pos:start="15:23" pos:end="15:25">env</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:31">segs</name><index pos:start="15:32" pos:end="15:37">[<expr pos:start="15:33" pos:end="15:36"><name pos:start="15:33" pos:end="15:36">R_CS</name></expr>]</index></name> <operator pos:start="15:39" pos:end="15:40">&lt;&lt;</operator> <literal type="number" pos:start="15:42" pos:end="15:42">4</literal><operator pos:start="15:43" pos:end="15:43">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:27"><expr pos:start="17:5" pos:end="17:26"><name pos:start="17:5" pos:end="17:6">ip</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <name pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:12">env</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:17">eip</name></name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <literal type="number" pos:start="17:21" pos:end="17:26">0xffff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:18"><expr pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:6">pc</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <name pos:start="19:10" pos:end="19:12">csp</name> <operator pos:start="19:14" pos:end="19:14">+</operator> <name pos:start="19:16" pos:end="19:17">ip</name></expr>;</expr_stmt>

    

    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:7">ssp</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <operator pos:start="23:11" pos:end="23:11">(</operator><name pos:start="23:12" pos:end="23:18">uint8_t</name> <operator pos:start="23:20" pos:end="23:20">*</operator><operator pos:start="23:21" pos:end="23:21">)</operator><operator pos:start="23:22" pos:end="23:22">(</operator><name pos:start="23:23" pos:end="23:37"><name pos:start="23:23" pos:end="23:25">env</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:31">segs</name><index pos:start="23:32" pos:end="23:37">[<expr pos:start="23:33" pos:end="23:36"><name pos:start="23:33" pos:end="23:36">R_SS</name></expr>]</index></name> <operator pos:start="23:39" pos:end="23:40">&lt;&lt;</operator> <literal type="number" pos:start="23:42" pos:end="23:42">4</literal><operator pos:start="23:43" pos:end="23:43">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="30:0"><expr pos:start="25:5" pos:end="25:34"><name pos:start="25:5" pos:end="25:6">sp</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <name pos:start="25:10" pos:end="25:25"><name pos:start="25:10" pos:end="25:12">env</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:18">regs</name><index pos:start="25:19" pos:end="25:25">[<expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:24">R_ESP</name></expr>]</index></name> <operator pos:start="25:27" pos:end="25:27">&amp;</operator> <literal type="number" pos:start="25:29" pos:end="25:34">0xffff</literal></expr>;</expr_stmt>



<cpp:if pos:start="29:1" pos:end="29:23">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:23"><call pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:11">defined</name><argument_list pos:start="29:12" pos:end="29:23">(<argument pos:start="29:13" pos:end="29:22"><expr pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:22">DEBUG_VM86</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="31:5" pos:end="36:0"><expr pos:start="31:5" pos:end="33:52"><call pos:start="31:5" pos:end="33:52"><name pos:start="31:5" pos:end="31:11">fprintf</name><argument_list pos:start="31:12" pos:end="33:52">(<argument pos:start="31:13" pos:end="31:19"><expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:19">logfile</name></expr></argument>, <argument pos:start="31:22" pos:end="31:59"><expr pos:start="31:22" pos:end="31:59"><literal type="string" pos:start="31:22" pos:end="31:59">"VM86 exception %04x:%08x %02x %02x\n"</literal></expr></argument>,

            <argument pos:start="33:13" pos:end="33:27"><expr pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:15">env</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:21">segs</name><index pos:start="33:22" pos:end="33:27">[<expr pos:start="33:23" pos:end="33:26"><name pos:start="33:23" pos:end="33:26">R_CS</name></expr>]</index></name></expr></argument>, <argument pos:start="33:30" pos:end="33:37"><expr pos:start="33:30" pos:end="33:37"><name pos:start="33:30" pos:end="33:37"><name pos:start="33:30" pos:end="33:32">env</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:37">eip</name></name></expr></argument>, <argument pos:start="33:40" pos:end="33:44"><expr pos:start="33:40" pos:end="33:44"><name pos:start="33:40" pos:end="33:44"><name pos:start="33:40" pos:end="33:41">pc</name><index pos:start="33:42" pos:end="33:44">[<expr pos:start="33:43" pos:end="33:43"><literal type="number" pos:start="33:43" pos:end="33:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="33:47" pos:end="33:51"><expr pos:start="33:47" pos:end="33:51"><name pos:start="33:47" pos:end="33:51"><name pos:start="33:47" pos:end="33:48">pc</name><index pos:start="33:49" pos:end="33:51">[<expr pos:start="33:50" pos:end="33:50"><literal type="number" pos:start="33:50" pos:end="33:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="39:5" pos:end="39:15"><expr pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:10">data32</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:18"><expr pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:13">pref_done</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr>;</expr_stmt>

    <do pos:start="43:5" pos:end="75:25">do <block pos:start="43:8" pos:end="75:5">{<block_content pos:start="45:9" pos:end="73:9">

        <expr_stmt pos:start="45:9" pos:end="45:25"><expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:14">opcode</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:24"><name pos:start="45:18" pos:end="45:20">csp</name><index pos:start="45:21" pos:end="45:24">[<expr pos:start="45:22" pos:end="45:23"><name pos:start="45:22" pos:end="45:23">ip</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:21"><expr pos:start="47:9" pos:end="47:20"><call pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:13">ADD16</name><argument_list pos:start="47:14" pos:end="47:20">(<argument pos:start="47:15" pos:end="47:16"><expr pos:start="47:15" pos:end="47:16"><name pos:start="47:15" pos:end="47:16">ip</name></expr></argument>, <argument pos:start="47:19" pos:end="47:19"><expr pos:start="47:19" pos:end="47:19"><literal type="number" pos:start="47:19" pos:end="47:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="49:9" pos:end="73:9">switch <condition pos:start="49:16" pos:end="49:23">(<expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">opcode</name></expr>)</condition> <block pos:start="49:25" pos:end="73:9">{<block_content pos:start="51:9" pos:end="71:31">

        <case pos:start="51:9" pos:end="51:18">case <expr pos:start="51:14" pos:end="51:17"><literal type="number" pos:start="51:14" pos:end="51:17">0x66</literal></expr>:</case>      <comment type="block" pos:start="51:25" pos:end="51:41">/* 32-bit data */</comment>     <expr_stmt pos:start="51:47" pos:end="51:55"><expr pos:start="51:47" pos:end="51:54"><name pos:start="51:47" pos:end="51:52">data32</name><operator pos:start="51:53" pos:end="51:53">=</operator><literal type="number" pos:start="51:54" pos:end="51:54">1</literal></expr>;</expr_stmt> <break pos:start="51:57" pos:end="51:62">break;</break>

        <case pos:start="53:9" pos:end="53:18">case <expr pos:start="53:14" pos:end="53:17"><literal type="number" pos:start="53:14" pos:end="53:17">0x67</literal></expr>:</case>      <comment type="block" pos:start="53:25" pos:end="53:44">/* 32-bit address */</comment>  <break pos:start="53:47" pos:end="53:52">break;</break>

        <case pos:start="55:9" pos:end="55:18">case <expr pos:start="55:14" pos:end="55:17"><literal type="number" pos:start="55:14" pos:end="55:17">0x2e</literal></expr>:</case>      <comment type="block" pos:start="55:25" pos:end="55:32">/* CS */</comment>              <break pos:start="55:47" pos:end="55:52">break;</break>

        <case pos:start="57:9" pos:end="57:18">case <expr pos:start="57:14" pos:end="57:17"><literal type="number" pos:start="57:14" pos:end="57:17">0x3e</literal></expr>:</case>      <comment type="block" pos:start="57:25" pos:end="57:32">/* DS */</comment>              <break pos:start="57:47" pos:end="57:52">break;</break>

        <case pos:start="59:9" pos:end="59:18">case <expr pos:start="59:14" pos:end="59:17"><literal type="number" pos:start="59:14" pos:end="59:17">0x26</literal></expr>:</case>      <comment type="block" pos:start="59:25" pos:end="59:32">/* ES */</comment>              <break pos:start="59:47" pos:end="59:52">break;</break>

        <case pos:start="61:9" pos:end="61:18">case <expr pos:start="61:14" pos:end="61:17"><literal type="number" pos:start="61:14" pos:end="61:17">0x36</literal></expr>:</case>      <comment type="block" pos:start="61:25" pos:end="61:32">/* SS */</comment>              <break pos:start="61:47" pos:end="61:52">break;</break>

        <case pos:start="63:9" pos:end="63:18">case <expr pos:start="63:14" pos:end="63:17"><literal type="number" pos:start="63:14" pos:end="63:17">0x65</literal></expr>:</case>      <comment type="block" pos:start="63:25" pos:end="63:32">/* GS */</comment>              <break pos:start="63:47" pos:end="63:52">break;</break>

        <case pos:start="65:9" pos:end="65:18">case <expr pos:start="65:14" pos:end="65:17"><literal type="number" pos:start="65:14" pos:end="65:17">0x64</literal></expr>:</case>      <comment type="block" pos:start="65:25" pos:end="65:32">/* FS */</comment>              <break pos:start="65:47" pos:end="65:52">break;</break>

        <case pos:start="67:9" pos:end="67:18">case <expr pos:start="67:14" pos:end="67:17"><literal type="number" pos:start="67:14" pos:end="67:17">0xf2</literal></expr>:</case>      <comment type="block" pos:start="67:25" pos:end="67:35">/* repnz */</comment>	      <break pos:start="67:47" pos:end="67:52">break;</break>

        <case pos:start="69:9" pos:end="69:18">case <expr pos:start="69:14" pos:end="69:17"><literal type="number" pos:start="69:14" pos:end="69:17">0xf3</literal></expr>:</case>      <comment type="block" pos:start="69:25" pos:end="69:33">/* rep */</comment>             <break pos:start="69:47" pos:end="69:52">break;</break>

        <default pos:start="71:9" pos:end="71:16">default:</default> <expr_stmt pos:start="71:18" pos:end="71:31"><expr pos:start="71:18" pos:end="71:30"><name pos:start="71:18" pos:end="71:26">pref_done</name> <operator pos:start="71:28" pos:end="71:28">=</operator> <literal type="number" pos:start="71:30" pos:end="71:30">1</literal></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block> while <condition pos:start="75:13" pos:end="75:24">(<expr pos:start="75:14" pos:end="75:23"><operator pos:start="75:14" pos:end="75:14">!</operator><name pos:start="75:15" pos:end="75:23">pref_done</name></expr>)</condition>;</do>



    <comment type="block" pos:start="79:5" pos:end="79:19">/* VM86 mode */</comment>

    <switch pos:start="81:5" pos:end="251:5">switch<condition pos:start="81:11" pos:end="81:18">(<expr pos:start="81:12" pos:end="81:17"><name pos:start="81:12" pos:end="81:17">opcode</name></expr>)</condition> <block pos:start="81:20" pos:end="251:5">{<block_content pos:start="83:5" pos:end="249:14">

    <case pos:start="83:5" pos:end="83:14">case <expr pos:start="83:10" pos:end="83:13"><literal type="number" pos:start="83:10" pos:end="83:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="83:16" pos:end="83:26">/* pushf */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:27"><expr pos:start="85:9" pos:end="85:26"><call pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:13">ADD16</name><argument_list pos:start="85:14" pos:end="85:26">(<argument pos:start="85:15" pos:end="85:22"><expr pos:start="85:15" pos:end="85:22"><name pos:start="85:15" pos:end="85:22"><name pos:start="85:15" pos:end="85:17">env</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:22">eip</name></name></expr></argument>, <argument pos:start="85:25" pos:end="85:25"><expr pos:start="85:25" pos:end="85:25"><literal type="number" pos:start="85:25" pos:end="85:25">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="99:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:19">(<expr pos:start="87:13" pos:end="87:18"><name pos:start="87:13" pos:end="87:18">data32</name></expr>)</condition> <block pos:start="87:21" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:40">

            <expr_stmt pos:start="89:13" pos:end="89:50"><expr pos:start="89:13" pos:end="89:49"><call pos:start="89:13" pos:end="89:49"><name pos:start="89:13" pos:end="89:19">vm_putl</name><argument_list pos:start="89:20" pos:end="89:49">(<argument pos:start="89:21" pos:end="89:23"><expr pos:start="89:21" pos:end="89:23"><name pos:start="89:21" pos:end="89:23">ssp</name></expr></argument>, <argument pos:start="89:26" pos:end="89:31"><expr pos:start="89:26" pos:end="89:31"><name pos:start="89:26" pos:end="89:27">sp</name> <operator pos:start="89:29" pos:end="89:29">-</operator> <literal type="number" pos:start="89:31" pos:end="89:31">4</literal></expr></argument>, <argument pos:start="89:34" pos:end="89:48"><expr pos:start="89:34" pos:end="89:48"><call pos:start="89:34" pos:end="89:48"><name pos:start="89:34" pos:end="89:43">get_vflags</name><argument_list pos:start="89:44" pos:end="89:48">(<argument pos:start="89:45" pos:end="89:47"><expr pos:start="89:45" pos:end="89:47"><name pos:start="89:45" pos:end="89:47">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:40"><expr pos:start="91:13" pos:end="91:39"><call pos:start="91:13" pos:end="91:39"><name pos:start="91:13" pos:end="91:17">ADD16</name><argument_list pos:start="91:18" pos:end="91:39">(<argument pos:start="91:19" pos:end="91:34"><expr pos:start="91:19" pos:end="91:34"><name pos:start="91:19" pos:end="91:34"><name pos:start="91:19" pos:end="91:21">env</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:27">regs</name><index pos:start="91:28" pos:end="91:34">[<expr pos:start="91:29" pos:end="91:33"><name pos:start="91:29" pos:end="91:33">R_ESP</name></expr>]</index></name></expr></argument>, <argument pos:start="91:37" pos:end="91:38"><expr pos:start="91:37" pos:end="91:38"><operator pos:start="91:37" pos:end="91:37">-</operator><literal type="number" pos:start="91:38" pos:end="91:38">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="99:9">else <block pos:start="93:16" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:40">

            <expr_stmt pos:start="95:13" pos:end="95:50"><expr pos:start="95:13" pos:end="95:49"><call pos:start="95:13" pos:end="95:49"><name pos:start="95:13" pos:end="95:19">vm_putw</name><argument_list pos:start="95:20" pos:end="95:49">(<argument pos:start="95:21" pos:end="95:23"><expr pos:start="95:21" pos:end="95:23"><name pos:start="95:21" pos:end="95:23">ssp</name></expr></argument>, <argument pos:start="95:26" pos:end="95:31"><expr pos:start="95:26" pos:end="95:31"><name pos:start="95:26" pos:end="95:27">sp</name> <operator pos:start="95:29" pos:end="95:29">-</operator> <literal type="number" pos:start="95:31" pos:end="95:31">2</literal></expr></argument>, <argument pos:start="95:34" pos:end="95:48"><expr pos:start="95:34" pos:end="95:48"><call pos:start="95:34" pos:end="95:48"><name pos:start="95:34" pos:end="95:43">get_vflags</name><argument_list pos:start="95:44" pos:end="95:48">(<argument pos:start="95:45" pos:end="95:47"><expr pos:start="95:45" pos:end="95:47"><name pos:start="95:45" pos:end="95:47">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:40"><expr pos:start="97:13" pos:end="97:39"><call pos:start="97:13" pos:end="97:39"><name pos:start="97:13" pos:end="97:17">ADD16</name><argument_list pos:start="97:18" pos:end="97:39">(<argument pos:start="97:19" pos:end="97:34"><expr pos:start="97:19" pos:end="97:34"><name pos:start="97:19" pos:end="97:34"><name pos:start="97:19" pos:end="97:21">env</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:27">regs</name><index pos:start="97:28" pos:end="97:34">[<expr pos:start="97:29" pos:end="97:33"><name pos:start="97:29" pos:end="97:33">R_ESP</name></expr>]</index></name></expr></argument>, <argument pos:start="97:37" pos:end="97:38"><expr pos:start="97:37" pos:end="97:38"><operator pos:start="97:37" pos:end="97:37">-</operator><literal type="number" pos:start="97:38" pos:end="97:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:22"><expr pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:11">env</name><operator pos:start="101:12" pos:end="101:13">-&gt;</operator><name pos:start="101:14" pos:end="101:16">eip</name></name> <operator pos:start="101:18" pos:end="101:18">=</operator> <name pos:start="101:20" pos:end="101:21">ip</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:26"><expr pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:25">VM86_FAULT_RETURN</name></expr>;</expr_stmt>



    <case pos:start="107:5" pos:end="107:14">case <expr pos:start="107:10" pos:end="107:13"><literal type="number" pos:start="107:10" pos:end="107:13">0x9d</literal></expr>:</case> <comment type="block" pos:start="107:16" pos:end="107:25">/* popf */</comment>

        <if_stmt pos:start="109:9" pos:end="121:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:19">(<expr pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:18">data32</name></expr>)</condition> <block pos:start="109:21" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:39">

            <expr_stmt pos:start="111:13" pos:end="111:40"><expr pos:start="111:13" pos:end="111:39"><name pos:start="111:13" pos:end="111:20">newflags</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <call pos:start="111:24" pos:end="111:39"><name pos:start="111:24" pos:end="111:30">vm_getl</name><argument_list pos:start="111:31" pos:end="111:39">(<argument pos:start="111:32" pos:end="111:34"><expr pos:start="111:32" pos:end="111:34"><name pos:start="111:32" pos:end="111:34">ssp</name></expr></argument>, <argument pos:start="111:37" pos:end="111:38"><expr pos:start="111:37" pos:end="111:38"><name pos:start="111:37" pos:end="111:38">sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:39"><expr pos:start="113:13" pos:end="113:38"><call pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:17">ADD16</name><argument_list pos:start="113:18" pos:end="113:38">(<argument pos:start="113:19" pos:end="113:34"><expr pos:start="113:19" pos:end="113:34"><name pos:start="113:19" pos:end="113:34"><name pos:start="113:19" pos:end="113:21">env</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:27">regs</name><index pos:start="113:28" pos:end="113:34">[<expr pos:start="113:29" pos:end="113:33"><name pos:start="113:29" pos:end="113:33">R_ESP</name></expr>]</index></name></expr></argument>, <argument pos:start="113:37" pos:end="113:37"><expr pos:start="113:37" pos:end="113:37"><literal type="number" pos:start="113:37" pos:end="113:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="121:9">else <block pos:start="115:16" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:39">

            <expr_stmt pos:start="117:13" pos:end="117:40"><expr pos:start="117:13" pos:end="117:39"><name pos:start="117:13" pos:end="117:20">newflags</name> <operator pos:start="117:22" pos:end="117:22">=</operator> <call pos:start="117:24" pos:end="117:39"><name pos:start="117:24" pos:end="117:30">vm_getw</name><argument_list pos:start="117:31" pos:end="117:39">(<argument pos:start="117:32" pos:end="117:34"><expr pos:start="117:32" pos:end="117:34"><name pos:start="117:32" pos:end="117:34">ssp</name></expr></argument>, <argument pos:start="117:37" pos:end="117:38"><expr pos:start="117:37" pos:end="117:38"><name pos:start="117:37" pos:end="117:38">sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:39"><expr pos:start="119:13" pos:end="119:38"><call pos:start="119:13" pos:end="119:38"><name pos:start="119:13" pos:end="119:17">ADD16</name><argument_list pos:start="119:18" pos:end="119:38">(<argument pos:start="119:19" pos:end="119:34"><expr pos:start="119:19" pos:end="119:34"><name pos:start="119:19" pos:end="119:34"><name pos:start="119:19" pos:end="119:21">env</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:27">regs</name><index pos:start="119:28" pos:end="119:34">[<expr pos:start="119:29" pos:end="119:33"><name pos:start="119:29" pos:end="119:33">R_ESP</name></expr>]</index></name></expr></argument>, <argument pos:start="119:37" pos:end="119:37"><expr pos:start="119:37" pos:end="119:37"><literal type="number" pos:start="119:37" pos:end="119:37">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:22"><expr pos:start="123:9" pos:end="123:21"><name pos:start="123:9" pos:end="123:16"><name pos:start="123:9" pos:end="123:11">env</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:16">eip</name></name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:21">ip</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:27"><expr pos:start="125:9" pos:end="125:26"><call pos:start="125:9" pos:end="125:26"><name pos:start="125:9" pos:end="125:24">CHECK_IF_IN_TRAP</name><argument_list pos:start="125:25" pos:end="125:26">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="139:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:19">(<expr pos:start="127:13" pos:end="127:18"><name pos:start="127:13" pos:end="127:18">data32</name></expr>)</condition> <block pos:start="127:21" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:23">

            <if_stmt pos:start="129:13" pos:end="131:23"><if pos:start="129:13" pos:end="131:23">if <condition pos:start="129:16" pos:end="129:47">(<expr pos:start="129:17" pos:end="129:46"><call pos:start="129:17" pos:end="129:46"><name pos:start="129:17" pos:end="129:31">set_vflags_long</name><argument_list pos:start="129:32" pos:end="129:46">(<argument pos:start="129:33" pos:end="129:40"><expr pos:start="129:33" pos:end="129:40"><name pos:start="129:33" pos:end="129:40">newflags</name></expr></argument>, <argument pos:start="129:43" pos:end="129:45"><expr pos:start="129:43" pos:end="129:45"><name pos:start="129:43" pos:end="129:45">env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:23"><block_content pos:start="131:17" pos:end="131:23">

                <return pos:start="131:17" pos:end="131:23">return;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="133:11" pos:end="139:9">else <block pos:start="133:16" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:23">

            <if_stmt pos:start="135:13" pos:end="137:23"><if pos:start="135:13" pos:end="137:23">if <condition pos:start="135:16" pos:end="135:48">(<expr pos:start="135:17" pos:end="135:47"><call pos:start="135:17" pos:end="135:47"><name pos:start="135:17" pos:end="135:32">set_vflags_short</name><argument_list pos:start="135:33" pos:end="135:47">(<argument pos:start="135:34" pos:end="135:41"><expr pos:start="135:34" pos:end="135:41"><name pos:start="135:34" pos:end="135:41">newflags</name></expr></argument>, <argument pos:start="135:44" pos:end="135:46"><expr pos:start="135:44" pos:end="135:46"><name pos:start="135:44" pos:end="135:46">env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:23"><block_content pos:start="137:17" pos:end="137:23">

                <return pos:start="137:17" pos:end="137:23">return;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:26"><expr pos:start="141:9" pos:end="141:25"><name pos:start="141:9" pos:end="141:25">VM86_FAULT_RETURN</name></expr>;</expr_stmt>



    <case pos:start="145:5" pos:end="145:14">case <expr pos:start="145:10" pos:end="145:13"><literal type="number" pos:start="145:10" pos:end="145:13">0xcd</literal></expr>:</case> <comment type="block" pos:start="145:16" pos:end="145:24">/* int */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:24"><expr pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:13">intno</name> <operator pos:start="147:15" pos:end="147:15">=</operator> <name pos:start="147:17" pos:end="147:23"><name pos:start="147:17" pos:end="147:19">csp</name><index pos:start="147:20" pos:end="147:23">[<expr pos:start="147:21" pos:end="147:22"><name pos:start="147:21" pos:end="147:22">ip</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:21"><expr pos:start="149:9" pos:end="149:20"><call pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:13">ADD16</name><argument_list pos:start="149:14" pos:end="149:20">(<argument pos:start="149:15" pos:end="149:16"><expr pos:start="149:15" pos:end="149:16"><name pos:start="149:15" pos:end="149:16">ip</name></expr></argument>, <argument pos:start="149:19" pos:end="149:19"><expr pos:start="149:19" pos:end="149:19"><literal type="number" pos:start="149:19" pos:end="149:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:22"><expr pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:11">env</name><operator pos:start="151:12" pos:end="151:13">-&gt;</operator><name pos:start="151:14" pos:end="151:16">eip</name></name> <operator pos:start="151:18" pos:end="151:18">=</operator> <name pos:start="151:20" pos:end="151:21">ip</name></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="165:9"><if pos:start="153:9" pos:end="165:9">if <condition pos:start="153:12" pos:end="153:64">(<expr pos:start="153:13" pos:end="153:63"><name pos:start="153:13" pos:end="153:39"><name pos:start="153:13" pos:end="153:14">ts</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:24">vm86plus</name><operator pos:start="153:25" pos:end="153:25">.</operator><name pos:start="153:26" pos:end="153:33">vm86plus</name><operator pos:start="153:34" pos:end="153:34">.</operator><name pos:start="153:35" pos:end="153:39">flags</name></name> <operator pos:start="153:41" pos:end="153:41">&amp;</operator> <name pos:start="153:43" pos:end="153:63">TARGET_vm86dbg_active</name></expr>)</condition> <block pos:start="153:66" pos:end="165:9">{<block_content pos:start="155:13" pos:end="163:13">

            <if_stmt pos:start="155:13" pos:end="163:13"><if pos:start="155:13" pos:end="163:13">if <condition pos:start="155:16" pos:end="157:34">( <expr pos:start="155:18" pos:end="157:33"><operator pos:start="155:18" pos:end="155:18">(</operator><name pos:start="155:19" pos:end="155:68"><name pos:start="155:19" pos:end="155:20">ts</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:30">vm86plus</name><operator pos:start="155:31" pos:end="155:31">.</operator><name pos:start="155:32" pos:end="155:39">vm86plus</name><operator pos:start="155:40" pos:end="155:40">.</operator><name pos:start="155:41" pos:end="155:56">vm86dbg_intxxtab</name><index pos:start="155:57" pos:end="155:68">[<expr pos:start="155:58" pos:end="155:67"><name pos:start="155:58" pos:end="155:62">intno</name> <operator pos:start="155:64" pos:end="155:65">&gt;&gt;</operator> <literal type="number" pos:start="155:67" pos:end="155:67">3</literal></expr>]</index></name> <operator pos:start="155:70" pos:end="155:71">&gt;&gt;</operator> 

                  <operator pos:start="157:19" pos:end="157:19">(</operator><name pos:start="157:20" pos:end="157:24">intno</name> <operator pos:start="157:26" pos:end="157:26">&amp;</operator><literal type="number" pos:start="157:27" pos:end="157:27">7</literal><operator pos:start="157:28" pos:end="157:28">)</operator><operator pos:start="157:29" pos:end="157:29">)</operator> <operator pos:start="157:31" pos:end="157:31">&amp;</operator> <literal type="number" pos:start="157:33" pos:end="157:33">1</literal></expr>)</condition> <block pos:start="157:36" pos:end="163:13">{<block_content pos:start="159:17" pos:end="161:23">

                <expr_stmt pos:start="159:17" pos:end="159:70"><expr pos:start="159:17" pos:end="159:69"><call pos:start="159:17" pos:end="159:69"><name pos:start="159:17" pos:end="159:31">return_to_32bit</name><argument_list pos:start="159:32" pos:end="159:69">(<argument pos:start="159:33" pos:end="159:35"><expr pos:start="159:33" pos:end="159:35"><name pos:start="159:33" pos:end="159:35">env</name></expr></argument>, <argument pos:start="159:38" pos:end="159:68"><expr pos:start="159:38" pos:end="159:68"><name pos:start="159:38" pos:end="159:53">TARGET_VM86_INTx</name> <operator pos:start="159:55" pos:end="159:55">+</operator> <operator pos:start="159:57" pos:end="159:57">(</operator><name pos:start="159:58" pos:end="159:62">intno</name> <operator pos:start="159:64" pos:end="159:65">&lt;&lt;</operator> <literal type="number" pos:start="159:67" pos:end="159:67">8</literal><operator pos:start="159:68" pos:end="159:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="161:17" pos:end="161:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:27"><expr pos:start="167:9" pos:end="167:26"><call pos:start="167:9" pos:end="167:26"><name pos:start="167:9" pos:end="167:14">do_int</name><argument_list pos:start="167:15" pos:end="167:26">(<argument pos:start="167:16" pos:end="167:18"><expr pos:start="167:16" pos:end="167:18"><name pos:start="167:16" pos:end="167:18">env</name></expr></argument>, <argument pos:start="167:21" pos:end="167:25"><expr pos:start="167:21" pos:end="167:25"><name pos:start="167:21" pos:end="167:25">intno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>



    <case pos:start="173:5" pos:end="173:14">case <expr pos:start="173:10" pos:end="173:13"><literal type="number" pos:start="173:10" pos:end="173:13">0xcf</literal></expr>:</case> <comment type="block" pos:start="173:16" pos:end="173:25">/* iret */</comment>

        <if_stmt pos:start="175:9" pos:end="195:9"><if pos:start="175:9" pos:end="185:9">if <condition pos:start="175:12" pos:end="175:19">(<expr pos:start="175:13" pos:end="175:18"><name pos:start="175:13" pos:end="175:18">data32</name></expr>)</condition> <block pos:start="175:21" pos:end="185:9">{<block_content pos:start="177:13" pos:end="183:40">

            <expr_stmt pos:start="177:13" pos:end="177:46"><expr pos:start="177:13" pos:end="177:45"><name pos:start="177:13" pos:end="177:17">newip</name> <operator pos:start="177:19" pos:end="177:19">=</operator> <call pos:start="177:21" pos:end="177:36"><name pos:start="177:21" pos:end="177:27">vm_getl</name><argument_list pos:start="177:28" pos:end="177:36">(<argument pos:start="177:29" pos:end="177:31"><expr pos:start="177:29" pos:end="177:31"><name pos:start="177:29" pos:end="177:31">ssp</name></expr></argument>, <argument pos:start="177:34" pos:end="177:35"><expr pos:start="177:34" pos:end="177:35"><name pos:start="177:34" pos:end="177:35">sp</name></expr></argument>)</argument_list></call> <operator pos:start="177:38" pos:end="177:38">&amp;</operator> <literal type="number" pos:start="177:40" pos:end="177:45">0xffff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:50"><expr pos:start="179:13" pos:end="179:49"><name pos:start="179:13" pos:end="179:17">newcs</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <call pos:start="179:21" pos:end="179:40"><name pos:start="179:21" pos:end="179:27">vm_getl</name><argument_list pos:start="179:28" pos:end="179:40">(<argument pos:start="179:29" pos:end="179:31"><expr pos:start="179:29" pos:end="179:31"><name pos:start="179:29" pos:end="179:31">ssp</name></expr></argument>, <argument pos:start="179:34" pos:end="179:39"><expr pos:start="179:34" pos:end="179:39"><name pos:start="179:34" pos:end="179:35">sp</name> <operator pos:start="179:37" pos:end="179:37">+</operator> <literal type="number" pos:start="179:39" pos:end="179:39">4</literal></expr></argument>)</argument_list></call> <operator pos:start="179:42" pos:end="179:42">&amp;</operator> <literal type="number" pos:start="179:44" pos:end="179:49">0xffff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:44"><expr pos:start="181:13" pos:end="181:43"><name pos:start="181:13" pos:end="181:20">newflags</name> <operator pos:start="181:22" pos:end="181:22">=</operator> <call pos:start="181:24" pos:end="181:43"><name pos:start="181:24" pos:end="181:30">vm_getl</name><argument_list pos:start="181:31" pos:end="181:43">(<argument pos:start="181:32" pos:end="181:34"><expr pos:start="181:32" pos:end="181:34"><name pos:start="181:32" pos:end="181:34">ssp</name></expr></argument>, <argument pos:start="181:37" pos:end="181:42"><expr pos:start="181:37" pos:end="181:42"><name pos:start="181:37" pos:end="181:38">sp</name> <operator pos:start="181:40" pos:end="181:40">+</operator> <literal type="number" pos:start="181:42" pos:end="181:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:40"><expr pos:start="183:13" pos:end="183:39"><call pos:start="183:13" pos:end="183:39"><name pos:start="183:13" pos:end="183:17">ADD16</name><argument_list pos:start="183:18" pos:end="183:39">(<argument pos:start="183:19" pos:end="183:34"><expr pos:start="183:19" pos:end="183:34"><name pos:start="183:19" pos:end="183:34"><name pos:start="183:19" pos:end="183:21">env</name><operator pos:start="183:22" pos:end="183:23">-&gt;</operator><name pos:start="183:24" pos:end="183:27">regs</name><index pos:start="183:28" pos:end="183:34">[<expr pos:start="183:29" pos:end="183:33"><name pos:start="183:29" pos:end="183:33">R_ESP</name></expr>]</index></name></expr></argument>, <argument pos:start="183:37" pos:end="183:38"><expr pos:start="183:37" pos:end="183:38"><literal type="number" pos:start="183:37" pos:end="183:38">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="185:11" pos:end="195:9">else <block pos:start="185:16" pos:end="195:9">{<block_content pos:start="187:13" pos:end="193:39">

            <expr_stmt pos:start="187:13" pos:end="187:37"><expr pos:start="187:13" pos:end="187:36"><name pos:start="187:13" pos:end="187:17">newip</name> <operator pos:start="187:19" pos:end="187:19">=</operator> <call pos:start="187:21" pos:end="187:36"><name pos:start="187:21" pos:end="187:27">vm_getw</name><argument_list pos:start="187:28" pos:end="187:36">(<argument pos:start="187:29" pos:end="187:31"><expr pos:start="187:29" pos:end="187:31"><name pos:start="187:29" pos:end="187:31">ssp</name></expr></argument>, <argument pos:start="187:34" pos:end="187:35"><expr pos:start="187:34" pos:end="187:35"><name pos:start="187:34" pos:end="187:35">sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:41"><expr pos:start="189:13" pos:end="189:40"><name pos:start="189:13" pos:end="189:17">newcs</name> <operator pos:start="189:19" pos:end="189:19">=</operator> <call pos:start="189:21" pos:end="189:40"><name pos:start="189:21" pos:end="189:27">vm_getw</name><argument_list pos:start="189:28" pos:end="189:40">(<argument pos:start="189:29" pos:end="189:31"><expr pos:start="189:29" pos:end="189:31"><name pos:start="189:29" pos:end="189:31">ssp</name></expr></argument>, <argument pos:start="189:34" pos:end="189:39"><expr pos:start="189:34" pos:end="189:39"><name pos:start="189:34" pos:end="189:35">sp</name> <operator pos:start="189:37" pos:end="189:37">+</operator> <literal type="number" pos:start="189:39" pos:end="189:39">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:44"><expr pos:start="191:13" pos:end="191:43"><name pos:start="191:13" pos:end="191:20">newflags</name> <operator pos:start="191:22" pos:end="191:22">=</operator> <call pos:start="191:24" pos:end="191:43"><name pos:start="191:24" pos:end="191:30">vm_getw</name><argument_list pos:start="191:31" pos:end="191:43">(<argument pos:start="191:32" pos:end="191:34"><expr pos:start="191:32" pos:end="191:34"><name pos:start="191:32" pos:end="191:34">ssp</name></expr></argument>, <argument pos:start="191:37" pos:end="191:42"><expr pos:start="191:37" pos:end="191:42"><name pos:start="191:37" pos:end="191:38">sp</name> <operator pos:start="191:40" pos:end="191:40">+</operator> <literal type="number" pos:start="191:42" pos:end="191:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:39"><expr pos:start="193:13" pos:end="193:38"><call pos:start="193:13" pos:end="193:38"><name pos:start="193:13" pos:end="193:17">ADD16</name><argument_list pos:start="193:18" pos:end="193:38">(<argument pos:start="193:19" pos:end="193:34"><expr pos:start="193:19" pos:end="193:34"><name pos:start="193:19" pos:end="193:34"><name pos:start="193:19" pos:end="193:21">env</name><operator pos:start="193:22" pos:end="193:23">-&gt;</operator><name pos:start="193:24" pos:end="193:27">regs</name><index pos:start="193:28" pos:end="193:34">[<expr pos:start="193:29" pos:end="193:33"><name pos:start="193:29" pos:end="193:33">R_ESP</name></expr>]</index></name></expr></argument>, <argument pos:start="193:37" pos:end="193:37"><expr pos:start="193:37" pos:end="193:37"><literal type="number" pos:start="193:37" pos:end="193:37">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:25"><expr pos:start="197:9" pos:end="197:24"><name pos:start="197:9" pos:end="197:16"><name pos:start="197:9" pos:end="197:11">env</name><operator pos:start="197:12" pos:end="197:13">-&gt;</operator><name pos:start="197:14" pos:end="197:16">eip</name></name> <operator pos:start="197:18" pos:end="197:18">=</operator> <name pos:start="197:20" pos:end="197:24">newip</name></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:43"><expr pos:start="199:9" pos:end="199:42"><call pos:start="199:9" pos:end="199:42"><name pos:start="199:9" pos:end="199:24">cpu_x86_load_seg</name><argument_list pos:start="199:25" pos:end="199:42">(<argument pos:start="199:26" pos:end="199:28"><expr pos:start="199:26" pos:end="199:28"><name pos:start="199:26" pos:end="199:28">env</name></expr></argument>, <argument pos:start="199:31" pos:end="199:34"><expr pos:start="199:31" pos:end="199:34"><name pos:start="199:31" pos:end="199:34">R_CS</name></expr></argument>, <argument pos:start="199:37" pos:end="199:41"><expr pos:start="199:37" pos:end="199:41"><name pos:start="199:37" pos:end="199:41">newcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:27"><expr pos:start="201:9" pos:end="201:26"><call pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:24">CHECK_IF_IN_TRAP</name><argument_list pos:start="201:25" pos:end="201:26">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="203:9" pos:end="215:9"><if pos:start="203:9" pos:end="209:9">if <condition pos:start="203:12" pos:end="203:19">(<expr pos:start="203:13" pos:end="203:18"><name pos:start="203:13" pos:end="203:18">data32</name></expr>)</condition> <block pos:start="203:21" pos:end="209:9">{<block_content pos:start="205:13" pos:end="207:23">

            <if_stmt pos:start="205:13" pos:end="207:23"><if pos:start="205:13" pos:end="207:23">if <condition pos:start="205:16" pos:end="205:47">(<expr pos:start="205:17" pos:end="205:46"><call pos:start="205:17" pos:end="205:46"><name pos:start="205:17" pos:end="205:31">set_vflags_long</name><argument_list pos:start="205:32" pos:end="205:46">(<argument pos:start="205:33" pos:end="205:40"><expr pos:start="205:33" pos:end="205:40"><name pos:start="205:33" pos:end="205:40">newflags</name></expr></argument>, <argument pos:start="205:43" pos:end="205:45"><expr pos:start="205:43" pos:end="205:45"><name pos:start="205:43" pos:end="205:45">env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="207:17" pos:end="207:23"><block_content pos:start="207:17" pos:end="207:23">

                <return pos:start="207:17" pos:end="207:23">return;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="209:11" pos:end="215:9">else <block pos:start="209:16" pos:end="215:9">{<block_content pos:start="211:13" pos:end="213:23">

            <if_stmt pos:start="211:13" pos:end="213:23"><if pos:start="211:13" pos:end="213:23">if <condition pos:start="211:16" pos:end="211:48">(<expr pos:start="211:17" pos:end="211:47"><call pos:start="211:17" pos:end="211:47"><name pos:start="211:17" pos:end="211:32">set_vflags_short</name><argument_list pos:start="211:33" pos:end="211:47">(<argument pos:start="211:34" pos:end="211:41"><expr pos:start="211:34" pos:end="211:41"><name pos:start="211:34" pos:end="211:41">newflags</name></expr></argument>, <argument pos:start="211:44" pos:end="211:46"><expr pos:start="211:44" pos:end="211:46"><name pos:start="211:44" pos:end="211:46">env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="213:17" pos:end="213:23"><block_content pos:start="213:17" pos:end="213:23">

                <return pos:start="213:17" pos:end="213:23">return;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:26"><expr pos:start="217:9" pos:end="217:25"><name pos:start="217:9" pos:end="217:25">VM86_FAULT_RETURN</name></expr>;</expr_stmt>

        

    <case pos:start="221:5" pos:end="221:14">case <expr pos:start="221:10" pos:end="221:13"><literal type="number" pos:start="221:10" pos:end="221:13">0xfa</literal></expr>:</case> <comment type="block" pos:start="221:16" pos:end="221:24">/* cli */</comment>

        <expr_stmt pos:start="223:9" pos:end="223:22"><expr pos:start="223:9" pos:end="223:21"><name pos:start="223:9" pos:end="223:16"><name pos:start="223:9" pos:end="223:11">env</name><operator pos:start="223:12" pos:end="223:13">-&gt;</operator><name pos:start="223:14" pos:end="223:16">eip</name></name> <operator pos:start="223:18" pos:end="223:18">=</operator> <name pos:start="223:20" pos:end="223:21">ip</name></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:22"><expr pos:start="225:9" pos:end="225:21"><call pos:start="225:9" pos:end="225:21"><name pos:start="225:9" pos:end="225:16">clear_IF</name><argument_list pos:start="225:17" pos:end="225:21">(<argument pos:start="225:18" pos:end="225:20"><expr pos:start="225:18" pos:end="225:20"><name pos:start="225:18" pos:end="225:20">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:26"><expr pos:start="227:9" pos:end="227:25"><name pos:start="227:9" pos:end="227:25">VM86_FAULT_RETURN</name></expr>;</expr_stmt>

        

    <case pos:start="231:5" pos:end="231:14">case <expr pos:start="231:10" pos:end="231:13"><literal type="number" pos:start="231:10" pos:end="231:13">0xfb</literal></expr>:</case> <comment type="block" pos:start="231:16" pos:end="231:24">/* sti */</comment>

        <expr_stmt pos:start="233:9" pos:end="233:22"><expr pos:start="233:9" pos:end="233:21"><name pos:start="233:9" pos:end="233:16"><name pos:start="233:9" pos:end="233:11">env</name><operator pos:start="233:12" pos:end="233:13">-&gt;</operator><name pos:start="233:14" pos:end="233:16">eip</name></name> <operator pos:start="233:18" pos:end="233:18">=</operator> <name pos:start="233:20" pos:end="233:21">ip</name></expr>;</expr_stmt>

        <if_stmt pos:start="235:9" pos:end="237:19"><if pos:start="235:9" pos:end="237:19">if <condition pos:start="235:12" pos:end="235:24">(<expr pos:start="235:13" pos:end="235:23"><call pos:start="235:13" pos:end="235:23"><name pos:start="235:13" pos:end="235:18">set_IF</name><argument_list pos:start="235:19" pos:end="235:23">(<argument pos:start="235:20" pos:end="235:22"><expr pos:start="235:20" pos:end="235:22"><name pos:start="235:20" pos:end="235:22">env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="237:13" pos:end="237:19"><block_content pos:start="237:13" pos:end="237:19">

            <return pos:start="237:13" pos:end="237:19">return;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:26"><expr pos:start="239:9" pos:end="239:25"><name pos:start="239:9" pos:end="239:25">VM86_FAULT_RETURN</name></expr>;</expr_stmt>



    <default pos:start="243:5" pos:end="243:12">default:</default>

        <comment type="block" pos:start="245:9" pos:end="245:37">/* real VM86 GPF exception */</comment>

        <expr_stmt pos:start="247:9" pos:end="247:50"><expr pos:start="247:9" pos:end="247:49"><call pos:start="247:9" pos:end="247:49"><name pos:start="247:9" pos:end="247:23">return_to_32bit</name><argument_list pos:start="247:24" pos:end="247:49">(<argument pos:start="247:25" pos:end="247:27"><expr pos:start="247:25" pos:end="247:27"><name pos:start="247:25" pos:end="247:27">env</name></expr></argument>, <argument pos:start="247:30" pos:end="247:48"><expr pos:start="247:30" pos:end="247:48"><name pos:start="247:30" pos:end="247:48">TARGET_VM86_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="249:9" pos:end="249:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
