<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27003.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:32">nbd_co_send_reply</name><parameter_list pos:start="1:33" pos:end="3:41">(<parameter pos:start="1:34" pos:end="1:52"><decl pos:start="1:34" pos:end="1:52"><type pos:start="1:34" pos:end="1:52"><name pos:start="1:34" pos:end="1:47">NBDRequestData</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">req</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:69"><decl pos:start="1:55" pos:end="1:69"><type pos:start="1:55" pos:end="1:69"><name pos:start="1:55" pos:end="1:62">NBDReply</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">reply</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:40"><decl pos:start="3:34" pos:end="3:40"><type pos:start="3:34" pos:end="3:40"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:40">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:14">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">NBDClient</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:21">client</name> <init pos:start="7:23" pos:end="7:35">= <expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">req</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">client</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:14">rc</name></decl>, <decl pos:start="9:17" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:17" pos:end="9:19">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:34"><expr pos:start="13:5" pos:end="13:33"><call pos:start="13:5" pos:end="13:33"><name pos:start="13:5" pos:end="13:12">g_assert</name><argument_list pos:start="13:13" pos:end="13:33">(<argument pos:start="13:14" pos:end="13:32"><expr pos:start="13:14" pos:end="13:32"><call pos:start="13:14" pos:end="13:32"><name pos:start="13:14" pos:end="13:30">qemu_in_coroutine</name><argument_list pos:start="13:31" pos:end="13:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><call pos:start="15:5" pos:end="15:42"><name pos:start="15:5" pos:end="15:22">qemu_co_mutex_lock</name><argument_list pos:start="15:23" pos:end="15:42">(<argument pos:start="15:24" pos:end="15:41"><expr pos:start="15:24" pos:end="15:41"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:41"><name pos:start="15:25" pos:end="15:30">client</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:41">send_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:51"><expr pos:start="17:5" pos:end="17:50"><name pos:start="17:5" pos:end="17:26"><name pos:start="17:5" pos:end="17:10">client</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:26">send_coroutine</name></name> <operator pos:start="17:28" pos:end="17:28">=</operator> <call pos:start="17:30" pos:end="17:50"><name pos:start="17:30" pos:end="17:48">qemu_coroutine_self</name><argument_list pos:start="17:49" pos:end="17:50">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="45:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">len</name></expr>)</condition> <block pos:start="21:15" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:48">

        <expr_stmt pos:start="23:9" pos:end="23:48"><expr pos:start="23:9" pos:end="23:47"><name pos:start="23:9" pos:end="23:10">rc</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <call pos:start="23:14" pos:end="23:47"><name pos:start="23:14" pos:end="23:27">nbd_send_reply</name><argument_list pos:start="23:28" pos:end="23:47">(<argument pos:start="23:29" pos:end="23:39"><expr pos:start="23:29" pos:end="23:39"><name pos:start="23:29" pos:end="23:39"><name pos:start="23:29" pos:end="23:34">client</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:39">ioc</name></name></expr></argument>, <argument pos:start="23:42" pos:end="23:46"><expr pos:start="23:42" pos:end="23:46"><name pos:start="23:42" pos:end="23:46">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="45:5">else <block pos:start="25:12" pos:end="45:5">{<block_content pos:start="27:9" pos:end="43:49">

        <expr_stmt pos:start="27:9" pos:end="27:48"><expr pos:start="27:9" pos:end="27:47"><call pos:start="27:9" pos:end="27:47"><name pos:start="27:9" pos:end="27:28">qio_channel_set_cork</name><argument_list pos:start="27:29" pos:end="27:47">(<argument pos:start="27:30" pos:end="27:40"><expr pos:start="27:30" pos:end="27:40"><name pos:start="27:30" pos:end="27:40"><name pos:start="27:30" pos:end="27:35">client</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:40">ioc</name></name></expr></argument>, <argument pos:start="27:43" pos:end="27:46"><expr pos:start="27:43" pos:end="27:46"><name pos:start="27:43" pos:end="27:46">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:10">rc</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="29:47"><name pos:start="29:14" pos:end="29:27">nbd_send_reply</name><argument_list pos:start="29:28" pos:end="29:47">(<argument pos:start="29:29" pos:end="29:39"><expr pos:start="29:29" pos:end="29:39"><name pos:start="29:29" pos:end="29:39"><name pos:start="29:29" pos:end="29:34">client</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:39">ioc</name></name></expr></argument>, <argument pos:start="29:42" pos:end="29:46"><expr pos:start="29:42" pos:end="29:46"><name pos:start="29:42" pos:end="29:46">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="41:9"><if pos:start="31:9" pos:end="41:9">if <condition pos:start="31:12" pos:end="31:20">(<expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:14">rc</name> <operator pos:start="31:16" pos:end="31:17">&gt;=</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>)</condition> <block pos:start="31:22" pos:end="41:9">{<block_content pos:start="33:13" pos:end="39:13">

            <expr_stmt pos:start="33:13" pos:end="33:64"><expr pos:start="33:13" pos:end="33:63"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:63"><name pos:start="33:19" pos:end="33:28">write_sync</name><argument_list pos:start="33:29" pos:end="33:63">(<argument pos:start="33:30" pos:end="33:40"><expr pos:start="33:30" pos:end="33:40"><name pos:start="33:30" pos:end="33:40"><name pos:start="33:30" pos:end="33:35">client</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:40">ioc</name></name></expr></argument>, <argument pos:start="33:43" pos:end="33:51"><expr pos:start="33:43" pos:end="33:51"><name pos:start="33:43" pos:end="33:51"><name pos:start="33:43" pos:end="33:45">req</name><operator pos:start="33:46" pos:end="33:47">-&gt;</operator><name pos:start="33:48" pos:end="33:51">data</name></name></expr></argument>, <argument pos:start="33:54" pos:end="33:56"><expr pos:start="33:54" pos:end="33:56"><name pos:start="33:54" pos:end="33:56">len</name></expr></argument>, <argument pos:start="33:59" pos:end="33:62"><expr pos:start="33:59" pos:end="33:62"><name pos:start="33:59" pos:end="33:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="39:13"><if pos:start="35:13" pos:end="39:13">if <condition pos:start="35:16" pos:end="35:24">(<expr pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:19">ret</name> <operator pos:start="35:21" pos:end="35:21">&lt;</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>)</condition> <block pos:start="35:26" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:26">

                <expr_stmt pos:start="37:17" pos:end="37:26"><expr pos:start="37:17" pos:end="37:25"><name pos:start="37:17" pos:end="37:18">rc</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <operator pos:start="37:22" pos:end="37:22">-</operator><name pos:start="37:23" pos:end="37:25">EIO</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:49"><expr pos:start="43:9" pos:end="43:48"><call pos:start="43:9" pos:end="43:48"><name pos:start="43:9" pos:end="43:28">qio_channel_set_cork</name><argument_list pos:start="43:29" pos:end="43:48">(<argument pos:start="43:30" pos:end="43:40"><expr pos:start="43:30" pos:end="43:40"><name pos:start="43:30" pos:end="43:40"><name pos:start="43:30" pos:end="43:35">client</name><operator pos:start="43:36" pos:end="43:37">-&gt;</operator><name pos:start="43:38" pos:end="43:40">ioc</name></name></expr></argument>, <argument pos:start="43:43" pos:end="43:47"><expr pos:start="43:43" pos:end="43:47"><name pos:start="43:43" pos:end="43:47">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:34"><expr pos:start="49:5" pos:end="49:33"><name pos:start="49:5" pos:end="49:26"><name pos:start="49:5" pos:end="49:10">client</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:26">send_coroutine</name></name> <operator pos:start="49:28" pos:end="49:28">=</operator> <name pos:start="49:30" pos:end="49:33">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:45"><expr pos:start="51:5" pos:end="51:44"><call pos:start="51:5" pos:end="51:44"><name pos:start="51:5" pos:end="51:24">qemu_co_mutex_unlock</name><argument_list pos:start="51:25" pos:end="51:44">(<argument pos:start="51:26" pos:end="51:43"><expr pos:start="51:26" pos:end="51:43"><operator pos:start="51:26" pos:end="51:26">&amp;</operator><name pos:start="51:27" pos:end="51:43"><name pos:start="51:27" pos:end="51:32">client</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:43">send_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="53:5" pos:end="53:14">return <expr pos:start="53:12" pos:end="53:13"><name pos:start="53:12" pos:end="53:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
