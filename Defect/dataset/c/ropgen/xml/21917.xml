<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21917.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">libschroedinger_encode_frame</name><parameter_list pos:start="1:40" pos:end="3:78">(<parameter pos:start="1:41" pos:end="1:61"><decl pos:start="1:41" pos:end="1:61"><type pos:start="1:41" pos:end="1:61"><name pos:start="1:41" pos:end="1:54">AVCodecContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">avctx</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:71">AVPacket</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:76">pkt</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:60"><decl pos:start="3:41" pos:end="3:60"><type pos:start="3:41" pos:end="3:60"><specifier pos:start="3:41" pos:end="3:45">const</specifier> <name pos:start="3:47" pos:end="3:53">AVFrame</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:60">frame</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:77"><decl pos:start="3:63" pos:end="3:77"><type pos:start="3:63" pos:end="3:77"><name pos:start="3:63" pos:end="3:65">int</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:77">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="315:1">{<block_content pos:start="7:5" pos:end="313:15">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">enc_size</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:57"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">SchroEncoderParams</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:38">p_schro_params</name> <init pos:start="9:40" pos:end="9:57">= <expr pos:start="9:42" pos:end="9:57"><name pos:start="9:42" pos:end="9:57"><name pos:start="9:42" pos:end="9:46">avctx</name><operator pos:start="9:47" pos:end="9:48">-&gt;</operator><name pos:start="9:49" pos:end="9:57">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">SchroEncoder</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:25">encoder</name> <init pos:start="11:27" pos:end="11:51">= <expr pos:start="11:29" pos:end="11:51"><name pos:start="11:29" pos:end="11:51"><name pos:start="11:29" pos:end="11:42">p_schro_params</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:51">encoder</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:54"><decl pos:start="13:5" pos:end="13:53"><type pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:30">FFSchroEncodedFrame</name></name> <modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:46">p_frame_output</name> <init pos:start="13:48" pos:end="13:53">= <expr pos:start="13:50" pos:end="13:53"><name pos:start="13:50" pos:end="13:53">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">go</name> <init pos:start="15:12" pos:end="15:14">= <expr pos:start="15:14" pos:end="15:14"><literal type="number" pos:start="15:14" pos:end="15:14">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">SchroBuffer</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:24">enc_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:26">presentation_frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">parse_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:35"><decl pos:start="23:5" pos:end="23:34"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:30">last_frame_in_sequence</name> <init pos:start="23:32" pos:end="23:34">= <expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">pkt_size</name></decl>, <decl pos:start="25:19" pos:end="25:21"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:19" pos:end="25:21">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="55:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:15">(<expr pos:start="29:9" pos:end="29:14"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:14">frame</name></expr>)</condition> <block pos:start="29:17" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:9">

        <comment type="block" pos:start="31:9" pos:end="31:60">/* Push end of sequence if not already signalled. */</comment>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:43">(<expr pos:start="33:13" pos:end="33:42"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:42"><name pos:start="33:14" pos:end="33:27">p_schro_params</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:42">eos_signalled</name></name></expr>)</condition> <block pos:start="33:45" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:46">

            <expr_stmt pos:start="35:13" pos:end="35:49"><expr pos:start="35:13" pos:end="35:48"><call pos:start="35:13" pos:end="35:48"><name pos:start="35:13" pos:end="35:39">schro_encoder_end_of_stream</name><argument_list pos:start="35:40" pos:end="35:48">(<argument pos:start="35:41" pos:end="35:47"><expr pos:start="35:41" pos:end="35:47"><name pos:start="35:41" pos:end="35:47">encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:46"><expr pos:start="37:13" pos:end="37:45"><name pos:start="37:13" pos:end="37:41"><name pos:start="37:13" pos:end="37:26">p_schro_params</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:41">eos_signalled</name></name> <operator pos:start="37:43" pos:end="37:43">=</operator> <literal type="number" pos:start="37:45" pos:end="37:45">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="55:5">else <block pos:start="41:12" pos:end="55:5">{<block_content pos:start="45:9" pos:end="53:52">

        <comment type="block" pos:start="43:9" pos:end="43:56">/* Allocate frame data to schro input buffer. */</comment>

        <decl_stmt pos:start="45:9" pos:end="45:77"><decl pos:start="45:9" pos:end="45:76"><type pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:18">SchroFrame</name> <modifier pos:start="45:20" pos:end="45:20">*</modifier></type><name pos:start="45:21" pos:end="45:28">in_frame</name> <init pos:start="45:30" pos:end="45:76">= <expr pos:start="45:32" pos:end="45:76"><call pos:start="45:32" pos:end="45:76"><name pos:start="45:32" pos:end="45:62">libschroedinger_frame_from_data</name><argument_list pos:start="45:63" pos:end="45:76">(<argument pos:start="45:64" pos:end="45:68"><expr pos:start="45:64" pos:end="45:68"><name pos:start="45:64" pos:end="45:68">avctx</name></expr></argument>, <argument pos:start="45:71" pos:end="45:75"><expr pos:start="45:71" pos:end="45:75"><name pos:start="45:71" pos:end="45:75">frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="47:9" pos:end="49:35"><if pos:start="47:9" pos:end="49:35">if <condition pos:start="47:12" pos:end="47:22">(<expr pos:start="47:13" pos:end="47:21"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:21">in_frame</name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:35"><block_content pos:start="49:13" pos:end="49:35">

            <return pos:start="49:13" pos:end="49:35">return <expr pos:start="49:20" pos:end="49:34"><call pos:start="49:20" pos:end="49:34"><name pos:start="49:20" pos:end="49:26">AVERROR</name><argument_list pos:start="49:27" pos:end="49:34">(<argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><name pos:start="49:28" pos:end="49:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:30">/* Load next frame. */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:52"><expr pos:start="53:9" pos:end="53:51"><call pos:start="53:9" pos:end="53:51"><name pos:start="53:9" pos:end="53:32">schro_encoder_push_frame</name><argument_list pos:start="53:33" pos:end="53:51">(<argument pos:start="53:34" pos:end="53:40"><expr pos:start="53:34" pos:end="53:40"><name pos:start="53:34" pos:end="53:40">encoder</name></expr></argument>, <argument pos:start="53:43" pos:end="53:50"><expr pos:start="53:43" pos:end="53:50"><name pos:start="53:43" pos:end="53:50">in_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="59:5" pos:end="61:15"><if pos:start="59:5" pos:end="61:15">if <condition pos:start="59:8" pos:end="59:35">(<expr pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:22">p_schro_params</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:34">eos_pulled</name></name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:15"><block_content pos:start="61:9" pos:end="61:15">

        <expr_stmt pos:start="61:9" pos:end="61:15"><expr pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:10">go</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:66">/* Now check to see if we have any output from the encoder. */</comment>

    <while pos:start="67:5" pos:end="213:5">while <condition pos:start="67:11" pos:end="67:14">(<expr pos:start="67:12" pos:end="67:13"><name pos:start="67:12" pos:end="67:13">go</name></expr>)</condition> <block pos:start="67:16" pos:end="213:5">{<block_content pos:start="69:9" pos:end="211:9">

        <decl_stmt pos:start="69:9" pos:end="69:16"><decl pos:start="69:9" pos:end="69:15"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:15">err</name></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:29"><decl pos:start="71:9" pos:end="71:28"><type pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:22">SchroStateEnum</name></type> <name pos:start="71:24" pos:end="71:28">state</name></decl>;</decl_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:44"><expr pos:start="73:9" pos:end="73:43"><name pos:start="73:9" pos:end="73:13">state</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <call pos:start="73:17" pos:end="73:43"><name pos:start="73:17" pos:end="73:34">schro_encoder_wait</name><argument_list pos:start="73:35" pos:end="73:43">(<argument pos:start="73:36" pos:end="73:42"><expr pos:start="73:36" pos:end="73:42"><name pos:start="73:36" pos:end="73:42">encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="75:9" pos:end="211:9">switch <condition pos:start="75:16" pos:end="75:22">(<expr pos:start="75:17" pos:end="75:21"><name pos:start="75:17" pos:end="75:21">state</name></expr>)</condition> <block pos:start="75:24" pos:end="211:9">{<block_content pos:start="77:9" pos:end="209:22">

        <case pos:start="77:9" pos:end="77:37">case <expr pos:start="77:14" pos:end="77:36"><name pos:start="77:14" pos:end="77:36">SCHRO_STATE_HAVE_BUFFER</name></expr>:</case>

        <case pos:start="79:9" pos:end="79:39">case <expr pos:start="79:14" pos:end="79:38"><name pos:start="79:14" pos:end="79:38">SCHRO_STATE_END_OF_STREAM</name></expr>:</case>

            <expr_stmt pos:start="81:13" pos:end="81:71"><expr pos:start="81:13" pos:end="81:70"><name pos:start="81:13" pos:end="81:19">enc_buf</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:70"><name pos:start="81:23" pos:end="81:40">schro_encoder_pull</name><argument_list pos:start="81:41" pos:end="81:70">(<argument pos:start="81:42" pos:end="81:48"><expr pos:start="81:42" pos:end="81:48"><name pos:start="81:42" pos:end="81:48">encoder</name></expr></argument>, <argument pos:start="81:51" pos:end="81:69"><expr pos:start="81:51" pos:end="81:69"><operator pos:start="81:51" pos:end="81:51">&amp;</operator><name pos:start="81:52" pos:end="81:69">presentation_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="85:35"><if pos:start="83:13" pos:end="85:35">if <condition pos:start="83:16" pos:end="83:37">(<expr pos:start="83:17" pos:end="83:36"><name pos:start="83:17" pos:end="83:31"><name pos:start="83:17" pos:end="83:23">enc_buf</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:31">length</name></name> <operator pos:start="83:33" pos:end="83:34">&lt;=</operator> <literal type="number" pos:start="83:36" pos:end="83:36">0</literal></expr>)</condition><block type="pseudo" pos:start="85:17" pos:end="85:35"><block_content pos:start="85:17" pos:end="85:35">

                <return pos:start="85:17" pos:end="85:35">return <expr pos:start="85:24" pos:end="85:34"><name pos:start="85:24" pos:end="85:34">AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:42"><expr pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:22">parse_code</name> <operator pos:start="87:24" pos:end="87:24">=</operator> <name pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:32">enc_buf</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:38">data</name><index pos:start="87:39" pos:end="87:41">[<expr pos:start="87:40" pos:end="87:40"><literal type="number" pos:start="87:40" pos:end="87:40">4</literal></expr>]</index></name></expr>;</expr_stmt>



            <comment type="block" pos:start="91:13" pos:end="97:15">/* All non-frame data is prepended to actual frame data to

             * be able to set the pts correctly. So we don't write data

             * to the frame output queue until we actually have a frame

             */</comment>

            <if_stmt pos:start="99:13" pos:end="109:13"><if pos:start="99:13" pos:end="109:13">if <condition pos:start="99:16" pos:end="103:57">(<expr pos:start="99:17" pos:end="103:56"><operator pos:start="99:17" pos:end="99:17">(</operator><name pos:start="99:18" pos:end="99:20">err</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <call pos:start="99:24" pos:end="103:51"><name pos:start="99:24" pos:end="99:34">av_reallocp</name><argument_list pos:start="99:35" pos:end="103:51">(<argument pos:start="99:36" pos:end="99:59"><expr pos:start="99:36" pos:end="99:59"><operator pos:start="99:36" pos:end="99:36">&amp;</operator><name pos:start="99:37" pos:end="99:59"><name pos:start="99:37" pos:end="99:50">p_schro_params</name><operator pos:start="99:51" pos:end="99:52">-&gt;</operator><name pos:start="99:53" pos:end="99:59">enc_buf</name></name></expr></argument>,

                                   <argument pos:start="101:36" pos:end="103:50"><expr pos:start="101:36" pos:end="103:50"><name pos:start="101:36" pos:end="101:63"><name pos:start="101:36" pos:end="101:49">p_schro_params</name><operator pos:start="101:50" pos:end="101:51">-&gt;</operator><name pos:start="101:52" pos:end="101:63">enc_buf_size</name></name> <operator pos:start="101:65" pos:end="101:65">+</operator>

                                   <name pos:start="103:36" pos:end="103:50"><name pos:start="103:36" pos:end="103:42">enc_buf</name><operator pos:start="103:43" pos:end="103:44">-&gt;</operator><name pos:start="103:45" pos:end="103:50">length</name></name></expr></argument>)</argument_list></call><operator pos:start="103:52" pos:end="103:52">)</operator> <operator pos:start="103:54" pos:end="103:54">&lt;</operator> <literal type="number" pos:start="103:56" pos:end="103:56">0</literal></expr>)</condition> <block pos:start="103:59" pos:end="109:13">{<block_content pos:start="105:17" pos:end="107:27">

                <expr_stmt pos:start="105:17" pos:end="105:49"><expr pos:start="105:17" pos:end="105:48"><name pos:start="105:17" pos:end="105:44"><name pos:start="105:17" pos:end="105:30">p_schro_params</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:44">enc_buf_size</name></name> <operator pos:start="105:46" pos:end="105:46">=</operator> <literal type="number" pos:start="105:48" pos:end="105:48">0</literal></expr>;</expr_stmt>

                <return pos:start="107:17" pos:end="107:27">return <expr pos:start="107:24" pos:end="107:26"><name pos:start="107:24" pos:end="107:26">err</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="113:13" pos:end="115:51"><expr pos:start="113:13" pos:end="115:50"><call pos:start="113:13" pos:end="115:50"><name pos:start="113:13" pos:end="113:18">memcpy</name><argument_list pos:start="113:19" pos:end="115:50">(<argument pos:start="113:20" pos:end="113:73"><expr pos:start="113:20" pos:end="113:73"><name pos:start="113:20" pos:end="113:42"><name pos:start="113:20" pos:end="113:33">p_schro_params</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:42">enc_buf</name></name> <operator pos:start="113:44" pos:end="113:44">+</operator> <name pos:start="113:46" pos:end="113:73"><name pos:start="113:46" pos:end="113:59">p_schro_params</name><operator pos:start="113:60" pos:end="113:61">-&gt;</operator><name pos:start="113:62" pos:end="113:73">enc_buf_size</name></name></expr></argument>,

                   <argument pos:start="115:20" pos:end="115:32"><expr pos:start="115:20" pos:end="115:32"><name pos:start="115:20" pos:end="115:32"><name pos:start="115:20" pos:end="115:26">enc_buf</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:32">data</name></name></expr></argument>, <argument pos:start="115:35" pos:end="115:49"><expr pos:start="115:35" pos:end="115:49"><name pos:start="115:35" pos:end="115:49"><name pos:start="115:35" pos:end="115:41">enc_buf</name><operator pos:start="115:42" pos:end="115:43">-&gt;</operator><name pos:start="115:44" pos:end="115:49">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:60"><expr pos:start="117:13" pos:end="117:59"><name pos:start="117:13" pos:end="117:40"><name pos:start="117:13" pos:end="117:26">p_schro_params</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:40">enc_buf_size</name></name> <operator pos:start="117:42" pos:end="117:43">+=</operator> <name pos:start="117:45" pos:end="117:59"><name pos:start="117:45" pos:end="117:51">enc_buf</name><operator pos:start="117:52" pos:end="117:53">-&gt;</operator><name pos:start="117:54" pos:end="117:59">length</name></name></expr>;</expr_stmt>





            <if_stmt pos:start="123:13" pos:end="129:13"><if pos:start="123:13" pos:end="129:13">if <condition pos:start="123:16" pos:end="123:51">(<expr pos:start="123:17" pos:end="123:50"><name pos:start="123:17" pos:end="123:21">state</name> <operator pos:start="123:23" pos:end="123:24">==</operator> <name pos:start="123:26" pos:end="123:50">SCHRO_STATE_END_OF_STREAM</name></expr>)</condition> <block pos:start="123:53" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:23">

                <expr_stmt pos:start="125:17" pos:end="125:47"><expr pos:start="125:17" pos:end="125:46"><name pos:start="125:17" pos:end="125:42"><name pos:start="125:17" pos:end="125:30">p_schro_params</name><operator pos:start="125:31" pos:end="125:32">-&gt;</operator><name pos:start="125:33" pos:end="125:42">eos_pulled</name></name> <operator pos:start="125:44" pos:end="125:44">=</operator> <literal type="number" pos:start="125:46" pos:end="125:46">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:23"><expr pos:start="127:17" pos:end="127:22"><name pos:start="127:17" pos:end="127:18">go</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <literal type="number" pos:start="127:22" pos:end="127:22">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="133:13" pos:end="139:13"><if pos:start="133:13" pos:end="139:13">if <condition pos:start="133:16" pos:end="133:57">(<expr pos:start="133:17" pos:end="133:56"><operator pos:start="133:17" pos:end="133:17">!</operator><call pos:start="133:18" pos:end="133:56"><name pos:start="133:18" pos:end="133:44">SCHRO_PARSE_CODE_IS_PICTURE</name><argument_list pos:start="133:45" pos:end="133:56">(<argument pos:start="133:46" pos:end="133:55"><expr pos:start="133:46" pos:end="133:55"><name pos:start="133:46" pos:end="133:55">parse_code</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:59" pos:end="139:13">{<block_content pos:start="135:17" pos:end="137:22">

                <expr_stmt pos:start="135:17" pos:end="135:44"><expr pos:start="135:17" pos:end="135:43"><call pos:start="135:17" pos:end="135:43"><name pos:start="135:17" pos:end="135:34">schro_buffer_unref</name><argument_list pos:start="135:35" pos:end="135:43">(<argument pos:start="135:36" pos:end="135:42"><expr pos:start="135:36" pos:end="135:42"><name pos:start="135:36" pos:end="135:42">enc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="137:17" pos:end="137:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="143:13" pos:end="143:38">/* Create output frame. */</comment>

            <expr_stmt pos:start="145:13" pos:end="145:69"><expr pos:start="145:13" pos:end="145:68"><name pos:start="145:13" pos:end="145:26">p_frame_output</name> <operator pos:start="145:28" pos:end="145:28">=</operator> <call pos:start="145:30" pos:end="145:68"><name pos:start="145:30" pos:end="145:39">av_mallocz</name><argument_list pos:start="145:40" pos:end="145:68">(<argument pos:start="145:41" pos:end="145:67"><expr pos:start="145:41" pos:end="145:67"><sizeof pos:start="145:41" pos:end="145:67">sizeof<argument_list pos:start="145:47" pos:end="145:67">(<argument pos:start="145:48" pos:end="145:66"><expr pos:start="145:48" pos:end="145:66"><name pos:start="145:48" pos:end="145:66">FFSchroEncodedFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="147:13" pos:end="149:39"><if pos:start="147:13" pos:end="149:39">if <condition pos:start="147:16" pos:end="147:32">(<expr pos:start="147:17" pos:end="147:31"><operator pos:start="147:17" pos:end="147:17">!</operator><name pos:start="147:18" pos:end="147:31">p_frame_output</name></expr>)</condition><block type="pseudo" pos:start="149:17" pos:end="149:39"><block_content pos:start="149:17" pos:end="149:39">

                <return pos:start="149:17" pos:end="149:39">return <expr pos:start="149:24" pos:end="149:38"><call pos:start="149:24" pos:end="149:38"><name pos:start="149:24" pos:end="149:30">AVERROR</name><argument_list pos:start="149:31" pos:end="149:38">(<argument pos:start="149:32" pos:end="149:37"><expr pos:start="149:32" pos:end="149:37"><name pos:start="149:32" pos:end="149:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="151:13" pos:end="151:34">/* Set output data. */</comment>

            <expr_stmt pos:start="153:13" pos:end="153:68"><expr pos:start="153:13" pos:end="153:67"><name pos:start="153:13" pos:end="153:32"><name pos:start="153:13" pos:end="153:26">p_frame_output</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:32">size</name></name>     <operator pos:start="153:38" pos:end="153:38">=</operator> <name pos:start="153:40" pos:end="153:67"><name pos:start="153:40" pos:end="153:53">p_schro_params</name><operator pos:start="153:54" pos:end="153:55">-&gt;</operator><name pos:start="153:56" pos:end="153:67">enc_buf_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:63"><expr pos:start="155:13" pos:end="155:62"><name pos:start="155:13" pos:end="155:36"><name pos:start="155:13" pos:end="155:26">p_frame_output</name><operator pos:start="155:27" pos:end="155:28">-&gt;</operator><name pos:start="155:29" pos:end="155:36">p_encbuf</name></name> <operator pos:start="155:38" pos:end="155:38">=</operator> <name pos:start="155:40" pos:end="155:62"><name pos:start="155:40" pos:end="155:53">p_schro_params</name><operator pos:start="155:54" pos:end="155:55">-&gt;</operator><name pos:start="155:56" pos:end="155:62">enc_buf</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="157:13" pos:end="161:46"><if pos:start="157:13" pos:end="161:46">if <condition pos:start="157:16" pos:end="159:58">(<expr pos:start="157:17" pos:end="159:57"><call pos:start="157:17" pos:end="157:53"><name pos:start="157:17" pos:end="157:41">SCHRO_PARSE_CODE_IS_INTRA</name><argument_list pos:start="157:42" pos:end="157:53">(<argument pos:start="157:43" pos:end="157:52"><expr pos:start="157:43" pos:end="157:52"><name pos:start="157:43" pos:end="157:52">parse_code</name></expr></argument>)</argument_list></call> <operator pos:start="157:55" pos:end="157:56">&amp;&amp;</operator>

                <call pos:start="159:17" pos:end="159:57"><name pos:start="159:17" pos:end="159:45">SCHRO_PARSE_CODE_IS_REFERENCE</name><argument_list pos:start="159:46" pos:end="159:57">(<argument pos:start="159:47" pos:end="159:56"><expr pos:start="159:47" pos:end="159:56"><name pos:start="159:47" pos:end="159:56">parse_code</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:46"><block_content pos:start="161:17" pos:end="161:46">

                <expr_stmt pos:start="161:17" pos:end="161:46"><expr pos:start="161:17" pos:end="161:45"><name pos:start="161:17" pos:end="161:41"><name pos:start="161:17" pos:end="161:30">p_frame_output</name><operator pos:start="161:31" pos:end="161:32">-&gt;</operator><name pos:start="161:33" pos:end="161:41">key_frame</name></name> <operator pos:start="161:43" pos:end="161:43">=</operator> <literal type="number" pos:start="161:45" pos:end="161:45">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="165:13" pos:end="167:56">/* Parse the coded frame number from the bitstream. Bytes 14

             * through 17 represent the frame number. */</comment>

            <expr_stmt pos:start="169:13" pos:end="169:68"><expr pos:start="169:13" pos:end="169:67"><name pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:26">p_frame_output</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:37">frame_num</name></name> <operator pos:start="169:39" pos:end="169:39">=</operator> <call pos:start="169:41" pos:end="169:67"><name pos:start="169:41" pos:end="169:47">AV_RB32</name><argument_list pos:start="169:48" pos:end="169:67">(<argument pos:start="169:49" pos:end="169:66"><expr pos:start="169:49" pos:end="169:66"><name pos:start="169:49" pos:end="169:61"><name pos:start="169:49" pos:end="169:55">enc_buf</name><operator pos:start="169:56" pos:end="169:57">-&gt;</operator><name pos:start="169:58" pos:end="169:61">data</name></name> <operator pos:start="169:63" pos:end="169:63">+</operator> <literal type="number" pos:start="169:65" pos:end="169:66">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="173:13" pos:end="175:53"><expr pos:start="173:13" pos:end="175:52"><call pos:start="173:13" pos:end="175:52"><name pos:start="173:13" pos:end="173:36">ff_schro_queue_push_back</name><argument_list pos:start="173:37" pos:end="175:52">(<argument pos:start="173:38" pos:end="173:69"><expr pos:start="173:38" pos:end="173:69"><operator pos:start="173:38" pos:end="173:38">&amp;</operator><name pos:start="173:39" pos:end="173:69"><name pos:start="173:39" pos:end="173:52">p_schro_params</name><operator pos:start="173:53" pos:end="173:54">-&gt;</operator><name pos:start="173:55" pos:end="173:69">enc_frame_queue</name></name></expr></argument>,

                                     <argument pos:start="175:38" pos:end="175:51"><expr pos:start="175:38" pos:end="175:51"><name pos:start="175:38" pos:end="175:51">p_frame_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:45"><expr pos:start="177:13" pos:end="177:44"><name pos:start="177:13" pos:end="177:40"><name pos:start="177:13" pos:end="177:26">p_schro_params</name><operator pos:start="177:27" pos:end="177:28">-&gt;</operator><name pos:start="177:29" pos:end="177:40">enc_buf_size</name></name> <operator pos:start="177:42" pos:end="177:42">=</operator> <literal type="number" pos:start="177:44" pos:end="177:44">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:48"><expr pos:start="179:13" pos:end="179:47"><name pos:start="179:13" pos:end="179:35"><name pos:start="179:13" pos:end="179:26">p_schro_params</name><operator pos:start="179:27" pos:end="179:28">-&gt;</operator><name pos:start="179:29" pos:end="179:35">enc_buf</name></name>      <operator pos:start="179:42" pos:end="179:42">=</operator> <name pos:start="179:44" pos:end="179:47">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="183:13" pos:end="183:40"><expr pos:start="183:13" pos:end="183:39"><call pos:start="183:13" pos:end="183:39"><name pos:start="183:13" pos:end="183:30">schro_buffer_unref</name><argument_list pos:start="183:31" pos:end="183:39">(<argument pos:start="183:32" pos:end="183:38"><expr pos:start="183:32" pos:end="183:38"><name pos:start="183:32" pos:end="183:38">enc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <break pos:start="187:13" pos:end="187:18">break;</break>



        <case pos:start="191:9" pos:end="191:36">case <expr pos:start="191:14" pos:end="191:35"><name pos:start="191:14" pos:end="191:35">SCHRO_STATE_NEED_FRAME</name></expr>:</case>

            <expr_stmt pos:start="193:13" pos:end="193:19"><expr pos:start="193:13" pos:end="193:18"><name pos:start="193:13" pos:end="193:14">go</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <literal type="number" pos:start="193:18" pos:end="193:18">0</literal></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>



        <case pos:start="199:9" pos:end="199:31">case <expr pos:start="199:14" pos:end="199:30"><name pos:start="199:14" pos:end="199:30">SCHRO_STATE_AGAIN</name></expr>:</case>

            <break pos:start="201:13" pos:end="201:18">break;</break>



        <default pos:start="205:9" pos:end="205:16">default:</default>

            <expr_stmt pos:start="207:13" pos:end="207:73"><expr pos:start="207:13" pos:end="207:72"><call pos:start="207:13" pos:end="207:72"><name pos:start="207:13" pos:end="207:18">av_log</name><argument_list pos:start="207:19" pos:end="207:72">(<argument pos:start="207:20" pos:end="207:24"><expr pos:start="207:20" pos:end="207:24"><name pos:start="207:20" pos:end="207:24">avctx</name></expr></argument>, <argument pos:start="207:27" pos:end="207:38"><expr pos:start="207:27" pos:end="207:38"><name pos:start="207:27" pos:end="207:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="207:41" pos:end="207:71"><expr pos:start="207:41" pos:end="207:71"><literal type="string" pos:start="207:41" pos:end="207:71">"Unknown Schro Encoder state\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="209:13" pos:end="209:22">return <expr pos:start="209:20" pos:end="209:21"><operator pos:start="209:20" pos:end="209:20">-</operator><literal type="number" pos:start="209:21" pos:end="209:21">1</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <comment type="block" pos:start="217:5" pos:end="217:37">/* Copy 'next' frame in queue. */</comment>



    <if_stmt pos:start="221:5" pos:end="225:35"><if pos:start="221:5" pos:end="225:35">if <condition pos:start="221:8" pos:end="223:35">(<expr pos:start="221:9" pos:end="223:34"><name pos:start="221:9" pos:end="221:44"><name pos:start="221:9" pos:end="221:22">p_schro_params</name><operator pos:start="221:23" pos:end="221:24">-&gt;</operator><name pos:start="221:25" pos:end="221:39">enc_frame_queue</name><operator pos:start="221:40" pos:end="221:40">.</operator><name pos:start="221:41" pos:end="221:44">size</name></name> <operator pos:start="221:46" pos:end="221:47">==</operator> <literal type="number" pos:start="221:49" pos:end="221:49">1</literal> <operator pos:start="221:51" pos:end="221:52">&amp;&amp;</operator>

        <name pos:start="223:9" pos:end="223:34"><name pos:start="223:9" pos:end="223:22">p_schro_params</name><operator pos:start="223:23" pos:end="223:24">-&gt;</operator><name pos:start="223:25" pos:end="223:34">eos_pulled</name></name></expr>)</condition><block type="pseudo" pos:start="225:9" pos:end="225:35"><block_content pos:start="225:9" pos:end="225:35">

        <expr_stmt pos:start="225:9" pos:end="225:35"><expr pos:start="225:9" pos:end="225:34"><name pos:start="225:9" pos:end="225:30">last_frame_in_sequence</name> <operator pos:start="225:32" pos:end="225:32">=</operator> <literal type="number" pos:start="225:34" pos:end="225:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="229:5" pos:end="229:74"><expr pos:start="229:5" pos:end="229:73"><name pos:start="229:5" pos:end="229:18">p_frame_output</name> <operator pos:start="229:20" pos:end="229:20">=</operator> <call pos:start="229:22" pos:end="229:73"><name pos:start="229:22" pos:end="229:39">ff_schro_queue_pop</name><argument_list pos:start="229:40" pos:end="229:73">(<argument pos:start="229:41" pos:end="229:72"><expr pos:start="229:41" pos:end="229:72"><operator pos:start="229:41" pos:end="229:41">&amp;</operator><name pos:start="229:42" pos:end="229:72"><name pos:start="229:42" pos:end="229:55">p_schro_params</name><operator pos:start="229:56" pos:end="229:57">-&gt;</operator><name pos:start="229:58" pos:end="229:72">enc_frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="233:5" pos:end="235:17"><if pos:start="233:5" pos:end="235:17">if <condition pos:start="233:8" pos:end="233:24">(<expr pos:start="233:9" pos:end="233:23"><operator pos:start="233:9" pos:end="233:9">!</operator><name pos:start="233:10" pos:end="233:23">p_frame_output</name></expr>)</condition><block type="pseudo" pos:start="235:9" pos:end="235:17"><block_content pos:start="235:9" pos:end="235:17">

        <return pos:start="235:9" pos:end="235:17">return <expr pos:start="235:16" pos:end="235:16"><literal type="number" pos:start="235:16" pos:end="235:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:36"><expr pos:start="239:5" pos:end="239:35"><name pos:start="239:5" pos:end="239:12">pkt_size</name> <operator pos:start="239:14" pos:end="239:14">=</operator> <name pos:start="239:16" pos:end="239:35"><name pos:start="239:16" pos:end="239:29">p_frame_output</name><operator pos:start="239:30" pos:end="239:31">-&gt;</operator><name pos:start="239:32" pos:end="239:35">size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="241:5" pos:end="243:49"><if pos:start="241:5" pos:end="243:49">if <condition pos:start="241:8" pos:end="241:67">(<expr pos:start="241:9" pos:end="241:66"><name pos:start="241:9" pos:end="241:30">last_frame_in_sequence</name> <operator pos:start="241:32" pos:end="241:33">&amp;&amp;</operator> <name pos:start="241:35" pos:end="241:62"><name pos:start="241:35" pos:end="241:48">p_schro_params</name><operator pos:start="241:49" pos:end="241:50">-&gt;</operator><name pos:start="241:51" pos:end="241:62">enc_buf_size</name></name> <operator pos:start="241:64" pos:end="241:64">&gt;</operator> <literal type="number" pos:start="241:66" pos:end="241:66">0</literal></expr>)</condition><block type="pseudo" pos:start="243:9" pos:end="243:49"><block_content pos:start="243:9" pos:end="243:49">

        <expr_stmt pos:start="243:9" pos:end="243:49"><expr pos:start="243:9" pos:end="243:48"><name pos:start="243:9" pos:end="243:16">pkt_size</name> <operator pos:start="243:18" pos:end="243:19">+=</operator> <name pos:start="243:21" pos:end="243:48"><name pos:start="243:21" pos:end="243:34">p_schro_params</name><operator pos:start="243:35" pos:end="243:36">-&gt;</operator><name pos:start="243:37" pos:end="243:48">enc_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="245:5" pos:end="247:19"><if pos:start="245:5" pos:end="247:19">if <condition pos:start="245:8" pos:end="245:62">(<expr pos:start="245:9" pos:end="245:61"><operator pos:start="245:9" pos:end="245:9">(</operator><name pos:start="245:10" pos:end="245:12">ret</name> <operator pos:start="245:14" pos:end="245:14">=</operator> <call pos:start="245:16" pos:end="245:56"><name pos:start="245:16" pos:end="245:31">ff_alloc_packet2</name><argument_list pos:start="245:32" pos:end="245:56">(<argument pos:start="245:33" pos:end="245:37"><expr pos:start="245:33" pos:end="245:37"><name pos:start="245:33" pos:end="245:37">avctx</name></expr></argument>, <argument pos:start="245:40" pos:end="245:42"><expr pos:start="245:40" pos:end="245:42"><name pos:start="245:40" pos:end="245:42">pkt</name></expr></argument>, <argument pos:start="245:45" pos:end="245:52"><expr pos:start="245:45" pos:end="245:52"><name pos:start="245:45" pos:end="245:52">pkt_size</name></expr></argument>, <argument pos:start="245:55" pos:end="245:55"><expr pos:start="245:55" pos:end="245:55"><literal type="number" pos:start="245:55" pos:end="245:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="245:57" pos:end="245:57">)</operator> <operator pos:start="245:59" pos:end="245:59">&lt;</operator> <literal type="number" pos:start="245:61" pos:end="245:61">0</literal></expr>)</condition><block type="pseudo" pos:start="247:9" pos:end="247:19"><block_content pos:start="247:9" pos:end="247:19">

        <goto pos:start="247:9" pos:end="247:19">goto <name pos:start="247:14" pos:end="247:18">error</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="251:5" pos:end="254:0"><expr pos:start="251:5" pos:end="251:69"><call pos:start="251:5" pos:end="251:69"><name pos:start="251:5" pos:end="251:10">memcpy</name><argument_list pos:start="251:11" pos:end="251:69">(<argument pos:start="251:12" pos:end="251:20"><expr pos:start="251:12" pos:end="251:20"><name pos:start="251:12" pos:end="251:20"><name pos:start="251:12" pos:end="251:14">pkt</name><operator pos:start="251:15" pos:end="251:16">-&gt;</operator><name pos:start="251:17" pos:end="251:20">data</name></name></expr></argument>, <argument pos:start="251:23" pos:end="251:46"><expr pos:start="251:23" pos:end="251:46"><name pos:start="251:23" pos:end="251:46"><name pos:start="251:23" pos:end="251:36">p_frame_output</name><operator pos:start="251:37" pos:end="251:38">-&gt;</operator><name pos:start="251:39" pos:end="251:46">p_encbuf</name></name></expr></argument>, <argument pos:start="251:49" pos:end="251:68"><expr pos:start="251:49" pos:end="251:68"><name pos:start="251:49" pos:end="251:68"><name pos:start="251:49" pos:end="251:62">p_frame_output</name><operator pos:start="251:63" pos:end="251:64">-&gt;</operator><name pos:start="251:65" pos:end="251:68">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="253:1" pos:end="253:22">#<cpp:directive pos:start="253:2" pos:end="253:3">if</cpp:directive> <expr pos:start="253:5" pos:end="253:22"><name pos:start="253:5" pos:end="253:22">FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt pos:start="255:1" pos:end="257:62"><decl pos:start="255:1" pos:end="257:61"><type pos:start="255:1" pos:end="255:31"><name pos:start="255:1" pos:end="255:31">FF_DISABLE_DEPRECATION_WARNINGS</name></type>

    <name pos:start="257:5" pos:end="257:33"><name pos:start="257:5" pos:end="257:9">avctx</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:22">coded_frame</name><operator pos:start="257:23" pos:end="257:24">-&gt;</operator><name pos:start="257:25" pos:end="257:33">key_frame</name></name> <init pos:start="257:35" pos:end="257:61">= <expr pos:start="257:37" pos:end="257:61"><name pos:start="257:37" pos:end="257:61"><name pos:start="257:37" pos:end="257:50">p_frame_output</name><operator pos:start="257:51" pos:end="257:52">-&gt;</operator><name pos:start="257:53" pos:end="257:61">key_frame</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:56"><expr pos:start="259:5" pos:end="259:55"><name pos:start="259:5" pos:end="259:27"><name pos:start="259:5" pos:end="259:9">avctx</name><operator pos:start="259:10" pos:end="259:11">-&gt;</operator><name pos:start="259:12" pos:end="259:22">coded_frame</name><operator pos:start="259:23" pos:end="259:24">-&gt;</operator><name pos:start="259:25" pos:end="259:27">pts</name></name> <operator pos:start="259:29" pos:end="259:29">=</operator> <name pos:start="259:31" pos:end="259:55"><name pos:start="259:31" pos:end="259:44">p_frame_output</name><operator pos:start="259:45" pos:end="259:46">-&gt;</operator><name pos:start="259:47" pos:end="259:55">frame_num</name></name></expr>;</expr_stmt>

<decl_stmt pos:start="261:1" pos:end="271:41"><decl pos:start="261:1" pos:end="271:40"><type pos:start="261:1" pos:end="264:0"><name pos:start="261:1" pos:end="264:0">FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif pos:start="263:1" pos:end="263:6">#<cpp:directive pos:start="263:2" pos:end="263:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="265:5" pos:end="269:39">/* Use the frame number of the encoded frame as the pts. It is OK to

     * do so since Dirac is a constant frame rate codec. It expects input

     * to be of constant frame rate. */</comment>

    <name pos:start="271:5" pos:end="271:12"><name pos:start="271:5" pos:end="271:7">pkt</name><operator pos:start="271:8" pos:end="271:9">-&gt;</operator><name pos:start="271:10" pos:end="271:12">pts</name></name> <init pos:start="271:14" pos:end="271:40">= <expr pos:start="271:16" pos:end="271:40"><name pos:start="271:16" pos:end="271:40"><name pos:start="271:16" pos:end="271:29">p_frame_output</name><operator pos:start="271:30" pos:end="271:31">-&gt;</operator><name pos:start="271:32" pos:end="271:40">frame_num</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:37"><expr pos:start="273:5" pos:end="273:36"><name pos:start="273:5" pos:end="273:12"><name pos:start="273:5" pos:end="273:7">pkt</name><operator pos:start="273:8" pos:end="273:9">-&gt;</operator><name pos:start="273:10" pos:end="273:12">dts</name></name> <operator pos:start="273:14" pos:end="273:14">=</operator> <name pos:start="273:16" pos:end="273:34"><name pos:start="273:16" pos:end="273:29">p_schro_params</name><operator pos:start="273:30" pos:end="273:31">-&gt;</operator><name pos:start="273:32" pos:end="273:34">dts</name></name><operator pos:start="273:35" pos:end="273:36">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:36"><expr pos:start="275:5" pos:end="275:35"><name pos:start="275:5" pos:end="275:12">enc_size</name> <operator pos:start="275:14" pos:end="275:14">=</operator> <name pos:start="275:16" pos:end="275:35"><name pos:start="275:16" pos:end="275:29">p_frame_output</name><operator pos:start="275:30" pos:end="275:31">-&gt;</operator><name pos:start="275:32" pos:end="275:35">size</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="279:5" pos:end="281:19">/* Append the end of sequence information to the last frame in the

     * sequence. */</comment>

    <if_stmt pos:start="283:5" pos:end="295:5"><if pos:start="283:5" pos:end="295:5">if <condition pos:start="283:8" pos:end="283:67">(<expr pos:start="283:9" pos:end="283:66"><name pos:start="283:9" pos:end="283:30">last_frame_in_sequence</name> <operator pos:start="283:32" pos:end="283:33">&amp;&amp;</operator> <name pos:start="283:35" pos:end="283:62"><name pos:start="283:35" pos:end="283:48">p_schro_params</name><operator pos:start="283:49" pos:end="283:50">-&gt;</operator><name pos:start="283:51" pos:end="283:62">enc_buf_size</name></name> <operator pos:start="283:64" pos:end="283:64">&gt;</operator> <literal type="number" pos:start="283:66" pos:end="283:66">0</literal></expr>)</condition> <block pos:start="283:69" pos:end="295:5">{<block_content pos:start="285:9" pos:end="293:41">

        <expr_stmt pos:start="285:9" pos:end="287:45"><expr pos:start="285:9" pos:end="287:44"><call pos:start="285:9" pos:end="287:44"><name pos:start="285:9" pos:end="285:14">memcpy</name><argument_list pos:start="285:15" pos:end="287:44">(<argument pos:start="285:16" pos:end="285:35"><expr pos:start="285:16" pos:end="285:35"><name pos:start="285:16" pos:end="285:24"><name pos:start="285:16" pos:end="285:18">pkt</name><operator pos:start="285:19" pos:end="285:20">-&gt;</operator><name pos:start="285:21" pos:end="285:24">data</name></name> <operator pos:start="285:26" pos:end="285:26">+</operator> <name pos:start="285:28" pos:end="285:35">enc_size</name></expr></argument>, <argument pos:start="285:38" pos:end="285:60"><expr pos:start="285:38" pos:end="285:60"><name pos:start="285:38" pos:end="285:60"><name pos:start="285:38" pos:end="285:51">p_schro_params</name><operator pos:start="285:52" pos:end="285:53">-&gt;</operator><name pos:start="285:54" pos:end="285:60">enc_buf</name></name></expr></argument>,

               <argument pos:start="287:16" pos:end="287:43"><expr pos:start="287:16" pos:end="287:43"><name pos:start="287:16" pos:end="287:43"><name pos:start="287:16" pos:end="287:29">p_schro_params</name><operator pos:start="287:30" pos:end="287:31">-&gt;</operator><name pos:start="287:32" pos:end="287:43">enc_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:49"><expr pos:start="289:9" pos:end="289:48"><name pos:start="289:9" pos:end="289:16">enc_size</name> <operator pos:start="289:18" pos:end="289:19">+=</operator> <name pos:start="289:21" pos:end="289:48"><name pos:start="289:21" pos:end="289:34">p_schro_params</name><operator pos:start="289:35" pos:end="289:36">-&gt;</operator><name pos:start="289:37" pos:end="289:48">enc_buf_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:43"><expr pos:start="291:9" pos:end="291:42"><call pos:start="291:9" pos:end="291:42"><name pos:start="291:9" pos:end="291:16">av_freep</name><argument_list pos:start="291:17" pos:end="291:42">(<argument pos:start="291:18" pos:end="291:41"><expr pos:start="291:18" pos:end="291:41"><operator pos:start="291:18" pos:end="291:18">&amp;</operator><name pos:start="291:19" pos:end="291:41"><name pos:start="291:19" pos:end="291:32">p_schro_params</name><operator pos:start="291:33" pos:end="291:34">-&gt;</operator><name pos:start="291:35" pos:end="291:41">enc_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:41"><expr pos:start="293:9" pos:end="293:40"><name pos:start="293:9" pos:end="293:36"><name pos:start="293:9" pos:end="293:22">p_schro_params</name><operator pos:start="293:23" pos:end="293:24">-&gt;</operator><name pos:start="293:25" pos:end="293:36">enc_buf_size</name></name> <operator pos:start="293:38" pos:end="293:38">=</operator> <literal type="number" pos:start="293:40" pos:end="293:40">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="299:5" pos:end="301:38"><if pos:start="299:5" pos:end="301:38">if <condition pos:start="299:8" pos:end="299:34">(<expr pos:start="299:9" pos:end="299:33"><name pos:start="299:9" pos:end="299:33"><name pos:start="299:9" pos:end="299:22">p_frame_output</name><operator pos:start="299:23" pos:end="299:24">-&gt;</operator><name pos:start="299:25" pos:end="299:33">key_frame</name></name></expr>)</condition><block type="pseudo" pos:start="301:9" pos:end="301:38"><block_content pos:start="301:9" pos:end="301:38">

        <expr_stmt pos:start="301:9" pos:end="301:38"><expr pos:start="301:9" pos:end="301:37"><name pos:start="301:9" pos:end="301:18"><name pos:start="301:9" pos:end="301:11">pkt</name><operator pos:start="301:12" pos:end="301:13">-&gt;</operator><name pos:start="301:14" pos:end="301:18">flags</name></name> <operator pos:start="301:20" pos:end="301:21">|=</operator> <name pos:start="301:23" pos:end="301:37">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:20"><expr pos:start="303:5" pos:end="303:19"><operator pos:start="303:5" pos:end="303:5">*</operator><name pos:start="303:6" pos:end="303:15">got_packet</name> <operator pos:start="303:17" pos:end="303:17">=</operator> <literal type="number" pos:start="303:19" pos:end="303:19">1</literal></expr>;</expr_stmt>



<label pos:start="307:1" pos:end="307:6"><name pos:start="307:1" pos:end="307:5">error</name>:</label>

    <comment type="block" pos:start="309:5" pos:end="309:20">/* free frame */</comment>

    <expr_stmt pos:start="311:5" pos:end="311:47"><expr pos:start="311:5" pos:end="311:46"><call pos:start="311:5" pos:end="311:46"><name pos:start="311:5" pos:end="311:30">libschroedinger_free_frame</name><argument_list pos:start="311:31" pos:end="311:46">(<argument pos:start="311:32" pos:end="311:45"><expr pos:start="311:32" pos:end="311:45"><name pos:start="311:32" pos:end="311:45">p_frame_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="313:5" pos:end="313:15">return <expr pos:start="313:12" pos:end="313:14"><name pos:start="313:12" pos:end="313:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
