<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16654.c" pos:tabs="8"><function pos:start="1:1" pos:end="651:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_stsd</name><parameter_list pos:start="1:25" pos:end="1:72">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">ByteIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:66">MOVAtom</name></type> <name pos:start="1:68" pos:end="1:71">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="651:1">{<block_content pos:start="5:5" pos:end="649:13">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name> <init pos:start="5:18" pos:end="5:54">= <expr pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:20">c</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:24">fc</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:33">streams</name><index pos:start="5:34" pos:end="5:54">[<expr pos:start="5:35" pos:end="5:53"><name pos:start="5:35" pos:end="5:51"><name pos:start="5:35" pos:end="5:35">c</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:39">fc</name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:51">nb_streams</name></name><operator pos:start="5:52" pos:end="5:52">-</operator><literal type="number" pos:start="5:53" pos:end="5:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name> <init pos:start="7:26" pos:end="7:40">= <expr pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:29">st</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">j</name></decl>, <decl pos:start="9:12" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:18">entries</name></decl>, <decl pos:start="9:21" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:36">pseudo_stream_id</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:17"><expr pos:start="13:5" pos:end="13:16"><call pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">get_byte</name><argument_list pos:start="13:13" pos:end="13:16">(<argument pos:start="13:14" pos:end="13:15"><expr pos:start="13:14" pos:end="13:15"><name pos:start="13:14" pos:end="13:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="13:19" pos:end="13:31">/* version */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><call pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">get_be24</name><argument_list pos:start="15:13" pos:end="15:16">(<argument pos:start="15:14" pos:end="15:15"><expr pos:start="15:14" pos:end="15:15"><name pos:start="15:14" pos:end="15:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="15:19" pos:end="15:29">/* flags */</comment>



    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:11">entries</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:26"><name pos:start="19:15" pos:end="19:22">get_be32</name><argument_list pos:start="19:23" pos:end="19:26">(<argument pos:start="19:24" pos:end="19:25"><expr pos:start="19:24" pos:end="19:25"><name pos:start="19:24" pos:end="19:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="23:5" pos:end="535:5">for<control pos:start="23:8" pos:end="23:73">(<init pos:start="23:9" pos:end="23:27"><expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:24">pseudo_stream_id</name><operator pos:start="23:25" pos:end="23:25">=</operator><literal type="number" pos:start="23:26" pos:end="23:26">0</literal></expr>;</init> <condition pos:start="23:29" pos:end="23:53"><expr pos:start="23:29" pos:end="23:52"><name pos:start="23:29" pos:end="23:44">pseudo_stream_id</name><operator pos:start="23:45" pos:end="23:45">&lt;</operator><name pos:start="23:46" pos:end="23:52">entries</name></expr>;</condition> <incr pos:start="23:55" pos:end="23:72"><expr pos:start="23:55" pos:end="23:72"><name pos:start="23:55" pos:end="23:70">pseudo_stream_id</name><operator pos:start="23:71" pos:end="23:72">++</operator></expr></incr>)</control> <block pos:start="23:75" pos:end="535:5">{<block_content pos:start="27:9" pos:end="533:34">

        <comment type="line" pos:start="25:9" pos:end="25:42">//Parsing Sample description table</comment>

        <decl_stmt pos:start="27:9" pos:end="27:24"><decl pos:start="27:9" pos:end="27:23"><type pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:12">enum</name> <name pos:start="27:14" pos:end="27:20">CodecID</name></name></type> <name pos:start="27:22" pos:end="27:23">id</name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:24"><decl pos:start="29:9" pos:end="29:23"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:19">dref_id</name> <init pos:start="29:21" pos:end="29:23">= <expr pos:start="29:23" pos:end="29:23"><literal type="number" pos:start="29:23" pos:end="29:23">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:32"><decl pos:start="31:9" pos:end="31:31"><type pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:15">MOVAtom</name></type> <name pos:start="31:17" pos:end="31:17">a</name> <init pos:start="31:19" pos:end="31:31">= <expr pos:start="31:21" pos:end="31:31"><block pos:start="31:21" pos:end="31:31">{ <expr pos:start="31:23" pos:end="31:23"><literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr>, <expr pos:start="31:26" pos:end="31:26"><literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr>, <expr pos:start="31:29" pos:end="31:29"><literal type="number" pos:start="31:29" pos:end="31:29">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:42"><decl pos:start="33:9" pos:end="33:41"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">int64_t</name></type> <name pos:start="33:17" pos:end="33:25">start_pos</name> <init pos:start="33:27" pos:end="33:41">= <expr pos:start="33:29" pos:end="33:41"><call pos:start="33:29" pos:end="33:41"><name pos:start="33:29" pos:end="33:37">url_ftell</name><argument_list pos:start="33:38" pos:end="33:41">(<argument pos:start="33:39" pos:end="33:40"><expr pos:start="33:39" pos:end="33:40"><name pos:start="33:39" pos:end="33:40">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:32"><decl pos:start="35:9" pos:end="35:31"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:16">size</name> <init pos:start="35:18" pos:end="35:31">= <expr pos:start="35:20" pos:end="35:31"><call pos:start="35:20" pos:end="35:31"><name pos:start="35:20" pos:end="35:27">get_be32</name><argument_list pos:start="35:28" pos:end="35:31">(<argument pos:start="35:29" pos:end="35:30"><expr pos:start="35:29" pos:end="35:30"><name pos:start="35:29" pos:end="35:30">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="35:34" pos:end="35:43">/* size */</comment>

        <decl_stmt pos:start="37:9" pos:end="37:39"><decl pos:start="37:9" pos:end="37:38"><type pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:16">uint32_t</name></type> <name pos:start="37:18" pos:end="37:23">format</name> <init pos:start="37:25" pos:end="37:38">= <expr pos:start="37:27" pos:end="37:38"><call pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:34">get_le32</name><argument_list pos:start="37:35" pos:end="37:38">(<argument pos:start="37:36" pos:end="37:37"><expr pos:start="37:36" pos:end="37:37"><name pos:start="37:36" pos:end="37:37">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="37:41" pos:end="37:57">/* data format */</comment>



        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:23">(<expr pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:16">size</name> <operator pos:start="41:18" pos:end="41:19">&gt;=</operator> <literal type="number" pos:start="41:21" pos:end="41:22">16</literal></expr>)</condition> <block pos:start="41:25" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:35">

            <expr_stmt pos:start="43:13" pos:end="43:25"><expr pos:start="43:13" pos:end="43:24"><call pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:20">get_be32</name><argument_list pos:start="43:21" pos:end="43:24">(<argument pos:start="43:22" pos:end="43:23"><expr pos:start="43:22" pos:end="43:23"><name pos:start="43:22" pos:end="43:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="43:27" pos:end="43:40">/* reserved */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:25"><expr pos:start="45:13" pos:end="45:24"><call pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:20">get_be16</name><argument_list pos:start="45:21" pos:end="45:24">(<argument pos:start="45:22" pos:end="45:23"><expr pos:start="45:22" pos:end="45:23"><name pos:start="45:22" pos:end="45:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="45:27" pos:end="45:40">/* reserved */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:19">dref_id</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <call pos:start="47:23" pos:end="47:34"><name pos:start="47:23" pos:end="47:30">get_be16</name><argument_list pos:start="47:31" pos:end="47:34">(<argument pos:start="47:32" pos:end="47:33"><expr pos:start="47:32" pos:end="47:33"><name pos:start="47:32" pos:end="47:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="53:9" pos:end="75:9"><if pos:start="53:9" pos:end="75:9">if <condition pos:start="53:12" pos:end="61:12">(<expr pos:start="53:13" pos:end="59:84"><name pos:start="53:13" pos:end="53:32"><name pos:start="53:13" pos:end="53:14">st</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:21">codec</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:32">codec_tag</name></name> <operator pos:start="53:34" pos:end="53:35">&amp;&amp;</operator>

            <name pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:14">st</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:21">codec</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:32">codec_tag</name></name> <operator pos:start="55:34" pos:end="55:35">!=</operator> <name pos:start="55:37" pos:end="55:42">format</name> <operator pos:start="55:44" pos:end="55:45">&amp;&amp;</operator>

            <operator pos:start="57:13" pos:end="57:13">(</operator><ternary pos:start="57:14" pos:end="59:83"><condition pos:start="57:14" pos:end="57:36"><expr pos:start="57:14" pos:end="57:34"><name pos:start="57:14" pos:end="57:34"><name pos:start="57:14" pos:end="57:14">c</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:18">fc</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:34">video_codec_id</name></name></expr> ?</condition><then pos:start="57:38" pos:end="57:106"> <expr pos:start="57:38" pos:end="57:106"><call pos:start="57:38" pos:end="57:81"><name pos:start="57:38" pos:end="57:52">ff_codec_get_id</name><argument_list pos:start="57:53" pos:end="57:81">(<argument pos:start="57:54" pos:end="57:72"><expr pos:start="57:54" pos:end="57:72"><name pos:start="57:54" pos:end="57:72">codec_movvideo_tags</name></expr></argument>, <argument pos:start="57:75" pos:end="57:80"><expr pos:start="57:75" pos:end="57:80"><name pos:start="57:75" pos:end="57:80">format</name></expr></argument>)</argument_list></call> <operator pos:start="57:83" pos:end="57:84">!=</operator> <name pos:start="57:86" pos:end="57:106"><name pos:start="57:86" pos:end="57:86">c</name><operator pos:start="57:87" pos:end="57:88">-&gt;</operator><name pos:start="57:89" pos:end="57:90">fc</name><operator pos:start="57:91" pos:end="57:92">-&gt;</operator><name pos:start="57:93" pos:end="57:106">video_codec_id</name></name></expr>

                                   </then><else pos:start="59:36" pos:end="59:83">: <expr pos:start="59:38" pos:end="59:83"><name pos:start="59:38" pos:end="59:57"><name pos:start="59:38" pos:end="59:39">st</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:46">codec</name><operator pos:start="59:47" pos:end="59:48">-&gt;</operator><name pos:start="59:49" pos:end="59:57">codec_tag</name></name> <operator pos:start="59:59" pos:end="59:60">!=</operator> <call pos:start="59:62" pos:end="59:83"><name pos:start="59:62" pos:end="59:66">MKTAG</name><argument_list pos:start="59:67" pos:end="59:83">(<argument pos:start="59:68" pos:end="59:70"><expr pos:start="59:68" pos:end="59:70"><literal type="char" pos:start="59:68" pos:end="59:70">'j'</literal></expr></argument>,<argument pos:start="59:72" pos:end="59:74"><expr pos:start="59:72" pos:end="59:74"><literal type="char" pos:start="59:72" pos:end="59:74">'p'</literal></expr></argument>,<argument pos:start="59:76" pos:end="59:78"><expr pos:start="59:76" pos:end="59:78"><literal type="char" pos:start="59:76" pos:end="59:78">'e'</literal></expr></argument>,<argument pos:start="59:80" pos:end="59:82"><expr pos:start="59:80" pos:end="59:82"><literal type="char" pos:start="59:80" pos:end="59:82">'g'</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="59:84" pos:end="59:84">)</operator></expr>

           )</condition><block pos:start="61:13" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:21">

            <comment type="block" pos:start="63:13" pos:end="67:52">/* Multiple fourcc, we skip JPEG. This is not correct, we should

             * export it as a separate AVStream but this needs a few changes

             * in the MOV demuxer, patch welcome. */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:77"><expr pos:start="69:13" pos:end="69:76"><call pos:start="69:13" pos:end="69:76"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="69:76">(<argument pos:start="69:20" pos:end="69:24"><expr pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:20">c</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:24">fc</name></name></expr></argument>, <argument pos:start="69:27" pos:end="69:40"><expr pos:start="69:27" pos:end="69:40"><name pos:start="69:27" pos:end="69:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="69:43" pos:end="69:75"><expr pos:start="69:43" pos:end="69:75"><literal type="string" pos:start="69:43" pos:end="69:75">"multiple fourcc not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:62"><expr pos:start="71:13" pos:end="71:61"><call pos:start="71:13" pos:end="71:61"><name pos:start="71:13" pos:end="71:21">url_fskip</name><argument_list pos:start="71:22" pos:end="71:61">(<argument pos:start="71:23" pos:end="71:24"><expr pos:start="71:23" pos:end="71:24"><name pos:start="71:23" pos:end="71:24">pb</name></expr></argument>, <argument pos:start="71:27" pos:end="71:60"><expr pos:start="71:27" pos:end="71:60"><name pos:start="71:27" pos:end="71:30">size</name> <operator pos:start="71:32" pos:end="71:32">-</operator> <operator pos:start="71:34" pos:end="71:34">(</operator><call pos:start="71:35" pos:end="71:47"><name pos:start="71:35" pos:end="71:43">url_ftell</name><argument_list pos:start="71:44" pos:end="71:47">(<argument pos:start="71:45" pos:end="71:46"><expr pos:start="71:45" pos:end="71:46"><name pos:start="71:45" pos:end="71:46">pb</name></expr></argument>)</argument_list></call> <operator pos:start="71:49" pos:end="71:49">-</operator> <name pos:start="71:51" pos:end="71:59">start_pos</name><operator pos:start="71:60" pos:end="71:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="73:13" pos:end="73:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:76"><expr pos:start="77:9" pos:end="77:75"><name pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:10">sc</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:28">pseudo_stream_id</name></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <ternary pos:start="77:32" pos:end="77:75"><condition pos:start="77:32" pos:end="77:53"><expr pos:start="77:32" pos:end="77:51"><name pos:start="77:32" pos:end="77:51"><name pos:start="77:32" pos:end="77:33">st</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:40">codec</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:51">codec_tag</name></name></expr> ?</condition><then pos:start="77:55" pos:end="77:56"> <expr pos:start="77:55" pos:end="77:56"><operator pos:start="77:55" pos:end="77:55">-</operator><literal type="number" pos:start="77:56" pos:end="77:56">1</literal></expr> </then><else pos:start="77:58" pos:end="77:75">: <expr pos:start="77:60" pos:end="77:75"><name pos:start="77:60" pos:end="77:75">pseudo_stream_id</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:29"><expr pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:10">sc</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:19">dref_id</name></name><operator pos:start="79:20" pos:end="79:20">=</operator> <name pos:start="79:22" pos:end="79:28">dref_id</name></expr>;</expr_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:38"><expr pos:start="83:9" pos:end="83:37"><name pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:10">st</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:17">codec</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:28">codec_tag</name></name> <operator pos:start="83:30" pos:end="83:30">=</operator> <name pos:start="83:32" pos:end="83:37">format</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:58"><expr pos:start="85:9" pos:end="85:57"><name pos:start="85:9" pos:end="85:10">id</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="85:57"><name pos:start="85:14" pos:end="85:28">ff_codec_get_id</name><argument_list pos:start="85:29" pos:end="85:57">(<argument pos:start="85:30" pos:end="85:48"><expr pos:start="85:30" pos:end="85:48"><name pos:start="85:30" pos:end="85:48">codec_movaudio_tags</name></expr></argument>, <argument pos:start="85:51" pos:end="85:56"><expr pos:start="85:51" pos:end="85:56"><name pos:start="85:51" pos:end="85:56">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="89:77"><if pos:start="87:9" pos:end="89:77">if <condition pos:start="87:12" pos:end="87:90">(<expr pos:start="87:13" pos:end="87:89"><name pos:start="87:13" pos:end="87:14">id</name><operator pos:start="87:15" pos:end="87:16">&lt;=</operator><literal type="number" pos:start="87:17" pos:end="87:17">0</literal> <operator pos:start="87:19" pos:end="87:20">&amp;&amp;</operator> <operator pos:start="87:22" pos:end="87:22">(</operator><operator pos:start="87:23" pos:end="87:23">(</operator><name pos:start="87:24" pos:end="87:29">format</name><operator pos:start="87:30" pos:end="87:30">&amp;</operator><literal type="number" pos:start="87:31" pos:end="87:36">0xFFFF</literal><operator pos:start="87:37" pos:end="87:37">)</operator> <operator pos:start="87:39" pos:end="87:40">==</operator> <literal type="char" pos:start="87:42" pos:end="87:44">'m'</literal><operator pos:start="87:45" pos:end="87:45">+</operator><operator pos:start="87:46" pos:end="87:46">(</operator><literal type="char" pos:start="87:47" pos:end="87:49">'s'</literal><operator pos:start="87:50" pos:end="87:51">&lt;&lt;</operator><literal type="number" pos:start="87:52" pos:end="87:52">8</literal><operator pos:start="87:53" pos:end="87:53">)</operator> <operator pos:start="87:55" pos:end="87:56">||</operator> <operator pos:start="87:58" pos:end="87:58">(</operator><name pos:start="87:59" pos:end="87:64">format</name><operator pos:start="87:65" pos:end="87:65">&amp;</operator><literal type="number" pos:start="87:66" pos:end="87:71">0xFFFF</literal><operator pos:start="87:72" pos:end="87:72">)</operator> <operator pos:start="87:74" pos:end="87:75">==</operator> <literal type="char" pos:start="87:77" pos:end="87:79">'T'</literal><operator pos:start="87:80" pos:end="87:80">+</operator><operator pos:start="87:81" pos:end="87:81">(</operator><literal type="char" pos:start="87:82" pos:end="87:84">'S'</literal><operator pos:start="87:85" pos:end="87:86">&lt;&lt;</operator><literal type="number" pos:start="87:87" pos:end="87:87">8</literal><operator pos:start="87:88" pos:end="87:88">)</operator><operator pos:start="87:89" pos:end="87:89">)</operator></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:77"><block_content pos:start="89:13" pos:end="89:77">

            <expr_stmt pos:start="89:13" pos:end="89:77"><expr pos:start="89:13" pos:end="89:76"><name pos:start="89:13" pos:end="89:14">id</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <call pos:start="89:18" pos:end="89:76"><name pos:start="89:18" pos:end="89:32">ff_codec_get_id</name><argument_list pos:start="89:33" pos:end="89:76">(<argument pos:start="89:34" pos:end="89:50"><expr pos:start="89:34" pos:end="89:50"><name pos:start="89:34" pos:end="89:50">ff_codec_wav_tags</name></expr></argument>, <argument pos:start="89:53" pos:end="89:75"><expr pos:start="89:53" pos:end="89:75"><call pos:start="89:53" pos:end="89:68"><name pos:start="89:53" pos:end="89:60">bswap_32</name><argument_list pos:start="89:61" pos:end="89:68">(<argument pos:start="89:62" pos:end="89:67"><expr pos:start="89:62" pos:end="89:67"><name pos:start="89:62" pos:end="89:67">format</name></expr></argument>)</argument_list></call><operator pos:start="89:69" pos:end="89:69">&amp;</operator><literal type="number" pos:start="89:70" pos:end="89:75">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="93:9" pos:end="121:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:64">(<expr pos:start="93:13" pos:end="93:63"><name pos:start="93:13" pos:end="93:33"><name pos:start="93:13" pos:end="93:14">st</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:21">codec</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:33">codec_type</name></name> <operator pos:start="93:35" pos:end="93:36">!=</operator> <name pos:start="93:38" pos:end="93:53">CODEC_TYPE_VIDEO</name> <operator pos:start="93:55" pos:end="93:56">&amp;&amp;</operator> <name pos:start="93:58" pos:end="93:59">id</name> <operator pos:start="93:61" pos:end="93:61">&gt;</operator> <literal type="number" pos:start="93:63" pos:end="93:63">0</literal></expr>)</condition> <block pos:start="93:66" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:53">

            <expr_stmt pos:start="95:13" pos:end="95:53"><expr pos:start="95:13" pos:end="95:52"><name pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:14">st</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:21">codec</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:33">codec_type</name></name> <operator pos:start="95:35" pos:end="95:35">=</operator> <name pos:start="95:37" pos:end="95:52">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="97:11" pos:end="121:9">else if <condition pos:start="97:19" pos:end="99:62">(<expr pos:start="97:20" pos:end="99:61"><name pos:start="97:20" pos:end="97:40"><name pos:start="97:20" pos:end="97:21">st</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:28">codec</name><operator pos:start="97:29" pos:end="97:30">-&gt;</operator><name pos:start="97:31" pos:end="97:40">codec_type</name></name> <operator pos:start="97:42" pos:end="97:43">!=</operator> <name pos:start="97:45" pos:end="97:60">CODEC_TYPE_AUDIO</name> <operator pos:start="97:62" pos:end="97:63">&amp;&amp;</operator> <comment type="block" pos:start="97:65" pos:end="97:97">/* do not overwrite codec type */</comment>

                   <name pos:start="99:20" pos:end="99:25">format</name> <operator pos:start="99:27" pos:end="99:28">&amp;&amp;</operator> <name pos:start="99:30" pos:end="99:35">format</name> <operator pos:start="99:37" pos:end="99:38">!=</operator> <call pos:start="99:40" pos:end="99:61"><name pos:start="99:40" pos:end="99:44">MKTAG</name><argument_list pos:start="99:45" pos:end="99:61">(<argument pos:start="99:46" pos:end="99:48"><expr pos:start="99:46" pos:end="99:48"><literal type="char" pos:start="99:46" pos:end="99:48">'m'</literal></expr></argument>,<argument pos:start="99:50" pos:end="99:52"><expr pos:start="99:50" pos:end="99:52"><literal type="char" pos:start="99:50" pos:end="99:52">'p'</literal></expr></argument>,<argument pos:start="99:54" pos:end="99:56"><expr pos:start="99:54" pos:end="99:56"><literal type="char" pos:start="99:54" pos:end="99:56">'4'</literal></expr></argument>,<argument pos:start="99:58" pos:end="99:60"><expr pos:start="99:58" pos:end="99:60"><literal type="char" pos:start="99:58" pos:end="99:60">'s'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:64" pos:end="121:9">{<block_content pos:start="101:13" pos:end="119:13"> <comment type="block" pos:start="99:66" pos:end="99:93">/* skip old asf mpeg4 tag */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:62"><expr pos:start="101:13" pos:end="101:61"><name pos:start="101:13" pos:end="101:14">id</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <call pos:start="101:18" pos:end="101:61"><name pos:start="101:18" pos:end="101:32">ff_codec_get_id</name><argument_list pos:start="101:33" pos:end="101:61">(<argument pos:start="101:34" pos:end="101:52"><expr pos:start="101:34" pos:end="101:52"><name pos:start="101:34" pos:end="101:52">codec_movvideo_tags</name></expr></argument>, <argument pos:start="101:55" pos:end="101:60"><expr pos:start="101:55" pos:end="101:60"><name pos:start="101:55" pos:end="101:60">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="105:64"><if pos:start="103:13" pos:end="105:64">if <condition pos:start="103:16" pos:end="103:24">(<expr pos:start="103:17" pos:end="103:23"><name pos:start="103:17" pos:end="103:18">id</name> <operator pos:start="103:20" pos:end="103:21">&lt;=</operator> <literal type="number" pos:start="103:23" pos:end="103:23">0</literal></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:64"><block_content pos:start="105:17" pos:end="105:64">

                <expr_stmt pos:start="105:17" pos:end="105:64"><expr pos:start="105:17" pos:end="105:63"><name pos:start="105:17" pos:end="105:18">id</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <call pos:start="105:22" pos:end="105:63"><name pos:start="105:22" pos:end="105:36">ff_codec_get_id</name><argument_list pos:start="105:37" pos:end="105:63">(<argument pos:start="105:38" pos:end="105:54"><expr pos:start="105:38" pos:end="105:54"><name pos:start="105:38" pos:end="105:54">ff_codec_bmp_tags</name></expr></argument>, <argument pos:start="105:57" pos:end="105:62"><expr pos:start="105:57" pos:end="105:62"><name pos:start="105:57" pos:end="105:62">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="107:13" pos:end="119:13"><if pos:start="107:13" pos:end="109:57">if <condition pos:start="107:16" pos:end="107:23">(<expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:18">id</name> <operator pos:start="107:20" pos:end="107:20">&gt;</operator> <literal type="number" pos:start="107:22" pos:end="107:22">0</literal></expr>)</condition><block type="pseudo" pos:start="109:17" pos:end="109:57"><block_content pos:start="109:17" pos:end="109:57">

                <expr_stmt pos:start="109:17" pos:end="109:57"><expr pos:start="109:17" pos:end="109:56"><name pos:start="109:17" pos:end="109:37"><name pos:start="109:17" pos:end="109:18">st</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:25">codec</name><operator pos:start="109:26" pos:end="109:27">-&gt;</operator><name pos:start="109:28" pos:end="109:37">codec_type</name></name> <operator pos:start="109:39" pos:end="109:39">=</operator> <name pos:start="109:41" pos:end="109:56">CODEC_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="111:13" pos:end="119:13">else if<condition pos:start="111:20" pos:end="111:61">(<expr pos:start="111:21" pos:end="111:60"><name pos:start="111:21" pos:end="111:41"><name pos:start="111:21" pos:end="111:22">st</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:29">codec</name><operator pos:start="111:30" pos:end="111:31">-&gt;</operator><name pos:start="111:32" pos:end="111:41">codec_type</name></name> <operator pos:start="111:43" pos:end="111:44">==</operator> <name pos:start="111:46" pos:end="111:60">CODEC_TYPE_DATA</name></expr>)</condition><block pos:start="111:62" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:64">

                <expr_stmt pos:start="113:17" pos:end="113:72"><expr pos:start="113:17" pos:end="113:71"><name pos:start="113:17" pos:end="113:18">id</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <call pos:start="113:22" pos:end="113:71"><name pos:start="113:22" pos:end="113:36">ff_codec_get_id</name><argument_list pos:start="113:37" pos:end="113:71">(<argument pos:start="113:38" pos:end="113:62"><expr pos:start="113:38" pos:end="113:62"><name pos:start="113:38" pos:end="113:62">ff_codec_movsubtitle_tags</name></expr></argument>, <argument pos:start="113:65" pos:end="113:70"><expr pos:start="113:65" pos:end="113:70"><name pos:start="113:65" pos:end="113:70">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="115:17" pos:end="117:64"><if pos:start="115:17" pos:end="117:64">if<condition pos:start="115:19" pos:end="115:26">(<expr pos:start="115:20" pos:end="115:25"><name pos:start="115:20" pos:end="115:21">id</name> <operator pos:start="115:23" pos:end="115:23">&gt;</operator> <literal type="number" pos:start="115:25" pos:end="115:25">0</literal></expr>)</condition><block type="pseudo" pos:start="117:21" pos:end="117:64"><block_content pos:start="117:21" pos:end="117:64">

                    <expr_stmt pos:start="117:21" pos:end="117:64"><expr pos:start="117:21" pos:end="117:63"><name pos:start="117:21" pos:end="117:41"><name pos:start="117:21" pos:end="117:22">st</name><operator pos:start="117:23" pos:end="117:24">-&gt;</operator><name pos:start="117:25" pos:end="117:29">codec</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:41">codec_type</name></name> <operator pos:start="117:43" pos:end="117:43">=</operator> <name pos:start="117:45" pos:end="117:63">CODEC_TYPE_SUBTITLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="129:62"><expr pos:start="125:9" pos:end="129:61"><call pos:start="125:9" pos:end="129:61"><name pos:start="125:9" pos:end="125:15">dprintf</name><argument_list pos:start="125:16" pos:end="129:61">(<argument pos:start="125:17" pos:end="125:21"><expr pos:start="125:17" pos:end="125:21"><name pos:start="125:17" pos:end="125:21"><name pos:start="125:17" pos:end="125:17">c</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:21">fc</name></name></expr></argument>, <argument pos:start="125:24" pos:end="125:62"><expr pos:start="125:24" pos:end="125:62"><literal type="string" pos:start="125:24" pos:end="125:62">"size=%d 4CC= %c%c%c%c codec_type=%d\n"</literal></expr></argument>, <argument pos:start="125:65" pos:end="125:68"><expr pos:start="125:65" pos:end="125:68"><name pos:start="125:65" pos:end="125:68">size</name></expr></argument>,

                <argument pos:start="127:17" pos:end="127:36"><expr pos:start="127:17" pos:end="127:36"><operator pos:start="127:17" pos:end="127:17">(</operator><name pos:start="127:18" pos:end="127:23">format</name> <operator pos:start="127:25" pos:end="127:26">&gt;&gt;</operator> <literal type="number" pos:start="127:28" pos:end="127:28">0</literal><operator pos:start="127:29" pos:end="127:29">)</operator> <operator pos:start="127:31" pos:end="127:31">&amp;</operator> <literal type="number" pos:start="127:33" pos:end="127:36">0xff</literal></expr></argument>, <argument pos:start="127:39" pos:end="127:58"><expr pos:start="127:39" pos:end="127:58"><operator pos:start="127:39" pos:end="127:39">(</operator><name pos:start="127:40" pos:end="127:45">format</name> <operator pos:start="127:47" pos:end="127:48">&gt;&gt;</operator> <literal type="number" pos:start="127:50" pos:end="127:50">8</literal><operator pos:start="127:51" pos:end="127:51">)</operator> <operator pos:start="127:53" pos:end="127:53">&amp;</operator> <literal type="number" pos:start="127:55" pos:end="127:58">0xff</literal></expr></argument>, <argument pos:start="127:61" pos:end="127:81"><expr pos:start="127:61" pos:end="127:81"><operator pos:start="127:61" pos:end="127:61">(</operator><name pos:start="127:62" pos:end="127:67">format</name> <operator pos:start="127:69" pos:end="127:70">&gt;&gt;</operator> <literal type="number" pos:start="127:72" pos:end="127:73">16</literal><operator pos:start="127:74" pos:end="127:74">)</operator> <operator pos:start="127:76" pos:end="127:76">&amp;</operator> <literal type="number" pos:start="127:78" pos:end="127:81">0xff</literal></expr></argument>,

                <argument pos:start="129:17" pos:end="129:37"><expr pos:start="129:17" pos:end="129:37"><operator pos:start="129:17" pos:end="129:17">(</operator><name pos:start="129:18" pos:end="129:23">format</name> <operator pos:start="129:25" pos:end="129:26">&gt;&gt;</operator> <literal type="number" pos:start="129:28" pos:end="129:29">24</literal><operator pos:start="129:30" pos:end="129:30">)</operator> <operator pos:start="129:32" pos:end="129:32">&amp;</operator> <literal type="number" pos:start="129:34" pos:end="129:37">0xff</literal></expr></argument>, <argument pos:start="129:40" pos:end="129:60"><expr pos:start="129:40" pos:end="129:60"><name pos:start="129:40" pos:end="129:60"><name pos:start="129:40" pos:end="129:41">st</name><operator pos:start="129:42" pos:end="129:43">-&gt;</operator><name pos:start="129:44" pos:end="129:48">codec</name><operator pos:start="129:49" pos:end="129:50">-&gt;</operator><name pos:start="129:51" pos:end="129:60">codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="133:9" pos:end="519:9"><if pos:start="133:9" pos:end="335:9">if<condition pos:start="133:11" pos:end="133:51">(<expr pos:start="133:12" pos:end="133:50"><name pos:start="133:12" pos:end="133:32"><name pos:start="133:12" pos:end="133:13">st</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:20">codec</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:32">codec_type</name></name><operator pos:start="133:33" pos:end="133:34">==</operator><name pos:start="133:35" pos:end="133:50">CODEC_TYPE_VIDEO</name></expr>)</condition> <block pos:start="133:53" pos:end="335:9">{<block_content pos:start="135:13" pos:end="333:13">

            <decl_stmt pos:start="135:13" pos:end="135:35"><decl pos:start="135:13" pos:end="135:34"><type pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:19">uint8_t</name></type> <name pos:start="135:21" pos:end="135:34"><name pos:start="135:21" pos:end="135:30">codec_name</name><index pos:start="135:31" pos:end="135:34">[<expr pos:start="135:32" pos:end="135:33"><literal type="number" pos:start="135:32" pos:end="135:33">32</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="137:13" pos:end="137:37"><decl pos:start="137:13" pos:end="137:36"><type pos:start="137:13" pos:end="137:24"><name pos:start="137:13" pos:end="137:20">unsigned</name> <name pos:start="137:22" pos:end="137:24">int</name></type> <name pos:start="137:26" pos:end="137:36">color_depth</name></decl>;</decl_stmt>

            <decl_stmt pos:start="139:13" pos:end="139:32"><decl pos:start="139:13" pos:end="139:31"><type pos:start="139:13" pos:end="139:15"><name pos:start="139:13" pos:end="139:15">int</name></type> <name pos:start="139:17" pos:end="139:31">color_greyscale</name></decl>;</decl_stmt>



            <expr_stmt pos:start="143:13" pos:end="143:37"><expr pos:start="143:13" pos:end="143:36"><name pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:14">st</name><operator pos:start="143:15" pos:end="143:16">-&gt;</operator><name pos:start="143:17" pos:end="143:21">codec</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:31">codec_id</name></name> <operator pos:start="143:33" pos:end="143:33">=</operator> <name pos:start="143:35" pos:end="143:36">id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:25"><expr pos:start="145:13" pos:end="145:24"><call pos:start="145:13" pos:end="145:24"><name pos:start="145:13" pos:end="145:20">get_be16</name><argument_list pos:start="145:21" pos:end="145:24">(<argument pos:start="145:22" pos:end="145:23"><expr pos:start="145:22" pos:end="145:23"><name pos:start="145:22" pos:end="145:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="145:27" pos:end="145:39">/* version */</comment>

            <expr_stmt pos:start="147:13" pos:end="147:25"><expr pos:start="147:13" pos:end="147:24"><call pos:start="147:13" pos:end="147:24"><name pos:start="147:13" pos:end="147:20">get_be16</name><argument_list pos:start="147:21" pos:end="147:24">(<argument pos:start="147:22" pos:end="147:23"><expr pos:start="147:22" pos:end="147:23"><name pos:start="147:22" pos:end="147:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="147:27" pos:end="147:46">/* revision level */</comment>

            <expr_stmt pos:start="149:13" pos:end="149:25"><expr pos:start="149:13" pos:end="149:24"><call pos:start="149:13" pos:end="149:24"><name pos:start="149:13" pos:end="149:20">get_be32</name><argument_list pos:start="149:21" pos:end="149:24">(<argument pos:start="149:22" pos:end="149:23"><expr pos:start="149:22" pos:end="149:23"><name pos:start="149:22" pos:end="149:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="149:27" pos:end="149:38">/* vendor */</comment>

            <expr_stmt pos:start="151:13" pos:end="151:25"><expr pos:start="151:13" pos:end="151:24"><call pos:start="151:13" pos:end="151:24"><name pos:start="151:13" pos:end="151:20">get_be32</name><argument_list pos:start="151:21" pos:end="151:24">(<argument pos:start="151:22" pos:end="151:23"><expr pos:start="151:22" pos:end="151:23"><name pos:start="151:22" pos:end="151:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="151:27" pos:end="151:48">/* temporal quality */</comment>

            <expr_stmt pos:start="153:13" pos:end="153:25"><expr pos:start="153:13" pos:end="153:24"><call pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:20">get_be32</name><argument_list pos:start="153:21" pos:end="153:24">(<argument pos:start="153:22" pos:end="153:23"><expr pos:start="153:22" pos:end="153:23"><name pos:start="153:22" pos:end="153:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="153:27" pos:end="153:47">/* spatial quality */</comment>



            <expr_stmt pos:start="157:13" pos:end="157:44"><expr pos:start="157:13" pos:end="157:43"><name pos:start="157:13" pos:end="157:28"><name pos:start="157:13" pos:end="157:14">st</name><operator pos:start="157:15" pos:end="157:16">-&gt;</operator><name pos:start="157:17" pos:end="157:21">codec</name><operator pos:start="157:22" pos:end="157:23">-&gt;</operator><name pos:start="157:24" pos:end="157:28">width</name></name> <operator pos:start="157:30" pos:end="157:30">=</operator> <call pos:start="157:32" pos:end="157:43"><name pos:start="157:32" pos:end="157:39">get_be16</name><argument_list pos:start="157:40" pos:end="157:43">(<argument pos:start="157:41" pos:end="157:42"><expr pos:start="157:41" pos:end="157:42"><name pos:start="157:41" pos:end="157:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="157:46" pos:end="157:56">/* width */</comment>

            <expr_stmt pos:start="159:13" pos:end="159:45"><expr pos:start="159:13" pos:end="159:44"><name pos:start="159:13" pos:end="159:29"><name pos:start="159:13" pos:end="159:14">st</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:21">codec</name><operator pos:start="159:22" pos:end="159:23">-&gt;</operator><name pos:start="159:24" pos:end="159:29">height</name></name> <operator pos:start="159:31" pos:end="159:31">=</operator> <call pos:start="159:33" pos:end="159:44"><name pos:start="159:33" pos:end="159:40">get_be16</name><argument_list pos:start="159:41" pos:end="159:44">(<argument pos:start="159:42" pos:end="159:43"><expr pos:start="159:42" pos:end="159:43"><name pos:start="159:42" pos:end="159:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="159:47" pos:end="159:58">/* height */</comment>



            <expr_stmt pos:start="163:13" pos:end="163:25"><expr pos:start="163:13" pos:end="163:24"><call pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:20">get_be32</name><argument_list pos:start="163:21" pos:end="163:24">(<argument pos:start="163:22" pos:end="163:23"><expr pos:start="163:22" pos:end="163:23"><name pos:start="163:22" pos:end="163:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="163:27" pos:end="163:48">/* horiz resolution */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:25"><expr pos:start="165:13" pos:end="165:24"><call pos:start="165:13" pos:end="165:24"><name pos:start="165:13" pos:end="165:20">get_be32</name><argument_list pos:start="165:21" pos:end="165:24">(<argument pos:start="165:22" pos:end="165:23"><expr pos:start="165:22" pos:end="165:23"><name pos:start="165:22" pos:end="165:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="165:27" pos:end="165:47">/* vert resolution */</comment>

            <expr_stmt pos:start="167:13" pos:end="167:25"><expr pos:start="167:13" pos:end="167:24"><call pos:start="167:13" pos:end="167:24"><name pos:start="167:13" pos:end="167:20">get_be32</name><argument_list pos:start="167:21" pos:end="167:24">(<argument pos:start="167:22" pos:end="167:23"><expr pos:start="167:22" pos:end="167:23"><name pos:start="167:22" pos:end="167:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="167:27" pos:end="167:51">/* data size, always 0 */</comment>

            <expr_stmt pos:start="169:13" pos:end="169:25"><expr pos:start="169:13" pos:end="169:24"><call pos:start="169:13" pos:end="169:24"><name pos:start="169:13" pos:end="169:20">get_be16</name><argument_list pos:start="169:21" pos:end="169:24">(<argument pos:start="169:22" pos:end="169:23"><expr pos:start="169:22" pos:end="169:23"><name pos:start="169:22" pos:end="169:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="169:27" pos:end="169:50">/* frames per samples */</comment>



            <expr_stmt pos:start="173:13" pos:end="173:43"><expr pos:start="173:13" pos:end="173:42"><call pos:start="173:13" pos:end="173:42"><name pos:start="173:13" pos:end="173:22">get_buffer</name><argument_list pos:start="173:23" pos:end="173:42">(<argument pos:start="173:24" pos:end="173:25"><expr pos:start="173:24" pos:end="173:25"><name pos:start="173:24" pos:end="173:25">pb</name></expr></argument>, <argument pos:start="173:28" pos:end="173:37"><expr pos:start="173:28" pos:end="173:37"><name pos:start="173:28" pos:end="173:37">codec_name</name></expr></argument>, <argument pos:start="173:40" pos:end="173:41"><expr pos:start="173:40" pos:end="173:41"><literal type="number" pos:start="173:40" pos:end="173:41">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="173:45" pos:end="173:75">/* codec name, pascal string */</comment>

            <if_stmt pos:start="175:13" pos:end="181:13"><if pos:start="175:13" pos:end="181:13">if <condition pos:start="175:16" pos:end="175:36">(<expr pos:start="175:17" pos:end="175:35"><name pos:start="175:17" pos:end="175:29"><name pos:start="175:17" pos:end="175:26">codec_name</name><index pos:start="175:27" pos:end="175:29">[<expr pos:start="175:28" pos:end="175:28"><literal type="number" pos:start="175:28" pos:end="175:28">0</literal></expr>]</index></name> <operator pos:start="175:31" pos:end="175:32">&lt;=</operator> <literal type="number" pos:start="175:34" pos:end="175:35">31</literal></expr>)</condition> <block pos:start="175:38" pos:end="181:13">{<block_content pos:start="177:17" pos:end="179:57">

                <expr_stmt pos:start="177:17" pos:end="177:76"><expr pos:start="177:17" pos:end="177:75"><call pos:start="177:17" pos:end="177:75"><name pos:start="177:17" pos:end="177:22">memcpy</name><argument_list pos:start="177:23" pos:end="177:75">(<argument pos:start="177:24" pos:end="177:44"><expr pos:start="177:24" pos:end="177:44"><name pos:start="177:24" pos:end="177:44"><name pos:start="177:24" pos:end="177:25">st</name><operator pos:start="177:26" pos:end="177:27">-&gt;</operator><name pos:start="177:28" pos:end="177:32">codec</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:44">codec_name</name></name></expr></argument>, <argument pos:start="177:47" pos:end="177:60"><expr pos:start="177:47" pos:end="177:60"><operator pos:start="177:47" pos:end="177:47">&amp;</operator><name pos:start="177:48" pos:end="177:60"><name pos:start="177:48" pos:end="177:57">codec_name</name><index pos:start="177:58" pos:end="177:60">[<expr pos:start="177:59" pos:end="177:59"><literal type="number" pos:start="177:59" pos:end="177:59">1</literal></expr>]</index></name></expr></argument>,<argument pos:start="177:62" pos:end="177:74"><expr pos:start="177:62" pos:end="177:74"><name pos:start="177:62" pos:end="177:74"><name pos:start="177:62" pos:end="177:71">codec_name</name><index pos:start="177:72" pos:end="177:74">[<expr pos:start="177:73" pos:end="177:73"><literal type="number" pos:start="177:73" pos:end="177:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:57"><expr pos:start="179:17" pos:end="179:56"><name pos:start="179:17" pos:end="179:52"><name pos:start="179:17" pos:end="179:18">st</name><operator pos:start="179:19" pos:end="179:20">-&gt;</operator><name pos:start="179:21" pos:end="179:25">codec</name><operator pos:start="179:26" pos:end="179:27">-&gt;</operator><name pos:start="179:28" pos:end="179:37">codec_name</name><index pos:start="179:38" pos:end="179:52">[<expr pos:start="179:39" pos:end="179:51"><name pos:start="179:39" pos:end="179:51"><name pos:start="179:39" pos:end="179:48">codec_name</name><index pos:start="179:49" pos:end="179:51">[<expr pos:start="179:50" pos:end="179:50"><literal type="number" pos:start="179:50" pos:end="179:50">0</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="179:54" pos:end="179:54">=</operator> <literal type="number" pos:start="179:56" pos:end="179:56">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="185:13" pos:end="185:60"><expr pos:start="185:13" pos:end="185:59"><name pos:start="185:13" pos:end="185:44"><name pos:start="185:13" pos:end="185:14">st</name><operator pos:start="185:15" pos:end="185:16">-&gt;</operator><name pos:start="185:17" pos:end="185:21">codec</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:44">bits_per_coded_sample</name></name> <operator pos:start="185:46" pos:end="185:46">=</operator> <call pos:start="185:48" pos:end="185:59"><name pos:start="185:48" pos:end="185:55">get_be16</name><argument_list pos:start="185:56" pos:end="185:59">(<argument pos:start="185:57" pos:end="185:58"><expr pos:start="185:57" pos:end="185:58"><name pos:start="185:57" pos:end="185:58">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="185:62" pos:end="185:72">/* depth */</comment>

            <expr_stmt pos:start="187:13" pos:end="187:53"><expr pos:start="187:13" pos:end="187:52"><name pos:start="187:13" pos:end="187:37"><name pos:start="187:13" pos:end="187:14">st</name><operator pos:start="187:15" pos:end="187:16">-&gt;</operator><name pos:start="187:17" pos:end="187:21">codec</name><operator pos:start="187:22" pos:end="187:23">-&gt;</operator><name pos:start="187:24" pos:end="187:37">color_table_id</name></name> <operator pos:start="187:39" pos:end="187:39">=</operator> <call pos:start="187:41" pos:end="187:52"><name pos:start="187:41" pos:end="187:48">get_be16</name><argument_list pos:start="187:49" pos:end="187:52">(<argument pos:start="187:50" pos:end="187:51"><expr pos:start="187:50" pos:end="187:51"><name pos:start="187:50" pos:end="187:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="187:55" pos:end="187:73">/* colortable id */</comment>

            <expr_stmt pos:start="189:13" pos:end="191:80"><expr pos:start="189:13" pos:end="191:79"><call pos:start="189:13" pos:end="191:79"><name pos:start="189:13" pos:end="189:19">dprintf</name><argument_list pos:start="189:20" pos:end="191:79">(<argument pos:start="189:21" pos:end="189:25"><expr pos:start="189:21" pos:end="189:25"><name pos:start="189:21" pos:end="189:25"><name pos:start="189:21" pos:end="189:21">c</name><operator pos:start="189:22" pos:end="189:23">-&gt;</operator><name pos:start="189:24" pos:end="189:25">fc</name></name></expr></argument>, <argument pos:start="189:28" pos:end="189:51"><expr pos:start="189:28" pos:end="189:51"><literal type="string" pos:start="189:28" pos:end="189:51">"depth %d, ctab id %d\n"</literal></expr></argument>,

                   <argument pos:start="191:20" pos:end="191:51"><expr pos:start="191:20" pos:end="191:51"><name pos:start="191:20" pos:end="191:51"><name pos:start="191:20" pos:end="191:21">st</name><operator pos:start="191:22" pos:end="191:23">-&gt;</operator><name pos:start="191:24" pos:end="191:28">codec</name><operator pos:start="191:29" pos:end="191:30">-&gt;</operator><name pos:start="191:31" pos:end="191:51">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="191:54" pos:end="191:78"><expr pos:start="191:54" pos:end="191:78"><name pos:start="191:54" pos:end="191:78"><name pos:start="191:54" pos:end="191:55">st</name><operator pos:start="191:56" pos:end="191:57">-&gt;</operator><name pos:start="191:58" pos:end="191:62">codec</name><operator pos:start="191:63" pos:end="191:64">-&gt;</operator><name pos:start="191:65" pos:end="191:78">color_table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="193:13" pos:end="193:50">/* figure out the palette situation */</comment>

            <expr_stmt pos:start="195:13" pos:end="195:66"><expr pos:start="195:13" pos:end="195:65"><name pos:start="195:13" pos:end="195:23">color_depth</name> <operator pos:start="195:25" pos:end="195:25">=</operator> <name pos:start="195:27" pos:end="195:58"><name pos:start="195:27" pos:end="195:28">st</name><operator pos:start="195:29" pos:end="195:30">-&gt;</operator><name pos:start="195:31" pos:end="195:35">codec</name><operator pos:start="195:36" pos:end="195:37">-&gt;</operator><name pos:start="195:38" pos:end="195:58">bits_per_coded_sample</name></name> <operator pos:start="195:60" pos:end="195:60">&amp;</operator> <literal type="number" pos:start="195:62" pos:end="195:65">0x1F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:70"><expr pos:start="197:13" pos:end="197:69"><name pos:start="197:13" pos:end="197:27">color_greyscale</name> <operator pos:start="197:29" pos:end="197:29">=</operator> <name pos:start="197:31" pos:end="197:62"><name pos:start="197:31" pos:end="197:32">st</name><operator pos:start="197:33" pos:end="197:34">-&gt;</operator><name pos:start="197:35" pos:end="197:39">codec</name><operator pos:start="197:40" pos:end="197:41">-&gt;</operator><name pos:start="197:42" pos:end="197:62">bits_per_coded_sample</name></name> <operator pos:start="197:64" pos:end="197:64">&amp;</operator> <literal type="number" pos:start="197:66" pos:end="197:69">0x20</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="201:13" pos:end="201:68">/* if the depth is 2, 4, or 8 bpp, file is palettized */</comment>

            <if_stmt pos:start="203:13" pos:end="333:13"><if pos:start="203:13" pos:end="333:13">if <condition pos:start="203:16" pos:end="205:35">(<expr pos:start="203:17" pos:end="205:34"><operator pos:start="203:17" pos:end="203:17">(</operator><name pos:start="203:18" pos:end="203:28">color_depth</name> <operator pos:start="203:30" pos:end="203:31">==</operator> <literal type="number" pos:start="203:33" pos:end="203:33">2</literal><operator pos:start="203:34" pos:end="203:34">)</operator> <operator pos:start="203:36" pos:end="203:37">||</operator> <operator pos:start="203:39" pos:end="203:39">(</operator><name pos:start="203:40" pos:end="203:50">color_depth</name> <operator pos:start="203:52" pos:end="203:53">==</operator> <literal type="number" pos:start="203:55" pos:end="203:55">4</literal><operator pos:start="203:56" pos:end="203:56">)</operator> <operator pos:start="203:58" pos:end="203:59">||</operator>

                <operator pos:start="205:17" pos:end="205:17">(</operator><name pos:start="205:18" pos:end="205:28">color_depth</name> <operator pos:start="205:30" pos:end="205:31">==</operator> <literal type="number" pos:start="205:33" pos:end="205:33">8</literal><operator pos:start="205:34" pos:end="205:34">)</operator></expr>)</condition> <block pos:start="205:37" pos:end="333:13">{<block_content pos:start="209:17" pos:end="331:56">

                <comment type="block" pos:start="207:17" pos:end="207:43">/* for palette traversal */</comment>

                <decl_stmt pos:start="209:17" pos:end="209:65"><decl pos:start="209:17" pos:end="209:40"><type pos:start="209:17" pos:end="209:28"><name pos:start="209:17" pos:end="209:24">unsigned</name> <name pos:start="209:26" pos:end="209:28">int</name></type> <name pos:start="209:30" pos:end="209:40">color_start</name></decl>, <decl pos:start="209:43" pos:end="209:53"><type ref="prev" pos:start="209:17" pos:end="209:28"/><name pos:start="209:43" pos:end="209:53">color_count</name></decl>, <decl pos:start="209:56" pos:end="209:64"><type ref="prev" pos:start="209:17" pos:end="209:28"/><name pos:start="209:56" pos:end="209:64">color_end</name></decl>;</decl_stmt>

                <decl_stmt pos:start="211:17" pos:end="211:38"><decl pos:start="211:17" pos:end="211:31"><type pos:start="211:17" pos:end="211:29"><name pos:start="211:17" pos:end="211:24">unsigned</name> <name pos:start="211:26" pos:end="211:29">char</name></type> <name pos:start="211:31" pos:end="211:31">r</name></decl>, <decl pos:start="211:34" pos:end="211:34"><type ref="prev" pos:start="211:17" pos:end="211:29"/><name pos:start="211:34" pos:end="211:34">g</name></decl>, <decl pos:start="211:37" pos:end="211:37"><type ref="prev" pos:start="211:17" pos:end="211:29"/><name pos:start="211:37" pos:end="211:37">b</name></decl>;</decl_stmt>



                <expr_stmt pos:start="215:17" pos:end="215:76"><expr pos:start="215:17" pos:end="215:75"><name pos:start="215:17" pos:end="215:34"><name pos:start="215:17" pos:end="215:18">st</name><operator pos:start="215:19" pos:end="215:20">-&gt;</operator><name pos:start="215:21" pos:end="215:25">codec</name><operator pos:start="215:26" pos:end="215:27">-&gt;</operator><name pos:start="215:28" pos:end="215:34">palctrl</name></name> <operator pos:start="215:36" pos:end="215:36">=</operator> <call pos:start="215:38" pos:end="215:75"><name pos:start="215:38" pos:end="215:46">av_malloc</name><argument_list pos:start="215:47" pos:end="215:75">(<argument pos:start="215:48" pos:end="215:74"><expr pos:start="215:48" pos:end="215:74"><sizeof pos:start="215:48" pos:end="215:74">sizeof<argument_list pos:start="215:54" pos:end="215:74">(<argument pos:start="215:55" pos:end="215:73"><expr pos:start="215:55" pos:end="215:73"><operator pos:start="215:55" pos:end="215:55">*</operator><name pos:start="215:56" pos:end="215:73"><name pos:start="215:56" pos:end="215:57">st</name><operator pos:start="215:58" pos:end="215:59">-&gt;</operator><name pos:start="215:60" pos:end="215:64">codec</name><operator pos:start="215:65" pos:end="215:66">-&gt;</operator><name pos:start="215:67" pos:end="215:73">palctrl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="217:17" pos:end="329:17"><if pos:start="217:17" pos:end="247:17">if <condition pos:start="217:20" pos:end="217:36">(<expr pos:start="217:21" pos:end="217:35"><name pos:start="217:21" pos:end="217:35">color_greyscale</name></expr>)</condition> <block pos:start="217:38" pos:end="247:17">{<block_content pos:start="219:21" pos:end="245:21">

                    <decl_stmt pos:start="219:21" pos:end="219:47"><decl pos:start="219:21" pos:end="219:35"><type pos:start="219:21" pos:end="219:23"><name pos:start="219:21" pos:end="219:23">int</name></type> <name pos:start="219:25" pos:end="219:35">color_index</name></decl>, <decl pos:start="219:38" pos:end="219:46"><type ref="prev" pos:start="219:21" pos:end="219:23"/><name pos:start="219:38" pos:end="219:46">color_dec</name></decl>;</decl_stmt>

                    <comment type="block" pos:start="221:21" pos:end="221:55">/* compute the greyscale palette */</comment>

                    <expr_stmt pos:start="223:21" pos:end="223:67"><expr pos:start="223:21" pos:end="223:66"><name pos:start="223:21" pos:end="223:52"><name pos:start="223:21" pos:end="223:22">st</name><operator pos:start="223:23" pos:end="223:24">-&gt;</operator><name pos:start="223:25" pos:end="223:29">codec</name><operator pos:start="223:30" pos:end="223:31">-&gt;</operator><name pos:start="223:32" pos:end="223:52">bits_per_coded_sample</name></name> <operator pos:start="223:54" pos:end="223:54">=</operator> <name pos:start="223:56" pos:end="223:66">color_depth</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="225:21" pos:end="225:51"><expr pos:start="225:21" pos:end="225:50"><name pos:start="225:21" pos:end="225:31">color_count</name> <operator pos:start="225:33" pos:end="225:33">=</operator> <literal type="number" pos:start="225:35" pos:end="225:35">1</literal> <operator pos:start="225:37" pos:end="225:38">&lt;&lt;</operator> <name pos:start="225:40" pos:end="225:50">color_depth</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="227:21" pos:end="227:38"><expr pos:start="227:21" pos:end="227:37"><name pos:start="227:21" pos:end="227:31">color_index</name> <operator pos:start="227:33" pos:end="227:33">=</operator> <literal type="number" pos:start="227:35" pos:end="227:37">255</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="229:21" pos:end="229:56"><expr pos:start="229:21" pos:end="229:55"><name pos:start="229:21" pos:end="229:29">color_dec</name> <operator pos:start="229:31" pos:end="229:31">=</operator> <literal type="number" pos:start="229:33" pos:end="229:35">256</literal> <operator pos:start="229:37" pos:end="229:37">/</operator> <operator pos:start="229:39" pos:end="229:39">(</operator><name pos:start="229:40" pos:end="229:50">color_count</name> <operator pos:start="229:52" pos:end="229:52">-</operator> <literal type="number" pos:start="229:54" pos:end="229:54">1</literal><operator pos:start="229:55" pos:end="229:55">)</operator></expr>;</expr_stmt>

                    <for pos:start="231:21" pos:end="245:21">for <control pos:start="231:25" pos:end="231:53">(<init pos:start="231:26" pos:end="231:31"><expr pos:start="231:26" pos:end="231:30"><name pos:start="231:26" pos:end="231:26">j</name> <operator pos:start="231:28" pos:end="231:28">=</operator> <literal type="number" pos:start="231:30" pos:end="231:30">0</literal></expr>;</init> <condition pos:start="231:33" pos:end="231:48"><expr pos:start="231:33" pos:end="231:47"><name pos:start="231:33" pos:end="231:33">j</name> <operator pos:start="231:35" pos:end="231:35">&lt;</operator> <name pos:start="231:37" pos:end="231:47">color_count</name></expr>;</condition> <incr pos:start="231:50" pos:end="231:52"><expr pos:start="231:50" pos:end="231:52"><name pos:start="231:50" pos:end="231:50">j</name><operator pos:start="231:51" pos:end="231:52">++</operator></expr></incr>)</control> <block pos:start="231:55" pos:end="245:21">{<block_content pos:start="233:25" pos:end="243:44">

                        <expr_stmt pos:start="233:25" pos:end="233:48"><expr pos:start="233:25" pos:end="233:47"><name pos:start="233:25" pos:end="233:25">r</name> <operator pos:start="233:27" pos:end="233:27">=</operator> <name pos:start="233:29" pos:end="233:29">g</name> <operator pos:start="233:31" pos:end="233:31">=</operator> <name pos:start="233:33" pos:end="233:33">b</name> <operator pos:start="233:35" pos:end="233:35">=</operator> <name pos:start="233:37" pos:end="233:47">color_index</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="235:25" pos:end="237:55"><expr pos:start="235:25" pos:end="237:54"><name pos:start="235:25" pos:end="235:54"><name pos:start="235:25" pos:end="235:26">st</name><operator pos:start="235:27" pos:end="235:28">-&gt;</operator><name pos:start="235:29" pos:end="235:33">codec</name><operator pos:start="235:34" pos:end="235:35">-&gt;</operator><name pos:start="235:36" pos:end="235:42">palctrl</name><operator pos:start="235:43" pos:end="235:44">-&gt;</operator><name pos:start="235:45" pos:end="235:51">palette</name><index pos:start="235:52" pos:end="235:54">[<expr pos:start="235:53" pos:end="235:53"><name pos:start="235:53" pos:end="235:53">j</name></expr>]</index></name> <operator pos:start="235:56" pos:end="235:56">=</operator>

                            <operator pos:start="237:29" pos:end="237:29">(</operator><name pos:start="237:30" pos:end="237:30">r</name> <operator pos:start="237:32" pos:end="237:33">&lt;&lt;</operator> <literal type="number" pos:start="237:35" pos:end="237:36">16</literal><operator pos:start="237:37" pos:end="237:37">)</operator> <operator pos:start="237:39" pos:end="237:39">|</operator> <operator pos:start="237:41" pos:end="237:41">(</operator><name pos:start="237:42" pos:end="237:42">g</name> <operator pos:start="237:44" pos:end="237:45">&lt;&lt;</operator> <literal type="number" pos:start="237:47" pos:end="237:47">8</literal><operator pos:start="237:48" pos:end="237:48">)</operator> <operator pos:start="237:50" pos:end="237:50">|</operator> <operator pos:start="237:52" pos:end="237:52">(</operator><name pos:start="237:53" pos:end="237:53">b</name><operator pos:start="237:54" pos:end="237:54">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="239:25" pos:end="239:49"><expr pos:start="239:25" pos:end="239:48"><name pos:start="239:25" pos:end="239:35">color_index</name> <operator pos:start="239:37" pos:end="239:38">-=</operator> <name pos:start="239:40" pos:end="239:48">color_dec</name></expr>;</expr_stmt>

                        <if_stmt pos:start="241:25" pos:end="243:44"><if pos:start="241:25" pos:end="243:44">if <condition pos:start="241:28" pos:end="241:44">(<expr pos:start="241:29" pos:end="241:43"><name pos:start="241:29" pos:end="241:39">color_index</name> <operator pos:start="241:41" pos:end="241:41">&lt;</operator> <literal type="number" pos:start="241:43" pos:end="241:43">0</literal></expr>)</condition><block type="pseudo" pos:start="243:29" pos:end="243:44"><block_content pos:start="243:29" pos:end="243:44">

                            <expr_stmt pos:start="243:29" pos:end="243:44"><expr pos:start="243:29" pos:end="243:43"><name pos:start="243:29" pos:end="243:39">color_index</name> <operator pos:start="243:41" pos:end="243:41">=</operator> <literal type="number" pos:start="243:43" pos:end="243:43">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <if type="elseif" pos:start="247:19" pos:end="283:17">else if <condition pos:start="247:27" pos:end="247:53">(<expr pos:start="247:28" pos:end="247:52"><name pos:start="247:28" pos:end="247:52"><name pos:start="247:28" pos:end="247:29">st</name><operator pos:start="247:30" pos:end="247:31">-&gt;</operator><name pos:start="247:32" pos:end="247:36">codec</name><operator pos:start="247:37" pos:end="247:38">-&gt;</operator><name pos:start="247:39" pos:end="247:52">color_table_id</name></name></expr>)</condition> <block pos:start="247:55" pos:end="283:17">{<block_content pos:start="249:21" pos:end="281:21">

                    <decl_stmt pos:start="249:21" pos:end="249:47"><decl pos:start="249:21" pos:end="249:46"><type pos:start="249:21" pos:end="249:35"><specifier pos:start="249:21" pos:end="249:25">const</specifier> <name pos:start="249:27" pos:end="249:33">uint8_t</name> <modifier pos:start="249:35" pos:end="249:35">*</modifier></type><name pos:start="249:36" pos:end="249:46">color_table</name></decl>;</decl_stmt>

                    <comment type="block" pos:start="251:21" pos:end="251:71">/* if flag bit 3 is set, use the default palette */</comment>

                    <expr_stmt pos:start="253:21" pos:end="253:51"><expr pos:start="253:21" pos:end="253:50"><name pos:start="253:21" pos:end="253:31">color_count</name> <operator pos:start="253:33" pos:end="253:33">=</operator> <literal type="number" pos:start="253:35" pos:end="253:35">1</literal> <operator pos:start="253:37" pos:end="253:38">&lt;&lt;</operator> <name pos:start="253:40" pos:end="253:50">color_depth</name></expr>;</expr_stmt>

                    <if_stmt pos:start="255:21" pos:end="265:64"><if pos:start="255:21" pos:end="257:62">if <condition pos:start="255:24" pos:end="255:41">(<expr pos:start="255:25" pos:end="255:40"><name pos:start="255:25" pos:end="255:35">color_depth</name> <operator pos:start="255:37" pos:end="255:38">==</operator> <literal type="number" pos:start="255:40" pos:end="255:40">2</literal></expr>)</condition><block type="pseudo" pos:start="257:25" pos:end="257:62"><block_content pos:start="257:25" pos:end="257:62">

                        <expr_stmt pos:start="257:25" pos:end="257:62"><expr pos:start="257:25" pos:end="257:61"><name pos:start="257:25" pos:end="257:35">color_table</name> <operator pos:start="257:37" pos:end="257:37">=</operator> <name pos:start="257:39" pos:end="257:61">ff_qt_default_palette_4</name></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="259:21" pos:end="261:63">else if <condition pos:start="259:29" pos:end="259:46">(<expr pos:start="259:30" pos:end="259:45"><name pos:start="259:30" pos:end="259:40">color_depth</name> <operator pos:start="259:42" pos:end="259:43">==</operator> <literal type="number" pos:start="259:45" pos:end="259:45">4</literal></expr>)</condition><block type="pseudo" pos:start="261:25" pos:end="261:63"><block_content pos:start="261:25" pos:end="261:63">

                        <expr_stmt pos:start="261:25" pos:end="261:63"><expr pos:start="261:25" pos:end="261:62"><name pos:start="261:25" pos:end="261:35">color_table</name> <operator pos:start="261:37" pos:end="261:37">=</operator> <name pos:start="261:39" pos:end="261:62">ff_qt_default_palette_16</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="263:21" pos:end="265:64">else<block type="pseudo" pos:start="265:25" pos:end="265:64"><block_content pos:start="265:25" pos:end="265:64">

                        <expr_stmt pos:start="265:25" pos:end="265:64"><expr pos:start="265:25" pos:end="265:63"><name pos:start="265:25" pos:end="265:35">color_table</name> <operator pos:start="265:37" pos:end="265:37">=</operator> <name pos:start="265:39" pos:end="265:63">ff_qt_default_palette_256</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <for pos:start="269:21" pos:end="281:21">for <control pos:start="269:25" pos:end="269:53">(<init pos:start="269:26" pos:end="269:31"><expr pos:start="269:26" pos:end="269:30"><name pos:start="269:26" pos:end="269:26">j</name> <operator pos:start="269:28" pos:end="269:28">=</operator> <literal type="number" pos:start="269:30" pos:end="269:30">0</literal></expr>;</init> <condition pos:start="269:33" pos:end="269:48"><expr pos:start="269:33" pos:end="269:47"><name pos:start="269:33" pos:end="269:33">j</name> <operator pos:start="269:35" pos:end="269:35">&lt;</operator> <name pos:start="269:37" pos:end="269:47">color_count</name></expr>;</condition> <incr pos:start="269:50" pos:end="269:52"><expr pos:start="269:50" pos:end="269:52"><name pos:start="269:50" pos:end="269:50">j</name><operator pos:start="269:51" pos:end="269:52">++</operator></expr></incr>)</control> <block pos:start="269:55" pos:end="281:21">{<block_content pos:start="271:25" pos:end="279:55">

                        <expr_stmt pos:start="271:25" pos:end="271:51"><expr pos:start="271:25" pos:end="271:50"><name pos:start="271:25" pos:end="271:25">r</name> <operator pos:start="271:27" pos:end="271:27">=</operator> <name pos:start="271:29" pos:end="271:50"><name pos:start="271:29" pos:end="271:39">color_table</name><index pos:start="271:40" pos:end="271:50">[<expr pos:start="271:41" pos:end="271:49"><name pos:start="271:41" pos:end="271:41">j</name> <operator pos:start="271:43" pos:end="271:43">*</operator> <literal type="number" pos:start="271:45" pos:end="271:47">3</literal> <operator pos:start="271:47" pos:end="271:47">+</operator> <literal type="number" pos:start="271:49" pos:end="271:49">0</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="273:25" pos:end="273:51"><expr pos:start="273:25" pos:end="273:50"><name pos:start="273:25" pos:end="273:25">g</name> <operator pos:start="273:27" pos:end="273:27">=</operator> <name pos:start="273:29" pos:end="273:50"><name pos:start="273:29" pos:end="273:39">color_table</name><index pos:start="273:40" pos:end="273:50">[<expr pos:start="273:41" pos:end="273:49"><name pos:start="273:41" pos:end="273:41">j</name> <operator pos:start="273:43" pos:end="273:43">*</operator> <literal type="number" pos:start="273:45" pos:end="273:47">3</literal> <operator pos:start="273:47" pos:end="273:47">+</operator> <literal type="number" pos:start="273:49" pos:end="273:49">1</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="275:25" pos:end="275:51"><expr pos:start="275:25" pos:end="275:50"><name pos:start="275:25" pos:end="275:25">b</name> <operator pos:start="275:27" pos:end="275:27">=</operator> <name pos:start="275:29" pos:end="275:50"><name pos:start="275:29" pos:end="275:39">color_table</name><index pos:start="275:40" pos:end="275:50">[<expr pos:start="275:41" pos:end="275:49"><name pos:start="275:41" pos:end="275:41">j</name> <operator pos:start="275:43" pos:end="275:43">*</operator> <literal type="number" pos:start="275:45" pos:end="275:47">3</literal> <operator pos:start="275:47" pos:end="275:47">+</operator> <literal type="number" pos:start="275:49" pos:end="275:49">2</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="277:25" pos:end="279:55"><expr pos:start="277:25" pos:end="279:54"><name pos:start="277:25" pos:end="277:54"><name pos:start="277:25" pos:end="277:26">st</name><operator pos:start="277:27" pos:end="277:28">-&gt;</operator><name pos:start="277:29" pos:end="277:33">codec</name><operator pos:start="277:34" pos:end="277:35">-&gt;</operator><name pos:start="277:36" pos:end="277:42">palctrl</name><operator pos:start="277:43" pos:end="277:44">-&gt;</operator><name pos:start="277:45" pos:end="277:51">palette</name><index pos:start="277:52" pos:end="277:54">[<expr pos:start="277:53" pos:end="277:53"><name pos:start="277:53" pos:end="277:53">j</name></expr>]</index></name> <operator pos:start="277:56" pos:end="277:56">=</operator>

                            <operator pos:start="279:29" pos:end="279:29">(</operator><name pos:start="279:30" pos:end="279:30">r</name> <operator pos:start="279:32" pos:end="279:33">&lt;&lt;</operator> <literal type="number" pos:start="279:35" pos:end="279:36">16</literal><operator pos:start="279:37" pos:end="279:37">)</operator> <operator pos:start="279:39" pos:end="279:39">|</operator> <operator pos:start="279:41" pos:end="279:41">(</operator><name pos:start="279:42" pos:end="279:42">g</name> <operator pos:start="279:44" pos:end="279:45">&lt;&lt;</operator> <literal type="number" pos:start="279:47" pos:end="279:47">8</literal><operator pos:start="279:48" pos:end="279:48">)</operator> <operator pos:start="279:50" pos:end="279:50">|</operator> <operator pos:start="279:52" pos:end="279:52">(</operator><name pos:start="279:53" pos:end="279:53">b</name><operator pos:start="279:54" pos:end="279:54">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="283:19" pos:end="329:17">else <block pos:start="283:24" pos:end="329:17">{<block_content pos:start="287:21" pos:end="327:21">

                    <comment type="block" pos:start="285:21" pos:end="285:56">/* load the palette from the file */</comment>

                    <expr_stmt pos:start="287:21" pos:end="287:47"><expr pos:start="287:21" pos:end="287:46"><name pos:start="287:21" pos:end="287:31">color_start</name> <operator pos:start="287:33" pos:end="287:33">=</operator> <call pos:start="287:35" pos:end="287:46"><name pos:start="287:35" pos:end="287:42">get_be32</name><argument_list pos:start="287:43" pos:end="287:46">(<argument pos:start="287:44" pos:end="287:45"><expr pos:start="287:44" pos:end="287:45"><name pos:start="287:44" pos:end="287:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:47"><expr pos:start="289:21" pos:end="289:46"><name pos:start="289:21" pos:end="289:31">color_count</name> <operator pos:start="289:33" pos:end="289:33">=</operator> <call pos:start="289:35" pos:end="289:46"><name pos:start="289:35" pos:end="289:42">get_be16</name><argument_list pos:start="289:43" pos:end="289:46">(<argument pos:start="289:44" pos:end="289:45"><expr pos:start="289:44" pos:end="289:45"><name pos:start="289:44" pos:end="289:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:45"><expr pos:start="291:21" pos:end="291:44"><name pos:start="291:21" pos:end="291:29">color_end</name> <operator pos:start="291:31" pos:end="291:31">=</operator> <call pos:start="291:33" pos:end="291:44"><name pos:start="291:33" pos:end="291:40">get_be16</name><argument_list pos:start="291:41" pos:end="291:44">(<argument pos:start="291:42" pos:end="291:43"><expr pos:start="291:42" pos:end="291:43"><name pos:start="291:42" pos:end="291:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="293:21" pos:end="327:21"><if pos:start="293:21" pos:end="327:21">if <condition pos:start="293:24" pos:end="295:43">(<expr pos:start="293:25" pos:end="295:42"><operator pos:start="293:25" pos:end="293:25">(</operator><name pos:start="293:26" pos:end="293:36">color_start</name> <operator pos:start="293:38" pos:end="293:39">&lt;=</operator> <literal type="number" pos:start="293:41" pos:end="293:43">255</literal><operator pos:start="293:44" pos:end="293:44">)</operator> <operator pos:start="293:46" pos:end="293:47">&amp;&amp;</operator>

                        <operator pos:start="295:25" pos:end="295:25">(</operator><name pos:start="295:26" pos:end="295:34">color_end</name> <operator pos:start="295:36" pos:end="295:37">&lt;=</operator> <literal type="number" pos:start="295:39" pos:end="295:41">255</literal><operator pos:start="295:42" pos:end="295:42">)</operator></expr>)</condition> <block pos:start="295:45" pos:end="327:21">{<block_content pos:start="297:25" pos:end="325:25">

                        <for pos:start="297:25" pos:end="325:25">for <control pos:start="297:29" pos:end="297:66">(<init pos:start="297:30" pos:end="297:45"><expr pos:start="297:30" pos:end="297:44"><name pos:start="297:30" pos:end="297:30">j</name> <operator pos:start="297:32" pos:end="297:32">=</operator> <name pos:start="297:34" pos:end="297:44">color_start</name></expr>;</init> <condition pos:start="297:47" pos:end="297:61"><expr pos:start="297:47" pos:end="297:60"><name pos:start="297:47" pos:end="297:47">j</name> <operator pos:start="297:49" pos:end="297:50">&lt;=</operator> <name pos:start="297:52" pos:end="297:60">color_end</name></expr>;</condition> <incr pos:start="297:63" pos:end="297:65"><expr pos:start="297:63" pos:end="297:65"><name pos:start="297:63" pos:end="297:63">j</name><operator pos:start="297:64" pos:end="297:65">++</operator></expr></incr>)</control> <block pos:start="297:68" pos:end="325:25">{<block_content pos:start="305:29" pos:end="323:59">

                            <comment type="block" pos:start="299:29" pos:end="303:42">/* each R, G, or B component is 16 bits;

                             * only use the top 8 bits; skip alpha bytes

                             * up front */</comment>

                            <expr_stmt pos:start="305:29" pos:end="305:41"><expr pos:start="305:29" pos:end="305:40"><call pos:start="305:29" pos:end="305:40"><name pos:start="305:29" pos:end="305:36">get_byte</name><argument_list pos:start="305:37" pos:end="305:40">(<argument pos:start="305:38" pos:end="305:39"><expr pos:start="305:38" pos:end="305:39"><name pos:start="305:38" pos:end="305:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="307:29" pos:end="307:41"><expr pos:start="307:29" pos:end="307:40"><call pos:start="307:29" pos:end="307:40"><name pos:start="307:29" pos:end="307:36">get_byte</name><argument_list pos:start="307:37" pos:end="307:40">(<argument pos:start="307:38" pos:end="307:39"><expr pos:start="307:38" pos:end="307:39"><name pos:start="307:38" pos:end="307:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="309:29" pos:end="309:45"><expr pos:start="309:29" pos:end="309:44"><name pos:start="309:29" pos:end="309:29">r</name> <operator pos:start="309:31" pos:end="309:31">=</operator> <call pos:start="309:33" pos:end="309:44"><name pos:start="309:33" pos:end="309:40">get_byte</name><argument_list pos:start="309:41" pos:end="309:44">(<argument pos:start="309:42" pos:end="309:43"><expr pos:start="309:42" pos:end="309:43"><name pos:start="309:42" pos:end="309:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="311:29" pos:end="311:41"><expr pos:start="311:29" pos:end="311:40"><call pos:start="311:29" pos:end="311:40"><name pos:start="311:29" pos:end="311:36">get_byte</name><argument_list pos:start="311:37" pos:end="311:40">(<argument pos:start="311:38" pos:end="311:39"><expr pos:start="311:38" pos:end="311:39"><name pos:start="311:38" pos:end="311:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="313:29" pos:end="313:45"><expr pos:start="313:29" pos:end="313:44"><name pos:start="313:29" pos:end="313:29">g</name> <operator pos:start="313:31" pos:end="313:31">=</operator> <call pos:start="313:33" pos:end="313:44"><name pos:start="313:33" pos:end="313:40">get_byte</name><argument_list pos:start="313:41" pos:end="313:44">(<argument pos:start="313:42" pos:end="313:43"><expr pos:start="313:42" pos:end="313:43"><name pos:start="313:42" pos:end="313:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="315:29" pos:end="315:41"><expr pos:start="315:29" pos:end="315:40"><call pos:start="315:29" pos:end="315:40"><name pos:start="315:29" pos:end="315:36">get_byte</name><argument_list pos:start="315:37" pos:end="315:40">(<argument pos:start="315:38" pos:end="315:39"><expr pos:start="315:38" pos:end="315:39"><name pos:start="315:38" pos:end="315:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="317:29" pos:end="317:45"><expr pos:start="317:29" pos:end="317:44"><name pos:start="317:29" pos:end="317:29">b</name> <operator pos:start="317:31" pos:end="317:31">=</operator> <call pos:start="317:33" pos:end="317:44"><name pos:start="317:33" pos:end="317:40">get_byte</name><argument_list pos:start="317:41" pos:end="317:44">(<argument pos:start="317:42" pos:end="317:43"><expr pos:start="317:42" pos:end="317:43"><name pos:start="317:42" pos:end="317:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="319:29" pos:end="319:41"><expr pos:start="319:29" pos:end="319:40"><call pos:start="319:29" pos:end="319:40"><name pos:start="319:29" pos:end="319:36">get_byte</name><argument_list pos:start="319:37" pos:end="319:40">(<argument pos:start="319:38" pos:end="319:39"><expr pos:start="319:38" pos:end="319:39"><name pos:start="319:38" pos:end="319:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="321:29" pos:end="323:59"><expr pos:start="321:29" pos:end="323:58"><name pos:start="321:29" pos:end="321:58"><name pos:start="321:29" pos:end="321:30">st</name><operator pos:start="321:31" pos:end="321:32">-&gt;</operator><name pos:start="321:33" pos:end="321:37">codec</name><operator pos:start="321:38" pos:end="321:39">-&gt;</operator><name pos:start="321:40" pos:end="321:46">palctrl</name><operator pos:start="321:47" pos:end="321:48">-&gt;</operator><name pos:start="321:49" pos:end="321:55">palette</name><index pos:start="321:56" pos:end="321:58">[<expr pos:start="321:57" pos:end="321:57"><name pos:start="321:57" pos:end="321:57">j</name></expr>]</index></name> <operator pos:start="321:60" pos:end="321:60">=</operator>

                                <operator pos:start="323:33" pos:end="323:33">(</operator><name pos:start="323:34" pos:end="323:34">r</name> <operator pos:start="323:36" pos:end="323:37">&lt;&lt;</operator> <literal type="number" pos:start="323:39" pos:end="323:40">16</literal><operator pos:start="323:41" pos:end="323:41">)</operator> <operator pos:start="323:43" pos:end="323:43">|</operator> <operator pos:start="323:45" pos:end="323:45">(</operator><name pos:start="323:46" pos:end="323:46">g</name> <operator pos:start="323:48" pos:end="323:49">&lt;&lt;</operator> <literal type="number" pos:start="323:51" pos:end="323:51">8</literal><operator pos:start="323:52" pos:end="323:52">)</operator> <operator pos:start="323:54" pos:end="323:54">|</operator> <operator pos:start="323:56" pos:end="323:56">(</operator><name pos:start="323:57" pos:end="323:57">b</name><operator pos:start="323:58" pos:end="323:58">)</operator></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:56"><expr pos:start="331:17" pos:end="331:55"><name pos:start="331:17" pos:end="331:51"><name pos:start="331:17" pos:end="331:18">st</name><operator pos:start="331:19" pos:end="331:20">-&gt;</operator><name pos:start="331:21" pos:end="331:25">codec</name><operator pos:start="331:26" pos:end="331:27">-&gt;</operator><name pos:start="331:28" pos:end="331:34">palctrl</name><operator pos:start="331:35" pos:end="331:36">-&gt;</operator><name pos:start="331:37" pos:end="331:51">palette_changed</name></name> <operator pos:start="331:53" pos:end="331:53">=</operator> <literal type="number" pos:start="331:55" pos:end="331:55">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="335:11" pos:end="495:9">else if<condition pos:start="335:18" pos:end="335:58">(<expr pos:start="335:19" pos:end="335:57"><name pos:start="335:19" pos:end="335:39"><name pos:start="335:19" pos:end="335:20">st</name><operator pos:start="335:21" pos:end="335:22">-&gt;</operator><name pos:start="335:23" pos:end="335:27">codec</name><operator pos:start="335:28" pos:end="335:29">-&gt;</operator><name pos:start="335:30" pos:end="335:39">codec_type</name></name><operator pos:start="335:40" pos:end="335:41">==</operator><name pos:start="335:42" pos:end="335:57">CODEC_TYPE_AUDIO</name></expr>)</condition> <block pos:start="335:60" pos:end="495:9">{<block_content pos:start="337:13" pos:end="493:13">

            <decl_stmt pos:start="337:13" pos:end="337:39"><decl pos:start="337:13" pos:end="337:31"><type pos:start="337:13" pos:end="337:15"><name pos:start="337:13" pos:end="337:15">int</name></type> <name pos:start="337:17" pos:end="337:31">bits_per_sample</name></decl>, <decl pos:start="337:34" pos:end="337:38"><type ref="prev" pos:start="337:13" pos:end="337:15"/><name pos:start="337:34" pos:end="337:38">flags</name></decl>;</decl_stmt>

            <decl_stmt pos:start="339:13" pos:end="339:44"><decl pos:start="339:13" pos:end="339:43"><type pos:start="339:13" pos:end="339:20"><name pos:start="339:13" pos:end="339:20">uint16_t</name></type> <name pos:start="339:22" pos:end="339:28">version</name> <init pos:start="339:30" pos:end="339:43">= <expr pos:start="339:32" pos:end="339:43"><call pos:start="339:32" pos:end="339:43"><name pos:start="339:32" pos:end="339:39">get_be16</name><argument_list pos:start="339:40" pos:end="339:43">(<argument pos:start="339:41" pos:end="339:42"><expr pos:start="339:41" pos:end="339:42"><name pos:start="339:41" pos:end="339:42">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="343:13" pos:end="343:37"><expr pos:start="343:13" pos:end="343:36"><name pos:start="343:13" pos:end="343:31"><name pos:start="343:13" pos:end="343:14">st</name><operator pos:start="343:15" pos:end="343:16">-&gt;</operator><name pos:start="343:17" pos:end="343:21">codec</name><operator pos:start="343:22" pos:end="343:23">-&gt;</operator><name pos:start="343:24" pos:end="343:31">codec_id</name></name> <operator pos:start="343:33" pos:end="343:33">=</operator> <name pos:start="343:35" pos:end="343:36">id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:25"><expr pos:start="345:13" pos:end="345:24"><call pos:start="345:13" pos:end="345:24"><name pos:start="345:13" pos:end="345:20">get_be16</name><argument_list pos:start="345:21" pos:end="345:24">(<argument pos:start="345:22" pos:end="345:23"><expr pos:start="345:22" pos:end="345:23"><name pos:start="345:22" pos:end="345:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="345:27" pos:end="345:46">/* revision level */</comment>

            <expr_stmt pos:start="347:13" pos:end="347:25"><expr pos:start="347:13" pos:end="347:24"><call pos:start="347:13" pos:end="347:24"><name pos:start="347:13" pos:end="347:20">get_be32</name><argument_list pos:start="347:21" pos:end="347:24">(<argument pos:start="347:22" pos:end="347:23"><expr pos:start="347:22" pos:end="347:23"><name pos:start="347:22" pos:end="347:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="347:27" pos:end="347:38">/* vendor */</comment>



            <expr_stmt pos:start="351:13" pos:end="351:47"><expr pos:start="351:13" pos:end="351:46"><name pos:start="351:13" pos:end="351:31"><name pos:start="351:13" pos:end="351:14">st</name><operator pos:start="351:15" pos:end="351:16">-&gt;</operator><name pos:start="351:17" pos:end="351:21">codec</name><operator pos:start="351:22" pos:end="351:23">-&gt;</operator><name pos:start="351:24" pos:end="351:31">channels</name></name> <operator pos:start="351:33" pos:end="351:33">=</operator> <call pos:start="351:35" pos:end="351:46"><name pos:start="351:35" pos:end="351:42">get_be16</name><argument_list pos:start="351:43" pos:end="351:46">(<argument pos:start="351:44" pos:end="351:45"><expr pos:start="351:44" pos:end="351:45"><name pos:start="351:44" pos:end="351:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block" pos:start="351:61" pos:end="351:79">/* channel count */</comment>

            <expr_stmt pos:start="353:13" pos:end="353:71"><expr pos:start="353:13" pos:end="353:70"><call pos:start="353:13" pos:end="353:70"><name pos:start="353:13" pos:end="353:19">dprintf</name><argument_list pos:start="353:20" pos:end="353:70">(<argument pos:start="353:21" pos:end="353:25"><expr pos:start="353:21" pos:end="353:25"><name pos:start="353:21" pos:end="353:25"><name pos:start="353:21" pos:end="353:21">c</name><operator pos:start="353:22" pos:end="353:23">-&gt;</operator><name pos:start="353:24" pos:end="353:25">fc</name></name></expr></argument>, <argument pos:start="353:28" pos:end="353:48"><expr pos:start="353:28" pos:end="353:48"><literal type="string" pos:start="353:28" pos:end="353:48">"audio channels %d\n"</literal></expr></argument>, <argument pos:start="353:51" pos:end="353:69"><expr pos:start="353:51" pos:end="353:69"><name pos:start="353:51" pos:end="353:69"><name pos:start="353:51" pos:end="353:52">st</name><operator pos:start="353:53" pos:end="353:54">-&gt;</operator><name pos:start="353:55" pos:end="353:59">codec</name><operator pos:start="353:60" pos:end="353:61">-&gt;</operator><name pos:start="353:62" pos:end="353:69">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:60"><expr pos:start="355:13" pos:end="355:59"><name pos:start="355:13" pos:end="355:44"><name pos:start="355:13" pos:end="355:14">st</name><operator pos:start="355:15" pos:end="355:16">-&gt;</operator><name pos:start="355:17" pos:end="355:21">codec</name><operator pos:start="355:22" pos:end="355:23">-&gt;</operator><name pos:start="355:24" pos:end="355:44">bits_per_coded_sample</name></name> <operator pos:start="355:46" pos:end="355:46">=</operator> <call pos:start="355:48" pos:end="355:59"><name pos:start="355:48" pos:end="355:55">get_be16</name><argument_list pos:start="355:56" pos:end="355:59">(<argument pos:start="355:57" pos:end="355:58"><expr pos:start="355:57" pos:end="355:58"><name pos:start="355:57" pos:end="355:58">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="355:67" pos:end="355:83">/* sample size */</comment>



            <expr_stmt pos:start="359:13" pos:end="359:41"><expr pos:start="359:13" pos:end="359:40"><name pos:start="359:13" pos:end="359:25"><name pos:start="359:13" pos:end="359:14">sc</name><operator pos:start="359:15" pos:end="359:16">-&gt;</operator><name pos:start="359:17" pos:end="359:25">audio_cid</name></name> <operator pos:start="359:27" pos:end="359:27">=</operator> <call pos:start="359:29" pos:end="359:40"><name pos:start="359:29" pos:end="359:36">get_be16</name><argument_list pos:start="359:37" pos:end="359:40">(<argument pos:start="359:38" pos:end="359:39"><expr pos:start="359:38" pos:end="359:39"><name pos:start="359:38" pos:end="359:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:25"><expr pos:start="361:13" pos:end="361:24"><call pos:start="361:13" pos:end="361:24"><name pos:start="361:13" pos:end="361:20">get_be16</name><argument_list pos:start="361:21" pos:end="361:24">(<argument pos:start="361:22" pos:end="361:23"><expr pos:start="361:22" pos:end="361:23"><name pos:start="361:22" pos:end="361:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="361:27" pos:end="361:47">/* packet size = 0 */</comment>



            <expr_stmt pos:start="365:13" pos:end="365:60"><expr pos:start="365:13" pos:end="365:59"><name pos:start="365:13" pos:end="365:34"><name pos:start="365:13" pos:end="365:14">st</name><operator pos:start="365:15" pos:end="365:16">-&gt;</operator><name pos:start="365:17" pos:end="365:21">codec</name><operator pos:start="365:22" pos:end="365:23">-&gt;</operator><name pos:start="365:24" pos:end="365:34">sample_rate</name></name> <operator pos:start="365:36" pos:end="365:36">=</operator> <operator pos:start="365:38" pos:end="365:38">(</operator><operator pos:start="365:39" pos:end="365:39">(</operator><call pos:start="365:40" pos:end="365:51"><name pos:start="365:40" pos:end="365:47">get_be32</name><argument_list pos:start="365:48" pos:end="365:51">(<argument pos:start="365:49" pos:end="365:50"><expr pos:start="365:49" pos:end="365:50"><name pos:start="365:49" pos:end="365:50">pb</name></expr></argument>)</argument_list></call> <operator pos:start="365:53" pos:end="365:54">&gt;&gt;</operator> <literal type="number" pos:start="365:56" pos:end="365:57">16</literal><operator pos:start="365:58" pos:end="365:58">)</operator><operator pos:start="365:59" pos:end="365:59">)</operator></expr>;</expr_stmt>



            <comment type="line" pos:start="369:13" pos:end="369:72">//Read QT version 1 fields. In version 0 these do not exist.</comment>

            <expr_stmt pos:start="371:13" pos:end="371:70"><expr pos:start="371:13" pos:end="371:69"><call pos:start="371:13" pos:end="371:69"><name pos:start="371:13" pos:end="371:19">dprintf</name><argument_list pos:start="371:20" pos:end="371:69">(<argument pos:start="371:21" pos:end="371:25"><expr pos:start="371:21" pos:end="371:25"><name pos:start="371:21" pos:end="371:25"><name pos:start="371:21" pos:end="371:21">c</name><operator pos:start="371:22" pos:end="371:23">-&gt;</operator><name pos:start="371:24" pos:end="371:25">fc</name></name></expr></argument>, <argument pos:start="371:28" pos:end="371:52"><expr pos:start="371:28" pos:end="371:52"><literal type="string" pos:start="371:28" pos:end="371:52">"version =%d, isom =%d\n"</literal></expr></argument>,<argument pos:start="371:54" pos:end="371:60"><expr pos:start="371:54" pos:end="371:60"><name pos:start="371:54" pos:end="371:60">version</name></expr></argument>,<argument pos:start="371:62" pos:end="371:68"><expr pos:start="371:62" pos:end="371:68"><name pos:start="371:62" pos:end="371:68"><name pos:start="371:62" pos:end="371:62">c</name><operator pos:start="371:63" pos:end="371:64">-&gt;</operator><name pos:start="371:65" pos:end="371:68">isom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="373:13" pos:end="409:13"><if pos:start="373:13" pos:end="409:13">if<condition pos:start="373:15" pos:end="373:24">(<expr pos:start="373:16" pos:end="373:23"><operator pos:start="373:16" pos:end="373:16">!</operator><name pos:start="373:17" pos:end="373:23"><name pos:start="373:17" pos:end="373:17">c</name><operator pos:start="373:18" pos:end="373:19">-&gt;</operator><name pos:start="373:20" pos:end="373:23">isom</name></name></expr>)</condition> <block pos:start="373:26" pos:end="409:13">{<block_content pos:start="375:17" pos:end="407:17">

                <if_stmt pos:start="375:17" pos:end="407:17"><if pos:start="375:17" pos:end="385:17">if<condition pos:start="375:19" pos:end="375:30">(<expr pos:start="375:20" pos:end="375:29"><name pos:start="375:20" pos:end="375:26">version</name><operator pos:start="375:27" pos:end="375:28">==</operator><literal type="number" pos:start="375:29" pos:end="375:29">1</literal></expr>)</condition> <block pos:start="375:32" pos:end="385:17">{<block_content pos:start="377:21" pos:end="383:33">

                    <expr_stmt pos:start="377:21" pos:end="377:57"><expr pos:start="377:21" pos:end="377:56"><name pos:start="377:21" pos:end="377:41"><name pos:start="377:21" pos:end="377:22">sc</name><operator pos:start="377:23" pos:end="377:24">-&gt;</operator><name pos:start="377:25" pos:end="377:41">samples_per_frame</name></name> <operator pos:start="377:43" pos:end="377:43">=</operator> <call pos:start="377:45" pos:end="377:56"><name pos:start="377:45" pos:end="377:52">get_be32</name><argument_list pos:start="377:53" pos:end="377:56">(<argument pos:start="377:54" pos:end="377:55"><expr pos:start="377:54" pos:end="377:55"><name pos:start="377:54" pos:end="377:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="379:21" pos:end="379:33"><expr pos:start="379:21" pos:end="379:32"><call pos:start="379:21" pos:end="379:32"><name pos:start="379:21" pos:end="379:28">get_be32</name><argument_list pos:start="379:29" pos:end="379:32">(<argument pos:start="379:30" pos:end="379:31"><expr pos:start="379:30" pos:end="379:31"><name pos:start="379:30" pos:end="379:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="379:35" pos:end="379:56">/* bytes per packet */</comment>

                    <expr_stmt pos:start="381:21" pos:end="381:55"><expr pos:start="381:21" pos:end="381:54"><name pos:start="381:21" pos:end="381:39"><name pos:start="381:21" pos:end="381:22">sc</name><operator pos:start="381:23" pos:end="381:24">-&gt;</operator><name pos:start="381:25" pos:end="381:39">bytes_per_frame</name></name> <operator pos:start="381:41" pos:end="381:41">=</operator> <call pos:start="381:43" pos:end="381:54"><name pos:start="381:43" pos:end="381:50">get_be32</name><argument_list pos:start="381:51" pos:end="381:54">(<argument pos:start="381:52" pos:end="381:53"><expr pos:start="381:52" pos:end="381:53"><name pos:start="381:52" pos:end="381:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="383:21" pos:end="383:33"><expr pos:start="383:21" pos:end="383:32"><call pos:start="383:21" pos:end="383:32"><name pos:start="383:21" pos:end="383:28">get_be32</name><argument_list pos:start="383:29" pos:end="383:32">(<argument pos:start="383:30" pos:end="383:31"><expr pos:start="383:30" pos:end="383:31"><name pos:start="383:30" pos:end="383:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="383:35" pos:end="383:56">/* bytes per sample */</comment>

                </block_content>}</block></if> <if type="elseif" pos:start="385:19" pos:end="407:17">else if<condition pos:start="385:26" pos:end="385:37">(<expr pos:start="385:27" pos:end="385:36"><name pos:start="385:27" pos:end="385:33">version</name><operator pos:start="385:34" pos:end="385:35">==</operator><literal type="number" pos:start="385:36" pos:end="385:36">2</literal></expr>)</condition> <block pos:start="385:39" pos:end="407:17">{<block_content pos:start="387:21" pos:end="405:109">

                    <expr_stmt pos:start="387:21" pos:end="387:33"><expr pos:start="387:21" pos:end="387:32"><call pos:start="387:21" pos:end="387:32"><name pos:start="387:21" pos:end="387:28">get_be32</name><argument_list pos:start="387:29" pos:end="387:32">(<argument pos:start="387:30" pos:end="387:31"><expr pos:start="387:30" pos:end="387:31"><name pos:start="387:30" pos:end="387:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="387:35" pos:end="387:58">/* sizeof struct only */</comment>

                    <expr_stmt pos:start="389:21" pos:end="389:70"><expr pos:start="389:21" pos:end="389:69"><name pos:start="389:21" pos:end="389:42"><name pos:start="389:21" pos:end="389:22">st</name><operator pos:start="389:23" pos:end="389:24">-&gt;</operator><name pos:start="389:25" pos:end="389:29">codec</name><operator pos:start="389:30" pos:end="389:31">-&gt;</operator><name pos:start="389:32" pos:end="389:42">sample_rate</name></name> <operator pos:start="389:44" pos:end="389:44">=</operator> <call pos:start="389:46" pos:end="389:69"><name pos:start="389:46" pos:end="389:55">av_int2dbl</name><argument_list pos:start="389:56" pos:end="389:69">(<argument pos:start="389:57" pos:end="389:68"><expr pos:start="389:57" pos:end="389:68"><call pos:start="389:57" pos:end="389:68"><name pos:start="389:57" pos:end="389:64">get_be64</name><argument_list pos:start="389:65" pos:end="389:68">(<argument pos:start="389:66" pos:end="389:67"><expr pos:start="389:66" pos:end="389:67"><name pos:start="389:66" pos:end="389:67">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="389:72" pos:end="389:85">/* float 64 */</comment>

                    <expr_stmt pos:start="391:21" pos:end="391:55"><expr pos:start="391:21" pos:end="391:54"><name pos:start="391:21" pos:end="391:39"><name pos:start="391:21" pos:end="391:22">st</name><operator pos:start="391:23" pos:end="391:24">-&gt;</operator><name pos:start="391:25" pos:end="391:29">codec</name><operator pos:start="391:30" pos:end="391:31">-&gt;</operator><name pos:start="391:32" pos:end="391:39">channels</name></name> <operator pos:start="391:41" pos:end="391:41">=</operator> <call pos:start="391:43" pos:end="391:54"><name pos:start="391:43" pos:end="391:50">get_be32</name><argument_list pos:start="391:51" pos:end="391:54">(<argument pos:start="391:52" pos:end="391:53"><expr pos:start="391:52" pos:end="391:53"><name pos:start="391:52" pos:end="391:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="393:21" pos:end="393:33"><expr pos:start="393:21" pos:end="393:32"><call pos:start="393:21" pos:end="393:32"><name pos:start="393:21" pos:end="393:28">get_be32</name><argument_list pos:start="393:29" pos:end="393:32">(<argument pos:start="393:30" pos:end="393:31"><expr pos:start="393:30" pos:end="393:31"><name pos:start="393:30" pos:end="393:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="393:35" pos:end="393:57">/* always 0x7F000000 */</comment>

                    <expr_stmt pos:start="395:21" pos:end="395:68"><expr pos:start="395:21" pos:end="395:67"><name pos:start="395:21" pos:end="395:52"><name pos:start="395:21" pos:end="395:22">st</name><operator pos:start="395:23" pos:end="395:24">-&gt;</operator><name pos:start="395:25" pos:end="395:29">codec</name><operator pos:start="395:30" pos:end="395:31">-&gt;</operator><name pos:start="395:32" pos:end="395:52">bits_per_coded_sample</name></name> <operator pos:start="395:54" pos:end="395:54">=</operator> <call pos:start="395:56" pos:end="395:67"><name pos:start="395:56" pos:end="395:63">get_be32</name><argument_list pos:start="395:64" pos:end="395:67">(<argument pos:start="395:65" pos:end="395:66"><expr pos:start="395:65" pos:end="395:66"><name pos:start="395:65" pos:end="395:66">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="395:70" pos:end="395:116">/* bits per channel if sound is uncompressed */</comment>

                    <expr_stmt pos:start="397:21" pos:end="397:41"><expr pos:start="397:21" pos:end="397:40"><name pos:start="397:21" pos:end="397:25">flags</name> <operator pos:start="397:27" pos:end="397:27">=</operator> <call pos:start="397:29" pos:end="397:40"><name pos:start="397:29" pos:end="397:36">get_be32</name><argument_list pos:start="397:37" pos:end="397:40">(<argument pos:start="397:38" pos:end="397:39"><expr pos:start="397:38" pos:end="397:39"><name pos:start="397:38" pos:end="397:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="397:43" pos:end="397:73">/* lcpm format specific flag */</comment>

                    <expr_stmt pos:start="399:21" pos:end="399:55"><expr pos:start="399:21" pos:end="399:54"><name pos:start="399:21" pos:end="399:39"><name pos:start="399:21" pos:end="399:22">sc</name><operator pos:start="399:23" pos:end="399:24">-&gt;</operator><name pos:start="399:25" pos:end="399:39">bytes_per_frame</name></name> <operator pos:start="399:41" pos:end="399:41">=</operator> <call pos:start="399:43" pos:end="399:54"><name pos:start="399:43" pos:end="399:50">get_be32</name><argument_list pos:start="399:51" pos:end="399:54">(<argument pos:start="399:52" pos:end="399:53"><expr pos:start="399:52" pos:end="399:53"><name pos:start="399:52" pos:end="399:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="399:57" pos:end="399:96">/* bytes per audio packet if constant */</comment>

                    <expr_stmt pos:start="401:21" pos:end="401:57"><expr pos:start="401:21" pos:end="401:56"><name pos:start="401:21" pos:end="401:41"><name pos:start="401:21" pos:end="401:22">sc</name><operator pos:start="401:23" pos:end="401:24">-&gt;</operator><name pos:start="401:25" pos:end="401:41">samples_per_frame</name></name> <operator pos:start="401:43" pos:end="401:43">=</operator> <call pos:start="401:45" pos:end="401:56"><name pos:start="401:45" pos:end="401:52">get_be32</name><argument_list pos:start="401:53" pos:end="401:56">(<argument pos:start="401:54" pos:end="401:55"><expr pos:start="401:54" pos:end="401:55"><name pos:start="401:54" pos:end="401:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="401:59" pos:end="401:104">/* lpcm frames per audio packet if constant */</comment>

                    <if_stmt pos:start="403:21" pos:end="405:109"><if pos:start="403:21" pos:end="405:109">if <condition pos:start="403:24" pos:end="403:57">(<expr pos:start="403:25" pos:end="403:56"><name pos:start="403:25" pos:end="403:30">format</name> <operator pos:start="403:32" pos:end="403:33">==</operator> <call pos:start="403:35" pos:end="403:56"><name pos:start="403:35" pos:end="403:39">MKTAG</name><argument_list pos:start="403:40" pos:end="403:56">(<argument pos:start="403:41" pos:end="403:43"><expr pos:start="403:41" pos:end="403:43"><literal type="char" pos:start="403:41" pos:end="403:43">'l'</literal></expr></argument>,<argument pos:start="403:45" pos:end="403:47"><expr pos:start="403:45" pos:end="403:47"><literal type="char" pos:start="403:45" pos:end="403:47">'p'</literal></expr></argument>,<argument pos:start="403:49" pos:end="403:51"><expr pos:start="403:49" pos:end="403:51"><literal type="char" pos:start="403:49" pos:end="403:51">'c'</literal></expr></argument>,<argument pos:start="403:53" pos:end="403:55"><expr pos:start="403:53" pos:end="403:55"><literal type="char" pos:start="403:53" pos:end="403:55">'m'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="405:25" pos:end="405:109"><block_content pos:start="405:25" pos:end="405:109">

                        <expr_stmt pos:start="405:25" pos:end="405:109"><expr pos:start="405:25" pos:end="405:108"><name pos:start="405:25" pos:end="405:43"><name pos:start="405:25" pos:end="405:26">st</name><operator pos:start="405:27" pos:end="405:28">-&gt;</operator><name pos:start="405:29" pos:end="405:33">codec</name><operator pos:start="405:34" pos:end="405:35">-&gt;</operator><name pos:start="405:36" pos:end="405:43">codec_id</name></name> <operator pos:start="405:45" pos:end="405:45">=</operator> <call pos:start="405:47" pos:end="405:108"><name pos:start="405:47" pos:end="405:67">mov_get_lpcm_codec_id</name><argument_list pos:start="405:68" pos:end="405:108">(<argument pos:start="405:69" pos:end="405:100"><expr pos:start="405:69" pos:end="405:100"><name pos:start="405:69" pos:end="405:100"><name pos:start="405:69" pos:end="405:70">st</name><operator pos:start="405:71" pos:end="405:72">-&gt;</operator><name pos:start="405:73" pos:end="405:77">codec</name><operator pos:start="405:78" pos:end="405:79">-&gt;</operator><name pos:start="405:80" pos:end="405:100">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="405:103" pos:end="405:107"><expr pos:start="405:103" pos:end="405:107"><name pos:start="405:103" pos:end="405:107">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <switch pos:start="413:13" pos:end="481:13">switch <condition pos:start="413:20" pos:end="413:40">(<expr pos:start="413:21" pos:end="413:39"><name pos:start="413:21" pos:end="413:39"><name pos:start="413:21" pos:end="413:22">st</name><operator pos:start="413:23" pos:end="413:24">-&gt;</operator><name pos:start="413:25" pos:end="413:29">codec</name><operator pos:start="413:30" pos:end="413:31">-&gt;</operator><name pos:start="413:32" pos:end="413:39">codec_id</name></name></expr>)</condition> <block pos:start="413:42" pos:end="481:13">{<block_content pos:start="415:13" pos:end="479:22">

            <case pos:start="415:13" pos:end="415:33">case <expr pos:start="415:18" pos:end="415:32"><name pos:start="415:18" pos:end="415:32">CODEC_ID_PCM_S8</name></expr>:</case>

            <case pos:start="417:13" pos:end="417:33">case <expr pos:start="417:18" pos:end="417:32"><name pos:start="417:18" pos:end="417:32">CODEC_ID_PCM_U8</name></expr>:</case>

                <if_stmt pos:start="419:17" pos:end="421:61"><if pos:start="419:17" pos:end="421:61">if <condition pos:start="419:20" pos:end="419:59">(<expr pos:start="419:21" pos:end="419:58"><name pos:start="419:21" pos:end="419:52"><name pos:start="419:21" pos:end="419:22">st</name><operator pos:start="419:23" pos:end="419:24">-&gt;</operator><name pos:start="419:25" pos:end="419:29">codec</name><operator pos:start="419:30" pos:end="419:31">-&gt;</operator><name pos:start="419:32" pos:end="419:52">bits_per_coded_sample</name></name> <operator pos:start="419:54" pos:end="419:55">==</operator> <literal type="number" pos:start="419:57" pos:end="419:58">16</literal></expr>)</condition><block type="pseudo" pos:start="421:21" pos:end="421:61"><block_content pos:start="421:21" pos:end="421:61">

                    <expr_stmt pos:start="421:21" pos:end="421:61"><expr pos:start="421:21" pos:end="421:60"><name pos:start="421:21" pos:end="421:39"><name pos:start="421:21" pos:end="421:22">st</name><operator pos:start="421:23" pos:end="421:24">-&gt;</operator><name pos:start="421:25" pos:end="421:29">codec</name><operator pos:start="421:30" pos:end="421:31">-&gt;</operator><name pos:start="421:32" pos:end="421:39">codec_id</name></name> <operator pos:start="421:41" pos:end="421:41">=</operator> <name pos:start="421:43" pos:end="421:60">CODEC_ID_PCM_S16BE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="423:17" pos:end="423:22">break;</break>

            <case pos:start="425:13" pos:end="425:36">case <expr pos:start="425:18" pos:end="425:35"><name pos:start="425:18" pos:end="425:35">CODEC_ID_PCM_S16LE</name></expr>:</case>

            <case pos:start="427:13" pos:end="427:36">case <expr pos:start="427:18" pos:end="427:35"><name pos:start="427:18" pos:end="427:35">CODEC_ID_PCM_S16BE</name></expr>:</case>

                <if_stmt pos:start="429:17" pos:end="439:64"><if pos:start="429:17" pos:end="431:58">if <condition pos:start="429:20" pos:end="429:58">(<expr pos:start="429:21" pos:end="429:57"><name pos:start="429:21" pos:end="429:52"><name pos:start="429:21" pos:end="429:22">st</name><operator pos:start="429:23" pos:end="429:24">-&gt;</operator><name pos:start="429:25" pos:end="429:29">codec</name><operator pos:start="429:30" pos:end="429:31">-&gt;</operator><name pos:start="429:32" pos:end="429:52">bits_per_coded_sample</name></name> <operator pos:start="429:54" pos:end="429:55">==</operator> <literal type="number" pos:start="429:57" pos:end="429:57">8</literal></expr>)</condition><block type="pseudo" pos:start="431:21" pos:end="431:58"><block_content pos:start="431:21" pos:end="431:58">

                    <expr_stmt pos:start="431:21" pos:end="431:58"><expr pos:start="431:21" pos:end="431:57"><name pos:start="431:21" pos:end="431:39"><name pos:start="431:21" pos:end="431:22">st</name><operator pos:start="431:23" pos:end="431:24">-&gt;</operator><name pos:start="431:25" pos:end="431:29">codec</name><operator pos:start="431:30" pos:end="431:31">-&gt;</operator><name pos:start="431:32" pos:end="431:39">codec_id</name></name> <operator pos:start="431:41" pos:end="431:41">=</operator> <name pos:start="431:43" pos:end="431:57">CODEC_ID_PCM_S8</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="433:17" pos:end="439:64">else if <condition pos:start="433:25" pos:end="433:64">(<expr pos:start="433:26" pos:end="433:63"><name pos:start="433:26" pos:end="433:57"><name pos:start="433:26" pos:end="433:27">st</name><operator pos:start="433:28" pos:end="433:29">-&gt;</operator><name pos:start="433:30" pos:end="433:34">codec</name><operator pos:start="433:35" pos:end="433:36">-&gt;</operator><name pos:start="433:37" pos:end="433:57">bits_per_coded_sample</name></name> <operator pos:start="433:59" pos:end="433:60">==</operator> <literal type="number" pos:start="433:62" pos:end="433:63">24</literal></expr>)</condition><block type="pseudo" pos:start="435:21" pos:end="439:64"><block_content pos:start="435:21" pos:end="439:64">

                    <expr_stmt pos:start="435:21" pos:end="439:64"><expr pos:start="435:21" pos:end="439:63"><name pos:start="435:21" pos:end="435:39"><name pos:start="435:21" pos:end="435:22">st</name><operator pos:start="435:23" pos:end="435:24">-&gt;</operator><name pos:start="435:25" pos:end="435:29">codec</name><operator pos:start="435:30" pos:end="435:31">-&gt;</operator><name pos:start="435:32" pos:end="435:39">codec_id</name></name> <operator pos:start="435:41" pos:end="435:41">=</operator>

                        <ternary pos:start="437:25" pos:end="439:63"><condition pos:start="437:25" pos:end="437:67"><expr pos:start="437:25" pos:end="437:65"><name pos:start="437:25" pos:end="437:43"><name pos:start="437:25" pos:end="437:26">st</name><operator pos:start="437:27" pos:end="437:28">-&gt;</operator><name pos:start="437:29" pos:end="437:33">codec</name><operator pos:start="437:34" pos:end="437:35">-&gt;</operator><name pos:start="437:36" pos:end="437:43">codec_id</name></name> <operator pos:start="437:45" pos:end="437:46">==</operator> <name pos:start="437:48" pos:end="437:65">CODEC_ID_PCM_S16BE</name></expr> ?</condition><then pos:start="439:25" pos:end="439:42">

                        <expr pos:start="439:25" pos:end="439:42"><name pos:start="439:25" pos:end="439:42">CODEC_ID_PCM_S24BE</name></expr> </then><else pos:start="439:44" pos:end="439:63">: <expr pos:start="439:46" pos:end="439:63"><name pos:start="439:46" pos:end="439:63">CODEC_ID_PCM_S24LE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="441:17" pos:end="441:22">break;</break>

            <comment type="block" pos:start="443:13" pos:end="443:74">/* set values for old format before stsd version 1 appeared */</comment>

            <case pos:start="445:13" pos:end="445:32">case <expr pos:start="445:18" pos:end="445:31"><name pos:start="445:18" pos:end="445:31">CODEC_ID_MACE3</name></expr>:</case>

                <expr_stmt pos:start="447:17" pos:end="447:42"><expr pos:start="447:17" pos:end="447:41"><name pos:start="447:17" pos:end="447:37"><name pos:start="447:17" pos:end="447:18">sc</name><operator pos:start="447:19" pos:end="447:20">-&gt;</operator><name pos:start="447:21" pos:end="447:37">samples_per_frame</name></name> <operator pos:start="447:39" pos:end="447:39">=</operator> <literal type="number" pos:start="447:41" pos:end="447:41">6</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="449:17" pos:end="449:60"><expr pos:start="449:17" pos:end="449:59"><name pos:start="449:17" pos:end="449:35"><name pos:start="449:17" pos:end="449:18">sc</name><operator pos:start="449:19" pos:end="449:20">-&gt;</operator><name pos:start="449:21" pos:end="449:35">bytes_per_frame</name></name> <operator pos:start="449:37" pos:end="449:37">=</operator> <literal type="number" pos:start="449:39" pos:end="449:39">2</literal><operator pos:start="449:40" pos:end="449:40">*</operator><name pos:start="449:41" pos:end="449:59"><name pos:start="449:41" pos:end="449:42">st</name><operator pos:start="449:43" pos:end="449:44">-&gt;</operator><name pos:start="449:45" pos:end="449:49">codec</name><operator pos:start="449:50" pos:end="449:51">-&gt;</operator><name pos:start="449:52" pos:end="449:59">channels</name></name></expr>;</expr_stmt>

                <break pos:start="451:17" pos:end="451:22">break;</break>

            <case pos:start="453:13" pos:end="453:32">case <expr pos:start="453:18" pos:end="453:31"><name pos:start="453:18" pos:end="453:31">CODEC_ID_MACE6</name></expr>:</case>

                <expr_stmt pos:start="455:17" pos:end="455:42"><expr pos:start="455:17" pos:end="455:41"><name pos:start="455:17" pos:end="455:37"><name pos:start="455:17" pos:end="455:18">sc</name><operator pos:start="455:19" pos:end="455:20">-&gt;</operator><name pos:start="455:21" pos:end="455:37">samples_per_frame</name></name> <operator pos:start="455:39" pos:end="455:39">=</operator> <literal type="number" pos:start="455:41" pos:end="455:41">6</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="457:17" pos:end="457:60"><expr pos:start="457:17" pos:end="457:59"><name pos:start="457:17" pos:end="457:35"><name pos:start="457:17" pos:end="457:18">sc</name><operator pos:start="457:19" pos:end="457:20">-&gt;</operator><name pos:start="457:21" pos:end="457:35">bytes_per_frame</name></name> <operator pos:start="457:37" pos:end="457:37">=</operator> <literal type="number" pos:start="457:39" pos:end="457:39">1</literal><operator pos:start="457:40" pos:end="457:40">*</operator><name pos:start="457:41" pos:end="457:59"><name pos:start="457:41" pos:end="457:42">st</name><operator pos:start="457:43" pos:end="457:44">-&gt;</operator><name pos:start="457:45" pos:end="457:49">codec</name><operator pos:start="457:50" pos:end="457:51">-&gt;</operator><name pos:start="457:52" pos:end="457:59">channels</name></name></expr>;</expr_stmt>

                <break pos:start="459:17" pos:end="459:22">break;</break>

            <case pos:start="461:13" pos:end="461:39">case <expr pos:start="461:18" pos:end="461:38"><name pos:start="461:18" pos:end="461:38">CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

                <expr_stmt pos:start="463:17" pos:end="463:43"><expr pos:start="463:17" pos:end="463:42"><name pos:start="463:17" pos:end="463:37"><name pos:start="463:17" pos:end="463:18">sc</name><operator pos:start="463:19" pos:end="463:20">-&gt;</operator><name pos:start="463:21" pos:end="463:37">samples_per_frame</name></name> <operator pos:start="463:39" pos:end="463:39">=</operator> <literal type="number" pos:start="463:41" pos:end="463:42">64</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="465:17" pos:end="465:61"><expr pos:start="465:17" pos:end="465:60"><name pos:start="465:17" pos:end="465:35"><name pos:start="465:17" pos:end="465:18">sc</name><operator pos:start="465:19" pos:end="465:20">-&gt;</operator><name pos:start="465:21" pos:end="465:35">bytes_per_frame</name></name> <operator pos:start="465:37" pos:end="465:37">=</operator> <literal type="number" pos:start="465:39" pos:end="465:40">34</literal><operator pos:start="465:41" pos:end="465:41">*</operator><name pos:start="465:42" pos:end="465:60"><name pos:start="465:42" pos:end="465:43">st</name><operator pos:start="465:44" pos:end="465:45">-&gt;</operator><name pos:start="465:46" pos:end="465:50">codec</name><operator pos:start="465:51" pos:end="465:52">-&gt;</operator><name pos:start="465:53" pos:end="465:60">channels</name></name></expr>;</expr_stmt>

                <break pos:start="467:17" pos:end="467:22">break;</break>

            <case pos:start="469:13" pos:end="469:30">case <expr pos:start="469:18" pos:end="469:29"><name pos:start="469:18" pos:end="469:29">CODEC_ID_GSM</name></expr>:</case>

                <expr_stmt pos:start="471:17" pos:end="471:44"><expr pos:start="471:17" pos:end="471:43"><name pos:start="471:17" pos:end="471:37"><name pos:start="471:17" pos:end="471:18">sc</name><operator pos:start="471:19" pos:end="471:20">-&gt;</operator><name pos:start="471:21" pos:end="471:37">samples_per_frame</name></name> <operator pos:start="471:39" pos:end="471:39">=</operator> <literal type="number" pos:start="471:41" pos:end="471:43">160</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="473:17" pos:end="473:41"><expr pos:start="473:17" pos:end="473:40"><name pos:start="473:17" pos:end="473:35"><name pos:start="473:17" pos:end="473:18">sc</name><operator pos:start="473:19" pos:end="473:20">-&gt;</operator><name pos:start="473:21" pos:end="473:35">bytes_per_frame</name></name> <operator pos:start="473:37" pos:end="473:37">=</operator> <literal type="number" pos:start="473:39" pos:end="473:40">33</literal></expr>;</expr_stmt>

                <break pos:start="475:17" pos:end="475:22">break;</break>

            <default pos:start="477:13" pos:end="477:20">default:</default>

                <break pos:start="479:17" pos:end="479:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="485:13" pos:end="485:74"><expr pos:start="485:13" pos:end="485:73"><name pos:start="485:13" pos:end="485:27">bits_per_sample</name> <operator pos:start="485:29" pos:end="485:29">=</operator> <call pos:start="485:31" pos:end="485:73"><name pos:start="485:31" pos:end="485:52">av_get_bits_per_sample</name><argument_list pos:start="485:53" pos:end="485:73">(<argument pos:start="485:54" pos:end="485:72"><expr pos:start="485:54" pos:end="485:72"><name pos:start="485:54" pos:end="485:72"><name pos:start="485:54" pos:end="485:55">st</name><operator pos:start="485:56" pos:end="485:57">-&gt;</operator><name pos:start="485:58" pos:end="485:62">codec</name><operator pos:start="485:63" pos:end="485:64">-&gt;</operator><name pos:start="485:65" pos:end="485:72">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="487:13" pos:end="493:13"><if pos:start="487:13" pos:end="493:13">if <condition pos:start="487:16" pos:end="487:32">(<expr pos:start="487:17" pos:end="487:31"><name pos:start="487:17" pos:end="487:31">bits_per_sample</name></expr>)</condition> <block pos:start="487:34" pos:end="493:13">{<block_content pos:start="489:17" pos:end="491:79">

                <expr_stmt pos:start="489:17" pos:end="489:67"><expr pos:start="489:17" pos:end="489:66"><name pos:start="489:17" pos:end="489:48"><name pos:start="489:17" pos:end="489:18">st</name><operator pos:start="489:19" pos:end="489:20">-&gt;</operator><name pos:start="489:21" pos:end="489:25">codec</name><operator pos:start="489:26" pos:end="489:27">-&gt;</operator><name pos:start="489:28" pos:end="489:48">bits_per_coded_sample</name></name> <operator pos:start="489:50" pos:end="489:50">=</operator> <name pos:start="489:52" pos:end="489:66">bits_per_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="491:17" pos:end="491:79"><expr pos:start="491:17" pos:end="491:78"><name pos:start="491:17" pos:end="491:31"><name pos:start="491:17" pos:end="491:18">sc</name><operator pos:start="491:19" pos:end="491:20">-&gt;</operator><name pos:start="491:21" pos:end="491:31">sample_size</name></name> <operator pos:start="491:33" pos:end="491:33">=</operator> <operator pos:start="491:35" pos:end="491:35">(</operator><name pos:start="491:36" pos:end="491:50">bits_per_sample</name> <operator pos:start="491:52" pos:end="491:53">&gt;&gt;</operator> <literal type="number" pos:start="491:55" pos:end="491:55">3</literal><operator pos:start="491:56" pos:end="491:56">)</operator> <operator pos:start="491:58" pos:end="491:58">*</operator> <name pos:start="491:60" pos:end="491:78"><name pos:start="491:60" pos:end="491:61">st</name><operator pos:start="491:62" pos:end="491:63">-&gt;</operator><name pos:start="491:64" pos:end="491:68">codec</name><operator pos:start="491:69" pos:end="491:70">-&gt;</operator><name pos:start="491:71" pos:end="491:78">channels</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="495:11" pos:end="513:9">else if<condition pos:start="495:18" pos:end="495:61">(<expr pos:start="495:19" pos:end="495:60"><name pos:start="495:19" pos:end="495:39"><name pos:start="495:19" pos:end="495:20">st</name><operator pos:start="495:21" pos:end="495:22">-&gt;</operator><name pos:start="495:23" pos:end="495:27">codec</name><operator pos:start="495:28" pos:end="495:29">-&gt;</operator><name pos:start="495:30" pos:end="495:39">codec_type</name></name><operator pos:start="495:40" pos:end="495:41">==</operator><name pos:start="495:42" pos:end="495:60">CODEC_TYPE_SUBTITLE</name></expr>)</condition><block pos:start="495:62" pos:end="513:9">{<block_content pos:start="501:13" pos:end="511:43">

            <comment type="line" pos:start="497:13" pos:end="497:74">// ttxt stsd contains display flags, justification, background</comment>

            <comment type="line" pos:start="499:13" pos:end="499:75">// color, fonts, and default styles, so fake an atom to read it</comment>

            <decl_stmt pos:start="501:13" pos:end="501:79"><decl pos:start="501:13" pos:end="501:78"><type pos:start="501:13" pos:end="501:19"><name pos:start="501:13" pos:end="501:19">MOVAtom</name></type> <name pos:start="501:21" pos:end="501:29">fake_atom</name> <init pos:start="501:31" pos:end="501:78">= <expr pos:start="501:33" pos:end="501:78"><block pos:start="501:33" pos:end="501:78">{ <expr pos:start="501:35" pos:end="501:76"><operator pos:start="501:35" pos:end="501:35">.</operator><name pos:start="501:36" pos:end="501:39">size</name> <operator pos:start="501:41" pos:end="501:41">=</operator> <name pos:start="501:43" pos:end="501:46">size</name> <operator pos:start="501:48" pos:end="501:48">-</operator> <operator pos:start="501:50" pos:end="501:50">(</operator><call pos:start="501:51" pos:end="501:63"><name pos:start="501:51" pos:end="501:59">url_ftell</name><argument_list pos:start="501:60" pos:end="501:63">(<argument pos:start="501:61" pos:end="501:62"><expr pos:start="501:61" pos:end="501:62"><name pos:start="501:61" pos:end="501:62">pb</name></expr></argument>)</argument_list></call> <operator pos:start="501:65" pos:end="501:65">-</operator> <name pos:start="501:67" pos:end="501:75">start_pos</name><operator pos:start="501:76" pos:end="501:76">)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="503:13" pos:end="505:48"><if pos:start="503:13" pos:end="505:48">if <condition pos:start="503:16" pos:end="503:42">(<expr pos:start="503:17" pos:end="503:41"><name pos:start="503:17" pos:end="503:22">format</name> <operator pos:start="503:24" pos:end="503:25">!=</operator> <call pos:start="503:27" pos:end="503:41"><name pos:start="503:27" pos:end="503:33">AV_RL32</name><argument_list pos:start="503:34" pos:end="503:41">(<argument pos:start="503:35" pos:end="503:40"><expr pos:start="503:35" pos:end="503:40"><literal type="string" pos:start="503:35" pos:end="503:40">"mp4s"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="505:17" pos:end="505:48"><block_content pos:start="505:17" pos:end="505:48"> <comment type="line" pos:start="503:44" pos:end="503:79">// mp4s contains a regular esds atom</comment>

                <expr_stmt pos:start="505:17" pos:end="505:48"><expr pos:start="505:17" pos:end="505:47"><call pos:start="505:17" pos:end="505:47"><name pos:start="505:17" pos:end="505:29">mov_read_glbl</name><argument_list pos:start="505:30" pos:end="505:47">(<argument pos:start="505:31" pos:end="505:31"><expr pos:start="505:31" pos:end="505:31"><name pos:start="505:31" pos:end="505:31">c</name></expr></argument>, <argument pos:start="505:34" pos:end="505:35"><expr pos:start="505:34" pos:end="505:35"><name pos:start="505:34" pos:end="505:35">pb</name></expr></argument>, <argument pos:start="505:38" pos:end="505:46"><expr pos:start="505:38" pos:end="505:46"><name pos:start="505:38" pos:end="505:46">fake_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:36"><expr pos:start="507:13" pos:end="507:35"><name pos:start="507:13" pos:end="507:31"><name pos:start="507:13" pos:end="507:14">st</name><operator pos:start="507:15" pos:end="507:16">-&gt;</operator><name pos:start="507:17" pos:end="507:21">codec</name><operator pos:start="507:22" pos:end="507:23">-&gt;</operator><name pos:start="507:24" pos:end="507:31">codec_id</name></name><operator pos:start="507:32" pos:end="507:32">=</operator> <name pos:start="507:34" pos:end="507:35">id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:41"><expr pos:start="509:13" pos:end="509:40"><name pos:start="509:13" pos:end="509:28"><name pos:start="509:13" pos:end="509:14">st</name><operator pos:start="509:15" pos:end="509:16">-&gt;</operator><name pos:start="509:17" pos:end="509:21">codec</name><operator pos:start="509:22" pos:end="509:23">-&gt;</operator><name pos:start="509:24" pos:end="509:28">width</name></name> <operator pos:start="509:30" pos:end="509:30">=</operator> <name pos:start="509:32" pos:end="509:40"><name pos:start="509:32" pos:end="509:33">sc</name><operator pos:start="509:34" pos:end="509:35">-&gt;</operator><name pos:start="509:36" pos:end="509:40">width</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:43"><expr pos:start="511:13" pos:end="511:42"><name pos:start="511:13" pos:end="511:29"><name pos:start="511:13" pos:end="511:14">st</name><operator pos:start="511:15" pos:end="511:16">-&gt;</operator><name pos:start="511:17" pos:end="511:21">codec</name><operator pos:start="511:22" pos:end="511:23">-&gt;</operator><name pos:start="511:24" pos:end="511:29">height</name></name> <operator pos:start="511:31" pos:end="511:31">=</operator> <name pos:start="511:33" pos:end="511:42"><name pos:start="511:33" pos:end="511:34">sc</name><operator pos:start="511:35" pos:end="511:36">-&gt;</operator><name pos:start="511:37" pos:end="511:42">height</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="513:11" pos:end="519:9">else <block pos:start="513:16" pos:end="519:9">{<block_content pos:start="517:13" pos:end="517:62">

            <comment type="block" pos:start="515:13" pos:end="515:67">/* other codec type, just skip (rtp, mp4s, tmcd ...) */</comment>

            <expr_stmt pos:start="517:13" pos:end="517:62"><expr pos:start="517:13" pos:end="517:61"><call pos:start="517:13" pos:end="517:61"><name pos:start="517:13" pos:end="517:21">url_fskip</name><argument_list pos:start="517:22" pos:end="517:61">(<argument pos:start="517:23" pos:end="517:24"><expr pos:start="517:23" pos:end="517:24"><name pos:start="517:23" pos:end="517:24">pb</name></expr></argument>, <argument pos:start="517:27" pos:end="517:60"><expr pos:start="517:27" pos:end="517:60"><name pos:start="517:27" pos:end="517:30">size</name> <operator pos:start="517:32" pos:end="517:32">-</operator> <operator pos:start="517:34" pos:end="517:34">(</operator><call pos:start="517:35" pos:end="517:47"><name pos:start="517:35" pos:end="517:43">url_ftell</name><argument_list pos:start="517:44" pos:end="517:47">(<argument pos:start="517:45" pos:end="517:46"><expr pos:start="517:45" pos:end="517:46"><name pos:start="517:45" pos:end="517:46">pb</name></expr></argument>)</argument_list></call> <operator pos:start="517:49" pos:end="517:49">-</operator> <name pos:start="517:51" pos:end="517:59">start_pos</name><operator pos:start="517:60" pos:end="517:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="521:9" pos:end="521:85">/* this will read extra atoms at the end (wave, alac, damr, avcC, SMI ...) */</comment>

        <expr_stmt pos:start="523:9" pos:end="523:52"><expr pos:start="523:9" pos:end="523:51"><name pos:start="523:9" pos:end="523:14"><name pos:start="523:9" pos:end="523:9">a</name><operator pos:start="523:10" pos:end="523:10">.</operator><name pos:start="523:11" pos:end="523:14">size</name></name> <operator pos:start="523:16" pos:end="523:16">=</operator> <name pos:start="523:18" pos:end="523:21">size</name> <operator pos:start="523:23" pos:end="523:23">-</operator> <operator pos:start="523:25" pos:end="523:25">(</operator><call pos:start="523:26" pos:end="523:38"><name pos:start="523:26" pos:end="523:34">url_ftell</name><argument_list pos:start="523:35" pos:end="523:38">(<argument pos:start="523:36" pos:end="523:37"><expr pos:start="523:36" pos:end="523:37"><name pos:start="523:36" pos:end="523:37">pb</name></expr></argument>)</argument_list></call> <operator pos:start="523:40" pos:end="523:40">-</operator> <name pos:start="523:42" pos:end="523:50">start_pos</name><operator pos:start="523:51" pos:end="523:51">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="525:9" pos:end="533:34"><if pos:start="525:9" pos:end="531:9">if <condition pos:start="525:12" pos:end="525:23">(<expr pos:start="525:13" pos:end="525:22"><name pos:start="525:13" pos:end="525:18"><name pos:start="525:13" pos:end="525:13">a</name><operator pos:start="525:14" pos:end="525:14">.</operator><name pos:start="525:15" pos:end="525:18">size</name></name> <operator pos:start="525:20" pos:end="525:20">&gt;</operator> <literal type="number" pos:start="525:22" pos:end="525:22">8</literal></expr>)</condition> <block pos:start="525:25" pos:end="531:9">{<block_content pos:start="527:13" pos:end="529:26">

            <if_stmt pos:start="527:13" pos:end="529:26"><if pos:start="527:13" pos:end="529:26">if <condition pos:start="527:16" pos:end="527:47">(<expr pos:start="527:17" pos:end="527:46"><call pos:start="527:17" pos:end="527:42"><name pos:start="527:17" pos:end="527:32">mov_read_default</name><argument_list pos:start="527:33" pos:end="527:42">(<argument pos:start="527:34" pos:end="527:34"><expr pos:start="527:34" pos:end="527:34"><name pos:start="527:34" pos:end="527:34">c</name></expr></argument>, <argument pos:start="527:37" pos:end="527:38"><expr pos:start="527:37" pos:end="527:38"><name pos:start="527:37" pos:end="527:38">pb</name></expr></argument>, <argument pos:start="527:41" pos:end="527:41"><expr pos:start="527:41" pos:end="527:41"><name pos:start="527:41" pos:end="527:41">a</name></expr></argument>)</argument_list></call> <operator pos:start="527:44" pos:end="527:44">&lt;</operator> <literal type="number" pos:start="527:46" pos:end="527:46">0</literal></expr>)</condition><block type="pseudo" pos:start="529:17" pos:end="529:26"><block_content pos:start="529:17" pos:end="529:26">

                <return pos:start="529:17" pos:end="529:26">return <expr pos:start="529:24" pos:end="529:25"><operator pos:start="529:24" pos:end="529:24">-</operator><literal type="number" pos:start="529:25" pos:end="529:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="531:11" pos:end="533:34">else if <condition pos:start="531:19" pos:end="531:30">(<expr pos:start="531:20" pos:end="531:29"><name pos:start="531:20" pos:end="531:25"><name pos:start="531:20" pos:end="531:20">a</name><operator pos:start="531:21" pos:end="531:21">.</operator><name pos:start="531:22" pos:end="531:25">size</name></name> <operator pos:start="531:27" pos:end="531:27">&gt;</operator> <literal type="number" pos:start="531:29" pos:end="531:29">0</literal></expr>)</condition><block type="pseudo" pos:start="533:13" pos:end="533:34"><block_content pos:start="533:13" pos:end="533:34">

            <expr_stmt pos:start="533:13" pos:end="533:34"><expr pos:start="533:13" pos:end="533:33"><call pos:start="533:13" pos:end="533:33"><name pos:start="533:13" pos:end="533:21">url_fskip</name><argument_list pos:start="533:22" pos:end="533:33">(<argument pos:start="533:23" pos:end="533:24"><expr pos:start="533:23" pos:end="533:24"><name pos:start="533:23" pos:end="533:24">pb</name></expr></argument>, <argument pos:start="533:27" pos:end="533:32"><expr pos:start="533:27" pos:end="533:32"><name pos:start="533:27" pos:end="533:32"><name pos:start="533:27" pos:end="533:27">a</name><operator pos:start="533:28" pos:end="533:28">.</operator><name pos:start="533:29" pos:end="533:32">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="539:5" pos:end="541:47"><if pos:start="539:5" pos:end="541:47">if<condition pos:start="539:7" pos:end="539:96">(<expr pos:start="539:8" pos:end="539:95"><name pos:start="539:8" pos:end="539:28"><name pos:start="539:8" pos:end="539:9">st</name><operator pos:start="539:10" pos:end="539:11">-&gt;</operator><name pos:start="539:12" pos:end="539:16">codec</name><operator pos:start="539:17" pos:end="539:18">-&gt;</operator><name pos:start="539:19" pos:end="539:28">codec_type</name></name><operator pos:start="539:29" pos:end="539:30">==</operator><name pos:start="539:31" pos:end="539:46">CODEC_TYPE_AUDIO</name> <operator pos:start="539:48" pos:end="539:49">&amp;&amp;</operator> <name pos:start="539:51" pos:end="539:72"><name pos:start="539:51" pos:end="539:52">st</name><operator pos:start="539:53" pos:end="539:54">-&gt;</operator><name pos:start="539:55" pos:end="539:59">codec</name><operator pos:start="539:60" pos:end="539:61">-&gt;</operator><name pos:start="539:62" pos:end="539:72">sample_rate</name></name><operator pos:start="539:73" pos:end="539:74">==</operator><literal type="number" pos:start="539:75" pos:end="539:75">0</literal> <operator pos:start="539:77" pos:end="539:78">&amp;&amp;</operator> <name pos:start="539:80" pos:end="539:93"><name pos:start="539:80" pos:end="539:81">sc</name><operator pos:start="539:82" pos:end="539:83">-&gt;</operator><name pos:start="539:84" pos:end="539:93">time_scale</name></name><operator pos:start="539:94" pos:end="539:94">&gt;</operator><literal type="number" pos:start="539:95" pos:end="539:95">1</literal></expr>)</condition><block type="pseudo" pos:start="541:9" pos:end="541:47"><block_content pos:start="541:9" pos:end="541:47">

        <expr_stmt pos:start="541:9" pos:end="541:47"><expr pos:start="541:9" pos:end="541:46"><name pos:start="541:9" pos:end="541:30"><name pos:start="541:9" pos:end="541:10">st</name><operator pos:start="541:11" pos:end="541:12">-&gt;</operator><name pos:start="541:13" pos:end="541:17">codec</name><operator pos:start="541:18" pos:end="541:19">-&gt;</operator><name pos:start="541:20" pos:end="541:30">sample_rate</name></name><operator pos:start="541:31" pos:end="541:31">=</operator> <name pos:start="541:33" pos:end="541:46"><name pos:start="541:33" pos:end="541:34">sc</name><operator pos:start="541:35" pos:end="541:36">-&gt;</operator><name pos:start="541:37" pos:end="541:46">time_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="545:5" pos:end="545:43">/* special codec parameters handling */</comment>

    <switch pos:start="547:5" pos:end="645:5">switch <condition pos:start="547:12" pos:end="547:32">(<expr pos:start="547:13" pos:end="547:31"><name pos:start="547:13" pos:end="547:31"><name pos:start="547:13" pos:end="547:14">st</name><operator pos:start="547:15" pos:end="547:16">-&gt;</operator><name pos:start="547:17" pos:end="547:21">codec</name><operator pos:start="547:22" pos:end="547:23">-&gt;</operator><name pos:start="547:24" pos:end="547:31">codec_id</name></name></expr>)</condition> <block pos:start="547:34" pos:end="645:5">{<block_content pos:start="551:5" pos:end="643:14">

<cpp:if pos:start="549:1" pos:end="549:21">#<cpp:directive pos:start="549:2" pos:end="549:3">if</cpp:directive> <expr pos:start="549:5" pos:end="549:21"><name pos:start="549:5" pos:end="549:21">CONFIG_DV_DEMUXER</name></expr></cpp:if>

    <case pos:start="551:5" pos:end="551:26">case <expr pos:start="551:10" pos:end="551:25"><name pos:start="551:10" pos:end="551:25">CODEC_ID_DVAUDIO</name></expr>:</case>

        <expr_stmt pos:start="553:9" pos:end="553:46"><expr pos:start="553:9" pos:end="553:45"><name pos:start="553:9" pos:end="553:18"><name pos:start="553:9" pos:end="553:9">c</name><operator pos:start="553:10" pos:end="553:11">-&gt;</operator><name pos:start="553:12" pos:end="553:18">dv_fctx</name></name> <operator pos:start="553:20" pos:end="553:20">=</operator> <call pos:start="553:22" pos:end="553:45"><name pos:start="553:22" pos:end="553:43">avformat_alloc_context</name><argument_list pos:start="553:44" pos:end="553:45">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="555:9" pos:end="555:48"><expr pos:start="555:9" pos:end="555:47"><name pos:start="555:9" pos:end="555:19"><name pos:start="555:9" pos:end="555:9">c</name><operator pos:start="555:10" pos:end="555:11">-&gt;</operator><name pos:start="555:12" pos:end="555:19">dv_demux</name></name> <operator pos:start="555:21" pos:end="555:21">=</operator> <call pos:start="555:23" pos:end="555:47"><name pos:start="555:23" pos:end="555:35">dv_init_demux</name><argument_list pos:start="555:36" pos:end="555:47">(<argument pos:start="555:37" pos:end="555:46"><expr pos:start="555:37" pos:end="555:46"><name pos:start="555:37" pos:end="555:46"><name pos:start="555:37" pos:end="555:37">c</name><operator pos:start="555:38" pos:end="555:39">-&gt;</operator><name pos:start="555:40" pos:end="555:46">dv_fctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="557:9" pos:end="563:9"><if pos:start="557:9" pos:end="563:9">if <condition pos:start="557:12" pos:end="557:25">(<expr pos:start="557:13" pos:end="557:24"><operator pos:start="557:13" pos:end="557:13">!</operator><name pos:start="557:14" pos:end="557:24"><name pos:start="557:14" pos:end="557:14">c</name><operator pos:start="557:15" pos:end="557:16">-&gt;</operator><name pos:start="557:17" pos:end="557:24">dv_demux</name></name></expr>)</condition> <block pos:start="557:27" pos:end="563:9">{<block_content pos:start="559:13" pos:end="561:22">

            <expr_stmt pos:start="559:13" pos:end="559:73"><expr pos:start="559:13" pos:end="559:72"><call pos:start="559:13" pos:end="559:72"><name pos:start="559:13" pos:end="559:18">av_log</name><argument_list pos:start="559:19" pos:end="559:72">(<argument pos:start="559:20" pos:end="559:24"><expr pos:start="559:20" pos:end="559:24"><name pos:start="559:20" pos:end="559:24"><name pos:start="559:20" pos:end="559:20">c</name><operator pos:start="559:21" pos:end="559:22">-&gt;</operator><name pos:start="559:23" pos:end="559:24">fc</name></name></expr></argument>, <argument pos:start="559:27" pos:end="559:38"><expr pos:start="559:27" pos:end="559:38"><name pos:start="559:27" pos:end="559:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="559:41" pos:end="559:71"><expr pos:start="559:41" pos:end="559:71"><literal type="string" pos:start="559:41" pos:end="559:71">"dv demux context init error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="561:13" pos:end="561:22">return <expr pos:start="561:20" pos:end="561:21"><operator pos:start="561:20" pos:end="561:20">-</operator><literal type="number" pos:start="561:21" pos:end="561:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="565:9" pos:end="565:35"><expr pos:start="565:9" pos:end="565:34"><name pos:start="565:9" pos:end="565:30"><name pos:start="565:9" pos:end="565:10">sc</name><operator pos:start="565:11" pos:end="565:12">-&gt;</operator><name pos:start="565:13" pos:end="565:30">dv_audio_container</name></name> <operator pos:start="565:32" pos:end="565:32">=</operator> <literal type="number" pos:start="565:34" pos:end="565:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="567:9" pos:end="567:49"><expr pos:start="567:9" pos:end="567:48"><name pos:start="567:9" pos:end="567:27"><name pos:start="567:9" pos:end="567:10">st</name><operator pos:start="567:11" pos:end="567:12">-&gt;</operator><name pos:start="567:13" pos:end="567:17">codec</name><operator pos:start="567:18" pos:end="567:19">-&gt;</operator><name pos:start="567:20" pos:end="567:27">codec_id</name></name> <operator pos:start="567:29" pos:end="567:29">=</operator> <name pos:start="567:31" pos:end="567:48">CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt>

        <break pos:start="569:9" pos:end="572:0">break;</break>

<cpp:endif pos:start="571:1" pos:end="571:6">#<cpp:directive pos:start="571:2" pos:end="571:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="573:5" pos:end="573:52">/* no ifdef since parameters are always those */</comment>

    <case pos:start="575:5" pos:end="575:24">case <expr pos:start="575:10" pos:end="575:23"><name pos:start="575:10" pos:end="575:23">CODEC_ID_QCELP</name></expr>:</case>

        <comment type="line" pos:start="577:9" pos:end="577:61">// force sample rate for qcelp when not stored in mov</comment>

        <if_stmt pos:start="579:9" pos:end="581:42"><if pos:start="579:9" pos:end="581:42">if <condition pos:start="579:12" pos:end="579:59">(<expr pos:start="579:13" pos:end="579:58"><name pos:start="579:13" pos:end="579:32"><name pos:start="579:13" pos:end="579:14">st</name><operator pos:start="579:15" pos:end="579:16">-&gt;</operator><name pos:start="579:17" pos:end="579:21">codec</name><operator pos:start="579:22" pos:end="579:23">-&gt;</operator><name pos:start="579:24" pos:end="579:32">codec_tag</name></name> <operator pos:start="579:34" pos:end="579:35">!=</operator> <call pos:start="579:37" pos:end="579:58"><name pos:start="579:37" pos:end="579:41">MKTAG</name><argument_list pos:start="579:42" pos:end="579:58">(<argument pos:start="579:43" pos:end="579:45"><expr pos:start="579:43" pos:end="579:45"><literal type="char" pos:start="579:43" pos:end="579:45">'Q'</literal></expr></argument>,<argument pos:start="579:47" pos:end="579:49"><expr pos:start="579:47" pos:end="579:49"><literal type="char" pos:start="579:47" pos:end="579:49">'c'</literal></expr></argument>,<argument pos:start="579:51" pos:end="579:53"><expr pos:start="579:51" pos:end="579:53"><literal type="char" pos:start="579:51" pos:end="579:53">'l'</literal></expr></argument>,<argument pos:start="579:55" pos:end="579:57"><expr pos:start="579:55" pos:end="579:57"><literal type="char" pos:start="579:55" pos:end="579:57">'p'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="581:13" pos:end="581:42"><block_content pos:start="581:13" pos:end="581:42">

            <expr_stmt pos:start="581:13" pos:end="581:42"><expr pos:start="581:13" pos:end="581:41"><name pos:start="581:13" pos:end="581:34"><name pos:start="581:13" pos:end="581:14">st</name><operator pos:start="581:15" pos:end="581:16">-&gt;</operator><name pos:start="581:17" pos:end="581:21">codec</name><operator pos:start="581:22" pos:end="581:23">-&gt;</operator><name pos:start="581:24" pos:end="581:34">sample_rate</name></name> <operator pos:start="581:36" pos:end="581:36">=</operator> <literal type="number" pos:start="581:38" pos:end="581:41">8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="583:9" pos:end="583:35"><expr pos:start="583:9" pos:end="583:34"><name pos:start="583:9" pos:end="583:29"><name pos:start="583:9" pos:end="583:10">st</name><operator pos:start="583:11" pos:end="583:12">-&gt;</operator><name pos:start="583:13" pos:end="583:17">codec</name><operator pos:start="583:18" pos:end="583:19">-&gt;</operator><name pos:start="583:20" pos:end="583:29">frame_size</name></name><operator pos:start="583:30" pos:end="583:30">=</operator> <literal type="number" pos:start="583:32" pos:end="583:34">160</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="585:9" pos:end="585:31"><expr pos:start="585:9" pos:end="585:30"><name pos:start="585:9" pos:end="585:27"><name pos:start="585:9" pos:end="585:10">st</name><operator pos:start="585:11" pos:end="585:12">-&gt;</operator><name pos:start="585:13" pos:end="585:17">codec</name><operator pos:start="585:18" pos:end="585:19">-&gt;</operator><name pos:start="585:20" pos:end="585:27">channels</name></name><operator pos:start="585:28" pos:end="585:28">=</operator> <literal type="number" pos:start="585:30" pos:end="585:30">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="585:33" pos:end="585:51">/* really needed */</comment>

        <break pos:start="587:9" pos:end="587:14">break;</break>

    <case pos:start="589:5" pos:end="589:25">case <expr pos:start="589:10" pos:end="589:24"><name pos:start="589:10" pos:end="589:24">CODEC_ID_AMR_NB</name></expr>:</case>

    <case pos:start="591:5" pos:end="591:25">case <expr pos:start="591:10" pos:end="591:24"><name pos:start="591:10" pos:end="591:24">CODEC_ID_AMR_WB</name></expr>:</case>

        <expr_stmt pos:start="593:9" pos:end="593:53"><expr pos:start="593:9" pos:end="593:52"><name pos:start="593:9" pos:end="593:29"><name pos:start="593:9" pos:end="593:10">st</name><operator pos:start="593:11" pos:end="593:12">-&gt;</operator><name pos:start="593:13" pos:end="593:17">codec</name><operator pos:start="593:18" pos:end="593:19">-&gt;</operator><name pos:start="593:20" pos:end="593:29">frame_size</name></name><operator pos:start="593:30" pos:end="593:30">=</operator> <name pos:start="593:32" pos:end="593:52"><name pos:start="593:32" pos:end="593:33">sc</name><operator pos:start="593:34" pos:end="593:35">-&gt;</operator><name pos:start="593:36" pos:end="593:52">samples_per_frame</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="595:9" pos:end="595:31"><expr pos:start="595:9" pos:end="595:30"><name pos:start="595:9" pos:end="595:27"><name pos:start="595:9" pos:end="595:10">st</name><operator pos:start="595:11" pos:end="595:12">-&gt;</operator><name pos:start="595:13" pos:end="595:17">codec</name><operator pos:start="595:18" pos:end="595:19">-&gt;</operator><name pos:start="595:20" pos:end="595:27">channels</name></name><operator pos:start="595:28" pos:end="595:28">=</operator> <literal type="number" pos:start="595:30" pos:end="595:30">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="595:33" pos:end="595:51">/* really needed */</comment>

        <comment type="block" pos:start="597:9" pos:end="597:79">/* force sample rate for amr, stsd in 3gp does not store sample rate */</comment>

        <if_stmt pos:start="599:9" pos:end="605:43"><if pos:start="599:9" pos:end="601:42">if <condition pos:start="599:12" pos:end="599:51">(<expr pos:start="599:13" pos:end="599:50"><name pos:start="599:13" pos:end="599:31"><name pos:start="599:13" pos:end="599:14">st</name><operator pos:start="599:15" pos:end="599:16">-&gt;</operator><name pos:start="599:17" pos:end="599:21">codec</name><operator pos:start="599:22" pos:end="599:23">-&gt;</operator><name pos:start="599:24" pos:end="599:31">codec_id</name></name> <operator pos:start="599:33" pos:end="599:34">==</operator> <name pos:start="599:36" pos:end="599:50">CODEC_ID_AMR_NB</name></expr>)</condition><block type="pseudo" pos:start="601:13" pos:end="601:42"><block_content pos:start="601:13" pos:end="601:42">

            <expr_stmt pos:start="601:13" pos:end="601:42"><expr pos:start="601:13" pos:end="601:41"><name pos:start="601:13" pos:end="601:34"><name pos:start="601:13" pos:end="601:14">st</name><operator pos:start="601:15" pos:end="601:16">-&gt;</operator><name pos:start="601:17" pos:end="601:21">codec</name><operator pos:start="601:22" pos:end="601:23">-&gt;</operator><name pos:start="601:24" pos:end="601:34">sample_rate</name></name> <operator pos:start="601:36" pos:end="601:36">=</operator> <literal type="number" pos:start="601:38" pos:end="601:41">8000</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="603:9" pos:end="605:43">else if <condition pos:start="603:17" pos:end="603:56">(<expr pos:start="603:18" pos:end="603:55"><name pos:start="603:18" pos:end="603:36"><name pos:start="603:18" pos:end="603:19">st</name><operator pos:start="603:20" pos:end="603:21">-&gt;</operator><name pos:start="603:22" pos:end="603:26">codec</name><operator pos:start="603:27" pos:end="603:28">-&gt;</operator><name pos:start="603:29" pos:end="603:36">codec_id</name></name> <operator pos:start="603:38" pos:end="603:39">==</operator> <name pos:start="603:41" pos:end="603:55">CODEC_ID_AMR_WB</name></expr>)</condition><block type="pseudo" pos:start="605:13" pos:end="605:43"><block_content pos:start="605:13" pos:end="605:43">

            <expr_stmt pos:start="605:13" pos:end="605:43"><expr pos:start="605:13" pos:end="605:42"><name pos:start="605:13" pos:end="605:34"><name pos:start="605:13" pos:end="605:14">st</name><operator pos:start="605:15" pos:end="605:16">-&gt;</operator><name pos:start="605:17" pos:end="605:21">codec</name><operator pos:start="605:22" pos:end="605:23">-&gt;</operator><name pos:start="605:24" pos:end="605:34">sample_rate</name></name> <operator pos:start="605:36" pos:end="605:36">=</operator> <literal type="number" pos:start="605:38" pos:end="605:42">16000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="607:9" pos:end="607:14">break;</break>

    <case pos:start="609:5" pos:end="609:22">case <expr pos:start="609:10" pos:end="609:21"><name pos:start="609:10" pos:end="609:21">CODEC_ID_MP2</name></expr>:</case>

    <case pos:start="611:5" pos:end="611:22">case <expr pos:start="611:10" pos:end="611:21"><name pos:start="611:10" pos:end="611:21">CODEC_ID_MP3</name></expr>:</case>

        <expr_stmt pos:start="613:9" pos:end="613:49"><expr pos:start="613:9" pos:end="613:48"><name pos:start="613:9" pos:end="613:29"><name pos:start="613:9" pos:end="613:10">st</name><operator pos:start="613:11" pos:end="613:12">-&gt;</operator><name pos:start="613:13" pos:end="613:17">codec</name><operator pos:start="613:18" pos:end="613:19">-&gt;</operator><name pos:start="613:20" pos:end="613:29">codec_type</name></name> <operator pos:start="613:31" pos:end="613:31">=</operator> <name pos:start="613:33" pos:end="613:48">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt> <comment type="block" pos:start="613:51" pos:end="613:90">/* force type after stsd for m1a hdlr */</comment>

        <expr_stmt pos:start="615:9" pos:end="615:47"><expr pos:start="615:9" pos:end="615:46"><name pos:start="615:9" pos:end="615:24"><name pos:start="615:9" pos:end="615:10">st</name><operator pos:start="615:11" pos:end="615:12">-&gt;</operator><name pos:start="615:13" pos:end="615:24">need_parsing</name></name> <operator pos:start="615:26" pos:end="615:26">=</operator> <name pos:start="615:28" pos:end="615:46">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

        <break pos:start="617:9" pos:end="617:14">break;</break>

    <case pos:start="619:5" pos:end="619:22">case <expr pos:start="619:10" pos:end="619:21"><name pos:start="619:10" pos:end="619:21">CODEC_ID_GSM</name></expr>:</case>

    <case pos:start="621:5" pos:end="621:27">case <expr pos:start="621:10" pos:end="621:26"><name pos:start="621:10" pos:end="621:26">CODEC_ID_ADPCM_MS</name></expr>:</case>

    <case pos:start="623:5" pos:end="623:32">case <expr pos:start="623:10" pos:end="623:31"><name pos:start="623:10" pos:end="623:31">CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

        <expr_stmt pos:start="625:9" pos:end="625:53"><expr pos:start="625:9" pos:end="625:52"><name pos:start="625:9" pos:end="625:30"><name pos:start="625:9" pos:end="625:10">st</name><operator pos:start="625:11" pos:end="625:12">-&gt;</operator><name pos:start="625:13" pos:end="625:17">codec</name><operator pos:start="625:18" pos:end="625:19">-&gt;</operator><name pos:start="625:20" pos:end="625:30">block_align</name></name> <operator pos:start="625:32" pos:end="625:32">=</operator> <name pos:start="625:34" pos:end="625:52"><name pos:start="625:34" pos:end="625:35">sc</name><operator pos:start="625:36" pos:end="625:37">-&gt;</operator><name pos:start="625:38" pos:end="625:52">bytes_per_frame</name></name></expr>;</expr_stmt>

        <break pos:start="627:9" pos:end="627:14">break;</break>

    <case pos:start="629:5" pos:end="629:23">case <expr pos:start="629:10" pos:end="629:22"><name pos:start="629:10" pos:end="629:22">CODEC_ID_ALAC</name></expr>:</case>

        <if_stmt pos:start="631:9" pos:end="637:9"><if pos:start="631:9" pos:end="637:9">if <condition pos:start="631:12" pos:end="631:44">(<expr pos:start="631:13" pos:end="631:43"><name pos:start="631:13" pos:end="631:37"><name pos:start="631:13" pos:end="631:14">st</name><operator pos:start="631:15" pos:end="631:16">-&gt;</operator><name pos:start="631:17" pos:end="631:21">codec</name><operator pos:start="631:22" pos:end="631:23">-&gt;</operator><name pos:start="631:24" pos:end="631:37">extradata_size</name></name> <operator pos:start="631:39" pos:end="631:40">==</operator> <literal type="number" pos:start="631:42" pos:end="631:43">36</literal></expr>)</condition> <block pos:start="631:46" pos:end="637:9">{<block_content pos:start="633:13" pos:end="635:69">

            <expr_stmt pos:start="633:13" pos:end="633:69"><expr pos:start="633:13" pos:end="633:68"><name pos:start="633:13" pos:end="633:33"><name pos:start="633:13" pos:end="633:14">st</name><operator pos:start="633:15" pos:end="633:16">-&gt;</operator><name pos:start="633:17" pos:end="633:21">codec</name><operator pos:start="633:22" pos:end="633:23">-&gt;</operator><name pos:start="633:24" pos:end="633:33">frame_size</name></name> <operator pos:start="633:35" pos:end="633:35">=</operator> <call pos:start="633:37" pos:end="633:68"><name pos:start="633:37" pos:end="633:43">AV_RB32</name><argument_list pos:start="633:44" pos:end="633:68">(<argument pos:start="633:45" pos:end="633:67"><expr pos:start="633:45" pos:end="633:67"><name pos:start="633:45" pos:end="633:64"><name pos:start="633:45" pos:end="633:46">st</name><operator pos:start="633:47" pos:end="633:48">-&gt;</operator><name pos:start="633:49" pos:end="633:53">codec</name><operator pos:start="633:54" pos:end="633:55">-&gt;</operator><name pos:start="633:56" pos:end="633:64">extradata</name></name><operator pos:start="633:65" pos:end="633:65">+</operator><literal type="number" pos:start="633:66" pos:end="633:67">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="635:13" pos:end="635:69"><expr pos:start="635:13" pos:end="635:68"><name pos:start="635:13" pos:end="635:31"><name pos:start="635:13" pos:end="635:14">st</name><operator pos:start="635:15" pos:end="635:16">-&gt;</operator><name pos:start="635:17" pos:end="635:21">codec</name><operator pos:start="635:22" pos:end="635:23">-&gt;</operator><name pos:start="635:24" pos:end="635:31">channels</name></name>   <operator pos:start="635:35" pos:end="635:35">=</operator> <call pos:start="635:37" pos:end="635:68"><name pos:start="635:37" pos:end="635:42">AV_RB8</name> <argument_list pos:start="635:44" pos:end="635:68">(<argument pos:start="635:45" pos:end="635:67"><expr pos:start="635:45" pos:end="635:67"><name pos:start="635:45" pos:end="635:64"><name pos:start="635:45" pos:end="635:46">st</name><operator pos:start="635:47" pos:end="635:48">-&gt;</operator><name pos:start="635:49" pos:end="635:53">codec</name><operator pos:start="635:54" pos:end="635:55">-&gt;</operator><name pos:start="635:56" pos:end="635:64">extradata</name></name><operator pos:start="635:65" pos:end="635:65">+</operator><literal type="number" pos:start="635:66" pos:end="635:67">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="639:9" pos:end="639:14">break;</break>

    <default pos:start="641:5" pos:end="641:12">default:</default>

        <break pos:start="643:9" pos:end="643:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="649:5" pos:end="649:13">return <expr pos:start="649:12" pos:end="649:12"><literal type="number" pos:start="649:12" pos:end="649:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
