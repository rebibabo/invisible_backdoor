<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5392.c" pos:tabs="8"><function pos:start="1:1" pos:end="189:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">inet_listen_opts</name><parameter_list pos:start="1:21" pos:end="1:53">(<parameter pos:start="1:22" pos:end="1:35"><decl pos:start="1:22" pos:end="1:35"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:29">QemuOpts</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:35">opts</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:52"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:52">port_offset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="189:1">{<block_content pos:start="5:5" pos:end="187:19">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">addrinfo</name></name></type> <name pos:start="5:21" pos:end="5:22">ai</name></decl>,<decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">res</name></decl>,<decl pos:start="5:29" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:17"><name pos:start="9:10" pos:end="9:13">port</name><index pos:start="9:14" pos:end="9:17">[<expr pos:start="9:15" pos:end="9:16"><literal type="number" pos:start="9:15" pos:end="9:16">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:34"><name pos:start="11:10" pos:end="11:14">uaddr</name><index pos:start="11:15" pos:end="11:34">[<expr pos:start="11:16" pos:end="11:33"><name pos:start="11:16" pos:end="11:31">INET6_ADDRSTRLEN</name><operator pos:start="11:32" pos:end="11:32">+</operator><literal type="number" pos:start="11:33" pos:end="11:33">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:14">uport</name><index pos:start="13:15" pos:end="13:18">[<expr pos:start="13:16" pos:end="13:17"><literal type="number" pos:start="13:16" pos:end="13:17">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">slisten</name></decl>,<decl pos:start="15:17" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:18">rc</name></decl>,<decl pos:start="15:20" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:20" pos:end="15:21">to</name></decl>,<decl pos:start="15:23" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:23" pos:end="15:30">try_next</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><call pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:10">memset</name><argument_list pos:start="19:11" pos:end="19:29">(<argument pos:start="19:12" pos:end="19:14"><expr pos:start="19:12" pos:end="19:14"><operator pos:start="19:12" pos:end="19:12">&amp;</operator><name pos:start="19:13" pos:end="19:14">ai</name></expr></argument>,<argument pos:start="19:16" pos:end="19:16"><expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr></argument>, <argument pos:start="19:19" pos:end="19:28"><expr pos:start="19:19" pos:end="19:28"><sizeof pos:start="19:19" pos:end="19:28">sizeof<argument_list pos:start="19:25" pos:end="19:28">(<argument pos:start="19:26" pos:end="19:27"><expr pos:start="19:26" pos:end="19:27"><name pos:start="19:26" pos:end="19:27">ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:45"><expr pos:start="21:5" pos:end="21:44"><name pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:6">ai</name><operator pos:start="21:7" pos:end="21:7">.</operator><name pos:start="21:8" pos:end="21:15">ai_flags</name></name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:28">AI_PASSIVE</name> <operator pos:start="21:30" pos:end="21:30">|</operator> <name pos:start="21:32" pos:end="21:44">AI_ADDRCONFIG</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:6">ai</name><operator pos:start="23:7" pos:end="23:7">.</operator><name pos:start="23:8" pos:end="23:16">ai_family</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:28">PF_UNSPEC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:6">ai</name><operator pos:start="25:7" pos:end="25:7">.</operator><name pos:start="25:8" pos:end="25:18">ai_socktype</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:32">SOCK_STREAM</name></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="31:45">(<expr pos:start="29:9" pos:end="31:44"><operator pos:start="29:9" pos:end="29:9">(</operator><call pos:start="29:10" pos:end="29:35"><name pos:start="29:10" pos:end="29:21">qemu_opt_get</name><argument_list pos:start="29:22" pos:end="29:35">(<argument pos:start="29:23" pos:end="29:26"><expr pos:start="29:23" pos:end="29:26"><name pos:start="29:23" pos:end="29:26">opts</name></expr></argument>, <argument pos:start="29:29" pos:end="29:34"><expr pos:start="29:29" pos:end="29:34"><literal type="string" pos:start="29:29" pos:end="29:34">"host"</literal></expr></argument>)</argument_list></call> <operator pos:start="29:37" pos:end="29:38">==</operator> <name pos:start="29:40" pos:end="29:43">NULL</name><operator pos:start="29:44" pos:end="29:44">)</operator> <operator pos:start="29:46" pos:end="29:47">||</operator>

        <operator pos:start="31:9" pos:end="31:9">(</operator><call pos:start="31:10" pos:end="31:35"><name pos:start="31:10" pos:end="31:21">qemu_opt_get</name><argument_list pos:start="31:22" pos:end="31:35">(<argument pos:start="31:23" pos:end="31:26"><expr pos:start="31:23" pos:end="31:26"><name pos:start="31:23" pos:end="31:26">opts</name></expr></argument>, <argument pos:start="31:29" pos:end="31:34"><expr pos:start="31:29" pos:end="31:34"><literal type="string" pos:start="31:29" pos:end="31:34">"port"</literal></expr></argument>)</argument_list></call> <operator pos:start="31:37" pos:end="31:38">==</operator> <name pos:start="31:40" pos:end="31:43">NULL</name><operator pos:start="31:44" pos:end="31:44">)</operator></expr>)</condition> <block pos:start="31:47" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <expr_stmt pos:start="33:9" pos:end="33:78"><expr pos:start="33:9" pos:end="33:77"><call pos:start="33:9" pos:end="33:77"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:77">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:62"><expr pos:start="33:25" pos:end="33:62"><literal type="string" pos:start="33:25" pos:end="33:62">"%s: host and/or port not specified\n"</literal></expr></argument>, <argument pos:start="33:65" pos:end="33:76"><expr pos:start="33:65" pos:end="33:76"><name pos:start="33:65" pos:end="33:76">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:60"><expr pos:start="39:5" pos:end="39:59"><call pos:start="39:5" pos:end="39:59"><name pos:start="39:5" pos:end="39:11">pstrcpy</name><argument_list pos:start="39:12" pos:end="39:59">(<argument pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:16"><name pos:start="39:13" pos:end="39:16">port</name></expr></argument>, <argument pos:start="39:19" pos:end="39:30"><expr pos:start="39:19" pos:end="39:30"><sizeof pos:start="39:19" pos:end="39:30">sizeof<argument_list pos:start="39:25" pos:end="39:30">(<argument pos:start="39:26" pos:end="39:29"><expr pos:start="39:26" pos:end="39:29"><name pos:start="39:26" pos:end="39:29">port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:33" pos:end="39:58"><expr pos:start="39:33" pos:end="39:58"><call pos:start="39:33" pos:end="39:58"><name pos:start="39:33" pos:end="39:44">qemu_opt_get</name><argument_list pos:start="39:45" pos:end="39:58">(<argument pos:start="39:46" pos:end="39:49"><expr pos:start="39:46" pos:end="39:49"><name pos:start="39:46" pos:end="39:49">opts</name></expr></argument>, <argument pos:start="39:52" pos:end="39:57"><expr pos:start="39:52" pos:end="39:57"><literal type="string" pos:start="39:52" pos:end="39:57">"port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:8">addr</name> <operator pos:start="41:10" pos:end="41:10">=</operator> <call pos:start="41:12" pos:end="41:37"><name pos:start="41:12" pos:end="41:23">qemu_opt_get</name><argument_list pos:start="41:24" pos:end="41:37">(<argument pos:start="41:25" pos:end="41:28"><expr pos:start="41:25" pos:end="41:28"><name pos:start="41:25" pos:end="41:28">opts</name></expr></argument>, <argument pos:start="41:31" pos:end="41:36"><expr pos:start="41:31" pos:end="41:36"><literal type="string" pos:start="41:31" pos:end="41:36">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:6">to</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:43"><name pos:start="45:10" pos:end="45:28">qemu_opt_get_number</name><argument_list pos:start="45:29" pos:end="45:43">(<argument pos:start="45:30" pos:end="45:33"><expr pos:start="45:30" pos:end="45:33"><name pos:start="45:30" pos:end="45:33">opts</name></expr></argument>, <argument pos:start="45:36" pos:end="45:39"><expr pos:start="45:36" pos:end="45:39"><literal type="string" pos:start="45:36" pos:end="45:39">"to"</literal></expr></argument>, <argument pos:start="45:42" pos:end="45:42"><expr pos:start="45:42" pos:end="45:42"><literal type="number" pos:start="45:42" pos:end="45:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:31"><if pos:start="47:5" pos:end="49:31">if <condition pos:start="47:8" pos:end="47:43">(<expr pos:start="47:9" pos:end="47:42"><call pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:25">qemu_opt_get_bool</name><argument_list pos:start="47:26" pos:end="47:42">(<argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">opts</name></expr></argument>, <argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><literal type="string" pos:start="47:33" pos:end="47:38">"ipv4"</literal></expr></argument>, <argument pos:start="47:41" pos:end="47:41"><expr pos:start="47:41" pos:end="47:41"><literal type="number" pos:start="47:41" pos:end="47:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:31"><block_content pos:start="49:9" pos:end="49:31">

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:10">ai</name><operator pos:start="49:11" pos:end="49:11">.</operator><name pos:start="49:12" pos:end="49:20">ai_family</name></name> <operator pos:start="49:22" pos:end="49:22">=</operator> <name pos:start="49:24" pos:end="49:30">PF_INET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="53:32"><if pos:start="51:5" pos:end="53:32">if <condition pos:start="51:8" pos:end="51:43">(<expr pos:start="51:9" pos:end="51:42"><call pos:start="51:9" pos:end="51:42"><name pos:start="51:9" pos:end="51:25">qemu_opt_get_bool</name><argument_list pos:start="51:26" pos:end="51:42">(<argument pos:start="51:27" pos:end="51:30"><expr pos:start="51:27" pos:end="51:30"><name pos:start="51:27" pos:end="51:30">opts</name></expr></argument>, <argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><literal type="string" pos:start="51:33" pos:end="51:38">"ipv6"</literal></expr></argument>, <argument pos:start="51:41" pos:end="51:41"><expr pos:start="51:41" pos:end="51:41"><literal type="number" pos:start="51:41" pos:end="51:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:32"><block_content pos:start="53:9" pos:end="53:32">

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:10">ai</name><operator pos:start="53:11" pos:end="53:11">.</operator><name pos:start="53:12" pos:end="53:20">ai_family</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:31">PF_INET6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:16">/* lookup */</comment>

    <if_stmt pos:start="59:5" pos:end="61:69"><if pos:start="59:5" pos:end="61:69">if <condition pos:start="59:8" pos:end="59:20">(<expr pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:19">port_offset</name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:69"><block_content pos:start="61:9" pos:end="61:69">

        <expr_stmt pos:start="61:9" pos:end="61:69"><expr pos:start="61:9" pos:end="61:68"><call pos:start="61:9" pos:end="61:68"><name pos:start="61:9" pos:end="61:16">snprintf</name><argument_list pos:start="61:17" pos:end="61:68">(<argument pos:start="61:18" pos:end="61:21"><expr pos:start="61:18" pos:end="61:21"><name pos:start="61:18" pos:end="61:21">port</name></expr></argument>, <argument pos:start="61:24" pos:end="61:35"><expr pos:start="61:24" pos:end="61:35"><sizeof pos:start="61:24" pos:end="61:35">sizeof<argument_list pos:start="61:30" pos:end="61:35">(<argument pos:start="61:31" pos:end="61:34"><expr pos:start="61:31" pos:end="61:34"><name pos:start="61:31" pos:end="61:34">port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="61:38" pos:end="61:41"><expr pos:start="61:38" pos:end="61:41"><literal type="string" pos:start="61:38" pos:end="61:41">"%d"</literal></expr></argument>, <argument pos:start="61:44" pos:end="61:67"><expr pos:start="61:44" pos:end="61:67"><call pos:start="61:44" pos:end="61:53"><name pos:start="61:44" pos:end="61:47">atoi</name><argument_list pos:start="61:48" pos:end="61:53">(<argument pos:start="61:49" pos:end="61:52"><expr pos:start="61:49" pos:end="61:52"><name pos:start="61:49" pos:end="61:52">port</name></expr></argument>)</argument_list></call> <operator pos:start="61:55" pos:end="61:55">+</operator> <name pos:start="61:57" pos:end="61:67">port_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:66"><expr pos:start="63:5" pos:end="63:65"><name pos:start="63:5" pos:end="63:6">rc</name> <operator pos:start="63:8" pos:end="63:8">=</operator> <call pos:start="63:10" pos:end="63:65"><name pos:start="63:10" pos:end="63:20">getaddrinfo</name><argument_list pos:start="63:21" pos:end="63:65">(<argument pos:start="63:22" pos:end="63:47"><expr pos:start="63:22" pos:end="63:47"><ternary pos:start="63:22" pos:end="63:47"><condition pos:start="63:22" pos:end="63:35"><expr pos:start="63:22" pos:end="63:33"><call pos:start="63:22" pos:end="63:33"><name pos:start="63:22" pos:end="63:27">strlen</name><argument_list pos:start="63:28" pos:end="63:33">(<argument pos:start="63:29" pos:end="63:32"><expr pos:start="63:29" pos:end="63:32"><name pos:start="63:29" pos:end="63:32">addr</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="63:37" pos:end="63:40"> <expr pos:start="63:37" pos:end="63:40"><name pos:start="63:37" pos:end="63:40">addr</name></expr> </then><else pos:start="63:42" pos:end="63:47">: <expr pos:start="63:44" pos:end="63:47"><name pos:start="63:44" pos:end="63:47">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="63:50" pos:end="63:53"><expr pos:start="63:50" pos:end="63:53"><name pos:start="63:50" pos:end="63:53">port</name></expr></argument>, <argument pos:start="63:56" pos:end="63:58"><expr pos:start="63:56" pos:end="63:58"><operator pos:start="63:56" pos:end="63:56">&amp;</operator><name pos:start="63:57" pos:end="63:58">ai</name></expr></argument>, <argument pos:start="63:61" pos:end="63:64"><expr pos:start="63:61" pos:end="63:64"><operator pos:start="63:61" pos:end="63:61">&amp;</operator><name pos:start="63:62" pos:end="63:64">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:16">(<expr pos:start="65:9" pos:end="65:15"><name pos:start="65:9" pos:end="65:10">rc</name> <operator pos:start="65:12" pos:end="65:13">!=</operator> <literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>)</condition> <block pos:start="65:18" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:18">

        <expr_stmt pos:start="67:9" pos:end="69:34"><expr pos:start="67:9" pos:end="69:33"><call pos:start="67:9" pos:end="69:33"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="69:33">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>,<argument pos:start="67:24" pos:end="67:49"><expr pos:start="67:24" pos:end="67:49"><literal type="string" pos:start="67:24" pos:end="67:49">"getaddrinfo(%s,%s): %s\n"</literal></expr></argument>, <argument pos:start="67:52" pos:end="67:55"><expr pos:start="67:52" pos:end="67:55"><name pos:start="67:52" pos:end="67:55">addr</name></expr></argument>, <argument pos:start="67:58" pos:end="67:61"><expr pos:start="67:58" pos:end="67:61"><name pos:start="67:58" pos:end="67:61">port</name></expr></argument>,

                <argument pos:start="69:17" pos:end="69:32"><expr pos:start="69:17" pos:end="69:32"><call pos:start="69:17" pos:end="69:32"><name pos:start="69:17" pos:end="69:28">gai_strerror</name><argument_list pos:start="69:29" pos:end="69:32">(<argument pos:start="69:30" pos:end="69:31"><expr pos:start="69:30" pos:end="69:31"><name pos:start="69:30" pos:end="69:31">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:18">return <expr pos:start="71:16" pos:end="71:17"><operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:30">/* create socket + bind */</comment>

    <for pos:start="79:5" pos:end="151:5">for <control pos:start="79:9" pos:end="79:44">(<init pos:start="79:10" pos:end="79:17"><expr pos:start="79:10" pos:end="79:16"><name pos:start="79:10" pos:end="79:10">e</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:16">res</name></expr>;</init> <condition pos:start="79:19" pos:end="79:28"><expr pos:start="79:19" pos:end="79:27"><name pos:start="79:19" pos:end="79:19">e</name> <operator pos:start="79:21" pos:end="79:22">!=</operator> <name pos:start="79:24" pos:end="79:27">NULL</name></expr>;</condition> <incr pos:start="79:30" pos:end="79:43"><expr pos:start="79:30" pos:end="79:43"><name pos:start="79:30" pos:end="79:30">e</name> <operator pos:start="79:32" pos:end="79:32">=</operator> <name pos:start="79:34" pos:end="79:43"><name pos:start="79:34" pos:end="79:34">e</name><operator pos:start="79:35" pos:end="79:36">-&gt;</operator><name pos:start="79:37" pos:end="79:43">ai_next</name></name></expr></incr>)</control> <block pos:start="79:46" pos:end="151:5">{<block_content pos:start="81:9" pos:end="149:29">

        <expr_stmt pos:start="81:9" pos:end="85:57"><expr pos:start="81:9" pos:end="85:56"><call pos:start="81:9" pos:end="85:56"><name pos:start="81:9" pos:end="81:19">getnameinfo</name><argument_list pos:start="81:20" pos:end="85:56">(<argument pos:start="81:21" pos:end="81:48"><expr pos:start="81:21" pos:end="81:48"><operator pos:start="81:21" pos:end="81:21">(</operator>struct <name pos:start="81:29" pos:end="81:36">sockaddr</name><operator pos:start="81:37" pos:end="81:37">*</operator><operator pos:start="81:38" pos:end="81:38">)</operator><name pos:start="81:39" pos:end="81:48"><name pos:start="81:39" pos:end="81:39">e</name><operator pos:start="81:40" pos:end="81:41">-&gt;</operator><name pos:start="81:42" pos:end="81:48">ai_addr</name></name></expr></argument>,<argument pos:start="81:50" pos:end="81:62"><expr pos:start="81:50" pos:end="81:62"><name pos:start="81:50" pos:end="81:62"><name pos:start="81:50" pos:end="81:50">e</name><operator pos:start="81:51" pos:end="81:52">-&gt;</operator><name pos:start="81:53" pos:end="81:62">ai_addrlen</name></name></expr></argument>,

		        <argument pos:start="83:25" pos:end="83:29"><expr pos:start="83:25" pos:end="83:29"><name pos:start="83:25" pos:end="83:29">uaddr</name></expr></argument>,<argument pos:start="83:31" pos:end="83:46"><expr pos:start="83:31" pos:end="83:46"><name pos:start="83:31" pos:end="83:46">INET6_ADDRSTRLEN</name></expr></argument>,<argument pos:start="83:48" pos:end="83:52"><expr pos:start="83:48" pos:end="83:52"><name pos:start="83:48" pos:end="83:52">uport</name></expr></argument>,<argument pos:start="83:54" pos:end="83:55"><expr pos:start="83:54" pos:end="83:55"><literal type="number" pos:start="83:54" pos:end="83:55">32</literal></expr></argument>,

		        <argument pos:start="85:25" pos:end="85:55"><expr pos:start="85:25" pos:end="85:55"><name pos:start="85:25" pos:end="85:38">NI_NUMERICHOST</name> <operator pos:start="85:40" pos:end="85:40">|</operator> <name pos:start="85:42" pos:end="85:55">NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:76"><expr pos:start="87:9" pos:end="87:75"><name pos:start="87:9" pos:end="87:15">slisten</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <call pos:start="87:19" pos:end="87:75"><name pos:start="87:19" pos:end="87:29">qemu_socket</name><argument_list pos:start="87:30" pos:end="87:75">(<argument pos:start="87:31" pos:end="87:42"><expr pos:start="87:31" pos:end="87:42"><name pos:start="87:31" pos:end="87:42"><name pos:start="87:31" pos:end="87:31">e</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:42">ai_family</name></name></expr></argument>, <argument pos:start="87:45" pos:end="87:58"><expr pos:start="87:45" pos:end="87:58"><name pos:start="87:45" pos:end="87:58"><name pos:start="87:45" pos:end="87:45">e</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:58">ai_socktype</name></name></expr></argument>, <argument pos:start="87:61" pos:end="87:74"><expr pos:start="87:61" pos:end="87:74"><name pos:start="87:61" pos:end="87:74"><name pos:start="87:61" pos:end="87:61">e</name><operator pos:start="87:62" pos:end="87:63">-&gt;</operator><name pos:start="87:64" pos:end="87:74">ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="97:9"><if pos:start="89:9" pos:end="97:9">if <condition pos:start="89:12" pos:end="89:24">(<expr pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:19">slisten</name> <operator pos:start="89:21" pos:end="89:21">&lt;</operator> <literal type="number" pos:start="89:23" pos:end="89:23">0</literal></expr>)</condition> <block pos:start="89:26" pos:end="97:9">{<block_content pos:start="91:13" pos:end="95:21">

            <expr_stmt pos:start="91:13" pos:end="93:67"><expr pos:start="91:13" pos:end="93:66"><call pos:start="91:13" pos:end="93:66"><name pos:start="91:13" pos:end="91:19">fprintf</name><argument_list pos:start="91:20" pos:end="93:66">(<argument pos:start="91:21" pos:end="91:26"><expr pos:start="91:21" pos:end="91:26"><name pos:start="91:21" pos:end="91:26">stderr</name></expr></argument>,<argument pos:start="91:28" pos:end="91:49"><expr pos:start="91:28" pos:end="91:49"><literal type="string" pos:start="91:28" pos:end="91:49">"%s: socket(%s): %s\n"</literal></expr></argument>, <argument pos:start="91:52" pos:end="91:63"><expr pos:start="91:52" pos:end="91:63"><name pos:start="91:52" pos:end="91:63">__FUNCTION__</name></expr></argument>,

                    <argument pos:start="93:21" pos:end="93:48"><expr pos:start="93:21" pos:end="93:48"><call pos:start="93:21" pos:end="93:48"><name pos:start="93:21" pos:end="93:34">inet_strfamily</name><argument_list pos:start="93:35" pos:end="93:48">(<argument pos:start="93:36" pos:end="93:47"><expr pos:start="93:36" pos:end="93:47"><name pos:start="93:36" pos:end="93:47"><name pos:start="93:36" pos:end="93:36">e</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:47">ai_family</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:51" pos:end="93:65"><expr pos:start="93:51" pos:end="93:65"><call pos:start="93:51" pos:end="93:65"><name pos:start="93:51" pos:end="93:58">strerror</name><argument_list pos:start="93:59" pos:end="93:65">(<argument pos:start="93:60" pos:end="93:64"><expr pos:start="93:60" pos:end="93:64"><name pos:start="93:60" pos:end="93:64">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="95:13" pos:end="95:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="101:9" pos:end="104:0"><expr pos:start="101:9" pos:end="101:73"><call pos:start="101:9" pos:end="101:73"><name pos:start="101:9" pos:end="101:18">setsockopt</name><argument_list pos:start="101:19" pos:end="101:73">(<argument pos:start="101:20" pos:end="101:26"><expr pos:start="101:20" pos:end="101:26"><name pos:start="101:20" pos:end="101:26">slisten</name></expr></argument>,<argument pos:start="101:28" pos:end="101:37"><expr pos:start="101:28" pos:end="101:37"><name pos:start="101:28" pos:end="101:37">SOL_SOCKET</name></expr></argument>,<argument pos:start="101:39" pos:end="101:50"><expr pos:start="101:39" pos:end="101:50"><name pos:start="101:39" pos:end="101:50">SO_REUSEADDR</name></expr></argument>,<argument pos:start="101:52" pos:end="101:61"><expr pos:start="101:52" pos:end="101:61"><operator pos:start="101:52" pos:end="101:52">(</operator><name pos:start="101:53" pos:end="101:56">void</name><operator pos:start="101:57" pos:end="101:57">*</operator><operator pos:start="101:58" pos:end="101:58">)</operator><operator pos:start="101:59" pos:end="101:59">&amp;</operator><name pos:start="101:60" pos:end="101:61">on</name></expr></argument>,<argument pos:start="101:63" pos:end="101:72"><expr pos:start="101:63" pos:end="101:72"><sizeof pos:start="101:63" pos:end="101:72">sizeof<argument_list pos:start="101:69" pos:end="101:72">(<argument pos:start="101:70" pos:end="101:71"><expr pos:start="101:70" pos:end="101:71"><name pos:start="101:70" pos:end="101:71">on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="103:1" pos:end="103:18">#<cpp:directive pos:start="103:2" pos:end="103:6">ifdef</cpp:directive> <name pos:start="103:8" pos:end="103:18">IPV6_V6ONLY</name></cpp:ifdef>

        <if_stmt pos:start="105:9" pos:end="116:0"><if pos:start="105:9" pos:end="116:0">if <condition pos:start="105:12" pos:end="105:37">(<expr pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:13">e</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:24">ai_family</name></name> <operator pos:start="105:26" pos:end="105:27">==</operator> <name pos:start="105:29" pos:end="105:36">PF_INET6</name></expr>)</condition> <block pos:start="105:39" pos:end="116:0">{<block_content pos:start="109:13" pos:end="111:29">

            <comment type="block" pos:start="107:13" pos:end="107:46">/* listen on both ipv4 and ipv6 */</comment>

            <expr_stmt pos:start="109:13" pos:end="111:29"><expr pos:start="109:13" pos:end="111:28"><call pos:start="109:13" pos:end="111:28"><name pos:start="109:13" pos:end="109:22">setsockopt</name><argument_list pos:start="109:23" pos:end="111:28">(<argument pos:start="109:24" pos:end="109:30"><expr pos:start="109:24" pos:end="109:30"><name pos:start="109:24" pos:end="109:30">slisten</name></expr></argument>,<argument pos:start="109:32" pos:end="109:43"><expr pos:start="109:32" pos:end="109:43"><name pos:start="109:32" pos:end="109:43">IPPROTO_IPV6</name></expr></argument>,<argument pos:start="109:45" pos:end="109:55"><expr pos:start="109:45" pos:end="109:55"><name pos:start="109:45" pos:end="109:55">IPV6_V6ONLY</name></expr></argument>,<argument pos:start="109:57" pos:end="109:67"><expr pos:start="109:57" pos:end="109:67"><operator pos:start="109:57" pos:end="109:57">(</operator><name pos:start="109:58" pos:end="109:61">void</name><operator pos:start="109:62" pos:end="109:62">*</operator><operator pos:start="109:63" pos:end="109:63">)</operator><operator pos:start="109:64" pos:end="109:64">&amp;</operator><name pos:start="109:65" pos:end="109:67">off</name></expr></argument>,

                <argument pos:start="111:17" pos:end="111:27"><expr pos:start="111:17" pos:end="111:27"><sizeof pos:start="111:17" pos:end="111:27">sizeof<argument_list pos:start="111:23" pos:end="111:27">(<argument pos:start="111:24" pos:end="111:26"><expr pos:start="111:24" pos:end="111:26"><name pos:start="111:24" pos:end="111:26">off</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>



        <for pos:start="119:9" pos:end="147:9">for <control pos:start="119:13" pos:end="119:16">(<init pos:start="119:14" pos:end="119:14">;</init><condition pos:start="119:15" pos:end="119:15">;</condition><incr/>)</control> <block pos:start="119:18" pos:end="147:9">{<block_content pos:start="121:13" pos:end="145:18">

            <if_stmt pos:start="121:13" pos:end="125:13"><if pos:start="121:13" pos:end="125:13">if <condition pos:start="121:16" pos:end="121:62">(<expr pos:start="121:17" pos:end="121:61"><call pos:start="121:17" pos:end="121:56"><name pos:start="121:17" pos:end="121:20">bind</name><argument_list pos:start="121:21" pos:end="121:56">(<argument pos:start="121:22" pos:end="121:28"><expr pos:start="121:22" pos:end="121:28"><name pos:start="121:22" pos:end="121:28">slisten</name></expr></argument>, <argument pos:start="121:31" pos:end="121:40"><expr pos:start="121:31" pos:end="121:40"><name pos:start="121:31" pos:end="121:40"><name pos:start="121:31" pos:end="121:31">e</name><operator pos:start="121:32" pos:end="121:33">-&gt;</operator><name pos:start="121:34" pos:end="121:40">ai_addr</name></name></expr></argument>, <argument pos:start="121:43" pos:end="121:55"><expr pos:start="121:43" pos:end="121:55"><name pos:start="121:43" pos:end="121:55"><name pos:start="121:43" pos:end="121:43">e</name><operator pos:start="121:44" pos:end="121:45">-&gt;</operator><name pos:start="121:46" pos:end="121:55">ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator pos:start="121:58" pos:end="121:59">==</operator> <literal type="number" pos:start="121:61" pos:end="121:61">0</literal></expr>)</condition> <block pos:start="121:64" pos:end="125:13">{<block_content pos:start="123:17" pos:end="123:28">

                <goto pos:start="123:17" pos:end="123:28">goto <name pos:start="123:22" pos:end="123:27">listen</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:67"><expr pos:start="127:13" pos:end="127:66"><name pos:start="127:13" pos:end="127:20">try_next</name> <operator pos:start="127:22" pos:end="127:22">=</operator> <name pos:start="127:24" pos:end="127:25">to</name> <operator pos:start="127:27" pos:end="127:28">&amp;&amp;</operator> <operator pos:start="127:30" pos:end="127:30">(</operator><call pos:start="127:31" pos:end="127:45"><name pos:start="127:31" pos:end="127:42">inet_getport</name><argument_list pos:start="127:43" pos:end="127:45">(<argument pos:start="127:44" pos:end="127:44"><expr pos:start="127:44" pos:end="127:44"><name pos:start="127:44" pos:end="127:44">e</name></expr></argument>)</argument_list></call> <operator pos:start="127:47" pos:end="127:48">&lt;=</operator> <name pos:start="127:50" pos:end="127:51">to</name> <operator pos:start="127:53" pos:end="127:53">+</operator> <name pos:start="127:55" pos:end="127:65">port_offset</name><operator pos:start="127:66" pos:end="127:66">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="135:41"><if pos:start="129:13" pos:end="135:41">if <condition pos:start="129:16" pos:end="129:26">(<expr pos:start="129:17" pos:end="129:25"><operator pos:start="129:17" pos:end="129:17">!</operator><name pos:start="129:18" pos:end="129:25">try_next</name></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="135:41"><block_content pos:start="131:17" pos:end="135:41">

                <expr_stmt pos:start="131:17" pos:end="135:41"><expr pos:start="131:17" pos:end="135:40"><call pos:start="131:17" pos:end="135:40"><name pos:start="131:17" pos:end="131:23">fprintf</name><argument_list pos:start="131:24" pos:end="135:40">(<argument pos:start="131:25" pos:end="131:30"><expr pos:start="131:25" pos:end="131:30"><name pos:start="131:25" pos:end="131:30">stderr</name></expr></argument>,<argument pos:start="131:32" pos:end="131:57"><expr pos:start="131:32" pos:end="131:57"><literal type="string" pos:start="131:32" pos:end="131:57">"%s: bind(%s,%s,%d): %s\n"</literal></expr></argument>, <argument pos:start="131:60" pos:end="131:71"><expr pos:start="131:60" pos:end="131:71"><name pos:start="131:60" pos:end="131:71">__FUNCTION__</name></expr></argument>,

                        <argument pos:start="133:25" pos:end="133:52"><expr pos:start="133:25" pos:end="133:52"><call pos:start="133:25" pos:end="133:52"><name pos:start="133:25" pos:end="133:38">inet_strfamily</name><argument_list pos:start="133:39" pos:end="133:52">(<argument pos:start="133:40" pos:end="133:51"><expr pos:start="133:40" pos:end="133:51"><name pos:start="133:40" pos:end="133:51"><name pos:start="133:40" pos:end="133:40">e</name><operator pos:start="133:41" pos:end="133:42">-&gt;</operator><name pos:start="133:43" pos:end="133:51">ai_family</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="133:55" pos:end="133:59"><expr pos:start="133:55" pos:end="133:59"><name pos:start="133:55" pos:end="133:59">uaddr</name></expr></argument>, <argument pos:start="133:62" pos:end="133:76"><expr pos:start="133:62" pos:end="133:76"><call pos:start="133:62" pos:end="133:76"><name pos:start="133:62" pos:end="133:73">inet_getport</name><argument_list pos:start="133:74" pos:end="133:76">(<argument pos:start="133:75" pos:end="133:75"><expr pos:start="133:75" pos:end="133:75"><name pos:start="133:75" pos:end="133:75">e</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="135:25" pos:end="135:39"><expr pos:start="135:25" pos:end="135:39"><call pos:start="135:25" pos:end="135:39"><name pos:start="135:25" pos:end="135:32">strerror</name><argument_list pos:start="135:33" pos:end="135:39">(<argument pos:start="135:34" pos:end="135:38"><expr pos:start="135:34" pos:end="135:38"><name pos:start="135:34" pos:end="135:38">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="137:13" pos:end="143:13"><if pos:start="137:13" pos:end="143:13">if <condition pos:start="137:16" pos:end="137:25">(<expr pos:start="137:17" pos:end="137:24"><name pos:start="137:17" pos:end="137:24">try_next</name></expr>)</condition> <block pos:start="137:27" pos:end="143:13">{<block_content pos:start="139:17" pos:end="141:25">

                <expr_stmt pos:start="139:17" pos:end="139:53"><expr pos:start="139:17" pos:end="139:52"><call pos:start="139:17" pos:end="139:52"><name pos:start="139:17" pos:end="139:28">inet_setport</name><argument_list pos:start="139:29" pos:end="139:52">(<argument pos:start="139:30" pos:end="139:30"><expr pos:start="139:30" pos:end="139:30"><name pos:start="139:30" pos:end="139:30">e</name></expr></argument>, <argument pos:start="139:33" pos:end="139:51"><expr pos:start="139:33" pos:end="139:51"><call pos:start="139:33" pos:end="139:47"><name pos:start="139:33" pos:end="139:44">inet_getport</name><argument_list pos:start="139:45" pos:end="139:47">(<argument pos:start="139:46" pos:end="139:46"><expr pos:start="139:46" pos:end="139:46"><name pos:start="139:46" pos:end="139:46">e</name></expr></argument>)</argument_list></call> <operator pos:start="139:49" pos:end="139:49">+</operator> <literal type="number" pos:start="139:51" pos:end="139:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="141:17" pos:end="141:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        </block_content>}</block></for>

        <expr_stmt pos:start="149:9" pos:end="149:29"><expr pos:start="149:9" pos:end="149:28"><call pos:start="149:9" pos:end="149:28"><name pos:start="149:9" pos:end="149:19">closesocket</name><argument_list pos:start="149:20" pos:end="149:28">(<argument pos:start="149:21" pos:end="149:27"><expr pos:start="149:21" pos:end="149:27"><name pos:start="149:21" pos:end="149:27">slisten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="153:5" pos:end="153:50"><expr pos:start="153:5" pos:end="153:49"><call pos:start="153:5" pos:end="153:49"><name pos:start="153:5" pos:end="153:11">fprintf</name><argument_list pos:start="153:12" pos:end="153:49">(<argument pos:start="153:13" pos:end="153:18"><expr pos:start="153:13" pos:end="153:18"><name pos:start="153:13" pos:end="153:18">stderr</name></expr></argument>, <argument pos:start="153:21" pos:end="153:34"><expr pos:start="153:21" pos:end="153:34"><literal type="string" pos:start="153:21" pos:end="153:34">"%s: FAILED\n"</literal></expr></argument>, <argument pos:start="153:37" pos:end="153:48"><expr pos:start="153:37" pos:end="153:48"><name pos:start="153:37" pos:end="153:48">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:22"><expr pos:start="155:5" pos:end="155:21"><call pos:start="155:5" pos:end="155:21"><name pos:start="155:5" pos:end="155:16">freeaddrinfo</name><argument_list pos:start="155:17" pos:end="155:21">(<argument pos:start="155:18" pos:end="155:20"><expr pos:start="155:18" pos:end="155:20"><name pos:start="155:18" pos:end="155:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="157:5" pos:end="157:14">return <expr pos:start="157:12" pos:end="157:13"><operator pos:start="157:12" pos:end="157:12">-</operator><literal type="number" pos:start="157:13" pos:end="157:13">1</literal></expr>;</return>



<label pos:start="161:1" pos:end="161:7"><name pos:start="161:1" pos:end="161:6">listen</name>:</label>

    <if_stmt pos:start="163:5" pos:end="173:5"><if pos:start="163:5" pos:end="173:5">if <condition pos:start="163:8" pos:end="163:31">(<expr pos:start="163:9" pos:end="163:30"><call pos:start="163:9" pos:end="163:25"><name pos:start="163:9" pos:end="163:14">listen</name><argument_list pos:start="163:15" pos:end="163:25">(<argument pos:start="163:16" pos:end="163:22"><expr pos:start="163:16" pos:end="163:22"><name pos:start="163:16" pos:end="163:22">slisten</name></expr></argument>,<argument pos:start="163:24" pos:end="163:24"><expr pos:start="163:24" pos:end="163:24"><literal type="number" pos:start="163:24" pos:end="163:24">1</literal></expr></argument>)</argument_list></call> <operator pos:start="163:27" pos:end="163:28">!=</operator> <literal type="number" pos:start="163:30" pos:end="163:30">0</literal></expr>)</condition> <block pos:start="163:33" pos:end="173:5">{<block_content pos:start="165:9" pos:end="171:18">

        <expr_stmt pos:start="165:9" pos:end="165:25"><expr pos:start="165:9" pos:end="165:24"><call pos:start="165:9" pos:end="165:24"><name pos:start="165:9" pos:end="165:14">perror</name><argument_list pos:start="165:15" pos:end="165:24">(<argument pos:start="165:16" pos:end="165:23"><expr pos:start="165:16" pos:end="165:23"><literal type="string" pos:start="165:16" pos:end="165:23">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:29"><expr pos:start="167:9" pos:end="167:28"><call pos:start="167:9" pos:end="167:28"><name pos:start="167:9" pos:end="167:19">closesocket</name><argument_list pos:start="167:20" pos:end="167:28">(<argument pos:start="167:21" pos:end="167:27"><expr pos:start="167:21" pos:end="167:27"><name pos:start="167:21" pos:end="167:27">slisten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:26"><expr pos:start="169:9" pos:end="169:25"><call pos:start="169:9" pos:end="169:25"><name pos:start="169:9" pos:end="169:20">freeaddrinfo</name><argument_list pos:start="169:21" pos:end="169:25">(<argument pos:start="169:22" pos:end="169:24"><expr pos:start="169:22" pos:end="169:24"><name pos:start="169:22" pos:end="169:24">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="171:9" pos:end="171:18">return <expr pos:start="171:16" pos:end="171:17"><operator pos:start="171:16" pos:end="171:16">-</operator><literal type="number" pos:start="171:17" pos:end="171:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:72"><expr pos:start="175:5" pos:end="175:71"><call pos:start="175:5" pos:end="175:71"><name pos:start="175:5" pos:end="175:12">snprintf</name><argument_list pos:start="175:13" pos:end="175:71">(<argument pos:start="175:14" pos:end="175:18"><expr pos:start="175:14" pos:end="175:18"><name pos:start="175:14" pos:end="175:18">uport</name></expr></argument>, <argument pos:start="175:21" pos:end="175:33"><expr pos:start="175:21" pos:end="175:33"><sizeof pos:start="175:21" pos:end="175:33">sizeof<argument_list pos:start="175:27" pos:end="175:33">(<argument pos:start="175:28" pos:end="175:32"><expr pos:start="175:28" pos:end="175:32"><name pos:start="175:28" pos:end="175:32">uport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="175:36" pos:end="175:39"><expr pos:start="175:36" pos:end="175:39"><literal type="string" pos:start="175:36" pos:end="175:39">"%d"</literal></expr></argument>, <argument pos:start="175:42" pos:end="175:70"><expr pos:start="175:42" pos:end="175:70"><call pos:start="175:42" pos:end="175:56"><name pos:start="175:42" pos:end="175:53">inet_getport</name><argument_list pos:start="175:54" pos:end="175:56">(<argument pos:start="175:55" pos:end="175:55"><expr pos:start="175:55" pos:end="175:55"><name pos:start="175:55" pos:end="175:55">e</name></expr></argument>)</argument_list></call> <operator pos:start="175:58" pos:end="175:58">-</operator> <name pos:start="175:60" pos:end="175:70">port_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:38"><expr pos:start="177:5" pos:end="177:37"><call pos:start="177:5" pos:end="177:37"><name pos:start="177:5" pos:end="177:16">qemu_opt_set</name><argument_list pos:start="177:17" pos:end="177:37">(<argument pos:start="177:18" pos:end="177:21"><expr pos:start="177:18" pos:end="177:21"><name pos:start="177:18" pos:end="177:21">opts</name></expr></argument>, <argument pos:start="177:24" pos:end="177:29"><expr pos:start="177:24" pos:end="177:29"><literal type="string" pos:start="177:24" pos:end="177:29">"host"</literal></expr></argument>, <argument pos:start="177:32" pos:end="177:36"><expr pos:start="177:32" pos:end="177:36"><name pos:start="177:32" pos:end="177:36">uaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:38"><expr pos:start="179:5" pos:end="179:37"><call pos:start="179:5" pos:end="179:37"><name pos:start="179:5" pos:end="179:16">qemu_opt_set</name><argument_list pos:start="179:17" pos:end="179:37">(<argument pos:start="179:18" pos:end="179:21"><expr pos:start="179:18" pos:end="179:21"><name pos:start="179:18" pos:end="179:21">opts</name></expr></argument>, <argument pos:start="179:24" pos:end="179:29"><expr pos:start="179:24" pos:end="179:29"><literal type="string" pos:start="179:24" pos:end="179:29">"port"</literal></expr></argument>, <argument pos:start="179:32" pos:end="179:36"><expr pos:start="179:32" pos:end="179:36"><name pos:start="179:32" pos:end="179:36">uport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:74"><expr pos:start="181:5" pos:end="181:73"><call pos:start="181:5" pos:end="181:73"><name pos:start="181:5" pos:end="181:16">qemu_opt_set</name><argument_list pos:start="181:17" pos:end="181:73">(<argument pos:start="181:18" pos:end="181:21"><expr pos:start="181:18" pos:end="181:21"><name pos:start="181:18" pos:end="181:21">opts</name></expr></argument>, <argument pos:start="181:24" pos:end="181:29"><expr pos:start="181:24" pos:end="181:29"><literal type="string" pos:start="181:24" pos:end="181:29">"ipv6"</literal></expr></argument>, <argument pos:start="181:32" pos:end="181:72"><expr pos:start="181:32" pos:end="181:72"><ternary pos:start="181:32" pos:end="181:72"><condition pos:start="181:32" pos:end="181:59"><expr pos:start="181:32" pos:end="181:57"><operator pos:start="181:32" pos:end="181:32">(</operator><name pos:start="181:33" pos:end="181:44"><name pos:start="181:33" pos:end="181:33">e</name><operator pos:start="181:34" pos:end="181:35">-&gt;</operator><name pos:start="181:36" pos:end="181:44">ai_family</name></name> <operator pos:start="181:46" pos:end="181:47">==</operator> <name pos:start="181:49" pos:end="181:56">PF_INET6</name><operator pos:start="181:57" pos:end="181:57">)</operator></expr> ?</condition><then pos:start="181:61" pos:end="181:64"> <expr pos:start="181:61" pos:end="181:64"><literal type="string" pos:start="181:61" pos:end="181:64">"on"</literal></expr> </then><else pos:start="181:66" pos:end="181:72">: <expr pos:start="181:68" pos:end="181:72"><literal type="string" pos:start="181:68" pos:end="181:72">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:74"><expr pos:start="183:5" pos:end="183:73"><call pos:start="183:5" pos:end="183:73"><name pos:start="183:5" pos:end="183:16">qemu_opt_set</name><argument_list pos:start="183:17" pos:end="183:73">(<argument pos:start="183:18" pos:end="183:21"><expr pos:start="183:18" pos:end="183:21"><name pos:start="183:18" pos:end="183:21">opts</name></expr></argument>, <argument pos:start="183:24" pos:end="183:29"><expr pos:start="183:24" pos:end="183:29"><literal type="string" pos:start="183:24" pos:end="183:29">"ipv4"</literal></expr></argument>, <argument pos:start="183:32" pos:end="183:72"><expr pos:start="183:32" pos:end="183:72"><ternary pos:start="183:32" pos:end="183:72"><condition pos:start="183:32" pos:end="183:59"><expr pos:start="183:32" pos:end="183:57"><operator pos:start="183:32" pos:end="183:32">(</operator><name pos:start="183:33" pos:end="183:44"><name pos:start="183:33" pos:end="183:33">e</name><operator pos:start="183:34" pos:end="183:35">-&gt;</operator><name pos:start="183:36" pos:end="183:44">ai_family</name></name> <operator pos:start="183:46" pos:end="183:47">!=</operator> <name pos:start="183:49" pos:end="183:56">PF_INET6</name><operator pos:start="183:57" pos:end="183:57">)</operator></expr> ?</condition><then pos:start="183:61" pos:end="183:64"> <expr pos:start="183:61" pos:end="183:64"><literal type="string" pos:start="183:61" pos:end="183:64">"on"</literal></expr> </then><else pos:start="183:66" pos:end="183:72">: <expr pos:start="183:68" pos:end="183:72"><literal type="string" pos:start="183:68" pos:end="183:72">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:22"><expr pos:start="185:5" pos:end="185:21"><call pos:start="185:5" pos:end="185:21"><name pos:start="185:5" pos:end="185:16">freeaddrinfo</name><argument_list pos:start="185:17" pos:end="185:21">(<argument pos:start="185:18" pos:end="185:20"><expr pos:start="185:18" pos:end="185:20"><name pos:start="185:18" pos:end="185:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="187:5" pos:end="187:19">return <expr pos:start="187:12" pos:end="187:18"><name pos:start="187:12" pos:end="187:18">slisten</name></expr>;</return>

</block_content>}</block></function>
</unit>
