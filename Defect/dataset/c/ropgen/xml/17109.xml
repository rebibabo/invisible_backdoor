<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17109.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">arm_gic_common_init</name><parameter_list pos:start="1:31" pos:end="1:49">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:43">SysBusDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:13">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">GICState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:44">= <expr pos:start="5:19" pos:end="5:44"><call pos:start="5:19" pos:end="5:44"><name pos:start="5:19" pos:end="5:29">FROM_SYSBUS</name><argument_list pos:start="5:30" pos:end="5:44">(<argument pos:start="5:31" pos:end="5:38"><expr pos:start="5:31" pos:end="5:38"><name pos:start="5:31" pos:end="5:38">GICState</name></expr></argument>, <argument pos:start="5:41" pos:end="5:43"><expr pos:start="5:41" pos:end="5:43"><name pos:start="5:41" pos:end="5:43">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">num_irq</name> <init pos:start="7:17" pos:end="7:28">= <expr pos:start="7:19" pos:end="7:28"><name pos:start="7:19" pos:end="7:28"><name pos:start="7:19" pos:end="7:19">s</name><operator pos:start="7:20" pos:end="7:21">-&gt;</operator><name pos:start="7:22" pos:end="7:28">num_irq</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:26">(<expr pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:18">num_cpu</name></name> <operator pos:start="11:20" pos:end="11:20">&gt;</operator> <name pos:start="11:22" pos:end="11:25">NCPU</name></expr>)</condition> <block pos:start="11:28" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:35">

        <expr_stmt pos:start="13:9" pos:end="15:35"><expr pos:start="13:9" pos:end="15:34"><call pos:start="13:9" pos:end="15:34"><name pos:start="13:9" pos:end="13:16">hw_error</name><argument_list pos:start="13:17" pos:end="15:34">(<argument pos:start="13:18" pos:end="13:61"><expr pos:start="13:18" pos:end="13:61"><literal type="string" pos:start="13:18" pos:end="13:61">"requested %u CPUs exceeds GIC maximum %d\n"</literal></expr></argument>,

                 <argument pos:start="15:18" pos:end="15:27"><expr pos:start="15:18" pos:end="15:27"><name pos:start="15:18" pos:end="15:27"><name pos:start="15:18" pos:end="15:18">s</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:27">num_cpu</name></name></expr></argument>, <argument pos:start="15:30" pos:end="15:33"><expr pos:start="15:30" pos:end="15:33"><name pos:start="15:30" pos:end="15:33">NCPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:14">num_irq</name></name> <operator pos:start="19:16" pos:end="19:17">+=</operator> <name pos:start="19:19" pos:end="19:30">GIC_BASE_IRQ</name></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:32">(<expr pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:18">num_irq</name></name> <operator pos:start="21:20" pos:end="21:20">&gt;</operator> <name pos:start="21:22" pos:end="21:31">GIC_MAXIRQ</name></expr>)</condition> <block pos:start="21:34" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:38">

        <expr_stmt pos:start="23:9" pos:end="25:38"><expr pos:start="23:9" pos:end="25:37"><call pos:start="23:9" pos:end="25:37"><name pos:start="23:9" pos:end="23:16">hw_error</name><argument_list pos:start="23:17" pos:end="25:37">(<argument pos:start="23:18" pos:end="23:72"><expr pos:start="23:18" pos:end="23:72"><literal type="string" pos:start="23:18" pos:end="23:72">"requested %u interrupt lines exceeds GIC maximum %d\n"</literal></expr></argument>,

                 <argument pos:start="25:18" pos:end="25:24"><expr pos:start="25:18" pos:end="25:24"><name pos:start="25:18" pos:end="25:24">num_irq</name></expr></argument>, <argument pos:start="25:27" pos:end="25:36"><expr pos:start="25:27" pos:end="25:36"><name pos:start="25:27" pos:end="25:36">GIC_MAXIRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="29:5" pos:end="35:7">/* ITLinesNumber is represented as (N / 32) - 1 (see

     * gic_dist_readb) so this is an implementation imposed

     * restriction, not an architectural one:

     */</comment>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:45">(<expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:18">num_irq</name></name> <operator pos:start="37:20" pos:end="37:20">&lt;</operator> <literal type="number" pos:start="37:22" pos:end="37:23">32</literal> <operator pos:start="37:25" pos:end="37:26">||</operator> <operator pos:start="37:28" pos:end="37:28">(</operator><name pos:start="37:29" pos:end="37:38"><name pos:start="37:29" pos:end="37:29">s</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:38">num_irq</name></name> <operator pos:start="37:40" pos:end="37:40">%</operator> <literal type="number" pos:start="37:42" pos:end="37:43">32</literal><operator pos:start="37:44" pos:end="37:44">)</operator></expr>)</condition> <block pos:start="37:47" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:26">

        <expr_stmt pos:start="39:9" pos:end="41:26"><expr pos:start="39:9" pos:end="41:25"><call pos:start="39:9" pos:end="41:25"><name pos:start="39:9" pos:end="39:16">hw_error</name><argument_list pos:start="39:17" pos:end="41:25">(<argument pos:start="39:18" pos:end="39:72"><expr pos:start="39:18" pos:end="39:72"><literal type="string" pos:start="39:18" pos:end="39:72">"%d interrupt lines unsupported: not divisible by 32\n"</literal></expr></argument>,

                 <argument pos:start="41:18" pos:end="41:24"><expr pos:start="41:18" pos:end="41:24"><name pos:start="41:18" pos:end="41:24">num_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:67"><expr pos:start="47:5" pos:end="47:66"><call pos:start="47:5" pos:end="47:66"><name pos:start="47:5" pos:end="47:19">register_savevm</name><argument_list pos:start="47:20" pos:end="47:66">(<argument pos:start="47:21" pos:end="47:24"><expr pos:start="47:21" pos:end="47:24"><name pos:start="47:21" pos:end="47:24">NULL</name></expr></argument>, <argument pos:start="47:27" pos:end="47:35"><expr pos:start="47:27" pos:end="47:35"><literal type="string" pos:start="47:27" pos:end="47:35">"arm_gic"</literal></expr></argument>, <argument pos:start="47:38" pos:end="47:39"><expr pos:start="47:38" pos:end="47:39"><operator pos:start="47:38" pos:end="47:38">-</operator><literal type="number" pos:start="47:39" pos:end="47:39">1</literal></expr></argument>, <argument pos:start="47:42" pos:end="47:42"><expr pos:start="47:42" pos:end="47:42"><literal type="number" pos:start="47:42" pos:end="47:42">3</literal></expr></argument>, <argument pos:start="47:45" pos:end="47:52"><expr pos:start="47:45" pos:end="47:52"><name pos:start="47:45" pos:end="47:52">gic_save</name></expr></argument>, <argument pos:start="47:55" pos:end="47:62"><expr pos:start="47:55" pos:end="47:62"><name pos:start="47:55" pos:end="47:62">gic_load</name></expr></argument>, <argument pos:start="47:65" pos:end="47:65"><expr pos:start="47:65" pos:end="47:65"><name pos:start="47:65" pos:end="47:65">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="49:5" pos:end="49:13">return <expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
