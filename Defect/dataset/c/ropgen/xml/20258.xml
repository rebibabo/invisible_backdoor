<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20258.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">usb_xhci_realize</name><parameter_list pos:start="1:29" pos:end="1:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:35">struct</name> <name pos:start="1:37" pos:end="1:45">PCIDevice</name></name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">dev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:57">Error</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="195:1">{<block_content pos:start="5:5" pos:end="193:5">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:14">err</name> <init pos:start="7:16" pos:end="7:21">= <expr pos:start="7:18" pos:end="7:21"><name pos:start="7:18" pos:end="7:21">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">XHCIState</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:19">xhci</name> <init pos:start="11:21" pos:end="11:31">= <expr pos:start="11:23" pos:end="11:31"><call pos:start="11:23" pos:end="11:31"><name pos:start="11:23" pos:end="11:26">XHCI</name><argument_list pos:start="11:27" pos:end="11:31">(<argument pos:start="11:28" pos:end="11:30"><expr pos:start="11:28" pos:end="11:30"><name pos:start="11:28" pos:end="11:30">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:7">dev</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:15">config</name><index pos:start="15:16" pos:end="15:31">[<expr pos:start="15:17" pos:end="15:30"><name pos:start="15:17" pos:end="15:30">PCI_CLASS_PROG</name></expr>]</index></name> <operator pos:start="15:33" pos:end="15:33">=</operator> <literal type="number" pos:start="15:35" pos:end="15:38">0x30</literal></expr>;</expr_stmt>    <comment type="block" pos:start="15:44" pos:end="15:53">/* xHCI */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:42"><expr pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:7">dev</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:15">config</name><index pos:start="17:16" pos:end="17:34">[<expr pos:start="17:17" pos:end="17:33"><name pos:start="17:17" pos:end="17:33">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="17:36" pos:end="17:36">=</operator> <literal type="number" pos:start="17:38" pos:end="17:41">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="17:44" pos:end="17:64">/* interrupt pin 1 */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:44"><expr pos:start="19:5" pos:end="19:43"><name pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:7">dev</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:15">config</name><index pos:start="19:16" pos:end="19:36">[<expr pos:start="19:17" pos:end="19:35"><name pos:start="19:17" pos:end="19:35">PCI_CACHE_LINE_SIZE</name></expr>]</index></name> <operator pos:start="19:38" pos:end="19:38">=</operator> <literal type="number" pos:start="19:40" pos:end="19:43">0x10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:7">dev</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:15">config</name><index pos:start="21:16" pos:end="21:21">[<expr pos:start="21:17" pos:end="21:20"><literal type="number" pos:start="21:17" pos:end="21:20">0x60</literal></expr>]</index></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <literal type="number" pos:start="21:25" pos:end="21:28">0x30</literal></expr>;</expr_stmt> <comment type="block" pos:start="21:31" pos:end="21:50">/* release number */</comment>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:69">(<expr pos:start="25:9" pos:end="25:68"><call pos:start="25:9" pos:end="25:63"><name pos:start="25:9" pos:end="25:14">strcmp</name><argument_list pos:start="25:15" pos:end="25:63">(<argument pos:start="25:16" pos:end="25:47"><expr pos:start="25:16" pos:end="25:47"><call pos:start="25:16" pos:end="25:47"><name pos:start="25:16" pos:end="25:34">object_get_typename</name><argument_list pos:start="25:35" pos:end="25:47">(<argument pos:start="25:36" pos:end="25:46"><expr pos:start="25:36" pos:end="25:46"><call pos:start="25:36" pos:end="25:46"><name pos:start="25:36" pos:end="25:41">OBJECT</name><argument_list pos:start="25:42" pos:end="25:46">(<argument pos:start="25:43" pos:end="25:45"><expr pos:start="25:43" pos:end="25:45"><name pos:start="25:43" pos:end="25:45">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:50" pos:end="25:62"><expr pos:start="25:50" pos:end="25:62"><name pos:start="25:50" pos:end="25:62">TYPE_NEC_XHCI</name></expr></argument>)</argument_list></call> <operator pos:start="25:65" pos:end="25:66">==</operator> <literal type="number" pos:start="25:68" pos:end="25:68">0</literal></expr>)</condition> <block pos:start="25:71" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:32">

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:12">xhci</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:24">nec_quirks</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <name pos:start="27:28" pos:end="27:31">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:34">(<expr pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:12">xhci</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:22">numintrs</name></name> <operator pos:start="31:24" pos:end="31:24">&gt;</operator> <name pos:start="31:26" pos:end="31:33">MAXINTRS</name></expr>)</condition> <block pos:start="31:36" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:34">

        <expr_stmt pos:start="33:9" pos:end="33:34"><expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:12">xhci</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:22">numintrs</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:33">MAXINTRS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <while pos:start="37:5" pos:end="41:5">while <condition pos:start="37:11" pos:end="37:49">(<expr pos:start="37:12" pos:end="37:48"><name pos:start="37:12" pos:end="37:25"><name pos:start="37:12" pos:end="37:15">xhci</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:25">numintrs</name></name> <operator pos:start="37:27" pos:end="37:27">&amp;</operator> <operator pos:start="37:29" pos:end="37:29">(</operator><name pos:start="37:30" pos:end="37:43"><name pos:start="37:30" pos:end="37:33">xhci</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:43">numintrs</name></name> <operator pos:start="37:45" pos:end="37:45">-</operator> <literal type="number" pos:start="37:47" pos:end="37:47">1</literal><operator pos:start="37:48" pos:end="37:48">)</operator></expr>)</condition> <block pos:start="37:51" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:25">   <comment type="block" pos:start="37:55" pos:end="37:72">/* ! power of 2 */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:25"><expr pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:12">xhci</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:22">numintrs</name></name><operator pos:start="39:23" pos:end="39:24">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:27">(<expr pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:12">xhci</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:22">numintrs</name></name> <operator pos:start="43:24" pos:end="43:24">&lt;</operator> <literal type="number" pos:start="43:26" pos:end="43:26">1</literal></expr>)</condition> <block pos:start="43:29" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:27">

        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:12">xhci</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:22">numintrs</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <literal type="number" pos:start="45:26" pos:end="45:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:34">(<expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:12">xhci</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:22">numslots</name></name> <operator pos:start="49:24" pos:end="49:24">&gt;</operator> <name pos:start="49:26" pos:end="49:33">MAXSLOTS</name></expr>)</condition> <block pos:start="49:36" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:34">

        <expr_stmt pos:start="51:9" pos:end="51:34"><expr pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:12">xhci</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:22">numslots</name></name> <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:33">MAXSLOTS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:27">(<expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:12">xhci</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:22">numslots</name></name> <operator pos:start="55:24" pos:end="55:24">&lt;</operator> <literal type="number" pos:start="55:26" pos:end="55:26">1</literal></expr>)</condition> <block pos:start="55:29" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:27">

        <expr_stmt pos:start="57:9" pos:end="57:27"><expr pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:12">xhci</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:22">numslots</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <literal type="number" pos:start="57:26" pos:end="57:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:54">(<expr pos:start="61:9" pos:end="61:53"><call pos:start="61:9" pos:end="61:53"><name pos:start="61:9" pos:end="61:21">xhci_get_flag</name><argument_list pos:start="61:22" pos:end="61:53">(<argument pos:start="61:23" pos:end="61:26"><expr pos:start="61:23" pos:end="61:26"><name pos:start="61:23" pos:end="61:26">xhci</name></expr></argument>, <argument pos:start="61:29" pos:end="61:52"><expr pos:start="61:29" pos:end="61:52"><name pos:start="61:29" pos:end="61:52">XHCI_FLAG_ENABLE_STREAMS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:56" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:36">

        <expr_stmt pos:start="63:9" pos:end="63:36"><expr pos:start="63:9" pos:end="63:35"><name pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:12">xhci</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:31">max_pstreams_mask</name></name> <operator pos:start="63:33" pos:end="63:33">=</operator> <literal type="number" pos:start="63:35" pos:end="63:35">7</literal></expr>;</expr_stmt> <comment type="block" pos:start="63:38" pos:end="63:65">/* == 256 primary streams */</comment>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="69:5">else <block pos:start="65:12" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:36">

        <expr_stmt pos:start="67:9" pos:end="67:36"><expr pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:12">xhci</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:31">max_pstreams_mask</name></name> <operator pos:start="67:33" pos:end="67:33">=</operator> <literal type="number" pos:start="67:35" pos:end="67:35">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="73:5" pos:end="103:5"><if pos:start="73:5" pos:end="103:5">if <condition pos:start="73:8" pos:end="73:37">(<expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:12">xhci</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:17">msi</name></name> <operator pos:start="73:19" pos:end="73:20">!=</operator> <name pos:start="73:22" pos:end="73:36">ON_OFF_AUTO_OFF</name></expr>)</condition> <block pos:start="73:39" pos:end="103:5">{<block_content pos:start="75:9" pos:end="101:24">

        <expr_stmt pos:start="75:9" pos:end="75:69"><expr pos:start="75:9" pos:end="75:68"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:68"><name pos:start="75:15" pos:end="75:22">msi_init</name><argument_list pos:start="75:23" pos:end="75:68">(<argument pos:start="75:24" pos:end="75:26"><expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:26">dev</name></expr></argument>, <argument pos:start="75:29" pos:end="75:32"><expr pos:start="75:29" pos:end="75:32"><literal type="number" pos:start="75:29" pos:end="75:32">0x70</literal></expr></argument>, <argument pos:start="75:35" pos:end="75:48"><expr pos:start="75:35" pos:end="75:48"><name pos:start="75:35" pos:end="75:48"><name pos:start="75:35" pos:end="75:38">xhci</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:48">numintrs</name></name></expr></argument>, <argument pos:start="75:51" pos:end="75:54"><expr pos:start="75:51" pos:end="75:54"><name pos:start="75:51" pos:end="75:54">true</name></expr></argument>, <argument pos:start="75:57" pos:end="75:61"><expr pos:start="75:57" pos:end="75:61"><name pos:start="75:57" pos:end="75:61">false</name></expr></argument>, <argument pos:start="75:64" pos:end="75:67"><expr pos:start="75:64" pos:end="75:67"><operator pos:start="75:64" pos:end="75:64">&amp;</operator><name pos:start="75:65" pos:end="75:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="77:9" pos:end="79:36">/* Any error other than -ENOTSUP(board's MSI support is broken)

         * is a programming error */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:40"><expr pos:start="81:9" pos:end="81:39"><call pos:start="81:9" pos:end="81:39"><name pos:start="81:9" pos:end="81:14">assert</name><argument_list pos:start="81:15" pos:end="81:39">(<argument pos:start="81:16" pos:end="81:38"><expr pos:start="81:16" pos:end="81:38"><operator pos:start="81:16" pos:end="81:16">!</operator><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:22">||</operator> <name pos:start="81:24" pos:end="81:26">ret</name> <operator pos:start="81:28" pos:end="81:29">==</operator> <operator pos:start="81:31" pos:end="81:31">-</operator><name pos:start="81:32" pos:end="81:38">ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="95:9"><if pos:start="83:9" pos:end="95:9">if <condition pos:start="83:12" pos:end="83:47">(<expr pos:start="83:13" pos:end="83:46"><name pos:start="83:13" pos:end="83:15">ret</name> <operator pos:start="83:17" pos:end="83:18">&amp;&amp;</operator> <name pos:start="83:20" pos:end="83:28"><name pos:start="83:20" pos:end="83:23">xhci</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:28">msi</name></name> <operator pos:start="83:30" pos:end="83:31">==</operator> <name pos:start="83:33" pos:end="83:46">ON_OFF_AUTO_ON</name></expr>)</condition> <block pos:start="83:49" pos:end="95:9">{<block_content pos:start="87:13" pos:end="93:19">

            <comment type="block" pos:start="85:13" pos:end="85:68">/* Can't satisfy user's explicit msi=on request, fail */</comment>

            <expr_stmt pos:start="87:13" pos:end="89:57"><expr pos:start="87:13" pos:end="89:56"><call pos:start="87:13" pos:end="89:56"><name pos:start="87:13" pos:end="87:29">error_append_hint</name><argument_list pos:start="87:30" pos:end="89:56">(<argument pos:start="87:31" pos:end="87:34"><expr pos:start="87:31" pos:end="87:34"><operator pos:start="87:31" pos:end="87:31">&amp;</operator><name pos:start="87:32" pos:end="87:34">err</name></expr></argument>, <argument pos:start="87:37" pos:end="89:55"><expr pos:start="87:37" pos:end="89:55"><literal type="string" pos:start="87:37" pos:end="87:76">"You have to use msi=auto (default) or "</literal>

                    <literal type="string" pos:start="89:21" pos:end="89:55">"msi=off with this machine type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:39"><expr pos:start="91:13" pos:end="91:38"><call pos:start="91:13" pos:end="91:38"><name pos:start="91:13" pos:end="91:27">error_propagate</name><argument_list pos:start="91:28" pos:end="91:38">(<argument pos:start="91:29" pos:end="91:32"><expr pos:start="91:29" pos:end="91:32"><name pos:start="91:29" pos:end="91:32">errp</name></expr></argument>, <argument pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><name pos:start="91:35" pos:end="91:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:54"><expr pos:start="97:9" pos:end="97:53"><call pos:start="97:9" pos:end="97:53"><name pos:start="97:9" pos:end="97:14">assert</name><argument_list pos:start="97:15" pos:end="97:53">(<argument pos:start="97:16" pos:end="97:52"><expr pos:start="97:16" pos:end="97:52"><operator pos:start="97:16" pos:end="97:16">!</operator><name pos:start="97:17" pos:end="97:19">err</name> <operator pos:start="97:21" pos:end="97:22">||</operator> <name pos:start="97:24" pos:end="97:32"><name pos:start="97:24" pos:end="97:27">xhci</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:32">msi</name></name> <operator pos:start="97:34" pos:end="97:35">==</operator> <name pos:start="97:37" pos:end="97:52">ON_OFF_AUTO_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="99:9" pos:end="99:61">/* With msi=auto, we fall back to MSI off silently */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:24"><expr pos:start="101:9" pos:end="101:23"><call pos:start="101:9" pos:end="101:23"><name pos:start="101:9" pos:end="101:18">error_free</name><argument_list pos:start="101:19" pos:end="101:23">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:24"><expr pos:start="107:5" pos:end="107:23"><call pos:start="107:5" pos:end="107:23"><name pos:start="107:5" pos:end="107:17">usb_xhci_init</name><argument_list pos:start="107:18" pos:end="107:23">(<argument pos:start="107:19" pos:end="107:22"><expr pos:start="107:19" pos:end="107:22"><name pos:start="107:19" pos:end="107:22">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:83"><expr pos:start="109:5" pos:end="109:82"><name pos:start="109:5" pos:end="109:22"><name pos:start="109:5" pos:end="109:8">xhci</name><operator pos:start="109:9" pos:end="109:10">-&gt;</operator><name pos:start="109:11" pos:end="109:22">mfwrap_timer</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <call pos:start="109:26" pos:end="109:82"><name pos:start="109:26" pos:end="109:37">timer_new_ns</name><argument_list pos:start="109:38" pos:end="109:82">(<argument pos:start="109:39" pos:end="109:56"><expr pos:start="109:39" pos:end="109:56"><name pos:start="109:39" pos:end="109:56">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="109:59" pos:end="109:75"><expr pos:start="109:59" pos:end="109:75"><name pos:start="109:59" pos:end="109:75">xhci_mfwrap_timer</name></expr></argument>, <argument pos:start="109:78" pos:end="109:81"><expr pos:start="109:78" pos:end="109:81"><name pos:start="109:78" pos:end="109:81">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:67"><expr pos:start="113:5" pos:end="113:66"><call pos:start="113:5" pos:end="113:66"><name pos:start="113:5" pos:end="113:22">memory_region_init</name><argument_list pos:start="113:23" pos:end="113:66">(<argument pos:start="113:24" pos:end="113:33"><expr pos:start="113:24" pos:end="113:33"><operator pos:start="113:24" pos:end="113:24">&amp;</operator><name pos:start="113:25" pos:end="113:33"><name pos:start="113:25" pos:end="113:28">xhci</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:33">mem</name></name></expr></argument>, <argument pos:start="113:36" pos:end="113:47"><expr pos:start="113:36" pos:end="113:47"><call pos:start="113:36" pos:end="113:47"><name pos:start="113:36" pos:end="113:41">OBJECT</name><argument_list pos:start="113:42" pos:end="113:47">(<argument pos:start="113:43" pos:end="113:46"><expr pos:start="113:43" pos:end="113:46"><name pos:start="113:43" pos:end="113:46">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:50" pos:end="113:55"><expr pos:start="113:50" pos:end="113:55"><literal type="string" pos:start="113:50" pos:end="113:55">"xhci"</literal></expr></argument>, <argument pos:start="113:58" pos:end="113:65"><expr pos:start="113:58" pos:end="113:65"><name pos:start="113:58" pos:end="113:65">LEN_REGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="117:51"><expr pos:start="115:5" pos:end="117:50"><call pos:start="115:5" pos:end="117:50"><name pos:start="115:5" pos:end="115:25">memory_region_init_io</name><argument_list pos:start="115:26" pos:end="117:50">(<argument pos:start="115:27" pos:end="115:40"><expr pos:start="115:27" pos:end="115:40"><operator pos:start="115:27" pos:end="115:27">&amp;</operator><name pos:start="115:28" pos:end="115:40"><name pos:start="115:28" pos:end="115:31">xhci</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:40">mem_cap</name></name></expr></argument>, <argument pos:start="115:43" pos:end="115:54"><expr pos:start="115:43" pos:end="115:54"><call pos:start="115:43" pos:end="115:54"><name pos:start="115:43" pos:end="115:48">OBJECT</name><argument_list pos:start="115:49" pos:end="115:54">(<argument pos:start="115:50" pos:end="115:53"><expr pos:start="115:50" pos:end="115:53"><name pos:start="115:50" pos:end="115:53">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:57" pos:end="115:69"><expr pos:start="115:57" pos:end="115:69"><operator pos:start="115:57" pos:end="115:57">&amp;</operator><name pos:start="115:58" pos:end="115:69">xhci_cap_ops</name></expr></argument>, <argument pos:start="115:72" pos:end="115:75"><expr pos:start="115:72" pos:end="115:75"><name pos:start="115:72" pos:end="115:75">xhci</name></expr></argument>,

                          <argument pos:start="117:27" pos:end="117:40"><expr pos:start="117:27" pos:end="117:40"><literal type="string" pos:start="117:27" pos:end="117:40">"capabilities"</literal></expr></argument>, <argument pos:start="117:43" pos:end="117:49"><expr pos:start="117:43" pos:end="117:49"><name pos:start="117:43" pos:end="117:49">LEN_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="121:48"><expr pos:start="119:5" pos:end="121:47"><call pos:start="119:5" pos:end="121:47"><name pos:start="119:5" pos:end="119:25">memory_region_init_io</name><argument_list pos:start="119:26" pos:end="121:47">(<argument pos:start="119:27" pos:end="119:41"><expr pos:start="119:27" pos:end="119:41"><operator pos:start="119:27" pos:end="119:27">&amp;</operator><name pos:start="119:28" pos:end="119:41"><name pos:start="119:28" pos:end="119:31">xhci</name><operator pos:start="119:32" pos:end="119:33">-&gt;</operator><name pos:start="119:34" pos:end="119:41">mem_oper</name></name></expr></argument>, <argument pos:start="119:44" pos:end="119:55"><expr pos:start="119:44" pos:end="119:55"><call pos:start="119:44" pos:end="119:55"><name pos:start="119:44" pos:end="119:49">OBJECT</name><argument_list pos:start="119:50" pos:end="119:55">(<argument pos:start="119:51" pos:end="119:54"><expr pos:start="119:51" pos:end="119:54"><name pos:start="119:51" pos:end="119:54">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:58" pos:end="119:71"><expr pos:start="119:58" pos:end="119:71"><operator pos:start="119:58" pos:end="119:58">&amp;</operator><name pos:start="119:59" pos:end="119:71">xhci_oper_ops</name></expr></argument>, <argument pos:start="119:74" pos:end="119:77"><expr pos:start="119:74" pos:end="119:77"><name pos:start="119:74" pos:end="119:77">xhci</name></expr></argument>,

                          <argument pos:start="121:27" pos:end="121:39"><expr pos:start="121:27" pos:end="121:39"><literal type="string" pos:start="121:27" pos:end="121:39">"operational"</literal></expr></argument>, <argument pos:start="121:42" pos:end="121:46"><expr pos:start="121:42" pos:end="121:46"><literal type="number" pos:start="121:42" pos:end="121:46">0x400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="125:50"><expr pos:start="123:5" pos:end="125:49"><call pos:start="123:5" pos:end="125:49"><name pos:start="123:5" pos:end="123:25">memory_region_init_io</name><argument_list pos:start="123:26" pos:end="125:49">(<argument pos:start="123:27" pos:end="123:44"><expr pos:start="123:27" pos:end="123:44"><operator pos:start="123:27" pos:end="123:27">&amp;</operator><name pos:start="123:28" pos:end="123:44"><name pos:start="123:28" pos:end="123:31">xhci</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:44">mem_runtime</name></name></expr></argument>, <argument pos:start="123:47" pos:end="123:58"><expr pos:start="123:47" pos:end="123:58"><call pos:start="123:47" pos:end="123:58"><name pos:start="123:47" pos:end="123:52">OBJECT</name><argument_list pos:start="123:53" pos:end="123:58">(<argument pos:start="123:54" pos:end="123:57"><expr pos:start="123:54" pos:end="123:57"><name pos:start="123:54" pos:end="123:57">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:61" pos:end="123:77"><expr pos:start="123:61" pos:end="123:77"><operator pos:start="123:61" pos:end="123:61">&amp;</operator><name pos:start="123:62" pos:end="123:77">xhci_runtime_ops</name></expr></argument>, <argument pos:start="123:80" pos:end="123:83"><expr pos:start="123:80" pos:end="123:83"><name pos:start="123:80" pos:end="123:83">xhci</name></expr></argument>,

                          <argument pos:start="125:27" pos:end="125:35"><expr pos:start="125:27" pos:end="125:35"><literal type="string" pos:start="125:27" pos:end="125:35">"runtime"</literal></expr></argument>, <argument pos:start="125:38" pos:end="125:48"><expr pos:start="125:38" pos:end="125:48"><name pos:start="125:38" pos:end="125:48">LEN_RUNTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="129:52"><expr pos:start="127:5" pos:end="129:51"><call pos:start="127:5" pos:end="129:51"><name pos:start="127:5" pos:end="127:25">memory_region_init_io</name><argument_list pos:start="127:26" pos:end="129:51">(<argument pos:start="127:27" pos:end="127:45"><expr pos:start="127:27" pos:end="127:45"><operator pos:start="127:27" pos:end="127:27">&amp;</operator><name pos:start="127:28" pos:end="127:45"><name pos:start="127:28" pos:end="127:31">xhci</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:45">mem_doorbell</name></name></expr></argument>, <argument pos:start="127:48" pos:end="127:59"><expr pos:start="127:48" pos:end="127:59"><call pos:start="127:48" pos:end="127:59"><name pos:start="127:48" pos:end="127:53">OBJECT</name><argument_list pos:start="127:54" pos:end="127:59">(<argument pos:start="127:55" pos:end="127:58"><expr pos:start="127:55" pos:end="127:58"><name pos:start="127:55" pos:end="127:58">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="127:62" pos:end="127:79"><expr pos:start="127:62" pos:end="127:79"><operator pos:start="127:62" pos:end="127:62">&amp;</operator><name pos:start="127:63" pos:end="127:79">xhci_doorbell_ops</name></expr></argument>, <argument pos:start="127:82" pos:end="127:85"><expr pos:start="127:82" pos:end="127:85"><name pos:start="127:82" pos:end="127:85">xhci</name></expr></argument>,

                          <argument pos:start="129:27" pos:end="129:36"><expr pos:start="129:27" pos:end="129:36"><literal type="string" pos:start="129:27" pos:end="129:36">"doorbell"</literal></expr></argument>, <argument pos:start="129:39" pos:end="129:50"><expr pos:start="129:39" pos:end="129:50"><name pos:start="129:39" pos:end="129:50">LEN_DOORBELL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:74"><expr pos:start="133:5" pos:end="133:73"><call pos:start="133:5" pos:end="133:73"><name pos:start="133:5" pos:end="133:31">memory_region_add_subregion</name><argument_list pos:start="133:32" pos:end="133:73">(<argument pos:start="133:33" pos:end="133:42"><expr pos:start="133:33" pos:end="133:42"><operator pos:start="133:33" pos:end="133:33">&amp;</operator><name pos:start="133:34" pos:end="133:42"><name pos:start="133:34" pos:end="133:37">xhci</name><operator pos:start="133:38" pos:end="133:39">-&gt;</operator><name pos:start="133:40" pos:end="133:42">mem</name></name></expr></argument>, <argument pos:start="133:45" pos:end="133:45"><expr pos:start="133:45" pos:end="133:45"><literal type="number" pos:start="133:45" pos:end="133:45">0</literal></expr></argument>,            <argument pos:start="133:59" pos:end="133:72"><expr pos:start="133:59" pos:end="133:72"><operator pos:start="133:59" pos:end="133:59">&amp;</operator><name pos:start="133:60" pos:end="133:72"><name pos:start="133:60" pos:end="133:63">xhci</name><operator pos:start="133:64" pos:end="133:65">-&gt;</operator><name pos:start="133:66" pos:end="133:72">mem_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:75"><expr pos:start="135:5" pos:end="135:74"><call pos:start="135:5" pos:end="135:74"><name pos:start="135:5" pos:end="135:31">memory_region_add_subregion</name><argument_list pos:start="135:32" pos:end="135:74">(<argument pos:start="135:33" pos:end="135:42"><expr pos:start="135:33" pos:end="135:42"><operator pos:start="135:33" pos:end="135:33">&amp;</operator><name pos:start="135:34" pos:end="135:42"><name pos:start="135:34" pos:end="135:37">xhci</name><operator pos:start="135:38" pos:end="135:39">-&gt;</operator><name pos:start="135:40" pos:end="135:42">mem</name></name></expr></argument>, <argument pos:start="135:45" pos:end="135:52"><expr pos:start="135:45" pos:end="135:52"><name pos:start="135:45" pos:end="135:52">OFF_OPER</name></expr></argument>,     <argument pos:start="135:59" pos:end="135:73"><expr pos:start="135:59" pos:end="135:73"><operator pos:start="135:59" pos:end="135:59">&amp;</operator><name pos:start="135:60" pos:end="135:73"><name pos:start="135:60" pos:end="135:63">xhci</name><operator pos:start="135:64" pos:end="135:65">-&gt;</operator><name pos:start="135:66" pos:end="135:73">mem_oper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:78"><expr pos:start="137:5" pos:end="137:77"><call pos:start="137:5" pos:end="137:77"><name pos:start="137:5" pos:end="137:31">memory_region_add_subregion</name><argument_list pos:start="137:32" pos:end="137:77">(<argument pos:start="137:33" pos:end="137:42"><expr pos:start="137:33" pos:end="137:42"><operator pos:start="137:33" pos:end="137:33">&amp;</operator><name pos:start="137:34" pos:end="137:42"><name pos:start="137:34" pos:end="137:37">xhci</name><operator pos:start="137:38" pos:end="137:39">-&gt;</operator><name pos:start="137:40" pos:end="137:42">mem</name></name></expr></argument>, <argument pos:start="137:45" pos:end="137:55"><expr pos:start="137:45" pos:end="137:55"><name pos:start="137:45" pos:end="137:55">OFF_RUNTIME</name></expr></argument>,  <argument pos:start="137:59" pos:end="137:76"><expr pos:start="137:59" pos:end="137:76"><operator pos:start="137:59" pos:end="137:59">&amp;</operator><name pos:start="137:60" pos:end="137:76"><name pos:start="137:60" pos:end="137:63">xhci</name><operator pos:start="137:64" pos:end="137:65">-&gt;</operator><name pos:start="137:66" pos:end="137:76">mem_runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:79"><expr pos:start="139:5" pos:end="139:78"><call pos:start="139:5" pos:end="139:78"><name pos:start="139:5" pos:end="139:31">memory_region_add_subregion</name><argument_list pos:start="139:32" pos:end="139:78">(<argument pos:start="139:33" pos:end="139:42"><expr pos:start="139:33" pos:end="139:42"><operator pos:start="139:33" pos:end="139:33">&amp;</operator><name pos:start="139:34" pos:end="139:42"><name pos:start="139:34" pos:end="139:37">xhci</name><operator pos:start="139:38" pos:end="139:39">-&gt;</operator><name pos:start="139:40" pos:end="139:42">mem</name></name></expr></argument>, <argument pos:start="139:45" pos:end="139:56"><expr pos:start="139:45" pos:end="139:56"><name pos:start="139:45" pos:end="139:56">OFF_DOORBELL</name></expr></argument>, <argument pos:start="139:59" pos:end="139:77"><expr pos:start="139:59" pos:end="139:77"><operator pos:start="139:59" pos:end="139:59">&amp;</operator><name pos:start="139:60" pos:end="139:77"><name pos:start="139:60" pos:end="139:63">xhci</name><operator pos:start="139:64" pos:end="139:65">-&gt;</operator><name pos:start="139:66" pos:end="139:77">mem_doorbell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="143:5" pos:end="157:5">for <control pos:start="143:9" pos:end="143:40">(<init pos:start="143:10" pos:end="143:15"><expr pos:start="143:10" pos:end="143:14"><name pos:start="143:10" pos:end="143:10">i</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <literal type="number" pos:start="143:14" pos:end="143:14">0</literal></expr>;</init> <condition pos:start="143:17" pos:end="143:35"><expr pos:start="143:17" pos:end="143:34"><name pos:start="143:17" pos:end="143:17">i</name> <operator pos:start="143:19" pos:end="143:19">&lt;</operator> <name pos:start="143:21" pos:end="143:34"><name pos:start="143:21" pos:end="143:24">xhci</name><operator pos:start="143:25" pos:end="143:26">-&gt;</operator><name pos:start="143:27" pos:end="143:34">numports</name></name></expr>;</condition> <incr pos:start="143:37" pos:end="143:39"><expr pos:start="143:37" pos:end="143:39"><name pos:start="143:37" pos:end="143:37">i</name><operator pos:start="143:38" pos:end="143:39">++</operator></expr></incr>)</control> <block pos:start="143:42" pos:end="157:5">{<block_content pos:start="145:9" pos:end="155:68">

        <decl_stmt pos:start="145:9" pos:end="145:41"><decl pos:start="145:9" pos:end="145:40"><type pos:start="145:9" pos:end="145:18"><name pos:start="145:9" pos:end="145:16">XHCIPort</name> <modifier pos:start="145:18" pos:end="145:18">*</modifier></type><name pos:start="145:19" pos:end="145:22">port</name> <init pos:start="145:24" pos:end="145:40">= <expr pos:start="145:26" pos:end="145:40"><operator pos:start="145:26" pos:end="145:26">&amp;</operator><name pos:start="145:27" pos:end="145:40"><name pos:start="145:27" pos:end="145:30">xhci</name><operator pos:start="145:31" pos:end="145:32">-&gt;</operator><name pos:start="145:33" pos:end="145:37">ports</name><index pos:start="145:38" pos:end="145:40">[<expr pos:start="145:39" pos:end="145:39"><name pos:start="145:39" pos:end="145:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:54"><decl pos:start="147:9" pos:end="147:53"><type pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:16">uint32_t</name></type> <name pos:start="147:18" pos:end="147:23">offset</name> <init pos:start="147:25" pos:end="147:53">= <expr pos:start="147:27" pos:end="147:53"><name pos:start="147:27" pos:end="147:34">OFF_OPER</name> <operator pos:start="147:36" pos:end="147:36">+</operator> <literal type="number" pos:start="147:38" pos:end="147:44">0x400</literal> <operator pos:start="147:44" pos:end="147:44">+</operator> <literal type="number" pos:start="147:46" pos:end="147:49">0x10</literal> <operator pos:start="147:51" pos:end="147:51">*</operator> <name pos:start="147:53" pos:end="147:53">i</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:26"><expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:18"><name pos:start="149:9" pos:end="149:12">port</name><operator pos:start="149:13" pos:end="149:14">-&gt;</operator><name pos:start="149:15" pos:end="149:18">xhci</name></name> <operator pos:start="149:20" pos:end="149:20">=</operator> <name pos:start="149:22" pos:end="149:25">xhci</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="153:48"><expr pos:start="151:9" pos:end="153:47"><call pos:start="151:9" pos:end="153:47"><name pos:start="151:9" pos:end="151:29">memory_region_init_io</name><argument_list pos:start="151:30" pos:end="153:47">(<argument pos:start="151:31" pos:end="151:40"><expr pos:start="151:31" pos:end="151:40"><operator pos:start="151:31" pos:end="151:31">&amp;</operator><name pos:start="151:32" pos:end="151:40"><name pos:start="151:32" pos:end="151:35">port</name><operator pos:start="151:36" pos:end="151:37">-&gt;</operator><name pos:start="151:38" pos:end="151:40">mem</name></name></expr></argument>, <argument pos:start="151:43" pos:end="151:54"><expr pos:start="151:43" pos:end="151:54"><call pos:start="151:43" pos:end="151:54"><name pos:start="151:43" pos:end="151:48">OBJECT</name><argument_list pos:start="151:49" pos:end="151:54">(<argument pos:start="151:50" pos:end="151:53"><expr pos:start="151:50" pos:end="151:53"><name pos:start="151:50" pos:end="151:53">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="151:57" pos:end="151:70"><expr pos:start="151:57" pos:end="151:70"><operator pos:start="151:57" pos:end="151:57">&amp;</operator><name pos:start="151:58" pos:end="151:70">xhci_port_ops</name></expr></argument>, <argument pos:start="151:73" pos:end="151:76"><expr pos:start="151:73" pos:end="151:76"><name pos:start="151:73" pos:end="151:76">port</name></expr></argument>,

                              <argument pos:start="153:31" pos:end="153:40"><expr pos:start="153:31" pos:end="153:40"><name pos:start="153:31" pos:end="153:40"><name pos:start="153:31" pos:end="153:34">port</name><operator pos:start="153:35" pos:end="153:36">-&gt;</operator><name pos:start="153:37" pos:end="153:40">name</name></name></expr></argument>, <argument pos:start="153:43" pos:end="153:46"><expr pos:start="153:43" pos:end="153:46"><literal type="number" pos:start="153:43" pos:end="153:46">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:68"><expr pos:start="155:9" pos:end="155:67"><call pos:start="155:9" pos:end="155:67"><name pos:start="155:9" pos:end="155:35">memory_region_add_subregion</name><argument_list pos:start="155:36" pos:end="155:67">(<argument pos:start="155:37" pos:end="155:46"><expr pos:start="155:37" pos:end="155:46"><operator pos:start="155:37" pos:end="155:37">&amp;</operator><name pos:start="155:38" pos:end="155:46"><name pos:start="155:38" pos:end="155:41">xhci</name><operator pos:start="155:42" pos:end="155:43">-&gt;</operator><name pos:start="155:44" pos:end="155:46">mem</name></name></expr></argument>, <argument pos:start="155:49" pos:end="155:54"><expr pos:start="155:49" pos:end="155:54"><name pos:start="155:49" pos:end="155:54">offset</name></expr></argument>, <argument pos:start="155:57" pos:end="155:66"><expr pos:start="155:57" pos:end="155:66"><operator pos:start="155:57" pos:end="155:57">&amp;</operator><name pos:start="155:58" pos:end="155:66"><name pos:start="155:58" pos:end="155:61">port</name><operator pos:start="155:62" pos:end="155:63">-&gt;</operator><name pos:start="155:64" pos:end="155:66">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="161:5" pos:end="165:33"><expr pos:start="161:5" pos:end="165:32"><call pos:start="161:5" pos:end="165:32"><name pos:start="161:5" pos:end="161:20">pci_register_bar</name><argument_list pos:start="161:21" pos:end="165:32">(<argument pos:start="161:22" pos:end="161:24"><expr pos:start="161:22" pos:end="161:24"><name pos:start="161:22" pos:end="161:24">dev</name></expr></argument>, <argument pos:start="161:27" pos:end="161:27"><expr pos:start="161:27" pos:end="161:27"><literal type="number" pos:start="161:27" pos:end="161:27">0</literal></expr></argument>,

                     <argument pos:start="163:22" pos:end="163:79"><expr pos:start="163:22" pos:end="163:79"><name pos:start="163:22" pos:end="163:50">PCI_BASE_ADDRESS_SPACE_MEMORY</name><operator pos:start="163:51" pos:end="163:51">|</operator><name pos:start="163:52" pos:end="163:79">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr></argument>,

                     <argument pos:start="165:22" pos:end="165:31"><expr pos:start="165:22" pos:end="165:31"><operator pos:start="165:22" pos:end="165:22">&amp;</operator><name pos:start="165:23" pos:end="165:31"><name pos:start="165:23" pos:end="165:26">xhci</name><operator pos:start="165:27" pos:end="165:28">-&gt;</operator><name pos:start="165:29" pos:end="165:31">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="169:5" pos:end="177:5"><if pos:start="169:5" pos:end="177:5">if <condition pos:start="169:8" pos:end="171:57">(<expr pos:start="169:9" pos:end="171:56"><call pos:start="169:9" pos:end="169:36"><name pos:start="169:9" pos:end="169:26">pci_bus_is_express</name><argument_list pos:start="169:27" pos:end="169:36">(<argument pos:start="169:28" pos:end="169:35"><expr pos:start="169:28" pos:end="169:35"><name pos:start="169:28" pos:end="169:35"><name pos:start="169:28" pos:end="169:30">dev</name><operator pos:start="169:31" pos:end="169:32">-&gt;</operator><name pos:start="169:33" pos:end="169:35">bus</name></name></expr></argument>)</argument_list></call> <operator pos:start="169:38" pos:end="169:39">||</operator>

        <call pos:start="171:9" pos:end="171:56"><name pos:start="171:9" pos:end="171:21">xhci_get_flag</name><argument_list pos:start="171:22" pos:end="171:56">(<argument pos:start="171:23" pos:end="171:26"><expr pos:start="171:23" pos:end="171:26"><name pos:start="171:23" pos:end="171:26">xhci</name></expr></argument>, <argument pos:start="171:29" pos:end="171:55"><expr pos:start="171:29" pos:end="171:55"><name pos:start="171:29" pos:end="171:55">XHCI_FLAG_FORCE_PCIE_ENDCAP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:59" pos:end="177:5">{<block_content pos:start="173:9" pos:end="175:24">

        <expr_stmt pos:start="173:9" pos:end="173:48"><expr pos:start="173:9" pos:end="173:47"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="173:47"><name pos:start="173:15" pos:end="173:36">pcie_endpoint_cap_init</name><argument_list pos:start="173:37" pos:end="173:47">(<argument pos:start="173:38" pos:end="173:40"><expr pos:start="173:38" pos:end="173:40"><name pos:start="173:38" pos:end="173:40">dev</name></expr></argument>, <argument pos:start="173:43" pos:end="173:46"><expr pos:start="173:43" pos:end="173:46"><literal type="number" pos:start="173:43" pos:end="173:46">0xa0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:24"><expr pos:start="175:9" pos:end="175:23"><call pos:start="175:9" pos:end="175:23"><name pos:start="175:9" pos:end="175:14">assert</name><argument_list pos:start="175:15" pos:end="175:23">(<argument pos:start="175:16" pos:end="175:22"><expr pos:start="175:16" pos:end="175:22"><name pos:start="175:16" pos:end="175:18">ret</name> <operator pos:start="175:20" pos:end="175:20">&gt;</operator> <literal type="number" pos:start="175:22" pos:end="175:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="181:5" pos:end="193:5"><if pos:start="181:5" pos:end="193:5">if <condition pos:start="181:8" pos:end="181:38">(<expr pos:start="181:9" pos:end="181:37"><name pos:start="181:9" pos:end="181:18"><name pos:start="181:9" pos:end="181:12">xhci</name><operator pos:start="181:13" pos:end="181:14">-&gt;</operator><name pos:start="181:15" pos:end="181:18">msix</name></name> <operator pos:start="181:20" pos:end="181:21">!=</operator> <name pos:start="181:23" pos:end="181:37">ON_OFF_AUTO_OFF</name></expr>)</condition> <block pos:start="181:40" pos:end="193:5">{<block_content pos:start="185:9" pos:end="191:30">

        <comment type="block" pos:start="183:9" pos:end="183:65">/* TODO check for errors, and should fail when msix=on */</comment>

        <expr_stmt pos:start="185:9" pos:end="191:30"><expr pos:start="185:9" pos:end="191:29"><call pos:start="185:9" pos:end="191:29"><name pos:start="185:9" pos:end="185:17">msix_init</name><argument_list pos:start="185:18" pos:end="191:29">(<argument pos:start="185:19" pos:end="185:21"><expr pos:start="185:19" pos:end="185:21"><name pos:start="185:19" pos:end="185:21">dev</name></expr></argument>, <argument pos:start="185:24" pos:end="185:37"><expr pos:start="185:24" pos:end="185:37"><name pos:start="185:24" pos:end="185:37"><name pos:start="185:24" pos:end="185:27">xhci</name><operator pos:start="185:28" pos:end="185:29">-&gt;</operator><name pos:start="185:30" pos:end="185:37">numintrs</name></name></expr></argument>,

                  <argument pos:start="187:19" pos:end="187:28"><expr pos:start="187:19" pos:end="187:28"><operator pos:start="187:19" pos:end="187:19">&amp;</operator><name pos:start="187:20" pos:end="187:28"><name pos:start="187:20" pos:end="187:23">xhci</name><operator pos:start="187:24" pos:end="187:25">-&gt;</operator><name pos:start="187:26" pos:end="187:28">mem</name></name></expr></argument>, <argument pos:start="187:31" pos:end="187:31"><expr pos:start="187:31" pos:end="187:31"><literal type="number" pos:start="187:31" pos:end="187:31">0</literal></expr></argument>, <argument pos:start="187:34" pos:end="187:47"><expr pos:start="187:34" pos:end="187:47"><name pos:start="187:34" pos:end="187:47">OFF_MSIX_TABLE</name></expr></argument>,

                  <argument pos:start="189:19" pos:end="189:28"><expr pos:start="189:19" pos:end="189:28"><operator pos:start="189:19" pos:end="189:19">&amp;</operator><name pos:start="189:20" pos:end="189:28"><name pos:start="189:20" pos:end="189:23">xhci</name><operator pos:start="189:24" pos:end="189:25">-&gt;</operator><name pos:start="189:26" pos:end="189:28">mem</name></name></expr></argument>, <argument pos:start="189:31" pos:end="189:31"><expr pos:start="189:31" pos:end="189:31"><literal type="number" pos:start="189:31" pos:end="189:31">0</literal></expr></argument>, <argument pos:start="189:34" pos:end="189:45"><expr pos:start="189:34" pos:end="189:45"><name pos:start="189:34" pos:end="189:45">OFF_MSIX_PBA</name></expr></argument>,

                  <argument pos:start="191:19" pos:end="191:22"><expr pos:start="191:19" pos:end="191:22"><literal type="number" pos:start="191:19" pos:end="191:22">0x90</literal></expr></argument>, <argument pos:start="191:25" pos:end="191:28"><expr pos:start="191:25" pos:end="191:28"><name pos:start="191:25" pos:end="191:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
