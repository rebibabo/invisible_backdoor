<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24661.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">qcow2_grow_l1_table</name><parameter_list pos:start="1:24" pos:end="3:40">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><name pos:start="1:47" pos:end="1:54">uint64_t</name></type> <name pos:start="1:56" pos:end="1:63">min_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:28">bool</name></type> <name pos:start="3:30" pos:end="3:39">exact_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="197:1">{<block_content pos:start="7:5" pos:end="195:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">new_l1_size2</name></decl>, <decl pos:start="9:23" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:25">ret</name></decl>, <decl pos:start="9:28" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:28">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:26">new_l1_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:31">old_l1_table_offset</name></decl>, <decl pos:start="13:34" pos:end="13:44"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:34" pos:end="13:44">old_l1_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:31">new_l1_table_offset</name></decl>, <decl pos:start="15:34" pos:end="15:44"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:34" pos:end="15:44">new_l1_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:20"><name pos:start="17:13" pos:end="17:16">data</name><index pos:start="17:17" pos:end="17:20">[<expr pos:start="17:18" pos:end="17:19"><literal type="number" pos:start="17:18" pos:end="17:19">12</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:17"><if pos:start="21:5" pos:end="23:17">if <condition pos:start="21:8" pos:end="21:31">(<expr pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:16">min_size</name> <operator pos:start="21:18" pos:end="21:19">&lt;=</operator> <name pos:start="21:21" pos:end="21:30"><name pos:start="21:21" pos:end="21:21">s</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:30">l1_size</name></name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:17"><block_content pos:start="23:9" pos:end="23:17">

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="31:22">/* Do a sanity check on min_size before trying to calculate new_l1_size

     * (this prevents overflows during the while loop for the calculation of

     * new_l1_size) */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:46">(<expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:16">min_size</name> <operator pos:start="33:18" pos:end="33:18">&gt;</operator> <name pos:start="33:20" pos:end="33:26">INT_MAX</name> <operator pos:start="33:28" pos:end="33:28">/</operator> <sizeof pos:start="33:30" pos:end="33:45">sizeof<argument_list pos:start="33:36" pos:end="33:45">(<argument pos:start="33:37" pos:end="33:44"><expr pos:start="33:37" pos:end="33:44"><name pos:start="33:37" pos:end="33:44">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="33:48" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:22">

        <return pos:start="35:9" pos:end="35:22">return <expr pos:start="35:16" pos:end="35:21"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:21">EFBIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="63:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:19">(<expr pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:18">exact_size</name></expr>)</condition> <block pos:start="41:21" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:31">

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:19">new_l1_size</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <name pos:start="43:23" pos:end="43:30">min_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="63:5">else <block pos:start="45:12" pos:end="63:5">{<block_content pos:start="49:9" pos:end="61:9">

        <comment type="block" pos:start="47:9" pos:end="47:72">/* Bump size up to reduce the number of times we have to grow */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:19">new_l1_size</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:32"><name pos:start="49:23" pos:end="49:23">s</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:32">l1_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:29">(<expr pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:23">new_l1_size</name> <operator pos:start="51:25" pos:end="51:26">==</operator> <literal type="number" pos:start="51:28" pos:end="51:28">0</literal></expr>)</condition> <block pos:start="51:31" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:28">

            <expr_stmt pos:start="53:13" pos:end="53:28"><expr pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:23">new_l1_size</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <literal type="number" pos:start="53:27" pos:end="53:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <while pos:start="57:9" pos:end="61:9">while <condition pos:start="57:15" pos:end="57:38">(<expr pos:start="57:16" pos:end="57:37"><name pos:start="57:16" pos:end="57:23">min_size</name> <operator pos:start="57:25" pos:end="57:25">&gt;</operator> <name pos:start="57:27" pos:end="57:37">new_l1_size</name></expr>)</condition> <block pos:start="57:40" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:52">

            <expr_stmt pos:start="59:13" pos:end="59:52"><expr pos:start="59:13" pos:end="59:51"><name pos:start="59:13" pos:end="59:23">new_l1_size</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <operator pos:start="59:27" pos:end="59:27">(</operator><name pos:start="59:28" pos:end="59:38">new_l1_size</name> <operator pos:start="59:40" pos:end="59:40">*</operator> <literal type="number" pos:start="59:42" pos:end="59:44">3</literal> <operator pos:start="59:44" pos:end="59:44">+</operator> <literal type="number" pos:start="59:46" pos:end="59:46">1</literal><operator pos:start="59:47" pos:end="59:47">)</operator> <operator pos:start="59:49" pos:end="59:49">/</operator> <literal type="number" pos:start="59:51" pos:end="59:51">2</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="67:5" pos:end="76:0"><if pos:start="67:5" pos:end="76:0">if <condition pos:start="67:8" pos:end="67:49">(<expr pos:start="67:9" pos:end="67:48"><name pos:start="67:9" pos:end="67:19">new_l1_size</name> <operator pos:start="67:21" pos:end="67:21">&gt;</operator> <name pos:start="67:23" pos:end="67:29">INT_MAX</name> <operator pos:start="67:31" pos:end="67:31">/</operator> <sizeof pos:start="67:33" pos:end="67:48">sizeof<argument_list pos:start="67:39" pos:end="67:48">(<argument pos:start="67:40" pos:end="67:47"><expr pos:start="67:40" pos:end="67:47"><name pos:start="67:40" pos:end="67:47">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="67:51" pos:end="76:0">{<block_content pos:start="69:9" pos:end="69:22">

        <return pos:start="69:9" pos:end="69:22">return <expr pos:start="69:16" pos:end="69:21"><operator pos:start="69:16" pos:end="69:16">-</operator><name pos:start="69:17" pos:end="69:21">EFBIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="75:1" pos:end="75:19">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="77:5" pos:end="82:0"><expr pos:start="77:5" pos:end="79:36"><call pos:start="77:5" pos:end="79:36"><name pos:start="77:5" pos:end="77:11">fprintf</name><argument_list pos:start="77:12" pos:end="79:36">(<argument pos:start="77:13" pos:end="77:18"><expr pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:18">stderr</name></expr></argument>, <argument pos:start="77:21" pos:end="77:60"><expr pos:start="77:21" pos:end="77:60"><literal type="string" pos:start="77:21" pos:end="77:48">"grow l1_table from %d to %"</literal> <name pos:start="77:50" pos:end="77:55">PRId64</name> <literal type="string" pos:start="77:57" pos:end="77:60">"\n"</literal></expr></argument>,

            <argument pos:start="79:13" pos:end="79:22"><expr pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:22">l1_size</name></name></expr></argument>, <argument pos:start="79:25" pos:end="79:35"><expr pos:start="79:25" pos:end="79:35"><name pos:start="79:25" pos:end="79:35">new_l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="85:5" pos:end="85:50"><expr pos:start="85:5" pos:end="85:49"><name pos:start="85:5" pos:end="85:16">new_l1_size2</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <sizeof pos:start="85:20" pos:end="85:35">sizeof<argument_list pos:start="85:26" pos:end="85:35">(<argument pos:start="85:27" pos:end="85:34"><expr pos:start="85:27" pos:end="85:34"><name pos:start="85:27" pos:end="85:34">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="85:37" pos:end="85:37">*</operator> <name pos:start="85:39" pos:end="85:49">new_l1_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:62"><expr pos:start="87:5" pos:end="87:61"><name pos:start="87:5" pos:end="87:16">new_l1_table</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="87:61"><name pos:start="87:20" pos:end="87:28">g_malloc0</name><argument_list pos:start="87:29" pos:end="87:61">(<argument pos:start="87:30" pos:end="87:60"><expr pos:start="87:30" pos:end="87:60"><call pos:start="87:30" pos:end="87:60"><name pos:start="87:30" pos:end="87:41">align_offset</name><argument_list pos:start="87:42" pos:end="87:60">(<argument pos:start="87:43" pos:end="87:54"><expr pos:start="87:43" pos:end="87:54"><name pos:start="87:43" pos:end="87:54">new_l1_size2</name></expr></argument>, <argument pos:start="87:57" pos:end="87:59"><expr pos:start="87:57" pos:end="87:59"><literal type="number" pos:start="87:57" pos:end="87:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:69"><expr pos:start="89:5" pos:end="89:68"><call pos:start="89:5" pos:end="89:68"><name pos:start="89:5" pos:end="89:10">memcpy</name><argument_list pos:start="89:11" pos:end="89:68">(<argument pos:start="89:12" pos:end="89:23"><expr pos:start="89:12" pos:end="89:23"><name pos:start="89:12" pos:end="89:23">new_l1_table</name></expr></argument>, <argument pos:start="89:26" pos:end="89:36"><expr pos:start="89:26" pos:end="89:36"><name pos:start="89:26" pos:end="89:36"><name pos:start="89:26" pos:end="89:26">s</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:36">l1_table</name></name></expr></argument>, <argument pos:start="89:39" pos:end="89:67"><expr pos:start="89:39" pos:end="89:67"><name pos:start="89:39" pos:end="89:48"><name pos:start="89:39" pos:end="89:39">s</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:48">l1_size</name></name> <operator pos:start="89:50" pos:end="89:50">*</operator> <sizeof pos:start="89:52" pos:end="89:67">sizeof<argument_list pos:start="89:58" pos:end="89:67">(<argument pos:start="89:59" pos:end="89:66"><expr pos:start="89:59" pos:end="89:66"><name pos:start="89:59" pos:end="89:66">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:44">/* write new table (align to cluster) */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:55"><expr pos:start="95:5" pos:end="95:54"><call pos:start="95:5" pos:end="95:54"><name pos:start="95:5" pos:end="95:16">BLKDBG_EVENT</name><argument_list pos:start="95:17" pos:end="95:54">(<argument pos:start="95:18" pos:end="95:25"><expr pos:start="95:18" pos:end="95:25"><name pos:start="95:18" pos:end="95:25"><name pos:start="95:18" pos:end="95:19">bs</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:25">file</name></name></expr></argument>, <argument pos:start="95:28" pos:end="95:53"><expr pos:start="95:28" pos:end="95:53"><name pos:start="95:28" pos:end="95:53">BLKDBG_L1_GROW_ALLOC_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:65"><expr pos:start="97:5" pos:end="97:64"><name pos:start="97:5" pos:end="97:23">new_l1_table_offset</name> <operator pos:start="97:25" pos:end="97:25">=</operator> <call pos:start="97:27" pos:end="97:64"><name pos:start="97:27" pos:end="97:46">qcow2_alloc_clusters</name><argument_list pos:start="97:47" pos:end="97:64">(<argument pos:start="97:48" pos:end="97:49"><expr pos:start="97:48" pos:end="97:49"><name pos:start="97:48" pos:end="97:49">bs</name></expr></argument>, <argument pos:start="97:52" pos:end="97:63"><expr pos:start="97:52" pos:end="97:63"><name pos:start="97:52" pos:end="97:63">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:32">(<expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:27">new_l1_table_offset</name> <operator pos:start="99:29" pos:end="99:29">&lt;</operator> <literal type="number" pos:start="99:31" pos:end="99:31">0</literal></expr>)</condition> <block pos:start="99:34" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:35">

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><call pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:14">g_free</name><argument_list pos:start="101:15" pos:end="101:28">(<argument pos:start="101:16" pos:end="101:27"><expr pos:start="101:16" pos:end="101:27"><name pos:start="101:16" pos:end="101:27">new_l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:35">return <expr pos:start="103:16" pos:end="103:34"><name pos:start="103:16" pos:end="103:34">new_l1_table_offset</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:57"><expr pos:start="109:5" pos:end="109:56"><name pos:start="109:5" pos:end="109:7">ret</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:56"><name pos:start="109:11" pos:end="109:27">qcow2_cache_flush</name><argument_list pos:start="109:28" pos:end="109:56">(<argument pos:start="109:29" pos:end="109:30"><expr pos:start="109:29" pos:end="109:30"><name pos:start="109:29" pos:end="109:30">bs</name></expr></argument>, <argument pos:start="109:33" pos:end="109:55"><expr pos:start="109:33" pos:end="109:55"><name pos:start="109:33" pos:end="109:55"><name pos:start="109:33" pos:end="109:33">s</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:16">(<expr pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">&lt;</operator> <literal type="number" pos:start="111:15" pos:end="111:15">0</literal></expr>)</condition> <block pos:start="111:18" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:18">

        <goto pos:start="113:9" pos:end="113:18">goto <name pos:start="113:14" pos:end="113:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="121:35">/* the L1 position has not yet been updated, so these clusters must

     * indeed be completely free */</comment>

    <expr_stmt pos:start="123:5" pos:end="125:54"><expr pos:start="123:5" pos:end="125:53"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="125:53"><name pos:start="123:11" pos:end="123:39">qcow2_pre_write_overlap_check</name><argument_list pos:start="123:40" pos:end="125:53">(<argument pos:start="123:41" pos:end="123:42"><expr pos:start="123:41" pos:end="123:42"><name pos:start="123:41" pos:end="123:42">bs</name></expr></argument>, <argument pos:start="123:45" pos:end="123:45"><expr pos:start="123:45" pos:end="123:45"><literal type="number" pos:start="123:45" pos:end="123:45">0</literal></expr></argument>, <argument pos:start="123:48" pos:end="123:66"><expr pos:start="123:48" pos:end="123:66"><name pos:start="123:48" pos:end="123:66">new_l1_table_offset</name></expr></argument>,

                                        <argument pos:start="125:41" pos:end="125:52"><expr pos:start="125:41" pos:end="125:52"><name pos:start="125:41" pos:end="125:52">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="131:5"><if pos:start="127:5" pos:end="131:5">if <condition pos:start="127:8" pos:end="127:16">(<expr pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">&lt;</operator> <literal type="number" pos:start="127:15" pos:end="127:15">0</literal></expr>)</condition> <block pos:start="127:18" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:18">

        <goto pos:start="129:9" pos:end="129:18">goto <name pos:start="129:14" pos:end="129:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:55"><expr pos:start="135:5" pos:end="135:54"><call pos:start="135:5" pos:end="135:54"><name pos:start="135:5" pos:end="135:16">BLKDBG_EVENT</name><argument_list pos:start="135:17" pos:end="135:54">(<argument pos:start="135:18" pos:end="135:25"><expr pos:start="135:18" pos:end="135:25"><name pos:start="135:18" pos:end="135:25"><name pos:start="135:18" pos:end="135:19">bs</name><operator pos:start="135:20" pos:end="135:21">-&gt;</operator><name pos:start="135:22" pos:end="135:25">file</name></name></expr></argument>, <argument pos:start="135:28" pos:end="135:53"><expr pos:start="135:28" pos:end="135:53"><name pos:start="135:28" pos:end="135:53">BLKDBG_L1_GROW_WRITE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="137:5" pos:end="139:55">for<control pos:start="137:8" pos:end="137:35">(<init pos:start="137:9" pos:end="137:14"><expr pos:start="137:9" pos:end="137:13"><name pos:start="137:9" pos:end="137:9">i</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <literal type="number" pos:start="137:13" pos:end="137:13">0</literal></expr>;</init> <condition pos:start="137:16" pos:end="137:30"><expr pos:start="137:16" pos:end="137:29"><name pos:start="137:16" pos:end="137:16">i</name> <operator pos:start="137:18" pos:end="137:18">&lt;</operator> <name pos:start="137:20" pos:end="137:29"><name pos:start="137:20" pos:end="137:20">s</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:29">l1_size</name></name></expr>;</condition> <incr pos:start="137:32" pos:end="137:34"><expr pos:start="137:32" pos:end="137:34"><name pos:start="137:32" pos:end="137:32">i</name><operator pos:start="137:33" pos:end="137:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="139:9" pos:end="139:55"><block_content pos:start="139:9" pos:end="139:55">

        <expr_stmt pos:start="139:9" pos:end="139:55"><expr pos:start="139:9" pos:end="139:54"><name pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:20">new_l1_table</name><index pos:start="139:21" pos:end="139:23">[<expr pos:start="139:22" pos:end="139:22"><name pos:start="139:22" pos:end="139:22">i</name></expr>]</index></name> <operator pos:start="139:25" pos:end="139:25">=</operator> <call pos:start="139:27" pos:end="139:54"><name pos:start="139:27" pos:end="139:37">cpu_to_be64</name><argument_list pos:start="139:38" pos:end="139:54">(<argument pos:start="139:39" pos:end="139:53"><expr pos:start="139:39" pos:end="139:53"><name pos:start="139:39" pos:end="139:53"><name pos:start="139:39" pos:end="139:50">new_l1_table</name><index pos:start="139:51" pos:end="139:53">[<expr pos:start="139:52" pos:end="139:52"><name pos:start="139:52" pos:end="139:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="141:5" pos:end="141:86"><expr pos:start="141:5" pos:end="141:85"><name pos:start="141:5" pos:end="141:7">ret</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <call pos:start="141:11" pos:end="141:85"><name pos:start="141:11" pos:end="141:26">bdrv_pwrite_sync</name><argument_list pos:start="141:27" pos:end="141:85">(<argument pos:start="141:28" pos:end="141:35"><expr pos:start="141:28" pos:end="141:35"><name pos:start="141:28" pos:end="141:35"><name pos:start="141:28" pos:end="141:29">bs</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:35">file</name></name></expr></argument>, <argument pos:start="141:38" pos:end="141:56"><expr pos:start="141:38" pos:end="141:56"><name pos:start="141:38" pos:end="141:56">new_l1_table_offset</name></expr></argument>, <argument pos:start="141:59" pos:end="141:70"><expr pos:start="141:59" pos:end="141:70"><name pos:start="141:59" pos:end="141:70">new_l1_table</name></expr></argument>, <argument pos:start="141:73" pos:end="141:84"><expr pos:start="141:73" pos:end="141:84"><name pos:start="141:73" pos:end="141:84">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="145:18"><if pos:start="143:5" pos:end="145:18">if <condition pos:start="143:8" pos:end="143:16">(<expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">&lt;</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:18"><block_content pos:start="145:9" pos:end="145:18">

        <goto pos:start="145:9" pos:end="145:18">goto <name pos:start="145:14" pos:end="145:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <for pos:start="147:5" pos:end="149:55">for<control pos:start="147:8" pos:end="147:35">(<init pos:start="147:9" pos:end="147:14"><expr pos:start="147:9" pos:end="147:13"><name pos:start="147:9" pos:end="147:9">i</name> <operator pos:start="147:11" pos:end="147:11">=</operator> <literal type="number" pos:start="147:13" pos:end="147:13">0</literal></expr>;</init> <condition pos:start="147:16" pos:end="147:30"><expr pos:start="147:16" pos:end="147:29"><name pos:start="147:16" pos:end="147:16">i</name> <operator pos:start="147:18" pos:end="147:18">&lt;</operator> <name pos:start="147:20" pos:end="147:29"><name pos:start="147:20" pos:end="147:20">s</name><operator pos:start="147:21" pos:end="147:22">-&gt;</operator><name pos:start="147:23" pos:end="147:29">l1_size</name></name></expr>;</condition> <incr pos:start="147:32" pos:end="147:34"><expr pos:start="147:32" pos:end="147:34"><name pos:start="147:32" pos:end="147:32">i</name><operator pos:start="147:33" pos:end="147:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="149:9" pos:end="149:55"><block_content pos:start="149:9" pos:end="149:55">

        <expr_stmt pos:start="149:9" pos:end="149:55"><expr pos:start="149:9" pos:end="149:54"><name pos:start="149:9" pos:end="149:23"><name pos:start="149:9" pos:end="149:20">new_l1_table</name><index pos:start="149:21" pos:end="149:23">[<expr pos:start="149:22" pos:end="149:22"><name pos:start="149:22" pos:end="149:22">i</name></expr>]</index></name> <operator pos:start="149:25" pos:end="149:25">=</operator> <call pos:start="149:27" pos:end="149:54"><name pos:start="149:27" pos:end="149:37">be64_to_cpu</name><argument_list pos:start="149:38" pos:end="149:54">(<argument pos:start="149:39" pos:end="149:53"><expr pos:start="149:39" pos:end="149:53"><name pos:start="149:39" pos:end="149:53"><name pos:start="149:39" pos:end="149:50">new_l1_table</name><index pos:start="149:51" pos:end="149:53">[<expr pos:start="149:52" pos:end="149:52"><name pos:start="149:52" pos:end="149:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="153:5" pos:end="153:23">/* set new table */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:58"><expr pos:start="155:5" pos:end="155:57"><call pos:start="155:5" pos:end="155:57"><name pos:start="155:5" pos:end="155:16">BLKDBG_EVENT</name><argument_list pos:start="155:17" pos:end="155:57">(<argument pos:start="155:18" pos:end="155:25"><expr pos:start="155:18" pos:end="155:25"><name pos:start="155:18" pos:end="155:25"><name pos:start="155:18" pos:end="155:19">bs</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:25">file</name></name></expr></argument>, <argument pos:start="155:28" pos:end="155:56"><expr pos:start="155:28" pos:end="155:56"><name pos:start="155:28" pos:end="155:56">BLKDBG_L1_GROW_ACTIVATE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:47"><expr pos:start="157:5" pos:end="157:46"><call pos:start="157:5" pos:end="157:46"><name pos:start="157:5" pos:end="157:16">cpu_to_be32w</name><argument_list pos:start="157:17" pos:end="157:46">(<argument pos:start="157:18" pos:end="157:32"><expr pos:start="157:18" pos:end="157:32"><operator pos:start="157:18" pos:end="157:18">(</operator><name pos:start="157:19" pos:end="157:26">uint32_t</name><operator pos:start="157:27" pos:end="157:27">*</operator><operator pos:start="157:28" pos:end="157:28">)</operator><name pos:start="157:29" pos:end="157:32">data</name></expr></argument>, <argument pos:start="157:35" pos:end="157:45"><expr pos:start="157:35" pos:end="157:45"><name pos:start="157:35" pos:end="157:45">new_l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:44"><expr pos:start="159:5" pos:end="159:43"><call pos:start="159:5" pos:end="159:43"><name pos:start="159:5" pos:end="159:12">stq_be_p</name><argument_list pos:start="159:13" pos:end="159:43">(<argument pos:start="159:14" pos:end="159:21"><expr pos:start="159:14" pos:end="159:21"><name pos:start="159:14" pos:end="159:17">data</name> <operator pos:start="159:19" pos:end="159:19">+</operator> <literal type="number" pos:start="159:21" pos:end="159:21">4</literal></expr></argument>, <argument pos:start="159:24" pos:end="159:42"><expr pos:start="159:24" pos:end="159:42"><name pos:start="159:24" pos:end="159:42">new_l1_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:87"><expr pos:start="161:5" pos:end="161:86"><name pos:start="161:5" pos:end="161:7">ret</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <call pos:start="161:11" pos:end="161:86"><name pos:start="161:11" pos:end="161:26">bdrv_pwrite_sync</name><argument_list pos:start="161:27" pos:end="161:86">(<argument pos:start="161:28" pos:end="161:35"><expr pos:start="161:28" pos:end="161:35"><name pos:start="161:28" pos:end="161:35"><name pos:start="161:28" pos:end="161:29">bs</name><operator pos:start="161:30" pos:end="161:31">-&gt;</operator><name pos:start="161:32" pos:end="161:35">file</name></name></expr></argument>, <argument pos:start="161:38" pos:end="161:66"><expr pos:start="161:38" pos:end="161:66"><call pos:start="161:38" pos:end="161:66"><name pos:start="161:38" pos:end="161:45">offsetof</name><argument_list pos:start="161:46" pos:end="161:66">(<argument pos:start="161:47" pos:end="161:56"><expr pos:start="161:47" pos:end="161:56"><name pos:start="161:47" pos:end="161:56">QCowHeader</name></expr></argument>, <argument pos:start="161:59" pos:end="161:65"><expr pos:start="161:59" pos:end="161:65"><name pos:start="161:59" pos:end="161:65">l1_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="161:69" pos:end="161:72"><expr pos:start="161:69" pos:end="161:72"><name pos:start="161:69" pos:end="161:72">data</name></expr></argument>,<argument pos:start="161:74" pos:end="161:85"><expr pos:start="161:74" pos:end="161:85"><sizeof pos:start="161:74" pos:end="161:85">sizeof<argument_list pos:start="161:80" pos:end="161:85">(<argument pos:start="161:81" pos:end="161:84"><expr pos:start="161:81" pos:end="161:84"><name pos:start="161:81" pos:end="161:84">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="167:5"><if pos:start="163:5" pos:end="167:5">if <condition pos:start="163:8" pos:end="163:16">(<expr pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">&lt;</operator> <literal type="number" pos:start="163:15" pos:end="163:15">0</literal></expr>)</condition> <block pos:start="163:18" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:18">

        <goto pos:start="165:9" pos:end="165:18">goto <name pos:start="165:14" pos:end="165:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:24"><expr pos:start="169:5" pos:end="169:23"><call pos:start="169:5" pos:end="169:23"><name pos:start="169:5" pos:end="169:10">g_free</name><argument_list pos:start="169:11" pos:end="169:23">(<argument pos:start="169:12" pos:end="169:22"><expr pos:start="169:12" pos:end="169:22"><name pos:start="169:12" pos:end="169:22"><name pos:start="169:12" pos:end="169:12">s</name><operator pos:start="169:13" pos:end="169:14">-&gt;</operator><name pos:start="169:15" pos:end="169:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:45"><expr pos:start="171:5" pos:end="171:44"><name pos:start="171:5" pos:end="171:23">old_l1_table_offset</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <name pos:start="171:27" pos:end="171:44"><name pos:start="171:27" pos:end="171:27">s</name><operator pos:start="171:28" pos:end="171:29">-&gt;</operator><name pos:start="171:30" pos:end="171:44">l1_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:45"><expr pos:start="173:5" pos:end="173:44"><name pos:start="173:5" pos:end="173:22"><name pos:start="173:5" pos:end="173:5">s</name><operator pos:start="173:6" pos:end="173:7">-&gt;</operator><name pos:start="173:8" pos:end="173:22">l1_table_offset</name></name> <operator pos:start="173:24" pos:end="173:24">=</operator> <name pos:start="173:26" pos:end="173:44">new_l1_table_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:31"><expr pos:start="175:5" pos:end="175:30"><name pos:start="175:5" pos:end="175:15"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:15">l1_table</name></name> <operator pos:start="175:17" pos:end="175:17">=</operator> <name pos:start="175:19" pos:end="175:30">new_l1_table</name></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:29"><expr pos:start="177:5" pos:end="177:28"><name pos:start="177:5" pos:end="177:15">old_l1_size</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <name pos:start="177:19" pos:end="177:28"><name pos:start="177:19" pos:end="177:19">s</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:28">l1_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:29"><expr pos:start="179:5" pos:end="179:28"><name pos:start="179:5" pos:end="179:14"><name pos:start="179:5" pos:end="179:5">s</name><operator pos:start="179:6" pos:end="179:7">-&gt;</operator><name pos:start="179:8" pos:end="179:14">l1_size</name></name> <operator pos:start="179:16" pos:end="179:16">=</operator> <name pos:start="179:18" pos:end="179:28">new_l1_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="183:45"><expr pos:start="181:5" pos:end="183:44"><call pos:start="181:5" pos:end="183:44"><name pos:start="181:5" pos:end="181:23">qcow2_free_clusters</name><argument_list pos:start="181:24" pos:end="183:44">(<argument pos:start="181:25" pos:end="181:26"><expr pos:start="181:25" pos:end="181:26"><name pos:start="181:25" pos:end="181:26">bs</name></expr></argument>, <argument pos:start="181:29" pos:end="181:47"><expr pos:start="181:29" pos:end="181:47"><name pos:start="181:29" pos:end="181:47">old_l1_table_offset</name></expr></argument>, <argument pos:start="181:50" pos:end="181:79"><expr pos:start="181:50" pos:end="181:79"><name pos:start="181:50" pos:end="181:60">old_l1_size</name> <operator pos:start="181:62" pos:end="181:62">*</operator> <sizeof pos:start="181:64" pos:end="181:79">sizeof<argument_list pos:start="181:70" pos:end="181:79">(<argument pos:start="181:71" pos:end="181:78"><expr pos:start="181:71" pos:end="181:78"><name pos:start="181:71" pos:end="181:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                        <argument pos:start="183:25" pos:end="183:43"><expr pos:start="183:25" pos:end="183:43"><name pos:start="183:25" pos:end="183:43">QCOW2_DISCARD_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="185:5" pos:end="185:13">return <expr pos:start="185:12" pos:end="185:12"><literal type="number" pos:start="185:12" pos:end="185:12">0</literal></expr>;</return>

 <label pos:start="187:2" pos:end="187:6"><name pos:start="187:2" pos:end="187:5">fail</name>:</label>

    <expr_stmt pos:start="189:5" pos:end="189:25"><expr pos:start="189:5" pos:end="189:24"><call pos:start="189:5" pos:end="189:24"><name pos:start="189:5" pos:end="189:10">g_free</name><argument_list pos:start="189:11" pos:end="189:24">(<argument pos:start="189:12" pos:end="189:23"><expr pos:start="189:12" pos:end="189:23"><name pos:start="189:12" pos:end="189:23">new_l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="193:45"><expr pos:start="191:5" pos:end="193:44"><call pos:start="191:5" pos:end="193:44"><name pos:start="191:5" pos:end="191:23">qcow2_free_clusters</name><argument_list pos:start="191:24" pos:end="193:44">(<argument pos:start="191:25" pos:end="191:26"><expr pos:start="191:25" pos:end="191:26"><name pos:start="191:25" pos:end="191:26">bs</name></expr></argument>, <argument pos:start="191:29" pos:end="191:47"><expr pos:start="191:29" pos:end="191:47"><name pos:start="191:29" pos:end="191:47">new_l1_table_offset</name></expr></argument>, <argument pos:start="191:50" pos:end="191:61"><expr pos:start="191:50" pos:end="191:61"><name pos:start="191:50" pos:end="191:61">new_l1_size2</name></expr></argument>,

                        <argument pos:start="193:25" pos:end="193:43"><expr pos:start="193:25" pos:end="193:43"><name pos:start="193:25" pos:end="193:43">QCOW2_DISCARD_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="195:5" pos:end="195:15">return <expr pos:start="195:12" pos:end="195:14"><name pos:start="195:12" pos:end="195:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
