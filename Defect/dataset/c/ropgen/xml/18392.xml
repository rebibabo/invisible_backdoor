<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18392.c" pos:tabs="8"><function pos:start="1:1" pos:end="76:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">ppc_translate_init</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="76:1">{<block_content pos:start="3:5" pos:end="75:18">
    <decl_stmt pos:start="3:5" pos:end="3:10"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:12"><decl pos:start="4:5" pos:end="4:11"><type pos:start="4:5" pos:end="4:9"><name pos:start="4:5" pos:end="4:8">char</name><modifier pos:start="4:9" pos:end="4:9">*</modifier></type> <name pos:start="4:11" pos:end="4:11">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">size_t</name></type> <name pos:start="5:12" pos:end="5:29">cpu_reg_names_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:29"><decl pos:start="6:5" pos:end="6:28"><type pos:start="6:5" pos:end="6:14"><specifier pos:start="6:5" pos:end="6:10">static</specifier> <name pos:start="6:12" pos:end="6:14">int</name></type> <name pos:start="6:16" pos:end="6:24">done_init</name> <init pos:start="6:26" pos:end="6:28">= <expr pos:start="6:28" pos:end="6:28"><literal type="number" pos:start="6:28" pos:end="6:28">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="7:5" pos:end="8:15"><if pos:start="7:5" pos:end="8:15">if <condition pos:start="7:8" pos:end="7:18">(<expr pos:start="7:9" pos:end="7:17"><name pos:start="7:9" pos:end="7:17">done_init</name></expr>)</condition><block type="pseudo" pos:start="8:9" pos:end="8:15"><block_content pos:start="8:9" pos:end="8:15">
        <return pos:start="8:9" pos:end="8:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:55"><expr pos:start="9:5" pos:end="9:54"><name pos:start="9:5" pos:end="9:11">cpu_env</name> <operator pos:start="9:13" pos:end="9:13">=</operator> <call pos:start="9:15" pos:end="9:54"><name pos:start="9:15" pos:end="9:36">tcg_global_reg_new_ptr</name><argument_list pos:start="9:37" pos:end="9:54">(<argument pos:start="9:38" pos:end="9:46"><expr pos:start="9:38" pos:end="9:46"><name pos:start="9:38" pos:end="9:46">TCG_AREG0</name></expr></argument>, <argument pos:start="9:49" pos:end="9:53"><expr pos:start="9:49" pos:end="9:53"><literal type="string" pos:start="9:49" pos:end="9:53">"env"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:22"><expr pos:start="10:5" pos:end="10:21"><name pos:start="10:5" pos:end="10:5">p</name> <operator pos:start="10:7" pos:end="10:7">=</operator> <name pos:start="10:9" pos:end="10:21">cpu_reg_names</name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:47"><expr pos:start="11:5" pos:end="11:46"><name pos:start="11:5" pos:end="11:22">cpu_reg_names_size</name> <operator pos:start="11:24" pos:end="11:24">=</operator> <sizeof pos:start="11:26" pos:end="11:46">sizeof<argument_list pos:start="11:32" pos:end="11:46">(<argument pos:start="11:33" pos:end="11:45"><expr pos:start="11:33" pos:end="11:45"><name pos:start="11:33" pos:end="11:45">cpu_reg_names</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <for pos:start="12:5" pos:end="18:5">for <control pos:start="12:9" pos:end="12:27">(<init pos:start="12:10" pos:end="12:15"><expr pos:start="12:10" pos:end="12:14"><name pos:start="12:10" pos:end="12:10">i</name> <operator pos:start="12:12" pos:end="12:12">=</operator> <literal type="number" pos:start="12:14" pos:end="12:14">0</literal></expr>;</init> <condition pos:start="12:17" pos:end="12:22"><expr pos:start="12:17" pos:end="12:21"><name pos:start="12:17" pos:end="12:17">i</name> <operator pos:start="12:19" pos:end="12:19">&lt;</operator> <literal type="number" pos:start="12:21" pos:end="12:21">8</literal></expr>;</condition> <incr pos:start="12:24" pos:end="12:26"><expr pos:start="12:24" pos:end="12:26"><name pos:start="12:24" pos:end="12:24">i</name><operator pos:start="12:25" pos:end="12:26">++</operator></expr></incr>)</control> <block pos:start="12:29" pos:end="18:5">{<block_content pos:start="13:9" pos:end="17:32">
        <expr_stmt pos:start="13:9" pos:end="13:52"><expr pos:start="13:9" pos:end="13:51"><call pos:start="13:9" pos:end="13:51"><name pos:start="13:9" pos:end="13:16">snprintf</name><argument_list pos:start="13:17" pos:end="13:51">(<argument pos:start="13:18" pos:end="13:18"><expr pos:start="13:18" pos:end="13:18"><name pos:start="13:18" pos:end="13:18">p</name></expr></argument>, <argument pos:start="13:21" pos:end="13:38"><expr pos:start="13:21" pos:end="13:38"><name pos:start="13:21" pos:end="13:38">cpu_reg_names_size</name></expr></argument>, <argument pos:start="13:41" pos:end="13:47"><expr pos:start="13:41" pos:end="13:47"><literal type="string" pos:start="13:41" pos:end="13:47">"crf%d"</literal></expr></argument>, <argument pos:start="13:50" pos:end="13:50"><expr pos:start="13:50" pos:end="13:50"><name pos:start="13:50" pos:end="13:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="14:9" pos:end="15:75"><expr pos:start="14:9" pos:end="15:74"><name pos:start="14:9" pos:end="14:18"><name pos:start="14:9" pos:end="14:15">cpu_crf</name><index pos:start="14:16" pos:end="14:18">[<expr pos:start="14:17" pos:end="14:17"><name pos:start="14:17" pos:end="14:17">i</name></expr>]</index></name> <operator pos:start="14:20" pos:end="14:20">=</operator> <call pos:start="14:22" pos:end="15:74"><name pos:start="14:22" pos:end="14:43">tcg_global_mem_new_i32</name><argument_list pos:start="14:44" pos:end="15:74">(<argument pos:start="14:45" pos:end="14:53"><expr pos:start="14:45" pos:end="14:53"><name pos:start="14:45" pos:end="14:53">TCG_AREG0</name></expr></argument>,
                                            <argument pos:start="15:45" pos:end="15:70"><expr pos:start="15:45" pos:end="15:70"><call pos:start="15:45" pos:end="15:70"><name pos:start="15:45" pos:end="15:52">offsetof</name><argument_list pos:start="15:53" pos:end="15:70">(<argument pos:start="15:54" pos:end="15:61"><expr pos:start="15:54" pos:end="15:61"><name pos:start="15:54" pos:end="15:61">CPUState</name></expr></argument>, <argument pos:start="15:64" pos:end="15:69"><expr pos:start="15:64" pos:end="15:69"><name pos:start="15:64" pos:end="15:69"><name pos:start="15:64" pos:end="15:66">crf</name><index pos:start="15:67" pos:end="15:69">[<expr pos:start="15:68" pos:end="15:68"><name pos:start="15:68" pos:end="15:68">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:73" pos:end="15:73"><expr pos:start="15:73" pos:end="15:73"><name pos:start="15:73" pos:end="15:73">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:15"><expr pos:start="16:9" pos:end="16:14"><name pos:start="16:9" pos:end="16:9">p</name> <operator pos:start="16:11" pos:end="16:12">+=</operator> <literal type="number" pos:start="16:14" pos:end="16:14">5</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:32"><expr pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:26">cpu_reg_names_size</name> <operator pos:start="17:28" pos:end="17:29">-=</operator> <literal type="number" pos:start="17:31" pos:end="17:31">5</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="19:5" pos:end="54:5">for <control pos:start="19:9" pos:end="19:28">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:23"><expr pos:start="19:17" pos:end="19:22"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <literal type="number" pos:start="19:21" pos:end="19:22">32</literal></expr>;</condition> <incr pos:start="19:25" pos:end="19:27"><expr pos:start="19:25" pos:end="19:27"><name pos:start="19:25" pos:end="19:25">i</name><operator pos:start="19:26" pos:end="19:27">++</operator></expr></incr>)</control> <block pos:start="19:30" pos:end="54:5">{<block_content pos:start="20:9" pos:end="53:47">
        <expr_stmt pos:start="20:9" pos:end="20:50"><expr pos:start="20:9" pos:end="20:49"><call pos:start="20:9" pos:end="20:49"><name pos:start="20:9" pos:end="20:16">snprintf</name><argument_list pos:start="20:17" pos:end="20:49">(<argument pos:start="20:18" pos:end="20:18"><expr pos:start="20:18" pos:end="20:18"><name pos:start="20:18" pos:end="20:18">p</name></expr></argument>, <argument pos:start="20:21" pos:end="20:38"><expr pos:start="20:21" pos:end="20:38"><name pos:start="20:21" pos:end="20:38">cpu_reg_names_size</name></expr></argument>, <argument pos:start="20:41" pos:end="20:45"><expr pos:start="20:41" pos:end="20:45"><literal type="string" pos:start="20:41" pos:end="20:45">"r%d"</literal></expr></argument>, <argument pos:start="20:48" pos:end="20:48"><expr pos:start="20:48" pos:end="20:48"><name pos:start="20:48" pos:end="20:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="21:9" pos:end="22:71"><expr pos:start="21:9" pos:end="22:70"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:15">cpu_gpr</name><index pos:start="21:16" pos:end="21:18">[<expr pos:start="21:17" pos:end="21:17"><name pos:start="21:17" pos:end="21:17">i</name></expr>]</index></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <call pos:start="21:22" pos:end="22:70"><name pos:start="21:22" pos:end="21:39">tcg_global_mem_new</name><argument_list pos:start="21:40" pos:end="22:70">(<argument pos:start="21:41" pos:end="21:49"><expr pos:start="21:41" pos:end="21:49"><name pos:start="21:41" pos:end="21:49">TCG_AREG0</name></expr></argument>,
                                        <argument pos:start="22:41" pos:end="22:66"><expr pos:start="22:41" pos:end="22:66"><call pos:start="22:41" pos:end="22:66"><name pos:start="22:41" pos:end="22:48">offsetof</name><argument_list pos:start="22:49" pos:end="22:66">(<argument pos:start="22:50" pos:end="22:57"><expr pos:start="22:50" pos:end="22:57"><name pos:start="22:50" pos:end="22:57">CPUState</name></expr></argument>, <argument pos:start="22:60" pos:end="22:65"><expr pos:start="22:60" pos:end="22:65"><name pos:start="22:60" pos:end="22:65"><name pos:start="22:60" pos:end="22:62">gpr</name><index pos:start="22:63" pos:end="22:65">[<expr pos:start="22:64" pos:end="22:64"><name pos:start="22:64" pos:end="22:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="22:69" pos:end="22:69"><expr pos:start="22:69" pos:end="22:69"><name pos:start="22:69" pos:end="22:69">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:9">p</name> <operator pos:start="23:11" pos:end="23:12">+=</operator> <ternary pos:start="23:14" pos:end="23:29"><condition pos:start="23:14" pos:end="23:23"><expr pos:start="23:14" pos:end="23:21"><operator pos:start="23:14" pos:end="23:14">(</operator><name pos:start="23:15" pos:end="23:15">i</name> <operator pos:start="23:17" pos:end="23:17">&lt;</operator> <literal type="number" pos:start="23:19" pos:end="23:20">10</literal><operator pos:start="23:21" pos:end="23:21">)</operator></expr> ?</condition><then pos:start="23:25" pos:end="23:25"> <expr pos:start="23:25" pos:end="23:25"><literal type="number" pos:start="23:25" pos:end="23:25">3</literal></expr> </then><else pos:start="23:27" pos:end="23:29">: <expr pos:start="23:29" pos:end="23:29"><literal type="number" pos:start="23:29" pos:end="23:29">4</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="24:9" pos:end="26:0"><expr pos:start="24:9" pos:end="24:46"><name pos:start="24:9" pos:end="24:26">cpu_reg_names_size</name> <operator pos:start="24:28" pos:end="24:29">-=</operator> <ternary pos:start="24:31" pos:end="24:46"><condition pos:start="24:31" pos:end="24:40"><expr pos:start="24:31" pos:end="24:38"><operator pos:start="24:31" pos:end="24:31">(</operator><name pos:start="24:32" pos:end="24:32">i</name> <operator pos:start="24:34" pos:end="24:34">&lt;</operator> <literal type="number" pos:start="24:36" pos:end="24:37">10</literal><operator pos:start="24:38" pos:end="24:38">)</operator></expr> ?</condition><then pos:start="24:42" pos:end="24:42"> <expr pos:start="24:42" pos:end="24:42"><literal type="number" pos:start="24:42" pos:end="24:42">3</literal></expr> </then><else pos:start="24:44" pos:end="24:46">: <expr pos:start="24:46" pos:end="24:46"><literal type="number" pos:start="24:46" pos:end="24:46">4</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:if pos:start="25:1" pos:end="25:26">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:26"><operator pos:start="25:5" pos:end="25:5">!</operator><call pos:start="25:6" pos:end="25:26"><name pos:start="25:6" pos:end="25:12">defined</name><argument_list pos:start="25:13" pos:end="25:26">(<argument pos:start="25:14" pos:end="25:25"><expr pos:start="25:14" pos:end="25:25"><name pos:start="25:14" pos:end="25:25">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt pos:start="26:9" pos:end="26:51"><expr pos:start="26:9" pos:end="26:50"><call pos:start="26:9" pos:end="26:50"><name pos:start="26:9" pos:end="26:16">snprintf</name><argument_list pos:start="26:17" pos:end="26:50">(<argument pos:start="26:18" pos:end="26:18"><expr pos:start="26:18" pos:end="26:18"><name pos:start="26:18" pos:end="26:18">p</name></expr></argument>, <argument pos:start="26:21" pos:end="26:38"><expr pos:start="26:21" pos:end="26:38"><name pos:start="26:21" pos:end="26:38">cpu_reg_names_size</name></expr></argument>, <argument pos:start="26:41" pos:end="26:46"><expr pos:start="26:41" pos:end="26:46"><literal type="string" pos:start="26:41" pos:end="26:46">"r%dH"</literal></expr></argument>, <argument pos:start="26:49" pos:end="26:49"><expr pos:start="26:49" pos:end="26:49"><name pos:start="26:49" pos:end="26:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="28:77"><expr pos:start="27:9" pos:end="28:76"><name pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:16">cpu_gprh</name><index pos:start="27:17" pos:end="27:19">[<expr pos:start="27:18" pos:end="27:18"><name pos:start="27:18" pos:end="27:18">i</name></expr>]</index></name> <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="28:76"><name pos:start="27:23" pos:end="27:44">tcg_global_mem_new_i32</name><argument_list pos:start="27:45" pos:end="28:76">(<argument pos:start="27:46" pos:end="27:54"><expr pos:start="27:46" pos:end="27:54"><name pos:start="27:46" pos:end="27:54">TCG_AREG0</name></expr></argument>,
                                             <argument pos:start="28:46" pos:end="28:72"><expr pos:start="28:46" pos:end="28:72"><call pos:start="28:46" pos:end="28:72"><name pos:start="28:46" pos:end="28:53">offsetof</name><argument_list pos:start="28:54" pos:end="28:72">(<argument pos:start="28:55" pos:end="28:62"><expr pos:start="28:55" pos:end="28:62"><name pos:start="28:55" pos:end="28:62">CPUState</name></expr></argument>, <argument pos:start="28:65" pos:end="28:71"><expr pos:start="28:65" pos:end="28:71"><name pos:start="28:65" pos:end="28:71"><name pos:start="28:65" pos:end="28:68">gprh</name><index pos:start="28:69" pos:end="28:71">[<expr pos:start="28:70" pos:end="28:70"><name pos:start="28:70" pos:end="28:70">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="28:75" pos:end="28:75"><expr pos:start="28:75" pos:end="28:75"><name pos:start="28:75" pos:end="28:75">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:9">p</name> <operator pos:start="29:11" pos:end="29:12">+=</operator> <ternary pos:start="29:14" pos:end="29:29"><condition pos:start="29:14" pos:end="29:23"><expr pos:start="29:14" pos:end="29:21"><operator pos:start="29:14" pos:end="29:14">(</operator><name pos:start="29:15" pos:end="29:15">i</name> <operator pos:start="29:17" pos:end="29:17">&lt;</operator> <literal type="number" pos:start="29:19" pos:end="29:20">10</literal><operator pos:start="29:21" pos:end="29:21">)</operator></expr> ?</condition><then pos:start="29:25" pos:end="29:25"> <expr pos:start="29:25" pos:end="29:25"><literal type="number" pos:start="29:25" pos:end="29:25">4</literal></expr> </then><else pos:start="29:27" pos:end="29:29">: <expr pos:start="29:29" pos:end="29:29"><literal type="number" pos:start="29:29" pos:end="29:29">5</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:47"><expr pos:start="30:9" pos:end="30:46"><name pos:start="30:9" pos:end="30:26">cpu_reg_names_size</name> <operator pos:start="30:28" pos:end="30:29">-=</operator> <ternary pos:start="30:31" pos:end="30:46"><condition pos:start="30:31" pos:end="30:40"><expr pos:start="30:31" pos:end="30:38"><operator pos:start="30:31" pos:end="30:31">(</operator><name pos:start="30:32" pos:end="30:32">i</name> <operator pos:start="30:34" pos:end="30:34">&lt;</operator> <literal type="number" pos:start="30:36" pos:end="30:37">10</literal><operator pos:start="30:38" pos:end="30:38">)</operator></expr> ?</condition><then pos:start="30:42" pos:end="30:42"> <expr pos:start="30:42" pos:end="30:42"><literal type="number" pos:start="30:42" pos:end="30:42">4</literal></expr> </then><else pos:start="30:44" pos:end="30:46">: <expr pos:start="30:46" pos:end="30:46"><literal type="number" pos:start="30:46" pos:end="30:46">5</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:51"><expr pos:start="31:9" pos:end="31:50"><call pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:16">snprintf</name><argument_list pos:start="31:17" pos:end="31:50">(<argument pos:start="31:18" pos:end="31:18"><expr pos:start="31:18" pos:end="31:18"><name pos:start="31:18" pos:end="31:18">p</name></expr></argument>, <argument pos:start="31:21" pos:end="31:38"><expr pos:start="31:21" pos:end="31:38"><name pos:start="31:21" pos:end="31:38">cpu_reg_names_size</name></expr></argument>, <argument pos:start="31:41" pos:end="31:46"><expr pos:start="31:41" pos:end="31:46"><literal type="string" pos:start="31:41" pos:end="31:46">"fp%d"</literal></expr></argument>, <argument pos:start="31:49" pos:end="31:49"><expr pos:start="31:49" pos:end="31:49"><name pos:start="31:49" pos:end="31:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="33:75"><expr pos:start="32:9" pos:end="33:74"><name pos:start="32:9" pos:end="32:18"><name pos:start="32:9" pos:end="32:15">cpu_fpr</name><index pos:start="32:16" pos:end="32:18">[<expr pos:start="32:17" pos:end="32:17"><name pos:start="32:17" pos:end="32:17">i</name></expr>]</index></name> <operator pos:start="32:20" pos:end="32:20">=</operator> <call pos:start="32:22" pos:end="33:74"><name pos:start="32:22" pos:end="32:43">tcg_global_mem_new_i64</name><argument_list pos:start="32:44" pos:end="33:74">(<argument pos:start="32:45" pos:end="32:53"><expr pos:start="32:45" pos:end="32:53"><name pos:start="32:45" pos:end="32:53">TCG_AREG0</name></expr></argument>,
                                            <argument pos:start="33:45" pos:end="33:70"><expr pos:start="33:45" pos:end="33:70"><call pos:start="33:45" pos:end="33:70"><name pos:start="33:45" pos:end="33:52">offsetof</name><argument_list pos:start="33:53" pos:end="33:70">(<argument pos:start="33:54" pos:end="33:61"><expr pos:start="33:54" pos:end="33:61"><name pos:start="33:54" pos:end="33:61">CPUState</name></expr></argument>, <argument pos:start="33:64" pos:end="33:69"><expr pos:start="33:64" pos:end="33:69"><name pos:start="33:64" pos:end="33:69"><name pos:start="33:64" pos:end="33:66">fpr</name><index pos:start="33:67" pos:end="33:69">[<expr pos:start="33:68" pos:end="33:68"><name pos:start="33:68" pos:end="33:68">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="33:73" pos:end="33:73"><expr pos:start="33:73" pos:end="33:73"><name pos:start="33:73" pos:end="33:73">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:30"><expr pos:start="34:9" pos:end="34:29"><name pos:start="34:9" pos:end="34:9">p</name> <operator pos:start="34:11" pos:end="34:12">+=</operator> <ternary pos:start="34:14" pos:end="34:29"><condition pos:start="34:14" pos:end="34:23"><expr pos:start="34:14" pos:end="34:21"><operator pos:start="34:14" pos:end="34:14">(</operator><name pos:start="34:15" pos:end="34:15">i</name> <operator pos:start="34:17" pos:end="34:17">&lt;</operator> <literal type="number" pos:start="34:19" pos:end="34:20">10</literal><operator pos:start="34:21" pos:end="34:21">)</operator></expr> ?</condition><then pos:start="34:25" pos:end="34:25"> <expr pos:start="34:25" pos:end="34:25"><literal type="number" pos:start="34:25" pos:end="34:25">4</literal></expr> </then><else pos:start="34:27" pos:end="34:29">: <expr pos:start="34:29" pos:end="34:29"><literal type="number" pos:start="34:29" pos:end="34:29">5</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:47"><expr pos:start="35:9" pos:end="35:46"><name pos:start="35:9" pos:end="35:26">cpu_reg_names_size</name> <operator pos:start="35:28" pos:end="35:29">-=</operator> <ternary pos:start="35:31" pos:end="35:46"><condition pos:start="35:31" pos:end="35:40"><expr pos:start="35:31" pos:end="35:38"><operator pos:start="35:31" pos:end="35:31">(</operator><name pos:start="35:32" pos:end="35:32">i</name> <operator pos:start="35:34" pos:end="35:34">&lt;</operator> <literal type="number" pos:start="35:36" pos:end="35:37">10</literal><operator pos:start="35:38" pos:end="35:38">)</operator></expr> ?</condition><then pos:start="35:42" pos:end="35:42"> <expr pos:start="35:42" pos:end="35:42"><literal type="number" pos:start="35:42" pos:end="35:42">4</literal></expr> </then><else pos:start="35:44" pos:end="35:46">: <expr pos:start="35:46" pos:end="35:46"><literal type="number" pos:start="35:46" pos:end="35:46">5</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="38:0"><expr pos:start="36:9" pos:end="36:52"><call pos:start="36:9" pos:end="36:52"><name pos:start="36:9" pos:end="36:16">snprintf</name><argument_list pos:start="36:17" pos:end="36:52">(<argument pos:start="36:18" pos:end="36:18"><expr pos:start="36:18" pos:end="36:18"><name pos:start="36:18" pos:end="36:18">p</name></expr></argument>, <argument pos:start="36:21" pos:end="36:38"><expr pos:start="36:21" pos:end="36:38"><name pos:start="36:21" pos:end="36:38">cpu_reg_names_size</name></expr></argument>, <argument pos:start="36:41" pos:end="36:48"><expr pos:start="36:41" pos:end="36:48"><literal type="string" pos:start="36:41" pos:end="36:48">"avr%dH"</literal></expr></argument>, <argument pos:start="36:51" pos:end="36:51"><expr pos:start="36:51" pos:end="36:51"><name pos:start="36:51" pos:end="36:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="37:1" pos:end="37:27">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>
        <expr_stmt pos:start="38:9" pos:end="41:0"><expr pos:start="38:9" pos:end="39:82"><name pos:start="38:9" pos:end="38:19"><name pos:start="38:9" pos:end="38:16">cpu_avrh</name><index pos:start="38:17" pos:end="38:19">[<expr pos:start="38:18" pos:end="38:18"><name pos:start="38:18" pos:end="38:18">i</name></expr>]</index></name> <operator pos:start="38:21" pos:end="38:21">=</operator> <call pos:start="38:23" pos:end="39:82"><name pos:start="38:23" pos:end="38:44">tcg_global_mem_new_i64</name><argument_list pos:start="38:45" pos:end="39:82">(<argument pos:start="38:46" pos:end="38:54"><expr pos:start="38:46" pos:end="38:54"><name pos:start="38:46" pos:end="38:54">TCG_AREG0</name></expr></argument>,
                                             <argument pos:start="39:46" pos:end="39:78"><expr pos:start="39:46" pos:end="39:78"><call pos:start="39:46" pos:end="39:78"><name pos:start="39:46" pos:end="39:53">offsetof</name><argument_list pos:start="39:54" pos:end="39:78">(<argument pos:start="39:55" pos:end="39:62"><expr pos:start="39:55" pos:end="39:62"><name pos:start="39:55" pos:end="39:62">CPUState</name></expr></argument>, <argument pos:start="39:65" pos:end="39:77"><expr pos:start="39:65" pos:end="39:77"><name pos:start="39:65" pos:end="39:70"><name pos:start="39:65" pos:end="39:67">avr</name><index pos:start="39:68" pos:end="39:70">[<expr pos:start="39:69" pos:end="39:69"><name pos:start="39:69" pos:end="39:69">i</name></expr>]</index></name><operator pos:start="39:71" pos:end="39:71">.</operator><name pos:start="39:72" pos:end="39:77"><name pos:start="39:72" pos:end="39:74">u64</name><index pos:start="39:75" pos:end="39:77">[<expr pos:start="39:76" pos:end="39:76"><literal type="number" pos:start="39:76" pos:end="39:76">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:81" pos:end="39:81"><expr pos:start="39:81" pos:end="39:81"><name pos:start="39:81" pos:end="39:81">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="40:1" pos:end="40:5">#<cpp:directive pos:start="40:2" pos:end="40:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="41:9" pos:end="42:83"><expr pos:start="41:9" pos:end="42:82"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:16">cpu_avrh</name><index pos:start="41:17" pos:end="41:19">[<expr pos:start="41:18" pos:end="41:18"><name pos:start="41:18" pos:end="41:18">i</name></expr>]</index></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="42:82"><name pos:start="41:23" pos:end="41:44">tcg_global_mem_new_i64</name><argument_list pos:start="41:45" pos:end="42:82">(<argument pos:start="41:46" pos:end="41:54"><expr pos:start="41:46" pos:end="41:54"><name pos:start="41:46" pos:end="41:54">TCG_AREG0</name></expr></argument>,
                                             <argument pos:start="42:46" pos:end="42:78"><expr pos:start="42:46" pos:end="42:78"><call pos:start="42:46" pos:end="42:78"><name pos:start="42:46" pos:end="42:53">offsetof</name><argument_list pos:start="42:54" pos:end="42:78">(<argument pos:start="42:55" pos:end="42:62"><expr pos:start="42:55" pos:end="42:62"><name pos:start="42:55" pos:end="42:62">CPUState</name></expr></argument>, <argument pos:start="42:65" pos:end="42:77"><expr pos:start="42:65" pos:end="42:77"><name pos:start="42:65" pos:end="42:70"><name pos:start="42:65" pos:end="42:67">avr</name><index pos:start="42:68" pos:end="42:70">[<expr pos:start="42:69" pos:end="42:69"><name pos:start="42:69" pos:end="42:69">i</name></expr>]</index></name><operator pos:start="42:71" pos:end="42:71">.</operator><name pos:start="42:72" pos:end="42:77"><name pos:start="42:72" pos:end="42:74">u64</name><index pos:start="42:75" pos:end="42:77">[<expr pos:start="42:76" pos:end="42:76"><literal type="number" pos:start="42:76" pos:end="42:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="42:81" pos:end="42:81"><expr pos:start="42:81" pos:end="42:81"><name pos:start="42:81" pos:end="42:81">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:9">p</name> <operator pos:start="43:11" pos:end="43:12">+=</operator> <ternary pos:start="43:14" pos:end="43:29"><condition pos:start="43:14" pos:end="43:23"><expr pos:start="43:14" pos:end="43:21"><operator pos:start="43:14" pos:end="43:14">(</operator><name pos:start="43:15" pos:end="43:15">i</name> <operator pos:start="43:17" pos:end="43:17">&lt;</operator> <literal type="number" pos:start="43:19" pos:end="43:20">10</literal><operator pos:start="43:21" pos:end="43:21">)</operator></expr> ?</condition><then pos:start="43:25" pos:end="43:25"> <expr pos:start="43:25" pos:end="43:25"><literal type="number" pos:start="43:25" pos:end="43:25">6</literal></expr> </then><else pos:start="43:27" pos:end="43:29">: <expr pos:start="43:29" pos:end="43:29"><literal type="number" pos:start="43:29" pos:end="43:29">7</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="44:9" pos:end="44:47"><expr pos:start="44:9" pos:end="44:46"><name pos:start="44:9" pos:end="44:26">cpu_reg_names_size</name> <operator pos:start="44:28" pos:end="44:29">-=</operator> <ternary pos:start="44:31" pos:end="44:46"><condition pos:start="44:31" pos:end="44:40"><expr pos:start="44:31" pos:end="44:38"><operator pos:start="44:31" pos:end="44:31">(</operator><name pos:start="44:32" pos:end="44:32">i</name> <operator pos:start="44:34" pos:end="44:34">&lt;</operator> <literal type="number" pos:start="44:36" pos:end="44:37">10</literal><operator pos:start="44:38" pos:end="44:38">)</operator></expr> ?</condition><then pos:start="44:42" pos:end="44:42"> <expr pos:start="44:42" pos:end="44:42"><literal type="number" pos:start="44:42" pos:end="44:42">6</literal></expr> </then><else pos:start="44:44" pos:end="44:46">: <expr pos:start="44:46" pos:end="44:46"><literal type="number" pos:start="44:46" pos:end="44:46">7</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="45:9" pos:end="47:0"><expr pos:start="45:9" pos:end="45:52"><call pos:start="45:9" pos:end="45:52"><name pos:start="45:9" pos:end="45:16">snprintf</name><argument_list pos:start="45:17" pos:end="45:52">(<argument pos:start="45:18" pos:end="45:18"><expr pos:start="45:18" pos:end="45:18"><name pos:start="45:18" pos:end="45:18">p</name></expr></argument>, <argument pos:start="45:21" pos:end="45:38"><expr pos:start="45:21" pos:end="45:38"><name pos:start="45:21" pos:end="45:38">cpu_reg_names_size</name></expr></argument>, <argument pos:start="45:41" pos:end="45:48"><expr pos:start="45:41" pos:end="45:48"><literal type="string" pos:start="45:41" pos:end="45:48">"avr%dL"</literal></expr></argument>, <argument pos:start="45:51" pos:end="45:51"><expr pos:start="45:51" pos:end="45:51"><name pos:start="45:51" pos:end="45:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="46:1" pos:end="46:27">#<cpp:directive pos:start="46:2" pos:end="46:6">ifdef</cpp:directive> <name pos:start="46:8" pos:end="46:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>
        <expr_stmt pos:start="47:9" pos:end="50:0"><expr pos:start="47:9" pos:end="48:82"><name pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:16">cpu_avrl</name><index pos:start="47:17" pos:end="47:19">[<expr pos:start="47:18" pos:end="47:18"><name pos:start="47:18" pos:end="47:18">i</name></expr>]</index></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <call pos:start="47:23" pos:end="48:82"><name pos:start="47:23" pos:end="47:44">tcg_global_mem_new_i64</name><argument_list pos:start="47:45" pos:end="48:82">(<argument pos:start="47:46" pos:end="47:54"><expr pos:start="47:46" pos:end="47:54"><name pos:start="47:46" pos:end="47:54">TCG_AREG0</name></expr></argument>,
                                             <argument pos:start="48:46" pos:end="48:78"><expr pos:start="48:46" pos:end="48:78"><call pos:start="48:46" pos:end="48:78"><name pos:start="48:46" pos:end="48:53">offsetof</name><argument_list pos:start="48:54" pos:end="48:78">(<argument pos:start="48:55" pos:end="48:62"><expr pos:start="48:55" pos:end="48:62"><name pos:start="48:55" pos:end="48:62">CPUState</name></expr></argument>, <argument pos:start="48:65" pos:end="48:77"><expr pos:start="48:65" pos:end="48:77"><name pos:start="48:65" pos:end="48:70"><name pos:start="48:65" pos:end="48:67">avr</name><index pos:start="48:68" pos:end="48:70">[<expr pos:start="48:69" pos:end="48:69"><name pos:start="48:69" pos:end="48:69">i</name></expr>]</index></name><operator pos:start="48:71" pos:end="48:71">.</operator><name pos:start="48:72" pos:end="48:77"><name pos:start="48:72" pos:end="48:74">u64</name><index pos:start="48:75" pos:end="48:77">[<expr pos:start="48:76" pos:end="48:76"><literal type="number" pos:start="48:76" pos:end="48:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="48:81" pos:end="48:81"><expr pos:start="48:81" pos:end="48:81"><name pos:start="48:81" pos:end="48:81">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="50:9" pos:end="51:83"><expr pos:start="50:9" pos:end="51:82"><name pos:start="50:9" pos:end="50:19"><name pos:start="50:9" pos:end="50:16">cpu_avrl</name><index pos:start="50:17" pos:end="50:19">[<expr pos:start="50:18" pos:end="50:18"><name pos:start="50:18" pos:end="50:18">i</name></expr>]</index></name> <operator pos:start="50:21" pos:end="50:21">=</operator> <call pos:start="50:23" pos:end="51:82"><name pos:start="50:23" pos:end="50:44">tcg_global_mem_new_i64</name><argument_list pos:start="50:45" pos:end="51:82">(<argument pos:start="50:46" pos:end="50:54"><expr pos:start="50:46" pos:end="50:54"><name pos:start="50:46" pos:end="50:54">TCG_AREG0</name></expr></argument>,
                                             <argument pos:start="51:46" pos:end="51:78"><expr pos:start="51:46" pos:end="51:78"><call pos:start="51:46" pos:end="51:78"><name pos:start="51:46" pos:end="51:53">offsetof</name><argument_list pos:start="51:54" pos:end="51:78">(<argument pos:start="51:55" pos:end="51:62"><expr pos:start="51:55" pos:end="51:62"><name pos:start="51:55" pos:end="51:62">CPUState</name></expr></argument>, <argument pos:start="51:65" pos:end="51:77"><expr pos:start="51:65" pos:end="51:77"><name pos:start="51:65" pos:end="51:70"><name pos:start="51:65" pos:end="51:67">avr</name><index pos:start="51:68" pos:end="51:70">[<expr pos:start="51:69" pos:end="51:69"><name pos:start="51:69" pos:end="51:69">i</name></expr>]</index></name><operator pos:start="51:71" pos:end="51:71">.</operator><name pos:start="51:72" pos:end="51:77"><name pos:start="51:72" pos:end="51:74">u64</name><index pos:start="51:75" pos:end="51:77">[<expr pos:start="51:76" pos:end="51:76"><literal type="number" pos:start="51:76" pos:end="51:76">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:81" pos:end="51:81"><expr pos:start="51:81" pos:end="51:81"><name pos:start="51:81" pos:end="51:81">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="52:9" pos:end="52:30"><expr pos:start="52:9" pos:end="52:29"><name pos:start="52:9" pos:end="52:9">p</name> <operator pos:start="52:11" pos:end="52:12">+=</operator> <ternary pos:start="52:14" pos:end="52:29"><condition pos:start="52:14" pos:end="52:23"><expr pos:start="52:14" pos:end="52:21"><operator pos:start="52:14" pos:end="52:14">(</operator><name pos:start="52:15" pos:end="52:15">i</name> <operator pos:start="52:17" pos:end="52:17">&lt;</operator> <literal type="number" pos:start="52:19" pos:end="52:20">10</literal><operator pos:start="52:21" pos:end="52:21">)</operator></expr> ?</condition><then pos:start="52:25" pos:end="52:25"> <expr pos:start="52:25" pos:end="52:25"><literal type="number" pos:start="52:25" pos:end="52:25">6</literal></expr> </then><else pos:start="52:27" pos:end="52:29">: <expr pos:start="52:29" pos:end="52:29"><literal type="number" pos:start="52:29" pos:end="52:29">7</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:47"><expr pos:start="53:9" pos:end="53:46"><name pos:start="53:9" pos:end="53:26">cpu_reg_names_size</name> <operator pos:start="53:28" pos:end="53:29">-=</operator> <ternary pos:start="53:31" pos:end="53:46"><condition pos:start="53:31" pos:end="53:40"><expr pos:start="53:31" pos:end="53:38"><operator pos:start="53:31" pos:end="53:31">(</operator><name pos:start="53:32" pos:end="53:32">i</name> <operator pos:start="53:34" pos:end="53:34">&lt;</operator> <literal type="number" pos:start="53:36" pos:end="53:37">10</literal><operator pos:start="53:38" pos:end="53:38">)</operator></expr> ?</condition><then pos:start="53:42" pos:end="53:42"> <expr pos:start="53:42" pos:end="53:42"><literal type="number" pos:start="53:42" pos:end="53:42">6</literal></expr> </then><else pos:start="53:44" pos:end="53:46">: <expr pos:start="53:46" pos:end="53:46"><literal type="number" pos:start="53:46" pos:end="53:46">7</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="55:5" pos:end="56:65"><expr pos:start="55:5" pos:end="56:64"><name pos:start="55:5" pos:end="55:11">cpu_nip</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="56:64"><name pos:start="55:15" pos:end="55:32">tcg_global_mem_new</name><argument_list pos:start="55:33" pos:end="56:64">(<argument pos:start="55:34" pos:end="55:42"><expr pos:start="55:34" pos:end="55:42"><name pos:start="55:34" pos:end="55:42">TCG_AREG0</name></expr></argument>,
                                 <argument pos:start="56:34" pos:end="56:56"><expr pos:start="56:34" pos:end="56:56"><call pos:start="56:34" pos:end="56:56"><name pos:start="56:34" pos:end="56:41">offsetof</name><argument_list pos:start="56:42" pos:end="56:56">(<argument pos:start="56:43" pos:end="56:50"><expr pos:start="56:43" pos:end="56:50"><name pos:start="56:43" pos:end="56:50">CPUState</name></expr></argument>, <argument pos:start="56:53" pos:end="56:55"><expr pos:start="56:53" pos:end="56:55"><name pos:start="56:53" pos:end="56:55">nip</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="56:59" pos:end="56:63"><expr pos:start="56:59" pos:end="56:63"><literal type="string" pos:start="56:59" pos:end="56:63">"nip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="58:65"><expr pos:start="57:5" pos:end="58:64"><name pos:start="57:5" pos:end="57:11">cpu_msr</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="58:64"><name pos:start="57:15" pos:end="57:32">tcg_global_mem_new</name><argument_list pos:start="57:33" pos:end="58:64">(<argument pos:start="57:34" pos:end="57:42"><expr pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:42">TCG_AREG0</name></expr></argument>,
                                 <argument pos:start="58:34" pos:end="58:56"><expr pos:start="58:34" pos:end="58:56"><call pos:start="58:34" pos:end="58:56"><name pos:start="58:34" pos:end="58:41">offsetof</name><argument_list pos:start="58:42" pos:end="58:56">(<argument pos:start="58:43" pos:end="58:50"><expr pos:start="58:43" pos:end="58:50"><name pos:start="58:43" pos:end="58:50">CPUState</name></expr></argument>, <argument pos:start="58:53" pos:end="58:55"><expr pos:start="58:53" pos:end="58:55"><name pos:start="58:53" pos:end="58:55">msr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="58:59" pos:end="58:63"><expr pos:start="58:59" pos:end="58:63"><literal type="string" pos:start="58:59" pos:end="58:63">"msr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="60:65"><expr pos:start="59:5" pos:end="60:64"><name pos:start="59:5" pos:end="59:11">cpu_ctr</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="60:64"><name pos:start="59:15" pos:end="59:32">tcg_global_mem_new</name><argument_list pos:start="59:33" pos:end="60:64">(<argument pos:start="59:34" pos:end="59:42"><expr pos:start="59:34" pos:end="59:42"><name pos:start="59:34" pos:end="59:42">TCG_AREG0</name></expr></argument>,
                                 <argument pos:start="60:34" pos:end="60:56"><expr pos:start="60:34" pos:end="60:56"><call pos:start="60:34" pos:end="60:56"><name pos:start="60:34" pos:end="60:41">offsetof</name><argument_list pos:start="60:42" pos:end="60:56">(<argument pos:start="60:43" pos:end="60:50"><expr pos:start="60:43" pos:end="60:50"><name pos:start="60:43" pos:end="60:50">CPUState</name></expr></argument>, <argument pos:start="60:53" pos:end="60:55"><expr pos:start="60:53" pos:end="60:55"><name pos:start="60:53" pos:end="60:55">ctr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="60:59" pos:end="60:63"><expr pos:start="60:59" pos:end="60:63"><literal type="string" pos:start="60:59" pos:end="60:63">"ctr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="61:5" pos:end="62:62"><expr pos:start="61:5" pos:end="62:61"><name pos:start="61:5" pos:end="61:10">cpu_lr</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <call pos:start="61:14" pos:end="62:61"><name pos:start="61:14" pos:end="61:31">tcg_global_mem_new</name><argument_list pos:start="61:32" pos:end="62:61">(<argument pos:start="61:33" pos:end="61:41"><expr pos:start="61:33" pos:end="61:41"><name pos:start="61:33" pos:end="61:41">TCG_AREG0</name></expr></argument>,
                                <argument pos:start="62:33" pos:end="62:54"><expr pos:start="62:33" pos:end="62:54"><call pos:start="62:33" pos:end="62:54"><name pos:start="62:33" pos:end="62:40">offsetof</name><argument_list pos:start="62:41" pos:end="62:54">(<argument pos:start="62:42" pos:end="62:49"><expr pos:start="62:42" pos:end="62:49"><name pos:start="62:42" pos:end="62:49">CPUState</name></expr></argument>, <argument pos:start="62:52" pos:end="62:53"><expr pos:start="62:52" pos:end="62:53"><name pos:start="62:52" pos:end="62:53">lr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="62:57" pos:end="62:60"><expr pos:start="62:57" pos:end="62:60"><literal type="string" pos:start="62:57" pos:end="62:60">"lr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="64:65"><expr pos:start="63:5" pos:end="64:64"><name pos:start="63:5" pos:end="63:11">cpu_xer</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="64:64"><name pos:start="63:15" pos:end="63:32">tcg_global_mem_new</name><argument_list pos:start="63:33" pos:end="64:64">(<argument pos:start="63:34" pos:end="63:42"><expr pos:start="63:34" pos:end="63:42"><name pos:start="63:34" pos:end="63:42">TCG_AREG0</name></expr></argument>,
                                 <argument pos:start="64:34" pos:end="64:56"><expr pos:start="64:34" pos:end="64:56"><call pos:start="64:34" pos:end="64:56"><name pos:start="64:34" pos:end="64:41">offsetof</name><argument_list pos:start="64:42" pos:end="64:56">(<argument pos:start="64:43" pos:end="64:50"><expr pos:start="64:43" pos:end="64:50"><name pos:start="64:43" pos:end="64:50">CPUState</name></expr></argument>, <argument pos:start="64:53" pos:end="64:55"><expr pos:start="64:53" pos:end="64:55"><name pos:start="64:53" pos:end="64:55">xer</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="64:59" pos:end="64:63"><expr pos:start="64:59" pos:end="64:63"><literal type="string" pos:start="64:59" pos:end="64:63">"xer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="67:53"><expr pos:start="65:5" pos:end="67:52"><name pos:start="65:5" pos:end="65:15">cpu_reserve</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="67:52"><name pos:start="65:19" pos:end="65:36">tcg_global_mem_new</name><argument_list pos:start="65:37" pos:end="67:52">(<argument pos:start="65:38" pos:end="65:46"><expr pos:start="65:38" pos:end="65:46"><name pos:start="65:38" pos:end="65:46">TCG_AREG0</name></expr></argument>,
                                     <argument pos:start="66:38" pos:end="66:69"><expr pos:start="66:38" pos:end="66:69"><call pos:start="66:38" pos:end="66:69"><name pos:start="66:38" pos:end="66:45">offsetof</name><argument_list pos:start="66:46" pos:end="66:69">(<argument pos:start="66:47" pos:end="66:54"><expr pos:start="66:47" pos:end="66:54"><name pos:start="66:47" pos:end="66:54">CPUState</name></expr></argument>, <argument pos:start="66:57" pos:end="66:68"><expr pos:start="66:57" pos:end="66:68"><name pos:start="66:57" pos:end="66:68">reserve_addr</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument pos:start="67:38" pos:end="67:51"><expr pos:start="67:38" pos:end="67:51"><literal type="string" pos:start="67:38" pos:end="67:51">"reserve_addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="68:5" pos:end="69:75"><expr pos:start="68:5" pos:end="69:74"><name pos:start="68:5" pos:end="68:13">cpu_fpscr</name> <operator pos:start="68:15" pos:end="68:15">=</operator> <call pos:start="68:17" pos:end="69:74"><name pos:start="68:17" pos:end="68:38">tcg_global_mem_new_i32</name><argument_list pos:start="68:39" pos:end="69:74">(<argument pos:start="68:40" pos:end="68:48"><expr pos:start="68:40" pos:end="68:48"><name pos:start="68:40" pos:end="68:48">TCG_AREG0</name></expr></argument>,
                                       <argument pos:start="69:40" pos:end="69:64"><expr pos:start="69:40" pos:end="69:64"><call pos:start="69:40" pos:end="69:64"><name pos:start="69:40" pos:end="69:47">offsetof</name><argument_list pos:start="69:48" pos:end="69:64">(<argument pos:start="69:49" pos:end="69:56"><expr pos:start="69:49" pos:end="69:56"><name pos:start="69:49" pos:end="69:56">CPUState</name></expr></argument>, <argument pos:start="69:59" pos:end="69:63"><expr pos:start="69:59" pos:end="69:63"><name pos:start="69:59" pos:end="69:63">fpscr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:67" pos:end="69:73"><expr pos:start="69:67" pos:end="69:73"><literal type="string" pos:start="69:67" pos:end="69:73">"fpscr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="70:5" pos:end="75:0"><expr pos:start="70:5" pos:end="71:92"><name pos:start="70:5" pos:end="70:19">cpu_access_type</name> <operator pos:start="70:21" pos:end="70:21">=</operator> <call pos:start="70:23" pos:end="71:92"><name pos:start="70:23" pos:end="70:44">tcg_global_mem_new_i32</name><argument_list pos:start="70:45" pos:end="71:92">(<argument pos:start="70:46" pos:end="70:54"><expr pos:start="70:46" pos:end="70:54"><name pos:start="70:46" pos:end="70:54">TCG_AREG0</name></expr></argument>,
                                             <argument pos:start="71:46" pos:end="71:76"><expr pos:start="71:46" pos:end="71:76"><call pos:start="71:46" pos:end="71:76"><name pos:start="71:46" pos:end="71:53">offsetof</name><argument_list pos:start="71:54" pos:end="71:76">(<argument pos:start="71:55" pos:end="71:62"><expr pos:start="71:55" pos:end="71:62"><name pos:start="71:55" pos:end="71:62">CPUState</name></expr></argument>, <argument pos:start="71:65" pos:end="71:75"><expr pos:start="71:65" pos:end="71:75"><name pos:start="71:65" pos:end="71:75">access_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:79" pos:end="71:91"><expr pos:start="71:79" pos:end="71:91"><literal type="string" pos:start="71:79" pos:end="71:91">"access_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="72:5" pos:end="72:26">/* register helpers */</comment>
<cpp:define pos:start="73:1" pos:end="73:20">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:18">GEN_HELPER</name></cpp:macro> <cpp:value pos:start="73:20" pos:end="73:20">2</cpp:value></cpp:define>
<cpp:include pos:start="74:1" pos:end="74:19">#<cpp:directive pos:start="74:2" pos:end="74:8">include</cpp:directive> <cpp:file pos:start="74:10" pos:end="74:19">"helper.h"</cpp:file></cpp:include>
    <expr_stmt pos:start="75:5" pos:end="75:18"><expr pos:start="75:5" pos:end="75:17"><name pos:start="75:5" pos:end="75:13">done_init</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>;</expr_stmt>
</block_content>}</block></function></unit>
