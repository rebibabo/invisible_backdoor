<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14601.c" pos:tabs="8"><function pos:start="1:1" pos:end="441:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">bink_decode_plane</name><parameter_list pos:start="1:29" pos:end="3:43">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:40">BinkContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">c</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:62"><decl pos:start="1:46" pos:end="1:62"><type pos:start="1:46" pos:end="1:62"><name pos:start="1:46" pos:end="1:58">GetBitContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">gb</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:77"><decl pos:start="1:65" pos:end="1:77"><type pos:start="1:65" pos:end="1:77"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:77">plane_idx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:42">is_chroma</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="441:1">{<block_content pos:start="7:5" pos:end="439:13">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:16">bx</name></decl>, <decl pos:start="9:19" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:20">by</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">dst</name></decl>, <decl pos:start="11:19" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:23">prev</name></decl>, <decl pos:start="11:26" pos:end="11:29"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:29">ref</name></decl>, <decl pos:start="11:32" pos:end="11:41"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:32" pos:end="11:32">*</modifier></type><name pos:start="11:33" pos:end="11:41">ref_start</name></decl>, <decl pos:start="11:44" pos:end="11:51"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:44" pos:end="11:44">*</modifier></type><name pos:start="11:45" pos:end="11:51">ref_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">v</name></decl>, <decl pos:start="13:12" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:17"><name pos:start="13:12" pos:end="13:14">col</name><index pos:start="13:15" pos:end="13:17">[<expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:23">scan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">xoff</name></decl>, <decl pos:start="17:15" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:18">yoff</name></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:43"><expr pos:start="19:5" pos:end="19:42"><call pos:start="19:5" pos:end="19:42"><name pos:start="19:5" pos:end="19:20">LOCAL_ALIGNED_16</name><argument_list pos:start="19:21" pos:end="19:42">(<argument pos:start="19:22" pos:end="19:28"><expr pos:start="19:22" pos:end="19:28"><name pos:start="19:22" pos:end="19:28">DCTELEM</name></expr></argument>, <argument pos:start="19:31" pos:end="19:35"><expr pos:start="19:31" pos:end="19:35"><name pos:start="19:31" pos:end="19:35">block</name></expr></argument>, <argument pos:start="19:38" pos:end="19:41"><expr pos:start="19:38" pos:end="19:41"><index pos:start="19:38" pos:end="19:41">[<expr pos:start="19:39" pos:end="19:40"><literal type="number" pos:start="19:39" pos:end="19:40">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><call pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:20">LOCAL_ALIGNED_16</name><argument_list pos:start="21:21" pos:end="21:43">(<argument pos:start="21:22" pos:end="21:28"><expr pos:start="21:22" pos:end="21:28"><name pos:start="21:22" pos:end="21:28">uint8_t</name></expr></argument>, <argument pos:start="21:31" pos:end="21:36"><expr pos:start="21:31" pos:end="21:36"><name pos:start="21:31" pos:end="21:36">ublock</name></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><index pos:start="21:39" pos:end="21:42">[<expr pos:start="21:40" pos:end="21:41"><literal type="number" pos:start="21:40" pos:end="21:41">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:46"><expr pos:start="23:5" pos:end="23:45"><call pos:start="23:5" pos:end="23:45"><name pos:start="23:5" pos:end="23:20">LOCAL_ALIGNED_16</name><argument_list pos:start="23:21" pos:end="23:45">(<argument pos:start="23:22" pos:end="23:28"><expr pos:start="23:22" pos:end="23:28"><name pos:start="23:22" pos:end="23:28">int32_t</name></expr></argument>, <argument pos:start="23:31" pos:end="23:38"><expr pos:start="23:31" pos:end="23:38"><name pos:start="23:31" pos:end="23:38">dctblock</name></expr></argument>, <argument pos:start="23:41" pos:end="23:44"><expr pos:start="23:41" pos:end="23:44"><index pos:start="23:41" pos:end="23:44">[<expr pos:start="23:42" pos:end="23:43"><literal type="number" pos:start="23:42" pos:end="23:43">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:16">coordmap</name><index pos:start="25:17" pos:end="25:20">[<expr pos:start="25:18" pos:end="25:19"><literal type="number" pos:start="25:18" pos:end="25:19">64</literal></expr>]</index></name></decl>;</decl_stmt>



    <decl_stmt pos:start="29:5" pos:end="29:50"><decl pos:start="29:5" pos:end="29:49"><type pos:start="29:5" pos:end="29:13"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:13">int</name></type> <name pos:start="29:15" pos:end="29:20">stride</name> <init pos:start="29:22" pos:end="29:49">= <expr pos:start="29:24" pos:end="29:49"><name pos:start="29:24" pos:end="29:49"><name pos:start="29:24" pos:end="29:24">c</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:29">pic</name><operator pos:start="29:30" pos:end="29:30">.</operator><name pos:start="29:31" pos:end="29:38">linesize</name><index pos:start="29:39" pos:end="29:49">[<expr pos:start="29:40" pos:end="29:48"><name pos:start="29:40" pos:end="29:48">plane_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:84"><decl pos:start="31:5" pos:end="31:83"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:10">bw</name> <init pos:start="31:12" pos:end="31:83">= <expr pos:start="31:14" pos:end="31:83"><ternary pos:start="31:14" pos:end="31:83"><condition pos:start="31:14" pos:end="31:24"><expr pos:start="31:14" pos:end="31:22"><name pos:start="31:14" pos:end="31:22">is_chroma</name></expr> ?</condition><then pos:start="31:26" pos:end="31:53"> <expr pos:start="31:26" pos:end="31:53"><operator pos:start="31:26" pos:end="31:26">(</operator><name pos:start="31:27" pos:end="31:41"><name pos:start="31:27" pos:end="31:27">c</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:34">avctx</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:41">width</name></name>  <operator pos:start="31:44" pos:end="31:44">+</operator> <literal type="number" pos:start="31:46" pos:end="31:47">15</literal><operator pos:start="31:48" pos:end="31:48">)</operator> <operator pos:start="31:50" pos:end="31:51">&gt;&gt;</operator> <literal type="number" pos:start="31:53" pos:end="31:53">4</literal></expr> </then><else pos:start="31:55" pos:end="31:83">: <expr pos:start="31:57" pos:end="31:83"><operator pos:start="31:57" pos:end="31:57">(</operator><name pos:start="31:58" pos:end="31:72"><name pos:start="31:58" pos:end="31:58">c</name><operator pos:start="31:59" pos:end="31:60">-&gt;</operator><name pos:start="31:61" pos:end="31:65">avctx</name><operator pos:start="31:66" pos:end="31:67">-&gt;</operator><name pos:start="31:68" pos:end="31:72">width</name></name>  <operator pos:start="31:75" pos:end="31:75">+</operator> <literal type="number" pos:start="31:77" pos:end="31:77">7</literal><operator pos:start="31:78" pos:end="31:78">)</operator> <operator pos:start="31:80" pos:end="31:81">&gt;&gt;</operator> <literal type="number" pos:start="31:83" pos:end="31:83">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:84"><decl pos:start="33:5" pos:end="33:83"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:10">bh</name> <init pos:start="33:12" pos:end="33:83">= <expr pos:start="33:14" pos:end="33:83"><ternary pos:start="33:14" pos:end="33:83"><condition pos:start="33:14" pos:end="33:24"><expr pos:start="33:14" pos:end="33:22"><name pos:start="33:14" pos:end="33:22">is_chroma</name></expr> ?</condition><then pos:start="33:26" pos:end="33:53"> <expr pos:start="33:26" pos:end="33:53"><operator pos:start="33:26" pos:end="33:26">(</operator><name pos:start="33:27" pos:end="33:42"><name pos:start="33:27" pos:end="33:27">c</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:34">avctx</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:42">height</name></name> <operator pos:start="33:44" pos:end="33:44">+</operator> <literal type="number" pos:start="33:46" pos:end="33:47">15</literal><operator pos:start="33:48" pos:end="33:48">)</operator> <operator pos:start="33:50" pos:end="33:51">&gt;&gt;</operator> <literal type="number" pos:start="33:53" pos:end="33:53">4</literal></expr> </then><else pos:start="33:55" pos:end="33:83">: <expr pos:start="33:57" pos:end="33:83"><operator pos:start="33:57" pos:end="33:57">(</operator><name pos:start="33:58" pos:end="33:73"><name pos:start="33:58" pos:end="33:58">c</name><operator pos:start="33:59" pos:end="33:60">-&gt;</operator><name pos:start="33:61" pos:end="33:65">avctx</name><operator pos:start="33:66" pos:end="33:67">-&gt;</operator><name pos:start="33:68" pos:end="33:73">height</name></name> <operator pos:start="33:75" pos:end="33:75">+</operator> <literal type="number" pos:start="33:77" pos:end="33:77">7</literal><operator pos:start="33:78" pos:end="33:78">)</operator> <operator pos:start="33:80" pos:end="33:81">&gt;&gt;</operator> <literal type="number" pos:start="33:83" pos:end="33:83">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:45"><decl pos:start="35:5" pos:end="35:44"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:13">width</name> <init pos:start="35:15" pos:end="35:44">= <expr pos:start="35:17" pos:end="35:44"><name pos:start="35:17" pos:end="35:31"><name pos:start="35:17" pos:end="35:17">c</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:24">avctx</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:31">width</name></name> <operator pos:start="35:33" pos:end="35:34">&gt;&gt;</operator> <name pos:start="35:36" pos:end="35:44">is_chroma</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><call pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:16">init_lengths</name><argument_list pos:start="39:17" pos:end="39:40">(<argument pos:start="39:18" pos:end="39:18"><expr pos:start="39:18" pos:end="39:18"><name pos:start="39:18" pos:end="39:18">c</name></expr></argument>, <argument pos:start="39:21" pos:end="39:35"><expr pos:start="39:21" pos:end="39:35"><call pos:start="39:21" pos:end="39:35"><name pos:start="39:21" pos:end="39:25">FFMAX</name><argument_list pos:start="39:26" pos:end="39:35">(<argument pos:start="39:27" pos:end="39:31"><expr pos:start="39:27" pos:end="39:31"><name pos:start="39:27" pos:end="39:31">width</name></expr></argument>, <argument pos:start="39:34" pos:end="39:34"><expr pos:start="39:34" pos:end="39:34"><literal type="number" pos:start="39:34" pos:end="39:34">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:38" pos:end="39:39"><expr pos:start="39:38" pos:end="39:39"><name pos:start="39:38" pos:end="39:39">bw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="43:30">for <control pos:start="41:9" pos:end="41:37">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:32"><expr pos:start="41:17" pos:end="41:31"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:31">BINK_NB_SRC</name></expr>;</condition> <incr pos:start="41:34" pos:end="41:36"><expr pos:start="41:34" pos:end="41:36"><name pos:start="41:34" pos:end="41:34">i</name><operator pos:start="41:35" pos:end="41:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:9" pos:end="43:30"><block_content pos:start="43:9" pos:end="43:30">

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:19">read_bundle</name><argument_list pos:start="43:20" pos:end="43:29">(<argument pos:start="43:21" pos:end="43:22"><expr pos:start="43:21" pos:end="43:22"><name pos:start="43:21" pos:end="43:22">gb</name></expr></argument>, <argument pos:start="43:25" pos:end="43:25"><expr pos:start="43:25" pos:end="43:25"><name pos:start="43:25" pos:end="43:25">c</name></expr></argument>, <argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><name pos:start="43:28" pos:end="43:28">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:13">ref_start</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:39"><name pos:start="47:17" pos:end="47:17">c</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:23">last</name><operator pos:start="47:24" pos:end="47:24">.</operator><name pos:start="47:25" pos:end="47:28">data</name><index pos:start="47:29" pos:end="47:39">[<expr pos:start="47:30" pos:end="47:38"><name pos:start="47:30" pos:end="47:38">plane_idx</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:72"><expr pos:start="49:5" pos:end="51:71"><name pos:start="49:5" pos:end="49:11">ref_end</name>   <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:39"><name pos:start="49:17" pos:end="49:17">c</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:23">last</name><operator pos:start="49:24" pos:end="49:24">.</operator><name pos:start="49:25" pos:end="49:28">data</name><index pos:start="49:29" pos:end="49:39">[<expr pos:start="49:30" pos:end="49:38"><name pos:start="49:30" pos:end="49:38">plane_idx</name></expr>]</index></name>

                <operator pos:start="51:17" pos:end="51:17">+</operator> <operator pos:start="51:19" pos:end="51:19">(</operator><name pos:start="51:20" pos:end="51:21">bw</name> <operator pos:start="51:23" pos:end="51:23">-</operator> <literal type="number" pos:start="51:25" pos:end="51:27">1</literal> <operator pos:start="51:27" pos:end="51:27">+</operator> <name pos:start="51:29" pos:end="51:55"><name pos:start="51:29" pos:end="51:29">c</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:35">last</name><operator pos:start="51:36" pos:end="51:36">.</operator><name pos:start="51:37" pos:end="51:44">linesize</name><index pos:start="51:45" pos:end="51:55">[<expr pos:start="51:46" pos:end="51:54"><name pos:start="51:46" pos:end="51:54">plane_idx</name></expr>]</index></name> <operator pos:start="51:57" pos:end="51:57">*</operator> <operator pos:start="51:59" pos:end="51:59">(</operator><name pos:start="51:60" pos:end="51:61">bh</name> <operator pos:start="51:63" pos:end="51:63">-</operator> <literal type="number" pos:start="51:65" pos:end="51:65">1</literal><operator pos:start="51:66" pos:end="51:66">)</operator><operator pos:start="51:67" pos:end="51:67">)</operator> <operator pos:start="51:69" pos:end="51:69">*</operator> <literal type="number" pos:start="51:71" pos:end="51:71">8</literal></expr>;</expr_stmt>



    <for pos:start="55:5" pos:end="57:50">for <control pos:start="55:9" pos:end="55:28">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:23"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <literal type="number" pos:start="55:21" pos:end="55:22">64</literal></expr>;</condition> <incr pos:start="55:25" pos:end="55:27"><expr pos:start="55:25" pos:end="55:27"><name pos:start="55:25" pos:end="55:25">i</name><operator pos:start="55:26" pos:end="55:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="57:9" pos:end="57:50"><block_content pos:start="57:9" pos:end="57:50">

        <expr_stmt pos:start="57:9" pos:end="57:50"><expr pos:start="57:9" pos:end="57:49"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:16">coordmap</name><index pos:start="57:17" pos:end="57:19">[<expr pos:start="57:18" pos:end="57:18"><name pos:start="57:18" pos:end="57:18">i</name></expr>]</index></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <operator pos:start="57:23" pos:end="57:23">(</operator><name pos:start="57:24" pos:end="57:24">i</name> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <literal type="number" pos:start="57:28" pos:end="57:28">7</literal><operator pos:start="57:29" pos:end="57:29">)</operator> <operator pos:start="57:31" pos:end="57:31">+</operator> <operator pos:start="57:33" pos:end="57:33">(</operator><name pos:start="57:34" pos:end="57:34">i</name> <operator pos:start="57:36" pos:end="57:37">&gt;&gt;</operator> <literal type="number" pos:start="57:39" pos:end="57:39">3</literal><operator pos:start="57:40" pos:end="57:40">)</operator> <operator pos:start="57:42" pos:end="57:42">*</operator> <name pos:start="57:44" pos:end="57:49">stride</name></expr>;</expr_stmt></block_content></block></for>



    <for pos:start="61:5" pos:end="431:5">for <control pos:start="61:9" pos:end="61:31">(<init pos:start="61:10" pos:end="61:16"><expr pos:start="61:10" pos:end="61:15"><name pos:start="61:10" pos:end="61:11">by</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>;</init> <condition pos:start="61:18" pos:end="61:25"><expr pos:start="61:18" pos:end="61:24"><name pos:start="61:18" pos:end="61:19">by</name> <operator pos:start="61:21" pos:end="61:21">&lt;</operator> <name pos:start="61:23" pos:end="61:24">bh</name></expr>;</condition> <incr pos:start="61:27" pos:end="61:30"><expr pos:start="61:27" pos:end="61:30"><name pos:start="61:27" pos:end="61:28">by</name><operator pos:start="61:29" pos:end="61:30">++</operator></expr></incr>)</control> <block pos:start="61:33" pos:end="431:5">{<block_content pos:start="63:9" pos:end="429:9">

        <if_stmt pos:start="63:9" pos:end="65:22"><if pos:start="63:9" pos:end="65:22">if <condition pos:start="63:12" pos:end="63:81">(<expr pos:start="63:13" pos:end="63:80"><call pos:start="63:13" pos:end="63:76"><name pos:start="63:13" pos:end="63:28">read_block_types</name><argument_list pos:start="63:29" pos:end="63:76">(<argument pos:start="63:30" pos:end="63:37"><expr pos:start="63:30" pos:end="63:37"><name pos:start="63:30" pos:end="63:37"><name pos:start="63:30" pos:end="63:30">c</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:37">avctx</name></name></expr></argument>, <argument pos:start="63:40" pos:end="63:41"><expr pos:start="63:40" pos:end="63:41"><name pos:start="63:40" pos:end="63:41">gb</name></expr></argument>, <argument pos:start="63:44" pos:end="63:75"><expr pos:start="63:44" pos:end="63:75"><operator pos:start="63:44" pos:end="63:44">&amp;</operator><name pos:start="63:45" pos:end="63:75"><name pos:start="63:45" pos:end="63:45">c</name><operator pos:start="63:46" pos:end="63:47">-&gt;</operator><name pos:start="63:48" pos:end="63:53">bundle</name><index pos:start="63:54" pos:end="63:75">[<expr pos:start="63:55" pos:end="63:74"><name pos:start="63:55" pos:end="63:74">BINK_SRC_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="63:78" pos:end="63:78">&lt;</operator> <literal type="number" pos:start="63:80" pos:end="63:80">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:22"><block_content pos:start="65:13" pos:end="65:22">

            <return pos:start="65:13" pos:end="65:22">return <expr pos:start="65:20" pos:end="65:21"><operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="69:22"><if pos:start="67:9" pos:end="69:22">if <condition pos:start="67:12" pos:end="67:85">(<expr pos:start="67:13" pos:end="67:84"><call pos:start="67:13" pos:end="67:80"><name pos:start="67:13" pos:end="67:28">read_block_types</name><argument_list pos:start="67:29" pos:end="67:80">(<argument pos:start="67:30" pos:end="67:37"><expr pos:start="67:30" pos:end="67:37"><name pos:start="67:30" pos:end="67:37"><name pos:start="67:30" pos:end="67:30">c</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:37">avctx</name></name></expr></argument>, <argument pos:start="67:40" pos:end="67:41"><expr pos:start="67:40" pos:end="67:41"><name pos:start="67:40" pos:end="67:41">gb</name></expr></argument>, <argument pos:start="67:44" pos:end="67:79"><expr pos:start="67:44" pos:end="67:79"><operator pos:start="67:44" pos:end="67:44">&amp;</operator><name pos:start="67:45" pos:end="67:79"><name pos:start="67:45" pos:end="67:45">c</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:53">bundle</name><index pos:start="67:54" pos:end="67:79">[<expr pos:start="67:55" pos:end="67:78"><name pos:start="67:55" pos:end="67:78">BINK_SRC_SUB_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="67:82" pos:end="67:82">&lt;</operator> <literal type="number" pos:start="67:84" pos:end="67:84">0</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:22"><block_content pos:start="69:13" pos:end="69:22">

            <return pos:start="69:13" pos:end="69:22">return <expr pos:start="69:20" pos:end="69:21"><operator pos:start="69:20" pos:end="69:20">-</operator><literal type="number" pos:start="69:21" pos:end="69:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="73:22"><if pos:start="71:9" pos:end="73:22">if <condition pos:start="71:12" pos:end="71:64">(<expr pos:start="71:13" pos:end="71:63"><call pos:start="71:13" pos:end="71:59"><name pos:start="71:13" pos:end="71:23">read_colors</name><argument_list pos:start="71:24" pos:end="71:59">(<argument pos:start="71:25" pos:end="71:26"><expr pos:start="71:25" pos:end="71:26"><name pos:start="71:25" pos:end="71:26">gb</name></expr></argument>, <argument pos:start="71:29" pos:end="71:55"><expr pos:start="71:29" pos:end="71:55"><operator pos:start="71:29" pos:end="71:29">&amp;</operator><name pos:start="71:30" pos:end="71:55"><name pos:start="71:30" pos:end="71:30">c</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:38">bundle</name><index pos:start="71:39" pos:end="71:55">[<expr pos:start="71:40" pos:end="71:54"><name pos:start="71:40" pos:end="71:54">BINK_SRC_COLORS</name></expr>]</index></name></expr></argument>, <argument pos:start="71:58" pos:end="71:58"><expr pos:start="71:58" pos:end="71:58"><name pos:start="71:58" pos:end="71:58">c</name></expr></argument>)</argument_list></call> <operator pos:start="71:61" pos:end="71:61">&lt;</operator> <literal type="number" pos:start="71:63" pos:end="71:63">0</literal></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:22"><block_content pos:start="73:13" pos:end="73:22">

            <return pos:start="73:13" pos:end="73:22">return <expr pos:start="73:20" pos:end="73:21"><operator pos:start="73:20" pos:end="73:20">-</operator><literal type="number" pos:start="73:21" pos:end="73:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="77:22"><if pos:start="75:9" pos:end="77:22">if <condition pos:start="75:12" pos:end="75:74">(<expr pos:start="75:13" pos:end="75:73"><call pos:start="75:13" pos:end="75:69"><name pos:start="75:13" pos:end="75:25">read_patterns</name><argument_list pos:start="75:26" pos:end="75:69">(<argument pos:start="75:27" pos:end="75:34"><expr pos:start="75:27" pos:end="75:34"><name pos:start="75:27" pos:end="75:34"><name pos:start="75:27" pos:end="75:27">c</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:34">avctx</name></name></expr></argument>, <argument pos:start="75:37" pos:end="75:38"><expr pos:start="75:37" pos:end="75:38"><name pos:start="75:37" pos:end="75:38">gb</name></expr></argument>, <argument pos:start="75:41" pos:end="75:68"><expr pos:start="75:41" pos:end="75:68"><operator pos:start="75:41" pos:end="75:41">&amp;</operator><name pos:start="75:42" pos:end="75:68"><name pos:start="75:42" pos:end="75:42">c</name><operator pos:start="75:43" pos:end="75:44">-&gt;</operator><name pos:start="75:45" pos:end="75:50">bundle</name><index pos:start="75:51" pos:end="75:68">[<expr pos:start="75:52" pos:end="75:67"><name pos:start="75:52" pos:end="75:67">BINK_SRC_PATTERN</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="75:71" pos:end="75:71">&lt;</operator> <literal type="number" pos:start="75:73" pos:end="75:73">0</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:22"><block_content pos:start="77:13" pos:end="77:22">

            <return pos:start="77:13" pos:end="77:22">return <expr pos:start="77:20" pos:end="77:21"><operator pos:start="77:20" pos:end="77:20">-</operator><literal type="number" pos:start="77:21" pos:end="77:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="81:22"><if pos:start="79:9" pos:end="81:22">if <condition pos:start="79:12" pos:end="79:77">(<expr pos:start="79:13" pos:end="79:76"><call pos:start="79:13" pos:end="79:72"><name pos:start="79:13" pos:end="79:30">read_motion_values</name><argument_list pos:start="79:31" pos:end="79:72">(<argument pos:start="79:32" pos:end="79:39"><expr pos:start="79:32" pos:end="79:39"><name pos:start="79:32" pos:end="79:39"><name pos:start="79:32" pos:end="79:32">c</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:39">avctx</name></name></expr></argument>, <argument pos:start="79:42" pos:end="79:43"><expr pos:start="79:42" pos:end="79:43"><name pos:start="79:42" pos:end="79:43">gb</name></expr></argument>, <argument pos:start="79:46" pos:end="79:71"><expr pos:start="79:46" pos:end="79:71"><operator pos:start="79:46" pos:end="79:46">&amp;</operator><name pos:start="79:47" pos:end="79:71"><name pos:start="79:47" pos:end="79:47">c</name><operator pos:start="79:48" pos:end="79:49">-&gt;</operator><name pos:start="79:50" pos:end="79:55">bundle</name><index pos:start="79:56" pos:end="79:71">[<expr pos:start="79:57" pos:end="79:70"><name pos:start="79:57" pos:end="79:70">BINK_SRC_X_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="79:74" pos:end="79:74">&lt;</operator> <literal type="number" pos:start="79:76" pos:end="79:76">0</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:22"><block_content pos:start="81:13" pos:end="81:22">

            <return pos:start="81:13" pos:end="81:22">return <expr pos:start="81:20" pos:end="81:21"><operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="85:22"><if pos:start="83:9" pos:end="85:22">if <condition pos:start="83:12" pos:end="83:77">(<expr pos:start="83:13" pos:end="83:76"><call pos:start="83:13" pos:end="83:72"><name pos:start="83:13" pos:end="83:30">read_motion_values</name><argument_list pos:start="83:31" pos:end="83:72">(<argument pos:start="83:32" pos:end="83:39"><expr pos:start="83:32" pos:end="83:39"><name pos:start="83:32" pos:end="83:39"><name pos:start="83:32" pos:end="83:32">c</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:39">avctx</name></name></expr></argument>, <argument pos:start="83:42" pos:end="83:43"><expr pos:start="83:42" pos:end="83:43"><name pos:start="83:42" pos:end="83:43">gb</name></expr></argument>, <argument pos:start="83:46" pos:end="83:71"><expr pos:start="83:46" pos:end="83:71"><operator pos:start="83:46" pos:end="83:46">&amp;</operator><name pos:start="83:47" pos:end="83:71"><name pos:start="83:47" pos:end="83:47">c</name><operator pos:start="83:48" pos:end="83:49">-&gt;</operator><name pos:start="83:50" pos:end="83:55">bundle</name><index pos:start="83:56" pos:end="83:71">[<expr pos:start="83:57" pos:end="83:70"><name pos:start="83:57" pos:end="83:70">BINK_SRC_Y_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="83:74" pos:end="83:74">&lt;</operator> <literal type="number" pos:start="83:76" pos:end="83:76">0</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:22"><block_content pos:start="85:13" pos:end="85:22">

            <return pos:start="85:13" pos:end="85:22">return <expr pos:start="85:20" pos:end="85:21"><operator pos:start="85:20" pos:end="85:20">-</operator><literal type="number" pos:start="85:21" pos:end="85:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="89:22"><if pos:start="87:9" pos:end="89:22">if <condition pos:start="87:12" pos:end="87:88">(<expr pos:start="87:13" pos:end="87:87"><call pos:start="87:13" pos:end="87:83"><name pos:start="87:13" pos:end="87:20">read_dcs</name><argument_list pos:start="87:21" pos:end="87:83">(<argument pos:start="87:22" pos:end="87:29"><expr pos:start="87:22" pos:end="87:29"><name pos:start="87:22" pos:end="87:29"><name pos:start="87:22" pos:end="87:22">c</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:29">avctx</name></name></expr></argument>, <argument pos:start="87:32" pos:end="87:33"><expr pos:start="87:32" pos:end="87:33"><name pos:start="87:32" pos:end="87:33">gb</name></expr></argument>, <argument pos:start="87:36" pos:end="87:64"><expr pos:start="87:36" pos:end="87:64"><operator pos:start="87:36" pos:end="87:36">&amp;</operator><name pos:start="87:37" pos:end="87:64"><name pos:start="87:37" pos:end="87:37">c</name><operator pos:start="87:38" pos:end="87:39">-&gt;</operator><name pos:start="87:40" pos:end="87:45">bundle</name><index pos:start="87:46" pos:end="87:64">[<expr pos:start="87:47" pos:end="87:63"><name pos:start="87:47" pos:end="87:63">BINK_SRC_INTRA_DC</name></expr>]</index></name></expr></argument>, <argument pos:start="87:67" pos:end="87:79"><expr pos:start="87:67" pos:end="87:79"><name pos:start="87:67" pos:end="87:79">DC_START_BITS</name></expr></argument>, <argument pos:start="87:82" pos:end="87:82"><expr pos:start="87:82" pos:end="87:82"><literal type="number" pos:start="87:82" pos:end="87:82">0</literal></expr></argument>)</argument_list></call> <operator pos:start="87:85" pos:end="87:85">&lt;</operator> <literal type="number" pos:start="87:87" pos:end="87:87">0</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:22"><block_content pos:start="89:13" pos:end="89:22">

            <return pos:start="89:13" pos:end="89:22">return <expr pos:start="89:20" pos:end="89:21"><operator pos:start="89:20" pos:end="89:20">-</operator><literal type="number" pos:start="89:21" pos:end="89:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="93:22"><if pos:start="91:9" pos:end="93:22">if <condition pos:start="91:12" pos:end="91:88">(<expr pos:start="91:13" pos:end="91:87"><call pos:start="91:13" pos:end="91:83"><name pos:start="91:13" pos:end="91:20">read_dcs</name><argument_list pos:start="91:21" pos:end="91:83">(<argument pos:start="91:22" pos:end="91:29"><expr pos:start="91:22" pos:end="91:29"><name pos:start="91:22" pos:end="91:29"><name pos:start="91:22" pos:end="91:22">c</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:29">avctx</name></name></expr></argument>, <argument pos:start="91:32" pos:end="91:33"><expr pos:start="91:32" pos:end="91:33"><name pos:start="91:32" pos:end="91:33">gb</name></expr></argument>, <argument pos:start="91:36" pos:end="91:64"><expr pos:start="91:36" pos:end="91:64"><operator pos:start="91:36" pos:end="91:36">&amp;</operator><name pos:start="91:37" pos:end="91:64"><name pos:start="91:37" pos:end="91:37">c</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:45">bundle</name><index pos:start="91:46" pos:end="91:64">[<expr pos:start="91:47" pos:end="91:63"><name pos:start="91:47" pos:end="91:63">BINK_SRC_INTER_DC</name></expr>]</index></name></expr></argument>, <argument pos:start="91:67" pos:end="91:79"><expr pos:start="91:67" pos:end="91:79"><name pos:start="91:67" pos:end="91:79">DC_START_BITS</name></expr></argument>, <argument pos:start="91:82" pos:end="91:82"><expr pos:start="91:82" pos:end="91:82"><literal type="number" pos:start="91:82" pos:end="91:82">1</literal></expr></argument>)</argument_list></call> <operator pos:start="91:85" pos:end="91:85">&lt;</operator> <literal type="number" pos:start="91:87" pos:end="91:87">0</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:22"><block_content pos:start="93:13" pos:end="93:22">

            <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="97:22"><if pos:start="95:9" pos:end="97:22">if <condition pos:start="95:12" pos:end="95:66">(<expr pos:start="95:13" pos:end="95:65"><call pos:start="95:13" pos:end="95:61"><name pos:start="95:13" pos:end="95:21">read_runs</name><argument_list pos:start="95:22" pos:end="95:61">(<argument pos:start="95:23" pos:end="95:30"><expr pos:start="95:23" pos:end="95:30"><name pos:start="95:23" pos:end="95:30"><name pos:start="95:23" pos:end="95:23">c</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:30">avctx</name></name></expr></argument>, <argument pos:start="95:33" pos:end="95:34"><expr pos:start="95:33" pos:end="95:34"><name pos:start="95:33" pos:end="95:34">gb</name></expr></argument>, <argument pos:start="95:37" pos:end="95:60"><expr pos:start="95:37" pos:end="95:60"><operator pos:start="95:37" pos:end="95:37">&amp;</operator><name pos:start="95:38" pos:end="95:60"><name pos:start="95:38" pos:end="95:38">c</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:46">bundle</name><index pos:start="95:47" pos:end="95:60">[<expr pos:start="95:48" pos:end="95:59"><name pos:start="95:48" pos:end="95:59">BINK_SRC_RUN</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="95:63" pos:end="95:63">&lt;</operator> <literal type="number" pos:start="95:65" pos:end="95:65">0</literal></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:22"><block_content pos:start="97:13" pos:end="97:22">

            <return pos:start="97:13" pos:end="97:22">return <expr pos:start="97:20" pos:end="97:21"><operator pos:start="97:20" pos:end="97:20">-</operator><literal type="number" pos:start="97:21" pos:end="97:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="101:9" pos:end="103:18"><if pos:start="101:9" pos:end="103:18">if <condition pos:start="101:12" pos:end="101:21">(<expr pos:start="101:13" pos:end="101:20"><name pos:start="101:13" pos:end="101:14">by</name> <operator pos:start="101:16" pos:end="101:17">==</operator> <name pos:start="101:19" pos:end="101:20">bh</name></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:18"><block_content pos:start="103:13" pos:end="103:18">

            <break pos:start="103:13" pos:end="103:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:53"><expr pos:start="105:9" pos:end="105:52"><name pos:start="105:9" pos:end="105:11">dst</name>  <operator pos:start="105:14" pos:end="105:14">=</operator> <name pos:start="105:16" pos:end="105:37"><name pos:start="105:16" pos:end="105:16">c</name><operator pos:start="105:17" pos:end="105:18">-&gt;</operator><name pos:start="105:19" pos:end="105:21">pic</name><operator pos:start="105:22" pos:end="105:22">.</operator><name pos:start="105:23" pos:end="105:26">data</name><index pos:start="105:27" pos:end="105:37">[<expr pos:start="105:28" pos:end="105:36"><name pos:start="105:28" pos:end="105:36">plane_idx</name></expr>]</index></name>  <operator pos:start="105:40" pos:end="105:40">+</operator> <literal type="number" pos:start="105:42" pos:end="105:42">8</literal><operator pos:start="105:43" pos:end="105:43">*</operator><name pos:start="105:44" pos:end="105:45">by</name><operator pos:start="105:46" pos:end="105:46">*</operator><name pos:start="105:47" pos:end="105:52">stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:53"><expr pos:start="107:9" pos:end="107:52"><name pos:start="107:9" pos:end="107:12">prev</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <name pos:start="107:16" pos:end="107:38"><name pos:start="107:16" pos:end="107:16">c</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:22">last</name><operator pos:start="107:23" pos:end="107:23">.</operator><name pos:start="107:24" pos:end="107:27">data</name><index pos:start="107:28" pos:end="107:38">[<expr pos:start="107:29" pos:end="107:37"><name pos:start="107:29" pos:end="107:37">plane_idx</name></expr>]</index></name> <operator pos:start="107:40" pos:end="107:40">+</operator> <literal type="number" pos:start="107:42" pos:end="107:42">8</literal><operator pos:start="107:43" pos:end="107:43">*</operator><name pos:start="107:44" pos:end="107:45">by</name><operator pos:start="107:46" pos:end="107:46">*</operator><name pos:start="107:47" pos:end="107:52">stride</name></expr>;</expr_stmt>

        <for pos:start="109:9" pos:end="429:9">for <control pos:start="109:13" pos:end="109:56">(<init pos:start="109:14" pos:end="109:20"><expr pos:start="109:14" pos:end="109:19"><name pos:start="109:14" pos:end="109:15">bx</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>;</init> <condition pos:start="109:22" pos:end="109:29"><expr pos:start="109:22" pos:end="109:28"><name pos:start="109:22" pos:end="109:23">bx</name> <operator pos:start="109:25" pos:end="109:25">&lt;</operator> <name pos:start="109:27" pos:end="109:28">bw</name></expr>;</condition> <incr pos:start="109:31" pos:end="109:55"><expr pos:start="109:31" pos:end="109:34"><name pos:start="109:31" pos:end="109:32">bx</name><operator pos:start="109:33" pos:end="109:34">++</operator></expr><operator pos:start="109:35" pos:end="109:35">,</operator> <expr pos:start="109:37" pos:end="109:44"><name pos:start="109:37" pos:end="109:39">dst</name> <operator pos:start="109:41" pos:end="109:42">+=</operator> <literal type="number" pos:start="109:44" pos:end="109:44">8</literal></expr><operator pos:start="109:45" pos:end="109:45">,</operator> <expr pos:start="109:47" pos:end="109:55"><name pos:start="109:47" pos:end="109:50">prev</name> <operator pos:start="109:52" pos:end="109:53">+=</operator> <literal type="number" pos:start="109:55" pos:end="109:55">8</literal></expr></incr>)</control> <block pos:start="109:58" pos:end="429:9">{<block_content pos:start="111:13" pos:end="427:13">

            <expr_stmt pos:start="111:13" pos:end="111:53"><expr pos:start="111:13" pos:end="111:52"><name pos:start="111:13" pos:end="111:15">blk</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:52"><name pos:start="111:19" pos:end="111:27">get_value</name><argument_list pos:start="111:28" pos:end="111:52">(<argument pos:start="111:29" pos:end="111:29"><expr pos:start="111:29" pos:end="111:29"><name pos:start="111:29" pos:end="111:29">c</name></expr></argument>, <argument pos:start="111:32" pos:end="111:51"><expr pos:start="111:32" pos:end="111:51"><name pos:start="111:32" pos:end="111:51">BINK_SRC_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="113:13" pos:end="113:95">// 16x16 block type on odd line means part of the already decoded block, so skip it</comment>

            <if_stmt pos:start="115:13" pos:end="125:13"><if pos:start="115:13" pos:end="125:13">if <condition pos:start="115:16" pos:end="115:48">(<expr pos:start="115:17" pos:end="115:47"><operator pos:start="115:17" pos:end="115:17">(</operator><name pos:start="115:18" pos:end="115:19">by</name> <operator pos:start="115:21" pos:end="115:21">&amp;</operator> <literal type="number" pos:start="115:23" pos:end="115:23">1</literal><operator pos:start="115:24" pos:end="115:24">)</operator> <operator pos:start="115:26" pos:end="115:27">&amp;&amp;</operator> <name pos:start="115:29" pos:end="115:31">blk</name> <operator pos:start="115:33" pos:end="115:34">==</operator> <name pos:start="115:36" pos:end="115:47">SCALED_BLOCK</name></expr>)</condition> <block pos:start="115:50" pos:end="125:13">{<block_content pos:start="117:17" pos:end="123:25">

                <expr_stmt pos:start="117:17" pos:end="117:21"><expr pos:start="117:17" pos:end="117:20"><name pos:start="117:17" pos:end="117:18">bx</name><operator pos:start="117:19" pos:end="117:20">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:26"><expr pos:start="119:17" pos:end="119:25"><name pos:start="119:17" pos:end="119:19">dst</name>  <operator pos:start="119:22" pos:end="119:23">+=</operator> <literal type="number" pos:start="119:25" pos:end="119:25">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:26"><expr pos:start="121:17" pos:end="121:25"><name pos:start="121:17" pos:end="121:20">prev</name> <operator pos:start="121:22" pos:end="121:23">+=</operator> <literal type="number" pos:start="121:25" pos:end="121:25">8</literal></expr>;</expr_stmt>

                <continue pos:start="123:17" pos:end="123:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="127:13" pos:end="427:13">switch <condition pos:start="127:20" pos:end="127:24">(<expr pos:start="127:21" pos:end="127:23"><name pos:start="127:21" pos:end="127:23">blk</name></expr>)</condition> <block pos:start="127:26" pos:end="427:13">{<block_content pos:start="129:13" pos:end="425:26">

            <case pos:start="129:13" pos:end="129:28">case <expr pos:start="129:18" pos:end="129:27"><name pos:start="129:18" pos:end="129:27">SKIP_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="131:17" pos:end="131:66"><expr pos:start="131:17" pos:end="131:65"><name pos:start="131:17" pos:end="131:43"><name pos:start="131:17" pos:end="131:17">c</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:22">dsp</name><operator pos:start="131:23" pos:end="131:23">.</operator><name pos:start="131:24" pos:end="131:37">put_pixels_tab</name><index pos:start="131:38" pos:end="131:40">[<expr pos:start="131:39" pos:end="131:39"><literal type="number" pos:start="131:39" pos:end="131:39">1</literal></expr>]</index><index pos:start="131:41" pos:end="131:43">[<expr pos:start="131:42" pos:end="131:42"><literal type="number" pos:start="131:42" pos:end="131:42">0</literal></expr>]</index></name><operator pos:start="131:44" pos:end="131:44">(</operator><name pos:start="131:45" pos:end="131:47">dst</name><operator pos:start="131:48" pos:end="131:48">,</operator> <name pos:start="131:50" pos:end="131:53">prev</name><operator pos:start="131:54" pos:end="131:54">,</operator> <name pos:start="131:56" pos:end="131:61">stride</name><operator pos:start="131:62" pos:end="131:62">,</operator> <literal type="number" pos:start="131:64" pos:end="131:64">8</literal><operator pos:start="131:65" pos:end="131:65">)</operator></expr>;</expr_stmt>

                <break pos:start="133:17" pos:end="133:22">break;</break>

            <case pos:start="135:13" pos:end="135:30">case <expr pos:start="135:18" pos:end="135:29"><name pos:start="135:18" pos:end="135:29">SCALED_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="137:17" pos:end="137:61"><expr pos:start="137:17" pos:end="137:60"><name pos:start="137:17" pos:end="137:19">blk</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <call pos:start="137:23" pos:end="137:60"><name pos:start="137:23" pos:end="137:31">get_value</name><argument_list pos:start="137:32" pos:end="137:60">(<argument pos:start="137:33" pos:end="137:33"><expr pos:start="137:33" pos:end="137:33"><name pos:start="137:33" pos:end="137:33">c</name></expr></argument>, <argument pos:start="137:36" pos:end="137:59"><expr pos:start="137:36" pos:end="137:59"><name pos:start="137:36" pos:end="137:59">BINK_SRC_SUB_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="139:17" pos:end="241:17">switch <condition pos:start="139:24" pos:end="139:28">(<expr pos:start="139:25" pos:end="139:27"><name pos:start="139:25" pos:end="139:27">blk</name></expr>)</condition> <block pos:start="139:30" pos:end="241:17">{<block_content pos:start="141:17" pos:end="239:30">

                <case pos:start="141:17" pos:end="141:31">case <expr pos:start="141:22" pos:end="141:30"><name pos:start="141:22" pos:end="141:30">RUN_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="143:21" pos:end="143:58"><expr pos:start="143:21" pos:end="143:57"><name pos:start="143:21" pos:end="143:24">scan</name> <operator pos:start="143:26" pos:end="143:26">=</operator> <name pos:start="143:28" pos:end="143:57"><name pos:start="143:28" pos:end="143:40">bink_patterns</name><index pos:start="143:41" pos:end="143:57">[<expr pos:start="143:42" pos:end="143:56"><call pos:start="143:42" pos:end="143:56"><name pos:start="143:42" pos:end="143:49">get_bits</name><argument_list pos:start="143:50" pos:end="143:56">(<argument pos:start="143:51" pos:end="143:52"><expr pos:start="143:51" pos:end="143:52"><name pos:start="143:51" pos:end="143:52">gb</name></expr></argument>, <argument pos:start="143:55" pos:end="143:55"><expr pos:start="143:55" pos:end="143:55"><literal type="number" pos:start="143:55" pos:end="143:55">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="145:21" pos:end="145:26"><expr pos:start="145:21" pos:end="145:25"><name pos:start="145:21" pos:end="145:21">i</name> <operator pos:start="145:23" pos:end="145:23">=</operator> <literal type="number" pos:start="145:25" pos:end="145:25">0</literal></expr>;</expr_stmt>

                    <do pos:start="147:21" pos:end="179:37">do <block pos:start="147:24" pos:end="179:21">{<block_content pos:start="149:25" pos:end="177:25">

                        <decl_stmt pos:start="149:25" pos:end="149:65"><decl pos:start="149:25" pos:end="149:64"><type pos:start="149:25" pos:end="149:27"><name pos:start="149:25" pos:end="149:27">int</name></type> <name pos:start="149:29" pos:end="149:31">run</name> <init pos:start="149:33" pos:end="149:64">= <expr pos:start="149:35" pos:end="149:64"><call pos:start="149:35" pos:end="149:60"><name pos:start="149:35" pos:end="149:43">get_value</name><argument_list pos:start="149:44" pos:end="149:60">(<argument pos:start="149:45" pos:end="149:45"><expr pos:start="149:45" pos:end="149:45"><name pos:start="149:45" pos:end="149:45">c</name></expr></argument>, <argument pos:start="149:48" pos:end="149:59"><expr pos:start="149:48" pos:end="149:59"><name pos:start="149:48" pos:end="149:59">BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator pos:start="149:62" pos:end="149:62">+</operator> <literal type="number" pos:start="149:64" pos:end="149:64">1</literal></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="153:25" pos:end="153:33"><expr pos:start="153:25" pos:end="153:32"><name pos:start="153:25" pos:end="153:25">i</name> <operator pos:start="153:27" pos:end="153:28">+=</operator> <name pos:start="153:30" pos:end="153:32">run</name></expr>;</expr_stmt>

                        <if_stmt pos:start="155:25" pos:end="161:25"><if pos:start="155:25" pos:end="161:25">if <condition pos:start="155:28" pos:end="155:35">(<expr pos:start="155:29" pos:end="155:34"><name pos:start="155:29" pos:end="155:29">i</name> <operator pos:start="155:31" pos:end="155:31">&gt;</operator> <literal type="number" pos:start="155:33" pos:end="155:34">64</literal></expr>)</condition> <block pos:start="155:37" pos:end="161:25">{<block_content pos:start="157:29" pos:end="159:38">

                            <expr_stmt pos:start="157:29" pos:end="157:87"><expr pos:start="157:29" pos:end="157:86"><call pos:start="157:29" pos:end="157:86"><name pos:start="157:29" pos:end="157:34">av_log</name><argument_list pos:start="157:35" pos:end="157:86">(<argument pos:start="157:36" pos:end="157:43"><expr pos:start="157:36" pos:end="157:43"><name pos:start="157:36" pos:end="157:43"><name pos:start="157:36" pos:end="157:36">c</name><operator pos:start="157:37" pos:end="157:38">-&gt;</operator><name pos:start="157:39" pos:end="157:43">avctx</name></name></expr></argument>, <argument pos:start="157:46" pos:end="157:57"><expr pos:start="157:46" pos:end="157:57"><name pos:start="157:46" pos:end="157:57">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:60" pos:end="157:85"><expr pos:start="157:60" pos:end="157:85"><literal type="string" pos:start="157:60" pos:end="157:85">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="159:29" pos:end="159:38">return <expr pos:start="159:36" pos:end="159:37"><operator pos:start="159:36" pos:end="159:36">-</operator><literal type="number" pos:start="159:37" pos:end="159:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="163:25" pos:end="177:25"><if pos:start="163:25" pos:end="171:25">if <condition pos:start="163:28" pos:end="163:42">(<expr pos:start="163:29" pos:end="163:41"><call pos:start="163:29" pos:end="163:41"><name pos:start="163:29" pos:end="163:37">get_bits1</name><argument_list pos:start="163:38" pos:end="163:41">(<argument pos:start="163:39" pos:end="163:40"><expr pos:start="163:39" pos:end="163:40"><name pos:start="163:39" pos:end="163:40">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:44" pos:end="171:25">{<block_content pos:start="165:29" pos:end="169:52">

                            <expr_stmt pos:start="165:29" pos:end="165:62"><expr pos:start="165:29" pos:end="165:61"><name pos:start="165:29" pos:end="165:29">v</name> <operator pos:start="165:31" pos:end="165:31">=</operator> <call pos:start="165:33" pos:end="165:61"><name pos:start="165:33" pos:end="165:41">get_value</name><argument_list pos:start="165:42" pos:end="165:61">(<argument pos:start="165:43" pos:end="165:43"><expr pos:start="165:43" pos:end="165:43"><name pos:start="165:43" pos:end="165:43">c</name></expr></argument>, <argument pos:start="165:46" pos:end="165:60"><expr pos:start="165:46" pos:end="165:60"><name pos:start="165:46" pos:end="165:60">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="167:29" pos:end="169:52">for <control pos:start="167:33" pos:end="167:53">(<init pos:start="167:34" pos:end="167:39"><expr pos:start="167:34" pos:end="167:38"><name pos:start="167:34" pos:end="167:34">j</name> <operator pos:start="167:36" pos:end="167:36">=</operator> <literal type="number" pos:start="167:38" pos:end="167:38">0</literal></expr>;</init> <condition pos:start="167:41" pos:end="167:48"><expr pos:start="167:41" pos:end="167:47"><name pos:start="167:41" pos:end="167:41">j</name> <operator pos:start="167:43" pos:end="167:43">&lt;</operator> <name pos:start="167:45" pos:end="167:47">run</name></expr>;</condition> <incr pos:start="167:50" pos:end="167:52"><expr pos:start="167:50" pos:end="167:52"><name pos:start="167:50" pos:end="167:50">j</name><operator pos:start="167:51" pos:end="167:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="169:33" pos:end="169:52"><block_content pos:start="169:33" pos:end="169:52">

                                <expr_stmt pos:start="169:33" pos:end="169:52"><expr pos:start="169:33" pos:end="169:51"><name pos:start="169:33" pos:end="169:47"><name pos:start="169:33" pos:end="169:38">ublock</name><index pos:start="169:39" pos:end="169:47">[<expr pos:start="169:40" pos:end="169:46"><operator pos:start="169:40" pos:end="169:40">*</operator><name pos:start="169:41" pos:end="169:44">scan</name><operator pos:start="169:45" pos:end="169:46">++</operator></expr>]</index></name> <operator pos:start="169:49" pos:end="169:49">=</operator> <name pos:start="169:51" pos:end="169:51">v</name></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="171:27" pos:end="177:25">else <block pos:start="171:32" pos:end="177:25">{<block_content pos:start="173:29" pos:end="175:80">

                            <for pos:start="173:29" pos:end="175:80">for <control pos:start="173:33" pos:end="173:53">(<init pos:start="173:34" pos:end="173:39"><expr pos:start="173:34" pos:end="173:38"><name pos:start="173:34" pos:end="173:34">j</name> <operator pos:start="173:36" pos:end="173:36">=</operator> <literal type="number" pos:start="173:38" pos:end="173:38">0</literal></expr>;</init> <condition pos:start="173:41" pos:end="173:48"><expr pos:start="173:41" pos:end="173:47"><name pos:start="173:41" pos:end="173:41">j</name> <operator pos:start="173:43" pos:end="173:43">&lt;</operator> <name pos:start="173:45" pos:end="173:47">run</name></expr>;</condition> <incr pos:start="173:50" pos:end="173:52"><expr pos:start="173:50" pos:end="173:52"><name pos:start="173:50" pos:end="173:50">j</name><operator pos:start="173:51" pos:end="173:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="175:33" pos:end="175:80"><block_content pos:start="175:33" pos:end="175:80">

                                <expr_stmt pos:start="175:33" pos:end="175:80"><expr pos:start="175:33" pos:end="175:79"><name pos:start="175:33" pos:end="175:47"><name pos:start="175:33" pos:end="175:38">ublock</name><index pos:start="175:39" pos:end="175:47">[<expr pos:start="175:40" pos:end="175:46"><operator pos:start="175:40" pos:end="175:40">*</operator><name pos:start="175:41" pos:end="175:44">scan</name><operator pos:start="175:45" pos:end="175:46">++</operator></expr>]</index></name> <operator pos:start="175:49" pos:end="175:49">=</operator> <call pos:start="175:51" pos:end="175:79"><name pos:start="175:51" pos:end="175:59">get_value</name><argument_list pos:start="175:60" pos:end="175:79">(<argument pos:start="175:61" pos:end="175:61"><expr pos:start="175:61" pos:end="175:61"><name pos:start="175:61" pos:end="175:61">c</name></expr></argument>, <argument pos:start="175:64" pos:end="175:78"><expr pos:start="175:64" pos:end="175:78"><name pos:start="175:64" pos:end="175:78">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block> while <condition pos:start="179:29" pos:end="179:36">(<expr pos:start="179:30" pos:end="179:35"><name pos:start="179:30" pos:end="179:30">i</name> <operator pos:start="179:32" pos:end="179:32">&lt;</operator> <literal type="number" pos:start="179:34" pos:end="179:35">63</literal></expr>)</condition>;</do>

                    <if_stmt pos:start="181:21" pos:end="183:72"><if pos:start="181:21" pos:end="183:72">if <condition pos:start="181:24" pos:end="181:32">(<expr pos:start="181:25" pos:end="181:31"><name pos:start="181:25" pos:end="181:25">i</name> <operator pos:start="181:27" pos:end="181:28">==</operator> <literal type="number" pos:start="181:30" pos:end="181:31">63</literal></expr>)</condition><block type="pseudo" pos:start="183:25" pos:end="183:72"><block_content pos:start="183:25" pos:end="183:72">

                        <expr_stmt pos:start="183:25" pos:end="183:72"><expr pos:start="183:25" pos:end="183:71"><name pos:start="183:25" pos:end="183:39"><name pos:start="183:25" pos:end="183:30">ublock</name><index pos:start="183:31" pos:end="183:39">[<expr pos:start="183:32" pos:end="183:38"><operator pos:start="183:32" pos:end="183:32">*</operator><name pos:start="183:33" pos:end="183:36">scan</name><operator pos:start="183:37" pos:end="183:38">++</operator></expr>]</index></name> <operator pos:start="183:41" pos:end="183:41">=</operator> <call pos:start="183:43" pos:end="183:71"><name pos:start="183:43" pos:end="183:51">get_value</name><argument_list pos:start="183:52" pos:end="183:71">(<argument pos:start="183:53" pos:end="183:53"><expr pos:start="183:53" pos:end="183:53"><name pos:start="183:53" pos:end="183:53">c</name></expr></argument>, <argument pos:start="183:56" pos:end="183:70"><expr pos:start="183:56" pos:end="183:70"><name pos:start="183:56" pos:end="183:70">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="185:21" pos:end="185:26">break;</break>

                <case pos:start="187:17" pos:end="187:33">case <expr pos:start="187:22" pos:end="187:32"><name pos:start="187:22" pos:end="187:32">INTRA_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="189:21" pos:end="189:64"><expr pos:start="189:21" pos:end="189:63"><call pos:start="189:21" pos:end="189:63"><name pos:start="189:21" pos:end="189:26">memset</name><argument_list pos:start="189:27" pos:end="189:63">(<argument pos:start="189:28" pos:end="189:35"><expr pos:start="189:28" pos:end="189:35"><name pos:start="189:28" pos:end="189:35">dctblock</name></expr></argument>, <argument pos:start="189:38" pos:end="189:38"><expr pos:start="189:38" pos:end="189:38"><literal type="number" pos:start="189:38" pos:end="189:38">0</literal></expr></argument>, <argument pos:start="189:41" pos:end="189:62"><expr pos:start="189:41" pos:end="189:62"><sizeof pos:start="189:41" pos:end="189:57">sizeof<argument_list pos:start="189:47" pos:end="189:57">(<argument pos:start="189:48" pos:end="189:56"><expr pos:start="189:48" pos:end="189:56"><operator pos:start="189:48" pos:end="189:48">*</operator><name pos:start="189:49" pos:end="189:56">dctblock</name></expr></argument>)</argument_list></sizeof> <operator pos:start="189:59" pos:end="189:59">*</operator> <literal type="number" pos:start="189:61" pos:end="189:62">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="191:21" pos:end="191:66"><expr pos:start="191:21" pos:end="191:65"><name pos:start="191:21" pos:end="191:31"><name pos:start="191:21" pos:end="191:28">dctblock</name><index pos:start="191:29" pos:end="191:31">[<expr pos:start="191:30" pos:end="191:30"><literal type="number" pos:start="191:30" pos:end="191:30">0</literal></expr>]</index></name> <operator pos:start="191:33" pos:end="191:33">=</operator> <call pos:start="191:35" pos:end="191:65"><name pos:start="191:35" pos:end="191:43">get_value</name><argument_list pos:start="191:44" pos:end="191:65">(<argument pos:start="191:45" pos:end="191:45"><expr pos:start="191:45" pos:end="191:45"><name pos:start="191:45" pos:end="191:45">c</name></expr></argument>, <argument pos:start="191:48" pos:end="191:64"><expr pos:start="191:48" pos:end="191:64"><name pos:start="191:48" pos:end="191:64">BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="193:21" pos:end="193:83"><expr pos:start="193:21" pos:end="193:82"><call pos:start="193:21" pos:end="193:82"><name pos:start="193:21" pos:end="193:35">read_dct_coeffs</name><argument_list pos:start="193:36" pos:end="193:82">(<argument pos:start="193:37" pos:end="193:38"><expr pos:start="193:37" pos:end="193:38"><name pos:start="193:37" pos:end="193:38">gb</name></expr></argument>, <argument pos:start="193:41" pos:end="193:48"><expr pos:start="193:41" pos:end="193:48"><name pos:start="193:41" pos:end="193:48">dctblock</name></expr></argument>, <argument pos:start="193:51" pos:end="193:59"><expr pos:start="193:51" pos:end="193:59"><name pos:start="193:51" pos:end="193:59">bink_scan</name></expr></argument>, <argument pos:start="193:62" pos:end="193:77"><expr pos:start="193:62" pos:end="193:77"><name pos:start="193:62" pos:end="193:77">bink_intra_quant</name></expr></argument>, <argument pos:start="193:80" pos:end="193:81"><expr pos:start="193:80" pos:end="193:81"><operator pos:start="193:80" pos:end="193:80">-</operator><literal type="number" pos:start="193:81" pos:end="193:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:58"><expr pos:start="195:21" pos:end="195:57"><call pos:start="195:21" pos:end="195:57"><name pos:start="195:21" pos:end="195:36"><name pos:start="195:21" pos:end="195:21">c</name><operator pos:start="195:22" pos:end="195:23">-&gt;</operator><name pos:start="195:24" pos:end="195:27">bdsp</name><operator pos:start="195:28" pos:end="195:28">.</operator><name pos:start="195:29" pos:end="195:36">idct_put</name></name><argument_list pos:start="195:37" pos:end="195:57">(<argument pos:start="195:38" pos:end="195:43"><expr pos:start="195:38" pos:end="195:43"><name pos:start="195:38" pos:end="195:43">ublock</name></expr></argument>, <argument pos:start="195:46" pos:end="195:46"><expr pos:start="195:46" pos:end="195:46"><literal type="number" pos:start="195:46" pos:end="195:46">8</literal></expr></argument>, <argument pos:start="195:49" pos:end="195:56"><expr pos:start="195:49" pos:end="195:56"><name pos:start="195:49" pos:end="195:56">dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="197:21" pos:end="197:26">break;</break>

                <case pos:start="199:17" pos:end="199:32">case <expr pos:start="199:22" pos:end="199:31"><name pos:start="199:22" pos:end="199:31">FILL_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="201:21" pos:end="201:54"><expr pos:start="201:21" pos:end="201:53"><name pos:start="201:21" pos:end="201:21">v</name> <operator pos:start="201:23" pos:end="201:23">=</operator> <call pos:start="201:25" pos:end="201:53"><name pos:start="201:25" pos:end="201:33">get_value</name><argument_list pos:start="201:34" pos:end="201:53">(<argument pos:start="201:35" pos:end="201:35"><expr pos:start="201:35" pos:end="201:35"><name pos:start="201:35" pos:end="201:35">c</name></expr></argument>, <argument pos:start="201:38" pos:end="201:52"><expr pos:start="201:38" pos:end="201:52"><name pos:start="201:38" pos:end="201:52">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:65"><expr pos:start="203:21" pos:end="203:64"><name pos:start="203:21" pos:end="203:44"><name pos:start="203:21" pos:end="203:21">c</name><operator pos:start="203:22" pos:end="203:23">-&gt;</operator><name pos:start="203:24" pos:end="203:26">dsp</name><operator pos:start="203:27" pos:end="203:27">.</operator><name pos:start="203:28" pos:end="203:41">fill_block_tab</name><index pos:start="203:42" pos:end="203:44">[<expr pos:start="203:43" pos:end="203:43"><literal type="number" pos:start="203:43" pos:end="203:43">0</literal></expr>]</index></name><operator pos:start="203:45" pos:end="203:45">(</operator><name pos:start="203:46" pos:end="203:48">dst</name><operator pos:start="203:49" pos:end="203:49">,</operator> <name pos:start="203:51" pos:end="203:51">v</name><operator pos:start="203:52" pos:end="203:52">,</operator> <name pos:start="203:54" pos:end="203:59">stride</name><operator pos:start="203:60" pos:end="203:60">,</operator> <literal type="number" pos:start="203:62" pos:end="203:63">16</literal><operator pos:start="203:64" pos:end="203:64">)</operator></expr>;</expr_stmt>

                    <break pos:start="205:21" pos:end="205:26">break;</break>

                <case pos:start="207:17" pos:end="207:35">case <expr pos:start="207:22" pos:end="207:34"><name pos:start="207:22" pos:end="207:34">PATTERN_BLOCK</name></expr>:</case>

                    <for pos:start="209:21" pos:end="211:63">for <control pos:start="209:25" pos:end="209:43">(<init pos:start="209:26" pos:end="209:31"><expr pos:start="209:26" pos:end="209:30"><name pos:start="209:26" pos:end="209:26">i</name> <operator pos:start="209:28" pos:end="209:28">=</operator> <literal type="number" pos:start="209:30" pos:end="209:30">0</literal></expr>;</init> <condition pos:start="209:33" pos:end="209:38"><expr pos:start="209:33" pos:end="209:37"><name pos:start="209:33" pos:end="209:33">i</name> <operator pos:start="209:35" pos:end="209:35">&lt;</operator> <literal type="number" pos:start="209:37" pos:end="209:37">2</literal></expr>;</condition> <incr pos:start="209:40" pos:end="209:42"><expr pos:start="209:40" pos:end="209:42"><name pos:start="209:40" pos:end="209:40">i</name><operator pos:start="209:41" pos:end="209:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="211:25" pos:end="211:63"><block_content pos:start="211:25" pos:end="211:63">

                        <expr_stmt pos:start="211:25" pos:end="211:63"><expr pos:start="211:25" pos:end="211:62"><name pos:start="211:25" pos:end="211:30"><name pos:start="211:25" pos:end="211:27">col</name><index pos:start="211:28" pos:end="211:30">[<expr pos:start="211:29" pos:end="211:29"><name pos:start="211:29" pos:end="211:29">i</name></expr>]</index></name> <operator pos:start="211:32" pos:end="211:32">=</operator> <call pos:start="211:34" pos:end="211:62"><name pos:start="211:34" pos:end="211:42">get_value</name><argument_list pos:start="211:43" pos:end="211:62">(<argument pos:start="211:44" pos:end="211:44"><expr pos:start="211:44" pos:end="211:44"><name pos:start="211:44" pos:end="211:44">c</name></expr></argument>, <argument pos:start="211:47" pos:end="211:61"><expr pos:start="211:47" pos:end="211:61"><name pos:start="211:47" pos:end="211:61">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <for pos:start="213:21" pos:end="221:21">for <control pos:start="213:25" pos:end="213:43">(<init pos:start="213:26" pos:end="213:31"><expr pos:start="213:26" pos:end="213:30"><name pos:start="213:26" pos:end="213:26">j</name> <operator pos:start="213:28" pos:end="213:28">=</operator> <literal type="number" pos:start="213:30" pos:end="213:30">0</literal></expr>;</init> <condition pos:start="213:33" pos:end="213:38"><expr pos:start="213:33" pos:end="213:37"><name pos:start="213:33" pos:end="213:33">j</name> <operator pos:start="213:35" pos:end="213:35">&lt;</operator> <literal type="number" pos:start="213:37" pos:end="213:37">8</literal></expr>;</condition> <incr pos:start="213:40" pos:end="213:42"><expr pos:start="213:40" pos:end="213:42"><name pos:start="213:40" pos:end="213:40">j</name><operator pos:start="213:41" pos:end="213:42">++</operator></expr></incr>)</control> <block pos:start="213:45" pos:end="221:21">{<block_content pos:start="215:25" pos:end="219:57">

                        <expr_stmt pos:start="215:25" pos:end="215:59"><expr pos:start="215:25" pos:end="215:58"><name pos:start="215:25" pos:end="215:25">v</name> <operator pos:start="215:27" pos:end="215:27">=</operator> <call pos:start="215:29" pos:end="215:58"><name pos:start="215:29" pos:end="215:37">get_value</name><argument_list pos:start="215:38" pos:end="215:58">(<argument pos:start="215:39" pos:end="215:39"><expr pos:start="215:39" pos:end="215:39"><name pos:start="215:39" pos:end="215:39">c</name></expr></argument>, <argument pos:start="215:42" pos:end="215:57"><expr pos:start="215:42" pos:end="215:57"><name pos:start="215:42" pos:end="215:57">BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="217:25" pos:end="219:57">for <control pos:start="217:29" pos:end="217:56">(<init pos:start="217:30" pos:end="217:35"><expr pos:start="217:30" pos:end="217:34"><name pos:start="217:30" pos:end="217:30">i</name> <operator pos:start="217:32" pos:end="217:32">=</operator> <literal type="number" pos:start="217:34" pos:end="217:34">0</literal></expr>;</init> <condition pos:start="217:37" pos:end="217:42"><expr pos:start="217:37" pos:end="217:41"><name pos:start="217:37" pos:end="217:37">i</name> <operator pos:start="217:39" pos:end="217:39">&lt;</operator> <literal type="number" pos:start="217:41" pos:end="217:41">8</literal></expr>;</condition> <incr pos:start="217:44" pos:end="217:55"><expr pos:start="217:44" pos:end="217:46"><name pos:start="217:44" pos:end="217:44">i</name><operator pos:start="217:45" pos:end="217:46">++</operator></expr><operator pos:start="217:47" pos:end="217:47">,</operator> <expr pos:start="217:49" pos:end="217:55"><name pos:start="217:49" pos:end="217:49">v</name> <operator pos:start="217:51" pos:end="217:53">&gt;&gt;=</operator> <literal type="number" pos:start="217:55" pos:end="217:55">1</literal></expr></incr>)</control><block type="pseudo" pos:start="219:29" pos:end="219:57"><block_content pos:start="219:29" pos:end="219:57">

                            <expr_stmt pos:start="219:29" pos:end="219:57"><expr pos:start="219:29" pos:end="219:56"><name pos:start="219:29" pos:end="219:43"><name pos:start="219:29" pos:end="219:34">ublock</name><index pos:start="219:35" pos:end="219:43">[<expr pos:start="219:36" pos:end="219:42"><name pos:start="219:36" pos:end="219:36">i</name> <operator pos:start="219:38" pos:end="219:38">+</operator> <name pos:start="219:40" pos:end="219:40">j</name><operator pos:start="219:41" pos:end="219:41">*</operator><literal type="number" pos:start="219:42" pos:end="219:42">8</literal></expr>]</index></name> <operator pos:start="219:45" pos:end="219:45">=</operator> <name pos:start="219:47" pos:end="219:56"><name pos:start="219:47" pos:end="219:49">col</name><index pos:start="219:50" pos:end="219:56">[<expr pos:start="219:51" pos:end="219:55"><name pos:start="219:51" pos:end="219:51">v</name> <operator pos:start="219:53" pos:end="219:53">&amp;</operator> <literal type="number" pos:start="219:55" pos:end="219:55">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></for>

                    <break pos:start="223:21" pos:end="223:26">break;</break>

                <case pos:start="225:17" pos:end="225:31">case <expr pos:start="225:22" pos:end="225:30"><name pos:start="225:22" pos:end="225:30">RAW_BLOCK</name></expr>:</case>

                    <for pos:start="227:21" pos:end="231:76">for <control pos:start="227:25" pos:end="227:43">(<init pos:start="227:26" pos:end="227:31"><expr pos:start="227:26" pos:end="227:30"><name pos:start="227:26" pos:end="227:26">j</name> <operator pos:start="227:28" pos:end="227:28">=</operator> <literal type="number" pos:start="227:30" pos:end="227:30">0</literal></expr>;</init> <condition pos:start="227:33" pos:end="227:38"><expr pos:start="227:33" pos:end="227:37"><name pos:start="227:33" pos:end="227:33">j</name> <operator pos:start="227:35" pos:end="227:35">&lt;</operator> <literal type="number" pos:start="227:37" pos:end="227:37">8</literal></expr>;</condition> <incr pos:start="227:40" pos:end="227:42"><expr pos:start="227:40" pos:end="227:42"><name pos:start="227:40" pos:end="227:40">j</name><operator pos:start="227:41" pos:end="227:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="229:25" pos:end="231:76"><block_content pos:start="229:25" pos:end="231:76">

                        <for pos:start="229:25" pos:end="231:76">for <control pos:start="229:29" pos:end="229:47">(<init pos:start="229:30" pos:end="229:35"><expr pos:start="229:30" pos:end="229:34"><name pos:start="229:30" pos:end="229:30">i</name> <operator pos:start="229:32" pos:end="229:32">=</operator> <literal type="number" pos:start="229:34" pos:end="229:34">0</literal></expr>;</init> <condition pos:start="229:37" pos:end="229:42"><expr pos:start="229:37" pos:end="229:41"><name pos:start="229:37" pos:end="229:37">i</name> <operator pos:start="229:39" pos:end="229:39">&lt;</operator> <literal type="number" pos:start="229:41" pos:end="229:41">8</literal></expr>;</condition> <incr pos:start="229:44" pos:end="229:46"><expr pos:start="229:44" pos:end="229:46"><name pos:start="229:44" pos:end="229:44">i</name><operator pos:start="229:45" pos:end="229:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="231:29" pos:end="231:76"><block_content pos:start="231:29" pos:end="231:76">

                            <expr_stmt pos:start="231:29" pos:end="231:76"><expr pos:start="231:29" pos:end="231:75"><name pos:start="231:29" pos:end="231:43"><name pos:start="231:29" pos:end="231:34">ublock</name><index pos:start="231:35" pos:end="231:43">[<expr pos:start="231:36" pos:end="231:42"><name pos:start="231:36" pos:end="231:36">i</name> <operator pos:start="231:38" pos:end="231:38">+</operator> <name pos:start="231:40" pos:end="231:40">j</name><operator pos:start="231:41" pos:end="231:41">*</operator><literal type="number" pos:start="231:42" pos:end="231:42">8</literal></expr>]</index></name> <operator pos:start="231:45" pos:end="231:45">=</operator> <call pos:start="231:47" pos:end="231:75"><name pos:start="231:47" pos:end="231:55">get_value</name><argument_list pos:start="231:56" pos:end="231:75">(<argument pos:start="231:57" pos:end="231:57"><expr pos:start="231:57" pos:end="231:57"><name pos:start="231:57" pos:end="231:57">c</name></expr></argument>, <argument pos:start="231:60" pos:end="231:74"><expr pos:start="231:60" pos:end="231:74"><name pos:start="231:60" pos:end="231:74">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

                    <break pos:start="233:21" pos:end="233:26">break;</break>

                <default pos:start="235:17" pos:end="235:24">default:</default>

                    <expr_stmt pos:start="237:21" pos:end="237:91"><expr pos:start="237:21" pos:end="237:90"><call pos:start="237:21" pos:end="237:90"><name pos:start="237:21" pos:end="237:26">av_log</name><argument_list pos:start="237:27" pos:end="237:90">(<argument pos:start="237:28" pos:end="237:35"><expr pos:start="237:28" pos:end="237:35"><name pos:start="237:28" pos:end="237:35"><name pos:start="237:28" pos:end="237:28">c</name><operator pos:start="237:29" pos:end="237:30">-&gt;</operator><name pos:start="237:31" pos:end="237:35">avctx</name></name></expr></argument>, <argument pos:start="237:38" pos:end="237:49"><expr pos:start="237:38" pos:end="237:49"><name pos:start="237:38" pos:end="237:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="237:52" pos:end="237:84"><expr pos:start="237:52" pos:end="237:84"><literal type="string" pos:start="237:52" pos:end="237:84">"Incorrect 16x16 block type %d\n"</literal></expr></argument>, <argument pos:start="237:87" pos:end="237:89"><expr pos:start="237:87" pos:end="237:89"><name pos:start="237:87" pos:end="237:89">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="239:21" pos:end="239:30">return <expr pos:start="239:28" pos:end="239:29"><operator pos:start="239:28" pos:end="239:28">-</operator><literal type="number" pos:start="239:29" pos:end="239:29">1</literal></expr>;</return>

                </block_content>}</block></switch>

                <if_stmt pos:start="243:17" pos:end="245:57"><if pos:start="243:17" pos:end="245:57">if <condition pos:start="243:20" pos:end="243:38">(<expr pos:start="243:21" pos:end="243:37"><name pos:start="243:21" pos:end="243:23">blk</name> <operator pos:start="243:25" pos:end="243:26">!=</operator> <name pos:start="243:28" pos:end="243:37">FILL_BLOCK</name></expr>)</condition><block type="pseudo" pos:start="245:17" pos:end="245:57"><block_content pos:start="245:17" pos:end="245:57">

                <expr_stmt pos:start="245:17" pos:end="245:57"><expr pos:start="245:17" pos:end="245:56"><call pos:start="245:17" pos:end="245:56"><name pos:start="245:17" pos:end="245:35"><name pos:start="245:17" pos:end="245:17">c</name><operator pos:start="245:18" pos:end="245:19">-&gt;</operator><name pos:start="245:20" pos:end="245:23">bdsp</name><operator pos:start="245:24" pos:end="245:24">.</operator><name pos:start="245:25" pos:end="245:35">scale_block</name></name><argument_list pos:start="245:36" pos:end="245:56">(<argument pos:start="245:37" pos:end="245:42"><expr pos:start="245:37" pos:end="245:42"><name pos:start="245:37" pos:end="245:42">ublock</name></expr></argument>, <argument pos:start="245:45" pos:end="245:47"><expr pos:start="245:45" pos:end="245:47"><name pos:start="245:45" pos:end="245:47">dst</name></expr></argument>, <argument pos:start="245:50" pos:end="245:55"><expr pos:start="245:50" pos:end="245:55"><name pos:start="245:50" pos:end="245:55">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:21"><expr pos:start="247:17" pos:end="247:20"><name pos:start="247:17" pos:end="247:18">bx</name><operator pos:start="247:19" pos:end="247:20">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:26"><expr pos:start="249:17" pos:end="249:25"><name pos:start="249:17" pos:end="249:19">dst</name>  <operator pos:start="249:22" pos:end="249:23">+=</operator> <literal type="number" pos:start="249:25" pos:end="249:25">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:26"><expr pos:start="251:17" pos:end="251:25"><name pos:start="251:17" pos:end="251:20">prev</name> <operator pos:start="251:22" pos:end="251:23">+=</operator> <literal type="number" pos:start="251:25" pos:end="251:25">8</literal></expr>;</expr_stmt>

                <break pos:start="253:17" pos:end="253:22">break;</break>

            <case pos:start="255:13" pos:end="255:30">case <expr pos:start="255:18" pos:end="255:29"><name pos:start="255:18" pos:end="255:29">MOTION_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="257:17" pos:end="257:52"><expr pos:start="257:17" pos:end="257:51"><name pos:start="257:17" pos:end="257:20">xoff</name> <operator pos:start="257:22" pos:end="257:22">=</operator> <call pos:start="257:24" pos:end="257:51"><name pos:start="257:24" pos:end="257:32">get_value</name><argument_list pos:start="257:33" pos:end="257:51">(<argument pos:start="257:34" pos:end="257:34"><expr pos:start="257:34" pos:end="257:34"><name pos:start="257:34" pos:end="257:34">c</name></expr></argument>, <argument pos:start="257:37" pos:end="257:50"><expr pos:start="257:37" pos:end="257:50"><name pos:start="257:37" pos:end="257:50">BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="259:17" pos:end="259:52"><expr pos:start="259:17" pos:end="259:51"><name pos:start="259:17" pos:end="259:20">yoff</name> <operator pos:start="259:22" pos:end="259:22">=</operator> <call pos:start="259:24" pos:end="259:51"><name pos:start="259:24" pos:end="259:32">get_value</name><argument_list pos:start="259:33" pos:end="259:51">(<argument pos:start="259:34" pos:end="259:34"><expr pos:start="259:34" pos:end="259:34"><name pos:start="259:34" pos:end="259:34">c</name></expr></argument>, <argument pos:start="259:37" pos:end="259:50"><expr pos:start="259:37" pos:end="259:50"><name pos:start="259:37" pos:end="259:50">BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:50"><expr pos:start="261:17" pos:end="261:49"><name pos:start="261:17" pos:end="261:19">ref</name> <operator pos:start="261:21" pos:end="261:21">=</operator> <name pos:start="261:23" pos:end="261:26">prev</name> <operator pos:start="261:28" pos:end="261:28">+</operator> <name pos:start="261:30" pos:end="261:33">xoff</name> <operator pos:start="261:35" pos:end="261:35">+</operator> <name pos:start="261:37" pos:end="261:40">yoff</name> <operator pos:start="261:42" pos:end="261:42">*</operator> <name pos:start="261:44" pos:end="261:49">stride</name></expr>;</expr_stmt>

                <if_stmt pos:start="263:17" pos:end="271:17"><if pos:start="263:17" pos:end="271:17">if <condition pos:start="263:20" pos:end="263:53">(<expr pos:start="263:21" pos:end="263:52"><name pos:start="263:21" pos:end="263:44"><name pos:start="263:21" pos:end="263:23">ref</name> <argument_list type="generic" pos:start="263:25" pos:end="263:44">&lt; <argument pos:start="263:27" pos:end="263:42"><expr pos:start="263:27" pos:end="263:42"><name pos:start="263:27" pos:end="263:35">ref_start</name> <operator pos:start="263:37" pos:end="263:38">||</operator> <name pos:start="263:40" pos:end="263:42">ref</name></expr></argument> &gt;</argument_list></name> <name pos:start="263:46" pos:end="263:52">ref_end</name></expr>)</condition> <block pos:start="263:55" pos:end="271:17">{<block_content pos:start="265:21" pos:end="269:30">

                    <expr_stmt pos:start="265:21" pos:end="267:53"><expr pos:start="265:21" pos:end="267:52"><call pos:start="265:21" pos:end="267:52"><name pos:start="265:21" pos:end="265:26">av_log</name><argument_list pos:start="265:27" pos:end="267:52">(<argument pos:start="265:28" pos:end="265:35"><expr pos:start="265:28" pos:end="265:35"><name pos:start="265:28" pos:end="265:35"><name pos:start="265:28" pos:end="265:28">c</name><operator pos:start="265:29" pos:end="265:30">-&gt;</operator><name pos:start="265:31" pos:end="265:35">avctx</name></name></expr></argument>, <argument pos:start="265:38" pos:end="265:49"><expr pos:start="265:38" pos:end="265:49"><name pos:start="265:38" pos:end="265:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="265:52" pos:end="265:81"><expr pos:start="265:52" pos:end="265:81"><literal type="string" pos:start="265:52" pos:end="265:81">"Copy out of bounds @%d, %d\n"</literal></expr></argument>,

                           <argument pos:start="267:28" pos:end="267:38"><expr pos:start="267:28" pos:end="267:38"><name pos:start="267:28" pos:end="267:29">bx</name><operator pos:start="267:30" pos:end="267:30">*</operator><literal type="number" pos:start="267:31" pos:end="267:33">8</literal> <operator pos:start="267:33" pos:end="267:33">+</operator> <name pos:start="267:35" pos:end="267:38">xoff</name></expr></argument>, <argument pos:start="267:41" pos:end="267:51"><expr pos:start="267:41" pos:end="267:51"><name pos:start="267:41" pos:end="267:42">by</name><operator pos:start="267:43" pos:end="267:43">*</operator><literal type="number" pos:start="267:44" pos:end="267:46">8</literal> <operator pos:start="267:46" pos:end="267:46">+</operator> <name pos:start="267:48" pos:end="267:51">yoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="269:21" pos:end="269:30">return <expr pos:start="269:28" pos:end="269:29"><operator pos:start="269:28" pos:end="269:28">-</operator><literal type="number" pos:start="269:29" pos:end="269:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:65"><expr pos:start="273:17" pos:end="273:64"><name pos:start="273:17" pos:end="273:43"><name pos:start="273:17" pos:end="273:17">c</name><operator pos:start="273:18" pos:end="273:19">-&gt;</operator><name pos:start="273:20" pos:end="273:22">dsp</name><operator pos:start="273:23" pos:end="273:23">.</operator><name pos:start="273:24" pos:end="273:37">put_pixels_tab</name><index pos:start="273:38" pos:end="273:40">[<expr pos:start="273:39" pos:end="273:39"><literal type="number" pos:start="273:39" pos:end="273:39">1</literal></expr>]</index><index pos:start="273:41" pos:end="273:43">[<expr pos:start="273:42" pos:end="273:42"><literal type="number" pos:start="273:42" pos:end="273:42">0</literal></expr>]</index></name><operator pos:start="273:44" pos:end="273:44">(</operator><name pos:start="273:45" pos:end="273:47">dst</name><operator pos:start="273:48" pos:end="273:48">,</operator> <name pos:start="273:50" pos:end="273:52">ref</name><operator pos:start="273:53" pos:end="273:53">,</operator> <name pos:start="273:55" pos:end="273:60">stride</name><operator pos:start="273:61" pos:end="273:61">,</operator> <literal type="number" pos:start="273:63" pos:end="273:63">8</literal><operator pos:start="273:64" pos:end="273:64">)</operator></expr>;</expr_stmt>

                <break pos:start="275:17" pos:end="275:22">break;</break>

            <case pos:start="277:13" pos:end="277:27">case <expr pos:start="277:18" pos:end="277:26"><name pos:start="277:18" pos:end="277:26">RUN_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="279:17" pos:end="279:54"><expr pos:start="279:17" pos:end="279:53"><name pos:start="279:17" pos:end="279:20">scan</name> <operator pos:start="279:22" pos:end="279:22">=</operator> <name pos:start="279:24" pos:end="279:53"><name pos:start="279:24" pos:end="279:36">bink_patterns</name><index pos:start="279:37" pos:end="279:53">[<expr pos:start="279:38" pos:end="279:52"><call pos:start="279:38" pos:end="279:52"><name pos:start="279:38" pos:end="279:45">get_bits</name><argument_list pos:start="279:46" pos:end="279:52">(<argument pos:start="279:47" pos:end="279:48"><expr pos:start="279:47" pos:end="279:48"><name pos:start="279:47" pos:end="279:48">gb</name></expr></argument>, <argument pos:start="279:51" pos:end="279:51"><expr pos:start="279:51" pos:end="279:51"><literal type="number" pos:start="279:51" pos:end="279:51">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:22"><expr pos:start="281:17" pos:end="281:21"><name pos:start="281:17" pos:end="281:17">i</name> <operator pos:start="281:19" pos:end="281:19">=</operator> <literal type="number" pos:start="281:21" pos:end="281:21">0</literal></expr>;</expr_stmt>

                <do pos:start="283:17" pos:end="315:33">do <block pos:start="283:20" pos:end="315:17">{<block_content pos:start="285:21" pos:end="313:21">

                    <decl_stmt pos:start="285:21" pos:end="285:61"><decl pos:start="285:21" pos:end="285:60"><type pos:start="285:21" pos:end="285:23"><name pos:start="285:21" pos:end="285:23">int</name></type> <name pos:start="285:25" pos:end="285:27">run</name> <init pos:start="285:29" pos:end="285:60">= <expr pos:start="285:31" pos:end="285:60"><call pos:start="285:31" pos:end="285:56"><name pos:start="285:31" pos:end="285:39">get_value</name><argument_list pos:start="285:40" pos:end="285:56">(<argument pos:start="285:41" pos:end="285:41"><expr pos:start="285:41" pos:end="285:41"><name pos:start="285:41" pos:end="285:41">c</name></expr></argument>, <argument pos:start="285:44" pos:end="285:55"><expr pos:start="285:44" pos:end="285:55"><name pos:start="285:44" pos:end="285:55">BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator pos:start="285:58" pos:end="285:58">+</operator> <literal type="number" pos:start="285:60" pos:end="285:60">1</literal></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="289:21" pos:end="289:29"><expr pos:start="289:21" pos:end="289:28"><name pos:start="289:21" pos:end="289:21">i</name> <operator pos:start="289:23" pos:end="289:24">+=</operator> <name pos:start="289:26" pos:end="289:28">run</name></expr>;</expr_stmt>

                    <if_stmt pos:start="291:21" pos:end="297:21"><if pos:start="291:21" pos:end="297:21">if <condition pos:start="291:24" pos:end="291:31">(<expr pos:start="291:25" pos:end="291:30"><name pos:start="291:25" pos:end="291:25">i</name> <operator pos:start="291:27" pos:end="291:27">&gt;</operator> <literal type="number" pos:start="291:29" pos:end="291:30">64</literal></expr>)</condition> <block pos:start="291:33" pos:end="297:21">{<block_content pos:start="293:25" pos:end="295:34">

                        <expr_stmt pos:start="293:25" pos:end="293:83"><expr pos:start="293:25" pos:end="293:82"><call pos:start="293:25" pos:end="293:82"><name pos:start="293:25" pos:end="293:30">av_log</name><argument_list pos:start="293:31" pos:end="293:82">(<argument pos:start="293:32" pos:end="293:39"><expr pos:start="293:32" pos:end="293:39"><name pos:start="293:32" pos:end="293:39"><name pos:start="293:32" pos:end="293:32">c</name><operator pos:start="293:33" pos:end="293:34">-&gt;</operator><name pos:start="293:35" pos:end="293:39">avctx</name></name></expr></argument>, <argument pos:start="293:42" pos:end="293:53"><expr pos:start="293:42" pos:end="293:53"><name pos:start="293:42" pos:end="293:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="293:56" pos:end="293:81"><expr pos:start="293:56" pos:end="293:81"><literal type="string" pos:start="293:56" pos:end="293:81">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="295:25" pos:end="295:34">return <expr pos:start="295:32" pos:end="295:33"><operator pos:start="295:32" pos:end="295:32">-</operator><literal type="number" pos:start="295:33" pos:end="295:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="299:21" pos:end="313:21"><if pos:start="299:21" pos:end="307:21">if <condition pos:start="299:24" pos:end="299:38">(<expr pos:start="299:25" pos:end="299:37"><call pos:start="299:25" pos:end="299:37"><name pos:start="299:25" pos:end="299:33">get_bits1</name><argument_list pos:start="299:34" pos:end="299:37">(<argument pos:start="299:35" pos:end="299:36"><expr pos:start="299:35" pos:end="299:36"><name pos:start="299:35" pos:end="299:36">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="299:40" pos:end="307:21">{<block_content pos:start="301:25" pos:end="305:55">

                        <expr_stmt pos:start="301:25" pos:end="301:58"><expr pos:start="301:25" pos:end="301:57"><name pos:start="301:25" pos:end="301:25">v</name> <operator pos:start="301:27" pos:end="301:27">=</operator> <call pos:start="301:29" pos:end="301:57"><name pos:start="301:29" pos:end="301:37">get_value</name><argument_list pos:start="301:38" pos:end="301:57">(<argument pos:start="301:39" pos:end="301:39"><expr pos:start="301:39" pos:end="301:39"><name pos:start="301:39" pos:end="301:39">c</name></expr></argument>, <argument pos:start="301:42" pos:end="301:56"><expr pos:start="301:42" pos:end="301:56"><name pos:start="301:42" pos:end="301:56">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="303:25" pos:end="305:55">for <control pos:start="303:29" pos:end="303:49">(<init pos:start="303:30" pos:end="303:35"><expr pos:start="303:30" pos:end="303:34"><name pos:start="303:30" pos:end="303:30">j</name> <operator pos:start="303:32" pos:end="303:32">=</operator> <literal type="number" pos:start="303:34" pos:end="303:34">0</literal></expr>;</init> <condition pos:start="303:37" pos:end="303:44"><expr pos:start="303:37" pos:end="303:43"><name pos:start="303:37" pos:end="303:37">j</name> <operator pos:start="303:39" pos:end="303:39">&lt;</operator> <name pos:start="303:41" pos:end="303:43">run</name></expr>;</condition> <incr pos:start="303:46" pos:end="303:48"><expr pos:start="303:46" pos:end="303:48"><name pos:start="303:46" pos:end="303:46">j</name><operator pos:start="303:47" pos:end="303:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="305:29" pos:end="305:55"><block_content pos:start="305:29" pos:end="305:55">

                            <expr_stmt pos:start="305:29" pos:end="305:55"><expr pos:start="305:29" pos:end="305:54"><name pos:start="305:29" pos:end="305:50"><name pos:start="305:29" pos:end="305:31">dst</name><index pos:start="305:32" pos:end="305:50">[<expr pos:start="305:33" pos:end="305:49"><name pos:start="305:33" pos:end="305:49"><name pos:start="305:33" pos:end="305:40">coordmap</name><index pos:start="305:41" pos:end="305:49">[<expr pos:start="305:42" pos:end="305:48"><operator pos:start="305:42" pos:end="305:42">*</operator><name pos:start="305:43" pos:end="305:46">scan</name><operator pos:start="305:47" pos:end="305:48">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="305:52" pos:end="305:52">=</operator> <name pos:start="305:54" pos:end="305:54">v</name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if> <else pos:start="307:23" pos:end="313:21">else <block pos:start="307:28" pos:end="313:21">{<block_content pos:start="309:25" pos:end="311:83">

                        <for pos:start="309:25" pos:end="311:83">for <control pos:start="309:29" pos:end="309:49">(<init pos:start="309:30" pos:end="309:35"><expr pos:start="309:30" pos:end="309:34"><name pos:start="309:30" pos:end="309:30">j</name> <operator pos:start="309:32" pos:end="309:32">=</operator> <literal type="number" pos:start="309:34" pos:end="309:34">0</literal></expr>;</init> <condition pos:start="309:37" pos:end="309:44"><expr pos:start="309:37" pos:end="309:43"><name pos:start="309:37" pos:end="309:37">j</name> <operator pos:start="309:39" pos:end="309:39">&lt;</operator> <name pos:start="309:41" pos:end="309:43">run</name></expr>;</condition> <incr pos:start="309:46" pos:end="309:48"><expr pos:start="309:46" pos:end="309:48"><name pos:start="309:46" pos:end="309:46">j</name><operator pos:start="309:47" pos:end="309:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="311:29" pos:end="311:83"><block_content pos:start="311:29" pos:end="311:83">

                            <expr_stmt pos:start="311:29" pos:end="311:83"><expr pos:start="311:29" pos:end="311:82"><name pos:start="311:29" pos:end="311:50"><name pos:start="311:29" pos:end="311:31">dst</name><index pos:start="311:32" pos:end="311:50">[<expr pos:start="311:33" pos:end="311:49"><name pos:start="311:33" pos:end="311:49"><name pos:start="311:33" pos:end="311:40">coordmap</name><index pos:start="311:41" pos:end="311:49">[<expr pos:start="311:42" pos:end="311:48"><operator pos:start="311:42" pos:end="311:42">*</operator><name pos:start="311:43" pos:end="311:46">scan</name><operator pos:start="311:47" pos:end="311:48">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="311:52" pos:end="311:52">=</operator> <call pos:start="311:54" pos:end="311:82"><name pos:start="311:54" pos:end="311:62">get_value</name><argument_list pos:start="311:63" pos:end="311:82">(<argument pos:start="311:64" pos:end="311:64"><expr pos:start="311:64" pos:end="311:64"><name pos:start="311:64" pos:end="311:64">c</name></expr></argument>, <argument pos:start="311:67" pos:end="311:81"><expr pos:start="311:67" pos:end="311:81"><name pos:start="311:67" pos:end="311:81">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block> while <condition pos:start="315:25" pos:end="315:32">(<expr pos:start="315:26" pos:end="315:31"><name pos:start="315:26" pos:end="315:26">i</name> <operator pos:start="315:28" pos:end="315:28">&lt;</operator> <literal type="number" pos:start="315:30" pos:end="315:31">63</literal></expr>)</condition>;</do>

                <if_stmt pos:start="317:17" pos:end="319:75"><if pos:start="317:17" pos:end="319:75">if <condition pos:start="317:20" pos:end="317:28">(<expr pos:start="317:21" pos:end="317:27"><name pos:start="317:21" pos:end="317:21">i</name> <operator pos:start="317:23" pos:end="317:24">==</operator> <literal type="number" pos:start="317:26" pos:end="317:27">63</literal></expr>)</condition><block type="pseudo" pos:start="319:21" pos:end="319:75"><block_content pos:start="319:21" pos:end="319:75">

                    <expr_stmt pos:start="319:21" pos:end="319:75"><expr pos:start="319:21" pos:end="319:74"><name pos:start="319:21" pos:end="319:42"><name pos:start="319:21" pos:end="319:23">dst</name><index pos:start="319:24" pos:end="319:42">[<expr pos:start="319:25" pos:end="319:41"><name pos:start="319:25" pos:end="319:41"><name pos:start="319:25" pos:end="319:32">coordmap</name><index pos:start="319:33" pos:end="319:41">[<expr pos:start="319:34" pos:end="319:40"><operator pos:start="319:34" pos:end="319:34">*</operator><name pos:start="319:35" pos:end="319:38">scan</name><operator pos:start="319:39" pos:end="319:40">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="319:44" pos:end="319:44">=</operator> <call pos:start="319:46" pos:end="319:74"><name pos:start="319:46" pos:end="319:54">get_value</name><argument_list pos:start="319:55" pos:end="319:74">(<argument pos:start="319:56" pos:end="319:56"><expr pos:start="319:56" pos:end="319:56"><name pos:start="319:56" pos:end="319:56">c</name></expr></argument>, <argument pos:start="319:59" pos:end="319:73"><expr pos:start="319:59" pos:end="319:73"><name pos:start="319:59" pos:end="319:73">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="321:17" pos:end="321:22">break;</break>

            <case pos:start="323:13" pos:end="323:31">case <expr pos:start="323:18" pos:end="323:30"><name pos:start="323:18" pos:end="323:30">RESIDUE_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="325:17" pos:end="325:52"><expr pos:start="325:17" pos:end="325:51"><name pos:start="325:17" pos:end="325:20">xoff</name> <operator pos:start="325:22" pos:end="325:22">=</operator> <call pos:start="325:24" pos:end="325:51"><name pos:start="325:24" pos:end="325:32">get_value</name><argument_list pos:start="325:33" pos:end="325:51">(<argument pos:start="325:34" pos:end="325:34"><expr pos:start="325:34" pos:end="325:34"><name pos:start="325:34" pos:end="325:34">c</name></expr></argument>, <argument pos:start="325:37" pos:end="325:50"><expr pos:start="325:37" pos:end="325:50"><name pos:start="325:37" pos:end="325:50">BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:52"><expr pos:start="327:17" pos:end="327:51"><name pos:start="327:17" pos:end="327:20">yoff</name> <operator pos:start="327:22" pos:end="327:22">=</operator> <call pos:start="327:24" pos:end="327:51"><name pos:start="327:24" pos:end="327:32">get_value</name><argument_list pos:start="327:33" pos:end="327:51">(<argument pos:start="327:34" pos:end="327:34"><expr pos:start="327:34" pos:end="327:34"><name pos:start="327:34" pos:end="327:34">c</name></expr></argument>, <argument pos:start="327:37" pos:end="327:50"><expr pos:start="327:37" pos:end="327:50"><name pos:start="327:37" pos:end="327:50">BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:50"><expr pos:start="329:17" pos:end="329:49"><name pos:start="329:17" pos:end="329:19">ref</name> <operator pos:start="329:21" pos:end="329:21">=</operator> <name pos:start="329:23" pos:end="329:26">prev</name> <operator pos:start="329:28" pos:end="329:28">+</operator> <name pos:start="329:30" pos:end="329:33">xoff</name> <operator pos:start="329:35" pos:end="329:35">+</operator> <name pos:start="329:37" pos:end="329:40">yoff</name> <operator pos:start="329:42" pos:end="329:42">*</operator> <name pos:start="329:44" pos:end="329:49">stride</name></expr>;</expr_stmt>

                <if_stmt pos:start="331:17" pos:end="339:17"><if pos:start="331:17" pos:end="339:17">if <condition pos:start="331:20" pos:end="331:53">(<expr pos:start="331:21" pos:end="331:52"><name pos:start="331:21" pos:end="331:44"><name pos:start="331:21" pos:end="331:23">ref</name> <argument_list type="generic" pos:start="331:25" pos:end="331:44">&lt; <argument pos:start="331:27" pos:end="331:42"><expr pos:start="331:27" pos:end="331:42"><name pos:start="331:27" pos:end="331:35">ref_start</name> <operator pos:start="331:37" pos:end="331:38">||</operator> <name pos:start="331:40" pos:end="331:42">ref</name></expr></argument> &gt;</argument_list></name> <name pos:start="331:46" pos:end="331:52">ref_end</name></expr>)</condition> <block pos:start="331:55" pos:end="339:17">{<block_content pos:start="333:21" pos:end="337:30">

                    <expr_stmt pos:start="333:21" pos:end="335:53"><expr pos:start="333:21" pos:end="335:52"><call pos:start="333:21" pos:end="335:52"><name pos:start="333:21" pos:end="333:26">av_log</name><argument_list pos:start="333:27" pos:end="335:52">(<argument pos:start="333:28" pos:end="333:35"><expr pos:start="333:28" pos:end="333:35"><name pos:start="333:28" pos:end="333:35"><name pos:start="333:28" pos:end="333:28">c</name><operator pos:start="333:29" pos:end="333:30">-&gt;</operator><name pos:start="333:31" pos:end="333:35">avctx</name></name></expr></argument>, <argument pos:start="333:38" pos:end="333:49"><expr pos:start="333:38" pos:end="333:49"><name pos:start="333:38" pos:end="333:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="333:52" pos:end="333:81"><expr pos:start="333:52" pos:end="333:81"><literal type="string" pos:start="333:52" pos:end="333:81">"Copy out of bounds @%d, %d\n"</literal></expr></argument>,

                           <argument pos:start="335:28" pos:end="335:38"><expr pos:start="335:28" pos:end="335:38"><name pos:start="335:28" pos:end="335:29">bx</name><operator pos:start="335:30" pos:end="335:30">*</operator><literal type="number" pos:start="335:31" pos:end="335:33">8</literal> <operator pos:start="335:33" pos:end="335:33">+</operator> <name pos:start="335:35" pos:end="335:38">xoff</name></expr></argument>, <argument pos:start="335:41" pos:end="335:51"><expr pos:start="335:41" pos:end="335:51"><name pos:start="335:41" pos:end="335:42">by</name><operator pos:start="335:43" pos:end="335:43">*</operator><literal type="number" pos:start="335:44" pos:end="335:46">8</literal> <operator pos:start="335:46" pos:end="335:46">+</operator> <name pos:start="335:48" pos:end="335:51">yoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="337:21" pos:end="337:30">return <expr pos:start="337:28" pos:end="337:29"><operator pos:start="337:28" pos:end="337:28">-</operator><literal type="number" pos:start="337:29" pos:end="337:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="341:17" pos:end="341:65"><expr pos:start="341:17" pos:end="341:64"><name pos:start="341:17" pos:end="341:43"><name pos:start="341:17" pos:end="341:17">c</name><operator pos:start="341:18" pos:end="341:19">-&gt;</operator><name pos:start="341:20" pos:end="341:22">dsp</name><operator pos:start="341:23" pos:end="341:23">.</operator><name pos:start="341:24" pos:end="341:37">put_pixels_tab</name><index pos:start="341:38" pos:end="341:40">[<expr pos:start="341:39" pos:end="341:39"><literal type="number" pos:start="341:39" pos:end="341:39">1</literal></expr>]</index><index pos:start="341:41" pos:end="341:43">[<expr pos:start="341:42" pos:end="341:42"><literal type="number" pos:start="341:42" pos:end="341:42">0</literal></expr>]</index></name><operator pos:start="341:44" pos:end="341:44">(</operator><name pos:start="341:45" pos:end="341:47">dst</name><operator pos:start="341:48" pos:end="341:48">,</operator> <name pos:start="341:50" pos:end="341:52">ref</name><operator pos:start="341:53" pos:end="341:53">,</operator> <name pos:start="341:55" pos:end="341:60">stride</name><operator pos:start="341:61" pos:end="341:61">,</operator> <literal type="number" pos:start="341:63" pos:end="341:63">8</literal><operator pos:start="341:64" pos:end="341:64">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:42"><expr pos:start="343:17" pos:end="343:41"><call pos:start="343:17" pos:end="343:41"><name pos:start="343:17" pos:end="343:34"><name pos:start="343:17" pos:end="343:17">c</name><operator pos:start="343:18" pos:end="343:19">-&gt;</operator><name pos:start="343:20" pos:end="343:22">dsp</name><operator pos:start="343:23" pos:end="343:23">.</operator><name pos:start="343:24" pos:end="343:34">clear_block</name></name><argument_list pos:start="343:35" pos:end="343:41">(<argument pos:start="343:36" pos:end="343:40"><expr pos:start="343:36" pos:end="343:40"><name pos:start="343:36" pos:end="343:40">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:36"><expr pos:start="345:17" pos:end="345:35"><name pos:start="345:17" pos:end="345:17">v</name> <operator pos:start="345:19" pos:end="345:19">=</operator> <call pos:start="345:21" pos:end="345:35"><name pos:start="345:21" pos:end="345:28">get_bits</name><argument_list pos:start="345:29" pos:end="345:35">(<argument pos:start="345:30" pos:end="345:31"><expr pos:start="345:30" pos:end="345:31"><name pos:start="345:30" pos:end="345:31">gb</name></expr></argument>, <argument pos:start="345:34" pos:end="345:34"><expr pos:start="345:34" pos:end="345:34"><literal type="number" pos:start="345:34" pos:end="345:34">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:43"><expr pos:start="347:17" pos:end="347:42"><call pos:start="347:17" pos:end="347:42"><name pos:start="347:17" pos:end="347:28">read_residue</name><argument_list pos:start="347:29" pos:end="347:42">(<argument pos:start="347:30" pos:end="347:31"><expr pos:start="347:30" pos:end="347:31"><name pos:start="347:30" pos:end="347:31">gb</name></expr></argument>, <argument pos:start="347:34" pos:end="347:38"><expr pos:start="347:34" pos:end="347:38"><name pos:start="347:34" pos:end="347:38">block</name></expr></argument>, <argument pos:start="347:41" pos:end="347:41"><expr pos:start="347:41" pos:end="347:41"><name pos:start="347:41" pos:end="347:41">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:55"><expr pos:start="349:17" pos:end="349:54"><call pos:start="349:17" pos:end="349:54"><name pos:start="349:17" pos:end="349:34"><name pos:start="349:17" pos:end="349:17">c</name><operator pos:start="349:18" pos:end="349:19">-&gt;</operator><name pos:start="349:20" pos:end="349:22">dsp</name><operator pos:start="349:23" pos:end="349:23">.</operator><name pos:start="349:24" pos:end="349:34">add_pixels8</name></name><argument_list pos:start="349:35" pos:end="349:54">(<argument pos:start="349:36" pos:end="349:38"><expr pos:start="349:36" pos:end="349:38"><name pos:start="349:36" pos:end="349:38">dst</name></expr></argument>, <argument pos:start="349:41" pos:end="349:45"><expr pos:start="349:41" pos:end="349:45"><name pos:start="349:41" pos:end="349:45">block</name></expr></argument>, <argument pos:start="349:48" pos:end="349:53"><expr pos:start="349:48" pos:end="349:53"><name pos:start="349:48" pos:end="349:53">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="351:17" pos:end="351:22">break;</break>

            <case pos:start="353:13" pos:end="353:29">case <expr pos:start="353:18" pos:end="353:28"><name pos:start="353:18" pos:end="353:28">INTRA_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="355:17" pos:end="355:60"><expr pos:start="355:17" pos:end="355:59"><call pos:start="355:17" pos:end="355:59"><name pos:start="355:17" pos:end="355:22">memset</name><argument_list pos:start="355:23" pos:end="355:59">(<argument pos:start="355:24" pos:end="355:31"><expr pos:start="355:24" pos:end="355:31"><name pos:start="355:24" pos:end="355:31">dctblock</name></expr></argument>, <argument pos:start="355:34" pos:end="355:34"><expr pos:start="355:34" pos:end="355:34"><literal type="number" pos:start="355:34" pos:end="355:34">0</literal></expr></argument>, <argument pos:start="355:37" pos:end="355:58"><expr pos:start="355:37" pos:end="355:58"><sizeof pos:start="355:37" pos:end="355:53">sizeof<argument_list pos:start="355:43" pos:end="355:53">(<argument pos:start="355:44" pos:end="355:52"><expr pos:start="355:44" pos:end="355:52"><operator pos:start="355:44" pos:end="355:44">*</operator><name pos:start="355:45" pos:end="355:52">dctblock</name></expr></argument>)</argument_list></sizeof> <operator pos:start="355:55" pos:end="355:55">*</operator> <literal type="number" pos:start="355:57" pos:end="355:58">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="357:62"><expr pos:start="357:17" pos:end="357:61"><name pos:start="357:17" pos:end="357:27"><name pos:start="357:17" pos:end="357:24">dctblock</name><index pos:start="357:25" pos:end="357:27">[<expr pos:start="357:26" pos:end="357:26"><literal type="number" pos:start="357:26" pos:end="357:26">0</literal></expr>]</index></name> <operator pos:start="357:29" pos:end="357:29">=</operator> <call pos:start="357:31" pos:end="357:61"><name pos:start="357:31" pos:end="357:39">get_value</name><argument_list pos:start="357:40" pos:end="357:61">(<argument pos:start="357:41" pos:end="357:41"><expr pos:start="357:41" pos:end="357:41"><name pos:start="357:41" pos:end="357:41">c</name></expr></argument>, <argument pos:start="357:44" pos:end="357:60"><expr pos:start="357:44" pos:end="357:60"><name pos:start="357:44" pos:end="357:60">BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:79"><expr pos:start="359:17" pos:end="359:78"><call pos:start="359:17" pos:end="359:78"><name pos:start="359:17" pos:end="359:31">read_dct_coeffs</name><argument_list pos:start="359:32" pos:end="359:78">(<argument pos:start="359:33" pos:end="359:34"><expr pos:start="359:33" pos:end="359:34"><name pos:start="359:33" pos:end="359:34">gb</name></expr></argument>, <argument pos:start="359:37" pos:end="359:44"><expr pos:start="359:37" pos:end="359:44"><name pos:start="359:37" pos:end="359:44">dctblock</name></expr></argument>, <argument pos:start="359:47" pos:end="359:55"><expr pos:start="359:47" pos:end="359:55"><name pos:start="359:47" pos:end="359:55">bink_scan</name></expr></argument>, <argument pos:start="359:58" pos:end="359:73"><expr pos:start="359:58" pos:end="359:73"><name pos:start="359:58" pos:end="359:73">bink_intra_quant</name></expr></argument>, <argument pos:start="359:76" pos:end="359:77"><expr pos:start="359:76" pos:end="359:77"><operator pos:start="359:76" pos:end="359:76">-</operator><literal type="number" pos:start="359:77" pos:end="359:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="361:17" pos:end="361:56"><expr pos:start="361:17" pos:end="361:55"><call pos:start="361:17" pos:end="361:55"><name pos:start="361:17" pos:end="361:32"><name pos:start="361:17" pos:end="361:17">c</name><operator pos:start="361:18" pos:end="361:19">-&gt;</operator><name pos:start="361:20" pos:end="361:23">bdsp</name><operator pos:start="361:24" pos:end="361:24">.</operator><name pos:start="361:25" pos:end="361:32">idct_put</name></name><argument_list pos:start="361:33" pos:end="361:55">(<argument pos:start="361:34" pos:end="361:36"><expr pos:start="361:34" pos:end="361:36"><name pos:start="361:34" pos:end="361:36">dst</name></expr></argument>, <argument pos:start="361:39" pos:end="361:44"><expr pos:start="361:39" pos:end="361:44"><name pos:start="361:39" pos:end="361:44">stride</name></expr></argument>, <argument pos:start="361:47" pos:end="361:54"><expr pos:start="361:47" pos:end="361:54"><name pos:start="361:47" pos:end="361:54">dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="363:17" pos:end="363:22">break;</break>

            <case pos:start="365:13" pos:end="365:28">case <expr pos:start="365:18" pos:end="365:27"><name pos:start="365:18" pos:end="365:27">FILL_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="367:17" pos:end="367:50"><expr pos:start="367:17" pos:end="367:49"><name pos:start="367:17" pos:end="367:17">v</name> <operator pos:start="367:19" pos:end="367:19">=</operator> <call pos:start="367:21" pos:end="367:49"><name pos:start="367:21" pos:end="367:29">get_value</name><argument_list pos:start="367:30" pos:end="367:49">(<argument pos:start="367:31" pos:end="367:31"><expr pos:start="367:31" pos:end="367:31"><name pos:start="367:31" pos:end="367:31">c</name></expr></argument>, <argument pos:start="367:34" pos:end="367:48"><expr pos:start="367:34" pos:end="367:48"><name pos:start="367:34" pos:end="367:48">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="369:17" pos:end="369:60"><expr pos:start="369:17" pos:end="369:59"><name pos:start="369:17" pos:end="369:40"><name pos:start="369:17" pos:end="369:17">c</name><operator pos:start="369:18" pos:end="369:19">-&gt;</operator><name pos:start="369:20" pos:end="369:22">dsp</name><operator pos:start="369:23" pos:end="369:23">.</operator><name pos:start="369:24" pos:end="369:37">fill_block_tab</name><index pos:start="369:38" pos:end="369:40">[<expr pos:start="369:39" pos:end="369:39"><literal type="number" pos:start="369:39" pos:end="369:39">1</literal></expr>]</index></name><operator pos:start="369:41" pos:end="369:41">(</operator><name pos:start="369:42" pos:end="369:44">dst</name><operator pos:start="369:45" pos:end="369:45">,</operator> <name pos:start="369:47" pos:end="369:47">v</name><operator pos:start="369:48" pos:end="369:48">,</operator> <name pos:start="369:50" pos:end="369:55">stride</name><operator pos:start="369:56" pos:end="369:56">,</operator> <literal type="number" pos:start="369:58" pos:end="369:58">8</literal><operator pos:start="369:59" pos:end="369:59">)</operator></expr>;</expr_stmt>

                <break pos:start="371:17" pos:end="371:22">break;</break>

            <case pos:start="373:13" pos:end="373:29">case <expr pos:start="373:18" pos:end="373:28"><name pos:start="373:18" pos:end="373:28">INTER_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="375:17" pos:end="375:52"><expr pos:start="375:17" pos:end="375:51"><name pos:start="375:17" pos:end="375:20">xoff</name> <operator pos:start="375:22" pos:end="375:22">=</operator> <call pos:start="375:24" pos:end="375:51"><name pos:start="375:24" pos:end="375:32">get_value</name><argument_list pos:start="375:33" pos:end="375:51">(<argument pos:start="375:34" pos:end="375:34"><expr pos:start="375:34" pos:end="375:34"><name pos:start="375:34" pos:end="375:34">c</name></expr></argument>, <argument pos:start="375:37" pos:end="375:50"><expr pos:start="375:37" pos:end="375:50"><name pos:start="375:37" pos:end="375:50">BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:52"><expr pos:start="377:17" pos:end="377:51"><name pos:start="377:17" pos:end="377:20">yoff</name> <operator pos:start="377:22" pos:end="377:22">=</operator> <call pos:start="377:24" pos:end="377:51"><name pos:start="377:24" pos:end="377:32">get_value</name><argument_list pos:start="377:33" pos:end="377:51">(<argument pos:start="377:34" pos:end="377:34"><expr pos:start="377:34" pos:end="377:34"><name pos:start="377:34" pos:end="377:34">c</name></expr></argument>, <argument pos:start="377:37" pos:end="377:50"><expr pos:start="377:37" pos:end="377:50"><name pos:start="377:37" pos:end="377:50">BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:50"><expr pos:start="379:17" pos:end="379:49"><name pos:start="379:17" pos:end="379:19">ref</name> <operator pos:start="379:21" pos:end="379:21">=</operator> <name pos:start="379:23" pos:end="379:26">prev</name> <operator pos:start="379:28" pos:end="379:28">+</operator> <name pos:start="379:30" pos:end="379:33">xoff</name> <operator pos:start="379:35" pos:end="379:35">+</operator> <name pos:start="379:37" pos:end="379:40">yoff</name> <operator pos:start="379:42" pos:end="379:42">*</operator> <name pos:start="379:44" pos:end="379:49">stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:65"><expr pos:start="381:17" pos:end="381:64"><name pos:start="381:17" pos:end="381:43"><name pos:start="381:17" pos:end="381:17">c</name><operator pos:start="381:18" pos:end="381:19">-&gt;</operator><name pos:start="381:20" pos:end="381:22">dsp</name><operator pos:start="381:23" pos:end="381:23">.</operator><name pos:start="381:24" pos:end="381:37">put_pixels_tab</name><index pos:start="381:38" pos:end="381:40">[<expr pos:start="381:39" pos:end="381:39"><literal type="number" pos:start="381:39" pos:end="381:39">1</literal></expr>]</index><index pos:start="381:41" pos:end="381:43">[<expr pos:start="381:42" pos:end="381:42"><literal type="number" pos:start="381:42" pos:end="381:42">0</literal></expr>]</index></name><operator pos:start="381:44" pos:end="381:44">(</operator><name pos:start="381:45" pos:end="381:47">dst</name><operator pos:start="381:48" pos:end="381:48">,</operator> <name pos:start="381:50" pos:end="381:52">ref</name><operator pos:start="381:53" pos:end="381:53">,</operator> <name pos:start="381:55" pos:end="381:60">stride</name><operator pos:start="381:61" pos:end="381:61">,</operator> <literal type="number" pos:start="381:63" pos:end="381:63">8</literal><operator pos:start="381:64" pos:end="381:64">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:60"><expr pos:start="383:17" pos:end="383:59"><call pos:start="383:17" pos:end="383:59"><name pos:start="383:17" pos:end="383:22">memset</name><argument_list pos:start="383:23" pos:end="383:59">(<argument pos:start="383:24" pos:end="383:31"><expr pos:start="383:24" pos:end="383:31"><name pos:start="383:24" pos:end="383:31">dctblock</name></expr></argument>, <argument pos:start="383:34" pos:end="383:34"><expr pos:start="383:34" pos:end="383:34"><literal type="number" pos:start="383:34" pos:end="383:34">0</literal></expr></argument>, <argument pos:start="383:37" pos:end="383:58"><expr pos:start="383:37" pos:end="383:58"><sizeof pos:start="383:37" pos:end="383:53">sizeof<argument_list pos:start="383:43" pos:end="383:53">(<argument pos:start="383:44" pos:end="383:52"><expr pos:start="383:44" pos:end="383:52"><operator pos:start="383:44" pos:end="383:44">*</operator><name pos:start="383:45" pos:end="383:52">dctblock</name></expr></argument>)</argument_list></sizeof> <operator pos:start="383:55" pos:end="383:55">*</operator> <literal type="number" pos:start="383:57" pos:end="383:58">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="385:17" pos:end="385:62"><expr pos:start="385:17" pos:end="385:61"><name pos:start="385:17" pos:end="385:27"><name pos:start="385:17" pos:end="385:24">dctblock</name><index pos:start="385:25" pos:end="385:27">[<expr pos:start="385:26" pos:end="385:26"><literal type="number" pos:start="385:26" pos:end="385:26">0</literal></expr>]</index></name> <operator pos:start="385:29" pos:end="385:29">=</operator> <call pos:start="385:31" pos:end="385:61"><name pos:start="385:31" pos:end="385:39">get_value</name><argument_list pos:start="385:40" pos:end="385:61">(<argument pos:start="385:41" pos:end="385:41"><expr pos:start="385:41" pos:end="385:41"><name pos:start="385:41" pos:end="385:41">c</name></expr></argument>, <argument pos:start="385:44" pos:end="385:60"><expr pos:start="385:44" pos:end="385:60"><name pos:start="385:44" pos:end="385:60">BINK_SRC_INTER_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="387:17" pos:end="387:79"><expr pos:start="387:17" pos:end="387:78"><call pos:start="387:17" pos:end="387:78"><name pos:start="387:17" pos:end="387:31">read_dct_coeffs</name><argument_list pos:start="387:32" pos:end="387:78">(<argument pos:start="387:33" pos:end="387:34"><expr pos:start="387:33" pos:end="387:34"><name pos:start="387:33" pos:end="387:34">gb</name></expr></argument>, <argument pos:start="387:37" pos:end="387:44"><expr pos:start="387:37" pos:end="387:44"><name pos:start="387:37" pos:end="387:44">dctblock</name></expr></argument>, <argument pos:start="387:47" pos:end="387:55"><expr pos:start="387:47" pos:end="387:55"><name pos:start="387:47" pos:end="387:55">bink_scan</name></expr></argument>, <argument pos:start="387:58" pos:end="387:73"><expr pos:start="387:58" pos:end="387:73"><name pos:start="387:58" pos:end="387:73">bink_inter_quant</name></expr></argument>, <argument pos:start="387:76" pos:end="387:77"><expr pos:start="387:76" pos:end="387:77"><operator pos:start="387:76" pos:end="387:76">-</operator><literal type="number" pos:start="387:77" pos:end="387:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="389:17" pos:end="389:56"><expr pos:start="389:17" pos:end="389:55"><call pos:start="389:17" pos:end="389:55"><name pos:start="389:17" pos:end="389:32"><name pos:start="389:17" pos:end="389:17">c</name><operator pos:start="389:18" pos:end="389:19">-&gt;</operator><name pos:start="389:20" pos:end="389:23">bdsp</name><operator pos:start="389:24" pos:end="389:24">.</operator><name pos:start="389:25" pos:end="389:32">idct_add</name></name><argument_list pos:start="389:33" pos:end="389:55">(<argument pos:start="389:34" pos:end="389:36"><expr pos:start="389:34" pos:end="389:36"><name pos:start="389:34" pos:end="389:36">dst</name></expr></argument>, <argument pos:start="389:39" pos:end="389:44"><expr pos:start="389:39" pos:end="389:44"><name pos:start="389:39" pos:end="389:44">stride</name></expr></argument>, <argument pos:start="389:47" pos:end="389:54"><expr pos:start="389:47" pos:end="389:54"><name pos:start="389:47" pos:end="389:54">dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="391:17" pos:end="391:22">break;</break>

            <case pos:start="393:13" pos:end="393:31">case <expr pos:start="393:18" pos:end="393:30"><name pos:start="393:18" pos:end="393:30">PATTERN_BLOCK</name></expr>:</case>

                <for pos:start="395:17" pos:end="397:59">for <control pos:start="395:21" pos:end="395:39">(<init pos:start="395:22" pos:end="395:27"><expr pos:start="395:22" pos:end="395:26"><name pos:start="395:22" pos:end="395:22">i</name> <operator pos:start="395:24" pos:end="395:24">=</operator> <literal type="number" pos:start="395:26" pos:end="395:26">0</literal></expr>;</init> <condition pos:start="395:29" pos:end="395:34"><expr pos:start="395:29" pos:end="395:33"><name pos:start="395:29" pos:end="395:29">i</name> <operator pos:start="395:31" pos:end="395:31">&lt;</operator> <literal type="number" pos:start="395:33" pos:end="395:33">2</literal></expr>;</condition> <incr pos:start="395:36" pos:end="395:38"><expr pos:start="395:36" pos:end="395:38"><name pos:start="395:36" pos:end="395:36">i</name><operator pos:start="395:37" pos:end="395:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="397:21" pos:end="397:59"><block_content pos:start="397:21" pos:end="397:59">

                    <expr_stmt pos:start="397:21" pos:end="397:59"><expr pos:start="397:21" pos:end="397:58"><name pos:start="397:21" pos:end="397:26"><name pos:start="397:21" pos:end="397:23">col</name><index pos:start="397:24" pos:end="397:26">[<expr pos:start="397:25" pos:end="397:25"><name pos:start="397:25" pos:end="397:25">i</name></expr>]</index></name> <operator pos:start="397:28" pos:end="397:28">=</operator> <call pos:start="397:30" pos:end="397:58"><name pos:start="397:30" pos:end="397:38">get_value</name><argument_list pos:start="397:39" pos:end="397:58">(<argument pos:start="397:40" pos:end="397:40"><expr pos:start="397:40" pos:end="397:40"><name pos:start="397:40" pos:end="397:40">c</name></expr></argument>, <argument pos:start="397:43" pos:end="397:57"><expr pos:start="397:43" pos:end="397:57"><name pos:start="397:43" pos:end="397:57">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <for pos:start="399:17" pos:end="407:17">for <control pos:start="399:21" pos:end="399:39">(<init pos:start="399:22" pos:end="399:27"><expr pos:start="399:22" pos:end="399:26"><name pos:start="399:22" pos:end="399:22">i</name> <operator pos:start="399:24" pos:end="399:24">=</operator> <literal type="number" pos:start="399:26" pos:end="399:26">0</literal></expr>;</init> <condition pos:start="399:29" pos:end="399:34"><expr pos:start="399:29" pos:end="399:33"><name pos:start="399:29" pos:end="399:29">i</name> <operator pos:start="399:31" pos:end="399:31">&lt;</operator> <literal type="number" pos:start="399:33" pos:end="399:33">8</literal></expr>;</condition> <incr pos:start="399:36" pos:end="399:38"><expr pos:start="399:36" pos:end="399:38"><name pos:start="399:36" pos:end="399:36">i</name><operator pos:start="399:37" pos:end="399:38">++</operator></expr></incr>)</control> <block pos:start="399:41" pos:end="407:17">{<block_content pos:start="401:21" pos:end="405:55">

                    <expr_stmt pos:start="401:21" pos:end="401:55"><expr pos:start="401:21" pos:end="401:54"><name pos:start="401:21" pos:end="401:21">v</name> <operator pos:start="401:23" pos:end="401:23">=</operator> <call pos:start="401:25" pos:end="401:54"><name pos:start="401:25" pos:end="401:33">get_value</name><argument_list pos:start="401:34" pos:end="401:54">(<argument pos:start="401:35" pos:end="401:35"><expr pos:start="401:35" pos:end="401:35"><name pos:start="401:35" pos:end="401:35">c</name></expr></argument>, <argument pos:start="401:38" pos:end="401:53"><expr pos:start="401:38" pos:end="401:53"><name pos:start="401:38" pos:end="401:53">BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="403:21" pos:end="405:55">for <control pos:start="403:25" pos:end="403:52">(<init pos:start="403:26" pos:end="403:31"><expr pos:start="403:26" pos:end="403:30"><name pos:start="403:26" pos:end="403:26">j</name> <operator pos:start="403:28" pos:end="403:28">=</operator> <literal type="number" pos:start="403:30" pos:end="403:30">0</literal></expr>;</init> <condition pos:start="403:33" pos:end="403:38"><expr pos:start="403:33" pos:end="403:37"><name pos:start="403:33" pos:end="403:33">j</name> <operator pos:start="403:35" pos:end="403:35">&lt;</operator> <literal type="number" pos:start="403:37" pos:end="403:37">8</literal></expr>;</condition> <incr pos:start="403:40" pos:end="403:51"><expr pos:start="403:40" pos:end="403:42"><name pos:start="403:40" pos:end="403:40">j</name><operator pos:start="403:41" pos:end="403:42">++</operator></expr><operator pos:start="403:43" pos:end="403:43">,</operator> <expr pos:start="403:45" pos:end="403:51"><name pos:start="403:45" pos:end="403:45">v</name> <operator pos:start="403:47" pos:end="403:49">&gt;&gt;=</operator> <literal type="number" pos:start="403:51" pos:end="403:51">1</literal></expr></incr>)</control><block type="pseudo" pos:start="405:25" pos:end="405:55"><block_content pos:start="405:25" pos:end="405:55">

                        <expr_stmt pos:start="405:25" pos:end="405:55"><expr pos:start="405:25" pos:end="405:54"><name pos:start="405:25" pos:end="405:41"><name pos:start="405:25" pos:end="405:27">dst</name><index pos:start="405:28" pos:end="405:41">[<expr pos:start="405:29" pos:end="405:40"><name pos:start="405:29" pos:end="405:29">i</name><operator pos:start="405:30" pos:end="405:30">*</operator><name pos:start="405:31" pos:end="405:36">stride</name> <operator pos:start="405:38" pos:end="405:38">+</operator> <name pos:start="405:40" pos:end="405:40">j</name></expr>]</index></name> <operator pos:start="405:43" pos:end="405:43">=</operator> <name pos:start="405:45" pos:end="405:54"><name pos:start="405:45" pos:end="405:47">col</name><index pos:start="405:48" pos:end="405:54">[<expr pos:start="405:49" pos:end="405:53"><name pos:start="405:49" pos:end="405:49">v</name> <operator pos:start="405:51" pos:end="405:51">&amp;</operator> <literal type="number" pos:start="405:53" pos:end="405:53">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></for>

                <break pos:start="409:17" pos:end="409:22">break;</break>

            <case pos:start="411:13" pos:end="411:27">case <expr pos:start="411:18" pos:end="411:26"><name pos:start="411:18" pos:end="411:26">RAW_BLOCK</name></expr>:</case>

                <for pos:start="413:17" pos:end="415:88">for <control pos:start="413:21" pos:end="413:39">(<init pos:start="413:22" pos:end="413:27"><expr pos:start="413:22" pos:end="413:26"><name pos:start="413:22" pos:end="413:22">i</name> <operator pos:start="413:24" pos:end="413:24">=</operator> <literal type="number" pos:start="413:26" pos:end="413:26">0</literal></expr>;</init> <condition pos:start="413:29" pos:end="413:34"><expr pos:start="413:29" pos:end="413:33"><name pos:start="413:29" pos:end="413:29">i</name> <operator pos:start="413:31" pos:end="413:31">&lt;</operator> <literal type="number" pos:start="413:33" pos:end="413:33">8</literal></expr>;</condition> <incr pos:start="413:36" pos:end="413:38"><expr pos:start="413:36" pos:end="413:38"><name pos:start="413:36" pos:end="413:36">i</name><operator pos:start="413:37" pos:end="413:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="415:21" pos:end="415:88"><block_content pos:start="415:21" pos:end="415:88">

                    <expr_stmt pos:start="415:21" pos:end="415:88"><expr pos:start="415:21" pos:end="415:87"><call pos:start="415:21" pos:end="415:87"><name pos:start="415:21" pos:end="415:26">memcpy</name><argument_list pos:start="415:27" pos:end="415:87">(<argument pos:start="415:28" pos:end="415:41"><expr pos:start="415:28" pos:end="415:41"><name pos:start="415:28" pos:end="415:30">dst</name> <operator pos:start="415:32" pos:end="415:32">+</operator> <name pos:start="415:34" pos:end="415:34">i</name><operator pos:start="415:35" pos:end="415:35">*</operator><name pos:start="415:36" pos:end="415:41">stride</name></expr></argument>, <argument pos:start="415:44" pos:end="415:83"><expr pos:start="415:44" pos:end="415:83"><name pos:start="415:44" pos:end="415:69"><name pos:start="415:44" pos:end="415:44">c</name><operator pos:start="415:45" pos:end="415:46">-&gt;</operator><name pos:start="415:47" pos:end="415:52">bundle</name><index pos:start="415:53" pos:end="415:69">[<expr pos:start="415:54" pos:end="415:68"><name pos:start="415:54" pos:end="415:68">BINK_SRC_COLORS</name></expr>]</index></name><operator pos:start="415:70" pos:end="415:70">.</operator><name pos:start="415:71" pos:end="415:77">cur_ptr</name> <operator pos:start="415:79" pos:end="415:79">+</operator> <name pos:start="415:81" pos:end="415:81">i</name><operator pos:start="415:82" pos:end="415:82">*</operator><literal type="number" pos:start="415:83" pos:end="415:83">8</literal></expr></argument>, <argument pos:start="415:86" pos:end="415:86"><expr pos:start="415:86" pos:end="415:86"><literal type="number" pos:start="415:86" pos:end="415:86">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="417:17" pos:end="417:57"><expr pos:start="417:17" pos:end="417:56"><name pos:start="417:17" pos:end="417:42"><name pos:start="417:17" pos:end="417:17">c</name><operator pos:start="417:18" pos:end="417:19">-&gt;</operator><name pos:start="417:20" pos:end="417:25">bundle</name><index pos:start="417:26" pos:end="417:42">[<expr pos:start="417:27" pos:end="417:41"><name pos:start="417:27" pos:end="417:41">BINK_SRC_COLORS</name></expr>]</index></name><operator pos:start="417:43" pos:end="417:43">.</operator><name pos:start="417:44" pos:end="417:50">cur_ptr</name> <operator pos:start="417:52" pos:end="417:53">+=</operator> <literal type="number" pos:start="417:55" pos:end="417:56">64</literal></expr>;</expr_stmt>

                <break pos:start="419:17" pos:end="419:22">break;</break>

            <default pos:start="421:13" pos:end="421:20">default:</default>

                <expr_stmt pos:start="423:17" pos:end="423:79"><expr pos:start="423:17" pos:end="423:78"><call pos:start="423:17" pos:end="423:78"><name pos:start="423:17" pos:end="423:22">av_log</name><argument_list pos:start="423:23" pos:end="423:78">(<argument pos:start="423:24" pos:end="423:31"><expr pos:start="423:24" pos:end="423:31"><name pos:start="423:24" pos:end="423:31"><name pos:start="423:24" pos:end="423:24">c</name><operator pos:start="423:25" pos:end="423:26">-&gt;</operator><name pos:start="423:27" pos:end="423:31">avctx</name></name></expr></argument>, <argument pos:start="423:34" pos:end="423:45"><expr pos:start="423:34" pos:end="423:45"><name pos:start="423:34" pos:end="423:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="423:48" pos:end="423:72"><expr pos:start="423:48" pos:end="423:72"><literal type="string" pos:start="423:48" pos:end="423:72">"Unknown block type %d\n"</literal></expr></argument>, <argument pos:start="423:75" pos:end="423:77"><expr pos:start="423:75" pos:end="423:77"><name pos:start="423:75" pos:end="423:77">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="425:17" pos:end="425:26">return <expr pos:start="425:24" pos:end="425:25"><operator pos:start="425:24" pos:end="425:24">-</operator><literal type="number" pos:start="425:25" pos:end="425:25">1</literal></expr>;</return>

            </block_content>}</block></switch>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <if_stmt pos:start="433:5" pos:end="435:61"><if pos:start="433:5" pos:end="435:61">if <condition pos:start="433:8" pos:end="433:34">(<expr pos:start="433:9" pos:end="433:33"><call pos:start="433:9" pos:end="433:26"><name pos:start="433:9" pos:end="433:22">get_bits_count</name><argument_list pos:start="433:23" pos:end="433:26">(<argument pos:start="433:24" pos:end="433:25"><expr pos:start="433:24" pos:end="433:25"><name pos:start="433:24" pos:end="433:25">gb</name></expr></argument>)</argument_list></call> <operator pos:start="433:28" pos:end="433:28">&amp;</operator> <literal type="number" pos:start="433:30" pos:end="433:33">0x1F</literal></expr>)</condition><block type="pseudo" pos:start="435:9" pos:end="435:61"><block_content pos:start="435:9" pos:end="435:61"> <comment type="line" pos:start="433:36" pos:end="433:78">//next plane data starts at 32-bit boundary</comment>

        <expr_stmt pos:start="435:9" pos:end="435:61"><expr pos:start="435:9" pos:end="435:60"><call pos:start="435:9" pos:end="435:60"><name pos:start="435:9" pos:end="435:22">skip_bits_long</name><argument_list pos:start="435:23" pos:end="435:60">(<argument pos:start="435:24" pos:end="435:25"><expr pos:start="435:24" pos:end="435:25"><name pos:start="435:24" pos:end="435:25">gb</name></expr></argument>, <argument pos:start="435:28" pos:end="435:59"><expr pos:start="435:28" pos:end="435:59"><literal type="number" pos:start="435:28" pos:end="435:31">32</literal> <operator pos:start="435:31" pos:end="435:31">-</operator> <operator pos:start="435:33" pos:end="435:33">(</operator><call pos:start="435:34" pos:end="435:51"><name pos:start="435:34" pos:end="435:47">get_bits_count</name><argument_list pos:start="435:48" pos:end="435:51">(<argument pos:start="435:49" pos:end="435:50"><expr pos:start="435:49" pos:end="435:50"><name pos:start="435:49" pos:end="435:50">gb</name></expr></argument>)</argument_list></call> <operator pos:start="435:53" pos:end="435:53">&amp;</operator> <literal type="number" pos:start="435:55" pos:end="435:58">0x1F</literal><operator pos:start="435:59" pos:end="435:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="439:5" pos:end="439:13">return <expr pos:start="439:12" pos:end="439:12"><literal type="number" pos:start="439:12" pos:end="439:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
