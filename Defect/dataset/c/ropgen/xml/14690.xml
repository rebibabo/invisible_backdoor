<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14690.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">qmp_migrate_set_parameters</name><parameter_list pos:start="1:32" pos:end="25:45">(<parameter pos:start="1:33" pos:end="1:55"><decl pos:start="1:33" pos:end="1:55"><type pos:start="1:33" pos:end="1:55"><name pos:start="1:33" pos:end="1:36">bool</name></type> <name pos:start="1:38" pos:end="1:55">has_compress_level</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:54"><decl pos:start="3:33" pos:end="3:54"><type pos:start="3:33" pos:end="3:54"><name pos:start="3:33" pos:end="3:39">int64_t</name></type> <name pos:start="3:41" pos:end="3:54">compress_level</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:57"><decl pos:start="5:33" pos:end="5:57"><type pos:start="5:33" pos:end="5:57"><name pos:start="5:33" pos:end="5:36">bool</name></type> <name pos:start="5:38" pos:end="5:57">has_compress_threads</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:56"><decl pos:start="7:33" pos:end="7:56"><type pos:start="7:33" pos:end="7:56"><name pos:start="7:33" pos:end="7:39">int64_t</name></type> <name pos:start="7:41" pos:end="7:56">compress_threads</name></decl></parameter>,

                                <parameter pos:start="9:33" pos:end="9:59"><decl pos:start="9:33" pos:end="9:59"><type pos:start="9:33" pos:end="9:59"><name pos:start="9:33" pos:end="9:36">bool</name></type> <name pos:start="9:38" pos:end="9:59">has_decompress_threads</name></decl></parameter>,

                                <parameter pos:start="11:33" pos:end="11:58"><decl pos:start="11:33" pos:end="11:58"><type pos:start="11:33" pos:end="11:58"><name pos:start="11:33" pos:end="11:39">int64_t</name></type> <name pos:start="11:41" pos:end="11:58">decompress_threads</name></decl></parameter>,

                                <parameter pos:start="13:33" pos:end="13:61"><decl pos:start="13:33" pos:end="13:61"><type pos:start="13:33" pos:end="13:61"><name pos:start="13:33" pos:end="13:36">bool</name></type> <name pos:start="13:38" pos:end="13:61">has_cpu_throttle_initial</name></decl></parameter>,

                                <parameter pos:start="15:33" pos:end="15:60"><decl pos:start="15:33" pos:end="15:60"><type pos:start="15:33" pos:end="15:60"><name pos:start="15:33" pos:end="15:39">int64_t</name></type> <name pos:start="15:41" pos:end="15:60">cpu_throttle_initial</name></decl></parameter>,

                                <parameter pos:start="17:33" pos:end="17:63"><decl pos:start="17:33" pos:end="17:63"><type pos:start="17:33" pos:end="17:63"><name pos:start="17:33" pos:end="17:36">bool</name></type> <name pos:start="17:38" pos:end="17:63">has_cpu_throttle_increment</name></decl></parameter>,

                                <parameter pos:start="19:33" pos:end="19:62"><decl pos:start="19:33" pos:end="19:62"><type pos:start="19:33" pos:end="19:62"><name pos:start="19:33" pos:end="19:39">int64_t</name></type> <name pos:start="19:41" pos:end="19:62">cpu_throttle_increment</name></decl></parameter>,





                                <parameter pos:start="25:33" pos:end="25:44"><decl pos:start="25:33" pos:end="25:44"><type pos:start="25:33" pos:end="25:44"><name pos:start="25:33" pos:end="25:37">Error</name> <modifier pos:start="25:39" pos:end="25:39">*</modifier><modifier pos:start="25:40" pos:end="25:40">*</modifier></type><name pos:start="25:41" pos:end="25:44">errp</name></decl></parameter>)</parameter_list>

<block pos:start="27:1" pos:end="143:1">{<block_content pos:start="29:5" pos:end="141:5">

    <decl_stmt pos:start="29:5" pos:end="29:46"><decl pos:start="29:5" pos:end="29:45"><type pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:18">MigrationState</name> <modifier pos:start="29:20" pos:end="29:20">*</modifier></type><name pos:start="29:21" pos:end="29:21">s</name> <init pos:start="29:23" pos:end="29:45">= <expr pos:start="29:25" pos:end="29:45"><call pos:start="29:25" pos:end="29:45"><name pos:start="29:25" pos:end="29:43">migrate_get_current</name><argument_list pos:start="29:44" pos:end="29:45">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:73">(<expr pos:start="33:9" pos:end="33:72"><name pos:start="33:9" pos:end="33:26">has_compress_level</name> <operator pos:start="33:28" pos:end="33:29">&amp;&amp;</operator> <operator pos:start="33:31" pos:end="33:31">(</operator><name pos:start="33:32" pos:end="33:69"><name pos:start="33:32" pos:end="33:45">compress_level</name> <argument_list type="generic" pos:start="33:47" pos:end="33:69">&lt; <argument pos:start="33:49" pos:end="33:67"><expr pos:start="33:49" pos:end="33:67"><literal type="number" pos:start="33:49" pos:end="33:49">0</literal> <operator pos:start="33:51" pos:end="33:52">||</operator> <name pos:start="33:54" pos:end="33:67">compress_level</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="33:71" pos:end="33:71">9</literal><operator pos:start="33:72" pos:end="33:72">)</operator></expr>)</condition> <block pos:start="33:75" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:15">

        <expr_stmt pos:start="35:9" pos:end="37:70"><expr pos:start="35:9" pos:end="37:69"><call pos:start="35:9" pos:end="37:69"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="37:69">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>, <argument pos:start="35:26" pos:end="35:53"><expr pos:start="35:26" pos:end="35:53"><name pos:start="35:26" pos:end="35:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="35:56" pos:end="35:71"><expr pos:start="35:56" pos:end="35:71"><literal type="string" pos:start="35:56" pos:end="35:71">"compress_level"</literal></expr></argument>,

                   <argument pos:start="37:20" pos:end="37:68"><expr pos:start="37:20" pos:end="37:68"><literal type="string" pos:start="37:20" pos:end="37:68">"is invalid, it should be in the range of 0 to 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="55:5"><if pos:start="43:5" pos:end="55:5">if <condition pos:start="43:8" pos:end="45:61">(<expr pos:start="43:9" pos:end="45:60"><name pos:start="43:9" pos:end="43:28">has_compress_threads</name> <operator pos:start="43:30" pos:end="43:31">&amp;&amp;</operator>

            <operator pos:start="45:13" pos:end="45:13">(</operator><name pos:start="45:14" pos:end="45:55"><name pos:start="45:14" pos:end="45:29">compress_threads</name> <argument_list type="generic" pos:start="45:31" pos:end="45:55">&lt; <argument pos:start="45:33" pos:end="45:53"><expr pos:start="45:33" pos:end="45:53"><literal type="number" pos:start="45:33" pos:end="45:33">1</literal> <operator pos:start="45:35" pos:end="45:36">||</operator> <name pos:start="45:38" pos:end="45:53">compress_threads</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="45:57" pos:end="45:59">255</literal><operator pos:start="45:60" pos:end="45:60">)</operator></expr>)</condition> <block pos:start="45:63" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:15">

        <expr_stmt pos:start="47:9" pos:end="51:72"><expr pos:start="47:9" pos:end="51:71"><call pos:start="47:9" pos:end="51:71"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="51:71">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">errp</name></expr></argument>, <argument pos:start="47:26" pos:end="47:53"><expr pos:start="47:26" pos:end="47:53"><name pos:start="47:26" pos:end="47:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="49:20" pos:end="49:37"><expr pos:start="49:20" pos:end="49:37"><literal type="string" pos:start="49:20" pos:end="49:37">"compress_threads"</literal></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:70"><expr pos:start="51:20" pos:end="51:70"><literal type="string" pos:start="51:20" pos:end="51:70">"is invalid, it should be in the range of 1 to 255"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="59:65">(<expr pos:start="57:9" pos:end="59:64"><name pos:start="57:9" pos:end="57:30">has_decompress_threads</name> <operator pos:start="57:32" pos:end="57:33">&amp;&amp;</operator>

            <operator pos:start="59:13" pos:end="59:13">(</operator><name pos:start="59:14" pos:end="59:59"><name pos:start="59:14" pos:end="59:31">decompress_threads</name> <argument_list type="generic" pos:start="59:33" pos:end="59:59">&lt; <argument pos:start="59:35" pos:end="59:57"><expr pos:start="59:35" pos:end="59:57"><literal type="number" pos:start="59:35" pos:end="59:35">1</literal> <operator pos:start="59:37" pos:end="59:38">||</operator> <name pos:start="59:40" pos:end="59:57">decompress_threads</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="59:61" pos:end="59:63">255</literal><operator pos:start="59:64" pos:end="59:64">)</operator></expr>)</condition> <block pos:start="59:67" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:15">

        <expr_stmt pos:start="61:9" pos:end="65:72"><expr pos:start="61:9" pos:end="65:71"><call pos:start="61:9" pos:end="65:71"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="65:71">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:53"><expr pos:start="61:26" pos:end="61:53"><name pos:start="61:26" pos:end="61:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:39"><expr pos:start="63:20" pos:end="63:39"><literal type="string" pos:start="63:20" pos:end="63:39">"decompress_threads"</literal></expr></argument>,

                   <argument pos:start="65:20" pos:end="65:70"><expr pos:start="65:20" pos:end="65:70"><literal type="string" pos:start="65:20" pos:end="65:70">"is invalid, it should be in the range of 1 to 255"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="81:5"><if pos:start="71:5" pos:end="81:5">if <condition pos:start="71:8" pos:end="73:68">(<expr pos:start="71:9" pos:end="73:67"><name pos:start="71:9" pos:end="71:32">has_cpu_throttle_initial</name> <operator pos:start="71:34" pos:end="71:35">&amp;&amp;</operator>

            <operator pos:start="73:13" pos:end="73:13">(</operator><name pos:start="73:14" pos:end="73:63"><name pos:start="73:14" pos:end="73:33">cpu_throttle_initial</name> <argument_list type="generic" pos:start="73:35" pos:end="73:63">&lt; <argument pos:start="73:37" pos:end="73:61"><expr pos:start="73:37" pos:end="73:61"><literal type="number" pos:start="73:37" pos:end="73:37">1</literal> <operator pos:start="73:39" pos:end="73:40">||</operator> <name pos:start="73:42" pos:end="73:61">cpu_throttle_initial</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="73:65" pos:end="73:66">99</literal><operator pos:start="73:67" pos:end="73:67">)</operator></expr>)</condition> <block pos:start="73:70" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:57">

        <expr_stmt pos:start="75:9" pos:end="79:57"><expr pos:start="75:9" pos:end="79:56"><call pos:start="75:9" pos:end="79:56"><name pos:start="75:9" pos:end="75:18">error_setg</name><argument_list pos:start="75:19" pos:end="79:56">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">errp</name></expr></argument>, <argument pos:start="75:26" pos:end="75:53"><expr pos:start="75:26" pos:end="75:53"><name pos:start="75:26" pos:end="75:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:41"><expr pos:start="77:20" pos:end="77:41"><literal type="string" pos:start="77:20" pos:end="77:41">"cpu_throttle_initial"</literal></expr></argument>,

                   <argument pos:start="79:20" pos:end="79:55"><expr pos:start="79:20" pos:end="79:55"><literal type="string" pos:start="79:20" pos:end="79:55">"an integer in the range of 1 to 99"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="93:5"><if pos:start="83:5" pos:end="93:5">if <condition pos:start="83:8" pos:end="85:72">(<expr pos:start="83:9" pos:end="85:71"><name pos:start="83:9" pos:end="83:34">has_cpu_throttle_increment</name> <operator pos:start="83:36" pos:end="83:37">&amp;&amp;</operator>

            <operator pos:start="85:13" pos:end="85:13">(</operator><name pos:start="85:14" pos:end="85:67"><name pos:start="85:14" pos:end="85:35">cpu_throttle_increment</name> <argument_list type="generic" pos:start="85:37" pos:end="85:67">&lt; <argument pos:start="85:39" pos:end="85:65"><expr pos:start="85:39" pos:end="85:65"><literal type="number" pos:start="85:39" pos:end="85:39">1</literal> <operator pos:start="85:41" pos:end="85:42">||</operator> <name pos:start="85:44" pos:end="85:65">cpu_throttle_increment</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="85:69" pos:end="85:70">99</literal><operator pos:start="85:71" pos:end="85:71">)</operator></expr>)</condition> <block pos:start="85:74" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:57">

        <expr_stmt pos:start="87:9" pos:end="91:57"><expr pos:start="87:9" pos:end="91:56"><call pos:start="87:9" pos:end="91:56"><name pos:start="87:9" pos:end="87:18">error_setg</name><argument_list pos:start="87:19" pos:end="91:56">(<argument pos:start="87:20" pos:end="87:23"><expr pos:start="87:20" pos:end="87:23"><name pos:start="87:20" pos:end="87:23">errp</name></expr></argument>, <argument pos:start="87:26" pos:end="87:53"><expr pos:start="87:26" pos:end="87:53"><name pos:start="87:26" pos:end="87:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="89:20" pos:end="89:43"><expr pos:start="89:20" pos:end="89:43"><literal type="string" pos:start="89:20" pos:end="89:43">"cpu_throttle_increment"</literal></expr></argument>,

                   <argument pos:start="91:20" pos:end="91:55"><expr pos:start="91:20" pos:end="91:55"><literal type="string" pos:start="91:20" pos:end="91:55">"an integer in the range of 1 to 99"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:27">(<expr pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:26">has_compress_level</name></expr>)</condition> <block pos:start="97:29" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:54">

        <expr_stmt pos:start="99:9" pos:end="99:54"><expr pos:start="99:9" pos:end="99:53"><name pos:start="99:9" pos:end="99:36"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:21">parameters</name><operator pos:start="99:22" pos:end="99:22">.</operator><name pos:start="99:23" pos:end="99:36">compress_level</name></name> <operator pos:start="99:38" pos:end="99:38">=</operator> <name pos:start="99:40" pos:end="99:53">compress_level</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:29">(<expr pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:28">has_compress_threads</name></expr>)</condition> <block pos:start="103:31" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:58">

        <expr_stmt pos:start="105:9" pos:end="105:58"><expr pos:start="105:9" pos:end="105:57"><name pos:start="105:9" pos:end="105:38"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:21">parameters</name><operator pos:start="105:22" pos:end="105:22">.</operator><name pos:start="105:23" pos:end="105:38">compress_threads</name></name> <operator pos:start="105:40" pos:end="105:40">=</operator> <name pos:start="105:42" pos:end="105:57">compress_threads</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:31">(<expr pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:30">has_decompress_threads</name></expr>)</condition> <block pos:start="109:33" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:62">

        <expr_stmt pos:start="111:9" pos:end="111:62"><expr pos:start="111:9" pos:end="111:61"><name pos:start="111:9" pos:end="111:40"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:21">parameters</name><operator pos:start="111:22" pos:end="111:22">.</operator><name pos:start="111:23" pos:end="111:40">decompress_threads</name></name> <operator pos:start="111:42" pos:end="111:42">=</operator> <name pos:start="111:44" pos:end="111:61">decompress_threads</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:33">(<expr pos:start="115:9" pos:end="115:32"><name pos:start="115:9" pos:end="115:32">has_cpu_throttle_initial</name></expr>)</condition> <block pos:start="115:35" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:66">

        <expr_stmt pos:start="117:9" pos:end="117:66"><expr pos:start="117:9" pos:end="117:65"><name pos:start="117:9" pos:end="117:42"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:21">parameters</name><operator pos:start="117:22" pos:end="117:22">.</operator><name pos:start="117:23" pos:end="117:42">cpu_throttle_initial</name></name> <operator pos:start="117:44" pos:end="117:44">=</operator> <name pos:start="117:46" pos:end="117:65">cpu_throttle_initial</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:35">(<expr pos:start="121:9" pos:end="121:34"><name pos:start="121:9" pos:end="121:34">has_cpu_throttle_increment</name></expr>)</condition> <block pos:start="121:37" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:70">

        <expr_stmt pos:start="123:9" pos:end="123:70"><expr pos:start="123:9" pos:end="123:69"><name pos:start="123:9" pos:end="123:44"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:21">parameters</name><operator pos:start="123:22" pos:end="123:22">.</operator><name pos:start="123:23" pos:end="123:44">cpu_throttle_increment</name></name> <operator pos:start="123:46" pos:end="123:46">=</operator> <name pos:start="123:48" pos:end="123:69">cpu_throttle_increment</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:22">(<expr pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:21">has_tls_creds</name></expr>)</condition> <block pos:start="127:24" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:54">

        <expr_stmt pos:start="129:9" pos:end="129:40"><expr pos:start="129:9" pos:end="129:39"><call pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:14">g_free</name><argument_list pos:start="129:15" pos:end="129:39">(<argument pos:start="129:16" pos:end="129:38"><expr pos:start="129:16" pos:end="129:38"><name pos:start="129:16" pos:end="129:38"><name pos:start="129:16" pos:end="129:16">s</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:28">parameters</name><operator pos:start="129:29" pos:end="129:29">.</operator><name pos:start="129:30" pos:end="129:38">tls_creds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:54"><expr pos:start="131:9" pos:end="131:53"><name pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:21">parameters</name><operator pos:start="131:22" pos:end="131:22">.</operator><name pos:start="131:23" pos:end="131:31">tls_creds</name></name> <operator pos:start="131:33" pos:end="131:33">=</operator> <call pos:start="131:35" pos:end="131:53"><name pos:start="131:35" pos:end="131:42">g_strdup</name><argument_list pos:start="131:43" pos:end="131:53">(<argument pos:start="131:44" pos:end="131:52"><expr pos:start="131:44" pos:end="131:52"><name pos:start="131:44" pos:end="131:52">tls_creds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:25">(<expr pos:start="135:9" pos:end="135:24"><name pos:start="135:9" pos:end="135:24">has_tls_hostname</name></expr>)</condition> <block pos:start="135:27" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:60">

        <expr_stmt pos:start="137:9" pos:end="137:43"><expr pos:start="137:9" pos:end="137:42"><call pos:start="137:9" pos:end="137:42"><name pos:start="137:9" pos:end="137:14">g_free</name><argument_list pos:start="137:15" pos:end="137:42">(<argument pos:start="137:16" pos:end="137:41"><expr pos:start="137:16" pos:end="137:41"><name pos:start="137:16" pos:end="137:41"><name pos:start="137:16" pos:end="137:16">s</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:28">parameters</name><operator pos:start="137:29" pos:end="137:29">.</operator><name pos:start="137:30" pos:end="137:41">tls_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:60"><expr pos:start="139:9" pos:end="139:59"><name pos:start="139:9" pos:end="139:34"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:21">parameters</name><operator pos:start="139:22" pos:end="139:22">.</operator><name pos:start="139:23" pos:end="139:34">tls_hostname</name></name> <operator pos:start="139:36" pos:end="139:36">=</operator> <call pos:start="139:38" pos:end="139:59"><name pos:start="139:38" pos:end="139:45">g_strdup</name><argument_list pos:start="139:46" pos:end="139:59">(<argument pos:start="139:47" pos:end="139:58"><expr pos:start="139:47" pos:end="139:58"><name pos:start="139:47" pos:end="139:58">tls_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
