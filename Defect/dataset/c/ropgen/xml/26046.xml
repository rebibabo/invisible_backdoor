<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26046.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:34"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:34">QEMU_WARN_UNUSED_RESULT</name></type> <name pos:start="1:36" pos:end="1:50">update_refcount</name><parameter_list pos:start="1:51" pos:end="11:80">(<parameter pos:start="1:52" pos:end="1:71"><decl pos:start="1:52" pos:end="1:71"><type pos:start="1:52" pos:end="1:71"><name pos:start="1:52" pos:end="1:67">BlockDriverState</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">bs</name></decl></parameter>,

                                                   <parameter pos:start="3:52" pos:end="3:65"><decl pos:start="3:52" pos:end="3:65"><type pos:start="3:52" pos:end="3:65"><name pos:start="3:52" pos:end="3:58">int64_t</name></type> <name pos:start="3:60" pos:end="3:65">offset</name></decl></parameter>,

                                                   <parameter pos:start="5:52" pos:end="5:65"><decl pos:start="5:52" pos:end="5:65"><type pos:start="5:52" pos:end="5:65"><name pos:start="5:52" pos:end="5:58">int64_t</name></type> <name pos:start="5:60" pos:end="5:65">length</name></decl></parameter>,

                                                   <parameter pos:start="7:52" pos:end="7:66"><decl pos:start="7:52" pos:end="7:66"><type pos:start="7:52" pos:end="7:66"><name pos:start="7:52" pos:end="7:59">uint64_t</name></type> <name pos:start="7:61" pos:end="7:66">addend</name></decl></parameter>,

                                                   <parameter pos:start="9:52" pos:end="9:64"><decl pos:start="9:52" pos:end="9:64"><type pos:start="9:52" pos:end="9:64"><name pos:start="9:52" pos:end="9:55">bool</name></type> <name pos:start="9:57" pos:end="9:64">decrease</name></decl></parameter>,

                                                   <parameter pos:start="11:52" pos:end="11:79"><decl pos:start="11:52" pos:end="11:79"><type pos:start="11:52" pos:end="11:79"><name pos:start="11:52" pos:end="11:74"><name pos:start="11:52" pos:end="11:55">enum</name> <name pos:start="11:57" pos:end="11:74">qcow2_discard_type</name></name></type> <name pos:start="11:76" pos:end="11:79">type</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="225:1">{<block_content pos:start="15:5" pos:end="223:15">

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">BDRVQcowState</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:20">s</name> <init pos:start="15:22" pos:end="15:33">= <expr pos:start="15:24" pos:end="15:33"><name pos:start="15:24" pos:end="15:33"><name pos:start="15:24" pos:end="15:25">bs</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:40"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:17">start</name></decl>, <decl pos:start="17:20" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:20" pos:end="17:23">last</name></decl>, <decl pos:start="17:26" pos:end="17:39"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:26" pos:end="17:39">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint16_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:28">refcount_block</name> <init pos:start="19:30" pos:end="19:35">= <expr pos:start="19:32" pos:end="19:35"><name pos:start="19:32" pos:end="19:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:27">old_table_index</name> <init pos:start="21:29" pos:end="21:32">= <expr pos:start="21:31" pos:end="21:32"><operator pos:start="21:31" pos:end="21:31">-</operator><literal type="number" pos:start="21:32" pos:end="21:32">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="28:0"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="27:1" pos:end="27:19">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="29:5" pos:end="36:0"><expr pos:start="29:5" pos:end="33:19"><call pos:start="29:5" pos:end="33:19"><name pos:start="29:5" pos:end="29:11">fprintf</name><argument_list pos:start="29:12" pos:end="33:19">(<argument pos:start="29:13" pos:end="29:18"><expr pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:18">stderr</name></expr></argument>, <argument pos:start="29:21" pos:end="31:37"><expr pos:start="29:21" pos:end="31:37"><literal type="string" pos:start="29:21" pos:end="29:47">"update_refcount: offset=%"</literal> <name pos:start="29:49" pos:end="29:54">PRId64</name> <literal type="string" pos:start="29:56" pos:end="29:64">" size=%"</literal> <name pos:start="29:66" pos:end="29:71">PRId64</name>

            <literal type="string" pos:start="31:13" pos:end="31:25">" addend=%s%"</literal> <name pos:start="31:27" pos:end="31:32">PRIu64</name> <literal type="string" pos:start="31:34" pos:end="31:37">"\n"</literal></expr></argument>, <argument pos:start="31:40" pos:end="31:45"><expr pos:start="31:40" pos:end="31:45"><name pos:start="31:40" pos:end="31:45">offset</name></expr></argument>, <argument pos:start="31:48" pos:end="31:53"><expr pos:start="31:48" pos:end="31:53"><name pos:start="31:48" pos:end="31:53">length</name></expr></argument>, <argument pos:start="31:56" pos:end="31:74"><expr pos:start="31:56" pos:end="31:74"><ternary pos:start="31:56" pos:end="31:74"><condition pos:start="31:56" pos:end="31:65"><expr pos:start="31:56" pos:end="31:63"><name pos:start="31:56" pos:end="31:63">decrease</name></expr> ?</condition><then pos:start="31:67" pos:end="31:69"> <expr pos:start="31:67" pos:end="31:69"><literal type="string" pos:start="31:67" pos:end="31:69">"-"</literal></expr> </then><else pos:start="31:71" pos:end="31:74">: <expr pos:start="31:73" pos:end="31:74"><literal type="string" pos:start="31:73" pos:end="31:74">""</literal></expr></else></ternary></expr></argument>,

            <argument pos:start="33:13" pos:end="33:18"><expr pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:18">addend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:14">length</name> <operator pos:start="37:16" pos:end="37:16">&lt;</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>)</condition> <block pos:start="37:21" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:23">

        <return pos:start="39:9" pos:end="39:23">return <expr pos:start="39:16" pos:end="39:22"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="45:5">else if <condition pos:start="41:15" pos:end="41:27">(<expr pos:start="41:16" pos:end="41:26"><name pos:start="41:16" pos:end="41:21">length</name> <operator pos:start="41:23" pos:end="41:24">==</operator> <literal type="number" pos:start="41:26" pos:end="41:26">0</literal></expr>)</condition> <block pos:start="41:29" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:17">

        <return pos:start="43:9" pos:end="43:17">return <expr pos:start="43:16" pos:end="43:16"><literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:17">(<expr pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">decrease</name></expr>)</condition> <block pos:start="49:19" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:31">

        <expr_stmt pos:start="51:9" pos:end="53:31"><expr pos:start="51:9" pos:end="53:30"><call pos:start="51:9" pos:end="53:30"><name pos:start="51:9" pos:end="51:34">qcow2_cache_set_dependency</name><argument_list pos:start="51:35" pos:end="53:30">(<argument pos:start="51:36" pos:end="51:37"><expr pos:start="51:36" pos:end="51:37"><name pos:start="51:36" pos:end="51:37">bs</name></expr></argument>, <argument pos:start="51:40" pos:end="51:62"><expr pos:start="51:40" pos:end="51:62"><name pos:start="51:40" pos:end="51:62"><name pos:start="51:40" pos:end="51:40">s</name><operator pos:start="51:41" pos:end="51:42">-&gt;</operator><name pos:start="51:43" pos:end="51:62">refcount_block_cache</name></name></expr></argument>,

            <argument pos:start="53:13" pos:end="53:29"><expr pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:29">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:40"><expr pos:start="59:5" pos:end="59:39"><name pos:start="59:5" pos:end="59:9">start</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <call pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:28">start_of_cluster</name><argument_list pos:start="59:29" pos:end="59:39">(<argument pos:start="59:30" pos:end="59:30"><expr pos:start="59:30" pos:end="59:30"><name pos:start="59:30" pos:end="59:30">s</name></expr></argument>, <argument pos:start="59:33" pos:end="59:38"><expr pos:start="59:33" pos:end="59:38"><name pos:start="59:33" pos:end="59:38">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:52"><expr pos:start="61:5" pos:end="61:51"><name pos:start="61:5" pos:end="61:8">last</name> <operator pos:start="61:10" pos:end="61:10">=</operator> <call pos:start="61:12" pos:end="61:51"><name pos:start="61:12" pos:end="61:27">start_of_cluster</name><argument_list pos:start="61:28" pos:end="61:51">(<argument pos:start="61:29" pos:end="61:29"><expr pos:start="61:29" pos:end="61:29"><name pos:start="61:29" pos:end="61:29">s</name></expr></argument>, <argument pos:start="61:32" pos:end="61:50"><expr pos:start="61:32" pos:end="61:50"><name pos:start="61:32" pos:end="61:37">offset</name> <operator pos:start="61:39" pos:end="61:39">+</operator> <name pos:start="61:41" pos:end="61:46">length</name> <operator pos:start="61:48" pos:end="61:48">-</operator> <literal type="number" pos:start="61:50" pos:end="61:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="63:5" pos:end="165:5">for<control pos:start="63:8" pos:end="65:42">(<init pos:start="63:9" pos:end="63:31"><expr pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:22">cluster_offset</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <name pos:start="63:26" pos:end="63:30">start</name></expr>;</init> <condition pos:start="63:33" pos:end="63:55"><expr pos:start="63:33" pos:end="63:54"><name pos:start="63:33" pos:end="63:46">cluster_offset</name> <operator pos:start="63:48" pos:end="63:49">&lt;=</operator> <name pos:start="63:51" pos:end="63:54">last</name></expr>;</condition>

        <incr pos:start="65:9" pos:end="65:41"><expr pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:22">cluster_offset</name> <operator pos:start="65:24" pos:end="65:25">+=</operator> <name pos:start="65:27" pos:end="65:41"><name pos:start="65:27" pos:end="65:27">s</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:41">cluster_size</name></name></expr></incr>)</control>

    <block pos:start="67:5" pos:end="165:5">{<block_content pos:start="69:9" pos:end="163:9">

        <decl_stmt pos:start="69:9" pos:end="69:24"><decl pos:start="69:9" pos:end="69:23"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:23">block_index</name></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:26"><decl pos:start="71:9" pos:end="71:25"><type pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:16">uint64_t</name></type> <name pos:start="71:18" pos:end="71:25">refcount</name></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:66"><decl pos:start="73:9" pos:end="73:65"><type pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:15">int64_t</name></type> <name pos:start="73:17" pos:end="73:29">cluster_index</name> <init pos:start="73:31" pos:end="73:65">= <expr pos:start="73:33" pos:end="73:65"><name pos:start="73:33" pos:end="73:46">cluster_offset</name> <operator pos:start="73:48" pos:end="73:49">&gt;&gt;</operator> <name pos:start="73:51" pos:end="73:65"><name pos:start="73:51" pos:end="73:51">s</name><operator pos:start="73:52" pos:end="73:53">-&gt;</operator><name pos:start="73:54" pos:end="73:65">cluster_bits</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:70"><decl pos:start="75:9" pos:end="75:69"><type pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:15">int64_t</name></type> <name pos:start="75:17" pos:end="75:27">table_index</name> <init pos:start="75:29" pos:end="75:69">= <expr pos:start="75:31" pos:end="75:69"><name pos:start="75:31" pos:end="75:43">cluster_index</name> <operator pos:start="75:45" pos:end="75:46">&gt;&gt;</operator> <name pos:start="75:48" pos:end="75:69"><name pos:start="75:48" pos:end="75:48">s</name><operator pos:start="75:49" pos:end="75:50">-&gt;</operator><name pos:start="75:51" pos:end="75:69">refcount_block_bits</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="79:9" pos:end="79:63">/* Load the refcount block and allocate it if needed */</comment>

        <if_stmt pos:start="81:9" pos:end="107:9"><if pos:start="81:9" pos:end="107:9">if <condition pos:start="81:12" pos:end="81:43">(<expr pos:start="81:13" pos:end="81:42"><name pos:start="81:13" pos:end="81:23">table_index</name> <operator pos:start="81:25" pos:end="81:26">!=</operator> <name pos:start="81:28" pos:end="81:42">old_table_index</name></expr>)</condition> <block pos:start="81:45" pos:end="107:9">{<block_content pos:start="83:13" pos:end="105:13">

            <if_stmt pos:start="83:13" pos:end="95:13"><if pos:start="83:13" pos:end="95:13">if <condition pos:start="83:16" pos:end="83:31">(<expr pos:start="83:17" pos:end="83:30"><name pos:start="83:17" pos:end="83:30">refcount_block</name></expr>)</condition> <block pos:start="83:33" pos:end="95:13">{<block_content pos:start="85:17" pos:end="93:17">

                <expr_stmt pos:start="85:17" pos:end="87:46"><expr pos:start="85:17" pos:end="87:45"><name pos:start="85:17" pos:end="85:19">ret</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <call pos:start="85:23" pos:end="87:45"><name pos:start="85:23" pos:end="85:37">qcow2_cache_put</name><argument_list pos:start="85:38" pos:end="87:45">(<argument pos:start="85:39" pos:end="85:40"><expr pos:start="85:39" pos:end="85:40"><name pos:start="85:39" pos:end="85:40">bs</name></expr></argument>, <argument pos:start="85:43" pos:end="85:65"><expr pos:start="85:43" pos:end="85:65"><name pos:start="85:43" pos:end="85:65"><name pos:start="85:43" pos:end="85:43">s</name><operator pos:start="85:44" pos:end="85:45">-&gt;</operator><name pos:start="85:46" pos:end="85:65">refcount_block_cache</name></name></expr></argument>,

                    <argument pos:start="87:21" pos:end="87:44"><expr pos:start="87:21" pos:end="87:44"><operator pos:start="87:21" pos:end="87:21">(</operator><name pos:start="87:22" pos:end="87:25">void</name><operator pos:start="87:26" pos:end="87:26">*</operator><operator pos:start="87:27" pos:end="87:27">*</operator><operator pos:start="87:28" pos:end="87:28">)</operator> <operator pos:start="87:30" pos:end="87:30">&amp;</operator><name pos:start="87:31" pos:end="87:44">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="89:17" pos:end="93:17"><if pos:start="89:17" pos:end="93:17">if <condition pos:start="89:20" pos:end="89:28">(<expr pos:start="89:21" pos:end="89:27"><name pos:start="89:21" pos:end="89:23">ret</name> <operator pos:start="89:25" pos:end="89:25">&lt;</operator> <literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>)</condition> <block pos:start="89:30" pos:end="93:17">{<block_content pos:start="91:21" pos:end="91:30">

                    <goto pos:start="91:21" pos:end="91:30">goto <name pos:start="91:26" pos:end="91:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="99:13" pos:end="99:75"><expr pos:start="99:13" pos:end="99:74"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:74"><name pos:start="99:19" pos:end="99:38">alloc_refcount_block</name><argument_list pos:start="99:39" pos:end="99:74">(<argument pos:start="99:40" pos:end="99:41"><expr pos:start="99:40" pos:end="99:41"><name pos:start="99:40" pos:end="99:41">bs</name></expr></argument>, <argument pos:start="99:44" pos:end="99:56"><expr pos:start="99:44" pos:end="99:56"><name pos:start="99:44" pos:end="99:56">cluster_index</name></expr></argument>, <argument pos:start="99:59" pos:end="99:73"><expr pos:start="99:59" pos:end="99:73"><operator pos:start="99:59" pos:end="99:59">&amp;</operator><name pos:start="99:60" pos:end="99:73">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="105:13"><if pos:start="101:13" pos:end="105:13">if <condition pos:start="101:16" pos:end="101:24">(<expr pos:start="101:17" pos:end="101:23"><name pos:start="101:17" pos:end="101:19">ret</name> <operator pos:start="101:21" pos:end="101:21">&lt;</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>)</condition> <block pos:start="101:26" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:26">

                <goto pos:start="103:17" pos:end="103:26">goto <name pos:start="103:22" pos:end="103:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:38"><expr pos:start="109:9" pos:end="109:37"><name pos:start="109:9" pos:end="109:23">old_table_index</name> <operator pos:start="109:25" pos:end="109:25">=</operator> <name pos:start="109:27" pos:end="109:37">table_index</name></expr>;</expr_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:78"><expr pos:start="113:9" pos:end="113:77"><call pos:start="113:9" pos:end="113:77"><name pos:start="113:9" pos:end="113:36">qcow2_cache_entry_mark_dirty</name><argument_list pos:start="113:37" pos:end="113:77">(<argument pos:start="113:38" pos:end="113:60"><expr pos:start="113:38" pos:end="113:60"><name pos:start="113:38" pos:end="113:60"><name pos:start="113:38" pos:end="113:38">s</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:60">refcount_block_cache</name></name></expr></argument>, <argument pos:start="113:63" pos:end="113:76"><expr pos:start="113:63" pos:end="113:76"><name pos:start="113:63" pos:end="113:76">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="117:9" pos:end="117:49">/* we can update the count and save it */</comment>

        <expr_stmt pos:start="119:9" pos:end="119:67"><expr pos:start="119:9" pos:end="119:66"><name pos:start="119:9" pos:end="119:19">block_index</name> <operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:35">cluster_index</name> <operator pos:start="119:37" pos:end="119:37">&amp;</operator> <operator pos:start="119:39" pos:end="119:39">(</operator><name pos:start="119:40" pos:end="119:61"><name pos:start="119:40" pos:end="119:40">s</name><operator pos:start="119:41" pos:end="119:42">-&gt;</operator><name pos:start="119:43" pos:end="119:61">refcount_block_size</name></name> <operator pos:start="119:63" pos:end="119:63">-</operator> <literal type="number" pos:start="119:65" pos:end="119:65">1</literal><operator pos:start="119:66" pos:end="119:66">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:60"><expr pos:start="123:9" pos:end="123:59"><name pos:start="123:9" pos:end="123:16">refcount</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <call pos:start="123:20" pos:end="123:59"><name pos:start="123:20" pos:end="123:30">be16_to_cpu</name><argument_list pos:start="123:31" pos:end="123:59">(<argument pos:start="123:32" pos:end="123:58"><expr pos:start="123:32" pos:end="123:58"><name pos:start="123:32" pos:end="123:58"><name pos:start="123:32" pos:end="123:45">refcount_block</name><index pos:start="123:46" pos:end="123:58">[<expr pos:start="123:47" pos:end="123:57"><name pos:start="123:47" pos:end="123:57">block_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="137:9"><if pos:start="125:9" pos:end="137:9">if <condition pos:start="125:12" pos:end="129:61">(<expr pos:start="125:13" pos:end="129:60"><ternary pos:start="125:13" pos:end="129:60"><condition pos:start="125:13" pos:end="125:22"><expr pos:start="125:13" pos:end="125:20"><name pos:start="125:13" pos:end="125:20">decrease</name></expr> ?</condition><then pos:start="125:24" pos:end="125:53"> <expr pos:start="125:24" pos:end="125:53"><operator pos:start="125:24" pos:end="125:24">(</operator><name pos:start="125:25" pos:end="125:32">refcount</name> <operator pos:start="125:34" pos:end="125:34">-</operator> <name pos:start="125:36" pos:end="125:41">addend</name> <operator pos:start="125:43" pos:end="125:43">&gt;</operator> <name pos:start="125:45" pos:end="125:52">refcount</name><operator pos:start="125:53" pos:end="125:53">)</operator></expr>

                     </then><else pos:start="127:22" pos:end="129:60">: <expr pos:start="127:24" pos:end="129:60"><operator pos:start="127:24" pos:end="127:24">(</operator><name pos:start="127:25" pos:end="127:32">refcount</name> <operator pos:start="127:34" pos:end="127:34">+</operator> <name pos:start="127:36" pos:end="129:43"><name pos:start="127:36" pos:end="127:41">addend</name> <argument_list type="generic" pos:start="127:43" pos:end="129:43">&lt; <argument pos:start="127:45" pos:end="129:41"><expr pos:start="127:45" pos:end="129:41"><name pos:start="127:45" pos:end="127:52">refcount</name> <operator pos:start="127:54" pos:end="127:55">||</operator>

                        <name pos:start="129:25" pos:end="129:32">refcount</name> <operator pos:start="129:34" pos:end="129:34">+</operator> <name pos:start="129:36" pos:end="129:41">addend</name></expr></argument> &gt;</argument_list></name> <name pos:start="129:45" pos:end="129:59"><name pos:start="129:45" pos:end="129:45">s</name><operator pos:start="129:46" pos:end="129:47">-&gt;</operator><name pos:start="129:48" pos:end="129:59">refcount_max</name></name><operator pos:start="129:60" pos:end="129:60">)</operator></expr></else></ternary></expr>)</condition>

        <block pos:start="131:9" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:22">

            <expr_stmt pos:start="133:13" pos:end="133:26"><expr pos:start="133:13" pos:end="133:25"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <operator pos:start="133:19" pos:end="133:19">-</operator><name pos:start="133:20" pos:end="133:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="135:13" pos:end="135:22">goto <name pos:start="135:18" pos:end="135:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="139:9" pos:end="147:9"><if pos:start="139:9" pos:end="143:9">if <condition pos:start="139:12" pos:end="139:21">(<expr pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:20">decrease</name></expr>)</condition> <block pos:start="139:23" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:31">

            <expr_stmt pos:start="141:13" pos:end="141:31"><expr pos:start="141:13" pos:end="141:30"><name pos:start="141:13" pos:end="141:20">refcount</name> <operator pos:start="141:22" pos:end="141:23">-=</operator> <name pos:start="141:25" pos:end="141:30">addend</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="143:11" pos:end="147:9">else <block pos:start="143:16" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:31">

            <expr_stmt pos:start="145:13" pos:end="145:31"><expr pos:start="145:13" pos:end="145:30"><name pos:start="145:13" pos:end="145:20">refcount</name> <operator pos:start="145:22" pos:end="145:23">+=</operator> <name pos:start="145:25" pos:end="145:30">addend</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="149:9" pos:end="153:9"><if pos:start="149:9" pos:end="153:9">if <condition pos:start="149:12" pos:end="149:67">(<expr pos:start="149:13" pos:end="149:66"><name pos:start="149:13" pos:end="149:20">refcount</name> <operator pos:start="149:22" pos:end="149:23">==</operator> <literal type="number" pos:start="149:25" pos:end="149:25">0</literal> <operator pos:start="149:27" pos:end="149:28">&amp;&amp;</operator> <name pos:start="149:30" pos:end="149:42">cluster_index</name> <operator pos:start="149:44" pos:end="149:44">&lt;</operator> <name pos:start="149:46" pos:end="149:66"><name pos:start="149:46" pos:end="149:46">s</name><operator pos:start="149:47" pos:end="149:48">-&gt;</operator><name pos:start="149:49" pos:end="149:66">free_cluster_index</name></name></expr>)</condition> <block pos:start="149:69" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:50">

            <expr_stmt pos:start="151:13" pos:end="151:50"><expr pos:start="151:13" pos:end="151:49"><name pos:start="151:13" pos:end="151:33"><name pos:start="151:13" pos:end="151:13">s</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:33">free_cluster_index</name></name> <operator pos:start="151:35" pos:end="151:35">=</operator> <name pos:start="151:37" pos:end="151:49">cluster_index</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:60"><expr pos:start="155:9" pos:end="155:59"><name pos:start="155:9" pos:end="155:35"><name pos:start="155:9" pos:end="155:22">refcount_block</name><index pos:start="155:23" pos:end="155:35">[<expr pos:start="155:24" pos:end="155:34"><name pos:start="155:24" pos:end="155:34">block_index</name></expr>]</index></name> <operator pos:start="155:37" pos:end="155:37">=</operator> <call pos:start="155:39" pos:end="155:59"><name pos:start="155:39" pos:end="155:49">cpu_to_be16</name><argument_list pos:start="155:50" pos:end="155:59">(<argument pos:start="155:51" pos:end="155:58"><expr pos:start="155:51" pos:end="155:58"><name pos:start="155:51" pos:end="155:58">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:58">(<expr pos:start="159:13" pos:end="159:57"><name pos:start="159:13" pos:end="159:20">refcount</name> <operator pos:start="159:22" pos:end="159:23">==</operator> <literal type="number" pos:start="159:25" pos:end="159:25">0</literal> <operator pos:start="159:27" pos:end="159:28">&amp;&amp;</operator> <name pos:start="159:30" pos:end="159:57"><name pos:start="159:30" pos:end="159:30">s</name><operator pos:start="159:31" pos:end="159:32">-&gt;</operator><name pos:start="159:33" pos:end="159:51">discard_passthrough</name><index pos:start="159:52" pos:end="159:57">[<expr pos:start="159:53" pos:end="159:56"><name pos:start="159:53" pos:end="159:56">type</name></expr>]</index></name></expr>)</condition> <block pos:start="159:60" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:73">

            <expr_stmt pos:start="161:13" pos:end="161:73"><expr pos:start="161:13" pos:end="161:72"><call pos:start="161:13" pos:end="161:72"><name pos:start="161:13" pos:end="161:35">update_refcount_discard</name><argument_list pos:start="161:36" pos:end="161:72">(<argument pos:start="161:37" pos:end="161:38"><expr pos:start="161:37" pos:end="161:38"><name pos:start="161:37" pos:end="161:38">bs</name></expr></argument>, <argument pos:start="161:41" pos:end="161:54"><expr pos:start="161:41" pos:end="161:54"><name pos:start="161:41" pos:end="161:54">cluster_offset</name></expr></argument>, <argument pos:start="161:57" pos:end="161:71"><expr pos:start="161:57" pos:end="161:71"><name pos:start="161:57" pos:end="161:71"><name pos:start="161:57" pos:end="161:57">s</name><operator pos:start="161:58" pos:end="161:59">-&gt;</operator><name pos:start="161:60" pos:end="161:71">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="169:5" pos:end="169:12"><expr pos:start="169:5" pos:end="169:11"><name pos:start="169:5" pos:end="169:7">ret</name> <operator pos:start="169:9" pos:end="169:9">=</operator> <literal type="number" pos:start="169:11" pos:end="169:11">0</literal></expr>;</expr_stmt>

<label pos:start="171:1" pos:end="171:5"><name pos:start="171:1" pos:end="171:4">fail</name>:</label>

    <if_stmt pos:start="173:5" pos:end="177:5"><if pos:start="173:5" pos:end="177:5">if <condition pos:start="173:8" pos:end="173:27">(<expr pos:start="173:9" pos:end="173:26"><operator pos:start="173:9" pos:end="173:9">!</operator><name pos:start="173:10" pos:end="173:26"><name pos:start="173:10" pos:end="173:10">s</name><operator pos:start="173:11" pos:end="173:12">-&gt;</operator><name pos:start="173:13" pos:end="173:26">cache_discards</name></name></expr>)</condition> <block pos:start="173:29" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:40">

        <expr_stmt pos:start="175:9" pos:end="175:40"><expr pos:start="175:9" pos:end="175:39"><call pos:start="175:9" pos:end="175:39"><name pos:start="175:9" pos:end="175:30">qcow2_process_discards</name><argument_list pos:start="175:31" pos:end="175:39">(<argument pos:start="175:32" pos:end="175:33"><expr pos:start="175:32" pos:end="175:33"><name pos:start="175:32" pos:end="175:33">bs</name></expr></argument>, <argument pos:start="175:36" pos:end="175:38"><expr pos:start="175:36" pos:end="175:38"><name pos:start="175:36" pos:end="175:38">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="181:5" pos:end="181:42">/* Write last changed block to disk */</comment>

    <if_stmt pos:start="183:5" pos:end="197:5"><if pos:start="183:5" pos:end="197:5">if <condition pos:start="183:8" pos:end="183:23">(<expr pos:start="183:9" pos:end="183:22"><name pos:start="183:9" pos:end="183:22">refcount_block</name></expr>)</condition> <block pos:start="183:25" pos:end="197:5">{<block_content pos:start="185:9" pos:end="195:9">

        <decl_stmt pos:start="185:9" pos:end="185:17"><decl pos:start="185:9" pos:end="185:16"><type pos:start="185:9" pos:end="185:11"><name pos:start="185:9" pos:end="185:11">int</name></type> <name pos:start="185:13" pos:end="185:16">wret</name></decl>;</decl_stmt>

        <expr_stmt pos:start="187:9" pos:end="189:38"><expr pos:start="187:9" pos:end="189:37"><name pos:start="187:9" pos:end="187:12">wret</name> <operator pos:start="187:14" pos:end="187:14">=</operator> <call pos:start="187:16" pos:end="189:37"><name pos:start="187:16" pos:end="187:30">qcow2_cache_put</name><argument_list pos:start="187:31" pos:end="189:37">(<argument pos:start="187:32" pos:end="187:33"><expr pos:start="187:32" pos:end="187:33"><name pos:start="187:32" pos:end="187:33">bs</name></expr></argument>, <argument pos:start="187:36" pos:end="187:58"><expr pos:start="187:36" pos:end="187:58"><name pos:start="187:36" pos:end="187:58"><name pos:start="187:36" pos:end="187:36">s</name><operator pos:start="187:37" pos:end="187:38">-&gt;</operator><name pos:start="187:39" pos:end="187:58">refcount_block_cache</name></name></expr></argument>,

            <argument pos:start="189:13" pos:end="189:36"><expr pos:start="189:13" pos:end="189:36"><operator pos:start="189:13" pos:end="189:13">(</operator><name pos:start="189:14" pos:end="189:17">void</name><operator pos:start="189:18" pos:end="189:18">*</operator><operator pos:start="189:19" pos:end="189:19">*</operator><operator pos:start="189:20" pos:end="189:20">)</operator> <operator pos:start="189:22" pos:end="189:22">&amp;</operator><name pos:start="189:23" pos:end="189:36">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="195:9"><if pos:start="191:9" pos:end="195:9">if <condition pos:start="191:12" pos:end="191:21">(<expr pos:start="191:13" pos:end="191:20"><name pos:start="191:13" pos:end="191:16">wret</name> <operator pos:start="191:18" pos:end="191:18">&lt;</operator> <literal type="number" pos:start="191:20" pos:end="191:20">0</literal></expr>)</condition> <block pos:start="191:23" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:40">

            <return pos:start="193:13" pos:end="193:40">return <expr pos:start="193:20" pos:end="193:39"><ternary pos:start="193:20" pos:end="193:39"><condition pos:start="193:20" pos:end="193:28"><expr pos:start="193:20" pos:end="193:26"><name pos:start="193:20" pos:end="193:22">ret</name> <operator pos:start="193:24" pos:end="193:24">&lt;</operator> <literal type="number" pos:start="193:26" pos:end="193:26">0</literal></expr> ?</condition><then pos:start="193:30" pos:end="193:32"> <expr pos:start="193:30" pos:end="193:32"><name pos:start="193:30" pos:end="193:32">ret</name></expr> </then><else pos:start="193:34" pos:end="193:39">: <expr pos:start="193:36" pos:end="193:39"><name pos:start="193:36" pos:end="193:39">wret</name></expr></else></ternary></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="201:5" pos:end="207:7">/*

     * Try do undo any updates if an error is returned (This may succeed in

     * some cases like ENOSPC for allocating a new refcount block)

     */</comment>

    <if_stmt pos:start="209:5" pos:end="219:5"><if pos:start="209:5" pos:end="219:5">if <condition pos:start="209:8" pos:end="209:16">(<expr pos:start="209:9" pos:end="209:15"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">&lt;</operator> <literal type="number" pos:start="209:15" pos:end="209:15">0</literal></expr>)</condition> <block pos:start="209:18" pos:end="219:5">{<block_content pos:start="211:9" pos:end="217:20">

        <decl_stmt pos:start="211:9" pos:end="211:18"><decl pos:start="211:9" pos:end="211:17"><type pos:start="211:9" pos:end="211:11"><name pos:start="211:9" pos:end="211:11">int</name></type> <name pos:start="211:13" pos:end="211:17">dummy</name></decl>;</decl_stmt>

        <expr_stmt pos:start="213:9" pos:end="215:64"><expr pos:start="213:9" pos:end="215:63"><name pos:start="213:9" pos:end="213:13">dummy</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <call pos:start="213:17" pos:end="215:63"><name pos:start="213:17" pos:end="213:31">update_refcount</name><argument_list pos:start="213:32" pos:end="215:63">(<argument pos:start="213:33" pos:end="213:34"><expr pos:start="213:33" pos:end="213:34"><name pos:start="213:33" pos:end="213:34">bs</name></expr></argument>, <argument pos:start="213:37" pos:end="213:42"><expr pos:start="213:37" pos:end="213:42"><name pos:start="213:37" pos:end="213:42">offset</name></expr></argument>, <argument pos:start="213:45" pos:end="213:67"><expr pos:start="213:45" pos:end="213:67"><name pos:start="213:45" pos:end="213:58">cluster_offset</name> <operator pos:start="213:60" pos:end="213:60">-</operator> <name pos:start="213:62" pos:end="213:67">offset</name></expr></argument>, <argument pos:start="213:70" pos:end="213:75"><expr pos:start="213:70" pos:end="213:75"><name pos:start="213:70" pos:end="213:75">addend</name></expr></argument>,

                                <argument pos:start="215:33" pos:end="215:41"><expr pos:start="215:33" pos:end="215:41"><operator pos:start="215:33" pos:end="215:33">!</operator><name pos:start="215:34" pos:end="215:41">decrease</name></expr></argument>, <argument pos:start="215:44" pos:end="215:62"><expr pos:start="215:44" pos:end="215:62"><name pos:start="215:44" pos:end="215:62">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:20"><expr pos:start="217:9" pos:end="217:19"><operator pos:start="217:9" pos:end="217:9">(</operator><name pos:start="217:10" pos:end="217:13">void</name><operator pos:start="217:14" pos:end="217:14">)</operator><name pos:start="217:15" pos:end="217:19">dummy</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="223:5" pos:end="223:15">return <expr pos:start="223:12" pos:end="223:14"><name pos:start="223:12" pos:end="223:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
