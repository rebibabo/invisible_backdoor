<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6313.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">unix_open</name><parameter_list pos:start="1:21" pos:end="1:68">(<parameter pos:start="1:22" pos:end="1:34"><decl pos:start="1:22" pos:end="1:34"><type pos:start="1:22" pos:end="1:34"><name pos:start="1:22" pos:end="1:31">URLContext</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">h</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:56"><specifier pos:start="1:37" pos:end="1:41">const</specifier> <name pos:start="1:43" pos:end="1:46">char</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:56">filename</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">UnixContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:33">= <expr pos:start="5:22" pos:end="5:33"><name pos:start="5:22" pos:end="5:33"><name pos:start="5:22" pos:end="5:22">h</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:33">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>, <decl pos:start="7:13" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:46"><expr pos:start="11:5" pos:end="11:45"><call pos:start="11:5" pos:end="11:45"><name pos:start="11:5" pos:end="11:15">av_strstart</name><argument_list pos:start="11:16" pos:end="11:45">(<argument pos:start="11:17" pos:end="11:24"><expr pos:start="11:17" pos:end="11:24"><name pos:start="11:17" pos:end="11:24">filename</name></expr></argument>, <argument pos:start="11:27" pos:end="11:33"><expr pos:start="11:27" pos:end="11:33"><literal type="string" pos:start="11:27" pos:end="11:33">"unix:"</literal></expr></argument>, <argument pos:start="11:36" pos:end="11:44"><expr pos:start="11:36" pos:end="11:44"><operator pos:start="11:36" pos:end="11:36">&amp;</operator><name pos:start="11:37" pos:end="11:44">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:11">addr</name><operator pos:start="13:12" pos:end="13:12">.</operator><name pos:start="13:13" pos:end="13:22">sun_family</name></name> <operator pos:start="13:24" pos:end="13:24">=</operator> <name pos:start="13:26" pos:end="13:32">AF_UNIX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:69"><expr pos:start="15:5" pos:end="15:68"><call pos:start="15:5" pos:end="15:68"><name pos:start="15:5" pos:end="15:14">av_strlcpy</name><argument_list pos:start="15:15" pos:end="15:68">(<argument pos:start="15:16" pos:end="15:31"><expr pos:start="15:16" pos:end="15:31"><name pos:start="15:16" pos:end="15:31"><name pos:start="15:16" pos:end="15:16">s</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:22">addr</name><operator pos:start="15:23" pos:end="15:23">.</operator><name pos:start="15:24" pos:end="15:31">sun_path</name></name></expr></argument>, <argument pos:start="15:34" pos:end="15:41"><expr pos:start="15:34" pos:end="15:41"><name pos:start="15:34" pos:end="15:41">filename</name></expr></argument>, <argument pos:start="15:44" pos:end="15:67"><expr pos:start="15:44" pos:end="15:67"><sizeof pos:start="15:44" pos:end="15:67">sizeof<argument_list pos:start="15:50" pos:end="15:67">(<argument pos:start="15:51" pos:end="15:66"><expr pos:start="15:51" pos:end="15:66"><name pos:start="15:51" pos:end="15:66"><name pos:start="15:51" pos:end="15:51">s</name><operator pos:start="15:52" pos:end="15:53">-&gt;</operator><name pos:start="15:54" pos:end="15:57">addr</name><operator pos:start="15:58" pos:end="15:58">.</operator><name pos:start="15:59" pos:end="15:66">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="21:29"><if pos:start="19:5" pos:end="21:29">if <condition pos:start="19:8" pos:end="19:50">(<expr pos:start="19:9" pos:end="19:49"><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:11">fd</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:44"><name pos:start="19:15" pos:end="19:23">ff_socket</name><argument_list pos:start="19:24" pos:end="19:44">(<argument pos:start="19:25" pos:end="19:31"><expr pos:start="19:25" pos:end="19:31"><name pos:start="19:25" pos:end="19:31">AF_UNIX</name></expr></argument>, <argument pos:start="19:34" pos:end="19:40"><expr pos:start="19:34" pos:end="19:40"><name pos:start="19:34" pos:end="19:40"><name pos:start="19:34" pos:end="19:34">s</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:40">type</name></name></expr></argument>, <argument pos:start="19:43" pos:end="19:43"><expr pos:start="19:43" pos:end="19:43"><literal type="number" pos:start="19:43" pos:end="19:43">0</literal></expr></argument>)</argument_list></call><operator pos:start="19:45" pos:end="19:45">)</operator> <operator pos:start="19:47" pos:end="19:47">&lt;</operator> <literal type="number" pos:start="19:49" pos:end="19:49">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:29"><block_content pos:start="21:9" pos:end="21:29">

        <return pos:start="21:9" pos:end="21:29">return <expr pos:start="21:16" pos:end="21:28"><call pos:start="21:16" pos:end="21:28"><name pos:start="21:16" pos:end="21:26">ff_neterrno</name><argument_list pos:start="21:27" pos:end="21:28">()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="49:5"><if pos:start="25:5" pos:end="39:5">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">listen</name></name></expr>)</condition> <block pos:start="25:20" pos:end="39:5">{<block_content pos:start="27:9" pos:end="37:9">

        <expr_stmt pos:start="27:9" pos:end="29:60"><expr pos:start="27:9" pos:end="29:59"><name pos:start="27:9" pos:end="27:10">fd</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="29:59"><name pos:start="27:14" pos:end="27:27">ff_listen_bind</name><argument_list pos:start="27:28" pos:end="29:59">(<argument pos:start="27:29" pos:end="27:30"><expr pos:start="27:29" pos:end="27:30"><name pos:start="27:29" pos:end="27:30">fd</name></expr></argument>, <argument pos:start="27:33" pos:end="27:59"><expr pos:start="27:33" pos:end="27:59"><operator pos:start="27:33" pos:end="27:33">(</operator>struct <name pos:start="27:41" pos:end="27:48">sockaddr</name> <operator pos:start="27:50" pos:end="27:50">*</operator><operator pos:start="27:51" pos:end="27:51">)</operator><operator pos:start="27:52" pos:end="27:52">&amp;</operator><name pos:start="27:53" pos:end="27:59"><name pos:start="27:53" pos:end="27:53">s</name><operator pos:start="27:54" pos:end="27:55">-&gt;</operator><name pos:start="27:56" pos:end="27:59">addr</name></name></expr></argument>,

                            <argument pos:start="29:29" pos:end="29:43"><expr pos:start="29:29" pos:end="29:43"><sizeof pos:start="29:29" pos:end="29:43">sizeof<argument_list pos:start="29:35" pos:end="29:43">(<argument pos:start="29:36" pos:end="29:42"><expr pos:start="29:36" pos:end="29:42"><name pos:start="29:36" pos:end="29:42"><name pos:start="29:36" pos:end="29:36">s</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:42">addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:46" pos:end="29:55"><expr pos:start="29:46" pos:end="29:55"><name pos:start="29:46" pos:end="29:55"><name pos:start="29:46" pos:end="29:46">s</name><operator pos:start="29:47" pos:end="29:48">-&gt;</operator><name pos:start="29:49" pos:end="29:55">timeout</name></name></expr></argument>, <argument pos:start="29:58" pos:end="29:58"><expr pos:start="29:58" pos:end="29:58"><name pos:start="29:58" pos:end="29:58">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:19">(<expr pos:start="31:13" pos:end="31:18"><name pos:start="31:13" pos:end="31:14">fd</name> <operator pos:start="31:16" pos:end="31:16">&lt;</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>)</condition> <block pos:start="31:21" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:22">

            <expr_stmt pos:start="33:13" pos:end="33:21"><expr pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:20">fd</name></expr>;</expr_stmt>

            <goto pos:start="35:13" pos:end="35:22">goto <name pos:start="35:18" pos:end="35:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="49:5">else <block pos:start="39:12" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:22">

        <expr_stmt pos:start="41:9" pos:end="43:67"><expr pos:start="41:9" pos:end="43:66"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="43:66"><name pos:start="41:15" pos:end="41:31">ff_listen_connect</name><argument_list pos:start="41:32" pos:end="43:66">(<argument pos:start="41:33" pos:end="41:34"><expr pos:start="41:33" pos:end="41:34"><name pos:start="41:33" pos:end="41:34">fd</name></expr></argument>, <argument pos:start="41:37" pos:end="41:63"><expr pos:start="41:37" pos:end="41:63"><operator pos:start="41:37" pos:end="41:37">(</operator>struct <name pos:start="41:45" pos:end="41:52">sockaddr</name> <operator pos:start="41:54" pos:end="41:54">*</operator><operator pos:start="41:55" pos:end="41:55">)</operator><operator pos:start="41:56" pos:end="41:56">&amp;</operator><name pos:start="41:57" pos:end="41:63"><name pos:start="41:57" pos:end="41:57">s</name><operator pos:start="41:58" pos:end="41:59">-&gt;</operator><name pos:start="41:60" pos:end="41:63">addr</name></name></expr></argument>,

                                <argument pos:start="43:33" pos:end="43:47"><expr pos:start="43:33" pos:end="43:47"><sizeof pos:start="43:33" pos:end="43:47">sizeof<argument_list pos:start="43:39" pos:end="43:47">(<argument pos:start="43:40" pos:end="43:46"><expr pos:start="43:40" pos:end="43:46"><name pos:start="43:40" pos:end="43:46"><name pos:start="43:40" pos:end="43:40">s</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:46">addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="43:50" pos:end="43:59"><expr pos:start="43:50" pos:end="43:59"><name pos:start="43:50" pos:end="43:59"><name pos:start="43:50" pos:end="43:50">s</name><operator pos:start="43:51" pos:end="43:52">-&gt;</operator><name pos:start="43:53" pos:end="43:59">timeout</name></name></expr></argument>, <argument pos:start="43:62" pos:end="43:62"><expr pos:start="43:62" pos:end="43:62"><name pos:start="43:62" pos:end="43:62">h</name></expr></argument>, <argument pos:start="43:65" pos:end="43:65"><expr pos:start="43:65" pos:end="43:65"><literal type="number" pos:start="43:65" pos:end="43:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="47:22"><if pos:start="45:9" pos:end="47:22">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:22"><block_content pos:start="47:13" pos:end="47:22">

            <goto pos:start="47:13" pos:end="47:22">goto <name pos:start="47:18" pos:end="47:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:15"><expr pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:9"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:9">fd</name></name> <operator pos:start="53:11" pos:end="53:11">=</operator> <name pos:start="53:13" pos:end="53:14">fd</name></expr>;</expr_stmt>



    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>



<label pos:start="61:1" pos:end="61:5"><name pos:start="61:1" pos:end="61:4">fail</name>:</label>

    <if_stmt pos:start="63:5" pos:end="65:33"><if pos:start="63:5" pos:end="65:33">if <condition pos:start="63:8" pos:end="63:50">(<expr pos:start="63:9" pos:end="63:49"><name pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:17">listen</name></name> <operator pos:start="63:19" pos:end="63:20">&amp;&amp;</operator> <call pos:start="63:22" pos:end="63:35"><name pos:start="63:22" pos:end="63:30">AVUNERROR</name><argument_list pos:start="63:31" pos:end="63:35">(<argument pos:start="63:32" pos:end="63:34"><expr pos:start="63:32" pos:end="63:34"><name pos:start="63:32" pos:end="63:34">ret</name></expr></argument>)</argument_list></call> <operator pos:start="63:37" pos:end="63:38">!=</operator> <name pos:start="63:40" pos:end="63:49">EADDRINUSE</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:33"><block_content pos:start="65:9" pos:end="65:33">

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><call pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:14">unlink</name><argument_list pos:start="65:15" pos:end="65:32">(<argument pos:start="65:16" pos:end="65:31"><expr pos:start="65:16" pos:end="65:31"><name pos:start="65:16" pos:end="65:31"><name pos:start="65:16" pos:end="65:16">s</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:22">addr</name><operator pos:start="65:23" pos:end="65:23">.</operator><name pos:start="65:24" pos:end="65:31">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="69:24"><if pos:start="67:5" pos:end="69:24">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:10">fd</name> <operator pos:start="67:12" pos:end="67:13">&gt;=</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:24"><block_content pos:start="69:9" pos:end="69:24">

        <expr_stmt pos:start="69:9" pos:end="69:24"><expr pos:start="69:9" pos:end="69:23"><call pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:19">closesocket</name><argument_list pos:start="69:20" pos:end="69:23">(<argument pos:start="69:21" pos:end="69:22"><expr pos:start="69:21" pos:end="69:22"><name pos:start="69:21" pos:end="69:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="71:5" pos:end="71:15">return <expr pos:start="71:12" pos:end="71:14"><name pos:start="71:12" pos:end="71:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
