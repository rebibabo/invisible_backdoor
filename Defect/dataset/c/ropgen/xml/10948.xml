<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10948.c" pos:tabs="8"><function pos:start="1:1" pos:end="235:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">nbd_trip</name><parameter_list pos:start="1:13" pos:end="3:76">(<parameter pos:start="1:14" pos:end="1:33"><decl pos:start="1:14" pos:end="1:33"><type pos:start="1:14" pos:end="1:33"><name pos:start="1:14" pos:end="1:29">BlockDriverState</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:33">bs</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:44"><decl pos:start="1:36" pos:end="1:44"><type pos:start="1:36" pos:end="1:44"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:44">csock</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:56"><decl pos:start="1:47" pos:end="1:56"><type pos:start="1:47" pos:end="1:56"><name pos:start="1:47" pos:end="1:51">off_t</name></type> <name pos:start="1:53" pos:end="1:56">size</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:77"><decl pos:start="1:59" pos:end="1:77"><type pos:start="1:59" pos:end="1:77"><name pos:start="1:59" pos:end="1:66">uint64_t</name></type> <name pos:start="1:68" pos:end="1:77">dev_offset</name></decl></parameter>,

             <parameter pos:start="3:14" pos:end="3:26"><decl pos:start="3:14" pos:end="3:26"><type pos:start="3:14" pos:end="3:26"><name pos:start="3:14" pos:end="3:18">off_t</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:26">offset</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:45"><decl pos:start="3:29" pos:end="3:45"><type pos:start="3:29" pos:end="3:45"><name pos:start="3:29" pos:end="3:36">uint32_t</name></type> <name pos:start="3:38" pos:end="3:45">nbdflags</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:60"><decl pos:start="3:48" pos:end="3:60"><type pos:start="3:48" pos:end="3:60"><name pos:start="3:48" pos:end="3:54">uint8_t</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:60">data</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:75"><decl pos:start="3:63" pos:end="3:75"><type pos:start="3:63" pos:end="3:75"><name pos:start="3:63" pos:end="3:65">int</name></type> <name pos:start="3:67" pos:end="3:75">data_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="235:1">{<block_content pos:start="7:5" pos:end="233:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">nbd_request</name></name></type> <name pos:start="7:24" pos:end="7:30">request</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:20">nbd_reply</name></name></type> <name pos:start="9:22" pos:end="9:26">reply</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><call pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:9">TRACE</name><argument_list pos:start="13:10" pos:end="13:29">(<argument pos:start="13:11" pos:end="13:28"><expr pos:start="13:11" pos:end="13:28"><literal type="string" pos:start="13:11" pos:end="13:28">"Reading request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="19:18"><if pos:start="17:5" pos:end="19:18">if <condition pos:start="17:8" pos:end="17:51">(<expr pos:start="17:9" pos:end="17:50"><call pos:start="17:9" pos:end="17:44"><name pos:start="17:9" pos:end="17:27">nbd_receive_request</name><argument_list pos:start="17:28" pos:end="17:44">(<argument pos:start="17:29" pos:end="17:33"><expr pos:start="17:29" pos:end="17:33"><name pos:start="17:29" pos:end="17:33">csock</name></expr></argument>, <argument pos:start="17:36" pos:end="17:43"><expr pos:start="17:36" pos:end="17:43"><operator pos:start="17:36" pos:end="17:36">&amp;</operator><name pos:start="17:37" pos:end="17:43">request</name></expr></argument>)</argument_list></call> <operator pos:start="17:46" pos:end="17:47">==</operator> <operator pos:start="17:49" pos:end="17:49">-</operator><literal type="number" pos:start="17:50" pos:end="17:50">1</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:18"><block_content pos:start="19:9" pos:end="19:18">

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="33:5"><if pos:start="23:5" pos:end="33:5">if <condition pos:start="23:8" pos:end="23:49">(<expr pos:start="23:9" pos:end="23:48"><name pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:15">request</name><operator pos:start="23:16" pos:end="23:16">.</operator><name pos:start="23:17" pos:end="23:19">len</name></name> <operator pos:start="23:21" pos:end="23:21">+</operator> <name pos:start="23:23" pos:end="23:36">NBD_REPLY_SIZE</name> <operator pos:start="23:38" pos:end="23:38">&gt;</operator> <name pos:start="23:40" pos:end="23:48">data_size</name></expr>)</condition> <block pos:start="23:51" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:18">

        <expr_stmt pos:start="25:9" pos:end="27:53"><expr pos:start="25:9" pos:end="27:52"><call pos:start="25:9" pos:end="27:52"><name pos:start="25:9" pos:end="25:11">LOG</name><argument_list pos:start="25:12" pos:end="27:52">(<argument pos:start="25:13" pos:end="25:50"><expr pos:start="25:13" pos:end="25:50"><literal type="string" pos:start="25:13" pos:end="25:50">"len (%u) is larger than max len (%u)"</literal></expr></argument>,

            <argument pos:start="27:13" pos:end="27:40"><expr pos:start="27:13" pos:end="27:40"><name pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:19">request</name><operator pos:start="27:20" pos:end="27:20">.</operator><name pos:start="27:21" pos:end="27:23">len</name></name> <operator pos:start="27:25" pos:end="27:25">+</operator> <name pos:start="27:27" pos:end="27:40">NBD_REPLY_SIZE</name></expr></argument>, <argument pos:start="27:43" pos:end="27:51"><expr pos:start="27:43" pos:end="27:51"><name pos:start="27:43" pos:end="27:51">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:23"><expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:13">errno</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="47:5">if <condition pos:start="37:8" pos:end="37:52">(<expr pos:start="37:9" pos:end="37:51"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:21"><name pos:start="37:10" pos:end="37:16">request</name><operator pos:start="37:17" pos:end="37:17">.</operator><name pos:start="37:18" pos:end="37:21">from</name></name> <operator pos:start="37:23" pos:end="37:23">+</operator> <name pos:start="37:25" pos:end="37:35"><name pos:start="37:25" pos:end="37:31">request</name><operator pos:start="37:32" pos:end="37:32">.</operator><name pos:start="37:33" pos:end="37:35">len</name></name><operator pos:start="37:36" pos:end="37:36">)</operator> <operator pos:start="37:38" pos:end="37:38">&lt;</operator> <name pos:start="37:40" pos:end="37:51"><name pos:start="37:40" pos:end="37:46">request</name><operator pos:start="37:47" pos:end="37:47">.</operator><name pos:start="37:48" pos:end="37:51">from</name></name></expr>)</condition> <block pos:start="37:54" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:18">

        <expr_stmt pos:start="39:9" pos:end="41:46"><expr pos:start="39:9" pos:end="41:45"><call pos:start="39:9" pos:end="41:45"><name pos:start="39:9" pos:end="39:11">LOG</name><argument_list pos:start="39:12" pos:end="41:45">(<argument pos:start="39:13" pos:end="41:44"><expr pos:start="39:13" pos:end="41:44"><literal type="string" pos:start="39:13" pos:end="39:41">"integer overflow detected! "</literal>

            <literal type="string" pos:start="41:13" pos:end="41:44">"you're probably being attacked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:23"><expr pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:13">errno</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <name pos:start="43:17" pos:end="43:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="65:5"><if pos:start="51:5" pos:end="65:5">if <condition pos:start="51:8" pos:end="51:44">(<expr pos:start="51:9" pos:end="51:43"><operator pos:start="51:9" pos:end="51:9">(</operator><name pos:start="51:10" pos:end="51:21"><name pos:start="51:10" pos:end="51:16">request</name><operator pos:start="51:17" pos:end="51:17">.</operator><name pos:start="51:18" pos:end="51:21">from</name></name> <operator pos:start="51:23" pos:end="51:23">+</operator> <name pos:start="51:25" pos:end="51:35"><name pos:start="51:25" pos:end="51:31">request</name><operator pos:start="51:32" pos:end="51:32">.</operator><name pos:start="51:33" pos:end="51:35">len</name></name><operator pos:start="51:36" pos:end="51:36">)</operator> <operator pos:start="51:38" pos:end="51:38">&gt;</operator> <name pos:start="51:40" pos:end="51:43">size</name></expr>)</condition> <block pos:start="51:46" pos:end="65:5">{<block_content pos:start="53:13" pos:end="63:18">

            <expr_stmt pos:start="53:13" pos:end="57:75"><expr pos:start="53:13" pos:end="57:74"><call pos:start="53:13" pos:end="57:74"><name pos:start="53:13" pos:end="53:15">LOG</name><argument_list pos:start="53:16" pos:end="57:74">(<argument pos:start="53:17" pos:end="55:37"><expr pos:start="53:17" pos:end="55:37"><literal type="string" pos:start="53:17" pos:end="53:25">"From: %"</literal> <name pos:start="53:27" pos:end="53:32">PRIu64</name> <literal type="string" pos:start="53:34" pos:end="53:53">", Len: %u, Size: %"</literal> <name pos:start="53:55" pos:end="53:60">PRIu64</name>

            <literal type="string" pos:start="55:13" pos:end="55:25">", Offset: %"</literal> <name pos:start="55:27" pos:end="55:32">PRIu64</name> <literal type="string" pos:start="55:34" pos:end="55:37">"\n"</literal></expr></argument>,

                    <argument pos:start="57:21" pos:end="57:32"><expr pos:start="57:21" pos:end="57:32"><name pos:start="57:21" pos:end="57:32"><name pos:start="57:21" pos:end="57:27">request</name><operator pos:start="57:28" pos:end="57:28">.</operator><name pos:start="57:29" pos:end="57:32">from</name></name></expr></argument>, <argument pos:start="57:35" pos:end="57:45"><expr pos:start="57:35" pos:end="57:45"><name pos:start="57:35" pos:end="57:45"><name pos:start="57:35" pos:end="57:41">request</name><operator pos:start="57:42" pos:end="57:42">.</operator><name pos:start="57:43" pos:end="57:45">len</name></name></expr></argument>, <argument pos:start="57:48" pos:end="57:61"><expr pos:start="57:48" pos:end="57:61"><operator pos:start="57:48" pos:end="57:48">(</operator><name pos:start="57:49" pos:end="57:56">uint64_t</name><operator pos:start="57:57" pos:end="57:57">)</operator><name pos:start="57:58" pos:end="57:61">size</name></expr></argument>, <argument pos:start="57:64" pos:end="57:73"><expr pos:start="57:64" pos:end="57:73"><name pos:start="57:64" pos:end="57:73">dev_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:57"><expr pos:start="59:9" pos:end="59:56"><call pos:start="59:9" pos:end="59:56"><name pos:start="59:9" pos:end="59:11">LOG</name><argument_list pos:start="59:12" pos:end="59:56">(<argument pos:start="59:13" pos:end="59:55"><expr pos:start="59:13" pos:end="59:55"><literal type="string" pos:start="59:13" pos:end="59:55">"requested operation past EOF--bad client?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:13">errno</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:27"><expr pos:start="69:5" pos:end="69:26"><call pos:start="69:5" pos:end="69:26"><name pos:start="69:5" pos:end="69:9">TRACE</name><argument_list pos:start="69:10" pos:end="69:26">(<argument pos:start="69:11" pos:end="69:25"><expr pos:start="69:11" pos:end="69:25"><literal type="string" pos:start="69:11" pos:end="69:25">"Decoding type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:34"><expr pos:start="73:5" pos:end="73:33"><name pos:start="73:5" pos:end="73:16"><name pos:start="73:5" pos:end="73:9">reply</name><operator pos:start="73:10" pos:end="73:10">.</operator><name pos:start="73:11" pos:end="73:16">handle</name></name> <operator pos:start="73:18" pos:end="73:18">=</operator> <name pos:start="73:20" pos:end="73:33"><name pos:start="73:20" pos:end="73:26">request</name><operator pos:start="73:27" pos:end="73:27">.</operator><name pos:start="73:28" pos:end="73:33">handle</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:20"><expr pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:9">reply</name><operator pos:start="75:10" pos:end="75:10">.</operator><name pos:start="75:11" pos:end="75:15">error</name></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>;</expr_stmt>



    <switch pos:start="79:5" pos:end="225:5">switch <condition pos:start="79:12" pos:end="79:25">(<expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:19">request</name><operator pos:start="79:20" pos:end="79:20">.</operator><name pos:start="79:21" pos:end="79:24">type</name></name></expr>)</condition> <block pos:start="79:27" pos:end="225:5">{<block_content pos:start="81:5" pos:end="223:18">

    <case pos:start="81:5" pos:end="81:22">case <expr pos:start="81:10" pos:end="81:21"><name pos:start="81:10" pos:end="81:21">NBD_CMD_READ</name></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:38"><expr pos:start="83:9" pos:end="83:37"><call pos:start="83:9" pos:end="83:37"><name pos:start="83:9" pos:end="83:13">TRACE</name><argument_list pos:start="83:14" pos:end="83:37">(<argument pos:start="83:15" pos:end="83:36"><expr pos:start="83:15" pos:end="83:36"><literal type="string" pos:start="83:15" pos:end="83:36">"Request type is READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="99:9"><if pos:start="87:9" pos:end="99:9">if <condition pos:start="87:12" pos:end="91:43">(<expr pos:start="87:13" pos:end="91:42"><call pos:start="87:13" pos:end="91:36"><name pos:start="87:13" pos:end="87:21">bdrv_read</name><argument_list pos:start="87:22" pos:end="91:36">(<argument pos:start="87:23" pos:end="87:24"><expr pos:start="87:23" pos:end="87:24"><name pos:start="87:23" pos:end="87:24">bs</name></expr></argument>, <argument pos:start="87:27" pos:end="87:59"><expr pos:start="87:27" pos:end="87:59"><operator pos:start="87:27" pos:end="87:27">(</operator><name pos:start="87:28" pos:end="87:39"><name pos:start="87:28" pos:end="87:34">request</name><operator pos:start="87:35" pos:end="87:35">.</operator><name pos:start="87:36" pos:end="87:39">from</name></name> <operator pos:start="87:41" pos:end="87:41">+</operator> <name pos:start="87:43" pos:end="87:52">dev_offset</name><operator pos:start="87:53" pos:end="87:53">)</operator> <operator pos:start="87:55" pos:end="87:55">/</operator> <literal type="number" pos:start="87:57" pos:end="87:59">512</literal></expr></argument>,

                  <argument pos:start="89:19" pos:end="89:39"><expr pos:start="89:19" pos:end="89:39"><name pos:start="89:19" pos:end="89:22">data</name> <operator pos:start="89:24" pos:end="89:24">+</operator> <name pos:start="89:26" pos:end="89:39">NBD_REPLY_SIZE</name></expr></argument>,

                  <argument pos:start="91:19" pos:end="91:35"><expr pos:start="91:19" pos:end="91:35"><name pos:start="91:19" pos:end="91:29"><name pos:start="91:19" pos:end="91:25">request</name><operator pos:start="91:26" pos:end="91:26">.</operator><name pos:start="91:27" pos:end="91:29">len</name></name> <operator pos:start="91:31" pos:end="91:31">/</operator> <literal type="number" pos:start="91:33" pos:end="91:35">512</literal></expr></argument>)</argument_list></call> <operator pos:start="91:38" pos:end="91:39">==</operator> <operator pos:start="91:41" pos:end="91:41">-</operator><literal type="number" pos:start="91:42" pos:end="91:42">1</literal></expr>)</condition> <block pos:start="91:45" pos:end="99:9">{<block_content pos:start="93:13" pos:end="97:22">

            <expr_stmt pos:start="93:13" pos:end="93:44"><expr pos:start="93:13" pos:end="93:43"><call pos:start="93:13" pos:end="93:43"><name pos:start="93:13" pos:end="93:15">LOG</name><argument_list pos:start="93:16" pos:end="93:43">(<argument pos:start="93:17" pos:end="93:42"><expr pos:start="93:17" pos:end="93:42"><literal type="string" pos:start="93:17" pos:end="93:42">"reading from file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:27"><expr pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:17">errno</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <name pos:start="95:21" pos:end="95:26">EINVAL</name></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:22">return <expr pos:start="97:20" pos:end="97:21"><operator pos:start="97:20" pos:end="97:20">-</operator><literal type="number" pos:start="97:21" pos:end="97:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:31"><expr pos:start="101:9" pos:end="101:30"><operator pos:start="101:9" pos:end="101:9">*</operator><name pos:start="101:10" pos:end="101:15">offset</name> <operator pos:start="101:17" pos:end="101:18">+=</operator> <name pos:start="101:20" pos:end="101:30"><name pos:start="101:20" pos:end="101:26">request</name><operator pos:start="101:27" pos:end="101:27">.</operator><name pos:start="101:28" pos:end="101:30">len</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:46"><expr pos:start="105:9" pos:end="105:45"><call pos:start="105:9" pos:end="105:45"><name pos:start="105:9" pos:end="105:13">TRACE</name><argument_list pos:start="105:14" pos:end="105:45">(<argument pos:start="105:15" pos:end="105:31"><expr pos:start="105:15" pos:end="105:31"><literal type="string" pos:start="105:15" pos:end="105:31">"Read %u byte(s)"</literal></expr></argument>, <argument pos:start="105:34" pos:end="105:44"><expr pos:start="105:34" pos:end="105:44"><name pos:start="105:34" pos:end="105:44"><name pos:start="105:34" pos:end="105:40">request</name><operator pos:start="105:41" pos:end="105:41">.</operator><name pos:start="105:42" pos:end="105:44">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="109:9" pos:end="117:11">/* Reply

           [ 0 ..  3]    magic   (NBD_REPLY_MAGIC)

           [ 4 ..  7]    error   (0 == no error)

           [ 7 .. 15]    handle

         */</comment>



        <expr_stmt pos:start="121:9" pos:end="121:55"><expr pos:start="121:9" pos:end="121:54"><call pos:start="121:9" pos:end="121:54"><name pos:start="121:9" pos:end="121:20">cpu_to_be32w</name><argument_list pos:start="121:21" pos:end="121:54">(<argument pos:start="121:22" pos:end="121:36"><expr pos:start="121:22" pos:end="121:36"><operator pos:start="121:22" pos:end="121:22">(</operator><name pos:start="121:23" pos:end="121:30">uint32_t</name><operator pos:start="121:31" pos:end="121:31">*</operator><operator pos:start="121:32" pos:end="121:32">)</operator><name pos:start="121:33" pos:end="121:36">data</name></expr></argument>, <argument pos:start="121:39" pos:end="121:53"><expr pos:start="121:39" pos:end="121:53"><name pos:start="121:39" pos:end="121:53">NBD_REPLY_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:57"><expr pos:start="123:9" pos:end="123:56"><call pos:start="123:9" pos:end="123:56"><name pos:start="123:9" pos:end="123:20">cpu_to_be32w</name><argument_list pos:start="123:21" pos:end="123:56">(<argument pos:start="123:22" pos:end="123:42"><expr pos:start="123:22" pos:end="123:42"><operator pos:start="123:22" pos:end="123:22">(</operator><name pos:start="123:23" pos:end="123:30">uint32_t</name><operator pos:start="123:31" pos:end="123:31">*</operator><operator pos:start="123:32" pos:end="123:32">)</operator><operator pos:start="123:33" pos:end="123:33">(</operator><name pos:start="123:34" pos:end="123:37">data</name> <operator pos:start="123:39" pos:end="123:39">+</operator> <literal type="number" pos:start="123:41" pos:end="123:41">4</literal><operator pos:start="123:42" pos:end="123:42">)</operator></expr></argument>, <argument pos:start="123:45" pos:end="123:55"><expr pos:start="123:45" pos:end="123:55"><name pos:start="123:45" pos:end="123:55"><name pos:start="123:45" pos:end="123:49">reply</name><operator pos:start="123:50" pos:end="123:50">.</operator><name pos:start="123:51" pos:end="123:55">error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:58"><expr pos:start="125:9" pos:end="125:57"><call pos:start="125:9" pos:end="125:57"><name pos:start="125:9" pos:end="125:20">cpu_to_be64w</name><argument_list pos:start="125:21" pos:end="125:57">(<argument pos:start="125:22" pos:end="125:42"><expr pos:start="125:22" pos:end="125:42"><operator pos:start="125:22" pos:end="125:22">(</operator><name pos:start="125:23" pos:end="125:30">uint64_t</name><operator pos:start="125:31" pos:end="125:31">*</operator><operator pos:start="125:32" pos:end="125:32">)</operator><operator pos:start="125:33" pos:end="125:33">(</operator><name pos:start="125:34" pos:end="125:37">data</name> <operator pos:start="125:39" pos:end="125:39">+</operator> <literal type="number" pos:start="125:41" pos:end="125:41">8</literal><operator pos:start="125:42" pos:end="125:42">)</operator></expr></argument>, <argument pos:start="125:45" pos:end="125:56"><expr pos:start="125:45" pos:end="125:56"><name pos:start="125:45" pos:end="125:56"><name pos:start="125:45" pos:end="125:49">reply</name><operator pos:start="125:50" pos:end="125:50">.</operator><name pos:start="125:51" pos:end="125:56">handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:40"><expr pos:start="129:9" pos:end="129:39"><call pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:13">TRACE</name><argument_list pos:start="129:14" pos:end="129:39">(<argument pos:start="129:15" pos:end="129:38"><expr pos:start="129:15" pos:end="129:38"><literal type="string" pos:start="129:15" pos:end="129:38">"Sending data to client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="133:9" pos:end="145:9"><if pos:start="133:9" pos:end="145:9">if <condition pos:start="133:12" pos:end="137:48">(<expr pos:start="133:13" pos:end="137:47"><call pos:start="133:13" pos:end="135:48"><name pos:start="133:13" pos:end="133:22">write_sync</name><argument_list pos:start="133:23" pos:end="135:48">(<argument pos:start="133:24" pos:end="133:28"><expr pos:start="133:24" pos:end="133:28"><name pos:start="133:24" pos:end="133:28">csock</name></expr></argument>, <argument pos:start="133:31" pos:end="133:34"><expr pos:start="133:31" pos:end="133:34"><name pos:start="133:31" pos:end="133:34">data</name></expr></argument>,

                   <argument pos:start="135:20" pos:end="135:47"><expr pos:start="135:20" pos:end="135:47"><name pos:start="135:20" pos:end="135:30"><name pos:start="135:20" pos:end="135:26">request</name><operator pos:start="135:27" pos:end="135:27">.</operator><name pos:start="135:28" pos:end="135:30">len</name></name> <operator pos:start="135:32" pos:end="135:32">+</operator> <name pos:start="135:34" pos:end="135:47">NBD_REPLY_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="135:50" pos:end="135:51">!=</operator>

                   <name pos:start="137:20" pos:end="137:30"><name pos:start="137:20" pos:end="137:26">request</name><operator pos:start="137:27" pos:end="137:27">.</operator><name pos:start="137:28" pos:end="137:30">len</name></name> <operator pos:start="137:32" pos:end="137:32">+</operator> <name pos:start="137:34" pos:end="137:47">NBD_REPLY_SIZE</name></expr>)</condition> <block pos:start="137:50" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:22">

            <expr_stmt pos:start="139:13" pos:end="139:44"><expr pos:start="139:13" pos:end="139:43"><call pos:start="139:13" pos:end="139:43"><name pos:start="139:13" pos:end="139:15">LOG</name><argument_list pos:start="139:16" pos:end="139:43">(<argument pos:start="139:17" pos:end="139:42"><expr pos:start="139:17" pos:end="139:42"><literal type="string" pos:start="139:17" pos:end="139:42">"writing to socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:27"><expr pos:start="141:13" pos:end="141:26"><name pos:start="141:13" pos:end="141:17">errno</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <name pos:start="141:21" pos:end="141:26">EINVAL</name></expr>;</expr_stmt>

            <return pos:start="143:13" pos:end="143:22">return <expr pos:start="143:20" pos:end="143:21"><operator pos:start="143:20" pos:end="143:20">-</operator><literal type="number" pos:start="143:21" pos:end="143:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:23">case <expr pos:start="149:10" pos:end="149:22"><name pos:start="149:10" pos:end="149:22">NBD_CMD_WRITE</name></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:39"><expr pos:start="151:9" pos:end="151:38"><call pos:start="151:9" pos:end="151:38"><name pos:start="151:9" pos:end="151:13">TRACE</name><argument_list pos:start="151:14" pos:end="151:38">(<argument pos:start="151:15" pos:end="151:37"><expr pos:start="151:15" pos:end="151:37"><literal type="string" pos:start="151:15" pos:end="151:37">"Request type is WRITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:49"><expr pos:start="155:9" pos:end="155:48"><call pos:start="155:9" pos:end="155:48"><name pos:start="155:9" pos:end="155:13">TRACE</name><argument_list pos:start="155:14" pos:end="155:48">(<argument pos:start="155:15" pos:end="155:34"><expr pos:start="155:15" pos:end="155:34"><literal type="string" pos:start="155:15" pos:end="155:34">"Reading %u byte(s)"</literal></expr></argument>, <argument pos:start="155:37" pos:end="155:47"><expr pos:start="155:37" pos:end="155:47"><name pos:start="155:37" pos:end="155:47"><name pos:start="155:37" pos:end="155:43">request</name><operator pos:start="155:44" pos:end="155:44">.</operator><name pos:start="155:45" pos:end="155:47">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="159:9" pos:end="167:9"><if pos:start="159:9" pos:end="167:9">if <condition pos:start="159:12" pos:end="159:63">(<expr pos:start="159:13" pos:end="159:62"><call pos:start="159:13" pos:end="159:47"><name pos:start="159:13" pos:end="159:21">read_sync</name><argument_list pos:start="159:22" pos:end="159:47">(<argument pos:start="159:23" pos:end="159:27"><expr pos:start="159:23" pos:end="159:27"><name pos:start="159:23" pos:end="159:27">csock</name></expr></argument>, <argument pos:start="159:30" pos:end="159:33"><expr pos:start="159:30" pos:end="159:33"><name pos:start="159:30" pos:end="159:33">data</name></expr></argument>, <argument pos:start="159:36" pos:end="159:46"><expr pos:start="159:36" pos:end="159:46"><name pos:start="159:36" pos:end="159:46"><name pos:start="159:36" pos:end="159:42">request</name><operator pos:start="159:43" pos:end="159:43">.</operator><name pos:start="159:44" pos:end="159:46">len</name></name></expr></argument>)</argument_list></call> <operator pos:start="159:49" pos:end="159:50">!=</operator> <name pos:start="159:52" pos:end="159:62"><name pos:start="159:52" pos:end="159:58">request</name><operator pos:start="159:59" pos:end="159:59">.</operator><name pos:start="159:60" pos:end="159:62">len</name></name></expr>)</condition> <block pos:start="159:65" pos:end="167:9">{<block_content pos:start="161:13" pos:end="165:22">

            <expr_stmt pos:start="161:13" pos:end="161:46"><expr pos:start="161:13" pos:end="161:45"><call pos:start="161:13" pos:end="161:45"><name pos:start="161:13" pos:end="161:15">LOG</name><argument_list pos:start="161:16" pos:end="161:45">(<argument pos:start="161:17" pos:end="161:44"><expr pos:start="161:17" pos:end="161:44"><literal type="string" pos:start="161:17" pos:end="161:44">"reading from socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:27"><expr pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:17">errno</name> <operator pos:start="163:19" pos:end="163:19">=</operator> <name pos:start="163:21" pos:end="163:26">EINVAL</name></expr>;</expr_stmt>

            <return pos:start="165:13" pos:end="165:22">return <expr pos:start="165:20" pos:end="165:21"><operator pos:start="165:20" pos:end="165:20">-</operator><literal type="number" pos:start="165:21" pos:end="165:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="171:9" pos:end="199:9"><if pos:start="171:9" pos:end="177:9">if <condition pos:start="171:12" pos:end="171:42">(<expr pos:start="171:13" pos:end="171:41"><name pos:start="171:13" pos:end="171:20">nbdflags</name> <operator pos:start="171:22" pos:end="171:22">&amp;</operator> <name pos:start="171:24" pos:end="171:41">NBD_FLAG_READ_ONLY</name></expr>)</condition> <block pos:start="171:44" pos:end="177:9">{<block_content pos:start="173:13" pos:end="175:28">

            <expr_stmt pos:start="173:13" pos:end="173:55"><expr pos:start="173:13" pos:end="173:54"><call pos:start="173:13" pos:end="173:54"><name pos:start="173:13" pos:end="173:17">TRACE</name><argument_list pos:start="173:18" pos:end="173:54">(<argument pos:start="173:19" pos:end="173:53"><expr pos:start="173:19" pos:end="173:53"><literal type="string" pos:start="173:19" pos:end="173:53">"Server is read-only, return error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:28"><expr pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:23"><name pos:start="175:13" pos:end="175:17">reply</name><operator pos:start="175:18" pos:end="175:18">.</operator><name pos:start="175:19" pos:end="175:23">error</name></name> <operator pos:start="175:25" pos:end="175:25">=</operator> <literal type="number" pos:start="175:27" pos:end="175:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="177:11" pos:end="199:9">else <block pos:start="177:16" pos:end="199:9">{<block_content pos:start="179:13" pos:end="197:35">

            <expr_stmt pos:start="179:13" pos:end="179:39"><expr pos:start="179:13" pos:end="179:38"><call pos:start="179:13" pos:end="179:38"><name pos:start="179:13" pos:end="179:17">TRACE</name><argument_list pos:start="179:18" pos:end="179:38">(<argument pos:start="179:19" pos:end="179:37"><expr pos:start="179:19" pos:end="179:37"><literal type="string" pos:start="179:19" pos:end="179:37">"Writing to device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="183:13" pos:end="193:13"><if pos:start="183:13" pos:end="193:13">if <condition pos:start="183:16" pos:end="185:54">(<expr pos:start="183:17" pos:end="185:53"><call pos:start="183:17" pos:end="185:47"><name pos:start="183:17" pos:end="183:26">bdrv_write</name><argument_list pos:start="183:27" pos:end="185:47">(<argument pos:start="183:28" pos:end="183:29"><expr pos:start="183:28" pos:end="183:29"><name pos:start="183:28" pos:end="183:29">bs</name></expr></argument>, <argument pos:start="183:32" pos:end="183:64"><expr pos:start="183:32" pos:end="183:64"><operator pos:start="183:32" pos:end="183:32">(</operator><name pos:start="183:33" pos:end="183:44"><name pos:start="183:33" pos:end="183:39">request</name><operator pos:start="183:40" pos:end="183:40">.</operator><name pos:start="183:41" pos:end="183:44">from</name></name> <operator pos:start="183:46" pos:end="183:46">+</operator> <name pos:start="183:48" pos:end="183:57">dev_offset</name><operator pos:start="183:58" pos:end="183:58">)</operator> <operator pos:start="183:60" pos:end="183:60">/</operator> <literal type="number" pos:start="183:62" pos:end="183:64">512</literal></expr></argument>,

                       <argument pos:start="185:24" pos:end="185:27"><expr pos:start="185:24" pos:end="185:27"><name pos:start="185:24" pos:end="185:27">data</name></expr></argument>, <argument pos:start="185:30" pos:end="185:46"><expr pos:start="185:30" pos:end="185:46"><name pos:start="185:30" pos:end="185:40"><name pos:start="185:30" pos:end="185:36">request</name><operator pos:start="185:37" pos:end="185:37">.</operator><name pos:start="185:38" pos:end="185:40">len</name></name> <operator pos:start="185:42" pos:end="185:42">/</operator> <literal type="number" pos:start="185:44" pos:end="185:46">512</literal></expr></argument>)</argument_list></call> <operator pos:start="185:49" pos:end="185:50">==</operator> <operator pos:start="185:52" pos:end="185:52">-</operator><literal type="number" pos:start="185:53" pos:end="185:53">1</literal></expr>)</condition> <block pos:start="185:56" pos:end="193:13">{<block_content pos:start="187:17" pos:end="191:26">

                <expr_stmt pos:start="187:17" pos:end="187:46"><expr pos:start="187:17" pos:end="187:45"><call pos:start="187:17" pos:end="187:45"><name pos:start="187:17" pos:end="187:19">LOG</name><argument_list pos:start="187:20" pos:end="187:45">(<argument pos:start="187:21" pos:end="187:44"><expr pos:start="187:21" pos:end="187:44"><literal type="string" pos:start="187:21" pos:end="187:44">"writing to file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:31"><expr pos:start="189:17" pos:end="189:30"><name pos:start="189:17" pos:end="189:21">errno</name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:30">EINVAL</name></expr>;</expr_stmt>

                <return pos:start="191:17" pos:end="191:26">return <expr pos:start="191:24" pos:end="191:25"><operator pos:start="191:24" pos:end="191:24">-</operator><literal type="number" pos:start="191:25" pos:end="191:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="197:13" pos:end="197:35"><expr pos:start="197:13" pos:end="197:34"><operator pos:start="197:13" pos:end="197:13">*</operator><name pos:start="197:14" pos:end="197:19">offset</name> <operator pos:start="197:21" pos:end="197:22">+=</operator> <name pos:start="197:24" pos:end="197:34"><name pos:start="197:24" pos:end="197:30">request</name><operator pos:start="197:31" pos:end="197:31">.</operator><name pos:start="197:32" pos:end="197:34">len</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="203:9" pos:end="205:22"><if pos:start="203:9" pos:end="205:22">if <condition pos:start="203:12" pos:end="203:48">(<expr pos:start="203:13" pos:end="203:47"><call pos:start="203:13" pos:end="203:41"><name pos:start="203:13" pos:end="203:26">nbd_send_reply</name><argument_list pos:start="203:27" pos:end="203:41">(<argument pos:start="203:28" pos:end="203:32"><expr pos:start="203:28" pos:end="203:32"><name pos:start="203:28" pos:end="203:32">csock</name></expr></argument>, <argument pos:start="203:35" pos:end="203:40"><expr pos:start="203:35" pos:end="203:40"><operator pos:start="203:35" pos:end="203:35">&amp;</operator><name pos:start="203:36" pos:end="203:40">reply</name></expr></argument>)</argument_list></call> <operator pos:start="203:43" pos:end="203:44">==</operator> <operator pos:start="203:46" pos:end="203:46">-</operator><literal type="number" pos:start="203:47" pos:end="203:47">1</literal></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="205:22"><block_content pos:start="205:13" pos:end="205:22">

            <return pos:start="205:13" pos:end="205:22">return <expr pos:start="205:20" pos:end="205:21"><operator pos:start="205:20" pos:end="205:20">-</operator><literal type="number" pos:start="205:21" pos:end="205:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="207:9" pos:end="207:14">break;</break>

    <case pos:start="209:5" pos:end="209:22">case <expr pos:start="209:10" pos:end="209:21"><name pos:start="209:10" pos:end="209:21">NBD_CMD_DISC</name></expr>:</case>

        <expr_stmt pos:start="211:9" pos:end="211:44"><expr pos:start="211:9" pos:end="211:43"><call pos:start="211:9" pos:end="211:43"><name pos:start="211:9" pos:end="211:13">TRACE</name><argument_list pos:start="211:14" pos:end="211:43">(<argument pos:start="211:15" pos:end="211:42"><expr pos:start="211:15" pos:end="211:42"><literal type="string" pos:start="211:15" pos:end="211:42">"Request type is DISCONNECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:18"><expr pos:start="213:9" pos:end="213:17"><name pos:start="213:9" pos:end="213:13">errno</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <literal type="number" pos:start="213:17" pos:end="213:17">0</literal></expr>;</expr_stmt>

        <return pos:start="215:9" pos:end="215:17">return <expr pos:start="215:16" pos:end="215:16"><literal type="number" pos:start="215:16" pos:end="215:16">1</literal></expr>;</return>

    <default pos:start="217:5" pos:end="217:12">default:</default>

        <expr_stmt pos:start="219:9" pos:end="219:64"><expr pos:start="219:9" pos:end="219:63"><call pos:start="219:9" pos:end="219:63"><name pos:start="219:9" pos:end="219:11">LOG</name><argument_list pos:start="219:12" pos:end="219:63">(<argument pos:start="219:13" pos:end="219:48"><expr pos:start="219:13" pos:end="219:48"><literal type="string" pos:start="219:13" pos:end="219:48">"invalid request type (%u) received"</literal></expr></argument>, <argument pos:start="219:51" pos:end="219:62"><expr pos:start="219:51" pos:end="219:62"><name pos:start="219:51" pos:end="219:62"><name pos:start="219:51" pos:end="219:57">request</name><operator pos:start="219:58" pos:end="219:58">.</operator><name pos:start="219:59" pos:end="219:62">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:23"><expr pos:start="221:9" pos:end="221:22"><name pos:start="221:9" pos:end="221:13">errno</name> <operator pos:start="221:15" pos:end="221:15">=</operator> <name pos:start="221:17" pos:end="221:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="223:9" pos:end="223:18">return <expr pos:start="223:16" pos:end="223:17"><operator pos:start="223:16" pos:end="223:16">-</operator><literal type="number" pos:start="223:17" pos:end="223:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="229:5" pos:end="229:36"><expr pos:start="229:5" pos:end="229:35"><call pos:start="229:5" pos:end="229:35"><name pos:start="229:5" pos:end="229:9">TRACE</name><argument_list pos:start="229:10" pos:end="229:35">(<argument pos:start="229:11" pos:end="229:34"><expr pos:start="229:11" pos:end="229:34"><literal type="string" pos:start="229:11" pos:end="229:34">"Request/Reply complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="233:5" pos:end="233:13">return <expr pos:start="233:12" pos:end="233:12"><literal type="number" pos:start="233:12" pos:end="233:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
