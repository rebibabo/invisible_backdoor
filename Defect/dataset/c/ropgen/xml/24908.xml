<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24908.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">pci_ivshmem_exit</name><parameter_list pos:start="1:29" pos:end="1:44">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:38">PCIDevice</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:29">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">IVShmemState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><call pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:29">IVSHMEM</name><argument_list pos:start="5:30" pos:end="5:34">(<argument pos:start="5:31" pos:end="5:33"><expr pos:start="5:31" pos:end="5:33"><name pos:start="5:31" pos:end="5:33">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:37"><expr pos:start="11:5" pos:end="11:36"><call pos:start="11:5" pos:end="11:36"><name pos:start="11:5" pos:end="11:17">fifo8_destroy</name><argument_list pos:start="11:18" pos:end="11:36">(<argument pos:start="11:19" pos:end="11:35"><expr pos:start="11:19" pos:end="11:35"><operator pos:start="11:19" pos:end="11:19">&amp;</operator><name pos:start="11:20" pos:end="11:35"><name pos:start="11:20" pos:end="11:20">s</name><operator pos:start="11:21" pos:end="11:22">-&gt;</operator><name pos:start="11:23" pos:end="11:35">incoming_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:29">(<expr pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:28">migration_blocker</name></name></expr>)</condition> <block pos:start="15:31" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:41">

        <expr_stmt pos:start="17:9" pos:end="17:50"><expr pos:start="17:9" pos:end="17:49"><call pos:start="17:9" pos:end="17:49"><name pos:start="17:9" pos:end="17:27">migrate_del_blocker</name><argument_list pos:start="17:28" pos:end="17:49">(<argument pos:start="17:29" pos:end="17:48"><expr pos:start="17:29" pos:end="17:48"><name pos:start="17:29" pos:end="17:48"><name pos:start="17:29" pos:end="17:29">s</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:48">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><call pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:18">error_free</name><argument_list pos:start="19:19" pos:end="19:40">(<argument pos:start="19:20" pos:end="19:39"><expr pos:start="19:20" pos:end="19:39"><name pos:start="19:20" pos:end="19:39"><name pos:start="19:20" pos:end="19:20">s</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:39">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="43:5"><if pos:start="25:5" pos:end="43:5">if <condition pos:start="25:8" pos:end="25:23">(<expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">shm_fd</name></name> <operator pos:start="25:19" pos:end="25:20">&gt;=</operator> <literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr>)</condition> <block pos:start="25:25" pos:end="43:5">{<block_content pos:start="27:9" pos:end="41:9">

        <decl_stmt pos:start="27:9" pos:end="27:60"><decl pos:start="27:9" pos:end="27:59"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:12">void</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:18">addr</name> <init pos:start="27:20" pos:end="27:59">= <expr pos:start="27:22" pos:end="27:59"><call pos:start="27:22" pos:end="27:59"><name pos:start="27:22" pos:end="27:46">memory_region_get_ram_ptr</name><argument_list pos:start="27:47" pos:end="27:59">(<argument pos:start="27:48" pos:end="27:58"><expr pos:start="27:48" pos:end="27:58"><operator pos:start="27:48" pos:end="27:48">&amp;</operator><name pos:start="27:49" pos:end="27:58"><name pos:start="27:49" pos:end="27:49">s</name><operator pos:start="27:50" pos:end="27:51">-&gt;</operator><name pos:start="27:52" pos:end="27:58">ivshmem</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:57"><expr pos:start="31:9" pos:end="31:56"><call pos:start="31:9" pos:end="31:56"><name pos:start="31:9" pos:end="31:30">vmstate_unregister_ram</name><argument_list pos:start="31:31" pos:end="31:56">(<argument pos:start="31:32" pos:end="31:42"><expr pos:start="31:32" pos:end="31:42"><operator pos:start="31:32" pos:end="31:32">&amp;</operator><name pos:start="31:33" pos:end="31:42"><name pos:start="31:33" pos:end="31:33">s</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:42">ivshmem</name></name></expr></argument>, <argument pos:start="31:45" pos:end="31:55"><expr pos:start="31:45" pos:end="31:55"><call pos:start="31:45" pos:end="31:55"><name pos:start="31:45" pos:end="31:50">DEVICE</name><argument_list pos:start="31:51" pos:end="31:55">(<argument pos:start="31:52" pos:end="31:54"><expr pos:start="31:52" pos:end="31:54"><name pos:start="31:52" pos:end="31:54">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:58"><expr pos:start="33:9" pos:end="33:57"><call pos:start="33:9" pos:end="33:57"><name pos:start="33:9" pos:end="33:35">memory_region_del_subregion</name><argument_list pos:start="33:36" pos:end="33:57">(<argument pos:start="33:37" pos:end="33:43"><expr pos:start="33:37" pos:end="33:43"><operator pos:start="33:37" pos:end="33:37">&amp;</operator><name pos:start="33:38" pos:end="33:43"><name pos:start="33:38" pos:end="33:38">s</name><operator pos:start="33:39" pos:end="33:40">-&gt;</operator><name pos:start="33:41" pos:end="33:43">bar</name></name></expr></argument>, <argument pos:start="33:46" pos:end="33:56"><expr pos:start="33:46" pos:end="33:56"><operator pos:start="33:46" pos:end="33:46">&amp;</operator><name pos:start="33:47" pos:end="33:56"><name pos:start="33:47" pos:end="33:47">s</name><operator pos:start="33:48" pos:end="33:49">-&gt;</operator><name pos:start="33:50" pos:end="33:56">ivshmem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:48">(<expr pos:start="37:13" pos:end="37:47"><call pos:start="37:13" pos:end="37:41"><name pos:start="37:13" pos:end="37:18">munmap</name><argument_list pos:start="37:19" pos:end="37:41">(<argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">addr</name></expr></argument>, <argument pos:start="37:26" pos:end="37:40"><expr pos:start="37:26" pos:end="37:40"><name pos:start="37:26" pos:end="37:40"><name pos:start="37:26" pos:end="37:26">s</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:40">ivshmem_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="37:43" pos:end="37:44">==</operator> <operator pos:start="37:46" pos:end="37:46">-</operator><literal type="number" pos:start="37:47" pos:end="37:47">1</literal></expr>)</condition> <block pos:start="37:50" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:79">

            <expr_stmt pos:start="39:13" pos:end="39:79"><expr pos:start="39:13" pos:end="39:78"><call pos:start="39:13" pos:end="39:78"><name pos:start="39:13" pos:end="39:24">error_report</name><argument_list pos:start="39:25" pos:end="39:78">(<argument pos:start="39:26" pos:end="39:60"><expr pos:start="39:26" pos:end="39:60"><literal type="string" pos:start="39:26" pos:end="39:60">"Failed to munmap shared memory %s"</literal></expr></argument>, <argument pos:start="39:63" pos:end="39:77"><expr pos:start="39:63" pos:end="39:77"><call pos:start="39:63" pos:end="39:77"><name pos:start="39:63" pos:end="39:70">strerror</name><argument_list pos:start="39:71" pos:end="39:77">(<argument pos:start="39:72" pos:end="39:76"><expr pos:start="39:72" pos:end="39:76"><name pos:start="39:72" pos:end="39:76">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="61:5">if <condition pos:start="47:8" pos:end="47:23">(<expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:22">eventfd_chr</name></name></expr>)</condition> <block pos:start="47:25" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:31">

        <for pos:start="49:9" pos:end="57:9">for <control pos:start="49:13" pos:end="49:40">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:35"><expr pos:start="49:21" pos:end="49:34"><name pos:start="49:21" pos:end="49:21">i</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <name pos:start="49:25" pos:end="49:34"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:34">vectors</name></name></expr>;</condition> <incr pos:start="49:37" pos:end="49:39"><expr pos:start="49:37" pos:end="49:39"><name pos:start="49:37" pos:end="49:37">i</name><operator pos:start="49:38" pos:end="49:39">++</operator></expr></incr>)</control> <block pos:start="49:42" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:13">

            <if_stmt pos:start="51:13" pos:end="55:13"><if pos:start="51:13" pos:end="55:13">if <condition pos:start="51:16" pos:end="51:34">(<expr pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:17">s</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:30">eventfd_chr</name><index pos:start="51:31" pos:end="51:33">[<expr pos:start="51:32" pos:end="51:32"><name pos:start="51:32" pos:end="51:32">i</name></expr>]</index></name></expr>)</condition> <block pos:start="51:36" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:49">

                <expr_stmt pos:start="53:17" pos:end="53:49"><expr pos:start="53:17" pos:end="53:48"><call pos:start="53:17" pos:end="53:48"><name pos:start="53:17" pos:end="53:29">qemu_chr_free</name><argument_list pos:start="53:30" pos:end="53:48">(<argument pos:start="53:31" pos:end="53:47"><expr pos:start="53:31" pos:end="53:47"><name pos:start="53:31" pos:end="53:47"><name pos:start="53:31" pos:end="53:31">s</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:44">eventfd_chr</name><index pos:start="53:45" pos:end="53:47">[<expr pos:start="53:46" pos:end="53:46"><name pos:start="53:46" pos:end="53:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="59:9" pos:end="59:31"><expr pos:start="59:9" pos:end="59:30"><call pos:start="59:9" pos:end="59:30"><name pos:start="59:9" pos:end="59:14">g_free</name><argument_list pos:start="59:15" pos:end="59:30">(<argument pos:start="59:16" pos:end="59:29"><expr pos:start="59:16" pos:end="59:29"><name pos:start="59:16" pos:end="59:29"><name pos:start="59:16" pos:end="59:16">s</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:29">eventfd_chr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="75:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:16">peers</name></name></expr>)</condition> <block pos:start="65:19" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:25">

        <for pos:start="67:9" pos:end="71:9">for <control pos:start="67:13" pos:end="67:41">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:36"><expr pos:start="67:21" pos:end="67:35"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <name pos:start="67:25" pos:end="67:35"><name pos:start="67:25" pos:end="67:25">s</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:35">nb_peers</name></name></expr>;</condition> <incr pos:start="67:38" pos:end="67:40"><expr pos:start="67:38" pos:end="67:40"><name pos:start="67:38" pos:end="67:38">i</name><operator pos:start="67:39" pos:end="67:40">++</operator></expr></incr>)</control> <block pos:start="67:43" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:38">

            <expr_stmt pos:start="69:13" pos:end="69:38"><expr pos:start="69:13" pos:end="69:37"><call pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:31">close_peer_eventfds</name><argument_list pos:start="69:32" pos:end="69:37">(<argument pos:start="69:33" pos:end="69:33"><expr pos:start="69:33" pos:end="69:33"><name pos:start="69:33" pos:end="69:33">s</name></expr></argument>, <argument pos:start="69:36" pos:end="69:36"><expr pos:start="69:36" pos:end="69:36"><name pos:start="69:36" pos:end="69:36">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="73:9" pos:end="73:25"><expr pos:start="73:9" pos:end="73:24"><call pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:14">g_free</name><argument_list pos:start="73:15" pos:end="73:24">(<argument pos:start="73:16" pos:end="73:23"><expr pos:start="73:16" pos:end="73:23"><name pos:start="73:16" pos:end="73:23"><name pos:start="73:16" pos:end="73:16">s</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:23">peers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:44">(<expr pos:start="79:9" pos:end="79:43"><call pos:start="79:9" pos:end="79:43"><name pos:start="79:9" pos:end="79:27">ivshmem_has_feature</name><argument_list pos:start="79:28" pos:end="79:43">(<argument pos:start="79:29" pos:end="79:29"><expr pos:start="79:29" pos:end="79:29"><name pos:start="79:29" pos:end="79:29">s</name></expr></argument>, <argument pos:start="79:32" pos:end="79:42"><expr pos:start="79:32" pos:end="79:42"><name pos:start="79:32" pos:end="79:42">IVSHMEM_MSI</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:46" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:39">

        <expr_stmt pos:start="81:9" pos:end="81:39"><expr pos:start="81:9" pos:end="81:38"><call pos:start="81:9" pos:end="81:38"><name pos:start="81:9" pos:end="81:33">msix_uninit_exclusive_bar</name><argument_list pos:start="81:34" pos:end="81:38">(<argument pos:start="81:35" pos:end="81:37"><expr pos:start="81:35" pos:end="81:37"><name pos:start="81:35" pos:end="81:37">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:29"><expr pos:start="87:5" pos:end="87:28"><call pos:start="87:5" pos:end="87:28"><name pos:start="87:5" pos:end="87:10">g_free</name><argument_list pos:start="87:11" pos:end="87:28">(<argument pos:start="87:12" pos:end="87:27"><expr pos:start="87:12" pos:end="87:27"><name pos:start="87:12" pos:end="87:27"><name pos:start="87:12" pos:end="87:12">s</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:27">eventfd_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
