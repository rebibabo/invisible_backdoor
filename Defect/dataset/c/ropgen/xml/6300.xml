<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6300.c" pos:tabs="8"><function pos:start="1:1" pos:end="5391:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">disas_sparc_insn</name><parameter_list pos:start="1:29" pos:end="1:66">(<parameter pos:start="1:30" pos:end="1:46"><decl pos:start="1:30" pos:end="1:46"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:41">DisasContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type> <name pos:start="1:45" pos:end="1:46">dc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:65"><decl pos:start="1:49" pos:end="1:65"><type pos:start="1:49" pos:end="1:65"><name pos:start="1:49" pos:end="1:56">unsigned</name> <name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:65">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="5391:1">{<block_content pos:start="5:5" pos:end="5389:5">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:20">opc</name></decl>, <decl pos:start="5:23" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:23" pos:end="5:25">rs1</name></decl>, <decl pos:start="5:28" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:28" pos:end="5:30">rs2</name></decl>, <decl pos:start="5:33" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:33" pos:end="5:34">rd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">TCGv</name></type> <name pos:start="7:10" pos:end="7:17">cpu_src1</name></decl>, <decl pos:start="7:20" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:20" pos:end="7:27">cpu_src2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">TCGv_i32</name></type> <name pos:start="9:14" pos:end="9:24">cpu_src1_32</name></decl>, <decl pos:start="9:27" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:27" pos:end="9:37">cpu_src2_32</name></decl>, <decl pos:start="9:40" pos:end="9:49"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:40" pos:end="9:49">cpu_dst_32</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGv_i64</name></type> <name pos:start="11:14" pos:end="11:24">cpu_src1_64</name></decl>, <decl pos:start="11:27" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:27" pos:end="11:37">cpu_src2_64</name></decl>, <decl pos:start="11:40" pos:end="11:49"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:40" pos:end="11:49">cpu_dst_64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">target_long</name></type> <name pos:start="13:17" pos:end="13:20">simm</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:72">(<expr pos:start="17:9" pos:end="17:71"><call pos:start="17:9" pos:end="17:71"><name pos:start="17:9" pos:end="17:16">unlikely</name><argument_list pos:start="17:17" pos:end="17:71">(<argument pos:start="17:18" pos:end="17:70"><expr pos:start="17:18" pos:end="17:70"><call pos:start="17:18" pos:end="17:70"><name pos:start="17:18" pos:end="17:35">qemu_loglevel_mask</name><argument_list pos:start="17:36" pos:end="17:70">(<argument pos:start="17:37" pos:end="17:69"><expr pos:start="17:37" pos:end="17:69"><name pos:start="17:37" pos:end="17:49">CPU_LOG_TB_OP</name> <operator pos:start="17:51" pos:end="17:51">|</operator> <name pos:start="17:53" pos:end="17:69">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:74" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:41">

        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><call pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:32">tcg_gen_debug_insn_start</name><argument_list pos:start="19:33" pos:end="19:40">(<argument pos:start="19:34" pos:end="19:39"><expr pos:start="19:34" pos:end="19:39"><name pos:start="19:34" pos:end="19:39"><name pos:start="19:34" pos:end="19:35">dc</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:7">opc</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:31"><name pos:start="25:11" pos:end="25:19">GET_FIELD</name><argument_list pos:start="25:20" pos:end="25:31">(<argument pos:start="25:21" pos:end="25:24"><expr pos:start="25:21" pos:end="25:24"><name pos:start="25:21" pos:end="25:24">insn</name></expr></argument>, <argument pos:start="25:27" pos:end="25:27"><expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">0</literal></expr></argument>, <argument pos:start="25:30" pos:end="25:30"><expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:6">rd</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:30"><name pos:start="29:10" pos:end="29:18">GET_FIELD</name><argument_list pos:start="29:19" pos:end="29:30">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">insn</name></expr></argument>, <argument pos:start="29:26" pos:end="29:26"><expr pos:start="29:26" pos:end="29:26"><literal type="number" pos:start="29:26" pos:end="29:26">2</literal></expr></argument>, <argument pos:start="29:29" pos:end="29:29"><expr pos:start="29:29" pos:end="29:29"><literal type="number" pos:start="29:29" pos:end="29:29">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="33:5" pos:end="5211:5">switch <condition pos:start="33:12" pos:end="33:16">(<expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">opc</name></expr>)</condition> <block pos:start="33:18" pos:end="5211:5">{<block_content pos:start="35:5" pos:end="5209:14">

    <case pos:start="35:5" pos:end="35:11">case <expr pos:start="35:10" pos:end="35:10"><literal type="number" pos:start="35:10" pos:end="35:10">0</literal></expr>:</case>                     <comment type="block" pos:start="35:33" pos:end="35:52">/* branches/sethi */</comment>

        <block pos:start="37:9" pos:end="201:9">{<block_content pos:start="39:13" pos:end="199:18">

            <decl_stmt pos:start="39:13" pos:end="39:53"><decl pos:start="39:13" pos:end="39:52"><type pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:20">unsigned</name> <name pos:start="39:22" pos:end="39:24">int</name></type> <name pos:start="39:26" pos:end="39:28">xop</name> <init pos:start="39:30" pos:end="39:52">= <expr pos:start="39:32" pos:end="39:52"><call pos:start="39:32" pos:end="39:52"><name pos:start="39:32" pos:end="39:40">GET_FIELD</name><argument_list pos:start="39:41" pos:end="39:52">(<argument pos:start="39:42" pos:end="39:45"><expr pos:start="39:42" pos:end="39:45"><name pos:start="39:42" pos:end="39:45">insn</name></expr></argument>, <argument pos:start="39:48" pos:end="39:48"><expr pos:start="39:48" pos:end="39:48"><literal type="number" pos:start="39:48" pos:end="39:48">7</literal></expr></argument>, <argument pos:start="39:51" pos:end="39:51"><expr pos:start="39:51" pos:end="39:51"><literal type="number" pos:start="39:51" pos:end="39:51">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="41:13" pos:end="41:27"><decl pos:start="41:13" pos:end="41:26"><type pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:19">int32_t</name></type> <name pos:start="41:21" pos:end="41:26">target</name></decl>;</decl_stmt>

            <switch pos:start="43:13" pos:end="197:13">switch <condition pos:start="43:20" pos:end="43:24">(<expr pos:start="43:21" pos:end="43:23"><name pos:start="43:21" pos:end="43:23">xop</name></expr>)</condition> <block pos:start="43:26" pos:end="197:13">{<block_content pos:start="47:13" pos:end="195:34">

<cpp:ifdef pos:start="45:1" pos:end="45:21">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:21">TARGET_SPARC64</name></cpp:ifdef>

            <case pos:start="47:13" pos:end="47:21">case <expr pos:start="47:18" pos:end="47:20"><literal type="number" pos:start="47:18" pos:end="47:20">0x1</literal></expr>:</case>           <comment type="block" pos:start="47:33" pos:end="47:45">/* V9 BPcc */</comment>

                <block pos:start="49:17" pos:end="77:17">{<block_content pos:start="51:21" pos:end="75:34">

                    <decl_stmt pos:start="51:21" pos:end="51:27"><decl pos:start="51:21" pos:end="51:26"><type pos:start="51:21" pos:end="51:23"><name pos:start="51:21" pos:end="51:23">int</name></type> <name pos:start="51:25" pos:end="51:26">cc</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="55:21" pos:end="55:55"><expr pos:start="55:21" pos:end="55:54"><name pos:start="55:21" pos:end="55:26">target</name> <operator pos:start="55:28" pos:end="55:28">=</operator> <call pos:start="55:30" pos:end="55:54"><name pos:start="55:30" pos:end="55:41">GET_FIELD_SP</name><argument_list pos:start="55:42" pos:end="55:54">(<argument pos:start="55:43" pos:end="55:46"><expr pos:start="55:43" pos:end="55:46"><name pos:start="55:43" pos:end="55:46">insn</name></expr></argument>, <argument pos:start="55:49" pos:end="55:49"><expr pos:start="55:49" pos:end="55:49"><literal type="number" pos:start="55:49" pos:end="55:49">0</literal></expr></argument>, <argument pos:start="55:52" pos:end="55:53"><expr pos:start="55:52" pos:end="55:53"><literal type="number" pos:start="55:52" pos:end="55:53">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:53"><expr pos:start="57:21" pos:end="57:52"><name pos:start="57:21" pos:end="57:26">target</name> <operator pos:start="57:28" pos:end="57:28">=</operator> <call pos:start="57:30" pos:end="57:52"><name pos:start="57:30" pos:end="57:40">sign_extend</name><argument_list pos:start="57:41" pos:end="57:52">(<argument pos:start="57:42" pos:end="57:47"><expr pos:start="57:42" pos:end="57:47"><name pos:start="57:42" pos:end="57:47">target</name></expr></argument>, <argument pos:start="57:50" pos:end="57:51"><expr pos:start="57:50" pos:end="57:51"><literal type="number" pos:start="57:50" pos:end="57:51">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="59:21" pos:end="59:33"><expr pos:start="59:21" pos:end="59:32"><name pos:start="59:21" pos:end="59:26">target</name> <operator pos:start="59:28" pos:end="59:30">&lt;&lt;=</operator> <literal type="number" pos:start="59:32" pos:end="59:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="61:21" pos:end="61:52"><expr pos:start="61:21" pos:end="61:51"><name pos:start="61:21" pos:end="61:22">cc</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <call pos:start="61:26" pos:end="61:51"><name pos:start="61:26" pos:end="61:37">GET_FIELD_SP</name><argument_list pos:start="61:38" pos:end="61:51">(<argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><name pos:start="61:39" pos:end="61:42">insn</name></expr></argument>, <argument pos:start="61:45" pos:end="61:46"><expr pos:start="61:45" pos:end="61:46"><literal type="number" pos:start="61:45" pos:end="61:46">20</literal></expr></argument>, <argument pos:start="61:49" pos:end="61:50"><expr pos:start="61:49" pos:end="61:50"><literal type="number" pos:start="61:49" pos:end="61:50">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="63:21" pos:end="73:42"><if pos:start="63:21" pos:end="65:55">if <condition pos:start="63:24" pos:end="63:32">(<expr pos:start="63:25" pos:end="63:31"><name pos:start="63:25" pos:end="63:26">cc</name> <operator pos:start="63:28" pos:end="63:29">==</operator> <literal type="number" pos:start="63:31" pos:end="63:31">0</literal></expr>)</condition><block type="pseudo" pos:start="65:25" pos:end="65:55"><block_content pos:start="65:25" pos:end="65:55">

                        <expr_stmt pos:start="65:25" pos:end="65:55"><expr pos:start="65:25" pos:end="65:54"><call pos:start="65:25" pos:end="65:54"><name pos:start="65:25" pos:end="65:33">do_branch</name><argument_list pos:start="65:34" pos:end="65:54">(<argument pos:start="65:35" pos:end="65:36"><expr pos:start="65:35" pos:end="65:36"><name pos:start="65:35" pos:end="65:36">dc</name></expr></argument>, <argument pos:start="65:39" pos:end="65:44"><expr pos:start="65:39" pos:end="65:44"><name pos:start="65:39" pos:end="65:44">target</name></expr></argument>, <argument pos:start="65:47" pos:end="65:50"><expr pos:start="65:47" pos:end="65:50"><name pos:start="65:47" pos:end="65:50">insn</name></expr></argument>, <argument pos:start="65:53" pos:end="65:53"><expr pos:start="65:53" pos:end="65:53"><literal type="number" pos:start="65:53" pos:end="65:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="67:21" pos:end="69:55">else if <condition pos:start="67:29" pos:end="67:37">(<expr pos:start="67:30" pos:end="67:36"><name pos:start="67:30" pos:end="67:31">cc</name> <operator pos:start="67:33" pos:end="67:34">==</operator> <literal type="number" pos:start="67:36" pos:end="67:36">2</literal></expr>)</condition><block type="pseudo" pos:start="69:25" pos:end="69:55"><block_content pos:start="69:25" pos:end="69:55">

                        <expr_stmt pos:start="69:25" pos:end="69:55"><expr pos:start="69:25" pos:end="69:54"><call pos:start="69:25" pos:end="69:54"><name pos:start="69:25" pos:end="69:33">do_branch</name><argument_list pos:start="69:34" pos:end="69:54">(<argument pos:start="69:35" pos:end="69:36"><expr pos:start="69:35" pos:end="69:36"><name pos:start="69:35" pos:end="69:36">dc</name></expr></argument>, <argument pos:start="69:39" pos:end="69:44"><expr pos:start="69:39" pos:end="69:44"><name pos:start="69:39" pos:end="69:44">target</name></expr></argument>, <argument pos:start="69:47" pos:end="69:50"><expr pos:start="69:47" pos:end="69:50"><name pos:start="69:47" pos:end="69:50">insn</name></expr></argument>, <argument pos:start="69:53" pos:end="69:53"><expr pos:start="69:53" pos:end="69:53"><literal type="number" pos:start="69:53" pos:end="69:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="71:21" pos:end="73:42">else<block type="pseudo" pos:start="73:25" pos:end="73:42"><block_content pos:start="73:25" pos:end="73:42">

                        <goto pos:start="73:25" pos:end="73:42">goto <name pos:start="73:30" pos:end="73:41">illegal_insn</name>;</goto></block_content></block></else></if_stmt>

                    <goto pos:start="75:21" pos:end="75:34">goto <name pos:start="75:26" pos:end="75:33">jmp_insn</name>;</goto>

                </block_content>}</block>

            <case pos:start="79:13" pos:end="79:21">case <expr pos:start="79:18" pos:end="79:20"><literal type="number" pos:start="79:18" pos:end="79:20">0x3</literal></expr>:</case>           <comment type="block" pos:start="79:33" pos:end="79:44">/* V9 BPr */</comment>

                <block pos:start="81:17" pos:end="97:17">{<block_content pos:start="83:21" pos:end="95:34">

                    <expr_stmt pos:start="83:21" pos:end="85:59"><expr pos:start="83:21" pos:end="85:58"><name pos:start="83:21" pos:end="83:26">target</name> <operator pos:start="83:28" pos:end="83:28">=</operator> <call pos:start="83:30" pos:end="83:54"><name pos:start="83:30" pos:end="83:41">GET_FIELD_SP</name><argument_list pos:start="83:42" pos:end="83:54">(<argument pos:start="83:43" pos:end="83:46"><expr pos:start="83:43" pos:end="83:46"><name pos:start="83:43" pos:end="83:46">insn</name></expr></argument>, <argument pos:start="83:49" pos:end="83:49"><expr pos:start="83:49" pos:end="83:49"><literal type="number" pos:start="83:49" pos:end="83:49">0</literal></expr></argument>, <argument pos:start="83:52" pos:end="83:53"><expr pos:start="83:52" pos:end="83:53"><literal type="number" pos:start="83:52" pos:end="83:53">13</literal></expr></argument>)</argument_list></call> <operator pos:start="83:56" pos:end="83:56">|</operator>

                        <operator pos:start="85:25" pos:end="85:25">(</operator><call pos:start="85:26" pos:end="85:51"><name pos:start="85:26" pos:end="85:37">GET_FIELD_SP</name><argument_list pos:start="85:38" pos:end="85:51">(<argument pos:start="85:39" pos:end="85:42"><expr pos:start="85:39" pos:end="85:42"><name pos:start="85:39" pos:end="85:42">insn</name></expr></argument>, <argument pos:start="85:45" pos:end="85:46"><expr pos:start="85:45" pos:end="85:46"><literal type="number" pos:start="85:45" pos:end="85:46">20</literal></expr></argument>, <argument pos:start="85:49" pos:end="85:50"><expr pos:start="85:49" pos:end="85:50"><literal type="number" pos:start="85:49" pos:end="85:50">21</literal></expr></argument>)</argument_list></call> <operator pos:start="85:53" pos:end="85:54">&lt;&lt;</operator> <literal type="number" pos:start="85:56" pos:end="85:57">14</literal><operator pos:start="85:58" pos:end="85:58">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:53"><expr pos:start="87:21" pos:end="87:52"><name pos:start="87:21" pos:end="87:26">target</name> <operator pos:start="87:28" pos:end="87:28">=</operator> <call pos:start="87:30" pos:end="87:52"><name pos:start="87:30" pos:end="87:40">sign_extend</name><argument_list pos:start="87:41" pos:end="87:52">(<argument pos:start="87:42" pos:end="87:47"><expr pos:start="87:42" pos:end="87:47"><name pos:start="87:42" pos:end="87:47">target</name></expr></argument>, <argument pos:start="87:50" pos:end="87:51"><expr pos:start="87:50" pos:end="87:51"><literal type="number" pos:start="87:50" pos:end="87:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="89:21" pos:end="89:33"><expr pos:start="89:21" pos:end="89:32"><name pos:start="89:21" pos:end="89:26">target</name> <operator pos:start="89:28" pos:end="89:30">&lt;&lt;=</operator> <literal type="number" pos:start="89:32" pos:end="89:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:50"><expr pos:start="91:21" pos:end="91:49"><name pos:start="91:21" pos:end="91:28">cpu_src1</name> <operator pos:start="91:30" pos:end="91:30">=</operator> <call pos:start="91:32" pos:end="91:49"><name pos:start="91:32" pos:end="91:39">get_src1</name><argument_list pos:start="91:40" pos:end="91:49">(<argument pos:start="91:41" pos:end="91:42"><expr pos:start="91:41" pos:end="91:42"><name pos:start="91:41" pos:end="91:42">dc</name></expr></argument>, <argument pos:start="91:45" pos:end="91:48"><expr pos:start="91:45" pos:end="91:48"><name pos:start="91:45" pos:end="91:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:62"><expr pos:start="93:21" pos:end="93:61"><call pos:start="93:21" pos:end="93:61"><name pos:start="93:21" pos:end="93:33">do_branch_reg</name><argument_list pos:start="93:34" pos:end="93:61">(<argument pos:start="93:35" pos:end="93:36"><expr pos:start="93:35" pos:end="93:36"><name pos:start="93:35" pos:end="93:36">dc</name></expr></argument>, <argument pos:start="93:39" pos:end="93:44"><expr pos:start="93:39" pos:end="93:44"><name pos:start="93:39" pos:end="93:44">target</name></expr></argument>, <argument pos:start="93:47" pos:end="93:50"><expr pos:start="93:47" pos:end="93:50"><name pos:start="93:47" pos:end="93:50">insn</name></expr></argument>, <argument pos:start="93:53" pos:end="93:60"><expr pos:start="93:53" pos:end="93:60"><name pos:start="93:53" pos:end="93:60">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="95:21" pos:end="95:34">goto <name pos:start="95:26" pos:end="95:33">jmp_insn</name>;</goto>

                </block_content>}</block>

            <case pos:start="99:13" pos:end="99:21">case <expr pos:start="99:18" pos:end="99:20"><literal type="number" pos:start="99:18" pos:end="99:20">0x5</literal></expr>:</case>           <comment type="block" pos:start="99:33" pos:end="99:46">/* V9 FBPcc */</comment>

                <block pos:start="101:17" pos:end="124:0">{<block_content pos:start="103:21" pos:end="119:34">

                    <decl_stmt pos:start="103:21" pos:end="103:56"><decl pos:start="103:21" pos:end="103:55"><type pos:start="103:21" pos:end="103:23"><name pos:start="103:21" pos:end="103:23">int</name></type> <name pos:start="103:25" pos:end="103:26">cc</name> <init pos:start="103:28" pos:end="103:55">= <expr pos:start="103:30" pos:end="103:55"><call pos:start="103:30" pos:end="103:55"><name pos:start="103:30" pos:end="103:41">GET_FIELD_SP</name><argument_list pos:start="103:42" pos:end="103:55">(<argument pos:start="103:43" pos:end="103:46"><expr pos:start="103:43" pos:end="103:46"><name pos:start="103:43" pos:end="103:46">insn</name></expr></argument>, <argument pos:start="103:49" pos:end="103:50"><expr pos:start="103:49" pos:end="103:50"><literal type="number" pos:start="103:49" pos:end="103:50">20</literal></expr></argument>, <argument pos:start="103:53" pos:end="103:54"><expr pos:start="103:53" pos:end="103:54"><literal type="number" pos:start="103:53" pos:end="103:54">21</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="105:21" pos:end="109:21"><if pos:start="105:21" pos:end="109:21">if <condition pos:start="105:24" pos:end="105:45">(<expr pos:start="105:25" pos:end="105:44"><call pos:start="105:25" pos:end="105:44"><name pos:start="105:25" pos:end="105:40">gen_trap_ifnofpu</name><argument_list pos:start="105:41" pos:end="105:44">(<argument pos:start="105:42" pos:end="105:43"><expr pos:start="105:42" pos:end="105:43"><name pos:start="105:42" pos:end="105:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:47" pos:end="109:21">{<block_content pos:start="107:25" pos:end="107:38">

                        <goto pos:start="107:25" pos:end="107:38">goto <name pos:start="107:30" pos:end="107:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="111:21" pos:end="111:55"><expr pos:start="111:21" pos:end="111:54"><name pos:start="111:21" pos:end="111:26">target</name> <operator pos:start="111:28" pos:end="111:28">=</operator> <call pos:start="111:30" pos:end="111:54"><name pos:start="111:30" pos:end="111:41">GET_FIELD_SP</name><argument_list pos:start="111:42" pos:end="111:54">(<argument pos:start="111:43" pos:end="111:46"><expr pos:start="111:43" pos:end="111:46"><name pos:start="111:43" pos:end="111:46">insn</name></expr></argument>, <argument pos:start="111:49" pos:end="111:49"><expr pos:start="111:49" pos:end="111:49"><literal type="number" pos:start="111:49" pos:end="111:49">0</literal></expr></argument>, <argument pos:start="111:52" pos:end="111:53"><expr pos:start="111:52" pos:end="111:53"><literal type="number" pos:start="111:52" pos:end="111:53">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="113:21" pos:end="113:53"><expr pos:start="113:21" pos:end="113:52"><name pos:start="113:21" pos:end="113:26">target</name> <operator pos:start="113:28" pos:end="113:28">=</operator> <call pos:start="113:30" pos:end="113:52"><name pos:start="113:30" pos:end="113:40">sign_extend</name><argument_list pos:start="113:41" pos:end="113:52">(<argument pos:start="113:42" pos:end="113:47"><expr pos:start="113:42" pos:end="113:47"><name pos:start="113:42" pos:end="113:47">target</name></expr></argument>, <argument pos:start="113:50" pos:end="113:51"><expr pos:start="113:50" pos:end="113:51"><literal type="number" pos:start="113:50" pos:end="113:51">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:33"><expr pos:start="115:21" pos:end="115:32"><name pos:start="115:21" pos:end="115:26">target</name> <operator pos:start="115:28" pos:end="115:30">&lt;&lt;=</operator> <literal type="number" pos:start="115:32" pos:end="115:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:53"><expr pos:start="117:21" pos:end="117:52"><call pos:start="117:21" pos:end="117:52"><name pos:start="117:21" pos:end="117:30">do_fbranch</name><argument_list pos:start="117:31" pos:end="117:52">(<argument pos:start="117:32" pos:end="117:33"><expr pos:start="117:32" pos:end="117:33"><name pos:start="117:32" pos:end="117:33">dc</name></expr></argument>, <argument pos:start="117:36" pos:end="117:41"><expr pos:start="117:36" pos:end="117:41"><name pos:start="117:36" pos:end="117:41">target</name></expr></argument>, <argument pos:start="117:44" pos:end="117:47"><expr pos:start="117:44" pos:end="117:47"><name pos:start="117:44" pos:end="117:47">insn</name></expr></argument>, <argument pos:start="117:50" pos:end="117:51"><expr pos:start="117:50" pos:end="117:51"><name pos:start="117:50" pos:end="117:51">cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="119:21" pos:end="119:34">goto <name pos:start="119:26" pos:end="119:33">jmp_insn</name>;</goto>

                </block_content>}</block>

<cpp:else pos:start="123:1" pos:end="123:5">#<cpp:directive pos:start="123:2" pos:end="123:5">else</cpp:directive></cpp:else>

            <case pos:start="125:13" pos:end="125:21">case <expr pos:start="125:18" pos:end="125:20"><literal type="number" pos:start="125:18" pos:end="125:20">0x7</literal></expr>:</case>           <comment type="block" pos:start="125:33" pos:end="125:43">/* CBN+x */</comment>

                <block pos:start="127:17" pos:end="134:0">{<block_content pos:start="129:21" pos:end="129:34">

                    <goto pos:start="129:21" pos:end="129:34">goto <name pos:start="129:26" pos:end="129:33">ncp_insn</name>;</goto>

                </block_content>}</block>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

            <case pos:start="135:13" pos:end="135:21">case <expr pos:start="135:18" pos:end="135:20"><literal type="number" pos:start="135:18" pos:end="135:20">0x2</literal></expr>:</case>           <comment type="block" pos:start="135:33" pos:end="135:42">/* BN+x */</comment>

                <block pos:start="137:17" pos:end="149:17">{<block_content pos:start="139:21" pos:end="147:34">

                    <expr_stmt pos:start="139:21" pos:end="139:53"><expr pos:start="139:21" pos:end="139:52"><name pos:start="139:21" pos:end="139:26">target</name> <operator pos:start="139:28" pos:end="139:28">=</operator> <call pos:start="139:30" pos:end="139:52"><name pos:start="139:30" pos:end="139:38">GET_FIELD</name><argument_list pos:start="139:39" pos:end="139:52">(<argument pos:start="139:40" pos:end="139:43"><expr pos:start="139:40" pos:end="139:43"><name pos:start="139:40" pos:end="139:43">insn</name></expr></argument>, <argument pos:start="139:46" pos:end="139:47"><expr pos:start="139:46" pos:end="139:47"><literal type="number" pos:start="139:46" pos:end="139:47">10</literal></expr></argument>, <argument pos:start="139:50" pos:end="139:51"><expr pos:start="139:50" pos:end="139:51"><literal type="number" pos:start="139:50" pos:end="139:51">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="141:21" pos:end="141:53"><expr pos:start="141:21" pos:end="141:52"><name pos:start="141:21" pos:end="141:26">target</name> <operator pos:start="141:28" pos:end="141:28">=</operator> <call pos:start="141:30" pos:end="141:52"><name pos:start="141:30" pos:end="141:40">sign_extend</name><argument_list pos:start="141:41" pos:end="141:52">(<argument pos:start="141:42" pos:end="141:47"><expr pos:start="141:42" pos:end="141:47"><name pos:start="141:42" pos:end="141:47">target</name></expr></argument>, <argument pos:start="141:50" pos:end="141:51"><expr pos:start="141:50" pos:end="141:51"><literal type="number" pos:start="141:50" pos:end="141:51">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="143:21" pos:end="143:33"><expr pos:start="143:21" pos:end="143:32"><name pos:start="143:21" pos:end="143:26">target</name> <operator pos:start="143:28" pos:end="143:30">&lt;&lt;=</operator> <literal type="number" pos:start="143:32" pos:end="143:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="145:21" pos:end="145:51"><expr pos:start="145:21" pos:end="145:50"><call pos:start="145:21" pos:end="145:50"><name pos:start="145:21" pos:end="145:29">do_branch</name><argument_list pos:start="145:30" pos:end="145:50">(<argument pos:start="145:31" pos:end="145:32"><expr pos:start="145:31" pos:end="145:32"><name pos:start="145:31" pos:end="145:32">dc</name></expr></argument>, <argument pos:start="145:35" pos:end="145:40"><expr pos:start="145:35" pos:end="145:40"><name pos:start="145:35" pos:end="145:40">target</name></expr></argument>, <argument pos:start="145:43" pos:end="145:46"><expr pos:start="145:43" pos:end="145:46"><name pos:start="145:43" pos:end="145:46">insn</name></expr></argument>, <argument pos:start="145:49" pos:end="145:49"><expr pos:start="145:49" pos:end="145:49"><literal type="number" pos:start="145:49" pos:end="145:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="147:21" pos:end="147:34">goto <name pos:start="147:26" pos:end="147:33">jmp_insn</name>;</goto>

                </block_content>}</block>

            <case pos:start="151:13" pos:end="151:21">case <expr pos:start="151:18" pos:end="151:20"><literal type="number" pos:start="151:18" pos:end="151:20">0x6</literal></expr>:</case>           <comment type="block" pos:start="151:33" pos:end="151:43">/* FBN+x */</comment>

                <block pos:start="153:17" pos:end="171:17">{<block_content pos:start="155:21" pos:end="169:34">

                    <if_stmt pos:start="155:21" pos:end="159:21"><if pos:start="155:21" pos:end="159:21">if <condition pos:start="155:24" pos:end="155:45">(<expr pos:start="155:25" pos:end="155:44"><call pos:start="155:25" pos:end="155:44"><name pos:start="155:25" pos:end="155:40">gen_trap_ifnofpu</name><argument_list pos:start="155:41" pos:end="155:44">(<argument pos:start="155:42" pos:end="155:43"><expr pos:start="155:42" pos:end="155:43"><name pos:start="155:42" pos:end="155:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:47" pos:end="159:21">{<block_content pos:start="157:25" pos:end="157:38">

                        <goto pos:start="157:25" pos:end="157:38">goto <name pos:start="157:30" pos:end="157:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="161:21" pos:end="161:53"><expr pos:start="161:21" pos:end="161:52"><name pos:start="161:21" pos:end="161:26">target</name> <operator pos:start="161:28" pos:end="161:28">=</operator> <call pos:start="161:30" pos:end="161:52"><name pos:start="161:30" pos:end="161:38">GET_FIELD</name><argument_list pos:start="161:39" pos:end="161:52">(<argument pos:start="161:40" pos:end="161:43"><expr pos:start="161:40" pos:end="161:43"><name pos:start="161:40" pos:end="161:43">insn</name></expr></argument>, <argument pos:start="161:46" pos:end="161:47"><expr pos:start="161:46" pos:end="161:47"><literal type="number" pos:start="161:46" pos:end="161:47">10</literal></expr></argument>, <argument pos:start="161:50" pos:end="161:51"><expr pos:start="161:50" pos:end="161:51"><literal type="number" pos:start="161:50" pos:end="161:51">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="163:21" pos:end="163:53"><expr pos:start="163:21" pos:end="163:52"><name pos:start="163:21" pos:end="163:26">target</name> <operator pos:start="163:28" pos:end="163:28">=</operator> <call pos:start="163:30" pos:end="163:52"><name pos:start="163:30" pos:end="163:40">sign_extend</name><argument_list pos:start="163:41" pos:end="163:52">(<argument pos:start="163:42" pos:end="163:47"><expr pos:start="163:42" pos:end="163:47"><name pos:start="163:42" pos:end="163:47">target</name></expr></argument>, <argument pos:start="163:50" pos:end="163:51"><expr pos:start="163:50" pos:end="163:51"><literal type="number" pos:start="163:50" pos:end="163:51">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="165:21" pos:end="165:33"><expr pos:start="165:21" pos:end="165:32"><name pos:start="165:21" pos:end="165:26">target</name> <operator pos:start="165:28" pos:end="165:30">&lt;&lt;=</operator> <literal type="number" pos:start="165:32" pos:end="165:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="167:21" pos:end="167:52"><expr pos:start="167:21" pos:end="167:51"><call pos:start="167:21" pos:end="167:51"><name pos:start="167:21" pos:end="167:30">do_fbranch</name><argument_list pos:start="167:31" pos:end="167:51">(<argument pos:start="167:32" pos:end="167:33"><expr pos:start="167:32" pos:end="167:33"><name pos:start="167:32" pos:end="167:33">dc</name></expr></argument>, <argument pos:start="167:36" pos:end="167:41"><expr pos:start="167:36" pos:end="167:41"><name pos:start="167:36" pos:end="167:41">target</name></expr></argument>, <argument pos:start="167:44" pos:end="167:47"><expr pos:start="167:44" pos:end="167:47"><name pos:start="167:44" pos:end="167:47">insn</name></expr></argument>, <argument pos:start="167:50" pos:end="167:50"><expr pos:start="167:50" pos:end="167:50"><literal type="number" pos:start="167:50" pos:end="167:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="169:21" pos:end="169:34">goto <name pos:start="169:26" pos:end="169:33">jmp_insn</name>;</goto>

                </block_content>}</block>

            <case pos:start="173:13" pos:end="173:21">case <expr pos:start="173:18" pos:end="173:20"><literal type="number" pos:start="173:18" pos:end="173:20">0x4</literal></expr>:</case>           <comment type="block" pos:start="173:33" pos:end="173:43">/* SETHI */</comment>

                <comment type="block" pos:start="175:17" pos:end="175:73">/* Special-case %g0 because that's the canonical nop.  */</comment>

                <if_stmt pos:start="177:17" pos:end="187:17"><if pos:start="177:17" pos:end="187:17">if <condition pos:start="177:20" pos:end="177:23">(<expr pos:start="177:21" pos:end="177:22"><name pos:start="177:21" pos:end="177:22">rd</name></expr>)</condition> <block pos:start="177:25" pos:end="187:17">{<block_content pos:start="179:21" pos:end="185:45">

                    <decl_stmt pos:start="179:21" pos:end="179:61"><decl pos:start="179:21" pos:end="179:60"><type pos:start="179:21" pos:end="179:28"><name pos:start="179:21" pos:end="179:28">uint32_t</name></type> <name pos:start="179:30" pos:end="179:34">value</name> <init pos:start="179:36" pos:end="179:60">= <expr pos:start="179:38" pos:end="179:60"><call pos:start="179:38" pos:end="179:60"><name pos:start="179:38" pos:end="179:46">GET_FIELD</name><argument_list pos:start="179:47" pos:end="179:60">(<argument pos:start="179:48" pos:end="179:51"><expr pos:start="179:48" pos:end="179:51"><name pos:start="179:48" pos:end="179:51">insn</name></expr></argument>, <argument pos:start="179:54" pos:end="179:55"><expr pos:start="179:54" pos:end="179:55"><literal type="number" pos:start="179:54" pos:end="179:55">10</literal></expr></argument>, <argument pos:start="179:58" pos:end="179:59"><expr pos:start="179:58" pos:end="179:59"><literal type="number" pos:start="179:58" pos:end="179:59">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="181:21" pos:end="181:50"><decl pos:start="181:21" pos:end="181:49"><type pos:start="181:21" pos:end="181:24"><name pos:start="181:21" pos:end="181:24">TCGv</name></type> <name pos:start="181:26" pos:end="181:26">t</name> <init pos:start="181:28" pos:end="181:49">= <expr pos:start="181:30" pos:end="181:49"><call pos:start="181:30" pos:end="181:49"><name pos:start="181:30" pos:end="181:41">gen_dest_gpr</name><argument_list pos:start="181:42" pos:end="181:49">(<argument pos:start="181:43" pos:end="181:44"><expr pos:start="181:43" pos:end="181:44"><name pos:start="181:43" pos:end="181:44">dc</name></expr></argument>, <argument pos:start="181:47" pos:end="181:48"><expr pos:start="181:47" pos:end="181:48"><name pos:start="181:47" pos:end="181:48">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="183:21" pos:end="183:52"><expr pos:start="183:21" pos:end="183:51"><call pos:start="183:21" pos:end="183:51"><name pos:start="183:21" pos:end="183:35">tcg_gen_movi_tl</name><argument_list pos:start="183:36" pos:end="183:51">(<argument pos:start="183:37" pos:end="183:37"><expr pos:start="183:37" pos:end="183:37"><name pos:start="183:37" pos:end="183:37">t</name></expr></argument>, <argument pos:start="183:40" pos:end="183:50"><expr pos:start="183:40" pos:end="183:50"><name pos:start="183:40" pos:end="183:44">value</name> <operator pos:start="183:46" pos:end="183:47">&lt;&lt;</operator> <literal type="number" pos:start="183:49" pos:end="183:50">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:45"><expr pos:start="185:21" pos:end="185:44"><call pos:start="185:21" pos:end="185:44"><name pos:start="185:21" pos:end="185:33">gen_store_gpr</name><argument_list pos:start="185:34" pos:end="185:44">(<argument pos:start="185:35" pos:end="185:36"><expr pos:start="185:35" pos:end="185:36"><name pos:start="185:35" pos:end="185:36">dc</name></expr></argument>, <argument pos:start="185:39" pos:end="185:40"><expr pos:start="185:39" pos:end="185:40"><name pos:start="185:39" pos:end="185:40">rd</name></expr></argument>, <argument pos:start="185:43" pos:end="185:43"><expr pos:start="185:43" pos:end="185:43"><name pos:start="185:43" pos:end="185:43">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="189:17" pos:end="189:22">break;</break>

            <case pos:start="191:13" pos:end="191:21">case <expr pos:start="191:18" pos:end="191:20"><literal type="number" pos:start="191:18" pos:end="191:20">0x0</literal></expr>:</case>           <comment type="block" pos:start="191:33" pos:end="191:44">/* UNIMPL */</comment>

            <default pos:start="193:13" pos:end="193:20">default:</default>

                <goto pos:start="195:17" pos:end="195:34">goto <name pos:start="195:22" pos:end="195:33">illegal_insn</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="199:13" pos:end="199:18">break;</break>

        </block_content>}</block>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    <case pos:start="205:5" pos:end="205:11">case <expr pos:start="205:10" pos:end="205:10"><literal type="number" pos:start="205:10" pos:end="205:10">1</literal></expr>:</case>                     <comment type="block" pos:start="205:33" pos:end="205:40">/*CALL*/</comment>

        <block pos:start="207:9" pos:end="235:9">{<block_content pos:start="209:13" pos:end="233:29">

            <decl_stmt pos:start="209:13" pos:end="209:62"><decl pos:start="209:13" pos:end="209:61"><type pos:start="209:13" pos:end="209:23"><name pos:start="209:13" pos:end="209:23">target_long</name></type> <name pos:start="209:25" pos:end="209:30">target</name> <init pos:start="209:32" pos:end="209:61">= <expr pos:start="209:34" pos:end="209:61"><call pos:start="209:34" pos:end="209:56"><name pos:start="209:34" pos:end="209:43">GET_FIELDs</name><argument_list pos:start="209:44" pos:end="209:56">(<argument pos:start="209:45" pos:end="209:48"><expr pos:start="209:45" pos:end="209:48"><name pos:start="209:45" pos:end="209:48">insn</name></expr></argument>, <argument pos:start="209:51" pos:end="209:51"><expr pos:start="209:51" pos:end="209:51"><literal type="number" pos:start="209:51" pos:end="209:51">2</literal></expr></argument>, <argument pos:start="209:54" pos:end="209:55"><expr pos:start="209:54" pos:end="209:55"><literal type="number" pos:start="209:54" pos:end="209:55">31</literal></expr></argument>)</argument_list></call> <operator pos:start="209:58" pos:end="209:59">&lt;&lt;</operator> <literal type="number" pos:start="209:61" pos:end="209:61">2</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="211:13" pos:end="211:43"><decl pos:start="211:13" pos:end="211:42"><type pos:start="211:13" pos:end="211:16"><name pos:start="211:13" pos:end="211:16">TCGv</name></type> <name pos:start="211:18" pos:end="211:19">o7</name> <init pos:start="211:21" pos:end="211:42">= <expr pos:start="211:23" pos:end="211:42"><call pos:start="211:23" pos:end="211:42"><name pos:start="211:23" pos:end="211:34">gen_dest_gpr</name><argument_list pos:start="211:35" pos:end="211:42">(<argument pos:start="211:36" pos:end="211:37"><expr pos:start="211:36" pos:end="211:37"><name pos:start="211:36" pos:end="211:37">dc</name></expr></argument>, <argument pos:start="211:40" pos:end="211:41"><expr pos:start="211:40" pos:end="211:41"><literal type="number" pos:start="211:40" pos:end="211:41">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="215:13" pos:end="215:40"><expr pos:start="215:13" pos:end="215:39"><call pos:start="215:13" pos:end="215:39"><name pos:start="215:13" pos:end="215:27">tcg_gen_movi_tl</name><argument_list pos:start="215:28" pos:end="215:39">(<argument pos:start="215:29" pos:end="215:30"><expr pos:start="215:29" pos:end="215:30"><name pos:start="215:29" pos:end="215:30">o7</name></expr></argument>, <argument pos:start="215:33" pos:end="215:38"><expr pos:start="215:33" pos:end="215:38"><name pos:start="215:33" pos:end="215:38"><name pos:start="215:33" pos:end="215:34">dc</name><operator pos:start="215:35" pos:end="215:36">-&gt;</operator><name pos:start="215:37" pos:end="215:38">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:38"><expr pos:start="217:13" pos:end="217:37"><call pos:start="217:13" pos:end="217:37"><name pos:start="217:13" pos:end="217:25">gen_store_gpr</name><argument_list pos:start="217:26" pos:end="217:37">(<argument pos:start="217:27" pos:end="217:28"><expr pos:start="217:27" pos:end="217:28"><name pos:start="217:27" pos:end="217:28">dc</name></expr></argument>, <argument pos:start="217:31" pos:end="217:32"><expr pos:start="217:31" pos:end="217:32"><literal type="number" pos:start="217:31" pos:end="217:32">15</literal></expr></argument>, <argument pos:start="217:35" pos:end="217:36"><expr pos:start="217:35" pos:end="217:36"><name pos:start="217:35" pos:end="217:36">o7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:29"><expr pos:start="219:13" pos:end="219:28"><name pos:start="219:13" pos:end="219:18">target</name> <operator pos:start="219:20" pos:end="219:21">+=</operator> <name pos:start="219:23" pos:end="219:28"><name pos:start="219:23" pos:end="219:24">dc</name><operator pos:start="219:25" pos:end="219:26">-&gt;</operator><name pos:start="219:27" pos:end="219:28">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="224:0"><expr pos:start="221:13" pos:end="221:30"><call pos:start="221:13" pos:end="221:30"><name pos:start="221:13" pos:end="221:26">gen_mov_pc_npc</name><argument_list pos:start="221:27" pos:end="221:30">(<argument pos:start="221:28" pos:end="221:29"><expr pos:start="221:28" pos:end="221:29"><name pos:start="221:28" pos:end="221:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="223:1" pos:end="223:21">#<cpp:directive pos:start="223:2" pos:end="223:6">ifdef</cpp:directive> <name pos:start="223:8" pos:end="223:21">TARGET_SPARC64</name></cpp:ifdef>

            <if_stmt pos:start="225:13" pos:end="232:0"><if pos:start="225:13" pos:end="232:0">if <condition pos:start="225:16" pos:end="225:39">(<expr pos:start="225:17" pos:end="225:38"><call pos:start="225:17" pos:end="225:38"><name pos:start="225:17" pos:end="225:24">unlikely</name><argument_list pos:start="225:25" pos:end="225:38">(<argument pos:start="225:26" pos:end="225:37"><expr pos:start="225:26" pos:end="225:37"><call pos:start="225:26" pos:end="225:37"><name pos:start="225:26" pos:end="225:33">AM_CHECK</name><argument_list pos:start="225:34" pos:end="225:37">(<argument pos:start="225:35" pos:end="225:36"><expr pos:start="225:35" pos:end="225:36"><name pos:start="225:35" pos:end="225:36">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:41" pos:end="232:0">{<block_content pos:start="227:17" pos:end="227:40">

                <expr_stmt pos:start="227:17" pos:end="227:40"><expr pos:start="227:17" pos:end="227:39"><name pos:start="227:17" pos:end="227:22">target</name> <operator pos:start="227:24" pos:end="227:25">&amp;=</operator> <literal type="number" pos:start="227:27" pos:end="227:39">0xffffffffULL</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="231:1" pos:end="231:6">#<cpp:directive pos:start="231:2" pos:end="231:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="233:13" pos:end="233:29"><expr pos:start="233:13" pos:end="233:28"><name pos:start="233:13" pos:end="233:19"><name pos:start="233:13" pos:end="233:14">dc</name><operator pos:start="233:15" pos:end="233:16">-&gt;</operator><name pos:start="233:17" pos:end="233:19">npc</name></name> <operator pos:start="233:21" pos:end="233:21">=</operator> <name pos:start="233:23" pos:end="233:28">target</name></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="237:9" pos:end="237:22">goto <name pos:start="237:14" pos:end="237:21">jmp_insn</name>;</goto>

    <case pos:start="239:5" pos:end="239:11">case <expr pos:start="239:10" pos:end="239:10"><literal type="number" pos:start="239:10" pos:end="239:10">2</literal></expr>:</case>                     <comment type="block" pos:start="239:33" pos:end="239:62">/* FPU &amp; Logical Operations */</comment>

        <block pos:start="241:9" pos:end="4185:9">{<block_content pos:start="243:13" pos:end="4183:18">

            <decl_stmt pos:start="243:13" pos:end="243:54"><decl pos:start="243:13" pos:end="243:53"><type pos:start="243:13" pos:end="243:24"><name pos:start="243:13" pos:end="243:20">unsigned</name> <name pos:start="243:22" pos:end="243:24">int</name></type> <name pos:start="243:26" pos:end="243:28">xop</name> <init pos:start="243:30" pos:end="243:53">= <expr pos:start="243:32" pos:end="243:53"><call pos:start="243:32" pos:end="243:53"><name pos:start="243:32" pos:end="243:40">GET_FIELD</name><argument_list pos:start="243:41" pos:end="243:53">(<argument pos:start="243:42" pos:end="243:45"><expr pos:start="243:42" pos:end="243:45"><name pos:start="243:42" pos:end="243:45">insn</name></expr></argument>, <argument pos:start="243:48" pos:end="243:48"><expr pos:start="243:48" pos:end="243:48"><literal type="number" pos:start="243:48" pos:end="243:48">7</literal></expr></argument>, <argument pos:start="243:51" pos:end="243:52"><expr pos:start="243:51" pos:end="243:52"><literal type="number" pos:start="243:51" pos:end="243:52">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="245:13" pos:end="4181:13"><if pos:start="245:13" pos:end="403:13">if <condition pos:start="245:16" pos:end="245:28">(<expr pos:start="245:17" pos:end="245:27"><name pos:start="245:17" pos:end="245:19">xop</name> <operator pos:start="245:21" pos:end="245:22">==</operator> <literal type="number" pos:start="245:24" pos:end="245:27">0x3a</literal></expr>)</condition> <block pos:start="245:30" pos:end="403:13">{<block_content pos:start="247:17" pos:end="401:17">  <comment type="block" pos:start="245:33" pos:end="245:51">/* generate trap */</comment>

                <decl_stmt pos:start="247:17" pos:end="247:49"><decl pos:start="247:17" pos:end="247:48"><type pos:start="247:17" pos:end="247:19"><name pos:start="247:17" pos:end="247:19">int</name></type> <name pos:start="247:21" pos:end="247:24">cond</name> <init pos:start="247:26" pos:end="247:48">= <expr pos:start="247:28" pos:end="247:48"><call pos:start="247:28" pos:end="247:48"><name pos:start="247:28" pos:end="247:36">GET_FIELD</name><argument_list pos:start="247:37" pos:end="247:48">(<argument pos:start="247:38" pos:end="247:41"><expr pos:start="247:38" pos:end="247:41"><name pos:start="247:38" pos:end="247:41">insn</name></expr></argument>, <argument pos:start="247:44" pos:end="247:44"><expr pos:start="247:44" pos:end="247:44"><literal type="number" pos:start="247:44" pos:end="247:44">3</literal></expr></argument>, <argument pos:start="247:47" pos:end="247:47"><expr pos:start="247:47" pos:end="247:47"><literal type="number" pos:start="247:47" pos:end="247:47">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="249:17" pos:end="249:30"><decl pos:start="249:17" pos:end="249:29"><type pos:start="249:17" pos:end="249:24"><name pos:start="249:17" pos:end="249:24">TCGv_i32</name></type> <name pos:start="249:26" pos:end="249:29">trap</name></decl>;</decl_stmt>

                <decl_stmt pos:start="251:17" pos:end="251:34"><decl pos:start="251:17" pos:end="251:27"><type pos:start="251:17" pos:end="251:19"><name pos:start="251:17" pos:end="251:19">int</name></type> <name pos:start="251:21" pos:end="251:22">l1</name> <init pos:start="251:24" pos:end="251:27">= <expr pos:start="251:26" pos:end="251:27"><operator pos:start="251:26" pos:end="251:26">-</operator><literal type="number" pos:start="251:27" pos:end="251:27">1</literal></expr></init></decl>, <decl pos:start="251:30" pos:end="251:33"><type ref="prev" pos:start="251:17" pos:end="251:19"/><name pos:start="251:30" pos:end="251:33">mask</name></decl>;</decl_stmt>



                <if_stmt pos:start="255:17" pos:end="261:17"><if pos:start="255:17" pos:end="261:17">if <condition pos:start="255:20" pos:end="255:30">(<expr pos:start="255:21" pos:end="255:29"><name pos:start="255:21" pos:end="255:24">cond</name> <operator pos:start="255:26" pos:end="255:27">==</operator> <literal type="number" pos:start="255:29" pos:end="255:29">0</literal></expr>)</condition> <block pos:start="255:32" pos:end="261:17">{<block_content pos:start="259:21" pos:end="259:26">

                    <comment type="block" pos:start="257:21" pos:end="257:38">/* Trap never.  */</comment>

                    <break pos:start="259:21" pos:end="259:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="265:17" pos:end="265:31"><expr pos:start="265:17" pos:end="265:30"><call pos:start="265:17" pos:end="265:30"><name pos:start="265:17" pos:end="265:26">save_state</name><argument_list pos:start="265:27" pos:end="265:30">(<argument pos:start="265:28" pos:end="265:29"><expr pos:start="265:28" pos:end="265:29"><name pos:start="265:28" pos:end="265:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="269:17" pos:end="309:17"><if pos:start="269:17" pos:end="309:17">if <condition pos:start="269:20" pos:end="269:30">(<expr pos:start="269:21" pos:end="269:29"><name pos:start="269:21" pos:end="269:24">cond</name> <operator pos:start="269:26" pos:end="269:27">!=</operator> <literal type="number" pos:start="269:29" pos:end="269:29">8</literal></expr>)</condition> <block pos:start="269:32" pos:end="309:17">{<block_content pos:start="273:21" pos:end="307:39">

                    <comment type="block" pos:start="271:21" pos:end="271:44">/* Conditional trap.  */</comment>

                    <decl_stmt pos:start="273:21" pos:end="276:0"><decl pos:start="273:21" pos:end="273:36"><type pos:start="273:21" pos:end="273:32"><name pos:start="273:21" pos:end="273:32">DisasCompare</name></type> <name pos:start="273:34" pos:end="273:36">cmp</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="275:1" pos:end="275:21">#<cpp:directive pos:start="275:2" pos:end="275:6">ifdef</cpp:directive> <name pos:start="275:8" pos:end="275:21">TARGET_SPARC64</name></cpp:ifdef>

                    <comment type="block" pos:start="277:21" pos:end="277:36">/* V9 icc/xcc */</comment>

                    <decl_stmt pos:start="279:21" pos:end="279:56"><decl pos:start="279:21" pos:end="279:55"><type pos:start="279:21" pos:end="279:23"><name pos:start="279:21" pos:end="279:23">int</name></type> <name pos:start="279:25" pos:end="279:26">cc</name> <init pos:start="279:28" pos:end="279:55">= <expr pos:start="279:30" pos:end="279:55"><call pos:start="279:30" pos:end="279:55"><name pos:start="279:30" pos:end="279:41">GET_FIELD_SP</name><argument_list pos:start="279:42" pos:end="279:55">(<argument pos:start="279:43" pos:end="279:46"><expr pos:start="279:43" pos:end="279:46"><name pos:start="279:43" pos:end="279:46">insn</name></expr></argument>, <argument pos:start="279:49" pos:end="279:50"><expr pos:start="279:49" pos:end="279:50"><literal type="number" pos:start="279:49" pos:end="279:50">11</literal></expr></argument>, <argument pos:start="279:53" pos:end="279:54"><expr pos:start="279:53" pos:end="279:54"><literal type="number" pos:start="279:53" pos:end="279:54">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="281:21" pos:end="296:0"><if pos:start="281:21" pos:end="285:21">if <condition pos:start="281:24" pos:end="281:32">(<expr pos:start="281:25" pos:end="281:31"><name pos:start="281:25" pos:end="281:26">cc</name> <operator pos:start="281:28" pos:end="281:29">==</operator> <literal type="number" pos:start="281:31" pos:end="281:31">0</literal></expr>)</condition> <block pos:start="281:34" pos:end="285:21">{<block_content pos:start="283:25" pos:end="283:55">

                        <expr_stmt pos:start="283:25" pos:end="283:55"><expr pos:start="283:25" pos:end="283:54"><call pos:start="283:25" pos:end="283:54"><name pos:start="283:25" pos:end="283:35">gen_compare</name><argument_list pos:start="283:36" pos:end="283:54">(<argument pos:start="283:37" pos:end="283:40"><expr pos:start="283:37" pos:end="283:40"><operator pos:start="283:37" pos:end="283:37">&amp;</operator><name pos:start="283:38" pos:end="283:40">cmp</name></expr></argument>, <argument pos:start="283:43" pos:end="283:43"><expr pos:start="283:43" pos:end="283:43"><literal type="number" pos:start="283:43" pos:end="283:43">0</literal></expr></argument>, <argument pos:start="283:46" pos:end="283:49"><expr pos:start="283:46" pos:end="283:49"><name pos:start="283:46" pos:end="283:49">cond</name></expr></argument>, <argument pos:start="283:52" pos:end="283:53"><expr pos:start="283:52" pos:end="283:53"><name pos:start="283:52" pos:end="283:53">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="285:23" pos:end="289:21">else if <condition pos:start="285:31" pos:end="285:39">(<expr pos:start="285:32" pos:end="285:38"><name pos:start="285:32" pos:end="285:33">cc</name> <operator pos:start="285:35" pos:end="285:36">==</operator> <literal type="number" pos:start="285:38" pos:end="285:38">2</literal></expr>)</condition> <block pos:start="285:41" pos:end="289:21">{<block_content pos:start="287:25" pos:end="287:55">

                        <expr_stmt pos:start="287:25" pos:end="287:55"><expr pos:start="287:25" pos:end="287:54"><call pos:start="287:25" pos:end="287:54"><name pos:start="287:25" pos:end="287:35">gen_compare</name><argument_list pos:start="287:36" pos:end="287:54">(<argument pos:start="287:37" pos:end="287:40"><expr pos:start="287:37" pos:end="287:40"><operator pos:start="287:37" pos:end="287:37">&amp;</operator><name pos:start="287:38" pos:end="287:40">cmp</name></expr></argument>, <argument pos:start="287:43" pos:end="287:43"><expr pos:start="287:43" pos:end="287:43"><literal type="number" pos:start="287:43" pos:end="287:43">1</literal></expr></argument>, <argument pos:start="287:46" pos:end="287:49"><expr pos:start="287:46" pos:end="287:49"><name pos:start="287:46" pos:end="287:49">cond</name></expr></argument>, <argument pos:start="287:52" pos:end="287:53"><expr pos:start="287:52" pos:end="287:53"><name pos:start="287:52" pos:end="287:53">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="289:23" pos:end="296:0">else <block pos:start="289:28" pos:end="296:0">{<block_content pos:start="291:25" pos:end="291:42">

                        <goto pos:start="291:25" pos:end="291:42">goto <name pos:start="291:30" pos:end="291:41">illegal_insn</name>;</goto>

                    </block_content>}</block></else></if_stmt>

<cpp:else pos:start="295:1" pos:end="295:5">#<cpp:directive pos:start="295:2" pos:end="295:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="297:21" pos:end="300:0"><expr pos:start="297:21" pos:end="297:50"><call pos:start="297:21" pos:end="297:50"><name pos:start="297:21" pos:end="297:31">gen_compare</name><argument_list pos:start="297:32" pos:end="297:50">(<argument pos:start="297:33" pos:end="297:36"><expr pos:start="297:33" pos:end="297:36"><operator pos:start="297:33" pos:end="297:33">&amp;</operator><name pos:start="297:34" pos:end="297:36">cmp</name></expr></argument>, <argument pos:start="297:39" pos:end="297:39"><expr pos:start="297:39" pos:end="297:39"><literal type="number" pos:start="297:39" pos:end="297:39">0</literal></expr></argument>, <argument pos:start="297:42" pos:end="297:45"><expr pos:start="297:42" pos:end="297:45"><name pos:start="297:42" pos:end="297:45">cond</name></expr></argument>, <argument pos:start="297:48" pos:end="297:49"><expr pos:start="297:48" pos:end="297:49"><name pos:start="297:48" pos:end="297:49">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="299:1" pos:end="299:6">#<cpp:directive pos:start="299:2" pos:end="299:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="301:21" pos:end="301:41"><expr pos:start="301:21" pos:end="301:40"><name pos:start="301:21" pos:end="301:22">l1</name> <operator pos:start="301:24" pos:end="301:24">=</operator> <call pos:start="301:26" pos:end="301:40"><name pos:start="301:26" pos:end="301:38">gen_new_label</name><argument_list pos:start="301:39" pos:end="301:40">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="303:21" pos:end="305:58"><expr pos:start="303:21" pos:end="305:57"><call pos:start="303:21" pos:end="305:57"><name pos:start="303:21" pos:end="303:37">tcg_gen_brcond_tl</name><argument_list pos:start="303:38" pos:end="305:57">(<argument pos:start="303:39" pos:end="303:63"><expr pos:start="303:39" pos:end="303:63"><call pos:start="303:39" pos:end="303:63"><name pos:start="303:39" pos:end="303:53">tcg_invert_cond</name><argument_list pos:start="303:54" pos:end="303:63">(<argument pos:start="303:55" pos:end="303:62"><expr pos:start="303:55" pos:end="303:62"><name pos:start="303:55" pos:end="303:62"><name pos:start="303:55" pos:end="303:57">cmp</name><operator pos:start="303:58" pos:end="303:58">.</operator><name pos:start="303:59" pos:end="303:62">cond</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="305:39" pos:end="305:44"><expr pos:start="305:39" pos:end="305:44"><name pos:start="305:39" pos:end="305:44"><name pos:start="305:39" pos:end="305:41">cmp</name><operator pos:start="305:42" pos:end="305:42">.</operator><name pos:start="305:43" pos:end="305:44">c1</name></name></expr></argument>, <argument pos:start="305:47" pos:end="305:52"><expr pos:start="305:47" pos:end="305:52"><name pos:start="305:47" pos:end="305:52"><name pos:start="305:47" pos:end="305:49">cmp</name><operator pos:start="305:50" pos:end="305:50">.</operator><name pos:start="305:51" pos:end="305:52">c2</name></name></expr></argument>, <argument pos:start="305:55" pos:end="305:56"><expr pos:start="305:55" pos:end="305:56"><name pos:start="305:55" pos:end="305:56">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="307:21" pos:end="307:39"><expr pos:start="307:21" pos:end="307:38"><call pos:start="307:21" pos:end="307:38"><name pos:start="307:21" pos:end="307:32">free_compare</name><argument_list pos:start="307:33" pos:end="307:38">(<argument pos:start="307:34" pos:end="307:37"><expr pos:start="307:34" pos:end="307:37"><operator pos:start="307:34" pos:end="307:34">&amp;</operator><name pos:start="307:35" pos:end="307:37">cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="313:17" pos:end="315:60"><expr pos:start="313:17" pos:end="315:59"><name pos:start="313:17" pos:end="313:20">mask</name> <operator pos:start="313:22" pos:end="313:22">=</operator> <operator pos:start="313:24" pos:end="313:24">(</operator><ternary pos:start="313:25" pos:end="315:58"><condition pos:start="313:25" pos:end="315:25"><expr pos:start="313:25" pos:end="313:80"><operator pos:start="313:25" pos:end="313:25">(</operator><name pos:start="313:26" pos:end="313:42"><name pos:start="313:26" pos:end="313:27">dc</name><operator pos:start="313:28" pos:end="313:29">-&gt;</operator><name pos:start="313:30" pos:end="313:32">def</name><operator pos:start="313:33" pos:end="313:34">-&gt;</operator><name pos:start="313:35" pos:end="313:42">features</name></name> <operator pos:start="313:44" pos:end="313:44">&amp;</operator> <name pos:start="313:46" pos:end="313:61">CPU_FEATURE_HYPV</name><operator pos:start="313:62" pos:end="313:62">)</operator> <operator pos:start="313:64" pos:end="313:65">&amp;&amp;</operator> <call pos:start="313:67" pos:end="313:80"><name pos:start="313:67" pos:end="313:76">supervisor</name><argument_list pos:start="313:77" pos:end="313:80">(<argument pos:start="313:78" pos:end="313:79"><expr pos:start="313:78" pos:end="313:79"><name pos:start="313:78" pos:end="313:79">dc</name></expr></argument>)</argument_list></call></expr>

                        ?</condition><then pos:start="315:27" pos:end="315:43"> <expr pos:start="315:27" pos:end="315:43"><name pos:start="315:27" pos:end="315:43">UA2005_HTRAP_MASK</name></expr> </then><else pos:start="315:45" pos:end="315:58">: <expr pos:start="315:47" pos:end="315:58"><name pos:start="315:47" pos:end="315:58">V8_TRAP_MASK</name></expr></else></ternary><operator pos:start="315:59" pos:end="315:59">)</operator></expr>;</expr_stmt>



                <comment type="block" pos:start="319:17" pos:end="323:74">/* Don't use the normal temporaries, as they may well have

                   gone out of scope with the branch above.  While we're

                   doing that we might as well pre-truncate to 32-bit.  */</comment>

                <expr_stmt pos:start="325:17" pos:end="325:42"><expr pos:start="325:17" pos:end="325:41"><name pos:start="325:17" pos:end="325:20">trap</name> <operator pos:start="325:22" pos:end="325:22">=</operator> <call pos:start="325:24" pos:end="325:41"><name pos:start="325:24" pos:end="325:39">tcg_temp_new_i32</name><argument_list pos:start="325:40" pos:end="325:41">()</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="329:17" pos:end="329:49"><expr pos:start="329:17" pos:end="329:48"><name pos:start="329:17" pos:end="329:19">rs1</name> <operator pos:start="329:21" pos:end="329:21">=</operator> <call pos:start="329:23" pos:end="329:48"><name pos:start="329:23" pos:end="329:34">GET_FIELD_SP</name><argument_list pos:start="329:35" pos:end="329:48">(<argument pos:start="329:36" pos:end="329:39"><expr pos:start="329:36" pos:end="329:39"><name pos:start="329:36" pos:end="329:39">insn</name></expr></argument>, <argument pos:start="329:42" pos:end="329:43"><expr pos:start="329:42" pos:end="329:43"><literal type="number" pos:start="329:42" pos:end="329:43">14</literal></expr></argument>, <argument pos:start="329:46" pos:end="329:47"><expr pos:start="329:46" pos:end="329:47"><literal type="number" pos:start="329:46" pos:end="329:47">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="331:17" pos:end="367:17"><if pos:start="331:17" pos:end="353:17">if <condition pos:start="331:20" pos:end="331:27">(<expr pos:start="331:21" pos:end="331:26"><name pos:start="331:21" pos:end="331:26">IS_IMM</name></expr>)</condition> <block pos:start="331:29" pos:end="353:17">{<block_content pos:start="333:21" pos:end="351:21">

                    <expr_stmt pos:start="333:21" pos:end="333:51"><expr pos:start="333:21" pos:end="333:50"><name pos:start="333:21" pos:end="333:23">rs2</name> <operator pos:start="333:25" pos:end="333:25">=</operator> <call pos:start="333:27" pos:end="333:50"><name pos:start="333:27" pos:end="333:38">GET_FIELD_SP</name><argument_list pos:start="333:39" pos:end="333:50">(<argument pos:start="333:40" pos:end="333:43"><expr pos:start="333:40" pos:end="333:43"><name pos:start="333:40" pos:end="333:43">insn</name></expr></argument>, <argument pos:start="333:46" pos:end="333:46"><expr pos:start="333:46" pos:end="333:46"><literal type="number" pos:start="333:46" pos:end="333:46">0</literal></expr></argument>, <argument pos:start="333:49" pos:end="333:49"><expr pos:start="333:49" pos:end="333:49"><literal type="number" pos:start="333:49" pos:end="333:49">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="335:21" pos:end="351:21"><if pos:start="335:21" pos:end="343:21">if <condition pos:start="335:24" pos:end="335:33">(<expr pos:start="335:25" pos:end="335:32"><name pos:start="335:25" pos:end="335:27">rs1</name> <operator pos:start="335:29" pos:end="335:30">==</operator> <literal type="number" pos:start="335:32" pos:end="335:32">0</literal></expr>)</condition> <block pos:start="335:35" pos:end="343:21">{<block_content pos:start="337:25" pos:end="341:33">

                        <expr_stmt pos:start="337:25" pos:end="337:71"><expr pos:start="337:25" pos:end="337:70"><call pos:start="337:25" pos:end="337:70"><name pos:start="337:25" pos:end="337:40">tcg_gen_movi_i32</name><argument_list pos:start="337:41" pos:end="337:70">(<argument pos:start="337:42" pos:end="337:45"><expr pos:start="337:42" pos:end="337:45"><name pos:start="337:42" pos:end="337:45">trap</name></expr></argument>, <argument pos:start="337:48" pos:end="337:69"><expr pos:start="337:48" pos:end="337:69"><operator pos:start="337:48" pos:end="337:48">(</operator><name pos:start="337:49" pos:end="337:51">rs2</name> <operator pos:start="337:53" pos:end="337:53">&amp;</operator> <name pos:start="337:55" pos:end="337:58">mask</name><operator pos:start="337:59" pos:end="337:59">)</operator> <operator pos:start="337:61" pos:end="337:61">+</operator> <name pos:start="337:63" pos:end="337:69">TT_TRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="339:25" pos:end="339:76">/* Signal that the trap value is fully constant.  */</comment>

                        <expr_stmt pos:start="341:25" pos:end="341:33"><expr pos:start="341:25" pos:end="341:32"><name pos:start="341:25" pos:end="341:28">mask</name> <operator pos:start="341:30" pos:end="341:30">=</operator> <literal type="number" pos:start="341:32" pos:end="341:32">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="343:23" pos:end="351:21">else <block pos:start="343:28" pos:end="351:21">{<block_content pos:start="345:25" pos:end="349:58">

                        <decl_stmt pos:start="345:25" pos:end="345:56"><decl pos:start="345:25" pos:end="345:55"><type pos:start="345:25" pos:end="345:28"><name pos:start="345:25" pos:end="345:28">TCGv</name></type> <name pos:start="345:30" pos:end="345:31">t1</name> <init pos:start="345:33" pos:end="345:55">= <expr pos:start="345:35" pos:end="345:55"><call pos:start="345:35" pos:end="345:55"><name pos:start="345:35" pos:end="345:46">gen_load_gpr</name><argument_list pos:start="345:47" pos:end="345:55">(<argument pos:start="345:48" pos:end="345:49"><expr pos:start="345:48" pos:end="345:49"><name pos:start="345:48" pos:end="345:49">dc</name></expr></argument>, <argument pos:start="345:52" pos:end="345:54"><expr pos:start="345:52" pos:end="345:54"><name pos:start="345:52" pos:end="345:54">rs1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="347:25" pos:end="347:55"><expr pos:start="347:25" pos:end="347:54"><call pos:start="347:25" pos:end="347:54"><name pos:start="347:25" pos:end="347:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="347:45" pos:end="347:54">(<argument pos:start="347:46" pos:end="347:49"><expr pos:start="347:46" pos:end="347:49"><name pos:start="347:46" pos:end="347:49">trap</name></expr></argument>, <argument pos:start="347:52" pos:end="347:53"><expr pos:start="347:52" pos:end="347:53"><name pos:start="347:52" pos:end="347:53">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="349:25" pos:end="349:58"><expr pos:start="349:25" pos:end="349:57"><call pos:start="349:25" pos:end="349:57"><name pos:start="349:25" pos:end="349:40">tcg_gen_addi_i32</name><argument_list pos:start="349:41" pos:end="349:57">(<argument pos:start="349:42" pos:end="349:45"><expr pos:start="349:42" pos:end="349:45"><name pos:start="349:42" pos:end="349:45">trap</name></expr></argument>, <argument pos:start="349:48" pos:end="349:51"><expr pos:start="349:48" pos:end="349:51"><name pos:start="349:48" pos:end="349:51">trap</name></expr></argument>, <argument pos:start="349:54" pos:end="349:56"><expr pos:start="349:54" pos:end="349:56"><name pos:start="349:54" pos:end="349:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="353:19" pos:end="367:17">else <block pos:start="353:24" pos:end="367:17">{<block_content pos:start="355:21" pos:end="365:51">

                    <decl_stmt pos:start="355:21" pos:end="355:32"><decl pos:start="355:21" pos:end="355:27"><type pos:start="355:21" pos:end="355:24"><name pos:start="355:21" pos:end="355:24">TCGv</name></type> <name pos:start="355:26" pos:end="355:27">t1</name></decl>, <decl pos:start="355:30" pos:end="355:31"><type ref="prev" pos:start="355:21" pos:end="355:24"/><name pos:start="355:30" pos:end="355:31">t2</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="357:21" pos:end="357:51"><expr pos:start="357:21" pos:end="357:50"><name pos:start="357:21" pos:end="357:23">rs2</name> <operator pos:start="357:25" pos:end="357:25">=</operator> <call pos:start="357:27" pos:end="357:50"><name pos:start="357:27" pos:end="357:38">GET_FIELD_SP</name><argument_list pos:start="357:39" pos:end="357:50">(<argument pos:start="357:40" pos:end="357:43"><expr pos:start="357:40" pos:end="357:43"><name pos:start="357:40" pos:end="357:43">insn</name></expr></argument>, <argument pos:start="357:46" pos:end="357:46"><expr pos:start="357:46" pos:end="357:46"><literal type="number" pos:start="357:46" pos:end="357:46">0</literal></expr></argument>, <argument pos:start="357:49" pos:end="357:49"><expr pos:start="357:49" pos:end="357:49"><literal type="number" pos:start="357:49" pos:end="357:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="359:21" pos:end="359:47"><expr pos:start="359:21" pos:end="359:46"><name pos:start="359:21" pos:end="359:22">t1</name> <operator pos:start="359:24" pos:end="359:24">=</operator> <call pos:start="359:26" pos:end="359:46"><name pos:start="359:26" pos:end="359:37">gen_load_gpr</name><argument_list pos:start="359:38" pos:end="359:46">(<argument pos:start="359:39" pos:end="359:40"><expr pos:start="359:39" pos:end="359:40"><name pos:start="359:39" pos:end="359:40">dc</name></expr></argument>, <argument pos:start="359:43" pos:end="359:45"><expr pos:start="359:43" pos:end="359:45"><name pos:start="359:43" pos:end="359:45">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="361:21" pos:end="361:47"><expr pos:start="361:21" pos:end="361:46"><name pos:start="361:21" pos:end="361:22">t2</name> <operator pos:start="361:24" pos:end="361:24">=</operator> <call pos:start="361:26" pos:end="361:46"><name pos:start="361:26" pos:end="361:37">gen_load_gpr</name><argument_list pos:start="361:38" pos:end="361:46">(<argument pos:start="361:39" pos:end="361:40"><expr pos:start="361:39" pos:end="361:40"><name pos:start="361:39" pos:end="361:40">dc</name></expr></argument>, <argument pos:start="361:43" pos:end="361:45"><expr pos:start="361:43" pos:end="361:45"><name pos:start="361:43" pos:end="361:45">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="363:21" pos:end="363:47"><expr pos:start="363:21" pos:end="363:46"><call pos:start="363:21" pos:end="363:46"><name pos:start="363:21" pos:end="363:34">tcg_gen_add_tl</name><argument_list pos:start="363:35" pos:end="363:46">(<argument pos:start="363:36" pos:end="363:37"><expr pos:start="363:36" pos:end="363:37"><name pos:start="363:36" pos:end="363:37">t1</name></expr></argument>, <argument pos:start="363:40" pos:end="363:41"><expr pos:start="363:40" pos:end="363:41"><name pos:start="363:40" pos:end="363:41">t1</name></expr></argument>, <argument pos:start="363:44" pos:end="363:45"><expr pos:start="363:44" pos:end="363:45"><name pos:start="363:44" pos:end="363:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="365:21" pos:end="365:51"><expr pos:start="365:21" pos:end="365:50"><call pos:start="365:21" pos:end="365:50"><name pos:start="365:21" pos:end="365:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="365:41" pos:end="365:50">(<argument pos:start="365:42" pos:end="365:45"><expr pos:start="365:42" pos:end="365:45"><name pos:start="365:42" pos:end="365:45">trap</name></expr></argument>, <argument pos:start="365:48" pos:end="365:49"><expr pos:start="365:48" pos:end="365:49"><name pos:start="365:48" pos:end="365:49">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="369:17" pos:end="375:17"><if pos:start="369:17" pos:end="375:17">if <condition pos:start="369:20" pos:end="369:30">(<expr pos:start="369:21" pos:end="369:29"><name pos:start="369:21" pos:end="369:24">mask</name> <operator pos:start="369:26" pos:end="369:27">!=</operator> <literal type="number" pos:start="369:29" pos:end="369:29">0</literal></expr>)</condition> <block pos:start="369:32" pos:end="375:17">{<block_content pos:start="371:21" pos:end="373:58">

                    <expr_stmt pos:start="371:21" pos:end="371:55"><expr pos:start="371:21" pos:end="371:54"><call pos:start="371:21" pos:end="371:54"><name pos:start="371:21" pos:end="371:36">tcg_gen_andi_i32</name><argument_list pos:start="371:37" pos:end="371:54">(<argument pos:start="371:38" pos:end="371:41"><expr pos:start="371:38" pos:end="371:41"><name pos:start="371:38" pos:end="371:41">trap</name></expr></argument>, <argument pos:start="371:44" pos:end="371:47"><expr pos:start="371:44" pos:end="371:47"><name pos:start="371:44" pos:end="371:47">trap</name></expr></argument>, <argument pos:start="371:50" pos:end="371:53"><expr pos:start="371:50" pos:end="371:53"><name pos:start="371:50" pos:end="371:53">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="373:21" pos:end="373:58"><expr pos:start="373:21" pos:end="373:57"><call pos:start="373:21" pos:end="373:57"><name pos:start="373:21" pos:end="373:36">tcg_gen_addi_i32</name><argument_list pos:start="373:37" pos:end="373:57">(<argument pos:start="373:38" pos:end="373:41"><expr pos:start="373:38" pos:end="373:41"><name pos:start="373:38" pos:end="373:41">trap</name></expr></argument>, <argument pos:start="373:44" pos:end="373:47"><expr pos:start="373:44" pos:end="373:47"><name pos:start="373:44" pos:end="373:47">trap</name></expr></argument>, <argument pos:start="373:50" pos:end="373:56"><expr pos:start="373:50" pos:end="373:56"><name pos:start="373:50" pos:end="373:56">TT_TRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="379:17" pos:end="379:58"><expr pos:start="379:17" pos:end="379:57"><call pos:start="379:17" pos:end="379:57"><name pos:start="379:17" pos:end="379:42">gen_helper_raise_exception</name><argument_list pos:start="379:43" pos:end="379:57">(<argument pos:start="379:44" pos:end="379:50"><expr pos:start="379:44" pos:end="379:50"><name pos:start="379:44" pos:end="379:50">cpu_env</name></expr></argument>, <argument pos:start="379:53" pos:end="379:56"><expr pos:start="379:53" pos:end="379:56"><name pos:start="379:53" pos:end="379:56">trap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:40"><expr pos:start="381:17" pos:end="381:39"><call pos:start="381:17" pos:end="381:39"><name pos:start="381:17" pos:end="381:33">tcg_temp_free_i32</name><argument_list pos:start="381:34" pos:end="381:39">(<argument pos:start="381:35" pos:end="381:38"><expr pos:start="381:35" pos:end="381:38"><name pos:start="381:35" pos:end="381:38">trap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="385:17" pos:end="401:17"><if pos:start="385:17" pos:end="393:17">if <condition pos:start="385:20" pos:end="385:30">(<expr pos:start="385:21" pos:end="385:29"><name pos:start="385:21" pos:end="385:24">cond</name> <operator pos:start="385:26" pos:end="385:27">==</operator> <literal type="number" pos:start="385:29" pos:end="385:29">8</literal></expr>)</condition> <block pos:start="385:32" pos:end="393:17">{<block_content pos:start="389:21" pos:end="391:34">

                    <comment type="block" pos:start="387:21" pos:end="387:61">/* An unconditional trap ends the TB.  */</comment>

                    <expr_stmt pos:start="389:21" pos:end="389:34"><expr pos:start="389:21" pos:end="389:33"><name pos:start="389:21" pos:end="389:29"><name pos:start="389:21" pos:end="389:22">dc</name><operator pos:start="389:23" pos:end="389:24">-&gt;</operator><name pos:start="389:25" pos:end="389:29">is_br</name></name> <operator pos:start="389:31" pos:end="389:31">=</operator> <literal type="number" pos:start="389:33" pos:end="389:33">1</literal></expr>;</expr_stmt>

                    <goto pos:start="391:21" pos:end="391:34">goto <name pos:start="391:26" pos:end="391:33">jmp_insn</name>;</goto>

                </block_content>}</block></if> <else pos:start="393:19" pos:end="401:17">else <block pos:start="393:24" pos:end="401:17">{<block_content pos:start="397:21" pos:end="399:26">

                    <comment type="block" pos:start="395:21" pos:end="395:77">/* A conditional trap falls through to the next insn.  */</comment>

                    <expr_stmt pos:start="397:21" pos:end="397:38"><expr pos:start="397:21" pos:end="397:37"><call pos:start="397:21" pos:end="397:37"><name pos:start="397:21" pos:end="397:33">gen_set_label</name><argument_list pos:start="397:34" pos:end="397:37">(<argument pos:start="397:35" pos:end="397:36"><expr pos:start="397:35" pos:end="397:36"><name pos:start="397:35" pos:end="397:36">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="399:21" pos:end="399:26">break;</break>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="403:15" pos:end="605:13">else if <condition pos:start="403:23" pos:end="403:35">(<expr pos:start="403:24" pos:end="403:34"><name pos:start="403:24" pos:end="403:26">xop</name> <operator pos:start="403:28" pos:end="403:29">==</operator> <literal type="number" pos:start="403:31" pos:end="403:34">0x28</literal></expr>)</condition> <block pos:start="403:37" pos:end="605:13">{<block_content pos:start="405:17" pos:end="604:0">

                <expr_stmt pos:start="405:17" pos:end="405:46"><expr pos:start="405:17" pos:end="405:45"><name pos:start="405:17" pos:end="405:19">rs1</name> <operator pos:start="405:21" pos:end="405:21">=</operator> <call pos:start="405:23" pos:end="405:45"><name pos:start="405:23" pos:end="405:31">GET_FIELD</name><argument_list pos:start="405:32" pos:end="405:45">(<argument pos:start="405:33" pos:end="405:36"><expr pos:start="405:33" pos:end="405:36"><name pos:start="405:33" pos:end="405:36">insn</name></expr></argument>, <argument pos:start="405:39" pos:end="405:40"><expr pos:start="405:39" pos:end="405:40"><literal type="number" pos:start="405:39" pos:end="405:40">13</literal></expr></argument>, <argument pos:start="405:43" pos:end="405:44"><expr pos:start="405:43" pos:end="405:44"><literal type="number" pos:start="405:43" pos:end="405:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="407:17" pos:end="604:0">switch<condition pos:start="407:23" pos:end="407:27">(<expr pos:start="407:24" pos:end="407:26"><name pos:start="407:24" pos:end="407:26">rs1</name></expr>)</condition> <block pos:start="407:29" pos:end="604:0">{<block_content pos:start="409:17" pos:end="599:38">

                <case pos:start="409:17" pos:end="412:0">case <expr pos:start="409:22" pos:end="409:22"><literal type="number" pos:start="409:22" pos:end="409:22">0</literal></expr>:</case> <comment type="block" pos:start="409:25" pos:end="409:33">/* rdy */</comment>

<cpp:ifndef pos:start="411:1" pos:end="411:22">#<cpp:directive pos:start="411:2" pos:end="411:7">ifndef</cpp:directive> <name pos:start="411:9" pos:end="411:22">TARGET_SPARC64</name></cpp:ifndef>

                <case pos:start="413:17" pos:end="413:35">case <expr pos:start="413:22" pos:end="413:34"><literal type="number" pos:start="413:22" pos:end="413:25">0x01</literal> <operator pos:start="413:27" pos:end="413:29">...</operator> <literal type="number" pos:start="413:31" pos:end="413:34">0x0e</literal></expr>:</case> <comment type="block" pos:start="413:37" pos:end="417:44">/* undefined in the SPARCv8

                                       manual, rdy on the microSPARC

                                       II */</comment>

                <case pos:start="419:17" pos:end="419:26">case <expr pos:start="419:22" pos:end="419:25"><literal type="number" pos:start="419:22" pos:end="419:25">0x0f</literal></expr>:</case>          <comment type="block" pos:start="419:37" pos:end="421:66">/* stbar in the SPARCv8 manual,

                                       rdy on the microSPARC II */</comment>

                <case pos:start="423:17" pos:end="423:35">case <expr pos:start="423:22" pos:end="423:34"><literal type="number" pos:start="423:22" pos:end="423:25">0x10</literal> <operator pos:start="423:27" pos:end="423:29">...</operator> <literal type="number" pos:start="423:31" pos:end="423:34">0x1f</literal></expr>:</case> <comment type="block" pos:start="423:37" pos:end="427:55">/* implementation-dependent in the

                                       SPARCv8 manual, rdy on the

                                       microSPARC II */</comment>

                    <comment type="block" pos:start="429:21" pos:end="429:36">/* Read Asr17 */</comment>

                    <if_stmt pos:start="431:21" pos:end="446:0"><if pos:start="431:21" pos:end="446:0">if <condition pos:start="431:24" pos:end="431:77">(<expr pos:start="431:25" pos:end="431:76"><name pos:start="431:25" pos:end="431:27">rs1</name> <operator pos:start="431:29" pos:end="431:30">==</operator> <literal type="number" pos:start="431:32" pos:end="431:35">0x11</literal> <operator pos:start="431:37" pos:end="431:38">&amp;&amp;</operator> <name pos:start="431:40" pos:end="431:56"><name pos:start="431:40" pos:end="431:41">dc</name><operator pos:start="431:42" pos:end="431:43">-&gt;</operator><name pos:start="431:44" pos:end="431:46">def</name><operator pos:start="431:47" pos:end="431:48">-&gt;</operator><name pos:start="431:49" pos:end="431:56">features</name></name> <operator pos:start="431:58" pos:end="431:58">&amp;</operator> <name pos:start="431:60" pos:end="431:76">CPU_FEATURE_ASR17</name></expr>)</condition> <block pos:start="431:79" pos:end="446:0">{<block_content pos:start="433:25" pos:end="441:30">

                        <decl_stmt pos:start="433:25" pos:end="433:54"><decl pos:start="433:25" pos:end="433:53"><type pos:start="433:25" pos:end="433:28"><name pos:start="433:25" pos:end="433:28">TCGv</name></type> <name pos:start="433:30" pos:end="433:30">t</name> <init pos:start="433:32" pos:end="433:53">= <expr pos:start="433:34" pos:end="433:53"><call pos:start="433:34" pos:end="433:53"><name pos:start="433:34" pos:end="433:45">gen_dest_gpr</name><argument_list pos:start="433:46" pos:end="433:53">(<argument pos:start="433:47" pos:end="433:48"><expr pos:start="433:47" pos:end="433:48"><name pos:start="433:47" pos:end="433:48">dc</name></expr></argument>, <argument pos:start="433:51" pos:end="433:52"><expr pos:start="433:51" pos:end="433:52"><name pos:start="433:51" pos:end="433:52">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="block" pos:start="435:25" pos:end="435:66">/* Read Asr17 for a Leon3 monoprocessor */</comment>

                        <expr_stmt pos:start="437:25" pos:end="437:79"><expr pos:start="437:25" pos:end="437:78"><call pos:start="437:25" pos:end="437:78"><name pos:start="437:25" pos:end="437:39">tcg_gen_movi_tl</name><argument_list pos:start="437:40" pos:end="437:78">(<argument pos:start="437:41" pos:end="437:41"><expr pos:start="437:41" pos:end="437:41"><name pos:start="437:41" pos:end="437:41">t</name></expr></argument>, <argument pos:start="437:44" pos:end="437:77"><expr pos:start="437:44" pos:end="437:77"><operator pos:start="437:44" pos:end="437:44">(</operator><literal type="number" pos:start="437:45" pos:end="437:45">1</literal> <operator pos:start="437:47" pos:end="437:48">&lt;&lt;</operator> <literal type="number" pos:start="437:50" pos:end="437:50">8</literal><operator pos:start="437:51" pos:end="437:51">)</operator> <operator pos:start="437:53" pos:end="437:53">|</operator> <operator pos:start="437:55" pos:end="437:55">(</operator><name pos:start="437:56" pos:end="437:72"><name pos:start="437:56" pos:end="437:57">dc</name><operator pos:start="437:58" pos:end="437:59">-&gt;</operator><name pos:start="437:60" pos:end="437:62">def</name><operator pos:start="437:63" pos:end="437:64">-&gt;</operator><name pos:start="437:65" pos:end="437:72">nwindows</name></name> <operator pos:start="437:74" pos:end="437:74">-</operator> <literal type="number" pos:start="437:76" pos:end="437:76">1</literal><operator pos:start="437:77" pos:end="437:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="439:25" pos:end="439:49"><expr pos:start="439:25" pos:end="439:48"><call pos:start="439:25" pos:end="439:48"><name pos:start="439:25" pos:end="439:37">gen_store_gpr</name><argument_list pos:start="439:38" pos:end="439:48">(<argument pos:start="439:39" pos:end="439:40"><expr pos:start="439:39" pos:end="439:40"><name pos:start="439:39" pos:end="439:40">dc</name></expr></argument>, <argument pos:start="439:43" pos:end="439:44"><expr pos:start="439:43" pos:end="439:44"><name pos:start="439:43" pos:end="439:44">rd</name></expr></argument>, <argument pos:start="439:47" pos:end="439:47"><expr pos:start="439:47" pos:end="439:47"><name pos:start="439:47" pos:end="439:47">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="441:25" pos:end="441:30">break;</break>

                    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="445:1" pos:end="445:6">#<cpp:directive pos:start="445:2" pos:end="445:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="447:21" pos:end="447:49"><expr pos:start="447:21" pos:end="447:48"><call pos:start="447:21" pos:end="447:48"><name pos:start="447:21" pos:end="447:33">gen_store_gpr</name><argument_list pos:start="447:34" pos:end="447:48">(<argument pos:start="447:35" pos:end="447:36"><expr pos:start="447:35" pos:end="447:36"><name pos:start="447:35" pos:end="447:36">dc</name></expr></argument>, <argument pos:start="447:39" pos:end="447:40"><expr pos:start="447:39" pos:end="447:40"><name pos:start="447:39" pos:end="447:40">rd</name></expr></argument>, <argument pos:start="447:43" pos:end="447:47"><expr pos:start="447:43" pos:end="447:47"><name pos:start="447:43" pos:end="447:47">cpu_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="449:21" pos:end="452:0">break;</break>

<cpp:ifdef pos:start="451:1" pos:end="451:21">#<cpp:directive pos:start="451:2" pos:end="451:6">ifdef</cpp:directive> <name pos:start="451:8" pos:end="451:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="453:17" pos:end="453:25">case <expr pos:start="453:22" pos:end="453:24"><literal type="number" pos:start="453:22" pos:end="453:24">0x2</literal></expr>:</case> <comment type="block" pos:start="453:27" pos:end="453:40">/* V9 rdccr */</comment>

                    <expr_stmt pos:start="455:21" pos:end="455:35"><expr pos:start="455:21" pos:end="455:34"><call pos:start="455:21" pos:end="455:34"><name pos:start="455:21" pos:end="455:30">update_psr</name><argument_list pos:start="455:31" pos:end="455:34">(<argument pos:start="455:32" pos:end="455:33"><expr pos:start="455:32" pos:end="455:33"><name pos:start="455:32" pos:end="455:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="457:21" pos:end="457:55"><expr pos:start="457:21" pos:end="457:54"><call pos:start="457:21" pos:end="457:54"><name pos:start="457:21" pos:end="457:36">gen_helper_rdccr</name><argument_list pos:start="457:37" pos:end="457:54">(<argument pos:start="457:38" pos:end="457:44"><expr pos:start="457:38" pos:end="457:44"><name pos:start="457:38" pos:end="457:44">cpu_dst</name></expr></argument>, <argument pos:start="457:47" pos:end="457:53"><expr pos:start="457:47" pos:end="457:53"><name pos:start="457:47" pos:end="457:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="459:21" pos:end="459:51"><expr pos:start="459:21" pos:end="459:50"><call pos:start="459:21" pos:end="459:50"><name pos:start="459:21" pos:end="459:33">gen_store_gpr</name><argument_list pos:start="459:34" pos:end="459:50">(<argument pos:start="459:35" pos:end="459:36"><expr pos:start="459:35" pos:end="459:36"><name pos:start="459:35" pos:end="459:36">dc</name></expr></argument>, <argument pos:start="459:39" pos:end="459:40"><expr pos:start="459:39" pos:end="459:40"><name pos:start="459:39" pos:end="459:40">rd</name></expr></argument>, <argument pos:start="459:43" pos:end="459:49"><expr pos:start="459:43" pos:end="459:49"><name pos:start="459:43" pos:end="459:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="461:21" pos:end="461:26">break;</break>

                <case pos:start="463:17" pos:end="463:25">case <expr pos:start="463:22" pos:end="463:24"><literal type="number" pos:start="463:22" pos:end="463:24">0x3</literal></expr>:</case> <comment type="block" pos:start="463:27" pos:end="463:40">/* V9 rdasi */</comment>

                    <expr_stmt pos:start="465:21" pos:end="465:57"><expr pos:start="465:21" pos:end="465:56"><call pos:start="465:21" pos:end="465:56"><name pos:start="465:21" pos:end="465:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="465:39" pos:end="465:56">(<argument pos:start="465:40" pos:end="465:46"><expr pos:start="465:40" pos:end="465:46"><name pos:start="465:40" pos:end="465:46">cpu_dst</name></expr></argument>, <argument pos:start="465:49" pos:end="465:55"><expr pos:start="465:49" pos:end="465:55"><name pos:start="465:49" pos:end="465:55">cpu_asi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="467:21" pos:end="467:51"><expr pos:start="467:21" pos:end="467:50"><call pos:start="467:21" pos:end="467:50"><name pos:start="467:21" pos:end="467:33">gen_store_gpr</name><argument_list pos:start="467:34" pos:end="467:50">(<argument pos:start="467:35" pos:end="467:36"><expr pos:start="467:35" pos:end="467:36"><name pos:start="467:35" pos:end="467:36">dc</name></expr></argument>, <argument pos:start="467:39" pos:end="467:40"><expr pos:start="467:39" pos:end="467:40"><name pos:start="467:39" pos:end="467:40">rd</name></expr></argument>, <argument pos:start="467:43" pos:end="467:49"><expr pos:start="467:43" pos:end="467:49"><name pos:start="467:43" pos:end="467:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="469:21" pos:end="469:26">break;</break>

                <case pos:start="471:17" pos:end="471:25">case <expr pos:start="471:22" pos:end="471:24"><literal type="number" pos:start="471:22" pos:end="471:24">0x4</literal></expr>:</case> <comment type="block" pos:start="471:27" pos:end="471:41">/* V9 rdtick */</comment>

                    <block pos:start="473:21" pos:end="491:21">{<block_content pos:start="475:25" pos:end="489:55">

                        <decl_stmt pos:start="475:25" pos:end="475:43"><decl pos:start="475:25" pos:end="475:42"><type pos:start="475:25" pos:end="475:32"><name pos:start="475:25" pos:end="475:32">TCGv_ptr</name></type> <name pos:start="475:34" pos:end="475:42">r_tickptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="479:25" pos:end="479:55"><expr pos:start="479:25" pos:end="479:54"><name pos:start="479:25" pos:end="479:33">r_tickptr</name> <operator pos:start="479:35" pos:end="479:35">=</operator> <call pos:start="479:37" pos:end="479:54"><name pos:start="479:37" pos:end="479:52">tcg_temp_new_ptr</name><argument_list pos:start="479:53" pos:end="479:54">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="481:25" pos:end="483:70"><expr pos:start="481:25" pos:end="483:69"><call pos:start="481:25" pos:end="483:69"><name pos:start="481:25" pos:end="481:38">tcg_gen_ld_ptr</name><argument_list pos:start="481:39" pos:end="483:69">(<argument pos:start="481:40" pos:end="481:48"><expr pos:start="481:40" pos:end="481:48"><name pos:start="481:40" pos:end="481:48">r_tickptr</name></expr></argument>, <argument pos:start="481:51" pos:end="481:57"><expr pos:start="481:51" pos:end="481:57"><name pos:start="481:51" pos:end="481:57">cpu_env</name></expr></argument>,

                                       <argument pos:start="483:40" pos:end="483:68"><expr pos:start="483:40" pos:end="483:68"><call pos:start="483:40" pos:end="483:68"><name pos:start="483:40" pos:end="483:47">offsetof</name><argument_list pos:start="483:48" pos:end="483:68">(<argument pos:start="483:49" pos:end="483:61"><expr pos:start="483:49" pos:end="483:61"><name pos:start="483:49" pos:end="483:61">CPUSPARCState</name></expr></argument>, <argument pos:start="483:64" pos:end="483:67"><expr pos:start="483:64" pos:end="483:67"><name pos:start="483:64" pos:end="483:67">tick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="485:25" pos:end="485:70"><expr pos:start="485:25" pos:end="485:69"><call pos:start="485:25" pos:end="485:69"><name pos:start="485:25" pos:end="485:49">gen_helper_tick_get_count</name><argument_list pos:start="485:50" pos:end="485:69">(<argument pos:start="485:51" pos:end="485:57"><expr pos:start="485:51" pos:end="485:57"><name pos:start="485:51" pos:end="485:57">cpu_dst</name></expr></argument>, <argument pos:start="485:60" pos:end="485:68"><expr pos:start="485:60" pos:end="485:68"><name pos:start="485:60" pos:end="485:68">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="487:25" pos:end="487:53"><expr pos:start="487:25" pos:end="487:52"><call pos:start="487:25" pos:end="487:52"><name pos:start="487:25" pos:end="487:41">tcg_temp_free_ptr</name><argument_list pos:start="487:42" pos:end="487:52">(<argument pos:start="487:43" pos:end="487:51"><expr pos:start="487:43" pos:end="487:51"><name pos:start="487:43" pos:end="487:51">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="489:25" pos:end="489:55"><expr pos:start="489:25" pos:end="489:54"><call pos:start="489:25" pos:end="489:54"><name pos:start="489:25" pos:end="489:37">gen_store_gpr</name><argument_list pos:start="489:38" pos:end="489:54">(<argument pos:start="489:39" pos:end="489:40"><expr pos:start="489:39" pos:end="489:40"><name pos:start="489:39" pos:end="489:40">dc</name></expr></argument>, <argument pos:start="489:43" pos:end="489:44"><expr pos:start="489:43" pos:end="489:44"><name pos:start="489:43" pos:end="489:44">rd</name></expr></argument>, <argument pos:start="489:47" pos:end="489:53"><expr pos:start="489:47" pos:end="489:53"><name pos:start="489:47" pos:end="489:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="493:21" pos:end="493:26">break;</break>

                <case pos:start="495:17" pos:end="495:25">case <expr pos:start="495:22" pos:end="495:24"><literal type="number" pos:start="495:22" pos:end="495:24">0x5</literal></expr>:</case> <comment type="block" pos:start="495:27" pos:end="495:39">/* V9 rdpc */</comment>

                    <block pos:start="497:21" pos:end="513:21">{<block_content pos:start="499:25" pos:end="511:49">

                        <decl_stmt pos:start="499:25" pos:end="499:54"><decl pos:start="499:25" pos:end="499:53"><type pos:start="499:25" pos:end="499:28"><name pos:start="499:25" pos:end="499:28">TCGv</name></type> <name pos:start="499:30" pos:end="499:30">t</name> <init pos:start="499:32" pos:end="499:53">= <expr pos:start="499:34" pos:end="499:53"><call pos:start="499:34" pos:end="499:53"><name pos:start="499:34" pos:end="499:45">gen_dest_gpr</name><argument_list pos:start="499:46" pos:end="499:53">(<argument pos:start="499:47" pos:end="499:48"><expr pos:start="499:47" pos:end="499:48"><name pos:start="499:47" pos:end="499:48">dc</name></expr></argument>, <argument pos:start="499:51" pos:end="499:52"><expr pos:start="499:51" pos:end="499:52"><name pos:start="499:51" pos:end="499:52">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="501:25" pos:end="509:25"><if pos:start="501:25" pos:end="505:25">if <condition pos:start="501:28" pos:end="501:51">(<expr pos:start="501:29" pos:end="501:50"><call pos:start="501:29" pos:end="501:50"><name pos:start="501:29" pos:end="501:36">unlikely</name><argument_list pos:start="501:37" pos:end="501:50">(<argument pos:start="501:38" pos:end="501:49"><expr pos:start="501:38" pos:end="501:49"><call pos:start="501:38" pos:end="501:49"><name pos:start="501:38" pos:end="501:45">AM_CHECK</name><argument_list pos:start="501:46" pos:end="501:49">(<argument pos:start="501:47" pos:end="501:48"><expr pos:start="501:47" pos:end="501:48"><name pos:start="501:47" pos:end="501:48">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="501:53" pos:end="505:25">{<block_content pos:start="503:29" pos:end="503:71">

                            <expr_stmt pos:start="503:29" pos:end="503:71"><expr pos:start="503:29" pos:end="503:70"><call pos:start="503:29" pos:end="503:70"><name pos:start="503:29" pos:end="503:43">tcg_gen_movi_tl</name><argument_list pos:start="503:44" pos:end="503:70">(<argument pos:start="503:45" pos:end="503:45"><expr pos:start="503:45" pos:end="503:45"><name pos:start="503:45" pos:end="503:45">t</name></expr></argument>, <argument pos:start="503:48" pos:end="503:69"><expr pos:start="503:48" pos:end="503:69"><name pos:start="503:48" pos:end="503:53"><name pos:start="503:48" pos:end="503:49">dc</name><operator pos:start="503:50" pos:end="503:51">-&gt;</operator><name pos:start="503:52" pos:end="503:53">pc</name></name> <operator pos:start="503:55" pos:end="503:55">&amp;</operator> <literal type="number" pos:start="503:57" pos:end="503:69">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="505:27" pos:end="509:25">else <block pos:start="505:32" pos:end="509:25">{<block_content pos:start="507:29" pos:end="507:55">

                            <expr_stmt pos:start="507:29" pos:end="507:55"><expr pos:start="507:29" pos:end="507:54"><call pos:start="507:29" pos:end="507:54"><name pos:start="507:29" pos:end="507:43">tcg_gen_movi_tl</name><argument_list pos:start="507:44" pos:end="507:54">(<argument pos:start="507:45" pos:end="507:45"><expr pos:start="507:45" pos:end="507:45"><name pos:start="507:45" pos:end="507:45">t</name></expr></argument>, <argument pos:start="507:48" pos:end="507:53"><expr pos:start="507:48" pos:end="507:53"><name pos:start="507:48" pos:end="507:53"><name pos:start="507:48" pos:end="507:49">dc</name><operator pos:start="507:50" pos:end="507:51">-&gt;</operator><name pos:start="507:52" pos:end="507:53">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="511:25" pos:end="511:49"><expr pos:start="511:25" pos:end="511:48"><call pos:start="511:25" pos:end="511:48"><name pos:start="511:25" pos:end="511:37">gen_store_gpr</name><argument_list pos:start="511:38" pos:end="511:48">(<argument pos:start="511:39" pos:end="511:40"><expr pos:start="511:39" pos:end="511:40"><name pos:start="511:39" pos:end="511:40">dc</name></expr></argument>, <argument pos:start="511:43" pos:end="511:44"><expr pos:start="511:43" pos:end="511:44"><name pos:start="511:43" pos:end="511:44">rd</name></expr></argument>, <argument pos:start="511:47" pos:end="511:47"><expr pos:start="511:47" pos:end="511:47"><name pos:start="511:47" pos:end="511:47">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="515:21" pos:end="515:26">break;</break>

                <case pos:start="517:17" pos:end="517:25">case <expr pos:start="517:22" pos:end="517:24"><literal type="number" pos:start="517:22" pos:end="517:24">0x6</literal></expr>:</case> <comment type="block" pos:start="517:27" pos:end="517:41">/* V9 rdfprs */</comment>

                    <expr_stmt pos:start="519:21" pos:end="519:58"><expr pos:start="519:21" pos:end="519:57"><call pos:start="519:21" pos:end="519:57"><name pos:start="519:21" pos:end="519:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="519:39" pos:end="519:57">(<argument pos:start="519:40" pos:end="519:46"><expr pos:start="519:40" pos:end="519:46"><name pos:start="519:40" pos:end="519:46">cpu_dst</name></expr></argument>, <argument pos:start="519:49" pos:end="519:56"><expr pos:start="519:49" pos:end="519:56"><name pos:start="519:49" pos:end="519:56">cpu_fprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="521:21" pos:end="521:51"><expr pos:start="521:21" pos:end="521:50"><call pos:start="521:21" pos:end="521:50"><name pos:start="521:21" pos:end="521:33">gen_store_gpr</name><argument_list pos:start="521:34" pos:end="521:50">(<argument pos:start="521:35" pos:end="521:36"><expr pos:start="521:35" pos:end="521:36"><name pos:start="521:35" pos:end="521:36">dc</name></expr></argument>, <argument pos:start="521:39" pos:end="521:40"><expr pos:start="521:39" pos:end="521:40"><name pos:start="521:39" pos:end="521:40">rd</name></expr></argument>, <argument pos:start="521:43" pos:end="521:49"><expr pos:start="521:43" pos:end="521:49"><name pos:start="521:43" pos:end="521:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="523:21" pos:end="523:26">break;</break>

                <case pos:start="525:17" pos:end="525:25">case <expr pos:start="525:22" pos:end="525:24"><literal type="number" pos:start="525:22" pos:end="525:24">0xf</literal></expr>:</case> <comment type="block" pos:start="525:27" pos:end="525:41">/* V9 membar */</comment>

                    <break pos:start="527:21" pos:end="527:26">break;</break> <comment type="block" pos:start="527:28" pos:end="527:42">/* no effect */</comment>

                <case pos:start="529:17" pos:end="529:26">case <expr pos:start="529:22" pos:end="529:25"><literal type="number" pos:start="529:22" pos:end="529:25">0x13</literal></expr>:</case> <comment type="block" pos:start="529:28" pos:end="529:48">/* Graphics Status */</comment>

                    <if_stmt pos:start="531:21" pos:end="535:21"><if pos:start="531:21" pos:end="535:21">if <condition pos:start="531:24" pos:end="531:45">(<expr pos:start="531:25" pos:end="531:44"><call pos:start="531:25" pos:end="531:44"><name pos:start="531:25" pos:end="531:40">gen_trap_ifnofpu</name><argument_list pos:start="531:41" pos:end="531:44">(<argument pos:start="531:42" pos:end="531:43"><expr pos:start="531:42" pos:end="531:43"><name pos:start="531:42" pos:end="531:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="531:47" pos:end="535:21">{<block_content pos:start="533:25" pos:end="533:38">

                        <goto pos:start="533:25" pos:end="533:38">goto <name pos:start="533:30" pos:end="533:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="537:21" pos:end="537:51"><expr pos:start="537:21" pos:end="537:50"><call pos:start="537:21" pos:end="537:50"><name pos:start="537:21" pos:end="537:33">gen_store_gpr</name><argument_list pos:start="537:34" pos:end="537:50">(<argument pos:start="537:35" pos:end="537:36"><expr pos:start="537:35" pos:end="537:36"><name pos:start="537:35" pos:end="537:36">dc</name></expr></argument>, <argument pos:start="537:39" pos:end="537:40"><expr pos:start="537:39" pos:end="537:40"><name pos:start="537:39" pos:end="537:40">rd</name></expr></argument>, <argument pos:start="537:43" pos:end="537:49"><expr pos:start="537:43" pos:end="537:49"><name pos:start="537:43" pos:end="537:49">cpu_gsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="539:21" pos:end="539:26">break;</break>

                <case pos:start="541:17" pos:end="541:26">case <expr pos:start="541:22" pos:end="541:25"><literal type="number" pos:start="541:22" pos:end="541:25">0x16</literal></expr>:</case> <comment type="block" pos:start="541:28" pos:end="541:40">/* Softint */</comment>

                    <expr_stmt pos:start="543:21" pos:end="543:61"><expr pos:start="543:21" pos:end="543:60"><call pos:start="543:21" pos:end="543:60"><name pos:start="543:21" pos:end="543:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="543:39" pos:end="543:60">(<argument pos:start="543:40" pos:end="543:46"><expr pos:start="543:40" pos:end="543:46"><name pos:start="543:40" pos:end="543:46">cpu_dst</name></expr></argument>, <argument pos:start="543:49" pos:end="543:59"><expr pos:start="543:49" pos:end="543:59"><name pos:start="543:49" pos:end="543:59">cpu_softint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="545:21" pos:end="545:51"><expr pos:start="545:21" pos:end="545:50"><call pos:start="545:21" pos:end="545:50"><name pos:start="545:21" pos:end="545:33">gen_store_gpr</name><argument_list pos:start="545:34" pos:end="545:50">(<argument pos:start="545:35" pos:end="545:36"><expr pos:start="545:35" pos:end="545:36"><name pos:start="545:35" pos:end="545:36">dc</name></expr></argument>, <argument pos:start="545:39" pos:end="545:40"><expr pos:start="545:39" pos:end="545:40"><name pos:start="545:39" pos:end="545:40">rd</name></expr></argument>, <argument pos:start="545:43" pos:end="545:49"><expr pos:start="545:43" pos:end="545:49"><name pos:start="545:43" pos:end="545:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="547:21" pos:end="547:26">break;</break>

                <case pos:start="549:17" pos:end="549:26">case <expr pos:start="549:22" pos:end="549:25"><literal type="number" pos:start="549:22" pos:end="549:25">0x17</literal></expr>:</case> <comment type="block" pos:start="549:28" pos:end="549:45">/* Tick compare */</comment>

                    <expr_stmt pos:start="551:21" pos:end="551:57"><expr pos:start="551:21" pos:end="551:56"><call pos:start="551:21" pos:end="551:56"><name pos:start="551:21" pos:end="551:33">gen_store_gpr</name><argument_list pos:start="551:34" pos:end="551:56">(<argument pos:start="551:35" pos:end="551:36"><expr pos:start="551:35" pos:end="551:36"><name pos:start="551:35" pos:end="551:36">dc</name></expr></argument>, <argument pos:start="551:39" pos:end="551:40"><expr pos:start="551:39" pos:end="551:40"><name pos:start="551:39" pos:end="551:40">rd</name></expr></argument>, <argument pos:start="551:43" pos:end="551:55"><expr pos:start="551:43" pos:end="551:55"><name pos:start="551:43" pos:end="551:55">cpu_tick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="553:21" pos:end="553:26">break;</break>

                <case pos:start="555:17" pos:end="555:26">case <expr pos:start="555:22" pos:end="555:25"><literal type="number" pos:start="555:22" pos:end="555:25">0x18</literal></expr>:</case> <comment type="block" pos:start="555:28" pos:end="555:44">/* System tick */</comment>

                    <block pos:start="557:21" pos:end="575:21">{<block_content pos:start="559:25" pos:end="573:55">

                        <decl_stmt pos:start="559:25" pos:end="559:43"><decl pos:start="559:25" pos:end="559:42"><type pos:start="559:25" pos:end="559:32"><name pos:start="559:25" pos:end="559:32">TCGv_ptr</name></type> <name pos:start="559:34" pos:end="559:42">r_tickptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="563:25" pos:end="563:55"><expr pos:start="563:25" pos:end="563:54"><name pos:start="563:25" pos:end="563:33">r_tickptr</name> <operator pos:start="563:35" pos:end="563:35">=</operator> <call pos:start="563:37" pos:end="563:54"><name pos:start="563:37" pos:end="563:52">tcg_temp_new_ptr</name><argument_list pos:start="563:53" pos:end="563:54">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="565:25" pos:end="567:71"><expr pos:start="565:25" pos:end="567:70"><call pos:start="565:25" pos:end="567:70"><name pos:start="565:25" pos:end="565:38">tcg_gen_ld_ptr</name><argument_list pos:start="565:39" pos:end="567:70">(<argument pos:start="565:40" pos:end="565:48"><expr pos:start="565:40" pos:end="565:48"><name pos:start="565:40" pos:end="565:48">r_tickptr</name></expr></argument>, <argument pos:start="565:51" pos:end="565:57"><expr pos:start="565:51" pos:end="565:57"><name pos:start="565:51" pos:end="565:57">cpu_env</name></expr></argument>,

                                       <argument pos:start="567:40" pos:end="567:69"><expr pos:start="567:40" pos:end="567:69"><call pos:start="567:40" pos:end="567:69"><name pos:start="567:40" pos:end="567:47">offsetof</name><argument_list pos:start="567:48" pos:end="567:69">(<argument pos:start="567:49" pos:end="567:61"><expr pos:start="567:49" pos:end="567:61"><name pos:start="567:49" pos:end="567:61">CPUSPARCState</name></expr></argument>, <argument pos:start="567:64" pos:end="567:68"><expr pos:start="567:64" pos:end="567:68"><name pos:start="567:64" pos:end="567:68">stick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="569:25" pos:end="569:70"><expr pos:start="569:25" pos:end="569:69"><call pos:start="569:25" pos:end="569:69"><name pos:start="569:25" pos:end="569:49">gen_helper_tick_get_count</name><argument_list pos:start="569:50" pos:end="569:69">(<argument pos:start="569:51" pos:end="569:57"><expr pos:start="569:51" pos:end="569:57"><name pos:start="569:51" pos:end="569:57">cpu_dst</name></expr></argument>, <argument pos:start="569:60" pos:end="569:68"><expr pos:start="569:60" pos:end="569:68"><name pos:start="569:60" pos:end="569:68">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="571:25" pos:end="571:53"><expr pos:start="571:25" pos:end="571:52"><call pos:start="571:25" pos:end="571:52"><name pos:start="571:25" pos:end="571:41">tcg_temp_free_ptr</name><argument_list pos:start="571:42" pos:end="571:52">(<argument pos:start="571:43" pos:end="571:51"><expr pos:start="571:43" pos:end="571:51"><name pos:start="571:43" pos:end="571:51">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="573:25" pos:end="573:55"><expr pos:start="573:25" pos:end="573:54"><call pos:start="573:25" pos:end="573:54"><name pos:start="573:25" pos:end="573:37">gen_store_gpr</name><argument_list pos:start="573:38" pos:end="573:54">(<argument pos:start="573:39" pos:end="573:40"><expr pos:start="573:39" pos:end="573:40"><name pos:start="573:39" pos:end="573:40">dc</name></expr></argument>, <argument pos:start="573:43" pos:end="573:44"><expr pos:start="573:43" pos:end="573:44"><name pos:start="573:43" pos:end="573:44">rd</name></expr></argument>, <argument pos:start="573:47" pos:end="573:53"><expr pos:start="573:47" pos:end="573:53"><name pos:start="573:47" pos:end="573:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="577:21" pos:end="577:26">break;</break>

                <case pos:start="579:17" pos:end="579:26">case <expr pos:start="579:22" pos:end="579:25"><literal type="number" pos:start="579:22" pos:end="579:25">0x19</literal></expr>:</case> <comment type="block" pos:start="579:28" pos:end="579:52">/* System tick compare */</comment>

                    <expr_stmt pos:start="581:21" pos:end="581:58"><expr pos:start="581:21" pos:end="581:57"><call pos:start="581:21" pos:end="581:57"><name pos:start="581:21" pos:end="581:33">gen_store_gpr</name><argument_list pos:start="581:34" pos:end="581:57">(<argument pos:start="581:35" pos:end="581:36"><expr pos:start="581:35" pos:end="581:36"><name pos:start="581:35" pos:end="581:36">dc</name></expr></argument>, <argument pos:start="581:39" pos:end="581:40"><expr pos:start="581:39" pos:end="581:40"><name pos:start="581:39" pos:end="581:40">rd</name></expr></argument>, <argument pos:start="581:43" pos:end="581:56"><expr pos:start="581:43" pos:end="581:56"><name pos:start="581:43" pos:end="581:56">cpu_stick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="583:21" pos:end="583:26">break;</break>

                <case pos:start="585:17" pos:end="585:26">case <expr pos:start="585:22" pos:end="585:25"><literal type="number" pos:start="585:22" pos:end="585:25">0x10</literal></expr>:</case> <comment type="block" pos:start="585:28" pos:end="585:52">/* Performance Control */</comment>

                <case pos:start="587:17" pos:end="587:26">case <expr pos:start="587:22" pos:end="587:25"><literal type="number" pos:start="587:22" pos:end="587:25">0x11</literal></expr>:</case> <comment type="block" pos:start="587:28" pos:end="587:68">/* Performance Instrumentation Counter */</comment>

                <case pos:start="589:17" pos:end="589:26">case <expr pos:start="589:22" pos:end="589:25"><literal type="number" pos:start="589:22" pos:end="589:25">0x12</literal></expr>:</case> <comment type="block" pos:start="589:28" pos:end="589:49">/* Dispatch Control */</comment>

                <case pos:start="591:17" pos:end="591:26">case <expr pos:start="591:22" pos:end="591:25"><literal type="number" pos:start="591:22" pos:end="591:25">0x14</literal></expr>:</case> <comment type="block" pos:start="591:28" pos:end="591:48">/* Softint set, WO */</comment>

                <case pos:start="593:17" pos:end="596:0">case <expr pos:start="593:22" pos:end="593:25"><literal type="number" pos:start="593:22" pos:end="593:25">0x15</literal></expr>:</case> <comment type="block" pos:start="593:28" pos:end="593:50">/* Softint clear, WO */</comment>

<cpp:endif pos:start="595:1" pos:end="595:6">#<cpp:directive pos:start="595:2" pos:end="595:6">endif</cpp:directive></cpp:endif>

                <default pos:start="597:17" pos:end="597:24">default:</default>

                    <goto pos:start="599:21" pos:end="599:38">goto <name pos:start="599:26" pos:end="599:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

<cpp:if pos:start="603:1" pos:end="603:30">#<cpp:directive pos:start="603:2" pos:end="603:3">if</cpp:directive> <expr pos:start="603:5" pos:end="603:30"><operator pos:start="603:5" pos:end="603:5">!</operator><call pos:start="603:6" pos:end="603:30"><name pos:start="603:6" pos:end="603:12">defined</name><argument_list pos:start="603:13" pos:end="603:30">(<argument pos:start="603:14" pos:end="603:29"><expr pos:start="603:14" pos:end="603:29"><name pos:start="603:14" pos:end="603:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

            </block_content>}</block></if> <if type="elseif" pos:start="605:15" pos:end="679:13">else if <condition pos:start="605:23" pos:end="605:35">(<expr pos:start="605:24" pos:end="605:34"><name pos:start="605:24" pos:end="605:26">xop</name> <operator pos:start="605:28" pos:end="605:29">==</operator> <literal type="number" pos:start="605:31" pos:end="605:34">0x29</literal></expr>)</condition> <block pos:start="605:37" pos:end="679:13">{<block_content pos:start="609:17" pos:end="677:22"> <comment type="block" pos:start="605:39" pos:end="605:64">/* rdpsr / UA2005 rdhpr */</comment>

<cpp:ifndef pos:start="607:1" pos:end="607:22">#<cpp:directive pos:start="607:2" pos:end="607:7">ifndef</cpp:directive> <name pos:start="607:9" pos:end="607:22">TARGET_SPARC64</name></cpp:ifndef>

                <if_stmt pos:start="609:17" pos:end="613:17"><if pos:start="609:17" pos:end="613:17">if <condition pos:start="609:20" pos:end="609:36">(<expr pos:start="609:21" pos:end="609:35"><operator pos:start="609:21" pos:end="609:21">!</operator><call pos:start="609:22" pos:end="609:35"><name pos:start="609:22" pos:end="609:31">supervisor</name><argument_list pos:start="609:32" pos:end="609:35">(<argument pos:start="609:33" pos:end="609:34"><expr pos:start="609:33" pos:end="609:34"><name pos:start="609:33" pos:end="609:34">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="609:38" pos:end="613:17">{<block_content pos:start="611:21" pos:end="611:35">

                    <goto pos:start="611:21" pos:end="611:35">goto <name pos:start="611:26" pos:end="611:34">priv_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="615:17" pos:end="615:31"><expr pos:start="615:17" pos:end="615:30"><call pos:start="615:17" pos:end="615:30"><name pos:start="615:17" pos:end="615:26">update_psr</name><argument_list pos:start="615:27" pos:end="615:30">(<argument pos:start="615:28" pos:end="615:29"><expr pos:start="615:28" pos:end="615:29"><name pos:start="615:28" pos:end="615:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="617:17" pos:end="620:0"><expr pos:start="617:17" pos:end="617:50"><call pos:start="617:17" pos:end="617:50"><name pos:start="617:17" pos:end="617:32">gen_helper_rdpsr</name><argument_list pos:start="617:33" pos:end="617:50">(<argument pos:start="617:34" pos:end="617:40"><expr pos:start="617:34" pos:end="617:40"><name pos:start="617:34" pos:end="617:40">cpu_dst</name></expr></argument>, <argument pos:start="617:43" pos:end="617:49"><expr pos:start="617:43" pos:end="617:49"><name pos:start="617:43" pos:end="617:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="619:1" pos:end="619:5">#<cpp:directive pos:start="619:2" pos:end="619:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="621:17" pos:end="621:43"><expr pos:start="621:17" pos:end="621:42"><call pos:start="621:17" pos:end="621:42"><name pos:start="621:17" pos:end="621:32">CHECK_IU_FEATURE</name><argument_list pos:start="621:33" pos:end="621:42">(<argument pos:start="621:34" pos:end="621:35"><expr pos:start="621:34" pos:end="621:35"><name pos:start="621:34" pos:end="621:35">dc</name></expr></argument>, <argument pos:start="621:38" pos:end="621:41"><expr pos:start="621:38" pos:end="621:41"><name pos:start="621:38" pos:end="621:41">HYPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="623:17" pos:end="625:35"><if pos:start="623:17" pos:end="625:35">if <condition pos:start="623:20" pos:end="623:36">(<expr pos:start="623:21" pos:end="623:35"><operator pos:start="623:21" pos:end="623:21">!</operator><call pos:start="623:22" pos:end="623:35"><name pos:start="623:22" pos:end="623:31">hypervisor</name><argument_list pos:start="623:32" pos:end="623:35">(<argument pos:start="623:33" pos:end="623:34"><expr pos:start="623:33" pos:end="623:34"><name pos:start="623:33" pos:end="623:34">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="625:21" pos:end="625:35"><block_content pos:start="625:21" pos:end="625:35">

                    <goto pos:start="625:21" pos:end="625:35">goto <name pos:start="625:26" pos:end="625:34">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="627:17" pos:end="627:46"><expr pos:start="627:17" pos:end="627:45"><name pos:start="627:17" pos:end="627:19">rs1</name> <operator pos:start="627:21" pos:end="627:21">=</operator> <call pos:start="627:23" pos:end="627:45"><name pos:start="627:23" pos:end="627:31">GET_FIELD</name><argument_list pos:start="627:32" pos:end="627:45">(<argument pos:start="627:33" pos:end="627:36"><expr pos:start="627:33" pos:end="627:36"><name pos:start="627:33" pos:end="627:36">insn</name></expr></argument>, <argument pos:start="627:39" pos:end="627:40"><expr pos:start="627:39" pos:end="627:40"><literal type="number" pos:start="627:39" pos:end="627:40">13</literal></expr></argument>, <argument pos:start="627:43" pos:end="627:44"><expr pos:start="627:43" pos:end="627:44"><literal type="number" pos:start="627:43" pos:end="627:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="629:17" pos:end="674:0">switch <condition pos:start="629:24" pos:end="629:28">(<expr pos:start="629:25" pos:end="629:27"><name pos:start="629:25" pos:end="629:27">rs1</name></expr>)</condition> <block pos:start="629:30" pos:end="674:0">{<block_content pos:start="631:17" pos:end="669:38">

                <case pos:start="631:17" pos:end="631:23">case <expr pos:start="631:22" pos:end="631:22"><literal type="number" pos:start="631:22" pos:end="631:22">0</literal></expr>:</case> <comment type="line" pos:start="631:25" pos:end="631:34">// hpstate</comment>

                    <comment type="line" pos:start="633:21" pos:end="633:42">// gen_op_rdhpstate();</comment>

                    <break pos:start="635:21" pos:end="635:26">break;</break>

                <case pos:start="637:17" pos:end="637:23">case <expr pos:start="637:22" pos:end="637:22"><literal type="number" pos:start="637:22" pos:end="637:22">1</literal></expr>:</case> <comment type="line" pos:start="637:25" pos:end="637:34">// htstate</comment>

                    <comment type="line" pos:start="639:21" pos:end="639:42">// gen_op_rdhtstate();</comment>

                    <break pos:start="641:21" pos:end="641:26">break;</break>

                <case pos:start="643:17" pos:end="643:23">case <expr pos:start="643:22" pos:end="643:22"><literal type="number" pos:start="643:22" pos:end="643:22">3</literal></expr>:</case> <comment type="line" pos:start="643:25" pos:end="643:32">// hintp</comment>

                    <expr_stmt pos:start="645:21" pos:end="645:55"><expr pos:start="645:21" pos:end="645:54"><call pos:start="645:21" pos:end="645:54"><name pos:start="645:21" pos:end="645:34">tcg_gen_mov_tl</name><argument_list pos:start="645:35" pos:end="645:54">(<argument pos:start="645:36" pos:end="645:42"><expr pos:start="645:36" pos:end="645:42"><name pos:start="645:36" pos:end="645:42">cpu_dst</name></expr></argument>, <argument pos:start="645:45" pos:end="645:53"><expr pos:start="645:45" pos:end="645:53"><name pos:start="645:45" pos:end="645:53">cpu_hintp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="647:21" pos:end="647:26">break;</break>

                <case pos:start="649:17" pos:end="649:23">case <expr pos:start="649:22" pos:end="649:22"><literal type="number" pos:start="649:22" pos:end="649:22">5</literal></expr>:</case> <comment type="line" pos:start="649:25" pos:end="649:31">// htba</comment>

                    <expr_stmt pos:start="651:21" pos:end="651:54"><expr pos:start="651:21" pos:end="651:53"><call pos:start="651:21" pos:end="651:53"><name pos:start="651:21" pos:end="651:34">tcg_gen_mov_tl</name><argument_list pos:start="651:35" pos:end="651:53">(<argument pos:start="651:36" pos:end="651:42"><expr pos:start="651:36" pos:end="651:42"><name pos:start="651:36" pos:end="651:42">cpu_dst</name></expr></argument>, <argument pos:start="651:45" pos:end="651:52"><expr pos:start="651:45" pos:end="651:52"><name pos:start="651:45" pos:end="651:52">cpu_htba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="653:21" pos:end="653:26">break;</break>

                <case pos:start="655:17" pos:end="655:23">case <expr pos:start="655:22" pos:end="655:22"><literal type="number" pos:start="655:22" pos:end="655:22">6</literal></expr>:</case> <comment type="line" pos:start="655:25" pos:end="655:31">// hver</comment>

                    <expr_stmt pos:start="657:21" pos:end="657:54"><expr pos:start="657:21" pos:end="657:53"><call pos:start="657:21" pos:end="657:53"><name pos:start="657:21" pos:end="657:34">tcg_gen_mov_tl</name><argument_list pos:start="657:35" pos:end="657:53">(<argument pos:start="657:36" pos:end="657:42"><expr pos:start="657:36" pos:end="657:42"><name pos:start="657:36" pos:end="657:42">cpu_dst</name></expr></argument>, <argument pos:start="657:45" pos:end="657:52"><expr pos:start="657:45" pos:end="657:52"><name pos:start="657:45" pos:end="657:52">cpu_hver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="659:21" pos:end="659:26">break;</break>

                <case pos:start="661:17" pos:end="661:24">case <expr pos:start="661:22" pos:end="661:23"><literal type="number" pos:start="661:22" pos:end="661:23">31</literal></expr>:</case> <comment type="line" pos:start="661:26" pos:end="661:39">// hstick_cmpr</comment>

                    <expr_stmt pos:start="663:21" pos:end="663:61"><expr pos:start="663:21" pos:end="663:60"><call pos:start="663:21" pos:end="663:60"><name pos:start="663:21" pos:end="663:34">tcg_gen_mov_tl</name><argument_list pos:start="663:35" pos:end="663:60">(<argument pos:start="663:36" pos:end="663:42"><expr pos:start="663:36" pos:end="663:42"><name pos:start="663:36" pos:end="663:42">cpu_dst</name></expr></argument>, <argument pos:start="663:45" pos:end="663:59"><expr pos:start="663:45" pos:end="663:59"><name pos:start="663:45" pos:end="663:59">cpu_hstick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="665:21" pos:end="665:26">break;</break>

                <default pos:start="667:17" pos:end="667:24">default:</default>

                    <goto pos:start="669:21" pos:end="669:38">goto <name pos:start="669:26" pos:end="669:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

<cpp:endif pos:start="673:1" pos:end="673:6">#<cpp:directive pos:start="673:2" pos:end="673:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="675:17" pos:end="675:47"><expr pos:start="675:17" pos:end="675:46"><call pos:start="675:17" pos:end="675:46"><name pos:start="675:17" pos:end="675:29">gen_store_gpr</name><argument_list pos:start="675:30" pos:end="675:46">(<argument pos:start="675:31" pos:end="675:32"><expr pos:start="675:31" pos:end="675:32"><name pos:start="675:31" pos:end="675:32">dc</name></expr></argument>, <argument pos:start="675:35" pos:end="675:36"><expr pos:start="675:35" pos:end="675:36"><name pos:start="675:35" pos:end="675:36">rd</name></expr></argument>, <argument pos:start="675:39" pos:end="675:45"><expr pos:start="675:39" pos:end="675:45"><name pos:start="675:39" pos:end="675:45">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="677:17" pos:end="677:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="679:15" pos:end="921:13">else if <condition pos:start="679:23" pos:end="679:35">(<expr pos:start="679:24" pos:end="679:34"><name pos:start="679:24" pos:end="679:26">xop</name> <operator pos:start="679:28" pos:end="679:29">==</operator> <literal type="number" pos:start="679:31" pos:end="679:34">0x2a</literal></expr>)</condition> <block pos:start="679:37" pos:end="921:13">{<block_content pos:start="681:17" pos:end="919:22"> <comment type="block" pos:start="679:39" pos:end="679:59">/* rdwim / V9 rdpr */</comment>

                <if_stmt pos:start="681:17" pos:end="686:0"><if pos:start="681:17" pos:end="686:0">if <condition pos:start="681:20" pos:end="681:36">(<expr pos:start="681:21" pos:end="681:35"><operator pos:start="681:21" pos:end="681:21">!</operator><call pos:start="681:22" pos:end="681:35"><name pos:start="681:22" pos:end="681:31">supervisor</name><argument_list pos:start="681:32" pos:end="681:35">(<argument pos:start="681:33" pos:end="681:34"><expr pos:start="681:33" pos:end="681:34"><name pos:start="681:33" pos:end="681:34">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="683:21" pos:end="686:0"><block_content pos:start="683:21" pos:end="686:0">

                    <goto pos:start="683:21" pos:end="686:0">goto <name pos:start="683:26" pos:end="683:34">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="685:1" pos:end="685:21">#<cpp:directive pos:start="685:2" pos:end="685:6">ifdef</cpp:directive> <name pos:start="685:8" pos:end="685:21">TARGET_SPARC64</name></cpp:ifdef>

                <expr_stmt pos:start="687:17" pos:end="687:46"><expr pos:start="687:17" pos:end="687:45"><name pos:start="687:17" pos:end="687:19">rs1</name> <operator pos:start="687:21" pos:end="687:21">=</operator> <call pos:start="687:23" pos:end="687:45"><name pos:start="687:23" pos:end="687:31">GET_FIELD</name><argument_list pos:start="687:32" pos:end="687:45">(<argument pos:start="687:33" pos:end="687:36"><expr pos:start="687:33" pos:end="687:36"><name pos:start="687:33" pos:end="687:36">insn</name></expr></argument>, <argument pos:start="687:39" pos:end="687:40"><expr pos:start="687:39" pos:end="687:40"><literal type="number" pos:start="687:39" pos:end="687:40">13</literal></expr></argument>, <argument pos:start="687:43" pos:end="687:44"><expr pos:start="687:43" pos:end="687:44"><literal type="number" pos:start="687:43" pos:end="687:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="689:17" pos:end="912:0">switch <condition pos:start="689:24" pos:end="689:28">(<expr pos:start="689:25" pos:end="689:27"><name pos:start="689:25" pos:end="689:27">rs1</name></expr>)</condition> <block pos:start="689:30" pos:end="912:0">{<block_content pos:start="691:17" pos:end="907:38">

                <case pos:start="691:17" pos:end="691:23">case <expr pos:start="691:22" pos:end="691:22"><literal type="number" pos:start="691:22" pos:end="691:22">0</literal></expr>:</case> <comment type="line" pos:start="691:25" pos:end="691:30">// tpc</comment>

                    <block pos:start="693:21" pos:end="709:21">{<block_content pos:start="695:25" pos:end="707:51">

                        <decl_stmt pos:start="695:25" pos:end="695:41"><decl pos:start="695:25" pos:end="695:40"><type pos:start="695:25" pos:end="695:32"><name pos:start="695:25" pos:end="695:32">TCGv_ptr</name></type> <name pos:start="695:34" pos:end="695:40">r_tsptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="699:25" pos:end="699:53"><expr pos:start="699:25" pos:end="699:52"><name pos:start="699:25" pos:end="699:31">r_tsptr</name> <operator pos:start="699:33" pos:end="699:33">=</operator> <call pos:start="699:35" pos:end="699:52"><name pos:start="699:35" pos:end="699:50">tcg_temp_new_ptr</name><argument_list pos:start="699:51" pos:end="699:52">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="701:25" pos:end="701:68"><expr pos:start="701:25" pos:end="701:67"><call pos:start="701:25" pos:end="701:67"><name pos:start="701:25" pos:end="701:49">gen_load_trap_state_at_tl</name><argument_list pos:start="701:50" pos:end="701:67">(<argument pos:start="701:51" pos:end="701:57"><expr pos:start="701:51" pos:end="701:57"><name pos:start="701:51" pos:end="701:57">r_tsptr</name></expr></argument>, <argument pos:start="701:60" pos:end="701:66"><expr pos:start="701:60" pos:end="701:66"><name pos:start="701:60" pos:end="701:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="703:25" pos:end="705:65"><expr pos:start="703:25" pos:end="705:64"><call pos:start="703:25" pos:end="705:64"><name pos:start="703:25" pos:end="703:37">tcg_gen_ld_tl</name><argument_list pos:start="703:38" pos:end="705:64">(<argument pos:start="703:39" pos:end="703:46"><expr pos:start="703:39" pos:end="703:46"><name pos:start="703:39" pos:end="703:46">cpu_tmp0</name></expr></argument>, <argument pos:start="703:49" pos:end="703:55"><expr pos:start="703:49" pos:end="703:55"><name pos:start="703:49" pos:end="703:55">r_tsptr</name></expr></argument>,

                                      <argument pos:start="705:39" pos:end="705:63"><expr pos:start="705:39" pos:end="705:63"><call pos:start="705:39" pos:end="705:63"><name pos:start="705:39" pos:end="705:46">offsetof</name><argument_list pos:start="705:47" pos:end="705:63">(<argument pos:start="705:48" pos:end="705:57"><expr pos:start="705:48" pos:end="705:57"><name pos:start="705:48" pos:end="705:57">trap_state</name></expr></argument>, <argument pos:start="705:60" pos:end="705:62"><expr pos:start="705:60" pos:end="705:62"><name pos:start="705:60" pos:end="705:62">tpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="707:25" pos:end="707:51"><expr pos:start="707:25" pos:end="707:50"><call pos:start="707:25" pos:end="707:50"><name pos:start="707:25" pos:end="707:41">tcg_temp_free_ptr</name><argument_list pos:start="707:42" pos:end="707:50">(<argument pos:start="707:43" pos:end="707:49"><expr pos:start="707:43" pos:end="707:49"><name pos:start="707:43" pos:end="707:49">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="711:21" pos:end="711:26">break;</break>

                <case pos:start="713:17" pos:end="713:23">case <expr pos:start="713:22" pos:end="713:22"><literal type="number" pos:start="713:22" pos:end="713:22">1</literal></expr>:</case> <comment type="line" pos:start="713:25" pos:end="713:31">// tnpc</comment>

                    <block pos:start="715:21" pos:end="731:21">{<block_content pos:start="717:25" pos:end="729:51">

                        <decl_stmt pos:start="717:25" pos:end="717:41"><decl pos:start="717:25" pos:end="717:40"><type pos:start="717:25" pos:end="717:32"><name pos:start="717:25" pos:end="717:32">TCGv_ptr</name></type> <name pos:start="717:34" pos:end="717:40">r_tsptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="721:25" pos:end="721:53"><expr pos:start="721:25" pos:end="721:52"><name pos:start="721:25" pos:end="721:31">r_tsptr</name> <operator pos:start="721:33" pos:end="721:33">=</operator> <call pos:start="721:35" pos:end="721:52"><name pos:start="721:35" pos:end="721:50">tcg_temp_new_ptr</name><argument_list pos:start="721:51" pos:end="721:52">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="723:25" pos:end="723:68"><expr pos:start="723:25" pos:end="723:67"><call pos:start="723:25" pos:end="723:67"><name pos:start="723:25" pos:end="723:49">gen_load_trap_state_at_tl</name><argument_list pos:start="723:50" pos:end="723:67">(<argument pos:start="723:51" pos:end="723:57"><expr pos:start="723:51" pos:end="723:57"><name pos:start="723:51" pos:end="723:57">r_tsptr</name></expr></argument>, <argument pos:start="723:60" pos:end="723:66"><expr pos:start="723:60" pos:end="723:66"><name pos:start="723:60" pos:end="723:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="725:25" pos:end="727:66"><expr pos:start="725:25" pos:end="727:65"><call pos:start="725:25" pos:end="727:65"><name pos:start="725:25" pos:end="725:37">tcg_gen_ld_tl</name><argument_list pos:start="725:38" pos:end="727:65">(<argument pos:start="725:39" pos:end="725:46"><expr pos:start="725:39" pos:end="725:46"><name pos:start="725:39" pos:end="725:46">cpu_tmp0</name></expr></argument>, <argument pos:start="725:49" pos:end="725:55"><expr pos:start="725:49" pos:end="725:55"><name pos:start="725:49" pos:end="725:55">r_tsptr</name></expr></argument>,

                                      <argument pos:start="727:39" pos:end="727:64"><expr pos:start="727:39" pos:end="727:64"><call pos:start="727:39" pos:end="727:64"><name pos:start="727:39" pos:end="727:46">offsetof</name><argument_list pos:start="727:47" pos:end="727:64">(<argument pos:start="727:48" pos:end="727:57"><expr pos:start="727:48" pos:end="727:57"><name pos:start="727:48" pos:end="727:57">trap_state</name></expr></argument>, <argument pos:start="727:60" pos:end="727:63"><expr pos:start="727:60" pos:end="727:63"><name pos:start="727:60" pos:end="727:63">tnpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="729:25" pos:end="729:51"><expr pos:start="729:25" pos:end="729:50"><call pos:start="729:25" pos:end="729:50"><name pos:start="729:25" pos:end="729:41">tcg_temp_free_ptr</name><argument_list pos:start="729:42" pos:end="729:50">(<argument pos:start="729:43" pos:end="729:49"><expr pos:start="729:43" pos:end="729:49"><name pos:start="729:43" pos:end="729:49">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="733:21" pos:end="733:26">break;</break>

                <case pos:start="735:17" pos:end="735:23">case <expr pos:start="735:22" pos:end="735:22"><literal type="number" pos:start="735:22" pos:end="735:22">2</literal></expr>:</case> <comment type="line" pos:start="735:25" pos:end="735:33">// tstate</comment>

                    <block pos:start="737:21" pos:end="753:21">{<block_content pos:start="739:25" pos:end="751:51">

                        <decl_stmt pos:start="739:25" pos:end="739:41"><decl pos:start="739:25" pos:end="739:40"><type pos:start="739:25" pos:end="739:32"><name pos:start="739:25" pos:end="739:32">TCGv_ptr</name></type> <name pos:start="739:34" pos:end="739:40">r_tsptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="743:25" pos:end="743:53"><expr pos:start="743:25" pos:end="743:52"><name pos:start="743:25" pos:end="743:31">r_tsptr</name> <operator pos:start="743:33" pos:end="743:33">=</operator> <call pos:start="743:35" pos:end="743:52"><name pos:start="743:35" pos:end="743:50">tcg_temp_new_ptr</name><argument_list pos:start="743:51" pos:end="743:52">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="745:25" pos:end="745:68"><expr pos:start="745:25" pos:end="745:67"><call pos:start="745:25" pos:end="745:67"><name pos:start="745:25" pos:end="745:49">gen_load_trap_state_at_tl</name><argument_list pos:start="745:50" pos:end="745:67">(<argument pos:start="745:51" pos:end="745:57"><expr pos:start="745:51" pos:end="745:57"><name pos:start="745:51" pos:end="745:57">r_tsptr</name></expr></argument>, <argument pos:start="745:60" pos:end="745:66"><expr pos:start="745:60" pos:end="745:66"><name pos:start="745:60" pos:end="745:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="747:25" pos:end="749:68"><expr pos:start="747:25" pos:end="749:67"><call pos:start="747:25" pos:end="749:67"><name pos:start="747:25" pos:end="747:37">tcg_gen_ld_tl</name><argument_list pos:start="747:38" pos:end="749:67">(<argument pos:start="747:39" pos:end="747:46"><expr pos:start="747:39" pos:end="747:46"><name pos:start="747:39" pos:end="747:46">cpu_tmp0</name></expr></argument>, <argument pos:start="747:49" pos:end="747:55"><expr pos:start="747:49" pos:end="747:55"><name pos:start="747:49" pos:end="747:55">r_tsptr</name></expr></argument>,

                                      <argument pos:start="749:39" pos:end="749:66"><expr pos:start="749:39" pos:end="749:66"><call pos:start="749:39" pos:end="749:66"><name pos:start="749:39" pos:end="749:46">offsetof</name><argument_list pos:start="749:47" pos:end="749:66">(<argument pos:start="749:48" pos:end="749:57"><expr pos:start="749:48" pos:end="749:57"><name pos:start="749:48" pos:end="749:57">trap_state</name></expr></argument>, <argument pos:start="749:60" pos:end="749:65"><expr pos:start="749:60" pos:end="749:65"><name pos:start="749:60" pos:end="749:65">tstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="751:25" pos:end="751:51"><expr pos:start="751:25" pos:end="751:50"><call pos:start="751:25" pos:end="751:50"><name pos:start="751:25" pos:end="751:41">tcg_temp_free_ptr</name><argument_list pos:start="751:42" pos:end="751:50">(<argument pos:start="751:43" pos:end="751:49"><expr pos:start="751:43" pos:end="751:49"><name pos:start="751:43" pos:end="751:49">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="755:21" pos:end="755:26">break;</break>

                <case pos:start="757:17" pos:end="757:23">case <expr pos:start="757:22" pos:end="757:22"><literal type="number" pos:start="757:22" pos:end="757:22">3</literal></expr>:</case> <comment type="line" pos:start="757:25" pos:end="757:29">// tt</comment>

                    <block pos:start="759:21" pos:end="773:21">{<block_content pos:start="761:25" pos:end="771:51">

                        <decl_stmt pos:start="761:25" pos:end="761:62"><decl pos:start="761:25" pos:end="761:61"><type pos:start="761:25" pos:end="761:32"><name pos:start="761:25" pos:end="761:32">TCGv_ptr</name></type> <name pos:start="761:34" pos:end="761:40">r_tsptr</name> <init pos:start="761:42" pos:end="761:61">= <expr pos:start="761:44" pos:end="761:61"><call pos:start="761:44" pos:end="761:61"><name pos:start="761:44" pos:end="761:59">tcg_temp_new_ptr</name><argument_list pos:start="761:60" pos:end="761:61">()</argument_list></call></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="765:25" pos:end="765:68"><expr pos:start="765:25" pos:end="765:67"><call pos:start="765:25" pos:end="765:67"><name pos:start="765:25" pos:end="765:49">gen_load_trap_state_at_tl</name><argument_list pos:start="765:50" pos:end="765:67">(<argument pos:start="765:51" pos:end="765:57"><expr pos:start="765:51" pos:end="765:57"><name pos:start="765:51" pos:end="765:57">r_tsptr</name></expr></argument>, <argument pos:start="765:60" pos:end="765:66"><expr pos:start="765:60" pos:end="765:66"><name pos:start="765:60" pos:end="765:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="767:25" pos:end="769:67"><expr pos:start="767:25" pos:end="769:66"><call pos:start="767:25" pos:end="769:66"><name pos:start="767:25" pos:end="767:40">tcg_gen_ld32s_tl</name><argument_list pos:start="767:41" pos:end="769:66">(<argument pos:start="767:42" pos:end="767:49"><expr pos:start="767:42" pos:end="767:49"><name pos:start="767:42" pos:end="767:49">cpu_tmp0</name></expr></argument>, <argument pos:start="767:52" pos:end="767:58"><expr pos:start="767:52" pos:end="767:58"><name pos:start="767:52" pos:end="767:58">r_tsptr</name></expr></argument>,

                                         <argument pos:start="769:42" pos:end="769:65"><expr pos:start="769:42" pos:end="769:65"><call pos:start="769:42" pos:end="769:65"><name pos:start="769:42" pos:end="769:49">offsetof</name><argument_list pos:start="769:50" pos:end="769:65">(<argument pos:start="769:51" pos:end="769:60"><expr pos:start="769:51" pos:end="769:60"><name pos:start="769:51" pos:end="769:60">trap_state</name></expr></argument>, <argument pos:start="769:63" pos:end="769:64"><expr pos:start="769:63" pos:end="769:64"><name pos:start="769:63" pos:end="769:64">tt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="771:25" pos:end="771:51"><expr pos:start="771:25" pos:end="771:50"><call pos:start="771:25" pos:end="771:50"><name pos:start="771:25" pos:end="771:41">tcg_temp_free_ptr</name><argument_list pos:start="771:42" pos:end="771:50">(<argument pos:start="771:43" pos:end="771:49"><expr pos:start="771:43" pos:end="771:49"><name pos:start="771:43" pos:end="771:49">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="775:21" pos:end="775:26">break;</break>

                <case pos:start="777:17" pos:end="777:23">case <expr pos:start="777:22" pos:end="777:22"><literal type="number" pos:start="777:22" pos:end="777:22">4</literal></expr>:</case> <comment type="line" pos:start="777:25" pos:end="777:31">// tick</comment>

                    <block pos:start="779:21" pos:end="795:21">{<block_content pos:start="781:25" pos:end="793:53">

                        <decl_stmt pos:start="781:25" pos:end="781:43"><decl pos:start="781:25" pos:end="781:42"><type pos:start="781:25" pos:end="781:32"><name pos:start="781:25" pos:end="781:32">TCGv_ptr</name></type> <name pos:start="781:34" pos:end="781:42">r_tickptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="785:25" pos:end="785:55"><expr pos:start="785:25" pos:end="785:54"><name pos:start="785:25" pos:end="785:33">r_tickptr</name> <operator pos:start="785:35" pos:end="785:35">=</operator> <call pos:start="785:37" pos:end="785:54"><name pos:start="785:37" pos:end="785:52">tcg_temp_new_ptr</name><argument_list pos:start="785:53" pos:end="785:54">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="787:25" pos:end="789:70"><expr pos:start="787:25" pos:end="789:69"><call pos:start="787:25" pos:end="789:69"><name pos:start="787:25" pos:end="787:38">tcg_gen_ld_ptr</name><argument_list pos:start="787:39" pos:end="789:69">(<argument pos:start="787:40" pos:end="787:48"><expr pos:start="787:40" pos:end="787:48"><name pos:start="787:40" pos:end="787:48">r_tickptr</name></expr></argument>, <argument pos:start="787:51" pos:end="787:57"><expr pos:start="787:51" pos:end="787:57"><name pos:start="787:51" pos:end="787:57">cpu_env</name></expr></argument>,

                                       <argument pos:start="789:40" pos:end="789:68"><expr pos:start="789:40" pos:end="789:68"><call pos:start="789:40" pos:end="789:68"><name pos:start="789:40" pos:end="789:47">offsetof</name><argument_list pos:start="789:48" pos:end="789:68">(<argument pos:start="789:49" pos:end="789:61"><expr pos:start="789:49" pos:end="789:61"><name pos:start="789:49" pos:end="789:61">CPUSPARCState</name></expr></argument>, <argument pos:start="789:64" pos:end="789:67"><expr pos:start="789:64" pos:end="789:67"><name pos:start="789:64" pos:end="789:67">tick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="791:25" pos:end="791:71"><expr pos:start="791:25" pos:end="791:70"><call pos:start="791:25" pos:end="791:70"><name pos:start="791:25" pos:end="791:49">gen_helper_tick_get_count</name><argument_list pos:start="791:50" pos:end="791:70">(<argument pos:start="791:51" pos:end="791:58"><expr pos:start="791:51" pos:end="791:58"><name pos:start="791:51" pos:end="791:58">cpu_tmp0</name></expr></argument>, <argument pos:start="791:61" pos:end="791:69"><expr pos:start="791:61" pos:end="791:69"><name pos:start="791:61" pos:end="791:69">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="793:25" pos:end="793:53"><expr pos:start="793:25" pos:end="793:52"><call pos:start="793:25" pos:end="793:52"><name pos:start="793:25" pos:end="793:41">tcg_temp_free_ptr</name><argument_list pos:start="793:42" pos:end="793:52">(<argument pos:start="793:43" pos:end="793:51"><expr pos:start="793:43" pos:end="793:51"><name pos:start="793:43" pos:end="793:51">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="797:21" pos:end="797:26">break;</break>

                <case pos:start="799:17" pos:end="799:23">case <expr pos:start="799:22" pos:end="799:22"><literal type="number" pos:start="799:22" pos:end="799:22">5</literal></expr>:</case> <comment type="line" pos:start="799:25" pos:end="799:30">// tba</comment>

                    <expr_stmt pos:start="801:21" pos:end="801:54"><expr pos:start="801:21" pos:end="801:53"><call pos:start="801:21" pos:end="801:53"><name pos:start="801:21" pos:end="801:34">tcg_gen_mov_tl</name><argument_list pos:start="801:35" pos:end="801:53">(<argument pos:start="801:36" pos:end="801:43"><expr pos:start="801:36" pos:end="801:43"><name pos:start="801:36" pos:end="801:43">cpu_tmp0</name></expr></argument>, <argument pos:start="801:46" pos:end="801:52"><expr pos:start="801:46" pos:end="801:52"><name pos:start="801:46" pos:end="801:52">cpu_tbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="803:21" pos:end="803:26">break;</break>

                <case pos:start="805:17" pos:end="805:23">case <expr pos:start="805:22" pos:end="805:22"><literal type="number" pos:start="805:22" pos:end="805:22">6</literal></expr>:</case> <comment type="line" pos:start="805:25" pos:end="805:33">// pstate</comment>

                    <expr_stmt pos:start="807:21" pos:end="809:70"><expr pos:start="807:21" pos:end="809:69"><call pos:start="807:21" pos:end="809:69"><name pos:start="807:21" pos:end="807:36">tcg_gen_ld32s_tl</name><argument_list pos:start="807:37" pos:end="809:69">(<argument pos:start="807:38" pos:end="807:45"><expr pos:start="807:38" pos:end="807:45"><name pos:start="807:38" pos:end="807:45">cpu_tmp0</name></expr></argument>, <argument pos:start="807:48" pos:end="807:54"><expr pos:start="807:48" pos:end="807:54"><name pos:start="807:48" pos:end="807:54">cpu_env</name></expr></argument>,

                                     <argument pos:start="809:38" pos:end="809:68"><expr pos:start="809:38" pos:end="809:68"><call pos:start="809:38" pos:end="809:68"><name pos:start="809:38" pos:end="809:45">offsetof</name><argument_list pos:start="809:46" pos:end="809:68">(<argument pos:start="809:47" pos:end="809:59"><expr pos:start="809:47" pos:end="809:59"><name pos:start="809:47" pos:end="809:59">CPUSPARCState</name></expr></argument>, <argument pos:start="809:62" pos:end="809:67"><expr pos:start="809:62" pos:end="809:67"><name pos:start="809:62" pos:end="809:67">pstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="811:21" pos:end="811:26">break;</break>

                <case pos:start="813:17" pos:end="813:23">case <expr pos:start="813:22" pos:end="813:22"><literal type="number" pos:start="813:22" pos:end="813:22">7</literal></expr>:</case> <comment type="line" pos:start="813:25" pos:end="813:29">// tl</comment>

                    <expr_stmt pos:start="815:21" pos:end="817:66"><expr pos:start="815:21" pos:end="817:65"><call pos:start="815:21" pos:end="817:65"><name pos:start="815:21" pos:end="815:36">tcg_gen_ld32s_tl</name><argument_list pos:start="815:37" pos:end="817:65">(<argument pos:start="815:38" pos:end="815:45"><expr pos:start="815:38" pos:end="815:45"><name pos:start="815:38" pos:end="815:45">cpu_tmp0</name></expr></argument>, <argument pos:start="815:48" pos:end="815:54"><expr pos:start="815:48" pos:end="815:54"><name pos:start="815:48" pos:end="815:54">cpu_env</name></expr></argument>,

                                     <argument pos:start="817:38" pos:end="817:64"><expr pos:start="817:38" pos:end="817:64"><call pos:start="817:38" pos:end="817:64"><name pos:start="817:38" pos:end="817:45">offsetof</name><argument_list pos:start="817:46" pos:end="817:64">(<argument pos:start="817:47" pos:end="817:59"><expr pos:start="817:47" pos:end="817:59"><name pos:start="817:47" pos:end="817:59">CPUSPARCState</name></expr></argument>, <argument pos:start="817:62" pos:end="817:63"><expr pos:start="817:62" pos:end="817:63"><name pos:start="817:62" pos:end="817:63">tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="819:21" pos:end="819:26">break;</break>

                <case pos:start="821:17" pos:end="821:23">case <expr pos:start="821:22" pos:end="821:22"><literal type="number" pos:start="821:22" pos:end="821:22">8</literal></expr>:</case> <comment type="line" pos:start="821:25" pos:end="821:30">// pil</comment>

                    <expr_stmt pos:start="823:21" pos:end="825:70"><expr pos:start="823:21" pos:end="825:69"><call pos:start="823:21" pos:end="825:69"><name pos:start="823:21" pos:end="823:36">tcg_gen_ld32s_tl</name><argument_list pos:start="823:37" pos:end="825:69">(<argument pos:start="823:38" pos:end="823:45"><expr pos:start="823:38" pos:end="823:45"><name pos:start="823:38" pos:end="823:45">cpu_tmp0</name></expr></argument>, <argument pos:start="823:48" pos:end="823:54"><expr pos:start="823:48" pos:end="823:54"><name pos:start="823:48" pos:end="823:54">cpu_env</name></expr></argument>,

                                     <argument pos:start="825:38" pos:end="825:68"><expr pos:start="825:38" pos:end="825:68"><call pos:start="825:38" pos:end="825:68"><name pos:start="825:38" pos:end="825:45">offsetof</name><argument_list pos:start="825:46" pos:end="825:68">(<argument pos:start="825:47" pos:end="825:59"><expr pos:start="825:47" pos:end="825:59"><name pos:start="825:47" pos:end="825:59">CPUSPARCState</name></expr></argument>, <argument pos:start="825:62" pos:end="825:67"><expr pos:start="825:62" pos:end="825:67"><name pos:start="825:62" pos:end="825:67">psrpil</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="827:21" pos:end="827:26">break;</break>

                <case pos:start="829:17" pos:end="829:23">case <expr pos:start="829:22" pos:end="829:22"><literal type="number" pos:start="829:22" pos:end="829:22">9</literal></expr>:</case> <comment type="line" pos:start="829:25" pos:end="829:30">// cwp</comment>

                    <expr_stmt pos:start="831:21" pos:end="831:56"><expr pos:start="831:21" pos:end="831:55"><call pos:start="831:21" pos:end="831:55"><name pos:start="831:21" pos:end="831:36">gen_helper_rdcwp</name><argument_list pos:start="831:37" pos:end="831:55">(<argument pos:start="831:38" pos:end="831:45"><expr pos:start="831:38" pos:end="831:45"><name pos:start="831:38" pos:end="831:45">cpu_tmp0</name></expr></argument>, <argument pos:start="831:48" pos:end="831:54"><expr pos:start="831:48" pos:end="831:54"><name pos:start="831:48" pos:end="831:54">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="833:21" pos:end="833:26">break;</break>

                <case pos:start="835:17" pos:end="835:24">case <expr pos:start="835:22" pos:end="835:23"><literal type="number" pos:start="835:22" pos:end="835:23">10</literal></expr>:</case> <comment type="line" pos:start="835:26" pos:end="835:35">// cansave</comment>

                    <expr_stmt pos:start="837:21" pos:end="839:71"><expr pos:start="837:21" pos:end="839:70"><call pos:start="837:21" pos:end="839:70"><name pos:start="837:21" pos:end="837:36">tcg_gen_ld32s_tl</name><argument_list pos:start="837:37" pos:end="839:70">(<argument pos:start="837:38" pos:end="837:45"><expr pos:start="837:38" pos:end="837:45"><name pos:start="837:38" pos:end="837:45">cpu_tmp0</name></expr></argument>, <argument pos:start="837:48" pos:end="837:54"><expr pos:start="837:48" pos:end="837:54"><name pos:start="837:48" pos:end="837:54">cpu_env</name></expr></argument>,

                                     <argument pos:start="839:38" pos:end="839:69"><expr pos:start="839:38" pos:end="839:69"><call pos:start="839:38" pos:end="839:69"><name pos:start="839:38" pos:end="839:45">offsetof</name><argument_list pos:start="839:46" pos:end="839:69">(<argument pos:start="839:47" pos:end="839:59"><expr pos:start="839:47" pos:end="839:59"><name pos:start="839:47" pos:end="839:59">CPUSPARCState</name></expr></argument>, <argument pos:start="839:62" pos:end="839:68"><expr pos:start="839:62" pos:end="839:68"><name pos:start="839:62" pos:end="839:68">cansave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="841:21" pos:end="841:26">break;</break>

                <case pos:start="843:17" pos:end="843:24">case <expr pos:start="843:22" pos:end="843:23"><literal type="number" pos:start="843:22" pos:end="843:23">11</literal></expr>:</case> <comment type="line" pos:start="843:26" pos:end="843:38">// canrestore</comment>

                    <expr_stmt pos:start="845:21" pos:end="847:74"><expr pos:start="845:21" pos:end="847:73"><call pos:start="845:21" pos:end="847:73"><name pos:start="845:21" pos:end="845:36">tcg_gen_ld32s_tl</name><argument_list pos:start="845:37" pos:end="847:73">(<argument pos:start="845:38" pos:end="845:45"><expr pos:start="845:38" pos:end="845:45"><name pos:start="845:38" pos:end="845:45">cpu_tmp0</name></expr></argument>, <argument pos:start="845:48" pos:end="845:54"><expr pos:start="845:48" pos:end="845:54"><name pos:start="845:48" pos:end="845:54">cpu_env</name></expr></argument>,

                                     <argument pos:start="847:38" pos:end="847:72"><expr pos:start="847:38" pos:end="847:72"><call pos:start="847:38" pos:end="847:72"><name pos:start="847:38" pos:end="847:45">offsetof</name><argument_list pos:start="847:46" pos:end="847:72">(<argument pos:start="847:47" pos:end="847:59"><expr pos:start="847:47" pos:end="847:59"><name pos:start="847:47" pos:end="847:59">CPUSPARCState</name></expr></argument>, <argument pos:start="847:62" pos:end="847:71"><expr pos:start="847:62" pos:end="847:71"><name pos:start="847:62" pos:end="847:71">canrestore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="849:21" pos:end="849:26">break;</break>

                <case pos:start="851:17" pos:end="851:24">case <expr pos:start="851:22" pos:end="851:23"><literal type="number" pos:start="851:22" pos:end="851:23">12</literal></expr>:</case> <comment type="line" pos:start="851:26" pos:end="851:36">// cleanwin</comment>

                    <expr_stmt pos:start="853:21" pos:end="855:72"><expr pos:start="853:21" pos:end="855:71"><call pos:start="853:21" pos:end="855:71"><name pos:start="853:21" pos:end="853:36">tcg_gen_ld32s_tl</name><argument_list pos:start="853:37" pos:end="855:71">(<argument pos:start="853:38" pos:end="853:45"><expr pos:start="853:38" pos:end="853:45"><name pos:start="853:38" pos:end="853:45">cpu_tmp0</name></expr></argument>, <argument pos:start="853:48" pos:end="853:54"><expr pos:start="853:48" pos:end="853:54"><name pos:start="853:48" pos:end="853:54">cpu_env</name></expr></argument>,

                                     <argument pos:start="855:38" pos:end="855:70"><expr pos:start="855:38" pos:end="855:70"><call pos:start="855:38" pos:end="855:70"><name pos:start="855:38" pos:end="855:45">offsetof</name><argument_list pos:start="855:46" pos:end="855:70">(<argument pos:start="855:47" pos:end="855:59"><expr pos:start="855:47" pos:end="855:59"><name pos:start="855:47" pos:end="855:59">CPUSPARCState</name></expr></argument>, <argument pos:start="855:62" pos:end="855:69"><expr pos:start="855:62" pos:end="855:69"><name pos:start="855:62" pos:end="855:69">cleanwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="857:21" pos:end="857:26">break;</break>

                <case pos:start="859:17" pos:end="859:24">case <expr pos:start="859:22" pos:end="859:23"><literal type="number" pos:start="859:22" pos:end="859:23">13</literal></expr>:</case> <comment type="line" pos:start="859:26" pos:end="859:36">// otherwin</comment>

                    <expr_stmt pos:start="861:21" pos:end="863:72"><expr pos:start="861:21" pos:end="863:71"><call pos:start="861:21" pos:end="863:71"><name pos:start="861:21" pos:end="861:36">tcg_gen_ld32s_tl</name><argument_list pos:start="861:37" pos:end="863:71">(<argument pos:start="861:38" pos:end="861:45"><expr pos:start="861:38" pos:end="861:45"><name pos:start="861:38" pos:end="861:45">cpu_tmp0</name></expr></argument>, <argument pos:start="861:48" pos:end="861:54"><expr pos:start="861:48" pos:end="861:54"><name pos:start="861:48" pos:end="861:54">cpu_env</name></expr></argument>,

                                     <argument pos:start="863:38" pos:end="863:70"><expr pos:start="863:38" pos:end="863:70"><call pos:start="863:38" pos:end="863:70"><name pos:start="863:38" pos:end="863:45">offsetof</name><argument_list pos:start="863:46" pos:end="863:70">(<argument pos:start="863:47" pos:end="863:59"><expr pos:start="863:47" pos:end="863:59"><name pos:start="863:47" pos:end="863:59">CPUSPARCState</name></expr></argument>, <argument pos:start="863:62" pos:end="863:69"><expr pos:start="863:62" pos:end="863:69"><name pos:start="863:62" pos:end="863:69">otherwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="865:21" pos:end="865:26">break;</break>

                <case pos:start="867:17" pos:end="867:24">case <expr pos:start="867:22" pos:end="867:23"><literal type="number" pos:start="867:22" pos:end="867:23">14</literal></expr>:</case> <comment type="line" pos:start="867:26" pos:end="867:34">// wstate</comment>

                    <expr_stmt pos:start="869:21" pos:end="871:70"><expr pos:start="869:21" pos:end="871:69"><call pos:start="869:21" pos:end="871:69"><name pos:start="869:21" pos:end="869:36">tcg_gen_ld32s_tl</name><argument_list pos:start="869:37" pos:end="871:69">(<argument pos:start="869:38" pos:end="869:45"><expr pos:start="869:38" pos:end="869:45"><name pos:start="869:38" pos:end="869:45">cpu_tmp0</name></expr></argument>, <argument pos:start="869:48" pos:end="869:54"><expr pos:start="869:48" pos:end="869:54"><name pos:start="869:48" pos:end="869:54">cpu_env</name></expr></argument>,

                                     <argument pos:start="871:38" pos:end="871:68"><expr pos:start="871:38" pos:end="871:68"><call pos:start="871:38" pos:end="871:68"><name pos:start="871:38" pos:end="871:45">offsetof</name><argument_list pos:start="871:46" pos:end="871:68">(<argument pos:start="871:47" pos:end="871:59"><expr pos:start="871:47" pos:end="871:59"><name pos:start="871:47" pos:end="871:59">CPUSPARCState</name></expr></argument>, <argument pos:start="871:62" pos:end="871:67"><expr pos:start="871:62" pos:end="871:67"><name pos:start="871:62" pos:end="871:67">wstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="873:21" pos:end="873:26">break;</break>

                <case pos:start="875:17" pos:end="875:24">case <expr pos:start="875:22" pos:end="875:23"><literal type="number" pos:start="875:22" pos:end="875:23">16</literal></expr>:</case> <comment type="line" pos:start="875:26" pos:end="875:37">// UA2005 gl</comment>

                    <expr_stmt pos:start="877:21" pos:end="877:45"><expr pos:start="877:21" pos:end="877:44"><call pos:start="877:21" pos:end="877:44"><name pos:start="877:21" pos:end="877:36">CHECK_IU_FEATURE</name><argument_list pos:start="877:37" pos:end="877:44">(<argument pos:start="877:38" pos:end="877:39"><expr pos:start="877:38" pos:end="877:39"><name pos:start="877:38" pos:end="877:39">dc</name></expr></argument>, <argument pos:start="877:42" pos:end="877:43"><expr pos:start="877:42" pos:end="877:43"><name pos:start="877:42" pos:end="877:43">GL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="879:21" pos:end="881:66"><expr pos:start="879:21" pos:end="881:65"><call pos:start="879:21" pos:end="881:65"><name pos:start="879:21" pos:end="879:36">tcg_gen_ld32s_tl</name><argument_list pos:start="879:37" pos:end="881:65">(<argument pos:start="879:38" pos:end="879:45"><expr pos:start="879:38" pos:end="879:45"><name pos:start="879:38" pos:end="879:45">cpu_tmp0</name></expr></argument>, <argument pos:start="879:48" pos:end="879:54"><expr pos:start="879:48" pos:end="879:54"><name pos:start="879:48" pos:end="879:54">cpu_env</name></expr></argument>,

                                     <argument pos:start="881:38" pos:end="881:64"><expr pos:start="881:38" pos:end="881:64"><call pos:start="881:38" pos:end="881:64"><name pos:start="881:38" pos:end="881:45">offsetof</name><argument_list pos:start="881:46" pos:end="881:64">(<argument pos:start="881:47" pos:end="881:59"><expr pos:start="881:47" pos:end="881:59"><name pos:start="881:47" pos:end="881:59">CPUSPARCState</name></expr></argument>, <argument pos:start="881:62" pos:end="881:63"><expr pos:start="881:62" pos:end="881:63"><name pos:start="881:62" pos:end="881:63">gl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="883:21" pos:end="883:26">break;</break>

                <case pos:start="885:17" pos:end="885:24">case <expr pos:start="885:22" pos:end="885:23"><literal type="number" pos:start="885:22" pos:end="885:23">26</literal></expr>:</case> <comment type="line" pos:start="885:26" pos:end="885:48">// UA2005 strand status</comment>

                    <expr_stmt pos:start="887:21" pos:end="887:47"><expr pos:start="887:21" pos:end="887:46"><call pos:start="887:21" pos:end="887:46"><name pos:start="887:21" pos:end="887:36">CHECK_IU_FEATURE</name><argument_list pos:start="887:37" pos:end="887:46">(<argument pos:start="887:38" pos:end="887:39"><expr pos:start="887:38" pos:end="887:39"><name pos:start="887:38" pos:end="887:39">dc</name></expr></argument>, <argument pos:start="887:42" pos:end="887:45"><expr pos:start="887:42" pos:end="887:45"><name pos:start="887:42" pos:end="887:45">HYPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="889:21" pos:end="891:39"><if pos:start="889:21" pos:end="891:39">if <condition pos:start="889:24" pos:end="889:40">(<expr pos:start="889:25" pos:end="889:39"><operator pos:start="889:25" pos:end="889:25">!</operator><call pos:start="889:26" pos:end="889:39"><name pos:start="889:26" pos:end="889:35">hypervisor</name><argument_list pos:start="889:36" pos:end="889:39">(<argument pos:start="889:37" pos:end="889:38"><expr pos:start="889:37" pos:end="889:38"><name pos:start="889:37" pos:end="889:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="891:25" pos:end="891:39"><block_content pos:start="891:25" pos:end="891:39">

                        <goto pos:start="891:25" pos:end="891:39">goto <name pos:start="891:30" pos:end="891:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="893:21" pos:end="893:54"><expr pos:start="893:21" pos:end="893:53"><call pos:start="893:21" pos:end="893:53"><name pos:start="893:21" pos:end="893:34">tcg_gen_mov_tl</name><argument_list pos:start="893:35" pos:end="893:53">(<argument pos:start="893:36" pos:end="893:43"><expr pos:start="893:36" pos:end="893:43"><name pos:start="893:36" pos:end="893:43">cpu_tmp0</name></expr></argument>, <argument pos:start="893:46" pos:end="893:52"><expr pos:start="893:46" pos:end="893:52"><name pos:start="893:46" pos:end="893:52">cpu_ssr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="895:21" pos:end="895:26">break;</break>

                <case pos:start="897:17" pos:end="897:24">case <expr pos:start="897:22" pos:end="897:23"><literal type="number" pos:start="897:22" pos:end="897:23">31</literal></expr>:</case> <comment type="line" pos:start="897:26" pos:end="897:31">// ver</comment>

                    <expr_stmt pos:start="899:21" pos:end="899:54"><expr pos:start="899:21" pos:end="899:53"><call pos:start="899:21" pos:end="899:53"><name pos:start="899:21" pos:end="899:34">tcg_gen_mov_tl</name><argument_list pos:start="899:35" pos:end="899:53">(<argument pos:start="899:36" pos:end="899:43"><expr pos:start="899:36" pos:end="899:43"><name pos:start="899:36" pos:end="899:43">cpu_tmp0</name></expr></argument>, <argument pos:start="899:46" pos:end="899:52"><expr pos:start="899:46" pos:end="899:52"><name pos:start="899:46" pos:end="899:52">cpu_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="901:21" pos:end="901:26">break;</break>

                <case pos:start="903:17" pos:end="903:24">case <expr pos:start="903:22" pos:end="903:23"><literal type="number" pos:start="903:22" pos:end="903:23">15</literal></expr>:</case> <comment type="line" pos:start="903:26" pos:end="903:30">// fq</comment>

                <default pos:start="905:17" pos:end="905:24">default:</default>

                    <goto pos:start="907:21" pos:end="907:38">goto <name pos:start="907:26" pos:end="907:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

<cpp:else pos:start="911:1" pos:end="911:5">#<cpp:directive pos:start="911:2" pos:end="911:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="913:17" pos:end="916:0"><expr pos:start="913:17" pos:end="913:53"><call pos:start="913:17" pos:end="913:53"><name pos:start="913:17" pos:end="913:34">tcg_gen_ext_i32_tl</name><argument_list pos:start="913:35" pos:end="913:53">(<argument pos:start="913:36" pos:end="913:43"><expr pos:start="913:36" pos:end="913:43"><name pos:start="913:36" pos:end="913:43">cpu_tmp0</name></expr></argument>, <argument pos:start="913:46" pos:end="913:52"><expr pos:start="913:46" pos:end="913:52"><name pos:start="913:46" pos:end="913:52">cpu_wim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="915:1" pos:end="915:6">#<cpp:directive pos:start="915:2" pos:end="915:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="917:17" pos:end="917:48"><expr pos:start="917:17" pos:end="917:47"><call pos:start="917:17" pos:end="917:47"><name pos:start="917:17" pos:end="917:29">gen_store_gpr</name><argument_list pos:start="917:30" pos:end="917:47">(<argument pos:start="917:31" pos:end="917:32"><expr pos:start="917:31" pos:end="917:32"><name pos:start="917:31" pos:end="917:32">dc</name></expr></argument>, <argument pos:start="917:35" pos:end="917:36"><expr pos:start="917:35" pos:end="917:36"><name pos:start="917:35" pos:end="917:36">rd</name></expr></argument>, <argument pos:start="917:39" pos:end="917:46"><expr pos:start="917:39" pos:end="917:46"><name pos:start="917:39" pos:end="917:46">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="919:17" pos:end="919:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="921:15" pos:end="943:13">else if <condition pos:start="921:23" pos:end="921:35">(<expr pos:start="921:24" pos:end="921:34"><name pos:start="921:24" pos:end="921:26">xop</name> <operator pos:start="921:28" pos:end="921:29">==</operator> <literal type="number" pos:start="921:31" pos:end="921:34">0x2b</literal></expr>)</condition> <block pos:start="921:37" pos:end="943:13">{<block_content pos:start="925:17" pos:end="942:0"> <comment type="block" pos:start="921:39" pos:end="921:61">/* rdtbr / V9 flushw */</comment>

<cpp:ifdef pos:start="923:1" pos:end="923:21">#<cpp:directive pos:start="923:2" pos:end="923:6">ifdef</cpp:directive> <name pos:start="923:8" pos:end="923:21">TARGET_SPARC64</name></cpp:ifdef>

                <expr_stmt pos:start="925:17" pos:end="925:31"><expr pos:start="925:17" pos:end="925:30"><call pos:start="925:17" pos:end="925:30"><name pos:start="925:17" pos:end="925:26">save_state</name><argument_list pos:start="925:27" pos:end="925:30">(<argument pos:start="925:28" pos:end="925:29"><expr pos:start="925:28" pos:end="925:29"><name pos:start="925:28" pos:end="925:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="927:17" pos:end="930:0"><expr pos:start="927:17" pos:end="927:42"><call pos:start="927:17" pos:end="927:42"><name pos:start="927:17" pos:end="927:33">gen_helper_flushw</name><argument_list pos:start="927:34" pos:end="927:42">(<argument pos:start="927:35" pos:end="927:41"><expr pos:start="927:35" pos:end="927:41"><name pos:start="927:35" pos:end="927:41">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="929:1" pos:end="929:5">#<cpp:directive pos:start="929:2" pos:end="929:5">else</cpp:directive></cpp:else>

                <if_stmt pos:start="931:17" pos:end="933:35"><if pos:start="931:17" pos:end="933:35">if <condition pos:start="931:20" pos:end="931:36">(<expr pos:start="931:21" pos:end="931:35"><operator pos:start="931:21" pos:end="931:21">!</operator><call pos:start="931:22" pos:end="931:35"><name pos:start="931:22" pos:end="931:31">supervisor</name><argument_list pos:start="931:32" pos:end="931:35">(<argument pos:start="931:33" pos:end="931:34"><expr pos:start="931:33" pos:end="931:34"><name pos:start="931:33" pos:end="931:34">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="933:21" pos:end="933:35"><block_content pos:start="933:21" pos:end="933:35">

                    <goto pos:start="933:21" pos:end="933:35">goto <name pos:start="933:26" pos:end="933:34">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="935:17" pos:end="938:0"><expr pos:start="935:17" pos:end="935:46"><call pos:start="935:17" pos:end="935:46"><name pos:start="935:17" pos:end="935:29">gen_store_gpr</name><argument_list pos:start="935:30" pos:end="935:46">(<argument pos:start="935:31" pos:end="935:32"><expr pos:start="935:31" pos:end="935:32"><name pos:start="935:31" pos:end="935:32">dc</name></expr></argument>, <argument pos:start="935:35" pos:end="935:36"><expr pos:start="935:35" pos:end="935:36"><name pos:start="935:35" pos:end="935:36">rd</name></expr></argument>, <argument pos:start="935:39" pos:end="935:45"><expr pos:start="935:39" pos:end="935:45"><name pos:start="935:39" pos:end="935:45">cpu_tbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="937:1" pos:end="937:6">#<cpp:directive pos:start="937:2" pos:end="937:6">endif</cpp:directive></cpp:endif>

                <break pos:start="939:17" pos:end="942:0">break;</break>

<cpp:endif pos:start="941:1" pos:end="941:6">#<cpp:directive pos:start="941:2" pos:end="941:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="943:15" pos:end="1287:13">else if <condition pos:start="943:23" pos:end="943:35">(<expr pos:start="943:24" pos:end="943:34"><name pos:start="943:24" pos:end="943:26">xop</name> <operator pos:start="943:28" pos:end="943:29">==</operator> <literal type="number" pos:start="943:31" pos:end="943:34">0x34</literal></expr>)</condition> <block pos:start="943:37" pos:end="1287:13">{<block_content pos:start="945:17" pos:end="1285:17">   <comment type="block" pos:start="943:41" pos:end="943:60">/* FPU Operations */</comment>

                <if_stmt pos:start="945:17" pos:end="949:17"><if pos:start="945:17" pos:end="949:17">if <condition pos:start="945:20" pos:end="945:41">(<expr pos:start="945:21" pos:end="945:40"><call pos:start="945:21" pos:end="945:40"><name pos:start="945:21" pos:end="945:36">gen_trap_ifnofpu</name><argument_list pos:start="945:37" pos:end="945:40">(<argument pos:start="945:38" pos:end="945:39"><expr pos:start="945:38" pos:end="945:39"><name pos:start="945:38" pos:end="945:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="945:43" pos:end="949:17">{<block_content pos:start="947:21" pos:end="947:34">

                    <goto pos:start="947:21" pos:end="947:34">goto <name pos:start="947:26" pos:end="947:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="951:17" pos:end="951:49"><expr pos:start="951:17" pos:end="951:48"><call pos:start="951:17" pos:end="951:48"><name pos:start="951:17" pos:end="951:46">gen_op_clear_ieee_excp_and_FTT</name><argument_list pos:start="951:47" pos:end="951:48">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="953:17" pos:end="953:46"><expr pos:start="953:17" pos:end="953:45"><name pos:start="953:17" pos:end="953:19">rs1</name> <operator pos:start="953:21" pos:end="953:21">=</operator> <call pos:start="953:23" pos:end="953:45"><name pos:start="953:23" pos:end="953:31">GET_FIELD</name><argument_list pos:start="953:32" pos:end="953:45">(<argument pos:start="953:33" pos:end="953:36"><expr pos:start="953:33" pos:end="953:36"><name pos:start="953:33" pos:end="953:36">insn</name></expr></argument>, <argument pos:start="953:39" pos:end="953:40"><expr pos:start="953:39" pos:end="953:40"><literal type="number" pos:start="953:39" pos:end="953:40">13</literal></expr></argument>, <argument pos:start="953:43" pos:end="953:44"><expr pos:start="953:43" pos:end="953:44"><literal type="number" pos:start="953:43" pos:end="953:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="955:17" pos:end="955:46"><expr pos:start="955:17" pos:end="955:45"><name pos:start="955:17" pos:end="955:19">rs2</name> <operator pos:start="955:21" pos:end="955:21">=</operator> <call pos:start="955:23" pos:end="955:45"><name pos:start="955:23" pos:end="955:31">GET_FIELD</name><argument_list pos:start="955:32" pos:end="955:45">(<argument pos:start="955:33" pos:end="955:36"><expr pos:start="955:33" pos:end="955:36"><name pos:start="955:33" pos:end="955:36">insn</name></expr></argument>, <argument pos:start="955:39" pos:end="955:40"><expr pos:start="955:39" pos:end="955:40"><literal type="number" pos:start="955:39" pos:end="955:40">27</literal></expr></argument>, <argument pos:start="955:43" pos:end="955:44"><expr pos:start="955:43" pos:end="955:44"><literal type="number" pos:start="955:43" pos:end="955:44">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="957:17" pos:end="957:46"><expr pos:start="957:17" pos:end="957:45"><name pos:start="957:17" pos:end="957:19">xop</name> <operator pos:start="957:21" pos:end="957:21">=</operator> <call pos:start="957:23" pos:end="957:45"><name pos:start="957:23" pos:end="957:31">GET_FIELD</name><argument_list pos:start="957:32" pos:end="957:45">(<argument pos:start="957:33" pos:end="957:36"><expr pos:start="957:33" pos:end="957:36"><name pos:start="957:33" pos:end="957:36">insn</name></expr></argument>, <argument pos:start="957:39" pos:end="957:40"><expr pos:start="957:39" pos:end="957:40"><literal type="number" pos:start="957:39" pos:end="957:40">18</literal></expr></argument>, <argument pos:start="957:43" pos:end="957:44"><expr pos:start="957:43" pos:end="957:44"><literal type="number" pos:start="957:43" pos:end="957:44">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="959:17" pos:end="959:31"><expr pos:start="959:17" pos:end="959:30"><call pos:start="959:17" pos:end="959:30"><name pos:start="959:17" pos:end="959:26">save_state</name><argument_list pos:start="959:27" pos:end="959:30">(<argument pos:start="959:28" pos:end="959:29"><expr pos:start="959:28" pos:end="959:29"><name pos:start="959:28" pos:end="959:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="961:17" pos:end="1285:17">switch <condition pos:start="961:24" pos:end="961:28">(<expr pos:start="961:25" pos:end="961:27"><name pos:start="961:25" pos:end="961:27">xop</name></expr>)</condition> <block pos:start="961:30" pos:end="1285:17">{<block_content pos:start="963:17" pos:end="1283:38">

                <case pos:start="963:17" pos:end="963:25">case <expr pos:start="963:22" pos:end="963:24"><literal type="number" pos:start="963:22" pos:end="963:24">0x1</literal></expr>:</case> <comment type="block" pos:start="963:27" pos:end="963:37">/* fmovs */</comment>

                    <expr_stmt pos:start="965:21" pos:end="965:58"><expr pos:start="965:21" pos:end="965:57"><name pos:start="965:21" pos:end="965:31">cpu_src1_32</name> <operator pos:start="965:33" pos:end="965:33">=</operator> <call pos:start="965:35" pos:end="965:57"><name pos:start="965:35" pos:end="965:48">gen_load_fpr_F</name><argument_list pos:start="965:49" pos:end="965:57">(<argument pos:start="965:50" pos:end="965:51"><expr pos:start="965:50" pos:end="965:51"><name pos:start="965:50" pos:end="965:51">dc</name></expr></argument>, <argument pos:start="965:54" pos:end="965:56"><expr pos:start="965:54" pos:end="965:56"><name pos:start="965:54" pos:end="965:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="967:21" pos:end="967:57"><expr pos:start="967:21" pos:end="967:56"><call pos:start="967:21" pos:end="967:56"><name pos:start="967:21" pos:end="967:35">gen_store_fpr_F</name><argument_list pos:start="967:36" pos:end="967:56">(<argument pos:start="967:37" pos:end="967:38"><expr pos:start="967:37" pos:end="967:38"><name pos:start="967:37" pos:end="967:38">dc</name></expr></argument>, <argument pos:start="967:41" pos:end="967:42"><expr pos:start="967:41" pos:end="967:42"><name pos:start="967:41" pos:end="967:42">rd</name></expr></argument>, <argument pos:start="967:45" pos:end="967:55"><expr pos:start="967:45" pos:end="967:55"><name pos:start="967:45" pos:end="967:55">cpu_src1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="969:21" pos:end="969:26">break;</break>

                <case pos:start="971:17" pos:end="971:25">case <expr pos:start="971:22" pos:end="971:24"><literal type="number" pos:start="971:22" pos:end="971:24">0x5</literal></expr>:</case> <comment type="block" pos:start="971:27" pos:end="971:37">/* fnegs */</comment>

                    <expr_stmt pos:start="973:21" pos:end="973:65"><expr pos:start="973:21" pos:end="973:64"><call pos:start="973:21" pos:end="973:64"><name pos:start="973:21" pos:end="973:33">gen_ne_fop_FF</name><argument_list pos:start="973:34" pos:end="973:64">(<argument pos:start="973:35" pos:end="973:36"><expr pos:start="973:35" pos:end="973:36"><name pos:start="973:35" pos:end="973:36">dc</name></expr></argument>, <argument pos:start="973:39" pos:end="973:40"><expr pos:start="973:39" pos:end="973:40"><name pos:start="973:39" pos:end="973:40">rd</name></expr></argument>, <argument pos:start="973:43" pos:end="973:45"><expr pos:start="973:43" pos:end="973:45"><name pos:start="973:43" pos:end="973:45">rs2</name></expr></argument>, <argument pos:start="973:48" pos:end="973:63"><expr pos:start="973:48" pos:end="973:63"><name pos:start="973:48" pos:end="973:63">gen_helper_fnegs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="975:21" pos:end="975:26">break;</break>

                <case pos:start="977:17" pos:end="977:25">case <expr pos:start="977:22" pos:end="977:24"><literal type="number" pos:start="977:22" pos:end="977:24">0x9</literal></expr>:</case> <comment type="block" pos:start="977:27" pos:end="977:37">/* fabss */</comment>

                    <expr_stmt pos:start="979:21" pos:end="979:65"><expr pos:start="979:21" pos:end="979:64"><call pos:start="979:21" pos:end="979:64"><name pos:start="979:21" pos:end="979:33">gen_ne_fop_FF</name><argument_list pos:start="979:34" pos:end="979:64">(<argument pos:start="979:35" pos:end="979:36"><expr pos:start="979:35" pos:end="979:36"><name pos:start="979:35" pos:end="979:36">dc</name></expr></argument>, <argument pos:start="979:39" pos:end="979:40"><expr pos:start="979:39" pos:end="979:40"><name pos:start="979:39" pos:end="979:40">rd</name></expr></argument>, <argument pos:start="979:43" pos:end="979:45"><expr pos:start="979:43" pos:end="979:45"><name pos:start="979:43" pos:end="979:45">rs2</name></expr></argument>, <argument pos:start="979:48" pos:end="979:63"><expr pos:start="979:48" pos:end="979:63"><name pos:start="979:48" pos:end="979:63">gen_helper_fabss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="981:21" pos:end="981:26">break;</break>

                <case pos:start="983:17" pos:end="983:26">case <expr pos:start="983:22" pos:end="983:25"><literal type="number" pos:start="983:22" pos:end="983:25">0x29</literal></expr>:</case> <comment type="block" pos:start="983:28" pos:end="983:39">/* fsqrts */</comment>

                    <expr_stmt pos:start="985:21" pos:end="985:49"><expr pos:start="985:21" pos:end="985:48"><call pos:start="985:21" pos:end="985:48"><name pos:start="985:21" pos:end="985:37">CHECK_FPU_FEATURE</name><argument_list pos:start="985:38" pos:end="985:48">(<argument pos:start="985:39" pos:end="985:40"><expr pos:start="985:39" pos:end="985:40"><name pos:start="985:39" pos:end="985:40">dc</name></expr></argument>, <argument pos:start="985:43" pos:end="985:47"><expr pos:start="985:43" pos:end="985:47"><name pos:start="985:43" pos:end="985:47">FSQRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="987:21" pos:end="987:63"><expr pos:start="987:21" pos:end="987:62"><call pos:start="987:21" pos:end="987:62"><name pos:start="987:21" pos:end="987:30">gen_fop_FF</name><argument_list pos:start="987:31" pos:end="987:62">(<argument pos:start="987:32" pos:end="987:33"><expr pos:start="987:32" pos:end="987:33"><name pos:start="987:32" pos:end="987:33">dc</name></expr></argument>, <argument pos:start="987:36" pos:end="987:37"><expr pos:start="987:36" pos:end="987:37"><name pos:start="987:36" pos:end="987:37">rd</name></expr></argument>, <argument pos:start="987:40" pos:end="987:42"><expr pos:start="987:40" pos:end="987:42"><name pos:start="987:40" pos:end="987:42">rs2</name></expr></argument>, <argument pos:start="987:45" pos:end="987:61"><expr pos:start="987:45" pos:end="987:61"><name pos:start="987:45" pos:end="987:61">gen_helper_fsqrts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="989:21" pos:end="989:26">break;</break>

                <case pos:start="991:17" pos:end="991:26">case <expr pos:start="991:22" pos:end="991:25"><literal type="number" pos:start="991:22" pos:end="991:25">0x2a</literal></expr>:</case> <comment type="block" pos:start="991:28" pos:end="991:39">/* fsqrtd */</comment>

                    <expr_stmt pos:start="993:21" pos:end="993:49"><expr pos:start="993:21" pos:end="993:48"><call pos:start="993:21" pos:end="993:48"><name pos:start="993:21" pos:end="993:37">CHECK_FPU_FEATURE</name><argument_list pos:start="993:38" pos:end="993:48">(<argument pos:start="993:39" pos:end="993:40"><expr pos:start="993:39" pos:end="993:40"><name pos:start="993:39" pos:end="993:40">dc</name></expr></argument>, <argument pos:start="993:43" pos:end="993:47"><expr pos:start="993:43" pos:end="993:47"><name pos:start="993:43" pos:end="993:47">FSQRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="995:21" pos:end="995:63"><expr pos:start="995:21" pos:end="995:62"><call pos:start="995:21" pos:end="995:62"><name pos:start="995:21" pos:end="995:30">gen_fop_DD</name><argument_list pos:start="995:31" pos:end="995:62">(<argument pos:start="995:32" pos:end="995:33"><expr pos:start="995:32" pos:end="995:33"><name pos:start="995:32" pos:end="995:33">dc</name></expr></argument>, <argument pos:start="995:36" pos:end="995:37"><expr pos:start="995:36" pos:end="995:37"><name pos:start="995:36" pos:end="995:37">rd</name></expr></argument>, <argument pos:start="995:40" pos:end="995:42"><expr pos:start="995:40" pos:end="995:42"><name pos:start="995:40" pos:end="995:42">rs2</name></expr></argument>, <argument pos:start="995:45" pos:end="995:61"><expr pos:start="995:45" pos:end="995:61"><name pos:start="995:45" pos:end="995:61">gen_helper_fsqrtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="997:21" pos:end="997:26">break;</break>

                <case pos:start="999:17" pos:end="999:26">case <expr pos:start="999:22" pos:end="999:25"><literal type="number" pos:start="999:22" pos:end="999:25">0x2b</literal></expr>:</case> <comment type="block" pos:start="999:28" pos:end="999:39">/* fsqrtq */</comment>

                    <expr_stmt pos:start="1001:21" pos:end="1001:52"><expr pos:start="1001:21" pos:end="1001:51"><call pos:start="1001:21" pos:end="1001:51"><name pos:start="1001:21" pos:end="1001:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1001:38" pos:end="1001:51">(<argument pos:start="1001:39" pos:end="1001:40"><expr pos:start="1001:39" pos:end="1001:40"><name pos:start="1001:39" pos:end="1001:40">dc</name></expr></argument>, <argument pos:start="1001:43" pos:end="1001:50"><expr pos:start="1001:43" pos:end="1001:50"><name pos:start="1001:43" pos:end="1001:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1003:21" pos:end="1003:63"><expr pos:start="1003:21" pos:end="1003:62"><call pos:start="1003:21" pos:end="1003:62"><name pos:start="1003:21" pos:end="1003:30">gen_fop_QQ</name><argument_list pos:start="1003:31" pos:end="1003:62">(<argument pos:start="1003:32" pos:end="1003:33"><expr pos:start="1003:32" pos:end="1003:33"><name pos:start="1003:32" pos:end="1003:33">dc</name></expr></argument>, <argument pos:start="1003:36" pos:end="1003:37"><expr pos:start="1003:36" pos:end="1003:37"><name pos:start="1003:36" pos:end="1003:37">rd</name></expr></argument>, <argument pos:start="1003:40" pos:end="1003:42"><expr pos:start="1003:40" pos:end="1003:42"><name pos:start="1003:40" pos:end="1003:42">rs2</name></expr></argument>, <argument pos:start="1003:45" pos:end="1003:61"><expr pos:start="1003:45" pos:end="1003:61"><name pos:start="1003:45" pos:end="1003:61">gen_helper_fsqrtq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1005:21" pos:end="1005:26">break;</break>

                <case pos:start="1007:17" pos:end="1007:26">case <expr pos:start="1007:22" pos:end="1007:25"><literal type="number" pos:start="1007:22" pos:end="1007:25">0x41</literal></expr>:</case> <comment type="block" pos:start="1007:28" pos:end="1007:38">/* fadds */</comment>

                    <expr_stmt pos:start="1009:21" pos:end="1009:68"><expr pos:start="1009:21" pos:end="1009:67"><call pos:start="1009:21" pos:end="1009:67"><name pos:start="1009:21" pos:end="1009:31">gen_fop_FFF</name><argument_list pos:start="1009:32" pos:end="1009:67">(<argument pos:start="1009:33" pos:end="1009:34"><expr pos:start="1009:33" pos:end="1009:34"><name pos:start="1009:33" pos:end="1009:34">dc</name></expr></argument>, <argument pos:start="1009:37" pos:end="1009:38"><expr pos:start="1009:37" pos:end="1009:38"><name pos:start="1009:37" pos:end="1009:38">rd</name></expr></argument>, <argument pos:start="1009:41" pos:end="1009:43"><expr pos:start="1009:41" pos:end="1009:43"><name pos:start="1009:41" pos:end="1009:43">rs1</name></expr></argument>, <argument pos:start="1009:46" pos:end="1009:48"><expr pos:start="1009:46" pos:end="1009:48"><name pos:start="1009:46" pos:end="1009:48">rs2</name></expr></argument>, <argument pos:start="1009:51" pos:end="1009:66"><expr pos:start="1009:51" pos:end="1009:66"><name pos:start="1009:51" pos:end="1009:66">gen_helper_fadds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1011:21" pos:end="1011:26">break;</break>

                <case pos:start="1013:17" pos:end="1013:26">case <expr pos:start="1013:22" pos:end="1013:25"><literal type="number" pos:start="1013:22" pos:end="1013:25">0x42</literal></expr>:</case> <comment type="block" pos:start="1013:28" pos:end="1013:38">/* faddd */</comment>

                    <expr_stmt pos:start="1015:21" pos:end="1015:68"><expr pos:start="1015:21" pos:end="1015:67"><call pos:start="1015:21" pos:end="1015:67"><name pos:start="1015:21" pos:end="1015:31">gen_fop_DDD</name><argument_list pos:start="1015:32" pos:end="1015:67">(<argument pos:start="1015:33" pos:end="1015:34"><expr pos:start="1015:33" pos:end="1015:34"><name pos:start="1015:33" pos:end="1015:34">dc</name></expr></argument>, <argument pos:start="1015:37" pos:end="1015:38"><expr pos:start="1015:37" pos:end="1015:38"><name pos:start="1015:37" pos:end="1015:38">rd</name></expr></argument>, <argument pos:start="1015:41" pos:end="1015:43"><expr pos:start="1015:41" pos:end="1015:43"><name pos:start="1015:41" pos:end="1015:43">rs1</name></expr></argument>, <argument pos:start="1015:46" pos:end="1015:48"><expr pos:start="1015:46" pos:end="1015:48"><name pos:start="1015:46" pos:end="1015:48">rs2</name></expr></argument>, <argument pos:start="1015:51" pos:end="1015:66"><expr pos:start="1015:51" pos:end="1015:66"><name pos:start="1015:51" pos:end="1015:66">gen_helper_faddd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1017:21" pos:end="1017:26">break;</break>

                <case pos:start="1019:17" pos:end="1019:26">case <expr pos:start="1019:22" pos:end="1019:25"><literal type="number" pos:start="1019:22" pos:end="1019:25">0x43</literal></expr>:</case> <comment type="block" pos:start="1019:28" pos:end="1019:38">/* faddq */</comment>

                    <expr_stmt pos:start="1021:21" pos:end="1021:52"><expr pos:start="1021:21" pos:end="1021:51"><call pos:start="1021:21" pos:end="1021:51"><name pos:start="1021:21" pos:end="1021:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1021:38" pos:end="1021:51">(<argument pos:start="1021:39" pos:end="1021:40"><expr pos:start="1021:39" pos:end="1021:40"><name pos:start="1021:39" pos:end="1021:40">dc</name></expr></argument>, <argument pos:start="1021:43" pos:end="1021:50"><expr pos:start="1021:43" pos:end="1021:50"><name pos:start="1021:43" pos:end="1021:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1023:21" pos:end="1023:68"><expr pos:start="1023:21" pos:end="1023:67"><call pos:start="1023:21" pos:end="1023:67"><name pos:start="1023:21" pos:end="1023:31">gen_fop_QQQ</name><argument_list pos:start="1023:32" pos:end="1023:67">(<argument pos:start="1023:33" pos:end="1023:34"><expr pos:start="1023:33" pos:end="1023:34"><name pos:start="1023:33" pos:end="1023:34">dc</name></expr></argument>, <argument pos:start="1023:37" pos:end="1023:38"><expr pos:start="1023:37" pos:end="1023:38"><name pos:start="1023:37" pos:end="1023:38">rd</name></expr></argument>, <argument pos:start="1023:41" pos:end="1023:43"><expr pos:start="1023:41" pos:end="1023:43"><name pos:start="1023:41" pos:end="1023:43">rs1</name></expr></argument>, <argument pos:start="1023:46" pos:end="1023:48"><expr pos:start="1023:46" pos:end="1023:48"><name pos:start="1023:46" pos:end="1023:48">rs2</name></expr></argument>, <argument pos:start="1023:51" pos:end="1023:66"><expr pos:start="1023:51" pos:end="1023:66"><name pos:start="1023:51" pos:end="1023:66">gen_helper_faddq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1025:21" pos:end="1025:26">break;</break>

                <case pos:start="1027:17" pos:end="1027:26">case <expr pos:start="1027:22" pos:end="1027:25"><literal type="number" pos:start="1027:22" pos:end="1027:25">0x45</literal></expr>:</case> <comment type="block" pos:start="1027:28" pos:end="1027:38">/* fsubs */</comment>

                    <expr_stmt pos:start="1029:21" pos:end="1029:68"><expr pos:start="1029:21" pos:end="1029:67"><call pos:start="1029:21" pos:end="1029:67"><name pos:start="1029:21" pos:end="1029:31">gen_fop_FFF</name><argument_list pos:start="1029:32" pos:end="1029:67">(<argument pos:start="1029:33" pos:end="1029:34"><expr pos:start="1029:33" pos:end="1029:34"><name pos:start="1029:33" pos:end="1029:34">dc</name></expr></argument>, <argument pos:start="1029:37" pos:end="1029:38"><expr pos:start="1029:37" pos:end="1029:38"><name pos:start="1029:37" pos:end="1029:38">rd</name></expr></argument>, <argument pos:start="1029:41" pos:end="1029:43"><expr pos:start="1029:41" pos:end="1029:43"><name pos:start="1029:41" pos:end="1029:43">rs1</name></expr></argument>, <argument pos:start="1029:46" pos:end="1029:48"><expr pos:start="1029:46" pos:end="1029:48"><name pos:start="1029:46" pos:end="1029:48">rs2</name></expr></argument>, <argument pos:start="1029:51" pos:end="1029:66"><expr pos:start="1029:51" pos:end="1029:66"><name pos:start="1029:51" pos:end="1029:66">gen_helper_fsubs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1031:21" pos:end="1031:26">break;</break>

                <case pos:start="1033:17" pos:end="1033:26">case <expr pos:start="1033:22" pos:end="1033:25"><literal type="number" pos:start="1033:22" pos:end="1033:25">0x46</literal></expr>:</case> <comment type="block" pos:start="1033:28" pos:end="1033:38">/* fsubd */</comment>

                    <expr_stmt pos:start="1035:21" pos:end="1035:68"><expr pos:start="1035:21" pos:end="1035:67"><call pos:start="1035:21" pos:end="1035:67"><name pos:start="1035:21" pos:end="1035:31">gen_fop_DDD</name><argument_list pos:start="1035:32" pos:end="1035:67">(<argument pos:start="1035:33" pos:end="1035:34"><expr pos:start="1035:33" pos:end="1035:34"><name pos:start="1035:33" pos:end="1035:34">dc</name></expr></argument>, <argument pos:start="1035:37" pos:end="1035:38"><expr pos:start="1035:37" pos:end="1035:38"><name pos:start="1035:37" pos:end="1035:38">rd</name></expr></argument>, <argument pos:start="1035:41" pos:end="1035:43"><expr pos:start="1035:41" pos:end="1035:43"><name pos:start="1035:41" pos:end="1035:43">rs1</name></expr></argument>, <argument pos:start="1035:46" pos:end="1035:48"><expr pos:start="1035:46" pos:end="1035:48"><name pos:start="1035:46" pos:end="1035:48">rs2</name></expr></argument>, <argument pos:start="1035:51" pos:end="1035:66"><expr pos:start="1035:51" pos:end="1035:66"><name pos:start="1035:51" pos:end="1035:66">gen_helper_fsubd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1037:21" pos:end="1037:26">break;</break>

                <case pos:start="1039:17" pos:end="1039:26">case <expr pos:start="1039:22" pos:end="1039:25"><literal type="number" pos:start="1039:22" pos:end="1039:25">0x47</literal></expr>:</case> <comment type="block" pos:start="1039:28" pos:end="1039:38">/* fsubq */</comment>

                    <expr_stmt pos:start="1041:21" pos:end="1041:52"><expr pos:start="1041:21" pos:end="1041:51"><call pos:start="1041:21" pos:end="1041:51"><name pos:start="1041:21" pos:end="1041:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1041:38" pos:end="1041:51">(<argument pos:start="1041:39" pos:end="1041:40"><expr pos:start="1041:39" pos:end="1041:40"><name pos:start="1041:39" pos:end="1041:40">dc</name></expr></argument>, <argument pos:start="1041:43" pos:end="1041:50"><expr pos:start="1041:43" pos:end="1041:50"><name pos:start="1041:43" pos:end="1041:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1043:21" pos:end="1043:68"><expr pos:start="1043:21" pos:end="1043:67"><call pos:start="1043:21" pos:end="1043:67"><name pos:start="1043:21" pos:end="1043:31">gen_fop_QQQ</name><argument_list pos:start="1043:32" pos:end="1043:67">(<argument pos:start="1043:33" pos:end="1043:34"><expr pos:start="1043:33" pos:end="1043:34"><name pos:start="1043:33" pos:end="1043:34">dc</name></expr></argument>, <argument pos:start="1043:37" pos:end="1043:38"><expr pos:start="1043:37" pos:end="1043:38"><name pos:start="1043:37" pos:end="1043:38">rd</name></expr></argument>, <argument pos:start="1043:41" pos:end="1043:43"><expr pos:start="1043:41" pos:end="1043:43"><name pos:start="1043:41" pos:end="1043:43">rs1</name></expr></argument>, <argument pos:start="1043:46" pos:end="1043:48"><expr pos:start="1043:46" pos:end="1043:48"><name pos:start="1043:46" pos:end="1043:48">rs2</name></expr></argument>, <argument pos:start="1043:51" pos:end="1043:66"><expr pos:start="1043:51" pos:end="1043:66"><name pos:start="1043:51" pos:end="1043:66">gen_helper_fsubq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1045:21" pos:end="1045:26">break;</break>

                <case pos:start="1047:17" pos:end="1047:26">case <expr pos:start="1047:22" pos:end="1047:25"><literal type="number" pos:start="1047:22" pos:end="1047:25">0x49</literal></expr>:</case> <comment type="block" pos:start="1047:28" pos:end="1047:38">/* fmuls */</comment>

                    <expr_stmt pos:start="1049:21" pos:end="1049:48"><expr pos:start="1049:21" pos:end="1049:47"><call pos:start="1049:21" pos:end="1049:47"><name pos:start="1049:21" pos:end="1049:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1049:38" pos:end="1049:47">(<argument pos:start="1049:39" pos:end="1049:40"><expr pos:start="1049:39" pos:end="1049:40"><name pos:start="1049:39" pos:end="1049:40">dc</name></expr></argument>, <argument pos:start="1049:43" pos:end="1049:46"><expr pos:start="1049:43" pos:end="1049:46"><name pos:start="1049:43" pos:end="1049:46">FMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1051:21" pos:end="1051:68"><expr pos:start="1051:21" pos:end="1051:67"><call pos:start="1051:21" pos:end="1051:67"><name pos:start="1051:21" pos:end="1051:31">gen_fop_FFF</name><argument_list pos:start="1051:32" pos:end="1051:67">(<argument pos:start="1051:33" pos:end="1051:34"><expr pos:start="1051:33" pos:end="1051:34"><name pos:start="1051:33" pos:end="1051:34">dc</name></expr></argument>, <argument pos:start="1051:37" pos:end="1051:38"><expr pos:start="1051:37" pos:end="1051:38"><name pos:start="1051:37" pos:end="1051:38">rd</name></expr></argument>, <argument pos:start="1051:41" pos:end="1051:43"><expr pos:start="1051:41" pos:end="1051:43"><name pos:start="1051:41" pos:end="1051:43">rs1</name></expr></argument>, <argument pos:start="1051:46" pos:end="1051:48"><expr pos:start="1051:46" pos:end="1051:48"><name pos:start="1051:46" pos:end="1051:48">rs2</name></expr></argument>, <argument pos:start="1051:51" pos:end="1051:66"><expr pos:start="1051:51" pos:end="1051:66"><name pos:start="1051:51" pos:end="1051:66">gen_helper_fmuls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1053:21" pos:end="1053:26">break;</break>

                <case pos:start="1055:17" pos:end="1055:26">case <expr pos:start="1055:22" pos:end="1055:25"><literal type="number" pos:start="1055:22" pos:end="1055:25">0x4a</literal></expr>:</case> <comment type="block" pos:start="1055:28" pos:end="1055:38">/* fmuld */</comment>

                    <expr_stmt pos:start="1057:21" pos:end="1057:48"><expr pos:start="1057:21" pos:end="1057:47"><call pos:start="1057:21" pos:end="1057:47"><name pos:start="1057:21" pos:end="1057:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1057:38" pos:end="1057:47">(<argument pos:start="1057:39" pos:end="1057:40"><expr pos:start="1057:39" pos:end="1057:40"><name pos:start="1057:39" pos:end="1057:40">dc</name></expr></argument>, <argument pos:start="1057:43" pos:end="1057:46"><expr pos:start="1057:43" pos:end="1057:46"><name pos:start="1057:43" pos:end="1057:46">FMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1059:21" pos:end="1059:68"><expr pos:start="1059:21" pos:end="1059:67"><call pos:start="1059:21" pos:end="1059:67"><name pos:start="1059:21" pos:end="1059:31">gen_fop_DDD</name><argument_list pos:start="1059:32" pos:end="1059:67">(<argument pos:start="1059:33" pos:end="1059:34"><expr pos:start="1059:33" pos:end="1059:34"><name pos:start="1059:33" pos:end="1059:34">dc</name></expr></argument>, <argument pos:start="1059:37" pos:end="1059:38"><expr pos:start="1059:37" pos:end="1059:38"><name pos:start="1059:37" pos:end="1059:38">rd</name></expr></argument>, <argument pos:start="1059:41" pos:end="1059:43"><expr pos:start="1059:41" pos:end="1059:43"><name pos:start="1059:41" pos:end="1059:43">rs1</name></expr></argument>, <argument pos:start="1059:46" pos:end="1059:48"><expr pos:start="1059:46" pos:end="1059:48"><name pos:start="1059:46" pos:end="1059:48">rs2</name></expr></argument>, <argument pos:start="1059:51" pos:end="1059:66"><expr pos:start="1059:51" pos:end="1059:66"><name pos:start="1059:51" pos:end="1059:66">gen_helper_fmuld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1061:21" pos:end="1061:26">break;</break>

                <case pos:start="1063:17" pos:end="1063:26">case <expr pos:start="1063:22" pos:end="1063:25"><literal type="number" pos:start="1063:22" pos:end="1063:25">0x4b</literal></expr>:</case> <comment type="block" pos:start="1063:28" pos:end="1063:38">/* fmulq */</comment>

                    <expr_stmt pos:start="1065:21" pos:end="1065:52"><expr pos:start="1065:21" pos:end="1065:51"><call pos:start="1065:21" pos:end="1065:51"><name pos:start="1065:21" pos:end="1065:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1065:38" pos:end="1065:51">(<argument pos:start="1065:39" pos:end="1065:40"><expr pos:start="1065:39" pos:end="1065:40"><name pos:start="1065:39" pos:end="1065:40">dc</name></expr></argument>, <argument pos:start="1065:43" pos:end="1065:50"><expr pos:start="1065:43" pos:end="1065:50"><name pos:start="1065:43" pos:end="1065:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1067:21" pos:end="1067:48"><expr pos:start="1067:21" pos:end="1067:47"><call pos:start="1067:21" pos:end="1067:47"><name pos:start="1067:21" pos:end="1067:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1067:38" pos:end="1067:47">(<argument pos:start="1067:39" pos:end="1067:40"><expr pos:start="1067:39" pos:end="1067:40"><name pos:start="1067:39" pos:end="1067:40">dc</name></expr></argument>, <argument pos:start="1067:43" pos:end="1067:46"><expr pos:start="1067:43" pos:end="1067:46"><name pos:start="1067:43" pos:end="1067:46">FMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1069:21" pos:end="1069:68"><expr pos:start="1069:21" pos:end="1069:67"><call pos:start="1069:21" pos:end="1069:67"><name pos:start="1069:21" pos:end="1069:31">gen_fop_QQQ</name><argument_list pos:start="1069:32" pos:end="1069:67">(<argument pos:start="1069:33" pos:end="1069:34"><expr pos:start="1069:33" pos:end="1069:34"><name pos:start="1069:33" pos:end="1069:34">dc</name></expr></argument>, <argument pos:start="1069:37" pos:end="1069:38"><expr pos:start="1069:37" pos:end="1069:38"><name pos:start="1069:37" pos:end="1069:38">rd</name></expr></argument>, <argument pos:start="1069:41" pos:end="1069:43"><expr pos:start="1069:41" pos:end="1069:43"><name pos:start="1069:41" pos:end="1069:43">rs1</name></expr></argument>, <argument pos:start="1069:46" pos:end="1069:48"><expr pos:start="1069:46" pos:end="1069:48"><name pos:start="1069:46" pos:end="1069:48">rs2</name></expr></argument>, <argument pos:start="1069:51" pos:end="1069:66"><expr pos:start="1069:51" pos:end="1069:66"><name pos:start="1069:51" pos:end="1069:66">gen_helper_fmulq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1071:21" pos:end="1071:26">break;</break>

                <case pos:start="1073:17" pos:end="1073:26">case <expr pos:start="1073:22" pos:end="1073:25"><literal type="number" pos:start="1073:22" pos:end="1073:25">0x4d</literal></expr>:</case> <comment type="block" pos:start="1073:28" pos:end="1073:38">/* fdivs */</comment>

                    <expr_stmt pos:start="1075:21" pos:end="1075:68"><expr pos:start="1075:21" pos:end="1075:67"><call pos:start="1075:21" pos:end="1075:67"><name pos:start="1075:21" pos:end="1075:31">gen_fop_FFF</name><argument_list pos:start="1075:32" pos:end="1075:67">(<argument pos:start="1075:33" pos:end="1075:34"><expr pos:start="1075:33" pos:end="1075:34"><name pos:start="1075:33" pos:end="1075:34">dc</name></expr></argument>, <argument pos:start="1075:37" pos:end="1075:38"><expr pos:start="1075:37" pos:end="1075:38"><name pos:start="1075:37" pos:end="1075:38">rd</name></expr></argument>, <argument pos:start="1075:41" pos:end="1075:43"><expr pos:start="1075:41" pos:end="1075:43"><name pos:start="1075:41" pos:end="1075:43">rs1</name></expr></argument>, <argument pos:start="1075:46" pos:end="1075:48"><expr pos:start="1075:46" pos:end="1075:48"><name pos:start="1075:46" pos:end="1075:48">rs2</name></expr></argument>, <argument pos:start="1075:51" pos:end="1075:66"><expr pos:start="1075:51" pos:end="1075:66"><name pos:start="1075:51" pos:end="1075:66">gen_helper_fdivs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1077:21" pos:end="1077:26">break;</break>

                <case pos:start="1079:17" pos:end="1079:26">case <expr pos:start="1079:22" pos:end="1079:25"><literal type="number" pos:start="1079:22" pos:end="1079:25">0x4e</literal></expr>:</case> <comment type="block" pos:start="1079:28" pos:end="1079:38">/* fdivd */</comment>

                    <expr_stmt pos:start="1081:21" pos:end="1081:68"><expr pos:start="1081:21" pos:end="1081:67"><call pos:start="1081:21" pos:end="1081:67"><name pos:start="1081:21" pos:end="1081:31">gen_fop_DDD</name><argument_list pos:start="1081:32" pos:end="1081:67">(<argument pos:start="1081:33" pos:end="1081:34"><expr pos:start="1081:33" pos:end="1081:34"><name pos:start="1081:33" pos:end="1081:34">dc</name></expr></argument>, <argument pos:start="1081:37" pos:end="1081:38"><expr pos:start="1081:37" pos:end="1081:38"><name pos:start="1081:37" pos:end="1081:38">rd</name></expr></argument>, <argument pos:start="1081:41" pos:end="1081:43"><expr pos:start="1081:41" pos:end="1081:43"><name pos:start="1081:41" pos:end="1081:43">rs1</name></expr></argument>, <argument pos:start="1081:46" pos:end="1081:48"><expr pos:start="1081:46" pos:end="1081:48"><name pos:start="1081:46" pos:end="1081:48">rs2</name></expr></argument>, <argument pos:start="1081:51" pos:end="1081:66"><expr pos:start="1081:51" pos:end="1081:66"><name pos:start="1081:51" pos:end="1081:66">gen_helper_fdivd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1083:21" pos:end="1083:26">break;</break>

                <case pos:start="1085:17" pos:end="1085:26">case <expr pos:start="1085:22" pos:end="1085:25"><literal type="number" pos:start="1085:22" pos:end="1085:25">0x4f</literal></expr>:</case> <comment type="block" pos:start="1085:28" pos:end="1085:38">/* fdivq */</comment>

                    <expr_stmt pos:start="1087:21" pos:end="1087:52"><expr pos:start="1087:21" pos:end="1087:51"><call pos:start="1087:21" pos:end="1087:51"><name pos:start="1087:21" pos:end="1087:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1087:38" pos:end="1087:51">(<argument pos:start="1087:39" pos:end="1087:40"><expr pos:start="1087:39" pos:end="1087:40"><name pos:start="1087:39" pos:end="1087:40">dc</name></expr></argument>, <argument pos:start="1087:43" pos:end="1087:50"><expr pos:start="1087:43" pos:end="1087:50"><name pos:start="1087:43" pos:end="1087:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1089:21" pos:end="1089:68"><expr pos:start="1089:21" pos:end="1089:67"><call pos:start="1089:21" pos:end="1089:67"><name pos:start="1089:21" pos:end="1089:31">gen_fop_QQQ</name><argument_list pos:start="1089:32" pos:end="1089:67">(<argument pos:start="1089:33" pos:end="1089:34"><expr pos:start="1089:33" pos:end="1089:34"><name pos:start="1089:33" pos:end="1089:34">dc</name></expr></argument>, <argument pos:start="1089:37" pos:end="1089:38"><expr pos:start="1089:37" pos:end="1089:38"><name pos:start="1089:37" pos:end="1089:38">rd</name></expr></argument>, <argument pos:start="1089:41" pos:end="1089:43"><expr pos:start="1089:41" pos:end="1089:43"><name pos:start="1089:41" pos:end="1089:43">rs1</name></expr></argument>, <argument pos:start="1089:46" pos:end="1089:48"><expr pos:start="1089:46" pos:end="1089:48"><name pos:start="1089:46" pos:end="1089:48">rs2</name></expr></argument>, <argument pos:start="1089:51" pos:end="1089:66"><expr pos:start="1089:51" pos:end="1089:66"><name pos:start="1089:51" pos:end="1089:66">gen_helper_fdivq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1091:21" pos:end="1091:26">break;</break>

                <case pos:start="1093:17" pos:end="1093:26">case <expr pos:start="1093:22" pos:end="1093:25"><literal type="number" pos:start="1093:22" pos:end="1093:25">0x69</literal></expr>:</case> <comment type="block" pos:start="1093:28" pos:end="1093:39">/* fsmuld */</comment>

                    <expr_stmt pos:start="1095:21" pos:end="1095:50"><expr pos:start="1095:21" pos:end="1095:49"><call pos:start="1095:21" pos:end="1095:49"><name pos:start="1095:21" pos:end="1095:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1095:38" pos:end="1095:49">(<argument pos:start="1095:39" pos:end="1095:40"><expr pos:start="1095:39" pos:end="1095:40"><name pos:start="1095:39" pos:end="1095:40">dc</name></expr></argument>, <argument pos:start="1095:43" pos:end="1095:48"><expr pos:start="1095:43" pos:end="1095:48"><name pos:start="1095:43" pos:end="1095:48">FSMULD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1097:21" pos:end="1097:69"><expr pos:start="1097:21" pos:end="1097:68"><call pos:start="1097:21" pos:end="1097:68"><name pos:start="1097:21" pos:end="1097:31">gen_fop_DFF</name><argument_list pos:start="1097:32" pos:end="1097:68">(<argument pos:start="1097:33" pos:end="1097:34"><expr pos:start="1097:33" pos:end="1097:34"><name pos:start="1097:33" pos:end="1097:34">dc</name></expr></argument>, <argument pos:start="1097:37" pos:end="1097:38"><expr pos:start="1097:37" pos:end="1097:38"><name pos:start="1097:37" pos:end="1097:38">rd</name></expr></argument>, <argument pos:start="1097:41" pos:end="1097:43"><expr pos:start="1097:41" pos:end="1097:43"><name pos:start="1097:41" pos:end="1097:43">rs1</name></expr></argument>, <argument pos:start="1097:46" pos:end="1097:48"><expr pos:start="1097:46" pos:end="1097:48"><name pos:start="1097:46" pos:end="1097:48">rs2</name></expr></argument>, <argument pos:start="1097:51" pos:end="1097:67"><expr pos:start="1097:51" pos:end="1097:67"><name pos:start="1097:51" pos:end="1097:67">gen_helper_fsmuld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1099:21" pos:end="1099:26">break;</break>

                <case pos:start="1101:17" pos:end="1101:26">case <expr pos:start="1101:22" pos:end="1101:25"><literal type="number" pos:start="1101:22" pos:end="1101:25">0x6e</literal></expr>:</case> <comment type="block" pos:start="1101:28" pos:end="1101:39">/* fdmulq */</comment>

                    <expr_stmt pos:start="1103:21" pos:end="1103:52"><expr pos:start="1103:21" pos:end="1103:51"><call pos:start="1103:21" pos:end="1103:51"><name pos:start="1103:21" pos:end="1103:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1103:38" pos:end="1103:51">(<argument pos:start="1103:39" pos:end="1103:40"><expr pos:start="1103:39" pos:end="1103:40"><name pos:start="1103:39" pos:end="1103:40">dc</name></expr></argument>, <argument pos:start="1103:43" pos:end="1103:50"><expr pos:start="1103:43" pos:end="1103:50"><name pos:start="1103:43" pos:end="1103:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1105:21" pos:end="1105:69"><expr pos:start="1105:21" pos:end="1105:68"><call pos:start="1105:21" pos:end="1105:68"><name pos:start="1105:21" pos:end="1105:31">gen_fop_QDD</name><argument_list pos:start="1105:32" pos:end="1105:68">(<argument pos:start="1105:33" pos:end="1105:34"><expr pos:start="1105:33" pos:end="1105:34"><name pos:start="1105:33" pos:end="1105:34">dc</name></expr></argument>, <argument pos:start="1105:37" pos:end="1105:38"><expr pos:start="1105:37" pos:end="1105:38"><name pos:start="1105:37" pos:end="1105:38">rd</name></expr></argument>, <argument pos:start="1105:41" pos:end="1105:43"><expr pos:start="1105:41" pos:end="1105:43"><name pos:start="1105:41" pos:end="1105:43">rs1</name></expr></argument>, <argument pos:start="1105:46" pos:end="1105:48"><expr pos:start="1105:46" pos:end="1105:48"><name pos:start="1105:46" pos:end="1105:48">rs2</name></expr></argument>, <argument pos:start="1105:51" pos:end="1105:67"><expr pos:start="1105:51" pos:end="1105:67"><name pos:start="1105:51" pos:end="1105:67">gen_helper_fdmulq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1107:21" pos:end="1107:26">break;</break>

                <case pos:start="1109:17" pos:end="1109:26">case <expr pos:start="1109:22" pos:end="1109:25"><literal type="number" pos:start="1109:22" pos:end="1109:25">0xc4</literal></expr>:</case> <comment type="block" pos:start="1109:28" pos:end="1109:38">/* fitos */</comment>

                    <expr_stmt pos:start="1111:21" pos:end="1111:62"><expr pos:start="1111:21" pos:end="1111:61"><call pos:start="1111:21" pos:end="1111:61"><name pos:start="1111:21" pos:end="1111:30">gen_fop_FF</name><argument_list pos:start="1111:31" pos:end="1111:61">(<argument pos:start="1111:32" pos:end="1111:33"><expr pos:start="1111:32" pos:end="1111:33"><name pos:start="1111:32" pos:end="1111:33">dc</name></expr></argument>, <argument pos:start="1111:36" pos:end="1111:37"><expr pos:start="1111:36" pos:end="1111:37"><name pos:start="1111:36" pos:end="1111:37">rd</name></expr></argument>, <argument pos:start="1111:40" pos:end="1111:42"><expr pos:start="1111:40" pos:end="1111:42"><name pos:start="1111:40" pos:end="1111:42">rs2</name></expr></argument>, <argument pos:start="1111:45" pos:end="1111:60"><expr pos:start="1111:45" pos:end="1111:60"><name pos:start="1111:45" pos:end="1111:60">gen_helper_fitos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1113:21" pos:end="1113:26">break;</break>

                <case pos:start="1115:17" pos:end="1115:26">case <expr pos:start="1115:22" pos:end="1115:25"><literal type="number" pos:start="1115:22" pos:end="1115:25">0xc6</literal></expr>:</case> <comment type="block" pos:start="1115:28" pos:end="1115:38">/* fdtos */</comment>

                    <expr_stmt pos:start="1117:21" pos:end="1117:62"><expr pos:start="1117:21" pos:end="1117:61"><call pos:start="1117:21" pos:end="1117:61"><name pos:start="1117:21" pos:end="1117:30">gen_fop_FD</name><argument_list pos:start="1117:31" pos:end="1117:61">(<argument pos:start="1117:32" pos:end="1117:33"><expr pos:start="1117:32" pos:end="1117:33"><name pos:start="1117:32" pos:end="1117:33">dc</name></expr></argument>, <argument pos:start="1117:36" pos:end="1117:37"><expr pos:start="1117:36" pos:end="1117:37"><name pos:start="1117:36" pos:end="1117:37">rd</name></expr></argument>, <argument pos:start="1117:40" pos:end="1117:42"><expr pos:start="1117:40" pos:end="1117:42"><name pos:start="1117:40" pos:end="1117:42">rs2</name></expr></argument>, <argument pos:start="1117:45" pos:end="1117:60"><expr pos:start="1117:45" pos:end="1117:60"><name pos:start="1117:45" pos:end="1117:60">gen_helper_fdtos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1119:21" pos:end="1119:26">break;</break>

                <case pos:start="1121:17" pos:end="1121:26">case <expr pos:start="1121:22" pos:end="1121:25"><literal type="number" pos:start="1121:22" pos:end="1121:25">0xc7</literal></expr>:</case> <comment type="block" pos:start="1121:28" pos:end="1121:38">/* fqtos */</comment>

                    <expr_stmt pos:start="1123:21" pos:end="1123:52"><expr pos:start="1123:21" pos:end="1123:51"><call pos:start="1123:21" pos:end="1123:51"><name pos:start="1123:21" pos:end="1123:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1123:38" pos:end="1123:51">(<argument pos:start="1123:39" pos:end="1123:40"><expr pos:start="1123:39" pos:end="1123:40"><name pos:start="1123:39" pos:end="1123:40">dc</name></expr></argument>, <argument pos:start="1123:43" pos:end="1123:50"><expr pos:start="1123:43" pos:end="1123:50"><name pos:start="1123:43" pos:end="1123:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1125:21" pos:end="1125:62"><expr pos:start="1125:21" pos:end="1125:61"><call pos:start="1125:21" pos:end="1125:61"><name pos:start="1125:21" pos:end="1125:30">gen_fop_FQ</name><argument_list pos:start="1125:31" pos:end="1125:61">(<argument pos:start="1125:32" pos:end="1125:33"><expr pos:start="1125:32" pos:end="1125:33"><name pos:start="1125:32" pos:end="1125:33">dc</name></expr></argument>, <argument pos:start="1125:36" pos:end="1125:37"><expr pos:start="1125:36" pos:end="1125:37"><name pos:start="1125:36" pos:end="1125:37">rd</name></expr></argument>, <argument pos:start="1125:40" pos:end="1125:42"><expr pos:start="1125:40" pos:end="1125:42"><name pos:start="1125:40" pos:end="1125:42">rs2</name></expr></argument>, <argument pos:start="1125:45" pos:end="1125:60"><expr pos:start="1125:45" pos:end="1125:60"><name pos:start="1125:45" pos:end="1125:60">gen_helper_fqtos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1127:21" pos:end="1127:26">break;</break>

                <case pos:start="1129:17" pos:end="1129:26">case <expr pos:start="1129:22" pos:end="1129:25"><literal type="number" pos:start="1129:22" pos:end="1129:25">0xc8</literal></expr>:</case> <comment type="block" pos:start="1129:28" pos:end="1129:38">/* fitod */</comment>

                    <expr_stmt pos:start="1131:21" pos:end="1131:65"><expr pos:start="1131:21" pos:end="1131:64"><call pos:start="1131:21" pos:end="1131:64"><name pos:start="1131:21" pos:end="1131:33">gen_ne_fop_DF</name><argument_list pos:start="1131:34" pos:end="1131:64">(<argument pos:start="1131:35" pos:end="1131:36"><expr pos:start="1131:35" pos:end="1131:36"><name pos:start="1131:35" pos:end="1131:36">dc</name></expr></argument>, <argument pos:start="1131:39" pos:end="1131:40"><expr pos:start="1131:39" pos:end="1131:40"><name pos:start="1131:39" pos:end="1131:40">rd</name></expr></argument>, <argument pos:start="1131:43" pos:end="1131:45"><expr pos:start="1131:43" pos:end="1131:45"><name pos:start="1131:43" pos:end="1131:45">rs2</name></expr></argument>, <argument pos:start="1131:48" pos:end="1131:63"><expr pos:start="1131:48" pos:end="1131:63"><name pos:start="1131:48" pos:end="1131:63">gen_helper_fitod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1133:21" pos:end="1133:26">break;</break>

                <case pos:start="1135:17" pos:end="1135:26">case <expr pos:start="1135:22" pos:end="1135:25"><literal type="number" pos:start="1135:22" pos:end="1135:25">0xc9</literal></expr>:</case> <comment type="block" pos:start="1135:28" pos:end="1135:38">/* fstod */</comment>

                    <expr_stmt pos:start="1137:21" pos:end="1137:65"><expr pos:start="1137:21" pos:end="1137:64"><call pos:start="1137:21" pos:end="1137:64"><name pos:start="1137:21" pos:end="1137:33">gen_ne_fop_DF</name><argument_list pos:start="1137:34" pos:end="1137:64">(<argument pos:start="1137:35" pos:end="1137:36"><expr pos:start="1137:35" pos:end="1137:36"><name pos:start="1137:35" pos:end="1137:36">dc</name></expr></argument>, <argument pos:start="1137:39" pos:end="1137:40"><expr pos:start="1137:39" pos:end="1137:40"><name pos:start="1137:39" pos:end="1137:40">rd</name></expr></argument>, <argument pos:start="1137:43" pos:end="1137:45"><expr pos:start="1137:43" pos:end="1137:45"><name pos:start="1137:43" pos:end="1137:45">rs2</name></expr></argument>, <argument pos:start="1137:48" pos:end="1137:63"><expr pos:start="1137:48" pos:end="1137:63"><name pos:start="1137:48" pos:end="1137:63">gen_helper_fstod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1139:21" pos:end="1139:26">break;</break>

                <case pos:start="1141:17" pos:end="1141:26">case <expr pos:start="1141:22" pos:end="1141:25"><literal type="number" pos:start="1141:22" pos:end="1141:25">0xcb</literal></expr>:</case> <comment type="block" pos:start="1141:28" pos:end="1141:38">/* fqtod */</comment>

                    <expr_stmt pos:start="1143:21" pos:end="1143:52"><expr pos:start="1143:21" pos:end="1143:51"><call pos:start="1143:21" pos:end="1143:51"><name pos:start="1143:21" pos:end="1143:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1143:38" pos:end="1143:51">(<argument pos:start="1143:39" pos:end="1143:40"><expr pos:start="1143:39" pos:end="1143:40"><name pos:start="1143:39" pos:end="1143:40">dc</name></expr></argument>, <argument pos:start="1143:43" pos:end="1143:50"><expr pos:start="1143:43" pos:end="1143:50"><name pos:start="1143:43" pos:end="1143:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1145:21" pos:end="1145:62"><expr pos:start="1145:21" pos:end="1145:61"><call pos:start="1145:21" pos:end="1145:61"><name pos:start="1145:21" pos:end="1145:30">gen_fop_DQ</name><argument_list pos:start="1145:31" pos:end="1145:61">(<argument pos:start="1145:32" pos:end="1145:33"><expr pos:start="1145:32" pos:end="1145:33"><name pos:start="1145:32" pos:end="1145:33">dc</name></expr></argument>, <argument pos:start="1145:36" pos:end="1145:37"><expr pos:start="1145:36" pos:end="1145:37"><name pos:start="1145:36" pos:end="1145:37">rd</name></expr></argument>, <argument pos:start="1145:40" pos:end="1145:42"><expr pos:start="1145:40" pos:end="1145:42"><name pos:start="1145:40" pos:end="1145:42">rs2</name></expr></argument>, <argument pos:start="1145:45" pos:end="1145:60"><expr pos:start="1145:45" pos:end="1145:60"><name pos:start="1145:45" pos:end="1145:60">gen_helper_fqtod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1147:21" pos:end="1147:26">break;</break>

                <case pos:start="1149:17" pos:end="1149:26">case <expr pos:start="1149:22" pos:end="1149:25"><literal type="number" pos:start="1149:22" pos:end="1149:25">0xcc</literal></expr>:</case> <comment type="block" pos:start="1149:28" pos:end="1149:38">/* fitoq */</comment>

                    <expr_stmt pos:start="1151:21" pos:end="1151:52"><expr pos:start="1151:21" pos:end="1151:51"><call pos:start="1151:21" pos:end="1151:51"><name pos:start="1151:21" pos:end="1151:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1151:38" pos:end="1151:51">(<argument pos:start="1151:39" pos:end="1151:40"><expr pos:start="1151:39" pos:end="1151:40"><name pos:start="1151:39" pos:end="1151:40">dc</name></expr></argument>, <argument pos:start="1151:43" pos:end="1151:50"><expr pos:start="1151:43" pos:end="1151:50"><name pos:start="1151:43" pos:end="1151:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1153:21" pos:end="1153:65"><expr pos:start="1153:21" pos:end="1153:64"><call pos:start="1153:21" pos:end="1153:64"><name pos:start="1153:21" pos:end="1153:33">gen_ne_fop_QF</name><argument_list pos:start="1153:34" pos:end="1153:64">(<argument pos:start="1153:35" pos:end="1153:36"><expr pos:start="1153:35" pos:end="1153:36"><name pos:start="1153:35" pos:end="1153:36">dc</name></expr></argument>, <argument pos:start="1153:39" pos:end="1153:40"><expr pos:start="1153:39" pos:end="1153:40"><name pos:start="1153:39" pos:end="1153:40">rd</name></expr></argument>, <argument pos:start="1153:43" pos:end="1153:45"><expr pos:start="1153:43" pos:end="1153:45"><name pos:start="1153:43" pos:end="1153:45">rs2</name></expr></argument>, <argument pos:start="1153:48" pos:end="1153:63"><expr pos:start="1153:48" pos:end="1153:63"><name pos:start="1153:48" pos:end="1153:63">gen_helper_fitoq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1155:21" pos:end="1155:26">break;</break>

                <case pos:start="1157:17" pos:end="1157:26">case <expr pos:start="1157:22" pos:end="1157:25"><literal type="number" pos:start="1157:22" pos:end="1157:25">0xcd</literal></expr>:</case> <comment type="block" pos:start="1157:28" pos:end="1157:38">/* fstoq */</comment>

                    <expr_stmt pos:start="1159:21" pos:end="1159:52"><expr pos:start="1159:21" pos:end="1159:51"><call pos:start="1159:21" pos:end="1159:51"><name pos:start="1159:21" pos:end="1159:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1159:38" pos:end="1159:51">(<argument pos:start="1159:39" pos:end="1159:40"><expr pos:start="1159:39" pos:end="1159:40"><name pos:start="1159:39" pos:end="1159:40">dc</name></expr></argument>, <argument pos:start="1159:43" pos:end="1159:50"><expr pos:start="1159:43" pos:end="1159:50"><name pos:start="1159:43" pos:end="1159:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1161:21" pos:end="1161:65"><expr pos:start="1161:21" pos:end="1161:64"><call pos:start="1161:21" pos:end="1161:64"><name pos:start="1161:21" pos:end="1161:33">gen_ne_fop_QF</name><argument_list pos:start="1161:34" pos:end="1161:64">(<argument pos:start="1161:35" pos:end="1161:36"><expr pos:start="1161:35" pos:end="1161:36"><name pos:start="1161:35" pos:end="1161:36">dc</name></expr></argument>, <argument pos:start="1161:39" pos:end="1161:40"><expr pos:start="1161:39" pos:end="1161:40"><name pos:start="1161:39" pos:end="1161:40">rd</name></expr></argument>, <argument pos:start="1161:43" pos:end="1161:45"><expr pos:start="1161:43" pos:end="1161:45"><name pos:start="1161:43" pos:end="1161:45">rs2</name></expr></argument>, <argument pos:start="1161:48" pos:end="1161:63"><expr pos:start="1161:48" pos:end="1161:63"><name pos:start="1161:48" pos:end="1161:63">gen_helper_fstoq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1163:21" pos:end="1163:26">break;</break>

                <case pos:start="1165:17" pos:end="1165:26">case <expr pos:start="1165:22" pos:end="1165:25"><literal type="number" pos:start="1165:22" pos:end="1165:25">0xce</literal></expr>:</case> <comment type="block" pos:start="1165:28" pos:end="1165:38">/* fdtoq */</comment>

                    <expr_stmt pos:start="1167:21" pos:end="1167:52"><expr pos:start="1167:21" pos:end="1167:51"><call pos:start="1167:21" pos:end="1167:51"><name pos:start="1167:21" pos:end="1167:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1167:38" pos:end="1167:51">(<argument pos:start="1167:39" pos:end="1167:40"><expr pos:start="1167:39" pos:end="1167:40"><name pos:start="1167:39" pos:end="1167:40">dc</name></expr></argument>, <argument pos:start="1167:43" pos:end="1167:50"><expr pos:start="1167:43" pos:end="1167:50"><name pos:start="1167:43" pos:end="1167:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1169:21" pos:end="1169:65"><expr pos:start="1169:21" pos:end="1169:64"><call pos:start="1169:21" pos:end="1169:64"><name pos:start="1169:21" pos:end="1169:33">gen_ne_fop_QD</name><argument_list pos:start="1169:34" pos:end="1169:64">(<argument pos:start="1169:35" pos:end="1169:36"><expr pos:start="1169:35" pos:end="1169:36"><name pos:start="1169:35" pos:end="1169:36">dc</name></expr></argument>, <argument pos:start="1169:39" pos:end="1169:40"><expr pos:start="1169:39" pos:end="1169:40"><name pos:start="1169:39" pos:end="1169:40">rd</name></expr></argument>, <argument pos:start="1169:43" pos:end="1169:45"><expr pos:start="1169:43" pos:end="1169:45"><name pos:start="1169:43" pos:end="1169:45">rs2</name></expr></argument>, <argument pos:start="1169:48" pos:end="1169:63"><expr pos:start="1169:48" pos:end="1169:63"><name pos:start="1169:48" pos:end="1169:63">gen_helper_fdtoq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1171:21" pos:end="1171:26">break;</break>

                <case pos:start="1173:17" pos:end="1173:26">case <expr pos:start="1173:22" pos:end="1173:25"><literal type="number" pos:start="1173:22" pos:end="1173:25">0xd1</literal></expr>:</case> <comment type="block" pos:start="1173:28" pos:end="1173:38">/* fstoi */</comment>

                    <expr_stmt pos:start="1175:21" pos:end="1175:62"><expr pos:start="1175:21" pos:end="1175:61"><call pos:start="1175:21" pos:end="1175:61"><name pos:start="1175:21" pos:end="1175:30">gen_fop_FF</name><argument_list pos:start="1175:31" pos:end="1175:61">(<argument pos:start="1175:32" pos:end="1175:33"><expr pos:start="1175:32" pos:end="1175:33"><name pos:start="1175:32" pos:end="1175:33">dc</name></expr></argument>, <argument pos:start="1175:36" pos:end="1175:37"><expr pos:start="1175:36" pos:end="1175:37"><name pos:start="1175:36" pos:end="1175:37">rd</name></expr></argument>, <argument pos:start="1175:40" pos:end="1175:42"><expr pos:start="1175:40" pos:end="1175:42"><name pos:start="1175:40" pos:end="1175:42">rs2</name></expr></argument>, <argument pos:start="1175:45" pos:end="1175:60"><expr pos:start="1175:45" pos:end="1175:60"><name pos:start="1175:45" pos:end="1175:60">gen_helper_fstoi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1177:21" pos:end="1177:26">break;</break>

                <case pos:start="1179:17" pos:end="1179:26">case <expr pos:start="1179:22" pos:end="1179:25"><literal type="number" pos:start="1179:22" pos:end="1179:25">0xd2</literal></expr>:</case> <comment type="block" pos:start="1179:28" pos:end="1179:38">/* fdtoi */</comment>

                    <expr_stmt pos:start="1181:21" pos:end="1181:62"><expr pos:start="1181:21" pos:end="1181:61"><call pos:start="1181:21" pos:end="1181:61"><name pos:start="1181:21" pos:end="1181:30">gen_fop_FD</name><argument_list pos:start="1181:31" pos:end="1181:61">(<argument pos:start="1181:32" pos:end="1181:33"><expr pos:start="1181:32" pos:end="1181:33"><name pos:start="1181:32" pos:end="1181:33">dc</name></expr></argument>, <argument pos:start="1181:36" pos:end="1181:37"><expr pos:start="1181:36" pos:end="1181:37"><name pos:start="1181:36" pos:end="1181:37">rd</name></expr></argument>, <argument pos:start="1181:40" pos:end="1181:42"><expr pos:start="1181:40" pos:end="1181:42"><name pos:start="1181:40" pos:end="1181:42">rs2</name></expr></argument>, <argument pos:start="1181:45" pos:end="1181:60"><expr pos:start="1181:45" pos:end="1181:60"><name pos:start="1181:45" pos:end="1181:60">gen_helper_fdtoi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1183:21" pos:end="1183:26">break;</break>

                <case pos:start="1185:17" pos:end="1185:26">case <expr pos:start="1185:22" pos:end="1185:25"><literal type="number" pos:start="1185:22" pos:end="1185:25">0xd3</literal></expr>:</case> <comment type="block" pos:start="1185:28" pos:end="1185:38">/* fqtoi */</comment>

                    <expr_stmt pos:start="1187:21" pos:end="1187:52"><expr pos:start="1187:21" pos:end="1187:51"><call pos:start="1187:21" pos:end="1187:51"><name pos:start="1187:21" pos:end="1187:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1187:38" pos:end="1187:51">(<argument pos:start="1187:39" pos:end="1187:40"><expr pos:start="1187:39" pos:end="1187:40"><name pos:start="1187:39" pos:end="1187:40">dc</name></expr></argument>, <argument pos:start="1187:43" pos:end="1187:50"><expr pos:start="1187:43" pos:end="1187:50"><name pos:start="1187:43" pos:end="1187:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1189:21" pos:end="1189:62"><expr pos:start="1189:21" pos:end="1189:61"><call pos:start="1189:21" pos:end="1189:61"><name pos:start="1189:21" pos:end="1189:30">gen_fop_FQ</name><argument_list pos:start="1189:31" pos:end="1189:61">(<argument pos:start="1189:32" pos:end="1189:33"><expr pos:start="1189:32" pos:end="1189:33"><name pos:start="1189:32" pos:end="1189:33">dc</name></expr></argument>, <argument pos:start="1189:36" pos:end="1189:37"><expr pos:start="1189:36" pos:end="1189:37"><name pos:start="1189:36" pos:end="1189:37">rd</name></expr></argument>, <argument pos:start="1189:40" pos:end="1189:42"><expr pos:start="1189:40" pos:end="1189:42"><name pos:start="1189:40" pos:end="1189:42">rs2</name></expr></argument>, <argument pos:start="1189:45" pos:end="1189:60"><expr pos:start="1189:45" pos:end="1189:60"><name pos:start="1189:45" pos:end="1189:60">gen_helper_fqtoi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1191:21" pos:end="1194:0">break;</break>

<cpp:ifdef pos:start="1193:1" pos:end="1193:21">#<cpp:directive pos:start="1193:2" pos:end="1193:6">ifdef</cpp:directive> <name pos:start="1193:8" pos:end="1193:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="1195:17" pos:end="1195:25">case <expr pos:start="1195:22" pos:end="1195:24"><literal type="number" pos:start="1195:22" pos:end="1195:24">0x2</literal></expr>:</case> <comment type="block" pos:start="1195:27" pos:end="1195:40">/* V9 fmovd */</comment>

                    <expr_stmt pos:start="1197:21" pos:end="1197:58"><expr pos:start="1197:21" pos:end="1197:57"><name pos:start="1197:21" pos:end="1197:31">cpu_src1_64</name> <operator pos:start="1197:33" pos:end="1197:33">=</operator> <call pos:start="1197:35" pos:end="1197:57"><name pos:start="1197:35" pos:end="1197:48">gen_load_fpr_D</name><argument_list pos:start="1197:49" pos:end="1197:57">(<argument pos:start="1197:50" pos:end="1197:51"><expr pos:start="1197:50" pos:end="1197:51"><name pos:start="1197:50" pos:end="1197:51">dc</name></expr></argument>, <argument pos:start="1197:54" pos:end="1197:56"><expr pos:start="1197:54" pos:end="1197:56"><name pos:start="1197:54" pos:end="1197:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1199:21" pos:end="1199:57"><expr pos:start="1199:21" pos:end="1199:56"><call pos:start="1199:21" pos:end="1199:56"><name pos:start="1199:21" pos:end="1199:35">gen_store_fpr_D</name><argument_list pos:start="1199:36" pos:end="1199:56">(<argument pos:start="1199:37" pos:end="1199:38"><expr pos:start="1199:37" pos:end="1199:38"><name pos:start="1199:37" pos:end="1199:38">dc</name></expr></argument>, <argument pos:start="1199:41" pos:end="1199:42"><expr pos:start="1199:41" pos:end="1199:42"><name pos:start="1199:41" pos:end="1199:42">rd</name></expr></argument>, <argument pos:start="1199:45" pos:end="1199:55"><expr pos:start="1199:45" pos:end="1199:55"><name pos:start="1199:45" pos:end="1199:55">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1201:21" pos:end="1201:26">break;</break>

                <case pos:start="1203:17" pos:end="1203:25">case <expr pos:start="1203:22" pos:end="1203:24"><literal type="number" pos:start="1203:22" pos:end="1203:24">0x3</literal></expr>:</case> <comment type="block" pos:start="1203:27" pos:end="1203:40">/* V9 fmovq */</comment>

                    <expr_stmt pos:start="1205:21" pos:end="1205:52"><expr pos:start="1205:21" pos:end="1205:51"><call pos:start="1205:21" pos:end="1205:51"><name pos:start="1205:21" pos:end="1205:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1205:38" pos:end="1205:51">(<argument pos:start="1205:39" pos:end="1205:40"><expr pos:start="1205:39" pos:end="1205:40"><name pos:start="1205:39" pos:end="1205:40">dc</name></expr></argument>, <argument pos:start="1205:43" pos:end="1205:50"><expr pos:start="1205:43" pos:end="1205:50"><name pos:start="1205:43" pos:end="1205:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1207:21" pos:end="1207:40"><expr pos:start="1207:21" pos:end="1207:39"><call pos:start="1207:21" pos:end="1207:39"><name pos:start="1207:21" pos:end="1207:30">gen_move_Q</name><argument_list pos:start="1207:31" pos:end="1207:39">(<argument pos:start="1207:32" pos:end="1207:33"><expr pos:start="1207:32" pos:end="1207:33"><name pos:start="1207:32" pos:end="1207:33">rd</name></expr></argument>, <argument pos:start="1207:36" pos:end="1207:38"><expr pos:start="1207:36" pos:end="1207:38"><name pos:start="1207:36" pos:end="1207:38">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1209:21" pos:end="1209:26">break;</break>

                <case pos:start="1211:17" pos:end="1211:25">case <expr pos:start="1211:22" pos:end="1211:24"><literal type="number" pos:start="1211:22" pos:end="1211:24">0x6</literal></expr>:</case> <comment type="block" pos:start="1211:27" pos:end="1211:40">/* V9 fnegd */</comment>

                    <expr_stmt pos:start="1213:21" pos:end="1213:65"><expr pos:start="1213:21" pos:end="1213:64"><call pos:start="1213:21" pos:end="1213:64"><name pos:start="1213:21" pos:end="1213:33">gen_ne_fop_DD</name><argument_list pos:start="1213:34" pos:end="1213:64">(<argument pos:start="1213:35" pos:end="1213:36"><expr pos:start="1213:35" pos:end="1213:36"><name pos:start="1213:35" pos:end="1213:36">dc</name></expr></argument>, <argument pos:start="1213:39" pos:end="1213:40"><expr pos:start="1213:39" pos:end="1213:40"><name pos:start="1213:39" pos:end="1213:40">rd</name></expr></argument>, <argument pos:start="1213:43" pos:end="1213:45"><expr pos:start="1213:43" pos:end="1213:45"><name pos:start="1213:43" pos:end="1213:45">rs2</name></expr></argument>, <argument pos:start="1213:48" pos:end="1213:63"><expr pos:start="1213:48" pos:end="1213:63"><name pos:start="1213:48" pos:end="1213:63">gen_helper_fnegd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1215:21" pos:end="1215:26">break;</break>

                <case pos:start="1217:17" pos:end="1217:25">case <expr pos:start="1217:22" pos:end="1217:24"><literal type="number" pos:start="1217:22" pos:end="1217:24">0x7</literal></expr>:</case> <comment type="block" pos:start="1217:27" pos:end="1217:40">/* V9 fnegq */</comment>

                    <expr_stmt pos:start="1219:21" pos:end="1219:52"><expr pos:start="1219:21" pos:end="1219:51"><call pos:start="1219:21" pos:end="1219:51"><name pos:start="1219:21" pos:end="1219:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1219:38" pos:end="1219:51">(<argument pos:start="1219:39" pos:end="1219:40"><expr pos:start="1219:39" pos:end="1219:40"><name pos:start="1219:39" pos:end="1219:40">dc</name></expr></argument>, <argument pos:start="1219:43" pos:end="1219:50"><expr pos:start="1219:43" pos:end="1219:50"><name pos:start="1219:43" pos:end="1219:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1221:21" pos:end="1221:65"><expr pos:start="1221:21" pos:end="1221:64"><call pos:start="1221:21" pos:end="1221:64"><name pos:start="1221:21" pos:end="1221:33">gen_ne_fop_QQ</name><argument_list pos:start="1221:34" pos:end="1221:64">(<argument pos:start="1221:35" pos:end="1221:36"><expr pos:start="1221:35" pos:end="1221:36"><name pos:start="1221:35" pos:end="1221:36">dc</name></expr></argument>, <argument pos:start="1221:39" pos:end="1221:40"><expr pos:start="1221:39" pos:end="1221:40"><name pos:start="1221:39" pos:end="1221:40">rd</name></expr></argument>, <argument pos:start="1221:43" pos:end="1221:45"><expr pos:start="1221:43" pos:end="1221:45"><name pos:start="1221:43" pos:end="1221:45">rs2</name></expr></argument>, <argument pos:start="1221:48" pos:end="1221:63"><expr pos:start="1221:48" pos:end="1221:63"><name pos:start="1221:48" pos:end="1221:63">gen_helper_fnegq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1223:21" pos:end="1223:26">break;</break>

                <case pos:start="1225:17" pos:end="1225:25">case <expr pos:start="1225:22" pos:end="1225:24"><literal type="number" pos:start="1225:22" pos:end="1225:24">0xa</literal></expr>:</case> <comment type="block" pos:start="1225:27" pos:end="1225:40">/* V9 fabsd */</comment>

                    <expr_stmt pos:start="1227:21" pos:end="1227:65"><expr pos:start="1227:21" pos:end="1227:64"><call pos:start="1227:21" pos:end="1227:64"><name pos:start="1227:21" pos:end="1227:33">gen_ne_fop_DD</name><argument_list pos:start="1227:34" pos:end="1227:64">(<argument pos:start="1227:35" pos:end="1227:36"><expr pos:start="1227:35" pos:end="1227:36"><name pos:start="1227:35" pos:end="1227:36">dc</name></expr></argument>, <argument pos:start="1227:39" pos:end="1227:40"><expr pos:start="1227:39" pos:end="1227:40"><name pos:start="1227:39" pos:end="1227:40">rd</name></expr></argument>, <argument pos:start="1227:43" pos:end="1227:45"><expr pos:start="1227:43" pos:end="1227:45"><name pos:start="1227:43" pos:end="1227:45">rs2</name></expr></argument>, <argument pos:start="1227:48" pos:end="1227:63"><expr pos:start="1227:48" pos:end="1227:63"><name pos:start="1227:48" pos:end="1227:63">gen_helper_fabsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1229:21" pos:end="1229:26">break;</break>

                <case pos:start="1231:17" pos:end="1231:25">case <expr pos:start="1231:22" pos:end="1231:24"><literal type="number" pos:start="1231:22" pos:end="1231:24">0xb</literal></expr>:</case> <comment type="block" pos:start="1231:27" pos:end="1231:40">/* V9 fabsq */</comment>

                    <expr_stmt pos:start="1233:21" pos:end="1233:52"><expr pos:start="1233:21" pos:end="1233:51"><call pos:start="1233:21" pos:end="1233:51"><name pos:start="1233:21" pos:end="1233:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1233:38" pos:end="1233:51">(<argument pos:start="1233:39" pos:end="1233:40"><expr pos:start="1233:39" pos:end="1233:40"><name pos:start="1233:39" pos:end="1233:40">dc</name></expr></argument>, <argument pos:start="1233:43" pos:end="1233:50"><expr pos:start="1233:43" pos:end="1233:50"><name pos:start="1233:43" pos:end="1233:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1235:21" pos:end="1235:65"><expr pos:start="1235:21" pos:end="1235:64"><call pos:start="1235:21" pos:end="1235:64"><name pos:start="1235:21" pos:end="1235:33">gen_ne_fop_QQ</name><argument_list pos:start="1235:34" pos:end="1235:64">(<argument pos:start="1235:35" pos:end="1235:36"><expr pos:start="1235:35" pos:end="1235:36"><name pos:start="1235:35" pos:end="1235:36">dc</name></expr></argument>, <argument pos:start="1235:39" pos:end="1235:40"><expr pos:start="1235:39" pos:end="1235:40"><name pos:start="1235:39" pos:end="1235:40">rd</name></expr></argument>, <argument pos:start="1235:43" pos:end="1235:45"><expr pos:start="1235:43" pos:end="1235:45"><name pos:start="1235:43" pos:end="1235:45">rs2</name></expr></argument>, <argument pos:start="1235:48" pos:end="1235:63"><expr pos:start="1235:48" pos:end="1235:63"><name pos:start="1235:48" pos:end="1235:63">gen_helper_fabsq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1237:21" pos:end="1237:26">break;</break>

                <case pos:start="1239:17" pos:end="1239:26">case <expr pos:start="1239:22" pos:end="1239:25"><literal type="number" pos:start="1239:22" pos:end="1239:25">0x81</literal></expr>:</case> <comment type="block" pos:start="1239:28" pos:end="1239:41">/* V9 fstox */</comment>

                    <expr_stmt pos:start="1241:21" pos:end="1241:62"><expr pos:start="1241:21" pos:end="1241:61"><call pos:start="1241:21" pos:end="1241:61"><name pos:start="1241:21" pos:end="1241:30">gen_fop_DF</name><argument_list pos:start="1241:31" pos:end="1241:61">(<argument pos:start="1241:32" pos:end="1241:33"><expr pos:start="1241:32" pos:end="1241:33"><name pos:start="1241:32" pos:end="1241:33">dc</name></expr></argument>, <argument pos:start="1241:36" pos:end="1241:37"><expr pos:start="1241:36" pos:end="1241:37"><name pos:start="1241:36" pos:end="1241:37">rd</name></expr></argument>, <argument pos:start="1241:40" pos:end="1241:42"><expr pos:start="1241:40" pos:end="1241:42"><name pos:start="1241:40" pos:end="1241:42">rs2</name></expr></argument>, <argument pos:start="1241:45" pos:end="1241:60"><expr pos:start="1241:45" pos:end="1241:60"><name pos:start="1241:45" pos:end="1241:60">gen_helper_fstox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1243:21" pos:end="1243:26">break;</break>

                <case pos:start="1245:17" pos:end="1245:26">case <expr pos:start="1245:22" pos:end="1245:25"><literal type="number" pos:start="1245:22" pos:end="1245:25">0x82</literal></expr>:</case> <comment type="block" pos:start="1245:28" pos:end="1245:41">/* V9 fdtox */</comment>

                    <expr_stmt pos:start="1247:21" pos:end="1247:62"><expr pos:start="1247:21" pos:end="1247:61"><call pos:start="1247:21" pos:end="1247:61"><name pos:start="1247:21" pos:end="1247:30">gen_fop_DD</name><argument_list pos:start="1247:31" pos:end="1247:61">(<argument pos:start="1247:32" pos:end="1247:33"><expr pos:start="1247:32" pos:end="1247:33"><name pos:start="1247:32" pos:end="1247:33">dc</name></expr></argument>, <argument pos:start="1247:36" pos:end="1247:37"><expr pos:start="1247:36" pos:end="1247:37"><name pos:start="1247:36" pos:end="1247:37">rd</name></expr></argument>, <argument pos:start="1247:40" pos:end="1247:42"><expr pos:start="1247:40" pos:end="1247:42"><name pos:start="1247:40" pos:end="1247:42">rs2</name></expr></argument>, <argument pos:start="1247:45" pos:end="1247:60"><expr pos:start="1247:45" pos:end="1247:60"><name pos:start="1247:45" pos:end="1247:60">gen_helper_fdtox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1249:21" pos:end="1249:26">break;</break>

                <case pos:start="1251:17" pos:end="1251:26">case <expr pos:start="1251:22" pos:end="1251:25"><literal type="number" pos:start="1251:22" pos:end="1251:25">0x83</literal></expr>:</case> <comment type="block" pos:start="1251:28" pos:end="1251:41">/* V9 fqtox */</comment>

                    <expr_stmt pos:start="1253:21" pos:end="1253:52"><expr pos:start="1253:21" pos:end="1253:51"><call pos:start="1253:21" pos:end="1253:51"><name pos:start="1253:21" pos:end="1253:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1253:38" pos:end="1253:51">(<argument pos:start="1253:39" pos:end="1253:40"><expr pos:start="1253:39" pos:end="1253:40"><name pos:start="1253:39" pos:end="1253:40">dc</name></expr></argument>, <argument pos:start="1253:43" pos:end="1253:50"><expr pos:start="1253:43" pos:end="1253:50"><name pos:start="1253:43" pos:end="1253:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1255:21" pos:end="1255:62"><expr pos:start="1255:21" pos:end="1255:61"><call pos:start="1255:21" pos:end="1255:61"><name pos:start="1255:21" pos:end="1255:30">gen_fop_DQ</name><argument_list pos:start="1255:31" pos:end="1255:61">(<argument pos:start="1255:32" pos:end="1255:33"><expr pos:start="1255:32" pos:end="1255:33"><name pos:start="1255:32" pos:end="1255:33">dc</name></expr></argument>, <argument pos:start="1255:36" pos:end="1255:37"><expr pos:start="1255:36" pos:end="1255:37"><name pos:start="1255:36" pos:end="1255:37">rd</name></expr></argument>, <argument pos:start="1255:40" pos:end="1255:42"><expr pos:start="1255:40" pos:end="1255:42"><name pos:start="1255:40" pos:end="1255:42">rs2</name></expr></argument>, <argument pos:start="1255:45" pos:end="1255:60"><expr pos:start="1255:45" pos:end="1255:60"><name pos:start="1255:45" pos:end="1255:60">gen_helper_fqtox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1257:21" pos:end="1257:26">break;</break>

                <case pos:start="1259:17" pos:end="1259:26">case <expr pos:start="1259:22" pos:end="1259:25"><literal type="number" pos:start="1259:22" pos:end="1259:25">0x84</literal></expr>:</case> <comment type="block" pos:start="1259:28" pos:end="1259:41">/* V9 fxtos */</comment>

                    <expr_stmt pos:start="1261:21" pos:end="1261:62"><expr pos:start="1261:21" pos:end="1261:61"><call pos:start="1261:21" pos:end="1261:61"><name pos:start="1261:21" pos:end="1261:30">gen_fop_FD</name><argument_list pos:start="1261:31" pos:end="1261:61">(<argument pos:start="1261:32" pos:end="1261:33"><expr pos:start="1261:32" pos:end="1261:33"><name pos:start="1261:32" pos:end="1261:33">dc</name></expr></argument>, <argument pos:start="1261:36" pos:end="1261:37"><expr pos:start="1261:36" pos:end="1261:37"><name pos:start="1261:36" pos:end="1261:37">rd</name></expr></argument>, <argument pos:start="1261:40" pos:end="1261:42"><expr pos:start="1261:40" pos:end="1261:42"><name pos:start="1261:40" pos:end="1261:42">rs2</name></expr></argument>, <argument pos:start="1261:45" pos:end="1261:60"><expr pos:start="1261:45" pos:end="1261:60"><name pos:start="1261:45" pos:end="1261:60">gen_helper_fxtos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1263:21" pos:end="1263:26">break;</break>

                <case pos:start="1265:17" pos:end="1265:26">case <expr pos:start="1265:22" pos:end="1265:25"><literal type="number" pos:start="1265:22" pos:end="1265:25">0x88</literal></expr>:</case> <comment type="block" pos:start="1265:28" pos:end="1265:41">/* V9 fxtod */</comment>

                    <expr_stmt pos:start="1267:21" pos:end="1267:62"><expr pos:start="1267:21" pos:end="1267:61"><call pos:start="1267:21" pos:end="1267:61"><name pos:start="1267:21" pos:end="1267:30">gen_fop_DD</name><argument_list pos:start="1267:31" pos:end="1267:61">(<argument pos:start="1267:32" pos:end="1267:33"><expr pos:start="1267:32" pos:end="1267:33"><name pos:start="1267:32" pos:end="1267:33">dc</name></expr></argument>, <argument pos:start="1267:36" pos:end="1267:37"><expr pos:start="1267:36" pos:end="1267:37"><name pos:start="1267:36" pos:end="1267:37">rd</name></expr></argument>, <argument pos:start="1267:40" pos:end="1267:42"><expr pos:start="1267:40" pos:end="1267:42"><name pos:start="1267:40" pos:end="1267:42">rs2</name></expr></argument>, <argument pos:start="1267:45" pos:end="1267:60"><expr pos:start="1267:45" pos:end="1267:60"><name pos:start="1267:45" pos:end="1267:60">gen_helper_fxtod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1269:21" pos:end="1269:26">break;</break>

                <case pos:start="1271:17" pos:end="1271:26">case <expr pos:start="1271:22" pos:end="1271:25"><literal type="number" pos:start="1271:22" pos:end="1271:25">0x8c</literal></expr>:</case> <comment type="block" pos:start="1271:28" pos:end="1271:41">/* V9 fxtoq */</comment>

                    <expr_stmt pos:start="1273:21" pos:end="1273:52"><expr pos:start="1273:21" pos:end="1273:51"><call pos:start="1273:21" pos:end="1273:51"><name pos:start="1273:21" pos:end="1273:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1273:38" pos:end="1273:51">(<argument pos:start="1273:39" pos:end="1273:40"><expr pos:start="1273:39" pos:end="1273:40"><name pos:start="1273:39" pos:end="1273:40">dc</name></expr></argument>, <argument pos:start="1273:43" pos:end="1273:50"><expr pos:start="1273:43" pos:end="1273:50"><name pos:start="1273:43" pos:end="1273:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1275:21" pos:end="1275:65"><expr pos:start="1275:21" pos:end="1275:64"><call pos:start="1275:21" pos:end="1275:64"><name pos:start="1275:21" pos:end="1275:33">gen_ne_fop_QD</name><argument_list pos:start="1275:34" pos:end="1275:64">(<argument pos:start="1275:35" pos:end="1275:36"><expr pos:start="1275:35" pos:end="1275:36"><name pos:start="1275:35" pos:end="1275:36">dc</name></expr></argument>, <argument pos:start="1275:39" pos:end="1275:40"><expr pos:start="1275:39" pos:end="1275:40"><name pos:start="1275:39" pos:end="1275:40">rd</name></expr></argument>, <argument pos:start="1275:43" pos:end="1275:45"><expr pos:start="1275:43" pos:end="1275:45"><name pos:start="1275:43" pos:end="1275:45">rs2</name></expr></argument>, <argument pos:start="1275:48" pos:end="1275:63"><expr pos:start="1275:48" pos:end="1275:63"><name pos:start="1275:48" pos:end="1275:63">gen_helper_fxtoq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1277:21" pos:end="1280:0">break;</break>

<cpp:endif pos:start="1279:1" pos:end="1279:6">#<cpp:directive pos:start="1279:2" pos:end="1279:6">endif</cpp:directive></cpp:endif>

                <default pos:start="1281:17" pos:end="1281:24">default:</default>

                    <goto pos:start="1283:21" pos:end="1283:38">goto <name pos:start="1283:26" pos:end="1283:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="1287:15" pos:end="1597:13">else if <condition pos:start="1287:23" pos:end="1287:35">(<expr pos:start="1287:24" pos:end="1287:34"><name pos:start="1287:24" pos:end="1287:26">xop</name> <operator pos:start="1287:28" pos:end="1287:29">==</operator> <literal type="number" pos:start="1287:31" pos:end="1287:34">0x35</literal></expr>)</condition> <block pos:start="1287:37" pos:end="1597:13">{<block_content pos:start="1291:17" pos:end="1595:17">   <comment type="block" pos:start="1287:41" pos:end="1287:60">/* FPU Operations */</comment>

<cpp:ifdef pos:start="1289:1" pos:end="1289:21">#<cpp:directive pos:start="1289:2" pos:end="1289:6">ifdef</cpp:directive> <name pos:start="1289:8" pos:end="1289:21">TARGET_SPARC64</name></cpp:ifdef>

                <decl_stmt pos:start="1291:17" pos:end="1294:0"><decl pos:start="1291:17" pos:end="1291:24"><type pos:start="1291:17" pos:end="1291:19"><name pos:start="1291:17" pos:end="1291:19">int</name></type> <name pos:start="1291:21" pos:end="1291:24">cond</name></decl>;</decl_stmt>

<cpp:endif pos:start="1293:1" pos:end="1293:6">#<cpp:directive pos:start="1293:2" pos:end="1293:6">endif</cpp:directive></cpp:endif>

                <if_stmt pos:start="1295:17" pos:end="1299:17"><if pos:start="1295:17" pos:end="1299:17">if <condition pos:start="1295:20" pos:end="1295:41">(<expr pos:start="1295:21" pos:end="1295:40"><call pos:start="1295:21" pos:end="1295:40"><name pos:start="1295:21" pos:end="1295:36">gen_trap_ifnofpu</name><argument_list pos:start="1295:37" pos:end="1295:40">(<argument pos:start="1295:38" pos:end="1295:39"><expr pos:start="1295:38" pos:end="1295:39"><name pos:start="1295:38" pos:end="1295:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1295:43" pos:end="1299:17">{<block_content pos:start="1297:21" pos:end="1297:34">

                    <goto pos:start="1297:21" pos:end="1297:34">goto <name pos:start="1297:26" pos:end="1297:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1301:17" pos:end="1301:49"><expr pos:start="1301:17" pos:end="1301:48"><call pos:start="1301:17" pos:end="1301:48"><name pos:start="1301:17" pos:end="1301:46">gen_op_clear_ieee_excp_and_FTT</name><argument_list pos:start="1301:47" pos:end="1301:48">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1303:17" pos:end="1303:46"><expr pos:start="1303:17" pos:end="1303:45"><name pos:start="1303:17" pos:end="1303:19">rs1</name> <operator pos:start="1303:21" pos:end="1303:21">=</operator> <call pos:start="1303:23" pos:end="1303:45"><name pos:start="1303:23" pos:end="1303:31">GET_FIELD</name><argument_list pos:start="1303:32" pos:end="1303:45">(<argument pos:start="1303:33" pos:end="1303:36"><expr pos:start="1303:33" pos:end="1303:36"><name pos:start="1303:33" pos:end="1303:36">insn</name></expr></argument>, <argument pos:start="1303:39" pos:end="1303:40"><expr pos:start="1303:39" pos:end="1303:40"><literal type="number" pos:start="1303:39" pos:end="1303:40">13</literal></expr></argument>, <argument pos:start="1303:43" pos:end="1303:44"><expr pos:start="1303:43" pos:end="1303:44"><literal type="number" pos:start="1303:43" pos:end="1303:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1305:17" pos:end="1305:46"><expr pos:start="1305:17" pos:end="1305:45"><name pos:start="1305:17" pos:end="1305:19">rs2</name> <operator pos:start="1305:21" pos:end="1305:21">=</operator> <call pos:start="1305:23" pos:end="1305:45"><name pos:start="1305:23" pos:end="1305:31">GET_FIELD</name><argument_list pos:start="1305:32" pos:end="1305:45">(<argument pos:start="1305:33" pos:end="1305:36"><expr pos:start="1305:33" pos:end="1305:36"><name pos:start="1305:33" pos:end="1305:36">insn</name></expr></argument>, <argument pos:start="1305:39" pos:end="1305:40"><expr pos:start="1305:39" pos:end="1305:40"><literal type="number" pos:start="1305:39" pos:end="1305:40">27</literal></expr></argument>, <argument pos:start="1305:43" pos:end="1305:44"><expr pos:start="1305:43" pos:end="1305:44"><literal type="number" pos:start="1305:43" pos:end="1305:44">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1307:17" pos:end="1307:46"><expr pos:start="1307:17" pos:end="1307:45"><name pos:start="1307:17" pos:end="1307:19">xop</name> <operator pos:start="1307:21" pos:end="1307:21">=</operator> <call pos:start="1307:23" pos:end="1307:45"><name pos:start="1307:23" pos:end="1307:31">GET_FIELD</name><argument_list pos:start="1307:32" pos:end="1307:45">(<argument pos:start="1307:33" pos:end="1307:36"><expr pos:start="1307:33" pos:end="1307:36"><name pos:start="1307:33" pos:end="1307:36">insn</name></expr></argument>, <argument pos:start="1307:39" pos:end="1307:40"><expr pos:start="1307:39" pos:end="1307:40"><literal type="number" pos:start="1307:39" pos:end="1307:40">18</literal></expr></argument>, <argument pos:start="1307:43" pos:end="1307:44"><expr pos:start="1307:43" pos:end="1307:44"><literal type="number" pos:start="1307:43" pos:end="1307:44">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1309:17" pos:end="1332:0"><expr pos:start="1309:17" pos:end="1309:30"><call pos:start="1309:17" pos:end="1309:30"><name pos:start="1309:17" pos:end="1309:26">save_state</name><argument_list pos:start="1309:27" pos:end="1309:30">(<argument pos:start="1309:28" pos:end="1309:29"><expr pos:start="1309:28" pos:end="1309:29"><name pos:start="1309:28" pos:end="1309:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="1313:1" pos:end="1313:21">#<cpp:directive pos:start="1313:2" pos:end="1313:6">ifdef</cpp:directive> <name pos:start="1313:8" pos:end="1313:21">TARGET_SPARC64</name></cpp:ifdef>

<cpp:define pos:start="1315:1" pos:end="1331:27">#<cpp:directive pos:start="1315:2" pos:end="1315:7">define</cpp:directive> <cpp:macro pos:start="1315:9" pos:end="1315:17"><name pos:start="1315:9" pos:end="1315:13">FMOVR</name><parameter_list pos:start="1315:14" pos:end="1315:17">(<parameter pos:start="1315:15" pos:end="1315:16"><type pos:start="1315:15" pos:end="1315:16"><name pos:start="1315:15" pos:end="1315:16">sz</name></type></parameter>)</parameter_list></cpp:macro>                                                  \

                <cpp:value pos:start="1317:17" pos:end="1331:27">do {                                               \

                    DisasCompare cmp;                              \

                    cond = GET_FIELD_SP(insn, 14, 17);             \

                    cpu_src1 = get_src1(dc, insn);                 \

                    gen_compare_reg(&amp;cmp, cond, cpu_src1);         \

                    gen_fmov##sz(dc, &amp;cmp, rd, rs2);               \

                    free_compare(&amp;cmp);                            \

                } while (0)</cpp:value></cpp:define>



                <if_stmt pos:start="1335:17" pos:end="1360:0"><if pos:start="1335:17" pos:end="1341:17">if <condition pos:start="1335:20" pos:end="1335:43">(<expr pos:start="1335:21" pos:end="1335:42"><operator pos:start="1335:21" pos:end="1335:21">(</operator><name pos:start="1335:22" pos:end="1335:24">xop</name> <operator pos:start="1335:26" pos:end="1335:26">&amp;</operator> <literal type="number" pos:start="1335:28" pos:end="1335:32">0x11f</literal><operator pos:start="1335:33" pos:end="1335:33">)</operator> <operator pos:start="1335:35" pos:end="1335:36">==</operator> <literal type="number" pos:start="1335:38" pos:end="1335:42">0x005</literal></expr>)</condition> <block pos:start="1335:45" pos:end="1341:17">{<block_content pos:start="1337:21" pos:end="1339:26"> <comment type="block" pos:start="1335:47" pos:end="1335:61">/* V9 fmovsr */</comment>

                    <expr_stmt pos:start="1337:21" pos:end="1337:29"><expr pos:start="1337:21" pos:end="1337:28"><call pos:start="1337:21" pos:end="1337:28"><name pos:start="1337:21" pos:end="1337:25">FMOVR</name><argument_list pos:start="1337:26" pos:end="1337:28">(<argument pos:start="1337:27" pos:end="1337:27"><expr pos:start="1337:27" pos:end="1337:27"><name pos:start="1337:27" pos:end="1337:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1339:21" pos:end="1339:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="1341:19" pos:end="1347:17">else if <condition pos:start="1341:27" pos:end="1341:50">(<expr pos:start="1341:28" pos:end="1341:49"><operator pos:start="1341:28" pos:end="1341:28">(</operator><name pos:start="1341:29" pos:end="1341:31">xop</name> <operator pos:start="1341:33" pos:end="1341:33">&amp;</operator> <literal type="number" pos:start="1341:35" pos:end="1341:39">0x11f</literal><operator pos:start="1341:40" pos:end="1341:40">)</operator> <operator pos:start="1341:42" pos:end="1341:43">==</operator> <literal type="number" pos:start="1341:45" pos:end="1341:49">0x006</literal></expr>)</condition> <block pos:start="1341:52" pos:end="1347:17">{<block_content pos:start="1343:21" pos:end="1345:26"> <comment type="line" pos:start="1341:54" pos:end="1341:65">// V9 fmovdr</comment>

                    <expr_stmt pos:start="1343:21" pos:end="1343:29"><expr pos:start="1343:21" pos:end="1343:28"><call pos:start="1343:21" pos:end="1343:28"><name pos:start="1343:21" pos:end="1343:25">FMOVR</name><argument_list pos:start="1343:26" pos:end="1343:28">(<argument pos:start="1343:27" pos:end="1343:27"><expr pos:start="1343:27" pos:end="1343:27"><name pos:start="1343:27" pos:end="1343:27">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1345:21" pos:end="1345:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="1347:19" pos:end="1360:0">else if <condition pos:start="1347:27" pos:end="1347:50">(<expr pos:start="1347:28" pos:end="1347:49"><operator pos:start="1347:28" pos:end="1347:28">(</operator><name pos:start="1347:29" pos:end="1347:31">xop</name> <operator pos:start="1347:33" pos:end="1347:33">&amp;</operator> <literal type="number" pos:start="1347:35" pos:end="1347:39">0x11f</literal><operator pos:start="1347:40" pos:end="1347:40">)</operator> <operator pos:start="1347:42" pos:end="1347:43">==</operator> <literal type="number" pos:start="1347:45" pos:end="1347:49">0x007</literal></expr>)</condition> <block pos:start="1347:52" pos:end="1360:0">{<block_content pos:start="1349:21" pos:end="1353:26"> <comment type="line" pos:start="1347:54" pos:end="1347:65">// V9 fmovqr</comment>

                    <expr_stmt pos:start="1349:21" pos:end="1349:52"><expr pos:start="1349:21" pos:end="1349:51"><call pos:start="1349:21" pos:end="1349:51"><name pos:start="1349:21" pos:end="1349:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1349:38" pos:end="1349:51">(<argument pos:start="1349:39" pos:end="1349:40"><expr pos:start="1349:39" pos:end="1349:40"><name pos:start="1349:39" pos:end="1349:40">dc</name></expr></argument>, <argument pos:start="1349:43" pos:end="1349:50"><expr pos:start="1349:43" pos:end="1349:50"><name pos:start="1349:43" pos:end="1349:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1351:21" pos:end="1351:29"><expr pos:start="1351:21" pos:end="1351:28"><call pos:start="1351:21" pos:end="1351:28"><name pos:start="1351:21" pos:end="1351:25">FMOVR</name><argument_list pos:start="1351:26" pos:end="1351:28">(<argument pos:start="1351:27" pos:end="1351:27"><expr pos:start="1351:27" pos:end="1351:27"><name pos:start="1351:27" pos:end="1351:27">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1353:21" pos:end="1353:26">break;</break>

                </block_content>}</block></if></if_stmt>

<cpp:undef pos:start="1357:1" pos:end="1357:12">#<cpp:directive pos:start="1357:2" pos:end="1357:6">undef</cpp:directive> <name pos:start="1357:8" pos:end="1357:12">FMOVR</name></cpp:undef>

<cpp:endif pos:start="1359:1" pos:end="1359:6">#<cpp:directive pos:start="1359:2" pos:end="1359:6">endif</cpp:directive></cpp:endif>

                <switch pos:start="1361:17" pos:end="1595:17">switch <condition pos:start="1361:24" pos:end="1361:28">(<expr pos:start="1361:25" pos:end="1361:27"><name pos:start="1361:25" pos:end="1361:27">xop</name></expr>)</condition> <block pos:start="1361:30" pos:end="1595:17">{<block_content pos:start="1383:21" pos:end="1593:42">

<cpp:ifdef pos:start="1363:1" pos:end="1363:21">#<cpp:directive pos:start="1363:2" pos:end="1363:6">ifdef</cpp:directive> <name pos:start="1363:8" pos:end="1363:21">TARGET_SPARC64</name></cpp:ifdef>

<cpp:define pos:start="1365:1" pos:end="1379:31">#<cpp:directive pos:start="1365:2" pos:end="1365:7">define</cpp:directive> <cpp:macro pos:start="1365:9" pos:end="1365:23"><name pos:start="1365:9" pos:end="1365:14">FMOVCC</name><parameter_list pos:start="1365:15" pos:end="1365:23">(<parameter pos:start="1365:16" pos:end="1365:18"><type pos:start="1365:16" pos:end="1365:18"><name pos:start="1365:16" pos:end="1365:18">fcc</name></type></parameter>, <parameter pos:start="1365:21" pos:end="1365:22"><type pos:start="1365:21" pos:end="1365:22"><name pos:start="1365:21" pos:end="1365:22">sz</name></type></parameter>)</parameter_list></cpp:macro>                                                 \

                    <cpp:value pos:start="1367:21" pos:end="1379:31">do {                                                \

                        DisasCompare cmp;                               \

                        cond = GET_FIELD_SP(insn, 14, 17);              \

                        gen_fcompare(&amp;cmp, fcc, cond);                  \

                        gen_fmov##sz(dc, &amp;cmp, rd, rs2);                \

                        free_compare(&amp;cmp);                             \

                    } while (0)</cpp:value></cpp:define>



                    <case pos:start="1383:21" pos:end="1383:31">case <expr pos:start="1383:26" pos:end="1383:30"><literal type="number" pos:start="1383:26" pos:end="1383:30">0x001</literal></expr>:</case> <comment type="block" pos:start="1383:33" pos:end="1383:54">/* V9 fmovscc %fcc0 */</comment>

                        <expr_stmt pos:start="1385:25" pos:end="1385:37"><expr pos:start="1385:25" pos:end="1385:36"><call pos:start="1385:25" pos:end="1385:36"><name pos:start="1385:25" pos:end="1385:30">FMOVCC</name><argument_list pos:start="1385:31" pos:end="1385:36">(<argument pos:start="1385:32" pos:end="1385:32"><expr pos:start="1385:32" pos:end="1385:32"><literal type="number" pos:start="1385:32" pos:end="1385:32">0</literal></expr></argument>, <argument pos:start="1385:35" pos:end="1385:35"><expr pos:start="1385:35" pos:end="1385:35"><name pos:start="1385:35" pos:end="1385:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1387:25" pos:end="1387:30">break;</break>

                    <case pos:start="1389:21" pos:end="1389:31">case <expr pos:start="1389:26" pos:end="1389:30"><literal type="number" pos:start="1389:26" pos:end="1389:30">0x002</literal></expr>:</case> <comment type="block" pos:start="1389:33" pos:end="1389:54">/* V9 fmovdcc %fcc0 */</comment>

                        <expr_stmt pos:start="1391:25" pos:end="1391:37"><expr pos:start="1391:25" pos:end="1391:36"><call pos:start="1391:25" pos:end="1391:36"><name pos:start="1391:25" pos:end="1391:30">FMOVCC</name><argument_list pos:start="1391:31" pos:end="1391:36">(<argument pos:start="1391:32" pos:end="1391:32"><expr pos:start="1391:32" pos:end="1391:32"><literal type="number" pos:start="1391:32" pos:end="1391:32">0</literal></expr></argument>, <argument pos:start="1391:35" pos:end="1391:35"><expr pos:start="1391:35" pos:end="1391:35"><name pos:start="1391:35" pos:end="1391:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1393:25" pos:end="1393:30">break;</break>

                    <case pos:start="1395:21" pos:end="1395:31">case <expr pos:start="1395:26" pos:end="1395:30"><literal type="number" pos:start="1395:26" pos:end="1395:30">0x003</literal></expr>:</case> <comment type="block" pos:start="1395:33" pos:end="1395:54">/* V9 fmovqcc %fcc0 */</comment>

                        <expr_stmt pos:start="1397:25" pos:end="1397:56"><expr pos:start="1397:25" pos:end="1397:55"><call pos:start="1397:25" pos:end="1397:55"><name pos:start="1397:25" pos:end="1397:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1397:42" pos:end="1397:55">(<argument pos:start="1397:43" pos:end="1397:44"><expr pos:start="1397:43" pos:end="1397:44"><name pos:start="1397:43" pos:end="1397:44">dc</name></expr></argument>, <argument pos:start="1397:47" pos:end="1397:54"><expr pos:start="1397:47" pos:end="1397:54"><name pos:start="1397:47" pos:end="1397:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1399:25" pos:end="1399:37"><expr pos:start="1399:25" pos:end="1399:36"><call pos:start="1399:25" pos:end="1399:36"><name pos:start="1399:25" pos:end="1399:30">FMOVCC</name><argument_list pos:start="1399:31" pos:end="1399:36">(<argument pos:start="1399:32" pos:end="1399:32"><expr pos:start="1399:32" pos:end="1399:32"><literal type="number" pos:start="1399:32" pos:end="1399:32">0</literal></expr></argument>, <argument pos:start="1399:35" pos:end="1399:35"><expr pos:start="1399:35" pos:end="1399:35"><name pos:start="1399:35" pos:end="1399:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1401:25" pos:end="1401:30">break;</break>

                    <case pos:start="1403:21" pos:end="1403:31">case <expr pos:start="1403:26" pos:end="1403:30"><literal type="number" pos:start="1403:26" pos:end="1403:30">0x041</literal></expr>:</case> <comment type="block" pos:start="1403:33" pos:end="1403:54">/* V9 fmovscc %fcc1 */</comment>

                        <expr_stmt pos:start="1405:25" pos:end="1405:37"><expr pos:start="1405:25" pos:end="1405:36"><call pos:start="1405:25" pos:end="1405:36"><name pos:start="1405:25" pos:end="1405:30">FMOVCC</name><argument_list pos:start="1405:31" pos:end="1405:36">(<argument pos:start="1405:32" pos:end="1405:32"><expr pos:start="1405:32" pos:end="1405:32"><literal type="number" pos:start="1405:32" pos:end="1405:32">1</literal></expr></argument>, <argument pos:start="1405:35" pos:end="1405:35"><expr pos:start="1405:35" pos:end="1405:35"><name pos:start="1405:35" pos:end="1405:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1407:25" pos:end="1407:30">break;</break>

                    <case pos:start="1409:21" pos:end="1409:31">case <expr pos:start="1409:26" pos:end="1409:30"><literal type="number" pos:start="1409:26" pos:end="1409:30">0x042</literal></expr>:</case> <comment type="block" pos:start="1409:33" pos:end="1409:54">/* V9 fmovdcc %fcc1 */</comment>

                        <expr_stmt pos:start="1411:25" pos:end="1411:37"><expr pos:start="1411:25" pos:end="1411:36"><call pos:start="1411:25" pos:end="1411:36"><name pos:start="1411:25" pos:end="1411:30">FMOVCC</name><argument_list pos:start="1411:31" pos:end="1411:36">(<argument pos:start="1411:32" pos:end="1411:32"><expr pos:start="1411:32" pos:end="1411:32"><literal type="number" pos:start="1411:32" pos:end="1411:32">1</literal></expr></argument>, <argument pos:start="1411:35" pos:end="1411:35"><expr pos:start="1411:35" pos:end="1411:35"><name pos:start="1411:35" pos:end="1411:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1413:25" pos:end="1413:30">break;</break>

                    <case pos:start="1415:21" pos:end="1415:31">case <expr pos:start="1415:26" pos:end="1415:30"><literal type="number" pos:start="1415:26" pos:end="1415:30">0x043</literal></expr>:</case> <comment type="block" pos:start="1415:33" pos:end="1415:54">/* V9 fmovqcc %fcc1 */</comment>

                        <expr_stmt pos:start="1417:25" pos:end="1417:56"><expr pos:start="1417:25" pos:end="1417:55"><call pos:start="1417:25" pos:end="1417:55"><name pos:start="1417:25" pos:end="1417:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1417:42" pos:end="1417:55">(<argument pos:start="1417:43" pos:end="1417:44"><expr pos:start="1417:43" pos:end="1417:44"><name pos:start="1417:43" pos:end="1417:44">dc</name></expr></argument>, <argument pos:start="1417:47" pos:end="1417:54"><expr pos:start="1417:47" pos:end="1417:54"><name pos:start="1417:47" pos:end="1417:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1419:25" pos:end="1419:37"><expr pos:start="1419:25" pos:end="1419:36"><call pos:start="1419:25" pos:end="1419:36"><name pos:start="1419:25" pos:end="1419:30">FMOVCC</name><argument_list pos:start="1419:31" pos:end="1419:36">(<argument pos:start="1419:32" pos:end="1419:32"><expr pos:start="1419:32" pos:end="1419:32"><literal type="number" pos:start="1419:32" pos:end="1419:32">1</literal></expr></argument>, <argument pos:start="1419:35" pos:end="1419:35"><expr pos:start="1419:35" pos:end="1419:35"><name pos:start="1419:35" pos:end="1419:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1421:25" pos:end="1421:30">break;</break>

                    <case pos:start="1423:21" pos:end="1423:31">case <expr pos:start="1423:26" pos:end="1423:30"><literal type="number" pos:start="1423:26" pos:end="1423:30">0x081</literal></expr>:</case> <comment type="block" pos:start="1423:33" pos:end="1423:54">/* V9 fmovscc %fcc2 */</comment>

                        <expr_stmt pos:start="1425:25" pos:end="1425:37"><expr pos:start="1425:25" pos:end="1425:36"><call pos:start="1425:25" pos:end="1425:36"><name pos:start="1425:25" pos:end="1425:30">FMOVCC</name><argument_list pos:start="1425:31" pos:end="1425:36">(<argument pos:start="1425:32" pos:end="1425:32"><expr pos:start="1425:32" pos:end="1425:32"><literal type="number" pos:start="1425:32" pos:end="1425:32">2</literal></expr></argument>, <argument pos:start="1425:35" pos:end="1425:35"><expr pos:start="1425:35" pos:end="1425:35"><name pos:start="1425:35" pos:end="1425:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1427:25" pos:end="1427:30">break;</break>

                    <case pos:start="1429:21" pos:end="1429:31">case <expr pos:start="1429:26" pos:end="1429:30"><literal type="number" pos:start="1429:26" pos:end="1429:30">0x082</literal></expr>:</case> <comment type="block" pos:start="1429:33" pos:end="1429:54">/* V9 fmovdcc %fcc2 */</comment>

                        <expr_stmt pos:start="1431:25" pos:end="1431:37"><expr pos:start="1431:25" pos:end="1431:36"><call pos:start="1431:25" pos:end="1431:36"><name pos:start="1431:25" pos:end="1431:30">FMOVCC</name><argument_list pos:start="1431:31" pos:end="1431:36">(<argument pos:start="1431:32" pos:end="1431:32"><expr pos:start="1431:32" pos:end="1431:32"><literal type="number" pos:start="1431:32" pos:end="1431:32">2</literal></expr></argument>, <argument pos:start="1431:35" pos:end="1431:35"><expr pos:start="1431:35" pos:end="1431:35"><name pos:start="1431:35" pos:end="1431:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1433:25" pos:end="1433:30">break;</break>

                    <case pos:start="1435:21" pos:end="1435:31">case <expr pos:start="1435:26" pos:end="1435:30"><literal type="number" pos:start="1435:26" pos:end="1435:30">0x083</literal></expr>:</case> <comment type="block" pos:start="1435:33" pos:end="1435:54">/* V9 fmovqcc %fcc2 */</comment>

                        <expr_stmt pos:start="1437:25" pos:end="1437:56"><expr pos:start="1437:25" pos:end="1437:55"><call pos:start="1437:25" pos:end="1437:55"><name pos:start="1437:25" pos:end="1437:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1437:42" pos:end="1437:55">(<argument pos:start="1437:43" pos:end="1437:44"><expr pos:start="1437:43" pos:end="1437:44"><name pos:start="1437:43" pos:end="1437:44">dc</name></expr></argument>, <argument pos:start="1437:47" pos:end="1437:54"><expr pos:start="1437:47" pos:end="1437:54"><name pos:start="1437:47" pos:end="1437:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1439:25" pos:end="1439:37"><expr pos:start="1439:25" pos:end="1439:36"><call pos:start="1439:25" pos:end="1439:36"><name pos:start="1439:25" pos:end="1439:30">FMOVCC</name><argument_list pos:start="1439:31" pos:end="1439:36">(<argument pos:start="1439:32" pos:end="1439:32"><expr pos:start="1439:32" pos:end="1439:32"><literal type="number" pos:start="1439:32" pos:end="1439:32">2</literal></expr></argument>, <argument pos:start="1439:35" pos:end="1439:35"><expr pos:start="1439:35" pos:end="1439:35"><name pos:start="1439:35" pos:end="1439:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1441:25" pos:end="1441:30">break;</break>

                    <case pos:start="1443:21" pos:end="1443:31">case <expr pos:start="1443:26" pos:end="1443:30"><literal type="number" pos:start="1443:26" pos:end="1443:30">0x0c1</literal></expr>:</case> <comment type="block" pos:start="1443:33" pos:end="1443:54">/* V9 fmovscc %fcc3 */</comment>

                        <expr_stmt pos:start="1445:25" pos:end="1445:37"><expr pos:start="1445:25" pos:end="1445:36"><call pos:start="1445:25" pos:end="1445:36"><name pos:start="1445:25" pos:end="1445:30">FMOVCC</name><argument_list pos:start="1445:31" pos:end="1445:36">(<argument pos:start="1445:32" pos:end="1445:32"><expr pos:start="1445:32" pos:end="1445:32"><literal type="number" pos:start="1445:32" pos:end="1445:32">3</literal></expr></argument>, <argument pos:start="1445:35" pos:end="1445:35"><expr pos:start="1445:35" pos:end="1445:35"><name pos:start="1445:35" pos:end="1445:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1447:25" pos:end="1447:30">break;</break>

                    <case pos:start="1449:21" pos:end="1449:31">case <expr pos:start="1449:26" pos:end="1449:30"><literal type="number" pos:start="1449:26" pos:end="1449:30">0x0c2</literal></expr>:</case> <comment type="block" pos:start="1449:33" pos:end="1449:54">/* V9 fmovdcc %fcc3 */</comment>

                        <expr_stmt pos:start="1451:25" pos:end="1451:37"><expr pos:start="1451:25" pos:end="1451:36"><call pos:start="1451:25" pos:end="1451:36"><name pos:start="1451:25" pos:end="1451:30">FMOVCC</name><argument_list pos:start="1451:31" pos:end="1451:36">(<argument pos:start="1451:32" pos:end="1451:32"><expr pos:start="1451:32" pos:end="1451:32"><literal type="number" pos:start="1451:32" pos:end="1451:32">3</literal></expr></argument>, <argument pos:start="1451:35" pos:end="1451:35"><expr pos:start="1451:35" pos:end="1451:35"><name pos:start="1451:35" pos:end="1451:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1453:25" pos:end="1453:30">break;</break>

                    <case pos:start="1455:21" pos:end="1455:31">case <expr pos:start="1455:26" pos:end="1455:30"><literal type="number" pos:start="1455:26" pos:end="1455:30">0x0c3</literal></expr>:</case> <comment type="block" pos:start="1455:33" pos:end="1455:54">/* V9 fmovqcc %fcc3 */</comment>

                        <expr_stmt pos:start="1457:25" pos:end="1457:56"><expr pos:start="1457:25" pos:end="1457:55"><call pos:start="1457:25" pos:end="1457:55"><name pos:start="1457:25" pos:end="1457:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1457:42" pos:end="1457:55">(<argument pos:start="1457:43" pos:end="1457:44"><expr pos:start="1457:43" pos:end="1457:44"><name pos:start="1457:43" pos:end="1457:44">dc</name></expr></argument>, <argument pos:start="1457:47" pos:end="1457:54"><expr pos:start="1457:47" pos:end="1457:54"><name pos:start="1457:47" pos:end="1457:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1459:25" pos:end="1459:37"><expr pos:start="1459:25" pos:end="1459:36"><call pos:start="1459:25" pos:end="1459:36"><name pos:start="1459:25" pos:end="1459:30">FMOVCC</name><argument_list pos:start="1459:31" pos:end="1459:36">(<argument pos:start="1459:32" pos:end="1459:32"><expr pos:start="1459:32" pos:end="1459:32"><literal type="number" pos:start="1459:32" pos:end="1459:32">3</literal></expr></argument>, <argument pos:start="1459:35" pos:end="1459:35"><expr pos:start="1459:35" pos:end="1459:35"><name pos:start="1459:35" pos:end="1459:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1461:25" pos:end="1480:0">break;</break>

<cpp:undef pos:start="1463:1" pos:end="1463:13">#<cpp:directive pos:start="1463:2" pos:end="1463:6">undef</cpp:directive> <name pos:start="1463:8" pos:end="1463:13">FMOVCC</name></cpp:undef>

<cpp:define pos:start="1465:1" pos:end="1479:31">#<cpp:directive pos:start="1465:2" pos:end="1465:7">define</cpp:directive> <cpp:macro pos:start="1465:9" pos:end="1465:23"><name pos:start="1465:9" pos:end="1465:14">FMOVCC</name><parameter_list pos:start="1465:15" pos:end="1465:23">(<parameter pos:start="1465:16" pos:end="1465:18"><type pos:start="1465:16" pos:end="1465:18"><name pos:start="1465:16" pos:end="1465:18">xcc</name></type></parameter>, <parameter pos:start="1465:21" pos:end="1465:22"><type pos:start="1465:21" pos:end="1465:22"><name pos:start="1465:21" pos:end="1465:22">sz</name></type></parameter>)</parameter_list></cpp:macro>                                                 \

                    <cpp:value pos:start="1467:21" pos:end="1479:31">do {                                                \

                        DisasCompare cmp;                               \

                        cond = GET_FIELD_SP(insn, 14, 17);              \

                        gen_compare(&amp;cmp, xcc, cond, dc);               \

                        gen_fmov##sz(dc, &amp;cmp, rd, rs2);                \

                        free_compare(&amp;cmp);                             \

                    } while (0)</cpp:value></cpp:define>



                    <case pos:start="1483:21" pos:end="1483:31">case <expr pos:start="1483:26" pos:end="1483:30"><literal type="number" pos:start="1483:26" pos:end="1483:30">0x101</literal></expr>:</case> <comment type="block" pos:start="1483:33" pos:end="1483:53">/* V9 fmovscc %icc */</comment>

                        <expr_stmt pos:start="1485:25" pos:end="1485:37"><expr pos:start="1485:25" pos:end="1485:36"><call pos:start="1485:25" pos:end="1485:36"><name pos:start="1485:25" pos:end="1485:30">FMOVCC</name><argument_list pos:start="1485:31" pos:end="1485:36">(<argument pos:start="1485:32" pos:end="1485:32"><expr pos:start="1485:32" pos:end="1485:32"><literal type="number" pos:start="1485:32" pos:end="1485:32">0</literal></expr></argument>, <argument pos:start="1485:35" pos:end="1485:35"><expr pos:start="1485:35" pos:end="1485:35"><name pos:start="1485:35" pos:end="1485:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1487:25" pos:end="1487:30">break;</break>

                    <case pos:start="1489:21" pos:end="1489:31">case <expr pos:start="1489:26" pos:end="1489:30"><literal type="number" pos:start="1489:26" pos:end="1489:30">0x102</literal></expr>:</case> <comment type="block" pos:start="1489:33" pos:end="1489:53">/* V9 fmovdcc %icc */</comment>

                        <expr_stmt pos:start="1491:25" pos:end="1491:37"><expr pos:start="1491:25" pos:end="1491:36"><call pos:start="1491:25" pos:end="1491:36"><name pos:start="1491:25" pos:end="1491:30">FMOVCC</name><argument_list pos:start="1491:31" pos:end="1491:36">(<argument pos:start="1491:32" pos:end="1491:32"><expr pos:start="1491:32" pos:end="1491:32"><literal type="number" pos:start="1491:32" pos:end="1491:32">0</literal></expr></argument>, <argument pos:start="1491:35" pos:end="1491:35"><expr pos:start="1491:35" pos:end="1491:35"><name pos:start="1491:35" pos:end="1491:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1493:25" pos:end="1493:30">break;</break>

                    <case pos:start="1495:21" pos:end="1495:31">case <expr pos:start="1495:26" pos:end="1495:30"><literal type="number" pos:start="1495:26" pos:end="1495:30">0x103</literal></expr>:</case> <comment type="block" pos:start="1495:33" pos:end="1495:53">/* V9 fmovqcc %icc */</comment>

                        <expr_stmt pos:start="1497:25" pos:end="1497:56"><expr pos:start="1497:25" pos:end="1497:55"><call pos:start="1497:25" pos:end="1497:55"><name pos:start="1497:25" pos:end="1497:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1497:42" pos:end="1497:55">(<argument pos:start="1497:43" pos:end="1497:44"><expr pos:start="1497:43" pos:end="1497:44"><name pos:start="1497:43" pos:end="1497:44">dc</name></expr></argument>, <argument pos:start="1497:47" pos:end="1497:54"><expr pos:start="1497:47" pos:end="1497:54"><name pos:start="1497:47" pos:end="1497:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1499:25" pos:end="1499:37"><expr pos:start="1499:25" pos:end="1499:36"><call pos:start="1499:25" pos:end="1499:36"><name pos:start="1499:25" pos:end="1499:30">FMOVCC</name><argument_list pos:start="1499:31" pos:end="1499:36">(<argument pos:start="1499:32" pos:end="1499:32"><expr pos:start="1499:32" pos:end="1499:32"><literal type="number" pos:start="1499:32" pos:end="1499:32">0</literal></expr></argument>, <argument pos:start="1499:35" pos:end="1499:35"><expr pos:start="1499:35" pos:end="1499:35"><name pos:start="1499:35" pos:end="1499:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1501:25" pos:end="1501:30">break;</break>

                    <case pos:start="1503:21" pos:end="1503:31">case <expr pos:start="1503:26" pos:end="1503:30"><literal type="number" pos:start="1503:26" pos:end="1503:30">0x181</literal></expr>:</case> <comment type="block" pos:start="1503:33" pos:end="1503:53">/* V9 fmovscc %xcc */</comment>

                        <expr_stmt pos:start="1505:25" pos:end="1505:37"><expr pos:start="1505:25" pos:end="1505:36"><call pos:start="1505:25" pos:end="1505:36"><name pos:start="1505:25" pos:end="1505:30">FMOVCC</name><argument_list pos:start="1505:31" pos:end="1505:36">(<argument pos:start="1505:32" pos:end="1505:32"><expr pos:start="1505:32" pos:end="1505:32"><literal type="number" pos:start="1505:32" pos:end="1505:32">1</literal></expr></argument>, <argument pos:start="1505:35" pos:end="1505:35"><expr pos:start="1505:35" pos:end="1505:35"><name pos:start="1505:35" pos:end="1505:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1507:25" pos:end="1507:30">break;</break>

                    <case pos:start="1509:21" pos:end="1509:31">case <expr pos:start="1509:26" pos:end="1509:30"><literal type="number" pos:start="1509:26" pos:end="1509:30">0x182</literal></expr>:</case> <comment type="block" pos:start="1509:33" pos:end="1509:53">/* V9 fmovdcc %xcc */</comment>

                        <expr_stmt pos:start="1511:25" pos:end="1511:37"><expr pos:start="1511:25" pos:end="1511:36"><call pos:start="1511:25" pos:end="1511:36"><name pos:start="1511:25" pos:end="1511:30">FMOVCC</name><argument_list pos:start="1511:31" pos:end="1511:36">(<argument pos:start="1511:32" pos:end="1511:32"><expr pos:start="1511:32" pos:end="1511:32"><literal type="number" pos:start="1511:32" pos:end="1511:32">1</literal></expr></argument>, <argument pos:start="1511:35" pos:end="1511:35"><expr pos:start="1511:35" pos:end="1511:35"><name pos:start="1511:35" pos:end="1511:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1513:25" pos:end="1513:30">break;</break>

                    <case pos:start="1515:21" pos:end="1515:31">case <expr pos:start="1515:26" pos:end="1515:30"><literal type="number" pos:start="1515:26" pos:end="1515:30">0x183</literal></expr>:</case> <comment type="block" pos:start="1515:33" pos:end="1515:53">/* V9 fmovqcc %xcc */</comment>

                        <expr_stmt pos:start="1517:25" pos:end="1517:56"><expr pos:start="1517:25" pos:end="1517:55"><call pos:start="1517:25" pos:end="1517:55"><name pos:start="1517:25" pos:end="1517:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1517:42" pos:end="1517:55">(<argument pos:start="1517:43" pos:end="1517:44"><expr pos:start="1517:43" pos:end="1517:44"><name pos:start="1517:43" pos:end="1517:44">dc</name></expr></argument>, <argument pos:start="1517:47" pos:end="1517:54"><expr pos:start="1517:47" pos:end="1517:54"><name pos:start="1517:47" pos:end="1517:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1519:25" pos:end="1519:37"><expr pos:start="1519:25" pos:end="1519:36"><call pos:start="1519:25" pos:end="1519:36"><name pos:start="1519:25" pos:end="1519:30">FMOVCC</name><argument_list pos:start="1519:31" pos:end="1519:36">(<argument pos:start="1519:32" pos:end="1519:32"><expr pos:start="1519:32" pos:end="1519:32"><literal type="number" pos:start="1519:32" pos:end="1519:32">1</literal></expr></argument>, <argument pos:start="1519:35" pos:end="1519:35"><expr pos:start="1519:35" pos:end="1519:35"><name pos:start="1519:35" pos:end="1519:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1521:25" pos:end="1526:0">break;</break>

<cpp:undef pos:start="1523:1" pos:end="1523:13">#<cpp:directive pos:start="1523:2" pos:end="1523:6">undef</cpp:directive> <name pos:start="1523:8" pos:end="1523:13">FMOVCC</name></cpp:undef>

<cpp:endif pos:start="1525:1" pos:end="1525:6">#<cpp:directive pos:start="1525:2" pos:end="1525:6">endif</cpp:directive></cpp:endif>

                    <case pos:start="1527:21" pos:end="1527:30">case <expr pos:start="1527:26" pos:end="1527:29"><literal type="number" pos:start="1527:26" pos:end="1527:29">0x51</literal></expr>:</case> <comment type="block" pos:start="1527:32" pos:end="1527:51">/* fcmps, V9 %fcc */</comment>

                        <expr_stmt pos:start="1529:25" pos:end="1529:62"><expr pos:start="1529:25" pos:end="1529:61"><name pos:start="1529:25" pos:end="1529:35">cpu_src1_32</name> <operator pos:start="1529:37" pos:end="1529:37">=</operator> <call pos:start="1529:39" pos:end="1529:61"><name pos:start="1529:39" pos:end="1529:52">gen_load_fpr_F</name><argument_list pos:start="1529:53" pos:end="1529:61">(<argument pos:start="1529:54" pos:end="1529:55"><expr pos:start="1529:54" pos:end="1529:55"><name pos:start="1529:54" pos:end="1529:55">dc</name></expr></argument>, <argument pos:start="1529:58" pos:end="1529:60"><expr pos:start="1529:58" pos:end="1529:60"><name pos:start="1529:58" pos:end="1529:60">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1531:25" pos:end="1531:62"><expr pos:start="1531:25" pos:end="1531:61"><name pos:start="1531:25" pos:end="1531:35">cpu_src2_32</name> <operator pos:start="1531:37" pos:end="1531:37">=</operator> <call pos:start="1531:39" pos:end="1531:61"><name pos:start="1531:39" pos:end="1531:52">gen_load_fpr_F</name><argument_list pos:start="1531:53" pos:end="1531:61">(<argument pos:start="1531:54" pos:end="1531:55"><expr pos:start="1531:54" pos:end="1531:55"><name pos:start="1531:54" pos:end="1531:55">dc</name></expr></argument>, <argument pos:start="1531:58" pos:end="1531:60"><expr pos:start="1531:58" pos:end="1531:60"><name pos:start="1531:58" pos:end="1531:60">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1533:25" pos:end="1533:71"><expr pos:start="1533:25" pos:end="1533:70"><call pos:start="1533:25" pos:end="1533:70"><name pos:start="1533:25" pos:end="1533:36">gen_op_fcmps</name><argument_list pos:start="1533:37" pos:end="1533:70">(<argument pos:start="1533:38" pos:end="1533:43"><expr pos:start="1533:38" pos:end="1533:43"><name pos:start="1533:38" pos:end="1533:39">rd</name> <operator pos:start="1533:41" pos:end="1533:41">&amp;</operator> <literal type="number" pos:start="1533:43" pos:end="1533:43">3</literal></expr></argument>, <argument pos:start="1533:46" pos:end="1533:56"><expr pos:start="1533:46" pos:end="1533:56"><name pos:start="1533:46" pos:end="1533:56">cpu_src1_32</name></expr></argument>, <argument pos:start="1533:59" pos:end="1533:69"><expr pos:start="1533:59" pos:end="1533:69"><name pos:start="1533:59" pos:end="1533:69">cpu_src2_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1535:25" pos:end="1535:30">break;</break>

                    <case pos:start="1537:21" pos:end="1537:30">case <expr pos:start="1537:26" pos:end="1537:29"><literal type="number" pos:start="1537:26" pos:end="1537:29">0x52</literal></expr>:</case> <comment type="block" pos:start="1537:32" pos:end="1537:51">/* fcmpd, V9 %fcc */</comment>

                        <expr_stmt pos:start="1539:25" pos:end="1539:62"><expr pos:start="1539:25" pos:end="1539:61"><name pos:start="1539:25" pos:end="1539:35">cpu_src1_64</name> <operator pos:start="1539:37" pos:end="1539:37">=</operator> <call pos:start="1539:39" pos:end="1539:61"><name pos:start="1539:39" pos:end="1539:52">gen_load_fpr_D</name><argument_list pos:start="1539:53" pos:end="1539:61">(<argument pos:start="1539:54" pos:end="1539:55"><expr pos:start="1539:54" pos:end="1539:55"><name pos:start="1539:54" pos:end="1539:55">dc</name></expr></argument>, <argument pos:start="1539:58" pos:end="1539:60"><expr pos:start="1539:58" pos:end="1539:60"><name pos:start="1539:58" pos:end="1539:60">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1541:25" pos:end="1541:62"><expr pos:start="1541:25" pos:end="1541:61"><name pos:start="1541:25" pos:end="1541:35">cpu_src2_64</name> <operator pos:start="1541:37" pos:end="1541:37">=</operator> <call pos:start="1541:39" pos:end="1541:61"><name pos:start="1541:39" pos:end="1541:52">gen_load_fpr_D</name><argument_list pos:start="1541:53" pos:end="1541:61">(<argument pos:start="1541:54" pos:end="1541:55"><expr pos:start="1541:54" pos:end="1541:55"><name pos:start="1541:54" pos:end="1541:55">dc</name></expr></argument>, <argument pos:start="1541:58" pos:end="1541:60"><expr pos:start="1541:58" pos:end="1541:60"><name pos:start="1541:58" pos:end="1541:60">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1543:25" pos:end="1543:71"><expr pos:start="1543:25" pos:end="1543:70"><call pos:start="1543:25" pos:end="1543:70"><name pos:start="1543:25" pos:end="1543:36">gen_op_fcmpd</name><argument_list pos:start="1543:37" pos:end="1543:70">(<argument pos:start="1543:38" pos:end="1543:43"><expr pos:start="1543:38" pos:end="1543:43"><name pos:start="1543:38" pos:end="1543:39">rd</name> <operator pos:start="1543:41" pos:end="1543:41">&amp;</operator> <literal type="number" pos:start="1543:43" pos:end="1543:43">3</literal></expr></argument>, <argument pos:start="1543:46" pos:end="1543:56"><expr pos:start="1543:46" pos:end="1543:56"><name pos:start="1543:46" pos:end="1543:56">cpu_src1_64</name></expr></argument>, <argument pos:start="1543:59" pos:end="1543:69"><expr pos:start="1543:59" pos:end="1543:69"><name pos:start="1543:59" pos:end="1543:69">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1545:25" pos:end="1545:30">break;</break>

                    <case pos:start="1547:21" pos:end="1547:30">case <expr pos:start="1547:26" pos:end="1547:29"><literal type="number" pos:start="1547:26" pos:end="1547:29">0x53</literal></expr>:</case> <comment type="block" pos:start="1547:32" pos:end="1547:51">/* fcmpq, V9 %fcc */</comment>

                        <expr_stmt pos:start="1549:25" pos:end="1549:56"><expr pos:start="1549:25" pos:end="1549:55"><call pos:start="1549:25" pos:end="1549:55"><name pos:start="1549:25" pos:end="1549:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1549:42" pos:end="1549:55">(<argument pos:start="1549:43" pos:end="1549:44"><expr pos:start="1549:43" pos:end="1549:44"><name pos:start="1549:43" pos:end="1549:44">dc</name></expr></argument>, <argument pos:start="1549:47" pos:end="1549:54"><expr pos:start="1549:47" pos:end="1549:54"><name pos:start="1549:47" pos:end="1549:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1551:25" pos:end="1551:57"><expr pos:start="1551:25" pos:end="1551:56"><call pos:start="1551:25" pos:end="1551:56"><name pos:start="1551:25" pos:end="1551:43">gen_op_load_fpr_QT0</name><argument_list pos:start="1551:44" pos:end="1551:56">(<argument pos:start="1551:45" pos:end="1551:55"><expr pos:start="1551:45" pos:end="1551:55"><call pos:start="1551:45" pos:end="1551:55"><name pos:start="1551:45" pos:end="1551:50">QFPREG</name><argument_list pos:start="1551:51" pos:end="1551:55">(<argument pos:start="1551:52" pos:end="1551:54"><expr pos:start="1551:52" pos:end="1551:54"><name pos:start="1551:52" pos:end="1551:54">rs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1553:25" pos:end="1553:57"><expr pos:start="1553:25" pos:end="1553:56"><call pos:start="1553:25" pos:end="1553:56"><name pos:start="1553:25" pos:end="1553:43">gen_op_load_fpr_QT1</name><argument_list pos:start="1553:44" pos:end="1553:56">(<argument pos:start="1553:45" pos:end="1553:55"><expr pos:start="1553:45" pos:end="1553:55"><call pos:start="1553:45" pos:end="1553:55"><name pos:start="1553:45" pos:end="1553:50">QFPREG</name><argument_list pos:start="1553:51" pos:end="1553:55">(<argument pos:start="1553:52" pos:end="1553:54"><expr pos:start="1553:52" pos:end="1553:54"><name pos:start="1553:52" pos:end="1553:54">rs2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1555:25" pos:end="1555:45"><expr pos:start="1555:25" pos:end="1555:44"><call pos:start="1555:25" pos:end="1555:44"><name pos:start="1555:25" pos:end="1555:36">gen_op_fcmpq</name><argument_list pos:start="1555:37" pos:end="1555:44">(<argument pos:start="1555:38" pos:end="1555:43"><expr pos:start="1555:38" pos:end="1555:43"><name pos:start="1555:38" pos:end="1555:39">rd</name> <operator pos:start="1555:41" pos:end="1555:41">&amp;</operator> <literal type="number" pos:start="1555:43" pos:end="1555:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1557:25" pos:end="1557:30">break;</break>

                    <case pos:start="1559:21" pos:end="1559:30">case <expr pos:start="1559:26" pos:end="1559:29"><literal type="number" pos:start="1559:26" pos:end="1559:29">0x55</literal></expr>:</case> <comment type="block" pos:start="1559:32" pos:end="1559:52">/* fcmpes, V9 %fcc */</comment>

                        <expr_stmt pos:start="1561:25" pos:end="1561:62"><expr pos:start="1561:25" pos:end="1561:61"><name pos:start="1561:25" pos:end="1561:35">cpu_src1_32</name> <operator pos:start="1561:37" pos:end="1561:37">=</operator> <call pos:start="1561:39" pos:end="1561:61"><name pos:start="1561:39" pos:end="1561:52">gen_load_fpr_F</name><argument_list pos:start="1561:53" pos:end="1561:61">(<argument pos:start="1561:54" pos:end="1561:55"><expr pos:start="1561:54" pos:end="1561:55"><name pos:start="1561:54" pos:end="1561:55">dc</name></expr></argument>, <argument pos:start="1561:58" pos:end="1561:60"><expr pos:start="1561:58" pos:end="1561:60"><name pos:start="1561:58" pos:end="1561:60">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1563:25" pos:end="1563:62"><expr pos:start="1563:25" pos:end="1563:61"><name pos:start="1563:25" pos:end="1563:35">cpu_src2_32</name> <operator pos:start="1563:37" pos:end="1563:37">=</operator> <call pos:start="1563:39" pos:end="1563:61"><name pos:start="1563:39" pos:end="1563:52">gen_load_fpr_F</name><argument_list pos:start="1563:53" pos:end="1563:61">(<argument pos:start="1563:54" pos:end="1563:55"><expr pos:start="1563:54" pos:end="1563:55"><name pos:start="1563:54" pos:end="1563:55">dc</name></expr></argument>, <argument pos:start="1563:58" pos:end="1563:60"><expr pos:start="1563:58" pos:end="1563:60"><name pos:start="1563:58" pos:end="1563:60">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1565:25" pos:end="1565:72"><expr pos:start="1565:25" pos:end="1565:71"><call pos:start="1565:25" pos:end="1565:71"><name pos:start="1565:25" pos:end="1565:37">gen_op_fcmpes</name><argument_list pos:start="1565:38" pos:end="1565:71">(<argument pos:start="1565:39" pos:end="1565:44"><expr pos:start="1565:39" pos:end="1565:44"><name pos:start="1565:39" pos:end="1565:40">rd</name> <operator pos:start="1565:42" pos:end="1565:42">&amp;</operator> <literal type="number" pos:start="1565:44" pos:end="1565:44">3</literal></expr></argument>, <argument pos:start="1565:47" pos:end="1565:57"><expr pos:start="1565:47" pos:end="1565:57"><name pos:start="1565:47" pos:end="1565:57">cpu_src1_32</name></expr></argument>, <argument pos:start="1565:60" pos:end="1565:70"><expr pos:start="1565:60" pos:end="1565:70"><name pos:start="1565:60" pos:end="1565:70">cpu_src2_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1567:25" pos:end="1567:30">break;</break>

                    <case pos:start="1569:21" pos:end="1569:30">case <expr pos:start="1569:26" pos:end="1569:29"><literal type="number" pos:start="1569:26" pos:end="1569:29">0x56</literal></expr>:</case> <comment type="block" pos:start="1569:32" pos:end="1569:52">/* fcmped, V9 %fcc */</comment>

                        <expr_stmt pos:start="1571:25" pos:end="1571:62"><expr pos:start="1571:25" pos:end="1571:61"><name pos:start="1571:25" pos:end="1571:35">cpu_src1_64</name> <operator pos:start="1571:37" pos:end="1571:37">=</operator> <call pos:start="1571:39" pos:end="1571:61"><name pos:start="1571:39" pos:end="1571:52">gen_load_fpr_D</name><argument_list pos:start="1571:53" pos:end="1571:61">(<argument pos:start="1571:54" pos:end="1571:55"><expr pos:start="1571:54" pos:end="1571:55"><name pos:start="1571:54" pos:end="1571:55">dc</name></expr></argument>, <argument pos:start="1571:58" pos:end="1571:60"><expr pos:start="1571:58" pos:end="1571:60"><name pos:start="1571:58" pos:end="1571:60">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1573:25" pos:end="1573:62"><expr pos:start="1573:25" pos:end="1573:61"><name pos:start="1573:25" pos:end="1573:35">cpu_src2_64</name> <operator pos:start="1573:37" pos:end="1573:37">=</operator> <call pos:start="1573:39" pos:end="1573:61"><name pos:start="1573:39" pos:end="1573:52">gen_load_fpr_D</name><argument_list pos:start="1573:53" pos:end="1573:61">(<argument pos:start="1573:54" pos:end="1573:55"><expr pos:start="1573:54" pos:end="1573:55"><name pos:start="1573:54" pos:end="1573:55">dc</name></expr></argument>, <argument pos:start="1573:58" pos:end="1573:60"><expr pos:start="1573:58" pos:end="1573:60"><name pos:start="1573:58" pos:end="1573:60">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1575:25" pos:end="1575:72"><expr pos:start="1575:25" pos:end="1575:71"><call pos:start="1575:25" pos:end="1575:71"><name pos:start="1575:25" pos:end="1575:37">gen_op_fcmped</name><argument_list pos:start="1575:38" pos:end="1575:71">(<argument pos:start="1575:39" pos:end="1575:44"><expr pos:start="1575:39" pos:end="1575:44"><name pos:start="1575:39" pos:end="1575:40">rd</name> <operator pos:start="1575:42" pos:end="1575:42">&amp;</operator> <literal type="number" pos:start="1575:44" pos:end="1575:44">3</literal></expr></argument>, <argument pos:start="1575:47" pos:end="1575:57"><expr pos:start="1575:47" pos:end="1575:57"><name pos:start="1575:47" pos:end="1575:57">cpu_src1_64</name></expr></argument>, <argument pos:start="1575:60" pos:end="1575:70"><expr pos:start="1575:60" pos:end="1575:70"><name pos:start="1575:60" pos:end="1575:70">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1577:25" pos:end="1577:30">break;</break>

                    <case pos:start="1579:21" pos:end="1579:30">case <expr pos:start="1579:26" pos:end="1579:29"><literal type="number" pos:start="1579:26" pos:end="1579:29">0x57</literal></expr>:</case> <comment type="block" pos:start="1579:32" pos:end="1579:52">/* fcmpeq, V9 %fcc */</comment>

                        <expr_stmt pos:start="1581:25" pos:end="1581:56"><expr pos:start="1581:25" pos:end="1581:55"><call pos:start="1581:25" pos:end="1581:55"><name pos:start="1581:25" pos:end="1581:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1581:42" pos:end="1581:55">(<argument pos:start="1581:43" pos:end="1581:44"><expr pos:start="1581:43" pos:end="1581:44"><name pos:start="1581:43" pos:end="1581:44">dc</name></expr></argument>, <argument pos:start="1581:47" pos:end="1581:54"><expr pos:start="1581:47" pos:end="1581:54"><name pos:start="1581:47" pos:end="1581:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1583:25" pos:end="1583:57"><expr pos:start="1583:25" pos:end="1583:56"><call pos:start="1583:25" pos:end="1583:56"><name pos:start="1583:25" pos:end="1583:43">gen_op_load_fpr_QT0</name><argument_list pos:start="1583:44" pos:end="1583:56">(<argument pos:start="1583:45" pos:end="1583:55"><expr pos:start="1583:45" pos:end="1583:55"><call pos:start="1583:45" pos:end="1583:55"><name pos:start="1583:45" pos:end="1583:50">QFPREG</name><argument_list pos:start="1583:51" pos:end="1583:55">(<argument pos:start="1583:52" pos:end="1583:54"><expr pos:start="1583:52" pos:end="1583:54"><name pos:start="1583:52" pos:end="1583:54">rs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1585:25" pos:end="1585:57"><expr pos:start="1585:25" pos:end="1585:56"><call pos:start="1585:25" pos:end="1585:56"><name pos:start="1585:25" pos:end="1585:43">gen_op_load_fpr_QT1</name><argument_list pos:start="1585:44" pos:end="1585:56">(<argument pos:start="1585:45" pos:end="1585:55"><expr pos:start="1585:45" pos:end="1585:55"><call pos:start="1585:45" pos:end="1585:55"><name pos:start="1585:45" pos:end="1585:50">QFPREG</name><argument_list pos:start="1585:51" pos:end="1585:55">(<argument pos:start="1585:52" pos:end="1585:54"><expr pos:start="1585:52" pos:end="1585:54"><name pos:start="1585:52" pos:end="1585:54">rs2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1587:25" pos:end="1587:46"><expr pos:start="1587:25" pos:end="1587:45"><call pos:start="1587:25" pos:end="1587:45"><name pos:start="1587:25" pos:end="1587:37">gen_op_fcmpeq</name><argument_list pos:start="1587:38" pos:end="1587:45">(<argument pos:start="1587:39" pos:end="1587:44"><expr pos:start="1587:39" pos:end="1587:44"><name pos:start="1587:39" pos:end="1587:40">rd</name> <operator pos:start="1587:42" pos:end="1587:42">&amp;</operator> <literal type="number" pos:start="1587:44" pos:end="1587:44">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1589:25" pos:end="1589:30">break;</break>

                    <default pos:start="1591:21" pos:end="1591:28">default:</default>

                        <goto pos:start="1593:25" pos:end="1593:42">goto <name pos:start="1593:30" pos:end="1593:41">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="1597:15" pos:end="1673:13">else if <condition pos:start="1597:23" pos:end="1597:34">(<expr pos:start="1597:24" pos:end="1597:33"><name pos:start="1597:24" pos:end="1597:26">xop</name> <operator pos:start="1597:28" pos:end="1597:29">==</operator> <literal type="number" pos:start="1597:31" pos:end="1597:33">0x2</literal></expr>)</condition> <block pos:start="1597:36" pos:end="1673:13">{<block_content pos:start="1599:17" pos:end="1672:0">

                <decl_stmt pos:start="1599:17" pos:end="1599:48"><decl pos:start="1599:17" pos:end="1599:47"><type pos:start="1599:17" pos:end="1599:20"><name pos:start="1599:17" pos:end="1599:20">TCGv</name></type> <name pos:start="1599:22" pos:end="1599:24">dst</name> <init pos:start="1599:26" pos:end="1599:47">= <expr pos:start="1599:28" pos:end="1599:47"><call pos:start="1599:28" pos:end="1599:47"><name pos:start="1599:28" pos:end="1599:39">gen_dest_gpr</name><argument_list pos:start="1599:40" pos:end="1599:47">(<argument pos:start="1599:41" pos:end="1599:42"><expr pos:start="1599:41" pos:end="1599:42"><name pos:start="1599:41" pos:end="1599:42">dc</name></expr></argument>, <argument pos:start="1599:45" pos:end="1599:46"><expr pos:start="1599:45" pos:end="1599:46"><name pos:start="1599:45" pos:end="1599:46">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1601:17" pos:end="1601:46"><expr pos:start="1601:17" pos:end="1601:45"><name pos:start="1601:17" pos:end="1601:19">rs1</name> <operator pos:start="1601:21" pos:end="1601:21">=</operator> <call pos:start="1601:23" pos:end="1601:45"><name pos:start="1601:23" pos:end="1601:31">GET_FIELD</name><argument_list pos:start="1601:32" pos:end="1601:45">(<argument pos:start="1601:33" pos:end="1601:36"><expr pos:start="1601:33" pos:end="1601:36"><name pos:start="1601:33" pos:end="1601:36">insn</name></expr></argument>, <argument pos:start="1601:39" pos:end="1601:40"><expr pos:start="1601:39" pos:end="1601:40"><literal type="number" pos:start="1601:39" pos:end="1601:40">13</literal></expr></argument>, <argument pos:start="1601:43" pos:end="1601:44"><expr pos:start="1601:43" pos:end="1601:44"><literal type="number" pos:start="1601:43" pos:end="1601:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1603:17" pos:end="1672:0"><if pos:start="1603:17" pos:end="1635:17">if <condition pos:start="1603:20" pos:end="1603:29">(<expr pos:start="1603:21" pos:end="1603:28"><name pos:start="1603:21" pos:end="1603:23">rs1</name> <operator pos:start="1603:25" pos:end="1603:26">==</operator> <literal type="number" pos:start="1603:28" pos:end="1603:28">0</literal></expr>)</condition> <block pos:start="1603:31" pos:end="1635:17">{<block_content pos:start="1607:21" pos:end="1633:21">

                    <comment type="block" pos:start="1605:21" pos:end="1605:69">/* clr/mov shortcut : or %g0, x, y -&gt; mov x, y */</comment>

                    <if_stmt pos:start="1607:21" pos:end="1633:21"><if pos:start="1607:21" pos:end="1615:21">if <condition pos:start="1607:24" pos:end="1607:31">(<expr pos:start="1607:25" pos:end="1607:30"><name pos:start="1607:25" pos:end="1607:30">IS_IMM</name></expr>)</condition> <block pos:start="1607:33" pos:end="1615:21">{<block_content pos:start="1609:25" pos:end="1613:51">       <comment type="block" pos:start="1607:41" pos:end="1607:55">/* immediate */</comment>

                        <expr_stmt pos:start="1609:25" pos:end="1609:56"><expr pos:start="1609:25" pos:end="1609:55"><name pos:start="1609:25" pos:end="1609:28">simm</name> <operator pos:start="1609:30" pos:end="1609:30">=</operator> <call pos:start="1609:32" pos:end="1609:55"><name pos:start="1609:32" pos:end="1609:41">GET_FIELDs</name><argument_list pos:start="1609:42" pos:end="1609:55">(<argument pos:start="1609:43" pos:end="1609:46"><expr pos:start="1609:43" pos:end="1609:46"><name pos:start="1609:43" pos:end="1609:46">insn</name></expr></argument>, <argument pos:start="1609:49" pos:end="1609:50"><expr pos:start="1609:49" pos:end="1609:50"><literal type="number" pos:start="1609:49" pos:end="1609:50">19</literal></expr></argument>, <argument pos:start="1609:53" pos:end="1609:54"><expr pos:start="1609:53" pos:end="1609:54"><literal type="number" pos:start="1609:53" pos:end="1609:54">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1611:25" pos:end="1611:51"><expr pos:start="1611:25" pos:end="1611:50"><call pos:start="1611:25" pos:end="1611:50"><name pos:start="1611:25" pos:end="1611:39">tcg_gen_movi_tl</name><argument_list pos:start="1611:40" pos:end="1611:50">(<argument pos:start="1611:41" pos:end="1611:43"><expr pos:start="1611:41" pos:end="1611:43"><name pos:start="1611:41" pos:end="1611:43">dst</name></expr></argument>, <argument pos:start="1611:46" pos:end="1611:49"><expr pos:start="1611:46" pos:end="1611:49"><name pos:start="1611:46" pos:end="1611:49">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1613:25" pos:end="1613:51"><expr pos:start="1613:25" pos:end="1613:50"><call pos:start="1613:25" pos:end="1613:50"><name pos:start="1613:25" pos:end="1613:37">gen_store_gpr</name><argument_list pos:start="1613:38" pos:end="1613:50">(<argument pos:start="1613:39" pos:end="1613:40"><expr pos:start="1613:39" pos:end="1613:40"><name pos:start="1613:39" pos:end="1613:40">dc</name></expr></argument>, <argument pos:start="1613:43" pos:end="1613:44"><expr pos:start="1613:43" pos:end="1613:44"><name pos:start="1613:43" pos:end="1613:44">rd</name></expr></argument>, <argument pos:start="1613:47" pos:end="1613:49"><expr pos:start="1613:47" pos:end="1613:49"><name pos:start="1613:47" pos:end="1613:49">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1615:23" pos:end="1633:21">else <block pos:start="1615:28" pos:end="1633:21">{<block_content pos:start="1617:25" pos:end="1631:25">            <comment type="block" pos:start="1615:41" pos:end="1615:54">/* register */</comment>

                        <expr_stmt pos:start="1617:25" pos:end="1617:54"><expr pos:start="1617:25" pos:end="1617:53"><name pos:start="1617:25" pos:end="1617:27">rs2</name> <operator pos:start="1617:29" pos:end="1617:29">=</operator> <call pos:start="1617:31" pos:end="1617:53"><name pos:start="1617:31" pos:end="1617:39">GET_FIELD</name><argument_list pos:start="1617:40" pos:end="1617:53">(<argument pos:start="1617:41" pos:end="1617:44"><expr pos:start="1617:41" pos:end="1617:44"><name pos:start="1617:41" pos:end="1617:44">insn</name></expr></argument>, <argument pos:start="1617:47" pos:end="1617:48"><expr pos:start="1617:47" pos:end="1617:48"><literal type="number" pos:start="1617:47" pos:end="1617:48">27</literal></expr></argument>, <argument pos:start="1617:51" pos:end="1617:52"><expr pos:start="1617:51" pos:end="1617:52"><literal type="number" pos:start="1617:51" pos:end="1617:52">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1619:25" pos:end="1631:25"><if pos:start="1619:25" pos:end="1625:25">if <condition pos:start="1619:28" pos:end="1619:37">(<expr pos:start="1619:29" pos:end="1619:36"><name pos:start="1619:29" pos:end="1619:31">rs2</name> <operator pos:start="1619:33" pos:end="1619:34">==</operator> <literal type="number" pos:start="1619:36" pos:end="1619:36">0</literal></expr>)</condition> <block pos:start="1619:39" pos:end="1625:25">{<block_content pos:start="1621:29" pos:end="1623:55">

                            <expr_stmt pos:start="1621:29" pos:end="1621:52"><expr pos:start="1621:29" pos:end="1621:51"><call pos:start="1621:29" pos:end="1621:51"><name pos:start="1621:29" pos:end="1621:43">tcg_gen_movi_tl</name><argument_list pos:start="1621:44" pos:end="1621:51">(<argument pos:start="1621:45" pos:end="1621:47"><expr pos:start="1621:45" pos:end="1621:47"><name pos:start="1621:45" pos:end="1621:47">dst</name></expr></argument>, <argument pos:start="1621:50" pos:end="1621:50"><expr pos:start="1621:50" pos:end="1621:50"><literal type="number" pos:start="1621:50" pos:end="1621:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1623:29" pos:end="1623:55"><expr pos:start="1623:29" pos:end="1623:54"><call pos:start="1623:29" pos:end="1623:54"><name pos:start="1623:29" pos:end="1623:41">gen_store_gpr</name><argument_list pos:start="1623:42" pos:end="1623:54">(<argument pos:start="1623:43" pos:end="1623:44"><expr pos:start="1623:43" pos:end="1623:44"><name pos:start="1623:43" pos:end="1623:44">dc</name></expr></argument>, <argument pos:start="1623:47" pos:end="1623:48"><expr pos:start="1623:47" pos:end="1623:48"><name pos:start="1623:47" pos:end="1623:48">rd</name></expr></argument>, <argument pos:start="1623:51" pos:end="1623:53"><expr pos:start="1623:51" pos:end="1623:53"><name pos:start="1623:51" pos:end="1623:53">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1625:27" pos:end="1631:25">else <block pos:start="1625:32" pos:end="1631:25">{<block_content pos:start="1627:29" pos:end="1629:60">

                            <expr_stmt pos:start="1627:29" pos:end="1627:61"><expr pos:start="1627:29" pos:end="1627:60"><name pos:start="1627:29" pos:end="1627:36">cpu_src2</name> <operator pos:start="1627:38" pos:end="1627:38">=</operator> <call pos:start="1627:40" pos:end="1627:60"><name pos:start="1627:40" pos:end="1627:51">gen_load_gpr</name><argument_list pos:start="1627:52" pos:end="1627:60">(<argument pos:start="1627:53" pos:end="1627:54"><expr pos:start="1627:53" pos:end="1627:54"><name pos:start="1627:53" pos:end="1627:54">dc</name></expr></argument>, <argument pos:start="1627:57" pos:end="1627:59"><expr pos:start="1627:57" pos:end="1627:59"><name pos:start="1627:57" pos:end="1627:59">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1629:29" pos:end="1629:60"><expr pos:start="1629:29" pos:end="1629:59"><call pos:start="1629:29" pos:end="1629:59"><name pos:start="1629:29" pos:end="1629:41">gen_store_gpr</name><argument_list pos:start="1629:42" pos:end="1629:59">(<argument pos:start="1629:43" pos:end="1629:44"><expr pos:start="1629:43" pos:end="1629:44"><name pos:start="1629:43" pos:end="1629:44">dc</name></expr></argument>, <argument pos:start="1629:47" pos:end="1629:48"><expr pos:start="1629:47" pos:end="1629:48"><name pos:start="1629:47" pos:end="1629:48">rd</name></expr></argument>, <argument pos:start="1629:51" pos:end="1629:58"><expr pos:start="1629:51" pos:end="1629:58"><name pos:start="1629:51" pos:end="1629:58">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1635:19" pos:end="1672:0">else <block pos:start="1635:24" pos:end="1672:0">{<block_content pos:start="1637:21" pos:end="1667:21">

                    <expr_stmt pos:start="1637:21" pos:end="1637:50"><expr pos:start="1637:21" pos:end="1637:49"><name pos:start="1637:21" pos:end="1637:28">cpu_src1</name> <operator pos:start="1637:30" pos:end="1637:30">=</operator> <call pos:start="1637:32" pos:end="1637:49"><name pos:start="1637:32" pos:end="1637:39">get_src1</name><argument_list pos:start="1637:40" pos:end="1637:49">(<argument pos:start="1637:41" pos:end="1637:42"><expr pos:start="1637:41" pos:end="1637:42"><name pos:start="1637:41" pos:end="1637:42">dc</name></expr></argument>, <argument pos:start="1637:45" pos:end="1637:48"><expr pos:start="1637:45" pos:end="1637:48"><name pos:start="1637:45" pos:end="1637:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1639:21" pos:end="1667:21"><if pos:start="1639:21" pos:end="1647:21">if <condition pos:start="1639:24" pos:end="1639:31">(<expr pos:start="1639:25" pos:end="1639:30"><name pos:start="1639:25" pos:end="1639:30">IS_IMM</name></expr>)</condition> <block pos:start="1639:33" pos:end="1647:21">{<block_content pos:start="1641:25" pos:end="1645:51">       <comment type="block" pos:start="1639:41" pos:end="1639:55">/* immediate */</comment>

                        <expr_stmt pos:start="1641:25" pos:end="1641:56"><expr pos:start="1641:25" pos:end="1641:55"><name pos:start="1641:25" pos:end="1641:28">simm</name> <operator pos:start="1641:30" pos:end="1641:30">=</operator> <call pos:start="1641:32" pos:end="1641:55"><name pos:start="1641:32" pos:end="1641:41">GET_FIELDs</name><argument_list pos:start="1641:42" pos:end="1641:55">(<argument pos:start="1641:43" pos:end="1641:46"><expr pos:start="1641:43" pos:end="1641:46"><name pos:start="1641:43" pos:end="1641:46">insn</name></expr></argument>, <argument pos:start="1641:49" pos:end="1641:50"><expr pos:start="1641:49" pos:end="1641:50"><literal type="number" pos:start="1641:49" pos:end="1641:50">19</literal></expr></argument>, <argument pos:start="1641:53" pos:end="1641:54"><expr pos:start="1641:53" pos:end="1641:54"><literal type="number" pos:start="1641:53" pos:end="1641:54">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1643:25" pos:end="1643:60"><expr pos:start="1643:25" pos:end="1643:59"><call pos:start="1643:25" pos:end="1643:59"><name pos:start="1643:25" pos:end="1643:38">tcg_gen_ori_tl</name><argument_list pos:start="1643:39" pos:end="1643:59">(<argument pos:start="1643:40" pos:end="1643:42"><expr pos:start="1643:40" pos:end="1643:42"><name pos:start="1643:40" pos:end="1643:42">dst</name></expr></argument>, <argument pos:start="1643:45" pos:end="1643:52"><expr pos:start="1643:45" pos:end="1643:52"><name pos:start="1643:45" pos:end="1643:52">cpu_src1</name></expr></argument>, <argument pos:start="1643:55" pos:end="1643:58"><expr pos:start="1643:55" pos:end="1643:58"><name pos:start="1643:55" pos:end="1643:58">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1645:25" pos:end="1645:51"><expr pos:start="1645:25" pos:end="1645:50"><call pos:start="1645:25" pos:end="1645:50"><name pos:start="1645:25" pos:end="1645:37">gen_store_gpr</name><argument_list pos:start="1645:38" pos:end="1645:50">(<argument pos:start="1645:39" pos:end="1645:40"><expr pos:start="1645:39" pos:end="1645:40"><name pos:start="1645:39" pos:end="1645:40">dc</name></expr></argument>, <argument pos:start="1645:43" pos:end="1645:44"><expr pos:start="1645:43" pos:end="1645:44"><name pos:start="1645:43" pos:end="1645:44">rd</name></expr></argument>, <argument pos:start="1645:47" pos:end="1645:49"><expr pos:start="1645:47" pos:end="1645:49"><name pos:start="1645:47" pos:end="1645:49">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1647:23" pos:end="1667:21">else <block pos:start="1647:28" pos:end="1667:21">{<block_content pos:start="1649:25" pos:end="1665:25">            <comment type="block" pos:start="1647:41" pos:end="1647:54">/* register */</comment>

                        <expr_stmt pos:start="1649:25" pos:end="1649:54"><expr pos:start="1649:25" pos:end="1649:53"><name pos:start="1649:25" pos:end="1649:27">rs2</name> <operator pos:start="1649:29" pos:end="1649:29">=</operator> <call pos:start="1649:31" pos:end="1649:53"><name pos:start="1649:31" pos:end="1649:39">GET_FIELD</name><argument_list pos:start="1649:40" pos:end="1649:53">(<argument pos:start="1649:41" pos:end="1649:44"><expr pos:start="1649:41" pos:end="1649:44"><name pos:start="1649:41" pos:end="1649:44">insn</name></expr></argument>, <argument pos:start="1649:47" pos:end="1649:48"><expr pos:start="1649:47" pos:end="1649:48"><literal type="number" pos:start="1649:47" pos:end="1649:48">27</literal></expr></argument>, <argument pos:start="1649:51" pos:end="1649:52"><expr pos:start="1649:51" pos:end="1649:52"><literal type="number" pos:start="1649:51" pos:end="1649:52">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1651:25" pos:end="1665:25"><if pos:start="1651:25" pos:end="1657:25">if <condition pos:start="1651:28" pos:end="1651:37">(<expr pos:start="1651:29" pos:end="1651:36"><name pos:start="1651:29" pos:end="1651:31">rs2</name> <operator pos:start="1651:33" pos:end="1651:34">==</operator> <literal type="number" pos:start="1651:36" pos:end="1651:36">0</literal></expr>)</condition> <block pos:start="1651:39" pos:end="1657:25">{<block_content pos:start="1655:29" pos:end="1655:60">

                            <comment type="block" pos:start="1653:29" pos:end="1653:73">/* mov shortcut:  or x, %g0, y -&gt; mov x, y */</comment>

                            <expr_stmt pos:start="1655:29" pos:end="1655:60"><expr pos:start="1655:29" pos:end="1655:59"><call pos:start="1655:29" pos:end="1655:59"><name pos:start="1655:29" pos:end="1655:41">gen_store_gpr</name><argument_list pos:start="1655:42" pos:end="1655:59">(<argument pos:start="1655:43" pos:end="1655:44"><expr pos:start="1655:43" pos:end="1655:44"><name pos:start="1655:43" pos:end="1655:44">dc</name></expr></argument>, <argument pos:start="1655:47" pos:end="1655:48"><expr pos:start="1655:47" pos:end="1655:48"><name pos:start="1655:47" pos:end="1655:48">rd</name></expr></argument>, <argument pos:start="1655:51" pos:end="1655:58"><expr pos:start="1655:51" pos:end="1655:58"><name pos:start="1655:51" pos:end="1655:58">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1657:27" pos:end="1665:25">else <block pos:start="1657:32" pos:end="1665:25">{<block_content pos:start="1659:29" pos:end="1663:55">

                            <expr_stmt pos:start="1659:29" pos:end="1659:61"><expr pos:start="1659:29" pos:end="1659:60"><name pos:start="1659:29" pos:end="1659:36">cpu_src2</name> <operator pos:start="1659:38" pos:end="1659:38">=</operator> <call pos:start="1659:40" pos:end="1659:60"><name pos:start="1659:40" pos:end="1659:51">gen_load_gpr</name><argument_list pos:start="1659:52" pos:end="1659:60">(<argument pos:start="1659:53" pos:end="1659:54"><expr pos:start="1659:53" pos:end="1659:54"><name pos:start="1659:53" pos:end="1659:54">dc</name></expr></argument>, <argument pos:start="1659:57" pos:end="1659:59"><expr pos:start="1659:57" pos:end="1659:59"><name pos:start="1659:57" pos:end="1659:59">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1661:29" pos:end="1661:67"><expr pos:start="1661:29" pos:end="1661:66"><call pos:start="1661:29" pos:end="1661:66"><name pos:start="1661:29" pos:end="1661:41">tcg_gen_or_tl</name><argument_list pos:start="1661:42" pos:end="1661:66">(<argument pos:start="1661:43" pos:end="1661:45"><expr pos:start="1661:43" pos:end="1661:45"><name pos:start="1661:43" pos:end="1661:45">dst</name></expr></argument>, <argument pos:start="1661:48" pos:end="1661:55"><expr pos:start="1661:48" pos:end="1661:55"><name pos:start="1661:48" pos:end="1661:55">cpu_src1</name></expr></argument>, <argument pos:start="1661:58" pos:end="1661:65"><expr pos:start="1661:58" pos:end="1661:65"><name pos:start="1661:58" pos:end="1661:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1663:29" pos:end="1663:55"><expr pos:start="1663:29" pos:end="1663:54"><call pos:start="1663:29" pos:end="1663:54"><name pos:start="1663:29" pos:end="1663:41">gen_store_gpr</name><argument_list pos:start="1663:42" pos:end="1663:54">(<argument pos:start="1663:43" pos:end="1663:44"><expr pos:start="1663:43" pos:end="1663:44"><name pos:start="1663:43" pos:end="1663:44">dc</name></expr></argument>, <argument pos:start="1663:47" pos:end="1663:48"><expr pos:start="1663:47" pos:end="1663:48"><name pos:start="1663:47" pos:end="1663:48">rd</name></expr></argument>, <argument pos:start="1663:51" pos:end="1663:53"><expr pos:start="1663:51" pos:end="1663:53"><name pos:start="1663:51" pos:end="1663:53">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="1671:1" pos:end="1671:21">#<cpp:directive pos:start="1671:2" pos:end="1671:6">ifdef</cpp:directive> <name pos:start="1671:8" pos:end="1671:21">TARGET_SPARC64</name></cpp:ifdef>

            </block_content>}</block></if> <if type="elseif" pos:start="1673:15" pos:end="1713:13">else if <condition pos:start="1673:23" pos:end="1673:35">(<expr pos:start="1673:24" pos:end="1673:34"><name pos:start="1673:24" pos:end="1673:26">xop</name> <operator pos:start="1673:28" pos:end="1673:29">==</operator> <literal type="number" pos:start="1673:31" pos:end="1673:34">0x25</literal></expr>)</condition> <block pos:start="1673:37" pos:end="1713:13">{<block_content pos:start="1675:17" pos:end="1711:47"> <comment type="block" pos:start="1673:39" pos:end="1673:56">/* sll, V9 sllx */</comment>

                <expr_stmt pos:start="1675:17" pos:end="1675:46"><expr pos:start="1675:17" pos:end="1675:45"><name pos:start="1675:17" pos:end="1675:24">cpu_src1</name> <operator pos:start="1675:26" pos:end="1675:26">=</operator> <call pos:start="1675:28" pos:end="1675:45"><name pos:start="1675:28" pos:end="1675:35">get_src1</name><argument_list pos:start="1675:36" pos:end="1675:45">(<argument pos:start="1675:37" pos:end="1675:38"><expr pos:start="1675:37" pos:end="1675:38"><name pos:start="1675:37" pos:end="1675:38">dc</name></expr></argument>, <argument pos:start="1675:41" pos:end="1675:44"><expr pos:start="1675:41" pos:end="1675:44"><name pos:start="1675:41" pos:end="1675:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1677:17" pos:end="1709:17"><if pos:start="1677:17" pos:end="1691:17">if <condition pos:start="1677:20" pos:end="1677:27">(<expr pos:start="1677:21" pos:end="1677:26"><name pos:start="1677:21" pos:end="1677:26">IS_IMM</name></expr>)</condition> <block pos:start="1677:29" pos:end="1691:17">{<block_content pos:start="1679:21" pos:end="1689:21">   <comment type="block" pos:start="1677:33" pos:end="1677:47">/* immediate */</comment>

                    <expr_stmt pos:start="1679:21" pos:end="1679:52"><expr pos:start="1679:21" pos:end="1679:51"><name pos:start="1679:21" pos:end="1679:24">simm</name> <operator pos:start="1679:26" pos:end="1679:26">=</operator> <call pos:start="1679:28" pos:end="1679:51"><name pos:start="1679:28" pos:end="1679:37">GET_FIELDs</name><argument_list pos:start="1679:38" pos:end="1679:51">(<argument pos:start="1679:39" pos:end="1679:42"><expr pos:start="1679:39" pos:end="1679:42"><name pos:start="1679:39" pos:end="1679:42">insn</name></expr></argument>, <argument pos:start="1679:45" pos:end="1679:46"><expr pos:start="1679:45" pos:end="1679:46"><literal type="number" pos:start="1679:45" pos:end="1679:46">20</literal></expr></argument>, <argument pos:start="1679:49" pos:end="1679:50"><expr pos:start="1679:49" pos:end="1679:50"><literal type="number" pos:start="1679:49" pos:end="1679:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1681:21" pos:end="1689:21"><if pos:start="1681:21" pos:end="1685:21">if <condition pos:start="1681:24" pos:end="1681:41">(<expr pos:start="1681:25" pos:end="1681:40"><name pos:start="1681:25" pos:end="1681:28">insn</name> <operator pos:start="1681:30" pos:end="1681:30">&amp;</operator> <operator pos:start="1681:32" pos:end="1681:32">(</operator><literal type="number" pos:start="1681:33" pos:end="1681:33">1</literal> <operator pos:start="1681:35" pos:end="1681:36">&lt;&lt;</operator> <literal type="number" pos:start="1681:38" pos:end="1681:39">12</literal><operator pos:start="1681:40" pos:end="1681:40">)</operator></expr>)</condition> <block pos:start="1681:43" pos:end="1685:21">{<block_content pos:start="1683:25" pos:end="1683:73">

                        <expr_stmt pos:start="1683:25" pos:end="1683:73"><expr pos:start="1683:25" pos:end="1683:72"><call pos:start="1683:25" pos:end="1683:72"><name pos:start="1683:25" pos:end="1683:40">tcg_gen_shli_i64</name><argument_list pos:start="1683:41" pos:end="1683:72">(<argument pos:start="1683:42" pos:end="1683:48"><expr pos:start="1683:42" pos:end="1683:48"><name pos:start="1683:42" pos:end="1683:48">cpu_dst</name></expr></argument>, <argument pos:start="1683:51" pos:end="1683:58"><expr pos:start="1683:51" pos:end="1683:58"><name pos:start="1683:51" pos:end="1683:58">cpu_src1</name></expr></argument>, <argument pos:start="1683:61" pos:end="1683:71"><expr pos:start="1683:61" pos:end="1683:71"><name pos:start="1683:61" pos:end="1683:64">simm</name> <operator pos:start="1683:66" pos:end="1683:66">&amp;</operator> <literal type="number" pos:start="1683:68" pos:end="1683:71">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1685:23" pos:end="1689:21">else <block pos:start="1685:28" pos:end="1689:21">{<block_content pos:start="1687:25" pos:end="1687:73">

                        <expr_stmt pos:start="1687:25" pos:end="1687:73"><expr pos:start="1687:25" pos:end="1687:72"><call pos:start="1687:25" pos:end="1687:72"><name pos:start="1687:25" pos:end="1687:40">tcg_gen_shli_i64</name><argument_list pos:start="1687:41" pos:end="1687:72">(<argument pos:start="1687:42" pos:end="1687:48"><expr pos:start="1687:42" pos:end="1687:48"><name pos:start="1687:42" pos:end="1687:48">cpu_dst</name></expr></argument>, <argument pos:start="1687:51" pos:end="1687:58"><expr pos:start="1687:51" pos:end="1687:58"><name pos:start="1687:51" pos:end="1687:58">cpu_src1</name></expr></argument>, <argument pos:start="1687:61" pos:end="1687:71"><expr pos:start="1687:61" pos:end="1687:71"><name pos:start="1687:61" pos:end="1687:64">simm</name> <operator pos:start="1687:66" pos:end="1687:66">&amp;</operator> <literal type="number" pos:start="1687:68" pos:end="1687:71">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1691:19" pos:end="1709:17">else <block pos:start="1691:24" pos:end="1709:17">{<block_content pos:start="1693:21" pos:end="1707:65">                <comment type="block" pos:start="1691:41" pos:end="1691:54">/* register */</comment>

                    <expr_stmt pos:start="1693:21" pos:end="1693:50"><expr pos:start="1693:21" pos:end="1693:49"><name pos:start="1693:21" pos:end="1693:23">rs2</name> <operator pos:start="1693:25" pos:end="1693:25">=</operator> <call pos:start="1693:27" pos:end="1693:49"><name pos:start="1693:27" pos:end="1693:35">GET_FIELD</name><argument_list pos:start="1693:36" pos:end="1693:49">(<argument pos:start="1693:37" pos:end="1693:40"><expr pos:start="1693:37" pos:end="1693:40"><name pos:start="1693:37" pos:end="1693:40">insn</name></expr></argument>, <argument pos:start="1693:43" pos:end="1693:44"><expr pos:start="1693:43" pos:end="1693:44"><literal type="number" pos:start="1693:43" pos:end="1693:44">27</literal></expr></argument>, <argument pos:start="1693:47" pos:end="1693:48"><expr pos:start="1693:47" pos:end="1693:48"><literal type="number" pos:start="1693:47" pos:end="1693:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1695:21" pos:end="1695:53"><expr pos:start="1695:21" pos:end="1695:52"><name pos:start="1695:21" pos:end="1695:28">cpu_src2</name> <operator pos:start="1695:30" pos:end="1695:30">=</operator> <call pos:start="1695:32" pos:end="1695:52"><name pos:start="1695:32" pos:end="1695:43">gen_load_gpr</name><argument_list pos:start="1695:44" pos:end="1695:52">(<argument pos:start="1695:45" pos:end="1695:46"><expr pos:start="1695:45" pos:end="1695:46"><name pos:start="1695:45" pos:end="1695:46">dc</name></expr></argument>, <argument pos:start="1695:49" pos:end="1695:51"><expr pos:start="1695:49" pos:end="1695:51"><name pos:start="1695:49" pos:end="1695:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1697:21" pos:end="1705:21"><if pos:start="1697:21" pos:end="1701:21">if <condition pos:start="1697:24" pos:end="1697:41">(<expr pos:start="1697:25" pos:end="1697:40"><name pos:start="1697:25" pos:end="1697:28">insn</name> <operator pos:start="1697:30" pos:end="1697:30">&amp;</operator> <operator pos:start="1697:32" pos:end="1697:32">(</operator><literal type="number" pos:start="1697:33" pos:end="1697:33">1</literal> <operator pos:start="1697:35" pos:end="1697:36">&lt;&lt;</operator> <literal type="number" pos:start="1697:38" pos:end="1697:39">12</literal><operator pos:start="1697:40" pos:end="1697:40">)</operator></expr>)</condition> <block pos:start="1697:43" pos:end="1701:21">{<block_content pos:start="1699:25" pos:end="1699:67">

                        <expr_stmt pos:start="1699:25" pos:end="1699:67"><expr pos:start="1699:25" pos:end="1699:66"><call pos:start="1699:25" pos:end="1699:66"><name pos:start="1699:25" pos:end="1699:40">tcg_gen_andi_i64</name><argument_list pos:start="1699:41" pos:end="1699:66">(<argument pos:start="1699:42" pos:end="1699:49"><expr pos:start="1699:42" pos:end="1699:49"><name pos:start="1699:42" pos:end="1699:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1699:52" pos:end="1699:59"><expr pos:start="1699:52" pos:end="1699:59"><name pos:start="1699:52" pos:end="1699:59">cpu_src2</name></expr></argument>, <argument pos:start="1699:62" pos:end="1699:65"><expr pos:start="1699:62" pos:end="1699:65"><literal type="number" pos:start="1699:62" pos:end="1699:65">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1701:23" pos:end="1705:21">else <block pos:start="1701:28" pos:end="1705:21">{<block_content pos:start="1703:25" pos:end="1703:67">

                        <expr_stmt pos:start="1703:25" pos:end="1703:67"><expr pos:start="1703:25" pos:end="1703:66"><call pos:start="1703:25" pos:end="1703:66"><name pos:start="1703:25" pos:end="1703:40">tcg_gen_andi_i64</name><argument_list pos:start="1703:41" pos:end="1703:66">(<argument pos:start="1703:42" pos:end="1703:49"><expr pos:start="1703:42" pos:end="1703:49"><name pos:start="1703:42" pos:end="1703:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1703:52" pos:end="1703:59"><expr pos:start="1703:52" pos:end="1703:59"><name pos:start="1703:52" pos:end="1703:59">cpu_src2</name></expr></argument>, <argument pos:start="1703:62" pos:end="1703:65"><expr pos:start="1703:62" pos:end="1703:65"><literal type="number" pos:start="1703:62" pos:end="1703:65">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1707:21" pos:end="1707:65"><expr pos:start="1707:21" pos:end="1707:64"><call pos:start="1707:21" pos:end="1707:64"><name pos:start="1707:21" pos:end="1707:35">tcg_gen_shl_i64</name><argument_list pos:start="1707:36" pos:end="1707:64">(<argument pos:start="1707:37" pos:end="1707:43"><expr pos:start="1707:37" pos:end="1707:43"><name pos:start="1707:37" pos:end="1707:43">cpu_dst</name></expr></argument>, <argument pos:start="1707:46" pos:end="1707:53"><expr pos:start="1707:46" pos:end="1707:53"><name pos:start="1707:46" pos:end="1707:53">cpu_src1</name></expr></argument>, <argument pos:start="1707:56" pos:end="1707:63"><expr pos:start="1707:56" pos:end="1707:63"><name pos:start="1707:56" pos:end="1707:63">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1711:17" pos:end="1711:47"><expr pos:start="1711:17" pos:end="1711:46"><call pos:start="1711:17" pos:end="1711:46"><name pos:start="1711:17" pos:end="1711:29">gen_store_gpr</name><argument_list pos:start="1711:30" pos:end="1711:46">(<argument pos:start="1711:31" pos:end="1711:32"><expr pos:start="1711:31" pos:end="1711:32"><name pos:start="1711:31" pos:end="1711:32">dc</name></expr></argument>, <argument pos:start="1711:35" pos:end="1711:36"><expr pos:start="1711:35" pos:end="1711:36"><name pos:start="1711:35" pos:end="1711:36">rd</name></expr></argument>, <argument pos:start="1711:39" pos:end="1711:45"><expr pos:start="1711:39" pos:end="1711:45"><name pos:start="1711:39" pos:end="1711:45">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1713:15" pos:end="1759:13">else if <condition pos:start="1713:23" pos:end="1713:35">(<expr pos:start="1713:24" pos:end="1713:34"><name pos:start="1713:24" pos:end="1713:26">xop</name> <operator pos:start="1713:28" pos:end="1713:29">==</operator> <literal type="number" pos:start="1713:31" pos:end="1713:34">0x26</literal></expr>)</condition> <block pos:start="1713:37" pos:end="1759:13">{<block_content pos:start="1715:17" pos:end="1757:47"> <comment type="block" pos:start="1713:39" pos:end="1713:56">/* srl, V9 srlx */</comment>

                <expr_stmt pos:start="1715:17" pos:end="1715:46"><expr pos:start="1715:17" pos:end="1715:45"><name pos:start="1715:17" pos:end="1715:24">cpu_src1</name> <operator pos:start="1715:26" pos:end="1715:26">=</operator> <call pos:start="1715:28" pos:end="1715:45"><name pos:start="1715:28" pos:end="1715:35">get_src1</name><argument_list pos:start="1715:36" pos:end="1715:45">(<argument pos:start="1715:37" pos:end="1715:38"><expr pos:start="1715:37" pos:end="1715:38"><name pos:start="1715:37" pos:end="1715:38">dc</name></expr></argument>, <argument pos:start="1715:41" pos:end="1715:44"><expr pos:start="1715:41" pos:end="1715:44"><name pos:start="1715:41" pos:end="1715:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1717:17" pos:end="1755:17"><if pos:start="1717:17" pos:end="1733:17">if <condition pos:start="1717:20" pos:end="1717:27">(<expr pos:start="1717:21" pos:end="1717:26"><name pos:start="1717:21" pos:end="1717:26">IS_IMM</name></expr>)</condition> <block pos:start="1717:29" pos:end="1733:17">{<block_content pos:start="1719:21" pos:end="1731:21">   <comment type="block" pos:start="1717:33" pos:end="1717:47">/* immediate */</comment>

                    <expr_stmt pos:start="1719:21" pos:end="1719:52"><expr pos:start="1719:21" pos:end="1719:51"><name pos:start="1719:21" pos:end="1719:24">simm</name> <operator pos:start="1719:26" pos:end="1719:26">=</operator> <call pos:start="1719:28" pos:end="1719:51"><name pos:start="1719:28" pos:end="1719:37">GET_FIELDs</name><argument_list pos:start="1719:38" pos:end="1719:51">(<argument pos:start="1719:39" pos:end="1719:42"><expr pos:start="1719:39" pos:end="1719:42"><name pos:start="1719:39" pos:end="1719:42">insn</name></expr></argument>, <argument pos:start="1719:45" pos:end="1719:46"><expr pos:start="1719:45" pos:end="1719:46"><literal type="number" pos:start="1719:45" pos:end="1719:46">20</literal></expr></argument>, <argument pos:start="1719:49" pos:end="1719:50"><expr pos:start="1719:49" pos:end="1719:50"><literal type="number" pos:start="1719:49" pos:end="1719:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1721:21" pos:end="1731:21"><if pos:start="1721:21" pos:end="1725:21">if <condition pos:start="1721:24" pos:end="1721:41">(<expr pos:start="1721:25" pos:end="1721:40"><name pos:start="1721:25" pos:end="1721:28">insn</name> <operator pos:start="1721:30" pos:end="1721:30">&amp;</operator> <operator pos:start="1721:32" pos:end="1721:32">(</operator><literal type="number" pos:start="1721:33" pos:end="1721:33">1</literal> <operator pos:start="1721:35" pos:end="1721:36">&lt;&lt;</operator> <literal type="number" pos:start="1721:38" pos:end="1721:39">12</literal><operator pos:start="1721:40" pos:end="1721:40">)</operator></expr>)</condition> <block pos:start="1721:43" pos:end="1725:21">{<block_content pos:start="1723:25" pos:end="1723:73">

                        <expr_stmt pos:start="1723:25" pos:end="1723:73"><expr pos:start="1723:25" pos:end="1723:72"><call pos:start="1723:25" pos:end="1723:72"><name pos:start="1723:25" pos:end="1723:40">tcg_gen_shri_i64</name><argument_list pos:start="1723:41" pos:end="1723:72">(<argument pos:start="1723:42" pos:end="1723:48"><expr pos:start="1723:42" pos:end="1723:48"><name pos:start="1723:42" pos:end="1723:48">cpu_dst</name></expr></argument>, <argument pos:start="1723:51" pos:end="1723:58"><expr pos:start="1723:51" pos:end="1723:58"><name pos:start="1723:51" pos:end="1723:58">cpu_src1</name></expr></argument>, <argument pos:start="1723:61" pos:end="1723:71"><expr pos:start="1723:61" pos:end="1723:71"><name pos:start="1723:61" pos:end="1723:64">simm</name> <operator pos:start="1723:66" pos:end="1723:66">&amp;</operator> <literal type="number" pos:start="1723:68" pos:end="1723:71">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1725:23" pos:end="1731:21">else <block pos:start="1725:28" pos:end="1731:21">{<block_content pos:start="1727:25" pos:end="1729:72">

                        <expr_stmt pos:start="1727:25" pos:end="1727:75"><expr pos:start="1727:25" pos:end="1727:74"><call pos:start="1727:25" pos:end="1727:74"><name pos:start="1727:25" pos:end="1727:40">tcg_gen_andi_i64</name><argument_list pos:start="1727:41" pos:end="1727:74">(<argument pos:start="1727:42" pos:end="1727:48"><expr pos:start="1727:42" pos:end="1727:48"><name pos:start="1727:42" pos:end="1727:48">cpu_dst</name></expr></argument>, <argument pos:start="1727:51" pos:end="1727:58"><expr pos:start="1727:51" pos:end="1727:58"><name pos:start="1727:51" pos:end="1727:58">cpu_src1</name></expr></argument>, <argument pos:start="1727:61" pos:end="1727:73"><expr pos:start="1727:61" pos:end="1727:73"><literal type="number" pos:start="1727:61" pos:end="1727:73">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1729:25" pos:end="1729:72"><expr pos:start="1729:25" pos:end="1729:71"><call pos:start="1729:25" pos:end="1729:71"><name pos:start="1729:25" pos:end="1729:40">tcg_gen_shri_i64</name><argument_list pos:start="1729:41" pos:end="1729:71">(<argument pos:start="1729:42" pos:end="1729:48"><expr pos:start="1729:42" pos:end="1729:48"><name pos:start="1729:42" pos:end="1729:48">cpu_dst</name></expr></argument>, <argument pos:start="1729:51" pos:end="1729:57"><expr pos:start="1729:51" pos:end="1729:57"><name pos:start="1729:51" pos:end="1729:57">cpu_dst</name></expr></argument>, <argument pos:start="1729:60" pos:end="1729:70"><expr pos:start="1729:60" pos:end="1729:70"><name pos:start="1729:60" pos:end="1729:63">simm</name> <operator pos:start="1729:65" pos:end="1729:65">&amp;</operator> <literal type="number" pos:start="1729:67" pos:end="1729:70">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1733:19" pos:end="1755:17">else <block pos:start="1733:24" pos:end="1755:17">{<block_content pos:start="1735:21" pos:end="1753:21">                <comment type="block" pos:start="1733:41" pos:end="1733:54">/* register */</comment>

                    <expr_stmt pos:start="1735:21" pos:end="1735:50"><expr pos:start="1735:21" pos:end="1735:49"><name pos:start="1735:21" pos:end="1735:23">rs2</name> <operator pos:start="1735:25" pos:end="1735:25">=</operator> <call pos:start="1735:27" pos:end="1735:49"><name pos:start="1735:27" pos:end="1735:35">GET_FIELD</name><argument_list pos:start="1735:36" pos:end="1735:49">(<argument pos:start="1735:37" pos:end="1735:40"><expr pos:start="1735:37" pos:end="1735:40"><name pos:start="1735:37" pos:end="1735:40">insn</name></expr></argument>, <argument pos:start="1735:43" pos:end="1735:44"><expr pos:start="1735:43" pos:end="1735:44"><literal type="number" pos:start="1735:43" pos:end="1735:44">27</literal></expr></argument>, <argument pos:start="1735:47" pos:end="1735:48"><expr pos:start="1735:47" pos:end="1735:48"><literal type="number" pos:start="1735:47" pos:end="1735:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1737:21" pos:end="1737:53"><expr pos:start="1737:21" pos:end="1737:52"><name pos:start="1737:21" pos:end="1737:28">cpu_src2</name> <operator pos:start="1737:30" pos:end="1737:30">=</operator> <call pos:start="1737:32" pos:end="1737:52"><name pos:start="1737:32" pos:end="1737:43">gen_load_gpr</name><argument_list pos:start="1737:44" pos:end="1737:52">(<argument pos:start="1737:45" pos:end="1737:46"><expr pos:start="1737:45" pos:end="1737:46"><name pos:start="1737:45" pos:end="1737:46">dc</name></expr></argument>, <argument pos:start="1737:49" pos:end="1737:51"><expr pos:start="1737:49" pos:end="1737:51"><name pos:start="1737:49" pos:end="1737:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1739:21" pos:end="1753:21"><if pos:start="1739:21" pos:end="1745:21">if <condition pos:start="1739:24" pos:end="1739:41">(<expr pos:start="1739:25" pos:end="1739:40"><name pos:start="1739:25" pos:end="1739:28">insn</name> <operator pos:start="1739:30" pos:end="1739:30">&amp;</operator> <operator pos:start="1739:32" pos:end="1739:32">(</operator><literal type="number" pos:start="1739:33" pos:end="1739:33">1</literal> <operator pos:start="1739:35" pos:end="1739:36">&lt;&lt;</operator> <literal type="number" pos:start="1739:38" pos:end="1739:39">12</literal><operator pos:start="1739:40" pos:end="1739:40">)</operator></expr>)</condition> <block pos:start="1739:43" pos:end="1745:21">{<block_content pos:start="1741:25" pos:end="1743:69">

                        <expr_stmt pos:start="1741:25" pos:end="1741:67"><expr pos:start="1741:25" pos:end="1741:66"><call pos:start="1741:25" pos:end="1741:66"><name pos:start="1741:25" pos:end="1741:40">tcg_gen_andi_i64</name><argument_list pos:start="1741:41" pos:end="1741:66">(<argument pos:start="1741:42" pos:end="1741:49"><expr pos:start="1741:42" pos:end="1741:49"><name pos:start="1741:42" pos:end="1741:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1741:52" pos:end="1741:59"><expr pos:start="1741:52" pos:end="1741:59"><name pos:start="1741:52" pos:end="1741:59">cpu_src2</name></expr></argument>, <argument pos:start="1741:62" pos:end="1741:65"><expr pos:start="1741:62" pos:end="1741:65"><literal type="number" pos:start="1741:62" pos:end="1741:65">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1743:25" pos:end="1743:69"><expr pos:start="1743:25" pos:end="1743:68"><call pos:start="1743:25" pos:end="1743:68"><name pos:start="1743:25" pos:end="1743:39">tcg_gen_shr_i64</name><argument_list pos:start="1743:40" pos:end="1743:68">(<argument pos:start="1743:41" pos:end="1743:47"><expr pos:start="1743:41" pos:end="1743:47"><name pos:start="1743:41" pos:end="1743:47">cpu_dst</name></expr></argument>, <argument pos:start="1743:50" pos:end="1743:57"><expr pos:start="1743:50" pos:end="1743:57"><name pos:start="1743:50" pos:end="1743:57">cpu_src1</name></expr></argument>, <argument pos:start="1743:60" pos:end="1743:67"><expr pos:start="1743:60" pos:end="1743:67"><name pos:start="1743:60" pos:end="1743:67">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1745:23" pos:end="1753:21">else <block pos:start="1745:28" pos:end="1753:21">{<block_content pos:start="1747:25" pos:end="1751:68">

                        <expr_stmt pos:start="1747:25" pos:end="1747:67"><expr pos:start="1747:25" pos:end="1747:66"><call pos:start="1747:25" pos:end="1747:66"><name pos:start="1747:25" pos:end="1747:40">tcg_gen_andi_i64</name><argument_list pos:start="1747:41" pos:end="1747:66">(<argument pos:start="1747:42" pos:end="1747:49"><expr pos:start="1747:42" pos:end="1747:49"><name pos:start="1747:42" pos:end="1747:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1747:52" pos:end="1747:59"><expr pos:start="1747:52" pos:end="1747:59"><name pos:start="1747:52" pos:end="1747:59">cpu_src2</name></expr></argument>, <argument pos:start="1747:62" pos:end="1747:65"><expr pos:start="1747:62" pos:end="1747:65"><literal type="number" pos:start="1747:62" pos:end="1747:65">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1749:25" pos:end="1749:75"><expr pos:start="1749:25" pos:end="1749:74"><call pos:start="1749:25" pos:end="1749:74"><name pos:start="1749:25" pos:end="1749:40">tcg_gen_andi_i64</name><argument_list pos:start="1749:41" pos:end="1749:74">(<argument pos:start="1749:42" pos:end="1749:48"><expr pos:start="1749:42" pos:end="1749:48"><name pos:start="1749:42" pos:end="1749:48">cpu_dst</name></expr></argument>, <argument pos:start="1749:51" pos:end="1749:58"><expr pos:start="1749:51" pos:end="1749:58"><name pos:start="1749:51" pos:end="1749:58">cpu_src1</name></expr></argument>, <argument pos:start="1749:61" pos:end="1749:73"><expr pos:start="1749:61" pos:end="1749:73"><literal type="number" pos:start="1749:61" pos:end="1749:73">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1751:25" pos:end="1751:68"><expr pos:start="1751:25" pos:end="1751:67"><call pos:start="1751:25" pos:end="1751:67"><name pos:start="1751:25" pos:end="1751:39">tcg_gen_shr_i64</name><argument_list pos:start="1751:40" pos:end="1751:67">(<argument pos:start="1751:41" pos:end="1751:47"><expr pos:start="1751:41" pos:end="1751:47"><name pos:start="1751:41" pos:end="1751:47">cpu_dst</name></expr></argument>, <argument pos:start="1751:50" pos:end="1751:56"><expr pos:start="1751:50" pos:end="1751:56"><name pos:start="1751:50" pos:end="1751:56">cpu_dst</name></expr></argument>, <argument pos:start="1751:59" pos:end="1751:66"><expr pos:start="1751:59" pos:end="1751:66"><name pos:start="1751:59" pos:end="1751:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1757:17" pos:end="1757:47"><expr pos:start="1757:17" pos:end="1757:46"><call pos:start="1757:17" pos:end="1757:46"><name pos:start="1757:17" pos:end="1757:29">gen_store_gpr</name><argument_list pos:start="1757:30" pos:end="1757:46">(<argument pos:start="1757:31" pos:end="1757:32"><expr pos:start="1757:31" pos:end="1757:32"><name pos:start="1757:31" pos:end="1757:32">dc</name></expr></argument>, <argument pos:start="1757:35" pos:end="1757:36"><expr pos:start="1757:35" pos:end="1757:36"><name pos:start="1757:35" pos:end="1757:36">rd</name></expr></argument>, <argument pos:start="1757:39" pos:end="1757:45"><expr pos:start="1757:39" pos:end="1757:45"><name pos:start="1757:39" pos:end="1757:45">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1759:15" pos:end="1807:13">else if <condition pos:start="1759:23" pos:end="1759:35">(<expr pos:start="1759:24" pos:end="1759:34"><name pos:start="1759:24" pos:end="1759:26">xop</name> <operator pos:start="1759:28" pos:end="1759:29">==</operator> <literal type="number" pos:start="1759:31" pos:end="1759:34">0x27</literal></expr>)</condition> <block pos:start="1759:37" pos:end="1807:13">{<block_content pos:start="1761:17" pos:end="1806:0"> <comment type="block" pos:start="1759:39" pos:end="1759:56">/* sra, V9 srax */</comment>

                <expr_stmt pos:start="1761:17" pos:end="1761:46"><expr pos:start="1761:17" pos:end="1761:45"><name pos:start="1761:17" pos:end="1761:24">cpu_src1</name> <operator pos:start="1761:26" pos:end="1761:26">=</operator> <call pos:start="1761:28" pos:end="1761:45"><name pos:start="1761:28" pos:end="1761:35">get_src1</name><argument_list pos:start="1761:36" pos:end="1761:45">(<argument pos:start="1761:37" pos:end="1761:38"><expr pos:start="1761:37" pos:end="1761:38"><name pos:start="1761:37" pos:end="1761:38">dc</name></expr></argument>, <argument pos:start="1761:41" pos:end="1761:44"><expr pos:start="1761:41" pos:end="1761:44"><name pos:start="1761:41" pos:end="1761:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1763:17" pos:end="1801:17"><if pos:start="1763:17" pos:end="1779:17">if <condition pos:start="1763:20" pos:end="1763:27">(<expr pos:start="1763:21" pos:end="1763:26"><name pos:start="1763:21" pos:end="1763:26">IS_IMM</name></expr>)</condition> <block pos:start="1763:29" pos:end="1779:17">{<block_content pos:start="1765:21" pos:end="1777:21">   <comment type="block" pos:start="1763:33" pos:end="1763:47">/* immediate */</comment>

                    <expr_stmt pos:start="1765:21" pos:end="1765:52"><expr pos:start="1765:21" pos:end="1765:51"><name pos:start="1765:21" pos:end="1765:24">simm</name> <operator pos:start="1765:26" pos:end="1765:26">=</operator> <call pos:start="1765:28" pos:end="1765:51"><name pos:start="1765:28" pos:end="1765:37">GET_FIELDs</name><argument_list pos:start="1765:38" pos:end="1765:51">(<argument pos:start="1765:39" pos:end="1765:42"><expr pos:start="1765:39" pos:end="1765:42"><name pos:start="1765:39" pos:end="1765:42">insn</name></expr></argument>, <argument pos:start="1765:45" pos:end="1765:46"><expr pos:start="1765:45" pos:end="1765:46"><literal type="number" pos:start="1765:45" pos:end="1765:46">20</literal></expr></argument>, <argument pos:start="1765:49" pos:end="1765:50"><expr pos:start="1765:49" pos:end="1765:50"><literal type="number" pos:start="1765:49" pos:end="1765:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1767:21" pos:end="1777:21"><if pos:start="1767:21" pos:end="1771:21">if <condition pos:start="1767:24" pos:end="1767:41">(<expr pos:start="1767:25" pos:end="1767:40"><name pos:start="1767:25" pos:end="1767:28">insn</name> <operator pos:start="1767:30" pos:end="1767:30">&amp;</operator> <operator pos:start="1767:32" pos:end="1767:32">(</operator><literal type="number" pos:start="1767:33" pos:end="1767:33">1</literal> <operator pos:start="1767:35" pos:end="1767:36">&lt;&lt;</operator> <literal type="number" pos:start="1767:38" pos:end="1767:39">12</literal><operator pos:start="1767:40" pos:end="1767:40">)</operator></expr>)</condition> <block pos:start="1767:43" pos:end="1771:21">{<block_content pos:start="1769:25" pos:end="1769:73">

                        <expr_stmt pos:start="1769:25" pos:end="1769:73"><expr pos:start="1769:25" pos:end="1769:72"><call pos:start="1769:25" pos:end="1769:72"><name pos:start="1769:25" pos:end="1769:40">tcg_gen_sari_i64</name><argument_list pos:start="1769:41" pos:end="1769:72">(<argument pos:start="1769:42" pos:end="1769:48"><expr pos:start="1769:42" pos:end="1769:48"><name pos:start="1769:42" pos:end="1769:48">cpu_dst</name></expr></argument>, <argument pos:start="1769:51" pos:end="1769:58"><expr pos:start="1769:51" pos:end="1769:58"><name pos:start="1769:51" pos:end="1769:58">cpu_src1</name></expr></argument>, <argument pos:start="1769:61" pos:end="1769:71"><expr pos:start="1769:61" pos:end="1769:71"><name pos:start="1769:61" pos:end="1769:64">simm</name> <operator pos:start="1769:66" pos:end="1769:66">&amp;</operator> <literal type="number" pos:start="1769:68" pos:end="1769:71">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1771:23" pos:end="1777:21">else <block pos:start="1771:28" pos:end="1777:21">{<block_content pos:start="1773:25" pos:end="1775:72">

                        <expr_stmt pos:start="1773:25" pos:end="1773:62"><expr pos:start="1773:25" pos:end="1773:61"><call pos:start="1773:25" pos:end="1773:61"><name pos:start="1773:25" pos:end="1773:42">tcg_gen_ext32s_i64</name><argument_list pos:start="1773:43" pos:end="1773:61">(<argument pos:start="1773:44" pos:end="1773:50"><expr pos:start="1773:44" pos:end="1773:50"><name pos:start="1773:44" pos:end="1773:50">cpu_dst</name></expr></argument>, <argument pos:start="1773:53" pos:end="1773:60"><expr pos:start="1773:53" pos:end="1773:60"><name pos:start="1773:53" pos:end="1773:60">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1775:25" pos:end="1775:72"><expr pos:start="1775:25" pos:end="1775:71"><call pos:start="1775:25" pos:end="1775:71"><name pos:start="1775:25" pos:end="1775:40">tcg_gen_sari_i64</name><argument_list pos:start="1775:41" pos:end="1775:71">(<argument pos:start="1775:42" pos:end="1775:48"><expr pos:start="1775:42" pos:end="1775:48"><name pos:start="1775:42" pos:end="1775:48">cpu_dst</name></expr></argument>, <argument pos:start="1775:51" pos:end="1775:57"><expr pos:start="1775:51" pos:end="1775:57"><name pos:start="1775:51" pos:end="1775:57">cpu_dst</name></expr></argument>, <argument pos:start="1775:60" pos:end="1775:70"><expr pos:start="1775:60" pos:end="1775:70"><name pos:start="1775:60" pos:end="1775:63">simm</name> <operator pos:start="1775:65" pos:end="1775:65">&amp;</operator> <literal type="number" pos:start="1775:67" pos:end="1775:70">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1779:19" pos:end="1801:17">else <block pos:start="1779:24" pos:end="1801:17">{<block_content pos:start="1781:21" pos:end="1799:21">                <comment type="block" pos:start="1779:41" pos:end="1779:54">/* register */</comment>

                    <expr_stmt pos:start="1781:21" pos:end="1781:50"><expr pos:start="1781:21" pos:end="1781:49"><name pos:start="1781:21" pos:end="1781:23">rs2</name> <operator pos:start="1781:25" pos:end="1781:25">=</operator> <call pos:start="1781:27" pos:end="1781:49"><name pos:start="1781:27" pos:end="1781:35">GET_FIELD</name><argument_list pos:start="1781:36" pos:end="1781:49">(<argument pos:start="1781:37" pos:end="1781:40"><expr pos:start="1781:37" pos:end="1781:40"><name pos:start="1781:37" pos:end="1781:40">insn</name></expr></argument>, <argument pos:start="1781:43" pos:end="1781:44"><expr pos:start="1781:43" pos:end="1781:44"><literal type="number" pos:start="1781:43" pos:end="1781:44">27</literal></expr></argument>, <argument pos:start="1781:47" pos:end="1781:48"><expr pos:start="1781:47" pos:end="1781:48"><literal type="number" pos:start="1781:47" pos:end="1781:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1783:21" pos:end="1783:53"><expr pos:start="1783:21" pos:end="1783:52"><name pos:start="1783:21" pos:end="1783:28">cpu_src2</name> <operator pos:start="1783:30" pos:end="1783:30">=</operator> <call pos:start="1783:32" pos:end="1783:52"><name pos:start="1783:32" pos:end="1783:43">gen_load_gpr</name><argument_list pos:start="1783:44" pos:end="1783:52">(<argument pos:start="1783:45" pos:end="1783:46"><expr pos:start="1783:45" pos:end="1783:46"><name pos:start="1783:45" pos:end="1783:46">dc</name></expr></argument>, <argument pos:start="1783:49" pos:end="1783:51"><expr pos:start="1783:49" pos:end="1783:51"><name pos:start="1783:49" pos:end="1783:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1785:21" pos:end="1799:21"><if pos:start="1785:21" pos:end="1791:21">if <condition pos:start="1785:24" pos:end="1785:41">(<expr pos:start="1785:25" pos:end="1785:40"><name pos:start="1785:25" pos:end="1785:28">insn</name> <operator pos:start="1785:30" pos:end="1785:30">&amp;</operator> <operator pos:start="1785:32" pos:end="1785:32">(</operator><literal type="number" pos:start="1785:33" pos:end="1785:33">1</literal> <operator pos:start="1785:35" pos:end="1785:36">&lt;&lt;</operator> <literal type="number" pos:start="1785:38" pos:end="1785:39">12</literal><operator pos:start="1785:40" pos:end="1785:40">)</operator></expr>)</condition> <block pos:start="1785:43" pos:end="1791:21">{<block_content pos:start="1787:25" pos:end="1789:69">

                        <expr_stmt pos:start="1787:25" pos:end="1787:67"><expr pos:start="1787:25" pos:end="1787:66"><call pos:start="1787:25" pos:end="1787:66"><name pos:start="1787:25" pos:end="1787:40">tcg_gen_andi_i64</name><argument_list pos:start="1787:41" pos:end="1787:66">(<argument pos:start="1787:42" pos:end="1787:49"><expr pos:start="1787:42" pos:end="1787:49"><name pos:start="1787:42" pos:end="1787:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1787:52" pos:end="1787:59"><expr pos:start="1787:52" pos:end="1787:59"><name pos:start="1787:52" pos:end="1787:59">cpu_src2</name></expr></argument>, <argument pos:start="1787:62" pos:end="1787:65"><expr pos:start="1787:62" pos:end="1787:65"><literal type="number" pos:start="1787:62" pos:end="1787:65">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1789:25" pos:end="1789:69"><expr pos:start="1789:25" pos:end="1789:68"><call pos:start="1789:25" pos:end="1789:68"><name pos:start="1789:25" pos:end="1789:39">tcg_gen_sar_i64</name><argument_list pos:start="1789:40" pos:end="1789:68">(<argument pos:start="1789:41" pos:end="1789:47"><expr pos:start="1789:41" pos:end="1789:47"><name pos:start="1789:41" pos:end="1789:47">cpu_dst</name></expr></argument>, <argument pos:start="1789:50" pos:end="1789:57"><expr pos:start="1789:50" pos:end="1789:57"><name pos:start="1789:50" pos:end="1789:57">cpu_src1</name></expr></argument>, <argument pos:start="1789:60" pos:end="1789:67"><expr pos:start="1789:60" pos:end="1789:67"><name pos:start="1789:60" pos:end="1789:67">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1791:23" pos:end="1799:21">else <block pos:start="1791:28" pos:end="1799:21">{<block_content pos:start="1793:25" pos:end="1797:68">

                        <expr_stmt pos:start="1793:25" pos:end="1793:67"><expr pos:start="1793:25" pos:end="1793:66"><call pos:start="1793:25" pos:end="1793:66"><name pos:start="1793:25" pos:end="1793:40">tcg_gen_andi_i64</name><argument_list pos:start="1793:41" pos:end="1793:66">(<argument pos:start="1793:42" pos:end="1793:49"><expr pos:start="1793:42" pos:end="1793:49"><name pos:start="1793:42" pos:end="1793:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1793:52" pos:end="1793:59"><expr pos:start="1793:52" pos:end="1793:59"><name pos:start="1793:52" pos:end="1793:59">cpu_src2</name></expr></argument>, <argument pos:start="1793:62" pos:end="1793:65"><expr pos:start="1793:62" pos:end="1793:65"><literal type="number" pos:start="1793:62" pos:end="1793:65">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1795:25" pos:end="1795:62"><expr pos:start="1795:25" pos:end="1795:61"><call pos:start="1795:25" pos:end="1795:61"><name pos:start="1795:25" pos:end="1795:42">tcg_gen_ext32s_i64</name><argument_list pos:start="1795:43" pos:end="1795:61">(<argument pos:start="1795:44" pos:end="1795:50"><expr pos:start="1795:44" pos:end="1795:50"><name pos:start="1795:44" pos:end="1795:50">cpu_dst</name></expr></argument>, <argument pos:start="1795:53" pos:end="1795:60"><expr pos:start="1795:53" pos:end="1795:60"><name pos:start="1795:53" pos:end="1795:60">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1797:25" pos:end="1797:68"><expr pos:start="1797:25" pos:end="1797:67"><call pos:start="1797:25" pos:end="1797:67"><name pos:start="1797:25" pos:end="1797:39">tcg_gen_sar_i64</name><argument_list pos:start="1797:40" pos:end="1797:67">(<argument pos:start="1797:41" pos:end="1797:47"><expr pos:start="1797:41" pos:end="1797:47"><name pos:start="1797:41" pos:end="1797:47">cpu_dst</name></expr></argument>, <argument pos:start="1797:50" pos:end="1797:56"><expr pos:start="1797:50" pos:end="1797:56"><name pos:start="1797:50" pos:end="1797:56">cpu_dst</name></expr></argument>, <argument pos:start="1797:59" pos:end="1797:66"><expr pos:start="1797:59" pos:end="1797:66"><name pos:start="1797:59" pos:end="1797:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1803:17" pos:end="1806:0"><expr pos:start="1803:17" pos:end="1803:46"><call pos:start="1803:17" pos:end="1803:46"><name pos:start="1803:17" pos:end="1803:29">gen_store_gpr</name><argument_list pos:start="1803:30" pos:end="1803:46">(<argument pos:start="1803:31" pos:end="1803:32"><expr pos:start="1803:31" pos:end="1803:32"><name pos:start="1803:31" pos:end="1803:32">dc</name></expr></argument>, <argument pos:start="1803:35" pos:end="1803:36"><expr pos:start="1803:35" pos:end="1803:36"><name pos:start="1803:35" pos:end="1803:36">rd</name></expr></argument>, <argument pos:start="1803:39" pos:end="1803:45"><expr pos:start="1803:39" pos:end="1803:45"><name pos:start="1803:39" pos:end="1803:45">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1805:1" pos:end="1805:6">#<cpp:directive pos:start="1805:2" pos:end="1805:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="1807:15" pos:end="3047:13">else if <condition pos:start="1807:23" pos:end="1807:34">(<expr pos:start="1807:24" pos:end="1807:33"><name pos:start="1807:24" pos:end="1807:26">xop</name> <operator pos:start="1807:28" pos:end="1807:28">&lt;</operator> <literal type="number" pos:start="1807:30" pos:end="1807:33">0x36</literal></expr>)</condition> <block pos:start="1807:36" pos:end="3047:13">{<block_content pos:start="1809:17" pos:end="3045:17">

                <if_stmt pos:start="1809:17" pos:end="3045:17"><if pos:start="1809:17" pos:end="2073:17">if <condition pos:start="1809:20" pos:end="1809:31">(<expr pos:start="1809:21" pos:end="1809:30"><name pos:start="1809:21" pos:end="1809:23">xop</name> <operator pos:start="1809:25" pos:end="1809:25">&lt;</operator> <literal type="number" pos:start="1809:27" pos:end="1809:30">0x20</literal></expr>)</condition> <block pos:start="1809:33" pos:end="2073:17">{<block_content pos:start="1811:21" pos:end="2071:51">

                    <expr_stmt pos:start="1811:21" pos:end="1811:50"><expr pos:start="1811:21" pos:end="1811:49"><name pos:start="1811:21" pos:end="1811:28">cpu_src1</name> <operator pos:start="1811:30" pos:end="1811:30">=</operator> <call pos:start="1811:32" pos:end="1811:49"><name pos:start="1811:32" pos:end="1811:39">get_src1</name><argument_list pos:start="1811:40" pos:end="1811:49">(<argument pos:start="1811:41" pos:end="1811:42"><expr pos:start="1811:41" pos:end="1811:42"><name pos:start="1811:41" pos:end="1811:42">dc</name></expr></argument>, <argument pos:start="1811:45" pos:end="1811:48"><expr pos:start="1811:45" pos:end="1811:48"><name pos:start="1811:45" pos:end="1811:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1813:21" pos:end="1813:50"><expr pos:start="1813:21" pos:end="1813:49"><name pos:start="1813:21" pos:end="1813:28">cpu_src2</name> <operator pos:start="1813:30" pos:end="1813:30">=</operator> <call pos:start="1813:32" pos:end="1813:49"><name pos:start="1813:32" pos:end="1813:39">get_src2</name><argument_list pos:start="1813:40" pos:end="1813:49">(<argument pos:start="1813:41" pos:end="1813:42"><expr pos:start="1813:41" pos:end="1813:42"><name pos:start="1813:41" pos:end="1813:42">dc</name></expr></argument>, <argument pos:start="1813:45" pos:end="1813:48"><expr pos:start="1813:45" pos:end="1813:48"><name pos:start="1813:45" pos:end="1813:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="1815:21" pos:end="2069:21">switch <condition pos:start="1815:28" pos:end="1815:40">(<expr pos:start="1815:29" pos:end="1815:39"><name pos:start="1815:29" pos:end="1815:31">xop</name> <operator pos:start="1815:33" pos:end="1815:33">&amp;</operator> <operator pos:start="1815:35" pos:end="1815:35">~</operator><literal type="number" pos:start="1815:36" pos:end="1815:39">0x10</literal></expr>)</condition> <block pos:start="1815:42" pos:end="2069:21">{<block_content pos:start="1817:21" pos:end="2067:42">

                    <case pos:start="1817:21" pos:end="1817:29">case <expr pos:start="1817:26" pos:end="1817:28"><literal type="number" pos:start="1817:26" pos:end="1817:28">0x0</literal></expr>:</case> <comment type="block" pos:start="1817:31" pos:end="1817:39">/* add */</comment>

                        <if_stmt pos:start="1819:25" pos:end="1831:25"><if pos:start="1819:25" pos:end="1827:25">if <condition pos:start="1819:28" pos:end="1819:39">(<expr pos:start="1819:29" pos:end="1819:38"><name pos:start="1819:29" pos:end="1819:31">xop</name> <operator pos:start="1819:33" pos:end="1819:33">&amp;</operator> <literal type="number" pos:start="1819:35" pos:end="1819:38">0x10</literal></expr>)</condition> <block pos:start="1819:41" pos:end="1827:25">{<block_content pos:start="1821:29" pos:end="1825:50">

                            <expr_stmt pos:start="1821:29" pos:end="1821:71"><expr pos:start="1821:29" pos:end="1821:70"><call pos:start="1821:29" pos:end="1821:70"><name pos:start="1821:29" pos:end="1821:41">gen_op_add_cc</name><argument_list pos:start="1821:42" pos:end="1821:70">(<argument pos:start="1821:43" pos:end="1821:49"><expr pos:start="1821:43" pos:end="1821:49"><name pos:start="1821:43" pos:end="1821:49">cpu_dst</name></expr></argument>, <argument pos:start="1821:52" pos:end="1821:59"><expr pos:start="1821:52" pos:end="1821:59"><name pos:start="1821:52" pos:end="1821:59">cpu_src1</name></expr></argument>, <argument pos:start="1821:62" pos:end="1821:69"><expr pos:start="1821:62" pos:end="1821:69"><name pos:start="1821:62" pos:end="1821:69">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1823:29" pos:end="1823:67"><expr pos:start="1823:29" pos:end="1823:66"><call pos:start="1823:29" pos:end="1823:66"><name pos:start="1823:29" pos:end="1823:44">tcg_gen_movi_i32</name><argument_list pos:start="1823:45" pos:end="1823:66">(<argument pos:start="1823:46" pos:end="1823:54"><expr pos:start="1823:46" pos:end="1823:54"><name pos:start="1823:46" pos:end="1823:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1823:57" pos:end="1823:65"><expr pos:start="1823:57" pos:end="1823:65"><name pos:start="1823:57" pos:end="1823:65">CC_OP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1825:29" pos:end="1825:50"><expr pos:start="1825:29" pos:end="1825:49"><name pos:start="1825:29" pos:end="1825:37"><name pos:start="1825:29" pos:end="1825:30">dc</name><operator pos:start="1825:31" pos:end="1825:32">-&gt;</operator><name pos:start="1825:33" pos:end="1825:37">cc_op</name></name> <operator pos:start="1825:39" pos:end="1825:39">=</operator> <name pos:start="1825:41" pos:end="1825:49">CC_OP_ADD</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1827:27" pos:end="1831:25">else <block pos:start="1827:32" pos:end="1831:25">{<block_content pos:start="1829:29" pos:end="1829:72">

                            <expr_stmt pos:start="1829:29" pos:end="1829:72"><expr pos:start="1829:29" pos:end="1829:71"><call pos:start="1829:29" pos:end="1829:71"><name pos:start="1829:29" pos:end="1829:42">tcg_gen_add_tl</name><argument_list pos:start="1829:43" pos:end="1829:71">(<argument pos:start="1829:44" pos:end="1829:50"><expr pos:start="1829:44" pos:end="1829:50"><name pos:start="1829:44" pos:end="1829:50">cpu_dst</name></expr></argument>, <argument pos:start="1829:53" pos:end="1829:60"><expr pos:start="1829:53" pos:end="1829:60"><name pos:start="1829:53" pos:end="1829:60">cpu_src1</name></expr></argument>, <argument pos:start="1829:63" pos:end="1829:70"><expr pos:start="1829:63" pos:end="1829:70"><name pos:start="1829:63" pos:end="1829:70">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="1833:25" pos:end="1833:30">break;</break>

                    <case pos:start="1835:21" pos:end="1835:29">case <expr pos:start="1835:26" pos:end="1835:28"><literal type="number" pos:start="1835:26" pos:end="1835:28">0x1</literal></expr>:</case> <comment type="block" pos:start="1835:31" pos:end="1835:39">/* and */</comment>

                        <expr_stmt pos:start="1837:25" pos:end="1837:68"><expr pos:start="1837:25" pos:end="1837:67"><call pos:start="1837:25" pos:end="1837:67"><name pos:start="1837:25" pos:end="1837:38">tcg_gen_and_tl</name><argument_list pos:start="1837:39" pos:end="1837:67">(<argument pos:start="1837:40" pos:end="1837:46"><expr pos:start="1837:40" pos:end="1837:46"><name pos:start="1837:40" pos:end="1837:46">cpu_dst</name></expr></argument>, <argument pos:start="1837:49" pos:end="1837:56"><expr pos:start="1837:49" pos:end="1837:56"><name pos:start="1837:49" pos:end="1837:56">cpu_src1</name></expr></argument>, <argument pos:start="1837:59" pos:end="1837:66"><expr pos:start="1837:59" pos:end="1837:66"><name pos:start="1837:59" pos:end="1837:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1839:25" pos:end="1847:25"><if pos:start="1839:25" pos:end="1847:25">if <condition pos:start="1839:28" pos:end="1839:39">(<expr pos:start="1839:29" pos:end="1839:38"><name pos:start="1839:29" pos:end="1839:31">xop</name> <operator pos:start="1839:33" pos:end="1839:33">&amp;</operator> <literal type="number" pos:start="1839:35" pos:end="1839:38">0x10</literal></expr>)</condition> <block pos:start="1839:41" pos:end="1847:25">{<block_content pos:start="1841:29" pos:end="1845:52">

                            <expr_stmt pos:start="1841:29" pos:end="1841:64"><expr pos:start="1841:29" pos:end="1841:63"><call pos:start="1841:29" pos:end="1841:63"><name pos:start="1841:29" pos:end="1841:42">tcg_gen_mov_tl</name><argument_list pos:start="1841:43" pos:end="1841:63">(<argument pos:start="1841:44" pos:end="1841:53"><expr pos:start="1841:44" pos:end="1841:53"><name pos:start="1841:44" pos:end="1841:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1841:56" pos:end="1841:62"><expr pos:start="1841:56" pos:end="1841:62"><name pos:start="1841:56" pos:end="1841:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1843:29" pos:end="1843:69"><expr pos:start="1843:29" pos:end="1843:68"><call pos:start="1843:29" pos:end="1843:68"><name pos:start="1843:29" pos:end="1843:44">tcg_gen_movi_i32</name><argument_list pos:start="1843:45" pos:end="1843:68">(<argument pos:start="1843:46" pos:end="1843:54"><expr pos:start="1843:46" pos:end="1843:54"><name pos:start="1843:46" pos:end="1843:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1843:57" pos:end="1843:67"><expr pos:start="1843:57" pos:end="1843:67"><name pos:start="1843:57" pos:end="1843:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1845:29" pos:end="1845:52"><expr pos:start="1845:29" pos:end="1845:51"><name pos:start="1845:29" pos:end="1845:37"><name pos:start="1845:29" pos:end="1845:30">dc</name><operator pos:start="1845:31" pos:end="1845:32">-&gt;</operator><name pos:start="1845:33" pos:end="1845:37">cc_op</name></name> <operator pos:start="1845:39" pos:end="1845:39">=</operator> <name pos:start="1845:41" pos:end="1845:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1849:25" pos:end="1849:30">break;</break>

                    <case pos:start="1851:21" pos:end="1851:29">case <expr pos:start="1851:26" pos:end="1851:28"><literal type="number" pos:start="1851:26" pos:end="1851:28">0x2</literal></expr>:</case> <comment type="block" pos:start="1851:31" pos:end="1851:38">/* or */</comment>

                        <expr_stmt pos:start="1853:25" pos:end="1853:67"><expr pos:start="1853:25" pos:end="1853:66"><call pos:start="1853:25" pos:end="1853:66"><name pos:start="1853:25" pos:end="1853:37">tcg_gen_or_tl</name><argument_list pos:start="1853:38" pos:end="1853:66">(<argument pos:start="1853:39" pos:end="1853:45"><expr pos:start="1853:39" pos:end="1853:45"><name pos:start="1853:39" pos:end="1853:45">cpu_dst</name></expr></argument>, <argument pos:start="1853:48" pos:end="1853:55"><expr pos:start="1853:48" pos:end="1853:55"><name pos:start="1853:48" pos:end="1853:55">cpu_src1</name></expr></argument>, <argument pos:start="1853:58" pos:end="1853:65"><expr pos:start="1853:58" pos:end="1853:65"><name pos:start="1853:58" pos:end="1853:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1855:25" pos:end="1863:25"><if pos:start="1855:25" pos:end="1863:25">if <condition pos:start="1855:28" pos:end="1855:39">(<expr pos:start="1855:29" pos:end="1855:38"><name pos:start="1855:29" pos:end="1855:31">xop</name> <operator pos:start="1855:33" pos:end="1855:33">&amp;</operator> <literal type="number" pos:start="1855:35" pos:end="1855:38">0x10</literal></expr>)</condition> <block pos:start="1855:41" pos:end="1863:25">{<block_content pos:start="1857:29" pos:end="1861:52">

                            <expr_stmt pos:start="1857:29" pos:end="1857:64"><expr pos:start="1857:29" pos:end="1857:63"><call pos:start="1857:29" pos:end="1857:63"><name pos:start="1857:29" pos:end="1857:42">tcg_gen_mov_tl</name><argument_list pos:start="1857:43" pos:end="1857:63">(<argument pos:start="1857:44" pos:end="1857:53"><expr pos:start="1857:44" pos:end="1857:53"><name pos:start="1857:44" pos:end="1857:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1857:56" pos:end="1857:62"><expr pos:start="1857:56" pos:end="1857:62"><name pos:start="1857:56" pos:end="1857:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1859:29" pos:end="1859:69"><expr pos:start="1859:29" pos:end="1859:68"><call pos:start="1859:29" pos:end="1859:68"><name pos:start="1859:29" pos:end="1859:44">tcg_gen_movi_i32</name><argument_list pos:start="1859:45" pos:end="1859:68">(<argument pos:start="1859:46" pos:end="1859:54"><expr pos:start="1859:46" pos:end="1859:54"><name pos:start="1859:46" pos:end="1859:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1859:57" pos:end="1859:67"><expr pos:start="1859:57" pos:end="1859:67"><name pos:start="1859:57" pos:end="1859:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1861:29" pos:end="1861:52"><expr pos:start="1861:29" pos:end="1861:51"><name pos:start="1861:29" pos:end="1861:37"><name pos:start="1861:29" pos:end="1861:30">dc</name><operator pos:start="1861:31" pos:end="1861:32">-&gt;</operator><name pos:start="1861:33" pos:end="1861:37">cc_op</name></name> <operator pos:start="1861:39" pos:end="1861:39">=</operator> <name pos:start="1861:41" pos:end="1861:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1865:25" pos:end="1865:30">break;</break>

                    <case pos:start="1867:21" pos:end="1867:29">case <expr pos:start="1867:26" pos:end="1867:28"><literal type="number" pos:start="1867:26" pos:end="1867:28">0x3</literal></expr>:</case> <comment type="block" pos:start="1867:31" pos:end="1867:39">/* xor */</comment>

                        <expr_stmt pos:start="1869:25" pos:end="1869:68"><expr pos:start="1869:25" pos:end="1869:67"><call pos:start="1869:25" pos:end="1869:67"><name pos:start="1869:25" pos:end="1869:38">tcg_gen_xor_tl</name><argument_list pos:start="1869:39" pos:end="1869:67">(<argument pos:start="1869:40" pos:end="1869:46"><expr pos:start="1869:40" pos:end="1869:46"><name pos:start="1869:40" pos:end="1869:46">cpu_dst</name></expr></argument>, <argument pos:start="1869:49" pos:end="1869:56"><expr pos:start="1869:49" pos:end="1869:56"><name pos:start="1869:49" pos:end="1869:56">cpu_src1</name></expr></argument>, <argument pos:start="1869:59" pos:end="1869:66"><expr pos:start="1869:59" pos:end="1869:66"><name pos:start="1869:59" pos:end="1869:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1871:25" pos:end="1879:25"><if pos:start="1871:25" pos:end="1879:25">if <condition pos:start="1871:28" pos:end="1871:39">(<expr pos:start="1871:29" pos:end="1871:38"><name pos:start="1871:29" pos:end="1871:31">xop</name> <operator pos:start="1871:33" pos:end="1871:33">&amp;</operator> <literal type="number" pos:start="1871:35" pos:end="1871:38">0x10</literal></expr>)</condition> <block pos:start="1871:41" pos:end="1879:25">{<block_content pos:start="1873:29" pos:end="1877:52">

                            <expr_stmt pos:start="1873:29" pos:end="1873:64"><expr pos:start="1873:29" pos:end="1873:63"><call pos:start="1873:29" pos:end="1873:63"><name pos:start="1873:29" pos:end="1873:42">tcg_gen_mov_tl</name><argument_list pos:start="1873:43" pos:end="1873:63">(<argument pos:start="1873:44" pos:end="1873:53"><expr pos:start="1873:44" pos:end="1873:53"><name pos:start="1873:44" pos:end="1873:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1873:56" pos:end="1873:62"><expr pos:start="1873:56" pos:end="1873:62"><name pos:start="1873:56" pos:end="1873:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1875:29" pos:end="1875:69"><expr pos:start="1875:29" pos:end="1875:68"><call pos:start="1875:29" pos:end="1875:68"><name pos:start="1875:29" pos:end="1875:44">tcg_gen_movi_i32</name><argument_list pos:start="1875:45" pos:end="1875:68">(<argument pos:start="1875:46" pos:end="1875:54"><expr pos:start="1875:46" pos:end="1875:54"><name pos:start="1875:46" pos:end="1875:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1875:57" pos:end="1875:67"><expr pos:start="1875:57" pos:end="1875:67"><name pos:start="1875:57" pos:end="1875:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1877:29" pos:end="1877:52"><expr pos:start="1877:29" pos:end="1877:51"><name pos:start="1877:29" pos:end="1877:37"><name pos:start="1877:29" pos:end="1877:30">dc</name><operator pos:start="1877:31" pos:end="1877:32">-&gt;</operator><name pos:start="1877:33" pos:end="1877:37">cc_op</name></name> <operator pos:start="1877:39" pos:end="1877:39">=</operator> <name pos:start="1877:41" pos:end="1877:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1881:25" pos:end="1881:30">break;</break>

                    <case pos:start="1883:21" pos:end="1883:29">case <expr pos:start="1883:26" pos:end="1883:28"><literal type="number" pos:start="1883:26" pos:end="1883:28">0x4</literal></expr>:</case> <comment type="block" pos:start="1883:31" pos:end="1883:39">/* sub */</comment>

                        <if_stmt pos:start="1885:25" pos:end="1897:25"><if pos:start="1885:25" pos:end="1893:25">if <condition pos:start="1885:28" pos:end="1885:39">(<expr pos:start="1885:29" pos:end="1885:38"><name pos:start="1885:29" pos:end="1885:31">xop</name> <operator pos:start="1885:33" pos:end="1885:33">&amp;</operator> <literal type="number" pos:start="1885:35" pos:end="1885:38">0x10</literal></expr>)</condition> <block pos:start="1885:41" pos:end="1893:25">{<block_content pos:start="1887:29" pos:end="1891:50">

                            <expr_stmt pos:start="1887:29" pos:end="1887:71"><expr pos:start="1887:29" pos:end="1887:70"><call pos:start="1887:29" pos:end="1887:70"><name pos:start="1887:29" pos:end="1887:41">gen_op_sub_cc</name><argument_list pos:start="1887:42" pos:end="1887:70">(<argument pos:start="1887:43" pos:end="1887:49"><expr pos:start="1887:43" pos:end="1887:49"><name pos:start="1887:43" pos:end="1887:49">cpu_dst</name></expr></argument>, <argument pos:start="1887:52" pos:end="1887:59"><expr pos:start="1887:52" pos:end="1887:59"><name pos:start="1887:52" pos:end="1887:59">cpu_src1</name></expr></argument>, <argument pos:start="1887:62" pos:end="1887:69"><expr pos:start="1887:62" pos:end="1887:69"><name pos:start="1887:62" pos:end="1887:69">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1889:29" pos:end="1889:67"><expr pos:start="1889:29" pos:end="1889:66"><call pos:start="1889:29" pos:end="1889:66"><name pos:start="1889:29" pos:end="1889:44">tcg_gen_movi_i32</name><argument_list pos:start="1889:45" pos:end="1889:66">(<argument pos:start="1889:46" pos:end="1889:54"><expr pos:start="1889:46" pos:end="1889:54"><name pos:start="1889:46" pos:end="1889:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1889:57" pos:end="1889:65"><expr pos:start="1889:57" pos:end="1889:65"><name pos:start="1889:57" pos:end="1889:65">CC_OP_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1891:29" pos:end="1891:50"><expr pos:start="1891:29" pos:end="1891:49"><name pos:start="1891:29" pos:end="1891:37"><name pos:start="1891:29" pos:end="1891:30">dc</name><operator pos:start="1891:31" pos:end="1891:32">-&gt;</operator><name pos:start="1891:33" pos:end="1891:37">cc_op</name></name> <operator pos:start="1891:39" pos:end="1891:39">=</operator> <name pos:start="1891:41" pos:end="1891:49">CC_OP_SUB</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1893:27" pos:end="1897:25">else <block pos:start="1893:32" pos:end="1897:25">{<block_content pos:start="1895:29" pos:end="1895:72">

                            <expr_stmt pos:start="1895:29" pos:end="1895:72"><expr pos:start="1895:29" pos:end="1895:71"><call pos:start="1895:29" pos:end="1895:71"><name pos:start="1895:29" pos:end="1895:42">tcg_gen_sub_tl</name><argument_list pos:start="1895:43" pos:end="1895:71">(<argument pos:start="1895:44" pos:end="1895:50"><expr pos:start="1895:44" pos:end="1895:50"><name pos:start="1895:44" pos:end="1895:50">cpu_dst</name></expr></argument>, <argument pos:start="1895:53" pos:end="1895:60"><expr pos:start="1895:53" pos:end="1895:60"><name pos:start="1895:53" pos:end="1895:60">cpu_src1</name></expr></argument>, <argument pos:start="1895:63" pos:end="1895:70"><expr pos:start="1895:63" pos:end="1895:70"><name pos:start="1895:63" pos:end="1895:70">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="1899:25" pos:end="1899:30">break;</break>

                    <case pos:start="1901:21" pos:end="1901:29">case <expr pos:start="1901:26" pos:end="1901:28"><literal type="number" pos:start="1901:26" pos:end="1901:28">0x5</literal></expr>:</case> <comment type="block" pos:start="1901:31" pos:end="1901:40">/* andn */</comment>

                        <expr_stmt pos:start="1903:25" pos:end="1903:69"><expr pos:start="1903:25" pos:end="1903:68"><call pos:start="1903:25" pos:end="1903:68"><name pos:start="1903:25" pos:end="1903:39">tcg_gen_andc_tl</name><argument_list pos:start="1903:40" pos:end="1903:68">(<argument pos:start="1903:41" pos:end="1903:47"><expr pos:start="1903:41" pos:end="1903:47"><name pos:start="1903:41" pos:end="1903:47">cpu_dst</name></expr></argument>, <argument pos:start="1903:50" pos:end="1903:57"><expr pos:start="1903:50" pos:end="1903:57"><name pos:start="1903:50" pos:end="1903:57">cpu_src1</name></expr></argument>, <argument pos:start="1903:60" pos:end="1903:67"><expr pos:start="1903:60" pos:end="1903:67"><name pos:start="1903:60" pos:end="1903:67">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1905:25" pos:end="1913:25"><if pos:start="1905:25" pos:end="1913:25">if <condition pos:start="1905:28" pos:end="1905:39">(<expr pos:start="1905:29" pos:end="1905:38"><name pos:start="1905:29" pos:end="1905:31">xop</name> <operator pos:start="1905:33" pos:end="1905:33">&amp;</operator> <literal type="number" pos:start="1905:35" pos:end="1905:38">0x10</literal></expr>)</condition> <block pos:start="1905:41" pos:end="1913:25">{<block_content pos:start="1907:29" pos:end="1911:52">

                            <expr_stmt pos:start="1907:29" pos:end="1907:64"><expr pos:start="1907:29" pos:end="1907:63"><call pos:start="1907:29" pos:end="1907:63"><name pos:start="1907:29" pos:end="1907:42">tcg_gen_mov_tl</name><argument_list pos:start="1907:43" pos:end="1907:63">(<argument pos:start="1907:44" pos:end="1907:53"><expr pos:start="1907:44" pos:end="1907:53"><name pos:start="1907:44" pos:end="1907:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1907:56" pos:end="1907:62"><expr pos:start="1907:56" pos:end="1907:62"><name pos:start="1907:56" pos:end="1907:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1909:29" pos:end="1909:69"><expr pos:start="1909:29" pos:end="1909:68"><call pos:start="1909:29" pos:end="1909:68"><name pos:start="1909:29" pos:end="1909:44">tcg_gen_movi_i32</name><argument_list pos:start="1909:45" pos:end="1909:68">(<argument pos:start="1909:46" pos:end="1909:54"><expr pos:start="1909:46" pos:end="1909:54"><name pos:start="1909:46" pos:end="1909:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1909:57" pos:end="1909:67"><expr pos:start="1909:57" pos:end="1909:67"><name pos:start="1909:57" pos:end="1909:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1911:29" pos:end="1911:52"><expr pos:start="1911:29" pos:end="1911:51"><name pos:start="1911:29" pos:end="1911:37"><name pos:start="1911:29" pos:end="1911:30">dc</name><operator pos:start="1911:31" pos:end="1911:32">-&gt;</operator><name pos:start="1911:33" pos:end="1911:37">cc_op</name></name> <operator pos:start="1911:39" pos:end="1911:39">=</operator> <name pos:start="1911:41" pos:end="1911:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1915:25" pos:end="1915:30">break;</break>

                    <case pos:start="1917:21" pos:end="1917:29">case <expr pos:start="1917:26" pos:end="1917:28"><literal type="number" pos:start="1917:26" pos:end="1917:28">0x6</literal></expr>:</case> <comment type="block" pos:start="1917:31" pos:end="1917:39">/* orn */</comment>

                        <expr_stmt pos:start="1919:25" pos:end="1919:68"><expr pos:start="1919:25" pos:end="1919:67"><call pos:start="1919:25" pos:end="1919:67"><name pos:start="1919:25" pos:end="1919:38">tcg_gen_orc_tl</name><argument_list pos:start="1919:39" pos:end="1919:67">(<argument pos:start="1919:40" pos:end="1919:46"><expr pos:start="1919:40" pos:end="1919:46"><name pos:start="1919:40" pos:end="1919:46">cpu_dst</name></expr></argument>, <argument pos:start="1919:49" pos:end="1919:56"><expr pos:start="1919:49" pos:end="1919:56"><name pos:start="1919:49" pos:end="1919:56">cpu_src1</name></expr></argument>, <argument pos:start="1919:59" pos:end="1919:66"><expr pos:start="1919:59" pos:end="1919:66"><name pos:start="1919:59" pos:end="1919:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1921:25" pos:end="1929:25"><if pos:start="1921:25" pos:end="1929:25">if <condition pos:start="1921:28" pos:end="1921:39">(<expr pos:start="1921:29" pos:end="1921:38"><name pos:start="1921:29" pos:end="1921:31">xop</name> <operator pos:start="1921:33" pos:end="1921:33">&amp;</operator> <literal type="number" pos:start="1921:35" pos:end="1921:38">0x10</literal></expr>)</condition> <block pos:start="1921:41" pos:end="1929:25">{<block_content pos:start="1923:29" pos:end="1927:52">

                            <expr_stmt pos:start="1923:29" pos:end="1923:64"><expr pos:start="1923:29" pos:end="1923:63"><call pos:start="1923:29" pos:end="1923:63"><name pos:start="1923:29" pos:end="1923:42">tcg_gen_mov_tl</name><argument_list pos:start="1923:43" pos:end="1923:63">(<argument pos:start="1923:44" pos:end="1923:53"><expr pos:start="1923:44" pos:end="1923:53"><name pos:start="1923:44" pos:end="1923:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1923:56" pos:end="1923:62"><expr pos:start="1923:56" pos:end="1923:62"><name pos:start="1923:56" pos:end="1923:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1925:29" pos:end="1925:69"><expr pos:start="1925:29" pos:end="1925:68"><call pos:start="1925:29" pos:end="1925:68"><name pos:start="1925:29" pos:end="1925:44">tcg_gen_movi_i32</name><argument_list pos:start="1925:45" pos:end="1925:68">(<argument pos:start="1925:46" pos:end="1925:54"><expr pos:start="1925:46" pos:end="1925:54"><name pos:start="1925:46" pos:end="1925:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1925:57" pos:end="1925:67"><expr pos:start="1925:57" pos:end="1925:67"><name pos:start="1925:57" pos:end="1925:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1927:29" pos:end="1927:52"><expr pos:start="1927:29" pos:end="1927:51"><name pos:start="1927:29" pos:end="1927:37"><name pos:start="1927:29" pos:end="1927:30">dc</name><operator pos:start="1927:31" pos:end="1927:32">-&gt;</operator><name pos:start="1927:33" pos:end="1927:37">cc_op</name></name> <operator pos:start="1927:39" pos:end="1927:39">=</operator> <name pos:start="1927:41" pos:end="1927:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1931:25" pos:end="1931:30">break;</break>

                    <case pos:start="1933:21" pos:end="1933:29">case <expr pos:start="1933:26" pos:end="1933:28"><literal type="number" pos:start="1933:26" pos:end="1933:28">0x7</literal></expr>:</case> <comment type="block" pos:start="1933:31" pos:end="1933:40">/* xorn */</comment>

                        <expr_stmt pos:start="1935:25" pos:end="1935:68"><expr pos:start="1935:25" pos:end="1935:67"><call pos:start="1935:25" pos:end="1935:67"><name pos:start="1935:25" pos:end="1935:38">tcg_gen_eqv_tl</name><argument_list pos:start="1935:39" pos:end="1935:67">(<argument pos:start="1935:40" pos:end="1935:46"><expr pos:start="1935:40" pos:end="1935:46"><name pos:start="1935:40" pos:end="1935:46">cpu_dst</name></expr></argument>, <argument pos:start="1935:49" pos:end="1935:56"><expr pos:start="1935:49" pos:end="1935:56"><name pos:start="1935:49" pos:end="1935:56">cpu_src1</name></expr></argument>, <argument pos:start="1935:59" pos:end="1935:66"><expr pos:start="1935:59" pos:end="1935:66"><name pos:start="1935:59" pos:end="1935:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1937:25" pos:end="1945:25"><if pos:start="1937:25" pos:end="1945:25">if <condition pos:start="1937:28" pos:end="1937:39">(<expr pos:start="1937:29" pos:end="1937:38"><name pos:start="1937:29" pos:end="1937:31">xop</name> <operator pos:start="1937:33" pos:end="1937:33">&amp;</operator> <literal type="number" pos:start="1937:35" pos:end="1937:38">0x10</literal></expr>)</condition> <block pos:start="1937:41" pos:end="1945:25">{<block_content pos:start="1939:29" pos:end="1943:52">

                            <expr_stmt pos:start="1939:29" pos:end="1939:64"><expr pos:start="1939:29" pos:end="1939:63"><call pos:start="1939:29" pos:end="1939:63"><name pos:start="1939:29" pos:end="1939:42">tcg_gen_mov_tl</name><argument_list pos:start="1939:43" pos:end="1939:63">(<argument pos:start="1939:44" pos:end="1939:53"><expr pos:start="1939:44" pos:end="1939:53"><name pos:start="1939:44" pos:end="1939:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1939:56" pos:end="1939:62"><expr pos:start="1939:56" pos:end="1939:62"><name pos:start="1939:56" pos:end="1939:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1941:29" pos:end="1941:69"><expr pos:start="1941:29" pos:end="1941:68"><call pos:start="1941:29" pos:end="1941:68"><name pos:start="1941:29" pos:end="1941:44">tcg_gen_movi_i32</name><argument_list pos:start="1941:45" pos:end="1941:68">(<argument pos:start="1941:46" pos:end="1941:54"><expr pos:start="1941:46" pos:end="1941:54"><name pos:start="1941:46" pos:end="1941:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1941:57" pos:end="1941:67"><expr pos:start="1941:57" pos:end="1941:67"><name pos:start="1941:57" pos:end="1941:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1943:29" pos:end="1943:52"><expr pos:start="1943:29" pos:end="1943:51"><name pos:start="1943:29" pos:end="1943:37"><name pos:start="1943:29" pos:end="1943:30">dc</name><operator pos:start="1943:31" pos:end="1943:32">-&gt;</operator><name pos:start="1943:33" pos:end="1943:37">cc_op</name></name> <operator pos:start="1943:39" pos:end="1943:39">=</operator> <name pos:start="1943:41" pos:end="1943:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1947:25" pos:end="1947:30">break;</break>

                    <case pos:start="1949:21" pos:end="1949:29">case <expr pos:start="1949:26" pos:end="1949:28"><literal type="number" pos:start="1949:26" pos:end="1949:28">0x8</literal></expr>:</case> <comment type="block" pos:start="1949:31" pos:end="1949:49">/* addx, V9 addc */</comment>

                        <expr_stmt pos:start="1951:25" pos:end="1953:54"><expr pos:start="1951:25" pos:end="1953:53"><call pos:start="1951:25" pos:end="1953:53"><name pos:start="1951:25" pos:end="1951:39">gen_op_addx_int</name><argument_list pos:start="1951:40" pos:end="1953:53">(<argument pos:start="1951:41" pos:end="1951:42"><expr pos:start="1951:41" pos:end="1951:42"><name pos:start="1951:41" pos:end="1951:42">dc</name></expr></argument>, <argument pos:start="1951:45" pos:end="1951:51"><expr pos:start="1951:45" pos:end="1951:51"><name pos:start="1951:45" pos:end="1951:51">cpu_dst</name></expr></argument>, <argument pos:start="1951:54" pos:end="1951:61"><expr pos:start="1951:54" pos:end="1951:61"><name pos:start="1951:54" pos:end="1951:61">cpu_src1</name></expr></argument>, <argument pos:start="1951:64" pos:end="1951:71"><expr pos:start="1951:64" pos:end="1951:71"><name pos:start="1951:64" pos:end="1951:71">cpu_src2</name></expr></argument>,

                                        <argument pos:start="1953:41" pos:end="1953:52"><expr pos:start="1953:41" pos:end="1953:52"><operator pos:start="1953:41" pos:end="1953:41">(</operator><name pos:start="1953:42" pos:end="1953:44">xop</name> <operator pos:start="1953:46" pos:end="1953:46">&amp;</operator> <literal type="number" pos:start="1953:48" pos:end="1953:51">0x10</literal><operator pos:start="1953:52" pos:end="1953:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1955:25" pos:end="1958:0">break;</break>

<cpp:ifdef pos:start="1957:1" pos:end="1957:21">#<cpp:directive pos:start="1957:2" pos:end="1957:6">ifdef</cpp:directive> <name pos:start="1957:8" pos:end="1957:21">TARGET_SPARC64</name></cpp:ifdef>

                    <case pos:start="1959:21" pos:end="1959:29">case <expr pos:start="1959:26" pos:end="1959:28"><literal type="number" pos:start="1959:26" pos:end="1959:28">0x9</literal></expr>:</case> <comment type="block" pos:start="1959:31" pos:end="1959:43">/* V9 mulx */</comment>

                        <expr_stmt pos:start="1961:25" pos:end="1961:69"><expr pos:start="1961:25" pos:end="1961:68"><call pos:start="1961:25" pos:end="1961:68"><name pos:start="1961:25" pos:end="1961:39">tcg_gen_mul_i64</name><argument_list pos:start="1961:40" pos:end="1961:68">(<argument pos:start="1961:41" pos:end="1961:47"><expr pos:start="1961:41" pos:end="1961:47"><name pos:start="1961:41" pos:end="1961:47">cpu_dst</name></expr></argument>, <argument pos:start="1961:50" pos:end="1961:57"><expr pos:start="1961:50" pos:end="1961:57"><name pos:start="1961:50" pos:end="1961:57">cpu_src1</name></expr></argument>, <argument pos:start="1961:60" pos:end="1961:67"><expr pos:start="1961:60" pos:end="1961:67"><name pos:start="1961:60" pos:end="1961:67">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1963:25" pos:end="1966:0">break;</break>

<cpp:endif pos:start="1965:1" pos:end="1965:6">#<cpp:directive pos:start="1965:2" pos:end="1965:6">endif</cpp:directive></cpp:endif>

                    <case pos:start="1967:21" pos:end="1967:29">case <expr pos:start="1967:26" pos:end="1967:28"><literal type="number" pos:start="1967:26" pos:end="1967:28">0xa</literal></expr>:</case> <comment type="block" pos:start="1967:31" pos:end="1967:40">/* umul */</comment>

                        <expr_stmt pos:start="1969:25" pos:end="1969:50"><expr pos:start="1969:25" pos:end="1969:49"><call pos:start="1969:25" pos:end="1969:49"><name pos:start="1969:25" pos:end="1969:40">CHECK_IU_FEATURE</name><argument_list pos:start="1969:41" pos:end="1969:49">(<argument pos:start="1969:42" pos:end="1969:43"><expr pos:start="1969:42" pos:end="1969:43"><name pos:start="1969:42" pos:end="1969:43">dc</name></expr></argument>, <argument pos:start="1969:46" pos:end="1969:48"><expr pos:start="1969:46" pos:end="1969:48"><name pos:start="1969:46" pos:end="1969:48">MUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1971:25" pos:end="1971:65"><expr pos:start="1971:25" pos:end="1971:64"><call pos:start="1971:25" pos:end="1971:64"><name pos:start="1971:25" pos:end="1971:35">gen_op_umul</name><argument_list pos:start="1971:36" pos:end="1971:64">(<argument pos:start="1971:37" pos:end="1971:43"><expr pos:start="1971:37" pos:end="1971:43"><name pos:start="1971:37" pos:end="1971:43">cpu_dst</name></expr></argument>, <argument pos:start="1971:46" pos:end="1971:53"><expr pos:start="1971:46" pos:end="1971:53"><name pos:start="1971:46" pos:end="1971:53">cpu_src1</name></expr></argument>, <argument pos:start="1971:56" pos:end="1971:63"><expr pos:start="1971:56" pos:end="1971:63"><name pos:start="1971:56" pos:end="1971:63">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1973:25" pos:end="1981:25"><if pos:start="1973:25" pos:end="1981:25">if <condition pos:start="1973:28" pos:end="1973:39">(<expr pos:start="1973:29" pos:end="1973:38"><name pos:start="1973:29" pos:end="1973:31">xop</name> <operator pos:start="1973:33" pos:end="1973:33">&amp;</operator> <literal type="number" pos:start="1973:35" pos:end="1973:38">0x10</literal></expr>)</condition> <block pos:start="1973:41" pos:end="1981:25">{<block_content pos:start="1975:29" pos:end="1979:52">

                            <expr_stmt pos:start="1975:29" pos:end="1975:64"><expr pos:start="1975:29" pos:end="1975:63"><call pos:start="1975:29" pos:end="1975:63"><name pos:start="1975:29" pos:end="1975:42">tcg_gen_mov_tl</name><argument_list pos:start="1975:43" pos:end="1975:63">(<argument pos:start="1975:44" pos:end="1975:53"><expr pos:start="1975:44" pos:end="1975:53"><name pos:start="1975:44" pos:end="1975:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1975:56" pos:end="1975:62"><expr pos:start="1975:56" pos:end="1975:62"><name pos:start="1975:56" pos:end="1975:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1977:29" pos:end="1977:69"><expr pos:start="1977:29" pos:end="1977:68"><call pos:start="1977:29" pos:end="1977:68"><name pos:start="1977:29" pos:end="1977:44">tcg_gen_movi_i32</name><argument_list pos:start="1977:45" pos:end="1977:68">(<argument pos:start="1977:46" pos:end="1977:54"><expr pos:start="1977:46" pos:end="1977:54"><name pos:start="1977:46" pos:end="1977:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1977:57" pos:end="1977:67"><expr pos:start="1977:57" pos:end="1977:67"><name pos:start="1977:57" pos:end="1977:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1979:29" pos:end="1979:52"><expr pos:start="1979:29" pos:end="1979:51"><name pos:start="1979:29" pos:end="1979:37"><name pos:start="1979:29" pos:end="1979:30">dc</name><operator pos:start="1979:31" pos:end="1979:32">-&gt;</operator><name pos:start="1979:33" pos:end="1979:37">cc_op</name></name> <operator pos:start="1979:39" pos:end="1979:39">=</operator> <name pos:start="1979:41" pos:end="1979:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1983:25" pos:end="1983:30">break;</break>

                    <case pos:start="1985:21" pos:end="1985:29">case <expr pos:start="1985:26" pos:end="1985:28"><literal type="number" pos:start="1985:26" pos:end="1985:28">0xb</literal></expr>:</case> <comment type="block" pos:start="1985:31" pos:end="1985:40">/* smul */</comment>

                        <expr_stmt pos:start="1987:25" pos:end="1987:50"><expr pos:start="1987:25" pos:end="1987:49"><call pos:start="1987:25" pos:end="1987:49"><name pos:start="1987:25" pos:end="1987:40">CHECK_IU_FEATURE</name><argument_list pos:start="1987:41" pos:end="1987:49">(<argument pos:start="1987:42" pos:end="1987:43"><expr pos:start="1987:42" pos:end="1987:43"><name pos:start="1987:42" pos:end="1987:43">dc</name></expr></argument>, <argument pos:start="1987:46" pos:end="1987:48"><expr pos:start="1987:46" pos:end="1987:48"><name pos:start="1987:46" pos:end="1987:48">MUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1989:25" pos:end="1989:65"><expr pos:start="1989:25" pos:end="1989:64"><call pos:start="1989:25" pos:end="1989:64"><name pos:start="1989:25" pos:end="1989:35">gen_op_smul</name><argument_list pos:start="1989:36" pos:end="1989:64">(<argument pos:start="1989:37" pos:end="1989:43"><expr pos:start="1989:37" pos:end="1989:43"><name pos:start="1989:37" pos:end="1989:43">cpu_dst</name></expr></argument>, <argument pos:start="1989:46" pos:end="1989:53"><expr pos:start="1989:46" pos:end="1989:53"><name pos:start="1989:46" pos:end="1989:53">cpu_src1</name></expr></argument>, <argument pos:start="1989:56" pos:end="1989:63"><expr pos:start="1989:56" pos:end="1989:63"><name pos:start="1989:56" pos:end="1989:63">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1991:25" pos:end="1999:25"><if pos:start="1991:25" pos:end="1999:25">if <condition pos:start="1991:28" pos:end="1991:39">(<expr pos:start="1991:29" pos:end="1991:38"><name pos:start="1991:29" pos:end="1991:31">xop</name> <operator pos:start="1991:33" pos:end="1991:33">&amp;</operator> <literal type="number" pos:start="1991:35" pos:end="1991:38">0x10</literal></expr>)</condition> <block pos:start="1991:41" pos:end="1999:25">{<block_content pos:start="1993:29" pos:end="1997:52">

                            <expr_stmt pos:start="1993:29" pos:end="1993:64"><expr pos:start="1993:29" pos:end="1993:63"><call pos:start="1993:29" pos:end="1993:63"><name pos:start="1993:29" pos:end="1993:42">tcg_gen_mov_tl</name><argument_list pos:start="1993:43" pos:end="1993:63">(<argument pos:start="1993:44" pos:end="1993:53"><expr pos:start="1993:44" pos:end="1993:53"><name pos:start="1993:44" pos:end="1993:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1993:56" pos:end="1993:62"><expr pos:start="1993:56" pos:end="1993:62"><name pos:start="1993:56" pos:end="1993:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1995:29" pos:end="1995:69"><expr pos:start="1995:29" pos:end="1995:68"><call pos:start="1995:29" pos:end="1995:68"><name pos:start="1995:29" pos:end="1995:44">tcg_gen_movi_i32</name><argument_list pos:start="1995:45" pos:end="1995:68">(<argument pos:start="1995:46" pos:end="1995:54"><expr pos:start="1995:46" pos:end="1995:54"><name pos:start="1995:46" pos:end="1995:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1995:57" pos:end="1995:67"><expr pos:start="1995:57" pos:end="1995:67"><name pos:start="1995:57" pos:end="1995:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1997:29" pos:end="1997:52"><expr pos:start="1997:29" pos:end="1997:51"><name pos:start="1997:29" pos:end="1997:37"><name pos:start="1997:29" pos:end="1997:30">dc</name><operator pos:start="1997:31" pos:end="1997:32">-&gt;</operator><name pos:start="1997:33" pos:end="1997:37">cc_op</name></name> <operator pos:start="1997:39" pos:end="1997:39">=</operator> <name pos:start="1997:41" pos:end="1997:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="2001:25" pos:end="2001:30">break;</break>

                    <case pos:start="2003:21" pos:end="2003:29">case <expr pos:start="2003:26" pos:end="2003:28"><literal type="number" pos:start="2003:26" pos:end="2003:28">0xc</literal></expr>:</case> <comment type="block" pos:start="2003:31" pos:end="2003:49">/* subx, V9 subc */</comment>

                        <expr_stmt pos:start="2005:25" pos:end="2007:54"><expr pos:start="2005:25" pos:end="2007:53"><call pos:start="2005:25" pos:end="2007:53"><name pos:start="2005:25" pos:end="2005:39">gen_op_subx_int</name><argument_list pos:start="2005:40" pos:end="2007:53">(<argument pos:start="2005:41" pos:end="2005:42"><expr pos:start="2005:41" pos:end="2005:42"><name pos:start="2005:41" pos:end="2005:42">dc</name></expr></argument>, <argument pos:start="2005:45" pos:end="2005:51"><expr pos:start="2005:45" pos:end="2005:51"><name pos:start="2005:45" pos:end="2005:51">cpu_dst</name></expr></argument>, <argument pos:start="2005:54" pos:end="2005:61"><expr pos:start="2005:54" pos:end="2005:61"><name pos:start="2005:54" pos:end="2005:61">cpu_src1</name></expr></argument>, <argument pos:start="2005:64" pos:end="2005:71"><expr pos:start="2005:64" pos:end="2005:71"><name pos:start="2005:64" pos:end="2005:71">cpu_src2</name></expr></argument>,

                                        <argument pos:start="2007:41" pos:end="2007:52"><expr pos:start="2007:41" pos:end="2007:52"><operator pos:start="2007:41" pos:end="2007:41">(</operator><name pos:start="2007:42" pos:end="2007:44">xop</name> <operator pos:start="2007:46" pos:end="2007:46">&amp;</operator> <literal type="number" pos:start="2007:48" pos:end="2007:51">0x10</literal><operator pos:start="2007:52" pos:end="2007:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2009:25" pos:end="2012:0">break;</break>

<cpp:ifdef pos:start="2011:1" pos:end="2011:21">#<cpp:directive pos:start="2011:2" pos:end="2011:6">ifdef</cpp:directive> <name pos:start="2011:8" pos:end="2011:21">TARGET_SPARC64</name></cpp:ifdef>

                    <case pos:start="2013:21" pos:end="2013:29">case <expr pos:start="2013:26" pos:end="2013:28"><literal type="number" pos:start="2013:26" pos:end="2013:28">0xd</literal></expr>:</case> <comment type="block" pos:start="2013:31" pos:end="2013:44">/* V9 udivx */</comment>

                        <expr_stmt pos:start="2015:25" pos:end="2015:79"><expr pos:start="2015:25" pos:end="2015:78"><call pos:start="2015:25" pos:end="2015:78"><name pos:start="2015:25" pos:end="2015:40">gen_helper_udivx</name><argument_list pos:start="2015:41" pos:end="2015:78">(<argument pos:start="2015:42" pos:end="2015:48"><expr pos:start="2015:42" pos:end="2015:48"><name pos:start="2015:42" pos:end="2015:48">cpu_dst</name></expr></argument>, <argument pos:start="2015:51" pos:end="2015:57"><expr pos:start="2015:51" pos:end="2015:57"><name pos:start="2015:51" pos:end="2015:57">cpu_env</name></expr></argument>, <argument pos:start="2015:60" pos:end="2015:67"><expr pos:start="2015:60" pos:end="2015:67"><name pos:start="2015:60" pos:end="2015:67">cpu_src1</name></expr></argument>, <argument pos:start="2015:70" pos:end="2015:77"><expr pos:start="2015:70" pos:end="2015:77"><name pos:start="2015:70" pos:end="2015:77">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2017:25" pos:end="2020:0">break;</break>

<cpp:endif pos:start="2019:1" pos:end="2019:6">#<cpp:directive pos:start="2019:2" pos:end="2019:6">endif</cpp:directive></cpp:endif>

                    <case pos:start="2021:21" pos:end="2021:29">case <expr pos:start="2021:26" pos:end="2021:28"><literal type="number" pos:start="2021:26" pos:end="2021:28">0xe</literal></expr>:</case> <comment type="block" pos:start="2021:31" pos:end="2021:40">/* udiv */</comment>

                        <expr_stmt pos:start="2023:25" pos:end="2023:50"><expr pos:start="2023:25" pos:end="2023:49"><call pos:start="2023:25" pos:end="2023:49"><name pos:start="2023:25" pos:end="2023:40">CHECK_IU_FEATURE</name><argument_list pos:start="2023:41" pos:end="2023:49">(<argument pos:start="2023:42" pos:end="2023:43"><expr pos:start="2023:42" pos:end="2023:43"><name pos:start="2023:42" pos:end="2023:43">dc</name></expr></argument>, <argument pos:start="2023:46" pos:end="2023:48"><expr pos:start="2023:46" pos:end="2023:48"><name pos:start="2023:46" pos:end="2023:48">DIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2025:25" pos:end="2039:25"><if pos:start="2025:25" pos:end="2033:25">if <condition pos:start="2025:28" pos:end="2025:39">(<expr pos:start="2025:29" pos:end="2025:38"><name pos:start="2025:29" pos:end="2025:31">xop</name> <operator pos:start="2025:33" pos:end="2025:33">&amp;</operator> <literal type="number" pos:start="2025:35" pos:end="2025:38">0x10</literal></expr>)</condition> <block pos:start="2025:41" pos:end="2033:25">{<block_content pos:start="2027:29" pos:end="2031:50">

                            <expr_stmt pos:start="2027:29" pos:end="2029:57"><expr pos:start="2027:29" pos:end="2029:56"><call pos:start="2027:29" pos:end="2029:56"><name pos:start="2027:29" pos:end="2027:46">gen_helper_udiv_cc</name><argument_list pos:start="2027:47" pos:end="2029:56">(<argument pos:start="2027:48" pos:end="2027:54"><expr pos:start="2027:48" pos:end="2027:54"><name pos:start="2027:48" pos:end="2027:54">cpu_dst</name></expr></argument>, <argument pos:start="2027:57" pos:end="2027:63"><expr pos:start="2027:57" pos:end="2027:63"><name pos:start="2027:57" pos:end="2027:63">cpu_env</name></expr></argument>, <argument pos:start="2027:66" pos:end="2027:73"><expr pos:start="2027:66" pos:end="2027:73"><name pos:start="2027:66" pos:end="2027:73">cpu_src1</name></expr></argument>,

                                               <argument pos:start="2029:48" pos:end="2029:55"><expr pos:start="2029:48" pos:end="2029:55"><name pos:start="2029:48" pos:end="2029:55">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2031:29" pos:end="2031:50"><expr pos:start="2031:29" pos:end="2031:49"><name pos:start="2031:29" pos:end="2031:37"><name pos:start="2031:29" pos:end="2031:30">dc</name><operator pos:start="2031:31" pos:end="2031:32">-&gt;</operator><name pos:start="2031:33" pos:end="2031:37">cc_op</name></name> <operator pos:start="2031:39" pos:end="2031:39">=</operator> <name pos:start="2031:41" pos:end="2031:49">CC_OP_DIV</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2033:27" pos:end="2039:25">else <block pos:start="2033:32" pos:end="2039:25">{<block_content pos:start="2035:29" pos:end="2037:54">

                            <expr_stmt pos:start="2035:29" pos:end="2037:54"><expr pos:start="2035:29" pos:end="2037:53"><call pos:start="2035:29" pos:end="2037:53"><name pos:start="2035:29" pos:end="2035:43">gen_helper_udiv</name><argument_list pos:start="2035:44" pos:end="2037:53">(<argument pos:start="2035:45" pos:end="2035:51"><expr pos:start="2035:45" pos:end="2035:51"><name pos:start="2035:45" pos:end="2035:51">cpu_dst</name></expr></argument>, <argument pos:start="2035:54" pos:end="2035:60"><expr pos:start="2035:54" pos:end="2035:60"><name pos:start="2035:54" pos:end="2035:60">cpu_env</name></expr></argument>, <argument pos:start="2035:63" pos:end="2035:70"><expr pos:start="2035:63" pos:end="2035:70"><name pos:start="2035:63" pos:end="2035:70">cpu_src1</name></expr></argument>,

                                            <argument pos:start="2037:45" pos:end="2037:52"><expr pos:start="2037:45" pos:end="2037:52"><name pos:start="2037:45" pos:end="2037:52">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="2041:25" pos:end="2041:30">break;</break>

                    <case pos:start="2043:21" pos:end="2043:29">case <expr pos:start="2043:26" pos:end="2043:28"><literal type="number" pos:start="2043:26" pos:end="2043:28">0xf</literal></expr>:</case> <comment type="block" pos:start="2043:31" pos:end="2043:40">/* sdiv */</comment>

                        <expr_stmt pos:start="2045:25" pos:end="2045:50"><expr pos:start="2045:25" pos:end="2045:49"><call pos:start="2045:25" pos:end="2045:49"><name pos:start="2045:25" pos:end="2045:40">CHECK_IU_FEATURE</name><argument_list pos:start="2045:41" pos:end="2045:49">(<argument pos:start="2045:42" pos:end="2045:43"><expr pos:start="2045:42" pos:end="2045:43"><name pos:start="2045:42" pos:end="2045:43">dc</name></expr></argument>, <argument pos:start="2045:46" pos:end="2045:48"><expr pos:start="2045:46" pos:end="2045:48"><name pos:start="2045:46" pos:end="2045:48">DIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2047:25" pos:end="2061:25"><if pos:start="2047:25" pos:end="2055:25">if <condition pos:start="2047:28" pos:end="2047:39">(<expr pos:start="2047:29" pos:end="2047:38"><name pos:start="2047:29" pos:end="2047:31">xop</name> <operator pos:start="2047:33" pos:end="2047:33">&amp;</operator> <literal type="number" pos:start="2047:35" pos:end="2047:38">0x10</literal></expr>)</condition> <block pos:start="2047:41" pos:end="2055:25">{<block_content pos:start="2049:29" pos:end="2053:50">

                            <expr_stmt pos:start="2049:29" pos:end="2051:57"><expr pos:start="2049:29" pos:end="2051:56"><call pos:start="2049:29" pos:end="2051:56"><name pos:start="2049:29" pos:end="2049:46">gen_helper_sdiv_cc</name><argument_list pos:start="2049:47" pos:end="2051:56">(<argument pos:start="2049:48" pos:end="2049:54"><expr pos:start="2049:48" pos:end="2049:54"><name pos:start="2049:48" pos:end="2049:54">cpu_dst</name></expr></argument>, <argument pos:start="2049:57" pos:end="2049:63"><expr pos:start="2049:57" pos:end="2049:63"><name pos:start="2049:57" pos:end="2049:63">cpu_env</name></expr></argument>, <argument pos:start="2049:66" pos:end="2049:73"><expr pos:start="2049:66" pos:end="2049:73"><name pos:start="2049:66" pos:end="2049:73">cpu_src1</name></expr></argument>,

                                               <argument pos:start="2051:48" pos:end="2051:55"><expr pos:start="2051:48" pos:end="2051:55"><name pos:start="2051:48" pos:end="2051:55">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2053:29" pos:end="2053:50"><expr pos:start="2053:29" pos:end="2053:49"><name pos:start="2053:29" pos:end="2053:37"><name pos:start="2053:29" pos:end="2053:30">dc</name><operator pos:start="2053:31" pos:end="2053:32">-&gt;</operator><name pos:start="2053:33" pos:end="2053:37">cc_op</name></name> <operator pos:start="2053:39" pos:end="2053:39">=</operator> <name pos:start="2053:41" pos:end="2053:49">CC_OP_DIV</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2055:27" pos:end="2061:25">else <block pos:start="2055:32" pos:end="2061:25">{<block_content pos:start="2057:29" pos:end="2059:54">

                            <expr_stmt pos:start="2057:29" pos:end="2059:54"><expr pos:start="2057:29" pos:end="2059:53"><call pos:start="2057:29" pos:end="2059:53"><name pos:start="2057:29" pos:end="2057:43">gen_helper_sdiv</name><argument_list pos:start="2057:44" pos:end="2059:53">(<argument pos:start="2057:45" pos:end="2057:51"><expr pos:start="2057:45" pos:end="2057:51"><name pos:start="2057:45" pos:end="2057:51">cpu_dst</name></expr></argument>, <argument pos:start="2057:54" pos:end="2057:60"><expr pos:start="2057:54" pos:end="2057:60"><name pos:start="2057:54" pos:end="2057:60">cpu_env</name></expr></argument>, <argument pos:start="2057:63" pos:end="2057:70"><expr pos:start="2057:63" pos:end="2057:70"><name pos:start="2057:63" pos:end="2057:70">cpu_src1</name></expr></argument>,

                                            <argument pos:start="2059:45" pos:end="2059:52"><expr pos:start="2059:45" pos:end="2059:52"><name pos:start="2059:45" pos:end="2059:52">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="2063:25" pos:end="2063:30">break;</break>

                    <default pos:start="2065:21" pos:end="2065:28">default:</default>

                        <goto pos:start="2067:25" pos:end="2067:42">goto <name pos:start="2067:30" pos:end="2067:41">illegal_insn</name>;</goto>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="2071:21" pos:end="2071:51"><expr pos:start="2071:21" pos:end="2071:50"><call pos:start="2071:21" pos:end="2071:50"><name pos:start="2071:21" pos:end="2071:33">gen_store_gpr</name><argument_list pos:start="2071:34" pos:end="2071:50">(<argument pos:start="2071:35" pos:end="2071:36"><expr pos:start="2071:35" pos:end="2071:36"><name pos:start="2071:35" pos:end="2071:36">dc</name></expr></argument>, <argument pos:start="2071:39" pos:end="2071:40"><expr pos:start="2071:39" pos:end="2071:40"><name pos:start="2071:39" pos:end="2071:40">rd</name></expr></argument>, <argument pos:start="2071:43" pos:end="2071:49"><expr pos:start="2071:43" pos:end="2071:49"><name pos:start="2071:43" pos:end="2071:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2073:19" pos:end="3045:17">else <block pos:start="2073:24" pos:end="3045:17">{<block_content pos:start="2075:21" pos:end="3043:21">

                    <expr_stmt pos:start="2075:21" pos:end="2075:50"><expr pos:start="2075:21" pos:end="2075:49"><name pos:start="2075:21" pos:end="2075:28">cpu_src1</name> <operator pos:start="2075:30" pos:end="2075:30">=</operator> <call pos:start="2075:32" pos:end="2075:49"><name pos:start="2075:32" pos:end="2075:39">get_src1</name><argument_list pos:start="2075:40" pos:end="2075:49">(<argument pos:start="2075:41" pos:end="2075:42"><expr pos:start="2075:41" pos:end="2075:42"><name pos:start="2075:41" pos:end="2075:42">dc</name></expr></argument>, <argument pos:start="2075:45" pos:end="2075:48"><expr pos:start="2075:45" pos:end="2075:48"><name pos:start="2075:45" pos:end="2075:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2077:21" pos:end="2077:50"><expr pos:start="2077:21" pos:end="2077:49"><name pos:start="2077:21" pos:end="2077:28">cpu_src2</name> <operator pos:start="2077:30" pos:end="2077:30">=</operator> <call pos:start="2077:32" pos:end="2077:49"><name pos:start="2077:32" pos:end="2077:39">get_src2</name><argument_list pos:start="2077:40" pos:end="2077:49">(<argument pos:start="2077:41" pos:end="2077:42"><expr pos:start="2077:41" pos:end="2077:42"><name pos:start="2077:41" pos:end="2077:42">dc</name></expr></argument>, <argument pos:start="2077:45" pos:end="2077:48"><expr pos:start="2077:45" pos:end="2077:48"><name pos:start="2077:45" pos:end="2077:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="2079:21" pos:end="3043:21">switch <condition pos:start="2079:28" pos:end="2079:32">(<expr pos:start="2079:29" pos:end="2079:31"><name pos:start="2079:29" pos:end="2079:31">xop</name></expr>)</condition> <block pos:start="2079:34" pos:end="3043:21">{<block_content pos:start="2081:21" pos:end="3041:42">

                    <case pos:start="2081:21" pos:end="2081:30">case <expr pos:start="2081:26" pos:end="2081:29"><literal type="number" pos:start="2081:26" pos:end="2081:29">0x20</literal></expr>:</case> <comment type="block" pos:start="2081:32" pos:end="2081:43">/* taddcc */</comment>

                        <expr_stmt pos:start="2083:25" pos:end="2083:67"><expr pos:start="2083:25" pos:end="2083:66"><call pos:start="2083:25" pos:end="2083:66"><name pos:start="2083:25" pos:end="2083:37">gen_op_add_cc</name><argument_list pos:start="2083:38" pos:end="2083:66">(<argument pos:start="2083:39" pos:end="2083:45"><expr pos:start="2083:39" pos:end="2083:45"><name pos:start="2083:39" pos:end="2083:45">cpu_dst</name></expr></argument>, <argument pos:start="2083:48" pos:end="2083:55"><expr pos:start="2083:48" pos:end="2083:55"><name pos:start="2083:48" pos:end="2083:55">cpu_src1</name></expr></argument>, <argument pos:start="2083:58" pos:end="2083:65"><expr pos:start="2083:58" pos:end="2083:65"><name pos:start="2083:58" pos:end="2083:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2085:25" pos:end="2085:55"><expr pos:start="2085:25" pos:end="2085:54"><call pos:start="2085:25" pos:end="2085:54"><name pos:start="2085:25" pos:end="2085:37">gen_store_gpr</name><argument_list pos:start="2085:38" pos:end="2085:54">(<argument pos:start="2085:39" pos:end="2085:40"><expr pos:start="2085:39" pos:end="2085:40"><name pos:start="2085:39" pos:end="2085:40">dc</name></expr></argument>, <argument pos:start="2085:43" pos:end="2085:44"><expr pos:start="2085:43" pos:end="2085:44"><name pos:start="2085:43" pos:end="2085:44">rd</name></expr></argument>, <argument pos:start="2085:47" pos:end="2085:53"><expr pos:start="2085:47" pos:end="2085:53"><name pos:start="2085:47" pos:end="2085:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2087:25" pos:end="2087:64"><expr pos:start="2087:25" pos:end="2087:63"><call pos:start="2087:25" pos:end="2087:63"><name pos:start="2087:25" pos:end="2087:40">tcg_gen_movi_i32</name><argument_list pos:start="2087:41" pos:end="2087:63">(<argument pos:start="2087:42" pos:end="2087:50"><expr pos:start="2087:42" pos:end="2087:50"><name pos:start="2087:42" pos:end="2087:50">cpu_cc_op</name></expr></argument>, <argument pos:start="2087:53" pos:end="2087:62"><expr pos:start="2087:53" pos:end="2087:62"><name pos:start="2087:53" pos:end="2087:62">CC_OP_TADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2089:25" pos:end="2089:47"><expr pos:start="2089:25" pos:end="2089:46"><name pos:start="2089:25" pos:end="2089:33"><name pos:start="2089:25" pos:end="2089:26">dc</name><operator pos:start="2089:27" pos:end="2089:28">-&gt;</operator><name pos:start="2089:29" pos:end="2089:33">cc_op</name></name> <operator pos:start="2089:35" pos:end="2089:35">=</operator> <name pos:start="2089:37" pos:end="2089:46">CC_OP_TADD</name></expr>;</expr_stmt>

                        <break pos:start="2091:25" pos:end="2091:30">break;</break>

                    <case pos:start="2093:21" pos:end="2093:30">case <expr pos:start="2093:26" pos:end="2093:29"><literal type="number" pos:start="2093:26" pos:end="2093:29">0x21</literal></expr>:</case> <comment type="block" pos:start="2093:32" pos:end="2093:43">/* tsubcc */</comment>

                        <expr_stmt pos:start="2095:25" pos:end="2095:67"><expr pos:start="2095:25" pos:end="2095:66"><call pos:start="2095:25" pos:end="2095:66"><name pos:start="2095:25" pos:end="2095:37">gen_op_sub_cc</name><argument_list pos:start="2095:38" pos:end="2095:66">(<argument pos:start="2095:39" pos:end="2095:45"><expr pos:start="2095:39" pos:end="2095:45"><name pos:start="2095:39" pos:end="2095:45">cpu_dst</name></expr></argument>, <argument pos:start="2095:48" pos:end="2095:55"><expr pos:start="2095:48" pos:end="2095:55"><name pos:start="2095:48" pos:end="2095:55">cpu_src1</name></expr></argument>, <argument pos:start="2095:58" pos:end="2095:65"><expr pos:start="2095:58" pos:end="2095:65"><name pos:start="2095:58" pos:end="2095:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2097:25" pos:end="2097:55"><expr pos:start="2097:25" pos:end="2097:54"><call pos:start="2097:25" pos:end="2097:54"><name pos:start="2097:25" pos:end="2097:37">gen_store_gpr</name><argument_list pos:start="2097:38" pos:end="2097:54">(<argument pos:start="2097:39" pos:end="2097:40"><expr pos:start="2097:39" pos:end="2097:40"><name pos:start="2097:39" pos:end="2097:40">dc</name></expr></argument>, <argument pos:start="2097:43" pos:end="2097:44"><expr pos:start="2097:43" pos:end="2097:44"><name pos:start="2097:43" pos:end="2097:44">rd</name></expr></argument>, <argument pos:start="2097:47" pos:end="2097:53"><expr pos:start="2097:47" pos:end="2097:53"><name pos:start="2097:47" pos:end="2097:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2099:25" pos:end="2099:64"><expr pos:start="2099:25" pos:end="2099:63"><call pos:start="2099:25" pos:end="2099:63"><name pos:start="2099:25" pos:end="2099:40">tcg_gen_movi_i32</name><argument_list pos:start="2099:41" pos:end="2099:63">(<argument pos:start="2099:42" pos:end="2099:50"><expr pos:start="2099:42" pos:end="2099:50"><name pos:start="2099:42" pos:end="2099:50">cpu_cc_op</name></expr></argument>, <argument pos:start="2099:53" pos:end="2099:62"><expr pos:start="2099:53" pos:end="2099:62"><name pos:start="2099:53" pos:end="2099:62">CC_OP_TSUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2101:25" pos:end="2101:47"><expr pos:start="2101:25" pos:end="2101:46"><name pos:start="2101:25" pos:end="2101:33"><name pos:start="2101:25" pos:end="2101:26">dc</name><operator pos:start="2101:27" pos:end="2101:28">-&gt;</operator><name pos:start="2101:29" pos:end="2101:33">cc_op</name></name> <operator pos:start="2101:35" pos:end="2101:35">=</operator> <name pos:start="2101:37" pos:end="2101:46">CC_OP_TSUB</name></expr>;</expr_stmt>

                        <break pos:start="2103:25" pos:end="2103:30">break;</break>

                    <case pos:start="2105:21" pos:end="2105:30">case <expr pos:start="2105:26" pos:end="2105:29"><literal type="number" pos:start="2105:26" pos:end="2105:29">0x22</literal></expr>:</case> <comment type="block" pos:start="2105:32" pos:end="2105:45">/* taddcctv */</comment>

                        <expr_stmt pos:start="2107:25" pos:end="2109:64"><expr pos:start="2107:25" pos:end="2109:63"><call pos:start="2107:25" pos:end="2109:63"><name pos:start="2107:25" pos:end="2107:43">gen_helper_taddcctv</name><argument_list pos:start="2107:44" pos:end="2109:63">(<argument pos:start="2107:45" pos:end="2107:51"><expr pos:start="2107:45" pos:end="2107:51"><name pos:start="2107:45" pos:end="2107:51">cpu_dst</name></expr></argument>, <argument pos:start="2107:54" pos:end="2107:60"><expr pos:start="2107:54" pos:end="2107:60"><name pos:start="2107:54" pos:end="2107:60">cpu_env</name></expr></argument>,

                                            <argument pos:start="2109:45" pos:end="2109:52"><expr pos:start="2109:45" pos:end="2109:52"><name pos:start="2109:45" pos:end="2109:52">cpu_src1</name></expr></argument>, <argument pos:start="2109:55" pos:end="2109:62"><expr pos:start="2109:55" pos:end="2109:62"><name pos:start="2109:55" pos:end="2109:62">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2111:25" pos:end="2111:55"><expr pos:start="2111:25" pos:end="2111:54"><call pos:start="2111:25" pos:end="2111:54"><name pos:start="2111:25" pos:end="2111:37">gen_store_gpr</name><argument_list pos:start="2111:38" pos:end="2111:54">(<argument pos:start="2111:39" pos:end="2111:40"><expr pos:start="2111:39" pos:end="2111:40"><name pos:start="2111:39" pos:end="2111:40">dc</name></expr></argument>, <argument pos:start="2111:43" pos:end="2111:44"><expr pos:start="2111:43" pos:end="2111:44"><name pos:start="2111:43" pos:end="2111:44">rd</name></expr></argument>, <argument pos:start="2111:47" pos:end="2111:53"><expr pos:start="2111:47" pos:end="2111:53"><name pos:start="2111:47" pos:end="2111:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2113:25" pos:end="2113:49"><expr pos:start="2113:25" pos:end="2113:48"><name pos:start="2113:25" pos:end="2113:33"><name pos:start="2113:25" pos:end="2113:26">dc</name><operator pos:start="2113:27" pos:end="2113:28">-&gt;</operator><name pos:start="2113:29" pos:end="2113:33">cc_op</name></name> <operator pos:start="2113:35" pos:end="2113:35">=</operator> <name pos:start="2113:37" pos:end="2113:48">CC_OP_TADDTV</name></expr>;</expr_stmt>

                        <break pos:start="2115:25" pos:end="2115:30">break;</break>

                    <case pos:start="2117:21" pos:end="2117:30">case <expr pos:start="2117:26" pos:end="2117:29"><literal type="number" pos:start="2117:26" pos:end="2117:29">0x23</literal></expr>:</case> <comment type="block" pos:start="2117:32" pos:end="2117:45">/* tsubcctv */</comment>

                        <expr_stmt pos:start="2119:25" pos:end="2121:64"><expr pos:start="2119:25" pos:end="2121:63"><call pos:start="2119:25" pos:end="2121:63"><name pos:start="2119:25" pos:end="2119:43">gen_helper_tsubcctv</name><argument_list pos:start="2119:44" pos:end="2121:63">(<argument pos:start="2119:45" pos:end="2119:51"><expr pos:start="2119:45" pos:end="2119:51"><name pos:start="2119:45" pos:end="2119:51">cpu_dst</name></expr></argument>, <argument pos:start="2119:54" pos:end="2119:60"><expr pos:start="2119:54" pos:end="2119:60"><name pos:start="2119:54" pos:end="2119:60">cpu_env</name></expr></argument>,

                                            <argument pos:start="2121:45" pos:end="2121:52"><expr pos:start="2121:45" pos:end="2121:52"><name pos:start="2121:45" pos:end="2121:52">cpu_src1</name></expr></argument>, <argument pos:start="2121:55" pos:end="2121:62"><expr pos:start="2121:55" pos:end="2121:62"><name pos:start="2121:55" pos:end="2121:62">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2123:25" pos:end="2123:55"><expr pos:start="2123:25" pos:end="2123:54"><call pos:start="2123:25" pos:end="2123:54"><name pos:start="2123:25" pos:end="2123:37">gen_store_gpr</name><argument_list pos:start="2123:38" pos:end="2123:54">(<argument pos:start="2123:39" pos:end="2123:40"><expr pos:start="2123:39" pos:end="2123:40"><name pos:start="2123:39" pos:end="2123:40">dc</name></expr></argument>, <argument pos:start="2123:43" pos:end="2123:44"><expr pos:start="2123:43" pos:end="2123:44"><name pos:start="2123:43" pos:end="2123:44">rd</name></expr></argument>, <argument pos:start="2123:47" pos:end="2123:53"><expr pos:start="2123:47" pos:end="2123:53"><name pos:start="2123:47" pos:end="2123:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2125:25" pos:end="2125:49"><expr pos:start="2125:25" pos:end="2125:48"><name pos:start="2125:25" pos:end="2125:33"><name pos:start="2125:25" pos:end="2125:26">dc</name><operator pos:start="2125:27" pos:end="2125:28">-&gt;</operator><name pos:start="2125:29" pos:end="2125:33">cc_op</name></name> <operator pos:start="2125:35" pos:end="2125:35">=</operator> <name pos:start="2125:37" pos:end="2125:48">CC_OP_TSUBTV</name></expr>;</expr_stmt>

                        <break pos:start="2127:25" pos:end="2127:30">break;</break>

                    <case pos:start="2129:21" pos:end="2129:30">case <expr pos:start="2129:26" pos:end="2129:29"><literal type="number" pos:start="2129:26" pos:end="2129:29">0x24</literal></expr>:</case> <comment type="block" pos:start="2129:32" pos:end="2129:43">/* mulscc */</comment>

                        <expr_stmt pos:start="2131:25" pos:end="2131:39"><expr pos:start="2131:25" pos:end="2131:38"><call pos:start="2131:25" pos:end="2131:38"><name pos:start="2131:25" pos:end="2131:34">update_psr</name><argument_list pos:start="2131:35" pos:end="2131:38">(<argument pos:start="2131:36" pos:end="2131:37"><expr pos:start="2131:36" pos:end="2131:37"><name pos:start="2131:36" pos:end="2131:37">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2133:25" pos:end="2133:67"><expr pos:start="2133:25" pos:end="2133:66"><call pos:start="2133:25" pos:end="2133:66"><name pos:start="2133:25" pos:end="2133:37">gen_op_mulscc</name><argument_list pos:start="2133:38" pos:end="2133:66">(<argument pos:start="2133:39" pos:end="2133:45"><expr pos:start="2133:39" pos:end="2133:45"><name pos:start="2133:39" pos:end="2133:45">cpu_dst</name></expr></argument>, <argument pos:start="2133:48" pos:end="2133:55"><expr pos:start="2133:48" pos:end="2133:55"><name pos:start="2133:48" pos:end="2133:55">cpu_src1</name></expr></argument>, <argument pos:start="2133:58" pos:end="2133:65"><expr pos:start="2133:58" pos:end="2133:65"><name pos:start="2133:58" pos:end="2133:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2135:25" pos:end="2135:55"><expr pos:start="2135:25" pos:end="2135:54"><call pos:start="2135:25" pos:end="2135:54"><name pos:start="2135:25" pos:end="2135:37">gen_store_gpr</name><argument_list pos:start="2135:38" pos:end="2135:54">(<argument pos:start="2135:39" pos:end="2135:40"><expr pos:start="2135:39" pos:end="2135:40"><name pos:start="2135:39" pos:end="2135:40">dc</name></expr></argument>, <argument pos:start="2135:43" pos:end="2135:44"><expr pos:start="2135:43" pos:end="2135:44"><name pos:start="2135:43" pos:end="2135:44">rd</name></expr></argument>, <argument pos:start="2135:47" pos:end="2135:53"><expr pos:start="2135:47" pos:end="2135:53"><name pos:start="2135:47" pos:end="2135:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2137:25" pos:end="2137:63"><expr pos:start="2137:25" pos:end="2137:62"><call pos:start="2137:25" pos:end="2137:62"><name pos:start="2137:25" pos:end="2137:40">tcg_gen_movi_i32</name><argument_list pos:start="2137:41" pos:end="2137:62">(<argument pos:start="2137:42" pos:end="2137:50"><expr pos:start="2137:42" pos:end="2137:50"><name pos:start="2137:42" pos:end="2137:50">cpu_cc_op</name></expr></argument>, <argument pos:start="2137:53" pos:end="2137:61"><expr pos:start="2137:53" pos:end="2137:61"><name pos:start="2137:53" pos:end="2137:61">CC_OP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2139:25" pos:end="2139:46"><expr pos:start="2139:25" pos:end="2139:45"><name pos:start="2139:25" pos:end="2139:33"><name pos:start="2139:25" pos:end="2139:26">dc</name><operator pos:start="2139:27" pos:end="2139:28">-&gt;</operator><name pos:start="2139:29" pos:end="2139:33">cc_op</name></name> <operator pos:start="2139:35" pos:end="2139:35">=</operator> <name pos:start="2139:37" pos:end="2139:45">CC_OP_ADD</name></expr>;</expr_stmt>

                        <break pos:start="2141:25" pos:end="2144:0">break;</break>

<cpp:ifndef pos:start="2143:1" pos:end="2143:22">#<cpp:directive pos:start="2143:2" pos:end="2143:7">ifndef</cpp:directive> <name pos:start="2143:9" pos:end="2143:22">TARGET_SPARC64</name></cpp:ifndef>

                    <case pos:start="2145:21" pos:end="2145:30">case <expr pos:start="2145:26" pos:end="2145:29"><literal type="number" pos:start="2145:26" pos:end="2145:29">0x25</literal></expr>:</case>  <comment type="block" pos:start="2145:33" pos:end="2145:41">/* sll */</comment>

                        <if_stmt pos:start="2147:25" pos:end="2159:25"><if pos:start="2147:25" pos:end="2153:25">if <condition pos:start="2147:28" pos:end="2147:35">(<expr pos:start="2147:29" pos:end="2147:34"><name pos:start="2147:29" pos:end="2147:34">IS_IMM</name></expr>)</condition> <block pos:start="2147:37" pos:end="2153:25">{<block_content pos:start="2149:29" pos:end="2151:76"> <comment type="block" pos:start="2147:39" pos:end="2147:53">/* immediate */</comment>

                            <expr_stmt pos:start="2149:29" pos:end="2149:60"><expr pos:start="2149:29" pos:end="2149:59"><name pos:start="2149:29" pos:end="2149:32">simm</name> <operator pos:start="2149:34" pos:end="2149:34">=</operator> <call pos:start="2149:36" pos:end="2149:59"><name pos:start="2149:36" pos:end="2149:45">GET_FIELDs</name><argument_list pos:start="2149:46" pos:end="2149:59">(<argument pos:start="2149:47" pos:end="2149:50"><expr pos:start="2149:47" pos:end="2149:50"><name pos:start="2149:47" pos:end="2149:50">insn</name></expr></argument>, <argument pos:start="2149:53" pos:end="2149:54"><expr pos:start="2149:53" pos:end="2149:54"><literal type="number" pos:start="2149:53" pos:end="2149:54">20</literal></expr></argument>, <argument pos:start="2149:57" pos:end="2149:58"><expr pos:start="2149:57" pos:end="2149:58"><literal type="number" pos:start="2149:57" pos:end="2149:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2151:29" pos:end="2151:76"><expr pos:start="2151:29" pos:end="2151:75"><call pos:start="2151:29" pos:end="2151:75"><name pos:start="2151:29" pos:end="2151:43">tcg_gen_shli_tl</name><argument_list pos:start="2151:44" pos:end="2151:75">(<argument pos:start="2151:45" pos:end="2151:51"><expr pos:start="2151:45" pos:end="2151:51"><name pos:start="2151:45" pos:end="2151:51">cpu_dst</name></expr></argument>, <argument pos:start="2151:54" pos:end="2151:61"><expr pos:start="2151:54" pos:end="2151:61"><name pos:start="2151:54" pos:end="2151:61">cpu_src1</name></expr></argument>, <argument pos:start="2151:64" pos:end="2151:74"><expr pos:start="2151:64" pos:end="2151:74"><name pos:start="2151:64" pos:end="2151:67">simm</name> <operator pos:start="2151:69" pos:end="2151:69">&amp;</operator> <literal type="number" pos:start="2151:71" pos:end="2151:74">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2153:27" pos:end="2159:25">else <block pos:start="2153:32" pos:end="2159:25">{<block_content pos:start="2155:29" pos:end="2157:72"> <comment type="block" pos:start="2153:34" pos:end="2153:47">/* register */</comment>

                            <expr_stmt pos:start="2155:29" pos:end="2155:70"><expr pos:start="2155:29" pos:end="2155:69"><call pos:start="2155:29" pos:end="2155:69"><name pos:start="2155:29" pos:end="2155:43">tcg_gen_andi_tl</name><argument_list pos:start="2155:44" pos:end="2155:69">(<argument pos:start="2155:45" pos:end="2155:52"><expr pos:start="2155:45" pos:end="2155:52"><name pos:start="2155:45" pos:end="2155:52">cpu_tmp0</name></expr></argument>, <argument pos:start="2155:55" pos:end="2155:62"><expr pos:start="2155:55" pos:end="2155:62"><name pos:start="2155:55" pos:end="2155:62">cpu_src2</name></expr></argument>, <argument pos:start="2155:65" pos:end="2155:68"><expr pos:start="2155:65" pos:end="2155:68"><literal type="number" pos:start="2155:65" pos:end="2155:68">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2157:29" pos:end="2157:72"><expr pos:start="2157:29" pos:end="2157:71"><call pos:start="2157:29" pos:end="2157:71"><name pos:start="2157:29" pos:end="2157:42">tcg_gen_shl_tl</name><argument_list pos:start="2157:43" pos:end="2157:71">(<argument pos:start="2157:44" pos:end="2157:50"><expr pos:start="2157:44" pos:end="2157:50"><name pos:start="2157:44" pos:end="2157:50">cpu_dst</name></expr></argument>, <argument pos:start="2157:53" pos:end="2157:60"><expr pos:start="2157:53" pos:end="2157:60"><name pos:start="2157:53" pos:end="2157:60">cpu_src1</name></expr></argument>, <argument pos:start="2157:63" pos:end="2157:70"><expr pos:start="2157:63" pos:end="2157:70"><name pos:start="2157:63" pos:end="2157:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2161:25" pos:end="2161:55"><expr pos:start="2161:25" pos:end="2161:54"><call pos:start="2161:25" pos:end="2161:54"><name pos:start="2161:25" pos:end="2161:37">gen_store_gpr</name><argument_list pos:start="2161:38" pos:end="2161:54">(<argument pos:start="2161:39" pos:end="2161:40"><expr pos:start="2161:39" pos:end="2161:40"><name pos:start="2161:39" pos:end="2161:40">dc</name></expr></argument>, <argument pos:start="2161:43" pos:end="2161:44"><expr pos:start="2161:43" pos:end="2161:44"><name pos:start="2161:43" pos:end="2161:44">rd</name></expr></argument>, <argument pos:start="2161:47" pos:end="2161:53"><expr pos:start="2161:47" pos:end="2161:53"><name pos:start="2161:47" pos:end="2161:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2163:25" pos:end="2163:30">break;</break>

                    <case pos:start="2165:21" pos:end="2165:30">case <expr pos:start="2165:26" pos:end="2165:29"><literal type="number" pos:start="2165:26" pos:end="2165:29">0x26</literal></expr>:</case>  <comment type="block" pos:start="2165:33" pos:end="2165:41">/* srl */</comment>

                        <if_stmt pos:start="2167:25" pos:end="2179:25"><if pos:start="2167:25" pos:end="2173:25">if <condition pos:start="2167:28" pos:end="2167:35">(<expr pos:start="2167:29" pos:end="2167:34"><name pos:start="2167:29" pos:end="2167:34">IS_IMM</name></expr>)</condition> <block pos:start="2167:37" pos:end="2173:25">{<block_content pos:start="2169:29" pos:end="2171:76"> <comment type="block" pos:start="2167:39" pos:end="2167:53">/* immediate */</comment>

                            <expr_stmt pos:start="2169:29" pos:end="2169:60"><expr pos:start="2169:29" pos:end="2169:59"><name pos:start="2169:29" pos:end="2169:32">simm</name> <operator pos:start="2169:34" pos:end="2169:34">=</operator> <call pos:start="2169:36" pos:end="2169:59"><name pos:start="2169:36" pos:end="2169:45">GET_FIELDs</name><argument_list pos:start="2169:46" pos:end="2169:59">(<argument pos:start="2169:47" pos:end="2169:50"><expr pos:start="2169:47" pos:end="2169:50"><name pos:start="2169:47" pos:end="2169:50">insn</name></expr></argument>, <argument pos:start="2169:53" pos:end="2169:54"><expr pos:start="2169:53" pos:end="2169:54"><literal type="number" pos:start="2169:53" pos:end="2169:54">20</literal></expr></argument>, <argument pos:start="2169:57" pos:end="2169:58"><expr pos:start="2169:57" pos:end="2169:58"><literal type="number" pos:start="2169:57" pos:end="2169:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2171:29" pos:end="2171:76"><expr pos:start="2171:29" pos:end="2171:75"><call pos:start="2171:29" pos:end="2171:75"><name pos:start="2171:29" pos:end="2171:43">tcg_gen_shri_tl</name><argument_list pos:start="2171:44" pos:end="2171:75">(<argument pos:start="2171:45" pos:end="2171:51"><expr pos:start="2171:45" pos:end="2171:51"><name pos:start="2171:45" pos:end="2171:51">cpu_dst</name></expr></argument>, <argument pos:start="2171:54" pos:end="2171:61"><expr pos:start="2171:54" pos:end="2171:61"><name pos:start="2171:54" pos:end="2171:61">cpu_src1</name></expr></argument>, <argument pos:start="2171:64" pos:end="2171:74"><expr pos:start="2171:64" pos:end="2171:74"><name pos:start="2171:64" pos:end="2171:67">simm</name> <operator pos:start="2171:69" pos:end="2171:69">&amp;</operator> <literal type="number" pos:start="2171:71" pos:end="2171:74">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2173:27" pos:end="2179:25">else <block pos:start="2173:32" pos:end="2179:25">{<block_content pos:start="2175:29" pos:end="2177:72"> <comment type="block" pos:start="2173:34" pos:end="2173:47">/* register */</comment>

                            <expr_stmt pos:start="2175:29" pos:end="2175:70"><expr pos:start="2175:29" pos:end="2175:69"><call pos:start="2175:29" pos:end="2175:69"><name pos:start="2175:29" pos:end="2175:43">tcg_gen_andi_tl</name><argument_list pos:start="2175:44" pos:end="2175:69">(<argument pos:start="2175:45" pos:end="2175:52"><expr pos:start="2175:45" pos:end="2175:52"><name pos:start="2175:45" pos:end="2175:52">cpu_tmp0</name></expr></argument>, <argument pos:start="2175:55" pos:end="2175:62"><expr pos:start="2175:55" pos:end="2175:62"><name pos:start="2175:55" pos:end="2175:62">cpu_src2</name></expr></argument>, <argument pos:start="2175:65" pos:end="2175:68"><expr pos:start="2175:65" pos:end="2175:68"><literal type="number" pos:start="2175:65" pos:end="2175:68">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2177:29" pos:end="2177:72"><expr pos:start="2177:29" pos:end="2177:71"><call pos:start="2177:29" pos:end="2177:71"><name pos:start="2177:29" pos:end="2177:42">tcg_gen_shr_tl</name><argument_list pos:start="2177:43" pos:end="2177:71">(<argument pos:start="2177:44" pos:end="2177:50"><expr pos:start="2177:44" pos:end="2177:50"><name pos:start="2177:44" pos:end="2177:50">cpu_dst</name></expr></argument>, <argument pos:start="2177:53" pos:end="2177:60"><expr pos:start="2177:53" pos:end="2177:60"><name pos:start="2177:53" pos:end="2177:60">cpu_src1</name></expr></argument>, <argument pos:start="2177:63" pos:end="2177:70"><expr pos:start="2177:63" pos:end="2177:70"><name pos:start="2177:63" pos:end="2177:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2181:25" pos:end="2181:55"><expr pos:start="2181:25" pos:end="2181:54"><call pos:start="2181:25" pos:end="2181:54"><name pos:start="2181:25" pos:end="2181:37">gen_store_gpr</name><argument_list pos:start="2181:38" pos:end="2181:54">(<argument pos:start="2181:39" pos:end="2181:40"><expr pos:start="2181:39" pos:end="2181:40"><name pos:start="2181:39" pos:end="2181:40">dc</name></expr></argument>, <argument pos:start="2181:43" pos:end="2181:44"><expr pos:start="2181:43" pos:end="2181:44"><name pos:start="2181:43" pos:end="2181:44">rd</name></expr></argument>, <argument pos:start="2181:47" pos:end="2181:53"><expr pos:start="2181:47" pos:end="2181:53"><name pos:start="2181:47" pos:end="2181:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2183:25" pos:end="2183:30">break;</break>

                    <case pos:start="2185:21" pos:end="2185:30">case <expr pos:start="2185:26" pos:end="2185:29"><literal type="number" pos:start="2185:26" pos:end="2185:29">0x27</literal></expr>:</case>  <comment type="block" pos:start="2185:33" pos:end="2185:41">/* sra */</comment>

                        <if_stmt pos:start="2187:25" pos:end="2199:25"><if pos:start="2187:25" pos:end="2193:25">if <condition pos:start="2187:28" pos:end="2187:35">(<expr pos:start="2187:29" pos:end="2187:34"><name pos:start="2187:29" pos:end="2187:34">IS_IMM</name></expr>)</condition> <block pos:start="2187:37" pos:end="2193:25">{<block_content pos:start="2189:29" pos:end="2191:76"> <comment type="block" pos:start="2187:39" pos:end="2187:53">/* immediate */</comment>

                            <expr_stmt pos:start="2189:29" pos:end="2189:60"><expr pos:start="2189:29" pos:end="2189:59"><name pos:start="2189:29" pos:end="2189:32">simm</name> <operator pos:start="2189:34" pos:end="2189:34">=</operator> <call pos:start="2189:36" pos:end="2189:59"><name pos:start="2189:36" pos:end="2189:45">GET_FIELDs</name><argument_list pos:start="2189:46" pos:end="2189:59">(<argument pos:start="2189:47" pos:end="2189:50"><expr pos:start="2189:47" pos:end="2189:50"><name pos:start="2189:47" pos:end="2189:50">insn</name></expr></argument>, <argument pos:start="2189:53" pos:end="2189:54"><expr pos:start="2189:53" pos:end="2189:54"><literal type="number" pos:start="2189:53" pos:end="2189:54">20</literal></expr></argument>, <argument pos:start="2189:57" pos:end="2189:58"><expr pos:start="2189:57" pos:end="2189:58"><literal type="number" pos:start="2189:57" pos:end="2189:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2191:29" pos:end="2191:76"><expr pos:start="2191:29" pos:end="2191:75"><call pos:start="2191:29" pos:end="2191:75"><name pos:start="2191:29" pos:end="2191:43">tcg_gen_sari_tl</name><argument_list pos:start="2191:44" pos:end="2191:75">(<argument pos:start="2191:45" pos:end="2191:51"><expr pos:start="2191:45" pos:end="2191:51"><name pos:start="2191:45" pos:end="2191:51">cpu_dst</name></expr></argument>, <argument pos:start="2191:54" pos:end="2191:61"><expr pos:start="2191:54" pos:end="2191:61"><name pos:start="2191:54" pos:end="2191:61">cpu_src1</name></expr></argument>, <argument pos:start="2191:64" pos:end="2191:74"><expr pos:start="2191:64" pos:end="2191:74"><name pos:start="2191:64" pos:end="2191:67">simm</name> <operator pos:start="2191:69" pos:end="2191:69">&amp;</operator> <literal type="number" pos:start="2191:71" pos:end="2191:74">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2193:27" pos:end="2199:25">else <block pos:start="2193:32" pos:end="2199:25">{<block_content pos:start="2195:29" pos:end="2197:72"> <comment type="block" pos:start="2193:34" pos:end="2193:47">/* register */</comment>

                            <expr_stmt pos:start="2195:29" pos:end="2195:70"><expr pos:start="2195:29" pos:end="2195:69"><call pos:start="2195:29" pos:end="2195:69"><name pos:start="2195:29" pos:end="2195:43">tcg_gen_andi_tl</name><argument_list pos:start="2195:44" pos:end="2195:69">(<argument pos:start="2195:45" pos:end="2195:52"><expr pos:start="2195:45" pos:end="2195:52"><name pos:start="2195:45" pos:end="2195:52">cpu_tmp0</name></expr></argument>, <argument pos:start="2195:55" pos:end="2195:62"><expr pos:start="2195:55" pos:end="2195:62"><name pos:start="2195:55" pos:end="2195:62">cpu_src2</name></expr></argument>, <argument pos:start="2195:65" pos:end="2195:68"><expr pos:start="2195:65" pos:end="2195:68"><literal type="number" pos:start="2195:65" pos:end="2195:68">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2197:29" pos:end="2197:72"><expr pos:start="2197:29" pos:end="2197:71"><call pos:start="2197:29" pos:end="2197:71"><name pos:start="2197:29" pos:end="2197:42">tcg_gen_sar_tl</name><argument_list pos:start="2197:43" pos:end="2197:71">(<argument pos:start="2197:44" pos:end="2197:50"><expr pos:start="2197:44" pos:end="2197:50"><name pos:start="2197:44" pos:end="2197:50">cpu_dst</name></expr></argument>, <argument pos:start="2197:53" pos:end="2197:60"><expr pos:start="2197:53" pos:end="2197:60"><name pos:start="2197:53" pos:end="2197:60">cpu_src1</name></expr></argument>, <argument pos:start="2197:63" pos:end="2197:70"><expr pos:start="2197:63" pos:end="2197:70"><name pos:start="2197:63" pos:end="2197:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2201:25" pos:end="2201:55"><expr pos:start="2201:25" pos:end="2201:54"><call pos:start="2201:25" pos:end="2201:54"><name pos:start="2201:25" pos:end="2201:37">gen_store_gpr</name><argument_list pos:start="2201:38" pos:end="2201:54">(<argument pos:start="2201:39" pos:end="2201:40"><expr pos:start="2201:39" pos:end="2201:40"><name pos:start="2201:39" pos:end="2201:40">dc</name></expr></argument>, <argument pos:start="2201:43" pos:end="2201:44"><expr pos:start="2201:43" pos:end="2201:44"><name pos:start="2201:43" pos:end="2201:44">rd</name></expr></argument>, <argument pos:start="2201:47" pos:end="2201:53"><expr pos:start="2201:47" pos:end="2201:53"><name pos:start="2201:47" pos:end="2201:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2203:25" pos:end="2206:0">break;</break>

<cpp:endif pos:start="2205:1" pos:end="2205:6">#<cpp:directive pos:start="2205:2" pos:end="2205:6">endif</cpp:directive></cpp:endif>

                    <case pos:start="2207:21" pos:end="2207:30">case <expr pos:start="2207:26" pos:end="2207:29"><literal type="number" pos:start="2207:26" pos:end="2207:29">0x30</literal></expr>:</case>

                        <block pos:start="2209:25" pos:end="2469:25">{<block_content pos:start="2211:29" pos:end="2467:29">

                            <switch pos:start="2211:29" pos:end="2467:29">switch<condition pos:start="2211:35" pos:end="2211:38">(<expr pos:start="2211:36" pos:end="2211:37"><name pos:start="2211:36" pos:end="2211:37">rd</name></expr>)</condition> <block pos:start="2211:40" pos:end="2467:29">{<block_content pos:start="2213:29" pos:end="2465:50">

                            <case pos:start="2213:29" pos:end="2213:35">case <expr pos:start="2213:34" pos:end="2213:34"><literal type="number" pos:start="2213:34" pos:end="2213:34">0</literal></expr>:</case> <comment type="block" pos:start="2213:37" pos:end="2213:45">/* wry */</comment>

                                <expr_stmt pos:start="2215:33" pos:end="2215:77"><expr pos:start="2215:33" pos:end="2215:76"><call pos:start="2215:33" pos:end="2215:76"><name pos:start="2215:33" pos:end="2215:46">tcg_gen_xor_tl</name><argument_list pos:start="2215:47" pos:end="2215:76">(<argument pos:start="2215:48" pos:end="2215:55"><expr pos:start="2215:48" pos:end="2215:55"><name pos:start="2215:48" pos:end="2215:55">cpu_tmp0</name></expr></argument>, <argument pos:start="2215:58" pos:end="2215:65"><expr pos:start="2215:58" pos:end="2215:65"><name pos:start="2215:58" pos:end="2215:65">cpu_src1</name></expr></argument>, <argument pos:start="2215:68" pos:end="2215:75"><expr pos:start="2215:68" pos:end="2215:75"><name pos:start="2215:68" pos:end="2215:75">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2217:33" pos:end="2217:77"><expr pos:start="2217:33" pos:end="2217:76"><call pos:start="2217:33" pos:end="2217:76"><name pos:start="2217:33" pos:end="2217:47">tcg_gen_andi_tl</name><argument_list pos:start="2217:48" pos:end="2217:76">(<argument pos:start="2217:49" pos:end="2217:53"><expr pos:start="2217:49" pos:end="2217:53"><name pos:start="2217:49" pos:end="2217:53">cpu_y</name></expr></argument>, <argument pos:start="2217:56" pos:end="2217:63"><expr pos:start="2217:56" pos:end="2217:63"><name pos:start="2217:56" pos:end="2217:63">cpu_tmp0</name></expr></argument>, <argument pos:start="2217:66" pos:end="2217:75"><expr pos:start="2217:66" pos:end="2217:75"><literal type="number" pos:start="2217:66" pos:end="2217:75">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2219:33" pos:end="2222:0">break;</break>

<cpp:ifndef pos:start="2221:1" pos:end="2221:22">#<cpp:directive pos:start="2221:2" pos:end="2221:7">ifndef</cpp:directive> <name pos:start="2221:9" pos:end="2221:22">TARGET_SPARC64</name></cpp:ifndef>

                            <case pos:start="2223:29" pos:end="2223:47">case <expr pos:start="2223:34" pos:end="2223:46"><literal type="number" pos:start="2223:34" pos:end="2223:37">0x01</literal> <operator pos:start="2223:39" pos:end="2223:41">...</operator> <literal type="number" pos:start="2223:43" pos:end="2223:46">0x0f</literal></expr>:</case> <comment type="block" pos:start="2223:49" pos:end="2229:56">/* undefined in the

                                                   SPARCv8 manual, nop

                                                   on the microSPARC

                                                   II */</comment>

                            <case pos:start="2231:29" pos:end="2231:47">case <expr pos:start="2231:34" pos:end="2231:46"><literal type="number" pos:start="2231:34" pos:end="2231:37">0x10</literal> <operator pos:start="2231:39" pos:end="2231:41">...</operator> <literal type="number" pos:start="2231:43" pos:end="2231:46">0x1f</literal></expr>:</case> <comment type="block" pos:start="2231:49" pos:end="2237:67">/* implementation-dependent

                                                   in the SPARCv8

                                                   manual, nop on the

                                                   microSPARC II */</comment>

                                <break pos:start="2239:33" pos:end="2242:0">break;</break>

<cpp:else pos:start="2241:1" pos:end="2241:5">#<cpp:directive pos:start="2241:2" pos:end="2241:5">else</cpp:directive></cpp:else>

                            <case pos:start="2243:29" pos:end="2243:37">case <expr pos:start="2243:34" pos:end="2243:36"><literal type="number" pos:start="2243:34" pos:end="2243:36">0x2</literal></expr>:</case> <comment type="block" pos:start="2243:39" pos:end="2243:52">/* V9 wrccr */</comment>

                                <expr_stmt pos:start="2245:33" pos:end="2245:77"><expr pos:start="2245:33" pos:end="2245:76"><call pos:start="2245:33" pos:end="2245:76"><name pos:start="2245:33" pos:end="2245:46">tcg_gen_xor_tl</name><argument_list pos:start="2245:47" pos:end="2245:76">(<argument pos:start="2245:48" pos:end="2245:55"><expr pos:start="2245:48" pos:end="2245:55"><name pos:start="2245:48" pos:end="2245:55">cpu_tmp0</name></expr></argument>, <argument pos:start="2245:58" pos:end="2245:65"><expr pos:start="2245:58" pos:end="2245:65"><name pos:start="2245:58" pos:end="2245:65">cpu_src1</name></expr></argument>, <argument pos:start="2245:68" pos:end="2245:75"><expr pos:start="2245:68" pos:end="2245:75"><name pos:start="2245:68" pos:end="2245:75">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2247:33" pos:end="2247:68"><expr pos:start="2247:33" pos:end="2247:67"><call pos:start="2247:33" pos:end="2247:67"><name pos:start="2247:33" pos:end="2247:48">gen_helper_wrccr</name><argument_list pos:start="2247:49" pos:end="2247:67">(<argument pos:start="2247:50" pos:end="2247:56"><expr pos:start="2247:50" pos:end="2247:56"><name pos:start="2247:50" pos:end="2247:56">cpu_env</name></expr></argument>, <argument pos:start="2247:59" pos:end="2247:66"><expr pos:start="2247:59" pos:end="2247:66"><name pos:start="2247:59" pos:end="2247:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2249:33" pos:end="2249:73"><expr pos:start="2249:33" pos:end="2249:72"><call pos:start="2249:33" pos:end="2249:72"><name pos:start="2249:33" pos:end="2249:48">tcg_gen_movi_i32</name><argument_list pos:start="2249:49" pos:end="2249:72">(<argument pos:start="2249:50" pos:end="2249:58"><expr pos:start="2249:50" pos:end="2249:58"><name pos:start="2249:50" pos:end="2249:58">cpu_cc_op</name></expr></argument>, <argument pos:start="2249:61" pos:end="2249:71"><expr pos:start="2249:61" pos:end="2249:71"><name pos:start="2249:61" pos:end="2249:71">CC_OP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2251:33" pos:end="2251:56"><expr pos:start="2251:33" pos:end="2251:55"><name pos:start="2251:33" pos:end="2251:41"><name pos:start="2251:33" pos:end="2251:34">dc</name><operator pos:start="2251:35" pos:end="2251:36">-&gt;</operator><name pos:start="2251:37" pos:end="2251:41">cc_op</name></name> <operator pos:start="2251:43" pos:end="2251:43">=</operator> <name pos:start="2251:45" pos:end="2251:55">CC_OP_FLAGS</name></expr>;</expr_stmt>

                                <break pos:start="2253:33" pos:end="2253:38">break;</break>

                            <case pos:start="2255:29" pos:end="2255:37">case <expr pos:start="2255:34" pos:end="2255:36"><literal type="number" pos:start="2255:34" pos:end="2255:36">0x3</literal></expr>:</case> <comment type="block" pos:start="2255:39" pos:end="2255:52">/* V9 wrasi */</comment>

                                <expr_stmt pos:start="2257:33" pos:end="2257:77"><expr pos:start="2257:33" pos:end="2257:76"><call pos:start="2257:33" pos:end="2257:76"><name pos:start="2257:33" pos:end="2257:46">tcg_gen_xor_tl</name><argument_list pos:start="2257:47" pos:end="2257:76">(<argument pos:start="2257:48" pos:end="2257:55"><expr pos:start="2257:48" pos:end="2257:55"><name pos:start="2257:48" pos:end="2257:55">cpu_tmp0</name></expr></argument>, <argument pos:start="2257:58" pos:end="2257:65"><expr pos:start="2257:58" pos:end="2257:65"><name pos:start="2257:58" pos:end="2257:65">cpu_src1</name></expr></argument>, <argument pos:start="2257:68" pos:end="2257:75"><expr pos:start="2257:68" pos:end="2257:75"><name pos:start="2257:68" pos:end="2257:75">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2259:33" pos:end="2259:74"><expr pos:start="2259:33" pos:end="2259:73"><call pos:start="2259:33" pos:end="2259:73"><name pos:start="2259:33" pos:end="2259:47">tcg_gen_andi_tl</name><argument_list pos:start="2259:48" pos:end="2259:73">(<argument pos:start="2259:49" pos:end="2259:56"><expr pos:start="2259:49" pos:end="2259:56"><name pos:start="2259:49" pos:end="2259:56">cpu_tmp0</name></expr></argument>, <argument pos:start="2259:59" pos:end="2259:66"><expr pos:start="2259:59" pos:end="2259:66"><name pos:start="2259:59" pos:end="2259:66">cpu_tmp0</name></expr></argument>, <argument pos:start="2259:69" pos:end="2259:72"><expr pos:start="2259:69" pos:end="2259:72"><literal type="number" pos:start="2259:69" pos:end="2259:72">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2261:33" pos:end="2261:72"><expr pos:start="2261:33" pos:end="2261:71"><call pos:start="2261:33" pos:end="2261:71"><name pos:start="2261:33" pos:end="2261:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2261:53" pos:end="2261:71">(<argument pos:start="2261:54" pos:end="2261:60"><expr pos:start="2261:54" pos:end="2261:60"><name pos:start="2261:54" pos:end="2261:60">cpu_asi</name></expr></argument>, <argument pos:start="2261:63" pos:end="2261:70"><expr pos:start="2261:63" pos:end="2261:70"><name pos:start="2261:63" pos:end="2261:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2263:33" pos:end="2263:38">break;</break>

                            <case pos:start="2265:29" pos:end="2265:37">case <expr pos:start="2265:34" pos:end="2265:36"><literal type="number" pos:start="2265:34" pos:end="2265:36">0x6</literal></expr>:</case> <comment type="block" pos:start="2265:39" pos:end="2265:53">/* V9 wrfprs */</comment>

                                <expr_stmt pos:start="2267:33" pos:end="2267:77"><expr pos:start="2267:33" pos:end="2267:76"><call pos:start="2267:33" pos:end="2267:76"><name pos:start="2267:33" pos:end="2267:46">tcg_gen_xor_tl</name><argument_list pos:start="2267:47" pos:end="2267:76">(<argument pos:start="2267:48" pos:end="2267:55"><expr pos:start="2267:48" pos:end="2267:55"><name pos:start="2267:48" pos:end="2267:55">cpu_tmp0</name></expr></argument>, <argument pos:start="2267:58" pos:end="2267:65"><expr pos:start="2267:58" pos:end="2267:65"><name pos:start="2267:58" pos:end="2267:65">cpu_src1</name></expr></argument>, <argument pos:start="2267:68" pos:end="2267:75"><expr pos:start="2267:68" pos:end="2267:75"><name pos:start="2267:68" pos:end="2267:75">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2269:33" pos:end="2269:73"><expr pos:start="2269:33" pos:end="2269:72"><call pos:start="2269:33" pos:end="2269:72"><name pos:start="2269:33" pos:end="2269:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2269:53" pos:end="2269:72">(<argument pos:start="2269:54" pos:end="2269:61"><expr pos:start="2269:54" pos:end="2269:61"><name pos:start="2269:54" pos:end="2269:61">cpu_fprs</name></expr></argument>, <argument pos:start="2269:64" pos:end="2269:71"><expr pos:start="2269:64" pos:end="2269:71"><name pos:start="2269:64" pos:end="2269:71">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2271:33" pos:end="2271:47"><expr pos:start="2271:33" pos:end="2271:46"><call pos:start="2271:33" pos:end="2271:46"><name pos:start="2271:33" pos:end="2271:42">save_state</name><argument_list pos:start="2271:43" pos:end="2271:46">(<argument pos:start="2271:44" pos:end="2271:45"><expr pos:start="2271:44" pos:end="2271:45"><name pos:start="2271:44" pos:end="2271:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2273:33" pos:end="2273:51"><expr pos:start="2273:33" pos:end="2273:50"><call pos:start="2273:33" pos:end="2273:50"><name pos:start="2273:33" pos:end="2273:48">gen_op_next_insn</name><argument_list pos:start="2273:49" pos:end="2273:50">()</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2275:33" pos:end="2275:51"><expr pos:start="2275:33" pos:end="2275:50"><call pos:start="2275:33" pos:end="2275:50"><name pos:start="2275:33" pos:end="2275:47">tcg_gen_exit_tb</name><argument_list pos:start="2275:48" pos:end="2275:50">(<argument pos:start="2275:49" pos:end="2275:49"><expr pos:start="2275:49" pos:end="2275:49"><literal type="number" pos:start="2275:49" pos:end="2275:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2277:33" pos:end="2277:46"><expr pos:start="2277:33" pos:end="2277:45"><name pos:start="2277:33" pos:end="2277:41"><name pos:start="2277:33" pos:end="2277:34">dc</name><operator pos:start="2277:35" pos:end="2277:36">-&gt;</operator><name pos:start="2277:37" pos:end="2277:41">is_br</name></name> <operator pos:start="2277:43" pos:end="2277:43">=</operator> <literal type="number" pos:start="2277:45" pos:end="2277:45">1</literal></expr>;</expr_stmt>

                                <break pos:start="2279:33" pos:end="2279:38">break;</break>

                            <case pos:start="2281:29" pos:end="2284:0">case <expr pos:start="2281:34" pos:end="2281:36"><literal type="number" pos:start="2281:34" pos:end="2281:36">0xf</literal></expr>:</case> <comment type="block" pos:start="2281:39" pos:end="2281:63">/* V9 sir, nop if user */</comment>

<cpp:if pos:start="2283:1" pos:end="2283:30">#<cpp:directive pos:start="2283:2" pos:end="2283:3">if</cpp:directive> <expr pos:start="2283:5" pos:end="2283:30"><operator pos:start="2283:5" pos:end="2283:5">!</operator><call pos:start="2283:6" pos:end="2283:30"><name pos:start="2283:6" pos:end="2283:12">defined</name><argument_list pos:start="2283:13" pos:end="2283:30">(<argument pos:start="2283:14" pos:end="2283:29"><expr pos:start="2283:14" pos:end="2283:29"><name pos:start="2283:14" pos:end="2283:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                                <if_stmt pos:start="2285:33" pos:end="2292:0"><if pos:start="2285:33" pos:end="2292:0">if <condition pos:start="2285:36" pos:end="2285:51">(<expr pos:start="2285:37" pos:end="2285:50"><call pos:start="2285:37" pos:end="2285:50"><name pos:start="2285:37" pos:end="2285:46">supervisor</name><argument_list pos:start="2285:47" pos:end="2285:50">(<argument pos:start="2285:48" pos:end="2285:49"><expr pos:start="2285:48" pos:end="2285:49"><name pos:start="2285:48" pos:end="2285:49">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2285:53" pos:end="2292:0">{<block_content pos:start="2287:37" pos:end="2287:37">

                                    <empty_stmt pos:start="2287:37" pos:end="2287:37">;</empty_stmt> <comment type="line" pos:start="2287:39" pos:end="2287:44">// XXX</comment>

                                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="2291:1" pos:end="2291:6">#<cpp:directive pos:start="2291:2" pos:end="2291:6">endif</cpp:directive></cpp:endif>

                                <break pos:start="2293:33" pos:end="2293:38">break;</break>

                            <case pos:start="2295:29" pos:end="2295:38">case <expr pos:start="2295:34" pos:end="2295:37"><literal type="number" pos:start="2295:34" pos:end="2295:37">0x13</literal></expr>:</case> <comment type="block" pos:start="2295:40" pos:end="2295:60">/* Graphics Status */</comment>

                                <if_stmt pos:start="2297:33" pos:end="2301:33"><if pos:start="2297:33" pos:end="2301:33">if <condition pos:start="2297:36" pos:end="2297:57">(<expr pos:start="2297:37" pos:end="2297:56"><call pos:start="2297:37" pos:end="2297:56"><name pos:start="2297:37" pos:end="2297:52">gen_trap_ifnofpu</name><argument_list pos:start="2297:53" pos:end="2297:56">(<argument pos:start="2297:54" pos:end="2297:55"><expr pos:start="2297:54" pos:end="2297:55"><name pos:start="2297:54" pos:end="2297:55">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2297:59" pos:end="2301:33">{<block_content pos:start="2299:37" pos:end="2299:50">

                                    <goto pos:start="2299:37" pos:end="2299:50">goto <name pos:start="2299:42" pos:end="2299:49">jmp_insn</name>;</goto>

                                </block_content>}</block></if></if_stmt>

                                <expr_stmt pos:start="2303:33" pos:end="2303:76"><expr pos:start="2303:33" pos:end="2303:75"><call pos:start="2303:33" pos:end="2303:75"><name pos:start="2303:33" pos:end="2303:46">tcg_gen_xor_tl</name><argument_list pos:start="2303:47" pos:end="2303:75">(<argument pos:start="2303:48" pos:end="2303:54"><expr pos:start="2303:48" pos:end="2303:54"><name pos:start="2303:48" pos:end="2303:54">cpu_gsr</name></expr></argument>, <argument pos:start="2303:57" pos:end="2303:64"><expr pos:start="2303:57" pos:end="2303:64"><name pos:start="2303:57" pos:end="2303:64">cpu_src1</name></expr></argument>, <argument pos:start="2303:67" pos:end="2303:74"><expr pos:start="2303:67" pos:end="2303:74"><name pos:start="2303:67" pos:end="2303:74">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2305:33" pos:end="2305:38">break;</break>

                            <case pos:start="2307:29" pos:end="2307:38">case <expr pos:start="2307:34" pos:end="2307:37"><literal type="number" pos:start="2307:34" pos:end="2307:37">0x14</literal></expr>:</case> <comment type="block" pos:start="2307:40" pos:end="2307:56">/* Softint set */</comment>

                                <if_stmt pos:start="2309:33" pos:end="2311:54"><if pos:start="2309:33" pos:end="2311:54">if <condition pos:start="2309:36" pos:end="2309:52">(<expr pos:start="2309:37" pos:end="2309:51"><operator pos:start="2309:37" pos:end="2309:37">!</operator><call pos:start="2309:38" pos:end="2309:51"><name pos:start="2309:38" pos:end="2309:47">supervisor</name><argument_list pos:start="2309:48" pos:end="2309:51">(<argument pos:start="2309:49" pos:end="2309:50"><expr pos:start="2309:49" pos:end="2309:50"><name pos:start="2309:49" pos:end="2309:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2311:37" pos:end="2311:54"><block_content pos:start="2311:37" pos:end="2311:54">

                                    <goto pos:start="2311:37" pos:end="2311:54">goto <name pos:start="2311:42" pos:end="2311:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="2313:33" pos:end="2313:77"><expr pos:start="2313:33" pos:end="2313:76"><call pos:start="2313:33" pos:end="2313:76"><name pos:start="2313:33" pos:end="2313:46">tcg_gen_xor_tl</name><argument_list pos:start="2313:47" pos:end="2313:76">(<argument pos:start="2313:48" pos:end="2313:55"><expr pos:start="2313:48" pos:end="2313:55"><name pos:start="2313:48" pos:end="2313:55">cpu_tmp0</name></expr></argument>, <argument pos:start="2313:58" pos:end="2313:65"><expr pos:start="2313:58" pos:end="2313:65"><name pos:start="2313:58" pos:end="2313:65">cpu_src1</name></expr></argument>, <argument pos:start="2313:68" pos:end="2313:75"><expr pos:start="2313:68" pos:end="2313:75"><name pos:start="2313:68" pos:end="2313:75">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2315:33" pos:end="2315:74"><expr pos:start="2315:33" pos:end="2315:73"><call pos:start="2315:33" pos:end="2315:73"><name pos:start="2315:33" pos:end="2315:54">gen_helper_set_softint</name><argument_list pos:start="2315:55" pos:end="2315:73">(<argument pos:start="2315:56" pos:end="2315:62"><expr pos:start="2315:56" pos:end="2315:62"><name pos:start="2315:56" pos:end="2315:62">cpu_env</name></expr></argument>, <argument pos:start="2315:65" pos:end="2315:72"><expr pos:start="2315:65" pos:end="2315:72"><name pos:start="2315:65" pos:end="2315:72">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2317:33" pos:end="2317:38">break;</break>

                            <case pos:start="2319:29" pos:end="2319:38">case <expr pos:start="2319:34" pos:end="2319:37"><literal type="number" pos:start="2319:34" pos:end="2319:37">0x15</literal></expr>:</case> <comment type="block" pos:start="2319:40" pos:end="2319:58">/* Softint clear */</comment>

                                <if_stmt pos:start="2321:33" pos:end="2323:54"><if pos:start="2321:33" pos:end="2323:54">if <condition pos:start="2321:36" pos:end="2321:52">(<expr pos:start="2321:37" pos:end="2321:51"><operator pos:start="2321:37" pos:end="2321:37">!</operator><call pos:start="2321:38" pos:end="2321:51"><name pos:start="2321:38" pos:end="2321:47">supervisor</name><argument_list pos:start="2321:48" pos:end="2321:51">(<argument pos:start="2321:49" pos:end="2321:50"><expr pos:start="2321:49" pos:end="2321:50"><name pos:start="2321:49" pos:end="2321:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2323:37" pos:end="2323:54"><block_content pos:start="2323:37" pos:end="2323:54">

                                    <goto pos:start="2323:37" pos:end="2323:54">goto <name pos:start="2323:42" pos:end="2323:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="2325:33" pos:end="2325:77"><expr pos:start="2325:33" pos:end="2325:76"><call pos:start="2325:33" pos:end="2325:76"><name pos:start="2325:33" pos:end="2325:46">tcg_gen_xor_tl</name><argument_list pos:start="2325:47" pos:end="2325:76">(<argument pos:start="2325:48" pos:end="2325:55"><expr pos:start="2325:48" pos:end="2325:55"><name pos:start="2325:48" pos:end="2325:55">cpu_tmp0</name></expr></argument>, <argument pos:start="2325:58" pos:end="2325:65"><expr pos:start="2325:58" pos:end="2325:65"><name pos:start="2325:58" pos:end="2325:65">cpu_src1</name></expr></argument>, <argument pos:start="2325:68" pos:end="2325:75"><expr pos:start="2325:68" pos:end="2325:75"><name pos:start="2325:68" pos:end="2325:75">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2327:33" pos:end="2327:76"><expr pos:start="2327:33" pos:end="2327:75"><call pos:start="2327:33" pos:end="2327:75"><name pos:start="2327:33" pos:end="2327:56">gen_helper_clear_softint</name><argument_list pos:start="2327:57" pos:end="2327:75">(<argument pos:start="2327:58" pos:end="2327:64"><expr pos:start="2327:58" pos:end="2327:64"><name pos:start="2327:58" pos:end="2327:64">cpu_env</name></expr></argument>, <argument pos:start="2327:67" pos:end="2327:74"><expr pos:start="2327:67" pos:end="2327:74"><name pos:start="2327:67" pos:end="2327:74">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2329:33" pos:end="2329:38">break;</break>

                            <case pos:start="2331:29" pos:end="2331:38">case <expr pos:start="2331:34" pos:end="2331:37"><literal type="number" pos:start="2331:34" pos:end="2331:37">0x16</literal></expr>:</case> <comment type="block" pos:start="2331:40" pos:end="2331:58">/* Softint write */</comment>

                                <if_stmt pos:start="2333:33" pos:end="2335:54"><if pos:start="2333:33" pos:end="2335:54">if <condition pos:start="2333:36" pos:end="2333:52">(<expr pos:start="2333:37" pos:end="2333:51"><operator pos:start="2333:37" pos:end="2333:37">!</operator><call pos:start="2333:38" pos:end="2333:51"><name pos:start="2333:38" pos:end="2333:47">supervisor</name><argument_list pos:start="2333:48" pos:end="2333:51">(<argument pos:start="2333:49" pos:end="2333:50"><expr pos:start="2333:49" pos:end="2333:50"><name pos:start="2333:49" pos:end="2333:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2335:37" pos:end="2335:54"><block_content pos:start="2335:37" pos:end="2335:54">

                                    <goto pos:start="2335:37" pos:end="2335:54">goto <name pos:start="2335:42" pos:end="2335:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="2337:33" pos:end="2337:77"><expr pos:start="2337:33" pos:end="2337:76"><call pos:start="2337:33" pos:end="2337:76"><name pos:start="2337:33" pos:end="2337:46">tcg_gen_xor_tl</name><argument_list pos:start="2337:47" pos:end="2337:76">(<argument pos:start="2337:48" pos:end="2337:55"><expr pos:start="2337:48" pos:end="2337:55"><name pos:start="2337:48" pos:end="2337:55">cpu_tmp0</name></expr></argument>, <argument pos:start="2337:58" pos:end="2337:65"><expr pos:start="2337:58" pos:end="2337:65"><name pos:start="2337:58" pos:end="2337:65">cpu_src1</name></expr></argument>, <argument pos:start="2337:68" pos:end="2337:75"><expr pos:start="2337:68" pos:end="2337:75"><name pos:start="2337:68" pos:end="2337:75">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2339:33" pos:end="2339:76"><expr pos:start="2339:33" pos:end="2339:75"><call pos:start="2339:33" pos:end="2339:75"><name pos:start="2339:33" pos:end="2339:56">gen_helper_write_softint</name><argument_list pos:start="2339:57" pos:end="2339:75">(<argument pos:start="2339:58" pos:end="2339:64"><expr pos:start="2339:58" pos:end="2339:64"><name pos:start="2339:58" pos:end="2339:64">cpu_env</name></expr></argument>, <argument pos:start="2339:67" pos:end="2339:74"><expr pos:start="2339:67" pos:end="2339:74"><name pos:start="2339:67" pos:end="2339:74">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2341:33" pos:end="2341:38">break;</break>

                            <case pos:start="2343:29" pos:end="2346:0">case <expr pos:start="2343:34" pos:end="2343:37"><literal type="number" pos:start="2343:34" pos:end="2343:37">0x17</literal></expr>:</case> <comment type="block" pos:start="2343:40" pos:end="2343:57">/* Tick compare */</comment>

<cpp:if pos:start="2345:1" pos:end="2345:30">#<cpp:directive pos:start="2345:2" pos:end="2345:3">if</cpp:directive> <expr pos:start="2345:5" pos:end="2345:30"><operator pos:start="2345:5" pos:end="2345:5">!</operator><call pos:start="2345:6" pos:end="2345:30"><name pos:start="2345:6" pos:end="2345:12">defined</name><argument_list pos:start="2345:13" pos:end="2345:30">(<argument pos:start="2345:14" pos:end="2345:29"><expr pos:start="2345:14" pos:end="2345:29"><name pos:start="2345:14" pos:end="2345:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                                <if_stmt pos:start="2347:33" pos:end="2352:0"><if pos:start="2347:33" pos:end="2352:0">if <condition pos:start="2347:36" pos:end="2347:52">(<expr pos:start="2347:37" pos:end="2347:51"><operator pos:start="2347:37" pos:end="2347:37">!</operator><call pos:start="2347:38" pos:end="2347:51"><name pos:start="2347:38" pos:end="2347:47">supervisor</name><argument_list pos:start="2347:48" pos:end="2347:51">(<argument pos:start="2347:49" pos:end="2347:50"><expr pos:start="2347:49" pos:end="2347:50"><name pos:start="2347:49" pos:end="2347:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2349:37" pos:end="2352:0"><block_content pos:start="2349:37" pos:end="2352:0">

                                    <goto pos:start="2349:37" pos:end="2352:0">goto <name pos:start="2349:42" pos:end="2349:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="2351:1" pos:end="2351:6">#<cpp:directive pos:start="2351:2" pos:end="2351:6">endif</cpp:directive></cpp:endif>

                                <block pos:start="2353:33" pos:end="2375:33">{<block_content pos:start="2355:37" pos:end="2373:65">

                                    <decl_stmt pos:start="2355:37" pos:end="2355:55"><decl pos:start="2355:37" pos:end="2355:54"><type pos:start="2355:37" pos:end="2355:44"><name pos:start="2355:37" pos:end="2355:44">TCGv_ptr</name></type> <name pos:start="2355:46" pos:end="2355:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2359:37" pos:end="2361:61"><expr pos:start="2359:37" pos:end="2361:60"><call pos:start="2359:37" pos:end="2361:60"><name pos:start="2359:37" pos:end="2359:50">tcg_gen_xor_tl</name><argument_list pos:start="2359:51" pos:end="2361:60">(<argument pos:start="2359:52" pos:end="2359:64"><expr pos:start="2359:52" pos:end="2359:64"><name pos:start="2359:52" pos:end="2359:64">cpu_tick_cmpr</name></expr></argument>, <argument pos:start="2359:67" pos:end="2359:74"><expr pos:start="2359:67" pos:end="2359:74"><name pos:start="2359:67" pos:end="2359:74">cpu_src1</name></expr></argument>,

                                                   <argument pos:start="2361:52" pos:end="2361:59"><expr pos:start="2361:52" pos:end="2361:59"><name pos:start="2361:52" pos:end="2361:59">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2363:37" pos:end="2363:67"><expr pos:start="2363:37" pos:end="2363:66"><name pos:start="2363:37" pos:end="2363:45">r_tickptr</name> <operator pos:start="2363:47" pos:end="2363:47">=</operator> <call pos:start="2363:49" pos:end="2363:66"><name pos:start="2363:49" pos:end="2363:64">tcg_temp_new_ptr</name><argument_list pos:start="2363:65" pos:end="2363:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2365:37" pos:end="2367:82"><expr pos:start="2365:37" pos:end="2367:81"><call pos:start="2365:37" pos:end="2367:81"><name pos:start="2365:37" pos:end="2365:50">tcg_gen_ld_ptr</name><argument_list pos:start="2365:51" pos:end="2367:81">(<argument pos:start="2365:52" pos:end="2365:60"><expr pos:start="2365:52" pos:end="2365:60"><name pos:start="2365:52" pos:end="2365:60">r_tickptr</name></expr></argument>, <argument pos:start="2365:63" pos:end="2365:69"><expr pos:start="2365:63" pos:end="2365:69"><name pos:start="2365:63" pos:end="2365:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2367:52" pos:end="2367:80"><expr pos:start="2367:52" pos:end="2367:80"><call pos:start="2367:52" pos:end="2367:80"><name pos:start="2367:52" pos:end="2367:59">offsetof</name><argument_list pos:start="2367:60" pos:end="2367:80">(<argument pos:start="2367:61" pos:end="2367:73"><expr pos:start="2367:61" pos:end="2367:73"><name pos:start="2367:61" pos:end="2367:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2367:76" pos:end="2367:79"><expr pos:start="2367:76" pos:end="2367:79"><name pos:start="2367:76" pos:end="2367:79">tick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2369:37" pos:end="2371:77"><expr pos:start="2369:37" pos:end="2371:76"><call pos:start="2369:37" pos:end="2371:76"><name pos:start="2369:37" pos:end="2369:61">gen_helper_tick_set_limit</name><argument_list pos:start="2369:62" pos:end="2371:76">(<argument pos:start="2369:63" pos:end="2369:71"><expr pos:start="2369:63" pos:end="2369:71"><name pos:start="2369:63" pos:end="2369:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2371:63" pos:end="2371:75"><expr pos:start="2371:63" pos:end="2371:75"><name pos:start="2371:63" pos:end="2371:75">cpu_tick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2373:37" pos:end="2373:65"><expr pos:start="2373:37" pos:end="2373:64"><call pos:start="2373:37" pos:end="2373:64"><name pos:start="2373:37" pos:end="2373:53">tcg_temp_free_ptr</name><argument_list pos:start="2373:54" pos:end="2373:64">(<argument pos:start="2373:55" pos:end="2373:63"><expr pos:start="2373:55" pos:end="2373:63"><name pos:start="2373:55" pos:end="2373:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2377:33" pos:end="2377:38">break;</break>

                            <case pos:start="2379:29" pos:end="2382:0">case <expr pos:start="2379:34" pos:end="2379:37"><literal type="number" pos:start="2379:34" pos:end="2379:37">0x18</literal></expr>:</case> <comment type="block" pos:start="2379:40" pos:end="2379:56">/* System tick */</comment>

<cpp:if pos:start="2381:1" pos:end="2381:30">#<cpp:directive pos:start="2381:2" pos:end="2381:3">if</cpp:directive> <expr pos:start="2381:5" pos:end="2381:30"><operator pos:start="2381:5" pos:end="2381:5">!</operator><call pos:start="2381:6" pos:end="2381:30"><name pos:start="2381:6" pos:end="2381:12">defined</name><argument_list pos:start="2381:13" pos:end="2381:30">(<argument pos:start="2381:14" pos:end="2381:29"><expr pos:start="2381:14" pos:end="2381:29"><name pos:start="2381:14" pos:end="2381:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                                <if_stmt pos:start="2383:33" pos:end="2388:0"><if pos:start="2383:33" pos:end="2388:0">if <condition pos:start="2383:36" pos:end="2383:52">(<expr pos:start="2383:37" pos:end="2383:51"><operator pos:start="2383:37" pos:end="2383:37">!</operator><call pos:start="2383:38" pos:end="2383:51"><name pos:start="2383:38" pos:end="2383:47">supervisor</name><argument_list pos:start="2383:48" pos:end="2383:51">(<argument pos:start="2383:49" pos:end="2383:50"><expr pos:start="2383:49" pos:end="2383:50"><name pos:start="2383:49" pos:end="2383:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2385:37" pos:end="2388:0"><block_content pos:start="2385:37" pos:end="2388:0">

                                    <goto pos:start="2385:37" pos:end="2388:0">goto <name pos:start="2385:42" pos:end="2385:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="2387:1" pos:end="2387:6">#<cpp:directive pos:start="2387:2" pos:end="2387:6">endif</cpp:directive></cpp:endif>

                                <block pos:start="2389:33" pos:end="2411:33">{<block_content pos:start="2391:37" pos:end="2409:65">

                                    <decl_stmt pos:start="2391:37" pos:end="2391:55"><decl pos:start="2391:37" pos:end="2391:54"><type pos:start="2391:37" pos:end="2391:44"><name pos:start="2391:37" pos:end="2391:44">TCGv_ptr</name></type> <name pos:start="2391:46" pos:end="2391:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2395:37" pos:end="2397:61"><expr pos:start="2395:37" pos:end="2397:60"><call pos:start="2395:37" pos:end="2397:60"><name pos:start="2395:37" pos:end="2395:50">tcg_gen_xor_tl</name><argument_list pos:start="2395:51" pos:end="2397:60">(<argument pos:start="2395:52" pos:end="2395:59"><expr pos:start="2395:52" pos:end="2395:59"><name pos:start="2395:52" pos:end="2395:59">cpu_tmp0</name></expr></argument>, <argument pos:start="2395:62" pos:end="2395:69"><expr pos:start="2395:62" pos:end="2395:69"><name pos:start="2395:62" pos:end="2395:69">cpu_src1</name></expr></argument>,

                                                   <argument pos:start="2397:52" pos:end="2397:59"><expr pos:start="2397:52" pos:end="2397:59"><name pos:start="2397:52" pos:end="2397:59">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2399:37" pos:end="2399:67"><expr pos:start="2399:37" pos:end="2399:66"><name pos:start="2399:37" pos:end="2399:45">r_tickptr</name> <operator pos:start="2399:47" pos:end="2399:47">=</operator> <call pos:start="2399:49" pos:end="2399:66"><name pos:start="2399:49" pos:end="2399:64">tcg_temp_new_ptr</name><argument_list pos:start="2399:65" pos:end="2399:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2401:37" pos:end="2403:83"><expr pos:start="2401:37" pos:end="2403:82"><call pos:start="2401:37" pos:end="2403:82"><name pos:start="2401:37" pos:end="2401:50">tcg_gen_ld_ptr</name><argument_list pos:start="2401:51" pos:end="2403:82">(<argument pos:start="2401:52" pos:end="2401:60"><expr pos:start="2401:52" pos:end="2401:60"><name pos:start="2401:52" pos:end="2401:60">r_tickptr</name></expr></argument>, <argument pos:start="2401:63" pos:end="2401:69"><expr pos:start="2401:63" pos:end="2401:69"><name pos:start="2401:63" pos:end="2401:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2403:52" pos:end="2403:81"><expr pos:start="2403:52" pos:end="2403:81"><call pos:start="2403:52" pos:end="2403:81"><name pos:start="2403:52" pos:end="2403:59">offsetof</name><argument_list pos:start="2403:60" pos:end="2403:81">(<argument pos:start="2403:61" pos:end="2403:73"><expr pos:start="2403:61" pos:end="2403:73"><name pos:start="2403:61" pos:end="2403:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2403:76" pos:end="2403:80"><expr pos:start="2403:76" pos:end="2403:80"><name pos:start="2403:76" pos:end="2403:80">stick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2405:37" pos:end="2407:72"><expr pos:start="2405:37" pos:end="2407:71"><call pos:start="2405:37" pos:end="2407:71"><name pos:start="2405:37" pos:end="2405:61">gen_helper_tick_set_count</name><argument_list pos:start="2405:62" pos:end="2407:71">(<argument pos:start="2405:63" pos:end="2405:71"><expr pos:start="2405:63" pos:end="2405:71"><name pos:start="2405:63" pos:end="2405:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2407:63" pos:end="2407:70"><expr pos:start="2407:63" pos:end="2407:70"><name pos:start="2407:63" pos:end="2407:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2409:37" pos:end="2409:65"><expr pos:start="2409:37" pos:end="2409:64"><call pos:start="2409:37" pos:end="2409:64"><name pos:start="2409:37" pos:end="2409:53">tcg_temp_free_ptr</name><argument_list pos:start="2409:54" pos:end="2409:64">(<argument pos:start="2409:55" pos:end="2409:63"><expr pos:start="2409:55" pos:end="2409:63"><name pos:start="2409:55" pos:end="2409:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2413:33" pos:end="2413:38">break;</break>

                            <case pos:start="2415:29" pos:end="2418:0">case <expr pos:start="2415:34" pos:end="2415:37"><literal type="number" pos:start="2415:34" pos:end="2415:37">0x19</literal></expr>:</case> <comment type="block" pos:start="2415:40" pos:end="2415:64">/* System tick compare */</comment>

<cpp:if pos:start="2417:1" pos:end="2417:30">#<cpp:directive pos:start="2417:2" pos:end="2417:3">if</cpp:directive> <expr pos:start="2417:5" pos:end="2417:30"><operator pos:start="2417:5" pos:end="2417:5">!</operator><call pos:start="2417:6" pos:end="2417:30"><name pos:start="2417:6" pos:end="2417:12">defined</name><argument_list pos:start="2417:13" pos:end="2417:30">(<argument pos:start="2417:14" pos:end="2417:29"><expr pos:start="2417:14" pos:end="2417:29"><name pos:start="2417:14" pos:end="2417:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                                <if_stmt pos:start="2419:33" pos:end="2424:0"><if pos:start="2419:33" pos:end="2424:0">if <condition pos:start="2419:36" pos:end="2419:52">(<expr pos:start="2419:37" pos:end="2419:51"><operator pos:start="2419:37" pos:end="2419:37">!</operator><call pos:start="2419:38" pos:end="2419:51"><name pos:start="2419:38" pos:end="2419:47">supervisor</name><argument_list pos:start="2419:48" pos:end="2419:51">(<argument pos:start="2419:49" pos:end="2419:50"><expr pos:start="2419:49" pos:end="2419:50"><name pos:start="2419:49" pos:end="2419:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2421:37" pos:end="2424:0"><block_content pos:start="2421:37" pos:end="2424:0">

                                    <goto pos:start="2421:37" pos:end="2424:0">goto <name pos:start="2421:42" pos:end="2421:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="2423:1" pos:end="2423:6">#<cpp:directive pos:start="2423:2" pos:end="2423:6">endif</cpp:directive></cpp:endif>

                                <block pos:start="2425:33" pos:end="2447:33">{<block_content pos:start="2427:37" pos:end="2445:65">

                                    <decl_stmt pos:start="2427:37" pos:end="2427:55"><decl pos:start="2427:37" pos:end="2427:54"><type pos:start="2427:37" pos:end="2427:44"><name pos:start="2427:37" pos:end="2427:44">TCGv_ptr</name></type> <name pos:start="2427:46" pos:end="2427:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2431:37" pos:end="2433:61"><expr pos:start="2431:37" pos:end="2433:60"><call pos:start="2431:37" pos:end="2433:60"><name pos:start="2431:37" pos:end="2431:50">tcg_gen_xor_tl</name><argument_list pos:start="2431:51" pos:end="2433:60">(<argument pos:start="2431:52" pos:end="2431:65"><expr pos:start="2431:52" pos:end="2431:65"><name pos:start="2431:52" pos:end="2431:65">cpu_stick_cmpr</name></expr></argument>, <argument pos:start="2431:68" pos:end="2431:75"><expr pos:start="2431:68" pos:end="2431:75"><name pos:start="2431:68" pos:end="2431:75">cpu_src1</name></expr></argument>,

                                                   <argument pos:start="2433:52" pos:end="2433:59"><expr pos:start="2433:52" pos:end="2433:59"><name pos:start="2433:52" pos:end="2433:59">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2435:37" pos:end="2435:67"><expr pos:start="2435:37" pos:end="2435:66"><name pos:start="2435:37" pos:end="2435:45">r_tickptr</name> <operator pos:start="2435:47" pos:end="2435:47">=</operator> <call pos:start="2435:49" pos:end="2435:66"><name pos:start="2435:49" pos:end="2435:64">tcg_temp_new_ptr</name><argument_list pos:start="2435:65" pos:end="2435:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2437:37" pos:end="2439:83"><expr pos:start="2437:37" pos:end="2439:82"><call pos:start="2437:37" pos:end="2439:82"><name pos:start="2437:37" pos:end="2437:50">tcg_gen_ld_ptr</name><argument_list pos:start="2437:51" pos:end="2439:82">(<argument pos:start="2437:52" pos:end="2437:60"><expr pos:start="2437:52" pos:end="2437:60"><name pos:start="2437:52" pos:end="2437:60">r_tickptr</name></expr></argument>, <argument pos:start="2437:63" pos:end="2437:69"><expr pos:start="2437:63" pos:end="2437:69"><name pos:start="2437:63" pos:end="2437:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2439:52" pos:end="2439:81"><expr pos:start="2439:52" pos:end="2439:81"><call pos:start="2439:52" pos:end="2439:81"><name pos:start="2439:52" pos:end="2439:59">offsetof</name><argument_list pos:start="2439:60" pos:end="2439:81">(<argument pos:start="2439:61" pos:end="2439:73"><expr pos:start="2439:61" pos:end="2439:73"><name pos:start="2439:61" pos:end="2439:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2439:76" pos:end="2439:80"><expr pos:start="2439:76" pos:end="2439:80"><name pos:start="2439:76" pos:end="2439:80">stick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2441:37" pos:end="2443:78"><expr pos:start="2441:37" pos:end="2443:77"><call pos:start="2441:37" pos:end="2443:77"><name pos:start="2441:37" pos:end="2441:61">gen_helper_tick_set_limit</name><argument_list pos:start="2441:62" pos:end="2443:77">(<argument pos:start="2441:63" pos:end="2441:71"><expr pos:start="2441:63" pos:end="2441:71"><name pos:start="2441:63" pos:end="2441:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2443:63" pos:end="2443:76"><expr pos:start="2443:63" pos:end="2443:76"><name pos:start="2443:63" pos:end="2443:76">cpu_stick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2445:37" pos:end="2445:65"><expr pos:start="2445:37" pos:end="2445:64"><call pos:start="2445:37" pos:end="2445:64"><name pos:start="2445:37" pos:end="2445:53">tcg_temp_free_ptr</name><argument_list pos:start="2445:54" pos:end="2445:64">(<argument pos:start="2445:55" pos:end="2445:63"><expr pos:start="2445:55" pos:end="2445:63"><name pos:start="2445:55" pos:end="2445:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2449:33" pos:end="2449:38">break;</break>



                            <case pos:start="2453:29" pos:end="2453:38">case <expr pos:start="2453:34" pos:end="2453:37"><literal type="number" pos:start="2453:34" pos:end="2453:37">0x10</literal></expr>:</case> <comment type="block" pos:start="2453:40" pos:end="2453:64">/* Performance Control */</comment>

                            <case pos:start="2455:29" pos:end="2455:38">case <expr pos:start="2455:34" pos:end="2455:37"><literal type="number" pos:start="2455:34" pos:end="2455:37">0x11</literal></expr>:</case> <comment type="block" pos:start="2455:40" pos:end="2457:52">/* Performance Instrumentation

                                          Counter */</comment>

                            <case pos:start="2459:29" pos:end="2462:0">case <expr pos:start="2459:34" pos:end="2459:37"><literal type="number" pos:start="2459:34" pos:end="2459:37">0x12</literal></expr>:</case> <comment type="block" pos:start="2459:40" pos:end="2459:61">/* Dispatch Control */</comment>

<cpp:endif pos:start="2461:1" pos:end="2461:6">#<cpp:directive pos:start="2461:2" pos:end="2461:6">endif</cpp:directive></cpp:endif>

                            <default pos:start="2463:29" pos:end="2463:36">default:</default>

                                <goto pos:start="2465:33" pos:end="2465:50">goto <name pos:start="2465:38" pos:end="2465:49">illegal_insn</name>;</goto>

                            </block_content>}</block></switch>

                        </block_content>}</block>

                        <break pos:start="2471:25" pos:end="2474:0">break;</break>

<cpp:if pos:start="2473:1" pos:end="2473:30">#<cpp:directive pos:start="2473:2" pos:end="2473:3">if</cpp:directive> <expr pos:start="2473:5" pos:end="2473:30"><operator pos:start="2473:5" pos:end="2473:5">!</operator><call pos:start="2473:6" pos:end="2473:30"><name pos:start="2473:6" pos:end="2473:12">defined</name><argument_list pos:start="2473:13" pos:end="2473:30">(<argument pos:start="2473:14" pos:end="2473:29"><expr pos:start="2473:14" pos:end="2473:29"><name pos:start="2473:14" pos:end="2473:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <case pos:start="2475:21" pos:end="2475:30">case <expr pos:start="2475:26" pos:end="2475:29"><literal type="number" pos:start="2475:26" pos:end="2475:29">0x31</literal></expr>:</case> <comment type="block" pos:start="2475:32" pos:end="2475:62">/* wrpsr, V9 saved, restored */</comment>

                        <block pos:start="2477:25" pos:end="2535:25">{<block_content pos:start="2479:29" pos:end="2534:0">

                            <if_stmt pos:start="2479:29" pos:end="2484:0"><if pos:start="2479:29" pos:end="2484:0">if <condition pos:start="2479:32" pos:end="2479:48">(<expr pos:start="2479:33" pos:end="2479:47"><operator pos:start="2479:33" pos:end="2479:33">!</operator><call pos:start="2479:34" pos:end="2479:47"><name pos:start="2479:34" pos:end="2479:43">supervisor</name><argument_list pos:start="2479:44" pos:end="2479:47">(<argument pos:start="2479:45" pos:end="2479:46"><expr pos:start="2479:45" pos:end="2479:46"><name pos:start="2479:45" pos:end="2479:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2481:33" pos:end="2484:0"><block_content pos:start="2481:33" pos:end="2484:0">

                                <goto pos:start="2481:33" pos:end="2484:0">goto <name pos:start="2481:38" pos:end="2481:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="2483:1" pos:end="2483:21">#<cpp:directive pos:start="2483:2" pos:end="2483:6">ifdef</cpp:directive> <name pos:start="2483:8" pos:end="2483:21">TARGET_SPARC64</name></cpp:ifdef>

                            <switch pos:start="2485:29" pos:end="2516:0">switch <condition pos:start="2485:36" pos:end="2485:39">(<expr pos:start="2485:37" pos:end="2485:38"><name pos:start="2485:37" pos:end="2485:38">rd</name></expr>)</condition> <block pos:start="2485:41" pos:end="2516:0">{<block_content pos:start="2487:29" pos:end="2511:50">

                            <case pos:start="2487:29" pos:end="2487:35">case <expr pos:start="2487:34" pos:end="2487:34"><literal type="number" pos:start="2487:34" pos:end="2487:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="2489:33" pos:end="2489:58"><expr pos:start="2489:33" pos:end="2489:57"><call pos:start="2489:33" pos:end="2489:57"><name pos:start="2489:33" pos:end="2489:48">gen_helper_saved</name><argument_list pos:start="2489:49" pos:end="2489:57">(<argument pos:start="2489:50" pos:end="2489:56"><expr pos:start="2489:50" pos:end="2489:56"><name pos:start="2489:50" pos:end="2489:56">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2491:33" pos:end="2491:38">break;</break>

                            <case pos:start="2493:29" pos:end="2493:35">case <expr pos:start="2493:34" pos:end="2493:34"><literal type="number" pos:start="2493:34" pos:end="2493:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="2495:33" pos:end="2495:61"><expr pos:start="2495:33" pos:end="2495:60"><call pos:start="2495:33" pos:end="2495:60"><name pos:start="2495:33" pos:end="2495:51">gen_helper_restored</name><argument_list pos:start="2495:52" pos:end="2495:60">(<argument pos:start="2495:53" pos:end="2495:59"><expr pos:start="2495:53" pos:end="2495:59"><name pos:start="2495:53" pos:end="2495:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2497:33" pos:end="2497:38">break;</break>

                            <case pos:start="2499:29" pos:end="2499:35">case <expr pos:start="2499:34" pos:end="2499:34"><literal type="number" pos:start="2499:34" pos:end="2499:34">2</literal></expr>:</case> <comment type="block" pos:start="2499:37" pos:end="2499:57">/* UA2005 allclean */</comment>

                            <case pos:start="2501:29" pos:end="2501:35">case <expr pos:start="2501:34" pos:end="2501:34"><literal type="number" pos:start="2501:34" pos:end="2501:34">3</literal></expr>:</case> <comment type="block" pos:start="2501:37" pos:end="2501:55">/* UA2005 otherw */</comment>

                            <case pos:start="2503:29" pos:end="2503:35">case <expr pos:start="2503:34" pos:end="2503:34"><literal type="number" pos:start="2503:34" pos:end="2503:34">4</literal></expr>:</case> <comment type="block" pos:start="2503:37" pos:end="2503:56">/* UA2005 normalw */</comment>

                            <case pos:start="2505:29" pos:end="2505:35">case <expr pos:start="2505:34" pos:end="2505:34"><literal type="number" pos:start="2505:34" pos:end="2505:34">5</literal></expr>:</case> <comment type="block" pos:start="2505:37" pos:end="2505:55">/* UA2005 invalw */</comment>

                                <comment type="line" pos:start="2507:33" pos:end="2507:38">// XXX</comment>

                            <default pos:start="2509:29" pos:end="2509:36">default:</default>

                                <goto pos:start="2511:33" pos:end="2511:50">goto <name pos:start="2511:38" pos:end="2511:49">illegal_insn</name>;</goto>

                            </block_content>}</block></switch>

<cpp:else pos:start="2515:1" pos:end="2515:5">#<cpp:directive pos:start="2515:2" pos:end="2515:5">else</cpp:directive></cpp:else>

                            <expr_stmt pos:start="2517:29" pos:end="2517:73"><expr pos:start="2517:29" pos:end="2517:72"><call pos:start="2517:29" pos:end="2517:72"><name pos:start="2517:29" pos:end="2517:42">tcg_gen_xor_tl</name><argument_list pos:start="2517:43" pos:end="2517:72">(<argument pos:start="2517:44" pos:end="2517:51"><expr pos:start="2517:44" pos:end="2517:51"><name pos:start="2517:44" pos:end="2517:51">cpu_tmp0</name></expr></argument>, <argument pos:start="2517:54" pos:end="2517:61"><expr pos:start="2517:54" pos:end="2517:61"><name pos:start="2517:54" pos:end="2517:61">cpu_src1</name></expr></argument>, <argument pos:start="2517:64" pos:end="2517:71"><expr pos:start="2517:64" pos:end="2517:71"><name pos:start="2517:64" pos:end="2517:71">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2519:29" pos:end="2519:64"><expr pos:start="2519:29" pos:end="2519:63"><call pos:start="2519:29" pos:end="2519:63"><name pos:start="2519:29" pos:end="2519:44">gen_helper_wrpsr</name><argument_list pos:start="2519:45" pos:end="2519:63">(<argument pos:start="2519:46" pos:end="2519:52"><expr pos:start="2519:46" pos:end="2519:52"><name pos:start="2519:46" pos:end="2519:52">cpu_env</name></expr></argument>, <argument pos:start="2519:55" pos:end="2519:62"><expr pos:start="2519:55" pos:end="2519:62"><name pos:start="2519:55" pos:end="2519:62">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2521:29" pos:end="2521:69"><expr pos:start="2521:29" pos:end="2521:68"><call pos:start="2521:29" pos:end="2521:68"><name pos:start="2521:29" pos:end="2521:44">tcg_gen_movi_i32</name><argument_list pos:start="2521:45" pos:end="2521:68">(<argument pos:start="2521:46" pos:end="2521:54"><expr pos:start="2521:46" pos:end="2521:54"><name pos:start="2521:46" pos:end="2521:54">cpu_cc_op</name></expr></argument>, <argument pos:start="2521:57" pos:end="2521:67"><expr pos:start="2521:57" pos:end="2521:67"><name pos:start="2521:57" pos:end="2521:67">CC_OP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2523:29" pos:end="2523:52"><expr pos:start="2523:29" pos:end="2523:51"><name pos:start="2523:29" pos:end="2523:37"><name pos:start="2523:29" pos:end="2523:30">dc</name><operator pos:start="2523:31" pos:end="2523:32">-&gt;</operator><name pos:start="2523:33" pos:end="2523:37">cc_op</name></name> <operator pos:start="2523:39" pos:end="2523:39">=</operator> <name pos:start="2523:41" pos:end="2523:51">CC_OP_FLAGS</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="2525:29" pos:end="2525:43"><expr pos:start="2525:29" pos:end="2525:42"><call pos:start="2525:29" pos:end="2525:42"><name pos:start="2525:29" pos:end="2525:38">save_state</name><argument_list pos:start="2525:39" pos:end="2525:42">(<argument pos:start="2525:40" pos:end="2525:41"><expr pos:start="2525:40" pos:end="2525:41"><name pos:start="2525:40" pos:end="2525:41">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2527:29" pos:end="2527:47"><expr pos:start="2527:29" pos:end="2527:46"><call pos:start="2527:29" pos:end="2527:46"><name pos:start="2527:29" pos:end="2527:44">gen_op_next_insn</name><argument_list pos:start="2527:45" pos:end="2527:46">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2529:29" pos:end="2529:47"><expr pos:start="2529:29" pos:end="2529:46"><call pos:start="2529:29" pos:end="2529:46"><name pos:start="2529:29" pos:end="2529:43">tcg_gen_exit_tb</name><argument_list pos:start="2529:44" pos:end="2529:46">(<argument pos:start="2529:45" pos:end="2529:45"><expr pos:start="2529:45" pos:end="2529:45"><literal type="number" pos:start="2529:45" pos:end="2529:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2531:29" pos:end="2534:0"><expr pos:start="2531:29" pos:end="2531:41"><name pos:start="2531:29" pos:end="2531:37"><name pos:start="2531:29" pos:end="2531:30">dc</name><operator pos:start="2531:31" pos:end="2531:32">-&gt;</operator><name pos:start="2531:33" pos:end="2531:37">is_br</name></name> <operator pos:start="2531:39" pos:end="2531:39">=</operator> <literal type="number" pos:start="2531:41" pos:end="2531:41">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="2533:1" pos:end="2533:6">#<cpp:directive pos:start="2533:2" pos:end="2533:6">endif</cpp:directive></cpp:endif>

                        </block_content>}</block>

                        <break pos:start="2537:25" pos:end="2537:30">break;</break>

                    <case pos:start="2539:21" pos:end="2539:30">case <expr pos:start="2539:26" pos:end="2539:29"><literal type="number" pos:start="2539:26" pos:end="2539:29">0x32</literal></expr>:</case> <comment type="block" pos:start="2539:32" pos:end="2539:51">/* wrwim, V9 wrpr */</comment>

                        <block pos:start="2541:25" pos:end="2799:25">{<block_content pos:start="2543:29" pos:end="2798:0">

                            <if_stmt pos:start="2543:29" pos:end="2545:47"><if pos:start="2543:29" pos:end="2545:47">if <condition pos:start="2543:32" pos:end="2543:48">(<expr pos:start="2543:33" pos:end="2543:47"><operator pos:start="2543:33" pos:end="2543:33">!</operator><call pos:start="2543:34" pos:end="2543:47"><name pos:start="2543:34" pos:end="2543:43">supervisor</name><argument_list pos:start="2543:44" pos:end="2543:47">(<argument pos:start="2543:45" pos:end="2543:46"><expr pos:start="2543:45" pos:end="2543:46"><name pos:start="2543:45" pos:end="2543:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2545:33" pos:end="2545:47"><block_content pos:start="2545:33" pos:end="2545:47">

                                <goto pos:start="2545:33" pos:end="2545:47">goto <name pos:start="2545:38" pos:end="2545:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2547:29" pos:end="2550:0"><expr pos:start="2547:29" pos:end="2547:72"><call pos:start="2547:29" pos:end="2547:72"><name pos:start="2547:29" pos:end="2547:42">tcg_gen_xor_tl</name><argument_list pos:start="2547:43" pos:end="2547:72">(<argument pos:start="2547:44" pos:end="2547:51"><expr pos:start="2547:44" pos:end="2547:51"><name pos:start="2547:44" pos:end="2547:51">cpu_tmp0</name></expr></argument>, <argument pos:start="2547:54" pos:end="2547:61"><expr pos:start="2547:54" pos:end="2547:61"><name pos:start="2547:54" pos:end="2547:61">cpu_src1</name></expr></argument>, <argument pos:start="2547:64" pos:end="2547:71"><expr pos:start="2547:64" pos:end="2547:71"><name pos:start="2547:64" pos:end="2547:71">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="2549:1" pos:end="2549:21">#<cpp:directive pos:start="2549:2" pos:end="2549:6">ifdef</cpp:directive> <name pos:start="2549:8" pos:end="2549:21">TARGET_SPARC64</name></cpp:ifdef>

                            <switch pos:start="2551:29" pos:end="2786:0">switch <condition pos:start="2551:36" pos:end="2551:39">(<expr pos:start="2551:37" pos:end="2551:38"><name pos:start="2551:37" pos:end="2551:38">rd</name></expr>)</condition> <block pos:start="2551:41" pos:end="2786:0">{<block_content pos:start="2553:29" pos:end="2781:50">

                            <case pos:start="2553:29" pos:end="2553:35">case <expr pos:start="2553:34" pos:end="2553:34"><literal type="number" pos:start="2553:34" pos:end="2553:34">0</literal></expr>:</case> <comment type="line" pos:start="2553:37" pos:end="2553:42">// tpc</comment>

                                <block pos:start="2555:33" pos:end="2571:33">{<block_content pos:start="2557:37" pos:end="2569:63">

                                    <decl_stmt pos:start="2557:37" pos:end="2557:53"><decl pos:start="2557:37" pos:end="2557:52"><type pos:start="2557:37" pos:end="2557:44"><name pos:start="2557:37" pos:end="2557:44">TCGv_ptr</name></type> <name pos:start="2557:46" pos:end="2557:52">r_tsptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2561:37" pos:end="2561:65"><expr pos:start="2561:37" pos:end="2561:64"><name pos:start="2561:37" pos:end="2561:43">r_tsptr</name> <operator pos:start="2561:45" pos:end="2561:45">=</operator> <call pos:start="2561:47" pos:end="2561:64"><name pos:start="2561:47" pos:end="2561:62">tcg_temp_new_ptr</name><argument_list pos:start="2561:63" pos:end="2561:64">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2563:37" pos:end="2563:80"><expr pos:start="2563:37" pos:end="2563:79"><call pos:start="2563:37" pos:end="2563:79"><name pos:start="2563:37" pos:end="2563:61">gen_load_trap_state_at_tl</name><argument_list pos:start="2563:62" pos:end="2563:79">(<argument pos:start="2563:63" pos:end="2563:69"><expr pos:start="2563:63" pos:end="2563:69"><name pos:start="2563:63" pos:end="2563:69">r_tsptr</name></expr></argument>, <argument pos:start="2563:72" pos:end="2563:78"><expr pos:start="2563:72" pos:end="2563:78"><name pos:start="2563:72" pos:end="2563:78">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2565:37" pos:end="2567:77"><expr pos:start="2565:37" pos:end="2567:76"><call pos:start="2565:37" pos:end="2567:76"><name pos:start="2565:37" pos:end="2565:49">tcg_gen_st_tl</name><argument_list pos:start="2565:50" pos:end="2567:76">(<argument pos:start="2565:51" pos:end="2565:58"><expr pos:start="2565:51" pos:end="2565:58"><name pos:start="2565:51" pos:end="2565:58">cpu_tmp0</name></expr></argument>, <argument pos:start="2565:61" pos:end="2565:67"><expr pos:start="2565:61" pos:end="2565:67"><name pos:start="2565:61" pos:end="2565:67">r_tsptr</name></expr></argument>,

                                                  <argument pos:start="2567:51" pos:end="2567:75"><expr pos:start="2567:51" pos:end="2567:75"><call pos:start="2567:51" pos:end="2567:75"><name pos:start="2567:51" pos:end="2567:58">offsetof</name><argument_list pos:start="2567:59" pos:end="2567:75">(<argument pos:start="2567:60" pos:end="2567:69"><expr pos:start="2567:60" pos:end="2567:69"><name pos:start="2567:60" pos:end="2567:69">trap_state</name></expr></argument>, <argument pos:start="2567:72" pos:end="2567:74"><expr pos:start="2567:72" pos:end="2567:74"><name pos:start="2567:72" pos:end="2567:74">tpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2569:37" pos:end="2569:63"><expr pos:start="2569:37" pos:end="2569:62"><call pos:start="2569:37" pos:end="2569:62"><name pos:start="2569:37" pos:end="2569:53">tcg_temp_free_ptr</name><argument_list pos:start="2569:54" pos:end="2569:62">(<argument pos:start="2569:55" pos:end="2569:61"><expr pos:start="2569:55" pos:end="2569:61"><name pos:start="2569:55" pos:end="2569:61">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2573:33" pos:end="2573:38">break;</break>

                            <case pos:start="2575:29" pos:end="2575:35">case <expr pos:start="2575:34" pos:end="2575:34"><literal type="number" pos:start="2575:34" pos:end="2575:34">1</literal></expr>:</case> <comment type="line" pos:start="2575:37" pos:end="2575:43">// tnpc</comment>

                                <block pos:start="2577:33" pos:end="2593:33">{<block_content pos:start="2579:37" pos:end="2591:63">

                                    <decl_stmt pos:start="2579:37" pos:end="2579:53"><decl pos:start="2579:37" pos:end="2579:52"><type pos:start="2579:37" pos:end="2579:44"><name pos:start="2579:37" pos:end="2579:44">TCGv_ptr</name></type> <name pos:start="2579:46" pos:end="2579:52">r_tsptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2583:37" pos:end="2583:65"><expr pos:start="2583:37" pos:end="2583:64"><name pos:start="2583:37" pos:end="2583:43">r_tsptr</name> <operator pos:start="2583:45" pos:end="2583:45">=</operator> <call pos:start="2583:47" pos:end="2583:64"><name pos:start="2583:47" pos:end="2583:62">tcg_temp_new_ptr</name><argument_list pos:start="2583:63" pos:end="2583:64">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2585:37" pos:end="2585:80"><expr pos:start="2585:37" pos:end="2585:79"><call pos:start="2585:37" pos:end="2585:79"><name pos:start="2585:37" pos:end="2585:61">gen_load_trap_state_at_tl</name><argument_list pos:start="2585:62" pos:end="2585:79">(<argument pos:start="2585:63" pos:end="2585:69"><expr pos:start="2585:63" pos:end="2585:69"><name pos:start="2585:63" pos:end="2585:69">r_tsptr</name></expr></argument>, <argument pos:start="2585:72" pos:end="2585:78"><expr pos:start="2585:72" pos:end="2585:78"><name pos:start="2585:72" pos:end="2585:78">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2587:37" pos:end="2589:78"><expr pos:start="2587:37" pos:end="2589:77"><call pos:start="2587:37" pos:end="2589:77"><name pos:start="2587:37" pos:end="2587:49">tcg_gen_st_tl</name><argument_list pos:start="2587:50" pos:end="2589:77">(<argument pos:start="2587:51" pos:end="2587:58"><expr pos:start="2587:51" pos:end="2587:58"><name pos:start="2587:51" pos:end="2587:58">cpu_tmp0</name></expr></argument>, <argument pos:start="2587:61" pos:end="2587:67"><expr pos:start="2587:61" pos:end="2587:67"><name pos:start="2587:61" pos:end="2587:67">r_tsptr</name></expr></argument>,

                                                  <argument pos:start="2589:51" pos:end="2589:76"><expr pos:start="2589:51" pos:end="2589:76"><call pos:start="2589:51" pos:end="2589:76"><name pos:start="2589:51" pos:end="2589:58">offsetof</name><argument_list pos:start="2589:59" pos:end="2589:76">(<argument pos:start="2589:60" pos:end="2589:69"><expr pos:start="2589:60" pos:end="2589:69"><name pos:start="2589:60" pos:end="2589:69">trap_state</name></expr></argument>, <argument pos:start="2589:72" pos:end="2589:75"><expr pos:start="2589:72" pos:end="2589:75"><name pos:start="2589:72" pos:end="2589:75">tnpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2591:37" pos:end="2591:63"><expr pos:start="2591:37" pos:end="2591:62"><call pos:start="2591:37" pos:end="2591:62"><name pos:start="2591:37" pos:end="2591:53">tcg_temp_free_ptr</name><argument_list pos:start="2591:54" pos:end="2591:62">(<argument pos:start="2591:55" pos:end="2591:61"><expr pos:start="2591:55" pos:end="2591:61"><name pos:start="2591:55" pos:end="2591:61">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2595:33" pos:end="2595:38">break;</break>

                            <case pos:start="2597:29" pos:end="2597:35">case <expr pos:start="2597:34" pos:end="2597:34"><literal type="number" pos:start="2597:34" pos:end="2597:34">2</literal></expr>:</case> <comment type="line" pos:start="2597:37" pos:end="2597:45">// tstate</comment>

                                <block pos:start="2599:33" pos:end="2617:33">{<block_content pos:start="2601:37" pos:end="2615:63">

                                    <decl_stmt pos:start="2601:37" pos:end="2601:53"><decl pos:start="2601:37" pos:end="2601:52"><type pos:start="2601:37" pos:end="2601:44"><name pos:start="2601:37" pos:end="2601:44">TCGv_ptr</name></type> <name pos:start="2601:46" pos:end="2601:52">r_tsptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2605:37" pos:end="2605:65"><expr pos:start="2605:37" pos:end="2605:64"><name pos:start="2605:37" pos:end="2605:43">r_tsptr</name> <operator pos:start="2605:45" pos:end="2605:45">=</operator> <call pos:start="2605:47" pos:end="2605:64"><name pos:start="2605:47" pos:end="2605:62">tcg_temp_new_ptr</name><argument_list pos:start="2605:63" pos:end="2605:64">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2607:37" pos:end="2607:80"><expr pos:start="2607:37" pos:end="2607:79"><call pos:start="2607:37" pos:end="2607:79"><name pos:start="2607:37" pos:end="2607:61">gen_load_trap_state_at_tl</name><argument_list pos:start="2607:62" pos:end="2607:79">(<argument pos:start="2607:63" pos:end="2607:69"><expr pos:start="2607:63" pos:end="2607:69"><name pos:start="2607:63" pos:end="2607:69">r_tsptr</name></expr></argument>, <argument pos:start="2607:72" pos:end="2607:78"><expr pos:start="2607:72" pos:end="2607:78"><name pos:start="2607:72" pos:end="2607:78">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2609:37" pos:end="2613:68"><expr pos:start="2609:37" pos:end="2613:67"><call pos:start="2609:37" pos:end="2613:67"><name pos:start="2609:37" pos:end="2609:49">tcg_gen_st_tl</name><argument_list pos:start="2609:50" pos:end="2613:67">(<argument pos:start="2609:51" pos:end="2609:58"><expr pos:start="2609:51" pos:end="2609:58"><name pos:start="2609:51" pos:end="2609:58">cpu_tmp0</name></expr></argument>, <argument pos:start="2609:61" pos:end="2609:67"><expr pos:start="2609:61" pos:end="2609:67"><name pos:start="2609:61" pos:end="2609:67">r_tsptr</name></expr></argument>,

                                                  <argument pos:start="2611:51" pos:end="2613:66"><expr pos:start="2611:51" pos:end="2613:66"><call pos:start="2611:51" pos:end="2613:66"><name pos:start="2611:51" pos:end="2611:58">offsetof</name><argument_list pos:start="2611:59" pos:end="2613:66">(<argument pos:start="2611:60" pos:end="2611:69"><expr pos:start="2611:60" pos:end="2611:69"><name pos:start="2611:60" pos:end="2611:69">trap_state</name></expr></argument>,

                                                           <argument pos:start="2613:60" pos:end="2613:65"><expr pos:start="2613:60" pos:end="2613:65"><name pos:start="2613:60" pos:end="2613:65">tstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2615:37" pos:end="2615:63"><expr pos:start="2615:37" pos:end="2615:62"><call pos:start="2615:37" pos:end="2615:62"><name pos:start="2615:37" pos:end="2615:53">tcg_temp_free_ptr</name><argument_list pos:start="2615:54" pos:end="2615:62">(<argument pos:start="2615:55" pos:end="2615:61"><expr pos:start="2615:55" pos:end="2615:61"><name pos:start="2615:55" pos:end="2615:61">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2619:33" pos:end="2619:38">break;</break>

                            <case pos:start="2621:29" pos:end="2621:35">case <expr pos:start="2621:34" pos:end="2621:34"><literal type="number" pos:start="2621:34" pos:end="2621:34">3</literal></expr>:</case> <comment type="line" pos:start="2621:37" pos:end="2621:41">// tt</comment>

                                <block pos:start="2623:33" pos:end="2639:33">{<block_content pos:start="2625:37" pos:end="2637:63">

                                    <decl_stmt pos:start="2625:37" pos:end="2625:53"><decl pos:start="2625:37" pos:end="2625:52"><type pos:start="2625:37" pos:end="2625:44"><name pos:start="2625:37" pos:end="2625:44">TCGv_ptr</name></type> <name pos:start="2625:46" pos:end="2625:52">r_tsptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2629:37" pos:end="2629:65"><expr pos:start="2629:37" pos:end="2629:64"><name pos:start="2629:37" pos:end="2629:43">r_tsptr</name> <operator pos:start="2629:45" pos:end="2629:45">=</operator> <call pos:start="2629:47" pos:end="2629:64"><name pos:start="2629:47" pos:end="2629:62">tcg_temp_new_ptr</name><argument_list pos:start="2629:63" pos:end="2629:64">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2631:37" pos:end="2631:80"><expr pos:start="2631:37" pos:end="2631:79"><call pos:start="2631:37" pos:end="2631:79"><name pos:start="2631:37" pos:end="2631:61">gen_load_trap_state_at_tl</name><argument_list pos:start="2631:62" pos:end="2631:79">(<argument pos:start="2631:63" pos:end="2631:69"><expr pos:start="2631:63" pos:end="2631:69"><name pos:start="2631:63" pos:end="2631:69">r_tsptr</name></expr></argument>, <argument pos:start="2631:72" pos:end="2631:78"><expr pos:start="2631:72" pos:end="2631:78"><name pos:start="2631:72" pos:end="2631:78">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2633:37" pos:end="2635:78"><expr pos:start="2633:37" pos:end="2635:77"><call pos:start="2633:37" pos:end="2635:77"><name pos:start="2633:37" pos:end="2633:51">tcg_gen_st32_tl</name><argument_list pos:start="2633:52" pos:end="2635:77">(<argument pos:start="2633:53" pos:end="2633:60"><expr pos:start="2633:53" pos:end="2633:60"><name pos:start="2633:53" pos:end="2633:60">cpu_tmp0</name></expr></argument>, <argument pos:start="2633:63" pos:end="2633:69"><expr pos:start="2633:63" pos:end="2633:69"><name pos:start="2633:63" pos:end="2633:69">r_tsptr</name></expr></argument>,

                                                    <argument pos:start="2635:53" pos:end="2635:76"><expr pos:start="2635:53" pos:end="2635:76"><call pos:start="2635:53" pos:end="2635:76"><name pos:start="2635:53" pos:end="2635:60">offsetof</name><argument_list pos:start="2635:61" pos:end="2635:76">(<argument pos:start="2635:62" pos:end="2635:71"><expr pos:start="2635:62" pos:end="2635:71"><name pos:start="2635:62" pos:end="2635:71">trap_state</name></expr></argument>, <argument pos:start="2635:74" pos:end="2635:75"><expr pos:start="2635:74" pos:end="2635:75"><name pos:start="2635:74" pos:end="2635:75">tt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2637:37" pos:end="2637:63"><expr pos:start="2637:37" pos:end="2637:62"><call pos:start="2637:37" pos:end="2637:62"><name pos:start="2637:37" pos:end="2637:53">tcg_temp_free_ptr</name><argument_list pos:start="2637:54" pos:end="2637:62">(<argument pos:start="2637:55" pos:end="2637:61"><expr pos:start="2637:55" pos:end="2637:61"><name pos:start="2637:55" pos:end="2637:61">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2641:33" pos:end="2641:38">break;</break>

                            <case pos:start="2643:29" pos:end="2643:35">case <expr pos:start="2643:34" pos:end="2643:34"><literal type="number" pos:start="2643:34" pos:end="2643:34">4</literal></expr>:</case> <comment type="line" pos:start="2643:37" pos:end="2643:43">// tick</comment>

                                <block pos:start="2645:33" pos:end="2663:33">{<block_content pos:start="2647:37" pos:end="2661:65">

                                    <decl_stmt pos:start="2647:37" pos:end="2647:55"><decl pos:start="2647:37" pos:end="2647:54"><type pos:start="2647:37" pos:end="2647:44"><name pos:start="2647:37" pos:end="2647:44">TCGv_ptr</name></type> <name pos:start="2647:46" pos:end="2647:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2651:37" pos:end="2651:67"><expr pos:start="2651:37" pos:end="2651:66"><name pos:start="2651:37" pos:end="2651:45">r_tickptr</name> <operator pos:start="2651:47" pos:end="2651:47">=</operator> <call pos:start="2651:49" pos:end="2651:66"><name pos:start="2651:49" pos:end="2651:64">tcg_temp_new_ptr</name><argument_list pos:start="2651:65" pos:end="2651:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2653:37" pos:end="2655:82"><expr pos:start="2653:37" pos:end="2655:81"><call pos:start="2653:37" pos:end="2655:81"><name pos:start="2653:37" pos:end="2653:50">tcg_gen_ld_ptr</name><argument_list pos:start="2653:51" pos:end="2655:81">(<argument pos:start="2653:52" pos:end="2653:60"><expr pos:start="2653:52" pos:end="2653:60"><name pos:start="2653:52" pos:end="2653:60">r_tickptr</name></expr></argument>, <argument pos:start="2653:63" pos:end="2653:69"><expr pos:start="2653:63" pos:end="2653:69"><name pos:start="2653:63" pos:end="2653:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2655:52" pos:end="2655:80"><expr pos:start="2655:52" pos:end="2655:80"><call pos:start="2655:52" pos:end="2655:80"><name pos:start="2655:52" pos:end="2655:59">offsetof</name><argument_list pos:start="2655:60" pos:end="2655:80">(<argument pos:start="2655:61" pos:end="2655:73"><expr pos:start="2655:61" pos:end="2655:73"><name pos:start="2655:61" pos:end="2655:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2655:76" pos:end="2655:79"><expr pos:start="2655:76" pos:end="2655:79"><name pos:start="2655:76" pos:end="2655:79">tick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2657:37" pos:end="2659:72"><expr pos:start="2657:37" pos:end="2659:71"><call pos:start="2657:37" pos:end="2659:71"><name pos:start="2657:37" pos:end="2657:61">gen_helper_tick_set_count</name><argument_list pos:start="2657:62" pos:end="2659:71">(<argument pos:start="2657:63" pos:end="2657:71"><expr pos:start="2657:63" pos:end="2657:71"><name pos:start="2657:63" pos:end="2657:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2659:63" pos:end="2659:70"><expr pos:start="2659:63" pos:end="2659:70"><name pos:start="2659:63" pos:end="2659:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2661:37" pos:end="2661:65"><expr pos:start="2661:37" pos:end="2661:64"><call pos:start="2661:37" pos:end="2661:64"><name pos:start="2661:37" pos:end="2661:53">tcg_temp_free_ptr</name><argument_list pos:start="2661:54" pos:end="2661:64">(<argument pos:start="2661:55" pos:end="2661:63"><expr pos:start="2661:55" pos:end="2661:63"><name pos:start="2661:55" pos:end="2661:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2665:33" pos:end="2665:38">break;</break>

                            <case pos:start="2667:29" pos:end="2667:35">case <expr pos:start="2667:34" pos:end="2667:34"><literal type="number" pos:start="2667:34" pos:end="2667:34">5</literal></expr>:</case> <comment type="line" pos:start="2667:37" pos:end="2667:42">// tba</comment>

                                <expr_stmt pos:start="2669:33" pos:end="2669:66"><expr pos:start="2669:33" pos:end="2669:65"><call pos:start="2669:33" pos:end="2669:65"><name pos:start="2669:33" pos:end="2669:46">tcg_gen_mov_tl</name><argument_list pos:start="2669:47" pos:end="2669:65">(<argument pos:start="2669:48" pos:end="2669:54"><expr pos:start="2669:48" pos:end="2669:54"><name pos:start="2669:48" pos:end="2669:54">cpu_tbr</name></expr></argument>, <argument pos:start="2669:57" pos:end="2669:64"><expr pos:start="2669:57" pos:end="2669:64"><name pos:start="2669:57" pos:end="2669:64">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2671:33" pos:end="2671:38">break;</break>

                            <case pos:start="2673:29" pos:end="2673:35">case <expr pos:start="2673:34" pos:end="2673:34"><literal type="number" pos:start="2673:34" pos:end="2673:34">6</literal></expr>:</case> <comment type="line" pos:start="2673:37" pos:end="2673:45">// pstate</comment>

                                <expr_stmt pos:start="2675:33" pos:end="2675:47"><expr pos:start="2675:33" pos:end="2675:46"><call pos:start="2675:33" pos:end="2675:46"><name pos:start="2675:33" pos:end="2675:42">save_state</name><argument_list pos:start="2675:43" pos:end="2675:46">(<argument pos:start="2675:44" pos:end="2675:45"><expr pos:start="2675:44" pos:end="2675:45"><name pos:start="2675:44" pos:end="2675:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2677:33" pos:end="2677:71"><expr pos:start="2677:33" pos:end="2677:70"><call pos:start="2677:33" pos:end="2677:70"><name pos:start="2677:33" pos:end="2677:51">gen_helper_wrpstate</name><argument_list pos:start="2677:52" pos:end="2677:70">(<argument pos:start="2677:53" pos:end="2677:59"><expr pos:start="2677:53" pos:end="2677:59"><name pos:start="2677:53" pos:end="2677:59">cpu_env</name></expr></argument>, <argument pos:start="2677:62" pos:end="2677:69"><expr pos:start="2677:62" pos:end="2677:69"><name pos:start="2677:62" pos:end="2677:69">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2679:33" pos:end="2679:53"><expr pos:start="2679:33" pos:end="2679:52"><name pos:start="2679:33" pos:end="2679:39"><name pos:start="2679:33" pos:end="2679:34">dc</name><operator pos:start="2679:35" pos:end="2679:36">-&gt;</operator><name pos:start="2679:37" pos:end="2679:39">npc</name></name> <operator pos:start="2679:41" pos:end="2679:41">=</operator> <name pos:start="2679:43" pos:end="2679:52">DYNAMIC_PC</name></expr>;</expr_stmt>

                                <break pos:start="2681:33" pos:end="2681:38">break;</break>

                            <case pos:start="2683:29" pos:end="2683:35">case <expr pos:start="2683:34" pos:end="2683:34"><literal type="number" pos:start="2683:34" pos:end="2683:34">7</literal></expr>:</case> <comment type="line" pos:start="2683:37" pos:end="2683:41">// tl</comment>

                                <expr_stmt pos:start="2685:33" pos:end="2685:47"><expr pos:start="2685:33" pos:end="2685:46"><call pos:start="2685:33" pos:end="2685:46"><name pos:start="2685:33" pos:end="2685:42">save_state</name><argument_list pos:start="2685:43" pos:end="2685:46">(<argument pos:start="2685:44" pos:end="2685:45"><expr pos:start="2685:44" pos:end="2685:45"><name pos:start="2685:44" pos:end="2685:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2687:33" pos:end="2689:76"><expr pos:start="2687:33" pos:end="2689:75"><call pos:start="2687:33" pos:end="2689:75"><name pos:start="2687:33" pos:end="2687:47">tcg_gen_st32_tl</name><argument_list pos:start="2687:48" pos:end="2689:75">(<argument pos:start="2687:49" pos:end="2687:56"><expr pos:start="2687:49" pos:end="2687:56"><name pos:start="2687:49" pos:end="2687:56">cpu_tmp0</name></expr></argument>, <argument pos:start="2687:59" pos:end="2687:65"><expr pos:start="2687:59" pos:end="2687:65"><name pos:start="2687:59" pos:end="2687:65">cpu_env</name></expr></argument>,

                                               <argument pos:start="2689:48" pos:end="2689:74"><expr pos:start="2689:48" pos:end="2689:74"><call pos:start="2689:48" pos:end="2689:74"><name pos:start="2689:48" pos:end="2689:55">offsetof</name><argument_list pos:start="2689:56" pos:end="2689:74">(<argument pos:start="2689:57" pos:end="2689:69"><expr pos:start="2689:57" pos:end="2689:69"><name pos:start="2689:57" pos:end="2689:69">CPUSPARCState</name></expr></argument>, <argument pos:start="2689:72" pos:end="2689:73"><expr pos:start="2689:72" pos:end="2689:73"><name pos:start="2689:72" pos:end="2689:73">tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2691:33" pos:end="2691:53"><expr pos:start="2691:33" pos:end="2691:52"><name pos:start="2691:33" pos:end="2691:39"><name pos:start="2691:33" pos:end="2691:34">dc</name><operator pos:start="2691:35" pos:end="2691:36">-&gt;</operator><name pos:start="2691:37" pos:end="2691:39">npc</name></name> <operator pos:start="2691:41" pos:end="2691:41">=</operator> <name pos:start="2691:43" pos:end="2691:52">DYNAMIC_PC</name></expr>;</expr_stmt>

                                <break pos:start="2693:33" pos:end="2693:38">break;</break>

                            <case pos:start="2695:29" pos:end="2695:35">case <expr pos:start="2695:34" pos:end="2695:34"><literal type="number" pos:start="2695:34" pos:end="2695:34">8</literal></expr>:</case> <comment type="line" pos:start="2695:37" pos:end="2695:42">// pil</comment>

                                <expr_stmt pos:start="2697:33" pos:end="2697:68"><expr pos:start="2697:33" pos:end="2697:67"><call pos:start="2697:33" pos:end="2697:67"><name pos:start="2697:33" pos:end="2697:48">gen_helper_wrpil</name><argument_list pos:start="2697:49" pos:end="2697:67">(<argument pos:start="2697:50" pos:end="2697:56"><expr pos:start="2697:50" pos:end="2697:56"><name pos:start="2697:50" pos:end="2697:56">cpu_env</name></expr></argument>, <argument pos:start="2697:59" pos:end="2697:66"><expr pos:start="2697:59" pos:end="2697:66"><name pos:start="2697:59" pos:end="2697:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2699:33" pos:end="2699:38">break;</break>

                            <case pos:start="2701:29" pos:end="2701:35">case <expr pos:start="2701:34" pos:end="2701:34"><literal type="number" pos:start="2701:34" pos:end="2701:34">9</literal></expr>:</case> <comment type="line" pos:start="2701:37" pos:end="2701:42">// cwp</comment>

                                <expr_stmt pos:start="2703:33" pos:end="2703:68"><expr pos:start="2703:33" pos:end="2703:67"><call pos:start="2703:33" pos:end="2703:67"><name pos:start="2703:33" pos:end="2703:48">gen_helper_wrcwp</name><argument_list pos:start="2703:49" pos:end="2703:67">(<argument pos:start="2703:50" pos:end="2703:56"><expr pos:start="2703:50" pos:end="2703:56"><name pos:start="2703:50" pos:end="2703:56">cpu_env</name></expr></argument>, <argument pos:start="2703:59" pos:end="2703:66"><expr pos:start="2703:59" pos:end="2703:66"><name pos:start="2703:59" pos:end="2703:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2705:33" pos:end="2705:38">break;</break>

                            <case pos:start="2707:29" pos:end="2707:36">case <expr pos:start="2707:34" pos:end="2707:35"><literal type="number" pos:start="2707:34" pos:end="2707:35">10</literal></expr>:</case> <comment type="line" pos:start="2707:38" pos:end="2707:47">// cansave</comment>

                                <expr_stmt pos:start="2709:33" pos:end="2713:67"><expr pos:start="2709:33" pos:end="2713:66"><call pos:start="2709:33" pos:end="2713:66"><name pos:start="2709:33" pos:end="2709:47">tcg_gen_st32_tl</name><argument_list pos:start="2709:48" pos:end="2713:66">(<argument pos:start="2709:49" pos:end="2709:56"><expr pos:start="2709:49" pos:end="2709:56"><name pos:start="2709:49" pos:end="2709:56">cpu_tmp0</name></expr></argument>, <argument pos:start="2709:59" pos:end="2709:65"><expr pos:start="2709:59" pos:end="2709:65"><name pos:start="2709:59" pos:end="2709:65">cpu_env</name></expr></argument>,

                                                <argument pos:start="2711:49" pos:end="2713:65"><expr pos:start="2711:49" pos:end="2713:65"><call pos:start="2711:49" pos:end="2713:65"><name pos:start="2711:49" pos:end="2711:56">offsetof</name><argument_list pos:start="2711:57" pos:end="2713:65">(<argument pos:start="2711:58" pos:end="2711:70"><expr pos:start="2711:58" pos:end="2711:70"><name pos:start="2711:58" pos:end="2711:70">CPUSPARCState</name></expr></argument>,

                                                         <argument pos:start="2713:58" pos:end="2713:64"><expr pos:start="2713:58" pos:end="2713:64"><name pos:start="2713:58" pos:end="2713:64">cansave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2715:33" pos:end="2715:38">break;</break>

                            <case pos:start="2717:29" pos:end="2717:36">case <expr pos:start="2717:34" pos:end="2717:35"><literal type="number" pos:start="2717:34" pos:end="2717:35">11</literal></expr>:</case> <comment type="line" pos:start="2717:38" pos:end="2717:50">// canrestore</comment>

                                <expr_stmt pos:start="2719:33" pos:end="2723:70"><expr pos:start="2719:33" pos:end="2723:69"><call pos:start="2719:33" pos:end="2723:69"><name pos:start="2719:33" pos:end="2719:47">tcg_gen_st32_tl</name><argument_list pos:start="2719:48" pos:end="2723:69">(<argument pos:start="2719:49" pos:end="2719:56"><expr pos:start="2719:49" pos:end="2719:56"><name pos:start="2719:49" pos:end="2719:56">cpu_tmp0</name></expr></argument>, <argument pos:start="2719:59" pos:end="2719:65"><expr pos:start="2719:59" pos:end="2719:65"><name pos:start="2719:59" pos:end="2719:65">cpu_env</name></expr></argument>,

                                                <argument pos:start="2721:49" pos:end="2723:68"><expr pos:start="2721:49" pos:end="2723:68"><call pos:start="2721:49" pos:end="2723:68"><name pos:start="2721:49" pos:end="2721:56">offsetof</name><argument_list pos:start="2721:57" pos:end="2723:68">(<argument pos:start="2721:58" pos:end="2721:70"><expr pos:start="2721:58" pos:end="2721:70"><name pos:start="2721:58" pos:end="2721:70">CPUSPARCState</name></expr></argument>,

                                                         <argument pos:start="2723:58" pos:end="2723:67"><expr pos:start="2723:58" pos:end="2723:67"><name pos:start="2723:58" pos:end="2723:67">canrestore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2725:33" pos:end="2725:38">break;</break>

                            <case pos:start="2727:29" pos:end="2727:36">case <expr pos:start="2727:34" pos:end="2727:35"><literal type="number" pos:start="2727:34" pos:end="2727:35">12</literal></expr>:</case> <comment type="line" pos:start="2727:38" pos:end="2727:48">// cleanwin</comment>

                                <expr_stmt pos:start="2729:33" pos:end="2733:68"><expr pos:start="2729:33" pos:end="2733:67"><call pos:start="2729:33" pos:end="2733:67"><name pos:start="2729:33" pos:end="2729:47">tcg_gen_st32_tl</name><argument_list pos:start="2729:48" pos:end="2733:67">(<argument pos:start="2729:49" pos:end="2729:56"><expr pos:start="2729:49" pos:end="2729:56"><name pos:start="2729:49" pos:end="2729:56">cpu_tmp0</name></expr></argument>, <argument pos:start="2729:59" pos:end="2729:65"><expr pos:start="2729:59" pos:end="2729:65"><name pos:start="2729:59" pos:end="2729:65">cpu_env</name></expr></argument>,

                                                <argument pos:start="2731:49" pos:end="2733:66"><expr pos:start="2731:49" pos:end="2733:66"><call pos:start="2731:49" pos:end="2733:66"><name pos:start="2731:49" pos:end="2731:56">offsetof</name><argument_list pos:start="2731:57" pos:end="2733:66">(<argument pos:start="2731:58" pos:end="2731:70"><expr pos:start="2731:58" pos:end="2731:70"><name pos:start="2731:58" pos:end="2731:70">CPUSPARCState</name></expr></argument>,

                                                         <argument pos:start="2733:58" pos:end="2733:65"><expr pos:start="2733:58" pos:end="2733:65"><name pos:start="2733:58" pos:end="2733:65">cleanwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2735:33" pos:end="2735:38">break;</break>

                            <case pos:start="2737:29" pos:end="2737:36">case <expr pos:start="2737:34" pos:end="2737:35"><literal type="number" pos:start="2737:34" pos:end="2737:35">13</literal></expr>:</case> <comment type="line" pos:start="2737:38" pos:end="2737:48">// otherwin</comment>

                                <expr_stmt pos:start="2739:33" pos:end="2743:68"><expr pos:start="2739:33" pos:end="2743:67"><call pos:start="2739:33" pos:end="2743:67"><name pos:start="2739:33" pos:end="2739:47">tcg_gen_st32_tl</name><argument_list pos:start="2739:48" pos:end="2743:67">(<argument pos:start="2739:49" pos:end="2739:56"><expr pos:start="2739:49" pos:end="2739:56"><name pos:start="2739:49" pos:end="2739:56">cpu_tmp0</name></expr></argument>, <argument pos:start="2739:59" pos:end="2739:65"><expr pos:start="2739:59" pos:end="2739:65"><name pos:start="2739:59" pos:end="2739:65">cpu_env</name></expr></argument>,

                                                <argument pos:start="2741:49" pos:end="2743:66"><expr pos:start="2741:49" pos:end="2743:66"><call pos:start="2741:49" pos:end="2743:66"><name pos:start="2741:49" pos:end="2741:56">offsetof</name><argument_list pos:start="2741:57" pos:end="2743:66">(<argument pos:start="2741:58" pos:end="2741:70"><expr pos:start="2741:58" pos:end="2741:70"><name pos:start="2741:58" pos:end="2741:70">CPUSPARCState</name></expr></argument>,

                                                         <argument pos:start="2743:58" pos:end="2743:65"><expr pos:start="2743:58" pos:end="2743:65"><name pos:start="2743:58" pos:end="2743:65">otherwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2745:33" pos:end="2745:38">break;</break>

                            <case pos:start="2747:29" pos:end="2747:36">case <expr pos:start="2747:34" pos:end="2747:35"><literal type="number" pos:start="2747:34" pos:end="2747:35">14</literal></expr>:</case> <comment type="line" pos:start="2747:38" pos:end="2747:46">// wstate</comment>

                                <expr_stmt pos:start="2749:33" pos:end="2753:66"><expr pos:start="2749:33" pos:end="2753:65"><call pos:start="2749:33" pos:end="2753:65"><name pos:start="2749:33" pos:end="2749:47">tcg_gen_st32_tl</name><argument_list pos:start="2749:48" pos:end="2753:65">(<argument pos:start="2749:49" pos:end="2749:56"><expr pos:start="2749:49" pos:end="2749:56"><name pos:start="2749:49" pos:end="2749:56">cpu_tmp0</name></expr></argument>, <argument pos:start="2749:59" pos:end="2749:65"><expr pos:start="2749:59" pos:end="2749:65"><name pos:start="2749:59" pos:end="2749:65">cpu_env</name></expr></argument>,

                                                <argument pos:start="2751:49" pos:end="2753:64"><expr pos:start="2751:49" pos:end="2753:64"><call pos:start="2751:49" pos:end="2753:64"><name pos:start="2751:49" pos:end="2751:56">offsetof</name><argument_list pos:start="2751:57" pos:end="2753:64">(<argument pos:start="2751:58" pos:end="2751:70"><expr pos:start="2751:58" pos:end="2751:70"><name pos:start="2751:58" pos:end="2751:70">CPUSPARCState</name></expr></argument>,

                                                         <argument pos:start="2753:58" pos:end="2753:63"><expr pos:start="2753:58" pos:end="2753:63"><name pos:start="2753:58" pos:end="2753:63">wstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2755:33" pos:end="2755:38">break;</break>

                            <case pos:start="2757:29" pos:end="2757:36">case <expr pos:start="2757:34" pos:end="2757:35"><literal type="number" pos:start="2757:34" pos:end="2757:35">16</literal></expr>:</case> <comment type="line" pos:start="2757:38" pos:end="2757:49">// UA2005 gl</comment>

                                <expr_stmt pos:start="2759:33" pos:end="2759:57"><expr pos:start="2759:33" pos:end="2759:56"><call pos:start="2759:33" pos:end="2759:56"><name pos:start="2759:33" pos:end="2759:48">CHECK_IU_FEATURE</name><argument_list pos:start="2759:49" pos:end="2759:56">(<argument pos:start="2759:50" pos:end="2759:51"><expr pos:start="2759:50" pos:end="2759:51"><name pos:start="2759:50" pos:end="2759:51">dc</name></expr></argument>, <argument pos:start="2759:54" pos:end="2759:55"><expr pos:start="2759:54" pos:end="2759:55"><name pos:start="2759:54" pos:end="2759:55">GL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2761:33" pos:end="2763:77"><expr pos:start="2761:33" pos:end="2763:76"><call pos:start="2761:33" pos:end="2763:76"><name pos:start="2761:33" pos:end="2761:47">tcg_gen_st32_tl</name><argument_list pos:start="2761:48" pos:end="2763:76">(<argument pos:start="2761:49" pos:end="2761:56"><expr pos:start="2761:49" pos:end="2761:56"><name pos:start="2761:49" pos:end="2761:56">cpu_tmp0</name></expr></argument>, <argument pos:start="2761:59" pos:end="2761:65"><expr pos:start="2761:59" pos:end="2761:65"><name pos:start="2761:59" pos:end="2761:65">cpu_env</name></expr></argument>,

                                                <argument pos:start="2763:49" pos:end="2763:75"><expr pos:start="2763:49" pos:end="2763:75"><call pos:start="2763:49" pos:end="2763:75"><name pos:start="2763:49" pos:end="2763:56">offsetof</name><argument_list pos:start="2763:57" pos:end="2763:75">(<argument pos:start="2763:58" pos:end="2763:70"><expr pos:start="2763:58" pos:end="2763:70"><name pos:start="2763:58" pos:end="2763:70">CPUSPARCState</name></expr></argument>, <argument pos:start="2763:73" pos:end="2763:74"><expr pos:start="2763:73" pos:end="2763:74"><name pos:start="2763:73" pos:end="2763:74">gl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2765:33" pos:end="2765:38">break;</break>

                            <case pos:start="2767:29" pos:end="2767:36">case <expr pos:start="2767:34" pos:end="2767:35"><literal type="number" pos:start="2767:34" pos:end="2767:35">26</literal></expr>:</case> <comment type="line" pos:start="2767:38" pos:end="2767:60">// UA2005 strand status</comment>

                                <expr_stmt pos:start="2769:33" pos:end="2769:59"><expr pos:start="2769:33" pos:end="2769:58"><call pos:start="2769:33" pos:end="2769:58"><name pos:start="2769:33" pos:end="2769:48">CHECK_IU_FEATURE</name><argument_list pos:start="2769:49" pos:end="2769:58">(<argument pos:start="2769:50" pos:end="2769:51"><expr pos:start="2769:50" pos:end="2769:51"><name pos:start="2769:50" pos:end="2769:51">dc</name></expr></argument>, <argument pos:start="2769:54" pos:end="2769:57"><expr pos:start="2769:54" pos:end="2769:57"><name pos:start="2769:54" pos:end="2769:57">HYPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="2771:33" pos:end="2773:51"><if pos:start="2771:33" pos:end="2773:51">if <condition pos:start="2771:36" pos:end="2771:52">(<expr pos:start="2771:37" pos:end="2771:51"><operator pos:start="2771:37" pos:end="2771:37">!</operator><call pos:start="2771:38" pos:end="2771:51"><name pos:start="2771:38" pos:end="2771:47">hypervisor</name><argument_list pos:start="2771:48" pos:end="2771:51">(<argument pos:start="2771:49" pos:end="2771:50"><expr pos:start="2771:49" pos:end="2771:50"><name pos:start="2771:49" pos:end="2771:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2773:37" pos:end="2773:51"><block_content pos:start="2773:37" pos:end="2773:51">

                                    <goto pos:start="2773:37" pos:end="2773:51">goto <name pos:start="2773:42" pos:end="2773:50">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="2775:33" pos:end="2775:66"><expr pos:start="2775:33" pos:end="2775:65"><call pos:start="2775:33" pos:end="2775:65"><name pos:start="2775:33" pos:end="2775:46">tcg_gen_mov_tl</name><argument_list pos:start="2775:47" pos:end="2775:65">(<argument pos:start="2775:48" pos:end="2775:54"><expr pos:start="2775:48" pos:end="2775:54"><name pos:start="2775:48" pos:end="2775:54">cpu_ssr</name></expr></argument>, <argument pos:start="2775:57" pos:end="2775:64"><expr pos:start="2775:57" pos:end="2775:64"><name pos:start="2775:57" pos:end="2775:64">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2777:33" pos:end="2777:38">break;</break>

                            <default pos:start="2779:29" pos:end="2779:36">default:</default>

                                <goto pos:start="2781:33" pos:end="2781:50">goto <name pos:start="2781:38" pos:end="2781:49">illegal_insn</name>;</goto>

                            </block_content>}</block></switch>

<cpp:else pos:start="2785:1" pos:end="2785:5">#<cpp:directive pos:start="2785:2" pos:end="2785:5">else</cpp:directive></cpp:else>

                            <expr_stmt pos:start="2787:29" pos:end="2787:68"><expr pos:start="2787:29" pos:end="2787:67"><call pos:start="2787:29" pos:end="2787:67"><name pos:start="2787:29" pos:end="2787:48">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2787:49" pos:end="2787:67">(<argument pos:start="2787:50" pos:end="2787:56"><expr pos:start="2787:50" pos:end="2787:56"><name pos:start="2787:50" pos:end="2787:56">cpu_wim</name></expr></argument>, <argument pos:start="2787:59" pos:end="2787:66"><expr pos:start="2787:59" pos:end="2787:66"><name pos:start="2787:59" pos:end="2787:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2789:29" pos:end="2798:0"><if pos:start="2789:29" pos:end="2798:0">if <condition pos:start="2789:32" pos:end="2789:56">(<expr pos:start="2789:33" pos:end="2789:55"><name pos:start="2789:33" pos:end="2789:49"><name pos:start="2789:33" pos:end="2789:34">dc</name><operator pos:start="2789:35" pos:end="2789:36">-&gt;</operator><name pos:start="2789:37" pos:end="2789:39">def</name><operator pos:start="2789:40" pos:end="2789:41">-&gt;</operator><name pos:start="2789:42" pos:end="2789:49">nwindows</name></name> <operator pos:start="2789:51" pos:end="2789:52">!=</operator> <literal type="number" pos:start="2789:54" pos:end="2789:55">32</literal></expr>)</condition> <block pos:start="2789:58" pos:end="2798:0">{<block_content pos:start="2791:33" pos:end="2793:78">

                                <expr_stmt pos:start="2791:33" pos:end="2793:78"><expr pos:start="2791:33" pos:end="2793:77"><call pos:start="2791:33" pos:end="2793:77"><name pos:start="2791:33" pos:end="2791:47">tcg_gen_andi_tl</name><argument_list pos:start="2791:48" pos:end="2793:77">(<argument pos:start="2791:49" pos:end="2791:55"><expr pos:start="2791:49" pos:end="2791:55"><name pos:start="2791:49" pos:end="2791:55">cpu_wim</name></expr></argument>, <argument pos:start="2791:58" pos:end="2791:64"><expr pos:start="2791:58" pos:end="2791:64"><name pos:start="2791:58" pos:end="2791:64">cpu_wim</name></expr></argument>,

                                                <argument pos:start="2793:49" pos:end="2793:76"><expr pos:start="2793:49" pos:end="2793:76"><operator pos:start="2793:49" pos:end="2793:49">(</operator><literal type="number" pos:start="2793:50" pos:end="2793:50">1</literal> <operator pos:start="2793:52" pos:end="2793:53">&lt;&lt;</operator> <name pos:start="2793:55" pos:end="2793:71"><name pos:start="2793:55" pos:end="2793:56">dc</name><operator pos:start="2793:57" pos:end="2793:58">-&gt;</operator><name pos:start="2793:59" pos:end="2793:61">def</name><operator pos:start="2793:62" pos:end="2793:63">-&gt;</operator><name pos:start="2793:64" pos:end="2793:71">nwindows</name></name><operator pos:start="2793:72" pos:end="2793:72">)</operator> <operator pos:start="2793:74" pos:end="2793:74">-</operator> <literal type="number" pos:start="2793:76" pos:end="2793:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="2797:1" pos:end="2797:6">#<cpp:directive pos:start="2797:2" pos:end="2797:6">endif</cpp:directive></cpp:endif>

                        </block_content>}</block>

                        <break pos:start="2801:25" pos:end="2801:30">break;</break>

                    <case pos:start="2803:21" pos:end="2803:30">case <expr pos:start="2803:26" pos:end="2803:29"><literal type="number" pos:start="2803:26" pos:end="2803:29">0x33</literal></expr>:</case> <comment type="block" pos:start="2803:32" pos:end="2803:56">/* wrtbr, UA2005 wrhpr */</comment>

                        <block pos:start="2805:25" pos:end="2895:25">{<block_content pos:start="2809:29" pos:end="2894:0">

<cpp:ifndef pos:start="2807:1" pos:end="2807:22">#<cpp:directive pos:start="2807:2" pos:end="2807:7">ifndef</cpp:directive> <name pos:start="2807:9" pos:end="2807:22">TARGET_SPARC64</name></cpp:ifndef>

                            <if_stmt pos:start="2809:29" pos:end="2811:47"><if pos:start="2809:29" pos:end="2811:47">if <condition pos:start="2809:32" pos:end="2809:48">(<expr pos:start="2809:33" pos:end="2809:47"><operator pos:start="2809:33" pos:end="2809:33">!</operator><call pos:start="2809:34" pos:end="2809:47"><name pos:start="2809:34" pos:end="2809:43">supervisor</name><argument_list pos:start="2809:44" pos:end="2809:47">(<argument pos:start="2809:45" pos:end="2809:46"><expr pos:start="2809:45" pos:end="2809:46"><name pos:start="2809:45" pos:end="2809:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2811:33" pos:end="2811:47"><block_content pos:start="2811:33" pos:end="2811:47">

                                <goto pos:start="2811:33" pos:end="2811:47">goto <name pos:start="2811:38" pos:end="2811:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2813:29" pos:end="2816:0"><expr pos:start="2813:29" pos:end="2813:71"><call pos:start="2813:29" pos:end="2813:71"><name pos:start="2813:29" pos:end="2813:42">tcg_gen_xor_tl</name><argument_list pos:start="2813:43" pos:end="2813:71">(<argument pos:start="2813:44" pos:end="2813:50"><expr pos:start="2813:44" pos:end="2813:50"><name pos:start="2813:44" pos:end="2813:50">cpu_tbr</name></expr></argument>, <argument pos:start="2813:53" pos:end="2813:60"><expr pos:start="2813:53" pos:end="2813:60"><name pos:start="2813:53" pos:end="2813:60">cpu_src1</name></expr></argument>, <argument pos:start="2813:63" pos:end="2813:70"><expr pos:start="2813:63" pos:end="2813:70"><name pos:start="2813:63" pos:end="2813:70">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="2815:1" pos:end="2815:5">#<cpp:directive pos:start="2815:2" pos:end="2815:5">else</cpp:directive></cpp:else>

                            <expr_stmt pos:start="2817:29" pos:end="2817:55"><expr pos:start="2817:29" pos:end="2817:54"><call pos:start="2817:29" pos:end="2817:54"><name pos:start="2817:29" pos:end="2817:44">CHECK_IU_FEATURE</name><argument_list pos:start="2817:45" pos:end="2817:54">(<argument pos:start="2817:46" pos:end="2817:47"><expr pos:start="2817:46" pos:end="2817:47"><name pos:start="2817:46" pos:end="2817:47">dc</name></expr></argument>, <argument pos:start="2817:50" pos:end="2817:53"><expr pos:start="2817:50" pos:end="2817:53"><name pos:start="2817:50" pos:end="2817:53">HYPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2819:29" pos:end="2821:47"><if pos:start="2819:29" pos:end="2821:47">if <condition pos:start="2819:32" pos:end="2819:48">(<expr pos:start="2819:33" pos:end="2819:47"><operator pos:start="2819:33" pos:end="2819:33">!</operator><call pos:start="2819:34" pos:end="2819:47"><name pos:start="2819:34" pos:end="2819:43">hypervisor</name><argument_list pos:start="2819:44" pos:end="2819:47">(<argument pos:start="2819:45" pos:end="2819:46"><expr pos:start="2819:45" pos:end="2819:46"><name pos:start="2819:45" pos:end="2819:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2821:33" pos:end="2821:47"><block_content pos:start="2821:33" pos:end="2821:47">

                                <goto pos:start="2821:33" pos:end="2821:47">goto <name pos:start="2821:38" pos:end="2821:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2823:29" pos:end="2823:73"><expr pos:start="2823:29" pos:end="2823:72"><call pos:start="2823:29" pos:end="2823:72"><name pos:start="2823:29" pos:end="2823:42">tcg_gen_xor_tl</name><argument_list pos:start="2823:43" pos:end="2823:72">(<argument pos:start="2823:44" pos:end="2823:51"><expr pos:start="2823:44" pos:end="2823:51"><name pos:start="2823:44" pos:end="2823:51">cpu_tmp0</name></expr></argument>, <argument pos:start="2823:54" pos:end="2823:61"><expr pos:start="2823:54" pos:end="2823:61"><name pos:start="2823:54" pos:end="2823:61">cpu_src1</name></expr></argument>, <argument pos:start="2823:64" pos:end="2823:71"><expr pos:start="2823:64" pos:end="2823:71"><name pos:start="2823:64" pos:end="2823:71">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2825:29" pos:end="2894:0">switch <condition pos:start="2825:36" pos:end="2825:39">(<expr pos:start="2825:37" pos:end="2825:38"><name pos:start="2825:37" pos:end="2825:38">rd</name></expr>)</condition> <block pos:start="2825:41" pos:end="2894:0">{<block_content pos:start="2827:29" pos:end="2889:50">

                            <case pos:start="2827:29" pos:end="2827:35">case <expr pos:start="2827:34" pos:end="2827:34"><literal type="number" pos:start="2827:34" pos:end="2827:34">0</literal></expr>:</case> <comment type="line" pos:start="2827:37" pos:end="2827:46">// hpstate</comment>

                                <comment type="line" pos:start="2829:33" pos:end="2829:58">// XXX gen_op_wrhpstate();</comment>

                                <expr_stmt pos:start="2831:33" pos:end="2831:47"><expr pos:start="2831:33" pos:end="2831:46"><call pos:start="2831:33" pos:end="2831:46"><name pos:start="2831:33" pos:end="2831:42">save_state</name><argument_list pos:start="2831:43" pos:end="2831:46">(<argument pos:start="2831:44" pos:end="2831:45"><expr pos:start="2831:44" pos:end="2831:45"><name pos:start="2831:44" pos:end="2831:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2833:33" pos:end="2833:51"><expr pos:start="2833:33" pos:end="2833:50"><call pos:start="2833:33" pos:end="2833:50"><name pos:start="2833:33" pos:end="2833:48">gen_op_next_insn</name><argument_list pos:start="2833:49" pos:end="2833:50">()</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2835:33" pos:end="2835:51"><expr pos:start="2835:33" pos:end="2835:50"><call pos:start="2835:33" pos:end="2835:50"><name pos:start="2835:33" pos:end="2835:47">tcg_gen_exit_tb</name><argument_list pos:start="2835:48" pos:end="2835:50">(<argument pos:start="2835:49" pos:end="2835:49"><expr pos:start="2835:49" pos:end="2835:49"><literal type="number" pos:start="2835:49" pos:end="2835:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2837:33" pos:end="2837:46"><expr pos:start="2837:33" pos:end="2837:45"><name pos:start="2837:33" pos:end="2837:41"><name pos:start="2837:33" pos:end="2837:34">dc</name><operator pos:start="2837:35" pos:end="2837:36">-&gt;</operator><name pos:start="2837:37" pos:end="2837:41">is_br</name></name> <operator pos:start="2837:43" pos:end="2837:43">=</operator> <literal type="number" pos:start="2837:45" pos:end="2837:45">1</literal></expr>;</expr_stmt>

                                <break pos:start="2839:33" pos:end="2839:38">break;</break>

                            <case pos:start="2841:29" pos:end="2841:35">case <expr pos:start="2841:34" pos:end="2841:34"><literal type="number" pos:start="2841:34" pos:end="2841:34">1</literal></expr>:</case> <comment type="line" pos:start="2841:37" pos:end="2841:46">// htstate</comment>

                                <comment type="line" pos:start="2843:33" pos:end="2843:58">// XXX gen_op_wrhtstate();</comment>

                                <break pos:start="2845:33" pos:end="2845:38">break;</break>

                            <case pos:start="2847:29" pos:end="2847:35">case <expr pos:start="2847:34" pos:end="2847:34"><literal type="number" pos:start="2847:34" pos:end="2847:34">3</literal></expr>:</case> <comment type="line" pos:start="2847:37" pos:end="2847:44">// hintp</comment>

                                <expr_stmt pos:start="2849:33" pos:end="2849:68"><expr pos:start="2849:33" pos:end="2849:67"><call pos:start="2849:33" pos:end="2849:67"><name pos:start="2849:33" pos:end="2849:46">tcg_gen_mov_tl</name><argument_list pos:start="2849:47" pos:end="2849:67">(<argument pos:start="2849:48" pos:end="2849:56"><expr pos:start="2849:48" pos:end="2849:56"><name pos:start="2849:48" pos:end="2849:56">cpu_hintp</name></expr></argument>, <argument pos:start="2849:59" pos:end="2849:66"><expr pos:start="2849:59" pos:end="2849:66"><name pos:start="2849:59" pos:end="2849:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2851:33" pos:end="2851:38">break;</break>

                            <case pos:start="2853:29" pos:end="2853:35">case <expr pos:start="2853:34" pos:end="2853:34"><literal type="number" pos:start="2853:34" pos:end="2853:34">5</literal></expr>:</case> <comment type="line" pos:start="2853:37" pos:end="2853:43">// htba</comment>

                                <expr_stmt pos:start="2855:33" pos:end="2855:67"><expr pos:start="2855:33" pos:end="2855:66"><call pos:start="2855:33" pos:end="2855:66"><name pos:start="2855:33" pos:end="2855:46">tcg_gen_mov_tl</name><argument_list pos:start="2855:47" pos:end="2855:66">(<argument pos:start="2855:48" pos:end="2855:55"><expr pos:start="2855:48" pos:end="2855:55"><name pos:start="2855:48" pos:end="2855:55">cpu_htba</name></expr></argument>, <argument pos:start="2855:58" pos:end="2855:65"><expr pos:start="2855:58" pos:end="2855:65"><name pos:start="2855:58" pos:end="2855:65">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2857:33" pos:end="2857:38">break;</break>

                            <case pos:start="2859:29" pos:end="2859:36">case <expr pos:start="2859:34" pos:end="2859:35"><literal type="number" pos:start="2859:34" pos:end="2859:35">31</literal></expr>:</case> <comment type="line" pos:start="2859:38" pos:end="2859:51">// hstick_cmpr</comment>

                                <block pos:start="2861:33" pos:end="2881:33">{<block_content pos:start="2863:37" pos:end="2879:65">

                                    <decl_stmt pos:start="2863:37" pos:end="2863:55"><decl pos:start="2863:37" pos:end="2863:54"><type pos:start="2863:37" pos:end="2863:44"><name pos:start="2863:37" pos:end="2863:44">TCGv_ptr</name></type> <name pos:start="2863:46" pos:end="2863:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2867:37" pos:end="2867:78"><expr pos:start="2867:37" pos:end="2867:77"><call pos:start="2867:37" pos:end="2867:77"><name pos:start="2867:37" pos:end="2867:50">tcg_gen_mov_tl</name><argument_list pos:start="2867:51" pos:end="2867:77">(<argument pos:start="2867:52" pos:end="2867:66"><expr pos:start="2867:52" pos:end="2867:66"><name pos:start="2867:52" pos:end="2867:66">cpu_hstick_cmpr</name></expr></argument>, <argument pos:start="2867:69" pos:end="2867:76"><expr pos:start="2867:69" pos:end="2867:76"><name pos:start="2867:69" pos:end="2867:76">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2869:37" pos:end="2869:67"><expr pos:start="2869:37" pos:end="2869:66"><name pos:start="2869:37" pos:end="2869:45">r_tickptr</name> <operator pos:start="2869:47" pos:end="2869:47">=</operator> <call pos:start="2869:49" pos:end="2869:66"><name pos:start="2869:49" pos:end="2869:64">tcg_temp_new_ptr</name><argument_list pos:start="2869:65" pos:end="2869:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2871:37" pos:end="2873:84"><expr pos:start="2871:37" pos:end="2873:83"><call pos:start="2871:37" pos:end="2873:83"><name pos:start="2871:37" pos:end="2871:50">tcg_gen_ld_ptr</name><argument_list pos:start="2871:51" pos:end="2873:83">(<argument pos:start="2871:52" pos:end="2871:60"><expr pos:start="2871:52" pos:end="2871:60"><name pos:start="2871:52" pos:end="2871:60">r_tickptr</name></expr></argument>, <argument pos:start="2871:63" pos:end="2871:69"><expr pos:start="2871:63" pos:end="2871:69"><name pos:start="2871:63" pos:end="2871:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2873:52" pos:end="2873:82"><expr pos:start="2873:52" pos:end="2873:82"><call pos:start="2873:52" pos:end="2873:82"><name pos:start="2873:52" pos:end="2873:59">offsetof</name><argument_list pos:start="2873:60" pos:end="2873:82">(<argument pos:start="2873:61" pos:end="2873:73"><expr pos:start="2873:61" pos:end="2873:73"><name pos:start="2873:61" pos:end="2873:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2873:76" pos:end="2873:81"><expr pos:start="2873:76" pos:end="2873:81"><name pos:start="2873:76" pos:end="2873:81">hstick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2875:37" pos:end="2877:79"><expr pos:start="2875:37" pos:end="2877:78"><call pos:start="2875:37" pos:end="2877:78"><name pos:start="2875:37" pos:end="2875:61">gen_helper_tick_set_limit</name><argument_list pos:start="2875:62" pos:end="2877:78">(<argument pos:start="2875:63" pos:end="2875:71"><expr pos:start="2875:63" pos:end="2875:71"><name pos:start="2875:63" pos:end="2875:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2877:63" pos:end="2877:77"><expr pos:start="2877:63" pos:end="2877:77"><name pos:start="2877:63" pos:end="2877:77">cpu_hstick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2879:37" pos:end="2879:65"><expr pos:start="2879:37" pos:end="2879:64"><call pos:start="2879:37" pos:end="2879:64"><name pos:start="2879:37" pos:end="2879:53">tcg_temp_free_ptr</name><argument_list pos:start="2879:54" pos:end="2879:64">(<argument pos:start="2879:55" pos:end="2879:63"><expr pos:start="2879:55" pos:end="2879:63"><name pos:start="2879:55" pos:end="2879:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2883:33" pos:end="2883:38">break;</break>

                            <case pos:start="2885:29" pos:end="2885:35">case <expr pos:start="2885:34" pos:end="2885:34"><literal type="number" pos:start="2885:34" pos:end="2885:34">6</literal></expr>:</case> <comment type="line" pos:start="2885:37" pos:end="2885:52">// hver readonly</comment>

                            <default pos:start="2887:29" pos:end="2887:36">default:</default>

                                <goto pos:start="2889:33" pos:end="2889:50">goto <name pos:start="2889:38" pos:end="2889:49">illegal_insn</name>;</goto>

                            </block_content>}</block></switch>

<cpp:endif pos:start="2893:1" pos:end="2893:6">#<cpp:directive pos:start="2893:2" pos:end="2893:6">endif</cpp:directive></cpp:endif>

                        </block_content>}</block>

                        <break pos:start="2897:25" pos:end="2902:0">break;</break>

<cpp:endif pos:start="2899:1" pos:end="2899:6">#<cpp:directive pos:start="2899:2" pos:end="2899:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2901:1" pos:end="2901:21">#<cpp:directive pos:start="2901:2" pos:end="2901:6">ifdef</cpp:directive> <name pos:start="2901:8" pos:end="2901:21">TARGET_SPARC64</name></cpp:ifdef>

                    <case pos:start="2903:21" pos:end="2903:30">case <expr pos:start="2903:26" pos:end="2903:29"><literal type="number" pos:start="2903:26" pos:end="2903:29">0x2c</literal></expr>:</case> <comment type="block" pos:start="2903:32" pos:end="2903:45">/* V9 movcc */</comment>

                        <block pos:start="2905:25" pos:end="2971:25">{<block_content pos:start="2907:29" pos:end="2969:34">

                            <decl_stmt pos:start="2907:29" pos:end="2907:64"><decl pos:start="2907:29" pos:end="2907:63"><type pos:start="2907:29" pos:end="2907:31"><name pos:start="2907:29" pos:end="2907:31">int</name></type> <name pos:start="2907:33" pos:end="2907:34">cc</name> <init pos:start="2907:36" pos:end="2907:63">= <expr pos:start="2907:38" pos:end="2907:63"><call pos:start="2907:38" pos:end="2907:63"><name pos:start="2907:38" pos:end="2907:49">GET_FIELD_SP</name><argument_list pos:start="2907:50" pos:end="2907:63">(<argument pos:start="2907:51" pos:end="2907:54"><expr pos:start="2907:51" pos:end="2907:54"><name pos:start="2907:51" pos:end="2907:54">insn</name></expr></argument>, <argument pos:start="2907:57" pos:end="2907:58"><expr pos:start="2907:57" pos:end="2907:58"><literal type="number" pos:start="2907:57" pos:end="2907:58">11</literal></expr></argument>, <argument pos:start="2907:61" pos:end="2907:62"><expr pos:start="2907:61" pos:end="2907:62"><literal type="number" pos:start="2907:61" pos:end="2907:62">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="2909:29" pos:end="2909:66"><decl pos:start="2909:29" pos:end="2909:65"><type pos:start="2909:29" pos:end="2909:31"><name pos:start="2909:29" pos:end="2909:31">int</name></type> <name pos:start="2909:33" pos:end="2909:36">cond</name> <init pos:start="2909:38" pos:end="2909:65">= <expr pos:start="2909:40" pos:end="2909:65"><call pos:start="2909:40" pos:end="2909:65"><name pos:start="2909:40" pos:end="2909:51">GET_FIELD_SP</name><argument_list pos:start="2909:52" pos:end="2909:65">(<argument pos:start="2909:53" pos:end="2909:56"><expr pos:start="2909:53" pos:end="2909:56"><name pos:start="2909:53" pos:end="2909:56">insn</name></expr></argument>, <argument pos:start="2909:59" pos:end="2909:60"><expr pos:start="2909:59" pos:end="2909:60"><literal type="number" pos:start="2909:59" pos:end="2909:60">14</literal></expr></argument>, <argument pos:start="2909:63" pos:end="2909:64"><expr pos:start="2909:63" pos:end="2909:64"><literal type="number" pos:start="2909:63" pos:end="2909:64">17</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="2911:29" pos:end="2911:45"><decl pos:start="2911:29" pos:end="2911:44"><type pos:start="2911:29" pos:end="2911:40"><name pos:start="2911:29" pos:end="2911:40">DisasCompare</name></type> <name pos:start="2911:42" pos:end="2911:44">cmp</name></decl>;</decl_stmt>

                            <decl_stmt pos:start="2913:29" pos:end="2913:37"><decl pos:start="2913:29" pos:end="2913:36"><type pos:start="2913:29" pos:end="2913:32"><name pos:start="2913:29" pos:end="2913:32">TCGv</name></type> <name pos:start="2913:34" pos:end="2913:36">dst</name></decl>;</decl_stmt>



                            <if_stmt pos:start="2917:29" pos:end="2937:29"><if pos:start="2917:29" pos:end="2933:29">if <condition pos:start="2917:32" pos:end="2917:49">(<expr pos:start="2917:33" pos:end="2917:48"><name pos:start="2917:33" pos:end="2917:36">insn</name> <operator pos:start="2917:38" pos:end="2917:38">&amp;</operator> <operator pos:start="2917:40" pos:end="2917:40">(</operator><literal type="number" pos:start="2917:41" pos:end="2917:41">1</literal> <operator pos:start="2917:43" pos:end="2917:44">&lt;&lt;</operator> <literal type="number" pos:start="2917:46" pos:end="2917:47">18</literal><operator pos:start="2917:48" pos:end="2917:48">)</operator></expr>)</condition> <block pos:start="2917:51" pos:end="2933:29">{<block_content pos:start="2919:33" pos:end="2931:33">

                                <if_stmt pos:start="2919:33" pos:end="2931:33"><if pos:start="2919:33" pos:end="2923:33">if <condition pos:start="2919:36" pos:end="2919:44">(<expr pos:start="2919:37" pos:end="2919:43"><name pos:start="2919:37" pos:end="2919:38">cc</name> <operator pos:start="2919:40" pos:end="2919:41">==</operator> <literal type="number" pos:start="2919:43" pos:end="2919:43">0</literal></expr>)</condition> <block pos:start="2919:46" pos:end="2923:33">{<block_content pos:start="2921:37" pos:end="2921:67">

                                    <expr_stmt pos:start="2921:37" pos:end="2921:67"><expr pos:start="2921:37" pos:end="2921:66"><call pos:start="2921:37" pos:end="2921:66"><name pos:start="2921:37" pos:end="2921:47">gen_compare</name><argument_list pos:start="2921:48" pos:end="2921:66">(<argument pos:start="2921:49" pos:end="2921:52"><expr pos:start="2921:49" pos:end="2921:52"><operator pos:start="2921:49" pos:end="2921:49">&amp;</operator><name pos:start="2921:50" pos:end="2921:52">cmp</name></expr></argument>, <argument pos:start="2921:55" pos:end="2921:55"><expr pos:start="2921:55" pos:end="2921:55"><literal type="number" pos:start="2921:55" pos:end="2921:55">0</literal></expr></argument>, <argument pos:start="2921:58" pos:end="2921:61"><expr pos:start="2921:58" pos:end="2921:61"><name pos:start="2921:58" pos:end="2921:61">cond</name></expr></argument>, <argument pos:start="2921:64" pos:end="2921:65"><expr pos:start="2921:64" pos:end="2921:65"><name pos:start="2921:64" pos:end="2921:65">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></if> <if type="elseif" pos:start="2923:35" pos:end="2927:33">else if <condition pos:start="2923:43" pos:end="2923:51">(<expr pos:start="2923:44" pos:end="2923:50"><name pos:start="2923:44" pos:end="2923:45">cc</name> <operator pos:start="2923:47" pos:end="2923:48">==</operator> <literal type="number" pos:start="2923:50" pos:end="2923:50">2</literal></expr>)</condition> <block pos:start="2923:53" pos:end="2927:33">{<block_content pos:start="2925:37" pos:end="2925:67">

                                    <expr_stmt pos:start="2925:37" pos:end="2925:67"><expr pos:start="2925:37" pos:end="2925:66"><call pos:start="2925:37" pos:end="2925:66"><name pos:start="2925:37" pos:end="2925:47">gen_compare</name><argument_list pos:start="2925:48" pos:end="2925:66">(<argument pos:start="2925:49" pos:end="2925:52"><expr pos:start="2925:49" pos:end="2925:52"><operator pos:start="2925:49" pos:end="2925:49">&amp;</operator><name pos:start="2925:50" pos:end="2925:52">cmp</name></expr></argument>, <argument pos:start="2925:55" pos:end="2925:55"><expr pos:start="2925:55" pos:end="2925:55"><literal type="number" pos:start="2925:55" pos:end="2925:55">1</literal></expr></argument>, <argument pos:start="2925:58" pos:end="2925:61"><expr pos:start="2925:58" pos:end="2925:61"><name pos:start="2925:58" pos:end="2925:61">cond</name></expr></argument>, <argument pos:start="2925:64" pos:end="2925:65"><expr pos:start="2925:64" pos:end="2925:65"><name pos:start="2925:64" pos:end="2925:65">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="2927:35" pos:end="2931:33">else <block pos:start="2927:40" pos:end="2931:33">{<block_content pos:start="2929:37" pos:end="2929:54">

                                    <goto pos:start="2929:37" pos:end="2929:54">goto <name pos:start="2929:42" pos:end="2929:53">illegal_insn</name>;</goto>

                                </block_content>}</block></else></if_stmt>

                            </block_content>}</block></if> <else pos:start="2933:31" pos:end="2937:29">else <block pos:start="2933:36" pos:end="2937:29">{<block_content pos:start="2935:33" pos:end="2935:61">

                                <expr_stmt pos:start="2935:33" pos:end="2935:61"><expr pos:start="2935:33" pos:end="2935:60"><call pos:start="2935:33" pos:end="2935:60"><name pos:start="2935:33" pos:end="2935:44">gen_fcompare</name><argument_list pos:start="2935:45" pos:end="2935:60">(<argument pos:start="2935:46" pos:end="2935:49"><expr pos:start="2935:46" pos:end="2935:49"><operator pos:start="2935:46" pos:end="2935:46">&amp;</operator><name pos:start="2935:47" pos:end="2935:49">cmp</name></expr></argument>, <argument pos:start="2935:52" pos:end="2935:53"><expr pos:start="2935:52" pos:end="2935:53"><name pos:start="2935:52" pos:end="2935:53">cc</name></expr></argument>, <argument pos:start="2935:56" pos:end="2935:59"><expr pos:start="2935:56" pos:end="2935:59"><name pos:start="2935:56" pos:end="2935:59">cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>



                            <comment type="block" pos:start="2941:29" pos:end="2945:77">/* The get_src2 above loaded the normal 13-bit

                               immediate field, not the 11-bit field we have

                               in movcc.  But it did handle the reg case.  */</comment>

                            <if_stmt pos:start="2947:29" pos:end="2953:29"><if pos:start="2947:29" pos:end="2953:29">if <condition pos:start="2947:32" pos:end="2947:39">(<expr pos:start="2947:33" pos:end="2947:38"><name pos:start="2947:33" pos:end="2947:38">IS_IMM</name></expr>)</condition> <block pos:start="2947:41" pos:end="2953:29">{<block_content pos:start="2949:33" pos:end="2951:64">

                                <expr_stmt pos:start="2949:33" pos:end="2949:66"><expr pos:start="2949:33" pos:end="2949:65"><name pos:start="2949:33" pos:end="2949:36">simm</name> <operator pos:start="2949:38" pos:end="2949:38">=</operator> <call pos:start="2949:40" pos:end="2949:65"><name pos:start="2949:40" pos:end="2949:52">GET_FIELD_SPs</name><argument_list pos:start="2949:53" pos:end="2949:65">(<argument pos:start="2949:54" pos:end="2949:57"><expr pos:start="2949:54" pos:end="2949:57"><name pos:start="2949:54" pos:end="2949:57">insn</name></expr></argument>, <argument pos:start="2949:60" pos:end="2949:60"><expr pos:start="2949:60" pos:end="2949:60"><literal type="number" pos:start="2949:60" pos:end="2949:60">0</literal></expr></argument>, <argument pos:start="2949:63" pos:end="2949:64"><expr pos:start="2949:63" pos:end="2949:64"><literal type="number" pos:start="2949:63" pos:end="2949:64">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2951:33" pos:end="2951:64"><expr pos:start="2951:33" pos:end="2951:63"><call pos:start="2951:33" pos:end="2951:63"><name pos:start="2951:33" pos:end="2951:47">tcg_gen_movi_tl</name><argument_list pos:start="2951:48" pos:end="2951:63">(<argument pos:start="2951:49" pos:end="2951:56"><expr pos:start="2951:49" pos:end="2951:56"><name pos:start="2951:49" pos:end="2951:56">cpu_src2</name></expr></argument>, <argument pos:start="2951:59" pos:end="2951:62"><expr pos:start="2951:59" pos:end="2951:62"><name pos:start="2951:59" pos:end="2951:62">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>



                            <expr_stmt pos:start="2957:29" pos:end="2957:55"><expr pos:start="2957:29" pos:end="2957:54"><name pos:start="2957:29" pos:end="2957:31">dst</name> <operator pos:start="2957:33" pos:end="2957:33">=</operator> <call pos:start="2957:35" pos:end="2957:54"><name pos:start="2957:35" pos:end="2957:46">gen_load_gpr</name><argument_list pos:start="2957:47" pos:end="2957:54">(<argument pos:start="2957:48" pos:end="2957:49"><expr pos:start="2957:48" pos:end="2957:49"><name pos:start="2957:48" pos:end="2957:49">dc</name></expr></argument>, <argument pos:start="2957:52" pos:end="2957:53"><expr pos:start="2957:52" pos:end="2957:53"><name pos:start="2957:52" pos:end="2957:53">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2959:29" pos:end="2963:62"><expr pos:start="2959:29" pos:end="2963:61"><call pos:start="2959:29" pos:end="2963:61"><name pos:start="2959:29" pos:end="2959:46">tcg_gen_movcond_tl</name><argument_list pos:start="2959:47" pos:end="2963:61">(<argument pos:start="2959:48" pos:end="2959:55"><expr pos:start="2959:48" pos:end="2959:55"><name pos:start="2959:48" pos:end="2959:55"><name pos:start="2959:48" pos:end="2959:50">cmp</name><operator pos:start="2959:51" pos:end="2959:51">.</operator><name pos:start="2959:52" pos:end="2959:55">cond</name></name></expr></argument>, <argument pos:start="2959:58" pos:end="2959:60"><expr pos:start="2959:58" pos:end="2959:60"><name pos:start="2959:58" pos:end="2959:60">dst</name></expr></argument>,

                                               <argument pos:start="2961:48" pos:end="2961:53"><expr pos:start="2961:48" pos:end="2961:53"><name pos:start="2961:48" pos:end="2961:53"><name pos:start="2961:48" pos:end="2961:50">cmp</name><operator pos:start="2961:51" pos:end="2961:51">.</operator><name pos:start="2961:52" pos:end="2961:53">c1</name></name></expr></argument>, <argument pos:start="2961:56" pos:end="2961:61"><expr pos:start="2961:56" pos:end="2961:61"><name pos:start="2961:56" pos:end="2961:61"><name pos:start="2961:56" pos:end="2961:58">cmp</name><operator pos:start="2961:59" pos:end="2961:59">.</operator><name pos:start="2961:60" pos:end="2961:61">c2</name></name></expr></argument>,

                                               <argument pos:start="2963:48" pos:end="2963:55"><expr pos:start="2963:48" pos:end="2963:55"><name pos:start="2963:48" pos:end="2963:55">cpu_src2</name></expr></argument>, <argument pos:start="2963:58" pos:end="2963:60"><expr pos:start="2963:58" pos:end="2963:60"><name pos:start="2963:58" pos:end="2963:60">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2965:29" pos:end="2965:47"><expr pos:start="2965:29" pos:end="2965:46"><call pos:start="2965:29" pos:end="2965:46"><name pos:start="2965:29" pos:end="2965:40">free_compare</name><argument_list pos:start="2965:41" pos:end="2965:46">(<argument pos:start="2965:42" pos:end="2965:45"><expr pos:start="2965:42" pos:end="2965:45"><operator pos:start="2965:42" pos:end="2965:42">&amp;</operator><name pos:start="2965:43" pos:end="2965:45">cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2967:29" pos:end="2967:55"><expr pos:start="2967:29" pos:end="2967:54"><call pos:start="2967:29" pos:end="2967:54"><name pos:start="2967:29" pos:end="2967:41">gen_store_gpr</name><argument_list pos:start="2967:42" pos:end="2967:54">(<argument pos:start="2967:43" pos:end="2967:44"><expr pos:start="2967:43" pos:end="2967:44"><name pos:start="2967:43" pos:end="2967:44">dc</name></expr></argument>, <argument pos:start="2967:47" pos:end="2967:48"><expr pos:start="2967:47" pos:end="2967:48"><name pos:start="2967:47" pos:end="2967:48">rd</name></expr></argument>, <argument pos:start="2967:51" pos:end="2967:53"><expr pos:start="2967:51" pos:end="2967:53"><name pos:start="2967:51" pos:end="2967:53">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2969:29" pos:end="2969:34">break;</break>

                        </block_content>}</block>

                    <case pos:start="2973:21" pos:end="2973:30">case <expr pos:start="2973:26" pos:end="2973:29"><literal type="number" pos:start="2973:26" pos:end="2973:29">0x2d</literal></expr>:</case> <comment type="block" pos:start="2973:32" pos:end="2973:45">/* V9 sdivx */</comment>

                        <expr_stmt pos:start="2975:25" pos:end="2975:79"><expr pos:start="2975:25" pos:end="2975:78"><call pos:start="2975:25" pos:end="2975:78"><name pos:start="2975:25" pos:end="2975:40">gen_helper_sdivx</name><argument_list pos:start="2975:41" pos:end="2975:78">(<argument pos:start="2975:42" pos:end="2975:48"><expr pos:start="2975:42" pos:end="2975:48"><name pos:start="2975:42" pos:end="2975:48">cpu_dst</name></expr></argument>, <argument pos:start="2975:51" pos:end="2975:57"><expr pos:start="2975:51" pos:end="2975:57"><name pos:start="2975:51" pos:end="2975:57">cpu_env</name></expr></argument>, <argument pos:start="2975:60" pos:end="2975:67"><expr pos:start="2975:60" pos:end="2975:67"><name pos:start="2975:60" pos:end="2975:67">cpu_src1</name></expr></argument>, <argument pos:start="2975:70" pos:end="2975:77"><expr pos:start="2975:70" pos:end="2975:77"><name pos:start="2975:70" pos:end="2975:77">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2977:25" pos:end="2977:55"><expr pos:start="2977:25" pos:end="2977:54"><call pos:start="2977:25" pos:end="2977:54"><name pos:start="2977:25" pos:end="2977:37">gen_store_gpr</name><argument_list pos:start="2977:38" pos:end="2977:54">(<argument pos:start="2977:39" pos:end="2977:40"><expr pos:start="2977:39" pos:end="2977:40"><name pos:start="2977:39" pos:end="2977:40">dc</name></expr></argument>, <argument pos:start="2977:43" pos:end="2977:44"><expr pos:start="2977:43" pos:end="2977:44"><name pos:start="2977:43" pos:end="2977:44">rd</name></expr></argument>, <argument pos:start="2977:47" pos:end="2977:53"><expr pos:start="2977:47" pos:end="2977:53"><name pos:start="2977:47" pos:end="2977:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2979:25" pos:end="2979:30">break;</break>

                    <case pos:start="2981:21" pos:end="2981:30">case <expr pos:start="2981:26" pos:end="2981:29"><literal type="number" pos:start="2981:26" pos:end="2981:29">0x2e</literal></expr>:</case> <comment type="block" pos:start="2981:32" pos:end="2981:44">/* V9 popc */</comment>

                        <expr_stmt pos:start="2983:25" pos:end="2983:59"><expr pos:start="2983:25" pos:end="2983:58"><call pos:start="2983:25" pos:end="2983:58"><name pos:start="2983:25" pos:end="2983:39">gen_helper_popc</name><argument_list pos:start="2983:40" pos:end="2983:58">(<argument pos:start="2983:41" pos:end="2983:47"><expr pos:start="2983:41" pos:end="2983:47"><name pos:start="2983:41" pos:end="2983:47">cpu_dst</name></expr></argument>, <argument pos:start="2983:50" pos:end="2983:57"><expr pos:start="2983:50" pos:end="2983:57"><name pos:start="2983:50" pos:end="2983:57">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2985:25" pos:end="2985:55"><expr pos:start="2985:25" pos:end="2985:54"><call pos:start="2985:25" pos:end="2985:54"><name pos:start="2985:25" pos:end="2985:37">gen_store_gpr</name><argument_list pos:start="2985:38" pos:end="2985:54">(<argument pos:start="2985:39" pos:end="2985:40"><expr pos:start="2985:39" pos:end="2985:40"><name pos:start="2985:39" pos:end="2985:40">dc</name></expr></argument>, <argument pos:start="2985:43" pos:end="2985:44"><expr pos:start="2985:43" pos:end="2985:44"><name pos:start="2985:43" pos:end="2985:44">rd</name></expr></argument>, <argument pos:start="2985:47" pos:end="2985:53"><expr pos:start="2985:47" pos:end="2985:53"><name pos:start="2985:47" pos:end="2985:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2987:25" pos:end="2987:30">break;</break>

                    <case pos:start="2989:21" pos:end="2989:30">case <expr pos:start="2989:26" pos:end="2989:29"><literal type="number" pos:start="2989:26" pos:end="2989:29">0x2f</literal></expr>:</case> <comment type="block" pos:start="2989:32" pos:end="2989:44">/* V9 movr */</comment>

                        <block pos:start="2991:25" pos:end="3038:0">{<block_content pos:start="2993:29" pos:end="3033:34">

                            <decl_stmt pos:start="2993:29" pos:end="2993:66"><decl pos:start="2993:29" pos:end="2993:65"><type pos:start="2993:29" pos:end="2993:31"><name pos:start="2993:29" pos:end="2993:31">int</name></type> <name pos:start="2993:33" pos:end="2993:36">cond</name> <init pos:start="2993:38" pos:end="2993:65">= <expr pos:start="2993:40" pos:end="2993:65"><call pos:start="2993:40" pos:end="2993:65"><name pos:start="2993:40" pos:end="2993:51">GET_FIELD_SP</name><argument_list pos:start="2993:52" pos:end="2993:65">(<argument pos:start="2993:53" pos:end="2993:56"><expr pos:start="2993:53" pos:end="2993:56"><name pos:start="2993:53" pos:end="2993:56">insn</name></expr></argument>, <argument pos:start="2993:59" pos:end="2993:60"><expr pos:start="2993:59" pos:end="2993:60"><literal type="number" pos:start="2993:59" pos:end="2993:60">10</literal></expr></argument>, <argument pos:start="2993:63" pos:end="2993:64"><expr pos:start="2993:63" pos:end="2993:64"><literal type="number" pos:start="2993:63" pos:end="2993:64">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="2995:29" pos:end="2995:45"><decl pos:start="2995:29" pos:end="2995:44"><type pos:start="2995:29" pos:end="2995:40"><name pos:start="2995:29" pos:end="2995:40">DisasCompare</name></type> <name pos:start="2995:42" pos:end="2995:44">cmp</name></decl>;</decl_stmt>

                            <decl_stmt pos:start="2997:29" pos:end="2997:37"><decl pos:start="2997:29" pos:end="2997:36"><type pos:start="2997:29" pos:end="2997:32"><name pos:start="2997:29" pos:end="2997:32">TCGv</name></type> <name pos:start="2997:34" pos:end="2997:36">dst</name></decl>;</decl_stmt>



                            <expr_stmt pos:start="3001:29" pos:end="3001:66"><expr pos:start="3001:29" pos:end="3001:65"><call pos:start="3001:29" pos:end="3001:65"><name pos:start="3001:29" pos:end="3001:43">gen_compare_reg</name><argument_list pos:start="3001:44" pos:end="3001:65">(<argument pos:start="3001:45" pos:end="3001:48"><expr pos:start="3001:45" pos:end="3001:48"><operator pos:start="3001:45" pos:end="3001:45">&amp;</operator><name pos:start="3001:46" pos:end="3001:48">cmp</name></expr></argument>, <argument pos:start="3001:51" pos:end="3001:54"><expr pos:start="3001:51" pos:end="3001:54"><name pos:start="3001:51" pos:end="3001:54">cond</name></expr></argument>, <argument pos:start="3001:57" pos:end="3001:64"><expr pos:start="3001:57" pos:end="3001:64"><name pos:start="3001:57" pos:end="3001:64">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                            <comment type="block" pos:start="3005:29" pos:end="3009:76">/* The get_src2 above loaded the normal 13-bit

                               immediate field, not the 10-bit field we have

                               in movr.  But it did handle the reg case.  */</comment>

                            <if_stmt pos:start="3011:29" pos:end="3017:29"><if pos:start="3011:29" pos:end="3017:29">if <condition pos:start="3011:32" pos:end="3011:39">(<expr pos:start="3011:33" pos:end="3011:38"><name pos:start="3011:33" pos:end="3011:38">IS_IMM</name></expr>)</condition> <block pos:start="3011:41" pos:end="3017:29">{<block_content pos:start="3013:33" pos:end="3015:64">

                                <expr_stmt pos:start="3013:33" pos:end="3013:65"><expr pos:start="3013:33" pos:end="3013:64"><name pos:start="3013:33" pos:end="3013:36">simm</name> <operator pos:start="3013:38" pos:end="3013:38">=</operator> <call pos:start="3013:40" pos:end="3013:64"><name pos:start="3013:40" pos:end="3013:52">GET_FIELD_SPs</name><argument_list pos:start="3013:53" pos:end="3013:64">(<argument pos:start="3013:54" pos:end="3013:57"><expr pos:start="3013:54" pos:end="3013:57"><name pos:start="3013:54" pos:end="3013:57">insn</name></expr></argument>, <argument pos:start="3013:60" pos:end="3013:60"><expr pos:start="3013:60" pos:end="3013:60"><literal type="number" pos:start="3013:60" pos:end="3013:60">0</literal></expr></argument>, <argument pos:start="3013:63" pos:end="3013:63"><expr pos:start="3013:63" pos:end="3013:63"><literal type="number" pos:start="3013:63" pos:end="3013:63">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="3015:33" pos:end="3015:64"><expr pos:start="3015:33" pos:end="3015:63"><call pos:start="3015:33" pos:end="3015:63"><name pos:start="3015:33" pos:end="3015:47">tcg_gen_movi_tl</name><argument_list pos:start="3015:48" pos:end="3015:63">(<argument pos:start="3015:49" pos:end="3015:56"><expr pos:start="3015:49" pos:end="3015:56"><name pos:start="3015:49" pos:end="3015:56">cpu_src2</name></expr></argument>, <argument pos:start="3015:59" pos:end="3015:62"><expr pos:start="3015:59" pos:end="3015:62"><name pos:start="3015:59" pos:end="3015:62">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>



                            <expr_stmt pos:start="3021:29" pos:end="3021:55"><expr pos:start="3021:29" pos:end="3021:54"><name pos:start="3021:29" pos:end="3021:31">dst</name> <operator pos:start="3021:33" pos:end="3021:33">=</operator> <call pos:start="3021:35" pos:end="3021:54"><name pos:start="3021:35" pos:end="3021:46">gen_load_gpr</name><argument_list pos:start="3021:47" pos:end="3021:54">(<argument pos:start="3021:48" pos:end="3021:49"><expr pos:start="3021:48" pos:end="3021:49"><name pos:start="3021:48" pos:end="3021:49">dc</name></expr></argument>, <argument pos:start="3021:52" pos:end="3021:53"><expr pos:start="3021:52" pos:end="3021:53"><name pos:start="3021:52" pos:end="3021:53">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3023:29" pos:end="3027:62"><expr pos:start="3023:29" pos:end="3027:61"><call pos:start="3023:29" pos:end="3027:61"><name pos:start="3023:29" pos:end="3023:46">tcg_gen_movcond_tl</name><argument_list pos:start="3023:47" pos:end="3027:61">(<argument pos:start="3023:48" pos:end="3023:55"><expr pos:start="3023:48" pos:end="3023:55"><name pos:start="3023:48" pos:end="3023:55"><name pos:start="3023:48" pos:end="3023:50">cmp</name><operator pos:start="3023:51" pos:end="3023:51">.</operator><name pos:start="3023:52" pos:end="3023:55">cond</name></name></expr></argument>, <argument pos:start="3023:58" pos:end="3023:60"><expr pos:start="3023:58" pos:end="3023:60"><name pos:start="3023:58" pos:end="3023:60">dst</name></expr></argument>,

                                               <argument pos:start="3025:48" pos:end="3025:53"><expr pos:start="3025:48" pos:end="3025:53"><name pos:start="3025:48" pos:end="3025:53"><name pos:start="3025:48" pos:end="3025:50">cmp</name><operator pos:start="3025:51" pos:end="3025:51">.</operator><name pos:start="3025:52" pos:end="3025:53">c1</name></name></expr></argument>, <argument pos:start="3025:56" pos:end="3025:61"><expr pos:start="3025:56" pos:end="3025:61"><name pos:start="3025:56" pos:end="3025:61"><name pos:start="3025:56" pos:end="3025:58">cmp</name><operator pos:start="3025:59" pos:end="3025:59">.</operator><name pos:start="3025:60" pos:end="3025:61">c2</name></name></expr></argument>,

                                               <argument pos:start="3027:48" pos:end="3027:55"><expr pos:start="3027:48" pos:end="3027:55"><name pos:start="3027:48" pos:end="3027:55">cpu_src2</name></expr></argument>, <argument pos:start="3027:58" pos:end="3027:60"><expr pos:start="3027:58" pos:end="3027:60"><name pos:start="3027:58" pos:end="3027:60">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3029:29" pos:end="3029:47"><expr pos:start="3029:29" pos:end="3029:46"><call pos:start="3029:29" pos:end="3029:46"><name pos:start="3029:29" pos:end="3029:40">free_compare</name><argument_list pos:start="3029:41" pos:end="3029:46">(<argument pos:start="3029:42" pos:end="3029:45"><expr pos:start="3029:42" pos:end="3029:45"><operator pos:start="3029:42" pos:end="3029:42">&amp;</operator><name pos:start="3029:43" pos:end="3029:45">cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3031:29" pos:end="3031:55"><expr pos:start="3031:29" pos:end="3031:54"><call pos:start="3031:29" pos:end="3031:54"><name pos:start="3031:29" pos:end="3031:41">gen_store_gpr</name><argument_list pos:start="3031:42" pos:end="3031:54">(<argument pos:start="3031:43" pos:end="3031:44"><expr pos:start="3031:43" pos:end="3031:44"><name pos:start="3031:43" pos:end="3031:44">dc</name></expr></argument>, <argument pos:start="3031:47" pos:end="3031:48"><expr pos:start="3031:47" pos:end="3031:48"><name pos:start="3031:47" pos:end="3031:48">rd</name></expr></argument>, <argument pos:start="3031:51" pos:end="3031:53"><expr pos:start="3031:51" pos:end="3031:53"><name pos:start="3031:51" pos:end="3031:53">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3033:29" pos:end="3033:34">break;</break>

                        </block_content>}</block>

<cpp:endif pos:start="3037:1" pos:end="3037:6">#<cpp:directive pos:start="3037:2" pos:end="3037:6">endif</cpp:directive></cpp:endif>

                    <default pos:start="3039:21" pos:end="3039:28">default:</default>

                        <goto pos:start="3041:25" pos:end="3041:42">goto <name pos:start="3041:30" pos:end="3041:41">illegal_insn</name>;</goto>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="3047:15" pos:end="3933:13">else if <condition pos:start="3047:23" pos:end="3047:35">(<expr pos:start="3047:24" pos:end="3047:34"><name pos:start="3047:24" pos:end="3047:26">xop</name> <operator pos:start="3047:28" pos:end="3047:29">==</operator> <literal type="number" pos:start="3047:31" pos:end="3047:34">0x36</literal></expr>)</condition> <block pos:start="3047:37" pos:end="3933:13">{<block_content pos:start="3051:17" pos:end="3932:0"> <comment type="block" pos:start="3047:39" pos:end="3047:78">/* UltraSparc shutdown, VIS, V8 CPop1 */</comment>

<cpp:ifdef pos:start="3049:1" pos:end="3049:21">#<cpp:directive pos:start="3049:2" pos:end="3049:6">ifdef</cpp:directive> <name pos:start="3049:8" pos:end="3049:21">TARGET_SPARC64</name></cpp:ifdef>

                <decl_stmt pos:start="3051:17" pos:end="3051:52"><decl pos:start="3051:17" pos:end="3051:51"><type pos:start="3051:17" pos:end="3051:19"><name pos:start="3051:17" pos:end="3051:19">int</name></type> <name pos:start="3051:21" pos:end="3051:23">opf</name> <init pos:start="3051:25" pos:end="3051:51">= <expr pos:start="3051:27" pos:end="3051:51"><call pos:start="3051:27" pos:end="3051:51"><name pos:start="3051:27" pos:end="3051:38">GET_FIELD_SP</name><argument_list pos:start="3051:39" pos:end="3051:51">(<argument pos:start="3051:40" pos:end="3051:43"><expr pos:start="3051:40" pos:end="3051:43"><name pos:start="3051:40" pos:end="3051:43">insn</name></expr></argument>, <argument pos:start="3051:46" pos:end="3051:46"><expr pos:start="3051:46" pos:end="3051:46"><literal type="number" pos:start="3051:46" pos:end="3051:46">5</literal></expr></argument>, <argument pos:start="3051:49" pos:end="3051:50"><expr pos:start="3051:49" pos:end="3051:50"><literal type="number" pos:start="3051:49" pos:end="3051:50">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="3053:17" pos:end="3053:46"><expr pos:start="3053:17" pos:end="3053:45"><name pos:start="3053:17" pos:end="3053:19">rs1</name> <operator pos:start="3053:21" pos:end="3053:21">=</operator> <call pos:start="3053:23" pos:end="3053:45"><name pos:start="3053:23" pos:end="3053:31">GET_FIELD</name><argument_list pos:start="3053:32" pos:end="3053:45">(<argument pos:start="3053:33" pos:end="3053:36"><expr pos:start="3053:33" pos:end="3053:36"><name pos:start="3053:33" pos:end="3053:36">insn</name></expr></argument>, <argument pos:start="3053:39" pos:end="3053:40"><expr pos:start="3053:39" pos:end="3053:40"><literal type="number" pos:start="3053:39" pos:end="3053:40">13</literal></expr></argument>, <argument pos:start="3053:43" pos:end="3053:44"><expr pos:start="3053:43" pos:end="3053:44"><literal type="number" pos:start="3053:43" pos:end="3053:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3055:17" pos:end="3055:46"><expr pos:start="3055:17" pos:end="3055:45"><name pos:start="3055:17" pos:end="3055:19">rs2</name> <operator pos:start="3055:21" pos:end="3055:21">=</operator> <call pos:start="3055:23" pos:end="3055:45"><name pos:start="3055:23" pos:end="3055:31">GET_FIELD</name><argument_list pos:start="3055:32" pos:end="3055:45">(<argument pos:start="3055:33" pos:end="3055:36"><expr pos:start="3055:33" pos:end="3055:36"><name pos:start="3055:33" pos:end="3055:36">insn</name></expr></argument>, <argument pos:start="3055:39" pos:end="3055:40"><expr pos:start="3055:39" pos:end="3055:40"><literal type="number" pos:start="3055:39" pos:end="3055:40">27</literal></expr></argument>, <argument pos:start="3055:43" pos:end="3055:44"><expr pos:start="3055:43" pos:end="3055:44"><literal type="number" pos:start="3055:43" pos:end="3055:44">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="3057:17" pos:end="3061:17"><if pos:start="3057:17" pos:end="3061:17">if <condition pos:start="3057:20" pos:end="3057:41">(<expr pos:start="3057:21" pos:end="3057:40"><call pos:start="3057:21" pos:end="3057:40"><name pos:start="3057:21" pos:end="3057:36">gen_trap_ifnofpu</name><argument_list pos:start="3057:37" pos:end="3057:40">(<argument pos:start="3057:38" pos:end="3057:39"><expr pos:start="3057:38" pos:end="3057:39"><name pos:start="3057:38" pos:end="3057:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3057:43" pos:end="3061:17">{<block_content pos:start="3059:21" pos:end="3059:34">

                    <goto pos:start="3059:21" pos:end="3059:34">goto <name pos:start="3059:26" pos:end="3059:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <switch pos:start="3065:17" pos:end="3928:0">switch <condition pos:start="3065:24" pos:end="3065:28">(<expr pos:start="3065:25" pos:end="3065:27"><name pos:start="3065:25" pos:end="3065:27">opf</name></expr>)</condition> <block pos:start="3065:30" pos:end="3928:0">{<block_content pos:start="3067:17" pos:end="3923:38">

                <case pos:start="3067:17" pos:end="3067:27">case <expr pos:start="3067:22" pos:end="3067:26"><literal type="number" pos:start="3067:22" pos:end="3067:26">0x000</literal></expr>:</case> <comment type="block" pos:start="3067:29" pos:end="3067:47">/* VIS I edge8cc */</comment>

                    <expr_stmt pos:start="3069:21" pos:end="3069:48"><expr pos:start="3069:21" pos:end="3069:47"><call pos:start="3069:21" pos:end="3069:47"><name pos:start="3069:21" pos:end="3069:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3069:38" pos:end="3069:47">(<argument pos:start="3069:39" pos:end="3069:40"><expr pos:start="3069:39" pos:end="3069:40"><name pos:start="3069:39" pos:end="3069:40">dc</name></expr></argument>, <argument pos:start="3069:43" pos:end="3069:46"><expr pos:start="3069:43" pos:end="3069:46"><name pos:start="3069:43" pos:end="3069:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3071:21" pos:end="3071:53"><expr pos:start="3071:21" pos:end="3071:52"><name pos:start="3071:21" pos:end="3071:28">cpu_src1</name> <operator pos:start="3071:30" pos:end="3071:30">=</operator> <call pos:start="3071:32" pos:end="3071:52"><name pos:start="3071:32" pos:end="3071:43">gen_load_gpr</name><argument_list pos:start="3071:44" pos:end="3071:52">(<argument pos:start="3071:45" pos:end="3071:46"><expr pos:start="3071:45" pos:end="3071:46"><name pos:start="3071:45" pos:end="3071:46">dc</name></expr></argument>, <argument pos:start="3071:49" pos:end="3071:51"><expr pos:start="3071:49" pos:end="3071:51"><name pos:start="3071:49" pos:end="3071:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3073:21" pos:end="3073:53"><expr pos:start="3073:21" pos:end="3073:52"><name pos:start="3073:21" pos:end="3073:28">cpu_src2</name> <operator pos:start="3073:30" pos:end="3073:30">=</operator> <call pos:start="3073:32" pos:end="3073:52"><name pos:start="3073:32" pos:end="3073:43">gen_load_gpr</name><argument_list pos:start="3073:44" pos:end="3073:52">(<argument pos:start="3073:45" pos:end="3073:46"><expr pos:start="3073:45" pos:end="3073:46"><name pos:start="3073:45" pos:end="3073:46">dc</name></expr></argument>, <argument pos:start="3073:49" pos:end="3073:51"><expr pos:start="3073:49" pos:end="3073:51"><name pos:start="3073:49" pos:end="3073:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3075:21" pos:end="3075:71"><expr pos:start="3075:21" pos:end="3075:70"><call pos:start="3075:21" pos:end="3075:70"><name pos:start="3075:21" pos:end="3075:28">gen_edge</name><argument_list pos:start="3075:29" pos:end="3075:70">(<argument pos:start="3075:30" pos:end="3075:31"><expr pos:start="3075:30" pos:end="3075:31"><name pos:start="3075:30" pos:end="3075:31">dc</name></expr></argument>, <argument pos:start="3075:34" pos:end="3075:40"><expr pos:start="3075:34" pos:end="3075:40"><name pos:start="3075:34" pos:end="3075:40">cpu_dst</name></expr></argument>, <argument pos:start="3075:43" pos:end="3075:50"><expr pos:start="3075:43" pos:end="3075:50"><name pos:start="3075:43" pos:end="3075:50">cpu_src1</name></expr></argument>, <argument pos:start="3075:53" pos:end="3075:60"><expr pos:start="3075:53" pos:end="3075:60"><name pos:start="3075:53" pos:end="3075:60">cpu_src2</name></expr></argument>, <argument pos:start="3075:63" pos:end="3075:63"><expr pos:start="3075:63" pos:end="3075:63"><literal type="number" pos:start="3075:63" pos:end="3075:63">8</literal></expr></argument>, <argument pos:start="3075:66" pos:end="3075:66"><expr pos:start="3075:66" pos:end="3075:66"><literal type="number" pos:start="3075:66" pos:end="3075:66">1</literal></expr></argument>, <argument pos:start="3075:69" pos:end="3075:69"><expr pos:start="3075:69" pos:end="3075:69"><literal type="number" pos:start="3075:69" pos:end="3075:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3077:21" pos:end="3077:51"><expr pos:start="3077:21" pos:end="3077:50"><call pos:start="3077:21" pos:end="3077:50"><name pos:start="3077:21" pos:end="3077:33">gen_store_gpr</name><argument_list pos:start="3077:34" pos:end="3077:50">(<argument pos:start="3077:35" pos:end="3077:36"><expr pos:start="3077:35" pos:end="3077:36"><name pos:start="3077:35" pos:end="3077:36">dc</name></expr></argument>, <argument pos:start="3077:39" pos:end="3077:40"><expr pos:start="3077:39" pos:end="3077:40"><name pos:start="3077:39" pos:end="3077:40">rd</name></expr></argument>, <argument pos:start="3077:43" pos:end="3077:49"><expr pos:start="3077:43" pos:end="3077:49"><name pos:start="3077:43" pos:end="3077:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3079:21" pos:end="3079:26">break;</break>

                <case pos:start="3081:17" pos:end="3081:27">case <expr pos:start="3081:22" pos:end="3081:26"><literal type="number" pos:start="3081:22" pos:end="3081:26">0x001</literal></expr>:</case> <comment type="block" pos:start="3081:29" pos:end="3081:47">/* VIS II edge8n */</comment>

                    <expr_stmt pos:start="3083:21" pos:end="3083:48"><expr pos:start="3083:21" pos:end="3083:47"><call pos:start="3083:21" pos:end="3083:47"><name pos:start="3083:21" pos:end="3083:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3083:38" pos:end="3083:47">(<argument pos:start="3083:39" pos:end="3083:40"><expr pos:start="3083:39" pos:end="3083:40"><name pos:start="3083:39" pos:end="3083:40">dc</name></expr></argument>, <argument pos:start="3083:43" pos:end="3083:46"><expr pos:start="3083:43" pos:end="3083:46"><name pos:start="3083:43" pos:end="3083:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3085:21" pos:end="3085:53"><expr pos:start="3085:21" pos:end="3085:52"><name pos:start="3085:21" pos:end="3085:28">cpu_src1</name> <operator pos:start="3085:30" pos:end="3085:30">=</operator> <call pos:start="3085:32" pos:end="3085:52"><name pos:start="3085:32" pos:end="3085:43">gen_load_gpr</name><argument_list pos:start="3085:44" pos:end="3085:52">(<argument pos:start="3085:45" pos:end="3085:46"><expr pos:start="3085:45" pos:end="3085:46"><name pos:start="3085:45" pos:end="3085:46">dc</name></expr></argument>, <argument pos:start="3085:49" pos:end="3085:51"><expr pos:start="3085:49" pos:end="3085:51"><name pos:start="3085:49" pos:end="3085:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3087:21" pos:end="3087:53"><expr pos:start="3087:21" pos:end="3087:52"><name pos:start="3087:21" pos:end="3087:28">cpu_src2</name> <operator pos:start="3087:30" pos:end="3087:30">=</operator> <call pos:start="3087:32" pos:end="3087:52"><name pos:start="3087:32" pos:end="3087:43">gen_load_gpr</name><argument_list pos:start="3087:44" pos:end="3087:52">(<argument pos:start="3087:45" pos:end="3087:46"><expr pos:start="3087:45" pos:end="3087:46"><name pos:start="3087:45" pos:end="3087:46">dc</name></expr></argument>, <argument pos:start="3087:49" pos:end="3087:51"><expr pos:start="3087:49" pos:end="3087:51"><name pos:start="3087:49" pos:end="3087:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3089:21" pos:end="3089:71"><expr pos:start="3089:21" pos:end="3089:70"><call pos:start="3089:21" pos:end="3089:70"><name pos:start="3089:21" pos:end="3089:28">gen_edge</name><argument_list pos:start="3089:29" pos:end="3089:70">(<argument pos:start="3089:30" pos:end="3089:31"><expr pos:start="3089:30" pos:end="3089:31"><name pos:start="3089:30" pos:end="3089:31">dc</name></expr></argument>, <argument pos:start="3089:34" pos:end="3089:40"><expr pos:start="3089:34" pos:end="3089:40"><name pos:start="3089:34" pos:end="3089:40">cpu_dst</name></expr></argument>, <argument pos:start="3089:43" pos:end="3089:50"><expr pos:start="3089:43" pos:end="3089:50"><name pos:start="3089:43" pos:end="3089:50">cpu_src1</name></expr></argument>, <argument pos:start="3089:53" pos:end="3089:60"><expr pos:start="3089:53" pos:end="3089:60"><name pos:start="3089:53" pos:end="3089:60">cpu_src2</name></expr></argument>, <argument pos:start="3089:63" pos:end="3089:63"><expr pos:start="3089:63" pos:end="3089:63"><literal type="number" pos:start="3089:63" pos:end="3089:63">8</literal></expr></argument>, <argument pos:start="3089:66" pos:end="3089:66"><expr pos:start="3089:66" pos:end="3089:66"><literal type="number" pos:start="3089:66" pos:end="3089:66">0</literal></expr></argument>, <argument pos:start="3089:69" pos:end="3089:69"><expr pos:start="3089:69" pos:end="3089:69"><literal type="number" pos:start="3089:69" pos:end="3089:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3091:21" pos:end="3091:51"><expr pos:start="3091:21" pos:end="3091:50"><call pos:start="3091:21" pos:end="3091:50"><name pos:start="3091:21" pos:end="3091:33">gen_store_gpr</name><argument_list pos:start="3091:34" pos:end="3091:50">(<argument pos:start="3091:35" pos:end="3091:36"><expr pos:start="3091:35" pos:end="3091:36"><name pos:start="3091:35" pos:end="3091:36">dc</name></expr></argument>, <argument pos:start="3091:39" pos:end="3091:40"><expr pos:start="3091:39" pos:end="3091:40"><name pos:start="3091:39" pos:end="3091:40">rd</name></expr></argument>, <argument pos:start="3091:43" pos:end="3091:49"><expr pos:start="3091:43" pos:end="3091:49"><name pos:start="3091:43" pos:end="3091:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3093:21" pos:end="3093:26">break;</break>

                <case pos:start="3095:17" pos:end="3095:27">case <expr pos:start="3095:22" pos:end="3095:26"><literal type="number" pos:start="3095:22" pos:end="3095:26">0x002</literal></expr>:</case> <comment type="block" pos:start="3095:29" pos:end="3095:48">/* VIS I edge8lcc */</comment>

                    <expr_stmt pos:start="3097:21" pos:end="3097:48"><expr pos:start="3097:21" pos:end="3097:47"><call pos:start="3097:21" pos:end="3097:47"><name pos:start="3097:21" pos:end="3097:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3097:38" pos:end="3097:47">(<argument pos:start="3097:39" pos:end="3097:40"><expr pos:start="3097:39" pos:end="3097:40"><name pos:start="3097:39" pos:end="3097:40">dc</name></expr></argument>, <argument pos:start="3097:43" pos:end="3097:46"><expr pos:start="3097:43" pos:end="3097:46"><name pos:start="3097:43" pos:end="3097:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3099:21" pos:end="3099:53"><expr pos:start="3099:21" pos:end="3099:52"><name pos:start="3099:21" pos:end="3099:28">cpu_src1</name> <operator pos:start="3099:30" pos:end="3099:30">=</operator> <call pos:start="3099:32" pos:end="3099:52"><name pos:start="3099:32" pos:end="3099:43">gen_load_gpr</name><argument_list pos:start="3099:44" pos:end="3099:52">(<argument pos:start="3099:45" pos:end="3099:46"><expr pos:start="3099:45" pos:end="3099:46"><name pos:start="3099:45" pos:end="3099:46">dc</name></expr></argument>, <argument pos:start="3099:49" pos:end="3099:51"><expr pos:start="3099:49" pos:end="3099:51"><name pos:start="3099:49" pos:end="3099:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3101:21" pos:end="3101:53"><expr pos:start="3101:21" pos:end="3101:52"><name pos:start="3101:21" pos:end="3101:28">cpu_src2</name> <operator pos:start="3101:30" pos:end="3101:30">=</operator> <call pos:start="3101:32" pos:end="3101:52"><name pos:start="3101:32" pos:end="3101:43">gen_load_gpr</name><argument_list pos:start="3101:44" pos:end="3101:52">(<argument pos:start="3101:45" pos:end="3101:46"><expr pos:start="3101:45" pos:end="3101:46"><name pos:start="3101:45" pos:end="3101:46">dc</name></expr></argument>, <argument pos:start="3101:49" pos:end="3101:51"><expr pos:start="3101:49" pos:end="3101:51"><name pos:start="3101:49" pos:end="3101:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3103:21" pos:end="3103:71"><expr pos:start="3103:21" pos:end="3103:70"><call pos:start="3103:21" pos:end="3103:70"><name pos:start="3103:21" pos:end="3103:28">gen_edge</name><argument_list pos:start="3103:29" pos:end="3103:70">(<argument pos:start="3103:30" pos:end="3103:31"><expr pos:start="3103:30" pos:end="3103:31"><name pos:start="3103:30" pos:end="3103:31">dc</name></expr></argument>, <argument pos:start="3103:34" pos:end="3103:40"><expr pos:start="3103:34" pos:end="3103:40"><name pos:start="3103:34" pos:end="3103:40">cpu_dst</name></expr></argument>, <argument pos:start="3103:43" pos:end="3103:50"><expr pos:start="3103:43" pos:end="3103:50"><name pos:start="3103:43" pos:end="3103:50">cpu_src1</name></expr></argument>, <argument pos:start="3103:53" pos:end="3103:60"><expr pos:start="3103:53" pos:end="3103:60"><name pos:start="3103:53" pos:end="3103:60">cpu_src2</name></expr></argument>, <argument pos:start="3103:63" pos:end="3103:63"><expr pos:start="3103:63" pos:end="3103:63"><literal type="number" pos:start="3103:63" pos:end="3103:63">8</literal></expr></argument>, <argument pos:start="3103:66" pos:end="3103:66"><expr pos:start="3103:66" pos:end="3103:66"><literal type="number" pos:start="3103:66" pos:end="3103:66">1</literal></expr></argument>, <argument pos:start="3103:69" pos:end="3103:69"><expr pos:start="3103:69" pos:end="3103:69"><literal type="number" pos:start="3103:69" pos:end="3103:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3105:21" pos:end="3105:51"><expr pos:start="3105:21" pos:end="3105:50"><call pos:start="3105:21" pos:end="3105:50"><name pos:start="3105:21" pos:end="3105:33">gen_store_gpr</name><argument_list pos:start="3105:34" pos:end="3105:50">(<argument pos:start="3105:35" pos:end="3105:36"><expr pos:start="3105:35" pos:end="3105:36"><name pos:start="3105:35" pos:end="3105:36">dc</name></expr></argument>, <argument pos:start="3105:39" pos:end="3105:40"><expr pos:start="3105:39" pos:end="3105:40"><name pos:start="3105:39" pos:end="3105:40">rd</name></expr></argument>, <argument pos:start="3105:43" pos:end="3105:49"><expr pos:start="3105:43" pos:end="3105:49"><name pos:start="3105:43" pos:end="3105:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3107:21" pos:end="3107:26">break;</break>

                <case pos:start="3109:17" pos:end="3109:27">case <expr pos:start="3109:22" pos:end="3109:26"><literal type="number" pos:start="3109:22" pos:end="3109:26">0x003</literal></expr>:</case> <comment type="block" pos:start="3109:29" pos:end="3109:48">/* VIS II edge8ln */</comment>

                    <expr_stmt pos:start="3111:21" pos:end="3111:48"><expr pos:start="3111:21" pos:end="3111:47"><call pos:start="3111:21" pos:end="3111:47"><name pos:start="3111:21" pos:end="3111:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3111:38" pos:end="3111:47">(<argument pos:start="3111:39" pos:end="3111:40"><expr pos:start="3111:39" pos:end="3111:40"><name pos:start="3111:39" pos:end="3111:40">dc</name></expr></argument>, <argument pos:start="3111:43" pos:end="3111:46"><expr pos:start="3111:43" pos:end="3111:46"><name pos:start="3111:43" pos:end="3111:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3113:21" pos:end="3113:53"><expr pos:start="3113:21" pos:end="3113:52"><name pos:start="3113:21" pos:end="3113:28">cpu_src1</name> <operator pos:start="3113:30" pos:end="3113:30">=</operator> <call pos:start="3113:32" pos:end="3113:52"><name pos:start="3113:32" pos:end="3113:43">gen_load_gpr</name><argument_list pos:start="3113:44" pos:end="3113:52">(<argument pos:start="3113:45" pos:end="3113:46"><expr pos:start="3113:45" pos:end="3113:46"><name pos:start="3113:45" pos:end="3113:46">dc</name></expr></argument>, <argument pos:start="3113:49" pos:end="3113:51"><expr pos:start="3113:49" pos:end="3113:51"><name pos:start="3113:49" pos:end="3113:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3115:21" pos:end="3115:53"><expr pos:start="3115:21" pos:end="3115:52"><name pos:start="3115:21" pos:end="3115:28">cpu_src2</name> <operator pos:start="3115:30" pos:end="3115:30">=</operator> <call pos:start="3115:32" pos:end="3115:52"><name pos:start="3115:32" pos:end="3115:43">gen_load_gpr</name><argument_list pos:start="3115:44" pos:end="3115:52">(<argument pos:start="3115:45" pos:end="3115:46"><expr pos:start="3115:45" pos:end="3115:46"><name pos:start="3115:45" pos:end="3115:46">dc</name></expr></argument>, <argument pos:start="3115:49" pos:end="3115:51"><expr pos:start="3115:49" pos:end="3115:51"><name pos:start="3115:49" pos:end="3115:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3117:21" pos:end="3117:71"><expr pos:start="3117:21" pos:end="3117:70"><call pos:start="3117:21" pos:end="3117:70"><name pos:start="3117:21" pos:end="3117:28">gen_edge</name><argument_list pos:start="3117:29" pos:end="3117:70">(<argument pos:start="3117:30" pos:end="3117:31"><expr pos:start="3117:30" pos:end="3117:31"><name pos:start="3117:30" pos:end="3117:31">dc</name></expr></argument>, <argument pos:start="3117:34" pos:end="3117:40"><expr pos:start="3117:34" pos:end="3117:40"><name pos:start="3117:34" pos:end="3117:40">cpu_dst</name></expr></argument>, <argument pos:start="3117:43" pos:end="3117:50"><expr pos:start="3117:43" pos:end="3117:50"><name pos:start="3117:43" pos:end="3117:50">cpu_src1</name></expr></argument>, <argument pos:start="3117:53" pos:end="3117:60"><expr pos:start="3117:53" pos:end="3117:60"><name pos:start="3117:53" pos:end="3117:60">cpu_src2</name></expr></argument>, <argument pos:start="3117:63" pos:end="3117:63"><expr pos:start="3117:63" pos:end="3117:63"><literal type="number" pos:start="3117:63" pos:end="3117:63">8</literal></expr></argument>, <argument pos:start="3117:66" pos:end="3117:66"><expr pos:start="3117:66" pos:end="3117:66"><literal type="number" pos:start="3117:66" pos:end="3117:66">0</literal></expr></argument>, <argument pos:start="3117:69" pos:end="3117:69"><expr pos:start="3117:69" pos:end="3117:69"><literal type="number" pos:start="3117:69" pos:end="3117:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3119:21" pos:end="3119:51"><expr pos:start="3119:21" pos:end="3119:50"><call pos:start="3119:21" pos:end="3119:50"><name pos:start="3119:21" pos:end="3119:33">gen_store_gpr</name><argument_list pos:start="3119:34" pos:end="3119:50">(<argument pos:start="3119:35" pos:end="3119:36"><expr pos:start="3119:35" pos:end="3119:36"><name pos:start="3119:35" pos:end="3119:36">dc</name></expr></argument>, <argument pos:start="3119:39" pos:end="3119:40"><expr pos:start="3119:39" pos:end="3119:40"><name pos:start="3119:39" pos:end="3119:40">rd</name></expr></argument>, <argument pos:start="3119:43" pos:end="3119:49"><expr pos:start="3119:43" pos:end="3119:49"><name pos:start="3119:43" pos:end="3119:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3121:21" pos:end="3121:26">break;</break>

                <case pos:start="3123:17" pos:end="3123:27">case <expr pos:start="3123:22" pos:end="3123:26"><literal type="number" pos:start="3123:22" pos:end="3123:26">0x004</literal></expr>:</case> <comment type="block" pos:start="3123:29" pos:end="3123:48">/* VIS I edge16cc */</comment>

                    <expr_stmt pos:start="3125:21" pos:end="3125:48"><expr pos:start="3125:21" pos:end="3125:47"><call pos:start="3125:21" pos:end="3125:47"><name pos:start="3125:21" pos:end="3125:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3125:38" pos:end="3125:47">(<argument pos:start="3125:39" pos:end="3125:40"><expr pos:start="3125:39" pos:end="3125:40"><name pos:start="3125:39" pos:end="3125:40">dc</name></expr></argument>, <argument pos:start="3125:43" pos:end="3125:46"><expr pos:start="3125:43" pos:end="3125:46"><name pos:start="3125:43" pos:end="3125:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3127:21" pos:end="3127:53"><expr pos:start="3127:21" pos:end="3127:52"><name pos:start="3127:21" pos:end="3127:28">cpu_src1</name> <operator pos:start="3127:30" pos:end="3127:30">=</operator> <call pos:start="3127:32" pos:end="3127:52"><name pos:start="3127:32" pos:end="3127:43">gen_load_gpr</name><argument_list pos:start="3127:44" pos:end="3127:52">(<argument pos:start="3127:45" pos:end="3127:46"><expr pos:start="3127:45" pos:end="3127:46"><name pos:start="3127:45" pos:end="3127:46">dc</name></expr></argument>, <argument pos:start="3127:49" pos:end="3127:51"><expr pos:start="3127:49" pos:end="3127:51"><name pos:start="3127:49" pos:end="3127:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3129:21" pos:end="3129:53"><expr pos:start="3129:21" pos:end="3129:52"><name pos:start="3129:21" pos:end="3129:28">cpu_src2</name> <operator pos:start="3129:30" pos:end="3129:30">=</operator> <call pos:start="3129:32" pos:end="3129:52"><name pos:start="3129:32" pos:end="3129:43">gen_load_gpr</name><argument_list pos:start="3129:44" pos:end="3129:52">(<argument pos:start="3129:45" pos:end="3129:46"><expr pos:start="3129:45" pos:end="3129:46"><name pos:start="3129:45" pos:end="3129:46">dc</name></expr></argument>, <argument pos:start="3129:49" pos:end="3129:51"><expr pos:start="3129:49" pos:end="3129:51"><name pos:start="3129:49" pos:end="3129:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3131:21" pos:end="3131:72"><expr pos:start="3131:21" pos:end="3131:71"><call pos:start="3131:21" pos:end="3131:71"><name pos:start="3131:21" pos:end="3131:28">gen_edge</name><argument_list pos:start="3131:29" pos:end="3131:71">(<argument pos:start="3131:30" pos:end="3131:31"><expr pos:start="3131:30" pos:end="3131:31"><name pos:start="3131:30" pos:end="3131:31">dc</name></expr></argument>, <argument pos:start="3131:34" pos:end="3131:40"><expr pos:start="3131:34" pos:end="3131:40"><name pos:start="3131:34" pos:end="3131:40">cpu_dst</name></expr></argument>, <argument pos:start="3131:43" pos:end="3131:50"><expr pos:start="3131:43" pos:end="3131:50"><name pos:start="3131:43" pos:end="3131:50">cpu_src1</name></expr></argument>, <argument pos:start="3131:53" pos:end="3131:60"><expr pos:start="3131:53" pos:end="3131:60"><name pos:start="3131:53" pos:end="3131:60">cpu_src2</name></expr></argument>, <argument pos:start="3131:63" pos:end="3131:64"><expr pos:start="3131:63" pos:end="3131:64"><literal type="number" pos:start="3131:63" pos:end="3131:64">16</literal></expr></argument>, <argument pos:start="3131:67" pos:end="3131:67"><expr pos:start="3131:67" pos:end="3131:67"><literal type="number" pos:start="3131:67" pos:end="3131:67">1</literal></expr></argument>, <argument pos:start="3131:70" pos:end="3131:70"><expr pos:start="3131:70" pos:end="3131:70"><literal type="number" pos:start="3131:70" pos:end="3131:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3133:21" pos:end="3133:51"><expr pos:start="3133:21" pos:end="3133:50"><call pos:start="3133:21" pos:end="3133:50"><name pos:start="3133:21" pos:end="3133:33">gen_store_gpr</name><argument_list pos:start="3133:34" pos:end="3133:50">(<argument pos:start="3133:35" pos:end="3133:36"><expr pos:start="3133:35" pos:end="3133:36"><name pos:start="3133:35" pos:end="3133:36">dc</name></expr></argument>, <argument pos:start="3133:39" pos:end="3133:40"><expr pos:start="3133:39" pos:end="3133:40"><name pos:start="3133:39" pos:end="3133:40">rd</name></expr></argument>, <argument pos:start="3133:43" pos:end="3133:49"><expr pos:start="3133:43" pos:end="3133:49"><name pos:start="3133:43" pos:end="3133:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3135:21" pos:end="3135:26">break;</break>

                <case pos:start="3137:17" pos:end="3137:27">case <expr pos:start="3137:22" pos:end="3137:26"><literal type="number" pos:start="3137:22" pos:end="3137:26">0x005</literal></expr>:</case> <comment type="block" pos:start="3137:29" pos:end="3137:48">/* VIS II edge16n */</comment>

                    <expr_stmt pos:start="3139:21" pos:end="3139:48"><expr pos:start="3139:21" pos:end="3139:47"><call pos:start="3139:21" pos:end="3139:47"><name pos:start="3139:21" pos:end="3139:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3139:38" pos:end="3139:47">(<argument pos:start="3139:39" pos:end="3139:40"><expr pos:start="3139:39" pos:end="3139:40"><name pos:start="3139:39" pos:end="3139:40">dc</name></expr></argument>, <argument pos:start="3139:43" pos:end="3139:46"><expr pos:start="3139:43" pos:end="3139:46"><name pos:start="3139:43" pos:end="3139:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3141:21" pos:end="3141:53"><expr pos:start="3141:21" pos:end="3141:52"><name pos:start="3141:21" pos:end="3141:28">cpu_src1</name> <operator pos:start="3141:30" pos:end="3141:30">=</operator> <call pos:start="3141:32" pos:end="3141:52"><name pos:start="3141:32" pos:end="3141:43">gen_load_gpr</name><argument_list pos:start="3141:44" pos:end="3141:52">(<argument pos:start="3141:45" pos:end="3141:46"><expr pos:start="3141:45" pos:end="3141:46"><name pos:start="3141:45" pos:end="3141:46">dc</name></expr></argument>, <argument pos:start="3141:49" pos:end="3141:51"><expr pos:start="3141:49" pos:end="3141:51"><name pos:start="3141:49" pos:end="3141:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3143:21" pos:end="3143:53"><expr pos:start="3143:21" pos:end="3143:52"><name pos:start="3143:21" pos:end="3143:28">cpu_src2</name> <operator pos:start="3143:30" pos:end="3143:30">=</operator> <call pos:start="3143:32" pos:end="3143:52"><name pos:start="3143:32" pos:end="3143:43">gen_load_gpr</name><argument_list pos:start="3143:44" pos:end="3143:52">(<argument pos:start="3143:45" pos:end="3143:46"><expr pos:start="3143:45" pos:end="3143:46"><name pos:start="3143:45" pos:end="3143:46">dc</name></expr></argument>, <argument pos:start="3143:49" pos:end="3143:51"><expr pos:start="3143:49" pos:end="3143:51"><name pos:start="3143:49" pos:end="3143:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3145:21" pos:end="3145:72"><expr pos:start="3145:21" pos:end="3145:71"><call pos:start="3145:21" pos:end="3145:71"><name pos:start="3145:21" pos:end="3145:28">gen_edge</name><argument_list pos:start="3145:29" pos:end="3145:71">(<argument pos:start="3145:30" pos:end="3145:31"><expr pos:start="3145:30" pos:end="3145:31"><name pos:start="3145:30" pos:end="3145:31">dc</name></expr></argument>, <argument pos:start="3145:34" pos:end="3145:40"><expr pos:start="3145:34" pos:end="3145:40"><name pos:start="3145:34" pos:end="3145:40">cpu_dst</name></expr></argument>, <argument pos:start="3145:43" pos:end="3145:50"><expr pos:start="3145:43" pos:end="3145:50"><name pos:start="3145:43" pos:end="3145:50">cpu_src1</name></expr></argument>, <argument pos:start="3145:53" pos:end="3145:60"><expr pos:start="3145:53" pos:end="3145:60"><name pos:start="3145:53" pos:end="3145:60">cpu_src2</name></expr></argument>, <argument pos:start="3145:63" pos:end="3145:64"><expr pos:start="3145:63" pos:end="3145:64"><literal type="number" pos:start="3145:63" pos:end="3145:64">16</literal></expr></argument>, <argument pos:start="3145:67" pos:end="3145:67"><expr pos:start="3145:67" pos:end="3145:67"><literal type="number" pos:start="3145:67" pos:end="3145:67">0</literal></expr></argument>, <argument pos:start="3145:70" pos:end="3145:70"><expr pos:start="3145:70" pos:end="3145:70"><literal type="number" pos:start="3145:70" pos:end="3145:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3147:21" pos:end="3147:51"><expr pos:start="3147:21" pos:end="3147:50"><call pos:start="3147:21" pos:end="3147:50"><name pos:start="3147:21" pos:end="3147:33">gen_store_gpr</name><argument_list pos:start="3147:34" pos:end="3147:50">(<argument pos:start="3147:35" pos:end="3147:36"><expr pos:start="3147:35" pos:end="3147:36"><name pos:start="3147:35" pos:end="3147:36">dc</name></expr></argument>, <argument pos:start="3147:39" pos:end="3147:40"><expr pos:start="3147:39" pos:end="3147:40"><name pos:start="3147:39" pos:end="3147:40">rd</name></expr></argument>, <argument pos:start="3147:43" pos:end="3147:49"><expr pos:start="3147:43" pos:end="3147:49"><name pos:start="3147:43" pos:end="3147:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3149:21" pos:end="3149:26">break;</break>

                <case pos:start="3151:17" pos:end="3151:27">case <expr pos:start="3151:22" pos:end="3151:26"><literal type="number" pos:start="3151:22" pos:end="3151:26">0x006</literal></expr>:</case> <comment type="block" pos:start="3151:29" pos:end="3151:49">/* VIS I edge16lcc */</comment>

                    <expr_stmt pos:start="3153:21" pos:end="3153:48"><expr pos:start="3153:21" pos:end="3153:47"><call pos:start="3153:21" pos:end="3153:47"><name pos:start="3153:21" pos:end="3153:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3153:38" pos:end="3153:47">(<argument pos:start="3153:39" pos:end="3153:40"><expr pos:start="3153:39" pos:end="3153:40"><name pos:start="3153:39" pos:end="3153:40">dc</name></expr></argument>, <argument pos:start="3153:43" pos:end="3153:46"><expr pos:start="3153:43" pos:end="3153:46"><name pos:start="3153:43" pos:end="3153:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3155:21" pos:end="3155:53"><expr pos:start="3155:21" pos:end="3155:52"><name pos:start="3155:21" pos:end="3155:28">cpu_src1</name> <operator pos:start="3155:30" pos:end="3155:30">=</operator> <call pos:start="3155:32" pos:end="3155:52"><name pos:start="3155:32" pos:end="3155:43">gen_load_gpr</name><argument_list pos:start="3155:44" pos:end="3155:52">(<argument pos:start="3155:45" pos:end="3155:46"><expr pos:start="3155:45" pos:end="3155:46"><name pos:start="3155:45" pos:end="3155:46">dc</name></expr></argument>, <argument pos:start="3155:49" pos:end="3155:51"><expr pos:start="3155:49" pos:end="3155:51"><name pos:start="3155:49" pos:end="3155:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3157:21" pos:end="3157:53"><expr pos:start="3157:21" pos:end="3157:52"><name pos:start="3157:21" pos:end="3157:28">cpu_src2</name> <operator pos:start="3157:30" pos:end="3157:30">=</operator> <call pos:start="3157:32" pos:end="3157:52"><name pos:start="3157:32" pos:end="3157:43">gen_load_gpr</name><argument_list pos:start="3157:44" pos:end="3157:52">(<argument pos:start="3157:45" pos:end="3157:46"><expr pos:start="3157:45" pos:end="3157:46"><name pos:start="3157:45" pos:end="3157:46">dc</name></expr></argument>, <argument pos:start="3157:49" pos:end="3157:51"><expr pos:start="3157:49" pos:end="3157:51"><name pos:start="3157:49" pos:end="3157:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3159:21" pos:end="3159:72"><expr pos:start="3159:21" pos:end="3159:71"><call pos:start="3159:21" pos:end="3159:71"><name pos:start="3159:21" pos:end="3159:28">gen_edge</name><argument_list pos:start="3159:29" pos:end="3159:71">(<argument pos:start="3159:30" pos:end="3159:31"><expr pos:start="3159:30" pos:end="3159:31"><name pos:start="3159:30" pos:end="3159:31">dc</name></expr></argument>, <argument pos:start="3159:34" pos:end="3159:40"><expr pos:start="3159:34" pos:end="3159:40"><name pos:start="3159:34" pos:end="3159:40">cpu_dst</name></expr></argument>, <argument pos:start="3159:43" pos:end="3159:50"><expr pos:start="3159:43" pos:end="3159:50"><name pos:start="3159:43" pos:end="3159:50">cpu_src1</name></expr></argument>, <argument pos:start="3159:53" pos:end="3159:60"><expr pos:start="3159:53" pos:end="3159:60"><name pos:start="3159:53" pos:end="3159:60">cpu_src2</name></expr></argument>, <argument pos:start="3159:63" pos:end="3159:64"><expr pos:start="3159:63" pos:end="3159:64"><literal type="number" pos:start="3159:63" pos:end="3159:64">16</literal></expr></argument>, <argument pos:start="3159:67" pos:end="3159:67"><expr pos:start="3159:67" pos:end="3159:67"><literal type="number" pos:start="3159:67" pos:end="3159:67">1</literal></expr></argument>, <argument pos:start="3159:70" pos:end="3159:70"><expr pos:start="3159:70" pos:end="3159:70"><literal type="number" pos:start="3159:70" pos:end="3159:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3161:21" pos:end="3161:51"><expr pos:start="3161:21" pos:end="3161:50"><call pos:start="3161:21" pos:end="3161:50"><name pos:start="3161:21" pos:end="3161:33">gen_store_gpr</name><argument_list pos:start="3161:34" pos:end="3161:50">(<argument pos:start="3161:35" pos:end="3161:36"><expr pos:start="3161:35" pos:end="3161:36"><name pos:start="3161:35" pos:end="3161:36">dc</name></expr></argument>, <argument pos:start="3161:39" pos:end="3161:40"><expr pos:start="3161:39" pos:end="3161:40"><name pos:start="3161:39" pos:end="3161:40">rd</name></expr></argument>, <argument pos:start="3161:43" pos:end="3161:49"><expr pos:start="3161:43" pos:end="3161:49"><name pos:start="3161:43" pos:end="3161:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3163:21" pos:end="3163:26">break;</break>

                <case pos:start="3165:17" pos:end="3165:27">case <expr pos:start="3165:22" pos:end="3165:26"><literal type="number" pos:start="3165:22" pos:end="3165:26">0x007</literal></expr>:</case> <comment type="block" pos:start="3165:29" pos:end="3165:49">/* VIS II edge16ln */</comment>

                    <expr_stmt pos:start="3167:21" pos:end="3167:48"><expr pos:start="3167:21" pos:end="3167:47"><call pos:start="3167:21" pos:end="3167:47"><name pos:start="3167:21" pos:end="3167:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3167:38" pos:end="3167:47">(<argument pos:start="3167:39" pos:end="3167:40"><expr pos:start="3167:39" pos:end="3167:40"><name pos:start="3167:39" pos:end="3167:40">dc</name></expr></argument>, <argument pos:start="3167:43" pos:end="3167:46"><expr pos:start="3167:43" pos:end="3167:46"><name pos:start="3167:43" pos:end="3167:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3169:21" pos:end="3169:53"><expr pos:start="3169:21" pos:end="3169:52"><name pos:start="3169:21" pos:end="3169:28">cpu_src1</name> <operator pos:start="3169:30" pos:end="3169:30">=</operator> <call pos:start="3169:32" pos:end="3169:52"><name pos:start="3169:32" pos:end="3169:43">gen_load_gpr</name><argument_list pos:start="3169:44" pos:end="3169:52">(<argument pos:start="3169:45" pos:end="3169:46"><expr pos:start="3169:45" pos:end="3169:46"><name pos:start="3169:45" pos:end="3169:46">dc</name></expr></argument>, <argument pos:start="3169:49" pos:end="3169:51"><expr pos:start="3169:49" pos:end="3169:51"><name pos:start="3169:49" pos:end="3169:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3171:21" pos:end="3171:53"><expr pos:start="3171:21" pos:end="3171:52"><name pos:start="3171:21" pos:end="3171:28">cpu_src2</name> <operator pos:start="3171:30" pos:end="3171:30">=</operator> <call pos:start="3171:32" pos:end="3171:52"><name pos:start="3171:32" pos:end="3171:43">gen_load_gpr</name><argument_list pos:start="3171:44" pos:end="3171:52">(<argument pos:start="3171:45" pos:end="3171:46"><expr pos:start="3171:45" pos:end="3171:46"><name pos:start="3171:45" pos:end="3171:46">dc</name></expr></argument>, <argument pos:start="3171:49" pos:end="3171:51"><expr pos:start="3171:49" pos:end="3171:51"><name pos:start="3171:49" pos:end="3171:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3173:21" pos:end="3173:72"><expr pos:start="3173:21" pos:end="3173:71"><call pos:start="3173:21" pos:end="3173:71"><name pos:start="3173:21" pos:end="3173:28">gen_edge</name><argument_list pos:start="3173:29" pos:end="3173:71">(<argument pos:start="3173:30" pos:end="3173:31"><expr pos:start="3173:30" pos:end="3173:31"><name pos:start="3173:30" pos:end="3173:31">dc</name></expr></argument>, <argument pos:start="3173:34" pos:end="3173:40"><expr pos:start="3173:34" pos:end="3173:40"><name pos:start="3173:34" pos:end="3173:40">cpu_dst</name></expr></argument>, <argument pos:start="3173:43" pos:end="3173:50"><expr pos:start="3173:43" pos:end="3173:50"><name pos:start="3173:43" pos:end="3173:50">cpu_src1</name></expr></argument>, <argument pos:start="3173:53" pos:end="3173:60"><expr pos:start="3173:53" pos:end="3173:60"><name pos:start="3173:53" pos:end="3173:60">cpu_src2</name></expr></argument>, <argument pos:start="3173:63" pos:end="3173:64"><expr pos:start="3173:63" pos:end="3173:64"><literal type="number" pos:start="3173:63" pos:end="3173:64">16</literal></expr></argument>, <argument pos:start="3173:67" pos:end="3173:67"><expr pos:start="3173:67" pos:end="3173:67"><literal type="number" pos:start="3173:67" pos:end="3173:67">0</literal></expr></argument>, <argument pos:start="3173:70" pos:end="3173:70"><expr pos:start="3173:70" pos:end="3173:70"><literal type="number" pos:start="3173:70" pos:end="3173:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3175:21" pos:end="3175:51"><expr pos:start="3175:21" pos:end="3175:50"><call pos:start="3175:21" pos:end="3175:50"><name pos:start="3175:21" pos:end="3175:33">gen_store_gpr</name><argument_list pos:start="3175:34" pos:end="3175:50">(<argument pos:start="3175:35" pos:end="3175:36"><expr pos:start="3175:35" pos:end="3175:36"><name pos:start="3175:35" pos:end="3175:36">dc</name></expr></argument>, <argument pos:start="3175:39" pos:end="3175:40"><expr pos:start="3175:39" pos:end="3175:40"><name pos:start="3175:39" pos:end="3175:40">rd</name></expr></argument>, <argument pos:start="3175:43" pos:end="3175:49"><expr pos:start="3175:43" pos:end="3175:49"><name pos:start="3175:43" pos:end="3175:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3177:21" pos:end="3177:26">break;</break>

                <case pos:start="3179:17" pos:end="3179:27">case <expr pos:start="3179:22" pos:end="3179:26"><literal type="number" pos:start="3179:22" pos:end="3179:26">0x008</literal></expr>:</case> <comment type="block" pos:start="3179:29" pos:end="3179:48">/* VIS I edge32cc */</comment>

                    <expr_stmt pos:start="3181:21" pos:end="3181:48"><expr pos:start="3181:21" pos:end="3181:47"><call pos:start="3181:21" pos:end="3181:47"><name pos:start="3181:21" pos:end="3181:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3181:38" pos:end="3181:47">(<argument pos:start="3181:39" pos:end="3181:40"><expr pos:start="3181:39" pos:end="3181:40"><name pos:start="3181:39" pos:end="3181:40">dc</name></expr></argument>, <argument pos:start="3181:43" pos:end="3181:46"><expr pos:start="3181:43" pos:end="3181:46"><name pos:start="3181:43" pos:end="3181:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3183:21" pos:end="3183:53"><expr pos:start="3183:21" pos:end="3183:52"><name pos:start="3183:21" pos:end="3183:28">cpu_src1</name> <operator pos:start="3183:30" pos:end="3183:30">=</operator> <call pos:start="3183:32" pos:end="3183:52"><name pos:start="3183:32" pos:end="3183:43">gen_load_gpr</name><argument_list pos:start="3183:44" pos:end="3183:52">(<argument pos:start="3183:45" pos:end="3183:46"><expr pos:start="3183:45" pos:end="3183:46"><name pos:start="3183:45" pos:end="3183:46">dc</name></expr></argument>, <argument pos:start="3183:49" pos:end="3183:51"><expr pos:start="3183:49" pos:end="3183:51"><name pos:start="3183:49" pos:end="3183:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3185:21" pos:end="3185:53"><expr pos:start="3185:21" pos:end="3185:52"><name pos:start="3185:21" pos:end="3185:28">cpu_src2</name> <operator pos:start="3185:30" pos:end="3185:30">=</operator> <call pos:start="3185:32" pos:end="3185:52"><name pos:start="3185:32" pos:end="3185:43">gen_load_gpr</name><argument_list pos:start="3185:44" pos:end="3185:52">(<argument pos:start="3185:45" pos:end="3185:46"><expr pos:start="3185:45" pos:end="3185:46"><name pos:start="3185:45" pos:end="3185:46">dc</name></expr></argument>, <argument pos:start="3185:49" pos:end="3185:51"><expr pos:start="3185:49" pos:end="3185:51"><name pos:start="3185:49" pos:end="3185:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3187:21" pos:end="3187:72"><expr pos:start="3187:21" pos:end="3187:71"><call pos:start="3187:21" pos:end="3187:71"><name pos:start="3187:21" pos:end="3187:28">gen_edge</name><argument_list pos:start="3187:29" pos:end="3187:71">(<argument pos:start="3187:30" pos:end="3187:31"><expr pos:start="3187:30" pos:end="3187:31"><name pos:start="3187:30" pos:end="3187:31">dc</name></expr></argument>, <argument pos:start="3187:34" pos:end="3187:40"><expr pos:start="3187:34" pos:end="3187:40"><name pos:start="3187:34" pos:end="3187:40">cpu_dst</name></expr></argument>, <argument pos:start="3187:43" pos:end="3187:50"><expr pos:start="3187:43" pos:end="3187:50"><name pos:start="3187:43" pos:end="3187:50">cpu_src1</name></expr></argument>, <argument pos:start="3187:53" pos:end="3187:60"><expr pos:start="3187:53" pos:end="3187:60"><name pos:start="3187:53" pos:end="3187:60">cpu_src2</name></expr></argument>, <argument pos:start="3187:63" pos:end="3187:64"><expr pos:start="3187:63" pos:end="3187:64"><literal type="number" pos:start="3187:63" pos:end="3187:64">32</literal></expr></argument>, <argument pos:start="3187:67" pos:end="3187:67"><expr pos:start="3187:67" pos:end="3187:67"><literal type="number" pos:start="3187:67" pos:end="3187:67">1</literal></expr></argument>, <argument pos:start="3187:70" pos:end="3187:70"><expr pos:start="3187:70" pos:end="3187:70"><literal type="number" pos:start="3187:70" pos:end="3187:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3189:21" pos:end="3189:51"><expr pos:start="3189:21" pos:end="3189:50"><call pos:start="3189:21" pos:end="3189:50"><name pos:start="3189:21" pos:end="3189:33">gen_store_gpr</name><argument_list pos:start="3189:34" pos:end="3189:50">(<argument pos:start="3189:35" pos:end="3189:36"><expr pos:start="3189:35" pos:end="3189:36"><name pos:start="3189:35" pos:end="3189:36">dc</name></expr></argument>, <argument pos:start="3189:39" pos:end="3189:40"><expr pos:start="3189:39" pos:end="3189:40"><name pos:start="3189:39" pos:end="3189:40">rd</name></expr></argument>, <argument pos:start="3189:43" pos:end="3189:49"><expr pos:start="3189:43" pos:end="3189:49"><name pos:start="3189:43" pos:end="3189:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3191:21" pos:end="3191:26">break;</break>

                <case pos:start="3193:17" pos:end="3193:27">case <expr pos:start="3193:22" pos:end="3193:26"><literal type="number" pos:start="3193:22" pos:end="3193:26">0x009</literal></expr>:</case> <comment type="block" pos:start="3193:29" pos:end="3193:48">/* VIS II edge32n */</comment>

                    <expr_stmt pos:start="3195:21" pos:end="3195:48"><expr pos:start="3195:21" pos:end="3195:47"><call pos:start="3195:21" pos:end="3195:47"><name pos:start="3195:21" pos:end="3195:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3195:38" pos:end="3195:47">(<argument pos:start="3195:39" pos:end="3195:40"><expr pos:start="3195:39" pos:end="3195:40"><name pos:start="3195:39" pos:end="3195:40">dc</name></expr></argument>, <argument pos:start="3195:43" pos:end="3195:46"><expr pos:start="3195:43" pos:end="3195:46"><name pos:start="3195:43" pos:end="3195:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3197:21" pos:end="3197:53"><expr pos:start="3197:21" pos:end="3197:52"><name pos:start="3197:21" pos:end="3197:28">cpu_src1</name> <operator pos:start="3197:30" pos:end="3197:30">=</operator> <call pos:start="3197:32" pos:end="3197:52"><name pos:start="3197:32" pos:end="3197:43">gen_load_gpr</name><argument_list pos:start="3197:44" pos:end="3197:52">(<argument pos:start="3197:45" pos:end="3197:46"><expr pos:start="3197:45" pos:end="3197:46"><name pos:start="3197:45" pos:end="3197:46">dc</name></expr></argument>, <argument pos:start="3197:49" pos:end="3197:51"><expr pos:start="3197:49" pos:end="3197:51"><name pos:start="3197:49" pos:end="3197:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3199:21" pos:end="3199:53"><expr pos:start="3199:21" pos:end="3199:52"><name pos:start="3199:21" pos:end="3199:28">cpu_src2</name> <operator pos:start="3199:30" pos:end="3199:30">=</operator> <call pos:start="3199:32" pos:end="3199:52"><name pos:start="3199:32" pos:end="3199:43">gen_load_gpr</name><argument_list pos:start="3199:44" pos:end="3199:52">(<argument pos:start="3199:45" pos:end="3199:46"><expr pos:start="3199:45" pos:end="3199:46"><name pos:start="3199:45" pos:end="3199:46">dc</name></expr></argument>, <argument pos:start="3199:49" pos:end="3199:51"><expr pos:start="3199:49" pos:end="3199:51"><name pos:start="3199:49" pos:end="3199:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3201:21" pos:end="3201:72"><expr pos:start="3201:21" pos:end="3201:71"><call pos:start="3201:21" pos:end="3201:71"><name pos:start="3201:21" pos:end="3201:28">gen_edge</name><argument_list pos:start="3201:29" pos:end="3201:71">(<argument pos:start="3201:30" pos:end="3201:31"><expr pos:start="3201:30" pos:end="3201:31"><name pos:start="3201:30" pos:end="3201:31">dc</name></expr></argument>, <argument pos:start="3201:34" pos:end="3201:40"><expr pos:start="3201:34" pos:end="3201:40"><name pos:start="3201:34" pos:end="3201:40">cpu_dst</name></expr></argument>, <argument pos:start="3201:43" pos:end="3201:50"><expr pos:start="3201:43" pos:end="3201:50"><name pos:start="3201:43" pos:end="3201:50">cpu_src1</name></expr></argument>, <argument pos:start="3201:53" pos:end="3201:60"><expr pos:start="3201:53" pos:end="3201:60"><name pos:start="3201:53" pos:end="3201:60">cpu_src2</name></expr></argument>, <argument pos:start="3201:63" pos:end="3201:64"><expr pos:start="3201:63" pos:end="3201:64"><literal type="number" pos:start="3201:63" pos:end="3201:64">32</literal></expr></argument>, <argument pos:start="3201:67" pos:end="3201:67"><expr pos:start="3201:67" pos:end="3201:67"><literal type="number" pos:start="3201:67" pos:end="3201:67">0</literal></expr></argument>, <argument pos:start="3201:70" pos:end="3201:70"><expr pos:start="3201:70" pos:end="3201:70"><literal type="number" pos:start="3201:70" pos:end="3201:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3203:21" pos:end="3203:51"><expr pos:start="3203:21" pos:end="3203:50"><call pos:start="3203:21" pos:end="3203:50"><name pos:start="3203:21" pos:end="3203:33">gen_store_gpr</name><argument_list pos:start="3203:34" pos:end="3203:50">(<argument pos:start="3203:35" pos:end="3203:36"><expr pos:start="3203:35" pos:end="3203:36"><name pos:start="3203:35" pos:end="3203:36">dc</name></expr></argument>, <argument pos:start="3203:39" pos:end="3203:40"><expr pos:start="3203:39" pos:end="3203:40"><name pos:start="3203:39" pos:end="3203:40">rd</name></expr></argument>, <argument pos:start="3203:43" pos:end="3203:49"><expr pos:start="3203:43" pos:end="3203:49"><name pos:start="3203:43" pos:end="3203:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3205:21" pos:end="3205:26">break;</break>

                <case pos:start="3207:17" pos:end="3207:27">case <expr pos:start="3207:22" pos:end="3207:26"><literal type="number" pos:start="3207:22" pos:end="3207:26">0x00a</literal></expr>:</case> <comment type="block" pos:start="3207:29" pos:end="3207:49">/* VIS I edge32lcc */</comment>

                    <expr_stmt pos:start="3209:21" pos:end="3209:48"><expr pos:start="3209:21" pos:end="3209:47"><call pos:start="3209:21" pos:end="3209:47"><name pos:start="3209:21" pos:end="3209:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3209:38" pos:end="3209:47">(<argument pos:start="3209:39" pos:end="3209:40"><expr pos:start="3209:39" pos:end="3209:40"><name pos:start="3209:39" pos:end="3209:40">dc</name></expr></argument>, <argument pos:start="3209:43" pos:end="3209:46"><expr pos:start="3209:43" pos:end="3209:46"><name pos:start="3209:43" pos:end="3209:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3211:21" pos:end="3211:53"><expr pos:start="3211:21" pos:end="3211:52"><name pos:start="3211:21" pos:end="3211:28">cpu_src1</name> <operator pos:start="3211:30" pos:end="3211:30">=</operator> <call pos:start="3211:32" pos:end="3211:52"><name pos:start="3211:32" pos:end="3211:43">gen_load_gpr</name><argument_list pos:start="3211:44" pos:end="3211:52">(<argument pos:start="3211:45" pos:end="3211:46"><expr pos:start="3211:45" pos:end="3211:46"><name pos:start="3211:45" pos:end="3211:46">dc</name></expr></argument>, <argument pos:start="3211:49" pos:end="3211:51"><expr pos:start="3211:49" pos:end="3211:51"><name pos:start="3211:49" pos:end="3211:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3213:21" pos:end="3213:53"><expr pos:start="3213:21" pos:end="3213:52"><name pos:start="3213:21" pos:end="3213:28">cpu_src2</name> <operator pos:start="3213:30" pos:end="3213:30">=</operator> <call pos:start="3213:32" pos:end="3213:52"><name pos:start="3213:32" pos:end="3213:43">gen_load_gpr</name><argument_list pos:start="3213:44" pos:end="3213:52">(<argument pos:start="3213:45" pos:end="3213:46"><expr pos:start="3213:45" pos:end="3213:46"><name pos:start="3213:45" pos:end="3213:46">dc</name></expr></argument>, <argument pos:start="3213:49" pos:end="3213:51"><expr pos:start="3213:49" pos:end="3213:51"><name pos:start="3213:49" pos:end="3213:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3215:21" pos:end="3215:72"><expr pos:start="3215:21" pos:end="3215:71"><call pos:start="3215:21" pos:end="3215:71"><name pos:start="3215:21" pos:end="3215:28">gen_edge</name><argument_list pos:start="3215:29" pos:end="3215:71">(<argument pos:start="3215:30" pos:end="3215:31"><expr pos:start="3215:30" pos:end="3215:31"><name pos:start="3215:30" pos:end="3215:31">dc</name></expr></argument>, <argument pos:start="3215:34" pos:end="3215:40"><expr pos:start="3215:34" pos:end="3215:40"><name pos:start="3215:34" pos:end="3215:40">cpu_dst</name></expr></argument>, <argument pos:start="3215:43" pos:end="3215:50"><expr pos:start="3215:43" pos:end="3215:50"><name pos:start="3215:43" pos:end="3215:50">cpu_src1</name></expr></argument>, <argument pos:start="3215:53" pos:end="3215:60"><expr pos:start="3215:53" pos:end="3215:60"><name pos:start="3215:53" pos:end="3215:60">cpu_src2</name></expr></argument>, <argument pos:start="3215:63" pos:end="3215:64"><expr pos:start="3215:63" pos:end="3215:64"><literal type="number" pos:start="3215:63" pos:end="3215:64">32</literal></expr></argument>, <argument pos:start="3215:67" pos:end="3215:67"><expr pos:start="3215:67" pos:end="3215:67"><literal type="number" pos:start="3215:67" pos:end="3215:67">1</literal></expr></argument>, <argument pos:start="3215:70" pos:end="3215:70"><expr pos:start="3215:70" pos:end="3215:70"><literal type="number" pos:start="3215:70" pos:end="3215:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3217:21" pos:end="3217:51"><expr pos:start="3217:21" pos:end="3217:50"><call pos:start="3217:21" pos:end="3217:50"><name pos:start="3217:21" pos:end="3217:33">gen_store_gpr</name><argument_list pos:start="3217:34" pos:end="3217:50">(<argument pos:start="3217:35" pos:end="3217:36"><expr pos:start="3217:35" pos:end="3217:36"><name pos:start="3217:35" pos:end="3217:36">dc</name></expr></argument>, <argument pos:start="3217:39" pos:end="3217:40"><expr pos:start="3217:39" pos:end="3217:40"><name pos:start="3217:39" pos:end="3217:40">rd</name></expr></argument>, <argument pos:start="3217:43" pos:end="3217:49"><expr pos:start="3217:43" pos:end="3217:49"><name pos:start="3217:43" pos:end="3217:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3219:21" pos:end="3219:26">break;</break>

                <case pos:start="3221:17" pos:end="3221:27">case <expr pos:start="3221:22" pos:end="3221:26"><literal type="number" pos:start="3221:22" pos:end="3221:26">0x00b</literal></expr>:</case> <comment type="block" pos:start="3221:29" pos:end="3221:49">/* VIS II edge32ln */</comment>

                    <expr_stmt pos:start="3223:21" pos:end="3223:48"><expr pos:start="3223:21" pos:end="3223:47"><call pos:start="3223:21" pos:end="3223:47"><name pos:start="3223:21" pos:end="3223:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3223:38" pos:end="3223:47">(<argument pos:start="3223:39" pos:end="3223:40"><expr pos:start="3223:39" pos:end="3223:40"><name pos:start="3223:39" pos:end="3223:40">dc</name></expr></argument>, <argument pos:start="3223:43" pos:end="3223:46"><expr pos:start="3223:43" pos:end="3223:46"><name pos:start="3223:43" pos:end="3223:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3225:21" pos:end="3225:53"><expr pos:start="3225:21" pos:end="3225:52"><name pos:start="3225:21" pos:end="3225:28">cpu_src1</name> <operator pos:start="3225:30" pos:end="3225:30">=</operator> <call pos:start="3225:32" pos:end="3225:52"><name pos:start="3225:32" pos:end="3225:43">gen_load_gpr</name><argument_list pos:start="3225:44" pos:end="3225:52">(<argument pos:start="3225:45" pos:end="3225:46"><expr pos:start="3225:45" pos:end="3225:46"><name pos:start="3225:45" pos:end="3225:46">dc</name></expr></argument>, <argument pos:start="3225:49" pos:end="3225:51"><expr pos:start="3225:49" pos:end="3225:51"><name pos:start="3225:49" pos:end="3225:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3227:21" pos:end="3227:53"><expr pos:start="3227:21" pos:end="3227:52"><name pos:start="3227:21" pos:end="3227:28">cpu_src2</name> <operator pos:start="3227:30" pos:end="3227:30">=</operator> <call pos:start="3227:32" pos:end="3227:52"><name pos:start="3227:32" pos:end="3227:43">gen_load_gpr</name><argument_list pos:start="3227:44" pos:end="3227:52">(<argument pos:start="3227:45" pos:end="3227:46"><expr pos:start="3227:45" pos:end="3227:46"><name pos:start="3227:45" pos:end="3227:46">dc</name></expr></argument>, <argument pos:start="3227:49" pos:end="3227:51"><expr pos:start="3227:49" pos:end="3227:51"><name pos:start="3227:49" pos:end="3227:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3229:21" pos:end="3229:72"><expr pos:start="3229:21" pos:end="3229:71"><call pos:start="3229:21" pos:end="3229:71"><name pos:start="3229:21" pos:end="3229:28">gen_edge</name><argument_list pos:start="3229:29" pos:end="3229:71">(<argument pos:start="3229:30" pos:end="3229:31"><expr pos:start="3229:30" pos:end="3229:31"><name pos:start="3229:30" pos:end="3229:31">dc</name></expr></argument>, <argument pos:start="3229:34" pos:end="3229:40"><expr pos:start="3229:34" pos:end="3229:40"><name pos:start="3229:34" pos:end="3229:40">cpu_dst</name></expr></argument>, <argument pos:start="3229:43" pos:end="3229:50"><expr pos:start="3229:43" pos:end="3229:50"><name pos:start="3229:43" pos:end="3229:50">cpu_src1</name></expr></argument>, <argument pos:start="3229:53" pos:end="3229:60"><expr pos:start="3229:53" pos:end="3229:60"><name pos:start="3229:53" pos:end="3229:60">cpu_src2</name></expr></argument>, <argument pos:start="3229:63" pos:end="3229:64"><expr pos:start="3229:63" pos:end="3229:64"><literal type="number" pos:start="3229:63" pos:end="3229:64">32</literal></expr></argument>, <argument pos:start="3229:67" pos:end="3229:67"><expr pos:start="3229:67" pos:end="3229:67"><literal type="number" pos:start="3229:67" pos:end="3229:67">0</literal></expr></argument>, <argument pos:start="3229:70" pos:end="3229:70"><expr pos:start="3229:70" pos:end="3229:70"><literal type="number" pos:start="3229:70" pos:end="3229:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3231:21" pos:end="3231:51"><expr pos:start="3231:21" pos:end="3231:50"><call pos:start="3231:21" pos:end="3231:50"><name pos:start="3231:21" pos:end="3231:33">gen_store_gpr</name><argument_list pos:start="3231:34" pos:end="3231:50">(<argument pos:start="3231:35" pos:end="3231:36"><expr pos:start="3231:35" pos:end="3231:36"><name pos:start="3231:35" pos:end="3231:36">dc</name></expr></argument>, <argument pos:start="3231:39" pos:end="3231:40"><expr pos:start="3231:39" pos:end="3231:40"><name pos:start="3231:39" pos:end="3231:40">rd</name></expr></argument>, <argument pos:start="3231:43" pos:end="3231:49"><expr pos:start="3231:43" pos:end="3231:49"><name pos:start="3231:43" pos:end="3231:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3233:21" pos:end="3233:26">break;</break>

                <case pos:start="3235:17" pos:end="3235:27">case <expr pos:start="3235:22" pos:end="3235:26"><literal type="number" pos:start="3235:22" pos:end="3235:26">0x010</literal></expr>:</case> <comment type="block" pos:start="3235:29" pos:end="3235:46">/* VIS I array8 */</comment>

                    <expr_stmt pos:start="3237:21" pos:end="3237:48"><expr pos:start="3237:21" pos:end="3237:47"><call pos:start="3237:21" pos:end="3237:47"><name pos:start="3237:21" pos:end="3237:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3237:38" pos:end="3237:47">(<argument pos:start="3237:39" pos:end="3237:40"><expr pos:start="3237:39" pos:end="3237:40"><name pos:start="3237:39" pos:end="3237:40">dc</name></expr></argument>, <argument pos:start="3237:43" pos:end="3237:46"><expr pos:start="3237:43" pos:end="3237:46"><name pos:start="3237:43" pos:end="3237:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3239:21" pos:end="3239:53"><expr pos:start="3239:21" pos:end="3239:52"><name pos:start="3239:21" pos:end="3239:28">cpu_src1</name> <operator pos:start="3239:30" pos:end="3239:30">=</operator> <call pos:start="3239:32" pos:end="3239:52"><name pos:start="3239:32" pos:end="3239:43">gen_load_gpr</name><argument_list pos:start="3239:44" pos:end="3239:52">(<argument pos:start="3239:45" pos:end="3239:46"><expr pos:start="3239:45" pos:end="3239:46"><name pos:start="3239:45" pos:end="3239:46">dc</name></expr></argument>, <argument pos:start="3239:49" pos:end="3239:51"><expr pos:start="3239:49" pos:end="3239:51"><name pos:start="3239:49" pos:end="3239:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3241:21" pos:end="3241:53"><expr pos:start="3241:21" pos:end="3241:52"><name pos:start="3241:21" pos:end="3241:28">cpu_src2</name> <operator pos:start="3241:30" pos:end="3241:30">=</operator> <call pos:start="3241:32" pos:end="3241:52"><name pos:start="3241:32" pos:end="3241:43">gen_load_gpr</name><argument_list pos:start="3241:44" pos:end="3241:52">(<argument pos:start="3241:45" pos:end="3241:46"><expr pos:start="3241:45" pos:end="3241:46"><name pos:start="3241:45" pos:end="3241:46">dc</name></expr></argument>, <argument pos:start="3241:49" pos:end="3241:51"><expr pos:start="3241:49" pos:end="3241:51"><name pos:start="3241:49" pos:end="3241:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3243:21" pos:end="3243:67"><expr pos:start="3243:21" pos:end="3243:66"><call pos:start="3243:21" pos:end="3243:66"><name pos:start="3243:21" pos:end="3243:37">gen_helper_array8</name><argument_list pos:start="3243:38" pos:end="3243:66">(<argument pos:start="3243:39" pos:end="3243:45"><expr pos:start="3243:39" pos:end="3243:45"><name pos:start="3243:39" pos:end="3243:45">cpu_dst</name></expr></argument>, <argument pos:start="3243:48" pos:end="3243:55"><expr pos:start="3243:48" pos:end="3243:55"><name pos:start="3243:48" pos:end="3243:55">cpu_src1</name></expr></argument>, <argument pos:start="3243:58" pos:end="3243:65"><expr pos:start="3243:58" pos:end="3243:65"><name pos:start="3243:58" pos:end="3243:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3245:21" pos:end="3245:51"><expr pos:start="3245:21" pos:end="3245:50"><call pos:start="3245:21" pos:end="3245:50"><name pos:start="3245:21" pos:end="3245:33">gen_store_gpr</name><argument_list pos:start="3245:34" pos:end="3245:50">(<argument pos:start="3245:35" pos:end="3245:36"><expr pos:start="3245:35" pos:end="3245:36"><name pos:start="3245:35" pos:end="3245:36">dc</name></expr></argument>, <argument pos:start="3245:39" pos:end="3245:40"><expr pos:start="3245:39" pos:end="3245:40"><name pos:start="3245:39" pos:end="3245:40">rd</name></expr></argument>, <argument pos:start="3245:43" pos:end="3245:49"><expr pos:start="3245:43" pos:end="3245:49"><name pos:start="3245:43" pos:end="3245:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3247:21" pos:end="3247:26">break;</break>

                <case pos:start="3249:17" pos:end="3249:27">case <expr pos:start="3249:22" pos:end="3249:26"><literal type="number" pos:start="3249:22" pos:end="3249:26">0x012</literal></expr>:</case> <comment type="block" pos:start="3249:29" pos:end="3249:47">/* VIS I array16 */</comment>

                    <expr_stmt pos:start="3251:21" pos:end="3251:48"><expr pos:start="3251:21" pos:end="3251:47"><call pos:start="3251:21" pos:end="3251:47"><name pos:start="3251:21" pos:end="3251:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3251:38" pos:end="3251:47">(<argument pos:start="3251:39" pos:end="3251:40"><expr pos:start="3251:39" pos:end="3251:40"><name pos:start="3251:39" pos:end="3251:40">dc</name></expr></argument>, <argument pos:start="3251:43" pos:end="3251:46"><expr pos:start="3251:43" pos:end="3251:46"><name pos:start="3251:43" pos:end="3251:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3253:21" pos:end="3253:53"><expr pos:start="3253:21" pos:end="3253:52"><name pos:start="3253:21" pos:end="3253:28">cpu_src1</name> <operator pos:start="3253:30" pos:end="3253:30">=</operator> <call pos:start="3253:32" pos:end="3253:52"><name pos:start="3253:32" pos:end="3253:43">gen_load_gpr</name><argument_list pos:start="3253:44" pos:end="3253:52">(<argument pos:start="3253:45" pos:end="3253:46"><expr pos:start="3253:45" pos:end="3253:46"><name pos:start="3253:45" pos:end="3253:46">dc</name></expr></argument>, <argument pos:start="3253:49" pos:end="3253:51"><expr pos:start="3253:49" pos:end="3253:51"><name pos:start="3253:49" pos:end="3253:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3255:21" pos:end="3255:53"><expr pos:start="3255:21" pos:end="3255:52"><name pos:start="3255:21" pos:end="3255:28">cpu_src2</name> <operator pos:start="3255:30" pos:end="3255:30">=</operator> <call pos:start="3255:32" pos:end="3255:52"><name pos:start="3255:32" pos:end="3255:43">gen_load_gpr</name><argument_list pos:start="3255:44" pos:end="3255:52">(<argument pos:start="3255:45" pos:end="3255:46"><expr pos:start="3255:45" pos:end="3255:46"><name pos:start="3255:45" pos:end="3255:46">dc</name></expr></argument>, <argument pos:start="3255:49" pos:end="3255:51"><expr pos:start="3255:49" pos:end="3255:51"><name pos:start="3255:49" pos:end="3255:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3257:21" pos:end="3257:67"><expr pos:start="3257:21" pos:end="3257:66"><call pos:start="3257:21" pos:end="3257:66"><name pos:start="3257:21" pos:end="3257:37">gen_helper_array8</name><argument_list pos:start="3257:38" pos:end="3257:66">(<argument pos:start="3257:39" pos:end="3257:45"><expr pos:start="3257:39" pos:end="3257:45"><name pos:start="3257:39" pos:end="3257:45">cpu_dst</name></expr></argument>, <argument pos:start="3257:48" pos:end="3257:55"><expr pos:start="3257:48" pos:end="3257:55"><name pos:start="3257:48" pos:end="3257:55">cpu_src1</name></expr></argument>, <argument pos:start="3257:58" pos:end="3257:65"><expr pos:start="3257:58" pos:end="3257:65"><name pos:start="3257:58" pos:end="3257:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3259:21" pos:end="3259:58"><expr pos:start="3259:21" pos:end="3259:57"><call pos:start="3259:21" pos:end="3259:57"><name pos:start="3259:21" pos:end="3259:36">tcg_gen_shli_i64</name><argument_list pos:start="3259:37" pos:end="3259:57">(<argument pos:start="3259:38" pos:end="3259:44"><expr pos:start="3259:38" pos:end="3259:44"><name pos:start="3259:38" pos:end="3259:44">cpu_dst</name></expr></argument>, <argument pos:start="3259:47" pos:end="3259:53"><expr pos:start="3259:47" pos:end="3259:53"><name pos:start="3259:47" pos:end="3259:53">cpu_dst</name></expr></argument>, <argument pos:start="3259:56" pos:end="3259:56"><expr pos:start="3259:56" pos:end="3259:56"><literal type="number" pos:start="3259:56" pos:end="3259:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3261:21" pos:end="3261:51"><expr pos:start="3261:21" pos:end="3261:50"><call pos:start="3261:21" pos:end="3261:50"><name pos:start="3261:21" pos:end="3261:33">gen_store_gpr</name><argument_list pos:start="3261:34" pos:end="3261:50">(<argument pos:start="3261:35" pos:end="3261:36"><expr pos:start="3261:35" pos:end="3261:36"><name pos:start="3261:35" pos:end="3261:36">dc</name></expr></argument>, <argument pos:start="3261:39" pos:end="3261:40"><expr pos:start="3261:39" pos:end="3261:40"><name pos:start="3261:39" pos:end="3261:40">rd</name></expr></argument>, <argument pos:start="3261:43" pos:end="3261:49"><expr pos:start="3261:43" pos:end="3261:49"><name pos:start="3261:43" pos:end="3261:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3263:21" pos:end="3263:26">break;</break>

                <case pos:start="3265:17" pos:end="3265:27">case <expr pos:start="3265:22" pos:end="3265:26"><literal type="number" pos:start="3265:22" pos:end="3265:26">0x014</literal></expr>:</case> <comment type="block" pos:start="3265:29" pos:end="3265:47">/* VIS I array32 */</comment>

                    <expr_stmt pos:start="3267:21" pos:end="3267:48"><expr pos:start="3267:21" pos:end="3267:47"><call pos:start="3267:21" pos:end="3267:47"><name pos:start="3267:21" pos:end="3267:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3267:38" pos:end="3267:47">(<argument pos:start="3267:39" pos:end="3267:40"><expr pos:start="3267:39" pos:end="3267:40"><name pos:start="3267:39" pos:end="3267:40">dc</name></expr></argument>, <argument pos:start="3267:43" pos:end="3267:46"><expr pos:start="3267:43" pos:end="3267:46"><name pos:start="3267:43" pos:end="3267:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3269:21" pos:end="3269:53"><expr pos:start="3269:21" pos:end="3269:52"><name pos:start="3269:21" pos:end="3269:28">cpu_src1</name> <operator pos:start="3269:30" pos:end="3269:30">=</operator> <call pos:start="3269:32" pos:end="3269:52"><name pos:start="3269:32" pos:end="3269:43">gen_load_gpr</name><argument_list pos:start="3269:44" pos:end="3269:52">(<argument pos:start="3269:45" pos:end="3269:46"><expr pos:start="3269:45" pos:end="3269:46"><name pos:start="3269:45" pos:end="3269:46">dc</name></expr></argument>, <argument pos:start="3269:49" pos:end="3269:51"><expr pos:start="3269:49" pos:end="3269:51"><name pos:start="3269:49" pos:end="3269:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3271:21" pos:end="3271:53"><expr pos:start="3271:21" pos:end="3271:52"><name pos:start="3271:21" pos:end="3271:28">cpu_src2</name> <operator pos:start="3271:30" pos:end="3271:30">=</operator> <call pos:start="3271:32" pos:end="3271:52"><name pos:start="3271:32" pos:end="3271:43">gen_load_gpr</name><argument_list pos:start="3271:44" pos:end="3271:52">(<argument pos:start="3271:45" pos:end="3271:46"><expr pos:start="3271:45" pos:end="3271:46"><name pos:start="3271:45" pos:end="3271:46">dc</name></expr></argument>, <argument pos:start="3271:49" pos:end="3271:51"><expr pos:start="3271:49" pos:end="3271:51"><name pos:start="3271:49" pos:end="3271:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3273:21" pos:end="3273:67"><expr pos:start="3273:21" pos:end="3273:66"><call pos:start="3273:21" pos:end="3273:66"><name pos:start="3273:21" pos:end="3273:37">gen_helper_array8</name><argument_list pos:start="3273:38" pos:end="3273:66">(<argument pos:start="3273:39" pos:end="3273:45"><expr pos:start="3273:39" pos:end="3273:45"><name pos:start="3273:39" pos:end="3273:45">cpu_dst</name></expr></argument>, <argument pos:start="3273:48" pos:end="3273:55"><expr pos:start="3273:48" pos:end="3273:55"><name pos:start="3273:48" pos:end="3273:55">cpu_src1</name></expr></argument>, <argument pos:start="3273:58" pos:end="3273:65"><expr pos:start="3273:58" pos:end="3273:65"><name pos:start="3273:58" pos:end="3273:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3275:21" pos:end="3275:58"><expr pos:start="3275:21" pos:end="3275:57"><call pos:start="3275:21" pos:end="3275:57"><name pos:start="3275:21" pos:end="3275:36">tcg_gen_shli_i64</name><argument_list pos:start="3275:37" pos:end="3275:57">(<argument pos:start="3275:38" pos:end="3275:44"><expr pos:start="3275:38" pos:end="3275:44"><name pos:start="3275:38" pos:end="3275:44">cpu_dst</name></expr></argument>, <argument pos:start="3275:47" pos:end="3275:53"><expr pos:start="3275:47" pos:end="3275:53"><name pos:start="3275:47" pos:end="3275:53">cpu_dst</name></expr></argument>, <argument pos:start="3275:56" pos:end="3275:56"><expr pos:start="3275:56" pos:end="3275:56"><literal type="number" pos:start="3275:56" pos:end="3275:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3277:21" pos:end="3277:51"><expr pos:start="3277:21" pos:end="3277:50"><call pos:start="3277:21" pos:end="3277:50"><name pos:start="3277:21" pos:end="3277:33">gen_store_gpr</name><argument_list pos:start="3277:34" pos:end="3277:50">(<argument pos:start="3277:35" pos:end="3277:36"><expr pos:start="3277:35" pos:end="3277:36"><name pos:start="3277:35" pos:end="3277:36">dc</name></expr></argument>, <argument pos:start="3277:39" pos:end="3277:40"><expr pos:start="3277:39" pos:end="3277:40"><name pos:start="3277:39" pos:end="3277:40">rd</name></expr></argument>, <argument pos:start="3277:43" pos:end="3277:49"><expr pos:start="3277:43" pos:end="3277:49"><name pos:start="3277:43" pos:end="3277:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3279:21" pos:end="3279:26">break;</break>

                <case pos:start="3281:17" pos:end="3281:27">case <expr pos:start="3281:22" pos:end="3281:26"><literal type="number" pos:start="3281:22" pos:end="3281:26">0x018</literal></expr>:</case> <comment type="block" pos:start="3281:29" pos:end="3281:49">/* VIS I alignaddr */</comment>

                    <expr_stmt pos:start="3283:21" pos:end="3283:48"><expr pos:start="3283:21" pos:end="3283:47"><call pos:start="3283:21" pos:end="3283:47"><name pos:start="3283:21" pos:end="3283:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3283:38" pos:end="3283:47">(<argument pos:start="3283:39" pos:end="3283:40"><expr pos:start="3283:39" pos:end="3283:40"><name pos:start="3283:39" pos:end="3283:40">dc</name></expr></argument>, <argument pos:start="3283:43" pos:end="3283:46"><expr pos:start="3283:43" pos:end="3283:46"><name pos:start="3283:43" pos:end="3283:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3285:21" pos:end="3285:53"><expr pos:start="3285:21" pos:end="3285:52"><name pos:start="3285:21" pos:end="3285:28">cpu_src1</name> <operator pos:start="3285:30" pos:end="3285:30">=</operator> <call pos:start="3285:32" pos:end="3285:52"><name pos:start="3285:32" pos:end="3285:43">gen_load_gpr</name><argument_list pos:start="3285:44" pos:end="3285:52">(<argument pos:start="3285:45" pos:end="3285:46"><expr pos:start="3285:45" pos:end="3285:46"><name pos:start="3285:45" pos:end="3285:46">dc</name></expr></argument>, <argument pos:start="3285:49" pos:end="3285:51"><expr pos:start="3285:49" pos:end="3285:51"><name pos:start="3285:49" pos:end="3285:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3287:21" pos:end="3287:53"><expr pos:start="3287:21" pos:end="3287:52"><name pos:start="3287:21" pos:end="3287:28">cpu_src2</name> <operator pos:start="3287:30" pos:end="3287:30">=</operator> <call pos:start="3287:32" pos:end="3287:52"><name pos:start="3287:32" pos:end="3287:43">gen_load_gpr</name><argument_list pos:start="3287:44" pos:end="3287:52">(<argument pos:start="3287:45" pos:end="3287:46"><expr pos:start="3287:45" pos:end="3287:46"><name pos:start="3287:45" pos:end="3287:46">dc</name></expr></argument>, <argument pos:start="3287:49" pos:end="3287:51"><expr pos:start="3287:49" pos:end="3287:51"><name pos:start="3287:49" pos:end="3287:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3289:21" pos:end="3289:66"><expr pos:start="3289:21" pos:end="3289:65"><call pos:start="3289:21" pos:end="3289:65"><name pos:start="3289:21" pos:end="3289:33">gen_alignaddr</name><argument_list pos:start="3289:34" pos:end="3289:65">(<argument pos:start="3289:35" pos:end="3289:41"><expr pos:start="3289:35" pos:end="3289:41"><name pos:start="3289:35" pos:end="3289:41">cpu_dst</name></expr></argument>, <argument pos:start="3289:44" pos:end="3289:51"><expr pos:start="3289:44" pos:end="3289:51"><name pos:start="3289:44" pos:end="3289:51">cpu_src1</name></expr></argument>, <argument pos:start="3289:54" pos:end="3289:61"><expr pos:start="3289:54" pos:end="3289:61"><name pos:start="3289:54" pos:end="3289:61">cpu_src2</name></expr></argument>, <argument pos:start="3289:64" pos:end="3289:64"><expr pos:start="3289:64" pos:end="3289:64"><literal type="number" pos:start="3289:64" pos:end="3289:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3291:21" pos:end="3291:51"><expr pos:start="3291:21" pos:end="3291:50"><call pos:start="3291:21" pos:end="3291:50"><name pos:start="3291:21" pos:end="3291:33">gen_store_gpr</name><argument_list pos:start="3291:34" pos:end="3291:50">(<argument pos:start="3291:35" pos:end="3291:36"><expr pos:start="3291:35" pos:end="3291:36"><name pos:start="3291:35" pos:end="3291:36">dc</name></expr></argument>, <argument pos:start="3291:39" pos:end="3291:40"><expr pos:start="3291:39" pos:end="3291:40"><name pos:start="3291:39" pos:end="3291:40">rd</name></expr></argument>, <argument pos:start="3291:43" pos:end="3291:49"><expr pos:start="3291:43" pos:end="3291:49"><name pos:start="3291:43" pos:end="3291:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3293:21" pos:end="3293:26">break;</break>

                <case pos:start="3295:17" pos:end="3295:27">case <expr pos:start="3295:22" pos:end="3295:26"><literal type="number" pos:start="3295:22" pos:end="3295:26">0x01a</literal></expr>:</case> <comment type="block" pos:start="3295:29" pos:end="3295:50">/* VIS I alignaddrl */</comment>

                    <expr_stmt pos:start="3297:21" pos:end="3297:48"><expr pos:start="3297:21" pos:end="3297:47"><call pos:start="3297:21" pos:end="3297:47"><name pos:start="3297:21" pos:end="3297:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3297:38" pos:end="3297:47">(<argument pos:start="3297:39" pos:end="3297:40"><expr pos:start="3297:39" pos:end="3297:40"><name pos:start="3297:39" pos:end="3297:40">dc</name></expr></argument>, <argument pos:start="3297:43" pos:end="3297:46"><expr pos:start="3297:43" pos:end="3297:46"><name pos:start="3297:43" pos:end="3297:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3299:21" pos:end="3299:53"><expr pos:start="3299:21" pos:end="3299:52"><name pos:start="3299:21" pos:end="3299:28">cpu_src1</name> <operator pos:start="3299:30" pos:end="3299:30">=</operator> <call pos:start="3299:32" pos:end="3299:52"><name pos:start="3299:32" pos:end="3299:43">gen_load_gpr</name><argument_list pos:start="3299:44" pos:end="3299:52">(<argument pos:start="3299:45" pos:end="3299:46"><expr pos:start="3299:45" pos:end="3299:46"><name pos:start="3299:45" pos:end="3299:46">dc</name></expr></argument>, <argument pos:start="3299:49" pos:end="3299:51"><expr pos:start="3299:49" pos:end="3299:51"><name pos:start="3299:49" pos:end="3299:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3301:21" pos:end="3301:53"><expr pos:start="3301:21" pos:end="3301:52"><name pos:start="3301:21" pos:end="3301:28">cpu_src2</name> <operator pos:start="3301:30" pos:end="3301:30">=</operator> <call pos:start="3301:32" pos:end="3301:52"><name pos:start="3301:32" pos:end="3301:43">gen_load_gpr</name><argument_list pos:start="3301:44" pos:end="3301:52">(<argument pos:start="3301:45" pos:end="3301:46"><expr pos:start="3301:45" pos:end="3301:46"><name pos:start="3301:45" pos:end="3301:46">dc</name></expr></argument>, <argument pos:start="3301:49" pos:end="3301:51"><expr pos:start="3301:49" pos:end="3301:51"><name pos:start="3301:49" pos:end="3301:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3303:21" pos:end="3303:66"><expr pos:start="3303:21" pos:end="3303:65"><call pos:start="3303:21" pos:end="3303:65"><name pos:start="3303:21" pos:end="3303:33">gen_alignaddr</name><argument_list pos:start="3303:34" pos:end="3303:65">(<argument pos:start="3303:35" pos:end="3303:41"><expr pos:start="3303:35" pos:end="3303:41"><name pos:start="3303:35" pos:end="3303:41">cpu_dst</name></expr></argument>, <argument pos:start="3303:44" pos:end="3303:51"><expr pos:start="3303:44" pos:end="3303:51"><name pos:start="3303:44" pos:end="3303:51">cpu_src1</name></expr></argument>, <argument pos:start="3303:54" pos:end="3303:61"><expr pos:start="3303:54" pos:end="3303:61"><name pos:start="3303:54" pos:end="3303:61">cpu_src2</name></expr></argument>, <argument pos:start="3303:64" pos:end="3303:64"><expr pos:start="3303:64" pos:end="3303:64"><literal type="number" pos:start="3303:64" pos:end="3303:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3305:21" pos:end="3305:51"><expr pos:start="3305:21" pos:end="3305:50"><call pos:start="3305:21" pos:end="3305:50"><name pos:start="3305:21" pos:end="3305:33">gen_store_gpr</name><argument_list pos:start="3305:34" pos:end="3305:50">(<argument pos:start="3305:35" pos:end="3305:36"><expr pos:start="3305:35" pos:end="3305:36"><name pos:start="3305:35" pos:end="3305:36">dc</name></expr></argument>, <argument pos:start="3305:39" pos:end="3305:40"><expr pos:start="3305:39" pos:end="3305:40"><name pos:start="3305:39" pos:end="3305:40">rd</name></expr></argument>, <argument pos:start="3305:43" pos:end="3305:49"><expr pos:start="3305:43" pos:end="3305:49"><name pos:start="3305:43" pos:end="3305:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3307:21" pos:end="3307:26">break;</break>

                <case pos:start="3309:17" pos:end="3309:27">case <expr pos:start="3309:22" pos:end="3309:26"><literal type="number" pos:start="3309:22" pos:end="3309:26">0x019</literal></expr>:</case> <comment type="block" pos:start="3309:29" pos:end="3309:46">/* VIS II bmask */</comment>

                    <expr_stmt pos:start="3311:21" pos:end="3311:48"><expr pos:start="3311:21" pos:end="3311:47"><call pos:start="3311:21" pos:end="3311:47"><name pos:start="3311:21" pos:end="3311:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3311:38" pos:end="3311:47">(<argument pos:start="3311:39" pos:end="3311:40"><expr pos:start="3311:39" pos:end="3311:40"><name pos:start="3311:39" pos:end="3311:40">dc</name></expr></argument>, <argument pos:start="3311:43" pos:end="3311:46"><expr pos:start="3311:43" pos:end="3311:46"><name pos:start="3311:43" pos:end="3311:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3313:21" pos:end="3313:53"><expr pos:start="3313:21" pos:end="3313:52"><name pos:start="3313:21" pos:end="3313:28">cpu_src1</name> <operator pos:start="3313:30" pos:end="3313:30">=</operator> <call pos:start="3313:32" pos:end="3313:52"><name pos:start="3313:32" pos:end="3313:43">gen_load_gpr</name><argument_list pos:start="3313:44" pos:end="3313:52">(<argument pos:start="3313:45" pos:end="3313:46"><expr pos:start="3313:45" pos:end="3313:46"><name pos:start="3313:45" pos:end="3313:46">dc</name></expr></argument>, <argument pos:start="3313:49" pos:end="3313:51"><expr pos:start="3313:49" pos:end="3313:51"><name pos:start="3313:49" pos:end="3313:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3315:21" pos:end="3315:53"><expr pos:start="3315:21" pos:end="3315:52"><name pos:start="3315:21" pos:end="3315:28">cpu_src2</name> <operator pos:start="3315:30" pos:end="3315:30">=</operator> <call pos:start="3315:32" pos:end="3315:52"><name pos:start="3315:32" pos:end="3315:43">gen_load_gpr</name><argument_list pos:start="3315:44" pos:end="3315:52">(<argument pos:start="3315:45" pos:end="3315:46"><expr pos:start="3315:45" pos:end="3315:46"><name pos:start="3315:45" pos:end="3315:46">dc</name></expr></argument>, <argument pos:start="3315:49" pos:end="3315:51"><expr pos:start="3315:49" pos:end="3315:51"><name pos:start="3315:49" pos:end="3315:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3317:21" pos:end="3317:64"><expr pos:start="3317:21" pos:end="3317:63"><call pos:start="3317:21" pos:end="3317:63"><name pos:start="3317:21" pos:end="3317:34">tcg_gen_add_tl</name><argument_list pos:start="3317:35" pos:end="3317:63">(<argument pos:start="3317:36" pos:end="3317:42"><expr pos:start="3317:36" pos:end="3317:42"><name pos:start="3317:36" pos:end="3317:42">cpu_dst</name></expr></argument>, <argument pos:start="3317:45" pos:end="3317:52"><expr pos:start="3317:45" pos:end="3317:52"><name pos:start="3317:45" pos:end="3317:52">cpu_src1</name></expr></argument>, <argument pos:start="3317:55" pos:end="3317:62"><expr pos:start="3317:55" pos:end="3317:62"><name pos:start="3317:55" pos:end="3317:62">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3319:21" pos:end="3319:74"><expr pos:start="3319:21" pos:end="3319:73"><call pos:start="3319:21" pos:end="3319:73"><name pos:start="3319:21" pos:end="3319:38">tcg_gen_deposit_tl</name><argument_list pos:start="3319:39" pos:end="3319:73">(<argument pos:start="3319:40" pos:end="3319:46"><expr pos:start="3319:40" pos:end="3319:46"><name pos:start="3319:40" pos:end="3319:46">cpu_gsr</name></expr></argument>, <argument pos:start="3319:49" pos:end="3319:55"><expr pos:start="3319:49" pos:end="3319:55"><name pos:start="3319:49" pos:end="3319:55">cpu_gsr</name></expr></argument>, <argument pos:start="3319:58" pos:end="3319:64"><expr pos:start="3319:58" pos:end="3319:64"><name pos:start="3319:58" pos:end="3319:64">cpu_dst</name></expr></argument>, <argument pos:start="3319:67" pos:end="3319:68"><expr pos:start="3319:67" pos:end="3319:68"><literal type="number" pos:start="3319:67" pos:end="3319:68">32</literal></expr></argument>, <argument pos:start="3319:71" pos:end="3319:72"><expr pos:start="3319:71" pos:end="3319:72"><literal type="number" pos:start="3319:71" pos:end="3319:72">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3321:21" pos:end="3321:51"><expr pos:start="3321:21" pos:end="3321:50"><call pos:start="3321:21" pos:end="3321:50"><name pos:start="3321:21" pos:end="3321:33">gen_store_gpr</name><argument_list pos:start="3321:34" pos:end="3321:50">(<argument pos:start="3321:35" pos:end="3321:36"><expr pos:start="3321:35" pos:end="3321:36"><name pos:start="3321:35" pos:end="3321:36">dc</name></expr></argument>, <argument pos:start="3321:39" pos:end="3321:40"><expr pos:start="3321:39" pos:end="3321:40"><name pos:start="3321:39" pos:end="3321:40">rd</name></expr></argument>, <argument pos:start="3321:43" pos:end="3321:49"><expr pos:start="3321:43" pos:end="3321:49"><name pos:start="3321:43" pos:end="3321:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3323:21" pos:end="3323:26">break;</break>

                <case pos:start="3325:17" pos:end="3325:27">case <expr pos:start="3325:22" pos:end="3325:26"><literal type="number" pos:start="3325:22" pos:end="3325:26">0x020</literal></expr>:</case> <comment type="block" pos:start="3325:29" pos:end="3325:48">/* VIS I fcmple16 */</comment>

                    <expr_stmt pos:start="3327:21" pos:end="3327:48"><expr pos:start="3327:21" pos:end="3327:47"><call pos:start="3327:21" pos:end="3327:47"><name pos:start="3327:21" pos:end="3327:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3327:38" pos:end="3327:47">(<argument pos:start="3327:39" pos:end="3327:40"><expr pos:start="3327:39" pos:end="3327:40"><name pos:start="3327:39" pos:end="3327:40">dc</name></expr></argument>, <argument pos:start="3327:43" pos:end="3327:46"><expr pos:start="3327:43" pos:end="3327:46"><name pos:start="3327:43" pos:end="3327:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3329:21" pos:end="3329:58"><expr pos:start="3329:21" pos:end="3329:57"><name pos:start="3329:21" pos:end="3329:31">cpu_src1_64</name> <operator pos:start="3329:33" pos:end="3329:33">=</operator> <call pos:start="3329:35" pos:end="3329:57"><name pos:start="3329:35" pos:end="3329:48">gen_load_fpr_D</name><argument_list pos:start="3329:49" pos:end="3329:57">(<argument pos:start="3329:50" pos:end="3329:51"><expr pos:start="3329:50" pos:end="3329:51"><name pos:start="3329:50" pos:end="3329:51">dc</name></expr></argument>, <argument pos:start="3329:54" pos:end="3329:56"><expr pos:start="3329:54" pos:end="3329:56"><name pos:start="3329:54" pos:end="3329:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3331:21" pos:end="3331:58"><expr pos:start="3331:21" pos:end="3331:57"><name pos:start="3331:21" pos:end="3331:31">cpu_src2_64</name> <operator pos:start="3331:33" pos:end="3331:33">=</operator> <call pos:start="3331:35" pos:end="3331:57"><name pos:start="3331:35" pos:end="3331:48">gen_load_fpr_D</name><argument_list pos:start="3331:49" pos:end="3331:57">(<argument pos:start="3331:50" pos:end="3331:51"><expr pos:start="3331:50" pos:end="3331:51"><name pos:start="3331:50" pos:end="3331:51">dc</name></expr></argument>, <argument pos:start="3331:54" pos:end="3331:56"><expr pos:start="3331:54" pos:end="3331:56"><name pos:start="3331:54" pos:end="3331:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3333:21" pos:end="3333:75"><expr pos:start="3333:21" pos:end="3333:74"><call pos:start="3333:21" pos:end="3333:74"><name pos:start="3333:21" pos:end="3333:39">gen_helper_fcmple16</name><argument_list pos:start="3333:40" pos:end="3333:74">(<argument pos:start="3333:41" pos:end="3333:47"><expr pos:start="3333:41" pos:end="3333:47"><name pos:start="3333:41" pos:end="3333:47">cpu_dst</name></expr></argument>, <argument pos:start="3333:50" pos:end="3333:60"><expr pos:start="3333:50" pos:end="3333:60"><name pos:start="3333:50" pos:end="3333:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3333:63" pos:end="3333:73"><expr pos:start="3333:63" pos:end="3333:73"><name pos:start="3333:63" pos:end="3333:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3335:21" pos:end="3335:51"><expr pos:start="3335:21" pos:end="3335:50"><call pos:start="3335:21" pos:end="3335:50"><name pos:start="3335:21" pos:end="3335:33">gen_store_gpr</name><argument_list pos:start="3335:34" pos:end="3335:50">(<argument pos:start="3335:35" pos:end="3335:36"><expr pos:start="3335:35" pos:end="3335:36"><name pos:start="3335:35" pos:end="3335:36">dc</name></expr></argument>, <argument pos:start="3335:39" pos:end="3335:40"><expr pos:start="3335:39" pos:end="3335:40"><name pos:start="3335:39" pos:end="3335:40">rd</name></expr></argument>, <argument pos:start="3335:43" pos:end="3335:49"><expr pos:start="3335:43" pos:end="3335:49"><name pos:start="3335:43" pos:end="3335:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3337:21" pos:end="3337:26">break;</break>

                <case pos:start="3339:17" pos:end="3339:27">case <expr pos:start="3339:22" pos:end="3339:26"><literal type="number" pos:start="3339:22" pos:end="3339:26">0x022</literal></expr>:</case> <comment type="block" pos:start="3339:29" pos:end="3339:48">/* VIS I fcmpne16 */</comment>

                    <expr_stmt pos:start="3341:21" pos:end="3341:48"><expr pos:start="3341:21" pos:end="3341:47"><call pos:start="3341:21" pos:end="3341:47"><name pos:start="3341:21" pos:end="3341:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3341:38" pos:end="3341:47">(<argument pos:start="3341:39" pos:end="3341:40"><expr pos:start="3341:39" pos:end="3341:40"><name pos:start="3341:39" pos:end="3341:40">dc</name></expr></argument>, <argument pos:start="3341:43" pos:end="3341:46"><expr pos:start="3341:43" pos:end="3341:46"><name pos:start="3341:43" pos:end="3341:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3343:21" pos:end="3343:58"><expr pos:start="3343:21" pos:end="3343:57"><name pos:start="3343:21" pos:end="3343:31">cpu_src1_64</name> <operator pos:start="3343:33" pos:end="3343:33">=</operator> <call pos:start="3343:35" pos:end="3343:57"><name pos:start="3343:35" pos:end="3343:48">gen_load_fpr_D</name><argument_list pos:start="3343:49" pos:end="3343:57">(<argument pos:start="3343:50" pos:end="3343:51"><expr pos:start="3343:50" pos:end="3343:51"><name pos:start="3343:50" pos:end="3343:51">dc</name></expr></argument>, <argument pos:start="3343:54" pos:end="3343:56"><expr pos:start="3343:54" pos:end="3343:56"><name pos:start="3343:54" pos:end="3343:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3345:21" pos:end="3345:58"><expr pos:start="3345:21" pos:end="3345:57"><name pos:start="3345:21" pos:end="3345:31">cpu_src2_64</name> <operator pos:start="3345:33" pos:end="3345:33">=</operator> <call pos:start="3345:35" pos:end="3345:57"><name pos:start="3345:35" pos:end="3345:48">gen_load_fpr_D</name><argument_list pos:start="3345:49" pos:end="3345:57">(<argument pos:start="3345:50" pos:end="3345:51"><expr pos:start="3345:50" pos:end="3345:51"><name pos:start="3345:50" pos:end="3345:51">dc</name></expr></argument>, <argument pos:start="3345:54" pos:end="3345:56"><expr pos:start="3345:54" pos:end="3345:56"><name pos:start="3345:54" pos:end="3345:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3347:21" pos:end="3347:75"><expr pos:start="3347:21" pos:end="3347:74"><call pos:start="3347:21" pos:end="3347:74"><name pos:start="3347:21" pos:end="3347:39">gen_helper_fcmpne16</name><argument_list pos:start="3347:40" pos:end="3347:74">(<argument pos:start="3347:41" pos:end="3347:47"><expr pos:start="3347:41" pos:end="3347:47"><name pos:start="3347:41" pos:end="3347:47">cpu_dst</name></expr></argument>, <argument pos:start="3347:50" pos:end="3347:60"><expr pos:start="3347:50" pos:end="3347:60"><name pos:start="3347:50" pos:end="3347:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3347:63" pos:end="3347:73"><expr pos:start="3347:63" pos:end="3347:73"><name pos:start="3347:63" pos:end="3347:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3349:21" pos:end="3349:51"><expr pos:start="3349:21" pos:end="3349:50"><call pos:start="3349:21" pos:end="3349:50"><name pos:start="3349:21" pos:end="3349:33">gen_store_gpr</name><argument_list pos:start="3349:34" pos:end="3349:50">(<argument pos:start="3349:35" pos:end="3349:36"><expr pos:start="3349:35" pos:end="3349:36"><name pos:start="3349:35" pos:end="3349:36">dc</name></expr></argument>, <argument pos:start="3349:39" pos:end="3349:40"><expr pos:start="3349:39" pos:end="3349:40"><name pos:start="3349:39" pos:end="3349:40">rd</name></expr></argument>, <argument pos:start="3349:43" pos:end="3349:49"><expr pos:start="3349:43" pos:end="3349:49"><name pos:start="3349:43" pos:end="3349:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3351:21" pos:end="3351:26">break;</break>

                <case pos:start="3353:17" pos:end="3353:27">case <expr pos:start="3353:22" pos:end="3353:26"><literal type="number" pos:start="3353:22" pos:end="3353:26">0x024</literal></expr>:</case> <comment type="block" pos:start="3353:29" pos:end="3353:48">/* VIS I fcmple32 */</comment>

                    <expr_stmt pos:start="3355:21" pos:end="3355:48"><expr pos:start="3355:21" pos:end="3355:47"><call pos:start="3355:21" pos:end="3355:47"><name pos:start="3355:21" pos:end="3355:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3355:38" pos:end="3355:47">(<argument pos:start="3355:39" pos:end="3355:40"><expr pos:start="3355:39" pos:end="3355:40"><name pos:start="3355:39" pos:end="3355:40">dc</name></expr></argument>, <argument pos:start="3355:43" pos:end="3355:46"><expr pos:start="3355:43" pos:end="3355:46"><name pos:start="3355:43" pos:end="3355:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3357:21" pos:end="3357:58"><expr pos:start="3357:21" pos:end="3357:57"><name pos:start="3357:21" pos:end="3357:31">cpu_src1_64</name> <operator pos:start="3357:33" pos:end="3357:33">=</operator> <call pos:start="3357:35" pos:end="3357:57"><name pos:start="3357:35" pos:end="3357:48">gen_load_fpr_D</name><argument_list pos:start="3357:49" pos:end="3357:57">(<argument pos:start="3357:50" pos:end="3357:51"><expr pos:start="3357:50" pos:end="3357:51"><name pos:start="3357:50" pos:end="3357:51">dc</name></expr></argument>, <argument pos:start="3357:54" pos:end="3357:56"><expr pos:start="3357:54" pos:end="3357:56"><name pos:start="3357:54" pos:end="3357:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3359:21" pos:end="3359:58"><expr pos:start="3359:21" pos:end="3359:57"><name pos:start="3359:21" pos:end="3359:31">cpu_src2_64</name> <operator pos:start="3359:33" pos:end="3359:33">=</operator> <call pos:start="3359:35" pos:end="3359:57"><name pos:start="3359:35" pos:end="3359:48">gen_load_fpr_D</name><argument_list pos:start="3359:49" pos:end="3359:57">(<argument pos:start="3359:50" pos:end="3359:51"><expr pos:start="3359:50" pos:end="3359:51"><name pos:start="3359:50" pos:end="3359:51">dc</name></expr></argument>, <argument pos:start="3359:54" pos:end="3359:56"><expr pos:start="3359:54" pos:end="3359:56"><name pos:start="3359:54" pos:end="3359:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3361:21" pos:end="3361:75"><expr pos:start="3361:21" pos:end="3361:74"><call pos:start="3361:21" pos:end="3361:74"><name pos:start="3361:21" pos:end="3361:39">gen_helper_fcmple32</name><argument_list pos:start="3361:40" pos:end="3361:74">(<argument pos:start="3361:41" pos:end="3361:47"><expr pos:start="3361:41" pos:end="3361:47"><name pos:start="3361:41" pos:end="3361:47">cpu_dst</name></expr></argument>, <argument pos:start="3361:50" pos:end="3361:60"><expr pos:start="3361:50" pos:end="3361:60"><name pos:start="3361:50" pos:end="3361:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3361:63" pos:end="3361:73"><expr pos:start="3361:63" pos:end="3361:73"><name pos:start="3361:63" pos:end="3361:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3363:21" pos:end="3363:51"><expr pos:start="3363:21" pos:end="3363:50"><call pos:start="3363:21" pos:end="3363:50"><name pos:start="3363:21" pos:end="3363:33">gen_store_gpr</name><argument_list pos:start="3363:34" pos:end="3363:50">(<argument pos:start="3363:35" pos:end="3363:36"><expr pos:start="3363:35" pos:end="3363:36"><name pos:start="3363:35" pos:end="3363:36">dc</name></expr></argument>, <argument pos:start="3363:39" pos:end="3363:40"><expr pos:start="3363:39" pos:end="3363:40"><name pos:start="3363:39" pos:end="3363:40">rd</name></expr></argument>, <argument pos:start="3363:43" pos:end="3363:49"><expr pos:start="3363:43" pos:end="3363:49"><name pos:start="3363:43" pos:end="3363:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3365:21" pos:end="3365:26">break;</break>

                <case pos:start="3367:17" pos:end="3367:27">case <expr pos:start="3367:22" pos:end="3367:26"><literal type="number" pos:start="3367:22" pos:end="3367:26">0x026</literal></expr>:</case> <comment type="block" pos:start="3367:29" pos:end="3367:48">/* VIS I fcmpne32 */</comment>

                    <expr_stmt pos:start="3369:21" pos:end="3369:48"><expr pos:start="3369:21" pos:end="3369:47"><call pos:start="3369:21" pos:end="3369:47"><name pos:start="3369:21" pos:end="3369:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3369:38" pos:end="3369:47">(<argument pos:start="3369:39" pos:end="3369:40"><expr pos:start="3369:39" pos:end="3369:40"><name pos:start="3369:39" pos:end="3369:40">dc</name></expr></argument>, <argument pos:start="3369:43" pos:end="3369:46"><expr pos:start="3369:43" pos:end="3369:46"><name pos:start="3369:43" pos:end="3369:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3371:21" pos:end="3371:58"><expr pos:start="3371:21" pos:end="3371:57"><name pos:start="3371:21" pos:end="3371:31">cpu_src1_64</name> <operator pos:start="3371:33" pos:end="3371:33">=</operator> <call pos:start="3371:35" pos:end="3371:57"><name pos:start="3371:35" pos:end="3371:48">gen_load_fpr_D</name><argument_list pos:start="3371:49" pos:end="3371:57">(<argument pos:start="3371:50" pos:end="3371:51"><expr pos:start="3371:50" pos:end="3371:51"><name pos:start="3371:50" pos:end="3371:51">dc</name></expr></argument>, <argument pos:start="3371:54" pos:end="3371:56"><expr pos:start="3371:54" pos:end="3371:56"><name pos:start="3371:54" pos:end="3371:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3373:21" pos:end="3373:58"><expr pos:start="3373:21" pos:end="3373:57"><name pos:start="3373:21" pos:end="3373:31">cpu_src2_64</name> <operator pos:start="3373:33" pos:end="3373:33">=</operator> <call pos:start="3373:35" pos:end="3373:57"><name pos:start="3373:35" pos:end="3373:48">gen_load_fpr_D</name><argument_list pos:start="3373:49" pos:end="3373:57">(<argument pos:start="3373:50" pos:end="3373:51"><expr pos:start="3373:50" pos:end="3373:51"><name pos:start="3373:50" pos:end="3373:51">dc</name></expr></argument>, <argument pos:start="3373:54" pos:end="3373:56"><expr pos:start="3373:54" pos:end="3373:56"><name pos:start="3373:54" pos:end="3373:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3375:21" pos:end="3375:75"><expr pos:start="3375:21" pos:end="3375:74"><call pos:start="3375:21" pos:end="3375:74"><name pos:start="3375:21" pos:end="3375:39">gen_helper_fcmpne32</name><argument_list pos:start="3375:40" pos:end="3375:74">(<argument pos:start="3375:41" pos:end="3375:47"><expr pos:start="3375:41" pos:end="3375:47"><name pos:start="3375:41" pos:end="3375:47">cpu_dst</name></expr></argument>, <argument pos:start="3375:50" pos:end="3375:60"><expr pos:start="3375:50" pos:end="3375:60"><name pos:start="3375:50" pos:end="3375:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3375:63" pos:end="3375:73"><expr pos:start="3375:63" pos:end="3375:73"><name pos:start="3375:63" pos:end="3375:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3377:21" pos:end="3377:51"><expr pos:start="3377:21" pos:end="3377:50"><call pos:start="3377:21" pos:end="3377:50"><name pos:start="3377:21" pos:end="3377:33">gen_store_gpr</name><argument_list pos:start="3377:34" pos:end="3377:50">(<argument pos:start="3377:35" pos:end="3377:36"><expr pos:start="3377:35" pos:end="3377:36"><name pos:start="3377:35" pos:end="3377:36">dc</name></expr></argument>, <argument pos:start="3377:39" pos:end="3377:40"><expr pos:start="3377:39" pos:end="3377:40"><name pos:start="3377:39" pos:end="3377:40">rd</name></expr></argument>, <argument pos:start="3377:43" pos:end="3377:49"><expr pos:start="3377:43" pos:end="3377:49"><name pos:start="3377:43" pos:end="3377:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3379:21" pos:end="3379:26">break;</break>

                <case pos:start="3381:17" pos:end="3381:27">case <expr pos:start="3381:22" pos:end="3381:26"><literal type="number" pos:start="3381:22" pos:end="3381:26">0x028</literal></expr>:</case> <comment type="block" pos:start="3381:29" pos:end="3381:48">/* VIS I fcmpgt16 */</comment>

                    <expr_stmt pos:start="3383:21" pos:end="3383:48"><expr pos:start="3383:21" pos:end="3383:47"><call pos:start="3383:21" pos:end="3383:47"><name pos:start="3383:21" pos:end="3383:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3383:38" pos:end="3383:47">(<argument pos:start="3383:39" pos:end="3383:40"><expr pos:start="3383:39" pos:end="3383:40"><name pos:start="3383:39" pos:end="3383:40">dc</name></expr></argument>, <argument pos:start="3383:43" pos:end="3383:46"><expr pos:start="3383:43" pos:end="3383:46"><name pos:start="3383:43" pos:end="3383:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3385:21" pos:end="3385:58"><expr pos:start="3385:21" pos:end="3385:57"><name pos:start="3385:21" pos:end="3385:31">cpu_src1_64</name> <operator pos:start="3385:33" pos:end="3385:33">=</operator> <call pos:start="3385:35" pos:end="3385:57"><name pos:start="3385:35" pos:end="3385:48">gen_load_fpr_D</name><argument_list pos:start="3385:49" pos:end="3385:57">(<argument pos:start="3385:50" pos:end="3385:51"><expr pos:start="3385:50" pos:end="3385:51"><name pos:start="3385:50" pos:end="3385:51">dc</name></expr></argument>, <argument pos:start="3385:54" pos:end="3385:56"><expr pos:start="3385:54" pos:end="3385:56"><name pos:start="3385:54" pos:end="3385:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3387:21" pos:end="3387:58"><expr pos:start="3387:21" pos:end="3387:57"><name pos:start="3387:21" pos:end="3387:31">cpu_src2_64</name> <operator pos:start="3387:33" pos:end="3387:33">=</operator> <call pos:start="3387:35" pos:end="3387:57"><name pos:start="3387:35" pos:end="3387:48">gen_load_fpr_D</name><argument_list pos:start="3387:49" pos:end="3387:57">(<argument pos:start="3387:50" pos:end="3387:51"><expr pos:start="3387:50" pos:end="3387:51"><name pos:start="3387:50" pos:end="3387:51">dc</name></expr></argument>, <argument pos:start="3387:54" pos:end="3387:56"><expr pos:start="3387:54" pos:end="3387:56"><name pos:start="3387:54" pos:end="3387:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3389:21" pos:end="3389:75"><expr pos:start="3389:21" pos:end="3389:74"><call pos:start="3389:21" pos:end="3389:74"><name pos:start="3389:21" pos:end="3389:39">gen_helper_fcmpgt16</name><argument_list pos:start="3389:40" pos:end="3389:74">(<argument pos:start="3389:41" pos:end="3389:47"><expr pos:start="3389:41" pos:end="3389:47"><name pos:start="3389:41" pos:end="3389:47">cpu_dst</name></expr></argument>, <argument pos:start="3389:50" pos:end="3389:60"><expr pos:start="3389:50" pos:end="3389:60"><name pos:start="3389:50" pos:end="3389:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3389:63" pos:end="3389:73"><expr pos:start="3389:63" pos:end="3389:73"><name pos:start="3389:63" pos:end="3389:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3391:21" pos:end="3391:51"><expr pos:start="3391:21" pos:end="3391:50"><call pos:start="3391:21" pos:end="3391:50"><name pos:start="3391:21" pos:end="3391:33">gen_store_gpr</name><argument_list pos:start="3391:34" pos:end="3391:50">(<argument pos:start="3391:35" pos:end="3391:36"><expr pos:start="3391:35" pos:end="3391:36"><name pos:start="3391:35" pos:end="3391:36">dc</name></expr></argument>, <argument pos:start="3391:39" pos:end="3391:40"><expr pos:start="3391:39" pos:end="3391:40"><name pos:start="3391:39" pos:end="3391:40">rd</name></expr></argument>, <argument pos:start="3391:43" pos:end="3391:49"><expr pos:start="3391:43" pos:end="3391:49"><name pos:start="3391:43" pos:end="3391:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3393:21" pos:end="3393:26">break;</break>

                <case pos:start="3395:17" pos:end="3395:27">case <expr pos:start="3395:22" pos:end="3395:26"><literal type="number" pos:start="3395:22" pos:end="3395:26">0x02a</literal></expr>:</case> <comment type="block" pos:start="3395:29" pos:end="3395:48">/* VIS I fcmpeq16 */</comment>

                    <expr_stmt pos:start="3397:21" pos:end="3397:48"><expr pos:start="3397:21" pos:end="3397:47"><call pos:start="3397:21" pos:end="3397:47"><name pos:start="3397:21" pos:end="3397:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3397:38" pos:end="3397:47">(<argument pos:start="3397:39" pos:end="3397:40"><expr pos:start="3397:39" pos:end="3397:40"><name pos:start="3397:39" pos:end="3397:40">dc</name></expr></argument>, <argument pos:start="3397:43" pos:end="3397:46"><expr pos:start="3397:43" pos:end="3397:46"><name pos:start="3397:43" pos:end="3397:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3399:21" pos:end="3399:58"><expr pos:start="3399:21" pos:end="3399:57"><name pos:start="3399:21" pos:end="3399:31">cpu_src1_64</name> <operator pos:start="3399:33" pos:end="3399:33">=</operator> <call pos:start="3399:35" pos:end="3399:57"><name pos:start="3399:35" pos:end="3399:48">gen_load_fpr_D</name><argument_list pos:start="3399:49" pos:end="3399:57">(<argument pos:start="3399:50" pos:end="3399:51"><expr pos:start="3399:50" pos:end="3399:51"><name pos:start="3399:50" pos:end="3399:51">dc</name></expr></argument>, <argument pos:start="3399:54" pos:end="3399:56"><expr pos:start="3399:54" pos:end="3399:56"><name pos:start="3399:54" pos:end="3399:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3401:21" pos:end="3401:58"><expr pos:start="3401:21" pos:end="3401:57"><name pos:start="3401:21" pos:end="3401:31">cpu_src2_64</name> <operator pos:start="3401:33" pos:end="3401:33">=</operator> <call pos:start="3401:35" pos:end="3401:57"><name pos:start="3401:35" pos:end="3401:48">gen_load_fpr_D</name><argument_list pos:start="3401:49" pos:end="3401:57">(<argument pos:start="3401:50" pos:end="3401:51"><expr pos:start="3401:50" pos:end="3401:51"><name pos:start="3401:50" pos:end="3401:51">dc</name></expr></argument>, <argument pos:start="3401:54" pos:end="3401:56"><expr pos:start="3401:54" pos:end="3401:56"><name pos:start="3401:54" pos:end="3401:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3403:21" pos:end="3403:75"><expr pos:start="3403:21" pos:end="3403:74"><call pos:start="3403:21" pos:end="3403:74"><name pos:start="3403:21" pos:end="3403:39">gen_helper_fcmpeq16</name><argument_list pos:start="3403:40" pos:end="3403:74">(<argument pos:start="3403:41" pos:end="3403:47"><expr pos:start="3403:41" pos:end="3403:47"><name pos:start="3403:41" pos:end="3403:47">cpu_dst</name></expr></argument>, <argument pos:start="3403:50" pos:end="3403:60"><expr pos:start="3403:50" pos:end="3403:60"><name pos:start="3403:50" pos:end="3403:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3403:63" pos:end="3403:73"><expr pos:start="3403:63" pos:end="3403:73"><name pos:start="3403:63" pos:end="3403:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3405:21" pos:end="3405:51"><expr pos:start="3405:21" pos:end="3405:50"><call pos:start="3405:21" pos:end="3405:50"><name pos:start="3405:21" pos:end="3405:33">gen_store_gpr</name><argument_list pos:start="3405:34" pos:end="3405:50">(<argument pos:start="3405:35" pos:end="3405:36"><expr pos:start="3405:35" pos:end="3405:36"><name pos:start="3405:35" pos:end="3405:36">dc</name></expr></argument>, <argument pos:start="3405:39" pos:end="3405:40"><expr pos:start="3405:39" pos:end="3405:40"><name pos:start="3405:39" pos:end="3405:40">rd</name></expr></argument>, <argument pos:start="3405:43" pos:end="3405:49"><expr pos:start="3405:43" pos:end="3405:49"><name pos:start="3405:43" pos:end="3405:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3407:21" pos:end="3407:26">break;</break>

                <case pos:start="3409:17" pos:end="3409:27">case <expr pos:start="3409:22" pos:end="3409:26"><literal type="number" pos:start="3409:22" pos:end="3409:26">0x02c</literal></expr>:</case> <comment type="block" pos:start="3409:29" pos:end="3409:48">/* VIS I fcmpgt32 */</comment>

                    <expr_stmt pos:start="3411:21" pos:end="3411:48"><expr pos:start="3411:21" pos:end="3411:47"><call pos:start="3411:21" pos:end="3411:47"><name pos:start="3411:21" pos:end="3411:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3411:38" pos:end="3411:47">(<argument pos:start="3411:39" pos:end="3411:40"><expr pos:start="3411:39" pos:end="3411:40"><name pos:start="3411:39" pos:end="3411:40">dc</name></expr></argument>, <argument pos:start="3411:43" pos:end="3411:46"><expr pos:start="3411:43" pos:end="3411:46"><name pos:start="3411:43" pos:end="3411:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3413:21" pos:end="3413:58"><expr pos:start="3413:21" pos:end="3413:57"><name pos:start="3413:21" pos:end="3413:31">cpu_src1_64</name> <operator pos:start="3413:33" pos:end="3413:33">=</operator> <call pos:start="3413:35" pos:end="3413:57"><name pos:start="3413:35" pos:end="3413:48">gen_load_fpr_D</name><argument_list pos:start="3413:49" pos:end="3413:57">(<argument pos:start="3413:50" pos:end="3413:51"><expr pos:start="3413:50" pos:end="3413:51"><name pos:start="3413:50" pos:end="3413:51">dc</name></expr></argument>, <argument pos:start="3413:54" pos:end="3413:56"><expr pos:start="3413:54" pos:end="3413:56"><name pos:start="3413:54" pos:end="3413:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3415:21" pos:end="3415:58"><expr pos:start="3415:21" pos:end="3415:57"><name pos:start="3415:21" pos:end="3415:31">cpu_src2_64</name> <operator pos:start="3415:33" pos:end="3415:33">=</operator> <call pos:start="3415:35" pos:end="3415:57"><name pos:start="3415:35" pos:end="3415:48">gen_load_fpr_D</name><argument_list pos:start="3415:49" pos:end="3415:57">(<argument pos:start="3415:50" pos:end="3415:51"><expr pos:start="3415:50" pos:end="3415:51"><name pos:start="3415:50" pos:end="3415:51">dc</name></expr></argument>, <argument pos:start="3415:54" pos:end="3415:56"><expr pos:start="3415:54" pos:end="3415:56"><name pos:start="3415:54" pos:end="3415:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3417:21" pos:end="3417:75"><expr pos:start="3417:21" pos:end="3417:74"><call pos:start="3417:21" pos:end="3417:74"><name pos:start="3417:21" pos:end="3417:39">gen_helper_fcmpgt32</name><argument_list pos:start="3417:40" pos:end="3417:74">(<argument pos:start="3417:41" pos:end="3417:47"><expr pos:start="3417:41" pos:end="3417:47"><name pos:start="3417:41" pos:end="3417:47">cpu_dst</name></expr></argument>, <argument pos:start="3417:50" pos:end="3417:60"><expr pos:start="3417:50" pos:end="3417:60"><name pos:start="3417:50" pos:end="3417:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3417:63" pos:end="3417:73"><expr pos:start="3417:63" pos:end="3417:73"><name pos:start="3417:63" pos:end="3417:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3419:21" pos:end="3419:51"><expr pos:start="3419:21" pos:end="3419:50"><call pos:start="3419:21" pos:end="3419:50"><name pos:start="3419:21" pos:end="3419:33">gen_store_gpr</name><argument_list pos:start="3419:34" pos:end="3419:50">(<argument pos:start="3419:35" pos:end="3419:36"><expr pos:start="3419:35" pos:end="3419:36"><name pos:start="3419:35" pos:end="3419:36">dc</name></expr></argument>, <argument pos:start="3419:39" pos:end="3419:40"><expr pos:start="3419:39" pos:end="3419:40"><name pos:start="3419:39" pos:end="3419:40">rd</name></expr></argument>, <argument pos:start="3419:43" pos:end="3419:49"><expr pos:start="3419:43" pos:end="3419:49"><name pos:start="3419:43" pos:end="3419:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3421:21" pos:end="3421:26">break;</break>

                <case pos:start="3423:17" pos:end="3423:27">case <expr pos:start="3423:22" pos:end="3423:26"><literal type="number" pos:start="3423:22" pos:end="3423:26">0x02e</literal></expr>:</case> <comment type="block" pos:start="3423:29" pos:end="3423:48">/* VIS I fcmpeq32 */</comment>

                    <expr_stmt pos:start="3425:21" pos:end="3425:48"><expr pos:start="3425:21" pos:end="3425:47"><call pos:start="3425:21" pos:end="3425:47"><name pos:start="3425:21" pos:end="3425:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3425:38" pos:end="3425:47">(<argument pos:start="3425:39" pos:end="3425:40"><expr pos:start="3425:39" pos:end="3425:40"><name pos:start="3425:39" pos:end="3425:40">dc</name></expr></argument>, <argument pos:start="3425:43" pos:end="3425:46"><expr pos:start="3425:43" pos:end="3425:46"><name pos:start="3425:43" pos:end="3425:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3427:21" pos:end="3427:58"><expr pos:start="3427:21" pos:end="3427:57"><name pos:start="3427:21" pos:end="3427:31">cpu_src1_64</name> <operator pos:start="3427:33" pos:end="3427:33">=</operator> <call pos:start="3427:35" pos:end="3427:57"><name pos:start="3427:35" pos:end="3427:48">gen_load_fpr_D</name><argument_list pos:start="3427:49" pos:end="3427:57">(<argument pos:start="3427:50" pos:end="3427:51"><expr pos:start="3427:50" pos:end="3427:51"><name pos:start="3427:50" pos:end="3427:51">dc</name></expr></argument>, <argument pos:start="3427:54" pos:end="3427:56"><expr pos:start="3427:54" pos:end="3427:56"><name pos:start="3427:54" pos:end="3427:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3429:21" pos:end="3429:58"><expr pos:start="3429:21" pos:end="3429:57"><name pos:start="3429:21" pos:end="3429:31">cpu_src2_64</name> <operator pos:start="3429:33" pos:end="3429:33">=</operator> <call pos:start="3429:35" pos:end="3429:57"><name pos:start="3429:35" pos:end="3429:48">gen_load_fpr_D</name><argument_list pos:start="3429:49" pos:end="3429:57">(<argument pos:start="3429:50" pos:end="3429:51"><expr pos:start="3429:50" pos:end="3429:51"><name pos:start="3429:50" pos:end="3429:51">dc</name></expr></argument>, <argument pos:start="3429:54" pos:end="3429:56"><expr pos:start="3429:54" pos:end="3429:56"><name pos:start="3429:54" pos:end="3429:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3431:21" pos:end="3431:75"><expr pos:start="3431:21" pos:end="3431:74"><call pos:start="3431:21" pos:end="3431:74"><name pos:start="3431:21" pos:end="3431:39">gen_helper_fcmpeq32</name><argument_list pos:start="3431:40" pos:end="3431:74">(<argument pos:start="3431:41" pos:end="3431:47"><expr pos:start="3431:41" pos:end="3431:47"><name pos:start="3431:41" pos:end="3431:47">cpu_dst</name></expr></argument>, <argument pos:start="3431:50" pos:end="3431:60"><expr pos:start="3431:50" pos:end="3431:60"><name pos:start="3431:50" pos:end="3431:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3431:63" pos:end="3431:73"><expr pos:start="3431:63" pos:end="3431:73"><name pos:start="3431:63" pos:end="3431:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3433:21" pos:end="3433:51"><expr pos:start="3433:21" pos:end="3433:50"><call pos:start="3433:21" pos:end="3433:50"><name pos:start="3433:21" pos:end="3433:33">gen_store_gpr</name><argument_list pos:start="3433:34" pos:end="3433:50">(<argument pos:start="3433:35" pos:end="3433:36"><expr pos:start="3433:35" pos:end="3433:36"><name pos:start="3433:35" pos:end="3433:36">dc</name></expr></argument>, <argument pos:start="3433:39" pos:end="3433:40"><expr pos:start="3433:39" pos:end="3433:40"><name pos:start="3433:39" pos:end="3433:40">rd</name></expr></argument>, <argument pos:start="3433:43" pos:end="3433:49"><expr pos:start="3433:43" pos:end="3433:49"><name pos:start="3433:43" pos:end="3433:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3435:21" pos:end="3435:26">break;</break>

                <case pos:start="3437:17" pos:end="3437:27">case <expr pos:start="3437:22" pos:end="3437:26"><literal type="number" pos:start="3437:22" pos:end="3437:26">0x031</literal></expr>:</case> <comment type="block" pos:start="3437:29" pos:end="3437:48">/* VIS I fmul8x16 */</comment>

                    <expr_stmt pos:start="3439:21" pos:end="3439:48"><expr pos:start="3439:21" pos:end="3439:47"><call pos:start="3439:21" pos:end="3439:47"><name pos:start="3439:21" pos:end="3439:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3439:38" pos:end="3439:47">(<argument pos:start="3439:39" pos:end="3439:40"><expr pos:start="3439:39" pos:end="3439:40"><name pos:start="3439:39" pos:end="3439:40">dc</name></expr></argument>, <argument pos:start="3439:43" pos:end="3439:46"><expr pos:start="3439:43" pos:end="3439:46"><name pos:start="3439:43" pos:end="3439:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3441:21" pos:end="3441:74"><expr pos:start="3441:21" pos:end="3441:73"><call pos:start="3441:21" pos:end="3441:73"><name pos:start="3441:21" pos:end="3441:34">gen_ne_fop_DDD</name><argument_list pos:start="3441:35" pos:end="3441:73">(<argument pos:start="3441:36" pos:end="3441:37"><expr pos:start="3441:36" pos:end="3441:37"><name pos:start="3441:36" pos:end="3441:37">dc</name></expr></argument>, <argument pos:start="3441:40" pos:end="3441:41"><expr pos:start="3441:40" pos:end="3441:41"><name pos:start="3441:40" pos:end="3441:41">rd</name></expr></argument>, <argument pos:start="3441:44" pos:end="3441:46"><expr pos:start="3441:44" pos:end="3441:46"><name pos:start="3441:44" pos:end="3441:46">rs1</name></expr></argument>, <argument pos:start="3441:49" pos:end="3441:51"><expr pos:start="3441:49" pos:end="3441:51"><name pos:start="3441:49" pos:end="3441:51">rs2</name></expr></argument>, <argument pos:start="3441:54" pos:end="3441:72"><expr pos:start="3441:54" pos:end="3441:72"><name pos:start="3441:54" pos:end="3441:72">gen_helper_fmul8x16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3443:21" pos:end="3443:26">break;</break>

                <case pos:start="3445:17" pos:end="3445:27">case <expr pos:start="3445:22" pos:end="3445:26"><literal type="number" pos:start="3445:22" pos:end="3445:26">0x033</literal></expr>:</case> <comment type="block" pos:start="3445:29" pos:end="3445:50">/* VIS I fmul8x16au */</comment>

                    <expr_stmt pos:start="3447:21" pos:end="3447:48"><expr pos:start="3447:21" pos:end="3447:47"><call pos:start="3447:21" pos:end="3447:47"><name pos:start="3447:21" pos:end="3447:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3447:38" pos:end="3447:47">(<argument pos:start="3447:39" pos:end="3447:40"><expr pos:start="3447:39" pos:end="3447:40"><name pos:start="3447:39" pos:end="3447:40">dc</name></expr></argument>, <argument pos:start="3447:43" pos:end="3447:46"><expr pos:start="3447:43" pos:end="3447:46"><name pos:start="3447:43" pos:end="3447:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3449:21" pos:end="3449:76"><expr pos:start="3449:21" pos:end="3449:75"><call pos:start="3449:21" pos:end="3449:75"><name pos:start="3449:21" pos:end="3449:34">gen_ne_fop_DDD</name><argument_list pos:start="3449:35" pos:end="3449:75">(<argument pos:start="3449:36" pos:end="3449:37"><expr pos:start="3449:36" pos:end="3449:37"><name pos:start="3449:36" pos:end="3449:37">dc</name></expr></argument>, <argument pos:start="3449:40" pos:end="3449:41"><expr pos:start="3449:40" pos:end="3449:41"><name pos:start="3449:40" pos:end="3449:41">rd</name></expr></argument>, <argument pos:start="3449:44" pos:end="3449:46"><expr pos:start="3449:44" pos:end="3449:46"><name pos:start="3449:44" pos:end="3449:46">rs1</name></expr></argument>, <argument pos:start="3449:49" pos:end="3449:51"><expr pos:start="3449:49" pos:end="3449:51"><name pos:start="3449:49" pos:end="3449:51">rs2</name></expr></argument>, <argument pos:start="3449:54" pos:end="3449:74"><expr pos:start="3449:54" pos:end="3449:74"><name pos:start="3449:54" pos:end="3449:74">gen_helper_fmul8x16au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3451:21" pos:end="3451:26">break;</break>

                <case pos:start="3453:17" pos:end="3453:27">case <expr pos:start="3453:22" pos:end="3453:26"><literal type="number" pos:start="3453:22" pos:end="3453:26">0x035</literal></expr>:</case> <comment type="block" pos:start="3453:29" pos:end="3453:50">/* VIS I fmul8x16al */</comment>

                    <expr_stmt pos:start="3455:21" pos:end="3455:48"><expr pos:start="3455:21" pos:end="3455:47"><call pos:start="3455:21" pos:end="3455:47"><name pos:start="3455:21" pos:end="3455:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3455:38" pos:end="3455:47">(<argument pos:start="3455:39" pos:end="3455:40"><expr pos:start="3455:39" pos:end="3455:40"><name pos:start="3455:39" pos:end="3455:40">dc</name></expr></argument>, <argument pos:start="3455:43" pos:end="3455:46"><expr pos:start="3455:43" pos:end="3455:46"><name pos:start="3455:43" pos:end="3455:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3457:21" pos:end="3457:76"><expr pos:start="3457:21" pos:end="3457:75"><call pos:start="3457:21" pos:end="3457:75"><name pos:start="3457:21" pos:end="3457:34">gen_ne_fop_DDD</name><argument_list pos:start="3457:35" pos:end="3457:75">(<argument pos:start="3457:36" pos:end="3457:37"><expr pos:start="3457:36" pos:end="3457:37"><name pos:start="3457:36" pos:end="3457:37">dc</name></expr></argument>, <argument pos:start="3457:40" pos:end="3457:41"><expr pos:start="3457:40" pos:end="3457:41"><name pos:start="3457:40" pos:end="3457:41">rd</name></expr></argument>, <argument pos:start="3457:44" pos:end="3457:46"><expr pos:start="3457:44" pos:end="3457:46"><name pos:start="3457:44" pos:end="3457:46">rs1</name></expr></argument>, <argument pos:start="3457:49" pos:end="3457:51"><expr pos:start="3457:49" pos:end="3457:51"><name pos:start="3457:49" pos:end="3457:51">rs2</name></expr></argument>, <argument pos:start="3457:54" pos:end="3457:74"><expr pos:start="3457:54" pos:end="3457:74"><name pos:start="3457:54" pos:end="3457:74">gen_helper_fmul8x16al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3459:21" pos:end="3459:26">break;</break>

                <case pos:start="3461:17" pos:end="3461:27">case <expr pos:start="3461:22" pos:end="3461:26"><literal type="number" pos:start="3461:22" pos:end="3461:26">0x036</literal></expr>:</case> <comment type="block" pos:start="3461:29" pos:end="3461:50">/* VIS I fmul8sux16 */</comment>

                    <expr_stmt pos:start="3463:21" pos:end="3463:48"><expr pos:start="3463:21" pos:end="3463:47"><call pos:start="3463:21" pos:end="3463:47"><name pos:start="3463:21" pos:end="3463:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3463:38" pos:end="3463:47">(<argument pos:start="3463:39" pos:end="3463:40"><expr pos:start="3463:39" pos:end="3463:40"><name pos:start="3463:39" pos:end="3463:40">dc</name></expr></argument>, <argument pos:start="3463:43" pos:end="3463:46"><expr pos:start="3463:43" pos:end="3463:46"><name pos:start="3463:43" pos:end="3463:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3465:21" pos:end="3465:76"><expr pos:start="3465:21" pos:end="3465:75"><call pos:start="3465:21" pos:end="3465:75"><name pos:start="3465:21" pos:end="3465:34">gen_ne_fop_DDD</name><argument_list pos:start="3465:35" pos:end="3465:75">(<argument pos:start="3465:36" pos:end="3465:37"><expr pos:start="3465:36" pos:end="3465:37"><name pos:start="3465:36" pos:end="3465:37">dc</name></expr></argument>, <argument pos:start="3465:40" pos:end="3465:41"><expr pos:start="3465:40" pos:end="3465:41"><name pos:start="3465:40" pos:end="3465:41">rd</name></expr></argument>, <argument pos:start="3465:44" pos:end="3465:46"><expr pos:start="3465:44" pos:end="3465:46"><name pos:start="3465:44" pos:end="3465:46">rs1</name></expr></argument>, <argument pos:start="3465:49" pos:end="3465:51"><expr pos:start="3465:49" pos:end="3465:51"><name pos:start="3465:49" pos:end="3465:51">rs2</name></expr></argument>, <argument pos:start="3465:54" pos:end="3465:74"><expr pos:start="3465:54" pos:end="3465:74"><name pos:start="3465:54" pos:end="3465:74">gen_helper_fmul8sux16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3467:21" pos:end="3467:26">break;</break>

                <case pos:start="3469:17" pos:end="3469:27">case <expr pos:start="3469:22" pos:end="3469:26"><literal type="number" pos:start="3469:22" pos:end="3469:26">0x037</literal></expr>:</case> <comment type="block" pos:start="3469:29" pos:end="3469:50">/* VIS I fmul8ulx16 */</comment>

                    <expr_stmt pos:start="3471:21" pos:end="3471:48"><expr pos:start="3471:21" pos:end="3471:47"><call pos:start="3471:21" pos:end="3471:47"><name pos:start="3471:21" pos:end="3471:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3471:38" pos:end="3471:47">(<argument pos:start="3471:39" pos:end="3471:40"><expr pos:start="3471:39" pos:end="3471:40"><name pos:start="3471:39" pos:end="3471:40">dc</name></expr></argument>, <argument pos:start="3471:43" pos:end="3471:46"><expr pos:start="3471:43" pos:end="3471:46"><name pos:start="3471:43" pos:end="3471:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3473:21" pos:end="3473:76"><expr pos:start="3473:21" pos:end="3473:75"><call pos:start="3473:21" pos:end="3473:75"><name pos:start="3473:21" pos:end="3473:34">gen_ne_fop_DDD</name><argument_list pos:start="3473:35" pos:end="3473:75">(<argument pos:start="3473:36" pos:end="3473:37"><expr pos:start="3473:36" pos:end="3473:37"><name pos:start="3473:36" pos:end="3473:37">dc</name></expr></argument>, <argument pos:start="3473:40" pos:end="3473:41"><expr pos:start="3473:40" pos:end="3473:41"><name pos:start="3473:40" pos:end="3473:41">rd</name></expr></argument>, <argument pos:start="3473:44" pos:end="3473:46"><expr pos:start="3473:44" pos:end="3473:46"><name pos:start="3473:44" pos:end="3473:46">rs1</name></expr></argument>, <argument pos:start="3473:49" pos:end="3473:51"><expr pos:start="3473:49" pos:end="3473:51"><name pos:start="3473:49" pos:end="3473:51">rs2</name></expr></argument>, <argument pos:start="3473:54" pos:end="3473:74"><expr pos:start="3473:54" pos:end="3473:74"><name pos:start="3473:54" pos:end="3473:74">gen_helper_fmul8ulx16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3475:21" pos:end="3475:26">break;</break>

                <case pos:start="3477:17" pos:end="3477:27">case <expr pos:start="3477:22" pos:end="3477:26"><literal type="number" pos:start="3477:22" pos:end="3477:26">0x038</literal></expr>:</case> <comment type="block" pos:start="3477:29" pos:end="3477:51">/* VIS I fmuld8sux16 */</comment>

                    <expr_stmt pos:start="3479:21" pos:end="3479:48"><expr pos:start="3479:21" pos:end="3479:47"><call pos:start="3479:21" pos:end="3479:47"><name pos:start="3479:21" pos:end="3479:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3479:38" pos:end="3479:47">(<argument pos:start="3479:39" pos:end="3479:40"><expr pos:start="3479:39" pos:end="3479:40"><name pos:start="3479:39" pos:end="3479:40">dc</name></expr></argument>, <argument pos:start="3479:43" pos:end="3479:46"><expr pos:start="3479:43" pos:end="3479:46"><name pos:start="3479:43" pos:end="3479:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3481:21" pos:end="3481:77"><expr pos:start="3481:21" pos:end="3481:76"><call pos:start="3481:21" pos:end="3481:76"><name pos:start="3481:21" pos:end="3481:34">gen_ne_fop_DDD</name><argument_list pos:start="3481:35" pos:end="3481:76">(<argument pos:start="3481:36" pos:end="3481:37"><expr pos:start="3481:36" pos:end="3481:37"><name pos:start="3481:36" pos:end="3481:37">dc</name></expr></argument>, <argument pos:start="3481:40" pos:end="3481:41"><expr pos:start="3481:40" pos:end="3481:41"><name pos:start="3481:40" pos:end="3481:41">rd</name></expr></argument>, <argument pos:start="3481:44" pos:end="3481:46"><expr pos:start="3481:44" pos:end="3481:46"><name pos:start="3481:44" pos:end="3481:46">rs1</name></expr></argument>, <argument pos:start="3481:49" pos:end="3481:51"><expr pos:start="3481:49" pos:end="3481:51"><name pos:start="3481:49" pos:end="3481:51">rs2</name></expr></argument>, <argument pos:start="3481:54" pos:end="3481:75"><expr pos:start="3481:54" pos:end="3481:75"><name pos:start="3481:54" pos:end="3481:75">gen_helper_fmuld8sux16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3483:21" pos:end="3483:26">break;</break>

                <case pos:start="3485:17" pos:end="3485:27">case <expr pos:start="3485:22" pos:end="3485:26"><literal type="number" pos:start="3485:22" pos:end="3485:26">0x039</literal></expr>:</case> <comment type="block" pos:start="3485:29" pos:end="3485:51">/* VIS I fmuld8ulx16 */</comment>

                    <expr_stmt pos:start="3487:21" pos:end="3487:48"><expr pos:start="3487:21" pos:end="3487:47"><call pos:start="3487:21" pos:end="3487:47"><name pos:start="3487:21" pos:end="3487:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3487:38" pos:end="3487:47">(<argument pos:start="3487:39" pos:end="3487:40"><expr pos:start="3487:39" pos:end="3487:40"><name pos:start="3487:39" pos:end="3487:40">dc</name></expr></argument>, <argument pos:start="3487:43" pos:end="3487:46"><expr pos:start="3487:43" pos:end="3487:46"><name pos:start="3487:43" pos:end="3487:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3489:21" pos:end="3489:77"><expr pos:start="3489:21" pos:end="3489:76"><call pos:start="3489:21" pos:end="3489:76"><name pos:start="3489:21" pos:end="3489:34">gen_ne_fop_DDD</name><argument_list pos:start="3489:35" pos:end="3489:76">(<argument pos:start="3489:36" pos:end="3489:37"><expr pos:start="3489:36" pos:end="3489:37"><name pos:start="3489:36" pos:end="3489:37">dc</name></expr></argument>, <argument pos:start="3489:40" pos:end="3489:41"><expr pos:start="3489:40" pos:end="3489:41"><name pos:start="3489:40" pos:end="3489:41">rd</name></expr></argument>, <argument pos:start="3489:44" pos:end="3489:46"><expr pos:start="3489:44" pos:end="3489:46"><name pos:start="3489:44" pos:end="3489:46">rs1</name></expr></argument>, <argument pos:start="3489:49" pos:end="3489:51"><expr pos:start="3489:49" pos:end="3489:51"><name pos:start="3489:49" pos:end="3489:51">rs2</name></expr></argument>, <argument pos:start="3489:54" pos:end="3489:75"><expr pos:start="3489:54" pos:end="3489:75"><name pos:start="3489:54" pos:end="3489:75">gen_helper_fmuld8ulx16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3491:21" pos:end="3491:26">break;</break>

                <case pos:start="3493:17" pos:end="3493:27">case <expr pos:start="3493:22" pos:end="3493:26"><literal type="number" pos:start="3493:22" pos:end="3493:26">0x03a</literal></expr>:</case> <comment type="block" pos:start="3493:29" pos:end="3493:47">/* VIS I fpack32 */</comment>

                    <expr_stmt pos:start="3495:21" pos:end="3495:48"><expr pos:start="3495:21" pos:end="3495:47"><call pos:start="3495:21" pos:end="3495:47"><name pos:start="3495:21" pos:end="3495:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3495:38" pos:end="3495:47">(<argument pos:start="3495:39" pos:end="3495:40"><expr pos:start="3495:39" pos:end="3495:40"><name pos:start="3495:39" pos:end="3495:40">dc</name></expr></argument>, <argument pos:start="3495:43" pos:end="3495:46"><expr pos:start="3495:43" pos:end="3495:46"><name pos:start="3495:43" pos:end="3495:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3497:21" pos:end="3497:74"><expr pos:start="3497:21" pos:end="3497:73"><call pos:start="3497:21" pos:end="3497:73"><name pos:start="3497:21" pos:end="3497:35">gen_gsr_fop_DDD</name><argument_list pos:start="3497:36" pos:end="3497:73">(<argument pos:start="3497:37" pos:end="3497:38"><expr pos:start="3497:37" pos:end="3497:38"><name pos:start="3497:37" pos:end="3497:38">dc</name></expr></argument>, <argument pos:start="3497:41" pos:end="3497:42"><expr pos:start="3497:41" pos:end="3497:42"><name pos:start="3497:41" pos:end="3497:42">rd</name></expr></argument>, <argument pos:start="3497:45" pos:end="3497:47"><expr pos:start="3497:45" pos:end="3497:47"><name pos:start="3497:45" pos:end="3497:47">rs1</name></expr></argument>, <argument pos:start="3497:50" pos:end="3497:52"><expr pos:start="3497:50" pos:end="3497:52"><name pos:start="3497:50" pos:end="3497:52">rs2</name></expr></argument>, <argument pos:start="3497:55" pos:end="3497:72"><expr pos:start="3497:55" pos:end="3497:72"><name pos:start="3497:55" pos:end="3497:72">gen_helper_fpack32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3499:21" pos:end="3499:26">break;</break>

                <case pos:start="3501:17" pos:end="3501:27">case <expr pos:start="3501:22" pos:end="3501:26"><literal type="number" pos:start="3501:22" pos:end="3501:26">0x03b</literal></expr>:</case> <comment type="block" pos:start="3501:29" pos:end="3501:47">/* VIS I fpack16 */</comment>

                    <expr_stmt pos:start="3503:21" pos:end="3503:48"><expr pos:start="3503:21" pos:end="3503:47"><call pos:start="3503:21" pos:end="3503:47"><name pos:start="3503:21" pos:end="3503:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3503:38" pos:end="3503:47">(<argument pos:start="3503:39" pos:end="3503:40"><expr pos:start="3503:39" pos:end="3503:40"><name pos:start="3503:39" pos:end="3503:40">dc</name></expr></argument>, <argument pos:start="3503:43" pos:end="3503:46"><expr pos:start="3503:43" pos:end="3503:46"><name pos:start="3503:43" pos:end="3503:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3505:21" pos:end="3505:58"><expr pos:start="3505:21" pos:end="3505:57"><name pos:start="3505:21" pos:end="3505:31">cpu_src1_64</name> <operator pos:start="3505:33" pos:end="3505:33">=</operator> <call pos:start="3505:35" pos:end="3505:57"><name pos:start="3505:35" pos:end="3505:48">gen_load_fpr_D</name><argument_list pos:start="3505:49" pos:end="3505:57">(<argument pos:start="3505:50" pos:end="3505:51"><expr pos:start="3505:50" pos:end="3505:51"><name pos:start="3505:50" pos:end="3505:51">dc</name></expr></argument>, <argument pos:start="3505:54" pos:end="3505:56"><expr pos:start="3505:54" pos:end="3505:56"><name pos:start="3505:54" pos:end="3505:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3507:21" pos:end="3507:52"><expr pos:start="3507:21" pos:end="3507:51"><name pos:start="3507:21" pos:end="3507:30">cpu_dst_32</name> <operator pos:start="3507:32" pos:end="3507:32">=</operator> <call pos:start="3507:34" pos:end="3507:51"><name pos:start="3507:34" pos:end="3507:47">gen_dest_fpr_F</name><argument_list pos:start="3507:48" pos:end="3507:51">(<argument pos:start="3507:49" pos:end="3507:50"><expr pos:start="3507:49" pos:end="3507:50"><name pos:start="3507:49" pos:end="3507:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3509:21" pos:end="3509:73"><expr pos:start="3509:21" pos:end="3509:72"><call pos:start="3509:21" pos:end="3509:72"><name pos:start="3509:21" pos:end="3509:38">gen_helper_fpack16</name><argument_list pos:start="3509:39" pos:end="3509:72">(<argument pos:start="3509:40" pos:end="3509:49"><expr pos:start="3509:40" pos:end="3509:49"><name pos:start="3509:40" pos:end="3509:49">cpu_dst_32</name></expr></argument>, <argument pos:start="3509:52" pos:end="3509:58"><expr pos:start="3509:52" pos:end="3509:58"><name pos:start="3509:52" pos:end="3509:58">cpu_gsr</name></expr></argument>, <argument pos:start="3509:61" pos:end="3509:71"><expr pos:start="3509:61" pos:end="3509:71"><name pos:start="3509:61" pos:end="3509:71">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3511:21" pos:end="3511:56"><expr pos:start="3511:21" pos:end="3511:55"><call pos:start="3511:21" pos:end="3511:55"><name pos:start="3511:21" pos:end="3511:35">gen_store_fpr_F</name><argument_list pos:start="3511:36" pos:end="3511:55">(<argument pos:start="3511:37" pos:end="3511:38"><expr pos:start="3511:37" pos:end="3511:38"><name pos:start="3511:37" pos:end="3511:38">dc</name></expr></argument>, <argument pos:start="3511:41" pos:end="3511:42"><expr pos:start="3511:41" pos:end="3511:42"><name pos:start="3511:41" pos:end="3511:42">rd</name></expr></argument>, <argument pos:start="3511:45" pos:end="3511:54"><expr pos:start="3511:45" pos:end="3511:54"><name pos:start="3511:45" pos:end="3511:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3513:21" pos:end="3513:26">break;</break>

                <case pos:start="3515:17" pos:end="3515:27">case <expr pos:start="3515:22" pos:end="3515:26"><literal type="number" pos:start="3515:22" pos:end="3515:26">0x03d</literal></expr>:</case> <comment type="block" pos:start="3515:29" pos:end="3515:48">/* VIS I fpackfix */</comment>

                    <expr_stmt pos:start="3517:21" pos:end="3517:48"><expr pos:start="3517:21" pos:end="3517:47"><call pos:start="3517:21" pos:end="3517:47"><name pos:start="3517:21" pos:end="3517:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3517:38" pos:end="3517:47">(<argument pos:start="3517:39" pos:end="3517:40"><expr pos:start="3517:39" pos:end="3517:40"><name pos:start="3517:39" pos:end="3517:40">dc</name></expr></argument>, <argument pos:start="3517:43" pos:end="3517:46"><expr pos:start="3517:43" pos:end="3517:46"><name pos:start="3517:43" pos:end="3517:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3519:21" pos:end="3519:58"><expr pos:start="3519:21" pos:end="3519:57"><name pos:start="3519:21" pos:end="3519:31">cpu_src1_64</name> <operator pos:start="3519:33" pos:end="3519:33">=</operator> <call pos:start="3519:35" pos:end="3519:57"><name pos:start="3519:35" pos:end="3519:48">gen_load_fpr_D</name><argument_list pos:start="3519:49" pos:end="3519:57">(<argument pos:start="3519:50" pos:end="3519:51"><expr pos:start="3519:50" pos:end="3519:51"><name pos:start="3519:50" pos:end="3519:51">dc</name></expr></argument>, <argument pos:start="3519:54" pos:end="3519:56"><expr pos:start="3519:54" pos:end="3519:56"><name pos:start="3519:54" pos:end="3519:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3521:21" pos:end="3521:52"><expr pos:start="3521:21" pos:end="3521:51"><name pos:start="3521:21" pos:end="3521:30">cpu_dst_32</name> <operator pos:start="3521:32" pos:end="3521:32">=</operator> <call pos:start="3521:34" pos:end="3521:51"><name pos:start="3521:34" pos:end="3521:47">gen_dest_fpr_F</name><argument_list pos:start="3521:48" pos:end="3521:51">(<argument pos:start="3521:49" pos:end="3521:50"><expr pos:start="3521:49" pos:end="3521:50"><name pos:start="3521:49" pos:end="3521:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3523:21" pos:end="3523:74"><expr pos:start="3523:21" pos:end="3523:73"><call pos:start="3523:21" pos:end="3523:73"><name pos:start="3523:21" pos:end="3523:39">gen_helper_fpackfix</name><argument_list pos:start="3523:40" pos:end="3523:73">(<argument pos:start="3523:41" pos:end="3523:50"><expr pos:start="3523:41" pos:end="3523:50"><name pos:start="3523:41" pos:end="3523:50">cpu_dst_32</name></expr></argument>, <argument pos:start="3523:53" pos:end="3523:59"><expr pos:start="3523:53" pos:end="3523:59"><name pos:start="3523:53" pos:end="3523:59">cpu_gsr</name></expr></argument>, <argument pos:start="3523:62" pos:end="3523:72"><expr pos:start="3523:62" pos:end="3523:72"><name pos:start="3523:62" pos:end="3523:72">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3525:21" pos:end="3525:56"><expr pos:start="3525:21" pos:end="3525:55"><call pos:start="3525:21" pos:end="3525:55"><name pos:start="3525:21" pos:end="3525:35">gen_store_fpr_F</name><argument_list pos:start="3525:36" pos:end="3525:55">(<argument pos:start="3525:37" pos:end="3525:38"><expr pos:start="3525:37" pos:end="3525:38"><name pos:start="3525:37" pos:end="3525:38">dc</name></expr></argument>, <argument pos:start="3525:41" pos:end="3525:42"><expr pos:start="3525:41" pos:end="3525:42"><name pos:start="3525:41" pos:end="3525:42">rd</name></expr></argument>, <argument pos:start="3525:45" pos:end="3525:54"><expr pos:start="3525:45" pos:end="3525:54"><name pos:start="3525:45" pos:end="3525:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3527:21" pos:end="3527:26">break;</break>

                <case pos:start="3529:17" pos:end="3529:27">case <expr pos:start="3529:22" pos:end="3529:26"><literal type="number" pos:start="3529:22" pos:end="3529:26">0x03e</literal></expr>:</case> <comment type="block" pos:start="3529:29" pos:end="3529:45">/* VIS I pdist */</comment>

                    <expr_stmt pos:start="3531:21" pos:end="3531:48"><expr pos:start="3531:21" pos:end="3531:47"><call pos:start="3531:21" pos:end="3531:47"><name pos:start="3531:21" pos:end="3531:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3531:38" pos:end="3531:47">(<argument pos:start="3531:39" pos:end="3531:40"><expr pos:start="3531:39" pos:end="3531:40"><name pos:start="3531:39" pos:end="3531:40">dc</name></expr></argument>, <argument pos:start="3531:43" pos:end="3531:46"><expr pos:start="3531:43" pos:end="3531:46"><name pos:start="3531:43" pos:end="3531:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3533:21" pos:end="3533:72"><expr pos:start="3533:21" pos:end="3533:71"><call pos:start="3533:21" pos:end="3533:71"><name pos:start="3533:21" pos:end="3533:35">gen_ne_fop_DDDD</name><argument_list pos:start="3533:36" pos:end="3533:71">(<argument pos:start="3533:37" pos:end="3533:38"><expr pos:start="3533:37" pos:end="3533:38"><name pos:start="3533:37" pos:end="3533:38">dc</name></expr></argument>, <argument pos:start="3533:41" pos:end="3533:42"><expr pos:start="3533:41" pos:end="3533:42"><name pos:start="3533:41" pos:end="3533:42">rd</name></expr></argument>, <argument pos:start="3533:45" pos:end="3533:47"><expr pos:start="3533:45" pos:end="3533:47"><name pos:start="3533:45" pos:end="3533:47">rs1</name></expr></argument>, <argument pos:start="3533:50" pos:end="3533:52"><expr pos:start="3533:50" pos:end="3533:52"><name pos:start="3533:50" pos:end="3533:52">rs2</name></expr></argument>, <argument pos:start="3533:55" pos:end="3533:70"><expr pos:start="3533:55" pos:end="3533:70"><name pos:start="3533:55" pos:end="3533:70">gen_helper_pdist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3535:21" pos:end="3535:26">break;</break>

                <case pos:start="3537:17" pos:end="3537:27">case <expr pos:start="3537:22" pos:end="3537:26"><literal type="number" pos:start="3537:22" pos:end="3537:26">0x048</literal></expr>:</case> <comment type="block" pos:start="3537:29" pos:end="3537:50">/* VIS I faligndata */</comment>

                    <expr_stmt pos:start="3539:21" pos:end="3539:48"><expr pos:start="3539:21" pos:end="3539:47"><call pos:start="3539:21" pos:end="3539:47"><name pos:start="3539:21" pos:end="3539:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3539:38" pos:end="3539:47">(<argument pos:start="3539:39" pos:end="3539:40"><expr pos:start="3539:39" pos:end="3539:40"><name pos:start="3539:39" pos:end="3539:40">dc</name></expr></argument>, <argument pos:start="3539:43" pos:end="3539:46"><expr pos:start="3539:43" pos:end="3539:46"><name pos:start="3539:43" pos:end="3539:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3541:21" pos:end="3541:70"><expr pos:start="3541:21" pos:end="3541:69"><call pos:start="3541:21" pos:end="3541:69"><name pos:start="3541:21" pos:end="3541:35">gen_gsr_fop_DDD</name><argument_list pos:start="3541:36" pos:end="3541:69">(<argument pos:start="3541:37" pos:end="3541:38"><expr pos:start="3541:37" pos:end="3541:38"><name pos:start="3541:37" pos:end="3541:38">dc</name></expr></argument>, <argument pos:start="3541:41" pos:end="3541:42"><expr pos:start="3541:41" pos:end="3541:42"><name pos:start="3541:41" pos:end="3541:42">rd</name></expr></argument>, <argument pos:start="3541:45" pos:end="3541:47"><expr pos:start="3541:45" pos:end="3541:47"><name pos:start="3541:45" pos:end="3541:47">rs1</name></expr></argument>, <argument pos:start="3541:50" pos:end="3541:52"><expr pos:start="3541:50" pos:end="3541:52"><name pos:start="3541:50" pos:end="3541:52">rs2</name></expr></argument>, <argument pos:start="3541:55" pos:end="3541:68"><expr pos:start="3541:55" pos:end="3541:68"><name pos:start="3541:55" pos:end="3541:68">gen_faligndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3543:21" pos:end="3543:26">break;</break>

                <case pos:start="3545:17" pos:end="3545:27">case <expr pos:start="3545:22" pos:end="3545:26"><literal type="number" pos:start="3545:22" pos:end="3545:26">0x04b</literal></expr>:</case> <comment type="block" pos:start="3545:29" pos:end="3545:47">/* VIS I fpmerge */</comment>

                    <expr_stmt pos:start="3547:21" pos:end="3547:48"><expr pos:start="3547:21" pos:end="3547:47"><call pos:start="3547:21" pos:end="3547:47"><name pos:start="3547:21" pos:end="3547:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3547:38" pos:end="3547:47">(<argument pos:start="3547:39" pos:end="3547:40"><expr pos:start="3547:39" pos:end="3547:40"><name pos:start="3547:39" pos:end="3547:40">dc</name></expr></argument>, <argument pos:start="3547:43" pos:end="3547:46"><expr pos:start="3547:43" pos:end="3547:46"><name pos:start="3547:43" pos:end="3547:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3549:21" pos:end="3549:73"><expr pos:start="3549:21" pos:end="3549:72"><call pos:start="3549:21" pos:end="3549:72"><name pos:start="3549:21" pos:end="3549:34">gen_ne_fop_DDD</name><argument_list pos:start="3549:35" pos:end="3549:72">(<argument pos:start="3549:36" pos:end="3549:37"><expr pos:start="3549:36" pos:end="3549:37"><name pos:start="3549:36" pos:end="3549:37">dc</name></expr></argument>, <argument pos:start="3549:40" pos:end="3549:41"><expr pos:start="3549:40" pos:end="3549:41"><name pos:start="3549:40" pos:end="3549:41">rd</name></expr></argument>, <argument pos:start="3549:44" pos:end="3549:46"><expr pos:start="3549:44" pos:end="3549:46"><name pos:start="3549:44" pos:end="3549:46">rs1</name></expr></argument>, <argument pos:start="3549:49" pos:end="3549:51"><expr pos:start="3549:49" pos:end="3549:51"><name pos:start="3549:49" pos:end="3549:51">rs2</name></expr></argument>, <argument pos:start="3549:54" pos:end="3549:71"><expr pos:start="3549:54" pos:end="3549:71"><name pos:start="3549:54" pos:end="3549:71">gen_helper_fpmerge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3551:21" pos:end="3551:26">break;</break>

                <case pos:start="3553:17" pos:end="3553:27">case <expr pos:start="3553:22" pos:end="3553:26"><literal type="number" pos:start="3553:22" pos:end="3553:26">0x04c</literal></expr>:</case> <comment type="block" pos:start="3553:29" pos:end="3553:49">/* VIS II bshuffle */</comment>

                    <expr_stmt pos:start="3555:21" pos:end="3555:48"><expr pos:start="3555:21" pos:end="3555:47"><call pos:start="3555:21" pos:end="3555:47"><name pos:start="3555:21" pos:end="3555:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3555:38" pos:end="3555:47">(<argument pos:start="3555:39" pos:end="3555:40"><expr pos:start="3555:39" pos:end="3555:40"><name pos:start="3555:39" pos:end="3555:40">dc</name></expr></argument>, <argument pos:start="3555:43" pos:end="3555:46"><expr pos:start="3555:43" pos:end="3555:46"><name pos:start="3555:43" pos:end="3555:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3557:21" pos:end="3557:75"><expr pos:start="3557:21" pos:end="3557:74"><call pos:start="3557:21" pos:end="3557:74"><name pos:start="3557:21" pos:end="3557:35">gen_gsr_fop_DDD</name><argument_list pos:start="3557:36" pos:end="3557:74">(<argument pos:start="3557:37" pos:end="3557:38"><expr pos:start="3557:37" pos:end="3557:38"><name pos:start="3557:37" pos:end="3557:38">dc</name></expr></argument>, <argument pos:start="3557:41" pos:end="3557:42"><expr pos:start="3557:41" pos:end="3557:42"><name pos:start="3557:41" pos:end="3557:42">rd</name></expr></argument>, <argument pos:start="3557:45" pos:end="3557:47"><expr pos:start="3557:45" pos:end="3557:47"><name pos:start="3557:45" pos:end="3557:47">rs1</name></expr></argument>, <argument pos:start="3557:50" pos:end="3557:52"><expr pos:start="3557:50" pos:end="3557:52"><name pos:start="3557:50" pos:end="3557:52">rs2</name></expr></argument>, <argument pos:start="3557:55" pos:end="3557:73"><expr pos:start="3557:55" pos:end="3557:73"><name pos:start="3557:55" pos:end="3557:73">gen_helper_bshuffle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3559:21" pos:end="3559:26">break;</break>

                <case pos:start="3561:17" pos:end="3561:27">case <expr pos:start="3561:22" pos:end="3561:26"><literal type="number" pos:start="3561:22" pos:end="3561:26">0x04d</literal></expr>:</case> <comment type="block" pos:start="3561:29" pos:end="3561:47">/* VIS I fexpand */</comment>

                    <expr_stmt pos:start="3563:21" pos:end="3563:48"><expr pos:start="3563:21" pos:end="3563:47"><call pos:start="3563:21" pos:end="3563:47"><name pos:start="3563:21" pos:end="3563:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3563:38" pos:end="3563:47">(<argument pos:start="3563:39" pos:end="3563:40"><expr pos:start="3563:39" pos:end="3563:40"><name pos:start="3563:39" pos:end="3563:40">dc</name></expr></argument>, <argument pos:start="3563:43" pos:end="3563:46"><expr pos:start="3563:43" pos:end="3563:46"><name pos:start="3563:43" pos:end="3563:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3565:21" pos:end="3565:73"><expr pos:start="3565:21" pos:end="3565:72"><call pos:start="3565:21" pos:end="3565:72"><name pos:start="3565:21" pos:end="3565:34">gen_ne_fop_DDD</name><argument_list pos:start="3565:35" pos:end="3565:72">(<argument pos:start="3565:36" pos:end="3565:37"><expr pos:start="3565:36" pos:end="3565:37"><name pos:start="3565:36" pos:end="3565:37">dc</name></expr></argument>, <argument pos:start="3565:40" pos:end="3565:41"><expr pos:start="3565:40" pos:end="3565:41"><name pos:start="3565:40" pos:end="3565:41">rd</name></expr></argument>, <argument pos:start="3565:44" pos:end="3565:46"><expr pos:start="3565:44" pos:end="3565:46"><name pos:start="3565:44" pos:end="3565:46">rs1</name></expr></argument>, <argument pos:start="3565:49" pos:end="3565:51"><expr pos:start="3565:49" pos:end="3565:51"><name pos:start="3565:49" pos:end="3565:51">rs2</name></expr></argument>, <argument pos:start="3565:54" pos:end="3565:71"><expr pos:start="3565:54" pos:end="3565:71"><name pos:start="3565:54" pos:end="3565:71">gen_helper_fexpand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3567:21" pos:end="3567:26">break;</break>

                <case pos:start="3569:17" pos:end="3569:27">case <expr pos:start="3569:22" pos:end="3569:26"><literal type="number" pos:start="3569:22" pos:end="3569:26">0x050</literal></expr>:</case> <comment type="block" pos:start="3569:29" pos:end="3569:47">/* VIS I fpadd16 */</comment>

                    <expr_stmt pos:start="3571:21" pos:end="3571:48"><expr pos:start="3571:21" pos:end="3571:47"><call pos:start="3571:21" pos:end="3571:47"><name pos:start="3571:21" pos:end="3571:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3571:38" pos:end="3571:47">(<argument pos:start="3571:39" pos:end="3571:40"><expr pos:start="3571:39" pos:end="3571:40"><name pos:start="3571:39" pos:end="3571:40">dc</name></expr></argument>, <argument pos:start="3571:43" pos:end="3571:46"><expr pos:start="3571:43" pos:end="3571:46"><name pos:start="3571:43" pos:end="3571:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3573:21" pos:end="3573:73"><expr pos:start="3573:21" pos:end="3573:72"><call pos:start="3573:21" pos:end="3573:72"><name pos:start="3573:21" pos:end="3573:34">gen_ne_fop_DDD</name><argument_list pos:start="3573:35" pos:end="3573:72">(<argument pos:start="3573:36" pos:end="3573:37"><expr pos:start="3573:36" pos:end="3573:37"><name pos:start="3573:36" pos:end="3573:37">dc</name></expr></argument>, <argument pos:start="3573:40" pos:end="3573:41"><expr pos:start="3573:40" pos:end="3573:41"><name pos:start="3573:40" pos:end="3573:41">rd</name></expr></argument>, <argument pos:start="3573:44" pos:end="3573:46"><expr pos:start="3573:44" pos:end="3573:46"><name pos:start="3573:44" pos:end="3573:46">rs1</name></expr></argument>, <argument pos:start="3573:49" pos:end="3573:51"><expr pos:start="3573:49" pos:end="3573:51"><name pos:start="3573:49" pos:end="3573:51">rs2</name></expr></argument>, <argument pos:start="3573:54" pos:end="3573:71"><expr pos:start="3573:54" pos:end="3573:71"><name pos:start="3573:54" pos:end="3573:71">gen_helper_fpadd16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3575:21" pos:end="3575:26">break;</break>

                <case pos:start="3577:17" pos:end="3577:27">case <expr pos:start="3577:22" pos:end="3577:26"><literal type="number" pos:start="3577:22" pos:end="3577:26">0x051</literal></expr>:</case> <comment type="block" pos:start="3577:29" pos:end="3577:48">/* VIS I fpadd16s */</comment>

                    <expr_stmt pos:start="3579:21" pos:end="3579:48"><expr pos:start="3579:21" pos:end="3579:47"><call pos:start="3579:21" pos:end="3579:47"><name pos:start="3579:21" pos:end="3579:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3579:38" pos:end="3579:47">(<argument pos:start="3579:39" pos:end="3579:40"><expr pos:start="3579:39" pos:end="3579:40"><name pos:start="3579:39" pos:end="3579:40">dc</name></expr></argument>, <argument pos:start="3579:43" pos:end="3579:46"><expr pos:start="3579:43" pos:end="3579:46"><name pos:start="3579:43" pos:end="3579:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3581:21" pos:end="3581:74"><expr pos:start="3581:21" pos:end="3581:73"><call pos:start="3581:21" pos:end="3581:73"><name pos:start="3581:21" pos:end="3581:34">gen_ne_fop_FFF</name><argument_list pos:start="3581:35" pos:end="3581:73">(<argument pos:start="3581:36" pos:end="3581:37"><expr pos:start="3581:36" pos:end="3581:37"><name pos:start="3581:36" pos:end="3581:37">dc</name></expr></argument>, <argument pos:start="3581:40" pos:end="3581:41"><expr pos:start="3581:40" pos:end="3581:41"><name pos:start="3581:40" pos:end="3581:41">rd</name></expr></argument>, <argument pos:start="3581:44" pos:end="3581:46"><expr pos:start="3581:44" pos:end="3581:46"><name pos:start="3581:44" pos:end="3581:46">rs1</name></expr></argument>, <argument pos:start="3581:49" pos:end="3581:51"><expr pos:start="3581:49" pos:end="3581:51"><name pos:start="3581:49" pos:end="3581:51">rs2</name></expr></argument>, <argument pos:start="3581:54" pos:end="3581:72"><expr pos:start="3581:54" pos:end="3581:72"><name pos:start="3581:54" pos:end="3581:72">gen_helper_fpadd16s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3583:21" pos:end="3583:26">break;</break>

                <case pos:start="3585:17" pos:end="3585:27">case <expr pos:start="3585:22" pos:end="3585:26"><literal type="number" pos:start="3585:22" pos:end="3585:26">0x052</literal></expr>:</case> <comment type="block" pos:start="3585:29" pos:end="3585:47">/* VIS I fpadd32 */</comment>

                    <expr_stmt pos:start="3587:21" pos:end="3587:48"><expr pos:start="3587:21" pos:end="3587:47"><call pos:start="3587:21" pos:end="3587:47"><name pos:start="3587:21" pos:end="3587:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3587:38" pos:end="3587:47">(<argument pos:start="3587:39" pos:end="3587:40"><expr pos:start="3587:39" pos:end="3587:40"><name pos:start="3587:39" pos:end="3587:40">dc</name></expr></argument>, <argument pos:start="3587:43" pos:end="3587:46"><expr pos:start="3587:43" pos:end="3587:46"><name pos:start="3587:43" pos:end="3587:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3589:21" pos:end="3589:73"><expr pos:start="3589:21" pos:end="3589:72"><call pos:start="3589:21" pos:end="3589:72"><name pos:start="3589:21" pos:end="3589:34">gen_ne_fop_DDD</name><argument_list pos:start="3589:35" pos:end="3589:72">(<argument pos:start="3589:36" pos:end="3589:37"><expr pos:start="3589:36" pos:end="3589:37"><name pos:start="3589:36" pos:end="3589:37">dc</name></expr></argument>, <argument pos:start="3589:40" pos:end="3589:41"><expr pos:start="3589:40" pos:end="3589:41"><name pos:start="3589:40" pos:end="3589:41">rd</name></expr></argument>, <argument pos:start="3589:44" pos:end="3589:46"><expr pos:start="3589:44" pos:end="3589:46"><name pos:start="3589:44" pos:end="3589:46">rs1</name></expr></argument>, <argument pos:start="3589:49" pos:end="3589:51"><expr pos:start="3589:49" pos:end="3589:51"><name pos:start="3589:49" pos:end="3589:51">rs2</name></expr></argument>, <argument pos:start="3589:54" pos:end="3589:71"><expr pos:start="3589:54" pos:end="3589:71"><name pos:start="3589:54" pos:end="3589:71">gen_helper_fpadd32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3591:21" pos:end="3591:26">break;</break>

                <case pos:start="3593:17" pos:end="3593:27">case <expr pos:start="3593:22" pos:end="3593:26"><literal type="number" pos:start="3593:22" pos:end="3593:26">0x053</literal></expr>:</case> <comment type="block" pos:start="3593:29" pos:end="3593:48">/* VIS I fpadd32s */</comment>

                    <expr_stmt pos:start="3595:21" pos:end="3595:48"><expr pos:start="3595:21" pos:end="3595:47"><call pos:start="3595:21" pos:end="3595:47"><name pos:start="3595:21" pos:end="3595:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3595:38" pos:end="3595:47">(<argument pos:start="3595:39" pos:end="3595:40"><expr pos:start="3595:39" pos:end="3595:40"><name pos:start="3595:39" pos:end="3595:40">dc</name></expr></argument>, <argument pos:start="3595:43" pos:end="3595:46"><expr pos:start="3595:43" pos:end="3595:46"><name pos:start="3595:43" pos:end="3595:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3597:21" pos:end="3597:70"><expr pos:start="3597:21" pos:end="3597:69"><call pos:start="3597:21" pos:end="3597:69"><name pos:start="3597:21" pos:end="3597:34">gen_ne_fop_FFF</name><argument_list pos:start="3597:35" pos:end="3597:69">(<argument pos:start="3597:36" pos:end="3597:37"><expr pos:start="3597:36" pos:end="3597:37"><name pos:start="3597:36" pos:end="3597:37">dc</name></expr></argument>, <argument pos:start="3597:40" pos:end="3597:41"><expr pos:start="3597:40" pos:end="3597:41"><name pos:start="3597:40" pos:end="3597:41">rd</name></expr></argument>, <argument pos:start="3597:44" pos:end="3597:46"><expr pos:start="3597:44" pos:end="3597:46"><name pos:start="3597:44" pos:end="3597:46">rs1</name></expr></argument>, <argument pos:start="3597:49" pos:end="3597:51"><expr pos:start="3597:49" pos:end="3597:51"><name pos:start="3597:49" pos:end="3597:51">rs2</name></expr></argument>, <argument pos:start="3597:54" pos:end="3597:68"><expr pos:start="3597:54" pos:end="3597:68"><name pos:start="3597:54" pos:end="3597:68">tcg_gen_add_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3599:21" pos:end="3599:26">break;</break>

                <case pos:start="3601:17" pos:end="3601:27">case <expr pos:start="3601:22" pos:end="3601:26"><literal type="number" pos:start="3601:22" pos:end="3601:26">0x054</literal></expr>:</case> <comment type="block" pos:start="3601:29" pos:end="3601:47">/* VIS I fpsub16 */</comment>

                    <expr_stmt pos:start="3603:21" pos:end="3603:48"><expr pos:start="3603:21" pos:end="3603:47"><call pos:start="3603:21" pos:end="3603:47"><name pos:start="3603:21" pos:end="3603:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3603:38" pos:end="3603:47">(<argument pos:start="3603:39" pos:end="3603:40"><expr pos:start="3603:39" pos:end="3603:40"><name pos:start="3603:39" pos:end="3603:40">dc</name></expr></argument>, <argument pos:start="3603:43" pos:end="3603:46"><expr pos:start="3603:43" pos:end="3603:46"><name pos:start="3603:43" pos:end="3603:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3605:21" pos:end="3605:73"><expr pos:start="3605:21" pos:end="3605:72"><call pos:start="3605:21" pos:end="3605:72"><name pos:start="3605:21" pos:end="3605:34">gen_ne_fop_DDD</name><argument_list pos:start="3605:35" pos:end="3605:72">(<argument pos:start="3605:36" pos:end="3605:37"><expr pos:start="3605:36" pos:end="3605:37"><name pos:start="3605:36" pos:end="3605:37">dc</name></expr></argument>, <argument pos:start="3605:40" pos:end="3605:41"><expr pos:start="3605:40" pos:end="3605:41"><name pos:start="3605:40" pos:end="3605:41">rd</name></expr></argument>, <argument pos:start="3605:44" pos:end="3605:46"><expr pos:start="3605:44" pos:end="3605:46"><name pos:start="3605:44" pos:end="3605:46">rs1</name></expr></argument>, <argument pos:start="3605:49" pos:end="3605:51"><expr pos:start="3605:49" pos:end="3605:51"><name pos:start="3605:49" pos:end="3605:51">rs2</name></expr></argument>, <argument pos:start="3605:54" pos:end="3605:71"><expr pos:start="3605:54" pos:end="3605:71"><name pos:start="3605:54" pos:end="3605:71">gen_helper_fpsub16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3607:21" pos:end="3607:26">break;</break>

                <case pos:start="3609:17" pos:end="3609:27">case <expr pos:start="3609:22" pos:end="3609:26"><literal type="number" pos:start="3609:22" pos:end="3609:26">0x055</literal></expr>:</case> <comment type="block" pos:start="3609:29" pos:end="3609:48">/* VIS I fpsub16s */</comment>

                    <expr_stmt pos:start="3611:21" pos:end="3611:48"><expr pos:start="3611:21" pos:end="3611:47"><call pos:start="3611:21" pos:end="3611:47"><name pos:start="3611:21" pos:end="3611:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3611:38" pos:end="3611:47">(<argument pos:start="3611:39" pos:end="3611:40"><expr pos:start="3611:39" pos:end="3611:40"><name pos:start="3611:39" pos:end="3611:40">dc</name></expr></argument>, <argument pos:start="3611:43" pos:end="3611:46"><expr pos:start="3611:43" pos:end="3611:46"><name pos:start="3611:43" pos:end="3611:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3613:21" pos:end="3613:74"><expr pos:start="3613:21" pos:end="3613:73"><call pos:start="3613:21" pos:end="3613:73"><name pos:start="3613:21" pos:end="3613:34">gen_ne_fop_FFF</name><argument_list pos:start="3613:35" pos:end="3613:73">(<argument pos:start="3613:36" pos:end="3613:37"><expr pos:start="3613:36" pos:end="3613:37"><name pos:start="3613:36" pos:end="3613:37">dc</name></expr></argument>, <argument pos:start="3613:40" pos:end="3613:41"><expr pos:start="3613:40" pos:end="3613:41"><name pos:start="3613:40" pos:end="3613:41">rd</name></expr></argument>, <argument pos:start="3613:44" pos:end="3613:46"><expr pos:start="3613:44" pos:end="3613:46"><name pos:start="3613:44" pos:end="3613:46">rs1</name></expr></argument>, <argument pos:start="3613:49" pos:end="3613:51"><expr pos:start="3613:49" pos:end="3613:51"><name pos:start="3613:49" pos:end="3613:51">rs2</name></expr></argument>, <argument pos:start="3613:54" pos:end="3613:72"><expr pos:start="3613:54" pos:end="3613:72"><name pos:start="3613:54" pos:end="3613:72">gen_helper_fpsub16s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3615:21" pos:end="3615:26">break;</break>

                <case pos:start="3617:17" pos:end="3617:27">case <expr pos:start="3617:22" pos:end="3617:26"><literal type="number" pos:start="3617:22" pos:end="3617:26">0x056</literal></expr>:</case> <comment type="block" pos:start="3617:29" pos:end="3617:47">/* VIS I fpsub32 */</comment>

                    <expr_stmt pos:start="3619:21" pos:end="3619:48"><expr pos:start="3619:21" pos:end="3619:47"><call pos:start="3619:21" pos:end="3619:47"><name pos:start="3619:21" pos:end="3619:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3619:38" pos:end="3619:47">(<argument pos:start="3619:39" pos:end="3619:40"><expr pos:start="3619:39" pos:end="3619:40"><name pos:start="3619:39" pos:end="3619:40">dc</name></expr></argument>, <argument pos:start="3619:43" pos:end="3619:46"><expr pos:start="3619:43" pos:end="3619:46"><name pos:start="3619:43" pos:end="3619:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3621:21" pos:end="3621:73"><expr pos:start="3621:21" pos:end="3621:72"><call pos:start="3621:21" pos:end="3621:72"><name pos:start="3621:21" pos:end="3621:34">gen_ne_fop_DDD</name><argument_list pos:start="3621:35" pos:end="3621:72">(<argument pos:start="3621:36" pos:end="3621:37"><expr pos:start="3621:36" pos:end="3621:37"><name pos:start="3621:36" pos:end="3621:37">dc</name></expr></argument>, <argument pos:start="3621:40" pos:end="3621:41"><expr pos:start="3621:40" pos:end="3621:41"><name pos:start="3621:40" pos:end="3621:41">rd</name></expr></argument>, <argument pos:start="3621:44" pos:end="3621:46"><expr pos:start="3621:44" pos:end="3621:46"><name pos:start="3621:44" pos:end="3621:46">rs1</name></expr></argument>, <argument pos:start="3621:49" pos:end="3621:51"><expr pos:start="3621:49" pos:end="3621:51"><name pos:start="3621:49" pos:end="3621:51">rs2</name></expr></argument>, <argument pos:start="3621:54" pos:end="3621:71"><expr pos:start="3621:54" pos:end="3621:71"><name pos:start="3621:54" pos:end="3621:71">gen_helper_fpsub32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3623:21" pos:end="3623:26">break;</break>

                <case pos:start="3625:17" pos:end="3625:27">case <expr pos:start="3625:22" pos:end="3625:26"><literal type="number" pos:start="3625:22" pos:end="3625:26">0x057</literal></expr>:</case> <comment type="block" pos:start="3625:29" pos:end="3625:48">/* VIS I fpsub32s */</comment>

                    <expr_stmt pos:start="3627:21" pos:end="3627:48"><expr pos:start="3627:21" pos:end="3627:47"><call pos:start="3627:21" pos:end="3627:47"><name pos:start="3627:21" pos:end="3627:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3627:38" pos:end="3627:47">(<argument pos:start="3627:39" pos:end="3627:40"><expr pos:start="3627:39" pos:end="3627:40"><name pos:start="3627:39" pos:end="3627:40">dc</name></expr></argument>, <argument pos:start="3627:43" pos:end="3627:46"><expr pos:start="3627:43" pos:end="3627:46"><name pos:start="3627:43" pos:end="3627:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3629:21" pos:end="3629:70"><expr pos:start="3629:21" pos:end="3629:69"><call pos:start="3629:21" pos:end="3629:69"><name pos:start="3629:21" pos:end="3629:34">gen_ne_fop_FFF</name><argument_list pos:start="3629:35" pos:end="3629:69">(<argument pos:start="3629:36" pos:end="3629:37"><expr pos:start="3629:36" pos:end="3629:37"><name pos:start="3629:36" pos:end="3629:37">dc</name></expr></argument>, <argument pos:start="3629:40" pos:end="3629:41"><expr pos:start="3629:40" pos:end="3629:41"><name pos:start="3629:40" pos:end="3629:41">rd</name></expr></argument>, <argument pos:start="3629:44" pos:end="3629:46"><expr pos:start="3629:44" pos:end="3629:46"><name pos:start="3629:44" pos:end="3629:46">rs1</name></expr></argument>, <argument pos:start="3629:49" pos:end="3629:51"><expr pos:start="3629:49" pos:end="3629:51"><name pos:start="3629:49" pos:end="3629:51">rs2</name></expr></argument>, <argument pos:start="3629:54" pos:end="3629:68"><expr pos:start="3629:54" pos:end="3629:68"><name pos:start="3629:54" pos:end="3629:68">tcg_gen_sub_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3631:21" pos:end="3631:26">break;</break>

                <case pos:start="3633:17" pos:end="3633:27">case <expr pos:start="3633:22" pos:end="3633:26"><literal type="number" pos:start="3633:22" pos:end="3633:26">0x060</literal></expr>:</case> <comment type="block" pos:start="3633:29" pos:end="3633:45">/* VIS I fzero */</comment>

                    <expr_stmt pos:start="3635:21" pos:end="3635:48"><expr pos:start="3635:21" pos:end="3635:47"><call pos:start="3635:21" pos:end="3635:47"><name pos:start="3635:21" pos:end="3635:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3635:38" pos:end="3635:47">(<argument pos:start="3635:39" pos:end="3635:40"><expr pos:start="3635:39" pos:end="3635:40"><name pos:start="3635:39" pos:end="3635:40">dc</name></expr></argument>, <argument pos:start="3635:43" pos:end="3635:46"><expr pos:start="3635:43" pos:end="3635:46"><name pos:start="3635:43" pos:end="3635:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3637:21" pos:end="3637:56"><expr pos:start="3637:21" pos:end="3637:55"><name pos:start="3637:21" pos:end="3637:30">cpu_dst_64</name> <operator pos:start="3637:32" pos:end="3637:32">=</operator> <call pos:start="3637:34" pos:end="3637:55"><name pos:start="3637:34" pos:end="3637:47">gen_dest_fpr_D</name><argument_list pos:start="3637:48" pos:end="3637:55">(<argument pos:start="3637:49" pos:end="3637:50"><expr pos:start="3637:49" pos:end="3637:50"><name pos:start="3637:49" pos:end="3637:50">dc</name></expr></argument>, <argument pos:start="3637:53" pos:end="3637:54"><expr pos:start="3637:53" pos:end="3637:54"><name pos:start="3637:53" pos:end="3637:54">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3639:21" pos:end="3639:52"><expr pos:start="3639:21" pos:end="3639:51"><call pos:start="3639:21" pos:end="3639:51"><name pos:start="3639:21" pos:end="3639:36">tcg_gen_movi_i64</name><argument_list pos:start="3639:37" pos:end="3639:51">(<argument pos:start="3639:38" pos:end="3639:47"><expr pos:start="3639:38" pos:end="3639:47"><name pos:start="3639:38" pos:end="3639:47">cpu_dst_64</name></expr></argument>, <argument pos:start="3639:50" pos:end="3639:50"><expr pos:start="3639:50" pos:end="3639:50"><literal type="number" pos:start="3639:50" pos:end="3639:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3641:21" pos:end="3641:56"><expr pos:start="3641:21" pos:end="3641:55"><call pos:start="3641:21" pos:end="3641:55"><name pos:start="3641:21" pos:end="3641:35">gen_store_fpr_D</name><argument_list pos:start="3641:36" pos:end="3641:55">(<argument pos:start="3641:37" pos:end="3641:38"><expr pos:start="3641:37" pos:end="3641:38"><name pos:start="3641:37" pos:end="3641:38">dc</name></expr></argument>, <argument pos:start="3641:41" pos:end="3641:42"><expr pos:start="3641:41" pos:end="3641:42"><name pos:start="3641:41" pos:end="3641:42">rd</name></expr></argument>, <argument pos:start="3641:45" pos:end="3641:54"><expr pos:start="3641:45" pos:end="3641:54"><name pos:start="3641:45" pos:end="3641:54">cpu_dst_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3643:21" pos:end="3643:26">break;</break>

                <case pos:start="3645:17" pos:end="3645:27">case <expr pos:start="3645:22" pos:end="3645:26"><literal type="number" pos:start="3645:22" pos:end="3645:26">0x061</literal></expr>:</case> <comment type="block" pos:start="3645:29" pos:end="3645:46">/* VIS I fzeros */</comment>

                    <expr_stmt pos:start="3647:21" pos:end="3647:48"><expr pos:start="3647:21" pos:end="3647:47"><call pos:start="3647:21" pos:end="3647:47"><name pos:start="3647:21" pos:end="3647:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3647:38" pos:end="3647:47">(<argument pos:start="3647:39" pos:end="3647:40"><expr pos:start="3647:39" pos:end="3647:40"><name pos:start="3647:39" pos:end="3647:40">dc</name></expr></argument>, <argument pos:start="3647:43" pos:end="3647:46"><expr pos:start="3647:43" pos:end="3647:46"><name pos:start="3647:43" pos:end="3647:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3649:21" pos:end="3649:52"><expr pos:start="3649:21" pos:end="3649:51"><name pos:start="3649:21" pos:end="3649:30">cpu_dst_32</name> <operator pos:start="3649:32" pos:end="3649:32">=</operator> <call pos:start="3649:34" pos:end="3649:51"><name pos:start="3649:34" pos:end="3649:47">gen_dest_fpr_F</name><argument_list pos:start="3649:48" pos:end="3649:51">(<argument pos:start="3649:49" pos:end="3649:50"><expr pos:start="3649:49" pos:end="3649:50"><name pos:start="3649:49" pos:end="3649:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3651:21" pos:end="3651:52"><expr pos:start="3651:21" pos:end="3651:51"><call pos:start="3651:21" pos:end="3651:51"><name pos:start="3651:21" pos:end="3651:36">tcg_gen_movi_i32</name><argument_list pos:start="3651:37" pos:end="3651:51">(<argument pos:start="3651:38" pos:end="3651:47"><expr pos:start="3651:38" pos:end="3651:47"><name pos:start="3651:38" pos:end="3651:47">cpu_dst_32</name></expr></argument>, <argument pos:start="3651:50" pos:end="3651:50"><expr pos:start="3651:50" pos:end="3651:50"><literal type="number" pos:start="3651:50" pos:end="3651:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3653:21" pos:end="3653:56"><expr pos:start="3653:21" pos:end="3653:55"><call pos:start="3653:21" pos:end="3653:55"><name pos:start="3653:21" pos:end="3653:35">gen_store_fpr_F</name><argument_list pos:start="3653:36" pos:end="3653:55">(<argument pos:start="3653:37" pos:end="3653:38"><expr pos:start="3653:37" pos:end="3653:38"><name pos:start="3653:37" pos:end="3653:38">dc</name></expr></argument>, <argument pos:start="3653:41" pos:end="3653:42"><expr pos:start="3653:41" pos:end="3653:42"><name pos:start="3653:41" pos:end="3653:42">rd</name></expr></argument>, <argument pos:start="3653:45" pos:end="3653:54"><expr pos:start="3653:45" pos:end="3653:54"><name pos:start="3653:45" pos:end="3653:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3655:21" pos:end="3655:26">break;</break>

                <case pos:start="3657:17" pos:end="3657:27">case <expr pos:start="3657:22" pos:end="3657:26"><literal type="number" pos:start="3657:22" pos:end="3657:26">0x062</literal></expr>:</case> <comment type="block" pos:start="3657:29" pos:end="3657:44">/* VIS I fnor */</comment>

                    <expr_stmt pos:start="3659:21" pos:end="3659:48"><expr pos:start="3659:21" pos:end="3659:47"><call pos:start="3659:21" pos:end="3659:47"><name pos:start="3659:21" pos:end="3659:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3659:38" pos:end="3659:47">(<argument pos:start="3659:39" pos:end="3659:40"><expr pos:start="3659:39" pos:end="3659:40"><name pos:start="3659:39" pos:end="3659:40">dc</name></expr></argument>, <argument pos:start="3659:43" pos:end="3659:46"><expr pos:start="3659:43" pos:end="3659:46"><name pos:start="3659:43" pos:end="3659:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3661:21" pos:end="3661:70"><expr pos:start="3661:21" pos:end="3661:69"><call pos:start="3661:21" pos:end="3661:69"><name pos:start="3661:21" pos:end="3661:34">gen_ne_fop_DDD</name><argument_list pos:start="3661:35" pos:end="3661:69">(<argument pos:start="3661:36" pos:end="3661:37"><expr pos:start="3661:36" pos:end="3661:37"><name pos:start="3661:36" pos:end="3661:37">dc</name></expr></argument>, <argument pos:start="3661:40" pos:end="3661:41"><expr pos:start="3661:40" pos:end="3661:41"><name pos:start="3661:40" pos:end="3661:41">rd</name></expr></argument>, <argument pos:start="3661:44" pos:end="3661:46"><expr pos:start="3661:44" pos:end="3661:46"><name pos:start="3661:44" pos:end="3661:46">rs1</name></expr></argument>, <argument pos:start="3661:49" pos:end="3661:51"><expr pos:start="3661:49" pos:end="3661:51"><name pos:start="3661:49" pos:end="3661:51">rs2</name></expr></argument>, <argument pos:start="3661:54" pos:end="3661:68"><expr pos:start="3661:54" pos:end="3661:68"><name pos:start="3661:54" pos:end="3661:68">tcg_gen_nor_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3663:21" pos:end="3663:26">break;</break>

                <case pos:start="3665:17" pos:end="3665:27">case <expr pos:start="3665:22" pos:end="3665:26"><literal type="number" pos:start="3665:22" pos:end="3665:26">0x063</literal></expr>:</case> <comment type="block" pos:start="3665:29" pos:end="3665:45">/* VIS I fnors */</comment>

                    <expr_stmt pos:start="3667:21" pos:end="3667:48"><expr pos:start="3667:21" pos:end="3667:47"><call pos:start="3667:21" pos:end="3667:47"><name pos:start="3667:21" pos:end="3667:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3667:38" pos:end="3667:47">(<argument pos:start="3667:39" pos:end="3667:40"><expr pos:start="3667:39" pos:end="3667:40"><name pos:start="3667:39" pos:end="3667:40">dc</name></expr></argument>, <argument pos:start="3667:43" pos:end="3667:46"><expr pos:start="3667:43" pos:end="3667:46"><name pos:start="3667:43" pos:end="3667:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3669:21" pos:end="3669:70"><expr pos:start="3669:21" pos:end="3669:69"><call pos:start="3669:21" pos:end="3669:69"><name pos:start="3669:21" pos:end="3669:34">gen_ne_fop_FFF</name><argument_list pos:start="3669:35" pos:end="3669:69">(<argument pos:start="3669:36" pos:end="3669:37"><expr pos:start="3669:36" pos:end="3669:37"><name pos:start="3669:36" pos:end="3669:37">dc</name></expr></argument>, <argument pos:start="3669:40" pos:end="3669:41"><expr pos:start="3669:40" pos:end="3669:41"><name pos:start="3669:40" pos:end="3669:41">rd</name></expr></argument>, <argument pos:start="3669:44" pos:end="3669:46"><expr pos:start="3669:44" pos:end="3669:46"><name pos:start="3669:44" pos:end="3669:46">rs1</name></expr></argument>, <argument pos:start="3669:49" pos:end="3669:51"><expr pos:start="3669:49" pos:end="3669:51"><name pos:start="3669:49" pos:end="3669:51">rs2</name></expr></argument>, <argument pos:start="3669:54" pos:end="3669:68"><expr pos:start="3669:54" pos:end="3669:68"><name pos:start="3669:54" pos:end="3669:68">tcg_gen_nor_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3671:21" pos:end="3671:26">break;</break>

                <case pos:start="3673:17" pos:end="3673:27">case <expr pos:start="3673:22" pos:end="3673:26"><literal type="number" pos:start="3673:22" pos:end="3673:26">0x064</literal></expr>:</case> <comment type="block" pos:start="3673:29" pos:end="3673:48">/* VIS I fandnot2 */</comment>

                    <expr_stmt pos:start="3675:21" pos:end="3675:48"><expr pos:start="3675:21" pos:end="3675:47"><call pos:start="3675:21" pos:end="3675:47"><name pos:start="3675:21" pos:end="3675:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3675:38" pos:end="3675:47">(<argument pos:start="3675:39" pos:end="3675:40"><expr pos:start="3675:39" pos:end="3675:40"><name pos:start="3675:39" pos:end="3675:40">dc</name></expr></argument>, <argument pos:start="3675:43" pos:end="3675:46"><expr pos:start="3675:43" pos:end="3675:46"><name pos:start="3675:43" pos:end="3675:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3677:21" pos:end="3677:71"><expr pos:start="3677:21" pos:end="3677:70"><call pos:start="3677:21" pos:end="3677:70"><name pos:start="3677:21" pos:end="3677:34">gen_ne_fop_DDD</name><argument_list pos:start="3677:35" pos:end="3677:70">(<argument pos:start="3677:36" pos:end="3677:37"><expr pos:start="3677:36" pos:end="3677:37"><name pos:start="3677:36" pos:end="3677:37">dc</name></expr></argument>, <argument pos:start="3677:40" pos:end="3677:41"><expr pos:start="3677:40" pos:end="3677:41"><name pos:start="3677:40" pos:end="3677:41">rd</name></expr></argument>, <argument pos:start="3677:44" pos:end="3677:46"><expr pos:start="3677:44" pos:end="3677:46"><name pos:start="3677:44" pos:end="3677:46">rs1</name></expr></argument>, <argument pos:start="3677:49" pos:end="3677:51"><expr pos:start="3677:49" pos:end="3677:51"><name pos:start="3677:49" pos:end="3677:51">rs2</name></expr></argument>, <argument pos:start="3677:54" pos:end="3677:69"><expr pos:start="3677:54" pos:end="3677:69"><name pos:start="3677:54" pos:end="3677:69">tcg_gen_andc_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3679:21" pos:end="3679:26">break;</break>

                <case pos:start="3681:17" pos:end="3681:27">case <expr pos:start="3681:22" pos:end="3681:26"><literal type="number" pos:start="3681:22" pos:end="3681:26">0x065</literal></expr>:</case> <comment type="block" pos:start="3681:29" pos:end="3681:49">/* VIS I fandnot2s */</comment>

                    <expr_stmt pos:start="3683:21" pos:end="3683:48"><expr pos:start="3683:21" pos:end="3683:47"><call pos:start="3683:21" pos:end="3683:47"><name pos:start="3683:21" pos:end="3683:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3683:38" pos:end="3683:47">(<argument pos:start="3683:39" pos:end="3683:40"><expr pos:start="3683:39" pos:end="3683:40"><name pos:start="3683:39" pos:end="3683:40">dc</name></expr></argument>, <argument pos:start="3683:43" pos:end="3683:46"><expr pos:start="3683:43" pos:end="3683:46"><name pos:start="3683:43" pos:end="3683:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3685:21" pos:end="3685:71"><expr pos:start="3685:21" pos:end="3685:70"><call pos:start="3685:21" pos:end="3685:70"><name pos:start="3685:21" pos:end="3685:34">gen_ne_fop_FFF</name><argument_list pos:start="3685:35" pos:end="3685:70">(<argument pos:start="3685:36" pos:end="3685:37"><expr pos:start="3685:36" pos:end="3685:37"><name pos:start="3685:36" pos:end="3685:37">dc</name></expr></argument>, <argument pos:start="3685:40" pos:end="3685:41"><expr pos:start="3685:40" pos:end="3685:41"><name pos:start="3685:40" pos:end="3685:41">rd</name></expr></argument>, <argument pos:start="3685:44" pos:end="3685:46"><expr pos:start="3685:44" pos:end="3685:46"><name pos:start="3685:44" pos:end="3685:46">rs1</name></expr></argument>, <argument pos:start="3685:49" pos:end="3685:51"><expr pos:start="3685:49" pos:end="3685:51"><name pos:start="3685:49" pos:end="3685:51">rs2</name></expr></argument>, <argument pos:start="3685:54" pos:end="3685:69"><expr pos:start="3685:54" pos:end="3685:69"><name pos:start="3685:54" pos:end="3685:69">tcg_gen_andc_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3687:21" pos:end="3687:26">break;</break>

                <case pos:start="3689:17" pos:end="3689:27">case <expr pos:start="3689:22" pos:end="3689:26"><literal type="number" pos:start="3689:22" pos:end="3689:26">0x066</literal></expr>:</case> <comment type="block" pos:start="3689:29" pos:end="3689:45">/* VIS I fnot2 */</comment>

                    <expr_stmt pos:start="3691:21" pos:end="3691:48"><expr pos:start="3691:21" pos:end="3691:47"><call pos:start="3691:21" pos:end="3691:47"><name pos:start="3691:21" pos:end="3691:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3691:38" pos:end="3691:47">(<argument pos:start="3691:39" pos:end="3691:40"><expr pos:start="3691:39" pos:end="3691:40"><name pos:start="3691:39" pos:end="3691:40">dc</name></expr></argument>, <argument pos:start="3691:43" pos:end="3691:46"><expr pos:start="3691:43" pos:end="3691:46"><name pos:start="3691:43" pos:end="3691:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3693:21" pos:end="3693:64"><expr pos:start="3693:21" pos:end="3693:63"><call pos:start="3693:21" pos:end="3693:63"><name pos:start="3693:21" pos:end="3693:33">gen_ne_fop_DD</name><argument_list pos:start="3693:34" pos:end="3693:63">(<argument pos:start="3693:35" pos:end="3693:36"><expr pos:start="3693:35" pos:end="3693:36"><name pos:start="3693:35" pos:end="3693:36">dc</name></expr></argument>, <argument pos:start="3693:39" pos:end="3693:40"><expr pos:start="3693:39" pos:end="3693:40"><name pos:start="3693:39" pos:end="3693:40">rd</name></expr></argument>, <argument pos:start="3693:43" pos:end="3693:45"><expr pos:start="3693:43" pos:end="3693:45"><name pos:start="3693:43" pos:end="3693:45">rs2</name></expr></argument>, <argument pos:start="3693:48" pos:end="3693:62"><expr pos:start="3693:48" pos:end="3693:62"><name pos:start="3693:48" pos:end="3693:62">tcg_gen_not_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3695:21" pos:end="3695:26">break;</break>

                <case pos:start="3697:17" pos:end="3697:27">case <expr pos:start="3697:22" pos:end="3697:26"><literal type="number" pos:start="3697:22" pos:end="3697:26">0x067</literal></expr>:</case> <comment type="block" pos:start="3697:29" pos:end="3697:46">/* VIS I fnot2s */</comment>

                    <expr_stmt pos:start="3699:21" pos:end="3699:48"><expr pos:start="3699:21" pos:end="3699:47"><call pos:start="3699:21" pos:end="3699:47"><name pos:start="3699:21" pos:end="3699:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3699:38" pos:end="3699:47">(<argument pos:start="3699:39" pos:end="3699:40"><expr pos:start="3699:39" pos:end="3699:40"><name pos:start="3699:39" pos:end="3699:40">dc</name></expr></argument>, <argument pos:start="3699:43" pos:end="3699:46"><expr pos:start="3699:43" pos:end="3699:46"><name pos:start="3699:43" pos:end="3699:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3701:21" pos:end="3701:64"><expr pos:start="3701:21" pos:end="3701:63"><call pos:start="3701:21" pos:end="3701:63"><name pos:start="3701:21" pos:end="3701:33">gen_ne_fop_FF</name><argument_list pos:start="3701:34" pos:end="3701:63">(<argument pos:start="3701:35" pos:end="3701:36"><expr pos:start="3701:35" pos:end="3701:36"><name pos:start="3701:35" pos:end="3701:36">dc</name></expr></argument>, <argument pos:start="3701:39" pos:end="3701:40"><expr pos:start="3701:39" pos:end="3701:40"><name pos:start="3701:39" pos:end="3701:40">rd</name></expr></argument>, <argument pos:start="3701:43" pos:end="3701:45"><expr pos:start="3701:43" pos:end="3701:45"><name pos:start="3701:43" pos:end="3701:45">rs2</name></expr></argument>, <argument pos:start="3701:48" pos:end="3701:62"><expr pos:start="3701:48" pos:end="3701:62"><name pos:start="3701:48" pos:end="3701:62">tcg_gen_not_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3703:21" pos:end="3703:26">break;</break>

                <case pos:start="3705:17" pos:end="3705:27">case <expr pos:start="3705:22" pos:end="3705:26"><literal type="number" pos:start="3705:22" pos:end="3705:26">0x068</literal></expr>:</case> <comment type="block" pos:start="3705:29" pos:end="3705:48">/* VIS I fandnot1 */</comment>

                    <expr_stmt pos:start="3707:21" pos:end="3707:48"><expr pos:start="3707:21" pos:end="3707:47"><call pos:start="3707:21" pos:end="3707:47"><name pos:start="3707:21" pos:end="3707:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3707:38" pos:end="3707:47">(<argument pos:start="3707:39" pos:end="3707:40"><expr pos:start="3707:39" pos:end="3707:40"><name pos:start="3707:39" pos:end="3707:40">dc</name></expr></argument>, <argument pos:start="3707:43" pos:end="3707:46"><expr pos:start="3707:43" pos:end="3707:46"><name pos:start="3707:43" pos:end="3707:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3709:21" pos:end="3709:71"><expr pos:start="3709:21" pos:end="3709:70"><call pos:start="3709:21" pos:end="3709:70"><name pos:start="3709:21" pos:end="3709:34">gen_ne_fop_DDD</name><argument_list pos:start="3709:35" pos:end="3709:70">(<argument pos:start="3709:36" pos:end="3709:37"><expr pos:start="3709:36" pos:end="3709:37"><name pos:start="3709:36" pos:end="3709:37">dc</name></expr></argument>, <argument pos:start="3709:40" pos:end="3709:41"><expr pos:start="3709:40" pos:end="3709:41"><name pos:start="3709:40" pos:end="3709:41">rd</name></expr></argument>, <argument pos:start="3709:44" pos:end="3709:46"><expr pos:start="3709:44" pos:end="3709:46"><name pos:start="3709:44" pos:end="3709:46">rs2</name></expr></argument>, <argument pos:start="3709:49" pos:end="3709:51"><expr pos:start="3709:49" pos:end="3709:51"><name pos:start="3709:49" pos:end="3709:51">rs1</name></expr></argument>, <argument pos:start="3709:54" pos:end="3709:69"><expr pos:start="3709:54" pos:end="3709:69"><name pos:start="3709:54" pos:end="3709:69">tcg_gen_andc_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3711:21" pos:end="3711:26">break;</break>

                <case pos:start="3713:17" pos:end="3713:27">case <expr pos:start="3713:22" pos:end="3713:26"><literal type="number" pos:start="3713:22" pos:end="3713:26">0x069</literal></expr>:</case> <comment type="block" pos:start="3713:29" pos:end="3713:49">/* VIS I fandnot1s */</comment>

                    <expr_stmt pos:start="3715:21" pos:end="3715:48"><expr pos:start="3715:21" pos:end="3715:47"><call pos:start="3715:21" pos:end="3715:47"><name pos:start="3715:21" pos:end="3715:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3715:38" pos:end="3715:47">(<argument pos:start="3715:39" pos:end="3715:40"><expr pos:start="3715:39" pos:end="3715:40"><name pos:start="3715:39" pos:end="3715:40">dc</name></expr></argument>, <argument pos:start="3715:43" pos:end="3715:46"><expr pos:start="3715:43" pos:end="3715:46"><name pos:start="3715:43" pos:end="3715:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3717:21" pos:end="3717:71"><expr pos:start="3717:21" pos:end="3717:70"><call pos:start="3717:21" pos:end="3717:70"><name pos:start="3717:21" pos:end="3717:34">gen_ne_fop_FFF</name><argument_list pos:start="3717:35" pos:end="3717:70">(<argument pos:start="3717:36" pos:end="3717:37"><expr pos:start="3717:36" pos:end="3717:37"><name pos:start="3717:36" pos:end="3717:37">dc</name></expr></argument>, <argument pos:start="3717:40" pos:end="3717:41"><expr pos:start="3717:40" pos:end="3717:41"><name pos:start="3717:40" pos:end="3717:41">rd</name></expr></argument>, <argument pos:start="3717:44" pos:end="3717:46"><expr pos:start="3717:44" pos:end="3717:46"><name pos:start="3717:44" pos:end="3717:46">rs2</name></expr></argument>, <argument pos:start="3717:49" pos:end="3717:51"><expr pos:start="3717:49" pos:end="3717:51"><name pos:start="3717:49" pos:end="3717:51">rs1</name></expr></argument>, <argument pos:start="3717:54" pos:end="3717:69"><expr pos:start="3717:54" pos:end="3717:69"><name pos:start="3717:54" pos:end="3717:69">tcg_gen_andc_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3719:21" pos:end="3719:26">break;</break>

                <case pos:start="3721:17" pos:end="3721:27">case <expr pos:start="3721:22" pos:end="3721:26"><literal type="number" pos:start="3721:22" pos:end="3721:26">0x06a</literal></expr>:</case> <comment type="block" pos:start="3721:29" pos:end="3721:45">/* VIS I fnot1 */</comment>

                    <expr_stmt pos:start="3723:21" pos:end="3723:48"><expr pos:start="3723:21" pos:end="3723:47"><call pos:start="3723:21" pos:end="3723:47"><name pos:start="3723:21" pos:end="3723:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3723:38" pos:end="3723:47">(<argument pos:start="3723:39" pos:end="3723:40"><expr pos:start="3723:39" pos:end="3723:40"><name pos:start="3723:39" pos:end="3723:40">dc</name></expr></argument>, <argument pos:start="3723:43" pos:end="3723:46"><expr pos:start="3723:43" pos:end="3723:46"><name pos:start="3723:43" pos:end="3723:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3725:21" pos:end="3725:64"><expr pos:start="3725:21" pos:end="3725:63"><call pos:start="3725:21" pos:end="3725:63"><name pos:start="3725:21" pos:end="3725:33">gen_ne_fop_DD</name><argument_list pos:start="3725:34" pos:end="3725:63">(<argument pos:start="3725:35" pos:end="3725:36"><expr pos:start="3725:35" pos:end="3725:36"><name pos:start="3725:35" pos:end="3725:36">dc</name></expr></argument>, <argument pos:start="3725:39" pos:end="3725:40"><expr pos:start="3725:39" pos:end="3725:40"><name pos:start="3725:39" pos:end="3725:40">rd</name></expr></argument>, <argument pos:start="3725:43" pos:end="3725:45"><expr pos:start="3725:43" pos:end="3725:45"><name pos:start="3725:43" pos:end="3725:45">rs1</name></expr></argument>, <argument pos:start="3725:48" pos:end="3725:62"><expr pos:start="3725:48" pos:end="3725:62"><name pos:start="3725:48" pos:end="3725:62">tcg_gen_not_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3727:21" pos:end="3727:26">break;</break>

                <case pos:start="3729:17" pos:end="3729:27">case <expr pos:start="3729:22" pos:end="3729:26"><literal type="number" pos:start="3729:22" pos:end="3729:26">0x06b</literal></expr>:</case> <comment type="block" pos:start="3729:29" pos:end="3729:46">/* VIS I fnot1s */</comment>

                    <expr_stmt pos:start="3731:21" pos:end="3731:48"><expr pos:start="3731:21" pos:end="3731:47"><call pos:start="3731:21" pos:end="3731:47"><name pos:start="3731:21" pos:end="3731:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3731:38" pos:end="3731:47">(<argument pos:start="3731:39" pos:end="3731:40"><expr pos:start="3731:39" pos:end="3731:40"><name pos:start="3731:39" pos:end="3731:40">dc</name></expr></argument>, <argument pos:start="3731:43" pos:end="3731:46"><expr pos:start="3731:43" pos:end="3731:46"><name pos:start="3731:43" pos:end="3731:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3733:21" pos:end="3733:64"><expr pos:start="3733:21" pos:end="3733:63"><call pos:start="3733:21" pos:end="3733:63"><name pos:start="3733:21" pos:end="3733:33">gen_ne_fop_FF</name><argument_list pos:start="3733:34" pos:end="3733:63">(<argument pos:start="3733:35" pos:end="3733:36"><expr pos:start="3733:35" pos:end="3733:36"><name pos:start="3733:35" pos:end="3733:36">dc</name></expr></argument>, <argument pos:start="3733:39" pos:end="3733:40"><expr pos:start="3733:39" pos:end="3733:40"><name pos:start="3733:39" pos:end="3733:40">rd</name></expr></argument>, <argument pos:start="3733:43" pos:end="3733:45"><expr pos:start="3733:43" pos:end="3733:45"><name pos:start="3733:43" pos:end="3733:45">rs1</name></expr></argument>, <argument pos:start="3733:48" pos:end="3733:62"><expr pos:start="3733:48" pos:end="3733:62"><name pos:start="3733:48" pos:end="3733:62">tcg_gen_not_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3735:21" pos:end="3735:26">break;</break>

                <case pos:start="3737:17" pos:end="3737:27">case <expr pos:start="3737:22" pos:end="3737:26"><literal type="number" pos:start="3737:22" pos:end="3737:26">0x06c</literal></expr>:</case> <comment type="block" pos:start="3737:29" pos:end="3737:44">/* VIS I fxor */</comment>

                    <expr_stmt pos:start="3739:21" pos:end="3739:48"><expr pos:start="3739:21" pos:end="3739:47"><call pos:start="3739:21" pos:end="3739:47"><name pos:start="3739:21" pos:end="3739:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3739:38" pos:end="3739:47">(<argument pos:start="3739:39" pos:end="3739:40"><expr pos:start="3739:39" pos:end="3739:40"><name pos:start="3739:39" pos:end="3739:40">dc</name></expr></argument>, <argument pos:start="3739:43" pos:end="3739:46"><expr pos:start="3739:43" pos:end="3739:46"><name pos:start="3739:43" pos:end="3739:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3741:21" pos:end="3741:70"><expr pos:start="3741:21" pos:end="3741:69"><call pos:start="3741:21" pos:end="3741:69"><name pos:start="3741:21" pos:end="3741:34">gen_ne_fop_DDD</name><argument_list pos:start="3741:35" pos:end="3741:69">(<argument pos:start="3741:36" pos:end="3741:37"><expr pos:start="3741:36" pos:end="3741:37"><name pos:start="3741:36" pos:end="3741:37">dc</name></expr></argument>, <argument pos:start="3741:40" pos:end="3741:41"><expr pos:start="3741:40" pos:end="3741:41"><name pos:start="3741:40" pos:end="3741:41">rd</name></expr></argument>, <argument pos:start="3741:44" pos:end="3741:46"><expr pos:start="3741:44" pos:end="3741:46"><name pos:start="3741:44" pos:end="3741:46">rs1</name></expr></argument>, <argument pos:start="3741:49" pos:end="3741:51"><expr pos:start="3741:49" pos:end="3741:51"><name pos:start="3741:49" pos:end="3741:51">rs2</name></expr></argument>, <argument pos:start="3741:54" pos:end="3741:68"><expr pos:start="3741:54" pos:end="3741:68"><name pos:start="3741:54" pos:end="3741:68">tcg_gen_xor_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3743:21" pos:end="3743:26">break;</break>

                <case pos:start="3745:17" pos:end="3745:27">case <expr pos:start="3745:22" pos:end="3745:26"><literal type="number" pos:start="3745:22" pos:end="3745:26">0x06d</literal></expr>:</case> <comment type="block" pos:start="3745:29" pos:end="3745:45">/* VIS I fxors */</comment>

                    <expr_stmt pos:start="3747:21" pos:end="3747:48"><expr pos:start="3747:21" pos:end="3747:47"><call pos:start="3747:21" pos:end="3747:47"><name pos:start="3747:21" pos:end="3747:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3747:38" pos:end="3747:47">(<argument pos:start="3747:39" pos:end="3747:40"><expr pos:start="3747:39" pos:end="3747:40"><name pos:start="3747:39" pos:end="3747:40">dc</name></expr></argument>, <argument pos:start="3747:43" pos:end="3747:46"><expr pos:start="3747:43" pos:end="3747:46"><name pos:start="3747:43" pos:end="3747:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3749:21" pos:end="3749:70"><expr pos:start="3749:21" pos:end="3749:69"><call pos:start="3749:21" pos:end="3749:69"><name pos:start="3749:21" pos:end="3749:34">gen_ne_fop_FFF</name><argument_list pos:start="3749:35" pos:end="3749:69">(<argument pos:start="3749:36" pos:end="3749:37"><expr pos:start="3749:36" pos:end="3749:37"><name pos:start="3749:36" pos:end="3749:37">dc</name></expr></argument>, <argument pos:start="3749:40" pos:end="3749:41"><expr pos:start="3749:40" pos:end="3749:41"><name pos:start="3749:40" pos:end="3749:41">rd</name></expr></argument>, <argument pos:start="3749:44" pos:end="3749:46"><expr pos:start="3749:44" pos:end="3749:46"><name pos:start="3749:44" pos:end="3749:46">rs1</name></expr></argument>, <argument pos:start="3749:49" pos:end="3749:51"><expr pos:start="3749:49" pos:end="3749:51"><name pos:start="3749:49" pos:end="3749:51">rs2</name></expr></argument>, <argument pos:start="3749:54" pos:end="3749:68"><expr pos:start="3749:54" pos:end="3749:68"><name pos:start="3749:54" pos:end="3749:68">tcg_gen_xor_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3751:21" pos:end="3751:26">break;</break>

                <case pos:start="3753:17" pos:end="3753:27">case <expr pos:start="3753:22" pos:end="3753:26"><literal type="number" pos:start="3753:22" pos:end="3753:26">0x06e</literal></expr>:</case> <comment type="block" pos:start="3753:29" pos:end="3753:45">/* VIS I fnand */</comment>

                    <expr_stmt pos:start="3755:21" pos:end="3755:48"><expr pos:start="3755:21" pos:end="3755:47"><call pos:start="3755:21" pos:end="3755:47"><name pos:start="3755:21" pos:end="3755:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3755:38" pos:end="3755:47">(<argument pos:start="3755:39" pos:end="3755:40"><expr pos:start="3755:39" pos:end="3755:40"><name pos:start="3755:39" pos:end="3755:40">dc</name></expr></argument>, <argument pos:start="3755:43" pos:end="3755:46"><expr pos:start="3755:43" pos:end="3755:46"><name pos:start="3755:43" pos:end="3755:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3757:21" pos:end="3757:71"><expr pos:start="3757:21" pos:end="3757:70"><call pos:start="3757:21" pos:end="3757:70"><name pos:start="3757:21" pos:end="3757:34">gen_ne_fop_DDD</name><argument_list pos:start="3757:35" pos:end="3757:70">(<argument pos:start="3757:36" pos:end="3757:37"><expr pos:start="3757:36" pos:end="3757:37"><name pos:start="3757:36" pos:end="3757:37">dc</name></expr></argument>, <argument pos:start="3757:40" pos:end="3757:41"><expr pos:start="3757:40" pos:end="3757:41"><name pos:start="3757:40" pos:end="3757:41">rd</name></expr></argument>, <argument pos:start="3757:44" pos:end="3757:46"><expr pos:start="3757:44" pos:end="3757:46"><name pos:start="3757:44" pos:end="3757:46">rs1</name></expr></argument>, <argument pos:start="3757:49" pos:end="3757:51"><expr pos:start="3757:49" pos:end="3757:51"><name pos:start="3757:49" pos:end="3757:51">rs2</name></expr></argument>, <argument pos:start="3757:54" pos:end="3757:69"><expr pos:start="3757:54" pos:end="3757:69"><name pos:start="3757:54" pos:end="3757:69">tcg_gen_nand_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3759:21" pos:end="3759:26">break;</break>

                <case pos:start="3761:17" pos:end="3761:27">case <expr pos:start="3761:22" pos:end="3761:26"><literal type="number" pos:start="3761:22" pos:end="3761:26">0x06f</literal></expr>:</case> <comment type="block" pos:start="3761:29" pos:end="3761:46">/* VIS I fnands */</comment>

                    <expr_stmt pos:start="3763:21" pos:end="3763:48"><expr pos:start="3763:21" pos:end="3763:47"><call pos:start="3763:21" pos:end="3763:47"><name pos:start="3763:21" pos:end="3763:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3763:38" pos:end="3763:47">(<argument pos:start="3763:39" pos:end="3763:40"><expr pos:start="3763:39" pos:end="3763:40"><name pos:start="3763:39" pos:end="3763:40">dc</name></expr></argument>, <argument pos:start="3763:43" pos:end="3763:46"><expr pos:start="3763:43" pos:end="3763:46"><name pos:start="3763:43" pos:end="3763:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3765:21" pos:end="3765:71"><expr pos:start="3765:21" pos:end="3765:70"><call pos:start="3765:21" pos:end="3765:70"><name pos:start="3765:21" pos:end="3765:34">gen_ne_fop_FFF</name><argument_list pos:start="3765:35" pos:end="3765:70">(<argument pos:start="3765:36" pos:end="3765:37"><expr pos:start="3765:36" pos:end="3765:37"><name pos:start="3765:36" pos:end="3765:37">dc</name></expr></argument>, <argument pos:start="3765:40" pos:end="3765:41"><expr pos:start="3765:40" pos:end="3765:41"><name pos:start="3765:40" pos:end="3765:41">rd</name></expr></argument>, <argument pos:start="3765:44" pos:end="3765:46"><expr pos:start="3765:44" pos:end="3765:46"><name pos:start="3765:44" pos:end="3765:46">rs1</name></expr></argument>, <argument pos:start="3765:49" pos:end="3765:51"><expr pos:start="3765:49" pos:end="3765:51"><name pos:start="3765:49" pos:end="3765:51">rs2</name></expr></argument>, <argument pos:start="3765:54" pos:end="3765:69"><expr pos:start="3765:54" pos:end="3765:69"><name pos:start="3765:54" pos:end="3765:69">tcg_gen_nand_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3767:21" pos:end="3767:26">break;</break>

                <case pos:start="3769:17" pos:end="3769:27">case <expr pos:start="3769:22" pos:end="3769:26"><literal type="number" pos:start="3769:22" pos:end="3769:26">0x070</literal></expr>:</case> <comment type="block" pos:start="3769:29" pos:end="3769:44">/* VIS I fand */</comment>

                    <expr_stmt pos:start="3771:21" pos:end="3771:48"><expr pos:start="3771:21" pos:end="3771:47"><call pos:start="3771:21" pos:end="3771:47"><name pos:start="3771:21" pos:end="3771:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3771:38" pos:end="3771:47">(<argument pos:start="3771:39" pos:end="3771:40"><expr pos:start="3771:39" pos:end="3771:40"><name pos:start="3771:39" pos:end="3771:40">dc</name></expr></argument>, <argument pos:start="3771:43" pos:end="3771:46"><expr pos:start="3771:43" pos:end="3771:46"><name pos:start="3771:43" pos:end="3771:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3773:21" pos:end="3773:70"><expr pos:start="3773:21" pos:end="3773:69"><call pos:start="3773:21" pos:end="3773:69"><name pos:start="3773:21" pos:end="3773:34">gen_ne_fop_DDD</name><argument_list pos:start="3773:35" pos:end="3773:69">(<argument pos:start="3773:36" pos:end="3773:37"><expr pos:start="3773:36" pos:end="3773:37"><name pos:start="3773:36" pos:end="3773:37">dc</name></expr></argument>, <argument pos:start="3773:40" pos:end="3773:41"><expr pos:start="3773:40" pos:end="3773:41"><name pos:start="3773:40" pos:end="3773:41">rd</name></expr></argument>, <argument pos:start="3773:44" pos:end="3773:46"><expr pos:start="3773:44" pos:end="3773:46"><name pos:start="3773:44" pos:end="3773:46">rs1</name></expr></argument>, <argument pos:start="3773:49" pos:end="3773:51"><expr pos:start="3773:49" pos:end="3773:51"><name pos:start="3773:49" pos:end="3773:51">rs2</name></expr></argument>, <argument pos:start="3773:54" pos:end="3773:68"><expr pos:start="3773:54" pos:end="3773:68"><name pos:start="3773:54" pos:end="3773:68">tcg_gen_and_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3775:21" pos:end="3775:26">break;</break>

                <case pos:start="3777:17" pos:end="3777:27">case <expr pos:start="3777:22" pos:end="3777:26"><literal type="number" pos:start="3777:22" pos:end="3777:26">0x071</literal></expr>:</case> <comment type="block" pos:start="3777:29" pos:end="3777:45">/* VIS I fands */</comment>

                    <expr_stmt pos:start="3779:21" pos:end="3779:48"><expr pos:start="3779:21" pos:end="3779:47"><call pos:start="3779:21" pos:end="3779:47"><name pos:start="3779:21" pos:end="3779:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3779:38" pos:end="3779:47">(<argument pos:start="3779:39" pos:end="3779:40"><expr pos:start="3779:39" pos:end="3779:40"><name pos:start="3779:39" pos:end="3779:40">dc</name></expr></argument>, <argument pos:start="3779:43" pos:end="3779:46"><expr pos:start="3779:43" pos:end="3779:46"><name pos:start="3779:43" pos:end="3779:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3781:21" pos:end="3781:70"><expr pos:start="3781:21" pos:end="3781:69"><call pos:start="3781:21" pos:end="3781:69"><name pos:start="3781:21" pos:end="3781:34">gen_ne_fop_FFF</name><argument_list pos:start="3781:35" pos:end="3781:69">(<argument pos:start="3781:36" pos:end="3781:37"><expr pos:start="3781:36" pos:end="3781:37"><name pos:start="3781:36" pos:end="3781:37">dc</name></expr></argument>, <argument pos:start="3781:40" pos:end="3781:41"><expr pos:start="3781:40" pos:end="3781:41"><name pos:start="3781:40" pos:end="3781:41">rd</name></expr></argument>, <argument pos:start="3781:44" pos:end="3781:46"><expr pos:start="3781:44" pos:end="3781:46"><name pos:start="3781:44" pos:end="3781:46">rs1</name></expr></argument>, <argument pos:start="3781:49" pos:end="3781:51"><expr pos:start="3781:49" pos:end="3781:51"><name pos:start="3781:49" pos:end="3781:51">rs2</name></expr></argument>, <argument pos:start="3781:54" pos:end="3781:68"><expr pos:start="3781:54" pos:end="3781:68"><name pos:start="3781:54" pos:end="3781:68">tcg_gen_and_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3783:21" pos:end="3783:26">break;</break>

                <case pos:start="3785:17" pos:end="3785:27">case <expr pos:start="3785:22" pos:end="3785:26"><literal type="number" pos:start="3785:22" pos:end="3785:26">0x072</literal></expr>:</case> <comment type="block" pos:start="3785:29" pos:end="3785:45">/* VIS I fxnor */</comment>

                    <expr_stmt pos:start="3787:21" pos:end="3787:48"><expr pos:start="3787:21" pos:end="3787:47"><call pos:start="3787:21" pos:end="3787:47"><name pos:start="3787:21" pos:end="3787:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3787:38" pos:end="3787:47">(<argument pos:start="3787:39" pos:end="3787:40"><expr pos:start="3787:39" pos:end="3787:40"><name pos:start="3787:39" pos:end="3787:40">dc</name></expr></argument>, <argument pos:start="3787:43" pos:end="3787:46"><expr pos:start="3787:43" pos:end="3787:46"><name pos:start="3787:43" pos:end="3787:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3789:21" pos:end="3789:70"><expr pos:start="3789:21" pos:end="3789:69"><call pos:start="3789:21" pos:end="3789:69"><name pos:start="3789:21" pos:end="3789:34">gen_ne_fop_DDD</name><argument_list pos:start="3789:35" pos:end="3789:69">(<argument pos:start="3789:36" pos:end="3789:37"><expr pos:start="3789:36" pos:end="3789:37"><name pos:start="3789:36" pos:end="3789:37">dc</name></expr></argument>, <argument pos:start="3789:40" pos:end="3789:41"><expr pos:start="3789:40" pos:end="3789:41"><name pos:start="3789:40" pos:end="3789:41">rd</name></expr></argument>, <argument pos:start="3789:44" pos:end="3789:46"><expr pos:start="3789:44" pos:end="3789:46"><name pos:start="3789:44" pos:end="3789:46">rs1</name></expr></argument>, <argument pos:start="3789:49" pos:end="3789:51"><expr pos:start="3789:49" pos:end="3789:51"><name pos:start="3789:49" pos:end="3789:51">rs2</name></expr></argument>, <argument pos:start="3789:54" pos:end="3789:68"><expr pos:start="3789:54" pos:end="3789:68"><name pos:start="3789:54" pos:end="3789:68">tcg_gen_eqv_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3791:21" pos:end="3791:26">break;</break>

                <case pos:start="3793:17" pos:end="3793:27">case <expr pos:start="3793:22" pos:end="3793:26"><literal type="number" pos:start="3793:22" pos:end="3793:26">0x073</literal></expr>:</case> <comment type="block" pos:start="3793:29" pos:end="3793:46">/* VIS I fxnors */</comment>

                    <expr_stmt pos:start="3795:21" pos:end="3795:48"><expr pos:start="3795:21" pos:end="3795:47"><call pos:start="3795:21" pos:end="3795:47"><name pos:start="3795:21" pos:end="3795:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3795:38" pos:end="3795:47">(<argument pos:start="3795:39" pos:end="3795:40"><expr pos:start="3795:39" pos:end="3795:40"><name pos:start="3795:39" pos:end="3795:40">dc</name></expr></argument>, <argument pos:start="3795:43" pos:end="3795:46"><expr pos:start="3795:43" pos:end="3795:46"><name pos:start="3795:43" pos:end="3795:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3797:21" pos:end="3797:70"><expr pos:start="3797:21" pos:end="3797:69"><call pos:start="3797:21" pos:end="3797:69"><name pos:start="3797:21" pos:end="3797:34">gen_ne_fop_FFF</name><argument_list pos:start="3797:35" pos:end="3797:69">(<argument pos:start="3797:36" pos:end="3797:37"><expr pos:start="3797:36" pos:end="3797:37"><name pos:start="3797:36" pos:end="3797:37">dc</name></expr></argument>, <argument pos:start="3797:40" pos:end="3797:41"><expr pos:start="3797:40" pos:end="3797:41"><name pos:start="3797:40" pos:end="3797:41">rd</name></expr></argument>, <argument pos:start="3797:44" pos:end="3797:46"><expr pos:start="3797:44" pos:end="3797:46"><name pos:start="3797:44" pos:end="3797:46">rs1</name></expr></argument>, <argument pos:start="3797:49" pos:end="3797:51"><expr pos:start="3797:49" pos:end="3797:51"><name pos:start="3797:49" pos:end="3797:51">rs2</name></expr></argument>, <argument pos:start="3797:54" pos:end="3797:68"><expr pos:start="3797:54" pos:end="3797:68"><name pos:start="3797:54" pos:end="3797:68">tcg_gen_eqv_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3799:21" pos:end="3799:26">break;</break>

                <case pos:start="3801:17" pos:end="3801:27">case <expr pos:start="3801:22" pos:end="3801:26"><literal type="number" pos:start="3801:22" pos:end="3801:26">0x074</literal></expr>:</case> <comment type="block" pos:start="3801:29" pos:end="3801:45">/* VIS I fsrc1 */</comment>

                    <expr_stmt pos:start="3803:21" pos:end="3803:48"><expr pos:start="3803:21" pos:end="3803:47"><call pos:start="3803:21" pos:end="3803:47"><name pos:start="3803:21" pos:end="3803:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3803:38" pos:end="3803:47">(<argument pos:start="3803:39" pos:end="3803:40"><expr pos:start="3803:39" pos:end="3803:40"><name pos:start="3803:39" pos:end="3803:40">dc</name></expr></argument>, <argument pos:start="3803:43" pos:end="3803:46"><expr pos:start="3803:43" pos:end="3803:46"><name pos:start="3803:43" pos:end="3803:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3805:21" pos:end="3805:58"><expr pos:start="3805:21" pos:end="3805:57"><name pos:start="3805:21" pos:end="3805:31">cpu_src1_64</name> <operator pos:start="3805:33" pos:end="3805:33">=</operator> <call pos:start="3805:35" pos:end="3805:57"><name pos:start="3805:35" pos:end="3805:48">gen_load_fpr_D</name><argument_list pos:start="3805:49" pos:end="3805:57">(<argument pos:start="3805:50" pos:end="3805:51"><expr pos:start="3805:50" pos:end="3805:51"><name pos:start="3805:50" pos:end="3805:51">dc</name></expr></argument>, <argument pos:start="3805:54" pos:end="3805:56"><expr pos:start="3805:54" pos:end="3805:56"><name pos:start="3805:54" pos:end="3805:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3807:21" pos:end="3807:57"><expr pos:start="3807:21" pos:end="3807:56"><call pos:start="3807:21" pos:end="3807:56"><name pos:start="3807:21" pos:end="3807:35">gen_store_fpr_D</name><argument_list pos:start="3807:36" pos:end="3807:56">(<argument pos:start="3807:37" pos:end="3807:38"><expr pos:start="3807:37" pos:end="3807:38"><name pos:start="3807:37" pos:end="3807:38">dc</name></expr></argument>, <argument pos:start="3807:41" pos:end="3807:42"><expr pos:start="3807:41" pos:end="3807:42"><name pos:start="3807:41" pos:end="3807:42">rd</name></expr></argument>, <argument pos:start="3807:45" pos:end="3807:55"><expr pos:start="3807:45" pos:end="3807:55"><name pos:start="3807:45" pos:end="3807:55">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3809:21" pos:end="3809:26">break;</break>

                <case pos:start="3811:17" pos:end="3811:27">case <expr pos:start="3811:22" pos:end="3811:26"><literal type="number" pos:start="3811:22" pos:end="3811:26">0x075</literal></expr>:</case> <comment type="block" pos:start="3811:29" pos:end="3811:46">/* VIS I fsrc1s */</comment>

                    <expr_stmt pos:start="3813:21" pos:end="3813:48"><expr pos:start="3813:21" pos:end="3813:47"><call pos:start="3813:21" pos:end="3813:47"><name pos:start="3813:21" pos:end="3813:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3813:38" pos:end="3813:47">(<argument pos:start="3813:39" pos:end="3813:40"><expr pos:start="3813:39" pos:end="3813:40"><name pos:start="3813:39" pos:end="3813:40">dc</name></expr></argument>, <argument pos:start="3813:43" pos:end="3813:46"><expr pos:start="3813:43" pos:end="3813:46"><name pos:start="3813:43" pos:end="3813:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3815:21" pos:end="3815:58"><expr pos:start="3815:21" pos:end="3815:57"><name pos:start="3815:21" pos:end="3815:31">cpu_src1_32</name> <operator pos:start="3815:33" pos:end="3815:33">=</operator> <call pos:start="3815:35" pos:end="3815:57"><name pos:start="3815:35" pos:end="3815:48">gen_load_fpr_F</name><argument_list pos:start="3815:49" pos:end="3815:57">(<argument pos:start="3815:50" pos:end="3815:51"><expr pos:start="3815:50" pos:end="3815:51"><name pos:start="3815:50" pos:end="3815:51">dc</name></expr></argument>, <argument pos:start="3815:54" pos:end="3815:56"><expr pos:start="3815:54" pos:end="3815:56"><name pos:start="3815:54" pos:end="3815:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3817:21" pos:end="3817:57"><expr pos:start="3817:21" pos:end="3817:56"><call pos:start="3817:21" pos:end="3817:56"><name pos:start="3817:21" pos:end="3817:35">gen_store_fpr_F</name><argument_list pos:start="3817:36" pos:end="3817:56">(<argument pos:start="3817:37" pos:end="3817:38"><expr pos:start="3817:37" pos:end="3817:38"><name pos:start="3817:37" pos:end="3817:38">dc</name></expr></argument>, <argument pos:start="3817:41" pos:end="3817:42"><expr pos:start="3817:41" pos:end="3817:42"><name pos:start="3817:41" pos:end="3817:42">rd</name></expr></argument>, <argument pos:start="3817:45" pos:end="3817:55"><expr pos:start="3817:45" pos:end="3817:55"><name pos:start="3817:45" pos:end="3817:55">cpu_src1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3819:21" pos:end="3819:26">break;</break>

                <case pos:start="3821:17" pos:end="3821:27">case <expr pos:start="3821:22" pos:end="3821:26"><literal type="number" pos:start="3821:22" pos:end="3821:26">0x076</literal></expr>:</case> <comment type="block" pos:start="3821:29" pos:end="3821:47">/* VIS I fornot2 */</comment>

                    <expr_stmt pos:start="3823:21" pos:end="3823:48"><expr pos:start="3823:21" pos:end="3823:47"><call pos:start="3823:21" pos:end="3823:47"><name pos:start="3823:21" pos:end="3823:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3823:38" pos:end="3823:47">(<argument pos:start="3823:39" pos:end="3823:40"><expr pos:start="3823:39" pos:end="3823:40"><name pos:start="3823:39" pos:end="3823:40">dc</name></expr></argument>, <argument pos:start="3823:43" pos:end="3823:46"><expr pos:start="3823:43" pos:end="3823:46"><name pos:start="3823:43" pos:end="3823:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3825:21" pos:end="3825:70"><expr pos:start="3825:21" pos:end="3825:69"><call pos:start="3825:21" pos:end="3825:69"><name pos:start="3825:21" pos:end="3825:34">gen_ne_fop_DDD</name><argument_list pos:start="3825:35" pos:end="3825:69">(<argument pos:start="3825:36" pos:end="3825:37"><expr pos:start="3825:36" pos:end="3825:37"><name pos:start="3825:36" pos:end="3825:37">dc</name></expr></argument>, <argument pos:start="3825:40" pos:end="3825:41"><expr pos:start="3825:40" pos:end="3825:41"><name pos:start="3825:40" pos:end="3825:41">rd</name></expr></argument>, <argument pos:start="3825:44" pos:end="3825:46"><expr pos:start="3825:44" pos:end="3825:46"><name pos:start="3825:44" pos:end="3825:46">rs1</name></expr></argument>, <argument pos:start="3825:49" pos:end="3825:51"><expr pos:start="3825:49" pos:end="3825:51"><name pos:start="3825:49" pos:end="3825:51">rs2</name></expr></argument>, <argument pos:start="3825:54" pos:end="3825:68"><expr pos:start="3825:54" pos:end="3825:68"><name pos:start="3825:54" pos:end="3825:68">tcg_gen_orc_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3827:21" pos:end="3827:26">break;</break>

                <case pos:start="3829:17" pos:end="3829:27">case <expr pos:start="3829:22" pos:end="3829:26"><literal type="number" pos:start="3829:22" pos:end="3829:26">0x077</literal></expr>:</case> <comment type="block" pos:start="3829:29" pos:end="3829:48">/* VIS I fornot2s */</comment>

                    <expr_stmt pos:start="3831:21" pos:end="3831:48"><expr pos:start="3831:21" pos:end="3831:47"><call pos:start="3831:21" pos:end="3831:47"><name pos:start="3831:21" pos:end="3831:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3831:38" pos:end="3831:47">(<argument pos:start="3831:39" pos:end="3831:40"><expr pos:start="3831:39" pos:end="3831:40"><name pos:start="3831:39" pos:end="3831:40">dc</name></expr></argument>, <argument pos:start="3831:43" pos:end="3831:46"><expr pos:start="3831:43" pos:end="3831:46"><name pos:start="3831:43" pos:end="3831:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3833:21" pos:end="3833:70"><expr pos:start="3833:21" pos:end="3833:69"><call pos:start="3833:21" pos:end="3833:69"><name pos:start="3833:21" pos:end="3833:34">gen_ne_fop_FFF</name><argument_list pos:start="3833:35" pos:end="3833:69">(<argument pos:start="3833:36" pos:end="3833:37"><expr pos:start="3833:36" pos:end="3833:37"><name pos:start="3833:36" pos:end="3833:37">dc</name></expr></argument>, <argument pos:start="3833:40" pos:end="3833:41"><expr pos:start="3833:40" pos:end="3833:41"><name pos:start="3833:40" pos:end="3833:41">rd</name></expr></argument>, <argument pos:start="3833:44" pos:end="3833:46"><expr pos:start="3833:44" pos:end="3833:46"><name pos:start="3833:44" pos:end="3833:46">rs1</name></expr></argument>, <argument pos:start="3833:49" pos:end="3833:51"><expr pos:start="3833:49" pos:end="3833:51"><name pos:start="3833:49" pos:end="3833:51">rs2</name></expr></argument>, <argument pos:start="3833:54" pos:end="3833:68"><expr pos:start="3833:54" pos:end="3833:68"><name pos:start="3833:54" pos:end="3833:68">tcg_gen_orc_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3835:21" pos:end="3835:26">break;</break>

                <case pos:start="3837:17" pos:end="3837:27">case <expr pos:start="3837:22" pos:end="3837:26"><literal type="number" pos:start="3837:22" pos:end="3837:26">0x078</literal></expr>:</case> <comment type="block" pos:start="3837:29" pos:end="3837:45">/* VIS I fsrc2 */</comment>

                    <expr_stmt pos:start="3839:21" pos:end="3839:48"><expr pos:start="3839:21" pos:end="3839:47"><call pos:start="3839:21" pos:end="3839:47"><name pos:start="3839:21" pos:end="3839:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3839:38" pos:end="3839:47">(<argument pos:start="3839:39" pos:end="3839:40"><expr pos:start="3839:39" pos:end="3839:40"><name pos:start="3839:39" pos:end="3839:40">dc</name></expr></argument>, <argument pos:start="3839:43" pos:end="3839:46"><expr pos:start="3839:43" pos:end="3839:46"><name pos:start="3839:43" pos:end="3839:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3841:21" pos:end="3841:58"><expr pos:start="3841:21" pos:end="3841:57"><name pos:start="3841:21" pos:end="3841:31">cpu_src1_64</name> <operator pos:start="3841:33" pos:end="3841:33">=</operator> <call pos:start="3841:35" pos:end="3841:57"><name pos:start="3841:35" pos:end="3841:48">gen_load_fpr_D</name><argument_list pos:start="3841:49" pos:end="3841:57">(<argument pos:start="3841:50" pos:end="3841:51"><expr pos:start="3841:50" pos:end="3841:51"><name pos:start="3841:50" pos:end="3841:51">dc</name></expr></argument>, <argument pos:start="3841:54" pos:end="3841:56"><expr pos:start="3841:54" pos:end="3841:56"><name pos:start="3841:54" pos:end="3841:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3843:21" pos:end="3843:57"><expr pos:start="3843:21" pos:end="3843:56"><call pos:start="3843:21" pos:end="3843:56"><name pos:start="3843:21" pos:end="3843:35">gen_store_fpr_D</name><argument_list pos:start="3843:36" pos:end="3843:56">(<argument pos:start="3843:37" pos:end="3843:38"><expr pos:start="3843:37" pos:end="3843:38"><name pos:start="3843:37" pos:end="3843:38">dc</name></expr></argument>, <argument pos:start="3843:41" pos:end="3843:42"><expr pos:start="3843:41" pos:end="3843:42"><name pos:start="3843:41" pos:end="3843:42">rd</name></expr></argument>, <argument pos:start="3843:45" pos:end="3843:55"><expr pos:start="3843:45" pos:end="3843:55"><name pos:start="3843:45" pos:end="3843:55">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3845:21" pos:end="3845:26">break;</break>

                <case pos:start="3847:17" pos:end="3847:27">case <expr pos:start="3847:22" pos:end="3847:26"><literal type="number" pos:start="3847:22" pos:end="3847:26">0x079</literal></expr>:</case> <comment type="block" pos:start="3847:29" pos:end="3847:46">/* VIS I fsrc2s */</comment>

                    <expr_stmt pos:start="3849:21" pos:end="3849:48"><expr pos:start="3849:21" pos:end="3849:47"><call pos:start="3849:21" pos:end="3849:47"><name pos:start="3849:21" pos:end="3849:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3849:38" pos:end="3849:47">(<argument pos:start="3849:39" pos:end="3849:40"><expr pos:start="3849:39" pos:end="3849:40"><name pos:start="3849:39" pos:end="3849:40">dc</name></expr></argument>, <argument pos:start="3849:43" pos:end="3849:46"><expr pos:start="3849:43" pos:end="3849:46"><name pos:start="3849:43" pos:end="3849:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3851:21" pos:end="3851:58"><expr pos:start="3851:21" pos:end="3851:57"><name pos:start="3851:21" pos:end="3851:31">cpu_src1_32</name> <operator pos:start="3851:33" pos:end="3851:33">=</operator> <call pos:start="3851:35" pos:end="3851:57"><name pos:start="3851:35" pos:end="3851:48">gen_load_fpr_F</name><argument_list pos:start="3851:49" pos:end="3851:57">(<argument pos:start="3851:50" pos:end="3851:51"><expr pos:start="3851:50" pos:end="3851:51"><name pos:start="3851:50" pos:end="3851:51">dc</name></expr></argument>, <argument pos:start="3851:54" pos:end="3851:56"><expr pos:start="3851:54" pos:end="3851:56"><name pos:start="3851:54" pos:end="3851:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3853:21" pos:end="3853:57"><expr pos:start="3853:21" pos:end="3853:56"><call pos:start="3853:21" pos:end="3853:56"><name pos:start="3853:21" pos:end="3853:35">gen_store_fpr_F</name><argument_list pos:start="3853:36" pos:end="3853:56">(<argument pos:start="3853:37" pos:end="3853:38"><expr pos:start="3853:37" pos:end="3853:38"><name pos:start="3853:37" pos:end="3853:38">dc</name></expr></argument>, <argument pos:start="3853:41" pos:end="3853:42"><expr pos:start="3853:41" pos:end="3853:42"><name pos:start="3853:41" pos:end="3853:42">rd</name></expr></argument>, <argument pos:start="3853:45" pos:end="3853:55"><expr pos:start="3853:45" pos:end="3853:55"><name pos:start="3853:45" pos:end="3853:55">cpu_src1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3855:21" pos:end="3855:26">break;</break>

                <case pos:start="3857:17" pos:end="3857:27">case <expr pos:start="3857:22" pos:end="3857:26"><literal type="number" pos:start="3857:22" pos:end="3857:26">0x07a</literal></expr>:</case> <comment type="block" pos:start="3857:29" pos:end="3857:47">/* VIS I fornot1 */</comment>

                    <expr_stmt pos:start="3859:21" pos:end="3859:48"><expr pos:start="3859:21" pos:end="3859:47"><call pos:start="3859:21" pos:end="3859:47"><name pos:start="3859:21" pos:end="3859:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3859:38" pos:end="3859:47">(<argument pos:start="3859:39" pos:end="3859:40"><expr pos:start="3859:39" pos:end="3859:40"><name pos:start="3859:39" pos:end="3859:40">dc</name></expr></argument>, <argument pos:start="3859:43" pos:end="3859:46"><expr pos:start="3859:43" pos:end="3859:46"><name pos:start="3859:43" pos:end="3859:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3861:21" pos:end="3861:70"><expr pos:start="3861:21" pos:end="3861:69"><call pos:start="3861:21" pos:end="3861:69"><name pos:start="3861:21" pos:end="3861:34">gen_ne_fop_DDD</name><argument_list pos:start="3861:35" pos:end="3861:69">(<argument pos:start="3861:36" pos:end="3861:37"><expr pos:start="3861:36" pos:end="3861:37"><name pos:start="3861:36" pos:end="3861:37">dc</name></expr></argument>, <argument pos:start="3861:40" pos:end="3861:41"><expr pos:start="3861:40" pos:end="3861:41"><name pos:start="3861:40" pos:end="3861:41">rd</name></expr></argument>, <argument pos:start="3861:44" pos:end="3861:46"><expr pos:start="3861:44" pos:end="3861:46"><name pos:start="3861:44" pos:end="3861:46">rs2</name></expr></argument>, <argument pos:start="3861:49" pos:end="3861:51"><expr pos:start="3861:49" pos:end="3861:51"><name pos:start="3861:49" pos:end="3861:51">rs1</name></expr></argument>, <argument pos:start="3861:54" pos:end="3861:68"><expr pos:start="3861:54" pos:end="3861:68"><name pos:start="3861:54" pos:end="3861:68">tcg_gen_orc_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3863:21" pos:end="3863:26">break;</break>

                <case pos:start="3865:17" pos:end="3865:27">case <expr pos:start="3865:22" pos:end="3865:26"><literal type="number" pos:start="3865:22" pos:end="3865:26">0x07b</literal></expr>:</case> <comment type="block" pos:start="3865:29" pos:end="3865:48">/* VIS I fornot1s */</comment>

                    <expr_stmt pos:start="3867:21" pos:end="3867:48"><expr pos:start="3867:21" pos:end="3867:47"><call pos:start="3867:21" pos:end="3867:47"><name pos:start="3867:21" pos:end="3867:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3867:38" pos:end="3867:47">(<argument pos:start="3867:39" pos:end="3867:40"><expr pos:start="3867:39" pos:end="3867:40"><name pos:start="3867:39" pos:end="3867:40">dc</name></expr></argument>, <argument pos:start="3867:43" pos:end="3867:46"><expr pos:start="3867:43" pos:end="3867:46"><name pos:start="3867:43" pos:end="3867:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3869:21" pos:end="3869:70"><expr pos:start="3869:21" pos:end="3869:69"><call pos:start="3869:21" pos:end="3869:69"><name pos:start="3869:21" pos:end="3869:34">gen_ne_fop_FFF</name><argument_list pos:start="3869:35" pos:end="3869:69">(<argument pos:start="3869:36" pos:end="3869:37"><expr pos:start="3869:36" pos:end="3869:37"><name pos:start="3869:36" pos:end="3869:37">dc</name></expr></argument>, <argument pos:start="3869:40" pos:end="3869:41"><expr pos:start="3869:40" pos:end="3869:41"><name pos:start="3869:40" pos:end="3869:41">rd</name></expr></argument>, <argument pos:start="3869:44" pos:end="3869:46"><expr pos:start="3869:44" pos:end="3869:46"><name pos:start="3869:44" pos:end="3869:46">rs2</name></expr></argument>, <argument pos:start="3869:49" pos:end="3869:51"><expr pos:start="3869:49" pos:end="3869:51"><name pos:start="3869:49" pos:end="3869:51">rs1</name></expr></argument>, <argument pos:start="3869:54" pos:end="3869:68"><expr pos:start="3869:54" pos:end="3869:68"><name pos:start="3869:54" pos:end="3869:68">tcg_gen_orc_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3871:21" pos:end="3871:26">break;</break>

                <case pos:start="3873:17" pos:end="3873:27">case <expr pos:start="3873:22" pos:end="3873:26"><literal type="number" pos:start="3873:22" pos:end="3873:26">0x07c</literal></expr>:</case> <comment type="block" pos:start="3873:29" pos:end="3873:43">/* VIS I for */</comment>

                    <expr_stmt pos:start="3875:21" pos:end="3875:48"><expr pos:start="3875:21" pos:end="3875:47"><call pos:start="3875:21" pos:end="3875:47"><name pos:start="3875:21" pos:end="3875:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3875:38" pos:end="3875:47">(<argument pos:start="3875:39" pos:end="3875:40"><expr pos:start="3875:39" pos:end="3875:40"><name pos:start="3875:39" pos:end="3875:40">dc</name></expr></argument>, <argument pos:start="3875:43" pos:end="3875:46"><expr pos:start="3875:43" pos:end="3875:46"><name pos:start="3875:43" pos:end="3875:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3877:21" pos:end="3877:69"><expr pos:start="3877:21" pos:end="3877:68"><call pos:start="3877:21" pos:end="3877:68"><name pos:start="3877:21" pos:end="3877:34">gen_ne_fop_DDD</name><argument_list pos:start="3877:35" pos:end="3877:68">(<argument pos:start="3877:36" pos:end="3877:37"><expr pos:start="3877:36" pos:end="3877:37"><name pos:start="3877:36" pos:end="3877:37">dc</name></expr></argument>, <argument pos:start="3877:40" pos:end="3877:41"><expr pos:start="3877:40" pos:end="3877:41"><name pos:start="3877:40" pos:end="3877:41">rd</name></expr></argument>, <argument pos:start="3877:44" pos:end="3877:46"><expr pos:start="3877:44" pos:end="3877:46"><name pos:start="3877:44" pos:end="3877:46">rs1</name></expr></argument>, <argument pos:start="3877:49" pos:end="3877:51"><expr pos:start="3877:49" pos:end="3877:51"><name pos:start="3877:49" pos:end="3877:51">rs2</name></expr></argument>, <argument pos:start="3877:54" pos:end="3877:67"><expr pos:start="3877:54" pos:end="3877:67"><name pos:start="3877:54" pos:end="3877:67">tcg_gen_or_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3879:21" pos:end="3879:26">break;</break>

                <case pos:start="3881:17" pos:end="3881:27">case <expr pos:start="3881:22" pos:end="3881:26"><literal type="number" pos:start="3881:22" pos:end="3881:26">0x07d</literal></expr>:</case> <comment type="block" pos:start="3881:29" pos:end="3881:44">/* VIS I fors */</comment>

                    <expr_stmt pos:start="3883:21" pos:end="3883:48"><expr pos:start="3883:21" pos:end="3883:47"><call pos:start="3883:21" pos:end="3883:47"><name pos:start="3883:21" pos:end="3883:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3883:38" pos:end="3883:47">(<argument pos:start="3883:39" pos:end="3883:40"><expr pos:start="3883:39" pos:end="3883:40"><name pos:start="3883:39" pos:end="3883:40">dc</name></expr></argument>, <argument pos:start="3883:43" pos:end="3883:46"><expr pos:start="3883:43" pos:end="3883:46"><name pos:start="3883:43" pos:end="3883:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3885:21" pos:end="3885:69"><expr pos:start="3885:21" pos:end="3885:68"><call pos:start="3885:21" pos:end="3885:68"><name pos:start="3885:21" pos:end="3885:34">gen_ne_fop_FFF</name><argument_list pos:start="3885:35" pos:end="3885:68">(<argument pos:start="3885:36" pos:end="3885:37"><expr pos:start="3885:36" pos:end="3885:37"><name pos:start="3885:36" pos:end="3885:37">dc</name></expr></argument>, <argument pos:start="3885:40" pos:end="3885:41"><expr pos:start="3885:40" pos:end="3885:41"><name pos:start="3885:40" pos:end="3885:41">rd</name></expr></argument>, <argument pos:start="3885:44" pos:end="3885:46"><expr pos:start="3885:44" pos:end="3885:46"><name pos:start="3885:44" pos:end="3885:46">rs1</name></expr></argument>, <argument pos:start="3885:49" pos:end="3885:51"><expr pos:start="3885:49" pos:end="3885:51"><name pos:start="3885:49" pos:end="3885:51">rs2</name></expr></argument>, <argument pos:start="3885:54" pos:end="3885:67"><expr pos:start="3885:54" pos:end="3885:67"><name pos:start="3885:54" pos:end="3885:67">tcg_gen_or_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3887:21" pos:end="3887:26">break;</break>

                <case pos:start="3889:17" pos:end="3889:27">case <expr pos:start="3889:22" pos:end="3889:26"><literal type="number" pos:start="3889:22" pos:end="3889:26">0x07e</literal></expr>:</case> <comment type="block" pos:start="3889:29" pos:end="3889:44">/* VIS I fone */</comment>

                    <expr_stmt pos:start="3891:21" pos:end="3891:48"><expr pos:start="3891:21" pos:end="3891:47"><call pos:start="3891:21" pos:end="3891:47"><name pos:start="3891:21" pos:end="3891:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3891:38" pos:end="3891:47">(<argument pos:start="3891:39" pos:end="3891:40"><expr pos:start="3891:39" pos:end="3891:40"><name pos:start="3891:39" pos:end="3891:40">dc</name></expr></argument>, <argument pos:start="3891:43" pos:end="3891:46"><expr pos:start="3891:43" pos:end="3891:46"><name pos:start="3891:43" pos:end="3891:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3893:21" pos:end="3893:56"><expr pos:start="3893:21" pos:end="3893:55"><name pos:start="3893:21" pos:end="3893:30">cpu_dst_64</name> <operator pos:start="3893:32" pos:end="3893:32">=</operator> <call pos:start="3893:34" pos:end="3893:55"><name pos:start="3893:34" pos:end="3893:47">gen_dest_fpr_D</name><argument_list pos:start="3893:48" pos:end="3893:55">(<argument pos:start="3893:49" pos:end="3893:50"><expr pos:start="3893:49" pos:end="3893:50"><name pos:start="3893:49" pos:end="3893:50">dc</name></expr></argument>, <argument pos:start="3893:53" pos:end="3893:54"><expr pos:start="3893:53" pos:end="3893:54"><name pos:start="3893:53" pos:end="3893:54">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3895:21" pos:end="3895:53"><expr pos:start="3895:21" pos:end="3895:52"><call pos:start="3895:21" pos:end="3895:52"><name pos:start="3895:21" pos:end="3895:36">tcg_gen_movi_i64</name><argument_list pos:start="3895:37" pos:end="3895:52">(<argument pos:start="3895:38" pos:end="3895:47"><expr pos:start="3895:38" pos:end="3895:47"><name pos:start="3895:38" pos:end="3895:47">cpu_dst_64</name></expr></argument>, <argument pos:start="3895:50" pos:end="3895:51"><expr pos:start="3895:50" pos:end="3895:51"><operator pos:start="3895:50" pos:end="3895:50">-</operator><literal type="number" pos:start="3895:51" pos:end="3895:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3897:21" pos:end="3897:56"><expr pos:start="3897:21" pos:end="3897:55"><call pos:start="3897:21" pos:end="3897:55"><name pos:start="3897:21" pos:end="3897:35">gen_store_fpr_D</name><argument_list pos:start="3897:36" pos:end="3897:55">(<argument pos:start="3897:37" pos:end="3897:38"><expr pos:start="3897:37" pos:end="3897:38"><name pos:start="3897:37" pos:end="3897:38">dc</name></expr></argument>, <argument pos:start="3897:41" pos:end="3897:42"><expr pos:start="3897:41" pos:end="3897:42"><name pos:start="3897:41" pos:end="3897:42">rd</name></expr></argument>, <argument pos:start="3897:45" pos:end="3897:54"><expr pos:start="3897:45" pos:end="3897:54"><name pos:start="3897:45" pos:end="3897:54">cpu_dst_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3899:21" pos:end="3899:26">break;</break>

                <case pos:start="3901:17" pos:end="3901:27">case <expr pos:start="3901:22" pos:end="3901:26"><literal type="number" pos:start="3901:22" pos:end="3901:26">0x07f</literal></expr>:</case> <comment type="block" pos:start="3901:29" pos:end="3901:45">/* VIS I fones */</comment>

                    <expr_stmt pos:start="3903:21" pos:end="3903:48"><expr pos:start="3903:21" pos:end="3903:47"><call pos:start="3903:21" pos:end="3903:47"><name pos:start="3903:21" pos:end="3903:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3903:38" pos:end="3903:47">(<argument pos:start="3903:39" pos:end="3903:40"><expr pos:start="3903:39" pos:end="3903:40"><name pos:start="3903:39" pos:end="3903:40">dc</name></expr></argument>, <argument pos:start="3903:43" pos:end="3903:46"><expr pos:start="3903:43" pos:end="3903:46"><name pos:start="3903:43" pos:end="3903:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3905:21" pos:end="3905:52"><expr pos:start="3905:21" pos:end="3905:51"><name pos:start="3905:21" pos:end="3905:30">cpu_dst_32</name> <operator pos:start="3905:32" pos:end="3905:32">=</operator> <call pos:start="3905:34" pos:end="3905:51"><name pos:start="3905:34" pos:end="3905:47">gen_dest_fpr_F</name><argument_list pos:start="3905:48" pos:end="3905:51">(<argument pos:start="3905:49" pos:end="3905:50"><expr pos:start="3905:49" pos:end="3905:50"><name pos:start="3905:49" pos:end="3905:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3907:21" pos:end="3907:53"><expr pos:start="3907:21" pos:end="3907:52"><call pos:start="3907:21" pos:end="3907:52"><name pos:start="3907:21" pos:end="3907:36">tcg_gen_movi_i32</name><argument_list pos:start="3907:37" pos:end="3907:52">(<argument pos:start="3907:38" pos:end="3907:47"><expr pos:start="3907:38" pos:end="3907:47"><name pos:start="3907:38" pos:end="3907:47">cpu_dst_32</name></expr></argument>, <argument pos:start="3907:50" pos:end="3907:51"><expr pos:start="3907:50" pos:end="3907:51"><operator pos:start="3907:50" pos:end="3907:50">-</operator><literal type="number" pos:start="3907:51" pos:end="3907:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3909:21" pos:end="3909:56"><expr pos:start="3909:21" pos:end="3909:55"><call pos:start="3909:21" pos:end="3909:55"><name pos:start="3909:21" pos:end="3909:35">gen_store_fpr_F</name><argument_list pos:start="3909:36" pos:end="3909:55">(<argument pos:start="3909:37" pos:end="3909:38"><expr pos:start="3909:37" pos:end="3909:38"><name pos:start="3909:37" pos:end="3909:38">dc</name></expr></argument>, <argument pos:start="3909:41" pos:end="3909:42"><expr pos:start="3909:41" pos:end="3909:42"><name pos:start="3909:41" pos:end="3909:42">rd</name></expr></argument>, <argument pos:start="3909:45" pos:end="3909:54"><expr pos:start="3909:45" pos:end="3909:54"><name pos:start="3909:45" pos:end="3909:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3911:21" pos:end="3911:26">break;</break>

                <case pos:start="3913:17" pos:end="3913:27">case <expr pos:start="3913:22" pos:end="3913:26"><literal type="number" pos:start="3913:22" pos:end="3913:26">0x080</literal></expr>:</case> <comment type="block" pos:start="3913:29" pos:end="3913:48">/* VIS I shutdown */</comment>

                <case pos:start="3915:17" pos:end="3915:27">case <expr pos:start="3915:22" pos:end="3915:26"><literal type="number" pos:start="3915:22" pos:end="3915:26">0x081</literal></expr>:</case> <comment type="block" pos:start="3915:29" pos:end="3915:45">/* VIS II siam */</comment>

                    <comment type="line" pos:start="3917:21" pos:end="3917:26">// XXX</comment>

                    <goto pos:start="3919:21" pos:end="3919:38">goto <name pos:start="3919:26" pos:end="3919:37">illegal_insn</name>;</goto>

                <default pos:start="3921:17" pos:end="3921:24">default:</default>

                    <goto pos:start="3923:21" pos:end="3923:38">goto <name pos:start="3923:26" pos:end="3923:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

<cpp:else pos:start="3927:1" pos:end="3927:5">#<cpp:directive pos:start="3927:2" pos:end="3927:5">else</cpp:directive></cpp:else>

                <goto pos:start="3929:17" pos:end="3932:0">goto <name pos:start="3929:22" pos:end="3929:29">ncp_insn</name>;</goto>

<cpp:endif pos:start="3931:1" pos:end="3931:6">#<cpp:directive pos:start="3931:2" pos:end="3931:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="3933:15" pos:end="3947:13">else if <condition pos:start="3933:23" pos:end="3933:35">(<expr pos:start="3933:24" pos:end="3933:34"><name pos:start="3933:24" pos:end="3933:26">xop</name> <operator pos:start="3933:28" pos:end="3933:29">==</operator> <literal type="number" pos:start="3933:31" pos:end="3933:34">0x37</literal></expr>)</condition> <block pos:start="3933:37" pos:end="3947:13">{<block_content pos:start="3937:17" pos:end="3946:0"> <comment type="block" pos:start="3933:39" pos:end="3933:64">/* V8 CPop2, V9 impdep2 */</comment>

<cpp:ifdef pos:start="3935:1" pos:end="3935:21">#<cpp:directive pos:start="3935:2" pos:end="3935:6">ifdef</cpp:directive> <name pos:start="3935:8" pos:end="3935:21">TARGET_SPARC64</name></cpp:ifdef>

                <goto pos:start="3937:17" pos:end="3940:0">goto <name pos:start="3937:22" pos:end="3937:33">illegal_insn</name>;</goto>

<cpp:else pos:start="3939:1" pos:end="3939:5">#<cpp:directive pos:start="3939:2" pos:end="3939:5">else</cpp:directive></cpp:else>

                <goto pos:start="3941:17" pos:end="3946:0">goto <name pos:start="3941:22" pos:end="3941:29">ncp_insn</name>;</goto>

<cpp:endif pos:start="3943:1" pos:end="3943:6">#<cpp:directive pos:start="3943:2" pos:end="3943:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3945:1" pos:end="3945:21">#<cpp:directive pos:start="3945:2" pos:end="3945:6">ifdef</cpp:directive> <name pos:start="3945:8" pos:end="3945:21">TARGET_SPARC64</name></cpp:ifdef>

            </block_content>}</block></if> <if type="elseif" pos:start="3947:15" pos:end="3999:13">else if <condition pos:start="3947:23" pos:end="3947:35">(<expr pos:start="3947:24" pos:end="3947:34"><name pos:start="3947:24" pos:end="3947:26">xop</name> <operator pos:start="3947:28" pos:end="3947:29">==</operator> <literal type="number" pos:start="3947:31" pos:end="3947:34">0x39</literal></expr>)</condition> <block pos:start="3947:37" pos:end="3999:13">{<block_content pos:start="3949:17" pos:end="3998:0"> <comment type="block" pos:start="3947:39" pos:end="3947:53">/* V9 return */</comment>

                <decl_stmt pos:start="3949:17" pos:end="3949:33"><decl pos:start="3949:17" pos:end="3949:32"><type pos:start="3949:17" pos:end="3949:24"><name pos:start="3949:17" pos:end="3949:24">TCGv_i32</name></type> <name pos:start="3949:26" pos:end="3949:32">r_const</name></decl>;</decl_stmt>



                <expr_stmt pos:start="3953:17" pos:end="3953:31"><expr pos:start="3953:17" pos:end="3953:30"><call pos:start="3953:17" pos:end="3953:30"><name pos:start="3953:17" pos:end="3953:26">save_state</name><argument_list pos:start="3953:27" pos:end="3953:30">(<argument pos:start="3953:28" pos:end="3953:29"><expr pos:start="3953:28" pos:end="3953:29"><name pos:start="3953:28" pos:end="3953:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3955:17" pos:end="3955:46"><expr pos:start="3955:17" pos:end="3955:45"><name pos:start="3955:17" pos:end="3955:24">cpu_src1</name> <operator pos:start="3955:26" pos:end="3955:26">=</operator> <call pos:start="3955:28" pos:end="3955:45"><name pos:start="3955:28" pos:end="3955:35">get_src1</name><argument_list pos:start="3955:36" pos:end="3955:45">(<argument pos:start="3955:37" pos:end="3955:38"><expr pos:start="3955:37" pos:end="3955:38"><name pos:start="3955:37" pos:end="3955:38">dc</name></expr></argument>, <argument pos:start="3955:41" pos:end="3955:44"><expr pos:start="3955:41" pos:end="3955:44"><name pos:start="3955:41" pos:end="3955:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="3957:17" pos:end="3979:17"><if pos:start="3957:17" pos:end="3963:17">if <condition pos:start="3957:20" pos:end="3957:27">(<expr pos:start="3957:21" pos:end="3957:26"><name pos:start="3957:21" pos:end="3957:26">IS_IMM</name></expr>)</condition> <block pos:start="3957:29" pos:end="3963:17">{<block_content pos:start="3959:21" pos:end="3961:62">   <comment type="block" pos:start="3957:33" pos:end="3957:47">/* immediate */</comment>

                    <expr_stmt pos:start="3959:21" pos:end="3959:52"><expr pos:start="3959:21" pos:end="3959:51"><name pos:start="3959:21" pos:end="3959:24">simm</name> <operator pos:start="3959:26" pos:end="3959:26">=</operator> <call pos:start="3959:28" pos:end="3959:51"><name pos:start="3959:28" pos:end="3959:37">GET_FIELDs</name><argument_list pos:start="3959:38" pos:end="3959:51">(<argument pos:start="3959:39" pos:end="3959:42"><expr pos:start="3959:39" pos:end="3959:42"><name pos:start="3959:39" pos:end="3959:42">insn</name></expr></argument>, <argument pos:start="3959:45" pos:end="3959:46"><expr pos:start="3959:45" pos:end="3959:46"><literal type="number" pos:start="3959:45" pos:end="3959:46">19</literal></expr></argument>, <argument pos:start="3959:49" pos:end="3959:50"><expr pos:start="3959:49" pos:end="3959:50"><literal type="number" pos:start="3959:49" pos:end="3959:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3961:21" pos:end="3961:62"><expr pos:start="3961:21" pos:end="3961:61"><call pos:start="3961:21" pos:end="3961:61"><name pos:start="3961:21" pos:end="3961:35">tcg_gen_addi_tl</name><argument_list pos:start="3961:36" pos:end="3961:61">(<argument pos:start="3961:37" pos:end="3961:44"><expr pos:start="3961:37" pos:end="3961:44"><name pos:start="3961:37" pos:end="3961:44">cpu_tmp0</name></expr></argument>, <argument pos:start="3961:47" pos:end="3961:54"><expr pos:start="3961:47" pos:end="3961:54"><name pos:start="3961:47" pos:end="3961:54">cpu_src1</name></expr></argument>, <argument pos:start="3961:57" pos:end="3961:60"><expr pos:start="3961:57" pos:end="3961:60"><name pos:start="3961:57" pos:end="3961:60">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3963:19" pos:end="3979:17">else <block pos:start="3963:24" pos:end="3979:17">{<block_content pos:start="3965:21" pos:end="3977:21">                <comment type="block" pos:start="3963:41" pos:end="3963:54">/* register */</comment>

                    <expr_stmt pos:start="3965:21" pos:end="3965:50"><expr pos:start="3965:21" pos:end="3965:49"><name pos:start="3965:21" pos:end="3965:23">rs2</name> <operator pos:start="3965:25" pos:end="3965:25">=</operator> <call pos:start="3965:27" pos:end="3965:49"><name pos:start="3965:27" pos:end="3965:35">GET_FIELD</name><argument_list pos:start="3965:36" pos:end="3965:49">(<argument pos:start="3965:37" pos:end="3965:40"><expr pos:start="3965:37" pos:end="3965:40"><name pos:start="3965:37" pos:end="3965:40">insn</name></expr></argument>, <argument pos:start="3965:43" pos:end="3965:44"><expr pos:start="3965:43" pos:end="3965:44"><literal type="number" pos:start="3965:43" pos:end="3965:44">27</literal></expr></argument>, <argument pos:start="3965:47" pos:end="3965:48"><expr pos:start="3965:47" pos:end="3965:48"><literal type="number" pos:start="3965:47" pos:end="3965:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="3967:21" pos:end="3977:21"><if pos:start="3967:21" pos:end="3973:21">if <condition pos:start="3967:24" pos:end="3967:28">(<expr pos:start="3967:25" pos:end="3967:27"><name pos:start="3967:25" pos:end="3967:27">rs2</name></expr>)</condition> <block pos:start="3967:30" pos:end="3973:21">{<block_content pos:start="3969:25" pos:end="3971:69">

                        <expr_stmt pos:start="3969:25" pos:end="3969:57"><expr pos:start="3969:25" pos:end="3969:56"><name pos:start="3969:25" pos:end="3969:32">cpu_src2</name> <operator pos:start="3969:34" pos:end="3969:34">=</operator> <call pos:start="3969:36" pos:end="3969:56"><name pos:start="3969:36" pos:end="3969:47">gen_load_gpr</name><argument_list pos:start="3969:48" pos:end="3969:56">(<argument pos:start="3969:49" pos:end="3969:50"><expr pos:start="3969:49" pos:end="3969:50"><name pos:start="3969:49" pos:end="3969:50">dc</name></expr></argument>, <argument pos:start="3969:53" pos:end="3969:55"><expr pos:start="3969:53" pos:end="3969:55"><name pos:start="3969:53" pos:end="3969:55">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3971:25" pos:end="3971:69"><expr pos:start="3971:25" pos:end="3971:68"><call pos:start="3971:25" pos:end="3971:68"><name pos:start="3971:25" pos:end="3971:38">tcg_gen_add_tl</name><argument_list pos:start="3971:39" pos:end="3971:68">(<argument pos:start="3971:40" pos:end="3971:47"><expr pos:start="3971:40" pos:end="3971:47"><name pos:start="3971:40" pos:end="3971:47">cpu_tmp0</name></expr></argument>, <argument pos:start="3971:50" pos:end="3971:57"><expr pos:start="3971:50" pos:end="3971:57"><name pos:start="3971:50" pos:end="3971:57">cpu_src1</name></expr></argument>, <argument pos:start="3971:60" pos:end="3971:67"><expr pos:start="3971:60" pos:end="3971:67"><name pos:start="3971:60" pos:end="3971:67">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="3973:23" pos:end="3977:21">else <block pos:start="3973:28" pos:end="3977:21">{<block_content pos:start="3975:25" pos:end="3975:59">

                        <expr_stmt pos:start="3975:25" pos:end="3975:59"><expr pos:start="3975:25" pos:end="3975:58"><call pos:start="3975:25" pos:end="3975:58"><name pos:start="3975:25" pos:end="3975:38">tcg_gen_mov_tl</name><argument_list pos:start="3975:39" pos:end="3975:58">(<argument pos:start="3975:40" pos:end="3975:47"><expr pos:start="3975:40" pos:end="3975:47"><name pos:start="3975:40" pos:end="3975:47">cpu_tmp0</name></expr></argument>, <argument pos:start="3975:50" pos:end="3975:57"><expr pos:start="3975:50" pos:end="3975:57"><name pos:start="3975:50" pos:end="3975:57">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="3981:17" pos:end="3981:44"><expr pos:start="3981:17" pos:end="3981:43"><call pos:start="3981:17" pos:end="3981:43"><name pos:start="3981:17" pos:end="3981:34">gen_helper_restore</name><argument_list pos:start="3981:35" pos:end="3981:43">(<argument pos:start="3981:36" pos:end="3981:42"><expr pos:start="3981:36" pos:end="3981:42"><name pos:start="3981:36" pos:end="3981:42">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3983:17" pos:end="3983:35"><expr pos:start="3983:17" pos:end="3983:34"><call pos:start="3983:17" pos:end="3983:34"><name pos:start="3983:17" pos:end="3983:30">gen_mov_pc_npc</name><argument_list pos:start="3983:31" pos:end="3983:34">(<argument pos:start="3983:32" pos:end="3983:33"><expr pos:start="3983:32" pos:end="3983:33"><name pos:start="3983:32" pos:end="3983:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3985:17" pos:end="3985:43"><expr pos:start="3985:17" pos:end="3985:42"><name pos:start="3985:17" pos:end="3985:23">r_const</name> <operator pos:start="3985:25" pos:end="3985:25">=</operator> <call pos:start="3985:27" pos:end="3985:42"><name pos:start="3985:27" pos:end="3985:39">tcg_const_i32</name><argument_list pos:start="3985:40" pos:end="3985:42">(<argument pos:start="3985:41" pos:end="3985:41"><expr pos:start="3985:41" pos:end="3985:41"><literal type="number" pos:start="3985:41" pos:end="3985:41">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3987:17" pos:end="3987:67"><expr pos:start="3987:17" pos:end="3987:66"><call pos:start="3987:17" pos:end="3987:66"><name pos:start="3987:17" pos:end="3987:38">gen_helper_check_align</name><argument_list pos:start="3987:39" pos:end="3987:66">(<argument pos:start="3987:40" pos:end="3987:46"><expr pos:start="3987:40" pos:end="3987:46"><name pos:start="3987:40" pos:end="3987:46">cpu_env</name></expr></argument>, <argument pos:start="3987:49" pos:end="3987:56"><expr pos:start="3987:49" pos:end="3987:56"><name pos:start="3987:49" pos:end="3987:56">cpu_tmp0</name></expr></argument>, <argument pos:start="3987:59" pos:end="3987:65"><expr pos:start="3987:59" pos:end="3987:65"><name pos:start="3987:59" pos:end="3987:65">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3989:17" pos:end="3989:43"><expr pos:start="3989:17" pos:end="3989:42"><call pos:start="3989:17" pos:end="3989:42"><name pos:start="3989:17" pos:end="3989:33">tcg_temp_free_i32</name><argument_list pos:start="3989:34" pos:end="3989:42">(<argument pos:start="3989:35" pos:end="3989:41"><expr pos:start="3989:35" pos:end="3989:41"><name pos:start="3989:35" pos:end="3989:41">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3991:17" pos:end="3991:50"><expr pos:start="3991:17" pos:end="3991:49"><call pos:start="3991:17" pos:end="3991:49"><name pos:start="3991:17" pos:end="3991:30">tcg_gen_mov_tl</name><argument_list pos:start="3991:31" pos:end="3991:49">(<argument pos:start="3991:32" pos:end="3991:38"><expr pos:start="3991:32" pos:end="3991:38"><name pos:start="3991:32" pos:end="3991:38">cpu_npc</name></expr></argument>, <argument pos:start="3991:41" pos:end="3991:48"><expr pos:start="3991:41" pos:end="3991:48"><name pos:start="3991:41" pos:end="3991:48">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3993:17" pos:end="3993:37"><expr pos:start="3993:17" pos:end="3993:36"><name pos:start="3993:17" pos:end="3993:23"><name pos:start="3993:17" pos:end="3993:18">dc</name><operator pos:start="3993:19" pos:end="3993:20">-&gt;</operator><name pos:start="3993:21" pos:end="3993:23">npc</name></name> <operator pos:start="3993:25" pos:end="3993:25">=</operator> <name pos:start="3993:27" pos:end="3993:36">DYNAMIC_PC</name></expr>;</expr_stmt>

                <goto pos:start="3995:17" pos:end="3998:0">goto <name pos:start="3995:22" pos:end="3995:29">jmp_insn</name>;</goto>

<cpp:endif pos:start="3997:1" pos:end="3997:6">#<cpp:directive pos:start="3997:2" pos:end="3997:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="3999:15" pos:end="4181:13">else <block pos:start="3999:20" pos:end="4181:13">{<block_content pos:start="4001:17" pos:end="4179:17">

                <expr_stmt pos:start="4001:17" pos:end="4001:46"><expr pos:start="4001:17" pos:end="4001:45"><name pos:start="4001:17" pos:end="4001:24">cpu_src1</name> <operator pos:start="4001:26" pos:end="4001:26">=</operator> <call pos:start="4001:28" pos:end="4001:45"><name pos:start="4001:28" pos:end="4001:35">get_src1</name><argument_list pos:start="4001:36" pos:end="4001:45">(<argument pos:start="4001:37" pos:end="4001:38"><expr pos:start="4001:37" pos:end="4001:38"><name pos:start="4001:37" pos:end="4001:38">dc</name></expr></argument>, <argument pos:start="4001:41" pos:end="4001:44"><expr pos:start="4001:41" pos:end="4001:44"><name pos:start="4001:41" pos:end="4001:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="4003:17" pos:end="4025:17"><if pos:start="4003:17" pos:end="4009:17">if <condition pos:start="4003:20" pos:end="4003:27">(<expr pos:start="4003:21" pos:end="4003:26"><name pos:start="4003:21" pos:end="4003:26">IS_IMM</name></expr>)</condition> <block pos:start="4003:29" pos:end="4009:17">{<block_content pos:start="4005:21" pos:end="4007:62">   <comment type="block" pos:start="4003:33" pos:end="4003:47">/* immediate */</comment>

                    <expr_stmt pos:start="4005:21" pos:end="4005:52"><expr pos:start="4005:21" pos:end="4005:51"><name pos:start="4005:21" pos:end="4005:24">simm</name> <operator pos:start="4005:26" pos:end="4005:26">=</operator> <call pos:start="4005:28" pos:end="4005:51"><name pos:start="4005:28" pos:end="4005:37">GET_FIELDs</name><argument_list pos:start="4005:38" pos:end="4005:51">(<argument pos:start="4005:39" pos:end="4005:42"><expr pos:start="4005:39" pos:end="4005:42"><name pos:start="4005:39" pos:end="4005:42">insn</name></expr></argument>, <argument pos:start="4005:45" pos:end="4005:46"><expr pos:start="4005:45" pos:end="4005:46"><literal type="number" pos:start="4005:45" pos:end="4005:46">19</literal></expr></argument>, <argument pos:start="4005:49" pos:end="4005:50"><expr pos:start="4005:49" pos:end="4005:50"><literal type="number" pos:start="4005:49" pos:end="4005:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4007:21" pos:end="4007:62"><expr pos:start="4007:21" pos:end="4007:61"><call pos:start="4007:21" pos:end="4007:61"><name pos:start="4007:21" pos:end="4007:35">tcg_gen_addi_tl</name><argument_list pos:start="4007:36" pos:end="4007:61">(<argument pos:start="4007:37" pos:end="4007:44"><expr pos:start="4007:37" pos:end="4007:44"><name pos:start="4007:37" pos:end="4007:44">cpu_tmp0</name></expr></argument>, <argument pos:start="4007:47" pos:end="4007:54"><expr pos:start="4007:47" pos:end="4007:54"><name pos:start="4007:47" pos:end="4007:54">cpu_src1</name></expr></argument>, <argument pos:start="4007:57" pos:end="4007:60"><expr pos:start="4007:57" pos:end="4007:60"><name pos:start="4007:57" pos:end="4007:60">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4009:19" pos:end="4025:17">else <block pos:start="4009:24" pos:end="4025:17">{<block_content pos:start="4011:21" pos:end="4023:21">                <comment type="block" pos:start="4009:41" pos:end="4009:54">/* register */</comment>

                    <expr_stmt pos:start="4011:21" pos:end="4011:50"><expr pos:start="4011:21" pos:end="4011:49"><name pos:start="4011:21" pos:end="4011:23">rs2</name> <operator pos:start="4011:25" pos:end="4011:25">=</operator> <call pos:start="4011:27" pos:end="4011:49"><name pos:start="4011:27" pos:end="4011:35">GET_FIELD</name><argument_list pos:start="4011:36" pos:end="4011:49">(<argument pos:start="4011:37" pos:end="4011:40"><expr pos:start="4011:37" pos:end="4011:40"><name pos:start="4011:37" pos:end="4011:40">insn</name></expr></argument>, <argument pos:start="4011:43" pos:end="4011:44"><expr pos:start="4011:43" pos:end="4011:44"><literal type="number" pos:start="4011:43" pos:end="4011:44">27</literal></expr></argument>, <argument pos:start="4011:47" pos:end="4011:48"><expr pos:start="4011:47" pos:end="4011:48"><literal type="number" pos:start="4011:47" pos:end="4011:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="4013:21" pos:end="4023:21"><if pos:start="4013:21" pos:end="4019:21">if <condition pos:start="4013:24" pos:end="4013:28">(<expr pos:start="4013:25" pos:end="4013:27"><name pos:start="4013:25" pos:end="4013:27">rs2</name></expr>)</condition> <block pos:start="4013:30" pos:end="4019:21">{<block_content pos:start="4015:25" pos:end="4017:69">

                        <expr_stmt pos:start="4015:25" pos:end="4015:57"><expr pos:start="4015:25" pos:end="4015:56"><name pos:start="4015:25" pos:end="4015:32">cpu_src2</name> <operator pos:start="4015:34" pos:end="4015:34">=</operator> <call pos:start="4015:36" pos:end="4015:56"><name pos:start="4015:36" pos:end="4015:47">gen_load_gpr</name><argument_list pos:start="4015:48" pos:end="4015:56">(<argument pos:start="4015:49" pos:end="4015:50"><expr pos:start="4015:49" pos:end="4015:50"><name pos:start="4015:49" pos:end="4015:50">dc</name></expr></argument>, <argument pos:start="4015:53" pos:end="4015:55"><expr pos:start="4015:53" pos:end="4015:55"><name pos:start="4015:53" pos:end="4015:55">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4017:25" pos:end="4017:69"><expr pos:start="4017:25" pos:end="4017:68"><call pos:start="4017:25" pos:end="4017:68"><name pos:start="4017:25" pos:end="4017:38">tcg_gen_add_tl</name><argument_list pos:start="4017:39" pos:end="4017:68">(<argument pos:start="4017:40" pos:end="4017:47"><expr pos:start="4017:40" pos:end="4017:47"><name pos:start="4017:40" pos:end="4017:47">cpu_tmp0</name></expr></argument>, <argument pos:start="4017:50" pos:end="4017:57"><expr pos:start="4017:50" pos:end="4017:57"><name pos:start="4017:50" pos:end="4017:57">cpu_src1</name></expr></argument>, <argument pos:start="4017:60" pos:end="4017:67"><expr pos:start="4017:60" pos:end="4017:67"><name pos:start="4017:60" pos:end="4017:67">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4019:23" pos:end="4023:21">else <block pos:start="4019:28" pos:end="4023:21">{<block_content pos:start="4021:25" pos:end="4021:59">

                        <expr_stmt pos:start="4021:25" pos:end="4021:59"><expr pos:start="4021:25" pos:end="4021:58"><call pos:start="4021:25" pos:end="4021:58"><name pos:start="4021:25" pos:end="4021:38">tcg_gen_mov_tl</name><argument_list pos:start="4021:39" pos:end="4021:58">(<argument pos:start="4021:40" pos:end="4021:47"><expr pos:start="4021:40" pos:end="4021:47"><name pos:start="4021:40" pos:end="4021:47">cpu_tmp0</name></expr></argument>, <argument pos:start="4021:50" pos:end="4021:57"><expr pos:start="4021:50" pos:end="4021:57"><name pos:start="4021:50" pos:end="4021:57">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <switch pos:start="4027:17" pos:end="4179:17">switch <condition pos:start="4027:24" pos:end="4027:28">(<expr pos:start="4027:25" pos:end="4027:27"><name pos:start="4027:25" pos:end="4027:27">xop</name></expr>)</condition> <block pos:start="4027:30" pos:end="4179:17">{<block_content pos:start="4029:17" pos:end="4177:38">

                <case pos:start="4029:17" pos:end="4029:26">case <expr pos:start="4029:22" pos:end="4029:25"><literal type="number" pos:start="4029:22" pos:end="4029:25">0x38</literal></expr>:</case>      <comment type="block" pos:start="4029:33" pos:end="4029:42">/* jmpl */</comment>

                    <block pos:start="4031:21" pos:end="4059:21">{<block_content pos:start="4033:25" pos:end="4057:45">

                        <decl_stmt pos:start="4033:25" pos:end="4033:31"><decl pos:start="4033:25" pos:end="4033:30"><type pos:start="4033:25" pos:end="4033:28"><name pos:start="4033:25" pos:end="4033:28">TCGv</name></type> <name pos:start="4033:30" pos:end="4033:30">t</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="4035:25" pos:end="4035:41"><decl pos:start="4035:25" pos:end="4035:40"><type pos:start="4035:25" pos:end="4035:32"><name pos:start="4035:25" pos:end="4035:32">TCGv_i32</name></type> <name pos:start="4035:34" pos:end="4035:40">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4039:25" pos:end="4039:49"><expr pos:start="4039:25" pos:end="4039:48"><name pos:start="4039:25" pos:end="4039:25">t</name> <operator pos:start="4039:27" pos:end="4039:27">=</operator> <call pos:start="4039:29" pos:end="4039:48"><name pos:start="4039:29" pos:end="4039:40">gen_dest_gpr</name><argument_list pos:start="4039:41" pos:end="4039:48">(<argument pos:start="4039:42" pos:end="4039:43"><expr pos:start="4039:42" pos:end="4039:43"><name pos:start="4039:42" pos:end="4039:43">dc</name></expr></argument>, <argument pos:start="4039:46" pos:end="4039:47"><expr pos:start="4039:46" pos:end="4039:47"><name pos:start="4039:46" pos:end="4039:47">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4041:25" pos:end="4041:51"><expr pos:start="4041:25" pos:end="4041:50"><call pos:start="4041:25" pos:end="4041:50"><name pos:start="4041:25" pos:end="4041:39">tcg_gen_movi_tl</name><argument_list pos:start="4041:40" pos:end="4041:50">(<argument pos:start="4041:41" pos:end="4041:41"><expr pos:start="4041:41" pos:end="4041:41"><name pos:start="4041:41" pos:end="4041:41">t</name></expr></argument>, <argument pos:start="4041:44" pos:end="4041:49"><expr pos:start="4041:44" pos:end="4041:49"><name pos:start="4041:44" pos:end="4041:49"><name pos:start="4041:44" pos:end="4041:45">dc</name><operator pos:start="4041:46" pos:end="4041:47">-&gt;</operator><name pos:start="4041:48" pos:end="4041:49">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4043:25" pos:end="4043:49"><expr pos:start="4043:25" pos:end="4043:48"><call pos:start="4043:25" pos:end="4043:48"><name pos:start="4043:25" pos:end="4043:37">gen_store_gpr</name><argument_list pos:start="4043:38" pos:end="4043:48">(<argument pos:start="4043:39" pos:end="4043:40"><expr pos:start="4043:39" pos:end="4043:40"><name pos:start="4043:39" pos:end="4043:40">dc</name></expr></argument>, <argument pos:start="4043:43" pos:end="4043:44"><expr pos:start="4043:43" pos:end="4043:44"><name pos:start="4043:43" pos:end="4043:44">rd</name></expr></argument>, <argument pos:start="4043:47" pos:end="4043:47"><expr pos:start="4043:47" pos:end="4043:47"><name pos:start="4043:47" pos:end="4043:47">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4045:25" pos:end="4045:43"><expr pos:start="4045:25" pos:end="4045:42"><call pos:start="4045:25" pos:end="4045:42"><name pos:start="4045:25" pos:end="4045:38">gen_mov_pc_npc</name><argument_list pos:start="4045:39" pos:end="4045:42">(<argument pos:start="4045:40" pos:end="4045:41"><expr pos:start="4045:40" pos:end="4045:41"><name pos:start="4045:40" pos:end="4045:41">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4047:25" pos:end="4047:51"><expr pos:start="4047:25" pos:end="4047:50"><name pos:start="4047:25" pos:end="4047:31">r_const</name> <operator pos:start="4047:33" pos:end="4047:33">=</operator> <call pos:start="4047:35" pos:end="4047:50"><name pos:start="4047:35" pos:end="4047:47">tcg_const_i32</name><argument_list pos:start="4047:48" pos:end="4047:50">(<argument pos:start="4047:49" pos:end="4047:49"><expr pos:start="4047:49" pos:end="4047:49"><literal type="number" pos:start="4047:49" pos:end="4047:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4049:25" pos:end="4049:75"><expr pos:start="4049:25" pos:end="4049:74"><call pos:start="4049:25" pos:end="4049:74"><name pos:start="4049:25" pos:end="4049:46">gen_helper_check_align</name><argument_list pos:start="4049:47" pos:end="4049:74">(<argument pos:start="4049:48" pos:end="4049:54"><expr pos:start="4049:48" pos:end="4049:54"><name pos:start="4049:48" pos:end="4049:54">cpu_env</name></expr></argument>, <argument pos:start="4049:57" pos:end="4049:64"><expr pos:start="4049:57" pos:end="4049:64"><name pos:start="4049:57" pos:end="4049:64">cpu_tmp0</name></expr></argument>, <argument pos:start="4049:67" pos:end="4049:73"><expr pos:start="4049:67" pos:end="4049:73"><name pos:start="4049:67" pos:end="4049:73">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4051:25" pos:end="4051:51"><expr pos:start="4051:25" pos:end="4051:50"><call pos:start="4051:25" pos:end="4051:50"><name pos:start="4051:25" pos:end="4051:41">tcg_temp_free_i32</name><argument_list pos:start="4051:42" pos:end="4051:50">(<argument pos:start="4051:43" pos:end="4051:49"><expr pos:start="4051:43" pos:end="4051:49"><name pos:start="4051:43" pos:end="4051:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4053:25" pos:end="4053:55"><expr pos:start="4053:25" pos:end="4053:54"><call pos:start="4053:25" pos:end="4053:54"><name pos:start="4053:25" pos:end="4053:40">gen_address_mask</name><argument_list pos:start="4053:41" pos:end="4053:54">(<argument pos:start="4053:42" pos:end="4053:43"><expr pos:start="4053:42" pos:end="4053:43"><name pos:start="4053:42" pos:end="4053:43">dc</name></expr></argument>, <argument pos:start="4053:46" pos:end="4053:53"><expr pos:start="4053:46" pos:end="4053:53"><name pos:start="4053:46" pos:end="4053:53">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4055:25" pos:end="4055:58"><expr pos:start="4055:25" pos:end="4055:57"><call pos:start="4055:25" pos:end="4055:57"><name pos:start="4055:25" pos:end="4055:38">tcg_gen_mov_tl</name><argument_list pos:start="4055:39" pos:end="4055:57">(<argument pos:start="4055:40" pos:end="4055:46"><expr pos:start="4055:40" pos:end="4055:46"><name pos:start="4055:40" pos:end="4055:46">cpu_npc</name></expr></argument>, <argument pos:start="4055:49" pos:end="4055:56"><expr pos:start="4055:49" pos:end="4055:56"><name pos:start="4055:49" pos:end="4055:56">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4057:25" pos:end="4057:45"><expr pos:start="4057:25" pos:end="4057:44"><name pos:start="4057:25" pos:end="4057:31"><name pos:start="4057:25" pos:end="4057:26">dc</name><operator pos:start="4057:27" pos:end="4057:28">-&gt;</operator><name pos:start="4057:29" pos:end="4057:31">npc</name></name> <operator pos:start="4057:33" pos:end="4057:33">=</operator> <name pos:start="4057:35" pos:end="4057:44">DYNAMIC_PC</name></expr>;</expr_stmt>

                    </block_content>}</block>

                    <goto pos:start="4061:21" pos:end="4064:0">goto <name pos:start="4061:26" pos:end="4061:33">jmp_insn</name>;</goto>

<cpp:if pos:start="4063:1" pos:end="4063:58">#<cpp:directive pos:start="4063:2" pos:end="4063:3">if</cpp:directive> <expr pos:start="4063:5" pos:end="4063:58"><operator pos:start="4063:5" pos:end="4063:5">!</operator><call pos:start="4063:6" pos:end="4063:30"><name pos:start="4063:6" pos:end="4063:12">defined</name><argument_list pos:start="4063:13" pos:end="4063:30">(<argument pos:start="4063:14" pos:end="4063:29"><expr pos:start="4063:14" pos:end="4063:29"><name pos:start="4063:14" pos:end="4063:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4063:32" pos:end="4063:33">&amp;&amp;</operator> <operator pos:start="4063:35" pos:end="4063:35">!</operator><call pos:start="4063:36" pos:end="4063:58"><name pos:start="4063:36" pos:end="4063:42">defined</name><argument_list pos:start="4063:43" pos:end="4063:58">(<argument pos:start="4063:44" pos:end="4063:57"><expr pos:start="4063:44" pos:end="4063:57"><name pos:start="4063:44" pos:end="4063:57">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="4065:17" pos:end="4065:26">case <expr pos:start="4065:22" pos:end="4065:25"><literal type="number" pos:start="4065:22" pos:end="4065:25">0x39</literal></expr>:</case>      <comment type="block" pos:start="4065:33" pos:end="4065:53">/* rett, V9 return */</comment>

                    <block pos:start="4067:21" pos:end="4091:21">{<block_content pos:start="4069:25" pos:end="4089:49">

                        <decl_stmt pos:start="4069:25" pos:end="4069:41"><decl pos:start="4069:25" pos:end="4069:40"><type pos:start="4069:25" pos:end="4069:32"><name pos:start="4069:25" pos:end="4069:32">TCGv_i32</name></type> <name pos:start="4069:34" pos:end="4069:40">r_const</name></decl>;</decl_stmt>



                        <if_stmt pos:start="4073:25" pos:end="4075:43"><if pos:start="4073:25" pos:end="4075:43">if <condition pos:start="4073:28" pos:end="4073:44">(<expr pos:start="4073:29" pos:end="4073:43"><operator pos:start="4073:29" pos:end="4073:29">!</operator><call pos:start="4073:30" pos:end="4073:43"><name pos:start="4073:30" pos:end="4073:39">supervisor</name><argument_list pos:start="4073:40" pos:end="4073:43">(<argument pos:start="4073:41" pos:end="4073:42"><expr pos:start="4073:41" pos:end="4073:42"><name pos:start="4073:41" pos:end="4073:42">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4075:29" pos:end="4075:43"><block_content pos:start="4075:29" pos:end="4075:43">

                            <goto pos:start="4075:29" pos:end="4075:43">goto <name pos:start="4075:34" pos:end="4075:42">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="4077:25" pos:end="4077:43"><expr pos:start="4077:25" pos:end="4077:42"><call pos:start="4077:25" pos:end="4077:42"><name pos:start="4077:25" pos:end="4077:38">gen_mov_pc_npc</name><argument_list pos:start="4077:39" pos:end="4077:42">(<argument pos:start="4077:40" pos:end="4077:41"><expr pos:start="4077:40" pos:end="4077:41"><name pos:start="4077:40" pos:end="4077:41">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4079:25" pos:end="4079:51"><expr pos:start="4079:25" pos:end="4079:50"><name pos:start="4079:25" pos:end="4079:31">r_const</name> <operator pos:start="4079:33" pos:end="4079:33">=</operator> <call pos:start="4079:35" pos:end="4079:50"><name pos:start="4079:35" pos:end="4079:47">tcg_const_i32</name><argument_list pos:start="4079:48" pos:end="4079:50">(<argument pos:start="4079:49" pos:end="4079:49"><expr pos:start="4079:49" pos:end="4079:49"><literal type="number" pos:start="4079:49" pos:end="4079:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4081:25" pos:end="4081:75"><expr pos:start="4081:25" pos:end="4081:74"><call pos:start="4081:25" pos:end="4081:74"><name pos:start="4081:25" pos:end="4081:46">gen_helper_check_align</name><argument_list pos:start="4081:47" pos:end="4081:74">(<argument pos:start="4081:48" pos:end="4081:54"><expr pos:start="4081:48" pos:end="4081:54"><name pos:start="4081:48" pos:end="4081:54">cpu_env</name></expr></argument>, <argument pos:start="4081:57" pos:end="4081:64"><expr pos:start="4081:57" pos:end="4081:64"><name pos:start="4081:57" pos:end="4081:64">cpu_tmp0</name></expr></argument>, <argument pos:start="4081:67" pos:end="4081:73"><expr pos:start="4081:67" pos:end="4081:73"><name pos:start="4081:67" pos:end="4081:73">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4083:25" pos:end="4083:51"><expr pos:start="4083:25" pos:end="4083:50"><call pos:start="4083:25" pos:end="4083:50"><name pos:start="4083:25" pos:end="4083:41">tcg_temp_free_i32</name><argument_list pos:start="4083:42" pos:end="4083:50">(<argument pos:start="4083:43" pos:end="4083:49"><expr pos:start="4083:43" pos:end="4083:49"><name pos:start="4083:43" pos:end="4083:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4085:25" pos:end="4085:58"><expr pos:start="4085:25" pos:end="4085:57"><call pos:start="4085:25" pos:end="4085:57"><name pos:start="4085:25" pos:end="4085:38">tcg_gen_mov_tl</name><argument_list pos:start="4085:39" pos:end="4085:57">(<argument pos:start="4085:40" pos:end="4085:46"><expr pos:start="4085:40" pos:end="4085:46"><name pos:start="4085:40" pos:end="4085:46">cpu_npc</name></expr></argument>, <argument pos:start="4085:49" pos:end="4085:56"><expr pos:start="4085:49" pos:end="4085:56"><name pos:start="4085:49" pos:end="4085:56">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4087:25" pos:end="4087:45"><expr pos:start="4087:25" pos:end="4087:44"><name pos:start="4087:25" pos:end="4087:31"><name pos:start="4087:25" pos:end="4087:26">dc</name><operator pos:start="4087:27" pos:end="4087:28">-&gt;</operator><name pos:start="4087:29" pos:end="4087:31">npc</name></name> <operator pos:start="4087:33" pos:end="4087:33">=</operator> <name pos:start="4087:35" pos:end="4087:44">DYNAMIC_PC</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="4089:25" pos:end="4089:49"><expr pos:start="4089:25" pos:end="4089:48"><call pos:start="4089:25" pos:end="4089:48"><name pos:start="4089:25" pos:end="4089:39">gen_helper_rett</name><argument_list pos:start="4089:40" pos:end="4089:48">(<argument pos:start="4089:41" pos:end="4089:47"><expr pos:start="4089:41" pos:end="4089:47"><name pos:start="4089:41" pos:end="4089:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <goto pos:start="4093:21" pos:end="4096:0">goto <name pos:start="4093:26" pos:end="4093:33">jmp_insn</name>;</goto>

<cpp:endif pos:start="4095:1" pos:end="4095:6">#<cpp:directive pos:start="4095:2" pos:end="4095:6">endif</cpp:directive></cpp:endif>

                <case pos:start="4097:17" pos:end="4097:26">case <expr pos:start="4097:22" pos:end="4097:25"><literal type="number" pos:start="4097:22" pos:end="4097:25">0x3b</literal></expr>:</case> <comment type="block" pos:start="4097:28" pos:end="4097:38">/* flush */</comment>

                    <if_stmt pos:start="4099:21" pos:end="4101:41"><if pos:start="4099:21" pos:end="4101:41">if <condition pos:start="4099:24" pos:end="4099:67">(<expr pos:start="4099:25" pos:end="4099:66"><operator pos:start="4099:25" pos:end="4099:25">!</operator><operator pos:start="4099:26" pos:end="4099:26">(</operator><operator pos:start="4099:27" pos:end="4099:27">(</operator><name pos:start="4099:28" pos:end="4099:29">dc</name><operator pos:start="4099:30" pos:end="4099:30">)</operator><operator pos:start="4099:31" pos:end="4099:32">-&gt;</operator><name pos:start="4099:33" pos:end="4099:45"><name pos:start="4099:33" pos:end="4099:35">def</name><operator pos:start="4099:36" pos:end="4099:37">-&gt;</operator><name pos:start="4099:38" pos:end="4099:45">features</name></name> <operator pos:start="4099:47" pos:end="4099:47">&amp;</operator> <name pos:start="4099:49" pos:end="4099:65">CPU_FEATURE_FLUSH</name><operator pos:start="4099:66" pos:end="4099:66">)</operator></expr>)</condition><block type="pseudo" pos:start="4101:25" pos:end="4101:41"><block_content pos:start="4101:25" pos:end="4101:41">

                        <goto pos:start="4101:25" pos:end="4101:41">goto <name pos:start="4101:30" pos:end="4101:40">unimp_flush</name>;</goto></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="4103:21" pos:end="4103:29">/* nop */</comment>

                    <break pos:start="4105:21" pos:end="4105:26">break;</break>

                <case pos:start="4107:17" pos:end="4107:26">case <expr pos:start="4107:22" pos:end="4107:25"><literal type="number" pos:start="4107:22" pos:end="4107:25">0x3c</literal></expr>:</case>      <comment type="block" pos:start="4107:33" pos:end="4107:42">/* save */</comment>

                    <expr_stmt pos:start="4109:21" pos:end="4109:35"><expr pos:start="4109:21" pos:end="4109:34"><call pos:start="4109:21" pos:end="4109:34"><name pos:start="4109:21" pos:end="4109:30">save_state</name><argument_list pos:start="4109:31" pos:end="4109:34">(<argument pos:start="4109:32" pos:end="4109:33"><expr pos:start="4109:32" pos:end="4109:33"><name pos:start="4109:32" pos:end="4109:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4111:21" pos:end="4111:45"><expr pos:start="4111:21" pos:end="4111:44"><call pos:start="4111:21" pos:end="4111:44"><name pos:start="4111:21" pos:end="4111:35">gen_helper_save</name><argument_list pos:start="4111:36" pos:end="4111:44">(<argument pos:start="4111:37" pos:end="4111:43"><expr pos:start="4111:37" pos:end="4111:43"><name pos:start="4111:37" pos:end="4111:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4113:21" pos:end="4113:52"><expr pos:start="4113:21" pos:end="4113:51"><call pos:start="4113:21" pos:end="4113:51"><name pos:start="4113:21" pos:end="4113:33">gen_store_gpr</name><argument_list pos:start="4113:34" pos:end="4113:51">(<argument pos:start="4113:35" pos:end="4113:36"><expr pos:start="4113:35" pos:end="4113:36"><name pos:start="4113:35" pos:end="4113:36">dc</name></expr></argument>, <argument pos:start="4113:39" pos:end="4113:40"><expr pos:start="4113:39" pos:end="4113:40"><name pos:start="4113:39" pos:end="4113:40">rd</name></expr></argument>, <argument pos:start="4113:43" pos:end="4113:50"><expr pos:start="4113:43" pos:end="4113:50"><name pos:start="4113:43" pos:end="4113:50">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4115:21" pos:end="4115:26">break;</break>

                <case pos:start="4117:17" pos:end="4117:26">case <expr pos:start="4117:22" pos:end="4117:25"><literal type="number" pos:start="4117:22" pos:end="4117:25">0x3d</literal></expr>:</case>      <comment type="block" pos:start="4117:33" pos:end="4117:45">/* restore */</comment>

                    <expr_stmt pos:start="4119:21" pos:end="4119:35"><expr pos:start="4119:21" pos:end="4119:34"><call pos:start="4119:21" pos:end="4119:34"><name pos:start="4119:21" pos:end="4119:30">save_state</name><argument_list pos:start="4119:31" pos:end="4119:34">(<argument pos:start="4119:32" pos:end="4119:33"><expr pos:start="4119:32" pos:end="4119:33"><name pos:start="4119:32" pos:end="4119:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4121:21" pos:end="4121:48"><expr pos:start="4121:21" pos:end="4121:47"><call pos:start="4121:21" pos:end="4121:47"><name pos:start="4121:21" pos:end="4121:38">gen_helper_restore</name><argument_list pos:start="4121:39" pos:end="4121:47">(<argument pos:start="4121:40" pos:end="4121:46"><expr pos:start="4121:40" pos:end="4121:46"><name pos:start="4121:40" pos:end="4121:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4123:21" pos:end="4123:52"><expr pos:start="4123:21" pos:end="4123:51"><call pos:start="4123:21" pos:end="4123:51"><name pos:start="4123:21" pos:end="4123:33">gen_store_gpr</name><argument_list pos:start="4123:34" pos:end="4123:51">(<argument pos:start="4123:35" pos:end="4123:36"><expr pos:start="4123:35" pos:end="4123:36"><name pos:start="4123:35" pos:end="4123:36">dc</name></expr></argument>, <argument pos:start="4123:39" pos:end="4123:40"><expr pos:start="4123:39" pos:end="4123:40"><name pos:start="4123:39" pos:end="4123:40">rd</name></expr></argument>, <argument pos:start="4123:43" pos:end="4123:50"><expr pos:start="4123:43" pos:end="4123:50"><name pos:start="4123:43" pos:end="4123:50">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4125:21" pos:end="4128:0">break;</break>

<cpp:if pos:start="4127:1" pos:end="4127:57">#<cpp:directive pos:start="4127:2" pos:end="4127:3">if</cpp:directive> <expr pos:start="4127:5" pos:end="4127:57"><operator pos:start="4127:5" pos:end="4127:5">!</operator><call pos:start="4127:6" pos:end="4127:30"><name pos:start="4127:6" pos:end="4127:12">defined</name><argument_list pos:start="4127:13" pos:end="4127:30">(<argument pos:start="4127:14" pos:end="4127:29"><expr pos:start="4127:14" pos:end="4127:29"><name pos:start="4127:14" pos:end="4127:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4127:32" pos:end="4127:33">&amp;&amp;</operator> <call pos:start="4127:35" pos:end="4127:57"><name pos:start="4127:35" pos:end="4127:41">defined</name><argument_list pos:start="4127:42" pos:end="4127:57">(<argument pos:start="4127:43" pos:end="4127:56"><expr pos:start="4127:43" pos:end="4127:56"><name pos:start="4127:43" pos:end="4127:56">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="4129:17" pos:end="4129:26">case <expr pos:start="4129:22" pos:end="4129:25"><literal type="number" pos:start="4129:22" pos:end="4129:25">0x3e</literal></expr>:</case>      <comment type="block" pos:start="4129:33" pos:end="4129:51">/* V9 done/retry */</comment>

                    <block pos:start="4131:21" pos:end="4169:21">{<block_content pos:start="4133:25" pos:end="4167:25">

                        <switch pos:start="4133:25" pos:end="4167:25">switch <condition pos:start="4133:32" pos:end="4133:35">(<expr pos:start="4133:33" pos:end="4133:34"><name pos:start="4133:33" pos:end="4133:34">rd</name></expr>)</condition> <block pos:start="4133:37" pos:end="4167:25">{<block_content pos:start="4135:25" pos:end="4165:46">

                        <case pos:start="4135:25" pos:end="4135:31">case <expr pos:start="4135:30" pos:end="4135:30"><literal type="number" pos:start="4135:30" pos:end="4135:30">0</literal></expr>:</case>

                            <if_stmt pos:start="4137:29" pos:end="4139:47"><if pos:start="4137:29" pos:end="4139:47">if <condition pos:start="4137:32" pos:end="4137:48">(<expr pos:start="4137:33" pos:end="4137:47"><operator pos:start="4137:33" pos:end="4137:33">!</operator><call pos:start="4137:34" pos:end="4137:47"><name pos:start="4137:34" pos:end="4137:43">supervisor</name><argument_list pos:start="4137:44" pos:end="4137:47">(<argument pos:start="4137:45" pos:end="4137:46"><expr pos:start="4137:45" pos:end="4137:46"><name pos:start="4137:45" pos:end="4137:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4139:33" pos:end="4139:47"><block_content pos:start="4139:33" pos:end="4139:47">

                                <goto pos:start="4139:33" pos:end="4139:47">goto <name pos:start="4139:38" pos:end="4139:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="4141:29" pos:end="4141:49"><expr pos:start="4141:29" pos:end="4141:48"><name pos:start="4141:29" pos:end="4141:35"><name pos:start="4141:29" pos:end="4141:30">dc</name><operator pos:start="4141:31" pos:end="4141:32">-&gt;</operator><name pos:start="4141:33" pos:end="4141:35">npc</name></name> <operator pos:start="4141:37" pos:end="4141:37">=</operator> <name pos:start="4141:39" pos:end="4141:48">DYNAMIC_PC</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="4143:29" pos:end="4143:48"><expr pos:start="4143:29" pos:end="4143:47"><name pos:start="4143:29" pos:end="4143:34"><name pos:start="4143:29" pos:end="4143:30">dc</name><operator pos:start="4143:31" pos:end="4143:32">-&gt;</operator><name pos:start="4143:33" pos:end="4143:34">pc</name></name> <operator pos:start="4143:36" pos:end="4143:36">=</operator> <name pos:start="4143:38" pos:end="4143:47">DYNAMIC_PC</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="4145:29" pos:end="4145:53"><expr pos:start="4145:29" pos:end="4145:52"><call pos:start="4145:29" pos:end="4145:52"><name pos:start="4145:29" pos:end="4145:43">gen_helper_done</name><argument_list pos:start="4145:44" pos:end="4145:52">(<argument pos:start="4145:45" pos:end="4145:51"><expr pos:start="4145:45" pos:end="4145:51"><name pos:start="4145:45" pos:end="4145:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="4147:29" pos:end="4147:42">goto <name pos:start="4147:34" pos:end="4147:41">jmp_insn</name>;</goto>

                        <case pos:start="4149:25" pos:end="4149:31">case <expr pos:start="4149:30" pos:end="4149:30"><literal type="number" pos:start="4149:30" pos:end="4149:30">1</literal></expr>:</case>

                            <if_stmt pos:start="4151:29" pos:end="4153:47"><if pos:start="4151:29" pos:end="4153:47">if <condition pos:start="4151:32" pos:end="4151:48">(<expr pos:start="4151:33" pos:end="4151:47"><operator pos:start="4151:33" pos:end="4151:33">!</operator><call pos:start="4151:34" pos:end="4151:47"><name pos:start="4151:34" pos:end="4151:43">supervisor</name><argument_list pos:start="4151:44" pos:end="4151:47">(<argument pos:start="4151:45" pos:end="4151:46"><expr pos:start="4151:45" pos:end="4151:46"><name pos:start="4151:45" pos:end="4151:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4153:33" pos:end="4153:47"><block_content pos:start="4153:33" pos:end="4153:47">

                                <goto pos:start="4153:33" pos:end="4153:47">goto <name pos:start="4153:38" pos:end="4153:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="4155:29" pos:end="4155:49"><expr pos:start="4155:29" pos:end="4155:48"><name pos:start="4155:29" pos:end="4155:35"><name pos:start="4155:29" pos:end="4155:30">dc</name><operator pos:start="4155:31" pos:end="4155:32">-&gt;</operator><name pos:start="4155:33" pos:end="4155:35">npc</name></name> <operator pos:start="4155:37" pos:end="4155:37">=</operator> <name pos:start="4155:39" pos:end="4155:48">DYNAMIC_PC</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="4157:29" pos:end="4157:48"><expr pos:start="4157:29" pos:end="4157:47"><name pos:start="4157:29" pos:end="4157:34"><name pos:start="4157:29" pos:end="4157:30">dc</name><operator pos:start="4157:31" pos:end="4157:32">-&gt;</operator><name pos:start="4157:33" pos:end="4157:34">pc</name></name> <operator pos:start="4157:36" pos:end="4157:36">=</operator> <name pos:start="4157:38" pos:end="4157:47">DYNAMIC_PC</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="4159:29" pos:end="4159:54"><expr pos:start="4159:29" pos:end="4159:53"><call pos:start="4159:29" pos:end="4159:53"><name pos:start="4159:29" pos:end="4159:44">gen_helper_retry</name><argument_list pos:start="4159:45" pos:end="4159:53">(<argument pos:start="4159:46" pos:end="4159:52"><expr pos:start="4159:46" pos:end="4159:52"><name pos:start="4159:46" pos:end="4159:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="4161:29" pos:end="4161:42">goto <name pos:start="4161:34" pos:end="4161:41">jmp_insn</name>;</goto>

                        <default pos:start="4163:25" pos:end="4163:32">default:</default>

                            <goto pos:start="4165:29" pos:end="4165:46">goto <name pos:start="4165:34" pos:end="4165:45">illegal_insn</name>;</goto>

                        </block_content>}</block></switch>

                    </block_content>}</block>

                    <break pos:start="4171:21" pos:end="4174:0">break;</break>

<cpp:endif pos:start="4173:1" pos:end="4173:6">#<cpp:directive pos:start="4173:2" pos:end="4173:6">endif</cpp:directive></cpp:endif>

                <default pos:start="4175:17" pos:end="4175:24">default:</default>

                    <goto pos:start="4177:21" pos:end="4177:38">goto <name pos:start="4177:26" pos:end="4177:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="4183:13" pos:end="4183:18">break;</break>

        </block_content>}</block>

        <break pos:start="4187:9" pos:end="4187:14">break;</break>

    <case pos:start="4189:5" pos:end="4189:11">case <expr pos:start="4189:10" pos:end="4189:10"><literal type="number" pos:start="4189:10" pos:end="4189:10">3</literal></expr>:</case>                     <comment type="block" pos:start="4189:33" pos:end="4189:61">/* load/store instructions */</comment>

        <block pos:start="4191:9" pos:end="5207:9">{<block_content pos:start="4193:13" pos:end="5205:13">

            <decl_stmt pos:start="4193:13" pos:end="4193:54"><decl pos:start="4193:13" pos:end="4193:53"><type pos:start="4193:13" pos:end="4193:24"><name pos:start="4193:13" pos:end="4193:20">unsigned</name> <name pos:start="4193:22" pos:end="4193:24">int</name></type> <name pos:start="4193:26" pos:end="4193:28">xop</name> <init pos:start="4193:30" pos:end="4193:53">= <expr pos:start="4193:32" pos:end="4193:53"><call pos:start="4193:32" pos:end="4193:53"><name pos:start="4193:32" pos:end="4193:40">GET_FIELD</name><argument_list pos:start="4193:41" pos:end="4193:53">(<argument pos:start="4193:42" pos:end="4193:45"><expr pos:start="4193:42" pos:end="4193:45"><name pos:start="4193:42" pos:end="4193:45">insn</name></expr></argument>, <argument pos:start="4193:48" pos:end="4193:48"><expr pos:start="4193:48" pos:end="4193:48"><literal type="number" pos:start="4193:48" pos:end="4193:48">7</literal></expr></argument>, <argument pos:start="4193:51" pos:end="4193:52"><expr pos:start="4193:51" pos:end="4193:52"><literal type="number" pos:start="4193:51" pos:end="4193:52">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="4195:13" pos:end="4197:67">/* ??? gen_address_mask prevents us from using a source

               register directly.  Always generate a temporary.  */</comment>

            <decl_stmt pos:start="4199:13" pos:end="4199:44"><decl pos:start="4199:13" pos:end="4199:43"><type pos:start="4199:13" pos:end="4199:16"><name pos:start="4199:13" pos:end="4199:16">TCGv</name></type> <name pos:start="4199:18" pos:end="4199:25">cpu_addr</name> <init pos:start="4199:27" pos:end="4199:43">= <expr pos:start="4199:29" pos:end="4199:43"><call pos:start="4199:29" pos:end="4199:43"><name pos:start="4199:29" pos:end="4199:39">get_temp_tl</name><argument_list pos:start="4199:40" pos:end="4199:43">(<argument pos:start="4199:41" pos:end="4199:42"><expr pos:start="4199:41" pos:end="4199:42"><name pos:start="4199:41" pos:end="4199:42">dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="4203:13" pos:end="4203:57"><expr pos:start="4203:13" pos:end="4203:56"><call pos:start="4203:13" pos:end="4203:56"><name pos:start="4203:13" pos:end="4203:26">tcg_gen_mov_tl</name><argument_list pos:start="4203:27" pos:end="4203:56">(<argument pos:start="4203:28" pos:end="4203:35"><expr pos:start="4203:28" pos:end="4203:35"><name pos:start="4203:28" pos:end="4203:35">cpu_addr</name></expr></argument>, <argument pos:start="4203:38" pos:end="4203:55"><expr pos:start="4203:38" pos:end="4203:55"><call pos:start="4203:38" pos:end="4203:55"><name pos:start="4203:38" pos:end="4203:45">get_src1</name><argument_list pos:start="4203:46" pos:end="4203:55">(<argument pos:start="4203:47" pos:end="4203:48"><expr pos:start="4203:47" pos:end="4203:48"><name pos:start="4203:47" pos:end="4203:48">dc</name></expr></argument>, <argument pos:start="4203:51" pos:end="4203:54"><expr pos:start="4203:51" pos:end="4203:54"><name pos:start="4203:51" pos:end="4203:54">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4205:13" pos:end="4229:13"><if pos:start="4205:13" pos:end="4209:13">if <condition pos:start="4205:16" pos:end="4205:43">(<expr pos:start="4205:17" pos:end="4205:42"><name pos:start="4205:17" pos:end="4205:19">xop</name> <operator pos:start="4205:21" pos:end="4205:22">==</operator> <literal type="number" pos:start="4205:24" pos:end="4205:27">0x3c</literal> <operator pos:start="4205:29" pos:end="4205:30">||</operator> <name pos:start="4205:32" pos:end="4205:34">xop</name> <operator pos:start="4205:36" pos:end="4205:37">==</operator> <literal type="number" pos:start="4205:39" pos:end="4205:42">0x3e</literal></expr>)</condition> <block pos:start="4205:45" pos:end="4209:13">{<block_content>

                <comment type="block" pos:start="4207:17" pos:end="4207:47">/* V9 casa/casxa : no offset */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="4209:15" pos:end="4219:13">else if <condition pos:start="4209:23" pos:end="4209:30">(<expr pos:start="4209:24" pos:end="4209:29"><name pos:start="4209:24" pos:end="4209:29">IS_IMM</name></expr>)</condition> <block pos:start="4209:32" pos:end="4219:13">{<block_content pos:start="4211:17" pos:end="4217:17">     <comment type="block" pos:start="4209:38" pos:end="4209:52">/* immediate */</comment>

                <expr_stmt pos:start="4211:17" pos:end="4211:48"><expr pos:start="4211:17" pos:end="4211:47"><name pos:start="4211:17" pos:end="4211:20">simm</name> <operator pos:start="4211:22" pos:end="4211:22">=</operator> <call pos:start="4211:24" pos:end="4211:47"><name pos:start="4211:24" pos:end="4211:33">GET_FIELDs</name><argument_list pos:start="4211:34" pos:end="4211:47">(<argument pos:start="4211:35" pos:end="4211:38"><expr pos:start="4211:35" pos:end="4211:38"><name pos:start="4211:35" pos:end="4211:38">insn</name></expr></argument>, <argument pos:start="4211:41" pos:end="4211:42"><expr pos:start="4211:41" pos:end="4211:42"><literal type="number" pos:start="4211:41" pos:end="4211:42">19</literal></expr></argument>, <argument pos:start="4211:45" pos:end="4211:46"><expr pos:start="4211:45" pos:end="4211:46"><literal type="number" pos:start="4211:45" pos:end="4211:46">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="4213:17" pos:end="4217:17"><if pos:start="4213:17" pos:end="4217:17">if <condition pos:start="4213:20" pos:end="4213:30">(<expr pos:start="4213:21" pos:end="4213:29"><name pos:start="4213:21" pos:end="4213:24">simm</name> <operator pos:start="4213:26" pos:end="4213:27">!=</operator> <literal type="number" pos:start="4213:29" pos:end="4213:29">0</literal></expr>)</condition> <block pos:start="4213:32" pos:end="4217:17">{<block_content pos:start="4215:21" pos:end="4215:62">

                    <expr_stmt pos:start="4215:21" pos:end="4215:62"><expr pos:start="4215:21" pos:end="4215:61"><call pos:start="4215:21" pos:end="4215:61"><name pos:start="4215:21" pos:end="4215:35">tcg_gen_addi_tl</name><argument_list pos:start="4215:36" pos:end="4215:61">(<argument pos:start="4215:37" pos:end="4215:44"><expr pos:start="4215:37" pos:end="4215:44"><name pos:start="4215:37" pos:end="4215:44">cpu_addr</name></expr></argument>, <argument pos:start="4215:47" pos:end="4215:54"><expr pos:start="4215:47" pos:end="4215:54"><name pos:start="4215:47" pos:end="4215:54">cpu_addr</name></expr></argument>, <argument pos:start="4215:57" pos:end="4215:60"><expr pos:start="4215:57" pos:end="4215:60"><name pos:start="4215:57" pos:end="4215:60">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="4219:15" pos:end="4229:13">else <block pos:start="4219:20" pos:end="4229:13">{<block_content pos:start="4221:17" pos:end="4227:17">            <comment type="block" pos:start="4219:33" pos:end="4219:46">/* register */</comment>

                <expr_stmt pos:start="4221:17" pos:end="4221:46"><expr pos:start="4221:17" pos:end="4221:45"><name pos:start="4221:17" pos:end="4221:19">rs2</name> <operator pos:start="4221:21" pos:end="4221:21">=</operator> <call pos:start="4221:23" pos:end="4221:45"><name pos:start="4221:23" pos:end="4221:31">GET_FIELD</name><argument_list pos:start="4221:32" pos:end="4221:45">(<argument pos:start="4221:33" pos:end="4221:36"><expr pos:start="4221:33" pos:end="4221:36"><name pos:start="4221:33" pos:end="4221:36">insn</name></expr></argument>, <argument pos:start="4221:39" pos:end="4221:40"><expr pos:start="4221:39" pos:end="4221:40"><literal type="number" pos:start="4221:39" pos:end="4221:40">27</literal></expr></argument>, <argument pos:start="4221:43" pos:end="4221:44"><expr pos:start="4221:43" pos:end="4221:44"><literal type="number" pos:start="4221:43" pos:end="4221:44">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="4223:17" pos:end="4227:17"><if pos:start="4223:17" pos:end="4227:17">if <condition pos:start="4223:20" pos:end="4223:29">(<expr pos:start="4223:21" pos:end="4223:28"><name pos:start="4223:21" pos:end="4223:23">rs2</name> <operator pos:start="4223:25" pos:end="4223:26">!=</operator> <literal type="number" pos:start="4223:28" pos:end="4223:28">0</literal></expr>)</condition> <block pos:start="4223:31" pos:end="4227:17">{<block_content pos:start="4225:21" pos:end="4225:78">

                    <expr_stmt pos:start="4225:21" pos:end="4225:78"><expr pos:start="4225:21" pos:end="4225:77"><call pos:start="4225:21" pos:end="4225:77"><name pos:start="4225:21" pos:end="4225:34">tcg_gen_add_tl</name><argument_list pos:start="4225:35" pos:end="4225:77">(<argument pos:start="4225:36" pos:end="4225:43"><expr pos:start="4225:36" pos:end="4225:43"><name pos:start="4225:36" pos:end="4225:43">cpu_addr</name></expr></argument>, <argument pos:start="4225:46" pos:end="4225:53"><expr pos:start="4225:46" pos:end="4225:53"><name pos:start="4225:46" pos:end="4225:53">cpu_addr</name></expr></argument>, <argument pos:start="4225:56" pos:end="4225:76"><expr pos:start="4225:56" pos:end="4225:76"><call pos:start="4225:56" pos:end="4225:76"><name pos:start="4225:56" pos:end="4225:67">gen_load_gpr</name><argument_list pos:start="4225:68" pos:end="4225:76">(<argument pos:start="4225:69" pos:end="4225:70"><expr pos:start="4225:69" pos:end="4225:70"><name pos:start="4225:69" pos:end="4225:70">dc</name></expr></argument>, <argument pos:start="4225:73" pos:end="4225:75"><expr pos:start="4225:73" pos:end="4225:75"><name pos:start="4225:73" pos:end="4225:75">rs2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="4231:13" pos:end="5205:13"><if pos:start="4231:13" pos:end="4667:13">if <condition pos:start="4231:16" pos:end="4235:74">(<expr pos:start="4231:17" pos:end="4235:73"><name pos:start="4231:17" pos:end="4231:19">xop</name> <operator pos:start="4231:21" pos:end="4231:21">&lt;</operator> <literal type="number" pos:start="4231:23" pos:end="4231:23">4</literal> <operator pos:start="4231:25" pos:end="4231:26">||</operator> <operator pos:start="4231:28" pos:end="4231:28">(</operator><name pos:start="4231:29" pos:end="4231:31">xop</name> <operator pos:start="4231:33" pos:end="4231:33">&gt;</operator> <literal type="number" pos:start="4231:35" pos:end="4231:35">7</literal> <operator pos:start="4231:37" pos:end="4231:38">&amp;&amp;</operator> <name pos:start="4231:40" pos:end="4231:42">xop</name> <operator pos:start="4231:44" pos:end="4231:44">&lt;</operator> <literal type="number" pos:start="4231:46" pos:end="4231:49">0x14</literal> <operator pos:start="4231:51" pos:end="4231:52">&amp;&amp;</operator> <name pos:start="4231:54" pos:end="4231:56">xop</name> <operator pos:start="4231:58" pos:end="4231:59">!=</operator> <literal type="number" pos:start="4231:61" pos:end="4231:64">0x0e</literal><operator pos:start="4231:65" pos:end="4231:65">)</operator> <operator pos:start="4231:67" pos:end="4231:68">||</operator>

                <operator pos:start="4233:17" pos:end="4233:17">(</operator><name pos:start="4233:18" pos:end="4233:20">xop</name> <operator pos:start="4233:22" pos:end="4233:22">&gt;</operator> <literal type="number" pos:start="4233:24" pos:end="4233:27">0x17</literal> <operator pos:start="4233:29" pos:end="4233:30">&amp;&amp;</operator> <name pos:start="4233:32" pos:end="4233:34">xop</name> <operator pos:start="4233:36" pos:end="4233:37">&lt;=</operator> <literal type="number" pos:start="4233:39" pos:end="4233:42">0x1d</literal> <operator pos:start="4233:44" pos:end="4233:44">)</operator> <operator pos:start="4233:46" pos:end="4233:47">||</operator>

                <operator pos:start="4235:17" pos:end="4235:17">(</operator><name pos:start="4235:18" pos:end="4235:20">xop</name> <operator pos:start="4235:22" pos:end="4235:22">&gt;</operator> <literal type="number" pos:start="4235:24" pos:end="4235:27">0x2c</literal> <operator pos:start="4235:29" pos:end="4235:30">&amp;&amp;</operator> <name pos:start="4235:32" pos:end="4235:34">xop</name> <operator pos:start="4235:36" pos:end="4235:37">&lt;=</operator> <literal type="number" pos:start="4235:39" pos:end="4235:42">0x33</literal><operator pos:start="4235:43" pos:end="4235:43">)</operator> <operator pos:start="4235:45" pos:end="4235:46">||</operator> <name pos:start="4235:48" pos:end="4235:50">xop</name> <operator pos:start="4235:52" pos:end="4235:53">==</operator> <literal type="number" pos:start="4235:55" pos:end="4235:58">0x1f</literal> <operator pos:start="4235:60" pos:end="4235:61">||</operator> <name pos:start="4235:63" pos:end="4235:65">xop</name> <operator pos:start="4235:67" pos:end="4235:68">==</operator> <literal type="number" pos:start="4235:70" pos:end="4235:73">0x3d</literal></expr>)</condition> <block pos:start="4235:76" pos:end="4667:13">{<block_content pos:start="4237:17" pos:end="4666:0">

                <decl_stmt pos:start="4237:17" pos:end="4237:52"><decl pos:start="4237:17" pos:end="4237:51"><type pos:start="4237:17" pos:end="4237:20"><name pos:start="4237:17" pos:end="4237:20">TCGv</name></type> <name pos:start="4237:22" pos:end="4237:28">cpu_val</name> <init pos:start="4237:30" pos:end="4237:51">= <expr pos:start="4237:32" pos:end="4237:51"><call pos:start="4237:32" pos:end="4237:51"><name pos:start="4237:32" pos:end="4237:43">gen_dest_gpr</name><argument_list pos:start="4237:44" pos:end="4237:51">(<argument pos:start="4237:45" pos:end="4237:46"><expr pos:start="4237:45" pos:end="4237:46"><name pos:start="4237:45" pos:end="4237:46">dc</name></expr></argument>, <argument pos:start="4237:49" pos:end="4237:50"><expr pos:start="4237:49" pos:end="4237:50"><name pos:start="4237:49" pos:end="4237:50">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <switch pos:start="4241:17" pos:end="4657:17">switch <condition pos:start="4241:24" pos:end="4241:28">(<expr pos:start="4241:25" pos:end="4241:27"><name pos:start="4241:25" pos:end="4241:27">xop</name></expr>)</condition> <block pos:start="4241:30" pos:end="4657:17">{<block_content pos:start="4243:17" pos:end="4655:38">

                <case pos:start="4243:17" pos:end="4243:25">case <expr pos:start="4243:22" pos:end="4243:24"><literal type="number" pos:start="4243:22" pos:end="4243:24">0x0</literal></expr>:</case>       <comment type="block" pos:start="4243:33" pos:end="4243:69">/* ld, V9 lduw, load unsigned word */</comment>

                    <expr_stmt pos:start="4245:21" pos:end="4245:51"><expr pos:start="4245:21" pos:end="4245:50"><call pos:start="4245:21" pos:end="4245:50"><name pos:start="4245:21" pos:end="4245:36">gen_address_mask</name><argument_list pos:start="4245:37" pos:end="4245:50">(<argument pos:start="4245:38" pos:end="4245:39"><expr pos:start="4245:38" pos:end="4245:39"><name pos:start="4245:38" pos:end="4245:39">dc</name></expr></argument>, <argument pos:start="4245:42" pos:end="4245:49"><expr pos:start="4245:42" pos:end="4245:49"><name pos:start="4245:42" pos:end="4245:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4247:21" pos:end="4247:71"><expr pos:start="4247:21" pos:end="4247:70"><call pos:start="4247:21" pos:end="4247:70"><name pos:start="4247:21" pos:end="4247:38">tcg_gen_qemu_ld32u</name><argument_list pos:start="4247:39" pos:end="4247:70">(<argument pos:start="4247:40" pos:end="4247:46"><expr pos:start="4247:40" pos:end="4247:46"><name pos:start="4247:40" pos:end="4247:46">cpu_val</name></expr></argument>, <argument pos:start="4247:49" pos:end="4247:56"><expr pos:start="4247:49" pos:end="4247:56"><name pos:start="4247:49" pos:end="4247:56">cpu_addr</name></expr></argument>, <argument pos:start="4247:59" pos:end="4247:69"><expr pos:start="4247:59" pos:end="4247:69"><name pos:start="4247:59" pos:end="4247:69"><name pos:start="4247:59" pos:end="4247:60">dc</name><operator pos:start="4247:61" pos:end="4247:62">-&gt;</operator><name pos:start="4247:63" pos:end="4247:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4249:21" pos:end="4249:26">break;</break>

                <case pos:start="4251:17" pos:end="4251:25">case <expr pos:start="4251:22" pos:end="4251:24"><literal type="number" pos:start="4251:22" pos:end="4251:24">0x1</literal></expr>:</case>       <comment type="block" pos:start="4251:33" pos:end="4251:62">/* ldub, load unsigned byte */</comment>

                    <expr_stmt pos:start="4253:21" pos:end="4253:51"><expr pos:start="4253:21" pos:end="4253:50"><call pos:start="4253:21" pos:end="4253:50"><name pos:start="4253:21" pos:end="4253:36">gen_address_mask</name><argument_list pos:start="4253:37" pos:end="4253:50">(<argument pos:start="4253:38" pos:end="4253:39"><expr pos:start="4253:38" pos:end="4253:39"><name pos:start="4253:38" pos:end="4253:39">dc</name></expr></argument>, <argument pos:start="4253:42" pos:end="4253:49"><expr pos:start="4253:42" pos:end="4253:49"><name pos:start="4253:42" pos:end="4253:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4255:21" pos:end="4255:70"><expr pos:start="4255:21" pos:end="4255:69"><call pos:start="4255:21" pos:end="4255:69"><name pos:start="4255:21" pos:end="4255:37">tcg_gen_qemu_ld8u</name><argument_list pos:start="4255:38" pos:end="4255:69">(<argument pos:start="4255:39" pos:end="4255:45"><expr pos:start="4255:39" pos:end="4255:45"><name pos:start="4255:39" pos:end="4255:45">cpu_val</name></expr></argument>, <argument pos:start="4255:48" pos:end="4255:55"><expr pos:start="4255:48" pos:end="4255:55"><name pos:start="4255:48" pos:end="4255:55">cpu_addr</name></expr></argument>, <argument pos:start="4255:58" pos:end="4255:68"><expr pos:start="4255:58" pos:end="4255:68"><name pos:start="4255:58" pos:end="4255:68"><name pos:start="4255:58" pos:end="4255:59">dc</name><operator pos:start="4255:60" pos:end="4255:61">-&gt;</operator><name pos:start="4255:62" pos:end="4255:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4257:21" pos:end="4257:26">break;</break>

                <case pos:start="4259:17" pos:end="4259:25">case <expr pos:start="4259:22" pos:end="4259:24"><literal type="number" pos:start="4259:22" pos:end="4259:24">0x2</literal></expr>:</case>       <comment type="block" pos:start="4259:33" pos:end="4259:66">/* lduh, load unsigned halfword */</comment>

                    <expr_stmt pos:start="4261:21" pos:end="4261:51"><expr pos:start="4261:21" pos:end="4261:50"><call pos:start="4261:21" pos:end="4261:50"><name pos:start="4261:21" pos:end="4261:36">gen_address_mask</name><argument_list pos:start="4261:37" pos:end="4261:50">(<argument pos:start="4261:38" pos:end="4261:39"><expr pos:start="4261:38" pos:end="4261:39"><name pos:start="4261:38" pos:end="4261:39">dc</name></expr></argument>, <argument pos:start="4261:42" pos:end="4261:49"><expr pos:start="4261:42" pos:end="4261:49"><name pos:start="4261:42" pos:end="4261:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4263:21" pos:end="4263:71"><expr pos:start="4263:21" pos:end="4263:70"><call pos:start="4263:21" pos:end="4263:70"><name pos:start="4263:21" pos:end="4263:38">tcg_gen_qemu_ld16u</name><argument_list pos:start="4263:39" pos:end="4263:70">(<argument pos:start="4263:40" pos:end="4263:46"><expr pos:start="4263:40" pos:end="4263:46"><name pos:start="4263:40" pos:end="4263:46">cpu_val</name></expr></argument>, <argument pos:start="4263:49" pos:end="4263:56"><expr pos:start="4263:49" pos:end="4263:56"><name pos:start="4263:49" pos:end="4263:56">cpu_addr</name></expr></argument>, <argument pos:start="4263:59" pos:end="4263:69"><expr pos:start="4263:59" pos:end="4263:69"><name pos:start="4263:59" pos:end="4263:69"><name pos:start="4263:59" pos:end="4263:60">dc</name><operator pos:start="4263:61" pos:end="4263:62">-&gt;</operator><name pos:start="4263:63" pos:end="4263:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4265:21" pos:end="4265:26">break;</break>

                <case pos:start="4267:17" pos:end="4267:25">case <expr pos:start="4267:22" pos:end="4267:24"><literal type="number" pos:start="4267:22" pos:end="4267:24">0x3</literal></expr>:</case>       <comment type="block" pos:start="4267:33" pos:end="4267:59">/* ldd, load double word */</comment>

                    <if_stmt pos:start="4269:21" pos:end="4311:21"><if pos:start="4269:21" pos:end="4271:42">if <condition pos:start="4269:24" pos:end="4269:31">(<expr pos:start="4269:25" pos:end="4269:30"><name pos:start="4269:25" pos:end="4269:26">rd</name> <operator pos:start="4269:28" pos:end="4269:28">&amp;</operator> <literal type="number" pos:start="4269:30" pos:end="4269:30">1</literal></expr>)</condition><block type="pseudo" pos:start="4271:25" pos:end="4271:42"><block_content pos:start="4271:25" pos:end="4271:42">

                        <goto pos:start="4271:25" pos:end="4271:42">goto <name pos:start="4271:30" pos:end="4271:41">illegal_insn</name>;</goto></block_content></block></if>

                    <else pos:start="4273:21" pos:end="4311:21">else <block pos:start="4273:26" pos:end="4311:21">{<block_content pos:start="4275:25" pos:end="4309:73">

                        <decl_stmt pos:start="4275:25" pos:end="4275:41"><decl pos:start="4275:25" pos:end="4275:40"><type pos:start="4275:25" pos:end="4275:32"><name pos:start="4275:25" pos:end="4275:32">TCGv_i32</name></type> <name pos:start="4275:34" pos:end="4275:40">r_const</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="4277:25" pos:end="4277:37"><decl pos:start="4277:25" pos:end="4277:36"><type pos:start="4277:25" pos:end="4277:32"><name pos:start="4277:25" pos:end="4277:32">TCGv_i64</name></type> <name pos:start="4277:34" pos:end="4277:36">t64</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4281:25" pos:end="4281:39"><expr pos:start="4281:25" pos:end="4281:38"><call pos:start="4281:25" pos:end="4281:38"><name pos:start="4281:25" pos:end="4281:34">save_state</name><argument_list pos:start="4281:35" pos:end="4281:38">(<argument pos:start="4281:36" pos:end="4281:37"><expr pos:start="4281:36" pos:end="4281:37"><name pos:start="4281:36" pos:end="4281:37">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4283:25" pos:end="4283:51"><expr pos:start="4283:25" pos:end="4283:50"><name pos:start="4283:25" pos:end="4283:31">r_const</name> <operator pos:start="4283:33" pos:end="4283:33">=</operator> <call pos:start="4283:35" pos:end="4283:50"><name pos:start="4283:35" pos:end="4283:47">tcg_const_i32</name><argument_list pos:start="4283:48" pos:end="4283:50">(<argument pos:start="4283:49" pos:end="4283:49"><expr pos:start="4283:49" pos:end="4283:49"><literal type="number" pos:start="4283:49" pos:end="4283:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="4285:25" pos:end="4285:56">/* XXX remove alignment check */</comment>

                        <expr_stmt pos:start="4287:25" pos:end="4287:75"><expr pos:start="4287:25" pos:end="4287:74"><call pos:start="4287:25" pos:end="4287:74"><name pos:start="4287:25" pos:end="4287:46">gen_helper_check_align</name><argument_list pos:start="4287:47" pos:end="4287:74">(<argument pos:start="4287:48" pos:end="4287:54"><expr pos:start="4287:48" pos:end="4287:54"><name pos:start="4287:48" pos:end="4287:54">cpu_env</name></expr></argument>, <argument pos:start="4287:57" pos:end="4287:64"><expr pos:start="4287:57" pos:end="4287:64"><name pos:start="4287:57" pos:end="4287:64">cpu_addr</name></expr></argument>, <argument pos:start="4287:67" pos:end="4287:73"><expr pos:start="4287:67" pos:end="4287:73"><name pos:start="4287:67" pos:end="4287:73">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4289:25" pos:end="4289:51"><expr pos:start="4289:25" pos:end="4289:50"><call pos:start="4289:25" pos:end="4289:50"><name pos:start="4289:25" pos:end="4289:41">tcg_temp_free_i32</name><argument_list pos:start="4289:42" pos:end="4289:50">(<argument pos:start="4289:43" pos:end="4289:49"><expr pos:start="4289:43" pos:end="4289:49"><name pos:start="4289:43" pos:end="4289:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4291:25" pos:end="4291:55"><expr pos:start="4291:25" pos:end="4291:54"><call pos:start="4291:25" pos:end="4291:54"><name pos:start="4291:25" pos:end="4291:40">gen_address_mask</name><argument_list pos:start="4291:41" pos:end="4291:54">(<argument pos:start="4291:42" pos:end="4291:43"><expr pos:start="4291:42" pos:end="4291:43"><name pos:start="4291:42" pos:end="4291:43">dc</name></expr></argument>, <argument pos:start="4291:46" pos:end="4291:53"><expr pos:start="4291:46" pos:end="4291:53"><name pos:start="4291:46" pos:end="4291:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4293:25" pos:end="4293:49"><expr pos:start="4293:25" pos:end="4293:48"><name pos:start="4293:25" pos:end="4293:27">t64</name> <operator pos:start="4293:29" pos:end="4293:29">=</operator> <call pos:start="4293:31" pos:end="4293:48"><name pos:start="4293:31" pos:end="4293:46">tcg_temp_new_i64</name><argument_list pos:start="4293:47" pos:end="4293:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4295:25" pos:end="4295:70"><expr pos:start="4295:25" pos:end="4295:69"><call pos:start="4295:25" pos:end="4295:69"><name pos:start="4295:25" pos:end="4295:41">tcg_gen_qemu_ld64</name><argument_list pos:start="4295:42" pos:end="4295:69">(<argument pos:start="4295:43" pos:end="4295:45"><expr pos:start="4295:43" pos:end="4295:45"><name pos:start="4295:43" pos:end="4295:45">t64</name></expr></argument>, <argument pos:start="4295:48" pos:end="4295:55"><expr pos:start="4295:48" pos:end="4295:55"><name pos:start="4295:48" pos:end="4295:55">cpu_addr</name></expr></argument>, <argument pos:start="4295:58" pos:end="4295:68"><expr pos:start="4295:58" pos:end="4295:68"><name pos:start="4295:58" pos:end="4295:68"><name pos:start="4295:58" pos:end="4295:59">dc</name><operator pos:start="4295:60" pos:end="4295:61">-&gt;</operator><name pos:start="4295:62" pos:end="4295:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4297:25" pos:end="4297:60"><expr pos:start="4297:25" pos:end="4297:59"><call pos:start="4297:25" pos:end="4297:59"><name pos:start="4297:25" pos:end="4297:44">tcg_gen_trunc_i64_tl</name><argument_list pos:start="4297:45" pos:end="4297:59">(<argument pos:start="4297:46" pos:end="4297:53"><expr pos:start="4297:46" pos:end="4297:53"><name pos:start="4297:46" pos:end="4297:53">cpu_tmp0</name></expr></argument>, <argument pos:start="4297:56" pos:end="4297:58"><expr pos:start="4297:56" pos:end="4297:58"><name pos:start="4297:56" pos:end="4297:58">t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4299:25" pos:end="4299:75"><expr pos:start="4299:25" pos:end="4299:74"><call pos:start="4299:25" pos:end="4299:74"><name pos:start="4299:25" pos:end="4299:39">tcg_gen_andi_tl</name><argument_list pos:start="4299:40" pos:end="4299:74">(<argument pos:start="4299:41" pos:end="4299:48"><expr pos:start="4299:41" pos:end="4299:48"><name pos:start="4299:41" pos:end="4299:48">cpu_tmp0</name></expr></argument>, <argument pos:start="4299:51" pos:end="4299:58"><expr pos:start="4299:51" pos:end="4299:58"><name pos:start="4299:51" pos:end="4299:58">cpu_tmp0</name></expr></argument>, <argument pos:start="4299:61" pos:end="4299:73"><expr pos:start="4299:61" pos:end="4299:73"><literal type="number" pos:start="4299:61" pos:end="4299:73">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4301:25" pos:end="4301:60"><expr pos:start="4301:25" pos:end="4301:59"><call pos:start="4301:25" pos:end="4301:59"><name pos:start="4301:25" pos:end="4301:37">gen_store_gpr</name><argument_list pos:start="4301:38" pos:end="4301:59">(<argument pos:start="4301:39" pos:end="4301:40"><expr pos:start="4301:39" pos:end="4301:40"><name pos:start="4301:39" pos:end="4301:40">dc</name></expr></argument>, <argument pos:start="4301:43" pos:end="4301:48"><expr pos:start="4301:43" pos:end="4301:48"><name pos:start="4301:43" pos:end="4301:44">rd</name> <operator pos:start="4301:46" pos:end="4301:46">+</operator> <literal type="number" pos:start="4301:48" pos:end="4301:48">1</literal></expr></argument>, <argument pos:start="4301:51" pos:end="4301:58"><expr pos:start="4301:51" pos:end="4301:58"><name pos:start="4301:51" pos:end="4301:58">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4303:25" pos:end="4303:55"><expr pos:start="4303:25" pos:end="4303:54"><call pos:start="4303:25" pos:end="4303:54"><name pos:start="4303:25" pos:end="4303:40">tcg_gen_shri_i64</name><argument_list pos:start="4303:41" pos:end="4303:54">(<argument pos:start="4303:42" pos:end="4303:44"><expr pos:start="4303:42" pos:end="4303:44"><name pos:start="4303:42" pos:end="4303:44">t64</name></expr></argument>, <argument pos:start="4303:47" pos:end="4303:49"><expr pos:start="4303:47" pos:end="4303:49"><name pos:start="4303:47" pos:end="4303:49">t64</name></expr></argument>, <argument pos:start="4303:52" pos:end="4303:53"><expr pos:start="4303:52" pos:end="4303:53"><literal type="number" pos:start="4303:52" pos:end="4303:53">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4305:25" pos:end="4305:59"><expr pos:start="4305:25" pos:end="4305:58"><call pos:start="4305:25" pos:end="4305:58"><name pos:start="4305:25" pos:end="4305:44">tcg_gen_trunc_i64_tl</name><argument_list pos:start="4305:45" pos:end="4305:58">(<argument pos:start="4305:46" pos:end="4305:52"><expr pos:start="4305:46" pos:end="4305:52"><name pos:start="4305:46" pos:end="4305:52">cpu_val</name></expr></argument>, <argument pos:start="4305:55" pos:end="4305:57"><expr pos:start="4305:55" pos:end="4305:57"><name pos:start="4305:55" pos:end="4305:57">t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4307:25" pos:end="4307:47"><expr pos:start="4307:25" pos:end="4307:46"><call pos:start="4307:25" pos:end="4307:46"><name pos:start="4307:25" pos:end="4307:41">tcg_temp_free_i64</name><argument_list pos:start="4307:42" pos:end="4307:46">(<argument pos:start="4307:43" pos:end="4307:45"><expr pos:start="4307:43" pos:end="4307:45"><name pos:start="4307:43" pos:end="4307:45">t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4309:25" pos:end="4309:73"><expr pos:start="4309:25" pos:end="4309:72"><call pos:start="4309:25" pos:end="4309:72"><name pos:start="4309:25" pos:end="4309:39">tcg_gen_andi_tl</name><argument_list pos:start="4309:40" pos:end="4309:72">(<argument pos:start="4309:41" pos:end="4309:47"><expr pos:start="4309:41" pos:end="4309:47"><name pos:start="4309:41" pos:end="4309:47">cpu_val</name></expr></argument>, <argument pos:start="4309:50" pos:end="4309:56"><expr pos:start="4309:50" pos:end="4309:56"><name pos:start="4309:50" pos:end="4309:56">cpu_val</name></expr></argument>, <argument pos:start="4309:59" pos:end="4309:71"><expr pos:start="4309:59" pos:end="4309:71"><literal type="number" pos:start="4309:59" pos:end="4309:71">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="4313:21" pos:end="4313:26">break;</break>

                <case pos:start="4315:17" pos:end="4315:25">case <expr pos:start="4315:22" pos:end="4315:24"><literal type="number" pos:start="4315:22" pos:end="4315:24">0x9</literal></expr>:</case>       <comment type="block" pos:start="4315:33" pos:end="4315:60">/* ldsb, load signed byte */</comment>

                    <expr_stmt pos:start="4317:21" pos:end="4317:51"><expr pos:start="4317:21" pos:end="4317:50"><call pos:start="4317:21" pos:end="4317:50"><name pos:start="4317:21" pos:end="4317:36">gen_address_mask</name><argument_list pos:start="4317:37" pos:end="4317:50">(<argument pos:start="4317:38" pos:end="4317:39"><expr pos:start="4317:38" pos:end="4317:39"><name pos:start="4317:38" pos:end="4317:39">dc</name></expr></argument>, <argument pos:start="4317:42" pos:end="4317:49"><expr pos:start="4317:42" pos:end="4317:49"><name pos:start="4317:42" pos:end="4317:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4319:21" pos:end="4319:70"><expr pos:start="4319:21" pos:end="4319:69"><call pos:start="4319:21" pos:end="4319:69"><name pos:start="4319:21" pos:end="4319:37">tcg_gen_qemu_ld8s</name><argument_list pos:start="4319:38" pos:end="4319:69">(<argument pos:start="4319:39" pos:end="4319:45"><expr pos:start="4319:39" pos:end="4319:45"><name pos:start="4319:39" pos:end="4319:45">cpu_val</name></expr></argument>, <argument pos:start="4319:48" pos:end="4319:55"><expr pos:start="4319:48" pos:end="4319:55"><name pos:start="4319:48" pos:end="4319:55">cpu_addr</name></expr></argument>, <argument pos:start="4319:58" pos:end="4319:68"><expr pos:start="4319:58" pos:end="4319:68"><name pos:start="4319:58" pos:end="4319:68"><name pos:start="4319:58" pos:end="4319:59">dc</name><operator pos:start="4319:60" pos:end="4319:61">-&gt;</operator><name pos:start="4319:62" pos:end="4319:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4321:21" pos:end="4321:26">break;</break>

                <case pos:start="4323:17" pos:end="4323:25">case <expr pos:start="4323:22" pos:end="4323:24"><literal type="number" pos:start="4323:22" pos:end="4323:24">0xa</literal></expr>:</case>       <comment type="block" pos:start="4323:33" pos:end="4323:64">/* ldsh, load signed halfword */</comment>

                    <expr_stmt pos:start="4325:21" pos:end="4325:51"><expr pos:start="4325:21" pos:end="4325:50"><call pos:start="4325:21" pos:end="4325:50"><name pos:start="4325:21" pos:end="4325:36">gen_address_mask</name><argument_list pos:start="4325:37" pos:end="4325:50">(<argument pos:start="4325:38" pos:end="4325:39"><expr pos:start="4325:38" pos:end="4325:39"><name pos:start="4325:38" pos:end="4325:39">dc</name></expr></argument>, <argument pos:start="4325:42" pos:end="4325:49"><expr pos:start="4325:42" pos:end="4325:49"><name pos:start="4325:42" pos:end="4325:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4327:21" pos:end="4327:71"><expr pos:start="4327:21" pos:end="4327:70"><call pos:start="4327:21" pos:end="4327:70"><name pos:start="4327:21" pos:end="4327:38">tcg_gen_qemu_ld16s</name><argument_list pos:start="4327:39" pos:end="4327:70">(<argument pos:start="4327:40" pos:end="4327:46"><expr pos:start="4327:40" pos:end="4327:46"><name pos:start="4327:40" pos:end="4327:46">cpu_val</name></expr></argument>, <argument pos:start="4327:49" pos:end="4327:56"><expr pos:start="4327:49" pos:end="4327:56"><name pos:start="4327:49" pos:end="4327:56">cpu_addr</name></expr></argument>, <argument pos:start="4327:59" pos:end="4327:69"><expr pos:start="4327:59" pos:end="4327:69"><name pos:start="4327:59" pos:end="4327:69"><name pos:start="4327:59" pos:end="4327:60">dc</name><operator pos:start="4327:61" pos:end="4327:62">-&gt;</operator><name pos:start="4327:63" pos:end="4327:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4329:21" pos:end="4329:26">break;</break>

                <case pos:start="4331:17" pos:end="4331:25">case <expr pos:start="4331:22" pos:end="4331:24"><literal type="number" pos:start="4331:22" pos:end="4331:24">0xd</literal></expr>:</case>       <comment type="block" pos:start="4331:33" pos:end="4331:73">/* ldstub -- XXX: should be atomically */</comment>

                    <block pos:start="4333:21" pos:end="4349:21">{<block_content pos:start="4335:25" pos:end="4347:47">

                        <decl_stmt pos:start="4335:25" pos:end="4335:37"><decl pos:start="4335:25" pos:end="4335:36"><type pos:start="4335:25" pos:end="4335:28"><name pos:start="4335:25" pos:end="4335:28">TCGv</name></type> <name pos:start="4335:30" pos:end="4335:36">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4339:25" pos:end="4339:55"><expr pos:start="4339:25" pos:end="4339:54"><call pos:start="4339:25" pos:end="4339:54"><name pos:start="4339:25" pos:end="4339:40">gen_address_mask</name><argument_list pos:start="4339:41" pos:end="4339:54">(<argument pos:start="4339:42" pos:end="4339:43"><expr pos:start="4339:42" pos:end="4339:43"><name pos:start="4339:42" pos:end="4339:43">dc</name></expr></argument>, <argument pos:start="4339:46" pos:end="4339:53"><expr pos:start="4339:46" pos:end="4339:53"><name pos:start="4339:46" pos:end="4339:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4341:25" pos:end="4341:74"><expr pos:start="4341:25" pos:end="4341:73"><call pos:start="4341:25" pos:end="4341:73"><name pos:start="4341:25" pos:end="4341:41">tcg_gen_qemu_ld8s</name><argument_list pos:start="4341:42" pos:end="4341:73">(<argument pos:start="4341:43" pos:end="4341:49"><expr pos:start="4341:43" pos:end="4341:49"><name pos:start="4341:43" pos:end="4341:49">cpu_val</name></expr></argument>, <argument pos:start="4341:52" pos:end="4341:59"><expr pos:start="4341:52" pos:end="4341:59"><name pos:start="4341:52" pos:end="4341:59">cpu_addr</name></expr></argument>, <argument pos:start="4341:62" pos:end="4341:72"><expr pos:start="4341:62" pos:end="4341:72"><name pos:start="4341:62" pos:end="4341:72"><name pos:start="4341:62" pos:end="4341:63">dc</name><operator pos:start="4341:64" pos:end="4341:65">-&gt;</operator><name pos:start="4341:66" pos:end="4341:72">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4343:25" pos:end="4343:53"><expr pos:start="4343:25" pos:end="4343:52"><name pos:start="4343:25" pos:end="4343:31">r_const</name> <operator pos:start="4343:33" pos:end="4343:33">=</operator> <call pos:start="4343:35" pos:end="4343:52"><name pos:start="4343:35" pos:end="4343:46">tcg_const_tl</name><argument_list pos:start="4343:47" pos:end="4343:52">(<argument pos:start="4343:48" pos:end="4343:51"><expr pos:start="4343:48" pos:end="4343:51"><literal type="number" pos:start="4343:48" pos:end="4343:51">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4345:25" pos:end="4345:73"><expr pos:start="4345:25" pos:end="4345:72"><call pos:start="4345:25" pos:end="4345:72"><name pos:start="4345:25" pos:end="4345:40">tcg_gen_qemu_st8</name><argument_list pos:start="4345:41" pos:end="4345:72">(<argument pos:start="4345:42" pos:end="4345:48"><expr pos:start="4345:42" pos:end="4345:48"><name pos:start="4345:42" pos:end="4345:48">r_const</name></expr></argument>, <argument pos:start="4345:51" pos:end="4345:58"><expr pos:start="4345:51" pos:end="4345:58"><name pos:start="4345:51" pos:end="4345:58">cpu_addr</name></expr></argument>, <argument pos:start="4345:61" pos:end="4345:71"><expr pos:start="4345:61" pos:end="4345:71"><name pos:start="4345:61" pos:end="4345:71"><name pos:start="4345:61" pos:end="4345:62">dc</name><operator pos:start="4345:63" pos:end="4345:64">-&gt;</operator><name pos:start="4345:65" pos:end="4345:71">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4347:25" pos:end="4347:47"><expr pos:start="4347:25" pos:end="4347:46"><call pos:start="4347:25" pos:end="4347:46"><name pos:start="4347:25" pos:end="4347:37">tcg_temp_free</name><argument_list pos:start="4347:38" pos:end="4347:46">(<argument pos:start="4347:39" pos:end="4347:45"><expr pos:start="4347:39" pos:end="4347:45"><name pos:start="4347:39" pos:end="4347:45">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="4351:21" pos:end="4351:26">break;</break>

                <case pos:start="4353:17" pos:end="4353:26">case <expr pos:start="4353:22" pos:end="4353:25"><literal type="number" pos:start="4353:22" pos:end="4353:25">0x0f</literal></expr>:</case>      <comment type="block" pos:start="4353:33" pos:end="4355:48">/* swap, swap register with memory. Also

                                   atomically */</comment>

                    <expr_stmt pos:start="4357:21" pos:end="4357:47"><expr pos:start="4357:21" pos:end="4357:46"><call pos:start="4357:21" pos:end="4357:46"><name pos:start="4357:21" pos:end="4357:36">CHECK_IU_FEATURE</name><argument_list pos:start="4357:37" pos:end="4357:46">(<argument pos:start="4357:38" pos:end="4357:39"><expr pos:start="4357:38" pos:end="4357:39"><name pos:start="4357:38" pos:end="4357:39">dc</name></expr></argument>, <argument pos:start="4357:42" pos:end="4357:45"><expr pos:start="4357:42" pos:end="4357:45"><name pos:start="4357:42" pos:end="4357:45">SWAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4359:21" pos:end="4359:52"><expr pos:start="4359:21" pos:end="4359:51"><name pos:start="4359:21" pos:end="4359:28">cpu_src1</name> <operator pos:start="4359:30" pos:end="4359:30">=</operator> <call pos:start="4359:32" pos:end="4359:51"><name pos:start="4359:32" pos:end="4359:43">gen_load_gpr</name><argument_list pos:start="4359:44" pos:end="4359:51">(<argument pos:start="4359:45" pos:end="4359:46"><expr pos:start="4359:45" pos:end="4359:46"><name pos:start="4359:45" pos:end="4359:46">dc</name></expr></argument>, <argument pos:start="4359:49" pos:end="4359:50"><expr pos:start="4359:49" pos:end="4359:50"><name pos:start="4359:49" pos:end="4359:50">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4361:21" pos:end="4361:51"><expr pos:start="4361:21" pos:end="4361:50"><call pos:start="4361:21" pos:end="4361:50"><name pos:start="4361:21" pos:end="4361:36">gen_address_mask</name><argument_list pos:start="4361:37" pos:end="4361:50">(<argument pos:start="4361:38" pos:end="4361:39"><expr pos:start="4361:38" pos:end="4361:39"><name pos:start="4361:38" pos:end="4361:39">dc</name></expr></argument>, <argument pos:start="4361:42" pos:end="4361:49"><expr pos:start="4361:42" pos:end="4361:49"><name pos:start="4361:42" pos:end="4361:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4363:21" pos:end="4363:72"><expr pos:start="4363:21" pos:end="4363:71"><call pos:start="4363:21" pos:end="4363:71"><name pos:start="4363:21" pos:end="4363:38">tcg_gen_qemu_ld32u</name><argument_list pos:start="4363:39" pos:end="4363:71">(<argument pos:start="4363:40" pos:end="4363:47"><expr pos:start="4363:40" pos:end="4363:47"><name pos:start="4363:40" pos:end="4363:47">cpu_tmp0</name></expr></argument>, <argument pos:start="4363:50" pos:end="4363:57"><expr pos:start="4363:50" pos:end="4363:57"><name pos:start="4363:50" pos:end="4363:57">cpu_addr</name></expr></argument>, <argument pos:start="4363:60" pos:end="4363:70"><expr pos:start="4363:60" pos:end="4363:70"><name pos:start="4363:60" pos:end="4363:70"><name pos:start="4363:60" pos:end="4363:61">dc</name><operator pos:start="4363:62" pos:end="4363:63">-&gt;</operator><name pos:start="4363:64" pos:end="4363:70">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4365:21" pos:end="4365:71"><expr pos:start="4365:21" pos:end="4365:70"><call pos:start="4365:21" pos:end="4365:70"><name pos:start="4365:21" pos:end="4365:37">tcg_gen_qemu_st32</name><argument_list pos:start="4365:38" pos:end="4365:70">(<argument pos:start="4365:39" pos:end="4365:46"><expr pos:start="4365:39" pos:end="4365:46"><name pos:start="4365:39" pos:end="4365:46">cpu_src1</name></expr></argument>, <argument pos:start="4365:49" pos:end="4365:56"><expr pos:start="4365:49" pos:end="4365:56"><name pos:start="4365:49" pos:end="4365:56">cpu_addr</name></expr></argument>, <argument pos:start="4365:59" pos:end="4365:69"><expr pos:start="4365:59" pos:end="4365:69"><name pos:start="4365:59" pos:end="4365:69"><name pos:start="4365:59" pos:end="4365:60">dc</name><operator pos:start="4365:61" pos:end="4365:62">-&gt;</operator><name pos:start="4365:63" pos:end="4365:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4367:21" pos:end="4367:54"><expr pos:start="4367:21" pos:end="4367:53"><call pos:start="4367:21" pos:end="4367:53"><name pos:start="4367:21" pos:end="4367:34">tcg_gen_mov_tl</name><argument_list pos:start="4367:35" pos:end="4367:53">(<argument pos:start="4367:36" pos:end="4367:42"><expr pos:start="4367:36" pos:end="4367:42"><name pos:start="4367:36" pos:end="4367:42">cpu_val</name></expr></argument>, <argument pos:start="4367:45" pos:end="4367:52"><expr pos:start="4367:45" pos:end="4367:52"><name pos:start="4367:45" pos:end="4367:52">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4369:21" pos:end="4372:0">break;</break>

<cpp:if pos:start="4371:1" pos:end="4371:57">#<cpp:directive pos:start="4371:2" pos:end="4371:3">if</cpp:directive> <expr pos:start="4371:5" pos:end="4371:57"><operator pos:start="4371:5" pos:end="4371:5">!</operator><call pos:start="4371:6" pos:end="4371:30"><name pos:start="4371:6" pos:end="4371:12">defined</name><argument_list pos:start="4371:13" pos:end="4371:30">(<argument pos:start="4371:14" pos:end="4371:29"><expr pos:start="4371:14" pos:end="4371:29"><name pos:start="4371:14" pos:end="4371:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4371:32" pos:end="4371:33">||</operator> <call pos:start="4371:35" pos:end="4371:57"><name pos:start="4371:35" pos:end="4371:41">defined</name><argument_list pos:start="4371:42" pos:end="4371:57">(<argument pos:start="4371:43" pos:end="4371:56"><expr pos:start="4371:43" pos:end="4371:56"><name pos:start="4371:43" pos:end="4371:56">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="4373:17" pos:end="4376:0">case <expr pos:start="4373:22" pos:end="4373:25"><literal type="number" pos:start="4373:22" pos:end="4373:25">0x10</literal></expr>:</case>      <comment type="block" pos:start="4373:33" pos:end="4373:72">/* lda, V9 lduwa, load word alternate */</comment>

<cpp:ifndef pos:start="4375:1" pos:end="4375:22">#<cpp:directive pos:start="4375:2" pos:end="4375:7">ifndef</cpp:directive> <name pos:start="4375:9" pos:end="4375:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4377:21" pos:end="4379:42"><if pos:start="4377:21" pos:end="4379:42">if <condition pos:start="4377:24" pos:end="4377:31">(<expr pos:start="4377:25" pos:end="4377:30"><name pos:start="4377:25" pos:end="4377:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4379:25" pos:end="4379:42"><block_content pos:start="4379:25" pos:end="4379:42">

                        <goto pos:start="4379:25" pos:end="4379:42">goto <name pos:start="4379:30" pos:end="4379:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4381:21" pos:end="4386:0"><if pos:start="4381:21" pos:end="4386:0">if <condition pos:start="4381:24" pos:end="4381:40">(<expr pos:start="4381:25" pos:end="4381:39"><operator pos:start="4381:25" pos:end="4381:25">!</operator><call pos:start="4381:26" pos:end="4381:39"><name pos:start="4381:26" pos:end="4381:35">supervisor</name><argument_list pos:start="4381:36" pos:end="4381:39">(<argument pos:start="4381:37" pos:end="4381:38"><expr pos:start="4381:37" pos:end="4381:38"><name pos:start="4381:37" pos:end="4381:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4383:25" pos:end="4386:0"><block_content pos:start="4383:25" pos:end="4386:0">

                        <goto pos:start="4383:25" pos:end="4386:0">goto <name pos:start="4383:30" pos:end="4383:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4385:1" pos:end="4385:6">#<cpp:directive pos:start="4385:2" pos:end="4385:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4387:21" pos:end="4387:35"><expr pos:start="4387:21" pos:end="4387:34"><call pos:start="4387:21" pos:end="4387:34"><name pos:start="4387:21" pos:end="4387:30">save_state</name><argument_list pos:start="4387:31" pos:end="4387:34">(<argument pos:start="4387:32" pos:end="4387:33"><expr pos:start="4387:32" pos:end="4387:33"><name pos:start="4387:32" pos:end="4387:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4389:21" pos:end="4389:62"><expr pos:start="4389:21" pos:end="4389:61"><call pos:start="4389:21" pos:end="4389:61"><name pos:start="4389:21" pos:end="4389:30">gen_ld_asi</name><argument_list pos:start="4389:31" pos:end="4389:61">(<argument pos:start="4389:32" pos:end="4389:38"><expr pos:start="4389:32" pos:end="4389:38"><name pos:start="4389:32" pos:end="4389:38">cpu_val</name></expr></argument>, <argument pos:start="4389:41" pos:end="4389:48"><expr pos:start="4389:41" pos:end="4389:48"><name pos:start="4389:41" pos:end="4389:48">cpu_addr</name></expr></argument>, <argument pos:start="4389:51" pos:end="4389:54"><expr pos:start="4389:51" pos:end="4389:54"><name pos:start="4389:51" pos:end="4389:54">insn</name></expr></argument>, <argument pos:start="4389:57" pos:end="4389:57"><expr pos:start="4389:57" pos:end="4389:57"><literal type="number" pos:start="4389:57" pos:end="4389:57">4</literal></expr></argument>, <argument pos:start="4389:60" pos:end="4389:60"><expr pos:start="4389:60" pos:end="4389:60"><literal type="number" pos:start="4389:60" pos:end="4389:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4391:21" pos:end="4391:26">break;</break>

                <case pos:start="4393:17" pos:end="4396:0">case <expr pos:start="4393:22" pos:end="4393:25"><literal type="number" pos:start="4393:22" pos:end="4393:25">0x11</literal></expr>:</case>      <comment type="block" pos:start="4393:33" pos:end="4393:73">/* lduba, load unsigned byte alternate */</comment>

<cpp:ifndef pos:start="4395:1" pos:end="4395:22">#<cpp:directive pos:start="4395:2" pos:end="4395:7">ifndef</cpp:directive> <name pos:start="4395:9" pos:end="4395:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4397:21" pos:end="4399:42"><if pos:start="4397:21" pos:end="4399:42">if <condition pos:start="4397:24" pos:end="4397:31">(<expr pos:start="4397:25" pos:end="4397:30"><name pos:start="4397:25" pos:end="4397:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4399:25" pos:end="4399:42"><block_content pos:start="4399:25" pos:end="4399:42">

                        <goto pos:start="4399:25" pos:end="4399:42">goto <name pos:start="4399:30" pos:end="4399:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4401:21" pos:end="4406:0"><if pos:start="4401:21" pos:end="4406:0">if <condition pos:start="4401:24" pos:end="4401:40">(<expr pos:start="4401:25" pos:end="4401:39"><operator pos:start="4401:25" pos:end="4401:25">!</operator><call pos:start="4401:26" pos:end="4401:39"><name pos:start="4401:26" pos:end="4401:35">supervisor</name><argument_list pos:start="4401:36" pos:end="4401:39">(<argument pos:start="4401:37" pos:end="4401:38"><expr pos:start="4401:37" pos:end="4401:38"><name pos:start="4401:37" pos:end="4401:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4403:25" pos:end="4406:0"><block_content pos:start="4403:25" pos:end="4406:0">

                        <goto pos:start="4403:25" pos:end="4406:0">goto <name pos:start="4403:30" pos:end="4403:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4405:1" pos:end="4405:6">#<cpp:directive pos:start="4405:2" pos:end="4405:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4407:21" pos:end="4407:35"><expr pos:start="4407:21" pos:end="4407:34"><call pos:start="4407:21" pos:end="4407:34"><name pos:start="4407:21" pos:end="4407:30">save_state</name><argument_list pos:start="4407:31" pos:end="4407:34">(<argument pos:start="4407:32" pos:end="4407:33"><expr pos:start="4407:32" pos:end="4407:33"><name pos:start="4407:32" pos:end="4407:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4409:21" pos:end="4409:62"><expr pos:start="4409:21" pos:end="4409:61"><call pos:start="4409:21" pos:end="4409:61"><name pos:start="4409:21" pos:end="4409:30">gen_ld_asi</name><argument_list pos:start="4409:31" pos:end="4409:61">(<argument pos:start="4409:32" pos:end="4409:38"><expr pos:start="4409:32" pos:end="4409:38"><name pos:start="4409:32" pos:end="4409:38">cpu_val</name></expr></argument>, <argument pos:start="4409:41" pos:end="4409:48"><expr pos:start="4409:41" pos:end="4409:48"><name pos:start="4409:41" pos:end="4409:48">cpu_addr</name></expr></argument>, <argument pos:start="4409:51" pos:end="4409:54"><expr pos:start="4409:51" pos:end="4409:54"><name pos:start="4409:51" pos:end="4409:54">insn</name></expr></argument>, <argument pos:start="4409:57" pos:end="4409:57"><expr pos:start="4409:57" pos:end="4409:57"><literal type="number" pos:start="4409:57" pos:end="4409:57">1</literal></expr></argument>, <argument pos:start="4409:60" pos:end="4409:60"><expr pos:start="4409:60" pos:end="4409:60"><literal type="number" pos:start="4409:60" pos:end="4409:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4411:21" pos:end="4411:26">break;</break>

                <case pos:start="4413:17" pos:end="4416:0">case <expr pos:start="4413:22" pos:end="4413:25"><literal type="number" pos:start="4413:22" pos:end="4413:25">0x12</literal></expr>:</case>      <comment type="block" pos:start="4413:33" pos:end="4413:77">/* lduha, load unsigned halfword alternate */</comment>

<cpp:ifndef pos:start="4415:1" pos:end="4415:22">#<cpp:directive pos:start="4415:2" pos:end="4415:7">ifndef</cpp:directive> <name pos:start="4415:9" pos:end="4415:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4417:21" pos:end="4419:42"><if pos:start="4417:21" pos:end="4419:42">if <condition pos:start="4417:24" pos:end="4417:31">(<expr pos:start="4417:25" pos:end="4417:30"><name pos:start="4417:25" pos:end="4417:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4419:25" pos:end="4419:42"><block_content pos:start="4419:25" pos:end="4419:42">

                        <goto pos:start="4419:25" pos:end="4419:42">goto <name pos:start="4419:30" pos:end="4419:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4421:21" pos:end="4426:0"><if pos:start="4421:21" pos:end="4426:0">if <condition pos:start="4421:24" pos:end="4421:40">(<expr pos:start="4421:25" pos:end="4421:39"><operator pos:start="4421:25" pos:end="4421:25">!</operator><call pos:start="4421:26" pos:end="4421:39"><name pos:start="4421:26" pos:end="4421:35">supervisor</name><argument_list pos:start="4421:36" pos:end="4421:39">(<argument pos:start="4421:37" pos:end="4421:38"><expr pos:start="4421:37" pos:end="4421:38"><name pos:start="4421:37" pos:end="4421:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4423:25" pos:end="4426:0"><block_content pos:start="4423:25" pos:end="4426:0">

                        <goto pos:start="4423:25" pos:end="4426:0">goto <name pos:start="4423:30" pos:end="4423:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4425:1" pos:end="4425:6">#<cpp:directive pos:start="4425:2" pos:end="4425:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4427:21" pos:end="4427:35"><expr pos:start="4427:21" pos:end="4427:34"><call pos:start="4427:21" pos:end="4427:34"><name pos:start="4427:21" pos:end="4427:30">save_state</name><argument_list pos:start="4427:31" pos:end="4427:34">(<argument pos:start="4427:32" pos:end="4427:33"><expr pos:start="4427:32" pos:end="4427:33"><name pos:start="4427:32" pos:end="4427:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4429:21" pos:end="4429:62"><expr pos:start="4429:21" pos:end="4429:61"><call pos:start="4429:21" pos:end="4429:61"><name pos:start="4429:21" pos:end="4429:30">gen_ld_asi</name><argument_list pos:start="4429:31" pos:end="4429:61">(<argument pos:start="4429:32" pos:end="4429:38"><expr pos:start="4429:32" pos:end="4429:38"><name pos:start="4429:32" pos:end="4429:38">cpu_val</name></expr></argument>, <argument pos:start="4429:41" pos:end="4429:48"><expr pos:start="4429:41" pos:end="4429:48"><name pos:start="4429:41" pos:end="4429:48">cpu_addr</name></expr></argument>, <argument pos:start="4429:51" pos:end="4429:54"><expr pos:start="4429:51" pos:end="4429:54"><name pos:start="4429:51" pos:end="4429:54">insn</name></expr></argument>, <argument pos:start="4429:57" pos:end="4429:57"><expr pos:start="4429:57" pos:end="4429:57"><literal type="number" pos:start="4429:57" pos:end="4429:57">2</literal></expr></argument>, <argument pos:start="4429:60" pos:end="4429:60"><expr pos:start="4429:60" pos:end="4429:60"><literal type="number" pos:start="4429:60" pos:end="4429:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4431:21" pos:end="4431:26">break;</break>

                <case pos:start="4433:17" pos:end="4436:0">case <expr pos:start="4433:22" pos:end="4433:25"><literal type="number" pos:start="4433:22" pos:end="4433:25">0x13</literal></expr>:</case>      <comment type="block" pos:start="4433:33" pos:end="4433:70">/* ldda, load double word alternate */</comment>

<cpp:ifndef pos:start="4435:1" pos:end="4435:22">#<cpp:directive pos:start="4435:2" pos:end="4435:7">ifndef</cpp:directive> <name pos:start="4435:9" pos:end="4435:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4437:21" pos:end="4439:42"><if pos:start="4437:21" pos:end="4439:42">if <condition pos:start="4437:24" pos:end="4437:31">(<expr pos:start="4437:25" pos:end="4437:30"><name pos:start="4437:25" pos:end="4437:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4439:25" pos:end="4439:42"><block_content pos:start="4439:25" pos:end="4439:42">

                        <goto pos:start="4439:25" pos:end="4439:42">goto <name pos:start="4439:30" pos:end="4439:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4441:21" pos:end="4446:0"><if pos:start="4441:21" pos:end="4446:0">if <condition pos:start="4441:24" pos:end="4441:40">(<expr pos:start="4441:25" pos:end="4441:39"><operator pos:start="4441:25" pos:end="4441:25">!</operator><call pos:start="4441:26" pos:end="4441:39"><name pos:start="4441:26" pos:end="4441:35">supervisor</name><argument_list pos:start="4441:36" pos:end="4441:39">(<argument pos:start="4441:37" pos:end="4441:38"><expr pos:start="4441:37" pos:end="4441:38"><name pos:start="4441:37" pos:end="4441:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4443:25" pos:end="4446:0"><block_content pos:start="4443:25" pos:end="4446:0">

                        <goto pos:start="4443:25" pos:end="4446:0">goto <name pos:start="4443:30" pos:end="4443:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4445:1" pos:end="4445:6">#<cpp:directive pos:start="4445:2" pos:end="4445:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="4447:21" pos:end="4449:42"><if pos:start="4447:21" pos:end="4449:42">if <condition pos:start="4447:24" pos:end="4447:31">(<expr pos:start="4447:25" pos:end="4447:30"><name pos:start="4447:25" pos:end="4447:26">rd</name> <operator pos:start="4447:28" pos:end="4447:28">&amp;</operator> <literal type="number" pos:start="4447:30" pos:end="4447:30">1</literal></expr>)</condition><block type="pseudo" pos:start="4449:25" pos:end="4449:42"><block_content pos:start="4449:25" pos:end="4449:42">

                        <goto pos:start="4449:25" pos:end="4449:42">goto <name pos:start="4449:30" pos:end="4449:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="4451:21" pos:end="4451:35"><expr pos:start="4451:21" pos:end="4451:34"><call pos:start="4451:21" pos:end="4451:34"><name pos:start="4451:21" pos:end="4451:30">save_state</name><argument_list pos:start="4451:31" pos:end="4451:34">(<argument pos:start="4451:32" pos:end="4451:33"><expr pos:start="4451:32" pos:end="4451:33"><name pos:start="4451:32" pos:end="4451:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4453:21" pos:end="4453:66"><expr pos:start="4453:21" pos:end="4453:65"><call pos:start="4453:21" pos:end="4453:65"><name pos:start="4453:21" pos:end="4453:32">gen_ldda_asi</name><argument_list pos:start="4453:33" pos:end="4453:65">(<argument pos:start="4453:34" pos:end="4453:35"><expr pos:start="4453:34" pos:end="4453:35"><name pos:start="4453:34" pos:end="4453:35">dc</name></expr></argument>, <argument pos:start="4453:38" pos:end="4453:44"><expr pos:start="4453:38" pos:end="4453:44"><name pos:start="4453:38" pos:end="4453:44">cpu_val</name></expr></argument>, <argument pos:start="4453:47" pos:end="4453:54"><expr pos:start="4453:47" pos:end="4453:54"><name pos:start="4453:47" pos:end="4453:54">cpu_addr</name></expr></argument>, <argument pos:start="4453:57" pos:end="4453:60"><expr pos:start="4453:57" pos:end="4453:60"><name pos:start="4453:57" pos:end="4453:60">insn</name></expr></argument>, <argument pos:start="4453:63" pos:end="4453:64"><expr pos:start="4453:63" pos:end="4453:64"><name pos:start="4453:63" pos:end="4453:64">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="4455:21" pos:end="4455:35">goto <name pos:start="4455:26" pos:end="4455:34">skip_move</name>;</goto>

                <case pos:start="4457:17" pos:end="4460:0">case <expr pos:start="4457:22" pos:end="4457:25"><literal type="number" pos:start="4457:22" pos:end="4457:25">0x19</literal></expr>:</case>      <comment type="block" pos:start="4457:33" pos:end="4457:71">/* ldsba, load signed byte alternate */</comment>

<cpp:ifndef pos:start="4459:1" pos:end="4459:22">#<cpp:directive pos:start="4459:2" pos:end="4459:7">ifndef</cpp:directive> <name pos:start="4459:9" pos:end="4459:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4461:21" pos:end="4463:42"><if pos:start="4461:21" pos:end="4463:42">if <condition pos:start="4461:24" pos:end="4461:31">(<expr pos:start="4461:25" pos:end="4461:30"><name pos:start="4461:25" pos:end="4461:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4463:25" pos:end="4463:42"><block_content pos:start="4463:25" pos:end="4463:42">

                        <goto pos:start="4463:25" pos:end="4463:42">goto <name pos:start="4463:30" pos:end="4463:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4465:21" pos:end="4470:0"><if pos:start="4465:21" pos:end="4470:0">if <condition pos:start="4465:24" pos:end="4465:40">(<expr pos:start="4465:25" pos:end="4465:39"><operator pos:start="4465:25" pos:end="4465:25">!</operator><call pos:start="4465:26" pos:end="4465:39"><name pos:start="4465:26" pos:end="4465:35">supervisor</name><argument_list pos:start="4465:36" pos:end="4465:39">(<argument pos:start="4465:37" pos:end="4465:38"><expr pos:start="4465:37" pos:end="4465:38"><name pos:start="4465:37" pos:end="4465:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4467:25" pos:end="4470:0"><block_content pos:start="4467:25" pos:end="4470:0">

                        <goto pos:start="4467:25" pos:end="4470:0">goto <name pos:start="4467:30" pos:end="4467:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4469:1" pos:end="4469:6">#<cpp:directive pos:start="4469:2" pos:end="4469:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4471:21" pos:end="4471:35"><expr pos:start="4471:21" pos:end="4471:34"><call pos:start="4471:21" pos:end="4471:34"><name pos:start="4471:21" pos:end="4471:30">save_state</name><argument_list pos:start="4471:31" pos:end="4471:34">(<argument pos:start="4471:32" pos:end="4471:33"><expr pos:start="4471:32" pos:end="4471:33"><name pos:start="4471:32" pos:end="4471:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4473:21" pos:end="4473:62"><expr pos:start="4473:21" pos:end="4473:61"><call pos:start="4473:21" pos:end="4473:61"><name pos:start="4473:21" pos:end="4473:30">gen_ld_asi</name><argument_list pos:start="4473:31" pos:end="4473:61">(<argument pos:start="4473:32" pos:end="4473:38"><expr pos:start="4473:32" pos:end="4473:38"><name pos:start="4473:32" pos:end="4473:38">cpu_val</name></expr></argument>, <argument pos:start="4473:41" pos:end="4473:48"><expr pos:start="4473:41" pos:end="4473:48"><name pos:start="4473:41" pos:end="4473:48">cpu_addr</name></expr></argument>, <argument pos:start="4473:51" pos:end="4473:54"><expr pos:start="4473:51" pos:end="4473:54"><name pos:start="4473:51" pos:end="4473:54">insn</name></expr></argument>, <argument pos:start="4473:57" pos:end="4473:57"><expr pos:start="4473:57" pos:end="4473:57"><literal type="number" pos:start="4473:57" pos:end="4473:57">1</literal></expr></argument>, <argument pos:start="4473:60" pos:end="4473:60"><expr pos:start="4473:60" pos:end="4473:60"><literal type="number" pos:start="4473:60" pos:end="4473:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4475:21" pos:end="4475:26">break;</break>

                <case pos:start="4477:17" pos:end="4480:0">case <expr pos:start="4477:22" pos:end="4477:25"><literal type="number" pos:start="4477:22" pos:end="4477:25">0x1a</literal></expr>:</case>      <comment type="block" pos:start="4477:33" pos:end="4477:75">/* ldsha, load signed halfword alternate */</comment>

<cpp:ifndef pos:start="4479:1" pos:end="4479:22">#<cpp:directive pos:start="4479:2" pos:end="4479:7">ifndef</cpp:directive> <name pos:start="4479:9" pos:end="4479:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4481:21" pos:end="4483:42"><if pos:start="4481:21" pos:end="4483:42">if <condition pos:start="4481:24" pos:end="4481:31">(<expr pos:start="4481:25" pos:end="4481:30"><name pos:start="4481:25" pos:end="4481:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4483:25" pos:end="4483:42"><block_content pos:start="4483:25" pos:end="4483:42">

                        <goto pos:start="4483:25" pos:end="4483:42">goto <name pos:start="4483:30" pos:end="4483:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4485:21" pos:end="4490:0"><if pos:start="4485:21" pos:end="4490:0">if <condition pos:start="4485:24" pos:end="4485:40">(<expr pos:start="4485:25" pos:end="4485:39"><operator pos:start="4485:25" pos:end="4485:25">!</operator><call pos:start="4485:26" pos:end="4485:39"><name pos:start="4485:26" pos:end="4485:35">supervisor</name><argument_list pos:start="4485:36" pos:end="4485:39">(<argument pos:start="4485:37" pos:end="4485:38"><expr pos:start="4485:37" pos:end="4485:38"><name pos:start="4485:37" pos:end="4485:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4487:25" pos:end="4490:0"><block_content pos:start="4487:25" pos:end="4490:0">

                        <goto pos:start="4487:25" pos:end="4490:0">goto <name pos:start="4487:30" pos:end="4487:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4489:1" pos:end="4489:6">#<cpp:directive pos:start="4489:2" pos:end="4489:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4491:21" pos:end="4491:35"><expr pos:start="4491:21" pos:end="4491:34"><call pos:start="4491:21" pos:end="4491:34"><name pos:start="4491:21" pos:end="4491:30">save_state</name><argument_list pos:start="4491:31" pos:end="4491:34">(<argument pos:start="4491:32" pos:end="4491:33"><expr pos:start="4491:32" pos:end="4491:33"><name pos:start="4491:32" pos:end="4491:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4493:21" pos:end="4493:62"><expr pos:start="4493:21" pos:end="4493:61"><call pos:start="4493:21" pos:end="4493:61"><name pos:start="4493:21" pos:end="4493:30">gen_ld_asi</name><argument_list pos:start="4493:31" pos:end="4493:61">(<argument pos:start="4493:32" pos:end="4493:38"><expr pos:start="4493:32" pos:end="4493:38"><name pos:start="4493:32" pos:end="4493:38">cpu_val</name></expr></argument>, <argument pos:start="4493:41" pos:end="4493:48"><expr pos:start="4493:41" pos:end="4493:48"><name pos:start="4493:41" pos:end="4493:48">cpu_addr</name></expr></argument>, <argument pos:start="4493:51" pos:end="4493:54"><expr pos:start="4493:51" pos:end="4493:54"><name pos:start="4493:51" pos:end="4493:54">insn</name></expr></argument>, <argument pos:start="4493:57" pos:end="4493:57"><expr pos:start="4493:57" pos:end="4493:57"><literal type="number" pos:start="4493:57" pos:end="4493:57">2</literal></expr></argument>, <argument pos:start="4493:60" pos:end="4493:60"><expr pos:start="4493:60" pos:end="4493:60"><literal type="number" pos:start="4493:60" pos:end="4493:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4495:21" pos:end="4495:26">break;</break>

                <case pos:start="4497:17" pos:end="4500:0">case <expr pos:start="4497:22" pos:end="4497:25"><literal type="number" pos:start="4497:22" pos:end="4497:25">0x1d</literal></expr>:</case>      <comment type="block" pos:start="4497:33" pos:end="4497:74">/* ldstuba -- XXX: should be atomically */</comment>

<cpp:ifndef pos:start="4499:1" pos:end="4499:22">#<cpp:directive pos:start="4499:2" pos:end="4499:7">ifndef</cpp:directive> <name pos:start="4499:9" pos:end="4499:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4501:21" pos:end="4503:42"><if pos:start="4501:21" pos:end="4503:42">if <condition pos:start="4501:24" pos:end="4501:31">(<expr pos:start="4501:25" pos:end="4501:30"><name pos:start="4501:25" pos:end="4501:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4503:25" pos:end="4503:42"><block_content pos:start="4503:25" pos:end="4503:42">

                        <goto pos:start="4503:25" pos:end="4503:42">goto <name pos:start="4503:30" pos:end="4503:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4505:21" pos:end="4510:0"><if pos:start="4505:21" pos:end="4510:0">if <condition pos:start="4505:24" pos:end="4505:40">(<expr pos:start="4505:25" pos:end="4505:39"><operator pos:start="4505:25" pos:end="4505:25">!</operator><call pos:start="4505:26" pos:end="4505:39"><name pos:start="4505:26" pos:end="4505:35">supervisor</name><argument_list pos:start="4505:36" pos:end="4505:39">(<argument pos:start="4505:37" pos:end="4505:38"><expr pos:start="4505:37" pos:end="4505:38"><name pos:start="4505:37" pos:end="4505:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4507:25" pos:end="4510:0"><block_content pos:start="4507:25" pos:end="4510:0">

                        <goto pos:start="4507:25" pos:end="4510:0">goto <name pos:start="4507:30" pos:end="4507:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4509:1" pos:end="4509:6">#<cpp:directive pos:start="4509:2" pos:end="4509:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4511:21" pos:end="4511:35"><expr pos:start="4511:21" pos:end="4511:34"><call pos:start="4511:21" pos:end="4511:34"><name pos:start="4511:21" pos:end="4511:30">save_state</name><argument_list pos:start="4511:31" pos:end="4511:34">(<argument pos:start="4511:32" pos:end="4511:33"><expr pos:start="4511:32" pos:end="4511:33"><name pos:start="4511:32" pos:end="4511:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4513:21" pos:end="4513:60"><expr pos:start="4513:21" pos:end="4513:59"><call pos:start="4513:21" pos:end="4513:59"><name pos:start="4513:21" pos:end="4513:34">gen_ldstub_asi</name><argument_list pos:start="4513:35" pos:end="4513:59">(<argument pos:start="4513:36" pos:end="4513:42"><expr pos:start="4513:36" pos:end="4513:42"><name pos:start="4513:36" pos:end="4513:42">cpu_val</name></expr></argument>, <argument pos:start="4513:45" pos:end="4513:52"><expr pos:start="4513:45" pos:end="4513:52"><name pos:start="4513:45" pos:end="4513:52">cpu_addr</name></expr></argument>, <argument pos:start="4513:55" pos:end="4513:58"><expr pos:start="4513:55" pos:end="4513:58"><name pos:start="4513:55" pos:end="4513:58">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4515:21" pos:end="4515:26">break;</break>

                <case pos:start="4517:17" pos:end="4517:26">case <expr pos:start="4517:22" pos:end="4517:25"><literal type="number" pos:start="4517:22" pos:end="4517:25">0x1f</literal></expr>:</case>      <comment type="block" pos:start="4517:33" pos:end="4519:48">/* swapa, swap reg with alt. memory. Also

                                   atomically */</comment>

                    <expr_stmt pos:start="4521:21" pos:end="4524:0"><expr pos:start="4521:21" pos:end="4521:46"><call pos:start="4521:21" pos:end="4521:46"><name pos:start="4521:21" pos:end="4521:36">CHECK_IU_FEATURE</name><argument_list pos:start="4521:37" pos:end="4521:46">(<argument pos:start="4521:38" pos:end="4521:39"><expr pos:start="4521:38" pos:end="4521:39"><name pos:start="4521:38" pos:end="4521:39">dc</name></expr></argument>, <argument pos:start="4521:42" pos:end="4521:45"><expr pos:start="4521:42" pos:end="4521:45"><name pos:start="4521:42" pos:end="4521:45">SWAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="4523:1" pos:end="4523:22">#<cpp:directive pos:start="4523:2" pos:end="4523:7">ifndef</cpp:directive> <name pos:start="4523:9" pos:end="4523:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4525:21" pos:end="4527:42"><if pos:start="4525:21" pos:end="4527:42">if <condition pos:start="4525:24" pos:end="4525:31">(<expr pos:start="4525:25" pos:end="4525:30"><name pos:start="4525:25" pos:end="4525:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4527:25" pos:end="4527:42"><block_content pos:start="4527:25" pos:end="4527:42">

                        <goto pos:start="4527:25" pos:end="4527:42">goto <name pos:start="4527:30" pos:end="4527:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4529:21" pos:end="4534:0"><if pos:start="4529:21" pos:end="4534:0">if <condition pos:start="4529:24" pos:end="4529:40">(<expr pos:start="4529:25" pos:end="4529:39"><operator pos:start="4529:25" pos:end="4529:25">!</operator><call pos:start="4529:26" pos:end="4529:39"><name pos:start="4529:26" pos:end="4529:35">supervisor</name><argument_list pos:start="4529:36" pos:end="4529:39">(<argument pos:start="4529:37" pos:end="4529:38"><expr pos:start="4529:37" pos:end="4529:38"><name pos:start="4529:37" pos:end="4529:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4531:25" pos:end="4534:0"><block_content pos:start="4531:25" pos:end="4534:0">

                        <goto pos:start="4531:25" pos:end="4534:0">goto <name pos:start="4531:30" pos:end="4531:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4533:1" pos:end="4533:6">#<cpp:directive pos:start="4533:2" pos:end="4533:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4535:21" pos:end="4535:35"><expr pos:start="4535:21" pos:end="4535:34"><call pos:start="4535:21" pos:end="4535:34"><name pos:start="4535:21" pos:end="4535:30">save_state</name><argument_list pos:start="4535:31" pos:end="4535:34">(<argument pos:start="4535:32" pos:end="4535:33"><expr pos:start="4535:32" pos:end="4535:33"><name pos:start="4535:32" pos:end="4535:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4537:21" pos:end="4537:52"><expr pos:start="4537:21" pos:end="4537:51"><name pos:start="4537:21" pos:end="4537:28">cpu_src1</name> <operator pos:start="4537:30" pos:end="4537:30">=</operator> <call pos:start="4537:32" pos:end="4537:51"><name pos:start="4537:32" pos:end="4537:43">gen_load_gpr</name><argument_list pos:start="4537:44" pos:end="4537:51">(<argument pos:start="4537:45" pos:end="4537:46"><expr pos:start="4537:45" pos:end="4537:46"><name pos:start="4537:45" pos:end="4537:46">dc</name></expr></argument>, <argument pos:start="4537:49" pos:end="4537:50"><expr pos:start="4537:49" pos:end="4537:50"><name pos:start="4537:49" pos:end="4537:50">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4539:21" pos:end="4539:68"><expr pos:start="4539:21" pos:end="4539:67"><call pos:start="4539:21" pos:end="4539:67"><name pos:start="4539:21" pos:end="4539:32">gen_swap_asi</name><argument_list pos:start="4539:33" pos:end="4539:67">(<argument pos:start="4539:34" pos:end="4539:40"><expr pos:start="4539:34" pos:end="4539:40"><name pos:start="4539:34" pos:end="4539:40">cpu_val</name></expr></argument>, <argument pos:start="4539:43" pos:end="4539:50"><expr pos:start="4539:43" pos:end="4539:50"><name pos:start="4539:43" pos:end="4539:50">cpu_src1</name></expr></argument>, <argument pos:start="4539:53" pos:end="4539:60"><expr pos:start="4539:53" pos:end="4539:60"><name pos:start="4539:53" pos:end="4539:60">cpu_addr</name></expr></argument>, <argument pos:start="4539:63" pos:end="4539:66"><expr pos:start="4539:63" pos:end="4539:66"><name pos:start="4539:63" pos:end="4539:66">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4541:21" pos:end="4546:0">break;</break>



<cpp:ifndef pos:start="4545:1" pos:end="4545:22">#<cpp:directive pos:start="4545:2" pos:end="4545:7">ifndef</cpp:directive> <name pos:start="4545:9" pos:end="4545:22">TARGET_SPARC64</name></cpp:ifndef>

                <case pos:start="4547:17" pos:end="4547:26">case <expr pos:start="4547:22" pos:end="4547:25"><literal type="number" pos:start="4547:22" pos:end="4547:25">0x30</literal></expr>:</case> <comment type="block" pos:start="4547:28" pos:end="4547:36">/* ldc */</comment>

                <case pos:start="4549:17" pos:end="4549:26">case <expr pos:start="4549:22" pos:end="4549:25"><literal type="number" pos:start="4549:22" pos:end="4549:25">0x31</literal></expr>:</case> <comment type="block" pos:start="4549:28" pos:end="4549:38">/* ldcsr */</comment>

                <case pos:start="4551:17" pos:end="4551:26">case <expr pos:start="4551:22" pos:end="4551:25"><literal type="number" pos:start="4551:22" pos:end="4551:25">0x33</literal></expr>:</case> <comment type="block" pos:start="4551:28" pos:end="4551:37">/* lddc */</comment>

                    <goto pos:start="4553:21" pos:end="4560:0">goto <name pos:start="4553:26" pos:end="4553:33">ncp_insn</name>;</goto>

<cpp:endif pos:start="4555:1" pos:end="4555:6">#<cpp:directive pos:start="4555:2" pos:end="4555:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="4557:1" pos:end="4557:6">#<cpp:directive pos:start="4557:2" pos:end="4557:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4559:1" pos:end="4559:21">#<cpp:directive pos:start="4559:2" pos:end="4559:6">ifdef</cpp:directive> <name pos:start="4559:8" pos:end="4559:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="4561:17" pos:end="4561:26">case <expr pos:start="4561:22" pos:end="4561:25"><literal type="number" pos:start="4561:22" pos:end="4561:25">0x08</literal></expr>:</case> <comment type="block" pos:start="4561:28" pos:end="4561:40">/* V9 ldsw */</comment>

                    <expr_stmt pos:start="4563:21" pos:end="4563:51"><expr pos:start="4563:21" pos:end="4563:50"><call pos:start="4563:21" pos:end="4563:50"><name pos:start="4563:21" pos:end="4563:36">gen_address_mask</name><argument_list pos:start="4563:37" pos:end="4563:50">(<argument pos:start="4563:38" pos:end="4563:39"><expr pos:start="4563:38" pos:end="4563:39"><name pos:start="4563:38" pos:end="4563:39">dc</name></expr></argument>, <argument pos:start="4563:42" pos:end="4563:49"><expr pos:start="4563:42" pos:end="4563:49"><name pos:start="4563:42" pos:end="4563:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4565:21" pos:end="4565:71"><expr pos:start="4565:21" pos:end="4565:70"><call pos:start="4565:21" pos:end="4565:70"><name pos:start="4565:21" pos:end="4565:38">tcg_gen_qemu_ld32s</name><argument_list pos:start="4565:39" pos:end="4565:70">(<argument pos:start="4565:40" pos:end="4565:46"><expr pos:start="4565:40" pos:end="4565:46"><name pos:start="4565:40" pos:end="4565:46">cpu_val</name></expr></argument>, <argument pos:start="4565:49" pos:end="4565:56"><expr pos:start="4565:49" pos:end="4565:56"><name pos:start="4565:49" pos:end="4565:56">cpu_addr</name></expr></argument>, <argument pos:start="4565:59" pos:end="4565:69"><expr pos:start="4565:59" pos:end="4565:69"><name pos:start="4565:59" pos:end="4565:69"><name pos:start="4565:59" pos:end="4565:60">dc</name><operator pos:start="4565:61" pos:end="4565:62">-&gt;</operator><name pos:start="4565:63" pos:end="4565:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4567:21" pos:end="4567:26">break;</break>

                <case pos:start="4569:17" pos:end="4569:26">case <expr pos:start="4569:22" pos:end="4569:25"><literal type="number" pos:start="4569:22" pos:end="4569:25">0x0b</literal></expr>:</case> <comment type="block" pos:start="4569:28" pos:end="4569:39">/* V9 ldx */</comment>

                    <expr_stmt pos:start="4571:21" pos:end="4571:51"><expr pos:start="4571:21" pos:end="4571:50"><call pos:start="4571:21" pos:end="4571:50"><name pos:start="4571:21" pos:end="4571:36">gen_address_mask</name><argument_list pos:start="4571:37" pos:end="4571:50">(<argument pos:start="4571:38" pos:end="4571:39"><expr pos:start="4571:38" pos:end="4571:39"><name pos:start="4571:38" pos:end="4571:39">dc</name></expr></argument>, <argument pos:start="4571:42" pos:end="4571:49"><expr pos:start="4571:42" pos:end="4571:49"><name pos:start="4571:42" pos:end="4571:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4573:21" pos:end="4573:70"><expr pos:start="4573:21" pos:end="4573:69"><call pos:start="4573:21" pos:end="4573:69"><name pos:start="4573:21" pos:end="4573:37">tcg_gen_qemu_ld64</name><argument_list pos:start="4573:38" pos:end="4573:69">(<argument pos:start="4573:39" pos:end="4573:45"><expr pos:start="4573:39" pos:end="4573:45"><name pos:start="4573:39" pos:end="4573:45">cpu_val</name></expr></argument>, <argument pos:start="4573:48" pos:end="4573:55"><expr pos:start="4573:48" pos:end="4573:55"><name pos:start="4573:48" pos:end="4573:55">cpu_addr</name></expr></argument>, <argument pos:start="4573:58" pos:end="4573:68"><expr pos:start="4573:58" pos:end="4573:68"><name pos:start="4573:58" pos:end="4573:68"><name pos:start="4573:58" pos:end="4573:59">dc</name><operator pos:start="4573:60" pos:end="4573:61">-&gt;</operator><name pos:start="4573:62" pos:end="4573:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4575:21" pos:end="4575:26">break;</break>

                <case pos:start="4577:17" pos:end="4577:26">case <expr pos:start="4577:22" pos:end="4577:25"><literal type="number" pos:start="4577:22" pos:end="4577:25">0x18</literal></expr>:</case> <comment type="block" pos:start="4577:28" pos:end="4577:41">/* V9 ldswa */</comment>

                    <expr_stmt pos:start="4579:21" pos:end="4579:35"><expr pos:start="4579:21" pos:end="4579:34"><call pos:start="4579:21" pos:end="4579:34"><name pos:start="4579:21" pos:end="4579:30">save_state</name><argument_list pos:start="4579:31" pos:end="4579:34">(<argument pos:start="4579:32" pos:end="4579:33"><expr pos:start="4579:32" pos:end="4579:33"><name pos:start="4579:32" pos:end="4579:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4581:21" pos:end="4581:62"><expr pos:start="4581:21" pos:end="4581:61"><call pos:start="4581:21" pos:end="4581:61"><name pos:start="4581:21" pos:end="4581:30">gen_ld_asi</name><argument_list pos:start="4581:31" pos:end="4581:61">(<argument pos:start="4581:32" pos:end="4581:38"><expr pos:start="4581:32" pos:end="4581:38"><name pos:start="4581:32" pos:end="4581:38">cpu_val</name></expr></argument>, <argument pos:start="4581:41" pos:end="4581:48"><expr pos:start="4581:41" pos:end="4581:48"><name pos:start="4581:41" pos:end="4581:48">cpu_addr</name></expr></argument>, <argument pos:start="4581:51" pos:end="4581:54"><expr pos:start="4581:51" pos:end="4581:54"><name pos:start="4581:51" pos:end="4581:54">insn</name></expr></argument>, <argument pos:start="4581:57" pos:end="4581:57"><expr pos:start="4581:57" pos:end="4581:57"><literal type="number" pos:start="4581:57" pos:end="4581:57">4</literal></expr></argument>, <argument pos:start="4581:60" pos:end="4581:60"><expr pos:start="4581:60" pos:end="4581:60"><literal type="number" pos:start="4581:60" pos:end="4581:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4583:21" pos:end="4583:26">break;</break>

                <case pos:start="4585:17" pos:end="4585:26">case <expr pos:start="4585:22" pos:end="4585:25"><literal type="number" pos:start="4585:22" pos:end="4585:25">0x1b</literal></expr>:</case> <comment type="block" pos:start="4585:28" pos:end="4585:40">/* V9 ldxa */</comment>

                    <expr_stmt pos:start="4587:21" pos:end="4587:35"><expr pos:start="4587:21" pos:end="4587:34"><call pos:start="4587:21" pos:end="4587:34"><name pos:start="4587:21" pos:end="4587:30">save_state</name><argument_list pos:start="4587:31" pos:end="4587:34">(<argument pos:start="4587:32" pos:end="4587:33"><expr pos:start="4587:32" pos:end="4587:33"><name pos:start="4587:32" pos:end="4587:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4589:21" pos:end="4589:62"><expr pos:start="4589:21" pos:end="4589:61"><call pos:start="4589:21" pos:end="4589:61"><name pos:start="4589:21" pos:end="4589:30">gen_ld_asi</name><argument_list pos:start="4589:31" pos:end="4589:61">(<argument pos:start="4589:32" pos:end="4589:38"><expr pos:start="4589:32" pos:end="4589:38"><name pos:start="4589:32" pos:end="4589:38">cpu_val</name></expr></argument>, <argument pos:start="4589:41" pos:end="4589:48"><expr pos:start="4589:41" pos:end="4589:48"><name pos:start="4589:41" pos:end="4589:48">cpu_addr</name></expr></argument>, <argument pos:start="4589:51" pos:end="4589:54"><expr pos:start="4589:51" pos:end="4589:54"><name pos:start="4589:51" pos:end="4589:54">insn</name></expr></argument>, <argument pos:start="4589:57" pos:end="4589:57"><expr pos:start="4589:57" pos:end="4589:57"><literal type="number" pos:start="4589:57" pos:end="4589:57">8</literal></expr></argument>, <argument pos:start="4589:60" pos:end="4589:60"><expr pos:start="4589:60" pos:end="4589:60"><literal type="number" pos:start="4589:60" pos:end="4589:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4591:21" pos:end="4591:26">break;</break>

                <case pos:start="4593:17" pos:end="4593:26">case <expr pos:start="4593:22" pos:end="4593:25"><literal type="number" pos:start="4593:22" pos:end="4593:25">0x2d</literal></expr>:</case> <comment type="block" pos:start="4593:28" pos:end="4593:55">/* V9 prefetch, no effect */</comment>

                    <goto pos:start="4595:21" pos:end="4595:35">goto <name pos:start="4595:26" pos:end="4595:34">skip_move</name>;</goto>

                <case pos:start="4597:17" pos:end="4597:26">case <expr pos:start="4597:22" pos:end="4597:25"><literal type="number" pos:start="4597:22" pos:end="4597:25">0x30</literal></expr>:</case> <comment type="block" pos:start="4597:28" pos:end="4597:40">/* V9 ldfa */</comment>

                    <if_stmt pos:start="4599:21" pos:end="4603:21"><if pos:start="4599:21" pos:end="4603:21">if <condition pos:start="4599:24" pos:end="4599:45">(<expr pos:start="4599:25" pos:end="4599:44"><call pos:start="4599:25" pos:end="4599:44"><name pos:start="4599:25" pos:end="4599:40">gen_trap_ifnofpu</name><argument_list pos:start="4599:41" pos:end="4599:44">(<argument pos:start="4599:42" pos:end="4599:43"><expr pos:start="4599:42" pos:end="4599:43"><name pos:start="4599:42" pos:end="4599:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4599:47" pos:end="4603:21">{<block_content pos:start="4601:25" pos:end="4601:38">

                        <goto pos:start="4601:25" pos:end="4601:38">goto <name pos:start="4601:30" pos:end="4601:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="4605:21" pos:end="4605:35"><expr pos:start="4605:21" pos:end="4605:34"><call pos:start="4605:21" pos:end="4605:34"><name pos:start="4605:21" pos:end="4605:30">save_state</name><argument_list pos:start="4605:31" pos:end="4605:34">(<argument pos:start="4605:32" pos:end="4605:33"><expr pos:start="4605:32" pos:end="4605:33"><name pos:start="4605:32" pos:end="4605:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4607:21" pos:end="4607:55"><expr pos:start="4607:21" pos:end="4607:54"><call pos:start="4607:21" pos:end="4607:54"><name pos:start="4607:21" pos:end="4607:31">gen_ldf_asi</name><argument_list pos:start="4607:32" pos:end="4607:54">(<argument pos:start="4607:33" pos:end="4607:40"><expr pos:start="4607:33" pos:end="4607:40"><name pos:start="4607:33" pos:end="4607:40">cpu_addr</name></expr></argument>, <argument pos:start="4607:43" pos:end="4607:46"><expr pos:start="4607:43" pos:end="4607:46"><name pos:start="4607:43" pos:end="4607:46">insn</name></expr></argument>, <argument pos:start="4607:49" pos:end="4607:49"><expr pos:start="4607:49" pos:end="4607:49"><literal type="number" pos:start="4607:49" pos:end="4607:49">4</literal></expr></argument>, <argument pos:start="4607:52" pos:end="4607:53"><expr pos:start="4607:52" pos:end="4607:53"><name pos:start="4607:52" pos:end="4607:53">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4609:21" pos:end="4609:46"><expr pos:start="4609:21" pos:end="4609:45"><call pos:start="4609:21" pos:end="4609:45"><name pos:start="4609:21" pos:end="4609:41">gen_update_fprs_dirty</name><argument_list pos:start="4609:42" pos:end="4609:45">(<argument pos:start="4609:43" pos:end="4609:44"><expr pos:start="4609:43" pos:end="4609:44"><name pos:start="4609:43" pos:end="4609:44">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="4611:21" pos:end="4611:35">goto <name pos:start="4611:26" pos:end="4611:34">skip_move</name>;</goto>

                <case pos:start="4613:17" pos:end="4613:26">case <expr pos:start="4613:22" pos:end="4613:25"><literal type="number" pos:start="4613:22" pos:end="4613:25">0x33</literal></expr>:</case> <comment type="block" pos:start="4613:28" pos:end="4613:41">/* V9 lddfa */</comment>

                    <if_stmt pos:start="4615:21" pos:end="4619:21"><if pos:start="4615:21" pos:end="4619:21">if <condition pos:start="4615:24" pos:end="4615:45">(<expr pos:start="4615:25" pos:end="4615:44"><call pos:start="4615:25" pos:end="4615:44"><name pos:start="4615:25" pos:end="4615:40">gen_trap_ifnofpu</name><argument_list pos:start="4615:41" pos:end="4615:44">(<argument pos:start="4615:42" pos:end="4615:43"><expr pos:start="4615:42" pos:end="4615:43"><name pos:start="4615:42" pos:end="4615:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4615:47" pos:end="4619:21">{<block_content pos:start="4617:25" pos:end="4617:38">

                        <goto pos:start="4617:25" pos:end="4617:38">goto <name pos:start="4617:30" pos:end="4617:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="4621:21" pos:end="4621:35"><expr pos:start="4621:21" pos:end="4621:34"><call pos:start="4621:21" pos:end="4621:34"><name pos:start="4621:21" pos:end="4621:30">save_state</name><argument_list pos:start="4621:31" pos:end="4621:34">(<argument pos:start="4621:32" pos:end="4621:33"><expr pos:start="4621:32" pos:end="4621:33"><name pos:start="4621:32" pos:end="4621:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4623:21" pos:end="4623:63"><expr pos:start="4623:21" pos:end="4623:62"><call pos:start="4623:21" pos:end="4623:62"><name pos:start="4623:21" pos:end="4623:31">gen_ldf_asi</name><argument_list pos:start="4623:32" pos:end="4623:62">(<argument pos:start="4623:33" pos:end="4623:40"><expr pos:start="4623:33" pos:end="4623:40"><name pos:start="4623:33" pos:end="4623:40">cpu_addr</name></expr></argument>, <argument pos:start="4623:43" pos:end="4623:46"><expr pos:start="4623:43" pos:end="4623:46"><name pos:start="4623:43" pos:end="4623:46">insn</name></expr></argument>, <argument pos:start="4623:49" pos:end="4623:49"><expr pos:start="4623:49" pos:end="4623:49"><literal type="number" pos:start="4623:49" pos:end="4623:49">8</literal></expr></argument>, <argument pos:start="4623:52" pos:end="4623:61"><expr pos:start="4623:52" pos:end="4623:61"><call pos:start="4623:52" pos:end="4623:61"><name pos:start="4623:52" pos:end="4623:57">DFPREG</name><argument_list pos:start="4623:58" pos:end="4623:61">(<argument pos:start="4623:59" pos:end="4623:60"><expr pos:start="4623:59" pos:end="4623:60"><name pos:start="4623:59" pos:end="4623:60">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4625:21" pos:end="4625:54"><expr pos:start="4625:21" pos:end="4625:53"><call pos:start="4625:21" pos:end="4625:53"><name pos:start="4625:21" pos:end="4625:41">gen_update_fprs_dirty</name><argument_list pos:start="4625:42" pos:end="4625:53">(<argument pos:start="4625:43" pos:end="4625:52"><expr pos:start="4625:43" pos:end="4625:52"><call pos:start="4625:43" pos:end="4625:52"><name pos:start="4625:43" pos:end="4625:48">DFPREG</name><argument_list pos:start="4625:49" pos:end="4625:52">(<argument pos:start="4625:50" pos:end="4625:51"><expr pos:start="4625:50" pos:end="4625:51"><name pos:start="4625:50" pos:end="4625:51">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="4627:21" pos:end="4627:35">goto <name pos:start="4627:26" pos:end="4627:34">skip_move</name>;</goto>

                <case pos:start="4629:17" pos:end="4629:26">case <expr pos:start="4629:22" pos:end="4629:25"><literal type="number" pos:start="4629:22" pos:end="4629:25">0x3d</literal></expr>:</case> <comment type="block" pos:start="4629:28" pos:end="4629:56">/* V9 prefetcha, no effect */</comment>

                    <goto pos:start="4631:21" pos:end="4631:35">goto <name pos:start="4631:26" pos:end="4631:34">skip_move</name>;</goto>

                <case pos:start="4633:17" pos:end="4633:26">case <expr pos:start="4633:22" pos:end="4633:25"><literal type="number" pos:start="4633:22" pos:end="4633:25">0x32</literal></expr>:</case> <comment type="block" pos:start="4633:28" pos:end="4633:41">/* V9 ldqfa */</comment>

                    <expr_stmt pos:start="4635:21" pos:end="4635:52"><expr pos:start="4635:21" pos:end="4635:51"><call pos:start="4635:21" pos:end="4635:51"><name pos:start="4635:21" pos:end="4635:37">CHECK_FPU_FEATURE</name><argument_list pos:start="4635:38" pos:end="4635:51">(<argument pos:start="4635:39" pos:end="4635:40"><expr pos:start="4635:39" pos:end="4635:40"><name pos:start="4635:39" pos:end="4635:40">dc</name></expr></argument>, <argument pos:start="4635:43" pos:end="4635:50"><expr pos:start="4635:43" pos:end="4635:50"><name pos:start="4635:43" pos:end="4635:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="4637:21" pos:end="4641:21"><if pos:start="4637:21" pos:end="4641:21">if <condition pos:start="4637:24" pos:end="4637:45">(<expr pos:start="4637:25" pos:end="4637:44"><call pos:start="4637:25" pos:end="4637:44"><name pos:start="4637:25" pos:end="4637:40">gen_trap_ifnofpu</name><argument_list pos:start="4637:41" pos:end="4637:44">(<argument pos:start="4637:42" pos:end="4637:43"><expr pos:start="4637:42" pos:end="4637:43"><name pos:start="4637:42" pos:end="4637:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4637:47" pos:end="4641:21">{<block_content pos:start="4639:25" pos:end="4639:38">

                        <goto pos:start="4639:25" pos:end="4639:38">goto <name pos:start="4639:30" pos:end="4639:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="4643:21" pos:end="4643:35"><expr pos:start="4643:21" pos:end="4643:34"><call pos:start="4643:21" pos:end="4643:34"><name pos:start="4643:21" pos:end="4643:30">save_state</name><argument_list pos:start="4643:31" pos:end="4643:34">(<argument pos:start="4643:32" pos:end="4643:33"><expr pos:start="4643:32" pos:end="4643:33"><name pos:start="4643:32" pos:end="4643:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4645:21" pos:end="4645:64"><expr pos:start="4645:21" pos:end="4645:63"><call pos:start="4645:21" pos:end="4645:63"><name pos:start="4645:21" pos:end="4645:31">gen_ldf_asi</name><argument_list pos:start="4645:32" pos:end="4645:63">(<argument pos:start="4645:33" pos:end="4645:40"><expr pos:start="4645:33" pos:end="4645:40"><name pos:start="4645:33" pos:end="4645:40">cpu_addr</name></expr></argument>, <argument pos:start="4645:43" pos:end="4645:46"><expr pos:start="4645:43" pos:end="4645:46"><name pos:start="4645:43" pos:end="4645:46">insn</name></expr></argument>, <argument pos:start="4645:49" pos:end="4645:50"><expr pos:start="4645:49" pos:end="4645:50"><literal type="number" pos:start="4645:49" pos:end="4645:50">16</literal></expr></argument>, <argument pos:start="4645:53" pos:end="4645:62"><expr pos:start="4645:53" pos:end="4645:62"><call pos:start="4645:53" pos:end="4645:62"><name pos:start="4645:53" pos:end="4645:58">QFPREG</name><argument_list pos:start="4645:59" pos:end="4645:62">(<argument pos:start="4645:60" pos:end="4645:61"><expr pos:start="4645:60" pos:end="4645:61"><name pos:start="4645:60" pos:end="4645:61">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4647:21" pos:end="4647:54"><expr pos:start="4647:21" pos:end="4647:53"><call pos:start="4647:21" pos:end="4647:53"><name pos:start="4647:21" pos:end="4647:41">gen_update_fprs_dirty</name><argument_list pos:start="4647:42" pos:end="4647:53">(<argument pos:start="4647:43" pos:end="4647:52"><expr pos:start="4647:43" pos:end="4647:52"><call pos:start="4647:43" pos:end="4647:52"><name pos:start="4647:43" pos:end="4647:48">QFPREG</name><argument_list pos:start="4647:49" pos:end="4647:52">(<argument pos:start="4647:50" pos:end="4647:51"><expr pos:start="4647:50" pos:end="4647:51"><name pos:start="4647:50" pos:end="4647:51">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="4649:21" pos:end="4652:0">goto <name pos:start="4649:26" pos:end="4649:34">skip_move</name>;</goto>

<cpp:endif pos:start="4651:1" pos:end="4651:6">#<cpp:directive pos:start="4651:2" pos:end="4651:6">endif</cpp:directive></cpp:endif>

                <default pos:start="4653:17" pos:end="4653:24">default:</default>

                    <goto pos:start="4655:21" pos:end="4655:38">goto <name pos:start="4655:26" pos:end="4655:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

                <expr_stmt pos:start="4659:17" pos:end="4662:0"><expr pos:start="4659:17" pos:end="4659:46"><call pos:start="4659:17" pos:end="4659:46"><name pos:start="4659:17" pos:end="4659:29">gen_store_gpr</name><argument_list pos:start="4659:30" pos:end="4659:46">(<argument pos:start="4659:31" pos:end="4659:32"><expr pos:start="4659:31" pos:end="4659:32"><name pos:start="4659:31" pos:end="4659:32">dc</name></expr></argument>, <argument pos:start="4659:35" pos:end="4659:36"><expr pos:start="4659:35" pos:end="4659:36"><name pos:start="4659:35" pos:end="4659:36">rd</name></expr></argument>, <argument pos:start="4659:39" pos:end="4659:45"><expr pos:start="4659:39" pos:end="4659:45"><name pos:start="4659:39" pos:end="4659:45">cpu_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="4661:1" pos:end="4661:57">#<cpp:directive pos:start="4661:2" pos:end="4661:3">if</cpp:directive> <expr pos:start="4661:5" pos:end="4661:57"><operator pos:start="4661:5" pos:end="4661:5">!</operator><call pos:start="4661:6" pos:end="4661:30"><name pos:start="4661:6" pos:end="4661:12">defined</name><argument_list pos:start="4661:13" pos:end="4661:30">(<argument pos:start="4661:14" pos:end="4661:29"><expr pos:start="4661:14" pos:end="4661:29"><name pos:start="4661:14" pos:end="4661:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4661:32" pos:end="4661:33">||</operator> <call pos:start="4661:35" pos:end="4661:57"><name pos:start="4661:35" pos:end="4661:41">defined</name><argument_list pos:start="4661:42" pos:end="4661:57">(<argument pos:start="4661:43" pos:end="4661:56"><expr pos:start="4661:43" pos:end="4661:56"><name pos:start="4661:43" pos:end="4661:56">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <label pos:start="4663:13" pos:end="4663:22"><name pos:start="4663:13" pos:end="4663:21">skip_move</name>:</label> <empty_stmt pos:start="4663:24" pos:end="4666:0">;</empty_stmt>

<cpp:endif pos:start="4665:1" pos:end="4665:6">#<cpp:directive pos:start="4665:2" pos:end="4665:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="4667:15" pos:end="4773:13">else if <condition pos:start="4667:23" pos:end="4667:49">(<expr pos:start="4667:24" pos:end="4667:48"><name pos:start="4667:24" pos:end="4667:26">xop</name> <operator pos:start="4667:28" pos:end="4667:29">&gt;=</operator> <literal type="number" pos:start="4667:31" pos:end="4667:34">0x20</literal> <operator pos:start="4667:36" pos:end="4667:37">&amp;&amp;</operator> <name pos:start="4667:39" pos:end="4667:41">xop</name> <operator pos:start="4667:43" pos:end="4667:43">&lt;</operator> <literal type="number" pos:start="4667:45" pos:end="4667:48">0x24</literal></expr>)</condition> <block pos:start="4667:51" pos:end="4773:13">{<block_content pos:start="4669:17" pos:end="4771:17">

                <if_stmt pos:start="4669:17" pos:end="4673:17"><if pos:start="4669:17" pos:end="4673:17">if <condition pos:start="4669:20" pos:end="4669:41">(<expr pos:start="4669:21" pos:end="4669:40"><call pos:start="4669:21" pos:end="4669:40"><name pos:start="4669:21" pos:end="4669:36">gen_trap_ifnofpu</name><argument_list pos:start="4669:37" pos:end="4669:40">(<argument pos:start="4669:38" pos:end="4669:39"><expr pos:start="4669:38" pos:end="4669:39"><name pos:start="4669:38" pos:end="4669:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4669:43" pos:end="4673:17">{<block_content pos:start="4671:21" pos:end="4671:34">

                    <goto pos:start="4671:21" pos:end="4671:34">goto <name pos:start="4671:26" pos:end="4671:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="4675:17" pos:end="4675:31"><expr pos:start="4675:17" pos:end="4675:30"><call pos:start="4675:17" pos:end="4675:30"><name pos:start="4675:17" pos:end="4675:26">save_state</name><argument_list pos:start="4675:27" pos:end="4675:30">(<argument pos:start="4675:28" pos:end="4675:29"><expr pos:start="4675:28" pos:end="4675:29"><name pos:start="4675:28" pos:end="4675:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="4677:17" pos:end="4771:17">switch <condition pos:start="4677:24" pos:end="4677:28">(<expr pos:start="4677:25" pos:end="4677:27"><name pos:start="4677:25" pos:end="4677:27">xop</name></expr>)</condition> <block pos:start="4677:30" pos:end="4771:17">{<block_content pos:start="4679:17" pos:end="4769:38">

                <case pos:start="4679:17" pos:end="4679:26">case <expr pos:start="4679:22" pos:end="4679:25"><literal type="number" pos:start="4679:22" pos:end="4679:25">0x20</literal></expr>:</case>      <comment type="block" pos:start="4679:33" pos:end="4679:53">/* ldf, load fpreg */</comment>

                    <expr_stmt pos:start="4681:21" pos:end="4681:51"><expr pos:start="4681:21" pos:end="4681:50"><call pos:start="4681:21" pos:end="4681:50"><name pos:start="4681:21" pos:end="4681:36">gen_address_mask</name><argument_list pos:start="4681:37" pos:end="4681:50">(<argument pos:start="4681:38" pos:end="4681:39"><expr pos:start="4681:38" pos:end="4681:39"><name pos:start="4681:38" pos:end="4681:39">dc</name></expr></argument>, <argument pos:start="4681:42" pos:end="4681:49"><expr pos:start="4681:42" pos:end="4681:49"><name pos:start="4681:42" pos:end="4681:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4683:21" pos:end="4683:72"><expr pos:start="4683:21" pos:end="4683:71"><call pos:start="4683:21" pos:end="4683:71"><name pos:start="4683:21" pos:end="4683:38">tcg_gen_qemu_ld32u</name><argument_list pos:start="4683:39" pos:end="4683:71">(<argument pos:start="4683:40" pos:end="4683:47"><expr pos:start="4683:40" pos:end="4683:47"><name pos:start="4683:40" pos:end="4683:47">cpu_tmp0</name></expr></argument>, <argument pos:start="4683:50" pos:end="4683:57"><expr pos:start="4683:50" pos:end="4683:57"><name pos:start="4683:50" pos:end="4683:57">cpu_addr</name></expr></argument>, <argument pos:start="4683:60" pos:end="4683:70"><expr pos:start="4683:60" pos:end="4683:70"><name pos:start="4683:60" pos:end="4683:70"><name pos:start="4683:60" pos:end="4683:61">dc</name><operator pos:start="4683:62" pos:end="4683:63">-&gt;</operator><name pos:start="4683:64" pos:end="4683:70">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4685:21" pos:end="4685:52"><expr pos:start="4685:21" pos:end="4685:51"><name pos:start="4685:21" pos:end="4685:30">cpu_dst_32</name> <operator pos:start="4685:32" pos:end="4685:32">=</operator> <call pos:start="4685:34" pos:end="4685:51"><name pos:start="4685:34" pos:end="4685:47">gen_dest_fpr_F</name><argument_list pos:start="4685:48" pos:end="4685:51">(<argument pos:start="4685:49" pos:end="4685:50"><expr pos:start="4685:49" pos:end="4685:50"><name pos:start="4685:49" pos:end="4685:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4687:21" pos:end="4687:63"><expr pos:start="4687:21" pos:end="4687:62"><call pos:start="4687:21" pos:end="4687:62"><name pos:start="4687:21" pos:end="4687:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4687:41" pos:end="4687:62">(<argument pos:start="4687:42" pos:end="4687:51"><expr pos:start="4687:42" pos:end="4687:51"><name pos:start="4687:42" pos:end="4687:51">cpu_dst_32</name></expr></argument>, <argument pos:start="4687:54" pos:end="4687:61"><expr pos:start="4687:54" pos:end="4687:61"><name pos:start="4687:54" pos:end="4687:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4689:21" pos:end="4689:56"><expr pos:start="4689:21" pos:end="4689:55"><call pos:start="4689:21" pos:end="4689:55"><name pos:start="4689:21" pos:end="4689:35">gen_store_fpr_F</name><argument_list pos:start="4689:36" pos:end="4689:55">(<argument pos:start="4689:37" pos:end="4689:38"><expr pos:start="4689:37" pos:end="4689:38"><name pos:start="4689:37" pos:end="4689:38">dc</name></expr></argument>, <argument pos:start="4689:41" pos:end="4689:42"><expr pos:start="4689:41" pos:end="4689:42"><name pos:start="4689:41" pos:end="4689:42">rd</name></expr></argument>, <argument pos:start="4689:45" pos:end="4689:54"><expr pos:start="4689:45" pos:end="4689:54"><name pos:start="4689:45" pos:end="4689:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4691:21" pos:end="4691:26">break;</break>

                <case pos:start="4693:17" pos:end="4696:0">case <expr pos:start="4693:22" pos:end="4693:25"><literal type="number" pos:start="4693:22" pos:end="4693:25">0x21</literal></expr>:</case>      <comment type="block" pos:start="4693:33" pos:end="4693:54">/* ldfsr, V9 ldxfsr */</comment>

<cpp:ifdef pos:start="4695:1" pos:end="4695:21">#<cpp:directive pos:start="4695:2" pos:end="4695:6">ifdef</cpp:directive> <name pos:start="4695:8" pos:end="4695:21">TARGET_SPARC64</name></cpp:ifdef>

                    <expr_stmt pos:start="4697:21" pos:end="4697:51"><expr pos:start="4697:21" pos:end="4697:50"><call pos:start="4697:21" pos:end="4697:50"><name pos:start="4697:21" pos:end="4697:36">gen_address_mask</name><argument_list pos:start="4697:37" pos:end="4697:50">(<argument pos:start="4697:38" pos:end="4697:39"><expr pos:start="4697:38" pos:end="4697:39"><name pos:start="4697:38" pos:end="4697:39">dc</name></expr></argument>, <argument pos:start="4697:42" pos:end="4697:49"><expr pos:start="4697:42" pos:end="4697:49"><name pos:start="4697:42" pos:end="4697:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="4699:21" pos:end="4714:0"><if pos:start="4699:21" pos:end="4714:0">if <condition pos:start="4699:24" pos:end="4699:32">(<expr pos:start="4699:25" pos:end="4699:31"><name pos:start="4699:25" pos:end="4699:26">rd</name> <operator pos:start="4699:28" pos:end="4699:29">==</operator> <literal type="number" pos:start="4699:31" pos:end="4699:31">1</literal></expr>)</condition> <block pos:start="4699:34" pos:end="4714:0">{<block_content pos:start="4701:25" pos:end="4709:30">

                        <decl_stmt pos:start="4701:25" pos:end="4701:58"><decl pos:start="4701:25" pos:end="4701:57"><type pos:start="4701:25" pos:end="4701:32"><name pos:start="4701:25" pos:end="4701:32">TCGv_i64</name></type> <name pos:start="4701:34" pos:end="4701:36">t64</name> <init pos:start="4701:38" pos:end="4701:57">= <expr pos:start="4701:40" pos:end="4701:57"><call pos:start="4701:40" pos:end="4701:57"><name pos:start="4701:40" pos:end="4701:55">tcg_temp_new_i64</name><argument_list pos:start="4701:56" pos:end="4701:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="4703:25" pos:end="4703:70"><expr pos:start="4703:25" pos:end="4703:69"><call pos:start="4703:25" pos:end="4703:69"><name pos:start="4703:25" pos:end="4703:41">tcg_gen_qemu_ld64</name><argument_list pos:start="4703:42" pos:end="4703:69">(<argument pos:start="4703:43" pos:end="4703:45"><expr pos:start="4703:43" pos:end="4703:45"><name pos:start="4703:43" pos:end="4703:45">t64</name></expr></argument>, <argument pos:start="4703:48" pos:end="4703:55"><expr pos:start="4703:48" pos:end="4703:55"><name pos:start="4703:48" pos:end="4703:55">cpu_addr</name></expr></argument>, <argument pos:start="4703:58" pos:end="4703:68"><expr pos:start="4703:58" pos:end="4703:68"><name pos:start="4703:58" pos:end="4703:68"><name pos:start="4703:58" pos:end="4703:59">dc</name><operator pos:start="4703:60" pos:end="4703:61">-&gt;</operator><name pos:start="4703:62" pos:end="4703:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4705:25" pos:end="4705:56"><expr pos:start="4705:25" pos:end="4705:55"><call pos:start="4705:25" pos:end="4705:55"><name pos:start="4705:25" pos:end="4705:41">gen_helper_ldxfsr</name><argument_list pos:start="4705:42" pos:end="4705:55">(<argument pos:start="4705:43" pos:end="4705:49"><expr pos:start="4705:43" pos:end="4705:49"><name pos:start="4705:43" pos:end="4705:49">cpu_env</name></expr></argument>, <argument pos:start="4705:52" pos:end="4705:54"><expr pos:start="4705:52" pos:end="4705:54"><name pos:start="4705:52" pos:end="4705:54">t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4707:25" pos:end="4707:47"><expr pos:start="4707:25" pos:end="4707:46"><call pos:start="4707:25" pos:end="4707:46"><name pos:start="4707:25" pos:end="4707:41">tcg_temp_free_i64</name><argument_list pos:start="4707:42" pos:end="4707:46">(<argument pos:start="4707:43" pos:end="4707:45"><expr pos:start="4707:43" pos:end="4707:45"><name pos:start="4707:43" pos:end="4707:45">t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="4709:25" pos:end="4709:30">break;</break>

                    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="4713:1" pos:end="4713:6">#<cpp:directive pos:start="4713:2" pos:end="4713:6">endif</cpp:directive></cpp:endif>

                    <block pos:start="4715:21" pos:end="4725:21">{<block_content pos:start="4717:25" pos:end="4723:55">

                        <decl_stmt pos:start="4717:25" pos:end="4717:56"><decl pos:start="4717:25" pos:end="4717:55"><type pos:start="4717:25" pos:end="4717:32"><name pos:start="4717:25" pos:end="4717:32">TCGv_i32</name></type> <name pos:start="4717:34" pos:end="4717:36">t32</name> <init pos:start="4717:38" pos:end="4717:55">= <expr pos:start="4717:40" pos:end="4717:55"><call pos:start="4717:40" pos:end="4717:55"><name pos:start="4717:40" pos:end="4717:51">get_temp_i32</name><argument_list pos:start="4717:52" pos:end="4717:55">(<argument pos:start="4717:53" pos:end="4717:54"><expr pos:start="4717:53" pos:end="4717:54"><name pos:start="4717:53" pos:end="4717:54">dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="4719:25" pos:end="4719:76"><expr pos:start="4719:25" pos:end="4719:75"><call pos:start="4719:25" pos:end="4719:75"><name pos:start="4719:25" pos:end="4719:42">tcg_gen_qemu_ld32u</name><argument_list pos:start="4719:43" pos:end="4719:75">(<argument pos:start="4719:44" pos:end="4719:51"><expr pos:start="4719:44" pos:end="4719:51"><name pos:start="4719:44" pos:end="4719:51">cpu_tmp0</name></expr></argument>, <argument pos:start="4719:54" pos:end="4719:61"><expr pos:start="4719:54" pos:end="4719:61"><name pos:start="4719:54" pos:end="4719:61">cpu_addr</name></expr></argument>, <argument pos:start="4719:64" pos:end="4719:74"><expr pos:start="4719:64" pos:end="4719:74"><name pos:start="4719:64" pos:end="4719:74"><name pos:start="4719:64" pos:end="4719:65">dc</name><operator pos:start="4719:66" pos:end="4719:67">-&gt;</operator><name pos:start="4719:68" pos:end="4719:74">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4721:25" pos:end="4721:60"><expr pos:start="4721:25" pos:end="4721:59"><call pos:start="4721:25" pos:end="4721:59"><name pos:start="4721:25" pos:end="4721:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4721:45" pos:end="4721:59">(<argument pos:start="4721:46" pos:end="4721:48"><expr pos:start="4721:46" pos:end="4721:48"><name pos:start="4721:46" pos:end="4721:48">t32</name></expr></argument>, <argument pos:start="4721:51" pos:end="4721:58"><expr pos:start="4721:51" pos:end="4721:58"><name pos:start="4721:51" pos:end="4721:58">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4723:25" pos:end="4723:55"><expr pos:start="4723:25" pos:end="4723:54"><call pos:start="4723:25" pos:end="4723:54"><name pos:start="4723:25" pos:end="4723:40">gen_helper_ldfsr</name><argument_list pos:start="4723:41" pos:end="4723:54">(<argument pos:start="4723:42" pos:end="4723:48"><expr pos:start="4723:42" pos:end="4723:48"><name pos:start="4723:42" pos:end="4723:48">cpu_env</name></expr></argument>, <argument pos:start="4723:51" pos:end="4723:53"><expr pos:start="4723:51" pos:end="4723:53"><name pos:start="4723:51" pos:end="4723:53">t32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="4727:21" pos:end="4727:26">break;</break>

                <case pos:start="4729:17" pos:end="4729:26">case <expr pos:start="4729:22" pos:end="4729:25"><literal type="number" pos:start="4729:22" pos:end="4729:25">0x22</literal></expr>:</case>      <comment type="block" pos:start="4729:33" pos:end="4729:59">/* ldqf, load quad fpreg */</comment>

                    <block pos:start="4731:21" pos:end="4751:21">{<block_content pos:start="4733:25" pos:end="4749:58">

                        <decl_stmt pos:start="4733:25" pos:end="4733:41"><decl pos:start="4733:25" pos:end="4733:40"><type pos:start="4733:25" pos:end="4733:32"><name pos:start="4733:25" pos:end="4733:32">TCGv_i32</name></type> <name pos:start="4733:34" pos:end="4733:40">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4737:25" pos:end="4737:56"><expr pos:start="4737:25" pos:end="4737:55"><call pos:start="4737:25" pos:end="4737:55"><name pos:start="4737:25" pos:end="4737:41">CHECK_FPU_FEATURE</name><argument_list pos:start="4737:42" pos:end="4737:55">(<argument pos:start="4737:43" pos:end="4737:44"><expr pos:start="4737:43" pos:end="4737:44"><name pos:start="4737:43" pos:end="4737:44">dc</name></expr></argument>, <argument pos:start="4737:47" pos:end="4737:54"><expr pos:start="4737:47" pos:end="4737:54"><name pos:start="4737:47" pos:end="4737:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4739:25" pos:end="4739:61"><expr pos:start="4739:25" pos:end="4739:60"><name pos:start="4739:25" pos:end="4739:31">r_const</name> <operator pos:start="4739:33" pos:end="4739:33">=</operator> <call pos:start="4739:35" pos:end="4739:60"><name pos:start="4739:35" pos:end="4739:47">tcg_const_i32</name><argument_list pos:start="4739:48" pos:end="4739:60">(<argument pos:start="4739:49" pos:end="4739:59"><expr pos:start="4739:49" pos:end="4739:59"><name pos:start="4739:49" pos:end="4739:59"><name pos:start="4739:49" pos:end="4739:50">dc</name><operator pos:start="4739:51" pos:end="4739:52">-&gt;</operator><name pos:start="4739:53" pos:end="4739:59">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4741:25" pos:end="4741:55"><expr pos:start="4741:25" pos:end="4741:54"><call pos:start="4741:25" pos:end="4741:54"><name pos:start="4741:25" pos:end="4741:40">gen_address_mask</name><argument_list pos:start="4741:41" pos:end="4741:54">(<argument pos:start="4741:42" pos:end="4741:43"><expr pos:start="4741:42" pos:end="4741:43"><name pos:start="4741:42" pos:end="4741:43">dc</name></expr></argument>, <argument pos:start="4741:46" pos:end="4741:53"><expr pos:start="4741:46" pos:end="4741:53"><name pos:start="4741:46" pos:end="4741:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4743:25" pos:end="4743:68"><expr pos:start="4743:25" pos:end="4743:67"><call pos:start="4743:25" pos:end="4743:67"><name pos:start="4743:25" pos:end="4743:39">gen_helper_ldqf</name><argument_list pos:start="4743:40" pos:end="4743:67">(<argument pos:start="4743:41" pos:end="4743:47"><expr pos:start="4743:41" pos:end="4743:47"><name pos:start="4743:41" pos:end="4743:47">cpu_env</name></expr></argument>, <argument pos:start="4743:50" pos:end="4743:57"><expr pos:start="4743:50" pos:end="4743:57"><name pos:start="4743:50" pos:end="4743:57">cpu_addr</name></expr></argument>, <argument pos:start="4743:60" pos:end="4743:66"><expr pos:start="4743:60" pos:end="4743:66"><name pos:start="4743:60" pos:end="4743:66">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4745:25" pos:end="4745:51"><expr pos:start="4745:25" pos:end="4745:50"><call pos:start="4745:25" pos:end="4745:50"><name pos:start="4745:25" pos:end="4745:41">tcg_temp_free_i32</name><argument_list pos:start="4745:42" pos:end="4745:50">(<argument pos:start="4745:43" pos:end="4745:49"><expr pos:start="4745:43" pos:end="4745:49"><name pos:start="4745:43" pos:end="4745:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4747:25" pos:end="4747:57"><expr pos:start="4747:25" pos:end="4747:56"><call pos:start="4747:25" pos:end="4747:56"><name pos:start="4747:25" pos:end="4747:44">gen_op_store_QT0_fpr</name><argument_list pos:start="4747:45" pos:end="4747:56">(<argument pos:start="4747:46" pos:end="4747:55"><expr pos:start="4747:46" pos:end="4747:55"><call pos:start="4747:46" pos:end="4747:55"><name pos:start="4747:46" pos:end="4747:51">QFPREG</name><argument_list pos:start="4747:52" pos:end="4747:55">(<argument pos:start="4747:53" pos:end="4747:54"><expr pos:start="4747:53" pos:end="4747:54"><name pos:start="4747:53" pos:end="4747:54">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4749:25" pos:end="4749:58"><expr pos:start="4749:25" pos:end="4749:57"><call pos:start="4749:25" pos:end="4749:57"><name pos:start="4749:25" pos:end="4749:45">gen_update_fprs_dirty</name><argument_list pos:start="4749:46" pos:end="4749:57">(<argument pos:start="4749:47" pos:end="4749:56"><expr pos:start="4749:47" pos:end="4749:56"><call pos:start="4749:47" pos:end="4749:56"><name pos:start="4749:47" pos:end="4749:52">QFPREG</name><argument_list pos:start="4749:53" pos:end="4749:56">(<argument pos:start="4749:54" pos:end="4749:55"><expr pos:start="4749:54" pos:end="4749:55"><name pos:start="4749:54" pos:end="4749:55">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="4753:21" pos:end="4753:26">break;</break>

                <case pos:start="4755:17" pos:end="4755:26">case <expr pos:start="4755:22" pos:end="4755:25"><literal type="number" pos:start="4755:22" pos:end="4755:25">0x23</literal></expr>:</case>      <comment type="block" pos:start="4755:33" pos:end="4755:61">/* lddf, load double fpreg */</comment>

                    <expr_stmt pos:start="4757:21" pos:end="4757:51"><expr pos:start="4757:21" pos:end="4757:50"><call pos:start="4757:21" pos:end="4757:50"><name pos:start="4757:21" pos:end="4757:36">gen_address_mask</name><argument_list pos:start="4757:37" pos:end="4757:50">(<argument pos:start="4757:38" pos:end="4757:39"><expr pos:start="4757:38" pos:end="4757:39"><name pos:start="4757:38" pos:end="4757:39">dc</name></expr></argument>, <argument pos:start="4757:42" pos:end="4757:49"><expr pos:start="4757:42" pos:end="4757:49"><name pos:start="4757:42" pos:end="4757:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4759:21" pos:end="4759:56"><expr pos:start="4759:21" pos:end="4759:55"><name pos:start="4759:21" pos:end="4759:30">cpu_dst_64</name> <operator pos:start="4759:32" pos:end="4759:32">=</operator> <call pos:start="4759:34" pos:end="4759:55"><name pos:start="4759:34" pos:end="4759:47">gen_dest_fpr_D</name><argument_list pos:start="4759:48" pos:end="4759:55">(<argument pos:start="4759:49" pos:end="4759:50"><expr pos:start="4759:49" pos:end="4759:50"><name pos:start="4759:49" pos:end="4759:50">dc</name></expr></argument>, <argument pos:start="4759:53" pos:end="4759:54"><expr pos:start="4759:53" pos:end="4759:54"><name pos:start="4759:53" pos:end="4759:54">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4761:21" pos:end="4761:73"><expr pos:start="4761:21" pos:end="4761:72"><call pos:start="4761:21" pos:end="4761:72"><name pos:start="4761:21" pos:end="4761:37">tcg_gen_qemu_ld64</name><argument_list pos:start="4761:38" pos:end="4761:72">(<argument pos:start="4761:39" pos:end="4761:48"><expr pos:start="4761:39" pos:end="4761:48"><name pos:start="4761:39" pos:end="4761:48">cpu_dst_64</name></expr></argument>, <argument pos:start="4761:51" pos:end="4761:58"><expr pos:start="4761:51" pos:end="4761:58"><name pos:start="4761:51" pos:end="4761:58">cpu_addr</name></expr></argument>, <argument pos:start="4761:61" pos:end="4761:71"><expr pos:start="4761:61" pos:end="4761:71"><name pos:start="4761:61" pos:end="4761:71"><name pos:start="4761:61" pos:end="4761:62">dc</name><operator pos:start="4761:63" pos:end="4761:64">-&gt;</operator><name pos:start="4761:65" pos:end="4761:71">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4763:21" pos:end="4763:56"><expr pos:start="4763:21" pos:end="4763:55"><call pos:start="4763:21" pos:end="4763:55"><name pos:start="4763:21" pos:end="4763:35">gen_store_fpr_D</name><argument_list pos:start="4763:36" pos:end="4763:55">(<argument pos:start="4763:37" pos:end="4763:38"><expr pos:start="4763:37" pos:end="4763:38"><name pos:start="4763:37" pos:end="4763:38">dc</name></expr></argument>, <argument pos:start="4763:41" pos:end="4763:42"><expr pos:start="4763:41" pos:end="4763:42"><name pos:start="4763:41" pos:end="4763:42">rd</name></expr></argument>, <argument pos:start="4763:45" pos:end="4763:54"><expr pos:start="4763:45" pos:end="4763:54"><name pos:start="4763:45" pos:end="4763:54">cpu_dst_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4765:21" pos:end="4765:26">break;</break>

                <default pos:start="4767:17" pos:end="4767:24">default:</default>

                    <goto pos:start="4769:21" pos:end="4769:38">goto <name pos:start="4769:26" pos:end="4769:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="4773:15" pos:end="4977:13">else if <condition pos:start="4773:23" pos:end="4775:49">(<expr pos:start="4773:24" pos:end="4775:48"><name pos:start="4773:24" pos:end="4773:26">xop</name> <operator pos:start="4773:28" pos:end="4773:28">&lt;</operator> <literal type="number" pos:start="4773:30" pos:end="4773:30">8</literal> <operator pos:start="4773:32" pos:end="4773:33">||</operator> <operator pos:start="4773:35" pos:end="4773:35">(</operator><name pos:start="4773:36" pos:end="4773:38">xop</name> <operator pos:start="4773:40" pos:end="4773:41">&gt;=</operator> <literal type="number" pos:start="4773:43" pos:end="4773:46">0x14</literal> <operator pos:start="4773:48" pos:end="4773:49">&amp;&amp;</operator> <name pos:start="4773:51" pos:end="4773:53">xop</name> <operator pos:start="4773:55" pos:end="4773:55">&lt;</operator> <literal type="number" pos:start="4773:57" pos:end="4773:60">0x18</literal><operator pos:start="4773:61" pos:end="4773:61">)</operator> <operator pos:start="4773:63" pos:end="4773:64">||</operator>

                       <name pos:start="4775:24" pos:end="4775:26">xop</name> <operator pos:start="4775:28" pos:end="4775:29">==</operator> <literal type="number" pos:start="4775:31" pos:end="4775:33">0xe</literal> <operator pos:start="4775:35" pos:end="4775:36">||</operator> <name pos:start="4775:38" pos:end="4775:40">xop</name> <operator pos:start="4775:42" pos:end="4775:43">==</operator> <literal type="number" pos:start="4775:45" pos:end="4775:48">0x1e</literal></expr>)</condition> <block pos:start="4775:51" pos:end="4977:13">{<block_content pos:start="4777:17" pos:end="4975:17">

                <decl_stmt pos:start="4777:17" pos:end="4777:52"><decl pos:start="4777:17" pos:end="4777:51"><type pos:start="4777:17" pos:end="4777:20"><name pos:start="4777:17" pos:end="4777:20">TCGv</name></type> <name pos:start="4777:22" pos:end="4777:28">cpu_val</name> <init pos:start="4777:30" pos:end="4777:51">= <expr pos:start="4777:32" pos:end="4777:51"><call pos:start="4777:32" pos:end="4777:51"><name pos:start="4777:32" pos:end="4777:43">gen_load_gpr</name><argument_list pos:start="4777:44" pos:end="4777:51">(<argument pos:start="4777:45" pos:end="4777:46"><expr pos:start="4777:45" pos:end="4777:46"><name pos:start="4777:45" pos:end="4777:46">dc</name></expr></argument>, <argument pos:start="4777:49" pos:end="4777:50"><expr pos:start="4777:49" pos:end="4777:50"><name pos:start="4777:49" pos:end="4777:50">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <switch pos:start="4781:17" pos:end="4975:17">switch <condition pos:start="4781:24" pos:end="4781:28">(<expr pos:start="4781:25" pos:end="4781:27"><name pos:start="4781:25" pos:end="4781:27">xop</name></expr>)</condition> <block pos:start="4781:30" pos:end="4975:17">{<block_content pos:start="4783:17" pos:end="4973:38">

                <case pos:start="4783:17" pos:end="4783:25">case <expr pos:start="4783:22" pos:end="4783:24"><literal type="number" pos:start="4783:22" pos:end="4783:24">0x4</literal></expr>:</case> <comment type="block" pos:start="4783:27" pos:end="4783:46">/* st, store word */</comment>

                    <expr_stmt pos:start="4785:21" pos:end="4785:51"><expr pos:start="4785:21" pos:end="4785:50"><call pos:start="4785:21" pos:end="4785:50"><name pos:start="4785:21" pos:end="4785:36">gen_address_mask</name><argument_list pos:start="4785:37" pos:end="4785:50">(<argument pos:start="4785:38" pos:end="4785:39"><expr pos:start="4785:38" pos:end="4785:39"><name pos:start="4785:38" pos:end="4785:39">dc</name></expr></argument>, <argument pos:start="4785:42" pos:end="4785:49"><expr pos:start="4785:42" pos:end="4785:49"><name pos:start="4785:42" pos:end="4785:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4787:21" pos:end="4787:70"><expr pos:start="4787:21" pos:end="4787:69"><call pos:start="4787:21" pos:end="4787:69"><name pos:start="4787:21" pos:end="4787:37">tcg_gen_qemu_st32</name><argument_list pos:start="4787:38" pos:end="4787:69">(<argument pos:start="4787:39" pos:end="4787:45"><expr pos:start="4787:39" pos:end="4787:45"><name pos:start="4787:39" pos:end="4787:45">cpu_val</name></expr></argument>, <argument pos:start="4787:48" pos:end="4787:55"><expr pos:start="4787:48" pos:end="4787:55"><name pos:start="4787:48" pos:end="4787:55">cpu_addr</name></expr></argument>, <argument pos:start="4787:58" pos:end="4787:68"><expr pos:start="4787:58" pos:end="4787:68"><name pos:start="4787:58" pos:end="4787:68"><name pos:start="4787:58" pos:end="4787:59">dc</name><operator pos:start="4787:60" pos:end="4787:61">-&gt;</operator><name pos:start="4787:62" pos:end="4787:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4789:21" pos:end="4789:26">break;</break>

                <case pos:start="4791:17" pos:end="4791:25">case <expr pos:start="4791:22" pos:end="4791:24"><literal type="number" pos:start="4791:22" pos:end="4791:24">0x5</literal></expr>:</case> <comment type="block" pos:start="4791:27" pos:end="4791:47">/* stb, store byte */</comment>

                    <expr_stmt pos:start="4793:21" pos:end="4793:51"><expr pos:start="4793:21" pos:end="4793:50"><call pos:start="4793:21" pos:end="4793:50"><name pos:start="4793:21" pos:end="4793:36">gen_address_mask</name><argument_list pos:start="4793:37" pos:end="4793:50">(<argument pos:start="4793:38" pos:end="4793:39"><expr pos:start="4793:38" pos:end="4793:39"><name pos:start="4793:38" pos:end="4793:39">dc</name></expr></argument>, <argument pos:start="4793:42" pos:end="4793:49"><expr pos:start="4793:42" pos:end="4793:49"><name pos:start="4793:42" pos:end="4793:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4795:21" pos:end="4795:69"><expr pos:start="4795:21" pos:end="4795:68"><call pos:start="4795:21" pos:end="4795:68"><name pos:start="4795:21" pos:end="4795:36">tcg_gen_qemu_st8</name><argument_list pos:start="4795:37" pos:end="4795:68">(<argument pos:start="4795:38" pos:end="4795:44"><expr pos:start="4795:38" pos:end="4795:44"><name pos:start="4795:38" pos:end="4795:44">cpu_val</name></expr></argument>, <argument pos:start="4795:47" pos:end="4795:54"><expr pos:start="4795:47" pos:end="4795:54"><name pos:start="4795:47" pos:end="4795:54">cpu_addr</name></expr></argument>, <argument pos:start="4795:57" pos:end="4795:67"><expr pos:start="4795:57" pos:end="4795:67"><name pos:start="4795:57" pos:end="4795:67"><name pos:start="4795:57" pos:end="4795:58">dc</name><operator pos:start="4795:59" pos:end="4795:60">-&gt;</operator><name pos:start="4795:61" pos:end="4795:67">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4797:21" pos:end="4797:26">break;</break>

                <case pos:start="4799:17" pos:end="4799:25">case <expr pos:start="4799:22" pos:end="4799:24"><literal type="number" pos:start="4799:22" pos:end="4799:24">0x6</literal></expr>:</case> <comment type="block" pos:start="4799:27" pos:end="4799:51">/* sth, store halfword */</comment>

                    <expr_stmt pos:start="4801:21" pos:end="4801:51"><expr pos:start="4801:21" pos:end="4801:50"><call pos:start="4801:21" pos:end="4801:50"><name pos:start="4801:21" pos:end="4801:36">gen_address_mask</name><argument_list pos:start="4801:37" pos:end="4801:50">(<argument pos:start="4801:38" pos:end="4801:39"><expr pos:start="4801:38" pos:end="4801:39"><name pos:start="4801:38" pos:end="4801:39">dc</name></expr></argument>, <argument pos:start="4801:42" pos:end="4801:49"><expr pos:start="4801:42" pos:end="4801:49"><name pos:start="4801:42" pos:end="4801:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4803:21" pos:end="4803:70"><expr pos:start="4803:21" pos:end="4803:69"><call pos:start="4803:21" pos:end="4803:69"><name pos:start="4803:21" pos:end="4803:37">tcg_gen_qemu_st16</name><argument_list pos:start="4803:38" pos:end="4803:69">(<argument pos:start="4803:39" pos:end="4803:45"><expr pos:start="4803:39" pos:end="4803:45"><name pos:start="4803:39" pos:end="4803:45">cpu_val</name></expr></argument>, <argument pos:start="4803:48" pos:end="4803:55"><expr pos:start="4803:48" pos:end="4803:55"><name pos:start="4803:48" pos:end="4803:55">cpu_addr</name></expr></argument>, <argument pos:start="4803:58" pos:end="4803:68"><expr pos:start="4803:58" pos:end="4803:68"><name pos:start="4803:58" pos:end="4803:68"><name pos:start="4803:58" pos:end="4803:59">dc</name><operator pos:start="4803:60" pos:end="4803:61">-&gt;</operator><name pos:start="4803:62" pos:end="4803:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4805:21" pos:end="4805:26">break;</break>

                <case pos:start="4807:17" pos:end="4807:25">case <expr pos:start="4807:22" pos:end="4807:24"><literal type="number" pos:start="4807:22" pos:end="4807:24">0x7</literal></expr>:</case> <comment type="block" pos:start="4807:27" pos:end="4807:54">/* std, store double word */</comment>

                    <if_stmt pos:start="4809:21" pos:end="4847:21"><if pos:start="4809:21" pos:end="4811:42">if <condition pos:start="4809:24" pos:end="4809:31">(<expr pos:start="4809:25" pos:end="4809:30"><name pos:start="4809:25" pos:end="4809:26">rd</name> <operator pos:start="4809:28" pos:end="4809:28">&amp;</operator> <literal type="number" pos:start="4809:30" pos:end="4809:30">1</literal></expr>)</condition><block type="pseudo" pos:start="4811:25" pos:end="4811:42"><block_content pos:start="4811:25" pos:end="4811:42">

                        <goto pos:start="4811:25" pos:end="4811:42">goto <name pos:start="4811:30" pos:end="4811:41">illegal_insn</name>;</goto></block_content></block></if>

                    <else pos:start="4813:21" pos:end="4847:21">else <block pos:start="4813:26" pos:end="4847:21">{<block_content pos:start="4815:25" pos:end="4845:47">

                        <decl_stmt pos:start="4815:25" pos:end="4815:41"><decl pos:start="4815:25" pos:end="4815:40"><type pos:start="4815:25" pos:end="4815:32"><name pos:start="4815:25" pos:end="4815:32">TCGv_i32</name></type> <name pos:start="4815:34" pos:end="4815:40">r_const</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="4817:25" pos:end="4817:37"><decl pos:start="4817:25" pos:end="4817:36"><type pos:start="4817:25" pos:end="4817:32"><name pos:start="4817:25" pos:end="4817:32">TCGv_i64</name></type> <name pos:start="4817:34" pos:end="4817:36">t64</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="4819:25" pos:end="4819:32"><decl pos:start="4819:25" pos:end="4819:31"><type pos:start="4819:25" pos:end="4819:28"><name pos:start="4819:25" pos:end="4819:28">TCGv</name></type> <name pos:start="4819:30" pos:end="4819:31">lo</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4823:25" pos:end="4823:39"><expr pos:start="4823:25" pos:end="4823:38"><call pos:start="4823:25" pos:end="4823:38"><name pos:start="4823:25" pos:end="4823:34">save_state</name><argument_list pos:start="4823:35" pos:end="4823:38">(<argument pos:start="4823:36" pos:end="4823:37"><expr pos:start="4823:36" pos:end="4823:37"><name pos:start="4823:36" pos:end="4823:37">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4825:25" pos:end="4825:55"><expr pos:start="4825:25" pos:end="4825:54"><call pos:start="4825:25" pos:end="4825:54"><name pos:start="4825:25" pos:end="4825:40">gen_address_mask</name><argument_list pos:start="4825:41" pos:end="4825:54">(<argument pos:start="4825:42" pos:end="4825:43"><expr pos:start="4825:42" pos:end="4825:43"><name pos:start="4825:42" pos:end="4825:43">dc</name></expr></argument>, <argument pos:start="4825:46" pos:end="4825:53"><expr pos:start="4825:46" pos:end="4825:53"><name pos:start="4825:46" pos:end="4825:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4827:25" pos:end="4827:51"><expr pos:start="4827:25" pos:end="4827:50"><name pos:start="4827:25" pos:end="4827:31">r_const</name> <operator pos:start="4827:33" pos:end="4827:33">=</operator> <call pos:start="4827:35" pos:end="4827:50"><name pos:start="4827:35" pos:end="4827:47">tcg_const_i32</name><argument_list pos:start="4827:48" pos:end="4827:50">(<argument pos:start="4827:49" pos:end="4827:49"><expr pos:start="4827:49" pos:end="4827:49"><literal type="number" pos:start="4827:49" pos:end="4827:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="4829:25" pos:end="4829:56">/* XXX remove alignment check */</comment>

                        <expr_stmt pos:start="4831:25" pos:end="4831:75"><expr pos:start="4831:25" pos:end="4831:74"><call pos:start="4831:25" pos:end="4831:74"><name pos:start="4831:25" pos:end="4831:46">gen_helper_check_align</name><argument_list pos:start="4831:47" pos:end="4831:74">(<argument pos:start="4831:48" pos:end="4831:54"><expr pos:start="4831:48" pos:end="4831:54"><name pos:start="4831:48" pos:end="4831:54">cpu_env</name></expr></argument>, <argument pos:start="4831:57" pos:end="4831:64"><expr pos:start="4831:57" pos:end="4831:64"><name pos:start="4831:57" pos:end="4831:64">cpu_addr</name></expr></argument>, <argument pos:start="4831:67" pos:end="4831:73"><expr pos:start="4831:67" pos:end="4831:73"><name pos:start="4831:67" pos:end="4831:73">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4833:25" pos:end="4833:51"><expr pos:start="4833:25" pos:end="4833:50"><call pos:start="4833:25" pos:end="4833:50"><name pos:start="4833:25" pos:end="4833:41">tcg_temp_free_i32</name><argument_list pos:start="4833:42" pos:end="4833:50">(<argument pos:start="4833:43" pos:end="4833:49"><expr pos:start="4833:43" pos:end="4833:49"><name pos:start="4833:43" pos:end="4833:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4835:25" pos:end="4835:54"><expr pos:start="4835:25" pos:end="4835:53"><name pos:start="4835:25" pos:end="4835:26">lo</name> <operator pos:start="4835:28" pos:end="4835:28">=</operator> <call pos:start="4835:30" pos:end="4835:53"><name pos:start="4835:30" pos:end="4835:41">gen_load_gpr</name><argument_list pos:start="4835:42" pos:end="4835:53">(<argument pos:start="4835:43" pos:end="4835:44"><expr pos:start="4835:43" pos:end="4835:44"><name pos:start="4835:43" pos:end="4835:44">dc</name></expr></argument>, <argument pos:start="4835:47" pos:end="4835:52"><expr pos:start="4835:47" pos:end="4835:52"><name pos:start="4835:47" pos:end="4835:48">rd</name> <operator pos:start="4835:50" pos:end="4835:50">+</operator> <literal type="number" pos:start="4835:52" pos:end="4835:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="4839:25" pos:end="4839:49"><expr pos:start="4839:25" pos:end="4839:48"><name pos:start="4839:25" pos:end="4839:27">t64</name> <operator pos:start="4839:29" pos:end="4839:29">=</operator> <call pos:start="4839:31" pos:end="4839:48"><name pos:start="4839:31" pos:end="4839:46">tcg_temp_new_i64</name><argument_list pos:start="4839:47" pos:end="4839:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4841:25" pos:end="4841:64"><expr pos:start="4841:25" pos:end="4841:63"><call pos:start="4841:25" pos:end="4841:63"><name pos:start="4841:25" pos:end="4841:45">tcg_gen_concat_tl_i64</name><argument_list pos:start="4841:46" pos:end="4841:63">(<argument pos:start="4841:47" pos:end="4841:49"><expr pos:start="4841:47" pos:end="4841:49"><name pos:start="4841:47" pos:end="4841:49">t64</name></expr></argument>, <argument pos:start="4841:52" pos:end="4841:53"><expr pos:start="4841:52" pos:end="4841:53"><name pos:start="4841:52" pos:end="4841:53">lo</name></expr></argument>, <argument pos:start="4841:56" pos:end="4841:62"><expr pos:start="4841:56" pos:end="4841:62"><name pos:start="4841:56" pos:end="4841:62">cpu_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4843:25" pos:end="4843:70"><expr pos:start="4843:25" pos:end="4843:69"><call pos:start="4843:25" pos:end="4843:69"><name pos:start="4843:25" pos:end="4843:41">tcg_gen_qemu_st64</name><argument_list pos:start="4843:42" pos:end="4843:69">(<argument pos:start="4843:43" pos:end="4843:45"><expr pos:start="4843:43" pos:end="4843:45"><name pos:start="4843:43" pos:end="4843:45">t64</name></expr></argument>, <argument pos:start="4843:48" pos:end="4843:55"><expr pos:start="4843:48" pos:end="4843:55"><name pos:start="4843:48" pos:end="4843:55">cpu_addr</name></expr></argument>, <argument pos:start="4843:58" pos:end="4843:68"><expr pos:start="4843:58" pos:end="4843:68"><name pos:start="4843:58" pos:end="4843:68"><name pos:start="4843:58" pos:end="4843:59">dc</name><operator pos:start="4843:60" pos:end="4843:61">-&gt;</operator><name pos:start="4843:62" pos:end="4843:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4845:25" pos:end="4845:47"><expr pos:start="4845:25" pos:end="4845:46"><call pos:start="4845:25" pos:end="4845:46"><name pos:start="4845:25" pos:end="4845:41">tcg_temp_free_i64</name><argument_list pos:start="4845:42" pos:end="4845:46">(<argument pos:start="4845:43" pos:end="4845:45"><expr pos:start="4845:43" pos:end="4845:45"><name pos:start="4845:43" pos:end="4845:45">t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="4849:21" pos:end="4852:0">break;</break>

<cpp:if pos:start="4851:1" pos:end="4851:57">#<cpp:directive pos:start="4851:2" pos:end="4851:3">if</cpp:directive> <expr pos:start="4851:5" pos:end="4851:57"><operator pos:start="4851:5" pos:end="4851:5">!</operator><call pos:start="4851:6" pos:end="4851:30"><name pos:start="4851:6" pos:end="4851:12">defined</name><argument_list pos:start="4851:13" pos:end="4851:30">(<argument pos:start="4851:14" pos:end="4851:29"><expr pos:start="4851:14" pos:end="4851:29"><name pos:start="4851:14" pos:end="4851:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4851:32" pos:end="4851:33">||</operator> <call pos:start="4851:35" pos:end="4851:57"><name pos:start="4851:35" pos:end="4851:41">defined</name><argument_list pos:start="4851:42" pos:end="4851:57">(<argument pos:start="4851:43" pos:end="4851:56"><expr pos:start="4851:43" pos:end="4851:56"><name pos:start="4851:43" pos:end="4851:56">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="4853:17" pos:end="4856:0">case <expr pos:start="4853:22" pos:end="4853:25"><literal type="number" pos:start="4853:22" pos:end="4853:25">0x14</literal></expr>:</case> <comment type="block" pos:start="4853:28" pos:end="4853:67">/* sta, V9 stwa, store word alternate */</comment>

<cpp:ifndef pos:start="4855:1" pos:end="4855:22">#<cpp:directive pos:start="4855:2" pos:end="4855:7">ifndef</cpp:directive> <name pos:start="4855:9" pos:end="4855:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4857:21" pos:end="4859:42"><if pos:start="4857:21" pos:end="4859:42">if <condition pos:start="4857:24" pos:end="4857:31">(<expr pos:start="4857:25" pos:end="4857:30"><name pos:start="4857:25" pos:end="4857:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4859:25" pos:end="4859:42"><block_content pos:start="4859:25" pos:end="4859:42">

                        <goto pos:start="4859:25" pos:end="4859:42">goto <name pos:start="4859:30" pos:end="4859:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4861:21" pos:end="4866:0"><if pos:start="4861:21" pos:end="4866:0">if <condition pos:start="4861:24" pos:end="4861:40">(<expr pos:start="4861:25" pos:end="4861:39"><operator pos:start="4861:25" pos:end="4861:25">!</operator><call pos:start="4861:26" pos:end="4861:39"><name pos:start="4861:26" pos:end="4861:35">supervisor</name><argument_list pos:start="4861:36" pos:end="4861:39">(<argument pos:start="4861:37" pos:end="4861:38"><expr pos:start="4861:37" pos:end="4861:38"><name pos:start="4861:37" pos:end="4861:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4863:25" pos:end="4866:0"><block_content pos:start="4863:25" pos:end="4866:0">

                        <goto pos:start="4863:25" pos:end="4866:0">goto <name pos:start="4863:30" pos:end="4863:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4865:1" pos:end="4865:6">#<cpp:directive pos:start="4865:2" pos:end="4865:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4867:21" pos:end="4867:35"><expr pos:start="4867:21" pos:end="4867:34"><call pos:start="4867:21" pos:end="4867:34"><name pos:start="4867:21" pos:end="4867:30">save_state</name><argument_list pos:start="4867:31" pos:end="4867:34">(<argument pos:start="4867:32" pos:end="4867:33"><expr pos:start="4867:32" pos:end="4867:33"><name pos:start="4867:32" pos:end="4867:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4869:21" pos:end="4869:59"><expr pos:start="4869:21" pos:end="4869:58"><call pos:start="4869:21" pos:end="4869:58"><name pos:start="4869:21" pos:end="4869:30">gen_st_asi</name><argument_list pos:start="4869:31" pos:end="4869:58">(<argument pos:start="4869:32" pos:end="4869:38"><expr pos:start="4869:32" pos:end="4869:38"><name pos:start="4869:32" pos:end="4869:38">cpu_val</name></expr></argument>, <argument pos:start="4869:41" pos:end="4869:48"><expr pos:start="4869:41" pos:end="4869:48"><name pos:start="4869:41" pos:end="4869:48">cpu_addr</name></expr></argument>, <argument pos:start="4869:51" pos:end="4869:54"><expr pos:start="4869:51" pos:end="4869:54"><name pos:start="4869:51" pos:end="4869:54">insn</name></expr></argument>, <argument pos:start="4869:57" pos:end="4869:57"><expr pos:start="4869:57" pos:end="4869:57"><literal type="number" pos:start="4869:57" pos:end="4869:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4871:21" pos:end="4871:41"><expr pos:start="4871:21" pos:end="4871:40"><name pos:start="4871:21" pos:end="4871:27"><name pos:start="4871:21" pos:end="4871:22">dc</name><operator pos:start="4871:23" pos:end="4871:24">-&gt;</operator><name pos:start="4871:25" pos:end="4871:27">npc</name></name> <operator pos:start="4871:29" pos:end="4871:29">=</operator> <name pos:start="4871:31" pos:end="4871:40">DYNAMIC_PC</name></expr>;</expr_stmt>

                    <break pos:start="4873:21" pos:end="4873:26">break;</break>

                <case pos:start="4875:17" pos:end="4878:0">case <expr pos:start="4875:22" pos:end="4875:25"><literal type="number" pos:start="4875:22" pos:end="4875:25">0x15</literal></expr>:</case> <comment type="block" pos:start="4875:28" pos:end="4875:59">/* stba, store byte alternate */</comment>

<cpp:ifndef pos:start="4877:1" pos:end="4877:22">#<cpp:directive pos:start="4877:2" pos:end="4877:7">ifndef</cpp:directive> <name pos:start="4877:9" pos:end="4877:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4879:21" pos:end="4881:42"><if pos:start="4879:21" pos:end="4881:42">if <condition pos:start="4879:24" pos:end="4879:31">(<expr pos:start="4879:25" pos:end="4879:30"><name pos:start="4879:25" pos:end="4879:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4881:25" pos:end="4881:42"><block_content pos:start="4881:25" pos:end="4881:42">

                        <goto pos:start="4881:25" pos:end="4881:42">goto <name pos:start="4881:30" pos:end="4881:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4883:21" pos:end="4888:0"><if pos:start="4883:21" pos:end="4888:0">if <condition pos:start="4883:24" pos:end="4883:40">(<expr pos:start="4883:25" pos:end="4883:39"><operator pos:start="4883:25" pos:end="4883:25">!</operator><call pos:start="4883:26" pos:end="4883:39"><name pos:start="4883:26" pos:end="4883:35">supervisor</name><argument_list pos:start="4883:36" pos:end="4883:39">(<argument pos:start="4883:37" pos:end="4883:38"><expr pos:start="4883:37" pos:end="4883:38"><name pos:start="4883:37" pos:end="4883:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4885:25" pos:end="4888:0"><block_content pos:start="4885:25" pos:end="4888:0">

                        <goto pos:start="4885:25" pos:end="4888:0">goto <name pos:start="4885:30" pos:end="4885:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4887:1" pos:end="4887:6">#<cpp:directive pos:start="4887:2" pos:end="4887:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4889:21" pos:end="4889:35"><expr pos:start="4889:21" pos:end="4889:34"><call pos:start="4889:21" pos:end="4889:34"><name pos:start="4889:21" pos:end="4889:30">save_state</name><argument_list pos:start="4889:31" pos:end="4889:34">(<argument pos:start="4889:32" pos:end="4889:33"><expr pos:start="4889:32" pos:end="4889:33"><name pos:start="4889:32" pos:end="4889:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4891:21" pos:end="4891:59"><expr pos:start="4891:21" pos:end="4891:58"><call pos:start="4891:21" pos:end="4891:58"><name pos:start="4891:21" pos:end="4891:30">gen_st_asi</name><argument_list pos:start="4891:31" pos:end="4891:58">(<argument pos:start="4891:32" pos:end="4891:38"><expr pos:start="4891:32" pos:end="4891:38"><name pos:start="4891:32" pos:end="4891:38">cpu_val</name></expr></argument>, <argument pos:start="4891:41" pos:end="4891:48"><expr pos:start="4891:41" pos:end="4891:48"><name pos:start="4891:41" pos:end="4891:48">cpu_addr</name></expr></argument>, <argument pos:start="4891:51" pos:end="4891:54"><expr pos:start="4891:51" pos:end="4891:54"><name pos:start="4891:51" pos:end="4891:54">insn</name></expr></argument>, <argument pos:start="4891:57" pos:end="4891:57"><expr pos:start="4891:57" pos:end="4891:57"><literal type="number" pos:start="4891:57" pos:end="4891:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4893:21" pos:end="4893:41"><expr pos:start="4893:21" pos:end="4893:40"><name pos:start="4893:21" pos:end="4893:27"><name pos:start="4893:21" pos:end="4893:22">dc</name><operator pos:start="4893:23" pos:end="4893:24">-&gt;</operator><name pos:start="4893:25" pos:end="4893:27">npc</name></name> <operator pos:start="4893:29" pos:end="4893:29">=</operator> <name pos:start="4893:31" pos:end="4893:40">DYNAMIC_PC</name></expr>;</expr_stmt>

                    <break pos:start="4895:21" pos:end="4895:26">break;</break>

                <case pos:start="4897:17" pos:end="4900:0">case <expr pos:start="4897:22" pos:end="4897:25"><literal type="number" pos:start="4897:22" pos:end="4897:25">0x16</literal></expr>:</case> <comment type="block" pos:start="4897:28" pos:end="4897:63">/* stha, store halfword alternate */</comment>

<cpp:ifndef pos:start="4899:1" pos:end="4899:22">#<cpp:directive pos:start="4899:2" pos:end="4899:7">ifndef</cpp:directive> <name pos:start="4899:9" pos:end="4899:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4901:21" pos:end="4903:42"><if pos:start="4901:21" pos:end="4903:42">if <condition pos:start="4901:24" pos:end="4901:31">(<expr pos:start="4901:25" pos:end="4901:30"><name pos:start="4901:25" pos:end="4901:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4903:25" pos:end="4903:42"><block_content pos:start="4903:25" pos:end="4903:42">

                        <goto pos:start="4903:25" pos:end="4903:42">goto <name pos:start="4903:30" pos:end="4903:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4905:21" pos:end="4910:0"><if pos:start="4905:21" pos:end="4910:0">if <condition pos:start="4905:24" pos:end="4905:40">(<expr pos:start="4905:25" pos:end="4905:39"><operator pos:start="4905:25" pos:end="4905:25">!</operator><call pos:start="4905:26" pos:end="4905:39"><name pos:start="4905:26" pos:end="4905:35">supervisor</name><argument_list pos:start="4905:36" pos:end="4905:39">(<argument pos:start="4905:37" pos:end="4905:38"><expr pos:start="4905:37" pos:end="4905:38"><name pos:start="4905:37" pos:end="4905:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4907:25" pos:end="4910:0"><block_content pos:start="4907:25" pos:end="4910:0">

                        <goto pos:start="4907:25" pos:end="4910:0">goto <name pos:start="4907:30" pos:end="4907:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4909:1" pos:end="4909:6">#<cpp:directive pos:start="4909:2" pos:end="4909:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4911:21" pos:end="4911:35"><expr pos:start="4911:21" pos:end="4911:34"><call pos:start="4911:21" pos:end="4911:34"><name pos:start="4911:21" pos:end="4911:30">save_state</name><argument_list pos:start="4911:31" pos:end="4911:34">(<argument pos:start="4911:32" pos:end="4911:33"><expr pos:start="4911:32" pos:end="4911:33"><name pos:start="4911:32" pos:end="4911:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4913:21" pos:end="4913:59"><expr pos:start="4913:21" pos:end="4913:58"><call pos:start="4913:21" pos:end="4913:58"><name pos:start="4913:21" pos:end="4913:30">gen_st_asi</name><argument_list pos:start="4913:31" pos:end="4913:58">(<argument pos:start="4913:32" pos:end="4913:38"><expr pos:start="4913:32" pos:end="4913:38"><name pos:start="4913:32" pos:end="4913:38">cpu_val</name></expr></argument>, <argument pos:start="4913:41" pos:end="4913:48"><expr pos:start="4913:41" pos:end="4913:48"><name pos:start="4913:41" pos:end="4913:48">cpu_addr</name></expr></argument>, <argument pos:start="4913:51" pos:end="4913:54"><expr pos:start="4913:51" pos:end="4913:54"><name pos:start="4913:51" pos:end="4913:54">insn</name></expr></argument>, <argument pos:start="4913:57" pos:end="4913:57"><expr pos:start="4913:57" pos:end="4913:57"><literal type="number" pos:start="4913:57" pos:end="4913:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4915:21" pos:end="4915:41"><expr pos:start="4915:21" pos:end="4915:40"><name pos:start="4915:21" pos:end="4915:27"><name pos:start="4915:21" pos:end="4915:22">dc</name><operator pos:start="4915:23" pos:end="4915:24">-&gt;</operator><name pos:start="4915:25" pos:end="4915:27">npc</name></name> <operator pos:start="4915:29" pos:end="4915:29">=</operator> <name pos:start="4915:31" pos:end="4915:40">DYNAMIC_PC</name></expr>;</expr_stmt>

                    <break pos:start="4917:21" pos:end="4917:26">break;</break>

                <case pos:start="4919:17" pos:end="4922:0">case <expr pos:start="4919:22" pos:end="4919:25"><literal type="number" pos:start="4919:22" pos:end="4919:25">0x17</literal></expr>:</case> <comment type="block" pos:start="4919:28" pos:end="4919:66">/* stda, store double word alternate */</comment>

<cpp:ifndef pos:start="4921:1" pos:end="4921:22">#<cpp:directive pos:start="4921:2" pos:end="4921:7">ifndef</cpp:directive> <name pos:start="4921:9" pos:end="4921:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4923:21" pos:end="4925:42"><if pos:start="4923:21" pos:end="4925:42">if <condition pos:start="4923:24" pos:end="4923:31">(<expr pos:start="4923:25" pos:end="4923:30"><name pos:start="4923:25" pos:end="4923:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4925:25" pos:end="4925:42"><block_content pos:start="4925:25" pos:end="4925:42">

                        <goto pos:start="4925:25" pos:end="4925:42">goto <name pos:start="4925:30" pos:end="4925:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4927:21" pos:end="4932:0"><if pos:start="4927:21" pos:end="4932:0">if <condition pos:start="4927:24" pos:end="4927:40">(<expr pos:start="4927:25" pos:end="4927:39"><operator pos:start="4927:25" pos:end="4927:25">!</operator><call pos:start="4927:26" pos:end="4927:39"><name pos:start="4927:26" pos:end="4927:35">supervisor</name><argument_list pos:start="4927:36" pos:end="4927:39">(<argument pos:start="4927:37" pos:end="4927:38"><expr pos:start="4927:37" pos:end="4927:38"><name pos:start="4927:37" pos:end="4927:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4929:25" pos:end="4932:0"><block_content pos:start="4929:25" pos:end="4932:0">

                        <goto pos:start="4929:25" pos:end="4932:0">goto <name pos:start="4929:30" pos:end="4929:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4931:1" pos:end="4931:6">#<cpp:directive pos:start="4931:2" pos:end="4931:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="4933:21" pos:end="4943:21"><if pos:start="4933:21" pos:end="4935:42">if <condition pos:start="4933:24" pos:end="4933:31">(<expr pos:start="4933:25" pos:end="4933:30"><name pos:start="4933:25" pos:end="4933:26">rd</name> <operator pos:start="4933:28" pos:end="4933:28">&amp;</operator> <literal type="number" pos:start="4933:30" pos:end="4933:30">1</literal></expr>)</condition><block type="pseudo" pos:start="4935:25" pos:end="4935:42"><block_content pos:start="4935:25" pos:end="4935:42">

                        <goto pos:start="4935:25" pos:end="4935:42">goto <name pos:start="4935:30" pos:end="4935:41">illegal_insn</name>;</goto></block_content></block></if>

                    <else pos:start="4937:21" pos:end="4943:21">else <block pos:start="4937:26" pos:end="4943:21">{<block_content pos:start="4939:25" pos:end="4941:70">

                        <expr_stmt pos:start="4939:25" pos:end="4939:39"><expr pos:start="4939:25" pos:end="4939:38"><call pos:start="4939:25" pos:end="4939:38"><name pos:start="4939:25" pos:end="4939:34">save_state</name><argument_list pos:start="4939:35" pos:end="4939:38">(<argument pos:start="4939:36" pos:end="4939:37"><expr pos:start="4939:36" pos:end="4939:37"><name pos:start="4939:36" pos:end="4939:37">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4941:25" pos:end="4941:70"><expr pos:start="4941:25" pos:end="4941:69"><call pos:start="4941:25" pos:end="4941:69"><name pos:start="4941:25" pos:end="4941:36">gen_stda_asi</name><argument_list pos:start="4941:37" pos:end="4941:69">(<argument pos:start="4941:38" pos:end="4941:39"><expr pos:start="4941:38" pos:end="4941:39"><name pos:start="4941:38" pos:end="4941:39">dc</name></expr></argument>, <argument pos:start="4941:42" pos:end="4941:48"><expr pos:start="4941:42" pos:end="4941:48"><name pos:start="4941:42" pos:end="4941:48">cpu_val</name></expr></argument>, <argument pos:start="4941:51" pos:end="4941:58"><expr pos:start="4941:51" pos:end="4941:58"><name pos:start="4941:51" pos:end="4941:58">cpu_addr</name></expr></argument>, <argument pos:start="4941:61" pos:end="4941:64"><expr pos:start="4941:61" pos:end="4941:64"><name pos:start="4941:61" pos:end="4941:64">insn</name></expr></argument>, <argument pos:start="4941:67" pos:end="4941:68"><expr pos:start="4941:67" pos:end="4941:68"><name pos:start="4941:67" pos:end="4941:68">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="4945:21" pos:end="4950:0">break;</break>

<cpp:endif pos:start="4947:1" pos:end="4947:6">#<cpp:directive pos:start="4947:2" pos:end="4947:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4949:1" pos:end="4949:21">#<cpp:directive pos:start="4949:2" pos:end="4949:6">ifdef</cpp:directive> <name pos:start="4949:8" pos:end="4949:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="4951:17" pos:end="4951:26">case <expr pos:start="4951:22" pos:end="4951:25"><literal type="number" pos:start="4951:22" pos:end="4951:25">0x0e</literal></expr>:</case> <comment type="block" pos:start="4951:28" pos:end="4951:39">/* V9 stx */</comment>

                    <expr_stmt pos:start="4953:21" pos:end="4953:51"><expr pos:start="4953:21" pos:end="4953:50"><call pos:start="4953:21" pos:end="4953:50"><name pos:start="4953:21" pos:end="4953:36">gen_address_mask</name><argument_list pos:start="4953:37" pos:end="4953:50">(<argument pos:start="4953:38" pos:end="4953:39"><expr pos:start="4953:38" pos:end="4953:39"><name pos:start="4953:38" pos:end="4953:39">dc</name></expr></argument>, <argument pos:start="4953:42" pos:end="4953:49"><expr pos:start="4953:42" pos:end="4953:49"><name pos:start="4953:42" pos:end="4953:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4955:21" pos:end="4955:70"><expr pos:start="4955:21" pos:end="4955:69"><call pos:start="4955:21" pos:end="4955:69"><name pos:start="4955:21" pos:end="4955:37">tcg_gen_qemu_st64</name><argument_list pos:start="4955:38" pos:end="4955:69">(<argument pos:start="4955:39" pos:end="4955:45"><expr pos:start="4955:39" pos:end="4955:45"><name pos:start="4955:39" pos:end="4955:45">cpu_val</name></expr></argument>, <argument pos:start="4955:48" pos:end="4955:55"><expr pos:start="4955:48" pos:end="4955:55"><name pos:start="4955:48" pos:end="4955:55">cpu_addr</name></expr></argument>, <argument pos:start="4955:58" pos:end="4955:68"><expr pos:start="4955:58" pos:end="4955:68"><name pos:start="4955:58" pos:end="4955:68"><name pos:start="4955:58" pos:end="4955:59">dc</name><operator pos:start="4955:60" pos:end="4955:61">-&gt;</operator><name pos:start="4955:62" pos:end="4955:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4957:21" pos:end="4957:26">break;</break>

                <case pos:start="4959:17" pos:end="4959:26">case <expr pos:start="4959:22" pos:end="4959:25"><literal type="number" pos:start="4959:22" pos:end="4959:25">0x1e</literal></expr>:</case> <comment type="block" pos:start="4959:28" pos:end="4959:40">/* V9 stxa */</comment>

                    <expr_stmt pos:start="4961:21" pos:end="4961:35"><expr pos:start="4961:21" pos:end="4961:34"><call pos:start="4961:21" pos:end="4961:34"><name pos:start="4961:21" pos:end="4961:30">save_state</name><argument_list pos:start="4961:31" pos:end="4961:34">(<argument pos:start="4961:32" pos:end="4961:33"><expr pos:start="4961:32" pos:end="4961:33"><name pos:start="4961:32" pos:end="4961:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4963:21" pos:end="4963:59"><expr pos:start="4963:21" pos:end="4963:58"><call pos:start="4963:21" pos:end="4963:58"><name pos:start="4963:21" pos:end="4963:30">gen_st_asi</name><argument_list pos:start="4963:31" pos:end="4963:58">(<argument pos:start="4963:32" pos:end="4963:38"><expr pos:start="4963:32" pos:end="4963:38"><name pos:start="4963:32" pos:end="4963:38">cpu_val</name></expr></argument>, <argument pos:start="4963:41" pos:end="4963:48"><expr pos:start="4963:41" pos:end="4963:48"><name pos:start="4963:41" pos:end="4963:48">cpu_addr</name></expr></argument>, <argument pos:start="4963:51" pos:end="4963:54"><expr pos:start="4963:51" pos:end="4963:54"><name pos:start="4963:51" pos:end="4963:54">insn</name></expr></argument>, <argument pos:start="4963:57" pos:end="4963:57"><expr pos:start="4963:57" pos:end="4963:57"><literal type="number" pos:start="4963:57" pos:end="4963:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4965:21" pos:end="4965:41"><expr pos:start="4965:21" pos:end="4965:40"><name pos:start="4965:21" pos:end="4965:27"><name pos:start="4965:21" pos:end="4965:22">dc</name><operator pos:start="4965:23" pos:end="4965:24">-&gt;</operator><name pos:start="4965:25" pos:end="4965:27">npc</name></name> <operator pos:start="4965:29" pos:end="4965:29">=</operator> <name pos:start="4965:31" pos:end="4965:40">DYNAMIC_PC</name></expr>;</expr_stmt>

                    <break pos:start="4967:21" pos:end="4970:0">break;</break>

<cpp:endif pos:start="4969:1" pos:end="4969:6">#<cpp:directive pos:start="4969:2" pos:end="4969:6">endif</cpp:directive></cpp:endif>

                <default pos:start="4971:17" pos:end="4971:24">default:</default>

                    <goto pos:start="4973:21" pos:end="4973:38">goto <name pos:start="4973:26" pos:end="4973:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="4977:15" pos:end="5101:13">else if <condition pos:start="4977:23" pos:end="4977:48">(<expr pos:start="4977:24" pos:end="4977:47"><name pos:start="4977:24" pos:end="4977:26">xop</name> <operator pos:start="4977:28" pos:end="4977:28">&gt;</operator> <literal type="number" pos:start="4977:30" pos:end="4977:33">0x23</literal> <operator pos:start="4977:35" pos:end="4977:36">&amp;&amp;</operator> <name pos:start="4977:38" pos:end="4977:40">xop</name> <operator pos:start="4977:42" pos:end="4977:42">&lt;</operator> <literal type="number" pos:start="4977:44" pos:end="4977:47">0x28</literal></expr>)</condition> <block pos:start="4977:50" pos:end="5101:13">{<block_content pos:start="4979:17" pos:end="5099:17">

                <if_stmt pos:start="4979:17" pos:end="4983:17"><if pos:start="4979:17" pos:end="4983:17">if <condition pos:start="4979:20" pos:end="4979:41">(<expr pos:start="4979:21" pos:end="4979:40"><call pos:start="4979:21" pos:end="4979:40"><name pos:start="4979:21" pos:end="4979:36">gen_trap_ifnofpu</name><argument_list pos:start="4979:37" pos:end="4979:40">(<argument pos:start="4979:38" pos:end="4979:39"><expr pos:start="4979:38" pos:end="4979:39"><name pos:start="4979:38" pos:end="4979:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4979:43" pos:end="4983:17">{<block_content pos:start="4981:21" pos:end="4981:34">

                    <goto pos:start="4981:21" pos:end="4981:34">goto <name pos:start="4981:26" pos:end="4981:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="4985:17" pos:end="4985:31"><expr pos:start="4985:17" pos:end="4985:30"><call pos:start="4985:17" pos:end="4985:30"><name pos:start="4985:17" pos:end="4985:26">save_state</name><argument_list pos:start="4985:27" pos:end="4985:30">(<argument pos:start="4985:28" pos:end="4985:29"><expr pos:start="4985:28" pos:end="4985:29"><name pos:start="4985:28" pos:end="4985:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="4987:17" pos:end="5099:17">switch <condition pos:start="4987:24" pos:end="4987:28">(<expr pos:start="4987:25" pos:end="4987:27"><name pos:start="4987:25" pos:end="4987:27">xop</name></expr>)</condition> <block pos:start="4987:30" pos:end="5099:17">{<block_content pos:start="4989:17" pos:end="5097:38">

                <case pos:start="4989:17" pos:end="4989:26">case <expr pos:start="4989:22" pos:end="4989:25"><literal type="number" pos:start="4989:22" pos:end="4989:25">0x24</literal></expr>:</case> <comment type="block" pos:start="4989:28" pos:end="4989:49">/* stf, store fpreg */</comment>

                    <expr_stmt pos:start="4991:21" pos:end="4991:51"><expr pos:start="4991:21" pos:end="4991:50"><call pos:start="4991:21" pos:end="4991:50"><name pos:start="4991:21" pos:end="4991:36">gen_address_mask</name><argument_list pos:start="4991:37" pos:end="4991:50">(<argument pos:start="4991:38" pos:end="4991:39"><expr pos:start="4991:38" pos:end="4991:39"><name pos:start="4991:38" pos:end="4991:39">dc</name></expr></argument>, <argument pos:start="4991:42" pos:end="4991:49"><expr pos:start="4991:42" pos:end="4991:49"><name pos:start="4991:42" pos:end="4991:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4993:21" pos:end="4993:57"><expr pos:start="4993:21" pos:end="4993:56"><name pos:start="4993:21" pos:end="4993:31">cpu_src1_32</name> <operator pos:start="4993:33" pos:end="4993:33">=</operator> <call pos:start="4993:35" pos:end="4993:56"><name pos:start="4993:35" pos:end="4993:48">gen_load_fpr_F</name><argument_list pos:start="4993:49" pos:end="4993:56">(<argument pos:start="4993:50" pos:end="4993:51"><expr pos:start="4993:50" pos:end="4993:51"><name pos:start="4993:50" pos:end="4993:51">dc</name></expr></argument>, <argument pos:start="4993:54" pos:end="4993:55"><expr pos:start="4993:54" pos:end="4993:55"><name pos:start="4993:54" pos:end="4993:55">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4995:21" pos:end="4995:62"><expr pos:start="4995:21" pos:end="4995:61"><call pos:start="4995:21" pos:end="4995:61"><name pos:start="4995:21" pos:end="4995:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="4995:39" pos:end="4995:61">(<argument pos:start="4995:40" pos:end="4995:47"><expr pos:start="4995:40" pos:end="4995:47"><name pos:start="4995:40" pos:end="4995:47">cpu_tmp0</name></expr></argument>, <argument pos:start="4995:50" pos:end="4995:60"><expr pos:start="4995:50" pos:end="4995:60"><name pos:start="4995:50" pos:end="4995:60">cpu_src1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4997:21" pos:end="4997:71"><expr pos:start="4997:21" pos:end="4997:70"><call pos:start="4997:21" pos:end="4997:70"><name pos:start="4997:21" pos:end="4997:37">tcg_gen_qemu_st32</name><argument_list pos:start="4997:38" pos:end="4997:70">(<argument pos:start="4997:39" pos:end="4997:46"><expr pos:start="4997:39" pos:end="4997:46"><name pos:start="4997:39" pos:end="4997:46">cpu_tmp0</name></expr></argument>, <argument pos:start="4997:49" pos:end="4997:56"><expr pos:start="4997:49" pos:end="4997:56"><name pos:start="4997:49" pos:end="4997:56">cpu_addr</name></expr></argument>, <argument pos:start="4997:59" pos:end="4997:69"><expr pos:start="4997:59" pos:end="4997:69"><name pos:start="4997:59" pos:end="4997:69"><name pos:start="4997:59" pos:end="4997:60">dc</name><operator pos:start="4997:61" pos:end="4997:62">-&gt;</operator><name pos:start="4997:63" pos:end="4997:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4999:21" pos:end="4999:26">break;</break>

                <case pos:start="5001:17" pos:end="5001:26">case <expr pos:start="5001:22" pos:end="5001:25"><literal type="number" pos:start="5001:22" pos:end="5001:25">0x25</literal></expr>:</case> <comment type="block" pos:start="5001:28" pos:end="5001:49">/* stfsr, V9 stxfsr */</comment>

                    <block pos:start="5003:21" pos:end="5027:21">{<block_content pos:start="5005:25" pos:end="5025:68">

                        <decl_stmt pos:start="5005:25" pos:end="5005:49"><decl pos:start="5005:25" pos:end="5005:48"><type pos:start="5005:25" pos:end="5005:28"><name pos:start="5005:25" pos:end="5005:28">TCGv</name></type> <name pos:start="5005:30" pos:end="5005:30">t</name> <init pos:start="5005:32" pos:end="5005:48">= <expr pos:start="5005:34" pos:end="5005:48"><call pos:start="5005:34" pos:end="5005:48"><name pos:start="5005:34" pos:end="5005:44">get_temp_tl</name><argument_list pos:start="5005:45" pos:end="5005:48">(<argument pos:start="5005:46" pos:end="5005:47"><expr pos:start="5005:46" pos:end="5005:47"><name pos:start="5005:46" pos:end="5005:47">dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="5009:25" pos:end="5012:0"><expr pos:start="5009:25" pos:end="5009:79"><call pos:start="5009:25" pos:end="5009:79"><name pos:start="5009:25" pos:end="5009:37">tcg_gen_ld_tl</name><argument_list pos:start="5009:38" pos:end="5009:79">(<argument pos:start="5009:39" pos:end="5009:39"><expr pos:start="5009:39" pos:end="5009:39"><name pos:start="5009:39" pos:end="5009:39">t</name></expr></argument>, <argument pos:start="5009:42" pos:end="5009:48"><expr pos:start="5009:42" pos:end="5009:48"><name pos:start="5009:42" pos:end="5009:48">cpu_env</name></expr></argument>, <argument pos:start="5009:51" pos:end="5009:78"><expr pos:start="5009:51" pos:end="5009:78"><call pos:start="5009:51" pos:end="5009:78"><name pos:start="5009:51" pos:end="5009:58">offsetof</name><argument_list pos:start="5009:59" pos:end="5009:78">(<argument pos:start="5009:60" pos:end="5009:72"><expr pos:start="5009:60" pos:end="5009:72"><name pos:start="5009:60" pos:end="5009:72">CPUSPARCState</name></expr></argument>, <argument pos:start="5009:75" pos:end="5009:77"><expr pos:start="5009:75" pos:end="5009:77"><name pos:start="5009:75" pos:end="5009:77">fsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="5011:1" pos:end="5011:21">#<cpp:directive pos:start="5011:2" pos:end="5011:6">ifdef</cpp:directive> <name pos:start="5011:8" pos:end="5011:21">TARGET_SPARC64</name></cpp:ifdef>

                        <expr_stmt pos:start="5013:25" pos:end="5013:55"><expr pos:start="5013:25" pos:end="5013:54"><call pos:start="5013:25" pos:end="5013:54"><name pos:start="5013:25" pos:end="5013:40">gen_address_mask</name><argument_list pos:start="5013:41" pos:end="5013:54">(<argument pos:start="5013:42" pos:end="5013:43"><expr pos:start="5013:42" pos:end="5013:43"><name pos:start="5013:42" pos:end="5013:43">dc</name></expr></argument>, <argument pos:start="5013:46" pos:end="5013:53"><expr pos:start="5013:46" pos:end="5013:53"><name pos:start="5013:46" pos:end="5013:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="5015:25" pos:end="5024:0"><if pos:start="5015:25" pos:end="5024:0">if <condition pos:start="5015:28" pos:end="5015:36">(<expr pos:start="5015:29" pos:end="5015:35"><name pos:start="5015:29" pos:end="5015:30">rd</name> <operator pos:start="5015:32" pos:end="5015:33">==</operator> <literal type="number" pos:start="5015:35" pos:end="5015:35">1</literal></expr>)</condition> <block pos:start="5015:38" pos:end="5024:0">{<block_content pos:start="5017:29" pos:end="5019:34">

                            <expr_stmt pos:start="5017:29" pos:end="5017:72"><expr pos:start="5017:29" pos:end="5017:71"><call pos:start="5017:29" pos:end="5017:71"><name pos:start="5017:29" pos:end="5017:45">tcg_gen_qemu_st64</name><argument_list pos:start="5017:46" pos:end="5017:71">(<argument pos:start="5017:47" pos:end="5017:47"><expr pos:start="5017:47" pos:end="5017:47"><name pos:start="5017:47" pos:end="5017:47">t</name></expr></argument>, <argument pos:start="5017:50" pos:end="5017:57"><expr pos:start="5017:50" pos:end="5017:57"><name pos:start="5017:50" pos:end="5017:57">cpu_addr</name></expr></argument>, <argument pos:start="5017:60" pos:end="5017:70"><expr pos:start="5017:60" pos:end="5017:70"><name pos:start="5017:60" pos:end="5017:70"><name pos:start="5017:60" pos:end="5017:61">dc</name><operator pos:start="5017:62" pos:end="5017:63">-&gt;</operator><name pos:start="5017:64" pos:end="5017:70">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="5019:29" pos:end="5019:34">break;</break>

                        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="5023:1" pos:end="5023:6">#<cpp:directive pos:start="5023:2" pos:end="5023:6">endif</cpp:directive></cpp:endif>

                        <expr_stmt pos:start="5025:25" pos:end="5025:68"><expr pos:start="5025:25" pos:end="5025:67"><call pos:start="5025:25" pos:end="5025:67"><name pos:start="5025:25" pos:end="5025:41">tcg_gen_qemu_st32</name><argument_list pos:start="5025:42" pos:end="5025:67">(<argument pos:start="5025:43" pos:end="5025:43"><expr pos:start="5025:43" pos:end="5025:43"><name pos:start="5025:43" pos:end="5025:43">t</name></expr></argument>, <argument pos:start="5025:46" pos:end="5025:53"><expr pos:start="5025:46" pos:end="5025:53"><name pos:start="5025:46" pos:end="5025:53">cpu_addr</name></expr></argument>, <argument pos:start="5025:56" pos:end="5025:66"><expr pos:start="5025:56" pos:end="5025:66"><name pos:start="5025:56" pos:end="5025:66"><name pos:start="5025:56" pos:end="5025:57">dc</name><operator pos:start="5025:58" pos:end="5025:59">-&gt;</operator><name pos:start="5025:60" pos:end="5025:66">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="5029:21" pos:end="5029:26">break;</break>

                <case pos:start="5031:17" pos:end="5034:0">case <expr pos:start="5031:22" pos:end="5031:25"><literal type="number" pos:start="5031:22" pos:end="5031:25">0x26</literal></expr>:</case>

<cpp:ifdef pos:start="5033:1" pos:end="5033:21">#<cpp:directive pos:start="5033:2" pos:end="5033:6">ifdef</cpp:directive> <name pos:start="5033:8" pos:end="5033:21">TARGET_SPARC64</name></cpp:ifdef>

                    <comment type="block" pos:start="5035:21" pos:end="5035:51">/* V9 stqf, store quad fpreg */</comment>

                    <block pos:start="5037:21" pos:end="5055:21">{<block_content pos:start="5039:25" pos:end="5053:51">

                        <decl_stmt pos:start="5039:25" pos:end="5039:41"><decl pos:start="5039:25" pos:end="5039:40"><type pos:start="5039:25" pos:end="5039:32"><name pos:start="5039:25" pos:end="5039:32">TCGv_i32</name></type> <name pos:start="5039:34" pos:end="5039:40">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="5043:25" pos:end="5043:56"><expr pos:start="5043:25" pos:end="5043:55"><call pos:start="5043:25" pos:end="5043:55"><name pos:start="5043:25" pos:end="5043:41">CHECK_FPU_FEATURE</name><argument_list pos:start="5043:42" pos:end="5043:55">(<argument pos:start="5043:43" pos:end="5043:44"><expr pos:start="5043:43" pos:end="5043:44"><name pos:start="5043:43" pos:end="5043:44">dc</name></expr></argument>, <argument pos:start="5043:47" pos:end="5043:54"><expr pos:start="5043:47" pos:end="5043:54"><name pos:start="5043:47" pos:end="5043:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5045:25" pos:end="5045:56"><expr pos:start="5045:25" pos:end="5045:55"><call pos:start="5045:25" pos:end="5045:55"><name pos:start="5045:25" pos:end="5045:43">gen_op_load_fpr_QT0</name><argument_list pos:start="5045:44" pos:end="5045:55">(<argument pos:start="5045:45" pos:end="5045:54"><expr pos:start="5045:45" pos:end="5045:54"><call pos:start="5045:45" pos:end="5045:54"><name pos:start="5045:45" pos:end="5045:50">QFPREG</name><argument_list pos:start="5045:51" pos:end="5045:54">(<argument pos:start="5045:52" pos:end="5045:53"><expr pos:start="5045:52" pos:end="5045:53"><name pos:start="5045:52" pos:end="5045:53">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5047:25" pos:end="5047:61"><expr pos:start="5047:25" pos:end="5047:60"><name pos:start="5047:25" pos:end="5047:31">r_const</name> <operator pos:start="5047:33" pos:end="5047:33">=</operator> <call pos:start="5047:35" pos:end="5047:60"><name pos:start="5047:35" pos:end="5047:47">tcg_const_i32</name><argument_list pos:start="5047:48" pos:end="5047:60">(<argument pos:start="5047:49" pos:end="5047:59"><expr pos:start="5047:49" pos:end="5047:59"><name pos:start="5047:49" pos:end="5047:59"><name pos:start="5047:49" pos:end="5047:50">dc</name><operator pos:start="5047:51" pos:end="5047:52">-&gt;</operator><name pos:start="5047:53" pos:end="5047:59">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5049:25" pos:end="5049:55"><expr pos:start="5049:25" pos:end="5049:54"><call pos:start="5049:25" pos:end="5049:54"><name pos:start="5049:25" pos:end="5049:40">gen_address_mask</name><argument_list pos:start="5049:41" pos:end="5049:54">(<argument pos:start="5049:42" pos:end="5049:43"><expr pos:start="5049:42" pos:end="5049:43"><name pos:start="5049:42" pos:end="5049:43">dc</name></expr></argument>, <argument pos:start="5049:46" pos:end="5049:53"><expr pos:start="5049:46" pos:end="5049:53"><name pos:start="5049:46" pos:end="5049:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5051:25" pos:end="5051:68"><expr pos:start="5051:25" pos:end="5051:67"><call pos:start="5051:25" pos:end="5051:67"><name pos:start="5051:25" pos:end="5051:39">gen_helper_stqf</name><argument_list pos:start="5051:40" pos:end="5051:67">(<argument pos:start="5051:41" pos:end="5051:47"><expr pos:start="5051:41" pos:end="5051:47"><name pos:start="5051:41" pos:end="5051:47">cpu_env</name></expr></argument>, <argument pos:start="5051:50" pos:end="5051:57"><expr pos:start="5051:50" pos:end="5051:57"><name pos:start="5051:50" pos:end="5051:57">cpu_addr</name></expr></argument>, <argument pos:start="5051:60" pos:end="5051:66"><expr pos:start="5051:60" pos:end="5051:66"><name pos:start="5051:60" pos:end="5051:66">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5053:25" pos:end="5053:51"><expr pos:start="5053:25" pos:end="5053:50"><call pos:start="5053:25" pos:end="5053:50"><name pos:start="5053:25" pos:end="5053:41">tcg_temp_free_i32</name><argument_list pos:start="5053:42" pos:end="5053:50">(<argument pos:start="5053:43" pos:end="5053:49"><expr pos:start="5053:43" pos:end="5053:49"><name pos:start="5053:43" pos:end="5053:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="5057:21" pos:end="5064:0">break;</break>

<cpp:else pos:start="5059:1" pos:end="5059:5">#<cpp:directive pos:start="5059:2" pos:end="5059:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="5059:7" pos:end="5059:27">/* !TARGET_SPARC64 */</comment>

                    <comment type="block" pos:start="5061:21" pos:end="5061:59">/* stdfq, store floating point queue */</comment>

<cpp:if pos:start="5063:1" pos:end="5063:29">#<cpp:directive pos:start="5063:2" pos:end="5063:3">if</cpp:directive> <expr pos:start="5063:5" pos:end="5063:29"><call pos:start="5063:5" pos:end="5063:29"><name pos:start="5063:5" pos:end="5063:11">defined</name><argument_list pos:start="5063:12" pos:end="5063:29">(<argument pos:start="5063:13" pos:end="5063:28"><expr pos:start="5063:13" pos:end="5063:28"><name pos:start="5063:13" pos:end="5063:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <goto pos:start="5065:21" pos:end="5068:0">goto <name pos:start="5065:26" pos:end="5065:37">illegal_insn</name>;</goto>

<cpp:else pos:start="5067:1" pos:end="5067:5">#<cpp:directive pos:start="5067:2" pos:end="5067:5">else</cpp:directive></cpp:else>

                    <if_stmt pos:start="5069:21" pos:end="5071:39"><if pos:start="5069:21" pos:end="5071:39">if <condition pos:start="5069:24" pos:end="5069:40">(<expr pos:start="5069:25" pos:end="5069:39"><operator pos:start="5069:25" pos:end="5069:25">!</operator><call pos:start="5069:26" pos:end="5069:39"><name pos:start="5069:26" pos:end="5069:35">supervisor</name><argument_list pos:start="5069:36" pos:end="5069:39">(<argument pos:start="5069:37" pos:end="5069:38"><expr pos:start="5069:37" pos:end="5069:38"><name pos:start="5069:37" pos:end="5069:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5071:25" pos:end="5071:39"><block_content pos:start="5071:25" pos:end="5071:39">

                        <goto pos:start="5071:25" pos:end="5071:39">goto <name pos:start="5071:30" pos:end="5071:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="5073:21" pos:end="5077:21"><if pos:start="5073:21" pos:end="5077:21">if <condition pos:start="5073:24" pos:end="5073:45">(<expr pos:start="5073:25" pos:end="5073:44"><call pos:start="5073:25" pos:end="5073:44"><name pos:start="5073:25" pos:end="5073:40">gen_trap_ifnofpu</name><argument_list pos:start="5073:41" pos:end="5073:44">(<argument pos:start="5073:42" pos:end="5073:43"><expr pos:start="5073:42" pos:end="5073:43"><name pos:start="5073:42" pos:end="5073:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5073:47" pos:end="5077:21">{<block_content pos:start="5075:25" pos:end="5075:38">

                        <goto pos:start="5075:25" pos:end="5075:38">goto <name pos:start="5075:30" pos:end="5075:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <goto pos:start="5079:21" pos:end="5084:0">goto <name pos:start="5079:26" pos:end="5079:33">nfq_insn</name>;</goto>

<cpp:endif pos:start="5081:1" pos:end="5081:6">#<cpp:directive pos:start="5081:2" pos:end="5081:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="5083:1" pos:end="5083:6">#<cpp:directive pos:start="5083:2" pos:end="5083:6">endif</cpp:directive></cpp:endif>

                <case pos:start="5085:17" pos:end="5085:26">case <expr pos:start="5085:22" pos:end="5085:25"><literal type="number" pos:start="5085:22" pos:end="5085:25">0x27</literal></expr>:</case> <comment type="block" pos:start="5085:28" pos:end="5085:57">/* stdf, store double fpreg */</comment>

                    <expr_stmt pos:start="5087:21" pos:end="5087:51"><expr pos:start="5087:21" pos:end="5087:50"><call pos:start="5087:21" pos:end="5087:50"><name pos:start="5087:21" pos:end="5087:36">gen_address_mask</name><argument_list pos:start="5087:37" pos:end="5087:50">(<argument pos:start="5087:38" pos:end="5087:39"><expr pos:start="5087:38" pos:end="5087:39"><name pos:start="5087:38" pos:end="5087:39">dc</name></expr></argument>, <argument pos:start="5087:42" pos:end="5087:49"><expr pos:start="5087:42" pos:end="5087:49"><name pos:start="5087:42" pos:end="5087:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5089:21" pos:end="5089:57"><expr pos:start="5089:21" pos:end="5089:56"><name pos:start="5089:21" pos:end="5089:31">cpu_src1_64</name> <operator pos:start="5089:33" pos:end="5089:33">=</operator> <call pos:start="5089:35" pos:end="5089:56"><name pos:start="5089:35" pos:end="5089:48">gen_load_fpr_D</name><argument_list pos:start="5089:49" pos:end="5089:56">(<argument pos:start="5089:50" pos:end="5089:51"><expr pos:start="5089:50" pos:end="5089:51"><name pos:start="5089:50" pos:end="5089:51">dc</name></expr></argument>, <argument pos:start="5089:54" pos:end="5089:55"><expr pos:start="5089:54" pos:end="5089:55"><name pos:start="5089:54" pos:end="5089:55">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5091:21" pos:end="5091:74"><expr pos:start="5091:21" pos:end="5091:73"><call pos:start="5091:21" pos:end="5091:73"><name pos:start="5091:21" pos:end="5091:37">tcg_gen_qemu_st64</name><argument_list pos:start="5091:38" pos:end="5091:73">(<argument pos:start="5091:39" pos:end="5091:49"><expr pos:start="5091:39" pos:end="5091:49"><name pos:start="5091:39" pos:end="5091:49">cpu_src1_64</name></expr></argument>, <argument pos:start="5091:52" pos:end="5091:59"><expr pos:start="5091:52" pos:end="5091:59"><name pos:start="5091:52" pos:end="5091:59">cpu_addr</name></expr></argument>, <argument pos:start="5091:62" pos:end="5091:72"><expr pos:start="5091:62" pos:end="5091:72"><name pos:start="5091:62" pos:end="5091:72"><name pos:start="5091:62" pos:end="5091:63">dc</name><operator pos:start="5091:64" pos:end="5091:65">-&gt;</operator><name pos:start="5091:66" pos:end="5091:72">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5093:21" pos:end="5093:26">break;</break>

                <default pos:start="5095:17" pos:end="5095:24">default:</default>

                    <goto pos:start="5097:21" pos:end="5097:38">goto <name pos:start="5097:26" pos:end="5097:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="5101:15" pos:end="5201:13">else if <condition pos:start="5101:23" pos:end="5101:48">(<expr pos:start="5101:24" pos:end="5101:47"><name pos:start="5101:24" pos:end="5101:26">xop</name> <operator pos:start="5101:28" pos:end="5101:28">&gt;</operator> <literal type="number" pos:start="5101:30" pos:end="5101:33">0x33</literal> <operator pos:start="5101:35" pos:end="5101:36">&amp;&amp;</operator> <name pos:start="5101:38" pos:end="5101:40">xop</name> <operator pos:start="5101:42" pos:end="5101:42">&lt;</operator> <literal type="number" pos:start="5101:44" pos:end="5101:47">0x3f</literal></expr>)</condition> <block pos:start="5101:50" pos:end="5201:13">{<block_content pos:start="5103:17" pos:end="5199:17">

                <expr_stmt pos:start="5103:17" pos:end="5103:31"><expr pos:start="5103:17" pos:end="5103:30"><call pos:start="5103:17" pos:end="5103:30"><name pos:start="5103:17" pos:end="5103:26">save_state</name><argument_list pos:start="5103:27" pos:end="5103:30">(<argument pos:start="5103:28" pos:end="5103:29"><expr pos:start="5103:28" pos:end="5103:29"><name pos:start="5103:28" pos:end="5103:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="5105:17" pos:end="5199:17">switch <condition pos:start="5105:24" pos:end="5105:28">(<expr pos:start="5105:25" pos:end="5105:27"><name pos:start="5105:25" pos:end="5105:27">xop</name></expr>)</condition> <block pos:start="5105:30" pos:end="5199:17">{<block_content pos:start="5109:17" pos:end="5197:38">

<cpp:ifdef pos:start="5107:1" pos:end="5107:21">#<cpp:directive pos:start="5107:2" pos:end="5107:6">ifdef</cpp:directive> <name pos:start="5107:8" pos:end="5107:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="5109:17" pos:end="5109:26">case <expr pos:start="5109:22" pos:end="5109:25"><literal type="number" pos:start="5109:22" pos:end="5109:25">0x34</literal></expr>:</case> <comment type="block" pos:start="5109:28" pos:end="5109:40">/* V9 stfa */</comment>

                    <if_stmt pos:start="5111:21" pos:end="5115:21"><if pos:start="5111:21" pos:end="5115:21">if <condition pos:start="5111:24" pos:end="5111:45">(<expr pos:start="5111:25" pos:end="5111:44"><call pos:start="5111:25" pos:end="5111:44"><name pos:start="5111:25" pos:end="5111:40">gen_trap_ifnofpu</name><argument_list pos:start="5111:41" pos:end="5111:44">(<argument pos:start="5111:42" pos:end="5111:43"><expr pos:start="5111:42" pos:end="5111:43"><name pos:start="5111:42" pos:end="5111:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5111:47" pos:end="5115:21">{<block_content pos:start="5113:25" pos:end="5113:38">

                        <goto pos:start="5113:25" pos:end="5113:38">goto <name pos:start="5113:30" pos:end="5113:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="5117:21" pos:end="5117:55"><expr pos:start="5117:21" pos:end="5117:54"><call pos:start="5117:21" pos:end="5117:54"><name pos:start="5117:21" pos:end="5117:31">gen_stf_asi</name><argument_list pos:start="5117:32" pos:end="5117:54">(<argument pos:start="5117:33" pos:end="5117:40"><expr pos:start="5117:33" pos:end="5117:40"><name pos:start="5117:33" pos:end="5117:40">cpu_addr</name></expr></argument>, <argument pos:start="5117:43" pos:end="5117:46"><expr pos:start="5117:43" pos:end="5117:46"><name pos:start="5117:43" pos:end="5117:46">insn</name></expr></argument>, <argument pos:start="5117:49" pos:end="5117:49"><expr pos:start="5117:49" pos:end="5117:49"><literal type="number" pos:start="5117:49" pos:end="5117:49">4</literal></expr></argument>, <argument pos:start="5117:52" pos:end="5117:53"><expr pos:start="5117:52" pos:end="5117:53"><name pos:start="5117:52" pos:end="5117:53">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5119:21" pos:end="5119:26">break;</break>

                <case pos:start="5121:17" pos:end="5121:26">case <expr pos:start="5121:22" pos:end="5121:25"><literal type="number" pos:start="5121:22" pos:end="5121:25">0x36</literal></expr>:</case> <comment type="block" pos:start="5121:28" pos:end="5121:41">/* V9 stqfa */</comment>

                    <block pos:start="5123:21" pos:end="5145:21">{<block_content pos:start="5125:25" pos:end="5143:68">

                        <decl_stmt pos:start="5125:25" pos:end="5125:41"><decl pos:start="5125:25" pos:end="5125:40"><type pos:start="5125:25" pos:end="5125:32"><name pos:start="5125:25" pos:end="5125:32">TCGv_i32</name></type> <name pos:start="5125:34" pos:end="5125:40">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="5129:25" pos:end="5129:56"><expr pos:start="5129:25" pos:end="5129:55"><call pos:start="5129:25" pos:end="5129:55"><name pos:start="5129:25" pos:end="5129:41">CHECK_FPU_FEATURE</name><argument_list pos:start="5129:42" pos:end="5129:55">(<argument pos:start="5129:43" pos:end="5129:44"><expr pos:start="5129:43" pos:end="5129:44"><name pos:start="5129:43" pos:end="5129:44">dc</name></expr></argument>, <argument pos:start="5129:47" pos:end="5129:54"><expr pos:start="5129:47" pos:end="5129:54"><name pos:start="5129:47" pos:end="5129:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="5131:25" pos:end="5135:25"><if pos:start="5131:25" pos:end="5135:25">if <condition pos:start="5131:28" pos:end="5131:49">(<expr pos:start="5131:29" pos:end="5131:48"><call pos:start="5131:29" pos:end="5131:48"><name pos:start="5131:29" pos:end="5131:44">gen_trap_ifnofpu</name><argument_list pos:start="5131:45" pos:end="5131:48">(<argument pos:start="5131:46" pos:end="5131:47"><expr pos:start="5131:46" pos:end="5131:47"><name pos:start="5131:46" pos:end="5131:47">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5131:51" pos:end="5135:25">{<block_content pos:start="5133:29" pos:end="5133:42">

                            <goto pos:start="5133:29" pos:end="5133:42">goto <name pos:start="5133:34" pos:end="5133:41">jmp_insn</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="5137:25" pos:end="5137:51"><expr pos:start="5137:25" pos:end="5137:50"><name pos:start="5137:25" pos:end="5137:31">r_const</name> <operator pos:start="5137:33" pos:end="5137:33">=</operator> <call pos:start="5137:35" pos:end="5137:50"><name pos:start="5137:35" pos:end="5137:47">tcg_const_i32</name><argument_list pos:start="5137:48" pos:end="5137:50">(<argument pos:start="5137:49" pos:end="5137:49"><expr pos:start="5137:49" pos:end="5137:49"><literal type="number" pos:start="5137:49" pos:end="5137:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5139:25" pos:end="5139:75"><expr pos:start="5139:25" pos:end="5139:74"><call pos:start="5139:25" pos:end="5139:74"><name pos:start="5139:25" pos:end="5139:46">gen_helper_check_align</name><argument_list pos:start="5139:47" pos:end="5139:74">(<argument pos:start="5139:48" pos:end="5139:54"><expr pos:start="5139:48" pos:end="5139:54"><name pos:start="5139:48" pos:end="5139:54">cpu_env</name></expr></argument>, <argument pos:start="5139:57" pos:end="5139:64"><expr pos:start="5139:57" pos:end="5139:64"><name pos:start="5139:57" pos:end="5139:64">cpu_addr</name></expr></argument>, <argument pos:start="5139:67" pos:end="5139:73"><expr pos:start="5139:67" pos:end="5139:73"><name pos:start="5139:67" pos:end="5139:73">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5141:25" pos:end="5141:51"><expr pos:start="5141:25" pos:end="5141:50"><call pos:start="5141:25" pos:end="5141:50"><name pos:start="5141:25" pos:end="5141:41">tcg_temp_free_i32</name><argument_list pos:start="5141:42" pos:end="5141:50">(<argument pos:start="5141:43" pos:end="5141:49"><expr pos:start="5141:43" pos:end="5141:49"><name pos:start="5141:43" pos:end="5141:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5143:25" pos:end="5143:68"><expr pos:start="5143:25" pos:end="5143:67"><call pos:start="5143:25" pos:end="5143:67"><name pos:start="5143:25" pos:end="5143:35">gen_stf_asi</name><argument_list pos:start="5143:36" pos:end="5143:67">(<argument pos:start="5143:37" pos:end="5143:44"><expr pos:start="5143:37" pos:end="5143:44"><name pos:start="5143:37" pos:end="5143:44">cpu_addr</name></expr></argument>, <argument pos:start="5143:47" pos:end="5143:50"><expr pos:start="5143:47" pos:end="5143:50"><name pos:start="5143:47" pos:end="5143:50">insn</name></expr></argument>, <argument pos:start="5143:53" pos:end="5143:54"><expr pos:start="5143:53" pos:end="5143:54"><literal type="number" pos:start="5143:53" pos:end="5143:54">16</literal></expr></argument>, <argument pos:start="5143:57" pos:end="5143:66"><expr pos:start="5143:57" pos:end="5143:66"><call pos:start="5143:57" pos:end="5143:66"><name pos:start="5143:57" pos:end="5143:62">QFPREG</name><argument_list pos:start="5143:63" pos:end="5143:66">(<argument pos:start="5143:64" pos:end="5143:65"><expr pos:start="5143:64" pos:end="5143:65"><name pos:start="5143:64" pos:end="5143:65">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="5147:21" pos:end="5147:26">break;</break>

                <case pos:start="5149:17" pos:end="5149:26">case <expr pos:start="5149:22" pos:end="5149:25"><literal type="number" pos:start="5149:22" pos:end="5149:25">0x37</literal></expr>:</case> <comment type="block" pos:start="5149:28" pos:end="5149:41">/* V9 stdfa */</comment>

                    <if_stmt pos:start="5151:21" pos:end="5155:21"><if pos:start="5151:21" pos:end="5155:21">if <condition pos:start="5151:24" pos:end="5151:45">(<expr pos:start="5151:25" pos:end="5151:44"><call pos:start="5151:25" pos:end="5151:44"><name pos:start="5151:25" pos:end="5151:40">gen_trap_ifnofpu</name><argument_list pos:start="5151:41" pos:end="5151:44">(<argument pos:start="5151:42" pos:end="5151:43"><expr pos:start="5151:42" pos:end="5151:43"><name pos:start="5151:42" pos:end="5151:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5151:47" pos:end="5155:21">{<block_content pos:start="5153:25" pos:end="5153:38">

                        <goto pos:start="5153:25" pos:end="5153:38">goto <name pos:start="5153:30" pos:end="5153:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="5157:21" pos:end="5157:63"><expr pos:start="5157:21" pos:end="5157:62"><call pos:start="5157:21" pos:end="5157:62"><name pos:start="5157:21" pos:end="5157:31">gen_stf_asi</name><argument_list pos:start="5157:32" pos:end="5157:62">(<argument pos:start="5157:33" pos:end="5157:40"><expr pos:start="5157:33" pos:end="5157:40"><name pos:start="5157:33" pos:end="5157:40">cpu_addr</name></expr></argument>, <argument pos:start="5157:43" pos:end="5157:46"><expr pos:start="5157:43" pos:end="5157:46"><name pos:start="5157:43" pos:end="5157:46">insn</name></expr></argument>, <argument pos:start="5157:49" pos:end="5157:49"><expr pos:start="5157:49" pos:end="5157:49"><literal type="number" pos:start="5157:49" pos:end="5157:49">8</literal></expr></argument>, <argument pos:start="5157:52" pos:end="5157:61"><expr pos:start="5157:52" pos:end="5157:61"><call pos:start="5157:52" pos:end="5157:61"><name pos:start="5157:52" pos:end="5157:57">DFPREG</name><argument_list pos:start="5157:58" pos:end="5157:61">(<argument pos:start="5157:59" pos:end="5157:60"><expr pos:start="5157:59" pos:end="5157:60"><name pos:start="5157:59" pos:end="5157:60">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5159:21" pos:end="5159:26">break;</break>

                <case pos:start="5161:17" pos:end="5161:26">case <expr pos:start="5161:22" pos:end="5161:25"><literal type="number" pos:start="5161:22" pos:end="5161:25">0x3c</literal></expr>:</case> <comment type="block" pos:start="5161:28" pos:end="5161:40">/* V9 casa */</comment>

                    <expr_stmt pos:start="5163:21" pos:end="5163:50"><expr pos:start="5163:21" pos:end="5163:49"><name pos:start="5163:21" pos:end="5163:23">rs2</name> <operator pos:start="5163:25" pos:end="5163:25">=</operator> <call pos:start="5163:27" pos:end="5163:49"><name pos:start="5163:27" pos:end="5163:35">GET_FIELD</name><argument_list pos:start="5163:36" pos:end="5163:49">(<argument pos:start="5163:37" pos:end="5163:40"><expr pos:start="5163:37" pos:end="5163:40"><name pos:start="5163:37" pos:end="5163:40">insn</name></expr></argument>, <argument pos:start="5163:43" pos:end="5163:44"><expr pos:start="5163:43" pos:end="5163:44"><literal type="number" pos:start="5163:43" pos:end="5163:44">27</literal></expr></argument>, <argument pos:start="5163:47" pos:end="5163:48"><expr pos:start="5163:47" pos:end="5163:48"><literal type="number" pos:start="5163:47" pos:end="5163:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5165:21" pos:end="5165:53"><expr pos:start="5165:21" pos:end="5165:52"><name pos:start="5165:21" pos:end="5165:28">cpu_src2</name> <operator pos:start="5165:30" pos:end="5165:30">=</operator> <call pos:start="5165:32" pos:end="5165:52"><name pos:start="5165:32" pos:end="5165:43">gen_load_gpr</name><argument_list pos:start="5165:44" pos:end="5165:52">(<argument pos:start="5165:45" pos:end="5165:46"><expr pos:start="5165:45" pos:end="5165:46"><name pos:start="5165:45" pos:end="5165:46">dc</name></expr></argument>, <argument pos:start="5165:49" pos:end="5165:51"><expr pos:start="5165:49" pos:end="5165:51"><name pos:start="5165:49" pos:end="5165:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5167:21" pos:end="5167:66"><expr pos:start="5167:21" pos:end="5167:65"><call pos:start="5167:21" pos:end="5167:65"><name pos:start="5167:21" pos:end="5167:31">gen_cas_asi</name><argument_list pos:start="5167:32" pos:end="5167:65">(<argument pos:start="5167:33" pos:end="5167:34"><expr pos:start="5167:33" pos:end="5167:34"><name pos:start="5167:33" pos:end="5167:34">dc</name></expr></argument>, <argument pos:start="5167:37" pos:end="5167:44"><expr pos:start="5167:37" pos:end="5167:44"><name pos:start="5167:37" pos:end="5167:44">cpu_addr</name></expr></argument>, <argument pos:start="5167:47" pos:end="5167:54"><expr pos:start="5167:47" pos:end="5167:54"><name pos:start="5167:47" pos:end="5167:54">cpu_src2</name></expr></argument>, <argument pos:start="5167:57" pos:end="5167:60"><expr pos:start="5167:57" pos:end="5167:60"><name pos:start="5167:57" pos:end="5167:60">insn</name></expr></argument>, <argument pos:start="5167:63" pos:end="5167:64"><expr pos:start="5167:63" pos:end="5167:64"><name pos:start="5167:63" pos:end="5167:64">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5169:21" pos:end="5169:26">break;</break>

                <case pos:start="5171:17" pos:end="5171:26">case <expr pos:start="5171:22" pos:end="5171:25"><literal type="number" pos:start="5171:22" pos:end="5171:25">0x3e</literal></expr>:</case> <comment type="block" pos:start="5171:28" pos:end="5171:41">/* V9 casxa */</comment>

                    <expr_stmt pos:start="5173:21" pos:end="5173:50"><expr pos:start="5173:21" pos:end="5173:49"><name pos:start="5173:21" pos:end="5173:23">rs2</name> <operator pos:start="5173:25" pos:end="5173:25">=</operator> <call pos:start="5173:27" pos:end="5173:49"><name pos:start="5173:27" pos:end="5173:35">GET_FIELD</name><argument_list pos:start="5173:36" pos:end="5173:49">(<argument pos:start="5173:37" pos:end="5173:40"><expr pos:start="5173:37" pos:end="5173:40"><name pos:start="5173:37" pos:end="5173:40">insn</name></expr></argument>, <argument pos:start="5173:43" pos:end="5173:44"><expr pos:start="5173:43" pos:end="5173:44"><literal type="number" pos:start="5173:43" pos:end="5173:44">27</literal></expr></argument>, <argument pos:start="5173:47" pos:end="5173:48"><expr pos:start="5173:47" pos:end="5173:48"><literal type="number" pos:start="5173:47" pos:end="5173:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5175:21" pos:end="5175:53"><expr pos:start="5175:21" pos:end="5175:52"><name pos:start="5175:21" pos:end="5175:28">cpu_src2</name> <operator pos:start="5175:30" pos:end="5175:30">=</operator> <call pos:start="5175:32" pos:end="5175:52"><name pos:start="5175:32" pos:end="5175:43">gen_load_gpr</name><argument_list pos:start="5175:44" pos:end="5175:52">(<argument pos:start="5175:45" pos:end="5175:46"><expr pos:start="5175:45" pos:end="5175:46"><name pos:start="5175:45" pos:end="5175:46">dc</name></expr></argument>, <argument pos:start="5175:49" pos:end="5175:51"><expr pos:start="5175:49" pos:end="5175:51"><name pos:start="5175:49" pos:end="5175:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5177:21" pos:end="5177:67"><expr pos:start="5177:21" pos:end="5177:66"><call pos:start="5177:21" pos:end="5177:66"><name pos:start="5177:21" pos:end="5177:32">gen_casx_asi</name><argument_list pos:start="5177:33" pos:end="5177:66">(<argument pos:start="5177:34" pos:end="5177:35"><expr pos:start="5177:34" pos:end="5177:35"><name pos:start="5177:34" pos:end="5177:35">dc</name></expr></argument>, <argument pos:start="5177:38" pos:end="5177:45"><expr pos:start="5177:38" pos:end="5177:45"><name pos:start="5177:38" pos:end="5177:45">cpu_addr</name></expr></argument>, <argument pos:start="5177:48" pos:end="5177:55"><expr pos:start="5177:48" pos:end="5177:55"><name pos:start="5177:48" pos:end="5177:55">cpu_src2</name></expr></argument>, <argument pos:start="5177:58" pos:end="5177:61"><expr pos:start="5177:58" pos:end="5177:61"><name pos:start="5177:58" pos:end="5177:61">insn</name></expr></argument>, <argument pos:start="5177:64" pos:end="5177:65"><expr pos:start="5177:64" pos:end="5177:65"><name pos:start="5177:64" pos:end="5177:65">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5179:21" pos:end="5182:0">break;</break>

<cpp:else pos:start="5181:1" pos:end="5181:5">#<cpp:directive pos:start="5181:2" pos:end="5181:5">else</cpp:directive></cpp:else>

                <case pos:start="5183:17" pos:end="5183:26">case <expr pos:start="5183:22" pos:end="5183:25"><literal type="number" pos:start="5183:22" pos:end="5183:25">0x34</literal></expr>:</case> <comment type="block" pos:start="5183:28" pos:end="5183:36">/* stc */</comment>

                <case pos:start="5185:17" pos:end="5185:26">case <expr pos:start="5185:22" pos:end="5185:25"><literal type="number" pos:start="5185:22" pos:end="5185:25">0x35</literal></expr>:</case> <comment type="block" pos:start="5185:28" pos:end="5185:38">/* stcsr */</comment>

                <case pos:start="5187:17" pos:end="5187:26">case <expr pos:start="5187:22" pos:end="5187:25"><literal type="number" pos:start="5187:22" pos:end="5187:25">0x36</literal></expr>:</case> <comment type="block" pos:start="5187:28" pos:end="5187:38">/* stdcq */</comment>

                <case pos:start="5189:17" pos:end="5189:26">case <expr pos:start="5189:22" pos:end="5189:25"><literal type="number" pos:start="5189:22" pos:end="5189:25">0x37</literal></expr>:</case> <comment type="block" pos:start="5189:28" pos:end="5189:37">/* stdc */</comment>

                    <goto pos:start="5191:21" pos:end="5194:0">goto <name pos:start="5191:26" pos:end="5191:33">ncp_insn</name>;</goto>

<cpp:endif pos:start="5193:1" pos:end="5193:6">#<cpp:directive pos:start="5193:2" pos:end="5193:6">endif</cpp:directive></cpp:endif>

                <default pos:start="5195:17" pos:end="5195:24">default:</default>

                    <goto pos:start="5197:21" pos:end="5197:38">goto <name pos:start="5197:26" pos:end="5197:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="5201:15" pos:end="5205:13">else <block pos:start="5201:20" pos:end="5205:13">{<block_content pos:start="5203:17" pos:end="5203:34">

                <goto pos:start="5203:17" pos:end="5203:34">goto <name pos:start="5203:22" pos:end="5203:33">illegal_insn</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="5209:9" pos:end="5209:14">break;</break>

    </block_content>}</block></switch>

    <comment type="block" pos:start="5213:5" pos:end="5213:48">/* default case for non jump instructions */</comment>

    <if_stmt pos:start="5215:5" pos:end="5235:5"><if pos:start="5215:5" pos:end="5221:5">if <condition pos:start="5215:8" pos:end="5215:30">(<expr pos:start="5215:9" pos:end="5215:29"><name pos:start="5215:9" pos:end="5215:15"><name pos:start="5215:9" pos:end="5215:10">dc</name><operator pos:start="5215:11" pos:end="5215:12">-&gt;</operator><name pos:start="5215:13" pos:end="5215:15">npc</name></name> <operator pos:start="5215:17" pos:end="5215:18">==</operator> <name pos:start="5215:20" pos:end="5215:29">DYNAMIC_PC</name></expr>)</condition> <block pos:start="5215:32" pos:end="5221:5">{<block_content pos:start="5217:9" pos:end="5219:27">

        <expr_stmt pos:start="5217:9" pos:end="5217:28"><expr pos:start="5217:9" pos:end="5217:27"><name pos:start="5217:9" pos:end="5217:14"><name pos:start="5217:9" pos:end="5217:10">dc</name><operator pos:start="5217:11" pos:end="5217:12">-&gt;</operator><name pos:start="5217:13" pos:end="5217:14">pc</name></name> <operator pos:start="5217:16" pos:end="5217:16">=</operator> <name pos:start="5217:18" pos:end="5217:27">DYNAMIC_PC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="5219:9" pos:end="5219:27"><expr pos:start="5219:9" pos:end="5219:26"><call pos:start="5219:9" pos:end="5219:26"><name pos:start="5219:9" pos:end="5219:24">gen_op_next_insn</name><argument_list pos:start="5219:25" pos:end="5219:26">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="5221:7" pos:end="5229:5">else if <condition pos:start="5221:15" pos:end="5221:34">(<expr pos:start="5221:16" pos:end="5221:33"><name pos:start="5221:16" pos:end="5221:22"><name pos:start="5221:16" pos:end="5221:17">dc</name><operator pos:start="5221:18" pos:end="5221:19">-&gt;</operator><name pos:start="5221:20" pos:end="5221:22">npc</name></name> <operator pos:start="5221:24" pos:end="5221:25">==</operator> <name pos:start="5221:27" pos:end="5221:33">JUMP_PC</name></expr>)</condition> <block pos:start="5221:36" pos:end="5229:5">{<block_content pos:start="5225:9" pos:end="5227:22">

        <comment type="block" pos:start="5223:9" pos:end="5223:37">/* we can do a static jump */</comment>

        <expr_stmt pos:start="5225:9" pos:end="5225:66"><expr pos:start="5225:9" pos:end="5225:65"><call pos:start="5225:9" pos:end="5225:65"><name pos:start="5225:9" pos:end="5225:19">gen_branch2</name><argument_list pos:start="5225:20" pos:end="5225:65">(<argument pos:start="5225:21" pos:end="5225:22"><expr pos:start="5225:21" pos:end="5225:22"><name pos:start="5225:21" pos:end="5225:22">dc</name></expr></argument>, <argument pos:start="5225:25" pos:end="5225:38"><expr pos:start="5225:25" pos:end="5225:38"><name pos:start="5225:25" pos:end="5225:38"><name pos:start="5225:25" pos:end="5225:26">dc</name><operator pos:start="5225:27" pos:end="5225:28">-&gt;</operator><name pos:start="5225:29" pos:end="5225:35">jump_pc</name><index pos:start="5225:36" pos:end="5225:38">[<expr pos:start="5225:37" pos:end="5225:37"><literal type="number" pos:start="5225:37" pos:end="5225:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5225:41" pos:end="5225:54"><expr pos:start="5225:41" pos:end="5225:54"><name pos:start="5225:41" pos:end="5225:54"><name pos:start="5225:41" pos:end="5225:42">dc</name><operator pos:start="5225:43" pos:end="5225:44">-&gt;</operator><name pos:start="5225:45" pos:end="5225:51">jump_pc</name><index pos:start="5225:52" pos:end="5225:54">[<expr pos:start="5225:53" pos:end="5225:53"><literal type="number" pos:start="5225:53" pos:end="5225:53">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="5225:57" pos:end="5225:64"><expr pos:start="5225:57" pos:end="5225:64"><name pos:start="5225:57" pos:end="5225:64">cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5227:9" pos:end="5227:22"><expr pos:start="5227:9" pos:end="5227:21"><name pos:start="5227:9" pos:end="5227:17"><name pos:start="5227:9" pos:end="5227:10">dc</name><operator pos:start="5227:11" pos:end="5227:12">-&gt;</operator><name pos:start="5227:13" pos:end="5227:17">is_br</name></name> <operator pos:start="5227:19" pos:end="5227:19">=</operator> <literal type="number" pos:start="5227:21" pos:end="5227:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="5229:7" pos:end="5235:5">else <block pos:start="5229:12" pos:end="5235:5">{<block_content pos:start="5231:9" pos:end="5233:30">

        <expr_stmt pos:start="5231:9" pos:end="5231:25"><expr pos:start="5231:9" pos:end="5231:24"><name pos:start="5231:9" pos:end="5231:14"><name pos:start="5231:9" pos:end="5231:10">dc</name><operator pos:start="5231:11" pos:end="5231:12">-&gt;</operator><name pos:start="5231:13" pos:end="5231:14">pc</name></name> <operator pos:start="5231:16" pos:end="5231:16">=</operator> <name pos:start="5231:18" pos:end="5231:24"><name pos:start="5231:18" pos:end="5231:19">dc</name><operator pos:start="5231:20" pos:end="5231:21">-&gt;</operator><name pos:start="5231:22" pos:end="5231:24">npc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="5233:9" pos:end="5233:30"><expr pos:start="5233:9" pos:end="5233:29"><name pos:start="5233:9" pos:end="5233:15"><name pos:start="5233:9" pos:end="5233:10">dc</name><operator pos:start="5233:11" pos:end="5233:12">-&gt;</operator><name pos:start="5233:13" pos:end="5233:15">npc</name></name> <operator pos:start="5233:17" pos:end="5233:17">=</operator> <name pos:start="5233:19" pos:end="5233:25"><name pos:start="5233:19" pos:end="5233:20">dc</name><operator pos:start="5233:21" pos:end="5233:22">-&gt;</operator><name pos:start="5233:23" pos:end="5233:25">npc</name></name> <operator pos:start="5233:27" pos:end="5233:27">+</operator> <literal type="number" pos:start="5233:29" pos:end="5233:29">4</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

 <label pos:start="5237:2" pos:end="5237:10"><name pos:start="5237:2" pos:end="5237:9">jmp_insn</name>:</label>

    <goto pos:start="5239:5" pos:end="5239:16">goto <name pos:start="5239:10" pos:end="5239:15">egress</name>;</goto>

 <label pos:start="5241:2" pos:end="5241:14"><name pos:start="5241:2" pos:end="5241:13">illegal_insn</name>:</label>

    <block pos:start="5243:5" pos:end="5259:5">{<block_content pos:start="5245:9" pos:end="5257:22">

        <decl_stmt pos:start="5245:9" pos:end="5245:25"><decl pos:start="5245:9" pos:end="5245:24"><type pos:start="5245:9" pos:end="5245:16"><name pos:start="5245:9" pos:end="5245:16">TCGv_i32</name></type> <name pos:start="5245:18" pos:end="5245:24">r_const</name></decl>;</decl_stmt>



        <expr_stmt pos:start="5249:9" pos:end="5249:23"><expr pos:start="5249:9" pos:end="5249:22"><call pos:start="5249:9" pos:end="5249:22"><name pos:start="5249:9" pos:end="5249:18">save_state</name><argument_list pos:start="5249:19" pos:end="5249:22">(<argument pos:start="5249:20" pos:end="5249:21"><expr pos:start="5249:20" pos:end="5249:21"><name pos:start="5249:20" pos:end="5249:21">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5251:9" pos:end="5251:45"><expr pos:start="5251:9" pos:end="5251:44"><name pos:start="5251:9" pos:end="5251:15">r_const</name> <operator pos:start="5251:17" pos:end="5251:17">=</operator> <call pos:start="5251:19" pos:end="5251:44"><name pos:start="5251:19" pos:end="5251:31">tcg_const_i32</name><argument_list pos:start="5251:32" pos:end="5251:44">(<argument pos:start="5251:33" pos:end="5251:43"><expr pos:start="5251:33" pos:end="5251:43"><name pos:start="5251:33" pos:end="5251:43">TT_ILL_INSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5253:9" pos:end="5253:53"><expr pos:start="5253:9" pos:end="5253:52"><call pos:start="5253:9" pos:end="5253:52"><name pos:start="5253:9" pos:end="5253:34">gen_helper_raise_exception</name><argument_list pos:start="5253:35" pos:end="5253:52">(<argument pos:start="5253:36" pos:end="5253:42"><expr pos:start="5253:36" pos:end="5253:42"><name pos:start="5253:36" pos:end="5253:42">cpu_env</name></expr></argument>, <argument pos:start="5253:45" pos:end="5253:51"><expr pos:start="5253:45" pos:end="5253:51"><name pos:start="5253:45" pos:end="5253:51">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5255:9" pos:end="5255:35"><expr pos:start="5255:9" pos:end="5255:34"><call pos:start="5255:9" pos:end="5255:34"><name pos:start="5255:9" pos:end="5255:25">tcg_temp_free_i32</name><argument_list pos:start="5255:26" pos:end="5255:34">(<argument pos:start="5255:27" pos:end="5255:33"><expr pos:start="5255:27" pos:end="5255:33"><name pos:start="5255:27" pos:end="5255:33">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5257:9" pos:end="5257:22"><expr pos:start="5257:9" pos:end="5257:21"><name pos:start="5257:9" pos:end="5257:17"><name pos:start="5257:9" pos:end="5257:10">dc</name><operator pos:start="5257:11" pos:end="5257:12">-&gt;</operator><name pos:start="5257:13" pos:end="5257:17">is_br</name></name> <operator pos:start="5257:19" pos:end="5257:19">=</operator> <literal type="number" pos:start="5257:21" pos:end="5257:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <goto pos:start="5261:5" pos:end="5261:16">goto <name pos:start="5261:10" pos:end="5261:15">egress</name>;</goto>

 <label pos:start="5263:2" pos:end="5263:13"><name pos:start="5263:2" pos:end="5263:12">unimp_flush</name>:</label>

    <block pos:start="5265:5" pos:end="5281:5">{<block_content pos:start="5267:9" pos:end="5279:22">

        <decl_stmt pos:start="5267:9" pos:end="5267:25"><decl pos:start="5267:9" pos:end="5267:24"><type pos:start="5267:9" pos:end="5267:16"><name pos:start="5267:9" pos:end="5267:16">TCGv_i32</name></type> <name pos:start="5267:18" pos:end="5267:24">r_const</name></decl>;</decl_stmt>



        <expr_stmt pos:start="5271:9" pos:end="5271:23"><expr pos:start="5271:9" pos:end="5271:22"><call pos:start="5271:9" pos:end="5271:22"><name pos:start="5271:9" pos:end="5271:18">save_state</name><argument_list pos:start="5271:19" pos:end="5271:22">(<argument pos:start="5271:20" pos:end="5271:21"><expr pos:start="5271:20" pos:end="5271:21"><name pos:start="5271:20" pos:end="5271:21">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5273:9" pos:end="5273:48"><expr pos:start="5273:9" pos:end="5273:47"><name pos:start="5273:9" pos:end="5273:15">r_const</name> <operator pos:start="5273:17" pos:end="5273:17">=</operator> <call pos:start="5273:19" pos:end="5273:47"><name pos:start="5273:19" pos:end="5273:31">tcg_const_i32</name><argument_list pos:start="5273:32" pos:end="5273:47">(<argument pos:start="5273:33" pos:end="5273:46"><expr pos:start="5273:33" pos:end="5273:46"><name pos:start="5273:33" pos:end="5273:46">TT_UNIMP_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5275:9" pos:end="5275:53"><expr pos:start="5275:9" pos:end="5275:52"><call pos:start="5275:9" pos:end="5275:52"><name pos:start="5275:9" pos:end="5275:34">gen_helper_raise_exception</name><argument_list pos:start="5275:35" pos:end="5275:52">(<argument pos:start="5275:36" pos:end="5275:42"><expr pos:start="5275:36" pos:end="5275:42"><name pos:start="5275:36" pos:end="5275:42">cpu_env</name></expr></argument>, <argument pos:start="5275:45" pos:end="5275:51"><expr pos:start="5275:45" pos:end="5275:51"><name pos:start="5275:45" pos:end="5275:51">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5277:9" pos:end="5277:35"><expr pos:start="5277:9" pos:end="5277:34"><call pos:start="5277:9" pos:end="5277:34"><name pos:start="5277:9" pos:end="5277:25">tcg_temp_free_i32</name><argument_list pos:start="5277:26" pos:end="5277:34">(<argument pos:start="5277:27" pos:end="5277:33"><expr pos:start="5277:27" pos:end="5277:33"><name pos:start="5277:27" pos:end="5277:33">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5279:9" pos:end="5279:22"><expr pos:start="5279:9" pos:end="5279:21"><name pos:start="5279:9" pos:end="5279:17"><name pos:start="5279:9" pos:end="5279:10">dc</name><operator pos:start="5279:11" pos:end="5279:12">-&gt;</operator><name pos:start="5279:13" pos:end="5279:17">is_br</name></name> <operator pos:start="5279:19" pos:end="5279:19">=</operator> <literal type="number" pos:start="5279:21" pos:end="5279:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <goto pos:start="5283:5" pos:end="5286:0">goto <name pos:start="5283:10" pos:end="5283:15">egress</name>;</goto>

<cpp:if pos:start="5285:1" pos:end="5285:30">#<cpp:directive pos:start="5285:2" pos:end="5285:3">if</cpp:directive> <expr pos:start="5285:5" pos:end="5285:30"><operator pos:start="5285:5" pos:end="5285:5">!</operator><call pos:start="5285:6" pos:end="5285:30"><name pos:start="5285:6" pos:end="5285:12">defined</name><argument_list pos:start="5285:13" pos:end="5285:30">(<argument pos:start="5285:14" pos:end="5285:29"><expr pos:start="5285:14" pos:end="5285:29"><name pos:start="5285:14" pos:end="5285:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

 <label pos:start="5287:2" pos:end="5287:11"><name pos:start="5287:2" pos:end="5287:10">priv_insn</name>:</label>

    <block pos:start="5289:5" pos:end="5305:5">{<block_content pos:start="5291:9" pos:end="5303:22">

        <decl_stmt pos:start="5291:9" pos:end="5291:25"><decl pos:start="5291:9" pos:end="5291:24"><type pos:start="5291:9" pos:end="5291:16"><name pos:start="5291:9" pos:end="5291:16">TCGv_i32</name></type> <name pos:start="5291:18" pos:end="5291:24">r_const</name></decl>;</decl_stmt>



        <expr_stmt pos:start="5295:9" pos:end="5295:23"><expr pos:start="5295:9" pos:end="5295:22"><call pos:start="5295:9" pos:end="5295:22"><name pos:start="5295:9" pos:end="5295:18">save_state</name><argument_list pos:start="5295:19" pos:end="5295:22">(<argument pos:start="5295:20" pos:end="5295:21"><expr pos:start="5295:20" pos:end="5295:21"><name pos:start="5295:20" pos:end="5295:21">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5297:9" pos:end="5297:46"><expr pos:start="5297:9" pos:end="5297:45"><name pos:start="5297:9" pos:end="5297:15">r_const</name> <operator pos:start="5297:17" pos:end="5297:17">=</operator> <call pos:start="5297:19" pos:end="5297:45"><name pos:start="5297:19" pos:end="5297:31">tcg_const_i32</name><argument_list pos:start="5297:32" pos:end="5297:45">(<argument pos:start="5297:33" pos:end="5297:44"><expr pos:start="5297:33" pos:end="5297:44"><name pos:start="5297:33" pos:end="5297:44">TT_PRIV_INSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5299:9" pos:end="5299:53"><expr pos:start="5299:9" pos:end="5299:52"><call pos:start="5299:9" pos:end="5299:52"><name pos:start="5299:9" pos:end="5299:34">gen_helper_raise_exception</name><argument_list pos:start="5299:35" pos:end="5299:52">(<argument pos:start="5299:36" pos:end="5299:42"><expr pos:start="5299:36" pos:end="5299:42"><name pos:start="5299:36" pos:end="5299:42">cpu_env</name></expr></argument>, <argument pos:start="5299:45" pos:end="5299:51"><expr pos:start="5299:45" pos:end="5299:51"><name pos:start="5299:45" pos:end="5299:51">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5301:9" pos:end="5301:35"><expr pos:start="5301:9" pos:end="5301:34"><call pos:start="5301:9" pos:end="5301:34"><name pos:start="5301:9" pos:end="5301:25">tcg_temp_free_i32</name><argument_list pos:start="5301:26" pos:end="5301:34">(<argument pos:start="5301:27" pos:end="5301:33"><expr pos:start="5301:27" pos:end="5301:33"><name pos:start="5301:27" pos:end="5301:33">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5303:9" pos:end="5303:22"><expr pos:start="5303:9" pos:end="5303:21"><name pos:start="5303:9" pos:end="5303:17"><name pos:start="5303:9" pos:end="5303:10">dc</name><operator pos:start="5303:11" pos:end="5303:12">-&gt;</operator><name pos:start="5303:13" pos:end="5303:17">is_br</name></name> <operator pos:start="5303:19" pos:end="5303:19">=</operator> <literal type="number" pos:start="5303:21" pos:end="5303:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <goto pos:start="5307:5" pos:end="5310:0">goto <name pos:start="5307:10" pos:end="5307:15">egress</name>;</goto>

<cpp:endif pos:start="5309:1" pos:end="5309:6">#<cpp:directive pos:start="5309:2" pos:end="5309:6">endif</cpp:directive></cpp:endif>

 <label pos:start="5311:2" pos:end="5311:11"><name pos:start="5311:2" pos:end="5311:10">nfpu_insn</name>:</label>

    <expr_stmt pos:start="5313:5" pos:end="5313:19"><expr pos:start="5313:5" pos:end="5313:18"><call pos:start="5313:5" pos:end="5313:18"><name pos:start="5313:5" pos:end="5313:14">save_state</name><argument_list pos:start="5313:15" pos:end="5313:18">(<argument pos:start="5313:16" pos:end="5313:17"><expr pos:start="5313:16" pos:end="5313:17"><name pos:start="5313:16" pos:end="5313:17">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5315:5" pos:end="5315:45"><expr pos:start="5315:5" pos:end="5315:44"><call pos:start="5315:5" pos:end="5315:44"><name pos:start="5315:5" pos:end="5315:25">gen_op_fpexception_im</name><argument_list pos:start="5315:26" pos:end="5315:44">(<argument pos:start="5315:27" pos:end="5315:43"><expr pos:start="5315:27" pos:end="5315:43"><name pos:start="5315:27" pos:end="5315:43">FSR_FTT_UNIMPFPOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5317:5" pos:end="5317:18"><expr pos:start="5317:5" pos:end="5317:17"><name pos:start="5317:5" pos:end="5317:13"><name pos:start="5317:5" pos:end="5317:6">dc</name><operator pos:start="5317:7" pos:end="5317:8">-&gt;</operator><name pos:start="5317:9" pos:end="5317:13">is_br</name></name> <operator pos:start="5317:15" pos:end="5317:15">=</operator> <literal type="number" pos:start="5317:17" pos:end="5317:17">1</literal></expr>;</expr_stmt>

    <goto pos:start="5319:5" pos:end="5322:0">goto <name pos:start="5319:10" pos:end="5319:15">egress</name>;</goto>

<cpp:if pos:start="5321:1" pos:end="5321:58">#<cpp:directive pos:start="5321:2" pos:end="5321:3">if</cpp:directive> <expr pos:start="5321:5" pos:end="5321:58"><operator pos:start="5321:5" pos:end="5321:5">!</operator><call pos:start="5321:6" pos:end="5321:30"><name pos:start="5321:6" pos:end="5321:12">defined</name><argument_list pos:start="5321:13" pos:end="5321:30">(<argument pos:start="5321:14" pos:end="5321:29"><expr pos:start="5321:14" pos:end="5321:29"><name pos:start="5321:14" pos:end="5321:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="5321:32" pos:end="5321:33">&amp;&amp;</operator> <operator pos:start="5321:35" pos:end="5321:35">!</operator><call pos:start="5321:36" pos:end="5321:58"><name pos:start="5321:36" pos:end="5321:42">defined</name><argument_list pos:start="5321:43" pos:end="5321:58">(<argument pos:start="5321:44" pos:end="5321:57"><expr pos:start="5321:44" pos:end="5321:57"><name pos:start="5321:44" pos:end="5321:57">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

 <label pos:start="5323:2" pos:end="5323:10"><name pos:start="5323:2" pos:end="5323:9">nfq_insn</name>:</label>

    <expr_stmt pos:start="5325:5" pos:end="5325:19"><expr pos:start="5325:5" pos:end="5325:18"><call pos:start="5325:5" pos:end="5325:18"><name pos:start="5325:5" pos:end="5325:14">save_state</name><argument_list pos:start="5325:15" pos:end="5325:18">(<argument pos:start="5325:16" pos:end="5325:17"><expr pos:start="5325:16" pos:end="5325:17"><name pos:start="5325:16" pos:end="5325:17">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5327:5" pos:end="5327:45"><expr pos:start="5327:5" pos:end="5327:44"><call pos:start="5327:5" pos:end="5327:44"><name pos:start="5327:5" pos:end="5327:25">gen_op_fpexception_im</name><argument_list pos:start="5327:26" pos:end="5327:44">(<argument pos:start="5327:27" pos:end="5327:43"><expr pos:start="5327:27" pos:end="5327:43"><name pos:start="5327:27" pos:end="5327:43">FSR_FTT_SEQ_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5329:5" pos:end="5329:18"><expr pos:start="5329:5" pos:end="5329:17"><name pos:start="5329:5" pos:end="5329:13"><name pos:start="5329:5" pos:end="5329:6">dc</name><operator pos:start="5329:7" pos:end="5329:8">-&gt;</operator><name pos:start="5329:9" pos:end="5329:13">is_br</name></name> <operator pos:start="5329:15" pos:end="5329:15">=</operator> <literal type="number" pos:start="5329:17" pos:end="5329:17">1</literal></expr>;</expr_stmt>

    <goto pos:start="5331:5" pos:end="5336:0">goto <name pos:start="5331:10" pos:end="5331:15">egress</name>;</goto>

<cpp:endif pos:start="5333:1" pos:end="5333:6">#<cpp:directive pos:start="5333:2" pos:end="5333:6">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:start="5335:1" pos:end="5335:22">#<cpp:directive pos:start="5335:2" pos:end="5335:7">ifndef</cpp:directive> <name pos:start="5335:9" pos:end="5335:22">TARGET_SPARC64</name></cpp:ifndef>

 <label pos:start="5337:2" pos:end="5337:10"><name pos:start="5337:2" pos:end="5337:9">ncp_insn</name>:</label>

    <block pos:start="5339:5" pos:end="5355:5">{<block_content pos:start="5341:9" pos:end="5353:22">

        <decl_stmt pos:start="5341:9" pos:end="5341:21"><decl pos:start="5341:9" pos:end="5341:20"><type pos:start="5341:9" pos:end="5341:12"><name pos:start="5341:9" pos:end="5341:12">TCGv</name></type> <name pos:start="5341:14" pos:end="5341:20">r_const</name></decl>;</decl_stmt>



        <expr_stmt pos:start="5345:9" pos:end="5345:23"><expr pos:start="5345:9" pos:end="5345:22"><call pos:start="5345:9" pos:end="5345:22"><name pos:start="5345:9" pos:end="5345:18">save_state</name><argument_list pos:start="5345:19" pos:end="5345:22">(<argument pos:start="5345:20" pos:end="5345:21"><expr pos:start="5345:20" pos:end="5345:21"><name pos:start="5345:20" pos:end="5345:21">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5347:9" pos:end="5347:45"><expr pos:start="5347:9" pos:end="5347:44"><name pos:start="5347:9" pos:end="5347:15">r_const</name> <operator pos:start="5347:17" pos:end="5347:17">=</operator> <call pos:start="5347:19" pos:end="5347:44"><name pos:start="5347:19" pos:end="5347:31">tcg_const_i32</name><argument_list pos:start="5347:32" pos:end="5347:44">(<argument pos:start="5347:33" pos:end="5347:43"><expr pos:start="5347:33" pos:end="5347:43"><name pos:start="5347:33" pos:end="5347:43">TT_NCP_INSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5349:9" pos:end="5349:53"><expr pos:start="5349:9" pos:end="5349:52"><call pos:start="5349:9" pos:end="5349:52"><name pos:start="5349:9" pos:end="5349:34">gen_helper_raise_exception</name><argument_list pos:start="5349:35" pos:end="5349:52">(<argument pos:start="5349:36" pos:end="5349:42"><expr pos:start="5349:36" pos:end="5349:42"><name pos:start="5349:36" pos:end="5349:42">cpu_env</name></expr></argument>, <argument pos:start="5349:45" pos:end="5349:51"><expr pos:start="5349:45" pos:end="5349:51"><name pos:start="5349:45" pos:end="5349:51">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5351:9" pos:end="5351:31"><expr pos:start="5351:9" pos:end="5351:30"><call pos:start="5351:9" pos:end="5351:30"><name pos:start="5351:9" pos:end="5351:21">tcg_temp_free</name><argument_list pos:start="5351:22" pos:end="5351:30">(<argument pos:start="5351:23" pos:end="5351:29"><expr pos:start="5351:23" pos:end="5351:29"><name pos:start="5351:23" pos:end="5351:29">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5353:9" pos:end="5353:22"><expr pos:start="5353:9" pos:end="5353:21"><name pos:start="5353:9" pos:end="5353:17"><name pos:start="5353:9" pos:end="5353:10">dc</name><operator pos:start="5353:11" pos:end="5353:12">-&gt;</operator><name pos:start="5353:13" pos:end="5353:17">is_br</name></name> <operator pos:start="5353:19" pos:end="5353:19">=</operator> <literal type="number" pos:start="5353:21" pos:end="5353:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <goto pos:start="5357:5" pos:end="5360:0">goto <name pos:start="5357:10" pos:end="5357:15">egress</name>;</goto>

<cpp:endif pos:start="5359:1" pos:end="5359:6">#<cpp:directive pos:start="5359:2" pos:end="5359:6">endif</cpp:directive></cpp:endif>

 <label pos:start="5361:2" pos:end="5361:8"><name pos:start="5361:2" pos:end="5361:7">egress</name>:</label>

    <if_stmt pos:start="5363:5" pos:end="5375:5"><if pos:start="5363:5" pos:end="5375:5">if <condition pos:start="5363:8" pos:end="5363:23">(<expr pos:start="5363:9" pos:end="5363:22"><name pos:start="5363:9" pos:end="5363:17"><name pos:start="5363:9" pos:end="5363:10">dc</name><operator pos:start="5363:11" pos:end="5363:12">-&gt;</operator><name pos:start="5363:13" pos:end="5363:17">n_t32</name></name> <operator pos:start="5363:19" pos:end="5363:20">!=</operator> <literal type="number" pos:start="5363:22" pos:end="5363:22">0</literal></expr>)</condition> <block pos:start="5363:25" pos:end="5375:5">{<block_content pos:start="5365:9" pos:end="5373:22">

        <decl_stmt pos:start="5365:9" pos:end="5365:14"><decl pos:start="5365:9" pos:end="5365:13"><type pos:start="5365:9" pos:end="5365:11"><name pos:start="5365:9" pos:end="5365:11">int</name></type> <name pos:start="5365:13" pos:end="5365:13">i</name></decl>;</decl_stmt>

        <for pos:start="5367:9" pos:end="5371:9">for <control pos:start="5367:13" pos:end="5367:44">(<init pos:start="5367:14" pos:end="5367:31"><expr pos:start="5367:14" pos:end="5367:30"><name pos:start="5367:14" pos:end="5367:14">i</name> <operator pos:start="5367:16" pos:end="5367:16">=</operator> <name pos:start="5367:18" pos:end="5367:26"><name pos:start="5367:18" pos:end="5367:19">dc</name><operator pos:start="5367:20" pos:end="5367:21">-&gt;</operator><name pos:start="5367:22" pos:end="5367:26">n_t32</name></name> <operator pos:start="5367:28" pos:end="5367:28">-</operator> <literal type="number" pos:start="5367:30" pos:end="5367:30">1</literal></expr>;</init> <condition pos:start="5367:33" pos:end="5367:39"><expr pos:start="5367:33" pos:end="5367:38"><name pos:start="5367:33" pos:end="5367:33">i</name> <operator pos:start="5367:35" pos:end="5367:36">&gt;=</operator> <literal type="number" pos:start="5367:38" pos:end="5367:38">0</literal></expr>;</condition> <incr pos:start="5367:41" pos:end="5367:43"><expr pos:start="5367:41" pos:end="5367:43"><operator pos:start="5367:41" pos:end="5367:42">--</operator><name pos:start="5367:43" pos:end="5367:43">i</name></expr></incr>)</control> <block pos:start="5367:46" pos:end="5371:9">{<block_content pos:start="5369:13" pos:end="5369:42">

            <expr_stmt pos:start="5369:13" pos:end="5369:42"><expr pos:start="5369:13" pos:end="5369:41"><call pos:start="5369:13" pos:end="5369:41"><name pos:start="5369:13" pos:end="5369:29">tcg_temp_free_i32</name><argument_list pos:start="5369:30" pos:end="5369:41">(<argument pos:start="5369:31" pos:end="5369:40"><expr pos:start="5369:31" pos:end="5369:40"><name pos:start="5369:31" pos:end="5369:40"><name pos:start="5369:31" pos:end="5369:32">dc</name><operator pos:start="5369:33" pos:end="5369:34">-&gt;</operator><name pos:start="5369:35" pos:end="5369:37">t32</name><index pos:start="5369:38" pos:end="5369:40">[<expr pos:start="5369:39" pos:end="5369:39"><name pos:start="5369:39" pos:end="5369:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="5373:9" pos:end="5373:22"><expr pos:start="5373:9" pos:end="5373:21"><name pos:start="5373:9" pos:end="5373:17"><name pos:start="5373:9" pos:end="5373:10">dc</name><operator pos:start="5373:11" pos:end="5373:12">-&gt;</operator><name pos:start="5373:13" pos:end="5373:17">n_t32</name></name> <operator pos:start="5373:19" pos:end="5373:19">=</operator> <literal type="number" pos:start="5373:21" pos:end="5373:21">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="5377:5" pos:end="5389:5"><if pos:start="5377:5" pos:end="5389:5">if <condition pos:start="5377:8" pos:end="5377:23">(<expr pos:start="5377:9" pos:end="5377:22"><name pos:start="5377:9" pos:end="5377:17"><name pos:start="5377:9" pos:end="5377:10">dc</name><operator pos:start="5377:11" pos:end="5377:12">-&gt;</operator><name pos:start="5377:13" pos:end="5377:17">n_ttl</name></name> <operator pos:start="5377:19" pos:end="5377:20">!=</operator> <literal type="number" pos:start="5377:22" pos:end="5377:22">0</literal></expr>)</condition> <block pos:start="5377:25" pos:end="5389:5">{<block_content pos:start="5379:9" pos:end="5387:22">

        <decl_stmt pos:start="5379:9" pos:end="5379:14"><decl pos:start="5379:9" pos:end="5379:13"><type pos:start="5379:9" pos:end="5379:11"><name pos:start="5379:9" pos:end="5379:11">int</name></type> <name pos:start="5379:13" pos:end="5379:13">i</name></decl>;</decl_stmt>

        <for pos:start="5381:9" pos:end="5385:9">for <control pos:start="5381:13" pos:end="5381:44">(<init pos:start="5381:14" pos:end="5381:31"><expr pos:start="5381:14" pos:end="5381:30"><name pos:start="5381:14" pos:end="5381:14">i</name> <operator pos:start="5381:16" pos:end="5381:16">=</operator> <name pos:start="5381:18" pos:end="5381:26"><name pos:start="5381:18" pos:end="5381:19">dc</name><operator pos:start="5381:20" pos:end="5381:21">-&gt;</operator><name pos:start="5381:22" pos:end="5381:26">n_ttl</name></name> <operator pos:start="5381:28" pos:end="5381:28">-</operator> <literal type="number" pos:start="5381:30" pos:end="5381:30">1</literal></expr>;</init> <condition pos:start="5381:33" pos:end="5381:39"><expr pos:start="5381:33" pos:end="5381:38"><name pos:start="5381:33" pos:end="5381:33">i</name> <operator pos:start="5381:35" pos:end="5381:36">&gt;=</operator> <literal type="number" pos:start="5381:38" pos:end="5381:38">0</literal></expr>;</condition> <incr pos:start="5381:41" pos:end="5381:43"><expr pos:start="5381:41" pos:end="5381:43"><operator pos:start="5381:41" pos:end="5381:42">--</operator><name pos:start="5381:43" pos:end="5381:43">i</name></expr></incr>)</control> <block pos:start="5381:46" pos:end="5385:9">{<block_content pos:start="5383:13" pos:end="5383:38">

            <expr_stmt pos:start="5383:13" pos:end="5383:38"><expr pos:start="5383:13" pos:end="5383:37"><call pos:start="5383:13" pos:end="5383:37"><name pos:start="5383:13" pos:end="5383:25">tcg_temp_free</name><argument_list pos:start="5383:26" pos:end="5383:37">(<argument pos:start="5383:27" pos:end="5383:36"><expr pos:start="5383:27" pos:end="5383:36"><name pos:start="5383:27" pos:end="5383:36"><name pos:start="5383:27" pos:end="5383:28">dc</name><operator pos:start="5383:29" pos:end="5383:30">-&gt;</operator><name pos:start="5383:31" pos:end="5383:33">ttl</name><index pos:start="5383:34" pos:end="5383:36">[<expr pos:start="5383:35" pos:end="5383:35"><name pos:start="5383:35" pos:end="5383:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="5387:9" pos:end="5387:22"><expr pos:start="5387:9" pos:end="5387:21"><name pos:start="5387:9" pos:end="5387:17"><name pos:start="5387:9" pos:end="5387:10">dc</name><operator pos:start="5387:11" pos:end="5387:12">-&gt;</operator><name pos:start="5387:13" pos:end="5387:17">n_ttl</name></name> <operator pos:start="5387:19" pos:end="5387:19">=</operator> <literal type="number" pos:start="5387:21" pos:end="5387:21">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
