<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25332.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">vnc_write_pixels_generic</name><parameter_list pos:start="1:37" pos:end="1:75">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:45">VncState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">vs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:64">pixels1</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:74"><decl pos:start="1:67" pos:end="1:74"><type pos:start="1:67" pos:end="1:74"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:74">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:18"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:18">[<expr pos:start="5:17" pos:end="5:17"><literal type="number" pos:start="5:17" pos:end="5:17">4</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="61:5"><if pos:start="9:5" pos:end="25:5">if <condition pos:start="9:8" pos:end="9:23">(<expr pos:start="9:9" pos:end="9:22"><name pos:start="9:9" pos:end="9:17"><name pos:start="9:9" pos:end="9:10">vs</name><operator pos:start="9:11" pos:end="9:12">-&gt;</operator><name pos:start="9:13" pos:end="9:17">depth</name></name> <operator pos:start="9:19" pos:end="9:20">==</operator> <literal type="number" pos:start="9:22" pos:end="9:22">4</literal></expr>)</condition> <block pos:start="9:25" pos:end="25:5">{<block_content pos:start="11:9" pos:end="23:9">

        <decl_stmt pos:start="11:9" pos:end="11:35"><decl pos:start="11:9" pos:end="11:34"><type pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:16">uint32_t</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:24">pixels</name> <init pos:start="11:26" pos:end="11:34">= <expr pos:start="11:28" pos:end="11:34"><name pos:start="11:28" pos:end="11:34">pixels1</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:17"><decl pos:start="13:9" pos:end="13:13"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:13">n</name></decl>, <decl pos:start="13:16" pos:end="13:16"><type ref="prev" pos:start="13:9" pos:end="13:11"/><name pos:start="13:16" pos:end="13:16">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:22"><expr pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:9">n</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:16">size</name> <operator pos:start="15:18" pos:end="15:19">&gt;&gt;</operator> <literal type="number" pos:start="15:21" pos:end="15:21">2</literal></expr>;</expr_stmt>

        <for pos:start="17:9" pos:end="23:9">for<control pos:start="17:12" pos:end="17:30">(<init pos:start="17:13" pos:end="17:18"><expr pos:start="17:13" pos:end="17:17"><name pos:start="17:13" pos:end="17:13">i</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr>;</init> <condition pos:start="17:20" pos:end="17:25"><expr pos:start="17:20" pos:end="17:24"><name pos:start="17:20" pos:end="17:20">i</name> <operator pos:start="17:22" pos:end="17:22">&lt;</operator> <name pos:start="17:24" pos:end="17:24">n</name></expr>;</condition> <incr pos:start="17:27" pos:end="17:29"><expr pos:start="17:27" pos:end="17:29"><name pos:start="17:27" pos:end="17:27">i</name><operator pos:start="17:28" pos:end="17:29">++</operator></expr></incr>)</control> <block pos:start="17:32" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:44">

            <expr_stmt pos:start="19:13" pos:end="19:50"><expr pos:start="19:13" pos:end="19:49"><call pos:start="19:13" pos:end="19:49"><name pos:start="19:13" pos:end="19:29">vnc_convert_pixel</name><argument_list pos:start="19:30" pos:end="19:49">(<argument pos:start="19:31" pos:end="19:32"><expr pos:start="19:31" pos:end="19:32"><name pos:start="19:31" pos:end="19:32">vs</name></expr></argument>, <argument pos:start="19:35" pos:end="19:37"><expr pos:start="19:35" pos:end="19:37"><name pos:start="19:35" pos:end="19:37">buf</name></expr></argument>, <argument pos:start="19:40" pos:end="19:48"><expr pos:start="19:40" pos:end="19:48"><name pos:start="19:40" pos:end="19:48"><name pos:start="19:40" pos:end="19:45">pixels</name><index pos:start="19:46" pos:end="19:48">[<expr pos:start="19:47" pos:end="19:47"><name pos:start="19:47" pos:end="19:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:44"><expr pos:start="21:13" pos:end="21:43"><call pos:start="21:13" pos:end="21:43"><name pos:start="21:13" pos:end="21:21">vnc_write</name><argument_list pos:start="21:22" pos:end="21:43">(<argument pos:start="21:23" pos:end="21:24"><expr pos:start="21:23" pos:end="21:24"><name pos:start="21:23" pos:end="21:24">vs</name></expr></argument>, <argument pos:start="21:27" pos:end="21:29"><expr pos:start="21:27" pos:end="21:29"><name pos:start="21:27" pos:end="21:29">buf</name></expr></argument>, <argument pos:start="21:32" pos:end="21:42"><expr pos:start="21:32" pos:end="21:42"><name pos:start="21:32" pos:end="21:42"><name pos:start="21:32" pos:end="21:33">vs</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:42">pix_bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="25:7" pos:end="41:5">else if <condition pos:start="25:15" pos:end="25:30">(<expr pos:start="25:16" pos:end="25:29"><name pos:start="25:16" pos:end="25:24"><name pos:start="25:16" pos:end="25:17">vs</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:24">depth</name></name> <operator pos:start="25:26" pos:end="25:27">==</operator> <literal type="number" pos:start="25:29" pos:end="25:29">2</literal></expr>)</condition> <block pos:start="25:32" pos:end="41:5">{<block_content pos:start="27:9" pos:end="39:9">

        <decl_stmt pos:start="27:9" pos:end="27:35"><decl pos:start="27:9" pos:end="27:34"><type pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:16">uint16_t</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:24">pixels</name> <init pos:start="27:26" pos:end="27:34">= <expr pos:start="27:28" pos:end="27:34"><name pos:start="27:28" pos:end="27:34">pixels1</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:17"><decl pos:start="29:9" pos:end="29:13"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:13">n</name></decl>, <decl pos:start="29:16" pos:end="29:16"><type ref="prev" pos:start="29:9" pos:end="29:11"/><name pos:start="29:16" pos:end="29:16">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:22"><expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:9">n</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <name pos:start="31:13" pos:end="31:16">size</name> <operator pos:start="31:18" pos:end="31:19">&gt;&gt;</operator> <literal type="number" pos:start="31:21" pos:end="31:21">1</literal></expr>;</expr_stmt>

        <for pos:start="33:9" pos:end="39:9">for<control pos:start="33:12" pos:end="33:30">(<init pos:start="33:13" pos:end="33:18"><expr pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:13">i</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>;</init> <condition pos:start="33:20" pos:end="33:25"><expr pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:20">i</name> <operator pos:start="33:22" pos:end="33:22">&lt;</operator> <name pos:start="33:24" pos:end="33:24">n</name></expr>;</condition> <incr pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:27">i</name><operator pos:start="33:28" pos:end="33:29">++</operator></expr></incr>)</control> <block pos:start="33:32" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:44">

            <expr_stmt pos:start="35:13" pos:end="35:50"><expr pos:start="35:13" pos:end="35:49"><call pos:start="35:13" pos:end="35:49"><name pos:start="35:13" pos:end="35:29">vnc_convert_pixel</name><argument_list pos:start="35:30" pos:end="35:49">(<argument pos:start="35:31" pos:end="35:32"><expr pos:start="35:31" pos:end="35:32"><name pos:start="35:31" pos:end="35:32">vs</name></expr></argument>, <argument pos:start="35:35" pos:end="35:37"><expr pos:start="35:35" pos:end="35:37"><name pos:start="35:35" pos:end="35:37">buf</name></expr></argument>, <argument pos:start="35:40" pos:end="35:48"><expr pos:start="35:40" pos:end="35:48"><name pos:start="35:40" pos:end="35:48"><name pos:start="35:40" pos:end="35:45">pixels</name><index pos:start="35:46" pos:end="35:48">[<expr pos:start="35:47" pos:end="35:47"><name pos:start="35:47" pos:end="35:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:44"><expr pos:start="37:13" pos:end="37:43"><call pos:start="37:13" pos:end="37:43"><name pos:start="37:13" pos:end="37:21">vnc_write</name><argument_list pos:start="37:22" pos:end="37:43">(<argument pos:start="37:23" pos:end="37:24"><expr pos:start="37:23" pos:end="37:24"><name pos:start="37:23" pos:end="37:24">vs</name></expr></argument>, <argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">buf</name></expr></argument>, <argument pos:start="37:32" pos:end="37:42"><expr pos:start="37:32" pos:end="37:42"><name pos:start="37:32" pos:end="37:42"><name pos:start="37:32" pos:end="37:33">vs</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:42">pix_bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="57:5">else if <condition pos:start="41:15" pos:end="41:30">(<expr pos:start="41:16" pos:end="41:29"><name pos:start="41:16" pos:end="41:24"><name pos:start="41:16" pos:end="41:17">vs</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:24">depth</name></name> <operator pos:start="41:26" pos:end="41:27">==</operator> <literal type="number" pos:start="41:29" pos:end="41:29">1</literal></expr>)</condition> <block pos:start="41:32" pos:end="57:5">{<block_content pos:start="43:9" pos:end="55:9">

        <decl_stmt pos:start="43:9" pos:end="43:34"><decl pos:start="43:9" pos:end="43:33"><type pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:15">uint8_t</name> <modifier pos:start="43:17" pos:end="43:17">*</modifier></type><name pos:start="43:18" pos:end="43:23">pixels</name> <init pos:start="43:25" pos:end="43:33">= <expr pos:start="43:27" pos:end="43:33"><name pos:start="43:27" pos:end="43:33">pixels1</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:17"><decl pos:start="45:9" pos:end="45:13"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:13">n</name></decl>, <decl pos:start="45:16" pos:end="45:16"><type ref="prev" pos:start="45:9" pos:end="45:11"/><name pos:start="45:16" pos:end="45:16">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:17"><expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:9">n</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <name pos:start="47:13" pos:end="47:16">size</name></expr>;</expr_stmt>

        <for pos:start="49:9" pos:end="55:9">for<control pos:start="49:12" pos:end="49:30">(<init pos:start="49:13" pos:end="49:18"><expr pos:start="49:13" pos:end="49:17"><name pos:start="49:13" pos:end="49:13">i</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <literal type="number" pos:start="49:17" pos:end="49:17">0</literal></expr>;</init> <condition pos:start="49:20" pos:end="49:25"><expr pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:20">i</name> <operator pos:start="49:22" pos:end="49:22">&lt;</operator> <name pos:start="49:24" pos:end="49:24">n</name></expr>;</condition> <incr pos:start="49:27" pos:end="49:29"><expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:27">i</name><operator pos:start="49:28" pos:end="49:29">++</operator></expr></incr>)</control> <block pos:start="49:32" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:44">

            <expr_stmt pos:start="51:13" pos:end="51:50"><expr pos:start="51:13" pos:end="51:49"><call pos:start="51:13" pos:end="51:49"><name pos:start="51:13" pos:end="51:29">vnc_convert_pixel</name><argument_list pos:start="51:30" pos:end="51:49">(<argument pos:start="51:31" pos:end="51:32"><expr pos:start="51:31" pos:end="51:32"><name pos:start="51:31" pos:end="51:32">vs</name></expr></argument>, <argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">buf</name></expr></argument>, <argument pos:start="51:40" pos:end="51:48"><expr pos:start="51:40" pos:end="51:48"><name pos:start="51:40" pos:end="51:48"><name pos:start="51:40" pos:end="51:45">pixels</name><index pos:start="51:46" pos:end="51:48">[<expr pos:start="51:47" pos:end="51:47"><name pos:start="51:47" pos:end="51:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:44"><expr pos:start="53:13" pos:end="53:43"><call pos:start="53:13" pos:end="53:43"><name pos:start="53:13" pos:end="53:21">vnc_write</name><argument_list pos:start="53:22" pos:end="53:43">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">vs</name></expr></argument>, <argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">buf</name></expr></argument>, <argument pos:start="53:32" pos:end="53:42"><expr pos:start="53:32" pos:end="53:42"><name pos:start="53:32" pos:end="53:42"><name pos:start="53:32" pos:end="53:33">vs</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:42">pix_bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:5">else <block pos:start="57:12" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:90">

        <expr_stmt pos:start="59:9" pos:end="59:90"><expr pos:start="59:9" pos:end="59:89"><call pos:start="59:9" pos:end="59:89"><name pos:start="59:9" pos:end="59:15">fprintf</name><argument_list pos:start="59:16" pos:end="59:89">(<argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">stderr</name></expr></argument>, <argument pos:start="59:25" pos:end="59:88"><expr pos:start="59:25" pos:end="59:88"><literal type="string" pos:start="59:25" pos:end="59:88">"vnc_write_pixels_generic: VncState color depth not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
