<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4586.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vda_h264_end_frame</name><parameter_list pos:start="1:30" pos:end="1:52">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">H264Context</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">h</name>        <init pos:start="5:27" pos:end="5:44">= <expr pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:33">avctx</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:63"><decl pos:start="7:5" pos:end="7:62"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">VDAContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">vda</name>       <init pos:start="7:27" pos:end="7:62">= <expr pos:start="7:29" pos:end="7:62"><name pos:start="7:29" pos:end="7:62"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:43">internal</name><operator pos:start="7:44" pos:end="7:45">-&gt;</operator><name pos:start="7:46" pos:end="7:62">hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:50"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">AVVDAContext</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:25">vda_ctx</name> <init pos:start="9:27" pos:end="9:50">= <expr pos:start="9:29" pos:end="9:50"><name pos:start="9:29" pos:end="9:50"><name pos:start="9:29" pos:end="9:33">avctx</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:50">hwaccel_context</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:18">frame</name>        <init pos:start="11:27" pos:end="11:45">= <expr pos:start="11:29" pos:end="11:45"><name pos:start="11:29" pos:end="11:45"><name pos:start="11:29" pos:end="11:29">h</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:42">cur_pic_ptr</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:45">f</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:24">flush_flags</name>  <init pos:start="13:27" pos:end="13:34">= <expr pos:start="13:29" pos:end="13:34"><literal type="number" pos:start="13:29" pos:end="13:29">1</literal> <operator pos:start="13:31" pos:end="13:32">&lt;&lt;</operator> <literal type="number" pos:start="13:34" pos:end="13:34">0</literal></expr></init></decl>;</decl_stmt> <comment type="line" format="doxygen" pos:start="13:37" pos:end="13:68">///&lt; kVDADecoderFlush_emitFrames</comment>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:13">CFDataRef</name></type> <name pos:start="15:15" pos:end="15:25">coded_frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">OSStatus</name></type> <name pos:start="17:14" pos:end="17:19">status</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:35"><if pos:start="21:5" pos:end="23:35">if <condition pos:start="21:8" pos:end="21:29">(<expr pos:start="21:9" pos:end="21:28"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:28"><name pos:start="21:10" pos:end="21:12">vda</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:28">bitstream_size</name></name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:35"><block_content pos:start="23:9" pos:end="23:35">

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><name pos:start="23:16" pos:end="23:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>





    <expr_stmt pos:start="29:5" pos:end="33:52"><expr pos:start="29:5" pos:end="33:51"><name pos:start="29:5" pos:end="29:15">coded_frame</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="33:51"><name pos:start="29:19" pos:end="29:30">CFDataCreate</name><argument_list pos:start="29:31" pos:end="33:51">(<argument pos:start="29:32" pos:end="29:50"><expr pos:start="29:32" pos:end="29:50"><name pos:start="29:32" pos:end="29:50">kCFAllocatorDefault</name></expr></argument>,

                               <argument pos:start="31:32" pos:end="31:45"><expr pos:start="31:32" pos:end="31:45"><name pos:start="31:32" pos:end="31:45"><name pos:start="31:32" pos:end="31:34">vda</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:45">bitstream</name></name></expr></argument>,

                               <argument pos:start="33:32" pos:end="33:50"><expr pos:start="33:32" pos:end="33:50"><name pos:start="33:32" pos:end="33:50"><name pos:start="33:32" pos:end="33:34">vda</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:50">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:70"><expr pos:start="37:5" pos:end="37:69"><name pos:start="37:5" pos:end="37:10">status</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:69"><name pos:start="37:14" pos:end="37:29">VDADecoderDecode</name><argument_list pos:start="37:30" pos:end="37:69">(<argument pos:start="37:31" pos:end="37:46"><expr pos:start="37:31" pos:end="37:46"><name pos:start="37:31" pos:end="37:46"><name pos:start="37:31" pos:end="37:37">vda_ctx</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:46">decoder</name></name></expr></argument>, <argument pos:start="37:49" pos:end="37:49"><expr pos:start="37:49" pos:end="37:49"><literal type="number" pos:start="37:49" pos:end="37:49">0</literal></expr></argument>, <argument pos:start="37:52" pos:end="37:62"><expr pos:start="37:52" pos:end="37:62"><name pos:start="37:52" pos:end="37:62">coded_frame</name></expr></argument>, <argument pos:start="37:65" pos:end="37:68"><expr pos:start="37:65" pos:end="37:68"><name pos:start="37:65" pos:end="37:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="43:64"><if pos:start="41:5" pos:end="43:64">if <condition pos:start="41:8" pos:end="41:35">(<expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:14">status</name> <operator pos:start="41:16" pos:end="41:17">==</operator> <name pos:start="41:19" pos:end="41:34">kVDADecoderNoErr</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:64"><block_content pos:start="43:9" pos:end="43:64">

        <expr_stmt pos:start="43:9" pos:end="43:64"><expr pos:start="43:9" pos:end="43:63"><name pos:start="43:9" pos:end="43:14">status</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="43:63"><name pos:start="43:18" pos:end="43:32">VDADecoderFlush</name><argument_list pos:start="43:33" pos:end="43:63">(<argument pos:start="43:34" pos:end="43:49"><expr pos:start="43:34" pos:end="43:49"><name pos:start="43:34" pos:end="43:49"><name pos:start="43:34" pos:end="43:40">vda_ctx</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:49">decoder</name></name></expr></argument>, <argument pos:start="43:52" pos:end="43:62"><expr pos:start="43:52" pos:end="43:62"><name pos:start="43:52" pos:end="43:62">flush_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><call pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:13">CFRelease</name><argument_list pos:start="47:14" pos:end="47:26">(<argument pos:start="47:15" pos:end="47:25"><expr pos:start="47:15" pos:end="47:25"><name pos:start="47:15" pos:end="47:25">coded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="53:31"><if pos:start="51:5" pos:end="53:31">if <condition pos:start="51:8" pos:end="51:20">(<expr pos:start="51:9" pos:end="51:19"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:19"><name pos:start="51:10" pos:end="51:12">vda</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:19">frame</name></name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:31"><block_content pos:start="53:9" pos:end="53:31">

        <return pos:start="53:9" pos:end="53:31">return <expr pos:start="53:16" pos:end="53:30"><name pos:start="53:16" pos:end="53:30">AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:35">(<expr pos:start="57:9" pos:end="57:34"><name pos:start="57:9" pos:end="57:14">status</name> <operator pos:start="57:16" pos:end="57:17">!=</operator> <name pos:start="57:19" pos:end="57:34">kVDADecoderNoErr</name></expr>)</condition> <block pos:start="57:37" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:31">

        <expr_stmt pos:start="59:9" pos:end="59:77"><expr pos:start="59:9" pos:end="59:76"><call pos:start="59:9" pos:end="59:76"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="59:76">(<argument pos:start="59:16" pos:end="59:20"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:20">avctx</name></expr></argument>, <argument pos:start="59:23" pos:end="59:34"><expr pos:start="59:23" pos:end="59:34"><name pos:start="59:23" pos:end="59:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:37" pos:end="59:67"><expr pos:start="59:37" pos:end="59:67"><literal type="string" pos:start="59:37" pos:end="59:67">"Failed to decode frame (%d)\n"</literal></expr></argument>, <argument pos:start="59:70" pos:end="59:75"><expr pos:start="59:70" pos:end="59:75"><name pos:start="59:70" pos:end="59:75">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:31">return <expr pos:start="61:16" pos:end="61:30"><name pos:start="61:16" pos:end="61:30">AVERROR_UNKNOWN</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:36"><expr pos:start="67:5" pos:end="67:35"><call pos:start="67:5" pos:end="67:35"><name pos:start="67:5" pos:end="67:19">av_buffer_unref</name><argument_list pos:start="67:20" pos:end="67:35">(<argument pos:start="67:21" pos:end="67:34"><expr pos:start="67:21" pos:end="67:34"><operator pos:start="67:21" pos:end="67:21">&amp;</operator><name pos:start="67:22" pos:end="67:34"><name pos:start="67:22" pos:end="67:26">frame</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:31">buf</name><index pos:start="67:32" pos:end="67:34">[<expr pos:start="67:33" pos:end="67:33"><literal type="number" pos:start="67:33" pos:end="67:33">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="77:62"><expr pos:start="71:5" pos:end="77:61"><name pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:9">frame</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:14">buf</name><index pos:start="71:15" pos:end="71:17">[<expr pos:start="71:16" pos:end="71:16"><literal type="number" pos:start="71:16" pos:end="71:16">0</literal></expr>]</index></name> <operator pos:start="71:19" pos:end="71:19">=</operator> <call pos:start="71:21" pos:end="77:61"><name pos:start="71:21" pos:end="71:36">av_buffer_create</name><argument_list pos:start="71:37" pos:end="77:61">(<argument pos:start="71:38" pos:end="71:57"><expr pos:start="71:38" pos:end="71:57"><operator pos:start="71:38" pos:end="71:38">(</operator><name pos:start="71:39" pos:end="71:45">uint8_t</name><operator pos:start="71:46" pos:end="71:46">*</operator><operator pos:start="71:47" pos:end="71:47">)</operator><name pos:start="71:48" pos:end="71:57"><name pos:start="71:48" pos:end="71:50">vda</name><operator pos:start="71:51" pos:end="71:52">-&gt;</operator><name pos:start="71:53" pos:end="71:57">frame</name></name></expr></argument>,

                                     <argument pos:start="73:38" pos:end="73:55"><expr pos:start="73:38" pos:end="73:55"><sizeof pos:start="73:38" pos:end="73:55">sizeof<argument_list pos:start="73:44" pos:end="73:55">(<argument pos:start="73:45" pos:end="73:54"><expr pos:start="73:45" pos:end="73:54"><name pos:start="73:45" pos:end="73:54"><name pos:start="73:45" pos:end="73:47">vda</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:54">frame</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                     <argument pos:start="75:38" pos:end="75:51"><expr pos:start="75:38" pos:end="75:51"><name pos:start="75:38" pos:end="75:51">release_buffer</name></expr></argument>, <argument pos:start="75:54" pos:end="75:57"><expr pos:start="75:54" pos:end="75:57"><name pos:start="75:54" pos:end="75:57">NULL</name></expr></argument>,

                                     <argument pos:start="77:38" pos:end="77:60"><expr pos:start="77:38" pos:end="77:60"><name pos:start="77:38" pos:end="77:60">AV_BUFFER_FLAG_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="81:31"><if pos:start="79:5" pos:end="81:31">if <condition pos:start="79:8" pos:end="79:20">(<expr pos:start="79:9" pos:end="79:19"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:19"><name pos:start="79:10" pos:end="79:14">frame</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:19">buf</name></name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:31"><block_content pos:start="81:9" pos:end="81:31">

        <return pos:start="81:9" pos:end="81:31">return <expr pos:start="81:16" pos:end="81:30"><call pos:start="81:16" pos:end="81:30"><name pos:start="81:16" pos:end="81:22">AVERROR</name><argument_list pos:start="81:23" pos:end="81:30">(<argument pos:start="81:24" pos:end="81:29"><expr pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:42"><expr pos:start="85:5" pos:end="85:41"><name pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:9">frame</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:15">data</name><index pos:start="85:16" pos:end="85:18">[<expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">3</literal></expr>]</index></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <operator pos:start="85:22" pos:end="85:22">(</operator><name pos:start="85:23" pos:end="85:29">uint8_t</name><operator pos:start="85:30" pos:end="85:30">*</operator><operator pos:start="85:31" pos:end="85:31">)</operator><name pos:start="85:32" pos:end="85:41"><name pos:start="85:32" pos:end="85:34">vda</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:41">frame</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:22"><expr pos:start="87:5" pos:end="87:21"><name pos:start="87:5" pos:end="87:14"><name pos:start="87:5" pos:end="87:7">vda</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:14">frame</name></name> <operator pos:start="87:16" pos:end="87:16">=</operator> <name pos:start="87:18" pos:end="87:21">NULL</name></expr>;</expr_stmt>



    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
