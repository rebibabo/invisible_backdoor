<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26832.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:38">rgb16tobgr24</name>)<parameter_list pos:start="1:40" pos:end="1:87">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">src</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:67">uint8_t</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">dst</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:86"><decl pos:start="1:75" pos:end="1:86"><type pos:start="1:75" pos:end="1:86"><name pos:start="1:75" pos:end="1:77">int</name></type> <name pos:start="1:79" pos:end="1:86">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="201:1">{<block_content pos:start="5:5" pos:end="199:5">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:20"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:18">uint16_t</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:20"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:18">uint16_t</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:26">mm_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">d</name> <init pos:start="9:16" pos:end="9:31">= <expr pos:start="9:18" pos:end="9:31"><operator pos:start="9:18" pos:end="9:18">(</operator><name pos:start="9:19" pos:end="9:25">uint8_t</name> <operator pos:start="9:27" pos:end="9:27">*</operator><operator pos:start="9:28" pos:end="9:28">)</operator><name pos:start="9:29" pos:end="9:31">dst</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:20"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:18">uint16_t</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:45">= <expr pos:start="11:25" pos:end="11:45"><operator pos:start="11:25" pos:end="11:25">(</operator><specifier pos:start="11:26" pos:end="11:30">const</specifier> <name pos:start="11:32" pos:end="11:39">uint16_t</name> <operator pos:start="11:41" pos:end="11:41">*</operator><operator pos:start="11:42" pos:end="11:42">)</operator><name pos:start="11:43" pos:end="11:45">src</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:25"><expr pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:7">end</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:11">s</name> <operator pos:start="13:13" pos:end="13:13">+</operator> <name pos:start="13:15" pos:end="13:22">src_size</name><operator pos:start="13:23" pos:end="13:23">/</operator><literal type="number" pos:start="13:24" pos:end="13:24">2</literal></expr>;</expr_stmt>

    <asm pos:start="15:5" pos:end="15:57">__asm__ <specifier pos:start="15:13" pos:end="15:20">volatile</specifier>(PREFETCH"    %0"::"m"(*s):"memory");</asm>

    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:10">mm_end</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:16">end</name> <operator pos:start="17:18" pos:end="17:18">-</operator> <literal type="number" pos:start="17:20" pos:end="17:20">7</literal></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="181:5">while <condition pos:start="19:11" pos:end="19:22">(<expr pos:start="19:12" pos:end="19:21"><name pos:start="19:12" pos:end="19:12">s</name> <operator pos:start="19:14" pos:end="19:14">&lt;</operator> <name pos:start="19:16" pos:end="19:21">mm_end</name></expr>)</condition> <block pos:start="19:24" pos:end="181:5">{<block_content pos:start="21:9" pos:end="179:15">

        <asm pos:start="21:9" pos:end="141:23">__asm__ <specifier pos:start="21:17" pos:end="21:24">volatile</specifier>(

            PREFETCH"    32%1           \n\t"

            "movq          %1, %%mm0    \n\t"

            "movq          %1, %%mm1    \n\t"

            "movq          %1, %%mm2    \n\t"

            "pand          %2, %%mm0    \n\t"

            "pand          %3, %%mm1    \n\t"

            "pand          %4, %%mm2    \n\t"

            "psllq         $3, %%mm0    \n\t"

            "psrlq         $3, %%mm1    \n\t"

            "psrlq         $8, %%mm2    \n\t"

            "movq       %%mm0, %%mm3    \n\t"

            "movq       %%mm1, %%mm4    \n\t"

            "movq       %%mm2, %%mm5    \n\t"

            "punpcklwd     %5, %%mm0    \n\t"

            "punpcklwd     %5, %%mm1    \n\t"

            "punpcklwd     %5, %%mm2    \n\t"

            "punpckhwd     %5, %%mm3    \n\t"

            "punpckhwd     %5, %%mm4    \n\t"

            "punpckhwd     %5, %%mm5    \n\t"

            "psllq         $8, %%mm1    \n\t"

            "psllq        $16, %%mm2    \n\t"

            "por        %%mm1, %%mm0    \n\t"

            "por        %%mm2, %%mm0    \n\t"

            "psllq         $8, %%mm4    \n\t"

            "psllq        $16, %%mm5    \n\t"

            "por        %%mm4, %%mm3    \n\t"

            "por        %%mm5, %%mm3    \n\t"



            "movq       %%mm0, %%mm6    \n\t"

            "movq       %%mm3, %%mm7    \n\t"



            "movq         8%1, %%mm0    \n\t"

            "movq         8%1, %%mm1    \n\t"

            "movq         8%1, %%mm2    \n\t"

            "pand          %2, %%mm0    \n\t"

            "pand          %3, %%mm1    \n\t"

            "pand          %4, %%mm2    \n\t"

            "psllq         $3, %%mm0    \n\t"

            "psrlq         $3, %%mm1    \n\t"

            "psrlq         $8, %%mm2    \n\t"

            "movq       %%mm0, %%mm3    \n\t"

            "movq       %%mm1, %%mm4    \n\t"

            "movq       %%mm2, %%mm5    \n\t"

            "punpcklwd     %5, %%mm0    \n\t"

            "punpcklwd     %5, %%mm1    \n\t"

            "punpcklwd     %5, %%mm2    \n\t"

            "punpckhwd     %5, %%mm3    \n\t"

            "punpckhwd     %5, %%mm4    \n\t"

            "punpckhwd     %5, %%mm5    \n\t"

            "psllq         $8, %%mm1    \n\t"

            "psllq        $16, %%mm2    \n\t"

            "por        %%mm1, %%mm0    \n\t"

            "por        %%mm2, %%mm0    \n\t"

            "psllq         $8, %%mm4    \n\t"

            "psllq        $16, %%mm5    \n\t"

            "por        %%mm4, %%mm3    \n\t"

            "por        %%mm5, %%mm3    \n\t"

            :"=m"(*d)

            :"m"(*s),"m"(mask16b),"m"(mask16g),"m"(mask16r),"m"(mmx_null)

            :"memory");</asm>

        <comment type="block" pos:start="143:9" pos:end="143:31">/* borrowed 32 to 24 */</comment>

        <asm pos:start="145:9" pos:end="175:23">__asm__ <specifier pos:start="145:17" pos:end="145:24">volatile</specifier>(

            "movq       %%mm0, %%mm4    \n\t"

            "movq       %%mm3, %%mm5    \n\t"

            "movq       %%mm6, %%mm0    \n\t"

            "movq       %%mm7, %%mm1    \n\t"



            "movq       %%mm4, %%mm6    \n\t"

            "movq       %%mm5, %%mm7    \n\t"

            "movq       %%mm0, %%mm2    \n\t"

            "movq       %%mm1, %%mm3    \n\t"



            STORE_BGR24_MMX



            :"=m"(*d)

            :"m"(*s)

            :"memory");</asm>

        <expr_stmt pos:start="177:9" pos:end="177:16"><expr pos:start="177:9" pos:end="177:15"><name pos:start="177:9" pos:end="177:9">d</name> <operator pos:start="177:11" pos:end="177:12">+=</operator> <literal type="number" pos:start="177:14" pos:end="177:15">24</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:15"><expr pos:start="179:9" pos:end="179:14"><name pos:start="179:9" pos:end="179:9">s</name> <operator pos:start="179:11" pos:end="179:12">+=</operator> <literal type="number" pos:start="179:14" pos:end="179:14">8</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <asm pos:start="183:5" pos:end="183:40">__asm__ <specifier pos:start="183:13" pos:end="183:20">volatile</specifier>(SFENCE:::"memory");</asm>

    <asm pos:start="185:5" pos:end="185:38">__asm__ <specifier pos:start="185:13" pos:end="185:20">volatile</specifier>(EMMS:::"memory");</asm>

    <while pos:start="187:5" pos:end="199:5">while <condition pos:start="187:11" pos:end="187:19">(<expr pos:start="187:12" pos:end="187:18"><name pos:start="187:12" pos:end="187:12">s</name> <operator pos:start="187:14" pos:end="187:14">&lt;</operator> <name pos:start="187:16" pos:end="187:18">end</name></expr>)</condition> <block pos:start="187:21" pos:end="199:5">{<block_content pos:start="189:9" pos:end="197:31">

        <decl_stmt pos:start="189:9" pos:end="189:30"><decl pos:start="189:9" pos:end="189:29"><type pos:start="189:9" pos:end="189:25"><specifier pos:start="189:9" pos:end="189:16">register</specifier> <name pos:start="189:18" pos:end="189:25">uint16_t</name></type> <name pos:start="189:27" pos:end="189:29">bgr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:19"><expr pos:start="191:9" pos:end="191:18"><name pos:start="191:9" pos:end="191:11">bgr</name> <operator pos:start="191:13" pos:end="191:13">=</operator> <operator pos:start="191:15" pos:end="191:15">*</operator><name pos:start="191:16" pos:end="191:16">s</name><operator pos:start="191:17" pos:end="191:18">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:29"><expr pos:start="193:9" pos:end="193:28"><operator pos:start="193:9" pos:end="193:9">*</operator><name pos:start="193:10" pos:end="193:10">d</name><operator pos:start="193:11" pos:end="193:12">++</operator> <operator pos:start="193:14" pos:end="193:14">=</operator> <operator pos:start="193:16" pos:end="193:16">(</operator><name pos:start="193:17" pos:end="193:19">bgr</name><operator pos:start="193:20" pos:end="193:20">&amp;</operator><literal type="number" pos:start="193:21" pos:end="193:24">0x1F</literal><operator pos:start="193:25" pos:end="193:25">)</operator><operator pos:start="193:26" pos:end="193:27">&lt;&lt;</operator><literal type="number" pos:start="193:28" pos:end="193:28">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:30"><expr pos:start="195:9" pos:end="195:29"><operator pos:start="195:9" pos:end="195:9">*</operator><name pos:start="195:10" pos:end="195:10">d</name><operator pos:start="195:11" pos:end="195:12">++</operator> <operator pos:start="195:14" pos:end="195:14">=</operator> <operator pos:start="195:16" pos:end="195:16">(</operator><name pos:start="195:17" pos:end="195:19">bgr</name><operator pos:start="195:20" pos:end="195:20">&amp;</operator><literal type="number" pos:start="195:21" pos:end="195:25">0x7E0</literal><operator pos:start="195:26" pos:end="195:26">)</operator><operator pos:start="195:27" pos:end="195:28">&gt;&gt;</operator><literal type="number" pos:start="195:29" pos:end="195:29">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:31"><expr pos:start="197:9" pos:end="197:30"><operator pos:start="197:9" pos:end="197:9">*</operator><name pos:start="197:10" pos:end="197:10">d</name><operator pos:start="197:11" pos:end="197:12">++</operator> <operator pos:start="197:14" pos:end="197:14">=</operator> <operator pos:start="197:16" pos:end="197:16">(</operator><name pos:start="197:17" pos:end="197:19">bgr</name><operator pos:start="197:20" pos:end="197:20">&amp;</operator><literal type="number" pos:start="197:21" pos:end="197:26">0xF800</literal><operator pos:start="197:27" pos:end="197:27">)</operator><operator pos:start="197:28" pos:end="197:29">&gt;&gt;</operator><literal type="number" pos:start="197:30" pos:end="197:30">8</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
