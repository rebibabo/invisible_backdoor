<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19317.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">load_data</name><parameter_list pos:start="1:21" pos:end="1:76">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:36">AVFilterContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">ctx</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:51"><decl pos:start="1:44" pos:end="1:51"><type pos:start="1:44" pos:end="1:51"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:51">azim</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:61"><decl pos:start="1:54" pos:end="1:61"><type pos:start="1:54" pos:end="1:61"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:61">elev</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:68">float</name></type> <name pos:start="1:70" pos:end="1:75">radius</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="279:1">{<block_content pos:start="5:5" pos:end="277:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:27">SOFAlizerContext</name></name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">s</name> <init pos:start="5:32" pos:end="5:42">= <expr pos:start="5:34" pos:end="5:42"><name pos:start="5:34" pos:end="5:42"><name pos:start="5:34" pos:end="5:36">ctx</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:42">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:13"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:13">int</name></type> <name pos:start="7:15" pos:end="7:23">n_samples</name> <init pos:start="7:25" pos:end="7:43">= <expr pos:start="7:27" pos:end="7:43"><name pos:start="7:27" pos:end="7:43"><name pos:start="7:27" pos:end="7:27">s</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:33">sofa</name><operator pos:start="7:34" pos:end="7:34">.</operator><name pos:start="7:35" pos:end="7:43">n_samples</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">n_conv</name> <init pos:start="9:16" pos:end="9:26">= <expr pos:start="9:18" pos:end="9:26"><name pos:start="9:18" pos:end="9:26"><name pos:start="9:18" pos:end="9:18">s</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:26">n_conv</name></name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="9:29" pos:end="9:58">/* no. channels to convolve */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">n_fft</name> <init pos:start="11:15" pos:end="11:24">= <expr pos:start="11:17" pos:end="11:24"><name pos:start="11:17" pos:end="11:24"><name pos:start="11:17" pos:end="11:17">s</name><operator pos:start="11:18" pos:end="11:19">-&gt;</operator><name pos:start="11:20" pos:end="11:24">n_fft</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:15">delay_l</name><index pos:start="13:16" pos:end="13:19">[<expr pos:start="13:17" pos:end="13:18"><literal type="number" pos:start="13:17" pos:end="13:18">16</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="13:22" pos:end="13:54">/* broadband delay for each IR */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:15">delay_r</name><index pos:start="15:16" pos:end="15:19">[<expr pos:start="15:17" pos:end="15:18"><literal type="number" pos:start="15:17" pos:end="15:18">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:53"><decl pos:start="17:5" pos:end="17:52"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:25">nb_input_channels</name> <init pos:start="17:27" pos:end="17:52">= <expr pos:start="17:29" pos:end="17:52"><name pos:start="17:29" pos:end="17:42"><name pos:start="17:29" pos:end="17:31">ctx</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:39">inputs</name><index pos:start="17:40" pos:end="17:42">[<expr pos:start="17:41" pos:end="17:41"><literal type="number" pos:start="17:41" pos:end="17:41">0</literal></expr>]</index></name><operator pos:start="17:43" pos:end="17:44">-&gt;</operator><name pos:start="17:45" pos:end="17:52">channels</name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="17:55" pos:end="17:78">/* no. input channels */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:75"><decl pos:start="19:5" pos:end="19:74"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">float</name></type> <name pos:start="19:11" pos:end="19:18">gain_lin</name> <init pos:start="19:20" pos:end="19:74">= <expr pos:start="19:22" pos:end="19:74"><call pos:start="19:22" pos:end="19:74"><name pos:start="19:22" pos:end="19:25">expf</name><argument_list pos:start="19:26" pos:end="19:74">(<argument pos:start="19:27" pos:end="19:73"><expr pos:start="19:27" pos:end="19:73"><operator pos:start="19:27" pos:end="19:27">(</operator><name pos:start="19:28" pos:end="19:34"><name pos:start="19:28" pos:end="19:28">s</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:34">gain</name></name> <operator pos:start="19:36" pos:end="19:36">-</operator> <literal type="number" pos:start="19:38" pos:end="19:38">3</literal> <operator pos:start="19:40" pos:end="19:40">*</operator> <name pos:start="19:42" pos:end="19:58">nb_input_channels</name><operator pos:start="19:59" pos:end="19:59">)</operator> <operator pos:start="19:61" pos:end="19:61">/</operator> <literal type="number" pos:start="19:63" pos:end="19:64">20</literal> <operator pos:start="19:66" pos:end="19:66">*</operator> <name pos:start="19:68" pos:end="19:73">M_LN10</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="19:77" pos:end="19:100">/* gain - 3dB/channel */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:34"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:14">FFTComplex</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:27">data_hrtf_l</name> <init pos:start="21:29" pos:end="21:34">= <expr pos:start="21:31" pos:end="21:34"><name pos:start="21:31" pos:end="21:34">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:35"><decl pos:start="23:5" pos:end="23:34"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:14">FFTComplex</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:27">data_hrtf_r</name> <init pos:start="23:29" pos:end="23:34">= <expr pos:start="23:31" pos:end="23:34"><name pos:start="23:31" pos:end="23:34">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:14">FFTComplex</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:24">fft_in_l</name> <init pos:start="25:26" pos:end="25:31">= <expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:32"><decl pos:start="27:5" pos:end="27:31"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:14">FFTComplex</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:24">fft_in_r</name> <init pos:start="27:26" pos:end="27:31">= <expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9">float</name> <modifier pos:start="29:11" pos:end="29:11">*</modifier></type><name pos:start="29:12" pos:end="29:20">data_ir_l</name> <init pos:start="29:22" pos:end="29:27">= <expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:9">float</name> <modifier pos:start="31:11" pos:end="31:11">*</modifier></type><name pos:start="31:12" pos:end="31:20">data_ir_r</name> <init pos:start="31:22" pos:end="31:27">= <expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:19"><decl pos:start="33:5" pos:end="33:18"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:14">offset</name> <init pos:start="33:16" pos:end="33:18">= <expr pos:start="33:18" pos:end="33:18"><literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="33:21" pos:end="33:73">/* used for faster pointer arithmetics in for-loop */</comment>

    <decl_stmt pos:start="35:5" pos:end="35:14"><decl pos:start="35:5" pos:end="35:13"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:9">m</name><index pos:start="35:10" pos:end="35:13">[<expr pos:start="35:11" pos:end="35:12"><literal type="number" pos:start="35:11" pos:end="35:12">16</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="35:16" pos:end="35:83">/* measurement index m of IR closest to required source positions */</comment>

    <decl_stmt pos:start="37:5" pos:end="37:49"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>, <decl pos:start="37:12" pos:end="37:12"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:12" pos:end="37:12">j</name></decl>, <decl pos:start="37:15" pos:end="37:30"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:15" pos:end="37:23">azim_orig</name> <init pos:start="37:25" pos:end="37:30">= <expr pos:start="37:27" pos:end="37:30"><name pos:start="37:27" pos:end="37:30">azim</name></expr></init></decl>, <decl pos:start="37:33" pos:end="37:48"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:33" pos:end="37:41">elev_orig</name> <init pos:start="37:43" pos:end="37:48">= <expr pos:start="37:45" pos:end="37:48"><name pos:start="37:45" pos:end="37:48">elev</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:22">(<expr pos:start="41:9" pos:end="41:21"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:21"><name pos:start="41:10" pos:end="41:10">s</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:16">sofa</name><operator pos:start="41:17" pos:end="41:17">.</operator><name pos:start="41:18" pos:end="41:21">ncid</name></name></expr>)</condition> <block pos:start="41:24" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:35"> <comment type="block" pos:start="41:26" pos:end="41:72">/* if an invalid SOFA file has been selected */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:101"><expr pos:start="43:9" pos:end="43:100"><call pos:start="43:9" pos:end="43:100"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:100">(<argument pos:start="43:16" pos:end="43:18"><expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">ctx</name></expr></argument>, <argument pos:start="43:21" pos:end="43:32"><expr pos:start="43:21" pos:end="43:32"><name pos:start="43:21" pos:end="43:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:35" pos:end="43:99"><expr pos:start="43:35" pos:end="43:99"><literal type="string" pos:start="43:35" pos:end="43:99">"Selected SOFA file is invalid. Please select valid SOFA file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="93:5"><if pos:start="51:5" pos:end="75:5">if <condition pos:start="51:8" pos:end="51:31">(<expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:15">type</name></name> <operator pos:start="51:17" pos:end="51:18">==</operator> <name pos:start="51:20" pos:end="51:30">TIME_DOMAIN</name></expr>)</condition> <block pos:start="51:33" pos:end="75:5">{<block_content pos:start="53:9" pos:end="73:9">

        <expr_stmt pos:start="53:9" pos:end="53:74"><expr pos:start="53:9" pos:end="53:73"><name pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:19">temp_src</name><index pos:start="53:20" pos:end="53:22">[<expr pos:start="53:21" pos:end="53:21"><literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>]</index></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <call pos:start="53:26" pos:end="53:73"><name pos:start="53:26" pos:end="53:34">av_calloc</name><argument_list pos:start="53:35" pos:end="53:73">(<argument pos:start="53:36" pos:end="53:57"><expr pos:start="53:36" pos:end="53:57"><call pos:start="53:36" pos:end="53:57"><name pos:start="53:36" pos:end="53:42">FFALIGN</name><argument_list pos:start="53:43" pos:end="53:57">(<argument pos:start="53:44" pos:end="53:52"><expr pos:start="53:44" pos:end="53:52"><name pos:start="53:44" pos:end="53:52">n_samples</name></expr></argument>, <argument pos:start="53:55" pos:end="53:56"><expr pos:start="53:55" pos:end="53:56"><literal type="number" pos:start="53:55" pos:end="53:56">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:60" pos:end="53:72"><expr pos:start="53:60" pos:end="53:72"><sizeof pos:start="53:60" pos:end="53:72">sizeof<argument_list pos:start="53:66" pos:end="53:72">(<argument pos:start="53:67" pos:end="53:71"><expr pos:start="53:67" pos:end="53:71"><name pos:start="53:67" pos:end="53:71">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:74"><expr pos:start="55:9" pos:end="55:73"><name pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:19">temp_src</name><index pos:start="55:20" pos:end="55:22">[<expr pos:start="55:21" pos:end="55:21"><literal type="number" pos:start="55:21" pos:end="55:21">1</literal></expr>]</index></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <call pos:start="55:26" pos:end="55:73"><name pos:start="55:26" pos:end="55:34">av_calloc</name><argument_list pos:start="55:35" pos:end="55:73">(<argument pos:start="55:36" pos:end="55:57"><expr pos:start="55:36" pos:end="55:57"><call pos:start="55:36" pos:end="55:57"><name pos:start="55:36" pos:end="55:42">FFALIGN</name><argument_list pos:start="55:43" pos:end="55:57">(<argument pos:start="55:44" pos:end="55:52"><expr pos:start="55:44" pos:end="55:52"><name pos:start="55:44" pos:end="55:52">n_samples</name></expr></argument>, <argument pos:start="55:55" pos:end="55:56"><expr pos:start="55:55" pos:end="55:56"><literal type="number" pos:start="55:55" pos:end="55:56">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:60" pos:end="55:72"><expr pos:start="55:60" pos:end="55:72"><sizeof pos:start="55:60" pos:end="55:72">sizeof<argument_list pos:start="55:66" pos:end="55:72">(<argument pos:start="55:67" pos:end="55:71"><expr pos:start="55:67" pos:end="55:71"><name pos:start="55:67" pos:end="55:71">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="59:9" pos:end="59:50">/* get temporary IR for L and R channel */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:76"><expr pos:start="61:9" pos:end="61:75"><name pos:start="61:9" pos:end="61:17">data_ir_l</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <call pos:start="61:21" pos:end="61:75"><name pos:start="61:21" pos:end="61:35">av_malloc_array</name><argument_list pos:start="61:36" pos:end="61:75">(<argument pos:start="61:37" pos:end="61:54"><expr pos:start="61:37" pos:end="61:54"><name pos:start="61:37" pos:end="61:42">n_conv</name> <operator pos:start="61:44" pos:end="61:44">*</operator> <name pos:start="61:46" pos:end="61:54">n_samples</name></expr></argument>, <argument pos:start="61:57" pos:end="61:74"><expr pos:start="61:57" pos:end="61:74"><sizeof pos:start="61:57" pos:end="61:74">sizeof<argument_list pos:start="61:63" pos:end="61:74">(<argument pos:start="61:64" pos:end="61:73"><expr pos:start="61:64" pos:end="61:73"><operator pos:start="61:64" pos:end="61:64">*</operator><name pos:start="61:65" pos:end="61:73">data_ir_l</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:76"><expr pos:start="63:9" pos:end="63:75"><name pos:start="63:9" pos:end="63:17">data_ir_r</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <call pos:start="63:21" pos:end="63:75"><name pos:start="63:21" pos:end="63:35">av_malloc_array</name><argument_list pos:start="63:36" pos:end="63:75">(<argument pos:start="63:37" pos:end="63:54"><expr pos:start="63:37" pos:end="63:54"><name pos:start="63:37" pos:end="63:42">n_conv</name> <operator pos:start="63:44" pos:end="63:44">*</operator> <name pos:start="63:46" pos:end="63:54">n_samples</name></expr></argument>, <argument pos:start="63:57" pos:end="63:74"><expr pos:start="63:57" pos:end="63:74"><sizeof pos:start="63:57" pos:end="63:74">sizeof<argument_list pos:start="63:63" pos:end="63:74">(<argument pos:start="63:64" pos:end="63:73"><expr pos:start="63:64" pos:end="63:73"><operator pos:start="63:64" pos:end="63:64">*</operator><name pos:start="63:65" pos:end="63:73">data_ir_r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="65:75">(<expr pos:start="65:13" pos:end="65:74"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:22">data_ir_r</name> <operator pos:start="65:24" pos:end="65:25">||</operator> <operator pos:start="65:27" pos:end="65:27">!</operator><name pos:start="65:28" pos:end="65:36">data_ir_l</name> <operator pos:start="65:38" pos:end="65:39">||</operator> <operator pos:start="65:41" pos:end="65:41">!</operator><name pos:start="65:42" pos:end="65:55"><name pos:start="65:42" pos:end="65:42">s</name><operator pos:start="65:43" pos:end="65:44">-&gt;</operator><name pos:start="65:45" pos:end="65:52">temp_src</name><index pos:start="65:53" pos:end="65:55">[<expr pos:start="65:54" pos:end="65:54"><literal type="number" pos:start="65:54" pos:end="65:54">0</literal></expr>]</index></name> <operator pos:start="65:57" pos:end="65:58">||</operator> <operator pos:start="65:60" pos:end="65:60">!</operator><name pos:start="65:61" pos:end="65:74"><name pos:start="65:61" pos:end="65:61">s</name><operator pos:start="65:62" pos:end="65:63">-&gt;</operator><name pos:start="65:64" pos:end="65:71">temp_src</name><index pos:start="65:72" pos:end="65:74">[<expr pos:start="65:73" pos:end="65:73"><literal type="number" pos:start="65:73" pos:end="65:73">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="65:77" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:35">

            <expr_stmt pos:start="67:13" pos:end="67:31"><expr pos:start="67:13" pos:end="67:30"><call pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:19">av_free</name><argument_list pos:start="67:20" pos:end="67:30">(<argument pos:start="67:21" pos:end="67:29"><expr pos:start="67:21" pos:end="67:29"><name pos:start="67:21" pos:end="67:29">data_ir_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:31"><expr pos:start="69:13" pos:end="69:30"><call pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:19">av_free</name><argument_list pos:start="69:20" pos:end="69:30">(<argument pos:start="69:21" pos:end="69:29"><expr pos:start="69:21" pos:end="69:29"><name pos:start="69:21" pos:end="69:29">data_ir_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:35">return <expr pos:start="71:20" pos:end="71:34"><call pos:start="71:20" pos:end="71:34"><name pos:start="71:20" pos:end="71:26">AVERROR</name><argument_list pos:start="71:27" pos:end="71:34">(<argument pos:start="71:28" pos:end="71:33"><expr pos:start="71:28" pos:end="71:33"><name pos:start="71:28" pos:end="71:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="93:5">else <block pos:start="75:12" pos:end="93:5">{<block_content pos:start="79:9" pos:end="91:9">

        <comment type="block" pos:start="77:9" pos:end="77:59">/* get temporary HRTF memory for L and R channel */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:76"><expr pos:start="79:9" pos:end="79:75"><name pos:start="79:9" pos:end="79:19">data_hrtf_l</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="79:75"><name pos:start="79:23" pos:end="79:37">av_malloc_array</name><argument_list pos:start="79:38" pos:end="79:75">(<argument pos:start="79:39" pos:end="79:43"><expr pos:start="79:39" pos:end="79:43"><name pos:start="79:39" pos:end="79:43">n_fft</name></expr></argument>, <argument pos:start="79:46" pos:end="79:74"><expr pos:start="79:46" pos:end="79:74"><sizeof pos:start="79:46" pos:end="79:65">sizeof<argument_list pos:start="79:52" pos:end="79:65">(<argument pos:start="79:53" pos:end="79:64"><expr pos:start="79:53" pos:end="79:64"><operator pos:start="79:53" pos:end="79:53">*</operator><name pos:start="79:54" pos:end="79:64">data_hrtf_l</name></expr></argument>)</argument_list></sizeof> <operator pos:start="79:67" pos:end="79:67">*</operator> <name pos:start="79:69" pos:end="79:74">n_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:76"><expr pos:start="81:9" pos:end="81:75"><name pos:start="81:9" pos:end="81:19">data_hrtf_r</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:75"><name pos:start="81:23" pos:end="81:37">av_malloc_array</name><argument_list pos:start="81:38" pos:end="81:75">(<argument pos:start="81:39" pos:end="81:43"><expr pos:start="81:39" pos:end="81:43"><name pos:start="81:39" pos:end="81:43">n_fft</name></expr></argument>, <argument pos:start="81:46" pos:end="81:74"><expr pos:start="81:46" pos:end="81:74"><sizeof pos:start="81:46" pos:end="81:65">sizeof<argument_list pos:start="81:52" pos:end="81:65">(<argument pos:start="81:53" pos:end="81:64"><expr pos:start="81:53" pos:end="81:64"><operator pos:start="81:53" pos:end="81:53">*</operator><name pos:start="81:54" pos:end="81:64">data_hrtf_r</name></expr></argument>)</argument_list></sizeof> <operator pos:start="81:67" pos:end="81:67">*</operator> <name pos:start="81:69" pos:end="81:74">n_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="91:9"><if pos:start="83:9" pos:end="91:9">if <condition pos:start="83:12" pos:end="83:41">(<expr pos:start="83:13" pos:end="83:40"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:24">data_hrtf_r</name> <operator pos:start="83:26" pos:end="83:27">||</operator> <operator pos:start="83:29" pos:end="83:29">!</operator><name pos:start="83:30" pos:end="83:40">data_hrtf_l</name></expr>)</condition> <block pos:start="83:43" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:35">

            <expr_stmt pos:start="85:13" pos:end="85:33"><expr pos:start="85:13" pos:end="85:32"><call pos:start="85:13" pos:end="85:32"><name pos:start="85:13" pos:end="85:19">av_free</name><argument_list pos:start="85:20" pos:end="85:32">(<argument pos:start="85:21" pos:end="85:31"><expr pos:start="85:21" pos:end="85:31"><name pos:start="85:21" pos:end="85:31">data_hrtf_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:33"><expr pos:start="87:13" pos:end="87:32"><call pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:19">av_free</name><argument_list pos:start="87:20" pos:end="87:32">(<argument pos:start="87:21" pos:end="87:31"><expr pos:start="87:21" pos:end="87:31"><name pos:start="87:21" pos:end="87:31">data_hrtf_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="89:13" pos:end="89:35">return <expr pos:start="89:20" pos:end="89:34"><call pos:start="89:20" pos:end="89:34"><name pos:start="89:20" pos:end="89:26">AVERROR</name><argument_list pos:start="89:27" pos:end="89:34">(<argument pos:start="89:28" pos:end="89:33"><expr pos:start="89:28" pos:end="89:33"><name pos:start="89:28" pos:end="89:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="97:5" pos:end="207:5">for <control pos:start="97:9" pos:end="97:35">(<init pos:start="97:10" pos:end="97:15"><expr pos:start="97:10" pos:end="97:14"><name pos:start="97:10" pos:end="97:10">i</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>;</init> <condition pos:start="97:17" pos:end="97:30"><expr pos:start="97:17" pos:end="97:29"><name pos:start="97:17" pos:end="97:17">i</name> <operator pos:start="97:19" pos:end="97:19">&lt;</operator> <name pos:start="97:21" pos:end="97:29"><name pos:start="97:21" pos:end="97:21">s</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:29">n_conv</name></name></expr>;</condition> <incr pos:start="97:32" pos:end="97:34"><expr pos:start="97:32" pos:end="97:34"><name pos:start="97:32" pos:end="97:32">i</name><operator pos:start="97:33" pos:end="97:34">++</operator></expr></incr>)</control> <block pos:start="97:37" pos:end="207:5">{<block_content pos:start="101:9" pos:end="205:93">

        <comment type="block" pos:start="99:9" pos:end="99:57">/* load and store IRs and corresponding delays */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:59"><expr pos:start="101:9" pos:end="101:58"><name pos:start="101:9" pos:end="101:12">azim</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <operator pos:start="101:16" pos:end="101:16">(</operator><name pos:start="101:17" pos:end="101:19">int</name><operator pos:start="101:20" pos:end="101:20">)</operator><operator pos:start="101:21" pos:end="101:21">(</operator><name pos:start="101:22" pos:end="101:39"><name pos:start="101:22" pos:end="101:22">s</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:36">speaker_azim</name><index pos:start="101:37" pos:end="101:39">[<expr pos:start="101:38" pos:end="101:38"><name pos:start="101:38" pos:end="101:38">i</name></expr>]</index></name> <operator pos:start="101:41" pos:end="101:41">+</operator> <name pos:start="101:43" pos:end="101:51">azim_orig</name><operator pos:start="101:52" pos:end="101:52">)</operator> <operator pos:start="101:54" pos:end="101:54">%</operator> <literal type="number" pos:start="101:56" pos:end="101:58">360</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:58"><expr pos:start="103:9" pos:end="103:57"><name pos:start="103:9" pos:end="103:12">elev</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <operator pos:start="103:16" pos:end="103:16">(</operator><name pos:start="103:17" pos:end="103:19">int</name><operator pos:start="103:20" pos:end="103:20">)</operator><operator pos:start="103:21" pos:end="103:21">(</operator><name pos:start="103:22" pos:end="103:39"><name pos:start="103:22" pos:end="103:22">s</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:36">speaker_elev</name><index pos:start="103:37" pos:end="103:39">[<expr pos:start="103:38" pos:end="103:38"><name pos:start="103:38" pos:end="103:38">i</name></expr>]</index></name> <operator pos:start="103:41" pos:end="103:41">+</operator> <name pos:start="103:43" pos:end="103:51">elev_orig</name><operator pos:start="103:52" pos:end="103:52">)</operator> <operator pos:start="103:54" pos:end="103:54">%</operator> <literal type="number" pos:start="103:56" pos:end="103:57">90</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="105:9" pos:end="105:54">/* get id of IR closest to desired position */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:45"><expr pos:start="107:9" pos:end="107:44"><name pos:start="107:9" pos:end="107:12"><name pos:start="107:9" pos:end="107:9">m</name><index pos:start="107:10" pos:end="107:12">[<expr pos:start="107:11" pos:end="107:11"><name pos:start="107:11" pos:end="107:11">i</name></expr>]</index></name> <operator pos:start="107:14" pos:end="107:14">=</operator> <call pos:start="107:16" pos:end="107:44"><name pos:start="107:16" pos:end="107:21">find_m</name><argument_list pos:start="107:22" pos:end="107:44">(<argument pos:start="107:23" pos:end="107:23"><expr pos:start="107:23" pos:end="107:23"><name pos:start="107:23" pos:end="107:23">s</name></expr></argument>, <argument pos:start="107:26" pos:end="107:29"><expr pos:start="107:26" pos:end="107:29"><name pos:start="107:26" pos:end="107:29">azim</name></expr></argument>, <argument pos:start="107:32" pos:end="107:35"><expr pos:start="107:32" pos:end="107:35"><name pos:start="107:32" pos:end="107:35">elev</name></expr></argument>, <argument pos:start="107:38" pos:end="107:43"><expr pos:start="107:38" pos:end="107:43"><name pos:start="107:38" pos:end="107:43">radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:61">/* load the delays associated with the current IRs */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:54"><expr pos:start="113:9" pos:end="113:53"><name pos:start="113:9" pos:end="113:18"><name pos:start="113:9" pos:end="113:15">delay_l</name><index pos:start="113:16" pos:end="113:18">[<expr pos:start="113:17" pos:end="113:17"><name pos:start="113:17" pos:end="113:17">i</name></expr>]</index></name> <operator pos:start="113:20" pos:end="113:20">=</operator> <operator pos:start="113:22" pos:end="113:22">*</operator><operator pos:start="113:23" pos:end="113:23">(</operator><name pos:start="113:24" pos:end="113:41"><name pos:start="113:24" pos:end="113:24">s</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:30">sofa</name><operator pos:start="113:31" pos:end="113:31">.</operator><name pos:start="113:32" pos:end="113:41">data_delay</name></name> <operator pos:start="113:43" pos:end="113:43">+</operator> <literal type="number" pos:start="113:45" pos:end="113:45">2</literal> <operator pos:start="113:47" pos:end="113:47">*</operator> <name pos:start="113:49" pos:end="113:52"><name pos:start="113:49" pos:end="113:49">m</name><index pos:start="113:50" pos:end="113:52">[<expr pos:start="113:51" pos:end="113:51"><name pos:start="113:51" pos:end="113:51">i</name></expr>]</index></name><operator pos:start="113:53" pos:end="113:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:58"><expr pos:start="115:9" pos:end="115:57"><name pos:start="115:9" pos:end="115:18"><name pos:start="115:9" pos:end="115:15">delay_r</name><index pos:start="115:16" pos:end="115:18">[<expr pos:start="115:17" pos:end="115:17"><name pos:start="115:17" pos:end="115:17">i</name></expr>]</index></name> <operator pos:start="115:20" pos:end="115:20">=</operator> <operator pos:start="115:22" pos:end="115:22">*</operator><operator pos:start="115:23" pos:end="115:23">(</operator><name pos:start="115:24" pos:end="115:41"><name pos:start="115:24" pos:end="115:24">s</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:30">sofa</name><operator pos:start="115:31" pos:end="115:31">.</operator><name pos:start="115:32" pos:end="115:41">data_delay</name></name> <operator pos:start="115:43" pos:end="115:43">+</operator> <literal type="number" pos:start="115:45" pos:end="115:45">2</literal> <operator pos:start="115:47" pos:end="115:47">*</operator> <name pos:start="115:49" pos:end="115:52"><name pos:start="115:49" pos:end="115:49">m</name><index pos:start="115:50" pos:end="115:52">[<expr pos:start="115:51" pos:end="115:51"><name pos:start="115:51" pos:end="115:51">i</name></expr>]</index></name> <operator pos:start="115:54" pos:end="115:54">+</operator> <literal type="number" pos:start="115:56" pos:end="115:56">1</literal><operator pos:start="115:57" pos:end="115:57">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="119:9" pos:end="199:9"><if pos:start="119:9" pos:end="139:9">if <condition pos:start="119:12" pos:end="119:35">(<expr pos:start="119:13" pos:end="119:34"><name pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:19">type</name></name> <operator pos:start="119:21" pos:end="119:22">==</operator> <name pos:start="119:24" pos:end="119:34">TIME_DOMAIN</name></expr>)</condition> <block pos:start="119:37" pos:end="139:9">{<block_content pos:start="121:13" pos:end="137:13">

            <expr_stmt pos:start="121:13" pos:end="121:35"><expr pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:18">offset</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <name pos:start="121:22" pos:end="121:22">i</name> <operator pos:start="121:24" pos:end="121:24">*</operator> <name pos:start="121:26" pos:end="121:34">n_samples</name></expr>;</expr_stmt> <comment type="block" pos:start="121:37" pos:end="121:69">/* no. samples already written */</comment>

            <for pos:start="123:13" pos:end="137:13">for <control pos:start="123:17" pos:end="123:43">(<init pos:start="123:18" pos:end="123:23"><expr pos:start="123:18" pos:end="123:22"><name pos:start="123:18" pos:end="123:18">j</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <literal type="number" pos:start="123:22" pos:end="123:22">0</literal></expr>;</init> <condition pos:start="123:25" pos:end="123:38"><expr pos:start="123:25" pos:end="123:37"><name pos:start="123:25" pos:end="123:25">j</name> <operator pos:start="123:27" pos:end="123:27">&lt;</operator> <name pos:start="123:29" pos:end="123:37">n_samples</name></expr>;</condition> <incr pos:start="123:40" pos:end="123:42"><expr pos:start="123:40" pos:end="123:42"><name pos:start="123:40" pos:end="123:40">j</name><operator pos:start="123:41" pos:end="123:42">++</operator></expr></incr>)</control> <block pos:start="123:45" pos:end="137:13">{<block_content pos:start="129:17" pos:end="135:102">

                <comment type="block" pos:start="125:17" pos:end="127:77">/* load reversed IRs of the specified source position

                 * sample-by-sample for left and right ear; and apply gain */</comment>

                <expr_stmt pos:start="129:17" pos:end="131:89"><expr pos:start="129:17" pos:end="131:88"><operator pos:start="129:17" pos:end="129:17">*</operator><operator pos:start="129:18" pos:end="129:18">(</operator><name pos:start="129:19" pos:end="129:27">data_ir_l</name> <operator pos:start="129:29" pos:end="129:29">+</operator> <name pos:start="129:31" pos:end="129:36">offset</name> <operator pos:start="129:38" pos:end="129:38">+</operator> <name pos:start="129:40" pos:end="129:40">j</name><operator pos:start="129:41" pos:end="129:41">)</operator> <operator pos:start="129:43" pos:end="129:43">=</operator> <comment type="block" pos:start="129:45" pos:end="129:62">/* left channel */</comment>

                <operator pos:start="131:17" pos:end="131:17">*</operator><operator pos:start="131:18" pos:end="131:18">(</operator><name pos:start="131:19" pos:end="131:33"><name pos:start="131:19" pos:end="131:19">s</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:25">sofa</name><operator pos:start="131:26" pos:end="131:26">.</operator><name pos:start="131:27" pos:end="131:33">data_ir</name></name> <operator pos:start="131:35" pos:end="131:35">+</operator> <literal type="number" pos:start="131:37" pos:end="131:37">2</literal> <operator pos:start="131:39" pos:end="131:39">*</operator> <name pos:start="131:41" pos:end="131:44"><name pos:start="131:41" pos:end="131:41">m</name><index pos:start="131:42" pos:end="131:44">[<expr pos:start="131:43" pos:end="131:43"><name pos:start="131:43" pos:end="131:43">i</name></expr>]</index></name> <operator pos:start="131:46" pos:end="131:46">*</operator> <name pos:start="131:48" pos:end="131:56">n_samples</name> <operator pos:start="131:58" pos:end="131:58">+</operator> <name pos:start="131:60" pos:end="131:68">n_samples</name> <operator pos:start="131:70" pos:end="131:70">-</operator> <literal type="number" pos:start="131:72" pos:end="131:74">1</literal> <operator pos:start="131:74" pos:end="131:74">-</operator> <name pos:start="131:76" pos:end="131:76">j</name><operator pos:start="131:77" pos:end="131:77">)</operator> <operator pos:start="131:79" pos:end="131:79">*</operator> <name pos:start="131:81" pos:end="131:88">gain_lin</name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="135:102"><expr pos:start="133:17" pos:end="135:101"><operator pos:start="133:17" pos:end="133:17">*</operator><operator pos:start="133:18" pos:end="133:18">(</operator><name pos:start="133:19" pos:end="133:27">data_ir_r</name> <operator pos:start="133:29" pos:end="133:29">+</operator> <name pos:start="133:31" pos:end="133:36">offset</name> <operator pos:start="133:38" pos:end="133:38">+</operator> <name pos:start="133:40" pos:end="133:40">j</name><operator pos:start="133:41" pos:end="133:41">)</operator> <operator pos:start="133:43" pos:end="133:43">=</operator> <comment type="block" pos:start="133:45" pos:end="133:63">/* right channel */</comment>

                <operator pos:start="135:17" pos:end="135:17">*</operator><operator pos:start="135:18" pos:end="135:18">(</operator><name pos:start="135:19" pos:end="135:33"><name pos:start="135:19" pos:end="135:19">s</name><operator pos:start="135:20" pos:end="135:21">-&gt;</operator><name pos:start="135:22" pos:end="135:25">sofa</name><operator pos:start="135:26" pos:end="135:26">.</operator><name pos:start="135:27" pos:end="135:33">data_ir</name></name> <operator pos:start="135:35" pos:end="135:35">+</operator> <literal type="number" pos:start="135:37" pos:end="135:37">2</literal> <operator pos:start="135:39" pos:end="135:39">*</operator> <name pos:start="135:41" pos:end="135:44"><name pos:start="135:41" pos:end="135:41">m</name><index pos:start="135:42" pos:end="135:44">[<expr pos:start="135:43" pos:end="135:43"><name pos:start="135:43" pos:end="135:43">i</name></expr>]</index></name> <operator pos:start="135:46" pos:end="135:46">*</operator> <name pos:start="135:48" pos:end="135:56">n_samples</name> <operator pos:start="135:58" pos:end="135:58">+</operator> <name pos:start="135:60" pos:end="135:68">n_samples</name> <operator pos:start="135:70" pos:end="135:70">-</operator> <literal type="number" pos:start="135:72" pos:end="135:74">1</literal> <operator pos:start="135:74" pos:end="135:74">-</operator> <name pos:start="135:76" pos:end="135:76">j</name>  <operator pos:start="135:79" pos:end="135:79">+</operator> <name pos:start="135:81" pos:end="135:89">n_samples</name><operator pos:start="135:90" pos:end="135:90">)</operator> <operator pos:start="135:92" pos:end="135:92">*</operator> <name pos:start="135:94" pos:end="135:101">gain_lin</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="139:11" pos:end="199:9">else <block pos:start="139:16" pos:end="199:9">{<block_content pos:start="141:13" pos:end="197:78">

            <expr_stmt pos:start="141:13" pos:end="141:59"><expr pos:start="141:13" pos:end="141:58"><name pos:start="141:13" pos:end="141:20">fft_in_l</name> <operator pos:start="141:22" pos:end="141:22">=</operator> <call pos:start="141:24" pos:end="141:58"><name pos:start="141:24" pos:end="141:32">av_calloc</name><argument_list pos:start="141:33" pos:end="141:58">(<argument pos:start="141:34" pos:end="141:38"><expr pos:start="141:34" pos:end="141:38"><name pos:start="141:34" pos:end="141:38">n_fft</name></expr></argument>, <argument pos:start="141:41" pos:end="141:57"><expr pos:start="141:41" pos:end="141:57"><sizeof pos:start="141:41" pos:end="141:57">sizeof<argument_list pos:start="141:47" pos:end="141:57">(<argument pos:start="141:48" pos:end="141:56"><expr pos:start="141:48" pos:end="141:56"><operator pos:start="141:48" pos:end="141:48">*</operator><name pos:start="141:49" pos:end="141:56">fft_in_l</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:59"><expr pos:start="143:13" pos:end="143:58"><name pos:start="143:13" pos:end="143:20">fft_in_r</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <call pos:start="143:24" pos:end="143:58"><name pos:start="143:24" pos:end="143:32">av_calloc</name><argument_list pos:start="143:33" pos:end="143:58">(<argument pos:start="143:34" pos:end="143:38"><expr pos:start="143:34" pos:end="143:38"><name pos:start="143:34" pos:end="143:38">n_fft</name></expr></argument>, <argument pos:start="143:41" pos:end="143:57"><expr pos:start="143:41" pos:end="143:57"><sizeof pos:start="143:41" pos:end="143:57">sizeof<argument_list pos:start="143:47" pos:end="143:57">(<argument pos:start="143:48" pos:end="143:56"><expr pos:start="143:48" pos:end="143:56"><operator pos:start="143:48" pos:end="143:48">*</operator><name pos:start="143:49" pos:end="143:56">fft_in_r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="157:13"><if pos:start="145:13" pos:end="157:13">if <condition pos:start="145:16" pos:end="145:39">(<expr pos:start="145:17" pos:end="145:38"><operator pos:start="145:17" pos:end="145:17">!</operator><name pos:start="145:18" pos:end="145:25">fft_in_l</name> <operator pos:start="145:27" pos:end="145:28">||</operator> <operator pos:start="145:30" pos:end="145:30">!</operator><name pos:start="145:31" pos:end="145:38">fft_in_r</name></expr>)</condition> <block pos:start="145:41" pos:end="157:13">{<block_content pos:start="147:17" pos:end="155:39">

                <expr_stmt pos:start="147:17" pos:end="147:37"><expr pos:start="147:17" pos:end="147:36"><call pos:start="147:17" pos:end="147:36"><name pos:start="147:17" pos:end="147:23">av_free</name><argument_list pos:start="147:24" pos:end="147:36">(<argument pos:start="147:25" pos:end="147:35"><expr pos:start="147:25" pos:end="147:35"><name pos:start="147:25" pos:end="147:35">data_hrtf_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:37"><expr pos:start="149:17" pos:end="149:36"><call pos:start="149:17" pos:end="149:36"><name pos:start="149:17" pos:end="149:23">av_free</name><argument_list pos:start="149:24" pos:end="149:36">(<argument pos:start="149:25" pos:end="149:35"><expr pos:start="149:25" pos:end="149:35"><name pos:start="149:25" pos:end="149:35">data_hrtf_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:34"><expr pos:start="151:17" pos:end="151:33"><call pos:start="151:17" pos:end="151:33"><name pos:start="151:17" pos:end="151:23">av_free</name><argument_list pos:start="151:24" pos:end="151:33">(<argument pos:start="151:25" pos:end="151:32"><expr pos:start="151:25" pos:end="151:32"><name pos:start="151:25" pos:end="151:32">fft_in_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:34"><expr pos:start="153:17" pos:end="153:33"><call pos:start="153:17" pos:end="153:33"><name pos:start="153:17" pos:end="153:23">av_free</name><argument_list pos:start="153:24" pos:end="153:33">(<argument pos:start="153:25" pos:end="153:32"><expr pos:start="153:25" pos:end="153:32"><name pos:start="153:25" pos:end="153:32">fft_in_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="155:17" pos:end="155:39">return <expr pos:start="155:24" pos:end="155:38"><call pos:start="155:24" pos:end="155:38"><name pos:start="155:24" pos:end="155:30">AVERROR</name><argument_list pos:start="155:31" pos:end="155:38">(<argument pos:start="155:32" pos:end="155:37"><expr pos:start="155:32" pos:end="155:37"><name pos:start="155:32" pos:end="155:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="161:13" pos:end="161:31"><expr pos:start="161:13" pos:end="161:30"><name pos:start="161:13" pos:end="161:18">offset</name> <operator pos:start="161:20" pos:end="161:20">=</operator> <name pos:start="161:22" pos:end="161:22">i</name> <operator pos:start="161:24" pos:end="161:24">*</operator> <name pos:start="161:26" pos:end="161:30">n_fft</name></expr>;</expr_stmt> <comment type="block" pos:start="161:33" pos:end="161:65">/* no. samples already written */</comment>

            <for pos:start="163:13" pos:end="181:13">for <control pos:start="163:17" pos:end="163:43">(<init pos:start="163:18" pos:end="163:23"><expr pos:start="163:18" pos:end="163:22"><name pos:start="163:18" pos:end="163:18">j</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <literal type="number" pos:start="163:22" pos:end="163:22">0</literal></expr>;</init> <condition pos:start="163:25" pos:end="163:38"><expr pos:start="163:25" pos:end="163:37"><name pos:start="163:25" pos:end="163:25">j</name> <operator pos:start="163:27" pos:end="163:27">&lt;</operator> <name pos:start="163:29" pos:end="163:37">n_samples</name></expr>;</condition> <incr pos:start="163:40" pos:end="163:42"><expr pos:start="163:40" pos:end="163:42"><name pos:start="163:40" pos:end="163:40">j</name><operator pos:start="163:41" pos:end="163:42">++</operator></expr></incr>)</control> <block pos:start="163:45" pos:end="181:13">{<block_content pos:start="173:17" pos:end="179:79">

                <comment type="block" pos:start="165:17" pos:end="171:55">/* load non-reversed IRs of the specified source position

                 * sample-by-sample and apply gain,

                 * L channel is loaded to real part, R channel to imag part,

                 * IRs ared shifted by L and R delay */</comment>

                <expr_stmt pos:start="173:17" pos:end="175:73"><expr pos:start="173:17" pos:end="175:72"><name pos:start="173:17" pos:end="173:40"><name pos:start="173:17" pos:end="173:24">fft_in_l</name><index pos:start="173:25" pos:end="173:40">[<expr pos:start="173:26" pos:end="173:39"><name pos:start="173:26" pos:end="173:35"><name pos:start="173:26" pos:end="173:32">delay_l</name><index pos:start="173:33" pos:end="173:35">[<expr pos:start="173:34" pos:end="173:34"><name pos:start="173:34" pos:end="173:34">i</name></expr>]</index></name> <operator pos:start="173:37" pos:end="173:37">+</operator> <name pos:start="173:39" pos:end="173:39">j</name></expr>]</index></name><operator pos:start="173:41" pos:end="173:41">.</operator><name pos:start="173:42" pos:end="173:43">re</name> <operator pos:start="173:45" pos:end="173:45">=</operator> <comment type="block" pos:start="173:47" pos:end="173:64">/* left channel */</comment>

                <operator pos:start="175:17" pos:end="175:17">*</operator><operator pos:start="175:18" pos:end="175:18">(</operator><name pos:start="175:19" pos:end="175:33"><name pos:start="175:19" pos:end="175:19">s</name><operator pos:start="175:20" pos:end="175:21">-&gt;</operator><name pos:start="175:22" pos:end="175:25">sofa</name><operator pos:start="175:26" pos:end="175:26">.</operator><name pos:start="175:27" pos:end="175:33">data_ir</name></name> <operator pos:start="175:35" pos:end="175:35">+</operator> <literal type="number" pos:start="175:37" pos:end="175:37">2</literal> <operator pos:start="175:39" pos:end="175:39">*</operator> <name pos:start="175:41" pos:end="175:44"><name pos:start="175:41" pos:end="175:41">m</name><index pos:start="175:42" pos:end="175:44">[<expr pos:start="175:43" pos:end="175:43"><name pos:start="175:43" pos:end="175:43">i</name></expr>]</index></name> <operator pos:start="175:46" pos:end="175:46">*</operator> <name pos:start="175:48" pos:end="175:56">n_samples</name> <operator pos:start="175:58" pos:end="175:58">+</operator> <name pos:start="175:60" pos:end="175:60">j</name><operator pos:start="175:61" pos:end="175:61">)</operator> <operator pos:start="175:63" pos:end="175:63">*</operator> <name pos:start="175:65" pos:end="175:72">gain_lin</name></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="179:79"><expr pos:start="177:17" pos:end="179:78"><name pos:start="177:17" pos:end="177:40"><name pos:start="177:17" pos:end="177:24">fft_in_r</name><index pos:start="177:25" pos:end="177:40">[<expr pos:start="177:26" pos:end="177:39"><name pos:start="177:26" pos:end="177:35"><name pos:start="177:26" pos:end="177:32">delay_r</name><index pos:start="177:33" pos:end="177:35">[<expr pos:start="177:34" pos:end="177:34"><name pos:start="177:34" pos:end="177:34">i</name></expr>]</index></name> <operator pos:start="177:37" pos:end="177:37">+</operator> <name pos:start="177:39" pos:end="177:39">j</name></expr>]</index></name><operator pos:start="177:41" pos:end="177:41">.</operator><name pos:start="177:42" pos:end="177:43">re</name> <operator pos:start="177:45" pos:end="177:45">=</operator> <comment type="block" pos:start="177:47" pos:end="177:65">/* right channel */</comment>

                <operator pos:start="179:17" pos:end="179:17">*</operator><operator pos:start="179:18" pos:end="179:18">(</operator><name pos:start="179:19" pos:end="179:33"><name pos:start="179:19" pos:end="179:19">s</name><operator pos:start="179:20" pos:end="179:21">-&gt;</operator><name pos:start="179:22" pos:end="179:25">sofa</name><operator pos:start="179:26" pos:end="179:26">.</operator><name pos:start="179:27" pos:end="179:33">data_ir</name></name> <operator pos:start="179:35" pos:end="179:35">+</operator> <operator pos:start="179:37" pos:end="179:37">(</operator><literal type="number" pos:start="179:38" pos:end="179:38">2</literal> <operator pos:start="179:40" pos:end="179:40">*</operator> <name pos:start="179:42" pos:end="179:45"><name pos:start="179:42" pos:end="179:42">m</name><index pos:start="179:43" pos:end="179:45">[<expr pos:start="179:44" pos:end="179:44"><name pos:start="179:44" pos:end="179:44">i</name></expr>]</index></name> <operator pos:start="179:47" pos:end="179:47">+</operator> <literal type="number" pos:start="179:49" pos:end="179:49">1</literal><operator pos:start="179:50" pos:end="179:50">)</operator> <operator pos:start="179:52" pos:end="179:52">*</operator> <name pos:start="179:54" pos:end="179:62">n_samples</name> <operator pos:start="179:64" pos:end="179:64">+</operator> <name pos:start="179:66" pos:end="179:66">j</name><operator pos:start="179:67" pos:end="179:67">)</operator> <operator pos:start="179:69" pos:end="179:69">*</operator> <name pos:start="179:71" pos:end="179:78">gain_lin</name></expr>;</expr_stmt>

            </block_content>}</block></for>



            <comment type="block" pos:start="185:13" pos:end="185:71">/* actually transform to frequency domain (IRs -&gt; HRTFs) */</comment>

            <expr_stmt pos:start="187:13" pos:end="187:48"><expr pos:start="187:13" pos:end="187:47"><call pos:start="187:13" pos:end="187:47"><name pos:start="187:13" pos:end="187:26">av_fft_permute</name><argument_list pos:start="187:27" pos:end="187:47">(<argument pos:start="187:28" pos:end="187:36"><expr pos:start="187:28" pos:end="187:36"><name pos:start="187:28" pos:end="187:36"><name pos:start="187:28" pos:end="187:28">s</name><operator pos:start="187:29" pos:end="187:30">-&gt;</operator><name pos:start="187:31" pos:end="187:33">fft</name><index pos:start="187:34" pos:end="187:36">[<expr pos:start="187:35" pos:end="187:35"><literal type="number" pos:start="187:35" pos:end="187:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="187:39" pos:end="187:46"><expr pos:start="187:39" pos:end="187:46"><name pos:start="187:39" pos:end="187:46">fft_in_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:45"><expr pos:start="189:13" pos:end="189:44"><call pos:start="189:13" pos:end="189:44"><name pos:start="189:13" pos:end="189:23">av_fft_calc</name><argument_list pos:start="189:24" pos:end="189:44">(<argument pos:start="189:25" pos:end="189:33"><expr pos:start="189:25" pos:end="189:33"><name pos:start="189:25" pos:end="189:33"><name pos:start="189:25" pos:end="189:25">s</name><operator pos:start="189:26" pos:end="189:27">-&gt;</operator><name pos:start="189:28" pos:end="189:30">fft</name><index pos:start="189:31" pos:end="189:33">[<expr pos:start="189:32" pos:end="189:32"><literal type="number" pos:start="189:32" pos:end="189:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="189:36" pos:end="189:43"><expr pos:start="189:36" pos:end="189:43"><name pos:start="189:36" pos:end="189:43">fft_in_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:78"><expr pos:start="191:13" pos:end="191:77"><call pos:start="191:13" pos:end="191:77"><name pos:start="191:13" pos:end="191:18">memcpy</name><argument_list pos:start="191:19" pos:end="191:77">(<argument pos:start="191:20" pos:end="191:39"><expr pos:start="191:20" pos:end="191:39"><name pos:start="191:20" pos:end="191:30">data_hrtf_l</name> <operator pos:start="191:32" pos:end="191:32">+</operator> <name pos:start="191:34" pos:end="191:39">offset</name></expr></argument>, <argument pos:start="191:42" pos:end="191:49"><expr pos:start="191:42" pos:end="191:49"><name pos:start="191:42" pos:end="191:49">fft_in_l</name></expr></argument>, <argument pos:start="191:52" pos:end="191:76"><expr pos:start="191:52" pos:end="191:76"><name pos:start="191:52" pos:end="191:56">n_fft</name> <operator pos:start="191:58" pos:end="191:58">*</operator> <sizeof pos:start="191:60" pos:end="191:76">sizeof<argument_list pos:start="191:66" pos:end="191:76">(<argument pos:start="191:67" pos:end="191:75"><expr pos:start="191:67" pos:end="191:75"><operator pos:start="191:67" pos:end="191:67">*</operator><name pos:start="191:68" pos:end="191:75">fft_in_l</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:48"><expr pos:start="193:13" pos:end="193:47"><call pos:start="193:13" pos:end="193:47"><name pos:start="193:13" pos:end="193:26">av_fft_permute</name><argument_list pos:start="193:27" pos:end="193:47">(<argument pos:start="193:28" pos:end="193:36"><expr pos:start="193:28" pos:end="193:36"><name pos:start="193:28" pos:end="193:36"><name pos:start="193:28" pos:end="193:28">s</name><operator pos:start="193:29" pos:end="193:30">-&gt;</operator><name pos:start="193:31" pos:end="193:33">fft</name><index pos:start="193:34" pos:end="193:36">[<expr pos:start="193:35" pos:end="193:35"><literal type="number" pos:start="193:35" pos:end="193:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:39" pos:end="193:46"><expr pos:start="193:39" pos:end="193:46"><name pos:start="193:39" pos:end="193:46">fft_in_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:45"><expr pos:start="195:13" pos:end="195:44"><call pos:start="195:13" pos:end="195:44"><name pos:start="195:13" pos:end="195:23">av_fft_calc</name><argument_list pos:start="195:24" pos:end="195:44">(<argument pos:start="195:25" pos:end="195:33"><expr pos:start="195:25" pos:end="195:33"><name pos:start="195:25" pos:end="195:33"><name pos:start="195:25" pos:end="195:25">s</name><operator pos:start="195:26" pos:end="195:27">-&gt;</operator><name pos:start="195:28" pos:end="195:30">fft</name><index pos:start="195:31" pos:end="195:33">[<expr pos:start="195:32" pos:end="195:32"><literal type="number" pos:start="195:32" pos:end="195:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="195:36" pos:end="195:43"><expr pos:start="195:36" pos:end="195:43"><name pos:start="195:36" pos:end="195:43">fft_in_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:78"><expr pos:start="197:13" pos:end="197:77"><call pos:start="197:13" pos:end="197:77"><name pos:start="197:13" pos:end="197:18">memcpy</name><argument_list pos:start="197:19" pos:end="197:77">(<argument pos:start="197:20" pos:end="197:39"><expr pos:start="197:20" pos:end="197:39"><name pos:start="197:20" pos:end="197:30">data_hrtf_r</name> <operator pos:start="197:32" pos:end="197:32">+</operator> <name pos:start="197:34" pos:end="197:39">offset</name></expr></argument>, <argument pos:start="197:42" pos:end="197:49"><expr pos:start="197:42" pos:end="197:49"><name pos:start="197:42" pos:end="197:49">fft_in_r</name></expr></argument>, <argument pos:start="197:52" pos:end="197:76"><expr pos:start="197:52" pos:end="197:76"><name pos:start="197:52" pos:end="197:56">n_fft</name> <operator pos:start="197:58" pos:end="197:58">*</operator> <sizeof pos:start="197:60" pos:end="197:76">sizeof<argument_list pos:start="197:66" pos:end="197:76">(<argument pos:start="197:67" pos:end="197:75"><expr pos:start="197:67" pos:end="197:75"><operator pos:start="197:67" pos:end="197:67">*</operator><name pos:start="197:68" pos:end="197:75">fft_in_r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="203:9" pos:end="205:93"><expr pos:start="203:9" pos:end="205:92"><call pos:start="203:9" pos:end="205:92"><name pos:start="203:9" pos:end="203:14">av_log</name><argument_list pos:start="203:15" pos:end="205:92">(<argument pos:start="203:16" pos:end="203:18"><expr pos:start="203:16" pos:end="203:18"><name pos:start="203:16" pos:end="203:18">ctx</name></expr></argument>, <argument pos:start="203:21" pos:end="203:32"><expr pos:start="203:21" pos:end="203:32"><name pos:start="203:21" pos:end="203:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="203:35" pos:end="203:101"><expr pos:start="203:35" pos:end="203:101"><literal type="string" pos:start="203:35" pos:end="203:101">"Index: %d, Azimuth: %f, Elevation: %f, Radius: %f of SOFA file.\n"</literal></expr></argument>,

               <argument pos:start="205:16" pos:end="205:19"><expr pos:start="205:16" pos:end="205:19"><name pos:start="205:16" pos:end="205:19"><name pos:start="205:16" pos:end="205:16">m</name><index pos:start="205:17" pos:end="205:19">[<expr pos:start="205:18" pos:end="205:18"><name pos:start="205:18" pos:end="205:18">i</name></expr>]</index></name></expr></argument>, <argument pos:start="205:22" pos:end="205:43"><expr pos:start="205:22" pos:end="205:43"><operator pos:start="205:22" pos:end="205:22">*</operator><operator pos:start="205:23" pos:end="205:23">(</operator><name pos:start="205:24" pos:end="205:35"><name pos:start="205:24" pos:end="205:24">s</name><operator pos:start="205:25" pos:end="205:26">-&gt;</operator><name pos:start="205:27" pos:end="205:30">sofa</name><operator pos:start="205:31" pos:end="205:31">.</operator><name pos:start="205:32" pos:end="205:35">sp_a</name></name> <operator pos:start="205:37" pos:end="205:37">+</operator> <name pos:start="205:39" pos:end="205:42"><name pos:start="205:39" pos:end="205:39">m</name><index pos:start="205:40" pos:end="205:42">[<expr pos:start="205:41" pos:end="205:41"><name pos:start="205:41" pos:end="205:41">i</name></expr>]</index></name><operator pos:start="205:43" pos:end="205:43">)</operator></expr></argument>, <argument pos:start="205:46" pos:end="205:67"><expr pos:start="205:46" pos:end="205:67"><operator pos:start="205:46" pos:end="205:46">*</operator><operator pos:start="205:47" pos:end="205:47">(</operator><name pos:start="205:48" pos:end="205:59"><name pos:start="205:48" pos:end="205:48">s</name><operator pos:start="205:49" pos:end="205:50">-&gt;</operator><name pos:start="205:51" pos:end="205:54">sofa</name><operator pos:start="205:55" pos:end="205:55">.</operator><name pos:start="205:56" pos:end="205:59">sp_e</name></name> <operator pos:start="205:61" pos:end="205:61">+</operator> <name pos:start="205:63" pos:end="205:66"><name pos:start="205:63" pos:end="205:63">m</name><index pos:start="205:64" pos:end="205:66">[<expr pos:start="205:65" pos:end="205:65"><name pos:start="205:65" pos:end="205:65">i</name></expr>]</index></name><operator pos:start="205:67" pos:end="205:67">)</operator></expr></argument>, <argument pos:start="205:70" pos:end="205:91"><expr pos:start="205:70" pos:end="205:91"><operator pos:start="205:70" pos:end="205:70">*</operator><operator pos:start="205:71" pos:end="205:71">(</operator><name pos:start="205:72" pos:end="205:83"><name pos:start="205:72" pos:end="205:72">s</name><operator pos:start="205:73" pos:end="205:74">-&gt;</operator><name pos:start="205:75" pos:end="205:78">sofa</name><operator pos:start="205:79" pos:end="205:79">.</operator><name pos:start="205:80" pos:end="205:83">sp_r</name></name> <operator pos:start="205:85" pos:end="205:85">+</operator> <name pos:start="205:87" pos:end="205:90"><name pos:start="205:87" pos:end="205:87">m</name><index pos:start="205:88" pos:end="205:90">[<expr pos:start="205:89" pos:end="205:89"><name pos:start="205:89" pos:end="205:89">i</name></expr>]</index></name><operator pos:start="205:91" pos:end="205:91">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="211:5" pos:end="267:5"><if pos:start="211:5" pos:end="225:5">if <condition pos:start="211:8" pos:end="211:31">(<expr pos:start="211:9" pos:end="211:30"><name pos:start="211:9" pos:end="211:15"><name pos:start="211:9" pos:end="211:9">s</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:15">type</name></name> <operator pos:start="211:17" pos:end="211:18">==</operator> <name pos:start="211:20" pos:end="211:30">TIME_DOMAIN</name></expr>)</condition> <block pos:start="211:33" pos:end="225:5">{<block_content pos:start="215:9" pos:end="223:29">

        <comment type="block" pos:start="213:9" pos:end="213:85">/* copy IRs and delays to allocated memory in the SOFAlizerContext struct: */</comment>

        <expr_stmt pos:start="215:9" pos:end="215:77"><expr pos:start="215:9" pos:end="215:76"><call pos:start="215:9" pos:end="215:76"><name pos:start="215:9" pos:end="215:14">memcpy</name><argument_list pos:start="215:15" pos:end="215:76">(<argument pos:start="215:16" pos:end="215:28"><expr pos:start="215:16" pos:end="215:28"><name pos:start="215:16" pos:end="215:28"><name pos:start="215:16" pos:end="215:16">s</name><operator pos:start="215:17" pos:end="215:18">-&gt;</operator><name pos:start="215:19" pos:end="215:25">data_ir</name><index pos:start="215:26" pos:end="215:28">[<expr pos:start="215:27" pos:end="215:27"><literal type="number" pos:start="215:27" pos:end="215:27">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="215:31" pos:end="215:39"><expr pos:start="215:31" pos:end="215:39"><name pos:start="215:31" pos:end="215:39">data_ir_l</name></expr></argument>, <argument pos:start="215:42" pos:end="215:75"><expr pos:start="215:42" pos:end="215:75"><sizeof pos:start="215:42" pos:end="215:54">sizeof<argument_list pos:start="215:48" pos:end="215:54">(<argument pos:start="215:49" pos:end="215:53"><expr pos:start="215:49" pos:end="215:53"><name pos:start="215:49" pos:end="215:53">float</name></expr></argument>)</argument_list></sizeof> <operator pos:start="215:56" pos:end="215:56">*</operator> <name pos:start="215:58" pos:end="215:63">n_conv</name> <operator pos:start="215:65" pos:end="215:65">*</operator> <name pos:start="215:67" pos:end="215:75">n_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:77"><expr pos:start="217:9" pos:end="217:76"><call pos:start="217:9" pos:end="217:76"><name pos:start="217:9" pos:end="217:14">memcpy</name><argument_list pos:start="217:15" pos:end="217:76">(<argument pos:start="217:16" pos:end="217:28"><expr pos:start="217:16" pos:end="217:28"><name pos:start="217:16" pos:end="217:28"><name pos:start="217:16" pos:end="217:16">s</name><operator pos:start="217:17" pos:end="217:18">-&gt;</operator><name pos:start="217:19" pos:end="217:25">data_ir</name><index pos:start="217:26" pos:end="217:28">[<expr pos:start="217:27" pos:end="217:27"><literal type="number" pos:start="217:27" pos:end="217:27">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="217:31" pos:end="217:39"><expr pos:start="217:31" pos:end="217:39"><name pos:start="217:31" pos:end="217:39">data_ir_r</name></expr></argument>, <argument pos:start="217:42" pos:end="217:75"><expr pos:start="217:42" pos:end="217:75"><sizeof pos:start="217:42" pos:end="217:54">sizeof<argument_list pos:start="217:48" pos:end="217:54">(<argument pos:start="217:49" pos:end="217:53"><expr pos:start="217:49" pos:end="217:53"><name pos:start="217:49" pos:end="217:53">float</name></expr></argument>)</argument_list></sizeof> <operator pos:start="217:56" pos:end="217:56">*</operator> <name pos:start="217:58" pos:end="217:63">n_conv</name> <operator pos:start="217:65" pos:end="217:65">*</operator> <name pos:start="217:67" pos:end="217:75">n_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="221:9" pos:end="221:29"><expr pos:start="221:9" pos:end="221:28"><call pos:start="221:9" pos:end="221:28"><name pos:start="221:9" pos:end="221:16">av_freep</name><argument_list pos:start="221:17" pos:end="221:28">(<argument pos:start="221:18" pos:end="221:27"><expr pos:start="221:18" pos:end="221:27"><operator pos:start="221:18" pos:end="221:18">&amp;</operator><name pos:start="221:19" pos:end="221:27">data_ir_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="221:31" pos:end="221:60">/* free temporary IR memory */</comment>

        <expr_stmt pos:start="223:9" pos:end="223:29"><expr pos:start="223:9" pos:end="223:28"><call pos:start="223:9" pos:end="223:28"><name pos:start="223:9" pos:end="223:16">av_freep</name><argument_list pos:start="223:17" pos:end="223:28">(<argument pos:start="223:18" pos:end="223:27"><expr pos:start="223:18" pos:end="223:27"><operator pos:start="223:18" pos:end="223:18">&amp;</operator><name pos:start="223:19" pos:end="223:27">data_ir_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="267:5">else <block pos:start="225:12" pos:end="267:5">{<block_content pos:start="227:9" pos:end="265:28">

        <expr_stmt pos:start="227:9" pos:end="227:81"><expr pos:start="227:9" pos:end="227:80"><name pos:start="227:9" pos:end="227:23"><name pos:start="227:9" pos:end="227:9">s</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:20">data_hrtf</name><index pos:start="227:21" pos:end="227:23">[<expr pos:start="227:22" pos:end="227:22"><literal type="number" pos:start="227:22" pos:end="227:22">0</literal></expr>]</index></name> <operator pos:start="227:25" pos:end="227:25">=</operator> <call pos:start="227:27" pos:end="227:80"><name pos:start="227:27" pos:end="227:41">av_malloc_array</name><argument_list pos:start="227:42" pos:end="227:80">(<argument pos:start="227:43" pos:end="227:59"><expr pos:start="227:43" pos:end="227:59"><name pos:start="227:43" pos:end="227:47">n_fft</name> <operator pos:start="227:49" pos:end="227:49">*</operator> <name pos:start="227:51" pos:end="227:59"><name pos:start="227:51" pos:end="227:51">s</name><operator pos:start="227:52" pos:end="227:53">-&gt;</operator><name pos:start="227:54" pos:end="227:59">n_conv</name></name></expr></argument>, <argument pos:start="227:62" pos:end="227:79"><expr pos:start="227:62" pos:end="227:79"><sizeof pos:start="227:62" pos:end="227:79">sizeof<argument_list pos:start="227:68" pos:end="227:79">(<argument pos:start="227:69" pos:end="227:78"><expr pos:start="227:69" pos:end="227:78"><name pos:start="227:69" pos:end="227:78">FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:81"><expr pos:start="229:9" pos:end="229:80"><name pos:start="229:9" pos:end="229:23"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:20">data_hrtf</name><index pos:start="229:21" pos:end="229:23">[<expr pos:start="229:22" pos:end="229:22"><literal type="number" pos:start="229:22" pos:end="229:22">1</literal></expr>]</index></name> <operator pos:start="229:25" pos:end="229:25">=</operator> <call pos:start="229:27" pos:end="229:80"><name pos:start="229:27" pos:end="229:41">av_malloc_array</name><argument_list pos:start="229:42" pos:end="229:80">(<argument pos:start="229:43" pos:end="229:59"><expr pos:start="229:43" pos:end="229:59"><name pos:start="229:43" pos:end="229:47">n_fft</name> <operator pos:start="229:49" pos:end="229:49">*</operator> <name pos:start="229:51" pos:end="229:59"><name pos:start="229:51" pos:end="229:51">s</name><operator pos:start="229:52" pos:end="229:53">-&gt;</operator><name pos:start="229:54" pos:end="229:59">n_conv</name></name></expr></argument>, <argument pos:start="229:62" pos:end="229:79"><expr pos:start="229:62" pos:end="229:79"><sizeof pos:start="229:62" pos:end="229:79">sizeof<argument_list pos:start="229:68" pos:end="229:79">(<argument pos:start="229:69" pos:end="229:78"><expr pos:start="229:69" pos:end="229:78"><name pos:start="229:69" pos:end="229:78">FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="231:9" pos:end="243:9"><if pos:start="231:9" pos:end="243:9">if <condition pos:start="231:12" pos:end="231:49">(<expr pos:start="231:13" pos:end="231:48"><operator pos:start="231:13" pos:end="231:13">!</operator><name pos:start="231:14" pos:end="231:28"><name pos:start="231:14" pos:end="231:14">s</name><operator pos:start="231:15" pos:end="231:16">-&gt;</operator><name pos:start="231:17" pos:end="231:25">data_hrtf</name><index pos:start="231:26" pos:end="231:28">[<expr pos:start="231:27" pos:end="231:27"><literal type="number" pos:start="231:27" pos:end="231:27">0</literal></expr>]</index></name> <operator pos:start="231:30" pos:end="231:31">||</operator> <operator pos:start="231:33" pos:end="231:33">!</operator><name pos:start="231:34" pos:end="231:48"><name pos:start="231:34" pos:end="231:34">s</name><operator pos:start="231:35" pos:end="231:36">-&gt;</operator><name pos:start="231:37" pos:end="231:45">data_hrtf</name><index pos:start="231:46" pos:end="231:48">[<expr pos:start="231:47" pos:end="231:47"><literal type="number" pos:start="231:47" pos:end="231:47">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="231:51" pos:end="243:9">{<block_content pos:start="233:13" pos:end="241:35">

            <expr_stmt pos:start="233:13" pos:end="233:35"><expr pos:start="233:13" pos:end="233:34"><call pos:start="233:13" pos:end="233:34"><name pos:start="233:13" pos:end="233:20">av_freep</name><argument_list pos:start="233:21" pos:end="233:34">(<argument pos:start="233:22" pos:end="233:33"><expr pos:start="233:22" pos:end="233:33"><operator pos:start="233:22" pos:end="233:22">&amp;</operator><name pos:start="233:23" pos:end="233:33">data_hrtf_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:35"><expr pos:start="235:13" pos:end="235:34"><call pos:start="235:13" pos:end="235:34"><name pos:start="235:13" pos:end="235:20">av_freep</name><argument_list pos:start="235:21" pos:end="235:34">(<argument pos:start="235:22" pos:end="235:33"><expr pos:start="235:22" pos:end="235:33"><operator pos:start="235:22" pos:end="235:22">&amp;</operator><name pos:start="235:23" pos:end="235:33">data_hrtf_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:32"><expr pos:start="237:13" pos:end="237:31"><call pos:start="237:13" pos:end="237:31"><name pos:start="237:13" pos:end="237:20">av_freep</name><argument_list pos:start="237:21" pos:end="237:31">(<argument pos:start="237:22" pos:end="237:30"><expr pos:start="237:22" pos:end="237:30"><operator pos:start="237:22" pos:end="237:22">&amp;</operator><name pos:start="237:23" pos:end="237:30">fft_in_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:32"><expr pos:start="239:13" pos:end="239:31"><call pos:start="239:13" pos:end="239:31"><name pos:start="239:13" pos:end="239:20">av_freep</name><argument_list pos:start="239:21" pos:end="239:31">(<argument pos:start="239:22" pos:end="239:30"><expr pos:start="239:22" pos:end="239:30"><operator pos:start="239:22" pos:end="239:22">&amp;</operator><name pos:start="239:23" pos:end="239:30">fft_in_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="241:13" pos:end="241:35">return <expr pos:start="241:20" pos:end="241:34"><call pos:start="241:20" pos:end="241:34"><name pos:start="241:20" pos:end="241:26">AVERROR</name><argument_list pos:start="241:27" pos:end="241:34">(<argument pos:start="241:28" pos:end="241:33"><expr pos:start="241:28" pos:end="241:33"><name pos:start="241:28" pos:end="241:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="block" pos:start="241:37" pos:end="241:66">/* memory allocation failed */</comment>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="247:9" pos:end="249:49"><expr pos:start="247:9" pos:end="249:48"><call pos:start="247:9" pos:end="249:48"><name pos:start="247:9" pos:end="247:14">memcpy</name><argument_list pos:start="247:15" pos:end="249:48">(<argument pos:start="247:16" pos:end="247:30"><expr pos:start="247:16" pos:end="247:30"><name pos:start="247:16" pos:end="247:30"><name pos:start="247:16" pos:end="247:16">s</name><operator pos:start="247:17" pos:end="247:18">-&gt;</operator><name pos:start="247:19" pos:end="247:27">data_hrtf</name><index pos:start="247:28" pos:end="247:30">[<expr pos:start="247:29" pos:end="247:29"><literal type="number" pos:start="247:29" pos:end="247:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="247:33" pos:end="247:43"><expr pos:start="247:33" pos:end="247:43"><name pos:start="247:33" pos:end="247:43">data_hrtf_l</name></expr></argument>, <comment type="block" pos:start="247:46" pos:end="247:68">/* copy HRTF data to */</comment>

            <argument pos:start="249:13" pos:end="249:47"><expr pos:start="249:13" pos:end="249:47"><sizeof pos:start="249:13" pos:end="249:30">sizeof<argument_list pos:start="249:19" pos:end="249:30">(<argument pos:start="249:20" pos:end="249:29"><expr pos:start="249:20" pos:end="249:29"><name pos:start="249:20" pos:end="249:29">FFTComplex</name></expr></argument>)</argument_list></sizeof> <operator pos:start="249:32" pos:end="249:32">*</operator> <name pos:start="249:34" pos:end="249:39">n_conv</name> <operator pos:start="249:41" pos:end="249:41">*</operator> <name pos:start="249:43" pos:end="249:47">n_fft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="249:51" pos:end="249:69">/* filter struct */</comment>

        <expr_stmt pos:start="251:9" pos:end="253:49"><expr pos:start="251:9" pos:end="253:48"><call pos:start="251:9" pos:end="253:48"><name pos:start="251:9" pos:end="251:14">memcpy</name><argument_list pos:start="251:15" pos:end="253:48">(<argument pos:start="251:16" pos:end="251:30"><expr pos:start="251:16" pos:end="251:30"><name pos:start="251:16" pos:end="251:30"><name pos:start="251:16" pos:end="251:16">s</name><operator pos:start="251:17" pos:end="251:18">-&gt;</operator><name pos:start="251:19" pos:end="251:27">data_hrtf</name><index pos:start="251:28" pos:end="251:30">[<expr pos:start="251:29" pos:end="251:29"><literal type="number" pos:start="251:29" pos:end="251:29">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="251:33" pos:end="251:43"><expr pos:start="251:33" pos:end="251:43"><name pos:start="251:33" pos:end="251:43">data_hrtf_r</name></expr></argument>,

            <argument pos:start="253:13" pos:end="253:47"><expr pos:start="253:13" pos:end="253:47"><sizeof pos:start="253:13" pos:end="253:30">sizeof<argument_list pos:start="253:19" pos:end="253:30">(<argument pos:start="253:20" pos:end="253:29"><expr pos:start="253:20" pos:end="253:29"><name pos:start="253:20" pos:end="253:29">FFTComplex</name></expr></argument>)</argument_list></sizeof> <operator pos:start="253:32" pos:end="253:32">*</operator> <name pos:start="253:34" pos:end="253:39">n_conv</name> <operator pos:start="253:41" pos:end="253:41">*</operator> <name pos:start="253:43" pos:end="253:47">n_fft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="257:9" pos:end="257:31"><expr pos:start="257:9" pos:end="257:30"><call pos:start="257:9" pos:end="257:30"><name pos:start="257:9" pos:end="257:16">av_freep</name><argument_list pos:start="257:17" pos:end="257:30">(<argument pos:start="257:18" pos:end="257:29"><expr pos:start="257:18" pos:end="257:29"><operator pos:start="257:18" pos:end="257:18">&amp;</operator><name pos:start="257:19" pos:end="257:29">data_hrtf_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="257:33" pos:end="257:64">/* free temporary HRTF memory */</comment>

        <expr_stmt pos:start="259:9" pos:end="259:31"><expr pos:start="259:9" pos:end="259:30"><call pos:start="259:9" pos:end="259:30"><name pos:start="259:9" pos:end="259:16">av_freep</name><argument_list pos:start="259:17" pos:end="259:30">(<argument pos:start="259:18" pos:end="259:29"><expr pos:start="259:18" pos:end="259:29"><operator pos:start="259:18" pos:end="259:18">&amp;</operator><name pos:start="259:19" pos:end="259:29">data_hrtf_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="263:9" pos:end="263:28"><expr pos:start="263:9" pos:end="263:27"><call pos:start="263:9" pos:end="263:27"><name pos:start="263:9" pos:end="263:16">av_freep</name><argument_list pos:start="263:17" pos:end="263:27">(<argument pos:start="263:18" pos:end="263:26"><expr pos:start="263:18" pos:end="263:26"><operator pos:start="263:18" pos:end="263:18">&amp;</operator><name pos:start="263:19" pos:end="263:26">fft_in_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="263:30" pos:end="263:60">/* free temporary FFT memory */</comment>

        <expr_stmt pos:start="265:9" pos:end="265:28"><expr pos:start="265:9" pos:end="265:27"><call pos:start="265:9" pos:end="265:27"><name pos:start="265:9" pos:end="265:16">av_freep</name><argument_list pos:start="265:17" pos:end="265:27">(<argument pos:start="265:18" pos:end="265:26"><expr pos:start="265:18" pos:end="265:26"><operator pos:start="265:18" pos:end="265:18">&amp;</operator><name pos:start="265:19" pos:end="265:26">fft_in_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="271:5" pos:end="271:62"><expr pos:start="271:5" pos:end="271:61"><call pos:start="271:5" pos:end="271:61"><name pos:start="271:5" pos:end="271:10">memcpy</name><argument_list pos:start="271:11" pos:end="271:61">(<argument pos:start="271:12" pos:end="271:22"><expr pos:start="271:12" pos:end="271:22"><name pos:start="271:12" pos:end="271:22"><name pos:start="271:12" pos:end="271:12">s</name><operator pos:start="271:13" pos:end="271:14">-&gt;</operator><name pos:start="271:15" pos:end="271:19">delay</name><index pos:start="271:20" pos:end="271:22">[<expr pos:start="271:21" pos:end="271:21"><literal type="number" pos:start="271:21" pos:end="271:21">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="271:25" pos:end="271:35"><expr pos:start="271:25" pos:end="271:35"><operator pos:start="271:25" pos:end="271:25">&amp;</operator><name pos:start="271:26" pos:end="271:35"><name pos:start="271:26" pos:end="271:32">delay_l</name><index pos:start="271:33" pos:end="271:35">[<expr pos:start="271:34" pos:end="271:34"><literal type="number" pos:start="271:34" pos:end="271:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="271:38" pos:end="271:60"><expr pos:start="271:38" pos:end="271:60"><sizeof pos:start="271:38" pos:end="271:48">sizeof<argument_list pos:start="271:44" pos:end="271:48">(<argument pos:start="271:45" pos:end="271:47"><expr pos:start="271:45" pos:end="271:47"><name pos:start="271:45" pos:end="271:47">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="271:50" pos:end="271:50">*</operator> <name pos:start="271:52" pos:end="271:60"><name pos:start="271:52" pos:end="271:52">s</name><operator pos:start="271:53" pos:end="271:54">-&gt;</operator><name pos:start="271:55" pos:end="271:60">n_conv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:62"><expr pos:start="273:5" pos:end="273:61"><call pos:start="273:5" pos:end="273:61"><name pos:start="273:5" pos:end="273:10">memcpy</name><argument_list pos:start="273:11" pos:end="273:61">(<argument pos:start="273:12" pos:end="273:22"><expr pos:start="273:12" pos:end="273:22"><name pos:start="273:12" pos:end="273:22"><name pos:start="273:12" pos:end="273:12">s</name><operator pos:start="273:13" pos:end="273:14">-&gt;</operator><name pos:start="273:15" pos:end="273:19">delay</name><index pos:start="273:20" pos:end="273:22">[<expr pos:start="273:21" pos:end="273:21"><literal type="number" pos:start="273:21" pos:end="273:21">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="273:25" pos:end="273:35"><expr pos:start="273:25" pos:end="273:35"><operator pos:start="273:25" pos:end="273:25">&amp;</operator><name pos:start="273:26" pos:end="273:35"><name pos:start="273:26" pos:end="273:32">delay_r</name><index pos:start="273:33" pos:end="273:35">[<expr pos:start="273:34" pos:end="273:34"><literal type="number" pos:start="273:34" pos:end="273:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="273:38" pos:end="273:60"><expr pos:start="273:38" pos:end="273:60"><sizeof pos:start="273:38" pos:end="273:48">sizeof<argument_list pos:start="273:44" pos:end="273:48">(<argument pos:start="273:45" pos:end="273:47"><expr pos:start="273:45" pos:end="273:47"><name pos:start="273:45" pos:end="273:47">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="273:50" pos:end="273:50">*</operator> <name pos:start="273:52" pos:end="273:60"><name pos:start="273:52" pos:end="273:52">s</name><operator pos:start="273:53" pos:end="273:54">-&gt;</operator><name pos:start="273:55" pos:end="273:60">n_conv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="277:5" pos:end="277:13">return <expr pos:start="277:12" pos:end="277:12"><literal type="number" pos:start="277:12" pos:end="277:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
