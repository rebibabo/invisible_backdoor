<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11816.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:16">helper_stqf</name><parameter_list pos:start="1:17" pos:end="1:68">(<parameter pos:start="1:18" pos:end="1:35"><decl pos:start="1:18" pos:end="1:35"><type pos:start="1:18" pos:end="1:35"><name pos:start="1:18" pos:end="1:30">CPUSPARCState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">env</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:49">target_ulong</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:67"><decl pos:start="1:57" pos:end="1:67"><type pos:start="1:57" pos:end="1:67"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:67">mem_idx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="68:0">

    <comment type="block" pos:start="5:5" pos:end="5:31">/* XXX add 128 bit store */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">CPU_QuadU</name></type> <name pos:start="7:15" pos:end="7:15">u</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="14:0"><expr pos:start="11:5" pos:end="11:36"><call pos:start="11:5" pos:end="11:36"><name pos:start="11:5" pos:end="11:22">helper_check_align</name><argument_list pos:start="11:23" pos:end="11:36">(<argument pos:start="11:24" pos:end="11:26"><expr pos:start="11:24" pos:end="11:26"><name pos:start="11:24" pos:end="11:26">env</name></expr></argument>, <argument pos:start="11:29" pos:end="11:32"><expr pos:start="11:29" pos:end="11:32"><name pos:start="11:29" pos:end="11:32">addr</name></expr></argument>, <argument pos:start="11:35" pos:end="11:35"><expr pos:start="11:35" pos:end="11:35"><literal type="number" pos:start="11:35" pos:end="11:35">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="13:1" pos:end="13:30">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:30"><operator pos:start="13:5" pos:end="13:5">!</operator><call pos:start="13:6" pos:end="13:30"><name pos:start="13:6" pos:end="13:12">defined</name><argument_list pos:start="13:13" pos:end="13:30">(<argument pos:start="13:14" pos:end="13:29"><expr pos:start="13:14" pos:end="13:29"><name pos:start="13:14" pos:end="13:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <switch pos:start="15:5" pos:end="60:0">switch <condition pos:start="15:12" pos:end="15:20">(<expr pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:19">mem_idx</name></expr>)</condition> <block pos:start="15:22" pos:end="60:0">{<block_content pos:start="17:5" pos:end="55:14">

    <case pos:start="17:5" pos:end="17:22">case <expr pos:start="17:10" pos:end="17:21"><name pos:start="17:10" pos:end="17:21">MMU_USER_IDX</name></expr>:</case>

        <expr_stmt pos:start="19:9" pos:end="19:18"><expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:9">u</name><operator pos:start="19:10" pos:end="19:10">.</operator><name pos:start="19:11" pos:end="19:11">q</name></name> <operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:17">QT0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:44"><expr pos:start="21:9" pos:end="21:43"><call pos:start="21:9" pos:end="21:43"><name pos:start="21:9" pos:end="21:20">cpu_stq_user</name><argument_list pos:start="21:21" pos:end="21:43">(<argument pos:start="21:22" pos:end="21:24"><expr pos:start="21:22" pos:end="21:24"><name pos:start="21:22" pos:end="21:24">env</name></expr></argument>, <argument pos:start="21:27" pos:end="21:30"><expr pos:start="21:27" pos:end="21:30"><name pos:start="21:27" pos:end="21:30">addr</name></expr></argument>, <argument pos:start="21:33" pos:end="21:42"><expr pos:start="21:33" pos:end="21:42"><name pos:start="21:33" pos:end="21:42"><name pos:start="21:33" pos:end="21:33">u</name><operator pos:start="21:34" pos:end="21:34">.</operator><name pos:start="21:35" pos:end="21:36">ll</name><operator pos:start="21:37" pos:end="21:37">.</operator><name pos:start="21:38" pos:end="21:42">upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:48"><expr pos:start="23:9" pos:end="23:47"><call pos:start="23:9" pos:end="23:47"><name pos:start="23:9" pos:end="23:20">cpu_stq_user</name><argument_list pos:start="23:21" pos:end="23:47">(<argument pos:start="23:22" pos:end="23:24"><expr pos:start="23:22" pos:end="23:24"><name pos:start="23:22" pos:end="23:24">env</name></expr></argument>, <argument pos:start="23:27" pos:end="23:34"><expr pos:start="23:27" pos:end="23:34"><name pos:start="23:27" pos:end="23:30">addr</name> <operator pos:start="23:32" pos:end="23:32">+</operator> <literal type="number" pos:start="23:34" pos:end="23:34">8</literal></expr></argument>, <argument pos:start="23:37" pos:end="23:46"><expr pos:start="23:37" pos:end="23:46"><name pos:start="23:37" pos:end="23:46"><name pos:start="23:37" pos:end="23:37">u</name><operator pos:start="23:38" pos:end="23:38">.</operator><name pos:start="23:39" pos:end="23:40">ll</name><operator pos:start="23:41" pos:end="23:41">.</operator><name pos:start="23:42" pos:end="23:46">lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:24">case <expr pos:start="27:10" pos:end="27:23"><name pos:start="27:10" pos:end="27:23">MMU_KERNEL_IDX</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:18"><expr pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">u</name><operator pos:start="29:10" pos:end="29:10">.</operator><name pos:start="29:11" pos:end="29:11">q</name></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:17">QT0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:46"><expr pos:start="31:9" pos:end="31:45"><call pos:start="31:9" pos:end="31:45"><name pos:start="31:9" pos:end="31:22">cpu_stq_kernel</name><argument_list pos:start="31:23" pos:end="31:45">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">env</name></expr></argument>, <argument pos:start="31:29" pos:end="31:32"><expr pos:start="31:29" pos:end="31:32"><name pos:start="31:29" pos:end="31:32">addr</name></expr></argument>, <argument pos:start="31:35" pos:end="31:44"><expr pos:start="31:35" pos:end="31:44"><name pos:start="31:35" pos:end="31:44"><name pos:start="31:35" pos:end="31:35">u</name><operator pos:start="31:36" pos:end="31:36">.</operator><name pos:start="31:37" pos:end="31:38">ll</name><operator pos:start="31:39" pos:end="31:39">.</operator><name pos:start="31:40" pos:end="31:44">upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:50"><expr pos:start="33:9" pos:end="33:49"><call pos:start="33:9" pos:end="33:49"><name pos:start="33:9" pos:end="33:22">cpu_stq_kernel</name><argument_list pos:start="33:23" pos:end="33:49">(<argument pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">env</name></expr></argument>, <argument pos:start="33:29" pos:end="33:36"><expr pos:start="33:29" pos:end="33:36"><name pos:start="33:29" pos:end="33:32">addr</name> <operator pos:start="33:34" pos:end="33:34">+</operator> <literal type="number" pos:start="33:36" pos:end="33:36">8</literal></expr></argument>, <argument pos:start="33:39" pos:end="33:48"><expr pos:start="33:39" pos:end="33:48"><name pos:start="33:39" pos:end="33:48"><name pos:start="33:39" pos:end="33:39">u</name><operator pos:start="33:40" pos:end="33:40">.</operator><name pos:start="33:41" pos:end="33:42">ll</name><operator pos:start="33:43" pos:end="33:43">.</operator><name pos:start="33:44" pos:end="33:48">lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="38:0">break;</break>

<cpp:ifdef pos:start="37:1" pos:end="37:21">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:21">TARGET_SPARC64</name></cpp:ifdef>

    <case pos:start="39:5" pos:end="39:22">case <expr pos:start="39:10" pos:end="39:21"><name pos:start="39:10" pos:end="39:21">MMU_HYPV_IDX</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:18"><expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:9">u</name><operator pos:start="41:10" pos:end="41:10">.</operator><name pos:start="41:11" pos:end="41:11">q</name></name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:17">QT0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><call pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:20">cpu_stq_hypv</name><argument_list pos:start="43:21" pos:end="43:43">(<argument pos:start="43:22" pos:end="43:24"><expr pos:start="43:22" pos:end="43:24"><name pos:start="43:22" pos:end="43:24">env</name></expr></argument>, <argument pos:start="43:27" pos:end="43:30"><expr pos:start="43:27" pos:end="43:30"><name pos:start="43:27" pos:end="43:30">addr</name></expr></argument>, <argument pos:start="43:33" pos:end="43:42"><expr pos:start="43:33" pos:end="43:42"><name pos:start="43:33" pos:end="43:42"><name pos:start="43:33" pos:end="43:33">u</name><operator pos:start="43:34" pos:end="43:34">.</operator><name pos:start="43:35" pos:end="43:36">ll</name><operator pos:start="43:37" pos:end="43:37">.</operator><name pos:start="43:38" pos:end="43:42">upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:48"><expr pos:start="45:9" pos:end="45:47"><call pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:20">cpu_stq_hypv</name><argument_list pos:start="45:21" pos:end="45:47">(<argument pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><name pos:start="45:22" pos:end="45:24">env</name></expr></argument>, <argument pos:start="45:27" pos:end="45:34"><expr pos:start="45:27" pos:end="45:34"><name pos:start="45:27" pos:end="45:30">addr</name> <operator pos:start="45:32" pos:end="45:32">+</operator> <literal type="number" pos:start="45:34" pos:end="45:34">8</literal></expr></argument>, <argument pos:start="45:37" pos:end="45:46"><expr pos:start="45:37" pos:end="45:46"><name pos:start="45:37" pos:end="45:46"><name pos:start="45:37" pos:end="45:37">u</name><operator pos:start="45:38" pos:end="45:38">.</operator><name pos:start="45:39" pos:end="45:40">ll</name><operator pos:start="45:41" pos:end="45:41">.</operator><name pos:start="45:42" pos:end="45:46">lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="50:0">break;</break>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

    <default pos:start="51:5" pos:end="51:12">default:</default>

        <expr_stmt pos:start="53:9" pos:end="53:72"><expr pos:start="53:9" pos:end="53:71"><call pos:start="53:9" pos:end="53:71"><name pos:start="53:9" pos:end="53:19">DPRINTF_MMU</name><argument_list pos:start="53:20" pos:end="53:71">(<argument pos:start="53:21" pos:end="53:61"><expr pos:start="53:21" pos:end="53:61"><literal type="string" pos:start="53:21" pos:end="53:61">"helper_stqf: need to check MMU idx %d\n"</literal></expr></argument>, <argument pos:start="53:64" pos:end="53:70"><expr pos:start="53:64" pos:end="53:70"><name pos:start="53:64" pos:end="53:70">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    </block_content>}</block></switch>

<cpp:else pos:start="59:1" pos:end="59:5">#<cpp:directive pos:start="59:2" pos:end="59:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="61:5" pos:end="61:14"><expr pos:start="61:5" pos:end="61:13"><name pos:start="61:5" pos:end="61:7"><name pos:start="61:5" pos:end="61:5">u</name><operator pos:start="61:6" pos:end="61:6">.</operator><name pos:start="61:7" pos:end="61:7">q</name></name> <operator pos:start="61:9" pos:end="61:9">=</operator> <name pos:start="61:11" pos:end="61:13">QT0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:49"><expr pos:start="63:5" pos:end="63:48"><call pos:start="63:5" pos:end="63:48"><name pos:start="63:5" pos:end="63:11">stq_raw</name><argument_list pos:start="63:12" pos:end="63:48">(<argument pos:start="63:13" pos:end="63:35"><expr pos:start="63:13" pos:end="63:35"><call pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:24">address_mask</name><argument_list pos:start="63:25" pos:end="63:35">(<argument pos:start="63:26" pos:end="63:28"><expr pos:start="63:26" pos:end="63:28"><name pos:start="63:26" pos:end="63:28">env</name></expr></argument>, <argument pos:start="63:31" pos:end="63:34"><expr pos:start="63:31" pos:end="63:34"><name pos:start="63:31" pos:end="63:34">addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="63:38" pos:end="63:47"><expr pos:start="63:38" pos:end="63:47"><name pos:start="63:38" pos:end="63:47"><name pos:start="63:38" pos:end="63:38">u</name><operator pos:start="63:39" pos:end="63:39">.</operator><name pos:start="63:40" pos:end="63:41">ll</name><operator pos:start="63:42" pos:end="63:42">.</operator><name pos:start="63:43" pos:end="63:47">upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="68:0"><expr pos:start="65:5" pos:end="65:52"><call pos:start="65:5" pos:end="65:52"><name pos:start="65:5" pos:end="65:11">stq_raw</name><argument_list pos:start="65:12" pos:end="65:52">(<argument pos:start="65:13" pos:end="65:39"><expr pos:start="65:13" pos:end="65:39"><call pos:start="65:13" pos:end="65:39"><name pos:start="65:13" pos:end="65:24">address_mask</name><argument_list pos:start="65:25" pos:end="65:39">(<argument pos:start="65:26" pos:end="65:28"><expr pos:start="65:26" pos:end="65:28"><name pos:start="65:26" pos:end="65:28">env</name></expr></argument>, <argument pos:start="65:31" pos:end="65:38"><expr pos:start="65:31" pos:end="65:38"><name pos:start="65:31" pos:end="65:34">addr</name> <operator pos:start="65:36" pos:end="65:36">+</operator> <literal type="number" pos:start="65:38" pos:end="65:38">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:42" pos:end="65:51"><expr pos:start="65:42" pos:end="65:51"><name pos:start="65:42" pos:end="65:51"><name pos:start="65:42" pos:end="65:42">u</name><operator pos:start="65:43" pos:end="65:43">.</operator><name pos:start="65:44" pos:end="65:45">ll</name><operator pos:start="65:46" pos:end="65:46">.</operator><name pos:start="65:47" pos:end="65:51">lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
