<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12506.c" pos:tabs="8"><function pos:start="1:1" pos:end="531:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">inline</specifier> <specifier pos:start="1:8" pos:end="1:13">static</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hcscale</name>)<parameter_list pos:start="1:35" pos:end="9:72">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:45">SwsContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">c</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">uint16_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">dst</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:69">long</name></type> <name pos:start="1:71" pos:end="1:78">dstWidth</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:93"><decl pos:start="1:81" pos:end="1:93"><type pos:start="1:81" pos:end="1:93"><name pos:start="1:81" pos:end="1:87">uint8_t</name> <modifier pos:start="1:89" pos:end="1:89">*</modifier></type><name pos:start="1:90" pos:end="1:93">src1</name></decl></parameter>, <parameter pos:start="1:96" pos:end="1:108"><decl pos:start="1:96" pos:end="1:108"><type pos:start="1:96" pos:end="1:108"><name pos:start="1:96" pos:end="1:102">uint8_t</name> <modifier pos:start="1:104" pos:end="1:104">*</modifier></type><name pos:start="1:105" pos:end="1:108">src2</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:43"><decl pos:start="3:36" pos:end="3:43"><type pos:start="3:36" pos:end="3:43"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:43">srcW</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:53"><decl pos:start="3:46" pos:end="3:53"><type pos:start="3:46" pos:end="3:53"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:53">xInc</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:64"><decl pos:start="3:56" pos:end="3:64"><type pos:start="3:56" pos:end="3:64"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:64">flags</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:83"><decl pos:start="3:67" pos:end="3:83"><type pos:start="3:67" pos:end="3:83"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:83">canMMX2BeUsed</name></decl></parameter>, <parameter pos:start="3:86" pos:end="3:104"><decl pos:start="3:86" pos:end="3:104"><type pos:start="3:86" pos:end="3:104"><name pos:start="3:86" pos:end="3:92">int16_t</name> <modifier pos:start="3:94" pos:end="3:94">*</modifier></type><name pos:start="3:95" pos:end="3:104">hChrFilter</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:42">int16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:57">hChrFilterPos</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:77"><decl pos:start="5:60" pos:end="5:77"><type pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:77">hChrFilterSize</name></decl></parameter>, <parameter pos:start="5:80" pos:end="5:96"><decl pos:start="5:80" pos:end="5:96"><type pos:start="5:80" pos:end="5:96"><name pos:start="5:80" pos:end="5:83">void</name> <modifier pos:start="5:85" pos:end="5:85">*</modifier></type><name pos:start="5:86" pos:end="5:96">funnyUVCode</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:48"><decl pos:start="7:36" pos:end="7:48"><type pos:start="7:36" pos:end="7:48"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:48">srcFormat</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:75"><decl pos:start="7:51" pos:end="7:75"><type pos:start="7:51" pos:end="7:75"><name pos:start="7:51" pos:end="7:57">uint8_t</name> <modifier pos:start="7:59" pos:end="7:59">*</modifier></type><name pos:start="7:60" pos:end="7:75">formatConvBuffer</name></decl></parameter>, <parameter pos:start="7:78" pos:end="7:96"><decl pos:start="7:78" pos:end="7:96"><type pos:start="7:78" pos:end="7:96"><name pos:start="7:78" pos:end="7:84">int16_t</name> <modifier pos:start="7:86" pos:end="7:86">*</modifier></type><name pos:start="7:87" pos:end="7:96">mmx2Filter</name></decl></parameter>,

                                   <parameter pos:start="9:36" pos:end="9:57"><decl pos:start="9:36" pos:end="9:57"><type pos:start="9:36" pos:end="9:57"><name pos:start="9:36" pos:end="9:42">int32_t</name> <modifier pos:start="9:44" pos:end="9:44">*</modifier></type><name pos:start="9:45" pos:end="9:57">mmx2FilterPos</name></decl></parameter>, <parameter pos:start="9:60" pos:end="9:71"><decl pos:start="9:60" pos:end="9:71"><type pos:start="9:60" pos:end="9:71"><name pos:start="9:60" pos:end="9:66">uint8_t</name> <modifier pos:start="9:68" pos:end="9:68">*</modifier></type><name pos:start="9:69" pos:end="9:71">pal</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="531:1">{<block_content pos:start="13:5" pos:end="529:5">

    <if_stmt pos:start="13:5" pos:end="180:0"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><name pos:start="13:9" pos:end="13:17">srcFormat</name><operator pos:start="13:18" pos:end="13:19">==</operator><name pos:start="13:20" pos:end="13:34">PIX_FMT_YUYV422</name></expr>)</condition>

    <block pos:start="15:5" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:36">

        <expr_stmt pos:start="17:9" pos:end="17:84"><expr pos:start="17:9" pos:end="17:83"><call pos:start="17:9" pos:end="17:83"><call pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:14">RENAME</name><argument_list pos:start="17:15" pos:end="17:24">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23">yuy2ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="17:25" pos:end="17:83">(<argument pos:start="17:26" pos:end="17:41"><expr pos:start="17:26" pos:end="17:41"><name pos:start="17:26" pos:end="17:41">formatConvBuffer</name></expr></argument>, <argument pos:start="17:44" pos:end="17:64"><expr pos:start="17:44" pos:end="17:64"><name pos:start="17:44" pos:end="17:59">formatConvBuffer</name><operator pos:start="17:60" pos:end="17:60">+</operator><name pos:start="17:61" pos:end="17:64">VOFW</name></expr></argument>, <argument pos:start="17:67" pos:end="17:70"><expr pos:start="17:67" pos:end="17:70"><name pos:start="17:67" pos:end="17:70">src1</name></expr></argument>, <argument pos:start="17:73" pos:end="17:76"><expr pos:start="17:73" pos:end="17:76"><name pos:start="17:73" pos:end="17:76">src2</name></expr></argument>, <argument pos:start="17:79" pos:end="17:82"><expr pos:start="17:79" pos:end="17:82"><name pos:start="17:79" pos:end="17:82">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:31"><expr pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:12">src1</name><operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:12">src2</name><operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:30">formatConvBuffer</name><operator pos:start="21:31" pos:end="21:31">+</operator><name pos:start="21:32" pos:end="21:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="25:5" pos:end="35:5">else if <condition pos:start="25:13" pos:end="25:40">(<expr pos:start="25:14" pos:end="25:39"><name pos:start="25:14" pos:end="25:22">srcFormat</name><operator pos:start="25:23" pos:end="25:24">==</operator><name pos:start="25:25" pos:end="25:39">PIX_FMT_UYVY422</name></expr>)</condition>

    <block pos:start="27:5" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:36">

        <expr_stmt pos:start="29:9" pos:end="29:84"><expr pos:start="29:9" pos:end="29:83"><call pos:start="29:9" pos:end="29:83"><call pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:14">RENAME</name><argument_list pos:start="29:15" pos:end="29:24">(<argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23">uyvyToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="29:25" pos:end="29:83">(<argument pos:start="29:26" pos:end="29:41"><expr pos:start="29:26" pos:end="29:41"><name pos:start="29:26" pos:end="29:41">formatConvBuffer</name></expr></argument>, <argument pos:start="29:44" pos:end="29:64"><expr pos:start="29:44" pos:end="29:64"><name pos:start="29:44" pos:end="29:59">formatConvBuffer</name><operator pos:start="29:60" pos:end="29:60">+</operator><name pos:start="29:61" pos:end="29:64">VOFW</name></expr></argument>, <argument pos:start="29:67" pos:end="29:70"><expr pos:start="29:67" pos:end="29:70"><name pos:start="29:67" pos:end="29:70">src1</name></expr></argument>, <argument pos:start="29:73" pos:end="29:76"><expr pos:start="29:73" pos:end="29:76"><name pos:start="29:73" pos:end="29:76">src2</name></expr></argument>, <argument pos:start="29:79" pos:end="29:82"><expr pos:start="29:79" pos:end="29:82"><name pos:start="29:79" pos:end="29:82">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:12">src1</name><operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:12">src2</name><operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:30">formatConvBuffer</name><operator pos:start="33:31" pos:end="33:31">+</operator><name pos:start="33:32" pos:end="33:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="37:5" pos:end="47:5">else if <condition pos:start="37:13" pos:end="37:38">(<expr pos:start="37:14" pos:end="37:37"><name pos:start="37:14" pos:end="37:22">srcFormat</name><operator pos:start="37:23" pos:end="37:24">==</operator><name pos:start="37:25" pos:end="37:37">PIX_FMT_RGB32</name></expr>)</condition>

    <block pos:start="39:5" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:36">

        <expr_stmt pos:start="41:9" pos:end="41:85"><expr pos:start="41:9" pos:end="41:84"><call pos:start="41:9" pos:end="41:84"><call pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:14">RENAME</name><argument_list pos:start="41:15" pos:end="41:25">(<argument pos:start="41:16" pos:end="41:24"><expr pos:start="41:16" pos:end="41:24"><name pos:start="41:16" pos:end="41:24">bgr32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="41:26" pos:end="41:84">(<argument pos:start="41:27" pos:end="41:42"><expr pos:start="41:27" pos:end="41:42"><name pos:start="41:27" pos:end="41:42">formatConvBuffer</name></expr></argument>, <argument pos:start="41:45" pos:end="41:65"><expr pos:start="41:45" pos:end="41:65"><name pos:start="41:45" pos:end="41:60">formatConvBuffer</name><operator pos:start="41:61" pos:end="41:61">+</operator><name pos:start="41:62" pos:end="41:65">VOFW</name></expr></argument>, <argument pos:start="41:68" pos:end="41:71"><expr pos:start="41:68" pos:end="41:71"><name pos:start="41:68" pos:end="41:71">src1</name></expr></argument>, <argument pos:start="41:74" pos:end="41:77"><expr pos:start="41:74" pos:end="41:77"><name pos:start="41:74" pos:end="41:77">src2</name></expr></argument>, <argument pos:start="41:80" pos:end="41:83"><expr pos:start="41:80" pos:end="41:83"><name pos:start="41:80" pos:end="41:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:12">src1</name><operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:36"><expr pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:12">src2</name><operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:30">formatConvBuffer</name><operator pos:start="45:31" pos:end="45:31">+</operator><name pos:start="45:32" pos:end="45:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="49:5" pos:end="59:5">else if <condition pos:start="49:13" pos:end="49:40">(<expr pos:start="49:14" pos:end="49:39"><name pos:start="49:14" pos:end="49:22">srcFormat</name><operator pos:start="49:23" pos:end="49:24">==</operator><name pos:start="49:25" pos:end="49:39">PIX_FMT_RGB32_1</name></expr>)</condition>

    <block pos:start="51:5" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:36">

        <expr_stmt pos:start="53:9" pos:end="53:107"><expr pos:start="53:9" pos:end="53:106"><call pos:start="53:9" pos:end="53:106"><call pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:14">RENAME</name><argument_list pos:start="53:15" pos:end="53:25">(<argument pos:start="53:16" pos:end="53:24"><expr pos:start="53:16" pos:end="53:24"><name pos:start="53:16" pos:end="53:24">bgr32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="53:26" pos:end="53:106">(<argument pos:start="53:27" pos:end="53:42"><expr pos:start="53:27" pos:end="53:42"><name pos:start="53:27" pos:end="53:42">formatConvBuffer</name></expr></argument>, <argument pos:start="53:45" pos:end="53:65"><expr pos:start="53:45" pos:end="53:65"><name pos:start="53:45" pos:end="53:60">formatConvBuffer</name><operator pos:start="53:61" pos:end="53:61">+</operator><name pos:start="53:62" pos:end="53:65">VOFW</name></expr></argument>, <argument pos:start="53:68" pos:end="53:82"><expr pos:start="53:68" pos:end="53:82"><name pos:start="53:68" pos:end="53:71">src1</name><operator pos:start="53:72" pos:end="53:72">+</operator><name pos:start="53:73" pos:end="53:82">ALT32_CORR</name></expr></argument>, <argument pos:start="53:85" pos:end="53:99"><expr pos:start="53:85" pos:end="53:99"><name pos:start="53:85" pos:end="53:88">src2</name><operator pos:start="53:89" pos:end="53:89">+</operator><name pos:start="53:90" pos:end="53:99">ALT32_CORR</name></expr></argument>, <argument pos:start="53:102" pos:end="53:105"><expr pos:start="53:102" pos:end="53:105"><name pos:start="53:102" pos:end="53:105">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:12">src1</name><operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:12">src2</name><operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:30">formatConvBuffer</name><operator pos:start="57:31" pos:end="57:31">+</operator><name pos:start="57:32" pos:end="57:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="61:5" pos:end="71:5">else if <condition pos:start="61:13" pos:end="61:38">(<expr pos:start="61:14" pos:end="61:37"><name pos:start="61:14" pos:end="61:22">srcFormat</name><operator pos:start="61:23" pos:end="61:24">==</operator><name pos:start="61:25" pos:end="61:37">PIX_FMT_BGR24</name></expr>)</condition>

    <block pos:start="63:5" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:36">

        <expr_stmt pos:start="65:9" pos:end="65:85"><expr pos:start="65:9" pos:end="65:84"><call pos:start="65:9" pos:end="65:84"><call pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:14">RENAME</name><argument_list pos:start="65:15" pos:end="65:25">(<argument pos:start="65:16" pos:end="65:24"><expr pos:start="65:16" pos:end="65:24"><name pos:start="65:16" pos:end="65:24">bgr24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="65:26" pos:end="65:84">(<argument pos:start="65:27" pos:end="65:42"><expr pos:start="65:27" pos:end="65:42"><name pos:start="65:27" pos:end="65:42">formatConvBuffer</name></expr></argument>, <argument pos:start="65:45" pos:end="65:65"><expr pos:start="65:45" pos:end="65:65"><name pos:start="65:45" pos:end="65:60">formatConvBuffer</name><operator pos:start="65:61" pos:end="65:61">+</operator><name pos:start="65:62" pos:end="65:65">VOFW</name></expr></argument>, <argument pos:start="65:68" pos:end="65:71"><expr pos:start="65:68" pos:end="65:71"><name pos:start="65:68" pos:end="65:71">src1</name></expr></argument>, <argument pos:start="65:74" pos:end="65:77"><expr pos:start="65:74" pos:end="65:77"><name pos:start="65:74" pos:end="65:77">src2</name></expr></argument>, <argument pos:start="65:80" pos:end="65:83"><expr pos:start="65:80" pos:end="65:83"><name pos:start="65:80" pos:end="65:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:31"><expr pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:12">src1</name><operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:36"><expr pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:12">src2</name><operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:30">formatConvBuffer</name><operator pos:start="69:31" pos:end="69:31">+</operator><name pos:start="69:32" pos:end="69:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="73:5" pos:end="83:5">else if <condition pos:start="73:13" pos:end="73:39">(<expr pos:start="73:14" pos:end="73:38"><name pos:start="73:14" pos:end="73:22">srcFormat</name><operator pos:start="73:23" pos:end="73:24">==</operator><name pos:start="73:25" pos:end="73:38">PIX_FMT_BGR565</name></expr>)</condition>

    <block pos:start="75:5" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:36">

        <expr_stmt pos:start="77:9" pos:end="77:85"><expr pos:start="77:9" pos:end="77:84"><call pos:start="77:9" pos:end="77:84"><call pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:14">RENAME</name><argument_list pos:start="77:15" pos:end="77:25">(<argument pos:start="77:16" pos:end="77:24"><expr pos:start="77:16" pos:end="77:24"><name pos:start="77:16" pos:end="77:24">bgr16ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="77:26" pos:end="77:84">(<argument pos:start="77:27" pos:end="77:42"><expr pos:start="77:27" pos:end="77:42"><name pos:start="77:27" pos:end="77:42">formatConvBuffer</name></expr></argument>, <argument pos:start="77:45" pos:end="77:65"><expr pos:start="77:45" pos:end="77:65"><name pos:start="77:45" pos:end="77:60">formatConvBuffer</name><operator pos:start="77:61" pos:end="77:61">+</operator><name pos:start="77:62" pos:end="77:65">VOFW</name></expr></argument>, <argument pos:start="77:68" pos:end="77:71"><expr pos:start="77:68" pos:end="77:71"><name pos:start="77:68" pos:end="77:71">src1</name></expr></argument>, <argument pos:start="77:74" pos:end="77:77"><expr pos:start="77:74" pos:end="77:77"><name pos:start="77:74" pos:end="77:77">src2</name></expr></argument>, <argument pos:start="77:80" pos:end="77:83"><expr pos:start="77:80" pos:end="77:83"><name pos:start="77:80" pos:end="77:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:12">src1</name><operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:36"><expr pos:start="81:9" pos:end="81:35"><name pos:start="81:9" pos:end="81:12">src2</name><operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:30">formatConvBuffer</name><operator pos:start="81:31" pos:end="81:31">+</operator><name pos:start="81:32" pos:end="81:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="85:5" pos:end="95:5">else if <condition pos:start="85:13" pos:end="85:39">(<expr pos:start="85:14" pos:end="85:38"><name pos:start="85:14" pos:end="85:22">srcFormat</name><operator pos:start="85:23" pos:end="85:24">==</operator><name pos:start="85:25" pos:end="85:38">PIX_FMT_BGR555</name></expr>)</condition>

    <block pos:start="87:5" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:36">

        <expr_stmt pos:start="89:9" pos:end="89:85"><expr pos:start="89:9" pos:end="89:84"><call pos:start="89:9" pos:end="89:84"><call pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:14">RENAME</name><argument_list pos:start="89:15" pos:end="89:25">(<argument pos:start="89:16" pos:end="89:24"><expr pos:start="89:16" pos:end="89:24"><name pos:start="89:16" pos:end="89:24">bgr15ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="89:26" pos:end="89:84">(<argument pos:start="89:27" pos:end="89:42"><expr pos:start="89:27" pos:end="89:42"><name pos:start="89:27" pos:end="89:42">formatConvBuffer</name></expr></argument>, <argument pos:start="89:45" pos:end="89:65"><expr pos:start="89:45" pos:end="89:65"><name pos:start="89:45" pos:end="89:60">formatConvBuffer</name><operator pos:start="89:61" pos:end="89:61">+</operator><name pos:start="89:62" pos:end="89:65">VOFW</name></expr></argument>, <argument pos:start="89:68" pos:end="89:71"><expr pos:start="89:68" pos:end="89:71"><name pos:start="89:68" pos:end="89:71">src1</name></expr></argument>, <argument pos:start="89:74" pos:end="89:77"><expr pos:start="89:74" pos:end="89:77"><name pos:start="89:74" pos:end="89:77">src2</name></expr></argument>, <argument pos:start="89:80" pos:end="89:83"><expr pos:start="89:80" pos:end="89:83"><name pos:start="89:80" pos:end="89:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:31"><expr pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:12">src1</name><operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:12">src2</name><operator pos:start="93:13" pos:end="93:13">=</operator> <name pos:start="93:15" pos:end="93:30">formatConvBuffer</name><operator pos:start="93:31" pos:end="93:31">+</operator><name pos:start="93:32" pos:end="93:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="97:5" pos:end="107:5">else if <condition pos:start="97:13" pos:end="97:38">(<expr pos:start="97:14" pos:end="97:37"><name pos:start="97:14" pos:end="97:22">srcFormat</name><operator pos:start="97:23" pos:end="97:24">==</operator><name pos:start="97:25" pos:end="97:37">PIX_FMT_BGR32</name></expr>)</condition>

    <block pos:start="99:5" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:36">

        <expr_stmt pos:start="101:9" pos:end="101:85"><expr pos:start="101:9" pos:end="101:84"><call pos:start="101:9" pos:end="101:84"><call pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:14">RENAME</name><argument_list pos:start="101:15" pos:end="101:25">(<argument pos:start="101:16" pos:end="101:24"><expr pos:start="101:16" pos:end="101:24"><name pos:start="101:16" pos:end="101:24">rgb32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="101:26" pos:end="101:84">(<argument pos:start="101:27" pos:end="101:42"><expr pos:start="101:27" pos:end="101:42"><name pos:start="101:27" pos:end="101:42">formatConvBuffer</name></expr></argument>, <argument pos:start="101:45" pos:end="101:65"><expr pos:start="101:45" pos:end="101:65"><name pos:start="101:45" pos:end="101:60">formatConvBuffer</name><operator pos:start="101:61" pos:end="101:61">+</operator><name pos:start="101:62" pos:end="101:65">VOFW</name></expr></argument>, <argument pos:start="101:68" pos:end="101:71"><expr pos:start="101:68" pos:end="101:71"><name pos:start="101:68" pos:end="101:71">src1</name></expr></argument>, <argument pos:start="101:74" pos:end="101:77"><expr pos:start="101:74" pos:end="101:77"><name pos:start="101:74" pos:end="101:77">src2</name></expr></argument>, <argument pos:start="101:80" pos:end="101:83"><expr pos:start="101:80" pos:end="101:83"><name pos:start="101:80" pos:end="101:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:31"><expr pos:start="103:9" pos:end="103:30"><name pos:start="103:9" pos:end="103:12">src1</name><operator pos:start="103:13" pos:end="103:13">=</operator> <name pos:start="103:15" pos:end="103:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:36"><expr pos:start="105:9" pos:end="105:35"><name pos:start="105:9" pos:end="105:12">src2</name><operator pos:start="105:13" pos:end="105:13">=</operator> <name pos:start="105:15" pos:end="105:30">formatConvBuffer</name><operator pos:start="105:31" pos:end="105:31">+</operator><name pos:start="105:32" pos:end="105:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="109:5" pos:end="119:5">else if <condition pos:start="109:13" pos:end="109:40">(<expr pos:start="109:14" pos:end="109:39"><name pos:start="109:14" pos:end="109:22">srcFormat</name><operator pos:start="109:23" pos:end="109:24">==</operator><name pos:start="109:25" pos:end="109:39">PIX_FMT_BGR32_1</name></expr>)</condition>

    <block pos:start="111:5" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:36">

        <expr_stmt pos:start="113:9" pos:end="113:107"><expr pos:start="113:9" pos:end="113:106"><call pos:start="113:9" pos:end="113:106"><call pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:14">RENAME</name><argument_list pos:start="113:15" pos:end="113:25">(<argument pos:start="113:16" pos:end="113:24"><expr pos:start="113:16" pos:end="113:24"><name pos:start="113:16" pos:end="113:24">rgb32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="113:26" pos:end="113:106">(<argument pos:start="113:27" pos:end="113:42"><expr pos:start="113:27" pos:end="113:42"><name pos:start="113:27" pos:end="113:42">formatConvBuffer</name></expr></argument>, <argument pos:start="113:45" pos:end="113:65"><expr pos:start="113:45" pos:end="113:65"><name pos:start="113:45" pos:end="113:60">formatConvBuffer</name><operator pos:start="113:61" pos:end="113:61">+</operator><name pos:start="113:62" pos:end="113:65">VOFW</name></expr></argument>, <argument pos:start="113:68" pos:end="113:82"><expr pos:start="113:68" pos:end="113:82"><name pos:start="113:68" pos:end="113:71">src1</name><operator pos:start="113:72" pos:end="113:72">+</operator><name pos:start="113:73" pos:end="113:82">ALT32_CORR</name></expr></argument>, <argument pos:start="113:85" pos:end="113:99"><expr pos:start="113:85" pos:end="113:99"><name pos:start="113:85" pos:end="113:88">src2</name><operator pos:start="113:89" pos:end="113:89">+</operator><name pos:start="113:90" pos:end="113:99">ALT32_CORR</name></expr></argument>, <argument pos:start="113:102" pos:end="113:105"><expr pos:start="113:102" pos:end="113:105"><name pos:start="113:102" pos:end="113:105">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:31"><expr pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:12">src1</name><operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:36"><expr pos:start="117:9" pos:end="117:35"><name pos:start="117:9" pos:end="117:12">src2</name><operator pos:start="117:13" pos:end="117:13">=</operator> <name pos:start="117:15" pos:end="117:30">formatConvBuffer</name><operator pos:start="117:31" pos:end="117:31">+</operator><name pos:start="117:32" pos:end="117:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="121:5" pos:end="131:5">else if <condition pos:start="121:13" pos:end="121:38">(<expr pos:start="121:14" pos:end="121:37"><name pos:start="121:14" pos:end="121:22">srcFormat</name><operator pos:start="121:23" pos:end="121:24">==</operator><name pos:start="121:25" pos:end="121:37">PIX_FMT_RGB24</name></expr>)</condition>

    <block pos:start="123:5" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:36">

        <expr_stmt pos:start="125:9" pos:end="125:85"><expr pos:start="125:9" pos:end="125:84"><call pos:start="125:9" pos:end="125:84"><call pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:14">RENAME</name><argument_list pos:start="125:15" pos:end="125:25">(<argument pos:start="125:16" pos:end="125:24"><expr pos:start="125:16" pos:end="125:24"><name pos:start="125:16" pos:end="125:24">rgb24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="125:26" pos:end="125:84">(<argument pos:start="125:27" pos:end="125:42"><expr pos:start="125:27" pos:end="125:42"><name pos:start="125:27" pos:end="125:42">formatConvBuffer</name></expr></argument>, <argument pos:start="125:45" pos:end="125:65"><expr pos:start="125:45" pos:end="125:65"><name pos:start="125:45" pos:end="125:60">formatConvBuffer</name><operator pos:start="125:61" pos:end="125:61">+</operator><name pos:start="125:62" pos:end="125:65">VOFW</name></expr></argument>, <argument pos:start="125:68" pos:end="125:71"><expr pos:start="125:68" pos:end="125:71"><name pos:start="125:68" pos:end="125:71">src1</name></expr></argument>, <argument pos:start="125:74" pos:end="125:77"><expr pos:start="125:74" pos:end="125:77"><name pos:start="125:74" pos:end="125:77">src2</name></expr></argument>, <argument pos:start="125:80" pos:end="125:83"><expr pos:start="125:80" pos:end="125:83"><name pos:start="125:80" pos:end="125:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:31"><expr pos:start="127:9" pos:end="127:30"><name pos:start="127:9" pos:end="127:12">src1</name><operator pos:start="127:13" pos:end="127:13">=</operator> <name pos:start="127:15" pos:end="127:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:36"><expr pos:start="129:9" pos:end="129:35"><name pos:start="129:9" pos:end="129:12">src2</name><operator pos:start="129:13" pos:end="129:13">=</operator> <name pos:start="129:15" pos:end="129:30">formatConvBuffer</name><operator pos:start="129:31" pos:end="129:31">+</operator><name pos:start="129:32" pos:end="129:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="133:5" pos:end="143:5">else if <condition pos:start="133:13" pos:end="133:39">(<expr pos:start="133:14" pos:end="133:38"><name pos:start="133:14" pos:end="133:22">srcFormat</name><operator pos:start="133:23" pos:end="133:24">==</operator><name pos:start="133:25" pos:end="133:38">PIX_FMT_RGB565</name></expr>)</condition>

    <block pos:start="135:5" pos:end="143:5">{<block_content pos:start="137:9" pos:end="141:36">

        <expr_stmt pos:start="137:9" pos:end="137:85"><expr pos:start="137:9" pos:end="137:84"><call pos:start="137:9" pos:end="137:84"><call pos:start="137:9" pos:end="137:25"><name pos:start="137:9" pos:end="137:14">RENAME</name><argument_list pos:start="137:15" pos:end="137:25">(<argument pos:start="137:16" pos:end="137:24"><expr pos:start="137:16" pos:end="137:24"><name pos:start="137:16" pos:end="137:24">rgb16ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="137:26" pos:end="137:84">(<argument pos:start="137:27" pos:end="137:42"><expr pos:start="137:27" pos:end="137:42"><name pos:start="137:27" pos:end="137:42">formatConvBuffer</name></expr></argument>, <argument pos:start="137:45" pos:end="137:65"><expr pos:start="137:45" pos:end="137:65"><name pos:start="137:45" pos:end="137:60">formatConvBuffer</name><operator pos:start="137:61" pos:end="137:61">+</operator><name pos:start="137:62" pos:end="137:65">VOFW</name></expr></argument>, <argument pos:start="137:68" pos:end="137:71"><expr pos:start="137:68" pos:end="137:71"><name pos:start="137:68" pos:end="137:71">src1</name></expr></argument>, <argument pos:start="137:74" pos:end="137:77"><expr pos:start="137:74" pos:end="137:77"><name pos:start="137:74" pos:end="137:77">src2</name></expr></argument>, <argument pos:start="137:80" pos:end="137:83"><expr pos:start="137:80" pos:end="137:83"><name pos:start="137:80" pos:end="137:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:31"><expr pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:12">src1</name><operator pos:start="139:13" pos:end="139:13">=</operator> <name pos:start="139:15" pos:end="139:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:36"><expr pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:12">src2</name><operator pos:start="141:13" pos:end="141:13">=</operator> <name pos:start="141:15" pos:end="141:30">formatConvBuffer</name><operator pos:start="141:31" pos:end="141:31">+</operator><name pos:start="141:32" pos:end="141:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="145:5" pos:end="155:5">else if <condition pos:start="145:13" pos:end="145:39">(<expr pos:start="145:14" pos:end="145:38"><name pos:start="145:14" pos:end="145:22">srcFormat</name><operator pos:start="145:23" pos:end="145:24">==</operator><name pos:start="145:25" pos:end="145:38">PIX_FMT_RGB555</name></expr>)</condition>

    <block pos:start="147:5" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:36">

        <expr_stmt pos:start="149:9" pos:end="149:85"><expr pos:start="149:9" pos:end="149:84"><call pos:start="149:9" pos:end="149:84"><call pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:14">RENAME</name><argument_list pos:start="149:15" pos:end="149:25">(<argument pos:start="149:16" pos:end="149:24"><expr pos:start="149:16" pos:end="149:24"><name pos:start="149:16" pos:end="149:24">rgb15ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="149:26" pos:end="149:84">(<argument pos:start="149:27" pos:end="149:42"><expr pos:start="149:27" pos:end="149:42"><name pos:start="149:27" pos:end="149:42">formatConvBuffer</name></expr></argument>, <argument pos:start="149:45" pos:end="149:65"><expr pos:start="149:45" pos:end="149:65"><name pos:start="149:45" pos:end="149:60">formatConvBuffer</name><operator pos:start="149:61" pos:end="149:61">+</operator><name pos:start="149:62" pos:end="149:65">VOFW</name></expr></argument>, <argument pos:start="149:68" pos:end="149:71"><expr pos:start="149:68" pos:end="149:71"><name pos:start="149:68" pos:end="149:71">src1</name></expr></argument>, <argument pos:start="149:74" pos:end="149:77"><expr pos:start="149:74" pos:end="149:77"><name pos:start="149:74" pos:end="149:77">src2</name></expr></argument>, <argument pos:start="149:80" pos:end="149:83"><expr pos:start="149:80" pos:end="149:83"><name pos:start="149:80" pos:end="149:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:31"><expr pos:start="151:9" pos:end="151:30"><name pos:start="151:9" pos:end="151:12">src1</name><operator pos:start="151:13" pos:end="151:13">=</operator> <name pos:start="151:15" pos:end="151:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:12">src2</name><operator pos:start="153:13" pos:end="153:13">=</operator> <name pos:start="153:15" pos:end="153:30">formatConvBuffer</name><operator pos:start="153:31" pos:end="153:31">+</operator><name pos:start="153:32" pos:end="153:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="157:5" pos:end="163:5">else if <condition pos:start="157:13" pos:end="157:31">(<expr pos:start="157:14" pos:end="157:30"><call pos:start="157:14" pos:end="157:30"><name pos:start="157:14" pos:end="157:19">isGray</name><argument_list pos:start="157:20" pos:end="157:30">(<argument pos:start="157:21" pos:end="157:29"><expr pos:start="157:21" pos:end="157:29"><name pos:start="157:21" pos:end="157:29">srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="159:5" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:15">

        <return pos:start="161:9" pos:end="161:15">return;</return>

    </block_content>}</block></if>

    <if type="elseif" pos:start="165:5" pos:end="180:0">else if <condition pos:start="165:13" pos:end="165:156">(<expr pos:start="165:14" pos:end="165:155"><name pos:start="165:14" pos:end="165:22">srcFormat</name><operator pos:start="165:23" pos:end="165:24">==</operator><name pos:start="165:25" pos:end="165:36">PIX_FMT_RGB8</name> <operator pos:start="165:38" pos:end="165:39">||</operator> <name pos:start="165:41" pos:end="165:49">srcFormat</name><operator pos:start="165:50" pos:end="165:51">==</operator><name pos:start="165:52" pos:end="165:63">PIX_FMT_BGR8</name> <operator pos:start="165:65" pos:end="165:66">||</operator> <name pos:start="165:68" pos:end="165:76">srcFormat</name><operator pos:start="165:77" pos:end="165:78">==</operator><name pos:start="165:79" pos:end="165:90">PIX_FMT_PAL8</name> <operator pos:start="165:92" pos:end="165:93">||</operator> <name pos:start="165:95" pos:end="165:103">srcFormat</name><operator pos:start="165:104" pos:end="165:105">==</operator><name pos:start="165:106" pos:end="165:122">PIX_FMT_BGR4_BYTE</name>  <operator pos:start="165:125" pos:end="165:126">||</operator> <name pos:start="165:128" pos:end="165:136">srcFormat</name><operator pos:start="165:137" pos:end="165:138">==</operator><name pos:start="165:139" pos:end="165:155">PIX_FMT_RGB4_BYTE</name></expr>)</condition>

    <block pos:start="167:5" pos:end="180:0">{<block_content pos:start="169:9" pos:end="173:36">

        <expr_stmt pos:start="169:9" pos:end="169:99"><expr pos:start="169:9" pos:end="169:98"><call pos:start="169:9" pos:end="169:98"><call pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:14">RENAME</name><argument_list pos:start="169:15" pos:end="169:23">(<argument pos:start="169:16" pos:end="169:22"><expr pos:start="169:16" pos:end="169:22"><name pos:start="169:16" pos:end="169:22">palToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="169:24" pos:end="169:98">(<argument pos:start="169:25" pos:end="169:40"><expr pos:start="169:25" pos:end="169:40"><name pos:start="169:25" pos:end="169:40">formatConvBuffer</name></expr></argument>, <argument pos:start="169:43" pos:end="169:63"><expr pos:start="169:43" pos:end="169:63"><name pos:start="169:43" pos:end="169:58">formatConvBuffer</name><operator pos:start="169:59" pos:end="169:59">+</operator><name pos:start="169:60" pos:end="169:63">VOFW</name></expr></argument>, <argument pos:start="169:66" pos:end="169:69"><expr pos:start="169:66" pos:end="169:69"><name pos:start="169:66" pos:end="169:69">src1</name></expr></argument>, <argument pos:start="169:72" pos:end="169:75"><expr pos:start="169:72" pos:end="169:75"><name pos:start="169:72" pos:end="169:75">src2</name></expr></argument>, <argument pos:start="169:78" pos:end="169:81"><expr pos:start="169:78" pos:end="169:81"><name pos:start="169:78" pos:end="169:81">srcW</name></expr></argument>, <argument pos:start="169:84" pos:end="169:97"><expr pos:start="169:84" pos:end="169:97"><operator pos:start="169:84" pos:end="169:84">(</operator><name pos:start="169:85" pos:end="169:92">uint32_t</name><operator pos:start="169:93" pos:end="169:93">*</operator><operator pos:start="169:94" pos:end="169:94">)</operator><name pos:start="169:95" pos:end="169:97">pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:31"><expr pos:start="171:9" pos:end="171:30"><name pos:start="171:9" pos:end="171:12">src1</name><operator pos:start="171:13" pos:end="171:13">=</operator> <name pos:start="171:15" pos:end="171:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:36"><expr pos:start="173:9" pos:end="173:35"><name pos:start="173:9" pos:end="173:12">src2</name><operator pos:start="173:13" pos:end="173:13">=</operator> <name pos:start="173:15" pos:end="173:30">formatConvBuffer</name><operator pos:start="173:31" pos:end="173:31">+</operator><name pos:start="173:32" pos:end="173:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="179:1" pos:end="179:15">#<cpp:directive pos:start="179:2" pos:end="179:6">ifdef</cpp:directive> <name pos:start="179:8" pos:end="179:15">HAVE_MMX</name></cpp:ifdef>

    <comment type="line" pos:start="181:5" pos:end="181:96">// Use the new MMX scaler if the MMX2 one can't be used (it is faster than the x86 ASM one).</comment>

    <if_stmt pos:start="183:5" pos:end="497:5"><if pos:start="183:5" pos:end="497:5">if <condition pos:start="183:8" pos:end="186:0">(<expr pos:start="183:9" pos:end="183:54"><operator pos:start="183:9" pos:end="183:9">!</operator><operator pos:start="183:10" pos:end="183:10">(</operator><name pos:start="183:11" pos:end="183:15">flags</name><operator pos:start="183:16" pos:end="183:16">&amp;</operator><name pos:start="183:17" pos:end="183:33">SWS_FAST_BILINEAR</name><operator pos:start="183:34" pos:end="183:34">)</operator> <operator pos:start="183:36" pos:end="183:37">||</operator> <operator pos:start="183:39" pos:end="183:39">(</operator><operator pos:start="183:40" pos:end="183:40">!</operator><name pos:start="183:41" pos:end="183:53">canMMX2BeUsed</name><operator pos:start="183:54" pos:end="183:54">)</operator></expr>)</condition><block type="pseudo" pos:start="187:5" pos:end="497:5"><block_content pos:start="187:5" pos:end="497:5">

<cpp:else pos:start="185:1" pos:end="185:5">#<cpp:directive pos:start="185:2" pos:end="185:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="187:5" pos:end="497:5"><if pos:start="187:5" pos:end="197:5">if <condition pos:start="187:8" pos:end="190:0">(<expr pos:start="187:9" pos:end="187:34"><operator pos:start="187:9" pos:end="187:9">!</operator><operator pos:start="187:10" pos:end="187:10">(</operator><name pos:start="187:11" pos:end="187:15">flags</name><operator pos:start="187:16" pos:end="187:16">&amp;</operator><name pos:start="187:17" pos:end="187:33">SWS_FAST_BILINEAR</name><operator pos:start="187:34" pos:end="187:34">)</operator></expr>)</condition>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

    <block pos:start="191:5" pos:end="197:5">{<block_content pos:start="193:9" pos:end="195:104">

        <function_decl pos:start="193:9" pos:end="193:104"><type pos:start="193:9" pos:end="193:14"><name pos:start="193:9" pos:end="193:14">RENAME</name></type>(<name pos:start="193:16" pos:end="193:21">hScale</name>)<parameter_list pos:start="193:23" pos:end="193:103">(<parameter pos:start="193:24" pos:end="193:26"><decl pos:start="193:24" pos:end="193:26"><type pos:start="193:24" pos:end="193:26"><name pos:start="193:24" pos:end="193:26">dst</name></type></decl></parameter>     , <parameter pos:start="193:34" pos:end="193:41"><decl pos:start="193:34" pos:end="193:41"><type pos:start="193:34" pos:end="193:41"><name pos:start="193:34" pos:end="193:41">dstWidth</name></type></decl></parameter>, <parameter pos:start="193:44" pos:end="193:47"><decl pos:start="193:44" pos:end="193:47"><type pos:start="193:44" pos:end="193:47"><name pos:start="193:44" pos:end="193:47">src1</name></type></decl></parameter>, <parameter pos:start="193:50" pos:end="193:53"><decl pos:start="193:50" pos:end="193:53"><type pos:start="193:50" pos:end="193:53"><name pos:start="193:50" pos:end="193:53">srcW</name></type></decl></parameter>, <parameter pos:start="193:56" pos:end="193:59"><decl pos:start="193:56" pos:end="193:59"><type pos:start="193:56" pos:end="193:59"><name pos:start="193:56" pos:end="193:59">xInc</name></type></decl></parameter>, <parameter pos:start="193:62" pos:end="193:71"><decl pos:start="193:62" pos:end="193:71"><type pos:start="193:62" pos:end="193:71"><name pos:start="193:62" pos:end="193:71">hChrFilter</name></type></decl></parameter>, <parameter pos:start="193:74" pos:end="193:86"><decl pos:start="193:74" pos:end="193:86"><type pos:start="193:74" pos:end="193:86"><name pos:start="193:74" pos:end="193:86">hChrFilterPos</name></type></decl></parameter>, <parameter pos:start="193:89" pos:end="193:102"><decl pos:start="193:89" pos:end="193:102"><type pos:start="193:89" pos:end="193:102"><name pos:start="193:89" pos:end="193:102">hChrFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="195:9" pos:end="195:104"><expr pos:start="195:9" pos:end="195:103"><call pos:start="195:9" pos:end="195:103"><call pos:start="195:9" pos:end="195:22"><name pos:start="195:9" pos:end="195:14">RENAME</name><argument_list pos:start="195:15" pos:end="195:22">(<argument pos:start="195:16" pos:end="195:21"><expr pos:start="195:16" pos:end="195:21"><name pos:start="195:16" pos:end="195:21">hScale</name></expr></argument>)</argument_list></call><argument_list pos:start="195:23" pos:end="195:103">(<argument pos:start="195:24" pos:end="195:31"><expr pos:start="195:24" pos:end="195:31"><name pos:start="195:24" pos:end="195:26">dst</name><operator pos:start="195:27" pos:end="195:27">+</operator><name pos:start="195:28" pos:end="195:31">VOFW</name></expr></argument>, <argument pos:start="195:34" pos:end="195:41"><expr pos:start="195:34" pos:end="195:41"><name pos:start="195:34" pos:end="195:41">dstWidth</name></expr></argument>, <argument pos:start="195:44" pos:end="195:47"><expr pos:start="195:44" pos:end="195:47"><name pos:start="195:44" pos:end="195:47">src2</name></expr></argument>, <argument pos:start="195:50" pos:end="195:53"><expr pos:start="195:50" pos:end="195:53"><name pos:start="195:50" pos:end="195:53">srcW</name></expr></argument>, <argument pos:start="195:56" pos:end="195:59"><expr pos:start="195:56" pos:end="195:59"><name pos:start="195:56" pos:end="195:59">xInc</name></expr></argument>, <argument pos:start="195:62" pos:end="195:71"><expr pos:start="195:62" pos:end="195:71"><name pos:start="195:62" pos:end="195:71">hChrFilter</name></expr></argument>, <argument pos:start="195:74" pos:end="195:86"><expr pos:start="195:74" pos:end="195:86"><name pos:start="195:74" pos:end="195:86">hChrFilterPos</name></expr></argument>, <argument pos:start="195:89" pos:end="195:102"><expr pos:start="195:89" pos:end="195:102"><name pos:start="195:89" pos:end="195:102">hChrFilterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="199:5" pos:end="497:5">else <comment type="line" pos:start="199:10" pos:end="199:50">// fast bilinear upscale / crap downscale</comment>

    <block pos:start="201:5" pos:end="497:5">{<block_content pos:start="207:9" pos:end="496:0">

<cpp:if pos:start="203:1" pos:end="203:21">#<cpp:directive pos:start="203:2" pos:end="203:3">if</cpp:directive> <expr pos:start="203:5" pos:end="203:21"><call pos:start="203:5" pos:end="203:21"><name pos:start="203:5" pos:end="203:11">defined</name><argument_list pos:start="203:12" pos:end="203:21">(<argument pos:start="203:13" pos:end="203:20"><expr pos:start="203:13" pos:end="203:20"><name pos:start="203:13" pos:end="203:20">ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="205:1" pos:end="205:16">#<cpp:directive pos:start="205:2" pos:end="205:6">ifdef</cpp:directive> <name pos:start="205:8" pos:end="205:16">HAVE_MMX2</name></cpp:ifdef>

        <decl_stmt pos:start="207:9" pos:end="210:0"><decl pos:start="207:9" pos:end="207:13"><type pos:start="207:9" pos:end="207:11"><name pos:start="207:9" pos:end="207:11">int</name></type> <name pos:start="207:13" pos:end="207:13">i</name></decl>;</decl_stmt>

<cpp:if pos:start="209:1" pos:end="209:16">#<cpp:directive pos:start="209:2" pos:end="209:3">if</cpp:directive> <expr pos:start="209:5" pos:end="209:16"><call pos:start="209:5" pos:end="209:16"><name pos:start="209:5" pos:end="209:11">defined</name><argument_list pos:start="209:12" pos:end="209:16">(<argument pos:start="209:13" pos:end="209:15"><expr pos:start="209:13" pos:end="209:15"><name pos:start="209:13" pos:end="209:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="211:9" pos:end="214:0"><decl pos:start="211:9" pos:end="211:52"><type pos:start="211:9" pos:end="211:24"><name pos:start="211:9" pos:end="211:16">uint64_t</name> <name pos:start="211:18" pos:end="211:24">ebxsave</name></type> <name pos:start="211:26" pos:end="211:38">__attribute__</name><argument_list pos:start="211:39" pos:end="211:52">(<argument pos:start="211:40" pos:end="211:51"><expr pos:start="211:40" pos:end="211:51"><operator pos:start="211:40" pos:end="211:40">(</operator><call pos:start="211:41" pos:end="211:50"><name pos:start="211:41" pos:end="211:47">aligned</name><argument_list pos:start="211:48" pos:end="211:50">(<argument pos:start="211:49" pos:end="211:49"><expr pos:start="211:49" pos:end="211:49"><literal type="number" pos:start="211:49" pos:end="211:49">8</literal></expr></argument>)</argument_list></call><operator pos:start="211:51" pos:end="211:51">)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="215:9" pos:end="466:0"><if pos:start="215:9" pos:end="361:9">if <condition pos:start="215:12" pos:end="215:26">(<expr pos:start="215:13" pos:end="215:25"><name pos:start="215:13" pos:end="215:25">canMMX2BeUsed</name></expr>)</condition>

        <block pos:start="217:9" pos:end="361:9">{<block_content pos:start="219:13" pos:end="359:13">

            <asm pos:start="219:13" pos:end="347:14">asm <specifier pos:start="219:17" pos:end="219:24">volatile</specifier>(

<cpp:if pos:start="221:1" pos:end="221:16">#<cpp:directive pos:start="221:2" pos:end="221:3">if</cpp:directive> <expr pos:start="221:5" pos:end="221:16"><call pos:start="221:5" pos:end="221:16"><name pos:start="221:5" pos:end="221:11">defined</name><argument_list pos:start="221:12" pos:end="221:16">(<argument pos:start="221:13" pos:end="221:15"><expr pos:start="221:13" pos:end="221:15"><name pos:start="221:13" pos:end="221:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov          %%"REG_b", %6         \n\t"

<cpp:endif pos:start="225:1" pos:end="225:6">#<cpp:directive pos:start="225:2" pos:end="225:6">endif</cpp:directive></cpp:endif>

            "pxor             %%mm7, %%mm7      \n\t"

            "mov                 %0, %%"REG_c"  \n\t"

            "mov                 %1, %%"REG_D"  \n\t"

            "mov                 %2, %%"REG_d"  \n\t"

            "mov                 %3, %%"REG_b"  \n\t"

            "xor          %%"REG_a", %%"REG_a"  \n\t" <comment type="line" pos:start="237:55" pos:end="237:58">// i</comment>

            PREFETCH"   (%%"REG_c")             \n\t"

            PREFETCH" 32(%%"REG_c")             \n\t"

            PREFETCH" 64(%%"REG_c")             \n\t"



<cpp:ifdef pos:start="247:1" pos:end="247:18">#<cpp:directive pos:start="247:2" pos:end="247:6">ifdef</cpp:directive> <name pos:start="247:8" pos:end="247:18">ARCH_X86_64</name></cpp:ifdef>



<cpp:define pos:start="251:1" pos:end="267:5">#<cpp:directive pos:start="251:2" pos:end="251:7">define</cpp:directive> <cpp:macro pos:start="251:9" pos:end="251:21"><name pos:start="251:9" pos:end="251:21">FUNNY_UV_CODE</name></cpp:macro> \

            <cpp:value pos:start="253:13" pos:end="267:5">"movl       (%%"REG_b"), %%esi      \n\t"\

            "call               *%4             \n\t"\

            "movl (%%"REG_b", %%"REG_a"), %%esi \n\t"\

            "add          %%"REG_S", %%"REG_c"  \n\t"\

            "add          %%"REG_a", %%"REG_D"  \n\t"\

            "xor          %%"REG_a", %%"REG_a"  \n\t"\



#else</cpp:value></cpp:define>



<cpp:define pos:start="271:1" pos:end="285:6">#<cpp:directive pos:start="271:2" pos:end="271:7">define</cpp:directive> <cpp:macro pos:start="271:9" pos:end="271:21"><name pos:start="271:9" pos:end="271:21">FUNNY_UV_CODE</name></cpp:macro> \

            <cpp:value pos:start="273:13" pos:end="285:6">"movl       (%%"REG_b"), %%esi      \n\t"\

            "call               *%4             \n\t"\

            "addl (%%"REG_b", %%"REG_a"), %%"REG_c" \n\t"\

            "add          %%"REG_a", %%"REG_D"  \n\t"\

            "xor          %%"REG_a", %%"REG_a"  \n\t"\



#endif</cpp:value></cpp:define> <comment type="block" pos:start="285:8" pos:end="285:24">/* ARCH_X86_64 */</comment>



FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

            "xor          %%"REG_a", %%"REG_a"  \n\t" <comment type="line" pos:start="297:55" pos:end="297:58">// i</comment>

            "mov                 %5, %%"REG_c"  \n\t" <comment type="line" pos:start="299:55" pos:end="299:60">// src</comment>

            "mov                 %1, %%"REG_D"  \n\t" <comment type="line" pos:start="301:55" pos:end="301:61">// buf1</comment>

            "add              $"AV_STRINGIFY(VOF)", %%"REG_D"  \n\t"

            PREFETCH"   (%%"REG_c")             \n\t"

            PREFETCH" 32(%%"REG_c")             \n\t"

            PREFETCH" 64(%%"REG_c")             \n\t"



FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE



<cpp:if pos:start="323:1" pos:end="323:16">#<cpp:directive pos:start="323:2" pos:end="323:3">if</cpp:directive> <expr pos:start="323:5" pos:end="323:16"><call pos:start="323:5" pos:end="323:16"><name pos:start="323:5" pos:end="323:11">defined</name><argument_list pos:start="323:12" pos:end="323:16">(<argument pos:start="323:13" pos:end="323:15"><expr pos:start="323:13" pos:end="323:15"><name pos:start="323:13" pos:end="323:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov %6, %%"REG_b"    \n\t"

<cpp:endif pos:start="327:1" pos:end="327:6">#<cpp:directive pos:start="327:2" pos:end="327:6">endif</cpp:directive></cpp:endif>

            :: "m" (src1), "m" (dst), "m" (mmx2Filter), "m" (mmx2FilterPos),

            "m" (funnyUVCode), "m" (src2)

<cpp:if pos:start="333:1" pos:end="333:16">#<cpp:directive pos:start="333:2" pos:end="333:3">if</cpp:directive> <expr pos:start="333:5" pos:end="333:16"><call pos:start="333:5" pos:end="333:16"><name pos:start="333:5" pos:end="333:11">defined</name><argument_list pos:start="333:12" pos:end="333:16">(<argument pos:start="333:13" pos:end="333:15"><expr pos:start="333:13" pos:end="333:15"><name pos:start="333:13" pos:end="333:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            ,"m" (ebxsave)

<cpp:endif pos:start="337:1" pos:end="337:6">#<cpp:directive pos:start="337:2" pos:end="337:6">endif</cpp:directive></cpp:endif>

            : "%"REG_a, "%"REG_c, "%"REG_d, "%"REG_S, "%"REG_D

<cpp:if pos:start="341:1" pos:end="341:17">#<cpp:directive pos:start="341:2" pos:end="341:3">if</cpp:directive> <expr pos:start="341:5" pos:end="341:17"><operator pos:start="341:5" pos:end="341:5">!</operator><call pos:start="341:6" pos:end="341:17"><name pos:start="341:6" pos:end="341:12">defined</name><argument_list pos:start="341:13" pos:end="341:17">(<argument pos:start="341:14" pos:end="341:16"><expr pos:start="341:14" pos:end="341:16"><name pos:start="341:14" pos:end="341:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

             ,"%"REG_b

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif>

            );</asm>

            <for pos:start="349:13" pos:end="359:13">for <control pos:start="349:17" pos:end="349:58">(<init pos:start="349:18" pos:end="349:30"><expr pos:start="349:18" pos:end="349:29"><name pos:start="349:18" pos:end="349:18">i</name><operator pos:start="349:19" pos:end="349:19">=</operator><name pos:start="349:20" pos:end="349:27">dstWidth</name><operator pos:start="349:28" pos:end="349:28">-</operator><literal type="number" pos:start="349:29" pos:end="349:29">1</literal></expr>;</init> <condition pos:start="349:32" pos:end="349:53"><expr pos:start="349:32" pos:end="349:52"><operator pos:start="349:32" pos:end="349:32">(</operator><name pos:start="349:33" pos:end="349:33">i</name><operator pos:start="349:34" pos:end="349:34">*</operator><name pos:start="349:35" pos:end="349:38">xInc</name><operator pos:start="349:39" pos:end="349:39">)</operator><operator pos:start="349:40" pos:end="349:41">&gt;&gt;</operator><literal type="number" pos:start="349:42" pos:end="349:43">16</literal> <operator pos:start="349:45" pos:end="349:46">&gt;=</operator><name pos:start="349:47" pos:end="349:50">srcW</name><operator pos:start="349:51" pos:end="349:51">-</operator><literal type="number" pos:start="349:52" pos:end="349:52">1</literal></expr>;</condition> <incr pos:start="349:55" pos:end="349:57"><expr pos:start="349:55" pos:end="349:57"><name pos:start="349:55" pos:end="349:55">i</name><operator pos:start="349:56" pos:end="349:57">--</operator></expr></incr>)</control>

            <block pos:start="351:13" pos:end="359:13">{<block_content pos:start="355:17" pos:end="357:47">

                <comment type="line" pos:start="353:17" pos:end="353:58">//printf("%d %d %d\n", dstWidth, i, srcW);</comment>

                <expr_stmt pos:start="355:17" pos:end="355:42"><expr pos:start="355:17" pos:end="355:41"><name pos:start="355:17" pos:end="355:22"><name pos:start="355:17" pos:end="355:19">dst</name><index pos:start="355:20" pos:end="355:22">[<expr pos:start="355:21" pos:end="355:21"><name pos:start="355:21" pos:end="355:21">i</name></expr>]</index></name> <operator pos:start="355:24" pos:end="355:24">=</operator> <name pos:start="355:26" pos:end="355:37"><name pos:start="355:26" pos:end="355:29">src1</name><index pos:start="355:30" pos:end="355:37">[<expr pos:start="355:31" pos:end="355:36"><name pos:start="355:31" pos:end="355:34">srcW</name><operator pos:start="355:35" pos:end="355:35">-</operator><literal type="number" pos:start="355:36" pos:end="355:36">1</literal></expr>]</index></name><operator pos:start="355:38" pos:end="355:38">*</operator><literal type="number" pos:start="355:39" pos:end="355:41">128</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="357:47"><expr pos:start="357:17" pos:end="357:46"><name pos:start="357:17" pos:end="357:27"><name pos:start="357:17" pos:end="357:19">dst</name><index pos:start="357:20" pos:end="357:27">[<expr pos:start="357:21" pos:end="357:26"><name pos:start="357:21" pos:end="357:21">i</name><operator pos:start="357:22" pos:end="357:22">+</operator><name pos:start="357:23" pos:end="357:26">VOFW</name></expr>]</index></name> <operator pos:start="357:29" pos:end="357:29">=</operator> <name pos:start="357:31" pos:end="357:42"><name pos:start="357:31" pos:end="357:34">src2</name><index pos:start="357:35" pos:end="357:42">[<expr pos:start="357:36" pos:end="357:41"><name pos:start="357:36" pos:end="357:39">srcW</name><operator pos:start="357:40" pos:end="357:40">-</operator><literal type="number" pos:start="357:41" pos:end="357:41">1</literal></expr>]</index></name><operator pos:start="357:43" pos:end="357:43">*</operator><literal type="number" pos:start="357:44" pos:end="357:46">128</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <else pos:start="363:9" pos:end="466:0">else

        <block pos:start="365:9" pos:end="466:0">{<block_content pos:start="369:13" pos:end="460:0">

<cpp:endif pos:start="367:1" pos:end="367:6">#<cpp:directive pos:start="367:2" pos:end="367:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="367:8" pos:end="367:22">/* HAVE_MMX2 */</comment>

            <decl_stmt pos:start="369:13" pos:end="369:50"><decl pos:start="369:13" pos:end="369:49"><type pos:start="369:13" pos:end="369:16"><name pos:start="369:13" pos:end="369:16">long</name></type> <name pos:start="369:18" pos:end="369:27">xInc_shr16</name> <init pos:start="369:29" pos:end="369:49">= <expr pos:start="369:31" pos:end="369:49"><operator pos:start="369:31" pos:end="369:31">(</operator><name pos:start="369:32" pos:end="369:35">long</name><operator pos:start="369:36" pos:end="369:36">)</operator> <operator pos:start="369:38" pos:end="369:38">(</operator><name pos:start="369:39" pos:end="369:42">xInc</name> <operator pos:start="369:44" pos:end="369:45">&gt;&gt;</operator> <literal type="number" pos:start="369:47" pos:end="369:48">16</literal><operator pos:start="369:49" pos:end="369:49">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="371:13" pos:end="371:47"><decl pos:start="371:13" pos:end="371:46"><type pos:start="371:13" pos:end="371:20"><name pos:start="371:13" pos:end="371:20">uint16_t</name></type> <name pos:start="371:22" pos:end="371:30">xInc_mask</name> <init pos:start="371:32" pos:end="371:46">= <expr pos:start="371:34" pos:end="371:46"><name pos:start="371:34" pos:end="371:37">xInc</name> <operator pos:start="371:39" pos:end="371:39">&amp;</operator> <literal type="number" pos:start="371:41" pos:end="371:46">0xffff</literal></expr></init></decl>;</decl_stmt>

            <asm pos:start="373:13" pos:end="460:0">asm <specifier pos:start="373:17" pos:end="373:24">volatile</specifier>(

            "xor %%"REG_a", %%"REG_a"               \n\t" <comment type="line" pos:start="375:59" pos:end="375:62">// i</comment>

            "xor %%"REG_d", %%"REG_d"               \n\t" <comment type="line" pos:start="377:59" pos:end="377:63">// xx</comment>

            "xorl    %%ecx, %%ecx                   \n\t" <comment type="line" pos:start="379:59" pos:end="379:69">// 2*xalpha</comment>

            ASMALIGN(4)

            "1:                                     \n\t"

            "mov        %0, %%"REG_S"               \n\t"

            "movzbl  (%%"REG_S", %%"REG_d"), %%edi  \n\t" <comment type="line" pos:start="387:59" pos:end="387:67">//src[xx]</comment>

            "movzbl 1(%%"REG_S", %%"REG_d"), %%esi  \n\t" <comment type="line" pos:start="389:59" pos:end="389:69">//src[xx+1]</comment>

            "subl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="391:59" pos:end="391:79">//src[xx+1] - src[xx]</comment>

            "imull   %%ecx, %%esi                   \n\t" <comment type="line" pos:start="393:59" pos:end="393:90">//(src[xx+1] - src[xx])*2*xalpha</comment>

            "shll      $16, %%edi                   \n\t"

            "addl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="397:59" pos:end="397:101">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

            "mov        %1, %%"REG_D"               \n\t"

            "shrl       $9, %%esi                   \n\t"

            "movw     %%si, (%%"REG_D", %%"REG_a", 2)   \n\t"



            "movzbl    (%5, %%"REG_d"), %%edi       \n\t" <comment type="line" pos:start="407:59" pos:end="407:67">//src[xx]</comment>

            "movzbl   1(%5, %%"REG_d"), %%esi       \n\t" <comment type="line" pos:start="409:59" pos:end="409:69">//src[xx+1]</comment>

            "subl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="411:59" pos:end="411:79">//src[xx+1] - src[xx]</comment>

            "imull   %%ecx, %%esi                   \n\t" <comment type="line" pos:start="413:59" pos:end="413:90">//(src[xx+1] - src[xx])*2*xalpha</comment>

            "shll      $16, %%edi                   \n\t"

            "addl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="417:59" pos:end="417:101">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

            "mov        %1, %%"REG_D"               \n\t"

            "shrl       $9, %%esi                   \n\t"

            "movw     %%si, "AV_STRINGIFY(VOF)"(%%"REG_D", %%"REG_a", 2)   \n\t"



            "addw       %4, %%cx                    \n\t" <comment type="line" pos:start="427:59" pos:end="427:81">//2*xalpha += xInc&amp;0xFF</comment>

            "adc        %3, %%"REG_d"               \n\t" <comment type="line" pos:start="429:59" pos:end="429:80">//xx+= xInc&gt;&gt;8 + carry</comment>

            "add        $1, %%"REG_a"               \n\t"

            "cmp        %2, %%"REG_a"               \n\t"

            " jb        1b                          \n\t"



<comment type="block" pos:start="439:1" pos:end="441:41">/* GCC 3.3 makes MPlayer crash on IA-32 machines when using "g" operand here,

   which is needed to support GCC 4.0. */</comment>

<cpp:if pos:start="443:1" pos:end="443:86">#<cpp:directive pos:start="443:2" pos:end="443:3">if</cpp:directive> <expr pos:start="443:5" pos:end="443:86"><call pos:start="443:5" pos:end="443:24"><name pos:start="443:5" pos:end="443:11">defined</name><argument_list pos:start="443:12" pos:end="443:24">(<argument pos:start="443:13" pos:end="443:23"><expr pos:start="443:13" pos:end="443:23"><name pos:start="443:13" pos:end="443:23">ARCH_X86_64</name></expr></argument>)</argument_list></call> <operator pos:start="443:26" pos:end="443:27">&amp;&amp;</operator> <operator pos:start="443:29" pos:end="443:29">(</operator><operator pos:start="443:30" pos:end="443:30">(</operator><name pos:start="443:31" pos:end="443:38">__GNUC__</name> <operator pos:start="443:40" pos:end="443:40">&gt;</operator> <literal type="number" pos:start="443:42" pos:end="443:42">3</literal><operator pos:start="443:43" pos:end="443:43">)</operator> <operator pos:start="443:45" pos:end="443:46">||</operator> <operator pos:start="443:48" pos:end="443:48">(</operator><name pos:start="443:49" pos:end="443:56">__GNUC__</name> <operator pos:start="443:58" pos:end="443:59">==</operator> <literal type="number" pos:start="443:61" pos:end="443:61">3</literal> <operator pos:start="443:63" pos:end="443:64">&amp;&amp;</operator> <name pos:start="443:66" pos:end="443:79">__GNUC_MINOR__</name> <operator pos:start="443:81" pos:end="443:82">&gt;=</operator> <literal type="number" pos:start="443:84" pos:end="443:84">4</literal><operator pos:start="443:85" pos:end="443:85">)</operator><operator pos:start="443:86" pos:end="443:86">)</operator></expr></cpp:if>

            :: "m" (src1), "m" (dst), "g" ((long)dstWidth), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:else pos:start="447:1" pos:end="447:5">#<cpp:directive pos:start="447:2" pos:end="447:5">else</cpp:directive></cpp:else>

            :: "m" (src1), "m" (dst), "m" ((long)dstWidth), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:endif pos:start="451:1" pos:end="451:6">#<cpp:directive pos:start="451:2" pos:end="451:6">endif</cpp:directive></cpp:endif>

            "r" (src2)

            : "%"REG_a, "%"REG_d, "%ecx", "%"REG_D, "%esi"

            );</asm>

<cpp:ifdef pos:start="459:1" pos:end="459:16">#<cpp:directive pos:start="459:2" pos:end="459:6">ifdef</cpp:directive> <name pos:start="459:8" pos:end="459:16">HAVE_MMX2</name></cpp:ifdef>

        </block_content>}</block></else></if_stmt> <comment type="line" pos:start="461:11" pos:end="461:33">//if MMX2 can't be used</comment>

<cpp:endif pos:start="463:1" pos:end="463:6">#<cpp:directive pos:start="463:2" pos:end="463:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="465:1" pos:end="465:5">#<cpp:directive pos:start="465:2" pos:end="465:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="467:9" pos:end="467:14"><decl pos:start="467:9" pos:end="467:13"><type pos:start="467:9" pos:end="467:11"><name pos:start="467:9" pos:end="467:11">int</name></type> <name pos:start="467:13" pos:end="467:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="469:9" pos:end="469:28"><decl pos:start="469:9" pos:end="469:27"><type pos:start="469:9" pos:end="469:20"><name pos:start="469:9" pos:end="469:16">unsigned</name> <name pos:start="469:18" pos:end="469:20">int</name></type> <name pos:start="469:22" pos:end="469:25">xpos</name><init pos:start="469:26" pos:end="469:27">=<expr pos:start="469:27" pos:end="469:27"><literal type="number" pos:start="469:27" pos:end="469:27">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="471:9" pos:end="496:0">for <control pos:start="471:13" pos:end="471:32">(<init pos:start="471:14" pos:end="471:17"><expr pos:start="471:14" pos:end="471:16"><name pos:start="471:14" pos:end="471:14">i</name><operator pos:start="471:15" pos:end="471:15">=</operator><literal type="number" pos:start="471:16" pos:end="471:16">0</literal></expr>;</init><condition pos:start="471:18" pos:end="471:28"><expr pos:start="471:18" pos:end="471:27"><name pos:start="471:18" pos:end="471:18">i</name><operator pos:start="471:19" pos:end="471:19">&lt;</operator><name pos:start="471:20" pos:end="471:27">dstWidth</name></expr>;</condition><incr pos:start="471:29" pos:end="471:31"><expr pos:start="471:29" pos:end="471:31"><name pos:start="471:29" pos:end="471:29">i</name><operator pos:start="471:30" pos:end="471:31">++</operator></expr></incr>)</control>

        <block pos:start="473:9" pos:end="496:0">{<block_content pos:start="475:13" pos:end="491:23">

            <decl_stmt pos:start="475:13" pos:end="475:46"><decl pos:start="475:13" pos:end="475:45"><type pos:start="475:13" pos:end="475:33"><specifier pos:start="475:13" pos:end="475:20">register</specifier> <name pos:start="475:22" pos:end="475:29">unsigned</name> <name pos:start="475:31" pos:end="475:33">int</name></type> <name pos:start="475:35" pos:end="475:36">xx</name><init pos:start="475:37" pos:end="475:45">=<expr pos:start="475:38" pos:end="475:45"><name pos:start="475:38" pos:end="475:41">xpos</name><operator pos:start="475:42" pos:end="475:43">&gt;&gt;</operator><literal type="number" pos:start="475:44" pos:end="475:45">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="477:13" pos:end="477:58"><decl pos:start="477:13" pos:end="477:57"><type pos:start="477:13" pos:end="477:33"><specifier pos:start="477:13" pos:end="477:20">register</specifier> <name pos:start="477:22" pos:end="477:29">unsigned</name> <name pos:start="477:31" pos:end="477:33">int</name></type> <name pos:start="477:35" pos:end="477:40">xalpha</name><init pos:start="477:41" pos:end="477:57">=<expr pos:start="477:42" pos:end="477:57"><operator pos:start="477:42" pos:end="477:42">(</operator><name pos:start="477:43" pos:end="477:46">xpos</name><operator pos:start="477:47" pos:end="477:47">&amp;</operator><literal type="number" pos:start="477:48" pos:end="477:53">0xFFFF</literal><operator pos:start="477:54" pos:end="477:54">)</operator><operator pos:start="477:55" pos:end="477:56">&gt;&gt;</operator><literal type="number" pos:start="477:57" pos:end="477:57">9</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="479:13" pos:end="479:61"><expr pos:start="479:13" pos:end="479:60"><name pos:start="479:13" pos:end="479:18"><name pos:start="479:13" pos:end="479:15">dst</name><index pos:start="479:16" pos:end="479:18">[<expr pos:start="479:17" pos:end="479:17"><name pos:start="479:17" pos:end="479:17">i</name></expr>]</index></name><operator pos:start="479:19" pos:end="479:19">=</operator><operator pos:start="479:20" pos:end="479:20">(</operator><name pos:start="479:21" pos:end="479:28"><name pos:start="479:21" pos:end="479:24">src1</name><index pos:start="479:25" pos:end="479:28">[<expr pos:start="479:26" pos:end="479:27"><name pos:start="479:26" pos:end="479:27">xx</name></expr>]</index></name><operator pos:start="479:29" pos:end="479:29">*</operator><operator pos:start="479:30" pos:end="479:30">(</operator><name pos:start="479:31" pos:end="479:36">xalpha</name><operator pos:start="479:37" pos:end="479:37">^</operator><literal type="number" pos:start="479:38" pos:end="479:40">127</literal><operator pos:start="479:41" pos:end="479:41">)</operator><operator pos:start="479:42" pos:end="479:42">+</operator><name pos:start="479:43" pos:end="479:52"><name pos:start="479:43" pos:end="479:46">src1</name><index pos:start="479:47" pos:end="479:52">[<expr pos:start="479:48" pos:end="479:51"><name pos:start="479:48" pos:end="479:49">xx</name><operator pos:start="479:50" pos:end="479:50">+</operator><literal type="number" pos:start="479:51" pos:end="479:51">1</literal></expr>]</index></name><operator pos:start="479:53" pos:end="479:53">*</operator><name pos:start="479:54" pos:end="479:59">xalpha</name><operator pos:start="479:60" pos:end="479:60">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:66"><expr pos:start="481:13" pos:end="481:65"><name pos:start="481:13" pos:end="481:23"><name pos:start="481:13" pos:end="481:15">dst</name><index pos:start="481:16" pos:end="481:23">[<expr pos:start="481:17" pos:end="481:22"><name pos:start="481:17" pos:end="481:17">i</name><operator pos:start="481:18" pos:end="481:18">+</operator><name pos:start="481:19" pos:end="481:22">VOFW</name></expr>]</index></name><operator pos:start="481:24" pos:end="481:24">=</operator><operator pos:start="481:25" pos:end="481:25">(</operator><name pos:start="481:26" pos:end="481:33"><name pos:start="481:26" pos:end="481:29">src2</name><index pos:start="481:30" pos:end="481:33">[<expr pos:start="481:31" pos:end="481:32"><name pos:start="481:31" pos:end="481:32">xx</name></expr>]</index></name><operator pos:start="481:34" pos:end="481:34">*</operator><operator pos:start="481:35" pos:end="481:35">(</operator><name pos:start="481:36" pos:end="481:41">xalpha</name><operator pos:start="481:42" pos:end="481:42">^</operator><literal type="number" pos:start="481:43" pos:end="481:45">127</literal><operator pos:start="481:46" pos:end="481:46">)</operator><operator pos:start="481:47" pos:end="481:47">+</operator><name pos:start="481:48" pos:end="481:57"><name pos:start="481:48" pos:end="481:51">src2</name><index pos:start="481:52" pos:end="481:57">[<expr pos:start="481:53" pos:end="481:56"><name pos:start="481:53" pos:end="481:54">xx</name><operator pos:start="481:55" pos:end="481:55">+</operator><literal type="number" pos:start="481:56" pos:end="481:56">1</literal></expr>]</index></name><operator pos:start="481:58" pos:end="481:58">*</operator><name pos:start="481:59" pos:end="481:64">xalpha</name><operator pos:start="481:65" pos:end="481:65">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="483:13" pos:end="489:14">/* slower

            dst[i]= (src1[xx]&lt;&lt;7) + (src1[xx+1] - src1[xx])*xalpha;

            dst[i+VOFW]=(src2[xx]&lt;&lt;7) + (src2[xx+1] - src2[xx])*xalpha;

            */</comment>

            <expr_stmt pos:start="491:13" pos:end="491:23"><expr pos:start="491:13" pos:end="491:22"><name pos:start="491:13" pos:end="491:16">xpos</name><operator pos:start="491:17" pos:end="491:18">+=</operator><name pos:start="491:19" pos:end="491:22">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:endif pos:start="495:1" pos:end="495:6">#<cpp:directive pos:start="495:2" pos:end="495:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="495:8" pos:end="495:30">/* defined(ARCH_X86) */</comment>

    </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="499:5" pos:end="529:5"><if pos:start="499:5" pos:end="529:5">if<condition pos:start="499:7" pos:end="499:83">(<expr pos:start="499:8" pos:end="499:82"><name pos:start="499:8" pos:end="499:18"><name pos:start="499:8" pos:end="499:8">c</name><operator pos:start="499:9" pos:end="499:10">-&gt;</operator><name pos:start="499:11" pos:end="499:18">srcRange</name></name> <operator pos:start="499:20" pos:end="499:21">!=</operator> <name pos:start="499:23" pos:end="499:33"><name pos:start="499:23" pos:end="499:23">c</name><operator pos:start="499:24" pos:end="499:25">-&gt;</operator><name pos:start="499:26" pos:end="499:33">dstRange</name></name> <operator pos:start="499:35" pos:end="499:36">&amp;&amp;</operator> <operator pos:start="499:38" pos:end="499:38">!</operator><operator pos:start="499:39" pos:end="499:39">(</operator><call pos:start="499:40" pos:end="499:58"><name pos:start="499:40" pos:end="499:44">isRGB</name><argument_list pos:start="499:45" pos:end="499:58">(<argument pos:start="499:46" pos:end="499:57"><expr pos:start="499:46" pos:end="499:57"><name pos:start="499:46" pos:end="499:57"><name pos:start="499:46" pos:end="499:46">c</name><operator pos:start="499:47" pos:end="499:48">-&gt;</operator><name pos:start="499:49" pos:end="499:57">dstFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="499:60" pos:end="499:61">||</operator> <call pos:start="499:63" pos:end="499:81"><name pos:start="499:63" pos:end="499:67">isBGR</name><argument_list pos:start="499:68" pos:end="499:81">(<argument pos:start="499:69" pos:end="499:80"><expr pos:start="499:69" pos:end="499:80"><name pos:start="499:69" pos:end="499:80"><name pos:start="499:69" pos:end="499:69">c</name><operator pos:start="499:70" pos:end="499:71">-&gt;</operator><name pos:start="499:72" pos:end="499:80">dstFormat</name></name></expr></argument>)</argument_list></call><operator pos:start="499:82" pos:end="499:82">)</operator></expr>)</condition><block pos:start="499:84" pos:end="529:5">{<block_content pos:start="501:9" pos:end="527:9">

        <decl_stmt pos:start="501:9" pos:end="501:14"><decl pos:start="501:9" pos:end="501:13"><type pos:start="501:9" pos:end="501:11"><name pos:start="501:9" pos:end="501:11">int</name></type> <name pos:start="501:13" pos:end="501:13">i</name></decl>;</decl_stmt>

        <comment type="line" pos:start="503:9" pos:end="503:75">//FIXME all pal and rgb srcFormats could do this convertion as well</comment>

        <comment type="line" pos:start="505:9" pos:end="505:86">//FIXME all scalers more complex than bilinear could do half of this transform</comment>

        <if_stmt pos:start="507:9" pos:end="527:9"><if pos:start="507:9" pos:end="517:9">if<condition pos:start="507:11" pos:end="507:23">(<expr pos:start="507:12" pos:end="507:22"><name pos:start="507:12" pos:end="507:22"><name pos:start="507:12" pos:end="507:12">c</name><operator pos:start="507:13" pos:end="507:14">-&gt;</operator><name pos:start="507:15" pos:end="507:22">srcRange</name></name></expr>)</condition><block pos:start="507:24" pos:end="517:9">{<block_content pos:start="509:13" pos:end="515:13">

            <for pos:start="509:13" pos:end="515:13">for <control pos:start="509:17" pos:end="509:38">(<init pos:start="509:18" pos:end="509:21"><expr pos:start="509:18" pos:end="509:20"><name pos:start="509:18" pos:end="509:18">i</name><operator pos:start="509:19" pos:end="509:19">=</operator><literal type="number" pos:start="509:20" pos:end="509:20">0</literal></expr>;</init> <condition pos:start="509:23" pos:end="509:33"><expr pos:start="509:23" pos:end="509:32"><name pos:start="509:23" pos:end="509:23">i</name><operator pos:start="509:24" pos:end="509:24">&lt;</operator><name pos:start="509:25" pos:end="509:32">dstWidth</name></expr>;</condition> <incr pos:start="509:35" pos:end="509:37"><expr pos:start="509:35" pos:end="509:37"><name pos:start="509:35" pos:end="509:35">i</name><operator pos:start="509:36" pos:end="509:37">++</operator></expr></incr>)</control><block pos:start="509:39" pos:end="515:13">{<block_content pos:start="511:17" pos:end="513:62">

                <expr_stmt pos:start="511:17" pos:end="511:62"><expr pos:start="511:17" pos:end="511:61"><name pos:start="511:17" pos:end="511:27"><name pos:start="511:17" pos:end="511:19">dst</name><index pos:start="511:20" pos:end="511:27">[<expr pos:start="511:21" pos:end="511:21"><name pos:start="511:21" pos:end="511:21">i</name></expr>     ]</index></name><operator pos:start="511:28" pos:end="511:28">=</operator> <operator pos:start="511:30" pos:end="511:30">(</operator><name pos:start="511:31" pos:end="511:41"><name pos:start="511:31" pos:end="511:33">dst</name><index pos:start="511:34" pos:end="511:41">[<expr pos:start="511:35" pos:end="511:35"><name pos:start="511:35" pos:end="511:35">i</name></expr>     ]</index></name><operator pos:start="511:42" pos:end="511:42">*</operator><literal type="number" pos:start="511:43" pos:end="511:48">1799</literal> <operator pos:start="511:48" pos:end="511:48">+</operator> <literal type="number" pos:start="511:50" pos:end="511:56">4081085</literal><operator pos:start="511:57" pos:end="511:57">)</operator><operator pos:start="511:58" pos:end="511:59">&gt;&gt;</operator><literal type="number" pos:start="511:60" pos:end="511:61">11</literal></expr>;</expr_stmt> <comment type="line" pos:start="511:64" pos:end="511:69">//1469</comment>

                <expr_stmt pos:start="513:17" pos:end="513:62"><expr pos:start="513:17" pos:end="513:61"><name pos:start="513:17" pos:end="513:27"><name pos:start="513:17" pos:end="513:19">dst</name><index pos:start="513:20" pos:end="513:27">[<expr pos:start="513:21" pos:end="513:26"><name pos:start="513:21" pos:end="513:21">i</name><operator pos:start="513:22" pos:end="513:22">+</operator><name pos:start="513:23" pos:end="513:26">VOFW</name></expr>]</index></name><operator pos:start="513:28" pos:end="513:28">=</operator> <operator pos:start="513:30" pos:end="513:30">(</operator><name pos:start="513:31" pos:end="513:41"><name pos:start="513:31" pos:end="513:33">dst</name><index pos:start="513:34" pos:end="513:41">[<expr pos:start="513:35" pos:end="513:40"><name pos:start="513:35" pos:end="513:35">i</name><operator pos:start="513:36" pos:end="513:36">+</operator><name pos:start="513:37" pos:end="513:40">VOFW</name></expr>]</index></name><operator pos:start="513:42" pos:end="513:42">*</operator><literal type="number" pos:start="513:43" pos:end="513:48">1799</literal> <operator pos:start="513:48" pos:end="513:48">+</operator> <literal type="number" pos:start="513:50" pos:end="513:56">4081085</literal><operator pos:start="513:57" pos:end="513:57">)</operator><operator pos:start="513:58" pos:end="513:59">&gt;&gt;</operator><literal type="number" pos:start="513:60" pos:end="513:61">11</literal></expr>;</expr_stmt> <comment type="line" pos:start="513:64" pos:end="513:69">//1469</comment>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="517:10" pos:end="527:9">else<block pos:start="517:14" pos:end="527:9">{<block_content pos:start="519:13" pos:end="525:13">

            <for pos:start="519:13" pos:end="525:13">for <control pos:start="519:17" pos:end="519:38">(<init pos:start="519:18" pos:end="519:21"><expr pos:start="519:18" pos:end="519:20"><name pos:start="519:18" pos:end="519:18">i</name><operator pos:start="519:19" pos:end="519:19">=</operator><literal type="number" pos:start="519:20" pos:end="519:20">0</literal></expr>;</init> <condition pos:start="519:23" pos:end="519:33"><expr pos:start="519:23" pos:end="519:32"><name pos:start="519:23" pos:end="519:23">i</name><operator pos:start="519:24" pos:end="519:24">&lt;</operator><name pos:start="519:25" pos:end="519:32">dstWidth</name></expr>;</condition> <incr pos:start="519:35" pos:end="519:37"><expr pos:start="519:35" pos:end="519:37"><name pos:start="519:35" pos:end="519:35">i</name><operator pos:start="519:36" pos:end="519:37">++</operator></expr></incr>)</control><block pos:start="519:39" pos:end="525:13">{<block_content pos:start="521:17" pos:end="523:62">

                <expr_stmt pos:start="521:17" pos:end="521:62"><expr pos:start="521:17" pos:end="521:61"><name pos:start="521:17" pos:end="521:27"><name pos:start="521:17" pos:end="521:19">dst</name><index pos:start="521:20" pos:end="521:27">[<expr pos:start="521:21" pos:end="521:21"><name pos:start="521:21" pos:end="521:21">i</name></expr>     ]</index></name><operator pos:start="521:28" pos:end="521:28">=</operator> <operator pos:start="521:30" pos:end="521:30">(</operator><name pos:start="521:31" pos:end="521:41"><name pos:start="521:31" pos:end="521:33">dst</name><index pos:start="521:34" pos:end="521:41">[<expr pos:start="521:35" pos:end="521:35"><name pos:start="521:35" pos:end="521:35">i</name></expr>     ]</index></name><operator pos:start="521:42" pos:end="521:42">*</operator><literal type="number" pos:start="521:43" pos:end="521:48">4663</literal> <operator pos:start="521:48" pos:end="521:48">-</operator> <literal type="number" pos:start="521:50" pos:end="521:56">9289992</literal><operator pos:start="521:57" pos:end="521:57">)</operator><operator pos:start="521:58" pos:end="521:59">&gt;&gt;</operator><literal type="number" pos:start="521:60" pos:end="521:61">12</literal></expr>;</expr_stmt> <comment type="line" pos:start="521:64" pos:end="521:69">//-264</comment>

                <expr_stmt pos:start="523:17" pos:end="523:62"><expr pos:start="523:17" pos:end="523:61"><name pos:start="523:17" pos:end="523:27"><name pos:start="523:17" pos:end="523:19">dst</name><index pos:start="523:20" pos:end="523:27">[<expr pos:start="523:21" pos:end="523:26"><name pos:start="523:21" pos:end="523:21">i</name><operator pos:start="523:22" pos:end="523:22">+</operator><name pos:start="523:23" pos:end="523:26">VOFW</name></expr>]</index></name><operator pos:start="523:28" pos:end="523:28">=</operator> <operator pos:start="523:30" pos:end="523:30">(</operator><name pos:start="523:31" pos:end="523:41"><name pos:start="523:31" pos:end="523:33">dst</name><index pos:start="523:34" pos:end="523:41">[<expr pos:start="523:35" pos:end="523:40"><name pos:start="523:35" pos:end="523:35">i</name><operator pos:start="523:36" pos:end="523:36">+</operator><name pos:start="523:37" pos:end="523:40">VOFW</name></expr>]</index></name><operator pos:start="523:42" pos:end="523:42">*</operator><literal type="number" pos:start="523:43" pos:end="523:48">4663</literal> <operator pos:start="523:48" pos:end="523:48">-</operator> <literal type="number" pos:start="523:50" pos:end="523:56">9289992</literal><operator pos:start="523:57" pos:end="523:57">)</operator><operator pos:start="523:58" pos:end="523:59">&gt;&gt;</operator><literal type="number" pos:start="523:60" pos:end="523:61">12</literal></expr>;</expr_stmt> <comment type="line" pos:start="523:64" pos:end="523:69">//-264</comment>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
