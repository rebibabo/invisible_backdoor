<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/277.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:12">void</name></type> <name pos:start="1:14" pos:end="1:32">ff_dsputil_init_x86</name><parameter_list pos:start="1:33" pos:end="1:70">(<parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:43">DSPContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">c</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:69"><decl pos:start="1:49" pos:end="1:69"><type pos:start="1:49" pos:end="1:69"><name pos:start="1:49" pos:end="1:62">AVCodecContext</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:41">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">cpu_flags</name> <init pos:start="5:19" pos:end="5:38">= <expr pos:start="5:21" pos:end="5:38"><call pos:start="5:21" pos:end="5:38"><name pos:start="5:21" pos:end="5:36">av_get_cpu_flags</name><argument_list pos:start="5:37" pos:end="5:38">()</argument_list></call></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="9:1" pos:end="9:33">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:33"><name pos:start="9:5" pos:end="9:14">HAVE_7REGS</name> <operator pos:start="9:16" pos:end="9:17">&amp;&amp;</operator> <name pos:start="9:19" pos:end="9:33">HAVE_INLINE_ASM</name></expr></cpp:if>

    <if_stmt pos:start="11:5" pos:end="16:0"><if pos:start="11:5" pos:end="16:0">if <condition pos:start="11:8" pos:end="11:49">(<expr pos:start="11:9" pos:end="11:48"><name pos:start="11:9" pos:end="11:16">HAVE_MMX</name> <operator pos:start="11:18" pos:end="11:19">&amp;&amp;</operator> <name pos:start="11:21" pos:end="11:29">cpu_flags</name> <operator pos:start="11:31" pos:end="11:31">&amp;</operator> <name pos:start="11:33" pos:end="11:48">AV_CPU_FLAG_CMOV</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="16:0"><block_content pos:start="13:9" pos:end="16:0">

        <expr_stmt pos:start="13:9" pos:end="16:0"><expr pos:start="13:9" pos:end="13:74"><name pos:start="13:9" pos:end="13:37"><name pos:start="13:9" pos:end="13:9">c</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:37">add_hfyu_median_prediction</name></name> <operator pos:start="13:39" pos:end="13:39">=</operator> <name pos:start="13:41" pos:end="13:74">ff_add_hfyu_median_prediction_cmov</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="19:5" pos:end="79:5"><if pos:start="19:5" pos:end="79:5">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><call pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:15">X86_MMX</name><argument_list pos:start="19:16" pos:end="19:26">(<argument pos:start="19:17" pos:end="19:25"><expr pos:start="19:17" pos:end="19:25"><name pos:start="19:17" pos:end="19:25">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:29" pos:end="79:5">{<block_content pos:start="23:9" pos:end="77:46">

<cpp:if pos:start="21:1" pos:end="21:19">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:19">HAVE_INLINE_ASM</name></expr></cpp:if>

        <decl_stmt pos:start="23:9" pos:end="23:47"><decl pos:start="23:9" pos:end="23:46"><type pos:start="23:9" pos:end="23:17"><specifier pos:start="23:9" pos:end="23:13">const</specifier> <name pos:start="23:15" pos:end="23:17">int</name></type> <name pos:start="23:19" pos:end="23:27">idct_algo</name> <init pos:start="23:29" pos:end="23:46">= <expr pos:start="23:31" pos:end="23:46"><name pos:start="23:31" pos:end="23:46"><name pos:start="23:31" pos:end="23:35">avctx</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:46">idct_algo</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="27:9" pos:end="74:0"><if pos:start="27:9" pos:end="74:0">if <condition pos:start="27:12" pos:end="27:66">(<expr pos:start="27:13" pos:end="27:65"><name pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:17">avctx</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:25">lowres</name></name> <operator pos:start="27:27" pos:end="27:28">==</operator> <literal type="number" pos:start="27:30" pos:end="27:30">0</literal> <operator pos:start="27:32" pos:end="27:33">&amp;&amp;</operator> <name pos:start="27:35" pos:end="27:60"><name pos:start="27:35" pos:end="27:39">avctx</name><operator pos:start="27:40" pos:end="27:41">-&gt;</operator><name pos:start="27:42" pos:end="27:60">bits_per_raw_sample</name></name> <operator pos:start="27:62" pos:end="27:63">&lt;=</operator> <literal type="number" pos:start="27:65" pos:end="27:65">8</literal></expr>)</condition> <block pos:start="27:68" pos:end="74:0">{<block_content pos:start="29:13" pos:end="69:13">

            <if_stmt pos:start="29:13" pos:end="69:13"><if pos:start="29:13" pos:end="39:13">if <condition pos:start="29:16" pos:end="29:76">(<expr pos:start="29:17" pos:end="29:75"><name pos:start="29:17" pos:end="29:25">idct_algo</name> <operator pos:start="29:27" pos:end="29:28">==</operator> <name pos:start="29:30" pos:end="29:41">FF_IDCT_AUTO</name> <operator pos:start="29:43" pos:end="29:44">||</operator> <name pos:start="29:46" pos:end="29:54">idct_algo</name> <operator pos:start="29:56" pos:end="29:57">==</operator> <name pos:start="29:59" pos:end="29:75">FF_IDCT_SIMPLEMMX</name></expr>)</condition> <block pos:start="29:78" pos:end="39:13">{<block_content pos:start="31:17" pos:end="37:63">

                <expr_stmt pos:start="31:17" pos:end="31:66"><expr pos:start="31:17" pos:end="31:65"><name pos:start="31:17" pos:end="31:27"><name pos:start="31:17" pos:end="31:17">c</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:27">idct_put</name></name>              <operator pos:start="31:42" pos:end="31:42">=</operator> <name pos:start="31:44" pos:end="31:65">ff_simple_idct_put_mmx</name></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:66"><expr pos:start="33:17" pos:end="33:65"><name pos:start="33:17" pos:end="33:27"><name pos:start="33:17" pos:end="33:17">c</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:27">idct_add</name></name>              <operator pos:start="33:42" pos:end="33:42">=</operator> <name pos:start="33:44" pos:end="33:65">ff_simple_idct_add_mmx</name></expr>;</expr_stmt>

                <expr_stmt pos:start="35:17" pos:end="35:62"><expr pos:start="35:17" pos:end="35:61"><name pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:17">c</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:23">idct</name></name>                  <operator pos:start="35:42" pos:end="35:42">=</operator> <name pos:start="35:44" pos:end="35:61">ff_simple_idct_mmx</name></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:63"><expr pos:start="37:17" pos:end="37:62"><name pos:start="37:17" pos:end="37:40"><name pos:start="37:17" pos:end="37:17">c</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:40">idct_permutation_type</name></name> <operator pos:start="37:42" pos:end="37:42">=</operator> <name pos:start="37:44" pos:end="37:62">FF_SIMPLE_IDCT_PERM</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="39:15" pos:end="69:13">else if <condition pos:start="39:23" pos:end="39:52">(<expr pos:start="39:24" pos:end="39:51"><name pos:start="39:24" pos:end="39:32">idct_algo</name> <operator pos:start="39:34" pos:end="39:35">==</operator> <name pos:start="39:37" pos:end="39:51">FF_IDCT_XVIDMMX</name></expr>)</condition> <block pos:start="39:54" pos:end="69:13">{<block_content pos:start="41:17" pos:end="67:17">

                <if_stmt pos:start="41:17" pos:end="67:17"><if pos:start="41:17" pos:end="51:17">if <condition pos:start="41:20" pos:end="41:49">(<expr pos:start="41:21" pos:end="41:48"><name pos:start="41:21" pos:end="41:29">cpu_flags</name> <operator pos:start="41:31" pos:end="41:31">&amp;</operator> <name pos:start="41:33" pos:end="41:48">AV_CPU_FLAG_SSE2</name></expr>)</condition> <block pos:start="41:51" pos:end="51:17">{<block_content pos:start="43:21" pos:end="49:65">

                    <expr_stmt pos:start="43:21" pos:end="43:69"><expr pos:start="43:21" pos:end="43:68"><name pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:21">c</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:31">idct_put</name></name>              <operator pos:start="43:46" pos:end="43:46">=</operator> <name pos:start="43:48" pos:end="43:68">ff_idct_xvid_sse2_put</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="45:21" pos:end="45:69"><expr pos:start="45:21" pos:end="45:68"><name pos:start="45:21" pos:end="45:31"><name pos:start="45:21" pos:end="45:21">c</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:31">idct_add</name></name>              <operator pos:start="45:46" pos:end="45:46">=</operator> <name pos:start="45:48" pos:end="45:68">ff_idct_xvid_sse2_add</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:65"><expr pos:start="47:21" pos:end="47:64"><name pos:start="47:21" pos:end="47:27"><name pos:start="47:21" pos:end="47:21">c</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:27">idct</name></name>                  <operator pos:start="47:46" pos:end="47:46">=</operator> <name pos:start="47:48" pos:end="47:64">ff_idct_xvid_sse2</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:65"><expr pos:start="49:21" pos:end="49:64"><name pos:start="49:21" pos:end="49:44"><name pos:start="49:21" pos:end="49:21">c</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:44">idct_permutation_type</name></name> <operator pos:start="49:46" pos:end="49:46">=</operator> <name pos:start="49:48" pos:end="49:64">FF_SSE2_IDCT_PERM</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="51:19" pos:end="59:17">else if <condition pos:start="51:27" pos:end="51:58">(<expr pos:start="51:28" pos:end="51:57"><name pos:start="51:28" pos:end="51:36">cpu_flags</name> <operator pos:start="51:38" pos:end="51:38">&amp;</operator> <name pos:start="51:40" pos:end="51:57">AV_CPU_FLAG_MMXEXT</name></expr>)</condition> <block pos:start="51:60" pos:end="59:17">{<block_content pos:start="53:21" pos:end="57:67">

                    <expr_stmt pos:start="53:21" pos:end="53:71"><expr pos:start="53:21" pos:end="53:70"><name pos:start="53:21" pos:end="53:31"><name pos:start="53:21" pos:end="53:21">c</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:31">idct_put</name></name>              <operator pos:start="53:46" pos:end="53:46">=</operator> <name pos:start="53:48" pos:end="53:70">ff_idct_xvid_mmxext_put</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="55:21" pos:end="55:71"><expr pos:start="55:21" pos:end="55:70"><name pos:start="55:21" pos:end="55:31"><name pos:start="55:21" pos:end="55:21">c</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:31">idct_add</name></name>              <operator pos:start="55:46" pos:end="55:46">=</operator> <name pos:start="55:48" pos:end="55:70">ff_idct_xvid_mmxext_add</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:67"><expr pos:start="57:21" pos:end="57:66"><name pos:start="57:21" pos:end="57:27"><name pos:start="57:21" pos:end="57:21">c</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:27">idct</name></name>                  <operator pos:start="57:46" pos:end="57:46">=</operator> <name pos:start="57:48" pos:end="57:66">ff_idct_xvid_mmxext</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="59:19" pos:end="67:17">else <block pos:start="59:24" pos:end="67:17">{<block_content pos:start="61:21" pos:end="65:64">

                    <expr_stmt pos:start="61:21" pos:end="61:68"><expr pos:start="61:21" pos:end="61:67"><name pos:start="61:21" pos:end="61:31"><name pos:start="61:21" pos:end="61:21">c</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:31">idct_put</name></name>              <operator pos:start="61:46" pos:end="61:46">=</operator> <name pos:start="61:48" pos:end="61:67">ff_idct_xvid_mmx_put</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="63:21" pos:end="63:68"><expr pos:start="63:21" pos:end="63:67"><name pos:start="63:21" pos:end="63:31"><name pos:start="63:21" pos:end="63:21">c</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:31">idct_add</name></name>              <operator pos:start="63:46" pos:end="63:46">=</operator> <name pos:start="63:48" pos:end="63:67">ff_idct_xvid_mmx_add</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="65:21" pos:end="65:64"><expr pos:start="65:21" pos:end="65:63"><name pos:start="65:21" pos:end="65:27"><name pos:start="65:21" pos:end="65:21">c</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:27">idct</name></name>                  <operator pos:start="65:46" pos:end="65:46">=</operator> <name pos:start="65:48" pos:end="65:63">ff_idct_xvid_mmx</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="73:8" pos:end="73:28">/* HAVE_INLINE_ASM */</comment>



        <expr_stmt pos:start="77:9" pos:end="77:46"><expr pos:start="77:9" pos:end="77:45"><call pos:start="77:9" pos:end="77:45"><name pos:start="77:9" pos:end="77:24">dsputil_init_mmx</name><argument_list pos:start="77:25" pos:end="77:45">(<argument pos:start="77:26" pos:end="77:26"><expr pos:start="77:26" pos:end="77:26"><name pos:start="77:26" pos:end="77:26">c</name></expr></argument>, <argument pos:start="77:29" pos:end="77:33"><expr pos:start="77:29" pos:end="77:33"><name pos:start="77:29" pos:end="77:33">avctx</name></expr></argument>, <argument pos:start="77:36" pos:end="77:44"><expr pos:start="77:36" pos:end="77:44"><name pos:start="77:36" pos:end="77:44">cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="85:49"><if pos:start="83:5" pos:end="85:49">if <condition pos:start="83:8" pos:end="83:30">(<expr pos:start="83:9" pos:end="83:29"><call pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:18">X86_MMXEXT</name><argument_list pos:start="83:19" pos:end="83:29">(<argument pos:start="83:20" pos:end="83:28"><expr pos:start="83:20" pos:end="83:28"><name pos:start="83:20" pos:end="83:28">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:49"><block_content pos:start="85:9" pos:end="85:49">

        <expr_stmt pos:start="85:9" pos:end="85:49"><expr pos:start="85:9" pos:end="85:48"><call pos:start="85:9" pos:end="85:48"><name pos:start="85:9" pos:end="85:27">dsputil_init_mmxext</name><argument_list pos:start="85:28" pos:end="85:48">(<argument pos:start="85:29" pos:end="85:29"><expr pos:start="85:29" pos:end="85:29"><name pos:start="85:29" pos:end="85:29">c</name></expr></argument>, <argument pos:start="85:32" pos:end="85:36"><expr pos:start="85:32" pos:end="85:36"><name pos:start="85:32" pos:end="85:36">avctx</name></expr></argument>, <argument pos:start="85:39" pos:end="85:47"><expr pos:start="85:39" pos:end="85:47"><name pos:start="85:39" pos:end="85:47">cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="91:46"><if pos:start="89:5" pos:end="91:46">if <condition pos:start="89:8" pos:end="89:27">(<expr pos:start="89:9" pos:end="89:26"><call pos:start="89:9" pos:end="89:26"><name pos:start="89:9" pos:end="89:15">X86_SSE</name><argument_list pos:start="89:16" pos:end="89:26">(<argument pos:start="89:17" pos:end="89:25"><expr pos:start="89:17" pos:end="89:25"><name pos:start="89:17" pos:end="89:25">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:46"><block_content pos:start="91:9" pos:end="91:46">

        <expr_stmt pos:start="91:9" pos:end="91:46"><expr pos:start="91:9" pos:end="91:45"><call pos:start="91:9" pos:end="91:45"><name pos:start="91:9" pos:end="91:24">dsputil_init_sse</name><argument_list pos:start="91:25" pos:end="91:45">(<argument pos:start="91:26" pos:end="91:26"><expr pos:start="91:26" pos:end="91:26"><name pos:start="91:26" pos:end="91:26">c</name></expr></argument>, <argument pos:start="91:29" pos:end="91:33"><expr pos:start="91:29" pos:end="91:33"><name pos:start="91:29" pos:end="91:33">avctx</name></expr></argument>, <argument pos:start="91:36" pos:end="91:44"><expr pos:start="91:36" pos:end="91:44"><name pos:start="91:36" pos:end="91:44">cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="97:47"><if pos:start="95:5" pos:end="97:47">if <condition pos:start="95:8" pos:end="95:28">(<expr pos:start="95:9" pos:end="95:27"><call pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:16">X86_SSE2</name><argument_list pos:start="95:17" pos:end="95:27">(<argument pos:start="95:18" pos:end="95:26"><expr pos:start="95:18" pos:end="95:26"><name pos:start="95:18" pos:end="95:26">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:47"><block_content pos:start="97:9" pos:end="97:47">

        <expr_stmt pos:start="97:9" pos:end="97:47"><expr pos:start="97:9" pos:end="97:46"><call pos:start="97:9" pos:end="97:46"><name pos:start="97:9" pos:end="97:25">dsputil_init_sse2</name><argument_list pos:start="97:26" pos:end="97:46">(<argument pos:start="97:27" pos:end="97:27"><expr pos:start="97:27" pos:end="97:27"><name pos:start="97:27" pos:end="97:27">c</name></expr></argument>, <argument pos:start="97:30" pos:end="97:34"><expr pos:start="97:30" pos:end="97:34"><name pos:start="97:30" pos:end="97:34">avctx</name></expr></argument>, <argument pos:start="97:37" pos:end="97:45"><expr pos:start="97:37" pos:end="97:45"><name pos:start="97:37" pos:end="97:45">cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="103:48"><if pos:start="101:5" pos:end="103:48">if <condition pos:start="101:8" pos:end="101:34">(<expr pos:start="101:9" pos:end="101:33"><call pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:22">EXTERNAL_SSSE3</name><argument_list pos:start="101:23" pos:end="101:33">(<argument pos:start="101:24" pos:end="101:32"><expr pos:start="101:24" pos:end="101:32"><name pos:start="101:24" pos:end="101:32">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:48"><block_content pos:start="103:9" pos:end="103:48">

        <expr_stmt pos:start="103:9" pos:end="103:48"><expr pos:start="103:9" pos:end="103:47"><call pos:start="103:9" pos:end="103:47"><name pos:start="103:9" pos:end="103:26">dsputil_init_ssse3</name><argument_list pos:start="103:27" pos:end="103:47">(<argument pos:start="103:28" pos:end="103:28"><expr pos:start="103:28" pos:end="103:28"><name pos:start="103:28" pos:end="103:28">c</name></expr></argument>, <argument pos:start="103:31" pos:end="103:35"><expr pos:start="103:31" pos:end="103:35"><name pos:start="103:31" pos:end="103:35">avctx</name></expr></argument>, <argument pos:start="103:38" pos:end="103:46"><expr pos:start="103:38" pos:end="103:46"><name pos:start="103:38" pos:end="103:46">cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="109:47"><if pos:start="107:5" pos:end="109:47">if <condition pos:start="107:8" pos:end="107:33">(<expr pos:start="107:9" pos:end="107:32"><call pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:21">EXTERNAL_SSE4</name><argument_list pos:start="107:22" pos:end="107:32">(<argument pos:start="107:23" pos:end="107:31"><expr pos:start="107:23" pos:end="107:31"><name pos:start="107:23" pos:end="107:31">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:47"><block_content pos:start="109:9" pos:end="109:47">

        <expr_stmt pos:start="109:9" pos:end="109:47"><expr pos:start="109:9" pos:end="109:46"><call pos:start="109:9" pos:end="109:46"><name pos:start="109:9" pos:end="109:25">dsputil_init_sse4</name><argument_list pos:start="109:26" pos:end="109:46">(<argument pos:start="109:27" pos:end="109:27"><expr pos:start="109:27" pos:end="109:27"><name pos:start="109:27" pos:end="109:27">c</name></expr></argument>, <argument pos:start="109:30" pos:end="109:34"><expr pos:start="109:30" pos:end="109:34"><name pos:start="109:30" pos:end="109:34">avctx</name></expr></argument>, <argument pos:start="109:37" pos:end="109:45"><expr pos:start="109:37" pos:end="109:45"><name pos:start="109:37" pos:end="109:45">cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="115:41"><if pos:start="113:5" pos:end="115:41">if <condition pos:start="113:8" pos:end="113:24">(<expr pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:23">CONFIG_ENCODERS</name></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:41"><block_content pos:start="115:9" pos:end="115:41">

        <expr_stmt pos:start="115:9" pos:end="115:41"><expr pos:start="115:9" pos:end="115:40"><call pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:30">ff_dsputilenc_init_mmx</name><argument_list pos:start="115:31" pos:end="115:40">(<argument pos:start="115:32" pos:end="115:32"><expr pos:start="115:32" pos:end="115:32"><name pos:start="115:32" pos:end="115:32">c</name></expr></argument>, <argument pos:start="115:35" pos:end="115:39"><expr pos:start="115:35" pos:end="115:39"><name pos:start="115:35" pos:end="115:39">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
