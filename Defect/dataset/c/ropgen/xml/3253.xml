<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3253.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">bdrv_block_status</name><parameter_list pos:start="1:22" pos:end="3:75">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:51">int64_t</name></type> <name pos:start="1:53" pos:end="1:58">offset</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:73"><decl pos:start="1:61" pos:end="1:73"><type pos:start="1:61" pos:end="1:73"><name pos:start="1:61" pos:end="1:67">int64_t</name></type> <name pos:start="1:69" pos:end="1:73">bytes</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:29">int64_t</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:35">pnum</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:44">int64_t</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:49">map</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:74"><decl pos:start="3:52" pos:end="3:74"><type pos:start="3:52" pos:end="3:74"><name pos:start="3:52" pos:end="3:67">BlockDriverState</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier><modifier pos:start="3:70" pos:end="3:70">*</modifier></type><name pos:start="3:71" pos:end="3:74">file</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:41">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><call pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:61">(<argument pos:start="13:12" pos:end="13:60"><expr pos:start="13:12" pos:end="13:60"><call pos:start="13:12" pos:end="13:60"><name pos:start="13:12" pos:end="13:26">QEMU_IS_ALIGNED</name><argument_list pos:start="13:27" pos:end="13:60">(<argument pos:start="13:28" pos:end="13:41"><expr pos:start="13:28" pos:end="13:41"><name pos:start="13:28" pos:end="13:33">offset</name> <operator pos:start="13:35" pos:end="13:35">|</operator> <name pos:start="13:37" pos:end="13:41">bytes</name></expr></argument>, <argument pos:start="13:44" pos:end="13:59"><expr pos:start="13:44" pos:end="13:59"><name pos:start="13:44" pos:end="13:59">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><call pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:16">(<argument pos:start="15:12" pos:end="15:15"><expr pos:start="15:12" pos:end="15:15"><name pos:start="15:12" pos:end="15:15">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="17:5" pos:end="25:7">/*

     * The contract allows us to return pnum smaller than bytes, even

     * if the next query would see the same status; we truncate the

     * request to avoid overflowing the driver's 32-bit interface.

     */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:9">bytes</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:46"><name pos:start="27:13" pos:end="27:15">MIN</name><argument_list pos:start="27:16" pos:end="27:46">(<argument pos:start="27:17" pos:end="27:21"><expr pos:start="27:17" pos:end="27:21"><name pos:start="27:17" pos:end="27:21">bytes</name></expr></argument>, <argument pos:start="27:24" pos:end="27:45"><expr pos:start="27:24" pos:end="27:45"><name pos:start="27:24" pos:end="27:45">BDRV_REQUEST_MAX_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="33:75"><expr pos:start="29:5" pos:end="33:74"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="33:74"><name pos:start="29:11" pos:end="29:37">bdrv_get_block_status_above</name><argument_list pos:start="29:38" pos:end="33:74">(<argument pos:start="29:39" pos:end="29:40"><expr pos:start="29:39" pos:end="29:40"><name pos:start="29:39" pos:end="29:40">bs</name></expr></argument>, <argument pos:start="29:43" pos:end="29:56"><expr pos:start="29:43" pos:end="29:56"><call pos:start="29:43" pos:end="29:56"><name pos:start="29:43" pos:end="29:52">backing_bs</name><argument_list pos:start="29:53" pos:end="29:56">(<argument pos:start="29:54" pos:end="29:55"><expr pos:start="29:54" pos:end="29:55"><name pos:start="29:54" pos:end="29:55">bs</name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="31:39" pos:end="31:64"><expr pos:start="31:39" pos:end="31:64"><name pos:start="31:39" pos:end="31:44">offset</name> <operator pos:start="31:46" pos:end="31:47">&gt;&gt;</operator> <name pos:start="31:49" pos:end="31:64">BDRV_SECTOR_BITS</name></expr></argument>,

                                      <argument pos:start="33:39" pos:end="33:63"><expr pos:start="33:39" pos:end="33:63"><name pos:start="33:39" pos:end="33:43">bytes</name> <operator pos:start="33:45" pos:end="33:46">&gt;&gt;</operator> <name pos:start="33:48" pos:end="33:63">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="33:66" pos:end="33:67"><expr pos:start="33:66" pos:end="33:67"><operator pos:start="33:66" pos:end="33:66">&amp;</operator><name pos:start="33:67" pos:end="33:67">n</name></expr></argument>, <argument pos:start="33:70" pos:end="33:73"><expr pos:start="33:70" pos:end="33:73"><name pos:start="33:70" pos:end="33:73">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">&lt;</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>)</condition> <block pos:start="35:18" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:19">

        <expr_stmt pos:start="37:9" pos:end="37:31"><expr pos:start="37:9" pos:end="37:30"><call pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:14">assert</name><argument_list pos:start="37:15" pos:end="37:30">(<argument pos:start="37:16" pos:end="37:29"><expr pos:start="37:16" pos:end="37:29"><name pos:start="37:16" pos:end="37:22">INT_MIN</name> <operator pos:start="37:24" pos:end="37:25">&lt;=</operator> <name pos:start="37:27" pos:end="37:29">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:18"><expr pos:start="39:9" pos:end="39:17"><operator pos:start="39:9" pos:end="39:9">*</operator><name pos:start="39:10" pos:end="39:13">pnum</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:19">return <expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><operator pos:start="45:5" pos:end="45:5">*</operator><name pos:start="45:6" pos:end="45:9">pnum</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <name pos:start="45:13" pos:end="45:13">n</name> <operator pos:start="45:15" pos:end="45:15">*</operator> <name pos:start="45:17" pos:end="45:32">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:12">(<expr pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">map</name></expr>)</condition> <block pos:start="47:14" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:44">

        <expr_stmt pos:start="49:9" pos:end="49:44"><expr pos:start="49:9" pos:end="49:43"><operator pos:start="49:9" pos:end="49:9">*</operator><name pos:start="49:10" pos:end="49:12">map</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:18">ret</name> <operator pos:start="49:20" pos:end="49:20">&amp;</operator> <name pos:start="49:22" pos:end="49:43">BDRV_BLOCK_OFFSET_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:40">

        <expr_stmt pos:start="53:9" pos:end="53:40"><expr pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:14">&amp;=</operator> <operator pos:start="53:16" pos:end="53:16">~</operator><name pos:start="53:17" pos:end="53:39">BDRV_BLOCK_OFFSET_VALID</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="57:5" pos:end="57:41">return <expr pos:start="57:12" pos:end="57:40"><name pos:start="57:12" pos:end="57:14">ret</name> <operator pos:start="57:16" pos:end="57:16">&amp;</operator> <operator pos:start="57:18" pos:end="57:18">~</operator><name pos:start="57:19" pos:end="57:40">BDRV_BLOCK_OFFSET_MASK</name></expr>;</return>

</block_content>}</block></function>
</unit>
