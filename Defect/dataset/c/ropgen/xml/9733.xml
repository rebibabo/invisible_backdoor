<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9733.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">bamboo_init</name><parameter_list pos:start="1:24" pos:end="11:46">(<parameter pos:start="1:25" pos:end="1:43"><decl pos:start="1:25" pos:end="1:43"><type pos:start="1:25" pos:end="1:43"><name pos:start="1:25" pos:end="1:34">ram_addr_t</name></type> <name pos:start="1:36" pos:end="1:43">ram_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:47"><decl pos:start="3:25" pos:end="3:47"><type pos:start="3:25" pos:end="3:47"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:47">boot_device</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:51"><decl pos:start="5:25" pos:end="5:51"><type pos:start="5:25" pos:end="5:51"><specifier pos:start="5:25" pos:end="5:29">const</specifier> <name pos:start="5:31" pos:end="5:34">char</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:51">kernel_filename</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:50"><decl pos:start="7:25" pos:end="7:50"><type pos:start="7:25" pos:end="7:50"><specifier pos:start="7:25" pos:end="7:29">const</specifier> <name pos:start="7:31" pos:end="7:34">char</name> <modifier pos:start="7:36" pos:end="7:36">*</modifier></type><name pos:start="7:37" pos:end="7:50">kernel_cmdline</name></decl></parameter>,

                        <parameter pos:start="9:25" pos:end="9:51"><decl pos:start="9:25" pos:end="9:51"><type pos:start="9:25" pos:end="9:51"><specifier pos:start="9:25" pos:end="9:29">const</specifier> <name pos:start="9:31" pos:end="9:34">char</name> <modifier pos:start="9:36" pos:end="9:36">*</modifier></type><name pos:start="9:37" pos:end="9:51">initrd_filename</name></decl></parameter>,

                        <parameter pos:start="11:25" pos:end="11:45"><decl pos:start="11:25" pos:end="11:45"><type pos:start="11:25" pos:end="11:45"><specifier pos:start="11:25" pos:end="11:29">const</specifier> <name pos:start="11:31" pos:end="11:34">char</name> <modifier pos:start="11:36" pos:end="11:36">*</modifier></type><name pos:start="11:37" pos:end="11:45">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="177:1">{<block_content pos:start="15:5" pos:end="175:22">

    <decl_stmt pos:start="15:5" pos:end="15:53"><decl pos:start="15:5" pos:end="15:52"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:31"><name pos:start="15:18" pos:end="15:28">pci_irq_nrs</name><index pos:start="15:29" pos:end="15:31">[<expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">4</literal></expr>]</index></name> <init pos:start="15:33" pos:end="15:52">= <expr pos:start="15:35" pos:end="15:52"><block pos:start="15:35" pos:end="15:52">{ <expr pos:start="15:37" pos:end="15:38"><literal type="number" pos:start="15:37" pos:end="15:38">28</literal></expr>, <expr pos:start="15:41" pos:end="15:42"><literal type="number" pos:start="15:41" pos:end="15:42">27</literal></expr>, <expr pos:start="15:45" pos:end="15:46"><literal type="number" pos:start="15:45" pos:end="15:46">26</literal></expr>, <expr pos:start="15:49" pos:end="15:50"><literal type="number" pos:start="15:49" pos:end="15:50">25</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:18">pcibus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">CPUState</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:24">elf_lowaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:22">target_phys_addr_t</name></type> <name pos:start="25:24" pos:end="25:28">entry</name> <init pos:start="25:30" pos:end="25:32">= <expr pos:start="25:32" pos:end="25:32"><literal type="number" pos:start="25:32" pos:end="25:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:36"><decl pos:start="27:5" pos:end="27:35"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:22">target_phys_addr_t</name></type> <name pos:start="27:24" pos:end="27:31">loadaddr</name> <init pos:start="27:33" pos:end="27:35">= <expr pos:start="27:35" pos:end="27:35"><literal type="number" pos:start="27:35" pos:end="27:35">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:15">target_long</name></type> <name pos:start="29:17" pos:end="29:27">kernel_size</name> <init pos:start="29:29" pos:end="29:31">= <expr pos:start="29:31" pos:end="29:31"><literal type="number" pos:start="29:31" pos:end="29:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:33"><decl pos:start="31:5" pos:end="31:32"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:16">target_ulong</name></type> <name pos:start="31:18" pos:end="31:28">initrd_base</name> <init pos:start="31:30" pos:end="31:32">= <expr pos:start="31:32" pos:end="31:32"><literal type="number" pos:start="31:32" pos:end="31:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:32"><decl pos:start="33:5" pos:end="33:31"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:15">target_long</name></type> <name pos:start="33:17" pos:end="33:27">initrd_size</name> <init pos:start="33:29" pos:end="33:31">= <expr pos:start="33:31" pos:end="33:31"><literal type="number" pos:start="33:31" pos:end="33:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:29"><decl pos:start="35:5" pos:end="35:28"><type pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:16">target_ulong</name></type> <name pos:start="35:18" pos:end="35:24">dt_base</name> <init pos:start="35:26" pos:end="35:28">= <expr pos:start="35:28" pos:end="35:28"><literal type="number" pos:start="35:28" pos:end="35:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:14"><decl pos:start="37:5" pos:end="37:13"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:8">void</name> <modifier pos:start="37:10" pos:end="37:10">*</modifier></type><name pos:start="37:11" pos:end="37:13">fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:10"><decl pos:start="39:5" pos:end="39:9"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:20">/* Setup CPU. */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:71"><expr pos:start="45:5" pos:end="45:70"><name pos:start="45:5" pos:end="45:7">env</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:70"><name pos:start="45:11" pos:end="45:23">ppc440ep_init</name><argument_list pos:start="45:24" pos:end="45:70">(<argument pos:start="45:25" pos:end="45:33"><expr pos:start="45:25" pos:end="45:33"><operator pos:start="45:25" pos:end="45:25">&amp;</operator><name pos:start="45:26" pos:end="45:33">ram_size</name></expr></argument>, <argument pos:start="45:36" pos:end="45:42"><expr pos:start="45:36" pos:end="45:42"><operator pos:start="45:36" pos:end="45:36">&amp;</operator><name pos:start="45:37" pos:end="45:42">pcibus</name></expr></argument>, <argument pos:start="45:45" pos:end="45:55"><expr pos:start="45:45" pos:end="45:55"><name pos:start="45:45" pos:end="45:55">pci_irq_nrs</name></expr></argument>, <argument pos:start="45:58" pos:end="45:58"><expr pos:start="45:58" pos:end="45:58"><literal type="number" pos:start="45:58" pos:end="45:58">1</literal></expr></argument>, <argument pos:start="45:61" pos:end="45:69"><expr pos:start="45:61" pos:end="45:69"><name pos:start="45:61" pos:end="45:69">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="63:5"><if pos:start="49:5" pos:end="63:5">if <condition pos:start="49:8" pos:end="49:15">(<expr pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:14">pcibus</name></expr>)</condition> <block pos:start="49:17" pos:end="63:5">{<block_content pos:start="53:9" pos:end="61:9">

        <comment type="block" pos:start="51:9" pos:end="51:42">/* Register network interfaces. */</comment>

        <for pos:start="53:9" pos:end="61:9">for <control pos:start="53:13" pos:end="53:37">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:32"><expr pos:start="53:21" pos:end="53:31"><name pos:start="53:21" pos:end="53:21">i</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <name pos:start="53:25" pos:end="53:31">nb_nics</name></expr>;</condition> <incr pos:start="53:34" pos:end="53:36"><expr pos:start="53:34" pos:end="53:36"><name pos:start="53:34" pos:end="53:34">i</name><operator pos:start="53:35" pos:end="53:36">++</operator></expr></incr>)</control> <block pos:start="53:39" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:61">

            <comment type="block" pos:start="55:13" pos:end="57:75">/* There are no PCI NICs on the Bamboo board, but there are

             * PCI slots, so we can pick whatever default model we want. */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:61"><expr pos:start="59:13" pos:end="59:60"><call pos:start="59:13" pos:end="59:60"><name pos:start="59:13" pos:end="59:31">pci_nic_init_nofail</name><argument_list pos:start="59:32" pos:end="59:60">(<argument pos:start="59:33" pos:end="59:44"><expr pos:start="59:33" pos:end="59:44"><operator pos:start="59:33" pos:end="59:33">&amp;</operator><name pos:start="59:34" pos:end="59:44"><name pos:start="59:34" pos:end="59:41">nd_table</name><index pos:start="59:42" pos:end="59:44">[<expr pos:start="59:43" pos:end="59:43"><name pos:start="59:43" pos:end="59:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="59:47" pos:end="59:53"><expr pos:start="59:47" pos:end="59:53"><literal type="string" pos:start="59:47" pos:end="59:53">"e1000"</literal></expr></argument>, <argument pos:start="59:56" pos:end="59:59"><expr pos:start="59:56" pos:end="59:59"><name pos:start="59:56" pos:end="59:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:22">/* Load kernel. */</comment>

    <if_stmt pos:start="69:5" pos:end="97:5"><if pos:start="69:5" pos:end="97:5">if <condition pos:start="69:8" pos:end="69:24">(<expr pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:23">kernel_filename</name></expr>)</condition> <block pos:start="69:26" pos:end="97:5">{<block_content pos:start="71:9" pos:end="95:9">

        <expr_stmt pos:start="71:9" pos:end="71:76"><expr pos:start="71:9" pos:end="71:75"><name pos:start="71:9" pos:end="71:19">kernel_size</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:75"><name pos:start="71:23" pos:end="71:33">load_uimage</name><argument_list pos:start="71:34" pos:end="71:75">(<argument pos:start="71:35" pos:end="71:49"><expr pos:start="71:35" pos:end="71:49"><name pos:start="71:35" pos:end="71:49">kernel_filename</name></expr></argument>, <argument pos:start="71:52" pos:end="71:57"><expr pos:start="71:52" pos:end="71:57"><operator pos:start="71:52" pos:end="71:52">&amp;</operator><name pos:start="71:53" pos:end="71:57">entry</name></expr></argument>, <argument pos:start="71:60" pos:end="71:68"><expr pos:start="71:60" pos:end="71:68"><operator pos:start="71:60" pos:end="71:60">&amp;</operator><name pos:start="71:61" pos:end="71:68">loadaddr</name></expr></argument>, <argument pos:start="71:71" pos:end="71:74"><expr pos:start="71:71" pos:end="71:74"><name pos:start="71:71" pos:end="71:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="83:9"><if pos:start="73:9" pos:end="83:9">if <condition pos:start="73:12" pos:end="73:28">(<expr pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:23">kernel_size</name> <operator pos:start="73:25" pos:end="73:25">&lt;</operator> <literal type="number" pos:start="73:27" pos:end="73:27">0</literal></expr>)</condition> <block pos:start="73:30" pos:end="83:9">{<block_content pos:start="75:13" pos:end="81:35">

            <expr_stmt pos:start="75:13" pos:end="77:60"><expr pos:start="75:13" pos:end="77:59"><name pos:start="75:13" pos:end="75:23">kernel_size</name> <operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="77:59"><name pos:start="75:27" pos:end="75:34">load_elf</name><argument_list pos:start="75:35" pos:end="77:59">(<argument pos:start="75:36" pos:end="75:50"><expr pos:start="75:36" pos:end="75:50"><name pos:start="75:36" pos:end="75:50">kernel_filename</name></expr></argument>, <argument pos:start="75:53" pos:end="75:53"><expr pos:start="75:53" pos:end="75:53"><literal type="number" pos:start="75:53" pos:end="75:53">0</literal></expr></argument>, <argument pos:start="75:56" pos:end="75:65"><expr pos:start="75:56" pos:end="75:65"><operator pos:start="75:56" pos:end="75:56">&amp;</operator><name pos:start="75:57" pos:end="75:65">elf_entry</name></expr></argument>, <argument pos:start="75:68" pos:end="75:79"><expr pos:start="75:68" pos:end="75:79"><operator pos:start="75:68" pos:end="75:68">&amp;</operator><name pos:start="75:69" pos:end="75:79">elf_lowaddr</name></expr></argument>,

                                   <argument pos:start="77:36" pos:end="77:39"><expr pos:start="77:36" pos:end="77:39"><name pos:start="77:36" pos:end="77:39">NULL</name></expr></argument>, <argument pos:start="77:42" pos:end="77:42"><expr pos:start="77:42" pos:end="77:42"><literal type="number" pos:start="77:42" pos:end="77:42">1</literal></expr></argument>, <argument pos:start="77:45" pos:end="77:55"><expr pos:start="77:45" pos:end="77:55"><name pos:start="77:45" pos:end="77:55">ELF_MACHINE</name></expr></argument>, <argument pos:start="77:58" pos:end="77:58"><expr pos:start="77:58" pos:end="77:58"><literal type="number" pos:start="77:58" pos:end="77:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:30"><expr pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:17">entry</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <name pos:start="79:21" pos:end="79:29">elf_entry</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:35"><expr pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:20">loadaddr</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:34">elf_lowaddr</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="85:9" pos:end="85:37">/* XXX try again as binary */</comment>

        <if_stmt pos:start="87:9" pos:end="95:9"><if pos:start="87:9" pos:end="95:9">if <condition pos:start="87:12" pos:end="87:28">(<expr pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:23">kernel_size</name> <operator pos:start="87:25" pos:end="87:25">&lt;</operator> <literal type="number" pos:start="87:27" pos:end="87:27">0</literal></expr>)</condition> <block pos:start="87:30" pos:end="95:9">{<block_content pos:start="89:13" pos:end="93:20">

            <expr_stmt pos:start="89:13" pos:end="91:37"><expr pos:start="89:13" pos:end="91:36"><call pos:start="89:13" pos:end="91:36"><name pos:start="89:13" pos:end="89:19">fprintf</name><argument_list pos:start="89:20" pos:end="91:36">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26">stderr</name></expr></argument>, <argument pos:start="89:29" pos:end="89:64"><expr pos:start="89:29" pos:end="89:64"><literal type="string" pos:start="89:29" pos:end="89:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="91:21" pos:end="91:35"><expr pos:start="91:21" pos:end="91:35"><name pos:start="91:21" pos:end="91:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:20"><expr pos:start="93:13" pos:end="93:19"><call pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:16">exit</name><argument_list pos:start="93:17" pos:end="93:19">(<argument pos:start="93:18" pos:end="93:18"><expr pos:start="93:18" pos:end="93:18"><literal type="number" pos:start="93:18" pos:end="93:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:22">/* Load initrd. */</comment>

    <if_stmt pos:start="103:5" pos:end="123:5"><if pos:start="103:5" pos:end="123:5">if <condition pos:start="103:8" pos:end="103:24">(<expr pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:23">initrd_filename</name></expr>)</condition> <block pos:start="103:26" pos:end="123:5">{<block_content pos:start="105:9" pos:end="121:9">

        <expr_stmt pos:start="105:9" pos:end="105:45"><expr pos:start="105:9" pos:end="105:44"><name pos:start="105:9" pos:end="105:19">initrd_base</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:33">kernel_size</name> <operator pos:start="105:35" pos:end="105:35">+</operator> <name pos:start="105:37" pos:end="105:44">loadaddr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:66"><expr pos:start="107:9" pos:end="109:65"><name pos:start="107:9" pos:end="107:19">initrd_size</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <call pos:start="107:23" pos:end="109:65"><name pos:start="107:23" pos:end="107:41">load_image_targphys</name><argument_list pos:start="107:42" pos:end="109:65">(<argument pos:start="107:43" pos:end="107:57"><expr pos:start="107:43" pos:end="107:57"><name pos:start="107:43" pos:end="107:57">initrd_filename</name></expr></argument>, <argument pos:start="107:60" pos:end="107:70"><expr pos:start="107:60" pos:end="107:70"><name pos:start="107:60" pos:end="107:70">initrd_base</name></expr></argument>,

                                          <argument pos:start="109:43" pos:end="109:64"><expr pos:start="109:43" pos:end="109:64"><name pos:start="109:43" pos:end="109:50">ram_size</name> <operator pos:start="109:52" pos:end="109:52">-</operator> <name pos:start="109:54" pos:end="109:64">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="113:9" pos:end="121:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:28">(<expr pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:23">initrd_size</name> <operator pos:start="113:25" pos:end="113:25">&lt;</operator> <literal type="number" pos:start="113:27" pos:end="113:27">0</literal></expr>)</condition> <block pos:start="113:30" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:20">

            <expr_stmt pos:start="115:13" pos:end="117:37"><expr pos:start="115:13" pos:end="117:36"><call pos:start="115:13" pos:end="117:36"><name pos:start="115:13" pos:end="115:19">fprintf</name><argument_list pos:start="115:20" pos:end="117:36">(<argument pos:start="115:21" pos:end="115:26"><expr pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:26">stderr</name></expr></argument>, <argument pos:start="115:29" pos:end="115:74"><expr pos:start="115:29" pos:end="115:74"><literal type="string" pos:start="115:29" pos:end="115:74">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                    <argument pos:start="117:21" pos:end="117:35"><expr pos:start="117:21" pos:end="117:35"><name pos:start="117:21" pos:end="117:35">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:20"><expr pos:start="119:13" pos:end="119:19"><call pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:16">exit</name><argument_list pos:start="119:17" pos:end="119:19">(<argument pos:start="119:18" pos:end="119:18"><expr pos:start="119:18" pos:end="119:18"><literal type="number" pos:start="119:18" pos:end="119:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:79">/* If we're loading a kernel directly, we must load the device tree too. */</comment>

    <if_stmt pos:start="129:5" pos:end="169:5"><if pos:start="129:5" pos:end="169:5">if <condition pos:start="129:8" pos:end="129:24">(<expr pos:start="129:9" pos:end="129:23"><name pos:start="129:9" pos:end="129:23">kernel_filename</name></expr>)</condition> <block pos:start="129:26" pos:end="169:5">{<block_content pos:start="131:9" pos:end="165:25">

        <if_stmt pos:start="131:9" pos:end="137:45"><if pos:start="131:9" pos:end="133:48">if <condition pos:start="131:12" pos:end="131:24">(<expr pos:start="131:13" pos:end="131:23"><name pos:start="131:13" pos:end="131:23">initrd_base</name></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:48"><block_content pos:start="133:13" pos:end="133:48">

            <expr_stmt pos:start="133:13" pos:end="133:48"><expr pos:start="133:13" pos:end="133:47"><name pos:start="133:13" pos:end="133:19">dt_base</name> <operator pos:start="133:21" pos:end="133:21">=</operator> <name pos:start="133:23" pos:end="133:33">initrd_base</name> <operator pos:start="133:35" pos:end="133:35">+</operator> <name pos:start="133:37" pos:end="133:47">initrd_size</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="135:9" pos:end="137:45">else<block type="pseudo" pos:start="137:13" pos:end="137:45"><block_content pos:start="137:13" pos:end="137:45">

            <expr_stmt pos:start="137:13" pos:end="137:45"><expr pos:start="137:13" pos:end="137:44"><name pos:start="137:13" pos:end="137:19">dt_base</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:33">kernel_size</name> <operator pos:start="137:35" pos:end="137:35">+</operator> <name pos:start="137:37" pos:end="137:44">loadaddr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="141:9" pos:end="143:80"><expr pos:start="141:9" pos:end="143:79"><name pos:start="141:9" pos:end="141:11">fdt</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <call pos:start="141:15" pos:end="143:79"><name pos:start="141:15" pos:end="141:37">bamboo_load_device_tree</name><argument_list pos:start="141:38" pos:end="143:79">(<argument pos:start="141:39" pos:end="141:45"><expr pos:start="141:39" pos:end="141:45"><name pos:start="141:39" pos:end="141:45">dt_base</name></expr></argument>, <argument pos:start="141:48" pos:end="141:55"><expr pos:start="141:48" pos:end="141:55"><name pos:start="141:48" pos:end="141:55">ram_size</name></expr></argument>,

                                      <argument pos:start="143:39" pos:end="143:49"><expr pos:start="143:39" pos:end="143:49"><name pos:start="143:39" pos:end="143:49">initrd_base</name></expr></argument>, <argument pos:start="143:52" pos:end="143:62"><expr pos:start="143:52" pos:end="143:62"><name pos:start="143:52" pos:end="143:62">initrd_size</name></expr></argument>, <argument pos:start="143:65" pos:end="143:78"><expr pos:start="143:65" pos:end="143:78"><name pos:start="143:65" pos:end="143:78">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="151:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:24">(<expr pos:start="145:13" pos:end="145:23"><name pos:start="145:13" pos:end="145:15">fdt</name> <operator pos:start="145:17" pos:end="145:18">==</operator> <name pos:start="145:20" pos:end="145:23">NULL</name></expr>)</condition> <block pos:start="145:26" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:20">

            <expr_stmt pos:start="147:13" pos:end="147:59"><expr pos:start="147:13" pos:end="147:58"><call pos:start="147:13" pos:end="147:58"><name pos:start="147:13" pos:end="147:19">fprintf</name><argument_list pos:start="147:20" pos:end="147:58">(<argument pos:start="147:21" pos:end="147:26"><expr pos:start="147:21" pos:end="147:26"><name pos:start="147:21" pos:end="147:26">stderr</name></expr></argument>, <argument pos:start="147:29" pos:end="147:57"><expr pos:start="147:29" pos:end="147:57"><literal type="string" pos:start="147:29" pos:end="147:57">"couldn't load device tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:20"><expr pos:start="149:13" pos:end="149:19"><call pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:16">exit</name><argument_list pos:start="149:17" pos:end="149:19">(<argument pos:start="149:18" pos:end="149:18"><expr pos:start="149:18" pos:end="149:18"><literal type="number" pos:start="149:18" pos:end="149:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:35"><expr pos:start="155:9" pos:end="155:34"><call pos:start="155:9" pos:end="155:34"><name pos:start="155:9" pos:end="155:29">cpu_synchronize_state</name><argument_list pos:start="155:30" pos:end="155:34">(<argument pos:start="155:31" pos:end="155:33"><expr pos:start="155:31" pos:end="155:33"><name pos:start="155:31" pos:end="155:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="159:9" pos:end="159:38">/* Set initial guest state. */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:35"><expr pos:start="161:9" pos:end="161:34"><name pos:start="161:9" pos:end="161:19"><name pos:start="161:9" pos:end="161:11">env</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:16">gpr</name><index pos:start="161:17" pos:end="161:19">[<expr pos:start="161:18" pos:end="161:18"><literal type="number" pos:start="161:18" pos:end="161:18">1</literal></expr>]</index></name> <operator pos:start="161:21" pos:end="161:21">=</operator> <operator pos:start="161:23" pos:end="161:23">(</operator><literal type="number" pos:start="161:24" pos:end="161:25">16</literal><operator pos:start="161:26" pos:end="161:27">&lt;&lt;</operator><literal type="number" pos:start="161:28" pos:end="161:29">20</literal><operator pos:start="161:30" pos:end="161:30">)</operator> <operator pos:start="161:32" pos:end="161:32">-</operator> <literal type="number" pos:start="161:34" pos:end="161:34">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:30"><expr pos:start="163:9" pos:end="163:29"><name pos:start="163:9" pos:end="163:19"><name pos:start="163:9" pos:end="163:11">env</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:16">gpr</name><index pos:start="163:17" pos:end="163:19">[<expr pos:start="163:18" pos:end="163:18"><literal type="number" pos:start="163:18" pos:end="163:18">3</literal></expr>]</index></name> <operator pos:start="163:21" pos:end="163:21">=</operator> <name pos:start="163:23" pos:end="163:29">dt_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:25"><expr pos:start="165:9" pos:end="165:24"><name pos:start="165:9" pos:end="165:16"><name pos:start="165:9" pos:end="165:11">env</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:16">nip</name></name> <operator pos:start="165:18" pos:end="165:18">=</operator> <name pos:start="165:20" pos:end="165:24">entry</name></expr>;</expr_stmt>

        <comment type="block" pos:start="167:9" pos:end="167:80">/* XXX we currently depend on KVM to create some initial TLB entries. */</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="175:22"><if pos:start="173:5" pos:end="175:22">if <condition pos:start="173:8" pos:end="173:22">(<expr pos:start="173:9" pos:end="173:21"><call pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:19">kvm_enabled</name><argument_list pos:start="173:20" pos:end="173:21">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:22"><block_content pos:start="175:9" pos:end="175:22">

        <expr_stmt pos:start="175:9" pos:end="175:22"><expr pos:start="175:9" pos:end="175:21"><call pos:start="175:9" pos:end="175:21"><name pos:start="175:9" pos:end="175:19">kvmppc_init</name><argument_list pos:start="175:20" pos:end="175:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
