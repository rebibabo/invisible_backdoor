<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24342.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">decode_delta_block</name> <parameter_list pos:start="1:31" pos:end="5:57">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:43">bit_buffer_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">bitbuf</name></decl></parameter>,

			<parameter pos:start="3:25" pos:end="3:40"><decl pos:start="3:25" pos:end="3:40"><type pos:start="3:25" pos:end="3:40"><name pos:start="3:25" pos:end="3:31">uint8_t</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:40">current</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:59"><decl pos:start="3:43" pos:end="3:59"><type pos:start="3:43" pos:end="3:59"><name pos:start="3:43" pos:end="3:49">uint8_t</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:59">previous</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:70"><decl pos:start="3:62" pos:end="3:70"><type pos:start="3:62" pos:end="3:70"><name pos:start="3:62" pos:end="3:64">int</name></type> <name pos:start="3:66" pos:end="3:70">pitch</name></decl></parameter>,

			<parameter pos:start="5:25" pos:end="5:42"><decl pos:start="5:25" pos:end="5:42"><type pos:start="5:25" pos:end="5:42"><name pos:start="5:25" pos:end="5:34">svq1_pmv_t</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:42">motion</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:49"><decl pos:start="5:45" pos:end="5:49"><type pos:start="5:45" pos:end="5:49"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:49">x</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:56"><decl pos:start="5:52" pos:end="5:56"><type pos:start="5:52" pos:end="5:56"><name pos:start="5:52" pos:end="5:54">int</name></type> <name pos:start="5:56" pos:end="5:56">y</name></decl></parameter>)</parameter_list> <block pos:start="5:59" pos:end="123:1">{<block_content pos:start="7:3" pos:end="121:16">

  <decl_stmt pos:start="7:3" pos:end="7:21"><decl pos:start="7:3" pos:end="7:20"><type pos:start="7:3" pos:end="7:10"><name pos:start="7:3" pos:end="7:10">uint32_t</name></type> <name pos:start="7:12" pos:end="7:20">bit_cache</name></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="9:22"><decl pos:start="9:3" pos:end="9:21"><type pos:start="9:3" pos:end="9:10"><name pos:start="9:3" pos:end="9:10">uint32_t</name></type> <name pos:start="9:12" pos:end="9:21">block_type</name></decl>;</decl_stmt>

  <decl_stmt pos:start="11:3" pos:end="11:22"><decl pos:start="11:3" pos:end="11:21"><type pos:start="11:3" pos:end="11:5"><name pos:start="11:3" pos:end="11:5">int</name></type>	   <name pos:start="11:12" pos:end="11:17">result</name> <init pos:start="11:19" pos:end="11:21">= <expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>;</decl_stmt>



  <comment type="block" pos:start="15:3" pos:end="15:22">/* get block type */</comment>

  <expr_stmt pos:start="17:3" pos:end="17:37"><expr pos:start="17:3" pos:end="17:36"><name pos:start="17:3" pos:end="17:11">bit_cache</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:36"><name pos:start="17:15" pos:end="17:27">get_bit_cache</name> <argument_list pos:start="17:29" pos:end="17:36">(<argument pos:start="17:30" pos:end="17:35"><expr pos:start="17:30" pos:end="17:35"><name pos:start="17:30" pos:end="17:35">bitbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <expr_stmt pos:start="21:3" pos:end="21:29"><expr pos:start="21:3" pos:end="21:28"><name pos:start="21:3" pos:end="21:11">bit_cache</name>	<operator pos:start="21:17" pos:end="21:19">&gt;&gt;=</operator> <operator pos:start="21:21" pos:end="21:21">(</operator><literal type="number" pos:start="21:22" pos:end="21:25">32</literal> <operator pos:start="21:25" pos:end="21:25">-</operator> <literal type="number" pos:start="21:27" pos:end="21:27">3</literal><operator pos:start="21:28" pos:end="21:28">)</operator></expr>;</expr_stmt>

  <expr_stmt pos:start="23:3" pos:end="23:54"><expr pos:start="23:3" pos:end="23:53"><name pos:start="23:3" pos:end="23:12">block_type</name>	  <operator pos:start="23:19" pos:end="23:19">=</operator> <name pos:start="23:21" pos:end="23:47"><name pos:start="23:21" pos:end="23:36">block_type_table</name><index pos:start="23:37" pos:end="23:47">[<expr pos:start="23:38" pos:end="23:46"><name pos:start="23:38" pos:end="23:46">bit_cache</name></expr>]</index></name><operator pos:start="23:48" pos:end="23:48">.</operator><name pos:start="23:49" pos:end="23:53">value</name></expr>;</expr_stmt>

  <expr_stmt pos:start="25:3" pos:end="25:55"><expr pos:start="25:3" pos:end="25:54"><call pos:start="25:3" pos:end="25:54"><name pos:start="25:3" pos:end="25:11">skip_bits</name><argument_list pos:start="25:12" pos:end="25:54">(<argument pos:start="25:13" pos:end="25:18"><expr pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:18">bitbuf</name></expr></argument>,<argument pos:start="25:20" pos:end="25:53"><expr pos:start="25:20" pos:end="25:53"><name pos:start="25:20" pos:end="25:46"><name pos:start="25:20" pos:end="25:35">block_type_table</name><index pos:start="25:36" pos:end="25:46">[<expr pos:start="25:37" pos:end="25:45"><name pos:start="25:37" pos:end="25:45">bit_cache</name></expr>]</index></name><operator pos:start="25:47" pos:end="25:47">.</operator><name pos:start="25:48" pos:end="25:53">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <comment type="block" pos:start="29:3" pos:end="29:28">/* reset motion vectors */</comment>

  <if_stmt pos:start="31:3" pos:end="45:3"><if pos:start="31:3" pos:end="45:3">if <condition pos:start="31:6" pos:end="31:70">(<expr pos:start="31:7" pos:end="31:69"><name pos:start="31:7" pos:end="31:16">block_type</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <name pos:start="31:21" pos:end="31:35">SVQ1_BLOCK_SKIP</name> <operator pos:start="31:37" pos:end="31:38">||</operator> <name pos:start="31:40" pos:end="31:49">block_type</name> <operator pos:start="31:51" pos:end="31:52">==</operator> <name pos:start="31:54" pos:end="31:69">SVQ1_BLOCK_INTRA</name></expr>)</condition> <block pos:start="31:72" pos:end="45:3">{<block_content pos:start="33:5" pos:end="43:30">

    <expr_stmt pos:start="33:5" pos:end="33:30"><expr pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:10">motion</name><index pos:start="33:11" pos:end="33:13">[<expr pos:start="33:12" pos:end="33:12"><literal type="number" pos:start="33:12" pos:end="33:12">0</literal></expr>]</index></name><operator pos:start="33:14" pos:end="33:14">.</operator><name pos:start="33:15" pos:end="33:15">x</name>		  <operator pos:start="33:27" pos:end="33:27">=</operator> <literal type="number" pos:start="33:29" pos:end="33:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:10">motion</name><index pos:start="35:11" pos:end="35:13">[<expr pos:start="35:12" pos:end="35:12"><literal type="number" pos:start="35:12" pos:end="35:12">0</literal></expr>]</index></name><operator pos:start="35:14" pos:end="35:14">.</operator><name pos:start="35:15" pos:end="35:15">y</name>		  <operator pos:start="35:27" pos:end="35:27">=</operator> <literal type="number" pos:start="35:29" pos:end="35:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:10">motion</name><index pos:start="37:11" pos:end="37:23">[<expr pos:start="37:12" pos:end="37:22"><operator pos:start="37:12" pos:end="37:12">(</operator><name pos:start="37:13" pos:end="37:13">x</name> <operator pos:start="37:15" pos:end="37:15">/</operator> <literal type="number" pos:start="37:17" pos:end="37:17">8</literal><operator pos:start="37:18" pos:end="37:18">)</operator> <operator pos:start="37:20" pos:end="37:20">+</operator> <literal type="number" pos:start="37:22" pos:end="37:22">2</literal></expr>]</index></name><operator pos:start="37:24" pos:end="37:24">.</operator><name pos:start="37:25" pos:end="37:25">x</name> <operator pos:start="37:27" pos:end="37:27">=</operator> <literal type="number" pos:start="37:29" pos:end="37:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:10">motion</name><index pos:start="39:11" pos:end="39:23">[<expr pos:start="39:12" pos:end="39:22"><operator pos:start="39:12" pos:end="39:12">(</operator><name pos:start="39:13" pos:end="39:13">x</name> <operator pos:start="39:15" pos:end="39:15">/</operator> <literal type="number" pos:start="39:17" pos:end="39:17">8</literal><operator pos:start="39:18" pos:end="39:18">)</operator> <operator pos:start="39:20" pos:end="39:20">+</operator> <literal type="number" pos:start="39:22" pos:end="39:22">2</literal></expr>]</index></name><operator pos:start="39:24" pos:end="39:24">.</operator><name pos:start="39:25" pos:end="39:25">y</name> <operator pos:start="39:27" pos:end="39:27">=</operator> <literal type="number" pos:start="39:29" pos:end="39:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:10">motion</name><index pos:start="41:11" pos:end="41:23">[<expr pos:start="41:12" pos:end="41:22"><operator pos:start="41:12" pos:end="41:12">(</operator><name pos:start="41:13" pos:end="41:13">x</name> <operator pos:start="41:15" pos:end="41:15">/</operator> <literal type="number" pos:start="41:17" pos:end="41:17">8</literal><operator pos:start="41:18" pos:end="41:18">)</operator> <operator pos:start="41:20" pos:end="41:20">+</operator> <literal type="number" pos:start="41:22" pos:end="41:22">3</literal></expr>]</index></name><operator pos:start="41:24" pos:end="41:24">.</operator><name pos:start="41:25" pos:end="41:25">x</name> <operator pos:start="41:27" pos:end="41:27">=</operator> <literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:30"><expr pos:start="43:5" pos:end="43:29"><name pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:10">motion</name><index pos:start="43:11" pos:end="43:23">[<expr pos:start="43:12" pos:end="43:22"><operator pos:start="43:12" pos:end="43:12">(</operator><name pos:start="43:13" pos:end="43:13">x</name> <operator pos:start="43:15" pos:end="43:15">/</operator> <literal type="number" pos:start="43:17" pos:end="43:17">8</literal><operator pos:start="43:18" pos:end="43:18">)</operator> <operator pos:start="43:20" pos:end="43:20">+</operator> <literal type="number" pos:start="43:22" pos:end="43:22">3</literal></expr>]</index></name><operator pos:start="43:24" pos:end="43:24">.</operator><name pos:start="43:25" pos:end="43:25">y</name> <operator pos:start="43:27" pos:end="43:27">=</operator> <literal type="number" pos:start="43:29" pos:end="43:29">0</literal></expr>;</expr_stmt>

  </block_content>}</block></if></if_stmt>



  <switch pos:start="49:3" pos:end="117:3">switch <condition pos:start="49:10" pos:end="49:21">(<expr pos:start="49:11" pos:end="49:20"><name pos:start="49:11" pos:end="49:20">block_type</name></expr>)</condition> <block pos:start="49:23" pos:end="117:3">{<block_content pos:start="51:3" pos:end="115:10">

  <case pos:start="51:3" pos:end="51:23">case <expr pos:start="51:8" pos:end="51:22"><name pos:start="51:8" pos:end="51:22">SVQ1_BLOCK_SKIP</name></expr>:</case>

    <expr_stmt pos:start="53:5" pos:end="53:48"><expr pos:start="53:5" pos:end="53:47"><call pos:start="53:5" pos:end="53:47"><name pos:start="53:5" pos:end="53:14">skip_block</name> <argument_list pos:start="53:16" pos:end="53:47">(<argument pos:start="53:17" pos:end="53:23"><expr pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:23">current</name></expr></argument>, <argument pos:start="53:26" pos:end="53:33"><expr pos:start="53:26" pos:end="53:33"><name pos:start="53:26" pos:end="53:33">previous</name></expr></argument>, <argument pos:start="53:36" pos:end="53:40"><expr pos:start="53:36" pos:end="53:40"><name pos:start="53:36" pos:end="53:40">pitch</name></expr></argument>, <argument pos:start="53:43" pos:end="53:43"><expr pos:start="53:43" pos:end="53:43"><name pos:start="53:43" pos:end="53:43">x</name></expr></argument>, <argument pos:start="53:46" pos:end="53:46"><expr pos:start="53:46" pos:end="53:46"><name pos:start="53:46" pos:end="53:46">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break pos:start="55:5" pos:end="55:10">break;</break>



  <case pos:start="59:3" pos:end="59:24">case <expr pos:start="59:8" pos:end="59:23"><name pos:start="59:8" pos:end="59:23">SVQ1_BLOCK_INTER</name></expr>:</case>

    <expr_stmt pos:start="61:5" pos:end="61:81"><expr pos:start="61:5" pos:end="61:80"><name pos:start="61:5" pos:end="61:10">result</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <call pos:start="61:14" pos:end="61:80"><name pos:start="61:14" pos:end="61:31">motion_inter_block</name> <argument_list pos:start="61:33" pos:end="61:80">(<argument pos:start="61:34" pos:end="61:39"><expr pos:start="61:34" pos:end="61:39"><name pos:start="61:34" pos:end="61:39">bitbuf</name></expr></argument>, <argument pos:start="61:42" pos:end="61:48"><expr pos:start="61:42" pos:end="61:48"><name pos:start="61:42" pos:end="61:48">current</name></expr></argument>, <argument pos:start="61:51" pos:end="61:58"><expr pos:start="61:51" pos:end="61:58"><name pos:start="61:51" pos:end="61:58">previous</name></expr></argument>, <argument pos:start="61:61" pos:end="61:65"><expr pos:start="61:61" pos:end="61:65"><name pos:start="61:61" pos:end="61:65">pitch</name></expr></argument>, <argument pos:start="61:68" pos:end="61:73"><expr pos:start="61:68" pos:end="61:73"><name pos:start="61:68" pos:end="61:73">motion</name></expr></argument>, <argument pos:start="61:76" pos:end="61:76"><expr pos:start="61:76" pos:end="61:76"><name pos:start="61:76" pos:end="61:76">x</name></expr></argument>, <argument pos:start="61:79" pos:end="61:79"><expr pos:start="61:79" pos:end="61:79"><name pos:start="61:79" pos:end="61:79">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="77:5"><if pos:start="65:5" pos:end="77:5">if <condition pos:start="65:8" pos:end="65:20">(<expr pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:14">result</name> <operator pos:start="65:16" pos:end="65:17">!=</operator> <literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr>)</condition>

    <block pos:start="67:5" pos:end="77:5">{<block_content pos:start="71:5" pos:end="75:12">

<cpp:ifdef pos:start="69:1" pos:end="69:17">#<cpp:directive pos:start="69:2" pos:end="69:6">ifdef</cpp:directive> <name pos:start="69:8" pos:end="69:17">DEBUG_SVQ1</name></cpp:ifdef>

    <expr_stmt pos:start="71:5" pos:end="74:0"><expr pos:start="71:5" pos:end="71:53"><call pos:start="71:5" pos:end="71:53"><name pos:start="71:5" pos:end="71:10">printf</name><argument_list pos:start="71:11" pos:end="71:53">(<argument pos:start="71:12" pos:end="71:45"><expr pos:start="71:12" pos:end="71:45"><literal type="string" pos:start="71:12" pos:end="71:45">"Error in motion_inter_block %i\n"</literal></expr></argument>,<argument pos:start="71:47" pos:end="71:52"><expr pos:start="71:47" pos:end="71:52"><name pos:start="71:47" pos:end="71:52">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

      <break pos:start="75:7" pos:end="75:12">break;</break>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:59"><expr pos:start="79:5" pos:end="79:58"><name pos:start="79:5" pos:end="79:10">result</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <call pos:start="79:14" pos:end="79:58"><name pos:start="79:14" pos:end="79:30">decode_svq1_block</name> <argument_list pos:start="79:32" pos:end="79:58">(<argument pos:start="79:33" pos:end="79:38"><expr pos:start="79:33" pos:end="79:38"><name pos:start="79:33" pos:end="79:38">bitbuf</name></expr></argument>, <argument pos:start="79:41" pos:end="79:47"><expr pos:start="79:41" pos:end="79:47"><name pos:start="79:41" pos:end="79:47">current</name></expr></argument>, <argument pos:start="79:50" pos:end="79:54"><expr pos:start="79:50" pos:end="79:54"><name pos:start="79:50" pos:end="79:54">pitch</name></expr></argument>, <argument pos:start="79:57" pos:end="79:57"><expr pos:start="79:57" pos:end="79:57"><literal type="number" pos:start="79:57" pos:end="79:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break pos:start="81:5" pos:end="81:10">break;</break>



  <case pos:start="85:3" pos:end="85:27">case <expr pos:start="85:8" pos:end="85:26"><name pos:start="85:8" pos:end="85:26">SVQ1_BLOCK_INTER_4V</name></expr>:</case>

    <expr_stmt pos:start="87:5" pos:end="87:84"><expr pos:start="87:5" pos:end="87:83"><name pos:start="87:5" pos:end="87:10">result</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <call pos:start="87:14" pos:end="87:83"><name pos:start="87:14" pos:end="87:34">motion_inter_4v_block</name> <argument_list pos:start="87:36" pos:end="87:83">(<argument pos:start="87:37" pos:end="87:42"><expr pos:start="87:37" pos:end="87:42"><name pos:start="87:37" pos:end="87:42">bitbuf</name></expr></argument>, <argument pos:start="87:45" pos:end="87:51"><expr pos:start="87:45" pos:end="87:51"><name pos:start="87:45" pos:end="87:51">current</name></expr></argument>, <argument pos:start="87:54" pos:end="87:61"><expr pos:start="87:54" pos:end="87:61"><name pos:start="87:54" pos:end="87:61">previous</name></expr></argument>, <argument pos:start="87:64" pos:end="87:68"><expr pos:start="87:64" pos:end="87:68"><name pos:start="87:64" pos:end="87:68">pitch</name></expr></argument>, <argument pos:start="87:71" pos:end="87:76"><expr pos:start="87:71" pos:end="87:76"><name pos:start="87:71" pos:end="87:76">motion</name></expr></argument>, <argument pos:start="87:79" pos:end="87:79"><expr pos:start="87:79" pos:end="87:79"><name pos:start="87:79" pos:end="87:79">x</name></expr></argument>, <argument pos:start="87:82" pos:end="87:82"><expr pos:start="87:82" pos:end="87:82"><name pos:start="87:82" pos:end="87:82">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="103:5"><if pos:start="91:5" pos:end="103:5">if <condition pos:start="91:8" pos:end="91:20">(<expr pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:14">result</name> <operator pos:start="91:16" pos:end="91:17">!=</operator> <literal type="number" pos:start="91:19" pos:end="91:19">0</literal></expr>)</condition>

    <block pos:start="93:5" pos:end="103:5">{<block_content pos:start="97:5" pos:end="101:12">

<cpp:ifdef pos:start="95:1" pos:end="95:17">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:17">DEBUG_SVQ1</name></cpp:ifdef>

    <expr_stmt pos:start="97:5" pos:end="100:0"><expr pos:start="97:5" pos:end="97:56"><call pos:start="97:5" pos:end="97:56"><name pos:start="97:5" pos:end="97:10">printf</name><argument_list pos:start="97:11" pos:end="97:56">(<argument pos:start="97:12" pos:end="97:48"><expr pos:start="97:12" pos:end="97:48"><literal type="string" pos:start="97:12" pos:end="97:48">"Error in motion_inter_4v_block %i\n"</literal></expr></argument>,<argument pos:start="97:50" pos:end="97:55"><expr pos:start="97:50" pos:end="97:55"><name pos:start="97:50" pos:end="97:55">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

      <break pos:start="101:7" pos:end="101:12">break;</break>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:59"><expr pos:start="105:5" pos:end="105:58"><name pos:start="105:5" pos:end="105:10">result</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:58"><name pos:start="105:14" pos:end="105:30">decode_svq1_block</name> <argument_list pos:start="105:32" pos:end="105:58">(<argument pos:start="105:33" pos:end="105:38"><expr pos:start="105:33" pos:end="105:38"><name pos:start="105:33" pos:end="105:38">bitbuf</name></expr></argument>, <argument pos:start="105:41" pos:end="105:47"><expr pos:start="105:41" pos:end="105:47"><name pos:start="105:41" pos:end="105:47">current</name></expr></argument>, <argument pos:start="105:50" pos:end="105:54"><expr pos:start="105:50" pos:end="105:54"><name pos:start="105:50" pos:end="105:54">pitch</name></expr></argument>, <argument pos:start="105:57" pos:end="105:57"><expr pos:start="105:57" pos:end="105:57"><literal type="number" pos:start="105:57" pos:end="105:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break pos:start="107:5" pos:end="107:10">break;</break>



  <case pos:start="111:3" pos:end="111:24">case <expr pos:start="111:8" pos:end="111:23"><name pos:start="111:8" pos:end="111:23">SVQ1_BLOCK_INTRA</name></expr>:</case>

    <expr_stmt pos:start="113:5" pos:end="113:59"><expr pos:start="113:5" pos:end="113:58"><name pos:start="113:5" pos:end="113:10">result</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <call pos:start="113:14" pos:end="113:58"><name pos:start="113:14" pos:end="113:30">decode_svq1_block</name> <argument_list pos:start="113:32" pos:end="113:58">(<argument pos:start="113:33" pos:end="113:38"><expr pos:start="113:33" pos:end="113:38"><name pos:start="113:33" pos:end="113:38">bitbuf</name></expr></argument>, <argument pos:start="113:41" pos:end="113:47"><expr pos:start="113:41" pos:end="113:47"><name pos:start="113:41" pos:end="113:47">current</name></expr></argument>, <argument pos:start="113:50" pos:end="113:54"><expr pos:start="113:50" pos:end="113:54"><name pos:start="113:50" pos:end="113:54">pitch</name></expr></argument>, <argument pos:start="113:57" pos:end="113:57"><expr pos:start="113:57" pos:end="113:57"><literal type="number" pos:start="113:57" pos:end="113:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break pos:start="115:5" pos:end="115:10">break;</break>

  </block_content>}</block></switch>



  <return pos:start="121:3" pos:end="121:16">return <expr pos:start="121:10" pos:end="121:15"><name pos:start="121:10" pos:end="121:15">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
