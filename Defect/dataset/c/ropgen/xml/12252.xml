<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12252.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">mxf_write_partition</name><parameter_list pos:start="1:31" pos:end="5:71">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:46">AVFormatContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:62">bodysid</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:44">indexsid</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:50"><decl pos:start="5:33" pos:end="5:50"><type pos:start="5:33" pos:end="5:50"><specifier pos:start="5:33" pos:end="5:37">const</specifier> <name pos:start="5:39" pos:end="5:45">uint8_t</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:50">key</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:70"><decl pos:start="5:53" pos:end="5:70"><type pos:start="5:53" pos:end="5:70"><name pos:start="5:53" pos:end="5:55">int</name></type> <name pos:start="5:57" pos:end="5:70">write_metadata</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="191:1">{<block_content pos:start="9:5" pos:end="189:13">

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">MXFContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">mxf</name> <init pos:start="9:21" pos:end="9:34">= <expr pos:start="9:23" pos:end="9:34"><name pos:start="9:23" pos:end="9:34"><name pos:start="9:23" pos:end="9:23">s</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">AVIOContext</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:19">pb</name> <init pos:start="11:21" pos:end="11:27">= <expr pos:start="11:23" pos:end="11:27"><name pos:start="11:23" pos:end="11:27"><name pos:start="11:23" pos:end="11:23">s</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:36">header_byte_count_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:29">index_byte_count</name> <init pos:start="15:31" pos:end="15:33">= <expr pos:start="15:33" pos:end="15:33"><literal type="number" pos:start="15:33" pos:end="15:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:46"><decl pos:start="17:5" pos:end="17:45"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:29">partition_offset</name> <init pos:start="17:31" pos:end="17:45">= <expr pos:start="17:33" pos:end="17:45"><call pos:start="17:33" pos:end="17:45"><name pos:start="17:33" pos:end="17:41">avio_tell</name><argument_list pos:start="17:42" pos:end="17:45">(<argument pos:start="17:43" pos:end="17:44"><expr pos:start="17:43" pos:end="17:44"><name pos:start="17:43" pos:end="17:44">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">err</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:30"><if pos:start="23:5" pos:end="27:61">if <condition pos:start="23:8" pos:end="23:60">(<expr pos:start="23:9" pos:end="23:59"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:34"><name pos:start="23:10" pos:end="23:12">mxf</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:34">edit_unit_byte_count</name></name> <operator pos:start="23:36" pos:end="23:37">&amp;&amp;</operator> <name pos:start="23:39" pos:end="23:59"><name pos:start="23:39" pos:end="23:41">mxf</name><operator pos:start="23:42" pos:end="23:43">-&gt;</operator><name pos:start="23:44" pos:end="23:59">edit_units_count</name></name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="27:61"><block_content pos:start="25:9" pos:end="27:61">

        <expr_stmt pos:start="25:9" pos:end="27:61"><expr pos:start="25:9" pos:end="27:60"><name pos:start="25:9" pos:end="25:24">index_byte_count</name> <operator pos:start="25:26" pos:end="25:26">=</operator> <literal type="number" pos:start="25:28" pos:end="25:31">85</literal> <operator pos:start="25:31" pos:end="25:31">+</operator> <literal type="number" pos:start="25:33" pos:end="25:35">12</literal><operator pos:start="25:35" pos:end="25:35">+</operator><operator pos:start="25:36" pos:end="25:36">(</operator><name pos:start="25:37" pos:end="25:49"><name pos:start="25:37" pos:end="25:37">s</name><operator pos:start="25:38" pos:end="25:39">-&gt;</operator><name pos:start="25:40" pos:end="25:49">nb_streams</name></name><operator pos:start="25:50" pos:end="25:50">+</operator><literal type="number" pos:start="25:51" pos:end="25:51">1</literal><operator pos:start="25:52" pos:end="25:52">)</operator><operator pos:start="25:53" pos:end="25:53">*</operator><literal type="number" pos:start="25:54" pos:end="25:56">6</literal> <operator pos:start="25:56" pos:end="25:56">+</operator>

            <literal type="number" pos:start="27:13" pos:end="27:15">12</literal><operator pos:start="27:15" pos:end="27:15">+</operator><name pos:start="27:16" pos:end="27:36"><name pos:start="27:16" pos:end="27:18">mxf</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:36">edit_units_count</name></name><operator pos:start="27:37" pos:end="27:37">*</operator><operator pos:start="27:38" pos:end="27:38">(</operator><literal type="number" pos:start="27:39" pos:end="27:41">11</literal><operator pos:start="27:41" pos:end="27:41">+</operator><name pos:start="27:42" pos:end="27:57"><name pos:start="27:42" pos:end="27:44">mxf</name><operator pos:start="27:45" pos:end="27:46">-&gt;</operator><name pos:start="27:47" pos:end="27:57">slice_count</name></name><operator pos:start="27:58" pos:end="27:58">*</operator><literal type="number" pos:start="27:59" pos:end="27:59">4</literal><operator pos:start="27:60" pos:end="27:60">)</operator></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="29:5" pos:end="31:30">else if <condition pos:start="29:13" pos:end="29:51">(<expr pos:start="29:14" pos:end="29:50"><name pos:start="29:14" pos:end="29:38"><name pos:start="29:14" pos:end="29:16">mxf</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:38">edit_unit_byte_count</name></name> <operator pos:start="29:40" pos:end="29:41">&amp;&amp;</operator> <name pos:start="29:43" pos:end="29:50">indexsid</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:30"><block_content pos:start="31:9" pos:end="31:30">

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:24">index_byte_count</name> <operator pos:start="31:26" pos:end="31:26">=</operator> <literal type="number" pos:start="31:28" pos:end="31:29">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:25">(<expr pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:24">index_byte_count</name></expr>)</condition> <block pos:start="35:27" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:60">

        <comment type="line" pos:start="37:9" pos:end="37:33">// add encoded ber length</comment>

        <expr_stmt pos:start="39:9" pos:end="39:66"><expr pos:start="39:9" pos:end="39:65"><name pos:start="39:9" pos:end="39:24">index_byte_count</name> <operator pos:start="39:26" pos:end="39:27">+=</operator> <literal type="number" pos:start="39:29" pos:end="39:32">16</literal> <operator pos:start="39:32" pos:end="39:32">+</operator> <call pos:start="39:34" pos:end="39:65"><name pos:start="39:34" pos:end="39:47">klv_ber_length</name><argument_list pos:start="39:48" pos:end="39:65">(<argument pos:start="39:49" pos:end="39:64"><expr pos:start="39:49" pos:end="39:64"><name pos:start="39:49" pos:end="39:64">index_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:60"><expr pos:start="41:9" pos:end="41:59"><name pos:start="41:9" pos:end="41:24">index_byte_count</name> <operator pos:start="41:26" pos:end="41:27">+=</operator> <call pos:start="41:29" pos:end="41:59"><name pos:start="41:29" pos:end="41:41">klv_fill_size</name><argument_list pos:start="41:42" pos:end="41:59">(<argument pos:start="41:43" pos:end="41:58"><expr pos:start="41:43" pos:end="41:58"><name pos:start="41:43" pos:end="41:58">index_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="61:5">if <condition pos:start="47:8" pos:end="47:45">(<expr pos:start="47:9" pos:end="47:44"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:44"><name pos:start="47:10" pos:end="47:15">memcmp</name><argument_list pos:start="47:16" pos:end="47:44">(<argument pos:start="47:17" pos:end="47:19"><expr pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">key</name></expr></argument>, <argument pos:start="47:22" pos:end="47:39"><expr pos:start="47:22" pos:end="47:39"><name pos:start="47:22" pos:end="47:39">body_partition_key</name></expr></argument>, <argument pos:start="47:42" pos:end="47:43"><expr pos:start="47:42" pos:end="47:43"><literal type="number" pos:start="47:42" pos:end="47:43">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:47" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:84">

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="51:79">(<expr pos:start="49:13" pos:end="51:78"><operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:16">err</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <call pos:start="49:20" pos:end="51:73"><name pos:start="49:20" pos:end="49:36">av_reallocp_array</name><argument_list pos:start="49:37" pos:end="51:73">(<argument pos:start="49:38" pos:end="49:64"><expr pos:start="49:38" pos:end="49:64"><operator pos:start="49:38" pos:end="49:38">&amp;</operator><name pos:start="49:39" pos:end="49:64"><name pos:start="49:39" pos:end="49:41">mxf</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:64">body_partition_offset</name></name></expr></argument>, <argument pos:start="49:67" pos:end="49:96"><expr pos:start="49:67" pos:end="49:96"><name pos:start="49:67" pos:end="49:92"><name pos:start="49:67" pos:end="49:69">mxf</name><operator pos:start="49:70" pos:end="49:71">-&gt;</operator><name pos:start="49:72" pos:end="49:92">body_partitions_count</name></name> <operator pos:start="49:94" pos:end="49:94">+</operator> <literal type="number" pos:start="49:96" pos:end="49:96">1</literal></expr></argument>,

                                     <argument pos:start="51:38" pos:end="51:72"><expr pos:start="51:38" pos:end="51:72"><sizeof pos:start="51:38" pos:end="51:72">sizeof<argument_list pos:start="51:44" pos:end="51:72">(<argument pos:start="51:45" pos:end="51:71"><expr pos:start="51:45" pos:end="51:71"><operator pos:start="51:45" pos:end="51:45">*</operator><name pos:start="51:46" pos:end="51:71"><name pos:start="51:46" pos:end="51:48">mxf</name><operator pos:start="51:49" pos:end="51:50">-&gt;</operator><name pos:start="51:51" pos:end="51:71">body_partition_offset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="51:74" pos:end="51:74">)</operator> <operator pos:start="51:76" pos:end="51:76">&lt;</operator> <literal type="number" pos:start="51:78" pos:end="51:78">0</literal></expr>)</condition> <block pos:start="51:81" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:23">

            <expr_stmt pos:start="53:13" pos:end="53:43"><expr pos:start="53:13" pos:end="53:42"><name pos:start="53:13" pos:end="53:38"><name pos:start="53:13" pos:end="53:15">mxf</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:38">body_partitions_count</name></name> <operator pos:start="53:40" pos:end="53:40">=</operator> <literal type="number" pos:start="53:42" pos:end="53:42">0</literal></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:23">return <expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">err</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:84"><expr pos:start="59:9" pos:end="59:83"><name pos:start="59:9" pos:end="59:64"><name pos:start="59:9" pos:end="59:11">mxf</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:34">body_partition_offset</name><index pos:start="59:35" pos:end="59:64">[<expr pos:start="59:36" pos:end="59:63"><name pos:start="59:36" pos:end="59:61"><name pos:start="59:36" pos:end="59:38">mxf</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:61">body_partitions_count</name></name><operator pos:start="59:62" pos:end="59:63">++</operator></expr>]</index></name> <operator pos:start="59:66" pos:end="59:66">=</operator> <name pos:start="59:68" pos:end="59:83">partition_offset</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="65:5" pos:end="65:16">// write klv</comment>

    <expr_stmt pos:start="67:5" pos:end="67:28"><expr pos:start="67:5" pos:end="67:27"><call pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:14">avio_write</name><argument_list pos:start="67:15" pos:end="67:27">(<argument pos:start="67:16" pos:end="67:17"><expr pos:start="67:16" pos:end="67:17"><name pos:start="67:16" pos:end="67:17">pb</name></expr></argument>, <argument pos:start="67:20" pos:end="67:22"><expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">key</name></expr></argument>, <argument pos:start="67:25" pos:end="67:26"><expr pos:start="67:25" pos:end="67:26"><literal type="number" pos:start="67:25" pos:end="67:26">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:70"><expr pos:start="69:5" pos:end="69:69"><call pos:start="69:5" pos:end="69:69"><name pos:start="69:5" pos:end="69:25">klv_encode_ber_length</name><argument_list pos:start="69:26" pos:end="69:69">(<argument pos:start="69:27" pos:end="69:28"><expr pos:start="69:27" pos:end="69:28"><name pos:start="69:27" pos:end="69:28">pb</name></expr></argument>, <argument pos:start="69:31" pos:end="69:68"><expr pos:start="69:31" pos:end="69:68"><literal type="number" pos:start="69:31" pos:end="69:34">88</literal> <operator pos:start="69:34" pos:end="69:34">+</operator> <literal type="number" pos:start="69:36" pos:end="69:37">16</literal> <operator pos:start="69:39" pos:end="69:39">*</operator> <name pos:start="69:41" pos:end="69:68"><name pos:start="69:41" pos:end="69:43">mxf</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:68">essence_container_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="73:5" pos:end="73:28">// write partition value</comment>

    <expr_stmt pos:start="75:5" pos:end="75:21"><expr pos:start="75:5" pos:end="75:20"><call pos:start="75:5" pos:end="75:20"><name pos:start="75:5" pos:end="75:13">avio_wb16</name><argument_list pos:start="75:14" pos:end="75:20">(<argument pos:start="75:15" pos:end="75:16"><expr pos:start="75:15" pos:end="75:16"><name pos:start="75:15" pos:end="75:16">pb</name></expr></argument>, <argument pos:start="75:19" pos:end="75:19"><expr pos:start="75:19" pos:end="75:19"><literal type="number" pos:start="75:19" pos:end="75:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="75:23" pos:end="75:37">// majorVersion</comment>

    <expr_stmt pos:start="77:5" pos:end="77:21"><expr pos:start="77:5" pos:end="77:20"><call pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:13">avio_wb16</name><argument_list pos:start="77:14" pos:end="77:20">(<argument pos:start="77:15" pos:end="77:16"><expr pos:start="77:15" pos:end="77:16"><name pos:start="77:15" pos:end="77:16">pb</name></expr></argument>, <argument pos:start="77:19" pos:end="77:19"><expr pos:start="77:19" pos:end="77:19"><literal type="number" pos:start="77:19" pos:end="77:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="77:23" pos:end="77:37">// minorVersion</comment>

    <expr_stmt pos:start="79:5" pos:end="79:28"><expr pos:start="79:5" pos:end="79:27"><call pos:start="79:5" pos:end="79:27"><name pos:start="79:5" pos:end="79:13">avio_wb32</name><argument_list pos:start="79:14" pos:end="79:27">(<argument pos:start="79:15" pos:end="79:16"><expr pos:start="79:15" pos:end="79:16"><name pos:start="79:15" pos:end="79:16">pb</name></expr></argument>, <argument pos:start="79:19" pos:end="79:26"><expr pos:start="79:19" pos:end="79:26"><name pos:start="79:19" pos:end="79:26">KAG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="79:30" pos:end="79:39">// KAGSize</comment>



    <expr_stmt pos:start="83:5" pos:end="83:36"><expr pos:start="83:5" pos:end="83:35"><call pos:start="83:5" pos:end="83:35"><name pos:start="83:5" pos:end="83:13">avio_wb64</name><argument_list pos:start="83:14" pos:end="83:35">(<argument pos:start="83:15" pos:end="83:16"><expr pos:start="83:15" pos:end="83:16"><name pos:start="83:15" pos:end="83:16">pb</name></expr></argument>, <argument pos:start="83:19" pos:end="83:34"><expr pos:start="83:19" pos:end="83:34"><name pos:start="83:19" pos:end="83:34">partition_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="83:38" pos:end="83:53">// ThisPartition</comment>



    <if_stmt pos:start="87:5" pos:end="97:25"><if pos:start="87:5" pos:end="89:80">if <condition pos:start="87:8" pos:end="87:79">(<expr pos:start="87:9" pos:end="87:78"><operator pos:start="87:9" pos:end="87:9">!</operator><call pos:start="87:10" pos:end="87:44"><name pos:start="87:10" pos:end="87:15">memcmp</name><argument_list pos:start="87:16" pos:end="87:44">(<argument pos:start="87:17" pos:end="87:19"><expr pos:start="87:17" pos:end="87:19"><name pos:start="87:17" pos:end="87:19">key</name></expr></argument>, <argument pos:start="87:22" pos:end="87:39"><expr pos:start="87:22" pos:end="87:39"><name pos:start="87:22" pos:end="87:39">body_partition_key</name></expr></argument>, <argument pos:start="87:42" pos:end="87:43"><expr pos:start="87:42" pos:end="87:43"><literal type="number" pos:start="87:42" pos:end="87:43">16</literal></expr></argument>)</argument_list></call> <operator pos:start="87:46" pos:end="87:47">&amp;&amp;</operator> <name pos:start="87:49" pos:end="87:74"><name pos:start="87:49" pos:end="87:51">mxf</name><operator pos:start="87:52" pos:end="87:53">-&gt;</operator><name pos:start="87:54" pos:end="87:74">body_partitions_count</name></name> <operator pos:start="87:76" pos:end="87:76">&gt;</operator> <literal type="number" pos:start="87:78" pos:end="87:78">1</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:80"><block_content pos:start="89:9" pos:end="89:80">

        <expr_stmt pos:start="89:9" pos:end="89:80"><expr pos:start="89:9" pos:end="89:79"><call pos:start="89:9" pos:end="89:79"><name pos:start="89:9" pos:end="89:17">avio_wb64</name><argument_list pos:start="89:18" pos:end="89:79">(<argument pos:start="89:19" pos:end="89:20"><expr pos:start="89:19" pos:end="89:20"><name pos:start="89:19" pos:end="89:20">pb</name></expr></argument>, <argument pos:start="89:23" pos:end="89:78"><expr pos:start="89:23" pos:end="89:78"><name pos:start="89:23" pos:end="89:78"><name pos:start="89:23" pos:end="89:25">mxf</name><operator pos:start="89:26" pos:end="89:27">-&gt;</operator><name pos:start="89:28" pos:end="89:48">body_partition_offset</name><index pos:start="89:49" pos:end="89:78">[<expr pos:start="89:50" pos:end="89:77"><name pos:start="89:50" pos:end="89:75"><name pos:start="89:50" pos:end="89:52">mxf</name><operator pos:start="89:53" pos:end="89:54">-&gt;</operator><name pos:start="89:55" pos:end="89:75">body_partitions_count</name></name><operator pos:start="89:76" pos:end="89:76">-</operator><literal type="number" pos:start="89:77" pos:end="89:77">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="89:82" pos:end="89:101">// PreviousPartition</comment>

    <if type="elseif" pos:start="91:5" pos:end="93:80">else if <condition pos:start="91:13" pos:end="91:82">(<expr pos:start="91:14" pos:end="91:81"><operator pos:start="91:14" pos:end="91:14">!</operator><call pos:start="91:15" pos:end="91:51"><name pos:start="91:15" pos:end="91:20">memcmp</name><argument_list pos:start="91:21" pos:end="91:51">(<argument pos:start="91:22" pos:end="91:24"><expr pos:start="91:22" pos:end="91:24"><name pos:start="91:22" pos:end="91:24">key</name></expr></argument>, <argument pos:start="91:27" pos:end="91:46"><expr pos:start="91:27" pos:end="91:46"><name pos:start="91:27" pos:end="91:46">footer_partition_key</name></expr></argument>, <argument pos:start="91:49" pos:end="91:50"><expr pos:start="91:49" pos:end="91:50"><literal type="number" pos:start="91:49" pos:end="91:50">16</literal></expr></argument>)</argument_list></call> <operator pos:start="91:53" pos:end="91:54">&amp;&amp;</operator> <name pos:start="91:56" pos:end="91:81"><name pos:start="91:56" pos:end="91:58">mxf</name><operator pos:start="91:59" pos:end="91:60">-&gt;</operator><name pos:start="91:61" pos:end="91:81">body_partitions_count</name></name></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:80"><block_content pos:start="93:9" pos:end="93:80">

        <expr_stmt pos:start="93:9" pos:end="93:80"><expr pos:start="93:9" pos:end="93:79"><call pos:start="93:9" pos:end="93:79"><name pos:start="93:9" pos:end="93:17">avio_wb64</name><argument_list pos:start="93:18" pos:end="93:79">(<argument pos:start="93:19" pos:end="93:20"><expr pos:start="93:19" pos:end="93:20"><name pos:start="93:19" pos:end="93:20">pb</name></expr></argument>, <argument pos:start="93:23" pos:end="93:78"><expr pos:start="93:23" pos:end="93:78"><name pos:start="93:23" pos:end="93:78"><name pos:start="93:23" pos:end="93:25">mxf</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:48">body_partition_offset</name><index pos:start="93:49" pos:end="93:78">[<expr pos:start="93:50" pos:end="93:77"><name pos:start="93:50" pos:end="93:75"><name pos:start="93:50" pos:end="93:52">mxf</name><operator pos:start="93:53" pos:end="93:54">-&gt;</operator><name pos:start="93:55" pos:end="93:75">body_partitions_count</name></name><operator pos:start="93:76" pos:end="93:76">-</operator><literal type="number" pos:start="93:77" pos:end="93:77">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="93:82" pos:end="93:101">// PreviousPartition</comment>

    <else pos:start="95:5" pos:end="97:25">else<block type="pseudo" pos:start="97:9" pos:end="97:25"><block_content pos:start="97:9" pos:end="97:25">

        <expr_stmt pos:start="97:9" pos:end="97:25"><expr pos:start="97:9" pos:end="97:24"><call pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:17">avio_wb64</name><argument_list pos:start="97:18" pos:end="97:24">(<argument pos:start="97:19" pos:end="97:20"><expr pos:start="97:19" pos:end="97:20"><name pos:start="97:19" pos:end="97:20">pb</name></expr></argument>, <argument pos:start="97:23" pos:end="97:23"><expr pos:start="97:23" pos:end="97:23"><literal type="number" pos:start="97:23" pos:end="97:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:48"><expr pos:start="101:5" pos:end="101:47"><call pos:start="101:5" pos:end="101:47"><name pos:start="101:5" pos:end="101:13">avio_wb64</name><argument_list pos:start="101:14" pos:end="101:47">(<argument pos:start="101:15" pos:end="101:16"><expr pos:start="101:15" pos:end="101:16"><name pos:start="101:15" pos:end="101:16">pb</name></expr></argument>, <argument pos:start="101:19" pos:end="101:46"><expr pos:start="101:19" pos:end="101:46"><name pos:start="101:19" pos:end="101:46"><name pos:start="101:19" pos:end="101:21">mxf</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:46">footer_partition_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="101:50" pos:end="101:67">// footerPartition</comment>



    <comment type="line" pos:start="105:5" pos:end="105:17">// set offset</comment>

    <expr_stmt pos:start="107:5" pos:end="107:45"><expr pos:start="107:5" pos:end="107:44"><name pos:start="107:5" pos:end="107:28">header_byte_count_offset</name> <operator pos:start="107:30" pos:end="107:30">=</operator> <call pos:start="107:32" pos:end="107:44"><name pos:start="107:32" pos:end="107:40">avio_tell</name><argument_list pos:start="107:41" pos:end="107:44">(<argument pos:start="107:42" pos:end="107:43"><expr pos:start="107:42" pos:end="107:43"><name pos:start="107:42" pos:end="107:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><call pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:13">avio_wb64</name><argument_list pos:start="109:14" pos:end="109:20">(<argument pos:start="109:15" pos:end="109:16"><expr pos:start="109:15" pos:end="109:16"><name pos:start="109:15" pos:end="109:16">pb</name></expr></argument>, <argument pos:start="109:19" pos:end="109:19"><expr pos:start="109:19" pos:end="109:19"><literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="109:23" pos:end="109:54">// headerByteCount, update later</comment>



    <comment type="line" pos:start="113:5" pos:end="113:17">// indexTable</comment>

    <expr_stmt pos:start="115:5" pos:end="115:36"><expr pos:start="115:5" pos:end="115:35"><call pos:start="115:5" pos:end="115:35"><name pos:start="115:5" pos:end="115:13">avio_wb64</name><argument_list pos:start="115:14" pos:end="115:35">(<argument pos:start="115:15" pos:end="115:16"><expr pos:start="115:15" pos:end="115:16"><name pos:start="115:15" pos:end="115:16">pb</name></expr></argument>, <argument pos:start="115:19" pos:end="115:34"><expr pos:start="115:19" pos:end="115:34"><name pos:start="115:19" pos:end="115:34">index_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="115:38" pos:end="115:54">// indexByteCount</comment>

    <expr_stmt pos:start="117:5" pos:end="117:51"><expr pos:start="117:5" pos:end="117:50"><call pos:start="117:5" pos:end="117:50"><name pos:start="117:5" pos:end="117:13">avio_wb32</name><argument_list pos:start="117:14" pos:end="117:50">(<argument pos:start="117:15" pos:end="117:16"><expr pos:start="117:15" pos:end="117:16"><name pos:start="117:15" pos:end="117:16">pb</name></expr></argument>, <argument pos:start="117:19" pos:end="117:49"><expr pos:start="117:19" pos:end="117:49"><ternary pos:start="117:19" pos:end="117:49"><condition pos:start="117:19" pos:end="117:36"><expr pos:start="117:19" pos:end="117:34"><name pos:start="117:19" pos:end="117:34">index_byte_count</name></expr> ?</condition><then pos:start="117:38" pos:end="117:45"> <expr pos:start="117:38" pos:end="117:45"><name pos:start="117:38" pos:end="117:45">indexsid</name></expr> </then><else pos:start="117:47" pos:end="117:49">: <expr pos:start="117:49" pos:end="117:49"><literal type="number" pos:start="117:49" pos:end="117:49">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="117:53" pos:end="117:63">// indexSID</comment>



    <comment type="line" pos:start="121:5" pos:end="121:17">// BodyOffset</comment>

    <if_stmt pos:start="123:5" pos:end="129:25"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:71">(<expr pos:start="123:9" pos:end="123:70"><name pos:start="123:9" pos:end="123:15">bodysid</name> <operator pos:start="123:17" pos:end="123:18">&amp;&amp;</operator> <name pos:start="123:20" pos:end="123:40"><name pos:start="123:20" pos:end="123:22">mxf</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:40">edit_units_count</name></name> <operator pos:start="123:42" pos:end="123:43">&amp;&amp;</operator> <name pos:start="123:45" pos:end="123:70"><name pos:start="123:45" pos:end="123:47">mxf</name><operator pos:start="123:48" pos:end="123:49">-&gt;</operator><name pos:start="123:50" pos:end="123:70">body_partitions_count</name></name></expr>)</condition> <block pos:start="123:73" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:40">

        <expr_stmt pos:start="125:9" pos:end="125:40"><expr pos:start="125:9" pos:end="125:39"><call pos:start="125:9" pos:end="125:39"><name pos:start="125:9" pos:end="125:17">avio_wb64</name><argument_list pos:start="125:18" pos:end="125:39">(<argument pos:start="125:19" pos:end="125:20"><expr pos:start="125:19" pos:end="125:20"><name pos:start="125:19" pos:end="125:20">pb</name></expr></argument>, <argument pos:start="125:23" pos:end="125:38"><expr pos:start="125:23" pos:end="125:38"><name pos:start="125:23" pos:end="125:38"><name pos:start="125:23" pos:end="125:25">mxf</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:38">body_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="129:25">else<block type="pseudo" pos:start="129:9" pos:end="129:25"><block_content pos:start="129:9" pos:end="129:25">

        <expr_stmt pos:start="129:9" pos:end="129:25"><expr pos:start="129:9" pos:end="129:24"><call pos:start="129:9" pos:end="129:24"><name pos:start="129:9" pos:end="129:17">avio_wb64</name><argument_list pos:start="129:18" pos:end="129:24">(<argument pos:start="129:19" pos:end="129:20"><expr pos:start="129:19" pos:end="129:20"><name pos:start="129:19" pos:end="129:20">pb</name></expr></argument>, <argument pos:start="129:23" pos:end="129:23"><expr pos:start="129:23" pos:end="129:23"><literal type="number" pos:start="129:23" pos:end="129:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:27"><expr pos:start="133:5" pos:end="133:26"><call pos:start="133:5" pos:end="133:26"><name pos:start="133:5" pos:end="133:13">avio_wb32</name><argument_list pos:start="133:14" pos:end="133:26">(<argument pos:start="133:15" pos:end="133:16"><expr pos:start="133:15" pos:end="133:16"><name pos:start="133:15" pos:end="133:16">pb</name></expr></argument>, <argument pos:start="133:19" pos:end="133:25"><expr pos:start="133:19" pos:end="133:25"><name pos:start="133:19" pos:end="133:25">bodysid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="133:29" pos:end="133:38">// bodySID</comment>



    <comment type="line" pos:start="137:5" pos:end="137:26">// operational pattern</comment>

    <expr_stmt pos:start="139:5" pos:end="139:32"><expr pos:start="139:5" pos:end="139:31"><call pos:start="139:5" pos:end="139:31"><name pos:start="139:5" pos:end="139:14">avio_write</name><argument_list pos:start="139:15" pos:end="139:31">(<argument pos:start="139:16" pos:end="139:17"><expr pos:start="139:16" pos:end="139:17"><name pos:start="139:16" pos:end="139:17">pb</name></expr></argument>, <argument pos:start="139:20" pos:end="139:26"><expr pos:start="139:20" pos:end="139:26"><name pos:start="139:20" pos:end="139:26">op1a_ul</name></expr></argument>, <argument pos:start="139:29" pos:end="139:30"><expr pos:start="139:29" pos:end="139:30"><literal type="number" pos:start="139:29" pos:end="139:30">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="143:5" pos:end="143:24">// essence container</comment>

    <expr_stmt pos:start="145:5" pos:end="145:40"><expr pos:start="145:5" pos:end="145:39"><call pos:start="145:5" pos:end="145:39"><name pos:start="145:5" pos:end="145:36">mxf_write_essence_container_refs</name><argument_list pos:start="145:37" pos:end="145:39">(<argument pos:start="145:38" pos:end="145:38"><expr pos:start="145:38" pos:end="145:38"><name pos:start="145:38" pos:end="145:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="149:5" pos:end="181:5"><if pos:start="149:5" pos:end="181:5">if <condition pos:start="149:8" pos:end="149:23">(<expr pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:22">write_metadata</name></expr>)</condition> <block pos:start="149:25" pos:end="181:5">{<block_content pos:start="153:9" pos:end="179:37">

        <comment type="line" pos:start="151:9" pos:end="151:75">// mark the start of the headermetadata and calculate metadata size</comment>

        <decl_stmt pos:start="153:9" pos:end="153:27"><decl pos:start="153:9" pos:end="153:19"><type pos:start="153:9" pos:end="153:15"><name pos:start="153:9" pos:end="153:15">int64_t</name></type> <name pos:start="153:17" pos:end="153:19">pos</name></decl>, <decl pos:start="153:22" pos:end="153:26"><type ref="prev" pos:start="153:9" pos:end="153:15"/><name pos:start="153:22" pos:end="153:26">start</name></decl>;</decl_stmt>

        <decl_stmt pos:start="155:9" pos:end="155:35"><decl pos:start="155:9" pos:end="155:34"><type pos:start="155:9" pos:end="155:16"><name pos:start="155:9" pos:end="155:16">unsigned</name></type> <name pos:start="155:18" pos:end="155:34">header_byte_count</name></decl>;</decl_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:30"><expr pos:start="159:9" pos:end="159:29"><call pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:26">mxf_write_klv_fill</name><argument_list pos:start="159:27" pos:end="159:29">(<argument pos:start="159:28" pos:end="159:28"><expr pos:start="159:28" pos:end="159:28"><name pos:start="159:28" pos:end="159:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:33"><expr pos:start="161:9" pos:end="161:32"><name pos:start="161:9" pos:end="161:13">start</name> <operator pos:start="161:15" pos:end="161:15">=</operator> <call pos:start="161:17" pos:end="161:32"><name pos:start="161:17" pos:end="161:25">avio_tell</name><argument_list pos:start="161:26" pos:end="161:32">(<argument pos:start="161:27" pos:end="161:31"><expr pos:start="161:27" pos:end="161:31"><name pos:start="161:27" pos:end="161:31"><name pos:start="161:27" pos:end="161:27">s</name><operator pos:start="161:28" pos:end="161:29">-&gt;</operator><name pos:start="161:30" pos:end="161:31">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:33"><expr pos:start="163:9" pos:end="163:32"><call pos:start="163:9" pos:end="163:32"><name pos:start="163:9" pos:end="163:29">mxf_write_primer_pack</name><argument_list pos:start="163:30" pos:end="163:32">(<argument pos:start="163:31" pos:end="163:31"><expr pos:start="163:31" pos:end="163:31"><name pos:start="163:31" pos:end="163:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:42"><expr pos:start="165:9" pos:end="165:41"><call pos:start="165:9" pos:end="165:41"><name pos:start="165:9" pos:end="165:38">mxf_write_header_metadata_sets</name><argument_list pos:start="165:39" pos:end="165:41">(<argument pos:start="165:40" pos:end="165:40"><expr pos:start="165:40" pos:end="165:40"><name pos:start="165:40" pos:end="165:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:31"><expr pos:start="167:9" pos:end="167:30"><name pos:start="167:9" pos:end="167:11">pos</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <call pos:start="167:15" pos:end="167:30"><name pos:start="167:15" pos:end="167:23">avio_tell</name><argument_list pos:start="167:24" pos:end="167:30">(<argument pos:start="167:25" pos:end="167:29"><expr pos:start="167:25" pos:end="167:29"><name pos:start="167:25" pos:end="167:29"><name pos:start="167:25" pos:end="167:25">s</name><operator pos:start="167:26" pos:end="167:27">-&gt;</operator><name pos:start="167:28" pos:end="167:29">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:61"><expr pos:start="169:9" pos:end="169:60"><name pos:start="169:9" pos:end="169:25">header_byte_count</name> <operator pos:start="169:27" pos:end="169:27">=</operator> <name pos:start="169:29" pos:end="169:31">pos</name> <operator pos:start="169:33" pos:end="169:33">-</operator> <name pos:start="169:35" pos:end="169:39">start</name> <operator pos:start="169:41" pos:end="169:41">+</operator> <call pos:start="169:43" pos:end="169:60"><name pos:start="169:43" pos:end="169:55">klv_fill_size</name><argument_list pos:start="169:56" pos:end="169:60">(<argument pos:start="169:57" pos:end="169:59"><expr pos:start="169:57" pos:end="169:59"><name pos:start="169:57" pos:end="169:59">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="173:9" pos:end="173:35">// update header_byte_count</comment>

        <expr_stmt pos:start="175:9" pos:end="175:58"><expr pos:start="175:9" pos:end="175:57"><call pos:start="175:9" pos:end="175:57"><name pos:start="175:9" pos:end="175:17">avio_seek</name><argument_list pos:start="175:18" pos:end="175:57">(<argument pos:start="175:19" pos:end="175:20"><expr pos:start="175:19" pos:end="175:20"><name pos:start="175:19" pos:end="175:20">pb</name></expr></argument>, <argument pos:start="175:23" pos:end="175:46"><expr pos:start="175:23" pos:end="175:46"><name pos:start="175:23" pos:end="175:46">header_byte_count_offset</name></expr></argument>, <argument pos:start="175:49" pos:end="175:56"><expr pos:start="175:49" pos:end="175:56"><name pos:start="175:49" pos:end="175:56">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:41"><expr pos:start="177:9" pos:end="177:40"><call pos:start="177:9" pos:end="177:40"><name pos:start="177:9" pos:end="177:17">avio_wb64</name><argument_list pos:start="177:18" pos:end="177:40">(<argument pos:start="177:19" pos:end="177:20"><expr pos:start="177:19" pos:end="177:20"><name pos:start="177:19" pos:end="177:20">pb</name></expr></argument>, <argument pos:start="177:23" pos:end="177:39"><expr pos:start="177:23" pos:end="177:39"><name pos:start="177:23" pos:end="177:39">header_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:37"><expr pos:start="179:9" pos:end="179:36"><call pos:start="179:9" pos:end="179:36"><name pos:start="179:9" pos:end="179:17">avio_seek</name><argument_list pos:start="179:18" pos:end="179:36">(<argument pos:start="179:19" pos:end="179:20"><expr pos:start="179:19" pos:end="179:20"><name pos:start="179:19" pos:end="179:20">pb</name></expr></argument>, <argument pos:start="179:23" pos:end="179:25"><expr pos:start="179:23" pos:end="179:25"><name pos:start="179:23" pos:end="179:25">pos</name></expr></argument>, <argument pos:start="179:28" pos:end="179:35"><expr pos:start="179:28" pos:end="179:35"><name pos:start="179:28" pos:end="179:35">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:19"><expr pos:start="185:5" pos:end="185:18"><call pos:start="185:5" pos:end="185:18"><name pos:start="185:5" pos:end="185:14">avio_flush</name><argument_list pos:start="185:15" pos:end="185:18">(<argument pos:start="185:16" pos:end="185:17"><expr pos:start="185:16" pos:end="185:17"><name pos:start="185:16" pos:end="185:17">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="189:5" pos:end="189:13">return <expr pos:start="189:12" pos:end="189:12"><literal type="number" pos:start="189:12" pos:end="189:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
