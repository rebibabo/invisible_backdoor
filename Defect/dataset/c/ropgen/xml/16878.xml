<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16878.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">tcg_out_tb_finalize</name><parameter_list pos:start="1:32" pos:end="1:46">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:42">TCGContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:5">

    <decl_stmt pos:start="5:5" pos:end="23:6"><decl pos:start="5:5" pos:end="23:5"><type pos:start="5:5" pos:end="5:29"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">void</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier> <specifier pos:start="5:25" pos:end="5:29">const</specifier></type> <name pos:start="5:31" pos:end="5:40"><name pos:start="5:31" pos:end="5:37">helpers</name><index pos:start="5:38" pos:end="5:40">[<expr pos:start="5:39" pos:end="5:39"><literal type="number" pos:start="5:39" pos:end="5:39">8</literal></expr>]</index></name> <init pos:start="5:42" pos:end="23:5">= <expr pos:start="5:44" pos:end="23:5"><block pos:start="5:44" pos:end="23:5">{

        <expr pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:26">helper_ret_stb_mmu</name></expr>,

        <expr pos:start="9:9" pos:end="9:25"><name pos:start="9:9" pos:end="9:25">helper_le_stw_mmu</name></expr>,

        <expr pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:25">helper_le_stl_mmu</name></expr>,

        <expr pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:25">helper_le_stq_mmu</name></expr>,

        <expr pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:27">helper_ret_ldub_mmu</name></expr>,

        <expr pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:26">helper_le_lduw_mmu</name></expr>,

        <expr pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:26">helper_le_ldul_mmu</name></expr>,

        <expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:25">helper_le_ldq_mmu</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:35"><decl pos:start="25:5" pos:end="25:34"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:17">tcg_insn_unit</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:28"><name pos:start="25:20" pos:end="25:25">thunks</name><index pos:start="25:26" pos:end="25:28">[<expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">8</literal></expr>]</index></name> <init pos:start="25:30" pos:end="25:34">= <expr pos:start="25:32" pos:end="25:34"><block pos:start="25:32" pos:end="25:34">{ }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:20">TCGLabelQemuLdst</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:23">l</name></decl>;</decl_stmt>



    <for pos:start="31:5" pos:end="97:5">for <control pos:start="31:9" pos:end="31:51">(<init pos:start="31:10" pos:end="31:27"><expr pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:10">l</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:26"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:18">be</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:26">labels</name></name></expr>;</init> <condition pos:start="31:29" pos:end="31:38"><expr pos:start="31:29" pos:end="31:37"><name pos:start="31:29" pos:end="31:29">l</name> <operator pos:start="31:31" pos:end="31:32">!=</operator> <name pos:start="31:34" pos:end="31:37">NULL</name></expr>;</condition> <incr pos:start="31:40" pos:end="31:50"><expr pos:start="31:40" pos:end="31:50"><name pos:start="31:40" pos:end="31:40">l</name> <operator pos:start="31:42" pos:end="31:42">=</operator> <name pos:start="31:44" pos:end="31:50"><name pos:start="31:44" pos:end="31:44">l</name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:50">next</name></name></expr></incr>)</control> <block pos:start="31:53" pos:end="97:5">{<block_content pos:start="33:9" pos:end="95:49">

        <decl_stmt pos:start="33:9" pos:end="33:40"><decl pos:start="33:9" pos:end="33:39"><type pos:start="33:9" pos:end="33:12"><name pos:start="33:9" pos:end="33:12">long</name></type> <name pos:start="33:14" pos:end="33:14">x</name> <init pos:start="33:16" pos:end="33:39">= <expr pos:start="33:18" pos:end="33:39"><name pos:start="33:18" pos:end="33:25"><name pos:start="33:18" pos:end="33:18">l</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:25">is_ld</name></name> <operator pos:start="33:27" pos:end="33:27">*</operator> <literal type="number" pos:start="33:29" pos:end="33:31">4</literal> <operator pos:start="33:31" pos:end="33:31">+</operator> <name pos:start="33:33" pos:end="33:39"><name pos:start="33:33" pos:end="33:33">l</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:39">size</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:40"><decl pos:start="35:9" pos:end="35:39"><type pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:21">tcg_insn_unit</name> <modifier pos:start="35:23" pos:end="35:23">*</modifier></type><name pos:start="35:24" pos:end="35:27">dest</name> <init pos:start="35:29" pos:end="35:39">= <expr pos:start="35:31" pos:end="35:39"><name pos:start="35:31" pos:end="35:39"><name pos:start="35:31" pos:end="35:36">thunks</name><index pos:start="35:37" pos:end="35:39">[<expr pos:start="35:38" pos:end="35:38"><name pos:start="35:38" pos:end="35:38">x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="39:9" pos:end="45:71">/* The out-of-line thunks are all the same; load the return address

           from B0, load the GP, and branch to the code.  Note that we are

           always post-call, so the register window has rolled, so we're

           using incoming parameter register numbers, not outgoing.  */</comment>

        <if_stmt pos:start="47:9" pos:end="91:9"><if pos:start="47:9" pos:end="91:9">if <condition pos:start="47:12" pos:end="47:25">(<expr pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:16">dest</name> <operator pos:start="47:18" pos:end="47:19">==</operator> <name pos:start="47:21" pos:end="47:24">NULL</name></expr>)</condition> <block pos:start="47:27" pos:end="91:9">{<block_content pos:start="49:13" pos:end="89:80">

            <decl_stmt pos:start="49:13" pos:end="49:54"><decl pos:start="49:13" pos:end="49:53"><type pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:21">uintptr_t</name> <modifier pos:start="49:23" pos:end="49:23">*</modifier></type><name pos:start="49:24" pos:end="49:27">desc</name> <init pos:start="49:29" pos:end="49:53">= <expr pos:start="49:31" pos:end="49:53"><operator pos:start="49:31" pos:end="49:31">(</operator><name pos:start="49:32" pos:end="49:40">uintptr_t</name> <operator pos:start="49:42" pos:end="49:42">*</operator><operator pos:start="49:43" pos:end="49:43">)</operator><name pos:start="49:44" pos:end="49:53"><name pos:start="49:44" pos:end="49:50">helpers</name><index pos:start="49:51" pos:end="49:53">[<expr pos:start="49:52" pos:end="49:52"><name pos:start="49:52" pos:end="49:52">x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="51:13" pos:end="51:57"><decl pos:start="51:13" pos:end="51:36"><type pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:21">uintptr_t</name></type> <name pos:start="51:23" pos:end="51:26">func</name> <init pos:start="51:28" pos:end="51:36">= <expr pos:start="51:30" pos:end="51:36"><name pos:start="51:30" pos:end="51:36"><name pos:start="51:30" pos:end="51:33">desc</name><index pos:start="51:34" pos:end="51:36">[<expr pos:start="51:35" pos:end="51:35"><literal type="number" pos:start="51:35" pos:end="51:35">0</literal></expr>]</index></name></expr></init></decl>, <decl pos:start="51:39" pos:end="51:50"><type ref="prev" pos:start="51:13" pos:end="51:21"/><name pos:start="51:39" pos:end="51:40">gp</name> <init pos:start="51:42" pos:end="51:50">= <expr pos:start="51:44" pos:end="51:50"><name pos:start="51:44" pos:end="51:50"><name pos:start="51:44" pos:end="51:47">desc</name><index pos:start="51:48" pos:end="51:50">[<expr pos:start="51:49" pos:end="51:49"><literal type="number" pos:start="51:49" pos:end="51:49">1</literal></expr>]</index></name></expr></init></decl>, <decl pos:start="51:53" pos:end="51:56"><type ref="prev" pos:start="51:13" pos:end="51:21"/><name pos:start="51:53" pos:end="51:56">disp</name></decl>;</decl_stmt>



            <expr_stmt pos:start="55:13" pos:end="55:43"><expr pos:start="55:13" pos:end="55:42"><name pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:18">thunks</name><index pos:start="55:19" pos:end="55:21">[<expr pos:start="55:20" pos:end="55:20"><name pos:start="55:20" pos:end="55:20">x</name></expr>]</index></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <name pos:start="55:25" pos:end="55:28">dest</name> <operator pos:start="55:30" pos:end="55:30">=</operator> <name pos:start="55:32" pos:end="55:42"><name pos:start="55:32" pos:end="55:32">s</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:42">code_ptr</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="59:13" pos:end="67:56"><expr pos:start="59:13" pos:end="67:55"><call pos:start="59:13" pos:end="67:55"><name pos:start="59:13" pos:end="59:26">tcg_out_bundle</name><argument_list pos:start="59:27" pos:end="67:55">(<argument pos:start="59:28" pos:end="59:28"><expr pos:start="59:28" pos:end="59:28"><name pos:start="59:28" pos:end="59:28">s</name></expr></argument>, <argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:33">mlx</name></expr></argument>,

                           <argument pos:start="61:28" pos:end="61:37"><expr pos:start="61:28" pos:end="61:37"><name pos:start="61:28" pos:end="61:37">INSN_NOP_M</name></expr></argument>,

                           <argument pos:start="63:28" pos:end="63:42"><expr pos:start="63:28" pos:end="63:42"><call pos:start="63:28" pos:end="63:42"><name pos:start="63:28" pos:end="63:37">tcg_opc_l2</name> <argument_list pos:start="63:39" pos:end="63:42">(<argument pos:start="63:40" pos:end="63:41"><expr pos:start="63:40" pos:end="63:41"><name pos:start="63:40" pos:end="63:41">gp</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="65:28" pos:end="67:54"><expr pos:start="65:28" pos:end="67:54"><call pos:start="65:28" pos:end="67:54"><name pos:start="65:28" pos:end="65:37">tcg_opc_x2</name> <argument_list pos:start="65:39" pos:end="67:54">(<argument pos:start="65:40" pos:end="65:49"><expr pos:start="65:40" pos:end="65:49"><name pos:start="65:40" pos:end="65:49">TCG_REG_P0</name></expr></argument>, <argument pos:start="65:52" pos:end="65:62"><expr pos:start="65:52" pos:end="65:62"><name pos:start="65:52" pos:end="65:62">OPC_MOVL_X2</name></expr></argument>,

                                       <argument pos:start="67:40" pos:end="67:49"><expr pos:start="67:40" pos:end="67:49"><name pos:start="67:40" pos:end="67:49">TCG_REG_R1</name></expr></argument>, <argument pos:start="67:52" pos:end="67:53"><expr pos:start="67:52" pos:end="67:53"><name pos:start="67:52" pos:end="67:53">gp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="79:52"><expr pos:start="69:13" pos:end="79:51"><call pos:start="69:13" pos:end="79:51"><name pos:start="69:13" pos:end="69:26">tcg_out_bundle</name><argument_list pos:start="69:27" pos:end="79:51">(<argument pos:start="69:28" pos:end="69:28"><expr pos:start="69:28" pos:end="69:28"><name pos:start="69:28" pos:end="69:28">s</name></expr></argument>, <argument pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><name pos:start="69:31" pos:end="69:33">mii</name></expr></argument>,

                           <argument pos:start="71:28" pos:end="71:37"><expr pos:start="71:28" pos:end="71:37"><name pos:start="71:28" pos:end="71:37">INSN_NOP_M</name></expr></argument>,

                           <argument pos:start="73:28" pos:end="73:37"><expr pos:start="73:28" pos:end="73:37"><name pos:start="73:28" pos:end="73:37">INSN_NOP_I</name></expr></argument>,

                           <argument pos:start="75:28" pos:end="79:50"><expr pos:start="75:28" pos:end="79:50"><call pos:start="75:28" pos:end="79:50"><name pos:start="75:28" pos:end="75:38">tcg_opc_i22</name><argument_list pos:start="75:39" pos:end="79:50">(<argument pos:start="75:40" pos:end="75:49"><expr pos:start="75:40" pos:end="75:49"><name pos:start="75:40" pos:end="75:49">TCG_REG_P0</name></expr></argument>, <argument pos:start="75:52" pos:end="75:62"><expr pos:start="75:52" pos:end="75:62"><name pos:start="75:52" pos:end="75:62">OPC_MOV_I22</name></expr></argument>,

                                       <argument pos:start="77:40" pos:end="77:75"><expr pos:start="77:40" pos:end="77:75"><ternary pos:start="77:40" pos:end="77:75"><condition pos:start="77:40" pos:end="77:49"><expr pos:start="77:40" pos:end="77:47"><name pos:start="77:40" pos:end="77:47"><name pos:start="77:40" pos:end="77:40">l</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:47">is_ld</name></name></expr> ?</condition><then pos:start="77:51" pos:end="77:61"> <expr pos:start="77:51" pos:end="77:61"><name pos:start="77:51" pos:end="77:61">TCG_REG_R35</name></expr> </then><else pos:start="77:63" pos:end="77:75">: <expr pos:start="77:65" pos:end="77:75"><name pos:start="77:65" pos:end="77:75">TCG_REG_R36</name></expr></else></ternary></expr></argument>,

                                       <argument pos:start="79:40" pos:end="79:49"><expr pos:start="79:40" pos:end="79:49"><name pos:start="79:40" pos:end="79:49">TCG_REG_B0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:55"><expr pos:start="81:13" pos:end="81:54"><name pos:start="81:13" pos:end="81:16">disp</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <operator pos:start="81:20" pos:end="81:20">(</operator><name pos:start="81:21" pos:end="81:33">tcg_insn_unit</name> <operator pos:start="81:35" pos:end="81:35">*</operator><operator pos:start="81:36" pos:end="81:36">)</operator><name pos:start="81:37" pos:end="81:40">func</name> <operator pos:start="81:42" pos:end="81:42">-</operator> <name pos:start="81:44" pos:end="81:54"><name pos:start="81:44" pos:end="81:44">s</name><operator pos:start="81:45" pos:end="81:46">-&gt;</operator><name pos:start="81:47" pos:end="81:54">code_ptr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="89:80"><expr pos:start="83:13" pos:end="89:79"><call pos:start="83:13" pos:end="89:79"><name pos:start="83:13" pos:end="83:26">tcg_out_bundle</name><argument_list pos:start="83:27" pos:end="89:79">(<argument pos:start="83:28" pos:end="83:28"><expr pos:start="83:28" pos:end="83:28"><name pos:start="83:28" pos:end="83:28">s</name></expr></argument>, <argument pos:start="83:31" pos:end="83:33"><expr pos:start="83:31" pos:end="83:33"><name pos:start="83:31" pos:end="83:33">mLX</name></expr></argument>,

                           <argument pos:start="85:28" pos:end="85:37"><expr pos:start="85:28" pos:end="85:37"><name pos:start="85:28" pos:end="85:37">INSN_NOP_M</name></expr></argument>,

                           <argument pos:start="87:28" pos:end="87:44"><expr pos:start="87:28" pos:end="87:44"><call pos:start="87:28" pos:end="87:44"><name pos:start="87:28" pos:end="87:37">tcg_opc_l3</name> <argument_list pos:start="87:39" pos:end="87:44">(<argument pos:start="87:40" pos:end="87:43"><expr pos:start="87:40" pos:end="87:43"><name pos:start="87:40" pos:end="87:43">disp</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:78"><expr pos:start="89:28" pos:end="89:78"><call pos:start="89:28" pos:end="89:78"><name pos:start="89:28" pos:end="89:37">tcg_opc_x3</name> <argument_list pos:start="89:39" pos:end="89:78">(<argument pos:start="89:40" pos:end="89:49"><expr pos:start="89:40" pos:end="89:49"><name pos:start="89:40" pos:end="89:49">TCG_REG_P0</name></expr></argument>, <argument pos:start="89:52" pos:end="89:71"><expr pos:start="89:52" pos:end="89:71"><name pos:start="89:52" pos:end="89:71">OPC_BRL_SPTK_MANY_X3</name></expr></argument>, <argument pos:start="89:74" pos:end="89:77"><expr pos:start="89:74" pos:end="89:77"><name pos:start="89:74" pos:end="89:77">disp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:49"><expr pos:start="95:9" pos:end="95:48"><call pos:start="95:9" pos:end="95:48"><name pos:start="95:9" pos:end="95:28">reloc_pcrel21b_slot2</name><argument_list pos:start="95:29" pos:end="95:48">(<argument pos:start="95:30" pos:end="95:41"><expr pos:start="95:30" pos:end="95:41"><name pos:start="95:30" pos:end="95:41"><name pos:start="95:30" pos:end="95:30">l</name><operator pos:start="95:31" pos:end="95:32">-&gt;</operator><name pos:start="95:33" pos:end="95:41">label_ptr</name></name></expr></argument>, <argument pos:start="95:44" pos:end="95:47"><expr pos:start="95:44" pos:end="95:47"><name pos:start="95:44" pos:end="95:47">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
