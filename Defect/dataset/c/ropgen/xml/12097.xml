<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12097.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">do_packet_auto_bsf</name><parameter_list pos:start="1:30" pos:end="1:64">(<parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">AVPacket</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">pkt</name></decl></parameter>)</parameter_list> <block pos:start="1:66" pos:end="125:1">{<block_content pos:start="3:5" pos:end="123:13">

    <decl_stmt pos:start="3:5" pos:end="3:49"><decl pos:start="3:5" pos:end="3:48"><type pos:start="3:5" pos:end="3:14"><name pos:start="3:5" pos:end="3:12">AVStream</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:16">st</name> <init pos:start="3:18" pos:end="3:48">= <expr pos:start="3:20" pos:end="3:48"><name pos:start="3:20" pos:end="3:48"><name pos:start="3:20" pos:end="3:20">s</name><operator pos:start="3:21" pos:end="3:22">-&gt;</operator><name pos:start="3:23" pos:end="3:29">streams</name><index pos:start="3:30" pos:end="3:48">[<expr pos:start="3:31" pos:end="3:47"><name pos:start="3:31" pos:end="3:47"><name pos:start="3:31" pos:end="3:33">pkt</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:47">stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:17"><if pos:start="9:5" pos:end="11:17">if <condition pos:start="9:8" pos:end="9:42">(<expr pos:start="9:9" pos:end="9:41"><operator pos:start="9:9" pos:end="9:9">!</operator><operator pos:start="9:10" pos:end="9:10">(</operator><name pos:start="9:11" pos:end="9:18"><name pos:start="9:11" pos:end="9:11">s</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:18">flags</name></name> <operator pos:start="9:20" pos:end="9:20">&amp;</operator> <name pos:start="9:22" pos:end="9:40">AVFMT_FLAG_AUTO_BSF</name><operator pos:start="9:41" pos:end="9:41">)</operator></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:17"><block_content pos:start="11:9" pos:end="11:17">

        <return pos:start="11:9" pos:end="11:17">return <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="15:5" pos:end="34:0"><if pos:start="15:5" pos:end="34:0">if <condition pos:start="15:8" pos:end="15:36">(<expr pos:start="15:9" pos:end="15:35"><name pos:start="15:9" pos:end="15:35"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:18">oformat</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:35">check_bitstream</name></name></expr>)</condition> <block pos:start="15:38" pos:end="34:0">{<block_content pos:start="17:9" pos:end="27:9">

        <if_stmt pos:start="17:9" pos:end="27:9"><if pos:start="17:9" pos:end="27:9">if <condition pos:start="17:12" pos:end="17:45">(<expr pos:start="17:13" pos:end="17:44"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:44"><name pos:start="17:14" pos:end="17:15">st</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:25">internal</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:44">bitstream_checked</name></name></expr>)</condition> <block pos:start="17:47" pos:end="27:9">{<block_content pos:start="19:13" pos:end="25:52">

            <if_stmt pos:start="19:13" pos:end="25:52"><if pos:start="19:13" pos:end="21:27">if <condition pos:start="19:16" pos:end="19:64">(<expr pos:start="19:17" pos:end="19:63"><operator pos:start="19:17" pos:end="19:17">(</operator><name pos:start="19:18" pos:end="19:20">ret</name> <operator pos:start="19:22" pos:end="19:22">=</operator> <call pos:start="19:24" pos:end="19:58"><name pos:start="19:24" pos:end="19:50"><name pos:start="19:24" pos:end="19:24">s</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:33">oformat</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:50">check_bitstream</name></name><argument_list pos:start="19:51" pos:end="19:58">(<argument pos:start="19:52" pos:end="19:52"><expr pos:start="19:52" pos:end="19:52"><name pos:start="19:52" pos:end="19:52">s</name></expr></argument>, <argument pos:start="19:55" pos:end="19:57"><expr pos:start="19:55" pos:end="19:57"><name pos:start="19:55" pos:end="19:57">pkt</name></expr></argument>)</argument_list></call><operator pos:start="19:59" pos:end="19:59">)</operator> <operator pos:start="19:61" pos:end="19:61">&lt;</operator> <literal type="number" pos:start="19:63" pos:end="19:63">0</literal></expr>)</condition><block type="pseudo" pos:start="21:17" pos:end="21:27"><block_content pos:start="21:17" pos:end="21:27">

                <return pos:start="21:17" pos:end="21:27">return <expr pos:start="21:24" pos:end="21:26"><name pos:start="21:24" pos:end="21:26">ret</name></expr>;</return></block_content></block></if>

            <if type="elseif" pos:start="23:13" pos:end="25:52">else if <condition pos:start="23:21" pos:end="23:30">(<expr pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:24">ret</name> <operator pos:start="23:26" pos:end="23:27">==</operator> <literal type="number" pos:start="23:29" pos:end="23:29">1</literal></expr>)</condition><block type="pseudo" pos:start="25:17" pos:end="25:52"><block_content pos:start="25:17" pos:end="25:52">

                <expr_stmt pos:start="25:17" pos:end="25:52"><expr pos:start="25:17" pos:end="25:51"><name pos:start="25:17" pos:end="25:47"><name pos:start="25:17" pos:end="25:18">st</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:28">internal</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:47">bitstream_checked</name></name> <operator pos:start="25:49" pos:end="25:49">=</operator> <literal type="number" pos:start="25:51" pos:end="25:51">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="33:1" pos:end="33:24">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:24">FF_API_LAVF_MERGE_SD</name></expr></cpp:if>

<macro pos:start="35:1" pos:end="35:31"><name pos:start="35:1" pos:end="35:31">FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:31">(<expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:10">st</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:20">internal</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:30">nb_bsfcs</name></name></expr>)</condition> <block pos:start="37:33" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:93">

        <expr_stmt pos:start="39:9" pos:end="39:45"><expr pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:44"><name pos:start="39:15" pos:end="39:39">av_packet_split_side_data</name><argument_list pos:start="39:40" pos:end="39:44">(<argument pos:start="39:41" pos:end="39:43"><expr pos:start="39:41" pos:end="39:43"><name pos:start="39:41" pos:end="39:43">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:93"><if pos:start="41:9" pos:end="43:93">if <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">&lt;</operator> <literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:93"><block_content pos:start="43:13" pos:end="43:93">

            <expr_stmt pos:start="43:13" pos:end="43:93"><expr pos:start="43:13" pos:end="43:92"><call pos:start="43:13" pos:end="43:92"><name pos:start="43:13" pos:end="43:18">av_log</name><argument_list pos:start="43:19" pos:end="43:92">(<argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><name pos:start="43:20" pos:end="43:20">s</name></expr></argument>, <argument pos:start="43:23" pos:end="43:36"><expr pos:start="43:23" pos:end="43:36"><name pos:start="43:23" pos:end="43:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="43:39" pos:end="43:91"><expr pos:start="43:39" pos:end="43:91"><literal type="string" pos:start="43:39" pos:end="43:91">"Failed to split side data before bitstream filter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<macro pos:start="47:1" pos:end="50:0"><name pos:start="47:1" pos:end="50:0">FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>



    <for pos:start="53:5" pos:end="121:5">for <control pos:start="53:9" pos:end="53:48">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:43"><expr pos:start="53:17" pos:end="53:42"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:42"><name pos:start="53:21" pos:end="53:22">st</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:32">internal</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:42">nb_bsfcs</name></name></expr>;</condition> <incr pos:start="53:45" pos:end="53:47"><expr pos:start="53:45" pos:end="53:47"><name pos:start="53:45" pos:end="53:45">i</name><operator pos:start="53:46" pos:end="53:47">++</operator></expr></incr>)</control> <block pos:start="53:50" pos:end="121:5">{<block_content pos:start="55:9" pos:end="119:9">

        <decl_stmt pos:start="55:9" pos:end="55:51"><decl pos:start="55:9" pos:end="55:50"><type pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:20">AVBSFContext</name> <modifier pos:start="55:22" pos:end="55:22">*</modifier></type><name pos:start="55:23" pos:end="55:25">ctx</name> <init pos:start="55:27" pos:end="55:50">= <expr pos:start="55:29" pos:end="55:50"><name pos:start="55:29" pos:end="55:50"><name pos:start="55:29" pos:end="55:30">st</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:40">internal</name><operator pos:start="55:41" pos:end="55:42">-&gt;</operator><name pos:start="55:43" pos:end="55:47">bsfcs</name><index pos:start="55:48" pos:end="55:50">[<expr pos:start="55:49" pos:end="55:49"><name pos:start="55:49" pos:end="55:49">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="57:9" pos:end="69:9"><if pos:start="57:9" pos:end="69:9">if <condition pos:start="57:12" pos:end="57:18">(<expr pos:start="57:13" pos:end="57:17"><name pos:start="57:13" pos:end="57:13">i</name> <operator pos:start="57:15" pos:end="57:15">&gt;</operator> <literal type="number" pos:start="57:17" pos:end="57:17">0</literal></expr>)</condition> <block pos:start="57:20" pos:end="69:9">{<block_content pos:start="59:13" pos:end="67:13">

            <decl_stmt pos:start="59:13" pos:end="59:64"><decl pos:start="59:13" pos:end="59:63"><type pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:24">AVBSFContext</name><modifier pos:start="59:25" pos:end="59:25">*</modifier></type> <name pos:start="59:27" pos:end="59:34">prev_ctx</name> <init pos:start="59:36" pos:end="59:63">= <expr pos:start="59:38" pos:end="59:63"><name pos:start="59:38" pos:end="59:63"><name pos:start="59:38" pos:end="59:39">st</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:49">internal</name><operator pos:start="59:50" pos:end="59:51">-&gt;</operator><name pos:start="59:52" pos:end="59:56">bsfcs</name><index pos:start="59:57" pos:end="59:63">[<expr pos:start="59:58" pos:end="59:62"><name pos:start="59:58" pos:end="59:58">i</name> <operator pos:start="59:60" pos:end="59:60">-</operator> <literal type="number" pos:start="59:62" pos:end="59:62">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="61:13" pos:end="67:13"><if pos:start="61:13" pos:end="67:13">if <condition pos:start="61:16" pos:end="61:81">(<expr pos:start="61:17" pos:end="61:80"><name pos:start="61:17" pos:end="61:49"><name pos:start="61:17" pos:end="61:24">prev_ctx</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:33">par_out</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:49">extradata_size</name></name> <operator pos:start="61:51" pos:end="61:52">!=</operator> <name pos:start="61:54" pos:end="61:80"><name pos:start="61:54" pos:end="61:56">ctx</name><operator pos:start="61:57" pos:end="61:58">-&gt;</operator><name pos:start="61:59" pos:end="61:64">par_in</name><operator pos:start="61:65" pos:end="61:66">-&gt;</operator><name pos:start="61:67" pos:end="61:80">extradata_size</name></name></expr>)</condition> <block pos:start="61:83" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:31">

                <if_stmt pos:start="63:17" pos:end="65:31"><if pos:start="63:17" pos:end="65:31">if <condition pos:start="63:20" pos:end="63:88">(<expr pos:start="63:21" pos:end="63:87"><operator pos:start="63:21" pos:end="63:21">(</operator><name pos:start="63:22" pos:end="63:24">ret</name> <operator pos:start="63:26" pos:end="63:26">=</operator> <call pos:start="63:28" pos:end="63:82"><name pos:start="63:28" pos:end="63:50">avcodec_parameters_copy</name><argument_list pos:start="63:51" pos:end="63:82">(<argument pos:start="63:52" pos:end="63:62"><expr pos:start="63:52" pos:end="63:62"><name pos:start="63:52" pos:end="63:62"><name pos:start="63:52" pos:end="63:54">ctx</name><operator pos:start="63:55" pos:end="63:56">-&gt;</operator><name pos:start="63:57" pos:end="63:62">par_in</name></name></expr></argument>, <argument pos:start="63:65" pos:end="63:81"><expr pos:start="63:65" pos:end="63:81"><name pos:start="63:65" pos:end="63:81"><name pos:start="63:65" pos:end="63:72">prev_ctx</name><operator pos:start="63:73" pos:end="63:74">-&gt;</operator><name pos:start="63:75" pos:end="63:81">par_out</name></name></expr></argument>)</argument_list></call><operator pos:start="63:83" pos:end="63:83">)</operator> <operator pos:start="63:85" pos:end="63:85">&lt;</operator> <literal type="number" pos:start="63:87" pos:end="63:87">0</literal></expr>)</condition><block type="pseudo" pos:start="65:21" pos:end="65:31"><block_content pos:start="65:21" pos:end="65:31">

                    <return pos:start="65:21" pos:end="65:31">return <expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="71:9" pos:end="71:82">// TODO: when any bitstream filter requires flushing at EOF, we'll need to</comment>

        <comment type="line" pos:start="73:9" pos:end="73:58">// flush each stream's BSF chain on write_trailer.</comment>

        <if_stmt pos:start="75:9" pos:end="85:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="75:53">(<expr pos:start="75:13" pos:end="75:52"><operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:16">ret</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:47"><name pos:start="75:20" pos:end="75:37">av_bsf_send_packet</name><argument_list pos:start="75:38" pos:end="75:47">(<argument pos:start="75:39" pos:end="75:41"><expr pos:start="75:39" pos:end="75:41"><name pos:start="75:39" pos:end="75:41">ctx</name></expr></argument>, <argument pos:start="75:44" pos:end="75:46"><expr pos:start="75:44" pos:end="75:46"><name pos:start="75:44" pos:end="75:46">pkt</name></expr></argument>)</argument_list></call><operator pos:start="75:48" pos:end="75:48">)</operator> <operator pos:start="75:50" pos:end="75:50">&lt;</operator> <literal type="number" pos:start="75:52" pos:end="75:52">0</literal></expr>)</condition> <block pos:start="75:55" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:23">

            <expr_stmt pos:start="77:13" pos:end="81:58"><expr pos:start="77:13" pos:end="81:57"><call pos:start="77:13" pos:end="81:57"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="81:57">(<argument pos:start="77:20" pos:end="77:22"><expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">ctx</name></expr></argument>, <argument pos:start="77:25" pos:end="77:36"><expr pos:start="77:25" pos:end="77:36"><name pos:start="77:25" pos:end="77:36">AV_LOG_ERROR</name></expr></argument>,

                    <argument pos:start="79:21" pos:end="79:72"><expr pos:start="79:21" pos:end="79:72"><literal type="string" pos:start="79:21" pos:end="79:72">"Failed to send packet to filter %s for stream %d\n"</literal></expr></argument>,

                    <argument pos:start="81:21" pos:end="81:37"><expr pos:start="81:21" pos:end="81:37"><name pos:start="81:21" pos:end="81:37"><name pos:start="81:21" pos:end="81:23">ctx</name><operator pos:start="81:24" pos:end="81:25">-&gt;</operator><name pos:start="81:26" pos:end="81:31">filter</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:37">name</name></name></expr></argument>, <argument pos:start="81:40" pos:end="81:56"><expr pos:start="81:40" pos:end="81:56"><name pos:start="81:40" pos:end="81:56"><name pos:start="81:40" pos:end="81:42">pkt</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:56">stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:23">return <expr pos:start="83:20" pos:end="83:22"><name pos:start="83:20" pos:end="83:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="87:9" pos:end="87:85">// TODO: when any automatically-added bitstream filter is generating multiple</comment>

        <comment type="line" pos:start="89:9" pos:end="89:83">// output packets for a single input one, we'll need to call this in a loop</comment>

        <comment type="line" pos:start="91:9" pos:end="91:40">// and write each output packet.</comment>

        <if_stmt pos:start="93:9" pos:end="107:9"><if pos:start="93:9" pos:end="107:9">if <condition pos:start="93:12" pos:end="93:56">(<expr pos:start="93:13" pos:end="93:55"><operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:16">ret</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <call pos:start="93:20" pos:end="93:50"><name pos:start="93:20" pos:end="93:40">av_bsf_receive_packet</name><argument_list pos:start="93:41" pos:end="93:50">(<argument pos:start="93:42" pos:end="93:44"><expr pos:start="93:42" pos:end="93:44"><name pos:start="93:42" pos:end="93:44">ctx</name></expr></argument>, <argument pos:start="93:47" pos:end="93:49"><expr pos:start="93:47" pos:end="93:49"><name pos:start="93:47" pos:end="93:49">pkt</name></expr></argument>)</argument_list></call><operator pos:start="93:51" pos:end="93:51">)</operator> <operator pos:start="93:53" pos:end="93:53">&lt;</operator> <literal type="number" pos:start="93:55" pos:end="93:55">0</literal></expr>)</condition> <block pos:start="93:58" pos:end="107:9">{<block_content pos:start="95:13" pos:end="105:23">

            <if_stmt pos:start="95:13" pos:end="97:25"><if pos:start="95:13" pos:end="97:25">if <condition pos:start="95:16" pos:end="95:61">(<expr pos:start="95:17" pos:end="95:60"><name pos:start="95:17" pos:end="95:19">ret</name> <operator pos:start="95:21" pos:end="95:22">==</operator> <call pos:start="95:24" pos:end="95:38"><name pos:start="95:24" pos:end="95:30">AVERROR</name><argument_list pos:start="95:31" pos:end="95:38">(<argument pos:start="95:32" pos:end="95:37"><expr pos:start="95:32" pos:end="95:37"><name pos:start="95:32" pos:end="95:37">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="95:40" pos:end="95:41">||</operator> <name pos:start="95:43" pos:end="95:45">ret</name> <operator pos:start="95:47" pos:end="95:48">==</operator> <name pos:start="95:50" pos:end="95:60">AVERROR_EOF</name></expr>)</condition><block type="pseudo" pos:start="97:17" pos:end="97:25"><block_content pos:start="97:17" pos:end="97:25">

                <return pos:start="97:17" pos:end="97:25">return <expr pos:start="97:24" pos:end="97:24"><literal type="number" pos:start="97:24" pos:end="97:24">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="99:13" pos:end="103:58"><expr pos:start="99:13" pos:end="103:57"><call pos:start="99:13" pos:end="103:57"><name pos:start="99:13" pos:end="99:18">av_log</name><argument_list pos:start="99:19" pos:end="103:57">(<argument pos:start="99:20" pos:end="99:22"><expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">ctx</name></expr></argument>, <argument pos:start="99:25" pos:end="99:36"><expr pos:start="99:25" pos:end="99:36"><name pos:start="99:25" pos:end="99:36">AV_LOG_ERROR</name></expr></argument>,

                    <argument pos:start="101:21" pos:end="101:72"><expr pos:start="101:21" pos:end="101:72"><literal type="string" pos:start="101:21" pos:end="101:72">"Failed to send packet to filter %s for stream %d\n"</literal></expr></argument>,

                    <argument pos:start="103:21" pos:end="103:37"><expr pos:start="103:21" pos:end="103:37"><name pos:start="103:21" pos:end="103:37"><name pos:start="103:21" pos:end="103:23">ctx</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:31">filter</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:37">name</name></name></expr></argument>, <argument pos:start="103:40" pos:end="103:56"><expr pos:start="103:40" pos:end="103:56"><name pos:start="103:40" pos:end="103:56"><name pos:start="103:40" pos:end="103:42">pkt</name><operator pos:start="103:43" pos:end="103:44">-&gt;</operator><name pos:start="103:45" pos:end="103:56">stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="105:13" pos:end="105:23">return <expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="119:9"><if pos:start="109:9" pos:end="119:9">if <condition pos:start="109:12" pos:end="109:44">(<expr pos:start="109:13" pos:end="109:43"><name pos:start="109:13" pos:end="109:13">i</name> <operator pos:start="109:15" pos:end="109:16">==</operator> <name pos:start="109:18" pos:end="109:39"><name pos:start="109:18" pos:end="109:19">st</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:29">internal</name><operator pos:start="109:30" pos:end="109:31">-&gt;</operator><name pos:start="109:32" pos:end="109:39">nb_bsfcs</name></name> <operator pos:start="109:41" pos:end="109:41">-</operator> <literal type="number" pos:start="109:43" pos:end="109:43">1</literal></expr>)</condition> <block pos:start="109:46" pos:end="119:9">{<block_content pos:start="111:13" pos:end="117:13">

            <if_stmt pos:start="111:13" pos:end="117:13"><if pos:start="111:13" pos:end="117:13">if <condition pos:start="111:16" pos:end="111:77">(<expr pos:start="111:17" pos:end="111:76"><name pos:start="111:17" pos:end="111:44"><name pos:start="111:17" pos:end="111:19">ctx</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:28">par_out</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:44">extradata_size</name></name> <operator pos:start="111:46" pos:end="111:47">!=</operator> <name pos:start="111:49" pos:end="111:76"><name pos:start="111:49" pos:end="111:50">st</name><operator pos:start="111:51" pos:end="111:52">-&gt;</operator><name pos:start="111:53" pos:end="111:60">codecpar</name><operator pos:start="111:61" pos:end="111:62">-&gt;</operator><name pos:start="111:63" pos:end="111:76">extradata_size</name></name></expr>)</condition> <block pos:start="111:79" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:31">

                <if_stmt pos:start="113:17" pos:end="115:31"><if pos:start="113:17" pos:end="115:31">if <condition pos:start="113:20" pos:end="113:84">(<expr pos:start="113:21" pos:end="113:83"><operator pos:start="113:21" pos:end="113:21">(</operator><name pos:start="113:22" pos:end="113:24">ret</name> <operator pos:start="113:26" pos:end="113:26">=</operator> <call pos:start="113:28" pos:end="113:78"><name pos:start="113:28" pos:end="113:50">avcodec_parameters_copy</name><argument_list pos:start="113:51" pos:end="113:78">(<argument pos:start="113:52" pos:end="113:63"><expr pos:start="113:52" pos:end="113:63"><name pos:start="113:52" pos:end="113:63"><name pos:start="113:52" pos:end="113:53">st</name><operator pos:start="113:54" pos:end="113:55">-&gt;</operator><name pos:start="113:56" pos:end="113:63">codecpar</name></name></expr></argument>, <argument pos:start="113:66" pos:end="113:77"><expr pos:start="113:66" pos:end="113:77"><name pos:start="113:66" pos:end="113:77"><name pos:start="113:66" pos:end="113:68">ctx</name><operator pos:start="113:69" pos:end="113:70">-&gt;</operator><name pos:start="113:71" pos:end="113:77">par_out</name></name></expr></argument>)</argument_list></call><operator pos:start="113:79" pos:end="113:79">)</operator> <operator pos:start="113:81" pos:end="113:81">&lt;</operator> <literal type="number" pos:start="113:83" pos:end="113:83">0</literal></expr>)</condition><block type="pseudo" pos:start="115:21" pos:end="115:31"><block_content pos:start="115:21" pos:end="115:31">

                    <return pos:start="115:21" pos:end="115:31">return <expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
