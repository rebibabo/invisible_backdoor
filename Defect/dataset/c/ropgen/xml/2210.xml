<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2210.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">avconv_parse_options</name><parameter_list pos:start="1:25" pos:end="1:47">(<parameter pos:start="1:26" pos:end="1:33"><decl pos:start="1:26" pos:end="1:33"><type pos:start="1:26" pos:end="1:33"><name pos:start="1:26" pos:end="1:28">int</name></type> <name pos:start="1:30" pos:end="1:33">argc</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:46"><decl pos:start="1:36" pos:end="1:46"><type pos:start="1:36" pos:end="1:46"><name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier><modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:15">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22">OptionParseContext</name></type> <name pos:start="5:24" pos:end="5:27">octx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:22"><name pos:start="7:13" pos:end="7:17">error</name><index pos:start="7:18" pos:end="7:22">[<expr pos:start="7:19" pos:end="7:21"><literal type="number" pos:start="7:19" pos:end="7:21">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:35"><expr pos:start="13:5" pos:end="13:34"><call pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:10">memset</name><argument_list pos:start="13:11" pos:end="13:34">(<argument pos:start="13:12" pos:end="13:16"><expr pos:start="13:12" pos:end="13:16"><operator pos:start="13:12" pos:end="13:12">&amp;</operator><name pos:start="13:13" pos:end="13:16">octx</name></expr></argument>, <argument pos:start="13:19" pos:end="13:19"><expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr></argument>, <argument pos:start="13:22" pos:end="13:33"><expr pos:start="13:22" pos:end="13:33"><sizeof pos:start="13:22" pos:end="13:33">sizeof<argument_list pos:start="13:28" pos:end="13:33">(<argument pos:start="13:29" pos:end="13:32"><expr pos:start="13:29" pos:end="13:32"><name pos:start="13:29" pos:end="13:32">octx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:63">/* split the commandline into an internal representation */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:64"><expr pos:start="19:5" pos:end="19:63"><name pos:start="19:5" pos:end="19:7">ret</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:63"><name pos:start="19:11" pos:end="19:27">split_commandline</name><argument_list pos:start="19:28" pos:end="19:63">(<argument pos:start="19:29" pos:end="19:33"><expr pos:start="19:29" pos:end="19:33"><operator pos:start="19:29" pos:end="19:29">&amp;</operator><name pos:start="19:30" pos:end="19:33">octx</name></expr></argument>, <argument pos:start="19:36" pos:end="19:39"><expr pos:start="19:36" pos:end="19:39"><name pos:start="19:36" pos:end="19:39">argc</name></expr></argument>, <argument pos:start="19:42" pos:end="19:45"><expr pos:start="19:42" pos:end="19:45"><name pos:start="19:42" pos:end="19:45">argv</name></expr></argument>, <argument pos:start="19:48" pos:end="19:54"><expr pos:start="19:48" pos:end="19:54"><name pos:start="19:48" pos:end="19:54">options</name></expr></argument>, <argument pos:start="19:57" pos:end="19:62"><expr pos:start="19:57" pos:end="19:62"><name pos:start="19:57" pos:end="19:62">groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition> <block pos:start="21:18" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:74"><expr pos:start="23:9" pos:end="23:73"><call pos:start="23:9" pos:end="23:73"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:73">(<argument pos:start="23:16" pos:end="23:19"><expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr></argument>, <argument pos:start="23:22" pos:end="23:33"><expr pos:start="23:22" pos:end="23:33"><name pos:start="23:22" pos:end="23:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="23:36" pos:end="23:72"><expr pos:start="23:36" pos:end="23:72"><literal type="string" pos:start="23:36" pos:end="23:72">"Error splitting the argument list: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="25:9" pos:end="25:18">goto <name pos:start="25:14" pos:end="25:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:30">/* apply global options */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:49"><name pos:start="33:11" pos:end="33:24">parse_optgroup</name><argument_list pos:start="33:25" pos:end="33:49">(<argument pos:start="33:26" pos:end="33:29"><expr pos:start="33:26" pos:end="33:29"><name pos:start="33:26" pos:end="33:29">NULL</name></expr></argument>, <argument pos:start="33:32" pos:end="33:48"><expr pos:start="33:32" pos:end="33:48"><operator pos:start="33:32" pos:end="33:32">&amp;</operator><name pos:start="33:33" pos:end="33:48"><name pos:start="33:33" pos:end="33:36">octx</name><operator pos:start="33:37" pos:end="33:37">.</operator><name pos:start="33:38" pos:end="33:48">global_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">&lt;</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>)</condition> <block pos:start="35:18" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:69"><expr pos:start="37:9" pos:end="37:68"><call pos:start="37:9" pos:end="37:68"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:68">(<argument pos:start="37:16" pos:end="37:19"><expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">NULL</name></expr></argument>, <argument pos:start="37:22" pos:end="37:33"><expr pos:start="37:22" pos:end="37:33"><name pos:start="37:22" pos:end="37:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="37:36" pos:end="37:67"><expr pos:start="37:36" pos:end="37:67"><literal type="string" pos:start="37:36" pos:end="37:67">"Error parsing global options: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:26">/* open input files */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:75"><expr pos:start="47:5" pos:end="47:74"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:74"><name pos:start="47:11" pos:end="47:20">open_files</name><argument_list pos:start="47:21" pos:end="47:74">(<argument pos:start="47:22" pos:end="47:47"><expr pos:start="47:22" pos:end="47:47"><operator pos:start="47:22" pos:end="47:22">&amp;</operator><name pos:start="47:23" pos:end="47:47"><name pos:start="47:23" pos:end="47:26">octx</name><operator pos:start="47:27" pos:end="47:27">.</operator><name pos:start="47:28" pos:end="47:33">groups</name><index pos:start="47:34" pos:end="47:47">[<expr pos:start="47:35" pos:end="47:46"><name pos:start="47:35" pos:end="47:46">GROUP_INFILE</name></expr>]</index></name></expr></argument>, <argument pos:start="47:50" pos:end="47:56"><expr pos:start="47:50" pos:end="47:56"><literal type="string" pos:start="47:50" pos:end="47:56">"input"</literal></expr></argument>, <argument pos:start="47:59" pos:end="47:73"><expr pos:start="47:59" pos:end="47:73"><name pos:start="47:59" pos:end="47:73">open_input_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:16">(<expr pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">&lt;</operator> <literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr>)</condition> <block pos:start="49:18" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <expr_stmt pos:start="51:9" pos:end="51:66"><expr pos:start="51:9" pos:end="51:65"><call pos:start="51:9" pos:end="51:65"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:65">(<argument pos:start="51:16" pos:end="51:19"><expr pos:start="51:16" pos:end="51:19"><name pos:start="51:16" pos:end="51:19">NULL</name></expr></argument>, <argument pos:start="51:22" pos:end="51:33"><expr pos:start="51:22" pos:end="51:33"><name pos:start="51:22" pos:end="51:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="51:36" pos:end="51:64"><expr pos:start="51:36" pos:end="51:64"><literal type="string" pos:start="51:36" pos:end="51:64">"Error opening input files: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:27">/* open output files */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:78"><expr pos:start="61:5" pos:end="61:77"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:77"><name pos:start="61:11" pos:end="61:20">open_files</name><argument_list pos:start="61:21" pos:end="61:77">(<argument pos:start="61:22" pos:end="61:48"><expr pos:start="61:22" pos:end="61:48"><operator pos:start="61:22" pos:end="61:22">&amp;</operator><name pos:start="61:23" pos:end="61:48"><name pos:start="61:23" pos:end="61:26">octx</name><operator pos:start="61:27" pos:end="61:27">.</operator><name pos:start="61:28" pos:end="61:33">groups</name><index pos:start="61:34" pos:end="61:48">[<expr pos:start="61:35" pos:end="61:47"><name pos:start="61:35" pos:end="61:47">GROUP_OUTFILE</name></expr>]</index></name></expr></argument>, <argument pos:start="61:51" pos:end="61:58"><expr pos:start="61:51" pos:end="61:58"><literal type="string" pos:start="61:51" pos:end="61:58">"output"</literal></expr></argument>, <argument pos:start="61:61" pos:end="61:76"><expr pos:start="61:61" pos:end="61:76"><name pos:start="61:61" pos:end="61:76">open_output_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:67"><expr pos:start="65:9" pos:end="65:66"><call pos:start="65:9" pos:end="65:66"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:66">(<argument pos:start="65:16" pos:end="65:19"><expr pos:start="65:16" pos:end="65:19"><name pos:start="65:16" pos:end="65:19">NULL</name></expr></argument>, <argument pos:start="65:22" pos:end="65:33"><expr pos:start="65:22" pos:end="65:33"><name pos:start="65:22" pos:end="65:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="65:36" pos:end="65:65"><expr pos:start="65:36" pos:end="65:65"><literal type="string" pos:start="65:36" pos:end="65:65">"Error opening output files: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="73:1" pos:end="73:5"><name pos:start="73:1" pos:end="73:4">fail</name>:</label>

    <expr_stmt pos:start="75:5" pos:end="75:32"><expr pos:start="75:5" pos:end="75:31"><call pos:start="75:5" pos:end="75:31"><name pos:start="75:5" pos:end="75:24">uninit_parse_context</name><argument_list pos:start="75:25" pos:end="75:31">(<argument pos:start="75:26" pos:end="75:30"><expr pos:start="75:26" pos:end="75:30"><operator pos:start="75:26" pos:end="75:26">&amp;</operator><name pos:start="75:27" pos:end="75:30">octx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:16">(<expr pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">&lt;</operator> <literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr>)</condition> <block pos:start="77:18" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:50">

        <expr_stmt pos:start="79:9" pos:end="79:47"><expr pos:start="79:9" pos:end="79:46"><call pos:start="79:9" pos:end="79:46"><name pos:start="79:9" pos:end="79:19">av_strerror</name><argument_list pos:start="79:20" pos:end="79:46">(<argument pos:start="79:21" pos:end="79:23"><expr pos:start="79:21" pos:end="79:23"><name pos:start="79:21" pos:end="79:23">ret</name></expr></argument>, <argument pos:start="79:26" pos:end="79:30"><expr pos:start="79:26" pos:end="79:30"><name pos:start="79:26" pos:end="79:30">error</name></expr></argument>, <argument pos:start="79:33" pos:end="79:45"><expr pos:start="79:33" pos:end="79:45"><sizeof pos:start="79:33" pos:end="79:45">sizeof<argument_list pos:start="79:39" pos:end="79:45">(<argument pos:start="79:40" pos:end="79:44"><expr pos:start="79:40" pos:end="79:44"><name pos:start="79:40" pos:end="79:44">error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:50"><expr pos:start="81:9" pos:end="81:49"><call pos:start="81:9" pos:end="81:49"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="81:49">(<argument pos:start="81:16" pos:end="81:19"><expr pos:start="81:16" pos:end="81:19"><name pos:start="81:16" pos:end="81:19">NULL</name></expr></argument>, <argument pos:start="81:22" pos:end="81:33"><expr pos:start="81:22" pos:end="81:33"><name pos:start="81:22" pos:end="81:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="81:36" pos:end="81:41"><expr pos:start="81:36" pos:end="81:41"><literal type="string" pos:start="81:36" pos:end="81:41">"%s\n"</literal></expr></argument>, <argument pos:start="81:44" pos:end="81:48"><expr pos:start="81:44" pos:end="81:48"><name pos:start="81:44" pos:end="81:48">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="85:5" pos:end="85:15">return <expr pos:start="85:12" pos:end="85:14"><name pos:start="85:12" pos:end="85:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
