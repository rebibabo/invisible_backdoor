<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12534.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">QObject</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:28">parse_object</name><parameter_list pos:start="1:29" pos:end="1:66">(<parameter pos:start="1:30" pos:end="1:52"><decl pos:start="1:30" pos:end="1:52"><type pos:start="1:30" pos:end="1:52"><name pos:start="1:30" pos:end="1:46">JSONParserContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">ctxt</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:65"><decl pos:start="1:55" pos:end="1:65"><type pos:start="1:55" pos:end="1:65"><name pos:start="1:55" pos:end="1:61">va_list</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">ap</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:16">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">QDict</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:15">dict</name> <init pos:start="5:17" pos:end="5:22">= <expr pos:start="5:19" pos:end="5:22"><name pos:start="5:19" pos:end="5:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">QObject</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">token</name></decl>, <decl pos:start="7:21" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:13"><modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:25">peek</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:61"><decl pos:start="9:5" pos:end="9:60"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:21">JSONParserContext</name></type> <name pos:start="9:23" pos:end="9:32">saved_ctxt</name> <init pos:start="9:34" pos:end="9:60">= <expr pos:start="9:36" pos:end="9:60"><call pos:start="9:36" pos:end="9:60"><name pos:start="9:36" pos:end="9:54">parser_context_save</name><argument_list pos:start="9:55" pos:end="9:60">(<argument pos:start="9:56" pos:end="9:59"><expr pos:start="9:56" pos:end="9:59"><name pos:start="9:56" pos:end="9:59">ctxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:43"><expr pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:9">token</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:42"><name pos:start="13:13" pos:end="13:36">parser_context_pop_token</name><argument_list pos:start="13:37" pos:end="13:42">(<argument pos:start="13:38" pos:end="13:41"><expr pos:start="13:38" pos:end="13:41"><name pos:start="13:38" pos:end="13:41">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:22">(<expr pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:13">token</name> <operator pos:start="15:15" pos:end="15:16">==</operator> <name pos:start="15:18" pos:end="15:21">NULL</name></expr>)</condition> <block pos:start="15:24" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:17">

        <goto pos:start="17:9" pos:end="17:17">goto <name pos:start="17:14" pos:end="17:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:39">(<expr pos:start="23:9" pos:end="23:38"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:38"><name pos:start="23:10" pos:end="23:26">token_is_operator</name><argument_list pos:start="23:27" pos:end="23:38">(<argument pos:start="23:28" pos:end="23:32"><expr pos:start="23:28" pos:end="23:32"><name pos:start="23:28" pos:end="23:32">token</name></expr></argument>, <argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><literal type="char" pos:start="23:35" pos:end="23:37">'{'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:41" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:17">

        <goto pos:start="25:9" pos:end="25:17">goto <name pos:start="25:14" pos:end="25:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:8">dict</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:22"><name pos:start="31:12" pos:end="31:20">qdict_new</name><argument_list pos:start="31:21" pos:end="31:22">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:8">peek</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <call pos:start="35:12" pos:end="35:42"><name pos:start="35:12" pos:end="35:36">parser_context_peek_token</name><argument_list pos:start="35:37" pos:end="35:42">(<argument pos:start="35:38" pos:end="35:41"><expr pos:start="35:38" pos:end="35:41"><name pos:start="35:38" pos:end="35:41">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:12">peek</name> <operator pos:start="37:14" pos:end="37:15">==</operator> <name pos:start="37:17" pos:end="37:20">NULL</name></expr>)</condition> <block pos:start="37:23" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:17">

        <expr_stmt pos:start="39:9" pos:end="39:49"><expr pos:start="39:9" pos:end="39:48"><call pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:19">parse_error</name><argument_list pos:start="39:20" pos:end="39:48">(<argument pos:start="39:21" pos:end="39:24"><expr pos:start="39:21" pos:end="39:24"><name pos:start="39:21" pos:end="39:24">ctxt</name></expr></argument>, <argument pos:start="39:27" pos:end="39:30"><expr pos:start="39:27" pos:end="39:30"><name pos:start="39:27" pos:end="39:30">NULL</name></expr></argument>, <argument pos:start="39:33" pos:end="39:47"><expr pos:start="39:33" pos:end="39:47"><literal type="string" pos:start="39:33" pos:end="39:47">"premature EOI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="105:5"><if pos:start="47:5" pos:end="101:5">if <condition pos:start="47:8" pos:end="47:38">(<expr pos:start="47:9" pos:end="47:37"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:37"><name pos:start="47:10" pos:end="47:26">token_is_operator</name><argument_list pos:start="47:27" pos:end="47:37">(<argument pos:start="47:28" pos:end="47:31"><expr pos:start="47:28" pos:end="47:31"><name pos:start="47:28" pos:end="47:31">peek</name></expr></argument>, <argument pos:start="47:34" pos:end="47:36"><expr pos:start="47:34" pos:end="47:36"><literal type="char" pos:start="47:34" pos:end="47:36">'}'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:40" pos:end="101:5">{<block_content pos:start="49:9" pos:end="99:9">

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:45">(<expr pos:start="49:13" pos:end="49:44"><call pos:start="49:13" pos:end="49:38"><name pos:start="49:13" pos:end="49:22">parse_pair</name><argument_list pos:start="49:23" pos:end="49:38">(<argument pos:start="49:24" pos:end="49:27"><expr pos:start="49:24" pos:end="49:27"><name pos:start="49:24" pos:end="49:27">ctxt</name></expr></argument>, <argument pos:start="49:30" pos:end="49:33"><expr pos:start="49:30" pos:end="49:33"><name pos:start="49:30" pos:end="49:33">dict</name></expr></argument>, <argument pos:start="49:36" pos:end="49:37"><expr pos:start="49:36" pos:end="49:37"><name pos:start="49:36" pos:end="49:37">ap</name></expr></argument>)</argument_list></call> <operator pos:start="49:40" pos:end="49:41">==</operator> <operator pos:start="49:43" pos:end="49:43">-</operator><literal type="number" pos:start="49:44" pos:end="49:44">1</literal></expr>)</condition> <block pos:start="49:47" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:21">

            <goto pos:start="51:13" pos:end="51:21">goto <name pos:start="51:18" pos:end="51:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:13">token</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:46"><name pos:start="57:17" pos:end="57:40">parser_context_pop_token</name><argument_list pos:start="57:41" pos:end="57:46">(<argument pos:start="57:42" pos:end="57:45"><expr pos:start="57:42" pos:end="57:45"><name pos:start="57:42" pos:end="57:45">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:26">(<expr pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:17">token</name> <operator pos:start="59:19" pos:end="59:20">==</operator> <name pos:start="59:22" pos:end="59:25">NULL</name></expr>)</condition> <block pos:start="59:28" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:21">

            <expr_stmt pos:start="61:13" pos:end="61:53"><expr pos:start="61:13" pos:end="61:52"><call pos:start="61:13" pos:end="61:52"><name pos:start="61:13" pos:end="61:23">parse_error</name><argument_list pos:start="61:24" pos:end="61:52">(<argument pos:start="61:25" pos:end="61:28"><expr pos:start="61:25" pos:end="61:28"><name pos:start="61:25" pos:end="61:28">ctxt</name></expr></argument>, <argument pos:start="61:31" pos:end="61:34"><expr pos:start="61:31" pos:end="61:34"><name pos:start="61:31" pos:end="61:34">NULL</name></expr></argument>, <argument pos:start="61:37" pos:end="61:51"><expr pos:start="61:37" pos:end="61:51"><literal type="string" pos:start="61:37" pos:end="61:51">"premature EOI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="63:13" pos:end="63:21">goto <name pos:start="63:18" pos:end="63:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <while pos:start="69:9" pos:end="99:9">while <condition pos:start="69:15" pos:end="69:46">(<expr pos:start="69:16" pos:end="69:45"><operator pos:start="69:16" pos:end="69:16">!</operator><call pos:start="69:17" pos:end="69:45"><name pos:start="69:17" pos:end="69:33">token_is_operator</name><argument_list pos:start="69:34" pos:end="69:45">(<argument pos:start="69:35" pos:end="69:39"><expr pos:start="69:35" pos:end="69:39"><name pos:start="69:35" pos:end="69:39">token</name></expr></argument>, <argument pos:start="69:42" pos:end="69:44"><expr pos:start="69:42" pos:end="69:44"><literal type="char" pos:start="69:42" pos:end="69:44">'}'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:48" pos:end="99:9">{<block_content pos:start="71:13" pos:end="97:13">

            <if_stmt pos:start="71:13" pos:end="77:13"><if pos:start="71:13" pos:end="77:13">if <condition pos:start="71:16" pos:end="71:47">(<expr pos:start="71:17" pos:end="71:46"><operator pos:start="71:17" pos:end="71:17">!</operator><call pos:start="71:18" pos:end="71:46"><name pos:start="71:18" pos:end="71:34">token_is_operator</name><argument_list pos:start="71:35" pos:end="71:46">(<argument pos:start="71:36" pos:end="71:40"><expr pos:start="71:36" pos:end="71:40"><name pos:start="71:36" pos:end="71:40">token</name></expr></argument>, <argument pos:start="71:43" pos:end="71:45"><expr pos:start="71:43" pos:end="71:45"><literal type="char" pos:start="71:43" pos:end="71:45">','</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:49" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:25">

                <expr_stmt pos:start="73:17" pos:end="73:71"><expr pos:start="73:17" pos:end="73:70"><call pos:start="73:17" pos:end="73:70"><name pos:start="73:17" pos:end="73:27">parse_error</name><argument_list pos:start="73:28" pos:end="73:70">(<argument pos:start="73:29" pos:end="73:32"><expr pos:start="73:29" pos:end="73:32"><name pos:start="73:29" pos:end="73:32">ctxt</name></expr></argument>, <argument pos:start="73:35" pos:end="73:39"><expr pos:start="73:35" pos:end="73:39"><name pos:start="73:35" pos:end="73:39">token</name></expr></argument>, <argument pos:start="73:42" pos:end="73:69"><expr pos:start="73:42" pos:end="73:69"><literal type="string" pos:start="73:42" pos:end="73:69">"expected separator in dict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="75:17" pos:end="75:25">goto <name pos:start="75:22" pos:end="75:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="81:13" pos:end="85:13"><if pos:start="81:13" pos:end="85:13">if <condition pos:start="81:16" pos:end="81:49">(<expr pos:start="81:17" pos:end="81:48"><call pos:start="81:17" pos:end="81:42"><name pos:start="81:17" pos:end="81:26">parse_pair</name><argument_list pos:start="81:27" pos:end="81:42">(<argument pos:start="81:28" pos:end="81:31"><expr pos:start="81:28" pos:end="81:31"><name pos:start="81:28" pos:end="81:31">ctxt</name></expr></argument>, <argument pos:start="81:34" pos:end="81:37"><expr pos:start="81:34" pos:end="81:37"><name pos:start="81:34" pos:end="81:37">dict</name></expr></argument>, <argument pos:start="81:40" pos:end="81:41"><expr pos:start="81:40" pos:end="81:41"><name pos:start="81:40" pos:end="81:41">ap</name></expr></argument>)</argument_list></call> <operator pos:start="81:44" pos:end="81:45">==</operator> <operator pos:start="81:47" pos:end="81:47">-</operator><literal type="number" pos:start="81:48" pos:end="81:48">1</literal></expr>)</condition> <block pos:start="81:51" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:25">

                <goto pos:start="83:17" pos:end="83:25">goto <name pos:start="83:22" pos:end="83:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="89:13" pos:end="89:51"><expr pos:start="89:13" pos:end="89:50"><name pos:start="89:13" pos:end="89:17">token</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <call pos:start="89:21" pos:end="89:50"><name pos:start="89:21" pos:end="89:44">parser_context_pop_token</name><argument_list pos:start="89:45" pos:end="89:50">(<argument pos:start="89:46" pos:end="89:49"><expr pos:start="89:46" pos:end="89:49"><name pos:start="89:46" pos:end="89:49">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:30">(<expr pos:start="91:17" pos:end="91:29"><name pos:start="91:17" pos:end="91:21">token</name> <operator pos:start="91:23" pos:end="91:24">==</operator> <name pos:start="91:26" pos:end="91:29">NULL</name></expr>)</condition> <block pos:start="91:32" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:25">

                <expr_stmt pos:start="93:17" pos:end="93:57"><expr pos:start="93:17" pos:end="93:56"><call pos:start="93:17" pos:end="93:56"><name pos:start="93:17" pos:end="93:27">parse_error</name><argument_list pos:start="93:28" pos:end="93:56">(<argument pos:start="93:29" pos:end="93:32"><expr pos:start="93:29" pos:end="93:32"><name pos:start="93:29" pos:end="93:32">ctxt</name></expr></argument>, <argument pos:start="93:35" pos:end="93:38"><expr pos:start="93:35" pos:end="93:38"><name pos:start="93:35" pos:end="93:38">NULL</name></expr></argument>, <argument pos:start="93:41" pos:end="93:55"><expr pos:start="93:41" pos:end="93:55"><literal type="string" pos:start="93:41" pos:end="93:55">"premature EOI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="95:17" pos:end="95:25">goto <name pos:start="95:22" pos:end="95:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="105:5">else <block pos:start="101:12" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:45">

        <expr_stmt pos:start="103:9" pos:end="103:45"><expr pos:start="103:9" pos:end="103:44"><operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:13">void</name><operator pos:start="103:14" pos:end="103:14">)</operator><call pos:start="103:15" pos:end="103:44"><name pos:start="103:15" pos:end="103:38">parser_context_pop_token</name><argument_list pos:start="103:39" pos:end="103:44">(<argument pos:start="103:40" pos:end="103:43"><expr pos:start="103:40" pos:end="103:43"><name pos:start="103:40" pos:end="103:43">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="109:5" pos:end="109:25">return <expr pos:start="109:12" pos:end="109:24"><call pos:start="109:12" pos:end="109:24"><name pos:start="109:12" pos:end="109:18">QOBJECT</name><argument_list pos:start="109:19" pos:end="109:24">(<argument pos:start="109:20" pos:end="109:23"><expr pos:start="109:20" pos:end="109:23"><name pos:start="109:20" pos:end="109:23">dict</name></expr></argument>)</argument_list></call></expr>;</return>



<label pos:start="113:1" pos:end="113:4"><name pos:start="113:1" pos:end="113:3">out</name>:</label>

    <expr_stmt pos:start="115:5" pos:end="115:45"><expr pos:start="115:5" pos:end="115:44"><call pos:start="115:5" pos:end="115:44"><name pos:start="115:5" pos:end="115:26">parser_context_restore</name><argument_list pos:start="115:27" pos:end="115:44">(<argument pos:start="115:28" pos:end="115:31"><expr pos:start="115:28" pos:end="115:31"><name pos:start="115:28" pos:end="115:31">ctxt</name></expr></argument>, <argument pos:start="115:34" pos:end="115:43"><expr pos:start="115:34" pos:end="115:43"><name pos:start="115:34" pos:end="115:43">saved_ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:18"><expr pos:start="117:5" pos:end="117:17"><call pos:start="117:5" pos:end="117:17"><name pos:start="117:5" pos:end="117:11">QDECREF</name><argument_list pos:start="117:12" pos:end="117:17">(<argument pos:start="117:13" pos:end="117:16"><expr pos:start="117:13" pos:end="117:16"><name pos:start="117:13" pos:end="117:16">dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="119:5" pos:end="119:16">return <expr pos:start="119:12" pos:end="119:15"><name pos:start="119:12" pos:end="119:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
