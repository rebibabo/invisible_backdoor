<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24801.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:26">nic_receive</name><parameter_list pos:start="1:27" pos:end="1:81">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:42">VLANClientState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">vc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:67"><decl pos:start="1:49" pos:end="1:67"><type pos:start="1:49" pos:end="1:67"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type> <name pos:start="1:65" pos:end="1:67">buf</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:80"><decl pos:start="1:70" pos:end="1:80"><type pos:start="1:70" pos:end="1:80"><name pos:start="1:70" pos:end="1:75">size_t</name></type> <name pos:start="1:77" pos:end="1:80">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="201:1">{<block_content pos:start="13:5" pos:end="199:16">

    <comment type="block" pos:start="5:5" pos:end="11:7">/* TODO:

     * - Magic packets should set bit 30 in power management driver register.

     * - Interesting packets should set bit 29 in power management driver register.

     */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">EEPRO100State</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:20">s</name> <init pos:start="13:22" pos:end="13:33">= <expr pos:start="13:24" pos:end="13:33"><name pos:start="13:24" pos:end="13:33"><name pos:start="13:24" pos:end="13:25">vc</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:23">rfd_status</name> <init pos:start="15:25" pos:end="15:32">= <expr pos:start="15:27" pos:end="15:32"><literal type="number" pos:start="15:27" pos:end="15:32">0xa000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="19:47"><decl pos:start="17:5" pos:end="19:46"><type pos:start="17:5" pos:end="17:24"><specifier pos:start="17:5" pos:end="17:10">static</specifier> <specifier pos:start="17:12" pos:end="17:16">const</specifier> <name pos:start="17:18" pos:end="17:24">uint8_t</name></type> <name pos:start="17:26" pos:end="17:45"><name pos:start="17:26" pos:end="17:42">broadcast_macaddr</name><index pos:start="17:43" pos:end="17:45">[<expr pos:start="17:44" pos:end="17:44"><literal type="number" pos:start="17:44" pos:end="17:44">6</literal></expr>]</index></name> <init pos:start="17:47" pos:end="19:46">=

        <expr pos:start="19:9" pos:end="19:46"><block pos:start="19:9" pos:end="19:46">{ <expr pos:start="19:11" pos:end="19:14"><literal type="number" pos:start="19:11" pos:end="19:14">0xff</literal></expr>, <expr pos:start="19:17" pos:end="19:20"><literal type="number" pos:start="19:17" pos:end="19:20">0xff</literal></expr>, <expr pos:start="19:23" pos:end="19:26"><literal type="number" pos:start="19:23" pos:end="19:26">0xff</literal></expr>, <expr pos:start="19:29" pos:end="19:32"><literal type="number" pos:start="19:29" pos:end="19:32">0xff</literal></expr>, <expr pos:start="19:35" pos:end="19:38"><literal type="number" pos:start="19:35" pos:end="19:38">0xff</literal></expr>, <expr pos:start="19:41" pos:end="19:44"><literal type="number" pos:start="19:41" pos:end="19:44">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:38">/* TODO: check multiple IA bit. */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><call pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:44">(<argument pos:start="25:12" pos:end="25:43"><expr pos:start="25:12" pos:end="25:43"><operator pos:start="25:12" pos:end="25:12">!</operator><operator pos:start="25:13" pos:end="25:13">(</operator><name pos:start="25:14" pos:end="25:33"><name pos:start="25:14" pos:end="25:14">s</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:29">configuration</name><index pos:start="25:30" pos:end="25:33">[<expr pos:start="25:31" pos:end="25:32"><literal type="number" pos:start="25:31" pos:end="25:32">20</literal></expr>]</index></name> <operator pos:start="25:35" pos:end="25:35">&amp;</operator> <call pos:start="25:37" pos:end="25:42"><name pos:start="25:37" pos:end="25:39">BIT</name><argument_list pos:start="25:40" pos:end="25:42">(<argument pos:start="25:41" pos:end="25:41"><expr pos:start="25:41" pos:end="25:41"><literal type="number" pos:start="25:41" pos:end="25:41">6</literal></expr></argument>)</argument_list></call><operator pos:start="25:43" pos:end="25:43">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="111:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:35">(<expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:24">configuration</name><index pos:start="29:25" pos:end="29:27">[<expr pos:start="29:26" pos:end="29:26"><literal type="number" pos:start="29:26" pos:end="29:26">8</literal></expr>]</index></name> <operator pos:start="29:29" pos:end="29:29">&amp;</operator> <literal type="number" pos:start="29:31" pos:end="29:34">0x80</literal></expr>)</condition> <block pos:start="29:37" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <comment type="block" pos:start="31:9" pos:end="31:31">/* CSMA is disabled. */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:58"><expr pos:start="33:9" pos:end="33:57"><call pos:start="33:9" pos:end="33:57"><name pos:start="33:9" pos:end="33:14">logout</name><argument_list pos:start="33:15" pos:end="33:57">(<argument pos:start="33:16" pos:end="33:53"><expr pos:start="33:16" pos:end="33:53"><literal type="string" pos:start="33:16" pos:end="33:53">"%p received while CSMA is disabled\n"</literal></expr></argument>, <argument pos:start="33:56" pos:end="33:56"><expr pos:start="33:56" pos:end="33:56"><name pos:start="33:56" pos:end="33:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="37:7" pos:end="49:5">else if <condition pos:start="37:15" pos:end="37:54">(<expr pos:start="37:16" pos:end="37:53"><name pos:start="37:16" pos:end="37:19">size</name> <operator pos:start="37:21" pos:end="37:21">&lt;</operator> <literal type="number" pos:start="37:23" pos:end="37:24">64</literal> <operator pos:start="37:26" pos:end="37:27">&amp;&amp;</operator> <operator pos:start="37:29" pos:end="37:29">(</operator><name pos:start="37:30" pos:end="37:48"><name pos:start="37:30" pos:end="37:30">s</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:45">configuration</name><index pos:start="37:46" pos:end="37:48">[<expr pos:start="37:47" pos:end="37:47"><literal type="number" pos:start="37:47" pos:end="37:47">7</literal></expr>]</index></name> <operator pos:start="37:50" pos:end="37:50">&amp;</operator> <literal type="number" pos:start="37:52" pos:end="37:52">1</literal><operator pos:start="37:53" pos:end="37:53">)</operator></expr>)</condition> <block pos:start="37:56" pos:end="49:5">{<block_content pos:start="43:9" pos:end="45:46">

        <comment type="block" pos:start="39:9" pos:end="41:38">/* Short frame and configuration byte 7/0 (discard short receive) set:

         * Short frame is discarded */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:64"><expr pos:start="43:9" pos:end="43:63"><call pos:start="43:9" pos:end="43:63"><name pos:start="43:9" pos:end="43:14">logout</name><argument_list pos:start="43:15" pos:end="43:63">(<argument pos:start="43:16" pos:end="43:53"><expr pos:start="43:16" pos:end="43:53"><literal type="string" pos:start="43:16" pos:end="43:53">"%p received short frame (%zu byte)\n"</literal></expr></argument>, <argument pos:start="43:56" pos:end="43:56"><expr pos:start="43:56" pos:end="43:56"><name pos:start="43:56" pos:end="43:56">s</name></expr></argument>, <argument pos:start="43:59" pos:end="43:62"><expr pos:start="43:59" pos:end="43:62"><name pos:start="43:59" pos:end="43:62">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:46"><expr pos:start="45:9" pos:end="45:45"><name pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:21">statistics</name><operator pos:start="45:22" pos:end="45:22">.</operator><name pos:start="45:23" pos:end="45:43">rx_short_frame_errors</name></name><operator pos:start="45:44" pos:end="45:45">++</operator></expr>;</expr_stmt>

        <comment type="line" pos:start="47:9" pos:end="47:22">//~ return -1;</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="49:7" pos:end="59:5">else if <condition pos:start="49:15" pos:end="49:78">(<expr pos:start="49:16" pos:end="49:77"><operator pos:start="49:16" pos:end="49:16">(</operator><name pos:start="49:17" pos:end="49:20">size</name> <operator pos:start="49:22" pos:end="49:22">&gt;</operator> <name pos:start="49:24" pos:end="49:41">MAX_ETH_FRAME_SIZE</name> <operator pos:start="49:43" pos:end="49:43">+</operator> <literal type="number" pos:start="49:45" pos:end="49:45">4</literal><operator pos:start="49:46" pos:end="49:46">)</operator> <operator pos:start="49:48" pos:end="49:49">&amp;&amp;</operator> <operator pos:start="49:51" pos:end="49:51">!</operator><operator pos:start="49:52" pos:end="49:52">(</operator><name pos:start="49:53" pos:end="49:72"><name pos:start="49:53" pos:end="49:53">s</name><operator pos:start="49:54" pos:end="49:55">-&gt;</operator><name pos:start="49:56" pos:end="49:68">configuration</name><index pos:start="49:69" pos:end="49:72">[<expr pos:start="49:70" pos:end="49:71"><literal type="number" pos:start="49:70" pos:end="49:71">18</literal></expr>]</index></name> <operator pos:start="49:74" pos:end="49:74">&amp;</operator> <literal type="number" pos:start="49:76" pos:end="49:76">8</literal><operator pos:start="49:77" pos:end="49:77">)</operator></expr>)</condition> <block pos:start="49:80" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <comment type="block" pos:start="51:9" pos:end="53:40">/* Long frame and configuration byte 18/3 (long receive ok) not set:

         * Long frames are discarded. */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:72"><expr pos:start="55:9" pos:end="55:71"><call pos:start="55:9" pos:end="55:71"><name pos:start="55:9" pos:end="55:14">logout</name><argument_list pos:start="55:15" pos:end="55:71">(<argument pos:start="55:16" pos:end="55:61"><expr pos:start="55:16" pos:end="55:61"><literal type="string" pos:start="55:16" pos:end="55:61">"%p received long frame (%zu byte), ignored\n"</literal></expr></argument>, <argument pos:start="55:64" pos:end="55:64"><expr pos:start="55:64" pos:end="55:64"><name pos:start="55:64" pos:end="55:64">s</name></expr></argument>, <argument pos:start="55:67" pos:end="55:70"><expr pos:start="55:67" pos:end="55:70"><name pos:start="55:67" pos:end="55:70">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="67:5">else if <condition pos:start="59:15" pos:end="59:47">(<expr pos:start="59:16" pos:end="59:46"><call pos:start="59:16" pos:end="59:41"><name pos:start="59:16" pos:end="59:21">memcmp</name><argument_list pos:start="59:22" pos:end="59:41">(<argument pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:25">buf</name></expr></argument>, <argument pos:start="59:28" pos:end="59:37"><expr pos:start="59:28" pos:end="59:37"><name pos:start="59:28" pos:end="59:37"><name pos:start="59:28" pos:end="59:28">s</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:37">macaddr</name></name></expr></argument>, <argument pos:start="59:40" pos:end="59:40"><expr pos:start="59:40" pos:end="59:40"><literal type="number" pos:start="59:40" pos:end="59:40">6</literal></expr></argument>)</argument_list></call> <operator pos:start="59:43" pos:end="59:44">==</operator> <literal type="number" pos:start="59:46" pos:end="59:46">0</literal></expr>)</condition> <block pos:start="59:49" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:76">       <comment type="line" pos:start="59:57" pos:end="59:62">// !!!</comment>

        <comment type="block" pos:start="61:9" pos:end="61:47">/* Frame matches individual address. */</comment>

        <comment type="block" pos:start="63:9" pos:end="63:63">/* TODO: check configuration byte 15/4 (ignore U/L). */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:76"><expr pos:start="65:9" pos:end="65:75"><call pos:start="65:9" pos:end="65:75"><name pos:start="65:9" pos:end="65:13">TRACE</name><argument_list pos:start="65:14" pos:end="65:75">(<argument pos:start="65:15" pos:end="65:18"><expr pos:start="65:15" pos:end="65:18"><name pos:start="65:15" pos:end="65:18">RXTX</name></expr></argument>, <argument pos:start="65:21" pos:end="65:74"><expr pos:start="65:21" pos:end="65:74"><call pos:start="65:21" pos:end="65:74"><name pos:start="65:21" pos:end="65:26">logout</name><argument_list pos:start="65:27" pos:end="65:74">(<argument pos:start="65:28" pos:end="65:64"><expr pos:start="65:28" pos:end="65:64"><literal type="string" pos:start="65:28" pos:end="65:64">"%p received frame for me, len=%zu\n"</literal></expr></argument>, <argument pos:start="65:67" pos:end="65:67"><expr pos:start="65:67" pos:end="65:67"><name pos:start="65:67" pos:end="65:67">s</name></expr></argument>, <argument pos:start="65:70" pos:end="65:73"><expr pos:start="65:70" pos:end="65:73"><name pos:start="65:70" pos:end="65:73">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="67:7" pos:end="75:5">else if <condition pos:start="67:15" pos:end="67:54">(<expr pos:start="67:16" pos:end="67:53"><call pos:start="67:16" pos:end="67:48"><name pos:start="67:16" pos:end="67:21">memcmp</name><argument_list pos:start="67:22" pos:end="67:48">(<argument pos:start="67:23" pos:end="67:25"><expr pos:start="67:23" pos:end="67:25"><name pos:start="67:23" pos:end="67:25">buf</name></expr></argument>, <argument pos:start="67:28" pos:end="67:44"><expr pos:start="67:28" pos:end="67:44"><name pos:start="67:28" pos:end="67:44">broadcast_macaddr</name></expr></argument>, <argument pos:start="67:47" pos:end="67:47"><expr pos:start="67:47" pos:end="67:47"><literal type="number" pos:start="67:47" pos:end="67:47">6</literal></expr></argument>)</argument_list></call> <operator pos:start="67:50" pos:end="67:51">==</operator> <literal type="number" pos:start="67:53" pos:end="67:53">0</literal></expr>)</condition> <block pos:start="67:56" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:29">

        <comment type="block" pos:start="69:9" pos:end="69:30">/* Broadcast frame. */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:73"><expr pos:start="71:9" pos:end="71:72"><call pos:start="71:9" pos:end="71:72"><name pos:start="71:9" pos:end="71:13">TRACE</name><argument_list pos:start="71:14" pos:end="71:72">(<argument pos:start="71:15" pos:end="71:18"><expr pos:start="71:15" pos:end="71:18"><name pos:start="71:15" pos:end="71:18">RXTX</name></expr></argument>, <argument pos:start="71:21" pos:end="71:71"><expr pos:start="71:21" pos:end="71:71"><call pos:start="71:21" pos:end="71:71"><name pos:start="71:21" pos:end="71:26">logout</name><argument_list pos:start="71:27" pos:end="71:71">(<argument pos:start="71:28" pos:end="71:61"><expr pos:start="71:28" pos:end="71:61"><literal type="string" pos:start="71:28" pos:end="71:61">"%p received broadcast, len=%zu\n"</literal></expr></argument>, <argument pos:start="71:64" pos:end="71:64"><expr pos:start="71:64" pos:end="71:64"><name pos:start="71:64" pos:end="71:64">s</name></expr></argument>, <argument pos:start="71:67" pos:end="71:70"><expr pos:start="71:67" pos:end="71:70"><name pos:start="71:67" pos:end="71:70">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:29"><expr pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:18">rfd_status</name> <operator pos:start="73:20" pos:end="73:21">|=</operator> <literal type="number" pos:start="73:23" pos:end="73:28">0x0002</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="75:7" pos:end="95:5">else if <condition pos:start="75:15" pos:end="75:29">(<expr pos:start="75:16" pos:end="75:28"><name pos:start="75:16" pos:end="75:21"><name pos:start="75:16" pos:end="75:18">buf</name><index pos:start="75:19" pos:end="75:21">[<expr pos:start="75:20" pos:end="75:20"><literal type="number" pos:start="75:20" pos:end="75:20">0</literal></expr>]</index></name> <operator pos:start="75:23" pos:end="75:23">&amp;</operator> <literal type="number" pos:start="75:25" pos:end="75:28">0x01</literal></expr>)</condition> <block pos:start="75:31" pos:end="95:5">{<block_content pos:start="79:9" pos:end="93:29"> <comment type="line" pos:start="75:33" pos:end="75:38">// !!!</comment>

        <comment type="block" pos:start="77:9" pos:end="77:30">/* Multicast frame. */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:73"><expr pos:start="79:9" pos:end="79:72"><call pos:start="79:9" pos:end="79:72"><name pos:start="79:9" pos:end="79:13">TRACE</name><argument_list pos:start="79:14" pos:end="79:72">(<argument pos:start="79:15" pos:end="79:18"><expr pos:start="79:15" pos:end="79:18"><name pos:start="79:15" pos:end="79:18">RXTX</name></expr></argument>, <argument pos:start="79:21" pos:end="79:71"><expr pos:start="79:21" pos:end="79:71"><call pos:start="79:21" pos:end="79:71"><name pos:start="79:21" pos:end="79:26">logout</name><argument_list pos:start="79:27" pos:end="79:71">(<argument pos:start="79:28" pos:end="79:61"><expr pos:start="79:28" pos:end="79:61"><literal type="string" pos:start="79:28" pos:end="79:61">"%p received multicast, len=%zu\n"</literal></expr></argument>, <argument pos:start="79:64" pos:end="79:64"><expr pos:start="79:64" pos:end="79:64"><name pos:start="79:64" pos:end="79:64">s</name></expr></argument>, <argument pos:start="79:67" pos:end="79:70"><expr pos:start="79:67" pos:end="79:70"><name pos:start="79:67" pos:end="79:70">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="81:9" pos:end="81:44">/* TODO: check multicast all bit. */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:49"><expr pos:start="83:9" pos:end="83:48"><call pos:start="83:9" pos:end="83:48"><name pos:start="83:9" pos:end="83:14">assert</name><argument_list pos:start="83:15" pos:end="83:48">(<argument pos:start="83:16" pos:end="83:47"><expr pos:start="83:16" pos:end="83:47"><operator pos:start="83:16" pos:end="83:16">!</operator><operator pos:start="83:17" pos:end="83:17">(</operator><name pos:start="83:18" pos:end="83:37"><name pos:start="83:18" pos:end="83:18">s</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:33">configuration</name><index pos:start="83:34" pos:end="83:37">[<expr pos:start="83:35" pos:end="83:36"><literal type="number" pos:start="83:35" pos:end="83:36">21</literal></expr>]</index></name> <operator pos:start="83:39" pos:end="83:39">&amp;</operator> <call pos:start="83:41" pos:end="83:46"><name pos:start="83:41" pos:end="83:43">BIT</name><argument_list pos:start="83:44" pos:end="83:46">(<argument pos:start="83:45" pos:end="83:45"><expr pos:start="83:45" pos:end="83:45"><literal type="number" pos:start="83:45" pos:end="83:45">3</literal></expr></argument>)</argument_list></call><operator pos:start="83:47" pos:end="83:47">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="85:9" pos:end="85:47"><decl pos:start="85:9" pos:end="85:46"><type pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">int</name></type> <name pos:start="85:13" pos:end="85:21">mcast_idx</name> <init pos:start="85:23" pos:end="85:46">= <expr pos:start="85:25" pos:end="85:46"><call pos:start="85:25" pos:end="85:46"><name pos:start="85:25" pos:end="85:41">compute_mcast_idx</name><argument_list pos:start="85:42" pos:end="85:46">(<argument pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><name pos:start="85:43" pos:end="85:45">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:64">(<expr pos:start="87:13" pos:end="87:63"><operator pos:start="87:13" pos:end="87:13">!</operator><operator pos:start="87:14" pos:end="87:14">(</operator><name pos:start="87:15" pos:end="87:37"><name pos:start="87:15" pos:end="87:15">s</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:21">mult</name><index pos:start="87:22" pos:end="87:37">[<expr pos:start="87:23" pos:end="87:36"><name pos:start="87:23" pos:end="87:31">mcast_idx</name> <operator pos:start="87:33" pos:end="87:34">&gt;&gt;</operator> <literal type="number" pos:start="87:36" pos:end="87:36">3</literal></expr>]</index></name> <operator pos:start="87:39" pos:end="87:39">&amp;</operator> <operator pos:start="87:41" pos:end="87:41">(</operator><literal type="number" pos:start="87:42" pos:end="87:42">1</literal> <operator pos:start="87:44" pos:end="87:45">&lt;&lt;</operator> <operator pos:start="87:47" pos:end="87:47">(</operator><name pos:start="87:48" pos:end="87:56">mcast_idx</name> <operator pos:start="87:58" pos:end="87:58">&amp;</operator> <literal type="number" pos:start="87:60" pos:end="87:60">7</literal><operator pos:start="87:61" pos:end="87:61">)</operator><operator pos:start="87:62" pos:end="87:62">)</operator><operator pos:start="87:63" pos:end="87:63">)</operator></expr>)</condition> <block pos:start="87:66" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:24">

            <return pos:start="89:13" pos:end="89:24">return <expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:29"><expr pos:start="93:9" pos:end="93:28"><name pos:start="93:9" pos:end="93:18">rfd_status</name> <operator pos:start="93:20" pos:end="93:21">|=</operator> <literal type="number" pos:start="93:23" pos:end="93:28">0x0002</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="103:5">else if <condition pos:start="95:15" pos:end="95:40">(<expr pos:start="95:16" pos:end="95:39"><name pos:start="95:16" pos:end="95:35"><name pos:start="95:16" pos:end="95:16">s</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:31">configuration</name><index pos:start="95:32" pos:end="95:35">[<expr pos:start="95:33" pos:end="95:34"><literal type="number" pos:start="95:33" pos:end="95:34">15</literal></expr>]</index></name> <operator pos:start="95:37" pos:end="95:37">&amp;</operator> <literal type="number" pos:start="95:39" pos:end="95:39">1</literal></expr>)</condition> <block pos:start="95:42" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:29">

        <comment type="block" pos:start="97:9" pos:end="97:39">/* Promiscuous: receive all. */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:89"><expr pos:start="99:9" pos:end="99:88"><call pos:start="99:9" pos:end="99:88"><name pos:start="99:9" pos:end="99:13">TRACE</name><argument_list pos:start="99:14" pos:end="99:88">(<argument pos:start="99:15" pos:end="99:18"><expr pos:start="99:15" pos:end="99:18"><name pos:start="99:15" pos:end="99:18">RXTX</name></expr></argument>, <argument pos:start="99:21" pos:end="99:87"><expr pos:start="99:21" pos:end="99:87"><call pos:start="99:21" pos:end="99:87"><name pos:start="99:21" pos:end="99:26">logout</name><argument_list pos:start="99:27" pos:end="99:87">(<argument pos:start="99:28" pos:end="99:77"><expr pos:start="99:28" pos:end="99:77"><literal type="string" pos:start="99:28" pos:end="99:77">"%p received frame in promiscuous mode, len=%zu\n"</literal></expr></argument>, <argument pos:start="99:80" pos:end="99:80"><expr pos:start="99:80" pos:end="99:80"><name pos:start="99:80" pos:end="99:80">s</name></expr></argument>, <argument pos:start="99:83" pos:end="99:86"><expr pos:start="99:83" pos:end="99:86"><name pos:start="99:83" pos:end="99:86">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:18">rfd_status</name> <operator pos:start="101:20" pos:end="101:21">|=</operator> <literal type="number" pos:start="101:23" pos:end="101:28">0x0004</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="111:5">else <block pos:start="103:12" pos:end="111:5">{<block_content pos:start="105:9" pos:end="109:20">

        <expr_stmt pos:start="105:9" pos:end="107:36"><expr pos:start="105:9" pos:end="107:35"><call pos:start="105:9" pos:end="107:35"><name pos:start="105:9" pos:end="105:13">TRACE</name><argument_list pos:start="105:14" pos:end="107:35">(<argument pos:start="105:15" pos:end="105:18"><expr pos:start="105:15" pos:end="105:18"><name pos:start="105:15" pos:end="105:18">RXTX</name></expr></argument>, <argument pos:start="105:21" pos:end="107:34"><expr pos:start="105:21" pos:end="107:34"><call pos:start="105:21" pos:end="107:34"><name pos:start="105:21" pos:end="105:26">logout</name><argument_list pos:start="105:27" pos:end="107:34">(<argument pos:start="105:28" pos:end="105:69"><expr pos:start="105:28" pos:end="105:69"><literal type="string" pos:start="105:28" pos:end="105:69">"%p received frame, ignored, len=%zu,%s\n"</literal></expr></argument>, <argument pos:start="105:72" pos:end="105:72"><expr pos:start="105:72" pos:end="105:72"><name pos:start="105:72" pos:end="105:72">s</name></expr></argument>, <argument pos:start="105:75" pos:end="105:78"><expr pos:start="105:75" pos:end="105:78"><name pos:start="105:75" pos:end="105:78">size</name></expr></argument>,

              <argument pos:start="107:15" pos:end="107:33"><expr pos:start="107:15" pos:end="107:33"><call pos:start="107:15" pos:end="107:33"><name pos:start="107:15" pos:end="107:22">nic_dump</name><argument_list pos:start="107:23" pos:end="107:33">(<argument pos:start="107:24" pos:end="107:26"><expr pos:start="107:24" pos:end="107:26"><name pos:start="107:24" pos:end="107:26">buf</name></expr></argument>, <argument pos:start="107:29" pos:end="107:32"><expr pos:start="107:29" pos:end="107:32"><name pos:start="107:29" pos:end="107:32">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:20">return <expr pos:start="109:16" pos:end="109:19"><name pos:start="109:16" pos:end="109:19">size</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="115:5" pos:end="127:5"><if pos:start="115:5" pos:end="127:5">if <condition pos:start="115:8" pos:end="115:36">(<expr pos:start="115:9" pos:end="115:35"><call pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:20">get_ru_state</name><argument_list pos:start="115:21" pos:end="115:23">(<argument pos:start="115:22" pos:end="115:22"><expr pos:start="115:22" pos:end="115:22"><name pos:start="115:22" pos:end="115:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="115:25" pos:end="115:26">!=</operator> <name pos:start="115:28" pos:end="115:35">ru_ready</name></expr>)</condition> <block pos:start="115:38" pos:end="127:5">{<block_content pos:start="119:9" pos:end="125:18">

        <comment type="block" pos:start="117:9" pos:end="117:37">/* No resources available. */</comment>

        <expr_stmt pos:start="119:9" pos:end="119:60"><expr pos:start="119:9" pos:end="119:59"><call pos:start="119:9" pos:end="119:59"><name pos:start="119:9" pos:end="119:14">logout</name><argument_list pos:start="119:15" pos:end="119:59">(<argument pos:start="119:16" pos:end="119:41"><expr pos:start="119:16" pos:end="119:41"><literal type="string" pos:start="119:16" pos:end="119:41">"no resources, state=%u\n"</literal></expr></argument>, <argument pos:start="119:44" pos:end="119:58"><expr pos:start="119:44" pos:end="119:58"><call pos:start="119:44" pos:end="119:58"><name pos:start="119:44" pos:end="119:55">get_ru_state</name><argument_list pos:start="119:56" pos:end="119:58">(<argument pos:start="119:57" pos:end="119:57"><expr pos:start="119:57" pos:end="119:57"><name pos:start="119:57" pos:end="119:57">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:43"><expr pos:start="121:9" pos:end="121:42"><name pos:start="121:9" pos:end="121:40"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:21">statistics</name><operator pos:start="121:22" pos:end="121:22">.</operator><name pos:start="121:23" pos:end="121:40">rx_resource_errors</name></name><operator pos:start="121:41" pos:end="121:42">++</operator></expr>;</expr_stmt>

        <comment type="line" pos:start="123:9" pos:end="123:36">//~ assert(!"no resources");</comment>

        <return pos:start="125:9" pos:end="125:18">return <expr pos:start="125:16" pos:end="125:17"><operator pos:start="125:16" pos:end="125:16">-</operator><literal type="number" pos:start="125:17" pos:end="125:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="129:5" pos:end="129:11">//~ !!!</comment>

<comment type="line" pos:start="131:1" pos:end="131:144">//~ $3 = {status = 0x0, command = 0xc000, link = 0x2d220, rx_buf_addr = 0x207dc, count = 0x0, size = 0x5f8, packet = {0x0 &lt;repeats 1518 times&gt;}}</comment>

    <decl_stmt pos:start="133:5" pos:end="133:21"><decl pos:start="133:5" pos:end="133:20"><type pos:start="133:5" pos:end="133:17"><name pos:start="133:5" pos:end="133:17">eepro100_rx_t</name></type> <name pos:start="133:19" pos:end="133:20">rx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="135:5" pos:end="137:62"><expr pos:start="135:5" pos:end="137:61"><call pos:start="135:5" pos:end="137:61"><name pos:start="135:5" pos:end="135:28">cpu_physical_memory_read</name><argument_list pos:start="135:29" pos:end="137:61">(<argument pos:start="135:30" pos:end="135:54"><expr pos:start="135:30" pos:end="135:54"><name pos:start="135:30" pos:end="135:39"><name pos:start="135:30" pos:end="135:30">s</name><operator pos:start="135:31" pos:end="135:32">-&gt;</operator><name pos:start="135:33" pos:end="135:39">ru_base</name></name> <operator pos:start="135:41" pos:end="135:41">+</operator> <name pos:start="135:43" pos:end="135:54"><name pos:start="135:43" pos:end="135:43">s</name><operator pos:start="135:44" pos:end="135:45">-&gt;</operator><name pos:start="135:46" pos:end="135:54">ru_offset</name></name></expr></argument>, <argument pos:start="135:57" pos:end="135:72"><expr pos:start="135:57" pos:end="135:72"><operator pos:start="135:57" pos:end="135:57">(</operator><name pos:start="135:58" pos:end="135:64">uint8_t</name> <operator pos:start="135:66" pos:end="135:66">*</operator><operator pos:start="135:67" pos:end="135:67">)</operator> <operator pos:start="135:69" pos:end="135:69">&amp;</operator> <name pos:start="135:71" pos:end="135:72">rx</name></expr></argument>,

                             <argument pos:start="137:30" pos:end="137:60"><expr pos:start="137:30" pos:end="137:60"><call pos:start="137:30" pos:end="137:60"><name pos:start="137:30" pos:end="137:37">offsetof</name><argument_list pos:start="137:38" pos:end="137:60">(<argument pos:start="137:39" pos:end="137:51"><expr pos:start="137:39" pos:end="137:51"><name pos:start="137:39" pos:end="137:51">eepro100_rx_t</name></expr></argument>, <argument pos:start="137:54" pos:end="137:59"><expr pos:start="137:54" pos:end="137:59"><name pos:start="137:54" pos:end="137:59">packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="139:5" pos:end="139:51"><decl pos:start="139:5" pos:end="139:50"><type pos:start="139:5" pos:end="139:12"><name pos:start="139:5" pos:end="139:12">uint16_t</name></type> <name pos:start="139:14" pos:end="139:24">rfd_command</name> <init pos:start="139:26" pos:end="139:50">= <expr pos:start="139:28" pos:end="139:50"><call pos:start="139:28" pos:end="139:50"><name pos:start="139:28" pos:end="139:38">le16_to_cpu</name><argument_list pos:start="139:39" pos:end="139:50">(<argument pos:start="139:40" pos:end="139:49"><expr pos:start="139:40" pos:end="139:49"><name pos:start="139:40" pos:end="139:49"><name pos:start="139:40" pos:end="139:41">rx</name><operator pos:start="139:42" pos:end="139:42">.</operator><name pos:start="139:43" pos:end="139:49">command</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="141:5" pos:end="141:45"><decl pos:start="141:5" pos:end="141:44"><type pos:start="141:5" pos:end="141:12"><name pos:start="141:5" pos:end="141:12">uint16_t</name></type> <name pos:start="141:14" pos:end="141:21">rfd_size</name> <init pos:start="141:23" pos:end="141:44">= <expr pos:start="141:25" pos:end="141:44"><call pos:start="141:25" pos:end="141:44"><name pos:start="141:25" pos:end="141:35">le16_to_cpu</name><argument_list pos:start="141:36" pos:end="141:44">(<argument pos:start="141:37" pos:end="141:43"><expr pos:start="141:37" pos:end="141:43"><name pos:start="141:37" pos:end="141:43"><name pos:start="141:37" pos:end="141:38">rx</name><operator pos:start="141:39" pos:end="141:39">.</operator><name pos:start="141:40" pos:end="141:43">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:29"><expr pos:start="143:5" pos:end="143:28"><call pos:start="143:5" pos:end="143:28"><name pos:start="143:5" pos:end="143:10">assert</name><argument_list pos:start="143:11" pos:end="143:28">(<argument pos:start="143:12" pos:end="143:27"><expr pos:start="143:12" pos:end="143:27"><name pos:start="143:12" pos:end="143:15">size</name> <operator pos:start="143:17" pos:end="143:18">&lt;=</operator> <name pos:start="143:20" pos:end="143:27">rfd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:18">(<expr pos:start="145:9" pos:end="145:17"><name pos:start="145:9" pos:end="145:12">size</name> <operator pos:start="145:14" pos:end="145:14">&lt;</operator> <literal type="number" pos:start="145:16" pos:end="145:17">64</literal></expr>)</condition> <block pos:start="145:20" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:29">

        <expr_stmt pos:start="147:9" pos:end="147:29"><expr pos:start="147:9" pos:end="147:28"><name pos:start="147:9" pos:end="147:18">rfd_status</name> <operator pos:start="147:20" pos:end="147:21">|=</operator> <literal type="number" pos:start="147:23" pos:end="147:28">0x0080</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="151:5" pos:end="153:59"><expr pos:start="151:5" pos:end="153:58"><call pos:start="151:5" pos:end="153:58"><name pos:start="151:5" pos:end="151:9">TRACE</name><argument_list pos:start="151:10" pos:end="153:58">(<argument pos:start="151:11" pos:end="151:15"><expr pos:start="151:11" pos:end="151:15"><name pos:start="151:11" pos:end="151:15">OTHER</name></expr></argument>, <argument pos:start="151:18" pos:end="153:57"><expr pos:start="151:18" pos:end="153:57"><call pos:start="151:18" pos:end="153:57"><name pos:start="151:18" pos:end="151:23">logout</name><argument_list pos:start="151:24" pos:end="153:57">(<argument pos:start="151:25" pos:end="151:77"><expr pos:start="151:25" pos:end="151:77"><literal type="string" pos:start="151:25" pos:end="151:77">"command 0x%04x, link 0x%08x, addr 0x%08x, size %u\n"</literal></expr></argument>,

          <argument pos:start="153:11" pos:end="153:21"><expr pos:start="153:11" pos:end="153:21"><name pos:start="153:11" pos:end="153:21">rfd_command</name></expr></argument>, <argument pos:start="153:24" pos:end="153:30"><expr pos:start="153:24" pos:end="153:30"><name pos:start="153:24" pos:end="153:30"><name pos:start="153:24" pos:end="153:25">rx</name><operator pos:start="153:26" pos:end="153:26">.</operator><name pos:start="153:27" pos:end="153:30">link</name></name></expr></argument>, <argument pos:start="153:33" pos:end="153:46"><expr pos:start="153:33" pos:end="153:46"><name pos:start="153:33" pos:end="153:46"><name pos:start="153:33" pos:end="153:34">rx</name><operator pos:start="153:35" pos:end="153:35">.</operator><name pos:start="153:36" pos:end="153:46">rx_buf_addr</name></name></expr></argument>, <argument pos:start="153:49" pos:end="153:56"><expr pos:start="153:49" pos:end="153:56"><name pos:start="153:49" pos:end="153:56">rfd_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="157:25"><expr pos:start="155:5" pos:end="157:24"><call pos:start="155:5" pos:end="157:24"><name pos:start="155:5" pos:end="155:12">stw_phys</name><argument_list pos:start="155:13" pos:end="157:24">(<argument pos:start="155:14" pos:end="155:72"><expr pos:start="155:14" pos:end="155:72"><name pos:start="155:14" pos:end="155:23"><name pos:start="155:14" pos:end="155:14">s</name><operator pos:start="155:15" pos:end="155:16">-&gt;</operator><name pos:start="155:17" pos:end="155:23">ru_base</name></name> <operator pos:start="155:25" pos:end="155:25">+</operator> <name pos:start="155:27" pos:end="155:38"><name pos:start="155:27" pos:end="155:27">s</name><operator pos:start="155:28" pos:end="155:29">-&gt;</operator><name pos:start="155:30" pos:end="155:38">ru_offset</name></name> <operator pos:start="155:40" pos:end="155:40">+</operator> <call pos:start="155:42" pos:end="155:72"><name pos:start="155:42" pos:end="155:49">offsetof</name><argument_list pos:start="155:50" pos:end="155:72">(<argument pos:start="155:51" pos:end="155:63"><expr pos:start="155:51" pos:end="155:63"><name pos:start="155:51" pos:end="155:63">eepro100_rx_t</name></expr></argument>, <argument pos:start="155:66" pos:end="155:71"><expr pos:start="155:66" pos:end="155:71"><name pos:start="155:66" pos:end="155:71">status</name></expr></argument>)</argument_list></call></expr></argument>,

             <argument pos:start="157:14" pos:end="157:23"><expr pos:start="157:14" pos:end="157:23"><name pos:start="157:14" pos:end="157:23">rfd_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:79"><expr pos:start="159:5" pos:end="159:78"><call pos:start="159:5" pos:end="159:78"><name pos:start="159:5" pos:end="159:12">stw_phys</name><argument_list pos:start="159:13" pos:end="159:78">(<argument pos:start="159:14" pos:end="159:71"><expr pos:start="159:14" pos:end="159:71"><name pos:start="159:14" pos:end="159:23"><name pos:start="159:14" pos:end="159:14">s</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:23">ru_base</name></name> <operator pos:start="159:25" pos:end="159:25">+</operator> <name pos:start="159:27" pos:end="159:38"><name pos:start="159:27" pos:end="159:27">s</name><operator pos:start="159:28" pos:end="159:29">-&gt;</operator><name pos:start="159:30" pos:end="159:38">ru_offset</name></name> <operator pos:start="159:40" pos:end="159:40">+</operator> <call pos:start="159:42" pos:end="159:71"><name pos:start="159:42" pos:end="159:49">offsetof</name><argument_list pos:start="159:50" pos:end="159:71">(<argument pos:start="159:51" pos:end="159:63"><expr pos:start="159:51" pos:end="159:63"><name pos:start="159:51" pos:end="159:63">eepro100_rx_t</name></expr></argument>, <argument pos:start="159:66" pos:end="159:70"><expr pos:start="159:66" pos:end="159:70"><name pos:start="159:66" pos:end="159:70">count</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="159:74" pos:end="159:77"><expr pos:start="159:74" pos:end="159:77"><name pos:start="159:74" pos:end="159:77">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="161:5" pos:end="161:48">/* Early receive interrupt not supported. */</comment>

    <comment type="line" pos:start="163:5" pos:end="163:33">//~ eepro100_er_interrupt(s);</comment>

    <comment type="block" pos:start="165:5" pos:end="165:45">/* Receive CRC Transfer not supported. */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:40"><expr pos:start="167:5" pos:end="167:39"><call pos:start="167:5" pos:end="167:39"><name pos:start="167:5" pos:end="167:10">assert</name><argument_list pos:start="167:11" pos:end="167:39">(<argument pos:start="167:12" pos:end="167:38"><expr pos:start="167:12" pos:end="167:38"><operator pos:start="167:12" pos:end="167:12">!</operator><operator pos:start="167:13" pos:end="167:13">(</operator><name pos:start="167:14" pos:end="167:33"><name pos:start="167:14" pos:end="167:14">s</name><operator pos:start="167:15" pos:end="167:16">-&gt;</operator><name pos:start="167:17" pos:end="167:29">configuration</name><index pos:start="167:30" pos:end="167:33">[<expr pos:start="167:31" pos:end="167:32"><literal type="number" pos:start="167:31" pos:end="167:32">18</literal></expr>]</index></name> <operator pos:start="167:35" pos:end="167:35">&amp;</operator> <literal type="number" pos:start="167:37" pos:end="167:37">4</literal><operator pos:start="167:38" pos:end="167:38">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="169:5" pos:end="169:43">/* TODO: check stripping enable bit. */</comment>

    <comment type="line" pos:start="171:5" pos:end="171:44">//~ assert(!(s-&gt;configuration[17] &amp; 1));</comment>

    <expr_stmt pos:start="173:5" pos:end="175:74"><expr pos:start="173:5" pos:end="175:73"><call pos:start="173:5" pos:end="175:73"><name pos:start="173:5" pos:end="173:29">cpu_physical_memory_write</name><argument_list pos:start="173:30" pos:end="175:73">(<argument pos:start="173:31" pos:end="175:61"><expr pos:start="173:31" pos:end="175:61"><name pos:start="173:31" pos:end="173:40"><name pos:start="173:31" pos:end="173:31">s</name><operator pos:start="173:32" pos:end="173:33">-&gt;</operator><name pos:start="173:34" pos:end="173:40">ru_base</name></name> <operator pos:start="173:42" pos:end="173:42">+</operator> <name pos:start="173:44" pos:end="173:55"><name pos:start="173:44" pos:end="173:44">s</name><operator pos:start="173:45" pos:end="173:46">-&gt;</operator><name pos:start="173:47" pos:end="173:55">ru_offset</name></name> <operator pos:start="173:57" pos:end="173:57">+</operator>

                              <call pos:start="175:31" pos:end="175:61"><name pos:start="175:31" pos:end="175:38">offsetof</name><argument_list pos:start="175:39" pos:end="175:61">(<argument pos:start="175:40" pos:end="175:52"><expr pos:start="175:40" pos:end="175:52"><name pos:start="175:40" pos:end="175:52">eepro100_rx_t</name></expr></argument>, <argument pos:start="175:55" pos:end="175:60"><expr pos:start="175:55" pos:end="175:60"><name pos:start="175:55" pos:end="175:60">packet</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="175:64" pos:end="175:66"><expr pos:start="175:64" pos:end="175:66"><name pos:start="175:64" pos:end="175:66">buf</name></expr></argument>, <argument pos:start="175:69" pos:end="175:72"><expr pos:start="175:69" pos:end="175:72"><name pos:start="175:69" pos:end="175:72">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:35"><expr pos:start="177:5" pos:end="177:34"><name pos:start="177:5" pos:end="177:32"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:17">statistics</name><operator pos:start="177:18" pos:end="177:18">.</operator><name pos:start="177:19" pos:end="177:32">rx_good_frames</name></name><operator pos:start="177:33" pos:end="177:34">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:29"><expr pos:start="179:5" pos:end="179:28"><call pos:start="179:5" pos:end="179:28"><name pos:start="179:5" pos:end="179:25">eepro100_fr_interrupt</name><argument_list pos:start="179:26" pos:end="179:28">(<argument pos:start="179:27" pos:end="179:27"><expr pos:start="179:27" pos:end="179:27"><name pos:start="179:27" pos:end="179:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:40"><expr pos:start="181:5" pos:end="181:39"><name pos:start="181:5" pos:end="181:16"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:16">ru_offset</name></name> <operator pos:start="181:18" pos:end="181:18">=</operator> <call pos:start="181:20" pos:end="181:39"><name pos:start="181:20" pos:end="181:30">le32_to_cpu</name><argument_list pos:start="181:31" pos:end="181:39">(<argument pos:start="181:32" pos:end="181:38"><expr pos:start="181:32" pos:end="181:38"><name pos:start="181:32" pos:end="181:38"><name pos:start="181:32" pos:end="181:33">rx</name><operator pos:start="181:34" pos:end="181:34">.</operator><name pos:start="181:35" pos:end="181:38">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="189:5"><if pos:start="183:5" pos:end="189:5">if <condition pos:start="183:8" pos:end="183:29">(<expr pos:start="183:9" pos:end="183:28"><name pos:start="183:9" pos:end="183:19">rfd_command</name> <operator pos:start="183:21" pos:end="183:21">&amp;</operator> <literal type="number" pos:start="183:23" pos:end="183:28">0x8000</literal></expr>)</condition> <block pos:start="183:31" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:18">

        <comment type="block" pos:start="185:9" pos:end="185:56">/* EL bit is set, so this was the last frame. */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:18"><expr pos:start="187:9" pos:end="187:17"><call pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:14">assert</name><argument_list pos:start="187:15" pos:end="187:17">(<argument pos:start="187:16" pos:end="187:16"><expr pos:start="187:16" pos:end="187:16"><literal type="number" pos:start="187:16" pos:end="187:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="191:5" pos:end="197:5"><if pos:start="191:5" pos:end="197:5">if <condition pos:start="191:8" pos:end="191:29">(<expr pos:start="191:9" pos:end="191:28"><name pos:start="191:9" pos:end="191:19">rfd_command</name> <operator pos:start="191:21" pos:end="191:21">&amp;</operator> <literal type="number" pos:start="191:23" pos:end="191:28">0x4000</literal></expr>)</condition> <block pos:start="191:31" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:38">

        <comment type="block" pos:start="193:9" pos:end="193:27">/* S bit is set. */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:38"><expr pos:start="195:9" pos:end="195:37"><call pos:start="195:9" pos:end="195:37"><name pos:start="195:9" pos:end="195:20">set_ru_state</name><argument_list pos:start="195:21" pos:end="195:37">(<argument pos:start="195:22" pos:end="195:22"><expr pos:start="195:22" pos:end="195:22"><name pos:start="195:22" pos:end="195:22">s</name></expr></argument>, <argument pos:start="195:25" pos:end="195:36"><expr pos:start="195:25" pos:end="195:36"><name pos:start="195:25" pos:end="195:36">ru_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="199:5" pos:end="199:16">return <expr pos:start="199:12" pos:end="199:15"><name pos:start="199:12" pos:end="199:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
