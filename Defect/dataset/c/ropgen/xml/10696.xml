<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10696.c" pos:tabs="8"><function pos:start="1:1" pos:end="106:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">bfi_read_packet</name><parameter_list pos:start="1:27" pos:end="1:63">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:56">AVPacket</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type> <name pos:start="1:60" pos:end="1:62">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="106:15">{<block_content pos:start="5:5" pos:end="106:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">BFIContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">bfi</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:68"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:25">audio_offset</name></decl>, <decl pos:start="9:28" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:39">video_offset</name></decl>, <decl pos:start="9:42" pos:end="9:51"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:42" pos:end="9:51">chunk_size</name></decl>, <decl pos:start="9:54" pos:end="9:67"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:54" pos:end="9:63">audio_size</name> <init pos:start="9:65" pos:end="9:67">= <expr pos:start="9:67" pos:end="9:67"><literal type="number" pos:start="9:67" pos:end="9:67">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="11:5" pos:end="106:15"><if pos:start="11:5" pos:end="106:15">if <condition pos:start="11:8" pos:end="11:45">(<expr pos:start="11:9" pos:end="11:44"><name pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:11">bfi</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:20">nframes</name></name> <operator pos:start="11:22" pos:end="11:23">==</operator> <literal type="number" pos:start="11:25" pos:end="11:25">0</literal> <operator pos:start="11:27" pos:end="11:28">||</operator> <name pos:start="11:30" pos:end="11:44"><name pos:start="11:30" pos:end="11:31">pb</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:44">eof_reached</name></name></expr>)</condition> <block pos:start="11:47" pos:end="106:15">{<block_content pos:start="13:9" pos:end="106:15">

        <return pos:start="13:9" pos:end="13:28">return <expr pos:start="13:16" pos:end="13:27"><call pos:start="13:16" pos:end="13:27"><name pos:start="13:16" pos:end="13:22">AVERROR</name><argument_list pos:start="13:23" pos:end="13:27">(<argument pos:start="13:24" pos:end="13:26"><expr pos:start="13:24" pos:end="13:26"><name pos:start="13:24" pos:end="13:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>




    <comment type="block" pos:start="18:5" pos:end="18:77">/* If all previous chunks were completely read, then find a new one... */</comment>

    <if_stmt pos:start="20:5" pos:end="106:15"><if pos:start="20:5" pos:end="106:15">if <condition pos:start="20:8" pos:end="20:21">(<expr pos:start="20:9" pos:end="20:20"><operator pos:start="20:9" pos:end="20:9">!</operator><name pos:start="20:10" pos:end="20:20"><name pos:start="20:10" pos:end="20:12">bfi</name><operator pos:start="20:13" pos:end="20:14">-&gt;</operator><name pos:start="20:15" pos:end="20:20">avflag</name></name></expr>)</condition> <block pos:start="20:23" pos:end="106:15">{<block_content pos:start="22:9" pos:end="106:15">

        <decl_stmt pos:start="22:9" pos:end="22:27"><decl pos:start="22:9" pos:end="22:26"><type pos:start="22:9" pos:end="22:16"><name pos:start="22:9" pos:end="22:16">uint32_t</name></type> <name pos:start="22:18" pos:end="22:22">state</name> <init pos:start="22:24" pos:end="22:26">= <expr pos:start="22:26" pos:end="22:26"><literal type="number" pos:start="22:26" pos:end="22:26">0</literal></expr></init></decl>;</decl_stmt>

        <while pos:start="24:9" pos:end="69:5">while<condition pos:start="24:14" pos:end="24:46">(<expr pos:start="24:15" pos:end="24:45"><name pos:start="24:15" pos:end="24:19">state</name> <operator pos:start="24:21" pos:end="24:22">!=</operator> <call pos:start="24:24" pos:end="24:45"><name pos:start="24:24" pos:end="24:28">MKTAG</name><argument_list pos:start="24:29" pos:end="24:45">(<argument pos:start="24:30" pos:end="24:32"><expr pos:start="24:30" pos:end="24:32"><literal type="char" pos:start="24:30" pos:end="24:32">'S'</literal></expr></argument>,<argument pos:start="24:34" pos:end="24:36"><expr pos:start="24:34" pos:end="24:36"><literal type="char" pos:start="24:34" pos:end="24:36">'A'</literal></expr></argument>,<argument pos:start="24:38" pos:end="24:40"><expr pos:start="24:38" pos:end="24:40"><literal type="char" pos:start="24:38" pos:end="24:40">'V'</literal></expr></argument>,<argument pos:start="24:42" pos:end="24:44"><expr pos:start="24:42" pos:end="24:44"><literal type="char" pos:start="24:42" pos:end="24:44">'I'</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="24:47" pos:end="69:5">{<block_content pos:start="26:13" pos:end="67:32">

            <if_stmt pos:start="26:13" pos:end="28:36"><if pos:start="26:13" pos:end="28:36">if <condition pos:start="26:16" pos:end="26:32">(<expr pos:start="26:17" pos:end="26:31"><name pos:start="26:17" pos:end="26:31"><name pos:start="26:17" pos:end="26:18">pb</name><operator pos:start="26:19" pos:end="26:20">-&gt;</operator><name pos:start="26:21" pos:end="26:31">eof_reached</name></name></expr>)</condition><block type="pseudo" pos:start="28:17" pos:end="28:36"><block_content pos:start="28:17" pos:end="28:36">

                <return pos:start="28:17" pos:end="28:36">return <expr pos:start="28:24" pos:end="28:35"><call pos:start="28:24" pos:end="28:35"><name pos:start="28:24" pos:end="28:30">AVERROR</name><argument_list pos:start="28:31" pos:end="28:35">(<argument pos:start="28:32" pos:end="28:34"><expr pos:start="28:32" pos:end="28:34"><name pos:start="28:32" pos:end="28:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="30:13" pos:end="30:44"><expr pos:start="30:13" pos:end="30:43"><name pos:start="30:13" pos:end="30:17">state</name> <operator pos:start="30:19" pos:end="30:19">=</operator> <literal type="number" pos:start="30:21" pos:end="30:23">256</literal><operator pos:start="30:24" pos:end="30:24">*</operator><name pos:start="30:25" pos:end="30:29">state</name> <operator pos:start="30:31" pos:end="30:31">+</operator> <call pos:start="30:33" pos:end="30:43"><name pos:start="30:33" pos:end="30:39">avio_r8</name><argument_list pos:start="30:40" pos:end="30:43">(<argument pos:start="30:41" pos:end="30:42"><expr pos:start="30:41" pos:end="30:42"><name pos:start="30:41" pos:end="30:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="block" pos:start="33:9" pos:end="33:71">/* Now that the chunk's location is confirmed, we proceed... */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:18">chunk_size</name>      <operator pos:start="35:25" pos:end="35:25">=</operator> <call pos:start="35:27" pos:end="35:39"><name pos:start="35:27" pos:end="35:35">avio_rl32</name><argument_list pos:start="35:36" pos:end="35:39">(<argument pos:start="35:37" pos:end="35:38"><expr pos:start="35:37" pos:end="35:38"><name pos:start="35:37" pos:end="35:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:22"><expr pos:start="37:9" pos:end="37:21"><call pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:17">avio_rl32</name><argument_list pos:start="37:18" pos:end="37:21">(<argument pos:start="37:19" pos:end="37:20"><expr pos:start="37:19" pos:end="37:20"><name pos:start="37:19" pos:end="37:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:40"><expr pos:start="39:9" pos:end="39:39"><name pos:start="39:9" pos:end="39:20">audio_offset</name>    <operator pos:start="39:25" pos:end="39:25">=</operator> <call pos:start="39:27" pos:end="39:39"><name pos:start="39:27" pos:end="39:35">avio_rl32</name><argument_list pos:start="39:36" pos:end="39:39">(<argument pos:start="39:37" pos:end="39:38"><expr pos:start="39:37" pos:end="39:38"><name pos:start="39:37" pos:end="39:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><call pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:17">avio_rl32</name><argument_list pos:start="41:18" pos:end="41:21">(<argument pos:start="41:19" pos:end="41:20"><expr pos:start="41:19" pos:end="41:20"><name pos:start="41:19" pos:end="41:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:40"><expr pos:start="43:9" pos:end="43:39"><name pos:start="43:9" pos:end="43:20">video_offset</name>    <operator pos:start="43:25" pos:end="43:25">=</operator> <call pos:start="43:27" pos:end="43:39"><name pos:start="43:27" pos:end="43:35">avio_rl32</name><argument_list pos:start="43:36" pos:end="43:39">(<argument pos:start="43:37" pos:end="43:38"><expr pos:start="43:37" pos:end="43:38"><name pos:start="43:37" pos:end="43:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:54"><expr pos:start="45:9" pos:end="45:53"><name pos:start="45:9" pos:end="45:18">audio_size</name>      <operator pos:start="45:25" pos:end="45:25">=</operator> <name pos:start="45:27" pos:end="45:38">video_offset</name> <operator pos:start="45:40" pos:end="45:40">-</operator> <name pos:start="45:42" pos:end="45:53">audio_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:52"><expr pos:start="47:9" pos:end="47:51"><name pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:11">bfi</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:23">video_size</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:36">chunk_size</name> <operator pos:start="47:38" pos:end="47:38">-</operator> <name pos:start="47:40" pos:end="47:51">video_offset</name></expr>;</expr_stmt>







        <comment type="line" pos:start="55:9" pos:end="55:55">//Tossing an audio packet at the audio decoder.</comment>

        <expr_stmt pos:start="57:9" pos:end="57:49"><expr pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:48"><name pos:start="57:15" pos:end="57:27">av_get_packet</name><argument_list pos:start="57:28" pos:end="57:48">(<argument pos:start="57:29" pos:end="57:30"><expr pos:start="57:29" pos:end="57:30"><name pos:start="57:29" pos:end="57:30">pb</name></expr></argument>, <argument pos:start="57:33" pos:end="57:35"><expr pos:start="57:33" pos:end="57:35"><name pos:start="57:33" pos:end="57:35">pkt</name></expr></argument>, <argument pos:start="57:38" pos:end="57:47"><expr pos:start="57:38" pos:end="57:47"><name pos:start="57:38" pos:end="57:47">audio_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="61:23"><if pos:start="59:9" pos:end="61:23">if <condition pos:start="59:12" pos:end="59:20">(<expr pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">&lt;</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:23"><block_content pos:start="61:13" pos:end="61:23">

            <return pos:start="61:13" pos:end="61:23">return <expr pos:start="61:20" pos:end="61:22"><name pos:start="61:20" pos:end="61:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">pkt</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:16">pts</name></name>          <operator pos:start="65:27" pos:end="65:27">=</operator> <name pos:start="65:29" pos:end="65:44"><name pos:start="65:29" pos:end="65:31">bfi</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:44">audio_frame</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:11">bfi</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:24">audio_frame</name></name> <operator pos:start="67:26" pos:end="67:27">+=</operator> <name pos:start="67:29" pos:end="67:31">ret</name></expr>;</expr_stmt>

    </block_content>}</block></while> <if_stmt pos:start="69:7" pos:end="106:15"><if type="elseif" pos:start="69:7" pos:end="93:5">else if <condition pos:start="69:15" pos:end="69:35">(<expr pos:start="69:16" pos:end="69:34"><name pos:start="69:16" pos:end="69:30"><name pos:start="69:16" pos:end="69:18">bfi</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:30">video_size</name></name> <operator pos:start="69:32" pos:end="69:32">&gt;</operator> <literal type="number" pos:start="69:34" pos:end="69:34">0</literal></expr>)</condition> <block pos:start="69:37" pos:end="93:5">{<block_content pos:start="75:9" pos:end="91:23">



        <comment type="line" pos:start="73:9" pos:end="73:54">//Tossing a video packet at the video decoder.</comment>

        <expr_stmt pos:start="75:9" pos:end="75:54"><expr pos:start="75:9" pos:end="75:53"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:53"><name pos:start="75:15" pos:end="75:27">av_get_packet</name><argument_list pos:start="75:28" pos:end="75:53">(<argument pos:start="75:29" pos:end="75:30"><expr pos:start="75:29" pos:end="75:30"><name pos:start="75:29" pos:end="75:30">pb</name></expr></argument>, <argument pos:start="75:33" pos:end="75:35"><expr pos:start="75:33" pos:end="75:35"><name pos:start="75:33" pos:end="75:35">pkt</name></expr></argument>, <argument pos:start="75:38" pos:end="75:52"><expr pos:start="75:38" pos:end="75:52"><name pos:start="75:38" pos:end="75:52"><name pos:start="75:38" pos:end="75:40">bfi</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:52">video_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="79:23"><if pos:start="77:9" pos:end="79:23">if <condition pos:start="77:12" pos:end="77:20">(<expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:17">&lt;</operator> <literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:23"><block_content pos:start="79:13" pos:end="79:23">

            <return pos:start="79:13" pos:end="79:23">return <expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:45"><expr pos:start="83:9" pos:end="83:44"><name pos:start="83:9" pos:end="83:16"><name pos:start="83:9" pos:end="83:11">pkt</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:16">pts</name></name>          <operator pos:start="83:27" pos:end="83:27">=</operator> <name pos:start="83:29" pos:end="83:44"><name pos:start="83:29" pos:end="83:31">bfi</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:44">video_frame</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:50"><expr pos:start="85:9" pos:end="85:49"><name pos:start="85:9" pos:end="85:24"><name pos:start="85:9" pos:end="85:11">bfi</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:24">video_frame</name></name> <operator pos:start="85:26" pos:end="85:27">+=</operator> <name pos:start="85:29" pos:end="85:31">ret</name> <operator pos:start="85:33" pos:end="85:33">/</operator> <name pos:start="85:35" pos:end="85:49"><name pos:start="85:35" pos:end="85:37">bfi</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:49">video_size</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:58">/* One less frame to read. A cursory decrement. */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:23"><expr pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:20"><name pos:start="91:9" pos:end="91:11">bfi</name><operator pos:start="91:12" pos:end="91:13">-&gt;</operator><name pos:start="91:14" pos:end="91:20">nframes</name></name><operator pos:start="91:21" pos:end="91:22">--</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="106:15">else <block pos:start="93:12" pos:end="106:15">{<block_content pos:start="97:9" pos:end="106:15">

        <comment type="block" pos:start="95:9" pos:end="95:32">/* Empty video packet */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:30"><expr pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:29"><name pos:start="97:15" pos:end="97:21">AVERROR</name><argument_list pos:start="97:22" pos:end="97:29">(<argument pos:start="97:23" pos:end="97:28"><expr pos:start="97:23" pos:end="97:28"><name pos:start="97:23" pos:end="97:28">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="102:5" pos:end="102:37"><expr pos:start="102:5" pos:end="102:36"><name pos:start="102:5" pos:end="102:15"><name pos:start="102:5" pos:end="102:7">bfi</name><operator pos:start="102:8" pos:end="102:9">-&gt;</operator><name pos:start="102:10" pos:end="102:15">avflag</name></name>       <operator pos:start="102:23" pos:end="102:23">=</operator> <operator pos:start="102:25" pos:end="102:25">!</operator><name pos:start="102:26" pos:end="102:36"><name pos:start="102:26" pos:end="102:28">bfi</name><operator pos:start="102:29" pos:end="102:30">-&gt;</operator><name pos:start="102:31" pos:end="102:36">avflag</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="104:5" pos:end="104:36"><expr pos:start="104:5" pos:end="104:35"><name pos:start="104:5" pos:end="104:21"><name pos:start="104:5" pos:end="104:7">pkt</name><operator pos:start="104:8" pos:end="104:9">-&gt;</operator><name pos:start="104:10" pos:end="104:21">stream_index</name></name> <operator pos:start="104:23" pos:end="104:23">=</operator> <name pos:start="104:25" pos:end="104:35"><name pos:start="104:25" pos:end="104:27">bfi</name><operator pos:start="104:28" pos:end="104:29">-&gt;</operator><name pos:start="104:30" pos:end="104:35">avflag</name></name></expr>;</expr_stmt>

    <return pos:start="106:5" pos:end="106:15">return <expr pos:start="106:12" pos:end="106:14"><name pos:start="106:12" pos:end="106:14">ret</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
