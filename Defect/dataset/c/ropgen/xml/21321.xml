<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21321.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:17">ExitStatus</name></type> <name pos:start="1:19" pos:end="1:30">gen_call_pal</name><parameter_list pos:start="1:31" pos:end="1:62">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:43">DisasContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">ctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:61">palcode</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="187:1">{<block_content pos:start="13:5" pos:end="185:28">

    <comment type="block" pos:start="5:5" pos:end="7:37">/* We're emulating OSF/1 PALcode.  Many of these are trivial access

       to internal cpu registers.  */</comment>



    <comment type="block" pos:start="11:5" pos:end="11:31">/* Unprivileged PAL call */</comment>

    <if_stmt pos:start="13:5" pos:end="54:0"><if pos:start="13:5" pos:end="54:0">if <condition pos:start="13:8" pos:end="13:42">(<expr pos:start="13:9" pos:end="13:41"><name pos:start="13:9" pos:end="13:15">palcode</name> <operator pos:start="13:17" pos:end="13:18">&gt;=</operator> <literal type="number" pos:start="13:20" pos:end="13:23">0x80</literal> <operator pos:start="13:25" pos:end="13:26">&amp;&amp;</operator> <name pos:start="13:28" pos:end="13:34">palcode</name> <operator pos:start="13:36" pos:end="13:36">&lt;</operator> <literal type="number" pos:start="13:38" pos:end="13:41">0xC0</literal></expr>)</condition> <block pos:start="13:44" pos:end="54:0">{<block_content pos:start="15:9" pos:end="47:23">

        <switch pos:start="15:9" pos:end="45:9">switch <condition pos:start="15:16" pos:end="15:24">(<expr pos:start="15:17" pos:end="15:23"><name pos:start="15:17" pos:end="15:23">palcode</name></expr>)</condition> <block pos:start="15:26" pos:end="45:9">{<block_content pos:start="17:9" pos:end="43:64">

        <case pos:start="17:9" pos:end="17:18">case <expr pos:start="17:14" pos:end="17:17"><literal type="number" pos:start="17:14" pos:end="17:17">0x86</literal></expr>:</case>

            <comment type="block" pos:start="19:13" pos:end="19:21">/* IMB */</comment>

            <comment type="block" pos:start="21:13" pos:end="21:37">/* No-op inside QEMU.  */</comment>

            <break pos:start="23:13" pos:end="23:18">break;</break>

        <case pos:start="25:9" pos:end="25:18">case <expr pos:start="25:14" pos:end="25:17"><literal type="number" pos:start="25:14" pos:end="25:17">0x9E</literal></expr>:</case>

            <comment type="block" pos:start="27:13" pos:end="27:26">/* RDUNIQUE */</comment>

            <expr_stmt pos:start="29:13" pos:end="29:55"><expr pos:start="29:13" pos:end="29:54"><call pos:start="29:13" pos:end="29:54"><name pos:start="29:13" pos:end="29:27">tcg_gen_mov_i64</name><argument_list pos:start="29:28" pos:end="29:54">(<argument pos:start="29:29" pos:end="29:41"><expr pos:start="29:29" pos:end="29:41"><name pos:start="29:29" pos:end="29:41"><name pos:start="29:29" pos:end="29:34">cpu_ir</name><index pos:start="29:35" pos:end="29:41">[<expr pos:start="29:36" pos:end="29:40"><name pos:start="29:36" pos:end="29:40">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="29:44" pos:end="29:53"><expr pos:start="29:44" pos:end="29:53"><name pos:start="29:44" pos:end="29:53">cpu_unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="31:13" pos:end="31:18">break;</break>

        <case pos:start="33:9" pos:end="33:18">case <expr pos:start="33:14" pos:end="33:17"><literal type="number" pos:start="33:14" pos:end="33:17">0x9F</literal></expr>:</case>

            <comment type="block" pos:start="35:13" pos:end="35:26">/* WRUNIQUE */</comment>

            <expr_stmt pos:start="37:13" pos:end="37:55"><expr pos:start="37:13" pos:end="37:54"><call pos:start="37:13" pos:end="37:54"><name pos:start="37:13" pos:end="37:27">tcg_gen_mov_i64</name><argument_list pos:start="37:28" pos:end="37:54">(<argument pos:start="37:29" pos:end="37:38"><expr pos:start="37:29" pos:end="37:38"><name pos:start="37:29" pos:end="37:38">cpu_unique</name></expr></argument>, <argument pos:start="37:41" pos:end="37:53"><expr pos:start="37:41" pos:end="37:53"><name pos:start="37:41" pos:end="37:53"><name pos:start="37:41" pos:end="37:46">cpu_ir</name><index pos:start="37:47" pos:end="37:53">[<expr pos:start="37:48" pos:end="37:52"><name pos:start="37:48" pos:end="37:52">IR_A0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        <default pos:start="41:9" pos:end="41:16">default:</default>

            <return pos:start="43:13" pos:end="43:64">return <expr pos:start="43:20" pos:end="43:63"><call pos:start="43:20" pos:end="43:63"><name pos:start="43:20" pos:end="43:27">gen_excp</name><argument_list pos:start="43:28" pos:end="43:63">(<argument pos:start="43:29" pos:end="43:31"><expr pos:start="43:29" pos:end="43:31"><name pos:start="43:29" pos:end="43:31">ctx</name></expr></argument>, <argument pos:start="43:34" pos:end="43:46"><expr pos:start="43:34" pos:end="43:46"><name pos:start="43:34" pos:end="43:46">EXCP_CALL_PAL</name></expr></argument>, <argument pos:start="43:49" pos:end="43:62"><expr pos:start="43:49" pos:end="43:62"><name pos:start="43:49" pos:end="43:55">palcode</name> <operator pos:start="43:57" pos:end="43:57">&amp;</operator> <literal type="number" pos:start="43:59" pos:end="43:62">0xbf</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

        <return pos:start="47:9" pos:end="47:23">return <expr pos:start="47:16" pos:end="47:22"><name pos:start="47:16" pos:end="47:22">NO_EXIT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="53:1" pos:end="53:24">#<cpp:directive pos:start="53:2" pos:end="53:7">ifndef</cpp:directive> <name pos:start="53:9" pos:end="53:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <comment type="block" pos:start="55:5" pos:end="55:29">/* Privileged PAL code */</comment>

    <if_stmt pos:start="57:5" pos:end="182:0"><if pos:start="57:5" pos:end="182:0">if <condition pos:start="57:8" pos:end="57:69">(<expr pos:start="57:9" pos:end="57:68"><name pos:start="57:9" pos:end="57:15">palcode</name> <operator pos:start="57:17" pos:end="57:17">&lt;</operator> <literal type="number" pos:start="57:19" pos:end="57:22">0x40</literal> <operator pos:start="57:24" pos:end="57:25">&amp;&amp;</operator> <operator pos:start="57:27" pos:end="57:27">(</operator><name pos:start="57:28" pos:end="57:41"><name pos:start="57:28" pos:end="57:30">ctx</name><operator pos:start="57:31" pos:end="57:32">-&gt;</operator><name pos:start="57:33" pos:end="57:34">tb</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:41">flags</name></name> <operator pos:start="57:43" pos:end="57:43">&amp;</operator> <name pos:start="57:45" pos:end="57:62">TB_FLAGS_USER_MODE</name><operator pos:start="57:63" pos:end="57:63">)</operator> <operator pos:start="57:65" pos:end="57:66">==</operator> <literal type="number" pos:start="57:68" pos:end="57:68">0</literal></expr>)</condition> <block pos:start="57:71" pos:end="182:0">{<block_content pos:start="59:9" pos:end="177:23">

        <switch pos:start="59:9" pos:end="175:9">switch <condition pos:start="59:16" pos:end="59:24">(<expr pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:23">palcode</name></expr>)</condition> <block pos:start="59:26" pos:end="175:9">{<block_content pos:start="61:9" pos:end="173:64">

        <case pos:start="61:9" pos:end="61:18">case <expr pos:start="61:14" pos:end="61:17"><literal type="number" pos:start="61:14" pos:end="61:17">0x01</literal></expr>:</case>

            <comment type="block" pos:start="63:13" pos:end="63:24">/* CFLUSH */</comment>

            <comment type="block" pos:start="65:13" pos:end="65:37">/* No-op inside QEMU.  */</comment>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:18">case <expr pos:start="69:14" pos:end="69:17"><literal type="number" pos:start="69:14" pos:end="69:17">0x02</literal></expr>:</case>

            <comment type="block" pos:start="71:13" pos:end="71:24">/* DRAINA */</comment>

            <comment type="block" pos:start="73:13" pos:end="73:37">/* No-op inside QEMU.  */</comment>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:18">case <expr pos:start="77:14" pos:end="77:17"><literal type="number" pos:start="77:14" pos:end="77:17">0x2D</literal></expr>:</case>

            <comment type="block" pos:start="79:13" pos:end="79:26">/* WRVPTPTR */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:84"><expr pos:start="81:13" pos:end="81:83"><call pos:start="81:13" pos:end="81:83"><name pos:start="81:13" pos:end="81:26">tcg_gen_st_i64</name><argument_list pos:start="81:27" pos:end="81:83">(<argument pos:start="81:28" pos:end="81:40"><expr pos:start="81:28" pos:end="81:40"><name pos:start="81:28" pos:end="81:40"><name pos:start="81:28" pos:end="81:33">cpu_ir</name><index pos:start="81:34" pos:end="81:40">[<expr pos:start="81:35" pos:end="81:39"><name pos:start="81:35" pos:end="81:39">IR_A0</name></expr>]</index></name></expr></argument>, <argument pos:start="81:43" pos:end="81:49"><expr pos:start="81:43" pos:end="81:49"><name pos:start="81:43" pos:end="81:49">cpu_env</name></expr></argument>, <argument pos:start="81:52" pos:end="81:82"><expr pos:start="81:52" pos:end="81:82"><call pos:start="81:52" pos:end="81:82"><name pos:start="81:52" pos:end="81:59">offsetof</name><argument_list pos:start="81:60" pos:end="81:82">(<argument pos:start="81:61" pos:end="81:73"><expr pos:start="81:61" pos:end="81:73"><name pos:start="81:61" pos:end="81:73">CPUAlphaState</name></expr></argument>, <argument pos:start="81:76" pos:end="81:81"><expr pos:start="81:76" pos:end="81:81"><name pos:start="81:76" pos:end="81:81">vptptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:18">case <expr pos:start="85:14" pos:end="85:17"><literal type="number" pos:start="85:14" pos:end="85:17">0x31</literal></expr>:</case>

            <comment type="block" pos:start="87:13" pos:end="87:23">/* WRVAL */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:55"><expr pos:start="89:13" pos:end="89:54"><call pos:start="89:13" pos:end="89:54"><name pos:start="89:13" pos:end="89:27">tcg_gen_mov_i64</name><argument_list pos:start="89:28" pos:end="89:54">(<argument pos:start="89:29" pos:end="89:38"><expr pos:start="89:29" pos:end="89:38"><name pos:start="89:29" pos:end="89:38">cpu_sysval</name></expr></argument>, <argument pos:start="89:41" pos:end="89:53"><expr pos:start="89:41" pos:end="89:53"><name pos:start="89:41" pos:end="89:53"><name pos:start="89:41" pos:end="89:46">cpu_ir</name><index pos:start="89:47" pos:end="89:53">[<expr pos:start="89:48" pos:end="89:52"><name pos:start="89:48" pos:end="89:52">IR_A0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <case pos:start="93:9" pos:end="93:18">case <expr pos:start="93:14" pos:end="93:17"><literal type="number" pos:start="93:14" pos:end="93:17">0x32</literal></expr>:</case>

            <comment type="block" pos:start="95:13" pos:end="95:23">/* RDVAL */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:55"><expr pos:start="97:13" pos:end="97:54"><call pos:start="97:13" pos:end="97:54"><name pos:start="97:13" pos:end="97:27">tcg_gen_mov_i64</name><argument_list pos:start="97:28" pos:end="97:54">(<argument pos:start="97:29" pos:end="97:41"><expr pos:start="97:29" pos:end="97:41"><name pos:start="97:29" pos:end="97:41"><name pos:start="97:29" pos:end="97:34">cpu_ir</name><index pos:start="97:35" pos:end="97:41">[<expr pos:start="97:36" pos:end="97:40"><name pos:start="97:36" pos:end="97:40">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="97:44" pos:end="97:53"><expr pos:start="97:44" pos:end="97:53"><name pos:start="97:44" pos:end="97:53">cpu_sysval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>



        <case pos:start="103:9" pos:end="103:18">case <expr pos:start="103:14" pos:end="103:17"><literal type="number" pos:start="103:14" pos:end="103:17">0x35</literal></expr>:</case> <block pos:start="103:20" pos:end="131:9">{<block_content pos:start="107:13" pos:end="129:18">

            <comment type="block" pos:start="105:13" pos:end="105:24">/* SWPIPL */</comment>

            <decl_stmt pos:start="107:13" pos:end="107:21"><decl pos:start="107:13" pos:end="107:20"><type pos:start="107:13" pos:end="107:16"><name pos:start="107:13" pos:end="107:16">TCGv</name></type> <name pos:start="107:18" pos:end="107:20">tmp</name></decl>;</decl_stmt>



            <comment type="block" pos:start="111:13" pos:end="113:56">/* Note that we already know we're in kernel mode, so we know

               that PS only contains the 3 IPL bits.  */</comment>

            <expr_stmt pos:start="115:13" pos:end="115:82"><expr pos:start="115:13" pos:end="115:81"><call pos:start="115:13" pos:end="115:81"><name pos:start="115:13" pos:end="115:28">tcg_gen_ld8u_i64</name><argument_list pos:start="115:29" pos:end="115:81">(<argument pos:start="115:30" pos:end="115:42"><expr pos:start="115:30" pos:end="115:42"><name pos:start="115:30" pos:end="115:42"><name pos:start="115:30" pos:end="115:35">cpu_ir</name><index pos:start="115:36" pos:end="115:42">[<expr pos:start="115:37" pos:end="115:41"><name pos:start="115:37" pos:end="115:41">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="115:45" pos:end="115:51"><expr pos:start="115:45" pos:end="115:51"><name pos:start="115:45" pos:end="115:51">cpu_env</name></expr></argument>, <argument pos:start="115:54" pos:end="115:80"><expr pos:start="115:54" pos:end="115:80"><call pos:start="115:54" pos:end="115:80"><name pos:start="115:54" pos:end="115:61">offsetof</name><argument_list pos:start="115:62" pos:end="115:80">(<argument pos:start="115:63" pos:end="115:75"><expr pos:start="115:63" pos:end="115:75"><name pos:start="115:63" pos:end="115:75">CPUAlphaState</name></expr></argument>, <argument pos:start="115:78" pos:end="115:79"><expr pos:start="115:78" pos:end="115:79"><name pos:start="115:78" pos:end="115:79">ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="119:13" pos:end="119:77">/* But make sure and store only the 3 IPL bits from the user.  */</comment>

            <expr_stmt pos:start="121:13" pos:end="121:33"><expr pos:start="121:13" pos:end="121:32"><name pos:start="121:13" pos:end="121:15">tmp</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:32"><name pos:start="121:19" pos:end="121:30">tcg_temp_new</name><argument_list pos:start="121:31" pos:end="121:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:62"><expr pos:start="123:13" pos:end="123:61"><call pos:start="123:13" pos:end="123:61"><name pos:start="123:13" pos:end="123:28">tcg_gen_andi_i64</name><argument_list pos:start="123:29" pos:end="123:61">(<argument pos:start="123:30" pos:end="123:32"><expr pos:start="123:30" pos:end="123:32"><name pos:start="123:30" pos:end="123:32">tmp</name></expr></argument>, <argument pos:start="123:35" pos:end="123:47"><expr pos:start="123:35" pos:end="123:47"><name pos:start="123:35" pos:end="123:47"><name pos:start="123:35" pos:end="123:40">cpu_ir</name><index pos:start="123:41" pos:end="123:47">[<expr pos:start="123:42" pos:end="123:46"><name pos:start="123:42" pos:end="123:46">IR_A0</name></expr>]</index></name></expr></argument>, <argument pos:start="123:50" pos:end="123:60"><expr pos:start="123:50" pos:end="123:60"><name pos:start="123:50" pos:end="123:60">PS_INT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:71"><expr pos:start="125:13" pos:end="125:70"><call pos:start="125:13" pos:end="125:70"><name pos:start="125:13" pos:end="125:27">tcg_gen_st8_i64</name><argument_list pos:start="125:28" pos:end="125:70">(<argument pos:start="125:29" pos:end="125:31"><expr pos:start="125:29" pos:end="125:31"><name pos:start="125:29" pos:end="125:31">tmp</name></expr></argument>, <argument pos:start="125:34" pos:end="125:40"><expr pos:start="125:34" pos:end="125:40"><name pos:start="125:34" pos:end="125:40">cpu_env</name></expr></argument>, <argument pos:start="125:43" pos:end="125:69"><expr pos:start="125:43" pos:end="125:69"><call pos:start="125:43" pos:end="125:69"><name pos:start="125:43" pos:end="125:50">offsetof</name><argument_list pos:start="125:51" pos:end="125:69">(<argument pos:start="125:52" pos:end="125:64"><expr pos:start="125:52" pos:end="125:64"><name pos:start="125:52" pos:end="125:64">CPUAlphaState</name></expr></argument>, <argument pos:start="125:67" pos:end="125:68"><expr pos:start="125:67" pos:end="125:68"><name pos:start="125:67" pos:end="125:68">ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:31"><expr pos:start="127:13" pos:end="127:30"><call pos:start="127:13" pos:end="127:30"><name pos:start="127:13" pos:end="127:25">tcg_temp_free</name><argument_list pos:start="127:26" pos:end="127:30">(<argument pos:start="127:27" pos:end="127:29"><expr pos:start="127:27" pos:end="127:29"><name pos:start="127:27" pos:end="127:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        </block_content>}</block>



        <case pos:start="135:9" pos:end="135:18">case <expr pos:start="135:14" pos:end="135:17"><literal type="number" pos:start="135:14" pos:end="135:17">0x36</literal></expr>:</case>

            <comment type="block" pos:start="137:13" pos:end="137:22">/* RDPS */</comment>

            <expr_stmt pos:start="139:13" pos:end="139:82"><expr pos:start="139:13" pos:end="139:81"><call pos:start="139:13" pos:end="139:81"><name pos:start="139:13" pos:end="139:28">tcg_gen_ld8u_i64</name><argument_list pos:start="139:29" pos:end="139:81">(<argument pos:start="139:30" pos:end="139:42"><expr pos:start="139:30" pos:end="139:42"><name pos:start="139:30" pos:end="139:42"><name pos:start="139:30" pos:end="139:35">cpu_ir</name><index pos:start="139:36" pos:end="139:42">[<expr pos:start="139:37" pos:end="139:41"><name pos:start="139:37" pos:end="139:41">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="139:45" pos:end="139:51"><expr pos:start="139:45" pos:end="139:51"><name pos:start="139:45" pos:end="139:51">cpu_env</name></expr></argument>, <argument pos:start="139:54" pos:end="139:80"><expr pos:start="139:54" pos:end="139:80"><call pos:start="139:54" pos:end="139:80"><name pos:start="139:54" pos:end="139:61">offsetof</name><argument_list pos:start="139:62" pos:end="139:80">(<argument pos:start="139:63" pos:end="139:75"><expr pos:start="139:63" pos:end="139:75"><name pos:start="139:63" pos:end="139:75">CPUAlphaState</name></expr></argument>, <argument pos:start="139:78" pos:end="139:79"><expr pos:start="139:78" pos:end="139:79"><name pos:start="139:78" pos:end="139:79">ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        <case pos:start="143:9" pos:end="143:18">case <expr pos:start="143:14" pos:end="143:17"><literal type="number" pos:start="143:14" pos:end="143:17">0x38</literal></expr>:</case>

            <comment type="block" pos:start="145:13" pos:end="145:23">/* WRUSP */</comment>

            <expr_stmt pos:start="147:13" pos:end="147:52"><expr pos:start="147:13" pos:end="147:51"><call pos:start="147:13" pos:end="147:51"><name pos:start="147:13" pos:end="147:27">tcg_gen_mov_i64</name><argument_list pos:start="147:28" pos:end="147:51">(<argument pos:start="147:29" pos:end="147:35"><expr pos:start="147:29" pos:end="147:35"><name pos:start="147:29" pos:end="147:35">cpu_usp</name></expr></argument>, <argument pos:start="147:38" pos:end="147:50"><expr pos:start="147:38" pos:end="147:50"><name pos:start="147:38" pos:end="147:50"><name pos:start="147:38" pos:end="147:43">cpu_ir</name><index pos:start="147:44" pos:end="147:50">[<expr pos:start="147:45" pos:end="147:49"><name pos:start="147:45" pos:end="147:49">IR_A0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:18">case <expr pos:start="151:14" pos:end="151:17"><literal type="number" pos:start="151:14" pos:end="151:17">0x3A</literal></expr>:</case>

            <comment type="block" pos:start="153:13" pos:end="153:23">/* RDUSP */</comment>

            <expr_stmt pos:start="155:13" pos:end="155:52"><expr pos:start="155:13" pos:end="155:51"><call pos:start="155:13" pos:end="155:51"><name pos:start="155:13" pos:end="155:27">tcg_gen_mov_i64</name><argument_list pos:start="155:28" pos:end="155:51">(<argument pos:start="155:29" pos:end="155:41"><expr pos:start="155:29" pos:end="155:41"><name pos:start="155:29" pos:end="155:41"><name pos:start="155:29" pos:end="155:34">cpu_ir</name><index pos:start="155:35" pos:end="155:41">[<expr pos:start="155:36" pos:end="155:40"><name pos:start="155:36" pos:end="155:40">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="155:44" pos:end="155:50"><expr pos:start="155:44" pos:end="155:50"><name pos:start="155:44" pos:end="155:50">cpu_usp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        <case pos:start="159:9" pos:end="159:18">case <expr pos:start="159:14" pos:end="159:17"><literal type="number" pos:start="159:14" pos:end="159:17">0x3C</literal></expr>:</case>

            <comment type="block" pos:start="161:13" pos:end="161:23">/* WHAMI */</comment>

            <expr_stmt pos:start="163:13" pos:end="165:74"><expr pos:start="163:13" pos:end="165:73"><call pos:start="163:13" pos:end="165:73"><name pos:start="163:13" pos:end="163:29">tcg_gen_ld32s_i64</name><argument_list pos:start="163:30" pos:end="165:73">(<argument pos:start="163:31" pos:end="163:43"><expr pos:start="163:31" pos:end="163:43"><name pos:start="163:31" pos:end="163:43"><name pos:start="163:31" pos:end="163:36">cpu_ir</name><index pos:start="163:37" pos:end="163:43">[<expr pos:start="163:38" pos:end="163:42"><name pos:start="163:38" pos:end="163:42">IR_V0</name></expr>]</index></name></expr></argument>, <argument pos:start="163:46" pos:end="163:52"><expr pos:start="163:46" pos:end="163:52"><name pos:start="163:46" pos:end="163:52">cpu_env</name></expr></argument>,

                <argument pos:start="165:17" pos:end="165:72"><expr pos:start="165:17" pos:end="165:72"><operator pos:start="165:17" pos:end="165:17">-</operator><call pos:start="165:18" pos:end="165:40"><name pos:start="165:18" pos:end="165:25">offsetof</name><argument_list pos:start="165:26" pos:end="165:40">(<argument pos:start="165:27" pos:end="165:34"><expr pos:start="165:27" pos:end="165:34"><name pos:start="165:27" pos:end="165:34">AlphaCPU</name></expr></argument>, <argument pos:start="165:37" pos:end="165:39"><expr pos:start="165:37" pos:end="165:39"><name pos:start="165:37" pos:end="165:39">env</name></expr></argument>)</argument_list></call> <operator pos:start="165:42" pos:end="165:42">+</operator> <call pos:start="165:44" pos:end="165:72"><name pos:start="165:44" pos:end="165:51">offsetof</name><argument_list pos:start="165:52" pos:end="165:72">(<argument pos:start="165:53" pos:end="165:60"><expr pos:start="165:53" pos:end="165:60"><name pos:start="165:53" pos:end="165:60">CPUState</name></expr></argument>, <argument pos:start="165:63" pos:end="165:71"><expr pos:start="165:63" pos:end="165:71"><name pos:start="165:63" pos:end="165:71">cpu_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="167:13" pos:end="167:18">break;</break>



        <default pos:start="171:9" pos:end="171:16">default:</default>

            <return pos:start="173:13" pos:end="173:64">return <expr pos:start="173:20" pos:end="173:63"><call pos:start="173:20" pos:end="173:63"><name pos:start="173:20" pos:end="173:27">gen_excp</name><argument_list pos:start="173:28" pos:end="173:63">(<argument pos:start="173:29" pos:end="173:31"><expr pos:start="173:29" pos:end="173:31"><name pos:start="173:29" pos:end="173:31">ctx</name></expr></argument>, <argument pos:start="173:34" pos:end="173:46"><expr pos:start="173:34" pos:end="173:46"><name pos:start="173:34" pos:end="173:46">EXCP_CALL_PAL</name></expr></argument>, <argument pos:start="173:49" pos:end="173:62"><expr pos:start="173:49" pos:end="173:62"><name pos:start="173:49" pos:end="173:55">palcode</name> <operator pos:start="173:57" pos:end="173:57">&amp;</operator> <literal type="number" pos:start="173:59" pos:end="173:62">0x3f</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

        <return pos:start="177:9" pos:end="177:23">return <expr pos:start="177:16" pos:end="177:22"><name pos:start="177:16" pos:end="177:22">NO_EXIT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="181:1" pos:end="181:6">#<cpp:directive pos:start="181:2" pos:end="181:6">endif</cpp:directive></cpp:endif>



    <return pos:start="185:5" pos:end="185:28">return <expr pos:start="185:12" pos:end="185:27"><call pos:start="185:12" pos:end="185:27"><name pos:start="185:12" pos:end="185:22">gen_invalid</name><argument_list pos:start="185:23" pos:end="185:27">(<argument pos:start="185:24" pos:end="185:26"><expr pos:start="185:24" pos:end="185:26"><name pos:start="185:24" pos:end="185:26">ctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
