<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23513.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">grlib_irqmp_write</name><parameter_list pos:start="1:30" pos:end="3:60">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:67"><decl pos:start="1:45" pos:end="1:67"><type pos:start="1:45" pos:end="1:67"><name pos:start="1:45" pos:end="1:62">target_phys_addr_t</name></type> <name pos:start="1:64" pos:end="1:67">addr</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:38">uint64_t</name></type> <name pos:start="3:40" pos:end="3:44">value</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:59"><decl pos:start="3:47" pos:end="3:59"><type pos:start="3:47" pos:end="3:59"><name pos:start="3:47" pos:end="3:54">unsigned</name></type> <name pos:start="3:56" pos:end="3:59">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="171:1">{<block_content pos:start="7:5" pos:end="169:50">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:9">IRQMP</name>      <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:21">irqmp</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">IRQMPState</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:21">state</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><call pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:25">(<argument pos:start="13:12" pos:end="13:24"><expr pos:start="13:12" pos:end="13:24"><name pos:start="13:12" pos:end="13:16">irqmp</name> <operator pos:start="13:18" pos:end="13:19">!=</operator> <name pos:start="13:21" pos:end="13:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:9">state</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:17">irqmp</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:24">state</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><call pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:25">(<argument pos:start="17:12" pos:end="17:24"><expr pos:start="17:12" pos:end="17:24"><name pos:start="17:12" pos:end="17:16">state</name> <operator pos:start="17:18" pos:end="17:19">!=</operator> <name pos:start="17:21" pos:end="17:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:8">addr</name> <operator pos:start="21:10" pos:end="21:11">&amp;=</operator> <literal type="number" pos:start="21:13" pos:end="21:16">0xff</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:26">/* global registers */</comment>

    <switch pos:start="27:5" pos:end="95:5">switch <condition pos:start="27:12" pos:end="27:17">(<expr pos:start="27:13" pos:end="27:16"><name pos:start="27:13" pos:end="27:16">addr</name></expr>)</condition> <block pos:start="27:19" pos:end="95:5">{<block_content pos:start="29:5" pos:end="93:14">

    <case pos:start="29:5" pos:end="29:22">case <expr pos:start="29:10" pos:end="29:21"><name pos:start="29:10" pos:end="29:21">LEVEL_OFFSET</name></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:29"><expr pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:13">value</name> <operator pos:start="31:15" pos:end="31:16">&amp;=</operator> <literal type="number" pos:start="31:18" pos:end="31:23">0xFFFF</literal> <operator pos:start="31:25" pos:end="31:26">&lt;&lt;</operator> <literal type="number" pos:start="31:28" pos:end="31:28">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="31:31" pos:end="31:54">/* clean up the value */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:29"><expr pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:13">state</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:20">level</name></name> <operator pos:start="33:22" pos:end="33:22">=</operator> <name pos:start="33:24" pos:end="33:28">value</name></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>



    <case pos:start="39:5" pos:end="39:24">case <expr pos:start="39:10" pos:end="39:23"><name pos:start="39:10" pos:end="39:23">PENDING_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="41:9" pos:end="41:23">/* Read Only */</comment>

        <return pos:start="43:9" pos:end="43:15">return;</return>



    <case pos:start="47:5" pos:end="47:23">case <expr pos:start="47:10" pos:end="47:22"><name pos:start="47:10" pos:end="47:22">FORCE0_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="49:9" pos:end="49:73">/* This register is an "alias" for the force register of CPU 0 */</comment>



        <expr_stmt pos:start="53:9" pos:end="53:24"><expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:13">value</name> <operator pos:start="53:15" pos:end="53:16">&amp;=</operator> <literal type="number" pos:start="53:18" pos:end="53:23">0xFFFE</literal></expr>;</expr_stmt> <comment type="block" pos:start="53:26" pos:end="53:49">/* clean up the value */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:13">state</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:20">force</name><index pos:start="55:21" pos:end="55:23">[<expr pos:start="55:22" pos:end="55:22"><literal type="number" pos:start="55:22" pos:end="55:22">0</literal></expr>]</index></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:31">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:45"><expr pos:start="57:9" pos:end="57:44"><call pos:start="57:9" pos:end="57:44"><name pos:start="57:9" pos:end="57:30">grlib_irqmp_check_irqs</name><argument_list pos:start="57:31" pos:end="57:44">(<argument pos:start="57:32" pos:end="57:43"><expr pos:start="57:32" pos:end="57:43"><name pos:start="57:32" pos:end="57:43"><name pos:start="57:32" pos:end="57:36">irqmp</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:43">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>



    <case pos:start="63:5" pos:end="63:22">case <expr pos:start="63:10" pos:end="63:21"><name pos:start="63:10" pos:end="63:21">CLEAR_OFFSET</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:20"><expr pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:13">value</name> <operator pos:start="65:15" pos:end="65:16">&amp;=</operator> <operator pos:start="65:18" pos:end="65:18">~</operator><literal type="number" pos:start="65:19" pos:end="65:19">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="65:22" pos:end="65:45">/* clean up the value */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:33"><expr pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:13">state</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:22">pending</name></name> <operator pos:start="67:24" pos:end="67:25">&amp;=</operator> <operator pos:start="67:27" pos:end="67:27">~</operator><name pos:start="67:28" pos:end="67:32">value</name></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:15">return;</return>



    <case pos:start="73:5" pos:end="73:26">case <expr pos:start="73:10" pos:end="73:25"><name pos:start="73:10" pos:end="73:25">MP_STATUS_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="75:9" pos:end="75:40">/* Read Only (no SMP support) */</comment>

        <return pos:start="77:9" pos:end="77:15">return;</return>



    <case pos:start="81:5" pos:end="81:26">case <expr pos:start="81:10" pos:end="81:25"><name pos:start="81:10" pos:end="81:25">BROADCAST_OFFSET</name></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:24"><expr pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:13">value</name> <operator pos:start="83:15" pos:end="83:16">&amp;=</operator> <literal type="number" pos:start="83:18" pos:end="83:23">0xFFFE</literal></expr>;</expr_stmt> <comment type="block" pos:start="83:26" pos:end="83:49">/* clean up the value */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:33"><expr pos:start="85:9" pos:end="85:32"><name pos:start="85:9" pos:end="85:24"><name pos:start="85:9" pos:end="85:13">state</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:24">broadcast</name></name> <operator pos:start="85:26" pos:end="85:26">=</operator> <name pos:start="85:28" pos:end="85:32">value</name></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:15">return;</return>



    <default pos:start="91:5" pos:end="91:12">default:</default>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="99:5" pos:end="99:24">/* mask registers */</comment>

    <if_stmt pos:start="101:5" pos:end="117:5"><if pos:start="101:5" pos:end="117:5">if <condition pos:start="101:8" pos:end="101:51">(<expr pos:start="101:9" pos:end="101:50"><name pos:start="101:9" pos:end="101:12">addr</name> <operator pos:start="101:14" pos:end="101:15">&gt;=</operator> <name pos:start="101:17" pos:end="101:27">MASK_OFFSET</name> <operator pos:start="101:29" pos:end="101:30">&amp;&amp;</operator> <name pos:start="101:32" pos:end="101:35">addr</name> <operator pos:start="101:37" pos:end="101:37">&lt;</operator> <name pos:start="101:39" pos:end="101:50">FORCE_OFFSET</name></expr>)</condition> <block pos:start="101:53" pos:end="117:5">{<block_content pos:start="103:9" pos:end="115:15">

        <decl_stmt pos:start="103:9" pos:end="103:43"><decl pos:start="103:9" pos:end="103:42"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:15">cpu</name> <init pos:start="103:17" pos:end="103:42">= <expr pos:start="103:19" pos:end="103:42"><operator pos:start="103:19" pos:end="103:19">(</operator><name pos:start="103:20" pos:end="103:23">addr</name> <operator pos:start="103:25" pos:end="103:25">-</operator> <name pos:start="103:27" pos:end="103:37">MASK_OFFSET</name><operator pos:start="103:38" pos:end="103:38">)</operator> <operator pos:start="103:40" pos:end="103:40">/</operator> <literal type="number" pos:start="103:42" pos:end="103:42">4</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:48"><expr pos:start="105:9" pos:end="105:47"><call pos:start="105:9" pos:end="105:47"><name pos:start="105:9" pos:end="105:14">assert</name><argument_list pos:start="105:15" pos:end="105:47">(<argument pos:start="105:16" pos:end="105:46"><expr pos:start="105:16" pos:end="105:46"><name pos:start="105:16" pos:end="105:18">cpu</name> <operator pos:start="105:20" pos:end="105:21">&gt;=</operator> <literal type="number" pos:start="105:23" pos:end="105:23">0</literal> <operator pos:start="105:25" pos:end="105:26">&amp;&amp;</operator> <name pos:start="105:28" pos:end="105:30">cpu</name> <operator pos:start="105:32" pos:end="105:32">&lt;</operator> <name pos:start="105:34" pos:end="105:46">IRQMP_MAX_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:20"><expr pos:start="109:9" pos:end="109:19"><name pos:start="109:9" pos:end="109:13">value</name> <operator pos:start="109:15" pos:end="109:16">&amp;=</operator> <operator pos:start="109:18" pos:end="109:18">~</operator><literal type="number" pos:start="109:19" pos:end="109:19">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="109:22" pos:end="109:45">/* clean up the value */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:33"><expr pos:start="111:9" pos:end="111:32"><name pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:13">state</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:19">mask</name><index pos:start="111:20" pos:end="111:24">[<expr pos:start="111:21" pos:end="111:23"><name pos:start="111:21" pos:end="111:23">cpu</name></expr>]</index></name> <operator pos:start="111:26" pos:end="111:26">=</operator> <name pos:start="111:28" pos:end="111:32">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:45"><expr pos:start="113:9" pos:end="113:44"><call pos:start="113:9" pos:end="113:44"><name pos:start="113:9" pos:end="113:30">grlib_irqmp_check_irqs</name><argument_list pos:start="113:31" pos:end="113:44">(<argument pos:start="113:32" pos:end="113:43"><expr pos:start="113:32" pos:end="113:43"><name pos:start="113:32" pos:end="113:43"><name pos:start="113:32" pos:end="113:36">irqmp</name><operator pos:start="113:37" pos:end="113:38">-&gt;</operator><name pos:start="113:39" pos:end="113:43">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:25">/* force registers */</comment>

    <if_stmt pos:start="123:5" pos:end="145:5"><if pos:start="123:5" pos:end="145:5">if <condition pos:start="123:8" pos:end="123:55">(<expr pos:start="123:9" pos:end="123:54"><name pos:start="123:9" pos:end="123:12">addr</name> <operator pos:start="123:14" pos:end="123:15">&gt;=</operator> <name pos:start="123:17" pos:end="123:28">FORCE_OFFSET</name> <operator pos:start="123:30" pos:end="123:31">&amp;&amp;</operator> <name pos:start="123:33" pos:end="123:36">addr</name> <operator pos:start="123:38" pos:end="123:38">&lt;</operator> <name pos:start="123:40" pos:end="123:54">EXTENDED_OFFSET</name></expr>)</condition> <block pos:start="123:57" pos:end="145:5">{<block_content pos:start="125:9" pos:end="143:15">

        <decl_stmt pos:start="125:9" pos:end="125:44"><decl pos:start="125:9" pos:end="125:43"><type pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">int</name></type> <name pos:start="125:13" pos:end="125:15">cpu</name> <init pos:start="125:17" pos:end="125:43">= <expr pos:start="125:19" pos:end="125:43"><operator pos:start="125:19" pos:end="125:19">(</operator><name pos:start="125:20" pos:end="125:23">addr</name> <operator pos:start="125:25" pos:end="125:25">-</operator> <name pos:start="125:27" pos:end="125:38">FORCE_OFFSET</name><operator pos:start="125:39" pos:end="125:39">)</operator> <operator pos:start="125:41" pos:end="125:41">/</operator> <literal type="number" pos:start="125:43" pos:end="125:43">4</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><call pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:14">assert</name><argument_list pos:start="127:15" pos:end="127:47">(<argument pos:start="127:16" pos:end="127:46"><expr pos:start="127:16" pos:end="127:46"><name pos:start="127:16" pos:end="127:18">cpu</name> <operator pos:start="127:20" pos:end="127:21">&gt;=</operator> <literal type="number" pos:start="127:23" pos:end="127:23">0</literal> <operator pos:start="127:25" pos:end="127:26">&amp;&amp;</operator> <name pos:start="127:28" pos:end="127:30">cpu</name> <operator pos:start="127:32" pos:end="127:32">&lt;</operator> <name pos:start="127:34" pos:end="127:46">IRQMP_MAX_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <decl_stmt pos:start="131:9" pos:end="131:40"><decl pos:start="131:9" pos:end="131:39"><type pos:start="131:9" pos:end="131:16"><name pos:start="131:9" pos:end="131:16">uint32_t</name></type> <name pos:start="131:18" pos:end="131:22">force</name> <init pos:start="131:24" pos:end="131:39">= <expr pos:start="131:26" pos:end="131:39"><name pos:start="131:26" pos:end="131:30">value</name> <operator pos:start="131:32" pos:end="131:32">&amp;</operator> <literal type="number" pos:start="131:34" pos:end="131:39">0xFFFE</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:48"><decl pos:start="133:9" pos:end="133:47"><type pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:16">uint32_t</name></type> <name pos:start="133:18" pos:end="133:22">clear</name> <init pos:start="133:24" pos:end="133:47">= <expr pos:start="133:26" pos:end="133:47"><operator pos:start="133:26" pos:end="133:26">(</operator><name pos:start="133:27" pos:end="133:31">value</name> <operator pos:start="133:33" pos:end="133:34">&gt;&gt;</operator> <literal type="number" pos:start="133:36" pos:end="133:37">16</literal><operator pos:start="133:38" pos:end="133:38">)</operator> <operator pos:start="133:40" pos:end="133:40">&amp;</operator> <literal type="number" pos:start="133:42" pos:end="133:47">0xFFFE</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="135:9" pos:end="135:43"><decl pos:start="135:9" pos:end="135:42"><type pos:start="135:9" pos:end="135:16"><name pos:start="135:9" pos:end="135:16">uint32_t</name></type> <name pos:start="135:18" pos:end="135:20">old</name>   <init pos:start="135:24" pos:end="135:42">= <expr pos:start="135:26" pos:end="135:42"><name pos:start="135:26" pos:end="135:42"><name pos:start="135:26" pos:end="135:30">state</name><operator pos:start="135:31" pos:end="135:32">-&gt;</operator><name pos:start="135:33" pos:end="135:37">force</name><index pos:start="135:38" pos:end="135:42">[<expr pos:start="135:39" pos:end="135:41"><name pos:start="135:39" pos:end="135:41">cpu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="139:9" pos:end="139:51"><expr pos:start="139:9" pos:end="139:50"><name pos:start="139:9" pos:end="139:25"><name pos:start="139:9" pos:end="139:13">state</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:20">force</name><index pos:start="139:21" pos:end="139:25">[<expr pos:start="139:22" pos:end="139:24"><name pos:start="139:22" pos:end="139:24">cpu</name></expr>]</index></name> <operator pos:start="139:27" pos:end="139:27">=</operator> <operator pos:start="139:29" pos:end="139:29">(</operator><name pos:start="139:30" pos:end="139:32">old</name> <operator pos:start="139:34" pos:end="139:34">|</operator> <name pos:start="139:36" pos:end="139:40">force</name><operator pos:start="139:41" pos:end="139:41">)</operator> <operator pos:start="139:43" pos:end="139:43">&amp;</operator> <operator pos:start="139:45" pos:end="139:45">~</operator><name pos:start="139:46" pos:end="139:50">clear</name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:45"><expr pos:start="141:9" pos:end="141:44"><call pos:start="141:9" pos:end="141:44"><name pos:start="141:9" pos:end="141:30">grlib_irqmp_check_irqs</name><argument_list pos:start="141:31" pos:end="141:44">(<argument pos:start="141:32" pos:end="141:43"><expr pos:start="141:32" pos:end="141:43"><name pos:start="141:32" pos:end="141:43"><name pos:start="141:32" pos:end="141:36">irqmp</name><operator pos:start="141:37" pos:end="141:38">-&gt;</operator><name pos:start="141:39" pos:end="141:43">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="149:5" pos:end="149:34">/* extended (not supported) */</comment>

    <if_stmt pos:start="151:5" pos:end="165:5"><if pos:start="151:5" pos:end="165:5">if <condition pos:start="151:8" pos:end="151:57">(<expr pos:start="151:9" pos:end="151:56"><name pos:start="151:9" pos:end="151:12">addr</name> <operator pos:start="151:14" pos:end="151:15">&gt;=</operator> <name pos:start="151:17" pos:end="151:31">EXTENDED_OFFSET</name> <operator pos:start="151:33" pos:end="151:34">&amp;&amp;</operator> <name pos:start="151:36" pos:end="151:39">addr</name> <operator pos:start="151:41" pos:end="151:41">&lt;</operator> <name pos:start="151:43" pos:end="151:56">IRQMP_REG_SIZE</name></expr>)</condition> <block pos:start="151:59" pos:end="165:5">{<block_content pos:start="153:9" pos:end="163:15">

        <decl_stmt pos:start="153:9" pos:end="153:47"><decl pos:start="153:9" pos:end="153:46"><type pos:start="153:9" pos:end="153:11"><name pos:start="153:9" pos:end="153:11">int</name></type> <name pos:start="153:13" pos:end="153:15">cpu</name> <init pos:start="153:17" pos:end="153:46">= <expr pos:start="153:19" pos:end="153:46"><operator pos:start="153:19" pos:end="153:19">(</operator><name pos:start="153:20" pos:end="153:23">addr</name> <operator pos:start="153:25" pos:end="153:25">-</operator> <name pos:start="153:27" pos:end="153:41">EXTENDED_OFFSET</name><operator pos:start="153:42" pos:end="153:42">)</operator> <operator pos:start="153:44" pos:end="153:44">/</operator> <literal type="number" pos:start="153:46" pos:end="153:46">4</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:48"><expr pos:start="155:9" pos:end="155:47"><call pos:start="155:9" pos:end="155:47"><name pos:start="155:9" pos:end="155:14">assert</name><argument_list pos:start="155:15" pos:end="155:47">(<argument pos:start="155:16" pos:end="155:46"><expr pos:start="155:16" pos:end="155:46"><name pos:start="155:16" pos:end="155:18">cpu</name> <operator pos:start="155:20" pos:end="155:21">&gt;=</operator> <literal type="number" pos:start="155:23" pos:end="155:23">0</literal> <operator pos:start="155:25" pos:end="155:26">&amp;&amp;</operator> <name pos:start="155:28" pos:end="155:30">cpu</name> <operator pos:start="155:32" pos:end="155:32">&lt;</operator> <name pos:start="155:34" pos:end="155:46">IRQMP_MAX_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:21"><expr pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:13">value</name> <operator pos:start="159:15" pos:end="159:16">&amp;=</operator> <literal type="number" pos:start="159:18" pos:end="159:20">0xF</literal></expr>;</expr_stmt> <comment type="block" pos:start="159:23" pos:end="159:46">/* clean up the value */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:37"><expr pos:start="161:9" pos:end="161:36"><name pos:start="161:9" pos:end="161:28"><name pos:start="161:9" pos:end="161:13">state</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:23">extended</name><index pos:start="161:24" pos:end="161:28">[<expr pos:start="161:25" pos:end="161:27"><name pos:start="161:25" pos:end="161:27">cpu</name></expr>]</index></name> <operator pos:start="161:30" pos:end="161:30">=</operator> <name pos:start="161:32" pos:end="161:36">value</name></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:50"><expr pos:start="169:5" pos:end="169:49"><call pos:start="169:5" pos:end="169:49"><name pos:start="169:5" pos:end="169:36">trace_grlib_irqmp_writel_unknown</name><argument_list pos:start="169:37" pos:end="169:49">(<argument pos:start="169:38" pos:end="169:41"><expr pos:start="169:38" pos:end="169:41"><name pos:start="169:38" pos:end="169:41">addr</name></expr></argument>, <argument pos:start="169:44" pos:end="169:48"><expr pos:start="169:44" pos:end="169:48"><name pos:start="169:44" pos:end="169:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
