<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2883.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">smbios_entry_add</name><parameter_list pos:start="1:21" pos:end="1:35">(<parameter pos:start="1:22" pos:end="1:34"><decl pos:start="1:22" pos:end="1:34"><type pos:start="1:22" pos:end="1:33"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:31">char</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">t</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:14">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:18"><name pos:start="5:10" pos:end="5:12">buf</name><index pos:start="5:13" pos:end="5:18">[<expr pos:start="5:14" pos:end="5:17"><literal type="number" pos:start="5:14" pos:end="5:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="75:5"><if pos:start="9:5" pos:end="75:5">if <condition pos:start="9:8" pos:end="9:53">(<expr pos:start="9:9" pos:end="9:52"><call pos:start="9:9" pos:end="9:52"><name pos:start="9:9" pos:end="9:23">get_param_value</name><argument_list pos:start="9:24" pos:end="9:52">(<argument pos:start="9:25" pos:end="9:27"><expr pos:start="9:25" pos:end="9:27"><name pos:start="9:25" pos:end="9:27">buf</name></expr></argument>, <argument pos:start="9:30" pos:end="9:40"><expr pos:start="9:30" pos:end="9:40"><sizeof pos:start="9:30" pos:end="9:40">sizeof<argument_list pos:start="9:36" pos:end="9:40">(<argument pos:start="9:37" pos:end="9:39"><expr pos:start="9:37" pos:end="9:39"><name pos:start="9:37" pos:end="9:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="9:43" pos:end="9:48"><expr pos:start="9:43" pos:end="9:48"><literal type="string" pos:start="9:43" pos:end="9:48">"file"</literal></expr></argument>, <argument pos:start="9:51" pos:end="9:51"><expr pos:start="9:51" pos:end="9:51"><name pos:start="9:51" pos:end="9:51">t</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:55" pos:end="75:5">{<block_content pos:start="11:9" pos:end="73:17">

        <decl_stmt pos:start="11:9" pos:end="11:47"><decl pos:start="11:9" pos:end="11:46"><type pos:start="11:9" pos:end="11:40"><name pos:start="11:9" pos:end="11:38"><name pos:start="11:9" pos:end="11:14">struct</name> <name pos:start="11:16" pos:end="11:38">smbios_structure_header</name></name> <modifier pos:start="11:40" pos:end="11:40">*</modifier></type><name pos:start="11:41" pos:end="11:46">header</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:35"><decl pos:start="13:9" pos:end="13:34"><type pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:14">struct</name> <name pos:start="13:16" pos:end="13:27">smbios_table</name></name> <modifier pos:start="13:29" pos:end="13:29">*</modifier></type><name pos:start="13:30" pos:end="13:34">table</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:39"><decl pos:start="15:9" pos:end="15:38"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:16">size</name> <init pos:start="15:18" pos:end="15:38">= <expr pos:start="15:20" pos:end="15:38"><call pos:start="15:20" pos:end="15:38"><name pos:start="15:20" pos:end="15:33">get_image_size</name><argument_list pos:start="15:34" pos:end="15:38">(<argument pos:start="15:35" pos:end="15:37"><expr pos:start="15:35" pos:end="15:37"><name pos:start="15:35" pos:end="15:37">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:58">(<expr pos:start="19:13" pos:end="19:57"><name pos:start="19:13" pos:end="19:16">size</name> <operator pos:start="19:18" pos:end="19:18">&lt;</operator> <sizeof pos:start="19:20" pos:end="19:57">sizeof<argument_list pos:start="19:26" pos:end="19:57">(<argument pos:start="19:27" pos:end="19:56"><expr pos:start="19:27" pos:end="19:56">struct <name pos:start="19:34" pos:end="19:56">smbios_structure_header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="19:60" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:20">

            <expr_stmt pos:start="21:13" pos:end="21:63"><expr pos:start="21:13" pos:end="21:62"><call pos:start="21:13" pos:end="21:62"><name pos:start="21:13" pos:end="21:19">fprintf</name><argument_list pos:start="21:20" pos:end="21:62">(<argument pos:start="21:21" pos:end="21:26"><expr pos:start="21:21" pos:end="21:26"><name pos:start="21:21" pos:end="21:26">stderr</name></expr></argument>, <argument pos:start="21:29" pos:end="21:56"><expr pos:start="21:29" pos:end="21:56"><literal type="string" pos:start="21:29" pos:end="21:56">"Cannot read smbios file %s"</literal></expr></argument>, <argument pos:start="21:59" pos:end="21:61"><expr pos:start="21:59" pos:end="21:61"><name pos:start="21:59" pos:end="21:61">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:20"><expr pos:start="23:13" pos:end="23:19"><call pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:16">exit</name><argument_list pos:start="23:17" pos:end="23:19">(<argument pos:start="23:18" pos:end="23:18"><expr pos:start="23:18" pos:end="23:18"><literal type="number" pos:start="23:18" pos:end="23:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:28">(<expr pos:start="29:13" pos:end="29:27"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:27">smbios_entries</name></expr>)</condition> <block pos:start="29:30" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:62">

            <expr_stmt pos:start="31:13" pos:end="31:50"><expr pos:start="31:13" pos:end="31:49"><name pos:start="31:13" pos:end="31:30">smbios_entries_len</name> <operator pos:start="31:32" pos:end="31:32">=</operator> <sizeof pos:start="31:34" pos:end="31:49">sizeof<argument_list pos:start="31:40" pos:end="31:49">(<argument pos:start="31:41" pos:end="31:48"><expr pos:start="31:41" pos:end="31:48"><name pos:start="31:41" pos:end="31:48">uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:62"><expr pos:start="33:13" pos:end="33:61"><name pos:start="33:13" pos:end="33:26">smbios_entries</name> <operator pos:start="33:28" pos:end="33:28">=</operator> <call pos:start="33:30" pos:end="33:61"><name pos:start="33:30" pos:end="33:41">qemu_mallocz</name><argument_list pos:start="33:42" pos:end="33:61">(<argument pos:start="33:43" pos:end="33:60"><expr pos:start="33:43" pos:end="33:60"><name pos:start="33:43" pos:end="33:60">smbios_entries_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="41:77"><expr pos:start="39:9" pos:end="41:76"><name pos:start="39:9" pos:end="39:22">smbios_entries</name> <operator pos:start="39:24" pos:end="39:24">=</operator> <call pos:start="39:26" pos:end="41:76"><name pos:start="39:26" pos:end="39:37">qemu_realloc</name><argument_list pos:start="39:38" pos:end="41:76">(<argument pos:start="39:39" pos:end="39:52"><expr pos:start="39:39" pos:end="39:52"><name pos:start="39:39" pos:end="39:52">smbios_entries</name></expr></argument>, <argument pos:start="39:55" pos:end="41:75"><expr pos:start="39:55" pos:end="41:75"><name pos:start="39:55" pos:end="39:72">smbios_entries_len</name> <operator pos:start="39:74" pos:end="39:74">+</operator>

                                                      <sizeof pos:start="41:55" pos:end="41:68">sizeof<argument_list pos:start="41:61" pos:end="41:68">(<argument pos:start="41:62" pos:end="41:67"><expr pos:start="41:62" pos:end="41:67"><operator pos:start="41:62" pos:end="41:62">*</operator><name pos:start="41:63" pos:end="41:67">table</name></expr></argument>)</argument_list></sizeof> <operator pos:start="41:70" pos:end="41:70">+</operator> <name pos:start="41:72" pos:end="41:75">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:77"><expr pos:start="43:9" pos:end="43:76"><name pos:start="43:9" pos:end="43:13">table</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <operator pos:start="43:17" pos:end="43:17">(</operator>struct <name pos:start="43:25" pos:end="43:36">smbios_table</name> <operator pos:start="43:38" pos:end="43:38">*</operator><operator pos:start="43:39" pos:end="43:39">)</operator><operator pos:start="43:40" pos:end="43:40">(</operator><name pos:start="43:41" pos:end="43:54">smbios_entries</name> <operator pos:start="43:56" pos:end="43:56">+</operator> <name pos:start="43:58" pos:end="43:75">smbios_entries_len</name><operator pos:start="43:76" pos:end="43:76">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:48"><expr pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:13">table</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:21">header</name><operator pos:start="45:22" pos:end="45:22">.</operator><name pos:start="45:23" pos:end="45:26">type</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <name pos:start="45:30" pos:end="45:47">SMBIOS_TABLE_ENTRY</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:66"><expr pos:start="47:9" pos:end="47:65"><name pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:13">table</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:21">header</name><operator pos:start="47:22" pos:end="47:22">.</operator><name pos:start="47:23" pos:end="47:28">length</name></name> <operator pos:start="47:30" pos:end="47:30">=</operator> <call pos:start="47:32" pos:end="47:65"><name pos:start="47:32" pos:end="47:42">cpu_to_le16</name><argument_list pos:start="47:43" pos:end="47:65">(<argument pos:start="47:44" pos:end="47:64"><expr pos:start="47:44" pos:end="47:64"><sizeof pos:start="47:44" pos:end="47:57">sizeof<argument_list pos:start="47:50" pos:end="47:57">(<argument pos:start="47:51" pos:end="47:56"><expr pos:start="47:51" pos:end="47:56"><operator pos:start="47:51" pos:end="47:51">*</operator><name pos:start="47:52" pos:end="47:56">table</name></expr></argument>)</argument_list></sizeof> <operator pos:start="47:59" pos:end="47:59">+</operator> <name pos:start="47:61" pos:end="47:64">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:49">(<expr pos:start="51:13" pos:end="51:48"><call pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:22">load_image</name><argument_list pos:start="51:23" pos:end="51:40">(<argument pos:start="51:24" pos:end="51:26"><expr pos:start="51:24" pos:end="51:26"><name pos:start="51:24" pos:end="51:26">buf</name></expr></argument>, <argument pos:start="51:29" pos:end="51:39"><expr pos:start="51:29" pos:end="51:39"><name pos:start="51:29" pos:end="51:39"><name pos:start="51:29" pos:end="51:33">table</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:39">data</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:42" pos:end="51:43">!=</operator> <name pos:start="51:45" pos:end="51:48">size</name></expr>)</condition> <block pos:start="51:51" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:20">

            <expr_stmt pos:start="53:13" pos:end="53:66"><expr pos:start="53:13" pos:end="53:65"><call pos:start="53:13" pos:end="53:65"><name pos:start="53:13" pos:end="53:19">fprintf</name><argument_list pos:start="53:20" pos:end="53:65">(<argument pos:start="53:21" pos:end="53:26"><expr pos:start="53:21" pos:end="53:26"><name pos:start="53:21" pos:end="53:26">stderr</name></expr></argument>, <argument pos:start="53:29" pos:end="53:59"><expr pos:start="53:29" pos:end="53:59"><literal type="string" pos:start="53:29" pos:end="53:59">"Failed to load smbios file %s"</literal></expr></argument>, <argument pos:start="53:62" pos:end="53:64"><expr pos:start="53:62" pos:end="53:64"><name pos:start="53:62" pos:end="53:64">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:20"><expr pos:start="55:13" pos:end="55:19"><call pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:16">exit</name><argument_list pos:start="55:17" pos:end="55:19">(<argument pos:start="55:18" pos:end="55:18"><expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:65"><expr pos:start="61:9" pos:end="61:64"><name pos:start="61:9" pos:end="61:14">header</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <operator pos:start="61:18" pos:end="61:18">(</operator>struct <name pos:start="61:26" pos:end="61:48">smbios_structure_header</name> <operator pos:start="61:50" pos:end="61:50">*</operator><operator pos:start="61:51" pos:end="61:51">)</operator><operator pos:start="61:52" pos:end="61:52">(</operator><name pos:start="61:53" pos:end="61:63"><name pos:start="61:53" pos:end="61:57">table</name><operator pos:start="61:58" pos:end="61:59">-&gt;</operator><name pos:start="61:60" pos:end="61:63">data</name></name><operator pos:start="61:64" pos:end="61:64">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:65"><expr pos:start="63:9" pos:end="63:64"><call pos:start="63:9" pos:end="63:64"><name pos:start="63:9" pos:end="63:30">smbios_check_collision</name><argument_list pos:start="63:31" pos:end="63:64">(<argument pos:start="63:32" pos:end="63:43"><expr pos:start="63:32" pos:end="63:43"><name pos:start="63:32" pos:end="63:43"><name pos:start="63:32" pos:end="63:37">header</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:43">type</name></name></expr></argument>, <argument pos:start="63:46" pos:end="63:63"><expr pos:start="63:46" pos:end="63:63"><name pos:start="63:46" pos:end="63:63">SMBIOS_TABLE_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:52"><expr pos:start="67:9" pos:end="67:51"><name pos:start="67:9" pos:end="67:26">smbios_entries_len</name> <operator pos:start="67:28" pos:end="67:29">+=</operator> <sizeof pos:start="67:31" pos:end="67:44">sizeof<argument_list pos:start="67:37" pos:end="67:44">(<argument pos:start="67:38" pos:end="67:43"><expr pos:start="67:38" pos:end="67:43"><operator pos:start="67:38" pos:end="67:38">*</operator><name pos:start="67:39" pos:end="67:43">table</name></expr></argument>)</argument_list></sizeof> <operator pos:start="67:46" pos:end="67:46">+</operator> <name pos:start="67:48" pos:end="67:51">size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="71:74"><expr pos:start="69:9" pos:end="71:73"><operator pos:start="69:9" pos:end="69:9">(</operator><operator pos:start="69:10" pos:end="69:10">*</operator><operator pos:start="69:11" pos:end="69:11">(</operator><name pos:start="69:12" pos:end="69:19">uint16_t</name> <operator pos:start="69:21" pos:end="69:21">*</operator><operator pos:start="69:22" pos:end="69:22">)</operator><name pos:start="69:23" pos:end="69:36">smbios_entries</name><operator pos:start="69:37" pos:end="69:37">)</operator> <operator pos:start="69:39" pos:end="69:39">=</operator>

                <call pos:start="71:17" pos:end="71:73"><name pos:start="71:17" pos:end="71:27">cpu_to_le16</name><argument_list pos:start="71:28" pos:end="71:73">(<argument pos:start="71:29" pos:end="71:72"><expr pos:start="71:29" pos:end="71:72"><call pos:start="71:29" pos:end="71:68"><name pos:start="71:29" pos:end="71:39">le16_to_cpu</name><argument_list pos:start="71:40" pos:end="71:68">(<argument pos:start="71:41" pos:end="71:67"><expr pos:start="71:41" pos:end="71:67"><operator pos:start="71:41" pos:end="71:41">*</operator><operator pos:start="71:42" pos:end="71:42">(</operator><name pos:start="71:43" pos:end="71:50">uint16_t</name> <operator pos:start="71:52" pos:end="71:52">*</operator><operator pos:start="71:53" pos:end="71:53">)</operator><name pos:start="71:54" pos:end="71:67">smbios_entries</name></expr></argument>)</argument_list></call> <operator pos:start="71:70" pos:end="71:70">+</operator> <literal type="number" pos:start="71:72" pos:end="71:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="107:5"><if pos:start="79:5" pos:end="107:5">if <condition pos:start="79:8" pos:end="79:53">(<expr pos:start="79:9" pos:end="79:52"><call pos:start="79:9" pos:end="79:52"><name pos:start="79:9" pos:end="79:23">get_param_value</name><argument_list pos:start="79:24" pos:end="79:52">(<argument pos:start="79:25" pos:end="79:27"><expr pos:start="79:25" pos:end="79:27"><name pos:start="79:25" pos:end="79:27">buf</name></expr></argument>, <argument pos:start="79:30" pos:end="79:40"><expr pos:start="79:30" pos:end="79:40"><sizeof pos:start="79:30" pos:end="79:40">sizeof<argument_list pos:start="79:36" pos:end="79:40">(<argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="79:43" pos:end="79:48"><expr pos:start="79:43" pos:end="79:48"><literal type="string" pos:start="79:43" pos:end="79:48">"type"</literal></expr></argument>, <argument pos:start="79:51" pos:end="79:51"><expr pos:start="79:51" pos:end="79:51"><name pos:start="79:51" pos:end="79:51">t</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:55" pos:end="107:5">{<block_content pos:start="81:9" pos:end="105:9">

        <decl_stmt pos:start="81:9" pos:end="81:51"><decl pos:start="81:9" pos:end="81:50"><type pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:16">unsigned</name> <name pos:start="81:18" pos:end="81:21">long</name></type> <name pos:start="81:23" pos:end="81:26">type</name> <init pos:start="81:28" pos:end="81:50">= <expr pos:start="81:30" pos:end="81:50"><call pos:start="81:30" pos:end="81:50"><name pos:start="81:30" pos:end="81:36">strtoul</name><argument_list pos:start="81:37" pos:end="81:50">(<argument pos:start="81:38" pos:end="81:40"><expr pos:start="81:38" pos:end="81:40"><name pos:start="81:38" pos:end="81:40">buf</name></expr></argument>, <argument pos:start="81:43" pos:end="81:46"><expr pos:start="81:43" pos:end="81:46"><name pos:start="81:43" pos:end="81:46">NULL</name></expr></argument>, <argument pos:start="81:49" pos:end="81:49"><expr pos:start="81:49" pos:end="81:49"><literal type="number" pos:start="81:49" pos:end="81:49">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <switch pos:start="83:9" pos:end="105:9">switch <condition pos:start="83:16" pos:end="83:21">(<expr pos:start="83:17" pos:end="83:20"><name pos:start="83:17" pos:end="83:20">type</name></expr>)</condition> <block pos:start="83:23" pos:end="105:9">{<block_content pos:start="85:9" pos:end="103:20">

        <case pos:start="85:9" pos:end="85:15">case <expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>:</case>

            <expr_stmt pos:start="87:13" pos:end="87:42"><expr pos:start="87:13" pos:end="87:41"><call pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:38">smbios_build_type_0_fields</name><argument_list pos:start="87:39" pos:end="87:41">(<argument pos:start="87:40" pos:end="87:40"><expr pos:start="87:40" pos:end="87:40"><name pos:start="87:40" pos:end="87:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="89:13" pos:end="89:21">return <expr pos:start="89:20" pos:end="89:20"><literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr>;</return>

        <case pos:start="91:9" pos:end="91:15">case <expr pos:start="91:14" pos:end="91:14"><literal type="number" pos:start="91:14" pos:end="91:14">1</literal></expr>:</case>

            <expr_stmt pos:start="93:13" pos:end="93:42"><expr pos:start="93:13" pos:end="93:41"><call pos:start="93:13" pos:end="93:41"><name pos:start="93:13" pos:end="93:38">smbios_build_type_1_fields</name><argument_list pos:start="93:39" pos:end="93:41">(<argument pos:start="93:40" pos:end="93:40"><expr pos:start="93:40" pos:end="93:40"><name pos:start="93:40" pos:end="93:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:21">return <expr pos:start="95:20" pos:end="95:20"><literal type="number" pos:start="95:20" pos:end="95:20">0</literal></expr>;</return>

        <default pos:start="97:9" pos:end="97:16">default:</default>

            <expr_stmt pos:start="99:13" pos:end="101:35"><expr pos:start="99:13" pos:end="101:34"><call pos:start="99:13" pos:end="101:34"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="101:34">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="101:27"><expr pos:start="99:29" pos:end="101:27"><literal type="string" pos:start="99:29" pos:end="99:77">"Don't know how to build fields for SMBIOS type "</literal>

                    <literal type="string" pos:start="101:21" pos:end="101:27">"%ld\n"</literal></expr></argument>, <argument pos:start="101:30" pos:end="101:33"><expr pos:start="101:30" pos:end="101:33"><name pos:start="101:30" pos:end="101:33">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:20"><expr pos:start="103:13" pos:end="103:19"><call pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:16">exit</name><argument_list pos:start="103:17" pos:end="103:19">(<argument pos:start="103:18" pos:end="103:18"><expr pos:start="103:18" pos:end="103:18"><literal type="number" pos:start="103:18" pos:end="103:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:61"><expr pos:start="111:5" pos:end="111:60"><call pos:start="111:5" pos:end="111:60"><name pos:start="111:5" pos:end="111:11">fprintf</name><argument_list pos:start="111:12" pos:end="111:60">(<argument pos:start="111:13" pos:end="111:18"><expr pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:18">stderr</name></expr></argument>, <argument pos:start="111:21" pos:end="111:59"><expr pos:start="111:21" pos:end="111:59"><literal type="string" pos:start="111:21" pos:end="111:59">"smbios: must specify type= or file=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="113:5" pos:end="113:14">return <expr pos:start="113:12" pos:end="113:13"><operator pos:start="113:12" pos:end="113:12">-</operator><literal type="number" pos:start="113:13" pos:end="113:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
