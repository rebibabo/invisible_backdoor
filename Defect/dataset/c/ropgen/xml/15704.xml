<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15704.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mainstone_common_init</name><parameter_list pos:start="1:34" pos:end="7:80">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:44">ram_addr_t</name></type> <name pos:start="1:46" pos:end="1:53">ram_size</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:43"><decl pos:start="3:17" pos:end="3:43"><type pos:start="3:17" pos:end="3:43"><specifier pos:start="3:17" pos:end="3:21">const</specifier> <name pos:start="3:23" pos:end="3:26">char</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:43">kernel_filename</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:42"><decl pos:start="5:17" pos:end="5:42"><type pos:start="5:17" pos:end="5:42"><specifier pos:start="5:17" pos:end="5:21">const</specifier> <name pos:start="5:23" pos:end="5:26">char</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:42">kernel_cmdline</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:71"><decl pos:start="5:45" pos:end="5:71"><type pos:start="5:45" pos:end="5:71"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:71">initrd_filename</name></decl></parameter>,

                <parameter pos:start="7:17" pos:end="7:37"><decl pos:start="7:17" pos:end="7:37"><type pos:start="7:17" pos:end="7:37"><specifier pos:start="7:17" pos:end="7:21">const</specifier> <name pos:start="7:23" pos:end="7:26">char</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:37">cpu_model</name></decl></parameter>, <parameter pos:start="7:40" pos:end="7:67"><decl pos:start="7:40" pos:end="7:67"><type pos:start="7:40" pos:end="7:67"><name pos:start="7:40" pos:end="7:61"><name pos:start="7:40" pos:end="7:43">enum</name> <name pos:start="7:45" pos:end="7:61">mainstone_model_e</name></name></type> <name pos:start="7:63" pos:end="7:67">model</name></decl></parameter>, <parameter pos:start="7:70" pos:end="7:79"><decl pos:start="7:70" pos:end="7:79"><type pos:start="7:70" pos:end="7:79"><name pos:start="7:70" pos:end="7:72">int</name></type> <name pos:start="7:74" pos:end="7:79">arm_id</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="133:1">{<block_content pos:start="11:5" pos:end="131:48">

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:23">sector_len</name> <init pos:start="11:25" pos:end="11:36">= <expr pos:start="11:27" pos:end="11:36"><literal type="number" pos:start="11:27" pos:end="11:29">256</literal> <operator pos:start="11:31" pos:end="11:31">*</operator> <literal type="number" pos:start="11:33" pos:end="11:36">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:77"><decl pos:start="13:5" pos:end="13:76"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:22">target_phys_addr_t</name></type> <name pos:start="13:24" pos:end="13:45"><name pos:start="13:24" pos:end="13:43">mainstone_flash_base</name><index pos:start="13:44" pos:end="13:45">[]</index></name> <init pos:start="13:47" pos:end="13:76">= <expr pos:start="13:49" pos:end="13:76"><block pos:start="13:49" pos:end="13:76">{ <expr pos:start="13:51" pos:end="13:61"><name pos:start="13:51" pos:end="13:61">MST_FLASH_0</name></expr>, <expr pos:start="13:64" pos:end="13:74"><name pos:start="13:64" pos:end="13:74">MST_FLASH_1</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">PXA2xxState</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:24">mst_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">DriveInfo</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:11"><decl pos:start="23:5" pos:end="23:10"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:10">be</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:32"><if pos:start="27:5" pos:end="29:32">if <condition pos:start="27:8" pos:end="27:19">(<expr pos:start="27:9" pos:end="27:18"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:32"><block_content pos:start="29:9" pos:end="29:32">

        <expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:17">cpu_model</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="string" pos:start="29:21" pos:end="29:31">"pxa270-c5"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:28">/* Setup CPU &amp; memory */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:59"><expr pos:start="35:5" pos:end="35:58"><name pos:start="35:5" pos:end="35:7">cpu</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:58"><name pos:start="35:11" pos:end="35:21">pxa270_init</name><argument_list pos:start="35:22" pos:end="35:58">(<argument pos:start="35:23" pos:end="35:46"><expr pos:start="35:23" pos:end="35:46"><name pos:start="35:23" pos:end="35:46"><name pos:start="35:23" pos:end="35:37">mainstone_binfo</name><operator pos:start="35:38" pos:end="35:38">.</operator><name pos:start="35:39" pos:end="35:46">ram_size</name></name></expr></argument>, <argument pos:start="35:49" pos:end="35:57"><expr pos:start="35:49" pos:end="35:57"><name pos:start="35:49" pos:end="35:57">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="46:0"><expr pos:start="37:5" pos:end="41:63"><call pos:start="37:5" pos:end="41:63"><name pos:start="37:5" pos:end="37:32">cpu_register_physical_memory</name><argument_list pos:start="37:33" pos:end="41:63">(<argument pos:start="37:34" pos:end="37:34"><expr pos:start="37:34" pos:end="37:34"><literal type="number" pos:start="37:34" pos:end="37:34">0</literal></expr></argument>, <argument pos:start="37:37" pos:end="37:49"><expr pos:start="37:37" pos:end="37:49"><name pos:start="37:37" pos:end="37:49">MAINSTONE_ROM</name></expr></argument>,

                    <argument pos:start="39:21" pos:end="41:62"><expr pos:start="39:21" pos:end="41:62"><call pos:start="39:21" pos:end="41:49"><name pos:start="39:21" pos:end="39:34">qemu_ram_alloc</name><argument_list pos:start="39:35" pos:end="41:49">(<argument pos:start="39:36" pos:end="39:39"><expr pos:start="39:36" pos:end="39:39"><name pos:start="39:36" pos:end="39:39">NULL</name></expr></argument>, <argument pos:start="39:42" pos:end="39:56"><expr pos:start="39:42" pos:end="39:56"><literal type="string" pos:start="39:42" pos:end="39:56">"mainstone.rom"</literal></expr></argument>,

                                   <argument pos:start="41:36" pos:end="41:48"><expr pos:start="41:36" pos:end="41:48"><name pos:start="41:36" pos:end="41:48">MAINSTONE_ROM</name></expr></argument>)</argument_list></call> <operator pos:start="41:51" pos:end="41:51">|</operator> <name pos:start="41:53" pos:end="41:62">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="45:1" pos:end="45:29">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:6">be</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <literal type="number" pos:start="47:10" pos:end="47:10">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:6">be</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <literal type="number" pos:start="51:10" pos:end="51:10">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="55:5" pos:end="55:56">/* There are two 32MiB flash devices on the board */</comment>

    <for pos:start="57:5" pos:end="93:5">for <control pos:start="57:9" pos:end="57:28">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:21"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <literal type="number" pos:start="57:21" pos:end="57:21">2</literal></expr>;</condition> <incr pos:start="57:24" pos:end="57:27"><expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:24">i</name> <operator pos:start="57:26" pos:end="57:27">++</operator></expr></incr>)</control> <block pos:start="57:30" pos:end="93:5">{<block_content pos:start="59:9" pos:end="91:9">

        <expr_stmt pos:start="59:9" pos:end="59:43"><expr pos:start="59:9" pos:end="59:42"><name pos:start="59:9" pos:end="59:13">dinfo</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:42"><name pos:start="59:17" pos:end="59:25">drive_get</name><argument_list pos:start="59:26" pos:end="59:42">(<argument pos:start="59:27" pos:end="59:35"><expr pos:start="59:27" pos:end="59:35"><name pos:start="59:27" pos:end="59:35">IF_PFLASH</name></expr></argument>, <argument pos:start="59:38" pos:end="59:38"><expr pos:start="59:38" pos:end="59:38"><literal type="number" pos:start="59:38" pos:end="59:38">0</literal></expr></argument>, <argument pos:start="59:41" pos:end="59:41"><expr pos:start="59:41" pos:end="59:41"><name pos:start="59:41" pos:end="59:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="69:9"><if pos:start="61:9" pos:end="69:9">if <condition pos:start="61:12" pos:end="61:19">(<expr pos:start="61:13" pos:end="61:18"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:18">dinfo</name></expr>)</condition> <block pos:start="61:21" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:20">

            <expr_stmt pos:start="63:13" pos:end="65:44"><expr pos:start="63:13" pos:end="65:43"><call pos:start="63:13" pos:end="65:43"><name pos:start="63:13" pos:end="63:19">fprintf</name><argument_list pos:start="63:20" pos:end="65:43">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">stderr</name></expr></argument>, <argument pos:start="63:29" pos:end="65:42"><expr pos:start="63:29" pos:end="65:42"><literal type="string" pos:start="63:29" pos:end="63:70">"Two flash images must be given with the "</literal>

                    <literal type="string" pos:start="65:21" pos:end="65:42">"'pflash' parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:20"><expr pos:start="67:13" pos:end="67:19"><call pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:16">exit</name><argument_list pos:start="67:17" pos:end="67:19">(<argument pos:start="67:18" pos:end="67:18"><expr pos:start="67:18" pos:end="67:18"><literal type="number" pos:start="67:18" pos:end="67:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="73:9" pos:end="91:9"><if pos:start="73:9" pos:end="91:9">if <condition pos:start="73:12" pos:end="85:39">(<expr pos:start="73:13" pos:end="85:38"><operator pos:start="73:13" pos:end="73:13">!</operator><call pos:start="73:14" pos:end="85:38"><name pos:start="73:14" pos:end="73:34">pflash_cfi01_register</name><argument_list pos:start="73:35" pos:end="85:38">(<argument pos:start="73:36" pos:end="73:58"><expr pos:start="73:36" pos:end="73:58"><name pos:start="73:36" pos:end="73:58"><name pos:start="73:36" pos:end="73:55">mainstone_flash_base</name><index pos:start="73:56" pos:end="73:58">[<expr pos:start="73:57" pos:end="73:57"><name pos:start="73:57" pos:end="73:57">i</name></expr>]</index></name></expr></argument>,

                                   <argument pos:start="75:36" pos:end="79:66"><expr pos:start="75:36" pos:end="79:66"><call pos:start="75:36" pos:end="79:66"><name pos:start="75:36" pos:end="75:49">qemu_ram_alloc</name><argument_list pos:start="75:50" pos:end="79:66">(<argument pos:start="75:51" pos:end="75:54"><expr pos:start="75:51" pos:end="75:54"><name pos:start="75:51" pos:end="75:54">NULL</name></expr></argument>, <argument pos:start="75:57" pos:end="77:68"><expr pos:start="75:57" pos:end="77:68"><ternary pos:start="75:57" pos:end="77:68"><condition pos:start="75:57" pos:end="75:59"><expr pos:start="75:57" pos:end="75:57"><name pos:start="75:57" pos:end="75:57">i</name></expr> ?</condition><then pos:start="75:61" pos:end="75:78"> <expr pos:start="75:61" pos:end="75:78"><literal type="string" pos:start="75:61" pos:end="75:78">"mainstone.flash1"</literal></expr> </then><else pos:start="75:80" pos:end="77:68">:

                                                  <expr pos:start="77:51" pos:end="77:68"><literal type="string" pos:start="77:51" pos:end="77:68">"mainstone.flash0"</literal></expr></else></ternary></expr></argument>,

                                                  <argument pos:start="79:51" pos:end="79:65"><expr pos:start="79:51" pos:end="79:65"><name pos:start="79:51" pos:end="79:65">MAINSTONE_FLASH</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="81:36" pos:end="81:46"><expr pos:start="81:36" pos:end="81:46"><name pos:start="81:36" pos:end="81:46"><name pos:start="81:36" pos:end="81:40">dinfo</name><operator pos:start="81:41" pos:end="81:42">-&gt;</operator><name pos:start="81:43" pos:end="81:46">bdrv</name></name></expr></argument>, <argument pos:start="81:49" pos:end="81:58"><expr pos:start="81:49" pos:end="81:58"><name pos:start="81:49" pos:end="81:58">sector_len</name></expr></argument>,

                                   <argument pos:start="83:36" pos:end="83:63"><expr pos:start="83:36" pos:end="83:63"><name pos:start="83:36" pos:end="83:50">MAINSTONE_FLASH</name> <operator pos:start="83:52" pos:end="83:52">/</operator> <name pos:start="83:54" pos:end="83:63">sector_len</name></expr></argument>, <argument pos:start="83:66" pos:end="83:66"><expr pos:start="83:66" pos:end="83:66"><literal type="number" pos:start="83:66" pos:end="83:66">4</literal></expr></argument>, <argument pos:start="83:69" pos:end="83:69"><expr pos:start="83:69" pos:end="83:69"><literal type="number" pos:start="83:69" pos:end="83:69">0</literal></expr></argument>, <argument pos:start="83:72" pos:end="83:72"><expr pos:start="83:72" pos:end="83:72"><literal type="number" pos:start="83:72" pos:end="83:72">0</literal></expr></argument>, <argument pos:start="83:75" pos:end="83:75"><expr pos:start="83:75" pos:end="83:75"><literal type="number" pos:start="83:75" pos:end="83:75">0</literal></expr></argument>, <argument pos:start="83:78" pos:end="83:78"><expr pos:start="83:78" pos:end="83:78"><literal type="number" pos:start="83:78" pos:end="83:78">0</literal></expr></argument>,

                                   <argument pos:start="85:36" pos:end="85:37"><expr pos:start="85:36" pos:end="85:37"><name pos:start="85:36" pos:end="85:37">be</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:41" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:20">

            <expr_stmt pos:start="87:13" pos:end="87:71"><expr pos:start="87:13" pos:end="87:70"><call pos:start="87:13" pos:end="87:70"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="87:70">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:69"><expr pos:start="87:29" pos:end="87:69"><literal type="string" pos:start="87:29" pos:end="87:69">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:20"><expr pos:start="89:13" pos:end="89:19"><call pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:16">exit</name><argument_list pos:start="89:17" pos:end="89:19">(<argument pos:start="89:18" pos:end="89:18"><expr pos:start="89:18" pos:end="89:18"><literal type="number" pos:start="89:18" pos:end="89:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="97:5" pos:end="99:49"><expr pos:start="97:5" pos:end="99:48"><name pos:start="97:5" pos:end="97:11">mst_irq</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="99:48"><name pos:start="97:15" pos:end="97:34">sysbus_create_simple</name><argument_list pos:start="97:35" pos:end="99:48">(<argument pos:start="97:36" pos:end="97:51"><expr pos:start="97:36" pos:end="97:51"><literal type="string" pos:start="97:36" pos:end="97:51">"mainstone-fpga"</literal></expr></argument>, <argument pos:start="97:54" pos:end="97:66"><expr pos:start="97:54" pos:end="97:66"><name pos:start="97:54" pos:end="97:66">MST_FPGA_PHYS</name></expr></argument>,

                    <argument pos:start="99:21" pos:end="99:47"><expr pos:start="99:21" pos:end="99:47"><name pos:start="99:21" pos:end="99:47"><name pos:start="99:21" pos:end="99:23">cpu</name><operator pos:start="99:24" pos:end="99:25">-&gt;</operator><name pos:start="99:26" pos:end="99:28">pic</name><index pos:start="99:29" pos:end="99:47">[<expr pos:start="99:30" pos:end="99:46"><name pos:start="99:30" pos:end="99:46">PXA2XX_PIC_GPIO_0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:22">/* setup keypad */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:34"><expr pos:start="105:5" pos:end="105:33"><call pos:start="105:5" pos:end="105:33"><name pos:start="105:5" pos:end="105:10">printf</name><argument_list pos:start="105:11" pos:end="105:33">(<argument pos:start="105:12" pos:end="105:26"><expr pos:start="105:12" pos:end="105:26"><literal type="string" pos:start="105:12" pos:end="105:26">"map addr %p\n"</literal></expr></argument>, <argument pos:start="105:29" pos:end="105:32"><expr pos:start="105:29" pos:end="105:32"><operator pos:start="105:29" pos:end="105:29">&amp;</operator><name pos:start="105:30" pos:end="105:32">map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:47"><expr pos:start="107:5" pos:end="107:46"><call pos:start="107:5" pos:end="107:46"><name pos:start="107:5" pos:end="107:26">pxa27x_register_keypad</name><argument_list pos:start="107:27" pos:end="107:46">(<argument pos:start="107:28" pos:end="107:34"><expr pos:start="107:28" pos:end="107:34"><name pos:start="107:28" pos:end="107:34"><name pos:start="107:28" pos:end="107:30">cpu</name><operator pos:start="107:31" pos:end="107:32">-&gt;</operator><name pos:start="107:33" pos:end="107:34">kp</name></name></expr></argument>, <argument pos:start="107:37" pos:end="107:39"><expr pos:start="107:37" pos:end="107:39"><name pos:start="107:37" pos:end="107:39">map</name></expr></argument>, <argument pos:start="107:42" pos:end="107:45"><expr pos:start="107:42" pos:end="107:45"><literal type="number" pos:start="107:42" pos:end="107:45">0xe0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:21">/* MMC/SD host */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:77"><expr pos:start="113:5" pos:end="113:76"><call pos:start="113:5" pos:end="113:76"><name pos:start="113:5" pos:end="113:24">pxa2xx_mmci_handlers</name><argument_list pos:start="113:25" pos:end="113:76">(<argument pos:start="113:26" pos:end="113:33"><expr pos:start="113:26" pos:end="113:33"><name pos:start="113:26" pos:end="113:33"><name pos:start="113:26" pos:end="113:28">cpu</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:33">mmc</name></name></expr></argument>, <argument pos:start="113:36" pos:end="113:39"><expr pos:start="113:36" pos:end="113:39"><name pos:start="113:36" pos:end="113:39">NULL</name></expr></argument>, <argument pos:start="113:42" pos:end="113:75"><expr pos:start="113:42" pos:end="113:75"><call pos:start="113:42" pos:end="113:75"><name pos:start="113:42" pos:end="113:57">qdev_get_gpio_in</name><argument_list pos:start="113:58" pos:end="113:75">(<argument pos:start="113:59" pos:end="113:65"><expr pos:start="113:59" pos:end="113:65"><name pos:start="113:59" pos:end="113:65">mst_irq</name></expr></argument>, <argument pos:start="113:68" pos:end="113:74"><expr pos:start="113:68" pos:end="113:74"><name pos:start="113:68" pos:end="113:74">MMC_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="119:61"><expr pos:start="117:5" pos:end="119:60"><call pos:start="117:5" pos:end="119:60"><name pos:start="117:5" pos:end="117:18">smc91c111_init</name><argument_list pos:start="117:19" pos:end="119:60">(<argument pos:start="117:20" pos:end="117:31"><expr pos:start="117:20" pos:end="117:31"><operator pos:start="117:20" pos:end="117:20">&amp;</operator><name pos:start="117:21" pos:end="117:31"><name pos:start="117:21" pos:end="117:28">nd_table</name><index pos:start="117:29" pos:end="117:31">[<expr pos:start="117:30" pos:end="117:30"><literal type="number" pos:start="117:30" pos:end="117:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="117:34" pos:end="117:45"><expr pos:start="117:34" pos:end="117:45"><name pos:start="117:34" pos:end="117:45">MST_ETH_PHYS</name></expr></argument>,

                    <argument pos:start="119:21" pos:end="119:59"><expr pos:start="119:21" pos:end="119:59"><call pos:start="119:21" pos:end="119:59"><name pos:start="119:21" pos:end="119:36">qdev_get_gpio_in</name><argument_list pos:start="119:37" pos:end="119:59">(<argument pos:start="119:38" pos:end="119:44"><expr pos:start="119:38" pos:end="119:44"><name pos:start="119:38" pos:end="119:44">mst_irq</name></expr></argument>, <argument pos:start="119:47" pos:end="119:58"><expr pos:start="119:47" pos:end="119:58"><name pos:start="119:47" pos:end="119:58">ETHERNET_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:54"><expr pos:start="123:5" pos:end="123:53"><name pos:start="123:5" pos:end="123:35"><name pos:start="123:5" pos:end="123:19">mainstone_binfo</name><operator pos:start="123:20" pos:end="123:20">.</operator><name pos:start="123:21" pos:end="123:35">kernel_filename</name></name> <operator pos:start="123:37" pos:end="123:37">=</operator> <name pos:start="123:39" pos:end="123:53">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:52"><expr pos:start="125:5" pos:end="125:51"><name pos:start="125:5" pos:end="125:34"><name pos:start="125:5" pos:end="125:19">mainstone_binfo</name><operator pos:start="125:20" pos:end="125:20">.</operator><name pos:start="125:21" pos:end="125:34">kernel_cmdline</name></name> <operator pos:start="125:36" pos:end="125:36">=</operator> <name pos:start="125:38" pos:end="125:51">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:54"><expr pos:start="127:5" pos:end="127:53"><name pos:start="127:5" pos:end="127:35"><name pos:start="127:5" pos:end="127:19">mainstone_binfo</name><operator pos:start="127:20" pos:end="127:20">.</operator><name pos:start="127:21" pos:end="127:35">initrd_filename</name></name> <operator pos:start="127:37" pos:end="127:37">=</operator> <name pos:start="127:39" pos:end="127:53">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:38"><expr pos:start="129:5" pos:end="129:37"><name pos:start="129:5" pos:end="129:28"><name pos:start="129:5" pos:end="129:19">mainstone_binfo</name><operator pos:start="129:20" pos:end="129:20">.</operator><name pos:start="129:21" pos:end="129:28">board_id</name></name> <operator pos:start="129:30" pos:end="129:30">=</operator> <name pos:start="129:32" pos:end="129:37">arm_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:48"><expr pos:start="131:5" pos:end="131:47"><call pos:start="131:5" pos:end="131:47"><name pos:start="131:5" pos:end="131:19">arm_load_kernel</name><argument_list pos:start="131:20" pos:end="131:47">(<argument pos:start="131:21" pos:end="131:28"><expr pos:start="131:21" pos:end="131:28"><name pos:start="131:21" pos:end="131:28"><name pos:start="131:21" pos:end="131:23">cpu</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:28">env</name></name></expr></argument>, <argument pos:start="131:31" pos:end="131:46"><expr pos:start="131:31" pos:end="131:46"><operator pos:start="131:31" pos:end="131:31">&amp;</operator><name pos:start="131:32" pos:end="131:46">mainstone_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
