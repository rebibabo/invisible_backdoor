<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1289.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vmdk_read_extent</name><parameter_list pos:start="1:28" pos:end="5:38">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:38">VmdkExtent</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">extent</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:70"><decl pos:start="1:49" pos:end="1:70"><type pos:start="1:49" pos:end="1:70"><name pos:start="1:49" pos:end="1:55">int64_t</name></type> <name pos:start="1:57" pos:end="1:70">cluster_offset</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:53"><decl pos:start="3:29" pos:end="3:53"><type pos:start="3:29" pos:end="3:53"><name pos:start="3:29" pos:end="3:35">int64_t</name></type> <name pos:start="3:37" pos:end="3:53">offset_in_cluster</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:73"><decl pos:start="3:56" pos:end="3:73"><type pos:start="3:56" pos:end="3:73"><name pos:start="3:56" pos:end="3:67">QEMUIOVector</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:73">qiov</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:37"><decl pos:start="5:29" pos:end="5:37"><type pos:start="5:29" pos:end="5:37"><name pos:start="5:29" pos:end="5:31">int</name></type> <name pos:start="5:33" pos:end="5:37">bytes</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="127:1">{<block_content pos:start="9:5" pos:end="125:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">cluster_bytes</name></decl>, <decl pos:start="11:24" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:24" pos:end="11:32">buf_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:24">cluster_buf</name></decl>, <decl pos:start="13:27" pos:end="13:42"><type ref="prev" pos:start="13:5" pos:end="13:13"><modifier pos:start="13:27" pos:end="13:27">*</modifier></type><name pos:start="13:28" pos:end="13:42">compressed_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:23">uncomp_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:21">data_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:19">VmdkGrainMarker</name> <modifier pos:start="19:21" pos:end="19:21">*</modifier></type><name pos:start="19:22" pos:end="19:27">marker</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">uLongf</name></type> <name pos:start="21:12" pos:end="21:18">buf_len</name></decl>;</decl_stmt>





    <if_stmt pos:start="27:5" pos:end="43:5"><if pos:start="27:5" pos:end="43:5">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:27"><name pos:start="27:10" pos:end="27:15">extent</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:27">compressed</name></name></expr>)</condition> <block pos:start="27:30" pos:end="43:5">{<block_content pos:start="29:9" pos:end="41:17">

        <expr_stmt pos:start="29:9" pos:end="33:38"><expr pos:start="29:9" pos:end="33:37"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="33:37"><name pos:start="29:15" pos:end="29:28">bdrv_co_preadv</name><argument_list pos:start="29:29" pos:end="33:37">(<argument pos:start="29:30" pos:end="29:45"><expr pos:start="29:30" pos:end="29:45"><name pos:start="29:30" pos:end="29:45"><name pos:start="29:30" pos:end="29:35">extent</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:41">file</name><operator pos:start="29:42" pos:end="29:43">-&gt;</operator><name pos:start="29:44" pos:end="29:45">bs</name></name></expr></argument>,

                             <argument pos:start="31:30" pos:end="31:63"><expr pos:start="31:30" pos:end="31:63"><name pos:start="31:30" pos:end="31:43">cluster_offset</name> <operator pos:start="31:45" pos:end="31:45">+</operator> <name pos:start="31:47" pos:end="31:63">offset_in_cluster</name></expr></argument>, <argument pos:start="31:66" pos:end="31:70"><expr pos:start="31:66" pos:end="31:70"><name pos:start="31:66" pos:end="31:70">bytes</name></expr></argument>,

                             <argument pos:start="33:30" pos:end="33:33"><expr pos:start="33:30" pos:end="33:33"><name pos:start="33:30" pos:end="33:33">qiov</name></expr></argument>, <argument pos:start="33:36" pos:end="33:36"><expr pos:start="33:36" pos:end="33:36"><literal type="number" pos:start="33:36" pos:end="33:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:20">(<expr pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">&lt;</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>)</condition> <block pos:start="35:22" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:23">

            <return pos:start="37:13" pos:end="37:23">return <expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:50"><expr pos:start="45:5" pos:end="45:49"><name pos:start="45:5" pos:end="45:17">cluster_bytes</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:43"><name pos:start="45:21" pos:end="45:26">extent</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:43">cluster_sectors</name></name> <operator pos:start="45:45" pos:end="45:45">*</operator> <literal type="number" pos:start="45:47" pos:end="45:49">512</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="47:5" pos:end="47:79">/* Read two clusters in case GrainMarker + compressed data &gt; one cluster */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:34"><expr pos:start="49:5" pos:end="49:33"><name pos:start="49:5" pos:end="49:13">buf_bytes</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:29">cluster_bytes</name> <operator pos:start="49:31" pos:end="49:31">*</operator> <literal type="number" pos:start="49:33" pos:end="49:33">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:38"><expr pos:start="51:5" pos:end="51:37"><name pos:start="51:5" pos:end="51:15">cluster_buf</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:37"><name pos:start="51:19" pos:end="51:26">g_malloc</name><argument_list pos:start="51:27" pos:end="51:37">(<argument pos:start="51:28" pos:end="51:36"><expr pos:start="51:28" pos:end="51:36"><name pos:start="51:28" pos:end="51:36">buf_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:41"><expr pos:start="53:5" pos:end="53:40"><name pos:start="53:5" pos:end="53:14">uncomp_buf</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:40"><name pos:start="53:18" pos:end="53:25">g_malloc</name><argument_list pos:start="53:26" pos:end="53:40">(<argument pos:start="53:27" pos:end="53:39"><expr pos:start="53:27" pos:end="53:39"><name pos:start="53:27" pos:end="53:39">cluster_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="59:40"><expr pos:start="55:5" pos:end="59:39"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="59:39"><name pos:start="55:11" pos:end="55:20">bdrv_pread</name><argument_list pos:start="55:21" pos:end="59:39">(<argument pos:start="55:22" pos:end="55:33"><expr pos:start="55:22" pos:end="55:33"><name pos:start="55:22" pos:end="55:33"><name pos:start="55:22" pos:end="55:27">extent</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:33">file</name></name></expr></argument>,

                <argument pos:start="57:17" pos:end="57:30"><expr pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:30">cluster_offset</name></expr></argument>,

                <argument pos:start="59:17" pos:end="59:27"><expr pos:start="59:17" pos:end="59:27"><name pos:start="59:17" pos:end="59:27">cluster_buf</name></expr></argument>, <argument pos:start="59:30" pos:end="59:38"><expr pos:start="59:30" pos:end="59:38"><name pos:start="59:30" pos:end="59:38">buf_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:16">(<expr pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">&lt;</operator> <literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>)</condition> <block pos:start="61:18" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:17">

        <goto pos:start="63:9" pos:end="63:17">goto <name pos:start="63:14" pos:end="63:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:34"><expr pos:start="67:5" pos:end="67:33"><name pos:start="67:5" pos:end="67:19">compressed_data</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:33">cluster_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:28"><expr pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:11">buf_len</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:27">cluster_bytes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:29"><expr pos:start="71:5" pos:end="71:28"><name pos:start="71:5" pos:end="71:12">data_len</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <name pos:start="71:16" pos:end="71:28">cluster_bytes</name></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:27">(<expr pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:14">extent</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:26">has_marker</name></name></expr>)</condition> <block pos:start="73:29" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:45">

        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:14">marker</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <operator pos:start="75:18" pos:end="75:18">(</operator><name pos:start="75:19" pos:end="75:33">VmdkGrainMarker</name> <operator pos:start="75:35" pos:end="75:35">*</operator><operator pos:start="75:36" pos:end="75:36">)</operator><name pos:start="75:37" pos:end="75:47">cluster_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:39"><expr pos:start="77:9" pos:end="77:38"><name pos:start="77:9" pos:end="77:23">compressed_data</name> <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:38"><name pos:start="77:27" pos:end="77:32">marker</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:38">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:45"><expr pos:start="79:9" pos:end="79:44"><name pos:start="79:9" pos:end="79:16">data_len</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:44"><name pos:start="79:20" pos:end="79:30">le32_to_cpu</name><argument_list pos:start="79:31" pos:end="79:44">(<argument pos:start="79:32" pos:end="79:43"><expr pos:start="79:32" pos:end="79:43"><name pos:start="79:32" pos:end="79:43"><name pos:start="79:32" pos:end="79:37">marker</name><operator pos:start="79:38" pos:end="79:39">-&gt;</operator><name pos:start="79:40" pos:end="79:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:42">(<expr pos:start="83:9" pos:end="83:41"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:17">data_len</name> <operator pos:start="83:19" pos:end="83:20">||</operator> <name pos:start="83:22" pos:end="83:29">data_len</name> <operator pos:start="83:31" pos:end="83:31">&gt;</operator> <name pos:start="83:33" pos:end="83:41">buf_bytes</name></expr>)</condition> <block pos:start="83:44" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:17">

        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><name pos:start="85:16" pos:end="85:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:17">goto <name pos:start="87:14" pos:end="87:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:70"><expr pos:start="91:5" pos:end="91:69"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:69"><name pos:start="91:11" pos:end="91:20">uncompress</name><argument_list pos:start="91:21" pos:end="91:69">(<argument pos:start="91:22" pos:end="91:31"><expr pos:start="91:22" pos:end="91:31"><name pos:start="91:22" pos:end="91:31">uncomp_buf</name></expr></argument>, <argument pos:start="91:34" pos:end="91:41"><expr pos:start="91:34" pos:end="91:41"><operator pos:start="91:34" pos:end="91:34">&amp;</operator><name pos:start="91:35" pos:end="91:41">buf_len</name></expr></argument>, <argument pos:start="91:44" pos:end="91:58"><expr pos:start="91:44" pos:end="91:58"><name pos:start="91:44" pos:end="91:58">compressed_data</name></expr></argument>, <argument pos:start="91:61" pos:end="91:68"><expr pos:start="91:61" pos:end="91:68"><name pos:start="91:61" pos:end="91:68">data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="93:20">(<expr pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:14">!=</operator> <name pos:start="93:16" pos:end="93:19">Z_OK</name></expr>)</condition> <block pos:start="93:22" pos:end="101:5">{<block_content pos:start="95:9" pos:end="97:17">

        <expr_stmt pos:start="95:9" pos:end="95:22"><expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <operator pos:start="95:15" pos:end="95:15">-</operator><name pos:start="95:16" pos:end="95:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:17">goto <name pos:start="97:14" pos:end="97:16">out</name>;</goto>



    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="111:5"><if pos:start="103:5" pos:end="111:5">if <condition pos:start="103:8" pos:end="105:48">(<expr pos:start="103:9" pos:end="105:47"><name pos:start="103:9" pos:end="105:39"><name pos:start="103:9" pos:end="103:25">offset_in_cluster</name> <argument_list type="generic" pos:start="103:27" pos:end="105:39">&lt; <argument pos:start="103:29" pos:end="105:37"><expr pos:start="103:29" pos:end="105:37"><literal type="number" pos:start="103:29" pos:end="103:29">0</literal> <operator pos:start="103:31" pos:end="103:32">||</operator>

            <name pos:start="105:13" pos:end="105:29">offset_in_cluster</name> <operator pos:start="105:31" pos:end="105:31">+</operator> <name pos:start="105:33" pos:end="105:37">bytes</name></expr></argument> &gt;</argument_list></name> <name pos:start="105:41" pos:end="105:47">buf_len</name></expr>)</condition> <block pos:start="105:50" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:17">

        <expr_stmt pos:start="107:9" pos:end="107:22"><expr pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <operator pos:start="107:15" pos:end="107:15">-</operator><name pos:start="107:16" pos:end="107:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:17">goto <name pos:start="109:14" pos:end="109:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:72"><expr pos:start="113:5" pos:end="113:71"><call pos:start="113:5" pos:end="113:71"><name pos:start="113:5" pos:end="113:23">qemu_iovec_from_buf</name><argument_list pos:start="113:24" pos:end="113:71">(<argument pos:start="113:25" pos:end="113:28"><expr pos:start="113:25" pos:end="113:28"><name pos:start="113:25" pos:end="113:28">qiov</name></expr></argument>, <argument pos:start="113:31" pos:end="113:31"><expr pos:start="113:31" pos:end="113:31"><literal type="number" pos:start="113:31" pos:end="113:31">0</literal></expr></argument>, <argument pos:start="113:34" pos:end="113:63"><expr pos:start="113:34" pos:end="113:63"><name pos:start="113:34" pos:end="113:43">uncomp_buf</name> <operator pos:start="113:45" pos:end="113:45">+</operator> <name pos:start="113:47" pos:end="113:63">offset_in_cluster</name></expr></argument>, <argument pos:start="113:66" pos:end="113:70"><expr pos:start="113:66" pos:end="113:70"><name pos:start="113:66" pos:end="113:70">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:12"><expr pos:start="115:5" pos:end="115:11"><name pos:start="115:5" pos:end="115:7">ret</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <literal type="number" pos:start="115:11" pos:end="115:11">0</literal></expr>;</expr_stmt>



 <label pos:start="119:2" pos:end="119:5"><name pos:start="119:2" pos:end="119:4">out</name>:</label>

    <expr_stmt pos:start="121:5" pos:end="121:23"><expr pos:start="121:5" pos:end="121:22"><call pos:start="121:5" pos:end="121:22"><name pos:start="121:5" pos:end="121:10">g_free</name><argument_list pos:start="121:11" pos:end="121:22">(<argument pos:start="121:12" pos:end="121:21"><expr pos:start="121:12" pos:end="121:21"><name pos:start="121:12" pos:end="121:21">uncomp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:24"><expr pos:start="123:5" pos:end="123:23"><call pos:start="123:5" pos:end="123:23"><name pos:start="123:5" pos:end="123:10">g_free</name><argument_list pos:start="123:11" pos:end="123:23">(<argument pos:start="123:12" pos:end="123:22"><expr pos:start="123:12" pos:end="123:22"><name pos:start="123:12" pos:end="123:22">cluster_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:15">return <expr pos:start="125:12" pos:end="125:14"><name pos:start="125:12" pos:end="125:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
