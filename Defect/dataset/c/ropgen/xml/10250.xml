<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10250.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">translate_pages</name><parameter_list pos:start="1:27" pos:end="3:62">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:34">S390CPU</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">cpu</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:51"><decl pos:start="1:42" pos:end="1:51"><type pos:start="1:42" pos:end="1:51"><name pos:start="1:42" pos:end="1:46">vaddr</name></type> <name pos:start="1:48" pos:end="1:51">addr</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:65">nr_pages</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:46"><decl pos:start="3:28" pos:end="3:46"><type pos:start="3:28" pos:end="3:46"><name pos:start="3:28" pos:end="3:39">target_ulong</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:46">pages</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:61"><decl pos:start="3:49" pos:end="3:61"><type pos:start="3:49" pos:end="3:61"><name pos:start="3:49" pos:end="3:52">bool</name></type> <name pos:start="3:54" pos:end="3:61">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:13">

    <decl_stmt pos:start="7:5" pos:end="7:58"><decl pos:start="7:5" pos:end="7:57"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:16">lowprot</name> <init pos:start="7:18" pos:end="7:57">= <expr pos:start="7:20" pos:end="7:57"><name pos:start="7:20" pos:end="7:27">is_write</name> <operator pos:start="7:29" pos:end="7:30">&amp;&amp;</operator> <call pos:start="7:32" pos:end="7:57"><name pos:start="7:32" pos:end="7:46">lowprot_enabled</name><argument_list pos:start="7:47" pos:end="7:57">(<argument pos:start="7:48" pos:end="7:56"><expr pos:start="7:48" pos:end="7:56"><operator pos:start="7:48" pos:end="7:48">&amp;</operator><name pos:start="7:49" pos:end="7:56"><name pos:start="7:49" pos:end="7:51">cpu</name><operator pos:start="7:52" pos:end="7:53">-&gt;</operator><name pos:start="7:54" pos:end="7:56">env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:52"><decl pos:start="9:5" pos:end="9:51"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:16">asc</name> <init pos:start="9:18" pos:end="9:51">= <expr pos:start="9:20" pos:end="9:51"><name pos:start="9:20" pos:end="9:36"><name pos:start="9:20" pos:end="9:22">cpu</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:27">env</name><operator pos:start="9:28" pos:end="9:28">.</operator><name pos:start="9:29" pos:end="9:31">psw</name><operator pos:start="9:32" pos:end="9:32">.</operator><name pos:start="9:33" pos:end="9:36">mask</name></name> <operator pos:start="9:38" pos:end="9:38">&amp;</operator> <name pos:start="9:40" pos:end="9:51">PSW_MASK_ASC</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">CPUS390XState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">env</name> <init pos:start="11:24" pos:end="11:34">= <expr pos:start="11:26" pos:end="11:34"><operator pos:start="11:26" pos:end="11:26">&amp;</operator><name pos:start="11:27" pos:end="11:34"><name pos:start="11:27" pos:end="11:29">cpu</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">i</name></decl>, <decl pos:start="13:17" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:22">pflags</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="49:5">for <control pos:start="17:9" pos:end="17:34">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:29"><expr pos:start="17:17" pos:end="17:28"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:28">nr_pages</name></expr>;</condition> <incr pos:start="17:31" pos:end="17:33"><expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:31">i</name><operator pos:start="17:32" pos:end="17:33">++</operator></expr></incr>)</control> <block pos:start="17:36" pos:end="49:5">{<block_content pos:start="21:9" pos:end="47:33">

        <comment type="block" pos:start="19:9" pos:end="19:37">/* Low-address protection? */</comment>

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:75">(<expr pos:start="21:13" pos:end="21:74"><name pos:start="21:13" pos:end="21:19">lowprot</name> <operator pos:start="21:21" pos:end="21:22">&amp;&amp;</operator> <operator pos:start="21:24" pos:end="21:24">(</operator><name pos:start="21:25" pos:end="21:28">addr</name> <operator pos:start="21:30" pos:end="21:30">&lt;</operator> <literal type="number" pos:start="21:32" pos:end="21:34">512</literal> <operator pos:start="21:36" pos:end="21:37">||</operator> <operator pos:start="21:39" pos:end="21:39">(</operator><name pos:start="21:40" pos:end="21:43">addr</name> <operator pos:start="21:45" pos:end="21:46">&gt;=</operator> <literal type="number" pos:start="21:48" pos:end="21:51">4096</literal> <operator pos:start="21:53" pos:end="21:54">&amp;&amp;</operator> <name pos:start="21:56" pos:end="21:59">addr</name> <operator pos:start="21:61" pos:end="21:61">&lt;</operator> <literal type="number" pos:start="21:63" pos:end="21:66">4096</literal> <operator pos:start="21:68" pos:end="21:68">+</operator> <literal type="number" pos:start="21:70" pos:end="21:72">512</literal><operator pos:start="21:73" pos:end="21:73">)</operator><operator pos:start="21:74" pos:end="21:74">)</operator></expr>)</condition> <block pos:start="21:77" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:27">

            <expr_stmt pos:start="23:13" pos:end="23:72"><expr pos:start="23:13" pos:end="23:71"><call pos:start="23:13" pos:end="23:71"><name pos:start="23:13" pos:end="23:36">trigger_access_exception</name><argument_list pos:start="23:37" pos:end="23:71">(<argument pos:start="23:38" pos:end="23:40"><expr pos:start="23:38" pos:end="23:40"><name pos:start="23:38" pos:end="23:40">env</name></expr></argument>, <argument pos:start="23:43" pos:end="23:56"><expr pos:start="23:43" pos:end="23:56"><name pos:start="23:43" pos:end="23:56">PGM_PROTECTION</name></expr></argument>, <argument pos:start="23:59" pos:end="23:67"><expr pos:start="23:59" pos:end="23:67"><name pos:start="23:59" pos:end="23:67">ILEN_AUTO</name></expr></argument>, <argument pos:start="23:70" pos:end="23:70"><expr pos:start="23:70" pos:end="23:70"><literal type="number" pos:start="23:70" pos:end="23:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:27">return <expr pos:start="25:20" pos:end="25:26"><operator pos:start="25:20" pos:end="25:20">-</operator><name pos:start="25:21" pos:end="25:26">EACCES</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:80"><expr pos:start="29:9" pos:end="29:79"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:79"><name pos:start="29:15" pos:end="29:27">mmu_translate</name><argument_list pos:start="29:28" pos:end="29:79">(<argument pos:start="29:29" pos:end="29:31"><expr pos:start="29:29" pos:end="29:31"><name pos:start="29:29" pos:end="29:31">env</name></expr></argument>, <argument pos:start="29:34" pos:end="29:37"><expr pos:start="29:34" pos:end="29:37"><name pos:start="29:34" pos:end="29:37">addr</name></expr></argument>, <argument pos:start="29:40" pos:end="29:47"><expr pos:start="29:40" pos:end="29:47"><name pos:start="29:40" pos:end="29:47">is_write</name></expr></argument>, <argument pos:start="29:50" pos:end="29:52"><expr pos:start="29:50" pos:end="29:52"><name pos:start="29:50" pos:end="29:52">asc</name></expr></argument>, <argument pos:start="29:55" pos:end="29:63"><expr pos:start="29:55" pos:end="29:63"><operator pos:start="29:55" pos:end="29:55">&amp;</operator><name pos:start="29:56" pos:end="29:63"><name pos:start="29:56" pos:end="29:60">pages</name><index pos:start="29:61" pos:end="29:63">[<expr pos:start="29:62" pos:end="29:62"><name pos:start="29:62" pos:end="29:62">i</name></expr>]</index></name></expr></argument>, <argument pos:start="29:66" pos:end="29:72"><expr pos:start="29:66" pos:end="29:72"><operator pos:start="29:66" pos:end="29:66">&amp;</operator><name pos:start="29:67" pos:end="29:72">pflags</name></expr></argument>, <argument pos:start="29:75" pos:end="29:78"><expr pos:start="29:75" pos:end="29:78"><name pos:start="29:75" pos:end="29:78">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:16">(<expr pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">ret</name></expr>)</condition> <block pos:start="31:18" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:23">

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="39:68">(<expr pos:start="37:13" pos:end="39:67"><operator pos:start="37:13" pos:end="37:13">!</operator><call pos:start="37:14" pos:end="39:67"><name pos:start="37:14" pos:end="37:39">address_space_access_valid</name><argument_list pos:start="37:40" pos:end="39:67">(<argument pos:start="37:41" pos:end="37:61"><expr pos:start="37:41" pos:end="37:61"><operator pos:start="37:41" pos:end="37:41">&amp;</operator><name pos:start="37:42" pos:end="37:61">address_space_memory</name></expr></argument>, <argument pos:start="37:64" pos:end="37:71"><expr pos:start="37:64" pos:end="37:71"><name pos:start="37:64" pos:end="37:71"><name pos:start="37:64" pos:end="37:68">pages</name><index pos:start="37:69" pos:end="37:71">[<expr pos:start="37:70" pos:end="37:70"><name pos:start="37:70" pos:end="37:70">i</name></expr>]</index></name></expr></argument>,

                                        <argument pos:start="39:41" pos:end="39:56"><expr pos:start="39:41" pos:end="39:56"><name pos:start="39:41" pos:end="39:56">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="39:59" pos:end="39:66"><expr pos:start="39:59" pos:end="39:66"><name pos:start="39:59" pos:end="39:66">is_write</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:70" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:27">

            <expr_stmt pos:start="41:13" pos:end="41:62"><expr pos:start="41:13" pos:end="41:61"><call pos:start="41:13" pos:end="41:61"><name pos:start="41:13" pos:end="41:29">program_interrupt</name><argument_list pos:start="41:30" pos:end="41:61">(<argument pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><name pos:start="41:31" pos:end="41:33">env</name></expr></argument>, <argument pos:start="41:36" pos:end="41:49"><expr pos:start="41:36" pos:end="41:49"><name pos:start="41:36" pos:end="41:49">PGM_ADDRESSING</name></expr></argument>, <argument pos:start="41:52" pos:end="41:60"><expr pos:start="41:52" pos:end="41:60"><name pos:start="41:52" pos:end="41:60">ILEN_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:27">return <expr pos:start="43:20" pos:end="43:26"><operator pos:start="43:20" pos:end="43:20">-</operator><name pos:start="43:21" pos:end="43:26">EFAULT</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:12">addr</name> <operator pos:start="47:14" pos:end="47:15">+=</operator> <name pos:start="47:17" pos:end="47:32">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
