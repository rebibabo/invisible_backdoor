<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19384.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">usb_bt_handle_data</name><parameter_list pos:start="1:30" pos:end="1:59">(<parameter pos:start="1:31" pos:end="1:44"><decl pos:start="1:31" pos:end="1:44"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:39">USBDevice</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">dev</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:55">USBPacket</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:58">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:15">

    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:60"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:21">USBBtState</name></name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:60">= <expr pos:start="5:28" pos:end="5:60"><operator pos:start="5:28" pos:end="5:28">(</operator>struct <name pos:start="5:36" pos:end="5:45">USBBtState</name> <operator pos:start="5:47" pos:end="5:47">*</operator><operator pos:start="5:48" pos:end="5:48">)</operator> <name pos:start="5:50" pos:end="5:60"><name pos:start="5:50" pos:end="5:52">dev</name><operator pos:start="5:53" pos:end="5:54">-&gt;</operator><name pos:start="5:55" pos:end="5:60">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:18"><if pos:start="11:5" pos:end="13:18">if <condition pos:start="11:8" pos:end="11:19">(<expr pos:start="11:9" pos:end="11:18"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:10">s</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:18">config</name></name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:18"><block_content pos:start="13:9" pos:end="13:18">

        <goto pos:start="13:9" pos:end="13:18">goto <name pos:start="13:14" pos:end="13:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <switch pos:start="17:5" pos:end="99:5">switch <condition pos:start="17:12" pos:end="17:19">(<expr pos:start="17:13" pos:end="17:18"><name pos:start="17:13" pos:end="17:18"><name pos:start="17:13" pos:end="17:13">p</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:18">pid</name></name></expr>)</condition> <block pos:start="17:21" pos:end="99:5">{<block_content pos:start="19:5" pos:end="97:14">

    <case pos:start="19:5" pos:end="19:22">case <expr pos:start="19:10" pos:end="19:21"><name pos:start="19:10" pos:end="19:21">USB_TOKEN_IN</name></expr>:</case>

        <switch pos:start="21:9" pos:end="51:9">switch <condition pos:start="21:16" pos:end="21:31">(<expr pos:start="21:17" pos:end="21:30"><name pos:start="21:17" pos:end="21:24"><name pos:start="21:17" pos:end="21:17">p</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:24">devep</name></name> <operator pos:start="21:26" pos:end="21:26">&amp;</operator> <literal type="number" pos:start="21:28" pos:end="21:30">0xf</literal></expr>)</condition> <block pos:start="21:33" pos:end="51:9">{<block_content pos:start="23:9" pos:end="49:22">

        <case pos:start="23:9" pos:end="23:24">case <expr pos:start="23:14" pos:end="23:23"><name pos:start="23:14" pos:end="23:23">USB_EVT_EP</name></expr>:</case>

            <expr_stmt pos:start="25:13" pos:end="25:50"><expr pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:49"><name pos:start="25:19" pos:end="25:37">usb_bt_fifo_dequeue</name><argument_list pos:start="25:38" pos:end="25:49">(<argument pos:start="25:39" pos:end="25:45"><expr pos:start="25:39" pos:end="25:45"><operator pos:start="25:39" pos:end="25:39">&amp;</operator><name pos:start="25:40" pos:end="25:45"><name pos:start="25:40" pos:end="25:40">s</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:45">evt</name></name></expr></argument>, <argument pos:start="25:48" pos:end="25:48"><expr pos:start="25:48" pos:end="25:48"><name pos:start="25:48" pos:end="25:48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="27:13" pos:end="27:18">break;</break>



        <case pos:start="31:9" pos:end="31:24">case <expr pos:start="31:14" pos:end="31:23"><name pos:start="31:14" pos:end="31:23">USB_ACL_EP</name></expr>:</case>

            <expr_stmt pos:start="33:13" pos:end="33:50"><expr pos:start="33:13" pos:end="33:49"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:49"><name pos:start="33:19" pos:end="33:37">usb_bt_fifo_dequeue</name><argument_list pos:start="33:38" pos:end="33:49">(<argument pos:start="33:39" pos:end="33:45"><expr pos:start="33:39" pos:end="33:45"><operator pos:start="33:39" pos:end="33:39">&amp;</operator><name pos:start="33:40" pos:end="33:45"><name pos:start="33:40" pos:end="33:40">s</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:45">acl</name></name></expr></argument>, <argument pos:start="33:48" pos:end="33:48"><expr pos:start="33:48" pos:end="33:48"><name pos:start="33:48" pos:end="33:48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="35:13" pos:end="35:18">break;</break>



        <case pos:start="39:9" pos:end="39:24">case <expr pos:start="39:14" pos:end="39:23"><name pos:start="39:14" pos:end="39:23">USB_SCO_EP</name></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:50"><expr pos:start="41:13" pos:end="41:49"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:49"><name pos:start="41:19" pos:end="41:37">usb_bt_fifo_dequeue</name><argument_list pos:start="41:38" pos:end="41:49">(<argument pos:start="41:39" pos:end="41:45"><expr pos:start="41:39" pos:end="41:45"><operator pos:start="41:39" pos:end="41:39">&amp;</operator><name pos:start="41:40" pos:end="41:45"><name pos:start="41:40" pos:end="41:40">s</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:45">sco</name></name></expr></argument>, <argument pos:start="41:48" pos:end="41:48"><expr pos:start="41:48" pos:end="41:48"><name pos:start="41:48" pos:end="41:48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>



        <default pos:start="47:9" pos:end="47:16">default:</default>

            <goto pos:start="49:13" pos:end="49:22">goto <name pos:start="49:18" pos:end="49:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="53:9" pos:end="53:14">break;</break>



    <case pos:start="57:5" pos:end="57:23">case <expr pos:start="57:10" pos:end="57:22"><name pos:start="57:10" pos:end="57:22">USB_TOKEN_OUT</name></expr>:</case>

        <switch pos:start="59:9" pos:end="85:9">switch <condition pos:start="59:16" pos:end="59:31">(<expr pos:start="59:17" pos:end="59:30"><name pos:start="59:17" pos:end="59:24"><name pos:start="59:17" pos:end="59:17">p</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:24">devep</name></name> <operator pos:start="59:26" pos:end="59:26">&amp;</operator> <literal type="number" pos:start="59:28" pos:end="59:30">0xf</literal></expr>)</condition> <block pos:start="59:33" pos:end="85:9">{<block_content pos:start="61:9" pos:end="83:22">

        <case pos:start="61:9" pos:end="61:24">case <expr pos:start="61:14" pos:end="61:23"><name pos:start="61:14" pos:end="61:23">USB_ACL_EP</name></expr>:</case>

            <expr_stmt pos:start="63:13" pos:end="65:56"><expr pos:start="63:13" pos:end="65:55"><call pos:start="63:13" pos:end="65:55"><name pos:start="63:13" pos:end="63:35">usb_bt_fifo_out_enqueue</name><argument_list pos:start="63:36" pos:end="65:55">(<argument pos:start="63:37" pos:end="63:37"><expr pos:start="63:37" pos:end="63:37"><name pos:start="63:37" pos:end="63:37">s</name></expr></argument>, <argument pos:start="63:40" pos:end="63:49"><expr pos:start="63:40" pos:end="63:49"><operator pos:start="63:40" pos:end="63:40">&amp;</operator><name pos:start="63:41" pos:end="63:49"><name pos:start="63:41" pos:end="63:41">s</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:49">outacl</name></name></expr></argument>, <argument pos:start="63:52" pos:end="63:67"><expr pos:start="63:52" pos:end="63:67"><name pos:start="63:52" pos:end="63:67"><name pos:start="63:52" pos:end="63:52">s</name><operator pos:start="63:53" pos:end="63:54">-&gt;</operator><name pos:start="63:55" pos:end="63:57">hci</name><operator pos:start="63:58" pos:end="63:59">-&gt;</operator><name pos:start="63:60" pos:end="63:67">acl_send</name></name></expr></argument>,

                            <argument pos:start="65:29" pos:end="65:51"><expr pos:start="65:29" pos:end="65:51"><name pos:start="65:29" pos:end="65:51">usb_bt_hci_acl_complete</name></expr></argument>, <argument pos:start="65:54" pos:end="65:54"><expr pos:start="65:54" pos:end="65:54"><name pos:start="65:54" pos:end="65:54">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>



        <case pos:start="71:9" pos:end="71:24">case <expr pos:start="71:14" pos:end="71:23"><name pos:start="71:14" pos:end="71:23">USB_SCO_EP</name></expr>:</case>

            <expr_stmt pos:start="73:13" pos:end="75:56"><expr pos:start="73:13" pos:end="75:55"><call pos:start="73:13" pos:end="75:55"><name pos:start="73:13" pos:end="73:35">usb_bt_fifo_out_enqueue</name><argument_list pos:start="73:36" pos:end="75:55">(<argument pos:start="73:37" pos:end="73:37"><expr pos:start="73:37" pos:end="73:37"><name pos:start="73:37" pos:end="73:37">s</name></expr></argument>, <argument pos:start="73:40" pos:end="73:49"><expr pos:start="73:40" pos:end="73:49"><operator pos:start="73:40" pos:end="73:40">&amp;</operator><name pos:start="73:41" pos:end="73:49"><name pos:start="73:41" pos:end="73:41">s</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:49">outsco</name></name></expr></argument>, <argument pos:start="73:52" pos:end="73:67"><expr pos:start="73:52" pos:end="73:67"><name pos:start="73:52" pos:end="73:67"><name pos:start="73:52" pos:end="73:52">s</name><operator pos:start="73:53" pos:end="73:54">-&gt;</operator><name pos:start="73:55" pos:end="73:57">hci</name><operator pos:start="73:58" pos:end="73:59">-&gt;</operator><name pos:start="73:60" pos:end="73:67">sco_send</name></name></expr></argument>,

                            <argument pos:start="75:29" pos:end="75:51"><expr pos:start="75:29" pos:end="75:51"><name pos:start="75:29" pos:end="75:51">usb_bt_hci_sco_complete</name></expr></argument>, <argument pos:start="75:54" pos:end="75:54"><expr pos:start="75:54" pos:end="75:54"><name pos:start="75:54" pos:end="75:54">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>



        <default pos:start="81:9" pos:end="81:16">default:</default>

            <goto pos:start="83:13" pos:end="83:22">goto <name pos:start="83:18" pos:end="83:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="87:9" pos:end="87:14">break;</break>



    <default pos:start="91:5" pos:end="91:12">default:</default>

    <label pos:start="93:5" pos:end="93:9"><name pos:start="93:5" pos:end="93:8">fail</name>:</label>

        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <name pos:start="95:15" pos:end="95:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="103:5" pos:end="103:15">return <expr pos:start="103:12" pos:end="103:14"><name pos:start="103:12" pos:end="103:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
