<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26041.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:14">load_uboot</name><parameter_list pos:start="1:15" pos:end="1:69">(<parameter pos:start="1:16" pos:end="1:35"><decl pos:start="1:16" pos:end="1:35"><type pos:start="1:16" pos:end="1:35"><specifier pos:start="1:16" pos:end="1:20">const</specifier> <name pos:start="1:22" pos:end="1:25">char</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:35">filename</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:53"><decl pos:start="1:38" pos:end="1:53"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:49">target_ulong</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">ep</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:68"><decl pos:start="1:56" pos:end="1:68"><type pos:start="1:56" pos:end="1:68"><name pos:start="1:56" pos:end="1:58">int</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:68">is_linux</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="7:5" pos:end="121:14">



    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:24">uboot_image_header_t</name></type> <name pos:start="11:26" pos:end="11:26">h</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:24">uboot_image_header_t</name> <modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:29">hdr</name> <init pos:start="13:31" pos:end="13:34">= <expr pos:start="13:33" pos:end="13:34"><operator pos:start="13:33" pos:end="13:33">&amp;</operator><name pos:start="13:34" pos:end="13:34">h</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:17">data</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:45"><expr pos:start="19:5" pos:end="19:44"><name pos:start="19:5" pos:end="19:6">fd</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="19:44"><name pos:start="19:10" pos:end="19:13">open</name><argument_list pos:start="19:14" pos:end="19:44">(<argument pos:start="19:15" pos:end="19:22"><expr pos:start="19:15" pos:end="19:22"><name pos:start="19:15" pos:end="19:22">filename</name></expr></argument>, <argument pos:start="19:25" pos:end="19:43"><expr pos:start="19:25" pos:end="19:43"><name pos:start="19:25" pos:end="19:32">O_RDONLY</name> <operator pos:start="19:34" pos:end="19:34">|</operator> <name pos:start="19:36" pos:end="19:43">O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:18"><if pos:start="21:5" pos:end="23:18">if <condition pos:start="21:8" pos:end="21:15">(<expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:10">fd</name> <operator pos:start="21:12" pos:end="21:12">&lt;</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:18"><block_content pos:start="23:9" pos:end="23:18">

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:55"><expr pos:start="27:5" pos:end="27:54"><name pos:start="27:5" pos:end="27:8">size</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:54"><name pos:start="27:12" pos:end="27:15">read</name><argument_list pos:start="27:16" pos:end="27:54">(<argument pos:start="27:17" pos:end="27:18"><expr pos:start="27:17" pos:end="27:18"><name pos:start="27:17" pos:end="27:18">fd</name></expr></argument>, <argument pos:start="27:21" pos:end="27:23"><expr pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">hdr</name></expr></argument>, <argument pos:start="27:26" pos:end="27:53"><expr pos:start="27:26" pos:end="27:53"><sizeof pos:start="27:26" pos:end="27:53">sizeof<argument_list pos:start="27:32" pos:end="27:53">(<argument pos:start="27:33" pos:end="27:52"><expr pos:start="27:33" pos:end="27:52"><name pos:start="27:33" pos:end="27:52">uboot_image_header_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:18"><if pos:start="29:5" pos:end="31:18">if <condition pos:start="29:8" pos:end="29:17">(<expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:12">size</name> <operator pos:start="29:14" pos:end="29:14">&lt;</operator> <literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:18"><block_content pos:start="31:9" pos:end="31:18">

        <goto pos:start="31:9" pos:end="31:18">goto <name pos:start="31:14" pos:end="31:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:28"><expr pos:start="35:5" pos:end="35:27"><call pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:22">bswap_uboot_header</name><argument_list pos:start="35:23" pos:end="35:27">(<argument pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><name pos:start="35:24" pos:end="35:26">hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="41:18"><if pos:start="39:5" pos:end="41:18">if <condition pos:start="39:8" pos:end="39:34">(<expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:11">hdr</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:21">ih_magic</name></name> <operator pos:start="39:23" pos:end="39:24">!=</operator> <name pos:start="39:26" pos:end="39:33">IH_MAGIC</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:18"><block_content pos:start="41:9" pos:end="41:18">

        <goto pos:start="41:9" pos:end="41:18">goto <name pos:start="41:14" pos:end="41:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:45">/* TODO: Implement Multi-File images.  */</comment>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:38">(<expr pos:start="47:9" pos:end="47:37"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:11">hdr</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:20">ih_type</name></name> <operator pos:start="47:22" pos:end="47:23">==</operator> <name pos:start="47:25" pos:end="47:37">IH_TYPE_MULTI</name></expr>)</condition> <block pos:start="47:40" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:69"><expr pos:start="49:9" pos:end="49:68"><call pos:start="49:9" pos:end="49:68"><name pos:start="49:9" pos:end="49:15">fprintf</name><argument_list pos:start="49:16" pos:end="49:68">(<argument pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">stderr</name></expr></argument>, <argument pos:start="49:25" pos:end="49:67"><expr pos:start="49:25" pos:end="49:67"><literal type="string" pos:start="49:25" pos:end="49:67">"Unable to load multi-file u-boot images\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:45">/* TODO: Implement compressed images.  */</comment>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:37">(<expr pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:11">hdr</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:20">ih_comp</name></name> <operator pos:start="59:22" pos:end="59:23">!=</operator> <name pos:start="59:25" pos:end="59:36">IH_COMP_NONE</name></expr>)</condition> <block pos:start="59:39" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:18">

        <expr_stmt pos:start="61:9" pos:end="61:69"><expr pos:start="61:9" pos:end="61:68"><call pos:start="61:9" pos:end="61:68"><name pos:start="61:9" pos:end="61:15">fprintf</name><argument_list pos:start="61:16" pos:end="61:68">(<argument pos:start="61:17" pos:end="61:22"><expr pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:22">stderr</name></expr></argument>, <argument pos:start="61:25" pos:end="61:67"><expr pos:start="61:25" pos:end="61:67"><literal type="string" pos:start="61:25" pos:end="61:67">"Unable to load compressed u-boot images\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:32">/* TODO: Check CPU type.  */</comment>

    <if_stmt pos:start="71:5" pos:end="81:5"><if pos:start="71:5" pos:end="81:5">if <condition pos:start="71:8" pos:end="71:17">(<expr pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:16">is_linux</name></expr>)</condition> <block pos:start="71:19" pos:end="81:5">{<block_content pos:start="73:9" pos:end="79:26">

        <if_stmt pos:start="73:9" pos:end="79:26"><if pos:start="73:9" pos:end="75:26">if <condition pos:start="73:12" pos:end="73:72">(<expr pos:start="73:13" pos:end="73:71"><name pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:15">hdr</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:24">ih_type</name></name> <operator pos:start="73:26" pos:end="73:27">==</operator> <name pos:start="73:29" pos:end="73:42">IH_TYPE_KERNEL</name> <operator pos:start="73:44" pos:end="73:45">&amp;&amp;</operator> <name pos:start="73:47" pos:end="73:56"><name pos:start="73:47" pos:end="73:49">hdr</name><operator pos:start="73:50" pos:end="73:51">-&gt;</operator><name pos:start="73:52" pos:end="73:56">ih_os</name></name> <operator pos:start="73:58" pos:end="73:59">==</operator> <name pos:start="73:61" pos:end="73:71">IH_OS_LINUX</name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:26"><block_content pos:start="75:13" pos:end="75:26">

            <expr_stmt pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:25"><operator pos:start="75:13" pos:end="75:13">*</operator><name pos:start="75:14" pos:end="75:21">is_linux</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">1</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="77:9" pos:end="79:26">else<block type="pseudo" pos:start="79:13" pos:end="79:26"><block_content pos:start="79:13" pos:end="79:26">

            <expr_stmt pos:start="79:13" pos:end="79:26"><expr pos:start="79:13" pos:end="79:25"><operator pos:start="79:13" pos:end="79:13">*</operator><name pos:start="79:14" pos:end="79:21">is_linux</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <literal type="number" pos:start="79:25" pos:end="79:25">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:21"><expr pos:start="85:5" pos:end="85:20"><operator pos:start="85:5" pos:end="85:5">*</operator><name pos:start="85:6" pos:end="85:7">ep</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <name pos:start="85:11" pos:end="85:20"><name pos:start="85:11" pos:end="85:13">hdr</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:20">ih_ep</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:37"><expr pos:start="87:5" pos:end="87:36"><name pos:start="87:5" pos:end="87:8">data</name> <operator pos:start="87:10" pos:end="87:10">=</operator> <call pos:start="87:12" pos:end="87:36"><name pos:start="87:12" pos:end="87:22">qemu_malloc</name><argument_list pos:start="87:23" pos:end="87:36">(<argument pos:start="87:24" pos:end="87:35"><expr pos:start="87:24" pos:end="87:35"><name pos:start="87:24" pos:end="87:35"><name pos:start="87:24" pos:end="87:26">hdr</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:35">ih_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="91:18"><if pos:start="89:5" pos:end="91:18">if <condition pos:start="89:8" pos:end="89:14">(<expr pos:start="89:9" pos:end="89:13"><operator pos:start="89:9" pos:end="89:9">!</operator><name pos:start="89:10" pos:end="89:13">data</name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:18"><block_content pos:start="91:9" pos:end="91:18">

        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:53">(<expr pos:start="95:9" pos:end="95:52"><call pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:12">read</name><argument_list pos:start="95:13" pos:end="95:36">(<argument pos:start="95:14" pos:end="95:15"><expr pos:start="95:14" pos:end="95:15"><name pos:start="95:14" pos:end="95:15">fd</name></expr></argument>, <argument pos:start="95:18" pos:end="95:21"><expr pos:start="95:18" pos:end="95:21"><name pos:start="95:18" pos:end="95:21">data</name></expr></argument>, <argument pos:start="95:24" pos:end="95:35"><expr pos:start="95:24" pos:end="95:35"><name pos:start="95:24" pos:end="95:35"><name pos:start="95:24" pos:end="95:26">hdr</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:35">ih_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="95:38" pos:end="95:39">!=</operator> <name pos:start="95:41" pos:end="95:52"><name pos:start="95:41" pos:end="95:43">hdr</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:52">ih_size</name></name></expr>)</condition> <block pos:start="95:55" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:18">

        <expr_stmt pos:start="97:9" pos:end="97:48"><expr pos:start="97:9" pos:end="97:47"><call pos:start="97:9" pos:end="97:47"><name pos:start="97:9" pos:end="97:15">fprintf</name><argument_list pos:start="97:16" pos:end="97:47">(<argument pos:start="97:17" pos:end="97:22"><expr pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:22">stderr</name></expr></argument>, <argument pos:start="97:25" pos:end="97:46"><expr pos:start="97:25" pos:end="97:46"><literal type="string" pos:start="97:25" pos:end="97:46">"Error reading file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:18">goto <name pos:start="99:14" pos:end="99:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:68"><expr pos:start="105:5" pos:end="105:67"><call pos:start="105:5" pos:end="105:67"><name pos:start="105:5" pos:end="105:33">cpu_physical_memory_write_rom</name><argument_list pos:start="105:34" pos:end="105:67">(<argument pos:start="105:35" pos:end="105:46"><expr pos:start="105:35" pos:end="105:46"><name pos:start="105:35" pos:end="105:46"><name pos:start="105:35" pos:end="105:37">hdr</name><operator pos:start="105:38" pos:end="105:39">-&gt;</operator><name pos:start="105:40" pos:end="105:46">ih_load</name></name></expr></argument>, <argument pos:start="105:49" pos:end="105:52"><expr pos:start="105:49" pos:end="105:52"><name pos:start="105:49" pos:end="105:52">data</name></expr></argument>, <argument pos:start="105:55" pos:end="105:66"><expr pos:start="105:55" pos:end="105:66"><name pos:start="105:55" pos:end="105:66"><name pos:start="105:55" pos:end="105:57">hdr</name><operator pos:start="105:58" pos:end="105:59">-&gt;</operator><name pos:start="105:60" pos:end="105:66">ih_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="109:5" pos:end="109:24">return <expr pos:start="109:12" pos:end="109:23"><name pos:start="109:12" pos:end="109:23"><name pos:start="109:12" pos:end="109:14">hdr</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:23">ih_size</name></name></expr>;</return>



<label pos:start="113:1" pos:end="113:5"><name pos:start="113:1" pos:end="113:4">fail</name>:</label>

    <if_stmt pos:start="115:5" pos:end="117:24"><if pos:start="115:5" pos:end="117:24">if <condition pos:start="115:8" pos:end="115:13">(<expr pos:start="115:9" pos:end="115:12"><name pos:start="115:9" pos:end="115:12">data</name></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="117:24"><block_content pos:start="117:9" pos:end="117:24">

        <expr_stmt pos:start="117:9" pos:end="117:24"><expr pos:start="117:9" pos:end="117:23"><call pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:17">qemu_free</name><argument_list pos:start="117:18" pos:end="117:23">(<argument pos:start="117:19" pos:end="117:22"><expr pos:start="117:19" pos:end="117:22"><name pos:start="117:19" pos:end="117:22">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:14"><expr pos:start="119:5" pos:end="119:13"><call pos:start="119:5" pos:end="119:13"><name pos:start="119:5" pos:end="119:9">close</name><argument_list pos:start="119:10" pos:end="119:13">(<argument pos:start="119:11" pos:end="119:12"><expr pos:start="119:11" pos:end="119:12"><name pos:start="119:11" pos:end="119:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="121:5" pos:end="121:14">return <expr pos:start="121:12" pos:end="121:13"><operator pos:start="121:12" pos:end="121:12">-</operator><literal type="number" pos:start="121:13" pos:end="121:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
