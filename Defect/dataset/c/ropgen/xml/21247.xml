<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21247.c" pos:tabs="8"><function pos:start="1:1" pos:end="331:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">dump_init</name><parameter_list pos:start="1:21" pos:end="5:65">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:30">DumpState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">s</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:41"><decl pos:start="1:36" pos:end="1:41"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:41">fd</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:58"><decl pos:start="1:44" pos:end="1:58"><type pos:start="1:44" pos:end="1:58"><name pos:start="1:44" pos:end="1:47">bool</name></type> <name pos:start="1:49" pos:end="1:58">has_format</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:49"><decl pos:start="3:22" pos:end="3:49"><type pos:start="3:22" pos:end="3:49"><name pos:start="3:22" pos:end="3:42">DumpGuestMemoryFormat</name></type> <name pos:start="3:44" pos:end="3:49">format</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:62"><decl pos:start="3:52" pos:end="3:62"><type pos:start="3:52" pos:end="3:62"><name pos:start="3:52" pos:end="3:55">bool</name></type> <name pos:start="3:57" pos:end="3:62">paging</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:79"><decl pos:start="3:65" pos:end="3:79"><type pos:start="3:65" pos:end="3:79"><name pos:start="3:65" pos:end="3:68">bool</name></type> <name pos:start="3:70" pos:end="3:79">has_filter</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:34"><decl pos:start="5:22" pos:end="5:34"><type pos:start="5:22" pos:end="5:34"><name pos:start="5:22" pos:end="5:28">int64_t</name></type> <name pos:start="5:30" pos:end="5:34">begin</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:50"><decl pos:start="5:37" pos:end="5:50"><type pos:start="5:37" pos:end="5:50"><name pos:start="5:37" pos:end="5:43">int64_t</name></type> <name pos:start="5:45" pos:end="5:50">length</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:64"><decl pos:start="5:53" pos:end="5:64"><type pos:start="5:53" pos:end="5:64"><name pos:start="5:53" pos:end="5:57">Error</name> <modifier pos:start="5:59" pos:end="5:59">*</modifier><modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="331:1">{<block_content pos:start="9:5" pos:end="329:14">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">nr_cpus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:14">err</name> <init pos:start="13:16" pos:end="13:21">= <expr pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:61">/* kdump-compressed is conflict with paging and filter */</comment>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:61">(<expr pos:start="21:9" pos:end="21:60"><name pos:start="21:9" pos:end="21:18">has_format</name> <operator pos:start="21:20" pos:end="21:21">&amp;&amp;</operator> <name pos:start="21:23" pos:end="21:28">format</name> <operator pos:start="21:30" pos:end="21:31">!=</operator> <name pos:start="21:33" pos:end="21:60">DUMP_GUEST_MEMORY_FORMAT_ELF</name></expr>)</condition> <block pos:start="21:63" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:39">

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><call pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:14">assert</name><argument_list pos:start="23:15" pos:end="23:38">(<argument pos:start="23:16" pos:end="23:37"><expr pos:start="23:16" pos:end="23:37"><operator pos:start="23:16" pos:end="23:16">!</operator><name pos:start="23:17" pos:end="23:22">paging</name> <operator pos:start="23:24" pos:end="23:25">&amp;&amp;</operator> <operator pos:start="23:27" pos:end="23:27">!</operator><name pos:start="23:28" pos:end="23:37">has_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:30">(<expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:27">runstate_is_running</name><argument_list pos:start="29:28" pos:end="29:29">()</argument_list></call></expr>)</condition> <block pos:start="29:32" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:25">

        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><call pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:15">vm_stop</name><argument_list pos:start="31:16" pos:end="31:34">(<argument pos:start="31:17" pos:end="31:33"><expr pos:start="31:17" pos:end="31:33"><name pos:start="31:17" pos:end="31:33">RUN_STATE_SAVE_VM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:25"><expr pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:17">resume</name></name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:24">true</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:26">

        <expr_stmt pos:start="37:9" pos:end="37:26"><expr pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:17">resume</name></name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:25">false</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="47:7">/* If we use KVM, we should synchronize the registers before we get dump

     * info or physmap info.

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:33"><expr pos:start="49:5" pos:end="49:32"><call pos:start="49:5" pos:end="49:32"><name pos:start="49:5" pos:end="49:30">cpu_synchronize_all_states</name><argument_list pos:start="49:31" pos:end="49:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:16"><expr pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:11">nr_cpus</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr>;</expr_stmt>

    <macro pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:15">CPU_FOREACH</name><argument_list pos:start="53:16" pos:end="53:20">(<argument pos:start="53:17" pos:end="53:19">cpu</argument>)</argument_list></macro> <block pos:start="53:22" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:18">

        <expr_stmt pos:start="55:9" pos:end="55:18"><expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:15">nr_cpus</name><operator pos:start="55:16" pos:end="55:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="61:5" pos:end="61:15"><expr pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:9"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:9">fd</name></name> <operator pos:start="61:11" pos:end="61:11">=</operator> <name pos:start="61:13" pos:end="61:14">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:31"><expr pos:start="63:5" pos:end="63:30"><name pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:17">has_filter</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:30">has_filter</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:21"><expr pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:12">begin</name></name> <operator pos:start="65:14" pos:end="65:14">=</operator> <name pos:start="65:16" pos:end="65:20">begin</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:23"><expr pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:13"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:13">length</name></name> <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:22">length</name></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:50"><expr pos:start="71:5" pos:end="71:49"><call pos:start="71:5" pos:end="71:49"><name pos:start="71:5" pos:end="71:26">guest_phys_blocks_init</name><argument_list pos:start="71:27" pos:end="71:49">(<argument pos:start="71:28" pos:end="71:48"><expr pos:start="71:28" pos:end="71:48"><operator pos:start="71:28" pos:end="71:28">&amp;</operator><name pos:start="71:29" pos:end="71:48"><name pos:start="71:29" pos:end="71:29">s</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:48">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:52"><expr pos:start="73:5" pos:end="73:51"><call pos:start="73:5" pos:end="73:51"><name pos:start="73:5" pos:end="73:28">guest_phys_blocks_append</name><argument_list pos:start="73:29" pos:end="73:51">(<argument pos:start="73:30" pos:end="73:50"><expr pos:start="73:30" pos:end="73:50"><operator pos:start="73:30" pos:end="73:30">&amp;</operator><name pos:start="73:31" pos:end="73:50"><name pos:start="73:31" pos:end="73:31">s</name><operator pos:start="73:32" pos:end="73:33">-&gt;</operator><name pos:start="73:34" pos:end="73:50">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:12"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:12">start</name></name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:33"><name pos:start="77:16" pos:end="77:30">get_start_block</name><argument_list pos:start="77:31" pos:end="77:33">(<argument pos:start="77:32" pos:end="77:32"><expr pos:start="77:32" pos:end="77:32"><name pos:start="77:32" pos:end="77:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:23">(<expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">start</name></name> <operator pos:start="79:18" pos:end="79:19">==</operator> <operator pos:start="79:21" pos:end="79:21">-</operator><literal type="number" pos:start="79:22" pos:end="79:22">1</literal></expr>)</condition> <block pos:start="79:25" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:21">

        <expr_stmt pos:start="81:9" pos:end="81:57"><expr pos:start="81:9" pos:end="81:56"><call pos:start="81:9" pos:end="81:56"><name pos:start="81:9" pos:end="81:17">error_set</name><argument_list pos:start="81:18" pos:end="81:56">(<argument pos:start="81:19" pos:end="81:22"><expr pos:start="81:19" pos:end="81:22"><name pos:start="81:19" pos:end="81:22">errp</name></expr></argument>, <argument pos:start="81:25" pos:end="81:46"><expr pos:start="81:25" pos:end="81:46"><name pos:start="81:25" pos:end="81:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="81:49" pos:end="81:55"><expr pos:start="81:49" pos:end="81:55"><literal type="string" pos:start="81:49" pos:end="81:55">"begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:21">goto <name pos:start="83:14" pos:end="83:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="95:7">/* get dump info: endian, class and architecture.

     * If the target architecture is not supported, cpu_get_dump_info() will

     * return -1.

     */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:66"><expr pos:start="97:5" pos:end="97:65"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:65"><name pos:start="97:11" pos:end="97:27">cpu_get_dump_info</name><argument_list pos:start="97:28" pos:end="97:65">(<argument pos:start="97:29" pos:end="97:41"><expr pos:start="97:29" pos:end="97:41"><operator pos:start="97:29" pos:end="97:29">&amp;</operator><name pos:start="97:30" pos:end="97:41"><name pos:start="97:30" pos:end="97:30">s</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:41">dump_info</name></name></expr></argument>, <argument pos:start="97:44" pos:end="97:64"><expr pos:start="97:44" pos:end="97:64"><operator pos:start="97:44" pos:end="97:44">&amp;</operator><name pos:start="97:45" pos:end="97:64"><name pos:start="97:45" pos:end="97:45">s</name><operator pos:start="97:46" pos:end="97:47">-&gt;</operator><name pos:start="97:48" pos:end="97:64">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:16">(<expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">&lt;</operator> <literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>)</condition> <block pos:start="99:18" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:21">

        <expr_stmt pos:start="101:9" pos:end="101:42"><expr pos:start="101:9" pos:end="101:41"><call pos:start="101:9" pos:end="101:41"><name pos:start="101:9" pos:end="101:17">error_set</name><argument_list pos:start="101:18" pos:end="101:41">(<argument pos:start="101:19" pos:end="101:22"><expr pos:start="101:19" pos:end="101:22"><name pos:start="101:19" pos:end="101:22">errp</name></expr></argument>, <argument pos:start="101:25" pos:end="101:40"><expr pos:start="101:25" pos:end="101:40"><name pos:start="101:25" pos:end="101:40">QERR_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:21">goto <name pos:start="103:14" pos:end="103:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="111:70"><expr pos:start="109:5" pos:end="111:69"><name pos:start="109:5" pos:end="109:16"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:16">note_size</name></name> <operator pos:start="109:18" pos:end="109:18">=</operator> <call pos:start="109:20" pos:end="111:69"><name pos:start="109:20" pos:end="109:36">cpu_get_note_size</name><argument_list pos:start="109:37" pos:end="111:69">(<argument pos:start="109:38" pos:end="109:57"><expr pos:start="109:38" pos:end="109:57"><name pos:start="109:38" pos:end="109:57"><name pos:start="109:38" pos:end="109:38">s</name><operator pos:start="109:39" pos:end="109:40">-&gt;</operator><name pos:start="109:41" pos:end="109:49">dump_info</name><operator pos:start="109:50" pos:end="109:50">.</operator><name pos:start="109:51" pos:end="109:57">d_class</name></name></expr></argument>,

                                     <argument pos:start="111:38" pos:end="111:59"><expr pos:start="111:38" pos:end="111:59"><name pos:start="111:38" pos:end="111:59"><name pos:start="111:38" pos:end="111:38">s</name><operator pos:start="111:39" pos:end="111:40">-&gt;</operator><name pos:start="111:41" pos:end="111:49">dump_info</name><operator pos:start="111:50" pos:end="111:50">.</operator><name pos:start="111:51" pos:end="111:59">d_machine</name></name></expr></argument>, <argument pos:start="111:62" pos:end="111:68"><expr pos:start="111:62" pos:end="111:68"><name pos:start="111:62" pos:end="111:68">nr_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:25">(<expr pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:20">note_size</name></name> <operator pos:start="113:22" pos:end="113:22">&lt;</operator> <literal type="number" pos:start="113:24" pos:end="113:24">0</literal></expr>)</condition> <block pos:start="113:27" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:21">

        <expr_stmt pos:start="115:9" pos:end="115:42"><expr pos:start="115:9" pos:end="115:41"><call pos:start="115:9" pos:end="115:41"><name pos:start="115:9" pos:end="115:17">error_set</name><argument_list pos:start="115:18" pos:end="115:41">(<argument pos:start="115:19" pos:end="115:22"><expr pos:start="115:19" pos:end="115:22"><name pos:start="115:19" pos:end="115:22">errp</name></expr></argument>, <argument pos:start="115:25" pos:end="115:40"><expr pos:start="115:25" pos:end="115:40"><name pos:start="115:25" pos:end="115:40">QERR_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="117:9" pos:end="117:21">goto <name pos:start="117:14" pos:end="117:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:28">/* get memory mapping */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:39"><expr pos:start="125:5" pos:end="125:38"><call pos:start="125:5" pos:end="125:38"><name pos:start="125:5" pos:end="125:28">memory_mapping_list_init</name><argument_list pos:start="125:29" pos:end="125:38">(<argument pos:start="125:30" pos:end="125:37"><expr pos:start="125:30" pos:end="125:37"><operator pos:start="125:30" pos:end="125:30">&amp;</operator><name pos:start="125:31" pos:end="125:37"><name pos:start="125:31" pos:end="125:31">s</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:37">list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="143:5"><if pos:start="127:5" pos:end="139:5">if <condition pos:start="127:8" pos:end="127:15">(<expr pos:start="127:9" pos:end="127:14"><name pos:start="127:9" pos:end="127:14">paging</name></expr>)</condition> <block pos:start="127:17" pos:end="139:5">{<block_content pos:start="129:9" pos:end="137:9">

        <expr_stmt pos:start="129:9" pos:end="129:77"><expr pos:start="129:9" pos:end="129:76"><call pos:start="129:9" pos:end="129:76"><name pos:start="129:9" pos:end="129:37">qemu_get_guest_memory_mapping</name><argument_list pos:start="129:38" pos:end="129:76">(<argument pos:start="129:39" pos:end="129:46"><expr pos:start="129:39" pos:end="129:46"><operator pos:start="129:39" pos:end="129:39">&amp;</operator><name pos:start="129:40" pos:end="129:46"><name pos:start="129:40" pos:end="129:40">s</name><operator pos:start="129:41" pos:end="129:42">-&gt;</operator><name pos:start="129:43" pos:end="129:46">list</name></name></expr></argument>, <argument pos:start="129:49" pos:end="129:69"><expr pos:start="129:49" pos:end="129:69"><operator pos:start="129:49" pos:end="129:49">&amp;</operator><name pos:start="129:50" pos:end="129:69"><name pos:start="129:50" pos:end="129:50">s</name><operator pos:start="129:51" pos:end="129:52">-&gt;</operator><name pos:start="129:53" pos:end="129:69">guest_phys_blocks</name></name></expr></argument>, <argument pos:start="129:72" pos:end="129:75"><expr pos:start="129:72" pos:end="129:75"><operator pos:start="129:72" pos:end="129:72">&amp;</operator><name pos:start="129:73" pos:end="129:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:24">(<expr pos:start="131:13" pos:end="131:23"><name pos:start="131:13" pos:end="131:15">err</name> <operator pos:start="131:17" pos:end="131:18">!=</operator> <name pos:start="131:20" pos:end="131:23">NULL</name></expr>)</condition> <block pos:start="131:26" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:25">

            <expr_stmt pos:start="133:13" pos:end="133:39"><expr pos:start="133:13" pos:end="133:38"><call pos:start="133:13" pos:end="133:38"><name pos:start="133:13" pos:end="133:27">error_propagate</name><argument_list pos:start="133:28" pos:end="133:38">(<argument pos:start="133:29" pos:end="133:32"><expr pos:start="133:29" pos:end="133:32"><name pos:start="133:29" pos:end="133:32">errp</name></expr></argument>, <argument pos:start="133:35" pos:end="133:37"><expr pos:start="133:35" pos:end="133:37"><name pos:start="133:35" pos:end="133:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="135:13" pos:end="135:25">goto <name pos:start="135:18" pos:end="135:24">cleanup</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="139:7" pos:end="143:5">else <block pos:start="139:12" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:78">

        <expr_stmt pos:start="141:9" pos:end="141:78"><expr pos:start="141:9" pos:end="141:77"><call pos:start="141:9" pos:end="141:77"><name pos:start="141:9" pos:end="141:44">qemu_get_guest_simple_memory_mapping</name><argument_list pos:start="141:45" pos:end="141:77">(<argument pos:start="141:46" pos:end="141:53"><expr pos:start="141:46" pos:end="141:53"><operator pos:start="141:46" pos:end="141:46">&amp;</operator><name pos:start="141:47" pos:end="141:53"><name pos:start="141:47" pos:end="141:47">s</name><operator pos:start="141:48" pos:end="141:49">-&gt;</operator><name pos:start="141:50" pos:end="141:53">list</name></name></expr></argument>, <argument pos:start="141:56" pos:end="141:76"><expr pos:start="141:56" pos:end="141:76"><operator pos:start="141:56" pos:end="141:56">&amp;</operator><name pos:start="141:57" pos:end="141:76"><name pos:start="141:57" pos:end="141:57">s</name><operator pos:start="141:58" pos:end="141:59">-&gt;</operator><name pos:start="141:60" pos:end="141:76">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:25"><expr pos:start="147:5" pos:end="147:24"><name pos:start="147:5" pos:end="147:14"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:14">nr_cpus</name></name> <operator pos:start="147:16" pos:end="147:16">=</operator> <name pos:start="147:18" pos:end="147:24">nr_cpus</name></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:21"><expr pos:start="151:5" pos:end="151:20"><call pos:start="151:5" pos:end="151:20"><name pos:start="151:5" pos:end="151:17">get_max_mapnr</name><argument_list pos:start="151:18" pos:end="151:20">(<argument pos:start="151:19" pos:end="151:19"><expr pos:start="151:19" pos:end="151:19"><name pos:start="151:19" pos:end="151:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="155:5" pos:end="155:17"><decl pos:start="155:5" pos:end="155:16"><type pos:start="155:5" pos:end="155:12"><name pos:start="155:5" pos:end="155:12">uint64_t</name></type> <name pos:start="155:14" pos:end="155:16">tmp</name></decl>;</decl_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:79"><expr pos:start="157:5" pos:end="157:78"><name pos:start="157:5" pos:end="157:7">tmp</name> <operator pos:start="157:9" pos:end="157:9">=</operator> <call pos:start="157:11" pos:end="157:78"><name pos:start="157:11" pos:end="157:22">DIV_ROUND_UP</name><argument_list pos:start="157:23" pos:end="157:78">(<argument pos:start="157:24" pos:end="157:59"><expr pos:start="157:24" pos:end="157:59"><call pos:start="157:24" pos:end="157:59"><name pos:start="157:24" pos:end="157:35">DIV_ROUND_UP</name><argument_list pos:start="157:36" pos:end="157:59">(<argument pos:start="157:37" pos:end="157:48"><expr pos:start="157:37" pos:end="157:48"><name pos:start="157:37" pos:end="157:48"><name pos:start="157:37" pos:end="157:37">s</name><operator pos:start="157:38" pos:end="157:39">-&gt;</operator><name pos:start="157:40" pos:end="157:48">max_mapnr</name></name></expr></argument>, <argument pos:start="157:51" pos:end="157:58"><expr pos:start="157:51" pos:end="157:58"><name pos:start="157:51" pos:end="157:58">CHAR_BIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:62" pos:end="157:77"><expr pos:start="157:62" pos:end="157:77"><name pos:start="157:62" pos:end="157:77">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:48"><expr pos:start="159:5" pos:end="159:47"><name pos:start="159:5" pos:end="159:22"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:22">len_dump_bitmap</name></name> <operator pos:start="159:24" pos:end="159:24">=</operator> <name pos:start="159:26" pos:end="159:28">tmp</name> <operator pos:start="159:30" pos:end="159:30">*</operator> <name pos:start="159:32" pos:end="159:47">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:42">/* init for kdump-compressed format */</comment>

    <if_stmt pos:start="165:5" pos:end="215:5"><if pos:start="165:5" pos:end="215:5">if <condition pos:start="165:8" pos:end="165:61">(<expr pos:start="165:9" pos:end="165:60"><name pos:start="165:9" pos:end="165:18">has_format</name> <operator pos:start="165:20" pos:end="165:21">&amp;&amp;</operator> <name pos:start="165:23" pos:end="165:28">format</name> <operator pos:start="165:30" pos:end="165:31">!=</operator> <name pos:start="165:33" pos:end="165:60">DUMP_GUEST_MEMORY_FORMAT_ELF</name></expr>)</condition> <block pos:start="165:63" pos:end="215:5">{<block_content pos:start="167:9" pos:end="213:17">

        <switch pos:start="167:9" pos:end="209:9">switch <condition pos:start="167:16" pos:end="167:23">(<expr pos:start="167:17" pos:end="167:22"><name pos:start="167:17" pos:end="167:22">format</name></expr>)</condition> <block pos:start="167:25" pos:end="209:9">{<block_content pos:start="169:9" pos:end="207:33">

        <case pos:start="169:9" pos:end="169:49">case <expr pos:start="169:14" pos:end="169:48"><name pos:start="169:14" pos:end="169:48">DUMP_GUEST_MEMORY_FORMAT_KDUMP_ZLIB</name></expr>:</case>

            <expr_stmt pos:start="171:13" pos:end="171:55"><expr pos:start="171:13" pos:end="171:54"><name pos:start="171:13" pos:end="171:28"><name pos:start="171:13" pos:end="171:13">s</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:28">flag_compress</name></name> <operator pos:start="171:30" pos:end="171:30">=</operator> <name pos:start="171:32" pos:end="171:54">DUMP_DH_COMPRESSED_ZLIB</name></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>



        <case pos:start="177:9" pos:end="180:0">case <expr pos:start="177:14" pos:end="177:47"><name pos:start="177:14" pos:end="177:47">DUMP_GUEST_MEMORY_FORMAT_KDUMP_LZO</name></expr>:</case>

<cpp:ifdef pos:start="179:1" pos:end="179:17">#<cpp:directive pos:start="179:2" pos:end="179:6">ifdef</cpp:directive> <name pos:start="179:8" pos:end="179:17">CONFIG_LZO</name></cpp:ifdef>

            <if_stmt pos:start="181:13" pos:end="190:0"><if pos:start="181:13" pos:end="190:0">if <condition pos:start="181:16" pos:end="181:39">(<expr pos:start="181:17" pos:end="181:38"><call pos:start="181:17" pos:end="181:26"><name pos:start="181:17" pos:end="181:24">lzo_init</name><argument_list pos:start="181:25" pos:end="181:26">()</argument_list></call> <operator pos:start="181:28" pos:end="181:29">!=</operator> <name pos:start="181:31" pos:end="181:38">LZO_E_OK</name></expr>)</condition> <block pos:start="181:41" pos:end="190:0">{<block_content pos:start="183:17" pos:end="185:29">

                <expr_stmt pos:start="183:17" pos:end="183:73"><expr pos:start="183:17" pos:end="183:72"><call pos:start="183:17" pos:end="183:72"><name pos:start="183:17" pos:end="183:26">error_setg</name><argument_list pos:start="183:27" pos:end="183:72">(<argument pos:start="183:28" pos:end="183:31"><expr pos:start="183:28" pos:end="183:31"><name pos:start="183:28" pos:end="183:31">errp</name></expr></argument>, <argument pos:start="183:34" pos:end="183:71"><expr pos:start="183:34" pos:end="183:71"><literal type="string" pos:start="183:34" pos:end="183:71">"failed to initialize the LZO library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="185:17" pos:end="185:29">goto <name pos:start="185:22" pos:end="185:28">cleanup</name>;</goto>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="191:13" pos:end="191:54"><expr pos:start="191:13" pos:end="191:53"><name pos:start="191:13" pos:end="191:28"><name pos:start="191:13" pos:end="191:13">s</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:28">flag_compress</name></name> <operator pos:start="191:30" pos:end="191:30">=</operator> <name pos:start="191:32" pos:end="191:53">DUMP_DH_COMPRESSED_LZO</name></expr>;</expr_stmt>

            <break pos:start="193:13" pos:end="193:18">break;</break>



        <case pos:start="197:9" pos:end="197:51">case <expr pos:start="197:14" pos:end="197:50"><name pos:start="197:14" pos:end="197:50">DUMP_GUEST_MEMORY_FORMAT_KDUMP_SNAPPY</name></expr>:</case>

            <expr_stmt pos:start="199:13" pos:end="199:57"><expr pos:start="199:13" pos:end="199:56"><name pos:start="199:13" pos:end="199:28"><name pos:start="199:13" pos:end="199:13">s</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:28">flag_compress</name></name> <operator pos:start="199:30" pos:end="199:30">=</operator> <name pos:start="199:32" pos:end="199:56">DUMP_DH_COMPRESSED_SNAPPY</name></expr>;</expr_stmt>

            <break pos:start="201:13" pos:end="201:18">break;</break>



        <default pos:start="205:9" pos:end="205:16">default:</default>

            <expr_stmt pos:start="207:13" pos:end="207:33"><expr pos:start="207:13" pos:end="207:32"><name pos:start="207:13" pos:end="207:28"><name pos:start="207:13" pos:end="207:13">s</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:28">flag_compress</name></name> <operator pos:start="207:30" pos:end="207:30">=</operator> <literal type="number" pos:start="207:32" pos:end="207:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></switch>



        <return pos:start="213:9" pos:end="213:17">return <expr pos:start="213:16" pos:end="213:16"><literal type="number" pos:start="213:16" pos:end="213:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="219:5" pos:end="223:5"><if pos:start="219:5" pos:end="223:5">if <condition pos:start="219:8" pos:end="219:22">(<expr pos:start="219:9" pos:end="219:21"><name pos:start="219:9" pos:end="219:21"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:21">has_filter</name></name></expr>)</condition> <block pos:start="219:24" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:61">

        <expr_stmt pos:start="221:9" pos:end="221:61"><expr pos:start="221:9" pos:end="221:60"><call pos:start="221:9" pos:end="221:60"><name pos:start="221:9" pos:end="221:29">memory_mapping_filter</name><argument_list pos:start="221:30" pos:end="221:60">(<argument pos:start="221:31" pos:end="221:38"><expr pos:start="221:31" pos:end="221:38"><operator pos:start="221:31" pos:end="221:31">&amp;</operator><name pos:start="221:32" pos:end="221:38"><name pos:start="221:32" pos:end="221:32">s</name><operator pos:start="221:33" pos:end="221:34">-&gt;</operator><name pos:start="221:35" pos:end="221:38">list</name></name></expr></argument>, <argument pos:start="221:41" pos:end="221:48"><expr pos:start="221:41" pos:end="221:48"><name pos:start="221:41" pos:end="221:48"><name pos:start="221:41" pos:end="221:41">s</name><operator pos:start="221:42" pos:end="221:43">-&gt;</operator><name pos:start="221:44" pos:end="221:48">begin</name></name></expr></argument>, <argument pos:start="221:51" pos:end="221:59"><expr pos:start="221:51" pos:end="221:59"><name pos:start="221:51" pos:end="221:59"><name pos:start="221:51" pos:end="221:51">s</name><operator pos:start="221:52" pos:end="221:53">-&gt;</operator><name pos:start="221:54" pos:end="221:59">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="227:5" pos:end="235:7">/*

     * calculate phdr_num

     *

     * the type of ehdr-&gt;e_phnum is uint16_t, so we should avoid overflow

     */</comment>

    <expr_stmt pos:start="237:5" pos:end="237:20"><expr pos:start="237:5" pos:end="237:19"><name pos:start="237:5" pos:end="237:15"><name pos:start="237:5" pos:end="237:5">s</name><operator pos:start="237:6" pos:end="237:7">-&gt;</operator><name pos:start="237:8" pos:end="237:15">phdr_num</name></name> <operator pos:start="237:17" pos:end="237:17">=</operator> <literal type="number" pos:start="237:19" pos:end="237:19">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="237:22" pos:end="237:34">/* PT_NOTE */</comment>

    <if_stmt pos:start="239:5" pos:end="267:5"><if pos:start="239:5" pos:end="245:5">if <condition pos:start="239:8" pos:end="239:37">(<expr pos:start="239:9" pos:end="239:36"><name pos:start="239:9" pos:end="239:19"><name pos:start="239:9" pos:end="239:9">s</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:15">list</name><operator pos:start="239:16" pos:end="239:16">.</operator><name pos:start="239:17" pos:end="239:19">num</name></name> <operator pos:start="239:21" pos:end="239:21">&lt;</operator> <name pos:start="239:23" pos:end="239:32">UINT16_MAX</name> <operator pos:start="239:34" pos:end="239:34">-</operator> <literal type="number" pos:start="239:36" pos:end="239:36">2</literal></expr>)</condition> <block pos:start="239:39" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:32">

        <expr_stmt pos:start="241:9" pos:end="241:35"><expr pos:start="241:9" pos:end="241:34"><name pos:start="241:9" pos:end="241:19"><name pos:start="241:9" pos:end="241:9">s</name><operator pos:start="241:10" pos:end="241:11">-&gt;</operator><name pos:start="241:12" pos:end="241:19">phdr_num</name></name> <operator pos:start="241:21" pos:end="241:22">+=</operator> <name pos:start="241:24" pos:end="241:34"><name pos:start="241:24" pos:end="241:24">s</name><operator pos:start="241:25" pos:end="241:26">-&gt;</operator><name pos:start="241:27" pos:end="241:30">list</name><operator pos:start="241:31" pos:end="241:31">.</operator><name pos:start="241:32" pos:end="241:34">num</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:32"><expr pos:start="243:9" pos:end="243:31"><name pos:start="243:9" pos:end="243:23"><name pos:start="243:9" pos:end="243:9">s</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:23">have_section</name></name> <operator pos:start="243:25" pos:end="243:25">=</operator> <name pos:start="243:27" pos:end="243:31">false</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="245:7" pos:end="267:5">else <block pos:start="245:12" pos:end="267:5">{<block_content pos:start="247:9" pos:end="265:9">

        <expr_stmt pos:start="247:9" pos:end="247:31"><expr pos:start="247:9" pos:end="247:30"><name pos:start="247:9" pos:end="247:23"><name pos:start="247:9" pos:end="247:9">s</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:23">have_section</name></name> <operator pos:start="247:25" pos:end="247:25">=</operator> <name pos:start="247:27" pos:end="247:30">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:30"><expr pos:start="249:9" pos:end="249:29"><name pos:start="249:9" pos:end="249:19"><name pos:start="249:9" pos:end="249:9">s</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:19">phdr_num</name></name> <operator pos:start="249:21" pos:end="249:21">=</operator> <name pos:start="249:23" pos:end="249:29">PN_XNUM</name></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:23"><expr pos:start="251:9" pos:end="251:22"><name pos:start="251:9" pos:end="251:18"><name pos:start="251:9" pos:end="251:9">s</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:18">sh_info</name></name> <operator pos:start="251:20" pos:end="251:20">=</operator> <literal type="number" pos:start="251:22" pos:end="251:22">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="251:25" pos:end="251:37">/* PT_NOTE */</comment>



        <comment type="block" pos:start="255:9" pos:end="255:80">/* the type of shdr-&gt;sh_info is uint32_t, so we should avoid overflow */</comment>

        <if_stmt pos:start="257:9" pos:end="265:9"><if pos:start="257:9" pos:end="261:9">if <condition pos:start="257:12" pos:end="257:42">(<expr pos:start="257:13" pos:end="257:41"><name pos:start="257:13" pos:end="257:23"><name pos:start="257:13" pos:end="257:13">s</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:19">list</name><operator pos:start="257:20" pos:end="257:20">.</operator><name pos:start="257:21" pos:end="257:23">num</name></name> <operator pos:start="257:25" pos:end="257:26">&lt;=</operator> <name pos:start="257:28" pos:end="257:37">UINT32_MAX</name> <operator pos:start="257:39" pos:end="257:39">-</operator> <literal type="number" pos:start="257:41" pos:end="257:41">1</literal></expr>)</condition> <block pos:start="257:44" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:38">

            <expr_stmt pos:start="259:13" pos:end="259:38"><expr pos:start="259:13" pos:end="259:37"><name pos:start="259:13" pos:end="259:22"><name pos:start="259:13" pos:end="259:13">s</name><operator pos:start="259:14" pos:end="259:15">-&gt;</operator><name pos:start="259:16" pos:end="259:22">sh_info</name></name> <operator pos:start="259:24" pos:end="259:25">+=</operator> <name pos:start="259:27" pos:end="259:37"><name pos:start="259:27" pos:end="259:27">s</name><operator pos:start="259:28" pos:end="259:29">-&gt;</operator><name pos:start="259:30" pos:end="259:33">list</name><operator pos:start="259:34" pos:end="259:34">.</operator><name pos:start="259:35" pos:end="259:37">num</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="261:11" pos:end="265:9">else <block pos:start="261:16" pos:end="265:9">{<block_content pos:start="263:13" pos:end="263:36">

            <expr_stmt pos:start="263:13" pos:end="263:36"><expr pos:start="263:13" pos:end="263:35"><name pos:start="263:13" pos:end="263:22"><name pos:start="263:13" pos:end="263:13">s</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:22">sh_info</name></name> <operator pos:start="263:24" pos:end="263:24">=</operator> <name pos:start="263:26" pos:end="263:35">UINT32_MAX</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="271:5" pos:end="307:5"><if pos:start="271:5" pos:end="289:5">if <condition pos:start="271:8" pos:end="271:43">(<expr pos:start="271:9" pos:end="271:42"><name pos:start="271:9" pos:end="271:28"><name pos:start="271:9" pos:end="271:9">s</name><operator pos:start="271:10" pos:end="271:11">-&gt;</operator><name pos:start="271:12" pos:end="271:20">dump_info</name><operator pos:start="271:21" pos:end="271:21">.</operator><name pos:start="271:22" pos:end="271:28">d_class</name></name> <operator pos:start="271:30" pos:end="271:31">==</operator> <name pos:start="271:33" pos:end="271:42">ELFCLASS64</name></expr>)</condition> <block pos:start="271:45" pos:end="289:5">{<block_content pos:start="273:9" pos:end="287:9">

        <if_stmt pos:start="273:9" pos:end="287:9"><if pos:start="273:9" pos:end="281:9">if <condition pos:start="273:12" pos:end="273:28">(<expr pos:start="273:13" pos:end="273:27"><name pos:start="273:13" pos:end="273:27"><name pos:start="273:13" pos:end="273:13">s</name><operator pos:start="273:14" pos:end="273:15">-&gt;</operator><name pos:start="273:16" pos:end="273:27">have_section</name></name></expr>)</condition> <block pos:start="273:30" pos:end="281:9">{<block_content pos:start="275:13" pos:end="279:65">

            <expr_stmt pos:start="275:13" pos:end="279:65"><expr pos:start="275:13" pos:end="279:64"><name pos:start="275:13" pos:end="275:28"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:28">memory_offset</name></name> <operator pos:start="275:30" pos:end="275:30">=</operator> <sizeof pos:start="275:32" pos:end="275:49">sizeof<argument_list pos:start="275:38" pos:end="275:49">(<argument pos:start="275:39" pos:end="275:48"><expr pos:start="275:39" pos:end="275:48"><name pos:start="275:39" pos:end="275:48">Elf64_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="275:51" pos:end="275:51">+</operator>

                               <sizeof pos:start="277:32" pos:end="277:49">sizeof<argument_list pos:start="277:38" pos:end="277:49">(<argument pos:start="277:39" pos:end="277:48"><expr pos:start="277:39" pos:end="277:48"><name pos:start="277:39" pos:end="277:48">Elf64_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="277:51" pos:end="277:51">*</operator> <name pos:start="277:53" pos:end="277:62"><name pos:start="277:53" pos:end="277:53">s</name><operator pos:start="277:54" pos:end="277:55">-&gt;</operator><name pos:start="277:56" pos:end="277:62">sh_info</name></name> <operator pos:start="277:64" pos:end="277:64">+</operator>

                               <sizeof pos:start="279:32" pos:end="279:49">sizeof<argument_list pos:start="279:38" pos:end="279:49">(<argument pos:start="279:39" pos:end="279:48"><expr pos:start="279:39" pos:end="279:48"><name pos:start="279:39" pos:end="279:48">Elf64_Shdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="279:51" pos:end="279:51">+</operator> <name pos:start="279:53" pos:end="279:64"><name pos:start="279:53" pos:end="279:53">s</name><operator pos:start="279:54" pos:end="279:55">-&gt;</operator><name pos:start="279:56" pos:end="279:64">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="281:11" pos:end="287:9">else <block pos:start="281:16" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:79">

            <expr_stmt pos:start="283:13" pos:end="285:79"><expr pos:start="283:13" pos:end="285:78"><name pos:start="283:13" pos:end="283:28"><name pos:start="283:13" pos:end="283:13">s</name><operator pos:start="283:14" pos:end="283:15">-&gt;</operator><name pos:start="283:16" pos:end="283:28">memory_offset</name></name> <operator pos:start="283:30" pos:end="283:30">=</operator> <sizeof pos:start="283:32" pos:end="283:49">sizeof<argument_list pos:start="283:38" pos:end="283:49">(<argument pos:start="283:39" pos:end="283:48"><expr pos:start="283:39" pos:end="283:48"><name pos:start="283:39" pos:end="283:48">Elf64_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="283:51" pos:end="283:51">+</operator>

                               <sizeof pos:start="285:32" pos:end="285:49">sizeof<argument_list pos:start="285:38" pos:end="285:49">(<argument pos:start="285:39" pos:end="285:48"><expr pos:start="285:39" pos:end="285:48"><name pos:start="285:39" pos:end="285:48">Elf64_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="285:51" pos:end="285:51">*</operator> <name pos:start="285:53" pos:end="285:63"><name pos:start="285:53" pos:end="285:53">s</name><operator pos:start="285:54" pos:end="285:55">-&gt;</operator><name pos:start="285:56" pos:end="285:63">phdr_num</name></name> <operator pos:start="285:65" pos:end="285:65">+</operator> <name pos:start="285:67" pos:end="285:78"><name pos:start="285:67" pos:end="285:67">s</name><operator pos:start="285:68" pos:end="285:69">-&gt;</operator><name pos:start="285:70" pos:end="285:78">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="289:7" pos:end="307:5">else <block pos:start="289:12" pos:end="307:5">{<block_content pos:start="291:9" pos:end="305:9">

        <if_stmt pos:start="291:9" pos:end="305:9"><if pos:start="291:9" pos:end="299:9">if <condition pos:start="291:12" pos:end="291:28">(<expr pos:start="291:13" pos:end="291:27"><name pos:start="291:13" pos:end="291:27"><name pos:start="291:13" pos:end="291:13">s</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:27">have_section</name></name></expr>)</condition> <block pos:start="291:30" pos:end="299:9">{<block_content pos:start="293:13" pos:end="297:65">

            <expr_stmt pos:start="293:13" pos:end="297:65"><expr pos:start="293:13" pos:end="297:64"><name pos:start="293:13" pos:end="293:28"><name pos:start="293:13" pos:end="293:13">s</name><operator pos:start="293:14" pos:end="293:15">-&gt;</operator><name pos:start="293:16" pos:end="293:28">memory_offset</name></name> <operator pos:start="293:30" pos:end="293:30">=</operator> <sizeof pos:start="293:32" pos:end="293:49">sizeof<argument_list pos:start="293:38" pos:end="293:49">(<argument pos:start="293:39" pos:end="293:48"><expr pos:start="293:39" pos:end="293:48"><name pos:start="293:39" pos:end="293:48">Elf32_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="293:51" pos:end="293:51">+</operator>

                               <sizeof pos:start="295:32" pos:end="295:49">sizeof<argument_list pos:start="295:38" pos:end="295:49">(<argument pos:start="295:39" pos:end="295:48"><expr pos:start="295:39" pos:end="295:48"><name pos:start="295:39" pos:end="295:48">Elf32_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="295:51" pos:end="295:51">*</operator> <name pos:start="295:53" pos:end="295:62"><name pos:start="295:53" pos:end="295:53">s</name><operator pos:start="295:54" pos:end="295:55">-&gt;</operator><name pos:start="295:56" pos:end="295:62">sh_info</name></name> <operator pos:start="295:64" pos:end="295:64">+</operator>

                               <sizeof pos:start="297:32" pos:end="297:49">sizeof<argument_list pos:start="297:38" pos:end="297:49">(<argument pos:start="297:39" pos:end="297:48"><expr pos:start="297:39" pos:end="297:48"><name pos:start="297:39" pos:end="297:48">Elf32_Shdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="297:51" pos:end="297:51">+</operator> <name pos:start="297:53" pos:end="297:64"><name pos:start="297:53" pos:end="297:53">s</name><operator pos:start="297:54" pos:end="297:55">-&gt;</operator><name pos:start="297:56" pos:end="297:64">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="299:11" pos:end="305:9">else <block pos:start="299:16" pos:end="305:9">{<block_content pos:start="301:13" pos:end="303:79">

            <expr_stmt pos:start="301:13" pos:end="303:79"><expr pos:start="301:13" pos:end="303:78"><name pos:start="301:13" pos:end="301:28"><name pos:start="301:13" pos:end="301:13">s</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:28">memory_offset</name></name> <operator pos:start="301:30" pos:end="301:30">=</operator> <sizeof pos:start="301:32" pos:end="301:49">sizeof<argument_list pos:start="301:38" pos:end="301:49">(<argument pos:start="301:39" pos:end="301:48"><expr pos:start="301:39" pos:end="301:48"><name pos:start="301:39" pos:end="301:48">Elf32_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="301:51" pos:end="301:51">+</operator>

                               <sizeof pos:start="303:32" pos:end="303:49">sizeof<argument_list pos:start="303:38" pos:end="303:49">(<argument pos:start="303:39" pos:end="303:48"><expr pos:start="303:39" pos:end="303:48"><name pos:start="303:39" pos:end="303:48">Elf32_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="303:51" pos:end="303:51">*</operator> <name pos:start="303:53" pos:end="303:63"><name pos:start="303:53" pos:end="303:53">s</name><operator pos:start="303:54" pos:end="303:55">-&gt;</operator><name pos:start="303:56" pos:end="303:63">phdr_num</name></name> <operator pos:start="303:65" pos:end="303:65">+</operator> <name pos:start="303:67" pos:end="303:78"><name pos:start="303:67" pos:end="303:67">s</name><operator pos:start="303:68" pos:end="303:69">-&gt;</operator><name pos:start="303:70" pos:end="303:78">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="311:5" pos:end="311:13">return <expr pos:start="311:12" pos:end="311:12"><literal type="number" pos:start="311:12" pos:end="311:12">0</literal></expr>;</return>



<label pos:start="315:1" pos:end="315:8"><name pos:start="315:1" pos:end="315:7">cleanup</name>:</label>

    <expr_stmt pos:start="317:5" pos:end="317:50"><expr pos:start="317:5" pos:end="317:49"><call pos:start="317:5" pos:end="317:49"><name pos:start="317:5" pos:end="317:26">guest_phys_blocks_free</name><argument_list pos:start="317:27" pos:end="317:49">(<argument pos:start="317:28" pos:end="317:48"><expr pos:start="317:28" pos:end="317:48"><operator pos:start="317:28" pos:end="317:28">&amp;</operator><name pos:start="317:29" pos:end="317:48"><name pos:start="317:29" pos:end="317:29">s</name><operator pos:start="317:30" pos:end="317:31">-&gt;</operator><name pos:start="317:32" pos:end="317:48">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="321:5" pos:end="325:5"><if pos:start="321:5" pos:end="325:5">if <condition pos:start="321:8" pos:end="321:18">(<expr pos:start="321:9" pos:end="321:17"><name pos:start="321:9" pos:end="321:17"><name pos:start="321:9" pos:end="321:9">s</name><operator pos:start="321:10" pos:end="321:11">-&gt;</operator><name pos:start="321:12" pos:end="321:17">resume</name></name></expr>)</condition> <block pos:start="321:20" pos:end="325:5">{<block_content pos:start="323:9" pos:end="323:19">

        <expr_stmt pos:start="323:9" pos:end="323:19"><expr pos:start="323:9" pos:end="323:18"><call pos:start="323:9" pos:end="323:18"><name pos:start="323:9" pos:end="323:16">vm_start</name><argument_list pos:start="323:17" pos:end="323:18">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="329:5" pos:end="329:14">return <expr pos:start="329:12" pos:end="329:13"><operator pos:start="329:12" pos:end="329:12">-</operator><literal type="number" pos:start="329:13" pos:end="329:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
