<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26014.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">slb_lookup</name> <parameter_list pos:start="1:23" pos:end="3:78">(<parameter pos:start="1:24" pos:end="1:39"><decl pos:start="1:24" pos:end="1:39"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:34">CPUPPCState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:59"><decl pos:start="1:42" pos:end="1:59"><type pos:start="1:42" pos:end="1:59"><name pos:start="1:42" pos:end="1:53">target_ulong</name></type> <name pos:start="1:55" pos:end="1:59">eaddr</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:41"><decl pos:start="3:24" pos:end="3:41"><type pos:start="3:24" pos:end="3:41"><name pos:start="3:24" pos:end="3:35">target_ulong</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:41">vsid</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:66"><decl pos:start="3:44" pos:end="3:66"><type pos:start="3:44" pos:end="3:66"><name pos:start="3:44" pos:end="3:55">target_ulong</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:66">page_mask</name></decl></parameter>, <parameter pos:start="3:69" pos:end="3:77"><decl pos:start="3:69" pos:end="3:77"><type pos:start="3:69" pos:end="3:77"><name pos:start="3:69" pos:end="3:71">int</name> <modifier pos:start="3:73" pos:end="3:73">*</modifier></type><name pos:start="3:74" pos:end="3:77">attr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="117:1">{<block_content pos:start="7:5" pos:end="115:15">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">target_phys_addr_t</name></type> <name pos:start="7:24" pos:end="7:30">sr_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:21">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:18">tmp64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name></decl>, <decl pos:start="15:12" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">slb_nr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:13"><expr pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <operator pos:start="21:11" pos:end="21:11">-</operator><literal type="number" pos:start="21:12" pos:end="21:12">5</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:11">sr_base</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:31"><name pos:start="23:15" pos:end="23:17">env</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:22">spr</name><index pos:start="23:23" pos:end="23:31">[<expr pos:start="23:24" pos:end="23:30"><name pos:start="23:24" pos:end="23:30">SPR_ASR</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if pos:start="25:1" pos:end="25:22">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:22"><call pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:11">defined</name><argument_list pos:start="25:12" pos:end="25:22">(<argument pos:start="25:13" pos:end="25:21"><expr pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:21">DEBUG_SLB</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="27:5" pos:end="36:0"><if pos:start="27:5" pos:end="36:0">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:16">loglevel</name> <operator pos:start="27:18" pos:end="27:19">!=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>)</condition> <block pos:start="27:24" pos:end="36:0">{<block_content pos:start="29:9" pos:end="31:42">

        <expr_stmt pos:start="29:9" pos:end="31:42"><expr pos:start="29:9" pos:end="31:41"><call pos:start="29:9" pos:end="31:41"><name pos:start="29:9" pos:end="29:15">fprintf</name><argument_list pos:start="29:16" pos:end="31:41">(<argument pos:start="29:17" pos:end="29:23"><expr pos:start="29:17" pos:end="29:23"><name pos:start="29:17" pos:end="29:23">logfile</name></expr></argument>, <argument pos:start="29:26" pos:end="29:64"><expr pos:start="29:26" pos:end="29:64"><literal type="string" pos:start="29:26" pos:end="29:37">"%s: eaddr "</literal> <name pos:start="29:39" pos:end="29:43">ADDRX</name> <literal type="string" pos:start="29:45" pos:end="29:52">" base "</literal> <name pos:start="29:54" pos:end="29:59">PADDRX</name> <literal type="string" pos:start="29:61" pos:end="29:64">"\n"</literal></expr></argument>,

                <argument pos:start="31:17" pos:end="31:24"><expr pos:start="31:17" pos:end="31:24"><name pos:start="31:17" pos:end="31:24">__func__</name></expr></argument>, <argument pos:start="31:27" pos:end="31:31"><expr pos:start="31:27" pos:end="31:31"><name pos:start="31:27" pos:end="31:31">eaddr</name></expr></argument>, <argument pos:start="31:34" pos:end="31:40"><expr pos:start="31:34" pos:end="31:40"><name pos:start="31:34" pos:end="31:40">sr_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:8">mask</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <literal type="number" pos:start="37:12" pos:end="37:32">0x0000000000000000ULL</literal></expr>;</expr_stmt> <comment type="block" pos:start="37:35" pos:end="37:57">/* Avoid gcc warning */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:25"><expr pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:10">slb_nr</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:24"><name pos:start="39:14" pos:end="39:16">env</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:24">slb_nr</name></name></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="111:5">for <control pos:start="41:9" pos:end="41:32">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">n</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:27"><expr pos:start="41:17" pos:end="41:26"><name pos:start="41:17" pos:end="41:17">n</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:26">slb_nr</name></expr>;</condition> <incr pos:start="41:29" pos:end="41:31"><expr pos:start="41:29" pos:end="41:31"><name pos:start="41:29" pos:end="41:29">n</name><operator pos:start="41:30" pos:end="41:31">++</operator></expr></incr>)</control> <block pos:start="41:34" pos:end="111:5">{<block_content pos:start="43:9" pos:end="109:22">

        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:13">tmp64</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:33"><name pos:start="43:17" pos:end="43:24">ldq_phys</name><argument_list pos:start="43:25" pos:end="43:33">(<argument pos:start="43:26" pos:end="43:32"><expr pos:start="43:26" pos:end="43:32"><name pos:start="43:26" pos:end="43:32">sr_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="48:0"><expr pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:11">tmp</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:35"><name pos:start="45:15" pos:end="45:22">ldl_phys</name><argument_list pos:start="45:23" pos:end="45:35">(<argument pos:start="45:24" pos:end="45:34"><expr pos:start="45:24" pos:end="45:34"><name pos:start="45:24" pos:end="45:30">sr_base</name> <operator pos:start="45:32" pos:end="45:32">+</operator> <literal type="number" pos:start="45:34" pos:end="45:34">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="47:1" pos:end="47:22">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:22"><call pos:start="47:5" pos:end="47:22"><name pos:start="47:5" pos:end="47:11">defined</name><argument_list pos:start="47:12" pos:end="47:22">(<argument pos:start="47:13" pos:end="47:21"><expr pos:start="47:13" pos:end="47:21"><name pos:start="47:13" pos:end="47:21">DEBUG_SLB</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="49:9" pos:end="58:0"><if pos:start="49:9" pos:end="58:0">if <condition pos:start="49:12" pos:end="49:26">(<expr pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:20">loglevel</name> <operator pos:start="49:22" pos:end="49:23">!=</operator> <literal type="number" pos:start="49:25" pos:end="49:25">0</literal></expr>)</condition> <block pos:start="49:28" pos:end="58:0">{<block_content pos:start="51:13" pos:end="53:67">

            <expr_stmt pos:start="51:13" pos:end="53:67"><expr pos:start="51:13" pos:end="53:66"><call pos:start="51:13" pos:end="53:66"><name pos:start="51:13" pos:end="51:19">fprintf</name><argument_list pos:start="51:20" pos:end="53:66">(<argument pos:start="51:21" pos:end="51:27"><expr pos:start="51:21" pos:end="51:27"><name pos:start="51:21" pos:end="51:27">logfile</name></expr></argument>, <argument pos:start="51:30" pos:end="53:31"><expr pos:start="51:30" pos:end="53:31"><literal type="string" pos:start="51:30" pos:end="51:42">"%s: seg %d "</literal> <name pos:start="51:44" pos:end="51:49">PADDRX</name> <literal type="string" pos:start="51:51" pos:end="51:57">" %016"</literal> <name pos:start="51:59" pos:end="51:64">PRIx64</name> <literal type="string" pos:start="51:66" pos:end="51:71">" %08"</literal>

                    <name pos:start="53:21" pos:end="53:26">PRIx32</name> <literal type="string" pos:start="53:28" pos:end="53:31">"\n"</literal></expr></argument>, <argument pos:start="53:34" pos:end="53:41"><expr pos:start="53:34" pos:end="53:41"><name pos:start="53:34" pos:end="53:41">__func__</name></expr></argument>, <argument pos:start="53:44" pos:end="53:44"><expr pos:start="53:44" pos:end="53:44"><name pos:start="53:44" pos:end="53:44">n</name></expr></argument>, <argument pos:start="53:47" pos:end="53:53"><expr pos:start="53:47" pos:end="53:53"><name pos:start="53:47" pos:end="53:53">sr_base</name></expr></argument>, <argument pos:start="53:56" pos:end="53:60"><expr pos:start="53:56" pos:end="53:60"><name pos:start="53:56" pos:end="53:60">tmp64</name></expr></argument>, <argument pos:start="53:63" pos:end="53:65"><expr pos:start="53:63" pos:end="53:65"><name pos:start="53:63" pos:end="53:65">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="59:9" pos:end="107:9"><if pos:start="59:9" pos:end="107:9">if <condition pos:start="59:12" pos:end="59:42">(<expr pos:start="59:13" pos:end="59:41"><name pos:start="59:13" pos:end="59:17">tmp64</name> <operator pos:start="59:19" pos:end="59:19">&amp;</operator> <literal type="number" pos:start="59:21" pos:end="59:41">0x0000000008000000ULL</literal></expr>)</condition> <block pos:start="59:44" pos:end="107:9">{<block_content pos:start="63:13" pos:end="105:13">

            <comment type="block" pos:start="61:13" pos:end="61:36">/* SLB entry is valid */</comment>

            <switch pos:start="63:13" pos:end="89:13">switch <condition pos:start="63:20" pos:end="63:50">(<expr pos:start="63:21" pos:end="63:49"><name pos:start="63:21" pos:end="63:25">tmp64</name> <operator pos:start="63:27" pos:end="63:27">&amp;</operator> <literal type="number" pos:start="63:29" pos:end="63:49">0x0000000006000000ULL</literal></expr>)</condition> <block pos:start="63:52" pos:end="89:13">{<block_content pos:start="65:13" pos:end="87:25">

            <case pos:start="65:13" pos:end="65:39">case <expr pos:start="65:18" pos:end="65:38"><literal type="number" pos:start="65:18" pos:end="65:38">0x0000000000000000ULL</literal></expr>:</case>

                <comment type="block" pos:start="67:17" pos:end="67:36">/* 256 MB segment */</comment>

                <expr_stmt pos:start="69:17" pos:end="69:45"><expr pos:start="69:17" pos:end="69:44"><name pos:start="69:17" pos:end="69:20">mask</name> <operator pos:start="69:22" pos:end="69:22">=</operator> <literal type="number" pos:start="69:24" pos:end="69:44">0xFFFFFFFFF0000000ULL</literal></expr>;</expr_stmt>

                <break pos:start="71:17" pos:end="71:22">break;</break>

            <case pos:start="73:13" pos:end="73:39">case <expr pos:start="73:18" pos:end="73:38"><literal type="number" pos:start="73:18" pos:end="73:38">0x0000000002000000ULL</literal></expr>:</case>

                <comment type="block" pos:start="75:17" pos:end="75:34">/* 1 TB segment */</comment>

                <expr_stmt pos:start="77:17" pos:end="77:45"><expr pos:start="77:17" pos:end="77:44"><name pos:start="77:17" pos:end="77:20">mask</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <literal type="number" pos:start="77:24" pos:end="77:44">0xFFFF000000000000ULL</literal></expr>;</expr_stmt>

                <break pos:start="79:17" pos:end="79:22">break;</break>

            <case pos:start="81:13" pos:end="81:39">case <expr pos:start="81:18" pos:end="81:38"><literal type="number" pos:start="81:18" pos:end="81:38">0x0000000004000000ULL</literal></expr>:</case>

            <case pos:start="83:13" pos:end="83:39">case <expr pos:start="83:18" pos:end="83:38"><literal type="number" pos:start="83:18" pos:end="83:38">0x0000000006000000ULL</literal></expr>:</case>

                <comment type="block" pos:start="85:17" pos:end="85:52">/* Reserved =&gt; segment is invalid */</comment>

                <continue pos:start="87:17" pos:end="87:25">continue;</continue>

            </block_content>}</block></switch>

            <if_stmt pos:start="91:13" pos:end="105:13"><if pos:start="91:13" pos:end="105:13">if <condition pos:start="91:16" pos:end="91:49">(<expr pos:start="91:17" pos:end="91:48"><operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:22">eaddr</name> <operator pos:start="91:24" pos:end="91:24">&amp;</operator> <name pos:start="91:26" pos:end="91:29">mask</name><operator pos:start="91:30" pos:end="91:30">)</operator> <operator pos:start="91:32" pos:end="91:33">==</operator> <operator pos:start="91:35" pos:end="91:35">(</operator><name pos:start="91:36" pos:end="91:40">tmp64</name> <operator pos:start="91:42" pos:end="91:42">&amp;</operator> <name pos:start="91:44" pos:end="91:47">mask</name><operator pos:start="91:48" pos:end="91:48">)</operator></expr>)</condition> <block pos:start="91:51" pos:end="105:13">{<block_content pos:start="95:17" pos:end="103:22">

                <comment type="block" pos:start="93:17" pos:end="93:31">/* SLB match */</comment>

                <expr_stmt pos:start="95:17" pos:end="95:77"><expr pos:start="95:17" pos:end="95:76"><operator pos:start="95:17" pos:end="95:17">*</operator><name pos:start="95:18" pos:end="95:21">vsid</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <operator pos:start="95:25" pos:end="95:25">(</operator><operator pos:start="95:26" pos:end="95:26">(</operator><name pos:start="95:27" pos:end="95:31">tmp64</name> <operator pos:start="95:33" pos:end="95:34">&lt;&lt;</operator> <literal type="number" pos:start="95:36" pos:end="95:37">24</literal><operator pos:start="95:38" pos:end="95:38">)</operator> <operator pos:start="95:40" pos:end="95:40">|</operator> <operator pos:start="95:42" pos:end="95:42">(</operator><name pos:start="95:43" pos:end="95:45">tmp</name> <operator pos:start="95:47" pos:end="95:48">&gt;&gt;</operator> <literal type="number" pos:start="95:50" pos:end="95:50">8</literal><operator pos:start="95:51" pos:end="95:51">)</operator><operator pos:start="95:52" pos:end="95:52">)</operator> <operator pos:start="95:54" pos:end="95:54">&amp;</operator> <literal type="number" pos:start="95:56" pos:end="95:76">0x0003FFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:35"><expr pos:start="97:17" pos:end="97:34"><operator pos:start="97:17" pos:end="97:17">*</operator><name pos:start="97:18" pos:end="97:26">page_mask</name> <operator pos:start="97:28" pos:end="97:28">=</operator> <operator pos:start="97:30" pos:end="97:30">~</operator><name pos:start="97:31" pos:end="97:34">mask</name></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:35"><expr pos:start="99:17" pos:end="99:34"><operator pos:start="99:17" pos:end="99:17">*</operator><name pos:start="99:18" pos:end="99:21">attr</name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:27">tmp</name> <operator pos:start="99:29" pos:end="99:29">&amp;</operator> <literal type="number" pos:start="99:31" pos:end="99:34">0xFF</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:24"><expr pos:start="101:17" pos:end="101:23"><name pos:start="101:17" pos:end="101:19">ret</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>;</expr_stmt>

                <break pos:start="103:17" pos:end="103:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:22"><expr pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:15">sr_base</name> <operator pos:start="109:17" pos:end="109:18">+=</operator> <literal type="number" pos:start="109:20" pos:end="109:21">12</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="115:5" pos:end="115:15">return <expr pos:start="115:12" pos:end="115:14"><name pos:start="115:12" pos:end="115:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
