<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3894.c" pos:tabs="8"><function pos:start="1:1" pos:end="1331:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">disas_thumb_insn</name><parameter_list pos:start="1:29" pos:end="1:60">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:37">CPUState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">env</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:59"><decl pos:start="1:45" pos:end="1:59"><type pos:start="1:45" pos:end="1:59"><name pos:start="1:45" pos:end="1:56">DisasContext</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1331:1">{<block_content pos:start="5:5" pos:end="1329:40">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">val</name></decl>, <decl pos:start="5:19" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:19" pos:end="5:22">insn</name></decl>, <decl pos:start="5:25" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:25" pos:end="5:26">op</name></decl>, <decl pos:start="5:29" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:29" pos:end="5:30">rm</name></decl>, <decl pos:start="5:33" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:33" pos:end="5:34">rn</name></decl>, <decl pos:start="5:37" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:37" pos:end="5:38">rd</name></decl>, <decl pos:start="5:41" pos:end="5:45"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:41" pos:end="5:45">shift</name></decl>, <decl pos:start="5:48" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:48" pos:end="5:51">cond</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int32_t</name></type> <name pos:start="7:13" pos:end="7:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">TCGv</name></type> <name pos:start="11:10" pos:end="11:12">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">TCGv</name></type> <name pos:start="13:10" pos:end="13:13">tmp2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">TCGv</name></type> <name pos:start="15:10" pos:end="15:13">addr</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="33:5"><if pos:start="19:5" pos:end="33:5">if <condition pos:start="19:8" pos:end="19:25">(<expr pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:24">condexec_mask</name></name></expr>)</condition> <block pos:start="19:27" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:9">

        <expr_stmt pos:start="21:9" pos:end="21:32"><expr pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:12">cond</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:31"><name pos:start="21:16" pos:end="21:16">s</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:31">condexec_cond</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="31:9">if <condition pos:start="23:12" pos:end="23:25">(<expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:16">cond</name> <operator pos:start="23:18" pos:end="23:19">!=</operator> <literal type="number" pos:start="23:21" pos:end="23:24">0x0e</literal></expr>)</condition> <block pos:start="23:27" pos:end="31:9">{<block_content pos:start="25:11" pos:end="29:25">     <comment type="block" pos:start="23:33" pos:end="23:76">/* Skip conditional when condition is AL. */</comment>

          <expr_stmt pos:start="25:11" pos:end="25:41"><expr pos:start="25:11" pos:end="25:40"><name pos:start="25:11" pos:end="25:22"><name pos:start="25:11" pos:end="25:11">s</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:22">condlabel</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="25:40"><name pos:start="25:26" pos:end="25:38">gen_new_label</name><argument_list pos:start="25:39" pos:end="25:40">()</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="27:11" pos:end="27:46"><expr pos:start="27:11" pos:end="27:45"><call pos:start="27:11" pos:end="27:45"><name pos:start="27:11" pos:end="27:21">gen_test_cc</name><argument_list pos:start="27:22" pos:end="27:45">(<argument pos:start="27:23" pos:end="27:30"><expr pos:start="27:23" pos:end="27:30"><name pos:start="27:23" pos:end="27:26">cond</name> <operator pos:start="27:28" pos:end="27:28">^</operator> <literal type="number" pos:start="27:30" pos:end="27:30">1</literal></expr></argument>, <argument pos:start="27:33" pos:end="27:44"><expr pos:start="27:33" pos:end="27:44"><name pos:start="27:33" pos:end="27:44"><name pos:start="27:33" pos:end="27:33">s</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:44">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="29:11" pos:end="29:25"><expr pos:start="29:11" pos:end="29:24"><name pos:start="29:11" pos:end="29:20"><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:20">condjmp</name></name> <operator pos:start="29:22" pos:end="29:22">=</operator> <literal type="number" pos:start="29:24" pos:end="29:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:8">insn</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:27"><name pos:start="37:12" pos:end="37:20">lduw_code</name><argument_list pos:start="37:21" pos:end="37:27">(<argument pos:start="37:22" pos:end="37:26"><expr pos:start="37:22" pos:end="37:26"><name pos:start="37:22" pos:end="37:26"><name pos:start="37:22" pos:end="37:22">s</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:26">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:15"><expr pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:9"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:9">pc</name></name> <operator pos:start="39:11" pos:end="39:12">+=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">2</literal></expr>;</expr_stmt>



    <switch pos:start="43:5" pos:end="1315:5">switch <condition pos:start="43:12" pos:end="43:23">(<expr pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:16">insn</name> <operator pos:start="43:18" pos:end="43:19">&gt;&gt;</operator> <literal type="number" pos:start="43:21" pos:end="43:22">12</literal></expr>)</condition> <block pos:start="43:25" pos:end="1315:5">{<block_content pos:start="45:5" pos:end="1313:14">

    <case pos:start="45:5" pos:end="45:11">case <expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">0</literal></expr>:</case> <case pos:start="45:13" pos:end="45:19">case <expr pos:start="45:18" pos:end="45:18"><literal type="number" pos:start="45:18" pos:end="45:18">1</literal></expr>:</case>



        <expr_stmt pos:start="49:9" pos:end="49:22"><expr pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:10">rd</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:17">insn</name> <operator pos:start="49:19" pos:end="49:19">&amp;</operator> <literal type="number" pos:start="49:21" pos:end="49:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:30"><expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:10">op</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <operator pos:start="51:14" pos:end="51:14">(</operator><name pos:start="51:15" pos:end="51:18">insn</name> <operator pos:start="51:20" pos:end="51:21">&gt;&gt;</operator> <literal type="number" pos:start="51:23" pos:end="51:24">11</literal><operator pos:start="51:25" pos:end="51:25">)</operator> <operator pos:start="51:27" pos:end="51:27">&amp;</operator> <literal type="number" pos:start="51:29" pos:end="51:29">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="123:9"><if pos:start="53:9" pos:end="105:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:14">op</name> <operator pos:start="53:16" pos:end="53:17">==</operator> <literal type="number" pos:start="53:19" pos:end="53:19">3</literal></expr>)</condition> <block pos:start="53:22" pos:end="105:9">{<block_content pos:start="57:13" pos:end="103:34">

            <comment type="block" pos:start="55:13" pos:end="55:30">/* add/subtract */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:33"><expr pos:start="57:13" pos:end="57:32"><name pos:start="57:13" pos:end="57:14">rn</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:22">insn</name> <operator pos:start="57:24" pos:end="57:25">&gt;&gt;</operator> <literal type="number" pos:start="57:27" pos:end="57:27">3</literal><operator pos:start="57:28" pos:end="57:28">)</operator> <operator pos:start="57:30" pos:end="57:30">&amp;</operator> <literal type="number" pos:start="57:32" pos:end="57:32">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:34"><expr pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:15">tmp</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:33"><name pos:start="59:19" pos:end="59:26">load_reg</name><argument_list pos:start="59:27" pos:end="59:33">(<argument pos:start="59:28" pos:end="59:28"><expr pos:start="59:28" pos:end="59:28"><name pos:start="59:28" pos:end="59:28">s</name></expr></argument>, <argument pos:start="59:31" pos:end="59:32"><expr pos:start="59:31" pos:end="59:32"><name pos:start="59:31" pos:end="59:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="77:13"><if pos:start="61:13" pos:end="69:13">if <condition pos:start="61:16" pos:end="61:33">(<expr pos:start="61:17" pos:end="61:32"><name pos:start="61:17" pos:end="61:20">insn</name> <operator pos:start="61:22" pos:end="61:22">&amp;</operator> <operator pos:start="61:24" pos:end="61:24">(</operator><literal type="number" pos:start="61:25" pos:end="61:25">1</literal> <operator pos:start="61:27" pos:end="61:28">&lt;&lt;</operator> <literal type="number" pos:start="61:30" pos:end="61:31">10</literal><operator pos:start="61:32" pos:end="61:32">)</operator></expr>)</condition> <block pos:start="61:35" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:56">

                <comment type="block" pos:start="63:17" pos:end="63:31">/* immediate */</comment>

                <expr_stmt pos:start="65:17" pos:end="65:33"><expr pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:20">tmp2</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:32"><name pos:start="65:24" pos:end="65:30">new_tmp</name><argument_list pos:start="65:31" pos:end="65:32">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:56"><expr pos:start="67:17" pos:end="67:55"><call pos:start="67:17" pos:end="67:55"><name pos:start="67:17" pos:end="67:32">tcg_gen_movi_i32</name><argument_list pos:start="67:33" pos:end="67:55">(<argument pos:start="67:34" pos:end="67:37"><expr pos:start="67:34" pos:end="67:37"><name pos:start="67:34" pos:end="67:37">tmp2</name></expr></argument>, <argument pos:start="67:40" pos:end="67:54"><expr pos:start="67:40" pos:end="67:54"><operator pos:start="67:40" pos:end="67:40">(</operator><name pos:start="67:41" pos:end="67:44">insn</name> <operator pos:start="67:46" pos:end="67:47">&gt;&gt;</operator> <literal type="number" pos:start="67:49" pos:end="67:49">6</literal><operator pos:start="67:50" pos:end="67:50">)</operator> <operator pos:start="67:52" pos:end="67:52">&amp;</operator> <literal type="number" pos:start="67:54" pos:end="67:54">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="69:15" pos:end="77:13">else <block pos:start="69:20" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:39">

                <comment type="block" pos:start="71:17" pos:end="71:25">/* reg */</comment>

                <expr_stmt pos:start="73:17" pos:end="73:37"><expr pos:start="73:17" pos:end="73:36"><name pos:start="73:17" pos:end="73:18">rm</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <operator pos:start="73:22" pos:end="73:22">(</operator><name pos:start="73:23" pos:end="73:26">insn</name> <operator pos:start="73:28" pos:end="73:29">&gt;&gt;</operator> <literal type="number" pos:start="73:31" pos:end="73:31">6</literal><operator pos:start="73:32" pos:end="73:32">)</operator> <operator pos:start="73:34" pos:end="73:34">&amp;</operator> <literal type="number" pos:start="73:36" pos:end="73:36">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:39"><expr pos:start="75:17" pos:end="75:38"><name pos:start="75:17" pos:end="75:20">tmp2</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <call pos:start="75:24" pos:end="75:38"><name pos:start="75:24" pos:end="75:31">load_reg</name><argument_list pos:start="75:32" pos:end="75:38">(<argument pos:start="75:33" pos:end="75:33"><expr pos:start="75:33" pos:end="75:33"><name pos:start="75:33" pos:end="75:33">s</name></expr></argument>, <argument pos:start="75:36" pos:end="75:37"><expr pos:start="75:36" pos:end="75:37"><name pos:start="75:36" pos:end="75:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="79:13" pos:end="99:13"><if pos:start="79:13" pos:end="89:13">if <condition pos:start="79:16" pos:end="79:32">(<expr pos:start="79:17" pos:end="79:31"><name pos:start="79:17" pos:end="79:20">insn</name> <operator pos:start="79:22" pos:end="79:22">&amp;</operator> <operator pos:start="79:24" pos:end="79:24">(</operator><literal type="number" pos:start="79:25" pos:end="79:25">1</literal> <operator pos:start="79:27" pos:end="79:28">&lt;&lt;</operator> <literal type="number" pos:start="79:30" pos:end="79:30">9</literal><operator pos:start="79:31" pos:end="79:31">)</operator></expr>)</condition> <block pos:start="79:34" pos:end="89:13">{<block_content pos:start="81:17" pos:end="87:54">

                <if_stmt pos:start="81:17" pos:end="87:54"><if pos:start="81:17" pos:end="83:52">if <condition pos:start="81:20" pos:end="81:37">(<expr pos:start="81:21" pos:end="81:36"><name pos:start="81:21" pos:end="81:36"><name pos:start="81:21" pos:end="81:21">s</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:36">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="83:21" pos:end="83:52"><block_content pos:start="83:21" pos:end="83:52">

                    <expr_stmt pos:start="83:21" pos:end="83:52"><expr pos:start="83:21" pos:end="83:51"><call pos:start="83:21" pos:end="83:51"><name pos:start="83:21" pos:end="83:35">tcg_gen_sub_i32</name><argument_list pos:start="83:36" pos:end="83:51">(<argument pos:start="83:37" pos:end="83:39"><expr pos:start="83:37" pos:end="83:39"><name pos:start="83:37" pos:end="83:39">tmp</name></expr></argument>, <argument pos:start="83:42" pos:end="83:44"><expr pos:start="83:42" pos:end="83:44"><name pos:start="83:42" pos:end="83:44">tmp</name></expr></argument>, <argument pos:start="83:47" pos:end="83:50"><expr pos:start="83:47" pos:end="83:50"><name pos:start="83:47" pos:end="83:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="85:17" pos:end="87:54">else<block type="pseudo" pos:start="87:21" pos:end="87:54"><block_content pos:start="87:21" pos:end="87:54">

                    <expr_stmt pos:start="87:21" pos:end="87:54"><expr pos:start="87:21" pos:end="87:53"><call pos:start="87:21" pos:end="87:53"><name pos:start="87:21" pos:end="87:37">gen_helper_sub_cc</name><argument_list pos:start="87:38" pos:end="87:53">(<argument pos:start="87:39" pos:end="87:41"><expr pos:start="87:39" pos:end="87:41"><name pos:start="87:39" pos:end="87:41">tmp</name></expr></argument>, <argument pos:start="87:44" pos:end="87:46"><expr pos:start="87:44" pos:end="87:46"><name pos:start="87:44" pos:end="87:46">tmp</name></expr></argument>, <argument pos:start="87:49" pos:end="87:52"><expr pos:start="87:49" pos:end="87:52"><name pos:start="87:49" pos:end="87:52">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="89:15" pos:end="99:13">else <block pos:start="89:20" pos:end="99:13">{<block_content pos:start="91:17" pos:end="97:54">

                <if_stmt pos:start="91:17" pos:end="97:54"><if pos:start="91:17" pos:end="93:52">if <condition pos:start="91:20" pos:end="91:37">(<expr pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:21">s</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:36">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="93:21" pos:end="93:52"><block_content pos:start="93:21" pos:end="93:52">

                    <expr_stmt pos:start="93:21" pos:end="93:52"><expr pos:start="93:21" pos:end="93:51"><call pos:start="93:21" pos:end="93:51"><name pos:start="93:21" pos:end="93:35">tcg_gen_add_i32</name><argument_list pos:start="93:36" pos:end="93:51">(<argument pos:start="93:37" pos:end="93:39"><expr pos:start="93:37" pos:end="93:39"><name pos:start="93:37" pos:end="93:39">tmp</name></expr></argument>, <argument pos:start="93:42" pos:end="93:44"><expr pos:start="93:42" pos:end="93:44"><name pos:start="93:42" pos:end="93:44">tmp</name></expr></argument>, <argument pos:start="93:47" pos:end="93:50"><expr pos:start="93:47" pos:end="93:50"><name pos:start="93:47" pos:end="93:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="95:17" pos:end="97:54">else<block type="pseudo" pos:start="97:21" pos:end="97:54"><block_content pos:start="97:21" pos:end="97:54">

                    <expr_stmt pos:start="97:21" pos:end="97:54"><expr pos:start="97:21" pos:end="97:53"><call pos:start="97:21" pos:end="97:53"><name pos:start="97:21" pos:end="97:37">gen_helper_add_cc</name><argument_list pos:start="97:38" pos:end="97:53">(<argument pos:start="97:39" pos:end="97:41"><expr pos:start="97:39" pos:end="97:41"><name pos:start="97:39" pos:end="97:41">tmp</name></expr></argument>, <argument pos:start="97:44" pos:end="97:46"><expr pos:start="97:44" pos:end="97:46"><name pos:start="97:44" pos:end="97:46">tmp</name></expr></argument>, <argument pos:start="97:49" pos:end="97:52"><expr pos:start="97:49" pos:end="97:52"><name pos:start="97:49" pos:end="97:52">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:27"><expr pos:start="101:13" pos:end="101:26"><call pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:20">dead_tmp</name><argument_list pos:start="101:21" pos:end="101:26">(<argument pos:start="101:22" pos:end="101:25"><expr pos:start="101:22" pos:end="101:25"><name pos:start="101:22" pos:end="101:25">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:34"><expr pos:start="103:13" pos:end="103:33"><call pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:21">store_reg</name><argument_list pos:start="103:22" pos:end="103:33">(<argument pos:start="103:23" pos:end="103:23"><expr pos:start="103:23" pos:end="103:23"><name pos:start="103:23" pos:end="103:23">s</name></expr></argument>, <argument pos:start="103:26" pos:end="103:27"><expr pos:start="103:26" pos:end="103:27"><name pos:start="103:26" pos:end="103:27">rd</name></expr></argument>, <argument pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><name pos:start="103:30" pos:end="103:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="123:9">else <block pos:start="105:16" pos:end="123:9">{<block_content pos:start="109:13" pos:end="121:34">

            <comment type="block" pos:start="107:13" pos:end="107:33">/* shift immediate */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:33"><expr pos:start="109:13" pos:end="109:32"><name pos:start="109:13" pos:end="109:14">rm</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <operator pos:start="109:18" pos:end="109:18">(</operator><name pos:start="109:19" pos:end="109:22">insn</name> <operator pos:start="109:24" pos:end="109:25">&gt;&gt;</operator> <literal type="number" pos:start="109:27" pos:end="109:27">3</literal><operator pos:start="109:28" pos:end="109:28">)</operator> <operator pos:start="109:30" pos:end="109:30">&amp;</operator> <literal type="number" pos:start="109:32" pos:end="109:32">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:39"><expr pos:start="111:13" pos:end="111:38"><name pos:start="111:13" pos:end="111:17">shift</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <operator pos:start="111:21" pos:end="111:21">(</operator><name pos:start="111:22" pos:end="111:25">insn</name> <operator pos:start="111:27" pos:end="111:28">&gt;&gt;</operator> <literal type="number" pos:start="111:30" pos:end="111:30">6</literal><operator pos:start="111:31" pos:end="111:31">)</operator> <operator pos:start="111:33" pos:end="111:33">&amp;</operator> <literal type="number" pos:start="111:35" pos:end="111:38">0x1f</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:34"><expr pos:start="113:13" pos:end="113:33"><name pos:start="113:13" pos:end="113:15">tmp</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <call pos:start="113:19" pos:end="113:33"><name pos:start="113:19" pos:end="113:26">load_reg</name><argument_list pos:start="113:27" pos:end="113:33">(<argument pos:start="113:28" pos:end="113:28"><expr pos:start="113:28" pos:end="113:28"><name pos:start="113:28" pos:end="113:28">s</name></expr></argument>, <argument pos:start="113:31" pos:end="113:32"><expr pos:start="113:31" pos:end="113:32"><name pos:start="113:31" pos:end="113:32">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:68"><expr pos:start="115:13" pos:end="115:67"><call pos:start="115:13" pos:end="115:67"><name pos:start="115:13" pos:end="115:28">gen_arm_shift_im</name><argument_list pos:start="115:29" pos:end="115:67">(<argument pos:start="115:30" pos:end="115:32"><expr pos:start="115:30" pos:end="115:32"><name pos:start="115:30" pos:end="115:32">tmp</name></expr></argument>, <argument pos:start="115:35" pos:end="115:36"><expr pos:start="115:35" pos:end="115:36"><name pos:start="115:35" pos:end="115:36">op</name></expr></argument>, <argument pos:start="115:39" pos:end="115:43"><expr pos:start="115:39" pos:end="115:43"><name pos:start="115:39" pos:end="115:43">shift</name></expr></argument>, <argument pos:start="115:46" pos:end="115:66"><expr pos:start="115:46" pos:end="115:66"><name pos:start="115:46" pos:end="115:61"><name pos:start="115:46" pos:end="115:46">s</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:61">condexec_mask</name></name> <operator pos:start="115:63" pos:end="115:64">==</operator> <literal type="number" pos:start="115:66" pos:end="115:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="119:34"><if pos:start="117:13" pos:end="119:34">if <condition pos:start="117:16" pos:end="117:34">(<expr pos:start="117:17" pos:end="117:33"><operator pos:start="117:17" pos:end="117:17">!</operator><name pos:start="117:18" pos:end="117:33"><name pos:start="117:18" pos:end="117:18">s</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="119:17" pos:end="119:34"><block_content pos:start="119:17" pos:end="119:34">

                <expr_stmt pos:start="119:17" pos:end="119:34"><expr pos:start="119:17" pos:end="119:33"><call pos:start="119:17" pos:end="119:33"><name pos:start="119:17" pos:end="119:28">gen_logic_CC</name><argument_list pos:start="119:29" pos:end="119:33">(<argument pos:start="119:30" pos:end="119:32"><expr pos:start="119:30" pos:end="119:32"><name pos:start="119:30" pos:end="119:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:34"><expr pos:start="121:13" pos:end="121:33"><call pos:start="121:13" pos:end="121:33"><name pos:start="121:13" pos:end="121:21">store_reg</name><argument_list pos:start="121:22" pos:end="121:33">(<argument pos:start="121:23" pos:end="121:23"><expr pos:start="121:23" pos:end="121:23"><name pos:start="121:23" pos:end="121:23">s</name></expr></argument>, <argument pos:start="121:26" pos:end="121:27"><expr pos:start="121:26" pos:end="121:27"><name pos:start="121:26" pos:end="121:27">rd</name></expr></argument>, <argument pos:start="121:30" pos:end="121:32"><expr pos:start="121:30" pos:end="121:32"><name pos:start="121:30" pos:end="121:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:11">case <expr pos:start="127:10" pos:end="127:10"><literal type="number" pos:start="127:10" pos:end="127:10">2</literal></expr>:</case> <case pos:start="127:13" pos:end="127:19">case <expr pos:start="127:18" pos:end="127:18"><literal type="number" pos:start="127:18" pos:end="127:18">3</literal></expr>:</case>

        <comment type="block" pos:start="129:9" pos:end="129:40">/* arithmetic large immediate */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:30"><expr pos:start="131:9" pos:end="131:29"><name pos:start="131:9" pos:end="131:10">op</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <operator pos:start="131:14" pos:end="131:14">(</operator><name pos:start="131:15" pos:end="131:18">insn</name> <operator pos:start="131:20" pos:end="131:21">&gt;&gt;</operator> <literal type="number" pos:start="131:23" pos:end="131:24">11</literal><operator pos:start="131:25" pos:end="131:25">)</operator> <operator pos:start="131:27" pos:end="131:27">&amp;</operator> <literal type="number" pos:start="131:29" pos:end="131:29">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:31"><expr pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:10">rd</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <operator pos:start="133:14" pos:end="133:14">(</operator><name pos:start="133:15" pos:end="133:18">insn</name> <operator pos:start="133:20" pos:end="133:21">&gt;&gt;</operator> <literal type="number" pos:start="133:23" pos:end="133:23">8</literal><operator pos:start="133:24" pos:end="133:24">)</operator> <operator pos:start="133:26" pos:end="133:26">&amp;</operator> <literal type="number" pos:start="133:28" pos:end="133:30">0x7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="201:9"><if pos:start="135:9" pos:end="147:9">if <condition pos:start="135:12" pos:end="135:20">(<expr pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:14">op</name> <operator pos:start="135:16" pos:end="135:17">==</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>)</condition> <block pos:start="135:22" pos:end="147:9">{<block_content pos:start="137:13" pos:end="145:34"> <comment type="block" pos:start="135:24" pos:end="135:32">/* mov */</comment>

            <expr_stmt pos:start="137:13" pos:end="137:28"><expr pos:start="137:13" pos:end="137:27"><name pos:start="137:13" pos:end="137:15">tmp</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="137:27"><name pos:start="137:19" pos:end="137:25">new_tmp</name><argument_list pos:start="137:26" pos:end="137:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:47"><expr pos:start="139:13" pos:end="139:46"><call pos:start="139:13" pos:end="139:46"><name pos:start="139:13" pos:end="139:28">tcg_gen_movi_i32</name><argument_list pos:start="139:29" pos:end="139:46">(<argument pos:start="139:30" pos:end="139:32"><expr pos:start="139:30" pos:end="139:32"><name pos:start="139:30" pos:end="139:32">tmp</name></expr></argument>, <argument pos:start="139:35" pos:end="139:45"><expr pos:start="139:35" pos:end="139:45"><name pos:start="139:35" pos:end="139:38">insn</name> <operator pos:start="139:40" pos:end="139:40">&amp;</operator> <literal type="number" pos:start="139:42" pos:end="139:45">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="141:13" pos:end="143:34"><if pos:start="141:13" pos:end="143:34">if <condition pos:start="141:16" pos:end="141:34">(<expr pos:start="141:17" pos:end="141:33"><operator pos:start="141:17" pos:end="141:17">!</operator><name pos:start="141:18" pos:end="141:33"><name pos:start="141:18" pos:end="141:18">s</name><operator pos:start="141:19" pos:end="141:20">-&gt;</operator><name pos:start="141:21" pos:end="141:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:34"><block_content pos:start="143:17" pos:end="143:34">

                <expr_stmt pos:start="143:17" pos:end="143:34"><expr pos:start="143:17" pos:end="143:33"><call pos:start="143:17" pos:end="143:33"><name pos:start="143:17" pos:end="143:28">gen_logic_CC</name><argument_list pos:start="143:29" pos:end="143:33">(<argument pos:start="143:30" pos:end="143:32"><expr pos:start="143:30" pos:end="143:32"><name pos:start="143:30" pos:end="143:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:34"><expr pos:start="145:13" pos:end="145:33"><call pos:start="145:13" pos:end="145:33"><name pos:start="145:13" pos:end="145:21">store_reg</name><argument_list pos:start="145:22" pos:end="145:33">(<argument pos:start="145:23" pos:end="145:23"><expr pos:start="145:23" pos:end="145:23"><name pos:start="145:23" pos:end="145:23">s</name></expr></argument>, <argument pos:start="145:26" pos:end="145:27"><expr pos:start="145:26" pos:end="145:27"><name pos:start="145:26" pos:end="145:27">rd</name></expr></argument>, <argument pos:start="145:30" pos:end="145:32"><expr pos:start="145:30" pos:end="145:32"><name pos:start="145:30" pos:end="145:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="201:9">else <block pos:start="147:16" pos:end="201:9">{<block_content pos:start="149:13" pos:end="199:13">

            <expr_stmt pos:start="149:13" pos:end="149:34"><expr pos:start="149:13" pos:end="149:33"><name pos:start="149:13" pos:end="149:15">tmp</name> <operator pos:start="149:17" pos:end="149:17">=</operator> <call pos:start="149:19" pos:end="149:33"><name pos:start="149:19" pos:end="149:26">load_reg</name><argument_list pos:start="149:27" pos:end="149:33">(<argument pos:start="149:28" pos:end="149:28"><expr pos:start="149:28" pos:end="149:28"><name pos:start="149:28" pos:end="149:28">s</name></expr></argument>, <argument pos:start="149:31" pos:end="149:32"><expr pos:start="149:31" pos:end="149:32"><name pos:start="149:31" pos:end="149:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:29"><expr pos:start="151:13" pos:end="151:28"><name pos:start="151:13" pos:end="151:16">tmp2</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <call pos:start="151:20" pos:end="151:28"><name pos:start="151:20" pos:end="151:26">new_tmp</name><argument_list pos:start="151:27" pos:end="151:28">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:48"><expr pos:start="153:13" pos:end="153:47"><call pos:start="153:13" pos:end="153:47"><name pos:start="153:13" pos:end="153:28">tcg_gen_movi_i32</name><argument_list pos:start="153:29" pos:end="153:47">(<argument pos:start="153:30" pos:end="153:33"><expr pos:start="153:30" pos:end="153:33"><name pos:start="153:30" pos:end="153:33">tmp2</name></expr></argument>, <argument pos:start="153:36" pos:end="153:46"><expr pos:start="153:36" pos:end="153:46"><name pos:start="153:36" pos:end="153:39">insn</name> <operator pos:start="153:41" pos:end="153:41">&amp;</operator> <literal type="number" pos:start="153:43" pos:end="153:46">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="155:13" pos:end="199:13">switch <condition pos:start="155:20" pos:end="155:23">(<expr pos:start="155:21" pos:end="155:22"><name pos:start="155:21" pos:end="155:22">op</name></expr>)</condition> <block pos:start="155:25" pos:end="199:13">{<block_content pos:start="157:13" pos:end="197:22">

            <case pos:start="157:13" pos:end="157:19">case <expr pos:start="157:18" pos:end="157:18"><literal type="number" pos:start="157:18" pos:end="157:18">1</literal></expr>:</case> <comment type="block" pos:start="157:21" pos:end="157:29">/* cmp */</comment>

                <expr_stmt pos:start="159:17" pos:end="159:50"><expr pos:start="159:17" pos:end="159:49"><call pos:start="159:17" pos:end="159:49"><name pos:start="159:17" pos:end="159:33">gen_helper_sub_cc</name><argument_list pos:start="159:34" pos:end="159:49">(<argument pos:start="159:35" pos:end="159:37"><expr pos:start="159:35" pos:end="159:37"><name pos:start="159:35" pos:end="159:37">tmp</name></expr></argument>, <argument pos:start="159:40" pos:end="159:42"><expr pos:start="159:40" pos:end="159:42"><name pos:start="159:40" pos:end="159:42">tmp</name></expr></argument>, <argument pos:start="159:45" pos:end="159:48"><expr pos:start="159:45" pos:end="159:48"><name pos:start="159:45" pos:end="159:48">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:30"><expr pos:start="161:17" pos:end="161:29"><call pos:start="161:17" pos:end="161:29"><name pos:start="161:17" pos:end="161:24">dead_tmp</name><argument_list pos:start="161:25" pos:end="161:29">(<argument pos:start="161:26" pos:end="161:28"><expr pos:start="161:26" pos:end="161:28"><name pos:start="161:26" pos:end="161:28">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:31"><expr pos:start="163:17" pos:end="163:30"><call pos:start="163:17" pos:end="163:30"><name pos:start="163:17" pos:end="163:24">dead_tmp</name><argument_list pos:start="163:25" pos:end="163:30">(<argument pos:start="163:26" pos:end="163:29"><expr pos:start="163:26" pos:end="163:29"><name pos:start="163:26" pos:end="163:29">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="165:17" pos:end="165:22">break;</break>

            <case pos:start="167:13" pos:end="167:19">case <expr pos:start="167:18" pos:end="167:18"><literal type="number" pos:start="167:18" pos:end="167:18">2</literal></expr>:</case> <comment type="block" pos:start="167:21" pos:end="167:29">/* add */</comment>

                <if_stmt pos:start="169:17" pos:end="175:54"><if pos:start="169:17" pos:end="171:52">if <condition pos:start="169:20" pos:end="169:37">(<expr pos:start="169:21" pos:end="169:36"><name pos:start="169:21" pos:end="169:36"><name pos:start="169:21" pos:end="169:21">s</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:36">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="171:21" pos:end="171:52"><block_content pos:start="171:21" pos:end="171:52">

                    <expr_stmt pos:start="171:21" pos:end="171:52"><expr pos:start="171:21" pos:end="171:51"><call pos:start="171:21" pos:end="171:51"><name pos:start="171:21" pos:end="171:35">tcg_gen_add_i32</name><argument_list pos:start="171:36" pos:end="171:51">(<argument pos:start="171:37" pos:end="171:39"><expr pos:start="171:37" pos:end="171:39"><name pos:start="171:37" pos:end="171:39">tmp</name></expr></argument>, <argument pos:start="171:42" pos:end="171:44"><expr pos:start="171:42" pos:end="171:44"><name pos:start="171:42" pos:end="171:44">tmp</name></expr></argument>, <argument pos:start="171:47" pos:end="171:50"><expr pos:start="171:47" pos:end="171:50"><name pos:start="171:47" pos:end="171:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="173:17" pos:end="175:54">else<block type="pseudo" pos:start="175:21" pos:end="175:54"><block_content pos:start="175:21" pos:end="175:54">

                    <expr_stmt pos:start="175:21" pos:end="175:54"><expr pos:start="175:21" pos:end="175:53"><call pos:start="175:21" pos:end="175:53"><name pos:start="175:21" pos:end="175:37">gen_helper_add_cc</name><argument_list pos:start="175:38" pos:end="175:53">(<argument pos:start="175:39" pos:end="175:41"><expr pos:start="175:39" pos:end="175:41"><name pos:start="175:39" pos:end="175:41">tmp</name></expr></argument>, <argument pos:start="175:44" pos:end="175:46"><expr pos:start="175:44" pos:end="175:46"><name pos:start="175:44" pos:end="175:46">tmp</name></expr></argument>, <argument pos:start="175:49" pos:end="175:52"><expr pos:start="175:49" pos:end="175:52"><name pos:start="175:49" pos:end="175:52">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:31"><expr pos:start="177:17" pos:end="177:30"><call pos:start="177:17" pos:end="177:30"><name pos:start="177:17" pos:end="177:24">dead_tmp</name><argument_list pos:start="177:25" pos:end="177:30">(<argument pos:start="177:26" pos:end="177:29"><expr pos:start="177:26" pos:end="177:29"><name pos:start="177:26" pos:end="177:29">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:38"><expr pos:start="179:17" pos:end="179:37"><call pos:start="179:17" pos:end="179:37"><name pos:start="179:17" pos:end="179:25">store_reg</name><argument_list pos:start="179:26" pos:end="179:37">(<argument pos:start="179:27" pos:end="179:27"><expr pos:start="179:27" pos:end="179:27"><name pos:start="179:27" pos:end="179:27">s</name></expr></argument>, <argument pos:start="179:30" pos:end="179:31"><expr pos:start="179:30" pos:end="179:31"><name pos:start="179:30" pos:end="179:31">rd</name></expr></argument>, <argument pos:start="179:34" pos:end="179:36"><expr pos:start="179:34" pos:end="179:36"><name pos:start="179:34" pos:end="179:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="181:17" pos:end="181:22">break;</break>

            <case pos:start="183:13" pos:end="183:19">case <expr pos:start="183:18" pos:end="183:18"><literal type="number" pos:start="183:18" pos:end="183:18">3</literal></expr>:</case> <comment type="block" pos:start="183:21" pos:end="183:29">/* sub */</comment>

                <if_stmt pos:start="185:17" pos:end="191:54"><if pos:start="185:17" pos:end="187:52">if <condition pos:start="185:20" pos:end="185:37">(<expr pos:start="185:21" pos:end="185:36"><name pos:start="185:21" pos:end="185:36"><name pos:start="185:21" pos:end="185:21">s</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:36">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="187:21" pos:end="187:52"><block_content pos:start="187:21" pos:end="187:52">

                    <expr_stmt pos:start="187:21" pos:end="187:52"><expr pos:start="187:21" pos:end="187:51"><call pos:start="187:21" pos:end="187:51"><name pos:start="187:21" pos:end="187:35">tcg_gen_sub_i32</name><argument_list pos:start="187:36" pos:end="187:51">(<argument pos:start="187:37" pos:end="187:39"><expr pos:start="187:37" pos:end="187:39"><name pos:start="187:37" pos:end="187:39">tmp</name></expr></argument>, <argument pos:start="187:42" pos:end="187:44"><expr pos:start="187:42" pos:end="187:44"><name pos:start="187:42" pos:end="187:44">tmp</name></expr></argument>, <argument pos:start="187:47" pos:end="187:50"><expr pos:start="187:47" pos:end="187:50"><name pos:start="187:47" pos:end="187:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="189:17" pos:end="191:54">else<block type="pseudo" pos:start="191:21" pos:end="191:54"><block_content pos:start="191:21" pos:end="191:54">

                    <expr_stmt pos:start="191:21" pos:end="191:54"><expr pos:start="191:21" pos:end="191:53"><call pos:start="191:21" pos:end="191:53"><name pos:start="191:21" pos:end="191:37">gen_helper_sub_cc</name><argument_list pos:start="191:38" pos:end="191:53">(<argument pos:start="191:39" pos:end="191:41"><expr pos:start="191:39" pos:end="191:41"><name pos:start="191:39" pos:end="191:41">tmp</name></expr></argument>, <argument pos:start="191:44" pos:end="191:46"><expr pos:start="191:44" pos:end="191:46"><name pos:start="191:44" pos:end="191:46">tmp</name></expr></argument>, <argument pos:start="191:49" pos:end="191:52"><expr pos:start="191:49" pos:end="191:52"><name pos:start="191:49" pos:end="191:52">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:31"><expr pos:start="193:17" pos:end="193:30"><call pos:start="193:17" pos:end="193:30"><name pos:start="193:17" pos:end="193:24">dead_tmp</name><argument_list pos:start="193:25" pos:end="193:30">(<argument pos:start="193:26" pos:end="193:29"><expr pos:start="193:26" pos:end="193:29"><name pos:start="193:26" pos:end="193:29">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:38"><expr pos:start="195:17" pos:end="195:37"><call pos:start="195:17" pos:end="195:37"><name pos:start="195:17" pos:end="195:25">store_reg</name><argument_list pos:start="195:26" pos:end="195:37">(<argument pos:start="195:27" pos:end="195:27"><expr pos:start="195:27" pos:end="195:27"><name pos:start="195:27" pos:end="195:27">s</name></expr></argument>, <argument pos:start="195:30" pos:end="195:31"><expr pos:start="195:30" pos:end="195:31"><name pos:start="195:30" pos:end="195:31">rd</name></expr></argument>, <argument pos:start="195:34" pos:end="195:36"><expr pos:start="195:34" pos:end="195:36"><name pos:start="195:34" pos:end="195:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="197:17" pos:end="197:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    <case pos:start="205:5" pos:end="205:11">case <expr pos:start="205:10" pos:end="205:10"><literal type="number" pos:start="205:10" pos:end="205:10">4</literal></expr>:</case>

        <if_stmt pos:start="207:9" pos:end="229:9"><if pos:start="207:9" pos:end="229:9">if <condition pos:start="207:12" pos:end="207:29">(<expr pos:start="207:13" pos:end="207:28"><name pos:start="207:13" pos:end="207:16">insn</name> <operator pos:start="207:18" pos:end="207:18">&amp;</operator> <operator pos:start="207:20" pos:end="207:20">(</operator><literal type="number" pos:start="207:21" pos:end="207:21">1</literal> <operator pos:start="207:23" pos:end="207:24">&lt;&lt;</operator> <literal type="number" pos:start="207:26" pos:end="207:27">11</literal><operator pos:start="207:28" pos:end="207:28">)</operator></expr>)</condition> <block pos:start="207:31" pos:end="229:9">{<block_content pos:start="209:13" pos:end="227:18">

            <expr_stmt pos:start="209:13" pos:end="209:33"><expr pos:start="209:13" pos:end="209:32"><name pos:start="209:13" pos:end="209:14">rd</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <operator pos:start="209:18" pos:end="209:18">(</operator><name pos:start="209:19" pos:end="209:22">insn</name> <operator pos:start="209:24" pos:end="209:25">&gt;&gt;</operator> <literal type="number" pos:start="209:27" pos:end="209:27">8</literal><operator pos:start="209:28" pos:end="209:28">)</operator> <operator pos:start="209:30" pos:end="209:30">&amp;</operator> <literal type="number" pos:start="209:32" pos:end="209:32">7</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="211:13" pos:end="211:61">/* load pc-relative.  Bit 1 of PC is ignored.  */</comment>

            <expr_stmt pos:start="213:13" pos:end="213:50"><expr pos:start="213:13" pos:end="213:49"><name pos:start="213:13" pos:end="213:15">val</name> <operator pos:start="213:17" pos:end="213:17">=</operator> <name pos:start="213:19" pos:end="213:23"><name pos:start="213:19" pos:end="213:19">s</name><operator pos:start="213:20" pos:end="213:21">-&gt;</operator><name pos:start="213:22" pos:end="213:23">pc</name></name> <operator pos:start="213:25" pos:end="213:25">+</operator> <literal type="number" pos:start="213:27" pos:end="213:29">2</literal> <operator pos:start="213:29" pos:end="213:29">+</operator> <operator pos:start="213:31" pos:end="213:31">(</operator><operator pos:start="213:32" pos:end="213:32">(</operator><name pos:start="213:33" pos:end="213:36">insn</name> <operator pos:start="213:38" pos:end="213:38">&amp;</operator> <literal type="number" pos:start="213:40" pos:end="213:43">0xff</literal><operator pos:start="213:44" pos:end="213:44">)</operator> <operator pos:start="213:46" pos:end="213:46">*</operator> <literal type="number" pos:start="213:48" pos:end="213:48">4</literal><operator pos:start="213:49" pos:end="213:49">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:32"><expr pos:start="215:13" pos:end="215:31"><name pos:start="215:13" pos:end="215:15">val</name> <operator pos:start="215:17" pos:end="215:18">&amp;=</operator> <operator pos:start="215:20" pos:end="215:20">~</operator><operator pos:start="215:21" pos:end="215:21">(</operator><name pos:start="215:22" pos:end="215:29">uint32_t</name><operator pos:start="215:30" pos:end="215:30">)</operator><literal type="number" pos:start="215:31" pos:end="215:31">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:29"><expr pos:start="217:13" pos:end="217:28"><name pos:start="217:13" pos:end="217:16">addr</name> <operator pos:start="217:18" pos:end="217:18">=</operator> <call pos:start="217:20" pos:end="217:28"><name pos:start="217:20" pos:end="217:26">new_tmp</name><argument_list pos:start="217:27" pos:end="217:28">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:40"><expr pos:start="219:13" pos:end="219:39"><call pos:start="219:13" pos:end="219:39"><name pos:start="219:13" pos:end="219:28">tcg_gen_movi_i32</name><argument_list pos:start="219:29" pos:end="219:39">(<argument pos:start="219:30" pos:end="219:33"><expr pos:start="219:30" pos:end="219:33"><name pos:start="219:30" pos:end="219:33">addr</name></expr></argument>, <argument pos:start="219:36" pos:end="219:38"><expr pos:start="219:36" pos:end="219:38"><name pos:start="219:36" pos:end="219:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:45"><expr pos:start="221:13" pos:end="221:44"><name pos:start="221:13" pos:end="221:15">tmp</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <call pos:start="221:19" pos:end="221:44"><name pos:start="221:19" pos:end="221:26">gen_ld32</name><argument_list pos:start="221:27" pos:end="221:44">(<argument pos:start="221:28" pos:end="221:31"><expr pos:start="221:28" pos:end="221:31"><name pos:start="221:28" pos:end="221:31">addr</name></expr></argument>, <argument pos:start="221:34" pos:end="221:43"><expr pos:start="221:34" pos:end="221:43"><call pos:start="221:34" pos:end="221:43"><name pos:start="221:34" pos:end="221:40">IS_USER</name><argument_list pos:start="221:41" pos:end="221:43">(<argument pos:start="221:42" pos:end="221:42"><expr pos:start="221:42" pos:end="221:42"><name pos:start="221:42" pos:end="221:42">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:27"><expr pos:start="223:13" pos:end="223:26"><call pos:start="223:13" pos:end="223:26"><name pos:start="223:13" pos:end="223:20">dead_tmp</name><argument_list pos:start="223:21" pos:end="223:26">(<argument pos:start="223:22" pos:end="223:25"><expr pos:start="223:22" pos:end="223:25"><name pos:start="223:22" pos:end="223:25">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:34"><expr pos:start="225:13" pos:end="225:33"><call pos:start="225:13" pos:end="225:33"><name pos:start="225:13" pos:end="225:21">store_reg</name><argument_list pos:start="225:22" pos:end="225:33">(<argument pos:start="225:23" pos:end="225:23"><expr pos:start="225:23" pos:end="225:23"><name pos:start="225:23" pos:end="225:23">s</name></expr></argument>, <argument pos:start="225:26" pos:end="225:27"><expr pos:start="225:26" pos:end="225:27"><name pos:start="225:26" pos:end="225:27">rd</name></expr></argument>, <argument pos:start="225:30" pos:end="225:32"><expr pos:start="225:30" pos:end="225:32"><name pos:start="225:30" pos:end="225:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="227:13" pos:end="227:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="231:9" pos:end="303:9"><if pos:start="231:9" pos:end="303:9">if <condition pos:start="231:12" pos:end="231:29">(<expr pos:start="231:13" pos:end="231:28"><name pos:start="231:13" pos:end="231:16">insn</name> <operator pos:start="231:18" pos:end="231:18">&amp;</operator> <operator pos:start="231:20" pos:end="231:20">(</operator><literal type="number" pos:start="231:21" pos:end="231:21">1</literal> <operator pos:start="231:23" pos:end="231:24">&lt;&lt;</operator> <literal type="number" pos:start="231:26" pos:end="231:27">10</literal><operator pos:start="231:28" pos:end="231:28">)</operator></expr>)</condition> <block pos:start="231:31" pos:end="303:9">{<block_content pos:start="235:13" pos:end="301:18">

            <comment type="block" pos:start="233:13" pos:end="233:49">/* data processing extended or blx */</comment>

            <expr_stmt pos:start="235:13" pos:end="235:48"><expr pos:start="235:13" pos:end="235:47"><name pos:start="235:13" pos:end="235:14">rd</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <operator pos:start="235:18" pos:end="235:18">(</operator><name pos:start="235:19" pos:end="235:22">insn</name> <operator pos:start="235:24" pos:end="235:24">&amp;</operator> <literal type="number" pos:start="235:26" pos:end="235:26">7</literal><operator pos:start="235:27" pos:end="235:27">)</operator> <operator pos:start="235:29" pos:end="235:29">|</operator> <operator pos:start="235:31" pos:end="235:31">(</operator><operator pos:start="235:32" pos:end="235:32">(</operator><name pos:start="235:33" pos:end="235:36">insn</name> <operator pos:start="235:38" pos:end="235:39">&gt;&gt;</operator> <literal type="number" pos:start="235:41" pos:end="235:41">4</literal><operator pos:start="235:42" pos:end="235:42">)</operator> <operator pos:start="235:44" pos:end="235:44">&amp;</operator> <literal type="number" pos:start="235:46" pos:end="235:46">8</literal><operator pos:start="235:47" pos:end="235:47">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:35"><expr pos:start="237:13" pos:end="237:34"><name pos:start="237:13" pos:end="237:14">rm</name> <operator pos:start="237:16" pos:end="237:16">=</operator> <operator pos:start="237:18" pos:end="237:18">(</operator><name pos:start="237:19" pos:end="237:22">insn</name> <operator pos:start="237:24" pos:end="237:25">&gt;&gt;</operator> <literal type="number" pos:start="237:27" pos:end="237:27">3</literal><operator pos:start="237:28" pos:end="237:28">)</operator> <operator pos:start="237:30" pos:end="237:30">&amp;</operator> <literal type="number" pos:start="237:32" pos:end="237:34">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:33"><expr pos:start="239:13" pos:end="239:32"><name pos:start="239:13" pos:end="239:14">op</name> <operator pos:start="239:16" pos:end="239:16">=</operator> <operator pos:start="239:18" pos:end="239:18">(</operator><name pos:start="239:19" pos:end="239:22">insn</name> <operator pos:start="239:24" pos:end="239:25">&gt;&gt;</operator> <literal type="number" pos:start="239:27" pos:end="239:27">8</literal><operator pos:start="239:28" pos:end="239:28">)</operator> <operator pos:start="239:30" pos:end="239:30">&amp;</operator> <literal type="number" pos:start="239:32" pos:end="239:32">3</literal></expr>;</expr_stmt>

            <switch pos:start="241:13" pos:end="299:13">switch <condition pos:start="241:20" pos:end="241:23">(<expr pos:start="241:21" pos:end="241:22"><name pos:start="241:21" pos:end="241:22">op</name></expr>)</condition> <block pos:start="241:25" pos:end="299:13">{<block_content pos:start="243:13" pos:end="297:22">

            <case pos:start="243:13" pos:end="243:19">case <expr pos:start="243:18" pos:end="243:18"><literal type="number" pos:start="243:18" pos:end="243:18">0</literal></expr>:</case> <comment type="block" pos:start="243:21" pos:end="243:29">/* add */</comment>

                <expr_stmt pos:start="245:17" pos:end="245:38"><expr pos:start="245:17" pos:end="245:37"><name pos:start="245:17" pos:end="245:19">tmp</name> <operator pos:start="245:21" pos:end="245:21">=</operator> <call pos:start="245:23" pos:end="245:37"><name pos:start="245:23" pos:end="245:30">load_reg</name><argument_list pos:start="245:31" pos:end="245:37">(<argument pos:start="245:32" pos:end="245:32"><expr pos:start="245:32" pos:end="245:32"><name pos:start="245:32" pos:end="245:32">s</name></expr></argument>, <argument pos:start="245:35" pos:end="245:36"><expr pos:start="245:35" pos:end="245:36"><name pos:start="245:35" pos:end="245:36">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:39"><expr pos:start="247:17" pos:end="247:38"><name pos:start="247:17" pos:end="247:20">tmp2</name> <operator pos:start="247:22" pos:end="247:22">=</operator> <call pos:start="247:24" pos:end="247:38"><name pos:start="247:24" pos:end="247:31">load_reg</name><argument_list pos:start="247:32" pos:end="247:38">(<argument pos:start="247:33" pos:end="247:33"><expr pos:start="247:33" pos:end="247:33"><name pos:start="247:33" pos:end="247:33">s</name></expr></argument>, <argument pos:start="247:36" pos:end="247:37"><expr pos:start="247:36" pos:end="247:37"><name pos:start="247:36" pos:end="247:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:48"><expr pos:start="249:17" pos:end="249:47"><call pos:start="249:17" pos:end="249:47"><name pos:start="249:17" pos:end="249:31">tcg_gen_add_i32</name><argument_list pos:start="249:32" pos:end="249:47">(<argument pos:start="249:33" pos:end="249:35"><expr pos:start="249:33" pos:end="249:35"><name pos:start="249:33" pos:end="249:35">tmp</name></expr></argument>, <argument pos:start="249:38" pos:end="249:40"><expr pos:start="249:38" pos:end="249:40"><name pos:start="249:38" pos:end="249:40">tmp</name></expr></argument>, <argument pos:start="249:43" pos:end="249:46"><expr pos:start="249:43" pos:end="249:46"><name pos:start="249:43" pos:end="249:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:31"><expr pos:start="251:17" pos:end="251:30"><call pos:start="251:17" pos:end="251:30"><name pos:start="251:17" pos:end="251:24">dead_tmp</name><argument_list pos:start="251:25" pos:end="251:30">(<argument pos:start="251:26" pos:end="251:29"><expr pos:start="251:26" pos:end="251:29"><name pos:start="251:26" pos:end="251:29">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:38"><expr pos:start="253:17" pos:end="253:37"><call pos:start="253:17" pos:end="253:37"><name pos:start="253:17" pos:end="253:25">store_reg</name><argument_list pos:start="253:26" pos:end="253:37">(<argument pos:start="253:27" pos:end="253:27"><expr pos:start="253:27" pos:end="253:27"><name pos:start="253:27" pos:end="253:27">s</name></expr></argument>, <argument pos:start="253:30" pos:end="253:31"><expr pos:start="253:30" pos:end="253:31"><name pos:start="253:30" pos:end="253:31">rd</name></expr></argument>, <argument pos:start="253:34" pos:end="253:36"><expr pos:start="253:34" pos:end="253:36"><name pos:start="253:34" pos:end="253:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="255:17" pos:end="255:22">break;</break>

            <case pos:start="257:13" pos:end="257:19">case <expr pos:start="257:18" pos:end="257:18"><literal type="number" pos:start="257:18" pos:end="257:18">1</literal></expr>:</case> <comment type="block" pos:start="257:21" pos:end="257:29">/* cmp */</comment>

                <expr_stmt pos:start="259:17" pos:end="259:38"><expr pos:start="259:17" pos:end="259:37"><name pos:start="259:17" pos:end="259:19">tmp</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <call pos:start="259:23" pos:end="259:37"><name pos:start="259:23" pos:end="259:30">load_reg</name><argument_list pos:start="259:31" pos:end="259:37">(<argument pos:start="259:32" pos:end="259:32"><expr pos:start="259:32" pos:end="259:32"><name pos:start="259:32" pos:end="259:32">s</name></expr></argument>, <argument pos:start="259:35" pos:end="259:36"><expr pos:start="259:35" pos:end="259:36"><name pos:start="259:35" pos:end="259:36">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:39"><expr pos:start="261:17" pos:end="261:38"><name pos:start="261:17" pos:end="261:20">tmp2</name> <operator pos:start="261:22" pos:end="261:22">=</operator> <call pos:start="261:24" pos:end="261:38"><name pos:start="261:24" pos:end="261:31">load_reg</name><argument_list pos:start="261:32" pos:end="261:38">(<argument pos:start="261:33" pos:end="261:33"><expr pos:start="261:33" pos:end="261:33"><name pos:start="261:33" pos:end="261:33">s</name></expr></argument>, <argument pos:start="261:36" pos:end="261:37"><expr pos:start="261:36" pos:end="261:37"><name pos:start="261:36" pos:end="261:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:50"><expr pos:start="263:17" pos:end="263:49"><call pos:start="263:17" pos:end="263:49"><name pos:start="263:17" pos:end="263:33">gen_helper_sub_cc</name><argument_list pos:start="263:34" pos:end="263:49">(<argument pos:start="263:35" pos:end="263:37"><expr pos:start="263:35" pos:end="263:37"><name pos:start="263:35" pos:end="263:37">tmp</name></expr></argument>, <argument pos:start="263:40" pos:end="263:42"><expr pos:start="263:40" pos:end="263:42"><name pos:start="263:40" pos:end="263:42">tmp</name></expr></argument>, <argument pos:start="263:45" pos:end="263:48"><expr pos:start="263:45" pos:end="263:48"><name pos:start="263:45" pos:end="263:48">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:31"><expr pos:start="265:17" pos:end="265:30"><call pos:start="265:17" pos:end="265:30"><name pos:start="265:17" pos:end="265:24">dead_tmp</name><argument_list pos:start="265:25" pos:end="265:30">(<argument pos:start="265:26" pos:end="265:29"><expr pos:start="265:26" pos:end="265:29"><name pos:start="265:26" pos:end="265:29">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:30"><expr pos:start="267:17" pos:end="267:29"><call pos:start="267:17" pos:end="267:29"><name pos:start="267:17" pos:end="267:24">dead_tmp</name><argument_list pos:start="267:25" pos:end="267:29">(<argument pos:start="267:26" pos:end="267:28"><expr pos:start="267:26" pos:end="267:28"><name pos:start="267:26" pos:end="267:28">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="269:17" pos:end="269:22">break;</break>

            <case pos:start="271:13" pos:end="271:19">case <expr pos:start="271:18" pos:end="271:18"><literal type="number" pos:start="271:18" pos:end="271:18">2</literal></expr>:</case> <comment type="block" pos:start="271:21" pos:end="271:33">/* mov/cpy */</comment>

                <expr_stmt pos:start="273:17" pos:end="273:38"><expr pos:start="273:17" pos:end="273:37"><name pos:start="273:17" pos:end="273:19">tmp</name> <operator pos:start="273:21" pos:end="273:21">=</operator> <call pos:start="273:23" pos:end="273:37"><name pos:start="273:23" pos:end="273:30">load_reg</name><argument_list pos:start="273:31" pos:end="273:37">(<argument pos:start="273:32" pos:end="273:32"><expr pos:start="273:32" pos:end="273:32"><name pos:start="273:32" pos:end="273:32">s</name></expr></argument>, <argument pos:start="273:35" pos:end="273:36"><expr pos:start="273:35" pos:end="273:36"><name pos:start="273:35" pos:end="273:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="275:17" pos:end="275:38"><expr pos:start="275:17" pos:end="275:37"><call pos:start="275:17" pos:end="275:37"><name pos:start="275:17" pos:end="275:25">store_reg</name><argument_list pos:start="275:26" pos:end="275:37">(<argument pos:start="275:27" pos:end="275:27"><expr pos:start="275:27" pos:end="275:27"><name pos:start="275:27" pos:end="275:27">s</name></expr></argument>, <argument pos:start="275:30" pos:end="275:31"><expr pos:start="275:30" pos:end="275:31"><name pos:start="275:30" pos:end="275:31">rd</name></expr></argument>, <argument pos:start="275:34" pos:end="275:36"><expr pos:start="275:34" pos:end="275:36"><name pos:start="275:34" pos:end="275:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="277:17" pos:end="277:22">break;</break>

            <case pos:start="279:13" pos:end="279:19">case <expr pos:start="279:18" pos:end="279:18"><literal type="number" pos:start="279:18" pos:end="279:18">3</literal></expr>:</case><comment type="block" pos:start="279:20" pos:end="279:66">/* branch [and link] exchange thumb register */</comment>

                <expr_stmt pos:start="281:17" pos:end="281:38"><expr pos:start="281:17" pos:end="281:37"><name pos:start="281:17" pos:end="281:19">tmp</name> <operator pos:start="281:21" pos:end="281:21">=</operator> <call pos:start="281:23" pos:end="281:37"><name pos:start="281:23" pos:end="281:30">load_reg</name><argument_list pos:start="281:31" pos:end="281:37">(<argument pos:start="281:32" pos:end="281:32"><expr pos:start="281:32" pos:end="281:32"><name pos:start="281:32" pos:end="281:32">s</name></expr></argument>, <argument pos:start="281:35" pos:end="281:36"><expr pos:start="281:35" pos:end="281:36"><name pos:start="281:35" pos:end="281:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="283:17" pos:end="293:17"><if pos:start="283:17" pos:end="293:17">if <condition pos:start="283:20" pos:end="283:36">(<expr pos:start="283:21" pos:end="283:35"><name pos:start="283:21" pos:end="283:24">insn</name> <operator pos:start="283:26" pos:end="283:26">&amp;</operator> <operator pos:start="283:28" pos:end="283:28">(</operator><literal type="number" pos:start="283:29" pos:end="283:29">1</literal> <operator pos:start="283:31" pos:end="283:32">&lt;&lt;</operator> <literal type="number" pos:start="283:34" pos:end="283:34">7</literal><operator pos:start="283:35" pos:end="283:35">)</operator></expr>)</condition> <block pos:start="283:38" pos:end="293:17">{<block_content pos:start="285:21" pos:end="291:43">

                    <expr_stmt pos:start="285:21" pos:end="285:46"><expr pos:start="285:21" pos:end="285:45"><name pos:start="285:21" pos:end="285:23">val</name> <operator pos:start="285:25" pos:end="285:25">=</operator> <operator pos:start="285:27" pos:end="285:27">(</operator><name pos:start="285:28" pos:end="285:35">uint32_t</name><operator pos:start="285:36" pos:end="285:36">)</operator><name pos:start="285:37" pos:end="285:41"><name pos:start="285:37" pos:end="285:37">s</name><operator pos:start="285:38" pos:end="285:39">-&gt;</operator><name pos:start="285:40" pos:end="285:41">pc</name></name> <operator pos:start="285:43" pos:end="285:43">|</operator> <literal type="number" pos:start="285:45" pos:end="285:45">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="287:21" pos:end="287:37"><expr pos:start="287:21" pos:end="287:36"><name pos:start="287:21" pos:end="287:24">tmp2</name> <operator pos:start="287:26" pos:end="287:26">=</operator> <call pos:start="287:28" pos:end="287:36"><name pos:start="287:28" pos:end="287:34">new_tmp</name><argument_list pos:start="287:35" pos:end="287:36">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:48"><expr pos:start="289:21" pos:end="289:47"><call pos:start="289:21" pos:end="289:47"><name pos:start="289:21" pos:end="289:36">tcg_gen_movi_i32</name><argument_list pos:start="289:37" pos:end="289:47">(<argument pos:start="289:38" pos:end="289:41"><expr pos:start="289:38" pos:end="289:41"><name pos:start="289:38" pos:end="289:41">tmp2</name></expr></argument>, <argument pos:start="289:44" pos:end="289:46"><expr pos:start="289:44" pos:end="289:46"><name pos:start="289:44" pos:end="289:46">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:43"><expr pos:start="291:21" pos:end="291:42"><call pos:start="291:21" pos:end="291:42"><name pos:start="291:21" pos:end="291:29">store_reg</name><argument_list pos:start="291:30" pos:end="291:42">(<argument pos:start="291:31" pos:end="291:31"><expr pos:start="291:31" pos:end="291:31"><name pos:start="291:31" pos:end="291:31">s</name></expr></argument>, <argument pos:start="291:34" pos:end="291:35"><expr pos:start="291:34" pos:end="291:35"><literal type="number" pos:start="291:34" pos:end="291:35">14</literal></expr></argument>, <argument pos:start="291:38" pos:end="291:41"><expr pos:start="291:38" pos:end="291:41"><name pos:start="291:38" pos:end="291:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:31"><expr pos:start="295:17" pos:end="295:30"><call pos:start="295:17" pos:end="295:30"><name pos:start="295:17" pos:end="295:22">gen_bx</name><argument_list pos:start="295:23" pos:end="295:30">(<argument pos:start="295:24" pos:end="295:24"><expr pos:start="295:24" pos:end="295:24"><name pos:start="295:24" pos:end="295:24">s</name></expr></argument>, <argument pos:start="295:27" pos:end="295:29"><expr pos:start="295:27" pos:end="295:29"><name pos:start="295:27" pos:end="295:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="297:17" pos:end="297:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="301:13" pos:end="301:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="307:9" pos:end="307:38">/* data processing register */</comment>

        <expr_stmt pos:start="309:9" pos:end="309:22"><expr pos:start="309:9" pos:end="309:21"><name pos:start="309:9" pos:end="309:10">rd</name> <operator pos:start="309:12" pos:end="309:12">=</operator> <name pos:start="309:14" pos:end="309:17">insn</name> <operator pos:start="309:19" pos:end="309:19">&amp;</operator> <literal type="number" pos:start="309:21" pos:end="309:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:29"><expr pos:start="311:9" pos:end="311:28"><name pos:start="311:9" pos:end="311:10">rm</name> <operator pos:start="311:12" pos:end="311:12">=</operator> <operator pos:start="311:14" pos:end="311:14">(</operator><name pos:start="311:15" pos:end="311:18">insn</name> <operator pos:start="311:20" pos:end="311:21">&gt;&gt;</operator> <literal type="number" pos:start="311:23" pos:end="311:23">3</literal><operator pos:start="311:24" pos:end="311:24">)</operator> <operator pos:start="311:26" pos:end="311:26">&amp;</operator> <literal type="number" pos:start="311:28" pos:end="311:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:31"><expr pos:start="313:9" pos:end="313:30"><name pos:start="313:9" pos:end="313:10">op</name> <operator pos:start="313:12" pos:end="313:12">=</operator> <operator pos:start="313:14" pos:end="313:14">(</operator><name pos:start="313:15" pos:end="313:18">insn</name> <operator pos:start="313:20" pos:end="313:21">&gt;&gt;</operator> <literal type="number" pos:start="313:23" pos:end="313:23">6</literal><operator pos:start="313:24" pos:end="313:24">)</operator> <operator pos:start="313:26" pos:end="313:26">&amp;</operator> <literal type="number" pos:start="313:28" pos:end="313:30">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="315:9" pos:end="331:9"><if pos:start="315:9" pos:end="327:9">if <condition pos:start="315:12" pos:end="315:53">(<expr pos:start="315:13" pos:end="315:52"><name pos:start="315:13" pos:end="315:14">op</name> <operator pos:start="315:16" pos:end="315:17">==</operator> <literal type="number" pos:start="315:19" pos:end="315:19">2</literal> <operator pos:start="315:21" pos:end="315:22">||</operator> <name pos:start="315:24" pos:end="315:25">op</name> <operator pos:start="315:27" pos:end="315:28">==</operator> <literal type="number" pos:start="315:30" pos:end="315:30">3</literal> <operator pos:start="315:32" pos:end="315:33">||</operator> <name pos:start="315:35" pos:end="315:36">op</name> <operator pos:start="315:38" pos:end="315:39">==</operator> <literal type="number" pos:start="315:41" pos:end="315:41">4</literal> <operator pos:start="315:43" pos:end="315:44">||</operator> <name pos:start="315:46" pos:end="315:47">op</name> <operator pos:start="315:49" pos:end="315:50">==</operator> <literal type="number" pos:start="315:52" pos:end="315:52">7</literal></expr>)</condition> <block pos:start="315:55" pos:end="327:9">{<block_content pos:start="319:13" pos:end="325:20">

            <comment type="block" pos:start="317:13" pos:end="317:66">/* the shift/rotate ops want the operands backwards */</comment>

            <expr_stmt pos:start="319:13" pos:end="319:21"><expr pos:start="319:13" pos:end="319:20"><name pos:start="319:13" pos:end="319:15">val</name> <operator pos:start="319:17" pos:end="319:17">=</operator> <name pos:start="319:19" pos:end="319:20">rm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:20"><expr pos:start="321:13" pos:end="321:19"><name pos:start="321:13" pos:end="321:14">rm</name> <operator pos:start="321:16" pos:end="321:16">=</operator> <name pos:start="321:18" pos:end="321:19">rd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:21"><expr pos:start="323:13" pos:end="323:20"><name pos:start="323:13" pos:end="323:14">rd</name> <operator pos:start="323:16" pos:end="323:16">=</operator> <name pos:start="323:18" pos:end="323:20">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="325:13" pos:end="325:20"><expr pos:start="325:13" pos:end="325:19"><name pos:start="325:13" pos:end="325:15">val</name> <operator pos:start="325:17" pos:end="325:17">=</operator> <literal type="number" pos:start="325:19" pos:end="325:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="327:11" pos:end="331:9">else <block pos:start="327:16" pos:end="331:9">{<block_content pos:start="329:13" pos:end="329:20">

            <expr_stmt pos:start="329:13" pos:end="329:20"><expr pos:start="329:13" pos:end="329:19"><name pos:start="329:13" pos:end="329:15">val</name> <operator pos:start="329:17" pos:end="329:17">=</operator> <literal type="number" pos:start="329:19" pos:end="329:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="335:9" pos:end="349:9"><if pos:start="335:9" pos:end="341:9">if <condition pos:start="335:12" pos:end="335:20">(<expr pos:start="335:13" pos:end="335:19"><name pos:start="335:13" pos:end="335:14">op</name> <operator pos:start="335:16" pos:end="335:17">==</operator> <literal type="number" pos:start="335:19" pos:end="335:19">9</literal></expr>)</condition> <block pos:start="335:22" pos:end="341:9">{<block_content pos:start="337:13" pos:end="339:37"> <comment type="block" pos:start="335:24" pos:end="335:32">/* neg */</comment>

            <expr_stmt pos:start="337:13" pos:end="337:28"><expr pos:start="337:13" pos:end="337:27"><name pos:start="337:13" pos:end="337:15">tmp</name> <operator pos:start="337:17" pos:end="337:17">=</operator> <call pos:start="337:19" pos:end="337:27"><name pos:start="337:19" pos:end="337:25">new_tmp</name><argument_list pos:start="337:26" pos:end="337:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:37"><expr pos:start="339:13" pos:end="339:36"><call pos:start="339:13" pos:end="339:36"><name pos:start="339:13" pos:end="339:28">tcg_gen_movi_i32</name><argument_list pos:start="339:29" pos:end="339:36">(<argument pos:start="339:30" pos:end="339:32"><expr pos:start="339:30" pos:end="339:32"><name pos:start="339:30" pos:end="339:32">tmp</name></expr></argument>, <argument pos:start="339:35" pos:end="339:35"><expr pos:start="339:35" pos:end="339:35"><literal type="number" pos:start="339:35" pos:end="339:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="341:11" pos:end="345:9">else if <condition pos:start="341:19" pos:end="341:29">(<expr pos:start="341:20" pos:end="341:28"><name pos:start="341:20" pos:end="341:21">op</name> <operator pos:start="341:23" pos:end="341:24">!=</operator> <literal type="number" pos:start="341:26" pos:end="341:28">0xf</literal></expr>)</condition> <block pos:start="341:31" pos:end="345:9">{<block_content pos:start="343:13" pos:end="343:34"> <comment type="block" pos:start="341:33" pos:end="341:72">/* mvn doesn't read its first operand */</comment>

            <expr_stmt pos:start="343:13" pos:end="343:34"><expr pos:start="343:13" pos:end="343:33"><name pos:start="343:13" pos:end="343:15">tmp</name> <operator pos:start="343:17" pos:end="343:17">=</operator> <call pos:start="343:19" pos:end="343:33"><name pos:start="343:19" pos:end="343:26">load_reg</name><argument_list pos:start="343:27" pos:end="343:33">(<argument pos:start="343:28" pos:end="343:28"><expr pos:start="343:28" pos:end="343:28"><name pos:start="343:28" pos:end="343:28">s</name></expr></argument>, <argument pos:start="343:31" pos:end="343:32"><expr pos:start="343:31" pos:end="343:32"><name pos:start="343:31" pos:end="343:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="345:11" pos:end="349:9">else <block pos:start="345:16" pos:end="349:9">{<block_content pos:start="347:13" pos:end="347:29">

            <expr_stmt pos:start="347:13" pos:end="347:29"><expr pos:start="347:13" pos:end="347:28"><call pos:start="347:13" pos:end="347:28"><name pos:start="347:13" pos:end="347:23">TCGV_UNUSED</name><argument_list pos:start="347:24" pos:end="347:28">(<argument pos:start="347:25" pos:end="347:27"><expr pos:start="347:25" pos:end="347:27"><name pos:start="347:25" pos:end="347:27">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="353:9" pos:end="353:31"><expr pos:start="353:9" pos:end="353:30"><name pos:start="353:9" pos:end="353:12">tmp2</name> <operator pos:start="353:14" pos:end="353:14">=</operator> <call pos:start="353:16" pos:end="353:30"><name pos:start="353:16" pos:end="353:23">load_reg</name><argument_list pos:start="353:24" pos:end="353:30">(<argument pos:start="353:25" pos:end="353:25"><expr pos:start="353:25" pos:end="353:25"><name pos:start="353:25" pos:end="353:25">s</name></expr></argument>, <argument pos:start="353:28" pos:end="353:29"><expr pos:start="353:28" pos:end="353:29"><name pos:start="353:28" pos:end="353:29">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="355:9" pos:end="549:9">switch <condition pos:start="355:16" pos:end="355:19">(<expr pos:start="355:17" pos:end="355:18"><name pos:start="355:17" pos:end="355:18">op</name></expr>)</condition> <block pos:start="355:21" pos:end="549:9">{<block_content pos:start="357:9" pos:end="547:18">

        <case pos:start="357:9" pos:end="357:17">case <expr pos:start="357:14" pos:end="357:16"><literal type="number" pos:start="357:14" pos:end="357:16">0x0</literal></expr>:</case> <comment type="block" pos:start="357:19" pos:end="357:27">/* and */</comment>

            <expr_stmt pos:start="359:13" pos:end="359:44"><expr pos:start="359:13" pos:end="359:43"><call pos:start="359:13" pos:end="359:43"><name pos:start="359:13" pos:end="359:27">tcg_gen_and_i32</name><argument_list pos:start="359:28" pos:end="359:43">(<argument pos:start="359:29" pos:end="359:31"><expr pos:start="359:29" pos:end="359:31"><name pos:start="359:29" pos:end="359:31">tmp</name></expr></argument>, <argument pos:start="359:34" pos:end="359:36"><expr pos:start="359:34" pos:end="359:36"><name pos:start="359:34" pos:end="359:36">tmp</name></expr></argument>, <argument pos:start="359:39" pos:end="359:42"><expr pos:start="359:39" pos:end="359:42"><name pos:start="359:39" pos:end="359:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="361:13" pos:end="363:34"><if pos:start="361:13" pos:end="363:34">if <condition pos:start="361:16" pos:end="361:34">(<expr pos:start="361:17" pos:end="361:33"><operator pos:start="361:17" pos:end="361:17">!</operator><name pos:start="361:18" pos:end="361:33"><name pos:start="361:18" pos:end="361:18">s</name><operator pos:start="361:19" pos:end="361:20">-&gt;</operator><name pos:start="361:21" pos:end="361:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="363:17" pos:end="363:34"><block_content pos:start="363:17" pos:end="363:34">

                <expr_stmt pos:start="363:17" pos:end="363:34"><expr pos:start="363:17" pos:end="363:33"><call pos:start="363:17" pos:end="363:33"><name pos:start="363:17" pos:end="363:28">gen_logic_CC</name><argument_list pos:start="363:29" pos:end="363:33">(<argument pos:start="363:30" pos:end="363:32"><expr pos:start="363:30" pos:end="363:32"><name pos:start="363:30" pos:end="363:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="365:13" pos:end="365:18">break;</break>

        <case pos:start="367:9" pos:end="367:17">case <expr pos:start="367:14" pos:end="367:16"><literal type="number" pos:start="367:14" pos:end="367:16">0x1</literal></expr>:</case> <comment type="block" pos:start="367:19" pos:end="367:27">/* eor */</comment>

            <expr_stmt pos:start="369:13" pos:end="369:44"><expr pos:start="369:13" pos:end="369:43"><call pos:start="369:13" pos:end="369:43"><name pos:start="369:13" pos:end="369:27">tcg_gen_xor_i32</name><argument_list pos:start="369:28" pos:end="369:43">(<argument pos:start="369:29" pos:end="369:31"><expr pos:start="369:29" pos:end="369:31"><name pos:start="369:29" pos:end="369:31">tmp</name></expr></argument>, <argument pos:start="369:34" pos:end="369:36"><expr pos:start="369:34" pos:end="369:36"><name pos:start="369:34" pos:end="369:36">tmp</name></expr></argument>, <argument pos:start="369:39" pos:end="369:42"><expr pos:start="369:39" pos:end="369:42"><name pos:start="369:39" pos:end="369:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="371:13" pos:end="373:34"><if pos:start="371:13" pos:end="373:34">if <condition pos:start="371:16" pos:end="371:34">(<expr pos:start="371:17" pos:end="371:33"><operator pos:start="371:17" pos:end="371:17">!</operator><name pos:start="371:18" pos:end="371:33"><name pos:start="371:18" pos:end="371:18">s</name><operator pos:start="371:19" pos:end="371:20">-&gt;</operator><name pos:start="371:21" pos:end="371:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="373:17" pos:end="373:34"><block_content pos:start="373:17" pos:end="373:34">

                <expr_stmt pos:start="373:17" pos:end="373:34"><expr pos:start="373:17" pos:end="373:33"><call pos:start="373:17" pos:end="373:33"><name pos:start="373:17" pos:end="373:28">gen_logic_CC</name><argument_list pos:start="373:29" pos:end="373:33">(<argument pos:start="373:30" pos:end="373:32"><expr pos:start="373:30" pos:end="373:32"><name pos:start="373:30" pos:end="373:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="375:13" pos:end="375:18">break;</break>

        <case pos:start="377:9" pos:end="377:17">case <expr pos:start="377:14" pos:end="377:16"><literal type="number" pos:start="377:14" pos:end="377:16">0x2</literal></expr>:</case> <comment type="block" pos:start="377:19" pos:end="377:27">/* lsl */</comment>

            <if_stmt pos:start="379:13" pos:end="389:13"><if pos:start="379:13" pos:end="383:13">if <condition pos:start="379:16" pos:end="379:33">(<expr pos:start="379:17" pos:end="379:32"><name pos:start="379:17" pos:end="379:32"><name pos:start="379:17" pos:end="379:17">s</name><operator pos:start="379:18" pos:end="379:19">-&gt;</operator><name pos:start="379:20" pos:end="379:32">condexec_mask</name></name></expr>)</condition> <block pos:start="379:35" pos:end="383:13">{<block_content pos:start="381:17" pos:end="381:48">

                <expr_stmt pos:start="381:17" pos:end="381:48"><expr pos:start="381:17" pos:end="381:47"><call pos:start="381:17" pos:end="381:47"><name pos:start="381:17" pos:end="381:30">gen_helper_shl</name><argument_list pos:start="381:31" pos:end="381:47">(<argument pos:start="381:32" pos:end="381:35"><expr pos:start="381:32" pos:end="381:35"><name pos:start="381:32" pos:end="381:35">tmp2</name></expr></argument>, <argument pos:start="381:38" pos:end="381:41"><expr pos:start="381:38" pos:end="381:41"><name pos:start="381:38" pos:end="381:41">tmp2</name></expr></argument>, <argument pos:start="381:44" pos:end="381:46"><expr pos:start="381:44" pos:end="381:46"><name pos:start="381:44" pos:end="381:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="383:15" pos:end="389:13">else <block pos:start="383:20" pos:end="389:13">{<block_content pos:start="385:17" pos:end="387:35">

                <expr_stmt pos:start="385:17" pos:end="385:51"><expr pos:start="385:17" pos:end="385:50"><call pos:start="385:17" pos:end="385:50"><name pos:start="385:17" pos:end="385:33">gen_helper_shl_cc</name><argument_list pos:start="385:34" pos:end="385:50">(<argument pos:start="385:35" pos:end="385:38"><expr pos:start="385:35" pos:end="385:38"><name pos:start="385:35" pos:end="385:38">tmp2</name></expr></argument>, <argument pos:start="385:41" pos:end="385:44"><expr pos:start="385:41" pos:end="385:44"><name pos:start="385:41" pos:end="385:44">tmp2</name></expr></argument>, <argument pos:start="385:47" pos:end="385:49"><expr pos:start="385:47" pos:end="385:49"><name pos:start="385:47" pos:end="385:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="387:17" pos:end="387:35"><expr pos:start="387:17" pos:end="387:34"><call pos:start="387:17" pos:end="387:34"><name pos:start="387:17" pos:end="387:28">gen_logic_CC</name><argument_list pos:start="387:29" pos:end="387:34">(<argument pos:start="387:30" pos:end="387:33"><expr pos:start="387:30" pos:end="387:33"><name pos:start="387:30" pos:end="387:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="391:13" pos:end="391:18">break;</break>

        <case pos:start="393:9" pos:end="393:17">case <expr pos:start="393:14" pos:end="393:16"><literal type="number" pos:start="393:14" pos:end="393:16">0x3</literal></expr>:</case> <comment type="block" pos:start="393:19" pos:end="393:27">/* lsr */</comment>

            <if_stmt pos:start="395:13" pos:end="405:13"><if pos:start="395:13" pos:end="399:13">if <condition pos:start="395:16" pos:end="395:33">(<expr pos:start="395:17" pos:end="395:32"><name pos:start="395:17" pos:end="395:32"><name pos:start="395:17" pos:end="395:17">s</name><operator pos:start="395:18" pos:end="395:19">-&gt;</operator><name pos:start="395:20" pos:end="395:32">condexec_mask</name></name></expr>)</condition> <block pos:start="395:35" pos:end="399:13">{<block_content pos:start="397:17" pos:end="397:48">

                <expr_stmt pos:start="397:17" pos:end="397:48"><expr pos:start="397:17" pos:end="397:47"><call pos:start="397:17" pos:end="397:47"><name pos:start="397:17" pos:end="397:30">gen_helper_shr</name><argument_list pos:start="397:31" pos:end="397:47">(<argument pos:start="397:32" pos:end="397:35"><expr pos:start="397:32" pos:end="397:35"><name pos:start="397:32" pos:end="397:35">tmp2</name></expr></argument>, <argument pos:start="397:38" pos:end="397:41"><expr pos:start="397:38" pos:end="397:41"><name pos:start="397:38" pos:end="397:41">tmp2</name></expr></argument>, <argument pos:start="397:44" pos:end="397:46"><expr pos:start="397:44" pos:end="397:46"><name pos:start="397:44" pos:end="397:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="399:15" pos:end="405:13">else <block pos:start="399:20" pos:end="405:13">{<block_content pos:start="401:17" pos:end="403:35">

                <expr_stmt pos:start="401:17" pos:end="401:51"><expr pos:start="401:17" pos:end="401:50"><call pos:start="401:17" pos:end="401:50"><name pos:start="401:17" pos:end="401:33">gen_helper_shr_cc</name><argument_list pos:start="401:34" pos:end="401:50">(<argument pos:start="401:35" pos:end="401:38"><expr pos:start="401:35" pos:end="401:38"><name pos:start="401:35" pos:end="401:38">tmp2</name></expr></argument>, <argument pos:start="401:41" pos:end="401:44"><expr pos:start="401:41" pos:end="401:44"><name pos:start="401:41" pos:end="401:44">tmp2</name></expr></argument>, <argument pos:start="401:47" pos:end="401:49"><expr pos:start="401:47" pos:end="401:49"><name pos:start="401:47" pos:end="401:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="403:17" pos:end="403:35"><expr pos:start="403:17" pos:end="403:34"><call pos:start="403:17" pos:end="403:34"><name pos:start="403:17" pos:end="403:28">gen_logic_CC</name><argument_list pos:start="403:29" pos:end="403:34">(<argument pos:start="403:30" pos:end="403:33"><expr pos:start="403:30" pos:end="403:33"><name pos:start="403:30" pos:end="403:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="407:13" pos:end="407:18">break;</break>

        <case pos:start="409:9" pos:end="409:17">case <expr pos:start="409:14" pos:end="409:16"><literal type="number" pos:start="409:14" pos:end="409:16">0x4</literal></expr>:</case> <comment type="block" pos:start="409:19" pos:end="409:27">/* asr */</comment>

            <if_stmt pos:start="411:13" pos:end="421:13"><if pos:start="411:13" pos:end="415:13">if <condition pos:start="411:16" pos:end="411:33">(<expr pos:start="411:17" pos:end="411:32"><name pos:start="411:17" pos:end="411:32"><name pos:start="411:17" pos:end="411:17">s</name><operator pos:start="411:18" pos:end="411:19">-&gt;</operator><name pos:start="411:20" pos:end="411:32">condexec_mask</name></name></expr>)</condition> <block pos:start="411:35" pos:end="415:13">{<block_content pos:start="413:17" pos:end="413:48">

                <expr_stmt pos:start="413:17" pos:end="413:48"><expr pos:start="413:17" pos:end="413:47"><call pos:start="413:17" pos:end="413:47"><name pos:start="413:17" pos:end="413:30">gen_helper_sar</name><argument_list pos:start="413:31" pos:end="413:47">(<argument pos:start="413:32" pos:end="413:35"><expr pos:start="413:32" pos:end="413:35"><name pos:start="413:32" pos:end="413:35">tmp2</name></expr></argument>, <argument pos:start="413:38" pos:end="413:41"><expr pos:start="413:38" pos:end="413:41"><name pos:start="413:38" pos:end="413:41">tmp2</name></expr></argument>, <argument pos:start="413:44" pos:end="413:46"><expr pos:start="413:44" pos:end="413:46"><name pos:start="413:44" pos:end="413:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="415:15" pos:end="421:13">else <block pos:start="415:20" pos:end="421:13">{<block_content pos:start="417:17" pos:end="419:35">

                <expr_stmt pos:start="417:17" pos:end="417:51"><expr pos:start="417:17" pos:end="417:50"><call pos:start="417:17" pos:end="417:50"><name pos:start="417:17" pos:end="417:33">gen_helper_sar_cc</name><argument_list pos:start="417:34" pos:end="417:50">(<argument pos:start="417:35" pos:end="417:38"><expr pos:start="417:35" pos:end="417:38"><name pos:start="417:35" pos:end="417:38">tmp2</name></expr></argument>, <argument pos:start="417:41" pos:end="417:44"><expr pos:start="417:41" pos:end="417:44"><name pos:start="417:41" pos:end="417:44">tmp2</name></expr></argument>, <argument pos:start="417:47" pos:end="417:49"><expr pos:start="417:47" pos:end="417:49"><name pos:start="417:47" pos:end="417:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="419:17" pos:end="419:35"><expr pos:start="419:17" pos:end="419:34"><call pos:start="419:17" pos:end="419:34"><name pos:start="419:17" pos:end="419:28">gen_logic_CC</name><argument_list pos:start="419:29" pos:end="419:34">(<argument pos:start="419:30" pos:end="419:33"><expr pos:start="419:30" pos:end="419:33"><name pos:start="419:30" pos:end="419:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="423:13" pos:end="423:18">break;</break>

        <case pos:start="425:9" pos:end="425:17">case <expr pos:start="425:14" pos:end="425:16"><literal type="number" pos:start="425:14" pos:end="425:16">0x5</literal></expr>:</case> <comment type="block" pos:start="425:19" pos:end="425:27">/* adc */</comment>

            <if_stmt pos:start="427:13" pos:end="433:50"><if pos:start="427:13" pos:end="429:35">if <condition pos:start="427:16" pos:end="427:33">(<expr pos:start="427:17" pos:end="427:32"><name pos:start="427:17" pos:end="427:32"><name pos:start="427:17" pos:end="427:17">s</name><operator pos:start="427:18" pos:end="427:19">-&gt;</operator><name pos:start="427:20" pos:end="427:32">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="429:17" pos:end="429:35"><block_content pos:start="429:17" pos:end="429:35">

                <expr_stmt pos:start="429:17" pos:end="429:35"><expr pos:start="429:17" pos:end="429:34"><call pos:start="429:17" pos:end="429:34"><name pos:start="429:17" pos:end="429:23">gen_adc</name><argument_list pos:start="429:24" pos:end="429:34">(<argument pos:start="429:25" pos:end="429:27"><expr pos:start="429:25" pos:end="429:27"><name pos:start="429:25" pos:end="429:27">tmp</name></expr></argument>, <argument pos:start="429:30" pos:end="429:33"><expr pos:start="429:30" pos:end="429:33"><name pos:start="429:30" pos:end="429:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="431:13" pos:end="433:50">else<block type="pseudo" pos:start="433:17" pos:end="433:50"><block_content pos:start="433:17" pos:end="433:50">

                <expr_stmt pos:start="433:17" pos:end="433:50"><expr pos:start="433:17" pos:end="433:49"><call pos:start="433:17" pos:end="433:49"><name pos:start="433:17" pos:end="433:33">gen_helper_adc_cc</name><argument_list pos:start="433:34" pos:end="433:49">(<argument pos:start="433:35" pos:end="433:37"><expr pos:start="433:35" pos:end="433:37"><name pos:start="433:35" pos:end="433:37">tmp</name></expr></argument>, <argument pos:start="433:40" pos:end="433:42"><expr pos:start="433:40" pos:end="433:42"><name pos:start="433:40" pos:end="433:42">tmp</name></expr></argument>, <argument pos:start="433:45" pos:end="433:48"><expr pos:start="433:45" pos:end="433:48"><name pos:start="433:45" pos:end="433:48">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="435:13" pos:end="435:18">break;</break>

        <case pos:start="437:9" pos:end="437:17">case <expr pos:start="437:14" pos:end="437:16"><literal type="number" pos:start="437:14" pos:end="437:16">0x6</literal></expr>:</case> <comment type="block" pos:start="437:19" pos:end="437:27">/* sbc */</comment>

            <if_stmt pos:start="439:13" pos:end="445:50"><if pos:start="439:13" pos:end="441:46">if <condition pos:start="439:16" pos:end="439:33">(<expr pos:start="439:17" pos:end="439:32"><name pos:start="439:17" pos:end="439:32"><name pos:start="439:17" pos:end="439:17">s</name><operator pos:start="439:18" pos:end="439:19">-&gt;</operator><name pos:start="439:20" pos:end="439:32">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="441:17" pos:end="441:46"><block_content pos:start="441:17" pos:end="441:46">

                <expr_stmt pos:start="441:17" pos:end="441:46"><expr pos:start="441:17" pos:end="441:45"><call pos:start="441:17" pos:end="441:45"><name pos:start="441:17" pos:end="441:29">gen_sub_carry</name><argument_list pos:start="441:30" pos:end="441:45">(<argument pos:start="441:31" pos:end="441:33"><expr pos:start="441:31" pos:end="441:33"><name pos:start="441:31" pos:end="441:33">tmp</name></expr></argument>, <argument pos:start="441:36" pos:end="441:38"><expr pos:start="441:36" pos:end="441:38"><name pos:start="441:36" pos:end="441:38">tmp</name></expr></argument>, <argument pos:start="441:41" pos:end="441:44"><expr pos:start="441:41" pos:end="441:44"><name pos:start="441:41" pos:end="441:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="443:13" pos:end="445:50">else<block type="pseudo" pos:start="445:17" pos:end="445:50"><block_content pos:start="445:17" pos:end="445:50">

                <expr_stmt pos:start="445:17" pos:end="445:50"><expr pos:start="445:17" pos:end="445:49"><call pos:start="445:17" pos:end="445:49"><name pos:start="445:17" pos:end="445:33">gen_helper_sbc_cc</name><argument_list pos:start="445:34" pos:end="445:49">(<argument pos:start="445:35" pos:end="445:37"><expr pos:start="445:35" pos:end="445:37"><name pos:start="445:35" pos:end="445:37">tmp</name></expr></argument>, <argument pos:start="445:40" pos:end="445:42"><expr pos:start="445:40" pos:end="445:42"><name pos:start="445:40" pos:end="445:42">tmp</name></expr></argument>, <argument pos:start="445:45" pos:end="445:48"><expr pos:start="445:45" pos:end="445:48"><name pos:start="445:45" pos:end="445:48">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="447:13" pos:end="447:18">break;</break>

        <case pos:start="449:9" pos:end="449:17">case <expr pos:start="449:14" pos:end="449:16"><literal type="number" pos:start="449:14" pos:end="449:16">0x7</literal></expr>:</case> <comment type="block" pos:start="449:19" pos:end="449:27">/* ror */</comment>

            <if_stmt pos:start="451:13" pos:end="463:13"><if pos:start="451:13" pos:end="457:13">if <condition pos:start="451:16" pos:end="451:33">(<expr pos:start="451:17" pos:end="451:32"><name pos:start="451:17" pos:end="451:32"><name pos:start="451:17" pos:end="451:17">s</name><operator pos:start="451:18" pos:end="451:19">-&gt;</operator><name pos:start="451:20" pos:end="451:32">condexec_mask</name></name></expr>)</condition> <block pos:start="451:35" pos:end="457:13">{<block_content pos:start="453:17" pos:end="455:50">

                <expr_stmt pos:start="453:17" pos:end="453:49"><expr pos:start="453:17" pos:end="453:48"><call pos:start="453:17" pos:end="453:48"><name pos:start="453:17" pos:end="453:32">tcg_gen_andi_i32</name><argument_list pos:start="453:33" pos:end="453:48">(<argument pos:start="453:34" pos:end="453:36"><expr pos:start="453:34" pos:end="453:36"><name pos:start="453:34" pos:end="453:36">tmp</name></expr></argument>, <argument pos:start="453:39" pos:end="453:41"><expr pos:start="453:39" pos:end="453:41"><name pos:start="453:39" pos:end="453:41">tmp</name></expr></argument>, <argument pos:start="453:44" pos:end="453:47"><expr pos:start="453:44" pos:end="453:47"><literal type="number" pos:start="453:44" pos:end="453:47">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="455:17" pos:end="455:50"><expr pos:start="455:17" pos:end="455:49"><call pos:start="455:17" pos:end="455:49"><name pos:start="455:17" pos:end="455:32">tcg_gen_rotr_i32</name><argument_list pos:start="455:33" pos:end="455:49">(<argument pos:start="455:34" pos:end="455:37"><expr pos:start="455:34" pos:end="455:37"><name pos:start="455:34" pos:end="455:37">tmp2</name></expr></argument>, <argument pos:start="455:40" pos:end="455:43"><expr pos:start="455:40" pos:end="455:43"><name pos:start="455:40" pos:end="455:43">tmp2</name></expr></argument>, <argument pos:start="455:46" pos:end="455:48"><expr pos:start="455:46" pos:end="455:48"><name pos:start="455:46" pos:end="455:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="457:15" pos:end="463:13">else <block pos:start="457:20" pos:end="463:13">{<block_content pos:start="459:17" pos:end="461:35">

                <expr_stmt pos:start="459:17" pos:end="459:51"><expr pos:start="459:17" pos:end="459:50"><call pos:start="459:17" pos:end="459:50"><name pos:start="459:17" pos:end="459:33">gen_helper_ror_cc</name><argument_list pos:start="459:34" pos:end="459:50">(<argument pos:start="459:35" pos:end="459:38"><expr pos:start="459:35" pos:end="459:38"><name pos:start="459:35" pos:end="459:38">tmp2</name></expr></argument>, <argument pos:start="459:41" pos:end="459:44"><expr pos:start="459:41" pos:end="459:44"><name pos:start="459:41" pos:end="459:44">tmp2</name></expr></argument>, <argument pos:start="459:47" pos:end="459:49"><expr pos:start="459:47" pos:end="459:49"><name pos:start="459:47" pos:end="459:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="461:17" pos:end="461:35"><expr pos:start="461:17" pos:end="461:34"><call pos:start="461:17" pos:end="461:34"><name pos:start="461:17" pos:end="461:28">gen_logic_CC</name><argument_list pos:start="461:29" pos:end="461:34">(<argument pos:start="461:30" pos:end="461:33"><expr pos:start="461:30" pos:end="461:33"><name pos:start="461:30" pos:end="461:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="465:13" pos:end="465:18">break;</break>

        <case pos:start="467:9" pos:end="467:17">case <expr pos:start="467:14" pos:end="467:16"><literal type="number" pos:start="467:14" pos:end="467:16">0x8</literal></expr>:</case> <comment type="block" pos:start="467:19" pos:end="467:27">/* tst */</comment>

            <expr_stmt pos:start="469:13" pos:end="469:44"><expr pos:start="469:13" pos:end="469:43"><call pos:start="469:13" pos:end="469:43"><name pos:start="469:13" pos:end="469:27">tcg_gen_and_i32</name><argument_list pos:start="469:28" pos:end="469:43">(<argument pos:start="469:29" pos:end="469:31"><expr pos:start="469:29" pos:end="469:31"><name pos:start="469:29" pos:end="469:31">tmp</name></expr></argument>, <argument pos:start="469:34" pos:end="469:36"><expr pos:start="469:34" pos:end="469:36"><name pos:start="469:34" pos:end="469:36">tmp</name></expr></argument>, <argument pos:start="469:39" pos:end="469:42"><expr pos:start="469:39" pos:end="469:42"><name pos:start="469:39" pos:end="469:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="471:13" pos:end="471:30"><expr pos:start="471:13" pos:end="471:29"><call pos:start="471:13" pos:end="471:29"><name pos:start="471:13" pos:end="471:24">gen_logic_CC</name><argument_list pos:start="471:25" pos:end="471:29">(<argument pos:start="471:26" pos:end="471:28"><expr pos:start="471:26" pos:end="471:28"><name pos:start="471:26" pos:end="471:28">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="473:13" pos:end="473:20"><expr pos:start="473:13" pos:end="473:19"><name pos:start="473:13" pos:end="473:14">rd</name> <operator pos:start="473:16" pos:end="473:16">=</operator> <literal type="number" pos:start="473:18" pos:end="473:19">16</literal></expr>;</expr_stmt>

            <break pos:start="475:13" pos:end="475:18">break;</break>

        <case pos:start="477:9" pos:end="477:17">case <expr pos:start="477:14" pos:end="477:16"><literal type="number" pos:start="477:14" pos:end="477:16">0x9</literal></expr>:</case> <comment type="block" pos:start="477:19" pos:end="477:27">/* neg */</comment>

            <if_stmt pos:start="479:13" pos:end="485:50"><if pos:start="479:13" pos:end="481:43">if <condition pos:start="479:16" pos:end="479:33">(<expr pos:start="479:17" pos:end="479:32"><name pos:start="479:17" pos:end="479:32"><name pos:start="479:17" pos:end="479:17">s</name><operator pos:start="479:18" pos:end="479:19">-&gt;</operator><name pos:start="479:20" pos:end="479:32">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="481:17" pos:end="481:43"><block_content pos:start="481:17" pos:end="481:43">

                <expr_stmt pos:start="481:17" pos:end="481:43"><expr pos:start="481:17" pos:end="481:42"><call pos:start="481:17" pos:end="481:42"><name pos:start="481:17" pos:end="481:31">tcg_gen_neg_i32</name><argument_list pos:start="481:32" pos:end="481:42">(<argument pos:start="481:33" pos:end="481:35"><expr pos:start="481:33" pos:end="481:35"><name pos:start="481:33" pos:end="481:35">tmp</name></expr></argument>, <argument pos:start="481:38" pos:end="481:41"><expr pos:start="481:38" pos:end="481:41"><name pos:start="481:38" pos:end="481:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="483:13" pos:end="485:50">else<block type="pseudo" pos:start="485:17" pos:end="485:50"><block_content pos:start="485:17" pos:end="485:50">

                <expr_stmt pos:start="485:17" pos:end="485:50"><expr pos:start="485:17" pos:end="485:49"><call pos:start="485:17" pos:end="485:49"><name pos:start="485:17" pos:end="485:33">gen_helper_sub_cc</name><argument_list pos:start="485:34" pos:end="485:49">(<argument pos:start="485:35" pos:end="485:37"><expr pos:start="485:35" pos:end="485:37"><name pos:start="485:35" pos:end="485:37">tmp</name></expr></argument>, <argument pos:start="485:40" pos:end="485:42"><expr pos:start="485:40" pos:end="485:42"><name pos:start="485:40" pos:end="485:42">tmp</name></expr></argument>, <argument pos:start="485:45" pos:end="485:48"><expr pos:start="485:45" pos:end="485:48"><name pos:start="485:45" pos:end="485:48">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="487:13" pos:end="487:18">break;</break>

        <case pos:start="489:9" pos:end="489:17">case <expr pos:start="489:14" pos:end="489:16"><literal type="number" pos:start="489:14" pos:end="489:16">0xa</literal></expr>:</case> <comment type="block" pos:start="489:19" pos:end="489:27">/* cmp */</comment>

            <expr_stmt pos:start="491:13" pos:end="491:46"><expr pos:start="491:13" pos:end="491:45"><call pos:start="491:13" pos:end="491:45"><name pos:start="491:13" pos:end="491:29">gen_helper_sub_cc</name><argument_list pos:start="491:30" pos:end="491:45">(<argument pos:start="491:31" pos:end="491:33"><expr pos:start="491:31" pos:end="491:33"><name pos:start="491:31" pos:end="491:33">tmp</name></expr></argument>, <argument pos:start="491:36" pos:end="491:38"><expr pos:start="491:36" pos:end="491:38"><name pos:start="491:36" pos:end="491:38">tmp</name></expr></argument>, <argument pos:start="491:41" pos:end="491:44"><expr pos:start="491:41" pos:end="491:44"><name pos:start="491:41" pos:end="491:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="493:13" pos:end="493:20"><expr pos:start="493:13" pos:end="493:19"><name pos:start="493:13" pos:end="493:14">rd</name> <operator pos:start="493:16" pos:end="493:16">=</operator> <literal type="number" pos:start="493:18" pos:end="493:19">16</literal></expr>;</expr_stmt>

            <break pos:start="495:13" pos:end="495:18">break;</break>

        <case pos:start="497:9" pos:end="497:17">case <expr pos:start="497:14" pos:end="497:16"><literal type="number" pos:start="497:14" pos:end="497:16">0xb</literal></expr>:</case> <comment type="block" pos:start="497:19" pos:end="497:27">/* cmn */</comment>

            <expr_stmt pos:start="499:13" pos:end="499:46"><expr pos:start="499:13" pos:end="499:45"><call pos:start="499:13" pos:end="499:45"><name pos:start="499:13" pos:end="499:29">gen_helper_add_cc</name><argument_list pos:start="499:30" pos:end="499:45">(<argument pos:start="499:31" pos:end="499:33"><expr pos:start="499:31" pos:end="499:33"><name pos:start="499:31" pos:end="499:33">tmp</name></expr></argument>, <argument pos:start="499:36" pos:end="499:38"><expr pos:start="499:36" pos:end="499:38"><name pos:start="499:36" pos:end="499:38">tmp</name></expr></argument>, <argument pos:start="499:41" pos:end="499:44"><expr pos:start="499:41" pos:end="499:44"><name pos:start="499:41" pos:end="499:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:20"><expr pos:start="501:13" pos:end="501:19"><name pos:start="501:13" pos:end="501:14">rd</name> <operator pos:start="501:16" pos:end="501:16">=</operator> <literal type="number" pos:start="501:18" pos:end="501:19">16</literal></expr>;</expr_stmt>

            <break pos:start="503:13" pos:end="503:18">break;</break>

        <case pos:start="505:9" pos:end="505:17">case <expr pos:start="505:14" pos:end="505:16"><literal type="number" pos:start="505:14" pos:end="505:16">0xc</literal></expr>:</case> <comment type="block" pos:start="505:19" pos:end="505:27">/* orr */</comment>

            <expr_stmt pos:start="507:13" pos:end="507:43"><expr pos:start="507:13" pos:end="507:42"><call pos:start="507:13" pos:end="507:42"><name pos:start="507:13" pos:end="507:26">tcg_gen_or_i32</name><argument_list pos:start="507:27" pos:end="507:42">(<argument pos:start="507:28" pos:end="507:30"><expr pos:start="507:28" pos:end="507:30"><name pos:start="507:28" pos:end="507:30">tmp</name></expr></argument>, <argument pos:start="507:33" pos:end="507:35"><expr pos:start="507:33" pos:end="507:35"><name pos:start="507:33" pos:end="507:35">tmp</name></expr></argument>, <argument pos:start="507:38" pos:end="507:41"><expr pos:start="507:38" pos:end="507:41"><name pos:start="507:38" pos:end="507:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="509:13" pos:end="511:34"><if pos:start="509:13" pos:end="511:34">if <condition pos:start="509:16" pos:end="509:34">(<expr pos:start="509:17" pos:end="509:33"><operator pos:start="509:17" pos:end="509:17">!</operator><name pos:start="509:18" pos:end="509:33"><name pos:start="509:18" pos:end="509:18">s</name><operator pos:start="509:19" pos:end="509:20">-&gt;</operator><name pos:start="509:21" pos:end="509:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="511:17" pos:end="511:34"><block_content pos:start="511:17" pos:end="511:34">

                <expr_stmt pos:start="511:17" pos:end="511:34"><expr pos:start="511:17" pos:end="511:33"><call pos:start="511:17" pos:end="511:33"><name pos:start="511:17" pos:end="511:28">gen_logic_CC</name><argument_list pos:start="511:29" pos:end="511:33">(<argument pos:start="511:30" pos:end="511:32"><expr pos:start="511:30" pos:end="511:32"><name pos:start="511:30" pos:end="511:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="513:13" pos:end="513:18">break;</break>

        <case pos:start="515:9" pos:end="515:17">case <expr pos:start="515:14" pos:end="515:16"><literal type="number" pos:start="515:14" pos:end="515:16">0xd</literal></expr>:</case> <comment type="block" pos:start="515:19" pos:end="515:27">/* mul */</comment>

            <expr_stmt pos:start="517:13" pos:end="517:44"><expr pos:start="517:13" pos:end="517:43"><call pos:start="517:13" pos:end="517:43"><name pos:start="517:13" pos:end="517:27">tcg_gen_mul_i32</name><argument_list pos:start="517:28" pos:end="517:43">(<argument pos:start="517:29" pos:end="517:31"><expr pos:start="517:29" pos:end="517:31"><name pos:start="517:29" pos:end="517:31">tmp</name></expr></argument>, <argument pos:start="517:34" pos:end="517:36"><expr pos:start="517:34" pos:end="517:36"><name pos:start="517:34" pos:end="517:36">tmp</name></expr></argument>, <argument pos:start="517:39" pos:end="517:42"><expr pos:start="517:39" pos:end="517:42"><name pos:start="517:39" pos:end="517:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="519:13" pos:end="521:34"><if pos:start="519:13" pos:end="521:34">if <condition pos:start="519:16" pos:end="519:34">(<expr pos:start="519:17" pos:end="519:33"><operator pos:start="519:17" pos:end="519:17">!</operator><name pos:start="519:18" pos:end="519:33"><name pos:start="519:18" pos:end="519:18">s</name><operator pos:start="519:19" pos:end="519:20">-&gt;</operator><name pos:start="519:21" pos:end="519:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="521:17" pos:end="521:34"><block_content pos:start="521:17" pos:end="521:34">

                <expr_stmt pos:start="521:17" pos:end="521:34"><expr pos:start="521:17" pos:end="521:33"><call pos:start="521:17" pos:end="521:33"><name pos:start="521:17" pos:end="521:28">gen_logic_CC</name><argument_list pos:start="521:29" pos:end="521:33">(<argument pos:start="521:30" pos:end="521:32"><expr pos:start="521:30" pos:end="521:32"><name pos:start="521:30" pos:end="521:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="523:13" pos:end="523:18">break;</break>

        <case pos:start="525:9" pos:end="525:17">case <expr pos:start="525:14" pos:end="525:16"><literal type="number" pos:start="525:14" pos:end="525:16">0xe</literal></expr>:</case> <comment type="block" pos:start="525:19" pos:end="525:27">/* bic */</comment>

            <expr_stmt pos:start="527:13" pos:end="527:45"><expr pos:start="527:13" pos:end="527:44"><call pos:start="527:13" pos:end="527:44"><name pos:start="527:13" pos:end="527:28">tcg_gen_andc_i32</name><argument_list pos:start="527:29" pos:end="527:44">(<argument pos:start="527:30" pos:end="527:32"><expr pos:start="527:30" pos:end="527:32"><name pos:start="527:30" pos:end="527:32">tmp</name></expr></argument>, <argument pos:start="527:35" pos:end="527:37"><expr pos:start="527:35" pos:end="527:37"><name pos:start="527:35" pos:end="527:37">tmp</name></expr></argument>, <argument pos:start="527:40" pos:end="527:43"><expr pos:start="527:40" pos:end="527:43"><name pos:start="527:40" pos:end="527:43">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="529:13" pos:end="531:34"><if pos:start="529:13" pos:end="531:34">if <condition pos:start="529:16" pos:end="529:34">(<expr pos:start="529:17" pos:end="529:33"><operator pos:start="529:17" pos:end="529:17">!</operator><name pos:start="529:18" pos:end="529:33"><name pos:start="529:18" pos:end="529:18">s</name><operator pos:start="529:19" pos:end="529:20">-&gt;</operator><name pos:start="529:21" pos:end="529:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="531:17" pos:end="531:34"><block_content pos:start="531:17" pos:end="531:34">

                <expr_stmt pos:start="531:17" pos:end="531:34"><expr pos:start="531:17" pos:end="531:33"><call pos:start="531:17" pos:end="531:33"><name pos:start="531:17" pos:end="531:28">gen_logic_CC</name><argument_list pos:start="531:29" pos:end="531:33">(<argument pos:start="531:30" pos:end="531:32"><expr pos:start="531:30" pos:end="531:32"><name pos:start="531:30" pos:end="531:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="533:13" pos:end="533:18">break;</break>

        <case pos:start="535:9" pos:end="535:17">case <expr pos:start="535:14" pos:end="535:16"><literal type="number" pos:start="535:14" pos:end="535:16">0xf</literal></expr>:</case> <comment type="block" pos:start="535:19" pos:end="535:27">/* mvn */</comment>

            <expr_stmt pos:start="537:13" pos:end="537:40"><expr pos:start="537:13" pos:end="537:39"><call pos:start="537:13" pos:end="537:39"><name pos:start="537:13" pos:end="537:27">tcg_gen_not_i32</name><argument_list pos:start="537:28" pos:end="537:39">(<argument pos:start="537:29" pos:end="537:32"><expr pos:start="537:29" pos:end="537:32"><name pos:start="537:29" pos:end="537:32">tmp2</name></expr></argument>, <argument pos:start="537:35" pos:end="537:38"><expr pos:start="537:35" pos:end="537:38"><name pos:start="537:35" pos:end="537:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="539:13" pos:end="541:35"><if pos:start="539:13" pos:end="541:35">if <condition pos:start="539:16" pos:end="539:34">(<expr pos:start="539:17" pos:end="539:33"><operator pos:start="539:17" pos:end="539:17">!</operator><name pos:start="539:18" pos:end="539:33"><name pos:start="539:18" pos:end="539:18">s</name><operator pos:start="539:19" pos:end="539:20">-&gt;</operator><name pos:start="539:21" pos:end="539:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="541:17" pos:end="541:35"><block_content pos:start="541:17" pos:end="541:35">

                <expr_stmt pos:start="541:17" pos:end="541:35"><expr pos:start="541:17" pos:end="541:34"><call pos:start="541:17" pos:end="541:34"><name pos:start="541:17" pos:end="541:28">gen_logic_CC</name><argument_list pos:start="541:29" pos:end="541:34">(<argument pos:start="541:30" pos:end="541:33"><expr pos:start="541:30" pos:end="541:33"><name pos:start="541:30" pos:end="541:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="543:13" pos:end="543:20"><expr pos:start="543:13" pos:end="543:19"><name pos:start="543:13" pos:end="543:15">val</name> <operator pos:start="543:17" pos:end="543:17">=</operator> <literal type="number" pos:start="543:19" pos:end="543:19">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="545:13" pos:end="545:20"><expr pos:start="545:13" pos:end="545:19"><name pos:start="545:13" pos:end="545:14">rm</name> <operator pos:start="545:16" pos:end="545:16">=</operator> <name pos:start="545:18" pos:end="545:19">rd</name></expr>;</expr_stmt>

            <break pos:start="547:13" pos:end="547:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="551:9" pos:end="575:9"><if pos:start="551:9" pos:end="569:9">if <condition pos:start="551:12" pos:end="551:21">(<expr pos:start="551:13" pos:end="551:20"><name pos:start="551:13" pos:end="551:14">rd</name> <operator pos:start="551:16" pos:end="551:17">!=</operator> <literal type="number" pos:start="551:19" pos:end="551:20">16</literal></expr>)</condition> <block pos:start="551:23" pos:end="569:9">{<block_content pos:start="553:13" pos:end="567:13">

            <if_stmt pos:start="553:13" pos:end="567:13"><if pos:start="553:13" pos:end="561:13">if <condition pos:start="553:16" pos:end="553:20">(<expr pos:start="553:17" pos:end="553:19"><name pos:start="553:17" pos:end="553:19">val</name></expr>)</condition> <block pos:start="553:22" pos:end="561:13">{<block_content pos:start="555:17" pos:end="559:34">

                <expr_stmt pos:start="555:17" pos:end="555:39"><expr pos:start="555:17" pos:end="555:38"><call pos:start="555:17" pos:end="555:38"><name pos:start="555:17" pos:end="555:25">store_reg</name><argument_list pos:start="555:26" pos:end="555:38">(<argument pos:start="555:27" pos:end="555:27"><expr pos:start="555:27" pos:end="555:27"><name pos:start="555:27" pos:end="555:27">s</name></expr></argument>, <argument pos:start="555:30" pos:end="555:31"><expr pos:start="555:30" pos:end="555:31"><name pos:start="555:30" pos:end="555:31">rm</name></expr></argument>, <argument pos:start="555:34" pos:end="555:37"><expr pos:start="555:34" pos:end="555:37"><name pos:start="555:34" pos:end="555:37">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="557:17" pos:end="559:34"><if pos:start="557:17" pos:end="559:34">if <condition pos:start="557:20" pos:end="557:30">(<expr pos:start="557:21" pos:end="557:29"><name pos:start="557:21" pos:end="557:22">op</name> <operator pos:start="557:24" pos:end="557:25">!=</operator> <literal type="number" pos:start="557:27" pos:end="557:29">0xf</literal></expr>)</condition><block type="pseudo" pos:start="559:21" pos:end="559:34"><block_content pos:start="559:21" pos:end="559:34">

                    <expr_stmt pos:start="559:21" pos:end="559:34"><expr pos:start="559:21" pos:end="559:33"><call pos:start="559:21" pos:end="559:33"><name pos:start="559:21" pos:end="559:28">dead_tmp</name><argument_list pos:start="559:29" pos:end="559:33">(<argument pos:start="559:30" pos:end="559:32"><expr pos:start="559:30" pos:end="559:32"><name pos:start="559:30" pos:end="559:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="561:15" pos:end="567:13">else <block pos:start="561:20" pos:end="567:13">{<block_content pos:start="563:17" pos:end="565:31">

                <expr_stmt pos:start="563:17" pos:end="563:38"><expr pos:start="563:17" pos:end="563:37"><call pos:start="563:17" pos:end="563:37"><name pos:start="563:17" pos:end="563:25">store_reg</name><argument_list pos:start="563:26" pos:end="563:37">(<argument pos:start="563:27" pos:end="563:27"><expr pos:start="563:27" pos:end="563:27"><name pos:start="563:27" pos:end="563:27">s</name></expr></argument>, <argument pos:start="563:30" pos:end="563:31"><expr pos:start="563:30" pos:end="563:31"><name pos:start="563:30" pos:end="563:31">rd</name></expr></argument>, <argument pos:start="563:34" pos:end="563:36"><expr pos:start="563:34" pos:end="563:36"><name pos:start="563:34" pos:end="563:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="565:17" pos:end="565:31"><expr pos:start="565:17" pos:end="565:30"><call pos:start="565:17" pos:end="565:30"><name pos:start="565:17" pos:end="565:24">dead_tmp</name><argument_list pos:start="565:25" pos:end="565:30">(<argument pos:start="565:26" pos:end="565:29"><expr pos:start="565:26" pos:end="565:29"><name pos:start="565:26" pos:end="565:29">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="569:11" pos:end="575:9">else <block pos:start="569:16" pos:end="575:9">{<block_content pos:start="571:13" pos:end="573:27">

            <expr_stmt pos:start="571:13" pos:end="571:26"><expr pos:start="571:13" pos:end="571:25"><call pos:start="571:13" pos:end="571:25"><name pos:start="571:13" pos:end="571:20">dead_tmp</name><argument_list pos:start="571:21" pos:end="571:25">(<argument pos:start="571:22" pos:end="571:24"><expr pos:start="571:22" pos:end="571:24"><name pos:start="571:22" pos:end="571:24">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="573:13" pos:end="573:27"><expr pos:start="573:13" pos:end="573:26"><call pos:start="573:13" pos:end="573:26"><name pos:start="573:13" pos:end="573:20">dead_tmp</name><argument_list pos:start="573:21" pos:end="573:26">(<argument pos:start="573:22" pos:end="573:25"><expr pos:start="573:22" pos:end="573:25"><name pos:start="573:22" pos:end="573:25">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="577:9" pos:end="577:14">break;</break>



    <case pos:start="581:5" pos:end="581:11">case <expr pos:start="581:10" pos:end="581:10"><literal type="number" pos:start="581:10" pos:end="581:10">5</literal></expr>:</case>

        <comment type="block" pos:start="583:9" pos:end="583:42">/* load/store register offset.  */</comment>

        <expr_stmt pos:start="585:9" pos:end="585:22"><expr pos:start="585:9" pos:end="585:21"><name pos:start="585:9" pos:end="585:10">rd</name> <operator pos:start="585:12" pos:end="585:12">=</operator> <name pos:start="585:14" pos:end="585:17">insn</name> <operator pos:start="585:19" pos:end="585:19">&amp;</operator> <literal type="number" pos:start="585:21" pos:end="585:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="587:9" pos:end="587:29"><expr pos:start="587:9" pos:end="587:28"><name pos:start="587:9" pos:end="587:10">rn</name> <operator pos:start="587:12" pos:end="587:12">=</operator> <operator pos:start="587:14" pos:end="587:14">(</operator><name pos:start="587:15" pos:end="587:18">insn</name> <operator pos:start="587:20" pos:end="587:21">&gt;&gt;</operator> <literal type="number" pos:start="587:23" pos:end="587:23">3</literal><operator pos:start="587:24" pos:end="587:24">)</operator> <operator pos:start="587:26" pos:end="587:26">&amp;</operator> <literal type="number" pos:start="587:28" pos:end="587:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="589:9" pos:end="589:29"><expr pos:start="589:9" pos:end="589:28"><name pos:start="589:9" pos:end="589:10">rm</name> <operator pos:start="589:12" pos:end="589:12">=</operator> <operator pos:start="589:14" pos:end="589:14">(</operator><name pos:start="589:15" pos:end="589:18">insn</name> <operator pos:start="589:20" pos:end="589:21">&gt;&gt;</operator> <literal type="number" pos:start="589:23" pos:end="589:23">6</literal><operator pos:start="589:24" pos:end="589:24">)</operator> <operator pos:start="589:26" pos:end="589:26">&amp;</operator> <literal type="number" pos:start="589:28" pos:end="589:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="591:9" pos:end="591:29"><expr pos:start="591:9" pos:end="591:28"><name pos:start="591:9" pos:end="591:10">op</name> <operator pos:start="591:12" pos:end="591:12">=</operator> <operator pos:start="591:14" pos:end="591:14">(</operator><name pos:start="591:15" pos:end="591:18">insn</name> <operator pos:start="591:20" pos:end="591:21">&gt;&gt;</operator> <literal type="number" pos:start="591:23" pos:end="591:23">9</literal><operator pos:start="591:24" pos:end="591:24">)</operator> <operator pos:start="591:26" pos:end="591:26">&amp;</operator> <literal type="number" pos:start="591:28" pos:end="591:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="593:9" pos:end="593:31"><expr pos:start="593:9" pos:end="593:30"><name pos:start="593:9" pos:end="593:12">addr</name> <operator pos:start="593:14" pos:end="593:14">=</operator> <call pos:start="593:16" pos:end="593:30"><name pos:start="593:16" pos:end="593:23">load_reg</name><argument_list pos:start="593:24" pos:end="593:30">(<argument pos:start="593:25" pos:end="593:25"><expr pos:start="593:25" pos:end="593:25"><name pos:start="593:25" pos:end="593:25">s</name></expr></argument>, <argument pos:start="593:28" pos:end="593:29"><expr pos:start="593:28" pos:end="593:29"><name pos:start="593:28" pos:end="593:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="595:9" pos:end="595:30"><expr pos:start="595:9" pos:end="595:29"><name pos:start="595:9" pos:end="595:11">tmp</name> <operator pos:start="595:13" pos:end="595:13">=</operator> <call pos:start="595:15" pos:end="595:29"><name pos:start="595:15" pos:end="595:22">load_reg</name><argument_list pos:start="595:23" pos:end="595:29">(<argument pos:start="595:24" pos:end="595:24"><expr pos:start="595:24" pos:end="595:24"><name pos:start="595:24" pos:end="595:24">s</name></expr></argument>, <argument pos:start="595:27" pos:end="595:28"><expr pos:start="595:27" pos:end="595:28"><name pos:start="595:27" pos:end="595:28">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="597:9" pos:end="597:41"><expr pos:start="597:9" pos:end="597:40"><call pos:start="597:9" pos:end="597:40"><name pos:start="597:9" pos:end="597:23">tcg_gen_add_i32</name><argument_list pos:start="597:24" pos:end="597:40">(<argument pos:start="597:25" pos:end="597:28"><expr pos:start="597:25" pos:end="597:28"><name pos:start="597:25" pos:end="597:28">addr</name></expr></argument>, <argument pos:start="597:31" pos:end="597:34"><expr pos:start="597:31" pos:end="597:34"><name pos:start="597:31" pos:end="597:34">addr</name></expr></argument>, <argument pos:start="597:37" pos:end="597:39"><expr pos:start="597:37" pos:end="597:39"><name pos:start="597:37" pos:end="597:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:22"><expr pos:start="599:9" pos:end="599:21"><call pos:start="599:9" pos:end="599:21"><name pos:start="599:9" pos:end="599:16">dead_tmp</name><argument_list pos:start="599:17" pos:end="599:21">(<argument pos:start="599:18" pos:end="599:20"><expr pos:start="599:18" pos:end="599:20"><name pos:start="599:18" pos:end="599:20">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="603:9" pos:end="605:34"><if pos:start="603:9" pos:end="605:34">if <condition pos:start="603:12" pos:end="603:19">(<expr pos:start="603:13" pos:end="603:18"><name pos:start="603:13" pos:end="603:14">op</name> <operator pos:start="603:16" pos:end="603:16">&lt;</operator> <literal type="number" pos:start="603:18" pos:end="603:18">3</literal></expr>)</condition><block type="pseudo" pos:start="605:13" pos:end="605:34"><block_content pos:start="605:13" pos:end="605:34"> <comment type="block" pos:start="603:21" pos:end="603:31">/* store */</comment>

            <expr_stmt pos:start="605:13" pos:end="605:34"><expr pos:start="605:13" pos:end="605:33"><name pos:start="605:13" pos:end="605:15">tmp</name> <operator pos:start="605:17" pos:end="605:17">=</operator> <call pos:start="605:19" pos:end="605:33"><name pos:start="605:19" pos:end="605:26">load_reg</name><argument_list pos:start="605:27" pos:end="605:33">(<argument pos:start="605:28" pos:end="605:28"><expr pos:start="605:28" pos:end="605:28"><name pos:start="605:28" pos:end="605:28">s</name></expr></argument>, <argument pos:start="605:31" pos:end="605:32"><expr pos:start="605:31" pos:end="605:32"><name pos:start="605:31" pos:end="605:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <switch pos:start="609:9" pos:end="659:9">switch <condition pos:start="609:16" pos:end="609:19">(<expr pos:start="609:17" pos:end="609:18"><name pos:start="609:17" pos:end="609:18">op</name></expr>)</condition> <block pos:start="609:21" pos:end="659:9">{<block_content pos:start="611:9" pos:end="657:18">

        <case pos:start="611:9" pos:end="611:15">case <expr pos:start="611:14" pos:end="611:14"><literal type="number" pos:start="611:14" pos:end="611:14">0</literal></expr>:</case> <comment type="block" pos:start="611:17" pos:end="611:25">/* str */</comment>

            <expr_stmt pos:start="613:13" pos:end="613:44"><expr pos:start="613:13" pos:end="613:43"><call pos:start="613:13" pos:end="613:43"><name pos:start="613:13" pos:end="613:20">gen_st32</name><argument_list pos:start="613:21" pos:end="613:43">(<argument pos:start="613:22" pos:end="613:24"><expr pos:start="613:22" pos:end="613:24"><name pos:start="613:22" pos:end="613:24">tmp</name></expr></argument>, <argument pos:start="613:27" pos:end="613:30"><expr pos:start="613:27" pos:end="613:30"><name pos:start="613:27" pos:end="613:30">addr</name></expr></argument>, <argument pos:start="613:33" pos:end="613:42"><expr pos:start="613:33" pos:end="613:42"><call pos:start="613:33" pos:end="613:42"><name pos:start="613:33" pos:end="613:39">IS_USER</name><argument_list pos:start="613:40" pos:end="613:42">(<argument pos:start="613:41" pos:end="613:41"><expr pos:start="613:41" pos:end="613:41"><name pos:start="613:41" pos:end="613:41">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="615:13" pos:end="615:18">break;</break>

        <case pos:start="617:9" pos:end="617:15">case <expr pos:start="617:14" pos:end="617:14"><literal type="number" pos:start="617:14" pos:end="617:14">1</literal></expr>:</case> <comment type="block" pos:start="617:17" pos:end="617:26">/* strh */</comment>

            <expr_stmt pos:start="619:13" pos:end="619:44"><expr pos:start="619:13" pos:end="619:43"><call pos:start="619:13" pos:end="619:43"><name pos:start="619:13" pos:end="619:20">gen_st16</name><argument_list pos:start="619:21" pos:end="619:43">(<argument pos:start="619:22" pos:end="619:24"><expr pos:start="619:22" pos:end="619:24"><name pos:start="619:22" pos:end="619:24">tmp</name></expr></argument>, <argument pos:start="619:27" pos:end="619:30"><expr pos:start="619:27" pos:end="619:30"><name pos:start="619:27" pos:end="619:30">addr</name></expr></argument>, <argument pos:start="619:33" pos:end="619:42"><expr pos:start="619:33" pos:end="619:42"><call pos:start="619:33" pos:end="619:42"><name pos:start="619:33" pos:end="619:39">IS_USER</name><argument_list pos:start="619:40" pos:end="619:42">(<argument pos:start="619:41" pos:end="619:41"><expr pos:start="619:41" pos:end="619:41"><name pos:start="619:41" pos:end="619:41">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="621:13" pos:end="621:18">break;</break>

        <case pos:start="623:9" pos:end="623:15">case <expr pos:start="623:14" pos:end="623:14"><literal type="number" pos:start="623:14" pos:end="623:14">2</literal></expr>:</case> <comment type="block" pos:start="623:17" pos:end="623:26">/* strb */</comment>

            <expr_stmt pos:start="625:13" pos:end="625:43"><expr pos:start="625:13" pos:end="625:42"><call pos:start="625:13" pos:end="625:42"><name pos:start="625:13" pos:end="625:19">gen_st8</name><argument_list pos:start="625:20" pos:end="625:42">(<argument pos:start="625:21" pos:end="625:23"><expr pos:start="625:21" pos:end="625:23"><name pos:start="625:21" pos:end="625:23">tmp</name></expr></argument>, <argument pos:start="625:26" pos:end="625:29"><expr pos:start="625:26" pos:end="625:29"><name pos:start="625:26" pos:end="625:29">addr</name></expr></argument>, <argument pos:start="625:32" pos:end="625:41"><expr pos:start="625:32" pos:end="625:41"><call pos:start="625:32" pos:end="625:41"><name pos:start="625:32" pos:end="625:38">IS_USER</name><argument_list pos:start="625:39" pos:end="625:41">(<argument pos:start="625:40" pos:end="625:40"><expr pos:start="625:40" pos:end="625:40"><name pos:start="625:40" pos:end="625:40">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="627:13" pos:end="627:18">break;</break>

        <case pos:start="629:9" pos:end="629:15">case <expr pos:start="629:14" pos:end="629:14"><literal type="number" pos:start="629:14" pos:end="629:14">3</literal></expr>:</case> <comment type="block" pos:start="629:17" pos:end="629:27">/* ldrsb */</comment>

            <expr_stmt pos:start="631:13" pos:end="631:45"><expr pos:start="631:13" pos:end="631:44"><name pos:start="631:13" pos:end="631:15">tmp</name> <operator pos:start="631:17" pos:end="631:17">=</operator> <call pos:start="631:19" pos:end="631:44"><name pos:start="631:19" pos:end="631:26">gen_ld8s</name><argument_list pos:start="631:27" pos:end="631:44">(<argument pos:start="631:28" pos:end="631:31"><expr pos:start="631:28" pos:end="631:31"><name pos:start="631:28" pos:end="631:31">addr</name></expr></argument>, <argument pos:start="631:34" pos:end="631:43"><expr pos:start="631:34" pos:end="631:43"><call pos:start="631:34" pos:end="631:43"><name pos:start="631:34" pos:end="631:40">IS_USER</name><argument_list pos:start="631:41" pos:end="631:43">(<argument pos:start="631:42" pos:end="631:42"><expr pos:start="631:42" pos:end="631:42"><name pos:start="631:42" pos:end="631:42">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="633:13" pos:end="633:18">break;</break>

        <case pos:start="635:9" pos:end="635:15">case <expr pos:start="635:14" pos:end="635:14"><literal type="number" pos:start="635:14" pos:end="635:14">4</literal></expr>:</case> <comment type="block" pos:start="635:17" pos:end="635:25">/* ldr */</comment>

            <expr_stmt pos:start="637:13" pos:end="637:45"><expr pos:start="637:13" pos:end="637:44"><name pos:start="637:13" pos:end="637:15">tmp</name> <operator pos:start="637:17" pos:end="637:17">=</operator> <call pos:start="637:19" pos:end="637:44"><name pos:start="637:19" pos:end="637:26">gen_ld32</name><argument_list pos:start="637:27" pos:end="637:44">(<argument pos:start="637:28" pos:end="637:31"><expr pos:start="637:28" pos:end="637:31"><name pos:start="637:28" pos:end="637:31">addr</name></expr></argument>, <argument pos:start="637:34" pos:end="637:43"><expr pos:start="637:34" pos:end="637:43"><call pos:start="637:34" pos:end="637:43"><name pos:start="637:34" pos:end="637:40">IS_USER</name><argument_list pos:start="637:41" pos:end="637:43">(<argument pos:start="637:42" pos:end="637:42"><expr pos:start="637:42" pos:end="637:42"><name pos:start="637:42" pos:end="637:42">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="639:13" pos:end="639:18">break;</break>

        <case pos:start="641:9" pos:end="641:15">case <expr pos:start="641:14" pos:end="641:14"><literal type="number" pos:start="641:14" pos:end="641:14">5</literal></expr>:</case> <comment type="block" pos:start="641:17" pos:end="641:26">/* ldrh */</comment>

            <expr_stmt pos:start="643:13" pos:end="643:46"><expr pos:start="643:13" pos:end="643:45"><name pos:start="643:13" pos:end="643:15">tmp</name> <operator pos:start="643:17" pos:end="643:17">=</operator> <call pos:start="643:19" pos:end="643:45"><name pos:start="643:19" pos:end="643:27">gen_ld16u</name><argument_list pos:start="643:28" pos:end="643:45">(<argument pos:start="643:29" pos:end="643:32"><expr pos:start="643:29" pos:end="643:32"><name pos:start="643:29" pos:end="643:32">addr</name></expr></argument>, <argument pos:start="643:35" pos:end="643:44"><expr pos:start="643:35" pos:end="643:44"><call pos:start="643:35" pos:end="643:44"><name pos:start="643:35" pos:end="643:41">IS_USER</name><argument_list pos:start="643:42" pos:end="643:44">(<argument pos:start="643:43" pos:end="643:43"><expr pos:start="643:43" pos:end="643:43"><name pos:start="643:43" pos:end="643:43">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="645:13" pos:end="645:18">break;</break>

        <case pos:start="647:9" pos:end="647:15">case <expr pos:start="647:14" pos:end="647:14"><literal type="number" pos:start="647:14" pos:end="647:14">6</literal></expr>:</case> <comment type="block" pos:start="647:17" pos:end="647:26">/* ldrb */</comment>

            <expr_stmt pos:start="649:13" pos:end="649:45"><expr pos:start="649:13" pos:end="649:44"><name pos:start="649:13" pos:end="649:15">tmp</name> <operator pos:start="649:17" pos:end="649:17">=</operator> <call pos:start="649:19" pos:end="649:44"><name pos:start="649:19" pos:end="649:26">gen_ld8u</name><argument_list pos:start="649:27" pos:end="649:44">(<argument pos:start="649:28" pos:end="649:31"><expr pos:start="649:28" pos:end="649:31"><name pos:start="649:28" pos:end="649:31">addr</name></expr></argument>, <argument pos:start="649:34" pos:end="649:43"><expr pos:start="649:34" pos:end="649:43"><call pos:start="649:34" pos:end="649:43"><name pos:start="649:34" pos:end="649:40">IS_USER</name><argument_list pos:start="649:41" pos:end="649:43">(<argument pos:start="649:42" pos:end="649:42"><expr pos:start="649:42" pos:end="649:42"><name pos:start="649:42" pos:end="649:42">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="651:13" pos:end="651:18">break;</break>

        <case pos:start="653:9" pos:end="653:15">case <expr pos:start="653:14" pos:end="653:14"><literal type="number" pos:start="653:14" pos:end="653:14">7</literal></expr>:</case> <comment type="block" pos:start="653:17" pos:end="653:27">/* ldrsh */</comment>

            <expr_stmt pos:start="655:13" pos:end="655:46"><expr pos:start="655:13" pos:end="655:45"><name pos:start="655:13" pos:end="655:15">tmp</name> <operator pos:start="655:17" pos:end="655:17">=</operator> <call pos:start="655:19" pos:end="655:45"><name pos:start="655:19" pos:end="655:27">gen_ld16s</name><argument_list pos:start="655:28" pos:end="655:45">(<argument pos:start="655:29" pos:end="655:32"><expr pos:start="655:29" pos:end="655:32"><name pos:start="655:29" pos:end="655:32">addr</name></expr></argument>, <argument pos:start="655:35" pos:end="655:44"><expr pos:start="655:35" pos:end="655:44"><call pos:start="655:35" pos:end="655:44"><name pos:start="655:35" pos:end="655:41">IS_USER</name><argument_list pos:start="655:42" pos:end="655:44">(<argument pos:start="655:43" pos:end="655:43"><expr pos:start="655:43" pos:end="655:43"><name pos:start="655:43" pos:end="655:43">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="657:13" pos:end="657:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="661:9" pos:end="663:34"><if pos:start="661:9" pos:end="663:34">if <condition pos:start="661:12" pos:end="661:20">(<expr pos:start="661:13" pos:end="661:19"><name pos:start="661:13" pos:end="661:14">op</name> <operator pos:start="661:16" pos:end="661:17">&gt;=</operator> <literal type="number" pos:start="661:19" pos:end="661:19">3</literal></expr>)</condition><block type="pseudo" pos:start="663:13" pos:end="663:34"><block_content pos:start="663:13" pos:end="663:34"> <comment type="block" pos:start="661:22" pos:end="661:31">/* load */</comment>

            <expr_stmt pos:start="663:13" pos:end="663:34"><expr pos:start="663:13" pos:end="663:33"><call pos:start="663:13" pos:end="663:33"><name pos:start="663:13" pos:end="663:21">store_reg</name><argument_list pos:start="663:22" pos:end="663:33">(<argument pos:start="663:23" pos:end="663:23"><expr pos:start="663:23" pos:end="663:23"><name pos:start="663:23" pos:end="663:23">s</name></expr></argument>, <argument pos:start="663:26" pos:end="663:27"><expr pos:start="663:26" pos:end="663:27"><name pos:start="663:26" pos:end="663:27">rd</name></expr></argument>, <argument pos:start="663:30" pos:end="663:32"><expr pos:start="663:30" pos:end="663:32"><name pos:start="663:30" pos:end="663:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="665:9" pos:end="665:23"><expr pos:start="665:9" pos:end="665:22"><call pos:start="665:9" pos:end="665:22"><name pos:start="665:9" pos:end="665:16">dead_tmp</name><argument_list pos:start="665:17" pos:end="665:22">(<argument pos:start="665:18" pos:end="665:21"><expr pos:start="665:18" pos:end="665:21"><name pos:start="665:18" pos:end="665:21">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="667:9" pos:end="667:14">break;</break>



    <case pos:start="671:5" pos:end="671:11">case <expr pos:start="671:10" pos:end="671:10"><literal type="number" pos:start="671:10" pos:end="671:10">6</literal></expr>:</case>

        <comment type="block" pos:start="673:9" pos:end="673:46">/* load/store word immediate offset */</comment>

        <expr_stmt pos:start="675:9" pos:end="675:22"><expr pos:start="675:9" pos:end="675:21"><name pos:start="675:9" pos:end="675:10">rd</name> <operator pos:start="675:12" pos:end="675:12">=</operator> <name pos:start="675:14" pos:end="675:17">insn</name> <operator pos:start="675:19" pos:end="675:19">&amp;</operator> <literal type="number" pos:start="675:21" pos:end="675:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="677:9" pos:end="677:29"><expr pos:start="677:9" pos:end="677:28"><name pos:start="677:9" pos:end="677:10">rn</name> <operator pos:start="677:12" pos:end="677:12">=</operator> <operator pos:start="677:14" pos:end="677:14">(</operator><name pos:start="677:15" pos:end="677:18">insn</name> <operator pos:start="677:20" pos:end="677:21">&gt;&gt;</operator> <literal type="number" pos:start="677:23" pos:end="677:23">3</literal><operator pos:start="677:24" pos:end="677:24">)</operator> <operator pos:start="677:26" pos:end="677:26">&amp;</operator> <literal type="number" pos:start="677:28" pos:end="677:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="679:9" pos:end="679:31"><expr pos:start="679:9" pos:end="679:30"><name pos:start="679:9" pos:end="679:12">addr</name> <operator pos:start="679:14" pos:end="679:14">=</operator> <call pos:start="679:16" pos:end="679:30"><name pos:start="679:16" pos:end="679:23">load_reg</name><argument_list pos:start="679:24" pos:end="679:30">(<argument pos:start="679:25" pos:end="679:25"><expr pos:start="679:25" pos:end="679:25"><name pos:start="679:25" pos:end="679:25">s</name></expr></argument>, <argument pos:start="679:28" pos:end="679:29"><expr pos:start="679:28" pos:end="679:29"><name pos:start="679:28" pos:end="679:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="681:9" pos:end="681:33"><expr pos:start="681:9" pos:end="681:32"><name pos:start="681:9" pos:end="681:11">val</name> <operator pos:start="681:13" pos:end="681:13">=</operator> <operator pos:start="681:15" pos:end="681:15">(</operator><name pos:start="681:16" pos:end="681:19">insn</name> <operator pos:start="681:21" pos:end="681:22">&gt;&gt;</operator> <literal type="number" pos:start="681:24" pos:end="681:24">4</literal><operator pos:start="681:25" pos:end="681:25">)</operator> <operator pos:start="681:27" pos:end="681:27">&amp;</operator> <literal type="number" pos:start="681:29" pos:end="681:32">0x7c</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="683:9" pos:end="683:42"><expr pos:start="683:9" pos:end="683:41"><call pos:start="683:9" pos:end="683:41"><name pos:start="683:9" pos:end="683:24">tcg_gen_addi_i32</name><argument_list pos:start="683:25" pos:end="683:41">(<argument pos:start="683:26" pos:end="683:29"><expr pos:start="683:26" pos:end="683:29"><name pos:start="683:26" pos:end="683:29">addr</name></expr></argument>, <argument pos:start="683:32" pos:end="683:35"><expr pos:start="683:32" pos:end="683:35"><name pos:start="683:32" pos:end="683:35">addr</name></expr></argument>, <argument pos:start="683:38" pos:end="683:40"><expr pos:start="683:38" pos:end="683:40"><name pos:start="683:38" pos:end="683:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="687:9" pos:end="703:9"><if pos:start="687:9" pos:end="695:9">if <condition pos:start="687:12" pos:end="687:29">(<expr pos:start="687:13" pos:end="687:28"><name pos:start="687:13" pos:end="687:16">insn</name> <operator pos:start="687:18" pos:end="687:18">&amp;</operator> <operator pos:start="687:20" pos:end="687:20">(</operator><literal type="number" pos:start="687:21" pos:end="687:21">1</literal> <operator pos:start="687:23" pos:end="687:24">&lt;&lt;</operator> <literal type="number" pos:start="687:26" pos:end="687:27">11</literal><operator pos:start="687:28" pos:end="687:28">)</operator></expr>)</condition> <block pos:start="687:31" pos:end="695:9">{<block_content pos:start="691:13" pos:end="693:34">

            <comment type="block" pos:start="689:13" pos:end="689:22">/* load */</comment>

            <expr_stmt pos:start="691:13" pos:end="691:45"><expr pos:start="691:13" pos:end="691:44"><name pos:start="691:13" pos:end="691:15">tmp</name> <operator pos:start="691:17" pos:end="691:17">=</operator> <call pos:start="691:19" pos:end="691:44"><name pos:start="691:19" pos:end="691:26">gen_ld32</name><argument_list pos:start="691:27" pos:end="691:44">(<argument pos:start="691:28" pos:end="691:31"><expr pos:start="691:28" pos:end="691:31"><name pos:start="691:28" pos:end="691:31">addr</name></expr></argument>, <argument pos:start="691:34" pos:end="691:43"><expr pos:start="691:34" pos:end="691:43"><call pos:start="691:34" pos:end="691:43"><name pos:start="691:34" pos:end="691:40">IS_USER</name><argument_list pos:start="691:41" pos:end="691:43">(<argument pos:start="691:42" pos:end="691:42"><expr pos:start="691:42" pos:end="691:42"><name pos:start="691:42" pos:end="691:42">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="693:13" pos:end="693:34"><expr pos:start="693:13" pos:end="693:33"><call pos:start="693:13" pos:end="693:33"><name pos:start="693:13" pos:end="693:21">store_reg</name><argument_list pos:start="693:22" pos:end="693:33">(<argument pos:start="693:23" pos:end="693:23"><expr pos:start="693:23" pos:end="693:23"><name pos:start="693:23" pos:end="693:23">s</name></expr></argument>, <argument pos:start="693:26" pos:end="693:27"><expr pos:start="693:26" pos:end="693:27"><name pos:start="693:26" pos:end="693:27">rd</name></expr></argument>, <argument pos:start="693:30" pos:end="693:32"><expr pos:start="693:30" pos:end="693:32"><name pos:start="693:30" pos:end="693:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="695:11" pos:end="703:9">else <block pos:start="695:16" pos:end="703:9">{<block_content pos:start="699:13" pos:end="701:44">

            <comment type="block" pos:start="697:13" pos:end="697:23">/* store */</comment>

            <expr_stmt pos:start="699:13" pos:end="699:34"><expr pos:start="699:13" pos:end="699:33"><name pos:start="699:13" pos:end="699:15">tmp</name> <operator pos:start="699:17" pos:end="699:17">=</operator> <call pos:start="699:19" pos:end="699:33"><name pos:start="699:19" pos:end="699:26">load_reg</name><argument_list pos:start="699:27" pos:end="699:33">(<argument pos:start="699:28" pos:end="699:28"><expr pos:start="699:28" pos:end="699:28"><name pos:start="699:28" pos:end="699:28">s</name></expr></argument>, <argument pos:start="699:31" pos:end="699:32"><expr pos:start="699:31" pos:end="699:32"><name pos:start="699:31" pos:end="699:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="701:13" pos:end="701:44"><expr pos:start="701:13" pos:end="701:43"><call pos:start="701:13" pos:end="701:43"><name pos:start="701:13" pos:end="701:20">gen_st32</name><argument_list pos:start="701:21" pos:end="701:43">(<argument pos:start="701:22" pos:end="701:24"><expr pos:start="701:22" pos:end="701:24"><name pos:start="701:22" pos:end="701:24">tmp</name></expr></argument>, <argument pos:start="701:27" pos:end="701:30"><expr pos:start="701:27" pos:end="701:30"><name pos:start="701:27" pos:end="701:30">addr</name></expr></argument>, <argument pos:start="701:33" pos:end="701:42"><expr pos:start="701:33" pos:end="701:42"><call pos:start="701:33" pos:end="701:42"><name pos:start="701:33" pos:end="701:39">IS_USER</name><argument_list pos:start="701:40" pos:end="701:42">(<argument pos:start="701:41" pos:end="701:41"><expr pos:start="701:41" pos:end="701:41"><name pos:start="701:41" pos:end="701:41">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="705:9" pos:end="705:23"><expr pos:start="705:9" pos:end="705:22"><call pos:start="705:9" pos:end="705:22"><name pos:start="705:9" pos:end="705:16">dead_tmp</name><argument_list pos:start="705:17" pos:end="705:22">(<argument pos:start="705:18" pos:end="705:21"><expr pos:start="705:18" pos:end="705:21"><name pos:start="705:18" pos:end="705:21">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="707:9" pos:end="707:14">break;</break>



    <case pos:start="711:5" pos:end="711:11">case <expr pos:start="711:10" pos:end="711:10"><literal type="number" pos:start="711:10" pos:end="711:10">7</literal></expr>:</case>

        <comment type="block" pos:start="713:9" pos:end="713:46">/* load/store byte immediate offset */</comment>

        <expr_stmt pos:start="715:9" pos:end="715:22"><expr pos:start="715:9" pos:end="715:21"><name pos:start="715:9" pos:end="715:10">rd</name> <operator pos:start="715:12" pos:end="715:12">=</operator> <name pos:start="715:14" pos:end="715:17">insn</name> <operator pos:start="715:19" pos:end="715:19">&amp;</operator> <literal type="number" pos:start="715:21" pos:end="715:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="717:9" pos:end="717:29"><expr pos:start="717:9" pos:end="717:28"><name pos:start="717:9" pos:end="717:10">rn</name> <operator pos:start="717:12" pos:end="717:12">=</operator> <operator pos:start="717:14" pos:end="717:14">(</operator><name pos:start="717:15" pos:end="717:18">insn</name> <operator pos:start="717:20" pos:end="717:21">&gt;&gt;</operator> <literal type="number" pos:start="717:23" pos:end="717:23">3</literal><operator pos:start="717:24" pos:end="717:24">)</operator> <operator pos:start="717:26" pos:end="717:26">&amp;</operator> <literal type="number" pos:start="717:28" pos:end="717:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="719:9" pos:end="719:31"><expr pos:start="719:9" pos:end="719:30"><name pos:start="719:9" pos:end="719:12">addr</name> <operator pos:start="719:14" pos:end="719:14">=</operator> <call pos:start="719:16" pos:end="719:30"><name pos:start="719:16" pos:end="719:23">load_reg</name><argument_list pos:start="719:24" pos:end="719:30">(<argument pos:start="719:25" pos:end="719:25"><expr pos:start="719:25" pos:end="719:25"><name pos:start="719:25" pos:end="719:25">s</name></expr></argument>, <argument pos:start="719:28" pos:end="719:29"><expr pos:start="719:28" pos:end="719:29"><name pos:start="719:28" pos:end="719:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="721:9" pos:end="721:33"><expr pos:start="721:9" pos:end="721:32"><name pos:start="721:9" pos:end="721:11">val</name> <operator pos:start="721:13" pos:end="721:13">=</operator> <operator pos:start="721:15" pos:end="721:15">(</operator><name pos:start="721:16" pos:end="721:19">insn</name> <operator pos:start="721:21" pos:end="721:22">&gt;&gt;</operator> <literal type="number" pos:start="721:24" pos:end="721:24">6</literal><operator pos:start="721:25" pos:end="721:25">)</operator> <operator pos:start="721:27" pos:end="721:27">&amp;</operator> <literal type="number" pos:start="721:29" pos:end="721:32">0x1f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="723:9" pos:end="723:42"><expr pos:start="723:9" pos:end="723:41"><call pos:start="723:9" pos:end="723:41"><name pos:start="723:9" pos:end="723:24">tcg_gen_addi_i32</name><argument_list pos:start="723:25" pos:end="723:41">(<argument pos:start="723:26" pos:end="723:29"><expr pos:start="723:26" pos:end="723:29"><name pos:start="723:26" pos:end="723:29">addr</name></expr></argument>, <argument pos:start="723:32" pos:end="723:35"><expr pos:start="723:32" pos:end="723:35"><name pos:start="723:32" pos:end="723:35">addr</name></expr></argument>, <argument pos:start="723:38" pos:end="723:40"><expr pos:start="723:38" pos:end="723:40"><name pos:start="723:38" pos:end="723:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="727:9" pos:end="743:9"><if pos:start="727:9" pos:end="735:9">if <condition pos:start="727:12" pos:end="727:29">(<expr pos:start="727:13" pos:end="727:28"><name pos:start="727:13" pos:end="727:16">insn</name> <operator pos:start="727:18" pos:end="727:18">&amp;</operator> <operator pos:start="727:20" pos:end="727:20">(</operator><literal type="number" pos:start="727:21" pos:end="727:21">1</literal> <operator pos:start="727:23" pos:end="727:24">&lt;&lt;</operator> <literal type="number" pos:start="727:26" pos:end="727:27">11</literal><operator pos:start="727:28" pos:end="727:28">)</operator></expr>)</condition> <block pos:start="727:31" pos:end="735:9">{<block_content pos:start="731:13" pos:end="733:34">

            <comment type="block" pos:start="729:13" pos:end="729:22">/* load */</comment>

            <expr_stmt pos:start="731:13" pos:end="731:45"><expr pos:start="731:13" pos:end="731:44"><name pos:start="731:13" pos:end="731:15">tmp</name> <operator pos:start="731:17" pos:end="731:17">=</operator> <call pos:start="731:19" pos:end="731:44"><name pos:start="731:19" pos:end="731:26">gen_ld8u</name><argument_list pos:start="731:27" pos:end="731:44">(<argument pos:start="731:28" pos:end="731:31"><expr pos:start="731:28" pos:end="731:31"><name pos:start="731:28" pos:end="731:31">addr</name></expr></argument>, <argument pos:start="731:34" pos:end="731:43"><expr pos:start="731:34" pos:end="731:43"><call pos:start="731:34" pos:end="731:43"><name pos:start="731:34" pos:end="731:40">IS_USER</name><argument_list pos:start="731:41" pos:end="731:43">(<argument pos:start="731:42" pos:end="731:42"><expr pos:start="731:42" pos:end="731:42"><name pos:start="731:42" pos:end="731:42">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="733:13" pos:end="733:34"><expr pos:start="733:13" pos:end="733:33"><call pos:start="733:13" pos:end="733:33"><name pos:start="733:13" pos:end="733:21">store_reg</name><argument_list pos:start="733:22" pos:end="733:33">(<argument pos:start="733:23" pos:end="733:23"><expr pos:start="733:23" pos:end="733:23"><name pos:start="733:23" pos:end="733:23">s</name></expr></argument>, <argument pos:start="733:26" pos:end="733:27"><expr pos:start="733:26" pos:end="733:27"><name pos:start="733:26" pos:end="733:27">rd</name></expr></argument>, <argument pos:start="733:30" pos:end="733:32"><expr pos:start="733:30" pos:end="733:32"><name pos:start="733:30" pos:end="733:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="735:11" pos:end="743:9">else <block pos:start="735:16" pos:end="743:9">{<block_content pos:start="739:13" pos:end="741:43">

            <comment type="block" pos:start="737:13" pos:end="737:23">/* store */</comment>

            <expr_stmt pos:start="739:13" pos:end="739:34"><expr pos:start="739:13" pos:end="739:33"><name pos:start="739:13" pos:end="739:15">tmp</name> <operator pos:start="739:17" pos:end="739:17">=</operator> <call pos:start="739:19" pos:end="739:33"><name pos:start="739:19" pos:end="739:26">load_reg</name><argument_list pos:start="739:27" pos:end="739:33">(<argument pos:start="739:28" pos:end="739:28"><expr pos:start="739:28" pos:end="739:28"><name pos:start="739:28" pos:end="739:28">s</name></expr></argument>, <argument pos:start="739:31" pos:end="739:32"><expr pos:start="739:31" pos:end="739:32"><name pos:start="739:31" pos:end="739:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="741:13" pos:end="741:43"><expr pos:start="741:13" pos:end="741:42"><call pos:start="741:13" pos:end="741:42"><name pos:start="741:13" pos:end="741:19">gen_st8</name><argument_list pos:start="741:20" pos:end="741:42">(<argument pos:start="741:21" pos:end="741:23"><expr pos:start="741:21" pos:end="741:23"><name pos:start="741:21" pos:end="741:23">tmp</name></expr></argument>, <argument pos:start="741:26" pos:end="741:29"><expr pos:start="741:26" pos:end="741:29"><name pos:start="741:26" pos:end="741:29">addr</name></expr></argument>, <argument pos:start="741:32" pos:end="741:41"><expr pos:start="741:32" pos:end="741:41"><call pos:start="741:32" pos:end="741:41"><name pos:start="741:32" pos:end="741:38">IS_USER</name><argument_list pos:start="741:39" pos:end="741:41">(<argument pos:start="741:40" pos:end="741:40"><expr pos:start="741:40" pos:end="741:40"><name pos:start="741:40" pos:end="741:40">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="745:9" pos:end="745:23"><expr pos:start="745:9" pos:end="745:22"><call pos:start="745:9" pos:end="745:22"><name pos:start="745:9" pos:end="745:16">dead_tmp</name><argument_list pos:start="745:17" pos:end="745:22">(<argument pos:start="745:18" pos:end="745:21"><expr pos:start="745:18" pos:end="745:21"><name pos:start="745:18" pos:end="745:21">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="747:9" pos:end="747:14">break;</break>



    <case pos:start="751:5" pos:end="751:11">case <expr pos:start="751:10" pos:end="751:10"><literal type="number" pos:start="751:10" pos:end="751:10">8</literal></expr>:</case>

        <comment type="block" pos:start="753:9" pos:end="753:50">/* load/store halfword immediate offset */</comment>

        <expr_stmt pos:start="755:9" pos:end="755:22"><expr pos:start="755:9" pos:end="755:21"><name pos:start="755:9" pos:end="755:10">rd</name> <operator pos:start="755:12" pos:end="755:12">=</operator> <name pos:start="755:14" pos:end="755:17">insn</name> <operator pos:start="755:19" pos:end="755:19">&amp;</operator> <literal type="number" pos:start="755:21" pos:end="755:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="757:9" pos:end="757:29"><expr pos:start="757:9" pos:end="757:28"><name pos:start="757:9" pos:end="757:10">rn</name> <operator pos:start="757:12" pos:end="757:12">=</operator> <operator pos:start="757:14" pos:end="757:14">(</operator><name pos:start="757:15" pos:end="757:18">insn</name> <operator pos:start="757:20" pos:end="757:21">&gt;&gt;</operator> <literal type="number" pos:start="757:23" pos:end="757:23">3</literal><operator pos:start="757:24" pos:end="757:24">)</operator> <operator pos:start="757:26" pos:end="757:26">&amp;</operator> <literal type="number" pos:start="757:28" pos:end="757:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="759:9" pos:end="759:31"><expr pos:start="759:9" pos:end="759:30"><name pos:start="759:9" pos:end="759:12">addr</name> <operator pos:start="759:14" pos:end="759:14">=</operator> <call pos:start="759:16" pos:end="759:30"><name pos:start="759:16" pos:end="759:23">load_reg</name><argument_list pos:start="759:24" pos:end="759:30">(<argument pos:start="759:25" pos:end="759:25"><expr pos:start="759:25" pos:end="759:25"><name pos:start="759:25" pos:end="759:25">s</name></expr></argument>, <argument pos:start="759:28" pos:end="759:29"><expr pos:start="759:28" pos:end="759:29"><name pos:start="759:28" pos:end="759:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="761:9" pos:end="761:33"><expr pos:start="761:9" pos:end="761:32"><name pos:start="761:9" pos:end="761:11">val</name> <operator pos:start="761:13" pos:end="761:13">=</operator> <operator pos:start="761:15" pos:end="761:15">(</operator><name pos:start="761:16" pos:end="761:19">insn</name> <operator pos:start="761:21" pos:end="761:22">&gt;&gt;</operator> <literal type="number" pos:start="761:24" pos:end="761:24">5</literal><operator pos:start="761:25" pos:end="761:25">)</operator> <operator pos:start="761:27" pos:end="761:27">&amp;</operator> <literal type="number" pos:start="761:29" pos:end="761:32">0x3e</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="763:9" pos:end="763:42"><expr pos:start="763:9" pos:end="763:41"><call pos:start="763:9" pos:end="763:41"><name pos:start="763:9" pos:end="763:24">tcg_gen_addi_i32</name><argument_list pos:start="763:25" pos:end="763:41">(<argument pos:start="763:26" pos:end="763:29"><expr pos:start="763:26" pos:end="763:29"><name pos:start="763:26" pos:end="763:29">addr</name></expr></argument>, <argument pos:start="763:32" pos:end="763:35"><expr pos:start="763:32" pos:end="763:35"><name pos:start="763:32" pos:end="763:35">addr</name></expr></argument>, <argument pos:start="763:38" pos:end="763:40"><expr pos:start="763:38" pos:end="763:40"><name pos:start="763:38" pos:end="763:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="767:9" pos:end="783:9"><if pos:start="767:9" pos:end="775:9">if <condition pos:start="767:12" pos:end="767:29">(<expr pos:start="767:13" pos:end="767:28"><name pos:start="767:13" pos:end="767:16">insn</name> <operator pos:start="767:18" pos:end="767:18">&amp;</operator> <operator pos:start="767:20" pos:end="767:20">(</operator><literal type="number" pos:start="767:21" pos:end="767:21">1</literal> <operator pos:start="767:23" pos:end="767:24">&lt;&lt;</operator> <literal type="number" pos:start="767:26" pos:end="767:27">11</literal><operator pos:start="767:28" pos:end="767:28">)</operator></expr>)</condition> <block pos:start="767:31" pos:end="775:9">{<block_content pos:start="771:13" pos:end="773:34">

            <comment type="block" pos:start="769:13" pos:end="769:22">/* load */</comment>

            <expr_stmt pos:start="771:13" pos:end="771:46"><expr pos:start="771:13" pos:end="771:45"><name pos:start="771:13" pos:end="771:15">tmp</name> <operator pos:start="771:17" pos:end="771:17">=</operator> <call pos:start="771:19" pos:end="771:45"><name pos:start="771:19" pos:end="771:27">gen_ld16u</name><argument_list pos:start="771:28" pos:end="771:45">(<argument pos:start="771:29" pos:end="771:32"><expr pos:start="771:29" pos:end="771:32"><name pos:start="771:29" pos:end="771:32">addr</name></expr></argument>, <argument pos:start="771:35" pos:end="771:44"><expr pos:start="771:35" pos:end="771:44"><call pos:start="771:35" pos:end="771:44"><name pos:start="771:35" pos:end="771:41">IS_USER</name><argument_list pos:start="771:42" pos:end="771:44">(<argument pos:start="771:43" pos:end="771:43"><expr pos:start="771:43" pos:end="771:43"><name pos:start="771:43" pos:end="771:43">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="773:13" pos:end="773:34"><expr pos:start="773:13" pos:end="773:33"><call pos:start="773:13" pos:end="773:33"><name pos:start="773:13" pos:end="773:21">store_reg</name><argument_list pos:start="773:22" pos:end="773:33">(<argument pos:start="773:23" pos:end="773:23"><expr pos:start="773:23" pos:end="773:23"><name pos:start="773:23" pos:end="773:23">s</name></expr></argument>, <argument pos:start="773:26" pos:end="773:27"><expr pos:start="773:26" pos:end="773:27"><name pos:start="773:26" pos:end="773:27">rd</name></expr></argument>, <argument pos:start="773:30" pos:end="773:32"><expr pos:start="773:30" pos:end="773:32"><name pos:start="773:30" pos:end="773:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="775:11" pos:end="783:9">else <block pos:start="775:16" pos:end="783:9">{<block_content pos:start="779:13" pos:end="781:44">

            <comment type="block" pos:start="777:13" pos:end="777:23">/* store */</comment>

            <expr_stmt pos:start="779:13" pos:end="779:34"><expr pos:start="779:13" pos:end="779:33"><name pos:start="779:13" pos:end="779:15">tmp</name> <operator pos:start="779:17" pos:end="779:17">=</operator> <call pos:start="779:19" pos:end="779:33"><name pos:start="779:19" pos:end="779:26">load_reg</name><argument_list pos:start="779:27" pos:end="779:33">(<argument pos:start="779:28" pos:end="779:28"><expr pos:start="779:28" pos:end="779:28"><name pos:start="779:28" pos:end="779:28">s</name></expr></argument>, <argument pos:start="779:31" pos:end="779:32"><expr pos:start="779:31" pos:end="779:32"><name pos:start="779:31" pos:end="779:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="781:13" pos:end="781:44"><expr pos:start="781:13" pos:end="781:43"><call pos:start="781:13" pos:end="781:43"><name pos:start="781:13" pos:end="781:20">gen_st16</name><argument_list pos:start="781:21" pos:end="781:43">(<argument pos:start="781:22" pos:end="781:24"><expr pos:start="781:22" pos:end="781:24"><name pos:start="781:22" pos:end="781:24">tmp</name></expr></argument>, <argument pos:start="781:27" pos:end="781:30"><expr pos:start="781:27" pos:end="781:30"><name pos:start="781:27" pos:end="781:30">addr</name></expr></argument>, <argument pos:start="781:33" pos:end="781:42"><expr pos:start="781:33" pos:end="781:42"><call pos:start="781:33" pos:end="781:42"><name pos:start="781:33" pos:end="781:39">IS_USER</name><argument_list pos:start="781:40" pos:end="781:42">(<argument pos:start="781:41" pos:end="781:41"><expr pos:start="781:41" pos:end="781:41"><name pos:start="781:41" pos:end="781:41">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="785:9" pos:end="785:23"><expr pos:start="785:9" pos:end="785:22"><call pos:start="785:9" pos:end="785:22"><name pos:start="785:9" pos:end="785:16">dead_tmp</name><argument_list pos:start="785:17" pos:end="785:22">(<argument pos:start="785:18" pos:end="785:21"><expr pos:start="785:18" pos:end="785:21"><name pos:start="785:18" pos:end="785:21">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="787:9" pos:end="787:14">break;</break>



    <case pos:start="791:5" pos:end="791:11">case <expr pos:start="791:10" pos:end="791:10"><literal type="number" pos:start="791:10" pos:end="791:10">9</literal></expr>:</case>

        <comment type="block" pos:start="793:9" pos:end="793:35">/* load/store from stack */</comment>

        <expr_stmt pos:start="795:9" pos:end="795:29"><expr pos:start="795:9" pos:end="795:28"><name pos:start="795:9" pos:end="795:10">rd</name> <operator pos:start="795:12" pos:end="795:12">=</operator> <operator pos:start="795:14" pos:end="795:14">(</operator><name pos:start="795:15" pos:end="795:18">insn</name> <operator pos:start="795:20" pos:end="795:21">&gt;&gt;</operator> <literal type="number" pos:start="795:23" pos:end="795:23">8</literal><operator pos:start="795:24" pos:end="795:24">)</operator> <operator pos:start="795:26" pos:end="795:26">&amp;</operator> <literal type="number" pos:start="795:28" pos:end="795:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="797:9" pos:end="797:31"><expr pos:start="797:9" pos:end="797:30"><name pos:start="797:9" pos:end="797:12">addr</name> <operator pos:start="797:14" pos:end="797:14">=</operator> <call pos:start="797:16" pos:end="797:30"><name pos:start="797:16" pos:end="797:23">load_reg</name><argument_list pos:start="797:24" pos:end="797:30">(<argument pos:start="797:25" pos:end="797:25"><expr pos:start="797:25" pos:end="797:25"><name pos:start="797:25" pos:end="797:25">s</name></expr></argument>, <argument pos:start="797:28" pos:end="797:29"><expr pos:start="797:28" pos:end="797:29"><literal type="number" pos:start="797:28" pos:end="797:29">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="799:9" pos:end="799:32"><expr pos:start="799:9" pos:end="799:31"><name pos:start="799:9" pos:end="799:11">val</name> <operator pos:start="799:13" pos:end="799:13">=</operator> <operator pos:start="799:15" pos:end="799:15">(</operator><name pos:start="799:16" pos:end="799:19">insn</name> <operator pos:start="799:21" pos:end="799:21">&amp;</operator> <literal type="number" pos:start="799:23" pos:end="799:26">0xff</literal><operator pos:start="799:27" pos:end="799:27">)</operator> <operator pos:start="799:29" pos:end="799:29">*</operator> <literal type="number" pos:start="799:31" pos:end="799:31">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="801:9" pos:end="801:42"><expr pos:start="801:9" pos:end="801:41"><call pos:start="801:9" pos:end="801:41"><name pos:start="801:9" pos:end="801:24">tcg_gen_addi_i32</name><argument_list pos:start="801:25" pos:end="801:41">(<argument pos:start="801:26" pos:end="801:29"><expr pos:start="801:26" pos:end="801:29"><name pos:start="801:26" pos:end="801:29">addr</name></expr></argument>, <argument pos:start="801:32" pos:end="801:35"><expr pos:start="801:32" pos:end="801:35"><name pos:start="801:32" pos:end="801:35">addr</name></expr></argument>, <argument pos:start="801:38" pos:end="801:40"><expr pos:start="801:38" pos:end="801:40"><name pos:start="801:38" pos:end="801:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="805:9" pos:end="821:9"><if pos:start="805:9" pos:end="813:9">if <condition pos:start="805:12" pos:end="805:29">(<expr pos:start="805:13" pos:end="805:28"><name pos:start="805:13" pos:end="805:16">insn</name> <operator pos:start="805:18" pos:end="805:18">&amp;</operator> <operator pos:start="805:20" pos:end="805:20">(</operator><literal type="number" pos:start="805:21" pos:end="805:21">1</literal> <operator pos:start="805:23" pos:end="805:24">&lt;&lt;</operator> <literal type="number" pos:start="805:26" pos:end="805:27">11</literal><operator pos:start="805:28" pos:end="805:28">)</operator></expr>)</condition> <block pos:start="805:31" pos:end="813:9">{<block_content pos:start="809:13" pos:end="811:34">

            <comment type="block" pos:start="807:13" pos:end="807:22">/* load */</comment>

            <expr_stmt pos:start="809:13" pos:end="809:45"><expr pos:start="809:13" pos:end="809:44"><name pos:start="809:13" pos:end="809:15">tmp</name> <operator pos:start="809:17" pos:end="809:17">=</operator> <call pos:start="809:19" pos:end="809:44"><name pos:start="809:19" pos:end="809:26">gen_ld32</name><argument_list pos:start="809:27" pos:end="809:44">(<argument pos:start="809:28" pos:end="809:31"><expr pos:start="809:28" pos:end="809:31"><name pos:start="809:28" pos:end="809:31">addr</name></expr></argument>, <argument pos:start="809:34" pos:end="809:43"><expr pos:start="809:34" pos:end="809:43"><call pos:start="809:34" pos:end="809:43"><name pos:start="809:34" pos:end="809:40">IS_USER</name><argument_list pos:start="809:41" pos:end="809:43">(<argument pos:start="809:42" pos:end="809:42"><expr pos:start="809:42" pos:end="809:42"><name pos:start="809:42" pos:end="809:42">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="811:13" pos:end="811:34"><expr pos:start="811:13" pos:end="811:33"><call pos:start="811:13" pos:end="811:33"><name pos:start="811:13" pos:end="811:21">store_reg</name><argument_list pos:start="811:22" pos:end="811:33">(<argument pos:start="811:23" pos:end="811:23"><expr pos:start="811:23" pos:end="811:23"><name pos:start="811:23" pos:end="811:23">s</name></expr></argument>, <argument pos:start="811:26" pos:end="811:27"><expr pos:start="811:26" pos:end="811:27"><name pos:start="811:26" pos:end="811:27">rd</name></expr></argument>, <argument pos:start="811:30" pos:end="811:32"><expr pos:start="811:30" pos:end="811:32"><name pos:start="811:30" pos:end="811:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="813:11" pos:end="821:9">else <block pos:start="813:16" pos:end="821:9">{<block_content pos:start="817:13" pos:end="819:44">

            <comment type="block" pos:start="815:13" pos:end="815:23">/* store */</comment>

            <expr_stmt pos:start="817:13" pos:end="817:34"><expr pos:start="817:13" pos:end="817:33"><name pos:start="817:13" pos:end="817:15">tmp</name> <operator pos:start="817:17" pos:end="817:17">=</operator> <call pos:start="817:19" pos:end="817:33"><name pos:start="817:19" pos:end="817:26">load_reg</name><argument_list pos:start="817:27" pos:end="817:33">(<argument pos:start="817:28" pos:end="817:28"><expr pos:start="817:28" pos:end="817:28"><name pos:start="817:28" pos:end="817:28">s</name></expr></argument>, <argument pos:start="817:31" pos:end="817:32"><expr pos:start="817:31" pos:end="817:32"><name pos:start="817:31" pos:end="817:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="819:13" pos:end="819:44"><expr pos:start="819:13" pos:end="819:43"><call pos:start="819:13" pos:end="819:43"><name pos:start="819:13" pos:end="819:20">gen_st32</name><argument_list pos:start="819:21" pos:end="819:43">(<argument pos:start="819:22" pos:end="819:24"><expr pos:start="819:22" pos:end="819:24"><name pos:start="819:22" pos:end="819:24">tmp</name></expr></argument>, <argument pos:start="819:27" pos:end="819:30"><expr pos:start="819:27" pos:end="819:30"><name pos:start="819:27" pos:end="819:30">addr</name></expr></argument>, <argument pos:start="819:33" pos:end="819:42"><expr pos:start="819:33" pos:end="819:42"><call pos:start="819:33" pos:end="819:42"><name pos:start="819:33" pos:end="819:39">IS_USER</name><argument_list pos:start="819:40" pos:end="819:42">(<argument pos:start="819:41" pos:end="819:41"><expr pos:start="819:41" pos:end="819:41"><name pos:start="819:41" pos:end="819:41">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="823:9" pos:end="823:23"><expr pos:start="823:9" pos:end="823:22"><call pos:start="823:9" pos:end="823:22"><name pos:start="823:9" pos:end="823:16">dead_tmp</name><argument_list pos:start="823:17" pos:end="823:22">(<argument pos:start="823:18" pos:end="823:21"><expr pos:start="823:18" pos:end="823:21"><name pos:start="823:18" pos:end="823:21">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="825:9" pos:end="825:14">break;</break>



    <case pos:start="829:5" pos:end="829:12">case <expr pos:start="829:10" pos:end="829:11"><literal type="number" pos:start="829:10" pos:end="829:11">10</literal></expr>:</case>

        <comment type="block" pos:start="831:9" pos:end="831:29">/* add to high reg */</comment>

        <expr_stmt pos:start="833:9" pos:end="833:29"><expr pos:start="833:9" pos:end="833:28"><name pos:start="833:9" pos:end="833:10">rd</name> <operator pos:start="833:12" pos:end="833:12">=</operator> <operator pos:start="833:14" pos:end="833:14">(</operator><name pos:start="833:15" pos:end="833:18">insn</name> <operator pos:start="833:20" pos:end="833:21">&gt;&gt;</operator> <literal type="number" pos:start="833:23" pos:end="833:23">8</literal><operator pos:start="833:24" pos:end="833:24">)</operator> <operator pos:start="833:26" pos:end="833:26">&amp;</operator> <literal type="number" pos:start="833:28" pos:end="833:28">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="835:9" pos:end="849:9"><if pos:start="835:9" pos:end="841:9">if <condition pos:start="835:12" pos:end="835:29">(<expr pos:start="835:13" pos:end="835:28"><name pos:start="835:13" pos:end="835:16">insn</name> <operator pos:start="835:18" pos:end="835:18">&amp;</operator> <operator pos:start="835:20" pos:end="835:20">(</operator><literal type="number" pos:start="835:21" pos:end="835:21">1</literal> <operator pos:start="835:23" pos:end="835:24">&lt;&lt;</operator> <literal type="number" pos:start="835:26" pos:end="835:27">11</literal><operator pos:start="835:28" pos:end="835:28">)</operator></expr>)</condition> <block pos:start="835:31" pos:end="841:9">{<block_content pos:start="839:13" pos:end="839:34">

            <comment type="block" pos:start="837:13" pos:end="837:20">/* SP */</comment>

            <expr_stmt pos:start="839:13" pos:end="839:34"><expr pos:start="839:13" pos:end="839:33"><name pos:start="839:13" pos:end="839:15">tmp</name> <operator pos:start="839:17" pos:end="839:17">=</operator> <call pos:start="839:19" pos:end="839:33"><name pos:start="839:19" pos:end="839:26">load_reg</name><argument_list pos:start="839:27" pos:end="839:33">(<argument pos:start="839:28" pos:end="839:28"><expr pos:start="839:28" pos:end="839:28"><name pos:start="839:28" pos:end="839:28">s</name></expr></argument>, <argument pos:start="839:31" pos:end="839:32"><expr pos:start="839:31" pos:end="839:32"><literal type="number" pos:start="839:31" pos:end="839:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="841:11" pos:end="849:9">else <block pos:start="841:16" pos:end="849:9">{<block_content pos:start="845:13" pos:end="847:62">

            <comment type="block" pos:start="843:13" pos:end="843:40">/* PC. bit 1 is ignored.  */</comment>

            <expr_stmt pos:start="845:13" pos:end="845:28"><expr pos:start="845:13" pos:end="845:27"><name pos:start="845:13" pos:end="845:15">tmp</name> <operator pos:start="845:17" pos:end="845:17">=</operator> <call pos:start="845:19" pos:end="845:27"><name pos:start="845:19" pos:end="845:25">new_tmp</name><argument_list pos:start="845:26" pos:end="845:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="847:13" pos:end="847:62"><expr pos:start="847:13" pos:end="847:61"><call pos:start="847:13" pos:end="847:61"><name pos:start="847:13" pos:end="847:28">tcg_gen_movi_i32</name><argument_list pos:start="847:29" pos:end="847:61">(<argument pos:start="847:30" pos:end="847:32"><expr pos:start="847:30" pos:end="847:32"><name pos:start="847:30" pos:end="847:32">tmp</name></expr></argument>, <argument pos:start="847:35" pos:end="847:60"><expr pos:start="847:35" pos:end="847:60"><operator pos:start="847:35" pos:end="847:35">(</operator><name pos:start="847:36" pos:end="847:40"><name pos:start="847:36" pos:end="847:36">s</name><operator pos:start="847:37" pos:end="847:38">-&gt;</operator><name pos:start="847:39" pos:end="847:40">pc</name></name> <operator pos:start="847:42" pos:end="847:42">+</operator> <literal type="number" pos:start="847:44" pos:end="847:44">2</literal><operator pos:start="847:45" pos:end="847:45">)</operator> <operator pos:start="847:47" pos:end="847:47">&amp;</operator> <operator pos:start="847:49" pos:end="847:49">~</operator><operator pos:start="847:50" pos:end="847:50">(</operator><name pos:start="847:51" pos:end="847:58">uint32_t</name><operator pos:start="847:59" pos:end="847:59">)</operator><literal type="number" pos:start="847:60" pos:end="847:60">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="851:9" pos:end="851:32"><expr pos:start="851:9" pos:end="851:31"><name pos:start="851:9" pos:end="851:11">val</name> <operator pos:start="851:13" pos:end="851:13">=</operator> <operator pos:start="851:15" pos:end="851:15">(</operator><name pos:start="851:16" pos:end="851:19">insn</name> <operator pos:start="851:21" pos:end="851:21">&amp;</operator> <literal type="number" pos:start="851:23" pos:end="851:26">0xff</literal><operator pos:start="851:27" pos:end="851:27">)</operator> <operator pos:start="851:29" pos:end="851:29">*</operator> <literal type="number" pos:start="851:31" pos:end="851:31">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="853:9" pos:end="853:40"><expr pos:start="853:9" pos:end="853:39"><call pos:start="853:9" pos:end="853:39"><name pos:start="853:9" pos:end="853:24">tcg_gen_addi_i32</name><argument_list pos:start="853:25" pos:end="853:39">(<argument pos:start="853:26" pos:end="853:28"><expr pos:start="853:26" pos:end="853:28"><name pos:start="853:26" pos:end="853:28">tmp</name></expr></argument>, <argument pos:start="853:31" pos:end="853:33"><expr pos:start="853:31" pos:end="853:33"><name pos:start="853:31" pos:end="853:33">tmp</name></expr></argument>, <argument pos:start="853:36" pos:end="853:38"><expr pos:start="853:36" pos:end="853:38"><name pos:start="853:36" pos:end="853:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="855:9" pos:end="855:30"><expr pos:start="855:9" pos:end="855:29"><call pos:start="855:9" pos:end="855:29"><name pos:start="855:9" pos:end="855:17">store_reg</name><argument_list pos:start="855:18" pos:end="855:29">(<argument pos:start="855:19" pos:end="855:19"><expr pos:start="855:19" pos:end="855:19"><name pos:start="855:19" pos:end="855:19">s</name></expr></argument>, <argument pos:start="855:22" pos:end="855:23"><expr pos:start="855:22" pos:end="855:23"><name pos:start="855:22" pos:end="855:23">rd</name></expr></argument>, <argument pos:start="855:26" pos:end="855:28"><expr pos:start="855:26" pos:end="855:28"><name pos:start="855:26" pos:end="855:28">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="857:9" pos:end="857:14">break;</break>



    <case pos:start="861:5" pos:end="861:12">case <expr pos:start="861:10" pos:end="861:11"><literal type="number" pos:start="861:10" pos:end="861:11">11</literal></expr>:</case>

        <comment type="block" pos:start="863:9" pos:end="863:18">/* misc */</comment>

        <expr_stmt pos:start="865:9" pos:end="865:31"><expr pos:start="865:9" pos:end="865:30"><name pos:start="865:9" pos:end="865:10">op</name> <operator pos:start="865:12" pos:end="865:12">=</operator> <operator pos:start="865:14" pos:end="865:14">(</operator><name pos:start="865:15" pos:end="865:18">insn</name> <operator pos:start="865:20" pos:end="865:21">&gt;&gt;</operator> <literal type="number" pos:start="865:23" pos:end="865:23">8</literal><operator pos:start="865:24" pos:end="865:24">)</operator> <operator pos:start="865:26" pos:end="865:26">&amp;</operator> <literal type="number" pos:start="865:28" pos:end="865:30">0xf</literal></expr>;</expr_stmt>

        <switch pos:start="867:9" pos:end="1173:9">switch <condition pos:start="867:16" pos:end="867:19">(<expr pos:start="867:17" pos:end="867:18"><name pos:start="867:17" pos:end="867:18">op</name></expr>)</condition> <block pos:start="867:21" pos:end="1173:9">{<block_content pos:start="869:9" pos:end="1171:23">

        <case pos:start="869:9" pos:end="869:15">case <expr pos:start="869:14" pos:end="869:14"><literal type="number" pos:start="869:14" pos:end="869:14">0</literal></expr>:</case>

            <comment type="block" pos:start="871:13" pos:end="871:38">/* adjust stack pointer */</comment>

            <expr_stmt pos:start="873:13" pos:end="873:34"><expr pos:start="873:13" pos:end="873:33"><name pos:start="873:13" pos:end="873:15">tmp</name> <operator pos:start="873:17" pos:end="873:17">=</operator> <call pos:start="873:19" pos:end="873:33"><name pos:start="873:19" pos:end="873:26">load_reg</name><argument_list pos:start="873:27" pos:end="873:33">(<argument pos:start="873:28" pos:end="873:28"><expr pos:start="873:28" pos:end="873:28"><name pos:start="873:28" pos:end="873:28">s</name></expr></argument>, <argument pos:start="873:31" pos:end="873:32"><expr pos:start="873:31" pos:end="873:32"><literal type="number" pos:start="873:31" pos:end="873:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="875:13" pos:end="875:36"><expr pos:start="875:13" pos:end="875:35"><name pos:start="875:13" pos:end="875:15">val</name> <operator pos:start="875:17" pos:end="875:17">=</operator> <operator pos:start="875:19" pos:end="875:19">(</operator><name pos:start="875:20" pos:end="875:23">insn</name> <operator pos:start="875:25" pos:end="875:25">&amp;</operator> <literal type="number" pos:start="875:27" pos:end="875:30">0x7f</literal><operator pos:start="875:31" pos:end="875:31">)</operator> <operator pos:start="875:33" pos:end="875:33">*</operator> <literal type="number" pos:start="875:35" pos:end="875:35">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="877:13" pos:end="879:36"><if pos:start="877:13" pos:end="879:36">if <condition pos:start="877:16" pos:end="877:32">(<expr pos:start="877:17" pos:end="877:31"><name pos:start="877:17" pos:end="877:20">insn</name> <operator pos:start="877:22" pos:end="877:22">&amp;</operator> <operator pos:start="877:24" pos:end="877:24">(</operator><literal type="number" pos:start="877:25" pos:end="877:25">1</literal> <operator pos:start="877:27" pos:end="877:28">&lt;&lt;</operator> <literal type="number" pos:start="877:30" pos:end="877:30">7</literal><operator pos:start="877:31" pos:end="877:31">)</operator></expr>)</condition><block type="pseudo" pos:start="879:17" pos:end="879:36"><block_content pos:start="879:17" pos:end="879:36">

                <expr_stmt pos:start="879:17" pos:end="879:36"><expr pos:start="879:17" pos:end="879:35"><name pos:start="879:17" pos:end="879:19">val</name> <operator pos:start="879:21" pos:end="879:21">=</operator> <operator pos:start="879:23" pos:end="879:23">-</operator><operator pos:start="879:24" pos:end="879:24">(</operator><name pos:start="879:25" pos:end="879:31">int32_t</name><operator pos:start="879:32" pos:end="879:32">)</operator><name pos:start="879:33" pos:end="879:35">val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="881:13" pos:end="881:44"><expr pos:start="881:13" pos:end="881:43"><call pos:start="881:13" pos:end="881:43"><name pos:start="881:13" pos:end="881:28">tcg_gen_addi_i32</name><argument_list pos:start="881:29" pos:end="881:43">(<argument pos:start="881:30" pos:end="881:32"><expr pos:start="881:30" pos:end="881:32"><name pos:start="881:30" pos:end="881:32">tmp</name></expr></argument>, <argument pos:start="881:35" pos:end="881:37"><expr pos:start="881:35" pos:end="881:37"><name pos:start="881:35" pos:end="881:37">tmp</name></expr></argument>, <argument pos:start="881:40" pos:end="881:42"><expr pos:start="881:40" pos:end="881:42"><name pos:start="881:40" pos:end="881:42">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="883:13" pos:end="883:34"><expr pos:start="883:13" pos:end="883:33"><call pos:start="883:13" pos:end="883:33"><name pos:start="883:13" pos:end="883:21">store_reg</name><argument_list pos:start="883:22" pos:end="883:33">(<argument pos:start="883:23" pos:end="883:23"><expr pos:start="883:23" pos:end="883:23"><name pos:start="883:23" pos:end="883:23">s</name></expr></argument>, <argument pos:start="883:26" pos:end="883:27"><expr pos:start="883:26" pos:end="883:27"><literal type="number" pos:start="883:26" pos:end="883:27">13</literal></expr></argument>, <argument pos:start="883:30" pos:end="883:32"><expr pos:start="883:30" pos:end="883:32"><name pos:start="883:30" pos:end="883:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="885:13" pos:end="885:18">break;</break>



        <case pos:start="889:9" pos:end="889:15">case <expr pos:start="889:14" pos:end="889:14"><literal type="number" pos:start="889:14" pos:end="889:14">2</literal></expr>:</case> <comment type="block" pos:start="889:17" pos:end="889:40">/* sign/zero extend.  */</comment>

            <expr_stmt pos:start="891:13" pos:end="891:20"><expr pos:start="891:13" pos:end="891:19"><call pos:start="891:13" pos:end="891:19"><name pos:start="891:13" pos:end="891:16">ARCH</name><argument_list pos:start="891:17" pos:end="891:19">(<argument pos:start="891:18" pos:end="891:18"><expr pos:start="891:18" pos:end="891:18"><literal type="number" pos:start="891:18" pos:end="891:18">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="893:13" pos:end="893:26"><expr pos:start="893:13" pos:end="893:25"><name pos:start="893:13" pos:end="893:14">rd</name> <operator pos:start="893:16" pos:end="893:16">=</operator> <name pos:start="893:18" pos:end="893:21">insn</name> <operator pos:start="893:23" pos:end="893:23">&amp;</operator> <literal type="number" pos:start="893:25" pos:end="893:25">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="895:13" pos:end="895:33"><expr pos:start="895:13" pos:end="895:32"><name pos:start="895:13" pos:end="895:14">rm</name> <operator pos:start="895:16" pos:end="895:16">=</operator> <operator pos:start="895:18" pos:end="895:18">(</operator><name pos:start="895:19" pos:end="895:22">insn</name> <operator pos:start="895:24" pos:end="895:25">&gt;&gt;</operator> <literal type="number" pos:start="895:27" pos:end="895:27">3</literal><operator pos:start="895:28" pos:end="895:28">)</operator> <operator pos:start="895:30" pos:end="895:30">&amp;</operator> <literal type="number" pos:start="895:32" pos:end="895:32">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="897:13" pos:end="897:34"><expr pos:start="897:13" pos:end="897:33"><name pos:start="897:13" pos:end="897:15">tmp</name> <operator pos:start="897:17" pos:end="897:17">=</operator> <call pos:start="897:19" pos:end="897:33"><name pos:start="897:19" pos:end="897:26">load_reg</name><argument_list pos:start="897:27" pos:end="897:33">(<argument pos:start="897:28" pos:end="897:28"><expr pos:start="897:28" pos:end="897:28"><name pos:start="897:28" pos:end="897:28">s</name></expr></argument>, <argument pos:start="897:31" pos:end="897:32"><expr pos:start="897:31" pos:end="897:32"><name pos:start="897:31" pos:end="897:32">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="899:13" pos:end="909:13">switch <condition pos:start="899:20" pos:end="899:36">(<expr pos:start="899:21" pos:end="899:35"><operator pos:start="899:21" pos:end="899:21">(</operator><name pos:start="899:22" pos:end="899:25">insn</name> <operator pos:start="899:27" pos:end="899:28">&gt;&gt;</operator> <literal type="number" pos:start="899:30" pos:end="899:30">6</literal><operator pos:start="899:31" pos:end="899:31">)</operator> <operator pos:start="899:33" pos:end="899:33">&amp;</operator> <literal type="number" pos:start="899:35" pos:end="899:35">3</literal></expr>)</condition> <block pos:start="899:38" pos:end="909:13">{<block_content pos:start="901:13" pos:end="907:41">

            <case pos:start="901:13" pos:end="901:19">case <expr pos:start="901:18" pos:end="901:18"><literal type="number" pos:start="901:18" pos:end="901:18">0</literal></expr>:</case> <expr_stmt pos:start="901:21" pos:end="901:34"><expr pos:start="901:21" pos:end="901:33"><call pos:start="901:21" pos:end="901:33"><name pos:start="901:21" pos:end="901:28">gen_sxth</name><argument_list pos:start="901:29" pos:end="901:33">(<argument pos:start="901:30" pos:end="901:32"><expr pos:start="901:30" pos:end="901:32"><name pos:start="901:30" pos:end="901:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="901:36" pos:end="901:41">break;</break>

            <case pos:start="903:13" pos:end="903:19">case <expr pos:start="903:18" pos:end="903:18"><literal type="number" pos:start="903:18" pos:end="903:18">1</literal></expr>:</case> <expr_stmt pos:start="903:21" pos:end="903:34"><expr pos:start="903:21" pos:end="903:33"><call pos:start="903:21" pos:end="903:33"><name pos:start="903:21" pos:end="903:28">gen_sxtb</name><argument_list pos:start="903:29" pos:end="903:33">(<argument pos:start="903:30" pos:end="903:32"><expr pos:start="903:30" pos:end="903:32"><name pos:start="903:30" pos:end="903:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="903:36" pos:end="903:41">break;</break>

            <case pos:start="905:13" pos:end="905:19">case <expr pos:start="905:18" pos:end="905:18"><literal type="number" pos:start="905:18" pos:end="905:18">2</literal></expr>:</case> <expr_stmt pos:start="905:21" pos:end="905:34"><expr pos:start="905:21" pos:end="905:33"><call pos:start="905:21" pos:end="905:33"><name pos:start="905:21" pos:end="905:28">gen_uxth</name><argument_list pos:start="905:29" pos:end="905:33">(<argument pos:start="905:30" pos:end="905:32"><expr pos:start="905:30" pos:end="905:32"><name pos:start="905:30" pos:end="905:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="905:36" pos:end="905:41">break;</break>

            <case pos:start="907:13" pos:end="907:19">case <expr pos:start="907:18" pos:end="907:18"><literal type="number" pos:start="907:18" pos:end="907:18">3</literal></expr>:</case> <expr_stmt pos:start="907:21" pos:end="907:34"><expr pos:start="907:21" pos:end="907:33"><call pos:start="907:21" pos:end="907:33"><name pos:start="907:21" pos:end="907:28">gen_uxtb</name><argument_list pos:start="907:29" pos:end="907:33">(<argument pos:start="907:30" pos:end="907:32"><expr pos:start="907:30" pos:end="907:32"><name pos:start="907:30" pos:end="907:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="907:36" pos:end="907:41">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="911:13" pos:end="911:34"><expr pos:start="911:13" pos:end="911:33"><call pos:start="911:13" pos:end="911:33"><name pos:start="911:13" pos:end="911:21">store_reg</name><argument_list pos:start="911:22" pos:end="911:33">(<argument pos:start="911:23" pos:end="911:23"><expr pos:start="911:23" pos:end="911:23"><name pos:start="911:23" pos:end="911:23">s</name></expr></argument>, <argument pos:start="911:26" pos:end="911:27"><expr pos:start="911:26" pos:end="911:27"><name pos:start="911:26" pos:end="911:27">rd</name></expr></argument>, <argument pos:start="911:30" pos:end="911:32"><expr pos:start="911:30" pos:end="911:32"><name pos:start="911:30" pos:end="911:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="913:13" pos:end="913:18">break;</break>

        <case pos:start="915:9" pos:end="915:15">case <expr pos:start="915:14" pos:end="915:14"><literal type="number" pos:start="915:14" pos:end="915:14">4</literal></expr>:</case> <case pos:start="915:17" pos:end="915:23">case <expr pos:start="915:22" pos:end="915:22"><literal type="number" pos:start="915:22" pos:end="915:22">5</literal></expr>:</case> <case pos:start="915:25" pos:end="915:33">case <expr pos:start="915:30" pos:end="915:32"><literal type="number" pos:start="915:30" pos:end="915:32">0xc</literal></expr>:</case> <case pos:start="915:35" pos:end="915:43">case <expr pos:start="915:40" pos:end="915:42"><literal type="number" pos:start="915:40" pos:end="915:42">0xd</literal></expr>:</case>

            <comment type="block" pos:start="917:13" pos:end="917:26">/* push/pop */</comment>

            <expr_stmt pos:start="919:13" pos:end="919:35"><expr pos:start="919:13" pos:end="919:34"><name pos:start="919:13" pos:end="919:16">addr</name> <operator pos:start="919:18" pos:end="919:18">=</operator> <call pos:start="919:20" pos:end="919:34"><name pos:start="919:20" pos:end="919:27">load_reg</name><argument_list pos:start="919:28" pos:end="919:34">(<argument pos:start="919:29" pos:end="919:29"><expr pos:start="919:29" pos:end="919:29"><name pos:start="919:29" pos:end="919:29">s</name></expr></argument>, <argument pos:start="919:32" pos:end="919:33"><expr pos:start="919:32" pos:end="919:33"><literal type="number" pos:start="919:32" pos:end="919:33">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="921:13" pos:end="927:27"><if pos:start="921:13" pos:end="923:27">if <condition pos:start="921:16" pos:end="921:32">(<expr pos:start="921:17" pos:end="921:31"><name pos:start="921:17" pos:end="921:20">insn</name> <operator pos:start="921:22" pos:end="921:22">&amp;</operator> <operator pos:start="921:24" pos:end="921:24">(</operator><literal type="number" pos:start="921:25" pos:end="921:25">1</literal> <operator pos:start="921:27" pos:end="921:28">&lt;&lt;</operator> <literal type="number" pos:start="921:30" pos:end="921:30">8</literal><operator pos:start="921:31" pos:end="921:31">)</operator></expr>)</condition><block type="pseudo" pos:start="923:17" pos:end="923:27"><block_content pos:start="923:17" pos:end="923:27">

                <expr_stmt pos:start="923:17" pos:end="923:27"><expr pos:start="923:17" pos:end="923:26"><name pos:start="923:17" pos:end="923:22">offset</name> <operator pos:start="923:24" pos:end="923:24">=</operator> <literal type="number" pos:start="923:26" pos:end="923:26">4</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="925:13" pos:end="927:27">else<block type="pseudo" pos:start="927:17" pos:end="927:27"><block_content pos:start="927:17" pos:end="927:27">

                <expr_stmt pos:start="927:17" pos:end="927:27"><expr pos:start="927:17" pos:end="927:26"><name pos:start="927:17" pos:end="927:22">offset</name> <operator pos:start="927:24" pos:end="927:24">=</operator> <literal type="number" pos:start="927:26" pos:end="927:26">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <for pos:start="929:13" pos:end="935:13">for <control pos:start="929:17" pos:end="929:35">(<init pos:start="929:18" pos:end="929:23"><expr pos:start="929:18" pos:end="929:22"><name pos:start="929:18" pos:end="929:18">i</name> <operator pos:start="929:20" pos:end="929:20">=</operator> <literal type="number" pos:start="929:22" pos:end="929:22">0</literal></expr>;</init> <condition pos:start="929:25" pos:end="929:30"><expr pos:start="929:25" pos:end="929:29"><name pos:start="929:25" pos:end="929:25">i</name> <operator pos:start="929:27" pos:end="929:27">&lt;</operator> <literal type="number" pos:start="929:29" pos:end="929:29">8</literal></expr>;</condition> <incr pos:start="929:32" pos:end="929:34"><expr pos:start="929:32" pos:end="929:34"><name pos:start="929:32" pos:end="929:32">i</name><operator pos:start="929:33" pos:end="929:34">++</operator></expr></incr>)</control> <block pos:start="929:37" pos:end="935:13">{<block_content pos:start="931:17" pos:end="933:32">

                <if_stmt pos:start="931:17" pos:end="933:32"><if pos:start="931:17" pos:end="933:32">if <condition pos:start="931:20" pos:end="931:36">(<expr pos:start="931:21" pos:end="931:35"><name pos:start="931:21" pos:end="931:24">insn</name> <operator pos:start="931:26" pos:end="931:26">&amp;</operator> <operator pos:start="931:28" pos:end="931:28">(</operator><literal type="number" pos:start="931:29" pos:end="931:29">1</literal> <operator pos:start="931:31" pos:end="931:32">&lt;&lt;</operator> <name pos:start="931:34" pos:end="931:34">i</name><operator pos:start="931:35" pos:end="931:35">)</operator></expr>)</condition><block type="pseudo" pos:start="933:21" pos:end="933:32"><block_content pos:start="933:21" pos:end="933:32">

                    <expr_stmt pos:start="933:21" pos:end="933:32"><expr pos:start="933:21" pos:end="933:31"><name pos:start="933:21" pos:end="933:26">offset</name> <operator pos:start="933:28" pos:end="933:29">+=</operator> <literal type="number" pos:start="933:31" pos:end="933:31">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="937:13" pos:end="941:13"><if pos:start="937:13" pos:end="941:13">if <condition pos:start="937:16" pos:end="937:40">(<expr pos:start="937:17" pos:end="937:39"><operator pos:start="937:17" pos:end="937:17">(</operator><name pos:start="937:18" pos:end="937:21">insn</name> <operator pos:start="937:23" pos:end="937:23">&amp;</operator> <operator pos:start="937:25" pos:end="937:25">(</operator><literal type="number" pos:start="937:26" pos:end="937:26">1</literal> <operator pos:start="937:28" pos:end="937:29">&lt;&lt;</operator> <literal type="number" pos:start="937:31" pos:end="937:32">11</literal><operator pos:start="937:33" pos:end="937:33">)</operator><operator pos:start="937:34" pos:end="937:34">)</operator> <operator pos:start="937:36" pos:end="937:37">==</operator> <literal type="number" pos:start="937:39" pos:end="937:39">0</literal></expr>)</condition> <block pos:start="937:42" pos:end="941:13">{<block_content pos:start="939:17" pos:end="939:54">

                <expr_stmt pos:start="939:17" pos:end="939:54"><expr pos:start="939:17" pos:end="939:53"><call pos:start="939:17" pos:end="939:53"><name pos:start="939:17" pos:end="939:32">tcg_gen_addi_i32</name><argument_list pos:start="939:33" pos:end="939:53">(<argument pos:start="939:34" pos:end="939:37"><expr pos:start="939:34" pos:end="939:37"><name pos:start="939:34" pos:end="939:37">addr</name></expr></argument>, <argument pos:start="939:40" pos:end="939:43"><expr pos:start="939:40" pos:end="939:43"><name pos:start="939:40" pos:end="939:43">addr</name></expr></argument>, <argument pos:start="939:46" pos:end="939:52"><expr pos:start="939:46" pos:end="939:52"><operator pos:start="939:46" pos:end="939:46">-</operator><name pos:start="939:47" pos:end="939:52">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <for pos:start="943:13" pos:end="971:13">for <control pos:start="943:17" pos:end="943:35">(<init pos:start="943:18" pos:end="943:23"><expr pos:start="943:18" pos:end="943:22"><name pos:start="943:18" pos:end="943:18">i</name> <operator pos:start="943:20" pos:end="943:20">=</operator> <literal type="number" pos:start="943:22" pos:end="943:22">0</literal></expr>;</init> <condition pos:start="943:25" pos:end="943:30"><expr pos:start="943:25" pos:end="943:29"><name pos:start="943:25" pos:end="943:25">i</name> <operator pos:start="943:27" pos:end="943:27">&lt;</operator> <literal type="number" pos:start="943:29" pos:end="943:29">8</literal></expr>;</condition> <incr pos:start="943:32" pos:end="943:34"><expr pos:start="943:32" pos:end="943:34"><name pos:start="943:32" pos:end="943:32">i</name><operator pos:start="943:33" pos:end="943:34">++</operator></expr></incr>)</control> <block pos:start="943:37" pos:end="971:13">{<block_content pos:start="945:17" pos:end="969:17">

                <if_stmt pos:start="945:17" pos:end="969:17"><if pos:start="945:17" pos:end="969:17">if <condition pos:start="945:20" pos:end="945:36">(<expr pos:start="945:21" pos:end="945:35"><name pos:start="945:21" pos:end="945:24">insn</name> <operator pos:start="945:26" pos:end="945:26">&amp;</operator> <operator pos:start="945:28" pos:end="945:28">(</operator><literal type="number" pos:start="945:29" pos:end="945:29">1</literal> <operator pos:start="945:31" pos:end="945:32">&lt;&lt;</operator> <name pos:start="945:34" pos:end="945:34">i</name><operator pos:start="945:35" pos:end="945:35">)</operator></expr>)</condition> <block pos:start="945:38" pos:end="969:17">{<block_content pos:start="947:21" pos:end="967:52">

                    <if_stmt pos:start="947:21" pos:end="963:21"><if pos:start="947:21" pos:end="955:21">if <condition pos:start="947:24" pos:end="947:41">(<expr pos:start="947:25" pos:end="947:40"><name pos:start="947:25" pos:end="947:28">insn</name> <operator pos:start="947:30" pos:end="947:30">&amp;</operator> <operator pos:start="947:32" pos:end="947:32">(</operator><literal type="number" pos:start="947:33" pos:end="947:33">1</literal> <operator pos:start="947:35" pos:end="947:36">&lt;&lt;</operator> <literal type="number" pos:start="947:38" pos:end="947:39">11</literal><operator pos:start="947:40" pos:end="947:40">)</operator></expr>)</condition> <block pos:start="947:43" pos:end="955:21">{<block_content pos:start="951:25" pos:end="953:45">

                        <comment type="block" pos:start="949:25" pos:end="949:33">/* pop */</comment>

                        <expr_stmt pos:start="951:25" pos:end="951:57"><expr pos:start="951:25" pos:end="951:56"><name pos:start="951:25" pos:end="951:27">tmp</name> <operator pos:start="951:29" pos:end="951:29">=</operator> <call pos:start="951:31" pos:end="951:56"><name pos:start="951:31" pos:end="951:38">gen_ld32</name><argument_list pos:start="951:39" pos:end="951:56">(<argument pos:start="951:40" pos:end="951:43"><expr pos:start="951:40" pos:end="951:43"><name pos:start="951:40" pos:end="951:43">addr</name></expr></argument>, <argument pos:start="951:46" pos:end="951:55"><expr pos:start="951:46" pos:end="951:55"><call pos:start="951:46" pos:end="951:55"><name pos:start="951:46" pos:end="951:52">IS_USER</name><argument_list pos:start="951:53" pos:end="951:55">(<argument pos:start="951:54" pos:end="951:54"><expr pos:start="951:54" pos:end="951:54"><name pos:start="951:54" pos:end="951:54">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="953:25" pos:end="953:45"><expr pos:start="953:25" pos:end="953:44"><call pos:start="953:25" pos:end="953:44"><name pos:start="953:25" pos:end="953:33">store_reg</name><argument_list pos:start="953:34" pos:end="953:44">(<argument pos:start="953:35" pos:end="953:35"><expr pos:start="953:35" pos:end="953:35"><name pos:start="953:35" pos:end="953:35">s</name></expr></argument>, <argument pos:start="953:38" pos:end="953:38"><expr pos:start="953:38" pos:end="953:38"><name pos:start="953:38" pos:end="953:38">i</name></expr></argument>, <argument pos:start="953:41" pos:end="953:43"><expr pos:start="953:41" pos:end="953:43"><name pos:start="953:41" pos:end="953:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="955:23" pos:end="963:21">else <block pos:start="955:28" pos:end="963:21">{<block_content pos:start="959:25" pos:end="961:56">

                        <comment type="block" pos:start="957:25" pos:end="957:34">/* push */</comment>

                        <expr_stmt pos:start="959:25" pos:end="959:45"><expr pos:start="959:25" pos:end="959:44"><name pos:start="959:25" pos:end="959:27">tmp</name> <operator pos:start="959:29" pos:end="959:29">=</operator> <call pos:start="959:31" pos:end="959:44"><name pos:start="959:31" pos:end="959:38">load_reg</name><argument_list pos:start="959:39" pos:end="959:44">(<argument pos:start="959:40" pos:end="959:40"><expr pos:start="959:40" pos:end="959:40"><name pos:start="959:40" pos:end="959:40">s</name></expr></argument>, <argument pos:start="959:43" pos:end="959:43"><expr pos:start="959:43" pos:end="959:43"><name pos:start="959:43" pos:end="959:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="961:25" pos:end="961:56"><expr pos:start="961:25" pos:end="961:55"><call pos:start="961:25" pos:end="961:55"><name pos:start="961:25" pos:end="961:32">gen_st32</name><argument_list pos:start="961:33" pos:end="961:55">(<argument pos:start="961:34" pos:end="961:36"><expr pos:start="961:34" pos:end="961:36"><name pos:start="961:34" pos:end="961:36">tmp</name></expr></argument>, <argument pos:start="961:39" pos:end="961:42"><expr pos:start="961:39" pos:end="961:42"><name pos:start="961:39" pos:end="961:42">addr</name></expr></argument>, <argument pos:start="961:45" pos:end="961:54"><expr pos:start="961:45" pos:end="961:54"><call pos:start="961:45" pos:end="961:54"><name pos:start="961:45" pos:end="961:51">IS_USER</name><argument_list pos:start="961:52" pos:end="961:54">(<argument pos:start="961:53" pos:end="961:53"><expr pos:start="961:53" pos:end="961:53"><name pos:start="961:53" pos:end="961:53">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <comment type="block" pos:start="965:21" pos:end="965:55">/* advance to the next address.  */</comment>

                    <expr_stmt pos:start="967:21" pos:end="967:52"><expr pos:start="967:21" pos:end="967:51"><call pos:start="967:21" pos:end="967:51"><name pos:start="967:21" pos:end="967:36">tcg_gen_addi_i32</name><argument_list pos:start="967:37" pos:end="967:51">(<argument pos:start="967:38" pos:end="967:41"><expr pos:start="967:38" pos:end="967:41"><name pos:start="967:38" pos:end="967:41">addr</name></expr></argument>, <argument pos:start="967:44" pos:end="967:47"><expr pos:start="967:44" pos:end="967:47"><name pos:start="967:44" pos:end="967:47">addr</name></expr></argument>, <argument pos:start="967:50" pos:end="967:50"><expr pos:start="967:50" pos:end="967:50"><literal type="number" pos:start="967:50" pos:end="967:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="973:13" pos:end="973:29"><expr pos:start="973:13" pos:end="973:28"><call pos:start="973:13" pos:end="973:28"><name pos:start="973:13" pos:end="973:23">TCGV_UNUSED</name><argument_list pos:start="973:24" pos:end="973:28">(<argument pos:start="973:25" pos:end="973:27"><expr pos:start="973:25" pos:end="973:27"><name pos:start="973:25" pos:end="973:27">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="975:13" pos:end="999:13"><if pos:start="975:13" pos:end="999:13">if <condition pos:start="975:16" pos:end="975:32">(<expr pos:start="975:17" pos:end="975:31"><name pos:start="975:17" pos:end="975:20">insn</name> <operator pos:start="975:22" pos:end="975:22">&amp;</operator> <operator pos:start="975:24" pos:end="975:24">(</operator><literal type="number" pos:start="975:25" pos:end="975:25">1</literal> <operator pos:start="975:27" pos:end="975:28">&lt;&lt;</operator> <literal type="number" pos:start="975:30" pos:end="975:30">8</literal><operator pos:start="975:31" pos:end="975:31">)</operator></expr>)</condition> <block pos:start="975:34" pos:end="999:13">{<block_content pos:start="977:17" pos:end="997:48">

                <if_stmt pos:start="977:17" pos:end="995:17"><if pos:start="977:17" pos:end="987:17">if <condition pos:start="977:20" pos:end="977:37">(<expr pos:start="977:21" pos:end="977:36"><name pos:start="977:21" pos:end="977:24">insn</name> <operator pos:start="977:26" pos:end="977:26">&amp;</operator> <operator pos:start="977:28" pos:end="977:28">(</operator><literal type="number" pos:start="977:29" pos:end="977:29">1</literal> <operator pos:start="977:31" pos:end="977:32">&lt;&lt;</operator> <literal type="number" pos:start="977:34" pos:end="977:35">11</literal><operator pos:start="977:36" pos:end="977:36">)</operator></expr>)</condition> <block pos:start="977:39" pos:end="987:17">{<block_content pos:start="981:21" pos:end="981:53">

                    <comment type="block" pos:start="979:21" pos:end="979:32">/* pop pc */</comment>

                    <expr_stmt pos:start="981:21" pos:end="981:53"><expr pos:start="981:21" pos:end="981:52"><name pos:start="981:21" pos:end="981:23">tmp</name> <operator pos:start="981:25" pos:end="981:25">=</operator> <call pos:start="981:27" pos:end="981:52"><name pos:start="981:27" pos:end="981:34">gen_ld32</name><argument_list pos:start="981:35" pos:end="981:52">(<argument pos:start="981:36" pos:end="981:39"><expr pos:start="981:36" pos:end="981:39"><name pos:start="981:36" pos:end="981:39">addr</name></expr></argument>, <argument pos:start="981:42" pos:end="981:51"><expr pos:start="981:42" pos:end="981:51"><call pos:start="981:42" pos:end="981:51"><name pos:start="981:42" pos:end="981:48">IS_USER</name><argument_list pos:start="981:49" pos:end="981:51">(<argument pos:start="981:50" pos:end="981:50"><expr pos:start="981:50" pos:end="981:50"><name pos:start="981:50" pos:end="981:50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="983:21" pos:end="985:39">/* don't set the pc until the rest of the instruction

                       has completed */</comment>

                </block_content>}</block></if> <else pos:start="987:19" pos:end="995:17">else <block pos:start="987:24" pos:end="995:17">{<block_content pos:start="991:21" pos:end="993:52">

                    <comment type="block" pos:start="989:21" pos:end="989:33">/* push lr */</comment>

                    <expr_stmt pos:start="991:21" pos:end="991:42"><expr pos:start="991:21" pos:end="991:41"><name pos:start="991:21" pos:end="991:23">tmp</name> <operator pos:start="991:25" pos:end="991:25">=</operator> <call pos:start="991:27" pos:end="991:41"><name pos:start="991:27" pos:end="991:34">load_reg</name><argument_list pos:start="991:35" pos:end="991:41">(<argument pos:start="991:36" pos:end="991:36"><expr pos:start="991:36" pos:end="991:36"><name pos:start="991:36" pos:end="991:36">s</name></expr></argument>, <argument pos:start="991:39" pos:end="991:40"><expr pos:start="991:39" pos:end="991:40"><literal type="number" pos:start="991:39" pos:end="991:40">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="993:21" pos:end="993:52"><expr pos:start="993:21" pos:end="993:51"><call pos:start="993:21" pos:end="993:51"><name pos:start="993:21" pos:end="993:28">gen_st32</name><argument_list pos:start="993:29" pos:end="993:51">(<argument pos:start="993:30" pos:end="993:32"><expr pos:start="993:30" pos:end="993:32"><name pos:start="993:30" pos:end="993:32">tmp</name></expr></argument>, <argument pos:start="993:35" pos:end="993:38"><expr pos:start="993:35" pos:end="993:38"><name pos:start="993:35" pos:end="993:38">addr</name></expr></argument>, <argument pos:start="993:41" pos:end="993:50"><expr pos:start="993:41" pos:end="993:50"><call pos:start="993:41" pos:end="993:50"><name pos:start="993:41" pos:end="993:47">IS_USER</name><argument_list pos:start="993:48" pos:end="993:50">(<argument pos:start="993:49" pos:end="993:49"><expr pos:start="993:49" pos:end="993:49"><name pos:start="993:49" pos:end="993:49">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="997:17" pos:end="997:48"><expr pos:start="997:17" pos:end="997:47"><call pos:start="997:17" pos:end="997:47"><name pos:start="997:17" pos:end="997:32">tcg_gen_addi_i32</name><argument_list pos:start="997:33" pos:end="997:47">(<argument pos:start="997:34" pos:end="997:37"><expr pos:start="997:34" pos:end="997:37"><name pos:start="997:34" pos:end="997:37">addr</name></expr></argument>, <argument pos:start="997:40" pos:end="997:43"><expr pos:start="997:40" pos:end="997:43"><name pos:start="997:40" pos:end="997:43">addr</name></expr></argument>, <argument pos:start="997:46" pos:end="997:46"><expr pos:start="997:46" pos:end="997:46"><literal type="number" pos:start="997:46" pos:end="997:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1001:13" pos:end="1005:13"><if pos:start="1001:13" pos:end="1005:13">if <condition pos:start="1001:16" pos:end="1001:40">(<expr pos:start="1001:17" pos:end="1001:39"><operator pos:start="1001:17" pos:end="1001:17">(</operator><name pos:start="1001:18" pos:end="1001:21">insn</name> <operator pos:start="1001:23" pos:end="1001:23">&amp;</operator> <operator pos:start="1001:25" pos:end="1001:25">(</operator><literal type="number" pos:start="1001:26" pos:end="1001:26">1</literal> <operator pos:start="1001:28" pos:end="1001:29">&lt;&lt;</operator> <literal type="number" pos:start="1001:31" pos:end="1001:32">11</literal><operator pos:start="1001:33" pos:end="1001:33">)</operator><operator pos:start="1001:34" pos:end="1001:34">)</operator> <operator pos:start="1001:36" pos:end="1001:37">==</operator> <literal type="number" pos:start="1001:39" pos:end="1001:39">0</literal></expr>)</condition> <block pos:start="1001:42" pos:end="1005:13">{<block_content pos:start="1003:17" pos:end="1003:54">

                <expr_stmt pos:start="1003:17" pos:end="1003:54"><expr pos:start="1003:17" pos:end="1003:53"><call pos:start="1003:17" pos:end="1003:53"><name pos:start="1003:17" pos:end="1003:32">tcg_gen_addi_i32</name><argument_list pos:start="1003:33" pos:end="1003:53">(<argument pos:start="1003:34" pos:end="1003:37"><expr pos:start="1003:34" pos:end="1003:37"><name pos:start="1003:34" pos:end="1003:37">addr</name></expr></argument>, <argument pos:start="1003:40" pos:end="1003:43"><expr pos:start="1003:40" pos:end="1003:43"><name pos:start="1003:40" pos:end="1003:43">addr</name></expr></argument>, <argument pos:start="1003:46" pos:end="1003:52"><expr pos:start="1003:46" pos:end="1003:52"><operator pos:start="1003:46" pos:end="1003:46">-</operator><name pos:start="1003:47" pos:end="1003:52">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1007:13" pos:end="1007:50">/* write back the new stack pointer */</comment>

            <expr_stmt pos:start="1009:13" pos:end="1009:35"><expr pos:start="1009:13" pos:end="1009:34"><call pos:start="1009:13" pos:end="1009:34"><name pos:start="1009:13" pos:end="1009:21">store_reg</name><argument_list pos:start="1009:22" pos:end="1009:34">(<argument pos:start="1009:23" pos:end="1009:23"><expr pos:start="1009:23" pos:end="1009:23"><name pos:start="1009:23" pos:end="1009:23">s</name></expr></argument>, <argument pos:start="1009:26" pos:end="1009:27"><expr pos:start="1009:26" pos:end="1009:27"><literal type="number" pos:start="1009:26" pos:end="1009:27">13</literal></expr></argument>, <argument pos:start="1009:30" pos:end="1009:33"><expr pos:start="1009:30" pos:end="1009:33"><name pos:start="1009:30" pos:end="1009:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1011:13" pos:end="1011:38">/* set the new PC value */</comment>

            <if_stmt pos:start="1013:13" pos:end="1015:31"><if pos:start="1013:13" pos:end="1015:31">if <condition pos:start="1013:16" pos:end="1013:42">(<expr pos:start="1013:17" pos:end="1013:41"><operator pos:start="1013:17" pos:end="1013:17">(</operator><name pos:start="1013:18" pos:end="1013:21">insn</name> <operator pos:start="1013:23" pos:end="1013:23">&amp;</operator> <literal type="number" pos:start="1013:25" pos:end="1013:30">0x0900</literal><operator pos:start="1013:31" pos:end="1013:31">)</operator> <operator pos:start="1013:33" pos:end="1013:34">==</operator> <literal type="number" pos:start="1013:36" pos:end="1013:41">0x0900</literal></expr>)</condition><block type="pseudo" pos:start="1015:17" pos:end="1015:31"><block_content pos:start="1015:17" pos:end="1015:31">

                <expr_stmt pos:start="1015:17" pos:end="1015:31"><expr pos:start="1015:17" pos:end="1015:30"><call pos:start="1015:17" pos:end="1015:30"><name pos:start="1015:17" pos:end="1015:22">gen_bx</name><argument_list pos:start="1015:23" pos:end="1015:30">(<argument pos:start="1015:24" pos:end="1015:24"><expr pos:start="1015:24" pos:end="1015:24"><name pos:start="1015:24" pos:end="1015:24">s</name></expr></argument>, <argument pos:start="1015:27" pos:end="1015:29"><expr pos:start="1015:27" pos:end="1015:29"><name pos:start="1015:27" pos:end="1015:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="1017:13" pos:end="1017:18">break;</break>



        <case pos:start="1021:9" pos:end="1021:15">case <expr pos:start="1021:14" pos:end="1021:14"><literal type="number" pos:start="1021:14" pos:end="1021:14">1</literal></expr>:</case> <case pos:start="1021:17" pos:end="1021:23">case <expr pos:start="1021:22" pos:end="1021:22"><literal type="number" pos:start="1021:22" pos:end="1021:22">3</literal></expr>:</case> <case pos:start="1021:25" pos:end="1021:31">case <expr pos:start="1021:30" pos:end="1021:30"><literal type="number" pos:start="1021:30" pos:end="1021:30">9</literal></expr>:</case> <case pos:start="1021:33" pos:end="1021:40">case <expr pos:start="1021:38" pos:end="1021:39"><literal type="number" pos:start="1021:38" pos:end="1021:39">11</literal></expr>:</case> <comment type="block" pos:start="1021:42" pos:end="1021:50">/* czb */</comment>

            <expr_stmt pos:start="1023:13" pos:end="1023:26"><expr pos:start="1023:13" pos:end="1023:25"><name pos:start="1023:13" pos:end="1023:14">rm</name> <operator pos:start="1023:16" pos:end="1023:16">=</operator> <name pos:start="1023:18" pos:end="1023:21">insn</name> <operator pos:start="1023:23" pos:end="1023:23">&amp;</operator> <literal type="number" pos:start="1023:25" pos:end="1023:25">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1025:13" pos:end="1025:34"><expr pos:start="1025:13" pos:end="1025:33"><name pos:start="1025:13" pos:end="1025:15">tmp</name> <operator pos:start="1025:17" pos:end="1025:17">=</operator> <call pos:start="1025:19" pos:end="1025:33"><name pos:start="1025:19" pos:end="1025:26">load_reg</name><argument_list pos:start="1025:27" pos:end="1025:33">(<argument pos:start="1025:28" pos:end="1025:28"><expr pos:start="1025:28" pos:end="1025:28"><name pos:start="1025:28" pos:end="1025:28">s</name></expr></argument>, <argument pos:start="1025:31" pos:end="1025:32"><expr pos:start="1025:31" pos:end="1025:32"><name pos:start="1025:31" pos:end="1025:32">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1027:13" pos:end="1027:43"><expr pos:start="1027:13" pos:end="1027:42"><name pos:start="1027:13" pos:end="1027:24"><name pos:start="1027:13" pos:end="1027:13">s</name><operator pos:start="1027:14" pos:end="1027:15">-&gt;</operator><name pos:start="1027:16" pos:end="1027:24">condlabel</name></name> <operator pos:start="1027:26" pos:end="1027:26">=</operator> <call pos:start="1027:28" pos:end="1027:42"><name pos:start="1027:28" pos:end="1027:40">gen_new_label</name><argument_list pos:start="1027:41" pos:end="1027:42">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1029:13" pos:end="1029:27"><expr pos:start="1029:13" pos:end="1029:26"><name pos:start="1029:13" pos:end="1029:22"><name pos:start="1029:13" pos:end="1029:13">s</name><operator pos:start="1029:14" pos:end="1029:15">-&gt;</operator><name pos:start="1029:16" pos:end="1029:22">condjmp</name></name> <operator pos:start="1029:24" pos:end="1029:24">=</operator> <literal type="number" pos:start="1029:26" pos:end="1029:26">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1031:13" pos:end="1037:71"><if pos:start="1031:13" pos:end="1033:71">if <condition pos:start="1031:16" pos:end="1031:33">(<expr pos:start="1031:17" pos:end="1031:32"><name pos:start="1031:17" pos:end="1031:20">insn</name> <operator pos:start="1031:22" pos:end="1031:22">&amp;</operator> <operator pos:start="1031:24" pos:end="1031:24">(</operator><literal type="number" pos:start="1031:25" pos:end="1031:25">1</literal> <operator pos:start="1031:27" pos:end="1031:28">&lt;&lt;</operator> <literal type="number" pos:start="1031:30" pos:end="1031:31">11</literal><operator pos:start="1031:32" pos:end="1031:32">)</operator></expr>)</condition><block type="pseudo" pos:start="1033:17" pos:end="1033:71"><block_content pos:start="1033:17" pos:end="1033:71">

                <expr_stmt pos:start="1033:17" pos:end="1033:71"><expr pos:start="1033:17" pos:end="1033:70"><call pos:start="1033:17" pos:end="1033:70"><name pos:start="1033:17" pos:end="1033:35">tcg_gen_brcondi_i32</name><argument_list pos:start="1033:36" pos:end="1033:70">(<argument pos:start="1033:37" pos:end="1033:47"><expr pos:start="1033:37" pos:end="1033:47"><name pos:start="1033:37" pos:end="1033:47">TCG_COND_EQ</name></expr></argument>, <argument pos:start="1033:50" pos:end="1033:52"><expr pos:start="1033:50" pos:end="1033:52"><name pos:start="1033:50" pos:end="1033:52">tmp</name></expr></argument>, <argument pos:start="1033:55" pos:end="1033:55"><expr pos:start="1033:55" pos:end="1033:55"><literal type="number" pos:start="1033:55" pos:end="1033:55">0</literal></expr></argument>, <argument pos:start="1033:58" pos:end="1033:69"><expr pos:start="1033:58" pos:end="1033:69"><name pos:start="1033:58" pos:end="1033:69"><name pos:start="1033:58" pos:end="1033:58">s</name><operator pos:start="1033:59" pos:end="1033:60">-&gt;</operator><name pos:start="1033:61" pos:end="1033:69">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1035:13" pos:end="1037:71">else<block type="pseudo" pos:start="1037:17" pos:end="1037:71"><block_content pos:start="1037:17" pos:end="1037:71">

                <expr_stmt pos:start="1037:17" pos:end="1037:71"><expr pos:start="1037:17" pos:end="1037:70"><call pos:start="1037:17" pos:end="1037:70"><name pos:start="1037:17" pos:end="1037:35">tcg_gen_brcondi_i32</name><argument_list pos:start="1037:36" pos:end="1037:70">(<argument pos:start="1037:37" pos:end="1037:47"><expr pos:start="1037:37" pos:end="1037:47"><name pos:start="1037:37" pos:end="1037:47">TCG_COND_NE</name></expr></argument>, <argument pos:start="1037:50" pos:end="1037:52"><expr pos:start="1037:50" pos:end="1037:52"><name pos:start="1037:50" pos:end="1037:52">tmp</name></expr></argument>, <argument pos:start="1037:55" pos:end="1037:55"><expr pos:start="1037:55" pos:end="1037:55"><literal type="number" pos:start="1037:55" pos:end="1037:55">0</literal></expr></argument>, <argument pos:start="1037:58" pos:end="1037:69"><expr pos:start="1037:58" pos:end="1037:69"><name pos:start="1037:58" pos:end="1037:69"><name pos:start="1037:58" pos:end="1037:58">s</name><operator pos:start="1037:59" pos:end="1037:60">-&gt;</operator><name pos:start="1037:61" pos:end="1037:69">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1039:13" pos:end="1039:26"><expr pos:start="1039:13" pos:end="1039:25"><call pos:start="1039:13" pos:end="1039:25"><name pos:start="1039:13" pos:end="1039:20">dead_tmp</name><argument_list pos:start="1039:21" pos:end="1039:25">(<argument pos:start="1039:22" pos:end="1039:24"><expr pos:start="1039:22" pos:end="1039:24"><name pos:start="1039:22" pos:end="1039:24">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1041:13" pos:end="1041:64"><expr pos:start="1041:13" pos:end="1041:63"><name pos:start="1041:13" pos:end="1041:18">offset</name> <operator pos:start="1041:20" pos:end="1041:20">=</operator> <operator pos:start="1041:22" pos:end="1041:22">(</operator><operator pos:start="1041:23" pos:end="1041:23">(</operator><name pos:start="1041:24" pos:end="1041:27">insn</name> <operator pos:start="1041:29" pos:end="1041:29">&amp;</operator> <literal type="number" pos:start="1041:31" pos:end="1041:34">0xf8</literal><operator pos:start="1041:35" pos:end="1041:35">)</operator> <operator pos:start="1041:37" pos:end="1041:38">&gt;&gt;</operator> <literal type="number" pos:start="1041:40" pos:end="1041:40">2</literal><operator pos:start="1041:41" pos:end="1041:41">)</operator> <operator pos:start="1041:43" pos:end="1041:43">|</operator> <operator pos:start="1041:45" pos:end="1041:45">(</operator><name pos:start="1041:46" pos:end="1041:49">insn</name> <operator pos:start="1041:51" pos:end="1041:51">&amp;</operator> <literal type="number" pos:start="1041:53" pos:end="1041:57">0x200</literal><operator pos:start="1041:58" pos:end="1041:58">)</operator> <operator pos:start="1041:60" pos:end="1041:61">&gt;&gt;</operator> <literal type="number" pos:start="1041:63" pos:end="1041:63">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1043:13" pos:end="1043:38"><expr pos:start="1043:13" pos:end="1043:37"><name pos:start="1043:13" pos:end="1043:15">val</name> <operator pos:start="1043:17" pos:end="1043:17">=</operator> <operator pos:start="1043:19" pos:end="1043:19">(</operator><name pos:start="1043:20" pos:end="1043:27">uint32_t</name><operator pos:start="1043:28" pos:end="1043:28">)</operator><name pos:start="1043:29" pos:end="1043:33"><name pos:start="1043:29" pos:end="1043:29">s</name><operator pos:start="1043:30" pos:end="1043:31">-&gt;</operator><name pos:start="1043:32" pos:end="1043:33">pc</name></name> <operator pos:start="1043:35" pos:end="1043:35">+</operator> <literal type="number" pos:start="1043:37" pos:end="1043:37">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1045:13" pos:end="1045:26"><expr pos:start="1045:13" pos:end="1045:25"><name pos:start="1045:13" pos:end="1045:15">val</name> <operator pos:start="1045:17" pos:end="1045:18">+=</operator> <name pos:start="1045:20" pos:end="1045:25">offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1047:13" pos:end="1047:28"><expr pos:start="1047:13" pos:end="1047:27"><call pos:start="1047:13" pos:end="1047:27"><name pos:start="1047:13" pos:end="1047:19">gen_jmp</name><argument_list pos:start="1047:20" pos:end="1047:27">(<argument pos:start="1047:21" pos:end="1047:21"><expr pos:start="1047:21" pos:end="1047:21"><name pos:start="1047:21" pos:end="1047:21">s</name></expr></argument>, <argument pos:start="1047:24" pos:end="1047:26"><expr pos:start="1047:24" pos:end="1047:26"><name pos:start="1047:24" pos:end="1047:26">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1049:13" pos:end="1049:18">break;</break>



        <case pos:start="1053:9" pos:end="1053:16">case <expr pos:start="1053:14" pos:end="1053:15"><literal type="number" pos:start="1053:14" pos:end="1053:15">15</literal></expr>:</case> <comment type="block" pos:start="1053:18" pos:end="1053:37">/* IT, nop-hint.  */</comment>

            <if_stmt pos:start="1055:13" pos:end="1061:13"><if pos:start="1055:13" pos:end="1061:13">if <condition pos:start="1055:16" pos:end="1055:34">(<expr pos:start="1055:17" pos:end="1055:33"><operator pos:start="1055:17" pos:end="1055:17">(</operator><name pos:start="1055:18" pos:end="1055:21">insn</name> <operator pos:start="1055:23" pos:end="1055:23">&amp;</operator> <literal type="number" pos:start="1055:25" pos:end="1055:27">0xf</literal><operator pos:start="1055:28" pos:end="1055:28">)</operator> <operator pos:start="1055:30" pos:end="1055:31">==</operator> <literal type="number" pos:start="1055:33" pos:end="1055:33">0</literal></expr>)</condition> <block pos:start="1055:36" pos:end="1061:13">{<block_content pos:start="1057:17" pos:end="1059:22">

                <expr_stmt pos:start="1057:17" pos:end="1057:51"><expr pos:start="1057:17" pos:end="1057:50"><call pos:start="1057:17" pos:end="1057:50"><name pos:start="1057:17" pos:end="1057:28">gen_nop_hint</name><argument_list pos:start="1057:29" pos:end="1057:50">(<argument pos:start="1057:30" pos:end="1057:30"><expr pos:start="1057:30" pos:end="1057:30"><name pos:start="1057:30" pos:end="1057:30">s</name></expr></argument>, <argument pos:start="1057:33" pos:end="1057:49"><expr pos:start="1057:33" pos:end="1057:49"><operator pos:start="1057:33" pos:end="1057:33">(</operator><name pos:start="1057:34" pos:end="1057:37">insn</name> <operator pos:start="1057:39" pos:end="1057:40">&gt;&gt;</operator> <literal type="number" pos:start="1057:42" pos:end="1057:42">4</literal><operator pos:start="1057:43" pos:end="1057:43">)</operator> <operator pos:start="1057:45" pos:end="1057:45">&amp;</operator> <literal type="number" pos:start="1057:47" pos:end="1057:49">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1059:17" pos:end="1059:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1063:13" pos:end="1063:27">/* If Then.  */</comment>

            <expr_stmt pos:start="1065:13" pos:end="1065:49"><expr pos:start="1065:13" pos:end="1065:48"><name pos:start="1065:13" pos:end="1065:28"><name pos:start="1065:13" pos:end="1065:13">s</name><operator pos:start="1065:14" pos:end="1065:15">-&gt;</operator><name pos:start="1065:16" pos:end="1065:28">condexec_cond</name></name> <operator pos:start="1065:30" pos:end="1065:30">=</operator> <operator pos:start="1065:32" pos:end="1065:32">(</operator><name pos:start="1065:33" pos:end="1065:36">insn</name> <operator pos:start="1065:38" pos:end="1065:39">&gt;&gt;</operator> <literal type="number" pos:start="1065:41" pos:end="1065:41">4</literal><operator pos:start="1065:42" pos:end="1065:42">)</operator> <operator pos:start="1065:44" pos:end="1065:44">&amp;</operator> <literal type="number" pos:start="1065:46" pos:end="1065:48">0xe</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1067:13" pos:end="1067:43"><expr pos:start="1067:13" pos:end="1067:42"><name pos:start="1067:13" pos:end="1067:28"><name pos:start="1067:13" pos:end="1067:13">s</name><operator pos:start="1067:14" pos:end="1067:15">-&gt;</operator><name pos:start="1067:16" pos:end="1067:28">condexec_mask</name></name> <operator pos:start="1067:30" pos:end="1067:30">=</operator> <name pos:start="1067:32" pos:end="1067:35">insn</name> <operator pos:start="1067:37" pos:end="1067:37">&amp;</operator> <literal type="number" pos:start="1067:39" pos:end="1067:42">0x1f</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="1069:13" pos:end="1069:76">/* No actual code generated for this insn, just setup state.  */</comment>

            <break pos:start="1071:13" pos:end="1071:18">break;</break>



        <case pos:start="1075:9" pos:end="1075:17">case <expr pos:start="1075:14" pos:end="1075:16"><literal type="number" pos:start="1075:14" pos:end="1075:16">0xe</literal></expr>:</case> <comment type="block" pos:start="1075:19" pos:end="1075:28">/* bkpt */</comment>

            <expr_stmt pos:start="1077:13" pos:end="1077:48"><expr pos:start="1077:13" pos:end="1077:47"><call pos:start="1077:13" pos:end="1077:47"><name pos:start="1077:13" pos:end="1077:30">gen_exception_insn</name><argument_list pos:start="1077:31" pos:end="1077:47">(<argument pos:start="1077:32" pos:end="1077:32"><expr pos:start="1077:32" pos:end="1077:32"><name pos:start="1077:32" pos:end="1077:32">s</name></expr></argument>, <argument pos:start="1077:35" pos:end="1077:35"><expr pos:start="1077:35" pos:end="1077:35"><literal type="number" pos:start="1077:35" pos:end="1077:35">2</literal></expr></argument>, <argument pos:start="1077:38" pos:end="1077:46"><expr pos:start="1077:38" pos:end="1077:46"><name pos:start="1077:38" pos:end="1077:46">EXCP_BKPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1079:13" pos:end="1079:18">break;</break>



        <case pos:start="1083:9" pos:end="1083:17">case <expr pos:start="1083:14" pos:end="1083:16"><literal type="number" pos:start="1083:14" pos:end="1083:16">0xa</literal></expr>:</case> <comment type="block" pos:start="1083:19" pos:end="1083:27">/* rev */</comment>

            <expr_stmt pos:start="1085:13" pos:end="1085:20"><expr pos:start="1085:13" pos:end="1085:19"><call pos:start="1085:13" pos:end="1085:19"><name pos:start="1085:13" pos:end="1085:16">ARCH</name><argument_list pos:start="1085:17" pos:end="1085:19">(<argument pos:start="1085:18" pos:end="1085:18"><expr pos:start="1085:18" pos:end="1085:18"><literal type="number" pos:start="1085:18" pos:end="1085:18">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1087:13" pos:end="1087:35"><expr pos:start="1087:13" pos:end="1087:34"><name pos:start="1087:13" pos:end="1087:14">rn</name> <operator pos:start="1087:16" pos:end="1087:16">=</operator> <operator pos:start="1087:18" pos:end="1087:18">(</operator><name pos:start="1087:19" pos:end="1087:22">insn</name> <operator pos:start="1087:24" pos:end="1087:25">&gt;&gt;</operator> <literal type="number" pos:start="1087:27" pos:end="1087:27">3</literal><operator pos:start="1087:28" pos:end="1087:28">)</operator> <operator pos:start="1087:30" pos:end="1087:30">&amp;</operator> <literal type="number" pos:start="1087:32" pos:end="1087:34">0x7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1089:13" pos:end="1089:28"><expr pos:start="1089:13" pos:end="1089:27"><name pos:start="1089:13" pos:end="1089:14">rd</name> <operator pos:start="1089:16" pos:end="1089:16">=</operator> <name pos:start="1089:18" pos:end="1089:21">insn</name> <operator pos:start="1089:23" pos:end="1089:23">&amp;</operator> <literal type="number" pos:start="1089:25" pos:end="1089:27">0x7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1091:13" pos:end="1091:34"><expr pos:start="1091:13" pos:end="1091:33"><name pos:start="1091:13" pos:end="1091:15">tmp</name> <operator pos:start="1091:17" pos:end="1091:17">=</operator> <call pos:start="1091:19" pos:end="1091:33"><name pos:start="1091:19" pos:end="1091:26">load_reg</name><argument_list pos:start="1091:27" pos:end="1091:33">(<argument pos:start="1091:28" pos:end="1091:28"><expr pos:start="1091:28" pos:end="1091:28"><name pos:start="1091:28" pos:end="1091:28">s</name></expr></argument>, <argument pos:start="1091:31" pos:end="1091:32"><expr pos:start="1091:31" pos:end="1091:32"><name pos:start="1091:31" pos:end="1091:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="1093:13" pos:end="1103:13">switch <condition pos:start="1093:20" pos:end="1093:36">(<expr pos:start="1093:21" pos:end="1093:35"><operator pos:start="1093:21" pos:end="1093:21">(</operator><name pos:start="1093:22" pos:end="1093:25">insn</name> <operator pos:start="1093:27" pos:end="1093:28">&gt;&gt;</operator> <literal type="number" pos:start="1093:30" pos:end="1093:30">6</literal><operator pos:start="1093:31" pos:end="1093:31">)</operator> <operator pos:start="1093:33" pos:end="1093:33">&amp;</operator> <literal type="number" pos:start="1093:35" pos:end="1093:35">3</literal></expr>)</condition> <block pos:start="1093:38" pos:end="1103:13">{<block_content pos:start="1095:13" pos:end="1101:37">

            <case pos:start="1095:13" pos:end="1095:19">case <expr pos:start="1095:18" pos:end="1095:18"><literal type="number" pos:start="1095:18" pos:end="1095:18">0</literal></expr>:</case> <expr_stmt pos:start="1095:21" pos:end="1095:50"><expr pos:start="1095:21" pos:end="1095:49"><call pos:start="1095:21" pos:end="1095:49"><name pos:start="1095:21" pos:end="1095:39">tcg_gen_bswap32_i32</name><argument_list pos:start="1095:40" pos:end="1095:49">(<argument pos:start="1095:41" pos:end="1095:43"><expr pos:start="1095:41" pos:end="1095:43"><name pos:start="1095:41" pos:end="1095:43">tmp</name></expr></argument>, <argument pos:start="1095:46" pos:end="1095:48"><expr pos:start="1095:46" pos:end="1095:48"><name pos:start="1095:46" pos:end="1095:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1095:52" pos:end="1095:57">break;</break>

            <case pos:start="1097:13" pos:end="1097:19">case <expr pos:start="1097:18" pos:end="1097:18"><literal type="number" pos:start="1097:18" pos:end="1097:18">1</literal></expr>:</case> <expr_stmt pos:start="1097:21" pos:end="1097:35"><expr pos:start="1097:21" pos:end="1097:34"><call pos:start="1097:21" pos:end="1097:34"><name pos:start="1097:21" pos:end="1097:29">gen_rev16</name><argument_list pos:start="1097:30" pos:end="1097:34">(<argument pos:start="1097:31" pos:end="1097:33"><expr pos:start="1097:31" pos:end="1097:33"><name pos:start="1097:31" pos:end="1097:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1097:37" pos:end="1097:42">break;</break>

            <case pos:start="1099:13" pos:end="1099:19">case <expr pos:start="1099:18" pos:end="1099:18"><literal type="number" pos:start="1099:18" pos:end="1099:18">3</literal></expr>:</case> <expr_stmt pos:start="1099:21" pos:end="1099:35"><expr pos:start="1099:21" pos:end="1099:34"><call pos:start="1099:21" pos:end="1099:34"><name pos:start="1099:21" pos:end="1099:29">gen_revsh</name><argument_list pos:start="1099:30" pos:end="1099:34">(<argument pos:start="1099:31" pos:end="1099:33"><expr pos:start="1099:31" pos:end="1099:33"><name pos:start="1099:31" pos:end="1099:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1099:37" pos:end="1099:42">break;</break>

            <default pos:start="1101:13" pos:end="1101:20">default:</default> <goto pos:start="1101:22" pos:end="1101:37">goto <name pos:start="1101:27" pos:end="1101:36">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1105:13" pos:end="1105:34"><expr pos:start="1105:13" pos:end="1105:33"><call pos:start="1105:13" pos:end="1105:33"><name pos:start="1105:13" pos:end="1105:21">store_reg</name><argument_list pos:start="1105:22" pos:end="1105:33">(<argument pos:start="1105:23" pos:end="1105:23"><expr pos:start="1105:23" pos:end="1105:23"><name pos:start="1105:23" pos:end="1105:23">s</name></expr></argument>, <argument pos:start="1105:26" pos:end="1105:27"><expr pos:start="1105:26" pos:end="1105:27"><name pos:start="1105:26" pos:end="1105:27">rd</name></expr></argument>, <argument pos:start="1105:30" pos:end="1105:32"><expr pos:start="1105:30" pos:end="1105:32"><name pos:start="1105:30" pos:end="1105:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1107:13" pos:end="1107:18">break;</break>



        <case pos:start="1111:9" pos:end="1111:15">case <expr pos:start="1111:14" pos:end="1111:14"><literal type="number" pos:start="1111:14" pos:end="1111:14">6</literal></expr>:</case> <comment type="block" pos:start="1111:17" pos:end="1111:25">/* cps */</comment>

            <expr_stmt pos:start="1113:13" pos:end="1113:20"><expr pos:start="1113:13" pos:end="1113:19"><call pos:start="1113:13" pos:end="1113:19"><name pos:start="1113:13" pos:end="1113:16">ARCH</name><argument_list pos:start="1113:17" pos:end="1113:19">(<argument pos:start="1113:18" pos:end="1113:18"><expr pos:start="1113:18" pos:end="1113:18"><literal type="number" pos:start="1113:18" pos:end="1113:18">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1115:13" pos:end="1117:22"><if pos:start="1115:13" pos:end="1117:22">if <condition pos:start="1115:16" pos:end="1115:27">(<expr pos:start="1115:17" pos:end="1115:26"><call pos:start="1115:17" pos:end="1115:26"><name pos:start="1115:17" pos:end="1115:23">IS_USER</name><argument_list pos:start="1115:24" pos:end="1115:26">(<argument pos:start="1115:25" pos:end="1115:25"><expr pos:start="1115:25" pos:end="1115:25"><name pos:start="1115:25" pos:end="1115:25">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1117:17" pos:end="1117:22"><block_content pos:start="1117:17" pos:end="1117:22">

                <break pos:start="1117:17" pos:end="1117:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="1119:13" pos:end="1163:13"><if pos:start="1119:13" pos:end="1151:13">if <condition pos:start="1119:16" pos:end="1119:26">(<expr pos:start="1119:17" pos:end="1119:25"><call pos:start="1119:17" pos:end="1119:25"><name pos:start="1119:17" pos:end="1119:20">IS_M</name><argument_list pos:start="1119:21" pos:end="1119:25">(<argument pos:start="1119:22" pos:end="1119:24"><expr pos:start="1119:22" pos:end="1119:24"><name pos:start="1119:22" pos:end="1119:24">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1119:28" pos:end="1151:13">{<block_content pos:start="1121:17" pos:end="1149:33">

                <expr_stmt pos:start="1121:17" pos:end="1121:60"><expr pos:start="1121:17" pos:end="1121:59"><name pos:start="1121:17" pos:end="1121:19">tmp</name> <operator pos:start="1121:21" pos:end="1121:21">=</operator> <call pos:start="1121:23" pos:end="1121:59"><name pos:start="1121:23" pos:end="1121:35">tcg_const_i32</name><argument_list pos:start="1121:36" pos:end="1121:59">(<argument pos:start="1121:37" pos:end="1121:58"><expr pos:start="1121:37" pos:end="1121:58"><operator pos:start="1121:37" pos:end="1121:37">(</operator><name pos:start="1121:38" pos:end="1121:41">insn</name> <operator pos:start="1121:43" pos:end="1121:43">&amp;</operator> <operator pos:start="1121:45" pos:end="1121:45">(</operator><literal type="number" pos:start="1121:46" pos:end="1121:46">1</literal> <operator pos:start="1121:48" pos:end="1121:49">&lt;&lt;</operator> <literal type="number" pos:start="1121:51" pos:end="1121:51">4</literal><operator pos:start="1121:52" pos:end="1121:52">)</operator><operator pos:start="1121:53" pos:end="1121:53">)</operator> <operator pos:start="1121:55" pos:end="1121:56">!=</operator> <literal type="number" pos:start="1121:58" pos:end="1121:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1123:17" pos:end="1123:29">/* PRIMASK */</comment>

                <if_stmt pos:start="1125:17" pos:end="1133:17"><if pos:start="1125:17" pos:end="1133:17">if <condition pos:start="1125:20" pos:end="1125:29">(<expr pos:start="1125:21" pos:end="1125:28"><name pos:start="1125:21" pos:end="1125:24">insn</name> <operator pos:start="1125:26" pos:end="1125:26">&amp;</operator> <literal type="number" pos:start="1125:28" pos:end="1125:28">1</literal></expr>)</condition> <block pos:start="1125:31" pos:end="1133:17">{<block_content pos:start="1127:21" pos:end="1131:44">

                    <expr_stmt pos:start="1127:21" pos:end="1127:45"><expr pos:start="1127:21" pos:end="1127:44"><name pos:start="1127:21" pos:end="1127:24">addr</name> <operator pos:start="1127:26" pos:end="1127:26">=</operator> <call pos:start="1127:28" pos:end="1127:44"><name pos:start="1127:28" pos:end="1127:40">tcg_const_i32</name><argument_list pos:start="1127:41" pos:end="1127:44">(<argument pos:start="1127:42" pos:end="1127:43"><expr pos:start="1127:42" pos:end="1127:43"><literal type="number" pos:start="1127:42" pos:end="1127:43">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1129:21" pos:end="1129:59"><expr pos:start="1129:21" pos:end="1129:58"><call pos:start="1129:21" pos:end="1129:58"><name pos:start="1129:21" pos:end="1129:38">gen_helper_v7m_msr</name><argument_list pos:start="1129:39" pos:end="1129:58">(<argument pos:start="1129:40" pos:end="1129:46"><expr pos:start="1129:40" pos:end="1129:46"><name pos:start="1129:40" pos:end="1129:46">cpu_env</name></expr></argument>, <argument pos:start="1129:49" pos:end="1129:52"><expr pos:start="1129:49" pos:end="1129:52"><name pos:start="1129:49" pos:end="1129:52">addr</name></expr></argument>, <argument pos:start="1129:55" pos:end="1129:57"><expr pos:start="1129:55" pos:end="1129:57"><name pos:start="1129:55" pos:end="1129:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1131:21" pos:end="1131:44"><expr pos:start="1131:21" pos:end="1131:43"><call pos:start="1131:21" pos:end="1131:43"><name pos:start="1131:21" pos:end="1131:37">tcg_temp_free_i32</name><argument_list pos:start="1131:38" pos:end="1131:43">(<argument pos:start="1131:39" pos:end="1131:42"><expr pos:start="1131:39" pos:end="1131:42"><name pos:start="1131:39" pos:end="1131:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1135:17" pos:end="1135:31">/* FAULTMASK */</comment>

                <if_stmt pos:start="1137:17" pos:end="1145:17"><if pos:start="1137:17" pos:end="1145:17">if <condition pos:start="1137:20" pos:end="1137:29">(<expr pos:start="1137:21" pos:end="1137:28"><name pos:start="1137:21" pos:end="1137:24">insn</name> <operator pos:start="1137:26" pos:end="1137:26">&amp;</operator> <literal type="number" pos:start="1137:28" pos:end="1137:28">2</literal></expr>)</condition> <block pos:start="1137:31" pos:end="1145:17">{<block_content pos:start="1139:21" pos:end="1143:44">

                    <expr_stmt pos:start="1139:21" pos:end="1139:45"><expr pos:start="1139:21" pos:end="1139:44"><name pos:start="1139:21" pos:end="1139:24">addr</name> <operator pos:start="1139:26" pos:end="1139:26">=</operator> <call pos:start="1139:28" pos:end="1139:44"><name pos:start="1139:28" pos:end="1139:40">tcg_const_i32</name><argument_list pos:start="1139:41" pos:end="1139:44">(<argument pos:start="1139:42" pos:end="1139:43"><expr pos:start="1139:42" pos:end="1139:43"><literal type="number" pos:start="1139:42" pos:end="1139:43">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1141:21" pos:end="1141:59"><expr pos:start="1141:21" pos:end="1141:58"><call pos:start="1141:21" pos:end="1141:58"><name pos:start="1141:21" pos:end="1141:38">gen_helper_v7m_msr</name><argument_list pos:start="1141:39" pos:end="1141:58">(<argument pos:start="1141:40" pos:end="1141:46"><expr pos:start="1141:40" pos:end="1141:46"><name pos:start="1141:40" pos:end="1141:46">cpu_env</name></expr></argument>, <argument pos:start="1141:49" pos:end="1141:52"><expr pos:start="1141:49" pos:end="1141:52"><name pos:start="1141:49" pos:end="1141:52">addr</name></expr></argument>, <argument pos:start="1141:55" pos:end="1141:57"><expr pos:start="1141:55" pos:end="1141:57"><name pos:start="1141:55" pos:end="1141:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1143:21" pos:end="1143:44"><expr pos:start="1143:21" pos:end="1143:43"><call pos:start="1143:21" pos:end="1143:43"><name pos:start="1143:21" pos:end="1143:37">tcg_temp_free_i32</name><argument_list pos:start="1143:38" pos:end="1143:43">(<argument pos:start="1143:39" pos:end="1143:42"><expr pos:start="1143:39" pos:end="1143:42"><name pos:start="1143:39" pos:end="1143:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1147:17" pos:end="1147:39"><expr pos:start="1147:17" pos:end="1147:38"><call pos:start="1147:17" pos:end="1147:38"><name pos:start="1147:17" pos:end="1147:33">tcg_temp_free_i32</name><argument_list pos:start="1147:34" pos:end="1147:38">(<argument pos:start="1147:35" pos:end="1147:37"><expr pos:start="1147:35" pos:end="1147:37"><name pos:start="1147:35" pos:end="1147:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1149:17" pos:end="1149:33"><expr pos:start="1149:17" pos:end="1149:32"><call pos:start="1149:17" pos:end="1149:32"><name pos:start="1149:17" pos:end="1149:29">gen_lookup_tb</name><argument_list pos:start="1149:30" pos:end="1149:32">(<argument pos:start="1149:31" pos:end="1149:31"><expr pos:start="1149:31" pos:end="1149:31"><name pos:start="1149:31" pos:end="1149:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1151:15" pos:end="1163:13">else <block pos:start="1151:20" pos:end="1163:13">{<block_content pos:start="1153:17" pos:end="1161:63">

                <if_stmt pos:start="1153:17" pos:end="1159:30"><if pos:start="1153:17" pos:end="1155:53">if <condition pos:start="1153:20" pos:end="1153:36">(<expr pos:start="1153:21" pos:end="1153:35"><name pos:start="1153:21" pos:end="1153:24">insn</name> <operator pos:start="1153:26" pos:end="1153:26">&amp;</operator> <operator pos:start="1153:28" pos:end="1153:28">(</operator><literal type="number" pos:start="1153:29" pos:end="1153:29">1</literal> <operator pos:start="1153:31" pos:end="1153:32">&lt;&lt;</operator> <literal type="number" pos:start="1153:34" pos:end="1153:34">4</literal><operator pos:start="1153:35" pos:end="1153:35">)</operator></expr>)</condition><block type="pseudo" pos:start="1155:21" pos:end="1155:53"><block_content pos:start="1155:21" pos:end="1155:53">

                    <expr_stmt pos:start="1155:21" pos:end="1155:53"><expr pos:start="1155:21" pos:end="1155:52"><name pos:start="1155:21" pos:end="1155:25">shift</name> <operator pos:start="1155:27" pos:end="1155:27">=</operator> <name pos:start="1155:29" pos:end="1155:34">CPSR_A</name> <operator pos:start="1155:36" pos:end="1155:36">|</operator> <name pos:start="1155:38" pos:end="1155:43">CPSR_I</name> <operator pos:start="1155:45" pos:end="1155:45">|</operator> <name pos:start="1155:47" pos:end="1155:52">CPSR_F</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1157:17" pos:end="1159:30">else<block type="pseudo" pos:start="1159:21" pos:end="1159:30"><block_content pos:start="1159:21" pos:end="1159:30">

                    <expr_stmt pos:start="1159:21" pos:end="1159:30"><expr pos:start="1159:21" pos:end="1159:29"><name pos:start="1159:21" pos:end="1159:25">shift</name> <operator pos:start="1159:27" pos:end="1159:27">=</operator> <literal type="number" pos:start="1159:29" pos:end="1159:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="1161:17" pos:end="1161:63"><expr pos:start="1161:17" pos:end="1161:62"><call pos:start="1161:17" pos:end="1161:62"><name pos:start="1161:17" pos:end="1161:30">gen_set_psr_im</name><argument_list pos:start="1161:31" pos:end="1161:62">(<argument pos:start="1161:32" pos:end="1161:32"><expr pos:start="1161:32" pos:end="1161:32"><name pos:start="1161:32" pos:end="1161:32">s</name></expr></argument>, <argument pos:start="1161:35" pos:end="1161:51"><expr pos:start="1161:35" pos:end="1161:51"><operator pos:start="1161:35" pos:end="1161:35">(</operator><operator pos:start="1161:36" pos:end="1161:36">(</operator><name pos:start="1161:37" pos:end="1161:40">insn</name> <operator pos:start="1161:42" pos:end="1161:42">&amp;</operator> <literal type="number" pos:start="1161:44" pos:end="1161:44">7</literal><operator pos:start="1161:45" pos:end="1161:45">)</operator> <operator pos:start="1161:47" pos:end="1161:48">&lt;&lt;</operator> <literal type="number" pos:start="1161:50" pos:end="1161:50">6</literal><operator pos:start="1161:51" pos:end="1161:51">)</operator></expr></argument>, <argument pos:start="1161:54" pos:end="1161:54"><expr pos:start="1161:54" pos:end="1161:54"><literal type="number" pos:start="1161:54" pos:end="1161:54">0</literal></expr></argument>, <argument pos:start="1161:57" pos:end="1161:61"><expr pos:start="1161:57" pos:end="1161:61"><name pos:start="1161:57" pos:end="1161:61">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1165:13" pos:end="1165:18">break;</break>



        <default pos:start="1169:9" pos:end="1169:16">default:</default>

            <goto pos:start="1171:13" pos:end="1171:23">goto <name pos:start="1171:18" pos:end="1171:22">undef</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="1175:9" pos:end="1175:14">break;</break>



    <case pos:start="1179:5" pos:end="1179:12">case <expr pos:start="1179:10" pos:end="1179:11"><literal type="number" pos:start="1179:10" pos:end="1179:11">12</literal></expr>:</case>

        <comment type="block" pos:start="1181:9" pos:end="1181:33">/* load/store multiple */</comment>

        <expr_stmt pos:start="1183:9" pos:end="1183:31"><expr pos:start="1183:9" pos:end="1183:30"><name pos:start="1183:9" pos:end="1183:10">rn</name> <operator pos:start="1183:12" pos:end="1183:12">=</operator> <operator pos:start="1183:14" pos:end="1183:14">(</operator><name pos:start="1183:15" pos:end="1183:18">insn</name> <operator pos:start="1183:20" pos:end="1183:21">&gt;&gt;</operator> <literal type="number" pos:start="1183:23" pos:end="1183:23">8</literal><operator pos:start="1183:24" pos:end="1183:24">)</operator> <operator pos:start="1183:26" pos:end="1183:26">&amp;</operator> <literal type="number" pos:start="1183:28" pos:end="1183:30">0x7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1185:9" pos:end="1185:31"><expr pos:start="1185:9" pos:end="1185:30"><name pos:start="1185:9" pos:end="1185:12">addr</name> <operator pos:start="1185:14" pos:end="1185:14">=</operator> <call pos:start="1185:16" pos:end="1185:30"><name pos:start="1185:16" pos:end="1185:23">load_reg</name><argument_list pos:start="1185:24" pos:end="1185:30">(<argument pos:start="1185:25" pos:end="1185:25"><expr pos:start="1185:25" pos:end="1185:25"><name pos:start="1185:25" pos:end="1185:25">s</name></expr></argument>, <argument pos:start="1185:28" pos:end="1185:29"><expr pos:start="1185:28" pos:end="1185:29"><name pos:start="1185:28" pos:end="1185:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="1187:9" pos:end="1215:9">for <control pos:start="1187:13" pos:end="1187:31">(<init pos:start="1187:14" pos:end="1187:19"><expr pos:start="1187:14" pos:end="1187:18"><name pos:start="1187:14" pos:end="1187:14">i</name> <operator pos:start="1187:16" pos:end="1187:16">=</operator> <literal type="number" pos:start="1187:18" pos:end="1187:18">0</literal></expr>;</init> <condition pos:start="1187:21" pos:end="1187:26"><expr pos:start="1187:21" pos:end="1187:25"><name pos:start="1187:21" pos:end="1187:21">i</name> <operator pos:start="1187:23" pos:end="1187:23">&lt;</operator> <literal type="number" pos:start="1187:25" pos:end="1187:25">8</literal></expr>;</condition> <incr pos:start="1187:28" pos:end="1187:30"><expr pos:start="1187:28" pos:end="1187:30"><name pos:start="1187:28" pos:end="1187:28">i</name><operator pos:start="1187:29" pos:end="1187:30">++</operator></expr></incr>)</control> <block pos:start="1187:33" pos:end="1215:9">{<block_content pos:start="1189:13" pos:end="1213:13">

            <if_stmt pos:start="1189:13" pos:end="1213:13"><if pos:start="1189:13" pos:end="1213:13">if <condition pos:start="1189:16" pos:end="1189:32">(<expr pos:start="1189:17" pos:end="1189:31"><name pos:start="1189:17" pos:end="1189:20">insn</name> <operator pos:start="1189:22" pos:end="1189:22">&amp;</operator> <operator pos:start="1189:24" pos:end="1189:24">(</operator><literal type="number" pos:start="1189:25" pos:end="1189:25">1</literal> <operator pos:start="1189:27" pos:end="1189:28">&lt;&lt;</operator> <name pos:start="1189:30" pos:end="1189:30">i</name><operator pos:start="1189:31" pos:end="1189:31">)</operator></expr>)</condition> <block pos:start="1189:34" pos:end="1213:13">{<block_content pos:start="1191:17" pos:end="1211:48">

                <if_stmt pos:start="1191:17" pos:end="1207:17"><if pos:start="1191:17" pos:end="1199:17">if <condition pos:start="1191:20" pos:end="1191:37">(<expr pos:start="1191:21" pos:end="1191:36"><name pos:start="1191:21" pos:end="1191:24">insn</name> <operator pos:start="1191:26" pos:end="1191:26">&amp;</operator> <operator pos:start="1191:28" pos:end="1191:28">(</operator><literal type="number" pos:start="1191:29" pos:end="1191:29">1</literal> <operator pos:start="1191:31" pos:end="1191:32">&lt;&lt;</operator> <literal type="number" pos:start="1191:34" pos:end="1191:35">11</literal><operator pos:start="1191:36" pos:end="1191:36">)</operator></expr>)</condition> <block pos:start="1191:39" pos:end="1199:17">{<block_content pos:start="1195:21" pos:end="1197:41">

                    <comment type="block" pos:start="1193:21" pos:end="1193:30">/* load */</comment>

                    <expr_stmt pos:start="1195:21" pos:end="1195:53"><expr pos:start="1195:21" pos:end="1195:52"><name pos:start="1195:21" pos:end="1195:23">tmp</name> <operator pos:start="1195:25" pos:end="1195:25">=</operator> <call pos:start="1195:27" pos:end="1195:52"><name pos:start="1195:27" pos:end="1195:34">gen_ld32</name><argument_list pos:start="1195:35" pos:end="1195:52">(<argument pos:start="1195:36" pos:end="1195:39"><expr pos:start="1195:36" pos:end="1195:39"><name pos:start="1195:36" pos:end="1195:39">addr</name></expr></argument>, <argument pos:start="1195:42" pos:end="1195:51"><expr pos:start="1195:42" pos:end="1195:51"><call pos:start="1195:42" pos:end="1195:51"><name pos:start="1195:42" pos:end="1195:48">IS_USER</name><argument_list pos:start="1195:49" pos:end="1195:51">(<argument pos:start="1195:50" pos:end="1195:50"><expr pos:start="1195:50" pos:end="1195:50"><name pos:start="1195:50" pos:end="1195:50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1197:21" pos:end="1197:41"><expr pos:start="1197:21" pos:end="1197:40"><call pos:start="1197:21" pos:end="1197:40"><name pos:start="1197:21" pos:end="1197:29">store_reg</name><argument_list pos:start="1197:30" pos:end="1197:40">(<argument pos:start="1197:31" pos:end="1197:31"><expr pos:start="1197:31" pos:end="1197:31"><name pos:start="1197:31" pos:end="1197:31">s</name></expr></argument>, <argument pos:start="1197:34" pos:end="1197:34"><expr pos:start="1197:34" pos:end="1197:34"><name pos:start="1197:34" pos:end="1197:34">i</name></expr></argument>, <argument pos:start="1197:37" pos:end="1197:39"><expr pos:start="1197:37" pos:end="1197:39"><name pos:start="1197:37" pos:end="1197:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1199:19" pos:end="1207:17">else <block pos:start="1199:24" pos:end="1207:17">{<block_content pos:start="1203:21" pos:end="1205:52">

                    <comment type="block" pos:start="1201:21" pos:end="1201:31">/* store */</comment>

                    <expr_stmt pos:start="1203:21" pos:end="1203:41"><expr pos:start="1203:21" pos:end="1203:40"><name pos:start="1203:21" pos:end="1203:23">tmp</name> <operator pos:start="1203:25" pos:end="1203:25">=</operator> <call pos:start="1203:27" pos:end="1203:40"><name pos:start="1203:27" pos:end="1203:34">load_reg</name><argument_list pos:start="1203:35" pos:end="1203:40">(<argument pos:start="1203:36" pos:end="1203:36"><expr pos:start="1203:36" pos:end="1203:36"><name pos:start="1203:36" pos:end="1203:36">s</name></expr></argument>, <argument pos:start="1203:39" pos:end="1203:39"><expr pos:start="1203:39" pos:end="1203:39"><name pos:start="1203:39" pos:end="1203:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1205:21" pos:end="1205:52"><expr pos:start="1205:21" pos:end="1205:51"><call pos:start="1205:21" pos:end="1205:51"><name pos:start="1205:21" pos:end="1205:28">gen_st32</name><argument_list pos:start="1205:29" pos:end="1205:51">(<argument pos:start="1205:30" pos:end="1205:32"><expr pos:start="1205:30" pos:end="1205:32"><name pos:start="1205:30" pos:end="1205:32">tmp</name></expr></argument>, <argument pos:start="1205:35" pos:end="1205:38"><expr pos:start="1205:35" pos:end="1205:38"><name pos:start="1205:35" pos:end="1205:38">addr</name></expr></argument>, <argument pos:start="1205:41" pos:end="1205:50"><expr pos:start="1205:41" pos:end="1205:50"><call pos:start="1205:41" pos:end="1205:50"><name pos:start="1205:41" pos:end="1205:47">IS_USER</name><argument_list pos:start="1205:48" pos:end="1205:50">(<argument pos:start="1205:49" pos:end="1205:49"><expr pos:start="1205:49" pos:end="1205:49"><name pos:start="1205:49" pos:end="1205:49">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <comment type="block" pos:start="1209:17" pos:end="1209:49">/* advance to the next address */</comment>

                <expr_stmt pos:start="1211:17" pos:end="1211:48"><expr pos:start="1211:17" pos:end="1211:47"><call pos:start="1211:17" pos:end="1211:47"><name pos:start="1211:17" pos:end="1211:32">tcg_gen_addi_i32</name><argument_list pos:start="1211:33" pos:end="1211:47">(<argument pos:start="1211:34" pos:end="1211:37"><expr pos:start="1211:34" pos:end="1211:37"><name pos:start="1211:34" pos:end="1211:37">addr</name></expr></argument>, <argument pos:start="1211:40" pos:end="1211:43"><expr pos:start="1211:40" pos:end="1211:43"><name pos:start="1211:40" pos:end="1211:43">addr</name></expr></argument>, <argument pos:start="1211:46" pos:end="1211:46"><expr pos:start="1211:46" pos:end="1211:46"><literal type="number" pos:start="1211:46" pos:end="1211:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="1217:9" pos:end="1217:39">/* Base register writeback.  */</comment>

        <if_stmt pos:start="1219:9" pos:end="1227:9"><if pos:start="1219:9" pos:end="1223:9">if <condition pos:start="1219:12" pos:end="1219:36">(<expr pos:start="1219:13" pos:end="1219:35"><operator pos:start="1219:13" pos:end="1219:13">(</operator><name pos:start="1219:14" pos:end="1219:17">insn</name> <operator pos:start="1219:19" pos:end="1219:19">&amp;</operator> <operator pos:start="1219:21" pos:end="1219:21">(</operator><literal type="number" pos:start="1219:22" pos:end="1219:22">1</literal> <operator pos:start="1219:24" pos:end="1219:25">&lt;&lt;</operator> <name pos:start="1219:27" pos:end="1219:28">rn</name><operator pos:start="1219:29" pos:end="1219:29">)</operator><operator pos:start="1219:30" pos:end="1219:30">)</operator> <operator pos:start="1219:32" pos:end="1219:33">==</operator> <literal type="number" pos:start="1219:35" pos:end="1219:35">0</literal></expr>)</condition> <block pos:start="1219:38" pos:end="1223:9">{<block_content pos:start="1221:13" pos:end="1221:35">

            <expr_stmt pos:start="1221:13" pos:end="1221:35"><expr pos:start="1221:13" pos:end="1221:34"><call pos:start="1221:13" pos:end="1221:34"><name pos:start="1221:13" pos:end="1221:21">store_reg</name><argument_list pos:start="1221:22" pos:end="1221:34">(<argument pos:start="1221:23" pos:end="1221:23"><expr pos:start="1221:23" pos:end="1221:23"><name pos:start="1221:23" pos:end="1221:23">s</name></expr></argument>, <argument pos:start="1221:26" pos:end="1221:27"><expr pos:start="1221:26" pos:end="1221:27"><name pos:start="1221:26" pos:end="1221:27">rn</name></expr></argument>, <argument pos:start="1221:30" pos:end="1221:33"><expr pos:start="1221:30" pos:end="1221:33"><name pos:start="1221:30" pos:end="1221:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1223:11" pos:end="1227:9">else <block pos:start="1223:16" pos:end="1227:9">{<block_content pos:start="1225:13" pos:end="1225:27">

            <expr_stmt pos:start="1225:13" pos:end="1225:27"><expr pos:start="1225:13" pos:end="1225:26"><call pos:start="1225:13" pos:end="1225:26"><name pos:start="1225:13" pos:end="1225:20">dead_tmp</name><argument_list pos:start="1225:21" pos:end="1225:26">(<argument pos:start="1225:22" pos:end="1225:25"><expr pos:start="1225:22" pos:end="1225:25"><name pos:start="1225:22" pos:end="1225:25">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1229:9" pos:end="1229:14">break;</break>



    <case pos:start="1233:5" pos:end="1233:12">case <expr pos:start="1233:10" pos:end="1233:11"><literal type="number" pos:start="1233:10" pos:end="1233:11">13</literal></expr>:</case>

        <comment type="block" pos:start="1235:9" pos:end="1235:39">/* conditional branch or swi */</comment>

        <expr_stmt pos:start="1237:9" pos:end="1237:33"><expr pos:start="1237:9" pos:end="1237:32"><name pos:start="1237:9" pos:end="1237:12">cond</name> <operator pos:start="1237:14" pos:end="1237:14">=</operator> <operator pos:start="1237:16" pos:end="1237:16">(</operator><name pos:start="1237:17" pos:end="1237:20">insn</name> <operator pos:start="1237:22" pos:end="1237:23">&gt;&gt;</operator> <literal type="number" pos:start="1237:25" pos:end="1237:25">8</literal><operator pos:start="1237:26" pos:end="1237:26">)</operator> <operator pos:start="1237:28" pos:end="1237:28">&amp;</operator> <literal type="number" pos:start="1237:30" pos:end="1237:32">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1239:9" pos:end="1241:23"><if pos:start="1239:9" pos:end="1241:23">if <condition pos:start="1239:12" pos:end="1239:24">(<expr pos:start="1239:13" pos:end="1239:23"><name pos:start="1239:13" pos:end="1239:16">cond</name> <operator pos:start="1239:18" pos:end="1239:19">==</operator> <literal type="number" pos:start="1239:21" pos:end="1239:23">0xe</literal></expr>)</condition><block type="pseudo" pos:start="1241:13" pos:end="1241:23"><block_content pos:start="1241:13" pos:end="1241:23">

            <goto pos:start="1241:13" pos:end="1241:23">goto <name pos:start="1241:18" pos:end="1241:22">undef</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="1245:9" pos:end="1255:9"><if pos:start="1245:9" pos:end="1255:9">if <condition pos:start="1245:12" pos:end="1245:24">(<expr pos:start="1245:13" pos:end="1245:23"><name pos:start="1245:13" pos:end="1245:16">cond</name> <operator pos:start="1245:18" pos:end="1245:19">==</operator> <literal type="number" pos:start="1245:21" pos:end="1245:23">0xf</literal></expr>)</condition> <block pos:start="1245:26" pos:end="1255:9">{<block_content pos:start="1249:13" pos:end="1253:18">

            <comment type="block" pos:start="1247:13" pos:end="1247:21">/* swi */</comment>

            <expr_stmt pos:start="1249:13" pos:end="1249:33"><expr pos:start="1249:13" pos:end="1249:32"><call pos:start="1249:13" pos:end="1249:32"><name pos:start="1249:13" pos:end="1249:25">gen_set_pc_im</name><argument_list pos:start="1249:26" pos:end="1249:32">(<argument pos:start="1249:27" pos:end="1249:31"><expr pos:start="1249:27" pos:end="1249:31"><name pos:start="1249:27" pos:end="1249:31"><name pos:start="1249:27" pos:end="1249:27">s</name><operator pos:start="1249:28" pos:end="1249:29">-&gt;</operator><name pos:start="1249:30" pos:end="1249:31">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1251:13" pos:end="1251:34"><expr pos:start="1251:13" pos:end="1251:33"><name pos:start="1251:13" pos:end="1251:21"><name pos:start="1251:13" pos:end="1251:13">s</name><operator pos:start="1251:14" pos:end="1251:15">-&gt;</operator><name pos:start="1251:16" pos:end="1251:21">is_jmp</name></name> <operator pos:start="1251:23" pos:end="1251:23">=</operator> <name pos:start="1251:25" pos:end="1251:33">DISAS_SWI</name></expr>;</expr_stmt>

            <break pos:start="1253:13" pos:end="1253:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1257:9" pos:end="1257:61">/* generate a conditional jump to next instruction */</comment>

        <expr_stmt pos:start="1259:9" pos:end="1259:39"><expr pos:start="1259:9" pos:end="1259:38"><name pos:start="1259:9" pos:end="1259:20"><name pos:start="1259:9" pos:end="1259:9">s</name><operator pos:start="1259:10" pos:end="1259:11">-&gt;</operator><name pos:start="1259:12" pos:end="1259:20">condlabel</name></name> <operator pos:start="1259:22" pos:end="1259:22">=</operator> <call pos:start="1259:24" pos:end="1259:38"><name pos:start="1259:24" pos:end="1259:36">gen_new_label</name><argument_list pos:start="1259:37" pos:end="1259:38">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1261:9" pos:end="1261:44"><expr pos:start="1261:9" pos:end="1261:43"><call pos:start="1261:9" pos:end="1261:43"><name pos:start="1261:9" pos:end="1261:19">gen_test_cc</name><argument_list pos:start="1261:20" pos:end="1261:43">(<argument pos:start="1261:21" pos:end="1261:28"><expr pos:start="1261:21" pos:end="1261:28"><name pos:start="1261:21" pos:end="1261:24">cond</name> <operator pos:start="1261:26" pos:end="1261:26">^</operator> <literal type="number" pos:start="1261:28" pos:end="1261:28">1</literal></expr></argument>, <argument pos:start="1261:31" pos:end="1261:42"><expr pos:start="1261:31" pos:end="1261:42"><name pos:start="1261:31" pos:end="1261:42"><name pos:start="1261:31" pos:end="1261:31">s</name><operator pos:start="1261:32" pos:end="1261:33">-&gt;</operator><name pos:start="1261:34" pos:end="1261:42">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1263:9" pos:end="1263:23"><expr pos:start="1263:9" pos:end="1263:22"><name pos:start="1263:9" pos:end="1263:18"><name pos:start="1263:9" pos:end="1263:9">s</name><operator pos:start="1263:10" pos:end="1263:11">-&gt;</operator><name pos:start="1263:12" pos:end="1263:18">condjmp</name></name> <operator pos:start="1263:20" pos:end="1263:20">=</operator> <literal type="number" pos:start="1263:22" pos:end="1263:22">1</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="1267:9" pos:end="1267:32">/* jump to the offset */</comment>

        <expr_stmt pos:start="1269:9" pos:end="1269:34"><expr pos:start="1269:9" pos:end="1269:33"><name pos:start="1269:9" pos:end="1269:11">val</name> <operator pos:start="1269:13" pos:end="1269:13">=</operator> <operator pos:start="1269:15" pos:end="1269:15">(</operator><name pos:start="1269:16" pos:end="1269:23">uint32_t</name><operator pos:start="1269:24" pos:end="1269:24">)</operator><name pos:start="1269:25" pos:end="1269:29"><name pos:start="1269:25" pos:end="1269:25">s</name><operator pos:start="1269:26" pos:end="1269:27">-&gt;</operator><name pos:start="1269:28" pos:end="1269:29">pc</name></name> <operator pos:start="1269:31" pos:end="1269:31">+</operator> <literal type="number" pos:start="1269:33" pos:end="1269:33">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1271:9" pos:end="1271:45"><expr pos:start="1271:9" pos:end="1271:44"><name pos:start="1271:9" pos:end="1271:14">offset</name> <operator pos:start="1271:16" pos:end="1271:16">=</operator> <operator pos:start="1271:18" pos:end="1271:18">(</operator><operator pos:start="1271:19" pos:end="1271:19">(</operator><name pos:start="1271:20" pos:end="1271:26">int32_t</name><operator pos:start="1271:27" pos:end="1271:27">)</operator><name pos:start="1271:28" pos:end="1271:31">insn</name> <operator pos:start="1271:33" pos:end="1271:34">&lt;&lt;</operator> <literal type="number" pos:start="1271:36" pos:end="1271:37">24</literal><operator pos:start="1271:38" pos:end="1271:38">)</operator> <operator pos:start="1271:40" pos:end="1271:41">&gt;&gt;</operator> <literal type="number" pos:start="1271:43" pos:end="1271:44">24</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1273:9" pos:end="1273:27"><expr pos:start="1273:9" pos:end="1273:26"><name pos:start="1273:9" pos:end="1273:11">val</name> <operator pos:start="1273:13" pos:end="1273:14">+=</operator> <name pos:start="1273:16" pos:end="1273:21">offset</name> <operator pos:start="1273:23" pos:end="1273:24">&lt;&lt;</operator> <literal type="number" pos:start="1273:26" pos:end="1273:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1275:9" pos:end="1275:24"><expr pos:start="1275:9" pos:end="1275:23"><call pos:start="1275:9" pos:end="1275:23"><name pos:start="1275:9" pos:end="1275:15">gen_jmp</name><argument_list pos:start="1275:16" pos:end="1275:23">(<argument pos:start="1275:17" pos:end="1275:17"><expr pos:start="1275:17" pos:end="1275:17"><name pos:start="1275:17" pos:end="1275:17">s</name></expr></argument>, <argument pos:start="1275:20" pos:end="1275:22"><expr pos:start="1275:20" pos:end="1275:22"><name pos:start="1275:20" pos:end="1275:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1277:9" pos:end="1277:14">break;</break>



    <case pos:start="1281:5" pos:end="1281:12">case <expr pos:start="1281:10" pos:end="1281:11"><literal type="number" pos:start="1281:10" pos:end="1281:11">14</literal></expr>:</case>

        <if_stmt pos:start="1283:9" pos:end="1291:9"><if pos:start="1283:9" pos:end="1291:9">if <condition pos:start="1283:12" pos:end="1283:29">(<expr pos:start="1283:13" pos:end="1283:28"><name pos:start="1283:13" pos:end="1283:16">insn</name> <operator pos:start="1283:18" pos:end="1283:18">&amp;</operator> <operator pos:start="1283:20" pos:end="1283:20">(</operator><literal type="number" pos:start="1283:21" pos:end="1283:21">1</literal> <operator pos:start="1283:23" pos:end="1283:24">&lt;&lt;</operator> <literal type="number" pos:start="1283:26" pos:end="1283:27">11</literal><operator pos:start="1283:28" pos:end="1283:28">)</operator></expr>)</condition> <block pos:start="1283:31" pos:end="1291:9">{<block_content pos:start="1285:13" pos:end="1289:18">

            <if_stmt pos:start="1285:13" pos:end="1287:27"><if pos:start="1285:13" pos:end="1287:27">if <condition pos:start="1285:16" pos:end="1285:48">(<expr pos:start="1285:17" pos:end="1285:47"><call pos:start="1285:17" pos:end="1285:47"><name pos:start="1285:17" pos:end="1285:33">disas_thumb2_insn</name><argument_list pos:start="1285:34" pos:end="1285:47">(<argument pos:start="1285:35" pos:end="1285:37"><expr pos:start="1285:35" pos:end="1285:37"><name pos:start="1285:35" pos:end="1285:37">env</name></expr></argument>, <argument pos:start="1285:40" pos:end="1285:40"><expr pos:start="1285:40" pos:end="1285:40"><name pos:start="1285:40" pos:end="1285:40">s</name></expr></argument>, <argument pos:start="1285:43" pos:end="1285:46"><expr pos:start="1285:43" pos:end="1285:46"><name pos:start="1285:43" pos:end="1285:46">insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1287:15" pos:end="1287:27"><block_content pos:start="1287:15" pos:end="1287:27">

              <goto pos:start="1287:15" pos:end="1287:27">goto <name pos:start="1287:20" pos:end="1287:26">undef32</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="1289:13" pos:end="1289:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1293:9" pos:end="1293:34">/* unconditional branch */</comment>

        <expr_stmt pos:start="1295:9" pos:end="1295:30"><expr pos:start="1295:9" pos:end="1295:29"><name pos:start="1295:9" pos:end="1295:11">val</name> <operator pos:start="1295:13" pos:end="1295:13">=</operator> <operator pos:start="1295:15" pos:end="1295:15">(</operator><name pos:start="1295:16" pos:end="1295:23">uint32_t</name><operator pos:start="1295:24" pos:end="1295:24">)</operator><name pos:start="1295:25" pos:end="1295:29"><name pos:start="1295:25" pos:end="1295:25">s</name><operator pos:start="1295:26" pos:end="1295:27">-&gt;</operator><name pos:start="1295:28" pos:end="1295:29">pc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="1297:9" pos:end="1297:45"><expr pos:start="1297:9" pos:end="1297:44"><name pos:start="1297:9" pos:end="1297:14">offset</name> <operator pos:start="1297:16" pos:end="1297:16">=</operator> <operator pos:start="1297:18" pos:end="1297:18">(</operator><operator pos:start="1297:19" pos:end="1297:19">(</operator><name pos:start="1297:20" pos:end="1297:26">int32_t</name><operator pos:start="1297:27" pos:end="1297:27">)</operator><name pos:start="1297:28" pos:end="1297:31">insn</name> <operator pos:start="1297:33" pos:end="1297:34">&lt;&lt;</operator> <literal type="number" pos:start="1297:36" pos:end="1297:37">21</literal><operator pos:start="1297:38" pos:end="1297:38">)</operator> <operator pos:start="1297:40" pos:end="1297:41">&gt;&gt;</operator> <literal type="number" pos:start="1297:43" pos:end="1297:44">21</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1299:9" pos:end="1299:33"><expr pos:start="1299:9" pos:end="1299:32"><name pos:start="1299:9" pos:end="1299:11">val</name> <operator pos:start="1299:13" pos:end="1299:14">+=</operator> <operator pos:start="1299:16" pos:end="1299:16">(</operator><name pos:start="1299:17" pos:end="1299:22">offset</name> <operator pos:start="1299:24" pos:end="1299:25">&lt;&lt;</operator> <literal type="number" pos:start="1299:27" pos:end="1299:27">1</literal><operator pos:start="1299:28" pos:end="1299:28">)</operator> <operator pos:start="1299:30" pos:end="1299:30">+</operator> <literal type="number" pos:start="1299:32" pos:end="1299:32">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1301:9" pos:end="1301:24"><expr pos:start="1301:9" pos:end="1301:23"><call pos:start="1301:9" pos:end="1301:23"><name pos:start="1301:9" pos:end="1301:15">gen_jmp</name><argument_list pos:start="1301:16" pos:end="1301:23">(<argument pos:start="1301:17" pos:end="1301:17"><expr pos:start="1301:17" pos:end="1301:17"><name pos:start="1301:17" pos:end="1301:17">s</name></expr></argument>, <argument pos:start="1301:20" pos:end="1301:22"><expr pos:start="1301:20" pos:end="1301:22"><name pos:start="1301:20" pos:end="1301:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1303:9" pos:end="1303:14">break;</break>



    <case pos:start="1307:5" pos:end="1307:12">case <expr pos:start="1307:10" pos:end="1307:11"><literal type="number" pos:start="1307:10" pos:end="1307:11">15</literal></expr>:</case>

        <if_stmt pos:start="1309:9" pos:end="1311:25"><if pos:start="1309:9" pos:end="1311:25">if <condition pos:start="1309:12" pos:end="1309:44">(<expr pos:start="1309:13" pos:end="1309:43"><call pos:start="1309:13" pos:end="1309:43"><name pos:start="1309:13" pos:end="1309:29">disas_thumb2_insn</name><argument_list pos:start="1309:30" pos:end="1309:43">(<argument pos:start="1309:31" pos:end="1309:33"><expr pos:start="1309:31" pos:end="1309:33"><name pos:start="1309:31" pos:end="1309:33">env</name></expr></argument>, <argument pos:start="1309:36" pos:end="1309:36"><expr pos:start="1309:36" pos:end="1309:36"><name pos:start="1309:36" pos:end="1309:36">s</name></expr></argument>, <argument pos:start="1309:39" pos:end="1309:42"><expr pos:start="1309:39" pos:end="1309:42"><name pos:start="1309:39" pos:end="1309:42">insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1311:13" pos:end="1311:25"><block_content pos:start="1311:13" pos:end="1311:25">

            <goto pos:start="1311:13" pos:end="1311:25">goto <name pos:start="1311:18" pos:end="1311:24">undef32</name>;</goto></block_content></block></if></if_stmt>

        <break pos:start="1313:9" pos:end="1313:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="1317:5" pos:end="1317:11">return;</return>

<label pos:start="1319:1" pos:end="1319:8"><name pos:start="1319:1" pos:end="1319:7">undef32</name>:</label>

    <expr_stmt pos:start="1321:5" pos:end="1321:40"><expr pos:start="1321:5" pos:end="1321:39"><call pos:start="1321:5" pos:end="1321:39"><name pos:start="1321:5" pos:end="1321:22">gen_exception_insn</name><argument_list pos:start="1321:23" pos:end="1321:39">(<argument pos:start="1321:24" pos:end="1321:24"><expr pos:start="1321:24" pos:end="1321:24"><name pos:start="1321:24" pos:end="1321:24">s</name></expr></argument>, <argument pos:start="1321:27" pos:end="1321:27"><expr pos:start="1321:27" pos:end="1321:27"><literal type="number" pos:start="1321:27" pos:end="1321:27">4</literal></expr></argument>, <argument pos:start="1321:30" pos:end="1321:38"><expr pos:start="1321:30" pos:end="1321:38"><name pos:start="1321:30" pos:end="1321:38">EXCP_UDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="1323:5" pos:end="1323:11">return;</return>

<label pos:start="1325:1" pos:end="1325:11"><name pos:start="1325:1" pos:end="1325:10">illegal_op</name>:</label>

<label pos:start="1327:1" pos:end="1327:6"><name pos:start="1327:1" pos:end="1327:5">undef</name>:</label>

    <expr_stmt pos:start="1329:5" pos:end="1329:40"><expr pos:start="1329:5" pos:end="1329:39"><call pos:start="1329:5" pos:end="1329:39"><name pos:start="1329:5" pos:end="1329:22">gen_exception_insn</name><argument_list pos:start="1329:23" pos:end="1329:39">(<argument pos:start="1329:24" pos:end="1329:24"><expr pos:start="1329:24" pos:end="1329:24"><name pos:start="1329:24" pos:end="1329:24">s</name></expr></argument>, <argument pos:start="1329:27" pos:end="1329:27"><expr pos:start="1329:27" pos:end="1329:27"><literal type="number" pos:start="1329:27" pos:end="1329:27">2</literal></expr></argument>, <argument pos:start="1329:30" pos:end="1329:38"><expr pos:start="1329:30" pos:end="1329:38"><name pos:start="1329:30" pos:end="1329:38">EXCP_UDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
