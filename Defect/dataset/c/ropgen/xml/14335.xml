<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14335.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">process_input</name><parameter_list pos:start="1:25" pos:end="1:30">(<parameter pos:start="1:26" pos:end="1:29"><decl pos:start="1:26" pos:end="1:29"><type pos:start="1:26" pos:end="1:29"><name pos:start="1:26" pos:end="1:29">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="215:1">{<block_content pos:start="5:5" pos:end="213:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">InputFile</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">ifile</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">AVFormatContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:23">is</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">InputStream</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">ist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">AVPacket</name></type> <name pos:start="11:14" pos:end="11:16">pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">i</name></decl>, <decl pos:start="13:17" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:17">j</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:49">/* select the stream that we must read now */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:9">ifile</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:31"><name pos:start="19:13" pos:end="19:29">select_input_file</name><argument_list pos:start="19:30" pos:end="19:31">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="21:5" pos:end="21:33">/* if none, if is finished */</comment>

    <if_stmt pos:start="23:5" pos:end="39:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:14">ifile</name></expr>)</condition> <block pos:start="23:17" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:27">

        <if_stmt pos:start="25:9" pos:end="33:9"><if pos:start="25:9" pos:end="33:9">if <condition pos:start="25:12" pos:end="25:25">(<expr pos:start="25:13" pos:end="25:24"><call pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:22">got_eagain</name><argument_list pos:start="25:23" pos:end="25:24">()</argument_list></call></expr>)</condition> <block pos:start="25:27" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:35">

            <expr_stmt pos:start="27:13" pos:end="27:27"><expr pos:start="27:13" pos:end="27:26"><call pos:start="27:13" pos:end="27:26"><name pos:start="27:13" pos:end="27:24">reset_eagain</name><argument_list pos:start="27:25" pos:end="27:26">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:29"><expr pos:start="29:13" pos:end="29:28"><call pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:21">av_usleep</name><argument_list pos:start="29:22" pos:end="29:28">(<argument pos:start="29:23" pos:end="29:27"><expr pos:start="29:23" pos:end="29:27"><literal type="number" pos:start="29:23" pos:end="29:27">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:35">return <expr pos:start="31:20" pos:end="31:34"><call pos:start="31:20" pos:end="31:34"><name pos:start="31:20" pos:end="31:26">AVERROR</name><argument_list pos:start="31:27" pos:end="31:34">(<argument pos:start="31:28" pos:end="31:33"><expr pos:start="31:28" pos:end="31:33"><name pos:start="31:28" pos:end="31:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:71"><expr pos:start="35:9" pos:end="35:70"><call pos:start="35:9" pos:end="35:70"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:70">(<argument pos:start="35:16" pos:end="35:19"><expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">NULL</name></expr></argument>, <argument pos:start="35:22" pos:end="35:35"><expr pos:start="35:22" pos:end="35:35"><name pos:start="35:22" pos:end="35:35">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="35:38" pos:end="35:69"><expr pos:start="35:38" pos:end="35:69"><literal type="string" pos:start="35:38" pos:end="35:69">"No more inputs to read from.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:27">return <expr pos:start="37:16" pos:end="37:26"><name pos:start="37:16" pos:end="37:26">AVERROR_EOF</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:6">is</name>  <operator pos:start="43:9" pos:end="43:9">=</operator> <name pos:start="43:11" pos:end="43:20"><name pos:start="43:11" pos:end="43:15">ifile</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:20">ctx</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:40"><expr pos:start="45:5" pos:end="45:39"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:39"><name pos:start="45:11" pos:end="45:26">get_input_packet</name><argument_list pos:start="45:27" pos:end="45:39">(<argument pos:start="45:28" pos:end="45:32"><expr pos:start="45:28" pos:end="45:32"><name pos:start="45:28" pos:end="45:32">ifile</name></expr></argument>, <argument pos:start="45:35" pos:end="45:38"><expr pos:start="45:35" pos:end="45:38"><operator pos:start="45:35" pos:end="45:35">&amp;</operator><name pos:start="45:36" pos:end="45:38">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:31">(<expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:14">==</operator> <call pos:start="49:16" pos:end="49:30"><name pos:start="49:16" pos:end="49:22">AVERROR</name><argument_list pos:start="49:23" pos:end="49:30">(<argument pos:start="49:24" pos:end="49:29"><expr pos:start="49:24" pos:end="49:29"><name pos:start="49:24" pos:end="49:29">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:33" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:19">

        <expr_stmt pos:start="51:9" pos:end="51:26"><expr pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:13">ifile</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:21">eagain</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <literal type="number" pos:start="51:25" pos:end="51:25">1</literal></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:19">return <expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="105:5"><if pos:start="57:5" pos:end="105:5">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>)</condition> <block pos:start="57:18" pos:end="105:5">{<block_content pos:start="59:9" pos:end="103:31">

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:31">(<expr pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:18">!=</operator> <name pos:start="59:20" pos:end="59:30">AVERROR_EOF</name></expr>)</condition> <block pos:start="59:33" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:24">

            <expr_stmt pos:start="61:13" pos:end="61:43"><expr pos:start="61:13" pos:end="61:42"><call pos:start="61:13" pos:end="61:42"><name pos:start="61:13" pos:end="61:23">print_error</name><argument_list pos:start="61:24" pos:end="61:42">(<argument pos:start="61:25" pos:end="61:36"><expr pos:start="61:25" pos:end="61:36"><name pos:start="61:25" pos:end="61:36"><name pos:start="61:25" pos:end="61:26">is</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:36">filename</name></name></expr></argument>, <argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><name pos:start="61:39" pos:end="61:41">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="65:24"><if pos:start="63:13" pos:end="65:24">if <condition pos:start="63:16" pos:end="63:30">(<expr pos:start="63:17" pos:end="63:29"><name pos:start="63:17" pos:end="63:29">exit_on_error</name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:24"><block_content pos:start="65:17" pos:end="65:24">

                <expr_stmt pos:start="65:17" pos:end="65:24"><expr pos:start="65:17" pos:end="65:23"><call pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:20">exit</name><argument_list pos:start="65:21" pos:end="65:23">(<argument pos:start="65:22" pos:end="65:22"><expr pos:start="65:22" pos:end="65:22"><literal type="number" pos:start="65:22" pos:end="65:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:31"><expr pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:13">ifile</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:26">eof_reached</name></name> <operator pos:start="69:28" pos:end="69:28">=</operator> <literal type="number" pos:start="69:30" pos:end="69:30">1</literal></expr>;</expr_stmt>



        <for pos:start="73:9" pos:end="99:9">for <control pos:start="73:13" pos:end="73:47">(<init pos:start="73:14" pos:end="73:19"><expr pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:14">i</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr>;</init> <condition pos:start="73:21" pos:end="73:42"><expr pos:start="73:21" pos:end="73:41"><name pos:start="73:21" pos:end="73:21">i</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <name pos:start="73:25" pos:end="73:41"><name pos:start="73:25" pos:end="73:29">ifile</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:41">nb_streams</name></name></expr>;</condition> <incr pos:start="73:44" pos:end="73:46"><expr pos:start="73:44" pos:end="73:46"><name pos:start="73:44" pos:end="73:44">i</name><operator pos:start="73:45" pos:end="73:46">++</operator></expr></incr>)</control> <block pos:start="73:49" pos:end="99:9">{<block_content pos:start="75:13" pos:end="97:13">

            <expr_stmt pos:start="75:13" pos:end="75:54"><expr pos:start="75:13" pos:end="75:53"><name pos:start="75:13" pos:end="75:15">ist</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:53"><name pos:start="75:19" pos:end="75:31">input_streams</name><index pos:start="75:32" pos:end="75:53">[<expr pos:start="75:33" pos:end="75:52"><name pos:start="75:33" pos:end="75:48"><name pos:start="75:33" pos:end="75:37">ifile</name><operator pos:start="75:38" pos:end="75:39">-&gt;</operator><name pos:start="75:40" pos:end="75:48">ist_index</name></name> <operator pos:start="75:50" pos:end="75:50">+</operator> <name pos:start="75:52" pos:end="75:52">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="79:41"><if pos:start="77:13" pos:end="79:41">if <condition pos:start="77:16" pos:end="77:37">(<expr pos:start="77:17" pos:end="77:36"><name pos:start="77:17" pos:end="77:36"><name pos:start="77:17" pos:end="77:19">ist</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:36">decoding_needed</name></name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:41"><block_content pos:start="79:17" pos:end="79:41">

                <expr_stmt pos:start="79:17" pos:end="79:41"><expr pos:start="79:17" pos:end="79:40"><call pos:start="79:17" pos:end="79:40"><name pos:start="79:17" pos:end="79:29">output_packet</name><argument_list pos:start="79:30" pos:end="79:40">(<argument pos:start="79:31" pos:end="79:33"><expr pos:start="79:31" pos:end="79:33"><name pos:start="79:31" pos:end="79:33">ist</name></expr></argument>, <argument pos:start="79:36" pos:end="79:39"><expr pos:start="79:36" pos:end="79:39"><name pos:start="79:36" pos:end="79:39">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="83:13" pos:end="83:74">/* mark all outputs that don't go through lavfi as finished */</comment>

            <for pos:start="85:13" pos:end="97:13">for <control pos:start="85:17" pos:end="85:51">(<init pos:start="85:18" pos:end="85:23"><expr pos:start="85:18" pos:end="85:22"><name pos:start="85:18" pos:end="85:18">j</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:22">0</literal></expr>;</init> <condition pos:start="85:25" pos:end="85:46"><expr pos:start="85:25" pos:end="85:45"><name pos:start="85:25" pos:end="85:25">j</name> <operator pos:start="85:27" pos:end="85:27">&lt;</operator> <name pos:start="85:29" pos:end="85:45">nb_output_streams</name></expr>;</condition> <incr pos:start="85:48" pos:end="85:50"><expr pos:start="85:48" pos:end="85:50"><name pos:start="85:48" pos:end="85:48">j</name><operator pos:start="85:49" pos:end="85:50">++</operator></expr></incr>)</control> <block pos:start="85:53" pos:end="97:13">{<block_content pos:start="87:17" pos:end="95:37">

                <decl_stmt pos:start="87:17" pos:end="87:54"><decl pos:start="87:17" pos:end="87:53"><type pos:start="87:17" pos:end="87:30"><name pos:start="87:17" pos:end="87:28">OutputStream</name> <modifier pos:start="87:30" pos:end="87:30">*</modifier></type><name pos:start="87:31" pos:end="87:33">ost</name> <init pos:start="87:35" pos:end="87:53">= <expr pos:start="87:37" pos:end="87:53"><name pos:start="87:37" pos:end="87:53"><name pos:start="87:37" pos:end="87:50">output_streams</name><index pos:start="87:51" pos:end="87:53">[<expr pos:start="87:52" pos:end="87:52"><name pos:start="87:52" pos:end="87:52">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="91:17" pos:end="95:37"><if pos:start="91:17" pos:end="95:37">if <condition pos:start="91:20" pos:end="93:82">(<expr pos:start="91:21" pos:end="93:81"><name pos:start="91:21" pos:end="91:37"><name pos:start="91:21" pos:end="91:23">ost</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:37">source_index</name></name> <operator pos:start="91:39" pos:end="91:40">==</operator> <name pos:start="91:42" pos:end="91:57"><name pos:start="91:42" pos:end="91:46">ifile</name><operator pos:start="91:47" pos:end="91:48">-&gt;</operator><name pos:start="91:49" pos:end="91:57">ist_index</name></name> <operator pos:start="91:59" pos:end="91:59">+</operator> <name pos:start="91:61" pos:end="91:61">i</name> <operator pos:start="91:63" pos:end="91:64">&amp;&amp;</operator>

                    <operator pos:start="93:21" pos:end="93:21">(</operator><name pos:start="93:22" pos:end="93:37"><name pos:start="93:22" pos:end="93:24">ost</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:37">stream_copy</name></name> <operator pos:start="93:39" pos:end="93:40">||</operator> <name pos:start="93:42" pos:end="93:55"><name pos:start="93:42" pos:end="93:44">ost</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:49">enc</name><operator pos:start="93:50" pos:end="93:51">-&gt;</operator><name pos:start="93:52" pos:end="93:55">type</name></name> <operator pos:start="93:57" pos:end="93:58">==</operator> <name pos:start="93:60" pos:end="93:80">AVMEDIA_TYPE_SUBTITLE</name><operator pos:start="93:81" pos:end="93:81">)</operator></expr>)</condition><block type="pseudo" pos:start="95:21" pos:end="95:37"><block_content pos:start="95:21" pos:end="95:37">

                    <expr_stmt pos:start="95:21" pos:end="95:37"><expr pos:start="95:21" pos:end="95:36"><name pos:start="95:21" pos:end="95:33"><name pos:start="95:21" pos:end="95:23">ost</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:33">finished</name></name><operator pos:start="95:34" pos:end="95:34">=</operator> <literal type="number" pos:start="95:36" pos:end="95:36">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <return pos:start="103:9" pos:end="103:31">return <expr pos:start="103:16" pos:end="103:30"><call pos:start="103:16" pos:end="103:30"><name pos:start="103:16" pos:end="103:22">AVERROR</name><argument_list pos:start="103:23" pos:end="103:30">(<argument pos:start="103:24" pos:end="103:29"><expr pos:start="103:24" pos:end="103:29"><name pos:start="103:24" pos:end="103:29">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:19"><expr pos:start="109:5" pos:end="109:18"><call pos:start="109:5" pos:end="109:18"><name pos:start="109:5" pos:end="109:16">reset_eagain</name><argument_list pos:start="109:17" pos:end="109:18">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:20">(<expr pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:19">do_pkt_dump</name></expr>)</condition> <block pos:start="113:22" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:56">

        <expr_stmt pos:start="115:9" pos:end="117:56"><expr pos:start="115:9" pos:end="117:55"><call pos:start="115:9" pos:end="117:55"><name pos:start="115:9" pos:end="115:24">av_pkt_dump_log2</name><argument_list pos:start="115:25" pos:end="117:55">(<argument pos:start="115:26" pos:end="115:29"><expr pos:start="115:26" pos:end="115:29"><name pos:start="115:26" pos:end="115:29">NULL</name></expr></argument>, <argument pos:start="115:32" pos:end="115:43"><expr pos:start="115:32" pos:end="115:43"><name pos:start="115:32" pos:end="115:43">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="115:46" pos:end="115:49"><expr pos:start="115:46" pos:end="115:49"><operator pos:start="115:46" pos:end="115:46">&amp;</operator><name pos:start="115:47" pos:end="115:49">pkt</name></expr></argument>, <argument pos:start="115:52" pos:end="115:62"><expr pos:start="115:52" pos:end="115:62"><name pos:start="115:52" pos:end="115:62">do_hex_dump</name></expr></argument>,

                         <argument pos:start="117:26" pos:end="117:54"><expr pos:start="117:26" pos:end="117:54"><name pos:start="117:26" pos:end="117:54"><name pos:start="117:26" pos:end="117:27">is</name><operator pos:start="117:28" pos:end="117:29">-&gt;</operator><name pos:start="117:30" pos:end="117:36">streams</name><index pos:start="117:37" pos:end="117:54">[<expr pos:start="117:38" pos:end="117:53"><name pos:start="117:38" pos:end="117:53"><name pos:start="117:38" pos:end="117:40">pkt</name><operator pos:start="117:41" pos:end="117:41">.</operator><name pos:start="117:42" pos:end="117:53">stream_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="121:5" pos:end="123:48">/* the following test is needed in case new streams appear

       dynamically in stream : we ignore them */</comment>

    <if_stmt pos:start="125:5" pos:end="127:28"><if pos:start="125:5" pos:end="127:28">if <condition pos:start="125:8" pos:end="125:46">(<expr pos:start="125:9" pos:end="125:45"><name pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:11">pkt</name><operator pos:start="125:12" pos:end="125:12">.</operator><name pos:start="125:13" pos:end="125:24">stream_index</name></name> <operator pos:start="125:26" pos:end="125:27">&gt;=</operator> <name pos:start="125:29" pos:end="125:45"><name pos:start="125:29" pos:end="125:33">ifile</name><operator pos:start="125:34" pos:end="125:35">-&gt;</operator><name pos:start="125:36" pos:end="125:45">nb_streams</name></name></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:28"><block_content pos:start="127:9" pos:end="127:28">

        <goto pos:start="127:9" pos:end="127:28">goto <name pos:start="127:14" pos:end="127:27">discard_packet</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:61"><expr pos:start="131:5" pos:end="131:60"><name pos:start="131:5" pos:end="131:7">ist</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <name pos:start="131:11" pos:end="131:60"><name pos:start="131:11" pos:end="131:23">input_streams</name><index pos:start="131:24" pos:end="131:60">[<expr pos:start="131:25" pos:end="131:59"><name pos:start="131:25" pos:end="131:40"><name pos:start="131:25" pos:end="131:29">ifile</name><operator pos:start="131:30" pos:end="131:31">-&gt;</operator><name pos:start="131:32" pos:end="131:40">ist_index</name></name> <operator pos:start="131:42" pos:end="131:42">+</operator> <name pos:start="131:44" pos:end="131:59"><name pos:start="131:44" pos:end="131:46">pkt</name><operator pos:start="131:47" pos:end="131:47">.</operator><name pos:start="131:48" pos:end="131:59">stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="135:28"><if pos:start="133:5" pos:end="135:28">if <condition pos:start="133:8" pos:end="133:21">(<expr pos:start="133:9" pos:end="133:20"><name pos:start="133:9" pos:end="133:20"><name pos:start="133:9" pos:end="133:11">ist</name><operator pos:start="133:12" pos:end="133:13">-&gt;</operator><name pos:start="133:14" pos:end="133:20">discard</name></name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:28"><block_content pos:start="135:9" pos:end="135:28">

        <goto pos:start="135:9" pos:end="135:28">goto <name pos:start="135:14" pos:end="135:27">discard_packet</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="141:86"><if pos:start="139:5" pos:end="141:86">if <condition pos:start="139:8" pos:end="139:34">(<expr pos:start="139:9" pos:end="139:33"><name pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">pkt</name><operator pos:start="139:12" pos:end="139:12">.</operator><name pos:start="139:13" pos:end="139:15">dts</name></name> <operator pos:start="139:17" pos:end="139:18">!=</operator> <name pos:start="139:20" pos:end="139:33">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:86"><block_content pos:start="141:9" pos:end="141:86">

        <expr_stmt pos:start="141:9" pos:end="141:86"><expr pos:start="141:9" pos:end="141:85"><name pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:11">pkt</name><operator pos:start="141:12" pos:end="141:12">.</operator><name pos:start="141:13" pos:end="141:15">dts</name></name> <operator pos:start="141:17" pos:end="141:18">+=</operator> <call pos:start="141:20" pos:end="141:85"><name pos:start="141:20" pos:end="141:31">av_rescale_q</name><argument_list pos:start="141:32" pos:end="141:85">(<argument pos:start="141:33" pos:end="141:48"><expr pos:start="141:33" pos:end="141:48"><name pos:start="141:33" pos:end="141:48"><name pos:start="141:33" pos:end="141:37">ifile</name><operator pos:start="141:38" pos:end="141:39">-&gt;</operator><name pos:start="141:40" pos:end="141:48">ts_offset</name></name></expr></argument>, <argument pos:start="141:51" pos:end="141:64"><expr pos:start="141:51" pos:end="141:64"><name pos:start="141:51" pos:end="141:64">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="141:67" pos:end="141:84"><expr pos:start="141:67" pos:end="141:84"><name pos:start="141:67" pos:end="141:84"><name pos:start="141:67" pos:end="141:69">ist</name><operator pos:start="141:70" pos:end="141:71">-&gt;</operator><name pos:start="141:72" pos:end="141:73">st</name><operator pos:start="141:74" pos:end="141:75">-&gt;</operator><name pos:start="141:76" pos:end="141:84">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="143:5" pos:end="145:86"><if pos:start="143:5" pos:end="145:86">if <condition pos:start="143:8" pos:end="143:34">(<expr pos:start="143:9" pos:end="143:33"><name pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">pkt</name><operator pos:start="143:12" pos:end="143:12">.</operator><name pos:start="143:13" pos:end="143:15">pts</name></name> <operator pos:start="143:17" pos:end="143:18">!=</operator> <name pos:start="143:20" pos:end="143:33">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:86"><block_content pos:start="145:9" pos:end="145:86">

        <expr_stmt pos:start="145:9" pos:end="145:86"><expr pos:start="145:9" pos:end="145:85"><name pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:11">pkt</name><operator pos:start="145:12" pos:end="145:12">.</operator><name pos:start="145:13" pos:end="145:15">pts</name></name> <operator pos:start="145:17" pos:end="145:18">+=</operator> <call pos:start="145:20" pos:end="145:85"><name pos:start="145:20" pos:end="145:31">av_rescale_q</name><argument_list pos:start="145:32" pos:end="145:85">(<argument pos:start="145:33" pos:end="145:48"><expr pos:start="145:33" pos:end="145:48"><name pos:start="145:33" pos:end="145:48"><name pos:start="145:33" pos:end="145:37">ifile</name><operator pos:start="145:38" pos:end="145:39">-&gt;</operator><name pos:start="145:40" pos:end="145:48">ts_offset</name></name></expr></argument>, <argument pos:start="145:51" pos:end="145:64"><expr pos:start="145:51" pos:end="145:64"><name pos:start="145:51" pos:end="145:64">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="145:67" pos:end="145:84"><expr pos:start="145:67" pos:end="145:84"><name pos:start="145:67" pos:end="145:84"><name pos:start="145:67" pos:end="145:69">ist</name><operator pos:start="145:70" pos:end="145:71">-&gt;</operator><name pos:start="145:72" pos:end="145:73">st</name><operator pos:start="145:74" pos:end="145:75">-&gt;</operator><name pos:start="145:76" pos:end="145:84">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="151:33"><if pos:start="149:5" pos:end="151:33">if <condition pos:start="149:8" pos:end="149:34">(<expr pos:start="149:9" pos:end="149:33"><name pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:11">pkt</name><operator pos:start="149:12" pos:end="149:12">.</operator><name pos:start="149:13" pos:end="149:15">pts</name></name> <operator pos:start="149:17" pos:end="149:18">!=</operator> <name pos:start="149:20" pos:end="149:33">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:33"><block_content pos:start="151:9" pos:end="151:33">

        <expr_stmt pos:start="151:9" pos:end="151:33"><expr pos:start="151:9" pos:end="151:32"><name pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:11">pkt</name><operator pos:start="151:12" pos:end="151:12">.</operator><name pos:start="151:13" pos:end="151:15">pts</name></name> <operator pos:start="151:17" pos:end="151:18">*=</operator> <name pos:start="151:20" pos:end="151:32"><name pos:start="151:20" pos:end="151:22">ist</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:32">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="153:5" pos:end="155:33"><if pos:start="153:5" pos:end="155:33">if <condition pos:start="153:8" pos:end="153:34">(<expr pos:start="153:9" pos:end="153:33"><name pos:start="153:9" pos:end="153:15"><name pos:start="153:9" pos:end="153:11">pkt</name><operator pos:start="153:12" pos:end="153:12">.</operator><name pos:start="153:13" pos:end="153:15">dts</name></name> <operator pos:start="153:17" pos:end="153:18">!=</operator> <name pos:start="153:20" pos:end="153:33">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="155:9" pos:end="155:33"><block_content pos:start="155:9" pos:end="155:33">

        <expr_stmt pos:start="155:9" pos:end="155:33"><expr pos:start="155:9" pos:end="155:32"><name pos:start="155:9" pos:end="155:15"><name pos:start="155:9" pos:end="155:11">pkt</name><operator pos:start="155:12" pos:end="155:12">.</operator><name pos:start="155:13" pos:end="155:15">dts</name></name> <operator pos:start="155:17" pos:end="155:18">*=</operator> <name pos:start="155:20" pos:end="155:32"><name pos:start="155:20" pos:end="155:22">ist</name><operator pos:start="155:23" pos:end="155:24">-&gt;</operator><name pos:start="155:25" pos:end="155:32">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="159:5" pos:end="187:5"><if pos:start="159:5" pos:end="187:5">if <condition pos:start="159:8" pos:end="161:48">(<expr pos:start="159:9" pos:end="161:47"><name pos:start="159:9" pos:end="159:15"><name pos:start="159:9" pos:end="159:11">pkt</name><operator pos:start="159:12" pos:end="159:12">.</operator><name pos:start="159:13" pos:end="159:15">dts</name></name> <operator pos:start="159:17" pos:end="159:18">!=</operator> <name pos:start="159:20" pos:end="159:33">AV_NOPTS_VALUE</name> <operator pos:start="159:35" pos:end="159:36">&amp;&amp;</operator> <name pos:start="159:38" pos:end="159:50"><name pos:start="159:38" pos:end="159:40">ist</name><operator pos:start="159:41" pos:end="159:42">-&gt;</operator><name pos:start="159:43" pos:end="159:50">next_dts</name></name> <operator pos:start="159:52" pos:end="159:53">!=</operator> <name pos:start="159:55" pos:end="159:68">AV_NOPTS_VALUE</name> <operator pos:start="159:70" pos:end="159:71">&amp;&amp;</operator>

        <operator pos:start="161:9" pos:end="161:9">(</operator><name pos:start="161:10" pos:end="161:27"><name pos:start="161:10" pos:end="161:11">is</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:20">iformat</name><operator pos:start="161:21" pos:end="161:22">-&gt;</operator><name pos:start="161:23" pos:end="161:27">flags</name></name> <operator pos:start="161:29" pos:end="161:29">&amp;</operator> <name pos:start="161:31" pos:end="161:46">AVFMT_TS_DISCONT</name><operator pos:start="161:47" pos:end="161:47">)</operator></expr>)</condition> <block pos:start="161:50" pos:end="187:5">{<block_content pos:start="163:9" pos:end="185:9">

        <decl_stmt pos:start="163:9" pos:end="163:84"><decl pos:start="163:9" pos:end="163:83"><type pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:15">int64_t</name></type> <name pos:start="163:17" pos:end="163:23">pkt_dts</name> <init pos:start="163:25" pos:end="163:83">= <expr pos:start="163:27" pos:end="163:83"><call pos:start="163:27" pos:end="163:83"><name pos:start="163:27" pos:end="163:38">av_rescale_q</name><argument_list pos:start="163:39" pos:end="163:83">(<argument pos:start="163:40" pos:end="163:46"><expr pos:start="163:40" pos:end="163:46"><name pos:start="163:40" pos:end="163:46"><name pos:start="163:40" pos:end="163:42">pkt</name><operator pos:start="163:43" pos:end="163:43">.</operator><name pos:start="163:44" pos:end="163:46">dts</name></name></expr></argument>, <argument pos:start="163:49" pos:end="163:66"><expr pos:start="163:49" pos:end="163:66"><name pos:start="163:49" pos:end="163:66"><name pos:start="163:49" pos:end="163:51">ist</name><operator pos:start="163:52" pos:end="163:53">-&gt;</operator><name pos:start="163:54" pos:end="163:55">st</name><operator pos:start="163:56" pos:end="163:57">-&gt;</operator><name pos:start="163:58" pos:end="163:66">time_base</name></name></expr></argument>, <argument pos:start="163:69" pos:end="163:82"><expr pos:start="163:69" pos:end="163:82"><name pos:start="163:69" pos:end="163:82">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:50"><decl pos:start="165:9" pos:end="165:49"><type pos:start="165:9" pos:end="165:15"><name pos:start="165:9" pos:end="165:15">int64_t</name></type> <name pos:start="165:17" pos:end="165:21">delta</name>   <init pos:start="165:25" pos:end="165:49">= <expr pos:start="165:27" pos:end="165:49"><name pos:start="165:27" pos:end="165:33">pkt_dts</name> <operator pos:start="165:35" pos:end="165:35">-</operator> <name pos:start="165:37" pos:end="165:49"><name pos:start="165:37" pos:end="165:39">ist</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:49">next_dts</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="169:9" pos:end="185:9"><if pos:start="169:9" pos:end="185:9">if <condition pos:start="169:12" pos:end="169:113">(<expr pos:start="169:13" pos:end="169:112"><operator pos:start="169:13" pos:end="169:13">(</operator><call pos:start="169:14" pos:end="169:25"><name pos:start="169:14" pos:end="169:18">FFABS</name><argument_list pos:start="169:19" pos:end="169:25">(<argument pos:start="169:20" pos:end="169:24"><expr pos:start="169:20" pos:end="169:24"><name pos:start="169:20" pos:end="169:24">delta</name></expr></argument>)</argument_list></call> <operator pos:start="169:27" pos:end="169:27">&gt;</operator> <literal type="number" pos:start="169:29" pos:end="169:31">1LL</literal> <operator pos:start="169:33" pos:end="169:33">*</operator> <name pos:start="169:35" pos:end="169:53">dts_delta_threshold</name> <operator pos:start="169:55" pos:end="169:55">*</operator> <name pos:start="169:57" pos:end="169:68">AV_TIME_BASE</name> <operator pos:start="169:70" pos:end="169:71">||</operator> <name pos:start="169:73" pos:end="169:79">pkt_dts</name> <operator pos:start="169:81" pos:end="169:81">+</operator> <literal type="number" pos:start="169:83" pos:end="169:83">1</literal> <operator pos:start="169:85" pos:end="169:85">&lt;</operator> <name pos:start="169:87" pos:end="169:99"><name pos:start="169:87" pos:end="169:89">ist</name><operator pos:start="169:90" pos:end="169:91">-&gt;</operator><name pos:start="169:92" pos:end="169:99">last_dts</name></name><operator pos:start="169:100" pos:end="169:100">)</operator> <operator pos:start="169:102" pos:end="169:103">&amp;&amp;</operator> <operator pos:start="169:105" pos:end="169:105">!</operator><name pos:start="169:106" pos:end="169:112">copy_ts</name></expr>)</condition> <block pos:start="169:115" pos:end="185:9">{<block_content pos:start="171:13" pos:end="183:83">

            <expr_stmt pos:start="171:13" pos:end="171:38"><expr pos:start="171:13" pos:end="171:37"><name pos:start="171:13" pos:end="171:28"><name pos:start="171:13" pos:end="171:17">ifile</name><operator pos:start="171:18" pos:end="171:19">-&gt;</operator><name pos:start="171:20" pos:end="171:28">ts_offset</name></name> <operator pos:start="171:30" pos:end="171:31">-=</operator> <name pos:start="171:33" pos:end="171:37">delta</name></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="177:44"><expr pos:start="173:13" pos:end="177:43"><call pos:start="173:13" pos:end="177:43"><name pos:start="173:13" pos:end="173:18">av_log</name><argument_list pos:start="173:19" pos:end="177:43">(<argument pos:start="173:20" pos:end="173:23"><expr pos:start="173:20" pos:end="173:23"><name pos:start="173:20" pos:end="173:23">NULL</name></expr></argument>, <argument pos:start="173:26" pos:end="173:37"><expr pos:start="173:26" pos:end="173:37"><name pos:start="173:26" pos:end="173:37">AV_LOG_DEBUG</name></expr></argument>,

                   <argument pos:start="175:20" pos:end="175:79"><expr pos:start="175:20" pos:end="175:79"><literal type="string" pos:start="175:20" pos:end="175:46">"timestamp discontinuity %"</literal><name pos:start="175:47" pos:end="175:52">PRId64</name><literal type="string" pos:start="175:53" pos:end="175:69">", new offset= %"</literal><name pos:start="175:70" pos:end="175:75">PRId64</name><literal type="string" pos:start="175:76" pos:end="175:79">"\n"</literal></expr></argument>,

                   <argument pos:start="177:20" pos:end="177:24"><expr pos:start="177:20" pos:end="177:24"><name pos:start="177:20" pos:end="177:24">delta</name></expr></argument>, <argument pos:start="177:27" pos:end="177:42"><expr pos:start="177:27" pos:end="177:42"><name pos:start="177:27" pos:end="177:42"><name pos:start="177:27" pos:end="177:31">ifile</name><operator pos:start="177:32" pos:end="177:33">-&gt;</operator><name pos:start="177:34" pos:end="177:42">ts_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:79"><expr pos:start="179:13" pos:end="179:78"><name pos:start="179:13" pos:end="179:19"><name pos:start="179:13" pos:end="179:15">pkt</name><operator pos:start="179:16" pos:end="179:16">.</operator><name pos:start="179:17" pos:end="179:19">dts</name></name> <operator pos:start="179:21" pos:end="179:22">-=</operator> <call pos:start="179:24" pos:end="179:78"><name pos:start="179:24" pos:end="179:35">av_rescale_q</name><argument_list pos:start="179:36" pos:end="179:78">(<argument pos:start="179:37" pos:end="179:41"><expr pos:start="179:37" pos:end="179:41"><name pos:start="179:37" pos:end="179:41">delta</name></expr></argument>, <argument pos:start="179:44" pos:end="179:57"><expr pos:start="179:44" pos:end="179:57"><name pos:start="179:44" pos:end="179:57">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="179:60" pos:end="179:77"><expr pos:start="179:60" pos:end="179:77"><name pos:start="179:60" pos:end="179:77"><name pos:start="179:60" pos:end="179:62">ist</name><operator pos:start="179:63" pos:end="179:64">-&gt;</operator><name pos:start="179:65" pos:end="179:66">st</name><operator pos:start="179:67" pos:end="179:68">-&gt;</operator><name pos:start="179:69" pos:end="179:77">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="181:13" pos:end="183:83"><if pos:start="181:13" pos:end="183:83">if <condition pos:start="181:16" pos:end="181:42">(<expr pos:start="181:17" pos:end="181:41"><name pos:start="181:17" pos:end="181:23"><name pos:start="181:17" pos:end="181:19">pkt</name><operator pos:start="181:20" pos:end="181:20">.</operator><name pos:start="181:21" pos:end="181:23">pts</name></name> <operator pos:start="181:25" pos:end="181:26">!=</operator> <name pos:start="181:28" pos:end="181:41">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="183:17" pos:end="183:83"><block_content pos:start="183:17" pos:end="183:83">

                <expr_stmt pos:start="183:17" pos:end="183:83"><expr pos:start="183:17" pos:end="183:82"><name pos:start="183:17" pos:end="183:23"><name pos:start="183:17" pos:end="183:19">pkt</name><operator pos:start="183:20" pos:end="183:20">.</operator><name pos:start="183:21" pos:end="183:23">pts</name></name> <operator pos:start="183:25" pos:end="183:26">-=</operator> <call pos:start="183:28" pos:end="183:82"><name pos:start="183:28" pos:end="183:39">av_rescale_q</name><argument_list pos:start="183:40" pos:end="183:82">(<argument pos:start="183:41" pos:end="183:45"><expr pos:start="183:41" pos:end="183:45"><name pos:start="183:41" pos:end="183:45">delta</name></expr></argument>, <argument pos:start="183:48" pos:end="183:61"><expr pos:start="183:48" pos:end="183:61"><name pos:start="183:48" pos:end="183:61">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="183:64" pos:end="183:81"><expr pos:start="183:64" pos:end="183:81"><name pos:start="183:64" pos:end="183:81"><name pos:start="183:64" pos:end="183:66">ist</name><operator pos:start="183:67" pos:end="183:68">-&gt;</operator><name pos:start="183:69" pos:end="183:70">st</name><operator pos:start="183:71" pos:end="183:72">-&gt;</operator><name pos:start="183:73" pos:end="183:81">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:35"><expr pos:start="191:5" pos:end="191:34"><name pos:start="191:5" pos:end="191:7">ret</name> <operator pos:start="191:9" pos:end="191:9">=</operator> <call pos:start="191:11" pos:end="191:34"><name pos:start="191:11" pos:end="191:23">output_packet</name><argument_list pos:start="191:24" pos:end="191:34">(<argument pos:start="191:25" pos:end="191:27"><expr pos:start="191:25" pos:end="191:27"><name pos:start="191:25" pos:end="191:27">ist</name></expr></argument>, <argument pos:start="191:30" pos:end="191:33"><expr pos:start="191:30" pos:end="191:33"><operator pos:start="191:30" pos:end="191:30">&amp;</operator><name pos:start="191:31" pos:end="191:33">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="203:5"><if pos:start="193:5" pos:end="203:5">if <condition pos:start="193:8" pos:end="193:16">(<expr pos:start="193:9" pos:end="193:15"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">&lt;</operator> <literal type="number" pos:start="193:15" pos:end="193:15">0</literal></expr>)</condition> <block pos:start="193:18" pos:end="203:5">{<block_content pos:start="195:9" pos:end="201:20">

        <expr_stmt pos:start="195:9" pos:end="197:48"><expr pos:start="195:9" pos:end="197:47"><call pos:start="195:9" pos:end="197:47"><name pos:start="195:9" pos:end="195:14">av_log</name><argument_list pos:start="195:15" pos:end="197:47">(<argument pos:start="195:16" pos:end="195:19"><expr pos:start="195:16" pos:end="195:19"><name pos:start="195:16" pos:end="195:19">NULL</name></expr></argument>, <argument pos:start="195:22" pos:end="195:33"><expr pos:start="195:22" pos:end="195:33"><name pos:start="195:22" pos:end="195:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="195:36" pos:end="195:73"><expr pos:start="195:36" pos:end="195:73"><literal type="string" pos:start="195:36" pos:end="195:73">"Error while decoding stream #%d:%d\n"</literal></expr></argument>,

               <argument pos:start="197:16" pos:end="197:30"><expr pos:start="197:16" pos:end="197:30"><name pos:start="197:16" pos:end="197:30"><name pos:start="197:16" pos:end="197:18">ist</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:30">file_index</name></name></expr></argument>, <argument pos:start="197:33" pos:end="197:46"><expr pos:start="197:33" pos:end="197:46"><name pos:start="197:33" pos:end="197:46"><name pos:start="197:33" pos:end="197:35">ist</name><operator pos:start="197:36" pos:end="197:37">-&gt;</operator><name pos:start="197:38" pos:end="197:39">st</name><operator pos:start="197:40" pos:end="197:41">-&gt;</operator><name pos:start="197:42" pos:end="197:46">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="201:20"><if pos:start="199:9" pos:end="201:20">if <condition pos:start="199:12" pos:end="199:26">(<expr pos:start="199:13" pos:end="199:25"><name pos:start="199:13" pos:end="199:25">exit_on_error</name></expr>)</condition><block type="pseudo" pos:start="201:13" pos:end="201:20"><block_content pos:start="201:13" pos:end="201:20">

            <expr_stmt pos:start="201:13" pos:end="201:20"><expr pos:start="201:13" pos:end="201:19"><call pos:start="201:13" pos:end="201:19"><name pos:start="201:13" pos:end="201:16">exit</name><argument_list pos:start="201:17" pos:end="201:19">(<argument pos:start="201:18" pos:end="201:18"><expr pos:start="201:18" pos:end="201:18"><literal type="number" pos:start="201:18" pos:end="201:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="207:1" pos:end="207:15"><name pos:start="207:1" pos:end="207:14">discard_packet</name>:</label>

    <expr_stmt pos:start="209:5" pos:end="209:25"><expr pos:start="209:5" pos:end="209:24"><call pos:start="209:5" pos:end="209:24"><name pos:start="209:5" pos:end="209:18">av_free_packet</name><argument_list pos:start="209:19" pos:end="209:24">(<argument pos:start="209:20" pos:end="209:23"><expr pos:start="209:20" pos:end="209:23"><operator pos:start="209:20" pos:end="209:20">&amp;</operator><name pos:start="209:21" pos:end="209:23">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="213:5" pos:end="213:13">return <expr pos:start="213:12" pos:end="213:12"><literal type="number" pos:start="213:12" pos:end="213:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
