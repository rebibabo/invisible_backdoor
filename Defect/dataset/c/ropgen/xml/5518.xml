<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5518.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">gdb_handle_vcont</name><parameter_list pos:start="1:28" pos:end="1:55">(<parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:39"><name pos:start="1:29" pos:end="1:36">GDBState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:54"><decl pos:start="1:42" pos:end="1:54"><type pos:start="1:42" pos:end="1:54"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="175:1">{<block_content pos:start="5:5" pos:end="173:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">res</name></decl>, <decl pos:start="5:14" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:16">idx</name></decl>, <decl pos:start="5:19" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:24">signal</name> <init pos:start="5:26" pos:end="5:28">= <expr pos:start="5:28" pos:end="5:28"><literal type="number" pos:start="5:28" pos:end="5:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:19">cur_action</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:19">newstates</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:21">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">cpu</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="15:1" pos:end="15:23">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:23">CONFIG_USER_ONLY</name></cpp:ifdef>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">max_cpus</name> <init pos:start="17:18" pos:end="17:20">= <expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">1</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="17:23" pos:end="17:79">/* global variable max_cpus exists only in system mode */</comment>



    <macro pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:15">CPU_FOREACH</name><argument_list pos:start="21:16" pos:end="21:20">(<argument pos:start="21:17" pos:end="21:19">cpu</argument>)</argument_list></macro> <block pos:start="21:22" pos:end="28:0">{<block_content pos:start="23:9" pos:end="23:78">

        <expr_stmt pos:start="23:9" pos:end="23:78"><expr pos:start="23:9" pos:end="23:77"><name pos:start="23:9" pos:end="23:16">max_cpus</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <ternary pos:start="23:20" pos:end="23:77"><condition pos:start="23:20" pos:end="23:47"><expr pos:start="23:20" pos:end="23:45"><name pos:start="23:20" pos:end="23:27">max_cpus</name> <operator pos:start="23:29" pos:end="23:30">&lt;=</operator> <name pos:start="23:32" pos:end="23:45"><name pos:start="23:32" pos:end="23:34">cpu</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:45">cpu_index</name></name></expr> ?</condition><then pos:start="23:49" pos:end="23:66"> <expr pos:start="23:49" pos:end="23:66"><name pos:start="23:49" pos:end="23:62"><name pos:start="23:49" pos:end="23:51">cpu</name><operator pos:start="23:52" pos:end="23:53">-&gt;</operator><name pos:start="23:54" pos:end="23:62">cpu_index</name></name> <operator pos:start="23:64" pos:end="23:64">+</operator> <literal type="number" pos:start="23:66" pos:end="23:66">1</literal></expr> </then><else pos:start="23:68" pos:end="23:77">: <expr pos:start="23:70" pos:end="23:77"><name pos:start="23:70" pos:end="23:77">max_cpus</name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="29:5" pos:end="29:35">/* uninitialised CPUs stay 0 */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:13">newstates</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:38"><name pos:start="31:17" pos:end="31:22">g_new0</name><argument_list pos:start="31:23" pos:end="31:38">(<argument pos:start="31:24" pos:end="31:27"><expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">char</name></expr></argument>, <argument pos:start="31:30" pos:end="31:37"><expr pos:start="31:30" pos:end="31:37"><name pos:start="31:30" pos:end="31:37">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:32">/* mark valid CPUs with 1 */</comment>

    <macro pos:start="37:5" pos:end="37:20"><name pos:start="37:5" pos:end="37:15">CPU_FOREACH</name><argument_list pos:start="37:16" pos:end="37:20">(<argument pos:start="37:17" pos:end="37:19">cpu</argument>)</argument_list></macro> <block pos:start="37:22" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:38">

        <expr_stmt pos:start="39:9" pos:end="39:38"><expr pos:start="39:9" pos:end="39:37"><name pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:17">newstates</name><index pos:start="39:18" pos:end="39:33">[<expr pos:start="39:19" pos:end="39:32"><name pos:start="39:19" pos:end="39:32"><name pos:start="39:19" pos:end="39:21">cpu</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:32">cpu_index</name></name></expr>]</index></name> <operator pos:start="39:35" pos:end="39:35">=</operator> <literal type="number" pos:start="39:37" pos:end="39:37">1</literal></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="45:5" pos:end="55:7">/*

     * res keeps track of what error we are returning, with -ENOTSUP meaning

     * that the command is unknown or unsupported, thus returning an empty

     * packet, while -EINVAL and -ERANGE cause an E22 packet, due to invalid,

     *  or incorrect parameters passed.

     */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:12"><expr pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:7">res</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <literal type="number" pos:start="57:11" pos:end="57:11">0</literal></expr>;</expr_stmt>

    <while pos:start="59:5" pos:end="159:5">while <condition pos:start="59:11" pos:end="59:14">(<expr pos:start="59:12" pos:end="59:13"><operator pos:start="59:12" pos:end="59:12">*</operator><name pos:start="59:13" pos:end="59:13">p</name></expr>)</condition> <block pos:start="59:16" pos:end="159:5">{<block_content pos:start="61:9" pos:end="157:9">

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:24">(<expr pos:start="61:13" pos:end="61:23"><operator pos:start="61:13" pos:end="61:13">*</operator><name pos:start="61:14" pos:end="61:14">p</name><operator pos:start="61:15" pos:end="61:16">++</operator> <operator pos:start="61:18" pos:end="61:19">!=</operator> <literal type="char" pos:start="61:21" pos:end="61:23">';'</literal></expr>)</condition> <block pos:start="61:26" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:21">

            <expr_stmt pos:start="63:13" pos:end="63:27"><expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:15">res</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <operator pos:start="63:19" pos:end="63:19">-</operator><name pos:start="63:20" pos:end="63:26">ENOTSUP</name></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:21">goto <name pos:start="65:18" pos:end="65:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:26"><expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:18">cur_action</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <operator pos:start="71:22" pos:end="71:22">*</operator><name pos:start="71:23" pos:end="71:23">p</name><operator pos:start="71:24" pos:end="71:25">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="95:9"><if pos:start="73:9" pos:end="87:9">if <condition pos:start="73:12" pos:end="73:51">(<expr pos:start="73:13" pos:end="73:50"><name pos:start="73:13" pos:end="73:22">cur_action</name> <operator pos:start="73:24" pos:end="73:25">==</operator> <literal type="char" pos:start="73:27" pos:end="73:29">'C'</literal> <operator pos:start="73:31" pos:end="73:32">||</operator> <name pos:start="73:34" pos:end="73:43">cur_action</name> <operator pos:start="73:45" pos:end="73:46">==</operator> <literal type="char" pos:start="73:48" pos:end="73:50">'S'</literal></expr>)</condition> <block pos:start="73:53" pos:end="87:9">{<block_content pos:start="75:13" pos:end="85:47">

            <expr_stmt pos:start="75:13" pos:end="75:45"><expr pos:start="75:13" pos:end="75:44"><name pos:start="75:13" pos:end="75:22">cur_action</name> <operator pos:start="75:24" pos:end="75:24">=</operator> <call pos:start="75:26" pos:end="75:44"><name pos:start="75:26" pos:end="75:32">tolower</name><argument_list pos:start="75:33" pos:end="75:44">(<argument pos:start="75:34" pos:end="75:43"><expr pos:start="75:34" pos:end="75:43"><name pos:start="75:34" pos:end="75:43">cur_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:52"><expr pos:start="77:13" pos:end="77:51"><name pos:start="77:13" pos:end="77:15">res</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:51"><name pos:start="77:19" pos:end="77:30">qemu_strtoul</name><argument_list pos:start="77:31" pos:end="77:51">(<argument pos:start="77:32" pos:end="77:36"><expr pos:start="77:32" pos:end="77:36"><name pos:start="77:32" pos:end="77:32">p</name> <operator pos:start="77:34" pos:end="77:34">+</operator> <literal type="number" pos:start="77:36" pos:end="77:36">1</literal></expr></argument>, <argument pos:start="77:39" pos:end="77:40"><expr pos:start="77:39" pos:end="77:40"><operator pos:start="77:39" pos:end="77:39">&amp;</operator><name pos:start="77:40" pos:end="77:40">p</name></expr></argument>, <argument pos:start="77:43" pos:end="77:44"><expr pos:start="77:43" pos:end="77:44"><literal type="number" pos:start="77:43" pos:end="77:44">16</literal></expr></argument>, <argument pos:start="77:47" pos:end="77:50"><expr pos:start="77:47" pos:end="77:50"><operator pos:start="77:47" pos:end="77:47">&amp;</operator><name pos:start="77:48" pos:end="77:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="83:13"><if pos:start="79:13" pos:end="83:13">if <condition pos:start="79:16" pos:end="79:20">(<expr pos:start="79:17" pos:end="79:19"><name pos:start="79:17" pos:end="79:19">res</name></expr>)</condition> <block pos:start="79:22" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:25">

                <goto pos:start="81:17" pos:end="81:25">goto <name pos:start="81:22" pos:end="81:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:47"><expr pos:start="85:13" pos:end="85:46"><name pos:start="85:13" pos:end="85:18">signal</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:46"><name pos:start="85:22" pos:end="85:41">gdb_signal_to_target</name><argument_list pos:start="85:42" pos:end="85:46">(<argument pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><name pos:start="85:43" pos:end="85:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="87:11" pos:end="95:9">else if <condition pos:start="87:19" pos:end="87:58">(<expr pos:start="87:20" pos:end="87:57"><name pos:start="87:20" pos:end="87:29">cur_action</name> <operator pos:start="87:31" pos:end="87:32">!=</operator> <literal type="char" pos:start="87:34" pos:end="87:36">'c'</literal> <operator pos:start="87:38" pos:end="87:39">&amp;&amp;</operator> <name pos:start="87:41" pos:end="87:50">cur_action</name> <operator pos:start="87:52" pos:end="87:53">!=</operator> <literal type="char" pos:start="87:55" pos:end="87:57">'s'</literal></expr>)</condition> <block pos:start="87:60" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:21">

            <comment type="block" pos:start="89:13" pos:end="89:53">/* unknown/invalid/unsupported command */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:27"><expr pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:15">res</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <operator pos:start="91:19" pos:end="91:19">-</operator><name pos:start="91:20" pos:end="91:26">ENOTSUP</name></expr>;</expr_stmt>

            <goto pos:start="93:13" pos:end="93:21">goto <name pos:start="93:18" pos:end="93:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="97:9" pos:end="97:77">/* thread specification. special values: (none), -1 = all; 0 = any */</comment>

        <if_stmt pos:start="99:9" pos:end="157:9"><if pos:start="99:9" pos:end="117:9">if <condition pos:start="99:12" pos:end="99:73">(<expr pos:start="99:13" pos:end="99:72"><operator pos:start="99:13" pos:end="99:13">(</operator><name pos:start="99:14" pos:end="99:17"><name pos:start="99:14" pos:end="99:14">p</name><index pos:start="99:15" pos:end="99:17">[<expr pos:start="99:16" pos:end="99:16"><literal type="number" pos:start="99:16" pos:end="99:16">0</literal></expr>]</index></name> <operator pos:start="99:19" pos:end="99:20">==</operator> <literal type="char" pos:start="99:22" pos:end="99:24">':'</literal> <operator pos:start="99:26" pos:end="99:27">&amp;&amp;</operator> <name pos:start="99:29" pos:end="99:32"><name pos:start="99:29" pos:end="99:29">p</name><index pos:start="99:30" pos:end="99:32">[<expr pos:start="99:31" pos:end="99:31"><literal type="number" pos:start="99:31" pos:end="99:31">1</literal></expr>]</index></name> <operator pos:start="99:34" pos:end="99:35">==</operator> <literal type="char" pos:start="99:37" pos:end="99:39">'-'</literal> <operator pos:start="99:41" pos:end="99:42">&amp;&amp;</operator> <name pos:start="99:44" pos:end="99:47"><name pos:start="99:44" pos:end="99:44">p</name><index pos:start="99:45" pos:end="99:47">[<expr pos:start="99:46" pos:end="99:46"><literal type="number" pos:start="99:46" pos:end="99:46">2</literal></expr>]</index></name> <operator pos:start="99:49" pos:end="99:50">==</operator> <literal type="char" pos:start="99:52" pos:end="99:54">'1'</literal><operator pos:start="99:55" pos:end="99:55">)</operator> <operator pos:start="99:57" pos:end="99:58">||</operator> <operator pos:start="99:60" pos:end="99:60">(</operator><name pos:start="99:61" pos:end="99:64"><name pos:start="99:61" pos:end="99:61">p</name><index pos:start="99:62" pos:end="99:64">[<expr pos:start="99:63" pos:end="99:63"><literal type="number" pos:start="99:63" pos:end="99:63">0</literal></expr>]</index></name> <operator pos:start="99:66" pos:end="99:67">!=</operator> <literal type="char" pos:start="99:69" pos:end="99:71">':'</literal><operator pos:start="99:72" pos:end="99:72">)</operator></expr>)</condition> <block pos:start="99:75" pos:end="117:9">{<block_content pos:start="101:13" pos:end="115:13">

            <if_stmt pos:start="101:13" pos:end="105:13"><if pos:start="101:13" pos:end="105:13">if <condition pos:start="101:16" pos:end="101:26">(<expr pos:start="101:17" pos:end="101:25"><operator pos:start="101:17" pos:end="101:17">*</operator><name pos:start="101:18" pos:end="101:18">p</name> <operator pos:start="101:20" pos:end="101:21">==</operator> <literal type="char" pos:start="101:23" pos:end="101:25">':'</literal></expr>)</condition> <block pos:start="101:28" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:23">

                <expr_stmt pos:start="103:17" pos:end="103:23"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:17">p</name> <operator pos:start="103:19" pos:end="103:20">+=</operator> <literal type="number" pos:start="103:22" pos:end="103:22">3</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <for pos:start="107:13" pos:end="115:13">for <control pos:start="107:17" pos:end="107:48">(<init pos:start="107:18" pos:end="107:25"><expr pos:start="107:18" pos:end="107:24"><name pos:start="107:18" pos:end="107:20">idx</name> <operator pos:start="107:22" pos:end="107:22">=</operator> <literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>;</init> <condition pos:start="107:27" pos:end="107:41"><expr pos:start="107:27" pos:end="107:40"><name pos:start="107:27" pos:end="107:29">idx</name> <operator pos:start="107:31" pos:end="107:31">&lt;</operator> <name pos:start="107:33" pos:end="107:40">max_cpus</name></expr>;</condition> <incr pos:start="107:43" pos:end="107:47"><expr pos:start="107:43" pos:end="107:47"><name pos:start="107:43" pos:end="107:45">idx</name><operator pos:start="107:46" pos:end="107:47">++</operator></expr></incr>)</control> <block pos:start="107:50" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:17">

                <if_stmt pos:start="109:17" pos:end="113:17"><if pos:start="109:17" pos:end="113:17">if <condition pos:start="109:20" pos:end="109:40">(<expr pos:start="109:21" pos:end="109:39"><name pos:start="109:21" pos:end="109:34"><name pos:start="109:21" pos:end="109:29">newstates</name><index pos:start="109:30" pos:end="109:34">[<expr pos:start="109:31" pos:end="109:33"><name pos:start="109:31" pos:end="109:33">idx</name></expr>]</index></name> <operator pos:start="109:36" pos:end="109:37">==</operator> <literal type="number" pos:start="109:39" pos:end="109:39">1</literal></expr>)</condition> <block pos:start="109:42" pos:end="113:17">{<block_content pos:start="111:21" pos:end="111:48">

                    <expr_stmt pos:start="111:21" pos:end="111:48"><expr pos:start="111:21" pos:end="111:47"><name pos:start="111:21" pos:end="111:34"><name pos:start="111:21" pos:end="111:29">newstates</name><index pos:start="111:30" pos:end="111:34">[<expr pos:start="111:31" pos:end="111:33"><name pos:start="111:31" pos:end="111:33">idx</name></expr>]</index></name> <operator pos:start="111:36" pos:end="111:36">=</operator> <name pos:start="111:38" pos:end="111:47">cur_action</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="117:11" pos:end="157:9">else if <condition pos:start="117:19" pos:end="117:29">(<expr pos:start="117:20" pos:end="117:28"><operator pos:start="117:20" pos:end="117:20">*</operator><name pos:start="117:21" pos:end="117:21">p</name> <operator pos:start="117:23" pos:end="117:24">==</operator> <literal type="char" pos:start="117:26" pos:end="117:28">':'</literal></expr>)</condition> <block pos:start="117:31" pos:end="157:9">{<block_content pos:start="119:13" pos:end="155:13">

            <expr_stmt pos:start="119:13" pos:end="119:16"><expr pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:13">p</name><operator pos:start="119:14" pos:end="119:15">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:48"><expr pos:start="121:13" pos:end="121:47"><name pos:start="121:13" pos:end="121:15">res</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:47"><name pos:start="121:19" pos:end="121:30">qemu_strtoul</name><argument_list pos:start="121:31" pos:end="121:47">(<argument pos:start="121:32" pos:end="121:32"><expr pos:start="121:32" pos:end="121:32"><name pos:start="121:32" pos:end="121:32">p</name></expr></argument>, <argument pos:start="121:35" pos:end="121:36"><expr pos:start="121:35" pos:end="121:36"><operator pos:start="121:35" pos:end="121:35">&amp;</operator><name pos:start="121:36" pos:end="121:36">p</name></expr></argument>, <argument pos:start="121:39" pos:end="121:40"><expr pos:start="121:39" pos:end="121:40"><literal type="number" pos:start="121:39" pos:end="121:40">16</literal></expr></argument>, <argument pos:start="121:43" pos:end="121:46"><expr pos:start="121:43" pos:end="121:46"><operator pos:start="121:43" pos:end="121:43">&amp;</operator><name pos:start="121:44" pos:end="121:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="123:13" pos:end="127:13"><if pos:start="123:13" pos:end="127:13">if <condition pos:start="123:16" pos:end="123:20">(<expr pos:start="123:17" pos:end="123:19"><name pos:start="123:17" pos:end="123:19">res</name></expr>)</condition> <block pos:start="123:22" pos:end="127:13">{<block_content pos:start="125:17" pos:end="125:25">

                <goto pos:start="125:17" pos:end="125:25">goto <name pos:start="125:22" pos:end="125:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="131:13" pos:end="131:68">/* 0 means any thread, so we pick the first valid CPU */</comment>

            <expr_stmt pos:start="133:13" pos:end="133:50"><expr pos:start="133:13" pos:end="133:49"><name pos:start="133:13" pos:end="133:15">cpu</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <ternary pos:start="133:19" pos:end="133:49"><condition pos:start="133:19" pos:end="133:23"><expr pos:start="133:19" pos:end="133:21"><name pos:start="133:19" pos:end="133:21">tmp</name></expr> ?</condition><then pos:start="133:25" pos:end="133:37"> <expr pos:start="133:25" pos:end="133:37"><call pos:start="133:25" pos:end="133:37"><name pos:start="133:25" pos:end="133:32">find_cpu</name><argument_list pos:start="133:33" pos:end="133:37">(<argument pos:start="133:34" pos:end="133:36"><expr pos:start="133:34" pos:end="133:36"><name pos:start="133:34" pos:end="133:36">tmp</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="133:39" pos:end="133:49">: <expr pos:start="133:41" pos:end="133:49"><name pos:start="133:41" pos:end="133:49">first_cpu</name></expr></else></ternary></expr>;</expr_stmt>



            <comment type="block" pos:start="137:13" pos:end="137:46">/* invalid CPU/thread specified */</comment>

            <if_stmt pos:start="139:13" pos:end="145:13"><if pos:start="139:13" pos:end="145:13">if <condition pos:start="139:16" pos:end="139:21">(<expr pos:start="139:17" pos:end="139:20"><operator pos:start="139:17" pos:end="139:17">!</operator><name pos:start="139:18" pos:end="139:20">cpu</name></expr>)</condition> <block pos:start="139:23" pos:end="145:13">{<block_content pos:start="141:17" pos:end="143:25">

                <expr_stmt pos:start="141:17" pos:end="141:30"><expr pos:start="141:17" pos:end="141:29"><name pos:start="141:17" pos:end="141:19">res</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <operator pos:start="141:23" pos:end="141:23">-</operator><name pos:start="141:24" pos:end="141:29">EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="143:17" pos:end="143:25">goto <name pos:start="143:22" pos:end="143:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="149:13" pos:end="149:57">/* only use if no previous match occourred */</comment>

            <if_stmt pos:start="151:13" pos:end="155:13"><if pos:start="151:13" pos:end="155:13">if <condition pos:start="151:16" pos:end="151:47">(<expr pos:start="151:17" pos:end="151:46"><name pos:start="151:17" pos:end="151:41"><name pos:start="151:17" pos:end="151:25">newstates</name><index pos:start="151:26" pos:end="151:41">[<expr pos:start="151:27" pos:end="151:40"><name pos:start="151:27" pos:end="151:40"><name pos:start="151:27" pos:end="151:29">cpu</name><operator pos:start="151:30" pos:end="151:31">-&gt;</operator><name pos:start="151:32" pos:end="151:40">cpu_index</name></name></expr>]</index></name> <operator pos:start="151:43" pos:end="151:44">==</operator> <literal type="number" pos:start="151:46" pos:end="151:46">1</literal></expr>)</condition> <block pos:start="151:49" pos:end="155:13">{<block_content pos:start="153:17" pos:end="153:55">

                <expr_stmt pos:start="153:17" pos:end="153:55"><expr pos:start="153:17" pos:end="153:54"><name pos:start="153:17" pos:end="153:41"><name pos:start="153:17" pos:end="153:25">newstates</name><index pos:start="153:26" pos:end="153:41">[<expr pos:start="153:27" pos:end="153:40"><name pos:start="153:27" pos:end="153:40"><name pos:start="153:27" pos:end="153:29">cpu</name><operator pos:start="153:30" pos:end="153:31">-&gt;</operator><name pos:start="153:32" pos:end="153:40">cpu_index</name></name></expr>]</index></name> <operator pos:start="153:43" pos:end="153:43">=</operator> <name pos:start="153:45" pos:end="153:54">cur_action</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="161:5" pos:end="161:23"><expr pos:start="161:5" pos:end="161:22"><name pos:start="161:5" pos:end="161:13"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:13">signal</name></name> <operator pos:start="161:15" pos:end="161:15">=</operator> <name pos:start="161:17" pos:end="161:22">signal</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:39"><expr pos:start="163:5" pos:end="163:38"><call pos:start="163:5" pos:end="163:38"><name pos:start="163:5" pos:end="163:24">gdb_continue_partial</name><argument_list pos:start="163:25" pos:end="163:38">(<argument pos:start="163:26" pos:end="163:26"><expr pos:start="163:26" pos:end="163:26"><name pos:start="163:26" pos:end="163:26">s</name></expr></argument>, <argument pos:start="163:29" pos:end="163:37"><expr pos:start="163:29" pos:end="163:37"><name pos:start="163:29" pos:end="163:37">newstates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="167:1" pos:end="167:4"><name pos:start="167:1" pos:end="167:3">out</name>:</label>

    <expr_stmt pos:start="169:5" pos:end="169:22"><expr pos:start="169:5" pos:end="169:21"><call pos:start="169:5" pos:end="169:21"><name pos:start="169:5" pos:end="169:10">g_free</name><argument_list pos:start="169:11" pos:end="169:21">(<argument pos:start="169:12" pos:end="169:20"><expr pos:start="169:12" pos:end="169:20"><name pos:start="169:12" pos:end="169:20">newstates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="173:5" pos:end="173:15">return <expr pos:start="173:12" pos:end="173:14"><name pos:start="173:12" pos:end="173:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
