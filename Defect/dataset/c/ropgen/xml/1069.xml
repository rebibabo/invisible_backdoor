<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1069.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">nbd_send_negotiate</name><parameter_list pos:start="1:30" pos:end="1:48">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:39">NBDClient</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">client</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="5:5" pos:end="145:14">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">csock</name> <init pos:start="5:15" pos:end="5:28">= <expr pos:start="5:17" pos:end="5:28"><name pos:start="5:17" pos:end="5:28"><name pos:start="5:17" pos:end="5:22">client</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:28">sock</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:29"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:29">[<expr pos:start="7:14" pos:end="7:28"><literal type="number" pos:start="7:14" pos:end="7:16">8</literal> <operator pos:start="7:16" pos:end="7:16">+</operator> <literal type="number" pos:start="7:18" pos:end="7:20">8</literal> <operator pos:start="7:20" pos:end="7:20">+</operator> <literal type="number" pos:start="7:22" pos:end="7:24">8</literal> <operator pos:start="7:24" pos:end="7:24">+</operator> <literal type="number" pos:start="7:26" pos:end="7:28">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="13:66"><decl pos:start="11:5" pos:end="13:65"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:21">myflags</name> <init pos:start="11:23" pos:end="13:65">= <expr pos:start="11:25" pos:end="13:65"><operator pos:start="11:25" pos:end="11:25">(</operator><name pos:start="11:26" pos:end="11:43">NBD_FLAG_HAS_FLAGS</name> <operator pos:start="11:45" pos:end="11:45">|</operator> <name pos:start="11:47" pos:end="11:64">NBD_FLAG_SEND_TRIM</name> <operator pos:start="11:66" pos:end="11:66">|</operator>

                         <name pos:start="13:26" pos:end="13:44">NBD_FLAG_SEND_FLUSH</name> <operator pos:start="13:46" pos:end="13:46">|</operator> <name pos:start="13:48" pos:end="13:64">NBD_FLAG_SEND_FUA</name><operator pos:start="13:65" pos:end="13:65">)</operator></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="51:7">/* Negotiation header without options:

        [ 0 ..   7]   passwd       ("NBDMAGIC")

        [ 8 ..  15]   magic        (NBD_CLIENT_MAGIC)

        [16 ..  23]   size

        [24 ..  25]   server flags (0)

        [26 ..  27]   export flags

        [28 .. 151]   reserved     (0)



       Negotiation header with options, part 1:

        [ 0 ..   7]   passwd       ("NBDMAGIC")

        [ 8 ..  15]   magic        (NBD_OPTS_MAGIC)

        [16 ..  17]   server flags (0)



       part 2 (after options are sent):

        [18 ..  25]   size

        [26 ..  27]   export flags

        [28 .. 151]   reserved     (0)

     */</comment>



    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><call pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:18">qemu_set_block</name><argument_list pos:start="55:19" pos:end="55:25">(<argument pos:start="55:20" pos:end="55:24"><expr pos:start="55:20" pos:end="55:24"><name pos:start="55:20" pos:end="55:24">csock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:6">rc</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <operator pos:start="57:10" pos:end="57:10">-</operator><name pos:start="57:11" pos:end="57:16">EINVAL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:36"><expr pos:start="61:5" pos:end="61:35"><call pos:start="61:5" pos:end="61:35"><name pos:start="61:5" pos:end="61:9">TRACE</name><argument_list pos:start="61:10" pos:end="61:35">(<argument pos:start="61:11" pos:end="61:34"><expr pos:start="61:11" pos:end="61:34"><literal type="string" pos:start="61:11" pos:end="61:34">"Beginning negotiation."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:32"><expr pos:start="63:5" pos:end="63:31"><call pos:start="63:5" pos:end="63:31"><name pos:start="63:5" pos:end="63:10">memset</name><argument_list pos:start="63:11" pos:end="63:31">(<argument pos:start="63:12" pos:end="63:14"><expr pos:start="63:12" pos:end="63:14"><name pos:start="63:12" pos:end="63:14">buf</name></expr></argument>, <argument pos:start="63:17" pos:end="63:17"><expr pos:start="63:17" pos:end="63:17"><literal type="number" pos:start="63:17" pos:end="63:17">0</literal></expr></argument>, <argument pos:start="63:20" pos:end="63:30"><expr pos:start="63:20" pos:end="63:30"><sizeof pos:start="63:20" pos:end="63:30">sizeof<argument_list pos:start="63:26" pos:end="63:30">(<argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:31"><expr pos:start="65:5" pos:end="65:30"><call pos:start="65:5" pos:end="65:30"><name pos:start="65:5" pos:end="65:10">memcpy</name><argument_list pos:start="65:11" pos:end="65:30">(<argument pos:start="65:12" pos:end="65:14"><expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">buf</name></expr></argument>, <argument pos:start="65:17" pos:end="65:26"><expr pos:start="65:17" pos:end="65:26"><literal type="string" pos:start="65:17" pos:end="65:26">"NBDMAGIC"</literal></expr></argument>, <argument pos:start="65:29" pos:end="65:29"><expr pos:start="65:29" pos:end="65:29"><literal type="number" pos:start="65:29" pos:end="65:29">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="83:5"><if pos:start="67:5" pos:end="77:5">if <condition pos:start="67:8" pos:end="67:20">(<expr pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:14">client</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:19">exp</name></name></expr>)</condition> <block pos:start="67:22" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:77">

        <expr_stmt pos:start="69:9" pos:end="69:55"><expr pos:start="69:9" pos:end="69:54"><call pos:start="69:9" pos:end="69:54"><name pos:start="69:9" pos:end="69:14">assert</name> <argument_list pos:start="69:16" pos:end="69:54">(<argument pos:start="69:17" pos:end="69:53"><expr pos:start="69:17" pos:end="69:53"><operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:38"><name pos:start="69:18" pos:end="69:23">client</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:28">exp</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:38">nbdflags</name></name> <operator pos:start="69:40" pos:end="69:40">&amp;</operator> <operator pos:start="69:42" pos:end="69:42">~</operator><literal type="number" pos:start="69:43" pos:end="69:47">65535</literal><operator pos:start="69:48" pos:end="69:48">)</operator> <operator pos:start="69:50" pos:end="69:51">==</operator> <literal type="number" pos:start="69:53" pos:end="69:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:61"><expr pos:start="71:9" pos:end="71:60"><call pos:start="71:9" pos:end="71:60"><name pos:start="71:9" pos:end="71:20">cpu_to_be64w</name><argument_list pos:start="71:21" pos:end="71:60">(<argument pos:start="71:22" pos:end="71:41"><expr pos:start="71:22" pos:end="71:41"><operator pos:start="71:22" pos:end="71:22">(</operator><name pos:start="71:23" pos:end="71:30">uint64_t</name><operator pos:start="71:31" pos:end="71:31">*</operator><operator pos:start="71:32" pos:end="71:32">)</operator><operator pos:start="71:33" pos:end="71:33">(</operator><name pos:start="71:34" pos:end="71:36">buf</name> <operator pos:start="71:38" pos:end="71:38">+</operator> <literal type="number" pos:start="71:40" pos:end="71:40">8</literal><operator pos:start="71:41" pos:end="71:41">)</operator></expr></argument>, <argument pos:start="71:44" pos:end="71:59"><expr pos:start="71:44" pos:end="71:59"><name pos:start="71:44" pos:end="71:59">NBD_CLIENT_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:63"><expr pos:start="73:9" pos:end="73:62"><call pos:start="73:9" pos:end="73:62"><name pos:start="73:9" pos:end="73:20">cpu_to_be64w</name><argument_list pos:start="73:21" pos:end="73:62">(<argument pos:start="73:22" pos:end="73:42"><expr pos:start="73:22" pos:end="73:42"><operator pos:start="73:22" pos:end="73:22">(</operator><name pos:start="73:23" pos:end="73:30">uint64_t</name><operator pos:start="73:31" pos:end="73:31">*</operator><operator pos:start="73:32" pos:end="73:32">)</operator><operator pos:start="73:33" pos:end="73:33">(</operator><name pos:start="73:34" pos:end="73:36">buf</name> <operator pos:start="73:38" pos:end="73:38">+</operator> <literal type="number" pos:start="73:40" pos:end="73:41">16</literal><operator pos:start="73:42" pos:end="73:42">)</operator></expr></argument>, <argument pos:start="73:45" pos:end="73:61"><expr pos:start="73:45" pos:end="73:61"><name pos:start="73:45" pos:end="73:61"><name pos:start="73:45" pos:end="73:50">client</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:55">exp</name><operator pos:start="73:56" pos:end="73:57">-&gt;</operator><name pos:start="73:58" pos:end="73:61">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:77"><expr pos:start="75:9" pos:end="75:76"><call pos:start="75:9" pos:end="75:76"><name pos:start="75:9" pos:end="75:20">cpu_to_be16w</name><argument_list pos:start="75:21" pos:end="75:76">(<argument pos:start="75:22" pos:end="75:42"><expr pos:start="75:22" pos:end="75:42"><operator pos:start="75:22" pos:end="75:22">(</operator><name pos:start="75:23" pos:end="75:30">uint16_t</name><operator pos:start="75:31" pos:end="75:31">*</operator><operator pos:start="75:32" pos:end="75:32">)</operator><operator pos:start="75:33" pos:end="75:33">(</operator><name pos:start="75:34" pos:end="75:36">buf</name> <operator pos:start="75:38" pos:end="75:38">+</operator> <literal type="number" pos:start="75:40" pos:end="75:41">26</literal><operator pos:start="75:42" pos:end="75:42">)</operator></expr></argument>, <argument pos:start="75:45" pos:end="75:75"><expr pos:start="75:45" pos:end="75:75"><name pos:start="75:45" pos:end="75:65"><name pos:start="75:45" pos:end="75:50">client</name><operator pos:start="75:51" pos:end="75:52">-&gt;</operator><name pos:start="75:53" pos:end="75:55">exp</name><operator pos:start="75:56" pos:end="75:57">-&gt;</operator><name pos:start="75:58" pos:end="75:65">nbdflags</name></name> <operator pos:start="75:67" pos:end="75:67">|</operator> <name pos:start="75:69" pos:end="75:75">myflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="83:5">else <block pos:start="77:12" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:70">

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><call pos:start="79:9" pos:end="79:58"><name pos:start="79:9" pos:end="79:20">cpu_to_be64w</name><argument_list pos:start="79:21" pos:end="79:58">(<argument pos:start="79:22" pos:end="79:41"><expr pos:start="79:22" pos:end="79:41"><operator pos:start="79:22" pos:end="79:22">(</operator><name pos:start="79:23" pos:end="79:30">uint64_t</name><operator pos:start="79:31" pos:end="79:31">*</operator><operator pos:start="79:32" pos:end="79:32">)</operator><operator pos:start="79:33" pos:end="79:33">(</operator><name pos:start="79:34" pos:end="79:36">buf</name> <operator pos:start="79:38" pos:end="79:38">+</operator> <literal type="number" pos:start="79:40" pos:end="79:40">8</literal><operator pos:start="79:41" pos:end="79:41">)</operator></expr></argument>, <argument pos:start="79:44" pos:end="79:57"><expr pos:start="79:44" pos:end="79:57"><name pos:start="79:44" pos:end="79:57">NBD_OPTS_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:70"><expr pos:start="81:9" pos:end="81:69"><call pos:start="81:9" pos:end="81:69"><name pos:start="81:9" pos:end="81:20">cpu_to_be16w</name><argument_list pos:start="81:21" pos:end="81:69">(<argument pos:start="81:22" pos:end="81:43"><expr pos:start="81:22" pos:end="81:43"><operator pos:start="81:22" pos:end="81:22">(</operator><name pos:start="81:23" pos:end="81:30">uint16_t</name> <operator pos:start="81:32" pos:end="81:32">*</operator><operator pos:start="81:33" pos:end="81:33">)</operator><operator pos:start="81:34" pos:end="81:34">(</operator><name pos:start="81:35" pos:end="81:37">buf</name> <operator pos:start="81:39" pos:end="81:39">+</operator> <literal type="number" pos:start="81:41" pos:end="81:42">16</literal><operator pos:start="81:43" pos:end="81:43">)</operator></expr></argument>, <argument pos:start="81:46" pos:end="81:68"><expr pos:start="81:46" pos:end="81:68"><name pos:start="81:46" pos:end="81:68">NBD_FLAG_FIXED_NEWSTYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="87:5" pos:end="133:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="87:20">(<expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:14">client</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:19">exp</name></name></expr>)</condition> <block pos:start="87:22" pos:end="97:5">{<block_content pos:start="89:9" pos:end="95:9">

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:63">(<expr pos:start="89:13" pos:end="89:62"><call pos:start="89:13" pos:end="89:47"><name pos:start="89:13" pos:end="89:22">write_sync</name><argument_list pos:start="89:23" pos:end="89:47">(<argument pos:start="89:24" pos:end="89:28"><expr pos:start="89:24" pos:end="89:28"><name pos:start="89:24" pos:end="89:28">csock</name></expr></argument>, <argument pos:start="89:31" pos:end="89:33"><expr pos:start="89:31" pos:end="89:33"><name pos:start="89:31" pos:end="89:33">buf</name></expr></argument>, <argument pos:start="89:36" pos:end="89:46"><expr pos:start="89:36" pos:end="89:46"><sizeof pos:start="89:36" pos:end="89:46">sizeof<argument_list pos:start="89:42" pos:end="89:46">(<argument pos:start="89:43" pos:end="89:45"><expr pos:start="89:43" pos:end="89:45"><name pos:start="89:43" pos:end="89:45">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="89:49" pos:end="89:50">!=</operator> <sizeof pos:start="89:52" pos:end="89:62">sizeof<argument_list pos:start="89:58" pos:end="89:62">(<argument pos:start="89:59" pos:end="89:61"><expr pos:start="89:59" pos:end="89:61"><name pos:start="89:59" pos:end="89:61">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="89:65" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:22">

            <expr_stmt pos:start="91:13" pos:end="91:32"><expr pos:start="91:13" pos:end="91:31"><call pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:15">LOG</name><argument_list pos:start="91:16" pos:end="91:31">(<argument pos:start="91:17" pos:end="91:30"><expr pos:start="91:17" pos:end="91:30"><literal type="string" pos:start="91:17" pos:end="91:30">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="93:13" pos:end="93:22">goto <name pos:start="93:18" pos:end="93:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="133:5">else <block pos:start="97:12" pos:end="133:5">{<block_content pos:start="99:9" pos:end="131:9">

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:45">(<expr pos:start="99:13" pos:end="99:44"><call pos:start="99:13" pos:end="99:38"><name pos:start="99:13" pos:end="99:22">write_sync</name><argument_list pos:start="99:23" pos:end="99:38">(<argument pos:start="99:24" pos:end="99:28"><expr pos:start="99:24" pos:end="99:28"><name pos:start="99:24" pos:end="99:28">csock</name></expr></argument>, <argument pos:start="99:31" pos:end="99:33"><expr pos:start="99:31" pos:end="99:33"><name pos:start="99:31" pos:end="99:33">buf</name></expr></argument>, <argument pos:start="99:36" pos:end="99:37"><expr pos:start="99:36" pos:end="99:37"><literal type="number" pos:start="99:36" pos:end="99:37">18</literal></expr></argument>)</argument_list></call> <operator pos:start="99:40" pos:end="99:41">!=</operator> <literal type="number" pos:start="99:43" pos:end="99:44">18</literal></expr>)</condition> <block pos:start="99:47" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:22">

            <expr_stmt pos:start="101:13" pos:end="101:32"><expr pos:start="101:13" pos:end="101:31"><call pos:start="101:13" pos:end="101:31"><name pos:start="101:13" pos:end="101:15">LOG</name><argument_list pos:start="101:16" pos:end="101:31">(<argument pos:start="101:17" pos:end="101:30"><expr pos:start="101:17" pos:end="101:30"><literal type="string" pos:start="101:17" pos:end="101:30">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="103:13" pos:end="103:22">goto <name pos:start="103:18" pos:end="103:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:41"><expr pos:start="107:9" pos:end="107:40"><name pos:start="107:9" pos:end="107:10">rc</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <call pos:start="107:14" pos:end="107:40"><name pos:start="107:14" pos:end="107:32">nbd_receive_options</name><argument_list pos:start="107:33" pos:end="107:40">(<argument pos:start="107:34" pos:end="107:39"><expr pos:start="107:34" pos:end="107:39"><name pos:start="107:34" pos:end="107:39">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:20">(<expr pos:start="109:13" pos:end="109:19"><name pos:start="109:13" pos:end="109:14">rc</name> <operator pos:start="109:16" pos:end="109:17">!=</operator> <literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>)</condition> <block pos:start="109:22" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:22">

            <expr_stmt pos:start="111:13" pos:end="111:45"><expr pos:start="111:13" pos:end="111:44"><call pos:start="111:13" pos:end="111:44"><name pos:start="111:13" pos:end="111:15">LOG</name><argument_list pos:start="111:16" pos:end="111:44">(<argument pos:start="111:17" pos:end="111:43"><expr pos:start="111:17" pos:end="111:43"><literal type="string" pos:start="111:17" pos:end="111:43">"option negotiation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:22">goto <name pos:start="113:18" pos:end="113:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:55"><expr pos:start="119:9" pos:end="119:54"><call pos:start="119:9" pos:end="119:54"><name pos:start="119:9" pos:end="119:14">assert</name> <argument_list pos:start="119:16" pos:end="119:54">(<argument pos:start="119:17" pos:end="119:53"><expr pos:start="119:17" pos:end="119:53"><operator pos:start="119:17" pos:end="119:17">(</operator><name pos:start="119:18" pos:end="119:38"><name pos:start="119:18" pos:end="119:23">client</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:28">exp</name><operator pos:start="119:29" pos:end="119:30">-&gt;</operator><name pos:start="119:31" pos:end="119:38">nbdflags</name></name> <operator pos:start="119:40" pos:end="119:40">&amp;</operator> <operator pos:start="119:42" pos:end="119:42">~</operator><literal type="number" pos:start="119:43" pos:end="119:47">65535</literal><operator pos:start="119:48" pos:end="119:48">)</operator> <operator pos:start="119:50" pos:end="119:51">==</operator> <literal type="number" pos:start="119:53" pos:end="119:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:63"><expr pos:start="121:9" pos:end="121:62"><call pos:start="121:9" pos:end="121:62"><name pos:start="121:9" pos:end="121:20">cpu_to_be64w</name><argument_list pos:start="121:21" pos:end="121:62">(<argument pos:start="121:22" pos:end="121:42"><expr pos:start="121:22" pos:end="121:42"><operator pos:start="121:22" pos:end="121:22">(</operator><name pos:start="121:23" pos:end="121:30">uint64_t</name><operator pos:start="121:31" pos:end="121:31">*</operator><operator pos:start="121:32" pos:end="121:32">)</operator><operator pos:start="121:33" pos:end="121:33">(</operator><name pos:start="121:34" pos:end="121:36">buf</name> <operator pos:start="121:38" pos:end="121:38">+</operator> <literal type="number" pos:start="121:40" pos:end="121:41">18</literal><operator pos:start="121:42" pos:end="121:42">)</operator></expr></argument>, <argument pos:start="121:45" pos:end="121:61"><expr pos:start="121:45" pos:end="121:61"><name pos:start="121:45" pos:end="121:61"><name pos:start="121:45" pos:end="121:50">client</name><operator pos:start="121:51" pos:end="121:52">-&gt;</operator><name pos:start="121:53" pos:end="121:55">exp</name><operator pos:start="121:56" pos:end="121:57">-&gt;</operator><name pos:start="121:58" pos:end="121:61">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:77"><expr pos:start="123:9" pos:end="123:76"><call pos:start="123:9" pos:end="123:76"><name pos:start="123:9" pos:end="123:20">cpu_to_be16w</name><argument_list pos:start="123:21" pos:end="123:76">(<argument pos:start="123:22" pos:end="123:42"><expr pos:start="123:22" pos:end="123:42"><operator pos:start="123:22" pos:end="123:22">(</operator><name pos:start="123:23" pos:end="123:30">uint16_t</name><operator pos:start="123:31" pos:end="123:31">*</operator><operator pos:start="123:32" pos:end="123:32">)</operator><operator pos:start="123:33" pos:end="123:33">(</operator><name pos:start="123:34" pos:end="123:36">buf</name> <operator pos:start="123:38" pos:end="123:38">+</operator> <literal type="number" pos:start="123:40" pos:end="123:41">26</literal><operator pos:start="123:42" pos:end="123:42">)</operator></expr></argument>, <argument pos:start="123:45" pos:end="123:75"><expr pos:start="123:45" pos:end="123:75"><name pos:start="123:45" pos:end="123:65"><name pos:start="123:45" pos:end="123:50">client</name><operator pos:start="123:51" pos:end="123:52">-&gt;</operator><name pos:start="123:53" pos:end="123:55">exp</name><operator pos:start="123:56" pos:end="123:57">-&gt;</operator><name pos:start="123:58" pos:end="123:65">nbdflags</name></name> <operator pos:start="123:67" pos:end="123:67">|</operator> <name pos:start="123:69" pos:end="123:75">myflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="131:9"><if pos:start="125:9" pos:end="131:9">if <condition pos:start="125:12" pos:end="125:78">(<expr pos:start="125:13" pos:end="125:77"><call pos:start="125:13" pos:end="125:57"><name pos:start="125:13" pos:end="125:22">write_sync</name><argument_list pos:start="125:23" pos:end="125:57">(<argument pos:start="125:24" pos:end="125:28"><expr pos:start="125:24" pos:end="125:28"><name pos:start="125:24" pos:end="125:28">csock</name></expr></argument>, <argument pos:start="125:31" pos:end="125:38"><expr pos:start="125:31" pos:end="125:38"><name pos:start="125:31" pos:end="125:33">buf</name> <operator pos:start="125:35" pos:end="125:35">+</operator> <literal type="number" pos:start="125:37" pos:end="125:38">18</literal></expr></argument>, <argument pos:start="125:41" pos:end="125:56"><expr pos:start="125:41" pos:end="125:56"><sizeof pos:start="125:41" pos:end="125:51">sizeof<argument_list pos:start="125:47" pos:end="125:51">(<argument pos:start="125:48" pos:end="125:50"><expr pos:start="125:48" pos:end="125:50"><name pos:start="125:48" pos:end="125:50">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="125:53" pos:end="125:53">-</operator> <literal type="number" pos:start="125:55" pos:end="125:56">18</literal></expr></argument>)</argument_list></call> <operator pos:start="125:59" pos:end="125:60">!=</operator> <sizeof pos:start="125:62" pos:end="125:72">sizeof<argument_list pos:start="125:68" pos:end="125:72">(<argument pos:start="125:69" pos:end="125:71"><expr pos:start="125:69" pos:end="125:71"><name pos:start="125:69" pos:end="125:71">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="125:74" pos:end="125:74">-</operator> <literal type="number" pos:start="125:76" pos:end="125:77">18</literal></expr>)</condition> <block pos:start="125:80" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:22">

            <expr_stmt pos:start="127:13" pos:end="127:32"><expr pos:start="127:13" pos:end="127:31"><call pos:start="127:13" pos:end="127:31"><name pos:start="127:13" pos:end="127:15">LOG</name><argument_list pos:start="127:16" pos:end="127:31">(<argument pos:start="127:17" pos:end="127:30"><expr pos:start="127:17" pos:end="127:30"><literal type="string" pos:start="127:17" pos:end="127:30">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:22">goto <name pos:start="129:18" pos:end="129:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:36"><expr pos:start="137:5" pos:end="137:35"><call pos:start="137:5" pos:end="137:35"><name pos:start="137:5" pos:end="137:9">TRACE</name><argument_list pos:start="137:10" pos:end="137:35">(<argument pos:start="137:11" pos:end="137:34"><expr pos:start="137:11" pos:end="137:34"><literal type="string" pos:start="137:11" pos:end="137:34">"Negotiation succeeded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:11"><expr pos:start="139:5" pos:end="139:10"><name pos:start="139:5" pos:end="139:6">rc</name> <operator pos:start="139:8" pos:end="139:8">=</operator> <literal type="number" pos:start="139:10" pos:end="139:10">0</literal></expr>;</expr_stmt>

<label pos:start="141:1" pos:end="141:5"><name pos:start="141:1" pos:end="141:4">fail</name>:</label>

    <expr_stmt pos:start="143:5" pos:end="143:29"><expr pos:start="143:5" pos:end="143:28"><call pos:start="143:5" pos:end="143:28"><name pos:start="143:5" pos:end="143:21">qemu_set_nonblock</name><argument_list pos:start="143:22" pos:end="143:28">(<argument pos:start="143:23" pos:end="143:27"><expr pos:start="143:23" pos:end="143:27"><name pos:start="143:23" pos:end="143:27">csock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="145:5" pos:end="145:14">return <expr pos:start="145:12" pos:end="145:13"><name pos:start="145:12" pos:end="145:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
