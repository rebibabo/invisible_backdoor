<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27128.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:32">cmos_ioport_read</name><parameter_list pos:start="1:33" pos:end="1:61">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:55">uint32_t</name></type> <name pos:start="1:57" pos:end="1:60">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RTCState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <if_stmt pos:start="9:5" pos:end="87:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:24">(<expr pos:start="9:9" pos:end="9:23"><operator pos:start="9:9" pos:end="9:9">(</operator><name pos:start="9:10" pos:end="9:13">addr</name> <operator pos:start="9:15" pos:end="9:15">&amp;</operator> <literal type="number" pos:start="9:17" pos:end="9:17">1</literal><operator pos:start="9:18" pos:end="9:18">)</operator> <operator pos:start="9:20" pos:end="9:21">==</operator> <literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr>)</condition> <block pos:start="9:26" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:20">

        <return pos:start="11:9" pos:end="11:20">return <expr pos:start="11:16" pos:end="11:19"><literal type="number" pos:start="11:16" pos:end="11:19">0xff</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="13:7" pos:end="87:5">else <block pos:start="13:12" pos:end="87:5">{<block_content pos:start="15:9" pos:end="85:19">

        <switch pos:start="15:9" pos:end="78:0">switch<condition pos:start="15:15" pos:end="15:29">(<expr pos:start="15:16" pos:end="15:28"><name pos:start="15:16" pos:end="15:28"><name pos:start="15:16" pos:end="15:16">s</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:28">cmos_index</name></name></expr>)</condition> <block pos:start="15:31" pos:end="78:0">{<block_content pos:start="17:9" pos:end="73:18">

        <case pos:start="17:9" pos:end="17:25">case <expr pos:start="17:14" pos:end="17:24"><name pos:start="17:14" pos:end="17:24">RTC_SECONDS</name></expr>:</case>

        <case pos:start="19:9" pos:end="19:25">case <expr pos:start="19:14" pos:end="19:24"><name pos:start="19:14" pos:end="19:24">RTC_MINUTES</name></expr>:</case>

        <case pos:start="21:9" pos:end="21:23">case <expr pos:start="21:14" pos:end="21:22"><name pos:start="21:14" pos:end="21:22">RTC_HOURS</name></expr>:</case>

        <case pos:start="23:9" pos:end="23:29">case <expr pos:start="23:14" pos:end="23:28"><name pos:start="23:14" pos:end="23:28">RTC_DAY_OF_WEEK</name></expr>:</case>

        <case pos:start="25:9" pos:end="25:30">case <expr pos:start="25:14" pos:end="25:29"><name pos:start="25:14" pos:end="25:29">RTC_DAY_OF_MONTH</name></expr>:</case>

        <case pos:start="27:9" pos:end="27:23">case <expr pos:start="27:14" pos:end="27:22"><name pos:start="27:14" pos:end="27:22">RTC_MONTH</name></expr>:</case>

        <case pos:start="29:9" pos:end="29:22">case <expr pos:start="29:14" pos:end="29:21"><name pos:start="29:14" pos:end="29:21">RTC_YEAR</name></expr>:</case>

            <expr_stmt pos:start="31:13" pos:end="31:46"><expr pos:start="31:13" pos:end="31:45"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:45"><name pos:start="31:19" pos:end="31:19">s</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:30">cmos_data</name><index pos:start="31:31" pos:end="31:45">[<expr pos:start="31:32" pos:end="31:44"><name pos:start="31:32" pos:end="31:44"><name pos:start="31:32" pos:end="31:32">s</name><operator pos:start="31:33" pos:end="31:34">-&gt;</operator><name pos:start="31:35" pos:end="31:44">cmos_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <break pos:start="33:13" pos:end="33:18">break;</break>

        <case pos:start="35:9" pos:end="35:23">case <expr pos:start="35:14" pos:end="35:22"><name pos:start="35:14" pos:end="35:22">RTC_REG_A</name></expr>:</case>

            <expr_stmt pos:start="37:13" pos:end="37:46"><expr pos:start="37:13" pos:end="37:45"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:45"><name pos:start="37:19" pos:end="37:19">s</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:30">cmos_data</name><index pos:start="37:31" pos:end="37:45">[<expr pos:start="37:32" pos:end="37:44"><name pos:start="37:32" pos:end="37:44"><name pos:start="37:32" pos:end="37:32">s</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:44">cmos_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        <case pos:start="41:9" pos:end="41:23">case <expr pos:start="41:14" pos:end="41:22"><name pos:start="41:14" pos:end="41:22">RTC_REG_C</name></expr>:</case>

            <expr_stmt pos:start="43:13" pos:end="43:46"><expr pos:start="43:13" pos:end="43:45"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:45"><name pos:start="43:19" pos:end="43:19">s</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:30">cmos_data</name><index pos:start="43:31" pos:end="43:45">[<expr pos:start="43:32" pos:end="43:44"><name pos:start="43:32" pos:end="43:44"><name pos:start="43:32" pos:end="43:32">s</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:44">cmos_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="48:0"><expr pos:start="45:13" pos:end="45:34"><call pos:start="45:13" pos:end="45:34"><name pos:start="45:13" pos:end="45:26">qemu_irq_lower</name><argument_list pos:start="45:27" pos:end="45:34">(<argument pos:start="45:28" pos:end="45:33"><expr pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:28">s</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:33">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="47:1" pos:end="47:18">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:18">TARGET_I386</name></cpp:ifdef>

            <if_stmt pos:start="49:13" pos:end="64:0"><if pos:start="49:13" pos:end="64:0">if<condition pos:start="49:15" pos:end="49:32">(<expr pos:start="49:16" pos:end="49:31"><name pos:start="49:16" pos:end="49:31"><name pos:start="49:16" pos:end="49:16">s</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:31">irq_coalesced</name></name></expr>)</condition> <block pos:start="49:34" pos:end="64:0">{<block_content pos:start="51:17" pos:end="59:22">

                <expr_stmt pos:start="51:17" pos:end="51:43"><expr pos:start="51:17" pos:end="51:42"><call pos:start="51:17" pos:end="51:42"><name pos:start="51:17" pos:end="51:40">apic_reset_irq_delivered</name><argument_list pos:start="51:41" pos:end="51:42">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:39"><expr pos:start="53:17" pos:end="53:38"><call pos:start="53:17" pos:end="53:38"><name pos:start="53:17" pos:end="53:30">qemu_irq_raise</name><argument_list pos:start="53:31" pos:end="53:38">(<argument pos:start="53:32" pos:end="53:37"><expr pos:start="53:32" pos:end="53:37"><name pos:start="53:32" pos:end="53:37"><name pos:start="53:32" pos:end="53:32">s</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:37">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="55:17" pos:end="57:39"><if pos:start="55:17" pos:end="57:39">if <condition pos:start="55:20" pos:end="55:45">(<expr pos:start="55:21" pos:end="55:44"><call pos:start="55:21" pos:end="55:44"><name pos:start="55:21" pos:end="55:42">apic_get_irq_delivered</name><argument_list pos:start="55:43" pos:end="55:44">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="57:21" pos:end="57:39"><block_content pos:start="57:21" pos:end="57:39">

                    <expr_stmt pos:start="57:21" pos:end="57:39"><expr pos:start="57:21" pos:end="57:38"><name pos:start="57:21" pos:end="57:36"><name pos:start="57:21" pos:end="57:21">s</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:36">irq_coalesced</name></name><operator pos:start="57:37" pos:end="57:38">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="65:13" pos:end="65:43"><expr pos:start="65:13" pos:end="65:42"><name pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:24">cmos_data</name><index pos:start="65:25" pos:end="65:35">[<expr pos:start="65:26" pos:end="65:34"><name pos:start="65:26" pos:end="65:34">RTC_REG_C</name></expr>]</index></name> <operator pos:start="65:37" pos:end="65:37">=</operator> <literal type="number" pos:start="65:39" pos:end="65:42">0x00</literal></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <default pos:start="69:9" pos:end="69:16">default:</default>

            <expr_stmt pos:start="71:13" pos:end="71:46"><expr pos:start="71:13" pos:end="71:45"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:45"><name pos:start="71:19" pos:end="71:19">s</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:30">cmos_data</name><index pos:start="71:31" pos:end="71:45">[<expr pos:start="71:32" pos:end="71:44"><name pos:start="71:32" pos:end="71:44"><name pos:start="71:32" pos:end="71:32">s</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:44">cmos_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        </block_content>}</block></switch>

<cpp:ifdef pos:start="77:1" pos:end="77:17">#<cpp:directive pos:start="77:2" pos:end="77:6">ifdef</cpp:directive> <name pos:start="77:8" pos:end="77:17">DEBUG_CMOS</name></cpp:ifdef>

        <expr_stmt pos:start="79:9" pos:end="84:0"><expr pos:start="79:9" pos:end="81:34"><call pos:start="79:9" pos:end="81:34"><name pos:start="79:9" pos:end="79:14">printf</name><argument_list pos:start="79:15" pos:end="81:34">(<argument pos:start="79:16" pos:end="79:53"><expr pos:start="79:16" pos:end="79:53"><literal type="string" pos:start="79:16" pos:end="79:53">"cmos: read index=0x%02x val=0x%02x\n"</literal></expr></argument>,

               <argument pos:start="81:16" pos:end="81:28"><expr pos:start="81:16" pos:end="81:28"><name pos:start="81:16" pos:end="81:28"><name pos:start="81:16" pos:end="81:16">s</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:28">cmos_index</name></name></expr></argument>, <argument pos:start="81:31" pos:end="81:33"><expr pos:start="81:31" pos:end="81:33"><name pos:start="81:31" pos:end="81:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

        <return pos:start="85:9" pos:end="85:19">return <expr pos:start="85:16" pos:end="85:18"><name pos:start="85:16" pos:end="85:18">ret</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
