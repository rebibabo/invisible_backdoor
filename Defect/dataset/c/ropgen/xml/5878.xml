<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5878.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">lm32_uclinux_init</name><parameter_list pos:start="1:30" pos:end="1:52">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:42">MachineState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="263:1">{<block_content pos:start="5:5" pos:end="261:52">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">LM32CPU</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">CPULM32State</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">DriveInfo</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:59"><decl pos:start="19:5" pos:end="19:58"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:35">address_space_mem</name> <init pos:start="19:37" pos:end="19:58">=  <expr pos:start="19:40" pos:end="19:58"><call pos:start="19:40" pos:end="19:58"><name pos:start="19:40" pos:end="19:56">get_system_memory</name><argument_list pos:start="19:57" pos:end="19:58">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:52"><decl pos:start="21:5" pos:end="21:51"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:26">phys_ram</name> <init pos:start="21:28" pos:end="21:51">= <expr pos:start="21:30" pos:end="21:51"><call pos:start="21:30" pos:end="21:51"><name pos:start="21:30" pos:end="21:34">g_new</name><argument_list pos:start="21:35" pos:end="21:51">(<argument pos:start="21:36" pos:end="21:47"><expr pos:start="21:36" pos:end="21:47"><name pos:start="21:36" pos:end="21:47">MemoryRegion</name></expr></argument>, <argument pos:start="21:50" pos:end="21:50"><expr pos:start="21:50" pos:end="21:50"><literal type="number" pos:start="21:50" pos:end="21:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:31"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:21">cpu_irq</name></decl>, <decl pos:start="23:24" pos:end="23:30"><type ref="prev" pos:start="23:5" pos:end="23:14"/><name pos:start="23:24" pos:end="23:30"><name pos:start="23:24" pos:end="23:26">irq</name><index pos:start="23:27" pos:end="23:30">[<expr pos:start="23:28" pos:end="23:29"><literal type="number" pos:start="23:28" pos:end="23:29">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:16"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">HWSetup</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:15">hw</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">ResetInfo</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:25">reset_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:10"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:20">/* memory map */</comment>

    <decl_stmt pos:start="35:5" pos:end="35:37"><decl pos:start="35:5" pos:end="35:36"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:10">hwaddr</name></type> <name pos:start="35:12" pos:end="35:21">flash_base</name>   <init pos:start="35:25" pos:end="35:36">= <expr pos:start="35:27" pos:end="35:36"><literal type="number" pos:start="35:27" pos:end="35:36">0x04000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:49"><decl pos:start="37:5" pos:end="37:48"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:10">size_t</name></type> <name pos:start="37:12" pos:end="37:28">flash_sector_size</name>        <init pos:start="37:37" pos:end="37:48">= <expr pos:start="37:39" pos:end="37:48"><literal type="number" pos:start="37:39" pos:end="37:41">256</literal> <operator pos:start="37:43" pos:end="37:43">*</operator> <literal type="number" pos:start="37:45" pos:end="37:48">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:55"><decl pos:start="39:5" pos:end="39:54"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:10">size_t</name></type> <name pos:start="39:12" pos:end="39:21">flash_size</name>               <init pos:start="39:37" pos:end="39:54">= <expr pos:start="39:39" pos:end="39:54"><literal type="number" pos:start="39:39" pos:end="39:40">32</literal> <operator pos:start="39:42" pos:end="39:42">*</operator> <literal type="number" pos:start="39:44" pos:end="39:47">1024</literal> <operator pos:start="39:49" pos:end="39:49">*</operator> <literal type="number" pos:start="39:51" pos:end="39:54">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:37"><decl pos:start="41:5" pos:end="41:36"><type pos:start="41:5" pos:end="41:10"><name pos:start="41:5" pos:end="41:10">hwaddr</name></type> <name pos:start="41:12" pos:end="41:19">ram_base</name>     <init pos:start="41:25" pos:end="41:36">= <expr pos:start="41:27" pos:end="41:36"><literal type="number" pos:start="41:27" pos:end="41:36">0x08000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:55"><decl pos:start="43:5" pos:end="43:54"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:10">size_t</name></type> <name pos:start="43:12" pos:end="43:19">ram_size</name>                 <init pos:start="43:37" pos:end="43:54">= <expr pos:start="43:39" pos:end="43:54"><literal type="number" pos:start="43:39" pos:end="43:40">64</literal> <operator pos:start="43:42" pos:end="43:42">*</operator> <literal type="number" pos:start="43:44" pos:end="43:47">1024</literal> <operator pos:start="43:49" pos:end="43:49">*</operator> <literal type="number" pos:start="43:51" pos:end="43:54">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:37"><decl pos:start="45:5" pos:end="45:36"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:10">hwaddr</name></type> <name pos:start="45:12" pos:end="45:21">uart0_base</name>   <init pos:start="45:25" pos:end="45:36">= <expr pos:start="45:27" pos:end="45:36"><literal type="number" pos:start="45:27" pos:end="45:36">0x80000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:37"><decl pos:start="47:5" pos:end="47:36"><type pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:10">hwaddr</name></type> <name pos:start="47:12" pos:end="47:22">timer0_base</name>  <init pos:start="47:25" pos:end="47:36">= <expr pos:start="47:27" pos:end="47:36"><literal type="number" pos:start="47:27" pos:end="47:36">0x80002000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:37"><decl pos:start="49:5" pos:end="49:36"><type pos:start="49:5" pos:end="49:10"><name pos:start="49:5" pos:end="49:10">hwaddr</name></type> <name pos:start="49:12" pos:end="49:22">timer1_base</name>  <init pos:start="49:25" pos:end="49:36">= <expr pos:start="49:27" pos:end="49:36"><literal type="number" pos:start="49:27" pos:end="49:36">0x80010000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:37"><decl pos:start="51:5" pos:end="51:36"><type pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:10">hwaddr</name></type> <name pos:start="51:12" pos:end="51:22">timer2_base</name>  <init pos:start="51:25" pos:end="51:36">= <expr pos:start="51:27" pos:end="51:36"><literal type="number" pos:start="51:27" pos:end="51:36">0x80012000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:40"><decl pos:start="53:5" pos:end="53:39"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:17">uart0_irq</name>                   <init pos:start="53:37" pos:end="53:39">= <expr pos:start="53:39" pos:end="53:39"><literal type="number" pos:start="53:39" pos:end="53:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:40"><decl pos:start="55:5" pos:end="55:39"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:18">timer0_irq</name>                  <init pos:start="55:37" pos:end="55:39">= <expr pos:start="55:39" pos:end="55:39"><literal type="number" pos:start="55:39" pos:end="55:39">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:41"><decl pos:start="57:5" pos:end="57:40"><type pos:start="57:5" pos:end="57:7"><name pos:start="57:5" pos:end="57:7">int</name></type> <name pos:start="57:9" pos:end="57:18">timer1_irq</name>                  <init pos:start="57:37" pos:end="57:40">= <expr pos:start="57:39" pos:end="57:40"><literal type="number" pos:start="57:39" pos:end="57:40">20</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:41"><decl pos:start="59:5" pos:end="59:40"><type pos:start="59:5" pos:end="59:7"><name pos:start="59:5" pos:end="59:7">int</name></type> <name pos:start="59:9" pos:end="59:18">timer2_irq</name>                  <init pos:start="59:37" pos:end="59:40">= <expr pos:start="59:39" pos:end="59:40"><literal type="number" pos:start="59:39" pos:end="59:40">21</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:37"><decl pos:start="61:5" pos:end="61:36"><type pos:start="61:5" pos:end="61:10"><name pos:start="61:5" pos:end="61:10">hwaddr</name></type> <name pos:start="61:12" pos:end="61:23">hwsetup_base</name> <init pos:start="61:25" pos:end="61:36">= <expr pos:start="61:27" pos:end="61:36"><literal type="number" pos:start="61:27" pos:end="61:36">0x0bffe000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:37"><decl pos:start="63:5" pos:end="63:36"><type pos:start="63:5" pos:end="63:10"><name pos:start="63:5" pos:end="63:10">hwaddr</name></type> <name pos:start="63:12" pos:end="63:23">cmdline_base</name> <init pos:start="63:25" pos:end="63:36">= <expr pos:start="63:27" pos:end="63:36"><literal type="number" pos:start="63:27" pos:end="63:36">0x0bfff000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:37"><decl pos:start="65:5" pos:end="65:36"><type pos:start="65:5" pos:end="65:10"><name pos:start="65:5" pos:end="65:10">hwaddr</name></type> <name pos:start="65:12" pos:end="65:22">initrd_base</name>  <init pos:start="65:25" pos:end="65:36">= <expr pos:start="65:27" pos:end="65:36"><literal type="number" pos:start="65:27" pos:end="65:36">0x08400000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:49"><decl pos:start="67:5" pos:end="67:48"><type pos:start="67:5" pos:end="67:10"><name pos:start="67:5" pos:end="67:10">size_t</name></type> <name pos:start="67:12" pos:end="67:21">initrd_max</name>               <init pos:start="67:37" pos:end="67:48">= <expr pos:start="67:39" pos:end="67:48"><literal type="number" pos:start="67:39" pos:end="67:48">0x01000000</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:46"><expr pos:start="71:5" pos:end="71:45"><name pos:start="71:5" pos:end="71:14">reset_info</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <call pos:start="71:18" pos:end="71:45"><name pos:start="71:18" pos:end="71:26">g_malloc0</name><argument_list pos:start="71:27" pos:end="71:45">(<argument pos:start="71:28" pos:end="71:44"><expr pos:start="71:28" pos:end="71:44"><sizeof pos:start="71:28" pos:end="71:44">sizeof<argument_list pos:start="71:34" pos:end="71:44">(<argument pos:start="71:35" pos:end="71:43"><expr pos:start="71:35" pos:end="71:43"><name pos:start="71:35" pos:end="71:43">ResetInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:26">(<expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:17">cpu_model</name> <operator pos:start="75:19" pos:end="75:20">==</operator> <name pos:start="75:22" pos:end="75:25">NULL</name></expr>)</condition> <block pos:start="75:28" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:32">

        <expr_stmt pos:start="77:9" pos:end="77:32"><expr pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:17">cpu_model</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="string" pos:start="77:21" pos:end="77:31">"lm32-full"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:35"><expr pos:start="81:5" pos:end="81:34"><name pos:start="81:5" pos:end="81:7">cpu</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:34"><name pos:start="81:11" pos:end="81:23">cpu_lm32_init</name><argument_list pos:start="81:24" pos:end="81:34">(<argument pos:start="81:25" pos:end="81:33"><expr pos:start="81:25" pos:end="81:33"><name pos:start="81:25" pos:end="81:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:20">(<expr pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:11">cpu</name> <operator pos:start="83:13" pos:end="83:14">==</operator> <name pos:start="83:16" pos:end="83:19">NULL</name></expr>)</condition> <block pos:start="83:22" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:16">

        <expr_stmt pos:start="85:9" pos:end="85:70"><expr pos:start="85:9" pos:end="85:69"><call pos:start="85:9" pos:end="85:69"><name pos:start="85:9" pos:end="85:15">fprintf</name><argument_list pos:start="85:16" pos:end="85:69">(<argument pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:22">stderr</name></expr></argument>, <argument pos:start="85:25" pos:end="85:57"><expr pos:start="85:25" pos:end="85:57"><literal type="string" pos:start="85:25" pos:end="85:57">"qemu: unable to find CPU '%s'\n"</literal></expr></argument>, <argument pos:start="85:60" pos:end="85:68"><expr pos:start="85:60" pos:end="85:68"><name pos:start="85:60" pos:end="85:68">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><call pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:12">exit</name><argument_list pos:start="87:13" pos:end="87:15">(<argument pos:start="87:14" pos:end="87:14"><expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:20"><expr pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:7">env</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <operator pos:start="93:11" pos:end="93:11">&amp;</operator><name pos:start="93:12" pos:end="93:19"><name pos:start="93:12" pos:end="93:14">cpu</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:19"><name pos:start="95:5" pos:end="95:14">reset_info</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:19">cpu</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <name pos:start="95:23" pos:end="95:25">cpu</name></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:40"><expr pos:start="99:5" pos:end="99:39"><name pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:14">reset_info</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:26">flash_base</name></name> <operator pos:start="99:28" pos:end="99:28">=</operator> <name pos:start="99:30" pos:end="99:39">flash_base</name></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="105:41"><expr pos:start="103:5" pos:end="105:40"><call pos:start="103:5" pos:end="105:40"><name pos:start="103:5" pos:end="103:26">memory_region_init_ram</name><argument_list pos:start="103:27" pos:end="105:40">(<argument pos:start="103:28" pos:end="103:35"><expr pos:start="103:28" pos:end="103:35"><name pos:start="103:28" pos:end="103:35">phys_ram</name></expr></argument>, <argument pos:start="103:38" pos:end="103:41"><expr pos:start="103:38" pos:end="103:41"><name pos:start="103:38" pos:end="103:41">NULL</name></expr></argument>, <argument pos:start="103:44" pos:end="103:63"><expr pos:start="103:44" pos:end="103:63"><literal type="string" pos:start="103:44" pos:end="103:63">"lm32_uclinux.sdram"</literal></expr></argument>, <argument pos:start="103:66" pos:end="103:73"><expr pos:start="103:66" pos:end="103:73"><name pos:start="103:66" pos:end="103:73">ram_size</name></expr></argument>,

                           <argument pos:start="105:28" pos:end="105:39"><expr pos:start="105:28" pos:end="105:39"><operator pos:start="105:28" pos:end="105:28">&amp;</operator><name pos:start="105:29" pos:end="105:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:42"><expr pos:start="107:5" pos:end="107:41"><call pos:start="107:5" pos:end="107:41"><name pos:start="107:5" pos:end="107:31">vmstate_register_ram_global</name><argument_list pos:start="107:32" pos:end="107:41">(<argument pos:start="107:33" pos:end="107:40"><expr pos:start="107:33" pos:end="107:40"><name pos:start="107:33" pos:end="107:40">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:71"><expr pos:start="109:5" pos:end="109:70"><call pos:start="109:5" pos:end="109:70"><name pos:start="109:5" pos:end="109:31">memory_region_add_subregion</name><argument_list pos:start="109:32" pos:end="109:70">(<argument pos:start="109:33" pos:end="109:49"><expr pos:start="109:33" pos:end="109:49"><name pos:start="109:33" pos:end="109:49">address_space_mem</name></expr></argument>, <argument pos:start="109:52" pos:end="109:59"><expr pos:start="109:52" pos:end="109:59"><name pos:start="109:52" pos:end="109:59">ram_base</name></expr></argument>, <argument pos:start="109:62" pos:end="109:69"><expr pos:start="109:62" pos:end="109:69"><name pos:start="109:62" pos:end="109:69">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:39"><expr pos:start="113:5" pos:end="113:38"><name pos:start="113:5" pos:end="113:9">dinfo</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <call pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:21">drive_get</name><argument_list pos:start="113:22" pos:end="113:38">(<argument pos:start="113:23" pos:end="113:31"><expr pos:start="113:23" pos:end="113:31"><name pos:start="113:23" pos:end="113:31">IF_PFLASH</name></expr></argument>, <argument pos:start="113:34" pos:end="113:34"><expr pos:start="113:34" pos:end="113:34"><literal type="number" pos:start="113:34" pos:end="113:34">0</literal></expr></argument>, <argument pos:start="113:37" pos:end="113:37"><expr pos:start="113:37" pos:end="113:37"><literal type="number" pos:start="113:37" pos:end="113:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="115:5" pos:end="115:28">/* Spansion S29NS128P */</comment>

    <expr_stmt pos:start="117:5" pos:end="123:73"><expr pos:start="117:5" pos:end="123:72"><call pos:start="117:5" pos:end="123:72"><name pos:start="117:5" pos:end="117:25">pflash_cfi02_register</name><argument_list pos:start="117:26" pos:end="123:72">(<argument pos:start="117:27" pos:end="117:36"><expr pos:start="117:27" pos:end="117:36"><name pos:start="117:27" pos:end="117:36">flash_base</name></expr></argument>, <argument pos:start="117:39" pos:end="117:42"><expr pos:start="117:39" pos:end="117:42"><name pos:start="117:39" pos:end="117:42">NULL</name></expr></argument>, <argument pos:start="117:45" pos:end="117:64"><expr pos:start="117:45" pos:end="117:64"><literal type="string" pos:start="117:45" pos:end="117:64">"lm32_uclinux.flash"</literal></expr></argument>, <argument pos:start="117:67" pos:end="117:76"><expr pos:start="117:67" pos:end="117:76"><name pos:start="117:67" pos:end="117:76">flash_size</name></expr></argument>,

                          <argument pos:start="119:27" pos:end="119:75"><expr pos:start="119:27" pos:end="119:75"><ternary pos:start="119:27" pos:end="119:75"><condition pos:start="119:27" pos:end="119:33"><expr pos:start="119:27" pos:end="119:31"><name pos:start="119:27" pos:end="119:31">dinfo</name></expr> ?</condition><then pos:start="119:35" pos:end="119:68"> <expr pos:start="119:35" pos:end="119:68"><call pos:start="119:35" pos:end="119:68"><name pos:start="119:35" pos:end="119:40">blk_bs</name><argument_list pos:start="119:41" pos:end="119:68">(<argument pos:start="119:42" pos:end="119:67"><expr pos:start="119:42" pos:end="119:67"><call pos:start="119:42" pos:end="119:67"><name pos:start="119:42" pos:end="119:60">blk_by_legacy_dinfo</name><argument_list pos:start="119:61" pos:end="119:67">(<argument pos:start="119:62" pos:end="119:66"><expr pos:start="119:62" pos:end="119:66"><name pos:start="119:62" pos:end="119:66">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else pos:start="119:70" pos:end="119:75">: <expr pos:start="119:72" pos:end="119:75"><name pos:start="119:72" pos:end="119:75">NULL</name></expr></else></ternary></expr></argument>,

                          <argument pos:start="121:27" pos:end="121:43"><expr pos:start="121:27" pos:end="121:43"><name pos:start="121:27" pos:end="121:43">flash_sector_size</name></expr></argument>, <argument pos:start="121:46" pos:end="121:75"><expr pos:start="121:46" pos:end="121:75"><name pos:start="121:46" pos:end="121:55">flash_size</name> <operator pos:start="121:57" pos:end="121:57">/</operator> <name pos:start="121:59" pos:end="121:75">flash_sector_size</name></expr></argument>,

                          <argument pos:start="123:27" pos:end="123:27"><expr pos:start="123:27" pos:end="123:27"><literal type="number" pos:start="123:27" pos:end="123:27">1</literal></expr></argument>, <argument pos:start="123:30" pos:end="123:30"><expr pos:start="123:30" pos:end="123:30"><literal type="number" pos:start="123:30" pos:end="123:30">2</literal></expr></argument>, <argument pos:start="123:33" pos:end="123:36"><expr pos:start="123:33" pos:end="123:36"><literal type="number" pos:start="123:33" pos:end="123:36">0x01</literal></expr></argument>, <argument pos:start="123:39" pos:end="123:42"><expr pos:start="123:39" pos:end="123:42"><literal type="number" pos:start="123:39" pos:end="123:42">0x7e</literal></expr></argument>, <argument pos:start="123:45" pos:end="123:48"><expr pos:start="123:45" pos:end="123:48"><literal type="number" pos:start="123:45" pos:end="123:48">0x43</literal></expr></argument>, <argument pos:start="123:51" pos:end="123:54"><expr pos:start="123:51" pos:end="123:54"><literal type="number" pos:start="123:51" pos:end="123:54">0x00</literal></expr></argument>, <argument pos:start="123:57" pos:end="123:61"><expr pos:start="123:57" pos:end="123:61"><literal type="number" pos:start="123:57" pos:end="123:61">0x555</literal></expr></argument>, <argument pos:start="123:64" pos:end="123:68"><expr pos:start="123:64" pos:end="123:68"><literal type="number" pos:start="123:64" pos:end="123:68">0x2aa</literal></expr></argument>, <argument pos:start="123:71" pos:end="123:71"><expr pos:start="123:71" pos:end="123:71"><literal type="number" pos:start="123:71" pos:end="123:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:26">/* create irq lines */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:58"><expr pos:start="129:5" pos:end="129:57"><name pos:start="129:5" pos:end="129:11">cpu_irq</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="129:57"><name pos:start="129:15" pos:end="129:32">qemu_allocate_irqs</name><argument_list pos:start="129:33" pos:end="129:57">(<argument pos:start="129:34" pos:end="129:48"><expr pos:start="129:34" pos:end="129:48"><name pos:start="129:34" pos:end="129:48">cpu_irq_handler</name></expr></argument>, <argument pos:start="129:51" pos:end="129:53"><expr pos:start="129:51" pos:end="129:53"><name pos:start="129:51" pos:end="129:53">env</name></expr></argument>, <argument pos:start="129:56" pos:end="129:56"><expr pos:start="129:56" pos:end="129:56"><literal type="number" pos:start="129:56" pos:end="129:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:45"><expr pos:start="131:5" pos:end="131:44"><name pos:start="131:5" pos:end="131:18"><name pos:start="131:5" pos:end="131:7">env</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:18">pic_state</name></name> <operator pos:start="131:20" pos:end="131:20">=</operator> <call pos:start="131:22" pos:end="131:44"><name pos:start="131:22" pos:end="131:34">lm32_pic_init</name><argument_list pos:start="131:35" pos:end="131:44">(<argument pos:start="131:36" pos:end="131:43"><expr pos:start="131:36" pos:end="131:43"><operator pos:start="131:36" pos:end="131:36">*</operator><name pos:start="131:37" pos:end="131:43">cpu_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="133:5" pos:end="137:5">for <control pos:start="133:9" pos:end="133:28">(<init pos:start="133:10" pos:end="133:15"><expr pos:start="133:10" pos:end="133:14"><name pos:start="133:10" pos:end="133:10">i</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <literal type="number" pos:start="133:14" pos:end="133:14">0</literal></expr>;</init> <condition pos:start="133:17" pos:end="133:23"><expr pos:start="133:17" pos:end="133:22"><name pos:start="133:17" pos:end="133:17">i</name> <operator pos:start="133:19" pos:end="133:19">&lt;</operator> <literal type="number" pos:start="133:21" pos:end="133:22">32</literal></expr>;</condition> <incr pos:start="133:25" pos:end="133:27"><expr pos:start="133:25" pos:end="133:27"><name pos:start="133:25" pos:end="133:25">i</name><operator pos:start="133:26" pos:end="133:27">++</operator></expr></incr>)</control> <block pos:start="133:30" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:53">

        <expr_stmt pos:start="135:9" pos:end="135:53"><expr pos:start="135:9" pos:end="135:52"><name pos:start="135:9" pos:end="135:14"><name pos:start="135:9" pos:end="135:11">irq</name><index pos:start="135:12" pos:end="135:14">[<expr pos:start="135:13" pos:end="135:13"><name pos:start="135:13" pos:end="135:13">i</name></expr>]</index></name> <operator pos:start="135:16" pos:end="135:16">=</operator> <call pos:start="135:18" pos:end="135:52"><name pos:start="135:18" pos:end="135:33">qdev_get_gpio_in</name><argument_list pos:start="135:34" pos:end="135:52">(<argument pos:start="135:35" pos:end="135:48"><expr pos:start="135:35" pos:end="135:48"><name pos:start="135:35" pos:end="135:48"><name pos:start="135:35" pos:end="135:37">env</name><operator pos:start="135:38" pos:end="135:39">-&gt;</operator><name pos:start="135:40" pos:end="135:48">pic_state</name></name></expr></argument>, <argument pos:start="135:51" pos:end="135:51"><expr pos:start="135:51" pos:end="135:51"><name pos:start="135:51" pos:end="135:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="141:5" pos:end="141:66"><expr pos:start="141:5" pos:end="141:65"><call pos:start="141:5" pos:end="141:65"><name pos:start="141:5" pos:end="141:24">sysbus_create_simple</name><argument_list pos:start="141:25" pos:end="141:65">(<argument pos:start="141:26" pos:end="141:36"><expr pos:start="141:26" pos:end="141:36"><literal type="string" pos:start="141:26" pos:end="141:36">"lm32-uart"</literal></expr></argument>, <argument pos:start="141:39" pos:end="141:48"><expr pos:start="141:39" pos:end="141:48"><name pos:start="141:39" pos:end="141:48">uart0_base</name></expr></argument>, <argument pos:start="141:51" pos:end="141:64"><expr pos:start="141:51" pos:end="141:64"><name pos:start="141:51" pos:end="141:64"><name pos:start="141:51" pos:end="141:53">irq</name><index pos:start="141:54" pos:end="141:64">[<expr pos:start="141:55" pos:end="141:63"><name pos:start="141:55" pos:end="141:63">uart0_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:69"><expr pos:start="143:5" pos:end="143:68"><call pos:start="143:5" pos:end="143:68"><name pos:start="143:5" pos:end="143:24">sysbus_create_simple</name><argument_list pos:start="143:25" pos:end="143:68">(<argument pos:start="143:26" pos:end="143:37"><expr pos:start="143:26" pos:end="143:37"><literal type="string" pos:start="143:26" pos:end="143:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="143:40" pos:end="143:50"><expr pos:start="143:40" pos:end="143:50"><name pos:start="143:40" pos:end="143:50">timer0_base</name></expr></argument>, <argument pos:start="143:53" pos:end="143:67"><expr pos:start="143:53" pos:end="143:67"><name pos:start="143:53" pos:end="143:67"><name pos:start="143:53" pos:end="143:55">irq</name><index pos:start="143:56" pos:end="143:67">[<expr pos:start="143:57" pos:end="143:66"><name pos:start="143:57" pos:end="143:66">timer0_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:69"><expr pos:start="145:5" pos:end="145:68"><call pos:start="145:5" pos:end="145:68"><name pos:start="145:5" pos:end="145:24">sysbus_create_simple</name><argument_list pos:start="145:25" pos:end="145:68">(<argument pos:start="145:26" pos:end="145:37"><expr pos:start="145:26" pos:end="145:37"><literal type="string" pos:start="145:26" pos:end="145:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="145:40" pos:end="145:50"><expr pos:start="145:40" pos:end="145:50"><name pos:start="145:40" pos:end="145:50">timer1_base</name></expr></argument>, <argument pos:start="145:53" pos:end="145:67"><expr pos:start="145:53" pos:end="145:67"><name pos:start="145:53" pos:end="145:67"><name pos:start="145:53" pos:end="145:55">irq</name><index pos:start="145:56" pos:end="145:67">[<expr pos:start="145:57" pos:end="145:66"><name pos:start="145:57" pos:end="145:66">timer1_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:69"><expr pos:start="147:5" pos:end="147:68"><call pos:start="147:5" pos:end="147:68"><name pos:start="147:5" pos:end="147:24">sysbus_create_simple</name><argument_list pos:start="147:25" pos:end="147:68">(<argument pos:start="147:26" pos:end="147:37"><expr pos:start="147:26" pos:end="147:37"><literal type="string" pos:start="147:26" pos:end="147:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="147:40" pos:end="147:50"><expr pos:start="147:40" pos:end="147:50"><name pos:start="147:40" pos:end="147:50">timer2_base</name></expr></argument>, <argument pos:start="147:53" pos:end="147:67"><expr pos:start="147:53" pos:end="147:67"><name pos:start="147:53" pos:end="147:67"><name pos:start="147:53" pos:end="147:55">irq</name><index pos:start="147:56" pos:end="147:67">[<expr pos:start="147:57" pos:end="147:66"><name pos:start="147:57" pos:end="147:66">timer2_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:49">/* make sure juart isn't the first chardev */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:41"><expr pos:start="153:5" pos:end="153:40"><name pos:start="153:5" pos:end="153:20"><name pos:start="153:5" pos:end="153:7">env</name><operator pos:start="153:8" pos:end="153:9">-&gt;</operator><name pos:start="153:10" pos:end="153:20">juart_state</name></name> <operator pos:start="153:22" pos:end="153:22">=</operator> <call pos:start="153:24" pos:end="153:40"><name pos:start="153:24" pos:end="153:38">lm32_juart_init</name><argument_list pos:start="153:39" pos:end="153:40">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:42"><expr pos:start="157:5" pos:end="157:41"><name pos:start="157:5" pos:end="157:28"><name pos:start="157:5" pos:end="157:14">reset_info</name><operator pos:start="157:15" pos:end="157:16">-&gt;</operator><name pos:start="157:17" pos:end="157:28">bootstrap_pc</name></name> <operator pos:start="157:30" pos:end="157:30">=</operator> <name pos:start="157:32" pos:end="157:41">flash_base</name></expr>;</expr_stmt>



    <if_stmt pos:start="161:5" pos:end="199:5"><if pos:start="161:5" pos:end="199:5">if <condition pos:start="161:8" pos:end="161:24">(<expr pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:23">kernel_filename</name></expr>)</condition> <block pos:start="161:26" pos:end="199:5">{<block_content pos:start="163:9" pos:end="197:9">

        <decl_stmt pos:start="163:9" pos:end="163:23"><decl pos:start="163:9" pos:end="163:22"><type pos:start="163:9" pos:end="163:16"><name pos:start="163:9" pos:end="163:16">uint64_t</name></type> <name pos:start="163:18" pos:end="163:22">entry</name></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:24"><decl pos:start="165:9" pos:end="165:23"><type pos:start="165:9" pos:end="165:11"><name pos:start="165:9" pos:end="165:11">int</name></type> <name pos:start="165:13" pos:end="165:23">kernel_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="169:9" pos:end="171:50"><expr pos:start="169:9" pos:end="171:49"><name pos:start="169:9" pos:end="169:19">kernel_size</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <call pos:start="169:23" pos:end="171:49"><name pos:start="169:23" pos:end="169:30">load_elf</name><argument_list pos:start="169:31" pos:end="171:49">(<argument pos:start="169:32" pos:end="169:46"><expr pos:start="169:32" pos:end="169:46"><name pos:start="169:32" pos:end="169:46">kernel_filename</name></expr></argument>, <argument pos:start="169:49" pos:end="169:52"><expr pos:start="169:49" pos:end="169:52"><name pos:start="169:49" pos:end="169:52">NULL</name></expr></argument>, <argument pos:start="169:55" pos:end="169:58"><expr pos:start="169:55" pos:end="169:58"><name pos:start="169:55" pos:end="169:58">NULL</name></expr></argument>, <argument pos:start="169:61" pos:end="169:66"><expr pos:start="169:61" pos:end="169:66"><operator pos:start="169:61" pos:end="169:61">&amp;</operator><name pos:start="169:62" pos:end="169:66">entry</name></expr></argument>, <argument pos:start="169:69" pos:end="169:72"><expr pos:start="169:69" pos:end="169:72"><name pos:start="169:69" pos:end="169:72">NULL</name></expr></argument>, <argument pos:start="169:75" pos:end="169:78"><expr pos:start="169:75" pos:end="169:78"><name pos:start="169:75" pos:end="169:78">NULL</name></expr></argument>,

                               <argument pos:start="171:32" pos:end="171:32"><expr pos:start="171:32" pos:end="171:32"><literal type="number" pos:start="171:32" pos:end="171:32">1</literal></expr></argument>, <argument pos:start="171:35" pos:end="171:45"><expr pos:start="171:35" pos:end="171:45"><name pos:start="171:35" pos:end="171:45">ELF_MACHINE</name></expr></argument>, <argument pos:start="171:48" pos:end="171:48"><expr pos:start="171:48" pos:end="171:48"><literal type="number" pos:start="171:48" pos:end="171:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:41"><expr pos:start="173:9" pos:end="173:40"><name pos:start="173:9" pos:end="173:32"><name pos:start="173:9" pos:end="173:18">reset_info</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:32">bootstrap_pc</name></name> <operator pos:start="173:34" pos:end="173:34">=</operator> <name pos:start="173:36" pos:end="173:40">entry</name></expr>;</expr_stmt>



        <if_stmt pos:start="177:9" pos:end="185:9"><if pos:start="177:9" pos:end="185:9">if <condition pos:start="177:12" pos:end="177:28">(<expr pos:start="177:13" pos:end="177:27"><name pos:start="177:13" pos:end="177:23">kernel_size</name> <operator pos:start="177:25" pos:end="177:25">&lt;</operator> <literal type="number" pos:start="177:27" pos:end="177:27">0</literal></expr>)</condition> <block pos:start="177:30" pos:end="185:9">{<block_content pos:start="179:13" pos:end="183:48">

            <expr_stmt pos:start="179:13" pos:end="181:56"><expr pos:start="179:13" pos:end="181:55"><name pos:start="179:13" pos:end="179:23">kernel_size</name> <operator pos:start="179:25" pos:end="179:25">=</operator> <call pos:start="179:27" pos:end="181:55"><name pos:start="179:27" pos:end="179:45">load_image_targphys</name><argument_list pos:start="179:46" pos:end="181:55">(<argument pos:start="179:47" pos:end="179:61"><expr pos:start="179:47" pos:end="179:61"><name pos:start="179:47" pos:end="179:61">kernel_filename</name></expr></argument>, <argument pos:start="179:64" pos:end="179:71"><expr pos:start="179:64" pos:end="179:71"><name pos:start="179:64" pos:end="179:71">ram_base</name></expr></argument>,

                                              <argument pos:start="181:47" pos:end="181:54"><expr pos:start="181:47" pos:end="181:54"><name pos:start="181:47" pos:end="181:54">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:48"><expr pos:start="183:13" pos:end="183:47"><name pos:start="183:13" pos:end="183:36"><name pos:start="183:13" pos:end="183:22">reset_info</name><operator pos:start="183:23" pos:end="183:24">-&gt;</operator><name pos:start="183:25" pos:end="183:36">bootstrap_pc</name></name> <operator pos:start="183:38" pos:end="183:38">=</operator> <name pos:start="183:40" pos:end="183:47">ram_base</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="189:9" pos:end="197:9"><if pos:start="189:9" pos:end="197:9">if <condition pos:start="189:12" pos:end="189:28">(<expr pos:start="189:13" pos:end="189:27"><name pos:start="189:13" pos:end="189:23">kernel_size</name> <operator pos:start="189:25" pos:end="189:25">&lt;</operator> <literal type="number" pos:start="189:27" pos:end="189:27">0</literal></expr>)</condition> <block pos:start="189:30" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:20">

            <expr_stmt pos:start="191:13" pos:end="193:37"><expr pos:start="191:13" pos:end="193:36"><call pos:start="191:13" pos:end="193:36"><name pos:start="191:13" pos:end="191:19">fprintf</name><argument_list pos:start="191:20" pos:end="193:36">(<argument pos:start="191:21" pos:end="191:26"><expr pos:start="191:21" pos:end="191:26"><name pos:start="191:21" pos:end="191:26">stderr</name></expr></argument>, <argument pos:start="191:29" pos:end="191:64"><expr pos:start="191:29" pos:end="191:64"><literal type="string" pos:start="191:29" pos:end="191:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="193:21" pos:end="193:35"><expr pos:start="193:21" pos:end="193:35"><name pos:start="193:21" pos:end="193:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:20"><expr pos:start="195:13" pos:end="195:19"><call pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:16">exit</name><argument_list pos:start="195:17" pos:end="195:19">(<argument pos:start="195:18" pos:end="195:18"><expr pos:start="195:18" pos:end="195:18"><literal type="number" pos:start="195:18" pos:end="195:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:54">/* generate a rom with the hardware description */</comment>

    <expr_stmt pos:start="205:5" pos:end="205:24"><expr pos:start="205:5" pos:end="205:23"><name pos:start="205:5" pos:end="205:6">hw</name> <operator pos:start="205:8" pos:end="205:8">=</operator> <call pos:start="205:10" pos:end="205:23"><name pos:start="205:10" pos:end="205:21">hwsetup_init</name><argument_list pos:start="205:22" pos:end="205:23">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:42"><expr pos:start="207:5" pos:end="207:41"><call pos:start="207:5" pos:end="207:41"><name pos:start="207:5" pos:end="207:19">hwsetup_add_cpu</name><argument_list pos:start="207:20" pos:end="207:41">(<argument pos:start="207:21" pos:end="207:22"><expr pos:start="207:21" pos:end="207:22"><name pos:start="207:21" pos:end="207:22">hw</name></expr></argument>, <argument pos:start="207:25" pos:end="207:30"><expr pos:start="207:25" pos:end="207:30"><literal type="string" pos:start="207:25" pos:end="207:30">"LM32"</literal></expr></argument>, <argument pos:start="207:33" pos:end="207:40"><expr pos:start="207:33" pos:end="207:40"><literal type="number" pos:start="207:33" pos:end="207:40">75000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:59"><expr pos:start="209:5" pos:end="209:58"><call pos:start="209:5" pos:end="209:58"><name pos:start="209:5" pos:end="209:21">hwsetup_add_flash</name><argument_list pos:start="209:22" pos:end="209:58">(<argument pos:start="209:23" pos:end="209:24"><expr pos:start="209:23" pos:end="209:24"><name pos:start="209:23" pos:end="209:24">hw</name></expr></argument>, <argument pos:start="209:27" pos:end="209:33"><expr pos:start="209:27" pos:end="209:33"><literal type="string" pos:start="209:27" pos:end="209:33">"flash"</literal></expr></argument>, <argument pos:start="209:36" pos:end="209:45"><expr pos:start="209:36" pos:end="209:45"><name pos:start="209:36" pos:end="209:45">flash_base</name></expr></argument>, <argument pos:start="209:48" pos:end="209:57"><expr pos:start="209:48" pos:end="209:57"><name pos:start="209:48" pos:end="209:57">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:63"><expr pos:start="211:5" pos:end="211:62"><call pos:start="211:5" pos:end="211:62"><name pos:start="211:5" pos:end="211:25">hwsetup_add_ddr_sdram</name><argument_list pos:start="211:26" pos:end="211:62">(<argument pos:start="211:27" pos:end="211:28"><expr pos:start="211:27" pos:end="211:28"><name pos:start="211:27" pos:end="211:28">hw</name></expr></argument>, <argument pos:start="211:31" pos:end="211:41"><expr pos:start="211:31" pos:end="211:41"><literal type="string" pos:start="211:31" pos:end="211:41">"ddr_sdram"</literal></expr></argument>, <argument pos:start="211:44" pos:end="211:51"><expr pos:start="211:44" pos:end="211:51"><name pos:start="211:44" pos:end="211:51">ram_base</name></expr></argument>, <argument pos:start="211:54" pos:end="211:61"><expr pos:start="211:54" pos:end="211:61"><name pos:start="211:54" pos:end="211:61">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:61"><expr pos:start="213:5" pos:end="213:60"><call pos:start="213:5" pos:end="213:60"><name pos:start="213:5" pos:end="213:21">hwsetup_add_timer</name><argument_list pos:start="213:22" pos:end="213:60">(<argument pos:start="213:23" pos:end="213:24"><expr pos:start="213:23" pos:end="213:24"><name pos:start="213:23" pos:end="213:24">hw</name></expr></argument>, <argument pos:start="213:27" pos:end="213:34"><expr pos:start="213:27" pos:end="213:34"><literal type="string" pos:start="213:27" pos:end="213:34">"timer0"</literal></expr></argument>, <argument pos:start="213:37" pos:end="213:47"><expr pos:start="213:37" pos:end="213:47"><name pos:start="213:37" pos:end="213:47">timer0_base</name></expr></argument>, <argument pos:start="213:50" pos:end="213:59"><expr pos:start="213:50" pos:end="213:59"><name pos:start="213:50" pos:end="213:59">timer0_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:70"><expr pos:start="215:5" pos:end="215:69"><call pos:start="215:5" pos:end="215:69"><name pos:start="215:5" pos:end="215:21">hwsetup_add_timer</name><argument_list pos:start="215:22" pos:end="215:69">(<argument pos:start="215:23" pos:end="215:24"><expr pos:start="215:23" pos:end="215:24"><name pos:start="215:23" pos:end="215:24">hw</name></expr></argument>, <argument pos:start="215:27" pos:end="215:43"><expr pos:start="215:27" pos:end="215:43"><literal type="string" pos:start="215:27" pos:end="215:43">"timer1_dev_only"</literal></expr></argument>, <argument pos:start="215:46" pos:end="215:56"><expr pos:start="215:46" pos:end="215:56"><name pos:start="215:46" pos:end="215:56">timer1_base</name></expr></argument>, <argument pos:start="215:59" pos:end="215:68"><expr pos:start="215:59" pos:end="215:68"><name pos:start="215:59" pos:end="215:68">timer1_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:70"><expr pos:start="217:5" pos:end="217:69"><call pos:start="217:5" pos:end="217:69"><name pos:start="217:5" pos:end="217:21">hwsetup_add_timer</name><argument_list pos:start="217:22" pos:end="217:69">(<argument pos:start="217:23" pos:end="217:24"><expr pos:start="217:23" pos:end="217:24"><name pos:start="217:23" pos:end="217:24">hw</name></expr></argument>, <argument pos:start="217:27" pos:end="217:43"><expr pos:start="217:27" pos:end="217:43"><literal type="string" pos:start="217:27" pos:end="217:43">"timer2_dev_only"</literal></expr></argument>, <argument pos:start="217:46" pos:end="217:56"><expr pos:start="217:46" pos:end="217:56"><name pos:start="217:46" pos:end="217:56">timer2_base</name></expr></argument>, <argument pos:start="217:59" pos:end="217:68"><expr pos:start="217:59" pos:end="217:68"><name pos:start="217:59" pos:end="217:68">timer2_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:56"><expr pos:start="219:5" pos:end="219:55"><call pos:start="219:5" pos:end="219:55"><name pos:start="219:5" pos:end="219:20">hwsetup_add_uart</name><argument_list pos:start="219:21" pos:end="219:55">(<argument pos:start="219:22" pos:end="219:23"><expr pos:start="219:22" pos:end="219:23"><name pos:start="219:22" pos:end="219:23">hw</name></expr></argument>, <argument pos:start="219:26" pos:end="219:31"><expr pos:start="219:26" pos:end="219:31"><literal type="string" pos:start="219:26" pos:end="219:31">"uart"</literal></expr></argument>, <argument pos:start="219:34" pos:end="219:43"><expr pos:start="219:34" pos:end="219:43"><name pos:start="219:34" pos:end="219:43">uart0_base</name></expr></argument>, <argument pos:start="219:46" pos:end="219:54"><expr pos:start="219:46" pos:end="219:54"><name pos:start="219:46" pos:end="219:54">uart0_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:28"><expr pos:start="221:5" pos:end="221:27"><call pos:start="221:5" pos:end="221:27"><name pos:start="221:5" pos:end="221:23">hwsetup_add_trailer</name><argument_list pos:start="221:24" pos:end="221:27">(<argument pos:start="221:25" pos:end="221:26"><expr pos:start="221:25" pos:end="221:26"><name pos:start="221:25" pos:end="221:26">hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:41"><expr pos:start="223:5" pos:end="223:40"><call pos:start="223:5" pos:end="223:40"><name pos:start="223:5" pos:end="223:22">hwsetup_create_rom</name><argument_list pos:start="223:23" pos:end="223:40">(<argument pos:start="223:24" pos:end="223:25"><expr pos:start="223:24" pos:end="223:25"><name pos:start="223:24" pos:end="223:25">hw</name></expr></argument>, <argument pos:start="223:28" pos:end="223:39"><expr pos:start="223:28" pos:end="223:39"><name pos:start="223:28" pos:end="223:39">hwsetup_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:21"><expr pos:start="225:5" pos:end="225:20"><call pos:start="225:5" pos:end="225:20"><name pos:start="225:5" pos:end="225:16">hwsetup_free</name><argument_list pos:start="225:17" pos:end="225:20">(<argument pos:start="225:18" pos:end="225:19"><expr pos:start="225:18" pos:end="225:19"><name pos:start="225:18" pos:end="225:19">hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="229:5" pos:end="229:44"><expr pos:start="229:5" pos:end="229:43"><name pos:start="229:5" pos:end="229:28"><name pos:start="229:5" pos:end="229:14">reset_info</name><operator pos:start="229:15" pos:end="229:16">-&gt;</operator><name pos:start="229:17" pos:end="229:28">hwsetup_base</name></name> <operator pos:start="229:30" pos:end="229:30">=</operator> <name pos:start="229:32" pos:end="229:43">hwsetup_base</name></expr>;</expr_stmt>



    <if_stmt pos:start="233:5" pos:end="241:5"><if pos:start="233:5" pos:end="241:5">if <condition pos:start="233:8" pos:end="233:49">(<expr pos:start="233:9" pos:end="233:48"><name pos:start="233:9" pos:end="233:22">kernel_cmdline</name> <operator pos:start="233:24" pos:end="233:25">&amp;&amp;</operator> <call pos:start="233:27" pos:end="233:48"><name pos:start="233:27" pos:end="233:32">strlen</name><argument_list pos:start="233:33" pos:end="233:48">(<argument pos:start="233:34" pos:end="233:47"><expr pos:start="233:34" pos:end="233:47"><name pos:start="233:34" pos:end="233:47">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="233:51" pos:end="241:5">{<block_content pos:start="235:9" pos:end="239:48">

        <expr_stmt pos:start="235:9" pos:end="237:32"><expr pos:start="235:9" pos:end="237:31"><call pos:start="235:9" pos:end="237:31"><name pos:start="235:9" pos:end="235:24">pstrcpy_targphys</name><argument_list pos:start="235:25" pos:end="237:31">(<argument pos:start="235:26" pos:end="235:34"><expr pos:start="235:26" pos:end="235:34"><literal type="string" pos:start="235:26" pos:end="235:34">"cmdline"</literal></expr></argument>, <argument pos:start="235:37" pos:end="235:48"><expr pos:start="235:37" pos:end="235:48"><name pos:start="235:37" pos:end="235:48">cmdline_base</name></expr></argument>, <argument pos:start="235:51" pos:end="235:66"><expr pos:start="235:51" pos:end="235:66"><name pos:start="235:51" pos:end="235:66">TARGET_PAGE_SIZE</name></expr></argument>,

                <argument pos:start="237:17" pos:end="237:30"><expr pos:start="237:17" pos:end="237:30"><name pos:start="237:17" pos:end="237:30">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:48"><expr pos:start="239:9" pos:end="239:47"><name pos:start="239:9" pos:end="239:32"><name pos:start="239:9" pos:end="239:18">reset_info</name><operator pos:start="239:19" pos:end="239:20">-&gt;</operator><name pos:start="239:21" pos:end="239:32">cmdline_base</name></name> <operator pos:start="239:34" pos:end="239:34">=</operator> <name pos:start="239:36" pos:end="239:47">cmdline_base</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="245:5" pos:end="257:5"><if pos:start="245:5" pos:end="257:5">if <condition pos:start="245:8" pos:end="245:24">(<expr pos:start="245:9" pos:end="245:23"><name pos:start="245:9" pos:end="245:23">initrd_filename</name></expr>)</condition> <block pos:start="245:26" pos:end="257:5">{<block_content pos:start="247:9" pos:end="255:46">

        <decl_stmt pos:start="247:9" pos:end="247:27"><decl pos:start="247:9" pos:end="247:26"><type pos:start="247:9" pos:end="247:14"><name pos:start="247:9" pos:end="247:14">size_t</name></type> <name pos:start="247:16" pos:end="247:26">initrd_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="249:9" pos:end="251:28"><expr pos:start="249:9" pos:end="251:27"><name pos:start="249:9" pos:end="249:19">initrd_size</name> <operator pos:start="249:21" pos:end="249:21">=</operator> <call pos:start="249:23" pos:end="251:27"><name pos:start="249:23" pos:end="249:41">load_image_targphys</name><argument_list pos:start="249:42" pos:end="251:27">(<argument pos:start="249:43" pos:end="249:57"><expr pos:start="249:43" pos:end="249:57"><name pos:start="249:43" pos:end="249:57">initrd_filename</name></expr></argument>, <argument pos:start="249:60" pos:end="249:70"><expr pos:start="249:60" pos:end="249:70"><name pos:start="249:60" pos:end="249:70">initrd_base</name></expr></argument>,

                <argument pos:start="251:17" pos:end="251:26"><expr pos:start="251:17" pos:end="251:26"><name pos:start="251:17" pos:end="251:26">initrd_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:46"><expr pos:start="253:9" pos:end="253:45"><name pos:start="253:9" pos:end="253:31"><name pos:start="253:9" pos:end="253:18">reset_info</name><operator pos:start="253:19" pos:end="253:20">-&gt;</operator><name pos:start="253:21" pos:end="253:31">initrd_base</name></name> <operator pos:start="253:33" pos:end="253:33">=</operator> <name pos:start="253:35" pos:end="253:45">initrd_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:46"><expr pos:start="255:9" pos:end="255:45"><name pos:start="255:9" pos:end="255:31"><name pos:start="255:9" pos:end="255:18">reset_info</name><operator pos:start="255:19" pos:end="255:20">-&gt;</operator><name pos:start="255:21" pos:end="255:31">initrd_size</name></name> <operator pos:start="255:33" pos:end="255:33">=</operator> <name pos:start="255:35" pos:end="255:45">initrd_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:52"><expr pos:start="261:5" pos:end="261:51"><call pos:start="261:5" pos:end="261:51"><name pos:start="261:5" pos:end="261:23">qemu_register_reset</name><argument_list pos:start="261:24" pos:end="261:51">(<argument pos:start="261:25" pos:end="261:38"><expr pos:start="261:25" pos:end="261:38"><name pos:start="261:25" pos:end="261:38">main_cpu_reset</name></expr></argument>, <argument pos:start="261:41" pos:end="261:50"><expr pos:start="261:41" pos:end="261:50"><name pos:start="261:41" pos:end="261:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
