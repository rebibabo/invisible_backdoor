<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11094.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">commit_one_file</name><parameter_list pos:start="1:27" pos:end="3:39">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:41">BDRVVVFATState</name><modifier pos:start="1:42" pos:end="1:42">*</modifier></type> <name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>,

	<parameter pos:start="3:9" pos:end="3:21"><decl pos:start="3:9" pos:end="3:21"><type pos:start="3:9" pos:end="3:21"><name pos:start="3:9" pos:end="3:11">int</name></type> <name pos:start="3:13" pos:end="3:21">dir_index</name></decl></parameter>, <parameter pos:start="3:24" pos:end="3:38"><decl pos:start="3:24" pos:end="3:38"><type pos:start="3:24" pos:end="3:38"><name pos:start="3:24" pos:end="3:31">uint32_t</name></type> <name pos:start="3:33" pos:end="3:38">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="121:1">{<block_content pos:start="7:5" pos:end="119:56">

    <decl_stmt pos:start="7:5" pos:end="7:65"><decl pos:start="7:5" pos:end="7:64"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:14">direntry_t</name><modifier pos:start="7:15" pos:end="7:15">*</modifier></type> <name pos:start="7:17" pos:end="7:24">direntry</name> <init pos:start="7:26" pos:end="7:64">= <expr pos:start="7:28" pos:end="7:64"><call pos:start="7:28" pos:end="7:64"><name pos:start="7:28" pos:end="7:36">array_get</name><argument_list pos:start="7:37" pos:end="7:64">(<argument pos:start="7:38" pos:end="7:52"><expr pos:start="7:38" pos:end="7:52"><operator pos:start="7:38" pos:end="7:38">&amp;</operator><operator pos:start="7:39" pos:end="7:39">(</operator><name pos:start="7:40" pos:end="7:51"><name pos:start="7:40" pos:end="7:40">s</name><operator pos:start="7:41" pos:end="7:42">-&gt;</operator><name pos:start="7:43" pos:end="7:51">directory</name></name><operator pos:start="7:52" pos:end="7:52">)</operator></expr></argument>, <argument pos:start="7:55" pos:end="7:63"><expr pos:start="7:55" pos:end="7:63"><name pos:start="7:55" pos:end="7:63">dir_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:14">c</name> <init pos:start="9:16" pos:end="9:44">= <expr pos:start="9:18" pos:end="9:44"><call pos:start="9:18" pos:end="9:44"><name pos:start="9:18" pos:end="9:34">begin_of_direntry</name><argument_list pos:start="9:35" pos:end="9:44">(<argument pos:start="9:36" pos:end="9:43"><expr pos:start="9:36" pos:end="9:43"><name pos:start="9:36" pos:end="9:43">direntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:26">first_cluster</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><name pos:start="11:30" pos:end="11:30">c</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:13">mapping_t</name><modifier pos:start="13:14" pos:end="13:14">*</modifier></type> <name pos:start="13:16" pos:end="13:22">mapping</name> <init pos:start="13:24" pos:end="13:55">= <expr pos:start="13:26" pos:end="13:55"><call pos:start="13:26" pos:end="13:55"><name pos:start="13:26" pos:end="13:49">find_mapping_for_cluster</name><argument_list pos:start="13:50" pos:end="13:55">(<argument pos:start="13:51" pos:end="13:51"><expr pos:start="13:51" pos:end="13:51"><name pos:start="13:51" pos:end="13:51">s</name></expr></argument>, <argument pos:start="13:54" pos:end="13:54"><expr pos:start="13:54" pos:end="13:54"><name pos:start="13:54" pos:end="13:54">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:51"><decl pos:start="15:5" pos:end="15:50"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:17">size</name> <init pos:start="15:19" pos:end="15:50">= <expr pos:start="15:21" pos:end="15:50"><call pos:start="15:21" pos:end="15:50"><name pos:start="15:21" pos:end="15:40">filesize_of_direntry</name><argument_list pos:start="15:41" pos:end="15:50">(<argument pos:start="15:42" pos:end="15:49"><expr pos:start="15:42" pos:end="15:49"><name pos:start="15:42" pos:end="15:49">direntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:46"><decl pos:start="17:5" pos:end="17:45"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:8">char</name><modifier pos:start="17:9" pos:end="17:9">*</modifier></type> <name pos:start="17:11" pos:end="17:17">cluster</name> <init pos:start="17:19" pos:end="17:45">= <expr pos:start="17:21" pos:end="17:45"><call pos:start="17:21" pos:end="17:45"><name pos:start="17:21" pos:end="17:28">g_malloc</name><argument_list pos:start="17:29" pos:end="17:45">(<argument pos:start="17:30" pos:end="17:44"><expr pos:start="17:30" pos:end="17:44"><name pos:start="17:30" pos:end="17:44"><name pos:start="17:30" pos:end="17:30">s</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:44">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">fd</name> <init pos:start="21:12" pos:end="21:14">= <expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:25">(<argument pos:start="25:12" pos:end="25:24"><expr pos:start="25:12" pos:end="25:24"><name pos:start="25:12" pos:end="25:17">offset</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <name pos:start="25:21" pos:end="25:24">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:44"><expr pos:start="27:5" pos:end="27:43"><call pos:start="27:5" pos:end="27:43"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:43">(<argument pos:start="27:12" pos:end="27:42"><expr pos:start="27:12" pos:end="27:42"><operator pos:start="27:12" pos:end="27:12">(</operator><name pos:start="27:13" pos:end="27:18">offset</name> <operator pos:start="27:20" pos:end="27:20">%</operator> <name pos:start="27:22" pos:end="27:36"><name pos:start="27:22" pos:end="27:22">s</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:36">cluster_size</name></name><operator pos:start="27:37" pos:end="27:37">)</operator> <operator pos:start="27:39" pos:end="27:40">==</operator> <literal type="number" pos:start="27:42" pos:end="27:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="31:5" pos:end="33:35">for <control pos:start="31:9" pos:end="31:63">(<init pos:start="31:10" pos:end="31:29"><expr pos:start="31:10" pos:end="31:28"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:28"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:28">cluster_size</name></name></expr>;</init> <condition pos:start="31:31" pos:end="31:41"><expr pos:start="31:31" pos:end="31:40"><name pos:start="31:31" pos:end="31:31">i</name> <operator pos:start="31:33" pos:end="31:33">&lt;</operator> <name pos:start="31:35" pos:end="31:40">offset</name></expr>;</condition> <incr pos:start="31:43" pos:end="31:62"><expr pos:start="31:43" pos:end="31:62"><name pos:start="31:43" pos:end="31:43">i</name> <operator pos:start="31:45" pos:end="31:46">+=</operator> <name pos:start="31:48" pos:end="31:62"><name pos:start="31:48" pos:end="31:48">s</name><operator pos:start="31:49" pos:end="31:50">-&gt;</operator><name pos:start="31:51" pos:end="31:62">cluster_size</name></name></expr></incr>)</control><block type="pseudo" pos:start="33:9" pos:end="33:35"><block_content pos:start="33:9" pos:end="33:35">

	<expr_stmt pos:start="33:9" pos:end="33:35"><expr pos:start="33:9" pos:end="33:34"><name pos:start="33:9" pos:end="33:9">c</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:28">modified_fat_get</name><argument_list pos:start="33:29" pos:end="33:34">(<argument pos:start="33:30" pos:end="33:30"><expr pos:start="33:30" pos:end="33:30"><name pos:start="33:30" pos:end="33:30">s</name></expr></argument>, <argument pos:start="33:33" pos:end="33:33"><expr pos:start="33:33" pos:end="33:33"><name pos:start="33:33" pos:end="33:33">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="37:5" pos:end="37:64"><expr pos:start="37:5" pos:end="37:63"><name pos:start="37:5" pos:end="37:6">fd</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:63"><name pos:start="37:10" pos:end="37:13">open</name><argument_list pos:start="37:14" pos:end="37:63">(<argument pos:start="37:15" pos:end="37:27"><expr pos:start="37:15" pos:end="37:27"><name pos:start="37:15" pos:end="37:27"><name pos:start="37:15" pos:end="37:21">mapping</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:27">path</name></name></expr></argument>, <argument pos:start="37:30" pos:end="37:56"><expr pos:start="37:30" pos:end="37:56"><name pos:start="37:30" pos:end="37:35">O_RDWR</name> <operator pos:start="37:37" pos:end="37:37">|</operator> <name pos:start="37:39" pos:end="37:45">O_CREAT</name> <operator pos:start="37:47" pos:end="37:47">|</operator> <name pos:start="37:49" pos:end="37:56">O_BINARY</name></expr></argument>, <argument pos:start="37:59" pos:end="37:62"><expr pos:start="37:59" pos:end="37:62"><literal type="number" pos:start="37:59" pos:end="37:62">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:15">(<expr pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:10">fd</name> <operator pos:start="39:12" pos:end="39:12">&lt;</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>)</condition> <block pos:start="39:17" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:18">

	<expr_stmt pos:start="41:9" pos:end="43:40"><expr pos:start="41:9" pos:end="43:39"><call pos:start="41:9" pos:end="43:39"><name pos:start="41:9" pos:end="41:15">fprintf</name><argument_list pos:start="41:16" pos:end="43:39">(<argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">stderr</name></expr></argument>, <argument pos:start="41:25" pos:end="41:57"><expr pos:start="41:25" pos:end="41:57"><literal type="string" pos:start="41:25" pos:end="41:57">"Could not open %s... (%s, %d)\n"</literal></expr></argument>, <argument pos:start="41:60" pos:end="41:72"><expr pos:start="41:60" pos:end="41:72"><name pos:start="41:60" pos:end="41:72"><name pos:start="41:60" pos:end="41:66">mapping</name><operator pos:start="41:67" pos:end="41:68">-&gt;</operator><name pos:start="41:69" pos:end="41:72">path</name></name></expr></argument>,

		<argument pos:start="43:17" pos:end="43:31"><expr pos:start="43:17" pos:end="43:31"><call pos:start="43:17" pos:end="43:31"><name pos:start="43:17" pos:end="43:24">strerror</name><argument_list pos:start="43:25" pos:end="43:31">(<argument pos:start="43:26" pos:end="43:30"><expr pos:start="43:26" pos:end="43:30"><name pos:start="43:26" pos:end="43:30">errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:34" pos:end="43:38"><expr pos:start="43:34" pos:end="43:38"><name pos:start="43:34" pos:end="43:38">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><name pos:start="45:16" pos:end="45:17">fd</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="53:22"><if pos:start="49:5" pos:end="53:22">if <condition pos:start="49:8" pos:end="49:19">(<expr pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:14">offset</name> <operator pos:start="49:16" pos:end="49:16">&gt;</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="53:22"><block_content pos:start="51:9" pos:end="53:22">

	<if_stmt pos:start="51:9" pos:end="53:22"><if pos:start="51:9" pos:end="53:22">if <condition pos:start="51:12" pos:end="51:50">(<expr pos:start="51:13" pos:end="51:49"><call pos:start="51:13" pos:end="51:39"><name pos:start="51:13" pos:end="51:17">lseek</name><argument_list pos:start="51:18" pos:end="51:39">(<argument pos:start="51:19" pos:end="51:20"><expr pos:start="51:19" pos:end="51:20"><name pos:start="51:19" pos:end="51:20">fd</name></expr></argument>, <argument pos:start="51:23" pos:end="51:28"><expr pos:start="51:23" pos:end="51:28"><name pos:start="51:23" pos:end="51:28">offset</name></expr></argument>, <argument pos:start="51:31" pos:end="51:38"><expr pos:start="51:31" pos:end="51:38"><name pos:start="51:31" pos:end="51:38">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="51:41" pos:end="51:42">!=</operator> <name pos:start="51:44" pos:end="51:49">offset</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:22"><block_content pos:start="53:13" pos:end="53:22">

	    <return pos:start="53:13" pos:end="53:22">return <expr pos:start="53:20" pos:end="53:21"><operator pos:start="53:20" pos:end="53:20">-</operator><literal type="number" pos:start="53:21" pos:end="53:21">3</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



    <while pos:start="57:5" pos:end="101:5">while <condition pos:start="57:11" pos:end="57:25">(<expr pos:start="57:12" pos:end="57:24"><name pos:start="57:12" pos:end="57:17">offset</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:24">size</name></expr>)</condition> <block pos:start="57:27" pos:end="101:5">{<block_content pos:start="59:9" pos:end="99:15">

	<decl_stmt pos:start="59:9" pos:end="59:20"><decl pos:start="59:9" pos:end="59:19"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint32_t</name></type> <name pos:start="59:18" pos:end="59:19">c1</name></decl>;</decl_stmt>

	<decl_stmt pos:start="61:9" pos:end="63:49"><decl pos:start="61:9" pos:end="63:48"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:21">rest_size</name> <init pos:start="61:23" pos:end="63:48">= <expr pos:start="61:25" pos:end="63:48"><operator pos:start="61:25" pos:end="61:25">(</operator><ternary pos:start="61:26" pos:end="63:47"><condition pos:start="61:26" pos:end="61:58"><expr pos:start="61:26" pos:end="61:56"><name pos:start="61:26" pos:end="61:29">size</name> <operator pos:start="61:31" pos:end="61:31">-</operator> <name pos:start="61:33" pos:end="61:38">offset</name> <operator pos:start="61:40" pos:end="61:40">&gt;</operator> <name pos:start="61:42" pos:end="61:56"><name pos:start="61:42" pos:end="61:42">s</name><operator pos:start="61:43" pos:end="61:44">-&gt;</operator><name pos:start="61:45" pos:end="61:56">cluster_size</name></name></expr> ?</condition><then pos:start="63:17" pos:end="63:31">

		<expr pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:31">cluster_size</name></name></expr> </then><else pos:start="63:33" pos:end="63:47">: <expr pos:start="63:35" pos:end="63:47"><name pos:start="63:35" pos:end="63:38">size</name> <operator pos:start="63:40" pos:end="63:40">-</operator> <name pos:start="63:42" pos:end="63:47">offset</name></expr></else></ternary><operator pos:start="63:48" pos:end="63:48">)</operator></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="65:9" pos:end="65:16"><decl pos:start="65:9" pos:end="65:15"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:15">ret</name></decl>;</decl_stmt>



	<expr_stmt pos:start="69:9" pos:end="69:36"><expr pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:10">c1</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <call pos:start="69:14" pos:end="69:35"><name pos:start="69:14" pos:end="69:29">modified_fat_get</name><argument_list pos:start="69:30" pos:end="69:35">(<argument pos:start="69:31" pos:end="69:31"><expr pos:start="69:31" pos:end="69:31"><name pos:start="69:31" pos:end="69:31">s</name></expr></argument>, <argument pos:start="69:34" pos:end="69:34"><expr pos:start="69:34" pos:end="69:34"><name pos:start="69:34" pos:end="69:34">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="73:9" pos:end="75:60"><expr pos:start="73:9" pos:end="75:59"><call pos:start="73:9" pos:end="75:59"><name pos:start="73:9" pos:end="73:14">assert</name><argument_list pos:start="73:15" pos:end="75:59">(<argument pos:start="73:16" pos:end="75:58"><expr pos:start="73:16" pos:end="75:58"><operator pos:start="73:16" pos:end="73:16">(</operator><name pos:start="73:17" pos:end="73:20">size</name> <operator pos:start="73:22" pos:end="73:22">-</operator> <name pos:start="73:24" pos:end="73:29">offset</name> <operator pos:start="73:31" pos:end="73:32">==</operator> <literal type="number" pos:start="73:34" pos:end="73:34">0</literal> <operator pos:start="73:36" pos:end="73:37">&amp;&amp;</operator> <call pos:start="73:39" pos:end="73:51"><name pos:start="73:39" pos:end="73:45">fat_eof</name><argument_list pos:start="73:46" pos:end="73:51">(<argument pos:start="73:47" pos:end="73:47"><expr pos:start="73:47" pos:end="73:47"><name pos:start="73:47" pos:end="73:47">s</name></expr></argument>, <argument pos:start="73:50" pos:end="73:50"><expr pos:start="73:50" pos:end="73:50"><name pos:start="73:50" pos:end="73:50">c</name></expr></argument>)</argument_list></call><operator pos:start="73:52" pos:end="73:52">)</operator> <operator pos:start="73:54" pos:end="73:55">||</operator>

		<operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:21">size</name> <operator pos:start="75:23" pos:end="75:23">&gt;</operator> <name pos:start="75:25" pos:end="75:30">offset</name> <operator pos:start="75:32" pos:end="75:33">&amp;&amp;</operator> <name pos:start="75:35" pos:end="75:35">c</name> <operator pos:start="75:37" pos:end="75:38">&gt;=</operator><literal type="number" pos:start="75:39" pos:end="75:39">2</literal> <operator pos:start="75:41" pos:end="75:42">&amp;&amp;</operator> <operator pos:start="75:44" pos:end="75:44">!</operator><call pos:start="75:45" pos:end="75:57"><name pos:start="75:45" pos:end="75:51">fat_eof</name><argument_list pos:start="75:52" pos:end="75:57">(<argument pos:start="75:53" pos:end="75:53"><expr pos:start="75:53" pos:end="75:53"><name pos:start="75:53" pos:end="75:53">s</name></expr></argument>, <argument pos:start="75:56" pos:end="75:56"><expr pos:start="75:56" pos:end="75:56"><name pos:start="75:56" pos:end="75:56">c</name></expr></argument>)</argument_list></call><operator pos:start="75:58" pos:end="75:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="79:9" pos:end="81:60"><expr pos:start="79:9" pos:end="81:59"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="81:59"><name pos:start="79:15" pos:end="79:24">vvfat_read</name><argument_list pos:start="79:25" pos:end="81:59">(<argument pos:start="79:26" pos:end="79:30"><expr pos:start="79:26" pos:end="79:30"><name pos:start="79:26" pos:end="79:30"><name pos:start="79:26" pos:end="79:26">s</name><operator pos:start="79:27" pos:end="79:28">-&gt;</operator><name pos:start="79:29" pos:end="79:30">bs</name></name></expr></argument>, <argument pos:start="79:33" pos:end="79:52"><expr pos:start="79:33" pos:end="79:52"><call pos:start="79:33" pos:end="79:52"><name pos:start="79:33" pos:end="79:46">cluster2sector</name><argument_list pos:start="79:47" pos:end="79:52">(<argument pos:start="79:48" pos:end="79:48"><expr pos:start="79:48" pos:end="79:48"><name pos:start="79:48" pos:end="79:48">s</name></expr></argument>, <argument pos:start="79:51" pos:end="79:51"><expr pos:start="79:51" pos:end="79:51"><name pos:start="79:51" pos:end="79:51">c</name></expr></argument>)</argument_list></call></expr></argument>,

	    <argument pos:start="81:13" pos:end="81:29"><expr pos:start="81:13" pos:end="81:29"><operator pos:start="81:13" pos:end="81:13">(</operator><name pos:start="81:14" pos:end="81:20">uint8_t</name><operator pos:start="81:21" pos:end="81:21">*</operator><operator pos:start="81:22" pos:end="81:22">)</operator><name pos:start="81:23" pos:end="81:29">cluster</name></expr></argument>, <argument pos:start="81:32" pos:end="81:58"><expr pos:start="81:32" pos:end="81:58"><operator pos:start="81:32" pos:end="81:32">(</operator><name pos:start="81:33" pos:end="81:41">rest_size</name> <operator pos:start="81:43" pos:end="81:43">+</operator> <literal type="number" pos:start="81:45" pos:end="81:49">0x1ff</literal><operator pos:start="81:50" pos:end="81:50">)</operator> <operator pos:start="81:52" pos:end="81:52">/</operator> <literal type="number" pos:start="81:54" pos:end="81:58">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="85:9" pos:end="87:23"><if pos:start="85:9" pos:end="87:23">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">&lt;</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:23"><block_content pos:start="87:13" pos:end="87:23">

	    <return pos:start="87:13" pos:end="87:23">return <expr pos:start="87:20" pos:end="87:22"><name pos:start="87:20" pos:end="87:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



	<if_stmt pos:start="91:9" pos:end="93:22"><if pos:start="91:9" pos:end="93:22">if <condition pos:start="91:12" pos:end="91:46">(<expr pos:start="91:13" pos:end="91:45"><call pos:start="91:13" pos:end="91:41"><name pos:start="91:13" pos:end="91:17">write</name><argument_list pos:start="91:18" pos:end="91:41">(<argument pos:start="91:19" pos:end="91:20"><expr pos:start="91:19" pos:end="91:20"><name pos:start="91:19" pos:end="91:20">fd</name></expr></argument>, <argument pos:start="91:23" pos:end="91:29"><expr pos:start="91:23" pos:end="91:29"><name pos:start="91:23" pos:end="91:29">cluster</name></expr></argument>, <argument pos:start="91:32" pos:end="91:40"><expr pos:start="91:32" pos:end="91:40"><name pos:start="91:32" pos:end="91:40">rest_size</name></expr></argument>)</argument_list></call> <operator pos:start="91:43" pos:end="91:43">&lt;</operator> <literal type="number" pos:start="91:45" pos:end="91:45">0</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:22"><block_content pos:start="93:13" pos:end="93:22">

	    <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">2</literal></expr>;</return></block_content></block></if></if_stmt>



	<expr_stmt pos:start="97:9" pos:end="97:28"><expr pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:14">offset</name> <operator pos:start="97:16" pos:end="97:17">+=</operator> <name pos:start="97:19" pos:end="97:27">rest_size</name></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:15"><expr pos:start="99:9" pos:end="99:14"><name pos:start="99:9" pos:end="99:9">c</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <name pos:start="99:13" pos:end="99:14">c1</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:28">(<expr pos:start="105:9" pos:end="105:27"><call pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:17">ftruncate</name><argument_list pos:start="105:18" pos:end="105:27">(<argument pos:start="105:19" pos:end="105:20"><expr pos:start="105:19" pos:end="105:20"><name pos:start="105:19" pos:end="105:20">fd</name></expr></argument>, <argument pos:start="105:23" pos:end="105:26"><expr pos:start="105:23" pos:end="105:26"><name pos:start="105:23" pos:end="105:26">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:30" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:18">

        <expr_stmt pos:start="107:9" pos:end="107:30"><expr pos:start="107:9" pos:end="107:29"><call pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:14">perror</name><argument_list pos:start="107:15" pos:end="107:29">(<argument pos:start="107:16" pos:end="107:28"><expr pos:start="107:16" pos:end="107:28"><literal type="string" pos:start="107:16" pos:end="107:28">"ftruncate()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:18"><expr pos:start="109:9" pos:end="109:17"><call pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:13">close</name><argument_list pos:start="109:14" pos:end="109:17">(<argument pos:start="109:15" pos:end="109:16"><expr pos:start="109:15" pos:end="109:16"><name pos:start="109:15" pos:end="109:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:18">return <expr pos:start="111:16" pos:end="111:17"><operator pos:start="111:16" pos:end="111:16">-</operator><literal type="number" pos:start="111:17" pos:end="111:17">4</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:14"><expr pos:start="115:5" pos:end="115:13"><call pos:start="115:5" pos:end="115:13"><name pos:start="115:5" pos:end="115:9">close</name><argument_list pos:start="115:10" pos:end="115:13">(<argument pos:start="115:11" pos:end="115:12"><expr pos:start="115:11" pos:end="115:12"><name pos:start="115:11" pos:end="115:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="119:5" pos:end="119:56">return <expr pos:start="119:12" pos:end="119:55"><call pos:start="119:12" pos:end="119:55"><name pos:start="119:12" pos:end="119:26">commit_mappings</name><argument_list pos:start="119:27" pos:end="119:55">(<argument pos:start="119:28" pos:end="119:28"><expr pos:start="119:28" pos:end="119:28"><name pos:start="119:28" pos:end="119:28">s</name></expr></argument>, <argument pos:start="119:31" pos:end="119:43"><expr pos:start="119:31" pos:end="119:43"><name pos:start="119:31" pos:end="119:43">first_cluster</name></expr></argument>, <argument pos:start="119:46" pos:end="119:54"><expr pos:start="119:46" pos:end="119:54"><name pos:start="119:46" pos:end="119:54">dir_index</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
