<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11741.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">load_xbzrle</name><parameter_list pos:start="1:23" pos:end="1:64">(<parameter pos:start="1:24" pos:end="1:34"><decl pos:start="1:24" pos:end="1:34"><type pos:start="1:24" pos:end="1:34"><name pos:start="1:24" pos:end="1:31">QEMUFile</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">f</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:51"><decl pos:start="1:37" pos:end="1:51"><type pos:start="1:37" pos:end="1:51"><name pos:start="1:37" pos:end="1:46">ram_addr_t</name></type> <name pos:start="1:48" pos:end="1:51">addr</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">host</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:14">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:15">rc</name> <init pos:start="5:17" pos:end="5:19">= <expr pos:start="5:19" pos:end="5:19"><literal type="number" pos:start="5:19" pos:end="5:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:23">xh_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">xh_flags</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:28">(<expr pos:start="13:9" pos:end="13:27"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:27"><name pos:start="13:10" pos:end="13:15">XBZRLE</name><operator pos:start="13:16" pos:end="13:16">.</operator><name pos:start="13:17" pos:end="13:27">decoded_buf</name></name></expr>)</condition> <block pos:start="13:30" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:56">

        <expr_stmt pos:start="15:9" pos:end="15:56"><expr pos:start="15:9" pos:end="15:55"><name pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:14">XBZRLE</name><operator pos:start="15:15" pos:end="15:15">.</operator><name pos:start="15:16" pos:end="15:26">decoded_buf</name></name> <operator pos:start="15:28" pos:end="15:28">=</operator> <call pos:start="15:30" pos:end="15:55"><name pos:start="15:30" pos:end="15:37">g_malloc</name><argument_list pos:start="15:38" pos:end="15:55">(<argument pos:start="15:39" pos:end="15:54"><expr pos:start="15:39" pos:end="15:54"><name pos:start="15:39" pos:end="15:54">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:28">/* extract RLE header */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:32"><expr pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:12">xh_flags</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:31"><name pos:start="23:16" pos:end="23:28">qemu_get_byte</name><argument_list pos:start="23:29" pos:end="23:31">(<argument pos:start="23:30" pos:end="23:30"><expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:10">xh_len</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:29"><name pos:start="25:14" pos:end="25:26">qemu_get_be16</name><argument_list pos:start="25:27" pos:end="25:29">(<argument pos:start="25:28" pos:end="25:28"><expr pos:start="25:28" pos:end="25:28"><name pos:start="25:28" pos:end="25:28">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:41">(<expr pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:16">xh_flags</name> <operator pos:start="29:18" pos:end="29:19">!=</operator> <name pos:start="29:21" pos:end="29:40">ENCODING_FLAG_XBZRLE</name></expr>)</condition> <block pos:start="29:43" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:77"><expr pos:start="31:9" pos:end="31:76"><call pos:start="31:9" pos:end="31:76"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:76">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:75"><expr pos:start="31:25" pos:end="31:75"><literal type="string" pos:start="31:25" pos:end="31:75">"Failed to load XBZRLE page - wrong compression!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:34">(<expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:14">xh_len</name> <operator pos:start="39:16" pos:end="39:16">&gt;</operator> <name pos:start="39:18" pos:end="39:33">TARGET_PAGE_SIZE</name></expr>)</condition> <block pos:start="39:36" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:72"><expr pos:start="41:9" pos:end="41:71"><call pos:start="41:9" pos:end="41:71"><name pos:start="41:9" pos:end="41:15">fprintf</name><argument_list pos:start="41:16" pos:end="41:71">(<argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">stderr</name></expr></argument>, <argument pos:start="41:25" pos:end="41:70"><expr pos:start="41:25" pos:end="41:70"><literal type="string" pos:start="41:25" pos:end="41:70">"Failed to load XBZRLE page - len overflow!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="47:5" pos:end="47:30">/* load data and decode */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:51"><expr pos:start="49:5" pos:end="49:50"><call pos:start="49:5" pos:end="49:50"><name pos:start="49:5" pos:end="49:19">qemu_get_buffer</name><argument_list pos:start="49:20" pos:end="49:50">(<argument pos:start="49:21" pos:end="49:21"><expr pos:start="49:21" pos:end="49:21"><name pos:start="49:21" pos:end="49:21">f</name></expr></argument>, <argument pos:start="49:24" pos:end="49:41"><expr pos:start="49:24" pos:end="49:41"><name pos:start="49:24" pos:end="49:41"><name pos:start="49:24" pos:end="49:29">XBZRLE</name><operator pos:start="49:30" pos:end="49:30">.</operator><name pos:start="49:31" pos:end="49:41">decoded_buf</name></name></expr></argument>, <argument pos:start="49:44" pos:end="49:49"><expr pos:start="49:44" pos:end="49:49"><name pos:start="49:44" pos:end="49:49">xh_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:20">/* decode RLE */</comment>

    <expr_stmt pos:start="55:5" pos:end="57:49"><expr pos:start="55:5" pos:end="57:48"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="57:48"><name pos:start="55:11" pos:end="55:30">xbzrle_decode_buffer</name><argument_list pos:start="55:31" pos:end="57:48">(<argument pos:start="55:32" pos:end="55:49"><expr pos:start="55:32" pos:end="55:49"><name pos:start="55:32" pos:end="55:49"><name pos:start="55:32" pos:end="55:37">XBZRLE</name><operator pos:start="55:38" pos:end="55:38">.</operator><name pos:start="55:39" pos:end="55:49">decoded_buf</name></name></expr></argument>, <argument pos:start="55:52" pos:end="55:57"><expr pos:start="55:52" pos:end="55:57"><name pos:start="55:52" pos:end="55:57">xh_len</name></expr></argument>, <argument pos:start="55:60" pos:end="55:63"><expr pos:start="55:60" pos:end="55:63"><name pos:start="55:60" pos:end="55:63">host</name></expr></argument>,

                               <argument pos:start="57:32" pos:end="57:47"><expr pos:start="57:32" pos:end="57:47"><name pos:start="57:32" pos:end="57:47">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="73:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:18">(<expr pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:14">==</operator> <operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>)</condition> <block pos:start="59:20" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:16">

        <expr_stmt pos:start="61:9" pos:end="61:72"><expr pos:start="61:9" pos:end="61:71"><call pos:start="61:9" pos:end="61:71"><name pos:start="61:9" pos:end="61:15">fprintf</name><argument_list pos:start="61:16" pos:end="61:71">(<argument pos:start="61:17" pos:end="61:22"><expr pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:22">stderr</name></expr></argument>, <argument pos:start="61:25" pos:end="61:70"><expr pos:start="61:25" pos:end="61:70"><literal type="string" pos:start="61:25" pos:end="61:70">"Failed to load XBZRLE page - decode error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:16"><expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:10">rc</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <operator pos:start="63:14" pos:end="63:14">-</operator><literal type="number" pos:start="63:15" pos:end="63:15">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="65:7" pos:end="73:5">else  if <condition pos:start="65:16" pos:end="65:39">(<expr pos:start="65:17" pos:end="65:38"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:21">&gt;</operator> <name pos:start="65:23" pos:end="65:38">TARGET_PAGE_SIZE</name></expr>)</condition> <block pos:start="65:41" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:16">

        <expr_stmt pos:start="67:9" pos:end="69:39"><expr pos:start="67:9" pos:end="69:38"><call pos:start="67:9" pos:end="69:38"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="69:38">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="67:76"><expr pos:start="67:25" pos:end="67:76"><literal type="string" pos:start="67:25" pos:end="67:76">"Failed to load XBZRLE page - size %d exceeds %d!\n"</literal></expr></argument>,

                <argument pos:start="69:17" pos:end="69:19"><expr pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:19">ret</name></expr></argument>, <argument pos:start="69:22" pos:end="69:37"><expr pos:start="69:22" pos:end="69:37"><name pos:start="69:22" pos:end="69:37">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:16"><expr pos:start="71:9" pos:end="71:15"><call pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:13">abort</name><argument_list pos:start="71:14" pos:end="71:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="77:5" pos:end="77:14">return <expr pos:start="77:12" pos:end="77:13"><name pos:start="77:12" pos:end="77:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
