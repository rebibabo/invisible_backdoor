<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26209.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">kvm_set_phys_mem</name><parameter_list pos:start="1:29" pos:end="3:68">(<parameter pos:start="1:30" pos:end="1:58"><decl pos:start="1:30" pos:end="1:58"><type pos:start="1:30" pos:end="1:58"><name pos:start="1:30" pos:end="1:47">target_phys_addr_t</name></type> <name pos:start="1:49" pos:end="1:58">start_addr</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:75"><decl pos:start="1:61" pos:end="1:75"><type pos:start="1:61" pos:end="1:75"><name pos:start="1:61" pos:end="1:70">ram_addr_t</name></type> <name pos:start="1:72" pos:end="1:75">size</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:51"><decl pos:start="3:30" pos:end="3:51"><type pos:start="3:30" pos:end="3:51"><name pos:start="3:30" pos:end="3:39">ram_addr_t</name></type> <name pos:start="3:41" pos:end="3:51">phys_offset</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:67"><decl pos:start="3:54" pos:end="3:67"><type pos:start="3:54" pos:end="3:67"><name pos:start="3:54" pos:end="3:57">bool</name></type> <name pos:start="3:59" pos:end="3:67">log_dirty</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="279:1">{<block_content pos:start="7:5" pos:end="277:5">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">KVMState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:27">= <expr pos:start="7:19" pos:end="7:27"><name pos:start="7:19" pos:end="7:27">kvm_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:54"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:20">flags</name> <init pos:start="9:22" pos:end="9:54">= <expr pos:start="9:24" pos:end="9:54"><name pos:start="9:24" pos:end="9:34">phys_offset</name> <operator pos:start="9:36" pos:end="9:36">&amp;</operator> <operator pos:start="9:38" pos:end="9:38">~</operator><name pos:start="9:39" pos:end="9:54">TARGET_PAGE_MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">KVMSlot</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">mem</name></decl>, <decl pos:start="11:19" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:13"/><name pos:start="11:19" pos:end="11:21">old</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">ram</name> <init pos:start="15:15" pos:end="15:20">= <expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="21:57">/* kvm works in page size chunks, but the function may be called

       with sub-page size and unaligned start address. */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:35"><expr pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:8">size</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:34"><name pos:start="23:12" pos:end="23:28">TARGET_PAGE_ALIGN</name><argument_list pos:start="23:29" pos:end="23:34">(<argument pos:start="23:30" pos:end="23:33"><expr pos:start="23:30" pos:end="23:33"><name pos:start="23:30" pos:end="23:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:47"><expr pos:start="25:5" pos:end="25:46"><name pos:start="25:5" pos:end="25:14">start_addr</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="25:46"><name pos:start="25:18" pos:end="25:34">TARGET_PAGE_ALIGN</name><argument_list pos:start="25:35" pos:end="25:46">(<argument pos:start="25:36" pos:end="25:45"><expr pos:start="25:36" pos:end="25:45"><name pos:start="25:36" pos:end="25:45">start_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:46">/* KVM does not support read-only slots */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:15">phys_offset</name> <operator pos:start="31:17" pos:end="31:18">&amp;=</operator> <operator pos:start="31:20" pos:end="31:20">~</operator><name pos:start="31:21" pos:end="31:30">IO_MEM_ROM</name></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:56">(<expr pos:start="35:9" pos:end="35:55"><operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:20">phys_offset</name> <operator pos:start="35:22" pos:end="35:22">&amp;</operator> <operator pos:start="35:24" pos:end="35:24">~</operator><name pos:start="35:25" pos:end="35:40">TARGET_PAGE_MASK</name><operator pos:start="35:41" pos:end="35:41">)</operator> <operator pos:start="35:43" pos:end="35:44">==</operator> <name pos:start="35:46" pos:end="35:55">IO_MEM_RAM</name></expr>)</condition> <block pos:start="35:58" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:45">

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:11">ram</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:44"><name pos:start="37:15" pos:end="37:31">qemu_safe_ram_ptr</name><argument_list pos:start="37:32" pos:end="37:44">(<argument pos:start="37:33" pos:end="37:43"><expr pos:start="37:33" pos:end="37:43"><name pos:start="37:33" pos:end="37:43">phys_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="43:5" pos:end="235:5">while <condition pos:start="43:11" pos:end="43:13">(<expr pos:start="43:12" pos:end="43:12"><literal type="number" pos:start="43:12" pos:end="43:12">1</literal></expr>)</condition> <block pos:start="43:15" pos:end="235:5">{<block_content pos:start="45:9" pos:end="233:9">

        <expr_stmt pos:start="45:9" pos:end="45:76"><expr pos:start="45:9" pos:end="45:75"><name pos:start="45:9" pos:end="45:11">mem</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:75"><name pos:start="45:15" pos:end="45:41">kvm_lookup_overlapping_slot</name><argument_list pos:start="45:42" pos:end="45:75">(<argument pos:start="45:43" pos:end="45:43"><expr pos:start="45:43" pos:end="45:43"><name pos:start="45:43" pos:end="45:43">s</name></expr></argument>, <argument pos:start="45:46" pos:end="45:55"><expr pos:start="45:46" pos:end="45:55"><name pos:start="45:46" pos:end="45:55">start_addr</name></expr></argument>, <argument pos:start="45:58" pos:end="45:74"><expr pos:start="45:58" pos:end="45:74"><name pos:start="45:58" pos:end="45:67">start_addr</name> <operator pos:start="45:69" pos:end="45:69">+</operator> <name pos:start="45:71" pos:end="45:74">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:17">(<expr pos:start="47:13" pos:end="47:16"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:16">mem</name></expr>)</condition> <block pos:start="47:19" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:18">

            <break pos:start="49:13" pos:end="49:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="55:9" pos:end="69:9"><if pos:start="55:9" pos:end="69:9">if <condition pos:start="55:12" pos:end="59:61">(<expr pos:start="55:13" pos:end="59:60"><name pos:start="55:13" pos:end="55:17">flags</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <name pos:start="55:21" pos:end="55:37">IO_MEM_UNASSIGNED</name> <operator pos:start="55:39" pos:end="55:40">&amp;&amp;</operator> <name pos:start="55:42" pos:end="55:51">start_addr</name> <operator pos:start="55:53" pos:end="55:54">&gt;=</operator> <name pos:start="55:56" pos:end="55:70"><name pos:start="55:56" pos:end="55:58">mem</name><operator pos:start="55:59" pos:end="55:60">-&gt;</operator><name pos:start="55:61" pos:end="55:70">start_addr</name></name> <operator pos:start="55:72" pos:end="55:73">&amp;&amp;</operator>

            <operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:23">start_addr</name> <operator pos:start="57:25" pos:end="57:25">+</operator> <name pos:start="57:27" pos:end="57:30">size</name> <operator pos:start="57:32" pos:end="57:33">&lt;=</operator> <name pos:start="57:35" pos:end="57:49"><name pos:start="57:35" pos:end="57:37">mem</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:49">start_addr</name></name> <operator pos:start="57:51" pos:end="57:51">+</operator> <name pos:start="57:53" pos:end="57:68"><name pos:start="57:53" pos:end="57:55">mem</name><operator pos:start="57:56" pos:end="57:57">-&gt;</operator><name pos:start="57:58" pos:end="57:68">memory_size</name></name><operator pos:start="57:69" pos:end="57:69">)</operator> <operator pos:start="57:71" pos:end="57:72">&amp;&amp;</operator>

            <operator pos:start="59:13" pos:end="59:13">(</operator><name pos:start="59:14" pos:end="59:16">ram</name> <operator pos:start="59:18" pos:end="59:18">-</operator> <name pos:start="59:20" pos:end="59:29">start_addr</name> <operator pos:start="59:31" pos:end="59:32">==</operator> <name pos:start="59:34" pos:end="59:41"><name pos:start="59:34" pos:end="59:36">mem</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:41">ram</name></name> <operator pos:start="59:43" pos:end="59:43">-</operator> <name pos:start="59:45" pos:end="59:59"><name pos:start="59:45" pos:end="59:47">mem</name><operator pos:start="59:48" pos:end="59:49">-&gt;</operator><name pos:start="59:50" pos:end="59:59">start_addr</name></name><operator pos:start="59:60" pos:end="59:60">)</operator></expr>)</condition> <block pos:start="59:63" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:19">

            <comment type="block" pos:start="61:13" pos:end="63:63">/* The new slot fits into the existing one and comes with

             * identical parameters - update flags and done. */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:60"><expr pos:start="65:13" pos:end="65:59"><call pos:start="65:13" pos:end="65:59"><name pos:start="65:13" pos:end="65:43">kvm_slot_dirty_pages_log_change</name><argument_list pos:start="65:44" pos:end="65:59">(<argument pos:start="65:45" pos:end="65:47"><expr pos:start="65:45" pos:end="65:47"><name pos:start="65:45" pos:end="65:47">mem</name></expr></argument>, <argument pos:start="65:50" pos:end="65:58"><expr pos:start="65:50" pos:end="65:58"><name pos:start="65:50" pos:end="65:58">log_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:19"><expr pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:11">old</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <operator pos:start="73:15" pos:end="73:15">*</operator><name pos:start="73:16" pos:end="73:18">mem</name></expr>;</expr_stmt>



        <comment type="block" pos:start="77:9" pos:end="77:45">/* unregister the overlapping slot */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:29"><expr pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:24"><name pos:start="79:9" pos:end="79:11">mem</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:24">memory_size</name></name> <operator pos:start="79:26" pos:end="79:26">=</operator> <literal type="number" pos:start="79:28" pos:end="79:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:49"><expr pos:start="81:9" pos:end="81:48"><name pos:start="81:9" pos:end="81:11">err</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:48"><name pos:start="81:15" pos:end="81:40">kvm_set_user_memory_region</name><argument_list pos:start="81:41" pos:end="81:48">(<argument pos:start="81:42" pos:end="81:42"><expr pos:start="81:42" pos:end="81:42"><name pos:start="81:42" pos:end="81:42">s</name></expr></argument>, <argument pos:start="81:45" pos:end="81:47"><expr pos:start="81:45" pos:end="81:47"><name pos:start="81:45" pos:end="81:47">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="91:9"><if pos:start="83:9" pos:end="91:9">if <condition pos:start="83:12" pos:end="83:16">(<expr pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">err</name></expr>)</condition> <block pos:start="83:18" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:20">

            <expr_stmt pos:start="85:13" pos:end="87:46"><expr pos:start="85:13" pos:end="87:45"><call pos:start="85:13" pos:end="87:45"><name pos:start="85:13" pos:end="85:19">fprintf</name><argument_list pos:start="85:20" pos:end="87:45">(<argument pos:start="85:21" pos:end="85:26"><expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">stderr</name></expr></argument>, <argument pos:start="85:29" pos:end="85:76"><expr pos:start="85:29" pos:end="85:76"><literal type="string" pos:start="85:29" pos:end="85:76">"%s: error unregistering overlapping slot: %s\n"</literal></expr></argument>,

                    <argument pos:start="87:21" pos:end="87:28"><expr pos:start="87:21" pos:end="87:28"><name pos:start="87:21" pos:end="87:28">__func__</name></expr></argument>, <argument pos:start="87:31" pos:end="87:44"><expr pos:start="87:31" pos:end="87:44"><call pos:start="87:31" pos:end="87:44"><name pos:start="87:31" pos:end="87:38">strerror</name><argument_list pos:start="87:39" pos:end="87:44">(<argument pos:start="87:40" pos:end="87:43"><expr pos:start="87:40" pos:end="87:43"><operator pos:start="87:40" pos:end="87:40">-</operator><name pos:start="87:41" pos:end="87:43">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:20"><expr pos:start="89:13" pos:end="89:19"><call pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:17">abort</name><argument_list pos:start="89:18" pos:end="89:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="95:9" pos:end="109:58">/* Workaround for older KVM versions: we can't join slots, even not by

         * unregistering the previous ones and then registering the larger

         * slot. We have to maintain the existing fragmentation. Sigh.

         *

         * This workaround assumes that the new slot starts at the same

         * address as the first existing one. If not or if some overlapping

         * slot comes around later, we will fail (not seen in practice so far)

         * - and actually require a recent KVM version. */</comment>

        <if_stmt pos:start="111:9" pos:end="153:9"><if pos:start="111:9" pos:end="153:9">if <condition pos:start="111:12" pos:end="115:38">(<expr pos:start="111:13" pos:end="115:37"><name pos:start="111:13" pos:end="111:36"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:36">broken_set_mem_region</name></name> <operator pos:start="111:38" pos:end="111:39">&amp;&amp;</operator>

            <name pos:start="113:13" pos:end="113:26"><name pos:start="113:13" pos:end="113:15">old</name><operator pos:start="113:16" pos:end="113:16">.</operator><name pos:start="113:17" pos:end="113:26">start_addr</name></name> <operator pos:start="113:28" pos:end="113:29">==</operator> <name pos:start="113:31" pos:end="113:40">start_addr</name> <operator pos:start="113:42" pos:end="113:43">&amp;&amp;</operator> <name pos:start="113:45" pos:end="113:59"><name pos:start="113:45" pos:end="113:47">old</name><operator pos:start="113:48" pos:end="113:48">.</operator><name pos:start="113:49" pos:end="113:59">memory_size</name></name> <operator pos:start="113:61" pos:end="113:61">&lt;</operator> <name pos:start="113:63" pos:end="113:66">size</name> <operator pos:start="113:68" pos:end="113:69">&amp;&amp;</operator>

            <name pos:start="115:13" pos:end="115:17">flags</name> <operator pos:start="115:19" pos:end="115:19">&lt;</operator> <name pos:start="115:21" pos:end="115:37">IO_MEM_UNASSIGNED</name></expr>)</condition> <block pos:start="115:40" pos:end="153:9">{<block_content pos:start="117:13" pos:end="151:21">

            <expr_stmt pos:start="117:13" pos:end="117:36"><expr pos:start="117:13" pos:end="117:35"><name pos:start="117:13" pos:end="117:15">mem</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <call pos:start="117:19" pos:end="117:35"><name pos:start="117:19" pos:end="117:32">kvm_alloc_slot</name><argument_list pos:start="117:33" pos:end="117:35">(<argument pos:start="117:34" pos:end="117:34"><expr pos:start="117:34" pos:end="117:34"><name pos:start="117:34" pos:end="117:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:47"><expr pos:start="119:13" pos:end="119:46"><name pos:start="119:13" pos:end="119:28"><name pos:start="119:13" pos:end="119:15">mem</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:28">memory_size</name></name> <operator pos:start="119:30" pos:end="119:30">=</operator> <name pos:start="119:32" pos:end="119:46"><name pos:start="119:32" pos:end="119:34">old</name><operator pos:start="119:35" pos:end="119:35">.</operator><name pos:start="119:36" pos:end="119:46">memory_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:45"><expr pos:start="121:13" pos:end="121:44"><name pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:15">mem</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:27">start_addr</name></name> <operator pos:start="121:29" pos:end="121:29">=</operator> <name pos:start="121:31" pos:end="121:44"><name pos:start="121:31" pos:end="121:33">old</name><operator pos:start="121:34" pos:end="121:34">.</operator><name pos:start="121:35" pos:end="121:44">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:31"><expr pos:start="123:13" pos:end="123:30"><name pos:start="123:13" pos:end="123:20"><name pos:start="123:13" pos:end="123:15">mem</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:20">ram</name></name> <operator pos:start="123:22" pos:end="123:22">=</operator> <name pos:start="123:24" pos:end="123:30"><name pos:start="123:24" pos:end="123:26">old</name><operator pos:start="123:27" pos:end="123:27">.</operator><name pos:start="123:28" pos:end="123:30">ram</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:53"><expr pos:start="125:13" pos:end="125:52"><name pos:start="125:13" pos:end="125:22"><name pos:start="125:13" pos:end="125:15">mem</name><operator pos:start="125:16" pos:end="125:17">-&gt;</operator><name pos:start="125:18" pos:end="125:22">flags</name></name> <operator pos:start="125:24" pos:end="125:24">=</operator> <call pos:start="125:26" pos:end="125:52"><name pos:start="125:26" pos:end="125:38">kvm_mem_flags</name><argument_list pos:start="125:39" pos:end="125:52">(<argument pos:start="125:40" pos:end="125:40"><expr pos:start="125:40" pos:end="125:40"><name pos:start="125:40" pos:end="125:40">s</name></expr></argument>, <argument pos:start="125:43" pos:end="125:51"><expr pos:start="125:43" pos:end="125:51"><name pos:start="125:43" pos:end="125:51">log_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="129:13" pos:end="129:53"><expr pos:start="129:13" pos:end="129:52"><name pos:start="129:13" pos:end="129:15">err</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <call pos:start="129:19" pos:end="129:52"><name pos:start="129:19" pos:end="129:44">kvm_set_user_memory_region</name><argument_list pos:start="129:45" pos:end="129:52">(<argument pos:start="129:46" pos:end="129:46"><expr pos:start="129:46" pos:end="129:46"><name pos:start="129:46" pos:end="129:46">s</name></expr></argument>, <argument pos:start="129:49" pos:end="129:51"><expr pos:start="129:49" pos:end="129:51"><name pos:start="129:49" pos:end="129:51">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="131:13" pos:end="139:13"><if pos:start="131:13" pos:end="139:13">if <condition pos:start="131:16" pos:end="131:20">(<expr pos:start="131:17" pos:end="131:19"><name pos:start="131:17" pos:end="131:19">err</name></expr>)</condition> <block pos:start="131:22" pos:end="139:13">{<block_content pos:start="133:17" pos:end="137:24">

                <expr_stmt pos:start="133:17" pos:end="135:40"><expr pos:start="133:17" pos:end="135:39"><call pos:start="133:17" pos:end="135:39"><name pos:start="133:17" pos:end="133:23">fprintf</name><argument_list pos:start="133:24" pos:end="135:39">(<argument pos:start="133:25" pos:end="133:30"><expr pos:start="133:25" pos:end="133:30"><name pos:start="133:25" pos:end="133:30">stderr</name></expr></argument>, <argument pos:start="133:33" pos:end="133:63"><expr pos:start="133:33" pos:end="133:63"><literal type="string" pos:start="133:33" pos:end="133:63">"%s: error updating slot: %s\n"</literal></expr></argument>, <argument pos:start="133:66" pos:end="133:73"><expr pos:start="133:66" pos:end="133:73"><name pos:start="133:66" pos:end="133:73">__func__</name></expr></argument>,

                        <argument pos:start="135:25" pos:end="135:38"><expr pos:start="135:25" pos:end="135:38"><call pos:start="135:25" pos:end="135:38"><name pos:start="135:25" pos:end="135:32">strerror</name><argument_list pos:start="135:33" pos:end="135:38">(<argument pos:start="135:34" pos:end="135:37"><expr pos:start="135:34" pos:end="135:37"><operator pos:start="135:34" pos:end="135:34">-</operator><name pos:start="135:35" pos:end="135:37">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:24"><expr pos:start="137:17" pos:end="137:23"><call pos:start="137:17" pos:end="137:23"><name pos:start="137:17" pos:end="137:21">abort</name><argument_list pos:start="137:22" pos:end="137:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="143:13" pos:end="143:42"><expr pos:start="143:13" pos:end="143:41"><name pos:start="143:13" pos:end="143:22">start_addr</name> <operator pos:start="143:24" pos:end="143:25">+=</operator> <name pos:start="143:27" pos:end="143:41"><name pos:start="143:27" pos:end="143:29">old</name><operator pos:start="143:30" pos:end="143:30">.</operator><name pos:start="143:31" pos:end="143:41">memory_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:43"><expr pos:start="145:13" pos:end="145:42"><name pos:start="145:13" pos:end="145:23">phys_offset</name> <operator pos:start="145:25" pos:end="145:26">+=</operator> <name pos:start="145:28" pos:end="145:42"><name pos:start="145:28" pos:end="145:30">old</name><operator pos:start="145:31" pos:end="145:31">.</operator><name pos:start="145:32" pos:end="145:42">memory_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:35"><expr pos:start="147:13" pos:end="147:34"><name pos:start="147:13" pos:end="147:15">ram</name> <operator pos:start="147:17" pos:end="147:18">+=</operator> <name pos:start="147:20" pos:end="147:34"><name pos:start="147:20" pos:end="147:22">old</name><operator pos:start="147:23" pos:end="147:23">.</operator><name pos:start="147:24" pos:end="147:34">memory_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:36"><expr pos:start="149:13" pos:end="149:35"><name pos:start="149:13" pos:end="149:16">size</name> <operator pos:start="149:18" pos:end="149:19">-=</operator> <name pos:start="149:21" pos:end="149:35"><name pos:start="149:21" pos:end="149:23">old</name><operator pos:start="149:24" pos:end="149:24">.</operator><name pos:start="149:25" pos:end="149:35">memory_size</name></name></expr>;</expr_stmt>

            <continue pos:start="151:13" pos:end="151:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="157:9" pos:end="157:34">/* register prefix slot */</comment>

        <if_stmt pos:start="159:9" pos:end="195:9"><if pos:start="159:9" pos:end="195:9">if <condition pos:start="159:12" pos:end="159:40">(<expr pos:start="159:13" pos:end="159:39"><name pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:15">old</name><operator pos:start="159:16" pos:end="159:16">.</operator><name pos:start="159:17" pos:end="159:26">start_addr</name></name> <operator pos:start="159:28" pos:end="159:28">&lt;</operator> <name pos:start="159:30" pos:end="159:39">start_addr</name></expr>)</condition> <block pos:start="159:42" pos:end="195:9">{<block_content pos:start="161:13" pos:end="193:13">

            <expr_stmt pos:start="161:13" pos:end="161:36"><expr pos:start="161:13" pos:end="161:35"><name pos:start="161:13" pos:end="161:15">mem</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:35"><name pos:start="161:19" pos:end="161:32">kvm_alloc_slot</name><argument_list pos:start="161:33" pos:end="161:35">(<argument pos:start="161:34" pos:end="161:34"><expr pos:start="161:34" pos:end="161:34"><name pos:start="161:34" pos:end="161:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:59"><expr pos:start="163:13" pos:end="163:58"><name pos:start="163:13" pos:end="163:28"><name pos:start="163:13" pos:end="163:15">mem</name><operator pos:start="163:16" pos:end="163:17">-&gt;</operator><name pos:start="163:18" pos:end="163:28">memory_size</name></name> <operator pos:start="163:30" pos:end="163:30">=</operator> <name pos:start="163:32" pos:end="163:41">start_addr</name> <operator pos:start="163:43" pos:end="163:43">-</operator> <name pos:start="163:45" pos:end="163:58"><name pos:start="163:45" pos:end="163:47">old</name><operator pos:start="163:48" pos:end="163:48">.</operator><name pos:start="163:49" pos:end="163:58">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:45"><expr pos:start="165:13" pos:end="165:44"><name pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:15">mem</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:27">start_addr</name></name> <operator pos:start="165:29" pos:end="165:29">=</operator> <name pos:start="165:31" pos:end="165:44"><name pos:start="165:31" pos:end="165:33">old</name><operator pos:start="165:34" pos:end="165:34">.</operator><name pos:start="165:35" pos:end="165:44">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:31"><expr pos:start="167:13" pos:end="167:30"><name pos:start="167:13" pos:end="167:20"><name pos:start="167:13" pos:end="167:15">mem</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:20">ram</name></name> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:30"><name pos:start="167:24" pos:end="167:26">old</name><operator pos:start="167:27" pos:end="167:27">.</operator><name pos:start="167:28" pos:end="167:30">ram</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:54"><expr pos:start="169:13" pos:end="169:53"><name pos:start="169:13" pos:end="169:22"><name pos:start="169:13" pos:end="169:15">mem</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:22">flags</name></name> <operator pos:start="169:24" pos:end="169:24">=</operator>  <call pos:start="169:27" pos:end="169:53"><name pos:start="169:27" pos:end="169:39">kvm_mem_flags</name><argument_list pos:start="169:40" pos:end="169:53">(<argument pos:start="169:41" pos:end="169:41"><expr pos:start="169:41" pos:end="169:41"><name pos:start="169:41" pos:end="169:41">s</name></expr></argument>, <argument pos:start="169:44" pos:end="169:52"><expr pos:start="169:44" pos:end="169:52"><name pos:start="169:44" pos:end="169:52">log_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="173:13" pos:end="173:53"><expr pos:start="173:13" pos:end="173:52"><name pos:start="173:13" pos:end="173:15">err</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="173:52"><name pos:start="173:19" pos:end="173:44">kvm_set_user_memory_region</name><argument_list pos:start="173:45" pos:end="173:52">(<argument pos:start="173:46" pos:end="173:46"><expr pos:start="173:46" pos:end="173:46"><name pos:start="173:46" pos:end="173:46">s</name></expr></argument>, <argument pos:start="173:49" pos:end="173:51"><expr pos:start="173:49" pos:end="173:51"><name pos:start="173:49" pos:end="173:51">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="175:13" pos:end="193:13"><if pos:start="175:13" pos:end="193:13">if <condition pos:start="175:16" pos:end="175:20">(<expr pos:start="175:17" pos:end="175:19"><name pos:start="175:17" pos:end="175:19">err</name></expr>)</condition> <block pos:start="175:22" pos:end="193:13">{<block_content pos:start="177:17" pos:end="191:24">

                <expr_stmt pos:start="177:17" pos:end="182:0"><expr pos:start="177:17" pos:end="179:49"><call pos:start="177:17" pos:end="179:49"><name pos:start="177:17" pos:end="177:23">fprintf</name><argument_list pos:start="177:24" pos:end="179:49">(<argument pos:start="177:25" pos:end="177:30"><expr pos:start="177:25" pos:end="177:30"><name pos:start="177:25" pos:end="177:30">stderr</name></expr></argument>, <argument pos:start="177:33" pos:end="177:73"><expr pos:start="177:33" pos:end="177:73"><literal type="string" pos:start="177:33" pos:end="177:73">"%s: error registering prefix slot: %s\n"</literal></expr></argument>,

                        <argument pos:start="179:25" pos:end="179:32"><expr pos:start="179:25" pos:end="179:32"><name pos:start="179:25" pos:end="179:32">__func__</name></expr></argument>, <argument pos:start="179:35" pos:end="179:48"><expr pos:start="179:35" pos:end="179:48"><call pos:start="179:35" pos:end="179:48"><name pos:start="179:35" pos:end="179:42">strerror</name><argument_list pos:start="179:43" pos:end="179:48">(<argument pos:start="179:44" pos:end="179:47"><expr pos:start="179:44" pos:end="179:47"><operator pos:start="179:44" pos:end="179:44">-</operator><name pos:start="179:45" pos:end="179:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="181:1" pos:end="181:17">#<cpp:directive pos:start="181:2" pos:end="181:6">ifdef</cpp:directive> <name pos:start="181:8" pos:end="181:17">TARGET_PPC</name></cpp:ifdef>

                <expr_stmt pos:start="183:17" pos:end="190:0"><expr pos:start="183:17" pos:end="187:57"><call pos:start="183:17" pos:end="187:57"><name pos:start="183:17" pos:end="183:23">fprintf</name><argument_list pos:start="183:24" pos:end="187:57">(<argument pos:start="183:25" pos:end="183:30"><expr pos:start="183:25" pos:end="183:30"><name pos:start="183:25" pos:end="183:30">stderr</name></expr></argument>, <argument pos:start="183:33" pos:end="187:46"><expr pos:start="183:33" pos:end="187:46"><literal type="string" pos:start="183:33" pos:end="183:77">"%s: This is probably because your kernel's "</literal> \

                                <literal type="string" pos:start="185:33" pos:end="185:77">"PAGE_SIZE is too big. Please try to use 4k "</literal> \

                                <literal type="string" pos:start="187:33" pos:end="187:46">"PAGE_SIZE!\n"</literal></expr></argument>, <argument pos:start="187:49" pos:end="187:56"><expr pos:start="187:49" pos:end="187:56"><name pos:start="187:49" pos:end="187:56">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="191:17" pos:end="191:24"><expr pos:start="191:17" pos:end="191:23"><call pos:start="191:17" pos:end="191:23"><name pos:start="191:17" pos:end="191:21">abort</name><argument_list pos:start="191:22" pos:end="191:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="199:9" pos:end="199:34">/* register suffix slot */</comment>

        <if_stmt pos:start="201:9" pos:end="233:9"><if pos:start="201:9" pos:end="233:9">if <condition pos:start="201:12" pos:end="201:65">(<expr pos:start="201:13" pos:end="201:64"><name pos:start="201:13" pos:end="201:26"><name pos:start="201:13" pos:end="201:15">old</name><operator pos:start="201:16" pos:end="201:16">.</operator><name pos:start="201:17" pos:end="201:26">start_addr</name></name> <operator pos:start="201:28" pos:end="201:28">+</operator> <name pos:start="201:30" pos:end="201:44"><name pos:start="201:30" pos:end="201:32">old</name><operator pos:start="201:33" pos:end="201:33">.</operator><name pos:start="201:34" pos:end="201:44">memory_size</name></name> <operator pos:start="201:46" pos:end="201:46">&gt;</operator> <name pos:start="201:48" pos:end="201:57">start_addr</name> <operator pos:start="201:59" pos:end="201:59">+</operator> <name pos:start="201:61" pos:end="201:64">size</name></expr>)</condition> <block pos:start="201:67" pos:end="233:9">{<block_content pos:start="203:13" pos:end="231:13">

            <decl_stmt pos:start="203:13" pos:end="203:34"><decl pos:start="203:13" pos:end="203:33"><type pos:start="203:13" pos:end="203:22"><name pos:start="203:13" pos:end="203:22">ram_addr_t</name></type> <name pos:start="203:24" pos:end="203:33">size_delta</name></decl>;</decl_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:36"><expr pos:start="207:13" pos:end="207:35"><name pos:start="207:13" pos:end="207:15">mem</name> <operator pos:start="207:17" pos:end="207:17">=</operator> <call pos:start="207:19" pos:end="207:35"><name pos:start="207:19" pos:end="207:32">kvm_alloc_slot</name><argument_list pos:start="207:33" pos:end="207:35">(<argument pos:start="207:34" pos:end="207:34"><expr pos:start="207:34" pos:end="207:34"><name pos:start="207:34" pos:end="207:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:48"><expr pos:start="209:13" pos:end="209:47"><name pos:start="209:13" pos:end="209:27"><name pos:start="209:13" pos:end="209:15">mem</name><operator pos:start="209:16" pos:end="209:17">-&gt;</operator><name pos:start="209:18" pos:end="209:27">start_addr</name></name> <operator pos:start="209:29" pos:end="209:29">=</operator> <name pos:start="209:31" pos:end="209:40">start_addr</name> <operator pos:start="209:42" pos:end="209:42">+</operator> <name pos:start="209:44" pos:end="209:47">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:58"><expr pos:start="211:13" pos:end="211:57"><name pos:start="211:13" pos:end="211:22">size_delta</name> <operator pos:start="211:24" pos:end="211:24">=</operator> <name pos:start="211:26" pos:end="211:40"><name pos:start="211:26" pos:end="211:28">mem</name><operator pos:start="211:29" pos:end="211:30">-&gt;</operator><name pos:start="211:31" pos:end="211:40">start_addr</name></name> <operator pos:start="211:42" pos:end="211:42">-</operator> <name pos:start="211:44" pos:end="211:57"><name pos:start="211:44" pos:end="211:46">old</name><operator pos:start="211:47" pos:end="211:47">.</operator><name pos:start="211:48" pos:end="211:57">start_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:60"><expr pos:start="213:13" pos:end="213:59"><name pos:start="213:13" pos:end="213:28"><name pos:start="213:13" pos:end="213:15">mem</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:28">memory_size</name></name> <operator pos:start="213:30" pos:end="213:30">=</operator> <name pos:start="213:32" pos:end="213:46"><name pos:start="213:32" pos:end="213:34">old</name><operator pos:start="213:35" pos:end="213:35">.</operator><name pos:start="213:36" pos:end="213:46">memory_size</name></name> <operator pos:start="213:48" pos:end="213:48">-</operator> <name pos:start="213:50" pos:end="213:59">size_delta</name></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:44"><expr pos:start="215:13" pos:end="215:43"><name pos:start="215:13" pos:end="215:20"><name pos:start="215:13" pos:end="215:15">mem</name><operator pos:start="215:16" pos:end="215:17">-&gt;</operator><name pos:start="215:18" pos:end="215:20">ram</name></name> <operator pos:start="215:22" pos:end="215:22">=</operator> <name pos:start="215:24" pos:end="215:30"><name pos:start="215:24" pos:end="215:26">old</name><operator pos:start="215:27" pos:end="215:27">.</operator><name pos:start="215:28" pos:end="215:30">ram</name></name> <operator pos:start="215:32" pos:end="215:32">+</operator> <name pos:start="215:34" pos:end="215:43">size_delta</name></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:53"><expr pos:start="217:13" pos:end="217:52"><name pos:start="217:13" pos:end="217:22"><name pos:start="217:13" pos:end="217:15">mem</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:22">flags</name></name> <operator pos:start="217:24" pos:end="217:24">=</operator> <call pos:start="217:26" pos:end="217:52"><name pos:start="217:26" pos:end="217:38">kvm_mem_flags</name><argument_list pos:start="217:39" pos:end="217:52">(<argument pos:start="217:40" pos:end="217:40"><expr pos:start="217:40" pos:end="217:40"><name pos:start="217:40" pos:end="217:40">s</name></expr></argument>, <argument pos:start="217:43" pos:end="217:51"><expr pos:start="217:43" pos:end="217:51"><name pos:start="217:43" pos:end="217:51">log_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="221:13" pos:end="221:53"><expr pos:start="221:13" pos:end="221:52"><name pos:start="221:13" pos:end="221:15">err</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <call pos:start="221:19" pos:end="221:52"><name pos:start="221:19" pos:end="221:44">kvm_set_user_memory_region</name><argument_list pos:start="221:45" pos:end="221:52">(<argument pos:start="221:46" pos:end="221:46"><expr pos:start="221:46" pos:end="221:46"><name pos:start="221:46" pos:end="221:46">s</name></expr></argument>, <argument pos:start="221:49" pos:end="221:51"><expr pos:start="221:49" pos:end="221:51"><name pos:start="221:49" pos:end="221:51">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="223:13" pos:end="231:13"><if pos:start="223:13" pos:end="231:13">if <condition pos:start="223:16" pos:end="223:20">(<expr pos:start="223:17" pos:end="223:19"><name pos:start="223:17" pos:end="223:19">err</name></expr>)</condition> <block pos:start="223:22" pos:end="231:13">{<block_content pos:start="225:17" pos:end="229:24">

                <expr_stmt pos:start="225:17" pos:end="227:50"><expr pos:start="225:17" pos:end="227:49"><call pos:start="225:17" pos:end="227:49"><name pos:start="225:17" pos:end="225:23">fprintf</name><argument_list pos:start="225:24" pos:end="227:49">(<argument pos:start="225:25" pos:end="225:30"><expr pos:start="225:25" pos:end="225:30"><name pos:start="225:25" pos:end="225:30">stderr</name></expr></argument>, <argument pos:start="225:33" pos:end="225:73"><expr pos:start="225:33" pos:end="225:73"><literal type="string" pos:start="225:33" pos:end="225:73">"%s: error registering suffix slot: %s\n"</literal></expr></argument>,

                        <argument pos:start="227:25" pos:end="227:32"><expr pos:start="227:25" pos:end="227:32"><name pos:start="227:25" pos:end="227:32">__func__</name></expr></argument>, <argument pos:start="227:35" pos:end="227:48"><expr pos:start="227:35" pos:end="227:48"><call pos:start="227:35" pos:end="227:48"><name pos:start="227:35" pos:end="227:42">strerror</name><argument_list pos:start="227:43" pos:end="227:48">(<argument pos:start="227:44" pos:end="227:47"><expr pos:start="227:44" pos:end="227:47"><operator pos:start="227:44" pos:end="227:44">-</operator><name pos:start="227:45" pos:end="227:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:24"><expr pos:start="229:17" pos:end="229:23"><call pos:start="229:17" pos:end="229:23"><name pos:start="229:17" pos:end="229:21">abort</name><argument_list pos:start="229:22" pos:end="229:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="239:5" pos:end="239:72">/* in case the KVM bug workaround already "consumed" the new slot */</comment>

    <if_stmt pos:start="241:5" pos:end="245:5"><if pos:start="241:5" pos:end="245:5">if <condition pos:start="241:8" pos:end="241:14">(<expr pos:start="241:9" pos:end="241:13"><operator pos:start="241:9" pos:end="241:9">!</operator><name pos:start="241:10" pos:end="241:13">size</name></expr>)</condition> <block pos:start="241:16" pos:end="245:5">{<block_content pos:start="243:9" pos:end="243:15">

        <return pos:start="243:9" pos:end="243:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="247:5" pos:end="247:53">/* KVM does not need to know about this memory */</comment>

    <if_stmt pos:start="249:5" pos:end="253:5"><if pos:start="249:5" pos:end="253:5">if <condition pos:start="249:8" pos:end="249:35">(<expr pos:start="249:9" pos:end="249:34"><name pos:start="249:9" pos:end="249:13">flags</name> <operator pos:start="249:15" pos:end="249:16">&gt;=</operator> <name pos:start="249:18" pos:end="249:34">IO_MEM_UNASSIGNED</name></expr>)</condition> <block pos:start="249:37" pos:end="253:5">{<block_content pos:start="251:9" pos:end="251:15">

        <return pos:start="251:9" pos:end="251:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:28"><expr pos:start="255:5" pos:end="255:27"><name pos:start="255:5" pos:end="255:7">mem</name> <operator pos:start="255:9" pos:end="255:9">=</operator> <call pos:start="255:11" pos:end="255:27"><name pos:start="255:11" pos:end="255:24">kvm_alloc_slot</name><argument_list pos:start="255:25" pos:end="255:27">(<argument pos:start="255:26" pos:end="255:26"><expr pos:start="255:26" pos:end="255:26"><name pos:start="255:26" pos:end="255:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:28"><expr pos:start="257:5" pos:end="257:27"><name pos:start="257:5" pos:end="257:20"><name pos:start="257:5" pos:end="257:7">mem</name><operator pos:start="257:8" pos:end="257:9">-&gt;</operator><name pos:start="257:10" pos:end="257:20">memory_size</name></name> <operator pos:start="257:22" pos:end="257:22">=</operator> <name pos:start="257:24" pos:end="257:27">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:33"><expr pos:start="259:5" pos:end="259:32"><name pos:start="259:5" pos:end="259:19"><name pos:start="259:5" pos:end="259:7">mem</name><operator pos:start="259:8" pos:end="259:9">-&gt;</operator><name pos:start="259:10" pos:end="259:19">start_addr</name></name> <operator pos:start="259:21" pos:end="259:21">=</operator> <name pos:start="259:23" pos:end="259:32">start_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:19"><expr pos:start="261:5" pos:end="261:18"><name pos:start="261:5" pos:end="261:12"><name pos:start="261:5" pos:end="261:7">mem</name><operator pos:start="261:8" pos:end="261:9">-&gt;</operator><name pos:start="261:10" pos:end="261:12">ram</name></name> <operator pos:start="261:14" pos:end="261:14">=</operator> <name pos:start="261:16" pos:end="261:18">ram</name></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:45"><expr pos:start="263:5" pos:end="263:44"><name pos:start="263:5" pos:end="263:14"><name pos:start="263:5" pos:end="263:7">mem</name><operator pos:start="263:8" pos:end="263:9">-&gt;</operator><name pos:start="263:10" pos:end="263:14">flags</name></name> <operator pos:start="263:16" pos:end="263:16">=</operator> <call pos:start="263:18" pos:end="263:44"><name pos:start="263:18" pos:end="263:30">kvm_mem_flags</name><argument_list pos:start="263:31" pos:end="263:44">(<argument pos:start="263:32" pos:end="263:32"><expr pos:start="263:32" pos:end="263:32"><name pos:start="263:32" pos:end="263:32">s</name></expr></argument>, <argument pos:start="263:35" pos:end="263:43"><expr pos:start="263:35" pos:end="263:43"><name pos:start="263:35" pos:end="263:43">log_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:45"><expr pos:start="267:5" pos:end="267:44"><name pos:start="267:5" pos:end="267:7">err</name> <operator pos:start="267:9" pos:end="267:9">=</operator> <call pos:start="267:11" pos:end="267:44"><name pos:start="267:11" pos:end="267:36">kvm_set_user_memory_region</name><argument_list pos:start="267:37" pos:end="267:44">(<argument pos:start="267:38" pos:end="267:38"><expr pos:start="267:38" pos:end="267:38"><name pos:start="267:38" pos:end="267:38">s</name></expr></argument>, <argument pos:start="267:41" pos:end="267:43"><expr pos:start="267:41" pos:end="267:43"><name pos:start="267:41" pos:end="267:43">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="269:5" pos:end="277:5"><if pos:start="269:5" pos:end="277:5">if <condition pos:start="269:8" pos:end="269:12">(<expr pos:start="269:9" pos:end="269:11"><name pos:start="269:9" pos:end="269:11">err</name></expr>)</condition> <block pos:start="269:14" pos:end="277:5">{<block_content pos:start="271:9" pos:end="275:16">

        <expr_stmt pos:start="271:9" pos:end="273:32"><expr pos:start="271:9" pos:end="273:31"><call pos:start="271:9" pos:end="273:31"><name pos:start="271:9" pos:end="271:15">fprintf</name><argument_list pos:start="271:16" pos:end="273:31">(<argument pos:start="271:17" pos:end="271:22"><expr pos:start="271:17" pos:end="271:22"><name pos:start="271:17" pos:end="271:22">stderr</name></expr></argument>, <argument pos:start="271:25" pos:end="271:58"><expr pos:start="271:25" pos:end="271:58"><literal type="string" pos:start="271:25" pos:end="271:58">"%s: error registering slot: %s\n"</literal></expr></argument>, <argument pos:start="271:61" pos:end="271:68"><expr pos:start="271:61" pos:end="271:68"><name pos:start="271:61" pos:end="271:68">__func__</name></expr></argument>,

                <argument pos:start="273:17" pos:end="273:30"><expr pos:start="273:17" pos:end="273:30"><call pos:start="273:17" pos:end="273:30"><name pos:start="273:17" pos:end="273:24">strerror</name><argument_list pos:start="273:25" pos:end="273:30">(<argument pos:start="273:26" pos:end="273:29"><expr pos:start="273:26" pos:end="273:29"><operator pos:start="273:26" pos:end="273:26">-</operator><name pos:start="273:27" pos:end="273:29">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:16"><expr pos:start="275:9" pos:end="275:15"><call pos:start="275:9" pos:end="275:15"><name pos:start="275:9" pos:end="275:13">abort</name><argument_list pos:start="275:14" pos:end="275:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
