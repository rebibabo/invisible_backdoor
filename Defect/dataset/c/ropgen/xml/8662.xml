<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8662.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">IOMMUTLBEntry</name></type> <name pos:start="1:22" pos:end="1:41">s390_translate_iommu</name><parameter_list pos:start="1:42" pos:end="3:56">(<parameter pos:start="1:43" pos:end="1:58"><decl pos:start="1:43" pos:end="1:58"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:54">MemoryRegion</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">mr</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:71"><decl pos:start="1:61" pos:end="1:71"><type pos:start="1:61" pos:end="1:71"><name pos:start="1:61" pos:end="1:66">hwaddr</name></type> <name pos:start="1:68" pos:end="1:71">addr</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:55"><decl pos:start="3:43" pos:end="3:55"><type pos:start="3:43" pos:end="3:55"><name pos:start="3:43" pos:end="3:46">bool</name></type> <name pos:start="3:48" pos:end="3:55">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="99:1">{<block_content pos:start="7:5" pos:end="97:15">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">pte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:67"><decl pos:start="11:5" pos:end="11:66"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">S390PCIIOMMU</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:23">iommu</name> <init pos:start="11:25" pos:end="11:66">= <expr pos:start="11:27" pos:end="11:66"><call pos:start="11:27" pos:end="11:66"><name pos:start="11:27" pos:end="11:38">container_of</name><argument_list pos:start="11:39" pos:end="11:66">(<argument pos:start="11:40" pos:end="11:41"><expr pos:start="11:40" pos:end="11:41"><name pos:start="11:40" pos:end="11:41">mr</name></expr></argument>, <argument pos:start="11:44" pos:end="11:55"><expr pos:start="11:44" pos:end="11:55"><name pos:start="11:44" pos:end="11:55">S390PCIIOMMU</name></expr></argument>, <argument pos:start="11:58" pos:end="11:65"><expr pos:start="11:58" pos:end="11:65"><name pos:start="11:58" pos:end="11:65">iommu_mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="25:6"><decl pos:start="13:5" pos:end="25:5"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">IOMMUTLBEntry</name></type> <name pos:start="13:19" pos:end="13:21">ret</name> <init pos:start="13:23" pos:end="25:5">= <expr pos:start="13:25" pos:end="25:5"><block pos:start="13:25" pos:end="25:5">{

        <expr pos:start="15:9" pos:end="15:42"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:18">target_as</name> <operator pos:start="15:20" pos:end="15:20">=</operator> <operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:42">address_space_memory</name></expr>,

        <expr pos:start="17:9" pos:end="17:17"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:13">iova</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr>,

        <expr pos:start="19:9" pos:end="19:28"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:24">translated_addr</name> <operator pos:start="19:26" pos:end="19:26">=</operator> <literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr>,

        <expr pos:start="21:9" pos:end="21:31"><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:18">addr_mask</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <operator pos:start="21:22" pos:end="21:22">~</operator><operator pos:start="21:23" pos:end="21:23">(</operator><name pos:start="21:24" pos:end="21:29">hwaddr</name><operator pos:start="21:30" pos:end="21:30">)</operator><literal type="number" pos:start="21:31" pos:end="21:31">0</literal></expr>,

        <expr pos:start="23:9" pos:end="23:26"><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:13">perm</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:26">IOMMU_NONE</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <switch pos:start="29:5" pos:end="47:5">switch <condition pos:start="29:12" pos:end="29:32">(<expr pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:17">iommu</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:24">pbdev</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:31">state</name></name></expr>)</condition> <block pos:start="29:34" pos:end="47:5">{<block_content pos:start="31:5" pos:end="45:19">

    <case pos:start="31:5" pos:end="31:25">case <expr pos:start="31:10" pos:end="31:24"><name pos:start="31:10" pos:end="31:24">ZPCI_FS_ENABLED</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><name pos:start="33:10" pos:end="33:24">ZPCI_FS_BLOCKED</name></expr>:</case>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:28">(<expr pos:start="35:13" pos:end="35:27"><operator pos:start="35:13" pos:end="35:13">!</operator><name pos:start="35:14" pos:end="35:27"><name pos:start="35:14" pos:end="35:18">iommu</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:27">enabled</name></name></expr>)</condition> <block pos:start="35:30" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:23">

            <return pos:start="37:13" pos:end="37:23">return <expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <default pos:start="43:5" pos:end="43:12">default:</default>

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">ret</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="51:5" pos:end="51:54"><expr pos:start="51:5" pos:end="51:53"><call pos:start="51:5" pos:end="51:53"><name pos:start="51:5" pos:end="51:11">DPRINTF</name><argument_list pos:start="51:12" pos:end="51:53">(<argument pos:start="51:13" pos:end="51:46"><expr pos:start="51:13" pos:end="51:46"><literal type="string" pos:start="51:13" pos:end="51:34">"iommu trans addr 0x%"</literal> <name pos:start="51:36" pos:end="51:41">PRIx64</name> <literal type="string" pos:start="51:43" pos:end="51:46">"\n"</literal></expr></argument>, <argument pos:start="51:49" pos:end="51:52"><expr pos:start="51:49" pos:end="51:52"><name pos:start="51:49" pos:end="51:52">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:47">(<expr pos:start="55:9" pos:end="55:46"><name pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:12">addr</name> <argument_list type="generic" pos:start="55:14" pos:end="55:35">&lt; <argument pos:start="55:16" pos:end="55:33"><expr pos:start="55:16" pos:end="55:33"><name pos:start="55:16" pos:end="55:25"><name pos:start="55:16" pos:end="55:20">iommu</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:25">pba</name></name> <operator pos:start="55:27" pos:end="55:28">||</operator> <name pos:start="55:30" pos:end="55:33">addr</name></expr></argument> &gt;</argument_list></name> <name pos:start="55:37" pos:end="55:46"><name pos:start="55:37" pos:end="55:41">iommu</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:46">pal</name></name></expr>)</condition> <block pos:start="55:49" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:19">

        <return pos:start="57:9" pos:end="57:19">return <expr pos:start="57:16" pos:end="57:18"><name pos:start="57:16" pos:end="57:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="65:41"><expr pos:start="63:5" pos:end="65:40"><name pos:start="63:5" pos:end="63:7">pte</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="65:40"><name pos:start="63:11" pos:end="63:34">s390_guest_io_table_walk</name><argument_list pos:start="63:35" pos:end="65:40">(<argument pos:start="63:36" pos:end="63:75"><expr pos:start="63:36" pos:end="63:75"><call pos:start="63:36" pos:end="63:75"><name pos:start="63:36" pos:end="63:60">s390_pci_get_table_origin</name><argument_list pos:start="63:61" pos:end="63:75">(<argument pos:start="63:62" pos:end="63:74"><expr pos:start="63:62" pos:end="63:74"><name pos:start="63:62" pos:end="63:74"><name pos:start="63:62" pos:end="63:66">iommu</name><operator pos:start="63:67" pos:end="63:68">-&gt;</operator><name pos:start="63:69" pos:end="63:74">g_iota</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="65:36" pos:end="65:39"><expr pos:start="65:36" pos:end="65:39"><name pos:start="65:36" pos:end="65:39">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:13">(<expr pos:start="67:9" pos:end="67:12"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:12">pte</name></expr>)</condition> <block pos:start="67:15" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:19">

        <return pos:start="69:9" pos:end="69:19">return <expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:37"><expr pos:start="75:5" pos:end="75:36"><name pos:start="75:5" pos:end="75:9">flags</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <name pos:start="75:13" pos:end="75:15">pte</name> <operator pos:start="75:17" pos:end="75:17">&amp;</operator> <name pos:start="75:19" pos:end="75:36">ZPCI_PTE_FLAG_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:20"><expr pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:12"><name pos:start="77:5" pos:end="77:7">ret</name><operator pos:start="77:8" pos:end="77:8">.</operator><name pos:start="77:9" pos:end="77:12">iova</name></name> <operator pos:start="77:14" pos:end="77:14">=</operator> <name pos:start="77:16" pos:end="77:19">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:51"><expr pos:start="79:5" pos:end="79:50"><name pos:start="79:5" pos:end="79:23"><name pos:start="79:5" pos:end="79:7">ret</name><operator pos:start="79:8" pos:end="79:8">.</operator><name pos:start="79:9" pos:end="79:23">translated_addr</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <name pos:start="79:27" pos:end="79:29">pte</name> <operator pos:start="79:31" pos:end="79:31">&amp;</operator> <name pos:start="79:33" pos:end="79:50">ZPCI_PTE_ADDR_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:26"><expr pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:17"><name pos:start="81:5" pos:end="81:7">ret</name><operator pos:start="81:8" pos:end="81:8">.</operator><name pos:start="81:9" pos:end="81:17">addr_mask</name></name> <operator pos:start="81:19" pos:end="81:19">=</operator> <literal type="number" pos:start="81:21" pos:end="81:25">0xfff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:33">(<expr pos:start="85:9" pos:end="85:32"><name pos:start="85:9" pos:end="85:13">flags</name> <operator pos:start="85:15" pos:end="85:15">&amp;</operator> <name pos:start="85:17" pos:end="85:32">ZPCI_PTE_INVALID</name></expr>)</condition> <block pos:start="85:35" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:30">

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:11">ret</name><operator pos:start="87:12" pos:end="87:12">.</operator><name pos:start="87:13" pos:end="87:16">perm</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:29">IOMMU_NONE</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="93:5">else <block pos:start="89:12" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:28">

        <expr_stmt pos:start="91:9" pos:end="91:28"><expr pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:11">ret</name><operator pos:start="91:12" pos:end="91:12">.</operator><name pos:start="91:13" pos:end="91:16">perm</name></name> <operator pos:start="91:18" pos:end="91:18">=</operator> <name pos:start="91:20" pos:end="91:27">IOMMU_RW</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="97:5" pos:end="97:15">return <expr pos:start="97:12" pos:end="97:14"><name pos:start="97:12" pos:end="97:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
