<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8248.c" pos:tabs="8"><function pos:start="1:1" pos:end="351:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:49">gen_intermediate_code_internal</name><parameter_list pos:start="1:50" pos:end="5:64">(<parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><name pos:start="1:51" pos:end="1:61">CPUX86State</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">env</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:70"><decl pos:start="3:51" pos:end="3:70"><type pos:start="3:51" pos:end="3:70"><name pos:start="3:51" pos:end="3:66">TranslationBlock</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:70">tb</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:63"><decl pos:start="5:51" pos:end="5:63"><type pos:start="5:51" pos:end="5:63"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:63">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="351:1">{<block_content pos:start="9:5" pos:end="349:5">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">dc1</name></decl>, <decl pos:start="9:23" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:25">dc</name> <init pos:start="9:27" pos:end="9:32">= <expr pos:start="9:29" pos:end="9:32"><operator pos:start="9:29" pos:end="9:29">&amp;</operator><name pos:start="9:30" pos:end="9:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:23">pc_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint16_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">CPUBreakpoint</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">j</name></decl>, <decl pos:start="17:12" pos:end="17:13"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:13">lj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:16">target_ulong</name></type> <name pos:start="21:18" pos:end="21:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16">target_ulong</name></type> <name pos:start="23:18" pos:end="23:24">cs_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:17">max_insns</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:36">/* generate intermediate code */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:12">pc_start</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:21"><name pos:start="33:16" pos:end="33:17">tb</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:26"><expr pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:11">cs_base</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:25"><name pos:start="35:15" pos:end="35:16">tb</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:25">cs_base</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:9">flags</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <name pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:14">tb</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:21">flags</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:10"><name pos:start="41:5" pos:end="41:6">dc</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:10">pe</name></name> <operator pos:start="41:12" pos:end="41:12">=</operator> <operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:19">flags</name> <operator pos:start="41:21" pos:end="41:22">&gt;&gt;</operator> <name pos:start="41:24" pos:end="41:34">HF_PE_SHIFT</name><operator pos:start="41:35" pos:end="41:35">)</operator> <operator pos:start="41:37" pos:end="41:37">&amp;</operator> <literal type="number" pos:start="41:39" pos:end="41:39">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:6">dc</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:14">code32</name></name> <operator pos:start="43:16" pos:end="43:16">=</operator> <operator pos:start="43:18" pos:end="43:18">(</operator><name pos:start="43:19" pos:end="43:23">flags</name> <operator pos:start="43:25" pos:end="43:26">&gt;&gt;</operator> <name pos:start="43:28" pos:end="43:40">HF_CS32_SHIFT</name><operator pos:start="43:41" pos:end="43:41">)</operator> <operator pos:start="43:43" pos:end="43:43">&amp;</operator> <literal type="number" pos:start="43:45" pos:end="43:45">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:6">dc</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:12">ss32</name></name> <operator pos:start="45:14" pos:end="45:14">=</operator> <operator pos:start="45:16" pos:end="45:16">(</operator><name pos:start="45:17" pos:end="45:21">flags</name> <operator pos:start="45:23" pos:end="45:24">&gt;&gt;</operator> <name pos:start="45:26" pos:end="45:38">HF_SS32_SHIFT</name><operator pos:start="45:39" pos:end="45:39">)</operator> <operator pos:start="45:41" pos:end="45:41">&amp;</operator> <literal type="number" pos:start="45:43" pos:end="45:43">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:48"><expr pos:start="47:5" pos:end="47:47"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:6">dc</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:14">addseg</name></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:23">flags</name> <operator pos:start="47:25" pos:end="47:26">&gt;&gt;</operator> <name pos:start="47:28" pos:end="47:42">HF_ADDSEG_SHIFT</name><operator pos:start="47:43" pos:end="47:43">)</operator> <operator pos:start="47:45" pos:end="47:45">&amp;</operator> <literal type="number" pos:start="47:47" pos:end="47:47">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:17"><expr pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:12">f_st</name></name> <operator pos:start="49:14" pos:end="49:14">=</operator> <literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:39"><expr pos:start="51:5" pos:end="51:38"><name pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:12">vm86</name></name> <operator pos:start="51:14" pos:end="51:14">=</operator> <operator pos:start="51:16" pos:end="51:16">(</operator><name pos:start="51:17" pos:end="51:21">flags</name> <operator pos:start="51:23" pos:end="51:24">&gt;&gt;</operator> <name pos:start="51:26" pos:end="51:33">VM_SHIFT</name><operator pos:start="51:34" pos:end="51:34">)</operator> <operator pos:start="51:36" pos:end="51:36">&amp;</operator> <literal type="number" pos:start="51:38" pos:end="51:38">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:42"><expr pos:start="53:5" pos:end="53:41"><name pos:start="53:5" pos:end="53:11"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:11">cpl</name></name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">(</operator><name pos:start="53:16" pos:end="53:20">flags</name> <operator pos:start="53:22" pos:end="53:23">&gt;&gt;</operator> <name pos:start="53:25" pos:end="53:36">HF_CPL_SHIFT</name><operator pos:start="53:37" pos:end="53:37">)</operator> <operator pos:start="53:39" pos:end="53:39">&amp;</operator> <literal type="number" pos:start="53:41" pos:end="53:41">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:41"><expr pos:start="55:5" pos:end="55:40"><name pos:start="55:5" pos:end="55:12"><name pos:start="55:5" pos:end="55:6">dc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:12">iopl</name></name> <operator pos:start="55:14" pos:end="55:14">=</operator> <operator pos:start="55:16" pos:end="55:16">(</operator><name pos:start="55:17" pos:end="55:21">flags</name> <operator pos:start="55:23" pos:end="55:24">&gt;&gt;</operator> <name pos:start="55:26" pos:end="55:35">IOPL_SHIFT</name><operator pos:start="55:36" pos:end="55:36">)</operator> <operator pos:start="55:38" pos:end="55:38">&amp;</operator> <literal type="number" pos:start="55:40" pos:end="55:40">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:10">tf</name></name> <operator pos:start="57:12" pos:end="57:12">=</operator> <operator pos:start="57:14" pos:end="57:14">(</operator><name pos:start="57:15" pos:end="57:19">flags</name> <operator pos:start="57:21" pos:end="57:22">&gt;&gt;</operator> <name pos:start="57:24" pos:end="57:31">TF_SHIFT</name><operator pos:start="57:32" pos:end="57:32">)</operator> <operator pos:start="57:34" pos:end="57:34">&amp;</operator> <literal type="number" pos:start="57:36" pos:end="57:36">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:53"><expr pos:start="59:5" pos:end="59:52"><name pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:6">dc</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:26">singlestep_enabled</name></name> <operator pos:start="59:28" pos:end="59:28">=</operator> <name pos:start="59:30" pos:end="59:52"><name pos:start="59:30" pos:end="59:32">env</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:52">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:30"><expr pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:13"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:13">cc_op</name></name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:29">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:26"><expr pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:6">dc</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:15">cs_base</name></name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:25">cs_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:16"><expr pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:10"><name pos:start="65:5" pos:end="65:6">dc</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:10">tb</name></name> <operator pos:start="65:12" pos:end="65:12">=</operator> <name pos:start="65:14" pos:end="65:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:26"><expr pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:21"><name pos:start="67:5" pos:end="67:6">dc</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:21">popl_esp_hack</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <literal type="number" pos:start="67:25" pos:end="67:25">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="69:5" pos:end="69:40">/* select memory access functions */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:22"><expr pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:6">dc</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:17">mem_index</name></name> <operator pos:start="71:19" pos:end="71:19">=</operator> <literal type="number" pos:start="71:21" pos:end="71:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="83:5"><if pos:start="73:5" pos:end="83:5">if <condition pos:start="73:8" pos:end="73:32">(<expr pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:13">flags</name> <operator pos:start="73:15" pos:end="73:15">&amp;</operator> <name pos:start="73:17" pos:end="73:31">HF_SOFTMMU_MASK</name></expr>)</condition> <block pos:start="73:34" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:34">

        <if_stmt pos:start="75:9" pos:end="81:34"><if pos:start="75:9" pos:end="77:34">if <condition pos:start="75:12" pos:end="75:25">(<expr pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:14">dc</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:19">cpl</name></name> <operator pos:start="75:21" pos:end="75:22">==</operator> <literal type="number" pos:start="75:24" pos:end="75:24">3</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:34"><block_content pos:start="77:13" pos:end="77:34">

            <expr_stmt pos:start="77:13" pos:end="77:34"><expr pos:start="77:13" pos:end="77:33"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:14">dc</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:25">mem_index</name></name> <operator pos:start="77:27" pos:end="77:27">=</operator> <literal type="number" pos:start="77:29" pos:end="77:29">2</literal> <operator pos:start="77:31" pos:end="77:31">*</operator> <literal type="number" pos:start="77:33" pos:end="77:33">4</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="79:9" pos:end="81:34">else<block type="pseudo" pos:start="81:13" pos:end="81:34"><block_content pos:start="81:13" pos:end="81:34">

            <expr_stmt pos:start="81:13" pos:end="81:34"><expr pos:start="81:13" pos:end="81:33"><name pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:14">dc</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:25">mem_index</name></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <literal type="number" pos:start="81:29" pos:end="81:29">1</literal> <operator pos:start="81:31" pos:end="81:31">*</operator> <literal type="number" pos:start="81:33" pos:end="81:33">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:45"><expr pos:start="85:5" pos:end="85:44"><name pos:start="85:5" pos:end="85:22"><name pos:start="85:5" pos:end="85:6">dc</name><operator pos:start="85:7" pos:end="85:8">-&gt;</operator><name pos:start="85:9" pos:end="85:22">cpuid_features</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:44"><name pos:start="85:26" pos:end="85:28">env</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:44">cpuid_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:53"><expr pos:start="87:5" pos:end="87:52"><name pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:6">dc</name><operator pos:start="87:7" pos:end="87:8">-&gt;</operator><name pos:start="87:9" pos:end="87:26">cpuid_ext_features</name></name> <operator pos:start="87:28" pos:end="87:28">=</operator> <name pos:start="87:30" pos:end="87:52"><name pos:start="87:30" pos:end="87:32">env</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:52">cpuid_ext_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:55"><expr pos:start="89:5" pos:end="89:54"><name pos:start="89:5" pos:end="89:27"><name pos:start="89:5" pos:end="89:6">dc</name><operator pos:start="89:7" pos:end="89:8">-&gt;</operator><name pos:start="89:9" pos:end="89:27">cpuid_ext2_features</name></name> <operator pos:start="89:29" pos:end="89:29">=</operator> <name pos:start="89:31" pos:end="89:54"><name pos:start="89:31" pos:end="89:33">env</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:54">cpuid_ext2_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="94:0"><expr pos:start="91:5" pos:end="91:54"><name pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:6">dc</name><operator pos:start="91:7" pos:end="91:8">-&gt;</operator><name pos:start="91:9" pos:end="91:27">cpuid_ext3_features</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:54"><name pos:start="91:31" pos:end="91:33">env</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:54">cpuid_ext3_features</name></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="93:1" pos:end="93:20">#<cpp:directive pos:start="93:2" pos:end="93:6">ifdef</cpp:directive> <name pos:start="93:8" pos:end="93:20">TARGET_X86_64</name></cpp:ifdef>

    <expr_stmt pos:start="95:5" pos:end="95:42"><expr pos:start="95:5" pos:end="95:41"><name pos:start="95:5" pos:end="95:11"><name pos:start="95:5" pos:end="95:6">dc</name><operator pos:start="95:7" pos:end="95:8">-&gt;</operator><name pos:start="95:9" pos:end="95:11">lma</name></name> <operator pos:start="95:13" pos:end="95:13">=</operator> <operator pos:start="95:15" pos:end="95:15">(</operator><name pos:start="95:16" pos:end="95:20">flags</name> <operator pos:start="95:22" pos:end="95:23">&gt;&gt;</operator> <name pos:start="95:25" pos:end="95:36">HF_LMA_SHIFT</name><operator pos:start="95:37" pos:end="95:37">)</operator> <operator pos:start="95:39" pos:end="95:39">&amp;</operator> <literal type="number" pos:start="95:41" pos:end="95:41">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="100:0"><expr pos:start="97:5" pos:end="97:45"><name pos:start="97:5" pos:end="97:14"><name pos:start="97:5" pos:end="97:6">dc</name><operator pos:start="97:7" pos:end="97:8">-&gt;</operator><name pos:start="97:9" pos:end="97:14">code64</name></name> <operator pos:start="97:16" pos:end="97:16">=</operator> <operator pos:start="97:18" pos:end="97:18">(</operator><name pos:start="97:19" pos:end="97:23">flags</name> <operator pos:start="97:25" pos:end="97:26">&gt;&gt;</operator> <name pos:start="97:28" pos:end="97:40">HF_CS64_SHIFT</name><operator pos:start="97:41" pos:end="97:41">)</operator> <operator pos:start="97:43" pos:end="97:43">&amp;</operator> <literal type="number" pos:start="97:45" pos:end="97:45">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="101:5" pos:end="101:22"><expr pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:13"><name pos:start="101:5" pos:end="101:6">dc</name><operator pos:start="101:7" pos:end="101:8">-&gt;</operator><name pos:start="101:9" pos:end="101:13">flags</name></name> <operator pos:start="101:15" pos:end="101:15">=</operator> <name pos:start="101:17" pos:end="101:21">flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="124:0"><expr pos:start="103:5" pos:end="113:21"><name pos:start="103:5" pos:end="103:15"><name pos:start="103:5" pos:end="103:6">dc</name><operator pos:start="103:7" pos:end="103:8">-&gt;</operator><name pos:start="103:9" pos:end="103:15">jmp_opt</name></name> <operator pos:start="103:17" pos:end="103:17">=</operator> <operator pos:start="103:19" pos:end="103:19">!</operator><operator pos:start="103:20" pos:end="103:20">(</operator><name pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:22">dc</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:26">tf</name></name> <operator pos:start="103:28" pos:end="103:29">||</operator> <name pos:start="103:31" pos:end="103:53"><name pos:start="103:31" pos:end="103:33">env</name><operator pos:start="103:34" pos:end="103:35">-&gt;</operator><name pos:start="103:36" pos:end="103:53">singlestep_enabled</name></name> <operator pos:start="103:55" pos:end="103:56">||</operator>

                    <operator pos:start="105:21" pos:end="105:21">(</operator><name pos:start="105:22" pos:end="105:26">flags</name> <operator pos:start="105:28" pos:end="105:28">&amp;</operator> <name pos:start="105:30" pos:end="105:48">HF_INHIBIT_IRQ_MASK</name><operator pos:start="105:49" pos:end="108:0">)</operator>

<cpp:ifndef pos:start="107:1" pos:end="107:22">#<cpp:directive pos:start="107:2" pos:end="107:7">ifndef</cpp:directive> <name pos:start="107:9" pos:end="107:22">CONFIG_SOFTMMU</name></cpp:ifndef>

                    <operator pos:start="109:21" pos:end="109:22">||</operator> <operator pos:start="109:24" pos:end="109:24">(</operator><name pos:start="109:25" pos:end="109:29">flags</name> <operator pos:start="109:31" pos:end="109:31">&amp;</operator> <name pos:start="109:33" pos:end="109:47">HF_SOFTMMU_MASK</name><operator pos:start="109:48" pos:end="112:0">)</operator>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

                    <operator pos:start="113:21" pos:end="113:21">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="115:1" pos:end="115:5">#<cpp:directive pos:start="115:2" pos:end="115:3">if</cpp:directive> <expr pos:start="115:5" pos:end="115:5"><literal type="number" pos:start="115:5" pos:end="115:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="117:5" pos:end="117:28">/* check addseg logic */</comment>

    if (!dc-&gt;addseg &amp;&amp; (dc-&gt;vm86 || !dc-&gt;pe || !dc-&gt;code32))

        printf("ERROR addseg\n");

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="127:5" pos:end="127:30"><expr pos:start="127:5" pos:end="127:29"><name pos:start="127:5" pos:end="127:12"><name pos:start="127:5" pos:end="127:9">cpu_T</name><index pos:start="127:10" pos:end="127:12">[<expr pos:start="127:11" pos:end="127:11"><literal type="number" pos:start="127:11" pos:end="127:11">0</literal></expr>]</index></name> <operator pos:start="127:14" pos:end="127:14">=</operator> <call pos:start="127:16" pos:end="127:29"><name pos:start="127:16" pos:end="127:27">tcg_temp_new</name><argument_list pos:start="127:28" pos:end="127:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:30"><expr pos:start="129:5" pos:end="129:29"><name pos:start="129:5" pos:end="129:12"><name pos:start="129:5" pos:end="129:9">cpu_T</name><index pos:start="129:10" pos:end="129:12">[<expr pos:start="129:11" pos:end="129:11"><literal type="number" pos:start="129:11" pos:end="129:11">1</literal></expr>]</index></name> <operator pos:start="129:14" pos:end="129:14">=</operator> <call pos:start="129:16" pos:end="129:29"><name pos:start="129:16" pos:end="129:27">tcg_temp_new</name><argument_list pos:start="129:28" pos:end="129:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:28"><expr pos:start="131:5" pos:end="131:27"><name pos:start="131:5" pos:end="131:10">cpu_A0</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <call pos:start="131:14" pos:end="131:27"><name pos:start="131:14" pos:end="131:25">tcg_temp_new</name><argument_list pos:start="131:26" pos:end="131:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:10">cpu_T3</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <call pos:start="133:14" pos:end="133:27"><name pos:start="133:14" pos:end="133:25">tcg_temp_new</name><argument_list pos:start="133:26" pos:end="133:27">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:30"><expr pos:start="137:5" pos:end="137:29"><name pos:start="137:5" pos:end="137:12">cpu_tmp0</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <call pos:start="137:16" pos:end="137:29"><name pos:start="137:16" pos:end="137:27">tcg_temp_new</name><argument_list pos:start="137:28" pos:end="137:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:38"><expr pos:start="139:5" pos:end="139:37"><name pos:start="139:5" pos:end="139:16">cpu_tmp1_i64</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <call pos:start="139:20" pos:end="139:37"><name pos:start="139:20" pos:end="139:35">tcg_temp_new_i64</name><argument_list pos:start="139:36" pos:end="139:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:38"><expr pos:start="141:5" pos:end="141:37"><name pos:start="141:5" pos:end="141:16">cpu_tmp2_i32</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <call pos:start="141:20" pos:end="141:37"><name pos:start="141:20" pos:end="141:35">tcg_temp_new_i32</name><argument_list pos:start="141:36" pos:end="141:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:38"><expr pos:start="143:5" pos:end="143:37"><name pos:start="143:5" pos:end="143:16">cpu_tmp3_i32</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <call pos:start="143:20" pos:end="143:37"><name pos:start="143:20" pos:end="143:35">tcg_temp_new_i32</name><argument_list pos:start="143:36" pos:end="143:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:30"><expr pos:start="145:5" pos:end="145:29"><name pos:start="145:5" pos:end="145:12">cpu_tmp4</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <call pos:start="145:16" pos:end="145:29"><name pos:start="145:16" pos:end="145:27">tcg_temp_new</name><argument_list pos:start="145:28" pos:end="145:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:30"><expr pos:start="147:5" pos:end="147:29"><name pos:start="147:5" pos:end="147:12">cpu_tmp5</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <call pos:start="147:16" pos:end="147:29"><name pos:start="147:16" pos:end="147:27">tcg_temp_new</name><argument_list pos:start="147:28" pos:end="147:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:34"><expr pos:start="149:5" pos:end="149:33"><name pos:start="149:5" pos:end="149:12">cpu_ptr0</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:33"><name pos:start="149:16" pos:end="149:31">tcg_temp_new_ptr</name><argument_list pos:start="149:32" pos:end="149:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:34"><expr pos:start="151:5" pos:end="151:33"><name pos:start="151:5" pos:end="151:12">cpu_ptr1</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <call pos:start="151:16" pos:end="151:33"><name pos:start="151:16" pos:end="151:31">tcg_temp_new_ptr</name><argument_list pos:start="151:32" pos:end="151:33">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:45"><expr pos:start="155:5" pos:end="155:44"><name pos:start="155:5" pos:end="155:15">gen_opc_end</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <name pos:start="155:19" pos:end="155:29">gen_opc_buf</name> <operator pos:start="155:31" pos:end="155:31">+</operator> <name pos:start="155:33" pos:end="155:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:28"><expr pos:start="159:5" pos:end="159:27"><name pos:start="159:5" pos:end="159:14"><name pos:start="159:5" pos:end="159:6">dc</name><operator pos:start="159:7" pos:end="159:8">-&gt;</operator><name pos:start="159:9" pos:end="159:14">is_jmp</name></name> <operator pos:start="159:16" pos:end="159:16">=</operator> <name pos:start="159:18" pos:end="159:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:22"><expr pos:start="161:5" pos:end="161:21"><name pos:start="161:5" pos:end="161:10">pc_ptr</name> <operator pos:start="161:12" pos:end="161:12">=</operator> <name pos:start="161:14" pos:end="161:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:12"><expr pos:start="163:5" pos:end="163:11"><name pos:start="163:5" pos:end="163:6">lj</name> <operator pos:start="163:8" pos:end="163:8">=</operator> <operator pos:start="163:10" pos:end="163:10">-</operator><literal type="number" pos:start="163:11" pos:end="163:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:18"><expr pos:start="165:5" pos:end="165:17"><name pos:start="165:5" pos:end="165:13">num_insns</name> <operator pos:start="165:15" pos:end="165:15">=</operator> <literal type="number" pos:start="165:17" pos:end="165:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:43"><expr pos:start="167:5" pos:end="167:42"><name pos:start="167:5" pos:end="167:13">max_insns</name> <operator pos:start="167:15" pos:end="167:15">=</operator> <name pos:start="167:17" pos:end="167:26"><name pos:start="167:17" pos:end="167:18">tb</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:26">cflags</name></name> <operator pos:start="167:28" pos:end="167:28">&amp;</operator> <name pos:start="167:30" pos:end="167:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="171:34"><if pos:start="169:5" pos:end="171:34">if <condition pos:start="169:8" pos:end="169:23">(<expr pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:17">max_insns</name> <operator pos:start="169:19" pos:end="169:20">==</operator> <literal type="number" pos:start="169:22" pos:end="169:22">0</literal></expr>)</condition><block type="pseudo" pos:start="171:9" pos:end="171:34"><block_content pos:start="171:9" pos:end="171:34">

        <expr_stmt pos:start="171:9" pos:end="171:34"><expr pos:start="171:9" pos:end="171:33"><name pos:start="171:9" pos:end="171:17">max_insns</name> <operator pos:start="171:19" pos:end="171:19">=</operator> <name pos:start="171:21" pos:end="171:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:23"><expr pos:start="175:5" pos:end="175:22"><call pos:start="175:5" pos:end="175:22"><name pos:start="175:5" pos:end="175:20">gen_icount_start</name><argument_list pos:start="175:21" pos:end="175:22">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="177:5" pos:end="285:5">for<control pos:start="177:8" pos:end="177:11">(<init pos:start="177:9" pos:end="177:9">;</init><condition pos:start="177:10" pos:end="177:10">;</condition><incr/>)</control> <block pos:start="177:13" pos:end="285:5">{<block_content pos:start="179:9" pos:end="283:9">

        <if_stmt pos:start="179:9" pos:end="195:9"><if pos:start="179:9" pos:end="195:9">if <condition pos:start="179:12" pos:end="179:55">(<expr pos:start="179:13" pos:end="179:54"><call pos:start="179:13" pos:end="179:54"><name pos:start="179:13" pos:end="179:20">unlikely</name><argument_list pos:start="179:21" pos:end="179:54">(<argument pos:start="179:22" pos:end="179:53"><expr pos:start="179:22" pos:end="179:53"><operator pos:start="179:22" pos:end="179:22">!</operator><call pos:start="179:23" pos:end="179:53"><name pos:start="179:23" pos:end="179:34">QTAILQ_EMPTY</name><argument_list pos:start="179:35" pos:end="179:53">(<argument pos:start="179:36" pos:end="179:52"><expr pos:start="179:36" pos:end="179:52"><operator pos:start="179:36" pos:end="179:36">&amp;</operator><name pos:start="179:37" pos:end="179:52"><name pos:start="179:37" pos:end="179:39">env</name><operator pos:start="179:40" pos:end="179:41">-&gt;</operator><name pos:start="179:42" pos:end="179:52">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:57" pos:end="195:9">{<block_content pos:start="181:13" pos:end="193:13">

            <macro pos:start="181:13" pos:end="181:56"><name pos:start="181:13" pos:end="181:26">QTAILQ_FOREACH</name><argument_list pos:start="181:27" pos:end="181:56">(<argument pos:start="181:28" pos:end="181:29">bp</argument>, <argument pos:start="181:32" pos:end="181:48">&amp;env-&gt;breakpoints</argument>, <argument pos:start="181:51" pos:end="181:55">entry</argument>)</argument_list></macro> <block pos:start="181:58" pos:end="193:13">{<block_content pos:start="183:17" pos:end="191:17">

                <if_stmt pos:start="183:17" pos:end="191:17"><if pos:start="183:17" pos:end="191:17">if <condition pos:start="183:20" pos:end="185:72">(<expr pos:start="183:21" pos:end="185:71"><name pos:start="183:21" pos:end="183:26"><name pos:start="183:21" pos:end="183:22">bp</name><operator pos:start="183:23" pos:end="183:24">-&gt;</operator><name pos:start="183:25" pos:end="183:26">pc</name></name> <operator pos:start="183:28" pos:end="183:29">==</operator> <name pos:start="183:31" pos:end="183:36">pc_ptr</name> <operator pos:start="183:38" pos:end="183:39">&amp;&amp;</operator>

                    <operator pos:start="185:21" pos:end="185:21">!</operator><operator pos:start="185:22" pos:end="185:22">(</operator><operator pos:start="185:23" pos:end="185:23">(</operator><name pos:start="185:24" pos:end="185:32"><name pos:start="185:24" pos:end="185:25">bp</name><operator pos:start="185:26" pos:end="185:27">-&gt;</operator><name pos:start="185:28" pos:end="185:32">flags</name></name> <operator pos:start="185:34" pos:end="185:34">&amp;</operator> <name pos:start="185:36" pos:end="185:41">BP_CPU</name><operator pos:start="185:42" pos:end="185:42">)</operator> <operator pos:start="185:44" pos:end="185:45">&amp;&amp;</operator> <operator pos:start="185:47" pos:end="185:47">(</operator><name pos:start="185:48" pos:end="185:56"><name pos:start="185:48" pos:end="185:49">tb</name><operator pos:start="185:50" pos:end="185:51">-&gt;</operator><name pos:start="185:52" pos:end="185:56">flags</name></name> <operator pos:start="185:58" pos:end="185:58">&amp;</operator> <name pos:start="185:60" pos:end="185:69">HF_RF_MASK</name><operator pos:start="185:70" pos:end="185:70">)</operator><operator pos:start="185:71" pos:end="185:71">)</operator></expr>)</condition> <block pos:start="185:74" pos:end="191:17">{<block_content pos:start="187:21" pos:end="189:26">

                    <expr_stmt pos:start="187:21" pos:end="187:56"><expr pos:start="187:21" pos:end="187:55"><call pos:start="187:21" pos:end="187:55"><name pos:start="187:21" pos:end="187:29">gen_debug</name><argument_list pos:start="187:30" pos:end="187:55">(<argument pos:start="187:31" pos:end="187:32"><expr pos:start="187:31" pos:end="187:32"><name pos:start="187:31" pos:end="187:32">dc</name></expr></argument>, <argument pos:start="187:35" pos:end="187:54"><expr pos:start="187:35" pos:end="187:54"><name pos:start="187:35" pos:end="187:40">pc_ptr</name> <operator pos:start="187:42" pos:end="187:42">-</operator> <name pos:start="187:44" pos:end="187:54"><name pos:start="187:44" pos:end="187:45">dc</name><operator pos:start="187:46" pos:end="187:47">-&gt;</operator><name pos:start="187:48" pos:end="187:54">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="189:21" pos:end="189:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="197:9" pos:end="219:9"><if pos:start="197:9" pos:end="219:9">if <condition pos:start="197:12" pos:end="197:22">(<expr pos:start="197:13" pos:end="197:21"><name pos:start="197:13" pos:end="197:21">search_pc</name></expr>)</condition> <block pos:start="197:24" pos:end="219:9">{<block_content pos:start="199:13" pos:end="217:43">

            <expr_stmt pos:start="199:13" pos:end="199:42"><expr pos:start="199:13" pos:end="199:41"><name pos:start="199:13" pos:end="199:13">j</name> <operator pos:start="199:15" pos:end="199:15">=</operator> <name pos:start="199:17" pos:end="199:27">gen_opc_ptr</name> <operator pos:start="199:29" pos:end="199:29">-</operator> <name pos:start="199:31" pos:end="199:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="201:13" pos:end="209:13"><if pos:start="201:13" pos:end="209:13">if <condition pos:start="201:16" pos:end="201:23">(<expr pos:start="201:17" pos:end="201:22"><name pos:start="201:17" pos:end="201:18">lj</name> <operator pos:start="201:20" pos:end="201:20">&lt;</operator> <name pos:start="201:22" pos:end="201:22">j</name></expr>)</condition> <block pos:start="201:25" pos:end="209:13">{<block_content pos:start="203:17" pos:end="207:50">

                <expr_stmt pos:start="203:17" pos:end="203:21"><expr pos:start="203:17" pos:end="203:20"><name pos:start="203:17" pos:end="203:18">lj</name><operator pos:start="203:19" pos:end="203:20">++</operator></expr>;</expr_stmt>

                <while pos:start="205:17" pos:end="207:50">while <condition pos:start="205:23" pos:end="205:30">(<expr pos:start="205:24" pos:end="205:29"><name pos:start="205:24" pos:end="205:25">lj</name> <operator pos:start="205:27" pos:end="205:27">&lt;</operator> <name pos:start="205:29" pos:end="205:29">j</name></expr>)</condition><block type="pseudo" pos:start="207:21" pos:end="207:50"><block_content pos:start="207:21" pos:end="207:50">

                    <expr_stmt pos:start="207:21" pos:end="207:50"><expr pos:start="207:21" pos:end="207:49"><name pos:start="207:21" pos:end="207:45"><name pos:start="207:21" pos:end="207:39">gen_opc_instr_start</name><index pos:start="207:40" pos:end="207:45">[<expr pos:start="207:41" pos:end="207:44"><name pos:start="207:41" pos:end="207:42">lj</name><operator pos:start="207:43" pos:end="207:44">++</operator></expr>]</index></name> <operator pos:start="207:47" pos:end="207:47">=</operator> <literal type="number" pos:start="207:49" pos:end="207:49">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:36"><expr pos:start="211:13" pos:end="211:35"><name pos:start="211:13" pos:end="211:26"><name pos:start="211:13" pos:end="211:22">gen_opc_pc</name><index pos:start="211:23" pos:end="211:26">[<expr pos:start="211:24" pos:end="211:25"><name pos:start="211:24" pos:end="211:25">lj</name></expr>]</index></name> <operator pos:start="211:28" pos:end="211:28">=</operator> <name pos:start="211:30" pos:end="211:35">pc_ptr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:42"><expr pos:start="213:13" pos:end="213:41"><name pos:start="213:13" pos:end="213:29"><name pos:start="213:13" pos:end="213:25">gen_opc_cc_op</name><index pos:start="213:26" pos:end="213:29">[<expr pos:start="213:27" pos:end="213:28"><name pos:start="213:27" pos:end="213:28">lj</name></expr>]</index></name> <operator pos:start="213:31" pos:end="213:31">=</operator> <name pos:start="213:33" pos:end="213:41"><name pos:start="213:33" pos:end="213:34">dc</name><operator pos:start="213:35" pos:end="213:36">-&gt;</operator><name pos:start="213:37" pos:end="213:41">cc_op</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:40"><expr pos:start="215:13" pos:end="215:39"><name pos:start="215:13" pos:end="215:35"><name pos:start="215:13" pos:end="215:31">gen_opc_instr_start</name><index pos:start="215:32" pos:end="215:35">[<expr pos:start="215:33" pos:end="215:34"><name pos:start="215:33" pos:end="215:34">lj</name></expr>]</index></name> <operator pos:start="215:37" pos:end="215:37">=</operator> <literal type="number" pos:start="215:39" pos:end="215:39">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:43"><expr pos:start="217:13" pos:end="217:42"><name pos:start="217:13" pos:end="217:30"><name pos:start="217:13" pos:end="217:26">gen_opc_icount</name><index pos:start="217:27" pos:end="217:30">[<expr pos:start="217:28" pos:end="217:29"><name pos:start="217:28" pos:end="217:29">lj</name></expr>]</index></name> <operator pos:start="217:32" pos:end="217:32">=</operator> <name pos:start="217:34" pos:end="217:42">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="221:9" pos:end="223:27"><if pos:start="221:9" pos:end="223:27">if <condition pos:start="221:12" pos:end="221:68">(<expr pos:start="221:13" pos:end="221:67"><name pos:start="221:13" pos:end="221:21">num_insns</name> <operator pos:start="221:23" pos:end="221:23">+</operator> <literal type="number" pos:start="221:25" pos:end="221:25">1</literal> <operator pos:start="221:27" pos:end="221:28">==</operator> <name pos:start="221:30" pos:end="221:38">max_insns</name> <operator pos:start="221:40" pos:end="221:41">&amp;&amp;</operator> <operator pos:start="221:43" pos:end="221:43">(</operator><name pos:start="221:44" pos:end="221:53"><name pos:start="221:44" pos:end="221:45">tb</name><operator pos:start="221:46" pos:end="221:47">-&gt;</operator><name pos:start="221:48" pos:end="221:53">cflags</name></name> <operator pos:start="221:55" pos:end="221:55">&amp;</operator> <name pos:start="221:57" pos:end="221:66">CF_LAST_IO</name><operator pos:start="221:67" pos:end="221:67">)</operator></expr>)</condition><block type="pseudo" pos:start="223:13" pos:end="223:27"><block_content pos:start="223:13" pos:end="223:27">

            <expr_stmt pos:start="223:13" pos:end="223:27"><expr pos:start="223:13" pos:end="223:26"><call pos:start="223:13" pos:end="223:26"><name pos:start="223:13" pos:end="223:24">gen_io_start</name><argument_list pos:start="223:25" pos:end="223:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="227:9" pos:end="227:40"><expr pos:start="227:9" pos:end="227:39"><name pos:start="227:9" pos:end="227:14">pc_ptr</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <call pos:start="227:18" pos:end="227:39"><name pos:start="227:18" pos:end="227:27">disas_insn</name><argument_list pos:start="227:28" pos:end="227:39">(<argument pos:start="227:29" pos:end="227:30"><expr pos:start="227:29" pos:end="227:30"><name pos:start="227:29" pos:end="227:30">dc</name></expr></argument>, <argument pos:start="227:33" pos:end="227:38"><expr pos:start="227:33" pos:end="227:38"><name pos:start="227:33" pos:end="227:38">pc_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:20"><expr pos:start="229:9" pos:end="229:19"><name pos:start="229:9" pos:end="229:17">num_insns</name><operator pos:start="229:18" pos:end="229:19">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="231:9" pos:end="231:43">/* stop translation if indicated */</comment>

        <if_stmt pos:start="233:9" pos:end="235:18"><if pos:start="233:9" pos:end="235:18">if <condition pos:start="233:12" pos:end="233:23">(<expr pos:start="233:13" pos:end="233:22"><name pos:start="233:13" pos:end="233:22"><name pos:start="233:13" pos:end="233:14">dc</name><operator pos:start="233:15" pos:end="233:16">-&gt;</operator><name pos:start="233:17" pos:end="233:22">is_jmp</name></name></expr>)</condition><block type="pseudo" pos:start="235:13" pos:end="235:18"><block_content pos:start="235:13" pos:end="235:18">

            <break pos:start="235:13" pos:end="235:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="237:9" pos:end="239:35">/* if single step mode, we generate only one instruction and

           generate an exception */</comment>

        <comment type="block" pos:start="241:9" pos:end="245:33">/* if irq were inhibited with HF_INHIBIT_IRQ_MASK, we clear

           the flag and abort the translation to give the irqs a

           change to be happen */</comment>

        <if_stmt pos:start="247:9" pos:end="257:9"><if pos:start="247:9" pos:end="257:9">if <condition pos:start="247:12" pos:end="249:42">(<expr pos:start="247:13" pos:end="249:41"><name pos:start="247:13" pos:end="247:18"><name pos:start="247:13" pos:end="247:14">dc</name><operator pos:start="247:15" pos:end="247:16">-&gt;</operator><name pos:start="247:17" pos:end="247:18">tf</name></name> <operator pos:start="247:20" pos:end="247:21">||</operator> <name pos:start="247:23" pos:end="247:44"><name pos:start="247:23" pos:end="247:24">dc</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:44">singlestep_enabled</name></name> <operator pos:start="247:46" pos:end="247:47">||</operator>

            <operator pos:start="249:13" pos:end="249:13">(</operator><name pos:start="249:14" pos:end="249:18">flags</name> <operator pos:start="249:20" pos:end="249:20">&amp;</operator> <name pos:start="249:22" pos:end="249:40">HF_INHIBIT_IRQ_MASK</name><operator pos:start="249:41" pos:end="249:41">)</operator></expr>)</condition> <block pos:start="249:44" pos:end="257:9">{<block_content pos:start="251:13" pos:end="255:18">

            <expr_stmt pos:start="251:13" pos:end="251:45"><expr pos:start="251:13" pos:end="251:44"><call pos:start="251:13" pos:end="251:44"><name pos:start="251:13" pos:end="251:22">gen_jmp_im</name><argument_list pos:start="251:23" pos:end="251:44">(<argument pos:start="251:24" pos:end="251:43"><expr pos:start="251:24" pos:end="251:43"><name pos:start="251:24" pos:end="251:29">pc_ptr</name> <operator pos:start="251:31" pos:end="251:31">-</operator> <name pos:start="251:33" pos:end="251:43"><name pos:start="251:33" pos:end="251:34">dc</name><operator pos:start="251:35" pos:end="251:36">-&gt;</operator><name pos:start="251:37" pos:end="251:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:24"><expr pos:start="253:13" pos:end="253:23"><call pos:start="253:13" pos:end="253:23"><name pos:start="253:13" pos:end="253:19">gen_eob</name><argument_list pos:start="253:20" pos:end="253:23">(<argument pos:start="253:21" pos:end="253:22"><expr pos:start="253:21" pos:end="253:22"><name pos:start="253:21" pos:end="253:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="255:13" pos:end="255:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="259:9" pos:end="259:58">/* if too long translation, stop generation too */</comment>

        <if_stmt pos:start="261:9" pos:end="273:9"><if pos:start="261:9" pos:end="273:9">if <condition pos:start="261:12" pos:end="265:35">(<expr pos:start="261:13" pos:end="265:34"><name pos:start="261:13" pos:end="261:23">gen_opc_ptr</name> <operator pos:start="261:25" pos:end="261:26">&gt;=</operator> <name pos:start="261:28" pos:end="261:38">gen_opc_end</name> <operator pos:start="261:40" pos:end="261:41">||</operator>

            <operator pos:start="263:13" pos:end="263:13">(</operator><name pos:start="263:14" pos:end="263:19">pc_ptr</name> <operator pos:start="263:21" pos:end="263:21">-</operator> <name pos:start="263:23" pos:end="263:30">pc_start</name><operator pos:start="263:31" pos:end="263:31">)</operator> <operator pos:start="263:33" pos:end="263:34">&gt;=</operator> <operator pos:start="263:36" pos:end="263:36">(</operator><name pos:start="263:37" pos:end="263:52">TARGET_PAGE_SIZE</name> <operator pos:start="263:54" pos:end="263:54">-</operator> <literal type="number" pos:start="263:56" pos:end="263:57">32</literal><operator pos:start="263:58" pos:end="263:58">)</operator> <operator pos:start="263:60" pos:end="263:61">||</operator>

            <name pos:start="265:13" pos:end="265:21">num_insns</name> <operator pos:start="265:23" pos:end="265:24">&gt;=</operator> <name pos:start="265:26" pos:end="265:34">max_insns</name></expr>)</condition> <block pos:start="265:37" pos:end="273:9">{<block_content pos:start="267:13" pos:end="271:18">

            <expr_stmt pos:start="267:13" pos:end="267:45"><expr pos:start="267:13" pos:end="267:44"><call pos:start="267:13" pos:end="267:44"><name pos:start="267:13" pos:end="267:22">gen_jmp_im</name><argument_list pos:start="267:23" pos:end="267:44">(<argument pos:start="267:24" pos:end="267:43"><expr pos:start="267:24" pos:end="267:43"><name pos:start="267:24" pos:end="267:29">pc_ptr</name> <operator pos:start="267:31" pos:end="267:31">-</operator> <name pos:start="267:33" pos:end="267:43"><name pos:start="267:33" pos:end="267:34">dc</name><operator pos:start="267:35" pos:end="267:36">-&gt;</operator><name pos:start="267:37" pos:end="267:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:24"><expr pos:start="269:13" pos:end="269:23"><call pos:start="269:13" pos:end="269:23"><name pos:start="269:13" pos:end="269:19">gen_eob</name><argument_list pos:start="269:20" pos:end="269:23">(<argument pos:start="269:21" pos:end="269:22"><expr pos:start="269:21" pos:end="269:22"><name pos:start="269:21" pos:end="269:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="271:13" pos:end="271:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="275:9" pos:end="283:9"><if pos:start="275:9" pos:end="283:9">if <condition pos:start="275:12" pos:end="275:23">(<expr pos:start="275:13" pos:end="275:22"><name pos:start="275:13" pos:end="275:22">singlestep</name></expr>)</condition> <block pos:start="275:25" pos:end="283:9">{<block_content pos:start="277:13" pos:end="281:18">

            <expr_stmt pos:start="277:13" pos:end="277:45"><expr pos:start="277:13" pos:end="277:44"><call pos:start="277:13" pos:end="277:44"><name pos:start="277:13" pos:end="277:22">gen_jmp_im</name><argument_list pos:start="277:23" pos:end="277:44">(<argument pos:start="277:24" pos:end="277:43"><expr pos:start="277:24" pos:end="277:43"><name pos:start="277:24" pos:end="277:29">pc_ptr</name> <operator pos:start="277:31" pos:end="277:31">-</operator> <name pos:start="277:33" pos:end="277:43"><name pos:start="277:33" pos:end="277:34">dc</name><operator pos:start="277:35" pos:end="277:36">-&gt;</operator><name pos:start="277:37" pos:end="277:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:24"><expr pos:start="279:13" pos:end="279:23"><call pos:start="279:13" pos:end="279:23"><name pos:start="279:13" pos:end="279:19">gen_eob</name><argument_list pos:start="279:20" pos:end="279:23">(<argument pos:start="279:21" pos:end="279:22"><expr pos:start="279:21" pos:end="279:22"><name pos:start="279:21" pos:end="279:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="281:13" pos:end="281:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="287:5" pos:end="289:21"><if pos:start="287:5" pos:end="289:21">if <condition pos:start="287:8" pos:end="287:32">(<expr pos:start="287:9" pos:end="287:31"><name pos:start="287:9" pos:end="287:18"><name pos:start="287:9" pos:end="287:10">tb</name><operator pos:start="287:11" pos:end="287:12">-&gt;</operator><name pos:start="287:13" pos:end="287:18">cflags</name></name> <operator pos:start="287:20" pos:end="287:20">&amp;</operator> <name pos:start="287:22" pos:end="287:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="289:9" pos:end="289:21"><block_content pos:start="289:9" pos:end="289:21">

        <expr_stmt pos:start="289:9" pos:end="289:21"><expr pos:start="289:9" pos:end="289:20"><call pos:start="289:9" pos:end="289:20"><name pos:start="289:9" pos:end="289:18">gen_io_end</name><argument_list pos:start="289:19" pos:end="289:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:34"><expr pos:start="291:5" pos:end="291:33"><call pos:start="291:5" pos:end="291:33"><name pos:start="291:5" pos:end="291:18">gen_icount_end</name><argument_list pos:start="291:19" pos:end="291:33">(<argument pos:start="291:20" pos:end="291:21"><expr pos:start="291:20" pos:end="291:21"><name pos:start="291:20" pos:end="291:21">tb</name></expr></argument>, <argument pos:start="291:24" pos:end="291:32"><expr pos:start="291:24" pos:end="291:32"><name pos:start="291:24" pos:end="291:32">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:32"><expr pos:start="293:5" pos:end="293:31"><operator pos:start="293:5" pos:end="293:5">*</operator><name pos:start="293:6" pos:end="293:16">gen_opc_ptr</name> <operator pos:start="293:18" pos:end="293:18">=</operator> <name pos:start="293:20" pos:end="293:31">INDEX_op_end</name></expr>;</expr_stmt>

    <comment type="block" pos:start="295:5" pos:end="295:49">/* we don't forget to fill the last values */</comment>

    <if_stmt pos:start="297:5" pos:end="312:0"><if pos:start="297:5" pos:end="312:0">if <condition pos:start="297:8" pos:end="297:18">(<expr pos:start="297:9" pos:end="297:17"><name pos:start="297:9" pos:end="297:17">search_pc</name></expr>)</condition> <block pos:start="297:20" pos:end="312:0">{<block_content pos:start="299:9" pos:end="305:42">

        <expr_stmt pos:start="299:9" pos:end="299:38"><expr pos:start="299:9" pos:end="299:37"><name pos:start="299:9" pos:end="299:9">j</name> <operator pos:start="299:11" pos:end="299:11">=</operator> <name pos:start="299:13" pos:end="299:23">gen_opc_ptr</name> <operator pos:start="299:25" pos:end="299:25">-</operator> <name pos:start="299:27" pos:end="299:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:13"><expr pos:start="301:9" pos:end="301:12"><name pos:start="301:9" pos:end="301:10">lj</name><operator pos:start="301:11" pos:end="301:12">++</operator></expr>;</expr_stmt>

        <while pos:start="303:9" pos:end="305:42">while <condition pos:start="303:15" pos:end="303:23">(<expr pos:start="303:16" pos:end="303:22"><name pos:start="303:16" pos:end="303:17">lj</name> <operator pos:start="303:19" pos:end="303:20">&lt;=</operator> <name pos:start="303:22" pos:end="303:22">j</name></expr>)</condition><block type="pseudo" pos:start="305:13" pos:end="305:42"><block_content pos:start="305:13" pos:end="305:42">

            <expr_stmt pos:start="305:13" pos:end="305:42"><expr pos:start="305:13" pos:end="305:41"><name pos:start="305:13" pos:end="305:37"><name pos:start="305:13" pos:end="305:31">gen_opc_instr_start</name><index pos:start="305:32" pos:end="305:37">[<expr pos:start="305:33" pos:end="305:36"><name pos:start="305:33" pos:end="305:34">lj</name><operator pos:start="305:35" pos:end="305:36">++</operator></expr>]</index></name> <operator pos:start="305:39" pos:end="305:39">=</operator> <literal type="number" pos:start="305:41" pos:end="305:41">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="311:1" pos:end="311:18">#<cpp:directive pos:start="311:2" pos:end="311:6">ifdef</cpp:directive> <name pos:start="311:8" pos:end="311:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="313:5" pos:end="340:0"><if pos:start="313:5" pos:end="340:0">if <condition pos:start="313:8" pos:end="313:46">(<expr pos:start="313:9" pos:end="313:45"><call pos:start="313:9" pos:end="313:45"><name pos:start="313:9" pos:end="313:26">qemu_loglevel_mask</name><argument_list pos:start="313:27" pos:end="313:45">(<argument pos:start="313:28" pos:end="313:44"><expr pos:start="313:28" pos:end="313:44"><name pos:start="313:28" pos:end="313:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:48" pos:end="340:0">{<block_content pos:start="315:9" pos:end="335:23">

        <decl_stmt pos:start="315:9" pos:end="315:24"><decl pos:start="315:9" pos:end="315:23"><type pos:start="315:9" pos:end="315:11"><name pos:start="315:9" pos:end="315:11">int</name></type> <name pos:start="315:13" pos:end="315:23">disas_flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:39"><expr pos:start="317:9" pos:end="317:38"><call pos:start="317:9" pos:end="317:38"><name pos:start="317:9" pos:end="317:16">qemu_log</name><argument_list pos:start="317:17" pos:end="317:38">(<argument pos:start="317:18" pos:end="317:37"><expr pos:start="317:18" pos:end="317:37"><literal type="string" pos:start="317:18" pos:end="317:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="322:0"><expr pos:start="319:9" pos:end="319:53"><call pos:start="319:9" pos:end="319:53"><name pos:start="319:9" pos:end="319:16">qemu_log</name><argument_list pos:start="319:17" pos:end="319:53">(<argument pos:start="319:18" pos:end="319:27"><expr pos:start="319:18" pos:end="319:27"><literal type="string" pos:start="319:18" pos:end="319:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="319:30" pos:end="319:52"><expr pos:start="319:30" pos:end="319:52"><call pos:start="319:30" pos:end="319:52"><name pos:start="319:30" pos:end="319:42">lookup_symbol</name><argument_list pos:start="319:43" pos:end="319:52">(<argument pos:start="319:44" pos:end="319:51"><expr pos:start="319:44" pos:end="319:51"><name pos:start="319:44" pos:end="319:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="321:1" pos:end="321:20">#<cpp:directive pos:start="321:2" pos:end="321:6">ifdef</cpp:directive> <name pos:start="321:8" pos:end="321:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="323:9" pos:end="331:38"><if pos:start="323:9" pos:end="325:28">if <condition pos:start="323:12" pos:end="323:23">(<expr pos:start="323:13" pos:end="323:22"><name pos:start="323:13" pos:end="323:22"><name pos:start="323:13" pos:end="323:14">dc</name><operator pos:start="323:15" pos:end="323:16">-&gt;</operator><name pos:start="323:17" pos:end="323:22">code64</name></name></expr>)</condition><block type="pseudo" pos:start="325:13" pos:end="325:28"><block_content pos:start="325:13" pos:end="325:28">

            <expr_stmt pos:start="325:13" pos:end="325:28"><expr pos:start="325:13" pos:end="325:27"><name pos:start="325:13" pos:end="325:23">disas_flags</name> <operator pos:start="325:25" pos:end="325:25">=</operator> <literal type="number" pos:start="325:27" pos:end="325:27">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="327:9" pos:end="331:38">else<block type="pseudo" pos:start="331:13" pos:end="331:38"><block_content pos:start="331:13" pos:end="331:38">

<cpp:endif pos:start="329:1" pos:end="329:6">#<cpp:directive pos:start="329:2" pos:end="329:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="331:13" pos:end="331:38"><expr pos:start="331:13" pos:end="331:37"><name pos:start="331:13" pos:end="331:23">disas_flags</name> <operator pos:start="331:25" pos:end="331:25">=</operator> <operator pos:start="331:27" pos:end="331:27">!</operator><name pos:start="331:28" pos:end="331:37"><name pos:start="331:28" pos:end="331:29">dc</name><operator pos:start="331:30" pos:end="331:31">-&gt;</operator><name pos:start="331:32" pos:end="331:37">code32</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:67"><expr pos:start="333:9" pos:end="333:66"><call pos:start="333:9" pos:end="333:66"><name pos:start="333:9" pos:end="333:24">log_target_disas</name><argument_list pos:start="333:25" pos:end="333:66">(<argument pos:start="333:26" pos:end="333:33"><expr pos:start="333:26" pos:end="333:33"><name pos:start="333:26" pos:end="333:33">pc_start</name></expr></argument>, <argument pos:start="333:36" pos:end="333:52"><expr pos:start="333:36" pos:end="333:52"><name pos:start="333:36" pos:end="333:41">pc_ptr</name> <operator pos:start="333:43" pos:end="333:43">-</operator> <name pos:start="333:45" pos:end="333:52">pc_start</name></expr></argument>, <argument pos:start="333:55" pos:end="333:65"><expr pos:start="333:55" pos:end="333:65"><name pos:start="333:55" pos:end="333:65">disas_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:23"><expr pos:start="335:9" pos:end="335:22"><call pos:start="335:9" pos:end="335:22"><name pos:start="335:9" pos:end="335:16">qemu_log</name><argument_list pos:start="335:17" pos:end="335:22">(<argument pos:start="335:18" pos:end="335:21"><expr pos:start="335:18" pos:end="335:21"><literal type="string" pos:start="335:18" pos:end="335:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="339:1" pos:end="339:6">#<cpp:directive pos:start="339:2" pos:end="339:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="343:5" pos:end="349:5"><if pos:start="343:5" pos:end="349:5">if <condition pos:start="343:8" pos:end="343:19">(<expr pos:start="343:9" pos:end="343:18"><operator pos:start="343:9" pos:end="343:9">!</operator><name pos:start="343:10" pos:end="343:18">search_pc</name></expr>)</condition> <block pos:start="343:21" pos:end="349:5">{<block_content pos:start="345:9" pos:end="347:31">

        <expr_stmt pos:start="345:9" pos:end="345:37"><expr pos:start="345:9" pos:end="345:36"><name pos:start="345:9" pos:end="345:16"><name pos:start="345:9" pos:end="345:10">tb</name><operator pos:start="345:11" pos:end="345:12">-&gt;</operator><name pos:start="345:13" pos:end="345:16">size</name></name> <operator pos:start="345:18" pos:end="345:18">=</operator> <name pos:start="345:20" pos:end="345:25">pc_ptr</name> <operator pos:start="345:27" pos:end="345:27">-</operator> <name pos:start="345:29" pos:end="345:36">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:31"><expr pos:start="347:9" pos:end="347:30"><name pos:start="347:9" pos:end="347:18"><name pos:start="347:9" pos:end="347:10">tb</name><operator pos:start="347:11" pos:end="347:12">-&gt;</operator><name pos:start="347:13" pos:end="347:18">icount</name></name> <operator pos:start="347:20" pos:end="347:20">=</operator> <name pos:start="347:22" pos:end="347:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
