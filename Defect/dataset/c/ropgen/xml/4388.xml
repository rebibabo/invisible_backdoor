<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4388.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">pci_parse_devaddr</name><parameter_list pos:start="1:22" pos:end="3:63">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:38"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">addr</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:49"><decl pos:start="1:41" pos:end="1:49"><type pos:start="1:41" pos:end="1:49"><name pos:start="1:41" pos:end="1:43">int</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">domp</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:60"><decl pos:start="1:52" pos:end="1:60"><type pos:start="1:52" pos:end="1:60"><name pos:start="1:52" pos:end="1:54">int</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">busp</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:41"><decl pos:start="3:23" pos:end="3:41"><type pos:start="3:23" pos:end="3:41"><name pos:start="3:23" pos:end="3:30">unsigned</name> <name pos:start="3:32" pos:end="3:34">int</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:41">slotp</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:62"><decl pos:start="3:44" pos:end="3:62"><type pos:start="3:44" pos:end="3:62"><name pos:start="3:44" pos:end="3:51">unsigned</name> <name pos:start="3:53" pos:end="3:55">int</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:62">funcp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="123:1">{<block_content pos:start="7:5" pos:end="121:13">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:11">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:21">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:21">dom</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr></init></decl>, <decl pos:start="13:28" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:17"/><name pos:start="13:28" pos:end="13:30">bus</name> <init pos:start="13:32" pos:end="13:34">= <expr pos:start="13:34" pos:end="13:34"><literal type="number" pos:start="13:34" pos:end="13:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:21">slot</name> <init pos:start="15:23" pos:end="15:25">= <expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:21">func</name> <init pos:start="17:23" pos:end="17:25">= <expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:13"><expr pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:5">p</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <name pos:start="21:9" pos:end="21:12">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:7">val</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:28"><name pos:start="23:11" pos:end="23:17">strtoul</name><argument_list pos:start="23:18" pos:end="23:28">(<argument pos:start="23:19" pos:end="23:19"><expr pos:start="23:19" pos:end="23:19"><name pos:start="23:19" pos:end="23:19">p</name></expr></argument>, <argument pos:start="23:22" pos:end="23:23"><expr pos:start="23:22" pos:end="23:23"><operator pos:start="23:22" pos:end="23:22">&amp;</operator><name pos:start="23:23" pos:end="23:23">e</name></expr></argument>, <argument pos:start="23:26" pos:end="23:27"><expr pos:start="23:26" pos:end="23:27"><literal type="number" pos:start="23:26" pos:end="23:27">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:18"><if pos:start="25:5" pos:end="27:18">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:9">e</name> <operator pos:start="25:11" pos:end="25:12">==</operator> <name pos:start="25:14" pos:end="25:14">p</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:18"><block_content pos:start="27:9" pos:end="27:18">

	<return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="57:5"><if pos:start="29:5" pos:end="57:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:10">e</name> <operator pos:start="29:12" pos:end="29:13">==</operator> <literal type="char" pos:start="29:15" pos:end="29:17">':'</literal></expr>)</condition> <block pos:start="29:20" pos:end="57:5">{<block_content pos:start="31:9" pos:end="55:9">

	<expr_stmt pos:start="31:9" pos:end="31:18"><expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:11">bus</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:17">val</name></expr>;</expr_stmt>

	<expr_stmt pos:start="33:9" pos:end="33:18"><expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:9">p</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:13">e</name> <operator pos:start="33:15" pos:end="33:15">+</operator> <literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="35:9" pos:end="35:33"><expr pos:start="35:9" pos:end="35:32"><name pos:start="35:9" pos:end="35:11">val</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:32"><name pos:start="35:15" pos:end="35:21">strtoul</name><argument_list pos:start="35:22" pos:end="35:32">(<argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><name pos:start="35:23" pos:end="35:23">p</name></expr></argument>, <argument pos:start="35:26" pos:end="35:27"><expr pos:start="35:26" pos:end="35:27"><operator pos:start="35:26" pos:end="35:26">&amp;</operator><name pos:start="35:27" pos:end="35:27">e</name></expr></argument>, <argument pos:start="35:30" pos:end="35:31"><expr pos:start="35:30" pos:end="35:31"><literal type="number" pos:start="35:30" pos:end="35:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="37:9" pos:end="39:22"><if pos:start="37:9" pos:end="39:22">if <condition pos:start="37:12" pos:end="37:19">(<expr pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:13">e</name> <operator pos:start="37:15" pos:end="37:16">==</operator> <name pos:start="37:18" pos:end="37:18">p</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:22"><block_content pos:start="39:13" pos:end="39:22">

	    <return pos:start="39:13" pos:end="39:22">return <expr pos:start="39:20" pos:end="39:21"><operator pos:start="39:20" pos:end="39:20">-</operator><literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt pos:start="41:9" pos:end="55:9"><if pos:start="41:9" pos:end="55:9">if <condition pos:start="41:12" pos:end="41:22">(<expr pos:start="41:13" pos:end="41:21"><operator pos:start="41:13" pos:end="41:13">*</operator><name pos:start="41:14" pos:end="41:14">e</name> <operator pos:start="41:16" pos:end="41:17">==</operator> <literal type="char" pos:start="41:19" pos:end="41:21">':'</literal></expr>)</condition> <block pos:start="41:24" pos:end="55:9">{<block_content pos:start="43:13" pos:end="53:26">

	    <expr_stmt pos:start="43:13" pos:end="43:22"><expr pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:15">dom</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:21">bus</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="45:13" pos:end="45:22"><expr pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:15">bus</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:21">val</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="47:13" pos:end="47:22"><expr pos:start="47:13" pos:end="47:21"><name pos:start="47:13" pos:end="47:13">p</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:17">e</name> <operator pos:start="47:19" pos:end="47:19">+</operator> <literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="49:13" pos:end="49:37"><expr pos:start="49:13" pos:end="49:36"><name pos:start="49:13" pos:end="49:15">val</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:36"><name pos:start="49:19" pos:end="49:25">strtoul</name><argument_list pos:start="49:26" pos:end="49:36">(<argument pos:start="49:27" pos:end="49:27"><expr pos:start="49:27" pos:end="49:27"><name pos:start="49:27" pos:end="49:27">p</name></expr></argument>, <argument pos:start="49:30" pos:end="49:31"><expr pos:start="49:30" pos:end="49:31"><operator pos:start="49:30" pos:end="49:30">&amp;</operator><name pos:start="49:31" pos:end="49:31">e</name></expr></argument>, <argument pos:start="49:34" pos:end="49:35"><expr pos:start="49:34" pos:end="49:35"><literal type="number" pos:start="49:34" pos:end="49:35">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="51:13" pos:end="53:26"><if pos:start="51:13" pos:end="53:26">if <condition pos:start="51:16" pos:end="51:23">(<expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:17">e</name> <operator pos:start="51:19" pos:end="51:20">==</operator> <name pos:start="51:22" pos:end="51:22">p</name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:26"><block_content pos:start="53:17" pos:end="53:26">

		<return pos:start="53:17" pos:end="53:26">return <expr pos:start="53:24" pos:end="53:25"><operator pos:start="53:24" pos:end="53:24">-</operator><literal type="number" pos:start="53:25" pos:end="53:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:15"><expr pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:8">slot</name> <operator pos:start="61:10" pos:end="61:10">=</operator> <name pos:start="61:12" pos:end="61:14">val</name></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="85:5"><if pos:start="65:5" pos:end="85:5">if <condition pos:start="65:8" pos:end="65:22">(<expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:13">funcp</name> <operator pos:start="65:15" pos:end="65:16">!=</operator> <name pos:start="65:18" pos:end="65:21">NULL</name></expr>)</condition> <block pos:start="65:24" pos:end="85:5">{<block_content pos:start="67:9" pos:end="83:19">

        <if_stmt pos:start="67:9" pos:end="69:22"><if pos:start="67:9" pos:end="69:22">if <condition pos:start="67:12" pos:end="67:22">(<expr pos:start="67:13" pos:end="67:21"><operator pos:start="67:13" pos:end="67:13">*</operator><name pos:start="67:14" pos:end="67:14">e</name> <operator pos:start="67:16" pos:end="67:17">!=</operator> <literal type="char" pos:start="67:19" pos:end="67:21">'.'</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:22"><block_content pos:start="69:13" pos:end="69:22">

            <return pos:start="69:13" pos:end="69:22">return <expr pos:start="69:20" pos:end="69:21"><operator pos:start="69:20" pos:end="69:20">-</operator><literal type="number" pos:start="69:21" pos:end="69:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:18"><expr pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:9">p</name> <operator pos:start="73:11" pos:end="73:11">=</operator> <name pos:start="73:13" pos:end="73:13">e</name> <operator pos:start="73:15" pos:end="73:15">+</operator> <literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:33"><expr pos:start="75:9" pos:end="75:32"><name pos:start="75:9" pos:end="75:11">val</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:32"><name pos:start="75:15" pos:end="75:21">strtoul</name><argument_list pos:start="75:22" pos:end="75:32">(<argument pos:start="75:23" pos:end="75:23"><expr pos:start="75:23" pos:end="75:23"><name pos:start="75:23" pos:end="75:23">p</name></expr></argument>, <argument pos:start="75:26" pos:end="75:27"><expr pos:start="75:26" pos:end="75:27"><operator pos:start="75:26" pos:end="75:26">&amp;</operator><name pos:start="75:27" pos:end="75:27">e</name></expr></argument>, <argument pos:start="75:30" pos:end="75:31"><expr pos:start="75:30" pos:end="75:31"><literal type="number" pos:start="75:30" pos:end="75:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="79:22"><if pos:start="77:9" pos:end="79:22">if <condition pos:start="77:12" pos:end="77:19">(<expr pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:13">e</name> <operator pos:start="77:15" pos:end="77:16">==</operator> <name pos:start="77:18" pos:end="77:18">p</name></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:22"><block_content pos:start="79:13" pos:end="79:22">

            <return pos:start="79:13" pos:end="79:22">return <expr pos:start="79:20" pos:end="79:21"><operator pos:start="79:20" pos:end="79:20">-</operator><literal type="number" pos:start="79:21" pos:end="79:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:19"><expr pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:12">func</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <name pos:start="83:16" pos:end="83:18">val</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:36">/* if funcp == NULL func is 0 */</comment>

    <if_stmt pos:start="91:5" pos:end="93:18"><if pos:start="91:5" pos:end="93:18">if <condition pos:start="91:8" pos:end="91:62">(<expr pos:start="91:9" pos:end="91:61"><name pos:start="91:9" pos:end="91:11">dom</name> <operator pos:start="91:13" pos:end="91:13">&gt;</operator> <literal type="number" pos:start="91:15" pos:end="91:20">0xffff</literal> <operator pos:start="91:22" pos:end="91:23">||</operator> <name pos:start="91:25" pos:end="91:27">bus</name> <operator pos:start="91:29" pos:end="91:29">&gt;</operator> <literal type="number" pos:start="91:31" pos:end="91:34">0xff</literal> <operator pos:start="91:36" pos:end="91:37">||</operator> <name pos:start="91:39" pos:end="91:42">slot</name> <operator pos:start="91:44" pos:end="91:44">&gt;</operator> <literal type="number" pos:start="91:46" pos:end="91:49">0x1f</literal> <operator pos:start="91:51" pos:end="91:52">||</operator> <name pos:start="91:54" pos:end="91:57">func</name> <operator pos:start="91:59" pos:end="91:59">&gt;</operator> <literal type="number" pos:start="91:61" pos:end="91:61">7</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:18"><block_content pos:start="93:9" pos:end="93:18">

	<return pos:start="93:9" pos:end="93:18">return <expr pos:start="93:16" pos:end="93:17"><operator pos:start="93:16" pos:end="93:16">-</operator><literal type="number" pos:start="93:17" pos:end="93:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="99:18"><if pos:start="97:5" pos:end="99:18">if <condition pos:start="97:8" pos:end="97:11">(<expr pos:start="97:9" pos:end="97:10"><operator pos:start="97:9" pos:end="97:9">*</operator><name pos:start="97:10" pos:end="97:10">e</name></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:18"><block_content pos:start="99:9" pos:end="99:18">

	<return pos:start="99:9" pos:end="99:18">return <expr pos:start="99:16" pos:end="99:17"><operator pos:start="99:16" pos:end="99:16">-</operator><literal type="number" pos:start="99:17" pos:end="99:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:59">/* Note: QEMU doesn't implement domains other than 0 */</comment>

    <if_stmt pos:start="105:5" pos:end="107:18"><if pos:start="105:5" pos:end="107:18">if <condition pos:start="105:8" pos:end="105:51">(<expr pos:start="105:9" pos:end="105:50"><operator pos:start="105:9" pos:end="105:9">!</operator><call pos:start="105:10" pos:end="105:50"><name pos:start="105:10" pos:end="105:21">pci_find_bus</name><argument_list pos:start="105:22" pos:end="105:50">(<argument pos:start="105:23" pos:end="105:44"><expr pos:start="105:23" pos:end="105:44"><call pos:start="105:23" pos:end="105:44"><name pos:start="105:23" pos:end="105:39">pci_find_root_bus</name><argument_list pos:start="105:40" pos:end="105:44">(<argument pos:start="105:41" pos:end="105:43"><expr pos:start="105:41" pos:end="105:43"><name pos:start="105:41" pos:end="105:43">dom</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="105:47" pos:end="105:49"><expr pos:start="105:47" pos:end="105:49"><name pos:start="105:47" pos:end="105:49">bus</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:18"><block_content pos:start="107:9" pos:end="107:18">

	<return pos:start="107:9" pos:end="107:18">return <expr pos:start="107:16" pos:end="107:17"><operator pos:start="107:16" pos:end="107:16">-</operator><literal type="number" pos:start="107:17" pos:end="107:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:16"><expr pos:start="111:5" pos:end="111:15"><operator pos:start="111:5" pos:end="111:5">*</operator><name pos:start="111:6" pos:end="111:9">domp</name> <operator pos:start="111:11" pos:end="111:11">=</operator> <name pos:start="111:13" pos:end="111:15">dom</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:16"><expr pos:start="113:5" pos:end="113:15"><operator pos:start="113:5" pos:end="113:5">*</operator><name pos:start="113:6" pos:end="113:9">busp</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <name pos:start="113:13" pos:end="113:15">bus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:18"><expr pos:start="115:5" pos:end="115:17"><operator pos:start="115:5" pos:end="115:5">*</operator><name pos:start="115:6" pos:end="115:10">slotp</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <name pos:start="115:14" pos:end="115:17">slot</name></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="119:22"><if pos:start="117:5" pos:end="119:22">if <condition pos:start="117:8" pos:end="117:22">(<expr pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:13">funcp</name> <operator pos:start="117:15" pos:end="117:16">!=</operator> <name pos:start="117:18" pos:end="117:21">NULL</name></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:22"><block_content pos:start="119:9" pos:end="119:22">

        <expr_stmt pos:start="119:9" pos:end="119:22"><expr pos:start="119:9" pos:end="119:21"><operator pos:start="119:9" pos:end="119:9">*</operator><name pos:start="119:10" pos:end="119:14">funcp</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <name pos:start="119:18" pos:end="119:21">func</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
