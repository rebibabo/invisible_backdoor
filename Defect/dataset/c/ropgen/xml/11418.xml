<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11418.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">kvmppc_reset_htab</name><parameter_list pos:start="1:22" pos:end="1:37">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:25"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:36">shift_hint</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:18">shift</name> <init pos:start="5:20" pos:end="5:31">= <expr pos:start="5:22" pos:end="5:31"><name pos:start="5:22" pos:end="5:31">shift_hint</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:23">(<expr pos:start="9:9" pos:end="9:22"><operator pos:start="9:9" pos:end="9:9">!</operator><call pos:start="9:10" pos:end="9:22"><name pos:start="9:10" pos:end="9:20">kvm_enabled</name><argument_list pos:start="9:21" pos:end="9:22">()</argument_list></call></expr>)</condition> <block pos:start="9:25" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:17">

        <comment type="block" pos:start="11:9" pos:end="11:65">/* Full emulation, tell caller to allocate htab itself */</comment>

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="43:5"><if pos:start="17:5" pos:end="43:5">if <condition pos:start="17:8" pos:end="17:63">(<expr pos:start="17:9" pos:end="17:62"><call pos:start="17:9" pos:end="17:62"><name pos:start="17:9" pos:end="17:27">kvm_check_extension</name><argument_list pos:start="17:28" pos:end="17:62">(<argument pos:start="17:29" pos:end="17:37"><expr pos:start="17:29" pos:end="17:37"><name pos:start="17:29" pos:end="17:37">kvm_state</name></expr></argument>, <argument pos:start="17:40" pos:end="17:61"><expr pos:start="17:40" pos:end="17:61"><name pos:start="17:40" pos:end="17:61">KVM_CAP_PPC_ALLOC_HTAB</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:65" pos:end="43:5">{<block_content pos:start="19:9" pos:end="41:21">

        <decl_stmt pos:start="19:9" pos:end="19:16"><decl pos:start="19:9" pos:end="19:15"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:15">ret</name></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:69"><expr pos:start="21:9" pos:end="21:68"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:68"><name pos:start="21:15" pos:end="21:26">kvm_vm_ioctl</name><argument_list pos:start="21:27" pos:end="21:68">(<argument pos:start="21:28" pos:end="21:36"><expr pos:start="21:28" pos:end="21:36"><name pos:start="21:28" pos:end="21:36">kvm_state</name></expr></argument>, <argument pos:start="21:39" pos:end="21:59"><expr pos:start="21:39" pos:end="21:59"><name pos:start="21:39" pos:end="21:59">KVM_PPC_ALLOCATE_HTAB</name></expr></argument>, <argument pos:start="21:62" pos:end="21:67"><expr pos:start="21:62" pos:end="21:67"><operator pos:start="21:62" pos:end="21:62">&amp;</operator><name pos:start="21:63" pos:end="21:67">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="39:9"><if pos:start="23:9" pos:end="35:9">if <condition pos:start="23:12" pos:end="23:27">(<expr pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:15">ret</name> <operator pos:start="23:17" pos:end="23:18">==</operator> <operator pos:start="23:20" pos:end="23:20">-</operator><name pos:start="23:21" pos:end="23:26">ENOTTY</name></expr>)</condition> <block pos:start="23:29" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:21">

            <comment type="block" pos:start="25:13" pos:end="31:33">/* At least some versions of PR KVM advertise the

             * capability, but don't implement the ioctl().  Oops.

             * Return 0 so that we allocate the htab in qemu, as is

             * correct for PR. */</comment>

            <return pos:start="33:13" pos:end="33:21">return <expr pos:start="33:20" pos:end="33:20"><literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="39:9">else if <condition pos:start="35:19" pos:end="35:27">(<expr pos:start="35:20" pos:end="35:26"><name pos:start="35:20" pos:end="35:22">ret</name> <operator pos:start="35:24" pos:end="35:24">&lt;</operator> <literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr>)</condition> <block pos:start="35:29" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:23">

            <return pos:start="37:13" pos:end="37:23">return <expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="41:9" pos:end="41:21">return <expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">shift</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="57:16">/* We have a kernel that predates the htab reset calls.  For PR

     * KVM, we need to allocate the htab ourselves, for an HV KVM of

     * this era, it has allocated a 16MB fixed size hash table

     * already.  Kernels of this era have the GET_PVINFO capability

     * only on PR, so we use this hack to determine the right

     * answer */</comment>

    <if_stmt pos:start="59:5" pos:end="71:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:63">(<expr pos:start="59:9" pos:end="59:62"><call pos:start="59:9" pos:end="59:62"><name pos:start="59:9" pos:end="59:27">kvm_check_extension</name><argument_list pos:start="59:28" pos:end="59:62">(<argument pos:start="59:29" pos:end="59:37"><expr pos:start="59:29" pos:end="59:37"><name pos:start="59:29" pos:end="59:37">kvm_state</name></expr></argument>, <argument pos:start="59:40" pos:end="59:61"><expr pos:start="59:40" pos:end="59:61"><name pos:start="59:40" pos:end="59:61">KVM_CAP_PPC_GET_PVINFO</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:65" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:17">

        <comment type="block" pos:start="61:9" pos:end="61:47">/* PR - tell caller to allocate htab */</comment>

        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="71:5">else <block pos:start="65:12" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:18">

        <comment type="block" pos:start="67:9" pos:end="67:52">/* HV - assume 16MB kernel allocated htab */</comment>

        <return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><literal type="number" pos:start="69:16" pos:end="69:17">24</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
