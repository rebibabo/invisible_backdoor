<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19714.c" pos:tabs="8"><function pos:start="1:1" pos:end="367:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">vfio_connect_container</name><parameter_list pos:start="1:34" pos:end="3:47">(<parameter pos:start="1:35" pos:end="1:50"><decl pos:start="1:35" pos:end="1:50"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:43">VFIOGroup</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">group</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:68"><decl pos:start="1:53" pos:end="1:68"><type pos:start="1:53" pos:end="1:68"><name pos:start="1:53" pos:end="1:64">AddressSpace</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">as</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:39">Error</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="367:15">{<block_content pos:start="7:5" pos:end="367:15">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">VFIOContainer</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">container</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:15">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">VFIOAddressSpace</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:27">space</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:9">space</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <call pos:start="15:13" pos:end="15:38"><name pos:start="15:13" pos:end="15:34">vfio_get_address_space</name><argument_list pos:start="15:35" pos:end="15:38">(<argument pos:start="15:36" pos:end="15:37"><expr pos:start="15:36" pos:end="15:37"><name pos:start="15:36" pos:end="15:37">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="19:5" pos:end="19:54"><name pos:start="19:5" pos:end="19:17">QLIST_FOREACH</name><argument_list pos:start="19:18" pos:end="19:54">(<argument pos:start="19:19" pos:end="19:27">container</argument>, <argument pos:start="19:30" pos:end="19:47">&amp;space-&gt;containers</argument>, <argument pos:start="19:50" pos:end="19:53">next</argument>)</argument_list></macro> <block pos:start="19:56" pos:end="367:15">{<block_content pos:start="21:9" pos:end="367:15">

        <if_stmt pos:start="21:9" pos:end="367:15"><if pos:start="21:9" pos:end="367:15">if <condition pos:start="21:12" pos:end="21:72">(<expr pos:start="21:13" pos:end="21:71"><operator pos:start="21:13" pos:end="21:13">!</operator><call pos:start="21:14" pos:end="21:71"><name pos:start="21:14" pos:end="21:18">ioctl</name><argument_list pos:start="21:19" pos:end="21:71">(<argument pos:start="21:20" pos:end="21:28"><expr pos:start="21:20" pos:end="21:28"><name pos:start="21:20" pos:end="21:28"><name pos:start="21:20" pos:end="21:24">group</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:28">fd</name></name></expr></argument>, <argument pos:start="21:31" pos:end="21:54"><expr pos:start="21:31" pos:end="21:54"><name pos:start="21:31" pos:end="21:54">VFIO_GROUP_SET_CONTAINER</name></expr></argument>, <argument pos:start="21:57" pos:end="21:70"><expr pos:start="21:57" pos:end="21:70"><operator pos:start="21:57" pos:end="21:57">&amp;</operator><name pos:start="21:58" pos:end="21:70"><name pos:start="21:58" pos:end="21:66">container</name><operator pos:start="21:67" pos:end="21:68">-&gt;</operator><name pos:start="21:69" pos:end="21:70">fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:74" pos:end="367:15">{<block_content pos:start="23:13" pos:end="367:15">

            <expr_stmt pos:start="23:13" pos:end="23:41"><expr pos:start="23:13" pos:end="23:40"><name pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:17">group</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:28">container</name></name> <operator pos:start="23:30" pos:end="23:30">=</operator> <name pos:start="23:32" pos:end="23:40">container</name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:77"><expr pos:start="25:13" pos:end="25:76"><call pos:start="25:13" pos:end="25:76"><name pos:start="25:13" pos:end="25:29">QLIST_INSERT_HEAD</name><argument_list pos:start="25:30" pos:end="25:76">(<argument pos:start="25:31" pos:end="25:52"><expr pos:start="25:31" pos:end="25:52"><operator pos:start="25:31" pos:end="25:31">&amp;</operator><name pos:start="25:32" pos:end="25:52"><name pos:start="25:32" pos:end="25:40">container</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:52">group_list</name></name></expr></argument>, <argument pos:start="25:55" pos:end="25:59"><expr pos:start="25:55" pos:end="25:59"><name pos:start="25:55" pos:end="25:59">group</name></expr></argument>, <argument pos:start="25:62" pos:end="25:75"><expr pos:start="25:62" pos:end="25:75"><name pos:start="25:62" pos:end="25:75">container_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:45"><expr pos:start="27:13" pos:end="27:44"><call pos:start="27:13" pos:end="27:44"><name pos:start="27:13" pos:end="27:37">vfio_kvm_device_add_group</name><argument_list pos:start="27:38" pos:end="27:44">(<argument pos:start="27:39" pos:end="27:43"><expr pos:start="27:39" pos:end="27:43"><name pos:start="27:39" pos:end="27:43">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="29:13" pos:end="29:21">return <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</return>





    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:6">fd</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <call pos:start="35:10" pos:end="35:44"><name pos:start="35:10" pos:end="35:18">qemu_open</name><argument_list pos:start="35:19" pos:end="35:44">(<argument pos:start="35:20" pos:end="35:35"><expr pos:start="35:20" pos:end="35:35"><literal type="string" pos:start="35:20" pos:end="35:35">"/dev/vfio/vfio"</literal></expr></argument>, <argument pos:start="35:38" pos:end="35:43"><expr pos:start="35:38" pos:end="35:43"><name pos:start="35:38" pos:end="35:43">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="367:15"><if pos:start="37:5" pos:end="367:15">if <condition pos:start="37:8" pos:end="37:15">(<expr pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:10">fd</name> <operator pos:start="37:12" pos:end="37:12">&lt;</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr>)</condition> <block pos:start="37:17" pos:end="367:15">{<block_content pos:start="39:9" pos:end="367:15">

        <expr_stmt pos:start="39:9" pos:end="39:71"><expr pos:start="39:9" pos:end="39:70"><call pos:start="39:9" pos:end="39:70"><name pos:start="39:9" pos:end="39:24">error_setg_errno</name><argument_list pos:start="39:25" pos:end="39:70">(<argument pos:start="39:26" pos:end="39:29"><expr pos:start="39:26" pos:end="39:29"><name pos:start="39:26" pos:end="39:29">errp</name></expr></argument>, <argument pos:start="39:32" pos:end="39:36"><expr pos:start="39:32" pos:end="39:36"><name pos:start="39:32" pos:end="39:36">errno</name></expr></argument>, <argument pos:start="39:39" pos:end="39:69"><expr pos:start="39:39" pos:end="39:69"><literal type="string" pos:start="39:39" pos:end="39:69">"failed to open /dev/vfio/vfio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:21"><expr pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">-</operator><name pos:start="41:16" pos:end="41:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:28">goto <name pos:start="43:14" pos:end="43:27">put_space_exit</name>;</goto>




    <expr_stmt pos:start="48:5" pos:end="48:42"><expr pos:start="48:5" pos:end="48:41"><name pos:start="48:5" pos:end="48:7">ret</name> <operator pos:start="48:9" pos:end="48:9">=</operator> <call pos:start="48:11" pos:end="48:41"><name pos:start="48:11" pos:end="48:15">ioctl</name><argument_list pos:start="48:16" pos:end="48:41">(<argument pos:start="48:17" pos:end="48:18"><expr pos:start="48:17" pos:end="48:18"><name pos:start="48:17" pos:end="48:18">fd</name></expr></argument>, <argument pos:start="48:21" pos:end="48:40"><expr pos:start="48:21" pos:end="48:40"><name pos:start="48:21" pos:end="48:40">VFIO_GET_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="50:5" pos:end="367:15"><if pos:start="50:5" pos:end="367:15">if <condition pos:start="50:8" pos:end="50:32">(<expr pos:start="50:9" pos:end="50:31"><name pos:start="50:9" pos:end="50:11">ret</name> <operator pos:start="50:13" pos:end="50:14">!=</operator> <name pos:start="50:16" pos:end="50:31">VFIO_API_VERSION</name></expr>)</condition> <block pos:start="50:34" pos:end="367:15">{<block_content pos:start="52:9" pos:end="367:15">

        <expr_stmt pos:start="52:9" pos:end="54:66"><expr pos:start="52:9" pos:end="54:65"><call pos:start="52:9" pos:end="54:65"><name pos:start="52:9" pos:end="52:18">error_setg</name><argument_list pos:start="52:19" pos:end="54:65">(<argument pos:start="52:20" pos:end="52:23"><expr pos:start="52:20" pos:end="52:23"><name pos:start="52:20" pos:end="52:23">errp</name></expr></argument>, <argument pos:start="52:26" pos:end="54:41"><expr pos:start="52:26" pos:end="54:41"><literal type="string" pos:start="52:26" pos:end="52:55">"supported vfio version: %d, "</literal>

                   <literal type="string" pos:start="54:20" pos:end="54:41">"reported version: %d"</literal></expr></argument>, <argument pos:start="54:44" pos:end="54:59"><expr pos:start="54:44" pos:end="54:59"><name pos:start="54:44" pos:end="54:59">VFIO_API_VERSION</name></expr></argument>, <argument pos:start="54:62" pos:end="54:64"><expr pos:start="54:62" pos:end="54:64"><name pos:start="54:62" pos:end="54:64">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="56:9" pos:end="56:22"><expr pos:start="56:9" pos:end="56:21"><name pos:start="56:9" pos:end="56:11">ret</name> <operator pos:start="56:13" pos:end="56:13">=</operator> <operator pos:start="56:15" pos:end="56:15">-</operator><name pos:start="56:16" pos:end="56:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="58:9" pos:end="58:27">goto <name pos:start="58:14" pos:end="58:26">close_fd_exit</name>;</goto>




    <expr_stmt pos:start="63:5" pos:end="63:46"><expr pos:start="63:5" pos:end="63:45"><name pos:start="63:5" pos:end="63:13">container</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:45"><name pos:start="63:17" pos:end="63:25">g_malloc0</name><argument_list pos:start="63:26" pos:end="63:45">(<argument pos:start="63:27" pos:end="63:44"><expr pos:start="63:27" pos:end="63:44"><sizeof pos:start="63:27" pos:end="63:44">sizeof<argument_list pos:start="63:33" pos:end="63:44">(<argument pos:start="63:34" pos:end="63:43"><expr pos:start="63:34" pos:end="63:43"><operator pos:start="63:34" pos:end="63:34">*</operator><name pos:start="63:35" pos:end="63:43">container</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:29"><expr pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:13">container</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:20">space</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:28">space</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:23"><expr pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:17"><name pos:start="67:5" pos:end="67:13">container</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:17">fd</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:22">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:40"><expr pos:start="69:5" pos:end="69:39"><call pos:start="69:5" pos:end="69:39"><name pos:start="69:5" pos:end="69:14">QLIST_INIT</name><argument_list pos:start="69:15" pos:end="69:39">(<argument pos:start="69:16" pos:end="69:38"><expr pos:start="69:16" pos:end="69:38"><operator pos:start="69:16" pos:end="69:16">&amp;</operator><name pos:start="69:17" pos:end="69:38"><name pos:start="69:17" pos:end="69:25">container</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:38">giommu_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:41"><expr pos:start="71:5" pos:end="71:40"><call pos:start="71:5" pos:end="71:40"><name pos:start="71:5" pos:end="71:14">QLIST_INIT</name><argument_list pos:start="71:15" pos:end="71:40">(<argument pos:start="71:16" pos:end="71:39"><expr pos:start="71:16" pos:end="71:39"><operator pos:start="71:16" pos:end="71:16">&amp;</operator><name pos:start="71:17" pos:end="71:39"><name pos:start="71:17" pos:end="71:25">container</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:39">hostwin_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="367:15"><if pos:start="73:5" pos:end="367:15">if <condition pos:start="73:8" pos:end="75:60">(<expr pos:start="73:9" pos:end="75:59"><call pos:start="73:9" pos:end="73:57"><name pos:start="73:9" pos:end="73:13">ioctl</name><argument_list pos:start="73:14" pos:end="73:57">(<argument pos:start="73:15" pos:end="73:16"><expr pos:start="73:15" pos:end="73:16"><name pos:start="73:15" pos:end="73:16">fd</name></expr></argument>, <argument pos:start="73:19" pos:end="73:38"><expr pos:start="73:19" pos:end="73:38"><name pos:start="73:19" pos:end="73:38">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="73:41" pos:end="73:56"><expr pos:start="73:41" pos:end="73:56"><name pos:start="73:41" pos:end="73:56">VFIO_TYPE1_IOMMU</name></expr></argument>)</argument_list></call> <operator pos:start="73:59" pos:end="73:60">||</operator>

        <call pos:start="75:9" pos:end="75:59"><name pos:start="75:9" pos:end="75:13">ioctl</name><argument_list pos:start="75:14" pos:end="75:59">(<argument pos:start="75:15" pos:end="75:16"><expr pos:start="75:15" pos:end="75:16"><name pos:start="75:15" pos:end="75:16">fd</name></expr></argument>, <argument pos:start="75:19" pos:end="75:38"><expr pos:start="75:19" pos:end="75:38"><name pos:start="75:19" pos:end="75:38">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="75:41" pos:end="75:58"><expr pos:start="75:41" pos:end="75:58"><name pos:start="75:41" pos:end="75:58">VFIO_TYPE1v2_IOMMU</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:62" pos:end="367:15">{<block_content pos:start="77:9" pos:end="367:15">

        <decl_stmt pos:start="77:9" pos:end="77:72"><decl pos:start="77:9" pos:end="77:71"><type pos:start="77:9" pos:end="77:12"><name pos:start="77:9" pos:end="77:12">bool</name></type> <name pos:start="77:14" pos:end="77:15">v2</name> <init pos:start="77:17" pos:end="77:71">= <expr pos:start="77:19" pos:end="77:71"><operator pos:start="77:19" pos:end="77:19">!</operator><operator pos:start="77:20" pos:end="77:20">!</operator><call pos:start="77:21" pos:end="77:71"><name pos:start="77:21" pos:end="77:25">ioctl</name><argument_list pos:start="77:26" pos:end="77:71">(<argument pos:start="77:27" pos:end="77:28"><expr pos:start="77:27" pos:end="77:28"><name pos:start="77:27" pos:end="77:28">fd</name></expr></argument>, <argument pos:start="77:31" pos:end="77:50"><expr pos:start="77:31" pos:end="77:50"><name pos:start="77:31" pos:end="77:50">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="77:53" pos:end="77:70"><expr pos:start="77:53" pos:end="77:70"><name pos:start="77:53" pos:end="77:70">VFIO_TYPE1v2_IOMMU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:42"><decl pos:start="79:9" pos:end="79:41"><type pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:14">struct</name> <name pos:start="79:16" pos:end="79:36">vfio_iommu_type1_info</name></name></type> <name pos:start="79:38" pos:end="79:41">info</name></decl>;</decl_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:62"><expr pos:start="83:9" pos:end="83:61"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:61"><name pos:start="83:15" pos:end="83:19">ioctl</name><argument_list pos:start="83:20" pos:end="83:61">(<argument pos:start="83:21" pos:end="83:29"><expr pos:start="83:21" pos:end="83:29"><name pos:start="83:21" pos:end="83:29"><name pos:start="83:21" pos:end="83:25">group</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:29">fd</name></name></expr></argument>, <argument pos:start="83:32" pos:end="83:55"><expr pos:start="83:32" pos:end="83:55"><name pos:start="83:32" pos:end="83:55">VFIO_GROUP_SET_CONTAINER</name></expr></argument>, <argument pos:start="83:58" pos:end="83:60"><expr pos:start="83:58" pos:end="83:60"><operator pos:start="83:58" pos:end="83:58">&amp;</operator><name pos:start="83:59" pos:end="83:60">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt pos:start="86:13" pos:end="86:75"><expr pos:start="86:13" pos:end="86:74"><call pos:start="86:13" pos:end="86:74"><name pos:start="86:13" pos:end="86:28">error_setg_errno</name><argument_list pos:start="86:29" pos:end="86:74">(<argument pos:start="86:30" pos:end="86:33"><expr pos:start="86:30" pos:end="86:33"><name pos:start="86:30" pos:end="86:33">errp</name></expr></argument>, <argument pos:start="86:36" pos:end="86:40"><expr pos:start="86:36" pos:end="86:40"><name pos:start="86:36" pos:end="86:40">errno</name></expr></argument>, <argument pos:start="86:43" pos:end="86:73"><expr pos:start="86:43" pos:end="86:73"><literal type="string" pos:start="86:43" pos:end="86:73">"failed to set group container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="88:13" pos:end="88:25"><expr pos:start="88:13" pos:end="88:24"><name pos:start="88:13" pos:end="88:15">ret</name> <operator pos:start="88:17" pos:end="88:17">=</operator> <operator pos:start="88:19" pos:end="88:19">-</operator><name pos:start="88:20" pos:end="88:24">errno</name></expr>;</expr_stmt>

            <goto pos:start="90:13" pos:end="90:37">goto <name pos:start="90:18" pos:end="90:36">free_container_exit</name>;</goto>




        <expr_stmt pos:start="95:9" pos:end="95:75"><expr pos:start="95:9" pos:end="95:74"><name pos:start="95:9" pos:end="95:29"><name pos:start="95:9" pos:end="95:17">container</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:29">iommu_type</name></name> <operator pos:start="95:31" pos:end="95:31">=</operator> <ternary pos:start="95:33" pos:end="95:74"><condition pos:start="95:33" pos:end="95:36"><expr pos:start="95:33" pos:end="95:34"><name pos:start="95:33" pos:end="95:34">v2</name></expr> ?</condition><then pos:start="95:38" pos:end="95:55"> <expr pos:start="95:38" pos:end="95:55"><name pos:start="95:38" pos:end="95:55">VFIO_TYPE1v2_IOMMU</name></expr> </then><else pos:start="95:57" pos:end="95:74">: <expr pos:start="95:59" pos:end="95:74"><name pos:start="95:59" pos:end="95:74">VFIO_TYPE1_IOMMU</name></expr></else></ternary></expr>;</expr_stmt>



            <expr_stmt pos:start="99:13" pos:end="99:79"><expr pos:start="99:13" pos:end="99:78"><call pos:start="99:13" pos:end="99:78"><name pos:start="99:13" pos:end="99:28">error_setg_errno</name><argument_list pos:start="99:29" pos:end="99:78">(<argument pos:start="99:30" pos:end="99:33"><expr pos:start="99:30" pos:end="99:33"><name pos:start="99:30" pos:end="99:33">errp</name></expr></argument>, <argument pos:start="99:36" pos:end="99:40"><expr pos:start="99:36" pos:end="99:40"><name pos:start="99:36" pos:end="99:40">errno</name></expr></argument>, <argument pos:start="99:43" pos:end="99:77"><expr pos:start="99:43" pos:end="99:77"><literal type="string" pos:start="99:43" pos:end="99:77">"failed to set iommu for container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:25"><expr pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <operator pos:start="101:19" pos:end="101:19">-</operator><name pos:start="101:20" pos:end="101:24">errno</name></expr>;</expr_stmt>

            <goto pos:start="103:13" pos:end="103:37">goto <name pos:start="103:18" pos:end="103:36">free_container_exit</name>;</goto>




        <comment type="block" pos:start="108:9" pos:end="120:11">/*

         * FIXME: This assumes that a Type1 IOMMU can map any 64-bit

         * IOVA whatsoever.  That's not actually true, but the current

         * kernel interface doesn't tell us what it can map, and the

         * existing Type1 IOMMUs generally support any IOVA we're

         * going to actually try in practice.

         */</comment>

        <expr_stmt pos:start="122:9" pos:end="122:34"><expr pos:start="122:9" pos:end="122:33"><name pos:start="122:9" pos:end="122:18"><name pos:start="122:9" pos:end="122:12">info</name><operator pos:start="122:13" pos:end="122:13">.</operator><name pos:start="122:14" pos:end="122:18">argsz</name></name> <operator pos:start="122:20" pos:end="122:20">=</operator> <sizeof pos:start="122:22" pos:end="122:33">sizeof<argument_list pos:start="122:28" pos:end="122:33">(<argument pos:start="122:29" pos:end="122:32"><expr pos:start="122:29" pos:end="122:32"><name pos:start="122:29" pos:end="122:32">info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="124:9" pos:end="124:52"><expr pos:start="124:9" pos:end="124:51"><name pos:start="124:9" pos:end="124:11">ret</name> <operator pos:start="124:13" pos:end="124:13">=</operator> <call pos:start="124:15" pos:end="124:51"><name pos:start="124:15" pos:end="124:19">ioctl</name><argument_list pos:start="124:20" pos:end="124:51">(<argument pos:start="124:21" pos:end="124:22"><expr pos:start="124:21" pos:end="124:22"><name pos:start="124:21" pos:end="124:22">fd</name></expr></argument>, <argument pos:start="124:25" pos:end="124:43"><expr pos:start="124:25" pos:end="124:43"><name pos:start="124:25" pos:end="124:43">VFIO_IOMMU_GET_INFO</name></expr></argument>, <argument pos:start="124:46" pos:end="124:50"><expr pos:start="124:46" pos:end="124:50"><operator pos:start="124:46" pos:end="124:46">&amp;</operator><name pos:start="124:47" pos:end="124:50">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="126:9" pos:end="126:27">/* Ignore errors */</comment>

        <if_stmt pos:start="128:9" pos:end="367:15"><if pos:start="128:9" pos:end="137:5">if <condition pos:start="128:12" pos:end="128:59">(<expr pos:start="128:13" pos:end="128:58"><name pos:start="128:13" pos:end="128:15">ret</name> <operator pos:start="128:17" pos:end="128:18">||</operator> <operator pos:start="128:20" pos:end="128:20">!</operator><operator pos:start="128:21" pos:end="128:21">(</operator><name pos:start="128:22" pos:end="128:31"><name pos:start="128:22" pos:end="128:25">info</name><operator pos:start="128:26" pos:end="128:26">.</operator><name pos:start="128:27" pos:end="128:31">flags</name></name> <operator pos:start="128:33" pos:end="128:33">&amp;</operator> <name pos:start="128:35" pos:end="128:57">VFIO_IOMMU_INFO_PGSIZES</name><operator pos:start="128:58" pos:end="128:58">)</operator></expr>)</condition> <block pos:start="128:61" pos:end="137:5">{<block_content pos:start="132:13" pos:end="135:71">

            <comment type="block" pos:start="130:13" pos:end="130:42">/* Assume 4k IOVA page size */</comment>

            <expr_stmt pos:start="132:13" pos:end="132:37"><expr pos:start="132:13" pos:end="132:36"><name pos:start="132:13" pos:end="132:29"><name pos:start="132:13" pos:end="132:16">info</name><operator pos:start="132:17" pos:end="132:17">.</operator><name pos:start="132:18" pos:end="132:29">iova_pgsizes</name></name> <operator pos:start="132:31" pos:end="132:31">=</operator> <literal type="number" pos:start="132:33" pos:end="132:36">4096</literal></expr>;</expr_stmt>


        <expr_stmt pos:start="135:9" pos:end="135:71"><expr pos:start="135:9" pos:end="135:70"><call pos:start="135:9" pos:end="135:70"><name pos:start="135:9" pos:end="135:25">vfio_host_win_add</name><argument_list pos:start="135:26" pos:end="135:70">(<argument pos:start="135:27" pos:end="135:35"><expr pos:start="135:27" pos:end="135:35"><name pos:start="135:27" pos:end="135:35">container</name></expr></argument>, <argument pos:start="135:38" pos:end="135:38"><expr pos:start="135:38" pos:end="135:38"><literal type="number" pos:start="135:38" pos:end="135:38">0</literal></expr></argument>, <argument pos:start="135:41" pos:end="135:50"><expr pos:start="135:41" pos:end="135:50"><operator pos:start="135:41" pos:end="135:41">(</operator><name pos:start="135:42" pos:end="135:47">hwaddr</name><operator pos:start="135:48" pos:end="135:48">)</operator><operator pos:start="135:49" pos:end="135:49">-</operator><literal type="number" pos:start="135:50" pos:end="135:50">1</literal></expr></argument>, <argument pos:start="135:53" pos:end="135:69"><expr pos:start="135:53" pos:end="135:69"><name pos:start="135:53" pos:end="135:69"><name pos:start="135:53" pos:end="135:56">info</name><operator pos:start="135:57" pos:end="135:57">.</operator><name pos:start="135:58" pos:end="135:69">iova_pgsizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="137:7" pos:end="367:15">else if <condition pos:start="137:15" pos:end="139:72">(<expr pos:start="137:16" pos:end="139:71"><call pos:start="137:16" pos:end="137:68"><name pos:start="137:16" pos:end="137:20">ioctl</name><argument_list pos:start="137:21" pos:end="137:68">(<argument pos:start="137:22" pos:end="137:23"><expr pos:start="137:22" pos:end="137:23"><name pos:start="137:22" pos:end="137:23">fd</name></expr></argument>, <argument pos:start="137:26" pos:end="137:45"><expr pos:start="137:26" pos:end="137:45"><name pos:start="137:26" pos:end="137:45">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="137:48" pos:end="137:67"><expr pos:start="137:48" pos:end="137:67"><name pos:start="137:48" pos:end="137:67">VFIO_SPAPR_TCE_IOMMU</name></expr></argument>)</argument_list></call> <operator pos:start="137:70" pos:end="137:71">||</operator>

               <call pos:start="139:16" pos:end="139:71"><name pos:start="139:16" pos:end="139:20">ioctl</name><argument_list pos:start="139:21" pos:end="139:71">(<argument pos:start="139:22" pos:end="139:23"><expr pos:start="139:22" pos:end="139:23"><name pos:start="139:22" pos:end="139:23">fd</name></expr></argument>, <argument pos:start="139:26" pos:end="139:45"><expr pos:start="139:26" pos:end="139:45"><name pos:start="139:26" pos:end="139:45">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="139:48" pos:end="139:70"><expr pos:start="139:48" pos:end="139:70"><name pos:start="139:48" pos:end="139:70">VFIO_SPAPR_TCE_v2_IOMMU</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:74" pos:end="367:15">{<block_content pos:start="141:9" pos:end="367:15">

        <decl_stmt pos:start="141:9" pos:end="141:46"><decl pos:start="141:9" pos:end="141:45"><type pos:start="141:9" pos:end="141:40"><name pos:start="141:9" pos:end="141:40"><name pos:start="141:9" pos:end="141:14">struct</name> <name pos:start="141:16" pos:end="141:40">vfio_iommu_spapr_tce_info</name></name></type> <name pos:start="141:42" pos:end="141:45">info</name></decl>;</decl_stmt>

        <decl_stmt pos:start="143:9" pos:end="143:77"><decl pos:start="143:9" pos:end="143:76"><type pos:start="143:9" pos:end="143:12"><name pos:start="143:9" pos:end="143:12">bool</name></type> <name pos:start="143:14" pos:end="143:15">v2</name> <init pos:start="143:17" pos:end="143:76">= <expr pos:start="143:19" pos:end="143:76"><operator pos:start="143:19" pos:end="143:19">!</operator><operator pos:start="143:20" pos:end="143:20">!</operator><call pos:start="143:21" pos:end="143:76"><name pos:start="143:21" pos:end="143:25">ioctl</name><argument_list pos:start="143:26" pos:end="143:76">(<argument pos:start="143:27" pos:end="143:28"><expr pos:start="143:27" pos:end="143:28"><name pos:start="143:27" pos:end="143:28">fd</name></expr></argument>, <argument pos:start="143:31" pos:end="143:50"><expr pos:start="143:31" pos:end="143:50"><name pos:start="143:31" pos:end="143:50">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="143:53" pos:end="143:75"><expr pos:start="143:53" pos:end="143:75"><name pos:start="143:53" pos:end="143:75">VFIO_SPAPR_TCE_v2_IOMMU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="147:9" pos:end="147:62"><expr pos:start="147:9" pos:end="147:61"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:61"><name pos:start="147:15" pos:end="147:19">ioctl</name><argument_list pos:start="147:20" pos:end="147:61">(<argument pos:start="147:21" pos:end="147:29"><expr pos:start="147:21" pos:end="147:29"><name pos:start="147:21" pos:end="147:29"><name pos:start="147:21" pos:end="147:25">group</name><operator pos:start="147:26" pos:end="147:27">-&gt;</operator><name pos:start="147:28" pos:end="147:29">fd</name></name></expr></argument>, <argument pos:start="147:32" pos:end="147:55"><expr pos:start="147:32" pos:end="147:55"><name pos:start="147:32" pos:end="147:55">VFIO_GROUP_SET_CONTAINER</name></expr></argument>, <argument pos:start="147:58" pos:end="147:60"><expr pos:start="147:58" pos:end="147:60"><operator pos:start="147:58" pos:end="147:58">&amp;</operator><name pos:start="147:59" pos:end="147:60">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt pos:start="150:13" pos:end="150:75"><expr pos:start="150:13" pos:end="150:74"><call pos:start="150:13" pos:end="150:74"><name pos:start="150:13" pos:end="150:28">error_setg_errno</name><argument_list pos:start="150:29" pos:end="150:74">(<argument pos:start="150:30" pos:end="150:33"><expr pos:start="150:30" pos:end="150:33"><name pos:start="150:30" pos:end="150:33">errp</name></expr></argument>, <argument pos:start="150:36" pos:end="150:40"><expr pos:start="150:36" pos:end="150:40"><name pos:start="150:36" pos:end="150:40">errno</name></expr></argument>, <argument pos:start="150:43" pos:end="150:73"><expr pos:start="150:43" pos:end="150:73"><literal type="string" pos:start="150:43" pos:end="150:73">"failed to set group container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="152:13" pos:end="152:25"><expr pos:start="152:13" pos:end="152:24"><name pos:start="152:13" pos:end="152:15">ret</name> <operator pos:start="152:17" pos:end="152:17">=</operator> <operator pos:start="152:19" pos:end="152:19">-</operator><name pos:start="152:20" pos:end="152:24">errno</name></expr>;</expr_stmt>

            <goto pos:start="154:13" pos:end="154:37">goto <name pos:start="154:18" pos:end="154:36">free_container_exit</name>;</goto>


        <expr_stmt pos:start="157:9" pos:end="159:64"><expr pos:start="157:9" pos:end="159:63"><name pos:start="157:9" pos:end="157:29"><name pos:start="157:9" pos:end="157:17">container</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:29">iommu_type</name></name> <operator pos:start="157:31" pos:end="157:31">=</operator>

            <ternary pos:start="159:13" pos:end="159:63"><condition pos:start="159:13" pos:end="159:16"><expr pos:start="159:13" pos:end="159:14"><name pos:start="159:13" pos:end="159:14">v2</name></expr> ?</condition><then pos:start="159:18" pos:end="159:40"> <expr pos:start="159:18" pos:end="159:40"><name pos:start="159:18" pos:end="159:40">VFIO_SPAPR_TCE_v2_IOMMU</name></expr> </then><else pos:start="159:42" pos:end="159:63">: <expr pos:start="159:44" pos:end="159:63"><name pos:start="159:44" pos:end="159:63">VFIO_SPAPR_TCE_IOMMU</name></expr></else></ternary></expr>;</expr_stmt>








            <expr_stmt pos:start="168:13" pos:end="168:79"><expr pos:start="168:13" pos:end="168:78"><call pos:start="168:13" pos:end="168:78"><name pos:start="168:13" pos:end="168:28">error_setg_errno</name><argument_list pos:start="168:29" pos:end="168:78">(<argument pos:start="168:30" pos:end="168:33"><expr pos:start="168:30" pos:end="168:33"><name pos:start="168:30" pos:end="168:33">errp</name></expr></argument>, <argument pos:start="168:36" pos:end="168:40"><expr pos:start="168:36" pos:end="168:40"><name pos:start="168:36" pos:end="168:40">errno</name></expr></argument>, <argument pos:start="168:43" pos:end="168:77"><expr pos:start="168:43" pos:end="168:77"><literal type="string" pos:start="168:43" pos:end="168:77">"failed to set iommu for container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="170:13" pos:end="170:25"><expr pos:start="170:13" pos:end="170:24"><name pos:start="170:13" pos:end="170:15">ret</name> <operator pos:start="170:17" pos:end="170:17">=</operator> <operator pos:start="170:19" pos:end="170:19">-</operator><name pos:start="170:20" pos:end="170:24">errno</name></expr>;</expr_stmt>

            <goto pos:start="172:13" pos:end="172:37">goto <name pos:start="172:18" pos:end="172:36">free_container_exit</name>;</goto>




        <comment type="block" pos:start="177:9" pos:end="185:11">/*

         * The host kernel code implementing VFIO_IOMMU_DISABLE is called

         * when container fd is closed so we do not call it explicitly

         * in this file.

         */</comment>

        <if_stmt pos:start="187:9" pos:end="367:15"><if pos:start="187:9" pos:end="199:9">if <condition pos:start="187:12" pos:end="187:16">(<expr pos:start="187:13" pos:end="187:15"><operator pos:start="187:13" pos:end="187:13">!</operator><name pos:start="187:14" pos:end="187:15">v2</name></expr>)</condition> <block pos:start="187:18" pos:end="199:9">{<block_content pos:start="189:13" pos:end="196:41">

            <expr_stmt pos:start="189:13" pos:end="189:47"><expr pos:start="189:13" pos:end="189:46"><name pos:start="189:13" pos:end="189:15">ret</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:46"><name pos:start="189:19" pos:end="189:23">ioctl</name><argument_list pos:start="189:24" pos:end="189:46">(<argument pos:start="189:25" pos:end="189:26"><expr pos:start="189:25" pos:end="189:26"><name pos:start="189:25" pos:end="189:26">fd</name></expr></argument>, <argument pos:start="189:29" pos:end="189:45"><expr pos:start="189:29" pos:end="189:45"><name pos:start="189:29" pos:end="189:45">VFIO_IOMMU_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <expr_stmt pos:start="192:17" pos:end="192:76"><expr pos:start="192:17" pos:end="192:75"><call pos:start="192:17" pos:end="192:75"><name pos:start="192:17" pos:end="192:32">error_setg_errno</name><argument_list pos:start="192:33" pos:end="192:75">(<argument pos:start="192:34" pos:end="192:37"><expr pos:start="192:34" pos:end="192:37"><name pos:start="192:34" pos:end="192:37">errp</name></expr></argument>, <argument pos:start="192:40" pos:end="192:44"><expr pos:start="192:40" pos:end="192:44"><name pos:start="192:40" pos:end="192:44">errno</name></expr></argument>, <argument pos:start="192:47" pos:end="192:74"><expr pos:start="192:47" pos:end="192:74"><literal type="string" pos:start="192:47" pos:end="192:74">"failed to enable container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="194:17" pos:end="194:29"><expr pos:start="194:17" pos:end="194:28"><name pos:start="194:17" pos:end="194:19">ret</name> <operator pos:start="194:21" pos:end="194:21">=</operator> <operator pos:start="194:23" pos:end="194:23">-</operator><name pos:start="194:24" pos:end="194:28">errno</name></expr>;</expr_stmt>

                <goto pos:start="196:17" pos:end="196:41">goto <name pos:start="196:22" pos:end="196:40">free_container_exit</name>;</goto>


        </block_content>}</block></if> <else pos:start="199:11" pos:end="367:15">else <block pos:start="199:16" pos:end="367:15">{<block_content pos:start="201:13" pos:end="367:15">

            <expr_stmt pos:start="201:13" pos:end="201:62"><expr pos:start="201:13" pos:end="201:61"><name pos:start="201:13" pos:end="201:38"><name pos:start="201:13" pos:end="201:21">container</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:38">prereg_listener</name></name> <operator pos:start="201:40" pos:end="201:40">=</operator> <name pos:start="201:42" pos:end="201:61">vfio_prereg_listener</name></expr>;</expr_stmt>



            <expr_stmt pos:start="205:13" pos:end="207:60"><expr pos:start="205:13" pos:end="207:59"><call pos:start="205:13" pos:end="207:59"><name pos:start="205:13" pos:end="205:36">memory_listener_register</name><argument_list pos:start="205:37" pos:end="207:59">(<argument pos:start="205:38" pos:end="205:64"><expr pos:start="205:38" pos:end="205:64"><operator pos:start="205:38" pos:end="205:38">&amp;</operator><name pos:start="205:39" pos:end="205:64"><name pos:start="205:39" pos:end="205:47">container</name><operator pos:start="205:48" pos:end="205:49">-&gt;</operator><name pos:start="205:50" pos:end="205:64">prereg_listener</name></name></expr></argument>,

                                     <argument pos:start="207:38" pos:end="207:58"><expr pos:start="207:38" pos:end="207:58"><operator pos:start="207:38" pos:end="207:38">&amp;</operator><name pos:start="207:39" pos:end="207:58">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="209:13" pos:end="367:15"><if pos:start="209:13" pos:end="367:15">if <condition pos:start="209:16" pos:end="209:33">(<expr pos:start="209:17" pos:end="209:32"><name pos:start="209:17" pos:end="209:32"><name pos:start="209:17" pos:end="209:25">container</name><operator pos:start="209:26" pos:end="209:27">-&gt;</operator><name pos:start="209:28" pos:end="209:32">error</name></name></expr>)</condition> <block pos:start="209:35" pos:end="367:15">{<block_content pos:start="211:17" pos:end="367:15">

                <expr_stmt pos:start="211:17" pos:end="211:72"><expr pos:start="211:17" pos:end="211:71"><call pos:start="211:17" pos:end="211:71"><name pos:start="211:17" pos:end="211:42">memory_listener_unregister</name><argument_list pos:start="211:43" pos:end="211:71">(<argument pos:start="211:44" pos:end="211:70"><expr pos:start="211:44" pos:end="211:70"><operator pos:start="211:44" pos:end="211:44">&amp;</operator><name pos:start="211:45" pos:end="211:70"><name pos:start="211:45" pos:end="211:53">container</name><operator pos:start="211:54" pos:end="211:55">-&gt;</operator><name pos:start="211:56" pos:end="211:70">prereg_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:39"><expr pos:start="213:17" pos:end="213:38"><name pos:start="213:17" pos:end="213:19">ret</name> <operator pos:start="213:21" pos:end="213:21">=</operator> <name pos:start="213:23" pos:end="213:38"><name pos:start="213:23" pos:end="213:31">container</name><operator pos:start="213:32" pos:end="213:33">-&gt;</operator><name pos:start="213:34" pos:end="213:38">error</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="217:79"><expr pos:start="215:17" pos:end="217:78"><call pos:start="215:17" pos:end="217:78"><name pos:start="215:17" pos:end="215:26">error_setg</name><argument_list pos:start="215:27" pos:end="217:78">(<argument pos:start="215:28" pos:end="215:31"><expr pos:start="215:28" pos:end="215:31"><name pos:start="215:28" pos:end="215:31">errp</name></expr></argument>,

                    <argument pos:start="217:21" pos:end="217:77"><expr pos:start="217:21" pos:end="217:77"><literal type="string" pos:start="217:21" pos:end="217:77">"RAM memory listener initialization failed for container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="219:17" pos:end="219:41">goto <name pos:start="219:22" pos:end="219:40">free_container_exit</name>;</goto>





        <expr_stmt pos:start="225:9" pos:end="225:34"><expr pos:start="225:9" pos:end="225:33"><name pos:start="225:9" pos:end="225:18"><name pos:start="225:9" pos:end="225:12">info</name><operator pos:start="225:13" pos:end="225:13">.</operator><name pos:start="225:14" pos:end="225:18">argsz</name></name> <operator pos:start="225:20" pos:end="225:20">=</operator> <sizeof pos:start="225:22" pos:end="225:33">sizeof<argument_list pos:start="225:28" pos:end="225:33">(<argument pos:start="225:29" pos:end="225:32"><expr pos:start="225:29" pos:end="225:32"><name pos:start="225:29" pos:end="225:32">info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:62"><expr pos:start="227:9" pos:end="227:61"><name pos:start="227:9" pos:end="227:11">ret</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <call pos:start="227:15" pos:end="227:61"><name pos:start="227:15" pos:end="227:19">ioctl</name><argument_list pos:start="227:20" pos:end="227:61">(<argument pos:start="227:21" pos:end="227:22"><expr pos:start="227:21" pos:end="227:22"><name pos:start="227:21" pos:end="227:22">fd</name></expr></argument>, <argument pos:start="227:25" pos:end="227:53"><expr pos:start="227:25" pos:end="227:53"><name pos:start="227:25" pos:end="227:53">VFIO_IOMMU_SPAPR_TCE_GET_INFO</name></expr></argument>, <argument pos:start="227:56" pos:end="227:60"><expr pos:start="227:56" pos:end="227:60"><operator pos:start="227:56" pos:end="227:56">&amp;</operator><name pos:start="227:57" pos:end="227:60">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt pos:start="230:13" pos:end="232:69"><expr pos:start="230:13" pos:end="232:68"><call pos:start="230:13" pos:end="232:68"><name pos:start="230:13" pos:end="230:28">error_setg_errno</name><argument_list pos:start="230:29" pos:end="232:68">(<argument pos:start="230:30" pos:end="230:33"><expr pos:start="230:30" pos:end="230:33"><name pos:start="230:30" pos:end="230:33">errp</name></expr></argument>, <argument pos:start="230:36" pos:end="230:40"><expr pos:start="230:36" pos:end="230:40"><name pos:start="230:36" pos:end="230:40">errno</name></expr></argument>,

                             <argument pos:start="232:30" pos:end="232:67"><expr pos:start="232:30" pos:end="232:67"><literal type="string" pos:start="232:30" pos:end="232:67">"VFIO_IOMMU_SPAPR_TCE_GET_INFO failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="234:13" pos:end="234:25"><expr pos:start="234:13" pos:end="234:24"><name pos:start="234:13" pos:end="234:15">ret</name> <operator pos:start="234:17" pos:end="234:17">=</operator> <operator pos:start="234:19" pos:end="234:19">-</operator><name pos:start="234:20" pos:end="234:24">errno</name></expr>;</expr_stmt>

            <if_stmt pos:start="236:13" pos:end="367:15"><if pos:start="236:13" pos:end="367:15">if <condition pos:start="236:16" pos:end="236:19">(<expr pos:start="236:17" pos:end="236:18"><name pos:start="236:17" pos:end="236:18">v2</name></expr>)</condition> <block pos:start="236:21" pos:end="367:15">{<block_content pos:start="238:17" pos:end="367:15">

                <expr_stmt pos:start="238:17" pos:end="238:72"><expr pos:start="238:17" pos:end="238:71"><call pos:start="238:17" pos:end="238:71"><name pos:start="238:17" pos:end="238:42">memory_listener_unregister</name><argument_list pos:start="238:43" pos:end="238:71">(<argument pos:start="238:44" pos:end="238:70"><expr pos:start="238:44" pos:end="238:70"><operator pos:start="238:44" pos:end="238:44">&amp;</operator><name pos:start="238:45" pos:end="238:70"><name pos:start="238:45" pos:end="238:53">container</name><operator pos:start="238:54" pos:end="238:55">-&gt;</operator><name pos:start="238:56" pos:end="238:70">prereg_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <goto pos:start="241:13" pos:end="241:37">goto <name pos:start="241:18" pos:end="241:36">free_container_exit</name>;</goto>




        <if_stmt pos:start="246:9" pos:end="283:5"><if pos:start="246:9" pos:end="270:9">if <condition pos:start="246:12" pos:end="246:15">(<expr pos:start="246:13" pos:end="246:14"><name pos:start="246:13" pos:end="246:14">v2</name></expr>)</condition> <block pos:start="246:17" pos:end="270:9">{<block_content pos:start="260:13" pos:end="267:41">

            <comment type="block" pos:start="248:13" pos:end="258:15">/*

             * There is a default window in just created container.

             * To make region_add/del simpler, we better remove this

             * window now and let those iommu_listener callbacks

             * create/remove them when needed.

             */</comment>

            <expr_stmt pos:start="260:13" pos:end="260:79"><expr pos:start="260:13" pos:end="260:78"><name pos:start="260:13" pos:end="260:15">ret</name> <operator pos:start="260:17" pos:end="260:17">=</operator> <call pos:start="260:19" pos:end="260:78"><name pos:start="260:19" pos:end="260:42">vfio_spapr_remove_window</name><argument_list pos:start="260:43" pos:end="260:78">(<argument pos:start="260:44" pos:end="260:52"><expr pos:start="260:44" pos:end="260:52"><name pos:start="260:44" pos:end="260:52">container</name></expr></argument>, <argument pos:start="260:55" pos:end="260:77"><expr pos:start="260:55" pos:end="260:77"><name pos:start="260:55" pos:end="260:77"><name pos:start="260:55" pos:end="260:58">info</name><operator pos:start="260:59" pos:end="260:59">.</operator><name pos:start="260:60" pos:end="260:77">dma32_window_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <expr_stmt pos:start="263:17" pos:end="265:69"><expr pos:start="263:17" pos:end="265:68"><call pos:start="263:17" pos:end="265:68"><name pos:start="263:17" pos:end="263:32">error_setg_errno</name><argument_list pos:start="263:33" pos:end="265:68">(<argument pos:start="263:34" pos:end="263:37"><expr pos:start="263:34" pos:end="263:37"><name pos:start="263:34" pos:end="263:37">errp</name></expr></argument>, <argument pos:start="263:40" pos:end="263:43"><expr pos:start="263:40" pos:end="263:43"><operator pos:start="263:40" pos:end="263:40">-</operator><name pos:start="263:41" pos:end="263:43">ret</name></expr></argument>,

                                 <argument pos:start="265:34" pos:end="265:67"><expr pos:start="265:34" pos:end="265:67"><literal type="string" pos:start="265:34" pos:end="265:67">"failed to remove existing window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="267:17" pos:end="267:41">goto <name pos:start="267:22" pos:end="267:40">free_container_exit</name>;</goto>


        </block_content>}</block></if> <else pos:start="270:11" pos:end="283:5">else <block pos:start="270:16" pos:end="283:5">{<block_content pos:start="274:13" pos:end="280:38">

            <comment type="block" pos:start="272:13" pos:end="272:49">/* The default table uses 4K pages */</comment>

            <expr_stmt pos:start="274:13" pos:end="280:38"><expr pos:start="274:13" pos:end="280:37"><call pos:start="274:13" pos:end="280:37"><name pos:start="274:13" pos:end="274:29">vfio_host_win_add</name><argument_list pos:start="274:30" pos:end="280:37">(<argument pos:start="274:31" pos:end="274:39"><expr pos:start="274:31" pos:end="274:39"><name pos:start="274:31" pos:end="274:39">container</name></expr></argument>, <argument pos:start="274:42" pos:end="274:64"><expr pos:start="274:42" pos:end="274:64"><name pos:start="274:42" pos:end="274:64"><name pos:start="274:42" pos:end="274:45">info</name><operator pos:start="274:46" pos:end="274:46">.</operator><name pos:start="274:47" pos:end="274:64">dma32_window_start</name></name></expr></argument>,

                              <argument pos:start="276:31" pos:end="278:56"><expr pos:start="276:31" pos:end="278:56"><name pos:start="276:31" pos:end="276:53"><name pos:start="276:31" pos:end="276:34">info</name><operator pos:start="276:35" pos:end="276:35">.</operator><name pos:start="276:36" pos:end="276:53">dma32_window_start</name></name> <operator pos:start="276:55" pos:end="276:55">+</operator>

                              <name pos:start="278:31" pos:end="278:52"><name pos:start="278:31" pos:end="278:34">info</name><operator pos:start="278:35" pos:end="278:35">.</operator><name pos:start="278:36" pos:end="278:52">dma32_window_size</name></name> <operator pos:start="278:54" pos:end="278:54">-</operator> <literal type="number" pos:start="278:56" pos:end="278:56">1</literal></expr></argument>,

                              <argument pos:start="280:31" pos:end="280:36"><expr pos:start="280:31" pos:end="280:36"><literal type="number" pos:start="280:31" pos:end="280:36">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></else></if_stmt> <if_stmt pos:start="283:7" pos:end="367:15"><else pos:start="283:7" pos:end="367:15">else <block pos:start="283:12" pos:end="367:15">{<block_content pos:start="285:9" pos:end="367:15">

        <expr_stmt pos:start="285:9" pos:end="285:54"><expr pos:start="285:9" pos:end="285:53"><call pos:start="285:9" pos:end="285:53"><name pos:start="285:9" pos:end="285:18">error_setg</name><argument_list pos:start="285:19" pos:end="285:53">(<argument pos:start="285:20" pos:end="285:23"><expr pos:start="285:20" pos:end="285:23"><name pos:start="285:20" pos:end="285:23">errp</name></expr></argument>, <argument pos:start="285:26" pos:end="285:52"><expr pos:start="285:26" pos:end="285:52"><literal type="string" pos:start="285:26" pos:end="285:52">"No available IOMMU models"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:22"><expr pos:start="287:9" pos:end="287:21"><name pos:start="287:9" pos:end="287:11">ret</name> <operator pos:start="287:13" pos:end="287:13">=</operator> <operator pos:start="287:15" pos:end="287:15">-</operator><name pos:start="287:16" pos:end="287:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="289:9" pos:end="289:33">goto <name pos:start="289:14" pos:end="289:32">free_container_exit</name>;</goto>




    <expr_stmt pos:start="294:5" pos:end="294:37"><expr pos:start="294:5" pos:end="294:36"><call pos:start="294:5" pos:end="294:36"><name pos:start="294:5" pos:end="294:29">vfio_kvm_device_add_group</name><argument_list pos:start="294:30" pos:end="294:36">(<argument pos:start="294:31" pos:end="294:35"><expr pos:start="294:31" pos:end="294:35"><name pos:start="294:31" pos:end="294:35">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="298:5" pos:end="298:39"><expr pos:start="298:5" pos:end="298:38"><call pos:start="298:5" pos:end="298:38"><name pos:start="298:5" pos:end="298:14">QLIST_INIT</name><argument_list pos:start="298:15" pos:end="298:38">(<argument pos:start="298:16" pos:end="298:37"><expr pos:start="298:16" pos:end="298:37"><operator pos:start="298:16" pos:end="298:16">&amp;</operator><name pos:start="298:17" pos:end="298:37"><name pos:start="298:17" pos:end="298:25">container</name><operator pos:start="298:26" pos:end="298:27">-&gt;</operator><name pos:start="298:28" pos:end="298:37">group_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="300:5" pos:end="300:59"><expr pos:start="300:5" pos:end="300:58"><call pos:start="300:5" pos:end="300:58"><name pos:start="300:5" pos:end="300:21">QLIST_INSERT_HEAD</name><argument_list pos:start="300:22" pos:end="300:58">(<argument pos:start="300:23" pos:end="300:40"><expr pos:start="300:23" pos:end="300:40"><operator pos:start="300:23" pos:end="300:23">&amp;</operator><name pos:start="300:24" pos:end="300:40"><name pos:start="300:24" pos:end="300:28">space</name><operator pos:start="300:29" pos:end="300:30">-&gt;</operator><name pos:start="300:31" pos:end="300:40">containers</name></name></expr></argument>, <argument pos:start="300:43" pos:end="300:51"><expr pos:start="300:43" pos:end="300:51"><name pos:start="300:43" pos:end="300:51">container</name></expr></argument>, <argument pos:start="300:54" pos:end="300:57"><expr pos:start="300:54" pos:end="300:57"><name pos:start="300:54" pos:end="300:57">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="304:5" pos:end="304:33"><expr pos:start="304:5" pos:end="304:32"><name pos:start="304:5" pos:end="304:20"><name pos:start="304:5" pos:end="304:9">group</name><operator pos:start="304:10" pos:end="304:11">-&gt;</operator><name pos:start="304:12" pos:end="304:20">container</name></name> <operator pos:start="304:22" pos:end="304:22">=</operator> <name pos:start="304:24" pos:end="304:32">container</name></expr>;</expr_stmt>

    <expr_stmt pos:start="306:5" pos:end="306:69"><expr pos:start="306:5" pos:end="306:68"><call pos:start="306:5" pos:end="306:68"><name pos:start="306:5" pos:end="306:21">QLIST_INSERT_HEAD</name><argument_list pos:start="306:22" pos:end="306:68">(<argument pos:start="306:23" pos:end="306:44"><expr pos:start="306:23" pos:end="306:44"><operator pos:start="306:23" pos:end="306:23">&amp;</operator><name pos:start="306:24" pos:end="306:44"><name pos:start="306:24" pos:end="306:32">container</name><operator pos:start="306:33" pos:end="306:34">-&gt;</operator><name pos:start="306:35" pos:end="306:44">group_list</name></name></expr></argument>, <argument pos:start="306:47" pos:end="306:51"><expr pos:start="306:47" pos:end="306:51"><name pos:start="306:47" pos:end="306:51">group</name></expr></argument>, <argument pos:start="306:54" pos:end="306:67"><expr pos:start="306:54" pos:end="306:67"><name pos:start="306:54" pos:end="306:67">container_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="310:5" pos:end="310:47"><expr pos:start="310:5" pos:end="310:46"><name pos:start="310:5" pos:end="310:23"><name pos:start="310:5" pos:end="310:13">container</name><operator pos:start="310:14" pos:end="310:15">-&gt;</operator><name pos:start="310:16" pos:end="310:23">listener</name></name> <operator pos:start="310:25" pos:end="310:25">=</operator> <name pos:start="310:27" pos:end="310:46">vfio_memory_listener</name></expr>;</expr_stmt>



    <expr_stmt pos:start="314:5" pos:end="314:73"><expr pos:start="314:5" pos:end="314:72"><call pos:start="314:5" pos:end="314:72"><name pos:start="314:5" pos:end="314:28">memory_listener_register</name><argument_list pos:start="314:29" pos:end="314:72">(<argument pos:start="314:30" pos:end="314:49"><expr pos:start="314:30" pos:end="314:49"><operator pos:start="314:30" pos:end="314:30">&amp;</operator><name pos:start="314:31" pos:end="314:49"><name pos:start="314:31" pos:end="314:39">container</name><operator pos:start="314:40" pos:end="314:41">-&gt;</operator><name pos:start="314:42" pos:end="314:49">listener</name></name></expr></argument>, <argument pos:start="314:52" pos:end="314:71"><expr pos:start="314:52" pos:end="314:71"><name pos:start="314:52" pos:end="314:71"><name pos:start="314:52" pos:end="314:60">container</name><operator pos:start="314:61" pos:end="314:62">-&gt;</operator><name pos:start="314:63" pos:end="314:67">space</name><operator pos:start="314:68" pos:end="314:69">-&gt;</operator><name pos:start="314:70" pos:end="314:71">as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="318:5" pos:end="367:15"><if pos:start="318:5" pos:end="367:15">if <condition pos:start="318:8" pos:end="318:25">(<expr pos:start="318:9" pos:end="318:24"><name pos:start="318:9" pos:end="318:24"><name pos:start="318:9" pos:end="318:17">container</name><operator pos:start="318:18" pos:end="318:19">-&gt;</operator><name pos:start="318:20" pos:end="318:24">error</name></name></expr>)</condition> <block pos:start="318:27" pos:end="367:15">{<block_content pos:start="320:9" pos:end="367:15">

        <expr_stmt pos:start="320:9" pos:end="320:31"><expr pos:start="320:9" pos:end="320:30"><name pos:start="320:9" pos:end="320:11">ret</name> <operator pos:start="320:13" pos:end="320:13">=</operator> <name pos:start="320:15" pos:end="320:30"><name pos:start="320:15" pos:end="320:23">container</name><operator pos:start="320:24" pos:end="320:25">-&gt;</operator><name pos:start="320:26" pos:end="320:30">error</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="322:9" pos:end="324:80"><expr pos:start="322:9" pos:end="324:79"><call pos:start="322:9" pos:end="324:79"><name pos:start="322:9" pos:end="322:24">error_setg_errno</name><argument_list pos:start="322:25" pos:end="324:79">(<argument pos:start="322:26" pos:end="322:29"><expr pos:start="322:26" pos:end="322:29"><name pos:start="322:26" pos:end="322:29">errp</name></expr></argument>, <argument pos:start="322:32" pos:end="322:35"><expr pos:start="322:32" pos:end="322:35"><operator pos:start="322:32" pos:end="322:32">-</operator><name pos:start="322:33" pos:end="322:35">ret</name></expr></argument>,

                         <argument pos:start="324:26" pos:end="324:78"><expr pos:start="324:26" pos:end="324:78"><literal type="string" pos:start="324:26" pos:end="324:78">"memory listener initialization failed for container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="326:9" pos:end="326:35">goto <name pos:start="326:14" pos:end="326:34">listener_release_exit</name>;</goto>




    <expr_stmt pos:start="331:5" pos:end="331:34"><expr pos:start="331:5" pos:end="331:33"><name pos:start="331:5" pos:end="331:26"><name pos:start="331:5" pos:end="331:13">container</name><operator pos:start="331:14" pos:end="331:15">-&gt;</operator><name pos:start="331:16" pos:end="331:26">initialized</name></name> <operator pos:start="331:28" pos:end="331:28">=</operator> <name pos:start="331:30" pos:end="331:33">true</name></expr>;</expr_stmt>



    <return pos:start="335:5" pos:end="335:13">return <expr pos:start="335:12" pos:end="335:12"><literal type="number" pos:start="335:12" pos:end="335:12">0</literal></expr>;</return>

<label pos:start="337:1" pos:end="337:22"><name pos:start="337:1" pos:end="337:21">listener_release_exit</name>:</label>

    <expr_stmt pos:start="339:5" pos:end="339:40"><expr pos:start="339:5" pos:end="339:39"><call pos:start="339:5" pos:end="339:39"><name pos:start="339:5" pos:end="339:16">QLIST_REMOVE</name><argument_list pos:start="339:17" pos:end="339:39">(<argument pos:start="339:18" pos:end="339:22"><expr pos:start="339:18" pos:end="339:22"><name pos:start="339:18" pos:end="339:22">group</name></expr></argument>, <argument pos:start="339:25" pos:end="339:38"><expr pos:start="339:25" pos:end="339:38"><name pos:start="339:25" pos:end="339:38">container_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:34"><expr pos:start="341:5" pos:end="341:33"><call pos:start="341:5" pos:end="341:33"><name pos:start="341:5" pos:end="341:16">QLIST_REMOVE</name><argument_list pos:start="341:17" pos:end="341:33">(<argument pos:start="341:18" pos:end="341:26"><expr pos:start="341:18" pos:end="341:26"><name pos:start="341:18" pos:end="341:26">container</name></expr></argument>, <argument pos:start="341:29" pos:end="341:32"><expr pos:start="341:29" pos:end="341:32"><name pos:start="341:29" pos:end="341:32">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="343:5" pos:end="343:37"><expr pos:start="343:5" pos:end="343:36"><call pos:start="343:5" pos:end="343:36"><name pos:start="343:5" pos:end="343:29">vfio_kvm_device_del_group</name><argument_list pos:start="343:30" pos:end="343:36">(<argument pos:start="343:31" pos:end="343:35"><expr pos:start="343:31" pos:end="343:35"><name pos:start="343:31" pos:end="343:35">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:37"><expr pos:start="345:5" pos:end="345:36"><call pos:start="345:5" pos:end="345:36"><name pos:start="345:5" pos:end="345:25">vfio_listener_release</name><argument_list pos:start="345:26" pos:end="345:36">(<argument pos:start="345:27" pos:end="345:35"><expr pos:start="345:27" pos:end="345:35"><name pos:start="345:27" pos:end="345:35">container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="349:1" pos:end="349:20"><name pos:start="349:1" pos:end="349:19">free_container_exit</name>:</label>

    <expr_stmt pos:start="351:5" pos:end="351:22"><expr pos:start="351:5" pos:end="351:21"><call pos:start="351:5" pos:end="351:21"><name pos:start="351:5" pos:end="351:10">g_free</name><argument_list pos:start="351:11" pos:end="351:21">(<argument pos:start="351:12" pos:end="351:20"><expr pos:start="351:12" pos:end="351:20"><name pos:start="351:12" pos:end="351:20">container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="355:1" pos:end="355:14"><name pos:start="355:1" pos:end="355:13">close_fd_exit</name>:</label>

    <expr_stmt pos:start="357:5" pos:end="357:14"><expr pos:start="357:5" pos:end="357:13"><call pos:start="357:5" pos:end="357:13"><name pos:start="357:5" pos:end="357:9">close</name><argument_list pos:start="357:10" pos:end="357:13">(<argument pos:start="357:11" pos:end="357:12"><expr pos:start="357:11" pos:end="357:12"><name pos:start="357:11" pos:end="357:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="361:1" pos:end="361:15"><name pos:start="361:1" pos:end="361:14">put_space_exit</name>:</label>

    <expr_stmt pos:start="363:5" pos:end="363:34"><expr pos:start="363:5" pos:end="363:33"><call pos:start="363:5" pos:end="363:33"><name pos:start="363:5" pos:end="363:26">vfio_put_address_space</name><argument_list pos:start="363:27" pos:end="363:33">(<argument pos:start="363:28" pos:end="363:32"><expr pos:start="363:28" pos:end="363:32"><name pos:start="363:28" pos:end="363:32">space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="367:5" pos:end="367:15">return <expr pos:start="367:12" pos:end="367:14"><name pos:start="367:12" pos:end="367:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></function>
</unit>
