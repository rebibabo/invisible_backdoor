<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26960.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:34">imc_decode_init</name><parameter_list pos:start="1:35" pos:end="1:57">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">j</name></decl>, <decl pos:start="5:15" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:17">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">IMCContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">q</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">double</name></type> <name pos:start="9:12" pos:end="9:13">r1</name></decl>, <decl pos:start="9:16" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:16" pos:end="9:17">r2</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="15:71">(<expr pos:start="13:9" pos:end="15:70"><operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:24"><name pos:start="13:10" pos:end="13:14">avctx</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:24">codec_id</name></name> <operator pos:start="13:26" pos:end="13:27">==</operator> <name pos:start="13:29" pos:end="13:43">AV_CODEC_ID_IMC</name> <operator pos:start="13:45" pos:end="13:46">&amp;&amp;</operator> <name pos:start="13:48" pos:end="13:62"><name pos:start="13:48" pos:end="13:52">avctx</name><operator pos:start="13:53" pos:end="13:54">-&gt;</operator><name pos:start="13:55" pos:end="13:62">channels</name></name> <operator pos:start="13:64" pos:end="13:65">!=</operator> <literal type="number" pos:start="13:67" pos:end="13:67">1</literal><operator pos:start="13:68" pos:end="13:68">)</operator>

        <operator pos:start="15:9" pos:end="15:10">||</operator> <operator pos:start="15:12" pos:end="15:12">(</operator><name pos:start="15:13" pos:end="15:27"><name pos:start="15:13" pos:end="15:17">avctx</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:27">codec_id</name></name> <operator pos:start="15:29" pos:end="15:30">==</operator> <name pos:start="15:32" pos:end="15:46">AV_CODEC_ID_IAC</name> <operator pos:start="15:48" pos:end="15:49">&amp;&amp;</operator> <name pos:start="15:51" pos:end="15:65"><name pos:start="15:51" pos:end="15:55">avctx</name><operator pos:start="15:56" pos:end="15:57">-&gt;</operator><name pos:start="15:58" pos:end="15:65">channels</name></name> <operator pos:start="15:67" pos:end="15:67">&gt;</operator> <literal type="number" pos:start="15:69" pos:end="15:69">2</literal><operator pos:start="15:70" pos:end="15:70">)</operator></expr>)</condition> <block pos:start="15:73" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:36">

        <expr_stmt pos:start="17:9" pos:end="17:78"><expr pos:start="17:9" pos:end="17:77"><call pos:start="17:9" pos:end="17:77"><name pos:start="17:9" pos:end="17:29">av_log_ask_for_sample</name><argument_list pos:start="17:30" pos:end="17:77">(<argument pos:start="17:31" pos:end="17:35"><expr pos:start="17:31" pos:end="17:35"><name pos:start="17:31" pos:end="17:35">avctx</name></expr></argument>, <argument pos:start="17:38" pos:end="17:76"><expr pos:start="17:38" pos:end="17:76"><literal type="string" pos:start="17:38" pos:end="17:76">"Number of channels is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:36">return <expr pos:start="19:16" pos:end="19:35"><name pos:start="19:16" pos:end="19:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="25:5" pos:end="41:5">for <control pos:start="25:9" pos:end="25:41">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">j</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:36"><expr pos:start="25:17" pos:end="25:35"><name pos:start="25:17" pos:end="25:17">j</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <name pos:start="25:21" pos:end="25:35"><name pos:start="25:21" pos:end="25:25">avctx</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:35">channels</name></name></expr>;</condition> <incr pos:start="25:38" pos:end="25:40"><expr pos:start="25:38" pos:end="25:40"><name pos:start="25:38" pos:end="25:38">j</name><operator pos:start="25:39" pos:end="25:40">++</operator></expr></incr>)</control> <block pos:start="25:43" pos:end="41:5">{<block_content pos:start="27:9" pos:end="39:43">

        <expr_stmt pos:start="27:9" pos:end="27:38"><expr pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:9">q</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:16">chctx</name><index pos:start="27:17" pos:end="27:19">[<expr pos:start="27:18" pos:end="27:18"><name pos:start="27:18" pos:end="27:18">j</name></expr>]</index></name><operator pos:start="27:20" pos:end="27:20">.</operator><name pos:start="27:21" pos:end="27:33">decoder_reset</name> <operator pos:start="27:35" pos:end="27:35">=</operator> <literal type="number" pos:start="27:37" pos:end="27:37">1</literal></expr>;</expr_stmt>



        <for pos:start="31:9" pos:end="33:43">for <control pos:start="31:13" pos:end="31:35">(<init pos:start="31:14" pos:end="31:19"><expr pos:start="31:14" pos:end="31:18"><name pos:start="31:14" pos:end="31:14">i</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</init> <condition pos:start="31:21" pos:end="31:30"><expr pos:start="31:21" pos:end="31:29"><name pos:start="31:21" pos:end="31:21">i</name> <operator pos:start="31:23" pos:end="31:23">&lt;</operator> <name pos:start="31:25" pos:end="31:29">BANDS</name></expr>;</condition> <incr pos:start="31:32" pos:end="31:34"><expr pos:start="31:32" pos:end="31:34"><name pos:start="31:32" pos:end="31:32">i</name><operator pos:start="31:33" pos:end="31:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="33:13" pos:end="33:43"><block_content pos:start="33:13" pos:end="33:43">

            <expr_stmt pos:start="33:13" pos:end="33:43"><expr pos:start="33:13" pos:end="33:42"><name pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:13">q</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:20">chctx</name><index pos:start="33:21" pos:end="33:23">[<expr pos:start="33:22" pos:end="33:22"><name pos:start="33:22" pos:end="33:22">j</name></expr>]</index></name><operator pos:start="33:24" pos:end="33:24">.</operator><name pos:start="33:25" pos:end="33:36"><name pos:start="33:25" pos:end="33:33">old_floor</name><index pos:start="33:34" pos:end="33:36">[<expr pos:start="33:35" pos:end="33:35"><name pos:start="33:35" pos:end="33:35">i</name></expr>]</index></name> <operator pos:start="33:38" pos:end="33:38">=</operator> <literal type="number" pos:start="33:40" pos:end="33:42">1.0</literal></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="37:9" pos:end="39:43">for <control pos:start="37:13" pos:end="37:40">(<init pos:start="37:14" pos:end="37:19"><expr pos:start="37:14" pos:end="37:18"><name pos:start="37:14" pos:end="37:14">i</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>;</init> <condition pos:start="37:21" pos:end="37:35"><expr pos:start="37:21" pos:end="37:34"><name pos:start="37:21" pos:end="37:21">i</name> <operator pos:start="37:23" pos:end="37:23">&lt;</operator> <name pos:start="37:25" pos:end="37:30">COEFFS</name> <operator pos:start="37:32" pos:end="37:32">/</operator> <literal type="number" pos:start="37:34" pos:end="37:34">2</literal></expr>;</condition> <incr pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><name pos:start="37:37" pos:end="37:37">i</name><operator pos:start="37:38" pos:end="37:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="39:13" pos:end="39:43"><block_content pos:start="39:13" pos:end="39:43">

            <expr_stmt pos:start="39:13" pos:end="39:43"><expr pos:start="39:13" pos:end="39:42"><name pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:13">q</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:20">chctx</name><index pos:start="39:21" pos:end="39:23">[<expr pos:start="39:22" pos:end="39:22"><name pos:start="39:22" pos:end="39:22">j</name></expr>]</index></name><operator pos:start="39:24" pos:end="39:24">.</operator><name pos:start="39:25" pos:end="39:38"><name pos:start="39:25" pos:end="39:35">last_fft_im</name><index pos:start="39:36" pos:end="39:38">[<expr pos:start="39:37" pos:end="39:37"><name pos:start="39:37" pos:end="39:37">i</name></expr>]</index></name> <operator pos:start="39:40" pos:end="39:40">=</operator> <literal type="number" pos:start="39:42" pos:end="39:42">0</literal></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="45:5" pos:end="45:73">/* Build mdct window, a simple sine window normalized with sqrt(2) */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:53"><expr pos:start="47:5" pos:end="47:52"><call pos:start="47:5" pos:end="47:52"><name pos:start="47:5" pos:end="47:23">ff_sine_window_init</name><argument_list pos:start="47:24" pos:end="47:52">(<argument pos:start="47:25" pos:end="47:43"><expr pos:start="47:25" pos:end="47:43"><name pos:start="47:25" pos:end="47:43"><name pos:start="47:25" pos:end="47:25">q</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:43">mdct_sine_window</name></name></expr></argument>, <argument pos:start="47:46" pos:end="47:51"><expr pos:start="47:46" pos:end="47:51"><name pos:start="47:46" pos:end="47:51">COEFFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="49:5" pos:end="51:44">for <control pos:start="49:9" pos:end="49:32">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:27"><expr pos:start="49:17" pos:end="49:26"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <name pos:start="49:21" pos:end="49:26">COEFFS</name></expr>;</condition> <incr pos:start="49:29" pos:end="49:31"><expr pos:start="49:29" pos:end="49:31"><name pos:start="49:29" pos:end="49:29">i</name><operator pos:start="49:30" pos:end="49:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="51:9" pos:end="51:44"><block_content pos:start="51:9" pos:end="51:44">

        <expr_stmt pos:start="51:9" pos:end="51:44"><expr pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:9">q</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:27">mdct_sine_window</name><index pos:start="51:28" pos:end="51:30">[<expr pos:start="51:29" pos:end="51:29"><name pos:start="51:29" pos:end="51:29">i</name></expr>]</index></name> <operator pos:start="51:32" pos:end="51:33">*=</operator> <call pos:start="51:35" pos:end="51:43"><name pos:start="51:35" pos:end="51:38">sqrt</name><argument_list pos:start="51:39" pos:end="51:43">(<argument pos:start="51:40" pos:end="51:42"><expr pos:start="51:40" pos:end="51:42"><literal type="number" pos:start="51:40" pos:end="51:42">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <for pos:start="53:5" pos:end="81:5">for <control pos:start="53:9" pos:end="53:36">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:31"><expr pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:26">COEFFS</name> <operator pos:start="53:28" pos:end="53:28">/</operator> <literal type="number" pos:start="53:30" pos:end="53:30">2</literal></expr>;</condition> <incr pos:start="53:33" pos:end="53:35"><expr pos:start="53:33" pos:end="53:35"><name pos:start="53:33" pos:end="53:33">i</name><operator pos:start="53:34" pos:end="53:35">++</operator></expr></incr>)</control> <block pos:start="53:38" pos:end="81:5">{<block_content pos:start="55:9" pos:end="79:9">

        <expr_stmt pos:start="55:9" pos:end="55:64"><expr pos:start="55:9" pos:end="55:63"><name pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:9">q</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:19">post_cos</name><index pos:start="55:20" pos:end="55:22">[<expr pos:start="55:21" pos:end="55:21"><name pos:start="55:21" pos:end="55:21">i</name></expr>]</index></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <operator pos:start="55:26" pos:end="55:26">(</operator><literal type="number" pos:start="55:27" pos:end="55:30">1.0f</literal> <operator pos:start="55:32" pos:end="55:32">/</operator> <literal type="number" pos:start="55:34" pos:end="55:38">32768</literal><operator pos:start="55:39" pos:end="55:39">)</operator> <operator pos:start="55:41" pos:end="55:41">*</operator> <call pos:start="55:43" pos:end="55:63"><name pos:start="55:43" pos:end="55:45">cos</name><argument_list pos:start="55:46" pos:end="55:63">(<argument pos:start="55:47" pos:end="55:62"><expr pos:start="55:47" pos:end="55:62"><name pos:start="55:47" pos:end="55:47">i</name> <operator pos:start="55:49" pos:end="55:49">/</operator> <literal type="number" pos:start="55:51" pos:end="55:55">256.0</literal> <operator pos:start="55:57" pos:end="55:57">*</operator> <name pos:start="55:59" pos:end="55:62">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:64"><expr pos:start="57:9" pos:end="57:63"><name pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:9">q</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:19">post_sin</name><index pos:start="57:20" pos:end="57:22">[<expr pos:start="57:21" pos:end="57:21"><name pos:start="57:21" pos:end="57:21">i</name></expr>]</index></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <operator pos:start="57:26" pos:end="57:26">(</operator><literal type="number" pos:start="57:27" pos:end="57:30">1.0f</literal> <operator pos:start="57:32" pos:end="57:32">/</operator> <literal type="number" pos:start="57:34" pos:end="57:38">32768</literal><operator pos:start="57:39" pos:end="57:39">)</operator> <operator pos:start="57:41" pos:end="57:41">*</operator> <call pos:start="57:43" pos:end="57:63"><name pos:start="57:43" pos:end="57:45">sin</name><argument_list pos:start="57:46" pos:end="57:63">(<argument pos:start="57:47" pos:end="57:62"><expr pos:start="57:47" pos:end="57:62"><name pos:start="57:47" pos:end="57:47">i</name> <operator pos:start="57:49" pos:end="57:49">/</operator> <literal type="number" pos:start="57:51" pos:end="57:55">256.0</literal> <operator pos:start="57:57" pos:end="57:57">*</operator> <name pos:start="57:59" pos:end="57:62">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:50"><expr pos:start="61:9" pos:end="61:49"><name pos:start="61:9" pos:end="61:10">r1</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <call pos:start="61:14" pos:end="61:49"><name pos:start="61:14" pos:end="61:16">sin</name><argument_list pos:start="61:17" pos:end="61:49">(<argument pos:start="61:18" pos:end="61:48"><expr pos:start="61:18" pos:end="61:48"><operator pos:start="61:18" pos:end="61:18">(</operator><name pos:start="61:19" pos:end="61:19">i</name> <operator pos:start="61:21" pos:end="61:21">*</operator> <literal type="number" pos:start="61:23" pos:end="61:27">4.0</literal> <operator pos:start="61:27" pos:end="61:27">+</operator> <literal type="number" pos:start="61:29" pos:end="61:31">1.0</literal><operator pos:start="61:32" pos:end="61:32">)</operator> <operator pos:start="61:34" pos:end="61:34">/</operator> <literal type="number" pos:start="61:36" pos:end="61:41">1024.0</literal> <operator pos:start="61:43" pos:end="61:43">*</operator> <name pos:start="61:45" pos:end="61:48">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:50"><expr pos:start="63:9" pos:end="63:49"><name pos:start="63:9" pos:end="63:10">r2</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:49"><name pos:start="63:14" pos:end="63:16">cos</name><argument_list pos:start="63:17" pos:end="63:49">(<argument pos:start="63:18" pos:end="63:48"><expr pos:start="63:18" pos:end="63:48"><operator pos:start="63:18" pos:end="63:18">(</operator><name pos:start="63:19" pos:end="63:19">i</name> <operator pos:start="63:21" pos:end="63:21">*</operator> <literal type="number" pos:start="63:23" pos:end="63:27">4.0</literal> <operator pos:start="63:27" pos:end="63:27">+</operator> <literal type="number" pos:start="63:29" pos:end="63:31">1.0</literal><operator pos:start="63:32" pos:end="63:32">)</operator> <operator pos:start="63:34" pos:end="63:34">/</operator> <literal type="number" pos:start="63:36" pos:end="63:41">1024.0</literal> <operator pos:start="63:43" pos:end="63:43">*</operator> <name pos:start="63:45" pos:end="63:48">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="67:9" pos:end="79:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:20">(<expr pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:13">i</name> <operator pos:start="67:15" pos:end="67:15">&amp;</operator> <literal type="number" pos:start="67:17" pos:end="67:19">0x1</literal></expr>)</condition> <block pos:start="67:22" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:53">

            <expr_stmt pos:start="69:13" pos:end="69:53"><expr pos:start="69:13" pos:end="69:52"><name pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:13">q</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:24">pre_coef1</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">i</name></expr>]</index></name> <operator pos:start="69:29" pos:end="69:29">=</operator>  <operator pos:start="69:32" pos:end="69:32">(</operator><name pos:start="69:33" pos:end="69:34">r1</name> <operator pos:start="69:36" pos:end="69:36">+</operator> <name pos:start="69:38" pos:end="69:39">r2</name><operator pos:start="69:40" pos:end="69:40">)</operator> <operator pos:start="69:42" pos:end="69:42">*</operator> <call pos:start="69:44" pos:end="69:52"><name pos:start="69:44" pos:end="69:47">sqrt</name><argument_list pos:start="69:48" pos:end="69:52">(<argument pos:start="69:49" pos:end="69:51"><expr pos:start="69:49" pos:end="69:51"><literal type="number" pos:start="69:49" pos:end="69:51">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:53"><expr pos:start="71:13" pos:end="71:52"><name pos:start="71:13" pos:end="71:27"><name pos:start="71:13" pos:end="71:13">q</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:24">pre_coef2</name><index pos:start="71:25" pos:end="71:27">[<expr pos:start="71:26" pos:end="71:26"><name pos:start="71:26" pos:end="71:26">i</name></expr>]</index></name> <operator pos:start="71:29" pos:end="71:29">=</operator> <operator pos:start="71:31" pos:end="71:31">-</operator><operator pos:start="71:32" pos:end="71:32">(</operator><name pos:start="71:33" pos:end="71:34">r1</name> <operator pos:start="71:36" pos:end="71:36">-</operator> <name pos:start="71:38" pos:end="71:39">r2</name><operator pos:start="71:40" pos:end="71:40">)</operator> <operator pos:start="71:42" pos:end="71:42">*</operator> <call pos:start="71:44" pos:end="71:52"><name pos:start="71:44" pos:end="71:47">sqrt</name><argument_list pos:start="71:48" pos:end="71:52">(<argument pos:start="71:49" pos:end="71:51"><expr pos:start="71:49" pos:end="71:51"><literal type="number" pos:start="71:49" pos:end="71:51">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="79:9">else <block pos:start="73:16" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:53">

            <expr_stmt pos:start="75:13" pos:end="75:53"><expr pos:start="75:13" pos:end="75:52"><name pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:13">q</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:24">pre_coef1</name><index pos:start="75:25" pos:end="75:27">[<expr pos:start="75:26" pos:end="75:26"><name pos:start="75:26" pos:end="75:26">i</name></expr>]</index></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <operator pos:start="75:31" pos:end="75:31">-</operator><operator pos:start="75:32" pos:end="75:32">(</operator><name pos:start="75:33" pos:end="75:34">r1</name> <operator pos:start="75:36" pos:end="75:36">+</operator> <name pos:start="75:38" pos:end="75:39">r2</name><operator pos:start="75:40" pos:end="75:40">)</operator> <operator pos:start="75:42" pos:end="75:42">*</operator> <call pos:start="75:44" pos:end="75:52"><name pos:start="75:44" pos:end="75:47">sqrt</name><argument_list pos:start="75:48" pos:end="75:52">(<argument pos:start="75:49" pos:end="75:51"><expr pos:start="75:49" pos:end="75:51"><literal type="number" pos:start="75:49" pos:end="75:51">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:53"><expr pos:start="77:13" pos:end="77:52"><name pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:13">q</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:24">pre_coef2</name><index pos:start="77:25" pos:end="77:27">[<expr pos:start="77:26" pos:end="77:26"><name pos:start="77:26" pos:end="77:26">i</name></expr>]</index></name> <operator pos:start="77:29" pos:end="77:29">=</operator>  <operator pos:start="77:32" pos:end="77:32">(</operator><name pos:start="77:33" pos:end="77:34">r1</name> <operator pos:start="77:36" pos:end="77:36">-</operator> <name pos:start="77:38" pos:end="77:39">r2</name><operator pos:start="77:40" pos:end="77:40">)</operator> <operator pos:start="77:42" pos:end="77:42">*</operator> <call pos:start="77:44" pos:end="77:52"><name pos:start="77:44" pos:end="77:47">sqrt</name><argument_list pos:start="77:48" pos:end="77:52">(<argument pos:start="77:49" pos:end="77:51"><expr pos:start="77:49" pos:end="77:51"><literal type="number" pos:start="77:49" pos:end="77:51">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="85:5" pos:end="85:38">/* Generate a square root table */</comment>



    <for pos:start="89:5" pos:end="91:33">for <control pos:start="89:9" pos:end="89:28">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:23"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <literal type="number" pos:start="89:21" pos:end="89:22">30</literal></expr>;</condition> <incr pos:start="89:25" pos:end="89:27"><expr pos:start="89:25" pos:end="89:27"><name pos:start="89:25" pos:end="89:25">i</name><operator pos:start="89:26" pos:end="89:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="91:9" pos:end="91:33"><block_content pos:start="91:9" pos:end="91:33">

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:9">q</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:19">sqrt_tab</name><index pos:start="91:20" pos:end="91:22">[<expr pos:start="91:21" pos:end="91:21"><name pos:start="91:21" pos:end="91:21">i</name></expr>]</index></name> <operator pos:start="91:24" pos:end="91:24">=</operator> <call pos:start="91:26" pos:end="91:32"><name pos:start="91:26" pos:end="91:29">sqrt</name><argument_list pos:start="91:30" pos:end="91:32">(<argument pos:start="91:31" pos:end="91:31"><expr pos:start="91:31" pos:end="91:31"><name pos:start="91:31" pos:end="91:31">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="95:5" pos:end="95:35">/* initialize the VLC tables */</comment>

    <for pos:start="97:5" pos:end="113:5">for <control pos:start="97:9" pos:end="97:28">(<init pos:start="97:10" pos:end="97:15"><expr pos:start="97:10" pos:end="97:14"><name pos:start="97:10" pos:end="97:10">i</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>;</init> <condition pos:start="97:17" pos:end="97:23"><expr pos:start="97:17" pos:end="97:21"><name pos:start="97:17" pos:end="97:17">i</name> <operator pos:start="97:19" pos:end="97:19">&lt;</operator> <literal type="number" pos:start="97:21" pos:end="97:21">4</literal></expr> ;</condition> <incr pos:start="97:25" pos:end="97:27"><expr pos:start="97:25" pos:end="97:27"><name pos:start="97:25" pos:end="97:25">i</name><operator pos:start="97:26" pos:end="97:27">++</operator></expr></incr>)</control> <block pos:start="97:30" pos:end="113:5">{<block_content pos:start="99:9" pos:end="111:9">

        <for pos:start="99:9" pos:end="111:9">for <control pos:start="99:13" pos:end="99:31">(<init pos:start="99:14" pos:end="99:19"><expr pos:start="99:14" pos:end="99:18"><name pos:start="99:14" pos:end="99:14">j</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>;</init> <condition pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:25"><name pos:start="99:21" pos:end="99:21">j</name> <operator pos:start="99:23" pos:end="99:23">&lt;</operator> <literal type="number" pos:start="99:25" pos:end="99:25">4</literal></expr>;</condition> <incr pos:start="99:28" pos:end="99:30"><expr pos:start="99:28" pos:end="99:30"><name pos:start="99:28" pos:end="99:28">j</name><operator pos:start="99:29" pos:end="99:30">++</operator></expr></incr>)</control> <block pos:start="99:33" pos:end="111:9">{<block_content pos:start="101:13" pos:end="109:76">

            <expr_stmt pos:start="101:13" pos:end="101:74"><expr pos:start="101:13" pos:end="101:73"><name pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:23">huffman_vlc</name><index pos:start="101:24" pos:end="101:26">[<expr pos:start="101:25" pos:end="101:25"><name pos:start="101:25" pos:end="101:25">i</name></expr>]</index><index pos:start="101:27" pos:end="101:29">[<expr pos:start="101:28" pos:end="101:28"><name pos:start="101:28" pos:end="101:28">j</name></expr>]</index></name><operator pos:start="101:30" pos:end="101:30">.</operator><name pos:start="101:31" pos:end="101:35">table</name> <operator pos:start="101:37" pos:end="101:37">=</operator> <operator pos:start="101:39" pos:end="101:39">&amp;</operator><name pos:start="101:40" pos:end="101:73"><name pos:start="101:40" pos:end="101:49">vlc_tables</name><index pos:start="101:50" pos:end="101:73">[<expr pos:start="101:51" pos:end="101:72"><name pos:start="101:51" pos:end="101:72"><name pos:start="101:51" pos:end="101:61">vlc_offsets</name><index pos:start="101:62" pos:end="101:72">[<expr pos:start="101:63" pos:end="101:71"><name pos:start="101:63" pos:end="101:63">i</name> <operator pos:start="101:65" pos:end="101:65">*</operator> <literal type="number" pos:start="101:67" pos:end="101:69">4</literal> <operator pos:start="101:69" pos:end="101:69">+</operator> <name pos:start="101:71" pos:end="101:71">j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:100"><expr pos:start="103:13" pos:end="103:99"><name pos:start="103:13" pos:end="103:29"><name pos:start="103:13" pos:end="103:23">huffman_vlc</name><index pos:start="103:24" pos:end="103:26">[<expr pos:start="103:25" pos:end="103:25"><name pos:start="103:25" pos:end="103:25">i</name></expr>]</index><index pos:start="103:27" pos:end="103:29">[<expr pos:start="103:28" pos:end="103:28"><name pos:start="103:28" pos:end="103:28">j</name></expr>]</index></name><operator pos:start="103:30" pos:end="103:30">.</operator><name pos:start="103:31" pos:end="103:45">table_allocated</name> <operator pos:start="103:47" pos:end="103:47">=</operator> <name pos:start="103:49" pos:end="103:74"><name pos:start="103:49" pos:end="103:59">vlc_offsets</name><index pos:start="103:60" pos:end="103:74">[<expr pos:start="103:61" pos:end="103:73"><name pos:start="103:61" pos:end="103:61">i</name> <operator pos:start="103:63" pos:end="103:63">*</operator> <literal type="number" pos:start="103:65" pos:end="103:67">4</literal> <operator pos:start="103:67" pos:end="103:67">+</operator> <name pos:start="103:69" pos:end="103:69">j</name> <operator pos:start="103:71" pos:end="103:71">+</operator> <literal type="number" pos:start="103:73" pos:end="103:73">1</literal></expr>]</index></name> <operator pos:start="103:76" pos:end="103:76">-</operator> <name pos:start="103:78" pos:end="103:99"><name pos:start="103:78" pos:end="103:88">vlc_offsets</name><index pos:start="103:89" pos:end="103:99">[<expr pos:start="103:90" pos:end="103:98"><name pos:start="103:90" pos:end="103:90">i</name> <operator pos:start="103:92" pos:end="103:92">*</operator> <literal type="number" pos:start="103:94" pos:end="103:96">4</literal> <operator pos:start="103:96" pos:end="103:96">+</operator> <name pos:start="103:98" pos:end="103:98">j</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="109:76"><expr pos:start="105:13" pos:end="109:75"><call pos:start="105:13" pos:end="109:75"><name pos:start="105:13" pos:end="105:20">init_vlc</name><argument_list pos:start="105:21" pos:end="109:75">(<argument pos:start="105:22" pos:end="105:39"><expr pos:start="105:22" pos:end="105:39"><operator pos:start="105:22" pos:end="105:22">&amp;</operator><name pos:start="105:23" pos:end="105:39"><name pos:start="105:23" pos:end="105:33">huffman_vlc</name><index pos:start="105:34" pos:end="105:36">[<expr pos:start="105:35" pos:end="105:35"><name pos:start="105:35" pos:end="105:35">i</name></expr>]</index><index pos:start="105:37" pos:end="105:39">[<expr pos:start="105:38" pos:end="105:38"><name pos:start="105:38" pos:end="105:38">j</name></expr>]</index></name></expr></argument>, <argument pos:start="105:42" pos:end="105:42"><expr pos:start="105:42" pos:end="105:42"><literal type="number" pos:start="105:42" pos:end="105:42">9</literal></expr></argument>, <argument pos:start="105:45" pos:end="105:64"><expr pos:start="105:45" pos:end="105:64"><name pos:start="105:45" pos:end="105:64"><name pos:start="105:45" pos:end="105:61">imc_huffman_sizes</name><index pos:start="105:62" pos:end="105:64">[<expr pos:start="105:63" pos:end="105:63"><name pos:start="105:63" pos:end="105:63">i</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="107:22" pos:end="107:43"><expr pos:start="107:22" pos:end="107:43"><name pos:start="107:22" pos:end="107:43"><name pos:start="107:22" pos:end="107:37">imc_huffman_lens</name><index pos:start="107:38" pos:end="107:40">[<expr pos:start="107:39" pos:end="107:39"><name pos:start="107:39" pos:end="107:39">i</name></expr>]</index><index pos:start="107:41" pos:end="107:43">[<expr pos:start="107:42" pos:end="107:42"><name pos:start="107:42" pos:end="107:42">j</name></expr>]</index></name></expr></argument>, <argument pos:start="107:46" pos:end="107:46"><expr pos:start="107:46" pos:end="107:46"><literal type="number" pos:start="107:46" pos:end="107:46">1</literal></expr></argument>, <argument pos:start="107:49" pos:end="107:49"><expr pos:start="107:49" pos:end="107:49"><literal type="number" pos:start="107:49" pos:end="107:49">1</literal></expr></argument>,

                     <argument pos:start="109:22" pos:end="109:43"><expr pos:start="109:22" pos:end="109:43"><name pos:start="109:22" pos:end="109:43"><name pos:start="109:22" pos:end="109:37">imc_huffman_bits</name><index pos:start="109:38" pos:end="109:40">[<expr pos:start="109:39" pos:end="109:39"><name pos:start="109:39" pos:end="109:39">i</name></expr>]</index><index pos:start="109:41" pos:end="109:43">[<expr pos:start="109:42" pos:end="109:42"><name pos:start="109:42" pos:end="109:42">j</name></expr>]</index></name></expr></argument>, <argument pos:start="109:46" pos:end="109:46"><expr pos:start="109:46" pos:end="109:46"><literal type="number" pos:start="109:46" pos:end="109:46">2</literal></expr></argument>, <argument pos:start="109:49" pos:end="109:49"><expr pos:start="109:49" pos:end="109:49"><literal type="number" pos:start="109:49" pos:end="109:49">2</literal></expr></argument>, <argument pos:start="109:52" pos:end="109:74"><expr pos:start="109:52" pos:end="109:74"><name pos:start="109:52" pos:end="109:74">INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <if_stmt pos:start="117:5" pos:end="131:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:43">(<expr pos:start="117:9" pos:end="117:42"><name pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:13">avctx</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:23">codec_id</name></name> <operator pos:start="117:25" pos:end="117:26">==</operator> <name pos:start="117:28" pos:end="117:42">AV_CODEC_ID_IAC</name></expr>)</condition> <block pos:start="117:45" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:49">

        <expr_stmt pos:start="119:9" pos:end="119:49"><expr pos:start="119:9" pos:end="119:48"><call pos:start="119:9" pos:end="119:48"><name pos:start="119:9" pos:end="119:25">iac_generate_tabs</name><argument_list pos:start="119:26" pos:end="119:48">(<argument pos:start="119:27" pos:end="119:27"><expr pos:start="119:27" pos:end="119:27"><name pos:start="119:27" pos:end="119:27">q</name></expr></argument>, <argument pos:start="119:30" pos:end="119:47"><expr pos:start="119:30" pos:end="119:47"><name pos:start="119:30" pos:end="119:47"><name pos:start="119:30" pos:end="119:34">avctx</name><operator pos:start="119:35" pos:end="119:36">-&gt;</operator><name pos:start="119:37" pos:end="119:47">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="121:7" pos:end="131:5">else <block pos:start="121:12" pos:end="131:5">{<block_content pos:start="123:9" pos:end="129:64">

        <expr_stmt pos:start="123:9" pos:end="123:55"><expr pos:start="123:9" pos:end="123:54"><call pos:start="123:9" pos:end="123:54"><name pos:start="123:9" pos:end="123:14">memcpy</name><argument_list pos:start="123:15" pos:end="123:54">(<argument pos:start="123:16" pos:end="123:25"><expr pos:start="123:16" pos:end="123:25"><name pos:start="123:16" pos:end="123:25"><name pos:start="123:16" pos:end="123:16">q</name><operator pos:start="123:17" pos:end="123:18">-&gt;</operator><name pos:start="123:19" pos:end="123:25">cyclTab</name></name></expr></argument>,  <argument pos:start="123:29" pos:end="123:35"><expr pos:start="123:29" pos:end="123:35"><name pos:start="123:29" pos:end="123:35">cyclTab</name></expr></argument>,  <argument pos:start="123:39" pos:end="123:53"><expr pos:start="123:39" pos:end="123:53"><sizeof pos:start="123:39" pos:end="123:53">sizeof<argument_list pos:start="123:45" pos:end="123:53">(<argument pos:start="123:46" pos:end="123:52"><expr pos:start="123:46" pos:end="123:52"><name pos:start="123:46" pos:end="123:52">cyclTab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:56"><expr pos:start="125:9" pos:end="125:55"><call pos:start="125:9" pos:end="125:55"><name pos:start="125:9" pos:end="125:14">memcpy</name><argument_list pos:start="125:15" pos:end="125:55">(<argument pos:start="125:16" pos:end="125:26"><expr pos:start="125:16" pos:end="125:26"><name pos:start="125:16" pos:end="125:26"><name pos:start="125:16" pos:end="125:16">q</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:26">cyclTab2</name></name></expr></argument>, <argument pos:start="125:29" pos:end="125:36"><expr pos:start="125:29" pos:end="125:36"><name pos:start="125:29" pos:end="125:36">cyclTab2</name></expr></argument>, <argument pos:start="125:39" pos:end="125:54"><expr pos:start="125:39" pos:end="125:54"><sizeof pos:start="125:39" pos:end="125:54">sizeof<argument_list pos:start="125:45" pos:end="125:54">(<argument pos:start="125:46" pos:end="125:53"><expr pos:start="125:46" pos:end="125:53"><name pos:start="125:46" pos:end="125:53">cyclTab2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:64"><expr pos:start="127:9" pos:end="127:63"><call pos:start="127:9" pos:end="127:63"><name pos:start="127:9" pos:end="127:14">memcpy</name><argument_list pos:start="127:15" pos:end="127:63">(<argument pos:start="127:16" pos:end="127:26"><expr pos:start="127:16" pos:end="127:26"><name pos:start="127:16" pos:end="127:26"><name pos:start="127:16" pos:end="127:16">q</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:26">weights1</name></name></expr></argument>, <argument pos:start="127:29" pos:end="127:40"><expr pos:start="127:29" pos:end="127:40"><name pos:start="127:29" pos:end="127:40">imc_weights1</name></expr></argument>, <argument pos:start="127:43" pos:end="127:62"><expr pos:start="127:43" pos:end="127:62"><sizeof pos:start="127:43" pos:end="127:62">sizeof<argument_list pos:start="127:49" pos:end="127:62">(<argument pos:start="127:50" pos:end="127:61"><expr pos:start="127:50" pos:end="127:61"><name pos:start="127:50" pos:end="127:61">imc_weights1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:64"><expr pos:start="129:9" pos:end="129:63"><call pos:start="129:9" pos:end="129:63"><name pos:start="129:9" pos:end="129:14">memcpy</name><argument_list pos:start="129:15" pos:end="129:63">(<argument pos:start="129:16" pos:end="129:26"><expr pos:start="129:16" pos:end="129:26"><name pos:start="129:16" pos:end="129:26"><name pos:start="129:16" pos:end="129:16">q</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:26">weights2</name></name></expr></argument>, <argument pos:start="129:29" pos:end="129:40"><expr pos:start="129:29" pos:end="129:40"><name pos:start="129:29" pos:end="129:40">imc_weights2</name></expr></argument>, <argument pos:start="129:43" pos:end="129:62"><expr pos:start="129:43" pos:end="129:62"><sizeof pos:start="129:43" pos:end="129:62">sizeof<argument_list pos:start="129:49" pos:end="129:62">(<argument pos:start="129:50" pos:end="129:61"><expr pos:start="129:50" pos:end="129:61"><name pos:start="129:50" pos:end="129:61">imc_weights2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:43">(<expr pos:start="135:9" pos:end="135:42"><operator pos:start="135:9" pos:end="135:9">(</operator><name pos:start="135:10" pos:end="135:12">ret</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <call pos:start="135:16" pos:end="135:41"><name pos:start="135:16" pos:end="135:26">ff_fft_init</name><argument_list pos:start="135:27" pos:end="135:41">(<argument pos:start="135:28" pos:end="135:34"><expr pos:start="135:28" pos:end="135:34"><operator pos:start="135:28" pos:end="135:28">&amp;</operator><name pos:start="135:29" pos:end="135:34"><name pos:start="135:29" pos:end="135:29">q</name><operator pos:start="135:30" pos:end="135:31">-&gt;</operator><name pos:start="135:32" pos:end="135:34">fft</name></name></expr></argument>, <argument pos:start="135:37" pos:end="135:37"><expr pos:start="135:37" pos:end="135:37"><literal type="number" pos:start="135:37" pos:end="135:37">7</literal></expr></argument>, <argument pos:start="135:40" pos:end="135:40"><expr pos:start="135:40" pos:end="135:40"><literal type="number" pos:start="135:40" pos:end="135:40">1</literal></expr></argument>)</argument_list></call><operator pos:start="135:42" pos:end="135:42">)</operator></expr>)</condition> <block pos:start="135:45" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:19">

        <expr_stmt pos:start="137:9" pos:end="137:56"><expr pos:start="137:9" pos:end="137:55"><call pos:start="137:9" pos:end="137:55"><name pos:start="137:9" pos:end="137:14">av_log</name><argument_list pos:start="137:15" pos:end="137:55">(<argument pos:start="137:16" pos:end="137:20"><expr pos:start="137:16" pos:end="137:20"><name pos:start="137:16" pos:end="137:20">avctx</name></expr></argument>, <argument pos:start="137:23" pos:end="137:33"><expr pos:start="137:23" pos:end="137:33"><name pos:start="137:23" pos:end="137:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="137:36" pos:end="137:54"><expr pos:start="137:36" pos:end="137:54"><literal type="string" pos:start="137:36" pos:end="137:54">"FFT init failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="139:9" pos:end="139:19">return <expr pos:start="139:16" pos:end="139:18"><name pos:start="139:16" pos:end="139:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:36"><expr pos:start="143:5" pos:end="143:35"><call pos:start="143:5" pos:end="143:35"><name pos:start="143:5" pos:end="143:19">ff_dsputil_init</name><argument_list pos:start="143:20" pos:end="143:35">(<argument pos:start="143:21" pos:end="143:27"><expr pos:start="143:21" pos:end="143:27"><operator pos:start="143:21" pos:end="143:21">&amp;</operator><name pos:start="143:22" pos:end="143:27"><name pos:start="143:22" pos:end="143:22">q</name><operator pos:start="143:23" pos:end="143:24">-&gt;</operator><name pos:start="143:25" pos:end="143:27">dsp</name></name></expr></argument>, <argument pos:start="143:30" pos:end="143:34"><expr pos:start="143:30" pos:end="143:34"><name pos:start="143:30" pos:end="143:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:47"><expr pos:start="145:5" pos:end="145:46"><name pos:start="145:5" pos:end="145:21"><name pos:start="145:5" pos:end="145:9">avctx</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:21">sample_fmt</name></name>     <operator pos:start="145:27" pos:end="145:27">=</operator> <name pos:start="145:29" pos:end="145:46">AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="149:71"><expr pos:start="147:5" pos:end="149:70"><name pos:start="147:5" pos:end="147:25"><name pos:start="147:5" pos:end="147:9">avctx</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:25">channel_layout</name></name> <operator pos:start="147:27" pos:end="147:27">=</operator> <ternary pos:start="147:29" pos:end="149:70"><condition pos:start="147:29" pos:end="147:50"><expr pos:start="147:29" pos:end="147:48"><name pos:start="147:29" pos:end="147:43"><name pos:start="147:29" pos:end="147:33">avctx</name><operator pos:start="147:34" pos:end="147:35">-&gt;</operator><name pos:start="147:36" pos:end="147:43">channels</name></name> <operator pos:start="147:45" pos:end="147:46">==</operator> <literal type="number" pos:start="147:48" pos:end="147:48">1</literal></expr> ?</condition><then pos:start="147:52" pos:end="147:68"> <expr pos:start="147:52" pos:end="147:68"><name pos:start="147:52" pos:end="147:68">AV_CH_LAYOUT_MONO</name></expr>

                                                 </then><else pos:start="149:50" pos:end="149:70">: <expr pos:start="149:52" pos:end="149:70"><name pos:start="149:52" pos:end="149:70">AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:42"><expr pos:start="153:5" pos:end="153:41"><call pos:start="153:5" pos:end="153:41"><name pos:start="153:5" pos:end="153:30">avcodec_get_frame_defaults</name><argument_list pos:start="153:31" pos:end="153:41">(<argument pos:start="153:32" pos:end="153:40"><expr pos:start="153:32" pos:end="153:40"><operator pos:start="153:32" pos:end="153:32">&amp;</operator><name pos:start="153:33" pos:end="153:40"><name pos:start="153:33" pos:end="153:33">q</name><operator pos:start="153:34" pos:end="153:35">-&gt;</operator><name pos:start="153:36" pos:end="153:40">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:35"><expr pos:start="155:5" pos:end="155:34"><name pos:start="155:5" pos:end="155:22"><name pos:start="155:5" pos:end="155:9">avctx</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:22">coded_frame</name></name> <operator pos:start="155:24" pos:end="155:24">=</operator> <operator pos:start="155:26" pos:end="155:26">&amp;</operator><name pos:start="155:27" pos:end="155:34"><name pos:start="155:27" pos:end="155:27">q</name><operator pos:start="155:28" pos:end="155:29">-&gt;</operator><name pos:start="155:30" pos:end="155:34">frame</name></name></expr>;</expr_stmt>



    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
