<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20145.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name> <name pos:start="1:16" pos:end="1:27">coroutine_fn</name></type> <name pos:start="1:29" pos:end="1:53">iscsi_co_get_block_status</name><parameter_list pos:start="1:54" pos:end="7:74">(<parameter pos:start="1:55" pos:end="1:74"><decl pos:start="1:55" pos:end="1:74"><type pos:start="1:55" pos:end="1:74"><name pos:start="1:55" pos:end="1:70">BlockDriverState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:74">bs</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:68"><decl pos:start="3:51" pos:end="3:68"><type pos:start="3:51" pos:end="3:68"><name pos:start="3:51" pos:end="3:57">int64_t</name></type> <name pos:start="3:59" pos:end="3:68">sector_num</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:64"><decl pos:start="5:51" pos:end="5:64"><type pos:start="5:51" pos:end="5:64"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:64">nb_sectors</name></decl></parameter>, <parameter pos:start="5:67" pos:end="5:75"><decl pos:start="5:67" pos:end="5:75"><type pos:start="5:67" pos:end="5:75"><name pos:start="5:67" pos:end="5:69">int</name> <modifier pos:start="5:71" pos:end="5:71">*</modifier></type><name pos:start="5:72" pos:end="5:75">pnum</name></decl></parameter>,

                                                  <parameter pos:start="7:51" pos:end="7:73"><decl pos:start="7:51" pos:end="7:73"><type pos:start="7:51" pos:end="7:73"><name pos:start="7:51" pos:end="7:66">BlockDriverState</name> <modifier pos:start="7:68" pos:end="7:68">*</modifier><modifier pos:start="7:69" pos:end="7:69">*</modifier></type><name pos:start="7:70" pos:end="7:73">file</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="199:1">{<block_content pos:start="11:5" pos:end="197:15">

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">IscsiLun</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">iscsilun</name> <init pos:start="11:24" pos:end="11:35">= <expr pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:27">bs</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:30">scsi_get_lba_status</name></name> <modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:36">lbas</name> <init pos:start="13:38" pos:end="13:43">= <expr pos:start="13:40" pos:end="13:43"><name pos:start="13:40" pos:end="13:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:37">scsi_lba_status_descriptor</name></name> <modifier pos:start="15:39" pos:end="15:39">*</modifier></type><name pos:start="15:40" pos:end="15:44">lbasd</name> <init pos:start="15:46" pos:end="15:51">= <expr pos:start="15:48" pos:end="15:51"><name pos:start="15:48" pos:end="15:51">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:20">IscsiTask</name></name></type> <name pos:start="17:22" pos:end="17:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:46"><expr pos:start="23:5" pos:end="23:45"><call pos:start="23:5" pos:end="23:45"><name pos:start="23:5" pos:end="23:27">iscsi_co_init_iscsitask</name><argument_list pos:start="23:28" pos:end="23:45">(<argument pos:start="23:29" pos:end="23:36"><expr pos:start="23:29" pos:end="23:36"><name pos:start="23:29" pos:end="23:36">iscsilun</name></expr></argument>, <argument pos:start="23:39" pos:end="23:44"><expr pos:start="23:39" pos:end="23:44"><operator pos:start="23:39" pos:end="23:39">&amp;</operator><name pos:start="23:40" pos:end="23:44">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:73">(<expr pos:start="27:9" pos:end="27:72"><operator pos:start="27:9" pos:end="27:9">!</operator><call pos:start="27:10" pos:end="27:72"><name pos:start="27:10" pos:end="27:38">is_sector_request_lun_aligned</name><argument_list pos:start="27:39" pos:end="27:72">(<argument pos:start="27:40" pos:end="27:49"><expr pos:start="27:40" pos:end="27:49"><name pos:start="27:40" pos:end="27:49">sector_num</name></expr></argument>, <argument pos:start="27:52" pos:end="27:61"><expr pos:start="27:52" pos:end="27:61"><name pos:start="27:52" pos:end="27:61">nb_sectors</name></expr></argument>, <argument pos:start="27:64" pos:end="27:71"><expr pos:start="27:64" pos:end="27:71"><name pos:start="27:64" pos:end="27:71">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:75" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <operator pos:start="29:15" pos:end="29:15">-</operator><name pos:start="29:16" pos:end="29:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:42">/* default to all sectors allocated */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:26"><expr pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <name pos:start="39:11" pos:end="39:25">BDRV_BLOCK_DATA</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:70"><expr pos:start="41:5" pos:end="41:69"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:10">|=</operator> <operator pos:start="41:12" pos:end="41:12">(</operator><name pos:start="41:13" pos:end="41:22">sector_num</name> <operator pos:start="41:24" pos:end="41:25">&lt;&lt;</operator> <name pos:start="41:27" pos:end="41:42">BDRV_SECTOR_BITS</name><operator pos:start="41:43" pos:end="41:43">)</operator> <operator pos:start="41:45" pos:end="41:45">|</operator> <name pos:start="41:47" pos:end="41:69">BDRV_BLOCK_OFFSET_VALID</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:23"><expr pos:start="43:5" pos:end="43:22"><operator pos:start="43:5" pos:end="43:5">*</operator><name pos:start="43:6" pos:end="43:9">pnum</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <name pos:start="43:13" pos:end="43:22">nb_sectors</name></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:57">/* LUN does not support logical block provisioning */</comment>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:25">(<expr pos:start="49:9" pos:end="49:24"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:24"><name pos:start="49:10" pos:end="49:17">iscsilun</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:24">lbpme</name></name></expr>)</condition> <block pos:start="49:27" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:17">

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="57:1" pos:end="57:6"><name pos:start="57:1" pos:end="57:5">retry</name>:</label>

    <if_stmt pos:start="59:5" pos:end="71:5"><if pos:start="59:5" pos:end="71:5">if <condition pos:start="59:8" pos:end="65:50">(<expr pos:start="59:9" pos:end="65:49"><call pos:start="59:9" pos:end="65:41"><name pos:start="59:9" pos:end="59:33">iscsi_get_lba_status_task</name><argument_list pos:start="59:34" pos:end="65:41">(<argument pos:start="59:35" pos:end="59:49"><expr pos:start="59:35" pos:end="59:49"><name pos:start="59:35" pos:end="59:49"><name pos:start="59:35" pos:end="59:42">iscsilun</name><operator pos:start="59:43" pos:end="59:44">-&gt;</operator><name pos:start="59:45" pos:end="59:49">iscsi</name></name></expr></argument>, <argument pos:start="59:52" pos:end="59:64"><expr pos:start="59:52" pos:end="59:64"><name pos:start="59:52" pos:end="59:64"><name pos:start="59:52" pos:end="59:59">iscsilun</name><operator pos:start="59:60" pos:end="59:61">-&gt;</operator><name pos:start="59:62" pos:end="59:64">lun</name></name></expr></argument>,

                                  <argument pos:start="61:35" pos:end="61:71"><expr pos:start="61:35" pos:end="61:71"><call pos:start="61:35" pos:end="61:71"><name pos:start="61:35" pos:end="61:49">sector_qemu2lun</name><argument_list pos:start="61:50" pos:end="61:71">(<argument pos:start="61:51" pos:end="61:60"><expr pos:start="61:51" pos:end="61:60"><name pos:start="61:51" pos:end="61:60">sector_num</name></expr></argument>, <argument pos:start="61:63" pos:end="61:70"><expr pos:start="61:63" pos:end="61:70"><name pos:start="61:63" pos:end="61:70">iscsilun</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="63:35" pos:end="63:40"><expr pos:start="63:35" pos:end="63:40"><literal type="number" pos:start="63:35" pos:end="63:37">8</literal> <operator pos:start="63:37" pos:end="63:37">+</operator> <literal type="number" pos:start="63:39" pos:end="63:40">16</literal></expr></argument>, <argument pos:start="63:43" pos:end="63:61"><expr pos:start="63:43" pos:end="63:61"><name pos:start="63:43" pos:end="63:61">iscsi_co_generic_cb</name></expr></argument>,

                                  <argument pos:start="65:35" pos:end="65:40"><expr pos:start="65:35" pos:end="65:40"><operator pos:start="65:35" pos:end="65:35">&amp;</operator><name pos:start="65:36" pos:end="65:40">iTask</name></expr></argument>)</argument_list></call> <operator pos:start="65:43" pos:end="65:44">==</operator> <name pos:start="65:46" pos:end="65:49">NULL</name></expr>)</condition> <block pos:start="65:52" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:17">

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <operator pos:start="67:15" pos:end="67:15">-</operator><name pos:start="67:16" pos:end="67:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <while pos:start="75:5" pos:end="81:5">while <condition pos:start="75:11" pos:end="75:27">(<expr pos:start="75:12" pos:end="75:26"><operator pos:start="75:12" pos:end="75:12">!</operator><name pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:17">iTask</name><operator pos:start="75:18" pos:end="75:18">.</operator><name pos:start="75:19" pos:end="75:26">complete</name></name></expr>)</condition> <block pos:start="75:29" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:31">

        <expr_stmt pos:start="77:9" pos:end="77:35"><expr pos:start="77:9" pos:end="77:34"><call pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:24">iscsi_set_events</name><argument_list pos:start="77:25" pos:end="77:34">(<argument pos:start="77:26" pos:end="77:33"><expr pos:start="77:26" pos:end="77:33"><name pos:start="77:26" pos:end="77:33">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><call pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:28">qemu_coroutine_yield</name><argument_list pos:start="79:29" pos:end="79:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="85:5" pos:end="99:5"><if pos:start="85:5" pos:end="99:5">if <condition pos:start="85:8" pos:end="85:23">(<expr pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:13">iTask</name><operator pos:start="85:14" pos:end="85:14">.</operator><name pos:start="85:15" pos:end="85:22">do_retry</name></name></expr>)</condition> <block pos:start="85:25" pos:end="99:5">{<block_content pos:start="87:9" pos:end="97:19">

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:31">(<expr pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:17">iTask</name><operator pos:start="87:18" pos:end="87:18">.</operator><name pos:start="87:19" pos:end="87:22">task</name></name> <operator pos:start="87:24" pos:end="87:25">!=</operator> <name pos:start="87:27" pos:end="87:30">NULL</name></expr>)</condition> <block pos:start="87:33" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:30">

            <expr_stmt pos:start="89:13" pos:end="89:44"><expr pos:start="89:13" pos:end="89:43"><call pos:start="89:13" pos:end="89:43"><name pos:start="89:13" pos:end="89:31">scsi_free_scsi_task</name><argument_list pos:start="89:32" pos:end="89:43">(<argument pos:start="89:33" pos:end="89:42"><expr pos:start="89:33" pos:end="89:42"><name pos:start="89:33" pos:end="89:42"><name pos:start="89:33" pos:end="89:37">iTask</name><operator pos:start="89:38" pos:end="89:38">.</operator><name pos:start="89:39" pos:end="89:42">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:30"><expr pos:start="91:13" pos:end="91:29"><name pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:17">iTask</name><operator pos:start="91:18" pos:end="91:18">.</operator><name pos:start="91:19" pos:end="91:22">task</name></name> <operator pos:start="91:24" pos:end="91:24">=</operator> <name pos:start="91:26" pos:end="91:29">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:27"><expr pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:13">iTask</name><operator pos:start="95:14" pos:end="95:14">.</operator><name pos:start="95:15" pos:end="95:22">complete</name></name> <operator pos:start="95:24" pos:end="95:24">=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:19">goto <name pos:start="97:14" pos:end="97:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="115:5"><if pos:start="103:5" pos:end="115:5">if <condition pos:start="103:8" pos:end="103:41">(<expr pos:start="103:9" pos:end="103:40"><name pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:13">iTask</name><operator pos:start="103:14" pos:end="103:14">.</operator><name pos:start="103:15" pos:end="103:20">status</name></name> <operator pos:start="103:22" pos:end="103:23">!=</operator> <name pos:start="103:25" pos:end="103:40">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="103:43" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:17">

        <comment type="block" pos:start="105:9" pos:end="111:41">/* in case the get_lba_status_callout fails (i.e.

         * because the device is busy or the cmd is not

         * supported) we pretend all blocks are allocated

         * for backwards compatibility */</comment>

        <goto pos:start="113:9" pos:end="113:17">goto <name pos:start="113:14" pos:end="113:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:46"><expr pos:start="119:5" pos:end="119:45"><name pos:start="119:5" pos:end="119:8">lbas</name> <operator pos:start="119:10" pos:end="119:10">=</operator> <call pos:start="119:12" pos:end="119:45"><name pos:start="119:12" pos:end="119:33">scsi_datain_unmarshall</name><argument_list pos:start="119:34" pos:end="119:45">(<argument pos:start="119:35" pos:end="119:44"><expr pos:start="119:35" pos:end="119:44"><name pos:start="119:35" pos:end="119:44"><name pos:start="119:35" pos:end="119:39">iTask</name><operator pos:start="119:40" pos:end="119:40">.</operator><name pos:start="119:41" pos:end="119:44">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:21">(<expr pos:start="121:9" pos:end="121:20"><name pos:start="121:9" pos:end="121:12">lbas</name> <operator pos:start="121:14" pos:end="121:15">==</operator> <name pos:start="121:17" pos:end="121:20">NULL</name></expr>)</condition> <block pos:start="121:23" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:17">

        <expr_stmt pos:start="123:9" pos:end="123:19"><expr pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:11">ret</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <operator pos:start="123:15" pos:end="123:15">-</operator><name pos:start="123:16" pos:end="123:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="125:9" pos:end="125:17">goto <name pos:start="125:14" pos:end="125:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:34"><expr pos:start="131:5" pos:end="131:33"><name pos:start="131:5" pos:end="131:9">lbasd</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <operator pos:start="131:13" pos:end="131:13">&amp;</operator><name pos:start="131:14" pos:end="131:33"><name pos:start="131:14" pos:end="131:17">lbas</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:30">descriptors</name><index pos:start="131:31" pos:end="131:33">[<expr pos:start="131:32" pos:end="131:32"><literal type="number" pos:start="131:32" pos:end="131:32">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:60">(<expr pos:start="135:9" pos:end="135:59"><call pos:start="135:9" pos:end="135:45"><name pos:start="135:9" pos:end="135:23">sector_qemu2lun</name><argument_list pos:start="135:24" pos:end="135:45">(<argument pos:start="135:25" pos:end="135:34"><expr pos:start="135:25" pos:end="135:34"><name pos:start="135:25" pos:end="135:34">sector_num</name></expr></argument>, <argument pos:start="135:37" pos:end="135:44"><expr pos:start="135:37" pos:end="135:44"><name pos:start="135:37" pos:end="135:44">iscsilun</name></expr></argument>)</argument_list></call> <operator pos:start="135:47" pos:end="135:48">!=</operator> <name pos:start="135:50" pos:end="135:59"><name pos:start="135:50" pos:end="135:54">lbasd</name><operator pos:start="135:55" pos:end="135:56">-&gt;</operator><name pos:start="135:57" pos:end="135:59">lba</name></name></expr>)</condition> <block pos:start="135:62" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:17">

        <expr_stmt pos:start="137:9" pos:end="137:19"><expr pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <operator pos:start="137:15" pos:end="137:15">-</operator><name pos:start="137:16" pos:end="137:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="139:9" pos:end="139:17">goto <name pos:start="139:14" pos:end="139:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:57"><expr pos:start="145:5" pos:end="145:56"><operator pos:start="145:5" pos:end="145:5">*</operator><name pos:start="145:6" pos:end="145:9">pnum</name> <operator pos:start="145:11" pos:end="145:11">=</operator> <call pos:start="145:13" pos:end="145:56"><name pos:start="145:13" pos:end="145:27">sector_lun2qemu</name><argument_list pos:start="145:28" pos:end="145:56">(<argument pos:start="145:29" pos:end="145:45"><expr pos:start="145:29" pos:end="145:45"><name pos:start="145:29" pos:end="145:45"><name pos:start="145:29" pos:end="145:33">lbasd</name><operator pos:start="145:34" pos:end="145:35">-&gt;</operator><name pos:start="145:36" pos:end="145:45">num_blocks</name></name></expr></argument>, <argument pos:start="145:48" pos:end="145:55"><expr pos:start="145:48" pos:end="145:55"><name pos:start="145:48" pos:end="145:55">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="149:5" pos:end="161:5"><if pos:start="149:5" pos:end="161:5">if <condition pos:start="149:8" pos:end="151:63">(<expr pos:start="149:9" pos:end="151:62"><name pos:start="149:9" pos:end="149:27"><name pos:start="149:9" pos:end="149:13">lbasd</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:27">provisioning</name></name> <operator pos:start="149:29" pos:end="149:30">==</operator> <name pos:start="149:32" pos:end="149:65">SCSI_PROVISIONING_TYPE_DEALLOCATED</name> <operator pos:start="149:67" pos:end="149:68">||</operator>

        <name pos:start="151:9" pos:end="151:27"><name pos:start="151:9" pos:end="151:13">lbasd</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:27">provisioning</name></name> <operator pos:start="151:29" pos:end="151:30">==</operator> <name pos:start="151:32" pos:end="151:62">SCSI_PROVISIONING_TYPE_ANCHORED</name></expr>)</condition> <block pos:start="151:65" pos:end="161:5">{<block_content pos:start="153:9" pos:end="159:9">

        <expr_stmt pos:start="153:9" pos:end="153:32"><expr pos:start="153:9" pos:end="153:31"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:14">&amp;=</operator> <operator pos:start="153:16" pos:end="153:16">~</operator><name pos:start="153:17" pos:end="153:31">BDRV_BLOCK_DATA</name></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="159:9"><if pos:start="155:9" pos:end="159:9">if <condition pos:start="155:12" pos:end="155:28">(<expr pos:start="155:13" pos:end="155:27"><name pos:start="155:13" pos:end="155:27"><name pos:start="155:13" pos:end="155:20">iscsilun</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:27">lbprz</name></name></expr>)</condition> <block pos:start="155:30" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:35">

            <expr_stmt pos:start="157:13" pos:end="157:35"><expr pos:start="157:13" pos:end="157:34"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:18">|=</operator> <name pos:start="157:20" pos:end="157:34">BDRV_BLOCK_ZERO</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="173:5"><if pos:start="165:5" pos:end="169:5">if <condition pos:start="165:8" pos:end="165:30">(<expr pos:start="165:9" pos:end="165:29"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:13">&amp;</operator> <name pos:start="165:15" pos:end="165:29">BDRV_BLOCK_ZERO</name></expr>)</condition> <block pos:start="165:32" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:63">

        <expr_stmt pos:start="167:9" pos:end="167:63"><expr pos:start="167:9" pos:end="167:62"><call pos:start="167:9" pos:end="167:62"><name pos:start="167:9" pos:end="167:33">iscsi_allocationmap_clear</name><argument_list pos:start="167:34" pos:end="167:62">(<argument pos:start="167:35" pos:end="167:42"><expr pos:start="167:35" pos:end="167:42"><name pos:start="167:35" pos:end="167:42">iscsilun</name></expr></argument>, <argument pos:start="167:45" pos:end="167:54"><expr pos:start="167:45" pos:end="167:54"><name pos:start="167:45" pos:end="167:54">sector_num</name></expr></argument>, <argument pos:start="167:57" pos:end="167:61"><expr pos:start="167:57" pos:end="167:61"><operator pos:start="167:57" pos:end="167:57">*</operator><name pos:start="167:58" pos:end="167:61">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="169:7" pos:end="173:5">else <block pos:start="169:12" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:61">

        <expr_stmt pos:start="171:9" pos:end="171:61"><expr pos:start="171:9" pos:end="171:60"><call pos:start="171:9" pos:end="171:60"><name pos:start="171:9" pos:end="171:31">iscsi_allocationmap_set</name><argument_list pos:start="171:32" pos:end="171:60">(<argument pos:start="171:33" pos:end="171:40"><expr pos:start="171:33" pos:end="171:40"><name pos:start="171:33" pos:end="171:40">iscsilun</name></expr></argument>, <argument pos:start="171:43" pos:end="171:52"><expr pos:start="171:43" pos:end="171:52"><name pos:start="171:43" pos:end="171:52">sector_num</name></expr></argument>, <argument pos:start="171:55" pos:end="171:59"><expr pos:start="171:55" pos:end="171:59"><operator pos:start="171:55" pos:end="171:55">*</operator><name pos:start="171:56" pos:end="171:59">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="177:5" pos:end="181:5"><if pos:start="177:5" pos:end="181:5">if <condition pos:start="177:8" pos:end="177:27">(<expr pos:start="177:9" pos:end="177:26"><operator pos:start="177:9" pos:end="177:9">*</operator><name pos:start="177:10" pos:end="177:13">pnum</name> <operator pos:start="177:15" pos:end="177:15">&gt;</operator> <name pos:start="177:17" pos:end="177:26">nb_sectors</name></expr>)</condition> <block pos:start="177:29" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:27">

        <expr_stmt pos:start="179:9" pos:end="179:27"><expr pos:start="179:9" pos:end="179:26"><operator pos:start="179:9" pos:end="179:9">*</operator><name pos:start="179:10" pos:end="179:13">pnum</name> <operator pos:start="179:15" pos:end="179:15">=</operator> <name pos:start="179:17" pos:end="179:26">nb_sectors</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="183:1" pos:end="183:4"><name pos:start="183:1" pos:end="183:3">out</name>:</label>

    <if_stmt pos:start="185:5" pos:end="189:5"><if pos:start="185:5" pos:end="189:5">if <condition pos:start="185:8" pos:end="185:27">(<expr pos:start="185:9" pos:end="185:26"><name pos:start="185:9" pos:end="185:18"><name pos:start="185:9" pos:end="185:13">iTask</name><operator pos:start="185:14" pos:end="185:14">.</operator><name pos:start="185:15" pos:end="185:18">task</name></name> <operator pos:start="185:20" pos:end="185:21">!=</operator> <name pos:start="185:23" pos:end="185:26">NULL</name></expr>)</condition> <block pos:start="185:29" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:40">

        <expr_stmt pos:start="187:9" pos:end="187:40"><expr pos:start="187:9" pos:end="187:39"><call pos:start="187:9" pos:end="187:39"><name pos:start="187:9" pos:end="187:27">scsi_free_scsi_task</name><argument_list pos:start="187:28" pos:end="187:39">(<argument pos:start="187:29" pos:end="187:38"><expr pos:start="187:29" pos:end="187:38"><name pos:start="187:29" pos:end="187:38"><name pos:start="187:29" pos:end="187:33">iTask</name><operator pos:start="187:34" pos:end="187:34">.</operator><name pos:start="187:35" pos:end="187:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="191:5" pos:end="195:5"><if pos:start="191:5" pos:end="195:5">if <condition pos:start="191:8" pos:end="191:49">(<expr pos:start="191:9" pos:end="191:48"><name pos:start="191:9" pos:end="191:11">ret</name> <operator pos:start="191:13" pos:end="191:13">&gt;</operator> <literal type="number" pos:start="191:15" pos:end="191:15">0</literal> <operator pos:start="191:17" pos:end="191:18">&amp;&amp;</operator> <name pos:start="191:20" pos:end="191:22">ret</name> <operator pos:start="191:24" pos:end="191:24">&amp;</operator> <name pos:start="191:26" pos:end="191:48">BDRV_BLOCK_OFFSET_VALID</name></expr>)</condition> <block pos:start="191:51" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:19">

        <expr_stmt pos:start="193:9" pos:end="193:19"><expr pos:start="193:9" pos:end="193:18"><operator pos:start="193:9" pos:end="193:9">*</operator><name pos:start="193:10" pos:end="193:13">file</name> <operator pos:start="193:15" pos:end="193:15">=</operator> <name pos:start="193:17" pos:end="193:18">bs</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="197:5" pos:end="197:15">return <expr pos:start="197:12" pos:end="197:14"><name pos:start="197:12" pos:end="197:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
