<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/120.c" pos:tabs="8"><function pos:start="1:1" pos:end="441:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:40">qemu_rdma_registration_handle</name><parameter_list pos:start="1:41" pos:end="3:56">(<parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:49">QEMUFile</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">f</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:58">void</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:66">opaque</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:49">uint64_t</name></type> <name pos:start="3:51" pos:end="3:55">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="441:1">{<block_content pos:start="7:5" pos:end="439:15">

    <decl_stmt pos:start="7:5" pos:end="13:31"><decl pos:start="7:5" pos:end="13:30"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:21">RDMAControlHeader</name></type> <name pos:start="7:23" pos:end="7:30">reg_resp</name> <init pos:start="7:32" pos:end="13:30">= <expr pos:start="7:34" pos:end="13:30"><block pos:start="7:34" pos:end="13:30">{ <expr pos:start="7:36" pos:end="7:68"><operator pos:start="7:36" pos:end="7:36">.</operator><name pos:start="7:37" pos:end="7:39">len</name> <operator pos:start="7:41" pos:end="7:41">=</operator> <sizeof pos:start="7:43" pos:end="7:68">sizeof<argument_list pos:start="7:49" pos:end="7:68">(<argument pos:start="7:50" pos:end="7:67"><expr pos:start="7:50" pos:end="7:67"><name pos:start="7:50" pos:end="7:67">RDMARegisterResult</name></expr></argument>)</argument_list></sizeof></expr>,

                               <expr pos:start="9:32" pos:end="9:67"><operator pos:start="9:32" pos:end="9:32">.</operator><name pos:start="9:33" pos:end="9:36">type</name> <operator pos:start="9:38" pos:end="9:38">=</operator> <name pos:start="9:40" pos:end="9:67">RDMA_CONTROL_REGISTER_RESULT</name></expr>,

                               <expr pos:start="11:32" pos:end="11:42"><operator pos:start="11:32" pos:end="11:32">.</operator><name pos:start="11:33" pos:end="11:38">repeat</name> <operator pos:start="11:40" pos:end="11:40">=</operator> <literal type="number" pos:start="11:42" pos:end="11:42">0</literal></expr>,

                             }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="21:31"><decl pos:start="15:5" pos:end="21:30"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:21">RDMAControlHeader</name></type> <name pos:start="15:23" pos:end="15:32">unreg_resp</name> <init pos:start="15:34" pos:end="21:30">= <expr pos:start="15:36" pos:end="21:30"><block pos:start="15:36" pos:end="21:30">{ <expr pos:start="15:38" pos:end="15:45"><operator pos:start="15:38" pos:end="15:38">.</operator><name pos:start="15:39" pos:end="15:41">len</name> <operator pos:start="15:43" pos:end="15:43">=</operator> <literal type="number" pos:start="15:45" pos:end="15:45">0</literal></expr>,

                               <expr pos:start="17:32" pos:end="17:71"><operator pos:start="17:32" pos:end="17:32">.</operator><name pos:start="17:33" pos:end="17:36">type</name> <operator pos:start="17:38" pos:end="17:38">=</operator> <name pos:start="17:40" pos:end="17:71">RDMA_CONTROL_UNREGISTER_FINISHED</name></expr>,

                               <expr pos:start="19:32" pos:end="19:42"><operator pos:start="19:32" pos:end="19:32">.</operator><name pos:start="19:33" pos:end="19:38">repeat</name> <operator pos:start="19:40" pos:end="19:40">=</operator> <literal type="number" pos:start="19:42" pos:end="19:42">0</literal></expr>,

                             }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="25:47"><decl pos:start="23:5" pos:end="25:46"><type pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:21">RDMAControlHeader</name></type> <name pos:start="23:23" pos:end="23:28">blocks</name> <init pos:start="23:30" pos:end="25:46">= <expr pos:start="23:32" pos:end="25:46"><block pos:start="23:32" pos:end="25:46">{ <expr pos:start="23:34" pos:end="23:71"><operator pos:start="23:34" pos:end="23:34">.</operator><name pos:start="23:35" pos:end="23:38">type</name> <operator pos:start="23:40" pos:end="23:40">=</operator> <name pos:start="23:42" pos:end="23:71">RDMA_CONTROL_RAM_BLOCKS_RESULT</name></expr>,

                                 <expr pos:start="25:34" pos:end="25:44"><operator pos:start="25:34" pos:end="25:34">.</operator><name pos:start="25:35" pos:end="25:40">repeat</name> <operator pos:start="25:42" pos:end="25:42">=</operator> <literal type="number" pos:start="25:44" pos:end="25:44">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:33"><decl pos:start="27:5" pos:end="27:32"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">QEMUFileRDMA</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:23">rfile</name> <init pos:start="27:25" pos:end="27:32">= <expr pos:start="27:27" pos:end="27:32"><name pos:start="27:27" pos:end="27:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:36"><decl pos:start="29:5" pos:end="29:35"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:15">RDMAContext</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier></type><name pos:start="29:18" pos:end="29:21">rdma</name> <init pos:start="29:23" pos:end="29:35">= <expr pos:start="29:25" pos:end="29:35"><name pos:start="29:25" pos:end="29:35"><name pos:start="29:25" pos:end="29:29">rfile</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:35">rdma</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:53"><decl pos:start="31:5" pos:end="31:52"><type pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:19">RDMALocalBlocks</name> <modifier pos:start="31:21" pos:end="31:21">*</modifier></type><name pos:start="31:22" pos:end="31:26">local</name> <init pos:start="31:28" pos:end="31:52">= <expr pos:start="31:30" pos:end="31:52"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:52"><name pos:start="31:31" pos:end="31:34">rdma</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:52">local_ram_blocks</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:27"><decl pos:start="33:5" pos:end="33:26"><type pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:21">RDMAControlHeader</name></type> <name pos:start="33:23" pos:end="33:26">head</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:34"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:16">RDMARegister</name> <modifier pos:start="35:18" pos:end="35:18">*</modifier></type><name pos:start="35:19" pos:end="35:21">reg</name></decl>, <decl pos:start="35:24" pos:end="35:33"><type ref="prev" pos:start="35:5" pos:end="35:18"><modifier pos:start="35:24" pos:end="35:24">*</modifier></type><name pos:start="35:25" pos:end="35:33">registers</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:23"><decl pos:start="37:5" pos:end="37:22"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:16">RDMACompress</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:22">comp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:35"><decl pos:start="39:5" pos:end="39:34"><type pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:22">RDMARegisterResult</name> <modifier pos:start="39:24" pos:end="39:24">*</modifier></type><name pos:start="39:25" pos:end="39:34">reg_result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:77"><decl pos:start="41:5" pos:end="41:76"><type pos:start="41:5" pos:end="41:29"><specifier pos:start="41:5" pos:end="41:10">static</specifier> <name pos:start="41:12" pos:end="41:29">RDMARegisterResult</name></type> <name pos:start="41:31" pos:end="41:76"><name pos:start="41:31" pos:end="41:37">results</name><index pos:start="41:38" pos:end="41:76">[<expr pos:start="41:39" pos:end="41:75"><name pos:start="41:39" pos:end="41:75">RDMA_CONTROL_MAX_COMMANDS_PER_MESSAGE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:26"><decl pos:start="43:5" pos:end="43:25"><type pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:18">RDMALocalBlock</name> <modifier pos:start="43:20" pos:end="43:20">*</modifier></type><name pos:start="43:21" pos:end="43:25">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:20"><decl pos:start="45:5" pos:end="45:19"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:8">void</name> <modifier pos:start="45:10" pos:end="45:10">*</modifier></type><name pos:start="45:11" pos:end="45:19">host_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:16"><decl pos:start="47:5" pos:end="47:15"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:11">ret</name> <init pos:start="47:13" pos:end="47:15">= <expr pos:start="47:15" pos:end="47:15"><literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:16"><decl pos:start="49:5" pos:end="49:15"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:11">idx</name> <init pos:start="49:13" pos:end="49:15">= <expr pos:start="49:15" pos:end="49:15"><literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:18"><decl pos:start="51:5" pos:end="51:17"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:13">count</name> <init pos:start="51:15" pos:end="51:17">= <expr pos:start="51:17" pos:end="51:17"><literal type="number" pos:start="51:17" pos:end="51:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:14"><decl pos:start="53:5" pos:end="53:13"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:9">i</name> <init pos:start="53:11" pos:end="53:13">= <expr pos:start="53:13" pos:end="53:13"><literal type="number" pos:start="53:13" pos:end="53:13">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:24"><expr pos:start="57:5" pos:end="57:23"><call pos:start="57:5" pos:end="57:23"><name pos:start="57:5" pos:end="57:21">CHECK_ERROR_STATE</name><argument_list pos:start="57:22" pos:end="57:23">()</argument_list></call></expr>;</expr_stmt>



    <do pos:start="61:5" pos:end="429:16">do <block pos:start="61:8" pos:end="429:5">{<block_content pos:start="63:9" pos:end="427:9">

        <expr_stmt pos:start="63:9" pos:end="63:70"><expr pos:start="63:9" pos:end="63:69"><call pos:start="63:9" pos:end="63:69"><name pos:start="63:9" pos:end="63:17">DDDPRINTF</name><argument_list pos:start="63:18" pos:end="63:69">(<argument pos:start="63:19" pos:end="63:61"><expr pos:start="63:19" pos:end="63:61"><literal type="string" pos:start="63:19" pos:end="63:46">"Waiting for next request %"</literal> <name pos:start="63:48" pos:end="63:53">PRIu64</name> <literal type="string" pos:start="63:55" pos:end="63:61">"...\n"</literal></expr></argument>, <argument pos:start="63:64" pos:end="63:68"><expr pos:start="63:64" pos:end="63:68"><name pos:start="63:64" pos:end="63:68">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:70"><expr pos:start="67:9" pos:end="67:69"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:69"><name pos:start="67:15" pos:end="67:37">qemu_rdma_exchange_recv</name><argument_list pos:start="67:38" pos:end="67:69">(<argument pos:start="67:39" pos:end="67:42"><expr pos:start="67:39" pos:end="67:42"><name pos:start="67:39" pos:end="67:42">rdma</name></expr></argument>, <argument pos:start="67:45" pos:end="67:49"><expr pos:start="67:45" pos:end="67:49"><operator pos:start="67:45" pos:end="67:45">&amp;</operator><name pos:start="67:46" pos:end="67:49">head</name></expr></argument>, <argument pos:start="67:52" pos:end="67:68"><expr pos:start="67:52" pos:end="67:68"><name pos:start="67:52" pos:end="67:68">RDMA_CONTROL_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:20">(<expr pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">&lt;</operator> <literal type="number" pos:start="71:19" pos:end="71:19">0</literal></expr>)</condition> <block pos:start="71:22" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:18">

            <break pos:start="73:13" pos:end="73:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="79:9" pos:end="89:9"><if pos:start="79:9" pos:end="89:9">if <condition pos:start="79:12" pos:end="79:64">(<expr pos:start="79:13" pos:end="79:63"><name pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:16">head</name><operator pos:start="79:17" pos:end="79:17">.</operator><name pos:start="79:18" pos:end="79:23">repeat</name></name> <operator pos:start="79:25" pos:end="79:25">&gt;</operator> <name pos:start="79:27" pos:end="79:63">RDMA_CONTROL_MAX_COMMANDS_PER_MESSAGE</name></expr>)</condition> <block pos:start="79:66" pos:end="89:9">{<block_content pos:start="81:13" pos:end="87:18">

            <expr_stmt pos:start="81:13" pos:end="83:55"><expr pos:start="81:13" pos:end="83:54"><call pos:start="81:13" pos:end="83:54"><name pos:start="81:13" pos:end="81:19">fprintf</name><argument_list pos:start="81:20" pos:end="83:54">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26">stderr</name></expr></argument>, <argument pos:start="81:29" pos:end="83:40"><expr pos:start="81:29" pos:end="83:40"><literal type="string" pos:start="81:29" pos:end="81:75">"rdma: Too many requests in this message (%d)."</literal>

                            <literal type="string" pos:start="83:29" pos:end="83:40">"Bailing.\n"</literal></expr></argument>, <argument pos:start="83:43" pos:end="83:53"><expr pos:start="83:43" pos:end="83:53"><name pos:start="83:43" pos:end="83:53"><name pos:start="83:43" pos:end="83:46">head</name><operator pos:start="83:47" pos:end="83:47">.</operator><name pos:start="83:48" pos:end="83:53">repeat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:23"><expr pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <operator pos:start="85:19" pos:end="85:19">-</operator><name pos:start="85:20" pos:end="85:22">EIO</name></expr>;</expr_stmt>

            <break pos:start="87:13" pos:end="87:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="93:9" pos:end="427:9">switch <condition pos:start="93:16" pos:end="93:26">(<expr pos:start="93:17" pos:end="93:25"><name pos:start="93:17" pos:end="93:25"><name pos:start="93:17" pos:end="93:20">head</name><operator pos:start="93:21" pos:end="93:21">.</operator><name pos:start="93:22" pos:end="93:25">type</name></name></expr>)</condition> <block pos:start="93:28" pos:end="427:9">{<block_content pos:start="95:9" pos:end="425:21">

        <case pos:start="95:9" pos:end="95:35">case <expr pos:start="95:14" pos:end="95:34"><name pos:start="95:14" pos:end="95:34">RDMA_CONTROL_COMPRESS</name></expr>:</case>

            <expr_stmt pos:start="97:13" pos:end="97:68"><expr pos:start="97:13" pos:end="97:67"><name pos:start="97:13" pos:end="97:16">comp</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <operator pos:start="97:20" pos:end="97:20">(</operator><name pos:start="97:21" pos:end="97:32">RDMACompress</name> <operator pos:start="97:34" pos:end="97:34">*</operator><operator pos:start="97:35" pos:end="97:35">)</operator> <name pos:start="97:37" pos:end="97:54"><name pos:start="97:37" pos:end="97:40">rdma</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:49">wr_data</name><index pos:start="97:50" pos:end="97:54">[<expr pos:start="97:51" pos:end="97:53"><name pos:start="97:51" pos:end="97:53">idx</name></expr>]</index></name><operator pos:start="97:55" pos:end="97:55">.</operator><name pos:start="97:56" pos:end="97:67">control_curr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:38"><expr pos:start="99:13" pos:end="99:37"><call pos:start="99:13" pos:end="99:37"><name pos:start="99:13" pos:end="99:31">network_to_compress</name><argument_list pos:start="99:32" pos:end="99:37">(<argument pos:start="99:33" pos:end="99:36"><expr pos:start="99:33" pos:end="99:36"><name pos:start="99:33" pos:end="99:36">comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="103:13" pos:end="107:65"><expr pos:start="103:13" pos:end="107:64"><call pos:start="103:13" pos:end="107:64"><name pos:start="103:13" pos:end="103:20">DDPRINTF</name><argument_list pos:start="103:21" pos:end="107:64">(<argument pos:start="103:22" pos:end="105:60"><expr pos:start="103:22" pos:end="105:60"><literal type="string" pos:start="103:22" pos:end="103:44">"Zapping zero chunk: %"</literal> <name pos:start="103:46" pos:end="103:51">PRId64</name>

                    <literal type="string" pos:start="105:21" pos:end="105:48">" bytes, index %d, offset %"</literal> <name pos:start="105:50" pos:end="105:55">PRId64</name> <literal type="string" pos:start="105:57" pos:end="105:60">"\n"</literal></expr></argument>,

                    <argument pos:start="107:21" pos:end="107:32"><expr pos:start="107:21" pos:end="107:32"><name pos:start="107:21" pos:end="107:32"><name pos:start="107:21" pos:end="107:24">comp</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:32">length</name></name></expr></argument>, <argument pos:start="107:35" pos:end="107:49"><expr pos:start="107:35" pos:end="107:49"><name pos:start="107:35" pos:end="107:49"><name pos:start="107:35" pos:end="107:38">comp</name><operator pos:start="107:39" pos:end="107:40">-&gt;</operator><name pos:start="107:41" pos:end="107:49">block_idx</name></name></expr></argument>, <argument pos:start="107:52" pos:end="107:63"><expr pos:start="107:52" pos:end="107:63"><name pos:start="107:52" pos:end="107:63"><name pos:start="107:52" pos:end="107:55">comp</name><operator pos:start="107:56" pos:end="107:57">-&gt;</operator><name pos:start="107:58" pos:end="107:63">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:69"><expr pos:start="109:13" pos:end="109:68"><name pos:start="109:13" pos:end="109:17">block</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <operator pos:start="109:21" pos:end="109:21">&amp;</operator><operator pos:start="109:22" pos:end="109:22">(</operator><name pos:start="109:23" pos:end="109:67"><name pos:start="109:23" pos:end="109:26">rdma</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:44">local_ram_blocks</name><operator pos:start="109:45" pos:end="109:45">.</operator><name pos:start="109:46" pos:end="109:50">block</name><index pos:start="109:51" pos:end="109:67">[<expr pos:start="109:52" pos:end="109:66"><name pos:start="109:52" pos:end="109:66"><name pos:start="109:52" pos:end="109:55">comp</name><operator pos:start="109:56" pos:end="109:57">-&gt;</operator><name pos:start="109:58" pos:end="109:66">block_idx</name></name></expr>]</index></name><operator pos:start="109:68" pos:end="109:68">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="113:13" pos:end="115:59"><expr pos:start="113:13" pos:end="115:58"><name pos:start="113:13" pos:end="113:21">host_addr</name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:46"><name pos:start="113:25" pos:end="113:29">block</name><operator pos:start="113:30" pos:end="113:31">-&gt;</operator><name pos:start="113:32" pos:end="113:46">local_host_addr</name></name> <operator pos:start="113:48" pos:end="113:48">+</operator>

                            <operator pos:start="115:29" pos:end="115:29">(</operator><name pos:start="115:30" pos:end="115:41"><name pos:start="115:30" pos:end="115:33">comp</name><operator pos:start="115:34" pos:end="115:35">-&gt;</operator><name pos:start="115:36" pos:end="115:41">offset</name></name> <operator pos:start="115:43" pos:end="115:43">-</operator> <name pos:start="115:45" pos:end="115:57"><name pos:start="115:45" pos:end="115:49">block</name><operator pos:start="115:50" pos:end="115:51">-&gt;</operator><name pos:start="115:52" pos:end="115:57">offset</name></name><operator pos:start="115:58" pos:end="115:58">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="119:13" pos:end="119:72"><expr pos:start="119:13" pos:end="119:71"><call pos:start="119:13" pos:end="119:71"><name pos:start="119:13" pos:end="119:33">ram_handle_compressed</name><argument_list pos:start="119:34" pos:end="119:71">(<argument pos:start="119:35" pos:end="119:43"><expr pos:start="119:35" pos:end="119:43"><name pos:start="119:35" pos:end="119:43">host_addr</name></expr></argument>, <argument pos:start="119:46" pos:end="119:56"><expr pos:start="119:46" pos:end="119:56"><name pos:start="119:46" pos:end="119:56"><name pos:start="119:46" pos:end="119:49">comp</name><operator pos:start="119:50" pos:end="119:51">-&gt;</operator><name pos:start="119:52" pos:end="119:56">value</name></name></expr></argument>, <argument pos:start="119:59" pos:end="119:70"><expr pos:start="119:59" pos:end="119:70"><name pos:start="119:59" pos:end="119:70"><name pos:start="119:59" pos:end="119:62">comp</name><operator pos:start="119:63" pos:end="119:64">-&gt;</operator><name pos:start="119:65" pos:end="119:70">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>



        <case pos:start="125:9" pos:end="125:44">case <expr pos:start="125:14" pos:end="125:43"><name pos:start="125:14" pos:end="125:43">RDMA_CONTROL_REGISTER_FINISHED</name></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:59"><expr pos:start="127:13" pos:end="127:58"><call pos:start="127:13" pos:end="127:58"><name pos:start="127:13" pos:end="127:21">DDDPRINTF</name><argument_list pos:start="127:22" pos:end="127:58">(<argument pos:start="127:23" pos:end="127:57"><expr pos:start="127:23" pos:end="127:57"><literal type="string" pos:start="127:23" pos:end="127:57">"Current registrations complete.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:21">goto <name pos:start="129:18" pos:end="129:20">out</name>;</goto>



        <case pos:start="133:9" pos:end="133:45">case <expr pos:start="133:14" pos:end="133:44"><name pos:start="133:14" pos:end="133:44">RDMA_CONTROL_RAM_BLOCKS_REQUEST</name></expr>:</case>

            <expr_stmt pos:start="135:13" pos:end="135:55"><expr pos:start="135:13" pos:end="135:54"><call pos:start="135:13" pos:end="135:54"><name pos:start="135:13" pos:end="135:19">DPRINTF</name><argument_list pos:start="135:20" pos:end="135:54">(<argument pos:start="135:21" pos:end="135:53"><expr pos:start="135:21" pos:end="135:53"><literal type="string" pos:start="135:21" pos:end="135:53">"Initial setup info requested.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="139:13" pos:end="153:13"><if pos:start="139:13" pos:end="153:13">if <condition pos:start="139:16" pos:end="139:30">(<expr pos:start="139:17" pos:end="139:29"><name pos:start="139:17" pos:end="139:29"><name pos:start="139:17" pos:end="139:20">rdma</name><operator pos:start="139:21" pos:end="139:22">-&gt;</operator><name pos:start="139:23" pos:end="139:29">pin_all</name></name></expr>)</condition> <block pos:start="139:32" pos:end="153:13">{<block_content pos:start="141:17" pos:end="151:17">

                <expr_stmt pos:start="141:17" pos:end="141:59"><expr pos:start="141:17" pos:end="141:58"><name pos:start="141:17" pos:end="141:19">ret</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <call pos:start="141:23" pos:end="141:58"><name pos:start="141:23" pos:end="141:52">qemu_rdma_reg_whole_ram_blocks</name><argument_list pos:start="141:53" pos:end="141:58">(<argument pos:start="141:54" pos:end="141:57"><expr pos:start="141:54" pos:end="141:57"><name pos:start="141:54" pos:end="141:57">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="143:17" pos:end="151:17"><if pos:start="143:17" pos:end="151:17">if <condition pos:start="143:20" pos:end="143:24">(<expr pos:start="143:21" pos:end="143:23"><name pos:start="143:21" pos:end="143:23">ret</name></expr>)</condition> <block pos:start="143:26" pos:end="151:17">{<block_content pos:start="145:21" pos:end="149:29">

                    <expr_stmt pos:start="145:21" pos:end="147:65"><expr pos:start="145:21" pos:end="147:64"><call pos:start="145:21" pos:end="147:64"><name pos:start="145:21" pos:end="145:27">fprintf</name><argument_list pos:start="145:28" pos:end="147:64">(<argument pos:start="145:29" pos:end="145:34"><expr pos:start="145:29" pos:end="145:34"><name pos:start="145:29" pos:end="145:34">stderr</name></expr></argument>, <argument pos:start="145:37" pos:end="147:63"><expr pos:start="145:37" pos:end="147:63"><literal type="string" pos:start="145:37" pos:end="145:65">"rdma migration: error dest "</literal>

                                    <literal type="string" pos:start="147:37" pos:end="147:63">"registering ram blocks!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="149:21" pos:end="149:29">goto <name pos:start="149:26" pos:end="149:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="157:13" pos:end="167:15">/*

             * Dest uses this to prepare to transmit the RAMBlock descriptions

             * to the source VM after connection setup.

             * Both sides use the "remote" structure to communicate and update

             * their "local" descriptions with what was sent.

             */</comment>

            <for pos:start="169:13" pos:end="193:13">for <control pos:start="169:17" pos:end="169:50">(<init pos:start="169:18" pos:end="169:23"><expr pos:start="169:18" pos:end="169:22"><name pos:start="169:18" pos:end="169:18">i</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <literal type="number" pos:start="169:22" pos:end="169:22">0</literal></expr>;</init> <condition pos:start="169:25" pos:end="169:45"><expr pos:start="169:25" pos:end="169:44"><name pos:start="169:25" pos:end="169:25">i</name> <operator pos:start="169:27" pos:end="169:27">&lt;</operator> <name pos:start="169:29" pos:end="169:44"><name pos:start="169:29" pos:end="169:33">local</name><operator pos:start="169:34" pos:end="169:35">-&gt;</operator><name pos:start="169:36" pos:end="169:44">nb_blocks</name></name></expr>;</condition> <incr pos:start="169:47" pos:end="169:49"><expr pos:start="169:47" pos:end="169:49"><name pos:start="169:47" pos:end="169:47">i</name><operator pos:start="169:48" pos:end="169:49">++</operator></expr></incr>)</control> <block pos:start="169:52" pos:end="193:13">{<block_content pos:start="171:17" pos:end="191:57">

                <expr_stmt pos:start="171:17" pos:end="173:64"><expr pos:start="171:17" pos:end="173:63"><name pos:start="171:17" pos:end="171:30"><name pos:start="171:17" pos:end="171:20">rdma</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:27">block</name><index pos:start="171:28" pos:end="171:30">[<expr pos:start="171:29" pos:end="171:29"><name pos:start="171:29" pos:end="171:29">i</name></expr>]</index></name><operator pos:start="171:31" pos:end="171:31">.</operator><name pos:start="171:32" pos:end="171:47">remote_host_addr</name> <operator pos:start="171:49" pos:end="171:49">=</operator>

                    <operator pos:start="173:21" pos:end="173:21">(</operator><name pos:start="173:22" pos:end="173:29">uint64_t</name><operator pos:start="173:30" pos:end="173:30">)</operator><operator pos:start="173:31" pos:end="173:31">(</operator><name pos:start="173:32" pos:end="173:46"><name pos:start="173:32" pos:end="173:36">local</name><operator pos:start="173:37" pos:end="173:38">-&gt;</operator><name pos:start="173:39" pos:end="173:43">block</name><index pos:start="173:44" pos:end="173:46">[<expr pos:start="173:45" pos:end="173:45"><name pos:start="173:45" pos:end="173:45">i</name></expr>]</index></name><operator pos:start="173:47" pos:end="173:47">.</operator><name pos:start="173:48" pos:end="173:62">local_host_addr</name><operator pos:start="173:63" pos:end="173:63">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="177:17" pos:end="181:17"><if pos:start="177:17" pos:end="181:17">if <condition pos:start="177:20" pos:end="177:34">(<expr pos:start="177:21" pos:end="177:33"><name pos:start="177:21" pos:end="177:33"><name pos:start="177:21" pos:end="177:24">rdma</name><operator pos:start="177:25" pos:end="177:26">-&gt;</operator><name pos:start="177:27" pos:end="177:33">pin_all</name></name></expr>)</condition> <block pos:start="177:36" pos:end="181:17">{<block_content pos:start="179:21" pos:end="179:74">

                    <expr_stmt pos:start="179:21" pos:end="179:74"><expr pos:start="179:21" pos:end="179:73"><name pos:start="179:21" pos:end="179:34"><name pos:start="179:21" pos:end="179:24">rdma</name><operator pos:start="179:25" pos:end="179:26">-&gt;</operator><name pos:start="179:27" pos:end="179:31">block</name><index pos:start="179:32" pos:end="179:34">[<expr pos:start="179:33" pos:end="179:33"><name pos:start="179:33" pos:end="179:33">i</name></expr>]</index></name><operator pos:start="179:35" pos:end="179:35">.</operator><name pos:start="179:36" pos:end="179:46">remote_rkey</name> <operator pos:start="179:48" pos:end="179:48">=</operator> <name pos:start="179:50" pos:end="179:64"><name pos:start="179:50" pos:end="179:54">local</name><operator pos:start="179:55" pos:end="179:56">-&gt;</operator><name pos:start="179:57" pos:end="179:61">block</name><index pos:start="179:62" pos:end="179:64">[<expr pos:start="179:63" pos:end="179:63"><name pos:start="179:63" pos:end="179:63">i</name></expr>]</index></name><operator pos:start="179:65" pos:end="179:65">.</operator><name pos:start="179:66" pos:end="179:73"><name pos:start="179:66" pos:end="179:67">mr</name><operator pos:start="179:68" pos:end="179:69">-&gt;</operator><name pos:start="179:70" pos:end="179:73">rkey</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="185:17" pos:end="185:63"><expr pos:start="185:17" pos:end="185:62"><name pos:start="185:17" pos:end="185:30"><name pos:start="185:17" pos:end="185:20">rdma</name><operator pos:start="185:21" pos:end="185:22">-&gt;</operator><name pos:start="185:23" pos:end="185:27">block</name><index pos:start="185:28" pos:end="185:30">[<expr pos:start="185:29" pos:end="185:29"><name pos:start="185:29" pos:end="185:29">i</name></expr>]</index></name><operator pos:start="185:31" pos:end="185:31">.</operator><name pos:start="185:32" pos:end="185:37">offset</name> <operator pos:start="185:39" pos:end="185:39">=</operator> <name pos:start="185:41" pos:end="185:55"><name pos:start="185:41" pos:end="185:45">local</name><operator pos:start="185:46" pos:end="185:47">-&gt;</operator><name pos:start="185:48" pos:end="185:52">block</name><index pos:start="185:53" pos:end="185:55">[<expr pos:start="185:54" pos:end="185:54"><name pos:start="185:54" pos:end="185:54">i</name></expr>]</index></name><operator pos:start="185:56" pos:end="185:56">.</operator><name pos:start="185:57" pos:end="185:62">offset</name></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:63"><expr pos:start="187:17" pos:end="187:62"><name pos:start="187:17" pos:end="187:30"><name pos:start="187:17" pos:end="187:20">rdma</name><operator pos:start="187:21" pos:end="187:22">-&gt;</operator><name pos:start="187:23" pos:end="187:27">block</name><index pos:start="187:28" pos:end="187:30">[<expr pos:start="187:29" pos:end="187:29"><name pos:start="187:29" pos:end="187:29">i</name></expr>]</index></name><operator pos:start="187:31" pos:end="187:31">.</operator><name pos:start="187:32" pos:end="187:37">length</name> <operator pos:start="187:39" pos:end="187:39">=</operator> <name pos:start="187:41" pos:end="187:55"><name pos:start="187:41" pos:end="187:45">local</name><operator pos:start="187:46" pos:end="187:47">-&gt;</operator><name pos:start="187:48" pos:end="187:52">block</name><index pos:start="187:53" pos:end="187:55">[<expr pos:start="187:54" pos:end="187:54"><name pos:start="187:54" pos:end="187:54">i</name></expr>]</index></name><operator pos:start="187:56" pos:end="187:56">.</operator><name pos:start="187:57" pos:end="187:62">length</name></expr>;</expr_stmt>



                <expr_stmt pos:start="191:17" pos:end="191:57"><expr pos:start="191:17" pos:end="191:56"><call pos:start="191:17" pos:end="191:56"><name pos:start="191:17" pos:end="191:39">remote_block_to_network</name><argument_list pos:start="191:40" pos:end="191:56">(<argument pos:start="191:41" pos:end="191:55"><expr pos:start="191:41" pos:end="191:55"><operator pos:start="191:41" pos:end="191:41">&amp;</operator><name pos:start="191:42" pos:end="191:55"><name pos:start="191:42" pos:end="191:45">rdma</name><operator pos:start="191:46" pos:end="191:47">-&gt;</operator><name pos:start="191:48" pos:end="191:52">block</name><index pos:start="191:53" pos:end="191:55">[<expr pos:start="191:54" pos:end="191:54"><name pos:start="191:54" pos:end="191:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="197:13" pos:end="199:74"><expr pos:start="197:13" pos:end="199:73"><name pos:start="197:13" pos:end="197:22"><name pos:start="197:13" pos:end="197:18">blocks</name><operator pos:start="197:19" pos:end="197:19">.</operator><name pos:start="197:20" pos:end="197:22">len</name></name> <operator pos:start="197:24" pos:end="197:24">=</operator> <name pos:start="197:26" pos:end="197:57"><name pos:start="197:26" pos:end="197:29">rdma</name><operator pos:start="197:30" pos:end="197:31">-&gt;</operator><name pos:start="197:32" pos:end="197:47">local_ram_blocks</name><operator pos:start="197:48" pos:end="197:48">.</operator><name pos:start="197:49" pos:end="197:57">nb_blocks</name></name>

                                                <operator pos:start="199:49" pos:end="199:49">*</operator> <sizeof pos:start="199:51" pos:end="199:73">sizeof<argument_list pos:start="199:57" pos:end="199:73">(<argument pos:start="199:58" pos:end="199:72"><expr pos:start="199:58" pos:end="199:72"><name pos:start="199:58" pos:end="199:72">RDMARemoteBlock</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>





            <expr_stmt pos:start="205:13" pos:end="207:74"><expr pos:start="205:13" pos:end="207:73"><name pos:start="205:13" pos:end="205:15">ret</name> <operator pos:start="205:17" pos:end="205:17">=</operator> <call pos:start="205:19" pos:end="207:73"><name pos:start="205:19" pos:end="205:45">qemu_rdma_post_send_control</name><argument_list pos:start="205:46" pos:end="207:73">(<argument pos:start="205:47" pos:end="205:50"><expr pos:start="205:47" pos:end="205:50"><name pos:start="205:47" pos:end="205:50">rdma</name></expr></argument>,

                                        <argument pos:start="207:41" pos:end="207:63"><expr pos:start="207:41" pos:end="207:63"><operator pos:start="207:41" pos:end="207:41">(</operator><name pos:start="207:42" pos:end="207:48">uint8_t</name> <operator pos:start="207:50" pos:end="207:50">*</operator><operator pos:start="207:51" pos:end="207:51">)</operator> <name pos:start="207:53" pos:end="207:63"><name pos:start="207:53" pos:end="207:56">rdma</name><operator pos:start="207:57" pos:end="207:58">-&gt;</operator><name pos:start="207:59" pos:end="207:63">block</name></name></expr></argument>, <argument pos:start="207:66" pos:end="207:72"><expr pos:start="207:66" pos:end="207:72"><operator pos:start="207:66" pos:end="207:66">&amp;</operator><name pos:start="207:67" pos:end="207:72">blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="211:13" pos:end="217:13"><if pos:start="211:13" pos:end="217:13">if <condition pos:start="211:16" pos:end="211:24">(<expr pos:start="211:17" pos:end="211:23"><name pos:start="211:17" pos:end="211:19">ret</name> <operator pos:start="211:21" pos:end="211:21">&lt;</operator> <literal type="number" pos:start="211:23" pos:end="211:23">0</literal></expr>)</condition> <block pos:start="211:26" pos:end="217:13">{<block_content pos:start="213:17" pos:end="215:25">

                <expr_stmt pos:start="213:17" pos:end="213:80"><expr pos:start="213:17" pos:end="213:79"><call pos:start="213:17" pos:end="213:79"><name pos:start="213:17" pos:end="213:23">fprintf</name><argument_list pos:start="213:24" pos:end="213:79">(<argument pos:start="213:25" pos:end="213:30"><expr pos:start="213:25" pos:end="213:30"><name pos:start="213:25" pos:end="213:30">stderr</name></expr></argument>, <argument pos:start="213:33" pos:end="213:78"><expr pos:start="213:33" pos:end="213:78"><literal type="string" pos:start="213:33" pos:end="213:78">"rdma migration: error sending remote info!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="215:17" pos:end="215:25">goto <name pos:start="215:22" pos:end="215:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <break pos:start="221:13" pos:end="221:18">break;</break>

        <case pos:start="223:9" pos:end="223:43">case <expr pos:start="223:14" pos:end="223:42"><name pos:start="223:14" pos:end="223:42">RDMA_CONTROL_REGISTER_REQUEST</name></expr>:</case>

            <expr_stmt pos:start="225:13" pos:end="225:74"><expr pos:start="225:13" pos:end="225:73"><call pos:start="225:13" pos:end="225:73"><name pos:start="225:13" pos:end="225:20">DDPRINTF</name><argument_list pos:start="225:21" pos:end="225:73">(<argument pos:start="225:22" pos:end="225:59"><expr pos:start="225:22" pos:end="225:59"><literal type="string" pos:start="225:22" pos:end="225:59">"There are %d registration requests\n"</literal></expr></argument>, <argument pos:start="225:62" pos:end="225:72"><expr pos:start="225:62" pos:end="225:72"><name pos:start="225:62" pos:end="225:72"><name pos:start="225:62" pos:end="225:65">head</name><operator pos:start="225:66" pos:end="225:66">.</operator><name pos:start="225:67" pos:end="225:72">repeat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="229:13" pos:end="229:42"><expr pos:start="229:13" pos:end="229:41"><name pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:20">reg_resp</name><operator pos:start="229:21" pos:end="229:21">.</operator><name pos:start="229:22" pos:end="229:27">repeat</name></name> <operator pos:start="229:29" pos:end="229:29">=</operator> <name pos:start="229:31" pos:end="229:41"><name pos:start="229:31" pos:end="229:34">head</name><operator pos:start="229:35" pos:end="229:35">.</operator><name pos:start="229:36" pos:end="229:41">repeat</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:73"><expr pos:start="231:13" pos:end="231:72"><name pos:start="231:13" pos:end="231:21">registers</name> <operator pos:start="231:23" pos:end="231:23">=</operator> <operator pos:start="231:25" pos:end="231:25">(</operator><name pos:start="231:26" pos:end="231:37">RDMARegister</name> <operator pos:start="231:39" pos:end="231:39">*</operator><operator pos:start="231:40" pos:end="231:40">)</operator> <name pos:start="231:42" pos:end="231:59"><name pos:start="231:42" pos:end="231:45">rdma</name><operator pos:start="231:46" pos:end="231:47">-&gt;</operator><name pos:start="231:48" pos:end="231:54">wr_data</name><index pos:start="231:55" pos:end="231:59">[<expr pos:start="231:56" pos:end="231:58"><name pos:start="231:56" pos:end="231:58">idx</name></expr>]</index></name><operator pos:start="231:60" pos:end="231:60">.</operator><name pos:start="231:61" pos:end="231:72">control_curr</name></expr>;</expr_stmt>



            <for pos:start="235:13" pos:end="315:13">for <control pos:start="235:17" pos:end="235:57">(<init pos:start="235:18" pos:end="235:27"><expr pos:start="235:18" pos:end="235:26"><name pos:start="235:18" pos:end="235:22">count</name> <operator pos:start="235:24" pos:end="235:24">=</operator> <literal type="number" pos:start="235:26" pos:end="235:26">0</literal></expr>;</init> <condition pos:start="235:29" pos:end="235:48"><expr pos:start="235:29" pos:end="235:47"><name pos:start="235:29" pos:end="235:33">count</name> <operator pos:start="235:35" pos:end="235:35">&lt;</operator> <name pos:start="235:37" pos:end="235:47"><name pos:start="235:37" pos:end="235:40">head</name><operator pos:start="235:41" pos:end="235:41">.</operator><name pos:start="235:42" pos:end="235:47">repeat</name></name></expr>;</condition> <incr pos:start="235:50" pos:end="235:56"><expr pos:start="235:50" pos:end="235:56"><name pos:start="235:50" pos:end="235:54">count</name><operator pos:start="235:55" pos:end="235:56">++</operator></expr></incr>)</control> <block pos:start="235:59" pos:end="315:13">{<block_content pos:start="237:17" pos:end="313:46">

                <decl_stmt pos:start="237:17" pos:end="237:31"><decl pos:start="237:17" pos:end="237:30"><type pos:start="237:17" pos:end="237:24"><name pos:start="237:17" pos:end="237:24">uint64_t</name></type> <name pos:start="237:26" pos:end="237:30">chunk</name></decl>;</decl_stmt>

                <decl_stmt pos:start="239:17" pos:end="239:49"><decl pos:start="239:17" pos:end="239:36"><type pos:start="239:17" pos:end="239:25"><name pos:start="239:17" pos:end="239:23">uint8_t</name> <modifier pos:start="239:25" pos:end="239:25">*</modifier></type><name pos:start="239:26" pos:end="239:36">chunk_start</name></decl>, <decl pos:start="239:39" pos:end="239:48"><type ref="prev" pos:start="239:17" pos:end="239:25"><modifier pos:start="239:39" pos:end="239:39">*</modifier></type><name pos:start="239:40" pos:end="239:48">chunk_end</name></decl>;</decl_stmt>



                <expr_stmt pos:start="243:17" pos:end="243:40"><expr pos:start="243:17" pos:end="243:39"><name pos:start="243:17" pos:end="243:19">reg</name> <operator pos:start="243:21" pos:end="243:21">=</operator> <operator pos:start="243:23" pos:end="243:23">&amp;</operator><name pos:start="243:24" pos:end="243:39"><name pos:start="243:24" pos:end="243:32">registers</name><index pos:start="243:33" pos:end="243:39">[<expr pos:start="243:34" pos:end="243:38"><name pos:start="243:34" pos:end="243:38">count</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:41"><expr pos:start="245:17" pos:end="245:40"><call pos:start="245:17" pos:end="245:40"><name pos:start="245:17" pos:end="245:35">network_to_register</name><argument_list pos:start="245:36" pos:end="245:40">(<argument pos:start="245:37" pos:end="245:39"><expr pos:start="245:37" pos:end="245:39"><name pos:start="245:37" pos:end="245:39">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="249:17" pos:end="249:45"><expr pos:start="249:17" pos:end="249:44"><name pos:start="249:17" pos:end="249:26">reg_result</name> <operator pos:start="249:28" pos:end="249:28">=</operator> <operator pos:start="249:30" pos:end="249:30">&amp;</operator><name pos:start="249:31" pos:end="249:44"><name pos:start="249:31" pos:end="249:37">results</name><index pos:start="249:38" pos:end="249:44">[<expr pos:start="249:39" pos:end="249:43"><name pos:start="249:39" pos:end="249:43">count</name></expr>]</index></name></expr>;</expr_stmt>



                <expr_stmt pos:start="253:17" pos:end="257:81"><expr pos:start="253:17" pos:end="257:80"><call pos:start="253:17" pos:end="257:80"><name pos:start="253:17" pos:end="253:24">DDPRINTF</name><argument_list pos:start="253:25" pos:end="257:80">(<argument pos:start="253:26" pos:end="255:56"><expr pos:start="253:26" pos:end="255:56"><literal type="string" pos:start="253:26" pos:end="253:78">"Registration request (%d): index %d, current_addr %"</literal>

                         <name pos:start="255:26" pos:end="255:31">PRIu64</name> <literal type="string" pos:start="255:33" pos:end="255:44">" chunks: %"</literal> <name pos:start="255:46" pos:end="255:51">PRIu64</name> <literal type="string" pos:start="255:53" pos:end="255:56">"\n"</literal></expr></argument>, <argument pos:start="255:59" pos:end="255:63"><expr pos:start="255:59" pos:end="255:63"><name pos:start="255:59" pos:end="255:63">count</name></expr></argument>,

                         <argument pos:start="257:26" pos:end="257:43"><expr pos:start="257:26" pos:end="257:43"><name pos:start="257:26" pos:end="257:43"><name pos:start="257:26" pos:end="257:28">reg</name><operator pos:start="257:29" pos:end="257:30">-&gt;</operator><name pos:start="257:31" pos:end="257:43">current_index</name></name></expr></argument>, <argument pos:start="257:46" pos:end="257:66"><expr pos:start="257:46" pos:end="257:66"><name pos:start="257:46" pos:end="257:66"><name pos:start="257:46" pos:end="257:48">reg</name><operator pos:start="257:49" pos:end="257:50">-&gt;</operator><name pos:start="257:51" pos:end="257:53">key</name><operator pos:start="257:54" pos:end="257:54">.</operator><name pos:start="257:55" pos:end="257:66">current_addr</name></name></expr></argument>, <argument pos:start="257:69" pos:end="257:79"><expr pos:start="257:69" pos:end="257:79"><name pos:start="257:69" pos:end="257:79"><name pos:start="257:69" pos:end="257:71">reg</name><operator pos:start="257:72" pos:end="257:73">-&gt;</operator><name pos:start="257:74" pos:end="257:79">chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="261:17" pos:end="261:76"><expr pos:start="261:17" pos:end="261:75"><name pos:start="261:17" pos:end="261:21">block</name> <operator pos:start="261:23" pos:end="261:23">=</operator> <operator pos:start="261:25" pos:end="261:25">&amp;</operator><operator pos:start="261:26" pos:end="261:26">(</operator><name pos:start="261:27" pos:end="261:74"><name pos:start="261:27" pos:end="261:30">rdma</name><operator pos:start="261:31" pos:end="261:32">-&gt;</operator><name pos:start="261:33" pos:end="261:48">local_ram_blocks</name><operator pos:start="261:49" pos:end="261:49">.</operator><name pos:start="261:50" pos:end="261:54">block</name><index pos:start="261:55" pos:end="261:74">[<expr pos:start="261:56" pos:end="261:73"><name pos:start="261:56" pos:end="261:73"><name pos:start="261:56" pos:end="261:58">reg</name><operator pos:start="261:59" pos:end="261:60">-&gt;</operator><name pos:start="261:61" pos:end="261:73">current_index</name></name></expr>]</index></name><operator pos:start="261:75" pos:end="261:75">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="263:17" pos:end="281:17"><if pos:start="263:17" pos:end="273:17">if <condition pos:start="263:20" pos:end="263:40">(<expr pos:start="263:21" pos:end="263:39"><name pos:start="263:21" pos:end="263:39"><name pos:start="263:21" pos:end="263:25">block</name><operator pos:start="263:26" pos:end="263:27">-&gt;</operator><name pos:start="263:28" pos:end="263:39">is_ram_block</name></name></expr>)</condition> <block pos:start="263:42" pos:end="273:17">{<block_content pos:start="265:21" pos:end="271:67">

                    <expr_stmt pos:start="265:21" pos:end="267:73"><expr pos:start="265:21" pos:end="267:72"><name pos:start="265:21" pos:end="265:29">host_addr</name> <operator pos:start="265:31" pos:end="265:31">=</operator> <operator pos:start="265:33" pos:end="265:33">(</operator><name pos:start="265:34" pos:end="265:55"><name pos:start="265:34" pos:end="265:38">block</name><operator pos:start="265:39" pos:end="265:40">-&gt;</operator><name pos:start="265:41" pos:end="265:55">local_host_addr</name></name> <operator pos:start="265:57" pos:end="265:57">+</operator>

                                <operator pos:start="267:33" pos:end="267:33">(</operator><name pos:start="267:34" pos:end="267:54"><name pos:start="267:34" pos:end="267:36">reg</name><operator pos:start="267:37" pos:end="267:38">-&gt;</operator><name pos:start="267:39" pos:end="267:41">key</name><operator pos:start="267:42" pos:end="267:42">.</operator><name pos:start="267:43" pos:end="267:54">current_addr</name></name> <operator pos:start="267:56" pos:end="267:56">-</operator> <name pos:start="267:58" pos:end="267:70"><name pos:start="267:58" pos:end="267:62">block</name><operator pos:start="267:63" pos:end="267:64">-&gt;</operator><name pos:start="267:65" pos:end="267:70">offset</name></name><operator pos:start="267:71" pos:end="267:71">)</operator><operator pos:start="267:72" pos:end="267:72">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="269:21" pos:end="271:67"><expr pos:start="269:21" pos:end="271:66"><name pos:start="269:21" pos:end="269:25">chunk</name> <operator pos:start="269:27" pos:end="269:27">=</operator> <call pos:start="269:29" pos:end="271:66"><name pos:start="269:29" pos:end="269:43">ram_chunk_index</name><argument_list pos:start="269:44" pos:end="271:66">(<argument pos:start="269:45" pos:end="269:66"><expr pos:start="269:45" pos:end="269:66"><name pos:start="269:45" pos:end="269:66"><name pos:start="269:45" pos:end="269:49">block</name><operator pos:start="269:50" pos:end="269:51">-&gt;</operator><name pos:start="269:52" pos:end="269:66">local_host_addr</name></name></expr></argument>,

                                            <argument pos:start="271:45" pos:end="271:65"><expr pos:start="271:45" pos:end="271:65"><operator pos:start="271:45" pos:end="271:45">(</operator><name pos:start="271:46" pos:end="271:52">uint8_t</name> <operator pos:start="271:54" pos:end="271:54">*</operator><operator pos:start="271:55" pos:end="271:55">)</operator> <name pos:start="271:57" pos:end="271:65">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="273:19" pos:end="281:17">else <block pos:start="273:24" pos:end="281:17">{<block_content pos:start="275:21" pos:end="279:73">

                    <expr_stmt pos:start="275:21" pos:end="275:43"><expr pos:start="275:21" pos:end="275:42"><name pos:start="275:21" pos:end="275:25">chunk</name> <operator pos:start="275:27" pos:end="275:27">=</operator> <name pos:start="275:29" pos:end="275:42"><name pos:start="275:29" pos:end="275:31">reg</name><operator pos:start="275:32" pos:end="275:33">-&gt;</operator><name pos:start="275:34" pos:end="275:36">key</name><operator pos:start="275:37" pos:end="275:37">.</operator><name pos:start="275:38" pos:end="275:42">chunk</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="277:21" pos:end="279:73"><expr pos:start="277:21" pos:end="279:72"><name pos:start="277:21" pos:end="277:29">host_addr</name> <operator pos:start="277:31" pos:end="277:31">=</operator> <name pos:start="277:33" pos:end="277:54"><name pos:start="277:33" pos:end="277:37">block</name><operator pos:start="277:38" pos:end="277:39">-&gt;</operator><name pos:start="277:40" pos:end="277:54">local_host_addr</name></name> <operator pos:start="277:56" pos:end="277:56">+</operator>

                        <operator pos:start="279:25" pos:end="279:25">(</operator><name pos:start="279:26" pos:end="279:39"><name pos:start="279:26" pos:end="279:28">reg</name><operator pos:start="279:29" pos:end="279:30">-&gt;</operator><name pos:start="279:31" pos:end="279:33">key</name><operator pos:start="279:34" pos:end="279:34">.</operator><name pos:start="279:35" pos:end="279:39">chunk</name></name> <operator pos:start="279:41" pos:end="279:41">*</operator> <operator pos:start="279:43" pos:end="279:43">(</operator><literal type="number" pos:start="279:44" pos:end="279:46">1UL</literal> <operator pos:start="279:48" pos:end="279:49">&lt;&lt;</operator> <name pos:start="279:51" pos:end="279:70">RDMA_REG_CHUNK_SHIFT</name><operator pos:start="279:71" pos:end="279:71">)</operator><operator pos:start="279:72" pos:end="279:72">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="283:17" pos:end="283:60"><expr pos:start="283:17" pos:end="283:59"><name pos:start="283:17" pos:end="283:27">chunk_start</name> <operator pos:start="283:29" pos:end="283:29">=</operator> <call pos:start="283:31" pos:end="283:59"><name pos:start="283:31" pos:end="283:45">ram_chunk_start</name><argument_list pos:start="283:46" pos:end="283:59">(<argument pos:start="283:47" pos:end="283:51"><expr pos:start="283:47" pos:end="283:51"><name pos:start="283:47" pos:end="283:51">block</name></expr></argument>, <argument pos:start="283:54" pos:end="283:58"><expr pos:start="283:54" pos:end="283:58"><name pos:start="283:54" pos:end="283:58">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:70"><expr pos:start="285:17" pos:end="285:69"><name pos:start="285:17" pos:end="285:25">chunk_end</name> <operator pos:start="285:27" pos:end="285:27">=</operator> <call pos:start="285:29" pos:end="285:69"><name pos:start="285:29" pos:end="285:41">ram_chunk_end</name><argument_list pos:start="285:42" pos:end="285:69">(<argument pos:start="285:43" pos:end="285:47"><expr pos:start="285:43" pos:end="285:47"><name pos:start="285:43" pos:end="285:47">block</name></expr></argument>, <argument pos:start="285:50" pos:end="285:68"><expr pos:start="285:50" pos:end="285:68"><name pos:start="285:50" pos:end="285:54">chunk</name> <operator pos:start="285:56" pos:end="285:56">+</operator> <name pos:start="285:58" pos:end="285:68"><name pos:start="285:58" pos:end="285:60">reg</name><operator pos:start="285:61" pos:end="285:62">-&gt;</operator><name pos:start="285:63" pos:end="285:68">chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="287:17" pos:end="299:17"><if pos:start="287:17" pos:end="299:17">if <condition pos:start="287:20" pos:end="291:59">(<expr pos:start="287:21" pos:end="291:58"><call pos:start="287:21" pos:end="291:58"><name pos:start="287:21" pos:end="287:51">qemu_rdma_register_and_get_keys</name><argument_list pos:start="287:52" pos:end="291:58">(<argument pos:start="287:53" pos:end="287:56"><expr pos:start="287:53" pos:end="287:56"><name pos:start="287:53" pos:end="287:56">rdma</name></expr></argument>, <argument pos:start="287:59" pos:end="287:63"><expr pos:start="287:59" pos:end="287:63"><name pos:start="287:59" pos:end="287:63">block</name></expr></argument>,

                            <argument pos:start="289:29" pos:end="289:48"><expr pos:start="289:29" pos:end="289:48"><operator pos:start="289:29" pos:end="289:29">(</operator><name pos:start="289:30" pos:end="289:36">uint8_t</name> <operator pos:start="289:38" pos:end="289:38">*</operator><operator pos:start="289:39" pos:end="289:39">)</operator><name pos:start="289:40" pos:end="289:48">host_addr</name></expr></argument>, <argument pos:start="289:51" pos:end="289:54"><expr pos:start="289:51" pos:end="289:54"><name pos:start="289:51" pos:end="289:54">NULL</name></expr></argument>, <argument pos:start="289:57" pos:end="289:73"><expr pos:start="289:57" pos:end="289:73"><operator pos:start="289:57" pos:end="289:57">&amp;</operator><name pos:start="289:58" pos:end="289:73"><name pos:start="289:58" pos:end="289:67">reg_result</name><operator pos:start="289:68" pos:end="289:69">-&gt;</operator><name pos:start="289:70" pos:end="289:73">rkey</name></name></expr></argument>,

                            <argument pos:start="291:29" pos:end="291:33"><expr pos:start="291:29" pos:end="291:33"><name pos:start="291:29" pos:end="291:33">chunk</name></expr></argument>, <argument pos:start="291:36" pos:end="291:46"><expr pos:start="291:36" pos:end="291:46"><name pos:start="291:36" pos:end="291:46">chunk_start</name></expr></argument>, <argument pos:start="291:49" pos:end="291:57"><expr pos:start="291:49" pos:end="291:57"><name pos:start="291:49" pos:end="291:57">chunk_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:61" pos:end="299:17">{<block_content pos:start="293:21" pos:end="297:29">

                    <expr_stmt pos:start="293:21" pos:end="293:58"><expr pos:start="293:21" pos:end="293:57"><call pos:start="293:21" pos:end="293:57"><name pos:start="293:21" pos:end="293:27">fprintf</name><argument_list pos:start="293:28" pos:end="293:57">(<argument pos:start="293:29" pos:end="293:34"><expr pos:start="293:29" pos:end="293:34"><name pos:start="293:29" pos:end="293:34">stderr</name></expr></argument>, <argument pos:start="293:37" pos:end="293:56"><expr pos:start="293:37" pos:end="293:56"><literal type="string" pos:start="293:37" pos:end="293:56">"cannot get rkey!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:34"><expr pos:start="295:21" pos:end="295:33"><name pos:start="295:21" pos:end="295:23">ret</name> <operator pos:start="295:25" pos:end="295:25">=</operator> <operator pos:start="295:27" pos:end="295:27">-</operator><name pos:start="295:28" pos:end="295:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="297:21" pos:end="297:29">goto <name pos:start="297:26" pos:end="297:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="303:17" pos:end="303:74"><expr pos:start="303:17" pos:end="303:73"><name pos:start="303:17" pos:end="303:37"><name pos:start="303:17" pos:end="303:26">reg_result</name><operator pos:start="303:27" pos:end="303:28">-&gt;</operator><name pos:start="303:29" pos:end="303:37">host_addr</name></name> <operator pos:start="303:39" pos:end="303:39">=</operator> <operator pos:start="303:41" pos:end="303:41">(</operator><name pos:start="303:42" pos:end="303:49">uint64_t</name><operator pos:start="303:50" pos:end="303:50">)</operator> <name pos:start="303:52" pos:end="303:73"><name pos:start="303:52" pos:end="303:56">block</name><operator pos:start="303:57" pos:end="303:58">-&gt;</operator><name pos:start="303:59" pos:end="303:73">local_host_addr</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="307:17" pos:end="309:50"><expr pos:start="307:17" pos:end="309:49"><call pos:start="307:17" pos:end="309:49"><name pos:start="307:17" pos:end="307:24">DDPRINTF</name><argument_list pos:start="307:25" pos:end="309:49">(<argument pos:start="307:26" pos:end="307:65"><expr pos:start="307:26" pos:end="307:65"><literal type="string" pos:start="307:26" pos:end="307:65">"Registered rkey for this request: %x\n"</literal></expr></argument>,

                                <argument pos:start="309:33" pos:end="309:48"><expr pos:start="309:33" pos:end="309:48"><name pos:start="309:33" pos:end="309:48"><name pos:start="309:33" pos:end="309:42">reg_result</name><operator pos:start="309:43" pos:end="309:44">-&gt;</operator><name pos:start="309:45" pos:end="309:48">rkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="313:17" pos:end="313:46"><expr pos:start="313:17" pos:end="313:45"><call pos:start="313:17" pos:end="313:45"><name pos:start="313:17" pos:end="313:33">result_to_network</name><argument_list pos:start="313:34" pos:end="313:45">(<argument pos:start="313:35" pos:end="313:44"><expr pos:start="313:35" pos:end="313:44"><name pos:start="313:35" pos:end="313:44">reg_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="319:13" pos:end="321:60"><expr pos:start="319:13" pos:end="321:59"><name pos:start="319:13" pos:end="319:15">ret</name> <operator pos:start="319:17" pos:end="319:17">=</operator> <call pos:start="319:19" pos:end="321:59"><name pos:start="319:19" pos:end="319:45">qemu_rdma_post_send_control</name><argument_list pos:start="319:46" pos:end="321:59">(<argument pos:start="319:47" pos:end="319:50"><expr pos:start="319:47" pos:end="319:50"><name pos:start="319:47" pos:end="319:50">rdma</name></expr></argument>,

                            <argument pos:start="321:29" pos:end="321:47"><expr pos:start="321:29" pos:end="321:47"><operator pos:start="321:29" pos:end="321:29">(</operator><name pos:start="321:30" pos:end="321:36">uint8_t</name> <operator pos:start="321:38" pos:end="321:38">*</operator><operator pos:start="321:39" pos:end="321:39">)</operator> <name pos:start="321:41" pos:end="321:47">results</name></expr></argument>, <argument pos:start="321:50" pos:end="321:58"><expr pos:start="321:50" pos:end="321:58"><operator pos:start="321:50" pos:end="321:50">&amp;</operator><name pos:start="321:51" pos:end="321:58">reg_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="325:13" pos:end="331:13"><if pos:start="325:13" pos:end="331:13">if <condition pos:start="325:16" pos:end="325:24">(<expr pos:start="325:17" pos:end="325:23"><name pos:start="325:17" pos:end="325:19">ret</name> <operator pos:start="325:21" pos:end="325:21">&lt;</operator> <literal type="number" pos:start="325:23" pos:end="325:23">0</literal></expr>)</condition> <block pos:start="325:26" pos:end="331:13">{<block_content pos:start="327:17" pos:end="329:25">

                <expr_stmt pos:start="327:17" pos:end="327:68"><expr pos:start="327:17" pos:end="327:67"><call pos:start="327:17" pos:end="327:67"><name pos:start="327:17" pos:end="327:23">fprintf</name><argument_list pos:start="327:24" pos:end="327:67">(<argument pos:start="327:25" pos:end="327:30"><expr pos:start="327:25" pos:end="327:30"><name pos:start="327:25" pos:end="327:30">stderr</name></expr></argument>, <argument pos:start="327:33" pos:end="327:66"><expr pos:start="327:33" pos:end="327:66"><literal type="string" pos:start="327:33" pos:end="327:66">"Failed to send control buffer!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="329:17" pos:end="329:25">goto <name pos:start="329:22" pos:end="329:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="333:13" pos:end="333:18">break;</break>

        <case pos:start="335:9" pos:end="335:45">case <expr pos:start="335:14" pos:end="335:44"><name pos:start="335:14" pos:end="335:44">RDMA_CONTROL_UNREGISTER_REQUEST</name></expr>:</case>

            <expr_stmt pos:start="337:13" pos:end="337:76"><expr pos:start="337:13" pos:end="337:75"><call pos:start="337:13" pos:end="337:75"><name pos:start="337:13" pos:end="337:20">DDPRINTF</name><argument_list pos:start="337:21" pos:end="337:75">(<argument pos:start="337:22" pos:end="337:61"><expr pos:start="337:22" pos:end="337:61"><literal type="string" pos:start="337:22" pos:end="337:61">"There are %d unregistration requests\n"</literal></expr></argument>, <argument pos:start="337:64" pos:end="337:74"><expr pos:start="337:64" pos:end="337:74"><name pos:start="337:64" pos:end="337:74"><name pos:start="337:64" pos:end="337:67">head</name><operator pos:start="337:68" pos:end="337:68">.</operator><name pos:start="337:69" pos:end="337:74">repeat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:44"><expr pos:start="339:13" pos:end="339:43"><name pos:start="339:13" pos:end="339:29"><name pos:start="339:13" pos:end="339:22">unreg_resp</name><operator pos:start="339:23" pos:end="339:23">.</operator><name pos:start="339:24" pos:end="339:29">repeat</name></name> <operator pos:start="339:31" pos:end="339:31">=</operator> <name pos:start="339:33" pos:end="339:43"><name pos:start="339:33" pos:end="339:36">head</name><operator pos:start="339:37" pos:end="339:37">.</operator><name pos:start="339:38" pos:end="339:43">repeat</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:73"><expr pos:start="341:13" pos:end="341:72"><name pos:start="341:13" pos:end="341:21">registers</name> <operator pos:start="341:23" pos:end="341:23">=</operator> <operator pos:start="341:25" pos:end="341:25">(</operator><name pos:start="341:26" pos:end="341:37">RDMARegister</name> <operator pos:start="341:39" pos:end="341:39">*</operator><operator pos:start="341:40" pos:end="341:40">)</operator> <name pos:start="341:42" pos:end="341:59"><name pos:start="341:42" pos:end="341:45">rdma</name><operator pos:start="341:46" pos:end="341:47">-&gt;</operator><name pos:start="341:48" pos:end="341:54">wr_data</name><index pos:start="341:55" pos:end="341:59">[<expr pos:start="341:56" pos:end="341:58"><name pos:start="341:56" pos:end="341:58">idx</name></expr>]</index></name><operator pos:start="341:60" pos:end="341:60">.</operator><name pos:start="341:61" pos:end="341:72">control_curr</name></expr>;</expr_stmt>



            <for pos:start="345:13" pos:end="391:13">for <control pos:start="345:17" pos:end="345:57">(<init pos:start="345:18" pos:end="345:27"><expr pos:start="345:18" pos:end="345:26"><name pos:start="345:18" pos:end="345:22">count</name> <operator pos:start="345:24" pos:end="345:24">=</operator> <literal type="number" pos:start="345:26" pos:end="345:26">0</literal></expr>;</init> <condition pos:start="345:29" pos:end="345:48"><expr pos:start="345:29" pos:end="345:47"><name pos:start="345:29" pos:end="345:33">count</name> <operator pos:start="345:35" pos:end="345:35">&lt;</operator> <name pos:start="345:37" pos:end="345:47"><name pos:start="345:37" pos:end="345:40">head</name><operator pos:start="345:41" pos:end="345:41">.</operator><name pos:start="345:42" pos:end="345:47">repeat</name></name></expr>;</condition> <incr pos:start="345:50" pos:end="345:56"><expr pos:start="345:50" pos:end="345:56"><name pos:start="345:50" pos:end="345:54">count</name><operator pos:start="345:55" pos:end="345:56">++</operator></expr></incr>)</control> <block pos:start="345:59" pos:end="391:13">{<block_content pos:start="347:17" pos:end="389:44">

                <expr_stmt pos:start="347:17" pos:end="347:40"><expr pos:start="347:17" pos:end="347:39"><name pos:start="347:17" pos:end="347:19">reg</name> <operator pos:start="347:21" pos:end="347:21">=</operator> <operator pos:start="347:23" pos:end="347:23">&amp;</operator><name pos:start="347:24" pos:end="347:39"><name pos:start="347:24" pos:end="347:32">registers</name><index pos:start="347:33" pos:end="347:39">[<expr pos:start="347:34" pos:end="347:38"><name pos:start="347:34" pos:end="347:38">count</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:41"><expr pos:start="349:17" pos:end="349:40"><call pos:start="349:17" pos:end="349:40"><name pos:start="349:17" pos:end="349:35">network_to_register</name><argument_list pos:start="349:36" pos:end="349:40">(<argument pos:start="349:37" pos:end="349:39"><expr pos:start="349:37" pos:end="349:39"><name pos:start="349:37" pos:end="349:39">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="353:17" pos:end="357:68"><expr pos:start="353:17" pos:end="357:67"><call pos:start="353:17" pos:end="357:67"><name pos:start="353:17" pos:end="353:24">DDPRINTF</name><argument_list pos:start="353:25" pos:end="357:67">(<argument pos:start="353:26" pos:end="355:57"><expr pos:start="353:26" pos:end="355:57"><literal type="string" pos:start="353:26" pos:end="353:56">"Unregistration request (%d): "</literal>

                         <literal type="string" pos:start="355:26" pos:end="355:45">" index %d, chunk %"</literal> <name pos:start="355:47" pos:end="355:52">PRIu64</name> <literal type="string" pos:start="355:54" pos:end="355:57">"\n"</literal></expr></argument>,

                         <argument pos:start="357:26" pos:end="357:30"><expr pos:start="357:26" pos:end="357:30"><name pos:start="357:26" pos:end="357:30">count</name></expr></argument>, <argument pos:start="357:33" pos:end="357:50"><expr pos:start="357:33" pos:end="357:50"><name pos:start="357:33" pos:end="357:50"><name pos:start="357:33" pos:end="357:35">reg</name><operator pos:start="357:36" pos:end="357:37">-&gt;</operator><name pos:start="357:38" pos:end="357:50">current_index</name></name></expr></argument>, <argument pos:start="357:53" pos:end="357:66"><expr pos:start="357:53" pos:end="357:66"><name pos:start="357:53" pos:end="357:66"><name pos:start="357:53" pos:end="357:55">reg</name><operator pos:start="357:56" pos:end="357:57">-&gt;</operator><name pos:start="357:58" pos:end="357:60">key</name><operator pos:start="357:61" pos:end="357:61">.</operator><name pos:start="357:62" pos:end="357:66">chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="361:17" pos:end="361:76"><expr pos:start="361:17" pos:end="361:75"><name pos:start="361:17" pos:end="361:21">block</name> <operator pos:start="361:23" pos:end="361:23">=</operator> <operator pos:start="361:25" pos:end="361:25">&amp;</operator><operator pos:start="361:26" pos:end="361:26">(</operator><name pos:start="361:27" pos:end="361:74"><name pos:start="361:27" pos:end="361:30">rdma</name><operator pos:start="361:31" pos:end="361:32">-&gt;</operator><name pos:start="361:33" pos:end="361:48">local_ram_blocks</name><operator pos:start="361:49" pos:end="361:49">.</operator><name pos:start="361:50" pos:end="361:54">block</name><index pos:start="361:55" pos:end="361:74">[<expr pos:start="361:56" pos:end="361:73"><name pos:start="361:56" pos:end="361:73"><name pos:start="361:56" pos:end="361:58">reg</name><operator pos:start="361:59" pos:end="361:60">-&gt;</operator><name pos:start="361:61" pos:end="361:73">current_index</name></name></expr>]</index></name><operator pos:start="361:75" pos:end="361:75">)</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="365:17" pos:end="365:63"><expr pos:start="365:17" pos:end="365:62"><name pos:start="365:17" pos:end="365:19">ret</name> <operator pos:start="365:21" pos:end="365:21">=</operator> <call pos:start="365:23" pos:end="365:62"><name pos:start="365:23" pos:end="365:34">ibv_dereg_mr</name><argument_list pos:start="365:35" pos:end="365:62">(<argument pos:start="365:36" pos:end="365:61"><expr pos:start="365:36" pos:end="365:61"><name pos:start="365:36" pos:end="365:61"><name pos:start="365:36" pos:end="365:40">block</name><operator pos:start="365:41" pos:end="365:42">-&gt;</operator><name pos:start="365:43" pos:end="365:45">pmr</name><index pos:start="365:46" pos:end="365:61">[<expr pos:start="365:47" pos:end="365:60"><name pos:start="365:47" pos:end="365:60"><name pos:start="365:47" pos:end="365:49">reg</name><operator pos:start="365:50" pos:end="365:51">-&gt;</operator><name pos:start="365:52" pos:end="365:54">key</name><operator pos:start="365:55" pos:end="365:55">.</operator><name pos:start="365:56" pos:end="365:60">chunk</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:50"><expr pos:start="367:17" pos:end="367:49"><name pos:start="367:17" pos:end="367:42"><name pos:start="367:17" pos:end="367:21">block</name><operator pos:start="367:22" pos:end="367:23">-&gt;</operator><name pos:start="367:24" pos:end="367:26">pmr</name><index pos:start="367:27" pos:end="367:42">[<expr pos:start="367:28" pos:end="367:41"><name pos:start="367:28" pos:end="367:41"><name pos:start="367:28" pos:end="367:30">reg</name><operator pos:start="367:31" pos:end="367:32">-&gt;</operator><name pos:start="367:33" pos:end="367:35">key</name><operator pos:start="367:36" pos:end="367:36">.</operator><name pos:start="367:37" pos:end="367:41">chunk</name></name></expr>]</index></name> <operator pos:start="367:44" pos:end="367:44">=</operator> <name pos:start="367:46" pos:end="367:49">NULL</name></expr>;</expr_stmt>



                <if_stmt pos:start="371:17" pos:end="379:17"><if pos:start="371:17" pos:end="379:17">if <condition pos:start="371:20" pos:end="371:29">(<expr pos:start="371:21" pos:end="371:28"><name pos:start="371:21" pos:end="371:23">ret</name> <operator pos:start="371:25" pos:end="371:26">!=</operator> <literal type="number" pos:start="371:28" pos:end="371:28">0</literal></expr>)</condition> <block pos:start="371:31" pos:end="379:17">{<block_content pos:start="373:21" pos:end="377:29">

                    <expr_stmt pos:start="373:21" pos:end="373:63"><expr pos:start="373:21" pos:end="373:62"><call pos:start="373:21" pos:end="373:62"><name pos:start="373:21" pos:end="373:26">perror</name><argument_list pos:start="373:27" pos:end="373:62">(<argument pos:start="373:28" pos:end="373:61"><expr pos:start="373:28" pos:end="373:61"><literal type="string" pos:start="373:28" pos:end="373:61">"rdma unregistration chunk failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="375:21" pos:end="375:31"><expr pos:start="375:21" pos:end="375:30"><name pos:start="375:21" pos:end="375:23">ret</name> <operator pos:start="375:25" pos:end="375:25">=</operator> <operator pos:start="375:27" pos:end="375:27">-</operator><name pos:start="375:28" pos:end="375:30">ret</name></expr>;</expr_stmt>

                    <goto pos:start="377:21" pos:end="377:29">goto <name pos:start="377:26" pos:end="377:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="383:17" pos:end="383:44"><expr pos:start="383:17" pos:end="383:43"><name pos:start="383:17" pos:end="383:41"><name pos:start="383:17" pos:end="383:20">rdma</name><operator pos:start="383:21" pos:end="383:22">-&gt;</operator><name pos:start="383:23" pos:end="383:41">total_registrations</name></name><operator pos:start="383:42" pos:end="383:43">--</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="387:17" pos:end="389:44"><expr pos:start="387:17" pos:end="389:43"><call pos:start="387:17" pos:end="389:43"><name pos:start="387:17" pos:end="387:24">DDPRINTF</name><argument_list pos:start="387:25" pos:end="389:43">(<argument pos:start="387:26" pos:end="387:73"><expr pos:start="387:26" pos:end="387:73"><literal type="string" pos:start="387:26" pos:end="387:47">"Unregistered chunk %"</literal> <name pos:start="387:49" pos:end="387:54">PRIu64</name> <literal type="string" pos:start="387:56" pos:end="387:73">" successfully.\n"</literal></expr></argument>,

                            <argument pos:start="389:29" pos:end="389:42"><expr pos:start="389:29" pos:end="389:42"><name pos:start="389:29" pos:end="389:42"><name pos:start="389:29" pos:end="389:31">reg</name><operator pos:start="389:32" pos:end="389:33">-&gt;</operator><name pos:start="389:34" pos:end="389:36">key</name><operator pos:start="389:37" pos:end="389:37">.</operator><name pos:start="389:38" pos:end="389:42">chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="395:13" pos:end="395:71"><expr pos:start="395:13" pos:end="395:70"><name pos:start="395:13" pos:end="395:15">ret</name> <operator pos:start="395:17" pos:end="395:17">=</operator> <call pos:start="395:19" pos:end="395:70"><name pos:start="395:19" pos:end="395:45">qemu_rdma_post_send_control</name><argument_list pos:start="395:46" pos:end="395:70">(<argument pos:start="395:47" pos:end="395:50"><expr pos:start="395:47" pos:end="395:50"><name pos:start="395:47" pos:end="395:50">rdma</name></expr></argument>, <argument pos:start="395:53" pos:end="395:56"><expr pos:start="395:53" pos:end="395:56"><name pos:start="395:53" pos:end="395:56">NULL</name></expr></argument>, <argument pos:start="395:59" pos:end="395:69"><expr pos:start="395:59" pos:end="395:69"><operator pos:start="395:59" pos:end="395:59">&amp;</operator><name pos:start="395:60" pos:end="395:69">unreg_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="399:13" pos:end="405:13"><if pos:start="399:13" pos:end="405:13">if <condition pos:start="399:16" pos:end="399:24">(<expr pos:start="399:17" pos:end="399:23"><name pos:start="399:17" pos:end="399:19">ret</name> <operator pos:start="399:21" pos:end="399:21">&lt;</operator> <literal type="number" pos:start="399:23" pos:end="399:23">0</literal></expr>)</condition> <block pos:start="399:26" pos:end="405:13">{<block_content pos:start="401:17" pos:end="403:25">

                <expr_stmt pos:start="401:17" pos:end="401:68"><expr pos:start="401:17" pos:end="401:67"><call pos:start="401:17" pos:end="401:67"><name pos:start="401:17" pos:end="401:23">fprintf</name><argument_list pos:start="401:24" pos:end="401:67">(<argument pos:start="401:25" pos:end="401:30"><expr pos:start="401:25" pos:end="401:30"><name pos:start="401:25" pos:end="401:30">stderr</name></expr></argument>, <argument pos:start="401:33" pos:end="401:66"><expr pos:start="401:33" pos:end="401:66"><literal type="string" pos:start="401:33" pos:end="401:66">"Failed to send control buffer!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="403:17" pos:end="403:25">goto <name pos:start="403:22" pos:end="403:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="407:13" pos:end="407:18">break;</break>

        <case pos:start="409:9" pos:end="409:42">case <expr pos:start="409:14" pos:end="409:41"><name pos:start="409:14" pos:end="409:41">RDMA_CONTROL_REGISTER_RESULT</name></expr>:</case>

            <expr_stmt pos:start="411:13" pos:end="411:65"><expr pos:start="411:13" pos:end="411:64"><call pos:start="411:13" pos:end="411:64"><name pos:start="411:13" pos:end="411:19">fprintf</name><argument_list pos:start="411:20" pos:end="411:64">(<argument pos:start="411:21" pos:end="411:26"><expr pos:start="411:21" pos:end="411:26"><name pos:start="411:21" pos:end="411:26">stderr</name></expr></argument>, <argument pos:start="411:29" pos:end="411:63"><expr pos:start="411:29" pos:end="411:63"><literal type="string" pos:start="411:29" pos:end="411:63">"Invalid RESULT message at dest.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:23"><expr pos:start="413:13" pos:end="413:22"><name pos:start="413:13" pos:end="413:15">ret</name> <operator pos:start="413:17" pos:end="413:17">=</operator> <operator pos:start="413:19" pos:end="413:19">-</operator><name pos:start="413:20" pos:end="413:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="415:13" pos:end="415:21">goto <name pos:start="415:18" pos:end="415:20">out</name>;</goto>

        <default pos:start="417:9" pos:end="417:16">default:</default>

            <expr_stmt pos:start="419:13" pos:end="421:57"><expr pos:start="419:13" pos:end="421:56"><call pos:start="419:13" pos:end="421:56"><name pos:start="419:13" pos:end="419:19">fprintf</name><argument_list pos:start="419:20" pos:end="421:56">(<argument pos:start="419:21" pos:end="419:26"><expr pos:start="419:21" pos:end="419:26"><name pos:start="419:21" pos:end="419:26">stderr</name></expr></argument>, <argument pos:start="419:29" pos:end="419:58"><expr pos:start="419:29" pos:end="419:58"><literal type="string" pos:start="419:29" pos:end="419:58">"Unknown control message %s\n"</literal></expr></argument>,

                                <argument pos:start="421:33" pos:end="421:55"><expr pos:start="421:33" pos:end="421:55"><name pos:start="421:33" pos:end="421:55"><name pos:start="421:33" pos:end="421:44">control_desc</name><index pos:start="421:45" pos:end="421:55">[<expr pos:start="421:46" pos:end="421:54"><name pos:start="421:46" pos:end="421:54"><name pos:start="421:46" pos:end="421:49">head</name><operator pos:start="421:50" pos:end="421:50">.</operator><name pos:start="421:51" pos:end="421:54">type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="423:13" pos:end="423:23"><expr pos:start="423:13" pos:end="423:22"><name pos:start="423:13" pos:end="423:15">ret</name> <operator pos:start="423:17" pos:end="423:17">=</operator> <operator pos:start="423:19" pos:end="423:19">-</operator><name pos:start="423:20" pos:end="423:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="425:13" pos:end="425:21">goto <name pos:start="425:18" pos:end="425:20">out</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block> while <condition pos:start="429:13" pos:end="429:15">(<expr pos:start="429:14" pos:end="429:14"><literal type="number" pos:start="429:14" pos:end="429:14">1</literal></expr>)</condition>;</do>

<label pos:start="431:1" pos:end="431:4"><name pos:start="431:1" pos:end="431:3">out</name>:</label>

    <if_stmt pos:start="433:5" pos:end="437:5"><if pos:start="433:5" pos:end="437:5">if <condition pos:start="433:8" pos:end="433:16">(<expr pos:start="433:9" pos:end="433:15"><name pos:start="433:9" pos:end="433:11">ret</name> <operator pos:start="433:13" pos:end="433:13">&lt;</operator> <literal type="number" pos:start="433:15" pos:end="433:15">0</literal></expr>)</condition> <block pos:start="433:18" pos:end="437:5">{<block_content pos:start="435:9" pos:end="435:32">

        <expr_stmt pos:start="435:9" pos:end="435:32"><expr pos:start="435:9" pos:end="435:31"><name pos:start="435:9" pos:end="435:25"><name pos:start="435:9" pos:end="435:12">rdma</name><operator pos:start="435:13" pos:end="435:14">-&gt;</operator><name pos:start="435:15" pos:end="435:25">error_state</name></name> <operator pos:start="435:27" pos:end="435:27">=</operator> <name pos:start="435:29" pos:end="435:31">ret</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="439:5" pos:end="439:15">return <expr pos:start="439:12" pos:end="439:14"><name pos:start="439:12" pos:end="439:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
