<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25300.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">ff_audio_mix</name><parameter_list pos:start="1:17" pos:end="1:46">(<parameter pos:start="1:18" pos:end="1:29"><decl pos:start="1:18" pos:end="1:29"><type pos:start="1:18" pos:end="1:29"><name pos:start="1:18" pos:end="1:25">AudioMix</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:29">am</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:45"><decl pos:start="1:32" pos:end="1:45"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:40">AudioData</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">src</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:13">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">use_generic</name> <init pos:start="5:21" pos:end="5:23">= <expr pos:start="5:23" pos:end="5:23"><literal type="number" pos:start="5:23" pos:end="5:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name> <init pos:start="7:13" pos:end="7:29">= <expr pos:start="7:15" pos:end="7:29"><name pos:start="7:15" pos:end="7:29"><name pos:start="7:15" pos:end="7:17">src</name><operator pos:start="7:18" pos:end="7:19">-&gt;</operator><name pos:start="7:20" pos:end="7:29">nb_samples</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="15:56">/* determine whether to use the optimized function based on pointer and

       samples alignment in both the input and output */</comment>

    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="17:31">(<expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:10">am</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:30">has_optimized_func</name></name></expr>)</condition> <block pos:start="17:33" pos:end="31:5">{<block_content pos:start="19:9" pos:end="29:9">

        <decl_stmt pos:start="19:9" pos:end="19:58"><decl pos:start="19:9" pos:end="19:57"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:23">aligned_len</name> <init pos:start="19:25" pos:end="19:57">= <expr pos:start="19:27" pos:end="19:57"><call pos:start="19:27" pos:end="19:57"><name pos:start="19:27" pos:end="19:33">FFALIGN</name><argument_list pos:start="19:34" pos:end="19:57">(<argument pos:start="19:35" pos:end="19:37"><expr pos:start="19:35" pos:end="19:37"><name pos:start="19:35" pos:end="19:37">len</name></expr></argument>, <argument pos:start="19:40" pos:end="19:56"><expr pos:start="19:40" pos:end="19:56"><name pos:start="19:40" pos:end="19:56"><name pos:start="19:40" pos:end="19:41">am</name><operator pos:start="19:42" pos:end="19:43">-&gt;</operator><name pos:start="19:44" pos:end="19:56">samples_align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="21:9" pos:end="29:9"><if pos:start="21:9" pos:end="29:9">if <condition pos:start="21:12" pos:end="23:46">(<expr pos:start="21:13" pos:end="23:45"><operator pos:start="21:13" pos:end="21:13">!</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:28"><name pos:start="21:15" pos:end="21:17">src</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:28">ptr_align</name></name> <operator pos:start="21:30" pos:end="21:30">%</operator> <name pos:start="21:32" pos:end="21:44"><name pos:start="21:32" pos:end="21:33">am</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:44">ptr_align</name></name><operator pos:start="21:45" pos:end="21:45">)</operator> <operator pos:start="21:47" pos:end="21:48">&amp;&amp;</operator>

            <name pos:start="23:13" pos:end="23:30"><name pos:start="23:13" pos:end="23:15">src</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:30">samples_align</name></name> <operator pos:start="23:32" pos:end="23:33">&gt;=</operator> <name pos:start="23:35" pos:end="23:45">aligned_len</name></expr>)</condition> <block pos:start="23:48" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:28">

            <expr_stmt pos:start="25:13" pos:end="25:30"><expr pos:start="25:13" pos:end="25:29"><name pos:start="25:13" pos:end="25:15">len</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:29">aligned_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:28"><expr pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:23">use_generic</name> <operator pos:start="27:25" pos:end="27:25">=</operator> <literal type="number" pos:start="27:27" pos:end="27:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="37:67"><expr pos:start="33:5" pos:end="37:66"><call pos:start="33:5" pos:end="37:66"><name pos:start="33:5" pos:end="33:11">av_dlog</name><argument_list pos:start="33:12" pos:end="37:66">(<argument pos:start="33:13" pos:end="33:19"><expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:14">am</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:19">avr</name></name></expr></argument>, <argument pos:start="33:22" pos:end="33:71"><expr pos:start="33:22" pos:end="33:71"><literal type="string" pos:start="33:22" pos:end="33:71">"audio_mix: %d samples - %d to %d channels (%s)\n"</literal></expr></argument>,

            <argument pos:start="35:13" pos:end="35:27"><expr pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:15">src</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:27">nb_samples</name></name></expr></argument>, <argument pos:start="35:30" pos:end="35:44"><expr pos:start="35:30" pos:end="35:44"><name pos:start="35:30" pos:end="35:44"><name pos:start="35:30" pos:end="35:31">am</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:44">in_channels</name></name></expr></argument>, <argument pos:start="35:47" pos:end="35:62"><expr pos:start="35:47" pos:end="35:62"><name pos:start="35:47" pos:end="35:62"><name pos:start="35:47" pos:end="35:48">am</name><operator pos:start="35:49" pos:end="35:50">-&gt;</operator><name pos:start="35:51" pos:end="35:62">out_channels</name></name></expr></argument>,

            <argument pos:start="37:13" pos:end="37:65"><expr pos:start="37:13" pos:end="37:65"><ternary pos:start="37:13" pos:end="37:65"><condition pos:start="37:13" pos:end="37:25"><expr pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:23">use_generic</name></expr> ?</condition><then pos:start="37:27" pos:end="37:48"> <expr pos:start="37:27" pos:end="37:48"><name pos:start="37:27" pos:end="37:48"><name pos:start="37:27" pos:end="37:28">am</name><operator pos:start="37:29" pos:end="37:30">-&gt;</operator><name pos:start="37:31" pos:end="37:48">func_descr_generic</name></name></expr> </then><else pos:start="37:50" pos:end="37:65">: <expr pos:start="37:52" pos:end="37:65"><name pos:start="37:52" pos:end="37:65"><name pos:start="37:52" pos:end="37:53">am</name><operator pos:start="37:54" pos:end="37:55">-&gt;</operator><name pos:start="37:56" pos:end="37:65">func_descr</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="85:5"><if pos:start="41:5" pos:end="85:5">if <condition pos:start="41:8" pos:end="41:58">(<expr pos:start="41:9" pos:end="41:57"><name pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:10">am</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:30">in_matrix_channels</name></name> <operator pos:start="41:32" pos:end="41:33">&amp;&amp;</operator> <name pos:start="41:35" pos:end="41:57"><name pos:start="41:35" pos:end="41:36">am</name><operator pos:start="41:37" pos:end="41:38">-&gt;</operator><name pos:start="41:39" pos:end="41:57">out_matrix_channels</name></name></expr>)</condition> <block pos:start="41:60" pos:end="85:5">{<block_content pos:start="43:9" pos:end="83:44">

        <decl_stmt pos:start="43:9" pos:end="43:23"><decl pos:start="43:9" pos:end="43:22"><type pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:15">uint8_t</name> <modifier pos:start="43:17" pos:end="43:17">*</modifier><modifier pos:start="43:18" pos:end="43:18">*</modifier></type><name pos:start="43:19" pos:end="43:22">data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:48"><decl pos:start="45:9" pos:end="45:47"><type pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:15">uint8_t</name> <modifier pos:start="45:17" pos:end="45:17">*</modifier></type><name pos:start="45:18" pos:end="45:47"><name pos:start="45:18" pos:end="45:22">data0</name><index pos:start="45:23" pos:end="45:47">[<expr pos:start="45:24" pos:end="45:46"><name pos:start="45:24" pos:end="45:46">AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="49:9" pos:end="69:9"><if pos:start="49:9" pos:end="65:9">if <condition pos:start="49:12" pos:end="51:55">(<expr pos:start="49:13" pos:end="51:54"><name pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:14">am</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:35">out_matrix_channels</name></name> <operator pos:start="49:37" pos:end="49:37">&lt;</operator> <name pos:start="49:39" pos:end="49:54"><name pos:start="49:39" pos:end="49:40">am</name><operator pos:start="49:41" pos:end="49:42">-&gt;</operator><name pos:start="49:43" pos:end="49:54">out_channels</name></name> <operator pos:start="49:56" pos:end="49:57">||</operator>

             <name pos:start="51:14" pos:end="51:35"><name pos:start="51:14" pos:end="51:15">am</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:35">in_matrix_channels</name></name> <operator pos:start="51:37" pos:end="51:37">&lt;</operator>  <name pos:start="51:40" pos:end="51:54"><name pos:start="51:40" pos:end="51:41">am</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:54">in_channels</name></name></expr>)</condition> <block pos:start="51:57" pos:end="65:9">{<block_content pos:start="53:13" pos:end="63:25">

            <for pos:start="53:13" pos:end="61:13">for <control pos:start="53:17" pos:end="53:81">(<init pos:start="53:18" pos:end="53:30"><expr pos:start="53:18" pos:end="53:22"><name pos:start="53:18" pos:end="53:18">i</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr><operator pos:start="53:23" pos:end="53:23">,</operator> <expr pos:start="53:25" pos:end="53:29"><name pos:start="53:25" pos:end="53:25">j</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr>;</init> <condition pos:start="53:32" pos:end="53:76"><expr pos:start="53:32" pos:end="53:75"><name pos:start="53:32" pos:end="53:32">i</name> <operator pos:start="53:34" pos:end="53:34">&lt;</operator> <call pos:start="53:36" pos:end="53:75"><name pos:start="53:36" pos:end="53:40">FFMAX</name><argument_list pos:start="53:41" pos:end="53:75">(<argument pos:start="53:42" pos:end="53:56"><expr pos:start="53:42" pos:end="53:56"><name pos:start="53:42" pos:end="53:56"><name pos:start="53:42" pos:end="53:43">am</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:56">in_channels</name></name></expr></argument>, <argument pos:start="53:59" pos:end="53:74"><expr pos:start="53:59" pos:end="53:74"><name pos:start="53:59" pos:end="53:74"><name pos:start="53:59" pos:end="53:60">am</name><operator pos:start="53:61" pos:end="53:62">-&gt;</operator><name pos:start="53:63" pos:end="53:74">out_channels</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="53:78" pos:end="53:80"><expr pos:start="53:78" pos:end="53:80"><name pos:start="53:78" pos:end="53:78">i</name><operator pos:start="53:79" pos:end="53:80">++</operator></expr></incr>)</control> <block pos:start="53:83" pos:end="61:13">{<block_content pos:start="55:17" pos:end="59:42">

                <if_stmt pos:start="55:17" pos:end="57:29"><if pos:start="55:17" pos:end="57:29">if <condition pos:start="55:20" pos:end="55:82">(<expr pos:start="55:21" pos:end="55:81"><name pos:start="55:21" pos:end="55:37"><name pos:start="55:21" pos:end="55:22">am</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:34">input_skip</name><index pos:start="55:35" pos:end="55:37">[<expr pos:start="55:36" pos:end="55:36"><name pos:start="55:36" pos:end="55:36">i</name></expr>]</index></name> <operator pos:start="55:39" pos:end="55:40">||</operator> <name pos:start="55:42" pos:end="55:59"><name pos:start="55:42" pos:end="55:43">am</name><operator pos:start="55:44" pos:end="55:45">-&gt;</operator><name pos:start="55:46" pos:end="55:56">output_skip</name><index pos:start="55:57" pos:end="55:59">[<expr pos:start="55:58" pos:end="55:58"><name pos:start="55:58" pos:end="55:58">i</name></expr>]</index></name> <operator pos:start="55:61" pos:end="55:62">||</operator> <name pos:start="55:64" pos:end="55:81"><name pos:start="55:64" pos:end="55:65">am</name><operator pos:start="55:66" pos:end="55:67">-&gt;</operator><name pos:start="55:68" pos:end="55:78">output_zero</name><index pos:start="55:79" pos:end="55:81">[<expr pos:start="55:80" pos:end="55:80"><name pos:start="55:80" pos:end="55:80">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="57:21" pos:end="57:29"><block_content pos:start="57:21" pos:end="57:29">

                    <continue pos:start="57:21" pos:end="57:29">continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:42"><expr pos:start="59:17" pos:end="59:41"><name pos:start="59:17" pos:end="59:26"><name pos:start="59:17" pos:end="59:21">data0</name><index pos:start="59:22" pos:end="59:26">[<expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:23">j</name><operator pos:start="59:24" pos:end="59:25">++</operator></expr>]</index></name> <operator pos:start="59:28" pos:end="59:28">=</operator> <name pos:start="59:30" pos:end="59:41"><name pos:start="59:30" pos:end="59:32">src</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:38">data</name><index pos:start="59:39" pos:end="59:41">[<expr pos:start="59:40" pos:end="59:40"><name pos:start="59:40" pos:end="59:40">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="63:13" pos:end="63:25"><expr pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:16">data</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:24">data0</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="69:9">else <block pos:start="65:16" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:29">

            <expr_stmt pos:start="67:13" pos:end="67:29"><expr pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:16">data</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <name pos:start="67:20" pos:end="67:28"><name pos:start="67:20" pos:end="67:22">src</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:28">data</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="73:9" pos:end="83:44"><if pos:start="73:9" pos:end="77:52">if <condition pos:start="73:12" pos:end="73:24">(<expr pos:start="73:13" pos:end="73:23"><name pos:start="73:13" pos:end="73:23">use_generic</name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="77:52"><block_content pos:start="75:13" pos:end="77:52">

            <expr_stmt pos:start="75:13" pos:end="77:52"><expr pos:start="75:13" pos:end="77:51"><call pos:start="75:13" pos:end="77:51"><name pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:14">am</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:27">mix_generic</name></name><argument_list pos:start="75:28" pos:end="77:51">(<argument pos:start="75:29" pos:end="75:32"><expr pos:start="75:29" pos:end="75:32"><name pos:start="75:29" pos:end="75:32">data</name></expr></argument>, <argument pos:start="75:35" pos:end="75:44"><expr pos:start="75:35" pos:end="75:44"><name pos:start="75:35" pos:end="75:44"><name pos:start="75:35" pos:end="75:36">am</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:44">matrix</name></name></expr></argument>, <argument pos:start="75:47" pos:end="75:49"><expr pos:start="75:47" pos:end="75:49"><name pos:start="75:47" pos:end="75:49">len</name></expr></argument>, <argument pos:start="75:52" pos:end="75:74"><expr pos:start="75:52" pos:end="75:74"><name pos:start="75:52" pos:end="75:74"><name pos:start="75:52" pos:end="75:53">am</name><operator pos:start="75:54" pos:end="75:55">-&gt;</operator><name pos:start="75:56" pos:end="75:74">out_matrix_channels</name></name></expr></argument>,

                            <argument pos:start="77:29" pos:end="77:50"><expr pos:start="77:29" pos:end="77:50"><name pos:start="77:29" pos:end="77:50"><name pos:start="77:29" pos:end="77:30">am</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:50">in_matrix_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="79:9" pos:end="83:44">else<block type="pseudo" pos:start="81:13" pos:end="83:44"><block_content pos:start="81:13" pos:end="83:44">

            <expr_stmt pos:start="81:13" pos:end="83:44"><expr pos:start="81:13" pos:end="83:43"><call pos:start="81:13" pos:end="83:43"><name pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:14">am</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:19">mix</name></name><argument_list pos:start="81:20" pos:end="83:43">(<argument pos:start="81:21" pos:end="81:24"><expr pos:start="81:21" pos:end="81:24"><name pos:start="81:21" pos:end="81:24">data</name></expr></argument>, <argument pos:start="81:27" pos:end="81:36"><expr pos:start="81:27" pos:end="81:36"><name pos:start="81:27" pos:end="81:36"><name pos:start="81:27" pos:end="81:28">am</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:36">matrix</name></name></expr></argument>, <argument pos:start="81:39" pos:end="81:41"><expr pos:start="81:39" pos:end="81:41"><name pos:start="81:39" pos:end="81:41">len</name></expr></argument>, <argument pos:start="81:44" pos:end="81:66"><expr pos:start="81:44" pos:end="81:66"><name pos:start="81:44" pos:end="81:66"><name pos:start="81:44" pos:end="81:45">am</name><operator pos:start="81:46" pos:end="81:47">-&gt;</operator><name pos:start="81:48" pos:end="81:66">out_matrix_channels</name></name></expr></argument>,

                    <argument pos:start="83:21" pos:end="83:42"><expr pos:start="83:21" pos:end="83:42"><name pos:start="83:21" pos:end="83:42"><name pos:start="83:21" pos:end="83:22">am</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:42">in_matrix_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:51">(<expr pos:start="89:9" pos:end="89:50"><name pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:10">am</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:31">out_matrix_channels</name></name> <operator pos:start="89:33" pos:end="89:33">&lt;</operator> <name pos:start="89:35" pos:end="89:50"><name pos:start="89:35" pos:end="89:36">am</name><operator pos:start="89:37" pos:end="89:38">-&gt;</operator><name pos:start="89:39" pos:end="89:50">out_channels</name></name></expr>)</condition> <block pos:start="89:53" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:74">

        <for pos:start="91:9" pos:end="95:74">for <control pos:start="91:13" pos:end="91:46">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">i</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:41"><expr pos:start="91:21" pos:end="91:40"><name pos:start="91:21" pos:end="91:21">i</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <name pos:start="91:25" pos:end="91:40"><name pos:start="91:25" pos:end="91:26">am</name><operator pos:start="91:27" pos:end="91:28">-&gt;</operator><name pos:start="91:29" pos:end="91:40">out_channels</name></name></expr>;</condition> <incr pos:start="91:43" pos:end="91:45"><expr pos:start="91:43" pos:end="91:45"><name pos:start="91:43" pos:end="91:43">i</name><operator pos:start="91:44" pos:end="91:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:13" pos:end="95:74"><block_content pos:start="93:13" pos:end="95:74">

            <if_stmt pos:start="93:13" pos:end="95:74"><if pos:start="93:13" pos:end="95:74">if <condition pos:start="93:16" pos:end="93:35">(<expr pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:18">am</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:31">output_zero</name><index pos:start="93:32" pos:end="93:34">[<expr pos:start="93:33" pos:end="93:33"><name pos:start="93:33" pos:end="93:33">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:74"><block_content pos:start="95:17" pos:end="95:74">

                <expr_stmt pos:start="95:17" pos:end="95:74"><expr pos:start="95:17" pos:end="95:73"><call pos:start="95:17" pos:end="95:73"><name pos:start="95:17" pos:end="95:38">av_samples_set_silence</name><argument_list pos:start="95:39" pos:end="95:73">(<argument pos:start="95:40" pos:end="95:52"><expr pos:start="95:40" pos:end="95:52"><operator pos:start="95:40" pos:end="95:40">&amp;</operator><name pos:start="95:41" pos:end="95:52"><name pos:start="95:41" pos:end="95:43">src</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:49">data</name><index pos:start="95:50" pos:end="95:52">[<expr pos:start="95:51" pos:end="95:51"><name pos:start="95:51" pos:end="95:51">i</name></expr>]</index></name></expr></argument>, <argument pos:start="95:55" pos:end="95:55"><expr pos:start="95:55" pos:end="95:55"><literal type="number" pos:start="95:55" pos:end="95:55">0</literal></expr></argument>, <argument pos:start="95:58" pos:end="95:60"><expr pos:start="95:58" pos:end="95:60"><name pos:start="95:58" pos:end="95:60">len</name></expr></argument>, <argument pos:start="95:63" pos:end="95:63"><expr pos:start="95:63" pos:end="95:63"><literal type="number" pos:start="95:63" pos:end="95:63">1</literal></expr></argument>, <argument pos:start="95:66" pos:end="95:72"><expr pos:start="95:66" pos:end="95:72"><name pos:start="95:66" pos:end="95:72"><name pos:start="95:66" pos:end="95:67">am</name><operator pos:start="95:68" pos:end="95:69">-&gt;</operator><name pos:start="95:70" pos:end="95:72">fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:54"><expr pos:start="101:5" pos:end="101:53"><call pos:start="101:5" pos:end="101:53"><name pos:start="101:5" pos:end="101:30">ff_audio_data_set_channels</name><argument_list pos:start="101:31" pos:end="101:53">(<argument pos:start="101:32" pos:end="101:34"><expr pos:start="101:32" pos:end="101:34"><name pos:start="101:32" pos:end="101:34">src</name></expr></argument>, <argument pos:start="101:37" pos:end="101:52"><expr pos:start="101:37" pos:end="101:52"><name pos:start="101:37" pos:end="101:52"><name pos:start="101:37" pos:end="101:38">am</name><operator pos:start="101:39" pos:end="101:40">-&gt;</operator><name pos:start="101:41" pos:end="101:52">out_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
