<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19404.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:30">hw_device_init_from_string</name><parameter_list pos:start="1:31" pos:end="1:67">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">arg</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><name pos:start="1:49" pos:end="1:56">HWDevice</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier><modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:66">dev_out</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="297:1">{<block_content pos:start="19:5" pos:end="295:14">

    <comment type="line" pos:start="5:5" pos:end="5:47">// "type=name:device,key=value,key2=value2"</comment>

    <comment type="line" pos:start="7:5" pos:end="7:42">// "type:device,key=value,key2=value2"</comment>

    <comment type="line" pos:start="9:5" pos:end="9:34">// -&gt; av_hwdevice_ctx_create()</comment>

    <comment type="line" pos:start="11:5" pos:end="11:23">// "type=name@name"</comment>

    <comment type="line" pos:start="13:5" pos:end="13:18">// "type@name"</comment>

    <comment type="line" pos:start="15:5" pos:end="15:42">// -&gt; av_hwdevice_ctx_create_derived()</comment>



    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">AVDictionary</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:25">options</name> <init pos:start="19:27" pos:end="19:32">= <expr pos:start="19:29" pos:end="19:32"><name pos:start="19:29" pos:end="19:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:57"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:19">type_name</name> <init pos:start="21:21" pos:end="21:26">= <expr pos:start="21:23" pos:end="21:26"><name pos:start="21:23" pos:end="21:26">NULL</name></expr></init></decl>, <decl pos:start="21:29" pos:end="21:40"><type ref="prev" pos:start="21:5" pos:end="21:10"><modifier pos:start="21:29" pos:end="21:29">*</modifier></type><name pos:start="21:30" pos:end="21:33">name</name> <init pos:start="21:35" pos:end="21:40">= <expr pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:40">NULL</name></expr></init></decl>, <decl pos:start="21:43" pos:end="21:56"><type ref="prev" pos:start="21:5" pos:end="21:10"><modifier pos:start="21:43" pos:end="21:43">*</modifier></type><name pos:start="21:44" pos:end="21:49">device</name> <init pos:start="21:51" pos:end="21:56">= <expr pos:start="21:53" pos:end="21:56"><name pos:start="21:53" pos:end="21:56">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:8">enum</name> <name pos:start="23:10" pos:end="23:23">AVHWDeviceType</name></name></type> <name pos:start="23:25" pos:end="23:28">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">HWDevice</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:17">dev</name></decl>, <decl pos:start="25:20" pos:end="25:23"><type ref="prev" pos:start="25:5" pos:end="25:14"><modifier pos:start="25:20" pos:end="25:20">*</modifier></type><name pos:start="25:21" pos:end="25:23">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:35"><decl pos:start="27:5" pos:end="27:34"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">AVBufferRef</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:27">device_ref</name> <init pos:start="27:29" pos:end="27:34">= <expr pos:start="27:31" pos:end="27:34"><name pos:start="27:31" pos:end="27:34">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:31"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:16"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:14">char</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:22">errmsg</name></decl>, <decl pos:start="31:25" pos:end="31:26"><type ref="prev" pos:start="31:5" pos:end="31:16"><modifier pos:start="31:25" pos:end="31:25">*</modifier></type><name pos:start="31:26" pos:end="31:26">p</name></decl>, <decl pos:start="31:29" pos:end="31:30"><type ref="prev" pos:start="31:5" pos:end="31:16"><modifier pos:start="31:29" pos:end="31:29">*</modifier></type><name pos:start="31:30" pos:end="31:30">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:13"><decl pos:start="33:5" pos:end="33:12"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:10">size_t</name></type> <name pos:start="33:12" pos:end="33:12">k</name></decl>;</decl_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:5">k</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <call pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:15">strcspn</name><argument_list pos:start="37:16" pos:end="37:27">(<argument pos:start="37:17" pos:end="37:19"><expr pos:start="37:17" pos:end="37:19"><name pos:start="37:17" pos:end="37:19">arg</name></expr></argument>, <argument pos:start="37:22" pos:end="37:26"><expr pos:start="37:22" pos:end="37:26"><literal type="string" pos:start="37:22" pos:end="37:26">":=@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:5">p</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <name pos:start="39:9" pos:end="39:11">arg</name> <operator pos:start="39:13" pos:end="39:13">+</operator> <name pos:start="39:15" pos:end="39:15">k</name></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:35"><expr pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:13">type_name</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:34"><name pos:start="43:17" pos:end="43:26">av_strndup</name><argument_list pos:start="43:27" pos:end="43:34">(<argument pos:start="43:28" pos:end="43:30"><expr pos:start="43:28" pos:end="43:30"><name pos:start="43:28" pos:end="43:30">arg</name></expr></argument>, <argument pos:start="43:33" pos:end="43:33"><expr pos:start="43:33" pos:end="43:33"><name pos:start="43:33" pos:end="43:33">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:19">(<expr pos:start="45:9" pos:end="45:18"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:18">type_name</name></expr>)</condition> <block pos:start="45:21" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:18">

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:11">err</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:29"><name pos:start="47:15" pos:end="47:21">AVERROR</name><argument_list pos:start="47:22" pos:end="47:29">(<argument pos:start="47:23" pos:end="47:28"><expr pos:start="47:23" pos:end="47:28"><name pos:start="47:23" pos:end="47:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:18">goto <name pos:start="49:14" pos:end="49:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:52"><expr pos:start="53:5" pos:end="53:51"><name pos:start="53:5" pos:end="53:8">type</name> <operator pos:start="53:10" pos:end="53:10">=</operator> <call pos:start="53:12" pos:end="53:51"><name pos:start="53:12" pos:end="53:40">av_hwdevice_find_type_by_name</name><argument_list pos:start="53:41" pos:end="53:51">(<argument pos:start="53:42" pos:end="53:50"><expr pos:start="53:42" pos:end="53:50"><name pos:start="53:42" pos:end="53:50">type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:38">(<expr pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:12">type</name> <operator pos:start="55:14" pos:end="55:15">==</operator> <name pos:start="55:17" pos:end="55:37">AV_HWDEVICE_TYPE_NONE</name></expr>)</condition> <block pos:start="55:40" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:21">

        <expr_stmt pos:start="57:9" pos:end="57:39"><expr pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:14">errmsg</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <literal type="string" pos:start="57:18" pos:end="57:38">"unknown device type"</literal></expr>;</expr_stmt>

        <goto pos:start="59:9" pos:end="59:21">goto <name pos:start="59:14" pos:end="59:20">invalid</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="137:5"><if pos:start="65:5" pos:end="93:5">if <condition pos:start="65:8" pos:end="65:18">(<expr pos:start="65:9" pos:end="65:17"><operator pos:start="65:9" pos:end="65:9">*</operator><name pos:start="65:10" pos:end="65:10">p</name> <operator pos:start="65:12" pos:end="65:13">==</operator> <literal type="char" pos:start="65:15" pos:end="65:17">'='</literal></expr>)</condition> <block pos:start="65:20" pos:end="93:5">{<block_content pos:start="67:9" pos:end="91:19">

        <expr_stmt pos:start="67:9" pos:end="67:33"><expr pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:9">k</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:19">strcspn</name><argument_list pos:start="67:20" pos:end="67:32">(<argument pos:start="67:21" pos:end="67:25"><expr pos:start="67:21" pos:end="67:25"><name pos:start="67:21" pos:end="67:21">p</name> <operator pos:start="67:23" pos:end="67:23">+</operator> <literal type="number" pos:start="67:25" pos:end="67:25">1</literal></expr></argument>, <argument pos:start="67:28" pos:end="67:31"><expr pos:start="67:28" pos:end="67:31"><literal type="string" pos:start="67:28" pos:end="67:31">":@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:36"><expr pos:start="71:9" pos:end="71:35"><name pos:start="71:9" pos:end="71:12">name</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <call pos:start="71:16" pos:end="71:35"><name pos:start="71:16" pos:end="71:25">av_strndup</name><argument_list pos:start="71:26" pos:end="71:35">(<argument pos:start="71:27" pos:end="71:31"><expr pos:start="71:27" pos:end="71:31"><name pos:start="71:27" pos:end="71:27">p</name> <operator pos:start="71:29" pos:end="71:29">+</operator> <literal type="number" pos:start="71:31" pos:end="71:31">1</literal></expr></argument>, <argument pos:start="71:34" pos:end="71:34"><expr pos:start="71:34" pos:end="71:34"><name pos:start="71:34" pos:end="71:34">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:18">(<expr pos:start="73:13" pos:end="73:17"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:17">name</name></expr>)</condition> <block pos:start="73:20" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:22">

            <expr_stmt pos:start="75:13" pos:end="75:34"><expr pos:start="75:13" pos:end="75:33"><name pos:start="75:13" pos:end="75:15">err</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:33"><name pos:start="75:19" pos:end="75:25">AVERROR</name><argument_list pos:start="75:26" pos:end="75:33">(<argument pos:start="75:27" pos:end="75:32"><expr pos:start="75:27" pos:end="75:32"><name pos:start="75:27" pos:end="75:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:22">goto <name pos:start="77:18" pos:end="77:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:40">(<expr pos:start="81:13" pos:end="81:39"><call pos:start="81:13" pos:end="81:39"><name pos:start="81:13" pos:end="81:33">hw_device_get_by_name</name><argument_list pos:start="81:34" pos:end="81:39">(<argument pos:start="81:35" pos:end="81:38"><expr pos:start="81:35" pos:end="81:38"><name pos:start="81:35" pos:end="81:38">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:42" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:25">

            <expr_stmt pos:start="83:13" pos:end="83:51"><expr pos:start="83:13" pos:end="83:50"><name pos:start="83:13" pos:end="83:18">errmsg</name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="string" pos:start="83:22" pos:end="83:50">"named device already exists"</literal></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:25">goto <name pos:start="85:18" pos:end="85:24">invalid</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:19"><expr pos:start="91:9" pos:end="91:18"><name pos:start="91:9" pos:end="91:9">p</name> <operator pos:start="91:11" pos:end="91:12">+=</operator> <literal type="number" pos:start="91:14" pos:end="91:16">1</literal> <operator pos:start="91:16" pos:end="91:16">+</operator> <name pos:start="91:18" pos:end="91:18">k</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="137:5">else <block pos:start="93:12" pos:end="137:5">{<block_content pos:start="103:9" pos:end="135:9">

        <comment type="line" pos:start="95:9" pos:end="95:66">// Give the device an automatic name of the form "type%d".</comment>

        <comment type="line" pos:start="97:9" pos:end="97:69">// We arbitrarily limit at 1000 anonymous devices of the same</comment>

        <comment type="line" pos:start="99:9" pos:end="99:68">// type - there is probably something else very wrong if you</comment>

        <comment type="line" pos:start="101:9" pos:end="101:29">// get to this limit.</comment>

        <decl_stmt pos:start="103:9" pos:end="103:25"><decl pos:start="103:9" pos:end="103:24"><type pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:14">size_t</name></type> <name pos:start="103:16" pos:end="103:24">index_pos</name></decl>;</decl_stmt>

        <decl_stmt pos:start="105:9" pos:end="105:38"><decl pos:start="105:9" pos:end="105:17"><type pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">int</name></type> <name pos:start="105:13" pos:end="105:17">index</name></decl>, <decl pos:start="105:20" pos:end="105:37"><type ref="prev" pos:start="105:9" pos:end="105:11"/><name pos:start="105:20" pos:end="105:30">index_limit</name> <init pos:start="105:32" pos:end="105:37">= <expr pos:start="105:34" pos:end="105:37"><literal type="number" pos:start="105:34" pos:end="105:37">1000</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:38"><expr pos:start="107:9" pos:end="107:37"><name pos:start="107:9" pos:end="107:17">index_pos</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <call pos:start="107:21" pos:end="107:37"><name pos:start="107:21" pos:end="107:26">strlen</name><argument_list pos:start="107:27" pos:end="107:37">(<argument pos:start="107:28" pos:end="107:36"><expr pos:start="107:28" pos:end="107:36"><name pos:start="107:28" pos:end="107:36">type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:40"><expr pos:start="109:9" pos:end="109:39"><name pos:start="109:9" pos:end="109:12">name</name> <operator pos:start="109:14" pos:end="109:14">=</operator> <call pos:start="109:16" pos:end="109:39"><name pos:start="109:16" pos:end="109:24">av_malloc</name><argument_list pos:start="109:25" pos:end="109:39">(<argument pos:start="109:26" pos:end="109:38"><expr pos:start="109:26" pos:end="109:38"><name pos:start="109:26" pos:end="109:34">index_pos</name> <operator pos:start="109:36" pos:end="109:36">+</operator> <literal type="number" pos:start="109:38" pos:end="109:38">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:18">(<expr pos:start="111:13" pos:end="111:17"><operator pos:start="111:13" pos:end="111:13">!</operator><name pos:start="111:14" pos:end="111:17">name</name></expr>)</condition> <block pos:start="111:20" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:22">

            <expr_stmt pos:start="113:13" pos:end="113:34"><expr pos:start="113:13" pos:end="113:33"><name pos:start="113:13" pos:end="113:15">err</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <call pos:start="113:19" pos:end="113:33"><name pos:start="113:19" pos:end="113:25">AVERROR</name><argument_list pos:start="113:26" pos:end="113:33">(<argument pos:start="113:27" pos:end="113:32"><expr pos:start="113:27" pos:end="113:32"><name pos:start="113:27" pos:end="113:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="115:13" pos:end="115:22">goto <name pos:start="115:18" pos:end="115:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <for pos:start="119:9" pos:end="127:9">for <control pos:start="119:13" pos:end="119:53">(<init pos:start="119:14" pos:end="119:23"><expr pos:start="119:14" pos:end="119:22"><name pos:start="119:14" pos:end="119:18">index</name> <operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">0</literal></expr>;</init> <condition pos:start="119:25" pos:end="119:44"><expr pos:start="119:25" pos:end="119:43"><name pos:start="119:25" pos:end="119:29">index</name> <operator pos:start="119:31" pos:end="119:31">&lt;</operator> <name pos:start="119:33" pos:end="119:43">index_limit</name></expr>;</condition> <incr pos:start="119:46" pos:end="119:52"><expr pos:start="119:46" pos:end="119:52"><name pos:start="119:46" pos:end="119:50">index</name><operator pos:start="119:51" pos:end="119:52">++</operator></expr></incr>)</control> <block pos:start="119:55" pos:end="127:9">{<block_content pos:start="121:13" pos:end="125:22">

            <expr_stmt pos:start="121:13" pos:end="121:68"><expr pos:start="121:13" pos:end="121:67"><call pos:start="121:13" pos:end="121:67"><name pos:start="121:13" pos:end="121:20">snprintf</name><argument_list pos:start="121:21" pos:end="121:67">(<argument pos:start="121:22" pos:end="121:25"><expr pos:start="121:22" pos:end="121:25"><name pos:start="121:22" pos:end="121:25">name</name></expr></argument>, <argument pos:start="121:28" pos:end="121:40"><expr pos:start="121:28" pos:end="121:40"><name pos:start="121:28" pos:end="121:36">index_pos</name> <operator pos:start="121:38" pos:end="121:38">+</operator> <literal type="number" pos:start="121:40" pos:end="121:40">4</literal></expr></argument>, <argument pos:start="121:43" pos:end="121:48"><expr pos:start="121:43" pos:end="121:48"><literal type="string" pos:start="121:43" pos:end="121:48">"%s%d"</literal></expr></argument>, <argument pos:start="121:51" pos:end="121:59"><expr pos:start="121:51" pos:end="121:59"><name pos:start="121:51" pos:end="121:59">type_name</name></expr></argument>, <argument pos:start="121:62" pos:end="121:66"><expr pos:start="121:62" pos:end="121:66"><name pos:start="121:62" pos:end="121:66">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="123:13" pos:end="125:22"><if pos:start="123:13" pos:end="125:22">if <condition pos:start="123:16" pos:end="123:45">(<expr pos:start="123:17" pos:end="123:44"><operator pos:start="123:17" pos:end="123:17">!</operator><call pos:start="123:18" pos:end="123:44"><name pos:start="123:18" pos:end="123:38">hw_device_get_by_name</name><argument_list pos:start="123:39" pos:end="123:44">(<argument pos:start="123:40" pos:end="123:43"><expr pos:start="123:40" pos:end="123:43"><name pos:start="123:40" pos:end="123:43">name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="125:17" pos:end="125:22"><block_content pos:start="125:17" pos:end="125:22">

                <break pos:start="125:17" pos:end="125:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:33">(<expr pos:start="129:13" pos:end="129:32"><name pos:start="129:13" pos:end="129:17">index</name> <operator pos:start="129:19" pos:end="129:20">&gt;=</operator> <name pos:start="129:22" pos:end="129:32">index_limit</name></expr>)</condition> <block pos:start="129:35" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:25">

            <expr_stmt pos:start="131:13" pos:end="131:40"><expr pos:start="131:13" pos:end="131:39"><name pos:start="131:13" pos:end="131:18">errmsg</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <literal type="string" pos:start="131:22" pos:end="131:39">"too many devices"</literal></expr>;</expr_stmt>

            <goto pos:start="133:13" pos:end="133:25">goto <name pos:start="133:18" pos:end="133:24">invalid</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="141:5" pos:end="231:5"><if pos:start="141:5" pos:end="155:5">if <condition pos:start="141:8" pos:end="141:12">(<expr pos:start="141:9" pos:end="141:11"><operator pos:start="141:9" pos:end="141:9">!</operator><operator pos:start="141:10" pos:end="141:10">*</operator><name pos:start="141:11" pos:end="141:11">p</name></expr>)</condition> <block pos:start="141:14" pos:end="155:5">{<block_content pos:start="145:9" pos:end="151:22">

        <comment type="line" pos:start="143:9" pos:end="143:41">// New device with no parameters.</comment>

        <expr_stmt pos:start="145:9" pos:end="147:52"><expr pos:start="145:9" pos:end="147:51"><name pos:start="145:9" pos:end="145:11">err</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <call pos:start="145:15" pos:end="147:51"><name pos:start="145:15" pos:end="145:36">av_hwdevice_ctx_create</name><argument_list pos:start="145:37" pos:end="147:51">(<argument pos:start="145:38" pos:end="145:48"><expr pos:start="145:38" pos:end="145:48"><operator pos:start="145:38" pos:end="145:38">&amp;</operator><name pos:start="145:39" pos:end="145:48">device_ref</name></expr></argument>, <argument pos:start="145:51" pos:end="145:54"><expr pos:start="145:51" pos:end="145:54"><name pos:start="145:51" pos:end="145:54">type</name></expr></argument>,

                                     <argument pos:start="147:38" pos:end="147:41"><expr pos:start="147:38" pos:end="147:41"><name pos:start="147:38" pos:end="147:41">NULL</name></expr></argument>, <argument pos:start="147:44" pos:end="147:47"><expr pos:start="147:44" pos:end="147:47"><name pos:start="147:44" pos:end="147:47">NULL</name></expr></argument>, <argument pos:start="147:50" pos:end="147:50"><expr pos:start="147:50" pos:end="147:50"><literal type="number" pos:start="147:50" pos:end="147:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="151:22"><if pos:start="149:9" pos:end="151:22">if <condition pos:start="149:12" pos:end="149:20">(<expr pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:15">err</name> <operator pos:start="149:17" pos:end="149:17">&lt;</operator> <literal type="number" pos:start="149:19" pos:end="149:19">0</literal></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:22"><block_content pos:start="151:13" pos:end="151:22">

            <goto pos:start="151:13" pos:end="151:22">goto <name pos:start="151:18" pos:end="151:21">fail</name>;</goto></block_content></block></if></if_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="155:7" pos:end="199:5">else if <condition pos:start="155:15" pos:end="155:25">(<expr pos:start="155:16" pos:end="155:24"><operator pos:start="155:16" pos:end="155:16">*</operator><name pos:start="155:17" pos:end="155:17">p</name> <operator pos:start="155:19" pos:end="155:20">==</operator> <literal type="char" pos:start="155:22" pos:end="155:24">':'</literal></expr>)</condition> <block pos:start="155:27" pos:end="199:5">{<block_content pos:start="159:9" pos:end="195:22">

        <comment type="line" pos:start="157:9" pos:end="157:43">// New device with some parameters.</comment>

        <expr_stmt pos:start="159:9" pos:end="159:12"><expr pos:start="159:9" pos:end="159:11"><operator pos:start="159:9" pos:end="159:10">++</operator><name pos:start="159:11" pos:end="159:11">p</name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:27"><expr pos:start="161:9" pos:end="161:26"><name pos:start="161:9" pos:end="161:9">q</name> <operator pos:start="161:11" pos:end="161:11">=</operator> <call pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:18">strchr</name><argument_list pos:start="161:19" pos:end="161:26">(<argument pos:start="161:20" pos:end="161:20"><expr pos:start="161:20" pos:end="161:20"><name pos:start="161:20" pos:end="161:20">p</name></expr></argument>, <argument pos:start="161:23" pos:end="161:25"><expr pos:start="161:23" pos:end="161:25"><literal type="char" pos:start="161:23" pos:end="161:25">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="163:9" pos:end="185:9"><if pos:start="163:9" pos:end="185:9">if <condition pos:start="163:12" pos:end="163:14">(<expr pos:start="163:13" pos:end="163:13"><name pos:start="163:13" pos:end="163:13">q</name></expr>)</condition> <block pos:start="163:16" pos:end="185:9">{<block_content pos:start="165:13" pos:end="183:13">

            <expr_stmt pos:start="165:13" pos:end="165:42"><expr pos:start="165:13" pos:end="165:41"><name pos:start="165:13" pos:end="165:18">device</name> <operator pos:start="165:20" pos:end="165:20">=</operator> <call pos:start="165:22" pos:end="165:41"><name pos:start="165:22" pos:end="165:31">av_strndup</name><argument_list pos:start="165:32" pos:end="165:41">(<argument pos:start="165:33" pos:end="165:33"><expr pos:start="165:33" pos:end="165:33"><name pos:start="165:33" pos:end="165:33">p</name></expr></argument>, <argument pos:start="165:36" pos:end="165:40"><expr pos:start="165:36" pos:end="165:40"><name pos:start="165:36" pos:end="165:36">q</name> <operator pos:start="165:38" pos:end="165:38">-</operator> <name pos:start="165:40" pos:end="165:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="173:13"><if pos:start="167:13" pos:end="173:13">if <condition pos:start="167:16" pos:end="167:24">(<expr pos:start="167:17" pos:end="167:23"><operator pos:start="167:17" pos:end="167:17">!</operator><name pos:start="167:18" pos:end="167:23">device</name></expr>)</condition> <block pos:start="167:26" pos:end="173:13">{<block_content pos:start="169:17" pos:end="171:26">

                <expr_stmt pos:start="169:17" pos:end="169:38"><expr pos:start="169:17" pos:end="169:37"><name pos:start="169:17" pos:end="169:19">err</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <call pos:start="169:23" pos:end="169:37"><name pos:start="169:23" pos:end="169:29">AVERROR</name><argument_list pos:start="169:30" pos:end="169:37">(<argument pos:start="169:31" pos:end="169:36"><expr pos:start="169:31" pos:end="169:36"><name pos:start="169:31" pos:end="169:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="171:17" pos:end="171:26">goto <name pos:start="171:22" pos:end="171:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:69"><expr pos:start="175:13" pos:end="175:68"><name pos:start="175:13" pos:end="175:15">err</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <call pos:start="175:19" pos:end="175:68"><name pos:start="175:19" pos:end="175:38">av_dict_parse_string</name><argument_list pos:start="175:39" pos:end="175:68">(<argument pos:start="175:40" pos:end="175:47"><expr pos:start="175:40" pos:end="175:47"><operator pos:start="175:40" pos:end="175:40">&amp;</operator><name pos:start="175:41" pos:end="175:47">options</name></expr></argument>, <argument pos:start="175:50" pos:end="175:54"><expr pos:start="175:50" pos:end="175:54"><name pos:start="175:50" pos:end="175:50">q</name> <operator pos:start="175:52" pos:end="175:52">+</operator> <literal type="number" pos:start="175:54" pos:end="175:54">1</literal></expr></argument>, <argument pos:start="175:57" pos:end="175:59"><expr pos:start="175:57" pos:end="175:59"><literal type="string" pos:start="175:57" pos:end="175:59">"="</literal></expr></argument>, <argument pos:start="175:62" pos:end="175:64"><expr pos:start="175:62" pos:end="175:64"><literal type="string" pos:start="175:62" pos:end="175:64">","</literal></expr></argument>, <argument pos:start="175:67" pos:end="175:67"><expr pos:start="175:67" pos:end="175:67"><literal type="number" pos:start="175:67" pos:end="175:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="183:13"><if pos:start="177:13" pos:end="183:13">if <condition pos:start="177:16" pos:end="177:24">(<expr pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:19">err</name> <operator pos:start="177:21" pos:end="177:21">&lt;</operator> <literal type="number" pos:start="177:23" pos:end="177:23">0</literal></expr>)</condition> <block pos:start="177:26" pos:end="183:13">{<block_content pos:start="179:17" pos:end="181:29">

                <expr_stmt pos:start="179:17" pos:end="179:51"><expr pos:start="179:17" pos:end="179:50"><name pos:start="179:17" pos:end="179:22">errmsg</name> <operator pos:start="179:24" pos:end="179:24">=</operator> <literal type="string" pos:start="179:26" pos:end="179:50">"failed to parse options"</literal></expr>;</expr_stmt>

                <goto pos:start="181:17" pos:end="181:29">goto <name pos:start="181:22" pos:end="181:28">invalid</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="189:9" pos:end="191:70"><expr pos:start="189:9" pos:end="191:69"><name pos:start="189:9" pos:end="189:11">err</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="191:69"><name pos:start="189:15" pos:end="189:36">av_hwdevice_ctx_create</name><argument_list pos:start="189:37" pos:end="191:69">(<argument pos:start="189:38" pos:end="189:48"><expr pos:start="189:38" pos:end="189:48"><operator pos:start="189:38" pos:end="189:38">&amp;</operator><name pos:start="189:39" pos:end="189:48">device_ref</name></expr></argument>, <argument pos:start="189:51" pos:end="189:54"><expr pos:start="189:51" pos:end="189:54"><name pos:start="189:51" pos:end="189:54">type</name></expr></argument>,

                                     <argument pos:start="191:38" pos:end="191:56"><expr pos:start="191:38" pos:end="191:56"><ternary pos:start="191:38" pos:end="191:56"><condition pos:start="191:38" pos:end="191:45"><expr pos:start="191:38" pos:end="191:43"><name pos:start="191:38" pos:end="191:43">device</name></expr> ?</condition><then pos:start="191:47" pos:end="191:52"> <expr pos:start="191:47" pos:end="191:52"><name pos:start="191:47" pos:end="191:52">device</name></expr> </then><else pos:start="191:54" pos:end="191:56">: <expr pos:start="191:56" pos:end="191:56"><name pos:start="191:56" pos:end="191:56">p</name></expr></else></ternary></expr></argument>, <argument pos:start="191:59" pos:end="191:65"><expr pos:start="191:59" pos:end="191:65"><name pos:start="191:59" pos:end="191:65">options</name></expr></argument>, <argument pos:start="191:68" pos:end="191:68"><expr pos:start="191:68" pos:end="191:68"><literal type="number" pos:start="191:68" pos:end="191:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="193:9" pos:end="195:22"><if pos:start="193:9" pos:end="195:22">if <condition pos:start="193:12" pos:end="193:20">(<expr pos:start="193:13" pos:end="193:19"><name pos:start="193:13" pos:end="193:15">err</name> <operator pos:start="193:17" pos:end="193:17">&lt;</operator> <literal type="number" pos:start="193:19" pos:end="193:19">0</literal></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="195:22"><block_content pos:start="195:13" pos:end="195:22">

            <goto pos:start="195:13" pos:end="195:22">goto <name pos:start="195:18" pos:end="195:21">fail</name>;</goto></block_content></block></if></if_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="199:7" pos:end="225:5">else if <condition pos:start="199:15" pos:end="199:25">(<expr pos:start="199:16" pos:end="199:24"><operator pos:start="199:16" pos:end="199:16">*</operator><name pos:start="199:17" pos:end="199:17">p</name> <operator pos:start="199:19" pos:end="199:20">==</operator> <literal type="char" pos:start="199:22" pos:end="199:24">'@'</literal></expr>)</condition> <block pos:start="199:27" pos:end="225:5">{<block_content pos:start="205:9" pos:end="223:22">

        <comment type="line" pos:start="201:9" pos:end="201:39">// Derive from existing device.</comment>



        <expr_stmt pos:start="205:9" pos:end="205:43"><expr pos:start="205:9" pos:end="205:42"><name pos:start="205:9" pos:end="205:11">src</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <call pos:start="205:15" pos:end="205:42"><name pos:start="205:15" pos:end="205:35">hw_device_get_by_name</name><argument_list pos:start="205:36" pos:end="205:42">(<argument pos:start="205:37" pos:end="205:41"><expr pos:start="205:37" pos:end="205:41"><name pos:start="205:37" pos:end="205:37">p</name> <operator pos:start="205:39" pos:end="205:39">+</operator> <literal type="number" pos:start="205:41" pos:end="205:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="207:9" pos:end="213:9"><if pos:start="207:9" pos:end="213:9">if <condition pos:start="207:12" pos:end="207:17">(<expr pos:start="207:13" pos:end="207:16"><operator pos:start="207:13" pos:end="207:13">!</operator><name pos:start="207:14" pos:end="207:16">src</name></expr>)</condition> <block pos:start="207:19" pos:end="213:9">{<block_content pos:start="209:13" pos:end="211:25">

            <expr_stmt pos:start="209:13" pos:end="209:50"><expr pos:start="209:13" pos:end="209:49"><name pos:start="209:13" pos:end="209:18">errmsg</name> <operator pos:start="209:20" pos:end="209:20">=</operator> <literal type="string" pos:start="209:22" pos:end="209:49">"invalid source device name"</literal></expr>;</expr_stmt>

            <goto pos:start="211:13" pos:end="211:25">goto <name pos:start="211:18" pos:end="211:24">invalid</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="217:9" pos:end="219:65"><expr pos:start="217:9" pos:end="219:64"><name pos:start="217:9" pos:end="217:11">err</name> <operator pos:start="217:13" pos:end="217:13">=</operator> <call pos:start="217:15" pos:end="219:64"><name pos:start="217:15" pos:end="217:44">av_hwdevice_ctx_create_derived</name><argument_list pos:start="217:45" pos:end="219:64">(<argument pos:start="217:46" pos:end="217:56"><expr pos:start="217:46" pos:end="217:56"><operator pos:start="217:46" pos:end="217:46">&amp;</operator><name pos:start="217:47" pos:end="217:56">device_ref</name></expr></argument>, <argument pos:start="217:59" pos:end="217:62"><expr pos:start="217:59" pos:end="217:62"><name pos:start="217:59" pos:end="217:62">type</name></expr></argument>,

                                             <argument pos:start="219:46" pos:end="219:60"><expr pos:start="219:46" pos:end="219:60"><name pos:start="219:46" pos:end="219:60"><name pos:start="219:46" pos:end="219:48">src</name><operator pos:start="219:49" pos:end="219:50">-&gt;</operator><name pos:start="219:51" pos:end="219:60">device_ref</name></name></expr></argument>, <argument pos:start="219:63" pos:end="219:63"><expr pos:start="219:63" pos:end="219:63"><literal type="number" pos:start="219:63" pos:end="219:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="221:9" pos:end="223:22"><if pos:start="221:9" pos:end="223:22">if <condition pos:start="221:12" pos:end="221:20">(<expr pos:start="221:13" pos:end="221:19"><name pos:start="221:13" pos:end="221:15">err</name> <operator pos:start="221:17" pos:end="221:17">&lt;</operator> <literal type="number" pos:start="221:19" pos:end="221:19">0</literal></expr>)</condition><block type="pseudo" pos:start="223:13" pos:end="223:22"><block_content pos:start="223:13" pos:end="223:22">

            <goto pos:start="223:13" pos:end="223:22">goto <name pos:start="223:18" pos:end="223:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="231:5">else <block pos:start="225:12" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:21">

        <expr_stmt pos:start="227:9" pos:end="227:31"><expr pos:start="227:9" pos:end="227:30"><name pos:start="227:9" pos:end="227:14">errmsg</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <literal type="string" pos:start="227:18" pos:end="227:30">"parse error"</literal></expr>;</expr_stmt>

        <goto pos:start="229:9" pos:end="229:21">goto <name pos:start="229:14" pos:end="229:20">invalid</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:26"><expr pos:start="235:5" pos:end="235:25"><name pos:start="235:5" pos:end="235:7">dev</name> <operator pos:start="235:9" pos:end="235:9">=</operator> <call pos:start="235:11" pos:end="235:25"><name pos:start="235:11" pos:end="235:23">hw_device_add</name><argument_list pos:start="235:24" pos:end="235:25">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="243:5"><if pos:start="237:5" pos:end="243:5">if <condition pos:start="237:8" pos:end="237:13">(<expr pos:start="237:9" pos:end="237:12"><operator pos:start="237:9" pos:end="237:9">!</operator><name pos:start="237:10" pos:end="237:12">dev</name></expr>)</condition> <block pos:start="237:15" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:18">

        <expr_stmt pos:start="239:9" pos:end="239:30"><expr pos:start="239:9" pos:end="239:29"><name pos:start="239:9" pos:end="239:11">err</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <call pos:start="239:15" pos:end="239:29"><name pos:start="239:15" pos:end="239:21">AVERROR</name><argument_list pos:start="239:22" pos:end="239:29">(<argument pos:start="239:23" pos:end="239:28"><expr pos:start="239:23" pos:end="239:28"><name pos:start="239:23" pos:end="239:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="241:9" pos:end="241:18">goto <name pos:start="241:14" pos:end="241:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:21"><expr pos:start="247:5" pos:end="247:20"><name pos:start="247:5" pos:end="247:13"><name pos:start="247:5" pos:end="247:7">dev</name><operator pos:start="247:8" pos:end="247:9">-&gt;</operator><name pos:start="247:10" pos:end="247:13">name</name></name> <operator pos:start="247:15" pos:end="247:15">=</operator> <name pos:start="247:17" pos:end="247:20">name</name></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:21"><expr pos:start="249:5" pos:end="249:20"><name pos:start="249:5" pos:end="249:13"><name pos:start="249:5" pos:end="249:7">dev</name><operator pos:start="249:8" pos:end="249:9">-&gt;</operator><name pos:start="249:10" pos:end="249:13">type</name></name> <operator pos:start="249:15" pos:end="249:15">=</operator> <name pos:start="249:17" pos:end="249:20">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:33"><expr pos:start="251:5" pos:end="251:32"><name pos:start="251:5" pos:end="251:19"><name pos:start="251:5" pos:end="251:7">dev</name><operator pos:start="251:8" pos:end="251:9">-&gt;</operator><name pos:start="251:10" pos:end="251:19">device_ref</name></name> <operator pos:start="251:21" pos:end="251:21">=</operator> <name pos:start="251:23" pos:end="251:32">device_ref</name></expr>;</expr_stmt>



    <if_stmt pos:start="255:5" pos:end="257:23"><if pos:start="255:5" pos:end="257:23">if <condition pos:start="255:8" pos:end="255:16">(<expr pos:start="255:9" pos:end="255:15"><name pos:start="255:9" pos:end="255:15">dev_out</name></expr>)</condition><block type="pseudo" pos:start="257:9" pos:end="257:23"><block_content pos:start="257:9" pos:end="257:23">

        <expr_stmt pos:start="257:9" pos:end="257:23"><expr pos:start="257:9" pos:end="257:22"><operator pos:start="257:9" pos:end="257:9">*</operator><name pos:start="257:10" pos:end="257:16">dev_out</name> <operator pos:start="257:18" pos:end="257:18">=</operator> <name pos:start="257:20" pos:end="257:22">dev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:16"><expr pos:start="261:5" pos:end="261:15"><name pos:start="261:5" pos:end="261:8">name</name> <operator pos:start="261:10" pos:end="261:10">=</operator> <name pos:start="261:12" pos:end="261:15">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:12"><expr pos:start="263:5" pos:end="263:11"><name pos:start="263:5" pos:end="263:7">err</name> <operator pos:start="263:9" pos:end="263:9">=</operator> <literal type="number" pos:start="263:11" pos:end="263:11">0</literal></expr>;</expr_stmt>

<label pos:start="265:1" pos:end="265:5"><name pos:start="265:1" pos:end="265:4">done</name>:</label>

    <expr_stmt pos:start="267:5" pos:end="267:25"><expr pos:start="267:5" pos:end="267:24"><call pos:start="267:5" pos:end="267:24"><name pos:start="267:5" pos:end="267:12">av_freep</name><argument_list pos:start="267:13" pos:end="267:24">(<argument pos:start="267:14" pos:end="267:23"><expr pos:start="267:14" pos:end="267:23"><operator pos:start="267:14" pos:end="267:14">&amp;</operator><name pos:start="267:15" pos:end="267:23">type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:20"><expr pos:start="269:5" pos:end="269:19"><call pos:start="269:5" pos:end="269:19"><name pos:start="269:5" pos:end="269:12">av_freep</name><argument_list pos:start="269:13" pos:end="269:19">(<argument pos:start="269:14" pos:end="269:18"><expr pos:start="269:14" pos:end="269:18"><operator pos:start="269:14" pos:end="269:14">&amp;</operator><name pos:start="269:15" pos:end="269:18">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:22"><expr pos:start="271:5" pos:end="271:21"><call pos:start="271:5" pos:end="271:21"><name pos:start="271:5" pos:end="271:12">av_freep</name><argument_list pos:start="271:13" pos:end="271:21">(<argument pos:start="271:14" pos:end="271:20"><expr pos:start="271:14" pos:end="271:20"><operator pos:start="271:14" pos:end="271:14">&amp;</operator><name pos:start="271:15" pos:end="271:20">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:27"><expr pos:start="273:5" pos:end="273:26"><call pos:start="273:5" pos:end="273:26"><name pos:start="273:5" pos:end="273:16">av_dict_free</name><argument_list pos:start="273:17" pos:end="273:26">(<argument pos:start="273:18" pos:end="273:25"><expr pos:start="273:18" pos:end="273:25"><operator pos:start="273:18" pos:end="273:18">&amp;</operator><name pos:start="273:19" pos:end="273:25">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="275:5" pos:end="275:15">return <expr pos:start="275:12" pos:end="275:14"><name pos:start="275:12" pos:end="275:14">err</name></expr>;</return>

<label pos:start="277:1" pos:end="277:8"><name pos:start="277:1" pos:end="277:7">invalid</name>:</label>

    <expr_stmt pos:start="279:5" pos:end="281:69"><expr pos:start="279:5" pos:end="281:68"><call pos:start="279:5" pos:end="281:68"><name pos:start="279:5" pos:end="279:10">av_log</name><argument_list pos:start="279:11" pos:end="281:68">(<argument pos:start="279:12" pos:end="279:15"><expr pos:start="279:12" pos:end="279:15"><name pos:start="279:12" pos:end="279:15">NULL</name></expr></argument>, <argument pos:start="279:18" pos:end="279:29"><expr pos:start="279:18" pos:end="279:29"><name pos:start="279:18" pos:end="279:29">AV_LOG_ERROR</name></expr></argument>,

           <argument pos:start="281:12" pos:end="281:54"><expr pos:start="281:12" pos:end="281:54"><literal type="string" pos:start="281:12" pos:end="281:54">"Invalid device specification \"%s\": %s\n"</literal></expr></argument>, <argument pos:start="281:57" pos:end="281:59"><expr pos:start="281:57" pos:end="281:59"><name pos:start="281:57" pos:end="281:59">arg</name></expr></argument>, <argument pos:start="281:62" pos:end="281:67"><expr pos:start="281:62" pos:end="281:67"><name pos:start="281:62" pos:end="281:67">errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:26"><expr pos:start="283:5" pos:end="283:25"><name pos:start="283:5" pos:end="283:7">err</name> <operator pos:start="283:9" pos:end="283:9">=</operator> <call pos:start="283:11" pos:end="283:25"><name pos:start="283:11" pos:end="283:17">AVERROR</name><argument_list pos:start="283:18" pos:end="283:25">(<argument pos:start="283:19" pos:end="283:24"><expr pos:start="283:19" pos:end="283:24"><name pos:start="283:19" pos:end="283:24">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <goto pos:start="285:5" pos:end="285:14">goto <name pos:start="285:10" pos:end="285:13">done</name>;</goto>

<label pos:start="287:1" pos:end="287:5"><name pos:start="287:1" pos:end="287:4">fail</name>:</label>

    <expr_stmt pos:start="289:5" pos:end="291:49"><expr pos:start="289:5" pos:end="291:48"><call pos:start="289:5" pos:end="291:48"><name pos:start="289:5" pos:end="289:10">av_log</name><argument_list pos:start="289:11" pos:end="291:48">(<argument pos:start="289:12" pos:end="289:15"><expr pos:start="289:12" pos:end="289:15"><name pos:start="289:12" pos:end="289:15">NULL</name></expr></argument>, <argument pos:start="289:18" pos:end="289:29"><expr pos:start="289:18" pos:end="289:29"><name pos:start="289:18" pos:end="289:29">AV_LOG_ERROR</name></expr></argument>,

           <argument pos:start="291:12" pos:end="291:42"><expr pos:start="291:12" pos:end="291:42"><literal type="string" pos:start="291:12" pos:end="291:42">"Device creation failed: %d.\n"</literal></expr></argument>, <argument pos:start="291:45" pos:end="291:47"><expr pos:start="291:45" pos:end="291:47"><name pos:start="291:45" pos:end="291:47">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:33"><expr pos:start="293:5" pos:end="293:32"><call pos:start="293:5" pos:end="293:32"><name pos:start="293:5" pos:end="293:19">av_buffer_unref</name><argument_list pos:start="293:20" pos:end="293:32">(<argument pos:start="293:21" pos:end="293:31"><expr pos:start="293:21" pos:end="293:31"><operator pos:start="293:21" pos:end="293:21">&amp;</operator><name pos:start="293:22" pos:end="293:31">device_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <goto pos:start="295:5" pos:end="295:14">goto <name pos:start="295:10" pos:end="295:13">done</name>;</goto>

</block_content>}</block></function>
</unit>
