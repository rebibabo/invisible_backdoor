<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27305.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">scsi_generic_realize</name><parameter_list pos:start="1:33" pos:end="1:61">(<parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:43">SCSIDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:45">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">sg_version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:21">sg_scsi_id</name></name></type> <name pos:start="9:23" pos:end="9:28">scsiid</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:10">s</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:16">conf</name><operator pos:start="13:17" pos:end="13:17">.</operator><name pos:start="13:18" pos:end="13:19">bs</name></name></expr>)</condition> <block pos:start="13:22" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:51"><expr pos:start="15:9" pos:end="15:50"><call pos:start="15:9" pos:end="15:50"><name pos:start="15:9" pos:end="15:18">error_setg</name><argument_list pos:start="15:19" pos:end="15:50">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">errp</name></expr></argument>, <argument pos:start="15:26" pos:end="15:49"><expr pos:start="15:26" pos:end="15:49"><literal type="string" pos:start="15:26" pos:end="15:49">"drive property not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:69">(<expr pos:start="23:9" pos:end="23:68"><call pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:25">bdrv_get_on_error</name><argument_list pos:start="23:26" pos:end="23:40">(<argument pos:start="23:27" pos:end="23:36"><expr pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:33">conf</name><operator pos:start="23:34" pos:end="23:34">.</operator><name pos:start="23:35" pos:end="23:36">bs</name></name></expr></argument>, <argument pos:start="23:39" pos:end="23:39"><expr pos:start="23:39" pos:end="23:39"><literal type="number" pos:start="23:39" pos:end="23:39">0</literal></expr></argument>)</argument_list></call> <operator pos:start="23:42" pos:end="23:43">!=</operator> <name pos:start="23:45" pos:end="23:68">BLOCKDEV_ON_ERROR_ENOSPC</name></expr>)</condition> <block pos:start="23:71" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:15">

        <expr_stmt pos:start="25:9" pos:end="25:71"><expr pos:start="25:9" pos:end="25:70"><call pos:start="25:9" pos:end="25:70"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="25:70">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="25:69"><expr pos:start="25:26" pos:end="25:69"><literal type="string" pos:start="25:26" pos:end="25:69">"Device doesn't support drive option werror"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:69">(<expr pos:start="31:9" pos:end="31:68"><call pos:start="31:9" pos:end="31:40"><name pos:start="31:9" pos:end="31:25">bdrv_get_on_error</name><argument_list pos:start="31:26" pos:end="31:40">(<argument pos:start="31:27" pos:end="31:36"><expr pos:start="31:27" pos:end="31:36"><name pos:start="31:27" pos:end="31:36"><name pos:start="31:27" pos:end="31:27">s</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:33">conf</name><operator pos:start="31:34" pos:end="31:34">.</operator><name pos:start="31:35" pos:end="31:36">bs</name></name></expr></argument>, <argument pos:start="31:39" pos:end="31:39"><expr pos:start="31:39" pos:end="31:39"><literal type="number" pos:start="31:39" pos:end="31:39">1</literal></expr></argument>)</argument_list></call> <operator pos:start="31:42" pos:end="31:43">!=</operator> <name pos:start="31:45" pos:end="31:68">BLOCKDEV_ON_ERROR_REPORT</name></expr>)</condition> <block pos:start="31:71" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:71"><expr pos:start="33:9" pos:end="33:70"><call pos:start="33:9" pos:end="33:70"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="33:70">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="33:69"><expr pos:start="33:26" pos:end="33:69"><literal type="string" pos:start="33:26" pos:end="33:69">"Device doesn't support drive option rerror"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:73">/* check we are using a driver managing SG_IO (version 3 and after */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:65"><expr pos:start="43:5" pos:end="43:64"><name pos:start="43:5" pos:end="43:6">rc</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <call pos:start="43:10" pos:end="43:64"><name pos:start="43:10" pos:end="43:19">bdrv_ioctl</name><argument_list pos:start="43:20" pos:end="43:64">(<argument pos:start="43:21" pos:end="43:30"><expr pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:27">conf</name><operator pos:start="43:28" pos:end="43:28">.</operator><name pos:start="43:29" pos:end="43:30">bs</name></name></expr></argument>, <argument pos:start="43:33" pos:end="43:50"><expr pos:start="43:33" pos:end="43:50"><name pos:start="43:33" pos:end="43:50">SG_GET_VERSION_NUM</name></expr></argument>, <argument pos:start="43:53" pos:end="43:63"><expr pos:start="43:53" pos:end="43:63"><operator pos:start="43:53" pos:end="43:53">&amp;</operator><name pos:start="43:54" pos:end="43:63">sg_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="55:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:15">(<expr pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:10">rc</name> <operator pos:start="45:12" pos:end="45:12">&lt;</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>)</condition> <block pos:start="45:17" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:15">

        <expr_stmt pos:start="47:9" pos:end="51:40"><expr pos:start="47:9" pos:end="51:39"><call pos:start="47:9" pos:end="51:39"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="51:39">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">errp</name></expr></argument>, <argument pos:start="47:26" pos:end="49:49"><expr pos:start="47:26" pos:end="49:49"><literal type="string" pos:start="47:26" pos:end="47:65">"cannot get SG_IO version number: %s.  "</literal>

                         <literal type="string" pos:start="49:26" pos:end="49:49">"Is this a SCSI device?"</literal></expr></argument>,

                         <argument pos:start="51:26" pos:end="51:38"><expr pos:start="51:26" pos:end="51:38"><call pos:start="51:26" pos:end="51:38"><name pos:start="51:26" pos:end="51:33">strerror</name><argument_list pos:start="51:34" pos:end="51:38">(<argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><operator pos:start="51:35" pos:end="51:35">-</operator><name pos:start="51:36" pos:end="51:37">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:27">(<expr pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:18">sg_version</name> <operator pos:start="57:20" pos:end="57:20">&lt;</operator> <literal type="number" pos:start="57:22" pos:end="57:26">30000</literal></expr>)</condition> <block pos:start="57:29" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:15">

        <expr_stmt pos:start="59:9" pos:end="59:59"><expr pos:start="59:9" pos:end="59:58"><call pos:start="59:9" pos:end="59:58"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="59:58">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="59:57"><expr pos:start="59:26" pos:end="59:57"><literal type="string" pos:start="59:26" pos:end="59:57">"scsi generic interface too old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:33">/* get LUN of the /dev/sg? */</comment>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:56">(<expr pos:start="69:9" pos:end="69:55"><call pos:start="69:9" pos:end="69:55"><name pos:start="69:9" pos:end="69:18">bdrv_ioctl</name><argument_list pos:start="69:19" pos:end="69:55">(<argument pos:start="69:20" pos:end="69:29"><expr pos:start="69:20" pos:end="69:29"><name pos:start="69:20" pos:end="69:29"><name pos:start="69:20" pos:end="69:20">s</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:26">conf</name><operator pos:start="69:27" pos:end="69:27">.</operator><name pos:start="69:28" pos:end="69:29">bs</name></name></expr></argument>, <argument pos:start="69:32" pos:end="69:45"><expr pos:start="69:32" pos:end="69:45"><name pos:start="69:32" pos:end="69:45">SG_GET_SCSI_ID</name></expr></argument>, <argument pos:start="69:48" pos:end="69:54"><expr pos:start="69:48" pos:end="69:54"><operator pos:start="69:48" pos:end="69:48">&amp;</operator><name pos:start="69:49" pos:end="69:54">scsiid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:58" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:15">

        <expr_stmt pos:start="71:9" pos:end="71:56"><expr pos:start="71:9" pos:end="71:55"><call pos:start="71:9" pos:end="71:55"><name pos:start="71:9" pos:end="71:18">error_setg</name><argument_list pos:start="71:19" pos:end="71:55">(<argument pos:start="71:20" pos:end="71:23"><expr pos:start="71:20" pos:end="71:23"><name pos:start="71:20" pos:end="71:23">errp</name></expr></argument>, <argument pos:start="71:26" pos:end="71:54"><expr pos:start="71:26" pos:end="71:54"><literal type="string" pos:start="71:26" pos:end="71:54">"SG_GET_SCSI_ID ioctl failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:29">/* define device state */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:31"><expr pos:start="81:5" pos:end="81:30"><name pos:start="81:5" pos:end="81:11"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:11">type</name></name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:30"><name pos:start="81:15" pos:end="81:20">scsiid</name><operator pos:start="81:21" pos:end="81:21">.</operator><name pos:start="81:22" pos:end="81:30">scsi_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:41"><expr pos:start="83:5" pos:end="83:40"><call pos:start="83:5" pos:end="83:40"><name pos:start="83:5" pos:end="83:11">DPRINTF</name><argument_list pos:start="83:12" pos:end="83:40">(<argument pos:start="83:13" pos:end="83:30"><expr pos:start="83:13" pos:end="83:30"><literal type="string" pos:start="83:13" pos:end="83:30">"device type %d\n"</literal></expr></argument>, <argument pos:start="83:33" pos:end="83:39"><expr pos:start="83:33" pos:end="83:39"><name pos:start="83:33" pos:end="83:39"><name pos:start="83:33" pos:end="83:33">s</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:39">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="87:5" pos:end="125:5">switch <condition pos:start="87:12" pos:end="87:20">(<expr pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:19">type</name></name></expr>)</condition> <block pos:start="87:22" pos:end="125:5">{<block_content pos:start="89:5" pos:end="123:14">

    <case pos:start="89:5" pos:end="89:19">case <expr pos:start="89:10" pos:end="89:18"><name pos:start="89:10" pos:end="89:18">TYPE_TAPE</name></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:56"><expr pos:start="91:9" pos:end="91:55"><name pos:start="91:9" pos:end="91:20"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:20">blocksize</name></name> <operator pos:start="91:22" pos:end="91:22">=</operator> <call pos:start="91:24" pos:end="91:55"><name pos:start="91:24" pos:end="91:43">get_stream_blocksize</name><argument_list pos:start="91:44" pos:end="91:55">(<argument pos:start="91:45" pos:end="91:54"><expr pos:start="91:45" pos:end="91:54"><name pos:start="91:45" pos:end="91:54"><name pos:start="91:45" pos:end="91:45">s</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:51">conf</name><operator pos:start="91:52" pos:end="91:52">.</operator><name pos:start="91:53" pos:end="91:54">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:31">(<expr pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:24">blocksize</name></name> <operator pos:start="93:26" pos:end="93:27">==</operator> <operator pos:start="93:29" pos:end="93:29">-</operator><literal type="number" pos:start="93:30" pos:end="93:30">1</literal></expr>)</condition> <block pos:start="93:33" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:29">

            <expr_stmt pos:start="95:13" pos:end="95:29"><expr pos:start="95:13" pos:end="95:28"><name pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:24">blocksize</name></name> <operator pos:start="95:26" pos:end="95:26">=</operator> <literal type="number" pos:start="95:28" pos:end="95:28">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>



        <comment type="block" pos:start="103:9" pos:end="109:11">/* Make a guess for block devices, we'll fix it when the guest sends.

         * READ CAPACITY.  If they don't, they likely would assume these sizes

         * anyway. (TODO: they could also send MODE SENSE).

         */</comment>

    <case pos:start="111:5" pos:end="111:18">case <expr pos:start="111:10" pos:end="111:17"><name pos:start="111:10" pos:end="111:17">TYPE_ROM</name></expr>:</case>

    <case pos:start="113:5" pos:end="113:19">case <expr pos:start="113:10" pos:end="113:18"><name pos:start="113:10" pos:end="113:18">TYPE_WORM</name></expr>:</case>

        <expr_stmt pos:start="115:9" pos:end="115:28"><expr pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:20">blocksize</name></name> <operator pos:start="115:22" pos:end="115:22">=</operator> <literal type="number" pos:start="115:24" pos:end="115:27">2048</literal></expr>;</expr_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <default pos:start="119:5" pos:end="119:12">default:</default>

        <expr_stmt pos:start="121:9" pos:end="121:27"><expr pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:20"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:20">blocksize</name></name> <operator pos:start="121:22" pos:end="121:22">=</operator> <literal type="number" pos:start="121:24" pos:end="121:26">512</literal></expr>;</expr_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="129:5" pos:end="129:45"><expr pos:start="129:5" pos:end="129:44"><call pos:start="129:5" pos:end="129:44"><name pos:start="129:5" pos:end="129:11">DPRINTF</name><argument_list pos:start="129:12" pos:end="129:44">(<argument pos:start="129:13" pos:end="129:29"><expr pos:start="129:13" pos:end="129:29"><literal type="string" pos:start="129:13" pos:end="129:29">"block size %d\n"</literal></expr></argument>, <argument pos:start="129:32" pos:end="129:43"><expr pos:start="129:32" pos:end="129:43"><name pos:start="129:32" pos:end="129:43"><name pos:start="129:32" pos:end="129:32">s</name><operator pos:start="129:33" pos:end="129:34">-&gt;</operator><name pos:start="129:35" pos:end="129:43">blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
