<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15507.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">unpack_modes</name><parameter_list pos:start="1:24" pos:end="1:63">(<parameter pos:start="1:25" pos:end="1:43"><decl pos:start="1:25" pos:end="1:43"><type pos:start="1:25" pos:end="1:43"><name pos:start="1:25" pos:end="1:40">Vp3DecodeContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:62"><decl pos:start="1:46" pos:end="1:62"><type pos:start="1:46" pos:end="1:62"><name pos:start="1:46" pos:end="1:58">GetBitContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="175:1">{<block_content pos:start="5:5" pos:end="173:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">j</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">k</name></decl>, <decl pos:start="5:18" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:21">sb_x</name></decl>, <decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:27">sb_y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">scheme</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:26">current_macroblock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:24">current_fragment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">coding_mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:47"><name pos:start="15:9" pos:end="15:28">custom_mode_alphabet</name><index pos:start="15:29" pos:end="15:47">[<expr pos:start="15:30" pos:end="15:46"><name pos:start="15:30" pos:end="15:46">CODING_MODE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="169:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:19">keyframe</name></name></expr>)</condition> <block pos:start="19:22" pos:end="27:5">{<block_content pos:start="21:9" pos:end="23:59">

        <for pos:start="21:9" pos:end="23:59">for <control pos:start="21:13" pos:end="21:47">(<init pos:start="21:14" pos:end="21:19"><expr pos:start="21:14" pos:end="21:18"><name pos:start="21:14" pos:end="21:14">i</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>;</init> <condition pos:start="21:21" pos:end="21:42"><expr pos:start="21:21" pos:end="21:41"><name pos:start="21:21" pos:end="21:21">i</name> <operator pos:start="21:23" pos:end="21:23">&lt;</operator> <name pos:start="21:25" pos:end="21:41"><name pos:start="21:25" pos:end="21:25">s</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:41">fragment_count</name></name></expr>;</condition> <incr pos:start="21:44" pos:end="21:46"><expr pos:start="21:44" pos:end="21:46"><name pos:start="21:44" pos:end="21:44">i</name><operator pos:start="21:45" pos:end="21:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="23:13" pos:end="23:59"><block_content pos:start="23:13" pos:end="23:59">

            <expr_stmt pos:start="23:13" pos:end="23:59"><expr pos:start="23:13" pos:end="23:58"><name pos:start="23:13" pos:end="23:31"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:28">all_fragments</name><index pos:start="23:29" pos:end="23:31">[<expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">i</name></expr>]</index></name><operator pos:start="23:32" pos:end="23:32">.</operator><name pos:start="23:33" pos:end="23:45">coding_method</name> <operator pos:start="23:47" pos:end="23:47">=</operator> <name pos:start="23:49" pos:end="23:58">MODE_INTRA</name></expr>;</expr_stmt></block_content></block></for>



    </block_content>}</block></if> <else pos:start="27:7" pos:end="169:5">else <block pos:start="27:12" pos:end="169:5">{<block_content pos:start="33:9" pos:end="167:9">



        <comment type="block" pos:start="31:9" pos:end="31:57">/* fetch the mode coding scheme for this frame */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:14">scheme</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:32"><name pos:start="33:18" pos:end="33:25">get_bits</name><argument_list pos:start="33:26" pos:end="33:32">(<argument pos:start="33:27" pos:end="33:28"><expr pos:start="33:27" pos:end="33:28"><name pos:start="33:27" pos:end="33:28">gb</name></expr></argument>, <argument pos:start="33:31" pos:end="33:31"><expr pos:start="33:31" pos:end="33:31"><literal type="number" pos:start="33:31" pos:end="33:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="37:9" pos:end="37:43">/* is it a custom coding scheme? */</comment>

        <if_stmt pos:start="39:9" pos:end="49:9"><if pos:start="39:9" pos:end="49:9">if <condition pos:start="39:12" pos:end="39:24">(<expr pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:18">scheme</name> <operator pos:start="39:20" pos:end="39:21">==</operator> <literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr>)</condition> <block pos:start="39:26" pos:end="49:9">{<block_content pos:start="41:13" pos:end="47:58">

            <for pos:start="41:13" pos:end="43:59">for <control pos:start="41:17" pos:end="41:35">(<init pos:start="41:18" pos:end="41:23"><expr pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:18">i</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>;</init> <condition pos:start="41:25" pos:end="41:30"><expr pos:start="41:25" pos:end="41:29"><name pos:start="41:25" pos:end="41:25">i</name> <operator pos:start="41:27" pos:end="41:27">&lt;</operator> <literal type="number" pos:start="41:29" pos:end="41:29">8</literal></expr>;</condition> <incr pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:32">i</name><operator pos:start="41:33" pos:end="41:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:17" pos:end="43:59"><block_content pos:start="43:17" pos:end="43:59">

                <expr_stmt pos:start="43:17" pos:end="43:59"><expr pos:start="43:17" pos:end="43:58"><name pos:start="43:17" pos:end="43:39"><name pos:start="43:17" pos:end="43:36">custom_mode_alphabet</name><index pos:start="43:37" pos:end="43:39">[<expr pos:start="43:38" pos:end="43:38"><name pos:start="43:38" pos:end="43:38">i</name></expr>]</index></name> <operator pos:start="43:41" pos:end="43:41">=</operator> <name pos:start="43:43" pos:end="43:58">MODE_INTER_NO_MV</name></expr>;</expr_stmt></block_content></block></for>

            <for pos:start="45:13" pos:end="47:58">for <control pos:start="45:17" pos:end="45:35">(<init pos:start="45:18" pos:end="45:23"><expr pos:start="45:18" pos:end="45:22"><name pos:start="45:18" pos:end="45:18">i</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <literal type="number" pos:start="45:22" pos:end="45:22">0</literal></expr>;</init> <condition pos:start="45:25" pos:end="45:30"><expr pos:start="45:25" pos:end="45:29"><name pos:start="45:25" pos:end="45:25">i</name> <operator pos:start="45:27" pos:end="45:27">&lt;</operator> <literal type="number" pos:start="45:29" pos:end="45:29">8</literal></expr>;</condition> <incr pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:32">i</name><operator pos:start="45:33" pos:end="45:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:17" pos:end="47:58"><block_content pos:start="47:17" pos:end="47:58">

                <expr_stmt pos:start="47:17" pos:end="47:58"><expr pos:start="47:17" pos:end="47:57"><name pos:start="47:17" pos:end="47:53"><name pos:start="47:17" pos:end="47:36">custom_mode_alphabet</name><index pos:start="47:37" pos:end="47:53">[<expr pos:start="47:38" pos:end="47:52"><call pos:start="47:38" pos:end="47:52"><name pos:start="47:38" pos:end="47:45">get_bits</name><argument_list pos:start="47:46" pos:end="47:52">(<argument pos:start="47:47" pos:end="47:48"><expr pos:start="47:47" pos:end="47:48"><name pos:start="47:47" pos:end="47:48">gb</name></expr></argument>, <argument pos:start="47:51" pos:end="47:51"><expr pos:start="47:51" pos:end="47:51"><literal type="number" pos:start="47:51" pos:end="47:51">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="47:55" pos:end="47:55">=</operator> <name pos:start="47:57" pos:end="47:57">i</name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="53:9" pos:end="55:29">/* iterate through all of the macroblocks that contain 1 or more

         * coded fragments */</comment>

        <for pos:start="57:9" pos:end="167:9">for <control pos:start="57:13" pos:end="57:61">(<init pos:start="57:14" pos:end="57:22"><expr pos:start="57:14" pos:end="57:21"><name pos:start="57:14" pos:end="57:17">sb_y</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <literal type="number" pos:start="57:21" pos:end="57:21">0</literal></expr>;</init> <condition pos:start="57:24" pos:end="57:53"><expr pos:start="57:24" pos:end="57:52"><name pos:start="57:24" pos:end="57:27">sb_y</name> <operator pos:start="57:29" pos:end="57:29">&lt;</operator> <name pos:start="57:31" pos:end="57:52"><name pos:start="57:31" pos:end="57:31">s</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:52">y_superblock_height</name></name></expr>;</condition> <incr pos:start="57:55" pos:end="57:60"><expr pos:start="57:55" pos:end="57:60"><name pos:start="57:55" pos:end="57:58">sb_y</name><operator pos:start="57:59" pos:end="57:60">++</operator></expr></incr>)</control> <block pos:start="57:63" pos:end="167:9">{<block_content pos:start="59:13" pos:end="165:13">

            <for pos:start="59:13" pos:end="165:13">for <control pos:start="59:17" pos:end="59:64">(<init pos:start="59:18" pos:end="59:26"><expr pos:start="59:18" pos:end="59:25"><name pos:start="59:18" pos:end="59:21">sb_x</name> <operator pos:start="59:23" pos:end="59:23">=</operator> <literal type="number" pos:start="59:25" pos:end="59:25">0</literal></expr>;</init> <condition pos:start="59:28" pos:end="59:56"><expr pos:start="59:28" pos:end="59:55"><name pos:start="59:28" pos:end="59:31">sb_x</name> <operator pos:start="59:33" pos:end="59:33">&lt;</operator> <name pos:start="59:35" pos:end="59:55"><name pos:start="59:35" pos:end="59:35">s</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:55">y_superblock_width</name></name></expr>;</condition> <incr pos:start="59:58" pos:end="59:63"><expr pos:start="59:58" pos:end="59:63"><name pos:start="59:58" pos:end="59:61">sb_x</name><operator pos:start="59:62" pos:end="59:63">++</operator></expr></incr>)</control> <block pos:start="59:66" pos:end="165:13">{<block_content pos:start="63:13" pos:end="163:13">



            <for pos:start="63:13" pos:end="163:13">for <control pos:start="63:17" pos:end="63:35">(<init pos:start="63:18" pos:end="63:23"><expr pos:start="63:18" pos:end="63:22"><name pos:start="63:18" pos:end="63:18">j</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>;</init> <condition pos:start="63:25" pos:end="63:30"><expr pos:start="63:25" pos:end="63:29"><name pos:start="63:25" pos:end="63:25">j</name> <operator pos:start="63:27" pos:end="63:27">&lt;</operator> <literal type="number" pos:start="63:29" pos:end="63:29">4</literal></expr>;</condition> <incr pos:start="63:32" pos:end="63:34"><expr pos:start="63:32" pos:end="63:34"><name pos:start="63:32" pos:end="63:32">j</name><operator pos:start="63:33" pos:end="63:34">++</operator></expr></incr>)</control> <block pos:start="63:37" pos:end="163:13">{<block_content pos:start="65:17" pos:end="161:17">

                <decl_stmt pos:start="65:17" pos:end="65:45"><decl pos:start="65:17" pos:end="65:44"><type pos:start="65:17" pos:end="65:19"><name pos:start="65:17" pos:end="65:19">int</name></type> <name pos:start="65:21" pos:end="65:24">mb_x</name> <init pos:start="65:26" pos:end="65:44">= <expr pos:start="65:28" pos:end="65:44"><literal type="number" pos:start="65:28" pos:end="65:28">2</literal><operator pos:start="65:29" pos:end="65:29">*</operator><name pos:start="65:30" pos:end="65:33">sb_x</name> <operator pos:start="65:35" pos:end="65:35">+</operator>   <operator pos:start="65:39" pos:end="65:39">(</operator><name pos:start="65:40" pos:end="65:40">j</name><operator pos:start="65:41" pos:end="65:42">&gt;&gt;</operator><literal type="number" pos:start="65:43" pos:end="65:43">1</literal><operator pos:start="65:44" pos:end="65:44">)</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="67:17" pos:end="67:51"><decl pos:start="67:17" pos:end="67:50"><type pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:19">int</name></type> <name pos:start="67:21" pos:end="67:24">mb_y</name> <init pos:start="67:26" pos:end="67:50">= <expr pos:start="67:28" pos:end="67:50"><literal type="number" pos:start="67:28" pos:end="67:28">2</literal><operator pos:start="67:29" pos:end="67:29">*</operator><name pos:start="67:30" pos:end="67:33">sb_y</name> <operator pos:start="67:35" pos:end="67:35">+</operator> <operator pos:start="67:37" pos:end="67:37">(</operator><operator pos:start="67:38" pos:end="67:38">(</operator><operator pos:start="67:39" pos:end="67:39">(</operator><name pos:start="67:40" pos:end="67:40">j</name><operator pos:start="67:41" pos:end="67:42">&gt;&gt;</operator><literal type="number" pos:start="67:43" pos:end="67:43">1</literal><operator pos:start="67:44" pos:end="67:44">)</operator><operator pos:start="67:45" pos:end="67:45">+</operator><name pos:start="67:46" pos:end="67:46">j</name><operator pos:start="67:47" pos:end="67:47">)</operator><operator pos:start="67:48" pos:end="67:48">&amp;</operator><literal type="number" pos:start="67:49" pos:end="67:49">1</literal><operator pos:start="67:50" pos:end="67:50">)</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="69:17" pos:end="69:36"><decl pos:start="69:17" pos:end="69:35"><type pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:19">int</name></type> <name pos:start="69:21" pos:end="69:31">frags_coded</name> <init pos:start="69:33" pos:end="69:35">= <expr pos:start="69:35" pos:end="69:35"><literal type="number" pos:start="69:35" pos:end="69:35">0</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:71"><expr pos:start="71:17" pos:end="71:70"><name pos:start="71:17" pos:end="71:34">current_macroblock</name> <operator pos:start="71:36" pos:end="71:36">=</operator> <name pos:start="71:38" pos:end="71:41">mb_y</name> <operator pos:start="71:43" pos:end="71:43">*</operator> <name pos:start="71:45" pos:end="71:63"><name pos:start="71:45" pos:end="71:45">s</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:63">macroblock_width</name></name> <operator pos:start="71:65" pos:end="71:65">+</operator> <name pos:start="71:67" pos:end="71:70">mb_x</name></expr>;</expr_stmt>



                <if_stmt pos:start="75:17" pos:end="84:0"><if pos:start="75:17" pos:end="84:0">if <condition pos:start="75:20" pos:end="75:80">(<expr pos:start="75:21" pos:end="75:79"><name pos:start="75:21" pos:end="75:24">mb_x</name> <operator pos:start="75:26" pos:end="75:27">&gt;=</operator> <name pos:start="75:29" pos:end="75:47"><name pos:start="75:29" pos:end="75:29">s</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:47">macroblock_width</name></name> <operator pos:start="75:49" pos:end="75:50">||</operator> <name pos:start="75:52" pos:end="75:55">mb_y</name> <operator pos:start="75:57" pos:end="75:58">&gt;=</operator> <name pos:start="75:60" pos:end="75:79"><name pos:start="75:60" pos:end="75:60">s</name><operator pos:start="75:61" pos:end="75:62">-&gt;</operator><name pos:start="75:63" pos:end="75:79">macroblock_height</name></name></expr>)</condition><block type="pseudo" pos:start="77:21" pos:end="84:0"><block_content pos:start="77:21" pos:end="84:0">

                    <continue pos:start="77:21" pos:end="84:0">continue;</continue></block_content></block></if></if_stmt>



<cpp:define pos:start="81:1" pos:end="81:32">#<cpp:directive pos:start="81:2" pos:end="81:7">define</cpp:directive> <cpp:macro pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:15">BLOCK_X</name></cpp:macro> <cpp:value pos:start="81:17" pos:end="81:32">(2*mb_x + (k&amp;1))</cpp:value></cpp:define>

<cpp:define pos:start="83:1" pos:end="83:33">#<cpp:directive pos:start="83:2" pos:end="83:7">define</cpp:directive> <cpp:macro pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:15">BLOCK_Y</name></cpp:macro> <cpp:value pos:start="83:17" pos:end="83:33">(2*mb_y + (k&gt;&gt;1))</cpp:value></cpp:define>

                <comment type="block" pos:start="85:17" pos:end="87:72">/* coding modes are only stored if the macroblock has at least one

                 * luma block coded, otherwise it must be INTER_NO_MV */</comment>

                <for pos:start="89:17" pos:end="97:17">for <control pos:start="89:21" pos:end="89:39">(<init pos:start="89:22" pos:end="89:27"><expr pos:start="89:22" pos:end="89:26"><name pos:start="89:22" pos:end="89:22">k</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>;</init> <condition pos:start="89:29" pos:end="89:34"><expr pos:start="89:29" pos:end="89:33"><name pos:start="89:29" pos:end="89:29">k</name> <operator pos:start="89:31" pos:end="89:31">&lt;</operator> <literal type="number" pos:start="89:33" pos:end="89:33">4</literal></expr>;</condition> <incr pos:start="89:36" pos:end="89:38"><expr pos:start="89:36" pos:end="89:38"><name pos:start="89:36" pos:end="89:36">k</name><operator pos:start="89:37" pos:end="89:38">++</operator></expr></incr>)</control> <block pos:start="89:41" pos:end="97:17">{<block_content pos:start="91:21" pos:end="95:30">

                    <expr_stmt pos:start="91:21" pos:end="91:75"><expr pos:start="91:21" pos:end="91:74"><name pos:start="91:21" pos:end="91:36">current_fragment</name> <operator pos:start="91:38" pos:end="91:38">=</operator> <name pos:start="91:40" pos:end="91:46">BLOCK_Y</name><operator pos:start="91:47" pos:end="91:47">*</operator><name pos:start="91:48" pos:end="91:64"><name pos:start="91:48" pos:end="91:48">s</name><operator pos:start="91:49" pos:end="91:50">-&gt;</operator><name pos:start="91:51" pos:end="91:64">fragment_width</name></name> <operator pos:start="91:66" pos:end="91:66">+</operator> <name pos:start="91:68" pos:end="91:74">BLOCK_X</name></expr>;</expr_stmt>

                    <if_stmt pos:start="93:21" pos:end="95:30"><if pos:start="93:21" pos:end="95:30">if <condition pos:start="93:24" pos:end="93:86">(<expr pos:start="93:25" pos:end="93:85"><name pos:start="93:25" pos:end="93:58"><name pos:start="93:25" pos:end="93:25">s</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:40">all_fragments</name><index pos:start="93:41" pos:end="93:58">[<expr pos:start="93:42" pos:end="93:57"><name pos:start="93:42" pos:end="93:57">current_fragment</name></expr>]</index></name><operator pos:start="93:59" pos:end="93:59">.</operator><name pos:start="93:60" pos:end="93:72">coding_method</name> <operator pos:start="93:74" pos:end="93:75">!=</operator> <name pos:start="93:77" pos:end="93:85">MODE_COPY</name></expr>)</condition><block type="pseudo" pos:start="95:25" pos:end="95:30"><block_content pos:start="95:25" pos:end="95:30">

                        <break pos:start="95:25" pos:end="95:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="99:17" pos:end="105:17"><if pos:start="99:17" pos:end="105:17">if <condition pos:start="99:20" pos:end="99:27">(<expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:21">k</name> <operator pos:start="99:23" pos:end="99:24">==</operator> <literal type="number" pos:start="99:26" pos:end="99:26">4</literal></expr>)</condition> <block pos:start="99:29" pos:end="105:17">{<block_content pos:start="101:21" pos:end="103:29">

                    <expr_stmt pos:start="101:21" pos:end="101:80"><expr pos:start="101:21" pos:end="101:79"><name pos:start="101:21" pos:end="101:60"><name pos:start="101:21" pos:end="101:21">s</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:40">macroblock_coding</name><index pos:start="101:41" pos:end="101:60">[<expr pos:start="101:42" pos:end="101:59"><name pos:start="101:42" pos:end="101:59">current_macroblock</name></expr>]</index></name> <operator pos:start="101:62" pos:end="101:62">=</operator> <name pos:start="101:64" pos:end="101:79">MODE_INTER_NO_MV</name></expr>;</expr_stmt>

                    <continue pos:start="103:21" pos:end="103:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="109:17" pos:end="109:66">/* mode 7 means get 3 bits for each coding mode */</comment>

                <if_stmt pos:start="111:17" pos:end="125:69"><if pos:start="111:17" pos:end="113:50">if <condition pos:start="111:20" pos:end="111:32">(<expr pos:start="111:21" pos:end="111:31"><name pos:start="111:21" pos:end="111:26">scheme</name> <operator pos:start="111:28" pos:end="111:29">==</operator> <literal type="number" pos:start="111:31" pos:end="111:31">7</literal></expr>)</condition><block type="pseudo" pos:start="113:21" pos:end="113:50"><block_content pos:start="113:21" pos:end="113:50">

                    <expr_stmt pos:start="113:21" pos:end="113:50"><expr pos:start="113:21" pos:end="113:49"><name pos:start="113:21" pos:end="113:31">coding_mode</name> <operator pos:start="113:33" pos:end="113:33">=</operator> <call pos:start="113:35" pos:end="113:49"><name pos:start="113:35" pos:end="113:42">get_bits</name><argument_list pos:start="113:43" pos:end="113:49">(<argument pos:start="113:44" pos:end="113:45"><expr pos:start="113:44" pos:end="113:45"><name pos:start="113:44" pos:end="113:45">gb</name></expr></argument>, <argument pos:start="113:48" pos:end="113:48"><expr pos:start="113:48" pos:end="113:48"><literal type="number" pos:start="113:48" pos:end="113:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="115:17" pos:end="119:69">else if<condition pos:start="115:24" pos:end="115:36">(<expr pos:start="115:25" pos:end="115:35"><name pos:start="115:25" pos:end="115:30">scheme</name> <operator pos:start="115:32" pos:end="115:33">==</operator> <literal type="number" pos:start="115:35" pos:end="115:35">0</literal></expr>)</condition><block type="pseudo" pos:start="117:21" pos:end="119:69"><block_content pos:start="117:21" pos:end="119:69">

                    <expr_stmt pos:start="117:21" pos:end="119:69"><expr pos:start="117:21" pos:end="119:68"><name pos:start="117:21" pos:end="117:31">coding_mode</name> <operator pos:start="117:33" pos:end="117:33">=</operator> <name pos:start="117:35" pos:end="119:68"><name pos:start="117:35" pos:end="117:54">custom_mode_alphabet</name>

                        <index pos:start="119:25" pos:end="119:68">[<expr pos:start="119:26" pos:end="119:67"><call pos:start="119:26" pos:end="119:67"><name pos:start="119:26" pos:end="119:33">get_vlc2</name><argument_list pos:start="119:34" pos:end="119:67">(<argument pos:start="119:35" pos:end="119:36"><expr pos:start="119:35" pos:end="119:36"><name pos:start="119:35" pos:end="119:36">gb</name></expr></argument>, <argument pos:start="119:39" pos:end="119:60"><expr pos:start="119:39" pos:end="119:60"><name pos:start="119:39" pos:end="119:60"><name pos:start="119:39" pos:end="119:39">s</name><operator pos:start="119:40" pos:end="119:41">-&gt;</operator><name pos:start="119:42" pos:end="119:54">mode_code_vlc</name><operator pos:start="119:55" pos:end="119:55">.</operator><name pos:start="119:56" pos:end="119:60">table</name></name></expr></argument>, <argument pos:start="119:63" pos:end="119:63"><expr pos:start="119:63" pos:end="119:63"><literal type="number" pos:start="119:63" pos:end="119:63">3</literal></expr></argument>, <argument pos:start="119:66" pos:end="119:66"><expr pos:start="119:66" pos:end="119:66"><literal type="number" pos:start="119:66" pos:end="119:66">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="121:17" pos:end="125:69">else<block type="pseudo" pos:start="123:21" pos:end="125:69"><block_content pos:start="123:21" pos:end="125:69">

                    <expr_stmt pos:start="123:21" pos:end="125:69"><expr pos:start="123:21" pos:end="125:68"><name pos:start="123:21" pos:end="123:31">coding_mode</name> <operator pos:start="123:33" pos:end="123:33">=</operator> <name pos:start="123:35" pos:end="125:68"><name pos:start="123:35" pos:end="123:46">ModeAlphabet</name><index pos:start="123:47" pos:end="123:56">[<expr pos:start="123:48" pos:end="123:55"><name pos:start="123:48" pos:end="123:53">scheme</name><operator pos:start="123:54" pos:end="123:54">-</operator><literal type="number" pos:start="123:55" pos:end="123:55">1</literal></expr>]</index>

                        <index pos:start="125:25" pos:end="125:68">[<expr pos:start="125:26" pos:end="125:67"><call pos:start="125:26" pos:end="125:67"><name pos:start="125:26" pos:end="125:33">get_vlc2</name><argument_list pos:start="125:34" pos:end="125:67">(<argument pos:start="125:35" pos:end="125:36"><expr pos:start="125:35" pos:end="125:36"><name pos:start="125:35" pos:end="125:36">gb</name></expr></argument>, <argument pos:start="125:39" pos:end="125:60"><expr pos:start="125:39" pos:end="125:60"><name pos:start="125:39" pos:end="125:60"><name pos:start="125:39" pos:end="125:39">s</name><operator pos:start="125:40" pos:end="125:41">-&gt;</operator><name pos:start="125:42" pos:end="125:54">mode_code_vlc</name><operator pos:start="125:55" pos:end="125:55">.</operator><name pos:start="125:56" pos:end="125:60">table</name></name></expr></argument>, <argument pos:start="125:63" pos:end="125:63"><expr pos:start="125:63" pos:end="125:63"><literal type="number" pos:start="125:63" pos:end="125:63">3</literal></expr></argument>, <argument pos:start="125:66" pos:end="125:66"><expr pos:start="125:66" pos:end="125:66"><literal type="number" pos:start="125:66" pos:end="125:66">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="129:17" pos:end="129:71"><expr pos:start="129:17" pos:end="129:70"><name pos:start="129:17" pos:end="129:56"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:36">macroblock_coding</name><index pos:start="129:37" pos:end="129:56">[<expr pos:start="129:38" pos:end="129:55"><name pos:start="129:38" pos:end="129:55">current_macroblock</name></expr>]</index></name> <operator pos:start="129:58" pos:end="129:58">=</operator> <name pos:start="129:60" pos:end="129:70">coding_mode</name></expr>;</expr_stmt>

                <for pos:start="131:17" pos:end="145:17">for <control pos:start="131:21" pos:end="131:39">(<init pos:start="131:22" pos:end="131:27"><expr pos:start="131:22" pos:end="131:26"><name pos:start="131:22" pos:end="131:22">k</name> <operator pos:start="131:24" pos:end="131:24">=</operator> <literal type="number" pos:start="131:26" pos:end="131:26">0</literal></expr>;</init> <condition pos:start="131:29" pos:end="131:34"><expr pos:start="131:29" pos:end="131:33"><name pos:start="131:29" pos:end="131:29">k</name> <operator pos:start="131:31" pos:end="131:31">&lt;</operator> <literal type="number" pos:start="131:33" pos:end="131:33">4</literal></expr>;</condition> <incr pos:start="131:36" pos:end="131:38"><expr pos:start="131:36" pos:end="131:38"><name pos:start="131:36" pos:end="131:36">k</name><operator pos:start="131:37" pos:end="131:38">++</operator></expr></incr>)</control> <block pos:start="131:41" pos:end="145:17">{<block_content pos:start="133:21" pos:end="143:40">

                    <expr_stmt pos:start="133:21" pos:end="135:60"><expr pos:start="133:21" pos:end="135:59"><name pos:start="133:21" pos:end="133:36">current_fragment</name> <operator pos:start="133:38" pos:end="133:38">=</operator>

                        <name pos:start="135:25" pos:end="135:31">BLOCK_Y</name><operator pos:start="135:32" pos:end="135:32">*</operator><name pos:start="135:33" pos:end="135:49"><name pos:start="135:33" pos:end="135:33">s</name><operator pos:start="135:34" pos:end="135:35">-&gt;</operator><name pos:start="135:36" pos:end="135:49">fragment_width</name></name> <operator pos:start="135:51" pos:end="135:51">+</operator> <name pos:start="135:53" pos:end="135:59">BLOCK_X</name></expr>;</expr_stmt>

                    <if_stmt pos:start="137:21" pos:end="143:40"><if pos:start="137:21" pos:end="143:40">if <condition pos:start="137:24" pos:end="139:34">(<expr pos:start="137:25" pos:end="139:33"><name pos:start="137:25" pos:end="137:58"><name pos:start="137:25" pos:end="137:25">s</name><operator pos:start="137:26" pos:end="137:27">-&gt;</operator><name pos:start="137:28" pos:end="137:40">all_fragments</name><index pos:start="137:41" pos:end="137:58">[<expr pos:start="137:42" pos:end="137:57"><name pos:start="137:42" pos:end="137:57">current_fragment</name></expr>]</index></name><operator pos:start="137:59" pos:end="137:59">.</operator><name pos:start="137:60" pos:end="137:72">coding_method</name> <operator pos:start="137:74" pos:end="137:75">!=</operator>

                        <name pos:start="139:25" pos:end="139:33">MODE_COPY</name></expr>)</condition><block type="pseudo" pos:start="141:25" pos:end="143:40"><block_content pos:start="141:25" pos:end="143:40">

                        <expr_stmt pos:start="141:25" pos:end="143:40"><expr pos:start="141:25" pos:end="143:39"><name pos:start="141:25" pos:end="141:58"><name pos:start="141:25" pos:end="141:25">s</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:40">all_fragments</name><index pos:start="141:41" pos:end="141:58">[<expr pos:start="141:42" pos:end="141:57"><name pos:start="141:42" pos:end="141:57">current_fragment</name></expr>]</index></name><operator pos:start="141:59" pos:end="141:59">.</operator><name pos:start="141:60" pos:end="141:72">coding_method</name> <operator pos:start="141:74" pos:end="141:74">=</operator>

                            <name pos:start="143:29" pos:end="143:39">coding_mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <for pos:start="147:17" pos:end="161:17">for <control pos:start="147:21" pos:end="147:39">(<init pos:start="147:22" pos:end="147:27"><expr pos:start="147:22" pos:end="147:26"><name pos:start="147:22" pos:end="147:22">k</name> <operator pos:start="147:24" pos:end="147:24">=</operator> <literal type="number" pos:start="147:26" pos:end="147:26">0</literal></expr>;</init> <condition pos:start="147:29" pos:end="147:34"><expr pos:start="147:29" pos:end="147:33"><name pos:start="147:29" pos:end="147:29">k</name> <operator pos:start="147:31" pos:end="147:31">&lt;</operator> <literal type="number" pos:start="147:33" pos:end="147:33">2</literal></expr>;</condition> <incr pos:start="147:36" pos:end="147:38"><expr pos:start="147:36" pos:end="147:38"><name pos:start="147:36" pos:end="147:36">k</name><operator pos:start="147:37" pos:end="147:38">++</operator></expr></incr>)</control> <block pos:start="147:41" pos:end="161:17">{<block_content pos:start="149:21" pos:end="159:40">

                    <expr_stmt pos:start="149:21" pos:end="151:59"><expr pos:start="149:21" pos:end="151:58"><name pos:start="149:21" pos:end="149:36">current_fragment</name> <operator pos:start="149:38" pos:end="149:38">=</operator> <name pos:start="149:40" pos:end="149:61"><name pos:start="149:40" pos:end="149:40">s</name><operator pos:start="149:41" pos:end="149:42">-&gt;</operator><name pos:start="149:43" pos:end="149:56">fragment_start</name><index pos:start="149:57" pos:end="149:61">[<expr pos:start="149:58" pos:end="149:60"><name pos:start="149:58" pos:end="149:58">k</name><operator pos:start="149:59" pos:end="149:59">+</operator><literal type="number" pos:start="149:60" pos:end="149:60">1</literal></expr>]</index></name> <operator pos:start="149:63" pos:end="149:63">+</operator>

                        <name pos:start="151:25" pos:end="151:28">mb_y</name><operator pos:start="151:29" pos:end="151:29">*</operator><operator pos:start="151:30" pos:end="151:30">(</operator><name pos:start="151:31" pos:end="151:47"><name pos:start="151:31" pos:end="151:31">s</name><operator pos:start="151:32" pos:end="151:33">-&gt;</operator><name pos:start="151:34" pos:end="151:47">fragment_width</name></name><operator pos:start="151:48" pos:end="151:49">&gt;&gt;</operator><literal type="number" pos:start="151:50" pos:end="151:50">1</literal><operator pos:start="151:51" pos:end="151:51">)</operator> <operator pos:start="151:53" pos:end="151:53">+</operator> <name pos:start="151:55" pos:end="151:58">mb_x</name></expr>;</expr_stmt>

                    <if_stmt pos:start="153:21" pos:end="159:40"><if pos:start="153:21" pos:end="159:40">if <condition pos:start="153:24" pos:end="155:34">(<expr pos:start="153:25" pos:end="155:33"><name pos:start="153:25" pos:end="153:58"><name pos:start="153:25" pos:end="153:25">s</name><operator pos:start="153:26" pos:end="153:27">-&gt;</operator><name pos:start="153:28" pos:end="153:40">all_fragments</name><index pos:start="153:41" pos:end="153:58">[<expr pos:start="153:42" pos:end="153:57"><name pos:start="153:42" pos:end="153:57">current_fragment</name></expr>]</index></name><operator pos:start="153:59" pos:end="153:59">.</operator><name pos:start="153:60" pos:end="153:72">coding_method</name> <operator pos:start="153:74" pos:end="153:75">!=</operator>

                        <name pos:start="155:25" pos:end="155:33">MODE_COPY</name></expr>)</condition><block type="pseudo" pos:start="157:25" pos:end="159:40"><block_content pos:start="157:25" pos:end="159:40">

                        <expr_stmt pos:start="157:25" pos:end="159:40"><expr pos:start="157:25" pos:end="159:39"><name pos:start="157:25" pos:end="157:58"><name pos:start="157:25" pos:end="157:25">s</name><operator pos:start="157:26" pos:end="157:27">-&gt;</operator><name pos:start="157:28" pos:end="157:40">all_fragments</name><index pos:start="157:41" pos:end="157:58">[<expr pos:start="157:42" pos:end="157:57"><name pos:start="157:42" pos:end="157:57">current_fragment</name></expr>]</index></name><operator pos:start="157:59" pos:end="157:59">.</operator><name pos:start="157:60" pos:end="157:72">coding_method</name> <operator pos:start="157:74" pos:end="157:74">=</operator>

                            <name pos:start="159:29" pos:end="159:39">coding_mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <return pos:start="173:5" pos:end="173:13">return <expr pos:start="173:12" pos:end="173:12"><literal type="number" pos:start="173:12" pos:end="173:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
