<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16849.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:69"><name pos:start="1:1" pos:end="1:11">sdhci_write</name><argument_list pos:start="1:12" pos:end="1:69">(<argument pos:start="1:13" pos:end="1:24">void *opaque</argument>, <argument pos:start="1:27" pos:end="1:39">hwaddr offset</argument>, <argument pos:start="1:42" pos:end="1:53">uint64_t val</argument>, <argument pos:start="1:56" pos:end="1:68">unsigned size</argument>)</argument_list></macro>
<block pos:start="2:1" pos:end="113:65">{<block_content pos:start="3:5" pos:end="113:65">
    <decl_stmt pos:start="3:5" pos:end="3:41"><decl pos:start="3:5" pos:end="3:40"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:14">SDHCIState</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:17">s</name> <init pos:start="3:19" pos:end="3:40">= <expr pos:start="3:21" pos:end="3:40"><operator pos:start="3:21" pos:end="3:21">(</operator><name pos:start="3:22" pos:end="3:31">SDHCIState</name> <operator pos:start="3:33" pos:end="3:33">*</operator><operator pos:start="3:34" pos:end="3:34">)</operator><name pos:start="3:35" pos:end="3:40">opaque</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:41"><decl pos:start="4:5" pos:end="4:40"><type pos:start="4:5" pos:end="4:12"><name pos:start="4:5" pos:end="4:12">unsigned</name></type> <name pos:start="4:14" pos:end="4:18">shift</name> <init pos:start="4:20" pos:end="4:40">=  <expr pos:start="4:23" pos:end="4:40"><literal type="number" pos:start="4:23" pos:end="4:23">8</literal> <operator pos:start="4:25" pos:end="4:25">*</operator> <operator pos:start="4:27" pos:end="4:27">(</operator><name pos:start="4:28" pos:end="4:33">offset</name> <operator pos:start="4:35" pos:end="4:35">&amp;</operator> <literal type="number" pos:start="4:37" pos:end="4:39">0x3</literal><operator pos:start="4:40" pos:end="4:40">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:17">mask</name> <init pos:start="5:19" pos:end="5:58">= <expr pos:start="5:21" pos:end="5:58"><operator pos:start="5:21" pos:end="5:21">~</operator><operator pos:start="5:22" pos:end="5:22">(</operator><operator pos:start="5:23" pos:end="5:23">(</operator><operator pos:start="5:24" pos:end="5:24">(</operator><literal type="number" pos:start="5:25" pos:end="5:28">1ULL</literal> <operator pos:start="5:30" pos:end="5:31">&lt;&lt;</operator> <operator pos:start="5:33" pos:end="5:33">(</operator><name pos:start="5:34" pos:end="5:37">size</name> <operator pos:start="5:39" pos:end="5:39">*</operator> <literal type="number" pos:start="5:41" pos:end="5:41">8</literal><operator pos:start="5:42" pos:end="5:42">)</operator><operator pos:start="5:43" pos:end="5:43">)</operator> <operator pos:start="5:45" pos:end="5:45">-</operator> <literal type="number" pos:start="5:47" pos:end="5:47">1</literal><operator pos:start="5:48" pos:end="5:48">)</operator> <operator pos:start="5:50" pos:end="5:51">&lt;&lt;</operator> <name pos:start="5:53" pos:end="5:57">shift</name><operator pos:start="5:58" pos:end="5:58">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:25"><decl pos:start="6:5" pos:end="6:24"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:12">uint32_t</name></type> <name pos:start="6:14" pos:end="6:18">value</name> <init pos:start="6:20" pos:end="6:24">= <expr pos:start="6:22" pos:end="6:24"><name pos:start="6:22" pos:end="6:24">val</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:20"><expr pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:9">value</name> <operator pos:start="7:11" pos:end="7:13">&lt;&lt;=</operator> <name pos:start="7:15" pos:end="7:19">shift</name></expr>;</expr_stmt>
    <switch pos:start="8:5" pos:end="113:65">switch <condition pos:start="8:12" pos:end="8:26">(<expr pos:start="8:13" pos:end="8:25"><name pos:start="8:13" pos:end="8:18">offset</name> <operator pos:start="8:20" pos:end="8:20">&amp;</operator> <operator pos:start="8:22" pos:end="8:22">~</operator><literal type="number" pos:start="8:23" pos:end="8:25">0x3</literal></expr>)</condition> <block pos:start="8:28" pos:end="113:65">{<block_content pos:start="9:5" pos:end="113:65">
    <case pos:start="9:5" pos:end="9:20">case <expr pos:start="9:10" pos:end="9:19"><name pos:start="9:10" pos:end="9:19">SDHC_SYSAD</name></expr>:</case>
        <expr_stmt pos:start="10:9" pos:end="10:53"><expr pos:start="10:9" pos:end="10:52"><name pos:start="10:9" pos:end="10:20"><name pos:start="10:9" pos:end="10:9">s</name><operator pos:start="10:10" pos:end="10:11">-&gt;</operator><name pos:start="10:12" pos:end="10:20">sdmasysad</name></name> <operator pos:start="10:22" pos:end="10:22">=</operator> <operator pos:start="10:24" pos:end="10:24">(</operator><name pos:start="10:25" pos:end="10:36"><name pos:start="10:25" pos:end="10:25">s</name><operator pos:start="10:26" pos:end="10:27">-&gt;</operator><name pos:start="10:28" pos:end="10:36">sdmasysad</name></name> <operator pos:start="10:38" pos:end="10:38">&amp;</operator> <name pos:start="10:40" pos:end="10:43">mask</name><operator pos:start="10:44" pos:end="10:44">)</operator> <operator pos:start="10:46" pos:end="10:46">|</operator> <name pos:start="10:48" pos:end="10:52">value</name></expr>;</expr_stmt>
        <expr_stmt pos:start="11:9" pos:end="11:48"><expr pos:start="11:9" pos:end="11:47"><call pos:start="11:9" pos:end="11:47"><name pos:start="11:9" pos:end="11:20">MASKED_WRITE</name><argument_list pos:start="11:21" pos:end="11:47">(<argument pos:start="11:22" pos:end="11:33"><expr pos:start="11:22" pos:end="11:33"><name pos:start="11:22" pos:end="11:33"><name pos:start="11:22" pos:end="11:22">s</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:33">sdmasysad</name></name></expr></argument>, <argument pos:start="11:36" pos:end="11:39"><expr pos:start="11:36" pos:end="11:39"><name pos:start="11:36" pos:end="11:39">mask</name></expr></argument>, <argument pos:start="11:42" pos:end="11:46"><expr pos:start="11:42" pos:end="11:46"><name pos:start="11:42" pos:end="11:46">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="12:9" pos:end="12:70">/* Writing to last byte of sdmasysad might trigger transfer */</comment>
        <if_stmt pos:start="13:9" pos:end="113:65"><if pos:start="13:9" pos:end="113:65">if <condition pos:start="13:12" pos:end="14:74">(<expr pos:start="13:13" pos:end="14:73"><operator pos:start="13:13" pos:end="13:13">!</operator><operator pos:start="13:14" pos:end="13:14">(</operator><name pos:start="13:15" pos:end="13:18">mask</name> <operator pos:start="13:20" pos:end="13:20">&amp;</operator> <literal type="number" pos:start="13:22" pos:end="13:31">0xFF000000</literal><operator pos:start="13:32" pos:end="13:32">)</operator> <operator pos:start="13:34" pos:end="13:35">&amp;&amp;</operator> <call pos:start="13:37" pos:end="13:64"><name pos:start="13:37" pos:end="13:53">TRANSFERRING_DATA</name><argument_list pos:start="13:54" pos:end="13:64">(<argument pos:start="13:55" pos:end="13:63"><expr pos:start="13:55" pos:end="13:63"><name pos:start="13:55" pos:end="13:63"><name pos:start="13:55" pos:end="13:55">s</name><operator pos:start="13:56" pos:end="13:57">-&gt;</operator><name pos:start="13:58" pos:end="13:63">prnsts</name></name></expr></argument>)</argument_list></call> <operator pos:start="13:66" pos:end="13:67">&amp;&amp;</operator> <name pos:start="13:69" pos:end="13:77"><name pos:start="13:69" pos:end="13:69">s</name><operator pos:start="13:70" pos:end="13:71">-&gt;</operator><name pos:start="13:72" pos:end="13:77">blkcnt</name></name> <operator pos:start="13:79" pos:end="13:80">&amp;&amp;</operator>
                <name pos:start="14:17" pos:end="14:26"><name pos:start="14:17" pos:end="14:17">s</name><operator pos:start="14:18" pos:end="14:19">-&gt;</operator><name pos:start="14:20" pos:end="14:26">blksize</name></name> <operator pos:start="14:28" pos:end="14:29">&amp;&amp;</operator> <call pos:start="14:31" pos:end="14:55"><name pos:start="14:31" pos:end="14:43">SDHC_DMA_TYPE</name><argument_list pos:start="14:44" pos:end="14:55">(<argument pos:start="14:45" pos:end="14:54"><expr pos:start="14:45" pos:end="14:54"><name pos:start="14:45" pos:end="14:54"><name pos:start="14:45" pos:end="14:45">s</name><operator pos:start="14:46" pos:end="14:47">-&gt;</operator><name pos:start="14:48" pos:end="14:54">hostctl</name></name></expr></argument>)</argument_list></call> <operator pos:start="14:57" pos:end="14:58">==</operator> <name pos:start="14:60" pos:end="14:73">SDHC_CTRL_SDMA</name></expr>)</condition> <block pos:start="14:76" pos:end="113:65">{<block_content pos:start="15:13" pos:end="113:65">
            <expr_stmt pos:start="15:13" pos:end="15:48"><expr pos:start="15:13" pos:end="15:47"><call pos:start="15:13" pos:end="15:47"><name pos:start="15:13" pos:end="15:44">sdhci_sdma_transfer_multi_blocks</name><argument_list pos:start="15:45" pos:end="15:47">(<argument pos:start="15:46" pos:end="15:46"><expr pos:start="15:46" pos:end="15:46"><name pos:start="15:46" pos:end="15:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="16:9" pos:end="16:14">break;</break>
    <case pos:start="17:5" pos:end="17:22">case <expr pos:start="17:10" pos:end="17:21"><name pos:start="17:10" pos:end="17:21">SDHC_BLKSIZE</name></expr>:</case>
        <if_stmt pos:start="18:9" pos:end="113:65"><if pos:start="18:9" pos:end="113:65">if <condition pos:start="18:12" pos:end="18:42">(<expr pos:start="18:13" pos:end="18:41"><operator pos:start="18:13" pos:end="18:13">!</operator><call pos:start="18:14" pos:end="18:41"><name pos:start="18:14" pos:end="18:30">TRANSFERRING_DATA</name><argument_list pos:start="18:31" pos:end="18:41">(<argument pos:start="18:32" pos:end="18:40"><expr pos:start="18:32" pos:end="18:40"><name pos:start="18:32" pos:end="18:40"><name pos:start="18:32" pos:end="18:32">s</name><operator pos:start="18:33" pos:end="18:34">-&gt;</operator><name pos:start="18:35" pos:end="18:40">prnsts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="18:44" pos:end="113:65">{<block_content pos:start="19:13" pos:end="113:65">
            <expr_stmt pos:start="19:13" pos:end="19:50"><expr pos:start="19:13" pos:end="19:49"><call pos:start="19:13" pos:end="19:49"><name pos:start="19:13" pos:end="19:24">MASKED_WRITE</name><argument_list pos:start="19:25" pos:end="19:49">(<argument pos:start="19:26" pos:end="19:35"><expr pos:start="19:26" pos:end="19:35"><name pos:start="19:26" pos:end="19:35"><name pos:start="19:26" pos:end="19:26">s</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:35">blksize</name></name></expr></argument>, <argument pos:start="19:38" pos:end="19:41"><expr pos:start="19:38" pos:end="19:41"><name pos:start="19:38" pos:end="19:41">mask</name></expr></argument>, <argument pos:start="19:44" pos:end="19:48"><expr pos:start="19:44" pos:end="19:48"><name pos:start="19:44" pos:end="19:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="20:13" pos:end="20:61"><expr pos:start="20:13" pos:end="20:60"><call pos:start="20:13" pos:end="20:60"><name pos:start="20:13" pos:end="20:24">MASKED_WRITE</name><argument_list pos:start="20:25" pos:end="20:60">(<argument pos:start="20:26" pos:end="20:34"><expr pos:start="20:26" pos:end="20:34"><name pos:start="20:26" pos:end="20:34"><name pos:start="20:26" pos:end="20:26">s</name><operator pos:start="20:27" pos:end="20:28">-&gt;</operator><name pos:start="20:29" pos:end="20:34">blkcnt</name></name></expr></argument>, <argument pos:start="20:37" pos:end="20:46"><expr pos:start="20:37" pos:end="20:46"><name pos:start="20:37" pos:end="20:40">mask</name> <operator pos:start="20:42" pos:end="20:43">&gt;&gt;</operator> <literal type="number" pos:start="20:45" pos:end="20:46">16</literal></expr></argument>, <argument pos:start="20:49" pos:end="20:59"><expr pos:start="20:49" pos:end="20:59"><name pos:start="20:49" pos:end="20:53">value</name> <operator pos:start="20:55" pos:end="20:56">&gt;&gt;</operator> <literal type="number" pos:start="20:58" pos:end="20:59">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="21:9" pos:end="21:14">break;</break>
    <case pos:start="22:5" pos:end="22:23">case <expr pos:start="22:10" pos:end="22:22"><name pos:start="22:10" pos:end="22:22">SDHC_ARGUMENT</name></expr>:</case>
        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:20">MASKED_WRITE</name><argument_list pos:start="23:21" pos:end="23:46">(<argument pos:start="23:22" pos:end="23:32"><expr pos:start="23:22" pos:end="23:32"><name pos:start="23:22" pos:end="23:32"><name pos:start="23:22" pos:end="23:22">s</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:32">argument</name></name></expr></argument>, <argument pos:start="23:35" pos:end="23:38"><expr pos:start="23:35" pos:end="23:38"><name pos:start="23:35" pos:end="23:38">mask</name></expr></argument>, <argument pos:start="23:41" pos:end="23:45"><expr pos:start="23:41" pos:end="23:45"><name pos:start="23:41" pos:end="23:45">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="24:9" pos:end="24:14">break;</break>
    <case pos:start="25:5" pos:end="25:21">case <expr pos:start="25:10" pos:end="25:20"><name pos:start="25:10" pos:end="25:20">SDHC_TRNMOD</name></expr>:</case>
        <comment type="block" pos:start="26:9" pos:end="27:35">/* DMA can be enabled only if it is supported as indicated by
         * capabilities register */</comment>
        <if_stmt pos:start="28:9" pos:end="113:65"><if pos:start="28:9" pos:end="113:65">if <condition pos:start="28:12" pos:end="28:44">(<expr pos:start="28:13" pos:end="28:43"><operator pos:start="28:13" pos:end="28:13">!</operator><operator pos:start="28:14" pos:end="28:14">(</operator><name pos:start="28:15" pos:end="28:24"><name pos:start="28:15" pos:end="28:15">s</name><operator pos:start="28:16" pos:end="28:17">-&gt;</operator><name pos:start="28:18" pos:end="28:24">capareg</name></name> <operator pos:start="28:26" pos:end="28:26">&amp;</operator> <name pos:start="28:28" pos:end="28:42">SDHC_CAN_DO_DMA</name><operator pos:start="28:43" pos:end="28:43">)</operator></expr>)</condition> <block pos:start="28:46" pos:end="113:65">{<block_content pos:start="29:13" pos:end="113:65">
            <expr_stmt pos:start="29:13" pos:end="29:36"><expr pos:start="29:13" pos:end="29:35"><name pos:start="29:13" pos:end="29:17">value</name> <operator pos:start="29:19" pos:end="29:20">&amp;=</operator> <operator pos:start="29:22" pos:end="29:22">~</operator><name pos:start="29:23" pos:end="29:35">SDHC_TRNS_DMA</name></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:45"><expr pos:start="30:9" pos:end="30:44"><call pos:start="30:9" pos:end="30:44"><name pos:start="30:9" pos:end="30:20">MASKED_WRITE</name><argument_list pos:start="30:21" pos:end="30:44">(<argument pos:start="30:22" pos:end="30:30"><expr pos:start="30:22" pos:end="30:30"><name pos:start="30:22" pos:end="30:30"><name pos:start="30:22" pos:end="30:22">s</name><operator pos:start="30:23" pos:end="30:24">-&gt;</operator><name pos:start="30:25" pos:end="30:30">trnmod</name></name></expr></argument>, <argument pos:start="30:33" pos:end="30:36"><expr pos:start="30:33" pos:end="30:36"><name pos:start="30:33" pos:end="30:36">mask</name></expr></argument>, <argument pos:start="30:39" pos:end="30:43"><expr pos:start="30:39" pos:end="30:43"><name pos:start="30:39" pos:end="30:43">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:57"><expr pos:start="31:9" pos:end="31:56"><call pos:start="31:9" pos:end="31:56"><name pos:start="31:9" pos:end="31:20">MASKED_WRITE</name><argument_list pos:start="31:21" pos:end="31:56">(<argument pos:start="31:22" pos:end="31:30"><expr pos:start="31:22" pos:end="31:30"><name pos:start="31:22" pos:end="31:30"><name pos:start="31:22" pos:end="31:22">s</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:30">cmdreg</name></name></expr></argument>, <argument pos:start="31:33" pos:end="31:42"><expr pos:start="31:33" pos:end="31:42"><name pos:start="31:33" pos:end="31:36">mask</name> <operator pos:start="31:38" pos:end="31:39">&gt;&gt;</operator> <literal type="number" pos:start="31:41" pos:end="31:42">16</literal></expr></argument>, <argument pos:start="31:45" pos:end="31:55"><expr pos:start="31:45" pos:end="31:55"><name pos:start="31:45" pos:end="31:49">value</name> <operator pos:start="31:51" pos:end="31:52">&gt;&gt;</operator> <literal type="number" pos:start="31:54" pos:end="31:55">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="32:9" pos:end="32:80">/* Writing to the upper byte of CMDREG triggers SD command generation */</comment>
        <if_stmt pos:start="33:9" pos:end="113:65"><if pos:start="33:9" pos:end="113:65">if <condition pos:start="33:12" pos:end="33:63">(<expr pos:start="33:13" pos:end="33:62"><operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:17">mask</name> <operator pos:start="33:19" pos:end="33:19">&amp;</operator> <literal type="number" pos:start="33:21" pos:end="33:30">0xFF000000</literal><operator pos:start="33:31" pos:end="33:31">)</operator> <operator pos:start="33:33" pos:end="33:34">||</operator> <operator pos:start="33:36" pos:end="33:36">!</operator><call pos:start="33:37" pos:end="33:62"><name pos:start="33:37" pos:end="33:59">sdhci_can_issue_command</name><argument_list pos:start="33:60" pos:end="33:62">(<argument pos:start="33:61" pos:end="33:61"><expr pos:start="33:61" pos:end="33:61"><name pos:start="33:61" pos:end="33:61">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:65" pos:end="113:65">{<block_content pos:start="34:13" pos:end="113:65">
            <break pos:start="34:13" pos:end="34:18">break;</break>
        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><call pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:26">sdhci_send_command</name><argument_list pos:start="35:27" pos:end="35:29">(<argument pos:start="35:28" pos:end="35:28"><expr pos:start="35:28" pos:end="35:28"><name pos:start="35:28" pos:end="35:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="36:9" pos:end="36:14">break;</break>
    <case pos:start="37:5" pos:end="37:21">case  <expr pos:start="37:11" pos:end="37:20"><name pos:start="37:11" pos:end="37:20">SDHC_BDATA</name></expr>:</case>
        <if_stmt pos:start="38:9" pos:end="113:65"><if pos:start="38:9" pos:end="113:65">if <condition pos:start="38:12" pos:end="38:68">(<expr pos:start="38:13" pos:end="38:67"><call pos:start="38:13" pos:end="38:67"><name pos:start="38:13" pos:end="38:43">sdhci_buff_access_is_sequential</name><argument_list pos:start="38:44" pos:end="38:67">(<argument pos:start="38:45" pos:end="38:45"><expr pos:start="38:45" pos:end="38:45"><name pos:start="38:45" pos:end="38:45">s</name></expr></argument>, <argument pos:start="38:48" pos:end="38:66"><expr pos:start="38:48" pos:end="38:66"><name pos:start="38:48" pos:end="38:53">offset</name> <operator pos:start="38:55" pos:end="38:55">-</operator> <name pos:start="38:57" pos:end="38:66">SDHC_BDATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="38:70" pos:end="113:65">{<block_content pos:start="39:13" pos:end="113:65">
            <expr_stmt pos:start="39:13" pos:end="39:58"><expr pos:start="39:13" pos:end="39:57"><call pos:start="39:13" pos:end="39:57"><name pos:start="39:13" pos:end="39:32">sdhci_write_dataport</name><argument_list pos:start="39:33" pos:end="39:57">(<argument pos:start="39:34" pos:end="39:34"><expr pos:start="39:34" pos:end="39:34"><name pos:start="39:34" pos:end="39:34">s</name></expr></argument>, <argument pos:start="39:37" pos:end="39:50"><expr pos:start="39:37" pos:end="39:50"><name pos:start="39:37" pos:end="39:41">value</name> <operator pos:start="39:43" pos:end="39:44">&gt;&gt;</operator> <name pos:start="39:46" pos:end="39:50">shift</name></expr></argument>, <argument pos:start="39:53" pos:end="39:56"><expr pos:start="39:53" pos:end="39:56"><name pos:start="39:53" pos:end="39:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="40:9" pos:end="40:14">break;</break>
    <case pos:start="41:5" pos:end="41:22">case <expr pos:start="41:10" pos:end="41:21"><name pos:start="41:10" pos:end="41:21">SDHC_HOSTCTL</name></expr>:</case>
        <if_stmt pos:start="42:9" pos:end="113:65"><if pos:start="42:9" pos:end="113:65">if <condition pos:start="42:12" pos:end="42:31">(<expr pos:start="42:13" pos:end="42:30"><operator pos:start="42:13" pos:end="42:13">!</operator><operator pos:start="42:14" pos:end="42:14">(</operator><name pos:start="42:15" pos:end="42:18">mask</name> <operator pos:start="42:20" pos:end="42:20">&amp;</operator> <literal type="number" pos:start="42:22" pos:end="42:29">0xFF0000</literal><operator pos:start="42:30" pos:end="42:30">)</operator></expr>)</condition> <block pos:start="42:33" pos:end="113:65">{<block_content pos:start="43:13" pos:end="113:65">
            <expr_stmt pos:start="43:13" pos:end="43:47"><expr pos:start="43:13" pos:end="43:46"><call pos:start="43:13" pos:end="43:46"><name pos:start="43:13" pos:end="43:30">sdhci_blkgap_write</name><argument_list pos:start="43:31" pos:end="43:46">(<argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><name pos:start="43:32" pos:end="43:32">s</name></expr></argument>, <argument pos:start="43:35" pos:end="43:45"><expr pos:start="43:35" pos:end="43:45"><name pos:start="43:35" pos:end="43:39">value</name> <operator pos:start="43:41" pos:end="43:42">&gt;&gt;</operator> <literal type="number" pos:start="43:44" pos:end="43:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="44:9" pos:end="44:46"><expr pos:start="44:9" pos:end="44:45"><call pos:start="44:9" pos:end="44:45"><name pos:start="44:9" pos:end="44:20">MASKED_WRITE</name><argument_list pos:start="44:21" pos:end="44:45">(<argument pos:start="44:22" pos:end="44:31"><expr pos:start="44:22" pos:end="44:31"><name pos:start="44:22" pos:end="44:31"><name pos:start="44:22" pos:end="44:22">s</name><operator pos:start="44:23" pos:end="44:24">-&gt;</operator><name pos:start="44:25" pos:end="44:31">hostctl</name></name></expr></argument>, <argument pos:start="44:34" pos:end="44:37"><expr pos:start="44:34" pos:end="44:37"><name pos:start="44:34" pos:end="44:37">mask</name></expr></argument>, <argument pos:start="44:40" pos:end="44:44"><expr pos:start="44:40" pos:end="44:44"><name pos:start="44:40" pos:end="44:44">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:55"><expr pos:start="45:9" pos:end="45:54"><call pos:start="45:9" pos:end="45:54"><name pos:start="45:9" pos:end="45:20">MASKED_WRITE</name><argument_list pos:start="45:21" pos:end="45:54">(<argument pos:start="45:22" pos:end="45:30"><expr pos:start="45:22" pos:end="45:30"><name pos:start="45:22" pos:end="45:30"><name pos:start="45:22" pos:end="45:22">s</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:30">pwrcon</name></name></expr></argument>, <argument pos:start="45:33" pos:end="45:41"><expr pos:start="45:33" pos:end="45:41"><name pos:start="45:33" pos:end="45:36">mask</name> <operator pos:start="45:38" pos:end="45:39">&gt;&gt;</operator> <literal type="number" pos:start="45:41" pos:end="45:41">8</literal></expr></argument>, <argument pos:start="45:44" pos:end="45:53"><expr pos:start="45:44" pos:end="45:53"><name pos:start="45:44" pos:end="45:48">value</name> <operator pos:start="45:50" pos:end="45:51">&gt;&gt;</operator> <literal type="number" pos:start="45:53" pos:end="45:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:57"><expr pos:start="46:9" pos:end="46:56"><call pos:start="46:9" pos:end="46:56"><name pos:start="46:9" pos:end="46:20">MASKED_WRITE</name><argument_list pos:start="46:21" pos:end="46:56">(<argument pos:start="46:22" pos:end="46:30"><expr pos:start="46:22" pos:end="46:30"><name pos:start="46:22" pos:end="46:30"><name pos:start="46:22" pos:end="46:22">s</name><operator pos:start="46:23" pos:end="46:24">-&gt;</operator><name pos:start="46:25" pos:end="46:30">wakcon</name></name></expr></argument>, <argument pos:start="46:33" pos:end="46:42"><expr pos:start="46:33" pos:end="46:42"><name pos:start="46:33" pos:end="46:36">mask</name> <operator pos:start="46:38" pos:end="46:39">&gt;&gt;</operator> <literal type="number" pos:start="46:41" pos:end="46:42">24</literal></expr></argument>, <argument pos:start="46:45" pos:end="46:55"><expr pos:start="46:45" pos:end="46:55"><name pos:start="46:45" pos:end="46:49">value</name> <operator pos:start="46:51" pos:end="46:52">&gt;&gt;</operator> <literal type="number" pos:start="46:54" pos:end="46:55">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="47:9" pos:end="113:65"><if pos:start="47:9" pos:end="113:65">if <condition pos:start="47:12" pos:end="48:71">(<expr pos:start="47:13" pos:end="48:70"><operator pos:start="47:13" pos:end="47:13">!</operator><operator pos:start="47:14" pos:end="47:14">(</operator><name pos:start="47:15" pos:end="47:23"><name pos:start="47:15" pos:end="47:15">s</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:23">prnsts</name></name> <operator pos:start="47:25" pos:end="47:25">&amp;</operator> <name pos:start="47:27" pos:end="47:43">SDHC_CARD_PRESENT</name><operator pos:start="47:44" pos:end="47:44">)</operator> <operator pos:start="47:46" pos:end="47:47">||</operator> <operator pos:start="47:49" pos:end="47:49">(</operator><operator pos:start="47:50" pos:end="47:50">(</operator><name pos:start="47:51" pos:end="47:59"><name pos:start="47:51" pos:end="47:51">s</name><operator pos:start="47:52" pos:end="47:53">-&gt;</operator><name pos:start="47:54" pos:end="47:59">pwrcon</name></name> <operator pos:start="47:61" pos:end="47:62">&gt;&gt;</operator> <literal type="number" pos:start="47:64" pos:end="47:64">1</literal><operator pos:start="47:65" pos:end="47:65">)</operator> <operator pos:start="47:67" pos:end="47:67">&amp;</operator> <literal type="number" pos:start="47:69" pos:end="47:71">0x7</literal><operator pos:start="47:72" pos:end="47:72">)</operator> <operator pos:start="47:74" pos:end="47:74">&lt;</operator> <literal type="number" pos:start="47:76" pos:end="47:76">5</literal> <operator pos:start="47:78" pos:end="47:79">||</operator>
                <operator pos:start="48:17" pos:end="48:17">!</operator><operator pos:start="48:18" pos:end="48:18">(</operator><name pos:start="48:19" pos:end="48:28"><name pos:start="48:19" pos:end="48:19">s</name><operator pos:start="48:20" pos:end="48:21">-&gt;</operator><name pos:start="48:22" pos:end="48:28">capareg</name></name> <operator pos:start="48:30" pos:end="48:30">&amp;</operator> <operator pos:start="48:32" pos:end="48:32">(</operator><literal type="number" pos:start="48:33" pos:end="48:33">1</literal> <operator pos:start="48:35" pos:end="48:36">&lt;&lt;</operator> <operator pos:start="48:38" pos:end="48:38">(</operator><literal type="number" pos:start="48:39" pos:end="48:42">31</literal> <operator pos:start="48:42" pos:end="48:42">-</operator> <operator pos:start="48:44" pos:end="48:44">(</operator><operator pos:start="48:45" pos:end="48:45">(</operator><name pos:start="48:46" pos:end="48:54"><name pos:start="48:46" pos:end="48:46">s</name><operator pos:start="48:47" pos:end="48:48">-&gt;</operator><name pos:start="48:49" pos:end="48:54">pwrcon</name></name> <operator pos:start="48:56" pos:end="48:57">&gt;&gt;</operator> <literal type="number" pos:start="48:59" pos:end="48:59">1</literal><operator pos:start="48:60" pos:end="48:60">)</operator> <operator pos:start="48:62" pos:end="48:62">&amp;</operator> <literal type="number" pos:start="48:64" pos:end="48:66">0x7</literal><operator pos:start="48:67" pos:end="48:67">)</operator><operator pos:start="48:68" pos:end="48:68">)</operator><operator pos:start="48:69" pos:end="48:69">)</operator><operator pos:start="48:70" pos:end="48:70">)</operator></expr>)</condition> <block pos:start="48:73" pos:end="113:65">{<block_content pos:start="49:13" pos:end="113:65">
            <expr_stmt pos:start="49:13" pos:end="49:40"><expr pos:start="49:13" pos:end="49:39"><name pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:21">pwrcon</name></name> <operator pos:start="49:23" pos:end="49:24">&amp;=</operator> <operator pos:start="49:26" pos:end="49:26">~</operator><name pos:start="49:27" pos:end="49:39">SDHC_POWER_ON</name></expr>;</expr_stmt>
        <break pos:start="50:9" pos:end="50:14">break;</break>
    <case pos:start="51:5" pos:end="51:21">case <expr pos:start="51:10" pos:end="51:20"><name pos:start="51:10" pos:end="51:20">SDHC_CLKCON</name></expr>:</case>
        <if_stmt pos:start="52:9" pos:end="113:65"><if pos:start="52:9" pos:end="113:65">if <condition pos:start="52:12" pos:end="52:33">(<expr pos:start="52:13" pos:end="52:32"><operator pos:start="52:13" pos:end="52:13">!</operator><operator pos:start="52:14" pos:end="52:14">(</operator><name pos:start="52:15" pos:end="52:18">mask</name> <operator pos:start="52:20" pos:end="52:20">&amp;</operator> <literal type="number" pos:start="52:22" pos:end="52:31">0xFF000000</literal><operator pos:start="52:32" pos:end="52:32">)</operator></expr>)</condition> <block pos:start="52:35" pos:end="113:65">{<block_content pos:start="53:13" pos:end="113:65">
            <expr_stmt pos:start="53:13" pos:end="53:46"><expr pos:start="53:13" pos:end="53:45"><call pos:start="53:13" pos:end="53:45"><name pos:start="53:13" pos:end="53:29">sdhci_reset_write</name><argument_list pos:start="53:30" pos:end="53:45">(<argument pos:start="53:31" pos:end="53:31"><expr pos:start="53:31" pos:end="53:31"><name pos:start="53:31" pos:end="53:31">s</name></expr></argument>, <argument pos:start="53:34" pos:end="53:44"><expr pos:start="53:34" pos:end="53:44"><name pos:start="53:34" pos:end="53:38">value</name> <operator pos:start="53:40" pos:end="53:41">&gt;&gt;</operator> <literal type="number" pos:start="53:43" pos:end="53:44">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:45"><expr pos:start="54:9" pos:end="54:44"><call pos:start="54:9" pos:end="54:44"><name pos:start="54:9" pos:end="54:20">MASKED_WRITE</name><argument_list pos:start="54:21" pos:end="54:44">(<argument pos:start="54:22" pos:end="54:30"><expr pos:start="54:22" pos:end="54:30"><name pos:start="54:22" pos:end="54:30"><name pos:start="54:22" pos:end="54:22">s</name><operator pos:start="54:23" pos:end="54:24">-&gt;</operator><name pos:start="54:25" pos:end="54:30">clkcon</name></name></expr></argument>, <argument pos:start="54:33" pos:end="54:36"><expr pos:start="54:33" pos:end="54:36"><name pos:start="54:33" pos:end="54:36">mask</name></expr></argument>, <argument pos:start="54:39" pos:end="54:43"><expr pos:start="54:39" pos:end="54:43"><name pos:start="54:39" pos:end="54:43">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="55:9" pos:end="55:61"><expr pos:start="55:9" pos:end="55:60"><call pos:start="55:9" pos:end="55:60"><name pos:start="55:9" pos:end="55:20">MASKED_WRITE</name><argument_list pos:start="55:21" pos:end="55:60">(<argument pos:start="55:22" pos:end="55:34"><expr pos:start="55:22" pos:end="55:34"><name pos:start="55:22" pos:end="55:34"><name pos:start="55:22" pos:end="55:22">s</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:34">timeoutcon</name></name></expr></argument>, <argument pos:start="55:37" pos:end="55:46"><expr pos:start="55:37" pos:end="55:46"><name pos:start="55:37" pos:end="55:40">mask</name> <operator pos:start="55:42" pos:end="55:43">&gt;&gt;</operator> <literal type="number" pos:start="55:45" pos:end="55:46">16</literal></expr></argument>, <argument pos:start="55:49" pos:end="55:59"><expr pos:start="55:49" pos:end="55:59"><name pos:start="55:49" pos:end="55:53">value</name> <operator pos:start="55:55" pos:end="55:56">&gt;&gt;</operator> <literal type="number" pos:start="55:58" pos:end="55:59">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="56:9" pos:end="113:65"><if pos:start="56:9" pos:end="58:9">if <condition pos:start="56:12" pos:end="56:42">(<expr pos:start="56:13" pos:end="56:41"><name pos:start="56:13" pos:end="56:21"><name pos:start="56:13" pos:end="56:13">s</name><operator pos:start="56:14" pos:end="56:15">-&gt;</operator><name pos:start="56:16" pos:end="56:21">clkcon</name></name> <operator pos:start="56:23" pos:end="56:23">&amp;</operator> <name pos:start="56:25" pos:end="56:41">SDHC_CLOCK_INT_EN</name></expr>)</condition> <block pos:start="56:44" pos:end="58:9">{<block_content pos:start="57:13" pos:end="57:47">
            <expr_stmt pos:start="57:13" pos:end="57:47"><expr pos:start="57:13" pos:end="57:46"><name pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:21">clkcon</name></name> <operator pos:start="57:23" pos:end="57:24">|=</operator> <name pos:start="57:26" pos:end="57:46">SDHC_CLOCK_INT_STABLE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="58:11" pos:end="113:65">else <block pos:start="58:16" pos:end="113:65">{<block_content pos:start="59:13" pos:end="113:65">
            <expr_stmt pos:start="59:13" pos:end="59:48"><expr pos:start="59:13" pos:end="59:47"><name pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:21">clkcon</name></name> <operator pos:start="59:23" pos:end="59:24">&amp;=</operator> <operator pos:start="59:26" pos:end="59:26">~</operator><name pos:start="59:27" pos:end="59:47">SDHC_CLOCK_INT_STABLE</name></expr>;</expr_stmt>
        <break pos:start="60:9" pos:end="60:14">break;</break>
    <case pos:start="61:5" pos:end="61:24">case <expr pos:start="61:10" pos:end="61:23"><name pos:start="61:10" pos:end="61:23">SDHC_NORINTSTS</name></expr>:</case>
        <if_stmt pos:start="62:9" pos:end="113:65"><if pos:start="62:9" pos:end="113:65">if <condition pos:start="62:12" pos:end="62:48">(<expr pos:start="62:13" pos:end="62:47"><name pos:start="62:13" pos:end="62:26"><name pos:start="62:13" pos:end="62:13">s</name><operator pos:start="62:14" pos:end="62:15">-&gt;</operator><name pos:start="62:16" pos:end="62:26">norintstsen</name></name> <operator pos:start="62:28" pos:end="62:28">&amp;</operator> <name pos:start="62:30" pos:end="62:47">SDHC_NISEN_CARDINT</name></expr>)</condition> <block pos:start="62:50" pos:end="113:65">{<block_content pos:start="63:13" pos:end="113:65">
            <expr_stmt pos:start="63:13" pos:end="63:39"><expr pos:start="63:13" pos:end="63:38"><name pos:start="63:13" pos:end="63:17">value</name> <operator pos:start="63:19" pos:end="63:20">&amp;=</operator> <operator pos:start="63:22" pos:end="63:22">~</operator><name pos:start="63:23" pos:end="63:38">SDHC_NIS_CARDINT</name></expr>;</expr_stmt>
        <expr_stmt pos:start="64:9" pos:end="64:38"><expr pos:start="64:9" pos:end="64:37"><name pos:start="64:9" pos:end="64:20"><name pos:start="64:9" pos:end="64:9">s</name><operator pos:start="64:10" pos:end="64:11">-&gt;</operator><name pos:start="64:12" pos:end="64:20">norintsts</name></name> <operator pos:start="64:22" pos:end="64:23">&amp;=</operator> <name pos:start="64:25" pos:end="64:28">mask</name> <operator pos:start="64:30" pos:end="64:30">|</operator> <operator pos:start="64:32" pos:end="64:32">~</operator><name pos:start="64:33" pos:end="64:37">value</name></expr>;</expr_stmt>
        <expr_stmt pos:start="65:9" pos:end="65:54"><expr pos:start="65:9" pos:end="65:53"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:20">errintsts</name></name> <operator pos:start="65:22" pos:end="65:23">&amp;=</operator> <operator pos:start="65:25" pos:end="65:25">(</operator><name pos:start="65:26" pos:end="65:29">mask</name> <operator pos:start="65:31" pos:end="65:32">&gt;&gt;</operator> <literal type="number" pos:start="65:34" pos:end="65:35">16</literal><operator pos:start="65:36" pos:end="65:36">)</operator> <operator pos:start="65:38" pos:end="65:38">|</operator> <operator pos:start="65:40" pos:end="65:40">~</operator><operator pos:start="65:41" pos:end="65:41">(</operator><name pos:start="65:42" pos:end="65:46">value</name> <operator pos:start="65:48" pos:end="65:49">&gt;&gt;</operator> <literal type="number" pos:start="65:51" pos:end="65:52">16</literal><operator pos:start="65:53" pos:end="65:53">)</operator></expr>;</expr_stmt>
        <if_stmt pos:start="66:9" pos:end="113:65"><if pos:start="66:9" pos:end="68:9">if <condition pos:start="66:12" pos:end="66:25">(<expr pos:start="66:13" pos:end="66:24"><name pos:start="66:13" pos:end="66:24"><name pos:start="66:13" pos:end="66:13">s</name><operator pos:start="66:14" pos:end="66:15">-&gt;</operator><name pos:start="66:16" pos:end="66:24">errintsts</name></name></expr>)</condition> <block pos:start="66:27" pos:end="68:9">{<block_content pos:start="67:13" pos:end="67:41">
            <expr_stmt pos:start="67:13" pos:end="67:41"><expr pos:start="67:13" pos:end="67:40"><name pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:24">norintsts</name></name> <operator pos:start="67:26" pos:end="67:27">|=</operator> <name pos:start="67:29" pos:end="67:40">SDHC_NIS_ERR</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="68:11" pos:end="113:65">else <block pos:start="68:16" pos:end="113:65">{<block_content pos:start="69:13" pos:end="113:65">
            <expr_stmt pos:start="69:13" pos:end="69:42"><expr pos:start="69:13" pos:end="69:41"><name pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:24">norintsts</name></name> <operator pos:start="69:26" pos:end="69:27">&amp;=</operator> <operator pos:start="69:29" pos:end="69:29">~</operator><name pos:start="69:30" pos:end="69:41">SDHC_NIS_ERR</name></expr>;</expr_stmt>
        <expr_stmt pos:start="70:9" pos:end="70:28"><expr pos:start="70:9" pos:end="70:27"><call pos:start="70:9" pos:end="70:27"><name pos:start="70:9" pos:end="70:24">sdhci_update_irq</name><argument_list pos:start="70:25" pos:end="70:27">(<argument pos:start="70:26" pos:end="70:26"><expr pos:start="70:26" pos:end="70:26"><name pos:start="70:26" pos:end="70:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="71:9" pos:end="71:14">break;</break>
    <case pos:start="72:5" pos:end="72:26">case <expr pos:start="72:10" pos:end="72:25"><name pos:start="72:10" pos:end="72:25">SDHC_NORINTSTSEN</name></expr>:</case>
        <expr_stmt pos:start="73:9" pos:end="73:50"><expr pos:start="73:9" pos:end="73:49"><call pos:start="73:9" pos:end="73:49"><name pos:start="73:9" pos:end="73:20">MASKED_WRITE</name><argument_list pos:start="73:21" pos:end="73:49">(<argument pos:start="73:22" pos:end="73:35"><expr pos:start="73:22" pos:end="73:35"><name pos:start="73:22" pos:end="73:35"><name pos:start="73:22" pos:end="73:22">s</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:35">norintstsen</name></name></expr></argument>, <argument pos:start="73:38" pos:end="73:41"><expr pos:start="73:38" pos:end="73:41"><name pos:start="73:38" pos:end="73:41">mask</name></expr></argument>, <argument pos:start="73:44" pos:end="73:48"><expr pos:start="73:44" pos:end="73:48"><name pos:start="73:44" pos:end="73:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="74:9" pos:end="74:62"><expr pos:start="74:9" pos:end="74:61"><call pos:start="74:9" pos:end="74:61"><name pos:start="74:9" pos:end="74:20">MASKED_WRITE</name><argument_list pos:start="74:21" pos:end="74:61">(<argument pos:start="74:22" pos:end="74:35"><expr pos:start="74:22" pos:end="74:35"><name pos:start="74:22" pos:end="74:35"><name pos:start="74:22" pos:end="74:22">s</name><operator pos:start="74:23" pos:end="74:24">-&gt;</operator><name pos:start="74:25" pos:end="74:35">errintstsen</name></name></expr></argument>, <argument pos:start="74:38" pos:end="74:47"><expr pos:start="74:38" pos:end="74:47"><name pos:start="74:38" pos:end="74:41">mask</name> <operator pos:start="74:43" pos:end="74:44">&gt;&gt;</operator> <literal type="number" pos:start="74:46" pos:end="74:47">16</literal></expr></argument>, <argument pos:start="74:50" pos:end="74:60"><expr pos:start="74:50" pos:end="74:60"><name pos:start="74:50" pos:end="74:54">value</name> <operator pos:start="74:56" pos:end="74:57">&gt;&gt;</operator> <literal type="number" pos:start="74:59" pos:end="74:60">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:20">norintsts</name></name> <operator pos:start="75:22" pos:end="75:23">&amp;=</operator> <name pos:start="75:25" pos:end="75:38"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:38">norintstsen</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="76:9" pos:end="76:39"><expr pos:start="76:9" pos:end="76:38"><name pos:start="76:9" pos:end="76:20"><name pos:start="76:9" pos:end="76:9">s</name><operator pos:start="76:10" pos:end="76:11">-&gt;</operator><name pos:start="76:12" pos:end="76:20">errintsts</name></name> <operator pos:start="76:22" pos:end="76:23">&amp;=</operator> <name pos:start="76:25" pos:end="76:38"><name pos:start="76:25" pos:end="76:25">s</name><operator pos:start="76:26" pos:end="76:27">-&gt;</operator><name pos:start="76:28" pos:end="76:38">errintstsen</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="77:9" pos:end="113:65"><if pos:start="77:9" pos:end="79:9">if <condition pos:start="77:12" pos:end="77:25">(<expr pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:24">errintsts</name></name></expr>)</condition> <block pos:start="77:27" pos:end="79:9">{<block_content pos:start="78:13" pos:end="78:41">
            <expr_stmt pos:start="78:13" pos:end="78:41"><expr pos:start="78:13" pos:end="78:40"><name pos:start="78:13" pos:end="78:24"><name pos:start="78:13" pos:end="78:13">s</name><operator pos:start="78:14" pos:end="78:15">-&gt;</operator><name pos:start="78:16" pos:end="78:24">norintsts</name></name> <operator pos:start="78:26" pos:end="78:27">|=</operator> <name pos:start="78:29" pos:end="78:40">SDHC_NIS_ERR</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="79:11" pos:end="113:65">else <block pos:start="79:16" pos:end="113:65">{<block_content pos:start="80:13" pos:end="113:65">
            <expr_stmt pos:start="80:13" pos:end="80:42"><expr pos:start="80:13" pos:end="80:41"><name pos:start="80:13" pos:end="80:24"><name pos:start="80:13" pos:end="80:13">s</name><operator pos:start="80:14" pos:end="80:15">-&gt;</operator><name pos:start="80:16" pos:end="80:24">norintsts</name></name> <operator pos:start="80:26" pos:end="80:27">&amp;=</operator> <operator pos:start="80:29" pos:end="80:29">~</operator><name pos:start="80:30" pos:end="80:41">SDHC_NIS_ERR</name></expr>;</expr_stmt>
        <expr_stmt pos:start="81:9" pos:end="81:28"><expr pos:start="81:9" pos:end="81:27"><call pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:24">sdhci_update_irq</name><argument_list pos:start="81:25" pos:end="81:27">(<argument pos:start="81:26" pos:end="81:26"><expr pos:start="81:26" pos:end="81:26"><name pos:start="81:26" pos:end="81:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="82:9" pos:end="82:14">break;</break>
    <case pos:start="83:5" pos:end="83:26">case <expr pos:start="83:10" pos:end="83:25"><name pos:start="83:10" pos:end="83:25">SDHC_NORINTSIGEN</name></expr>:</case>
        <expr_stmt pos:start="84:9" pos:end="84:50"><expr pos:start="84:9" pos:end="84:49"><call pos:start="84:9" pos:end="84:49"><name pos:start="84:9" pos:end="84:20">MASKED_WRITE</name><argument_list pos:start="84:21" pos:end="84:49">(<argument pos:start="84:22" pos:end="84:35"><expr pos:start="84:22" pos:end="84:35"><name pos:start="84:22" pos:end="84:35"><name pos:start="84:22" pos:end="84:22">s</name><operator pos:start="84:23" pos:end="84:24">-&gt;</operator><name pos:start="84:25" pos:end="84:35">norintsigen</name></name></expr></argument>, <argument pos:start="84:38" pos:end="84:41"><expr pos:start="84:38" pos:end="84:41"><name pos:start="84:38" pos:end="84:41">mask</name></expr></argument>, <argument pos:start="84:44" pos:end="84:48"><expr pos:start="84:44" pos:end="84:48"><name pos:start="84:44" pos:end="84:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="85:9" pos:end="85:62"><expr pos:start="85:9" pos:end="85:61"><call pos:start="85:9" pos:end="85:61"><name pos:start="85:9" pos:end="85:20">MASKED_WRITE</name><argument_list pos:start="85:21" pos:end="85:61">(<argument pos:start="85:22" pos:end="85:35"><expr pos:start="85:22" pos:end="85:35"><name pos:start="85:22" pos:end="85:35"><name pos:start="85:22" pos:end="85:22">s</name><operator pos:start="85:23" pos:end="85:24">-&gt;</operator><name pos:start="85:25" pos:end="85:35">errintsigen</name></name></expr></argument>, <argument pos:start="85:38" pos:end="85:47"><expr pos:start="85:38" pos:end="85:47"><name pos:start="85:38" pos:end="85:41">mask</name> <operator pos:start="85:43" pos:end="85:44">&gt;&gt;</operator> <literal type="number" pos:start="85:46" pos:end="85:47">16</literal></expr></argument>, <argument pos:start="85:50" pos:end="85:60"><expr pos:start="85:50" pos:end="85:60"><name pos:start="85:50" pos:end="85:54">value</name> <operator pos:start="85:56" pos:end="85:57">&gt;&gt;</operator> <literal type="number" pos:start="85:59" pos:end="85:60">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="86:9" pos:end="86:28"><expr pos:start="86:9" pos:end="86:27"><call pos:start="86:9" pos:end="86:27"><name pos:start="86:9" pos:end="86:24">sdhci_update_irq</name><argument_list pos:start="86:25" pos:end="86:27">(<argument pos:start="86:26" pos:end="86:26"><expr pos:start="86:26" pos:end="86:26"><name pos:start="86:26" pos:end="86:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="87:9" pos:end="87:14">break;</break>
    <case pos:start="88:5" pos:end="88:22">case <expr pos:start="88:10" pos:end="88:21"><name pos:start="88:10" pos:end="88:21">SDHC_ADMAERR</name></expr>:</case>
        <expr_stmt pos:start="89:9" pos:end="89:46"><expr pos:start="89:9" pos:end="89:45"><call pos:start="89:9" pos:end="89:45"><name pos:start="89:9" pos:end="89:20">MASKED_WRITE</name><argument_list pos:start="89:21" pos:end="89:45">(<argument pos:start="89:22" pos:end="89:31"><expr pos:start="89:22" pos:end="89:31"><name pos:start="89:22" pos:end="89:31"><name pos:start="89:22" pos:end="89:22">s</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:31">admaerr</name></name></expr></argument>, <argument pos:start="89:34" pos:end="89:37"><expr pos:start="89:34" pos:end="89:37"><name pos:start="89:34" pos:end="89:37">mask</name></expr></argument>, <argument pos:start="89:40" pos:end="89:44"><expr pos:start="89:40" pos:end="89:44"><name pos:start="89:40" pos:end="89:44">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="90:9" pos:end="90:14">break;</break>
    <case pos:start="91:5" pos:end="91:26">case <expr pos:start="91:10" pos:end="91:25"><name pos:start="91:10" pos:end="91:25">SDHC_ADMASYSADDR</name></expr>:</case>
        <expr_stmt pos:start="92:9" pos:end="93:51"><expr pos:start="92:9" pos:end="93:50"><name pos:start="92:9" pos:end="92:22"><name pos:start="92:9" pos:end="92:9">s</name><operator pos:start="92:10" pos:end="92:11">-&gt;</operator><name pos:start="92:12" pos:end="92:22">admasysaddr</name></name> <operator pos:start="92:24" pos:end="92:24">=</operator> <operator pos:start="92:26" pos:end="92:26">(</operator><name pos:start="92:27" pos:end="92:40"><name pos:start="92:27" pos:end="92:27">s</name><operator pos:start="92:28" pos:end="92:29">-&gt;</operator><name pos:start="92:30" pos:end="92:40">admasysaddr</name></name> <operator pos:start="92:42" pos:end="92:42">&amp;</operator> <operator pos:start="92:44" pos:end="92:44">(</operator><literal type="number" pos:start="92:45" pos:end="92:65">0xFFFFFFFF00000000ULL</literal> <operator pos:start="92:67" pos:end="92:67">|</operator>
                <operator pos:start="93:17" pos:end="93:17">(</operator><name pos:start="93:18" pos:end="93:25">uint64_t</name><operator pos:start="93:26" pos:end="93:26">)</operator><name pos:start="93:27" pos:end="93:30">mask</name><operator pos:start="93:31" pos:end="93:31">)</operator><operator pos:start="93:32" pos:end="93:32">)</operator> <operator pos:start="93:34" pos:end="93:34">|</operator> <operator pos:start="93:36" pos:end="93:36">(</operator><name pos:start="93:37" pos:end="93:44">uint64_t</name><operator pos:start="93:45" pos:end="93:45">)</operator><name pos:start="93:46" pos:end="93:50">value</name></expr>;</expr_stmt>
        <break pos:start="94:9" pos:end="94:14">break;</break>
    <case pos:start="95:5" pos:end="95:30">case <expr pos:start="95:10" pos:end="95:29"><name pos:start="95:10" pos:end="95:25">SDHC_ADMASYSADDR</name> <operator pos:start="95:27" pos:end="95:27">+</operator> <literal type="number" pos:start="95:29" pos:end="95:29">4</literal></expr>:</case>
        <expr_stmt pos:start="96:9" pos:end="97:67"><expr pos:start="96:9" pos:end="97:66"><name pos:start="96:9" pos:end="96:22"><name pos:start="96:9" pos:end="96:9">s</name><operator pos:start="96:10" pos:end="96:11">-&gt;</operator><name pos:start="96:12" pos:end="96:22">admasysaddr</name></name> <operator pos:start="96:24" pos:end="96:24">=</operator> <operator pos:start="96:26" pos:end="96:26">(</operator><name pos:start="96:27" pos:end="96:40"><name pos:start="96:27" pos:end="96:27">s</name><operator pos:start="96:28" pos:end="96:29">-&gt;</operator><name pos:start="96:30" pos:end="96:40">admasysaddr</name></name> <operator pos:start="96:42" pos:end="96:42">&amp;</operator> <operator pos:start="96:44" pos:end="96:44">(</operator><literal type="number" pos:start="96:45" pos:end="96:65">0x00000000FFFFFFFFULL</literal> <operator pos:start="96:67" pos:end="96:67">|</operator>
                <operator pos:start="97:17" pos:end="97:17">(</operator><operator pos:start="97:18" pos:end="97:18">(</operator><name pos:start="97:19" pos:end="97:26">uint64_t</name><operator pos:start="97:27" pos:end="97:27">)</operator><name pos:start="97:28" pos:end="97:31">mask</name> <operator pos:start="97:33" pos:end="97:34">&lt;&lt;</operator> <literal type="number" pos:start="97:36" pos:end="97:37">32</literal><operator pos:start="97:38" pos:end="97:38">)</operator><operator pos:start="97:39" pos:end="97:39">)</operator><operator pos:start="97:40" pos:end="97:40">)</operator> <operator pos:start="97:42" pos:end="97:42">|</operator> <operator pos:start="97:44" pos:end="97:44">(</operator><operator pos:start="97:45" pos:end="97:45">(</operator><name pos:start="97:46" pos:end="97:53">uint64_t</name><operator pos:start="97:54" pos:end="97:54">)</operator><name pos:start="97:55" pos:end="97:59">value</name> <operator pos:start="97:61" pos:end="97:62">&lt;&lt;</operator> <literal type="number" pos:start="97:64" pos:end="97:65">32</literal><operator pos:start="97:66" pos:end="97:66">)</operator></expr>;</expr_stmt>
        <break pos:start="98:9" pos:end="98:14">break;</break>
    <case pos:start="99:5" pos:end="99:20">case <expr pos:start="99:10" pos:end="99:19"><name pos:start="99:10" pos:end="99:19">SDHC_FEAER</name></expr>:</case>
        <expr_stmt pos:start="100:9" pos:end="100:33"><expr pos:start="100:9" pos:end="100:32"><name pos:start="100:9" pos:end="100:23"><name pos:start="100:9" pos:end="100:9">s</name><operator pos:start="100:10" pos:end="100:11">-&gt;</operator><name pos:start="100:12" pos:end="100:23">acmd12errsts</name></name> <operator pos:start="100:25" pos:end="100:26">|=</operator> <name pos:start="100:28" pos:end="100:32">value</name></expr>;</expr_stmt>
        <expr_stmt pos:start="101:9" pos:end="101:55"><expr pos:start="101:9" pos:end="101:54"><name pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:20">errintsts</name></name> <operator pos:start="101:22" pos:end="101:23">|=</operator> <operator pos:start="101:25" pos:end="101:25">(</operator><name pos:start="101:26" pos:end="101:30">value</name> <operator pos:start="101:32" pos:end="101:33">&gt;&gt;</operator> <literal type="number" pos:start="101:35" pos:end="101:36">16</literal><operator pos:start="101:37" pos:end="101:37">)</operator> <operator pos:start="101:39" pos:end="101:39">&amp;</operator> <name pos:start="101:41" pos:end="101:54"><name pos:start="101:41" pos:end="101:41">s</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:54">errintstsen</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="102:9" pos:end="113:65"><if pos:start="102:9" pos:end="113:65">if <condition pos:start="102:12" pos:end="102:28">(<expr pos:start="102:13" pos:end="102:27"><name pos:start="102:13" pos:end="102:27"><name pos:start="102:13" pos:end="102:13">s</name><operator pos:start="102:14" pos:end="102:15">-&gt;</operator><name pos:start="102:16" pos:end="102:27">acmd12errsts</name></name></expr>)</condition> <block pos:start="102:30" pos:end="113:65">{<block_content pos:start="103:13" pos:end="113:65">
            <expr_stmt pos:start="103:13" pos:end="103:46"><expr pos:start="103:13" pos:end="103:45"><name pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:24">errintsts</name></name> <operator pos:start="103:26" pos:end="103:27">|=</operator> <name pos:start="103:29" pos:end="103:45">SDHC_EIS_CMD12ERR</name></expr>;</expr_stmt>
        <if_stmt pos:start="104:9" pos:end="113:65"><if pos:start="104:9" pos:end="113:65">if <condition pos:start="104:12" pos:end="104:25">(<expr pos:start="104:13" pos:end="104:24"><name pos:start="104:13" pos:end="104:24"><name pos:start="104:13" pos:end="104:13">s</name><operator pos:start="104:14" pos:end="104:15">-&gt;</operator><name pos:start="104:16" pos:end="104:24">errintsts</name></name></expr>)</condition> <block pos:start="104:27" pos:end="113:65">{<block_content pos:start="105:13" pos:end="113:65">
            <expr_stmt pos:start="105:13" pos:end="105:41"><expr pos:start="105:13" pos:end="105:40"><name pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:24">norintsts</name></name> <operator pos:start="105:26" pos:end="105:27">|=</operator> <name pos:start="105:29" pos:end="105:40">SDHC_NIS_ERR</name></expr>;</expr_stmt>
        <expr_stmt pos:start="106:9" pos:end="106:28"><expr pos:start="106:9" pos:end="106:27"><call pos:start="106:9" pos:end="106:27"><name pos:start="106:9" pos:end="106:24">sdhci_update_irq</name><argument_list pos:start="106:25" pos:end="106:27">(<argument pos:start="106:26" pos:end="106:26"><expr pos:start="106:26" pos:end="106:26"><name pos:start="106:26" pos:end="106:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="107:9" pos:end="107:14">break;</break>
    <default pos:start="108:5" pos:end="108:12">default:</default>
        <expr_stmt pos:start="109:9" pos:end="110:68"><expr pos:start="109:9" pos:end="110:67"><call pos:start="109:9" pos:end="110:67"><name pos:start="109:9" pos:end="109:16">ERRPRINT</name><argument_list pos:start="109:17" pos:end="110:67">(<argument pos:start="109:18" pos:end="109:67"><expr pos:start="109:18" pos:end="109:67"><literal type="string" pos:start="109:18" pos:end="109:67">"bad %ub write offset: addr[0x%04x] &lt;- %u(0x%x)\n"</literal></expr></argument>,
                 <argument pos:start="110:18" pos:end="110:21"><expr pos:start="110:18" pos:end="110:21"><name pos:start="110:18" pos:end="110:21">size</name></expr></argument>, <argument pos:start="110:24" pos:end="110:34"><expr pos:start="110:24" pos:end="110:34"><operator pos:start="110:24" pos:end="110:24">(</operator><name pos:start="110:25" pos:end="110:27">int</name><operator pos:start="110:28" pos:end="110:28">)</operator><name pos:start="110:29" pos:end="110:34">offset</name></expr></argument>, <argument pos:start="110:37" pos:end="110:50"><expr pos:start="110:37" pos:end="110:50"><name pos:start="110:37" pos:end="110:41">value</name> <operator pos:start="110:43" pos:end="110:44">&gt;&gt;</operator> <name pos:start="110:46" pos:end="110:50">shift</name></expr></argument>, <argument pos:start="110:53" pos:end="110:66"><expr pos:start="110:53" pos:end="110:66"><name pos:start="110:53" pos:end="110:57">value</name> <operator pos:start="110:59" pos:end="110:60">&gt;&gt;</operator> <name pos:start="110:62" pos:end="110:66">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="111:9" pos:end="111:14">break;</break>
    <expr_stmt pos:start="112:5" pos:end="113:65"><expr pos:start="112:5" pos:end="113:64"><call pos:start="112:5" pos:end="113:64"><name pos:start="112:5" pos:end="112:13">DPRINT_L2</name><argument_list pos:start="112:14" pos:end="113:64">(<argument pos:start="112:15" pos:end="112:53"><expr pos:start="112:15" pos:end="112:53"><literal type="string" pos:start="112:15" pos:end="112:53">"write %ub: addr[0x%04x] &lt;- %u(0x%x)\n"</literal></expr></argument>,
              <argument pos:start="113:15" pos:end="113:18"><expr pos:start="113:15" pos:end="113:18"><name pos:start="113:15" pos:end="113:18">size</name></expr></argument>, <argument pos:start="113:21" pos:end="113:31"><expr pos:start="113:21" pos:end="113:31"><operator pos:start="113:21" pos:end="113:21">(</operator><name pos:start="113:22" pos:end="113:24">int</name><operator pos:start="113:25" pos:end="113:25">)</operator><name pos:start="113:26" pos:end="113:31">offset</name></expr></argument>, <argument pos:start="113:34" pos:end="113:47"><expr pos:start="113:34" pos:end="113:47"><name pos:start="113:34" pos:end="113:38">value</name> <operator pos:start="113:40" pos:end="113:41">&gt;&gt;</operator> <name pos:start="113:43" pos:end="113:47">shift</name></expr></argument>, <argument pos:start="113:50" pos:end="113:63"><expr pos:start="113:50" pos:end="113:63"><name pos:start="113:50" pos:end="113:54">value</name> <operator pos:start="113:56" pos:end="113:57">&gt;&gt;</operator> <name pos:start="113:59" pos:end="113:63">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></unit>
