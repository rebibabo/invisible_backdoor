<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10531.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">tcg_cpu_address_space_init</name><parameter_list pos:start="1:32" pos:end="1:64">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:40">CPUState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">cpu</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:63"><decl pos:start="1:48" pos:end="1:63"><type pos:start="1:48" pos:end="1:63"><name pos:start="1:48" pos:end="1:59">AddressSpace</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:63">as</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="7:5" pos:end="29:68">

    <comment type="block" pos:start="5:5" pos:end="5:67">/* We only support one address space per cpu at the moment.  */</comment>

    <expr_stmt pos:start="7:5" pos:end="7:26"><expr pos:start="7:5" pos:end="7:25"><call pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:10">assert</name><argument_list pos:start="7:11" pos:end="7:25">(<argument pos:start="7:12" pos:end="7:24"><expr pos:start="7:12" pos:end="7:24"><name pos:start="7:12" pos:end="7:18"><name pos:start="7:12" pos:end="7:14">cpu</name><operator pos:start="7:15" pos:end="7:16">-&gt;</operator><name pos:start="7:17" pos:end="7:18">as</name></name> <operator pos:start="7:20" pos:end="7:21">==</operator> <name pos:start="7:23" pos:end="7:24">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:11">cpu</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:21">cpu_ases</name></name></expr>)</condition> <block pos:start="11:24" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <comment type="block" pos:start="13:9" pos:end="13:67">/* We've already registered the listener for our only AS */</comment>

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:7">cpu</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:17">cpu_ases</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:46"><name pos:start="21:21" pos:end="21:26">g_new0</name><argument_list pos:start="21:27" pos:end="21:46">(<argument pos:start="21:28" pos:end="21:42"><expr pos:start="21:28" pos:end="21:42"><name pos:start="21:28" pos:end="21:42">CPUAddressSpace</name></expr></argument>, <argument pos:start="21:45" pos:end="21:45"><expr pos:start="21:45" pos:end="21:45"><literal type="number" pos:start="21:45" pos:end="21:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:7">cpu</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:17">cpu_ases</name><index pos:start="23:18" pos:end="23:20">[<expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr>]</index></name><operator pos:start="23:21" pos:end="23:21">.</operator><name pos:start="23:22" pos:end="23:24">cpu</name> <operator pos:start="23:26" pos:end="23:26">=</operator> <name pos:start="23:28" pos:end="23:30">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:7">cpu</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:17">cpu_ases</name><index pos:start="25:18" pos:end="25:20">[<expr pos:start="25:19" pos:end="25:19"><literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>]</index></name><operator pos:start="25:21" pos:end="25:21">.</operator><name pos:start="25:22" pos:end="25:23">as</name> <operator pos:start="25:25" pos:end="25:25">=</operator> <name pos:start="25:27" pos:end="25:28">as</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:57"><expr pos:start="27:5" pos:end="27:56"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:7">cpu</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:17">cpu_ases</name><index pos:start="27:18" pos:end="27:20">[<expr pos:start="27:19" pos:end="27:19"><literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>]</index></name><operator pos:start="27:21" pos:end="27:21">.</operator><name pos:start="27:22" pos:end="27:43"><name pos:start="27:22" pos:end="27:36">tcg_as_listener</name><operator pos:start="27:37" pos:end="27:37">.</operator><name pos:start="27:38" pos:end="27:43">commit</name></name> <operator pos:start="27:45" pos:end="27:45">=</operator> <name pos:start="27:47" pos:end="27:56">tcg_commit</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:68"><expr pos:start="29:5" pos:end="29:67"><call pos:start="29:5" pos:end="29:67"><name pos:start="29:5" pos:end="29:28">memory_listener_register</name><argument_list pos:start="29:29" pos:end="29:67">(<argument pos:start="29:30" pos:end="29:62"><expr pos:start="29:30" pos:end="29:62"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:46"><name pos:start="29:31" pos:end="29:33">cpu</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:43">cpu_ases</name><index pos:start="29:44" pos:end="29:46">[<expr pos:start="29:45" pos:end="29:45"><literal type="number" pos:start="29:45" pos:end="29:45">0</literal></expr>]</index></name><operator pos:start="29:47" pos:end="29:47">.</operator><name pos:start="29:48" pos:end="29:62">tcg_as_listener</name></expr></argument>, <argument pos:start="29:65" pos:end="29:66"><expr pos:start="29:65" pos:end="29:66"><name pos:start="29:65" pos:end="29:66">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
