<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12581.c" pos:tabs="8"><function pos:start="1:1" pos:end="773:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:29">initFilter</name><parameter_list pos:start="1:30" pos:end="11:70">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:37">int16_t</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier><modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:49">outFilter</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:70"><decl pos:start="1:52" pos:end="1:70"><type pos:start="1:52" pos:end="1:70"><name pos:start="1:52" pos:end="1:58">int32_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:70">filterPos</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:48">outFilterSize</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:58"><decl pos:start="3:51" pos:end="3:58"><type pos:start="3:51" pos:end="3:58"><name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:58">xInc</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:68"><decl pos:start="3:61" pos:end="3:68"><type pos:start="3:61" pos:end="3:68"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:68">srcW</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:38"><decl pos:start="5:31" pos:end="5:38"><type pos:start="5:31" pos:end="5:38"><name pos:start="5:31" pos:end="5:33">int</name></type> <name pos:start="5:35" pos:end="5:38">dstW</name></decl></parameter>, <parameter pos:start="5:41" pos:end="5:55"><decl pos:start="5:41" pos:end="5:55"><type pos:start="5:41" pos:end="5:55"><name pos:start="5:41" pos:end="5:43">int</name></type> <name pos:start="5:45" pos:end="5:55">filterAlign</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:64"><decl pos:start="5:58" pos:end="5:64"><type pos:start="5:58" pos:end="5:64"><name pos:start="5:58" pos:end="5:60">int</name></type> <name pos:start="5:62" pos:end="5:64">one</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:39"><decl pos:start="7:31" pos:end="7:39"><type pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:33">int</name></type> <name pos:start="7:35" pos:end="7:39">flags</name></decl></parameter>, <parameter pos:start="7:42" pos:end="7:54"><decl pos:start="7:42" pos:end="7:54"><type pos:start="7:42" pos:end="7:54"><name pos:start="7:42" pos:end="7:44">int</name></type> <name pos:start="7:46" pos:end="7:54">cpu_flags</name></decl></parameter>,

                              <parameter pos:start="9:31" pos:end="9:50"><decl pos:start="9:31" pos:end="9:50"><type pos:start="9:31" pos:end="9:50"><name pos:start="9:31" pos:end="9:39">SwsVector</name> <modifier pos:start="9:41" pos:end="9:41">*</modifier></type><name pos:start="9:42" pos:end="9:50">srcFilter</name></decl></parameter>, <parameter pos:start="9:53" pos:end="9:72"><decl pos:start="9:53" pos:end="9:72"><type pos:start="9:53" pos:end="9:72"><name pos:start="9:53" pos:end="9:61">SwsVector</name> <modifier pos:start="9:63" pos:end="9:63">*</modifier></type><name pos:start="9:64" pos:end="9:72">dstFilter</name></decl></parameter>,

                              <parameter pos:start="11:31" pos:end="11:45"><decl pos:start="11:31" pos:end="11:45"><type pos:start="11:31" pos:end="11:42"><name pos:start="11:31" pos:end="11:36">double</name></type> <name pos:start="11:38" pos:end="11:45"><name pos:start="11:38" pos:end="11:42">param</name><index pos:start="11:43" pos:end="11:45">[<expr pos:start="11:44" pos:end="11:44"><literal type="number" pos:start="11:44" pos:end="11:44">2</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="11:48" pos:end="11:57"><decl pos:start="11:48" pos:end="11:57"><type pos:start="11:48" pos:end="11:57"><name pos:start="11:48" pos:end="11:50">int</name></type> <name pos:start="11:52" pos:end="11:57">srcPos</name></decl></parameter>, <parameter pos:start="11:60" pos:end="11:69"><decl pos:start="11:60" pos:end="11:69"><type pos:start="11:60" pos:end="11:69"><name pos:start="11:60" pos:end="11:62">int</name></type> <name pos:start="11:64" pos:end="11:69">dstPos</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="773:1">{<block_content pos:start="15:5" pos:end="771:15">

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">filterSize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">filter2Size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:21">minFilterSize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">int64_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:19">filter</name>    <init pos:start="23:24" pos:end="23:29">= <expr pos:start="23:26" pos:end="23:29"><name pos:start="23:26" pos:end="23:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">int64_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:20">filter2</name>   <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:68"><decl pos:start="27:5" pos:end="27:67"><type pos:start="27:5" pos:end="27:17"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:17">int64_t</name></type> <name pos:start="27:19" pos:end="27:22">fone</name> <init pos:start="27:24" pos:end="27:67">= <expr pos:start="27:26" pos:end="27:67"><literal type="number" pos:start="27:26" pos:end="27:28">1LL</literal> <operator pos:start="27:30" pos:end="27:31">&lt;&lt;</operator> <operator pos:start="27:33" pos:end="27:33">(</operator><literal type="number" pos:start="27:34" pos:end="27:37">54</literal> <operator pos:start="27:37" pos:end="27:37">-</operator> <call pos:start="27:39" pos:end="27:66"><name pos:start="27:39" pos:end="27:43">FFMIN</name><argument_list pos:start="27:44" pos:end="27:66">(<argument pos:start="27:45" pos:end="27:62"><expr pos:start="27:45" pos:end="27:62"><call pos:start="27:45" pos:end="27:62"><name pos:start="27:45" pos:end="27:51">av_log2</name><argument_list pos:start="27:52" pos:end="27:62">(<argument pos:start="27:53" pos:end="27:61"><expr pos:start="27:53" pos:end="27:61"><name pos:start="27:53" pos:end="27:56">srcW</name><operator pos:start="27:57" pos:end="27:57">/</operator><name pos:start="27:58" pos:end="27:61">dstW</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:65" pos:end="27:65"><expr pos:start="27:65" pos:end="27:65"><literal type="number" pos:start="27:65" pos:end="27:65">8</literal></expr></argument>)</argument_list></call><operator pos:start="27:67" pos:end="27:67">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name>            <init pos:start="29:24" pos:end="29:27">= <expr pos:start="29:26" pos:end="29:27"><operator pos:start="29:26" pos:end="29:26">-</operator><literal type="number" pos:start="29:27" pos:end="29:27">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:13"><expr pos:start="33:5" pos:end="33:12"><call pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:10">emms_c</name><argument_list pos:start="33:11" pos:end="33:12">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="33:15" pos:end="33:80">// FIXME should not be required but IS (even for non-MMX versions)</comment>



    <comment type="line" pos:start="37:5" pos:end="37:80">// NOTE: the +3 is for the MMX(+1) / SSE(+3) scaler which reads over the end</comment>

    <expr_stmt pos:start="39:5" pos:end="39:84"><expr pos:start="39:5" pos:end="39:83"><call pos:start="39:5" pos:end="39:83"><name pos:start="39:5" pos:end="39:26">FF_ALLOC_ARRAY_OR_GOTO</name><argument_list pos:start="39:27" pos:end="39:83">(<argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">NULL</name></expr></argument>, <argument pos:start="39:34" pos:end="39:43"><expr pos:start="39:34" pos:end="39:43"><operator pos:start="39:34" pos:end="39:34">*</operator><name pos:start="39:35" pos:end="39:43">filterPos</name></expr></argument>, <argument pos:start="39:46" pos:end="39:55"><expr pos:start="39:46" pos:end="39:55"><operator pos:start="39:46" pos:end="39:46">(</operator><name pos:start="39:47" pos:end="39:50">dstW</name> <operator pos:start="39:52" pos:end="39:52">+</operator> <literal type="number" pos:start="39:54" pos:end="39:54">3</literal><operator pos:start="39:55" pos:end="39:55">)</operator></expr></argument>, <argument pos:start="39:58" pos:end="39:76"><expr pos:start="39:58" pos:end="39:76"><sizeof pos:start="39:58" pos:end="39:76">sizeof<argument_list pos:start="39:64" pos:end="39:76">(<argument pos:start="39:65" pos:end="39:75"><expr pos:start="39:65" pos:end="39:75"><operator pos:start="39:65" pos:end="39:65">*</operator><operator pos:start="39:66" pos:end="39:66">*</operator><name pos:start="39:67" pos:end="39:75">filterPos</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:79" pos:end="39:82"><expr pos:start="39:79" pos:end="39:82"><name pos:start="39:79" pos:end="39:82">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="377:5"><if pos:start="43:5" pos:end="63:5">if <condition pos:start="43:8" pos:end="43:55">(<expr pos:start="43:9" pos:end="43:54"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:13">FFABS</name><argument_list pos:start="43:14" pos:end="43:29">(<argument pos:start="43:15" pos:end="43:28"><expr pos:start="43:15" pos:end="43:28"><name pos:start="43:15" pos:end="43:18">xInc</name> <operator pos:start="43:20" pos:end="43:20">-</operator> <literal type="number" pos:start="43:22" pos:end="43:28">0x10000</literal></expr></argument>)</argument_list></call> <operator pos:start="43:31" pos:end="43:31">&lt;</operator> <literal type="number" pos:start="43:33" pos:end="43:34">10</literal> <operator pos:start="43:36" pos:end="43:37">&amp;&amp;</operator> <name pos:start="43:39" pos:end="43:44">srcPos</name> <operator pos:start="43:46" pos:end="43:47">==</operator> <name pos:start="43:49" pos:end="43:54">dstPos</name></expr>)</condition> <block pos:start="43:57" pos:end="63:5">{<block_content pos:start="45:9" pos:end="61:9"> <comment type="line" pos:start="43:59" pos:end="43:69">// unscaled</comment>

        <decl_stmt pos:start="45:9" pos:end="45:14"><decl pos:start="45:9" pos:end="45:13"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:18">filterSize</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:74"><expr pos:start="49:9" pos:end="51:73"><call pos:start="49:9" pos:end="51:73"><name pos:start="49:9" pos:end="49:31">FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list pos:start="49:32" pos:end="51:73">(<argument pos:start="49:33" pos:end="49:36"><expr pos:start="49:33" pos:end="49:36"><name pos:start="49:33" pos:end="49:36">NULL</name></expr></argument>, <argument pos:start="49:39" pos:end="49:44"><expr pos:start="49:39" pos:end="49:44"><name pos:start="49:39" pos:end="49:44">filter</name></expr></argument>,

                                <argument pos:start="51:33" pos:end="51:36"><expr pos:start="51:33" pos:end="51:36"><name pos:start="51:33" pos:end="51:36">dstW</name></expr></argument>, <argument pos:start="51:39" pos:end="51:66"><expr pos:start="51:39" pos:end="51:66"><sizeof pos:start="51:39" pos:end="51:53">sizeof<argument_list pos:start="51:45" pos:end="51:53">(<argument pos:start="51:46" pos:end="51:52"><expr pos:start="51:46" pos:end="51:52"><operator pos:start="51:46" pos:end="51:46">*</operator><name pos:start="51:47" pos:end="51:52">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="51:55" pos:end="51:55">*</operator> <name pos:start="51:57" pos:end="51:66">filterSize</name></expr></argument>, <argument pos:start="51:69" pos:end="51:72"><expr pos:start="51:69" pos:end="51:72"><name pos:start="51:69" pos:end="51:72">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="55:9" pos:end="61:9">for <control pos:start="55:13" pos:end="55:34">(<init pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:14">i</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</init> <condition pos:start="55:21" pos:end="55:29"><expr pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:21">i</name> <operator pos:start="55:23" pos:end="55:23">&lt;</operator> <name pos:start="55:25" pos:end="55:28">dstW</name></expr>;</condition> <incr pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:31">i</name><operator pos:start="55:32" pos:end="55:33">++</operator></expr></incr>)</control> <block pos:start="55:36" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:39">

            <expr_stmt pos:start="57:13" pos:end="57:42"><expr pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:18">filter</name><index pos:start="57:19" pos:end="57:34">[<expr pos:start="57:20" pos:end="57:33"><name pos:start="57:20" pos:end="57:20">i</name> <operator pos:start="57:22" pos:end="57:22">*</operator> <name pos:start="57:24" pos:end="57:33">filterSize</name></expr>]</index></name> <operator pos:start="57:36" pos:end="57:36">=</operator> <name pos:start="57:38" pos:end="57:41">fone</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:39"><expr pos:start="59:13" pos:end="59:38"><operator pos:start="59:13" pos:end="59:13">(</operator><operator pos:start="59:14" pos:end="59:14">*</operator><name pos:start="59:15" pos:end="59:23">filterPos</name><operator pos:start="59:24" pos:end="59:24">)</operator><index pos:start="59:25" pos:end="59:27">[<expr pos:start="59:26" pos:end="59:26"><name pos:start="59:26" pos:end="59:26">i</name></expr>]</index>        <operator pos:start="59:36" pos:end="59:36">=</operator> <name pos:start="59:38" pos:end="59:38">i</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="63:7" pos:end="93:5">else if <condition pos:start="63:15" pos:end="63:33">(<expr pos:start="63:16" pos:end="63:32"><name pos:start="63:16" pos:end="63:20">flags</name> <operator pos:start="63:22" pos:end="63:22">&amp;</operator> <name pos:start="63:24" pos:end="63:32">SWS_POINT</name></expr>)</condition> <block pos:start="63:35" pos:end="93:5">{<block_content pos:start="65:9" pos:end="91:9"> <comment type="line" pos:start="63:37" pos:end="63:71">// lame looking point sampling mode</comment>

        <decl_stmt pos:start="65:9" pos:end="65:14"><decl pos:start="65:9" pos:end="65:13"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:26"><decl pos:start="67:9" pos:end="67:25"><type pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:15">int64_t</name></type> <name pos:start="67:17" pos:end="67:25">xDstInSrc</name></decl>;</decl_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:18">filterSize</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="73:73"><expr pos:start="71:9" pos:end="73:72"><call pos:start="71:9" pos:end="73:72"><name pos:start="71:9" pos:end="71:30">FF_ALLOC_ARRAY_OR_GOTO</name><argument_list pos:start="71:31" pos:end="73:72">(<argument pos:start="71:32" pos:end="71:35"><expr pos:start="71:32" pos:end="71:35"><name pos:start="71:32" pos:end="71:35">NULL</name></expr></argument>, <argument pos:start="71:38" pos:end="71:43"><expr pos:start="71:38" pos:end="71:43"><name pos:start="71:38" pos:end="71:43">filter</name></expr></argument>,

                               <argument pos:start="73:32" pos:end="73:35"><expr pos:start="73:32" pos:end="73:35"><name pos:start="73:32" pos:end="73:35">dstW</name></expr></argument>, <argument pos:start="73:38" pos:end="73:65"><expr pos:start="73:38" pos:end="73:65"><sizeof pos:start="73:38" pos:end="73:52">sizeof<argument_list pos:start="73:44" pos:end="73:52">(<argument pos:start="73:45" pos:end="73:51"><expr pos:start="73:45" pos:end="73:51"><operator pos:start="73:45" pos:end="73:45">*</operator><name pos:start="73:46" pos:end="73:51">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="73:54" pos:end="73:54">*</operator> <name pos:start="73:56" pos:end="73:65">filterSize</name></expr></argument>, <argument pos:start="73:68" pos:end="73:71"><expr pos:start="73:68" pos:end="73:71"><name pos:start="73:68" pos:end="73:71">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:73"><expr pos:start="77:9" pos:end="77:72"><name pos:start="77:9" pos:end="77:17">xDstInSrc</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <operator pos:start="77:21" pos:end="77:21">(</operator><operator pos:start="77:22" pos:end="77:22">(</operator><name pos:start="77:23" pos:end="77:28">dstPos</name><operator pos:start="77:29" pos:end="77:29">*</operator><operator pos:start="77:30" pos:end="77:30">(</operator><name pos:start="77:31" pos:end="77:37">int64_t</name><operator pos:start="77:38" pos:end="77:38">)</operator><name pos:start="77:39" pos:end="77:42">xInc</name><operator pos:start="77:43" pos:end="77:43">)</operator><operator pos:start="77:44" pos:end="77:45">&gt;&gt;</operator><literal type="number" pos:start="77:46" pos:end="77:46">8</literal><operator pos:start="77:47" pos:end="77:47">)</operator> <operator pos:start="77:49" pos:end="77:49">-</operator> <operator pos:start="77:51" pos:end="77:51">(</operator><operator pos:start="77:52" pos:end="77:52">(</operator><name pos:start="77:53" pos:end="77:58">srcPos</name><operator pos:start="77:59" pos:end="77:59">*</operator><literal type="number" pos:start="77:60" pos:end="77:67">0x8000LL</literal><operator pos:start="77:68" pos:end="77:68">)</operator><operator pos:start="77:69" pos:end="77:70">&gt;&gt;</operator><literal type="number" pos:start="77:71" pos:end="77:71">7</literal><operator pos:start="77:72" pos:end="77:72">)</operator></expr>;</expr_stmt>

        <for pos:start="79:9" pos:end="91:9">for <control pos:start="79:13" pos:end="79:34">(<init pos:start="79:14" pos:end="79:19"><expr pos:start="79:14" pos:end="79:18"><name pos:start="79:14" pos:end="79:14">i</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <literal type="number" pos:start="79:18" pos:end="79:18">0</literal></expr>;</init> <condition pos:start="79:21" pos:end="79:29"><expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:21">i</name> <operator pos:start="79:23" pos:end="79:23">&lt;</operator> <name pos:start="79:25" pos:end="79:28">dstW</name></expr>;</condition> <incr pos:start="79:31" pos:end="79:33"><expr pos:start="79:31" pos:end="79:33"><name pos:start="79:31" pos:end="79:31">i</name><operator pos:start="79:32" pos:end="79:33">++</operator></expr></incr>)</control> <block pos:start="79:36" pos:end="91:9">{<block_content pos:start="81:13" pos:end="89:35">

            <decl_stmt pos:start="81:13" pos:end="81:78"><decl pos:start="81:13" pos:end="81:77"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:18">xx</name> <init pos:start="81:20" pos:end="81:77">= <expr pos:start="81:22" pos:end="81:77"><operator pos:start="81:22" pos:end="81:22">(</operator><name pos:start="81:23" pos:end="81:31">xDstInSrc</name> <operator pos:start="81:33" pos:end="81:33">-</operator> <operator pos:start="81:35" pos:end="81:35">(</operator><operator pos:start="81:36" pos:end="81:36">(</operator><name pos:start="81:37" pos:end="81:46">filterSize</name> <operator pos:start="81:48" pos:end="81:48">-</operator> <literal type="number" pos:start="81:50" pos:end="81:50">1</literal><operator pos:start="81:51" pos:end="81:51">)</operator> <operator pos:start="81:53" pos:end="81:54">&lt;&lt;</operator> <literal type="number" pos:start="81:56" pos:end="81:57">15</literal><operator pos:start="81:58" pos:end="81:58">)</operator> <operator pos:start="81:60" pos:end="81:60">+</operator> <operator pos:start="81:62" pos:end="81:62">(</operator><literal type="number" pos:start="81:63" pos:end="81:63">1</literal> <operator pos:start="81:65" pos:end="81:66">&lt;&lt;</operator> <literal type="number" pos:start="81:68" pos:end="81:69">15</literal><operator pos:start="81:70" pos:end="81:70">)</operator><operator pos:start="81:71" pos:end="81:71">)</operator> <operator pos:start="81:73" pos:end="81:74">&gt;&gt;</operator> <literal type="number" pos:start="81:76" pos:end="81:77">16</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:33"><expr pos:start="85:13" pos:end="85:32"><operator pos:start="85:13" pos:end="85:13">(</operator><operator pos:start="85:14" pos:end="85:14">*</operator><name pos:start="85:15" pos:end="85:23">filterPos</name><operator pos:start="85:24" pos:end="85:24">)</operator><index pos:start="85:25" pos:end="85:27">[<expr pos:start="85:26" pos:end="85:26"><name pos:start="85:26" pos:end="85:26">i</name></expr>]</index> <operator pos:start="85:29" pos:end="85:29">=</operator> <name pos:start="85:31" pos:end="85:32">xx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:18">filter</name><index pos:start="87:19" pos:end="87:21">[<expr pos:start="87:20" pos:end="87:20"><name pos:start="87:20" pos:end="87:20">i</name></expr>]</index></name>       <operator pos:start="87:29" pos:end="87:29">=</operator> <name pos:start="87:31" pos:end="87:34">fone</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:21">xDstInSrc</name>      <operator pos:start="89:28" pos:end="89:29">+=</operator> <name pos:start="89:31" pos:end="89:34">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="93:7" pos:end="141:5">else if <condition pos:start="93:15" pos:end="95:43">(<expr pos:start="93:16" pos:end="95:42"><operator pos:start="93:16" pos:end="93:16">(</operator><name pos:start="93:17" pos:end="93:20">xInc</name> <operator pos:start="93:22" pos:end="93:23">&lt;=</operator> <operator pos:start="93:25" pos:end="93:25">(</operator><literal type="number" pos:start="93:26" pos:end="93:26">1</literal> <operator pos:start="93:28" pos:end="93:29">&lt;&lt;</operator> <literal type="number" pos:start="93:31" pos:end="93:32">16</literal><operator pos:start="93:33" pos:end="93:33">)</operator> <operator pos:start="93:35" pos:end="93:36">&amp;&amp;</operator> <operator pos:start="93:38" pos:end="93:38">(</operator><name pos:start="93:39" pos:end="93:43">flags</name> <operator pos:start="93:45" pos:end="93:45">&amp;</operator> <name pos:start="93:47" pos:end="93:54">SWS_AREA</name><operator pos:start="93:55" pos:end="93:55">)</operator><operator pos:start="93:56" pos:end="93:56">)</operator> <operator pos:start="93:58" pos:end="93:59">||</operator>

               <operator pos:start="95:16" pos:end="95:16">(</operator><name pos:start="95:17" pos:end="95:21">flags</name> <operator pos:start="95:23" pos:end="95:23">&amp;</operator> <name pos:start="95:25" pos:end="95:41">SWS_FAST_BILINEAR</name><operator pos:start="95:42" pos:end="95:42">)</operator></expr>)</condition> <block pos:start="95:45" pos:end="141:5">{<block_content pos:start="97:9" pos:end="139:9"> <comment type="line" pos:start="95:47" pos:end="95:65">// bilinear upscale</comment>

        <decl_stmt pos:start="97:9" pos:end="97:14"><decl pos:start="97:9" pos:end="97:13"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="99:9" pos:end="99:26"><decl pos:start="99:9" pos:end="99:25"><type pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:15">int64_t</name></type> <name pos:start="99:17" pos:end="99:25">xDstInSrc</name></decl>;</decl_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:23"><expr pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:18">filterSize</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="105:73"><expr pos:start="103:9" pos:end="105:72"><call pos:start="103:9" pos:end="105:72"><name pos:start="103:9" pos:end="103:30">FF_ALLOC_ARRAY_OR_GOTO</name><argument_list pos:start="103:31" pos:end="105:72">(<argument pos:start="103:32" pos:end="103:35"><expr pos:start="103:32" pos:end="103:35"><name pos:start="103:32" pos:end="103:35">NULL</name></expr></argument>, <argument pos:start="103:38" pos:end="103:43"><expr pos:start="103:38" pos:end="103:43"><name pos:start="103:38" pos:end="103:43">filter</name></expr></argument>,

                               <argument pos:start="105:32" pos:end="105:35"><expr pos:start="105:32" pos:end="105:35"><name pos:start="105:32" pos:end="105:35">dstW</name></expr></argument>, <argument pos:start="105:38" pos:end="105:65"><expr pos:start="105:38" pos:end="105:65"><sizeof pos:start="105:38" pos:end="105:52">sizeof<argument_list pos:start="105:44" pos:end="105:52">(<argument pos:start="105:45" pos:end="105:51"><expr pos:start="105:45" pos:end="105:51"><operator pos:start="105:45" pos:end="105:45">*</operator><name pos:start="105:46" pos:end="105:51">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="105:54" pos:end="105:54">*</operator> <name pos:start="105:56" pos:end="105:65">filterSize</name></expr></argument>, <argument pos:start="105:68" pos:end="105:71"><expr pos:start="105:68" pos:end="105:71"><name pos:start="105:68" pos:end="105:71">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:73"><expr pos:start="109:9" pos:end="109:72"><name pos:start="109:9" pos:end="109:17">xDstInSrc</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <operator pos:start="109:21" pos:end="109:21">(</operator><operator pos:start="109:22" pos:end="109:22">(</operator><name pos:start="109:23" pos:end="109:28">dstPos</name><operator pos:start="109:29" pos:end="109:29">*</operator><operator pos:start="109:30" pos:end="109:30">(</operator><name pos:start="109:31" pos:end="109:37">int64_t</name><operator pos:start="109:38" pos:end="109:38">)</operator><name pos:start="109:39" pos:end="109:42">xInc</name><operator pos:start="109:43" pos:end="109:43">)</operator><operator pos:start="109:44" pos:end="109:45">&gt;&gt;</operator><literal type="number" pos:start="109:46" pos:end="109:46">8</literal><operator pos:start="109:47" pos:end="109:47">)</operator> <operator pos:start="109:49" pos:end="109:49">-</operator> <operator pos:start="109:51" pos:end="109:51">(</operator><operator pos:start="109:52" pos:end="109:52">(</operator><name pos:start="109:53" pos:end="109:58">srcPos</name><operator pos:start="109:59" pos:end="109:59">*</operator><literal type="number" pos:start="109:60" pos:end="109:67">0x8000LL</literal><operator pos:start="109:68" pos:end="109:68">)</operator><operator pos:start="109:69" pos:end="109:70">&gt;&gt;</operator><literal type="number" pos:start="109:71" pos:end="109:71">7</literal><operator pos:start="109:72" pos:end="109:72">)</operator></expr>;</expr_stmt>

        <for pos:start="111:9" pos:end="139:9">for <control pos:start="111:13" pos:end="111:34">(<init pos:start="111:14" pos:end="111:19"><expr pos:start="111:14" pos:end="111:18"><name pos:start="111:14" pos:end="111:14">i</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">0</literal></expr>;</init> <condition pos:start="111:21" pos:end="111:29"><expr pos:start="111:21" pos:end="111:28"><name pos:start="111:21" pos:end="111:21">i</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <name pos:start="111:25" pos:end="111:28">dstW</name></expr>;</condition> <incr pos:start="111:31" pos:end="111:33"><expr pos:start="111:31" pos:end="111:33"><name pos:start="111:31" pos:end="111:31">i</name><operator pos:start="111:32" pos:end="111:33">++</operator></expr></incr>)</control> <block pos:start="111:36" pos:end="139:9">{<block_content pos:start="113:13" pos:end="137:30">

            <decl_stmt pos:start="113:13" pos:end="113:78"><decl pos:start="113:13" pos:end="113:77"><type pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">int</name></type> <name pos:start="113:17" pos:end="113:18">xx</name> <init pos:start="113:20" pos:end="113:77">= <expr pos:start="113:22" pos:end="113:77"><operator pos:start="113:22" pos:end="113:22">(</operator><name pos:start="113:23" pos:end="113:31">xDstInSrc</name> <operator pos:start="113:33" pos:end="113:33">-</operator> <operator pos:start="113:35" pos:end="113:35">(</operator><operator pos:start="113:36" pos:end="113:36">(</operator><name pos:start="113:37" pos:end="113:46">filterSize</name> <operator pos:start="113:48" pos:end="113:48">-</operator> <literal type="number" pos:start="113:50" pos:end="113:50">1</literal><operator pos:start="113:51" pos:end="113:51">)</operator> <operator pos:start="113:53" pos:end="113:54">&lt;&lt;</operator> <literal type="number" pos:start="113:56" pos:end="113:57">15</literal><operator pos:start="113:58" pos:end="113:58">)</operator> <operator pos:start="113:60" pos:end="113:60">+</operator> <operator pos:start="113:62" pos:end="113:62">(</operator><literal type="number" pos:start="113:63" pos:end="113:63">1</literal> <operator pos:start="113:65" pos:end="113:66">&lt;&lt;</operator> <literal type="number" pos:start="113:68" pos:end="113:69">15</literal><operator pos:start="113:70" pos:end="113:70">)</operator><operator pos:start="113:71" pos:end="113:71">)</operator> <operator pos:start="113:73" pos:end="113:74">&gt;&gt;</operator> <literal type="number" pos:start="113:76" pos:end="113:77">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="115:13" pos:end="115:18"><decl pos:start="115:13" pos:end="115:17"><type pos:start="115:13" pos:end="115:15"><name pos:start="115:13" pos:end="115:15">int</name></type> <name pos:start="115:17" pos:end="115:17">j</name></decl>;</decl_stmt>



            <expr_stmt pos:start="119:13" pos:end="119:33"><expr pos:start="119:13" pos:end="119:32"><operator pos:start="119:13" pos:end="119:13">(</operator><operator pos:start="119:14" pos:end="119:14">*</operator><name pos:start="119:15" pos:end="119:23">filterPos</name><operator pos:start="119:24" pos:end="119:24">)</operator><index pos:start="119:25" pos:end="119:27">[<expr pos:start="119:26" pos:end="119:26"><name pos:start="119:26" pos:end="119:26">i</name></expr>]</index> <operator pos:start="119:29" pos:end="119:29">=</operator> <name pos:start="119:31" pos:end="119:32">xx</name></expr>;</expr_stmt>

            <comment type="line" pos:start="121:13" pos:end="121:69">// bilinear upscale / linear interpolate / area averaging</comment>

            <for pos:start="123:13" pos:end="135:13">for <control pos:start="123:17" pos:end="123:44">(<init pos:start="123:18" pos:end="123:23"><expr pos:start="123:18" pos:end="123:22"><name pos:start="123:18" pos:end="123:18">j</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <literal type="number" pos:start="123:22" pos:end="123:22">0</literal></expr>;</init> <condition pos:start="123:25" pos:end="123:39"><expr pos:start="123:25" pos:end="123:38"><name pos:start="123:25" pos:end="123:25">j</name> <operator pos:start="123:27" pos:end="123:27">&lt;</operator> <name pos:start="123:29" pos:end="123:38">filterSize</name></expr>;</condition> <incr pos:start="123:41" pos:end="123:43"><expr pos:start="123:41" pos:end="123:43"><name pos:start="123:41" pos:end="123:41">j</name><operator pos:start="123:42" pos:end="123:43">++</operator></expr></incr>)</control> <block pos:start="123:46" pos:end="135:13">{<block_content pos:start="125:17" pos:end="133:21">

                <decl_stmt pos:start="125:17" pos:end="125:86"><decl pos:start="125:17" pos:end="125:85"><type pos:start="125:17" pos:end="125:23"><name pos:start="125:17" pos:end="125:23">int64_t</name></type> <name pos:start="125:25" pos:end="125:29">coeff</name><init pos:start="125:30" pos:end="125:85">= <expr pos:start="125:32" pos:end="125:85"><name pos:start="125:32" pos:end="125:35">fone</name> <operator pos:start="125:37" pos:end="125:37">-</operator> <call pos:start="125:39" pos:end="125:74"><name pos:start="125:39" pos:end="125:43">FFABS</name><argument_list pos:start="125:44" pos:end="125:74">(<argument pos:start="125:45" pos:end="125:73"><expr pos:start="125:45" pos:end="125:73"><operator pos:start="125:45" pos:end="125:45">(</operator><operator pos:start="125:46" pos:end="125:46">(</operator><name pos:start="125:47" pos:end="125:53">int64_t</name><operator pos:start="125:54" pos:end="125:54">)</operator><name pos:start="125:55" pos:end="125:56">xx</name><operator pos:start="125:57" pos:end="125:58">&lt;&lt;</operator><literal type="number" pos:start="125:59" pos:end="125:60">16</literal><operator pos:start="125:61" pos:end="125:61">)</operator> <operator pos:start="125:63" pos:end="125:63">-</operator> <name pos:start="125:65" pos:end="125:73">xDstInSrc</name></expr></argument>)</argument_list></call><operator pos:start="125:75" pos:end="125:75">*</operator><operator pos:start="125:76" pos:end="125:76">(</operator><name pos:start="125:77" pos:end="125:80">fone</name><operator pos:start="125:81" pos:end="125:82">&gt;&gt;</operator><literal type="number" pos:start="125:83" pos:end="125:84">16</literal><operator pos:start="125:85" pos:end="125:85">)</operator></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="127:17" pos:end="129:30"><if pos:start="127:17" pos:end="129:30">if <condition pos:start="127:20" pos:end="127:30">(<expr pos:start="127:21" pos:end="127:29"><name pos:start="127:21" pos:end="127:25">coeff</name> <operator pos:start="127:27" pos:end="127:27">&lt;</operator> <literal type="number" pos:start="127:29" pos:end="127:29">0</literal></expr>)</condition><block type="pseudo" pos:start="129:21" pos:end="129:30"><block_content pos:start="129:21" pos:end="129:30">

                    <expr_stmt pos:start="129:21" pos:end="129:30"><expr pos:start="129:21" pos:end="129:29"><name pos:start="129:21" pos:end="129:25">coeff</name> <operator pos:start="129:27" pos:end="129:27">=</operator> <literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:51"><expr pos:start="131:17" pos:end="131:50"><name pos:start="131:17" pos:end="131:42"><name pos:start="131:17" pos:end="131:22">filter</name><index pos:start="131:23" pos:end="131:42">[<expr pos:start="131:24" pos:end="131:41"><name pos:start="131:24" pos:end="131:24">i</name> <operator pos:start="131:26" pos:end="131:26">*</operator> <name pos:start="131:28" pos:end="131:37">filterSize</name> <operator pos:start="131:39" pos:end="131:39">+</operator> <name pos:start="131:41" pos:end="131:41">j</name></expr>]</index></name> <operator pos:start="131:44" pos:end="131:44">=</operator> <name pos:start="131:46" pos:end="131:50">coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:21"><expr pos:start="133:17" pos:end="133:20"><name pos:start="133:17" pos:end="133:18">xx</name><operator pos:start="133:19" pos:end="133:20">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="137:13" pos:end="137:30"><expr pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:21">xDstInSrc</name> <operator pos:start="137:23" pos:end="137:24">+=</operator> <name pos:start="137:26" pos:end="137:29">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="377:5">else <block pos:start="141:12" pos:end="377:5">{<block_content pos:start="143:9" pos:end="375:9">

        <decl_stmt pos:start="143:9" pos:end="143:26"><decl pos:start="143:9" pos:end="143:25"><type pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:15">int64_t</name></type> <name pos:start="143:17" pos:end="143:25">xDstInSrc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="145:28"><decl pos:start="145:9" pos:end="145:27"><type pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">int</name></type> <name pos:start="145:13" pos:end="145:22">sizeFactor</name> <init pos:start="145:24" pos:end="145:27">= <expr pos:start="145:26" pos:end="145:27"><operator pos:start="145:26" pos:end="145:26">-</operator><literal type="number" pos:start="145:27" pos:end="145:27">1</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="149:9" pos:end="159:9">for <control pos:start="149:13" pos:end="149:62">(<init pos:start="149:14" pos:end="149:19"><expr pos:start="149:14" pos:end="149:18"><name pos:start="149:14" pos:end="149:14">i</name> <operator pos:start="149:16" pos:end="149:16">=</operator> <literal type="number" pos:start="149:18" pos:end="149:18">0</literal></expr>;</init> <condition pos:start="149:21" pos:end="149:57"><expr pos:start="149:21" pos:end="149:56"><name pos:start="149:21" pos:end="149:21">i</name> <operator pos:start="149:23" pos:end="149:23">&lt;</operator> <call pos:start="149:25" pos:end="149:56"><name pos:start="149:25" pos:end="149:38">FF_ARRAY_ELEMS</name><argument_list pos:start="149:39" pos:end="149:56">(<argument pos:start="149:40" pos:end="149:55"><expr pos:start="149:40" pos:end="149:55"><name pos:start="149:40" pos:end="149:55">scale_algorithms</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="149:59" pos:end="149:61"><expr pos:start="149:59" pos:end="149:61"><name pos:start="149:59" pos:end="149:59">i</name><operator pos:start="149:60" pos:end="149:61">++</operator></expr></incr>)</control> <block pos:start="149:64" pos:end="159:9">{<block_content pos:start="151:13" pos:end="157:13">

            <if_stmt pos:start="151:13" pos:end="157:13"><if pos:start="151:13" pos:end="157:13">if <condition pos:start="151:16" pos:end="151:88">(<expr pos:start="151:17" pos:end="151:87"><name pos:start="151:17" pos:end="151:21">flags</name> <operator pos:start="151:23" pos:end="151:23">&amp;</operator> <name pos:start="151:25" pos:end="151:43"><name pos:start="151:25" pos:end="151:40">scale_algorithms</name><index pos:start="151:41" pos:end="151:43">[<expr pos:start="151:42" pos:end="151:42"><name pos:start="151:42" pos:end="151:42">i</name></expr>]</index></name><operator pos:start="151:44" pos:end="151:44">.</operator><name pos:start="151:45" pos:end="151:48">flag</name> <operator pos:start="151:50" pos:end="151:51">&amp;&amp;</operator> <name pos:start="151:53" pos:end="151:71"><name pos:start="151:53" pos:end="151:68">scale_algorithms</name><index pos:start="151:69" pos:end="151:71">[<expr pos:start="151:70" pos:end="151:70"><name pos:start="151:70" pos:end="151:70">i</name></expr>]</index></name><operator pos:start="151:72" pos:end="151:72">.</operator><name pos:start="151:73" pos:end="151:83">size_factor</name> <operator pos:start="151:85" pos:end="151:85">&gt;</operator> <literal type="number" pos:start="151:87" pos:end="151:87">0</literal></expr>)</condition> <block pos:start="151:90" pos:end="157:13">{<block_content pos:start="153:17" pos:end="155:22">

                <expr_stmt pos:start="153:17" pos:end="153:61"><expr pos:start="153:17" pos:end="153:60"><name pos:start="153:17" pos:end="153:26">sizeFactor</name> <operator pos:start="153:28" pos:end="153:28">=</operator> <name pos:start="153:30" pos:end="153:48"><name pos:start="153:30" pos:end="153:45">scale_algorithms</name><index pos:start="153:46" pos:end="153:48">[<expr pos:start="153:47" pos:end="153:47"><name pos:start="153:47" pos:end="153:47">i</name></expr>]</index></name><operator pos:start="153:49" pos:end="153:49">.</operator><name pos:start="153:50" pos:end="153:60">size_factor</name></expr>;</expr_stmt>

                <break pos:start="155:17" pos:end="155:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="161:9" pos:end="163:80"><if pos:start="161:9" pos:end="163:80">if <condition pos:start="161:12" pos:end="161:32">(<expr pos:start="161:13" pos:end="161:31"><name pos:start="161:13" pos:end="161:17">flags</name> <operator pos:start="161:19" pos:end="161:19">&amp;</operator> <name pos:start="161:21" pos:end="161:31">SWS_LANCZOS</name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:80"><block_content pos:start="163:13" pos:end="163:80">

            <expr_stmt pos:start="163:13" pos:end="163:80"><expr pos:start="163:13" pos:end="163:79"><name pos:start="163:13" pos:end="163:22">sizeFactor</name> <operator pos:start="163:24" pos:end="163:24">=</operator> <ternary pos:start="163:26" pos:end="163:79"><condition pos:start="163:26" pos:end="163:56"><expr pos:start="163:26" pos:end="163:54"><name pos:start="163:26" pos:end="163:33"><name pos:start="163:26" pos:end="163:30">param</name><index pos:start="163:31" pos:end="163:33">[<expr pos:start="163:32" pos:end="163:32"><literal type="number" pos:start="163:32" pos:end="163:32">0</literal></expr>]</index></name> <operator pos:start="163:35" pos:end="163:36">!=</operator> <name pos:start="163:38" pos:end="163:54">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="163:58" pos:end="163:75"> <expr pos:start="163:58" pos:end="163:75"><call pos:start="163:58" pos:end="163:75"><name pos:start="163:58" pos:end="163:61">ceil</name><argument_list pos:start="163:62" pos:end="163:75">(<argument pos:start="163:63" pos:end="163:74"><expr pos:start="163:63" pos:end="163:74"><literal type="number" pos:start="163:63" pos:end="163:63">2</literal> <operator pos:start="163:65" pos:end="163:65">*</operator> <name pos:start="163:67" pos:end="163:74"><name pos:start="163:67" pos:end="163:71">param</name><index pos:start="163:72" pos:end="163:74">[<expr pos:start="163:73" pos:end="163:73"><literal type="number" pos:start="163:73" pos:end="163:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="163:77" pos:end="163:79">: <expr pos:start="163:79" pos:end="163:79"><literal type="number" pos:start="163:79" pos:end="163:79">6</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:35"><expr pos:start="165:9" pos:end="165:34"><call pos:start="165:9" pos:end="165:34"><name pos:start="165:9" pos:end="165:18">av_assert0</name><argument_list pos:start="165:19" pos:end="165:34">(<argument pos:start="165:20" pos:end="165:33"><expr pos:start="165:20" pos:end="165:33"><name pos:start="165:20" pos:end="165:29">sizeFactor</name> <operator pos:start="165:31" pos:end="165:31">&gt;</operator> <literal type="number" pos:start="165:33" pos:end="165:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="169:9" pos:end="175:67"><if pos:start="169:9" pos:end="171:40">if <condition pos:start="169:12" pos:end="169:28">(<expr pos:start="169:13" pos:end="169:27"><name pos:start="169:13" pos:end="169:16">xInc</name> <operator pos:start="169:18" pos:end="169:19">&lt;=</operator> <literal type="number" pos:start="169:21" pos:end="169:21">1</literal> <operator pos:start="169:23" pos:end="169:24">&lt;&lt;</operator> <literal type="number" pos:start="169:26" pos:end="169:27">16</literal></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:40"><block_content pos:start="171:13" pos:end="171:40">

            <expr_stmt pos:start="171:13" pos:end="171:40"><expr pos:start="171:13" pos:end="171:39"><name pos:start="171:13" pos:end="171:22">filterSize</name> <operator pos:start="171:24" pos:end="171:24">=</operator> <literal type="number" pos:start="171:26" pos:end="171:28">1</literal> <operator pos:start="171:28" pos:end="171:28">+</operator> <name pos:start="171:30" pos:end="171:39">sizeFactor</name></expr>;</expr_stmt></block_content></block></if>    <comment type="line" pos:start="171:45" pos:end="171:54">// upscale</comment>

        <else pos:start="173:9" pos:end="175:67">else<block type="pseudo" pos:start="175:13" pos:end="175:67"><block_content pos:start="175:13" pos:end="175:67">

            <expr_stmt pos:start="175:13" pos:end="175:67"><expr pos:start="175:13" pos:end="175:66"><name pos:start="175:13" pos:end="175:22">filterSize</name> <operator pos:start="175:24" pos:end="175:24">=</operator> <literal type="number" pos:start="175:26" pos:end="175:28">1</literal> <operator pos:start="175:28" pos:end="175:28">+</operator> <operator pos:start="175:30" pos:end="175:30">(</operator><name pos:start="175:31" pos:end="175:40">sizeFactor</name> <operator pos:start="175:42" pos:end="175:42">*</operator> <name pos:start="175:44" pos:end="175:47">srcW</name> <operator pos:start="175:49" pos:end="175:49">+</operator> <name pos:start="175:51" pos:end="175:54">dstW</name> <operator pos:start="175:56" pos:end="175:56">-</operator> <literal type="number" pos:start="175:58" pos:end="175:58">1</literal><operator pos:start="175:59" pos:end="175:59">)</operator> <operator pos:start="175:61" pos:end="175:61">/</operator> <name pos:start="175:63" pos:end="175:66">dstW</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:49"><expr pos:start="179:9" pos:end="179:48"><name pos:start="179:9" pos:end="179:18">filterSize</name> <operator pos:start="179:20" pos:end="179:20">=</operator> <call pos:start="179:22" pos:end="179:48"><name pos:start="179:22" pos:end="179:26">FFMIN</name><argument_list pos:start="179:27" pos:end="179:48">(<argument pos:start="179:28" pos:end="179:37"><expr pos:start="179:28" pos:end="179:37"><name pos:start="179:28" pos:end="179:37">filterSize</name></expr></argument>, <argument pos:start="179:40" pos:end="179:47"><expr pos:start="179:40" pos:end="179:47"><name pos:start="179:40" pos:end="179:43">srcW</name> <operator pos:start="179:45" pos:end="179:45">-</operator> <literal type="number" pos:start="179:47" pos:end="179:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:42"><expr pos:start="181:9" pos:end="181:41"><name pos:start="181:9" pos:end="181:18">filterSize</name> <operator pos:start="181:20" pos:end="181:20">=</operator> <call pos:start="181:22" pos:end="181:41"><name pos:start="181:22" pos:end="181:26">FFMAX</name><argument_list pos:start="181:27" pos:end="181:41">(<argument pos:start="181:28" pos:end="181:37"><expr pos:start="181:28" pos:end="181:37"><name pos:start="181:28" pos:end="181:37">filterSize</name></expr></argument>, <argument pos:start="181:40" pos:end="181:40"><expr pos:start="181:40" pos:end="181:40"><literal type="number" pos:start="181:40" pos:end="181:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="185:9" pos:end="187:73"><expr pos:start="185:9" pos:end="187:72"><call pos:start="185:9" pos:end="187:72"><name pos:start="185:9" pos:end="185:30">FF_ALLOC_ARRAY_OR_GOTO</name><argument_list pos:start="185:31" pos:end="187:72">(<argument pos:start="185:32" pos:end="185:35"><expr pos:start="185:32" pos:end="185:35"><name pos:start="185:32" pos:end="185:35">NULL</name></expr></argument>, <argument pos:start="185:38" pos:end="185:43"><expr pos:start="185:38" pos:end="185:43"><name pos:start="185:38" pos:end="185:43">filter</name></expr></argument>,

                               <argument pos:start="187:32" pos:end="187:35"><expr pos:start="187:32" pos:end="187:35"><name pos:start="187:32" pos:end="187:35">dstW</name></expr></argument>, <argument pos:start="187:38" pos:end="187:65"><expr pos:start="187:38" pos:end="187:65"><sizeof pos:start="187:38" pos:end="187:52">sizeof<argument_list pos:start="187:44" pos:end="187:52">(<argument pos:start="187:45" pos:end="187:51"><expr pos:start="187:45" pos:end="187:51"><operator pos:start="187:45" pos:end="187:45">*</operator><name pos:start="187:46" pos:end="187:51">filter</name></expr></argument>)</argument_list></sizeof> <operator pos:start="187:54" pos:end="187:54">*</operator> <name pos:start="187:56" pos:end="187:65">filterSize</name></expr></argument>, <argument pos:start="187:68" pos:end="187:71"><expr pos:start="187:68" pos:end="187:71"><name pos:start="187:68" pos:end="187:71">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="191:9" pos:end="191:74"><expr pos:start="191:9" pos:end="191:73"><name pos:start="191:9" pos:end="191:17">xDstInSrc</name> <operator pos:start="191:19" pos:end="191:19">=</operator> <operator pos:start="191:21" pos:end="191:21">(</operator><operator pos:start="191:22" pos:end="191:22">(</operator><name pos:start="191:23" pos:end="191:28">dstPos</name><operator pos:start="191:29" pos:end="191:29">*</operator><operator pos:start="191:30" pos:end="191:30">(</operator><name pos:start="191:31" pos:end="191:37">int64_t</name><operator pos:start="191:38" pos:end="191:38">)</operator><name pos:start="191:39" pos:end="191:42">xInc</name><operator pos:start="191:43" pos:end="191:43">)</operator><operator pos:start="191:44" pos:end="191:45">&gt;&gt;</operator><literal type="number" pos:start="191:46" pos:end="191:46">7</literal><operator pos:start="191:47" pos:end="191:47">)</operator> <operator pos:start="191:49" pos:end="191:49">-</operator> <operator pos:start="191:51" pos:end="191:51">(</operator><operator pos:start="191:52" pos:end="191:52">(</operator><name pos:start="191:53" pos:end="191:58">srcPos</name><operator pos:start="191:59" pos:end="191:59">*</operator><literal type="number" pos:start="191:60" pos:end="191:68">0x10000LL</literal><operator pos:start="191:69" pos:end="191:69">)</operator><operator pos:start="191:70" pos:end="191:71">&gt;&gt;</operator><literal type="number" pos:start="191:72" pos:end="191:72">7</literal><operator pos:start="191:73" pos:end="191:73">)</operator></expr>;</expr_stmt>

        <for pos:start="193:9" pos:end="375:9">for <control pos:start="193:13" pos:end="193:34">(<init pos:start="193:14" pos:end="193:19"><expr pos:start="193:14" pos:end="193:18"><name pos:start="193:14" pos:end="193:14">i</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <literal type="number" pos:start="193:18" pos:end="193:18">0</literal></expr>;</init> <condition pos:start="193:21" pos:end="193:29"><expr pos:start="193:21" pos:end="193:28"><name pos:start="193:21" pos:end="193:21">i</name> <operator pos:start="193:23" pos:end="193:23">&lt;</operator> <name pos:start="193:25" pos:end="193:28">dstW</name></expr>;</condition> <incr pos:start="193:31" pos:end="193:33"><expr pos:start="193:31" pos:end="193:33"><name pos:start="193:31" pos:end="193:31">i</name><operator pos:start="193:32" pos:end="193:33">++</operator></expr></incr>)</control> <block pos:start="193:36" pos:end="375:9">{<block_content pos:start="195:13" pos:end="373:34">

            <decl_stmt pos:start="195:13" pos:end="195:81"><decl pos:start="195:13" pos:end="195:80"><type pos:start="195:13" pos:end="195:15"><name pos:start="195:13" pos:end="195:15">int</name></type> <name pos:start="195:17" pos:end="195:18">xx</name> <init pos:start="195:20" pos:end="195:80">= <expr pos:start="195:22" pos:end="195:80"><operator pos:start="195:22" pos:end="195:22">(</operator><name pos:start="195:23" pos:end="195:31">xDstInSrc</name> <operator pos:start="195:33" pos:end="195:33">-</operator> <operator pos:start="195:35" pos:end="195:35">(</operator><operator pos:start="195:36" pos:end="195:36">(</operator><name pos:start="195:37" pos:end="195:43">int64_t</name><operator pos:start="195:44" pos:end="195:44">)</operator><operator pos:start="195:45" pos:end="195:45">(</operator><name pos:start="195:46" pos:end="195:55">filterSize</name> <operator pos:start="195:57" pos:end="195:57">-</operator> <literal type="number" pos:start="195:59" pos:end="195:59">2</literal><operator pos:start="195:60" pos:end="195:60">)</operator> <operator pos:start="195:62" pos:end="195:63">&lt;&lt;</operator> <literal type="number" pos:start="195:65" pos:end="195:66">16</literal><operator pos:start="195:67" pos:end="195:67">)</operator><operator pos:start="195:68" pos:end="195:68">)</operator> <operator pos:start="195:70" pos:end="195:70">/</operator> <operator pos:start="195:72" pos:end="195:72">(</operator><literal type="number" pos:start="195:73" pos:end="195:73">1</literal> <operator pos:start="195:75" pos:end="195:76">&lt;&lt;</operator> <literal type="number" pos:start="195:78" pos:end="195:79">17</literal><operator pos:start="195:80" pos:end="195:80">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="197:13" pos:end="197:18"><decl pos:start="197:13" pos:end="197:17"><type pos:start="197:13" pos:end="197:15"><name pos:start="197:13" pos:end="197:15">int</name></type> <name pos:start="197:17" pos:end="197:17">j</name></decl>;</decl_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:33"><expr pos:start="199:13" pos:end="199:32"><operator pos:start="199:13" pos:end="199:13">(</operator><operator pos:start="199:14" pos:end="199:14">*</operator><name pos:start="199:15" pos:end="199:23">filterPos</name><operator pos:start="199:24" pos:end="199:24">)</operator><index pos:start="199:25" pos:end="199:27">[<expr pos:start="199:26" pos:end="199:26"><name pos:start="199:26" pos:end="199:26">i</name></expr>]</index> <operator pos:start="199:29" pos:end="199:29">=</operator> <name pos:start="199:31" pos:end="199:32">xx</name></expr>;</expr_stmt>

            <for pos:start="201:13" pos:end="371:13">for <control pos:start="201:17" pos:end="201:44">(<init pos:start="201:18" pos:end="201:23"><expr pos:start="201:18" pos:end="201:22"><name pos:start="201:18" pos:end="201:18">j</name> <operator pos:start="201:20" pos:end="201:20">=</operator> <literal type="number" pos:start="201:22" pos:end="201:22">0</literal></expr>;</init> <condition pos:start="201:25" pos:end="201:39"><expr pos:start="201:25" pos:end="201:38"><name pos:start="201:25" pos:end="201:25">j</name> <operator pos:start="201:27" pos:end="201:27">&lt;</operator> <name pos:start="201:29" pos:end="201:38">filterSize</name></expr>;</condition> <incr pos:start="201:41" pos:end="201:43"><expr pos:start="201:41" pos:end="201:43"><name pos:start="201:41" pos:end="201:41">j</name><operator pos:start="201:42" pos:end="201:43">++</operator></expr></incr>)</control> <block pos:start="201:46" pos:end="371:13">{<block_content pos:start="203:17" pos:end="369:21">

                <decl_stmt pos:start="203:17" pos:end="203:75"><decl pos:start="203:17" pos:end="203:74"><type pos:start="203:17" pos:end="203:23"><name pos:start="203:17" pos:end="203:23">int64_t</name></type> <name pos:start="203:25" pos:end="203:25">d</name> <init pos:start="203:27" pos:end="203:74">= <expr pos:start="203:29" pos:end="203:74"><operator pos:start="203:29" pos:end="203:29">(</operator><call pos:start="203:30" pos:end="203:67"><name pos:start="203:30" pos:end="203:34">FFABS</name><argument_list pos:start="203:35" pos:end="203:67">(<argument pos:start="203:36" pos:end="203:66"><expr pos:start="203:36" pos:end="203:66"><operator pos:start="203:36" pos:end="203:36">(</operator><operator pos:start="203:37" pos:end="203:37">(</operator><name pos:start="203:38" pos:end="203:44">int64_t</name><operator pos:start="203:45" pos:end="203:45">)</operator><name pos:start="203:46" pos:end="203:47">xx</name> <operator pos:start="203:49" pos:end="203:50">&lt;&lt;</operator> <literal type="number" pos:start="203:52" pos:end="203:53">17</literal><operator pos:start="203:54" pos:end="203:54">)</operator> <operator pos:start="203:56" pos:end="203:56">-</operator> <name pos:start="203:58" pos:end="203:66">xDstInSrc</name></expr></argument>)</argument_list></call><operator pos:start="203:68" pos:end="203:68">)</operator> <operator pos:start="203:70" pos:end="203:71">&lt;&lt;</operator> <literal type="number" pos:start="203:73" pos:end="203:74">13</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="205:17" pos:end="205:30"><decl pos:start="205:17" pos:end="205:29"><type pos:start="205:17" pos:end="205:22"><name pos:start="205:17" pos:end="205:22">double</name></type> <name pos:start="205:24" pos:end="205:29">floatd</name></decl>;</decl_stmt>

                <decl_stmt pos:start="207:17" pos:end="207:30"><decl pos:start="207:17" pos:end="207:29"><type pos:start="207:17" pos:end="207:23"><name pos:start="207:17" pos:end="207:23">int64_t</name></type> <name pos:start="207:25" pos:end="207:29">coeff</name></decl>;</decl_stmt>



                <if_stmt pos:start="211:17" pos:end="213:40"><if pos:start="211:17" pos:end="213:40">if <condition pos:start="211:20" pos:end="211:35">(<expr pos:start="211:21" pos:end="211:34"><name pos:start="211:21" pos:end="211:24">xInc</name> <operator pos:start="211:26" pos:end="211:26">&gt;</operator> <literal type="number" pos:start="211:28" pos:end="211:28">1</literal> <operator pos:start="211:30" pos:end="211:31">&lt;&lt;</operator> <literal type="number" pos:start="211:33" pos:end="211:34">16</literal></expr>)</condition><block type="pseudo" pos:start="213:21" pos:end="213:40"><block_content pos:start="213:21" pos:end="213:40">

                    <expr_stmt pos:start="213:21" pos:end="213:40"><expr pos:start="213:21" pos:end="213:39"><name pos:start="213:21" pos:end="213:21">d</name> <operator pos:start="213:23" pos:end="213:23">=</operator> <name pos:start="213:25" pos:end="213:25">d</name> <operator pos:start="213:27" pos:end="213:27">*</operator> <name pos:start="213:29" pos:end="213:32">dstW</name> <operator pos:start="213:34" pos:end="213:34">/</operator> <name pos:start="213:36" pos:end="213:39">srcW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:47"><expr pos:start="215:17" pos:end="215:46"><name pos:start="215:17" pos:end="215:22">floatd</name> <operator pos:start="215:24" pos:end="215:24">=</operator> <name pos:start="215:26" pos:end="215:26">d</name> <operator pos:start="215:28" pos:end="215:28">*</operator> <operator pos:start="215:30" pos:end="215:30">(</operator><literal type="number" pos:start="215:31" pos:end="215:33">1.0</literal> <operator pos:start="215:35" pos:end="215:35">/</operator> <operator pos:start="215:37" pos:end="215:37">(</operator><literal type="number" pos:start="215:38" pos:end="215:38">1</literal> <operator pos:start="215:40" pos:end="215:41">&lt;&lt;</operator> <literal type="number" pos:start="215:43" pos:end="215:44">30</literal><operator pos:start="215:45" pos:end="215:45">)</operator><operator pos:start="215:46" pos:end="215:46">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="219:17" pos:end="363:17"><if pos:start="219:17" pos:end="276:0">if <condition pos:start="219:20" pos:end="219:40">(<expr pos:start="219:21" pos:end="219:39"><name pos:start="219:21" pos:end="219:25">flags</name> <operator pos:start="219:27" pos:end="219:27">&amp;</operator> <name pos:start="219:29" pos:end="219:39">SWS_BICUBIC</name></expr>)</condition> <block pos:start="219:42" pos:end="276:0">{<block_content pos:start="221:21" pos:end="259:44">

                    <decl_stmt pos:start="221:21" pos:end="221:93"><decl pos:start="221:21" pos:end="221:92"><type pos:start="221:21" pos:end="221:27"><name pos:start="221:21" pos:end="221:27">int64_t</name></type> <name pos:start="221:29" pos:end="221:29">B</name> <init pos:start="221:31" pos:end="221:92">= <expr pos:start="221:33" pos:end="221:92"><operator pos:start="221:33" pos:end="221:33">(</operator><ternary pos:start="221:34" pos:end="221:79"><condition pos:start="221:34" pos:end="221:64"><expr pos:start="221:34" pos:end="221:62"><name pos:start="221:34" pos:end="221:41"><name pos:start="221:34" pos:end="221:38">param</name><index pos:start="221:39" pos:end="221:41">[<expr pos:start="221:40" pos:end="221:40"><literal type="number" pos:start="221:40" pos:end="221:40">0</literal></expr>]</index></name> <operator pos:start="221:43" pos:end="221:44">!=</operator> <name pos:start="221:46" pos:end="221:62">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="221:66" pos:end="221:73"> <expr pos:start="221:66" pos:end="221:73"><name pos:start="221:66" pos:end="221:73"><name pos:start="221:66" pos:end="221:70">param</name><index pos:start="221:71" pos:end="221:73">[<expr pos:start="221:72" pos:end="221:72"><literal type="number" pos:start="221:72" pos:end="221:72">0</literal></expr>]</index></name></expr> </then><else pos:start="221:75" pos:end="221:79">:   <expr pos:start="221:79" pos:end="221:79"><literal type="number" pos:start="221:79" pos:end="221:79">0</literal></expr></else></ternary><operator pos:start="221:80" pos:end="221:80">)</operator> <operator pos:start="221:82" pos:end="221:82">*</operator> <operator pos:start="221:84" pos:end="221:84">(</operator><literal type="number" pos:start="221:85" pos:end="221:85">1</literal> <operator pos:start="221:87" pos:end="221:88">&lt;&lt;</operator> <literal type="number" pos:start="221:90" pos:end="221:91">24</literal><operator pos:start="221:92" pos:end="221:92">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="223:21" pos:end="223:93"><decl pos:start="223:21" pos:end="223:92"><type pos:start="223:21" pos:end="223:27"><name pos:start="223:21" pos:end="223:27">int64_t</name></type> <name pos:start="223:29" pos:end="223:29">C</name> <init pos:start="223:31" pos:end="223:92">= <expr pos:start="223:33" pos:end="223:92"><operator pos:start="223:33" pos:end="223:33">(</operator><ternary pos:start="223:34" pos:end="223:79"><condition pos:start="223:34" pos:end="223:64"><expr pos:start="223:34" pos:end="223:62"><name pos:start="223:34" pos:end="223:41"><name pos:start="223:34" pos:end="223:38">param</name><index pos:start="223:39" pos:end="223:41">[<expr pos:start="223:40" pos:end="223:40"><literal type="number" pos:start="223:40" pos:end="223:40">1</literal></expr>]</index></name> <operator pos:start="223:43" pos:end="223:44">!=</operator> <name pos:start="223:46" pos:end="223:62">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="223:66" pos:end="223:73"> <expr pos:start="223:66" pos:end="223:73"><name pos:start="223:66" pos:end="223:73"><name pos:start="223:66" pos:end="223:70">param</name><index pos:start="223:71" pos:end="223:73">[<expr pos:start="223:72" pos:end="223:72"><literal type="number" pos:start="223:72" pos:end="223:72">1</literal></expr>]</index></name></expr> </then><else pos:start="223:75" pos:end="223:79">: <expr pos:start="223:77" pos:end="223:79"><literal type="number" pos:start="223:77" pos:end="223:79">0.6</literal></expr></else></ternary><operator pos:start="223:80" pos:end="223:80">)</operator> <operator pos:start="223:82" pos:end="223:82">*</operator> <operator pos:start="223:84" pos:end="223:84">(</operator><literal type="number" pos:start="223:85" pos:end="223:85">1</literal> <operator pos:start="223:87" pos:end="223:88">&lt;&lt;</operator> <literal type="number" pos:start="223:90" pos:end="223:91">24</literal><operator pos:start="223:92" pos:end="223:92">)</operator></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="227:21" pos:end="257:21"><if pos:start="227:21" pos:end="231:21">if <condition pos:start="227:24" pos:end="227:39">(<expr pos:start="227:25" pos:end="227:38"><name pos:start="227:25" pos:end="227:25">d</name> <operator pos:start="227:27" pos:end="227:28">&gt;=</operator> <literal type="number" pos:start="227:30" pos:end="227:32">1LL</literal> <operator pos:start="227:34" pos:end="227:35">&lt;&lt;</operator> <literal type="number" pos:start="227:37" pos:end="227:38">31</literal></expr>)</condition> <block pos:start="227:41" pos:end="231:21">{<block_content pos:start="229:25" pos:end="229:36">

                        <expr_stmt pos:start="229:25" pos:end="229:36"><expr pos:start="229:25" pos:end="229:35"><name pos:start="229:25" pos:end="229:29">coeff</name> <operator pos:start="229:31" pos:end="229:31">=</operator> <literal type="number" pos:start="229:33" pos:end="229:35">0.0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="231:23" pos:end="257:21">else <block pos:start="231:28" pos:end="257:21">{<block_content pos:start="233:25" pos:end="255:67">

                        <decl_stmt pos:start="233:25" pos:end="233:53"><decl pos:start="233:25" pos:end="233:52"><type pos:start="233:25" pos:end="233:31"><name pos:start="233:25" pos:end="233:31">int64_t</name></type> <name pos:start="233:33" pos:end="233:34">dd</name>  <init pos:start="233:37" pos:end="233:52">= <expr pos:start="233:39" pos:end="233:52"><operator pos:start="233:39" pos:end="233:39">(</operator><name pos:start="233:40" pos:end="233:40">d</name>  <operator pos:start="233:43" pos:end="233:43">*</operator> <name pos:start="233:45" pos:end="233:45">d</name><operator pos:start="233:46" pos:end="233:46">)</operator> <operator pos:start="233:48" pos:end="233:49">&gt;&gt;</operator> <literal type="number" pos:start="233:51" pos:end="233:52">30</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="235:25" pos:end="235:53"><decl pos:start="235:25" pos:end="235:52"><type pos:start="235:25" pos:end="235:31"><name pos:start="235:25" pos:end="235:31">int64_t</name></type> <name pos:start="235:33" pos:end="235:35">ddd</name> <init pos:start="235:37" pos:end="235:52">= <expr pos:start="235:39" pos:end="235:52"><operator pos:start="235:39" pos:end="235:39">(</operator><name pos:start="235:40" pos:end="235:41">dd</name> <operator pos:start="235:43" pos:end="235:43">*</operator> <name pos:start="235:45" pos:end="235:45">d</name><operator pos:start="235:46" pos:end="235:46">)</operator> <operator pos:start="235:48" pos:end="235:49">&gt;&gt;</operator> <literal type="number" pos:start="235:51" pos:end="235:52">30</literal></expr></init></decl>;</decl_stmt>



                        <if_stmt pos:start="239:25" pos:end="255:67"><if pos:start="239:25" pos:end="245:83">if <condition pos:start="239:28" pos:end="239:42">(<expr pos:start="239:29" pos:end="239:41"><name pos:start="239:29" pos:end="239:29">d</name> <operator pos:start="239:31" pos:end="239:31">&lt;</operator> <literal type="number" pos:start="239:33" pos:end="239:35">1LL</literal> <operator pos:start="239:37" pos:end="239:38">&lt;&lt;</operator> <literal type="number" pos:start="239:40" pos:end="239:41">30</literal></expr>)</condition><block type="pseudo" pos:start="241:29" pos:end="245:83"><block_content pos:start="241:29" pos:end="245:83">

                            <expr_stmt pos:start="241:29" pos:end="245:83"><expr pos:start="241:29" pos:end="245:82"><name pos:start="241:29" pos:end="241:33">coeff</name> <operator pos:start="241:35" pos:end="241:35">=</operator>  <operator pos:start="241:38" pos:end="241:38">(</operator><literal type="number" pos:start="241:39" pos:end="241:40">12</literal> <operator pos:start="241:42" pos:end="241:42">*</operator> <operator pos:start="241:44" pos:end="241:44">(</operator><literal type="number" pos:start="241:45" pos:end="241:45">1</literal> <operator pos:start="241:47" pos:end="241:48">&lt;&lt;</operator> <literal type="number" pos:start="241:50" pos:end="241:51">24</literal><operator pos:start="241:52" pos:end="241:52">)</operator> <operator pos:start="241:54" pos:end="241:54">-</operator>  <literal type="number" pos:start="241:57" pos:end="241:57">9</literal> <operator pos:start="241:59" pos:end="241:59">*</operator> <name pos:start="241:61" pos:end="241:61">B</name> <operator pos:start="241:63" pos:end="241:63">-</operator> <literal type="number" pos:start="241:65" pos:end="241:65">6</literal> <operator pos:start="241:67" pos:end="241:67">*</operator> <name pos:start="241:69" pos:end="241:69">C</name><operator pos:start="241:70" pos:end="241:70">)</operator> <operator pos:start="241:72" pos:end="241:72">*</operator> <name pos:start="241:74" pos:end="241:76">ddd</name> <operator pos:start="241:78" pos:end="241:78">+</operator>

                                    <operator pos:start="243:37" pos:end="243:37">(</operator><operator pos:start="243:38" pos:end="243:38">-</operator><literal type="number" pos:start="243:39" pos:end="243:40">18</literal> <operator pos:start="243:42" pos:end="243:42">*</operator> <operator pos:start="243:44" pos:end="243:44">(</operator><literal type="number" pos:start="243:45" pos:end="243:45">1</literal> <operator pos:start="243:47" pos:end="243:48">&lt;&lt;</operator> <literal type="number" pos:start="243:50" pos:end="243:51">24</literal><operator pos:start="243:52" pos:end="243:52">)</operator> <operator pos:start="243:54" pos:end="243:54">+</operator> <literal type="number" pos:start="243:56" pos:end="243:57">12</literal> <operator pos:start="243:59" pos:end="243:59">*</operator> <name pos:start="243:61" pos:end="243:61">B</name> <operator pos:start="243:63" pos:end="243:63">+</operator> <literal type="number" pos:start="243:65" pos:end="243:65">6</literal> <operator pos:start="243:67" pos:end="243:67">*</operator> <name pos:start="243:69" pos:end="243:69">C</name><operator pos:start="243:70" pos:end="243:70">)</operator> <operator pos:start="243:72" pos:end="243:72">*</operator>  <name pos:start="243:75" pos:end="243:76">dd</name> <operator pos:start="243:78" pos:end="243:78">+</operator>

                                      <operator pos:start="245:39" pos:end="245:39">(</operator><literal type="number" pos:start="245:40" pos:end="245:40">6</literal> <operator pos:start="245:42" pos:end="245:42">*</operator> <operator pos:start="245:44" pos:end="245:44">(</operator><literal type="number" pos:start="245:45" pos:end="245:45">1</literal> <operator pos:start="245:47" pos:end="245:48">&lt;&lt;</operator> <literal type="number" pos:start="245:50" pos:end="245:51">24</literal><operator pos:start="245:52" pos:end="245:52">)</operator> <operator pos:start="245:54" pos:end="245:54">-</operator>  <literal type="number" pos:start="245:57" pos:end="245:57">2</literal> <operator pos:start="245:59" pos:end="245:59">*</operator> <name pos:start="245:61" pos:end="245:61">B</name><operator pos:start="245:62" pos:end="245:62">)</operator>         <operator pos:start="245:72" pos:end="245:72">*</operator> <operator pos:start="245:74" pos:end="245:74">(</operator><literal type="number" pos:start="245:75" pos:end="245:75">1</literal> <operator pos:start="245:77" pos:end="245:78">&lt;&lt;</operator> <literal type="number" pos:start="245:80" pos:end="245:81">30</literal><operator pos:start="245:82" pos:end="245:82">)</operator></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="247:25" pos:end="255:67">else<block type="pseudo" pos:start="249:29" pos:end="255:67"><block_content pos:start="249:29" pos:end="255:67">

                            <expr_stmt pos:start="249:29" pos:end="255:67"><expr pos:start="249:29" pos:end="255:66"><name pos:start="249:29" pos:end="249:33">coeff</name> <operator pos:start="249:35" pos:end="249:35">=</operator>      <operator pos:start="249:42" pos:end="249:42">(</operator><operator pos:start="249:43" pos:end="249:43">-</operator><name pos:start="249:44" pos:end="249:44">B</name> <operator pos:start="249:46" pos:end="249:46">-</operator>  <literal type="number" pos:start="249:49" pos:end="249:49">6</literal> <operator pos:start="249:51" pos:end="249:51">*</operator> <name pos:start="249:53" pos:end="249:53">C</name><operator pos:start="249:54" pos:end="249:54">)</operator> <operator pos:start="249:56" pos:end="249:56">*</operator> <name pos:start="249:58" pos:end="249:60">ddd</name> <operator pos:start="249:62" pos:end="249:62">+</operator>

                                      <operator pos:start="251:39" pos:end="251:39">(</operator><literal type="number" pos:start="251:40" pos:end="251:40">6</literal> <operator pos:start="251:42" pos:end="251:42">*</operator> <name pos:start="251:44" pos:end="251:44">B</name> <operator pos:start="251:46" pos:end="251:46">+</operator> <literal type="number" pos:start="251:48" pos:end="251:49">30</literal> <operator pos:start="251:51" pos:end="251:51">*</operator> <name pos:start="251:53" pos:end="251:53">C</name><operator pos:start="251:54" pos:end="251:54">)</operator> <operator pos:start="251:56" pos:end="251:56">*</operator> <name pos:start="251:58" pos:end="251:59">dd</name>  <operator pos:start="251:62" pos:end="251:62">+</operator>

                                    <operator pos:start="253:37" pos:end="253:37">(</operator><operator pos:start="253:38" pos:end="253:38">-</operator><literal type="number" pos:start="253:39" pos:end="253:40">12</literal> <operator pos:start="253:42" pos:end="253:42">*</operator> <name pos:start="253:44" pos:end="253:44">B</name> <operator pos:start="253:46" pos:end="253:46">-</operator> <literal type="number" pos:start="253:48" pos:end="253:49">48</literal> <operator pos:start="253:51" pos:end="253:51">*</operator> <name pos:start="253:53" pos:end="253:53">C</name><operator pos:start="253:54" pos:end="253:54">)</operator> <operator pos:start="253:56" pos:end="253:56">*</operator> <name pos:start="253:58" pos:end="253:58">d</name>   <operator pos:start="253:62" pos:end="253:62">+</operator>

                                      <operator pos:start="255:39" pos:end="255:39">(</operator><literal type="number" pos:start="255:40" pos:end="255:40">8</literal> <operator pos:start="255:42" pos:end="255:42">*</operator> <name pos:start="255:44" pos:end="255:44">B</name> <operator pos:start="255:46" pos:end="255:46">+</operator> <literal type="number" pos:start="255:48" pos:end="255:49">24</literal> <operator pos:start="255:51" pos:end="255:51">*</operator> <name pos:start="255:53" pos:end="255:53">C</name><operator pos:start="255:54" pos:end="255:54">)</operator> <operator pos:start="255:56" pos:end="255:56">*</operator> <operator pos:start="255:58" pos:end="255:58">(</operator><literal type="number" pos:start="255:59" pos:end="255:59">1</literal> <operator pos:start="255:61" pos:end="255:62">&lt;&lt;</operator> <literal type="number" pos:start="255:64" pos:end="255:65">30</literal><operator pos:start="255:66" pos:end="255:66">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="259:21" pos:end="259:44"><expr pos:start="259:21" pos:end="259:43"><name pos:start="259:21" pos:end="259:25">coeff</name> <operator pos:start="259:27" pos:end="259:28">/=</operator> <operator pos:start="259:30" pos:end="259:30">(</operator><literal type="number" pos:start="259:31" pos:end="259:33">1LL</literal><operator pos:start="259:34" pos:end="259:35">&lt;&lt;</operator><literal type="number" pos:start="259:36" pos:end="259:37">54</literal><operator pos:start="259:38" pos:end="259:38">)</operator><operator pos:start="259:39" pos:end="259:39">/</operator><name pos:start="259:40" pos:end="259:43">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if>

<cpp:if pos:start="263:1" pos:end="263:5">#<cpp:directive pos:start="263:2" pos:end="263:3">if</cpp:directive> <expr pos:start="263:5" pos:end="263:5"><literal type="number" pos:start="263:5" pos:end="263:5">0</literal></expr></cpp:if>

                else if (flags &amp; SWS_X) {

                    double p  = param ? param * 0.01 : 0.3;

                    coeff     = d ? sin(d * M_PI) / (d * M_PI) : 1.0;

                    coeff    *= pow(2.0, -p * d * d);

                }

<cpp:endif pos:start="275:1" pos:end="275:6">#<cpp:directive pos:start="275:2" pos:end="275:6">endif</cpp:directive></cpp:endif>

                <if type="elseif" pos:start="277:17" pos:end="303:17">else if <condition pos:start="277:25" pos:end="277:39">(<expr pos:start="277:26" pos:end="277:38"><name pos:start="277:26" pos:end="277:30">flags</name> <operator pos:start="277:32" pos:end="277:32">&amp;</operator> <name pos:start="277:34" pos:end="277:38">SWS_X</name></expr>)</condition> <block pos:start="277:41" pos:end="303:17">{<block_content pos:start="279:21" pos:end="301:51">

                    <decl_stmt pos:start="279:21" pos:end="279:78"><decl pos:start="279:21" pos:end="279:77"><type pos:start="279:21" pos:end="279:26"><name pos:start="279:21" pos:end="279:26">double</name></type> <name pos:start="279:28" pos:end="279:28">A</name> <init pos:start="279:30" pos:end="279:77">= <expr pos:start="279:32" pos:end="279:77"><ternary pos:start="279:32" pos:end="279:77"><condition pos:start="279:32" pos:end="279:62"><expr pos:start="279:32" pos:end="279:60"><name pos:start="279:32" pos:end="279:39"><name pos:start="279:32" pos:end="279:36">param</name><index pos:start="279:37" pos:end="279:39">[<expr pos:start="279:38" pos:end="279:38"><literal type="number" pos:start="279:38" pos:end="279:38">0</literal></expr>]</index></name> <operator pos:start="279:41" pos:end="279:42">!=</operator> <name pos:start="279:44" pos:end="279:60">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="279:64" pos:end="279:71"> <expr pos:start="279:64" pos:end="279:71"><name pos:start="279:64" pos:end="279:71"><name pos:start="279:64" pos:end="279:68">param</name><index pos:start="279:69" pos:end="279:71">[<expr pos:start="279:70" pos:end="279:70"><literal type="number" pos:start="279:70" pos:end="279:70">0</literal></expr>]</index></name></expr> </then><else pos:start="279:73" pos:end="279:77">: <expr pos:start="279:75" pos:end="279:77"><literal type="number" pos:start="279:75" pos:end="279:77">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="281:21" pos:end="281:29"><decl pos:start="281:21" pos:end="281:28"><type pos:start="281:21" pos:end="281:26"><name pos:start="281:21" pos:end="281:26">double</name></type> <name pos:start="281:28" pos:end="281:28">c</name></decl>;</decl_stmt>



                    <if_stmt pos:start="285:21" pos:end="291:33"><if pos:start="285:21" pos:end="287:47">if <condition pos:start="285:24" pos:end="285:37">(<expr pos:start="285:25" pos:end="285:36"><name pos:start="285:25" pos:end="285:30">floatd</name> <operator pos:start="285:32" pos:end="285:32">&lt;</operator> <literal type="number" pos:start="285:34" pos:end="285:36">1.0</literal></expr>)</condition><block type="pseudo" pos:start="287:25" pos:end="287:47"><block_content pos:start="287:25" pos:end="287:47">

                        <expr_stmt pos:start="287:25" pos:end="287:47"><expr pos:start="287:25" pos:end="287:46"><name pos:start="287:25" pos:end="287:25">c</name> <operator pos:start="287:27" pos:end="287:27">=</operator> <call pos:start="287:29" pos:end="287:46"><name pos:start="287:29" pos:end="287:31">cos</name><argument_list pos:start="287:32" pos:end="287:46">(<argument pos:start="287:33" pos:end="287:45"><expr pos:start="287:33" pos:end="287:45"><name pos:start="287:33" pos:end="287:38">floatd</name> <operator pos:start="287:40" pos:end="287:40">*</operator> <name pos:start="287:42" pos:end="287:45">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="289:21" pos:end="291:33">else<block type="pseudo" pos:start="291:25" pos:end="291:33"><block_content pos:start="291:25" pos:end="291:33">

                        <expr_stmt pos:start="291:25" pos:end="291:33"><expr pos:start="291:25" pos:end="291:32"><name pos:start="291:25" pos:end="291:25">c</name> <operator pos:start="291:27" pos:end="291:27">=</operator> <operator pos:start="291:29" pos:end="291:29">-</operator><literal type="number" pos:start="291:30" pos:end="291:32">1.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt pos:start="293:21" pos:end="299:38"><if pos:start="293:21" pos:end="295:40">if <condition pos:start="293:24" pos:end="293:32">(<expr pos:start="293:25" pos:end="293:31"><name pos:start="293:25" pos:end="293:25">c</name> <operator pos:start="293:27" pos:end="293:27">&lt;</operator> <literal type="number" pos:start="293:29" pos:end="293:31">0.0</literal></expr>)</condition><block type="pseudo" pos:start="295:25" pos:end="295:40"><block_content pos:start="295:25" pos:end="295:40">

                        <expr_stmt pos:start="295:25" pos:end="295:40"><expr pos:start="295:25" pos:end="295:39"><name pos:start="295:25" pos:end="295:25">c</name> <operator pos:start="295:27" pos:end="295:27">=</operator> <operator pos:start="295:29" pos:end="295:29">-</operator><call pos:start="295:30" pos:end="295:39"><name pos:start="295:30" pos:end="295:32">pow</name><argument_list pos:start="295:33" pos:end="295:39">(<argument pos:start="295:34" pos:end="295:35"><expr pos:start="295:34" pos:end="295:35"><operator pos:start="295:34" pos:end="295:34">-</operator><name pos:start="295:35" pos:end="295:35">c</name></expr></argument>, <argument pos:start="295:38" pos:end="295:38"><expr pos:start="295:38" pos:end="295:38"><name pos:start="295:38" pos:end="295:38">A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="297:21" pos:end="299:38">else<block type="pseudo" pos:start="299:25" pos:end="299:38"><block_content pos:start="299:25" pos:end="299:38">

                        <expr_stmt pos:start="299:25" pos:end="299:38"><expr pos:start="299:25" pos:end="299:37"><name pos:start="299:25" pos:end="299:25">c</name> <operator pos:start="299:27" pos:end="299:27">=</operator> <call pos:start="299:29" pos:end="299:37"><name pos:start="299:29" pos:end="299:31">pow</name><argument_list pos:start="299:32" pos:end="299:37">(<argument pos:start="299:33" pos:end="299:33"><expr pos:start="299:33" pos:end="299:33"><name pos:start="299:33" pos:end="299:33">c</name></expr></argument>, <argument pos:start="299:36" pos:end="299:36"><expr pos:start="299:36" pos:end="299:36"><name pos:start="299:36" pos:end="299:36">A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:51"><expr pos:start="301:21" pos:end="301:50"><name pos:start="301:21" pos:end="301:25">coeff</name> <operator pos:start="301:27" pos:end="301:27">=</operator> <operator pos:start="301:29" pos:end="301:29">(</operator><name pos:start="301:30" pos:end="301:30">c</name> <operator pos:start="301:32" pos:end="301:32">*</operator> <literal type="number" pos:start="301:34" pos:end="301:38">0.5</literal> <operator pos:start="301:38" pos:end="301:38">+</operator> <literal type="number" pos:start="301:40" pos:end="301:42">0.5</literal><operator pos:start="301:43" pos:end="301:43">)</operator> <operator pos:start="301:45" pos:end="301:45">*</operator> <name pos:start="301:47" pos:end="301:50">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="303:19" pos:end="321:17">else if <condition pos:start="303:27" pos:end="303:44">(<expr pos:start="303:28" pos:end="303:43"><name pos:start="303:28" pos:end="303:32">flags</name> <operator pos:start="303:34" pos:end="303:34">&amp;</operator> <name pos:start="303:36" pos:end="303:43">SWS_AREA</name></expr>)</condition> <block pos:start="303:46" pos:end="321:17">{<block_content pos:start="305:21" pos:end="319:47">

                    <decl_stmt pos:start="305:21" pos:end="305:47"><decl pos:start="305:21" pos:end="305:46"><type pos:start="305:21" pos:end="305:27"><name pos:start="305:21" pos:end="305:27">int64_t</name></type> <name pos:start="305:29" pos:end="305:30">d2</name> <init pos:start="305:32" pos:end="305:46">= <expr pos:start="305:34" pos:end="305:46"><name pos:start="305:34" pos:end="305:34">d</name> <operator pos:start="305:36" pos:end="305:36">-</operator> <operator pos:start="305:38" pos:end="305:38">(</operator><literal type="number" pos:start="305:39" pos:end="305:39">1</literal> <operator pos:start="305:41" pos:end="305:42">&lt;&lt;</operator> <literal type="number" pos:start="305:44" pos:end="305:45">29</literal><operator pos:start="305:46" pos:end="305:46">)</operator></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="307:21" pos:end="317:36"><if pos:start="307:21" pos:end="309:57">if <condition pos:start="307:24" pos:end="307:56">(<expr pos:start="307:25" pos:end="307:55"><name pos:start="307:25" pos:end="307:26">d2</name> <operator pos:start="307:28" pos:end="307:28">*</operator> <name pos:start="307:30" pos:end="307:33">xInc</name> <operator pos:start="307:35" pos:end="307:35">&lt;</operator> <operator pos:start="307:37" pos:end="307:37">-</operator><operator pos:start="307:38" pos:end="307:38">(</operator><literal type="number" pos:start="307:39" pos:end="307:41">1LL</literal> <operator pos:start="307:43" pos:end="307:44">&lt;&lt;</operator> <operator pos:start="307:46" pos:end="307:46">(</operator><literal type="number" pos:start="307:47" pos:end="307:50">29</literal> <operator pos:start="307:50" pos:end="307:50">+</operator> <literal type="number" pos:start="307:52" pos:end="307:53">16</literal><operator pos:start="307:54" pos:end="307:54">)</operator><operator pos:start="307:55" pos:end="307:55">)</operator></expr>)</condition><block type="pseudo" pos:start="309:25" pos:end="309:57"><block_content pos:start="309:25" pos:end="309:57">

                        <expr_stmt pos:start="309:25" pos:end="309:57"><expr pos:start="309:25" pos:end="309:56"><name pos:start="309:25" pos:end="309:29">coeff</name> <operator pos:start="309:31" pos:end="309:31">=</operator> <literal type="number" pos:start="309:33" pos:end="309:35">1.0</literal> <operator pos:start="309:37" pos:end="309:37">*</operator> <operator pos:start="309:39" pos:end="309:39">(</operator><literal type="number" pos:start="309:40" pos:end="309:42">1LL</literal> <operator pos:start="309:44" pos:end="309:45">&lt;&lt;</operator> <operator pos:start="309:47" pos:end="309:47">(</operator><literal type="number" pos:start="309:48" pos:end="309:51">30</literal> <operator pos:start="309:51" pos:end="309:51">+</operator> <literal type="number" pos:start="309:53" pos:end="309:54">16</literal><operator pos:start="309:55" pos:end="309:55">)</operator><operator pos:start="309:56" pos:end="309:56">)</operator></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="311:21" pos:end="313:64">else if <condition pos:start="311:29" pos:end="311:60">(<expr pos:start="311:30" pos:end="311:59"><name pos:start="311:30" pos:end="311:31">d2</name> <operator pos:start="311:33" pos:end="311:33">*</operator> <name pos:start="311:35" pos:end="311:38">xInc</name> <operator pos:start="311:40" pos:end="311:40">&lt;</operator> <operator pos:start="311:42" pos:end="311:42">(</operator><literal type="number" pos:start="311:43" pos:end="311:45">1LL</literal> <operator pos:start="311:47" pos:end="311:48">&lt;&lt;</operator> <operator pos:start="311:50" pos:end="311:50">(</operator><literal type="number" pos:start="311:51" pos:end="311:54">29</literal> <operator pos:start="311:54" pos:end="311:54">+</operator> <literal type="number" pos:start="311:56" pos:end="311:57">16</literal><operator pos:start="311:58" pos:end="311:58">)</operator><operator pos:start="311:59" pos:end="311:59">)</operator></expr>)</condition><block type="pseudo" pos:start="313:25" pos:end="313:64"><block_content pos:start="313:25" pos:end="313:64">

                        <expr_stmt pos:start="313:25" pos:end="313:64"><expr pos:start="313:25" pos:end="313:63"><name pos:start="313:25" pos:end="313:29">coeff</name> <operator pos:start="313:31" pos:end="313:31">=</operator> <operator pos:start="313:33" pos:end="313:33">-</operator><name pos:start="313:34" pos:end="313:35">d2</name> <operator pos:start="313:37" pos:end="313:37">*</operator> <name pos:start="313:39" pos:end="313:42">xInc</name> <operator pos:start="313:44" pos:end="313:44">+</operator> <operator pos:start="313:46" pos:end="313:46">(</operator><literal type="number" pos:start="313:47" pos:end="313:49">1LL</literal> <operator pos:start="313:51" pos:end="313:52">&lt;&lt;</operator> <operator pos:start="313:54" pos:end="313:54">(</operator><literal type="number" pos:start="313:55" pos:end="313:58">29</literal> <operator pos:start="313:58" pos:end="313:58">+</operator> <literal type="number" pos:start="313:60" pos:end="313:61">16</literal><operator pos:start="313:62" pos:end="313:62">)</operator><operator pos:start="313:63" pos:end="313:63">)</operator></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="315:21" pos:end="317:36">else<block type="pseudo" pos:start="317:25" pos:end="317:36"><block_content pos:start="317:25" pos:end="317:36">

                        <expr_stmt pos:start="317:25" pos:end="317:36"><expr pos:start="317:25" pos:end="317:35"><name pos:start="317:25" pos:end="317:29">coeff</name> <operator pos:start="317:31" pos:end="317:31">=</operator> <literal type="number" pos:start="317:33" pos:end="317:35">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="319:21" pos:end="319:47"><expr pos:start="319:21" pos:end="319:46"><name pos:start="319:21" pos:end="319:25">coeff</name> <operator pos:start="319:27" pos:end="319:28">*=</operator> <name pos:start="319:30" pos:end="319:33">fone</name> <operator pos:start="319:35" pos:end="319:36">&gt;&gt;</operator> <operator pos:start="319:38" pos:end="319:38">(</operator><literal type="number" pos:start="319:39" pos:end="319:42">30</literal> <operator pos:start="319:42" pos:end="319:42">+</operator> <literal type="number" pos:start="319:44" pos:end="319:45">16</literal><operator pos:start="319:46" pos:end="319:46">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="321:19" pos:end="327:17">else if <condition pos:start="321:27" pos:end="321:45">(<expr pos:start="321:28" pos:end="321:44"><name pos:start="321:28" pos:end="321:32">flags</name> <operator pos:start="321:34" pos:end="321:34">&amp;</operator> <name pos:start="321:36" pos:end="321:44">SWS_GAUSS</name></expr>)</condition> <block pos:start="321:47" pos:end="327:17">{<block_content pos:start="323:21" pos:end="325:68">

                    <decl_stmt pos:start="323:21" pos:end="323:78"><decl pos:start="323:21" pos:end="323:77"><type pos:start="323:21" pos:end="323:26"><name pos:start="323:21" pos:end="323:26">double</name></type> <name pos:start="323:28" pos:end="323:28">p</name> <init pos:start="323:30" pos:end="323:77">= <expr pos:start="323:32" pos:end="323:77"><ternary pos:start="323:32" pos:end="323:77"><condition pos:start="323:32" pos:end="323:62"><expr pos:start="323:32" pos:end="323:60"><name pos:start="323:32" pos:end="323:39"><name pos:start="323:32" pos:end="323:36">param</name><index pos:start="323:37" pos:end="323:39">[<expr pos:start="323:38" pos:end="323:38"><literal type="number" pos:start="323:38" pos:end="323:38">0</literal></expr>]</index></name> <operator pos:start="323:41" pos:end="323:42">!=</operator> <name pos:start="323:44" pos:end="323:60">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="323:64" pos:end="323:71"> <expr pos:start="323:64" pos:end="323:71"><name pos:start="323:64" pos:end="323:71"><name pos:start="323:64" pos:end="323:68">param</name><index pos:start="323:69" pos:end="323:71">[<expr pos:start="323:70" pos:end="323:70"><literal type="number" pos:start="323:70" pos:end="323:70">0</literal></expr>]</index></name></expr> </then><else pos:start="323:73" pos:end="323:77">: <expr pos:start="323:75" pos:end="323:77"><literal type="number" pos:start="323:75" pos:end="323:77">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="325:21" pos:end="325:68"><expr pos:start="325:21" pos:end="325:67"><name pos:start="325:21" pos:end="325:25">coeff</name> <operator pos:start="325:27" pos:end="325:27">=</operator> <operator pos:start="325:29" pos:end="325:29">(</operator><call pos:start="325:30" pos:end="325:59"><name pos:start="325:30" pos:end="325:32">pow</name><argument_list pos:start="325:33" pos:end="325:59">(<argument pos:start="325:34" pos:end="325:36"><expr pos:start="325:34" pos:end="325:36"><literal type="number" pos:start="325:34" pos:end="325:36">2.0</literal></expr></argument>, <argument pos:start="325:39" pos:end="325:58"><expr pos:start="325:39" pos:end="325:58"><operator pos:start="325:39" pos:end="325:39">-</operator><name pos:start="325:40" pos:end="325:40">p</name> <operator pos:start="325:42" pos:end="325:42">*</operator> <name pos:start="325:44" pos:end="325:49">floatd</name> <operator pos:start="325:51" pos:end="325:51">*</operator> <name pos:start="325:53" pos:end="325:58">floatd</name></expr></argument>)</argument_list></call><operator pos:start="325:60" pos:end="325:60">)</operator> <operator pos:start="325:62" pos:end="325:62">*</operator> <name pos:start="325:64" pos:end="325:67">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="327:19" pos:end="331:17">else if <condition pos:start="327:27" pos:end="327:44">(<expr pos:start="327:28" pos:end="327:43"><name pos:start="327:28" pos:end="327:32">flags</name> <operator pos:start="327:34" pos:end="327:34">&amp;</operator> <name pos:start="327:36" pos:end="327:43">SWS_SINC</name></expr>)</condition> <block pos:start="327:46" pos:end="331:17">{<block_content pos:start="329:21" pos:end="329:84">

                    <expr_stmt pos:start="329:21" pos:end="329:84"><expr pos:start="329:21" pos:end="329:83"><name pos:start="329:21" pos:end="329:25">coeff</name> <operator pos:start="329:27" pos:end="329:27">=</operator> <operator pos:start="329:29" pos:end="329:29">(</operator><ternary pos:start="329:30" pos:end="329:75"><condition pos:start="329:30" pos:end="329:32"><expr pos:start="329:30" pos:end="329:30"><name pos:start="329:30" pos:end="329:30">d</name></expr> ?</condition><then pos:start="329:34" pos:end="329:69"> <expr pos:start="329:34" pos:end="329:69"><call pos:start="329:34" pos:end="329:51"><name pos:start="329:34" pos:end="329:36">sin</name><argument_list pos:start="329:37" pos:end="329:51">(<argument pos:start="329:38" pos:end="329:50"><expr pos:start="329:38" pos:end="329:50"><name pos:start="329:38" pos:end="329:43">floatd</name> <operator pos:start="329:45" pos:end="329:45">*</operator> <name pos:start="329:47" pos:end="329:50">M_PI</name></expr></argument>)</argument_list></call> <operator pos:start="329:53" pos:end="329:53">/</operator> <operator pos:start="329:55" pos:end="329:55">(</operator><name pos:start="329:56" pos:end="329:61">floatd</name> <operator pos:start="329:63" pos:end="329:63">*</operator> <name pos:start="329:65" pos:end="329:68">M_PI</name><operator pos:start="329:69" pos:end="329:69">)</operator></expr> </then><else pos:start="329:71" pos:end="329:75">: <expr pos:start="329:73" pos:end="329:75"><literal type="number" pos:start="329:73" pos:end="329:75">1.0</literal></expr></else></ternary><operator pos:start="329:76" pos:end="329:76">)</operator> <operator pos:start="329:78" pos:end="329:78">*</operator> <name pos:start="329:80" pos:end="329:83">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="331:19" pos:end="343:17">else if <condition pos:start="331:27" pos:end="331:47">(<expr pos:start="331:28" pos:end="331:46"><name pos:start="331:28" pos:end="331:32">flags</name> <operator pos:start="331:34" pos:end="331:34">&amp;</operator> <name pos:start="331:36" pos:end="331:46">SWS_LANCZOS</name></expr>)</condition> <block pos:start="331:49" pos:end="343:17">{<block_content pos:start="333:21" pos:end="341:34">

                    <decl_stmt pos:start="333:21" pos:end="333:78"><decl pos:start="333:21" pos:end="333:77"><type pos:start="333:21" pos:end="333:26"><name pos:start="333:21" pos:end="333:26">double</name></type> <name pos:start="333:28" pos:end="333:28">p</name> <init pos:start="333:30" pos:end="333:77">= <expr pos:start="333:32" pos:end="333:77"><ternary pos:start="333:32" pos:end="333:77"><condition pos:start="333:32" pos:end="333:62"><expr pos:start="333:32" pos:end="333:60"><name pos:start="333:32" pos:end="333:39"><name pos:start="333:32" pos:end="333:36">param</name><index pos:start="333:37" pos:end="333:39">[<expr pos:start="333:38" pos:end="333:38"><literal type="number" pos:start="333:38" pos:end="333:38">0</literal></expr>]</index></name> <operator pos:start="333:41" pos:end="333:42">!=</operator> <name pos:start="333:44" pos:end="333:60">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="333:64" pos:end="333:71"> <expr pos:start="333:64" pos:end="333:71"><name pos:start="333:64" pos:end="333:71"><name pos:start="333:64" pos:end="333:68">param</name><index pos:start="333:69" pos:end="333:71">[<expr pos:start="333:70" pos:end="333:70"><literal type="number" pos:start="333:70" pos:end="333:70">0</literal></expr>]</index></name></expr> </then><else pos:start="333:73" pos:end="333:77">: <expr pos:start="333:75" pos:end="333:77"><literal type="number" pos:start="333:75" pos:end="333:77">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="335:21" pos:end="337:79"><expr pos:start="335:21" pos:end="337:78"><name pos:start="335:21" pos:end="335:25">coeff</name> <operator pos:start="335:27" pos:end="335:27">=</operator> <operator pos:start="335:29" pos:end="335:29">(</operator><ternary pos:start="335:30" pos:end="337:70"><condition pos:start="335:30" pos:end="335:32"><expr pos:start="335:30" pos:end="335:30"><name pos:start="335:30" pos:end="335:30">d</name></expr> ?</condition><then pos:start="335:34" pos:end="337:64"> <expr pos:start="335:34" pos:end="337:64"><call pos:start="335:34" pos:end="335:51"><name pos:start="335:34" pos:end="335:36">sin</name><argument_list pos:start="335:37" pos:end="335:51">(<argument pos:start="335:38" pos:end="335:50"><expr pos:start="335:38" pos:end="335:50"><name pos:start="335:38" pos:end="335:43">floatd</name> <operator pos:start="335:45" pos:end="335:45">*</operator> <name pos:start="335:47" pos:end="335:50">M_PI</name></expr></argument>)</argument_list></call> <operator pos:start="335:53" pos:end="335:53">*</operator> <call pos:start="335:55" pos:end="335:76"><name pos:start="335:55" pos:end="335:57">sin</name><argument_list pos:start="335:58" pos:end="335:76">(<argument pos:start="335:59" pos:end="335:75"><expr pos:start="335:59" pos:end="335:75"><name pos:start="335:59" pos:end="335:64">floatd</name> <operator pos:start="335:66" pos:end="335:66">*</operator> <name pos:start="335:68" pos:end="335:71">M_PI</name> <operator pos:start="335:73" pos:end="335:73">/</operator> <name pos:start="335:75" pos:end="335:75">p</name></expr></argument>)</argument_list></call> <operator pos:start="335:78" pos:end="335:78">/</operator>

                             <operator pos:start="337:30" pos:end="337:30">(</operator><name pos:start="337:31" pos:end="337:36">floatd</name> <operator pos:start="337:38" pos:end="337:38">*</operator> <name pos:start="337:40" pos:end="337:45">floatd</name> <operator pos:start="337:47" pos:end="337:47">*</operator> <name pos:start="337:49" pos:end="337:52">M_PI</name> <operator pos:start="337:54" pos:end="337:54">*</operator> <name pos:start="337:56" pos:end="337:59">M_PI</name> <operator pos:start="337:61" pos:end="337:61">/</operator> <name pos:start="337:63" pos:end="337:63">p</name><operator pos:start="337:64" pos:end="337:64">)</operator></expr> </then><else pos:start="337:66" pos:end="337:70">: <expr pos:start="337:68" pos:end="337:70"><literal type="number" pos:start="337:68" pos:end="337:70">1.0</literal></expr></else></ternary><operator pos:start="337:71" pos:end="337:71">)</operator> <operator pos:start="337:73" pos:end="337:73">*</operator> <name pos:start="337:75" pos:end="337:78">fone</name></expr>;</expr_stmt>

                    <if_stmt pos:start="339:21" pos:end="341:34"><if pos:start="339:21" pos:end="341:34">if <condition pos:start="339:24" pos:end="339:35">(<expr pos:start="339:25" pos:end="339:34"><name pos:start="339:25" pos:end="339:30">floatd</name> <operator pos:start="339:32" pos:end="339:32">&gt;</operator> <name pos:start="339:34" pos:end="339:34">p</name></expr>)</condition><block type="pseudo" pos:start="341:25" pos:end="341:34"><block_content pos:start="341:25" pos:end="341:34">

                        <expr_stmt pos:start="341:25" pos:end="341:34"><expr pos:start="341:25" pos:end="341:33"><name pos:start="341:25" pos:end="341:29">coeff</name> <operator pos:start="341:31" pos:end="341:31">=</operator> <literal type="number" pos:start="341:33" pos:end="341:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="343:19" pos:end="353:17">else if <condition pos:start="343:27" pos:end="343:48">(<expr pos:start="343:28" pos:end="343:47"><name pos:start="343:28" pos:end="343:32">flags</name> <operator pos:start="343:34" pos:end="343:34">&amp;</operator> <name pos:start="343:36" pos:end="343:47">SWS_BILINEAR</name></expr>)</condition> <block pos:start="343:50" pos:end="353:17">{<block_content pos:start="345:21" pos:end="351:40">

                    <expr_stmt pos:start="345:21" pos:end="345:42"><expr pos:start="345:21" pos:end="345:41"><name pos:start="345:21" pos:end="345:25">coeff</name> <operator pos:start="345:27" pos:end="345:27">=</operator> <operator pos:start="345:29" pos:end="345:29">(</operator><literal type="number" pos:start="345:30" pos:end="345:30">1</literal> <operator pos:start="345:32" pos:end="345:33">&lt;&lt;</operator> <literal type="number" pos:start="345:35" pos:end="345:36">30</literal><operator pos:start="345:37" pos:end="345:37">)</operator> <operator pos:start="345:39" pos:end="345:39">-</operator> <name pos:start="345:41" pos:end="345:41">d</name></expr>;</expr_stmt>

                    <if_stmt pos:start="347:21" pos:end="349:34"><if pos:start="347:21" pos:end="349:34">if <condition pos:start="347:24" pos:end="347:34">(<expr pos:start="347:25" pos:end="347:33"><name pos:start="347:25" pos:end="347:29">coeff</name> <operator pos:start="347:31" pos:end="347:31">&lt;</operator> <literal type="number" pos:start="347:33" pos:end="347:33">0</literal></expr>)</condition><block type="pseudo" pos:start="349:25" pos:end="349:34"><block_content pos:start="349:25" pos:end="349:34">

                        <expr_stmt pos:start="349:25" pos:end="349:34"><expr pos:start="349:25" pos:end="349:33"><name pos:start="349:25" pos:end="349:29">coeff</name> <operator pos:start="349:31" pos:end="349:31">=</operator> <literal type="number" pos:start="349:33" pos:end="349:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="351:21" pos:end="351:40"><expr pos:start="351:21" pos:end="351:39"><name pos:start="351:21" pos:end="351:25">coeff</name> <operator pos:start="351:27" pos:end="351:28">*=</operator> <name pos:start="351:30" pos:end="351:33">fone</name> <operator pos:start="351:35" pos:end="351:36">&gt;&gt;</operator> <literal type="number" pos:start="351:38" pos:end="351:39">30</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="353:19" pos:end="359:17">else if <condition pos:start="353:27" pos:end="353:46">(<expr pos:start="353:28" pos:end="353:45"><name pos:start="353:28" pos:end="353:32">flags</name> <operator pos:start="353:34" pos:end="353:34">&amp;</operator> <name pos:start="353:36" pos:end="353:45">SWS_SPLINE</name></expr>)</condition> <block pos:start="353:48" pos:end="359:17">{<block_content pos:start="355:21" pos:end="357:81">

                    <decl_stmt pos:start="355:21" pos:end="355:50"><decl pos:start="355:21" pos:end="355:49"><type pos:start="355:21" pos:end="355:26"><name pos:start="355:21" pos:end="355:26">double</name></type> <name pos:start="355:28" pos:end="355:28">p</name> <init pos:start="355:30" pos:end="355:49">= <expr pos:start="355:32" pos:end="355:49"><operator pos:start="355:32" pos:end="355:32">-</operator><literal type="number" pos:start="355:33" pos:end="355:49">2.196152422706632</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="357:21" pos:end="357:81"><expr pos:start="357:21" pos:end="357:80"><name pos:start="357:21" pos:end="357:25">coeff</name> <operator pos:start="357:27" pos:end="357:27">=</operator> <call pos:start="357:29" pos:end="357:73"><name pos:start="357:29" pos:end="357:42">getSplineCoeff</name><argument_list pos:start="357:43" pos:end="357:73">(<argument pos:start="357:44" pos:end="357:46"><expr pos:start="357:44" pos:end="357:46"><literal type="number" pos:start="357:44" pos:end="357:46">1.0</literal></expr></argument>, <argument pos:start="357:49" pos:end="357:51"><expr pos:start="357:49" pos:end="357:51"><literal type="number" pos:start="357:49" pos:end="357:51">0.0</literal></expr></argument>, <argument pos:start="357:54" pos:end="357:54"><expr pos:start="357:54" pos:end="357:54"><name pos:start="357:54" pos:end="357:54">p</name></expr></argument>, <argument pos:start="357:57" pos:end="357:64"><expr pos:start="357:57" pos:end="357:64"><operator pos:start="357:57" pos:end="357:57">-</operator><name pos:start="357:58" pos:end="357:58">p</name> <operator pos:start="357:60" pos:end="357:60">-</operator> <literal type="number" pos:start="357:62" pos:end="357:64">1.0</literal></expr></argument>, <argument pos:start="357:67" pos:end="357:72"><expr pos:start="357:67" pos:end="357:72"><name pos:start="357:67" pos:end="357:72">floatd</name></expr></argument>)</argument_list></call> <operator pos:start="357:75" pos:end="357:75">*</operator> <name pos:start="357:77" pos:end="357:80">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="359:19" pos:end="363:17">else <block pos:start="359:24" pos:end="363:17">{<block_content pos:start="361:21" pos:end="361:34">

                    <expr_stmt pos:start="361:21" pos:end="361:34"><expr pos:start="361:21" pos:end="361:33"><call pos:start="361:21" pos:end="361:33"><name pos:start="361:21" pos:end="361:30">av_assert0</name><argument_list pos:start="361:31" pos:end="361:33">(<argument pos:start="361:32" pos:end="361:32"><expr pos:start="361:32" pos:end="361:32"><literal type="number" pos:start="361:32" pos:end="361:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="367:17" pos:end="367:51"><expr pos:start="367:17" pos:end="367:50"><name pos:start="367:17" pos:end="367:42"><name pos:start="367:17" pos:end="367:22">filter</name><index pos:start="367:23" pos:end="367:42">[<expr pos:start="367:24" pos:end="367:41"><name pos:start="367:24" pos:end="367:24">i</name> <operator pos:start="367:26" pos:end="367:26">*</operator> <name pos:start="367:28" pos:end="367:37">filterSize</name> <operator pos:start="367:39" pos:end="367:39">+</operator> <name pos:start="367:41" pos:end="367:41">j</name></expr>]</index></name> <operator pos:start="367:44" pos:end="367:44">=</operator> <name pos:start="367:46" pos:end="367:50">coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="369:17" pos:end="369:21"><expr pos:start="369:17" pos:end="369:20"><name pos:start="369:17" pos:end="369:18">xx</name><operator pos:start="369:19" pos:end="369:20">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="373:13" pos:end="373:34"><expr pos:start="373:13" pos:end="373:33"><name pos:start="373:13" pos:end="373:21">xDstInSrc</name> <operator pos:start="373:23" pos:end="373:24">+=</operator> <literal type="number" pos:start="373:26" pos:end="373:26">2</literal> <operator pos:start="373:28" pos:end="373:28">*</operator> <name pos:start="373:30" pos:end="373:33">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="381:5" pos:end="385:7">/* apply src &amp; dst Filter to filter -&gt; filter2

     * av_free(filter);

     */</comment>

    <expr_stmt pos:start="387:5" pos:end="387:31"><expr pos:start="387:5" pos:end="387:30"><call pos:start="387:5" pos:end="387:30"><name pos:start="387:5" pos:end="387:14">av_assert0</name><argument_list pos:start="387:15" pos:end="387:30">(<argument pos:start="387:16" pos:end="387:29"><expr pos:start="387:16" pos:end="387:29"><name pos:start="387:16" pos:end="387:25">filterSize</name> <operator pos:start="387:27" pos:end="387:27">&gt;</operator> <literal type="number" pos:start="387:29" pos:end="387:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="389:29"><expr pos:start="389:5" pos:end="389:28"><name pos:start="389:5" pos:end="389:15">filter2Size</name> <operator pos:start="389:17" pos:end="389:17">=</operator> <name pos:start="389:19" pos:end="389:28">filterSize</name></expr>;</expr_stmt>

    <if_stmt pos:start="391:5" pos:end="393:45"><if pos:start="391:5" pos:end="393:45">if <condition pos:start="391:8" pos:end="391:18">(<expr pos:start="391:9" pos:end="391:17"><name pos:start="391:9" pos:end="391:17">srcFilter</name></expr>)</condition><block type="pseudo" pos:start="393:9" pos:end="393:45"><block_content pos:start="393:9" pos:end="393:45">

        <expr_stmt pos:start="393:9" pos:end="393:45"><expr pos:start="393:9" pos:end="393:44"><name pos:start="393:9" pos:end="393:19">filter2Size</name> <operator pos:start="393:21" pos:end="393:22">+=</operator> <name pos:start="393:24" pos:end="393:40"><name pos:start="393:24" pos:end="393:32">srcFilter</name><operator pos:start="393:33" pos:end="393:34">-&gt;</operator><name pos:start="393:35" pos:end="393:40">length</name></name> <operator pos:start="393:42" pos:end="393:42">-</operator> <literal type="number" pos:start="393:44" pos:end="393:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="395:5" pos:end="397:45"><if pos:start="395:5" pos:end="397:45">if <condition pos:start="395:8" pos:end="395:18">(<expr pos:start="395:9" pos:end="395:17"><name pos:start="395:9" pos:end="395:17">dstFilter</name></expr>)</condition><block type="pseudo" pos:start="397:9" pos:end="397:45"><block_content pos:start="397:9" pos:end="397:45">

        <expr_stmt pos:start="397:9" pos:end="397:45"><expr pos:start="397:9" pos:end="397:44"><name pos:start="397:9" pos:end="397:19">filter2Size</name> <operator pos:start="397:21" pos:end="397:22">+=</operator> <name pos:start="397:24" pos:end="397:40"><name pos:start="397:24" pos:end="397:32">dstFilter</name><operator pos:start="397:33" pos:end="397:34">-&gt;</operator><name pos:start="397:35" pos:end="397:40">length</name></name> <operator pos:start="397:42" pos:end="397:42">-</operator> <literal type="number" pos:start="397:44" pos:end="397:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:32"><expr pos:start="399:5" pos:end="399:31"><call pos:start="399:5" pos:end="399:31"><name pos:start="399:5" pos:end="399:14">av_assert0</name><argument_list pos:start="399:15" pos:end="399:31">(<argument pos:start="399:16" pos:end="399:30"><expr pos:start="399:16" pos:end="399:30"><name pos:start="399:16" pos:end="399:26">filter2Size</name> <operator pos:start="399:28" pos:end="399:28">&gt;</operator> <literal type="number" pos:start="399:30" pos:end="399:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:87"><expr pos:start="401:5" pos:end="401:86"><call pos:start="401:5" pos:end="401:86"><name pos:start="401:5" pos:end="401:27">FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list pos:start="401:28" pos:end="401:86">(<argument pos:start="401:29" pos:end="401:32"><expr pos:start="401:29" pos:end="401:32"><name pos:start="401:29" pos:end="401:32">NULL</name></expr></argument>, <argument pos:start="401:35" pos:end="401:41"><expr pos:start="401:35" pos:end="401:41"><name pos:start="401:35" pos:end="401:41">filter2</name></expr></argument>, <argument pos:start="401:44" pos:end="401:47"><expr pos:start="401:44" pos:end="401:47"><name pos:start="401:44" pos:end="401:47">dstW</name></expr></argument>, <argument pos:start="401:50" pos:end="401:79"><expr pos:start="401:50" pos:end="401:79"><name pos:start="401:50" pos:end="401:60">filter2Size</name> <operator pos:start="401:62" pos:end="401:62">*</operator> <sizeof pos:start="401:64" pos:end="401:79">sizeof<argument_list pos:start="401:70" pos:end="401:79">(<argument pos:start="401:71" pos:end="401:78"><expr pos:start="401:71" pos:end="401:78"><operator pos:start="401:71" pos:end="401:71">*</operator><name pos:start="401:72" pos:end="401:78">filter2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="401:82" pos:end="401:85"><expr pos:start="401:82" pos:end="401:85"><name pos:start="401:82" pos:end="401:85">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="405:5" pos:end="437:5">for <control pos:start="405:9" pos:end="405:30">(<init pos:start="405:10" pos:end="405:15"><expr pos:start="405:10" pos:end="405:14"><name pos:start="405:10" pos:end="405:10">i</name> <operator pos:start="405:12" pos:end="405:12">=</operator> <literal type="number" pos:start="405:14" pos:end="405:14">0</literal></expr>;</init> <condition pos:start="405:17" pos:end="405:25"><expr pos:start="405:17" pos:end="405:24"><name pos:start="405:17" pos:end="405:17">i</name> <operator pos:start="405:19" pos:end="405:19">&lt;</operator> <name pos:start="405:21" pos:end="405:24">dstW</name></expr>;</condition> <incr pos:start="405:27" pos:end="405:29"><expr pos:start="405:27" pos:end="405:29"><name pos:start="405:27" pos:end="405:27">i</name><operator pos:start="405:28" pos:end="405:29">++</operator></expr></incr>)</control> <block pos:start="405:32" pos:end="437:5">{<block_content pos:start="407:9" pos:end="435:72">

        <decl_stmt pos:start="407:9" pos:end="407:17"><decl pos:start="407:9" pos:end="407:13"><type pos:start="407:9" pos:end="407:11"><name pos:start="407:9" pos:end="407:11">int</name></type> <name pos:start="407:13" pos:end="407:13">j</name></decl>, <decl pos:start="407:16" pos:end="407:16"><type ref="prev" pos:start="407:9" pos:end="407:11"/><name pos:start="407:16" pos:end="407:16">k</name></decl>;</decl_stmt>



        <if_stmt pos:start="411:9" pos:end="429:9"><if pos:start="411:9" pos:end="423:9">if <condition pos:start="411:12" pos:end="411:22">(<expr pos:start="411:13" pos:end="411:21"><name pos:start="411:13" pos:end="411:21">srcFilter</name></expr>)</condition> <block pos:start="411:24" pos:end="423:9">{<block_content pos:start="413:13" pos:end="421:13">

            <for pos:start="413:13" pos:end="421:13">for <control pos:start="413:17" pos:end="413:51">(<init pos:start="413:18" pos:end="413:23"><expr pos:start="413:18" pos:end="413:22"><name pos:start="413:18" pos:end="413:18">k</name> <operator pos:start="413:20" pos:end="413:20">=</operator> <literal type="number" pos:start="413:22" pos:end="413:22">0</literal></expr>;</init> <condition pos:start="413:25" pos:end="413:46"><expr pos:start="413:25" pos:end="413:45"><name pos:start="413:25" pos:end="413:25">k</name> <operator pos:start="413:27" pos:end="413:27">&lt;</operator> <name pos:start="413:29" pos:end="413:45"><name pos:start="413:29" pos:end="413:37">srcFilter</name><operator pos:start="413:38" pos:end="413:39">-&gt;</operator><name pos:start="413:40" pos:end="413:45">length</name></name></expr>;</condition> <incr pos:start="413:48" pos:end="413:50"><expr pos:start="413:48" pos:end="413:50"><name pos:start="413:48" pos:end="413:48">k</name><operator pos:start="413:49" pos:end="413:50">++</operator></expr></incr>)</control> <block pos:start="413:53" pos:end="421:13">{<block_content pos:start="415:17" pos:end="419:73">

                <for pos:start="415:17" pos:end="419:73">for <control pos:start="415:21" pos:end="415:48">(<init pos:start="415:22" pos:end="415:27"><expr pos:start="415:22" pos:end="415:26"><name pos:start="415:22" pos:end="415:22">j</name> <operator pos:start="415:24" pos:end="415:24">=</operator> <literal type="number" pos:start="415:26" pos:end="415:26">0</literal></expr>;</init> <condition pos:start="415:29" pos:end="415:43"><expr pos:start="415:29" pos:end="415:42"><name pos:start="415:29" pos:end="415:29">j</name> <operator pos:start="415:31" pos:end="415:31">&lt;</operator> <name pos:start="415:33" pos:end="415:42">filterSize</name></expr>;</condition> <incr pos:start="415:45" pos:end="415:47"><expr pos:start="415:45" pos:end="415:47"><name pos:start="415:45" pos:end="415:45">j</name><operator pos:start="415:46" pos:end="415:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="417:21" pos:end="419:73"><block_content pos:start="417:21" pos:end="419:73">

                    <expr_stmt pos:start="417:21" pos:end="419:73"><expr pos:start="417:21" pos:end="419:72"><name pos:start="417:21" pos:end="417:52"><name pos:start="417:21" pos:end="417:27">filter2</name><index pos:start="417:28" pos:end="417:52">[<expr pos:start="417:29" pos:end="417:51"><name pos:start="417:29" pos:end="417:29">i</name> <operator pos:start="417:31" pos:end="417:31">*</operator> <name pos:start="417:33" pos:end="417:43">filter2Size</name> <operator pos:start="417:45" pos:end="417:45">+</operator> <name pos:start="417:47" pos:end="417:47">k</name> <operator pos:start="417:49" pos:end="417:49">+</operator> <name pos:start="417:51" pos:end="417:51">j</name></expr>]</index></name> <operator pos:start="417:54" pos:end="417:55">+=</operator>

                        <name pos:start="419:25" pos:end="419:43"><name pos:start="419:25" pos:end="419:33">srcFilter</name><operator pos:start="419:34" pos:end="419:35">-&gt;</operator><name pos:start="419:36" pos:end="419:40">coeff</name><index pos:start="419:41" pos:end="419:43">[<expr pos:start="419:42" pos:end="419:42"><name pos:start="419:42" pos:end="419:42">k</name></expr>]</index></name> <operator pos:start="419:45" pos:end="419:45">*</operator> <name pos:start="419:47" pos:end="419:72"><name pos:start="419:47" pos:end="419:52">filter</name><index pos:start="419:53" pos:end="419:72">[<expr pos:start="419:54" pos:end="419:71"><name pos:start="419:54" pos:end="419:54">i</name> <operator pos:start="419:56" pos:end="419:56">*</operator> <name pos:start="419:58" pos:end="419:67">filterSize</name> <operator pos:start="419:69" pos:end="419:69">+</operator> <name pos:start="419:71" pos:end="419:71">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="423:11" pos:end="429:9">else <block pos:start="423:16" pos:end="429:9">{<block_content pos:start="425:13" pos:end="427:74">

            <for pos:start="425:13" pos:end="427:74">for <control pos:start="425:17" pos:end="425:44">(<init pos:start="425:18" pos:end="425:23"><expr pos:start="425:18" pos:end="425:22"><name pos:start="425:18" pos:end="425:18">j</name> <operator pos:start="425:20" pos:end="425:20">=</operator> <literal type="number" pos:start="425:22" pos:end="425:22">0</literal></expr>;</init> <condition pos:start="425:25" pos:end="425:39"><expr pos:start="425:25" pos:end="425:38"><name pos:start="425:25" pos:end="425:25">j</name> <operator pos:start="425:27" pos:end="425:27">&lt;</operator> <name pos:start="425:29" pos:end="425:38">filterSize</name></expr>;</condition> <incr pos:start="425:41" pos:end="425:43"><expr pos:start="425:41" pos:end="425:43"><name pos:start="425:41" pos:end="425:41">j</name><operator pos:start="425:42" pos:end="425:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="427:17" pos:end="427:74"><block_content pos:start="427:17" pos:end="427:74">

                <expr_stmt pos:start="427:17" pos:end="427:74"><expr pos:start="427:17" pos:end="427:73"><name pos:start="427:17" pos:end="427:44"><name pos:start="427:17" pos:end="427:23">filter2</name><index pos:start="427:24" pos:end="427:44">[<expr pos:start="427:25" pos:end="427:43"><name pos:start="427:25" pos:end="427:25">i</name> <operator pos:start="427:27" pos:end="427:27">*</operator> <name pos:start="427:29" pos:end="427:39">filter2Size</name> <operator pos:start="427:41" pos:end="427:41">+</operator> <name pos:start="427:43" pos:end="427:43">j</name></expr>]</index></name> <operator pos:start="427:46" pos:end="427:46">=</operator> <name pos:start="427:48" pos:end="427:73"><name pos:start="427:48" pos:end="427:53">filter</name><index pos:start="427:54" pos:end="427:73">[<expr pos:start="427:55" pos:end="427:72"><name pos:start="427:55" pos:end="427:55">i</name> <operator pos:start="427:57" pos:end="427:57">*</operator> <name pos:start="427:59" pos:end="427:68">filterSize</name> <operator pos:start="427:70" pos:end="427:70">+</operator> <name pos:start="427:72" pos:end="427:72">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <comment type="line" pos:start="431:9" pos:end="431:26">// FIXME dstFilter</comment>



        <expr_stmt pos:start="435:9" pos:end="435:72"><expr pos:start="435:9" pos:end="435:71"><operator pos:start="435:9" pos:end="435:9">(</operator><operator pos:start="435:10" pos:end="435:10">*</operator><name pos:start="435:11" pos:end="435:19">filterPos</name><operator pos:start="435:20" pos:end="435:20">)</operator><index pos:start="435:21" pos:end="435:23">[<expr pos:start="435:22" pos:end="435:22"><name pos:start="435:22" pos:end="435:22">i</name></expr>]</index> <operator pos:start="435:25" pos:end="435:26">+=</operator> <operator pos:start="435:28" pos:end="435:28">(</operator><name pos:start="435:29" pos:end="435:38">filterSize</name> <operator pos:start="435:40" pos:end="435:40">-</operator> <literal type="number" pos:start="435:42" pos:end="435:42">1</literal><operator pos:start="435:43" pos:end="435:43">)</operator> <operator pos:start="435:45" pos:end="435:45">/</operator> <literal type="number" pos:start="435:47" pos:end="435:49">2</literal> <operator pos:start="435:49" pos:end="435:49">-</operator> <operator pos:start="435:51" pos:end="435:51">(</operator><name pos:start="435:52" pos:end="435:62">filter2Size</name> <operator pos:start="435:64" pos:end="435:64">-</operator> <literal type="number" pos:start="435:66" pos:end="435:66">1</literal><operator pos:start="435:67" pos:end="435:67">)</operator> <operator pos:start="435:69" pos:end="435:69">/</operator> <literal type="number" pos:start="435:71" pos:end="435:71">2</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="439:5" pos:end="439:22"><expr pos:start="439:5" pos:end="439:21"><call pos:start="439:5" pos:end="439:21"><name pos:start="439:5" pos:end="439:12">av_freep</name><argument_list pos:start="439:13" pos:end="439:21">(<argument pos:start="439:14" pos:end="439:20"><expr pos:start="439:14" pos:end="439:20"><operator pos:start="439:14" pos:end="439:14">&amp;</operator><name pos:start="439:15" pos:end="439:20">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="443:5" pos:end="443:72">/* try to reduce the filter-size (step1 find size and shift left) */</comment>

    <comment type="line" pos:start="445:5" pos:end="445:76">// Assume it is near normalized (*0.5 or *2.0 is OK but * 0.001 is not).</comment>

    <expr_stmt pos:start="447:5" pos:end="447:22"><expr pos:start="447:5" pos:end="447:21"><name pos:start="447:5" pos:end="447:17">minFilterSize</name> <operator pos:start="447:19" pos:end="447:19">=</operator> <literal type="number" pos:start="447:21" pos:end="447:21">0</literal></expr>;</expr_stmt>

    <for pos:start="449:5" pos:end="523:5">for <control pos:start="449:9" pos:end="449:35">(<init pos:start="449:10" pos:end="449:22"><expr pos:start="449:10" pos:end="449:21"><name pos:start="449:10" pos:end="449:10">i</name> <operator pos:start="449:12" pos:end="449:12">=</operator> <name pos:start="449:14" pos:end="449:17">dstW</name> <operator pos:start="449:19" pos:end="449:19">-</operator> <literal type="number" pos:start="449:21" pos:end="449:21">1</literal></expr>;</init> <condition pos:start="449:24" pos:end="449:30"><expr pos:start="449:24" pos:end="449:29"><name pos:start="449:24" pos:end="449:24">i</name> <operator pos:start="449:26" pos:end="449:27">&gt;=</operator> <literal type="number" pos:start="449:29" pos:end="449:29">0</literal></expr>;</condition> <incr pos:start="449:32" pos:end="449:34"><expr pos:start="449:32" pos:end="449:34"><name pos:start="449:32" pos:end="449:32">i</name><operator pos:start="449:33" pos:end="449:34">--</operator></expr></incr>)</control> <block pos:start="449:37" pos:end="523:5">{<block_content pos:start="451:9" pos:end="521:32">

        <decl_stmt pos:start="451:9" pos:end="451:30"><decl pos:start="451:9" pos:end="451:29"><type pos:start="451:9" pos:end="451:11"><name pos:start="451:9" pos:end="451:11">int</name></type> <name pos:start="451:13" pos:end="451:15">min</name> <init pos:start="451:17" pos:end="451:29">= <expr pos:start="451:19" pos:end="451:29"><name pos:start="451:19" pos:end="451:29">filter2Size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="453:9" pos:end="453:14"><decl pos:start="453:9" pos:end="453:13"><type pos:start="453:9" pos:end="453:11"><name pos:start="453:9" pos:end="453:11">int</name></type> <name pos:start="453:13" pos:end="453:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="455:9" pos:end="455:29"><decl pos:start="455:9" pos:end="455:28"><type pos:start="455:9" pos:end="455:15"><name pos:start="455:9" pos:end="455:15">int64_t</name></type> <name pos:start="455:17" pos:end="455:22">cutOff</name> <init pos:start="455:24" pos:end="455:28">= <expr pos:start="455:26" pos:end="455:28"><literal type="number" pos:start="455:26" pos:end="455:28">0.0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="459:9" pos:end="459:72">/* get rid of near zero elements on the left by shifting left */</comment>

        <for pos:start="461:9" pos:end="495:9">for <control pos:start="461:13" pos:end="461:41">(<init pos:start="461:14" pos:end="461:19"><expr pos:start="461:14" pos:end="461:18"><name pos:start="461:14" pos:end="461:14">j</name> <operator pos:start="461:16" pos:end="461:16">=</operator> <literal type="number" pos:start="461:18" pos:end="461:18">0</literal></expr>;</init> <condition pos:start="461:21" pos:end="461:36"><expr pos:start="461:21" pos:end="461:35"><name pos:start="461:21" pos:end="461:21">j</name> <operator pos:start="461:23" pos:end="461:23">&lt;</operator> <name pos:start="461:25" pos:end="461:35">filter2Size</name></expr>;</condition> <incr pos:start="461:38" pos:end="461:40"><expr pos:start="461:38" pos:end="461:40"><name pos:start="461:38" pos:end="461:38">j</name><operator pos:start="461:39" pos:end="461:40">++</operator></expr></incr>)</control> <block pos:start="461:43" pos:end="495:9">{<block_content pos:start="463:13" pos:end="493:30">

            <decl_stmt pos:start="463:13" pos:end="463:18"><decl pos:start="463:13" pos:end="463:17"><type pos:start="463:13" pos:end="463:15"><name pos:start="463:13" pos:end="463:15">int</name></type> <name pos:start="463:17" pos:end="463:17">k</name></decl>;</decl_stmt>

            <expr_stmt pos:start="465:13" pos:end="465:54"><expr pos:start="465:13" pos:end="465:53"><name pos:start="465:13" pos:end="465:18">cutOff</name> <operator pos:start="465:20" pos:end="465:21">+=</operator> <call pos:start="465:23" pos:end="465:53"><name pos:start="465:23" pos:end="465:27">FFABS</name><argument_list pos:start="465:28" pos:end="465:53">(<argument pos:start="465:29" pos:end="465:52"><expr pos:start="465:29" pos:end="465:52"><name pos:start="465:29" pos:end="465:52"><name pos:start="465:29" pos:end="465:35">filter2</name><index pos:start="465:36" pos:end="465:52">[<expr pos:start="465:37" pos:end="465:51"><name pos:start="465:37" pos:end="465:37">i</name> <operator pos:start="465:39" pos:end="465:39">*</operator> <name pos:start="465:41" pos:end="465:51">filter2Size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="469:13" pos:end="471:22"><if pos:start="469:13" pos:end="471:22">if <condition pos:start="469:16" pos:end="469:54">(<expr pos:start="469:17" pos:end="469:53"><name pos:start="469:17" pos:end="469:22">cutOff</name> <operator pos:start="469:24" pos:end="469:24">&gt;</operator> <name pos:start="469:26" pos:end="469:46">SWS_MAX_REDUCE_CUTOFF</name> <operator pos:start="469:48" pos:end="469:48">*</operator> <name pos:start="469:50" pos:end="469:53">fone</name></expr>)</condition><block type="pseudo" pos:start="471:17" pos:end="471:22"><block_content pos:start="471:17" pos:end="471:22">

                <break pos:start="471:17" pos:end="471:22">break;</break></block_content></block></if></if_stmt>



            <comment type="block" pos:start="475:13" pos:end="477:34">/* preserve monotonicity because the core can't handle the

             * filter otherwise */</comment>

            <if_stmt pos:start="479:13" pos:end="481:22"><if pos:start="479:13" pos:end="481:22">if <condition pos:start="479:16" pos:end="479:71">(<expr pos:start="479:17" pos:end="479:70"><name pos:start="479:17" pos:end="479:17">i</name> <operator pos:start="479:19" pos:end="479:19">&lt;</operator> <name pos:start="479:21" pos:end="479:24">dstW</name> <operator pos:start="479:26" pos:end="479:26">-</operator> <literal type="number" pos:start="479:28" pos:end="479:28">1</literal> <operator pos:start="479:30" pos:end="479:31">&amp;&amp;</operator> <operator pos:start="479:33" pos:end="479:33">(</operator><operator pos:start="479:34" pos:end="479:34">*</operator><name pos:start="479:35" pos:end="479:43">filterPos</name><operator pos:start="479:44" pos:end="479:44">)</operator><index pos:start="479:45" pos:end="479:47">[<expr pos:start="479:46" pos:end="479:46"><name pos:start="479:46" pos:end="479:46">i</name></expr>]</index> <operator pos:start="479:49" pos:end="479:50">&gt;=</operator> <operator pos:start="479:52" pos:end="479:52">(</operator><operator pos:start="479:53" pos:end="479:53">*</operator><name pos:start="479:54" pos:end="479:62">filterPos</name><operator pos:start="479:63" pos:end="479:63">)</operator><index pos:start="479:64" pos:end="479:70">[<expr pos:start="479:65" pos:end="479:69"><name pos:start="479:65" pos:end="479:65">i</name> <operator pos:start="479:67" pos:end="479:67">+</operator> <literal type="number" pos:start="479:69" pos:end="479:69">1</literal></expr>]</index></expr>)</condition><block type="pseudo" pos:start="481:17" pos:end="481:22"><block_content pos:start="481:17" pos:end="481:22">

                <break pos:start="481:17" pos:end="481:22">break;</break></block_content></block></if></if_stmt>



            <comment type="line" pos:start="485:13" pos:end="485:44">// move filter coefficients left</comment>

            <for pos:start="487:13" pos:end="489:80">for <control pos:start="487:17" pos:end="487:45">(<init pos:start="487:18" pos:end="487:23"><expr pos:start="487:18" pos:end="487:22"><name pos:start="487:18" pos:end="487:18">k</name> <operator pos:start="487:20" pos:end="487:20">=</operator> <literal type="number" pos:start="487:22" pos:end="487:22">1</literal></expr>;</init> <condition pos:start="487:25" pos:end="487:40"><expr pos:start="487:25" pos:end="487:39"><name pos:start="487:25" pos:end="487:25">k</name> <operator pos:start="487:27" pos:end="487:27">&lt;</operator> <name pos:start="487:29" pos:end="487:39">filter2Size</name></expr>;</condition> <incr pos:start="487:42" pos:end="487:44"><expr pos:start="487:42" pos:end="487:44"><name pos:start="487:42" pos:end="487:42">k</name><operator pos:start="487:43" pos:end="487:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="489:17" pos:end="489:80"><block_content pos:start="489:17" pos:end="489:80">

                <expr_stmt pos:start="489:17" pos:end="489:80"><expr pos:start="489:17" pos:end="489:79"><name pos:start="489:17" pos:end="489:48"><name pos:start="489:17" pos:end="489:23">filter2</name><index pos:start="489:24" pos:end="489:48">[<expr pos:start="489:25" pos:end="489:47"><name pos:start="489:25" pos:end="489:25">i</name> <operator pos:start="489:27" pos:end="489:27">*</operator> <name pos:start="489:29" pos:end="489:39">filter2Size</name> <operator pos:start="489:41" pos:end="489:41">+</operator> <name pos:start="489:43" pos:end="489:43">k</name> <operator pos:start="489:45" pos:end="489:45">-</operator> <literal type="number" pos:start="489:47" pos:end="489:47">1</literal></expr>]</index></name> <operator pos:start="489:50" pos:end="489:50">=</operator> <name pos:start="489:52" pos:end="489:79"><name pos:start="489:52" pos:end="489:58">filter2</name><index pos:start="489:59" pos:end="489:79">[<expr pos:start="489:60" pos:end="489:78"><name pos:start="489:60" pos:end="489:60">i</name> <operator pos:start="489:62" pos:end="489:62">*</operator> <name pos:start="489:64" pos:end="489:74">filter2Size</name> <operator pos:start="489:76" pos:end="489:76">+</operator> <name pos:start="489:78" pos:end="489:78">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="491:13" pos:end="491:49"><expr pos:start="491:13" pos:end="491:48"><name pos:start="491:13" pos:end="491:44"><name pos:start="491:13" pos:end="491:19">filter2</name><index pos:start="491:20" pos:end="491:44">[<expr pos:start="491:21" pos:end="491:43"><name pos:start="491:21" pos:end="491:21">i</name> <operator pos:start="491:23" pos:end="491:23">*</operator> <name pos:start="491:25" pos:end="491:35">filter2Size</name> <operator pos:start="491:37" pos:end="491:37">+</operator> <name pos:start="491:39" pos:end="491:39">k</name> <operator pos:start="491:41" pos:end="491:41">-</operator> <literal type="number" pos:start="491:43" pos:end="491:43">1</literal></expr>]</index></name> <operator pos:start="491:46" pos:end="491:46">=</operator> <literal type="number" pos:start="491:48" pos:end="491:48">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="493:13" pos:end="493:30"><expr pos:start="493:13" pos:end="493:29"><operator pos:start="493:13" pos:end="493:13">(</operator><operator pos:start="493:14" pos:end="493:14">*</operator><name pos:start="493:15" pos:end="493:23">filterPos</name><operator pos:start="493:24" pos:end="493:24">)</operator><index pos:start="493:25" pos:end="493:27">[<expr pos:start="493:26" pos:end="493:26"><name pos:start="493:26" pos:end="493:26">i</name></expr>]</index><operator pos:start="493:28" pos:end="493:29">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="499:9" pos:end="499:19"><expr pos:start="499:9" pos:end="499:18"><name pos:start="499:9" pos:end="499:14">cutOff</name> <operator pos:start="499:16" pos:end="499:16">=</operator> <literal type="number" pos:start="499:18" pos:end="499:18">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="501:9" pos:end="501:43">/* count near zeros on the right */</comment>

        <for pos:start="503:9" pos:end="515:9">for <control pos:start="503:13" pos:end="503:45">(<init pos:start="503:14" pos:end="503:33"><expr pos:start="503:14" pos:end="503:32"><name pos:start="503:14" pos:end="503:14">j</name> <operator pos:start="503:16" pos:end="503:16">=</operator> <name pos:start="503:18" pos:end="503:28">filter2Size</name> <operator pos:start="503:30" pos:end="503:30">-</operator> <literal type="number" pos:start="503:32" pos:end="503:32">1</literal></expr>;</init> <condition pos:start="503:35" pos:end="503:40"><expr pos:start="503:35" pos:end="503:39"><name pos:start="503:35" pos:end="503:35">j</name> <operator pos:start="503:37" pos:end="503:37">&gt;</operator> <literal type="number" pos:start="503:39" pos:end="503:39">0</literal></expr>;</condition> <incr pos:start="503:42" pos:end="503:44"><expr pos:start="503:42" pos:end="503:44"><name pos:start="503:42" pos:end="503:42">j</name><operator pos:start="503:43" pos:end="503:44">--</operator></expr></incr>)</control> <block pos:start="503:47" pos:end="515:9">{<block_content pos:start="505:13" pos:end="513:18">

            <expr_stmt pos:start="505:13" pos:end="505:58"><expr pos:start="505:13" pos:end="505:57"><name pos:start="505:13" pos:end="505:18">cutOff</name> <operator pos:start="505:20" pos:end="505:21">+=</operator> <call pos:start="505:23" pos:end="505:57"><name pos:start="505:23" pos:end="505:27">FFABS</name><argument_list pos:start="505:28" pos:end="505:57">(<argument pos:start="505:29" pos:end="505:56"><expr pos:start="505:29" pos:end="505:56"><name pos:start="505:29" pos:end="505:56"><name pos:start="505:29" pos:end="505:35">filter2</name><index pos:start="505:36" pos:end="505:56">[<expr pos:start="505:37" pos:end="505:55"><name pos:start="505:37" pos:end="505:37">i</name> <operator pos:start="505:39" pos:end="505:39">*</operator> <name pos:start="505:41" pos:end="505:51">filter2Size</name> <operator pos:start="505:53" pos:end="505:53">+</operator> <name pos:start="505:55" pos:end="505:55">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="509:13" pos:end="511:22"><if pos:start="509:13" pos:end="511:22">if <condition pos:start="509:16" pos:end="509:54">(<expr pos:start="509:17" pos:end="509:53"><name pos:start="509:17" pos:end="509:22">cutOff</name> <operator pos:start="509:24" pos:end="509:24">&gt;</operator> <name pos:start="509:26" pos:end="509:46">SWS_MAX_REDUCE_CUTOFF</name> <operator pos:start="509:48" pos:end="509:48">*</operator> <name pos:start="509:50" pos:end="509:53">fone</name></expr>)</condition><block type="pseudo" pos:start="511:17" pos:end="511:22"><block_content pos:start="511:17" pos:end="511:22">

                <break pos:start="511:17" pos:end="511:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="513:13" pos:end="513:18"><expr pos:start="513:13" pos:end="513:17"><name pos:start="513:13" pos:end="513:15">min</name><operator pos:start="513:16" pos:end="513:17">--</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="519:9" pos:end="521:32"><if pos:start="519:9" pos:end="521:32">if <condition pos:start="519:12" pos:end="519:32">(<expr pos:start="519:13" pos:end="519:31"><name pos:start="519:13" pos:end="519:15">min</name> <operator pos:start="519:17" pos:end="519:17">&gt;</operator> <name pos:start="519:19" pos:end="519:31">minFilterSize</name></expr>)</condition><block type="pseudo" pos:start="521:13" pos:end="521:32"><block_content pos:start="521:13" pos:end="521:32">

            <expr_stmt pos:start="521:13" pos:end="521:32"><expr pos:start="521:13" pos:end="521:31"><name pos:start="521:13" pos:end="521:25">minFilterSize</name> <operator pos:start="521:27" pos:end="521:27">=</operator> <name pos:start="521:29" pos:end="521:31">min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="527:5" pos:end="547:5"><if pos:start="527:5" pos:end="547:5">if <condition pos:start="527:8" pos:end="527:31">(<expr pos:start="527:9" pos:end="527:30"><call pos:start="527:9" pos:end="527:30"><name pos:start="527:9" pos:end="527:19">PPC_ALTIVEC</name><argument_list pos:start="527:20" pos:end="527:30">(<argument pos:start="527:21" pos:end="527:29"><expr pos:start="527:21" pos:end="527:29"><name pos:start="527:21" pos:end="527:29">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="527:33" pos:end="547:5">{<block_content pos:start="531:9" pos:end="545:28">

        <comment type="line" pos:start="529:9" pos:end="529:78">// we can handle the special case 4, so we don't want to go the full 8</comment>

        <if_stmt pos:start="531:9" pos:end="533:28"><if pos:start="531:9" pos:end="533:28">if <condition pos:start="531:12" pos:end="531:30">(<expr pos:start="531:13" pos:end="531:29"><name pos:start="531:13" pos:end="531:25">minFilterSize</name> <operator pos:start="531:27" pos:end="531:27">&lt;</operator> <literal type="number" pos:start="531:29" pos:end="531:29">5</literal></expr>)</condition><block type="pseudo" pos:start="533:13" pos:end="533:28"><block_content pos:start="533:13" pos:end="533:28">

            <expr_stmt pos:start="533:13" pos:end="533:28"><expr pos:start="533:13" pos:end="533:27"><name pos:start="533:13" pos:end="533:23">filterAlign</name> <operator pos:start="533:25" pos:end="533:25">=</operator> <literal type="number" pos:start="533:27" pos:end="533:27">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="537:9" pos:end="541:77">/* We really don't want to waste our time doing useless computation, so

         * fall back on the scalar C code for very small filters.

         * Vectorizing is worth it only if you have a decent-sized vector. */</comment>

        <if_stmt pos:start="543:9" pos:end="545:28"><if pos:start="543:9" pos:end="545:28">if <condition pos:start="543:12" pos:end="543:30">(<expr pos:start="543:13" pos:end="543:29"><name pos:start="543:13" pos:end="543:25">minFilterSize</name> <operator pos:start="543:27" pos:end="543:27">&lt;</operator> <literal type="number" pos:start="543:29" pos:end="543:29">3</literal></expr>)</condition><block type="pseudo" pos:start="545:13" pos:end="545:28"><block_content pos:start="545:13" pos:end="545:28">

            <expr_stmt pos:start="545:13" pos:end="545:28"><expr pos:start="545:13" pos:end="545:27"><name pos:start="545:13" pos:end="545:23">filterAlign</name> <operator pos:start="545:25" pos:end="545:25">=</operator> <literal type="number" pos:start="545:27" pos:end="545:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="551:5" pos:end="559:5"><if pos:start="551:5" pos:end="559:5">if <condition pos:start="551:8" pos:end="551:48">(<expr pos:start="551:9" pos:end="551:47"><name pos:start="551:9" pos:end="551:16">HAVE_MMX</name> <operator pos:start="551:18" pos:end="551:19">&amp;&amp;</operator> <name pos:start="551:21" pos:end="551:29">cpu_flags</name> <operator pos:start="551:31" pos:end="551:31">&amp;</operator> <name pos:start="551:33" pos:end="551:47">AV_CPU_FLAG_MMX</name></expr>)</condition> <block pos:start="551:50" pos:end="559:5">{<block_content pos:start="555:9" pos:end="557:28">

        <comment type="line" pos:start="553:9" pos:end="553:55">// special case for unscaled vertical filtering</comment>

        <if_stmt pos:start="555:9" pos:end="557:28"><if pos:start="555:9" pos:end="557:28">if <condition pos:start="555:12" pos:end="555:51">(<expr pos:start="555:13" pos:end="555:50"><name pos:start="555:13" pos:end="555:25">minFilterSize</name> <operator pos:start="555:27" pos:end="555:28">==</operator> <literal type="number" pos:start="555:30" pos:end="555:30">1</literal> <operator pos:start="555:32" pos:end="555:33">&amp;&amp;</operator> <name pos:start="555:35" pos:end="555:45">filterAlign</name> <operator pos:start="555:47" pos:end="555:48">==</operator> <literal type="number" pos:start="555:50" pos:end="555:50">2</literal></expr>)</condition><block type="pseudo" pos:start="557:13" pos:end="557:28"><block_content pos:start="557:13" pos:end="557:28">

            <expr_stmt pos:start="557:13" pos:end="557:28"><expr pos:start="557:13" pos:end="557:27"><name pos:start="557:13" pos:end="557:23">filterAlign</name> <operator pos:start="557:25" pos:end="557:25">=</operator> <literal type="number" pos:start="557:27" pos:end="557:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="563:5" pos:end="563:34"><expr pos:start="563:5" pos:end="563:33"><call pos:start="563:5" pos:end="563:33"><name pos:start="563:5" pos:end="563:14">av_assert0</name><argument_list pos:start="563:15" pos:end="563:33">(<argument pos:start="563:16" pos:end="563:32"><expr pos:start="563:16" pos:end="563:32"><name pos:start="563:16" pos:end="563:28">minFilterSize</name> <operator pos:start="563:30" pos:end="563:30">&gt;</operator> <literal type="number" pos:start="563:32" pos:end="563:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="565:5" pos:end="565:76"><expr pos:start="565:5" pos:end="565:75"><name pos:start="565:5" pos:end="565:14">filterSize</name> <operator pos:start="565:16" pos:end="565:16">=</operator> <operator pos:start="565:18" pos:end="565:18">(</operator><name pos:start="565:19" pos:end="565:31">minFilterSize</name> <operator pos:start="565:33" pos:end="565:33">+</operator> <operator pos:start="565:35" pos:end="565:35">(</operator><name pos:start="565:36" pos:end="565:46">filterAlign</name> <operator pos:start="565:48" pos:end="565:48">-</operator> <literal type="number" pos:start="565:50" pos:end="565:50">1</literal><operator pos:start="565:51" pos:end="565:51">)</operator><operator pos:start="565:52" pos:end="565:52">)</operator> <operator pos:start="565:54" pos:end="565:54">&amp;</operator> <operator pos:start="565:56" pos:end="565:56">(</operator><operator pos:start="565:57" pos:end="565:57">~</operator><operator pos:start="565:58" pos:end="565:58">(</operator><name pos:start="565:59" pos:end="565:69">filterAlign</name> <operator pos:start="565:71" pos:end="565:71">-</operator> <literal type="number" pos:start="565:73" pos:end="565:73">1</literal><operator pos:start="565:74" pos:end="565:74">)</operator><operator pos:start="565:75" pos:end="565:75">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="567:5" pos:end="567:31"><expr pos:start="567:5" pos:end="567:30"><call pos:start="567:5" pos:end="567:30"><name pos:start="567:5" pos:end="567:14">av_assert0</name><argument_list pos:start="567:15" pos:end="567:30">(<argument pos:start="567:16" pos:end="567:29"><expr pos:start="567:16" pos:end="567:29"><name pos:start="567:16" pos:end="567:25">filterSize</name> <operator pos:start="567:27" pos:end="567:27">&gt;</operator> <literal type="number" pos:start="567:29" pos:end="567:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="569:5" pos:end="569:65"><expr pos:start="569:5" pos:end="569:64"><name pos:start="569:5" pos:end="569:10">filter</name> <operator pos:start="569:12" pos:end="569:12">=</operator> <call pos:start="569:14" pos:end="569:64"><name pos:start="569:14" pos:end="569:28">av_malloc_array</name><argument_list pos:start="569:29" pos:end="569:64">(<argument pos:start="569:30" pos:end="569:33"><expr pos:start="569:30" pos:end="569:33"><name pos:start="569:30" pos:end="569:33">dstW</name></expr></argument>, <argument pos:start="569:36" pos:end="569:63"><expr pos:start="569:36" pos:end="569:63"><name pos:start="569:36" pos:end="569:45">filterSize</name> <operator pos:start="569:47" pos:end="569:47">*</operator> <sizeof pos:start="569:49" pos:end="569:63">sizeof<argument_list pos:start="569:55" pos:end="569:63">(<argument pos:start="569:56" pos:end="569:62"><expr pos:start="569:56" pos:end="569:62"><operator pos:start="569:56" pos:end="569:56">*</operator><name pos:start="569:57" pos:end="569:62">filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="571:5" pos:end="573:18"><if pos:start="571:5" pos:end="573:18">if <condition pos:start="571:8" pos:end="571:16">(<expr pos:start="571:9" pos:end="571:15"><operator pos:start="571:9" pos:end="571:9">!</operator><name pos:start="571:10" pos:end="571:15">filter</name></expr>)</condition><block type="pseudo" pos:start="573:9" pos:end="573:18"><block_content pos:start="573:9" pos:end="573:18">

        <goto pos:start="573:9" pos:end="573:18">goto <name pos:start="573:14" pos:end="573:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="575:5" pos:end="583:5"><if pos:start="575:5" pos:end="583:5">if <condition pos:start="575:8" pos:end="577:68">(<expr pos:start="575:9" pos:end="577:67"><name pos:start="575:9" pos:end="575:18">filterSize</name> <operator pos:start="575:20" pos:end="575:21">&gt;=</operator> <name pos:start="575:23" pos:end="575:37">MAX_FILTER_SIZE</name> <operator pos:start="575:39" pos:end="575:39">*</operator> <literal type="number" pos:start="575:41" pos:end="575:42">16</literal> <operator pos:start="575:44" pos:end="575:44">/</operator>

                      <operator pos:start="577:23" pos:end="577:23">(</operator><ternary pos:start="577:24" pos:end="577:66"><condition pos:start="577:24" pos:end="577:51"><expr pos:start="577:24" pos:end="577:49"><operator pos:start="577:24" pos:end="577:24">(</operator><name pos:start="577:25" pos:end="577:29">flags</name> <operator pos:start="577:31" pos:end="577:31">&amp;</operator> <name pos:start="577:33" pos:end="577:48">SWS_ACCURATE_RND</name><operator pos:start="577:49" pos:end="577:49">)</operator></expr> ?</condition><then pos:start="577:53" pos:end="577:61"> <expr pos:start="577:53" pos:end="577:61"><name pos:start="577:53" pos:end="577:61">APCK_SIZE</name></expr> </then><else pos:start="577:63" pos:end="577:66">: <expr pos:start="577:65" pos:end="577:66"><literal type="number" pos:start="577:65" pos:end="577:66">16</literal></expr></else></ternary><operator pos:start="577:67" pos:end="577:67">)</operator></expr>)</condition> <block pos:start="577:70" pos:end="583:5">{<block_content pos:start="579:9" pos:end="581:18">

        <expr_stmt pos:start="579:9" pos:end="579:34"><expr pos:start="579:9" pos:end="579:33"><name pos:start="579:9" pos:end="579:11">ret</name> <operator pos:start="579:13" pos:end="579:13">=</operator> <name pos:start="579:15" pos:end="579:33">RETCODE_USE_CASCADE</name></expr>;</expr_stmt>

        <goto pos:start="581:9" pos:end="581:18">goto <name pos:start="581:14" pos:end="581:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="585:5" pos:end="585:32"><expr pos:start="585:5" pos:end="585:31"><operator pos:start="585:5" pos:end="585:5">*</operator><name pos:start="585:6" pos:end="585:18">outFilterSize</name> <operator pos:start="585:20" pos:end="585:20">=</operator> <name pos:start="585:22" pos:end="585:31">filterSize</name></expr>;</expr_stmt>



    <if_stmt pos:start="589:5" pos:end="595:40"><if pos:start="589:5" pos:end="595:40">if <condition pos:start="589:8" pos:end="589:31">(<expr pos:start="589:9" pos:end="589:30"><name pos:start="589:9" pos:end="589:13">flags</name> <operator pos:start="589:15" pos:end="589:15">&amp;</operator> <name pos:start="589:17" pos:end="589:30">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="591:9" pos:end="595:40"><block_content pos:start="591:9" pos:end="595:40">

        <expr_stmt pos:start="591:9" pos:end="595:40"><expr pos:start="591:9" pos:end="595:39"><call pos:start="591:9" pos:end="595:39"><name pos:start="591:9" pos:end="591:14">av_log</name><argument_list pos:start="591:15" pos:end="595:39">(<argument pos:start="591:16" pos:end="591:19"><expr pos:start="591:16" pos:end="591:19"><name pos:start="591:16" pos:end="591:19">NULL</name></expr></argument>, <argument pos:start="591:22" pos:end="591:35"><expr pos:start="591:22" pos:end="591:35"><name pos:start="591:22" pos:end="591:35">AV_LOG_VERBOSE</name></expr></argument>,

               <argument pos:start="593:16" pos:end="593:68"><expr pos:start="593:16" pos:end="593:68"><literal type="string" pos:start="593:16" pos:end="593:68">"SwScaler: reducing / aligning filtersize %d -&gt; %d\n"</literal></expr></argument>,

               <argument pos:start="595:16" pos:end="595:26"><expr pos:start="595:16" pos:end="595:26"><name pos:start="595:16" pos:end="595:26">filter2Size</name></expr></argument>, <argument pos:start="595:29" pos:end="595:38"><expr pos:start="595:29" pos:end="595:38"><name pos:start="595:29" pos:end="595:38">filterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="597:5" pos:end="597:57">/* try to reduce the filter-size (step2 reduce it) */</comment>

    <for pos:start="599:5" pos:end="621:5">for <control pos:start="599:9" pos:end="599:30">(<init pos:start="599:10" pos:end="599:15"><expr pos:start="599:10" pos:end="599:14"><name pos:start="599:10" pos:end="599:10">i</name> <operator pos:start="599:12" pos:end="599:12">=</operator> <literal type="number" pos:start="599:14" pos:end="599:14">0</literal></expr>;</init> <condition pos:start="599:17" pos:end="599:25"><expr pos:start="599:17" pos:end="599:24"><name pos:start="599:17" pos:end="599:17">i</name> <operator pos:start="599:19" pos:end="599:19">&lt;</operator> <name pos:start="599:21" pos:end="599:24">dstW</name></expr>;</condition> <incr pos:start="599:27" pos:end="599:29"><expr pos:start="599:27" pos:end="599:29"><name pos:start="599:27" pos:end="599:27">i</name><operator pos:start="599:28" pos:end="599:29">++</operator></expr></incr>)</control> <block pos:start="599:32" pos:end="621:5">{<block_content pos:start="601:9" pos:end="619:9">

        <decl_stmt pos:start="601:9" pos:end="601:14"><decl pos:start="601:9" pos:end="601:13"><type pos:start="601:9" pos:end="601:11"><name pos:start="601:9" pos:end="601:11">int</name></type> <name pos:start="601:13" pos:end="601:13">j</name></decl>;</decl_stmt>



        <for pos:start="605:9" pos:end="619:9">for <control pos:start="605:13" pos:end="605:40">(<init pos:start="605:14" pos:end="605:19"><expr pos:start="605:14" pos:end="605:18"><name pos:start="605:14" pos:end="605:14">j</name> <operator pos:start="605:16" pos:end="605:16">=</operator> <literal type="number" pos:start="605:18" pos:end="605:18">0</literal></expr>;</init> <condition pos:start="605:21" pos:end="605:35"><expr pos:start="605:21" pos:end="605:34"><name pos:start="605:21" pos:end="605:21">j</name> <operator pos:start="605:23" pos:end="605:23">&lt;</operator> <name pos:start="605:25" pos:end="605:34">filterSize</name></expr>;</condition> <incr pos:start="605:37" pos:end="605:39"><expr pos:start="605:37" pos:end="605:39"><name pos:start="605:37" pos:end="605:37">j</name><operator pos:start="605:38" pos:end="605:39">++</operator></expr></incr>)</control> <block pos:start="605:42" pos:end="619:9">{<block_content pos:start="607:13" pos:end="617:47">

            <if_stmt pos:start="607:13" pos:end="613:74"><if pos:start="607:13" pos:end="609:47">if <condition pos:start="607:16" pos:end="607:33">(<expr pos:start="607:17" pos:end="607:32"><name pos:start="607:17" pos:end="607:17">j</name> <operator pos:start="607:19" pos:end="607:20">&gt;=</operator> <name pos:start="607:22" pos:end="607:32">filter2Size</name></expr>)</condition><block type="pseudo" pos:start="609:17" pos:end="609:47"><block_content pos:start="609:17" pos:end="609:47">

                <expr_stmt pos:start="609:17" pos:end="609:47"><expr pos:start="609:17" pos:end="609:46"><name pos:start="609:17" pos:end="609:42"><name pos:start="609:17" pos:end="609:22">filter</name><index pos:start="609:23" pos:end="609:42">[<expr pos:start="609:24" pos:end="609:41"><name pos:start="609:24" pos:end="609:24">i</name> <operator pos:start="609:26" pos:end="609:26">*</operator> <name pos:start="609:28" pos:end="609:37">filterSize</name> <operator pos:start="609:39" pos:end="609:39">+</operator> <name pos:start="609:41" pos:end="609:41">j</name></expr>]</index></name> <operator pos:start="609:44" pos:end="609:44">=</operator> <literal type="number" pos:start="609:46" pos:end="609:46">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="611:13" pos:end="613:74">else<block type="pseudo" pos:start="613:17" pos:end="613:74"><block_content pos:start="613:17" pos:end="613:74">

                <expr_stmt pos:start="613:17" pos:end="613:74"><expr pos:start="613:17" pos:end="613:73"><name pos:start="613:17" pos:end="613:42"><name pos:start="613:17" pos:end="613:22">filter</name><index pos:start="613:23" pos:end="613:42">[<expr pos:start="613:24" pos:end="613:41"><name pos:start="613:24" pos:end="613:24">i</name> <operator pos:start="613:26" pos:end="613:26">*</operator> <name pos:start="613:28" pos:end="613:37">filterSize</name> <operator pos:start="613:39" pos:end="613:39">+</operator> <name pos:start="613:41" pos:end="613:41">j</name></expr>]</index></name> <operator pos:start="613:44" pos:end="613:44">=</operator> <name pos:start="613:46" pos:end="613:73"><name pos:start="613:46" pos:end="613:52">filter2</name><index pos:start="613:53" pos:end="613:73">[<expr pos:start="613:54" pos:end="613:72"><name pos:start="613:54" pos:end="613:54">i</name> <operator pos:start="613:56" pos:end="613:56">*</operator> <name pos:start="613:58" pos:end="613:68">filter2Size</name> <operator pos:start="613:70" pos:end="613:70">+</operator> <name pos:start="613:72" pos:end="613:72">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="615:13" pos:end="617:47"><if pos:start="615:13" pos:end="617:47">if <condition pos:start="615:16" pos:end="615:61">(<expr pos:start="615:17" pos:end="615:60"><operator pos:start="615:17" pos:end="615:17">(</operator><name pos:start="615:18" pos:end="615:22">flags</name> <operator pos:start="615:24" pos:end="615:24">&amp;</operator> <name pos:start="615:26" pos:end="615:37">SWS_BITEXACT</name><operator pos:start="615:38" pos:end="615:38">)</operator> <operator pos:start="615:40" pos:end="615:41">&amp;&amp;</operator> <name pos:start="615:43" pos:end="615:43">j</name> <operator pos:start="615:45" pos:end="615:46">&gt;=</operator> <name pos:start="615:48" pos:end="615:60">minFilterSize</name></expr>)</condition><block type="pseudo" pos:start="617:17" pos:end="617:47"><block_content pos:start="617:17" pos:end="617:47">

                <expr_stmt pos:start="617:17" pos:end="617:47"><expr pos:start="617:17" pos:end="617:46"><name pos:start="617:17" pos:end="617:42"><name pos:start="617:17" pos:end="617:22">filter</name><index pos:start="617:23" pos:end="617:42">[<expr pos:start="617:24" pos:end="617:41"><name pos:start="617:24" pos:end="617:24">i</name> <operator pos:start="617:26" pos:end="617:26">*</operator> <name pos:start="617:28" pos:end="617:37">filterSize</name> <operator pos:start="617:39" pos:end="617:39">+</operator> <name pos:start="617:41" pos:end="617:41">j</name></expr>]</index></name> <operator pos:start="617:44" pos:end="617:44">=</operator> <literal type="number" pos:start="617:46" pos:end="617:46">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="line" pos:start="625:5" pos:end="625:47">// FIXME try to align filterPos if possible</comment>



    <comment type="line" pos:start="629:5" pos:end="629:18">// fix borders</comment>

    <for pos:start="631:5" pos:end="677:5">for <control pos:start="631:9" pos:end="631:30">(<init pos:start="631:10" pos:end="631:15"><expr pos:start="631:10" pos:end="631:14"><name pos:start="631:10" pos:end="631:10">i</name> <operator pos:start="631:12" pos:end="631:12">=</operator> <literal type="number" pos:start="631:14" pos:end="631:14">0</literal></expr>;</init> <condition pos:start="631:17" pos:end="631:25"><expr pos:start="631:17" pos:end="631:24"><name pos:start="631:17" pos:end="631:17">i</name> <operator pos:start="631:19" pos:end="631:19">&lt;</operator> <name pos:start="631:21" pos:end="631:24">dstW</name></expr>;</condition> <incr pos:start="631:27" pos:end="631:29"><expr pos:start="631:27" pos:end="631:29"><name pos:start="631:27" pos:end="631:27">i</name><operator pos:start="631:28" pos:end="631:29">++</operator></expr></incr>)</control> <block pos:start="631:32" pos:end="677:5">{<block_content pos:start="633:9" pos:end="675:9">

        <decl_stmt pos:start="633:9" pos:end="633:14"><decl pos:start="633:9" pos:end="633:13"><type pos:start="633:9" pos:end="633:11"><name pos:start="633:9" pos:end="633:11">int</name></type> <name pos:start="633:13" pos:end="633:13">j</name></decl>;</decl_stmt>

        <if_stmt pos:start="635:9" pos:end="651:9"><if pos:start="635:9" pos:end="651:9">if <condition pos:start="635:12" pos:end="635:32">(<expr pos:start="635:13" pos:end="635:31"><operator pos:start="635:13" pos:end="635:13">(</operator><operator pos:start="635:14" pos:end="635:14">*</operator><name pos:start="635:15" pos:end="635:23">filterPos</name><operator pos:start="635:24" pos:end="635:24">)</operator><index pos:start="635:25" pos:end="635:27">[<expr pos:start="635:26" pos:end="635:26"><name pos:start="635:26" pos:end="635:26">i</name></expr>]</index> <operator pos:start="635:29" pos:end="635:29">&lt;</operator> <literal type="number" pos:start="635:31" pos:end="635:31">0</literal></expr>)</condition> <block pos:start="635:34" pos:end="651:9">{<block_content pos:start="639:13" pos:end="649:31">

            <comment type="line" pos:start="637:13" pos:end="637:72">// move filter coefficients left to compensate for filterPos</comment>

            <for pos:start="639:13" pos:end="647:13">for <control pos:start="639:17" pos:end="639:44">(<init pos:start="639:18" pos:end="639:23"><expr pos:start="639:18" pos:end="639:22"><name pos:start="639:18" pos:end="639:18">j</name> <operator pos:start="639:20" pos:end="639:20">=</operator> <literal type="number" pos:start="639:22" pos:end="639:22">1</literal></expr>;</init> <condition pos:start="639:25" pos:end="639:39"><expr pos:start="639:25" pos:end="639:38"><name pos:start="639:25" pos:end="639:25">j</name> <operator pos:start="639:27" pos:end="639:27">&lt;</operator> <name pos:start="639:29" pos:end="639:38">filterSize</name></expr>;</condition> <incr pos:start="639:41" pos:end="639:43"><expr pos:start="639:41" pos:end="639:43"><name pos:start="639:41" pos:end="639:41">j</name><operator pos:start="639:42" pos:end="639:43">++</operator></expr></incr>)</control> <block pos:start="639:46" pos:end="647:13">{<block_content pos:start="641:17" pos:end="645:51">

                <decl_stmt pos:start="641:17" pos:end="641:57"><decl pos:start="641:17" pos:end="641:56"><type pos:start="641:17" pos:end="641:19"><name pos:start="641:17" pos:end="641:19">int</name></type> <name pos:start="641:21" pos:end="641:24">left</name> <init pos:start="641:26" pos:end="641:56">= <expr pos:start="641:28" pos:end="641:56"><call pos:start="641:28" pos:end="641:56"><name pos:start="641:28" pos:end="641:32">FFMAX</name><argument_list pos:start="641:33" pos:end="641:56">(<argument pos:start="641:34" pos:end="641:52"><expr pos:start="641:34" pos:end="641:52"><name pos:start="641:34" pos:end="641:34">j</name> <operator pos:start="641:36" pos:end="641:36">+</operator> <operator pos:start="641:38" pos:end="641:38">(</operator><operator pos:start="641:39" pos:end="641:39">*</operator><name pos:start="641:40" pos:end="641:48">filterPos</name><operator pos:start="641:49" pos:end="641:49">)</operator><index pos:start="641:50" pos:end="641:52">[<expr pos:start="641:51" pos:end="641:51"><name pos:start="641:51" pos:end="641:51">i</name></expr>]</index></expr></argument>, <argument pos:start="641:55" pos:end="641:55"><expr pos:start="641:55" pos:end="641:55"><literal type="number" pos:start="641:55" pos:end="641:55">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="643:17" pos:end="643:76"><expr pos:start="643:17" pos:end="643:75"><name pos:start="643:17" pos:end="643:45"><name pos:start="643:17" pos:end="643:22">filter</name><index pos:start="643:23" pos:end="643:45">[<expr pos:start="643:24" pos:end="643:44"><name pos:start="643:24" pos:end="643:24">i</name> <operator pos:start="643:26" pos:end="643:26">*</operator> <name pos:start="643:28" pos:end="643:37">filterSize</name> <operator pos:start="643:39" pos:end="643:39">+</operator> <name pos:start="643:41" pos:end="643:44">left</name></expr>]</index></name> <operator pos:start="643:47" pos:end="643:48">+=</operator> <name pos:start="643:50" pos:end="643:75"><name pos:start="643:50" pos:end="643:55">filter</name><index pos:start="643:56" pos:end="643:75">[<expr pos:start="643:57" pos:end="643:74"><name pos:start="643:57" pos:end="643:57">i</name> <operator pos:start="643:59" pos:end="643:59">*</operator> <name pos:start="643:61" pos:end="643:70">filterSize</name> <operator pos:start="643:72" pos:end="643:72">+</operator> <name pos:start="643:74" pos:end="643:74">j</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="645:17" pos:end="645:51"><expr pos:start="645:17" pos:end="645:50"><name pos:start="645:17" pos:end="645:42"><name pos:start="645:17" pos:end="645:22">filter</name><index pos:start="645:23" pos:end="645:42">[<expr pos:start="645:24" pos:end="645:41"><name pos:start="645:24" pos:end="645:24">i</name> <operator pos:start="645:26" pos:end="645:26">*</operator> <name pos:start="645:28" pos:end="645:37">filterSize</name> <operator pos:start="645:39" pos:end="645:39">+</operator> <name pos:start="645:41" pos:end="645:41">j</name></expr>]</index></name>     <operator pos:start="645:48" pos:end="645:48">=</operator> <literal type="number" pos:start="645:50" pos:end="645:50">0</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="649:13" pos:end="649:31"><expr pos:start="649:13" pos:end="649:30"><operator pos:start="649:13" pos:end="649:13">(</operator><operator pos:start="649:14" pos:end="649:14">*</operator><name pos:start="649:15" pos:end="649:23">filterPos</name><operator pos:start="649:24" pos:end="649:24">)</operator><index pos:start="649:25" pos:end="649:27">[<expr pos:start="649:26" pos:end="649:26"><name pos:start="649:26" pos:end="649:26">i</name></expr>]</index><operator pos:start="649:28" pos:end="649:28">=</operator> <literal type="number" pos:start="649:30" pos:end="649:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="655:9" pos:end="675:9"><if pos:start="655:9" pos:end="675:9">if <condition pos:start="655:12" pos:end="655:48">(<expr pos:start="655:13" pos:end="655:47"><operator pos:start="655:13" pos:end="655:13">(</operator><operator pos:start="655:14" pos:end="655:14">*</operator><name pos:start="655:15" pos:end="655:23">filterPos</name><operator pos:start="655:24" pos:end="655:24">)</operator><index pos:start="655:25" pos:end="655:27">[<expr pos:start="655:26" pos:end="655:26"><name pos:start="655:26" pos:end="655:26">i</name></expr>]</index> <operator pos:start="655:29" pos:end="655:29">+</operator> <name pos:start="655:31" pos:end="655:40">filterSize</name> <operator pos:start="655:42" pos:end="655:42">&gt;</operator> <name pos:start="655:44" pos:end="655:47">srcW</name></expr>)</condition> <block pos:start="655:50" pos:end="675:9">{<block_content pos:start="657:13" pos:end="673:36">

            <decl_stmt pos:start="657:13" pos:end="657:70"><decl pos:start="657:13" pos:end="657:69"><type pos:start="657:13" pos:end="657:15"><name pos:start="657:13" pos:end="657:15">int</name></type> <name pos:start="657:17" pos:end="657:21">shift</name> <init pos:start="657:23" pos:end="657:69">= <expr pos:start="657:25" pos:end="657:69"><operator pos:start="657:25" pos:end="657:25">(</operator><operator pos:start="657:26" pos:end="657:26">*</operator><name pos:start="657:27" pos:end="657:35">filterPos</name><operator pos:start="657:36" pos:end="657:36">)</operator><index pos:start="657:37" pos:end="657:39">[<expr pos:start="657:38" pos:end="657:38"><name pos:start="657:38" pos:end="657:38">i</name></expr>]</index> <operator pos:start="657:41" pos:end="657:41">+</operator> <call pos:start="657:43" pos:end="657:69"><name pos:start="657:43" pos:end="657:47">FFMIN</name><argument_list pos:start="657:48" pos:end="657:69">(<argument pos:start="657:49" pos:end="657:65"><expr pos:start="657:49" pos:end="657:65"><name pos:start="657:49" pos:end="657:58">filterSize</name> <operator pos:start="657:60" pos:end="657:60">-</operator> <name pos:start="657:62" pos:end="657:65">srcW</name></expr></argument>, <argument pos:start="657:68" pos:end="657:68"><expr pos:start="657:68" pos:end="657:68"><literal type="number" pos:start="657:68" pos:end="657:68">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <comment type="line" pos:start="661:13" pos:end="661:73">// move filter coefficients right to compensate for filterPos</comment>

            <for pos:start="663:13" pos:end="671:13">for <control pos:start="663:17" pos:end="663:49">(<init pos:start="663:18" pos:end="663:36"><expr pos:start="663:18" pos:end="663:35"><name pos:start="663:18" pos:end="663:18">j</name> <operator pos:start="663:20" pos:end="663:20">=</operator> <name pos:start="663:22" pos:end="663:31">filterSize</name> <operator pos:start="663:33" pos:end="663:33">-</operator> <literal type="number" pos:start="663:35" pos:end="663:35">2</literal></expr>;</init> <condition pos:start="663:38" pos:end="663:44"><expr pos:start="663:38" pos:end="663:43"><name pos:start="663:38" pos:end="663:38">j</name> <operator pos:start="663:40" pos:end="663:41">&gt;=</operator> <literal type="number" pos:start="663:43" pos:end="663:43">0</literal></expr>;</condition> <incr pos:start="663:46" pos:end="663:48"><expr pos:start="663:46" pos:end="663:48"><name pos:start="663:46" pos:end="663:46">j</name><operator pos:start="663:47" pos:end="663:48">--</operator></expr></incr>)</control> <block pos:start="663:51" pos:end="671:13">{<block_content pos:start="665:17" pos:end="669:52">

                <decl_stmt pos:start="665:17" pos:end="665:61"><decl pos:start="665:17" pos:end="665:60"><type pos:start="665:17" pos:end="665:19"><name pos:start="665:17" pos:end="665:19">int</name></type> <name pos:start="665:21" pos:end="665:25">right</name> <init pos:start="665:27" pos:end="665:60">= <expr pos:start="665:29" pos:end="665:60"><call pos:start="665:29" pos:end="665:60"><name pos:start="665:29" pos:end="665:33">FFMIN</name><argument_list pos:start="665:34" pos:end="665:60">(<argument pos:start="665:35" pos:end="665:43"><expr pos:start="665:35" pos:end="665:43"><name pos:start="665:35" pos:end="665:35">j</name> <operator pos:start="665:37" pos:end="665:37">+</operator> <name pos:start="665:39" pos:end="665:43">shift</name></expr></argument>, <argument pos:start="665:46" pos:end="665:59"><expr pos:start="665:46" pos:end="665:59"><name pos:start="665:46" pos:end="665:55">filterSize</name> <operator pos:start="665:57" pos:end="665:57">-</operator> <literal type="number" pos:start="665:59" pos:end="665:59">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="667:17" pos:end="667:77"><expr pos:start="667:17" pos:end="667:76"><name pos:start="667:17" pos:end="667:46"><name pos:start="667:17" pos:end="667:22">filter</name><index pos:start="667:23" pos:end="667:46">[<expr pos:start="667:24" pos:end="667:45"><name pos:start="667:24" pos:end="667:24">i</name> <operator pos:start="667:26" pos:end="667:26">*</operator> <name pos:start="667:28" pos:end="667:37">filterSize</name> <operator pos:start="667:39" pos:end="667:39">+</operator> <name pos:start="667:41" pos:end="667:45">right</name></expr>]</index></name> <operator pos:start="667:48" pos:end="667:49">+=</operator> <name pos:start="667:51" pos:end="667:76"><name pos:start="667:51" pos:end="667:56">filter</name><index pos:start="667:57" pos:end="667:76">[<expr pos:start="667:58" pos:end="667:75"><name pos:start="667:58" pos:end="667:58">i</name> <operator pos:start="667:60" pos:end="667:60">*</operator> <name pos:start="667:62" pos:end="667:71">filterSize</name> <operator pos:start="667:73" pos:end="667:73">+</operator> <name pos:start="667:75" pos:end="667:75">j</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="669:17" pos:end="669:52"><expr pos:start="669:17" pos:end="669:51"><name pos:start="669:17" pos:end="669:42"><name pos:start="669:17" pos:end="669:22">filter</name><index pos:start="669:23" pos:end="669:42">[<expr pos:start="669:24" pos:end="669:41"><name pos:start="669:24" pos:end="669:24">i</name> <operator pos:start="669:26" pos:end="669:26">*</operator> <name pos:start="669:28" pos:end="669:37">filterSize</name> <operator pos:start="669:39" pos:end="669:39">+</operator> <name pos:start="669:41" pos:end="669:41">j</name></expr>]</index></name>      <operator pos:start="669:49" pos:end="669:49">=</operator> <literal type="number" pos:start="669:51" pos:end="669:51">0</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="673:13" pos:end="673:36"><expr pos:start="673:13" pos:end="673:35"><operator pos:start="673:13" pos:end="673:13">(</operator><operator pos:start="673:14" pos:end="673:14">*</operator><name pos:start="673:15" pos:end="673:23">filterPos</name><operator pos:start="673:24" pos:end="673:24">)</operator><index pos:start="673:25" pos:end="673:27">[<expr pos:start="673:26" pos:end="673:26"><name pos:start="673:26" pos:end="673:26">i</name></expr>]</index><operator pos:start="673:28" pos:end="673:29">-=</operator> <name pos:start="673:31" pos:end="673:35">shift</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="line" pos:start="681:5" pos:end="681:65">// Note the +1 is for the MMX scaler which reads over the end</comment>

    <comment type="block" pos:start="683:5" pos:end="683:65">/* align at 16 for AltiVec (needed by hScale_altivec_real) */</comment>

    <expr_stmt pos:start="685:5" pos:end="687:80"><expr pos:start="685:5" pos:end="687:79"><call pos:start="685:5" pos:end="687:79"><name pos:start="685:5" pos:end="685:27">FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list pos:start="685:28" pos:end="687:79">(<argument pos:start="685:29" pos:end="685:32"><expr pos:start="685:29" pos:end="685:32"><name pos:start="685:29" pos:end="685:32">NULL</name></expr></argument>, <argument pos:start="685:35" pos:end="685:44"><expr pos:start="685:35" pos:end="685:44"><operator pos:start="685:35" pos:end="685:35">*</operator><name pos:start="685:36" pos:end="685:44">outFilter</name></expr></argument>,

                            <argument pos:start="687:29" pos:end="687:38"><expr pos:start="687:29" pos:end="687:38"><operator pos:start="687:29" pos:end="687:29">(</operator><name pos:start="687:30" pos:end="687:33">dstW</name> <operator pos:start="687:35" pos:end="687:35">+</operator> <literal type="number" pos:start="687:37" pos:end="687:37">3</literal><operator pos:start="687:38" pos:end="687:38">)</operator></expr></argument>, <argument pos:start="687:41" pos:end="687:72"><expr pos:start="687:41" pos:end="687:72"><operator pos:start="687:41" pos:end="687:41">*</operator><name pos:start="687:42" pos:end="687:54">outFilterSize</name> <operator pos:start="687:56" pos:end="687:56">*</operator> <sizeof pos:start="687:58" pos:end="687:72">sizeof<argument_list pos:start="687:64" pos:end="687:72">(<argument pos:start="687:65" pos:end="687:71"><expr pos:start="687:65" pos:end="687:71"><name pos:start="687:65" pos:end="687:71">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="687:75" pos:end="687:78"><expr pos:start="687:75" pos:end="687:78"><name pos:start="687:75" pos:end="687:78">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="691:5" pos:end="691:40">/* normalize &amp; store in outFilter */</comment>

    <for pos:start="693:5" pos:end="731:5">for <control pos:start="693:9" pos:end="693:30">(<init pos:start="693:10" pos:end="693:15"><expr pos:start="693:10" pos:end="693:14"><name pos:start="693:10" pos:end="693:10">i</name> <operator pos:start="693:12" pos:end="693:12">=</operator> <literal type="number" pos:start="693:14" pos:end="693:14">0</literal></expr>;</init> <condition pos:start="693:17" pos:end="693:25"><expr pos:start="693:17" pos:end="693:24"><name pos:start="693:17" pos:end="693:17">i</name> <operator pos:start="693:19" pos:end="693:19">&lt;</operator> <name pos:start="693:21" pos:end="693:24">dstW</name></expr>;</condition> <incr pos:start="693:27" pos:end="693:29"><expr pos:start="693:27" pos:end="693:29"><name pos:start="693:27" pos:end="693:27">i</name><operator pos:start="693:28" pos:end="693:29">++</operator></expr></incr>)</control> <block pos:start="693:32" pos:end="731:5">{<block_content pos:start="695:9" pos:end="729:9">

        <decl_stmt pos:start="695:9" pos:end="695:14"><decl pos:start="695:9" pos:end="695:13"><type pos:start="695:9" pos:end="695:11"><name pos:start="695:9" pos:end="695:11">int</name></type> <name pos:start="695:13" pos:end="695:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="697:9" pos:end="697:26"><decl pos:start="697:9" pos:end="697:25"><type pos:start="697:9" pos:end="697:15"><name pos:start="697:9" pos:end="697:15">int64_t</name></type> <name pos:start="697:17" pos:end="697:21">error</name> <init pos:start="697:23" pos:end="697:25">= <expr pos:start="697:25" pos:end="697:25"><literal type="number" pos:start="697:25" pos:end="697:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="699:9" pos:end="699:26"><decl pos:start="699:9" pos:end="699:25"><type pos:start="699:9" pos:end="699:15"><name pos:start="699:9" pos:end="699:15">int64_t</name></type> <name pos:start="699:17" pos:end="699:19">sum</name>   <init pos:start="699:23" pos:end="699:25">= <expr pos:start="699:25" pos:end="699:25"><literal type="number" pos:start="699:25" pos:end="699:25">0</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="703:9" pos:end="707:9">for <control pos:start="703:13" pos:end="703:40">(<init pos:start="703:14" pos:end="703:19"><expr pos:start="703:14" pos:end="703:18"><name pos:start="703:14" pos:end="703:14">j</name> <operator pos:start="703:16" pos:end="703:16">=</operator> <literal type="number" pos:start="703:18" pos:end="703:18">0</literal></expr>;</init> <condition pos:start="703:21" pos:end="703:35"><expr pos:start="703:21" pos:end="703:34"><name pos:start="703:21" pos:end="703:21">j</name> <operator pos:start="703:23" pos:end="703:23">&lt;</operator> <name pos:start="703:25" pos:end="703:34">filterSize</name></expr>;</condition> <incr pos:start="703:37" pos:end="703:39"><expr pos:start="703:37" pos:end="703:39"><name pos:start="703:37" pos:end="703:37">j</name><operator pos:start="703:38" pos:end="703:39">++</operator></expr></incr>)</control> <block pos:start="703:42" pos:end="707:9">{<block_content pos:start="705:13" pos:end="705:46">

            <expr_stmt pos:start="705:13" pos:end="705:46"><expr pos:start="705:13" pos:end="705:45"><name pos:start="705:13" pos:end="705:15">sum</name> <operator pos:start="705:17" pos:end="705:18">+=</operator> <name pos:start="705:20" pos:end="705:45"><name pos:start="705:20" pos:end="705:25">filter</name><index pos:start="705:26" pos:end="705:45">[<expr pos:start="705:27" pos:end="705:44"><name pos:start="705:27" pos:end="705:27">i</name> <operator pos:start="705:29" pos:end="705:29">*</operator> <name pos:start="705:31" pos:end="705:40">filterSize</name> <operator pos:start="705:42" pos:end="705:42">+</operator> <name pos:start="705:44" pos:end="705:44">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="709:9" pos:end="709:36"><expr pos:start="709:9" pos:end="709:35"><name pos:start="709:9" pos:end="709:11">sum</name> <operator pos:start="709:13" pos:end="709:13">=</operator> <operator pos:start="709:15" pos:end="709:15">(</operator><name pos:start="709:16" pos:end="709:18">sum</name> <operator pos:start="709:20" pos:end="709:20">+</operator> <name pos:start="709:22" pos:end="709:24">one</name> <operator pos:start="709:26" pos:end="709:26">/</operator> <literal type="number" pos:start="709:28" pos:end="709:28">2</literal><operator pos:start="709:29" pos:end="709:29">)</operator> <operator pos:start="709:31" pos:end="709:31">/</operator> <name pos:start="709:33" pos:end="709:35">one</name></expr>;</expr_stmt>

        <if_stmt pos:start="711:9" pos:end="717:9"><if pos:start="711:9" pos:end="717:9">if <condition pos:start="711:12" pos:end="711:17">(<expr pos:start="711:13" pos:end="711:16"><operator pos:start="711:13" pos:end="711:13">!</operator><name pos:start="711:14" pos:end="711:16">sum</name></expr>)</condition> <block pos:start="711:19" pos:end="717:9">{<block_content pos:start="713:13" pos:end="715:20">

            <expr_stmt pos:start="713:13" pos:end="713:79"><expr pos:start="713:13" pos:end="713:78"><call pos:start="713:13" pos:end="713:78"><name pos:start="713:13" pos:end="713:18">av_log</name><argument_list pos:start="713:19" pos:end="713:78">(<argument pos:start="713:20" pos:end="713:23"><expr pos:start="713:20" pos:end="713:23"><name pos:start="713:20" pos:end="713:23">NULL</name></expr></argument>, <argument pos:start="713:26" pos:end="713:39"><expr pos:start="713:26" pos:end="713:39"><name pos:start="713:26" pos:end="713:39">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="713:42" pos:end="713:77"><expr pos:start="713:42" pos:end="713:77"><literal type="string" pos:start="713:42" pos:end="713:77">"SwScaler: zero vector in scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="715:13" pos:end="715:20"><expr pos:start="715:13" pos:end="715:19"><name pos:start="715:13" pos:end="715:15">sum</name> <operator pos:start="715:17" pos:end="715:17">=</operator> <literal type="number" pos:start="715:19" pos:end="715:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="719:9" pos:end="729:9">for <control pos:start="719:13" pos:end="719:44">(<init pos:start="719:14" pos:end="719:19"><expr pos:start="719:14" pos:end="719:18"><name pos:start="719:14" pos:end="719:14">j</name> <operator pos:start="719:16" pos:end="719:16">=</operator> <literal type="number" pos:start="719:18" pos:end="719:18">0</literal></expr>;</init> <condition pos:start="719:21" pos:end="719:39"><expr pos:start="719:21" pos:end="719:38"><name pos:start="719:21" pos:end="719:21">j</name> <operator pos:start="719:23" pos:end="719:23">&lt;</operator> <operator pos:start="719:25" pos:end="719:25">*</operator><name pos:start="719:26" pos:end="719:38">outFilterSize</name></expr>;</condition> <incr pos:start="719:41" pos:end="719:43"><expr pos:start="719:41" pos:end="719:43"><name pos:start="719:41" pos:end="719:41">j</name><operator pos:start="719:42" pos:end="719:43">++</operator></expr></incr>)</control> <block pos:start="719:46" pos:end="729:9">{<block_content pos:start="721:13" pos:end="727:68">

            <decl_stmt pos:start="721:13" pos:end="721:59"><decl pos:start="721:13" pos:end="721:58"><type pos:start="721:13" pos:end="721:19"><name pos:start="721:13" pos:end="721:19">int64_t</name></type> <name pos:start="721:21" pos:end="721:21">v</name> <init pos:start="721:23" pos:end="721:58">= <expr pos:start="721:25" pos:end="721:58"><name pos:start="721:25" pos:end="721:50"><name pos:start="721:25" pos:end="721:30">filter</name><index pos:start="721:31" pos:end="721:50">[<expr pos:start="721:32" pos:end="721:49"><name pos:start="721:32" pos:end="721:32">i</name> <operator pos:start="721:34" pos:end="721:34">*</operator> <name pos:start="721:36" pos:end="721:45">filterSize</name> <operator pos:start="721:47" pos:end="721:47">+</operator> <name pos:start="721:49" pos:end="721:49">j</name></expr>]</index></name> <operator pos:start="721:52" pos:end="721:52">+</operator> <name pos:start="721:54" pos:end="721:58">error</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="723:13" pos:end="723:44"><decl pos:start="723:13" pos:end="723:43"><type pos:start="723:13" pos:end="723:15"><name pos:start="723:13" pos:end="723:15">int</name></type> <name pos:start="723:17" pos:end="723:20">intV</name>  <init pos:start="723:23" pos:end="723:43">= <expr pos:start="723:25" pos:end="723:43"><call pos:start="723:25" pos:end="723:43"><name pos:start="723:25" pos:end="723:35">ROUNDED_DIV</name><argument_list pos:start="723:36" pos:end="723:43">(<argument pos:start="723:37" pos:end="723:37"><expr pos:start="723:37" pos:end="723:37"><name pos:start="723:37" pos:end="723:37">v</name></expr></argument>, <argument pos:start="723:40" pos:end="723:42"><expr pos:start="723:40" pos:end="723:42"><name pos:start="723:40" pos:end="723:42">sum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="725:13" pos:end="725:58"><expr pos:start="725:13" pos:end="725:57"><operator pos:start="725:13" pos:end="725:13">(</operator><operator pos:start="725:14" pos:end="725:14">*</operator><name pos:start="725:15" pos:end="725:23">outFilter</name><operator pos:start="725:24" pos:end="725:24">)</operator><index pos:start="725:25" pos:end="725:50">[<expr pos:start="725:26" pos:end="725:49"><name pos:start="725:26" pos:end="725:26">i</name> <operator pos:start="725:28" pos:end="725:28">*</operator> <operator pos:start="725:30" pos:end="725:30">(</operator><operator pos:start="725:31" pos:end="725:31">*</operator><name pos:start="725:32" pos:end="725:44">outFilterSize</name><operator pos:start="725:45" pos:end="725:45">)</operator> <operator pos:start="725:47" pos:end="725:47">+</operator> <name pos:start="725:49" pos:end="725:49">j</name></expr>]</index> <operator pos:start="725:52" pos:end="725:52">=</operator> <name pos:start="725:54" pos:end="725:57">intV</name></expr>;</expr_stmt>

            <expr_stmt pos:start="727:13" pos:end="727:68"><expr pos:start="727:13" pos:end="727:67"><name pos:start="727:13" pos:end="727:17">error</name>                                  <operator pos:start="727:52" pos:end="727:52">=</operator> <name pos:start="727:54" pos:end="727:54">v</name> <operator pos:start="727:56" pos:end="727:56">-</operator> <name pos:start="727:58" pos:end="727:61">intV</name> <operator pos:start="727:63" pos:end="727:63">*</operator> <name pos:start="727:65" pos:end="727:67">sum</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="735:5" pos:end="739:52"><expr pos:start="735:5" pos:end="739:51"><operator pos:start="735:5" pos:end="735:5">(</operator><operator pos:start="735:6" pos:end="735:6">*</operator><name pos:start="735:7" pos:end="735:15">filterPos</name><operator pos:start="735:16" pos:end="735:16">)</operator><index pos:start="735:17" pos:end="735:26">[<expr pos:start="735:18" pos:end="735:25"><name pos:start="735:18" pos:end="735:21">dstW</name> <operator pos:start="735:23" pos:end="735:23">+</operator> <literal type="number" pos:start="735:25" pos:end="735:25">0</literal></expr>]</index> <operator pos:start="735:28" pos:end="735:28">=</operator>

    <operator pos:start="737:5" pos:end="737:5">(</operator><operator pos:start="737:6" pos:end="737:6">*</operator><name pos:start="737:7" pos:end="737:15">filterPos</name><operator pos:start="737:16" pos:end="737:16">)</operator><index pos:start="737:17" pos:end="737:26">[<expr pos:start="737:18" pos:end="737:25"><name pos:start="737:18" pos:end="737:21">dstW</name> <operator pos:start="737:23" pos:end="737:23">+</operator> <literal type="number" pos:start="737:25" pos:end="737:25">1</literal></expr>]</index> <operator pos:start="737:28" pos:end="737:28">=</operator>

    <operator pos:start="739:5" pos:end="739:5">(</operator><operator pos:start="739:6" pos:end="739:6">*</operator><name pos:start="739:7" pos:end="739:15">filterPos</name><operator pos:start="739:16" pos:end="739:16">)</operator><index pos:start="739:17" pos:end="739:26">[<expr pos:start="739:18" pos:end="739:25"><name pos:start="739:18" pos:end="739:21">dstW</name> <operator pos:start="739:23" pos:end="739:23">+</operator> <literal type="number" pos:start="739:25" pos:end="739:25">2</literal></expr>]</index> <operator pos:start="739:28" pos:end="739:28">=</operator> <operator pos:start="739:30" pos:end="739:30">(</operator><operator pos:start="739:31" pos:end="739:31">*</operator><name pos:start="739:32" pos:end="739:40">filterPos</name><operator pos:start="739:41" pos:end="739:41">)</operator><index pos:start="739:42" pos:end="739:51">[<expr pos:start="739:43" pos:end="739:50"><name pos:start="739:43" pos:end="739:46">dstW</name> <operator pos:start="739:48" pos:end="739:48">-</operator> <literal type="number" pos:start="739:50" pos:end="739:50">1</literal></expr>]</index></expr>;</expr_stmt> <comment type="block" pos:start="739:54" pos:end="741:76">/* the MMX/SSE scaler will

                                                      * read over the end */</comment>

    <for pos:start="743:5" pos:end="753:5">for <control pos:start="743:9" pos:end="743:40">(<init pos:start="743:10" pos:end="743:15"><expr pos:start="743:10" pos:end="743:14"><name pos:start="743:10" pos:end="743:10">i</name> <operator pos:start="743:12" pos:end="743:12">=</operator> <literal type="number" pos:start="743:14" pos:end="743:14">0</literal></expr>;</init> <condition pos:start="743:17" pos:end="743:35"><expr pos:start="743:17" pos:end="743:34"><name pos:start="743:17" pos:end="743:17">i</name> <operator pos:start="743:19" pos:end="743:19">&lt;</operator> <operator pos:start="743:21" pos:end="743:21">*</operator><name pos:start="743:22" pos:end="743:34">outFilterSize</name></expr>;</condition> <incr pos:start="743:37" pos:end="743:39"><expr pos:start="743:37" pos:end="743:39"><name pos:start="743:37" pos:end="743:37">i</name><operator pos:start="743:38" pos:end="743:39">++</operator></expr></incr>)</control> <block pos:start="743:42" pos:end="753:5">{<block_content pos:start="745:9" pos:end="751:65">

        <decl_stmt pos:start="745:9" pos:end="745:50"><decl pos:start="745:9" pos:end="745:49"><type pos:start="745:9" pos:end="745:11"><name pos:start="745:9" pos:end="745:11">int</name></type> <name pos:start="745:13" pos:end="745:13">k</name> <init pos:start="745:15" pos:end="745:49">= <expr pos:start="745:17" pos:end="745:49"><operator pos:start="745:17" pos:end="745:17">(</operator><name pos:start="745:18" pos:end="745:21">dstW</name> <operator pos:start="745:23" pos:end="745:23">-</operator> <literal type="number" pos:start="745:25" pos:end="745:25">1</literal><operator pos:start="745:26" pos:end="745:26">)</operator> <operator pos:start="745:28" pos:end="745:28">*</operator> <operator pos:start="745:30" pos:end="745:30">(</operator><operator pos:start="745:31" pos:end="745:31">*</operator><name pos:start="745:32" pos:end="745:44">outFilterSize</name><operator pos:start="745:45" pos:end="745:45">)</operator> <operator pos:start="745:47" pos:end="745:47">+</operator> <name pos:start="745:49" pos:end="745:49">i</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="747:9" pos:end="751:65"><expr pos:start="747:9" pos:end="751:64"><operator pos:start="747:9" pos:end="747:9">(</operator><operator pos:start="747:10" pos:end="747:10">*</operator><name pos:start="747:11" pos:end="747:19">outFilter</name><operator pos:start="747:20" pos:end="747:20">)</operator><index pos:start="747:21" pos:end="747:46">[<expr pos:start="747:22" pos:end="747:45"><name pos:start="747:22" pos:end="747:22">k</name> <operator pos:start="747:24" pos:end="747:24">+</operator> <literal type="number" pos:start="747:26" pos:end="747:26">1</literal> <operator pos:start="747:28" pos:end="747:28">*</operator> <operator pos:start="747:30" pos:end="747:30">(</operator><operator pos:start="747:31" pos:end="747:31">*</operator><name pos:start="747:32" pos:end="747:44">outFilterSize</name><operator pos:start="747:45" pos:end="747:45">)</operator></expr>]</index> <operator pos:start="747:48" pos:end="747:48">=</operator>

        <operator pos:start="749:9" pos:end="749:9">(</operator><operator pos:start="749:10" pos:end="749:10">*</operator><name pos:start="749:11" pos:end="749:19">outFilter</name><operator pos:start="749:20" pos:end="749:20">)</operator><index pos:start="749:21" pos:end="749:46">[<expr pos:start="749:22" pos:end="749:45"><name pos:start="749:22" pos:end="749:22">k</name> <operator pos:start="749:24" pos:end="749:24">+</operator> <literal type="number" pos:start="749:26" pos:end="749:26">2</literal> <operator pos:start="749:28" pos:end="749:28">*</operator> <operator pos:start="749:30" pos:end="749:30">(</operator><operator pos:start="749:31" pos:end="749:31">*</operator><name pos:start="749:32" pos:end="749:44">outFilterSize</name><operator pos:start="749:45" pos:end="749:45">)</operator></expr>]</index> <operator pos:start="749:48" pos:end="749:48">=</operator>

        <operator pos:start="751:9" pos:end="751:9">(</operator><operator pos:start="751:10" pos:end="751:10">*</operator><name pos:start="751:11" pos:end="751:19">outFilter</name><operator pos:start="751:20" pos:end="751:20">)</operator><index pos:start="751:21" pos:end="751:46">[<expr pos:start="751:22" pos:end="751:45"><name pos:start="751:22" pos:end="751:22">k</name> <operator pos:start="751:24" pos:end="751:24">+</operator> <literal type="number" pos:start="751:26" pos:end="751:26">3</literal> <operator pos:start="751:28" pos:end="751:28">*</operator> <operator pos:start="751:30" pos:end="751:30">(</operator><operator pos:start="751:31" pos:end="751:31">*</operator><name pos:start="751:32" pos:end="751:44">outFilterSize</name><operator pos:start="751:45" pos:end="751:45">)</operator></expr>]</index> <operator pos:start="751:48" pos:end="751:48">=</operator> <operator pos:start="751:50" pos:end="751:50">(</operator><operator pos:start="751:51" pos:end="751:51">*</operator><name pos:start="751:52" pos:end="751:60">outFilter</name><operator pos:start="751:61" pos:end="751:61">)</operator><index pos:start="751:62" pos:end="751:64">[<expr pos:start="751:63" pos:end="751:63"><name pos:start="751:63" pos:end="751:63">k</name></expr>]</index></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="757:5" pos:end="757:12"><expr pos:start="757:5" pos:end="757:11"><name pos:start="757:5" pos:end="757:7">ret</name> <operator pos:start="757:9" pos:end="757:9">=</operator> <literal type="number" pos:start="757:11" pos:end="757:11">0</literal></expr>;</expr_stmt>



<label pos:start="761:1" pos:end="761:5"><name pos:start="761:1" pos:end="761:4">fail</name>:</label>

    <if_stmt pos:start="763:5" pos:end="765:107"><if pos:start="763:5" pos:end="765:107">if<condition pos:start="763:7" pos:end="763:15">(<expr pos:start="763:8" pos:end="763:14"><name pos:start="763:8" pos:end="763:10">ret</name> <operator pos:start="763:12" pos:end="763:12">&lt;</operator> <literal type="number" pos:start="763:14" pos:end="763:14">0</literal></expr>)</condition><block type="pseudo" pos:start="765:9" pos:end="765:107"><block_content pos:start="765:9" pos:end="765:107">

        <expr_stmt pos:start="765:9" pos:end="765:107"><expr pos:start="765:9" pos:end="765:106"><call pos:start="765:9" pos:end="765:106"><name pos:start="765:9" pos:end="765:14">av_log</name><argument_list pos:start="765:15" pos:end="765:106">(<argument pos:start="765:16" pos:end="765:19"><expr pos:start="765:16" pos:end="765:19"><name pos:start="765:16" pos:end="765:19">NULL</name></expr></argument>, <argument pos:start="765:22" pos:end="765:77"><expr pos:start="765:22" pos:end="765:77"><ternary pos:start="765:22" pos:end="765:77"><condition pos:start="765:22" pos:end="765:49"><expr pos:start="765:22" pos:end="765:47"><name pos:start="765:22" pos:end="765:24">ret</name> <operator pos:start="765:26" pos:end="765:27">==</operator> <name pos:start="765:29" pos:end="765:47">RETCODE_USE_CASCADE</name></expr> ?</condition><then pos:start="765:51" pos:end="765:62"> <expr pos:start="765:51" pos:end="765:62"><name pos:start="765:51" pos:end="765:62">AV_LOG_DEBUG</name></expr> </then><else pos:start="765:64" pos:end="765:77">: <expr pos:start="765:66" pos:end="765:77"><name pos:start="765:66" pos:end="765:77">AV_LOG_ERROR</name></expr></else></ternary></expr></argument>, <argument pos:start="765:80" pos:end="765:105"><expr pos:start="765:80" pos:end="765:105"><literal type="string" pos:start="765:80" pos:end="765:105">"sws: initFilter failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="767:5" pos:end="767:20"><expr pos:start="767:5" pos:end="767:19"><call pos:start="767:5" pos:end="767:19"><name pos:start="767:5" pos:end="767:11">av_free</name><argument_list pos:start="767:12" pos:end="767:19">(<argument pos:start="767:13" pos:end="767:18"><expr pos:start="767:13" pos:end="767:18"><name pos:start="767:13" pos:end="767:18">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="769:5" pos:end="769:21"><expr pos:start="769:5" pos:end="769:20"><call pos:start="769:5" pos:end="769:20"><name pos:start="769:5" pos:end="769:11">av_free</name><argument_list pos:start="769:12" pos:end="769:20">(<argument pos:start="769:13" pos:end="769:19"><expr pos:start="769:13" pos:end="769:19"><name pos:start="769:13" pos:end="769:19">filter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="771:5" pos:end="771:15">return <expr pos:start="771:12" pos:end="771:14"><name pos:start="771:12" pos:end="771:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
