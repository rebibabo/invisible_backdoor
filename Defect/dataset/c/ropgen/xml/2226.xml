<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2226.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">s390_msi_ctrl_write</name><parameter_list pos:start="1:32" pos:end="3:50">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:57"><decl pos:start="1:47" pos:end="1:57"><type pos:start="1:47" pos:end="1:57"><name pos:start="1:47" pos:end="1:52">hwaddr</name></type> <name pos:start="1:54" pos:end="1:57">addr</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:72"><decl pos:start="1:60" pos:end="1:72"><type pos:start="1:60" pos:end="1:72"><name pos:start="1:60" pos:end="1:67">uint64_t</name></type> <name pos:start="1:69" pos:end="1:72">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:49"><decl pos:start="3:33" pos:end="3:49"><type pos:start="3:33" pos:end="3:49"><name pos:start="3:33" pos:end="3:40">unsigned</name> <name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:49">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:5">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">S390PCIBusDevice</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:27">pbdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:24">io_int_word</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">fid</name> <init pos:start="11:18" pos:end="11:44">= <expr pos:start="11:20" pos:end="11:44"><name pos:start="11:20" pos:end="11:23">data</name> <operator pos:start="11:25" pos:end="11:26">&gt;&gt;</operator> <name pos:start="11:28" pos:end="11:44">ZPCI_MSI_VEC_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">vec</name> <init pos:start="13:18" pos:end="13:43">= <expr pos:start="13:20" pos:end="13:43"><name pos:start="13:20" pos:end="13:23">data</name> <operator pos:start="13:25" pos:end="13:25">&amp;</operator> <name pos:start="13:27" pos:end="13:43">ZPCI_MSI_VEC_MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:20">ind_bit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:20">sum_bit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:14">e</name> <init pos:start="19:16" pos:end="19:18">= <expr pos:start="19:18" pos:end="19:18"><literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:79"><expr pos:start="23:5" pos:end="23:78"><call pos:start="23:5" pos:end="23:78"><name pos:start="23:5" pos:end="23:11">DPRINTF</name><argument_list pos:start="23:12" pos:end="23:78">(<argument pos:start="23:13" pos:end="23:61"><expr pos:start="23:13" pos:end="23:61"><literal type="string" pos:start="23:13" pos:end="23:33">"write_msix data 0x%"</literal> <name pos:start="23:35" pos:end="23:40">PRIx64</name> <literal type="string" pos:start="23:42" pos:end="23:61">" fid %d vec 0x%x\n"</literal></expr></argument>, <argument pos:start="23:64" pos:end="23:67"><expr pos:start="23:64" pos:end="23:67"><name pos:start="23:64" pos:end="23:67">data</name></expr></argument>, <argument pos:start="23:70" pos:end="23:72"><expr pos:start="23:70" pos:end="23:72"><name pos:start="23:70" pos:end="23:72">fid</name></expr></argument>, <argument pos:start="23:75" pos:end="23:77"><expr pos:start="23:75" pos:end="23:77"><name pos:start="23:75" pos:end="23:77">vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:42"><expr pos:start="27:5" pos:end="27:41"><name pos:start="27:5" pos:end="27:9">pbdev</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:41"><name pos:start="27:13" pos:end="27:36">s390_pci_find_dev_by_fid</name><argument_list pos:start="27:37" pos:end="27:41">(<argument pos:start="27:38" pos:end="27:40"><expr pos:start="27:38" pos:end="27:40"><name pos:start="27:38" pos:end="27:40">fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:15">(<expr pos:start="29:9" pos:end="29:14"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:14">pbdev</name></expr>)</condition> <block pos:start="29:17" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:15">

        <expr_stmt pos:start="31:9" pos:end="31:43"><expr pos:start="31:9" pos:end="31:42"><name pos:start="31:9" pos:end="31:9">e</name> <operator pos:start="31:11" pos:end="31:12">|=</operator> <operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:17">vec</name> <operator pos:start="31:19" pos:end="31:20">&lt;&lt;</operator> <name pos:start="31:22" pos:end="31:41">ERR_EVENT_MVN_OFFSET</name><operator pos:start="31:42" pos:end="31:42">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:72"><expr pos:start="33:9" pos:end="33:71"><call pos:start="33:9" pos:end="33:71"><name pos:start="33:9" pos:end="33:37">s390_pci_generate_error_event</name><argument_list pos:start="33:38" pos:end="33:71">(<argument pos:start="33:39" pos:end="33:53"><expr pos:start="33:39" pos:end="33:53"><name pos:start="33:39" pos:end="33:53">ERR_EVENT_NOMSI</name></expr></argument>, <argument pos:start="33:56" pos:end="33:56"><expr pos:start="33:56" pos:end="33:56"><literal type="number" pos:start="33:56" pos:end="33:56">0</literal></expr></argument>, <argument pos:start="33:59" pos:end="33:61"><expr pos:start="33:59" pos:end="33:61"><name pos:start="33:59" pos:end="33:61">fid</name></expr></argument>, <argument pos:start="33:64" pos:end="33:67"><expr pos:start="33:64" pos:end="33:67"><name pos:start="33:64" pos:end="33:67">addr</name></expr></argument>, <argument pos:start="33:70" pos:end="33:70"><expr pos:start="33:70" pos:end="33:70"><name pos:start="33:70" pos:end="33:70">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:40">(<expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:13">pbdev</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:20">state</name></name> <operator pos:start="41:22" pos:end="41:23">!=</operator> <name pos:start="41:25" pos:end="41:39">ZPCI_FS_ENABLED</name></expr>)</condition> <block pos:start="41:42" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:15">

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:47"><expr pos:start="49:5" pos:end="49:46"><name pos:start="49:5" pos:end="49:11">ind_bit</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <name pos:start="49:15" pos:end="49:46"><name pos:start="49:15" pos:end="49:19">pbdev</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:27">routes</name><operator pos:start="49:28" pos:end="49:28">.</operator><name pos:start="49:29" pos:end="49:35">adapter</name><operator pos:start="49:36" pos:end="49:36">.</operator><name pos:start="49:37" pos:end="49:46">ind_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:51"><expr pos:start="51:5" pos:end="51:50"><name pos:start="51:5" pos:end="51:11">sum_bit</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <name pos:start="51:15" pos:end="51:50"><name pos:start="51:15" pos:end="51:19">pbdev</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:27">routes</name><operator pos:start="51:28" pos:end="51:28">.</operator><name pos:start="51:29" pos:end="51:35">adapter</name><operator pos:start="51:36" pos:end="51:36">.</operator><name pos:start="51:37" pos:end="51:50">summary_offset</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:50"><expr pos:start="55:5" pos:end="57:49"><call pos:start="55:5" pos:end="57:49"><name pos:start="55:5" pos:end="55:18">set_ind_atomic</name><argument_list pos:start="55:19" pos:end="57:49">(<argument pos:start="55:20" pos:end="55:71"><expr pos:start="55:20" pos:end="55:71"><name pos:start="55:20" pos:end="55:49"><name pos:start="55:20" pos:end="55:24">pbdev</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:32">routes</name><operator pos:start="55:33" pos:end="55:33">.</operator><name pos:start="55:34" pos:end="55:40">adapter</name><operator pos:start="55:41" pos:end="55:41">.</operator><name pos:start="55:42" pos:end="55:49">ind_addr</name></name> <operator pos:start="55:51" pos:end="55:51">+</operator> <operator pos:start="55:53" pos:end="55:53">(</operator><name pos:start="55:54" pos:end="55:60">ind_bit</name> <operator pos:start="55:62" pos:end="55:62">+</operator> <name pos:start="55:64" pos:end="55:66">vec</name><operator pos:start="55:67" pos:end="55:67">)</operator> <operator pos:start="55:69" pos:end="55:69">/</operator> <literal type="number" pos:start="55:71" pos:end="55:71">8</literal></expr></argument>,

                   <argument pos:start="57:20" pos:end="57:48"><expr pos:start="57:20" pos:end="57:48"><literal type="number" pos:start="57:20" pos:end="57:23">0x80</literal> <operator pos:start="57:25" pos:end="57:26">&gt;&gt;</operator> <operator pos:start="57:28" pos:end="57:28">(</operator><operator pos:start="57:29" pos:end="57:29">(</operator><name pos:start="57:30" pos:end="57:36">ind_bit</name> <operator pos:start="57:38" pos:end="57:38">+</operator> <name pos:start="57:40" pos:end="57:42">vec</name><operator pos:start="57:43" pos:end="57:43">)</operator> <operator pos:start="57:45" pos:end="57:45">%</operator> <literal type="number" pos:start="57:47" pos:end="57:47">8</literal><operator pos:start="57:48" pos:end="57:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="61:62">(<expr pos:start="59:9" pos:end="61:61"><operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="61:61"><name pos:start="59:10" pos:end="59:23">set_ind_atomic</name><argument_list pos:start="59:24" pos:end="61:61">(<argument pos:start="59:25" pos:end="59:72"><expr pos:start="59:25" pos:end="59:72"><name pos:start="59:25" pos:end="59:58"><name pos:start="59:25" pos:end="59:29">pbdev</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:37">routes</name><operator pos:start="59:38" pos:end="59:38">.</operator><name pos:start="59:39" pos:end="59:45">adapter</name><operator pos:start="59:46" pos:end="59:46">.</operator><name pos:start="59:47" pos:end="59:58">summary_addr</name></name> <operator pos:start="59:60" pos:end="59:60">+</operator> <name pos:start="59:62" pos:end="59:68">sum_bit</name> <operator pos:start="59:70" pos:end="59:70">/</operator> <literal type="number" pos:start="59:72" pos:end="59:72">8</literal></expr></argument>,

                                       <argument pos:start="61:40" pos:end="61:60"><expr pos:start="61:40" pos:end="61:60"><literal type="number" pos:start="61:40" pos:end="61:43">0x80</literal> <operator pos:start="61:45" pos:end="61:46">&gt;&gt;</operator> <operator pos:start="61:48" pos:end="61:48">(</operator><name pos:start="61:49" pos:end="61:55">sum_bit</name> <operator pos:start="61:57" pos:end="61:57">%</operator> <literal type="number" pos:start="61:59" pos:end="61:59">8</literal><operator pos:start="61:60" pos:end="61:60">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:64" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:48">

        <expr_stmt pos:start="63:9" pos:end="63:58"><expr pos:start="63:9" pos:end="63:57"><name pos:start="63:9" pos:end="63:19">io_int_word</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <operator pos:start="63:23" pos:end="63:23">(</operator><name pos:start="63:24" pos:end="63:33"><name pos:start="63:24" pos:end="63:28">pbdev</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:33">isc</name></name> <operator pos:start="63:35" pos:end="63:36">&lt;&lt;</operator> <literal type="number" pos:start="63:38" pos:end="63:39">27</literal><operator pos:start="63:40" pos:end="63:40">)</operator> <operator pos:start="63:42" pos:end="63:42">|</operator> <name pos:start="63:44" pos:end="63:57">IO_INT_WORD_AI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:48"><expr pos:start="65:9" pos:end="65:47"><call pos:start="65:9" pos:end="65:47"><name pos:start="65:9" pos:end="65:25">s390_io_interrupt</name><argument_list pos:start="65:26" pos:end="65:47">(<argument pos:start="65:27" pos:end="65:27"><expr pos:start="65:27" pos:end="65:27"><literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr></argument>, <argument pos:start="65:30" pos:end="65:30"><expr pos:start="65:30" pos:end="65:30"><literal type="number" pos:start="65:30" pos:end="65:30">0</literal></expr></argument>, <argument pos:start="65:33" pos:end="65:33"><expr pos:start="65:33" pos:end="65:33"><literal type="number" pos:start="65:33" pos:end="65:33">0</literal></expr></argument>, <argument pos:start="65:36" pos:end="65:46"><expr pos:start="65:36" pos:end="65:46"><name pos:start="65:36" pos:end="65:46">io_int_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
