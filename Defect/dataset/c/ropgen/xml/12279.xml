<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12279.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int32_t</name></type> <name pos:start="1:16" pos:end="1:32">scsi_send_command</name><parameter_list pos:start="1:33" pos:end="1:64">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:44">SCSIRequest</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">req</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:58">uint8_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">cmd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="5:5" pos:end="145:5">

    <decl_stmt pos:start="5:5" pos:end="5:70"><decl pos:start="5:5" pos:end="5:69"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">SCSIGenericState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:69">= <expr pos:start="5:27" pos:end="5:69"><call pos:start="5:27" pos:end="5:69"><name pos:start="5:27" pos:end="5:35">DO_UPCAST</name><argument_list pos:start="5:36" pos:end="5:69">(<argument pos:start="5:37" pos:end="5:52"><expr pos:start="5:37" pos:end="5:52"><name pos:start="5:37" pos:end="5:52">SCSIGenericState</name></expr></argument>, <argument pos:start="5:55" pos:end="5:58"><expr pos:start="5:55" pos:end="5:58"><name pos:start="5:55" pos:end="5:58">qdev</name></expr></argument>, <argument pos:start="5:61" pos:end="5:68"><expr pos:start="5:61" pos:end="5:68"><name pos:start="5:61" pos:end="5:68"><name pos:start="5:61" pos:end="5:63">req</name><operator pos:start="5:64" pos:end="5:65">-&gt;</operator><name pos:start="5:66" pos:end="5:68">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:59"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">SCSIGenericReq</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">r</name> <init pos:start="7:23" pos:end="7:59">= <expr pos:start="7:25" pos:end="7:59"><call pos:start="7:25" pos:end="7:59"><name pos:start="7:25" pos:end="7:33">DO_UPCAST</name><argument_list pos:start="7:34" pos:end="7:59">(<argument pos:start="7:35" pos:end="7:48"><expr pos:start="7:35" pos:end="7:48"><name pos:start="7:35" pos:end="7:48">SCSIGenericReq</name></expr></argument>, <argument pos:start="7:51" pos:end="7:53"><expr pos:start="7:51" pos:end="7:53"><name pos:start="7:51" pos:end="7:53">req</name></expr></argument>, <argument pos:start="7:56" pos:end="7:58"><expr pos:start="7:56" pos:end="7:58"><name pos:start="7:56" pos:end="7:58">req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><call pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:20">scsi_req_enqueue</name><argument_list pos:start="13:21" pos:end="13:25">(<argument pos:start="13:22" pos:end="13:24"><expr pos:start="13:22" pos:end="13:24"><name pos:start="13:22" pos:end="13:24">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="47:5"><if pos:start="15:5" pos:end="47:5">if <condition pos:start="15:8" pos:end="17:56">(<expr pos:start="15:9" pos:end="17:55"><name pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:11">cmd</name><index pos:start="15:12" pos:end="15:14">[<expr pos:start="15:13" pos:end="15:13"><literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr>]</index></name> <operator pos:start="15:16" pos:end="15:17">!=</operator> <name pos:start="15:19" pos:end="15:31">REQUEST_SENSE</name> <operator pos:start="15:33" pos:end="15:34">&amp;&amp;</operator>

        <operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:12">req</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:17">lun</name></name> <operator pos:start="17:19" pos:end="17:20">!=</operator> <name pos:start="17:22" pos:end="17:27"><name pos:start="17:22" pos:end="17:22">s</name><operator pos:start="17:23" pos:end="17:24">-&gt;</operator><name pos:start="17:25" pos:end="17:27">lun</name></name> <operator pos:start="17:29" pos:end="17:30">||</operator> <operator pos:start="17:32" pos:end="17:32">(</operator><name pos:start="17:33" pos:end="17:38"><name pos:start="17:33" pos:end="17:35">cmd</name><index pos:start="17:36" pos:end="17:38">[<expr pos:start="17:37" pos:end="17:37"><literal type="number" pos:start="17:37" pos:end="17:37">1</literal></expr>]</index></name> <operator pos:start="17:40" pos:end="17:41">&gt;&gt;</operator> <literal type="number" pos:start="17:43" pos:end="17:43">5</literal><operator pos:start="17:44" pos:end="17:44">)</operator> <operator pos:start="17:46" pos:end="17:47">!=</operator> <name pos:start="17:49" pos:end="17:54"><name pos:start="17:49" pos:end="17:49">s</name><operator pos:start="17:50" pos:end="17:51">-&gt;</operator><name pos:start="17:52" pos:end="17:54">lun</name></name><operator pos:start="17:55" pos:end="17:55">)</operator></expr>)</condition> <block pos:start="17:58" pos:end="47:5">{<block_content pos:start="19:9" pos:end="45:17">

        <expr_stmt pos:start="19:9" pos:end="19:77"><expr pos:start="19:9" pos:end="19:76"><call pos:start="19:9" pos:end="19:76"><name pos:start="19:9" pos:end="19:15">DPRINTF</name><argument_list pos:start="19:16" pos:end="19:76">(<argument pos:start="19:17" pos:end="19:40"><expr pos:start="19:17" pos:end="19:40"><literal type="string" pos:start="19:17" pos:end="19:40">"Unimplemented LUN %d\n"</literal></expr></argument>, <argument pos:start="19:43" pos:end="19:75"><expr pos:start="19:43" pos:end="19:75"><ternary pos:start="19:43" pos:end="19:75"><condition pos:start="19:43" pos:end="19:52"><expr pos:start="19:43" pos:end="19:50"><name pos:start="19:43" pos:end="19:50"><name pos:start="19:43" pos:end="19:45">req</name><operator pos:start="19:46" pos:end="19:47">-&gt;</operator><name pos:start="19:48" pos:end="19:50">lun</name></name></expr> ?</condition><then pos:start="19:54" pos:end="19:61"> <expr pos:start="19:54" pos:end="19:61"><name pos:start="19:54" pos:end="19:61"><name pos:start="19:54" pos:end="19:56">req</name><operator pos:start="19:57" pos:end="19:58">-&gt;</operator><name pos:start="19:59" pos:end="19:61">lun</name></name></expr> </then><else pos:start="19:63" pos:end="19:75">: <expr pos:start="19:65" pos:end="19:75"><name pos:start="19:65" pos:end="19:70"><name pos:start="19:65" pos:end="19:67">cmd</name><index pos:start="19:68" pos:end="19:70">[<expr pos:start="19:69" pos:end="19:69"><literal type="number" pos:start="19:69" pos:end="19:69">1</literal></expr>]</index></name> <operator pos:start="19:72" pos:end="19:73">&gt;&gt;</operator> <literal type="number" pos:start="19:75" pos:end="19:75">5</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:19">sensebuf</name><index pos:start="23:20" pos:end="23:22">[<expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr>]</index></name> <operator pos:start="23:24" pos:end="23:24">=</operator> <literal type="number" pos:start="23:26" pos:end="23:29">0x70</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:19">sensebuf</name><index pos:start="25:20" pos:end="25:22">[<expr pos:start="25:21" pos:end="25:21"><literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>]</index></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:41"><expr pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:19">sensebuf</name><index pos:start="27:20" pos:end="27:22">[<expr pos:start="27:21" pos:end="27:21"><literal type="number" pos:start="27:21" pos:end="27:21">2</literal></expr>]</index></name> <operator pos:start="27:24" pos:end="27:24">=</operator> <name pos:start="27:26" pos:end="27:40">ILLEGAL_REQUEST</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:19">sensebuf</name><index pos:start="29:20" pos:end="29:22">[<expr pos:start="29:21" pos:end="29:21"><literal type="number" pos:start="29:21" pos:end="29:21">3</literal></expr>]</index></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <literal type="number" pos:start="29:26" pos:end="29:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:19">sensebuf</name><index pos:start="31:20" pos:end="31:22">[<expr pos:start="31:21" pos:end="31:21"><literal type="number" pos:start="31:21" pos:end="31:21">4</literal></expr>]</index></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:30"><expr pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:19">sensebuf</name><index pos:start="33:20" pos:end="33:22">[<expr pos:start="33:21" pos:end="33:21"><literal type="number" pos:start="33:21" pos:end="33:21">5</literal></expr>]</index></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <literal type="number" pos:start="33:26" pos:end="33:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:19">sensebuf</name><index pos:start="35:20" pos:end="35:22">[<expr pos:start="35:21" pos:end="35:21"><literal type="number" pos:start="35:21" pos:end="35:21">6</literal></expr>]</index></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <literal type="number" pos:start="35:26" pos:end="35:29">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:19">senselen</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <literal type="number" pos:start="37:23" pos:end="37:23">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:24">driver_status</name></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <name pos:start="39:28" pos:end="39:46">SG_ERR_DRIVER_SENSE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:9">r</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:14">req</name><operator pos:start="41:15" pos:end="41:15">.</operator><name pos:start="41:16" pos:end="41:21">status</name></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:39">CHECK_CONDITION</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:35"><expr pos:start="43:9" pos:end="43:34"><call pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:25">scsi_req_complete</name><argument_list pos:start="43:26" pos:end="43:34">(<argument pos:start="43:27" pos:end="43:33"><expr pos:start="43:27" pos:end="43:33"><operator pos:start="43:27" pos:end="43:27">&amp;</operator><name pos:start="43:28" pos:end="43:33"><name pos:start="43:28" pos:end="43:28">r</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:33">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="61:5">if <condition pos:start="51:8" pos:end="51:43">(<expr pos:start="51:9" pos:end="51:42"><operator pos:start="51:9" pos:end="51:9">-</operator><literal type="number" pos:start="51:10" pos:end="51:10">1</literal> <operator pos:start="51:12" pos:end="51:13">==</operator> <call pos:start="51:15" pos:end="51:42"><name pos:start="51:15" pos:end="51:28">scsi_req_parse</name><argument_list pos:start="51:29" pos:end="51:42">(<argument pos:start="51:30" pos:end="51:36"><expr pos:start="51:30" pos:end="51:36"><operator pos:start="51:30" pos:end="51:30">&amp;</operator><name pos:start="51:31" pos:end="51:36"><name pos:start="51:31" pos:end="51:31">r</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:36">req</name></name></expr></argument>, <argument pos:start="51:39" pos:end="51:41"><expr pos:start="51:39" pos:end="51:41"><name pos:start="51:39" pos:end="51:41">cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:45" pos:end="61:5">{<block_content pos:start="53:9" pos:end="59:17">

        <expr_stmt pos:start="53:9" pos:end="53:65"><expr pos:start="53:9" pos:end="53:64"><call pos:start="53:9" pos:end="53:64"><name pos:start="53:9" pos:end="53:12">BADF</name><argument_list pos:start="53:13" pos:end="53:64">(<argument pos:start="53:14" pos:end="53:55"><expr pos:start="53:14" pos:end="53:55"><literal type="string" pos:start="53:14" pos:end="53:55">"Unsupported command length, command %x\n"</literal></expr></argument>, <argument pos:start="53:58" pos:end="53:63"><expr pos:start="53:58" pos:end="53:63"><name pos:start="53:58" pos:end="53:63"><name pos:start="53:58" pos:end="53:60">cmd</name><index pos:start="53:61" pos:end="53:63">[<expr pos:start="53:62" pos:end="53:62"><literal type="number" pos:start="53:62" pos:end="53:62">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><call pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:24">scsi_req_dequeue</name><argument_list pos:start="55:25" pos:end="55:33">(<argument pos:start="55:26" pos:end="55:32"><expr pos:start="55:26" pos:end="55:32"><operator pos:start="55:26" pos:end="55:26">&amp;</operator><name pos:start="55:27" pos:end="55:32"><name pos:start="55:27" pos:end="55:27">r</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:32">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><call pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:22">scsi_req_unref</name><argument_list pos:start="57:23" pos:end="57:31">(<argument pos:start="57:24" pos:end="57:30"><expr pos:start="57:24" pos:end="57:30"><operator pos:start="57:24" pos:end="57:24">&amp;</operator><name pos:start="57:25" pos:end="57:30"><name pos:start="57:25" pos:end="57:25">r</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:30">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><call pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:18">scsi_req_fixup</name><argument_list pos:start="63:19" pos:end="63:27">(<argument pos:start="63:20" pos:end="63:26"><expr pos:start="63:20" pos:end="63:26"><operator pos:start="63:20" pos:end="63:20">&amp;</operator><name pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:21">r</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:26">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="74:0"><expr pos:start="67:5" pos:end="69:36"><call pos:start="67:5" pos:end="69:36"><name pos:start="67:5" pos:end="67:11">DPRINTF</name><argument_list pos:start="67:12" pos:end="69:36">(<argument pos:start="67:13" pos:end="67:58"><expr pos:start="67:13" pos:end="67:58"><literal type="string" pos:start="67:13" pos:end="67:58">"Command: lun=%d tag=0x%x len %zd data=0x%02x"</literal></expr></argument>, <argument pos:start="67:61" pos:end="67:63"><expr pos:start="67:61" pos:end="67:63"><name pos:start="67:61" pos:end="67:63">lun</name></expr></argument>, <argument pos:start="67:66" pos:end="67:68"><expr pos:start="67:66" pos:end="67:68"><name pos:start="67:66" pos:end="67:68">tag</name></expr></argument>,

            <argument pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:13">r</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:18">req</name><operator pos:start="69:19" pos:end="69:19">.</operator><name pos:start="69:20" pos:end="69:22">cmd</name><operator pos:start="69:23" pos:end="69:23">.</operator><name pos:start="69:24" pos:end="69:27">xfer</name></name></expr></argument>, <argument pos:start="69:30" pos:end="69:35"><expr pos:start="69:30" pos:end="69:35"><name pos:start="69:30" pos:end="69:35"><name pos:start="69:30" pos:end="69:32">cmd</name><index pos:start="69:33" pos:end="69:35">[<expr pos:start="69:34" pos:end="69:34"><literal type="number" pos:start="69:34" pos:end="69:34">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="73:1" pos:end="73:17">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:17">DEBUG_SCSI</name></cpp:ifdef>

    <block pos:start="75:5" pos:end="90:0">{<block_content pos:start="77:9" pos:end="85:21">

        <decl_stmt pos:start="77:9" pos:end="77:14"><decl pos:start="77:9" pos:end="77:13"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:13">i</name></decl>;</decl_stmt>

        <for pos:start="79:9" pos:end="83:9">for <control pos:start="79:13" pos:end="79:44">(<init pos:start="79:14" pos:end="79:19"><expr pos:start="79:14" pos:end="79:18"><name pos:start="79:14" pos:end="79:14">i</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr>;</init> <condition pos:start="79:21" pos:end="79:39"><expr pos:start="79:21" pos:end="79:38"><name pos:start="79:21" pos:end="79:21">i</name> <operator pos:start="79:23" pos:end="79:23">&lt;</operator> <name pos:start="79:25" pos:end="79:38"><name pos:start="79:25" pos:end="79:25">r</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:30">req</name><operator pos:start="79:31" pos:end="79:31">.</operator><name pos:start="79:32" pos:end="79:34">cmd</name><operator pos:start="79:35" pos:end="79:35">.</operator><name pos:start="79:36" pos:end="79:38">len</name></name></expr>;</condition> <incr pos:start="79:41" pos:end="79:43"><expr pos:start="79:41" pos:end="79:43"><name pos:start="79:41" pos:end="79:41">i</name><operator pos:start="79:42" pos:end="79:43">++</operator></expr></incr>)</control> <block pos:start="79:46" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:38">

            <expr_stmt pos:start="81:13" pos:end="81:38"><expr pos:start="81:13" pos:end="81:37"><call pos:start="81:13" pos:end="81:37"><name pos:start="81:13" pos:end="81:18">printf</name><argument_list pos:start="81:19" pos:end="81:37">(<argument pos:start="81:20" pos:end="81:28"><expr pos:start="81:20" pos:end="81:28"><literal type="string" pos:start="81:20" pos:end="81:28">" 0x%02x"</literal></expr></argument>, <argument pos:start="81:31" pos:end="81:36"><expr pos:start="81:31" pos:end="81:36"><name pos:start="81:31" pos:end="81:36"><name pos:start="81:31" pos:end="81:33">cmd</name><index pos:start="81:34" pos:end="81:36">[<expr pos:start="81:35" pos:end="81:35"><name pos:start="81:35" pos:end="81:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="85:9" pos:end="85:21"><expr pos:start="85:9" pos:end="85:20"><call pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:14">printf</name><argument_list pos:start="85:15" pos:end="85:20">(<argument pos:start="85:16" pos:end="85:19"><expr pos:start="85:16" pos:end="85:19"><literal type="string" pos:start="85:16" pos:end="85:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="93:5" pos:end="113:5"><if pos:start="93:5" pos:end="113:5">if <condition pos:start="93:8" pos:end="93:29">(<expr pos:start="93:9" pos:end="93:28"><name pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:9">r</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:14">req</name><operator pos:start="93:15" pos:end="93:15">.</operator><name pos:start="93:16" pos:end="93:18">cmd</name><operator pos:start="93:19" pos:end="93:19">.</operator><name pos:start="93:20" pos:end="93:23">xfer</name></name> <operator pos:start="93:25" pos:end="93:26">==</operator> <literal type="number" pos:start="93:28" pos:end="93:28">0</literal></expr>)</condition> <block pos:start="93:31" pos:end="113:5">{<block_content pos:start="95:9" pos:end="111:17">

        <if_stmt pos:start="95:9" pos:end="97:30"><if pos:start="95:9" pos:end="97:30">if <condition pos:start="95:12" pos:end="95:27">(<expr pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:18"><name pos:start="95:13" pos:end="95:13">r</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:18">buf</name></name> <operator pos:start="95:20" pos:end="95:21">!=</operator> <name pos:start="95:23" pos:end="95:26">NULL</name></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:30"><block_content pos:start="97:13" pos:end="97:30">

            <expr_stmt pos:start="97:13" pos:end="97:30"><expr pos:start="97:13" pos:end="97:29"><call pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:21">qemu_free</name><argument_list pos:start="97:22" pos:end="97:29">(<argument pos:start="97:23" pos:end="97:28"><expr pos:start="97:23" pos:end="97:28"><name pos:start="97:23" pos:end="97:28"><name pos:start="97:23" pos:end="97:23">r</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:28">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:22"><expr pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:9">r</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:17">buflen</name></name> <operator pos:start="99:19" pos:end="99:19">=</operator> <literal type="number" pos:start="99:21" pos:end="99:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:22"><expr pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:9">r</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:14">buf</name></name> <operator pos:start="101:16" pos:end="101:16">=</operator> <name pos:start="101:18" pos:end="101:21">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:78"><expr pos:start="103:9" pos:end="103:77"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:77"><name pos:start="103:15" pos:end="103:29">execute_command</name><argument_list pos:start="103:30" pos:end="103:77">(<argument pos:start="103:31" pos:end="103:35"><expr pos:start="103:31" pos:end="103:35"><name pos:start="103:31" pos:end="103:35"><name pos:start="103:31" pos:end="103:31">s</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:35">bs</name></name></expr></argument>, <argument pos:start="103:38" pos:end="103:38"><expr pos:start="103:38" pos:end="103:38"><name pos:start="103:38" pos:end="103:38">r</name></expr></argument>, <argument pos:start="103:41" pos:end="103:53"><expr pos:start="103:41" pos:end="103:53"><name pos:start="103:41" pos:end="103:53">SG_DXFER_NONE</name></expr></argument>, <argument pos:start="103:56" pos:end="103:76"><expr pos:start="103:56" pos:end="103:76"><name pos:start="103:56" pos:end="103:76">scsi_command_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:22">(<expr pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:15">ret</name> <operator pos:start="105:17" pos:end="105:18">==</operator> <operator pos:start="105:20" pos:end="105:20">-</operator><literal type="number" pos:start="105:21" pos:end="105:21">1</literal></expr>)</condition> <block pos:start="105:24" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:46">

            <expr_stmt pos:start="107:13" pos:end="107:46"><expr pos:start="107:13" pos:end="107:45"><call pos:start="107:13" pos:end="107:45"><name pos:start="107:13" pos:end="107:33">scsi_command_complete</name><argument_list pos:start="107:34" pos:end="107:45">(<argument pos:start="107:35" pos:end="107:35"><expr pos:start="107:35" pos:end="107:35"><name pos:start="107:35" pos:end="107:35">r</name></expr></argument>, <argument pos:start="107:38" pos:end="107:44"><expr pos:start="107:38" pos:end="107:44"><operator pos:start="107:38" pos:end="107:38">-</operator><name pos:start="107:39" pos:end="107:44">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="111:9" pos:end="111:17">return <expr pos:start="111:16" pos:end="111:16"><literal type="number" pos:start="111:16" pos:end="111:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="127:5"><if pos:start="117:5" pos:end="127:5">if <condition pos:start="117:8" pos:end="117:37">(<expr pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:9">r</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:17">buflen</name></name> <operator pos:start="117:19" pos:end="117:20">!=</operator> <name pos:start="117:22" pos:end="117:36"><name pos:start="117:22" pos:end="117:22">r</name><operator pos:start="117:23" pos:end="117:24">-&gt;</operator><name pos:start="117:25" pos:end="117:27">req</name><operator pos:start="117:28" pos:end="117:28">.</operator><name pos:start="117:29" pos:end="117:31">cmd</name><operator pos:start="117:32" pos:end="117:32">.</operator><name pos:start="117:33" pos:end="117:36">xfer</name></name></expr>)</condition> <block pos:start="117:39" pos:end="127:5">{<block_content pos:start="119:9" pos:end="125:36">

        <if_stmt pos:start="119:9" pos:end="121:30"><if pos:start="119:9" pos:end="121:30">if <condition pos:start="119:12" pos:end="119:27">(<expr pos:start="119:13" pos:end="119:26"><name pos:start="119:13" pos:end="119:18"><name pos:start="119:13" pos:end="119:13">r</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:18">buf</name></name> <operator pos:start="119:20" pos:end="119:21">!=</operator> <name pos:start="119:23" pos:end="119:26">NULL</name></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:30"><block_content pos:start="121:13" pos:end="121:30">

            <expr_stmt pos:start="121:13" pos:end="121:30"><expr pos:start="121:13" pos:end="121:29"><call pos:start="121:13" pos:end="121:29"><name pos:start="121:13" pos:end="121:21">qemu_free</name><argument_list pos:start="121:22" pos:end="121:29">(<argument pos:start="121:23" pos:end="121:28"><expr pos:start="121:23" pos:end="121:28"><name pos:start="121:23" pos:end="121:28"><name pos:start="121:23" pos:end="121:23">r</name><operator pos:start="121:24" pos:end="121:25">-&gt;</operator><name pos:start="121:26" pos:end="121:28">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:46"><expr pos:start="123:9" pos:end="123:45"><name pos:start="123:9" pos:end="123:14"><name pos:start="123:9" pos:end="123:9">r</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:14">buf</name></name> <operator pos:start="123:16" pos:end="123:16">=</operator> <call pos:start="123:18" pos:end="123:45"><name pos:start="123:18" pos:end="123:28">qemu_malloc</name><argument_list pos:start="123:29" pos:end="123:45">(<argument pos:start="123:30" pos:end="123:44"><expr pos:start="123:30" pos:end="123:44"><name pos:start="123:30" pos:end="123:44"><name pos:start="123:30" pos:end="123:30">r</name><operator pos:start="123:31" pos:end="123:32">-&gt;</operator><name pos:start="123:33" pos:end="123:35">req</name><operator pos:start="123:36" pos:end="123:36">.</operator><name pos:start="123:37" pos:end="123:39">cmd</name><operator pos:start="123:40" pos:end="123:40">.</operator><name pos:start="123:41" pos:end="123:44">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:36"><expr pos:start="125:9" pos:end="125:35"><name pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:9">r</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:17">buflen</name></name> <operator pos:start="125:19" pos:end="125:19">=</operator> <name pos:start="125:21" pos:end="125:35"><name pos:start="125:21" pos:end="125:21">r</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:26">req</name><operator pos:start="125:27" pos:end="125:27">.</operator><name pos:start="125:28" pos:end="125:30">cmd</name><operator pos:start="125:31" pos:end="125:31">.</operator><name pos:start="125:32" pos:end="125:35">xfer</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:33"><expr pos:start="131:5" pos:end="131:32"><call pos:start="131:5" pos:end="131:32"><name pos:start="131:5" pos:end="131:10">memset</name><argument_list pos:start="131:11" pos:end="131:32">(<argument pos:start="131:12" pos:end="131:17"><expr pos:start="131:12" pos:end="131:17"><name pos:start="131:12" pos:end="131:17"><name pos:start="131:12" pos:end="131:12">r</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:17">buf</name></name></expr></argument>, <argument pos:start="131:20" pos:end="131:20"><expr pos:start="131:20" pos:end="131:20"><literal type="number" pos:start="131:20" pos:end="131:20">0</literal></expr></argument>, <argument pos:start="131:23" pos:end="131:31"><expr pos:start="131:23" pos:end="131:31"><name pos:start="131:23" pos:end="131:31"><name pos:start="131:23" pos:end="131:23">r</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:31">buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:29"><expr pos:start="133:5" pos:end="133:28"><name pos:start="133:5" pos:end="133:10"><name pos:start="133:5" pos:end="133:5">r</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:10">len</name></name> <operator pos:start="133:12" pos:end="133:12">=</operator> <name pos:start="133:14" pos:end="133:28"><name pos:start="133:14" pos:end="133:14">r</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:19">req</name><operator pos:start="133:20" pos:end="133:20">.</operator><name pos:start="133:21" pos:end="133:23">cmd</name><operator pos:start="133:24" pos:end="133:24">.</operator><name pos:start="133:25" pos:end="133:28">xfer</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="145:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:44">(<expr pos:start="135:9" pos:end="135:43"><name pos:start="135:9" pos:end="135:23"><name pos:start="135:9" pos:end="135:9">r</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:14">req</name><operator pos:start="135:15" pos:end="135:15">.</operator><name pos:start="135:16" pos:end="135:18">cmd</name><operator pos:start="135:19" pos:end="135:19">.</operator><name pos:start="135:20" pos:end="135:23">mode</name></name> <operator pos:start="135:25" pos:end="135:26">==</operator> <name pos:start="135:28" pos:end="135:43">SCSI_XFER_TO_DEV</name></expr>)</condition> <block pos:start="135:46" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:32">

        <expr_stmt pos:start="137:9" pos:end="137:19"><expr pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:14"><name pos:start="137:9" pos:end="137:9">r</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:14">len</name></name> <operator pos:start="137:16" pos:end="137:16">=</operator> <literal type="number" pos:start="137:18" pos:end="137:18">0</literal></expr>;</expr_stmt>

        <return pos:start="139:9" pos:end="139:32">return <expr pos:start="139:16" pos:end="139:31"><operator pos:start="139:16" pos:end="139:16">-</operator><name pos:start="139:17" pos:end="139:31"><name pos:start="139:17" pos:end="139:17">r</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:22">req</name><operator pos:start="139:23" pos:end="139:23">.</operator><name pos:start="139:24" pos:end="139:26">cmd</name><operator pos:start="139:27" pos:end="139:27">.</operator><name pos:start="139:28" pos:end="139:31">xfer</name></name></expr>;</return>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="145:5">else <block pos:start="141:12" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:31">

        <return pos:start="143:9" pos:end="143:31">return <expr pos:start="143:16" pos:end="143:30"><name pos:start="143:16" pos:end="143:30"><name pos:start="143:16" pos:end="143:16">r</name><operator pos:start="143:17" pos:end="143:18">-&gt;</operator><name pos:start="143:19" pos:end="143:21">req</name><operator pos:start="143:22" pos:end="143:22">.</operator><name pos:start="143:23" pos:end="143:25">cmd</name><operator pos:start="143:26" pos:end="143:26">.</operator><name pos:start="143:27" pos:end="143:30">xfer</name></name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
