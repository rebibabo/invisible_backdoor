<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10095.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:34">start_exclusive</name><parameter_list pos:start="1:35" pos:end="1:40">(<parameter pos:start="1:36" pos:end="1:39"><decl pos:start="1:36" pos:end="1:39"><type pos:start="1:36" pos:end="1:39"><name pos:start="1:36" pos:end="1:39">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:5">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:19">other</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:40"><expr pos:start="7:5" pos:end="7:39"><call pos:start="7:5" pos:end="7:39"><name pos:start="7:5" pos:end="7:22">pthread_mutex_lock</name><argument_list pos:start="7:23" pos:end="7:39">(<argument pos:start="7:24" pos:end="7:38"><expr pos:start="7:24" pos:end="7:38"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:38">exclusive_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:21"><expr pos:start="9:5" pos:end="9:20"><call pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">exclusive_idle</name><argument_list pos:start="9:19" pos:end="9:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:21"><expr pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:16">pending_cpus</name> <operator pos:start="13:18" pos:end="13:18">=</operator> <literal type="number" pos:start="13:20" pos:end="13:20">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="15:5" pos:end="15:46">/* Make all other cpus stop executing.  */</comment>

    <for pos:start="17:5" pos:end="27:5">for <control pos:start="17:9" pos:end="17:59">(<init pos:start="17:10" pos:end="17:27"><expr pos:start="17:10" pos:end="17:26"><name pos:start="17:10" pos:end="17:14">other</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:26">first_cpu</name></expr>;</init> <condition pos:start="17:29" pos:end="17:34"><expr pos:start="17:29" pos:end="17:33"><name pos:start="17:29" pos:end="17:33">other</name></expr>;</condition> <incr pos:start="17:36" pos:end="17:58"><expr pos:start="17:36" pos:end="17:58"><name pos:start="17:36" pos:end="17:40">other</name> <operator pos:start="17:42" pos:end="17:42">=</operator> <name pos:start="17:44" pos:end="17:58"><name pos:start="17:44" pos:end="17:48">other</name><operator pos:start="17:49" pos:end="17:50">-&gt;</operator><name pos:start="17:51" pos:end="17:58">next_cpu</name></name></expr></incr>)</control> <block pos:start="17:61" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:9">

        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:27">(<expr pos:start="19:13" pos:end="19:26"><name pos:start="19:13" pos:end="19:26"><name pos:start="19:13" pos:end="19:17">other</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:26">running</name></name></expr>)</condition> <block pos:start="19:29" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:53">

            <expr_stmt pos:start="21:13" pos:end="21:27"><expr pos:start="21:13" pos:end="21:26"><name pos:start="21:13" pos:end="21:24">pending_cpus</name><operator pos:start="21:25" pos:end="21:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:53"><expr pos:start="23:13" pos:end="23:52"><call pos:start="23:13" pos:end="23:52"><name pos:start="23:13" pos:end="23:25">cpu_interrupt</name><argument_list pos:start="23:26" pos:end="23:52">(<argument pos:start="23:27" pos:end="23:31"><expr pos:start="23:27" pos:end="23:31"><name pos:start="23:27" pos:end="23:31">other</name></expr></argument>, <argument pos:start="23:34" pos:end="23:51"><expr pos:start="23:34" pos:end="23:51"><name pos:start="23:34" pos:end="23:51">CPU_INTERRUPT_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:25">(<expr pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:20">pending_cpus</name> <operator pos:start="29:22" pos:end="29:22">&gt;</operator> <literal type="number" pos:start="29:24" pos:end="29:24">1</literal></expr>)</condition> <block pos:start="29:27" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:60">

        <expr_stmt pos:start="31:9" pos:end="31:60"><expr pos:start="31:9" pos:end="31:59"><call pos:start="31:9" pos:end="31:59"><name pos:start="31:9" pos:end="31:25">pthread_cond_wait</name><argument_list pos:start="31:26" pos:end="31:59">(<argument pos:start="31:27" pos:end="31:41"><expr pos:start="31:27" pos:end="31:41"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:41">exclusive_cond</name></expr></argument>, <argument pos:start="31:44" pos:end="31:58"><expr pos:start="31:44" pos:end="31:58"><operator pos:start="31:44" pos:end="31:44">&amp;</operator><name pos:start="31:45" pos:end="31:58">exclusive_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
