<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10303.c" pos:tabs="8"><function pos:start="1:1" pos:end="1173:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">decode_opc</name> <parameter_list pos:start="1:24" pos:end="1:57">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:32">CPUState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">env</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:51">DisasContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1173:1">{<block_content pos:start="5:5" pos:end="1171:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int32_t</name></type> <name pos:start="5:13" pos:end="5:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">rs</name></decl>, <decl pos:start="7:13" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:14">rt</name></decl>, <decl pos:start="7:17" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:18">rd</name></decl>, <decl pos:start="7:21" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:22">sa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:15">op</name></decl>, <decl pos:start="9:18" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:18" pos:end="9:20">op1</name></decl>, <decl pos:start="9:23" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:23" pos:end="9:25">op2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int16_t</name></type> <name pos:start="11:13" pos:end="11:15">imm</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:55">/* make sure instructions are on a word boundary */</comment>

    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:11">ctx</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:15">pc</name></name> <operator pos:start="17:17" pos:end="17:17">&amp;</operator> <literal type="number" pos:start="17:19" pos:end="17:21">0x3</literal></expr>)</condition> <block pos:start="17:24" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:15">

        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:11">env</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:25">CP0_BadVAddr</name></name> <operator pos:start="19:27" pos:end="19:27">=</operator> <name pos:start="19:29" pos:end="19:35"><name pos:start="19:29" pos:end="19:31">ctx</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:35">pc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:43"><expr pos:start="21:9" pos:end="21:42"><call pos:start="21:9" pos:end="21:42"><name pos:start="21:9" pos:end="21:26">generate_exception</name><argument_list pos:start="21:27" pos:end="21:42">(<argument pos:start="21:28" pos:end="21:30"><expr pos:start="21:28" pos:end="21:30"><name pos:start="21:28" pos:end="21:30">ctx</name></expr></argument>, <argument pos:start="21:33" pos:end="21:41"><expr pos:start="21:33" pos:end="21:41"><name pos:start="21:33" pos:end="21:41">EXCP_AdEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="47:5"><if pos:start="29:5" pos:end="47:5">if <condition pos:start="29:8" pos:end="29:58">(<expr pos:start="29:9" pos:end="29:57"><operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:20"><name pos:start="29:10" pos:end="29:12">ctx</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:20">hflags</name></name> <operator pos:start="29:22" pos:end="29:22">&amp;</operator> <name pos:start="29:24" pos:end="29:39">MIPS_HFLAG_BMASK</name><operator pos:start="29:40" pos:end="29:40">)</operator> <operator pos:start="29:42" pos:end="29:43">==</operator> <name pos:start="29:45" pos:end="29:57">MIPS_HFLAG_BL</name></expr>)</condition> <block pos:start="29:60" pos:end="47:5">{<block_content pos:start="31:9" pos:end="45:26">

        <decl_stmt pos:start="31:9" pos:end="31:15"><decl pos:start="31:9" pos:end="31:14"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:14">l1</name></decl>;</decl_stmt>

        <comment type="block" pos:start="33:9" pos:end="33:43">/* Handle blikely not taken case */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:73"><expr pos:start="35:9" pos:end="35:72"><call pos:start="35:9" pos:end="35:72"><name pos:start="35:9" pos:end="35:18">MIPS_DEBUG</name><argument_list pos:start="35:19" pos:end="35:72">(<argument pos:start="35:20" pos:end="35:58"><expr pos:start="35:20" pos:end="35:58"><literal type="string" pos:start="35:20" pos:end="35:40">"blikely condition ("</literal> <name pos:start="35:42" pos:end="35:54">TARGET_FMT_lx</name> <literal type="string" pos:start="35:56" pos:end="35:58">")"</literal></expr></argument>, <argument pos:start="35:61" pos:end="35:71"><expr pos:start="35:61" pos:end="35:71"><name pos:start="35:61" pos:end="35:67"><name pos:start="35:61" pos:end="35:63">ctx</name><operator pos:start="35:64" pos:end="35:65">-&gt;</operator><name pos:start="35:66" pos:end="35:67">pc</name></name> <operator pos:start="35:69" pos:end="35:69">+</operator> <literal type="number" pos:start="35:71" pos:end="35:71">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:10">l1</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:28"><name pos:start="37:14" pos:end="37:26">gen_new_label</name><argument_list pos:start="37:27" pos:end="37:28">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><call pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:21">gen_op_jnz_T2</name><argument_list pos:start="39:22" pos:end="39:25">(<argument pos:start="39:23" pos:end="39:24"><expr pos:start="39:23" pos:end="39:24"><name pos:start="39:23" pos:end="39:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:59"><expr pos:start="41:9" pos:end="41:58"><call pos:start="41:9" pos:end="41:58"><name pos:start="41:9" pos:end="41:25">gen_op_save_state</name><argument_list pos:start="41:26" pos:end="41:58">(<argument pos:start="41:27" pos:end="41:57"><expr pos:start="41:27" pos:end="41:57"><name pos:start="41:27" pos:end="41:37"><name pos:start="41:27" pos:end="41:29">ctx</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:37">hflags</name></name> <operator pos:start="41:39" pos:end="41:39">&amp;</operator> <operator pos:start="41:41" pos:end="41:41">~</operator><name pos:start="41:42" pos:end="41:57">MIPS_HFLAG_BMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:41"><expr pos:start="43:9" pos:end="43:40"><call pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:19">gen_goto_tb</name><argument_list pos:start="43:20" pos:end="43:40">(<argument pos:start="43:21" pos:end="43:23"><expr pos:start="43:21" pos:end="43:23"><name pos:start="43:21" pos:end="43:23">ctx</name></expr></argument>, <argument pos:start="43:26" pos:end="43:26"><expr pos:start="43:26" pos:end="43:26"><literal type="number" pos:start="43:26" pos:end="43:26">1</literal></expr></argument>, <argument pos:start="43:29" pos:end="43:39"><expr pos:start="43:29" pos:end="43:39"><name pos:start="43:29" pos:end="43:35"><name pos:start="43:29" pos:end="43:31">ctx</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:35">pc</name></name> <operator pos:start="43:37" pos:end="43:37">+</operator> <literal type="number" pos:start="43:39" pos:end="43:39">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:26"><expr pos:start="45:9" pos:end="45:25"><call pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:21">gen_set_label</name><argument_list pos:start="45:22" pos:end="45:25">(<argument pos:start="45:23" pos:end="45:24"><expr pos:start="45:23" pos:end="45:24"><name pos:start="45:23" pos:end="45:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:6">op</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <call pos:start="49:10" pos:end="49:35"><name pos:start="49:10" pos:end="49:22">MASK_OP_MAJOR</name><argument_list pos:start="49:23" pos:end="49:35">(<argument pos:start="49:24" pos:end="49:34"><expr pos:start="49:24" pos:end="49:34"><name pos:start="49:24" pos:end="49:34"><name pos:start="49:24" pos:end="49:26">ctx</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:34">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:36"><expr pos:start="51:5" pos:end="51:35"><name pos:start="51:5" pos:end="51:6">rs</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <operator pos:start="51:10" pos:end="51:10">(</operator><name pos:start="51:11" pos:end="51:21"><name pos:start="51:11" pos:end="51:13">ctx</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:21">opcode</name></name> <operator pos:start="51:23" pos:end="51:24">&gt;&gt;</operator> <literal type="number" pos:start="51:26" pos:end="51:27">21</literal><operator pos:start="51:28" pos:end="51:28">)</operator> <operator pos:start="51:30" pos:end="51:30">&amp;</operator> <literal type="number" pos:start="51:32" pos:end="51:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:36"><expr pos:start="53:5" pos:end="53:35"><name pos:start="53:5" pos:end="53:6">rt</name> <operator pos:start="53:8" pos:end="53:8">=</operator> <operator pos:start="53:10" pos:end="53:10">(</operator><name pos:start="53:11" pos:end="53:21"><name pos:start="53:11" pos:end="53:13">ctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:21">opcode</name></name> <operator pos:start="53:23" pos:end="53:24">&gt;&gt;</operator> <literal type="number" pos:start="53:26" pos:end="53:27">16</literal><operator pos:start="53:28" pos:end="53:28">)</operator> <operator pos:start="53:30" pos:end="53:30">&amp;</operator> <literal type="number" pos:start="53:32" pos:end="53:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:36"><expr pos:start="55:5" pos:end="55:35"><name pos:start="55:5" pos:end="55:6">rd</name> <operator pos:start="55:8" pos:end="55:8">=</operator> <operator pos:start="55:10" pos:end="55:10">(</operator><name pos:start="55:11" pos:end="55:21"><name pos:start="55:11" pos:end="55:13">ctx</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:21">opcode</name></name> <operator pos:start="55:23" pos:end="55:24">&gt;&gt;</operator> <literal type="number" pos:start="55:26" pos:end="55:27">11</literal><operator pos:start="55:28" pos:end="55:28">)</operator> <operator pos:start="55:30" pos:end="55:30">&amp;</operator> <literal type="number" pos:start="55:32" pos:end="55:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:35"><expr pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:6">sa</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <operator pos:start="57:10" pos:end="57:10">(</operator><name pos:start="57:11" pos:end="57:21"><name pos:start="57:11" pos:end="57:13">ctx</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:21">opcode</name></name> <operator pos:start="57:23" pos:end="57:24">&gt;&gt;</operator> <literal type="number" pos:start="57:26" pos:end="57:26">6</literal><operator pos:start="57:27" pos:end="57:27">)</operator> <operator pos:start="57:29" pos:end="57:29">&amp;</operator> <literal type="number" pos:start="57:31" pos:end="57:34">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:31"><expr pos:start="59:5" pos:end="59:30"><name pos:start="59:5" pos:end="59:7">imm</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <operator pos:start="59:11" pos:end="59:11">(</operator><name pos:start="59:12" pos:end="59:18">int16_t</name><operator pos:start="59:19" pos:end="59:19">)</operator><name pos:start="59:20" pos:end="59:30"><name pos:start="59:20" pos:end="59:22">ctx</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:30">opcode</name></name></expr>;</expr_stmt>

    <switch pos:start="61:5" pos:end="1089:5">switch <condition pos:start="61:12" pos:end="61:15">(<expr pos:start="61:13" pos:end="61:14"><name pos:start="61:13" pos:end="61:14">op</name></expr>)</condition> <block pos:start="61:17" pos:end="1089:5">{<block_content pos:start="63:5" pos:end="1087:14">

    <case pos:start="63:5" pos:end="63:21">case <expr pos:start="63:10" pos:end="63:20"><name pos:start="63:10" pos:end="63:20">OPC_SPECIAL</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:11">op1</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:39"><name pos:start="65:15" pos:end="65:26">MASK_SPECIAL</name><argument_list pos:start="65:27" pos:end="65:39">(<argument pos:start="65:28" pos:end="65:38"><expr pos:start="65:28" pos:end="65:38"><name pos:start="65:28" pos:end="65:38"><name pos:start="65:28" pos:end="65:30">ctx</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:38">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="67:9" pos:end="263:9">switch <condition pos:start="67:16" pos:end="67:20">(<expr pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:19">op1</name></expr>)</condition> <block pos:start="67:22" pos:end="263:9">{<block_content pos:start="69:9" pos:end="261:18">

        <case pos:start="69:9" pos:end="69:21">case <expr pos:start="69:14" pos:end="69:20"><name pos:start="69:14" pos:end="69:20">OPC_SLL</name></expr>:</case>          <comment type="block" pos:start="69:32" pos:end="69:62">/* Arithmetic with immediate */</comment>

        <case pos:start="71:9" pos:end="71:33">case <expr pos:start="71:14" pos:end="71:32"><name pos:start="71:14" pos:end="71:20">OPC_SRL</name> <operator pos:start="71:22" pos:end="71:24">...</operator> <name pos:start="71:26" pos:end="71:32">OPC_SRA</name></expr>:</case>

            <expr_stmt pos:start="73:13" pos:end="73:53"><expr pos:start="73:13" pos:end="73:52"><call pos:start="73:13" pos:end="73:52"><name pos:start="73:13" pos:end="73:25">gen_arith_imm</name><argument_list pos:start="73:26" pos:end="73:52">(<argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">env</name></expr></argument>, <argument pos:start="73:32" pos:end="73:34"><expr pos:start="73:32" pos:end="73:34"><name pos:start="73:32" pos:end="73:34">ctx</name></expr></argument>, <argument pos:start="73:37" pos:end="73:39"><expr pos:start="73:37" pos:end="73:39"><name pos:start="73:37" pos:end="73:39">op1</name></expr></argument>, <argument pos:start="73:42" pos:end="73:43"><expr pos:start="73:42" pos:end="73:43"><name pos:start="73:42" pos:end="73:43">rd</name></expr></argument>, <argument pos:start="73:46" pos:end="73:47"><expr pos:start="73:46" pos:end="73:47"><name pos:start="73:46" pos:end="73:47">rt</name></expr></argument>, <argument pos:start="73:50" pos:end="73:51"><expr pos:start="73:50" pos:end="73:51"><name pos:start="73:50" pos:end="73:51">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:35">case <expr pos:start="77:14" pos:end="77:34"><name pos:start="77:14" pos:end="77:21">OPC_MOVZ</name> <operator pos:start="77:23" pos:end="77:25">...</operator> <name pos:start="77:27" pos:end="77:34">OPC_MOVN</name></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:57"><expr pos:start="79:13" pos:end="79:56"><call pos:start="79:13" pos:end="79:56"><name pos:start="79:13" pos:end="79:22">check_insn</name><argument_list pos:start="79:23" pos:end="79:56">(<argument pos:start="79:24" pos:end="79:26"><expr pos:start="79:24" pos:end="79:26"><name pos:start="79:24" pos:end="79:26">env</name></expr></argument>, <argument pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:31">ctx</name></expr></argument>, <argument pos:start="79:34" pos:end="79:55"><expr pos:start="79:34" pos:end="79:55"><name pos:start="79:34" pos:end="79:42">ISA_MIPS4</name> <operator pos:start="79:44" pos:end="79:44">|</operator> <name pos:start="79:46" pos:end="79:55">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case pos:start="81:9" pos:end="81:22">case <expr pos:start="81:14" pos:end="81:21"><name pos:start="81:14" pos:end="81:21">OPC_SLLV</name></expr>:</case>         <comment type="block" pos:start="81:32" pos:end="81:47">/* Arithmetic */</comment>

        <case pos:start="83:9" pos:end="83:35">case <expr pos:start="83:14" pos:end="83:34"><name pos:start="83:14" pos:end="83:21">OPC_SRLV</name> <operator pos:start="83:23" pos:end="83:25">...</operator> <name pos:start="83:27" pos:end="83:34">OPC_SRAV</name></expr>:</case>

        <case pos:start="85:9" pos:end="85:33">case <expr pos:start="85:14" pos:end="85:32"><name pos:start="85:14" pos:end="85:20">OPC_ADD</name> <operator pos:start="85:22" pos:end="85:24">...</operator> <name pos:start="85:26" pos:end="85:32">OPC_NOR</name></expr>:</case>

        <case pos:start="87:9" pos:end="87:34">case <expr pos:start="87:14" pos:end="87:33"><name pos:start="87:14" pos:end="87:20">OPC_SLT</name> <operator pos:start="87:22" pos:end="87:24">...</operator> <name pos:start="87:26" pos:end="87:33">OPC_SLTU</name></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:49"><expr pos:start="89:13" pos:end="89:48"><call pos:start="89:13" pos:end="89:48"><name pos:start="89:13" pos:end="89:21">gen_arith</name><argument_list pos:start="89:22" pos:end="89:48">(<argument pos:start="89:23" pos:end="89:25"><expr pos:start="89:23" pos:end="89:25"><name pos:start="89:23" pos:end="89:25">env</name></expr></argument>, <argument pos:start="89:28" pos:end="89:30"><expr pos:start="89:28" pos:end="89:30"><name pos:start="89:28" pos:end="89:30">ctx</name></expr></argument>, <argument pos:start="89:33" pos:end="89:35"><expr pos:start="89:33" pos:end="89:35"><name pos:start="89:33" pos:end="89:35">op1</name></expr></argument>, <argument pos:start="89:38" pos:end="89:39"><expr pos:start="89:38" pos:end="89:39"><name pos:start="89:38" pos:end="89:39">rd</name></expr></argument>, <argument pos:start="89:42" pos:end="89:43"><expr pos:start="89:42" pos:end="89:43"><name pos:start="89:42" pos:end="89:43">rs</name></expr></argument>, <argument pos:start="89:46" pos:end="89:47"><expr pos:start="89:46" pos:end="89:47"><name pos:start="89:46" pos:end="89:47">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <case pos:start="93:9" pos:end="93:35">case <expr pos:start="93:14" pos:end="93:34"><name pos:start="93:14" pos:end="93:21">OPC_MULT</name> <operator pos:start="93:23" pos:end="93:25">...</operator> <name pos:start="93:27" pos:end="93:34">OPC_DIVU</name></expr>:</case>

            <expr_stmt pos:start="95:13" pos:end="95:41"><expr pos:start="95:13" pos:end="95:40"><call pos:start="95:13" pos:end="95:40"><name pos:start="95:13" pos:end="95:22">gen_muldiv</name><argument_list pos:start="95:23" pos:end="95:40">(<argument pos:start="95:24" pos:end="95:26"><expr pos:start="95:24" pos:end="95:26"><name pos:start="95:24" pos:end="95:26">ctx</name></expr></argument>, <argument pos:start="95:29" pos:end="95:31"><expr pos:start="95:29" pos:end="95:31"><name pos:start="95:29" pos:end="95:31">op1</name></expr></argument>, <argument pos:start="95:34" pos:end="95:35"><expr pos:start="95:34" pos:end="95:35"><name pos:start="95:34" pos:end="95:35">rs</name></expr></argument>, <argument pos:start="95:38" pos:end="95:39"><expr pos:start="95:38" pos:end="95:39"><name pos:start="95:38" pos:end="95:39">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:33">case <expr pos:start="99:14" pos:end="99:32"><name pos:start="99:14" pos:end="99:19">OPC_JR</name> <operator pos:start="99:21" pos:end="99:23">...</operator> <name pos:start="99:25" pos:end="99:32">OPC_JALR</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:53"><expr pos:start="101:13" pos:end="101:52"><call pos:start="101:13" pos:end="101:52"><name pos:start="101:13" pos:end="101:30">gen_compute_branch</name><argument_list pos:start="101:31" pos:end="101:52">(<argument pos:start="101:32" pos:end="101:34"><expr pos:start="101:32" pos:end="101:34"><name pos:start="101:32" pos:end="101:34">ctx</name></expr></argument>, <argument pos:start="101:37" pos:end="101:39"><expr pos:start="101:37" pos:end="101:39"><name pos:start="101:37" pos:end="101:39">op1</name></expr></argument>, <argument pos:start="101:42" pos:end="101:43"><expr pos:start="101:42" pos:end="101:43"><name pos:start="101:42" pos:end="101:43">rs</name></expr></argument>, <argument pos:start="101:46" pos:end="101:47"><expr pos:start="101:46" pos:end="101:47"><name pos:start="101:46" pos:end="101:47">rd</name></expr></argument>, <argument pos:start="101:50" pos:end="101:51"><expr pos:start="101:50" pos:end="101:51"><name pos:start="101:50" pos:end="101:51">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:19">return;</return>

        <case pos:start="105:9" pos:end="105:33">case <expr pos:start="105:14" pos:end="105:32"><name pos:start="105:14" pos:end="105:20">OPC_TGE</name> <operator pos:start="105:22" pos:end="105:24">...</operator> <name pos:start="105:26" pos:end="105:32">OPC_TEQ</name></expr>:</case> <comment type="block" pos:start="105:35" pos:end="105:45">/* Traps */</comment>

        <case pos:start="107:9" pos:end="107:21">case <expr pos:start="107:14" pos:end="107:20"><name pos:start="107:14" pos:end="107:20">OPC_TNE</name></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:43"><expr pos:start="109:13" pos:end="109:42"><call pos:start="109:13" pos:end="109:42"><name pos:start="109:13" pos:end="109:20">gen_trap</name><argument_list pos:start="109:21" pos:end="109:42">(<argument pos:start="109:22" pos:end="109:24"><expr pos:start="109:22" pos:end="109:24"><name pos:start="109:22" pos:end="109:24">ctx</name></expr></argument>, <argument pos:start="109:27" pos:end="109:29"><expr pos:start="109:27" pos:end="109:29"><name pos:start="109:27" pos:end="109:29">op1</name></expr></argument>, <argument pos:start="109:32" pos:end="109:33"><expr pos:start="109:32" pos:end="109:33"><name pos:start="109:32" pos:end="109:33">rs</name></expr></argument>, <argument pos:start="109:36" pos:end="109:37"><expr pos:start="109:36" pos:end="109:37"><name pos:start="109:36" pos:end="109:37">rt</name></expr></argument>, <argument pos:start="109:40" pos:end="109:41"><expr pos:start="109:40" pos:end="109:41"><operator pos:start="109:40" pos:end="109:40">-</operator><literal type="number" pos:start="109:41" pos:end="109:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        <case pos:start="113:9" pos:end="113:22">case <expr pos:start="113:14" pos:end="113:21"><name pos:start="113:14" pos:end="113:21">OPC_MFHI</name></expr>:</case>          <comment type="block" pos:start="113:33" pos:end="113:53">/* Move from HI/LO */</comment>

        <case pos:start="115:9" pos:end="115:22">case <expr pos:start="115:14" pos:end="115:21"><name pos:start="115:14" pos:end="115:21">OPC_MFLO</name></expr>:</case>

            <expr_stmt pos:start="117:13" pos:end="117:35"><expr pos:start="117:13" pos:end="117:34"><call pos:start="117:13" pos:end="117:34"><name pos:start="117:13" pos:end="117:20">gen_HILO</name><argument_list pos:start="117:21" pos:end="117:34">(<argument pos:start="117:22" pos:end="117:24"><expr pos:start="117:22" pos:end="117:24"><name pos:start="117:22" pos:end="117:24">ctx</name></expr></argument>, <argument pos:start="117:27" pos:end="117:29"><expr pos:start="117:27" pos:end="117:29"><name pos:start="117:27" pos:end="117:29">op1</name></expr></argument>, <argument pos:start="117:32" pos:end="117:33"><expr pos:start="117:32" pos:end="117:33"><name pos:start="117:32" pos:end="117:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="119:13" pos:end="119:18">break;</break>

        <case pos:start="121:9" pos:end="121:22">case <expr pos:start="121:14" pos:end="121:21"><name pos:start="121:14" pos:end="121:21">OPC_MTHI</name></expr>:</case>

        <case pos:start="123:9" pos:end="123:22">case <expr pos:start="123:14" pos:end="123:21"><name pos:start="123:14" pos:end="123:21">OPC_MTLO</name></expr>:</case>          <comment type="block" pos:start="123:33" pos:end="123:51">/* Move to HI/LO */</comment>

            <expr_stmt pos:start="125:13" pos:end="125:35"><expr pos:start="125:13" pos:end="125:34"><call pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:20">gen_HILO</name><argument_list pos:start="125:21" pos:end="125:34">(<argument pos:start="125:22" pos:end="125:24"><expr pos:start="125:22" pos:end="125:24"><name pos:start="125:22" pos:end="125:24">ctx</name></expr></argument>, <argument pos:start="125:27" pos:end="125:29"><expr pos:start="125:27" pos:end="125:29"><name pos:start="125:27" pos:end="125:29">op1</name></expr></argument>, <argument pos:start="125:32" pos:end="125:33"><expr pos:start="125:32" pos:end="125:33"><name pos:start="125:32" pos:end="125:33">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>

        <case pos:start="129:9" pos:end="132:0">case <expr pos:start="129:14" pos:end="129:21"><name pos:start="129:14" pos:end="129:21">OPC_PMON</name></expr>:</case>          <comment type="block" pos:start="129:33" pos:end="129:72">/* Pmon entry point, also R4010 selsl */</comment>

<cpp:ifdef pos:start="131:1" pos:end="131:27">#<cpp:directive pos:start="131:2" pos:end="131:6">ifdef</cpp:directive> <name pos:start="131:8" pos:end="131:27">MIPS_STRICT_STANDARD</name></cpp:ifdef>

            <expr_stmt pos:start="133:13" pos:end="133:39"><expr pos:start="133:13" pos:end="133:38"><call pos:start="133:13" pos:end="133:38"><name pos:start="133:13" pos:end="133:22">MIPS_INVAL</name><argument_list pos:start="133:23" pos:end="133:38">(<argument pos:start="133:24" pos:end="133:37"><expr pos:start="133:24" pos:end="133:37"><literal type="string" pos:start="133:24" pos:end="133:37">"PMON / selsl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="138:0"><expr pos:start="135:13" pos:end="135:44"><call pos:start="135:13" pos:end="135:44"><name pos:start="135:13" pos:end="135:30">generate_exception</name><argument_list pos:start="135:31" pos:end="135:44">(<argument pos:start="135:32" pos:end="135:34"><expr pos:start="135:32" pos:end="135:34"><name pos:start="135:32" pos:end="135:34">ctx</name></expr></argument>, <argument pos:start="135:37" pos:end="135:43"><expr pos:start="135:37" pos:end="135:43"><name pos:start="135:37" pos:end="135:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="137:1" pos:end="137:5">#<cpp:directive pos:start="137:2" pos:end="137:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="139:13" pos:end="142:0"><expr pos:start="139:13" pos:end="139:27"><call pos:start="139:13" pos:end="139:27"><name pos:start="139:13" pos:end="139:23">gen_op_pmon</name><argument_list pos:start="139:24" pos:end="139:27">(<argument pos:start="139:25" pos:end="139:26"><expr pos:start="139:25" pos:end="139:26"><name pos:start="139:25" pos:end="139:26">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        <case pos:start="145:9" pos:end="145:25">case <expr pos:start="145:14" pos:end="145:24"><name pos:start="145:14" pos:end="145:24">OPC_SYSCALL</name></expr>:</case>

            <expr_stmt pos:start="147:13" pos:end="147:50"><expr pos:start="147:13" pos:end="147:49"><call pos:start="147:13" pos:end="147:49"><name pos:start="147:13" pos:end="147:30">generate_exception</name><argument_list pos:start="147:31" pos:end="147:49">(<argument pos:start="147:32" pos:end="147:34"><expr pos:start="147:32" pos:end="147:34"><name pos:start="147:32" pos:end="147:34">ctx</name></expr></argument>, <argument pos:start="147:37" pos:end="147:48"><expr pos:start="147:37" pos:end="147:48"><name pos:start="147:37" pos:end="147:48">EXCP_SYSCALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:23">case <expr pos:start="151:14" pos:end="151:22"><name pos:start="151:14" pos:end="151:22">OPC_BREAK</name></expr>:</case>

            <expr_stmt pos:start="153:13" pos:end="153:48"><expr pos:start="153:13" pos:end="153:47"><call pos:start="153:13" pos:end="153:47"><name pos:start="153:13" pos:end="153:30">generate_exception</name><argument_list pos:start="153:31" pos:end="153:47">(<argument pos:start="153:32" pos:end="153:34"><expr pos:start="153:32" pos:end="153:34"><name pos:start="153:32" pos:end="153:34">ctx</name></expr></argument>, <argument pos:start="153:37" pos:end="153:46"><expr pos:start="153:37" pos:end="153:46"><name pos:start="153:37" pos:end="153:46">EXCP_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        <case pos:start="157:9" pos:end="160:0">case <expr pos:start="157:14" pos:end="157:21"><name pos:start="157:14" pos:end="157:21">OPC_SPIM</name></expr>:</case>

<cpp:ifdef pos:start="159:1" pos:end="159:27">#<cpp:directive pos:start="159:2" pos:end="159:6">ifdef</cpp:directive> <name pos:start="159:8" pos:end="159:27">MIPS_STRICT_STANDARD</name></cpp:ifdef>

            <expr_stmt pos:start="161:13" pos:end="161:31"><expr pos:start="161:13" pos:end="161:30"><call pos:start="161:13" pos:end="161:30"><name pos:start="161:13" pos:end="161:22">MIPS_INVAL</name><argument_list pos:start="161:23" pos:end="161:30">(<argument pos:start="161:24" pos:end="161:29"><expr pos:start="161:24" pos:end="161:29"><literal type="string" pos:start="161:24" pos:end="161:29">"SPIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="166:0"><expr pos:start="163:13" pos:end="163:44"><call pos:start="163:13" pos:end="163:44"><name pos:start="163:13" pos:end="163:30">generate_exception</name><argument_list pos:start="163:31" pos:end="163:44">(<argument pos:start="163:32" pos:end="163:34"><expr pos:start="163:32" pos:end="163:34"><name pos:start="163:32" pos:end="163:34">ctx</name></expr></argument>, <argument pos:start="163:37" pos:end="163:43"><expr pos:start="163:37" pos:end="163:43"><name pos:start="163:37" pos:end="163:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="165:1" pos:end="165:5">#<cpp:directive pos:start="165:2" pos:end="165:5">else</cpp:directive></cpp:else>

           <comment type="block" pos:start="167:12" pos:end="167:53">/* Implemented as RI exception for now. */</comment>

            <expr_stmt pos:start="169:13" pos:end="169:44"><expr pos:start="169:13" pos:end="169:43"><call pos:start="169:13" pos:end="169:43"><name pos:start="169:13" pos:end="169:22">MIPS_INVAL</name><argument_list pos:start="169:23" pos:end="169:43">(<argument pos:start="169:24" pos:end="169:42"><expr pos:start="169:24" pos:end="169:42"><literal type="string" pos:start="169:24" pos:end="169:42">"spim (unofficial)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="174:0"><expr pos:start="171:13" pos:end="171:44"><call pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:30">generate_exception</name><argument_list pos:start="171:31" pos:end="171:44">(<argument pos:start="171:32" pos:end="171:34"><expr pos:start="171:32" pos:end="171:34"><name pos:start="171:32" pos:end="171:34">ctx</name></expr></argument>, <argument pos:start="171:37" pos:end="171:43"><expr pos:start="171:37" pos:end="171:43"><name pos:start="171:37" pos:end="171:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="173:1" pos:end="173:6">#<cpp:directive pos:start="173:2" pos:end="173:6">endif</cpp:directive></cpp:endif>

            <break pos:start="175:13" pos:end="175:18">break;</break>

        <case pos:start="177:9" pos:end="177:22">case <expr pos:start="177:14" pos:end="177:21"><name pos:start="177:14" pos:end="177:21">OPC_SYNC</name></expr>:</case>

            <comment type="block" pos:start="179:13" pos:end="179:31">/* Treat as NOP. */</comment>

            <break pos:start="181:13" pos:end="181:18">break;</break>



        <case pos:start="185:9" pos:end="185:23">case <expr pos:start="185:14" pos:end="185:22"><name pos:start="185:14" pos:end="185:22">OPC_MOVCI</name></expr>:</case>

            <expr_stmt pos:start="187:13" pos:end="187:57"><expr pos:start="187:13" pos:end="187:56"><call pos:start="187:13" pos:end="187:56"><name pos:start="187:13" pos:end="187:22">check_insn</name><argument_list pos:start="187:23" pos:end="187:56">(<argument pos:start="187:24" pos:end="187:26"><expr pos:start="187:24" pos:end="187:26"><name pos:start="187:24" pos:end="187:26">env</name></expr></argument>, <argument pos:start="187:29" pos:end="187:31"><expr pos:start="187:29" pos:end="187:31"><name pos:start="187:29" pos:end="187:31">ctx</name></expr></argument>, <argument pos:start="187:34" pos:end="187:55"><expr pos:start="187:34" pos:end="187:55"><name pos:start="187:34" pos:end="187:42">ISA_MIPS4</name> <operator pos:start="187:44" pos:end="187:44">|</operator> <name pos:start="187:46" pos:end="187:55">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="189:13" pos:end="203:13"><if pos:start="189:13" pos:end="199:13">if <condition pos:start="189:16" pos:end="189:51">(<expr pos:start="189:17" pos:end="189:50"><name pos:start="189:17" pos:end="189:32"><name pos:start="189:17" pos:end="189:19">env</name><operator pos:start="189:20" pos:end="189:21">-&gt;</operator><name pos:start="189:22" pos:end="189:32">CP0_Config1</name></name> <operator pos:start="189:34" pos:end="189:34">&amp;</operator> <operator pos:start="189:36" pos:end="189:36">(</operator><literal type="number" pos:start="189:37" pos:end="189:37">1</literal> <operator pos:start="189:39" pos:end="189:40">&lt;&lt;</operator> <name pos:start="189:42" pos:end="189:49">CP0C1_FP</name><operator pos:start="189:50" pos:end="189:50">)</operator></expr>)</condition> <block pos:start="189:53" pos:end="199:13">{<block_content pos:start="191:17" pos:end="197:51">

                <expr_stmt pos:start="191:17" pos:end="191:39"><expr pos:start="191:17" pos:end="191:38"><call pos:start="191:17" pos:end="191:38"><name pos:start="191:17" pos:end="191:30">save_cpu_state</name><argument_list pos:start="191:31" pos:end="191:38">(<argument pos:start="191:32" pos:end="191:34"><expr pos:start="191:32" pos:end="191:34"><name pos:start="191:32" pos:end="191:34">ctx</name></expr></argument>, <argument pos:start="191:37" pos:end="191:37"><expr pos:start="191:37" pos:end="191:37"><literal type="number" pos:start="191:37" pos:end="191:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:39"><expr pos:start="193:17" pos:end="193:38"><call pos:start="193:17" pos:end="193:38"><name pos:start="193:17" pos:end="193:33">check_cp1_enabled</name><argument_list pos:start="193:34" pos:end="193:38">(<argument pos:start="193:35" pos:end="193:37"><expr pos:start="193:35" pos:end="193:37"><name pos:start="193:35" pos:end="193:37">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="197:51"><expr pos:start="195:17" pos:end="197:50"><call pos:start="195:17" pos:end="197:50"><name pos:start="195:17" pos:end="195:25">gen_movci</name><argument_list pos:start="195:26" pos:end="197:50">(<argument pos:start="195:27" pos:end="195:29"><expr pos:start="195:27" pos:end="195:29"><name pos:start="195:27" pos:end="195:29">ctx</name></expr></argument>, <argument pos:start="195:32" pos:end="195:33"><expr pos:start="195:32" pos:end="195:33"><name pos:start="195:32" pos:end="195:33">rd</name></expr></argument>, <argument pos:start="195:36" pos:end="195:37"><expr pos:start="195:36" pos:end="195:37"><name pos:start="195:36" pos:end="195:37">rs</name></expr></argument>, <argument pos:start="195:40" pos:end="195:64"><expr pos:start="195:40" pos:end="195:64"><operator pos:start="195:40" pos:end="195:40">(</operator><name pos:start="195:41" pos:end="195:51"><name pos:start="195:41" pos:end="195:43">ctx</name><operator pos:start="195:44" pos:end="195:45">-&gt;</operator><name pos:start="195:46" pos:end="195:51">opcode</name></name> <operator pos:start="195:53" pos:end="195:54">&gt;&gt;</operator> <literal type="number" pos:start="195:56" pos:end="195:57">18</literal><operator pos:start="195:58" pos:end="195:58">)</operator> <operator pos:start="195:60" pos:end="195:60">&amp;</operator> <literal type="number" pos:start="195:62" pos:end="195:64">0x7</literal></expr></argument>,

                          <argument pos:start="197:27" pos:end="197:49"><expr pos:start="197:27" pos:end="197:49"><operator pos:start="197:27" pos:end="197:27">(</operator><name pos:start="197:28" pos:end="197:38"><name pos:start="197:28" pos:end="197:30">ctx</name><operator pos:start="197:31" pos:end="197:32">-&gt;</operator><name pos:start="197:33" pos:end="197:38">opcode</name></name> <operator pos:start="197:40" pos:end="197:41">&gt;&gt;</operator> <literal type="number" pos:start="197:43" pos:end="197:44">16</literal><operator pos:start="197:45" pos:end="197:45">)</operator> <operator pos:start="197:47" pos:end="197:47">&amp;</operator> <literal type="number" pos:start="197:49" pos:end="197:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="199:15" pos:end="203:13">else <block pos:start="199:20" pos:end="203:13">{<block_content pos:start="201:17" pos:end="201:57">

                <expr_stmt pos:start="201:17" pos:end="201:57"><expr pos:start="201:17" pos:end="201:56"><call pos:start="201:17" pos:end="201:56"><name pos:start="201:17" pos:end="201:38">generate_exception_err</name><argument_list pos:start="201:39" pos:end="201:56">(<argument pos:start="201:40" pos:end="201:42"><expr pos:start="201:40" pos:end="201:42"><name pos:start="201:40" pos:end="201:42">ctx</name></expr></argument>, <argument pos:start="201:45" pos:end="201:52"><expr pos:start="201:45" pos:end="201:52"><name pos:start="201:45" pos:end="201:52">EXCP_CpU</name></expr></argument>, <argument pos:start="201:55" pos:end="201:55"><expr pos:start="201:55" pos:end="201:55"><literal type="number" pos:start="201:55" pos:end="201:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="205:13" pos:end="210:0">break;</break>



<cpp:if pos:start="209:1" pos:end="209:53">#<cpp:directive pos:start="209:2" pos:end="209:3">if</cpp:directive> <expr pos:start="209:5" pos:end="209:53"><call pos:start="209:5" pos:end="209:27"><name pos:start="209:5" pos:end="209:11">defined</name><argument_list pos:start="209:12" pos:end="209:27">(<argument pos:start="209:13" pos:end="209:26"><expr pos:start="209:13" pos:end="209:26"><name pos:start="209:13" pos:end="209:26">TARGET_MIPSN32</name></expr></argument>)</argument_list></call> <operator pos:start="209:29" pos:end="209:30">||</operator> <call pos:start="209:32" pos:end="209:53"><name pos:start="209:32" pos:end="209:38">defined</name><argument_list pos:start="209:39" pos:end="209:53">(<argument pos:start="209:40" pos:end="209:52"><expr pos:start="209:40" pos:end="209:52"><name pos:start="209:40" pos:end="209:52">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

       <comment type="block" pos:start="211:8" pos:end="211:36">/* MIPS64 specific opcodes */</comment>

        <case pos:start="213:9" pos:end="213:22">case <expr pos:start="213:14" pos:end="213:21"><name pos:start="213:14" pos:end="213:21">OPC_DSLL</name></expr>:</case>

        <case pos:start="215:9" pos:end="215:35">case <expr pos:start="215:14" pos:end="215:34"><name pos:start="215:14" pos:end="215:21">OPC_DSRL</name> <operator pos:start="215:23" pos:end="215:25">...</operator> <name pos:start="215:27" pos:end="215:34">OPC_DSRA</name></expr>:</case>

        <case pos:start="217:9" pos:end="217:24">case <expr pos:start="217:14" pos:end="217:23"><name pos:start="217:14" pos:end="217:23">OPC_DSLL32</name></expr>:</case>

        <case pos:start="219:9" pos:end="219:39">case <expr pos:start="219:14" pos:end="219:38"><name pos:start="219:14" pos:end="219:23">OPC_DSRL32</name> <operator pos:start="219:25" pos:end="219:27">...</operator> <name pos:start="219:29" pos:end="219:38">OPC_DSRA32</name></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:44"><expr pos:start="221:13" pos:end="221:43"><call pos:start="221:13" pos:end="221:43"><name pos:start="221:13" pos:end="221:22">check_insn</name><argument_list pos:start="221:23" pos:end="221:43">(<argument pos:start="221:24" pos:end="221:26"><expr pos:start="221:24" pos:end="221:26"><name pos:start="221:24" pos:end="221:26">env</name></expr></argument>, <argument pos:start="221:29" pos:end="221:31"><expr pos:start="221:29" pos:end="221:31"><name pos:start="221:29" pos:end="221:31">ctx</name></expr></argument>, <argument pos:start="221:34" pos:end="221:42"><expr pos:start="221:34" pos:end="221:42"><name pos:start="221:34" pos:end="221:42">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:31"><expr pos:start="223:13" pos:end="223:30"><call pos:start="223:13" pos:end="223:30"><name pos:start="223:13" pos:end="223:25">check_mips_64</name><argument_list pos:start="223:26" pos:end="223:30">(<argument pos:start="223:27" pos:end="223:29"><expr pos:start="223:27" pos:end="223:29"><name pos:start="223:27" pos:end="223:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:53"><expr pos:start="225:13" pos:end="225:52"><call pos:start="225:13" pos:end="225:52"><name pos:start="225:13" pos:end="225:25">gen_arith_imm</name><argument_list pos:start="225:26" pos:end="225:52">(<argument pos:start="225:27" pos:end="225:29"><expr pos:start="225:27" pos:end="225:29"><name pos:start="225:27" pos:end="225:29">env</name></expr></argument>, <argument pos:start="225:32" pos:end="225:34"><expr pos:start="225:32" pos:end="225:34"><name pos:start="225:32" pos:end="225:34">ctx</name></expr></argument>, <argument pos:start="225:37" pos:end="225:39"><expr pos:start="225:37" pos:end="225:39"><name pos:start="225:37" pos:end="225:39">op1</name></expr></argument>, <argument pos:start="225:42" pos:end="225:43"><expr pos:start="225:42" pos:end="225:43"><name pos:start="225:42" pos:end="225:43">rd</name></expr></argument>, <argument pos:start="225:46" pos:end="225:47"><expr pos:start="225:46" pos:end="225:47"><name pos:start="225:46" pos:end="225:47">rt</name></expr></argument>, <argument pos:start="225:50" pos:end="225:51"><expr pos:start="225:50" pos:end="225:51"><name pos:start="225:50" pos:end="225:51">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="227:13" pos:end="227:18">break;</break>

        <case pos:start="229:9" pos:end="229:23">case <expr pos:start="229:14" pos:end="229:22"><name pos:start="229:14" pos:end="229:22">OPC_DSLLV</name></expr>:</case>

        <case pos:start="231:9" pos:end="231:37">case <expr pos:start="231:14" pos:end="231:36"><name pos:start="231:14" pos:end="231:22">OPC_DSRLV</name> <operator pos:start="231:24" pos:end="231:26">...</operator> <name pos:start="231:28" pos:end="231:36">OPC_DSRAV</name></expr>:</case>

        <case pos:start="233:9" pos:end="233:36">case <expr pos:start="233:14" pos:end="233:35"><name pos:start="233:14" pos:end="233:21">OPC_DADD</name> <operator pos:start="233:23" pos:end="233:25">...</operator> <name pos:start="233:27" pos:end="233:35">OPC_DSUBU</name></expr>:</case>

            <expr_stmt pos:start="235:13" pos:end="235:44"><expr pos:start="235:13" pos:end="235:43"><call pos:start="235:13" pos:end="235:43"><name pos:start="235:13" pos:end="235:22">check_insn</name><argument_list pos:start="235:23" pos:end="235:43">(<argument pos:start="235:24" pos:end="235:26"><expr pos:start="235:24" pos:end="235:26"><name pos:start="235:24" pos:end="235:26">env</name></expr></argument>, <argument pos:start="235:29" pos:end="235:31"><expr pos:start="235:29" pos:end="235:31"><name pos:start="235:29" pos:end="235:31">ctx</name></expr></argument>, <argument pos:start="235:34" pos:end="235:42"><expr pos:start="235:34" pos:end="235:42"><name pos:start="235:34" pos:end="235:42">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:31"><expr pos:start="237:13" pos:end="237:30"><call pos:start="237:13" pos:end="237:30"><name pos:start="237:13" pos:end="237:25">check_mips_64</name><argument_list pos:start="237:26" pos:end="237:30">(<argument pos:start="237:27" pos:end="237:29"><expr pos:start="237:27" pos:end="237:29"><name pos:start="237:27" pos:end="237:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:49"><expr pos:start="239:13" pos:end="239:48"><call pos:start="239:13" pos:end="239:48"><name pos:start="239:13" pos:end="239:21">gen_arith</name><argument_list pos:start="239:22" pos:end="239:48">(<argument pos:start="239:23" pos:end="239:25"><expr pos:start="239:23" pos:end="239:25"><name pos:start="239:23" pos:end="239:25">env</name></expr></argument>, <argument pos:start="239:28" pos:end="239:30"><expr pos:start="239:28" pos:end="239:30"><name pos:start="239:28" pos:end="239:30">ctx</name></expr></argument>, <argument pos:start="239:33" pos:end="239:35"><expr pos:start="239:33" pos:end="239:35"><name pos:start="239:33" pos:end="239:35">op1</name></expr></argument>, <argument pos:start="239:38" pos:end="239:39"><expr pos:start="239:38" pos:end="239:39"><name pos:start="239:38" pos:end="239:39">rd</name></expr></argument>, <argument pos:start="239:42" pos:end="239:43"><expr pos:start="239:42" pos:end="239:43"><name pos:start="239:42" pos:end="239:43">rs</name></expr></argument>, <argument pos:start="239:46" pos:end="239:47"><expr pos:start="239:46" pos:end="239:47"><name pos:start="239:46" pos:end="239:47">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="241:13" pos:end="241:18">break;</break>

        <case pos:start="243:9" pos:end="243:37">case <expr pos:start="243:14" pos:end="243:36"><name pos:start="243:14" pos:end="243:22">OPC_DMULT</name> <operator pos:start="243:24" pos:end="243:26">...</operator> <name pos:start="243:28" pos:end="243:36">OPC_DDIVU</name></expr>:</case>

            <expr_stmt pos:start="245:13" pos:end="245:44"><expr pos:start="245:13" pos:end="245:43"><call pos:start="245:13" pos:end="245:43"><name pos:start="245:13" pos:end="245:22">check_insn</name><argument_list pos:start="245:23" pos:end="245:43">(<argument pos:start="245:24" pos:end="245:26"><expr pos:start="245:24" pos:end="245:26"><name pos:start="245:24" pos:end="245:26">env</name></expr></argument>, <argument pos:start="245:29" pos:end="245:31"><expr pos:start="245:29" pos:end="245:31"><name pos:start="245:29" pos:end="245:31">ctx</name></expr></argument>, <argument pos:start="245:34" pos:end="245:42"><expr pos:start="245:34" pos:end="245:42"><name pos:start="245:34" pos:end="245:42">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:31"><expr pos:start="247:13" pos:end="247:30"><call pos:start="247:13" pos:end="247:30"><name pos:start="247:13" pos:end="247:25">check_mips_64</name><argument_list pos:start="247:26" pos:end="247:30">(<argument pos:start="247:27" pos:end="247:29"><expr pos:start="247:27" pos:end="247:29"><name pos:start="247:27" pos:end="247:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:41"><expr pos:start="249:13" pos:end="249:40"><call pos:start="249:13" pos:end="249:40"><name pos:start="249:13" pos:end="249:22">gen_muldiv</name><argument_list pos:start="249:23" pos:end="249:40">(<argument pos:start="249:24" pos:end="249:26"><expr pos:start="249:24" pos:end="249:26"><name pos:start="249:24" pos:end="249:26">ctx</name></expr></argument>, <argument pos:start="249:29" pos:end="249:31"><expr pos:start="249:29" pos:end="249:31"><name pos:start="249:29" pos:end="249:31">op1</name></expr></argument>, <argument pos:start="249:34" pos:end="249:35"><expr pos:start="249:34" pos:end="249:35"><name pos:start="249:34" pos:end="249:35">rs</name></expr></argument>, <argument pos:start="249:38" pos:end="249:39"><expr pos:start="249:38" pos:end="249:39"><name pos:start="249:38" pos:end="249:39">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="251:13" pos:end="254:0">break;</break>

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>

        <default pos:start="255:9" pos:end="255:16">default:</default>            <comment type="block" pos:start="255:29" pos:end="255:41">/* Invalid */</comment>

            <expr_stmt pos:start="257:13" pos:end="257:34"><expr pos:start="257:13" pos:end="257:33"><call pos:start="257:13" pos:end="257:33"><name pos:start="257:13" pos:end="257:22">MIPS_INVAL</name><argument_list pos:start="257:23" pos:end="257:33">(<argument pos:start="257:24" pos:end="257:32"><expr pos:start="257:24" pos:end="257:32"><literal type="string" pos:start="257:24" pos:end="257:32">"special"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:45"><expr pos:start="259:13" pos:end="259:44"><call pos:start="259:13" pos:end="259:44"><name pos:start="259:13" pos:end="259:30">generate_exception</name><argument_list pos:start="259:31" pos:end="259:44">(<argument pos:start="259:32" pos:end="259:34"><expr pos:start="259:32" pos:end="259:34"><name pos:start="259:32" pos:end="259:34">ctx</name></expr></argument>, <argument pos:start="259:37" pos:end="259:43"><expr pos:start="259:37" pos:end="259:43"><name pos:start="259:37" pos:end="259:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="261:13" pos:end="261:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="265:9" pos:end="265:14">break;</break>

    <case pos:start="267:5" pos:end="267:22">case <expr pos:start="267:10" pos:end="267:21"><name pos:start="267:10" pos:end="267:21">OPC_SPECIAL2</name></expr>:</case>

        <expr_stmt pos:start="269:9" pos:end="269:41"><expr pos:start="269:9" pos:end="269:40"><name pos:start="269:9" pos:end="269:11">op1</name> <operator pos:start="269:13" pos:end="269:13">=</operator> <call pos:start="269:15" pos:end="269:40"><name pos:start="269:15" pos:end="269:27">MASK_SPECIAL2</name><argument_list pos:start="269:28" pos:end="269:40">(<argument pos:start="269:29" pos:end="269:39"><expr pos:start="269:29" pos:end="269:39"><name pos:start="269:29" pos:end="269:39"><name pos:start="269:29" pos:end="269:31">ctx</name><operator pos:start="269:32" pos:end="269:33">-&gt;</operator><name pos:start="269:34" pos:end="269:39">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="271:9" pos:end="343:9">switch <condition pos:start="271:16" pos:end="271:20">(<expr pos:start="271:17" pos:end="271:19"><name pos:start="271:17" pos:end="271:19">op1</name></expr>)</condition> <block pos:start="271:22" pos:end="343:9">{<block_content pos:start="273:9" pos:end="341:18">

        <case pos:start="273:9" pos:end="273:36">case <expr pos:start="273:14" pos:end="273:35"><name pos:start="273:14" pos:end="273:21">OPC_MADD</name> <operator pos:start="273:23" pos:end="273:25">...</operator> <name pos:start="273:27" pos:end="273:35">OPC_MADDU</name></expr>:</case> <comment type="block" pos:start="273:38" pos:end="273:63">/* Multiply and add/sub */</comment>

        <case pos:start="275:9" pos:end="275:36">case <expr pos:start="275:14" pos:end="275:35"><name pos:start="275:14" pos:end="275:21">OPC_MSUB</name> <operator pos:start="275:23" pos:end="275:25">...</operator> <name pos:start="275:27" pos:end="275:35">OPC_MSUBU</name></expr>:</case>

            <expr_stmt pos:start="277:13" pos:end="277:45"><expr pos:start="277:13" pos:end="277:44"><call pos:start="277:13" pos:end="277:44"><name pos:start="277:13" pos:end="277:22">check_insn</name><argument_list pos:start="277:23" pos:end="277:44">(<argument pos:start="277:24" pos:end="277:26"><expr pos:start="277:24" pos:end="277:26"><name pos:start="277:24" pos:end="277:26">env</name></expr></argument>, <argument pos:start="277:29" pos:end="277:31"><expr pos:start="277:29" pos:end="277:31"><name pos:start="277:29" pos:end="277:31">ctx</name></expr></argument>, <argument pos:start="277:34" pos:end="277:43"><expr pos:start="277:34" pos:end="277:43"><name pos:start="277:34" pos:end="277:43">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:41"><expr pos:start="279:13" pos:end="279:40"><call pos:start="279:13" pos:end="279:40"><name pos:start="279:13" pos:end="279:22">gen_muldiv</name><argument_list pos:start="279:23" pos:end="279:40">(<argument pos:start="279:24" pos:end="279:26"><expr pos:start="279:24" pos:end="279:26"><name pos:start="279:24" pos:end="279:26">ctx</name></expr></argument>, <argument pos:start="279:29" pos:end="279:31"><expr pos:start="279:29" pos:end="279:31"><name pos:start="279:29" pos:end="279:31">op1</name></expr></argument>, <argument pos:start="279:34" pos:end="279:35"><expr pos:start="279:34" pos:end="279:35"><name pos:start="279:34" pos:end="279:35">rs</name></expr></argument>, <argument pos:start="279:38" pos:end="279:39"><expr pos:start="279:38" pos:end="279:39"><name pos:start="279:38" pos:end="279:39">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="281:13" pos:end="281:18">break;</break>

        <case pos:start="283:9" pos:end="283:21">case <expr pos:start="283:14" pos:end="283:20"><name pos:start="283:14" pos:end="283:20">OPC_MUL</name></expr>:</case>

            <expr_stmt pos:start="285:13" pos:end="285:49"><expr pos:start="285:13" pos:end="285:48"><call pos:start="285:13" pos:end="285:48"><name pos:start="285:13" pos:end="285:21">gen_arith</name><argument_list pos:start="285:22" pos:end="285:48">(<argument pos:start="285:23" pos:end="285:25"><expr pos:start="285:23" pos:end="285:25"><name pos:start="285:23" pos:end="285:25">env</name></expr></argument>, <argument pos:start="285:28" pos:end="285:30"><expr pos:start="285:28" pos:end="285:30"><name pos:start="285:28" pos:end="285:30">ctx</name></expr></argument>, <argument pos:start="285:33" pos:end="285:35"><expr pos:start="285:33" pos:end="285:35"><name pos:start="285:33" pos:end="285:35">op1</name></expr></argument>, <argument pos:start="285:38" pos:end="285:39"><expr pos:start="285:38" pos:end="285:39"><name pos:start="285:38" pos:end="285:39">rd</name></expr></argument>, <argument pos:start="285:42" pos:end="285:43"><expr pos:start="285:42" pos:end="285:43"><name pos:start="285:42" pos:end="285:43">rs</name></expr></argument>, <argument pos:start="285:46" pos:end="285:47"><expr pos:start="285:46" pos:end="285:47"><name pos:start="285:46" pos:end="285:47">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="287:13" pos:end="287:18">break;</break>

        <case pos:start="289:9" pos:end="289:33">case <expr pos:start="289:14" pos:end="289:32"><name pos:start="289:14" pos:end="289:20">OPC_CLZ</name> <operator pos:start="289:22" pos:end="289:24">...</operator> <name pos:start="289:26" pos:end="289:32">OPC_CLO</name></expr>:</case>

            <expr_stmt pos:start="291:13" pos:end="291:45"><expr pos:start="291:13" pos:end="291:44"><call pos:start="291:13" pos:end="291:44"><name pos:start="291:13" pos:end="291:22">check_insn</name><argument_list pos:start="291:23" pos:end="291:44">(<argument pos:start="291:24" pos:end="291:26"><expr pos:start="291:24" pos:end="291:26"><name pos:start="291:24" pos:end="291:26">env</name></expr></argument>, <argument pos:start="291:29" pos:end="291:31"><expr pos:start="291:29" pos:end="291:31"><name pos:start="291:29" pos:end="291:31">ctx</name></expr></argument>, <argument pos:start="291:34" pos:end="291:43"><expr pos:start="291:34" pos:end="291:43"><name pos:start="291:34" pos:end="291:43">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:37"><expr pos:start="293:13" pos:end="293:36"><call pos:start="293:13" pos:end="293:36"><name pos:start="293:13" pos:end="293:18">gen_cl</name><argument_list pos:start="293:19" pos:end="293:36">(<argument pos:start="293:20" pos:end="293:22"><expr pos:start="293:20" pos:end="293:22"><name pos:start="293:20" pos:end="293:22">ctx</name></expr></argument>, <argument pos:start="293:25" pos:end="293:27"><expr pos:start="293:25" pos:end="293:27"><name pos:start="293:25" pos:end="293:27">op1</name></expr></argument>, <argument pos:start="293:30" pos:end="293:31"><expr pos:start="293:30" pos:end="293:31"><name pos:start="293:30" pos:end="293:31">rd</name></expr></argument>, <argument pos:start="293:34" pos:end="293:35"><expr pos:start="293:34" pos:end="293:35"><name pos:start="293:34" pos:end="293:35">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="295:13" pos:end="295:18">break;</break>

        <case pos:start="297:9" pos:end="297:23">case <expr pos:start="297:14" pos:end="297:22"><name pos:start="297:14" pos:end="297:22">OPC_SDBBP</name></expr>:</case>

            <comment type="block" pos:start="299:13" pos:end="303:15">/* XXX: not clear which exception should be raised

             *      when in debug mode...

             */</comment>

            <expr_stmt pos:start="305:13" pos:end="305:45"><expr pos:start="305:13" pos:end="305:44"><call pos:start="305:13" pos:end="305:44"><name pos:start="305:13" pos:end="305:22">check_insn</name><argument_list pos:start="305:23" pos:end="305:44">(<argument pos:start="305:24" pos:end="305:26"><expr pos:start="305:24" pos:end="305:26"><name pos:start="305:24" pos:end="305:26">env</name></expr></argument>, <argument pos:start="305:29" pos:end="305:31"><expr pos:start="305:29" pos:end="305:31"><name pos:start="305:29" pos:end="305:31">ctx</name></expr></argument>, <argument pos:start="305:34" pos:end="305:43"><expr pos:start="305:34" pos:end="305:43"><name pos:start="305:34" pos:end="305:43">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="307:13" pos:end="315:13"><if pos:start="307:13" pos:end="311:13">if <condition pos:start="307:16" pos:end="307:47">(<expr pos:start="307:17" pos:end="307:46"><operator pos:start="307:17" pos:end="307:17">!</operator><operator pos:start="307:18" pos:end="307:18">(</operator><name pos:start="307:19" pos:end="307:29"><name pos:start="307:19" pos:end="307:21">ctx</name><operator pos:start="307:22" pos:end="307:23">-&gt;</operator><name pos:start="307:24" pos:end="307:29">hflags</name></name> <operator pos:start="307:31" pos:end="307:31">&amp;</operator> <name pos:start="307:33" pos:end="307:45">MIPS_HFLAG_DM</name><operator pos:start="307:46" pos:end="307:46">)</operator></expr>)</condition> <block pos:start="307:49" pos:end="311:13">{<block_content pos:start="309:17" pos:end="309:50">

                <expr_stmt pos:start="309:17" pos:end="309:50"><expr pos:start="309:17" pos:end="309:49"><call pos:start="309:17" pos:end="309:49"><name pos:start="309:17" pos:end="309:34">generate_exception</name><argument_list pos:start="309:35" pos:end="309:49">(<argument pos:start="309:36" pos:end="309:38"><expr pos:start="309:36" pos:end="309:38"><name pos:start="309:36" pos:end="309:38">ctx</name></expr></argument>, <argument pos:start="309:41" pos:end="309:48"><expr pos:start="309:41" pos:end="309:48"><name pos:start="309:41" pos:end="309:48">EXCP_DBp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="311:15" pos:end="315:13">else <block pos:start="311:20" pos:end="315:13">{<block_content pos:start="313:17" pos:end="313:50">

                <expr_stmt pos:start="313:17" pos:end="313:50"><expr pos:start="313:17" pos:end="313:49"><call pos:start="313:17" pos:end="313:49"><name pos:start="313:17" pos:end="313:34">generate_exception</name><argument_list pos:start="313:35" pos:end="313:49">(<argument pos:start="313:36" pos:end="313:38"><expr pos:start="313:36" pos:end="313:38"><name pos:start="313:36" pos:end="313:38">ctx</name></expr></argument>, <argument pos:start="313:41" pos:end="313:48"><expr pos:start="313:41" pos:end="313:48"><name pos:start="313:41" pos:end="313:48">EXCP_DBp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="317:13" pos:end="317:31">/* Treat as NOP. */</comment>

            <break pos:start="319:13" pos:end="322:0">break;</break>

<cpp:if pos:start="321:1" pos:end="321:53">#<cpp:directive pos:start="321:2" pos:end="321:3">if</cpp:directive> <expr pos:start="321:5" pos:end="321:53"><call pos:start="321:5" pos:end="321:27"><name pos:start="321:5" pos:end="321:11">defined</name><argument_list pos:start="321:12" pos:end="321:27">(<argument pos:start="321:13" pos:end="321:26"><expr pos:start="321:13" pos:end="321:26"><name pos:start="321:13" pos:end="321:26">TARGET_MIPSN32</name></expr></argument>)</argument_list></call> <operator pos:start="321:29" pos:end="321:30">||</operator> <call pos:start="321:32" pos:end="321:53"><name pos:start="321:32" pos:end="321:38">defined</name><argument_list pos:start="321:39" pos:end="321:53">(<argument pos:start="321:40" pos:end="321:52"><expr pos:start="321:40" pos:end="321:52"><name pos:start="321:40" pos:end="321:52">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="323:9" pos:end="323:35">case <expr pos:start="323:14" pos:end="323:34"><name pos:start="323:14" pos:end="323:21">OPC_DCLZ</name> <operator pos:start="323:23" pos:end="323:25">...</operator> <name pos:start="323:27" pos:end="323:34">OPC_DCLO</name></expr>:</case>

            <expr_stmt pos:start="325:13" pos:end="325:45"><expr pos:start="325:13" pos:end="325:44"><call pos:start="325:13" pos:end="325:44"><name pos:start="325:13" pos:end="325:22">check_insn</name><argument_list pos:start="325:23" pos:end="325:44">(<argument pos:start="325:24" pos:end="325:26"><expr pos:start="325:24" pos:end="325:26"><name pos:start="325:24" pos:end="325:26">env</name></expr></argument>, <argument pos:start="325:29" pos:end="325:31"><expr pos:start="325:29" pos:end="325:31"><name pos:start="325:29" pos:end="325:31">ctx</name></expr></argument>, <argument pos:start="325:34" pos:end="325:43"><expr pos:start="325:34" pos:end="325:43"><name pos:start="325:34" pos:end="325:43">ISA_MIPS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:31"><expr pos:start="327:13" pos:end="327:30"><call pos:start="327:13" pos:end="327:30"><name pos:start="327:13" pos:end="327:25">check_mips_64</name><argument_list pos:start="327:26" pos:end="327:30">(<argument pos:start="327:27" pos:end="327:29"><expr pos:start="327:27" pos:end="327:29"><name pos:start="327:27" pos:end="327:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:37"><expr pos:start="329:13" pos:end="329:36"><call pos:start="329:13" pos:end="329:36"><name pos:start="329:13" pos:end="329:18">gen_cl</name><argument_list pos:start="329:19" pos:end="329:36">(<argument pos:start="329:20" pos:end="329:22"><expr pos:start="329:20" pos:end="329:22"><name pos:start="329:20" pos:end="329:22">ctx</name></expr></argument>, <argument pos:start="329:25" pos:end="329:27"><expr pos:start="329:25" pos:end="329:27"><name pos:start="329:25" pos:end="329:27">op1</name></expr></argument>, <argument pos:start="329:30" pos:end="329:31"><expr pos:start="329:30" pos:end="329:31"><name pos:start="329:30" pos:end="329:31">rd</name></expr></argument>, <argument pos:start="329:34" pos:end="329:35"><expr pos:start="329:34" pos:end="329:35"><name pos:start="329:34" pos:end="329:35">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="331:13" pos:end="334:0">break;</break>

<cpp:endif pos:start="333:1" pos:end="333:6">#<cpp:directive pos:start="333:2" pos:end="333:6">endif</cpp:directive></cpp:endif>

        <default pos:start="335:9" pos:end="335:16">default:</default>            <comment type="block" pos:start="335:29" pos:end="335:41">/* Invalid */</comment>

            <expr_stmt pos:start="337:13" pos:end="337:35"><expr pos:start="337:13" pos:end="337:34"><call pos:start="337:13" pos:end="337:34"><name pos:start="337:13" pos:end="337:22">MIPS_INVAL</name><argument_list pos:start="337:23" pos:end="337:34">(<argument pos:start="337:24" pos:end="337:33"><expr pos:start="337:24" pos:end="337:33"><literal type="string" pos:start="337:24" pos:end="337:33">"special2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:45"><expr pos:start="339:13" pos:end="339:44"><call pos:start="339:13" pos:end="339:44"><name pos:start="339:13" pos:end="339:30">generate_exception</name><argument_list pos:start="339:31" pos:end="339:44">(<argument pos:start="339:32" pos:end="339:34"><expr pos:start="339:32" pos:end="339:34"><name pos:start="339:32" pos:end="339:34">ctx</name></expr></argument>, <argument pos:start="339:37" pos:end="339:43"><expr pos:start="339:37" pos:end="339:43"><name pos:start="339:37" pos:end="339:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="341:13" pos:end="341:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="345:9" pos:end="345:14">break;</break>

    <case pos:start="347:5" pos:end="347:22">case <expr pos:start="347:10" pos:end="347:21"><name pos:start="347:10" pos:end="347:21">OPC_SPECIAL3</name></expr>:</case>

         <expr_stmt pos:start="349:10" pos:end="349:42"><expr pos:start="349:10" pos:end="349:41"><name pos:start="349:10" pos:end="349:12">op1</name> <operator pos:start="349:14" pos:end="349:14">=</operator> <call pos:start="349:16" pos:end="349:41"><name pos:start="349:16" pos:end="349:28">MASK_SPECIAL3</name><argument_list pos:start="349:29" pos:end="349:41">(<argument pos:start="349:30" pos:end="349:40"><expr pos:start="349:30" pos:end="349:40"><name pos:start="349:30" pos:end="349:40"><name pos:start="349:30" pos:end="349:32">ctx</name><operator pos:start="349:33" pos:end="349:34">-&gt;</operator><name pos:start="349:35" pos:end="349:40">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <switch pos:start="351:10" pos:end="557:9">switch <condition pos:start="351:17" pos:end="351:21">(<expr pos:start="351:18" pos:end="351:20"><name pos:start="351:18" pos:end="351:20">op1</name></expr>)</condition> <block pos:start="351:23" pos:end="557:9">{<block_content pos:start="353:10" pos:end="555:18">

         <case pos:start="353:10" pos:end="353:22">case <expr pos:start="353:15" pos:end="353:21"><name pos:start="353:15" pos:end="353:21">OPC_EXT</name></expr>:</case>

         <case pos:start="355:10" pos:end="355:22">case <expr pos:start="355:15" pos:end="355:21"><name pos:start="355:15" pos:end="355:21">OPC_INS</name></expr>:</case>

             <expr_stmt pos:start="357:14" pos:end="357:48"><expr pos:start="357:14" pos:end="357:47"><call pos:start="357:14" pos:end="357:47"><name pos:start="357:14" pos:end="357:23">check_insn</name><argument_list pos:start="357:24" pos:end="357:47">(<argument pos:start="357:25" pos:end="357:27"><expr pos:start="357:25" pos:end="357:27"><name pos:start="357:25" pos:end="357:27">env</name></expr></argument>, <argument pos:start="357:30" pos:end="357:32"><expr pos:start="357:30" pos:end="357:32"><name pos:start="357:30" pos:end="357:32">ctx</name></expr></argument>, <argument pos:start="357:35" pos:end="357:46"><expr pos:start="357:35" pos:end="357:46"><name pos:start="357:35" pos:end="357:46">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <expr_stmt pos:start="359:14" pos:end="359:50"><expr pos:start="359:14" pos:end="359:49"><call pos:start="359:14" pos:end="359:49"><name pos:start="359:14" pos:end="359:23">gen_bitops</name><argument_list pos:start="359:24" pos:end="359:49">(<argument pos:start="359:25" pos:end="359:27"><expr pos:start="359:25" pos:end="359:27"><name pos:start="359:25" pos:end="359:27">ctx</name></expr></argument>, <argument pos:start="359:30" pos:end="359:32"><expr pos:start="359:30" pos:end="359:32"><name pos:start="359:30" pos:end="359:32">op1</name></expr></argument>, <argument pos:start="359:35" pos:end="359:36"><expr pos:start="359:35" pos:end="359:36"><name pos:start="359:35" pos:end="359:36">rt</name></expr></argument>, <argument pos:start="359:39" pos:end="359:40"><expr pos:start="359:39" pos:end="359:40"><name pos:start="359:39" pos:end="359:40">rs</name></expr></argument>, <argument pos:start="359:43" pos:end="359:44"><expr pos:start="359:43" pos:end="359:44"><name pos:start="359:43" pos:end="359:44">sa</name></expr></argument>, <argument pos:start="359:47" pos:end="359:48"><expr pos:start="359:47" pos:end="359:48"><name pos:start="359:47" pos:end="359:48">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <break pos:start="361:14" pos:end="361:19">break;</break>

         <case pos:start="363:10" pos:end="363:24">case <expr pos:start="363:15" pos:end="363:23"><name pos:start="363:15" pos:end="363:23">OPC_BSHFL</name></expr>:</case>

             <expr_stmt pos:start="365:14" pos:end="365:48"><expr pos:start="365:14" pos:end="365:47"><call pos:start="365:14" pos:end="365:47"><name pos:start="365:14" pos:end="365:23">check_insn</name><argument_list pos:start="365:24" pos:end="365:47">(<argument pos:start="365:25" pos:end="365:27"><expr pos:start="365:25" pos:end="365:27"><name pos:start="365:25" pos:end="365:27">env</name></expr></argument>, <argument pos:start="365:30" pos:end="365:32"><expr pos:start="365:30" pos:end="365:32"><name pos:start="365:30" pos:end="365:32">ctx</name></expr></argument>, <argument pos:start="365:35" pos:end="365:46"><expr pos:start="365:35" pos:end="365:46"><name pos:start="365:35" pos:end="365:46">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <expr_stmt pos:start="367:14" pos:end="367:43"><expr pos:start="367:14" pos:end="367:42"><name pos:start="367:14" pos:end="367:16">op2</name> <operator pos:start="367:18" pos:end="367:18">=</operator> <call pos:start="367:20" pos:end="367:42"><name pos:start="367:20" pos:end="367:29">MASK_BSHFL</name><argument_list pos:start="367:30" pos:end="367:42">(<argument pos:start="367:31" pos:end="367:41"><expr pos:start="367:31" pos:end="367:41"><name pos:start="367:31" pos:end="367:41"><name pos:start="367:31" pos:end="367:33">ctx</name><operator pos:start="367:34" pos:end="367:35">-&gt;</operator><name pos:start="367:36" pos:end="367:41">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <switch pos:start="369:14" pos:end="403:13">switch <condition pos:start="369:21" pos:end="369:25">(<expr pos:start="369:22" pos:end="369:24"><name pos:start="369:22" pos:end="369:24">op2</name></expr>)</condition> <block pos:start="369:27" pos:end="403:13">{<block_content pos:start="371:14" pos:end="401:23">

             <case pos:start="371:14" pos:end="371:27">case <expr pos:start="371:19" pos:end="371:26"><name pos:start="371:19" pos:end="371:26">OPC_WSBH</name></expr>:</case>

                 <expr_stmt pos:start="373:18" pos:end="373:41"><expr pos:start="373:18" pos:end="373:40"><call pos:start="373:18" pos:end="373:40"><name pos:start="373:18" pos:end="373:32">GEN_LOAD_REG_TN</name><argument_list pos:start="373:33" pos:end="373:40">(<argument pos:start="373:34" pos:end="373:35"><expr pos:start="373:34" pos:end="373:35"><name pos:start="373:34" pos:end="373:35">T1</name></expr></argument>, <argument pos:start="373:38" pos:end="373:39"><expr pos:start="373:38" pos:end="373:39"><name pos:start="373:38" pos:end="373:39">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 <expr_stmt pos:start="375:18" pos:end="375:31"><expr pos:start="375:18" pos:end="375:30"><call pos:start="375:18" pos:end="375:30"><name pos:start="375:18" pos:end="375:28">gen_op_wsbh</name><argument_list pos:start="375:29" pos:end="375:30">()</argument_list></call></expr>;</expr_stmt>

                 <break pos:start="377:18" pos:end="377:23">break;</break>

             <case pos:start="379:14" pos:end="379:26">case <expr pos:start="379:19" pos:end="379:25"><name pos:start="379:19" pos:end="379:25">OPC_SEB</name></expr>:</case>

                 <expr_stmt pos:start="381:18" pos:end="381:41"><expr pos:start="381:18" pos:end="381:40"><call pos:start="381:18" pos:end="381:40"><name pos:start="381:18" pos:end="381:32">GEN_LOAD_REG_TN</name><argument_list pos:start="381:33" pos:end="381:40">(<argument pos:start="381:34" pos:end="381:35"><expr pos:start="381:34" pos:end="381:35"><name pos:start="381:34" pos:end="381:35">T1</name></expr></argument>, <argument pos:start="381:38" pos:end="381:39"><expr pos:start="381:38" pos:end="381:39"><name pos:start="381:38" pos:end="381:39">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 <expr_stmt pos:start="383:18" pos:end="383:30"><expr pos:start="383:18" pos:end="383:29"><call pos:start="383:18" pos:end="383:29"><name pos:start="383:18" pos:end="383:27">gen_op_seb</name><argument_list pos:start="383:28" pos:end="383:29">()</argument_list></call></expr>;</expr_stmt>

                 <break pos:start="385:18" pos:end="385:23">break;</break>

             <case pos:start="387:14" pos:end="387:26">case <expr pos:start="387:19" pos:end="387:25"><name pos:start="387:19" pos:end="387:25">OPC_SEH</name></expr>:</case>

                 <expr_stmt pos:start="389:18" pos:end="389:41"><expr pos:start="389:18" pos:end="389:40"><call pos:start="389:18" pos:end="389:40"><name pos:start="389:18" pos:end="389:32">GEN_LOAD_REG_TN</name><argument_list pos:start="389:33" pos:end="389:40">(<argument pos:start="389:34" pos:end="389:35"><expr pos:start="389:34" pos:end="389:35"><name pos:start="389:34" pos:end="389:35">T1</name></expr></argument>, <argument pos:start="389:38" pos:end="389:39"><expr pos:start="389:38" pos:end="389:39"><name pos:start="389:38" pos:end="389:39">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 <expr_stmt pos:start="391:18" pos:end="391:30"><expr pos:start="391:18" pos:end="391:29"><call pos:start="391:18" pos:end="391:29"><name pos:start="391:18" pos:end="391:27">gen_op_seh</name><argument_list pos:start="391:28" pos:end="391:29">()</argument_list></call></expr>;</expr_stmt>

                 <break pos:start="393:18" pos:end="393:23">break;</break>

             <default pos:start="395:14" pos:end="395:21">default:</default>            <comment type="block" pos:start="395:34" pos:end="395:46">/* Invalid */</comment>

                 <expr_stmt pos:start="397:18" pos:end="397:37"><expr pos:start="397:18" pos:end="397:36"><call pos:start="397:18" pos:end="397:36"><name pos:start="397:18" pos:end="397:27">MIPS_INVAL</name><argument_list pos:start="397:28" pos:end="397:36">(<argument pos:start="397:29" pos:end="397:35"><expr pos:start="397:29" pos:end="397:35"><literal type="string" pos:start="397:29" pos:end="397:35">"bshfl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 <expr_stmt pos:start="399:18" pos:end="399:50"><expr pos:start="399:18" pos:end="399:49"><call pos:start="399:18" pos:end="399:49"><name pos:start="399:18" pos:end="399:35">generate_exception</name><argument_list pos:start="399:36" pos:end="399:49">(<argument pos:start="399:37" pos:end="399:39"><expr pos:start="399:37" pos:end="399:39"><name pos:start="399:37" pos:end="399:39">ctx</name></expr></argument>, <argument pos:start="399:42" pos:end="399:48"><expr pos:start="399:42" pos:end="399:48"><name pos:start="399:42" pos:end="399:48">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 <break pos:start="401:18" pos:end="401:23">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="405:13" pos:end="405:37"><expr pos:start="405:13" pos:end="405:36"><call pos:start="405:13" pos:end="405:36"><name pos:start="405:13" pos:end="405:28">GEN_STORE_TN_REG</name><argument_list pos:start="405:29" pos:end="405:36">(<argument pos:start="405:30" pos:end="405:31"><expr pos:start="405:30" pos:end="405:31"><name pos:start="405:30" pos:end="405:31">rd</name></expr></argument>, <argument pos:start="405:34" pos:end="405:35"><expr pos:start="405:34" pos:end="405:35"><name pos:start="405:34" pos:end="405:35">T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="407:13" pos:end="407:18">break;</break>

        <case pos:start="409:9" pos:end="409:23">case <expr pos:start="409:14" pos:end="409:22"><name pos:start="409:14" pos:end="409:22">OPC_RDHWR</name></expr>:</case>

            <expr_stmt pos:start="411:13" pos:end="411:47"><expr pos:start="411:13" pos:end="411:46"><call pos:start="411:13" pos:end="411:46"><name pos:start="411:13" pos:end="411:22">check_insn</name><argument_list pos:start="411:23" pos:end="411:46">(<argument pos:start="411:24" pos:end="411:26"><expr pos:start="411:24" pos:end="411:26"><name pos:start="411:24" pos:end="411:26">env</name></expr></argument>, <argument pos:start="411:29" pos:end="411:31"><expr pos:start="411:29" pos:end="411:31"><name pos:start="411:29" pos:end="411:31">ctx</name></expr></argument>, <argument pos:start="411:34" pos:end="411:45"><expr pos:start="411:34" pos:end="411:45"><name pos:start="411:34" pos:end="411:45">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="413:13" pos:end="465:13">switch <condition pos:start="413:20" pos:end="413:23">(<expr pos:start="413:21" pos:end="413:22"><name pos:start="413:21" pos:end="413:22">rd</name></expr>)</condition> <block pos:start="413:25" pos:end="465:13">{<block_content pos:start="415:13" pos:end="463:22">

            <case pos:start="415:13" pos:end="415:19">case <expr pos:start="415:18" pos:end="415:18"><literal type="number" pos:start="415:18" pos:end="415:18">0</literal></expr>:</case>

                <expr_stmt pos:start="417:17" pos:end="417:39"><expr pos:start="417:17" pos:end="417:38"><call pos:start="417:17" pos:end="417:38"><name pos:start="417:17" pos:end="417:30">save_cpu_state</name><argument_list pos:start="417:31" pos:end="417:38">(<argument pos:start="417:32" pos:end="417:34"><expr pos:start="417:32" pos:end="417:34"><name pos:start="417:32" pos:end="417:34">ctx</name></expr></argument>, <argument pos:start="417:37" pos:end="417:37"><expr pos:start="417:37" pos:end="417:37"><literal type="number" pos:start="417:37" pos:end="417:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="419:17" pos:end="419:38"><expr pos:start="419:17" pos:end="419:37"><call pos:start="419:17" pos:end="419:37"><name pos:start="419:17" pos:end="419:35">gen_op_rdhwr_cpunum</name><argument_list pos:start="419:36" pos:end="419:37">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="421:17" pos:end="421:22">break;</break>

            <case pos:start="423:13" pos:end="423:19">case <expr pos:start="423:18" pos:end="423:18"><literal type="number" pos:start="423:18" pos:end="423:18">1</literal></expr>:</case>

                <expr_stmt pos:start="425:17" pos:end="425:39"><expr pos:start="425:17" pos:end="425:38"><call pos:start="425:17" pos:end="425:38"><name pos:start="425:17" pos:end="425:30">save_cpu_state</name><argument_list pos:start="425:31" pos:end="425:38">(<argument pos:start="425:32" pos:end="425:34"><expr pos:start="425:32" pos:end="425:34"><name pos:start="425:32" pos:end="425:34">ctx</name></expr></argument>, <argument pos:start="425:37" pos:end="425:37"><expr pos:start="425:37" pos:end="425:37"><literal type="number" pos:start="425:37" pos:end="425:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="427:17" pos:end="427:42"><expr pos:start="427:17" pos:end="427:41"><call pos:start="427:17" pos:end="427:41"><name pos:start="427:17" pos:end="427:39">gen_op_rdhwr_synci_step</name><argument_list pos:start="427:40" pos:end="427:41">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="429:17" pos:end="429:22">break;</break>

            <case pos:start="431:13" pos:end="431:19">case <expr pos:start="431:18" pos:end="431:18"><literal type="number" pos:start="431:18" pos:end="431:18">2</literal></expr>:</case>

                <expr_stmt pos:start="433:17" pos:end="433:39"><expr pos:start="433:17" pos:end="433:38"><call pos:start="433:17" pos:end="433:38"><name pos:start="433:17" pos:end="433:30">save_cpu_state</name><argument_list pos:start="433:31" pos:end="433:38">(<argument pos:start="433:32" pos:end="433:34"><expr pos:start="433:32" pos:end="433:34"><name pos:start="433:32" pos:end="433:34">ctx</name></expr></argument>, <argument pos:start="433:37" pos:end="433:37"><expr pos:start="433:37" pos:end="433:37"><literal type="number" pos:start="433:37" pos:end="433:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="435:17" pos:end="435:34"><expr pos:start="435:17" pos:end="435:33"><call pos:start="435:17" pos:end="435:33"><name pos:start="435:17" pos:end="435:31">gen_op_rdhwr_cc</name><argument_list pos:start="435:32" pos:end="435:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="437:17" pos:end="437:22">break;</break>

            <case pos:start="439:13" pos:end="439:19">case <expr pos:start="439:18" pos:end="439:18"><literal type="number" pos:start="439:18" pos:end="439:18">3</literal></expr>:</case>

                <expr_stmt pos:start="441:17" pos:end="441:39"><expr pos:start="441:17" pos:end="441:38"><call pos:start="441:17" pos:end="441:38"><name pos:start="441:17" pos:end="441:30">save_cpu_state</name><argument_list pos:start="441:31" pos:end="441:38">(<argument pos:start="441:32" pos:end="441:34"><expr pos:start="441:32" pos:end="441:34"><name pos:start="441:32" pos:end="441:34">ctx</name></expr></argument>, <argument pos:start="441:37" pos:end="441:37"><expr pos:start="441:37" pos:end="441:37"><literal type="number" pos:start="441:37" pos:end="441:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:37"><expr pos:start="443:17" pos:end="443:36"><call pos:start="443:17" pos:end="443:36"><name pos:start="443:17" pos:end="443:34">gen_op_rdhwr_ccres</name><argument_list pos:start="443:35" pos:end="443:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="445:17" pos:end="445:22">break;</break>

            <case pos:start="447:13" pos:end="450:0">case <expr pos:start="447:18" pos:end="447:19"><literal type="number" pos:start="447:18" pos:end="447:19">29</literal></expr>:</case>

<cpp:if pos:start="449:1" pos:end="449:30">#<cpp:directive pos:start="449:2" pos:end="449:3">if</cpp:directive> <expr pos:start="449:5" pos:end="449:30"><call pos:start="449:5" pos:end="449:30"><name pos:start="449:5" pos:end="449:11">defined</name> <argument_list pos:start="449:13" pos:end="449:30">(<argument pos:start="449:14" pos:end="449:29"><expr pos:start="449:14" pos:end="449:29"><name pos:start="449:14" pos:end="449:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <expr_stmt pos:start="451:17" pos:end="451:35"><expr pos:start="451:17" pos:end="451:34"><call pos:start="451:17" pos:end="451:34"><name pos:start="451:17" pos:end="451:32">gen_op_tls_value</name><argument_list pos:start="451:33" pos:end="451:34">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="453:17" pos:end="456:0">break;</break>

<cpp:endif pos:start="455:1" pos:end="455:6">#<cpp:directive pos:start="455:2" pos:end="455:6">endif</cpp:directive></cpp:endif>

            <default pos:start="457:13" pos:end="457:20">default:</default>            <comment type="block" pos:start="457:33" pos:end="457:45">/* Invalid */</comment>

                <expr_stmt pos:start="459:17" pos:end="459:36"><expr pos:start="459:17" pos:end="459:35"><call pos:start="459:17" pos:end="459:35"><name pos:start="459:17" pos:end="459:26">MIPS_INVAL</name><argument_list pos:start="459:27" pos:end="459:35">(<argument pos:start="459:28" pos:end="459:34"><expr pos:start="459:28" pos:end="459:34"><literal type="string" pos:start="459:28" pos:end="459:34">"rdhwr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="461:17" pos:end="461:49"><expr pos:start="461:17" pos:end="461:48"><call pos:start="461:17" pos:end="461:48"><name pos:start="461:17" pos:end="461:34">generate_exception</name><argument_list pos:start="461:35" pos:end="461:48">(<argument pos:start="461:36" pos:end="461:38"><expr pos:start="461:36" pos:end="461:38"><name pos:start="461:36" pos:end="461:38">ctx</name></expr></argument>, <argument pos:start="461:41" pos:end="461:47"><expr pos:start="461:41" pos:end="461:47"><name pos:start="461:41" pos:end="461:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="463:17" pos:end="463:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="467:13" pos:end="467:37"><expr pos:start="467:13" pos:end="467:36"><call pos:start="467:13" pos:end="467:36"><name pos:start="467:13" pos:end="467:28">GEN_STORE_TN_REG</name><argument_list pos:start="467:29" pos:end="467:36">(<argument pos:start="467:30" pos:end="467:31"><expr pos:start="467:30" pos:end="467:31"><name pos:start="467:30" pos:end="467:31">rt</name></expr></argument>, <argument pos:start="467:34" pos:end="467:35"><expr pos:start="467:34" pos:end="467:35"><name pos:start="467:34" pos:end="467:35">T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="469:13" pos:end="469:18">break;</break>

        <case pos:start="471:9" pos:end="471:22">case <expr pos:start="471:14" pos:end="471:21"><name pos:start="471:14" pos:end="471:21">OPC_FORK</name></expr>:</case>

            <expr_stmt pos:start="473:13" pos:end="473:36"><expr pos:start="473:13" pos:end="473:35"><call pos:start="473:13" pos:end="473:35"><name pos:start="473:13" pos:end="473:25">check_mips_mt</name><argument_list pos:start="473:26" pos:end="473:35">(<argument pos:start="473:27" pos:end="473:29"><expr pos:start="473:27" pos:end="473:29"><name pos:start="473:27" pos:end="473:29">env</name></expr></argument>, <argument pos:start="473:32" pos:end="473:34"><expr pos:start="473:32" pos:end="473:34"><name pos:start="473:32" pos:end="473:34">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="475:13" pos:end="475:36"><expr pos:start="475:13" pos:end="475:35"><call pos:start="475:13" pos:end="475:35"><name pos:start="475:13" pos:end="475:27">GEN_LOAD_REG_TN</name><argument_list pos:start="475:28" pos:end="475:35">(<argument pos:start="475:29" pos:end="475:30"><expr pos:start="475:29" pos:end="475:30"><name pos:start="475:29" pos:end="475:30">T0</name></expr></argument>, <argument pos:start="475:33" pos:end="475:34"><expr pos:start="475:33" pos:end="475:34"><name pos:start="475:33" pos:end="475:34">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="477:13" pos:end="477:36"><expr pos:start="477:13" pos:end="477:35"><call pos:start="477:13" pos:end="477:35"><name pos:start="477:13" pos:end="477:27">GEN_LOAD_REG_TN</name><argument_list pos:start="477:28" pos:end="477:35">(<argument pos:start="477:29" pos:end="477:30"><expr pos:start="477:29" pos:end="477:30"><name pos:start="477:29" pos:end="477:30">T1</name></expr></argument>, <argument pos:start="477:33" pos:end="477:34"><expr pos:start="477:33" pos:end="477:34"><name pos:start="477:33" pos:end="477:34">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="479:13" pos:end="479:26"><expr pos:start="479:13" pos:end="479:25"><call pos:start="479:13" pos:end="479:25"><name pos:start="479:13" pos:end="479:23">gen_op_fork</name><argument_list pos:start="479:24" pos:end="479:25">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="481:13" pos:end="481:18">break;</break>

        <case pos:start="483:9" pos:end="483:23">case <expr pos:start="483:14" pos:end="483:22"><name pos:start="483:14" pos:end="483:22">OPC_YIELD</name></expr>:</case>

            <expr_stmt pos:start="485:13" pos:end="485:36"><expr pos:start="485:13" pos:end="485:35"><call pos:start="485:13" pos:end="485:35"><name pos:start="485:13" pos:end="485:25">check_mips_mt</name><argument_list pos:start="485:26" pos:end="485:35">(<argument pos:start="485:27" pos:end="485:29"><expr pos:start="485:27" pos:end="485:29"><name pos:start="485:27" pos:end="485:29">env</name></expr></argument>, <argument pos:start="485:32" pos:end="485:34"><expr pos:start="485:32" pos:end="485:34"><name pos:start="485:32" pos:end="485:34">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:36"><expr pos:start="487:13" pos:end="487:35"><call pos:start="487:13" pos:end="487:35"><name pos:start="487:13" pos:end="487:27">GEN_LOAD_REG_TN</name><argument_list pos:start="487:28" pos:end="487:35">(<argument pos:start="487:29" pos:end="487:30"><expr pos:start="487:29" pos:end="487:30"><name pos:start="487:29" pos:end="487:30">T0</name></expr></argument>, <argument pos:start="487:33" pos:end="487:34"><expr pos:start="487:33" pos:end="487:34"><name pos:start="487:33" pos:end="487:34">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:27"><expr pos:start="489:13" pos:end="489:26"><call pos:start="489:13" pos:end="489:26"><name pos:start="489:13" pos:end="489:24">gen_op_yield</name><argument_list pos:start="489:25" pos:end="489:26">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="491:13" pos:end="491:37"><expr pos:start="491:13" pos:end="491:36"><call pos:start="491:13" pos:end="491:36"><name pos:start="491:13" pos:end="491:28">GEN_STORE_TN_REG</name><argument_list pos:start="491:29" pos:end="491:36">(<argument pos:start="491:30" pos:end="491:31"><expr pos:start="491:30" pos:end="491:31"><name pos:start="491:30" pos:end="491:31">rd</name></expr></argument>, <argument pos:start="491:34" pos:end="491:35"><expr pos:start="491:34" pos:end="491:35"><name pos:start="491:34" pos:end="491:35">T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="493:13" pos:end="496:0">break;</break>

<cpp:if pos:start="495:1" pos:end="495:53">#<cpp:directive pos:start="495:2" pos:end="495:3">if</cpp:directive> <expr pos:start="495:5" pos:end="495:53"><call pos:start="495:5" pos:end="495:27"><name pos:start="495:5" pos:end="495:11">defined</name><argument_list pos:start="495:12" pos:end="495:27">(<argument pos:start="495:13" pos:end="495:26"><expr pos:start="495:13" pos:end="495:26"><name pos:start="495:13" pos:end="495:26">TARGET_MIPSN32</name></expr></argument>)</argument_list></call> <operator pos:start="495:29" pos:end="495:30">||</operator> <call pos:start="495:32" pos:end="495:53"><name pos:start="495:32" pos:end="495:38">defined</name><argument_list pos:start="495:39" pos:end="495:53">(<argument pos:start="495:40" pos:end="495:52"><expr pos:start="495:40" pos:end="495:52"><name pos:start="495:40" pos:end="495:52">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="497:9" pos:end="497:36">case <expr pos:start="497:14" pos:end="497:35"><name pos:start="497:14" pos:end="497:22">OPC_DEXTM</name> <operator pos:start="497:24" pos:end="497:26">...</operator> <name pos:start="497:28" pos:end="497:35">OPC_DEXT</name></expr>:</case>

        <case pos:start="499:9" pos:end="499:36">case <expr pos:start="499:14" pos:end="499:35"><name pos:start="499:14" pos:end="499:22">OPC_DINSM</name> <operator pos:start="499:24" pos:end="499:26">...</operator> <name pos:start="499:28" pos:end="499:35">OPC_DINS</name></expr>:</case>

            <expr_stmt pos:start="501:13" pos:end="501:47"><expr pos:start="501:13" pos:end="501:46"><call pos:start="501:13" pos:end="501:46"><name pos:start="501:13" pos:end="501:22">check_insn</name><argument_list pos:start="501:23" pos:end="501:46">(<argument pos:start="501:24" pos:end="501:26"><expr pos:start="501:24" pos:end="501:26"><name pos:start="501:24" pos:end="501:26">env</name></expr></argument>, <argument pos:start="501:29" pos:end="501:31"><expr pos:start="501:29" pos:end="501:31"><name pos:start="501:29" pos:end="501:31">ctx</name></expr></argument>, <argument pos:start="501:34" pos:end="501:45"><expr pos:start="501:34" pos:end="501:45"><name pos:start="501:34" pos:end="501:45">ISA_MIPS64R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:31"><expr pos:start="503:13" pos:end="503:30"><call pos:start="503:13" pos:end="503:30"><name pos:start="503:13" pos:end="503:25">check_mips_64</name><argument_list pos:start="503:26" pos:end="503:30">(<argument pos:start="503:27" pos:end="503:29"><expr pos:start="503:27" pos:end="503:29"><name pos:start="503:27" pos:end="503:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="505:13" pos:end="505:49"><expr pos:start="505:13" pos:end="505:48"><call pos:start="505:13" pos:end="505:48"><name pos:start="505:13" pos:end="505:22">gen_bitops</name><argument_list pos:start="505:23" pos:end="505:48">(<argument pos:start="505:24" pos:end="505:26"><expr pos:start="505:24" pos:end="505:26"><name pos:start="505:24" pos:end="505:26">ctx</name></expr></argument>, <argument pos:start="505:29" pos:end="505:31"><expr pos:start="505:29" pos:end="505:31"><name pos:start="505:29" pos:end="505:31">op1</name></expr></argument>, <argument pos:start="505:34" pos:end="505:35"><expr pos:start="505:34" pos:end="505:35"><name pos:start="505:34" pos:end="505:35">rt</name></expr></argument>, <argument pos:start="505:38" pos:end="505:39"><expr pos:start="505:38" pos:end="505:39"><name pos:start="505:38" pos:end="505:39">rs</name></expr></argument>, <argument pos:start="505:42" pos:end="505:43"><expr pos:start="505:42" pos:end="505:43"><name pos:start="505:42" pos:end="505:43">sa</name></expr></argument>, <argument pos:start="505:46" pos:end="505:47"><expr pos:start="505:46" pos:end="505:47"><name pos:start="505:46" pos:end="505:47">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="507:13" pos:end="507:18">break;</break>

        <case pos:start="509:9" pos:end="509:24">case <expr pos:start="509:14" pos:end="509:23"><name pos:start="509:14" pos:end="509:23">OPC_DBSHFL</name></expr>:</case>

            <expr_stmt pos:start="511:13" pos:end="511:47"><expr pos:start="511:13" pos:end="511:46"><call pos:start="511:13" pos:end="511:46"><name pos:start="511:13" pos:end="511:22">check_insn</name><argument_list pos:start="511:23" pos:end="511:46">(<argument pos:start="511:24" pos:end="511:26"><expr pos:start="511:24" pos:end="511:26"><name pos:start="511:24" pos:end="511:26">env</name></expr></argument>, <argument pos:start="511:29" pos:end="511:31"><expr pos:start="511:29" pos:end="511:31"><name pos:start="511:29" pos:end="511:31">ctx</name></expr></argument>, <argument pos:start="511:34" pos:end="511:45"><expr pos:start="511:34" pos:end="511:45"><name pos:start="511:34" pos:end="511:45">ISA_MIPS64R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="513:13" pos:end="513:31"><expr pos:start="513:13" pos:end="513:30"><call pos:start="513:13" pos:end="513:30"><name pos:start="513:13" pos:end="513:25">check_mips_64</name><argument_list pos:start="513:26" pos:end="513:30">(<argument pos:start="513:27" pos:end="513:29"><expr pos:start="513:27" pos:end="513:29"><name pos:start="513:27" pos:end="513:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="515:13" pos:end="515:43"><expr pos:start="515:13" pos:end="515:42"><name pos:start="515:13" pos:end="515:15">op2</name> <operator pos:start="515:17" pos:end="515:17">=</operator> <call pos:start="515:19" pos:end="515:42"><name pos:start="515:19" pos:end="515:29">MASK_DBSHFL</name><argument_list pos:start="515:30" pos:end="515:42">(<argument pos:start="515:31" pos:end="515:41"><expr pos:start="515:31" pos:end="515:41"><name pos:start="515:31" pos:end="515:41"><name pos:start="515:31" pos:end="515:33">ctx</name><operator pos:start="515:34" pos:end="515:35">-&gt;</operator><name pos:start="515:36" pos:end="515:41">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="517:13" pos:end="543:13">switch <condition pos:start="517:20" pos:end="517:24">(<expr pos:start="517:21" pos:end="517:23"><name pos:start="517:21" pos:end="517:23">op2</name></expr>)</condition> <block pos:start="517:26" pos:end="543:13">{<block_content pos:start="519:13" pos:end="541:22">

            <case pos:start="519:13" pos:end="519:26">case <expr pos:start="519:18" pos:end="519:25"><name pos:start="519:18" pos:end="519:25">OPC_DSBH</name></expr>:</case>

                <expr_stmt pos:start="521:17" pos:end="521:40"><expr pos:start="521:17" pos:end="521:39"><call pos:start="521:17" pos:end="521:39"><name pos:start="521:17" pos:end="521:31">GEN_LOAD_REG_TN</name><argument_list pos:start="521:32" pos:end="521:39">(<argument pos:start="521:33" pos:end="521:34"><expr pos:start="521:33" pos:end="521:34"><name pos:start="521:33" pos:end="521:34">T1</name></expr></argument>, <argument pos:start="521:37" pos:end="521:38"><expr pos:start="521:37" pos:end="521:38"><name pos:start="521:37" pos:end="521:38">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="523:30"><expr pos:start="523:17" pos:end="523:29"><call pos:start="523:17" pos:end="523:29"><name pos:start="523:17" pos:end="523:27">gen_op_dsbh</name><argument_list pos:start="523:28" pos:end="523:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="525:17" pos:end="525:22">break;</break>

            <case pos:start="527:13" pos:end="527:26">case <expr pos:start="527:18" pos:end="527:25"><name pos:start="527:18" pos:end="527:25">OPC_DSHD</name></expr>:</case>

                <expr_stmt pos:start="529:17" pos:end="529:40"><expr pos:start="529:17" pos:end="529:39"><call pos:start="529:17" pos:end="529:39"><name pos:start="529:17" pos:end="529:31">GEN_LOAD_REG_TN</name><argument_list pos:start="529:32" pos:end="529:39">(<argument pos:start="529:33" pos:end="529:34"><expr pos:start="529:33" pos:end="529:34"><name pos:start="529:33" pos:end="529:34">T1</name></expr></argument>, <argument pos:start="529:37" pos:end="529:38"><expr pos:start="529:37" pos:end="529:38"><name pos:start="529:37" pos:end="529:38">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="531:17" pos:end="531:30"><expr pos:start="531:17" pos:end="531:29"><call pos:start="531:17" pos:end="531:29"><name pos:start="531:17" pos:end="531:27">gen_op_dshd</name><argument_list pos:start="531:28" pos:end="531:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="533:17" pos:end="533:22">break;</break>

            <default pos:start="535:13" pos:end="535:20">default:</default>            <comment type="block" pos:start="535:33" pos:end="535:45">/* Invalid */</comment>

                <expr_stmt pos:start="537:17" pos:end="537:37"><expr pos:start="537:17" pos:end="537:36"><call pos:start="537:17" pos:end="537:36"><name pos:start="537:17" pos:end="537:26">MIPS_INVAL</name><argument_list pos:start="537:27" pos:end="537:36">(<argument pos:start="537:28" pos:end="537:35"><expr pos:start="537:28" pos:end="537:35"><literal type="string" pos:start="537:28" pos:end="537:35">"dbshfl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="539:17" pos:end="539:49"><expr pos:start="539:17" pos:end="539:48"><call pos:start="539:17" pos:end="539:48"><name pos:start="539:17" pos:end="539:34">generate_exception</name><argument_list pos:start="539:35" pos:end="539:48">(<argument pos:start="539:36" pos:end="539:38"><expr pos:start="539:36" pos:end="539:38"><name pos:start="539:36" pos:end="539:38">ctx</name></expr></argument>, <argument pos:start="539:41" pos:end="539:47"><expr pos:start="539:41" pos:end="539:47"><name pos:start="539:41" pos:end="539:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="541:17" pos:end="541:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="545:13" pos:end="548:0"><expr pos:start="545:13" pos:end="545:36"><call pos:start="545:13" pos:end="545:36"><name pos:start="545:13" pos:end="545:28">GEN_STORE_TN_REG</name><argument_list pos:start="545:29" pos:end="545:36">(<argument pos:start="545:30" pos:end="545:31"><expr pos:start="545:30" pos:end="545:31"><name pos:start="545:30" pos:end="545:31">rd</name></expr></argument>, <argument pos:start="545:34" pos:end="545:35"><expr pos:start="545:34" pos:end="545:35"><name pos:start="545:34" pos:end="545:35">T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="547:1" pos:end="547:6">#<cpp:directive pos:start="547:2" pos:end="547:6">endif</cpp:directive></cpp:endif>

        <default pos:start="549:9" pos:end="549:16">default:</default>            <comment type="block" pos:start="549:29" pos:end="549:41">/* Invalid */</comment>

            <expr_stmt pos:start="551:13" pos:end="551:35"><expr pos:start="551:13" pos:end="551:34"><call pos:start="551:13" pos:end="551:34"><name pos:start="551:13" pos:end="551:22">MIPS_INVAL</name><argument_list pos:start="551:23" pos:end="551:34">(<argument pos:start="551:24" pos:end="551:33"><expr pos:start="551:24" pos:end="551:33"><literal type="string" pos:start="551:24" pos:end="551:33">"special3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="553:13" pos:end="553:45"><expr pos:start="553:13" pos:end="553:44"><call pos:start="553:13" pos:end="553:44"><name pos:start="553:13" pos:end="553:30">generate_exception</name><argument_list pos:start="553:31" pos:end="553:44">(<argument pos:start="553:32" pos:end="553:34"><expr pos:start="553:32" pos:end="553:34"><name pos:start="553:32" pos:end="553:34">ctx</name></expr></argument>, <argument pos:start="553:37" pos:end="553:43"><expr pos:start="553:37" pos:end="553:43"><name pos:start="553:37" pos:end="553:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="555:13" pos:end="555:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="559:9" pos:end="559:14">break;</break>

    <case pos:start="561:5" pos:end="561:20">case <expr pos:start="561:10" pos:end="561:19"><name pos:start="561:10" pos:end="561:19">OPC_REGIMM</name></expr>:</case>

        <expr_stmt pos:start="563:9" pos:end="563:39"><expr pos:start="563:9" pos:end="563:38"><name pos:start="563:9" pos:end="563:11">op1</name> <operator pos:start="563:13" pos:end="563:13">=</operator> <call pos:start="563:15" pos:end="563:38"><name pos:start="563:15" pos:end="563:25">MASK_REGIMM</name><argument_list pos:start="563:26" pos:end="563:38">(<argument pos:start="563:27" pos:end="563:37"><expr pos:start="563:27" pos:end="563:37"><name pos:start="563:27" pos:end="563:37"><name pos:start="563:27" pos:end="563:29">ctx</name><operator pos:start="563:30" pos:end="563:31">-&gt;</operator><name pos:start="563:32" pos:end="563:37">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="565:9" pos:end="599:9">switch <condition pos:start="565:16" pos:end="565:20">(<expr pos:start="565:17" pos:end="565:19"><name pos:start="565:17" pos:end="565:19">op1</name></expr>)</condition> <block pos:start="565:22" pos:end="599:9">{<block_content pos:start="567:9" pos:end="597:18">

        <case pos:start="567:9" pos:end="567:36">case <expr pos:start="567:14" pos:end="567:35"><name pos:start="567:14" pos:end="567:21">OPC_BLTZ</name> <operator pos:start="567:23" pos:end="567:25">...</operator> <name pos:start="567:27" pos:end="567:35">OPC_BGEZL</name></expr>:</case> <comment type="block" pos:start="567:38" pos:end="567:58">/* REGIMM branches */</comment>

        <case pos:start="569:9" pos:end="569:40">case <expr pos:start="569:14" pos:end="569:39"><name pos:start="569:14" pos:end="569:23">OPC_BLTZAL</name> <operator pos:start="569:25" pos:end="569:27">...</operator> <name pos:start="569:29" pos:end="569:39">OPC_BGEZALL</name></expr>:</case>

            <expr_stmt pos:start="571:13" pos:end="571:59"><expr pos:start="571:13" pos:end="571:58"><call pos:start="571:13" pos:end="571:58"><name pos:start="571:13" pos:end="571:30">gen_compute_branch</name><argument_list pos:start="571:31" pos:end="571:58">(<argument pos:start="571:32" pos:end="571:34"><expr pos:start="571:32" pos:end="571:34"><name pos:start="571:32" pos:end="571:34">ctx</name></expr></argument>, <argument pos:start="571:37" pos:end="571:39"><expr pos:start="571:37" pos:end="571:39"><name pos:start="571:37" pos:end="571:39">op1</name></expr></argument>, <argument pos:start="571:42" pos:end="571:43"><expr pos:start="571:42" pos:end="571:43"><name pos:start="571:42" pos:end="571:43">rs</name></expr></argument>, <argument pos:start="571:46" pos:end="571:47"><expr pos:start="571:46" pos:end="571:47"><operator pos:start="571:46" pos:end="571:46">-</operator><literal type="number" pos:start="571:47" pos:end="571:47">1</literal></expr></argument>, <argument pos:start="571:50" pos:end="571:57"><expr pos:start="571:50" pos:end="571:57"><name pos:start="571:50" pos:end="571:52">imm</name> <operator pos:start="571:54" pos:end="571:55">&lt;&lt;</operator> <literal type="number" pos:start="571:57" pos:end="571:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="573:13" pos:end="573:19">return;</return>

        <case pos:start="575:9" pos:end="575:35">case <expr pos:start="575:14" pos:end="575:34"><name pos:start="575:14" pos:end="575:21">OPC_TGEI</name> <operator pos:start="575:23" pos:end="575:25">...</operator> <name pos:start="575:27" pos:end="575:34">OPC_TEQI</name></expr>:</case> <comment type="block" pos:start="575:37" pos:end="575:54">/* REGIMM traps */</comment>

        <case pos:start="577:9" pos:end="577:22">case <expr pos:start="577:14" pos:end="577:21"><name pos:start="577:14" pos:end="577:21">OPC_TNEI</name></expr>:</case>

            <expr_stmt pos:start="579:13" pos:end="579:44"><expr pos:start="579:13" pos:end="579:43"><call pos:start="579:13" pos:end="579:43"><name pos:start="579:13" pos:end="579:20">gen_trap</name><argument_list pos:start="579:21" pos:end="579:43">(<argument pos:start="579:22" pos:end="579:24"><expr pos:start="579:22" pos:end="579:24"><name pos:start="579:22" pos:end="579:24">ctx</name></expr></argument>, <argument pos:start="579:27" pos:end="579:29"><expr pos:start="579:27" pos:end="579:29"><name pos:start="579:27" pos:end="579:29">op1</name></expr></argument>, <argument pos:start="579:32" pos:end="579:33"><expr pos:start="579:32" pos:end="579:33"><name pos:start="579:32" pos:end="579:33">rs</name></expr></argument>, <argument pos:start="579:36" pos:end="579:37"><expr pos:start="579:36" pos:end="579:37"><operator pos:start="579:36" pos:end="579:36">-</operator><literal type="number" pos:start="579:37" pos:end="579:37">1</literal></expr></argument>, <argument pos:start="579:40" pos:end="579:42"><expr pos:start="579:40" pos:end="579:42"><name pos:start="579:40" pos:end="579:42">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="581:13" pos:end="581:18">break;</break>

        <case pos:start="583:9" pos:end="583:23">case <expr pos:start="583:14" pos:end="583:22"><name pos:start="583:14" pos:end="583:22">OPC_SYNCI</name></expr>:</case>

            <expr_stmt pos:start="585:13" pos:end="585:47"><expr pos:start="585:13" pos:end="585:46"><call pos:start="585:13" pos:end="585:46"><name pos:start="585:13" pos:end="585:22">check_insn</name><argument_list pos:start="585:23" pos:end="585:46">(<argument pos:start="585:24" pos:end="585:26"><expr pos:start="585:24" pos:end="585:26"><name pos:start="585:24" pos:end="585:26">env</name></expr></argument>, <argument pos:start="585:29" pos:end="585:31"><expr pos:start="585:29" pos:end="585:31"><name pos:start="585:29" pos:end="585:31">ctx</name></expr></argument>, <argument pos:start="585:34" pos:end="585:45"><expr pos:start="585:34" pos:end="585:45"><name pos:start="585:34" pos:end="585:45">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="587:13" pos:end="587:31">/* Treat as NOP. */</comment>

            <break pos:start="589:13" pos:end="589:18">break;</break>

        <default pos:start="591:9" pos:end="591:16">default:</default>            <comment type="block" pos:start="591:29" pos:end="591:41">/* Invalid */</comment>

            <expr_stmt pos:start="593:13" pos:end="593:33"><expr pos:start="593:13" pos:end="593:32"><call pos:start="593:13" pos:end="593:32"><name pos:start="593:13" pos:end="593:22">MIPS_INVAL</name><argument_list pos:start="593:23" pos:end="593:32">(<argument pos:start="593:24" pos:end="593:31"><expr pos:start="593:24" pos:end="593:31"><literal type="string" pos:start="593:24" pos:end="593:31">"regimm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="595:13" pos:end="595:45"><expr pos:start="595:13" pos:end="595:44"><call pos:start="595:13" pos:end="595:44"><name pos:start="595:13" pos:end="595:30">generate_exception</name><argument_list pos:start="595:31" pos:end="595:44">(<argument pos:start="595:32" pos:end="595:34"><expr pos:start="595:32" pos:end="595:34"><name pos:start="595:32" pos:end="595:34">ctx</name></expr></argument>, <argument pos:start="595:37" pos:end="595:43"><expr pos:start="595:37" pos:end="595:43"><name pos:start="595:37" pos:end="595:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="597:13" pos:end="597:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="601:9" pos:end="601:14">break;</break>

    <case pos:start="603:5" pos:end="603:17">case <expr pos:start="603:10" pos:end="603:16"><name pos:start="603:10" pos:end="603:16">OPC_CP0</name></expr>:</case>

        <expr_stmt pos:start="605:9" pos:end="605:31"><expr pos:start="605:9" pos:end="605:30"><call pos:start="605:9" pos:end="605:30"><name pos:start="605:9" pos:end="605:25">check_cp0_enabled</name><argument_list pos:start="605:26" pos:end="605:30">(<argument pos:start="605:27" pos:end="605:29"><expr pos:start="605:27" pos:end="605:29"><name pos:start="605:27" pos:end="605:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="607:9" pos:end="607:36"><expr pos:start="607:9" pos:end="607:35"><name pos:start="607:9" pos:end="607:11">op1</name> <operator pos:start="607:13" pos:end="607:13">=</operator> <call pos:start="607:15" pos:end="607:35"><name pos:start="607:15" pos:end="607:22">MASK_CP0</name><argument_list pos:start="607:23" pos:end="607:35">(<argument pos:start="607:24" pos:end="607:34"><expr pos:start="607:24" pos:end="607:34"><name pos:start="607:24" pos:end="607:34"><name pos:start="607:24" pos:end="607:26">ctx</name><operator pos:start="607:27" pos:end="607:28">-&gt;</operator><name pos:start="607:29" pos:end="607:34">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="609:9" pos:end="745:9">switch <condition pos:start="609:16" pos:end="609:20">(<expr pos:start="609:17" pos:end="609:19"><name pos:start="609:17" pos:end="609:19">op1</name></expr>)</condition> <block pos:start="609:22" pos:end="745:9">{<block_content pos:start="611:9" pos:end="743:18">

        <case pos:start="611:9" pos:end="611:22">case <expr pos:start="611:14" pos:end="611:21"><name pos:start="611:14" pos:end="611:21">OPC_MFC0</name></expr>:</case>

        <case pos:start="613:9" pos:end="613:22">case <expr pos:start="613:14" pos:end="613:21"><name pos:start="613:14" pos:end="613:21">OPC_MTC0</name></expr>:</case>

        <case pos:start="615:9" pos:end="615:22">case <expr pos:start="615:14" pos:end="615:21"><name pos:start="615:14" pos:end="615:21">OPC_MFTR</name></expr>:</case>

        <case pos:start="617:9" pos:end="620:0">case <expr pos:start="617:14" pos:end="617:21"><name pos:start="617:14" pos:end="617:21">OPC_MTTR</name></expr>:</case>

<cpp:if pos:start="619:1" pos:end="619:53">#<cpp:directive pos:start="619:2" pos:end="619:3">if</cpp:directive> <expr pos:start="619:5" pos:end="619:53"><call pos:start="619:5" pos:end="619:27"><name pos:start="619:5" pos:end="619:11">defined</name><argument_list pos:start="619:12" pos:end="619:27">(<argument pos:start="619:13" pos:end="619:26"><expr pos:start="619:13" pos:end="619:26"><name pos:start="619:13" pos:end="619:26">TARGET_MIPSN32</name></expr></argument>)</argument_list></call> <operator pos:start="619:29" pos:end="619:30">||</operator> <call pos:start="619:32" pos:end="619:53"><name pos:start="619:32" pos:end="619:38">defined</name><argument_list pos:start="619:39" pos:end="619:53">(<argument pos:start="619:40" pos:end="619:52"><expr pos:start="619:40" pos:end="619:52"><name pos:start="619:40" pos:end="619:52">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="621:9" pos:end="621:23">case <expr pos:start="621:14" pos:end="621:22"><name pos:start="621:14" pos:end="621:22">OPC_DMFC0</name></expr>:</case>

        <case pos:start="623:9" pos:end="626:0">case <expr pos:start="623:14" pos:end="623:22"><name pos:start="623:14" pos:end="623:22">OPC_DMTC0</name></expr>:</case>

<cpp:endif pos:start="625:1" pos:end="625:6">#<cpp:directive pos:start="625:2" pos:end="625:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="627:13" pos:end="627:43"><expr pos:start="627:13" pos:end="627:42"><call pos:start="627:13" pos:end="627:42"><name pos:start="627:13" pos:end="627:19">gen_cp0</name><argument_list pos:start="627:20" pos:end="627:42">(<argument pos:start="627:21" pos:end="627:23"><expr pos:start="627:21" pos:end="627:23"><name pos:start="627:21" pos:end="627:23">env</name></expr></argument>, <argument pos:start="627:26" pos:end="627:28"><expr pos:start="627:26" pos:end="627:28"><name pos:start="627:26" pos:end="627:28">ctx</name></expr></argument>, <argument pos:start="627:31" pos:end="627:33"><expr pos:start="627:31" pos:end="627:33"><name pos:start="627:31" pos:end="627:33">op1</name></expr></argument>, <argument pos:start="627:36" pos:end="627:37"><expr pos:start="627:36" pos:end="627:37"><name pos:start="627:36" pos:end="627:37">rt</name></expr></argument>, <argument pos:start="627:40" pos:end="627:41"><expr pos:start="627:40" pos:end="627:41"><name pos:start="627:40" pos:end="627:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="629:13" pos:end="629:18">break;</break>

        <case pos:start="631:9" pos:end="631:42">case <expr pos:start="631:14" pos:end="631:41"><name pos:start="631:14" pos:end="631:25">OPC_C0_FIRST</name> <operator pos:start="631:27" pos:end="631:29">...</operator> <name pos:start="631:31" pos:end="631:41">OPC_C0_LAST</name></expr>:</case>

            <expr_stmt pos:start="633:13" pos:end="633:60"><expr pos:start="633:13" pos:end="633:59"><call pos:start="633:13" pos:end="633:59"><name pos:start="633:13" pos:end="633:19">gen_cp0</name><argument_list pos:start="633:20" pos:end="633:59">(<argument pos:start="633:21" pos:end="633:23"><expr pos:start="633:21" pos:end="633:23"><name pos:start="633:21" pos:end="633:23">env</name></expr></argument>, <argument pos:start="633:26" pos:end="633:28"><expr pos:start="633:26" pos:end="633:28"><name pos:start="633:26" pos:end="633:28">ctx</name></expr></argument>, <argument pos:start="633:31" pos:end="633:50"><expr pos:start="633:31" pos:end="633:50"><call pos:start="633:31" pos:end="633:50"><name pos:start="633:31" pos:end="633:37">MASK_C0</name><argument_list pos:start="633:38" pos:end="633:50">(<argument pos:start="633:39" pos:end="633:49"><expr pos:start="633:39" pos:end="633:49"><name pos:start="633:39" pos:end="633:49"><name pos:start="633:39" pos:end="633:41">ctx</name><operator pos:start="633:42" pos:end="633:43">-&gt;</operator><name pos:start="633:44" pos:end="633:49">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="633:53" pos:end="633:54"><expr pos:start="633:53" pos:end="633:54"><name pos:start="633:53" pos:end="633:54">rt</name></expr></argument>, <argument pos:start="633:57" pos:end="633:58"><expr pos:start="633:57" pos:end="633:58"><name pos:start="633:57" pos:end="633:58">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="635:13" pos:end="635:18">break;</break>

        <case pos:start="637:9" pos:end="637:23">case <expr pos:start="637:14" pos:end="637:22"><name pos:start="637:14" pos:end="637:22">OPC_MFMC0</name></expr>:</case>

            <expr_stmt pos:start="639:13" pos:end="639:42"><expr pos:start="639:13" pos:end="639:41"><name pos:start="639:13" pos:end="639:15">op2</name> <operator pos:start="639:17" pos:end="639:17">=</operator> <call pos:start="639:19" pos:end="639:41"><name pos:start="639:19" pos:end="639:28">MASK_MFMC0</name><argument_list pos:start="639:29" pos:end="639:41">(<argument pos:start="639:30" pos:end="639:40"><expr pos:start="639:30" pos:end="639:40"><name pos:start="639:30" pos:end="639:40"><name pos:start="639:30" pos:end="639:32">ctx</name><operator pos:start="639:33" pos:end="639:34">-&gt;</operator><name pos:start="639:35" pos:end="639:40">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="641:13" pos:end="711:13">switch <condition pos:start="641:20" pos:end="641:24">(<expr pos:start="641:21" pos:end="641:23"><name pos:start="641:21" pos:end="641:23">op2</name></expr>)</condition> <block pos:start="641:26" pos:end="711:13">{<block_content pos:start="643:13" pos:end="709:22">

            <case pos:start="643:13" pos:end="643:25">case <expr pos:start="643:18" pos:end="643:24"><name pos:start="643:18" pos:end="643:24">OPC_DMT</name></expr>:</case>

                <expr_stmt pos:start="645:17" pos:end="645:40"><expr pos:start="645:17" pos:end="645:39"><call pos:start="645:17" pos:end="645:39"><name pos:start="645:17" pos:end="645:29">check_mips_mt</name><argument_list pos:start="645:30" pos:end="645:39">(<argument pos:start="645:31" pos:end="645:33"><expr pos:start="645:31" pos:end="645:33"><name pos:start="645:31" pos:end="645:33">env</name></expr></argument>, <argument pos:start="645:36" pos:end="645:38"><expr pos:start="645:36" pos:end="645:38"><name pos:start="645:36" pos:end="645:38">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="647:17" pos:end="647:29"><expr pos:start="647:17" pos:end="647:28"><call pos:start="647:17" pos:end="647:28"><name pos:start="647:17" pos:end="647:26">gen_op_dmt</name><argument_list pos:start="647:27" pos:end="647:28">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="649:17" pos:end="649:22">break;</break>

            <case pos:start="651:13" pos:end="651:25">case <expr pos:start="651:18" pos:end="651:24"><name pos:start="651:18" pos:end="651:24">OPC_EMT</name></expr>:</case>

                <expr_stmt pos:start="653:17" pos:end="653:40"><expr pos:start="653:17" pos:end="653:39"><call pos:start="653:17" pos:end="653:39"><name pos:start="653:17" pos:end="653:29">check_mips_mt</name><argument_list pos:start="653:30" pos:end="653:39">(<argument pos:start="653:31" pos:end="653:33"><expr pos:start="653:31" pos:end="653:33"><name pos:start="653:31" pos:end="653:33">env</name></expr></argument>, <argument pos:start="653:36" pos:end="653:38"><expr pos:start="653:36" pos:end="653:38"><name pos:start="653:36" pos:end="653:38">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="655:17" pos:end="655:29"><expr pos:start="655:17" pos:end="655:28"><call pos:start="655:17" pos:end="655:28"><name pos:start="655:17" pos:end="655:26">gen_op_emt</name><argument_list pos:start="655:27" pos:end="655:28">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="657:17" pos:end="657:22">break;</break>

            <case pos:start="659:13" pos:end="659:26">case <expr pos:start="659:18" pos:end="659:25"><name pos:start="659:18" pos:end="659:25">OPC_DVPE</name></expr>:</case>

                <expr_stmt pos:start="661:17" pos:end="661:40"><expr pos:start="661:17" pos:end="661:39"><call pos:start="661:17" pos:end="661:39"><name pos:start="661:17" pos:end="661:29">check_mips_mt</name><argument_list pos:start="661:30" pos:end="661:39">(<argument pos:start="661:31" pos:end="661:33"><expr pos:start="661:31" pos:end="661:33"><name pos:start="661:31" pos:end="661:33">env</name></expr></argument>, <argument pos:start="661:36" pos:end="661:38"><expr pos:start="661:36" pos:end="661:38"><name pos:start="661:36" pos:end="661:38">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="663:17" pos:end="663:30"><expr pos:start="663:17" pos:end="663:29"><call pos:start="663:17" pos:end="663:29"><name pos:start="663:17" pos:end="663:27">gen_op_dvpe</name><argument_list pos:start="663:28" pos:end="663:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="665:17" pos:end="665:22">break;</break>

            <case pos:start="667:13" pos:end="667:26">case <expr pos:start="667:18" pos:end="667:25"><name pos:start="667:18" pos:end="667:25">OPC_EVPE</name></expr>:</case>

                <expr_stmt pos:start="669:17" pos:end="669:40"><expr pos:start="669:17" pos:end="669:39"><call pos:start="669:17" pos:end="669:39"><name pos:start="669:17" pos:end="669:29">check_mips_mt</name><argument_list pos:start="669:30" pos:end="669:39">(<argument pos:start="669:31" pos:end="669:33"><expr pos:start="669:31" pos:end="669:33"><name pos:start="669:31" pos:end="669:33">env</name></expr></argument>, <argument pos:start="669:36" pos:end="669:38"><expr pos:start="669:36" pos:end="669:38"><name pos:start="669:36" pos:end="669:38">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="671:17" pos:end="671:30"><expr pos:start="671:17" pos:end="671:29"><call pos:start="671:17" pos:end="671:29"><name pos:start="671:17" pos:end="671:27">gen_op_evpe</name><argument_list pos:start="671:28" pos:end="671:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="673:17" pos:end="673:22">break;</break>

            <case pos:start="675:13" pos:end="675:24">case <expr pos:start="675:18" pos:end="675:23"><name pos:start="675:18" pos:end="675:23">OPC_DI</name></expr>:</case>

                <expr_stmt pos:start="677:17" pos:end="677:51"><expr pos:start="677:17" pos:end="677:50"><call pos:start="677:17" pos:end="677:50"><name pos:start="677:17" pos:end="677:26">check_insn</name><argument_list pos:start="677:27" pos:end="677:50">(<argument pos:start="677:28" pos:end="677:30"><expr pos:start="677:28" pos:end="677:30"><name pos:start="677:28" pos:end="677:30">env</name></expr></argument>, <argument pos:start="677:33" pos:end="677:35"><expr pos:start="677:33" pos:end="677:35"><name pos:start="677:33" pos:end="677:35">ctx</name></expr></argument>, <argument pos:start="677:38" pos:end="677:49"><expr pos:start="677:38" pos:end="677:49"><name pos:start="677:38" pos:end="677:49">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="679:17" pos:end="679:39"><expr pos:start="679:17" pos:end="679:38"><call pos:start="679:17" pos:end="679:38"><name pos:start="679:17" pos:end="679:30">save_cpu_state</name><argument_list pos:start="679:31" pos:end="679:38">(<argument pos:start="679:32" pos:end="679:34"><expr pos:start="679:32" pos:end="679:34"><name pos:start="679:32" pos:end="679:34">ctx</name></expr></argument>, <argument pos:start="679:37" pos:end="679:37"><expr pos:start="679:37" pos:end="679:37"><literal type="number" pos:start="679:37" pos:end="679:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="681:17" pos:end="681:28"><expr pos:start="681:17" pos:end="681:27"><call pos:start="681:17" pos:end="681:27"><name pos:start="681:17" pos:end="681:25">gen_op_di</name><argument_list pos:start="681:26" pos:end="681:27">()</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="683:17" pos:end="683:81">/* Stop translation as we may have switched the execution mode */</comment>

                <expr_stmt pos:start="685:17" pos:end="685:38"><expr pos:start="685:17" pos:end="685:37"><name pos:start="685:17" pos:end="685:27"><name pos:start="685:17" pos:end="685:19">ctx</name><operator pos:start="685:20" pos:end="685:21">-&gt;</operator><name pos:start="685:22" pos:end="685:27">bstate</name></name> <operator pos:start="685:29" pos:end="685:29">=</operator> <name pos:start="685:31" pos:end="685:37">BS_STOP</name></expr>;</expr_stmt>

                <break pos:start="687:17" pos:end="687:22">break;</break>

            <case pos:start="689:13" pos:end="689:24">case <expr pos:start="689:18" pos:end="689:23"><name pos:start="689:18" pos:end="689:23">OPC_EI</name></expr>:</case>

                <expr_stmt pos:start="691:17" pos:end="691:51"><expr pos:start="691:17" pos:end="691:50"><call pos:start="691:17" pos:end="691:50"><name pos:start="691:17" pos:end="691:26">check_insn</name><argument_list pos:start="691:27" pos:end="691:50">(<argument pos:start="691:28" pos:end="691:30"><expr pos:start="691:28" pos:end="691:30"><name pos:start="691:28" pos:end="691:30">env</name></expr></argument>, <argument pos:start="691:33" pos:end="691:35"><expr pos:start="691:33" pos:end="691:35"><name pos:start="691:33" pos:end="691:35">ctx</name></expr></argument>, <argument pos:start="691:38" pos:end="691:49"><expr pos:start="691:38" pos:end="691:49"><name pos:start="691:38" pos:end="691:49">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="693:17" pos:end="693:39"><expr pos:start="693:17" pos:end="693:38"><call pos:start="693:17" pos:end="693:38"><name pos:start="693:17" pos:end="693:30">save_cpu_state</name><argument_list pos:start="693:31" pos:end="693:38">(<argument pos:start="693:32" pos:end="693:34"><expr pos:start="693:32" pos:end="693:34"><name pos:start="693:32" pos:end="693:34">ctx</name></expr></argument>, <argument pos:start="693:37" pos:end="693:37"><expr pos:start="693:37" pos:end="693:37"><literal type="number" pos:start="693:37" pos:end="693:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="695:17" pos:end="695:28"><expr pos:start="695:17" pos:end="695:27"><call pos:start="695:17" pos:end="695:27"><name pos:start="695:17" pos:end="695:25">gen_op_ei</name><argument_list pos:start="695:26" pos:end="695:27">()</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="697:17" pos:end="697:81">/* Stop translation as we may have switched the execution mode */</comment>

                <expr_stmt pos:start="699:17" pos:end="699:38"><expr pos:start="699:17" pos:end="699:37"><name pos:start="699:17" pos:end="699:27"><name pos:start="699:17" pos:end="699:19">ctx</name><operator pos:start="699:20" pos:end="699:21">-&gt;</operator><name pos:start="699:22" pos:end="699:27">bstate</name></name> <operator pos:start="699:29" pos:end="699:29">=</operator> <name pos:start="699:31" pos:end="699:37">BS_STOP</name></expr>;</expr_stmt>

                <break pos:start="701:17" pos:end="701:22">break;</break>

            <default pos:start="703:13" pos:end="703:20">default:</default>            <comment type="block" pos:start="703:33" pos:end="703:45">/* Invalid */</comment>

                <expr_stmt pos:start="705:17" pos:end="705:36"><expr pos:start="705:17" pos:end="705:35"><call pos:start="705:17" pos:end="705:35"><name pos:start="705:17" pos:end="705:26">MIPS_INVAL</name><argument_list pos:start="705:27" pos:end="705:35">(<argument pos:start="705:28" pos:end="705:34"><expr pos:start="705:28" pos:end="705:34"><literal type="string" pos:start="705:28" pos:end="705:34">"mfmc0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="707:17" pos:end="707:49"><expr pos:start="707:17" pos:end="707:48"><call pos:start="707:17" pos:end="707:48"><name pos:start="707:17" pos:end="707:34">generate_exception</name><argument_list pos:start="707:35" pos:end="707:48">(<argument pos:start="707:36" pos:end="707:38"><expr pos:start="707:36" pos:end="707:38"><name pos:start="707:36" pos:end="707:38">ctx</name></expr></argument>, <argument pos:start="707:41" pos:end="707:47"><expr pos:start="707:41" pos:end="707:47"><name pos:start="707:41" pos:end="707:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="709:17" pos:end="709:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="713:13" pos:end="713:37"><expr pos:start="713:13" pos:end="713:36"><call pos:start="713:13" pos:end="713:36"><name pos:start="713:13" pos:end="713:28">GEN_STORE_TN_REG</name><argument_list pos:start="713:29" pos:end="713:36">(<argument pos:start="713:30" pos:end="713:31"><expr pos:start="713:30" pos:end="713:31"><name pos:start="713:30" pos:end="713:31">rt</name></expr></argument>, <argument pos:start="713:34" pos:end="713:35"><expr pos:start="713:34" pos:end="713:35"><name pos:start="713:34" pos:end="713:35">T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="715:13" pos:end="715:18">break;</break>

        <case pos:start="717:9" pos:end="717:24">case <expr pos:start="717:14" pos:end="717:23"><name pos:start="717:14" pos:end="717:23">OPC_RDPGPR</name></expr>:</case>

            <expr_stmt pos:start="719:13" pos:end="719:47"><expr pos:start="719:13" pos:end="719:46"><call pos:start="719:13" pos:end="719:46"><name pos:start="719:13" pos:end="719:22">check_insn</name><argument_list pos:start="719:23" pos:end="719:46">(<argument pos:start="719:24" pos:end="719:26"><expr pos:start="719:24" pos:end="719:26"><name pos:start="719:24" pos:end="719:26">env</name></expr></argument>, <argument pos:start="719:29" pos:end="719:31"><expr pos:start="719:29" pos:end="719:31"><name pos:start="719:29" pos:end="719:31">ctx</name></expr></argument>, <argument pos:start="719:34" pos:end="719:45"><expr pos:start="719:34" pos:end="719:45"><name pos:start="719:34" pos:end="719:45">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="721:13" pos:end="721:39"><expr pos:start="721:13" pos:end="721:38"><call pos:start="721:13" pos:end="721:38"><name pos:start="721:13" pos:end="721:30">GEN_LOAD_SRSREG_TN</name><argument_list pos:start="721:31" pos:end="721:38">(<argument pos:start="721:32" pos:end="721:33"><expr pos:start="721:32" pos:end="721:33"><name pos:start="721:32" pos:end="721:33">T0</name></expr></argument>, <argument pos:start="721:36" pos:end="721:37"><expr pos:start="721:36" pos:end="721:37"><name pos:start="721:36" pos:end="721:37">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="723:13" pos:end="723:37"><expr pos:start="723:13" pos:end="723:36"><call pos:start="723:13" pos:end="723:36"><name pos:start="723:13" pos:end="723:28">GEN_STORE_TN_REG</name><argument_list pos:start="723:29" pos:end="723:36">(<argument pos:start="723:30" pos:end="723:31"><expr pos:start="723:30" pos:end="723:31"><name pos:start="723:30" pos:end="723:31">rd</name></expr></argument>, <argument pos:start="723:34" pos:end="723:35"><expr pos:start="723:34" pos:end="723:35"><name pos:start="723:34" pos:end="723:35">T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="725:13" pos:end="725:18">break;</break>

        <case pos:start="727:9" pos:end="727:24">case <expr pos:start="727:14" pos:end="727:23"><name pos:start="727:14" pos:end="727:23">OPC_WRPGPR</name></expr>:</case>

            <expr_stmt pos:start="729:13" pos:end="729:47"><expr pos:start="729:13" pos:end="729:46"><call pos:start="729:13" pos:end="729:46"><name pos:start="729:13" pos:end="729:22">check_insn</name><argument_list pos:start="729:23" pos:end="729:46">(<argument pos:start="729:24" pos:end="729:26"><expr pos:start="729:24" pos:end="729:26"><name pos:start="729:24" pos:end="729:26">env</name></expr></argument>, <argument pos:start="729:29" pos:end="729:31"><expr pos:start="729:29" pos:end="729:31"><name pos:start="729:29" pos:end="729:31">ctx</name></expr></argument>, <argument pos:start="729:34" pos:end="729:45"><expr pos:start="729:34" pos:end="729:45"><name pos:start="729:34" pos:end="729:45">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="731:13" pos:end="731:36"><expr pos:start="731:13" pos:end="731:35"><call pos:start="731:13" pos:end="731:35"><name pos:start="731:13" pos:end="731:27">GEN_LOAD_REG_TN</name><argument_list pos:start="731:28" pos:end="731:35">(<argument pos:start="731:29" pos:end="731:30"><expr pos:start="731:29" pos:end="731:30"><name pos:start="731:29" pos:end="731:30">T0</name></expr></argument>, <argument pos:start="731:33" pos:end="731:34"><expr pos:start="731:33" pos:end="731:34"><name pos:start="731:33" pos:end="731:34">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="733:13" pos:end="733:40"><expr pos:start="733:13" pos:end="733:39"><call pos:start="733:13" pos:end="733:39"><name pos:start="733:13" pos:end="733:31">GEN_STORE_TN_SRSREG</name><argument_list pos:start="733:32" pos:end="733:39">(<argument pos:start="733:33" pos:end="733:34"><expr pos:start="733:33" pos:end="733:34"><name pos:start="733:33" pos:end="733:34">rd</name></expr></argument>, <argument pos:start="733:37" pos:end="733:38"><expr pos:start="733:37" pos:end="733:38"><name pos:start="733:37" pos:end="733:38">T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="735:13" pos:end="735:18">break;</break>

        <default pos:start="737:9" pos:end="737:16">default:</default>

            <expr_stmt pos:start="739:13" pos:end="739:30"><expr pos:start="739:13" pos:end="739:29"><call pos:start="739:13" pos:end="739:29"><name pos:start="739:13" pos:end="739:22">MIPS_INVAL</name><argument_list pos:start="739:23" pos:end="739:29">(<argument pos:start="739:24" pos:end="739:28"><expr pos:start="739:24" pos:end="739:28"><literal type="string" pos:start="739:24" pos:end="739:28">"cp0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="741:13" pos:end="741:45"><expr pos:start="741:13" pos:end="741:44"><call pos:start="741:13" pos:end="741:44"><name pos:start="741:13" pos:end="741:30">generate_exception</name><argument_list pos:start="741:31" pos:end="741:44">(<argument pos:start="741:32" pos:end="741:34"><expr pos:start="741:32" pos:end="741:34"><name pos:start="741:32" pos:end="741:34">ctx</name></expr></argument>, <argument pos:start="741:37" pos:end="741:43"><expr pos:start="741:37" pos:end="741:43"><name pos:start="741:37" pos:end="741:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="743:13" pos:end="743:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="747:9" pos:end="747:14">break;</break>

    <case pos:start="749:5" pos:end="749:30">case <expr pos:start="749:10" pos:end="749:29"><name pos:start="749:10" pos:end="749:17">OPC_ADDI</name> <operator pos:start="749:19" pos:end="749:21">...</operator> <name pos:start="749:23" pos:end="749:29">OPC_LUI</name></expr>:</case> <comment type="block" pos:start="749:32" pos:end="749:69">/* Arithmetic with immediate opcode */</comment>

         <expr_stmt pos:start="751:10" pos:end="751:50"><expr pos:start="751:10" pos:end="751:49"><call pos:start="751:10" pos:end="751:49"><name pos:start="751:10" pos:end="751:22">gen_arith_imm</name><argument_list pos:start="751:23" pos:end="751:49">(<argument pos:start="751:24" pos:end="751:26"><expr pos:start="751:24" pos:end="751:26"><name pos:start="751:24" pos:end="751:26">env</name></expr></argument>, <argument pos:start="751:29" pos:end="751:31"><expr pos:start="751:29" pos:end="751:31"><name pos:start="751:29" pos:end="751:31">ctx</name></expr></argument>, <argument pos:start="751:34" pos:end="751:35"><expr pos:start="751:34" pos:end="751:35"><name pos:start="751:34" pos:end="751:35">op</name></expr></argument>, <argument pos:start="751:38" pos:end="751:39"><expr pos:start="751:38" pos:end="751:39"><name pos:start="751:38" pos:end="751:39">rt</name></expr></argument>, <argument pos:start="751:42" pos:end="751:43"><expr pos:start="751:42" pos:end="751:43"><name pos:start="751:42" pos:end="751:43">rs</name></expr></argument>, <argument pos:start="751:46" pos:end="751:48"><expr pos:start="751:46" pos:end="751:48"><name pos:start="751:46" pos:end="751:48">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="753:10" pos:end="753:15">break;</break>

    <case pos:start="755:5" pos:end="755:27">case <expr pos:start="755:10" pos:end="755:26"><name pos:start="755:10" pos:end="755:14">OPC_J</name> <operator pos:start="755:16" pos:end="755:18">...</operator> <name pos:start="755:20" pos:end="755:26">OPC_JAL</name></expr>:</case> <comment type="block" pos:start="755:29" pos:end="755:38">/* Jump */</comment>

         <expr_stmt pos:start="757:10" pos:end="757:58"><expr pos:start="757:10" pos:end="757:57"><name pos:start="757:10" pos:end="757:15">offset</name> <operator pos:start="757:17" pos:end="757:17">=</operator> <operator pos:start="757:19" pos:end="757:19">(</operator><name pos:start="757:20" pos:end="757:26">int32_t</name><operator pos:start="757:27" pos:end="757:27">)</operator><operator pos:start="757:28" pos:end="757:28">(</operator><name pos:start="757:29" pos:end="757:39"><name pos:start="757:29" pos:end="757:31">ctx</name><operator pos:start="757:32" pos:end="757:33">-&gt;</operator><name pos:start="757:34" pos:end="757:39">opcode</name></name> <operator pos:start="757:41" pos:end="757:41">&amp;</operator> <literal type="number" pos:start="757:43" pos:end="757:51">0x3FFFFFF</literal><operator pos:start="757:52" pos:end="757:52">)</operator> <operator pos:start="757:54" pos:end="757:55">&lt;&lt;</operator> <literal type="number" pos:start="757:57" pos:end="757:57">2</literal></expr>;</expr_stmt>

         <expr_stmt pos:start="759:10" pos:end="759:53"><expr pos:start="759:10" pos:end="759:52"><call pos:start="759:10" pos:end="759:52"><name pos:start="759:10" pos:end="759:27">gen_compute_branch</name><argument_list pos:start="759:28" pos:end="759:52">(<argument pos:start="759:29" pos:end="759:31"><expr pos:start="759:29" pos:end="759:31"><name pos:start="759:29" pos:end="759:31">ctx</name></expr></argument>, <argument pos:start="759:34" pos:end="759:35"><expr pos:start="759:34" pos:end="759:35"><name pos:start="759:34" pos:end="759:35">op</name></expr></argument>, <argument pos:start="759:38" pos:end="759:39"><expr pos:start="759:38" pos:end="759:39"><name pos:start="759:38" pos:end="759:39">rs</name></expr></argument>, <argument pos:start="759:42" pos:end="759:43"><expr pos:start="759:42" pos:end="759:43"><name pos:start="759:42" pos:end="759:43">rt</name></expr></argument>, <argument pos:start="759:46" pos:end="759:51"><expr pos:start="759:46" pos:end="759:51"><name pos:start="759:46" pos:end="759:51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <return pos:start="761:10" pos:end="761:16">return;</return>

    <case pos:start="763:5" pos:end="763:30">case <expr pos:start="763:10" pos:end="763:29"><name pos:start="763:10" pos:end="763:16">OPC_BEQ</name> <operator pos:start="763:18" pos:end="763:20">...</operator> <name pos:start="763:22" pos:end="763:29">OPC_BGTZ</name></expr>:</case> <comment type="block" pos:start="763:32" pos:end="763:43">/* Branch */</comment>

    <case pos:start="765:5" pos:end="765:32">case <expr pos:start="765:10" pos:end="765:31"><name pos:start="765:10" pos:end="765:17">OPC_BEQL</name> <operator pos:start="765:19" pos:end="765:21">...</operator> <name pos:start="765:23" pos:end="765:31">OPC_BGTZL</name></expr>:</case>

         <expr_stmt pos:start="767:10" pos:end="767:55"><expr pos:start="767:10" pos:end="767:54"><call pos:start="767:10" pos:end="767:54"><name pos:start="767:10" pos:end="767:27">gen_compute_branch</name><argument_list pos:start="767:28" pos:end="767:54">(<argument pos:start="767:29" pos:end="767:31"><expr pos:start="767:29" pos:end="767:31"><name pos:start="767:29" pos:end="767:31">ctx</name></expr></argument>, <argument pos:start="767:34" pos:end="767:35"><expr pos:start="767:34" pos:end="767:35"><name pos:start="767:34" pos:end="767:35">op</name></expr></argument>, <argument pos:start="767:38" pos:end="767:39"><expr pos:start="767:38" pos:end="767:39"><name pos:start="767:38" pos:end="767:39">rs</name></expr></argument>, <argument pos:start="767:42" pos:end="767:43"><expr pos:start="767:42" pos:end="767:43"><name pos:start="767:42" pos:end="767:43">rt</name></expr></argument>, <argument pos:start="767:46" pos:end="767:53"><expr pos:start="767:46" pos:end="767:53"><name pos:start="767:46" pos:end="767:48">imm</name> <operator pos:start="767:50" pos:end="767:51">&lt;&lt;</operator> <literal type="number" pos:start="767:53" pos:end="767:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <return pos:start="769:10" pos:end="769:16">return;</return>

    <case pos:start="771:5" pos:end="771:28">case <expr pos:start="771:10" pos:end="771:27"><name pos:start="771:10" pos:end="771:15">OPC_LB</name> <operator pos:start="771:17" pos:end="771:19">...</operator> <name pos:start="771:21" pos:end="771:27">OPC_LWR</name></expr>:</case> <comment type="block" pos:start="771:30" pos:end="771:50">/* Load and stores */</comment>

    <case pos:start="773:5" pos:end="773:27">case <expr pos:start="773:10" pos:end="773:26"><name pos:start="773:10" pos:end="773:15">OPC_SB</name> <operator pos:start="773:17" pos:end="773:19">...</operator> <name pos:start="773:21" pos:end="773:26">OPC_SW</name></expr>:</case>

    <case pos:start="775:5" pos:end="775:17">case <expr pos:start="775:10" pos:end="775:16"><name pos:start="775:10" pos:end="775:16">OPC_SWR</name></expr>:</case>

    <case pos:start="777:5" pos:end="777:16">case <expr pos:start="777:10" pos:end="777:15"><name pos:start="777:10" pos:end="777:15">OPC_LL</name></expr>:</case>

    <case pos:start="779:5" pos:end="779:16">case <expr pos:start="779:10" pos:end="779:15"><name pos:start="779:10" pos:end="779:15">OPC_SC</name></expr>:</case>

         <expr_stmt pos:start="781:10" pos:end="781:40"><expr pos:start="781:10" pos:end="781:39"><call pos:start="781:10" pos:end="781:39"><name pos:start="781:10" pos:end="781:17">gen_ldst</name><argument_list pos:start="781:18" pos:end="781:39">(<argument pos:start="781:19" pos:end="781:21"><expr pos:start="781:19" pos:end="781:21"><name pos:start="781:19" pos:end="781:21">ctx</name></expr></argument>, <argument pos:start="781:24" pos:end="781:25"><expr pos:start="781:24" pos:end="781:25"><name pos:start="781:24" pos:end="781:25">op</name></expr></argument>, <argument pos:start="781:28" pos:end="781:29"><expr pos:start="781:28" pos:end="781:29"><name pos:start="781:28" pos:end="781:29">rt</name></expr></argument>, <argument pos:start="781:32" pos:end="781:33"><expr pos:start="781:32" pos:end="781:33"><name pos:start="781:32" pos:end="781:33">rs</name></expr></argument>, <argument pos:start="781:36" pos:end="781:38"><expr pos:start="781:36" pos:end="781:38"><name pos:start="781:36" pos:end="781:38">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="783:10" pos:end="783:15">break;</break>

    <case pos:start="785:5" pos:end="785:19">case <expr pos:start="785:10" pos:end="785:18"><name pos:start="785:10" pos:end="785:18">OPC_CACHE</name></expr>:</case>

        <expr_stmt pos:start="787:9" pos:end="787:53"><expr pos:start="787:9" pos:end="787:52"><call pos:start="787:9" pos:end="787:52"><name pos:start="787:9" pos:end="787:18">check_insn</name><argument_list pos:start="787:19" pos:end="787:52">(<argument pos:start="787:20" pos:end="787:22"><expr pos:start="787:20" pos:end="787:22"><name pos:start="787:20" pos:end="787:22">env</name></expr></argument>, <argument pos:start="787:25" pos:end="787:27"><expr pos:start="787:25" pos:end="787:27"><name pos:start="787:25" pos:end="787:27">ctx</name></expr></argument>, <argument pos:start="787:30" pos:end="787:51"><expr pos:start="787:30" pos:end="787:51"><name pos:start="787:30" pos:end="787:38">ISA_MIPS3</name> <operator pos:start="787:40" pos:end="787:40">|</operator> <name pos:start="787:42" pos:end="787:51">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="789:9" pos:end="789:27">/* Treat as NOP. */</comment>

        <break pos:start="791:9" pos:end="791:14">break;</break>

    <case pos:start="793:5" pos:end="793:18">case <expr pos:start="793:10" pos:end="793:17"><name pos:start="793:10" pos:end="793:17">OPC_PREF</name></expr>:</case>

        <expr_stmt pos:start="795:9" pos:end="795:53"><expr pos:start="795:9" pos:end="795:52"><call pos:start="795:9" pos:end="795:52"><name pos:start="795:9" pos:end="795:18">check_insn</name><argument_list pos:start="795:19" pos:end="795:52">(<argument pos:start="795:20" pos:end="795:22"><expr pos:start="795:20" pos:end="795:22"><name pos:start="795:20" pos:end="795:22">env</name></expr></argument>, <argument pos:start="795:25" pos:end="795:27"><expr pos:start="795:25" pos:end="795:27"><name pos:start="795:25" pos:end="795:27">ctx</name></expr></argument>, <argument pos:start="795:30" pos:end="795:51"><expr pos:start="795:30" pos:end="795:51"><name pos:start="795:30" pos:end="795:38">ISA_MIPS4</name> <operator pos:start="795:40" pos:end="795:40">|</operator> <name pos:start="795:42" pos:end="795:51">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="797:9" pos:end="797:27">/* Treat as NOP. */</comment>

        <break pos:start="799:9" pos:end="799:14">break;</break>



    <comment type="block" pos:start="803:5" pos:end="803:32">/* Floating point (COP1). */</comment>

    <case pos:start="805:5" pos:end="805:18">case <expr pos:start="805:10" pos:end="805:17"><name pos:start="805:10" pos:end="805:17">OPC_LWC1</name></expr>:</case>

    <case pos:start="807:5" pos:end="807:18">case <expr pos:start="807:10" pos:end="807:17"><name pos:start="807:10" pos:end="807:17">OPC_LDC1</name></expr>:</case>

    <case pos:start="809:5" pos:end="809:18">case <expr pos:start="809:10" pos:end="809:17"><name pos:start="809:10" pos:end="809:17">OPC_SWC1</name></expr>:</case>

    <case pos:start="811:5" pos:end="811:18">case <expr pos:start="811:10" pos:end="811:17"><name pos:start="811:10" pos:end="811:17">OPC_SDC1</name></expr>:</case>

        <if_stmt pos:start="813:9" pos:end="825:9"><if pos:start="813:9" pos:end="821:9">if <condition pos:start="813:12" pos:end="813:47">(<expr pos:start="813:13" pos:end="813:46"><name pos:start="813:13" pos:end="813:28"><name pos:start="813:13" pos:end="813:15">env</name><operator pos:start="813:16" pos:end="813:17">-&gt;</operator><name pos:start="813:18" pos:end="813:28">CP0_Config1</name></name> <operator pos:start="813:30" pos:end="813:30">&amp;</operator> <operator pos:start="813:32" pos:end="813:32">(</operator><literal type="number" pos:start="813:33" pos:end="813:33">1</literal> <operator pos:start="813:35" pos:end="813:36">&lt;&lt;</operator> <name pos:start="813:38" pos:end="813:45">CP0C1_FP</name><operator pos:start="813:46" pos:end="813:46">)</operator></expr>)</condition> <block pos:start="813:49" pos:end="821:9">{<block_content pos:start="815:13" pos:end="819:47">

            <expr_stmt pos:start="815:13" pos:end="815:35"><expr pos:start="815:13" pos:end="815:34"><call pos:start="815:13" pos:end="815:34"><name pos:start="815:13" pos:end="815:26">save_cpu_state</name><argument_list pos:start="815:27" pos:end="815:34">(<argument pos:start="815:28" pos:end="815:30"><expr pos:start="815:28" pos:end="815:30"><name pos:start="815:28" pos:end="815:30">ctx</name></expr></argument>, <argument pos:start="815:33" pos:end="815:33"><expr pos:start="815:33" pos:end="815:33"><literal type="number" pos:start="815:33" pos:end="815:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="817:13" pos:end="817:35"><expr pos:start="817:13" pos:end="817:34"><call pos:start="817:13" pos:end="817:34"><name pos:start="817:13" pos:end="817:29">check_cp1_enabled</name><argument_list pos:start="817:30" pos:end="817:34">(<argument pos:start="817:31" pos:end="817:33"><expr pos:start="817:31" pos:end="817:33"><name pos:start="817:31" pos:end="817:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="819:13" pos:end="819:47"><expr pos:start="819:13" pos:end="819:46"><call pos:start="819:13" pos:end="819:46"><name pos:start="819:13" pos:end="819:24">gen_flt_ldst</name><argument_list pos:start="819:25" pos:end="819:46">(<argument pos:start="819:26" pos:end="819:28"><expr pos:start="819:26" pos:end="819:28"><name pos:start="819:26" pos:end="819:28">ctx</name></expr></argument>, <argument pos:start="819:31" pos:end="819:32"><expr pos:start="819:31" pos:end="819:32"><name pos:start="819:31" pos:end="819:32">op</name></expr></argument>, <argument pos:start="819:35" pos:end="819:36"><expr pos:start="819:35" pos:end="819:36"><name pos:start="819:35" pos:end="819:36">rt</name></expr></argument>, <argument pos:start="819:39" pos:end="819:40"><expr pos:start="819:39" pos:end="819:40"><name pos:start="819:39" pos:end="819:40">rs</name></expr></argument>, <argument pos:start="819:43" pos:end="819:45"><expr pos:start="819:43" pos:end="819:45"><name pos:start="819:43" pos:end="819:45">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="821:11" pos:end="825:9">else <block pos:start="821:16" pos:end="825:9">{<block_content pos:start="823:13" pos:end="823:53">

            <expr_stmt pos:start="823:13" pos:end="823:53"><expr pos:start="823:13" pos:end="823:52"><call pos:start="823:13" pos:end="823:52"><name pos:start="823:13" pos:end="823:34">generate_exception_err</name><argument_list pos:start="823:35" pos:end="823:52">(<argument pos:start="823:36" pos:end="823:38"><expr pos:start="823:36" pos:end="823:38"><name pos:start="823:36" pos:end="823:38">ctx</name></expr></argument>, <argument pos:start="823:41" pos:end="823:48"><expr pos:start="823:41" pos:end="823:48"><name pos:start="823:41" pos:end="823:48">EXCP_CpU</name></expr></argument>, <argument pos:start="823:51" pos:end="823:51"><expr pos:start="823:51" pos:end="823:51"><literal type="number" pos:start="823:51" pos:end="823:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="827:9" pos:end="827:14">break;</break>



    <case pos:start="831:5" pos:end="831:17">case <expr pos:start="831:10" pos:end="831:16"><name pos:start="831:10" pos:end="831:16">OPC_CP1</name></expr>:</case>

        <if_stmt pos:start="833:9" pos:end="921:9"><if pos:start="833:9" pos:end="917:9">if <condition pos:start="833:12" pos:end="833:47">(<expr pos:start="833:13" pos:end="833:46"><name pos:start="833:13" pos:end="833:28"><name pos:start="833:13" pos:end="833:15">env</name><operator pos:start="833:16" pos:end="833:17">-&gt;</operator><name pos:start="833:18" pos:end="833:28">CP0_Config1</name></name> <operator pos:start="833:30" pos:end="833:30">&amp;</operator> <operator pos:start="833:32" pos:end="833:32">(</operator><literal type="number" pos:start="833:33" pos:end="833:33">1</literal> <operator pos:start="833:35" pos:end="833:36">&lt;&lt;</operator> <name pos:start="833:38" pos:end="833:45">CP0C1_FP</name><operator pos:start="833:46" pos:end="833:46">)</operator></expr>)</condition> <block pos:start="833:49" pos:end="917:9">{<block_content pos:start="835:13" pos:end="915:13">

            <expr_stmt pos:start="835:13" pos:end="835:35"><expr pos:start="835:13" pos:end="835:34"><call pos:start="835:13" pos:end="835:34"><name pos:start="835:13" pos:end="835:26">save_cpu_state</name><argument_list pos:start="835:27" pos:end="835:34">(<argument pos:start="835:28" pos:end="835:30"><expr pos:start="835:28" pos:end="835:30"><name pos:start="835:28" pos:end="835:30">ctx</name></expr></argument>, <argument pos:start="835:33" pos:end="835:33"><expr pos:start="835:33" pos:end="835:33"><literal type="number" pos:start="835:33" pos:end="835:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="837:13" pos:end="837:35"><expr pos:start="837:13" pos:end="837:34"><call pos:start="837:13" pos:end="837:34"><name pos:start="837:13" pos:end="837:29">check_cp1_enabled</name><argument_list pos:start="837:30" pos:end="837:34">(<argument pos:start="837:31" pos:end="837:33"><expr pos:start="837:31" pos:end="837:33"><name pos:start="837:31" pos:end="837:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="839:13" pos:end="839:40"><expr pos:start="839:13" pos:end="839:39"><name pos:start="839:13" pos:end="839:15">op1</name> <operator pos:start="839:17" pos:end="839:17">=</operator> <call pos:start="839:19" pos:end="839:39"><name pos:start="839:19" pos:end="839:26">MASK_CP1</name><argument_list pos:start="839:27" pos:end="839:39">(<argument pos:start="839:28" pos:end="839:38"><expr pos:start="839:28" pos:end="839:38"><name pos:start="839:28" pos:end="839:38"><name pos:start="839:28" pos:end="839:30">ctx</name><operator pos:start="839:31" pos:end="839:32">-&gt;</operator><name pos:start="839:33" pos:end="839:38">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="841:13" pos:end="915:13">switch <condition pos:start="841:20" pos:end="841:24">(<expr pos:start="841:21" pos:end="841:23"><name pos:start="841:21" pos:end="841:23">op1</name></expr>)</condition> <block pos:start="841:26" pos:end="915:13">{<block_content pos:start="843:13" pos:end="913:22">

            <case pos:start="843:13" pos:end="843:27">case <expr pos:start="843:18" pos:end="843:26"><name pos:start="843:18" pos:end="843:26">OPC_MFHC1</name></expr>:</case>

            <case pos:start="845:13" pos:end="845:27">case <expr pos:start="845:18" pos:end="845:26"><name pos:start="845:18" pos:end="845:26">OPC_MTHC1</name></expr>:</case>

                <expr_stmt pos:start="847:17" pos:end="847:51"><expr pos:start="847:17" pos:end="847:50"><call pos:start="847:17" pos:end="847:50"><name pos:start="847:17" pos:end="847:26">check_insn</name><argument_list pos:start="847:27" pos:end="847:50">(<argument pos:start="847:28" pos:end="847:30"><expr pos:start="847:28" pos:end="847:30"><name pos:start="847:28" pos:end="847:30">env</name></expr></argument>, <argument pos:start="847:33" pos:end="847:35"><expr pos:start="847:33" pos:end="847:35"><name pos:start="847:33" pos:end="847:35">ctx</name></expr></argument>, <argument pos:start="847:38" pos:end="847:49"><expr pos:start="847:38" pos:end="847:49"><name pos:start="847:38" pos:end="847:49">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <case pos:start="849:13" pos:end="849:26">case <expr pos:start="849:18" pos:end="849:25"><name pos:start="849:18" pos:end="849:25">OPC_MFC1</name></expr>:</case>

            <case pos:start="851:13" pos:end="851:26">case <expr pos:start="851:18" pos:end="851:25"><name pos:start="851:18" pos:end="851:25">OPC_CFC1</name></expr>:</case>

            <case pos:start="853:13" pos:end="853:26">case <expr pos:start="853:18" pos:end="853:25"><name pos:start="853:18" pos:end="853:25">OPC_MTC1</name></expr>:</case>

            <case pos:start="855:13" pos:end="855:26">case <expr pos:start="855:18" pos:end="855:25"><name pos:start="855:18" pos:end="855:25">OPC_CTC1</name></expr>:</case>

                <expr_stmt pos:start="857:17" pos:end="857:42"><expr pos:start="857:17" pos:end="857:41"><call pos:start="857:17" pos:end="857:41"><name pos:start="857:17" pos:end="857:23">gen_cp1</name><argument_list pos:start="857:24" pos:end="857:41">(<argument pos:start="857:25" pos:end="857:27"><expr pos:start="857:25" pos:end="857:27"><name pos:start="857:25" pos:end="857:27">ctx</name></expr></argument>, <argument pos:start="857:30" pos:end="857:32"><expr pos:start="857:30" pos:end="857:32"><name pos:start="857:30" pos:end="857:32">op1</name></expr></argument>, <argument pos:start="857:35" pos:end="857:36"><expr pos:start="857:35" pos:end="857:36"><name pos:start="857:35" pos:end="857:36">rt</name></expr></argument>, <argument pos:start="857:39" pos:end="857:40"><expr pos:start="857:39" pos:end="857:40"><name pos:start="857:39" pos:end="857:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="859:17" pos:end="862:0">break;</break>

<cpp:if pos:start="861:1" pos:end="861:53">#<cpp:directive pos:start="861:2" pos:end="861:3">if</cpp:directive> <expr pos:start="861:5" pos:end="861:53"><call pos:start="861:5" pos:end="861:27"><name pos:start="861:5" pos:end="861:11">defined</name><argument_list pos:start="861:12" pos:end="861:27">(<argument pos:start="861:13" pos:end="861:26"><expr pos:start="861:13" pos:end="861:26"><name pos:start="861:13" pos:end="861:26">TARGET_MIPSN32</name></expr></argument>)</argument_list></call> <operator pos:start="861:29" pos:end="861:30">||</operator> <call pos:start="861:32" pos:end="861:53"><name pos:start="861:32" pos:end="861:38">defined</name><argument_list pos:start="861:39" pos:end="861:53">(<argument pos:start="861:40" pos:end="861:52"><expr pos:start="861:40" pos:end="861:52"><name pos:start="861:40" pos:end="861:52">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <case pos:start="863:13" pos:end="863:27">case <expr pos:start="863:18" pos:end="863:26"><name pos:start="863:18" pos:end="863:26">OPC_DMFC1</name></expr>:</case>

            <case pos:start="865:13" pos:end="865:27">case <expr pos:start="865:18" pos:end="865:26"><name pos:start="865:18" pos:end="865:26">OPC_DMTC1</name></expr>:</case>

                <expr_stmt pos:start="867:17" pos:end="867:48"><expr pos:start="867:17" pos:end="867:47"><call pos:start="867:17" pos:end="867:47"><name pos:start="867:17" pos:end="867:26">check_insn</name><argument_list pos:start="867:27" pos:end="867:47">(<argument pos:start="867:28" pos:end="867:30"><expr pos:start="867:28" pos:end="867:30"><name pos:start="867:28" pos:end="867:30">env</name></expr></argument>, <argument pos:start="867:33" pos:end="867:35"><expr pos:start="867:33" pos:end="867:35"><name pos:start="867:33" pos:end="867:35">ctx</name></expr></argument>, <argument pos:start="867:38" pos:end="867:46"><expr pos:start="867:38" pos:end="867:46"><name pos:start="867:38" pos:end="867:46">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="869:17" pos:end="869:42"><expr pos:start="869:17" pos:end="869:41"><call pos:start="869:17" pos:end="869:41"><name pos:start="869:17" pos:end="869:23">gen_cp1</name><argument_list pos:start="869:24" pos:end="869:41">(<argument pos:start="869:25" pos:end="869:27"><expr pos:start="869:25" pos:end="869:27"><name pos:start="869:25" pos:end="869:27">ctx</name></expr></argument>, <argument pos:start="869:30" pos:end="869:32"><expr pos:start="869:30" pos:end="869:32"><name pos:start="869:30" pos:end="869:32">op1</name></expr></argument>, <argument pos:start="869:35" pos:end="869:36"><expr pos:start="869:35" pos:end="869:36"><name pos:start="869:35" pos:end="869:36">rt</name></expr></argument>, <argument pos:start="869:39" pos:end="869:40"><expr pos:start="869:39" pos:end="869:40"><name pos:start="869:39" pos:end="869:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="871:17" pos:end="874:0">break;</break>

<cpp:endif pos:start="873:1" pos:end="873:6">#<cpp:directive pos:start="873:2" pos:end="873:6">endif</cpp:directive></cpp:endif>

            <case pos:start="875:13" pos:end="875:29">case <expr pos:start="875:18" pos:end="875:28"><name pos:start="875:18" pos:end="875:28">OPC_BC1ANY2</name></expr>:</case>

            <case pos:start="877:13" pos:end="877:29">case <expr pos:start="877:18" pos:end="877:28"><name pos:start="877:18" pos:end="877:28">OPC_BC1ANY4</name></expr>:</case>

                <expr_stmt pos:start="879:17" pos:end="879:39"><expr pos:start="879:17" pos:end="879:38"><call pos:start="879:17" pos:end="879:38"><name pos:start="879:17" pos:end="879:28">check_cp1_3d</name><argument_list pos:start="879:29" pos:end="879:38">(<argument pos:start="879:30" pos:end="879:32"><expr pos:start="879:30" pos:end="879:32"><name pos:start="879:30" pos:end="879:32">env</name></expr></argument>, <argument pos:start="879:35" pos:end="879:37"><expr pos:start="879:35" pos:end="879:37"><name pos:start="879:35" pos:end="879:37">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="881:17" pos:end="881:34">/* fall through */</comment>

            <case pos:start="883:13" pos:end="883:25">case <expr pos:start="883:18" pos:end="883:24"><name pos:start="883:18" pos:end="883:24">OPC_BC1</name></expr>:</case>

                <expr_stmt pos:start="885:17" pos:end="887:63"><expr pos:start="885:17" pos:end="887:62"><call pos:start="885:17" pos:end="887:62"><name pos:start="885:17" pos:end="885:35">gen_compute_branch1</name><argument_list pos:start="885:36" pos:end="887:62">(<argument pos:start="885:37" pos:end="885:39"><expr pos:start="885:37" pos:end="885:39"><name pos:start="885:37" pos:end="885:39">env</name></expr></argument>, <argument pos:start="885:42" pos:end="885:44"><expr pos:start="885:42" pos:end="885:44"><name pos:start="885:42" pos:end="885:44">ctx</name></expr></argument>, <argument pos:start="885:47" pos:end="885:67"><expr pos:start="885:47" pos:end="885:67"><call pos:start="885:47" pos:end="885:67"><name pos:start="885:47" pos:end="885:54">MASK_BC1</name><argument_list pos:start="885:55" pos:end="885:67">(<argument pos:start="885:56" pos:end="885:66"><expr pos:start="885:56" pos:end="885:66"><name pos:start="885:56" pos:end="885:66"><name pos:start="885:56" pos:end="885:58">ctx</name><operator pos:start="885:59" pos:end="885:60">-&gt;</operator><name pos:start="885:61" pos:end="885:66">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="887:37" pos:end="887:51"><expr pos:start="887:37" pos:end="887:51"><operator pos:start="887:37" pos:end="887:37">(</operator><name pos:start="887:38" pos:end="887:39">rt</name> <operator pos:start="887:41" pos:end="887:42">&gt;&gt;</operator> <literal type="number" pos:start="887:44" pos:end="887:44">2</literal><operator pos:start="887:45" pos:end="887:45">)</operator> <operator pos:start="887:47" pos:end="887:47">&amp;</operator> <literal type="number" pos:start="887:49" pos:end="887:51">0x7</literal></expr></argument>, <argument pos:start="887:54" pos:end="887:61"><expr pos:start="887:54" pos:end="887:61"><name pos:start="887:54" pos:end="887:56">imm</name> <operator pos:start="887:58" pos:end="887:59">&lt;&lt;</operator> <literal type="number" pos:start="887:61" pos:end="887:61">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="889:17" pos:end="889:23">return;</return>

            <case pos:start="891:13" pos:end="891:27">case <expr pos:start="891:18" pos:end="891:26"><name pos:start="891:18" pos:end="891:26">OPC_S_FMT</name></expr>:</case>

            <case pos:start="893:13" pos:end="893:27">case <expr pos:start="893:18" pos:end="893:26"><name pos:start="893:18" pos:end="893:26">OPC_D_FMT</name></expr>:</case>

            <case pos:start="895:13" pos:end="895:27">case <expr pos:start="895:18" pos:end="895:26"><name pos:start="895:18" pos:end="895:26">OPC_W_FMT</name></expr>:</case>

            <case pos:start="897:13" pos:end="897:27">case <expr pos:start="897:18" pos:end="897:26"><name pos:start="897:18" pos:end="897:26">OPC_L_FMT</name></expr>:</case>

            <case pos:start="899:13" pos:end="899:28">case <expr pos:start="899:18" pos:end="899:27"><name pos:start="899:18" pos:end="899:27">OPC_PS_FMT</name></expr>:</case>

                <expr_stmt pos:start="901:17" pos:end="903:45"><expr pos:start="901:17" pos:end="903:44"><call pos:start="901:17" pos:end="903:44"><name pos:start="901:17" pos:end="901:26">gen_farith</name><argument_list pos:start="901:27" pos:end="903:44">(<argument pos:start="901:28" pos:end="901:30"><expr pos:start="901:28" pos:end="901:30"><name pos:start="901:28" pos:end="901:30">ctx</name></expr></argument>, <argument pos:start="901:33" pos:end="901:58"><expr pos:start="901:33" pos:end="901:58"><call pos:start="901:33" pos:end="901:58"><name pos:start="901:33" pos:end="901:45">MASK_CP1_FUNC</name><argument_list pos:start="901:46" pos:end="901:58">(<argument pos:start="901:47" pos:end="901:57"><expr pos:start="901:47" pos:end="901:57"><name pos:start="901:47" pos:end="901:57"><name pos:start="901:47" pos:end="901:49">ctx</name><operator pos:start="901:50" pos:end="901:51">-&gt;</operator><name pos:start="901:52" pos:end="901:57">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="901:61" pos:end="901:62"><expr pos:start="901:61" pos:end="901:62"><name pos:start="901:61" pos:end="901:62">rt</name></expr></argument>, <argument pos:start="901:65" pos:end="901:66"><expr pos:start="901:65" pos:end="901:66"><name pos:start="901:65" pos:end="901:66">rd</name></expr></argument>, <argument pos:start="901:69" pos:end="901:70"><expr pos:start="901:69" pos:end="901:70"><name pos:start="901:69" pos:end="901:70">sa</name></expr></argument>,

                           <argument pos:start="903:28" pos:end="903:43"><expr pos:start="903:28" pos:end="903:43"><operator pos:start="903:28" pos:end="903:28">(</operator><name pos:start="903:29" pos:end="903:31">imm</name> <operator pos:start="903:33" pos:end="903:34">&gt;&gt;</operator> <literal type="number" pos:start="903:36" pos:end="903:36">8</literal><operator pos:start="903:37" pos:end="903:37">)</operator> <operator pos:start="903:39" pos:end="903:39">&amp;</operator> <literal type="number" pos:start="903:41" pos:end="903:43">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="905:17" pos:end="905:22">break;</break>

            <default pos:start="907:13" pos:end="907:20">default:</default>

                <expr_stmt pos:start="909:17" pos:end="909:34"><expr pos:start="909:17" pos:end="909:33"><call pos:start="909:17" pos:end="909:33"><name pos:start="909:17" pos:end="909:26">MIPS_INVAL</name><argument_list pos:start="909:27" pos:end="909:33">(<argument pos:start="909:28" pos:end="909:32"><expr pos:start="909:28" pos:end="909:32"><literal type="string" pos:start="909:28" pos:end="909:32">"cp1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="911:17" pos:end="911:50"><expr pos:start="911:17" pos:end="911:49"><call pos:start="911:17" pos:end="911:49"><name pos:start="911:17" pos:end="911:34">generate_exception</name> <argument_list pos:start="911:36" pos:end="911:49">(<argument pos:start="911:37" pos:end="911:39"><expr pos:start="911:37" pos:end="911:39"><name pos:start="911:37" pos:end="911:39">ctx</name></expr></argument>, <argument pos:start="911:42" pos:end="911:48"><expr pos:start="911:42" pos:end="911:48"><name pos:start="911:42" pos:end="911:48">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="913:17" pos:end="913:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="917:11" pos:end="921:9">else <block pos:start="917:16" pos:end="921:9">{<block_content pos:start="919:13" pos:end="919:53">

            <expr_stmt pos:start="919:13" pos:end="919:53"><expr pos:start="919:13" pos:end="919:52"><call pos:start="919:13" pos:end="919:52"><name pos:start="919:13" pos:end="919:34">generate_exception_err</name><argument_list pos:start="919:35" pos:end="919:52">(<argument pos:start="919:36" pos:end="919:38"><expr pos:start="919:36" pos:end="919:38"><name pos:start="919:36" pos:end="919:38">ctx</name></expr></argument>, <argument pos:start="919:41" pos:end="919:48"><expr pos:start="919:41" pos:end="919:48"><name pos:start="919:41" pos:end="919:48">EXCP_CpU</name></expr></argument>, <argument pos:start="919:51" pos:end="919:51"><expr pos:start="919:51" pos:end="919:51"><literal type="number" pos:start="919:51" pos:end="919:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="923:9" pos:end="923:14">break;</break>



    <comment type="block" pos:start="927:5" pos:end="927:16">/* COP2.  */</comment>

    <case pos:start="929:5" pos:end="929:18">case <expr pos:start="929:10" pos:end="929:17"><name pos:start="929:10" pos:end="929:17">OPC_LWC2</name></expr>:</case>

    <case pos:start="931:5" pos:end="931:18">case <expr pos:start="931:10" pos:end="931:17"><name pos:start="931:10" pos:end="931:17">OPC_LDC2</name></expr>:</case>

    <case pos:start="933:5" pos:end="933:18">case <expr pos:start="933:10" pos:end="933:17"><name pos:start="933:10" pos:end="933:17">OPC_SWC2</name></expr>:</case>

    <case pos:start="935:5" pos:end="935:18">case <expr pos:start="935:10" pos:end="935:17"><name pos:start="935:10" pos:end="935:17">OPC_SDC2</name></expr>:</case>

    <case pos:start="937:5" pos:end="937:17">case <expr pos:start="937:10" pos:end="937:16"><name pos:start="937:10" pos:end="937:16">OPC_CP2</name></expr>:</case>

        <comment type="block" pos:start="939:9" pos:end="939:36">/* COP2: Not implemented. */</comment>

        <expr_stmt pos:start="941:9" pos:end="941:49"><expr pos:start="941:9" pos:end="941:48"><call pos:start="941:9" pos:end="941:48"><name pos:start="941:9" pos:end="941:30">generate_exception_err</name><argument_list pos:start="941:31" pos:end="941:48">(<argument pos:start="941:32" pos:end="941:34"><expr pos:start="941:32" pos:end="941:34"><name pos:start="941:32" pos:end="941:34">ctx</name></expr></argument>, <argument pos:start="941:37" pos:end="941:44"><expr pos:start="941:37" pos:end="941:44"><name pos:start="941:37" pos:end="941:44">EXCP_CpU</name></expr></argument>, <argument pos:start="941:47" pos:end="941:47"><expr pos:start="941:47" pos:end="941:47"><literal type="number" pos:start="941:47" pos:end="941:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="943:9" pos:end="943:14">break;</break>



    <case pos:start="947:5" pos:end="947:17">case <expr pos:start="947:10" pos:end="947:16"><name pos:start="947:10" pos:end="947:16">OPC_CP3</name></expr>:</case>

        <if_stmt pos:start="949:9" pos:end="1025:9"><if pos:start="949:9" pos:end="1021:9">if <condition pos:start="949:12" pos:end="949:47">(<expr pos:start="949:13" pos:end="949:46"><name pos:start="949:13" pos:end="949:28"><name pos:start="949:13" pos:end="949:15">env</name><operator pos:start="949:16" pos:end="949:17">-&gt;</operator><name pos:start="949:18" pos:end="949:28">CP0_Config1</name></name> <operator pos:start="949:30" pos:end="949:30">&amp;</operator> <operator pos:start="949:32" pos:end="949:32">(</operator><literal type="number" pos:start="949:33" pos:end="949:33">1</literal> <operator pos:start="949:35" pos:end="949:36">&lt;&lt;</operator> <name pos:start="949:38" pos:end="949:45">CP0C1_FP</name><operator pos:start="949:46" pos:end="949:46">)</operator></expr>)</condition> <block pos:start="949:49" pos:end="1021:9">{<block_content pos:start="951:13" pos:end="1019:13">

            <expr_stmt pos:start="951:13" pos:end="951:35"><expr pos:start="951:13" pos:end="951:34"><call pos:start="951:13" pos:end="951:34"><name pos:start="951:13" pos:end="951:26">save_cpu_state</name><argument_list pos:start="951:27" pos:end="951:34">(<argument pos:start="951:28" pos:end="951:30"><expr pos:start="951:28" pos:end="951:30"><name pos:start="951:28" pos:end="951:30">ctx</name></expr></argument>, <argument pos:start="951:33" pos:end="951:33"><expr pos:start="951:33" pos:end="951:33"><literal type="number" pos:start="951:33" pos:end="951:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="953:13" pos:end="953:35"><expr pos:start="953:13" pos:end="953:34"><call pos:start="953:13" pos:end="953:34"><name pos:start="953:13" pos:end="953:29">check_cp1_enabled</name><argument_list pos:start="953:30" pos:end="953:34">(<argument pos:start="953:31" pos:end="953:33"><expr pos:start="953:31" pos:end="953:33"><name pos:start="953:31" pos:end="953:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="955:13" pos:end="955:40"><expr pos:start="955:13" pos:end="955:39"><name pos:start="955:13" pos:end="955:15">op1</name> <operator pos:start="955:17" pos:end="955:17">=</operator> <call pos:start="955:19" pos:end="955:39"><name pos:start="955:19" pos:end="955:26">MASK_CP3</name><argument_list pos:start="955:27" pos:end="955:39">(<argument pos:start="955:28" pos:end="955:38"><expr pos:start="955:28" pos:end="955:38"><name pos:start="955:28" pos:end="955:38"><name pos:start="955:28" pos:end="955:30">ctx</name><operator pos:start="955:31" pos:end="955:32">-&gt;</operator><name pos:start="955:33" pos:end="955:38">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="957:13" pos:end="1019:13">switch <condition pos:start="957:20" pos:end="957:24">(<expr pos:start="957:21" pos:end="957:23"><name pos:start="957:21" pos:end="957:23">op1</name></expr>)</condition> <block pos:start="957:26" pos:end="1019:13">{<block_content pos:start="959:13" pos:end="1017:22">

            <case pos:start="959:13" pos:end="959:27">case <expr pos:start="959:18" pos:end="959:26"><name pos:start="959:18" pos:end="959:26">OPC_LWXC1</name></expr>:</case>

            <case pos:start="961:13" pos:end="961:27">case <expr pos:start="961:18" pos:end="961:26"><name pos:start="961:18" pos:end="961:26">OPC_LDXC1</name></expr>:</case>

            <case pos:start="963:13" pos:end="963:27">case <expr pos:start="963:18" pos:end="963:26"><name pos:start="963:18" pos:end="963:26">OPC_LUXC1</name></expr>:</case>

            <case pos:start="965:13" pos:end="965:27">case <expr pos:start="965:18" pos:end="965:26"><name pos:start="965:18" pos:end="965:26">OPC_SWXC1</name></expr>:</case>

            <case pos:start="967:13" pos:end="967:27">case <expr pos:start="967:18" pos:end="967:26"><name pos:start="967:18" pos:end="967:26">OPC_SDXC1</name></expr>:</case>

            <case pos:start="969:13" pos:end="969:27">case <expr pos:start="969:18" pos:end="969:26"><name pos:start="969:18" pos:end="969:26">OPC_SUXC1</name></expr>:</case>

                <expr_stmt pos:start="971:17" pos:end="971:56"><expr pos:start="971:17" pos:end="971:55"><call pos:start="971:17" pos:end="971:55"><name pos:start="971:17" pos:end="971:29">gen_flt3_ldst</name><argument_list pos:start="971:30" pos:end="971:55">(<argument pos:start="971:31" pos:end="971:33"><expr pos:start="971:31" pos:end="971:33"><name pos:start="971:31" pos:end="971:33">ctx</name></expr></argument>, <argument pos:start="971:36" pos:end="971:38"><expr pos:start="971:36" pos:end="971:38"><name pos:start="971:36" pos:end="971:38">op1</name></expr></argument>, <argument pos:start="971:41" pos:end="971:42"><expr pos:start="971:41" pos:end="971:42"><name pos:start="971:41" pos:end="971:42">sa</name></expr></argument>, <argument pos:start="971:45" pos:end="971:46"><expr pos:start="971:45" pos:end="971:46"><name pos:start="971:45" pos:end="971:46">rd</name></expr></argument>, <argument pos:start="971:49" pos:end="971:50"><expr pos:start="971:49" pos:end="971:50"><name pos:start="971:49" pos:end="971:50">rs</name></expr></argument>, <argument pos:start="971:53" pos:end="971:54"><expr pos:start="971:53" pos:end="971:54"><name pos:start="971:53" pos:end="971:54">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="973:17" pos:end="973:22">break;</break>

            <case pos:start="975:13" pos:end="975:27">case <expr pos:start="975:18" pos:end="975:26"><name pos:start="975:18" pos:end="975:26">OPC_PREFX</name></expr>:</case>

                <comment type="block" pos:start="977:17" pos:end="977:35">/* Treat as NOP. */</comment>

                <break pos:start="979:17" pos:end="979:22">break;</break>

            <case pos:start="981:13" pos:end="981:29">case <expr pos:start="981:18" pos:end="981:28"><name pos:start="981:18" pos:end="981:28">OPC_ALNV_PS</name></expr>:</case>

            <case pos:start="983:13" pos:end="983:28">case <expr pos:start="983:18" pos:end="983:27"><name pos:start="983:18" pos:end="983:27">OPC_MADD_S</name></expr>:</case>

            <case pos:start="985:13" pos:end="985:28">case <expr pos:start="985:18" pos:end="985:27"><name pos:start="985:18" pos:end="985:27">OPC_MADD_D</name></expr>:</case>

            <case pos:start="987:13" pos:end="987:29">case <expr pos:start="987:18" pos:end="987:28"><name pos:start="987:18" pos:end="987:28">OPC_MADD_PS</name></expr>:</case>

            <case pos:start="989:13" pos:end="989:28">case <expr pos:start="989:18" pos:end="989:27"><name pos:start="989:18" pos:end="989:27">OPC_MSUB_S</name></expr>:</case>

            <case pos:start="991:13" pos:end="991:28">case <expr pos:start="991:18" pos:end="991:27"><name pos:start="991:18" pos:end="991:27">OPC_MSUB_D</name></expr>:</case>

            <case pos:start="993:13" pos:end="993:29">case <expr pos:start="993:18" pos:end="993:28"><name pos:start="993:18" pos:end="993:28">OPC_MSUB_PS</name></expr>:</case>

            <case pos:start="995:13" pos:end="995:29">case <expr pos:start="995:18" pos:end="995:28"><name pos:start="995:18" pos:end="995:28">OPC_NMADD_S</name></expr>:</case>

            <case pos:start="997:13" pos:end="997:29">case <expr pos:start="997:18" pos:end="997:28"><name pos:start="997:18" pos:end="997:28">OPC_NMADD_D</name></expr>:</case>

            <case pos:start="999:13" pos:end="999:30">case <expr pos:start="999:18" pos:end="999:29"><name pos:start="999:18" pos:end="999:29">OPC_NMADD_PS</name></expr>:</case>

            <case pos:start="1001:13" pos:end="1001:29">case <expr pos:start="1001:18" pos:end="1001:28"><name pos:start="1001:18" pos:end="1001:28">OPC_NMSUB_S</name></expr>:</case>

            <case pos:start="1003:13" pos:end="1003:29">case <expr pos:start="1003:18" pos:end="1003:28"><name pos:start="1003:18" pos:end="1003:28">OPC_NMSUB_D</name></expr>:</case>

            <case pos:start="1005:13" pos:end="1005:30">case <expr pos:start="1005:18" pos:end="1005:29"><name pos:start="1005:18" pos:end="1005:29">OPC_NMSUB_PS</name></expr>:</case>

                <expr_stmt pos:start="1007:17" pos:end="1007:57"><expr pos:start="1007:17" pos:end="1007:56"><call pos:start="1007:17" pos:end="1007:56"><name pos:start="1007:17" pos:end="1007:30">gen_flt3_arith</name><argument_list pos:start="1007:31" pos:end="1007:56">(<argument pos:start="1007:32" pos:end="1007:34"><expr pos:start="1007:32" pos:end="1007:34"><name pos:start="1007:32" pos:end="1007:34">ctx</name></expr></argument>, <argument pos:start="1007:37" pos:end="1007:39"><expr pos:start="1007:37" pos:end="1007:39"><name pos:start="1007:37" pos:end="1007:39">op1</name></expr></argument>, <argument pos:start="1007:42" pos:end="1007:43"><expr pos:start="1007:42" pos:end="1007:43"><name pos:start="1007:42" pos:end="1007:43">sa</name></expr></argument>, <argument pos:start="1007:46" pos:end="1007:47"><expr pos:start="1007:46" pos:end="1007:47"><name pos:start="1007:46" pos:end="1007:47">rs</name></expr></argument>, <argument pos:start="1007:50" pos:end="1007:51"><expr pos:start="1007:50" pos:end="1007:51"><name pos:start="1007:50" pos:end="1007:51">rd</name></expr></argument>, <argument pos:start="1007:54" pos:end="1007:55"><expr pos:start="1007:54" pos:end="1007:55"><name pos:start="1007:54" pos:end="1007:55">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1009:17" pos:end="1009:22">break;</break>

            <default pos:start="1011:13" pos:end="1011:20">default:</default>

                <expr_stmt pos:start="1013:17" pos:end="1013:34"><expr pos:start="1013:17" pos:end="1013:33"><call pos:start="1013:17" pos:end="1013:33"><name pos:start="1013:17" pos:end="1013:26">MIPS_INVAL</name><argument_list pos:start="1013:27" pos:end="1013:33">(<argument pos:start="1013:28" pos:end="1013:32"><expr pos:start="1013:28" pos:end="1013:32"><literal type="string" pos:start="1013:28" pos:end="1013:32">"cp3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1015:17" pos:end="1015:50"><expr pos:start="1015:17" pos:end="1015:49"><call pos:start="1015:17" pos:end="1015:49"><name pos:start="1015:17" pos:end="1015:34">generate_exception</name> <argument_list pos:start="1015:36" pos:end="1015:49">(<argument pos:start="1015:37" pos:end="1015:39"><expr pos:start="1015:37" pos:end="1015:39"><name pos:start="1015:37" pos:end="1015:39">ctx</name></expr></argument>, <argument pos:start="1015:42" pos:end="1015:48"><expr pos:start="1015:42" pos:end="1015:48"><name pos:start="1015:42" pos:end="1015:48">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1017:17" pos:end="1017:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="1021:11" pos:end="1025:9">else <block pos:start="1021:16" pos:end="1025:9">{<block_content pos:start="1023:13" pos:end="1023:53">

            <expr_stmt pos:start="1023:13" pos:end="1023:53"><expr pos:start="1023:13" pos:end="1023:52"><call pos:start="1023:13" pos:end="1023:52"><name pos:start="1023:13" pos:end="1023:34">generate_exception_err</name><argument_list pos:start="1023:35" pos:end="1023:52">(<argument pos:start="1023:36" pos:end="1023:38"><expr pos:start="1023:36" pos:end="1023:38"><name pos:start="1023:36" pos:end="1023:38">ctx</name></expr></argument>, <argument pos:start="1023:41" pos:end="1023:48"><expr pos:start="1023:41" pos:end="1023:48"><name pos:start="1023:41" pos:end="1023:48">EXCP_CpU</name></expr></argument>, <argument pos:start="1023:51" pos:end="1023:51"><expr pos:start="1023:51" pos:end="1023:51"><literal type="number" pos:start="1023:51" pos:end="1023:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1027:9" pos:end="1032:0">break;</break>



<cpp:if pos:start="1031:1" pos:end="1031:53">#<cpp:directive pos:start="1031:2" pos:end="1031:3">if</cpp:directive> <expr pos:start="1031:5" pos:end="1031:53"><call pos:start="1031:5" pos:end="1031:27"><name pos:start="1031:5" pos:end="1031:11">defined</name><argument_list pos:start="1031:12" pos:end="1031:27">(<argument pos:start="1031:13" pos:end="1031:26"><expr pos:start="1031:13" pos:end="1031:26"><name pos:start="1031:13" pos:end="1031:26">TARGET_MIPSN32</name></expr></argument>)</argument_list></call> <operator pos:start="1031:29" pos:end="1031:30">||</operator> <call pos:start="1031:32" pos:end="1031:53"><name pos:start="1031:32" pos:end="1031:38">defined</name><argument_list pos:start="1031:39" pos:end="1031:53">(<argument pos:start="1031:40" pos:end="1031:52"><expr pos:start="1031:40" pos:end="1031:52"><name pos:start="1031:40" pos:end="1031:52">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="1033:5" pos:end="1033:24">/* MIPS64 opcodes */</comment>

    <case pos:start="1035:5" pos:end="1035:17">case <expr pos:start="1035:10" pos:end="1035:16"><name pos:start="1035:10" pos:end="1035:16">OPC_LWU</name></expr>:</case>

    <case pos:start="1037:5" pos:end="1037:29">case <expr pos:start="1037:10" pos:end="1037:28"><name pos:start="1037:10" pos:end="1037:16">OPC_LDL</name> <operator pos:start="1037:18" pos:end="1037:20">...</operator> <name pos:start="1037:22" pos:end="1037:28">OPC_LDR</name></expr>:</case>

    <case pos:start="1039:5" pos:end="1039:29">case <expr pos:start="1039:10" pos:end="1039:28"><name pos:start="1039:10" pos:end="1039:16">OPC_SDL</name> <operator pos:start="1039:18" pos:end="1039:20">...</operator> <name pos:start="1039:22" pos:end="1039:28">OPC_SDR</name></expr>:</case>

    <case pos:start="1041:5" pos:end="1041:17">case <expr pos:start="1041:10" pos:end="1041:16"><name pos:start="1041:10" pos:end="1041:16">OPC_LLD</name></expr>:</case>

    <case pos:start="1043:5" pos:end="1043:16">case <expr pos:start="1043:10" pos:end="1043:15"><name pos:start="1043:10" pos:end="1043:15">OPC_LD</name></expr>:</case>

    <case pos:start="1045:5" pos:end="1045:17">case <expr pos:start="1045:10" pos:end="1045:16"><name pos:start="1045:10" pos:end="1045:16">OPC_SCD</name></expr>:</case>

    <case pos:start="1047:5" pos:end="1047:16">case <expr pos:start="1047:10" pos:end="1047:15"><name pos:start="1047:10" pos:end="1047:15">OPC_SD</name></expr>:</case>

        <expr_stmt pos:start="1049:9" pos:end="1049:40"><expr pos:start="1049:9" pos:end="1049:39"><call pos:start="1049:9" pos:end="1049:39"><name pos:start="1049:9" pos:end="1049:18">check_insn</name><argument_list pos:start="1049:19" pos:end="1049:39">(<argument pos:start="1049:20" pos:end="1049:22"><expr pos:start="1049:20" pos:end="1049:22"><name pos:start="1049:20" pos:end="1049:22">env</name></expr></argument>, <argument pos:start="1049:25" pos:end="1049:27"><expr pos:start="1049:25" pos:end="1049:27"><name pos:start="1049:25" pos:end="1049:27">ctx</name></expr></argument>, <argument pos:start="1049:30" pos:end="1049:38"><expr pos:start="1049:30" pos:end="1049:38"><name pos:start="1049:30" pos:end="1049:38">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1051:9" pos:end="1051:27"><expr pos:start="1051:9" pos:end="1051:26"><call pos:start="1051:9" pos:end="1051:26"><name pos:start="1051:9" pos:end="1051:21">check_mips_64</name><argument_list pos:start="1051:22" pos:end="1051:26">(<argument pos:start="1051:23" pos:end="1051:25"><expr pos:start="1051:23" pos:end="1051:25"><name pos:start="1051:23" pos:end="1051:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1053:9" pos:end="1053:39"><expr pos:start="1053:9" pos:end="1053:38"><call pos:start="1053:9" pos:end="1053:38"><name pos:start="1053:9" pos:end="1053:16">gen_ldst</name><argument_list pos:start="1053:17" pos:end="1053:38">(<argument pos:start="1053:18" pos:end="1053:20"><expr pos:start="1053:18" pos:end="1053:20"><name pos:start="1053:18" pos:end="1053:20">ctx</name></expr></argument>, <argument pos:start="1053:23" pos:end="1053:24"><expr pos:start="1053:23" pos:end="1053:24"><name pos:start="1053:23" pos:end="1053:24">op</name></expr></argument>, <argument pos:start="1053:27" pos:end="1053:28"><expr pos:start="1053:27" pos:end="1053:28"><name pos:start="1053:27" pos:end="1053:28">rt</name></expr></argument>, <argument pos:start="1053:31" pos:end="1053:32"><expr pos:start="1053:31" pos:end="1053:32"><name pos:start="1053:31" pos:end="1053:32">rs</name></expr></argument>, <argument pos:start="1053:35" pos:end="1053:37"><expr pos:start="1053:35" pos:end="1053:37"><name pos:start="1053:35" pos:end="1053:37">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1055:9" pos:end="1055:14">break;</break>

    <case pos:start="1057:5" pos:end="1057:34">case <expr pos:start="1057:10" pos:end="1057:33"><name pos:start="1057:10" pos:end="1057:18">OPC_DADDI</name> <operator pos:start="1057:20" pos:end="1057:22">...</operator> <name pos:start="1057:24" pos:end="1057:33">OPC_DADDIU</name></expr>:</case>

        <expr_stmt pos:start="1059:9" pos:end="1059:40"><expr pos:start="1059:9" pos:end="1059:39"><call pos:start="1059:9" pos:end="1059:39"><name pos:start="1059:9" pos:end="1059:18">check_insn</name><argument_list pos:start="1059:19" pos:end="1059:39">(<argument pos:start="1059:20" pos:end="1059:22"><expr pos:start="1059:20" pos:end="1059:22"><name pos:start="1059:20" pos:end="1059:22">env</name></expr></argument>, <argument pos:start="1059:25" pos:end="1059:27"><expr pos:start="1059:25" pos:end="1059:27"><name pos:start="1059:25" pos:end="1059:27">ctx</name></expr></argument>, <argument pos:start="1059:30" pos:end="1059:38"><expr pos:start="1059:30" pos:end="1059:38"><name pos:start="1059:30" pos:end="1059:38">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1061:9" pos:end="1061:27"><expr pos:start="1061:9" pos:end="1061:26"><call pos:start="1061:9" pos:end="1061:26"><name pos:start="1061:9" pos:end="1061:21">check_mips_64</name><argument_list pos:start="1061:22" pos:end="1061:26">(<argument pos:start="1061:23" pos:end="1061:25"><expr pos:start="1061:23" pos:end="1061:25"><name pos:start="1061:23" pos:end="1061:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1063:9" pos:end="1063:49"><expr pos:start="1063:9" pos:end="1063:48"><call pos:start="1063:9" pos:end="1063:48"><name pos:start="1063:9" pos:end="1063:21">gen_arith_imm</name><argument_list pos:start="1063:22" pos:end="1063:48">(<argument pos:start="1063:23" pos:end="1063:25"><expr pos:start="1063:23" pos:end="1063:25"><name pos:start="1063:23" pos:end="1063:25">env</name></expr></argument>, <argument pos:start="1063:28" pos:end="1063:30"><expr pos:start="1063:28" pos:end="1063:30"><name pos:start="1063:28" pos:end="1063:30">ctx</name></expr></argument>, <argument pos:start="1063:33" pos:end="1063:34"><expr pos:start="1063:33" pos:end="1063:34"><name pos:start="1063:33" pos:end="1063:34">op</name></expr></argument>, <argument pos:start="1063:37" pos:end="1063:38"><expr pos:start="1063:37" pos:end="1063:38"><name pos:start="1063:37" pos:end="1063:38">rt</name></expr></argument>, <argument pos:start="1063:41" pos:end="1063:42"><expr pos:start="1063:41" pos:end="1063:42"><name pos:start="1063:41" pos:end="1063:42">rs</name></expr></argument>, <argument pos:start="1063:45" pos:end="1063:47"><expr pos:start="1063:45" pos:end="1063:47"><name pos:start="1063:45" pos:end="1063:47">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1065:9" pos:end="1068:0">break;</break>

<cpp:endif pos:start="1067:1" pos:end="1067:6">#<cpp:directive pos:start="1067:2" pos:end="1067:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1069:5" pos:end="1069:18">case <expr pos:start="1069:10" pos:end="1069:17"><name pos:start="1069:10" pos:end="1069:17">OPC_JALX</name></expr>:</case>

        <expr_stmt pos:start="1071:9" pos:end="1071:41"><expr pos:start="1071:9" pos:end="1071:40"><call pos:start="1071:9" pos:end="1071:40"><name pos:start="1071:9" pos:end="1071:18">check_insn</name><argument_list pos:start="1071:19" pos:end="1071:40">(<argument pos:start="1071:20" pos:end="1071:22"><expr pos:start="1071:20" pos:end="1071:22"><name pos:start="1071:20" pos:end="1071:22">env</name></expr></argument>, <argument pos:start="1071:25" pos:end="1071:27"><expr pos:start="1071:25" pos:end="1071:27"><name pos:start="1071:25" pos:end="1071:27">ctx</name></expr></argument>, <argument pos:start="1071:30" pos:end="1071:39"><expr pos:start="1071:30" pos:end="1071:39"><name pos:start="1071:30" pos:end="1071:39">ASE_MIPS16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1073:9" pos:end="1073:38">/* MIPS16: Not implemented. */</comment>

    <case pos:start="1075:5" pos:end="1075:18">case <expr pos:start="1075:10" pos:end="1075:17"><name pos:start="1075:10" pos:end="1075:17">OPC_MDMX</name></expr>:</case>

        <expr_stmt pos:start="1077:9" pos:end="1077:39"><expr pos:start="1077:9" pos:end="1077:38"><call pos:start="1077:9" pos:end="1077:38"><name pos:start="1077:9" pos:end="1077:18">check_insn</name><argument_list pos:start="1077:19" pos:end="1077:38">(<argument pos:start="1077:20" pos:end="1077:22"><expr pos:start="1077:20" pos:end="1077:22"><name pos:start="1077:20" pos:end="1077:22">env</name></expr></argument>, <argument pos:start="1077:25" pos:end="1077:27"><expr pos:start="1077:25" pos:end="1077:27"><name pos:start="1077:25" pos:end="1077:27">ctx</name></expr></argument>, <argument pos:start="1077:30" pos:end="1077:37"><expr pos:start="1077:30" pos:end="1077:37"><name pos:start="1077:30" pos:end="1077:37">ASE_MDMX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1079:9" pos:end="1079:36">/* MDMX: Not implemented. */</comment>

    <default pos:start="1081:5" pos:end="1081:12">default:</default>            <comment type="block" pos:start="1081:25" pos:end="1081:37">/* Invalid */</comment>

        <expr_stmt pos:start="1083:9" pos:end="1083:35"><expr pos:start="1083:9" pos:end="1083:34"><call pos:start="1083:9" pos:end="1083:34"><name pos:start="1083:9" pos:end="1083:18">MIPS_INVAL</name><argument_list pos:start="1083:19" pos:end="1083:34">(<argument pos:start="1083:20" pos:end="1083:33"><expr pos:start="1083:20" pos:end="1083:33"><literal type="string" pos:start="1083:20" pos:end="1083:33">"major opcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1085:9" pos:end="1085:41"><expr pos:start="1085:9" pos:end="1085:40"><call pos:start="1085:9" pos:end="1085:40"><name pos:start="1085:9" pos:end="1085:26">generate_exception</name><argument_list pos:start="1085:27" pos:end="1085:40">(<argument pos:start="1085:28" pos:end="1085:30"><expr pos:start="1085:28" pos:end="1085:30"><name pos:start="1085:28" pos:end="1085:30">ctx</name></expr></argument>, <argument pos:start="1085:33" pos:end="1085:39"><expr pos:start="1085:33" pos:end="1085:39"><name pos:start="1085:33" pos:end="1085:39">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1087:9" pos:end="1087:14">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="1091:5" pos:end="1171:5"><if pos:start="1091:5" pos:end="1171:5">if <condition pos:start="1091:8" pos:end="1091:39">(<expr pos:start="1091:9" pos:end="1091:38"><name pos:start="1091:9" pos:end="1091:19"><name pos:start="1091:9" pos:end="1091:11">ctx</name><operator pos:start="1091:12" pos:end="1091:13">-&gt;</operator><name pos:start="1091:14" pos:end="1091:19">hflags</name></name> <operator pos:start="1091:21" pos:end="1091:21">&amp;</operator> <name pos:start="1091:23" pos:end="1091:38">MIPS_HFLAG_BMASK</name></expr>)</condition> <block pos:start="1091:41" pos:end="1171:5">{<block_content pos:start="1093:9" pos:end="1169:9">

        <decl_stmt pos:start="1093:9" pos:end="1093:52"><decl pos:start="1093:9" pos:end="1093:51"><type pos:start="1093:9" pos:end="1093:11"><name pos:start="1093:9" pos:end="1093:11">int</name></type> <name pos:start="1093:13" pos:end="1093:18">hflags</name> <init pos:start="1093:20" pos:end="1093:51">= <expr pos:start="1093:22" pos:end="1093:51"><name pos:start="1093:22" pos:end="1093:32"><name pos:start="1093:22" pos:end="1093:24">ctx</name><operator pos:start="1093:25" pos:end="1093:26">-&gt;</operator><name pos:start="1093:27" pos:end="1093:32">hflags</name></name> <operator pos:start="1093:34" pos:end="1093:34">&amp;</operator> <name pos:start="1093:36" pos:end="1093:51">MIPS_HFLAG_BMASK</name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="1095:9" pos:end="1095:33">/* Branches completion */</comment>

        <expr_stmt pos:start="1097:9" pos:end="1097:41"><expr pos:start="1097:9" pos:end="1097:40"><name pos:start="1097:9" pos:end="1097:19"><name pos:start="1097:9" pos:end="1097:11">ctx</name><operator pos:start="1097:12" pos:end="1097:13">-&gt;</operator><name pos:start="1097:14" pos:end="1097:19">hflags</name></name> <operator pos:start="1097:21" pos:end="1097:22">&amp;=</operator> <operator pos:start="1097:24" pos:end="1097:24">~</operator><name pos:start="1097:25" pos:end="1097:40">MIPS_HFLAG_BMASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1099:9" pos:end="1099:32"><expr pos:start="1099:9" pos:end="1099:31"><name pos:start="1099:9" pos:end="1099:19"><name pos:start="1099:9" pos:end="1099:11">ctx</name><operator pos:start="1099:12" pos:end="1099:13">-&gt;</operator><name pos:start="1099:14" pos:end="1099:19">bstate</name></name> <operator pos:start="1099:21" pos:end="1099:21">=</operator> <name pos:start="1099:23" pos:end="1099:31">BS_BRANCH</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1101:9" pos:end="1101:31"><expr pos:start="1101:9" pos:end="1101:30"><call pos:start="1101:9" pos:end="1101:30"><name pos:start="1101:9" pos:end="1101:22">save_cpu_state</name><argument_list pos:start="1101:23" pos:end="1101:30">(<argument pos:start="1101:24" pos:end="1101:26"><expr pos:start="1101:24" pos:end="1101:26"><name pos:start="1101:24" pos:end="1101:26">ctx</name></expr></argument>, <argument pos:start="1101:29" pos:end="1101:29"><expr pos:start="1101:29" pos:end="1101:29"><literal type="number" pos:start="1101:29" pos:end="1101:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="1103:9" pos:end="1169:9">switch <condition pos:start="1103:16" pos:end="1103:23">(<expr pos:start="1103:17" pos:end="1103:22"><name pos:start="1103:17" pos:end="1103:22">hflags</name></expr>)</condition> <block pos:start="1103:25" pos:end="1169:9">{<block_content pos:start="1105:9" pos:end="1167:18">

        <case pos:start="1105:9" pos:end="1105:26">case <expr pos:start="1105:14" pos:end="1105:25"><name pos:start="1105:14" pos:end="1105:25">MIPS_HFLAG_B</name></expr>:</case>

            <comment type="block" pos:start="1107:13" pos:end="1107:38">/* unconditional branch */</comment>

            <expr_stmt pos:start="1109:13" pos:end="1109:47"><expr pos:start="1109:13" pos:end="1109:46"><call pos:start="1109:13" pos:end="1109:46"><name pos:start="1109:13" pos:end="1109:22">MIPS_DEBUG</name><argument_list pos:start="1109:23" pos:end="1109:46">(<argument pos:start="1109:24" pos:end="1109:45"><expr pos:start="1109:24" pos:end="1109:45"><literal type="string" pos:start="1109:24" pos:end="1109:45">"unconditional branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1111:13" pos:end="1111:46"><expr pos:start="1111:13" pos:end="1111:45"><call pos:start="1111:13" pos:end="1111:45"><name pos:start="1111:13" pos:end="1111:23">gen_goto_tb</name><argument_list pos:start="1111:24" pos:end="1111:45">(<argument pos:start="1111:25" pos:end="1111:27"><expr pos:start="1111:25" pos:end="1111:27"><name pos:start="1111:25" pos:end="1111:27">ctx</name></expr></argument>, <argument pos:start="1111:30" pos:end="1111:30"><expr pos:start="1111:30" pos:end="1111:30"><literal type="number" pos:start="1111:30" pos:end="1111:30">0</literal></expr></argument>, <argument pos:start="1111:33" pos:end="1111:44"><expr pos:start="1111:33" pos:end="1111:44"><name pos:start="1111:33" pos:end="1111:44"><name pos:start="1111:33" pos:end="1111:35">ctx</name><operator pos:start="1111:36" pos:end="1111:37">-&gt;</operator><name pos:start="1111:38" pos:end="1111:44">btarget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1113:13" pos:end="1113:18">break;</break>

        <case pos:start="1115:9" pos:end="1115:27">case <expr pos:start="1115:14" pos:end="1115:26"><name pos:start="1115:14" pos:end="1115:26">MIPS_HFLAG_BL</name></expr>:</case>

            <comment type="block" pos:start="1117:13" pos:end="1117:36">/* blikely taken case */</comment>

            <expr_stmt pos:start="1119:13" pos:end="1119:47"><expr pos:start="1119:13" pos:end="1119:46"><call pos:start="1119:13" pos:end="1119:46"><name pos:start="1119:13" pos:end="1119:22">MIPS_DEBUG</name><argument_list pos:start="1119:23" pos:end="1119:46">(<argument pos:start="1119:24" pos:end="1119:45"><expr pos:start="1119:24" pos:end="1119:45"><literal type="string" pos:start="1119:24" pos:end="1119:45">"blikely branch taken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1121:13" pos:end="1121:46"><expr pos:start="1121:13" pos:end="1121:45"><call pos:start="1121:13" pos:end="1121:45"><name pos:start="1121:13" pos:end="1121:23">gen_goto_tb</name><argument_list pos:start="1121:24" pos:end="1121:45">(<argument pos:start="1121:25" pos:end="1121:27"><expr pos:start="1121:25" pos:end="1121:27"><name pos:start="1121:25" pos:end="1121:27">ctx</name></expr></argument>, <argument pos:start="1121:30" pos:end="1121:30"><expr pos:start="1121:30" pos:end="1121:30"><literal type="number" pos:start="1121:30" pos:end="1121:30">0</literal></expr></argument>, <argument pos:start="1121:33" pos:end="1121:44"><expr pos:start="1121:33" pos:end="1121:44"><name pos:start="1121:33" pos:end="1121:44"><name pos:start="1121:33" pos:end="1121:35">ctx</name><operator pos:start="1121:36" pos:end="1121:37">-&gt;</operator><name pos:start="1121:38" pos:end="1121:44">btarget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1123:13" pos:end="1123:18">break;</break>

        <case pos:start="1125:9" pos:end="1125:27">case <expr pos:start="1125:14" pos:end="1125:26"><name pos:start="1125:14" pos:end="1125:26">MIPS_HFLAG_BC</name></expr>:</case>

            <comment type="block" pos:start="1127:13" pos:end="1127:36">/* Conditional branch */</comment>

            <expr_stmt pos:start="1129:13" pos:end="1129:45"><expr pos:start="1129:13" pos:end="1129:44"><call pos:start="1129:13" pos:end="1129:44"><name pos:start="1129:13" pos:end="1129:22">MIPS_DEBUG</name><argument_list pos:start="1129:23" pos:end="1129:44">(<argument pos:start="1129:24" pos:end="1129:43"><expr pos:start="1129:24" pos:end="1129:43"><literal type="string" pos:start="1129:24" pos:end="1129:43">"conditional branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <block pos:start="1131:13" pos:end="1145:13">{<block_content pos:start="1133:15" pos:end="1143:48">

              <decl_stmt pos:start="1133:15" pos:end="1133:21"><decl pos:start="1133:15" pos:end="1133:20"><type pos:start="1133:15" pos:end="1133:17"><name pos:start="1133:15" pos:end="1133:17">int</name></type> <name pos:start="1133:19" pos:end="1133:20">l1</name></decl>;</decl_stmt>

              <expr_stmt pos:start="1135:15" pos:end="1135:35"><expr pos:start="1135:15" pos:end="1135:34"><name pos:start="1135:15" pos:end="1135:16">l1</name> <operator pos:start="1135:18" pos:end="1135:18">=</operator> <call pos:start="1135:20" pos:end="1135:34"><name pos:start="1135:20" pos:end="1135:32">gen_new_label</name><argument_list pos:start="1135:33" pos:end="1135:34">()</argument_list></call></expr>;</expr_stmt>

              <expr_stmt pos:start="1137:15" pos:end="1137:32"><expr pos:start="1137:15" pos:end="1137:31"><call pos:start="1137:15" pos:end="1137:31"><name pos:start="1137:15" pos:end="1137:27">gen_op_jnz_T2</name><argument_list pos:start="1137:28" pos:end="1137:31">(<argument pos:start="1137:29" pos:end="1137:30"><expr pos:start="1137:29" pos:end="1137:30"><name pos:start="1137:29" pos:end="1137:30">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt pos:start="1139:15" pos:end="1139:47"><expr pos:start="1139:15" pos:end="1139:46"><call pos:start="1139:15" pos:end="1139:46"><name pos:start="1139:15" pos:end="1139:25">gen_goto_tb</name><argument_list pos:start="1139:26" pos:end="1139:46">(<argument pos:start="1139:27" pos:end="1139:29"><expr pos:start="1139:27" pos:end="1139:29"><name pos:start="1139:27" pos:end="1139:29">ctx</name></expr></argument>, <argument pos:start="1139:32" pos:end="1139:32"><expr pos:start="1139:32" pos:end="1139:32"><literal type="number" pos:start="1139:32" pos:end="1139:32">1</literal></expr></argument>, <argument pos:start="1139:35" pos:end="1139:45"><expr pos:start="1139:35" pos:end="1139:45"><name pos:start="1139:35" pos:end="1139:41"><name pos:start="1139:35" pos:end="1139:37">ctx</name><operator pos:start="1139:38" pos:end="1139:39">-&gt;</operator><name pos:start="1139:40" pos:end="1139:41">pc</name></name> <operator pos:start="1139:43" pos:end="1139:43">+</operator> <literal type="number" pos:start="1139:45" pos:end="1139:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt pos:start="1141:15" pos:end="1141:32"><expr pos:start="1141:15" pos:end="1141:31"><call pos:start="1141:15" pos:end="1141:31"><name pos:start="1141:15" pos:end="1141:27">gen_set_label</name><argument_list pos:start="1141:28" pos:end="1141:31">(<argument pos:start="1141:29" pos:end="1141:30"><expr pos:start="1141:29" pos:end="1141:30"><name pos:start="1141:29" pos:end="1141:30">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt pos:start="1143:15" pos:end="1143:48"><expr pos:start="1143:15" pos:end="1143:47"><call pos:start="1143:15" pos:end="1143:47"><name pos:start="1143:15" pos:end="1143:25">gen_goto_tb</name><argument_list pos:start="1143:26" pos:end="1143:47">(<argument pos:start="1143:27" pos:end="1143:29"><expr pos:start="1143:27" pos:end="1143:29"><name pos:start="1143:27" pos:end="1143:29">ctx</name></expr></argument>, <argument pos:start="1143:32" pos:end="1143:32"><expr pos:start="1143:32" pos:end="1143:32"><literal type="number" pos:start="1143:32" pos:end="1143:32">0</literal></expr></argument>, <argument pos:start="1143:35" pos:end="1143:46"><expr pos:start="1143:35" pos:end="1143:46"><name pos:start="1143:35" pos:end="1143:46"><name pos:start="1143:35" pos:end="1143:37">ctx</name><operator pos:start="1143:38" pos:end="1143:39">-&gt;</operator><name pos:start="1143:40" pos:end="1143:46">btarget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="1147:13" pos:end="1147:18">break;</break>

        <case pos:start="1149:9" pos:end="1149:27">case <expr pos:start="1149:14" pos:end="1149:26"><name pos:start="1149:14" pos:end="1149:26">MIPS_HFLAG_BR</name></expr>:</case>

            <comment type="block" pos:start="1151:13" pos:end="1151:50">/* unconditional branch to register */</comment>

            <expr_stmt pos:start="1153:13" pos:end="1153:45"><expr pos:start="1153:13" pos:end="1153:44"><call pos:start="1153:13" pos:end="1153:44"><name pos:start="1153:13" pos:end="1153:22">MIPS_DEBUG</name><argument_list pos:start="1153:23" pos:end="1153:44">(<argument pos:start="1153:24" pos:end="1153:43"><expr pos:start="1153:24" pos:end="1153:43"><literal type="string" pos:start="1153:24" pos:end="1153:43">"branch to register"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1155:13" pos:end="1155:26"><expr pos:start="1155:13" pos:end="1155:25"><call pos:start="1155:13" pos:end="1155:25"><name pos:start="1155:13" pos:end="1155:23">gen_op_breg</name><argument_list pos:start="1155:24" pos:end="1155:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1157:13" pos:end="1157:30"><expr pos:start="1157:13" pos:end="1157:29"><call pos:start="1157:13" pos:end="1157:29"><name pos:start="1157:13" pos:end="1157:27">gen_op_reset_T0</name><argument_list pos:start="1157:28" pos:end="1157:29">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1159:13" pos:end="1159:29"><expr pos:start="1159:13" pos:end="1159:28"><call pos:start="1159:13" pos:end="1159:28"><name pos:start="1159:13" pos:end="1159:26">gen_op_exit_tb</name><argument_list pos:start="1159:27" pos:end="1159:28">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1161:13" pos:end="1161:18">break;</break>

        <default pos:start="1163:9" pos:end="1163:16">default:</default>

            <expr_stmt pos:start="1165:13" pos:end="1165:41"><expr pos:start="1165:13" pos:end="1165:40"><call pos:start="1165:13" pos:end="1165:40"><name pos:start="1165:13" pos:end="1165:22">MIPS_DEBUG</name><argument_list pos:start="1165:23" pos:end="1165:40">(<argument pos:start="1165:24" pos:end="1165:39"><expr pos:start="1165:24" pos:end="1165:39"><literal type="string" pos:start="1165:24" pos:end="1165:39">"unknown branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1167:13" pos:end="1167:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
