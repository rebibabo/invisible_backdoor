<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18422.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:77"><name pos:start="1:1" pos:end="1:14">voc_get_packet</name><argument_list pos:start="1:15" pos:end="1:77">(<argument pos:start="1:16" pos:end="1:33">AVFormatContext *s</argument>, <argument pos:start="1:36" pos:end="1:48">AVPacket *pkt</argument>, <argument pos:start="1:51" pos:end="1:62">AVStream *st</argument>, <argument pos:start="1:65" pos:end="1:76">int max_size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:40">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">VocDecContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">voc</name> <init pos:start="5:24" pos:end="5:37">= <expr pos:start="5:26" pos:end="5:37"><name pos:start="5:26" pos:end="5:37"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">dec</name> <init pos:start="7:25" pos:end="7:35">= <expr pos:start="7:27" pos:end="7:35"><name pos:start="7:27" pos:end="7:35"><name pos:start="7:27" pos:end="7:28">st</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:35">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">ByteIOContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">pb</name> <init pos:start="9:23" pos:end="9:29">= <expr pos:start="9:25" pos:end="9:29"><name pos:start="9:25" pos:end="9:29"><name pos:start="9:25" pos:end="9:25">s</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:29">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">VocType</name></type> <name pos:start="11:13" pos:end="11:16">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">size</name></decl>, <decl pos:start="13:15" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:23">tmp_codec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">sample_rate</name> <init pos:start="15:21" pos:end="15:23">= <expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">channels</name> <init pos:start="17:18" pos:end="17:20">= <expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">1</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="21:5" pos:end="151:5">while <condition pos:start="21:11" pos:end="21:32">(<expr pos:start="21:12" pos:end="21:31"><operator pos:start="21:12" pos:end="21:12">!</operator><name pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:15">voc</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:31">remaining_size</name></name></expr>)</condition> <block pos:start="21:34" pos:end="151:5">{<block_content pos:start="23:9" pos:end="149:9">

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:12">type</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:27"><name pos:start="23:16" pos:end="23:23">get_byte</name><argument_list pos:start="23:24" pos:end="23:27">(<argument pos:start="23:25" pos:end="23:26"><expr pos:start="23:25" pos:end="23:26"><name pos:start="23:25" pos:end="23:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:32"><if pos:start="25:9" pos:end="27:32">if <condition pos:start="25:12" pos:end="25:33">(<expr pos:start="25:13" pos:end="25:32"><name pos:start="25:13" pos:end="25:16">type</name> <operator pos:start="25:18" pos:end="25:19">==</operator> <name pos:start="25:21" pos:end="25:32">VOC_TYPE_EOF</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:32"><block_content pos:start="27:13" pos:end="27:32">

            <return pos:start="27:13" pos:end="27:32">return <expr pos:start="27:20" pos:end="27:31"><call pos:start="27:20" pos:end="27:31"><name pos:start="27:20" pos:end="27:26">AVERROR</name><argument_list pos:start="27:27" pos:end="27:31">(<argument pos:start="27:28" pos:end="27:30"><expr pos:start="27:28" pos:end="27:30"><name pos:start="27:28" pos:end="27:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:11">voc</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:27">remaining_size</name></name> <operator pos:start="29:29" pos:end="29:29">=</operator> <call pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:38">get_le24</name><argument_list pos:start="29:39" pos:end="29:42">(<argument pos:start="29:40" pos:end="29:41"><expr pos:start="29:40" pos:end="29:41"><name pos:start="29:40" pos:end="29:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:33">(<expr pos:start="31:13" pos:end="31:32"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:32"><name pos:start="31:14" pos:end="31:16">voc</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:32">remaining_size</name></name></expr>)</condition> <block pos:start="31:35" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:64">

            <if_stmt pos:start="33:13" pos:end="35:36"><if pos:start="33:13" pos:end="35:36">if <condition pos:start="33:16" pos:end="33:39">(<expr pos:start="33:17" pos:end="33:38"><call pos:start="33:17" pos:end="33:38"><name pos:start="33:17" pos:end="33:31">url_is_streamed</name><argument_list pos:start="33:32" pos:end="33:38">(<argument pos:start="33:33" pos:end="33:37"><expr pos:start="33:33" pos:end="33:37"><name pos:start="33:33" pos:end="33:37"><name pos:start="33:33" pos:end="33:33">s</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:37">pb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:36"><block_content pos:start="35:17" pos:end="35:36">

                <return pos:start="35:17" pos:end="35:36">return <expr pos:start="35:24" pos:end="35:35"><call pos:start="35:24" pos:end="35:35"><name pos:start="35:24" pos:end="35:30">AVERROR</name><argument_list pos:start="35:31" pos:end="35:35">(<argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:64"><expr pos:start="37:13" pos:end="37:63"><name pos:start="37:13" pos:end="37:31"><name pos:start="37:13" pos:end="37:15">voc</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:31">remaining_size</name></name> <operator pos:start="37:33" pos:end="37:33">=</operator> <call pos:start="37:35" pos:end="37:47"><name pos:start="37:35" pos:end="37:43">url_fsize</name><argument_list pos:start="37:44" pos:end="37:47">(<argument pos:start="37:45" pos:end="37:46"><expr pos:start="37:45" pos:end="37:46"><name pos:start="37:45" pos:end="37:46">pb</name></expr></argument>)</argument_list></call> <operator pos:start="37:49" pos:end="37:49">-</operator> <call pos:start="37:51" pos:end="37:63"><name pos:start="37:51" pos:end="37:59">url_ftell</name><argument_list pos:start="37:60" pos:end="37:63">(<argument pos:start="37:61" pos:end="37:62"><expr pos:start="37:61" pos:end="37:62"><name pos:start="37:61" pos:end="37:62">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:16">max_size</name> <operator pos:start="41:18" pos:end="41:19">-=</operator> <literal type="number" pos:start="41:21" pos:end="41:21">4</literal></expr>;</expr_stmt>



        <switch pos:start="45:9" pos:end="141:9">switch <condition pos:start="45:16" pos:end="45:21">(<expr pos:start="45:17" pos:end="45:20"><name pos:start="45:17" pos:end="45:20">type</name></expr>)</condition> <block pos:start="45:23" pos:end="141:9">{<block_content pos:start="47:9" pos:end="139:18">

        <case pos:start="47:9" pos:end="47:33">case <expr pos:start="47:14" pos:end="47:32"><name pos:start="47:14" pos:end="47:32">VOC_TYPE_VOICE_DATA</name></expr>:</case>

            <expr_stmt pos:start="49:13" pos:end="49:62"><expr pos:start="49:13" pos:end="49:61"><name pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:15">dec</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:28">sample_rate</name></name> <operator pos:start="49:30" pos:end="49:30">=</operator> <literal type="number" pos:start="49:32" pos:end="49:38">1000000</literal> <operator pos:start="49:40" pos:end="49:40">/</operator> <operator pos:start="49:42" pos:end="49:42">(</operator><literal type="number" pos:start="49:43" pos:end="49:47">256</literal> <operator pos:start="49:47" pos:end="49:47">-</operator> <call pos:start="49:49" pos:end="49:60"><name pos:start="49:49" pos:end="49:56">get_byte</name><argument_list pos:start="49:57" pos:end="49:60">(<argument pos:start="49:58" pos:end="49:59"><expr pos:start="49:58" pos:end="49:59"><name pos:start="49:58" pos:end="49:59">pb</name></expr></argument>)</argument_list></call><operator pos:start="49:61" pos:end="49:61">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="53:47"><if pos:start="51:13" pos:end="53:47">if <condition pos:start="51:16" pos:end="51:28">(<expr pos:start="51:17" pos:end="51:27"><name pos:start="51:17" pos:end="51:27">sample_rate</name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:47"><block_content pos:start="53:17" pos:end="53:47">

                <expr_stmt pos:start="53:17" pos:end="53:47"><expr pos:start="53:17" pos:end="53:46"><name pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:19">dec</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:32">sample_rate</name></name> <operator pos:start="53:34" pos:end="53:34">=</operator> <name pos:start="53:36" pos:end="53:46">sample_rate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:37"><expr pos:start="55:13" pos:end="55:36"><name pos:start="55:13" pos:end="55:25"><name pos:start="55:13" pos:end="55:15">dec</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:25">channels</name></name> <operator pos:start="55:27" pos:end="55:27">=</operator> <name pos:start="55:29" pos:end="55:36">channels</name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:73"><expr pos:start="57:13" pos:end="57:72"><name pos:start="57:13" pos:end="57:21">tmp_codec</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <call pos:start="57:25" pos:end="57:72"><name pos:start="57:25" pos:end="57:39">ff_codec_get_id</name><argument_list pos:start="57:40" pos:end="57:72">(<argument pos:start="57:41" pos:end="57:57"><expr pos:start="57:41" pos:end="57:57"><name pos:start="57:41" pos:end="57:57">ff_voc_codec_tags</name></expr></argument>, <argument pos:start="57:60" pos:end="57:71"><expr pos:start="57:60" pos:end="57:71"><call pos:start="57:60" pos:end="57:71"><name pos:start="57:60" pos:end="57:67">get_byte</name><argument_list pos:start="57:68" pos:end="57:71">(<argument pos:start="57:69" pos:end="57:70"><expr pos:start="57:69" pos:end="57:70"><name pos:start="57:69" pos:end="57:70">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="65:89"><if pos:start="59:13" pos:end="61:42">if <condition pos:start="59:16" pos:end="59:47">(<expr pos:start="59:17" pos:end="59:46"><name pos:start="59:17" pos:end="59:29"><name pos:start="59:17" pos:end="59:19">dec</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:29">codec_id</name></name> <operator pos:start="59:31" pos:end="59:32">==</operator> <name pos:start="59:34" pos:end="59:46">CODEC_ID_NONE</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:42"><block_content pos:start="61:17" pos:end="61:42">

                <expr_stmt pos:start="61:17" pos:end="61:42"><expr pos:start="61:17" pos:end="61:41"><name pos:start="61:17" pos:end="61:29"><name pos:start="61:17" pos:end="61:19">dec</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:29">codec_id</name></name> <operator pos:start="61:31" pos:end="61:31">=</operator> <name pos:start="61:33" pos:end="61:41">tmp_codec</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="63:13" pos:end="65:89">else if <condition pos:start="63:21" pos:end="63:48">(<expr pos:start="63:22" pos:end="63:47"><name pos:start="63:22" pos:end="63:34"><name pos:start="63:22" pos:end="63:24">dec</name><operator pos:start="63:25" pos:end="63:26">-&gt;</operator><name pos:start="63:27" pos:end="63:34">codec_id</name></name> <operator pos:start="63:36" pos:end="63:37">!=</operator> <name pos:start="63:39" pos:end="63:47">tmp_codec</name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:89"><block_content pos:start="65:17" pos:end="65:89">

                <expr_stmt pos:start="65:17" pos:end="65:89"><expr pos:start="65:17" pos:end="65:88"><call pos:start="65:17" pos:end="65:88"><name pos:start="65:17" pos:end="65:22">av_log</name><argument_list pos:start="65:23" pos:end="65:88">(<argument pos:start="65:24" pos:end="65:24"><expr pos:start="65:24" pos:end="65:24"><name pos:start="65:24" pos:end="65:24">s</name></expr></argument>, <argument pos:start="65:27" pos:end="65:40"><expr pos:start="65:27" pos:end="65:40"><name pos:start="65:27" pos:end="65:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="65:43" pos:end="65:87"><expr pos:start="65:43" pos:end="65:87"><literal type="string" pos:start="65:43" pos:end="65:87">"Ignoring mid-stream change in audio codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:79"><expr pos:start="67:13" pos:end="67:78"><name pos:start="67:13" pos:end="67:38"><name pos:start="67:13" pos:end="67:15">dec</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:38">bits_per_coded_sample</name></name> <operator pos:start="67:40" pos:end="67:40">=</operator> <call pos:start="67:42" pos:end="67:78"><name pos:start="67:42" pos:end="67:63">av_get_bits_per_sample</name><argument_list pos:start="67:64" pos:end="67:78">(<argument pos:start="67:65" pos:end="67:77"><expr pos:start="67:65" pos:end="67:77"><name pos:start="67:65" pos:end="67:77"><name pos:start="67:65" pos:end="67:67">dec</name><operator pos:start="67:68" pos:end="67:69">-&gt;</operator><name pos:start="67:70" pos:end="67:77">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:37"><expr pos:start="69:13" pos:end="69:36"><name pos:start="69:13" pos:end="69:31"><name pos:start="69:13" pos:end="69:15">voc</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:31">remaining_size</name></name> <operator pos:start="69:33" pos:end="69:34">-=</operator> <literal type="number" pos:start="69:36" pos:end="69:36">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:26"><expr pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:20">max_size</name> <operator pos:start="71:22" pos:end="71:23">-=</operator> <literal type="number" pos:start="71:25" pos:end="71:25">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:25"><expr pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:20">channels</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <literal type="number" pos:start="73:24" pos:end="73:24">1</literal></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>



        <case pos:start="79:9" pos:end="79:38">case <expr pos:start="79:14" pos:end="79:37"><name pos:start="79:14" pos:end="79:37">VOC_TYPE_VOICE_DATA_CONT</name></expr>:</case>

            <break pos:start="81:13" pos:end="81:18">break;</break>



        <case pos:start="85:9" pos:end="85:31">case <expr pos:start="85:14" pos:end="85:30"><name pos:start="85:14" pos:end="85:30">VOC_TYPE_EXTENDED</name></expr>:</case>

            <expr_stmt pos:start="87:13" pos:end="87:39"><expr pos:start="87:13" pos:end="87:38"><name pos:start="87:13" pos:end="87:23">sample_rate</name> <operator pos:start="87:25" pos:end="87:25">=</operator> <call pos:start="87:27" pos:end="87:38"><name pos:start="87:27" pos:end="87:34">get_le16</name><argument_list pos:start="87:35" pos:end="87:38">(<argument pos:start="87:36" pos:end="87:37"><expr pos:start="87:36" pos:end="87:37"><name pos:start="87:36" pos:end="87:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:25"><expr pos:start="89:13" pos:end="89:24"><call pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:20">get_byte</name><argument_list pos:start="89:21" pos:end="89:24">(<argument pos:start="89:22" pos:end="89:23"><expr pos:start="89:22" pos:end="89:23"><name pos:start="89:22" pos:end="89:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:40"><expr pos:start="91:13" pos:end="91:39"><name pos:start="91:13" pos:end="91:20">channels</name> <operator pos:start="91:22" pos:end="91:22">=</operator> <call pos:start="91:24" pos:end="91:35"><name pos:start="91:24" pos:end="91:31">get_byte</name><argument_list pos:start="91:32" pos:end="91:35">(<argument pos:start="91:33" pos:end="91:34"><expr pos:start="91:33" pos:end="91:34"><name pos:start="91:33" pos:end="91:34">pb</name></expr></argument>)</argument_list></call> <operator pos:start="91:37" pos:end="91:37">+</operator> <literal type="number" pos:start="91:39" pos:end="91:39">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:73"><expr pos:start="93:13" pos:end="93:72"><name pos:start="93:13" pos:end="93:23">sample_rate</name> <operator pos:start="93:25" pos:end="93:25">=</operator> <literal type="number" pos:start="93:27" pos:end="93:35">256000000</literal> <operator pos:start="93:37" pos:end="93:37">/</operator> <operator pos:start="93:39" pos:end="93:39">(</operator><name pos:start="93:40" pos:end="93:47">channels</name> <operator pos:start="93:49" pos:end="93:49">*</operator> <operator pos:start="93:51" pos:end="93:51">(</operator><literal type="number" pos:start="93:52" pos:end="93:58">65536</literal> <operator pos:start="93:58" pos:end="93:58">-</operator> <name pos:start="93:60" pos:end="93:70">sample_rate</name><operator pos:start="93:71" pos:end="93:71">)</operator><operator pos:start="93:72" pos:end="93:72">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:36"><expr pos:start="95:13" pos:end="95:35"><name pos:start="95:13" pos:end="95:31"><name pos:start="95:13" pos:end="95:15">voc</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:31">remaining_size</name></name> <operator pos:start="95:33" pos:end="95:33">=</operator> <literal type="number" pos:start="95:35" pos:end="95:35">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:26"><expr pos:start="97:13" pos:end="97:25"><name pos:start="97:13" pos:end="97:20">max_size</name> <operator pos:start="97:22" pos:end="97:23">-=</operator> <literal type="number" pos:start="97:25" pos:end="97:25">4</literal></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>



        <case pos:start="103:9" pos:end="103:37">case <expr pos:start="103:14" pos:end="103:36"><name pos:start="103:14" pos:end="103:36">VOC_TYPE_NEW_VOICE_DATA</name></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:44"><expr pos:start="105:13" pos:end="105:43"><name pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:15">dec</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:28">sample_rate</name></name> <operator pos:start="105:30" pos:end="105:30">=</operator> <call pos:start="105:32" pos:end="105:43"><name pos:start="105:32" pos:end="105:39">get_le32</name><argument_list pos:start="105:40" pos:end="105:43">(<argument pos:start="105:41" pos:end="105:42"><expr pos:start="105:41" pos:end="105:42"><name pos:start="105:41" pos:end="105:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:54"><expr pos:start="107:13" pos:end="107:53"><name pos:start="107:13" pos:end="107:38"><name pos:start="107:13" pos:end="107:15">dec</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:38">bits_per_coded_sample</name></name> <operator pos:start="107:40" pos:end="107:40">=</operator> <call pos:start="107:42" pos:end="107:53"><name pos:start="107:42" pos:end="107:49">get_byte</name><argument_list pos:start="107:50" pos:end="107:53">(<argument pos:start="107:51" pos:end="107:52"><expr pos:start="107:51" pos:end="107:52"><name pos:start="107:51" pos:end="107:52">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:41"><expr pos:start="109:13" pos:end="109:40"><name pos:start="109:13" pos:end="109:25"><name pos:start="109:13" pos:end="109:15">dec</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:25">channels</name></name> <operator pos:start="109:27" pos:end="109:27">=</operator> <call pos:start="109:29" pos:end="109:40"><name pos:start="109:29" pos:end="109:36">get_byte</name><argument_list pos:start="109:37" pos:end="109:40">(<argument pos:start="109:38" pos:end="109:39"><expr pos:start="109:38" pos:end="109:39"><name pos:start="109:38" pos:end="109:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:73"><expr pos:start="111:13" pos:end="111:72"><name pos:start="111:13" pos:end="111:21">tmp_codec</name> <operator pos:start="111:23" pos:end="111:23">=</operator> <call pos:start="111:25" pos:end="111:72"><name pos:start="111:25" pos:end="111:39">ff_codec_get_id</name><argument_list pos:start="111:40" pos:end="111:72">(<argument pos:start="111:41" pos:end="111:57"><expr pos:start="111:41" pos:end="111:57"><name pos:start="111:41" pos:end="111:57">ff_voc_codec_tags</name></expr></argument>, <argument pos:start="111:60" pos:end="111:71"><expr pos:start="111:60" pos:end="111:71"><call pos:start="111:60" pos:end="111:71"><name pos:start="111:60" pos:end="111:67">get_le16</name><argument_list pos:start="111:68" pos:end="111:71">(<argument pos:start="111:69" pos:end="111:70"><expr pos:start="111:69" pos:end="111:70"><name pos:start="111:69" pos:end="111:70">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="119:89"><if pos:start="113:13" pos:end="115:42">if <condition pos:start="113:16" pos:end="113:47">(<expr pos:start="113:17" pos:end="113:46"><name pos:start="113:17" pos:end="113:29"><name pos:start="113:17" pos:end="113:19">dec</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:29">codec_id</name></name> <operator pos:start="113:31" pos:end="113:32">==</operator> <name pos:start="113:34" pos:end="113:46">CODEC_ID_NONE</name></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:42"><block_content pos:start="115:17" pos:end="115:42">

                <expr_stmt pos:start="115:17" pos:end="115:42"><expr pos:start="115:17" pos:end="115:41"><name pos:start="115:17" pos:end="115:29"><name pos:start="115:17" pos:end="115:19">dec</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:29">codec_id</name></name> <operator pos:start="115:31" pos:end="115:31">=</operator> <name pos:start="115:33" pos:end="115:41">tmp_codec</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="117:13" pos:end="119:89">else if <condition pos:start="117:21" pos:end="117:48">(<expr pos:start="117:22" pos:end="117:47"><name pos:start="117:22" pos:end="117:34"><name pos:start="117:22" pos:end="117:24">dec</name><operator pos:start="117:25" pos:end="117:26">-&gt;</operator><name pos:start="117:27" pos:end="117:34">codec_id</name></name> <operator pos:start="117:36" pos:end="117:37">!=</operator> <name pos:start="117:39" pos:end="117:47">tmp_codec</name></expr>)</condition><block type="pseudo" pos:start="119:17" pos:end="119:89"><block_content pos:start="119:17" pos:end="119:89">

                <expr_stmt pos:start="119:17" pos:end="119:89"><expr pos:start="119:17" pos:end="119:88"><call pos:start="119:17" pos:end="119:88"><name pos:start="119:17" pos:end="119:22">av_log</name><argument_list pos:start="119:23" pos:end="119:88">(<argument pos:start="119:24" pos:end="119:24"><expr pos:start="119:24" pos:end="119:24"><name pos:start="119:24" pos:end="119:24">s</name></expr></argument>, <argument pos:start="119:27" pos:end="119:40"><expr pos:start="119:27" pos:end="119:40"><name pos:start="119:27" pos:end="119:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="119:43" pos:end="119:87"><expr pos:start="119:43" pos:end="119:87"><literal type="string" pos:start="119:43" pos:end="119:87">"Ignoring mid-stream change in audio codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:29"><expr pos:start="121:13" pos:end="121:28"><call pos:start="121:13" pos:end="121:28"><name pos:start="121:13" pos:end="121:21">url_fskip</name><argument_list pos:start="121:22" pos:end="121:28">(<argument pos:start="121:23" pos:end="121:24"><expr pos:start="121:23" pos:end="121:24"><name pos:start="121:23" pos:end="121:24">pb</name></expr></argument>, <argument pos:start="121:27" pos:end="121:27"><expr pos:start="121:27" pos:end="121:27"><literal type="number" pos:start="121:27" pos:end="121:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:38"><expr pos:start="123:13" pos:end="123:37"><name pos:start="123:13" pos:end="123:31"><name pos:start="123:13" pos:end="123:15">voc</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:31">remaining_size</name></name> <operator pos:start="123:33" pos:end="123:34">-=</operator> <literal type="number" pos:start="123:36" pos:end="123:37">12</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:27"><expr pos:start="125:13" pos:end="125:26"><name pos:start="125:13" pos:end="125:20">max_size</name> <operator pos:start="125:22" pos:end="125:23">-=</operator> <literal type="number" pos:start="125:25" pos:end="125:26">12</literal></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>



        <default pos:start="131:9" pos:end="131:16">default:</default>

            <expr_stmt pos:start="133:13" pos:end="133:47"><expr pos:start="133:13" pos:end="133:46"><call pos:start="133:13" pos:end="133:46"><name pos:start="133:13" pos:end="133:21">url_fskip</name><argument_list pos:start="133:22" pos:end="133:46">(<argument pos:start="133:23" pos:end="133:24"><expr pos:start="133:23" pos:end="133:24"><name pos:start="133:23" pos:end="133:24">pb</name></expr></argument>, <argument pos:start="133:27" pos:end="133:45"><expr pos:start="133:27" pos:end="133:45"><name pos:start="133:27" pos:end="133:45"><name pos:start="133:27" pos:end="133:29">voc</name><operator pos:start="133:30" pos:end="133:31">-&gt;</operator><name pos:start="133:32" pos:end="133:45">remaining_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:44"><expr pos:start="135:13" pos:end="135:43"><name pos:start="135:13" pos:end="135:20">max_size</name> <operator pos:start="135:22" pos:end="135:23">-=</operator> <name pos:start="135:25" pos:end="135:43"><name pos:start="135:25" pos:end="135:27">voc</name><operator pos:start="135:28" pos:end="135:29">-&gt;</operator><name pos:start="135:30" pos:end="135:43">remaining_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:36"><expr pos:start="137:13" pos:end="137:35"><name pos:start="137:13" pos:end="137:31"><name pos:start="137:13" pos:end="137:15">voc</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:31">remaining_size</name></name> <operator pos:start="137:33" pos:end="137:33">=</operator> <literal type="number" pos:start="137:35" pos:end="137:35">0</literal></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="143:9" pos:end="149:9"><if pos:start="143:9" pos:end="149:9">if <condition pos:start="143:12" pos:end="143:43">(<expr pos:start="143:13" pos:end="143:42"><name pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:15">dec</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:25">codec_id</name></name> <operator pos:start="143:27" pos:end="143:28">==</operator> <name pos:start="143:30" pos:end="143:42">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="143:45" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:75">

            <expr_stmt pos:start="145:13" pos:end="145:58"><expr pos:start="145:13" pos:end="145:57"><call pos:start="145:13" pos:end="145:57"><name pos:start="145:13" pos:end="145:18">av_log</name><argument_list pos:start="145:19" pos:end="145:57">(<argument pos:start="145:20" pos:end="145:20"><expr pos:start="145:20" pos:end="145:20"><name pos:start="145:20" pos:end="145:20">s</name></expr></argument>, <argument pos:start="145:23" pos:end="145:34"><expr pos:start="145:23" pos:end="145:34"><name pos:start="145:23" pos:end="145:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:37" pos:end="145:56"><expr pos:start="145:37" pos:end="145:56"><literal type="string" pos:start="145:37" pos:end="145:56">"Invalid codec_id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="147:13" pos:end="147:75"><if pos:start="147:13" pos:end="147:75">if <condition pos:start="147:16" pos:end="147:51">(<expr pos:start="147:17" pos:end="147:50"><name pos:start="147:17" pos:end="147:33"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:33">audio_codec_id</name></name> <operator pos:start="147:35" pos:end="147:36">==</operator> <name pos:start="147:38" pos:end="147:50">CODEC_ID_NONE</name></expr>)</condition><block type="pseudo" pos:start="147:53" pos:end="147:75"><block_content pos:start="147:53" pos:end="147:75"> <return pos:start="147:53" pos:end="147:75">return <expr pos:start="147:60" pos:end="147:74"><call pos:start="147:60" pos:end="147:74"><name pos:start="147:60" pos:end="147:66">AVERROR</name><argument_list pos:start="147:67" pos:end="147:74">(<argument pos:start="147:68" pos:end="147:73"><expr pos:start="147:68" pos:end="147:73"><name pos:start="147:68" pos:end="147:73">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="155:5" pos:end="155:66"><expr pos:start="155:5" pos:end="155:65"><name pos:start="155:5" pos:end="155:17"><name pos:start="155:5" pos:end="155:7">dec</name><operator pos:start="155:8" pos:end="155:9">-&gt;</operator><name pos:start="155:10" pos:end="155:17">bit_rate</name></name> <operator pos:start="155:19" pos:end="155:19">=</operator> <name pos:start="155:21" pos:end="155:36"><name pos:start="155:21" pos:end="155:23">dec</name><operator pos:start="155:24" pos:end="155:25">-&gt;</operator><name pos:start="155:26" pos:end="155:36">sample_rate</name></name> <operator pos:start="155:38" pos:end="155:38">*</operator> <name pos:start="155:40" pos:end="155:65"><name pos:start="155:40" pos:end="155:42">dec</name><operator pos:start="155:43" pos:end="155:44">-&gt;</operator><name pos:start="155:45" pos:end="155:65">bits_per_coded_sample</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="159:5" pos:end="161:24"><if pos:start="159:5" pos:end="161:24">if <condition pos:start="159:8" pos:end="159:22">(<expr pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:16">max_size</name> <operator pos:start="159:18" pos:end="159:19">&lt;=</operator> <literal type="number" pos:start="159:21" pos:end="159:21">0</literal></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:24"><block_content pos:start="161:9" pos:end="161:24">

        <expr_stmt pos:start="161:9" pos:end="161:24"><expr pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:16">max_size</name> <operator pos:start="161:18" pos:end="161:18">=</operator> <literal type="number" pos:start="161:20" pos:end="161:23">2048</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:48"><expr pos:start="163:5" pos:end="163:47"><name pos:start="163:5" pos:end="163:8">size</name> <operator pos:start="163:10" pos:end="163:10">=</operator> <call pos:start="163:12" pos:end="163:47"><name pos:start="163:12" pos:end="163:16">FFMIN</name><argument_list pos:start="163:17" pos:end="163:47">(<argument pos:start="163:18" pos:end="163:36"><expr pos:start="163:18" pos:end="163:36"><name pos:start="163:18" pos:end="163:36"><name pos:start="163:18" pos:end="163:20">voc</name><operator pos:start="163:21" pos:end="163:22">-&gt;</operator><name pos:start="163:23" pos:end="163:36">remaining_size</name></name></expr></argument>, <argument pos:start="163:39" pos:end="163:46"><expr pos:start="163:39" pos:end="163:46"><name pos:start="163:39" pos:end="163:46">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:32"><expr pos:start="165:5" pos:end="165:31"><name pos:start="165:5" pos:end="165:23"><name pos:start="165:5" pos:end="165:7">voc</name><operator pos:start="165:8" pos:end="165:9">-&gt;</operator><name pos:start="165:10" pos:end="165:23">remaining_size</name></name> <operator pos:start="165:25" pos:end="165:26">-=</operator> <name pos:start="165:28" pos:end="165:31">size</name></expr>;</expr_stmt>

    <return pos:start="167:5" pos:end="167:40">return <expr pos:start="167:12" pos:end="167:39"><call pos:start="167:12" pos:end="167:39"><name pos:start="167:12" pos:end="167:24">av_get_packet</name><argument_list pos:start="167:25" pos:end="167:39">(<argument pos:start="167:26" pos:end="167:27"><expr pos:start="167:26" pos:end="167:27"><name pos:start="167:26" pos:end="167:27">pb</name></expr></argument>, <argument pos:start="167:30" pos:end="167:32"><expr pos:start="167:30" pos:end="167:32"><name pos:start="167:30" pos:end="167:32">pkt</name></expr></argument>, <argument pos:start="167:35" pos:end="167:38"><expr pos:start="167:35" pos:end="167:38"><name pos:start="167:35" pos:end="167:38">size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>
</unit>
