<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11924.c" pos:tabs="8"><function pos:start="1:1" pos:end="457:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">flashsv_decode_frame</name><parameter_list pos:start="1:32" pos:end="3:64">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:35">int</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:46">got_frame</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="457:1">{<block_content pos:start="7:5" pos:end="455:20">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name> <init pos:start="7:18" pos:end="7:30">= <expr pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:24">avpkt</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">FlashSVContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:40">= <expr pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:29">avctx</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">h_blocks</name></decl>, <decl pos:start="11:19" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:26">v_blocks</name></decl>, <decl pos:start="11:29" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:29" pos:end="11:34">h_part</name></decl>, <decl pos:start="11:37" pos:end="11:42"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:37" pos:end="11:42">v_part</name></decl>, <decl pos:start="11:45" pos:end="11:45"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:45" pos:end="11:45">i</name></decl>, <decl pos:start="11:48" pos:end="11:48"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:48" pos:end="11:48">j</name></decl>, <decl pos:start="11:51" pos:end="11:53"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:51" pos:end="11:53">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:20">gb</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="19:5" pos:end="21:17"><if pos:start="19:5" pos:end="21:17">if <condition pos:start="19:8" pos:end="19:22">(<expr pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:16">buf_size</name> <operator pos:start="19:18" pos:end="19:19">==</operator> <literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:17"><block_content pos:start="21:9" pos:end="21:17">

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="25:18"><if pos:start="23:5" pos:end="25:18">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:16">buf_size</name> <operator pos:start="23:18" pos:end="23:18">&lt;</operator> <literal type="number" pos:start="23:20" pos:end="23:20">4</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:18"><block_content pos:start="25:9" pos:end="25:18">

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:50"><expr pos:start="29:5" pos:end="29:49"><call pos:start="29:5" pos:end="29:49"><name pos:start="29:5" pos:end="29:17">init_get_bits</name><argument_list pos:start="29:18" pos:end="29:49">(<argument pos:start="29:19" pos:end="29:21"><expr pos:start="29:19" pos:end="29:21"><operator pos:start="29:19" pos:end="29:19">&amp;</operator><name pos:start="29:20" pos:end="29:21">gb</name></expr></argument>, <argument pos:start="29:24" pos:end="29:34"><expr pos:start="29:24" pos:end="29:34"><name pos:start="29:24" pos:end="29:34"><name pos:start="29:24" pos:end="29:28">avpkt</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:34">data</name></name></expr></argument>, <argument pos:start="29:37" pos:end="29:48"><expr pos:start="29:37" pos:end="29:48"><name pos:start="29:37" pos:end="29:44">buf_size</name> <operator pos:start="29:46" pos:end="29:46">*</operator> <literal type="number" pos:start="29:48" pos:end="29:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:38">/* start to parse the bitstream */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:50"><expr pos:start="35:5" pos:end="35:49"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:18">block_width</name></name>  <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:24">16</literal> <operator pos:start="35:26" pos:end="35:26">*</operator> <operator pos:start="35:28" pos:end="35:28">(</operator><call pos:start="35:29" pos:end="35:44"><name pos:start="35:29" pos:end="35:36">get_bits</name><argument_list pos:start="35:37" pos:end="35:44">(<argument pos:start="35:38" pos:end="35:40"><expr pos:start="35:38" pos:end="35:40"><operator pos:start="35:38" pos:end="35:38">&amp;</operator><name pos:start="35:39" pos:end="35:40">gb</name></expr></argument>, <argument pos:start="35:43" pos:end="35:43"><expr pos:start="35:43" pos:end="35:43"><literal type="number" pos:start="35:43" pos:end="35:43">4</literal></expr></argument>)</argument_list></call> <operator pos:start="35:46" pos:end="35:46">+</operator> <literal type="number" pos:start="35:48" pos:end="35:48">1</literal><operator pos:start="35:49" pos:end="35:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:40"><expr pos:start="37:5" pos:end="37:39"><name pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:18">image_width</name></name>  <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:39"><name pos:start="37:23" pos:end="37:30">get_bits</name><argument_list pos:start="37:31" pos:end="37:39">(<argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><operator pos:start="37:32" pos:end="37:32">&amp;</operator><name pos:start="37:33" pos:end="37:34">gb</name></expr></argument>, <argument pos:start="37:37" pos:end="37:38"><expr pos:start="37:37" pos:end="37:38"><literal type="number" pos:start="37:37" pos:end="37:38">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:50"><expr pos:start="39:5" pos:end="39:49"><name pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:19">block_height</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <literal type="number" pos:start="39:23" pos:end="39:24">16</literal> <operator pos:start="39:26" pos:end="39:26">*</operator> <operator pos:start="39:28" pos:end="39:28">(</operator><call pos:start="39:29" pos:end="39:44"><name pos:start="39:29" pos:end="39:36">get_bits</name><argument_list pos:start="39:37" pos:end="39:44">(<argument pos:start="39:38" pos:end="39:40"><expr pos:start="39:38" pos:end="39:40"><operator pos:start="39:38" pos:end="39:38">&amp;</operator><name pos:start="39:39" pos:end="39:40">gb</name></expr></argument>, <argument pos:start="39:43" pos:end="39:43"><expr pos:start="39:43" pos:end="39:43"><literal type="number" pos:start="39:43" pos:end="39:43">4</literal></expr></argument>)</argument_list></call> <operator pos:start="39:46" pos:end="39:46">+</operator> <literal type="number" pos:start="39:48" pos:end="39:48">1</literal><operator pos:start="39:49" pos:end="39:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:19">image_height</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:39"><name pos:start="41:23" pos:end="41:30">get_bits</name><argument_list pos:start="41:31" pos:end="41:39">(<argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><operator pos:start="41:32" pos:end="41:32">&amp;</operator><name pos:start="41:33" pos:end="41:34">gb</name></expr></argument>, <argument pos:start="41:37" pos:end="41:38"><expr pos:start="41:37" pos:end="41:38"><literal type="number" pos:start="41:37" pos:end="41:38">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="65:5"><if pos:start="45:5" pos:end="65:5">if <condition pos:start="45:8" pos:end="45:20">(<expr pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:14">ver</name></name> <operator pos:start="45:16" pos:end="45:17">==</operator> <literal type="number" pos:start="45:19" pos:end="45:19">2</literal></expr>)</condition> <block pos:start="45:22" pos:end="65:5">{<block_content pos:start="47:9" pos:end="63:9">

        <expr_stmt pos:start="47:9" pos:end="47:26"><expr pos:start="47:9" pos:end="47:25"><call pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:17">skip_bits</name><argument_list pos:start="47:18" pos:end="47:25">(<argument pos:start="47:19" pos:end="47:21"><expr pos:start="47:19" pos:end="47:21"><operator pos:start="47:19" pos:end="47:19">&amp;</operator><name pos:start="47:20" pos:end="47:21">gb</name></expr></argument>, <argument pos:start="47:24" pos:end="47:24"><expr pos:start="47:24" pos:end="47:24"><literal type="number" pos:start="47:24" pos:end="47:24">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:27">(<expr pos:start="49:13" pos:end="49:26"><call pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:21">get_bits1</name><argument_list pos:start="49:22" pos:end="49:26">(<argument pos:start="49:23" pos:end="49:25"><expr pos:start="49:23" pos:end="49:25"><operator pos:start="49:23" pos:end="49:23">&amp;</operator><name pos:start="49:24" pos:end="49:25">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:29" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:40">

            <expr_stmt pos:start="51:13" pos:end="51:51"><expr pos:start="51:13" pos:end="51:50"><call pos:start="51:13" pos:end="51:50"><name pos:start="51:13" pos:end="51:33">avpriv_request_sample</name><argument_list pos:start="51:34" pos:end="51:50">(<argument pos:start="51:35" pos:end="51:39"><expr pos:start="51:35" pos:end="51:39"><name pos:start="51:35" pos:end="51:39">avctx</name></expr></argument>, <argument pos:start="51:42" pos:end="51:49"><expr pos:start="51:42" pos:end="51:49"><literal type="string" pos:start="51:42" pos:end="51:49">"iframe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:40">return <expr pos:start="53:20" pos:end="53:39"><name pos:start="53:20" pos:end="53:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:27">(<expr pos:start="57:13" pos:end="57:26"><call pos:start="57:13" pos:end="57:26"><name pos:start="57:13" pos:end="57:21">get_bits1</name><argument_list pos:start="57:22" pos:end="57:26">(<argument pos:start="57:23" pos:end="57:25"><expr pos:start="57:23" pos:end="57:25"><operator pos:start="57:23" pos:end="57:23">&amp;</operator><name pos:start="57:24" pos:end="57:25">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:29" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:40">

            <expr_stmt pos:start="59:13" pos:end="59:59"><expr pos:start="59:13" pos:end="59:58"><call pos:start="59:13" pos:end="59:58"><name pos:start="59:13" pos:end="59:33">avpriv_request_sample</name><argument_list pos:start="59:34" pos:end="59:58">(<argument pos:start="59:35" pos:end="59:39"><expr pos:start="59:35" pos:end="59:39"><name pos:start="59:35" pos:end="59:39">avctx</name></expr></argument>, <argument pos:start="59:42" pos:end="59:57"><expr pos:start="59:42" pos:end="59:57"><literal type="string" pos:start="59:42" pos:end="59:57">"Custom palette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:40">return <expr pos:start="61:20" pos:end="61:39"><name pos:start="61:20" pos:end="61:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:72">/* calculate number of blocks and size of border (partial) blocks */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:48"><expr pos:start="71:5" pos:end="71:47"><name pos:start="71:5" pos:end="71:12">h_blocks</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <name pos:start="71:16" pos:end="71:29"><name pos:start="71:16" pos:end="71:16">s</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:29">image_width</name></name>  <operator pos:start="71:32" pos:end="71:32">/</operator> <name pos:start="71:34" pos:end="71:47"><name pos:start="71:34" pos:end="71:34">s</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:47">block_width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:48"><expr pos:start="73:5" pos:end="73:47"><name pos:start="73:5" pos:end="73:10">h_part</name>   <operator pos:start="73:14" pos:end="73:14">=</operator> <name pos:start="73:16" pos:end="73:29"><name pos:start="73:16" pos:end="73:16">s</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:29">image_width</name></name>  <operator pos:start="73:32" pos:end="73:32">%</operator> <name pos:start="73:34" pos:end="73:47"><name pos:start="73:34" pos:end="73:34">s</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:47">block_width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:49"><expr pos:start="75:5" pos:end="75:48"><name pos:start="75:5" pos:end="75:12">v_blocks</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <name pos:start="75:16" pos:end="75:30"><name pos:start="75:16" pos:end="75:16">s</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:30">image_height</name></name> <operator pos:start="75:32" pos:end="75:32">/</operator> <name pos:start="75:34" pos:end="75:48"><name pos:start="75:34" pos:end="75:34">s</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:48">block_height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:49"><expr pos:start="77:5" pos:end="77:48"><name pos:start="77:5" pos:end="77:10">v_part</name>   <operator pos:start="77:14" pos:end="77:14">=</operator> <name pos:start="77:16" pos:end="77:30"><name pos:start="77:16" pos:end="77:16">s</name><operator pos:start="77:17" pos:end="77:18">-&gt;</operator><name pos:start="77:19" pos:end="77:30">image_height</name></name> <operator pos:start="77:32" pos:end="77:32">%</operator> <name pos:start="77:34" pos:end="77:48"><name pos:start="77:34" pos:end="77:34">s</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:48">block_height</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="83:51">/* the block size could change between frames, make sure the buffer

     * is large enough, if not, get a larger one */</comment>

    <if_stmt pos:start="85:5" pos:end="129:5"><if pos:start="85:5" pos:end="129:5">if <condition pos:start="85:8" pos:end="85:57">(<expr pos:start="85:9" pos:end="85:56"><name pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:21">block_size</name></name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <name pos:start="85:25" pos:end="85:38"><name pos:start="85:25" pos:end="85:25">s</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:38">block_width</name></name> <operator pos:start="85:40" pos:end="85:40">*</operator> <name pos:start="85:42" pos:end="85:56"><name pos:start="85:42" pos:end="85:42">s</name><operator pos:start="85:43" pos:end="85:44">-&gt;</operator><name pos:start="85:45" pos:end="85:56">block_height</name></name></expr>)</condition> <block pos:start="85:59" pos:end="129:5">{<block_content pos:start="87:9" pos:end="127:9">

        <decl_stmt pos:start="87:9" pos:end="87:70"><decl pos:start="87:9" pos:end="87:64"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:25">tmpblock_size</name> <init pos:start="87:27" pos:end="87:64">= <expr pos:start="87:29" pos:end="87:64"><literal type="number" pos:start="87:29" pos:end="87:29">3</literal> <operator pos:start="87:31" pos:end="87:31">*</operator> <name pos:start="87:33" pos:end="87:46"><name pos:start="87:33" pos:end="87:33">s</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:46">block_width</name></name> <operator pos:start="87:48" pos:end="87:48">*</operator> <name pos:start="87:50" pos:end="87:64"><name pos:start="87:50" pos:end="87:50">s</name><operator pos:start="87:51" pos:end="87:52">-&gt;</operator><name pos:start="87:53" pos:end="87:64">block_height</name></name></expr></init></decl>, <decl pos:start="87:67" pos:end="87:69"><type ref="prev" pos:start="87:9" pos:end="87:11"/><name pos:start="87:67" pos:end="87:69">err</name></decl>;</decl_stmt>



        <if_stmt pos:start="91:9" pos:end="101:9"><if pos:start="91:9" pos:end="101:9">if <condition pos:start="91:12" pos:end="91:65">(<expr pos:start="91:13" pos:end="91:64"><operator pos:start="91:13" pos:end="91:13">(</operator><name pos:start="91:14" pos:end="91:16">err</name> <operator pos:start="91:18" pos:end="91:18">=</operator> <call pos:start="91:20" pos:end="91:59"><name pos:start="91:20" pos:end="91:30">av_reallocp</name><argument_list pos:start="91:31" pos:end="91:59">(<argument pos:start="91:32" pos:end="91:43"><expr pos:start="91:32" pos:end="91:43"><operator pos:start="91:32" pos:end="91:32">&amp;</operator><name pos:start="91:33" pos:end="91:43"><name pos:start="91:33" pos:end="91:33">s</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:43">tmpblock</name></name></expr></argument>, <argument pos:start="91:46" pos:end="91:58"><expr pos:start="91:46" pos:end="91:58"><name pos:start="91:46" pos:end="91:58">tmpblock_size</name></expr></argument>)</argument_list></call><operator pos:start="91:60" pos:end="91:60">)</operator> <operator pos:start="91:62" pos:end="91:62">&lt;</operator> <literal type="number" pos:start="91:64" pos:end="91:64">0</literal></expr>)</condition> <block pos:start="91:67" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:23">

            <expr_stmt pos:start="93:13" pos:end="93:30"><expr pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:25">block_size</name></name> <operator pos:start="93:27" pos:end="93:27">=</operator> <literal type="number" pos:start="93:29" pos:end="93:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="97:62"><expr pos:start="95:13" pos:end="97:61"><call pos:start="95:13" pos:end="97:61"><name pos:start="95:13" pos:end="95:18">av_log</name><argument_list pos:start="95:19" pos:end="97:61">(<argument pos:start="95:20" pos:end="95:24"><expr pos:start="95:20" pos:end="95:24"><name pos:start="95:20" pos:end="95:24">avctx</name></expr></argument>, <argument pos:start="95:27" pos:end="95:38"><expr pos:start="95:27" pos:end="95:38"><name pos:start="95:27" pos:end="95:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="97:20" pos:end="97:60"><expr pos:start="97:20" pos:end="97:60"><literal type="string" pos:start="97:20" pos:end="97:60">"Cannot allocate decompression buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:23">return <expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">err</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="103:9" pos:end="127:9"><if pos:start="103:9" pos:end="127:9">if <condition pos:start="103:12" pos:end="103:24">(<expr pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:18">ver</name></name> <operator pos:start="103:20" pos:end="103:21">==</operator> <literal type="number" pos:start="103:23" pos:end="103:23">2</literal></expr>)</condition> <block pos:start="103:26" pos:end="127:9">{<block_content pos:start="105:13" pos:end="125:13">

            <expr_stmt pos:start="105:13" pos:end="105:75"><expr pos:start="105:13" pos:end="105:74"><name pos:start="105:13" pos:end="105:33"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:33">deflate_block_size</name></name> <operator pos:start="105:35" pos:end="105:35">=</operator> <call pos:start="105:37" pos:end="105:74"><name pos:start="105:37" pos:end="105:59">calc_deflate_block_size</name><argument_list pos:start="105:60" pos:end="105:74">(<argument pos:start="105:61" pos:end="105:73"><expr pos:start="105:61" pos:end="105:73"><name pos:start="105:61" pos:end="105:73">tmpblock_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="115:13"><if pos:start="107:13" pos:end="115:13">if <condition pos:start="107:16" pos:end="107:43">(<expr pos:start="107:17" pos:end="107:42"><name pos:start="107:17" pos:end="107:37"><name pos:start="107:17" pos:end="107:17">s</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:37">deflate_block_size</name></name> <operator pos:start="107:39" pos:end="107:40">&lt;=</operator> <literal type="number" pos:start="107:42" pos:end="107:42">0</literal></expr>)</condition> <block pos:start="107:45" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:26">

                <expr_stmt pos:start="109:17" pos:end="111:66"><expr pos:start="109:17" pos:end="111:65"><call pos:start="109:17" pos:end="111:65"><name pos:start="109:17" pos:end="109:22">av_log</name><argument_list pos:start="109:23" pos:end="111:65">(<argument pos:start="109:24" pos:end="109:28"><expr pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:28">avctx</name></expr></argument>, <argument pos:start="109:31" pos:end="109:42"><expr pos:start="109:31" pos:end="109:42"><name pos:start="109:31" pos:end="109:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="111:24" pos:end="111:64"><expr pos:start="111:24" pos:end="111:64"><literal type="string" pos:start="111:24" pos:end="111:64">"Cannot determine deflate buffer size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="113:17" pos:end="113:26">return <expr pos:start="113:24" pos:end="113:25"><operator pos:start="113:24" pos:end="113:24">-</operator><literal type="number" pos:start="113:25" pos:end="113:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="117:13" pos:end="125:13"><if pos:start="117:13" pos:end="125:13">if <condition pos:start="117:16" pos:end="117:82">(<expr pos:start="117:17" pos:end="117:81"><operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:20">err</name> <operator pos:start="117:22" pos:end="117:22">=</operator> <call pos:start="117:24" pos:end="117:76"><name pos:start="117:24" pos:end="117:34">av_reallocp</name><argument_list pos:start="117:35" pos:end="117:76">(<argument pos:start="117:36" pos:end="117:52"><expr pos:start="117:36" pos:end="117:52"><operator pos:start="117:36" pos:end="117:36">&amp;</operator><name pos:start="117:37" pos:end="117:52"><name pos:start="117:37" pos:end="117:37">s</name><operator pos:start="117:38" pos:end="117:39">-&gt;</operator><name pos:start="117:40" pos:end="117:52">deflate_block</name></name></expr></argument>, <argument pos:start="117:55" pos:end="117:75"><expr pos:start="117:55" pos:end="117:75"><name pos:start="117:55" pos:end="117:75"><name pos:start="117:55" pos:end="117:55">s</name><operator pos:start="117:56" pos:end="117:57">-&gt;</operator><name pos:start="117:58" pos:end="117:75">deflate_block_size</name></name></expr></argument>)</argument_list></call><operator pos:start="117:77" pos:end="117:77">)</operator> <operator pos:start="117:79" pos:end="117:79">&lt;</operator> <literal type="number" pos:start="117:81" pos:end="117:81">0</literal></expr>)</condition> <block pos:start="117:84" pos:end="125:13">{<block_content pos:start="119:17" pos:end="123:27">

                <expr_stmt pos:start="119:17" pos:end="119:34"><expr pos:start="119:17" pos:end="119:33"><name pos:start="119:17" pos:end="119:29"><name pos:start="119:17" pos:end="119:17">s</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:29">block_size</name></name> <operator pos:start="119:31" pos:end="119:31">=</operator> <literal type="number" pos:start="119:33" pos:end="119:33">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:81"><expr pos:start="121:17" pos:end="121:80"><call pos:start="121:17" pos:end="121:80"><name pos:start="121:17" pos:end="121:22">av_log</name><argument_list pos:start="121:23" pos:end="121:80">(<argument pos:start="121:24" pos:end="121:28"><expr pos:start="121:24" pos:end="121:28"><name pos:start="121:24" pos:end="121:28">avctx</name></expr></argument>, <argument pos:start="121:31" pos:end="121:42"><expr pos:start="121:31" pos:end="121:42"><name pos:start="121:31" pos:end="121:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:45" pos:end="121:79"><expr pos:start="121:45" pos:end="121:79"><literal type="string" pos:start="121:45" pos:end="121:79">"Cannot allocate deflate buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="123:17" pos:end="123:27">return <expr pos:start="123:24" pos:end="123:26"><name pos:start="123:24" pos:end="123:26">err</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:53"><expr pos:start="131:5" pos:end="131:52"><name pos:start="131:5" pos:end="131:17"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:17">block_size</name></name> <operator pos:start="131:19" pos:end="131:19">=</operator> <name pos:start="131:21" pos:end="131:34"><name pos:start="131:21" pos:end="131:21">s</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:34">block_width</name></name> <operator pos:start="131:36" pos:end="131:36">*</operator> <name pos:start="131:38" pos:end="131:52"><name pos:start="131:38" pos:end="131:38">s</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:52">block_height</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:40">/* initialize the image size once */</comment>

    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:48">(<expr pos:start="137:9" pos:end="137:47"><name pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:13">avctx</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:20">width</name></name> <operator pos:start="137:22" pos:end="137:23">==</operator> <literal type="number" pos:start="137:25" pos:end="137:25">0</literal> <operator pos:start="137:27" pos:end="137:28">&amp;&amp;</operator> <name pos:start="137:30" pos:end="137:42"><name pos:start="137:30" pos:end="137:34">avctx</name><operator pos:start="137:35" pos:end="137:36">-&gt;</operator><name pos:start="137:37" pos:end="137:42">height</name></name> <operator pos:start="137:44" pos:end="137:45">==</operator> <literal type="number" pos:start="137:47" pos:end="137:47">0</literal></expr>)</condition> <block pos:start="137:50" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:40">

        <expr_stmt pos:start="139:9" pos:end="139:39"><expr pos:start="139:9" pos:end="139:38"><name pos:start="139:9" pos:end="139:20"><name pos:start="139:9" pos:end="139:13">avctx</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:20">width</name></name>  <operator pos:start="139:23" pos:end="139:23">=</operator> <name pos:start="139:25" pos:end="139:38"><name pos:start="139:25" pos:end="139:25">s</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:38">image_width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:40"><expr pos:start="141:9" pos:end="141:39"><name pos:start="141:9" pos:end="141:21"><name pos:start="141:9" pos:end="141:13">avctx</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:21">height</name></name> <operator pos:start="141:23" pos:end="141:23">=</operator> <name pos:start="141:25" pos:end="141:39"><name pos:start="141:25" pos:end="141:25">s</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:39">image_height</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:59">/* check for changes of image width and image height */</comment>

    <if_stmt pos:start="149:5" pos:end="161:5"><if pos:start="149:5" pos:end="161:5">if <condition pos:start="149:8" pos:end="149:75">(<expr pos:start="149:9" pos:end="149:74"><name pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:13">avctx</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:20">width</name></name> <operator pos:start="149:22" pos:end="149:23">!=</operator> <name pos:start="149:25" pos:end="149:38"><name pos:start="149:25" pos:end="149:25">s</name><operator pos:start="149:26" pos:end="149:27">-&gt;</operator><name pos:start="149:28" pos:end="149:38">image_width</name></name> <operator pos:start="149:40" pos:end="149:41">||</operator> <name pos:start="149:43" pos:end="149:55"><name pos:start="149:43" pos:end="149:47">avctx</name><operator pos:start="149:48" pos:end="149:49">-&gt;</operator><name pos:start="149:50" pos:end="149:55">height</name></name> <operator pos:start="149:57" pos:end="149:58">!=</operator> <name pos:start="149:60" pos:end="149:74"><name pos:start="149:60" pos:end="149:60">s</name><operator pos:start="149:61" pos:end="149:62">-&gt;</operator><name pos:start="149:63" pos:end="149:74">image_height</name></name></expr>)</condition> <block pos:start="149:77" pos:end="161:5">{<block_content pos:start="151:9" pos:end="159:35">

        <expr_stmt pos:start="151:9" pos:end="153:68"><expr pos:start="151:9" pos:end="153:67"><call pos:start="151:9" pos:end="153:67"><name pos:start="151:9" pos:end="151:14">av_log</name><argument_list pos:start="151:15" pos:end="153:67">(<argument pos:start="151:16" pos:end="151:20"><expr pos:start="151:16" pos:end="151:20"><name pos:start="151:16" pos:end="151:20">avctx</name></expr></argument>, <argument pos:start="151:23" pos:end="151:34"><expr pos:start="151:23" pos:end="151:34"><name pos:start="151:23" pos:end="151:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="153:16" pos:end="153:66"><expr pos:start="153:16" pos:end="153:66"><literal type="string" pos:start="153:16" pos:end="153:66">"Frame width or height differs from first frame!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="157:77"><expr pos:start="155:9" pos:end="157:76"><call pos:start="155:9" pos:end="157:76"><name pos:start="155:9" pos:end="155:14">av_log</name><argument_list pos:start="155:15" pos:end="157:76">(<argument pos:start="155:16" pos:end="155:20"><expr pos:start="155:16" pos:end="155:20"><name pos:start="155:16" pos:end="155:20">avctx</name></expr></argument>, <argument pos:start="155:23" pos:end="155:34"><expr pos:start="155:23" pos:end="155:34"><name pos:start="155:23" pos:end="155:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="155:37" pos:end="155:76"><expr pos:start="155:37" pos:end="155:76"><literal type="string" pos:start="155:37" pos:end="155:76">"fh = %d, fv %d  vs  ch = %d, cv = %d\n"</literal></expr></argument>,

               <argument pos:start="157:16" pos:end="157:28"><expr pos:start="157:16" pos:end="157:28"><name pos:start="157:16" pos:end="157:28"><name pos:start="157:16" pos:end="157:20">avctx</name><operator pos:start="157:21" pos:end="157:22">-&gt;</operator><name pos:start="157:23" pos:end="157:28">height</name></name></expr></argument>, <argument pos:start="157:31" pos:end="157:42"><expr pos:start="157:31" pos:end="157:42"><name pos:start="157:31" pos:end="157:42"><name pos:start="157:31" pos:end="157:35">avctx</name><operator pos:start="157:36" pos:end="157:37">-&gt;</operator><name pos:start="157:38" pos:end="157:42">width</name></name></expr></argument>, <argument pos:start="157:45" pos:end="157:59"><expr pos:start="157:45" pos:end="157:59"><name pos:start="157:45" pos:end="157:59"><name pos:start="157:45" pos:end="157:45">s</name><operator pos:start="157:46" pos:end="157:47">-&gt;</operator><name pos:start="157:48" pos:end="157:59">image_height</name></name></expr></argument>, <argument pos:start="157:62" pos:end="157:75"><expr pos:start="157:62" pos:end="157:75"><name pos:start="157:62" pos:end="157:75"><name pos:start="157:62" pos:end="157:62">s</name><operator pos:start="157:63" pos:end="157:64">-&gt;</operator><name pos:start="157:65" pos:end="157:75">image_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="159:9" pos:end="159:35">return <expr pos:start="159:16" pos:end="159:34"><name pos:start="159:16" pos:end="159:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:55">/* we care for keyframes only in Screen Video v2 */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:71"><expr pos:start="167:5" pos:end="167:70"><name pos:start="167:5" pos:end="167:18"><name pos:start="167:5" pos:end="167:5">s</name><operator pos:start="167:6" pos:end="167:7">-&gt;</operator><name pos:start="167:8" pos:end="167:18">is_keyframe</name></name> <operator pos:start="167:20" pos:end="167:20">=</operator> <operator pos:start="167:22" pos:end="167:22">(</operator><name pos:start="167:23" pos:end="167:34"><name pos:start="167:23" pos:end="167:27">avpkt</name><operator pos:start="167:28" pos:end="167:29">-&gt;</operator><name pos:start="167:30" pos:end="167:34">flags</name></name> <operator pos:start="167:36" pos:end="167:36">&amp;</operator> <name pos:start="167:38" pos:end="167:52">AV_PKT_FLAG_KEY</name><operator pos:start="167:53" pos:end="167:53">)</operator> <operator pos:start="167:55" pos:end="167:56">&amp;&amp;</operator> <operator pos:start="167:58" pos:end="167:58">(</operator><name pos:start="167:59" pos:end="167:64"><name pos:start="167:59" pos:end="167:59">s</name><operator pos:start="167:60" pos:end="167:61">-&gt;</operator><name pos:start="167:62" pos:end="167:64">ver</name></name> <operator pos:start="167:66" pos:end="167:67">==</operator> <literal type="number" pos:start="167:69" pos:end="167:69">2</literal><operator pos:start="167:70" pos:end="167:70">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="185:5"><if pos:start="169:5" pos:end="185:5">if <condition pos:start="169:8" pos:end="169:23">(<expr pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:22">is_keyframe</name></name></expr>)</condition> <block pos:start="169:25" pos:end="185:5">{<block_content pos:start="171:9" pos:end="183:23">

        <decl_stmt pos:start="171:9" pos:end="171:16"><decl pos:start="171:9" pos:end="171:15"><type pos:start="171:9" pos:end="171:11"><name pos:start="171:9" pos:end="171:11">int</name></type> <name pos:start="171:13" pos:end="171:15">err</name></decl>;</decl_stmt>

        <if_stmt pos:start="173:9" pos:end="175:23"><if pos:start="173:9" pos:end="175:23">if <condition pos:start="173:12" pos:end="173:67">(<expr pos:start="173:13" pos:end="173:66"><operator pos:start="173:13" pos:end="173:13">(</operator><name pos:start="173:14" pos:end="173:16">err</name> <operator pos:start="173:18" pos:end="173:18">=</operator> <call pos:start="173:20" pos:end="173:61"><name pos:start="173:20" pos:end="173:30">av_reallocp</name><argument_list pos:start="173:31" pos:end="173:61">(<argument pos:start="173:32" pos:end="173:47"><expr pos:start="173:32" pos:end="173:47"><operator pos:start="173:32" pos:end="173:32">&amp;</operator><name pos:start="173:33" pos:end="173:47"><name pos:start="173:33" pos:end="173:33">s</name><operator pos:start="173:34" pos:end="173:35">-&gt;</operator><name pos:start="173:36" pos:end="173:47">keyframedata</name></name></expr></argument>, <argument pos:start="173:50" pos:end="173:60"><expr pos:start="173:50" pos:end="173:60"><name pos:start="173:50" pos:end="173:60"><name pos:start="173:50" pos:end="173:54">avpkt</name><operator pos:start="173:55" pos:end="173:56">-&gt;</operator><name pos:start="173:57" pos:end="173:60">size</name></name></expr></argument>)</argument_list></call><operator pos:start="173:62" pos:end="173:62">)</operator> <operator pos:start="173:64" pos:end="173:64">&lt;</operator> <literal type="number" pos:start="173:66" pos:end="173:66">0</literal></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:23"><block_content pos:start="175:13" pos:end="175:23">

            <return pos:start="175:13" pos:end="175:23">return <expr pos:start="175:20" pos:end="175:22"><name pos:start="175:20" pos:end="175:22">err</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:58"><expr pos:start="177:9" pos:end="177:57"><call pos:start="177:9" pos:end="177:57"><name pos:start="177:9" pos:end="177:14">memcpy</name><argument_list pos:start="177:15" pos:end="177:57">(<argument pos:start="177:16" pos:end="177:30"><expr pos:start="177:16" pos:end="177:30"><name pos:start="177:16" pos:end="177:30"><name pos:start="177:16" pos:end="177:16">s</name><operator pos:start="177:17" pos:end="177:18">-&gt;</operator><name pos:start="177:19" pos:end="177:30">keyframedata</name></name></expr></argument>, <argument pos:start="177:33" pos:end="177:43"><expr pos:start="177:33" pos:end="177:43"><name pos:start="177:33" pos:end="177:43"><name pos:start="177:33" pos:end="177:37">avpkt</name><operator pos:start="177:38" pos:end="177:39">-&gt;</operator><name pos:start="177:40" pos:end="177:43">data</name></name></expr></argument>, <argument pos:start="177:46" pos:end="177:56"><expr pos:start="177:46" pos:end="177:56"><name pos:start="177:46" pos:end="177:56"><name pos:start="177:46" pos:end="177:50">avpkt</name><operator pos:start="177:51" pos:end="177:52">-&gt;</operator><name pos:start="177:53" pos:end="177:56">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="179:9" pos:end="183:23"><if pos:start="179:9" pos:end="183:23">if <condition pos:start="179:12" pos:end="181:82">(<expr pos:start="179:13" pos:end="181:81"><operator pos:start="179:13" pos:end="179:13">(</operator><name pos:start="179:14" pos:end="179:16">err</name> <operator pos:start="179:18" pos:end="179:18">=</operator> <call pos:start="179:20" pos:end="181:76"><name pos:start="179:20" pos:end="179:30">av_reallocp</name><argument_list pos:start="179:31" pos:end="181:76">(<argument pos:start="179:32" pos:end="179:41"><expr pos:start="179:32" pos:end="179:41"><operator pos:start="179:32" pos:end="179:32">&amp;</operator><name pos:start="179:33" pos:end="179:41"><name pos:start="179:33" pos:end="179:33">s</name><operator pos:start="179:34" pos:end="179:35">-&gt;</operator><name pos:start="179:36" pos:end="179:41">blocks</name></name></expr></argument>, <argument pos:start="179:44" pos:end="181:75"><expr pos:start="179:44" pos:end="181:75"><operator pos:start="179:44" pos:end="179:44">(</operator><name pos:start="179:45" pos:end="179:52">v_blocks</name> <operator pos:start="179:54" pos:end="179:54">+</operator> <operator pos:start="179:56" pos:end="179:56">!</operator><operator pos:start="179:57" pos:end="179:57">!</operator><name pos:start="179:58" pos:end="179:63">v_part</name><operator pos:start="179:64" pos:end="179:64">)</operator> <operator pos:start="179:66" pos:end="179:66">*</operator>

                               <operator pos:start="181:32" pos:end="181:32">(</operator><name pos:start="181:33" pos:end="181:40">h_blocks</name> <operator pos:start="181:42" pos:end="181:42">+</operator> <operator pos:start="181:44" pos:end="181:44">!</operator><operator pos:start="181:45" pos:end="181:45">!</operator><name pos:start="181:46" pos:end="181:51">h_part</name><operator pos:start="181:52" pos:end="181:52">)</operator> <operator pos:start="181:54" pos:end="181:54">*</operator> <sizeof pos:start="181:56" pos:end="181:75">sizeof<argument_list pos:start="181:62" pos:end="181:75">(<argument pos:start="181:63" pos:end="181:74"><expr pos:start="181:63" pos:end="181:74"><name pos:start="181:63" pos:end="181:74"><name pos:start="181:63" pos:end="181:63">s</name><operator pos:start="181:64" pos:end="181:65">-&gt;</operator><name pos:start="181:66" pos:end="181:71">blocks</name><index pos:start="181:72" pos:end="181:74">[<expr pos:start="181:73" pos:end="181:73"><literal type="number" pos:start="181:73" pos:end="181:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="181:77" pos:end="181:77">)</operator> <operator pos:start="181:79" pos:end="181:79">&lt;</operator> <literal type="number" pos:start="181:81" pos:end="181:81">0</literal></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="183:23"><block_content pos:start="183:13" pos:end="183:23">

            <return pos:start="183:13" pos:end="183:23">return <expr pos:start="183:20" pos:end="183:22"><name pos:start="183:20" pos:end="183:22">err</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="189:5" pos:end="193:48"><expr pos:start="189:5" pos:end="193:47"><call pos:start="189:5" pos:end="193:47"><name pos:start="189:5" pos:end="189:11">ff_dlog</name><argument_list pos:start="189:12" pos:end="193:47">(<argument pos:start="189:13" pos:end="189:17"><expr pos:start="189:13" pos:end="189:17"><name pos:start="189:13" pos:end="189:17">avctx</name></expr></argument>, <argument pos:start="189:20" pos:end="189:71"><expr pos:start="189:20" pos:end="189:71"><literal type="string" pos:start="189:20" pos:end="189:71">"image: %dx%d block: %dx%d num: %dx%d part: %dx%d\n"</literal></expr></argument>,

            <argument pos:start="191:13" pos:end="191:26"><expr pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:13">s</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:26">image_width</name></name></expr></argument>, <argument pos:start="191:29" pos:end="191:43"><expr pos:start="191:29" pos:end="191:43"><name pos:start="191:29" pos:end="191:43"><name pos:start="191:29" pos:end="191:29">s</name><operator pos:start="191:30" pos:end="191:31">-&gt;</operator><name pos:start="191:32" pos:end="191:43">image_height</name></name></expr></argument>, <argument pos:start="191:46" pos:end="191:59"><expr pos:start="191:46" pos:end="191:59"><name pos:start="191:46" pos:end="191:59"><name pos:start="191:46" pos:end="191:46">s</name><operator pos:start="191:47" pos:end="191:48">-&gt;</operator><name pos:start="191:49" pos:end="191:59">block_width</name></name></expr></argument>, <argument pos:start="191:62" pos:end="191:76"><expr pos:start="191:62" pos:end="191:76"><name pos:start="191:62" pos:end="191:76"><name pos:start="191:62" pos:end="191:62">s</name><operator pos:start="191:63" pos:end="191:64">-&gt;</operator><name pos:start="191:65" pos:end="191:76">block_height</name></name></expr></argument>,

            <argument pos:start="193:13" pos:end="193:20"><expr pos:start="193:13" pos:end="193:20"><name pos:start="193:13" pos:end="193:20">h_blocks</name></expr></argument>, <argument pos:start="193:23" pos:end="193:30"><expr pos:start="193:23" pos:end="193:30"><name pos:start="193:23" pos:end="193:30">v_blocks</name></expr></argument>, <argument pos:start="193:33" pos:end="193:38"><expr pos:start="193:33" pos:end="193:38"><name pos:start="193:33" pos:end="193:38">h_part</name></expr></argument>, <argument pos:start="193:41" pos:end="193:46"><expr pos:start="193:41" pos:end="193:46"><name pos:start="193:41" pos:end="193:46">v_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="197:5" pos:end="203:5"><if pos:start="197:5" pos:end="203:5">if <condition pos:start="197:8" pos:end="197:53">(<expr pos:start="197:9" pos:end="197:52"><operator pos:start="197:9" pos:end="197:9">(</operator><name pos:start="197:10" pos:end="197:12">ret</name> <operator pos:start="197:14" pos:end="197:14">=</operator> <call pos:start="197:16" pos:end="197:47"><name pos:start="197:16" pos:end="197:30">ff_reget_buffer</name><argument_list pos:start="197:31" pos:end="197:47">(<argument pos:start="197:32" pos:end="197:36"><expr pos:start="197:32" pos:end="197:36"><name pos:start="197:32" pos:end="197:36">avctx</name></expr></argument>, <argument pos:start="197:39" pos:end="197:46"><expr pos:start="197:39" pos:end="197:46"><name pos:start="197:39" pos:end="197:46"><name pos:start="197:39" pos:end="197:39">s</name><operator pos:start="197:40" pos:end="197:41">-&gt;</operator><name pos:start="197:42" pos:end="197:46">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="197:48" pos:end="197:48">)</operator> <operator pos:start="197:50" pos:end="197:50">&lt;</operator> <literal type="number" pos:start="197:52" pos:end="197:52">0</literal></expr>)</condition> <block pos:start="197:55" pos:end="203:5">{<block_content pos:start="199:9" pos:end="201:19">

        <expr_stmt pos:start="199:9" pos:end="199:63"><expr pos:start="199:9" pos:end="199:62"><call pos:start="199:9" pos:end="199:62"><name pos:start="199:9" pos:end="199:14">av_log</name><argument_list pos:start="199:15" pos:end="199:62">(<argument pos:start="199:16" pos:end="199:20"><expr pos:start="199:16" pos:end="199:20"><name pos:start="199:16" pos:end="199:20">avctx</name></expr></argument>, <argument pos:start="199:23" pos:end="199:34"><expr pos:start="199:23" pos:end="199:34"><name pos:start="199:23" pos:end="199:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:37" pos:end="199:61"><expr pos:start="199:37" pos:end="199:61"><literal type="string" pos:start="199:37" pos:end="199:61">"reget_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="201:9" pos:end="201:19">return <expr pos:start="201:16" pos:end="201:18"><name pos:start="201:16" pos:end="201:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:37">/* loop over all block columns */</comment>

    <for pos:start="209:5" pos:end="409:5">for <control pos:start="209:9" pos:end="209:53">(<init pos:start="209:10" pos:end="209:15"><expr pos:start="209:10" pos:end="209:14"><name pos:start="209:10" pos:end="209:10">j</name> <operator pos:start="209:12" pos:end="209:12">=</operator> <literal type="number" pos:start="209:14" pos:end="209:14">0</literal></expr>;</init> <condition pos:start="209:17" pos:end="209:48"><expr pos:start="209:17" pos:end="209:47"><name pos:start="209:17" pos:end="209:17">j</name> <operator pos:start="209:19" pos:end="209:19">&lt;</operator> <name pos:start="209:21" pos:end="209:28">v_blocks</name> <operator pos:start="209:30" pos:end="209:30">+</operator> <operator pos:start="209:32" pos:end="209:32">(</operator><ternary pos:start="209:33" pos:end="209:46"><condition pos:start="209:33" pos:end="209:40"><expr pos:start="209:33" pos:end="209:38"><name pos:start="209:33" pos:end="209:38">v_part</name></expr> ?</condition><then pos:start="209:42" pos:end="209:42"> <expr pos:start="209:42" pos:end="209:42"><literal type="number" pos:start="209:42" pos:end="209:42">1</literal></expr> </then><else pos:start="209:44" pos:end="209:46">: <expr pos:start="209:46" pos:end="209:46"><literal type="number" pos:start="209:46" pos:end="209:46">0</literal></expr></else></ternary><operator pos:start="209:47" pos:end="209:47">)</operator></expr>;</condition> <incr pos:start="209:50" pos:end="209:52"><expr pos:start="209:50" pos:end="209:52"><name pos:start="209:50" pos:end="209:50">j</name><operator pos:start="209:51" pos:end="209:52">++</operator></expr></incr>)</control> <block pos:start="209:55" pos:end="409:5">{<block_content pos:start="213:9" pos:end="407:9">



        <decl_stmt pos:start="213:9" pos:end="213:41"><decl pos:start="213:9" pos:end="213:40"><type pos:start="213:9" pos:end="213:11"><name pos:start="213:9" pos:end="213:11">int</name></type> <name pos:start="213:13" pos:end="213:17">y_pos</name>  <init pos:start="213:20" pos:end="213:40">= <expr pos:start="213:22" pos:end="213:40"><name pos:start="213:22" pos:end="213:22">j</name> <operator pos:start="213:24" pos:end="213:24">*</operator> <name pos:start="213:26" pos:end="213:40"><name pos:start="213:26" pos:end="213:26">s</name><operator pos:start="213:27" pos:end="213:28">-&gt;</operator><name pos:start="213:29" pos:end="213:40">block_height</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="213:43" pos:end="213:71">// vertical position in frame</comment>

        <decl_stmt pos:start="215:9" pos:end="215:71"><decl pos:start="215:9" pos:end="215:70"><type pos:start="215:9" pos:end="215:11"><name pos:start="215:9" pos:end="215:11">int</name></type> <name pos:start="215:13" pos:end="215:26">cur_blk_height</name> <init pos:start="215:28" pos:end="215:70">= <expr pos:start="215:30" pos:end="215:70"><ternary pos:start="215:30" pos:end="215:70"><condition pos:start="215:30" pos:end="215:45"><expr pos:start="215:30" pos:end="215:43"><operator pos:start="215:30" pos:end="215:30">(</operator><name pos:start="215:31" pos:end="215:31">j</name> <operator pos:start="215:33" pos:end="215:33">&lt;</operator> <name pos:start="215:35" pos:end="215:42">v_blocks</name><operator pos:start="215:43" pos:end="215:43">)</operator></expr> ?</condition><then pos:start="215:47" pos:end="215:61"> <expr pos:start="215:47" pos:end="215:61"><name pos:start="215:47" pos:end="215:61"><name pos:start="215:47" pos:end="215:47">s</name><operator pos:start="215:48" pos:end="215:49">-&gt;</operator><name pos:start="215:50" pos:end="215:61">block_height</name></name></expr> </then><else pos:start="215:63" pos:end="215:70">: <expr pos:start="215:65" pos:end="215:70"><name pos:start="215:65" pos:end="215:70">v_part</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="219:9" pos:end="219:38">/* loop over all block rows */</comment>

        <for pos:start="221:9" pos:end="407:9">for <control pos:start="221:13" pos:end="221:57">(<init pos:start="221:14" pos:end="221:19"><expr pos:start="221:14" pos:end="221:18"><name pos:start="221:14" pos:end="221:14">i</name> <operator pos:start="221:16" pos:end="221:16">=</operator> <literal type="number" pos:start="221:18" pos:end="221:18">0</literal></expr>;</init> <condition pos:start="221:21" pos:end="221:52"><expr pos:start="221:21" pos:end="221:51"><name pos:start="221:21" pos:end="221:21">i</name> <operator pos:start="221:23" pos:end="221:23">&lt;</operator> <name pos:start="221:25" pos:end="221:32">h_blocks</name> <operator pos:start="221:34" pos:end="221:34">+</operator> <operator pos:start="221:36" pos:end="221:36">(</operator><ternary pos:start="221:37" pos:end="221:50"><condition pos:start="221:37" pos:end="221:44"><expr pos:start="221:37" pos:end="221:42"><name pos:start="221:37" pos:end="221:42">h_part</name></expr> ?</condition><then pos:start="221:46" pos:end="221:46"> <expr pos:start="221:46" pos:end="221:46"><literal type="number" pos:start="221:46" pos:end="221:46">1</literal></expr> </then><else pos:start="221:48" pos:end="221:50">: <expr pos:start="221:50" pos:end="221:50"><literal type="number" pos:start="221:50" pos:end="221:50">0</literal></expr></else></ternary><operator pos:start="221:51" pos:end="221:51">)</operator></expr>;</condition> <incr pos:start="221:54" pos:end="221:56"><expr pos:start="221:54" pos:end="221:56"><name pos:start="221:54" pos:end="221:54">i</name><operator pos:start="221:55" pos:end="221:56">++</operator></expr></incr>)</control> <block pos:start="221:59" pos:end="407:9">{<block_content pos:start="223:13" pos:end="405:13">

            <decl_stmt pos:start="223:13" pos:end="223:43"><decl pos:start="223:13" pos:end="223:42"><type pos:start="223:13" pos:end="223:15"><name pos:start="223:13" pos:end="223:15">int</name></type> <name pos:start="223:17" pos:end="223:21">x_pos</name> <init pos:start="223:23" pos:end="223:42">= <expr pos:start="223:25" pos:end="223:42"><name pos:start="223:25" pos:end="223:25">i</name> <operator pos:start="223:27" pos:end="223:27">*</operator> <name pos:start="223:29" pos:end="223:42"><name pos:start="223:29" pos:end="223:29">s</name><operator pos:start="223:30" pos:end="223:31">-&gt;</operator><name pos:start="223:32" pos:end="223:42">block_width</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="223:45" pos:end="223:75">// horizontal position in frame</comment>

            <decl_stmt pos:start="225:13" pos:end="225:73"><decl pos:start="225:13" pos:end="225:72"><type pos:start="225:13" pos:end="225:15"><name pos:start="225:13" pos:end="225:15">int</name></type> <name pos:start="225:17" pos:end="225:29">cur_blk_width</name> <init pos:start="225:31" pos:end="225:72">= <expr pos:start="225:33" pos:end="225:72"><ternary pos:start="225:33" pos:end="225:72"><condition pos:start="225:33" pos:end="225:48"><expr pos:start="225:33" pos:end="225:46"><operator pos:start="225:33" pos:end="225:33">(</operator><name pos:start="225:34" pos:end="225:34">i</name> <operator pos:start="225:36" pos:end="225:36">&lt;</operator> <name pos:start="225:38" pos:end="225:45">h_blocks</name><operator pos:start="225:46" pos:end="225:46">)</operator></expr> ?</condition><then pos:start="225:50" pos:end="225:63"> <expr pos:start="225:50" pos:end="225:63"><name pos:start="225:50" pos:end="225:63"><name pos:start="225:50" pos:end="225:50">s</name><operator pos:start="225:51" pos:end="225:52">-&gt;</operator><name pos:start="225:53" pos:end="225:63">block_width</name></name></expr> </then><else pos:start="225:65" pos:end="225:72">: <expr pos:start="225:67" pos:end="225:72"><name pos:start="225:67" pos:end="225:72">h_part</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="227:13" pos:end="227:29"><decl pos:start="227:13" pos:end="227:28"><type pos:start="227:13" pos:end="227:15"><name pos:start="227:13" pos:end="227:15">int</name></type> <name pos:start="227:17" pos:end="227:24">has_diff</name> <init pos:start="227:26" pos:end="227:28">= <expr pos:start="227:28" pos:end="227:28"><literal type="number" pos:start="227:28" pos:end="227:28">0</literal></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="231:13" pos:end="231:59">/* get the size of the compressed zlib chunk */</comment>

            <decl_stmt pos:start="233:13" pos:end="233:41"><decl pos:start="233:13" pos:end="233:40"><type pos:start="233:13" pos:end="233:15"><name pos:start="233:13" pos:end="233:15">int</name></type> <name pos:start="233:17" pos:end="233:20">size</name> <init pos:start="233:22" pos:end="233:40">= <expr pos:start="233:24" pos:end="233:40"><call pos:start="233:24" pos:end="233:40"><name pos:start="233:24" pos:end="233:31">get_bits</name><argument_list pos:start="233:32" pos:end="233:40">(<argument pos:start="233:33" pos:end="233:35"><expr pos:start="233:33" pos:end="233:35"><operator pos:start="233:33" pos:end="233:33">&amp;</operator><name pos:start="233:34" pos:end="233:35">gb</name></expr></argument>, <argument pos:start="233:38" pos:end="233:39"><expr pos:start="233:38" pos:end="233:39"><literal type="number" pos:start="233:38" pos:end="233:39">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="237:13" pos:end="237:34"><expr pos:start="237:13" pos:end="237:33"><name pos:start="237:13" pos:end="237:26"><name pos:start="237:13" pos:end="237:13">s</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:26">color_depth</name></name>    <operator pos:start="237:31" pos:end="237:31">=</operator> <literal type="number" pos:start="237:33" pos:end="237:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:34"><expr pos:start="239:13" pos:end="239:33"><name pos:start="239:13" pos:end="239:29"><name pos:start="239:13" pos:end="239:13">s</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:29">zlibprime_curr</name></name> <operator pos:start="239:31" pos:end="239:31">=</operator> <literal type="number" pos:start="239:33" pos:end="239:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:34"><expr pos:start="241:13" pos:end="241:33"><name pos:start="241:13" pos:end="241:29"><name pos:start="241:13" pos:end="241:13">s</name><operator pos:start="241:14" pos:end="241:15">-&gt;</operator><name pos:start="241:16" pos:end="241:29">zlibprime_prev</name></name> <operator pos:start="241:31" pos:end="241:31">=</operator> <literal type="number" pos:start="241:33" pos:end="241:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:34"><expr pos:start="243:13" pos:end="243:33"><name pos:start="243:13" pos:end="243:25"><name pos:start="243:13" pos:end="243:13">s</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:25">diff_start</name></name>     <operator pos:start="243:31" pos:end="243:31">=</operator> <literal type="number" pos:start="243:33" pos:end="243:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:47"><expr pos:start="245:13" pos:end="245:46"><name pos:start="245:13" pos:end="245:26"><name pos:start="245:13" pos:end="245:13">s</name><operator pos:start="245:14" pos:end="245:15">-&gt;</operator><name pos:start="245:16" pos:end="245:26">diff_height</name></name>    <operator pos:start="245:31" pos:end="245:31">=</operator> <name pos:start="245:33" pos:end="245:46">cur_blk_height</name></expr>;</expr_stmt>



            <if_stmt pos:start="249:13" pos:end="255:13"><if pos:start="249:13" pos:end="255:13">if <condition pos:start="249:16" pos:end="249:46">(<expr pos:start="249:17" pos:end="249:45"><literal type="number" pos:start="249:17" pos:end="249:17">8</literal> <operator pos:start="249:19" pos:end="249:19">*</operator> <name pos:start="249:21" pos:end="249:24">size</name> <operator pos:start="249:26" pos:end="249:26">&gt;</operator> <call pos:start="249:28" pos:end="249:45"><name pos:start="249:28" pos:end="249:40">get_bits_left</name><argument_list pos:start="249:41" pos:end="249:45">(<argument pos:start="249:42" pos:end="249:44"><expr pos:start="249:42" pos:end="249:44"><operator pos:start="249:42" pos:end="249:42">&amp;</operator><name pos:start="249:43" pos:end="249:44">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="249:48" pos:end="255:13">{<block_content pos:start="251:17" pos:end="253:43">

                <expr_stmt pos:start="251:17" pos:end="251:41"><expr pos:start="251:17" pos:end="251:40"><call pos:start="251:17" pos:end="251:40"><name pos:start="251:17" pos:end="251:30">av_frame_unref</name><argument_list pos:start="251:31" pos:end="251:40">(<argument pos:start="251:32" pos:end="251:39"><expr pos:start="251:32" pos:end="251:39"><name pos:start="251:32" pos:end="251:39"><name pos:start="251:32" pos:end="251:32">s</name><operator pos:start="251:33" pos:end="251:34">-&gt;</operator><name pos:start="251:35" pos:end="251:39">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="253:17" pos:end="253:43">return <expr pos:start="253:24" pos:end="253:42"><name pos:start="253:24" pos:end="253:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="259:13" pos:end="363:13"><if pos:start="259:13" pos:end="363:13">if <condition pos:start="259:16" pos:end="259:36">(<expr pos:start="259:17" pos:end="259:35"><name pos:start="259:17" pos:end="259:22"><name pos:start="259:17" pos:end="259:17">s</name><operator pos:start="259:18" pos:end="259:19">-&gt;</operator><name pos:start="259:20" pos:end="259:22">ver</name></name> <operator pos:start="259:24" pos:end="259:25">==</operator> <literal type="number" pos:start="259:27" pos:end="259:27">2</literal> <operator pos:start="259:29" pos:end="259:30">&amp;&amp;</operator> <name pos:start="259:32" pos:end="259:35">size</name></expr>)</condition> <block pos:start="259:38" pos:end="363:13">{<block_content pos:start="261:17" pos:end="361:23">

                <expr_stmt pos:start="261:17" pos:end="261:34"><expr pos:start="261:17" pos:end="261:33"><call pos:start="261:17" pos:end="261:33"><name pos:start="261:17" pos:end="261:25">skip_bits</name><argument_list pos:start="261:26" pos:end="261:33">(<argument pos:start="261:27" pos:end="261:29"><expr pos:start="261:27" pos:end="261:29"><operator pos:start="261:27" pos:end="261:27">&amp;</operator><name pos:start="261:28" pos:end="261:29">gb</name></expr></argument>, <argument pos:start="261:32" pos:end="261:32"><expr pos:start="261:32" pos:end="261:32"><literal type="number" pos:start="261:32" pos:end="261:32">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:53"><expr pos:start="263:17" pos:end="263:52"><name pos:start="263:17" pos:end="263:30"><name pos:start="263:17" pos:end="263:17">s</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:30">color_depth</name></name>    <operator pos:start="263:35" pos:end="263:35">=</operator> <call pos:start="263:37" pos:end="263:52"><name pos:start="263:37" pos:end="263:44">get_bits</name><argument_list pos:start="263:45" pos:end="263:52">(<argument pos:start="263:46" pos:end="263:48"><expr pos:start="263:46" pos:end="263:48"><operator pos:start="263:46" pos:end="263:46">&amp;</operator><name pos:start="263:47" pos:end="263:48">gb</name></expr></argument>, <argument pos:start="263:51" pos:end="263:51"><expr pos:start="263:51" pos:end="263:51"><literal type="number" pos:start="263:51" pos:end="263:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:51"><expr pos:start="265:17" pos:end="265:50"><name pos:start="265:17" pos:end="265:24">has_diff</name>          <operator pos:start="265:35" pos:end="265:35">=</operator> <call pos:start="265:37" pos:end="265:50"><name pos:start="265:37" pos:end="265:45">get_bits1</name><argument_list pos:start="265:46" pos:end="265:50">(<argument pos:start="265:47" pos:end="265:49"><expr pos:start="265:47" pos:end="265:49"><operator pos:start="265:47" pos:end="265:47">&amp;</operator><name pos:start="265:48" pos:end="265:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:51"><expr pos:start="267:17" pos:end="267:50"><name pos:start="267:17" pos:end="267:33"><name pos:start="267:17" pos:end="267:17">s</name><operator pos:start="267:18" pos:end="267:19">-&gt;</operator><name pos:start="267:20" pos:end="267:33">zlibprime_curr</name></name> <operator pos:start="267:35" pos:end="267:35">=</operator> <call pos:start="267:37" pos:end="267:50"><name pos:start="267:37" pos:end="267:45">get_bits1</name><argument_list pos:start="267:46" pos:end="267:50">(<argument pos:start="267:47" pos:end="267:49"><expr pos:start="267:47" pos:end="267:49"><operator pos:start="267:47" pos:end="267:47">&amp;</operator><name pos:start="267:48" pos:end="267:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:51"><expr pos:start="269:17" pos:end="269:50"><name pos:start="269:17" pos:end="269:33"><name pos:start="269:17" pos:end="269:17">s</name><operator pos:start="269:18" pos:end="269:19">-&gt;</operator><name pos:start="269:20" pos:end="269:33">zlibprime_prev</name></name> <operator pos:start="269:35" pos:end="269:35">=</operator> <call pos:start="269:37" pos:end="269:50"><name pos:start="269:37" pos:end="269:45">get_bits1</name><argument_list pos:start="269:46" pos:end="269:50">(<argument pos:start="269:47" pos:end="269:49"><expr pos:start="269:47" pos:end="269:49"><operator pos:start="269:47" pos:end="269:47">&amp;</operator><name pos:start="269:48" pos:end="269:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="273:17" pos:end="283:17"><if pos:start="273:17" pos:end="283:17">if <condition pos:start="273:20" pos:end="273:63">(<expr pos:start="273:21" pos:end="273:62"><name pos:start="273:21" pos:end="273:34"><name pos:start="273:21" pos:end="273:21">s</name><operator pos:start="273:22" pos:end="273:23">-&gt;</operator><name pos:start="273:24" pos:end="273:34">color_depth</name></name> <operator pos:start="273:36" pos:end="273:37">!=</operator> <literal type="number" pos:start="273:39" pos:end="273:39">0</literal> <operator pos:start="273:41" pos:end="273:42">&amp;&amp;</operator> <name pos:start="273:44" pos:end="273:57"><name pos:start="273:44" pos:end="273:44">s</name><operator pos:start="273:45" pos:end="273:46">-&gt;</operator><name pos:start="273:47" pos:end="273:57">color_depth</name></name> <operator pos:start="273:59" pos:end="273:60">!=</operator> <literal type="number" pos:start="273:62" pos:end="273:62">2</literal></expr>)</condition> <block pos:start="273:65" pos:end="283:17">{<block_content pos:start="275:21" pos:end="281:47">

                    <expr_stmt pos:start="275:21" pos:end="279:49"><expr pos:start="275:21" pos:end="279:48"><call pos:start="275:21" pos:end="279:48"><name pos:start="275:21" pos:end="275:26">av_log</name><argument_list pos:start="275:27" pos:end="279:48">(<argument pos:start="275:28" pos:end="275:32"><expr pos:start="275:28" pos:end="275:32"><name pos:start="275:28" pos:end="275:32">avctx</name></expr></argument>, <argument pos:start="275:35" pos:end="275:46"><expr pos:start="275:35" pos:end="275:46"><name pos:start="275:35" pos:end="275:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="277:28" pos:end="277:59"><expr pos:start="277:28" pos:end="277:59"><literal type="string" pos:start="277:28" pos:end="277:59">"%dx%d invalid color depth %d\n"</literal></expr></argument>,

                           <argument pos:start="279:28" pos:end="279:28"><expr pos:start="279:28" pos:end="279:28"><name pos:start="279:28" pos:end="279:28">i</name></expr></argument>, <argument pos:start="279:31" pos:end="279:31"><expr pos:start="279:31" pos:end="279:31"><name pos:start="279:31" pos:end="279:31">j</name></expr></argument>, <argument pos:start="279:34" pos:end="279:47"><expr pos:start="279:34" pos:end="279:47"><name pos:start="279:34" pos:end="279:47"><name pos:start="279:34" pos:end="279:34">s</name><operator pos:start="279:35" pos:end="279:36">-&gt;</operator><name pos:start="279:37" pos:end="279:47">color_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="281:21" pos:end="281:47">return <expr pos:start="281:28" pos:end="281:46"><name pos:start="281:28" pos:end="281:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="287:17" pos:end="323:17"><if pos:start="287:17" pos:end="323:17">if <condition pos:start="287:20" pos:end="287:29">(<expr pos:start="287:21" pos:end="287:28"><name pos:start="287:21" pos:end="287:28">has_diff</name></expr>)</condition> <block pos:start="287:31" pos:end="323:17">{<block_content pos:start="289:21" pos:end="321:30">

                    <if_stmt pos:start="289:21" pos:end="297:21"><if pos:start="289:21" pos:end="297:21">if <condition pos:start="289:24" pos:end="289:37">(<expr pos:start="289:25" pos:end="289:36"><operator pos:start="289:25" pos:end="289:25">!</operator><name pos:start="289:26" pos:end="289:36"><name pos:start="289:26" pos:end="289:26">s</name><operator pos:start="289:27" pos:end="289:28">-&gt;</operator><name pos:start="289:29" pos:end="289:36">keyframe</name></name></expr>)</condition> <block pos:start="289:39" pos:end="297:21">{<block_content pos:start="291:25" pos:end="295:51">

                        <expr_stmt pos:start="291:25" pos:end="293:65"><expr pos:start="291:25" pos:end="293:64"><call pos:start="291:25" pos:end="293:64"><name pos:start="291:25" pos:end="291:30">av_log</name><argument_list pos:start="291:31" pos:end="293:64">(<argument pos:start="291:32" pos:end="291:36"><expr pos:start="291:32" pos:end="291:36"><name pos:start="291:32" pos:end="291:36">avctx</name></expr></argument>, <argument pos:start="291:39" pos:end="291:50"><expr pos:start="291:39" pos:end="291:50"><name pos:start="291:39" pos:end="291:50">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="293:32" pos:end="293:63"><expr pos:start="293:32" pos:end="293:63"><literal type="string" pos:start="293:32" pos:end="293:63">"Inter frame without keyframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="295:25" pos:end="295:51">return <expr pos:start="295:32" pos:end="295:50"><name pos:start="295:32" pos:end="295:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="299:21" pos:end="299:54"><expr pos:start="299:21" pos:end="299:53"><name pos:start="299:21" pos:end="299:33"><name pos:start="299:21" pos:end="299:21">s</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:33">diff_start</name></name>  <operator pos:start="299:36" pos:end="299:36">=</operator> <call pos:start="299:38" pos:end="299:53"><name pos:start="299:38" pos:end="299:45">get_bits</name><argument_list pos:start="299:46" pos:end="299:53">(<argument pos:start="299:47" pos:end="299:49"><expr pos:start="299:47" pos:end="299:49"><operator pos:start="299:47" pos:end="299:47">&amp;</operator><name pos:start="299:48" pos:end="299:49">gb</name></expr></argument>, <argument pos:start="299:52" pos:end="299:52"><expr pos:start="299:52" pos:end="299:52"><literal type="number" pos:start="299:52" pos:end="299:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:54"><expr pos:start="301:21" pos:end="301:53"><name pos:start="301:21" pos:end="301:34"><name pos:start="301:21" pos:end="301:21">s</name><operator pos:start="301:22" pos:end="301:23">-&gt;</operator><name pos:start="301:24" pos:end="301:34">diff_height</name></name> <operator pos:start="301:36" pos:end="301:36">=</operator> <call pos:start="301:38" pos:end="301:53"><name pos:start="301:38" pos:end="301:45">get_bits</name><argument_list pos:start="301:46" pos:end="301:53">(<argument pos:start="301:47" pos:end="301:49"><expr pos:start="301:47" pos:end="301:49"><operator pos:start="301:47" pos:end="301:47">&amp;</operator><name pos:start="301:48" pos:end="301:49">gb</name></expr></argument>, <argument pos:start="301:52" pos:end="301:52"><expr pos:start="301:52" pos:end="301:52"><literal type="number" pos:start="301:52" pos:end="301:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="303:21" pos:end="313:21"><if pos:start="303:21" pos:end="313:21">if <condition pos:start="303:24" pos:end="303:72">(<expr pos:start="303:25" pos:end="303:71"><name pos:start="303:25" pos:end="303:37"><name pos:start="303:25" pos:end="303:25">s</name><operator pos:start="303:26" pos:end="303:27">-&gt;</operator><name pos:start="303:28" pos:end="303:37">diff_start</name></name> <operator pos:start="303:39" pos:end="303:39">+</operator> <name pos:start="303:41" pos:end="303:54"><name pos:start="303:41" pos:end="303:41">s</name><operator pos:start="303:42" pos:end="303:43">-&gt;</operator><name pos:start="303:44" pos:end="303:54">diff_height</name></name> <operator pos:start="303:56" pos:end="303:56">&gt;</operator> <name pos:start="303:58" pos:end="303:71">cur_blk_height</name></expr>)</condition> <block pos:start="303:74" pos:end="313:21">{<block_content pos:start="305:25" pos:end="311:51">

                        <expr_stmt pos:start="305:25" pos:end="309:78"><expr pos:start="305:25" pos:end="309:77"><call pos:start="305:25" pos:end="309:77"><name pos:start="305:25" pos:end="305:30">av_log</name><argument_list pos:start="305:31" pos:end="309:77">(<argument pos:start="305:32" pos:end="305:36"><expr pos:start="305:32" pos:end="305:36"><name pos:start="305:32" pos:end="305:36">avctx</name></expr></argument>, <argument pos:start="305:39" pos:end="305:50"><expr pos:start="305:39" pos:end="305:50"><name pos:start="305:39" pos:end="305:50">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="307:32" pos:end="307:73"><expr pos:start="307:32" pos:end="307:73"><literal type="string" pos:start="307:32" pos:end="307:73">"Block parameters invalid: %d + %d &gt; %d\n"</literal></expr></argument>,

                               <argument pos:start="309:32" pos:end="309:44"><expr pos:start="309:32" pos:end="309:44"><name pos:start="309:32" pos:end="309:44"><name pos:start="309:32" pos:end="309:32">s</name><operator pos:start="309:33" pos:end="309:34">-&gt;</operator><name pos:start="309:35" pos:end="309:44">diff_start</name></name></expr></argument>, <argument pos:start="309:47" pos:end="309:60"><expr pos:start="309:47" pos:end="309:60"><name pos:start="309:47" pos:end="309:60"><name pos:start="309:47" pos:end="309:47">s</name><operator pos:start="309:48" pos:end="309:49">-&gt;</operator><name pos:start="309:50" pos:end="309:60">diff_height</name></name></expr></argument>, <argument pos:start="309:63" pos:end="309:76"><expr pos:start="309:63" pos:end="309:76"><name pos:start="309:63" pos:end="309:76">cur_blk_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="311:25" pos:end="311:51">return <expr pos:start="311:32" pos:end="311:50"><name pos:start="311:32" pos:end="311:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="315:21" pos:end="319:64"><expr pos:start="315:21" pos:end="319:63"><call pos:start="315:21" pos:end="319:63"><name pos:start="315:21" pos:end="315:26">av_log</name><argument_list pos:start="315:27" pos:end="319:63">(<argument pos:start="315:28" pos:end="315:32"><expr pos:start="315:28" pos:end="315:32"><name pos:start="315:28" pos:end="315:32">avctx</name></expr></argument>, <argument pos:start="315:35" pos:end="315:46"><expr pos:start="315:35" pos:end="315:46"><name pos:start="315:35" pos:end="315:46">AV_LOG_DEBUG</name></expr></argument>,

                           <argument pos:start="317:28" pos:end="317:60"><expr pos:start="317:28" pos:end="317:60"><literal type="string" pos:start="317:28" pos:end="317:60">"%dx%d diff start %d height %d\n"</literal></expr></argument>,

                           <argument pos:start="319:28" pos:end="319:28"><expr pos:start="319:28" pos:end="319:28"><name pos:start="319:28" pos:end="319:28">i</name></expr></argument>, <argument pos:start="319:31" pos:end="319:31"><expr pos:start="319:31" pos:end="319:31"><name pos:start="319:31" pos:end="319:31">j</name></expr></argument>, <argument pos:start="319:34" pos:end="319:46"><expr pos:start="319:34" pos:end="319:46"><name pos:start="319:34" pos:end="319:46"><name pos:start="319:34" pos:end="319:34">s</name><operator pos:start="319:35" pos:end="319:36">-&gt;</operator><name pos:start="319:37" pos:end="319:46">diff_start</name></name></expr></argument>, <argument pos:start="319:49" pos:end="319:62"><expr pos:start="319:49" pos:end="319:62"><name pos:start="319:49" pos:end="319:62"><name pos:start="319:49" pos:end="319:49">s</name><operator pos:start="319:50" pos:end="319:51">-&gt;</operator><name pos:start="319:52" pos:end="319:62">diff_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="321:21" pos:end="321:30"><expr pos:start="321:21" pos:end="321:29"><name pos:start="321:21" pos:end="321:24">size</name> <operator pos:start="321:26" pos:end="321:27">-=</operator> <literal type="number" pos:start="321:29" pos:end="321:29">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="327:17" pos:end="329:80"><if pos:start="327:17" pos:end="329:80">if <condition pos:start="327:20" pos:end="327:38">(<expr pos:start="327:21" pos:end="327:37"><name pos:start="327:21" pos:end="327:37"><name pos:start="327:21" pos:end="327:21">s</name><operator pos:start="327:22" pos:end="327:23">-&gt;</operator><name pos:start="327:24" pos:end="327:37">zlibprime_prev</name></name></expr>)</condition><block type="pseudo" pos:start="329:21" pos:end="329:80"><block_content pos:start="329:21" pos:end="329:80">

                    <expr_stmt pos:start="329:21" pos:end="329:80"><expr pos:start="329:21" pos:end="329:79"><call pos:start="329:21" pos:end="329:79"><name pos:start="329:21" pos:end="329:26">av_log</name><argument_list pos:start="329:27" pos:end="329:79">(<argument pos:start="329:28" pos:end="329:32"><expr pos:start="329:28" pos:end="329:32"><name pos:start="329:28" pos:end="329:32">avctx</name></expr></argument>, <argument pos:start="329:35" pos:end="329:46"><expr pos:start="329:35" pos:end="329:46"><name pos:start="329:35" pos:end="329:46">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="329:49" pos:end="329:72"><expr pos:start="329:49" pos:end="329:72"><literal type="string" pos:start="329:49" pos:end="329:72">"%dx%d zlibprime_prev\n"</literal></expr></argument>, <argument pos:start="329:75" pos:end="329:75"><expr pos:start="329:75" pos:end="329:75"><name pos:start="329:75" pos:end="329:75">i</name></expr></argument>, <argument pos:start="329:78" pos:end="329:78"><expr pos:start="329:78" pos:end="329:78"><name pos:start="329:78" pos:end="329:78">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="333:17" pos:end="349:17"><if pos:start="333:17" pos:end="349:17">if <condition pos:start="333:20" pos:end="333:38">(<expr pos:start="333:21" pos:end="333:37"><name pos:start="333:21" pos:end="333:37"><name pos:start="333:21" pos:end="333:21">s</name><operator pos:start="333:22" pos:end="333:23">-&gt;</operator><name pos:start="333:24" pos:end="333:37">zlibprime_curr</name></name></expr>)</condition> <block pos:start="333:40" pos:end="349:17">{<block_content pos:start="335:21" pos:end="347:48">

                    <decl_stmt pos:start="335:21" pos:end="335:47"><decl pos:start="335:21" pos:end="335:46"><type pos:start="335:21" pos:end="335:23"><name pos:start="335:21" pos:end="335:23">int</name></type> <name pos:start="335:25" pos:end="335:27">col</name> <init pos:start="335:29" pos:end="335:46">= <expr pos:start="335:31" pos:end="335:46"><call pos:start="335:31" pos:end="335:46"><name pos:start="335:31" pos:end="335:38">get_bits</name><argument_list pos:start="335:39" pos:end="335:46">(<argument pos:start="335:40" pos:end="335:42"><expr pos:start="335:40" pos:end="335:42"><operator pos:start="335:40" pos:end="335:40">&amp;</operator><name pos:start="335:41" pos:end="335:42">gb</name></expr></argument>, <argument pos:start="335:45" pos:end="335:45"><expr pos:start="335:45" pos:end="335:45"><literal type="number" pos:start="335:45" pos:end="335:45">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="337:21" pos:end="337:47"><decl pos:start="337:21" pos:end="337:46"><type pos:start="337:21" pos:end="337:23"><name pos:start="337:21" pos:end="337:23">int</name></type> <name pos:start="337:25" pos:end="337:27">row</name> <init pos:start="337:29" pos:end="337:46">= <expr pos:start="337:31" pos:end="337:46"><call pos:start="337:31" pos:end="337:46"><name pos:start="337:31" pos:end="337:38">get_bits</name><argument_list pos:start="337:39" pos:end="337:46">(<argument pos:start="337:40" pos:end="337:42"><expr pos:start="337:40" pos:end="337:42"><operator pos:start="337:40" pos:end="337:40">&amp;</operator><name pos:start="337:41" pos:end="337:42">gb</name></expr></argument>, <argument pos:start="337:45" pos:end="337:45"><expr pos:start="337:45" pos:end="337:45"><literal type="number" pos:start="337:45" pos:end="337:45">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="339:21" pos:end="341:43"><expr pos:start="339:21" pos:end="341:42"><call pos:start="339:21" pos:end="341:42"><name pos:start="339:21" pos:end="339:26">av_log</name><argument_list pos:start="339:27" pos:end="341:42">(<argument pos:start="339:28" pos:end="339:32"><expr pos:start="339:28" pos:end="339:32"><name pos:start="339:28" pos:end="339:32">avctx</name></expr></argument>, <argument pos:start="339:35" pos:end="339:46"><expr pos:start="339:35" pos:end="339:46"><name pos:start="339:35" pos:end="339:46">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="339:49" pos:end="339:78"><expr pos:start="339:49" pos:end="339:78"><literal type="string" pos:start="339:49" pos:end="339:78">"%dx%d zlibprime_curr %dx%d\n"</literal></expr></argument>,

                           <argument pos:start="341:28" pos:end="341:28"><expr pos:start="341:28" pos:end="341:28"><name pos:start="341:28" pos:end="341:28">i</name></expr></argument>, <argument pos:start="341:31" pos:end="341:31"><expr pos:start="341:31" pos:end="341:31"><name pos:start="341:31" pos:end="341:31">j</name></expr></argument>, <argument pos:start="341:34" pos:end="341:36"><expr pos:start="341:34" pos:end="341:36"><name pos:start="341:34" pos:end="341:36">col</name></expr></argument>, <argument pos:start="341:39" pos:end="341:41"><expr pos:start="341:39" pos:end="341:41"><name pos:start="341:39" pos:end="341:41">row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="343:21" pos:end="343:30"><expr pos:start="343:21" pos:end="343:29"><name pos:start="343:21" pos:end="343:24">size</name> <operator pos:start="343:26" pos:end="343:27">-=</operator> <literal type="number" pos:start="343:29" pos:end="343:29">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="345:21" pos:end="345:67"><expr pos:start="345:21" pos:end="345:66"><call pos:start="345:21" pos:end="345:66"><name pos:start="345:21" pos:end="345:41">avpriv_request_sample</name><argument_list pos:start="345:42" pos:end="345:66">(<argument pos:start="345:43" pos:end="345:47"><expr pos:start="345:43" pos:end="345:47"><name pos:start="345:43" pos:end="345:47">avctx</name></expr></argument>, <argument pos:start="345:50" pos:end="345:65"><expr pos:start="345:50" pos:end="345:65"><literal type="string" pos:start="345:50" pos:end="345:65">"zlibprime_curr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="347:21" pos:end="347:48">return <expr pos:start="347:28" pos:end="347:47"><name pos:start="347:28" pos:end="347:47">AVERROR_PATCHWELCOME</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="351:17" pos:end="359:17"><if pos:start="351:17" pos:end="359:17">if <condition pos:start="351:20" pos:end="351:75">(<expr pos:start="351:21" pos:end="351:74"><operator pos:start="351:21" pos:end="351:21">!</operator><name pos:start="351:22" pos:end="351:30"><name pos:start="351:22" pos:end="351:22">s</name><operator pos:start="351:23" pos:end="351:24">-&gt;</operator><name pos:start="351:25" pos:end="351:30">blocks</name></name> <operator pos:start="351:32" pos:end="351:33">&amp;&amp;</operator> <operator pos:start="351:35" pos:end="351:35">(</operator><name pos:start="351:36" pos:end="351:52"><name pos:start="351:36" pos:end="351:36">s</name><operator pos:start="351:37" pos:end="351:38">-&gt;</operator><name pos:start="351:39" pos:end="351:52">zlibprime_curr</name></name> <operator pos:start="351:54" pos:end="351:55">||</operator> <name pos:start="351:57" pos:end="351:73"><name pos:start="351:57" pos:end="351:57">s</name><operator pos:start="351:58" pos:end="351:59">-&gt;</operator><name pos:start="351:60" pos:end="351:73">zlibprime_prev</name></name><operator pos:start="351:74" pos:end="351:74">)</operator></expr>)</condition> <block pos:start="351:77" pos:end="359:17">{<block_content pos:start="353:21" pos:end="357:47">

                    <expr_stmt pos:start="353:21" pos:end="355:67"><expr pos:start="353:21" pos:end="355:66"><call pos:start="353:21" pos:end="355:66"><name pos:start="353:21" pos:end="353:26">av_log</name><argument_list pos:start="353:27" pos:end="355:66">(<argument pos:start="353:28" pos:end="353:32"><expr pos:start="353:28" pos:end="353:32"><name pos:start="353:28" pos:end="353:32">avctx</name></expr></argument>, <argument pos:start="353:35" pos:end="353:46"><expr pos:start="353:35" pos:end="353:46"><name pos:start="353:35" pos:end="353:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="355:28" pos:end="355:65"><expr pos:start="355:28" pos:end="355:65"><literal type="string" pos:start="355:28" pos:end="355:65">"no data available for zlib priming\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="357:21" pos:end="357:47">return <expr pos:start="357:28" pos:end="357:46"><name pos:start="357:28" pos:end="357:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="361:17" pos:end="361:23"><expr pos:start="361:17" pos:end="361:22"><name pos:start="361:17" pos:end="361:20">size</name><operator pos:start="361:21" pos:end="361:22">--</operator></expr>;</expr_stmt> <comment type="line" pos:start="361:25" pos:end="361:49">// account for flags byte</comment>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="367:13" pos:end="385:13"><if pos:start="367:13" pos:end="385:13">if <condition pos:start="367:16" pos:end="367:25">(<expr pos:start="367:17" pos:end="367:24"><name pos:start="367:17" pos:end="367:24">has_diff</name></expr>)</condition> <block pos:start="367:27" pos:end="385:13">{<block_content pos:start="369:17" pos:end="383:17">

                <decl_stmt pos:start="369:17" pos:end="369:22"><decl pos:start="369:17" pos:end="369:21"><type pos:start="369:17" pos:end="369:19"><name pos:start="369:17" pos:end="369:19">int</name></type> <name pos:start="369:21" pos:end="369:21">k</name></decl>;</decl_stmt>

                <decl_stmt pos:start="371:17" pos:end="371:80"><decl pos:start="371:17" pos:end="371:79"><type pos:start="371:17" pos:end="371:19"><name pos:start="371:17" pos:end="371:19">int</name></type> <name pos:start="371:21" pos:end="371:23">off</name> <init pos:start="371:25" pos:end="371:79">= <expr pos:start="371:27" pos:end="371:79"><operator pos:start="371:27" pos:end="371:27">(</operator><name pos:start="371:28" pos:end="371:42"><name pos:start="371:28" pos:end="371:28">s</name><operator pos:start="371:29" pos:end="371:30">-&gt;</operator><name pos:start="371:31" pos:end="371:42">image_height</name></name> <operator pos:start="371:44" pos:end="371:44">-</operator> <name pos:start="371:46" pos:end="371:50">y_pos</name> <operator pos:start="371:52" pos:end="371:52">-</operator> <literal type="number" pos:start="371:54" pos:end="371:54">1</literal><operator pos:start="371:55" pos:end="371:55">)</operator> <operator pos:start="371:57" pos:end="371:57">*</operator> <name pos:start="371:59" pos:end="371:79"><name pos:start="371:59" pos:end="371:59">s</name><operator pos:start="371:60" pos:end="371:61">-&gt;</operator><name pos:start="371:62" pos:end="371:66">frame</name><operator pos:start="371:67" pos:end="371:68">-&gt;</operator><name pos:start="371:69" pos:end="371:76">linesize</name><index pos:start="371:77" pos:end="371:79">[<expr pos:start="371:78" pos:end="371:78"><literal type="number" pos:start="371:78" pos:end="371:78">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <for pos:start="375:17" pos:end="383:17">for <control pos:start="375:21" pos:end="375:52">(<init pos:start="375:22" pos:end="375:27"><expr pos:start="375:22" pos:end="375:26"><name pos:start="375:22" pos:end="375:22">k</name> <operator pos:start="375:24" pos:end="375:24">=</operator> <literal type="number" pos:start="375:26" pos:end="375:26">0</literal></expr>;</init> <condition pos:start="375:29" pos:end="375:47"><expr pos:start="375:29" pos:end="375:46"><name pos:start="375:29" pos:end="375:29">k</name> <operator pos:start="375:31" pos:end="375:31">&lt;</operator> <name pos:start="375:33" pos:end="375:46">cur_blk_height</name></expr>;</condition> <incr pos:start="375:49" pos:end="375:51"><expr pos:start="375:49" pos:end="375:51"><name pos:start="375:49" pos:end="375:49">k</name><operator pos:start="375:50" pos:end="375:51">++</operator></expr></incr>)</control> <block pos:start="375:54" pos:end="383:17">{<block_content pos:start="377:21" pos:end="381:46">

                    <decl_stmt pos:start="377:21" pos:end="377:72"><decl pos:start="377:21" pos:end="377:71"><type pos:start="377:21" pos:end="377:23"><name pos:start="377:21" pos:end="377:23">int</name></type> <name pos:start="377:25" pos:end="377:25">x</name> <init pos:start="377:27" pos:end="377:71">= <expr pos:start="377:29" pos:end="377:71"><name pos:start="377:29" pos:end="377:31">off</name> <operator pos:start="377:33" pos:end="377:33">-</operator> <name pos:start="377:35" pos:end="377:35">k</name> <operator pos:start="377:37" pos:end="377:37">*</operator> <name pos:start="377:39" pos:end="377:59"><name pos:start="377:39" pos:end="377:39">s</name><operator pos:start="377:40" pos:end="377:41">-&gt;</operator><name pos:start="377:42" pos:end="377:46">frame</name><operator pos:start="377:47" pos:end="377:48">-&gt;</operator><name pos:start="377:49" pos:end="377:56">linesize</name><index pos:start="377:57" pos:end="377:59">[<expr pos:start="377:58" pos:end="377:58"><literal type="number" pos:start="377:58" pos:end="377:58">0</literal></expr>]</index></name> <operator pos:start="377:61" pos:end="377:61">+</operator> <name pos:start="377:63" pos:end="377:67">x_pos</name> <operator pos:start="377:69" pos:end="377:69">*</operator> <literal type="number" pos:start="377:71" pos:end="377:71">3</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="379:21" pos:end="381:46"><expr pos:start="379:21" pos:end="381:45"><call pos:start="379:21" pos:end="381:45"><name pos:start="379:21" pos:end="379:26">memcpy</name><argument_list pos:start="379:27" pos:end="381:45">(<argument pos:start="379:28" pos:end="379:48"><expr pos:start="379:28" pos:end="379:48"><name pos:start="379:28" pos:end="379:44"><name pos:start="379:28" pos:end="379:28">s</name><operator pos:start="379:29" pos:end="379:30">-&gt;</operator><name pos:start="379:31" pos:end="379:35">frame</name><operator pos:start="379:36" pos:end="379:37">-&gt;</operator><name pos:start="379:38" pos:end="379:41">data</name><index pos:start="379:42" pos:end="379:44">[<expr pos:start="379:43" pos:end="379:43"><literal type="number" pos:start="379:43" pos:end="379:43">0</literal></expr>]</index></name> <operator pos:start="379:46" pos:end="379:46">+</operator> <name pos:start="379:48" pos:end="379:48">x</name></expr></argument>, <argument pos:start="379:51" pos:end="379:65"><expr pos:start="379:51" pos:end="379:65"><name pos:start="379:51" pos:end="379:61"><name pos:start="379:51" pos:end="379:51">s</name><operator pos:start="379:52" pos:end="379:53">-&gt;</operator><name pos:start="379:54" pos:end="379:61">keyframe</name></name> <operator pos:start="379:63" pos:end="379:63">+</operator> <name pos:start="379:65" pos:end="379:65">x</name></expr></argument>,

                           <argument pos:start="381:28" pos:end="381:44"><expr pos:start="381:28" pos:end="381:44"><name pos:start="381:28" pos:end="381:40">cur_blk_width</name> <operator pos:start="381:42" pos:end="381:42">*</operator> <literal type="number" pos:start="381:44" pos:end="381:44">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="389:13" pos:end="389:58">/* skip unchanged blocks, which have size 0 */</comment>

            <if_stmt pos:start="391:13" pos:end="405:13"><if pos:start="391:13" pos:end="405:13">if <condition pos:start="391:16" pos:end="391:21">(<expr pos:start="391:17" pos:end="391:20"><name pos:start="391:17" pos:end="391:20">size</name></expr>)</condition> <block pos:start="391:23" pos:end="405:13">{<block_content pos:start="393:17" pos:end="403:76">

                <if_stmt pos:start="393:17" pos:end="403:76"><if pos:start="393:17" pos:end="403:76">if <condition pos:start="393:20" pos:end="399:72">(<expr pos:start="393:21" pos:end="399:71"><call pos:start="393:21" pos:end="399:71"><name pos:start="393:21" pos:end="393:40">flashsv_decode_block</name><argument_list pos:start="393:41" pos:end="399:71">(<argument pos:start="393:42" pos:end="393:46"><expr pos:start="393:42" pos:end="393:46"><name pos:start="393:42" pos:end="393:46">avctx</name></expr></argument>, <argument pos:start="393:49" pos:end="393:53"><expr pos:start="393:49" pos:end="393:53"><name pos:start="393:49" pos:end="393:53">avpkt</name></expr></argument>, <argument pos:start="393:56" pos:end="393:58"><expr pos:start="393:56" pos:end="393:58"><operator pos:start="393:56" pos:end="393:56">&amp;</operator><name pos:start="393:57" pos:end="393:58">gb</name></expr></argument>, <argument pos:start="393:61" pos:end="393:64"><expr pos:start="393:61" pos:end="393:64"><name pos:start="393:61" pos:end="393:64">size</name></expr></argument>,

                                         <argument pos:start="395:42" pos:end="395:54"><expr pos:start="395:42" pos:end="395:54"><name pos:start="395:42" pos:end="395:54">cur_blk_width</name></expr></argument>, <argument pos:start="395:57" pos:end="395:70"><expr pos:start="395:57" pos:end="395:70"><name pos:start="395:57" pos:end="395:70">cur_blk_height</name></expr></argument>,

                                         <argument pos:start="397:42" pos:end="397:46"><expr pos:start="397:42" pos:end="397:46"><name pos:start="397:42" pos:end="397:46">x_pos</name></expr></argument>, <argument pos:start="397:49" pos:end="397:53"><expr pos:start="397:49" pos:end="397:53"><name pos:start="397:49" pos:end="397:53">y_pos</name></expr></argument>,

                                         <argument pos:start="399:42" pos:end="399:70"><expr pos:start="399:42" pos:end="399:70"><name pos:start="399:42" pos:end="399:42">i</name> <operator pos:start="399:44" pos:end="399:44">+</operator> <name pos:start="399:46" pos:end="399:46">j</name> <operator pos:start="399:48" pos:end="399:48">*</operator> <operator pos:start="399:50" pos:end="399:50">(</operator><name pos:start="399:51" pos:end="399:58">h_blocks</name> <operator pos:start="399:60" pos:end="399:60">+</operator> <operator pos:start="399:62" pos:end="399:62">!</operator><operator pos:start="399:63" pos:end="399:63">!</operator><name pos:start="399:64" pos:end="399:69">h_part</name><operator pos:start="399:70" pos:end="399:70">)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="401:21" pos:end="403:76"><block_content pos:start="401:21" pos:end="403:76">

                    <expr_stmt pos:start="401:21" pos:end="403:76"><expr pos:start="401:21" pos:end="403:75"><call pos:start="401:21" pos:end="403:75"><name pos:start="401:21" pos:end="401:26">av_log</name><argument_list pos:start="401:27" pos:end="403:75">(<argument pos:start="401:28" pos:end="401:32"><expr pos:start="401:28" pos:end="401:32"><name pos:start="401:28" pos:end="401:32">avctx</name></expr></argument>, <argument pos:start="401:35" pos:end="401:46"><expr pos:start="401:35" pos:end="401:46"><name pos:start="401:35" pos:end="401:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="403:28" pos:end="403:68"><expr pos:start="403:28" pos:end="403:68"><literal type="string" pos:start="403:28" pos:end="403:68">"error in decompression of block %dx%d\n"</literal></expr></argument>, <argument pos:start="403:71" pos:end="403:71"><expr pos:start="403:71" pos:end="403:71"><name pos:start="403:71" pos:end="403:71">i</name></expr></argument>, <argument pos:start="403:74" pos:end="403:74"><expr pos:start="403:74" pos:end="403:74"><name pos:start="403:74" pos:end="403:74">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <if_stmt pos:start="411:5" pos:end="431:5"><if pos:start="411:5" pos:end="431:5">if <condition pos:start="411:8" pos:end="411:38">(<expr pos:start="411:9" pos:end="411:37"><name pos:start="411:9" pos:end="411:22"><name pos:start="411:9" pos:end="411:9">s</name><operator pos:start="411:10" pos:end="411:11">-&gt;</operator><name pos:start="411:12" pos:end="411:22">is_keyframe</name></name> <operator pos:start="411:24" pos:end="411:25">&amp;&amp;</operator> <name pos:start="411:27" pos:end="411:32"><name pos:start="411:27" pos:end="411:27">s</name><operator pos:start="411:28" pos:end="411:29">-&gt;</operator><name pos:start="411:30" pos:end="411:32">ver</name></name> <operator pos:start="411:34" pos:end="411:35">==</operator> <literal type="number" pos:start="411:37" pos:end="411:37">2</literal></expr>)</condition> <block pos:start="411:40" pos:end="431:5">{<block_content pos:start="413:9" pos:end="429:54">

        <if_stmt pos:start="413:9" pos:end="425:9"><if pos:start="413:9" pos:end="425:9">if <condition pos:start="413:12" pos:end="413:25">(<expr pos:start="413:13" pos:end="413:24"><operator pos:start="413:13" pos:end="413:13">!</operator><name pos:start="413:14" pos:end="413:24"><name pos:start="413:14" pos:end="413:14">s</name><operator pos:start="413:15" pos:end="413:16">-&gt;</operator><name pos:start="413:17" pos:end="413:24">keyframe</name></name></expr>)</condition> <block pos:start="413:27" pos:end="425:9">{<block_content pos:start="415:13" pos:end="423:13">

            <expr_stmt pos:start="415:13" pos:end="415:75"><expr pos:start="415:13" pos:end="415:74"><name pos:start="415:13" pos:end="415:23"><name pos:start="415:13" pos:end="415:13">s</name><operator pos:start="415:14" pos:end="415:15">-&gt;</operator><name pos:start="415:16" pos:end="415:23">keyframe</name></name> <operator pos:start="415:25" pos:end="415:25">=</operator> <call pos:start="415:27" pos:end="415:74"><name pos:start="415:27" pos:end="415:35">av_malloc</name><argument_list pos:start="415:36" pos:end="415:74">(<argument pos:start="415:37" pos:end="415:73"><expr pos:start="415:37" pos:end="415:73"><name pos:start="415:37" pos:end="415:57"><name pos:start="415:37" pos:end="415:37">s</name><operator pos:start="415:38" pos:end="415:39">-&gt;</operator><name pos:start="415:40" pos:end="415:44">frame</name><operator pos:start="415:45" pos:end="415:46">-&gt;</operator><name pos:start="415:47" pos:end="415:54">linesize</name><index pos:start="415:55" pos:end="415:57">[<expr pos:start="415:56" pos:end="415:56"><literal type="number" pos:start="415:56" pos:end="415:56">0</literal></expr>]</index></name> <operator pos:start="415:59" pos:end="415:59">*</operator> <name pos:start="415:61" pos:end="415:73"><name pos:start="415:61" pos:end="415:65">avctx</name><operator pos:start="415:66" pos:end="415:67">-&gt;</operator><name pos:start="415:68" pos:end="415:73">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="417:13" pos:end="423:13"><if pos:start="417:13" pos:end="423:13">if <condition pos:start="417:16" pos:end="417:29">(<expr pos:start="417:17" pos:end="417:28"><operator pos:start="417:17" pos:end="417:17">!</operator><name pos:start="417:18" pos:end="417:28"><name pos:start="417:18" pos:end="417:18">s</name><operator pos:start="417:19" pos:end="417:20">-&gt;</operator><name pos:start="417:21" pos:end="417:28">keyframe</name></name></expr>)</condition> <block pos:start="417:31" pos:end="423:13">{<block_content pos:start="419:17" pos:end="421:39">

                <expr_stmt pos:start="419:17" pos:end="419:76"><expr pos:start="419:17" pos:end="419:75"><call pos:start="419:17" pos:end="419:75"><name pos:start="419:17" pos:end="419:22">av_log</name><argument_list pos:start="419:23" pos:end="419:75">(<argument pos:start="419:24" pos:end="419:28"><expr pos:start="419:24" pos:end="419:28"><name pos:start="419:24" pos:end="419:28">avctx</name></expr></argument>, <argument pos:start="419:31" pos:end="419:42"><expr pos:start="419:31" pos:end="419:42"><name pos:start="419:31" pos:end="419:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="419:45" pos:end="419:74"><expr pos:start="419:45" pos:end="419:74"><literal type="string" pos:start="419:45" pos:end="419:74">"Cannot allocate image data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="421:17" pos:end="421:39">return <expr pos:start="421:24" pos:end="421:38"><call pos:start="421:24" pos:end="421:38"><name pos:start="421:24" pos:end="421:30">AVERROR</name><argument_list pos:start="421:31" pos:end="421:38">(<argument pos:start="421:32" pos:end="421:37"><expr pos:start="421:32" pos:end="421:37"><name pos:start="421:32" pos:end="421:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="427:9" pos:end="429:54"><expr pos:start="427:9" pos:end="429:53"><call pos:start="427:9" pos:end="429:53"><name pos:start="427:9" pos:end="427:14">memcpy</name><argument_list pos:start="427:15" pos:end="429:53">(<argument pos:start="427:16" pos:end="427:26"><expr pos:start="427:16" pos:end="427:26"><name pos:start="427:16" pos:end="427:26"><name pos:start="427:16" pos:end="427:16">s</name><operator pos:start="427:17" pos:end="427:18">-&gt;</operator><name pos:start="427:19" pos:end="427:26">keyframe</name></name></expr></argument>, <argument pos:start="427:29" pos:end="427:45"><expr pos:start="427:29" pos:end="427:45"><name pos:start="427:29" pos:end="427:45"><name pos:start="427:29" pos:end="427:29">s</name><operator pos:start="427:30" pos:end="427:31">-&gt;</operator><name pos:start="427:32" pos:end="427:36">frame</name><operator pos:start="427:37" pos:end="427:38">-&gt;</operator><name pos:start="427:39" pos:end="427:42">data</name><index pos:start="427:43" pos:end="427:45">[<expr pos:start="427:44" pos:end="427:44"><literal type="number" pos:start="427:44" pos:end="427:44">0</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="429:16" pos:end="429:52"><expr pos:start="429:16" pos:end="429:52"><name pos:start="429:16" pos:end="429:36"><name pos:start="429:16" pos:end="429:16">s</name><operator pos:start="429:17" pos:end="429:18">-&gt;</operator><name pos:start="429:19" pos:end="429:23">frame</name><operator pos:start="429:24" pos:end="429:25">-&gt;</operator><name pos:start="429:26" pos:end="429:33">linesize</name><index pos:start="429:34" pos:end="429:36">[<expr pos:start="429:35" pos:end="429:35"><literal type="number" pos:start="429:35" pos:end="429:35">0</literal></expr>]</index></name> <operator pos:start="429:38" pos:end="429:38">*</operator> <name pos:start="429:40" pos:end="429:52"><name pos:start="429:40" pos:end="429:44">avctx</name><operator pos:start="429:45" pos:end="429:46">-&gt;</operator><name pos:start="429:47" pos:end="429:52">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="435:5" pos:end="437:19"><if pos:start="435:5" pos:end="437:19">if <condition pos:start="435:8" pos:end="435:49">(<expr pos:start="435:9" pos:end="435:48"><operator pos:start="435:9" pos:end="435:9">(</operator><name pos:start="435:10" pos:end="435:12">ret</name> <operator pos:start="435:14" pos:end="435:14">=</operator> <call pos:start="435:16" pos:end="435:43"><name pos:start="435:16" pos:end="435:27">av_frame_ref</name><argument_list pos:start="435:28" pos:end="435:43">(<argument pos:start="435:29" pos:end="435:32"><expr pos:start="435:29" pos:end="435:32"><name pos:start="435:29" pos:end="435:32">data</name></expr></argument>, <argument pos:start="435:35" pos:end="435:42"><expr pos:start="435:35" pos:end="435:42"><name pos:start="435:35" pos:end="435:42"><name pos:start="435:35" pos:end="435:35">s</name><operator pos:start="435:36" pos:end="435:37">-&gt;</operator><name pos:start="435:38" pos:end="435:42">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="435:44" pos:end="435:44">)</operator> <operator pos:start="435:46" pos:end="435:46">&lt;</operator> <literal type="number" pos:start="435:48" pos:end="435:48">0</literal></expr>)</condition><block type="pseudo" pos:start="437:9" pos:end="437:19"><block_content pos:start="437:9" pos:end="437:19">

        <return pos:start="437:9" pos:end="437:19">return <expr pos:start="437:16" pos:end="437:18"><name pos:start="437:16" pos:end="437:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="441:5" pos:end="441:19"><expr pos:start="441:5" pos:end="441:18"><operator pos:start="441:5" pos:end="441:5">*</operator><name pos:start="441:6" pos:end="441:14">got_frame</name> <operator pos:start="441:16" pos:end="441:16">=</operator> <literal type="number" pos:start="441:18" pos:end="441:18">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="445:5" pos:end="449:52"><if pos:start="445:5" pos:end="449:52">if <condition pos:start="445:8" pos:end="445:46">(<expr pos:start="445:9" pos:end="445:45"><operator pos:start="445:9" pos:end="445:9">(</operator><call pos:start="445:10" pos:end="445:28"><name pos:start="445:10" pos:end="445:23">get_bits_count</name><argument_list pos:start="445:24" pos:end="445:28">(<argument pos:start="445:25" pos:end="445:27"><expr pos:start="445:25" pos:end="445:27"><operator pos:start="445:25" pos:end="445:25">&amp;</operator><name pos:start="445:26" pos:end="445:27">gb</name></expr></argument>)</argument_list></call> <operator pos:start="445:30" pos:end="445:30">/</operator> <literal type="number" pos:start="445:32" pos:end="445:32">8</literal><operator pos:start="445:33" pos:end="445:33">)</operator> <operator pos:start="445:35" pos:end="445:36">!=</operator> <name pos:start="445:38" pos:end="445:45">buf_size</name></expr>)</condition><block type="pseudo" pos:start="447:9" pos:end="449:52"><block_content pos:start="447:9" pos:end="449:52">

        <expr_stmt pos:start="447:9" pos:end="449:52"><expr pos:start="447:9" pos:end="449:51"><call pos:start="447:9" pos:end="449:51"><name pos:start="447:9" pos:end="447:14">av_log</name><argument_list pos:start="447:15" pos:end="449:51">(<argument pos:start="447:16" pos:end="447:20"><expr pos:start="447:16" pos:end="447:20"><name pos:start="447:16" pos:end="447:20">avctx</name></expr></argument>, <argument pos:start="447:23" pos:end="447:34"><expr pos:start="447:23" pos:end="447:34"><name pos:start="447:23" pos:end="447:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="447:37" pos:end="447:76"><expr pos:start="447:37" pos:end="447:76"><literal type="string" pos:start="447:37" pos:end="447:76">"buffer not fully consumed (%d != %d)\n"</literal></expr></argument>,

               <argument pos:start="449:16" pos:end="449:23"><expr pos:start="449:16" pos:end="449:23"><name pos:start="449:16" pos:end="449:23">buf_size</name></expr></argument>, <argument pos:start="449:26" pos:end="449:50"><expr pos:start="449:26" pos:end="449:50"><operator pos:start="449:26" pos:end="449:26">(</operator><call pos:start="449:27" pos:end="449:45"><name pos:start="449:27" pos:end="449:40">get_bits_count</name><argument_list pos:start="449:41" pos:end="449:45">(<argument pos:start="449:42" pos:end="449:44"><expr pos:start="449:42" pos:end="449:44"><operator pos:start="449:42" pos:end="449:42">&amp;</operator><name pos:start="449:43" pos:end="449:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="449:47" pos:end="449:47">/</operator> <literal type="number" pos:start="449:49" pos:end="449:49">8</literal><operator pos:start="449:50" pos:end="449:50">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="453:5" pos:end="453:56">/* report that the buffer was completely consumed */</comment>

    <return pos:start="455:5" pos:end="455:20">return <expr pos:start="455:12" pos:end="455:19"><name pos:start="455:12" pos:end="455:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
