<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4796.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:41">mdec_decode_block_intra</name><parameter_list pos:start="1:42" pos:end="1:80">(<parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:53">MDECContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">a</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:72"><decl pos:start="1:59" pos:end="1:72"><type pos:start="1:59" pos:end="1:72"><name pos:start="1:59" pos:end="1:65">int16_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">block</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:79"><decl pos:start="1:75" pos:end="1:79"><type pos:start="1:75" pos:end="1:79"><name pos:start="1:75" pos:end="1:77">int</name></type> <name pos:start="1:79" pos:end="1:79">n</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:13">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">level</name></decl>, <decl pos:start="5:16" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:19">diff</name></decl>, <decl pos:start="5:22" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:22">i</name></decl>, <decl pos:start="5:25" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:25" pos:end="5:25">j</name></decl>, <decl pos:start="5:28" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:28" pos:end="5:30">run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">component</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">RLTable</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:15">rl</name> <init pos:start="9:17" pos:end="9:30">= <expr pos:start="9:19" pos:end="9:30"><operator pos:start="9:19" pos:end="9:19">&amp;</operator><name pos:start="9:20" pos:end="9:30">ff_rl_mpeg1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier> <specifier pos:start="11:15" pos:end="11:19">const</specifier></type> <name pos:start="11:21" pos:end="11:29">scantable</name> <init pos:start="11:31" pos:end="11:55">= <expr pos:start="11:33" pos:end="11:55"><name pos:start="11:33" pos:end="11:55"><name pos:start="11:33" pos:end="11:33">a</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:44">scantable</name><operator pos:start="11:45" pos:end="11:45">.</operator><name pos:start="11:46" pos:end="11:55">permutated</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:65"><decl pos:start="13:5" pos:end="13:64"><type pos:start="13:5" pos:end="13:20"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:18">uint16_t</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:32">quant_matrix</name> <init pos:start="13:34" pos:end="13:64">= <expr pos:start="13:36" pos:end="13:64"><name pos:start="13:36" pos:end="13:64">ff_mpeg1_default_intra_matrix</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:13"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:13">int</name></type> <name pos:start="15:15" pos:end="15:20">qscale</name> <init pos:start="15:22" pos:end="15:32">= <expr pos:start="15:24" pos:end="15:32"><name pos:start="15:24" pos:end="15:32"><name pos:start="15:24" pos:end="15:24">a</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:32">qscale</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:24">/* DC coefficient */</comment>

    <if_stmt pos:start="21:5" pos:end="39:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:24">(<expr pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:9">a</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:18">version</name></name> <operator pos:start="21:20" pos:end="21:21">==</operator> <literal type="number" pos:start="21:23" pos:end="21:23">2</literal></expr>)</condition> <block pos:start="21:26" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:52">

        <expr_stmt pos:start="23:9" pos:end="23:52"><expr pos:start="23:9" pos:end="23:51"><name pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:13">block</name><index pos:start="23:14" pos:end="23:16">[<expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>]</index></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <literal type="number" pos:start="23:20" pos:end="23:20">2</literal> <operator pos:start="23:22" pos:end="23:22">*</operator> <call pos:start="23:24" pos:end="23:44"><name pos:start="23:24" pos:end="23:32">get_sbits</name><argument_list pos:start="23:33" pos:end="23:44">(<argument pos:start="23:34" pos:end="23:39"><expr pos:start="23:34" pos:end="23:39"><operator pos:start="23:34" pos:end="23:34">&amp;</operator><name pos:start="23:35" pos:end="23:39"><name pos:start="23:35" pos:end="23:35">a</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:39">gb</name></name></expr></argument>, <argument pos:start="23:42" pos:end="23:43"><expr pos:start="23:42" pos:end="23:43"><literal type="number" pos:start="23:42" pos:end="23:43">10</literal></expr></argument>)</argument_list></call> <operator pos:start="23:46" pos:end="23:46">+</operator> <literal type="number" pos:start="23:48" pos:end="23:51">1024</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="39:5">else <block pos:start="25:12" pos:end="39:5">{<block_content pos:start="27:9" pos:end="37:46">

        <expr_stmt pos:start="27:9" pos:end="27:45"><expr pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:17">component</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <operator pos:start="27:21" pos:end="27:21">(</operator><ternary pos:start="27:22" pos:end="27:43"><condition pos:start="27:22" pos:end="27:29"><expr pos:start="27:22" pos:end="27:27"><name pos:start="27:22" pos:end="27:22">n</name> <operator pos:start="27:24" pos:end="27:25">&lt;=</operator> <literal type="number" pos:start="27:27" pos:end="27:27">3</literal></expr> ?</condition><then pos:start="27:31" pos:end="27:31"> <expr pos:start="27:31" pos:end="27:31"><literal type="number" pos:start="27:31" pos:end="27:31">0</literal></expr> </then><else pos:start="27:33" pos:end="27:43">: <expr pos:start="27:35" pos:end="27:43"><name pos:start="27:35" pos:end="27:35">n</name> <operator pos:start="27:37" pos:end="27:37">-</operator> <literal type="number" pos:start="27:39" pos:end="27:41">4</literal> <operator pos:start="27:41" pos:end="27:41">+</operator> <literal type="number" pos:start="27:43" pos:end="27:43">1</literal></expr></else></ternary><operator pos:start="27:44" pos:end="27:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:12">diff</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:43"><name pos:start="29:16" pos:end="29:24">decode_dc</name><argument_list pos:start="29:25" pos:end="29:43">(<argument pos:start="29:26" pos:end="29:31"><expr pos:start="29:26" pos:end="29:31"><operator pos:start="29:26" pos:end="29:26">&amp;</operator><name pos:start="29:27" pos:end="29:31"><name pos:start="29:27" pos:end="29:27">a</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:31">gb</name></name></expr></argument>, <argument pos:start="29:34" pos:end="29:42"><expr pos:start="29:34" pos:end="29:42"><name pos:start="29:34" pos:end="29:42">component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:39"><if pos:start="31:9" pos:end="33:39">if <condition pos:start="31:12" pos:end="31:27">(<expr pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:16">diff</name> <operator pos:start="31:18" pos:end="31:19">&gt;=</operator> <literal type="number" pos:start="31:21" pos:end="31:26">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:39"><block_content pos:start="33:13" pos:end="33:39">

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:9">a</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:18">last_dc</name><index pos:start="35:19" pos:end="35:29">[<expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:28">component</name></expr>]</index></name> <operator pos:start="35:31" pos:end="35:32">+=</operator> <name pos:start="35:34" pos:end="35:37">diff</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:46"><expr pos:start="37:9" pos:end="37:45"><name pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:13">block</name><index pos:start="37:14" pos:end="37:16">[<expr pos:start="37:15" pos:end="37:15"><literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>]</index></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <name pos:start="37:20" pos:end="37:40"><name pos:start="37:20" pos:end="37:20">a</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:29">last_dc</name><index pos:start="37:30" pos:end="37:40">[<expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:39">component</name></expr>]</index></name> <operator pos:start="37:42" pos:end="37:43">&lt;&lt;</operator> <literal type="number" pos:start="37:45" pos:end="37:45">3</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:10"><expr pos:start="43:5" pos:end="43:9"><name pos:start="43:5" pos:end="43:5">i</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <literal type="number" pos:start="43:9" pos:end="43:9">0</literal></expr>;</expr_stmt>

    <block pos:start="45:5" pos:end="137:5">{<block_content pos:start="47:9" pos:end="135:33">

        <expr_stmt pos:start="47:9" pos:end="47:32"><expr pos:start="47:9" pos:end="47:31"><call pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:19">OPEN_READER</name><argument_list pos:start="47:20" pos:end="47:31">(<argument pos:start="47:21" pos:end="47:22"><expr pos:start="47:21" pos:end="47:22"><name pos:start="47:21" pos:end="47:22">re</name></expr></argument>, <argument pos:start="47:25" pos:end="47:30"><expr pos:start="47:25" pos:end="47:30"><operator pos:start="47:25" pos:end="47:25">&amp;</operator><name pos:start="47:26" pos:end="47:30"><name pos:start="47:26" pos:end="47:26">a</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:30">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="49:9" pos:end="49:51">/* now quantify &amp; encode AC coefficients */</comment>

        <for pos:start="51:9" pos:end="133:9">for <control pos:start="51:13" pos:end="51:16">(<init pos:start="51:14" pos:end="51:14">;</init><condition pos:start="51:15" pos:end="51:15">;</condition><incr/>)</control> <block pos:start="51:18" pos:end="133:9">{<block_content pos:start="53:13" pos:end="131:29">

            <expr_stmt pos:start="53:13" pos:end="53:37"><expr pos:start="53:13" pos:end="53:36"><call pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:24">UPDATE_CACHE</name><argument_list pos:start="53:25" pos:end="53:36">(<argument pos:start="53:26" pos:end="53:27"><expr pos:start="53:26" pos:end="53:27"><name pos:start="53:26" pos:end="53:27">re</name></expr></argument>, <argument pos:start="53:30" pos:end="53:35"><expr pos:start="53:30" pos:end="53:35"><operator pos:start="53:30" pos:end="53:30">&amp;</operator><name pos:start="53:31" pos:end="53:35"><name pos:start="53:31" pos:end="53:31">a</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:82"><expr pos:start="55:13" pos:end="55:81"><call pos:start="55:13" pos:end="55:81"><name pos:start="55:13" pos:end="55:22">GET_RL_VLC</name><argument_list pos:start="55:23" pos:end="55:81">(<argument pos:start="55:24" pos:end="55:28"><expr pos:start="55:24" pos:end="55:28"><name pos:start="55:24" pos:end="55:28">level</name></expr></argument>, <argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">run</name></expr></argument>, <argument pos:start="55:36" pos:end="55:37"><expr pos:start="55:36" pos:end="55:37"><name pos:start="55:36" pos:end="55:37">re</name></expr></argument>, <argument pos:start="55:40" pos:end="55:45"><expr pos:start="55:40" pos:end="55:45"><operator pos:start="55:40" pos:end="55:40">&amp;</operator><name pos:start="55:41" pos:end="55:45"><name pos:start="55:41" pos:end="55:41">a</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:45">gb</name></name></expr></argument>, <argument pos:start="55:48" pos:end="55:60"><expr pos:start="55:48" pos:end="55:60"><name pos:start="55:48" pos:end="55:60"><name pos:start="55:48" pos:end="55:49">rl</name><operator pos:start="55:50" pos:end="55:51">-&gt;</operator><name pos:start="55:52" pos:end="55:57">rl_vlc</name><index pos:start="55:58" pos:end="55:60">[<expr pos:start="55:59" pos:end="55:59"><literal type="number" pos:start="55:59" pos:end="55:59">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="55:63" pos:end="55:74"><expr pos:start="55:63" pos:end="55:74"><name pos:start="55:63" pos:end="55:74">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="55:77" pos:end="55:77"><expr pos:start="55:77" pos:end="55:77"><literal type="number" pos:start="55:77" pos:end="55:77">2</literal></expr></argument>, <argument pos:start="55:80" pos:end="55:80"><expr pos:start="55:80" pos:end="55:80"><literal type="number" pos:start="55:80" pos:end="55:80">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="59:13" pos:end="127:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:29">(<expr pos:start="59:17" pos:end="59:28"><name pos:start="59:17" pos:end="59:21">level</name> <operator pos:start="59:23" pos:end="59:24">==</operator> <literal type="number" pos:start="59:26" pos:end="59:28">127</literal></expr>)</condition> <block pos:start="59:31" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:22">

                <break pos:start="61:17" pos:end="61:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="63:15" pos:end="85:13">else if <condition pos:start="63:23" pos:end="63:34">(<expr pos:start="63:24" pos:end="63:33"><name pos:start="63:24" pos:end="63:28">level</name> <operator pos:start="63:30" pos:end="63:31">!=</operator> <literal type="number" pos:start="63:33" pos:end="63:33">0</literal></expr>)</condition> <block pos:start="63:36" pos:end="85:13">{<block_content pos:start="65:17" pos:end="83:46">

                <expr_stmt pos:start="65:17" pos:end="65:25"><expr pos:start="65:17" pos:end="65:24"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:20">+=</operator> <name pos:start="65:22" pos:end="65:24">run</name></expr>;</expr_stmt>

                <if_stmt pos:start="67:17" pos:end="75:17"><if pos:start="67:17" pos:end="75:17">if <condition pos:start="67:20" pos:end="67:27">(<expr pos:start="67:21" pos:end="67:26"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">&gt;</operator> <literal type="number" pos:start="67:25" pos:end="67:26">63</literal></expr>)</condition> <block pos:start="67:29" pos:end="75:17">{<block_content pos:start="69:21" pos:end="73:47">

                    <expr_stmt pos:start="69:21" pos:end="71:74"><expr pos:start="69:21" pos:end="71:73"><call pos:start="69:21" pos:end="71:73"><name pos:start="69:21" pos:end="69:26">av_log</name><argument_list pos:start="69:27" pos:end="71:73">(<argument pos:start="69:28" pos:end="69:35"><expr pos:start="69:28" pos:end="69:35"><name pos:start="69:28" pos:end="69:35"><name pos:start="69:28" pos:end="69:28">a</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:35">avctx</name></name></expr></argument>, <argument pos:start="69:38" pos:end="69:49"><expr pos:start="69:38" pos:end="69:49"><name pos:start="69:38" pos:end="69:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="71:28" pos:end="71:54"><expr pos:start="71:28" pos:end="71:54"><literal type="string" pos:start="71:28" pos:end="71:54">"ac-tex damaged at %d %d\n"</literal></expr></argument>, <argument pos:start="71:57" pos:end="71:63"><expr pos:start="71:57" pos:end="71:63"><name pos:start="71:57" pos:end="71:63"><name pos:start="71:57" pos:end="71:57">a</name><operator pos:start="71:58" pos:end="71:59">-&gt;</operator><name pos:start="71:60" pos:end="71:63">mb_x</name></name></expr></argument>, <argument pos:start="71:66" pos:end="71:72"><expr pos:start="71:66" pos:end="71:72"><name pos:start="71:66" pos:end="71:72"><name pos:start="71:66" pos:end="71:66">a</name><operator pos:start="71:67" pos:end="71:68">-&gt;</operator><name pos:start="71:69" pos:end="71:72">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="73:21" pos:end="73:47">return <expr pos:start="73:28" pos:end="73:46"><name pos:start="73:28" pos:end="73:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:37"><expr pos:start="77:17" pos:end="77:36"><name pos:start="77:17" pos:end="77:17">j</name>     <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:36"><name pos:start="77:25" pos:end="77:33">scantable</name><index pos:start="77:34" pos:end="77:36">[<expr pos:start="77:35" pos:end="77:35"><name pos:start="77:35" pos:end="77:35">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:64"><expr pos:start="79:17" pos:end="79:63"><name pos:start="79:17" pos:end="79:21">level</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <operator pos:start="79:25" pos:end="79:25">(</operator><name pos:start="79:26" pos:end="79:30">level</name> <operator pos:start="79:32" pos:end="79:32">*</operator> <name pos:start="79:34" pos:end="79:39">qscale</name> <operator pos:start="79:41" pos:end="79:41">*</operator> <name pos:start="79:43" pos:end="79:57"><name pos:start="79:43" pos:end="79:54">quant_matrix</name><index pos:start="79:55" pos:end="79:57">[<expr pos:start="79:56" pos:end="79:56"><name pos:start="79:56" pos:end="79:56">j</name></expr>]</index></name><operator pos:start="79:58" pos:end="79:58">)</operator> <operator pos:start="79:60" pos:end="79:61">&gt;&gt;</operator> <literal type="number" pos:start="79:63" pos:end="79:63">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:88"><expr pos:start="81:17" pos:end="81:87"><name pos:start="81:17" pos:end="81:21">level</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <operator pos:start="81:25" pos:end="81:25">(</operator><name pos:start="81:26" pos:end="81:30">level</name> <operator pos:start="81:32" pos:end="81:32">^</operator> <call pos:start="81:34" pos:end="81:58"><name pos:start="81:34" pos:end="81:43">SHOW_SBITS</name><argument_list pos:start="81:44" pos:end="81:58">(<argument pos:start="81:45" pos:end="81:46"><expr pos:start="81:45" pos:end="81:46"><name pos:start="81:45" pos:end="81:46">re</name></expr></argument>, <argument pos:start="81:49" pos:end="81:54"><expr pos:start="81:49" pos:end="81:54"><operator pos:start="81:49" pos:end="81:49">&amp;</operator><name pos:start="81:50" pos:end="81:54"><name pos:start="81:50" pos:end="81:50">a</name><operator pos:start="81:51" pos:end="81:52">-&gt;</operator><name pos:start="81:53" pos:end="81:54">gb</name></name></expr></argument>, <argument pos:start="81:57" pos:end="81:57"><expr pos:start="81:57" pos:end="81:57"><literal type="number" pos:start="81:57" pos:end="81:57">1</literal></expr></argument>)</argument_list></call><operator pos:start="81:59" pos:end="81:59">)</operator> <operator pos:start="81:61" pos:end="81:61">-</operator> <call pos:start="81:63" pos:end="81:87"><name pos:start="81:63" pos:end="81:72">SHOW_SBITS</name><argument_list pos:start="81:73" pos:end="81:87">(<argument pos:start="81:74" pos:end="81:75"><expr pos:start="81:74" pos:end="81:75"><name pos:start="81:74" pos:end="81:75">re</name></expr></argument>, <argument pos:start="81:78" pos:end="81:83"><expr pos:start="81:78" pos:end="81:83"><operator pos:start="81:78" pos:end="81:78">&amp;</operator><name pos:start="81:79" pos:end="81:83"><name pos:start="81:79" pos:end="81:79">a</name><operator pos:start="81:80" pos:end="81:81">-&gt;</operator><name pos:start="81:82" pos:end="81:83">gb</name></name></expr></argument>, <argument pos:start="81:86" pos:end="81:86"><expr pos:start="81:86" pos:end="81:86"><literal type="number" pos:start="81:86" pos:end="81:86">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:46"><expr pos:start="83:17" pos:end="83:45"><call pos:start="83:17" pos:end="83:45"><name pos:start="83:17" pos:end="83:30">LAST_SKIP_BITS</name><argument_list pos:start="83:31" pos:end="83:45">(<argument pos:start="83:32" pos:end="83:33"><expr pos:start="83:32" pos:end="83:33"><name pos:start="83:32" pos:end="83:33">re</name></expr></argument>, <argument pos:start="83:36" pos:end="83:41"><expr pos:start="83:36" pos:end="83:41"><operator pos:start="83:36" pos:end="83:36">&amp;</operator><name pos:start="83:37" pos:end="83:41"><name pos:start="83:37" pos:end="83:37">a</name><operator pos:start="83:38" pos:end="83:39">-&gt;</operator><name pos:start="83:40" pos:end="83:41">gb</name></name></expr></argument>, <argument pos:start="83:44" pos:end="83:44"><expr pos:start="83:44" pos:end="83:44"><literal type="number" pos:start="83:44" pos:end="83:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="85:15" pos:end="127:13">else <block pos:start="85:20" pos:end="127:13">{<block_content pos:start="89:17" pos:end="125:17">

                <comment type="block" pos:start="87:17" pos:end="87:28">/* escape */</comment>

                <expr_stmt pos:start="89:17" pos:end="89:50"><expr pos:start="89:17" pos:end="89:49"><name pos:start="89:17" pos:end="89:19">run</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:47"><name pos:start="89:23" pos:end="89:32">SHOW_UBITS</name><argument_list pos:start="89:33" pos:end="89:47">(<argument pos:start="89:34" pos:end="89:35"><expr pos:start="89:34" pos:end="89:35"><name pos:start="89:34" pos:end="89:35">re</name></expr></argument>, <argument pos:start="89:38" pos:end="89:43"><expr pos:start="89:38" pos:end="89:43"><operator pos:start="89:38" pos:end="89:38">&amp;</operator><name pos:start="89:39" pos:end="89:43"><name pos:start="89:39" pos:end="89:39">a</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:43">gb</name></name></expr></argument>, <argument pos:start="89:46" pos:end="89:46"><expr pos:start="89:46" pos:end="89:46"><literal type="number" pos:start="89:46" pos:end="89:46">6</literal></expr></argument>)</argument_list></call><operator pos:start="89:48" pos:end="89:48">+</operator><literal type="number" pos:start="89:49" pos:end="89:49">1</literal></expr>;</expr_stmt> <expr_stmt pos:start="89:52" pos:end="89:81"><expr pos:start="89:52" pos:end="89:80"><call pos:start="89:52" pos:end="89:80"><name pos:start="89:52" pos:end="89:65">LAST_SKIP_BITS</name><argument_list pos:start="89:66" pos:end="89:80">(<argument pos:start="89:67" pos:end="89:68"><expr pos:start="89:67" pos:end="89:68"><name pos:start="89:67" pos:end="89:68">re</name></expr></argument>, <argument pos:start="89:71" pos:end="89:76"><expr pos:start="89:71" pos:end="89:76"><operator pos:start="89:71" pos:end="89:71">&amp;</operator><name pos:start="89:72" pos:end="89:76"><name pos:start="89:72" pos:end="89:72">a</name><operator pos:start="89:73" pos:end="89:74">-&gt;</operator><name pos:start="89:75" pos:end="89:76">gb</name></name></expr></argument>, <argument pos:start="89:79" pos:end="89:79"><expr pos:start="89:79" pos:end="89:79"><literal type="number" pos:start="89:79" pos:end="89:79">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:41"><expr pos:start="91:17" pos:end="91:40"><call pos:start="91:17" pos:end="91:40"><name pos:start="91:17" pos:end="91:28">UPDATE_CACHE</name><argument_list pos:start="91:29" pos:end="91:40">(<argument pos:start="91:30" pos:end="91:31"><expr pos:start="91:30" pos:end="91:31"><name pos:start="91:30" pos:end="91:31">re</name></expr></argument>, <argument pos:start="91:34" pos:end="91:39"><expr pos:start="91:34" pos:end="91:39"><operator pos:start="91:34" pos:end="91:34">&amp;</operator><name pos:start="91:35" pos:end="91:39"><name pos:start="91:35" pos:end="91:35">a</name><operator pos:start="91:36" pos:end="91:37">-&gt;</operator><name pos:start="91:38" pos:end="91:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:51"><expr pos:start="93:17" pos:end="93:50"><name pos:start="93:17" pos:end="93:21">level</name> <operator pos:start="93:23" pos:end="93:23">=</operator> <call pos:start="93:25" pos:end="93:50"><name pos:start="93:25" pos:end="93:34">SHOW_SBITS</name><argument_list pos:start="93:35" pos:end="93:50">(<argument pos:start="93:36" pos:end="93:37"><expr pos:start="93:36" pos:end="93:37"><name pos:start="93:36" pos:end="93:37">re</name></expr></argument>, <argument pos:start="93:40" pos:end="93:45"><expr pos:start="93:40" pos:end="93:45"><operator pos:start="93:40" pos:end="93:40">&amp;</operator><name pos:start="93:41" pos:end="93:45"><name pos:start="93:41" pos:end="93:41">a</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:45">gb</name></name></expr></argument>, <argument pos:start="93:48" pos:end="93:49"><expr pos:start="93:48" pos:end="93:49"><literal type="number" pos:start="93:48" pos:end="93:49">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="93:53" pos:end="93:78"><expr pos:start="93:53" pos:end="93:77"><call pos:start="93:53" pos:end="93:77"><name pos:start="93:53" pos:end="93:61">SKIP_BITS</name><argument_list pos:start="93:62" pos:end="93:77">(<argument pos:start="93:63" pos:end="93:64"><expr pos:start="93:63" pos:end="93:64"><name pos:start="93:63" pos:end="93:64">re</name></expr></argument>, <argument pos:start="93:67" pos:end="93:72"><expr pos:start="93:67" pos:end="93:72"><operator pos:start="93:67" pos:end="93:67">&amp;</operator><name pos:start="93:68" pos:end="93:72"><name pos:start="93:68" pos:end="93:68">a</name><operator pos:start="93:69" pos:end="93:70">-&gt;</operator><name pos:start="93:71" pos:end="93:72">gb</name></name></expr></argument>, <argument pos:start="93:75" pos:end="93:76"><expr pos:start="93:75" pos:end="93:76"><literal type="number" pos:start="93:75" pos:end="93:76">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:25"><expr pos:start="95:17" pos:end="95:24"><name pos:start="95:17" pos:end="95:17">i</name> <operator pos:start="95:19" pos:end="95:20">+=</operator> <name pos:start="95:22" pos:end="95:24">run</name></expr>;</expr_stmt>

                <if_stmt pos:start="97:17" pos:end="105:17"><if pos:start="97:17" pos:end="105:17">if <condition pos:start="97:20" pos:end="97:27">(<expr pos:start="97:21" pos:end="97:26"><name pos:start="97:21" pos:end="97:21">i</name> <operator pos:start="97:23" pos:end="97:23">&gt;</operator> <literal type="number" pos:start="97:25" pos:end="97:26">63</literal></expr>)</condition> <block pos:start="97:29" pos:end="105:17">{<block_content pos:start="99:21" pos:end="103:47">

                    <expr_stmt pos:start="99:21" pos:end="101:74"><expr pos:start="99:21" pos:end="101:73"><call pos:start="99:21" pos:end="101:73"><name pos:start="99:21" pos:end="99:26">av_log</name><argument_list pos:start="99:27" pos:end="101:73">(<argument pos:start="99:28" pos:end="99:35"><expr pos:start="99:28" pos:end="99:35"><name pos:start="99:28" pos:end="99:35"><name pos:start="99:28" pos:end="99:28">a</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:35">avctx</name></name></expr></argument>, <argument pos:start="99:38" pos:end="99:49"><expr pos:start="99:38" pos:end="99:49"><name pos:start="99:38" pos:end="99:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="101:28" pos:end="101:54"><expr pos:start="101:28" pos:end="101:54"><literal type="string" pos:start="101:28" pos:end="101:54">"ac-tex damaged at %d %d\n"</literal></expr></argument>, <argument pos:start="101:57" pos:end="101:63"><expr pos:start="101:57" pos:end="101:63"><name pos:start="101:57" pos:end="101:63"><name pos:start="101:57" pos:end="101:57">a</name><operator pos:start="101:58" pos:end="101:59">-&gt;</operator><name pos:start="101:60" pos:end="101:63">mb_x</name></name></expr></argument>, <argument pos:start="101:66" pos:end="101:72"><expr pos:start="101:66" pos:end="101:72"><name pos:start="101:66" pos:end="101:72"><name pos:start="101:66" pos:end="101:66">a</name><operator pos:start="101:67" pos:end="101:68">-&gt;</operator><name pos:start="101:69" pos:end="101:72">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="103:21" pos:end="103:47">return <expr pos:start="103:28" pos:end="103:46"><name pos:start="103:28" pos:end="103:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:33"><expr pos:start="107:17" pos:end="107:32"><name pos:start="107:17" pos:end="107:17">j</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <name pos:start="107:21" pos:end="107:32"><name pos:start="107:21" pos:end="107:29">scantable</name><index pos:start="107:30" pos:end="107:32">[<expr pos:start="107:31" pos:end="107:31"><name pos:start="107:31" pos:end="107:31">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="109:17" pos:end="125:17"><if pos:start="109:17" pos:end="119:17">if <condition pos:start="109:20" pos:end="109:30">(<expr pos:start="109:21" pos:end="109:29"><name pos:start="109:21" pos:end="109:25">level</name> <operator pos:start="109:27" pos:end="109:27">&lt;</operator> <literal type="number" pos:start="109:29" pos:end="109:29">0</literal></expr>)</condition> <block pos:start="109:32" pos:end="119:17">{<block_content pos:start="111:21" pos:end="117:35">

                    <expr_stmt pos:start="111:21" pos:end="111:35"><expr pos:start="111:21" pos:end="111:34"><name pos:start="111:21" pos:end="111:25">level</name> <operator pos:start="111:27" pos:end="111:27">=</operator> <operator pos:start="111:29" pos:end="111:29">-</operator><name pos:start="111:30" pos:end="111:34">level</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="113:21" pos:end="113:68"><expr pos:start="113:21" pos:end="113:67"><name pos:start="113:21" pos:end="113:25">level</name> <operator pos:start="113:27" pos:end="113:27">=</operator> <operator pos:start="113:29" pos:end="113:29">(</operator><name pos:start="113:30" pos:end="113:34">level</name> <operator pos:start="113:36" pos:end="113:36">*</operator> <name pos:start="113:38" pos:end="113:43">qscale</name> <operator pos:start="113:45" pos:end="113:45">*</operator> <name pos:start="113:47" pos:end="113:61"><name pos:start="113:47" pos:end="113:58">quant_matrix</name><index pos:start="113:59" pos:end="113:61">[<expr pos:start="113:60" pos:end="113:60"><name pos:start="113:60" pos:end="113:60">j</name></expr>]</index></name><operator pos:start="113:62" pos:end="113:62">)</operator> <operator pos:start="113:64" pos:end="113:65">&gt;&gt;</operator> <literal type="number" pos:start="113:67" pos:end="113:67">3</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:44"><expr pos:start="115:21" pos:end="115:43"><name pos:start="115:21" pos:end="115:25">level</name> <operator pos:start="115:27" pos:end="115:27">=</operator> <operator pos:start="115:29" pos:end="115:29">(</operator><name pos:start="115:30" pos:end="115:34">level</name> <operator pos:start="115:36" pos:end="115:36">-</operator> <literal type="number" pos:start="115:38" pos:end="115:38">1</literal><operator pos:start="115:39" pos:end="115:39">)</operator> <operator pos:start="115:41" pos:end="115:41">|</operator> <literal type="number" pos:start="115:43" pos:end="115:43">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:35"><expr pos:start="117:21" pos:end="117:34"><name pos:start="117:21" pos:end="117:25">level</name> <operator pos:start="117:27" pos:end="117:27">=</operator> <operator pos:start="117:29" pos:end="117:29">-</operator><name pos:start="117:30" pos:end="117:34">level</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="119:19" pos:end="125:17">else <block pos:start="119:24" pos:end="125:17">{<block_content pos:start="121:21" pos:end="123:44">

                    <expr_stmt pos:start="121:21" pos:end="121:68"><expr pos:start="121:21" pos:end="121:67"><name pos:start="121:21" pos:end="121:25">level</name> <operator pos:start="121:27" pos:end="121:27">=</operator> <operator pos:start="121:29" pos:end="121:29">(</operator><name pos:start="121:30" pos:end="121:34">level</name> <operator pos:start="121:36" pos:end="121:36">*</operator> <name pos:start="121:38" pos:end="121:43">qscale</name> <operator pos:start="121:45" pos:end="121:45">*</operator> <name pos:start="121:47" pos:end="121:61"><name pos:start="121:47" pos:end="121:58">quant_matrix</name><index pos:start="121:59" pos:end="121:61">[<expr pos:start="121:60" pos:end="121:60"><name pos:start="121:60" pos:end="121:60">j</name></expr>]</index></name><operator pos:start="121:62" pos:end="121:62">)</operator> <operator pos:start="121:64" pos:end="121:65">&gt;&gt;</operator> <literal type="number" pos:start="121:67" pos:end="121:67">3</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="123:21" pos:end="123:44"><expr pos:start="123:21" pos:end="123:43"><name pos:start="123:21" pos:end="123:25">level</name> <operator pos:start="123:27" pos:end="123:27">=</operator> <operator pos:start="123:29" pos:end="123:29">(</operator><name pos:start="123:30" pos:end="123:34">level</name> <operator pos:start="123:36" pos:end="123:36">-</operator> <literal type="number" pos:start="123:38" pos:end="123:38">1</literal><operator pos:start="123:39" pos:end="123:39">)</operator> <operator pos:start="123:41" pos:end="123:41">|</operator> <literal type="number" pos:start="123:43" pos:end="123:43">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="131:13" pos:end="131:29"><expr pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:20"><name pos:start="131:13" pos:end="131:17">block</name><index pos:start="131:18" pos:end="131:20">[<expr pos:start="131:19" pos:end="131:19"><name pos:start="131:19" pos:end="131:19">j</name></expr>]</index></name> <operator pos:start="131:22" pos:end="131:22">=</operator> <name pos:start="131:24" pos:end="131:28">level</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="135:9" pos:end="135:33"><expr pos:start="135:9" pos:end="135:32"><call pos:start="135:9" pos:end="135:32"><name pos:start="135:9" pos:end="135:20">CLOSE_READER</name><argument_list pos:start="135:21" pos:end="135:32">(<argument pos:start="135:22" pos:end="135:23"><expr pos:start="135:22" pos:end="135:23"><name pos:start="135:22" pos:end="135:23">re</name></expr></argument>, <argument pos:start="135:26" pos:end="135:31"><expr pos:start="135:26" pos:end="135:31"><operator pos:start="135:26" pos:end="135:26">&amp;</operator><name pos:start="135:27" pos:end="135:31"><name pos:start="135:27" pos:end="135:27">a</name><operator pos:start="135:28" pos:end="135:29">-&gt;</operator><name pos:start="135:30" pos:end="135:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="139:5" pos:end="139:31"><expr pos:start="139:5" pos:end="139:30"><name pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:5">a</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:23">block_last_index</name><index pos:start="139:24" pos:end="139:26">[<expr pos:start="139:25" pos:end="139:25"><name pos:start="139:25" pos:end="139:25">n</name></expr>]</index></name> <operator pos:start="139:28" pos:end="139:28">=</operator> <name pos:start="139:30" pos:end="139:30">i</name></expr>;</expr_stmt>

    <return pos:start="141:5" pos:end="141:13">return <expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
