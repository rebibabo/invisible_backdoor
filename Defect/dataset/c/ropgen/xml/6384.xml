<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6384.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:28"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:26">HotpluggableCPUList</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:57">spapr_query_hotpluggable_cpus</name><parameter_list pos:start="1:58" pos:end="1:80">(<parameter pos:start="1:59" pos:end="1:79"><decl pos:start="1:59" pos:end="1:79"><type pos:start="1:59" pos:end="1:72"><name pos:start="1:59" pos:end="1:70">MachineState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:79">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:16">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">HotpluggableCPUList</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:29">head</name> <init pos:start="7:31" pos:end="7:36">= <expr pos:start="7:33" pos:end="7:36"><name pos:start="7:33" pos:end="7:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">sPAPRMachineState</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:28">spapr</name> <init pos:start="9:30" pos:end="9:53">= <expr pos:start="9:32" pos:end="9:53"><call pos:start="9:32" pos:end="9:53"><name pos:start="9:32" pos:end="9:44">SPAPR_MACHINE</name><argument_list pos:start="9:45" pos:end="9:53">(<argument pos:start="9:46" pos:end="9:52"><expr pos:start="9:46" pos:end="9:52"><name pos:start="9:46" pos:end="9:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:62"><decl pos:start="11:5" pos:end="11:61"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">sPAPRMachineClass</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:26">smc</name> <init pos:start="11:28" pos:end="11:61">= <expr pos:start="11:30" pos:end="11:61"><call pos:start="11:30" pos:end="11:61"><name pos:start="11:30" pos:end="11:52">SPAPR_MACHINE_GET_CLASS</name><argument_list pos:start="11:53" pos:end="11:61">(<argument pos:start="11:54" pos:end="11:60"><expr pos:start="11:54" pos:end="11:60"><name pos:start="11:54" pos:end="11:60">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:49"><decl pos:start="13:5" pos:end="13:48"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:23">spapr_max_cores</name> <init pos:start="13:25" pos:end="13:48">= <expr pos:start="13:27" pos:end="13:48"><name pos:start="13:27" pos:end="13:34">max_cpus</name> <operator pos:start="13:36" pos:end="13:36">/</operator> <name pos:start="13:38" pos:end="13:48">smp_threads</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><call pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:12">g_assert</name><argument_list pos:start="17:13" pos:end="17:33">(<argument pos:start="17:14" pos:end="17:32"><expr pos:start="17:14" pos:end="17:32"><name pos:start="17:14" pos:end="17:32"><name pos:start="17:14" pos:end="17:16">smc</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:32">dr_cpu_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="21:5" pos:end="61:5">for <control pos:start="21:9" pos:end="21:41">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:36"><expr pos:start="21:17" pos:end="21:35"><name pos:start="21:17" pos:end="21:17">i</name> <operator pos:start="21:19" pos:end="21:19">&lt;</operator> <name pos:start="21:21" pos:end="21:35">spapr_max_cores</name></expr>;</condition> <incr pos:start="21:38" pos:end="21:40"><expr pos:start="21:38" pos:end="21:40"><name pos:start="21:38" pos:end="21:38">i</name><operator pos:start="21:39" pos:end="21:40">++</operator></expr></incr>)</control> <block pos:start="21:43" pos:end="61:5">{<block_content pos:start="23:9" pos:end="59:25">

        <decl_stmt pos:start="23:9" pos:end="23:71"><decl pos:start="23:9" pos:end="23:70"><type pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:27">HotpluggableCPUList</name> <modifier pos:start="23:29" pos:end="23:29">*</modifier></type><name pos:start="23:30" pos:end="23:38">list_item</name> <init pos:start="23:40" pos:end="23:70">= <expr pos:start="23:42" pos:end="23:70"><call pos:start="23:42" pos:end="23:70"><name pos:start="23:42" pos:end="23:47">g_new0</name><argument_list pos:start="23:48" pos:end="23:70">(<argument pos:start="23:49" pos:end="23:66"><expr pos:start="23:49" pos:end="23:66"><call pos:start="23:49" pos:end="23:66"><name pos:start="23:49" pos:end="23:54">typeof</name><argument_list pos:start="23:55" pos:end="23:66">(<argument pos:start="23:56" pos:end="23:65"><expr pos:start="23:56" pos:end="23:65"><operator pos:start="23:56" pos:end="23:56">*</operator><name pos:start="23:57" pos:end="23:65">list_item</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="23:69" pos:end="23:69"><expr pos:start="23:69" pos:end="23:69"><literal type="number" pos:start="23:69" pos:end="23:69">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:65"><decl pos:start="25:9" pos:end="25:64"><type pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:23">HotpluggableCPU</name> <modifier pos:start="25:25" pos:end="25:25">*</modifier></type><name pos:start="25:26" pos:end="25:33">cpu_item</name> <init pos:start="25:35" pos:end="25:64">= <expr pos:start="25:37" pos:end="25:64"><call pos:start="25:37" pos:end="25:64"><name pos:start="25:37" pos:end="25:42">g_new0</name><argument_list pos:start="25:43" pos:end="25:64">(<argument pos:start="25:44" pos:end="25:60"><expr pos:start="25:44" pos:end="25:60"><call pos:start="25:44" pos:end="25:60"><name pos:start="25:44" pos:end="25:49">typeof</name><argument_list pos:start="25:50" pos:end="25:60">(<argument pos:start="25:51" pos:end="25:59"><expr pos:start="25:51" pos:end="25:59"><operator pos:start="25:51" pos:end="25:51">*</operator><name pos:start="25:52" pos:end="25:59">cpu_item</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:63" pos:end="25:63"><expr pos:start="25:63" pos:end="25:63"><literal type="number" pos:start="25:63" pos:end="25:63">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:73"><decl pos:start="27:9" pos:end="27:72"><type pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:29">CpuInstanceProperties</name> <modifier pos:start="27:31" pos:end="27:31">*</modifier></type><name pos:start="27:32" pos:end="27:40">cpu_props</name> <init pos:start="27:42" pos:end="27:72">= <expr pos:start="27:44" pos:end="27:72"><call pos:start="27:44" pos:end="27:72"><name pos:start="27:44" pos:end="27:49">g_new0</name><argument_list pos:start="27:50" pos:end="27:72">(<argument pos:start="27:51" pos:end="27:68"><expr pos:start="27:51" pos:end="27:68"><call pos:start="27:51" pos:end="27:68"><name pos:start="27:51" pos:end="27:56">typeof</name><argument_list pos:start="27:57" pos:end="27:68">(<argument pos:start="27:58" pos:end="27:67"><expr pos:start="27:58" pos:end="27:67"><operator pos:start="27:58" pos:end="27:58">*</operator><name pos:start="27:59" pos:end="27:67">cpu_props</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:71" pos:end="27:71"><expr pos:start="27:71" pos:end="27:71"><literal type="number" pos:start="27:71" pos:end="27:71">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:69"><expr pos:start="31:9" pos:end="31:68"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:16">cpu_item</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:22">type</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <call pos:start="31:26" pos:end="31:68"><name pos:start="31:26" pos:end="31:48">spapr_get_cpu_core_type</name><argument_list pos:start="31:49" pos:end="31:68">(<argument pos:start="31:50" pos:end="31:67"><expr pos:start="31:50" pos:end="31:67"><name pos:start="31:50" pos:end="31:67"><name pos:start="31:50" pos:end="31:56">machine</name><operator pos:start="31:57" pos:end="31:58">-&gt;</operator><name pos:start="31:59" pos:end="31:67">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:44"><expr pos:start="33:9" pos:end="33:43"><name pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:16">cpu_item</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:29">vcpus_count</name></name> <operator pos:start="33:31" pos:end="33:31">=</operator> <name pos:start="33:33" pos:end="33:43">smp_threads</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:30"><name pos:start="35:9" pos:end="35:17">cpu_props</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:30">has_core_id</name></name> <operator pos:start="35:32" pos:end="35:32">=</operator> <name pos:start="35:34" pos:end="35:37">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:17">cpu_props</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:26">core_id</name></name> <operator pos:start="37:28" pos:end="37:28">=</operator> <name pos:start="37:30" pos:end="37:30">i</name> <operator pos:start="37:32" pos:end="37:32">*</operator> <name pos:start="37:34" pos:end="37:44">smp_threads</name></expr>;</expr_stmt>

        <comment type="block" pos:start="39:9" pos:end="41:40">/* TODO: add 'has_node/node' here to describe

           to which node core belongs */</comment>



        <expr_stmt pos:start="45:9" pos:end="45:36"><expr pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:16">cpu_item</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:23">props</name></name> <operator pos:start="45:25" pos:end="45:25">=</operator> <name pos:start="45:27" pos:end="45:35">cpu_props</name></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:28">(<expr pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:17">spapr</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:24">cores</name><index pos:start="47:25" pos:end="47:27">[<expr pos:start="47:26" pos:end="47:26"><name pos:start="47:26" pos:end="47:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="47:30" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:76">

            <expr_stmt pos:start="49:13" pos:end="49:42"><expr pos:start="49:13" pos:end="49:41"><name pos:start="49:13" pos:end="49:34"><name pos:start="49:13" pos:end="49:20">cpu_item</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:34">has_qom_path</name></name> <operator pos:start="49:36" pos:end="49:36">=</operator> <name pos:start="49:38" pos:end="49:41">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:76"><expr pos:start="51:13" pos:end="51:75"><name pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:20">cpu_item</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:30">qom_path</name></name> <operator pos:start="51:32" pos:end="51:32">=</operator> <call pos:start="51:34" pos:end="51:75"><name pos:start="51:34" pos:end="51:58">object_get_canonical_path</name><argument_list pos:start="51:59" pos:end="51:75">(<argument pos:start="51:60" pos:end="51:74"><expr pos:start="51:60" pos:end="51:74"><name pos:start="51:60" pos:end="51:74"><name pos:start="51:60" pos:end="51:64">spapr</name><operator pos:start="51:65" pos:end="51:66">-&gt;</operator><name pos:start="51:67" pos:end="51:71">cores</name><index pos:start="51:72" pos:end="51:74">[<expr pos:start="51:73" pos:end="51:73"><name pos:start="51:73" pos:end="51:73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:36"><expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:17">list_item</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:24">value</name></name> <operator pos:start="55:26" pos:end="55:26">=</operator> <name pos:start="55:28" pos:end="55:35">cpu_item</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:31"><expr pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:17">list_item</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:23">next</name></name> <operator pos:start="57:25" pos:end="57:25">=</operator> <name pos:start="57:27" pos:end="57:30">head</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:25"><expr pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:12">head</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:24">list_item</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="63:5" pos:end="63:16">return <expr pos:start="63:12" pos:end="63:15"><name pos:start="63:12" pos:end="63:15">head</name></expr>;</return>

</block_content>}</block></function>
</unit>
