<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1597.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:32"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">select_vgahw</name> <parameter_list pos:start="1:26" pos:end="1:40">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:38"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">p</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="35:32">{<block_content pos:start="3:5" pos:end="35:32">
    <decl_stmt pos:start="3:5" pos:end="3:21"><decl pos:start="3:5" pos:end="3:20"><type pos:start="3:5" pos:end="3:16"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:14">char</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:20">opts</name></decl>;</decl_stmt>
    <expr_stmt pos:start="4:5" pos:end="4:34"><expr pos:start="4:5" pos:end="4:33"><name pos:start="4:5" pos:end="4:22">vga_interface_type</name> <operator pos:start="4:24" pos:end="4:24">=</operator> <name pos:start="4:26" pos:end="4:33">VGA_NONE</name></expr>;</expr_stmt>
    <if_stmt pos:start="5:5" pos:end="35:32"><if pos:start="5:5" pos:end="35:32">if <condition pos:start="5:8" pos:end="5:34">(<expr pos:start="5:9" pos:end="5:33"><call pos:start="5:9" pos:end="5:33"><name pos:start="5:9" pos:end="5:16">strstart</name><argument_list pos:start="5:17" pos:end="5:33">(<argument pos:start="5:18" pos:end="5:18"><expr pos:start="5:18" pos:end="5:18"><name pos:start="5:18" pos:end="5:18">p</name></expr></argument>, <argument pos:start="5:21" pos:end="5:25"><expr pos:start="5:21" pos:end="5:25"><literal type="string" pos:start="5:21" pos:end="5:25">"std"</literal></expr></argument>, <argument pos:start="5:28" pos:end="5:32"><expr pos:start="5:28" pos:end="5:32"><operator pos:start="5:28" pos:end="5:28">&amp;</operator><name pos:start="5:29" pos:end="5:32">opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5:36" pos:end="35:32">{<block_content pos:start="6:9" pos:end="35:32">
        <if_stmt pos:start="6:9" pos:end="35:32"><if pos:start="6:9" pos:end="10:5">if <condition pos:start="6:12" pos:end="6:28">(<expr pos:start="6:13" pos:end="6:27"><call pos:start="6:13" pos:end="6:27"><name pos:start="6:13" pos:end="6:25">vga_available</name><argument_list pos:start="6:26" pos:end="6:27">()</argument_list></call></expr>)</condition> <block pos:start="6:30" pos:end="10:5">{<block_content pos:start="7:13" pos:end="9:20">
            <expr_stmt pos:start="7:13" pos:end="7:41"><expr pos:start="7:13" pos:end="7:40"><name pos:start="7:13" pos:end="7:30">vga_interface_type</name> <operator pos:start="7:32" pos:end="7:32">=</operator> <name pos:start="7:34" pos:end="7:40">VGA_STD</name></expr>;</expr_stmt>
            <expr_stmt pos:start="8:13" pos:end="8:67"><expr pos:start="8:13" pos:end="8:66"><call pos:start="8:13" pos:end="8:66"><name pos:start="8:13" pos:end="8:19">fprintf</name><argument_list pos:start="8:20" pos:end="8:66">(<argument pos:start="8:21" pos:end="8:26"><expr pos:start="8:21" pos:end="8:26"><name pos:start="8:21" pos:end="8:26">stderr</name></expr></argument>, <argument pos:start="8:29" pos:end="8:65"><expr pos:start="8:29" pos:end="8:65"><literal type="string" pos:start="8:29" pos:end="8:65">"Error: standard VGA not available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="9:13" pos:end="9:20"><expr pos:start="9:13" pos:end="9:19"><call pos:start="9:13" pos:end="9:19"><name pos:start="9:13" pos:end="9:16">exit</name><argument_list pos:start="9:17" pos:end="9:19">(<argument pos:start="9:18" pos:end="9:18"><expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="10:7" pos:end="35:32">else if <condition pos:start="10:15" pos:end="10:44">(<expr pos:start="10:16" pos:end="10:43"><call pos:start="10:16" pos:end="10:43"><name pos:start="10:16" pos:end="10:23">strstart</name><argument_list pos:start="10:24" pos:end="10:43">(<argument pos:start="10:25" pos:end="10:25"><expr pos:start="10:25" pos:end="10:25"><name pos:start="10:25" pos:end="10:25">p</name></expr></argument>, <argument pos:start="10:28" pos:end="10:35"><expr pos:start="10:28" pos:end="10:35"><literal type="string" pos:start="10:28" pos:end="10:35">"cirrus"</literal></expr></argument>, <argument pos:start="10:38" pos:end="10:42"><expr pos:start="10:38" pos:end="10:42"><operator pos:start="10:38" pos:end="10:38">&amp;</operator><name pos:start="10:39" pos:end="10:42">opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="10:46" pos:end="35:32">{<block_content pos:start="11:9" pos:end="35:32">
        <if_stmt pos:start="11:9" pos:end="35:32"><if pos:start="11:9" pos:end="15:5">if <condition pos:start="11:12" pos:end="11:35">(<expr pos:start="11:13" pos:end="11:34"><call pos:start="11:13" pos:end="11:34"><name pos:start="11:13" pos:end="11:32">cirrus_vga_available</name><argument_list pos:start="11:33" pos:end="11:34">()</argument_list></call></expr>)</condition> <block pos:start="11:37" pos:end="15:5">{<block_content pos:start="12:13" pos:end="14:20">
            <expr_stmt pos:start="12:13" pos:end="12:44"><expr pos:start="12:13" pos:end="12:43"><name pos:start="12:13" pos:end="12:30">vga_interface_type</name> <operator pos:start="12:32" pos:end="12:32">=</operator> <name pos:start="12:34" pos:end="12:43">VGA_CIRRUS</name></expr>;</expr_stmt>
            <expr_stmt pos:start="13:13" pos:end="13:65"><expr pos:start="13:13" pos:end="13:64"><call pos:start="13:13" pos:end="13:64"><name pos:start="13:13" pos:end="13:19">fprintf</name><argument_list pos:start="13:20" pos:end="13:64">(<argument pos:start="13:21" pos:end="13:26"><expr pos:start="13:21" pos:end="13:26"><name pos:start="13:21" pos:end="13:26">stderr</name></expr></argument>, <argument pos:start="13:29" pos:end="13:63"><expr pos:start="13:29" pos:end="13:63"><literal type="string" pos:start="13:29" pos:end="13:63">"Error: Cirrus VGA not available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="14:13" pos:end="14:20"><expr pos:start="14:13" pos:end="14:19"><call pos:start="14:13" pos:end="14:19"><name pos:start="14:13" pos:end="14:16">exit</name><argument_list pos:start="14:17" pos:end="14:19">(<argument pos:start="14:18" pos:end="14:18"><expr pos:start="14:18" pos:end="14:18"><literal type="number" pos:start="14:18" pos:end="14:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="15:7" pos:end="35:32">else if <condition pos:start="15:15" pos:end="15:44">(<expr pos:start="15:16" pos:end="15:43"><call pos:start="15:16" pos:end="15:43"><name pos:start="15:16" pos:end="15:23">strstart</name><argument_list pos:start="15:24" pos:end="15:43">(<argument pos:start="15:25" pos:end="15:25"><expr pos:start="15:25" pos:end="15:25"><name pos:start="15:25" pos:end="15:25">p</name></expr></argument>, <argument pos:start="15:28" pos:end="15:35"><expr pos:start="15:28" pos:end="15:35"><literal type="string" pos:start="15:28" pos:end="15:35">"vmware"</literal></expr></argument>, <argument pos:start="15:38" pos:end="15:42"><expr pos:start="15:38" pos:end="15:42"><operator pos:start="15:38" pos:end="15:38">&amp;</operator><name pos:start="15:39" pos:end="15:42">opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:46" pos:end="35:32">{<block_content pos:start="16:9" pos:end="35:32">
        <if_stmt pos:start="16:9" pos:end="35:32"><if pos:start="16:9" pos:end="20:5">if <condition pos:start="16:12" pos:end="16:35">(<expr pos:start="16:13" pos:end="16:34"><call pos:start="16:13" pos:end="16:34"><name pos:start="16:13" pos:end="16:32">vmware_vga_available</name><argument_list pos:start="16:33" pos:end="16:34">()</argument_list></call></expr>)</condition> <block pos:start="16:37" pos:end="20:5">{<block_content pos:start="17:13" pos:end="19:20">
            <expr_stmt pos:start="17:13" pos:end="17:44"><expr pos:start="17:13" pos:end="17:43"><name pos:start="17:13" pos:end="17:30">vga_interface_type</name> <operator pos:start="17:32" pos:end="17:32">=</operator> <name pos:start="17:34" pos:end="17:43">VGA_VMWARE</name></expr>;</expr_stmt>
            <expr_stmt pos:start="18:13" pos:end="18:66"><expr pos:start="18:13" pos:end="18:65"><call pos:start="18:13" pos:end="18:65"><name pos:start="18:13" pos:end="18:19">fprintf</name><argument_list pos:start="18:20" pos:end="18:65">(<argument pos:start="18:21" pos:end="18:26"><expr pos:start="18:21" pos:end="18:26"><name pos:start="18:21" pos:end="18:26">stderr</name></expr></argument>, <argument pos:start="18:29" pos:end="18:64"><expr pos:start="18:29" pos:end="18:64"><literal type="string" pos:start="18:29" pos:end="18:64">"Error: VMWare SVGA not available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="19:13" pos:end="19:20"><expr pos:start="19:13" pos:end="19:19"><call pos:start="19:13" pos:end="19:19"><name pos:start="19:13" pos:end="19:16">exit</name><argument_list pos:start="19:17" pos:end="19:19">(<argument pos:start="19:18" pos:end="19:18"><expr pos:start="19:18" pos:end="19:18"><literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="20:7" pos:end="22:5">else if <condition pos:start="20:15" pos:end="20:43">(<expr pos:start="20:16" pos:end="20:42"><call pos:start="20:16" pos:end="20:42"><name pos:start="20:16" pos:end="20:23">strstart</name><argument_list pos:start="20:24" pos:end="20:42">(<argument pos:start="20:25" pos:end="20:25"><expr pos:start="20:25" pos:end="20:25"><name pos:start="20:25" pos:end="20:25">p</name></expr></argument>, <argument pos:start="20:28" pos:end="20:34"><expr pos:start="20:28" pos:end="20:34"><literal type="string" pos:start="20:28" pos:end="20:34">"xenfb"</literal></expr></argument>, <argument pos:start="20:37" pos:end="20:41"><expr pos:start="20:37" pos:end="20:41"><operator pos:start="20:37" pos:end="20:37">&amp;</operator><name pos:start="20:38" pos:end="20:41">opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="20:45" pos:end="22:5">{<block_content pos:start="21:9" pos:end="21:39">
        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:26">vga_interface_type</name> <operator pos:start="21:28" pos:end="21:28">=</operator> <name pos:start="21:30" pos:end="21:38">VGA_XENFB</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="22:7" pos:end="24:5">else if <condition pos:start="22:15" pos:end="22:41">(<expr pos:start="22:16" pos:end="22:40"><call pos:start="22:16" pos:end="22:40"><name pos:start="22:16" pos:end="22:23">strstart</name><argument_list pos:start="22:24" pos:end="22:40">(<argument pos:start="22:25" pos:end="22:25"><expr pos:start="22:25" pos:end="22:25"><name pos:start="22:25" pos:end="22:25">p</name></expr></argument>, <argument pos:start="22:28" pos:end="22:32"><expr pos:start="22:28" pos:end="22:32"><literal type="string" pos:start="22:28" pos:end="22:32">"qxl"</literal></expr></argument>, <argument pos:start="22:35" pos:end="22:39"><expr pos:start="22:35" pos:end="22:39"><operator pos:start="22:35" pos:end="22:35">&amp;</operator><name pos:start="22:36" pos:end="22:39">opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="22:43" pos:end="24:5">{<block_content pos:start="23:9" pos:end="23:37">
        <expr_stmt pos:start="23:9" pos:end="23:37"><expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:26">vga_interface_type</name> <operator pos:start="23:28" pos:end="23:28">=</operator> <name pos:start="23:30" pos:end="23:36">VGA_QXL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="24:7" pos:end="35:32">else if <condition pos:start="24:15" pos:end="24:43">(<expr pos:start="24:16" pos:end="24:42"><operator pos:start="24:16" pos:end="24:16">!</operator><call pos:start="24:17" pos:end="24:42"><name pos:start="24:17" pos:end="24:24">strstart</name><argument_list pos:start="24:25" pos:end="24:42">(<argument pos:start="24:26" pos:end="24:26"><expr pos:start="24:26" pos:end="24:26"><name pos:start="24:26" pos:end="24:26">p</name></expr></argument>, <argument pos:start="24:29" pos:end="24:34"><expr pos:start="24:29" pos:end="24:34"><literal type="string" pos:start="24:29" pos:end="24:34">"none"</literal></expr></argument>, <argument pos:start="24:37" pos:end="24:41"><expr pos:start="24:37" pos:end="24:41"><operator pos:start="24:37" pos:end="24:37">&amp;</operator><name pos:start="24:38" pos:end="24:41">opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="24:45" pos:end="35:32">{<block_content pos:start="25:5" pos:end="35:32">
    <label pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:15">invalid_vga</name>:</label>
        <expr_stmt pos:start="26:9" pos:end="26:53"><expr pos:start="26:9" pos:end="26:52"><call pos:start="26:9" pos:end="26:52"><name pos:start="26:9" pos:end="26:15">fprintf</name><argument_list pos:start="26:16" pos:end="26:52">(<argument pos:start="26:17" pos:end="26:22"><expr pos:start="26:17" pos:end="26:22"><name pos:start="26:17" pos:end="26:22">stderr</name></expr></argument>, <argument pos:start="26:25" pos:end="26:48"><expr pos:start="26:25" pos:end="26:48"><literal type="string" pos:start="26:25" pos:end="26:48">"Unknown vga type: %s\n"</literal></expr></argument>, <argument pos:start="26:51" pos:end="26:51"><expr pos:start="26:51" pos:end="26:51"><name pos:start="26:51" pos:end="26:51">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><call pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">exit</name><argument_list pos:start="27:13" pos:end="27:15">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt pos:start="28:9" pos:end="28:28"><decl pos:start="28:9" pos:end="28:27"><type pos:start="28:9" pos:end="28:20"><specifier pos:start="28:9" pos:end="28:13">const</specifier> <name pos:start="28:15" pos:end="28:18">char</name> <modifier pos:start="28:20" pos:end="28:20">*</modifier></type><name pos:start="28:21" pos:end="28:27">nextopt</name></decl>;</decl_stmt>
        <if_stmt pos:start="29:9" pos:end="35:32"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:50">(<expr pos:start="29:13" pos:end="29:49"><call pos:start="29:13" pos:end="29:49"><name pos:start="29:13" pos:end="29:20">strstart</name><argument_list pos:start="29:21" pos:end="29:49">(<argument pos:start="29:22" pos:end="29:25"><expr pos:start="29:22" pos:end="29:25"><name pos:start="29:22" pos:end="29:25">opts</name></expr></argument>, <argument pos:start="29:28" pos:end="29:38"><expr pos:start="29:28" pos:end="29:38"><literal type="string" pos:start="29:28" pos:end="29:38">",retrace="</literal></expr></argument>, <argument pos:start="29:41" pos:end="29:48"><expr pos:start="29:41" pos:end="29:48"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:48">nextopt</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:52" pos:end="35:9">{<block_content pos:start="30:13" pos:end="34:34">
            <if_stmt pos:start="30:13" pos:end="34:34"><if pos:start="30:13" pos:end="31:54">if <condition pos:start="30:16" pos:end="30:49">(<expr pos:start="30:17" pos:end="30:48"><call pos:start="30:17" pos:end="30:48"><name pos:start="30:17" pos:end="30:24">strstart</name><argument_list pos:start="30:25" pos:end="30:48">(<argument pos:start="30:26" pos:end="30:29"><expr pos:start="30:26" pos:end="30:29"><name pos:start="30:26" pos:end="30:29">opts</name></expr></argument>, <argument pos:start="30:32" pos:end="30:37"><expr pos:start="30:32" pos:end="30:37"><literal type="string" pos:start="30:32" pos:end="30:37">"dumb"</literal></expr></argument>, <argument pos:start="30:40" pos:end="30:47"><expr pos:start="30:40" pos:end="30:47"><operator pos:start="30:40" pos:end="30:40">&amp;</operator><name pos:start="30:41" pos:end="30:47">nextopt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:17" pos:end="31:54"><block_content pos:start="31:17" pos:end="31:54">
                <expr_stmt pos:start="31:17" pos:end="31:54"><expr pos:start="31:17" pos:end="31:53"><name pos:start="31:17" pos:end="31:34">vga_retrace_method</name> <operator pos:start="31:36" pos:end="31:36">=</operator> <name pos:start="31:38" pos:end="31:53">VGA_RETRACE_DUMB</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="32:13" pos:end="33:57">else if <condition pos:start="32:21" pos:end="32:57">(<expr pos:start="32:22" pos:end="32:56"><call pos:start="32:22" pos:end="32:56"><name pos:start="32:22" pos:end="32:29">strstart</name><argument_list pos:start="32:30" pos:end="32:56">(<argument pos:start="32:31" pos:end="32:34"><expr pos:start="32:31" pos:end="32:34"><name pos:start="32:31" pos:end="32:34">opts</name></expr></argument>, <argument pos:start="32:37" pos:end="32:45"><expr pos:start="32:37" pos:end="32:45"><literal type="string" pos:start="32:37" pos:end="32:45">"precise"</literal></expr></argument>, <argument pos:start="32:48" pos:end="32:55"><expr pos:start="32:48" pos:end="32:55"><operator pos:start="32:48" pos:end="32:48">&amp;</operator><name pos:start="32:49" pos:end="32:55">nextopt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:57"><block_content pos:start="33:17" pos:end="33:57">
                <expr_stmt pos:start="33:17" pos:end="33:57"><expr pos:start="33:17" pos:end="33:56"><name pos:start="33:17" pos:end="33:34">vga_retrace_method</name> <operator pos:start="33:36" pos:end="33:36">=</operator> <name pos:start="33:38" pos:end="33:56">VGA_RETRACE_PRECISE</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="34:13" pos:end="34:34">else<block type="pseudo" pos:start="34:18" pos:end="34:34"><block_content pos:start="34:18" pos:end="34:34"> <goto pos:start="34:18" pos:end="34:34">goto <name pos:start="34:23" pos:end="34:33">invalid_vga</name>;</goto></block_content></block></else></if_stmt>
        </block_content>}</block></if> <else pos:start="35:11" pos:end="35:32">else<block type="pseudo" pos:start="35:16" pos:end="35:32"><block_content pos:start="35:16" pos:end="35:32"> <goto pos:start="35:16" pos:end="35:32">goto <name pos:start="35:21" pos:end="35:31">invalid_vga</name>;</goto></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
