<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26224.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">gic_update</name><parameter_list pos:start="1:23" pos:end="1:36">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:34"><name pos:start="1:24" pos:end="1:32">gic_state</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:35">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">best_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">best_prio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">cm</name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="71:5">for <control pos:start="19:9" pos:end="19:42">(<init pos:start="19:10" pos:end="19:17"><expr pos:start="19:10" pos:end="19:16"><name pos:start="19:10" pos:end="19:12">cpu</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</init> <condition pos:start="19:19" pos:end="19:35"><expr pos:start="19:19" pos:end="19:34"><name pos:start="19:19" pos:end="19:21">cpu</name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <call pos:start="19:25" pos:end="19:34"><name pos:start="19:25" pos:end="19:31">NUM_CPU</name><argument_list pos:start="19:32" pos:end="19:34">(<argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><name pos:start="19:33" pos:end="19:33">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="19:37" pos:end="19:41"><expr pos:start="19:37" pos:end="19:41"><name pos:start="19:37" pos:end="19:39">cpu</name><operator pos:start="19:40" pos:end="19:41">++</operator></expr></incr>)</control> <block pos:start="19:44" pos:end="71:5">{<block_content pos:start="21:9" pos:end="69:48">

        <expr_stmt pos:start="21:9" pos:end="21:22"><expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:10">cm</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">1</literal> <operator pos:start="21:16" pos:end="21:17">&lt;&lt;</operator> <name pos:start="21:19" pos:end="21:21">cpu</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:26">current_pending</name><index pos:start="23:27" pos:end="23:31">[<expr pos:start="23:28" pos:end="23:30"><name pos:start="23:28" pos:end="23:30">cpu</name></expr>]</index></name> <operator pos:start="23:33" pos:end="23:33">=</operator> <literal type="number" pos:start="23:35" pos:end="23:38">1023</literal></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="31:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:48">(<expr pos:start="25:13" pos:end="25:47"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:23"><name pos:start="25:14" pos:end="25:14">s</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:23">enabled</name></name> <operator pos:start="25:25" pos:end="25:26">||</operator> <operator pos:start="25:28" pos:end="25:28">!</operator><name pos:start="25:29" pos:end="25:47"><name pos:start="25:29" pos:end="25:29">s</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:42">cpu_enabled</name><index pos:start="25:43" pos:end="25:47">[<expr pos:start="25:44" pos:end="25:46"><name pos:start="25:44" pos:end="25:46">cpu</name></expr>]</index></name></expr>)</condition> <block pos:start="25:50" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:19">

	    <expr_stmt pos:start="27:13" pos:end="27:47"><expr pos:start="27:13" pos:end="27:46"><call pos:start="27:13" pos:end="27:46"><name pos:start="27:13" pos:end="27:26">qemu_irq_lower</name><argument_list pos:start="27:27" pos:end="27:46">(<argument pos:start="27:28" pos:end="27:45"><expr pos:start="27:28" pos:end="27:45"><name pos:start="27:28" pos:end="27:45"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:40">parent_irq</name><index pos:start="27:41" pos:end="27:45">[<expr pos:start="27:42" pos:end="27:44"><name pos:start="27:42" pos:end="27:44">cpu</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="29:13" pos:end="29:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:26"><expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17">best_prio</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:25">0x100</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:24"><expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:16">best_irq</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <literal type="number" pos:start="35:20" pos:end="35:23">1023</literal></expr>;</expr_stmt>

        <for pos:start="37:9" pos:end="51:9">for <control pos:start="37:13" pos:end="37:44">(<init pos:start="37:14" pos:end="37:21"><expr pos:start="37:14" pos:end="37:20"><name pos:start="37:14" pos:end="37:16">irq</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>;</init> <condition pos:start="37:23" pos:end="37:37"><expr pos:start="37:23" pos:end="37:36"><name pos:start="37:23" pos:end="37:25">irq</name> <operator pos:start="37:27" pos:end="37:27">&lt;</operator> <name pos:start="37:29" pos:end="37:36">GIC_NIRQ</name></expr>;</condition> <incr pos:start="37:39" pos:end="37:43"><expr pos:start="37:39" pos:end="37:43"><name pos:start="37:39" pos:end="37:41">irq</name><operator pos:start="37:42" pos:end="37:43">++</operator></expr></incr>)</control> <block pos:start="37:46" pos:end="51:9">{<block_content pos:start="39:13" pos:end="49:13">

            <if_stmt pos:start="39:13" pos:end="49:13"><if pos:start="39:13" pos:end="49:13">if <condition pos:start="39:16" pos:end="39:67">(<expr pos:start="39:17" pos:end="39:66"><call pos:start="39:17" pos:end="39:37"><name pos:start="39:17" pos:end="39:32">GIC_TEST_ENABLED</name><argument_list pos:start="39:33" pos:end="39:37">(<argument pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:36">irq</name></expr></argument>)</argument_list></call> <operator pos:start="39:39" pos:end="39:40">&amp;&amp;</operator> <call pos:start="39:42" pos:end="39:66"><name pos:start="39:42" pos:end="39:57">GIC_TEST_PENDING</name><argument_list pos:start="39:58" pos:end="39:66">(<argument pos:start="39:59" pos:end="39:61"><expr pos:start="39:59" pos:end="39:61"><name pos:start="39:59" pos:end="39:61">irq</name></expr></argument>, <argument pos:start="39:64" pos:end="39:65"><expr pos:start="39:64" pos:end="39:65"><name pos:start="39:64" pos:end="39:65">cm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:69" pos:end="49:13">{<block_content pos:start="41:17" pos:end="47:17">

                <if_stmt pos:start="41:17" pos:end="47:17"><if pos:start="41:17" pos:end="47:17">if <condition pos:start="41:20" pos:end="41:59">(<expr pos:start="41:21" pos:end="41:58"><call pos:start="41:21" pos:end="41:46"><name pos:start="41:21" pos:end="41:36">GIC_GET_PRIORITY</name><argument_list pos:start="41:37" pos:end="41:46">(<argument pos:start="41:38" pos:end="41:40"><expr pos:start="41:38" pos:end="41:40"><name pos:start="41:38" pos:end="41:40">irq</name></expr></argument>, <argument pos:start="41:43" pos:end="41:45"><expr pos:start="41:43" pos:end="41:45"><name pos:start="41:43" pos:end="41:45">cpu</name></expr></argument>)</argument_list></call> <operator pos:start="41:48" pos:end="41:48">&lt;</operator> <name pos:start="41:50" pos:end="41:58">best_prio</name></expr>)</condition> <block pos:start="41:61" pos:end="47:17">{<block_content pos:start="43:21" pos:end="45:35">

                    <expr_stmt pos:start="43:21" pos:end="43:59"><expr pos:start="43:21" pos:end="43:58"><name pos:start="43:21" pos:end="43:29">best_prio</name> <operator pos:start="43:31" pos:end="43:31">=</operator> <call pos:start="43:33" pos:end="43:58"><name pos:start="43:33" pos:end="43:48">GIC_GET_PRIORITY</name><argument_list pos:start="43:49" pos:end="43:58">(<argument pos:start="43:50" pos:end="43:52"><expr pos:start="43:50" pos:end="43:52"><name pos:start="43:50" pos:end="43:52">irq</name></expr></argument>, <argument pos:start="43:55" pos:end="43:57"><expr pos:start="43:55" pos:end="43:57"><name pos:start="43:55" pos:end="43:57">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="45:21" pos:end="45:35"><expr pos:start="45:21" pos:end="45:34"><name pos:start="45:21" pos:end="45:28">best_irq</name> <operator pos:start="45:30" pos:end="45:30">=</operator> <name pos:start="45:32" pos:end="45:34">irq</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="53:9" pos:end="53:18"><expr pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:13">level</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <literal type="number" pos:start="53:17" pos:end="53:17">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="67:9"><if pos:start="55:9" pos:end="67:9">if <condition pos:start="55:12" pos:end="55:47">(<expr pos:start="55:13" pos:end="55:46"><name pos:start="55:13" pos:end="55:21">best_prio</name> <operator pos:start="55:23" pos:end="55:24">&lt;=</operator> <name pos:start="55:26" pos:end="55:46"><name pos:start="55:26" pos:end="55:26">s</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:41">priority_mask</name><index pos:start="55:42" pos:end="55:46">[<expr pos:start="55:43" pos:end="55:45"><name pos:start="55:43" pos:end="55:45">cpu</name></expr>]</index></name></expr>)</condition> <block pos:start="55:49" pos:end="67:9">{<block_content pos:start="57:13" pos:end="65:13">

            <expr_stmt pos:start="57:13" pos:end="57:47"><expr pos:start="57:13" pos:end="57:46"><name pos:start="57:13" pos:end="57:35"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:30">current_pending</name><index pos:start="57:31" pos:end="57:35">[<expr pos:start="57:32" pos:end="57:34"><name pos:start="57:32" pos:end="57:34">cpu</name></expr>]</index></name> <operator pos:start="57:37" pos:end="57:37">=</operator> <name pos:start="57:39" pos:end="57:46">best_irq</name></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="65:13"><if pos:start="59:13" pos:end="65:13">if <condition pos:start="59:16" pos:end="59:53">(<expr pos:start="59:17" pos:end="59:52"><name pos:start="59:17" pos:end="59:25">best_prio</name> <operator pos:start="59:27" pos:end="59:27">&lt;</operator> <name pos:start="59:29" pos:end="59:52"><name pos:start="59:29" pos:end="59:29">s</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:47">running_priority</name><index pos:start="59:48" pos:end="59:52">[<expr pos:start="59:49" pos:end="59:51"><name pos:start="59:49" pos:end="59:51">cpu</name></expr>]</index></name></expr>)</condition> <block pos:start="59:55" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:26">

                <expr_stmt pos:start="61:17" pos:end="61:61"><expr pos:start="61:17" pos:end="61:60"><call pos:start="61:17" pos:end="61:60"><name pos:start="61:17" pos:end="61:23">DPRINTF</name><argument_list pos:start="61:24" pos:end="61:60">(<argument pos:start="61:25" pos:end="61:49"><expr pos:start="61:25" pos:end="61:49"><literal type="string" pos:start="61:25" pos:end="61:49">"Raised pending IRQ %d\n"</literal></expr></argument>, <argument pos:start="61:52" pos:end="61:59"><expr pos:start="61:52" pos:end="61:59"><name pos:start="61:52" pos:end="61:59">best_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:26"><expr pos:start="63:17" pos:end="63:25"><name pos:start="63:17" pos:end="63:21">level</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <literal type="number" pos:start="63:25" pos:end="63:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:48"><expr pos:start="69:9" pos:end="69:47"><call pos:start="69:9" pos:end="69:47"><name pos:start="69:9" pos:end="69:20">qemu_set_irq</name><argument_list pos:start="69:21" pos:end="69:47">(<argument pos:start="69:22" pos:end="69:39"><expr pos:start="69:22" pos:end="69:39"><name pos:start="69:22" pos:end="69:39"><name pos:start="69:22" pos:end="69:22">s</name><operator pos:start="69:23" pos:end="69:24">-&gt;</operator><name pos:start="69:25" pos:end="69:34">parent_irq</name><index pos:start="69:35" pos:end="69:39">[<expr pos:start="69:36" pos:end="69:38"><name pos:start="69:36" pos:end="69:38">cpu</name></expr>]</index></name></expr></argument>, <argument pos:start="69:42" pos:end="69:46"><expr pos:start="69:42" pos:end="69:46"><name pos:start="69:42" pos:end="69:46">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
