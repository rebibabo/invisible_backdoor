<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8101.c" pos:tabs="8"><function pos:start="1:1" pos:end="158:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">gen_rot_rm_im</name><parameter_list pos:start="1:26" pos:end="3:39">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:38">DisasContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:49"><decl pos:start="1:44" pos:end="1:49"><type pos:start="1:44" pos:end="1:49"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:49">ot</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:58"><decl pos:start="1:52" pos:end="1:58"><type pos:start="1:52" pos:end="1:58"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:58">op1</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:67"><decl pos:start="1:61" pos:end="1:67"><type pos:start="1:61" pos:end="1:67"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:67">op2</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:38"><decl pos:start="3:27" pos:end="3:38"><type pos:start="3:27" pos:end="3:38"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:38">is_right</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="158:1">{<block_content pos:start="7:5" pos:end="156:5">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">mask</name> <init pos:start="7:14" pos:end="7:44">= <expr pos:start="7:16" pos:end="7:44"><operator pos:start="7:16" pos:end="7:16">(</operator><ternary pos:start="7:17" pos:end="7:43"><condition pos:start="7:17" pos:end="7:31"><expr pos:start="7:17" pos:end="7:29"><name pos:start="7:17" pos:end="7:18">ot</name> <operator pos:start="7:20" pos:end="7:21">==</operator> <name pos:start="7:23" pos:end="7:29">OT_QUAD</name></expr> ?</condition><then pos:start="7:33" pos:end="7:36"> <expr pos:start="7:33" pos:end="7:36"><literal type="number" pos:start="7:33" pos:end="7:36">0x3f</literal></expr> </then><else pos:start="7:38" pos:end="7:43">: <expr pos:start="7:40" pos:end="7:43"><literal type="number" pos:start="7:40" pos:end="7:43">0x1f</literal></expr></else></ternary><operator pos:start="7:44" pos:end="7:44">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">shift</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:14">/* load */</comment>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:11">op1</name> <operator pos:start="15:13" pos:end="15:14">==</operator> <name pos:start="15:16" pos:end="15:22">OR_TMP0</name></expr>)</condition> <block pos:start="15:25" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:43">

        <expr_stmt pos:start="17:9" pos:end="17:43"><expr pos:start="17:9" pos:end="17:42"><call pos:start="17:9" pos:end="17:42"><name pos:start="17:9" pos:end="17:23">gen_op_ld_T0_A0</name><argument_list pos:start="17:24" pos:end="17:42">(<argument pos:start="17:25" pos:end="17:41"><expr pos:start="17:25" pos:end="17:41"><name pos:start="17:25" pos:end="17:26">ot</name> <operator pos:start="17:28" pos:end="17:28">+</operator> <name pos:start="17:30" pos:end="17:41"><name pos:start="17:30" pos:end="17:30">s</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:41">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="23:5">else <block pos:start="19:12" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:38">

        <expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><call pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:25">gen_op_mov_TN_reg</name><argument_list pos:start="21:26" pos:end="21:37">(<argument pos:start="21:27" pos:end="21:28"><expr pos:start="21:27" pos:end="21:28"><name pos:start="21:27" pos:end="21:28">ot</name></expr></argument>, <argument pos:start="21:31" pos:end="21:31"><expr pos:start="21:31" pos:end="21:31"><literal type="number" pos:start="21:31" pos:end="21:31">0</literal></expr></argument>, <argument pos:start="21:34" pos:end="21:36"><expr pos:start="21:34" pos:end="21:36"><name pos:start="21:34" pos:end="21:36">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:7">op2</name> <operator pos:start="27:9" pos:end="27:10">&amp;=</operator> <name pos:start="27:12" pos:end="27:15">mask</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="101:5"><if pos:start="29:5" pos:end="101:5">if <condition pos:start="29:8" pos:end="29:17">(<expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:11">op2</name> <operator pos:start="29:13" pos:end="29:14">!=</operator> <literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>)</condition> <block pos:start="29:19" pos:end="101:5">{<block_content pos:start="31:9" pos:end="99:9">

        <switch pos:start="31:9" pos:end="99:9">switch <condition pos:start="31:16" pos:end="31:19">(<expr pos:start="31:17" pos:end="31:18"><name pos:start="31:17" pos:end="31:18">ot</name></expr>)</condition> <block pos:start="31:21" pos:end="99:9">{<block_content pos:start="35:9" pos:end="97:18">

<cpp:ifdef pos:start="33:1" pos:end="33:20">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:20">TARGET_X86_64</name></cpp:ifdef>

        <case pos:start="35:9" pos:end="35:21">case <expr pos:start="35:14" pos:end="35:20"><name pos:start="35:14" pos:end="35:20">OT_LONG</name></expr>:</case>

            <expr_stmt pos:start="37:13" pos:end="37:57"><expr pos:start="37:13" pos:end="37:56"><call pos:start="37:13" pos:end="37:56"><name pos:start="37:13" pos:end="37:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="37:33" pos:end="37:56">(<argument pos:start="37:34" pos:end="37:45"><expr pos:start="37:34" pos:end="37:45"><name pos:start="37:34" pos:end="37:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="37:48" pos:end="37:55"><expr pos:start="37:48" pos:end="37:55"><name pos:start="37:48" pos:end="37:55"><name pos:start="37:48" pos:end="37:52">cpu_T</name><index pos:start="37:53" pos:end="37:55">[<expr pos:start="37:54" pos:end="37:54"><literal type="number" pos:start="37:54" pos:end="37:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="47:13"><if pos:start="39:13" pos:end="43:13">if <condition pos:start="39:16" pos:end="39:25">(<expr pos:start="39:17" pos:end="39:24"><name pos:start="39:17" pos:end="39:24">is_right</name></expr>)</condition> <block pos:start="39:27" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:67">

                <expr_stmt pos:start="41:17" pos:end="41:67"><expr pos:start="41:17" pos:end="41:66"><call pos:start="41:17" pos:end="41:66"><name pos:start="41:17" pos:end="41:33">tcg_gen_rotri_i32</name><argument_list pos:start="41:34" pos:end="41:66">(<argument pos:start="41:35" pos:end="41:46"><expr pos:start="41:35" pos:end="41:46"><name pos:start="41:35" pos:end="41:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="41:49" pos:end="41:60"><expr pos:start="41:49" pos:end="41:60"><name pos:start="41:49" pos:end="41:60">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="41:63" pos:end="41:65"><expr pos:start="41:63" pos:end="41:65"><name pos:start="41:63" pos:end="41:65">op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="43:15" pos:end="47:13">else <block pos:start="43:20" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:67">

                <expr_stmt pos:start="45:17" pos:end="45:67"><expr pos:start="45:17" pos:end="45:66"><call pos:start="45:17" pos:end="45:66"><name pos:start="45:17" pos:end="45:33">tcg_gen_rotli_i32</name><argument_list pos:start="45:34" pos:end="45:66">(<argument pos:start="45:35" pos:end="45:46"><expr pos:start="45:35" pos:end="45:46"><name pos:start="45:35" pos:end="45:46">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="45:49" pos:end="45:60"><expr pos:start="45:49" pos:end="45:60"><name pos:start="45:49" pos:end="45:60">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="45:63" pos:end="45:65"><expr pos:start="45:63" pos:end="45:65"><name pos:start="45:63" pos:end="45:65">op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:56"><expr pos:start="49:13" pos:end="49:55"><call pos:start="49:13" pos:end="49:55"><name pos:start="49:13" pos:end="49:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="49:32" pos:end="49:55">(<argument pos:start="49:33" pos:end="49:40"><expr pos:start="49:33" pos:end="49:40"><name pos:start="49:33" pos:end="49:40"><name pos:start="49:33" pos:end="49:37">cpu_T</name><index pos:start="49:38" pos:end="49:40">[<expr pos:start="49:39" pos:end="49:39"><literal type="number" pos:start="49:39" pos:end="49:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:43" pos:end="49:54"><expr pos:start="49:43" pos:end="49:54"><name pos:start="49:43" pos:end="49:54">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="51:13" pos:end="54:0">break;</break>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

        <default pos:start="55:9" pos:end="55:16">default:</default>

            <if_stmt pos:start="57:13" pos:end="65:13"><if pos:start="57:13" pos:end="61:13">if <condition pos:start="57:16" pos:end="57:25">(<expr pos:start="57:17" pos:end="57:24"><name pos:start="57:17" pos:end="57:24">is_right</name></expr>)</condition> <block pos:start="57:27" pos:end="61:13">{<block_content pos:start="59:17" pos:end="59:58">

                <expr_stmt pos:start="59:17" pos:end="59:58"><expr pos:start="59:17" pos:end="59:57"><call pos:start="59:17" pos:end="59:57"><name pos:start="59:17" pos:end="59:32">tcg_gen_rotri_tl</name><argument_list pos:start="59:33" pos:end="59:57">(<argument pos:start="59:34" pos:end="59:41"><expr pos:start="59:34" pos:end="59:41"><name pos:start="59:34" pos:end="59:41"><name pos:start="59:34" pos:end="59:38">cpu_T</name><index pos:start="59:39" pos:end="59:41">[<expr pos:start="59:40" pos:end="59:40"><literal type="number" pos:start="59:40" pos:end="59:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:44" pos:end="59:51"><expr pos:start="59:44" pos:end="59:51"><name pos:start="59:44" pos:end="59:51"><name pos:start="59:44" pos:end="59:48">cpu_T</name><index pos:start="59:49" pos:end="59:51">[<expr pos:start="59:50" pos:end="59:50"><literal type="number" pos:start="59:50" pos:end="59:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:54" pos:end="59:56"><expr pos:start="59:54" pos:end="59:56"><name pos:start="59:54" pos:end="59:56">op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="61:15" pos:end="65:13">else <block pos:start="61:20" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:58">

                <expr_stmt pos:start="63:17" pos:end="63:58"><expr pos:start="63:17" pos:end="63:57"><call pos:start="63:17" pos:end="63:57"><name pos:start="63:17" pos:end="63:32">tcg_gen_rotli_tl</name><argument_list pos:start="63:33" pos:end="63:57">(<argument pos:start="63:34" pos:end="63:41"><expr pos:start="63:34" pos:end="63:41"><name pos:start="63:34" pos:end="63:41"><name pos:start="63:34" pos:end="63:38">cpu_T</name><index pos:start="63:39" pos:end="63:41">[<expr pos:start="63:40" pos:end="63:40"><literal type="number" pos:start="63:40" pos:end="63:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="63:44" pos:end="63:51"><expr pos:start="63:44" pos:end="63:51"><name pos:start="63:44" pos:end="63:51"><name pos:start="63:44" pos:end="63:48">cpu_T</name><index pos:start="63:49" pos:end="63:51">[<expr pos:start="63:50" pos:end="63:50"><literal type="number" pos:start="63:50" pos:end="63:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="63:54" pos:end="63:56"><expr pos:start="63:54" pos:end="63:56"><name pos:start="63:54" pos:end="63:56">op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:21">case <expr pos:start="69:14" pos:end="69:20"><name pos:start="69:14" pos:end="69:20">OT_BYTE</name></expr>:</case>

            <expr_stmt pos:start="71:13" pos:end="71:21"><expr pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:16">mask</name> <operator pos:start="71:18" pos:end="71:18">=</operator> <literal type="number" pos:start="71:20" pos:end="71:20">7</literal></expr>;</expr_stmt>

            <goto pos:start="73:13" pos:end="73:27">goto <name pos:start="73:18" pos:end="73:26">do_shifts</name>;</goto>

        <case pos:start="75:9" pos:end="75:21">case <expr pos:start="75:14" pos:end="75:20"><name pos:start="75:14" pos:end="75:20">OT_WORD</name></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:22"><expr pos:start="77:13" pos:end="77:21"><name pos:start="77:13" pos:end="77:16">mask</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <literal type="number" pos:start="77:20" pos:end="77:21">15</literal></expr>;</expr_stmt>

        <label pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:17">do_shifts</name>:</label>

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:17">shift</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:23">op2</name> <operator pos:start="81:25" pos:end="81:25">&amp;</operator> <name pos:start="81:27" pos:end="81:30">mask</name></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="87:13"><if pos:start="83:13" pos:end="87:13">if <condition pos:start="83:16" pos:end="83:25">(<expr pos:start="83:17" pos:end="83:24"><name pos:start="83:17" pos:end="83:24">is_right</name></expr>)</condition> <block pos:start="83:27" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:41">

                <expr_stmt pos:start="85:17" pos:end="85:41"><expr pos:start="85:17" pos:end="85:40"><name pos:start="85:17" pos:end="85:21">shift</name> <operator pos:start="85:23" pos:end="85:23">=</operator> <name pos:start="85:25" pos:end="85:28">mask</name> <operator pos:start="85:30" pos:end="85:30">+</operator> <literal type="number" pos:start="85:32" pos:end="85:34">1</literal> <operator pos:start="85:34" pos:end="85:34">-</operator> <name pos:start="85:36" pos:end="85:40">shift</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><call pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:20">gen_extu</name><argument_list pos:start="89:21" pos:end="89:34">(<argument pos:start="89:22" pos:end="89:23"><expr pos:start="89:22" pos:end="89:23"><name pos:start="89:22" pos:end="89:23">ot</name></expr></argument>, <argument pos:start="89:26" pos:end="89:33"><expr pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:30">cpu_T</name><index pos:start="89:31" pos:end="89:33">[<expr pos:start="89:32" pos:end="89:32"><literal type="number" pos:start="89:32" pos:end="89:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:55"><expr pos:start="91:13" pos:end="91:54"><call pos:start="91:13" pos:end="91:54"><name pos:start="91:13" pos:end="91:27">tcg_gen_shli_tl</name><argument_list pos:start="91:28" pos:end="91:54">(<argument pos:start="91:29" pos:end="91:36"><expr pos:start="91:29" pos:end="91:36"><name pos:start="91:29" pos:end="91:36">cpu_tmp0</name></expr></argument>, <argument pos:start="91:39" pos:end="91:46"><expr pos:start="91:39" pos:end="91:46"><name pos:start="91:39" pos:end="91:46"><name pos:start="91:39" pos:end="91:43">cpu_T</name><index pos:start="91:44" pos:end="91:46">[<expr pos:start="91:45" pos:end="91:45"><literal type="number" pos:start="91:45" pos:end="91:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="91:49" pos:end="91:53"><expr pos:start="91:49" pos:end="91:53"><name pos:start="91:49" pos:end="91:53">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:66"><expr pos:start="93:13" pos:end="93:65"><call pos:start="93:13" pos:end="93:65"><name pos:start="93:13" pos:end="93:27">tcg_gen_shri_tl</name><argument_list pos:start="93:28" pos:end="93:65">(<argument pos:start="93:29" pos:end="93:36"><expr pos:start="93:29" pos:end="93:36"><name pos:start="93:29" pos:end="93:36"><name pos:start="93:29" pos:end="93:33">cpu_T</name><index pos:start="93:34" pos:end="93:36">[<expr pos:start="93:35" pos:end="93:35"><literal type="number" pos:start="93:35" pos:end="93:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:39" pos:end="93:46"><expr pos:start="93:39" pos:end="93:46"><name pos:start="93:39" pos:end="93:46"><name pos:start="93:39" pos:end="93:43">cpu_T</name><index pos:start="93:44" pos:end="93:46">[<expr pos:start="93:45" pos:end="93:45"><literal type="number" pos:start="93:45" pos:end="93:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:49" pos:end="93:64"><expr pos:start="93:49" pos:end="93:64"><name pos:start="93:49" pos:end="93:52">mask</name> <operator pos:start="93:54" pos:end="93:54">+</operator> <literal type="number" pos:start="93:56" pos:end="93:58">1</literal> <operator pos:start="93:58" pos:end="93:58">-</operator> <name pos:start="93:60" pos:end="93:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:56"><expr pos:start="95:13" pos:end="95:55"><call pos:start="95:13" pos:end="95:55"><name pos:start="95:13" pos:end="95:25">tcg_gen_or_tl</name><argument_list pos:start="95:26" pos:end="95:55">(<argument pos:start="95:27" pos:end="95:34"><expr pos:start="95:27" pos:end="95:34"><name pos:start="95:27" pos:end="95:34"><name pos:start="95:27" pos:end="95:31">cpu_T</name><index pos:start="95:32" pos:end="95:34">[<expr pos:start="95:33" pos:end="95:33"><literal type="number" pos:start="95:33" pos:end="95:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="95:37" pos:end="95:44"><expr pos:start="95:37" pos:end="95:44"><name pos:start="95:37" pos:end="95:44"><name pos:start="95:37" pos:end="95:41">cpu_T</name><index pos:start="95:42" pos:end="95:44">[<expr pos:start="95:43" pos:end="95:43"><literal type="number" pos:start="95:43" pos:end="95:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="95:47" pos:end="95:54"><expr pos:start="95:47" pos:end="95:54"><name pos:start="95:47" pos:end="95:54">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:15">/* store */</comment>

    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:23">(<expr pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:11">op1</name> <operator pos:start="107:13" pos:end="107:14">==</operator> <name pos:start="107:16" pos:end="107:22">OR_TMP0</name></expr>)</condition> <block pos:start="107:25" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:43">

        <expr_stmt pos:start="109:9" pos:end="109:43"><expr pos:start="109:9" pos:end="109:42"><call pos:start="109:9" pos:end="109:42"><name pos:start="109:9" pos:end="109:23">gen_op_st_T0_A0</name><argument_list pos:start="109:24" pos:end="109:42">(<argument pos:start="109:25" pos:end="109:41"><expr pos:start="109:25" pos:end="109:41"><name pos:start="109:25" pos:end="109:26">ot</name> <operator pos:start="109:28" pos:end="109:28">+</operator> <name pos:start="109:30" pos:end="109:41"><name pos:start="109:30" pos:end="109:30">s</name><operator pos:start="109:31" pos:end="109:32">-&gt;</operator><name pos:start="109:33" pos:end="109:41">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="115:5">else <block pos:start="111:12" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:35">

        <expr_stmt pos:start="113:9" pos:end="113:35"><expr pos:start="113:9" pos:end="113:34"><call pos:start="113:9" pos:end="113:34"><name pos:start="113:9" pos:end="113:25">gen_op_mov_reg_T0</name><argument_list pos:start="113:26" pos:end="113:34">(<argument pos:start="113:27" pos:end="113:28"><expr pos:start="113:27" pos:end="113:28"><name pos:start="113:27" pos:end="113:28">ot</name></expr></argument>, <argument pos:start="113:31" pos:end="113:33"><expr pos:start="113:31" pos:end="113:33"><name pos:start="113:31" pos:end="113:33">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="119:5" pos:end="156:5"><if pos:start="119:5" pos:end="156:5">if <condition pos:start="119:8" pos:end="119:17">(<expr pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:11">op2</name> <operator pos:start="119:13" pos:end="119:14">!=</operator> <literal type="number" pos:start="119:16" pos:end="119:16">0</literal></expr>)</condition> <block pos:start="119:19" pos:end="156:5">{<block_content pos:start="123:9" pos:end="154:34">

        <comment type="block" pos:start="121:9" pos:end="121:45">/* Compute the flags into CC_SRC.  */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:30"><expr pos:start="123:9" pos:end="123:29"><call pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:26">gen_compute_eflags</name><argument_list pos:start="123:27" pos:end="123:29">(<argument pos:start="123:28" pos:end="123:28"><expr pos:start="123:28" pos:end="123:28"><name pos:start="123:28" pos:end="123:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="127:9" pos:end="133:30">/* The value that was "rotated out" is now present at the other end

           of the word.  Compute C into CC_DST and O into CC_SRC2.  Note that

           since we've computed the flags into CC_SRC, these variables are

           currently dead.  */</comment>

        <if_stmt pos:start="135:9" pos:end="148:9"><if pos:start="135:9" pos:end="142:9">if <condition pos:start="135:12" pos:end="135:21">(<expr pos:start="135:13" pos:end="135:20"><name pos:start="135:13" pos:end="135:20">is_right</name></expr>)</condition> <block pos:start="135:23" pos:end="142:9">{<block_content pos:start="137:13" pos:end="139:56">

            <expr_stmt pos:start="137:13" pos:end="137:61"><expr pos:start="137:13" pos:end="137:60"><call pos:start="137:13" pos:end="137:60"><name pos:start="137:13" pos:end="137:27">tcg_gen_shri_tl</name><argument_list pos:start="137:28" pos:end="137:60">(<argument pos:start="137:29" pos:end="137:39"><expr pos:start="137:29" pos:end="137:39"><name pos:start="137:29" pos:end="137:39">cpu_cc_src2</name></expr></argument>, <argument pos:start="137:42" pos:end="137:49"><expr pos:start="137:42" pos:end="137:49"><name pos:start="137:42" pos:end="137:49"><name pos:start="137:42" pos:end="137:46">cpu_T</name><index pos:start="137:47" pos:end="137:49">[<expr pos:start="137:48" pos:end="137:48"><literal type="number" pos:start="137:48" pos:end="137:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="137:52" pos:end="137:59"><expr pos:start="137:52" pos:end="137:59"><name pos:start="137:52" pos:end="137:55">mask</name> <operator pos:start="137:57" pos:end="137:57">-</operator> <literal type="number" pos:start="137:59" pos:end="137:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:56"><expr pos:start="139:13" pos:end="139:55"><call pos:start="139:13" pos:end="139:55"><name pos:start="139:13" pos:end="139:27">tcg_gen_shri_tl</name><argument_list pos:start="139:28" pos:end="139:55">(<argument pos:start="139:29" pos:end="139:38"><expr pos:start="139:29" pos:end="139:38"><name pos:start="139:29" pos:end="139:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="139:41" pos:end="139:48"><expr pos:start="139:41" pos:end="139:48"><name pos:start="139:41" pos:end="139:48"><name pos:start="139:41" pos:end="139:45">cpu_T</name><index pos:start="139:46" pos:end="139:48">[<expr pos:start="139:47" pos:end="139:47"><literal type="number" pos:start="139:47" pos:end="139:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="139:51" pos:end="139:54"><expr pos:start="139:51" pos:end="139:54"><name pos:start="139:51" pos:end="139:54">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if> <else pos:start="142:11" pos:end="148:9">else <block pos:start="142:16" pos:end="148:9">{<block_content pos:start="144:13" pos:end="146:53">

            <expr_stmt pos:start="144:13" pos:end="144:57"><expr pos:start="144:13" pos:end="144:56"><call pos:start="144:13" pos:end="144:56"><name pos:start="144:13" pos:end="144:27">tcg_gen_shri_tl</name><argument_list pos:start="144:28" pos:end="144:56">(<argument pos:start="144:29" pos:end="144:39"><expr pos:start="144:29" pos:end="144:39"><name pos:start="144:29" pos:end="144:39">cpu_cc_src2</name></expr></argument>, <argument pos:start="144:42" pos:end="144:49"><expr pos:start="144:42" pos:end="144:49"><name pos:start="144:42" pos:end="144:49"><name pos:start="144:42" pos:end="144:46">cpu_T</name><index pos:start="144:47" pos:end="144:49">[<expr pos:start="144:48" pos:end="144:48"><literal type="number" pos:start="144:48" pos:end="144:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="144:52" pos:end="144:55"><expr pos:start="144:52" pos:end="144:55"><name pos:start="144:52" pos:end="144:55">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="146:13" pos:end="146:53"><expr pos:start="146:13" pos:end="146:52"><call pos:start="146:13" pos:end="146:52"><name pos:start="146:13" pos:end="146:27">tcg_gen_andi_tl</name><argument_list pos:start="146:28" pos:end="146:52">(<argument pos:start="146:29" pos:end="146:38"><expr pos:start="146:29" pos:end="146:38"><name pos:start="146:29" pos:end="146:38">cpu_cc_dst</name></expr></argument>, <argument pos:start="146:41" pos:end="146:48"><expr pos:start="146:41" pos:end="146:48"><name pos:start="146:41" pos:end="146:48"><name pos:start="146:41" pos:end="146:45">cpu_T</name><index pos:start="146:46" pos:end="146:48">[<expr pos:start="146:47" pos:end="146:47"><literal type="number" pos:start="146:47" pos:end="146:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="146:51" pos:end="146:51"><expr pos:start="146:51" pos:end="146:51"><literal type="number" pos:start="146:51" pos:end="146:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="150:9" pos:end="150:53"><expr pos:start="150:9" pos:end="150:52"><call pos:start="150:9" pos:end="150:52"><name pos:start="150:9" pos:end="150:23">tcg_gen_andi_tl</name><argument_list pos:start="150:24" pos:end="150:52">(<argument pos:start="150:25" pos:end="150:35"><expr pos:start="150:25" pos:end="150:35"><name pos:start="150:25" pos:end="150:35">cpu_cc_src2</name></expr></argument>, <argument pos:start="150:38" pos:end="150:48"><expr pos:start="150:38" pos:end="150:48"><name pos:start="150:38" pos:end="150:48">cpu_cc_src2</name></expr></argument>, <argument pos:start="150:51" pos:end="150:51"><expr pos:start="150:51" pos:end="150:51"><literal type="number" pos:start="150:51" pos:end="150:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="152:9" pos:end="152:61"><expr pos:start="152:9" pos:end="152:60"><call pos:start="152:9" pos:end="152:60"><name pos:start="152:9" pos:end="152:22">tcg_gen_xor_tl</name><argument_list pos:start="152:23" pos:end="152:60">(<argument pos:start="152:24" pos:end="152:34"><expr pos:start="152:24" pos:end="152:34"><name pos:start="152:24" pos:end="152:34">cpu_cc_src2</name></expr></argument>, <argument pos:start="152:37" pos:end="152:47"><expr pos:start="152:37" pos:end="152:47"><name pos:start="152:37" pos:end="152:47">cpu_cc_src2</name></expr></argument>, <argument pos:start="152:50" pos:end="152:59"><expr pos:start="152:50" pos:end="152:59"><name pos:start="152:50" pos:end="152:59">cpu_cc_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="154:9" pos:end="154:34"><expr pos:start="154:9" pos:end="154:33"><call pos:start="154:9" pos:end="154:33"><name pos:start="154:9" pos:end="154:17">set_cc_op</name><argument_list pos:start="154:18" pos:end="154:33">(<argument pos:start="154:19" pos:end="154:19"><expr pos:start="154:19" pos:end="154:19"><name pos:start="154:19" pos:end="154:19">s</name></expr></argument>, <argument pos:start="154:22" pos:end="154:32"><expr pos:start="154:22" pos:end="154:32"><name pos:start="154:22" pos:end="154:32">CC_OP_ADCOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
