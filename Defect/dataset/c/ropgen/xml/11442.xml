<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11442.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:33">decode_subframe</name><parameter_list pos:start="1:34" pos:end="1:62">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:45">FLACContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:61">channel</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">type</name></decl>, <decl pos:start="5:15" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:20">wasted</name> <init pos:start="5:22" pos:end="5:24">= <expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">tmp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:25"><expr pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:15">curr_bps</name></name> <operator pos:start="11:17" pos:end="11:17">=</operator> <name pos:start="11:19" pos:end="11:24"><name pos:start="11:19" pos:end="11:19">s</name><operator pos:start="11:20" pos:end="11:21">-&gt;</operator><name pos:start="11:22" pos:end="11:24">bps</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="25:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:21">(<expr pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:15">channel</name> <operator pos:start="13:17" pos:end="13:18">==</operator> <literal type="number" pos:start="13:20" pos:end="13:20">0</literal></expr>)</condition> <block pos:start="13:23" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:26">

        <if_stmt pos:start="15:9" pos:end="17:26"><if pos:start="15:9" pos:end="17:26">if <condition pos:start="15:12" pos:end="15:43">(<expr pos:start="15:13" pos:end="15:42"><name pos:start="15:13" pos:end="15:28"><name pos:start="15:13" pos:end="15:13">s</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:28">decorrelation</name></name> <operator pos:start="15:30" pos:end="15:31">==</operator> <name pos:start="15:33" pos:end="15:42">RIGHT_SIDE</name></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:26"><block_content pos:start="17:13" pos:end="17:26">

            <expr_stmt pos:start="17:13" pos:end="17:26"><expr pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:23"><name pos:start="17:13" pos:end="17:13">s</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:23">curr_bps</name></name><operator pos:start="17:24" pos:end="17:25">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="25:5">else <block pos:start="19:12" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:26">

        <if_stmt pos:start="21:9" pos:end="23:26"><if pos:start="21:9" pos:end="23:26">if <condition pos:start="21:12" pos:end="21:74">(<expr pos:start="21:13" pos:end="21:73"><name pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:28">decorrelation</name></name> <operator pos:start="21:30" pos:end="21:31">==</operator> <name pos:start="21:33" pos:end="21:41">LEFT_SIDE</name> <operator pos:start="21:43" pos:end="21:44">||</operator> <name pos:start="21:46" pos:end="21:61"><name pos:start="21:46" pos:end="21:46">s</name><operator pos:start="21:47" pos:end="21:48">-&gt;</operator><name pos:start="21:49" pos:end="21:61">decorrelation</name></name> <operator pos:start="21:63" pos:end="21:64">==</operator> <name pos:start="21:66" pos:end="21:73">MID_SIDE</name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:26"><block_content pos:start="23:13" pos:end="23:26">

            <expr_stmt pos:start="23:13" pos:end="23:26"><expr pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:23"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:23">curr_bps</name></name><operator pos:start="23:24" pos:end="23:25">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:25">(<expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:19">curr_bps</name></name> <operator pos:start="27:21" pos:end="27:21">&gt;</operator> <literal type="number" pos:start="27:23" pos:end="27:24">32</literal></expr>)</condition> <block pos:start="27:27" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:75"><expr pos:start="29:9" pos:end="29:74"><call pos:start="29:9" pos:end="29:74"><name pos:start="29:9" pos:end="29:30">ff_log_missing_feature</name><argument_list pos:start="29:31" pos:end="29:74">(<argument pos:start="29:32" pos:end="29:39"><expr pos:start="29:32" pos:end="29:39"><name pos:start="29:32" pos:end="29:39"><name pos:start="29:32" pos:end="29:32">s</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:39">avctx</name></name></expr></argument>, <argument pos:start="29:42" pos:end="29:70"><expr pos:start="29:42" pos:end="29:70"><literal type="string" pos:start="29:42" pos:end="29:70">"decorrelated bit depth &gt; 32"</literal></expr></argument>, <argument pos:start="29:73" pos:end="29:73"><expr pos:start="29:73" pos:end="29:73"><literal type="number" pos:start="29:73" pos:end="29:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:26">(<expr pos:start="37:9" pos:end="37:25"><call pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:17">get_bits1</name><argument_list pos:start="37:18" pos:end="37:25">(<argument pos:start="37:19" pos:end="37:24"><expr pos:start="37:19" pos:end="37:24"><operator pos:start="37:19" pos:end="37:19">&amp;</operator><name pos:start="37:20" pos:end="37:24"><name pos:start="37:20" pos:end="37:20">s</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:28" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:69"><expr pos:start="39:9" pos:end="39:68"><call pos:start="39:9" pos:end="39:68"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:68">(<argument pos:start="39:16" pos:end="39:23"><expr pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:16">s</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:23">avctx</name></name></expr></argument>, <argument pos:start="39:26" pos:end="39:37"><expr pos:start="39:26" pos:end="39:37"><name pos:start="39:26" pos:end="39:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:40" pos:end="39:67"><expr pos:start="39:40" pos:end="39:67"><literal type="string" pos:start="39:40" pos:end="39:67">"invalid subframe padding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:8">type</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:30"><name pos:start="45:12" pos:end="45:19">get_bits</name><argument_list pos:start="45:20" pos:end="45:30">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><operator pos:start="45:21" pos:end="45:21">&amp;</operator><name pos:start="45:22" pos:end="45:26"><name pos:start="45:22" pos:end="45:22">s</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:26">gb</name></name></expr></argument>, <argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><literal type="number" pos:start="45:29" pos:end="45:29">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="59:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:26">(<expr pos:start="49:9" pos:end="49:25"><call pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:17">get_bits1</name><argument_list pos:start="49:18" pos:end="49:25">(<argument pos:start="49:19" pos:end="49:24"><expr pos:start="49:19" pos:end="49:24"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:28" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:30">

        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:14">wasted</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">1</literal></expr>;</expr_stmt>

        <while pos:start="53:9" pos:end="55:21">while <condition pos:start="53:15" pos:end="53:34">(<expr pos:start="53:16" pos:end="53:33"><operator pos:start="53:16" pos:end="53:16">!</operator><call pos:start="53:17" pos:end="53:33"><name pos:start="53:17" pos:end="53:25">get_bits1</name><argument_list pos:start="53:26" pos:end="53:33">(<argument pos:start="53:27" pos:end="53:32"><expr pos:start="53:27" pos:end="53:32"><operator pos:start="53:27" pos:end="53:27">&amp;</operator><name pos:start="53:28" pos:end="53:32"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:32">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:21"><block_content pos:start="55:13" pos:end="55:21">

            <expr_stmt pos:start="55:13" pos:end="55:21"><expr pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:18">wasted</name><operator pos:start="55:19" pos:end="55:20">++</operator></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:19">curr_bps</name></name> <operator pos:start="57:21" pos:end="57:22">-=</operator> <name pos:start="57:24" pos:end="57:29">wasted</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="63:1" pos:end="63:29">//FIXME use av_log2 for types</comment>

    <if_stmt pos:start="65:5" pos:end="97:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:18">(<expr pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:12">type</name> <operator pos:start="65:14" pos:end="65:15">==</operator> <literal type="number" pos:start="65:17" pos:end="65:17">0</literal></expr>)</condition> <block pos:start="65:20" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:41">

        <expr_stmt pos:start="67:9" pos:end="67:50"><expr pos:start="67:9" pos:end="67:49"><name pos:start="67:9" pos:end="67:11">tmp</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:49"><name pos:start="67:15" pos:end="67:28">get_sbits_long</name><argument_list pos:start="67:29" pos:end="67:49">(<argument pos:start="67:30" pos:end="67:35"><expr pos:start="67:30" pos:end="67:35"><operator pos:start="67:30" pos:end="67:30">&amp;</operator><name pos:start="67:31" pos:end="67:35"><name pos:start="67:31" pos:end="67:31">s</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:35">gb</name></name></expr></argument>, <argument pos:start="67:38" pos:end="67:48"><expr pos:start="67:38" pos:end="67:48"><name pos:start="67:38" pos:end="67:48"><name pos:start="67:38" pos:end="67:38">s</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:48">curr_bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="69:9" pos:end="71:41">for <control pos:start="69:13" pos:end="69:42">(<init pos:start="69:14" pos:end="69:19"><expr pos:start="69:14" pos:end="69:18"><name pos:start="69:14" pos:end="69:14">i</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>;</init> <condition pos:start="69:21" pos:end="69:37"><expr pos:start="69:21" pos:end="69:36"><name pos:start="69:21" pos:end="69:21">i</name> <operator pos:start="69:23" pos:end="69:23">&lt;</operator> <name pos:start="69:25" pos:end="69:36"><name pos:start="69:25" pos:end="69:25">s</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:36">blocksize</name></name></expr>;</condition> <incr pos:start="69:39" pos:end="69:41"><expr pos:start="69:39" pos:end="69:41"><name pos:start="69:39" pos:end="69:39">i</name><operator pos:start="69:40" pos:end="69:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="71:13" pos:end="71:41"><block_content pos:start="71:13" pos:end="71:41">

            <expr_stmt pos:start="71:13" pos:end="71:41"><expr pos:start="71:13" pos:end="71:40"><name pos:start="71:13" pos:end="71:34"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:22">decoded</name><index pos:start="71:23" pos:end="71:31">[<expr pos:start="71:24" pos:end="71:30"><name pos:start="71:24" pos:end="71:30">channel</name></expr>]</index><index pos:start="71:32" pos:end="71:34">[<expr pos:start="71:33" pos:end="71:33"><name pos:start="71:33" pos:end="71:33">i</name></expr>]</index></name> <operator pos:start="71:36" pos:end="71:36">=</operator> <name pos:start="71:38" pos:end="71:40">tmp</name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="79:5">else if <condition pos:start="73:15" pos:end="73:25">(<expr pos:start="73:16" pos:end="73:24"><name pos:start="73:16" pos:end="73:19">type</name> <operator pos:start="73:21" pos:end="73:22">==</operator> <literal type="number" pos:start="73:24" pos:end="73:24">1</literal></expr>)</condition> <block pos:start="73:27" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:73">

        <for pos:start="75:9" pos:end="77:73">for <control pos:start="75:13" pos:end="75:42">(<init pos:start="75:14" pos:end="75:19"><expr pos:start="75:14" pos:end="75:18"><name pos:start="75:14" pos:end="75:14">i</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>;</init> <condition pos:start="75:21" pos:end="75:37"><expr pos:start="75:21" pos:end="75:36"><name pos:start="75:21" pos:end="75:21">i</name> <operator pos:start="75:23" pos:end="75:23">&lt;</operator> <name pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:36">blocksize</name></name></expr>;</condition> <incr pos:start="75:39" pos:end="75:41"><expr pos:start="75:39" pos:end="75:41"><name pos:start="75:39" pos:end="75:39">i</name><operator pos:start="75:40" pos:end="75:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="77:13" pos:end="77:73"><block_content pos:start="77:13" pos:end="77:73">

            <expr_stmt pos:start="77:13" pos:end="77:73"><expr pos:start="77:13" pos:end="77:72"><name pos:start="77:13" pos:end="77:34"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:22">decoded</name><index pos:start="77:23" pos:end="77:31">[<expr pos:start="77:24" pos:end="77:30"><name pos:start="77:24" pos:end="77:30">channel</name></expr>]</index><index pos:start="77:32" pos:end="77:34">[<expr pos:start="77:33" pos:end="77:33"><name pos:start="77:33" pos:end="77:33">i</name></expr>]</index></name> <operator pos:start="77:36" pos:end="77:36">=</operator> <call pos:start="77:38" pos:end="77:72"><name pos:start="77:38" pos:end="77:51">get_sbits_long</name><argument_list pos:start="77:52" pos:end="77:72">(<argument pos:start="77:53" pos:end="77:58"><expr pos:start="77:53" pos:end="77:58"><operator pos:start="77:53" pos:end="77:53">&amp;</operator><name pos:start="77:54" pos:end="77:58"><name pos:start="77:54" pos:end="77:54">s</name><operator pos:start="77:55" pos:end="77:56">-&gt;</operator><name pos:start="77:57" pos:end="77:58">gb</name></name></expr></argument>, <argument pos:start="77:61" pos:end="77:71"><expr pos:start="77:61" pos:end="77:71"><name pos:start="77:61" pos:end="77:71"><name pos:start="77:61" pos:end="77:61">s</name><operator pos:start="77:62" pos:end="77:63">-&gt;</operator><name pos:start="77:64" pos:end="77:71">curr_bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="79:7" pos:end="85:5">else if <condition pos:start="79:15" pos:end="79:43">(<expr pos:start="79:16" pos:end="79:42"><operator pos:start="79:16" pos:end="79:16">(</operator><name pos:start="79:17" pos:end="79:20">type</name> <operator pos:start="79:22" pos:end="79:23">&gt;=</operator> <literal type="number" pos:start="79:25" pos:end="79:25">8</literal><operator pos:start="79:26" pos:end="79:26">)</operator> <operator pos:start="79:28" pos:end="79:29">&amp;&amp;</operator> <operator pos:start="79:31" pos:end="79:31">(</operator><name pos:start="79:32" pos:end="79:35">type</name> <operator pos:start="79:37" pos:end="79:38">&lt;=</operator> <literal type="number" pos:start="79:40" pos:end="79:41">12</literal><operator pos:start="79:42" pos:end="79:42">)</operator></expr>)</condition> <block pos:start="79:45" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:22">

        <if_stmt pos:start="81:9" pos:end="83:22"><if pos:start="81:9" pos:end="83:22">if <condition pos:start="81:12" pos:end="81:63">(<expr pos:start="81:13" pos:end="81:62"><call pos:start="81:13" pos:end="81:58"><name pos:start="81:13" pos:end="81:33">decode_subframe_fixed</name><argument_list pos:start="81:34" pos:end="81:58">(<argument pos:start="81:35" pos:end="81:35"><expr pos:start="81:35" pos:end="81:35"><name pos:start="81:35" pos:end="81:35">s</name></expr></argument>, <argument pos:start="81:38" pos:end="81:44"><expr pos:start="81:38" pos:end="81:44"><name pos:start="81:38" pos:end="81:44">channel</name></expr></argument>, <argument pos:start="81:47" pos:end="81:57"><expr pos:start="81:47" pos:end="81:57"><name pos:start="81:47" pos:end="81:50">type</name> <operator pos:start="81:52" pos:end="81:52">&amp;</operator> <operator pos:start="81:54" pos:end="81:54">~</operator><literal type="number" pos:start="81:55" pos:end="81:57">0x8</literal></expr></argument>)</argument_list></call> <operator pos:start="81:60" pos:end="81:60">&lt;</operator> <literal type="number" pos:start="81:62" pos:end="81:62">0</literal></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:22"><block_content pos:start="83:13" pos:end="83:22">

            <return pos:start="83:13" pos:end="83:22">return <expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">-</operator><literal type="number" pos:start="83:21" pos:end="83:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="85:7" pos:end="91:5">else if <condition pos:start="85:15" pos:end="85:26">(<expr pos:start="85:16" pos:end="85:25"><name pos:start="85:16" pos:end="85:19">type</name> <operator pos:start="85:21" pos:end="85:22">&gt;=</operator> <literal type="number" pos:start="85:24" pos:end="85:25">32</literal></expr>)</condition> <block pos:start="85:28" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:22">

        <if_stmt pos:start="87:9" pos:end="89:22"><if pos:start="87:9" pos:end="89:22">if <condition pos:start="87:12" pos:end="87:66">(<expr pos:start="87:13" pos:end="87:65"><call pos:start="87:13" pos:end="87:61"><name pos:start="87:13" pos:end="87:31">decode_subframe_lpc</name><argument_list pos:start="87:32" pos:end="87:61">(<argument pos:start="87:33" pos:end="87:33"><expr pos:start="87:33" pos:end="87:33"><name pos:start="87:33" pos:end="87:33">s</name></expr></argument>, <argument pos:start="87:36" pos:end="87:42"><expr pos:start="87:36" pos:end="87:42"><name pos:start="87:36" pos:end="87:42">channel</name></expr></argument>, <argument pos:start="87:45" pos:end="87:60"><expr pos:start="87:45" pos:end="87:60"><operator pos:start="87:45" pos:end="87:45">(</operator><name pos:start="87:46" pos:end="87:49">type</name> <operator pos:start="87:51" pos:end="87:51">&amp;</operator> <operator pos:start="87:53" pos:end="87:53">~</operator><literal type="number" pos:start="87:54" pos:end="87:57">0x20</literal><operator pos:start="87:58" pos:end="87:58">)</operator><operator pos:start="87:59" pos:end="87:59">+</operator><literal type="number" pos:start="87:60" pos:end="87:60">1</literal></expr></argument>)</argument_list></call> <operator pos:start="87:63" pos:end="87:63">&lt;</operator> <literal type="number" pos:start="87:65" pos:end="87:65">0</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:22"><block_content pos:start="89:13" pos:end="89:22">

            <return pos:start="89:13" pos:end="89:22">return <expr pos:start="89:20" pos:end="89:21"><operator pos:start="89:20" pos:end="89:20">-</operator><literal type="number" pos:start="89:21" pos:end="89:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="97:5">else <block pos:start="91:12" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:18">

        <expr_stmt pos:start="93:9" pos:end="93:64"><expr pos:start="93:9" pos:end="93:63"><call pos:start="93:9" pos:end="93:63"><name pos:start="93:9" pos:end="93:14">av_log</name><argument_list pos:start="93:15" pos:end="93:63">(<argument pos:start="93:16" pos:end="93:23"><expr pos:start="93:16" pos:end="93:23"><name pos:start="93:16" pos:end="93:23"><name pos:start="93:16" pos:end="93:16">s</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:23">avctx</name></name></expr></argument>, <argument pos:start="93:26" pos:end="93:37"><expr pos:start="93:26" pos:end="93:37"><name pos:start="93:26" pos:end="93:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:40" pos:end="93:62"><expr pos:start="93:40" pos:end="93:62"><literal type="string" pos:start="93:40" pos:end="93:62">"invalid coding type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:18">return <expr pos:start="95:16" pos:end="95:17"><operator pos:start="95:16" pos:end="95:16">-</operator><literal type="number" pos:start="95:17" pos:end="95:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:15">(<expr pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:14">wasted</name></expr>)</condition> <block pos:start="101:17" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:46">

        <decl_stmt pos:start="103:9" pos:end="103:14"><decl pos:start="103:9" pos:end="103:13"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:13">i</name></decl>;</decl_stmt>

        <for pos:start="105:9" pos:end="107:46">for <control pos:start="105:13" pos:end="105:42">(<init pos:start="105:14" pos:end="105:19"><expr pos:start="105:14" pos:end="105:18"><name pos:start="105:14" pos:end="105:14">i</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <literal type="number" pos:start="105:18" pos:end="105:18">0</literal></expr>;</init> <condition pos:start="105:21" pos:end="105:37"><expr pos:start="105:21" pos:end="105:36"><name pos:start="105:21" pos:end="105:21">i</name> <operator pos:start="105:23" pos:end="105:23">&lt;</operator> <name pos:start="105:25" pos:end="105:36"><name pos:start="105:25" pos:end="105:25">s</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:36">blocksize</name></name></expr>;</condition> <incr pos:start="105:39" pos:end="105:41"><expr pos:start="105:39" pos:end="105:41"><name pos:start="105:39" pos:end="105:39">i</name><operator pos:start="105:40" pos:end="105:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="107:13" pos:end="107:46"><block_content pos:start="107:13" pos:end="107:46">

            <expr_stmt pos:start="107:13" pos:end="107:46"><expr pos:start="107:13" pos:end="107:45"><name pos:start="107:13" pos:end="107:34"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:22">decoded</name><index pos:start="107:23" pos:end="107:31">[<expr pos:start="107:24" pos:end="107:30"><name pos:start="107:24" pos:end="107:30">channel</name></expr>]</index><index pos:start="107:32" pos:end="107:34">[<expr pos:start="107:33" pos:end="107:33"><name pos:start="107:33" pos:end="107:33">i</name></expr>]</index></name> <operator pos:start="107:36" pos:end="107:38">&lt;&lt;=</operator> <name pos:start="107:40" pos:end="107:45">wasted</name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
