<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11548.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">process_incoming_migration_co</name><parameter_list pos:start="1:42" pos:end="1:55">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:48"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:30">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">QEMUFile</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">f</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:67"><decl pos:start="7:5" pos:end="7:66"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26">MigrationIncomingState</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:31">mis</name> <init pos:start="7:33" pos:end="7:66">= <expr pos:start="7:35" pos:end="7:66"><call pos:start="7:35" pos:end="7:66"><name pos:start="7:35" pos:end="7:64">migration_incoming_get_current</name><argument_list pos:start="7:65" pos:end="7:66">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">PostcopyState</name></type> <name pos:start="9:19" pos:end="9:20">ps</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:7">mis</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:22">from_src_file</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <name pos:start="15:26" pos:end="15:26">f</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:57"><expr pos:start="17:5" pos:end="17:56"><name pos:start="17:5" pos:end="17:26"><name pos:start="17:5" pos:end="17:7">mis</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:26">largest_page_size</name></name> <operator pos:start="17:28" pos:end="17:28">=</operator> <call pos:start="17:30" pos:end="17:56"><name pos:start="17:30" pos:end="17:54">qemu_ram_pagesize_largest</name><argument_list pos:start="17:55" pos:end="17:56">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:47"><expr pos:start="19:5" pos:end="19:46"><call pos:start="19:5" pos:end="19:46"><name pos:start="19:5" pos:end="19:22">postcopy_state_set</name><argument_list pos:start="19:23" pos:end="19:46">(<argument pos:start="19:24" pos:end="19:45"><expr pos:start="19:24" pos:end="19:45"><name pos:start="19:24" pos:end="19:45">POSTCOPY_INCOMING_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="23:47"><expr pos:start="21:5" pos:end="23:46"><call pos:start="21:5" pos:end="23:46"><name pos:start="21:5" pos:end="21:21">migrate_set_state</name><argument_list pos:start="21:22" pos:end="23:46">(<argument pos:start="21:23" pos:end="21:33"><expr pos:start="21:23" pos:end="21:33"><operator pos:start="21:23" pos:end="21:23">&amp;</operator><name pos:start="21:24" pos:end="21:33"><name pos:start="21:24" pos:end="21:26">mis</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:33">state</name></name></expr></argument>, <argument pos:start="21:36" pos:end="21:56"><expr pos:start="21:36" pos:end="21:56"><name pos:start="21:36" pos:end="21:56">MIGRATION_STATUS_NONE</name></expr></argument>,

                      <argument pos:start="23:23" pos:end="23:45"><expr pos:start="23:23" pos:end="23:45"><name pos:start="23:23" pos:end="23:45">MIGRATION_STATUS_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:30"><name pos:start="25:11" pos:end="25:27">qemu_loadvm_state</name><argument_list pos:start="25:28" pos:end="25:30">(<argument pos:start="25:29" pos:end="25:29"><expr pos:start="25:29" pos:end="25:29"><name pos:start="25:29" pos:end="25:29">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:6">ps</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:29"><name pos:start="29:10" pos:end="29:27">postcopy_state_get</name><argument_list pos:start="29:28" pos:end="29:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:53"><expr pos:start="31:5" pos:end="31:52"><call pos:start="31:5" pos:end="31:52"><name pos:start="31:5" pos:end="31:43">trace_process_incoming_migration_co_end</name><argument_list pos:start="31:44" pos:end="31:52">(<argument pos:start="31:45" pos:end="31:47"><expr pos:start="31:45" pos:end="31:47"><name pos:start="31:45" pos:end="31:47">ret</name></expr></argument>, <argument pos:start="31:50" pos:end="31:51"><expr pos:start="31:50" pos:end="31:51"><name pos:start="31:50" pos:end="31:51">ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="67:5"><if pos:start="33:5" pos:end="67:5">if <condition pos:start="33:8" pos:end="33:37">(<expr pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:10">ps</name> <operator pos:start="33:12" pos:end="33:13">!=</operator> <name pos:start="33:15" pos:end="33:36">POSTCOPY_INCOMING_NONE</name></expr>)</condition> <block pos:start="33:39" pos:end="67:5">{<block_content pos:start="35:9" pos:end="63:9">

        <if_stmt pos:start="35:9" pos:end="63:9"><if pos:start="35:9" pos:end="49:9">if <condition pos:start="35:12" pos:end="35:43">(<expr pos:start="35:13" pos:end="35:42"><name pos:start="35:13" pos:end="35:14">ps</name> <operator pos:start="35:16" pos:end="35:17">==</operator> <name pos:start="35:19" pos:end="35:42">POSTCOPY_INCOMING_ADVISE</name></expr>)</condition> <block pos:start="35:45" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:47">

            <comment type="block" pos:start="37:13" pos:end="45:15">/*

             * Where a migration had postcopy enabled (and thus went to advise)

             * but managed to complete within the precopy period, we can use

             * the normal exit.

             */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:47"><expr pos:start="47:13" pos:end="47:46"><call pos:start="47:13" pos:end="47:46"><name pos:start="47:13" pos:end="47:41">postcopy_ram_incoming_cleanup</name><argument_list pos:start="47:42" pos:end="47:46">(<argument pos:start="47:43" pos:end="47:45"><expr pos:start="47:43" pos:end="47:45"><name pos:start="47:43" pos:end="47:45">mis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="63:9">else if <condition pos:start="49:19" pos:end="49:28">(<expr pos:start="49:20" pos:end="49:27"><name pos:start="49:20" pos:end="49:22">ret</name> <operator pos:start="49:24" pos:end="49:25">&gt;=</operator> <literal type="number" pos:start="49:27" pos:end="49:27">0</literal></expr>)</condition> <block pos:start="49:30" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:19">

            <comment type="block" pos:start="51:13" pos:end="57:15">/*

             * Postcopy was started, cleanup should happen at the end of the

             * postcopy thread.

             */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:68"><expr pos:start="59:13" pos:end="59:67"><call pos:start="59:13" pos:end="59:67"><name pos:start="59:13" pos:end="59:65">trace_process_incoming_migration_co_postcopy_end_main</name><argument_list pos:start="59:66" pos:end="59:67">()</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="65:9" pos:end="65:80">/* Else if something went wrong then just fall out of the normal exit */</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:59">/* we get COLO info, and know if we are in COLO mode */</comment>

    <if_stmt pos:start="73:5" pos:end="91:5"><if pos:start="73:5" pos:end="91:5">if <condition pos:start="73:8" pos:end="73:49">(<expr pos:start="73:9" pos:end="73:48"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:12">ret</name> <operator pos:start="73:14" pos:end="73:15">&amp;&amp;</operator> <call pos:start="73:17" pos:end="73:48"><name pos:start="73:17" pos:end="73:46">migration_incoming_enable_colo</name><argument_list pos:start="73:47" pos:end="73:48">()</argument_list></call></expr>)</condition> <block pos:start="73:51" pos:end="91:5">{<block_content pos:start="75:9" pos:end="89:53">

        <expr_stmt pos:start="75:9" pos:end="75:59"><expr pos:start="75:9" pos:end="75:58"><name pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:11">mis</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:34">migration_incoming_co</name></name> <operator pos:start="75:36" pos:end="75:36">=</operator> <call pos:start="75:38" pos:end="75:58"><name pos:start="75:38" pos:end="75:56">qemu_coroutine_self</name><argument_list pos:start="75:57" pos:end="75:58">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="79:70"><expr pos:start="77:9" pos:end="79:69"><call pos:start="77:9" pos:end="79:69"><name pos:start="77:9" pos:end="77:26">qemu_thread_create</name><argument_list pos:start="77:27" pos:end="79:69">(<argument pos:start="77:28" pos:end="77:53"><expr pos:start="77:28" pos:end="77:53"><operator pos:start="77:28" pos:end="77:28">&amp;</operator><name pos:start="77:29" pos:end="77:53"><name pos:start="77:29" pos:end="77:31">mis</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:53">colo_incoming_thread</name></name></expr></argument>, <argument pos:start="77:56" pos:end="77:70"><expr pos:start="77:56" pos:end="77:70"><literal type="string" pos:start="77:56" pos:end="77:70">"COLO incoming"</literal></expr></argument>,

             <argument pos:start="79:14" pos:end="79:41"><expr pos:start="79:14" pos:end="79:41"><name pos:start="79:14" pos:end="79:41">colo_process_incoming_thread</name></expr></argument>, <argument pos:start="79:44" pos:end="79:46"><expr pos:start="79:44" pos:end="79:46"><name pos:start="79:44" pos:end="79:46">mis</name></expr></argument>, <argument pos:start="79:49" pos:end="79:68"><expr pos:start="79:49" pos:end="79:68"><name pos:start="79:49" pos:end="79:68">QEMU_THREAD_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:46"><expr pos:start="81:9" pos:end="81:45"><name pos:start="81:9" pos:end="81:38"><name pos:start="81:9" pos:end="81:11">mis</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:38">have_colo_incoming_thread</name></name> <operator pos:start="81:40" pos:end="81:40">=</operator> <name pos:start="81:42" pos:end="81:45">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:31"><expr pos:start="83:9" pos:end="83:30"><call pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:28">qemu_coroutine_yield</name><argument_list pos:start="83:29" pos:end="83:30">()</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="87:9" pos:end="87:71">/* Wait checkpoint incoming thread exit before free resource */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:53"><expr pos:start="89:9" pos:end="89:52"><call pos:start="89:9" pos:end="89:52"><name pos:start="89:9" pos:end="89:24">qemu_thread_join</name><argument_list pos:start="89:25" pos:end="89:52">(<argument pos:start="89:26" pos:end="89:51"><expr pos:start="89:26" pos:end="89:51"><operator pos:start="89:26" pos:end="89:26">&amp;</operator><name pos:start="89:27" pos:end="89:51"><name pos:start="89:27" pos:end="89:29">mis</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:51">colo_incoming_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:19"><expr pos:start="95:5" pos:end="95:18"><call pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:15">qemu_fclose</name><argument_list pos:start="95:16" pos:end="95:18">(<argument pos:start="95:17" pos:end="95:17"><expr pos:start="95:17" pos:end="95:17"><name pos:start="95:17" pos:end="95:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:30"><expr pos:start="97:5" pos:end="97:29"><call pos:start="97:5" pos:end="97:29"><name pos:start="97:5" pos:end="97:27">free_xbzrle_decoded_buf</name><argument_list pos:start="97:28" pos:end="97:29">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="101:5" pos:end="113:5"><if pos:start="101:5" pos:end="113:5">if <condition pos:start="101:8" pos:end="101:16">(<expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">&lt;</operator> <literal type="number" pos:start="101:15" pos:end="101:15">0</literal></expr>)</condition> <block pos:start="101:18" pos:end="113:5">{<block_content pos:start="103:9" pos:end="111:27">

        <expr_stmt pos:start="103:9" pos:end="105:51"><expr pos:start="103:9" pos:end="105:50"><call pos:start="103:9" pos:end="105:50"><name pos:start="103:9" pos:end="103:25">migrate_set_state</name><argument_list pos:start="103:26" pos:end="105:50">(<argument pos:start="103:27" pos:end="103:37"><expr pos:start="103:27" pos:end="103:37"><operator pos:start="103:27" pos:end="103:27">&amp;</operator><name pos:start="103:28" pos:end="103:37"><name pos:start="103:28" pos:end="103:30">mis</name><operator pos:start="103:31" pos:end="103:32">-&gt;</operator><name pos:start="103:33" pos:end="103:37">state</name></name></expr></argument>, <argument pos:start="103:40" pos:end="103:62"><expr pos:start="103:40" pos:end="103:62"><name pos:start="103:40" pos:end="103:62">MIGRATION_STATUS_ACTIVE</name></expr></argument>,

                          <argument pos:start="105:27" pos:end="105:49"><expr pos:start="105:27" pos:end="105:49"><name pos:start="105:27" pos:end="105:49">MIGRATION_STATUS_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:69"><expr pos:start="107:9" pos:end="107:68"><call pos:start="107:9" pos:end="107:68"><name pos:start="107:9" pos:end="107:20">error_report</name><argument_list pos:start="107:21" pos:end="107:68">(<argument pos:start="107:22" pos:end="107:51"><expr pos:start="107:22" pos:end="107:51"><literal type="string" pos:start="107:22" pos:end="107:51">"load of migration failed: %s"</literal></expr></argument>, <argument pos:start="107:54" pos:end="107:67"><expr pos:start="107:54" pos:end="107:67"><call pos:start="107:54" pos:end="107:67"><name pos:start="107:54" pos:end="107:61">strerror</name><argument_list pos:start="107:62" pos:end="107:67">(<argument pos:start="107:63" pos:end="107:66"><expr pos:start="107:63" pos:end="107:66"><operator pos:start="107:63" pos:end="107:63">-</operator><name pos:start="107:64" pos:end="107:66">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:42"><expr pos:start="109:9" pos:end="109:41"><call pos:start="109:9" pos:end="109:41"><name pos:start="109:9" pos:end="109:39">migrate_decompress_threads_join</name><argument_list pos:start="109:40" pos:end="109:41">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:27"><expr pos:start="111:9" pos:end="111:26"><call pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:12">exit</name><argument_list pos:start="111:13" pos:end="111:26">(<argument pos:start="111:14" pos:end="111:25"><expr pos:start="111:14" pos:end="111:25"><name pos:start="111:14" pos:end="111:25">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:62"><expr pos:start="117:5" pos:end="117:61"><name pos:start="117:5" pos:end="117:11"><name pos:start="117:5" pos:end="117:7">mis</name><operator pos:start="117:8" pos:end="117:9">-&gt;</operator><name pos:start="117:10" pos:end="117:11">bh</name></name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="117:61"><name pos:start="117:15" pos:end="117:25">qemu_bh_new</name><argument_list pos:start="117:26" pos:end="117:61">(<argument pos:start="117:27" pos:end="117:55"><expr pos:start="117:27" pos:end="117:55"><name pos:start="117:27" pos:end="117:55">process_incoming_migration_bh</name></expr></argument>, <argument pos:start="117:58" pos:end="117:60"><expr pos:start="117:58" pos:end="117:60"><name pos:start="117:58" pos:end="117:60">mis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:30"><expr pos:start="119:5" pos:end="119:29"><call pos:start="119:5" pos:end="119:29"><name pos:start="119:5" pos:end="119:20">qemu_bh_schedule</name><argument_list pos:start="119:21" pos:end="119:29">(<argument pos:start="119:22" pos:end="119:28"><expr pos:start="119:22" pos:end="119:28"><name pos:start="119:22" pos:end="119:28"><name pos:start="119:22" pos:end="119:24">mis</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:28">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
