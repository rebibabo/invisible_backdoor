<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7844.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">create_header32</name><parameter_list pos:start="1:27" pos:end="1:40">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:38"><name pos:start="1:28" pos:end="1:36">DumpState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="209:1">{<block_content pos:start="5:5" pos:end="207:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">DiskDumpHeader32</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">dh</name> <init pos:start="7:26" pos:end="7:31">= <expr pos:start="7:28" pos:end="7:31"><name pos:start="7:28" pos:end="7:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">KdumpSubHeader32</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">kh</name> <init pos:start="9:26" pos:end="9:31">= <expr pos:start="9:28" pos:end="9:31"><name pos:start="9:28" pos:end="9:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:15">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">endian</name> <init pos:start="13:16" pos:end="13:38">= <expr pos:start="13:18" pos:end="13:38"><name pos:start="13:18" pos:end="13:38"><name pos:start="13:18" pos:end="13:18">s</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:29">dump_info</name><operator pos:start="13:30" pos:end="13:30">.</operator><name pos:start="13:31" pos:end="13:38">d_endian</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:23">block_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:25">sub_hdr_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:26">bitmap_blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:19">status</name> <init pos:start="21:21" pos:end="21:23">= <expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:24">offset_note</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:76">/* write common header, the version of kdump-compressed format is 6th */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:36"><expr pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:8">size</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <sizeof pos:start="29:12" pos:end="29:35">sizeof<argument_list pos:start="29:18" pos:end="29:35">(<argument pos:start="29:19" pos:end="29:34"><expr pos:start="29:19" pos:end="29:34"><name pos:start="29:19" pos:end="29:34">DiskDumpHeader32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:25"><expr pos:start="31:5" pos:end="31:24"><name pos:start="31:5" pos:end="31:6">dh</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:24"><name pos:start="31:10" pos:end="31:18">g_malloc0</name><argument_list pos:start="31:19" pos:end="31:24">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:69"><expr pos:start="35:5" pos:end="35:68"><call pos:start="35:5" pos:end="35:68"><name pos:start="35:5" pos:end="35:11">strncpy</name><argument_list pos:start="35:12" pos:end="35:68">(<argument pos:start="35:13" pos:end="35:25"><expr pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:14">dh</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:25">signature</name></name></expr></argument>, <argument pos:start="35:28" pos:end="35:42"><expr pos:start="35:28" pos:end="35:42"><name pos:start="35:28" pos:end="35:42">KDUMP_SIGNATURE</name></expr></argument>, <argument pos:start="35:45" pos:end="35:67"><expr pos:start="35:45" pos:end="35:67"><call pos:start="35:45" pos:end="35:67"><name pos:start="35:45" pos:end="35:50">strlen</name><argument_list pos:start="35:51" pos:end="35:67">(<argument pos:start="35:52" pos:end="35:66"><expr pos:start="35:52" pos:end="35:66"><name pos:start="35:52" pos:end="35:66">KDUMP_SIGNATURE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:60"><expr pos:start="37:5" pos:end="37:59"><name pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:6">dh</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:22">header_version</name></name> <operator pos:start="37:24" pos:end="37:24">=</operator> <call pos:start="37:26" pos:end="37:59"><name pos:start="37:26" pos:end="37:48">cpu_convert_to_target32</name><argument_list pos:start="37:49" pos:end="37:59">(<argument pos:start="37:50" pos:end="37:50"><expr pos:start="37:50" pos:end="37:50"><literal type="number" pos:start="37:50" pos:end="37:50">6</literal></expr></argument>, <argument pos:start="37:53" pos:end="37:58"><expr pos:start="37:53" pos:end="37:58"><name pos:start="37:53" pos:end="37:58">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:14">block_size</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:29"><name pos:start="39:18" pos:end="39:18">s</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:29">page_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:65"><expr pos:start="41:5" pos:end="41:64"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:6">dh</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:18">block_size</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:64"><name pos:start="41:22" pos:end="41:44">cpu_convert_to_target32</name><argument_list pos:start="41:45" pos:end="41:64">(<argument pos:start="41:46" pos:end="41:55"><expr pos:start="41:46" pos:end="41:55"><name pos:start="41:46" pos:end="41:55">block_size</name></expr></argument>, <argument pos:start="41:58" pos:end="41:63"><expr pos:start="41:58" pos:end="41:63"><name pos:start="41:58" pos:end="41:63">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:66"><expr pos:start="43:5" pos:end="43:65"><name pos:start="43:5" pos:end="43:16">sub_hdr_size</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <sizeof pos:start="43:20" pos:end="43:50">sizeof<argument_list pos:start="43:26" pos:end="43:50">(<argument pos:start="43:27" pos:end="43:49"><expr pos:start="43:27" pos:end="43:49">struct <name pos:start="43:34" pos:end="43:49">KdumpSubHeader32</name></expr></argument>)</argument_list></sizeof> <operator pos:start="43:52" pos:end="43:52">+</operator> <name pos:start="43:54" pos:end="43:65"><name pos:start="43:54" pos:end="43:54">s</name><operator pos:start="43:55" pos:end="43:56">-&gt;</operator><name pos:start="43:57" pos:end="43:65">note_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:58"><expr pos:start="45:5" pos:end="45:57"><name pos:start="45:5" pos:end="45:16">sub_hdr_size</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <call pos:start="45:20" pos:end="45:57"><name pos:start="45:20" pos:end="45:31">DIV_ROUND_UP</name><argument_list pos:start="45:32" pos:end="45:57">(<argument pos:start="45:33" pos:end="45:44"><expr pos:start="45:33" pos:end="45:44"><name pos:start="45:33" pos:end="45:44">sub_hdr_size</name></expr></argument>, <argument pos:start="45:47" pos:end="45:56"><expr pos:start="45:47" pos:end="45:56"><name pos:start="45:47" pos:end="45:56">block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:69"><expr pos:start="47:5" pos:end="47:68"><name pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:6">dh</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:20">sub_hdr_size</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <call pos:start="47:24" pos:end="47:68"><name pos:start="47:24" pos:end="47:46">cpu_convert_to_target32</name><argument_list pos:start="47:47" pos:end="47:68">(<argument pos:start="47:48" pos:end="47:59"><expr pos:start="47:48" pos:end="47:59"><name pos:start="47:48" pos:end="47:59">sub_hdr_size</name></expr></argument>, <argument pos:start="47:62" pos:end="47:67"><expr pos:start="47:62" pos:end="47:67"><name pos:start="47:62" pos:end="47:67">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:74">/* dh-&gt;max_mapnr may be truncated, full 64bit is in kh.max_mapnr_64 */</comment>

    <expr_stmt pos:start="51:5" pos:end="53:52"><expr pos:start="51:5" pos:end="53:51"><name pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:6">dh</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:17">max_mapnr</name></name> <operator pos:start="51:19" pos:end="51:19">=</operator> <call pos:start="51:21" pos:end="53:51"><name pos:start="51:21" pos:end="51:43">cpu_convert_to_target32</name><argument_list pos:start="51:44" pos:end="53:51">(<argument pos:start="51:45" pos:end="51:71"><expr pos:start="51:45" pos:end="51:71"><call pos:start="51:45" pos:end="51:71"><name pos:start="51:45" pos:end="51:47">MIN</name><argument_list pos:start="51:48" pos:end="51:71">(<argument pos:start="51:49" pos:end="51:60"><expr pos:start="51:49" pos:end="51:60"><name pos:start="51:49" pos:end="51:60"><name pos:start="51:49" pos:end="51:49">s</name><operator pos:start="51:50" pos:end="51:51">-&gt;</operator><name pos:start="51:52" pos:end="51:60">max_mapnr</name></name></expr></argument>, <argument pos:start="51:63" pos:end="51:70"><expr pos:start="51:63" pos:end="51:70"><name pos:start="51:63" pos:end="51:70">UINT_MAX</name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="53:45" pos:end="53:50"><expr pos:start="53:45" pos:end="53:50"><name pos:start="53:45" pos:end="53:50">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:62"><expr pos:start="55:5" pos:end="55:61"><name pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:6">dh</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:15">nr_cpus</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:61"><name pos:start="55:19" pos:end="55:41">cpu_convert_to_target32</name><argument_list pos:start="55:42" pos:end="55:61">(<argument pos:start="55:43" pos:end="55:52"><expr pos:start="55:43" pos:end="55:52"><name pos:start="55:43" pos:end="55:52"><name pos:start="55:43" pos:end="55:43">s</name><operator pos:start="55:44" pos:end="55:45">-&gt;</operator><name pos:start="55:46" pos:end="55:52">nr_cpus</name></name></expr></argument>, <argument pos:start="55:55" pos:end="55:60"><expr pos:start="55:55" pos:end="55:60"><name pos:start="55:55" pos:end="55:60">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:69"><expr pos:start="57:5" pos:end="57:68"><name pos:start="57:5" pos:end="57:17">bitmap_blocks</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <call pos:start="57:21" pos:end="57:64"><name pos:start="57:21" pos:end="57:32">DIV_ROUND_UP</name><argument_list pos:start="57:33" pos:end="57:64">(<argument pos:start="57:34" pos:end="57:51"><expr pos:start="57:34" pos:end="57:51"><name pos:start="57:34" pos:end="57:51"><name pos:start="57:34" pos:end="57:34">s</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:51">len_dump_bitmap</name></name></expr></argument>, <argument pos:start="57:54" pos:end="57:63"><expr pos:start="57:54" pos:end="57:63"><name pos:start="57:54" pos:end="57:63">block_size</name></expr></argument>)</argument_list></call> <operator pos:start="57:66" pos:end="57:66">*</operator> <literal type="number" pos:start="57:68" pos:end="57:68">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:71"><expr pos:start="59:5" pos:end="59:70"><name pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:6">dh</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:21">bitmap_blocks</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <call pos:start="59:25" pos:end="59:70"><name pos:start="59:25" pos:end="59:47">cpu_convert_to_target32</name><argument_list pos:start="59:48" pos:end="59:70">(<argument pos:start="59:49" pos:end="59:61"><expr pos:start="59:49" pos:end="59:61"><name pos:start="59:49" pos:end="59:61">bitmap_blocks</name></expr></argument>, <argument pos:start="59:64" pos:end="59:69"><expr pos:start="59:64" pos:end="59:69"><name pos:start="59:64" pos:end="59:69">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:81"><expr pos:start="61:5" pos:end="61:80"><call pos:start="61:5" pos:end="61:80"><name pos:start="61:5" pos:end="61:11">strncpy</name><argument_list pos:start="61:12" pos:end="61:80">(<argument pos:start="61:13" pos:end="61:31"><expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:14">dh</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:23">utsname</name><operator pos:start="61:24" pos:end="61:24">.</operator><name pos:start="61:25" pos:end="61:31">machine</name></name></expr></argument>, <argument pos:start="61:34" pos:end="61:50"><expr pos:start="61:34" pos:end="61:50"><name pos:start="61:34" pos:end="61:50">ELF_MACHINE_UNAME</name></expr></argument>, <argument pos:start="61:53" pos:end="61:79"><expr pos:start="61:53" pos:end="61:79"><sizeof pos:start="61:53" pos:end="61:79">sizeof<argument_list pos:start="61:59" pos:end="61:79">(<argument pos:start="61:60" pos:end="61:78"><expr pos:start="61:60" pos:end="61:78"><name pos:start="61:60" pos:end="61:78"><name pos:start="61:60" pos:end="61:61">dh</name><operator pos:start="61:62" pos:end="61:63">-&gt;</operator><name pos:start="61:64" pos:end="61:70">utsname</name><operator pos:start="61:71" pos:end="61:71">.</operator><name pos:start="61:72" pos:end="61:78">machine</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="72:0"><if pos:start="65:5" pos:end="72:0">if <condition pos:start="65:8" pos:end="65:51">(<expr pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:24">flag_compress</name></name> <operator pos:start="65:26" pos:end="65:26">&amp;</operator> <name pos:start="65:28" pos:end="65:50">DUMP_DH_COMPRESSED_ZLIB</name></expr>)</condition> <block pos:start="65:53" pos:end="72:0">{<block_content pos:start="67:9" pos:end="67:42">

        <expr_stmt pos:start="67:9" pos:end="67:42"><expr pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:14">status</name> <operator pos:start="67:16" pos:end="67:17">|=</operator> <name pos:start="67:19" pos:end="67:41">DUMP_DH_COMPRESSED_ZLIB</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="71:1" pos:end="71:17">#<cpp:directive pos:start="71:2" pos:end="71:6">ifdef</cpp:directive> <name pos:start="71:8" pos:end="71:17">CONFIG_LZO</name></cpp:ifdef>

    <if_stmt pos:start="73:5" pos:end="82:0"><if pos:start="73:5" pos:end="82:0">if <condition pos:start="73:8" pos:end="73:50">(<expr pos:start="73:9" pos:end="73:49"><name pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:24">flag_compress</name></name> <operator pos:start="73:26" pos:end="73:26">&amp;</operator> <name pos:start="73:28" pos:end="73:49">DUMP_DH_COMPRESSED_LZO</name></expr>)</condition> <block pos:start="73:52" pos:end="82:0">{<block_content pos:start="75:9" pos:end="75:41">

        <expr_stmt pos:start="75:9" pos:end="75:41"><expr pos:start="75:9" pos:end="75:40"><name pos:start="75:9" pos:end="75:14">status</name> <operator pos:start="75:16" pos:end="75:17">|=</operator> <name pos:start="75:19" pos:end="75:40">DUMP_DH_COMPRESSED_LZO</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="81:1" pos:end="81:20">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:20">CONFIG_SNAPPY</name></cpp:ifdef>

    <if_stmt pos:start="83:5" pos:end="90:0"><if pos:start="83:5" pos:end="90:0">if <condition pos:start="83:8" pos:end="83:53">(<expr pos:start="83:9" pos:end="83:52"><name pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:24">flag_compress</name></name> <operator pos:start="83:26" pos:end="83:26">&amp;</operator> <name pos:start="83:28" pos:end="83:52">DUMP_DH_COMPRESSED_SNAPPY</name></expr>)</condition> <block pos:start="83:55" pos:end="90:0">{<block_content pos:start="85:9" pos:end="85:44">

        <expr_stmt pos:start="85:9" pos:end="85:44"><expr pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:14">status</name> <operator pos:start="85:16" pos:end="85:17">|=</operator> <name pos:start="85:19" pos:end="85:43">DUMP_DH_COMPRESSED_SNAPPY</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="91:5" pos:end="91:57"><expr pos:start="91:5" pos:end="91:56"><name pos:start="91:5" pos:end="91:14"><name pos:start="91:5" pos:end="91:6">dh</name><operator pos:start="91:7" pos:end="91:8">-&gt;</operator><name pos:start="91:9" pos:end="91:14">status</name></name> <operator pos:start="91:16" pos:end="91:16">=</operator> <call pos:start="91:18" pos:end="91:56"><name pos:start="91:18" pos:end="91:40">cpu_convert_to_target32</name><argument_list pos:start="91:41" pos:end="91:56">(<argument pos:start="91:42" pos:end="91:47"><expr pos:start="91:42" pos:end="91:47"><name pos:start="91:42" pos:end="91:47">status</name></expr></argument>, <argument pos:start="91:50" pos:end="91:55"><expr pos:start="91:50" pos:end="91:55"><name pos:start="91:50" pos:end="91:55">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:45">(<expr pos:start="95:9" pos:end="95:44"><call pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:20">write_buffer</name><argument_list pos:start="95:21" pos:end="95:40">(<argument pos:start="95:22" pos:end="95:26"><expr pos:start="95:22" pos:end="95:26"><name pos:start="95:22" pos:end="95:26"><name pos:start="95:22" pos:end="95:22">s</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:26">fd</name></name></expr></argument>, <argument pos:start="95:29" pos:end="95:29"><expr pos:start="95:29" pos:end="95:29"><literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr></argument>, <argument pos:start="95:32" pos:end="95:33"><expr pos:start="95:32" pos:end="95:33"><name pos:start="95:32" pos:end="95:33">dh</name></expr></argument>, <argument pos:start="95:36" pos:end="95:39"><expr pos:start="95:36" pos:end="95:39"><name pos:start="95:36" pos:end="95:39">size</name></expr></argument>)</argument_list></call> <operator pos:start="95:42" pos:end="95:42">&lt;</operator> <literal type="number" pos:start="95:44" pos:end="95:44">0</literal></expr>)</condition> <block pos:start="95:47" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:17">

        <expr_stmt pos:start="97:9" pos:end="97:67"><expr pos:start="97:9" pos:end="97:66"><call pos:start="97:9" pos:end="97:66"><name pos:start="97:9" pos:end="97:18">dump_error</name><argument_list pos:start="97:19" pos:end="97:66">(<argument pos:start="97:20" pos:end="97:20"><expr pos:start="97:20" pos:end="97:20"><name pos:start="97:20" pos:end="97:20">s</name></expr></argument>, <argument pos:start="97:23" pos:end="97:65"><expr pos:start="97:23" pos:end="97:65"><literal type="string" pos:start="97:23" pos:end="97:65">"dump: failed to write disk dump header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:17"><expr pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <operator pos:start="99:15" pos:end="99:15">-</operator><literal type="number" pos:start="99:16" pos:end="99:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:17">goto <name pos:start="101:14" pos:end="101:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:26">/* write sub header */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:36"><expr pos:start="109:5" pos:end="109:35"><name pos:start="109:5" pos:end="109:8">size</name> <operator pos:start="109:10" pos:end="109:10">=</operator> <sizeof pos:start="109:12" pos:end="109:35">sizeof<argument_list pos:start="109:18" pos:end="109:35">(<argument pos:start="109:19" pos:end="109:34"><expr pos:start="109:19" pos:end="109:34"><name pos:start="109:19" pos:end="109:34">KdumpSubHeader32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:25"><expr pos:start="111:5" pos:end="111:24"><name pos:start="111:5" pos:end="111:6">kh</name> <operator pos:start="111:8" pos:end="111:8">=</operator> <call pos:start="111:10" pos:end="111:24"><name pos:start="111:10" pos:end="111:18">g_malloc0</name><argument_list pos:start="111:19" pos:end="111:24">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:28">/* 64bit max_mapnr_64 */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:69"><expr pos:start="117:5" pos:end="117:68"><name pos:start="117:5" pos:end="117:20"><name pos:start="117:5" pos:end="117:6">kh</name><operator pos:start="117:7" pos:end="117:8">-&gt;</operator><name pos:start="117:9" pos:end="117:20">max_mapnr_64</name></name> <operator pos:start="117:22" pos:end="117:22">=</operator> <call pos:start="117:24" pos:end="117:68"><name pos:start="117:24" pos:end="117:46">cpu_convert_to_target64</name><argument_list pos:start="117:47" pos:end="117:68">(<argument pos:start="117:48" pos:end="117:59"><expr pos:start="117:48" pos:end="117:59"><name pos:start="117:48" pos:end="117:59"><name pos:start="117:48" pos:end="117:48">s</name><operator pos:start="117:49" pos:end="117:50">-&gt;</operator><name pos:start="117:51" pos:end="117:59">max_mapnr</name></name></expr></argument>, <argument pos:start="117:62" pos:end="117:67"><expr pos:start="117:62" pos:end="117:67"><name pos:start="117:62" pos:end="117:67">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:63"><expr pos:start="119:5" pos:end="119:62"><name pos:start="119:5" pos:end="119:17"><name pos:start="119:5" pos:end="119:6">kh</name><operator pos:start="119:7" pos:end="119:8">-&gt;</operator><name pos:start="119:9" pos:end="119:17">phys_base</name></name> <operator pos:start="119:19" pos:end="119:19">=</operator> <call pos:start="119:21" pos:end="119:62"><name pos:start="119:21" pos:end="119:43">cpu_convert_to_target32</name><argument_list pos:start="119:44" pos:end="119:62">(<argument pos:start="119:45" pos:end="119:53"><expr pos:start="119:45" pos:end="119:53"><name pos:start="119:45" pos:end="119:53">PHYS_BASE</name></expr></argument>, <argument pos:start="119:56" pos:end="119:61"><expr pos:start="119:56" pos:end="119:61"><name pos:start="119:56" pos:end="119:61">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:65"><expr pos:start="121:5" pos:end="121:64"><name pos:start="121:5" pos:end="121:18"><name pos:start="121:5" pos:end="121:6">kh</name><operator pos:start="121:7" pos:end="121:8">-&gt;</operator><name pos:start="121:9" pos:end="121:18">dump_level</name></name> <operator pos:start="121:20" pos:end="121:20">=</operator> <call pos:start="121:22" pos:end="121:64"><name pos:start="121:22" pos:end="121:44">cpu_convert_to_target32</name><argument_list pos:start="121:45" pos:end="121:64">(<argument pos:start="121:46" pos:end="121:55"><expr pos:start="121:46" pos:end="121:55"><name pos:start="121:46" pos:end="121:55">DUMP_LEVEL</name></expr></argument>, <argument pos:start="121:58" pos:end="121:63"><expr pos:start="121:58" pos:end="121:63"><name pos:start="121:58" pos:end="121:63">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:61"><expr pos:start="125:5" pos:end="125:60"><name pos:start="125:5" pos:end="125:15">offset_note</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <name pos:start="125:19" pos:end="125:40">DISKDUMP_HEADER_BLOCKS</name> <operator pos:start="125:42" pos:end="125:42">*</operator> <name pos:start="125:44" pos:end="125:53">block_size</name> <operator pos:start="125:55" pos:end="125:55">+</operator> <name pos:start="125:57" pos:end="125:60">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:67"><expr pos:start="127:5" pos:end="127:66"><name pos:start="127:5" pos:end="127:19"><name pos:start="127:5" pos:end="127:6">kh</name><operator pos:start="127:7" pos:end="127:8">-&gt;</operator><name pos:start="127:9" pos:end="127:19">offset_note</name></name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="127:66"><name pos:start="127:23" pos:end="127:45">cpu_convert_to_target64</name><argument_list pos:start="127:46" pos:end="127:66">(<argument pos:start="127:47" pos:end="127:57"><expr pos:start="127:47" pos:end="127:57"><name pos:start="127:47" pos:end="127:57">offset_note</name></expr></argument>, <argument pos:start="127:60" pos:end="127:65"><expr pos:start="127:60" pos:end="127:65"><name pos:start="127:60" pos:end="127:65">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:66"><expr pos:start="129:5" pos:end="129:65"><name pos:start="129:5" pos:end="129:17"><name pos:start="129:5" pos:end="129:6">kh</name><operator pos:start="129:7" pos:end="129:8">-&gt;</operator><name pos:start="129:9" pos:end="129:17">note_size</name></name> <operator pos:start="129:19" pos:end="129:19">=</operator> <call pos:start="129:21" pos:end="129:65"><name pos:start="129:21" pos:end="129:43">cpu_convert_to_target32</name><argument_list pos:start="129:44" pos:end="129:65">(<argument pos:start="129:45" pos:end="129:56"><expr pos:start="129:45" pos:end="129:56"><name pos:start="129:45" pos:end="129:56"><name pos:start="129:45" pos:end="129:45">s</name><operator pos:start="129:46" pos:end="129:47">-&gt;</operator><name pos:start="129:48" pos:end="129:56">note_size</name></name></expr></argument>, <argument pos:start="129:59" pos:end="129:64"><expr pos:start="129:59" pos:end="129:64"><name pos:start="129:59" pos:end="129:64">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="143:5"><if pos:start="133:5" pos:end="143:5">if <condition pos:start="133:8" pos:end="135:47">(<expr pos:start="133:9" pos:end="135:46"><call pos:start="133:9" pos:end="135:42"><name pos:start="133:9" pos:end="133:20">write_buffer</name><argument_list pos:start="133:21" pos:end="135:42">(<argument pos:start="133:22" pos:end="133:26"><expr pos:start="133:22" pos:end="133:26"><name pos:start="133:22" pos:end="133:26"><name pos:start="133:22" pos:end="133:22">s</name><operator pos:start="133:23" pos:end="133:24">-&gt;</operator><name pos:start="133:25" pos:end="133:26">fd</name></name></expr></argument>, <argument pos:start="133:29" pos:end="135:31"><expr pos:start="133:29" pos:end="135:31"><name pos:start="133:29" pos:end="133:50">DISKDUMP_HEADER_BLOCKS</name> <operator pos:start="133:52" pos:end="133:52">*</operator>

                     <name pos:start="135:22" pos:end="135:31">block_size</name></expr></argument>, <argument pos:start="135:34" pos:end="135:35"><expr pos:start="135:34" pos:end="135:35"><name pos:start="135:34" pos:end="135:35">kh</name></expr></argument>, <argument pos:start="135:38" pos:end="135:41"><expr pos:start="135:38" pos:end="135:41"><name pos:start="135:38" pos:end="135:41">size</name></expr></argument>)</argument_list></call> <operator pos:start="135:44" pos:end="135:44">&lt;</operator> <literal type="number" pos:start="135:46" pos:end="135:46">0</literal></expr>)</condition> <block pos:start="135:49" pos:end="143:5">{<block_content pos:start="137:9" pos:end="141:17">

        <expr_stmt pos:start="137:9" pos:end="137:67"><expr pos:start="137:9" pos:end="137:66"><call pos:start="137:9" pos:end="137:66"><name pos:start="137:9" pos:end="137:18">dump_error</name><argument_list pos:start="137:19" pos:end="137:66">(<argument pos:start="137:20" pos:end="137:20"><expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">s</name></expr></argument>, <argument pos:start="137:23" pos:end="137:65"><expr pos:start="137:23" pos:end="137:65"><literal type="string" pos:start="137:23" pos:end="137:65">"dump: failed to write kdump sub header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:17"><expr pos:start="139:9" pos:end="139:16"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <operator pos:start="139:15" pos:end="139:15">-</operator><literal type="number" pos:start="139:16" pos:end="139:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="141:9" pos:end="141:17">goto <name pos:start="141:14" pos:end="141:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:20">/* write note */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:42"><expr pos:start="149:5" pos:end="149:41"><name pos:start="149:5" pos:end="149:15"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:15">note_buf</name></name> <operator pos:start="149:17" pos:end="149:17">=</operator> <call pos:start="149:19" pos:end="149:41"><name pos:start="149:19" pos:end="149:27">g_malloc0</name><argument_list pos:start="149:28" pos:end="149:41">(<argument pos:start="149:29" pos:end="149:40"><expr pos:start="149:29" pos:end="149:40"><name pos:start="149:29" pos:end="149:40"><name pos:start="149:29" pos:end="149:29">s</name><operator pos:start="149:30" pos:end="149:31">-&gt;</operator><name pos:start="149:32" pos:end="149:40">note_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:27"><expr pos:start="151:5" pos:end="151:26"><name pos:start="151:5" pos:end="151:22"><name pos:start="151:5" pos:end="151:5">s</name><operator pos:start="151:6" pos:end="151:7">-&gt;</operator><name pos:start="151:8" pos:end="151:22">note_buf_offset</name></name> <operator pos:start="151:24" pos:end="151:24">=</operator> <literal type="number" pos:start="151:26" pos:end="151:26">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:52">/* use s-&gt;note_buf to store notes temporarily */</comment>

    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:49">(<expr pos:start="157:9" pos:end="157:48"><call pos:start="157:9" pos:end="157:44"><name pos:start="157:9" pos:end="157:25">write_elf32_notes</name><argument_list pos:start="157:26" pos:end="157:44">(<argument pos:start="157:27" pos:end="157:40"><expr pos:start="157:27" pos:end="157:40"><name pos:start="157:27" pos:end="157:40">buf_write_note</name></expr></argument>, <argument pos:start="157:43" pos:end="157:43"><expr pos:start="157:43" pos:end="157:43"><name pos:start="157:43" pos:end="157:43">s</name></expr></argument>)</argument_list></call> <operator pos:start="157:46" pos:end="157:46">&lt;</operator> <literal type="number" pos:start="157:48" pos:end="157:48">0</literal></expr>)</condition> <block pos:start="157:51" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:17">

        <expr_stmt pos:start="159:9" pos:end="159:17"><expr pos:start="159:9" pos:end="159:16"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <operator pos:start="159:15" pos:end="159:15">-</operator><literal type="number" pos:start="159:16" pos:end="159:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:17">goto <name pos:start="161:14" pos:end="161:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="167:5" pos:end="177:5"><if pos:start="167:5" pos:end="177:5">if <condition pos:start="167:8" pos:end="169:39">(<expr pos:start="167:9" pos:end="169:38"><call pos:start="167:9" pos:end="169:34"><name pos:start="167:9" pos:end="167:20">write_buffer</name><argument_list pos:start="167:21" pos:end="169:34">(<argument pos:start="167:22" pos:end="167:26"><expr pos:start="167:22" pos:end="167:26"><name pos:start="167:22" pos:end="167:26"><name pos:start="167:22" pos:end="167:22">s</name><operator pos:start="167:23" pos:end="167:24">-&gt;</operator><name pos:start="167:25" pos:end="167:26">fd</name></name></expr></argument>, <argument pos:start="167:29" pos:end="167:39"><expr pos:start="167:29" pos:end="167:39"><name pos:start="167:29" pos:end="167:39">offset_note</name></expr></argument>, <argument pos:start="167:42" pos:end="167:52"><expr pos:start="167:42" pos:end="167:52"><name pos:start="167:42" pos:end="167:52"><name pos:start="167:42" pos:end="167:42">s</name><operator pos:start="167:43" pos:end="167:44">-&gt;</operator><name pos:start="167:45" pos:end="167:52">note_buf</name></name></expr></argument>,

                     <argument pos:start="169:22" pos:end="169:33"><expr pos:start="169:22" pos:end="169:33"><name pos:start="169:22" pos:end="169:33"><name pos:start="169:22" pos:end="169:22">s</name><operator pos:start="169:23" pos:end="169:24">-&gt;</operator><name pos:start="169:25" pos:end="169:33">note_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="169:36" pos:end="169:36">&lt;</operator> <literal type="number" pos:start="169:38" pos:end="169:38">0</literal></expr>)</condition> <block pos:start="169:41" pos:end="177:5">{<block_content pos:start="171:9" pos:end="175:17">

        <expr_stmt pos:start="171:9" pos:end="171:53"><expr pos:start="171:9" pos:end="171:52"><call pos:start="171:9" pos:end="171:52"><name pos:start="171:9" pos:end="171:18">dump_error</name><argument_list pos:start="171:19" pos:end="171:52">(<argument pos:start="171:20" pos:end="171:20"><expr pos:start="171:20" pos:end="171:20"><name pos:start="171:20" pos:end="171:20">s</name></expr></argument>, <argument pos:start="171:23" pos:end="171:51"><expr pos:start="171:23" pos:end="171:51"><literal type="string" pos:start="171:23" pos:end="171:51">"dump: failed to write notes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:17"><expr pos:start="173:9" pos:end="173:16"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <operator pos:start="173:15" pos:end="173:15">-</operator><literal type="number" pos:start="173:16" pos:end="173:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="175:9" pos:end="175:17">goto <name pos:start="175:14" pos:end="175:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="181:5" pos:end="181:35">/* get offset of dump_bitmap */</comment>

    <expr_stmt pos:start="183:5" pos:end="185:40"><expr pos:start="183:5" pos:end="185:39"><name pos:start="183:5" pos:end="183:25"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:25">offset_dump_bitmap</name></name> <operator pos:start="183:27" pos:end="183:27">=</operator> <operator pos:start="183:29" pos:end="183:29">(</operator><name pos:start="183:30" pos:end="183:51">DISKDUMP_HEADER_BLOCKS</name> <operator pos:start="183:53" pos:end="183:53">+</operator> <name pos:start="183:55" pos:end="183:66">sub_hdr_size</name><operator pos:start="183:67" pos:end="183:67">)</operator> <operator pos:start="183:69" pos:end="183:69">*</operator>

                             <name pos:start="185:30" pos:end="185:39">block_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:28">/* get offset of page */</comment>

    <expr_stmt pos:start="191:5" pos:end="193:32"><expr pos:start="191:5" pos:end="193:31"><name pos:start="191:5" pos:end="191:18"><name pos:start="191:5" pos:end="191:5">s</name><operator pos:start="191:6" pos:end="191:7">-&gt;</operator><name pos:start="191:8" pos:end="191:18">offset_page</name></name> <operator pos:start="191:20" pos:end="191:20">=</operator> <operator pos:start="191:22" pos:end="191:22">(</operator><name pos:start="191:23" pos:end="191:44">DISKDUMP_HEADER_BLOCKS</name> <operator pos:start="191:46" pos:end="191:46">+</operator> <name pos:start="191:48" pos:end="191:59">sub_hdr_size</name> <operator pos:start="191:61" pos:end="191:61">+</operator> <name pos:start="191:63" pos:end="191:75">bitmap_blocks</name><operator pos:start="191:76" pos:end="191:76">)</operator> <operator pos:start="191:78" pos:end="191:78">*</operator>

                     <name pos:start="193:22" pos:end="193:31">block_size</name></expr>;</expr_stmt>



<label pos:start="197:1" pos:end="197:4"><name pos:start="197:1" pos:end="197:3">out</name>:</label>

    <expr_stmt pos:start="199:5" pos:end="199:15"><expr pos:start="199:5" pos:end="199:14"><call pos:start="199:5" pos:end="199:14"><name pos:start="199:5" pos:end="199:10">g_free</name><argument_list pos:start="199:11" pos:end="199:14">(<argument pos:start="199:12" pos:end="199:13"><expr pos:start="199:12" pos:end="199:13"><name pos:start="199:12" pos:end="199:13">dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:15"><expr pos:start="201:5" pos:end="201:14"><call pos:start="201:5" pos:end="201:14"><name pos:start="201:5" pos:end="201:10">g_free</name><argument_list pos:start="201:11" pos:end="201:14">(<argument pos:start="201:12" pos:end="201:13"><expr pos:start="201:12" pos:end="201:13"><name pos:start="201:12" pos:end="201:13">kh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:24"><expr pos:start="203:5" pos:end="203:23"><call pos:start="203:5" pos:end="203:23"><name pos:start="203:5" pos:end="203:10">g_free</name><argument_list pos:start="203:11" pos:end="203:23">(<argument pos:start="203:12" pos:end="203:22"><expr pos:start="203:12" pos:end="203:22"><name pos:start="203:12" pos:end="203:22"><name pos:start="203:12" pos:end="203:12">s</name><operator pos:start="203:13" pos:end="203:14">-&gt;</operator><name pos:start="203:15" pos:end="203:22">note_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="207:5" pos:end="207:15">return <expr pos:start="207:12" pos:end="207:14"><name pos:start="207:12" pos:end="207:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
