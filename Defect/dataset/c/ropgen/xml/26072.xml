<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26072.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:43">bdrv_driver_pwritev</name><parameter_list pos:start="1:44" pos:end="5:74">(<parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:64"><name pos:start="1:45" pos:end="1:60">BlockDriverState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">bs</name></decl></parameter>,

                                            <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">uint64_t</name></type> <name pos:start="3:54" pos:end="3:59">offset</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:75"><decl pos:start="3:62" pos:end="3:75"><type pos:start="3:62" pos:end="3:75"><name pos:start="3:62" pos:end="3:69">uint64_t</name></type> <name pos:start="3:71" pos:end="3:75">bytes</name></decl></parameter>,

                                            <parameter pos:start="5:45" pos:end="5:62"><decl pos:start="5:45" pos:end="5:62"><type pos:start="5:45" pos:end="5:62"><name pos:start="5:45" pos:end="5:56">QEMUIOVector</name> <modifier pos:start="5:58" pos:end="5:58">*</modifier></type><name pos:start="5:59" pos:end="5:62">qiov</name></decl></parameter>, <parameter pos:start="5:65" pos:end="5:73"><decl pos:start="5:65" pos:end="5:73"><type pos:start="5:65" pos:end="5:73"><name pos:start="5:65" pos:end="5:67">int</name></type> <name pos:start="5:69" pos:end="5:73">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="57:1">{<block_content pos:start="9:5" pos:end="55:15">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">BlockDriver</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">drv</name> <init pos:start="9:22" pos:end="9:30">= <expr pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:22">sector_num</name> <init pos:start="11:24" pos:end="11:51">= <expr pos:start="11:26" pos:end="11:51"><name pos:start="11:26" pos:end="11:31">offset</name> <operator pos:start="11:33" pos:end="11:34">&gt;&gt;</operator> <name pos:start="11:36" pos:end="11:51">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:27">nb_sectors</name> <init pos:start="13:29" pos:end="13:55">= <expr pos:start="13:31" pos:end="13:55"><name pos:start="13:31" pos:end="13:35">bytes</name> <operator pos:start="13:37" pos:end="13:38">&gt;&gt;</operator> <name pos:start="13:40" pos:end="13:55">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:51"><expr pos:start="19:5" pos:end="19:50"><call pos:start="19:5" pos:end="19:50"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:50">(<argument pos:start="19:12" pos:end="19:49"><expr pos:start="19:12" pos:end="19:49"><operator pos:start="19:12" pos:end="19:12">(</operator><name pos:start="19:13" pos:end="19:18">offset</name> <operator pos:start="19:20" pos:end="19:20">&amp;</operator> <operator pos:start="19:22" pos:end="19:22">(</operator><name pos:start="19:23" pos:end="19:38">BDRV_SECTOR_SIZE</name> <operator pos:start="19:40" pos:end="19:40">-</operator> <literal type="number" pos:start="19:42" pos:end="19:42">1</literal><operator pos:start="19:43" pos:end="19:43">)</operator><operator pos:start="19:44" pos:end="19:44">)</operator> <operator pos:start="19:46" pos:end="19:47">==</operator> <literal type="number" pos:start="19:49" pos:end="19:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:50"><expr pos:start="21:5" pos:end="21:49"><call pos:start="21:5" pos:end="21:49"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:49">(<argument pos:start="21:12" pos:end="21:48"><expr pos:start="21:12" pos:end="21:48"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:17">bytes</name> <operator pos:start="21:19" pos:end="21:19">&amp;</operator> <operator pos:start="21:21" pos:end="21:21">(</operator><name pos:start="21:22" pos:end="21:37">BDRV_SECTOR_SIZE</name> <operator pos:start="21:39" pos:end="21:39">-</operator> <literal type="number" pos:start="21:41" pos:end="21:41">1</literal><operator pos:start="21:42" pos:end="21:42">)</operator><operator pos:start="21:43" pos:end="21:43">)</operator> <operator pos:start="21:45" pos:end="21:46">==</operator> <literal type="number" pos:start="21:48" pos:end="21:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:68"><expr pos:start="23:5" pos:end="23:67"><call pos:start="23:5" pos:end="23:67"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:67">(<argument pos:start="23:12" pos:end="23:66"><expr pos:start="23:12" pos:end="23:66"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:17">bytes</name> <operator pos:start="23:19" pos:end="23:20">&gt;&gt;</operator> <name pos:start="23:22" pos:end="23:37">BDRV_SECTOR_BITS</name><operator pos:start="23:38" pos:end="23:38">)</operator> <operator pos:start="23:40" pos:end="23:41">&lt;=</operator> <name pos:start="23:43" pos:end="23:66">BDRV_REQUEST_MAX_SECTORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:34">(<expr pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:11">drv</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:33">bdrv_co_writev_flags</name></name></expr>)</condition> <block pos:start="27:36" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:47">

        <expr_stmt pos:start="29:9" pos:end="31:47"><expr pos:start="29:9" pos:end="31:46"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="31:46"><name pos:start="29:15" pos:end="29:39"><name pos:start="29:15" pos:end="29:17">drv</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:39">bdrv_co_writev_flags</name></name><argument_list pos:start="29:40" pos:end="31:46">(<argument pos:start="29:41" pos:end="29:42"><expr pos:start="29:41" pos:end="29:42"><name pos:start="29:41" pos:end="29:42">bs</name></expr></argument>, <argument pos:start="29:45" pos:end="29:54"><expr pos:start="29:45" pos:end="29:54"><name pos:start="29:45" pos:end="29:54">sector_num</name></expr></argument>, <argument pos:start="29:57" pos:end="29:66"><expr pos:start="29:57" pos:end="29:66"><name pos:start="29:57" pos:end="29:66">nb_sectors</name></expr></argument>, <argument pos:start="29:69" pos:end="29:72"><expr pos:start="29:69" pos:end="29:72"><name pos:start="29:69" pos:end="29:72">qiov</name></expr></argument>,

                                        <argument pos:start="31:41" pos:end="31:45"><expr pos:start="31:41" pos:end="31:45"><name pos:start="31:41" pos:end="31:45">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="39:5">else <block pos:start="33:12" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:68">

        <expr_stmt pos:start="35:9" pos:end="35:48"><expr pos:start="35:9" pos:end="35:47"><call pos:start="35:9" pos:end="35:47"><name pos:start="35:9" pos:end="35:14">assert</name><argument_list pos:start="35:15" pos:end="35:47">(<argument pos:start="35:16" pos:end="35:46"><expr pos:start="35:16" pos:end="35:46"><name pos:start="35:16" pos:end="35:41"><name pos:start="35:16" pos:end="35:18">drv</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:41">supported_write_flags</name></name> <operator pos:start="35:43" pos:end="35:44">==</operator> <literal type="number" pos:start="35:46" pos:end="35:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:68"><expr pos:start="37:9" pos:end="37:67"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:67"><name pos:start="37:15" pos:end="37:33"><name pos:start="37:15" pos:end="37:17">drv</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:33">bdrv_co_writev</name></name><argument_list pos:start="37:34" pos:end="37:67">(<argument pos:start="37:35" pos:end="37:36"><expr pos:start="37:35" pos:end="37:36"><name pos:start="37:35" pos:end="37:36">bs</name></expr></argument>, <argument pos:start="37:39" pos:end="37:48"><expr pos:start="37:39" pos:end="37:48"><name pos:start="37:39" pos:end="37:48">sector_num</name></expr></argument>, <argument pos:start="37:51" pos:end="37:60"><expr pos:start="37:51" pos:end="37:60"><name pos:start="37:51" pos:end="37:60">nb_sectors</name></expr></argument>, <argument pos:start="37:63" pos:end="37:66"><expr pos:start="37:63" pos:end="37:66"><name pos:start="37:63" pos:end="37:66">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="45:53">(<expr pos:start="43:9" pos:end="45:52"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:14">==</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal> <operator pos:start="43:18" pos:end="43:19">&amp;&amp;</operator> <operator pos:start="43:21" pos:end="43:21">(</operator><name pos:start="43:22" pos:end="43:26">flags</name> <operator pos:start="43:28" pos:end="43:28">&amp;</operator> <name pos:start="43:30" pos:end="43:41">BDRV_REQ_FUA</name><operator pos:start="43:42" pos:end="43:42">)</operator> <operator pos:start="43:44" pos:end="43:45">&amp;&amp;</operator>

        <operator pos:start="45:9" pos:end="45:9">!</operator><operator pos:start="45:10" pos:end="45:10">(</operator><name pos:start="45:11" pos:end="45:36"><name pos:start="45:11" pos:end="45:13">drv</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:36">supported_write_flags</name></name> <operator pos:start="45:38" pos:end="45:38">&amp;</operator> <name pos:start="45:40" pos:end="45:51">BDRV_REQ_FUA</name><operator pos:start="45:52" pos:end="45:52">)</operator></expr>)</condition>

    <block pos:start="47:5" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:32">

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:31"><name pos:start="49:15" pos:end="49:27">bdrv_co_flush</name><argument_list pos:start="49:28" pos:end="49:31">(<argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><name pos:start="49:29" pos:end="49:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="55:5" pos:end="55:15">return <expr pos:start="55:12" pos:end="55:14"><name pos:start="55:12" pos:end="55:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
