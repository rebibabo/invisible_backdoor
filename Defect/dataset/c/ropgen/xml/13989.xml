<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13989.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">sdp_parse_fmtp_config_h264</name><parameter_list pos:start="1:38" pos:end="5:62">(<parameter pos:start="1:39" pos:end="1:55"><decl pos:start="1:39" pos:end="1:55"><type pos:start="1:39" pos:end="1:55"><name pos:start="1:39" pos:end="1:46">AVStream</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type> <name pos:start="1:50" pos:end="1:55">stream</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:64"><decl pos:start="3:39" pos:end="3:64"><type pos:start="3:39" pos:end="3:64"><name pos:start="3:39" pos:end="3:52">PayloadContext</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type> <name pos:start="3:56" pos:end="3:64">h264_data</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:48"><decl pos:start="5:39" pos:end="5:48"><type pos:start="5:39" pos:end="5:48"><name pos:start="5:39" pos:end="5:42">char</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:48">attr</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:61"><decl pos:start="5:51" pos:end="5:61"><type pos:start="5:51" pos:end="5:61"><name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:61">value</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="187:1">{<block_content pos:start="9:5" pos:end="185:13">

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVCodecContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">codec</name> <init pos:start="9:27" pos:end="9:41">= <expr pos:start="9:29" pos:end="9:41"><name pos:start="9:29" pos:end="9:41"><name pos:start="9:29" pos:end="9:34">stream</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:41">codec</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:45"><expr pos:start="11:5" pos:end="11:44"><call pos:start="11:5" pos:end="11:44"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:44">(<argument pos:start="11:12" pos:end="11:43"><expr pos:start="11:12" pos:end="11:43"><name pos:start="11:12" pos:end="11:26"><name pos:start="11:12" pos:end="11:16">codec</name><operator pos:start="11:17" pos:end="11:18">-&gt;</operator><name pos:start="11:19" pos:end="11:26">codec_id</name></name> <operator pos:start="11:28" pos:end="11:29">==</operator> <name pos:start="11:31" pos:end="11:43">CODEC_ID_H264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><call pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:29">(<argument pos:start="13:12" pos:end="13:28"><expr pos:start="13:12" pos:end="13:28"><name pos:start="13:12" pos:end="13:20">h264_data</name> <operator pos:start="13:22" pos:end="13:23">!=</operator> <name pos:start="13:25" pos:end="13:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="183:5"><if pos:start="17:5" pos:end="41:5">if <condition pos:start="17:8" pos:end="17:44">(<expr pos:start="17:9" pos:end="17:43"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:43"><name pos:start="17:10" pos:end="17:15">strcmp</name><argument_list pos:start="17:16" pos:end="17:43">(<argument pos:start="17:17" pos:end="17:20"><expr pos:start="17:17" pos:end="17:20"><name pos:start="17:17" pos:end="17:20">attr</name></expr></argument>, <argument pos:start="17:23" pos:end="17:42"><expr pos:start="17:23" pos:end="17:42"><literal type="string" pos:start="17:23" pos:end="17:42">"packetization-mode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:46" pos:end="41:5">{<block_content pos:start="19:9" pos:end="39:65">

        <expr_stmt pos:start="19:9" pos:end="19:81"><expr pos:start="19:9" pos:end="19:80"><call pos:start="19:9" pos:end="19:80"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:80">(<argument pos:start="19:16" pos:end="19:20"><expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">codec</name></expr></argument>, <argument pos:start="19:23" pos:end="19:34"><expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="19:37" pos:end="19:66"><expr pos:start="19:37" pos:end="19:66"><literal type="string" pos:start="19:37" pos:end="19:66">"RTP Packetization Mode: %d\n"</literal></expr></argument>, <argument pos:start="19:69" pos:end="19:79"><expr pos:start="19:69" pos:end="19:79"><call pos:start="19:69" pos:end="19:79"><name pos:start="19:69" pos:end="19:72">atoi</name><argument_list pos:start="19:73" pos:end="19:79">(<argument pos:start="19:74" pos:end="19:78"><expr pos:start="19:74" pos:end="19:78"><name pos:start="19:74" pos:end="19:78">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:52"><expr pos:start="21:9" pos:end="21:51"><name pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:17">h264_data</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:37">packetization_mode</name></name> <operator pos:start="21:39" pos:end="21:39">=</operator> <call pos:start="21:41" pos:end="21:51"><name pos:start="21:41" pos:end="21:44">atoi</name><argument_list pos:start="21:45" pos:end="21:51">(<argument pos:start="21:46" pos:end="21:50"><expr pos:start="21:46" pos:end="21:50"><name pos:start="21:46" pos:end="21:50">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="23:9" pos:end="33:11">/*

           Packetization Mode:

           0 or not present: Single NAL mode (Only nals from 1-23 are allowed)

           1: Non-interleaved Mode: 1-23, 24 (STAP-A), 28 (FU-A) are allowed.

           2: Interleaved Mode: 25 (STAP-B), 26 (MTAP16), 27 (MTAP24), 28 (FU-A), and 29 (FU-B) are allowed.

         */</comment>

        <if_stmt pos:start="35:9" pos:end="39:65"><if pos:start="35:9" pos:end="39:65">if <condition pos:start="35:12" pos:end="35:46">(<expr pos:start="35:13" pos:end="35:45"><name pos:start="35:13" pos:end="35:41"><name pos:start="35:13" pos:end="35:21">h264_data</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:41">packetization_mode</name></name> <operator pos:start="35:43" pos:end="35:43">&gt;</operator> <literal type="number" pos:start="35:45" pos:end="35:45">1</literal></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="39:65"><block_content pos:start="37:13" pos:end="39:65">

            <expr_stmt pos:start="37:13" pos:end="39:65"><expr pos:start="37:13" pos:end="39:64"><call pos:start="37:13" pos:end="39:64"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="39:64">(<argument pos:start="37:20" pos:end="37:24"><expr pos:start="37:20" pos:end="37:24"><name pos:start="37:20" pos:end="37:24">codec</name></expr></argument>, <argument pos:start="37:27" pos:end="37:38"><expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="39:20" pos:end="39:63"><expr pos:start="39:20" pos:end="39:63"><literal type="string" pos:start="39:20" pos:end="39:63">"Interleaved RTP mode is not supported yet."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="87:5">else if <condition pos:start="41:15" pos:end="41:49">(<expr pos:start="41:16" pos:end="41:48"><operator pos:start="41:16" pos:end="41:16">!</operator><call pos:start="41:17" pos:end="41:48"><name pos:start="41:17" pos:end="41:22">strcmp</name><argument_list pos:start="41:23" pos:end="41:48">(<argument pos:start="41:24" pos:end="41:27"><expr pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:27">attr</name></expr></argument>, <argument pos:start="41:30" pos:end="41:47"><expr pos:start="41:30" pos:end="41:47"><literal type="string" pos:start="41:30" pos:end="41:47">"profile-level-id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:51" pos:end="87:5">{<block_content pos:start="43:9" pos:end="85:9">

        <if_stmt pos:start="43:9" pos:end="85:9"><if pos:start="43:9" pos:end="85:9">if <condition pos:start="43:12" pos:end="43:31">(<expr pos:start="43:13" pos:end="43:30"><call pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:18">strlen</name><argument_list pos:start="43:19" pos:end="43:25">(<argument pos:start="43:20" pos:end="43:24"><expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">value</name></expr></argument>)</argument_list></call> <operator pos:start="43:27" pos:end="43:28">==</operator> <literal type="number" pos:start="43:30" pos:end="43:30">6</literal></expr>)</condition> <block pos:start="43:33" pos:end="85:9">{<block_content pos:start="45:13" pos:end="83:45">

            <decl_stmt pos:start="45:13" pos:end="45:27"><decl pos:start="45:13" pos:end="45:26"><type pos:start="45:13" pos:end="45:16"><name pos:start="45:13" pos:end="45:16">char</name></type> <name pos:start="45:18" pos:end="45:26"><name pos:start="45:18" pos:end="45:23">buffer</name><index pos:start="45:24" pos:end="45:26">[<expr pos:start="45:25" pos:end="45:25"><literal type="number" pos:start="45:25" pos:end="45:25">3</literal></expr>]</index></name></decl>;</decl_stmt>

            <comment type="line" pos:start="47:13" pos:end="47:44">// 6 characters=3 bytes, in hex.</comment>

            <decl_stmt pos:start="49:13" pos:end="49:32"><decl pos:start="49:13" pos:end="49:31"><type pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:19">uint8_t</name></type> <name pos:start="49:21" pos:end="49:31">profile_idc</name></decl>;</decl_stmt>

            <decl_stmt pos:start="51:13" pos:end="51:32"><decl pos:start="51:13" pos:end="51:31"><type pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:19">uint8_t</name></type> <name pos:start="51:21" pos:end="51:31">profile_iop</name></decl>;</decl_stmt>

            <decl_stmt pos:start="53:13" pos:end="53:30"><decl pos:start="53:13" pos:end="53:29"><type pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:19">uint8_t</name></type> <name pos:start="53:21" pos:end="53:29">level_idc</name></decl>;</decl_stmt>



            <expr_stmt pos:start="57:13" pos:end="57:33"><expr pos:start="57:13" pos:end="57:32"><name pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:18">buffer</name><index pos:start="57:19" pos:end="57:21">[<expr pos:start="57:20" pos:end="57:20"><literal type="number" pos:start="57:20" pos:end="57:20">0</literal></expr>]</index></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:32"><name pos:start="57:25" pos:end="57:29">value</name><index pos:start="57:30" pos:end="57:32">[<expr pos:start="57:31" pos:end="57:31"><literal type="number" pos:start="57:31" pos:end="57:31">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt pos:start="57:35" pos:end="57:55"><expr pos:start="57:35" pos:end="57:54"><name pos:start="57:35" pos:end="57:43"><name pos:start="57:35" pos:end="57:40">buffer</name><index pos:start="57:41" pos:end="57:43">[<expr pos:start="57:42" pos:end="57:42"><literal type="number" pos:start="57:42" pos:end="57:42">1</literal></expr>]</index></name> <operator pos:start="57:45" pos:end="57:45">=</operator> <name pos:start="57:47" pos:end="57:54"><name pos:start="57:47" pos:end="57:51">value</name><index pos:start="57:52" pos:end="57:54">[<expr pos:start="57:53" pos:end="57:53"><literal type="number" pos:start="57:53" pos:end="57:53">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt pos:start="57:57" pos:end="57:73"><expr pos:start="57:57" pos:end="57:72"><name pos:start="57:57" pos:end="57:65"><name pos:start="57:57" pos:end="57:62">buffer</name><index pos:start="57:63" pos:end="57:65">[<expr pos:start="57:64" pos:end="57:64"><literal type="number" pos:start="57:64" pos:end="57:64">2</literal></expr>]</index></name> <operator pos:start="57:67" pos:end="57:67">=</operator> <literal type="char" pos:start="57:69" pos:end="57:72">'\0'</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:51"><expr pos:start="59:13" pos:end="59:50"><name pos:start="59:13" pos:end="59:23">profile_idc</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <call pos:start="59:27" pos:end="59:50"><name pos:start="59:27" pos:end="59:32">strtol</name><argument_list pos:start="59:33" pos:end="59:50">(<argument pos:start="59:34" pos:end="59:39"><expr pos:start="59:34" pos:end="59:39"><name pos:start="59:34" pos:end="59:39">buffer</name></expr></argument>, <argument pos:start="59:42" pos:end="59:45"><expr pos:start="59:42" pos:end="59:45"><name pos:start="59:42" pos:end="59:45">NULL</name></expr></argument>, <argument pos:start="59:48" pos:end="59:49"><expr pos:start="59:48" pos:end="59:49"><literal type="number" pos:start="59:48" pos:end="59:49">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:33"><expr pos:start="61:13" pos:end="61:32"><name pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:18">buffer</name><index pos:start="61:19" pos:end="61:21">[<expr pos:start="61:20" pos:end="61:20"><literal type="number" pos:start="61:20" pos:end="61:20">0</literal></expr>]</index></name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:32"><name pos:start="61:25" pos:end="61:29">value</name><index pos:start="61:30" pos:end="61:32">[<expr pos:start="61:31" pos:end="61:31"><literal type="number" pos:start="61:31" pos:end="61:31">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt pos:start="61:35" pos:end="61:55"><expr pos:start="61:35" pos:end="61:54"><name pos:start="61:35" pos:end="61:43"><name pos:start="61:35" pos:end="61:40">buffer</name><index pos:start="61:41" pos:end="61:43">[<expr pos:start="61:42" pos:end="61:42"><literal type="number" pos:start="61:42" pos:end="61:42">1</literal></expr>]</index></name> <operator pos:start="61:45" pos:end="61:45">=</operator> <name pos:start="61:47" pos:end="61:54"><name pos:start="61:47" pos:end="61:51">value</name><index pos:start="61:52" pos:end="61:54">[<expr pos:start="61:53" pos:end="61:53"><literal type="number" pos:start="61:53" pos:end="61:53">3</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:51"><expr pos:start="63:13" pos:end="63:50"><name pos:start="63:13" pos:end="63:23">profile_iop</name> <operator pos:start="63:25" pos:end="63:25">=</operator> <call pos:start="63:27" pos:end="63:50"><name pos:start="63:27" pos:end="63:32">strtol</name><argument_list pos:start="63:33" pos:end="63:50">(<argument pos:start="63:34" pos:end="63:39"><expr pos:start="63:34" pos:end="63:39"><name pos:start="63:34" pos:end="63:39">buffer</name></expr></argument>, <argument pos:start="63:42" pos:end="63:45"><expr pos:start="63:42" pos:end="63:45"><name pos:start="63:42" pos:end="63:45">NULL</name></expr></argument>, <argument pos:start="63:48" pos:end="63:49"><expr pos:start="63:48" pos:end="63:49"><literal type="number" pos:start="63:48" pos:end="63:49">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:18">buffer</name><index pos:start="65:19" pos:end="65:21">[<expr pos:start="65:20" pos:end="65:20"><literal type="number" pos:start="65:20" pos:end="65:20">0</literal></expr>]</index></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <name pos:start="65:25" pos:end="65:32"><name pos:start="65:25" pos:end="65:29">value</name><index pos:start="65:30" pos:end="65:32">[<expr pos:start="65:31" pos:end="65:31"><literal type="number" pos:start="65:31" pos:end="65:31">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt pos:start="65:35" pos:end="65:55"><expr pos:start="65:35" pos:end="65:54"><name pos:start="65:35" pos:end="65:43"><name pos:start="65:35" pos:end="65:40">buffer</name><index pos:start="65:41" pos:end="65:43">[<expr pos:start="65:42" pos:end="65:42"><literal type="number" pos:start="65:42" pos:end="65:42">1</literal></expr>]</index></name> <operator pos:start="65:45" pos:end="65:45">=</operator> <name pos:start="65:47" pos:end="65:54"><name pos:start="65:47" pos:end="65:51">value</name><index pos:start="65:52" pos:end="65:54">[<expr pos:start="65:53" pos:end="65:53"><literal type="number" pos:start="65:53" pos:end="65:53">5</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:49"><expr pos:start="67:13" pos:end="67:48"><name pos:start="67:13" pos:end="67:21">level_idc</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <call pos:start="67:25" pos:end="67:48"><name pos:start="67:25" pos:end="67:30">strtol</name><argument_list pos:start="67:31" pos:end="67:48">(<argument pos:start="67:32" pos:end="67:37"><expr pos:start="67:32" pos:end="67:37"><name pos:start="67:32" pos:end="67:37">buffer</name></expr></argument>, <argument pos:start="67:40" pos:end="67:43"><expr pos:start="67:40" pos:end="67:43"><name pos:start="67:40" pos:end="67:43">NULL</name></expr></argument>, <argument pos:start="67:46" pos:end="67:47"><expr pos:start="67:46" pos:end="67:47"><literal type="number" pos:start="67:46" pos:end="67:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="line" pos:start="71:13" pos:end="71:36">// set the parameters...</comment>

            <expr_stmt pos:start="73:13" pos:end="77:56"><expr pos:start="73:13" pos:end="77:55"><call pos:start="73:13" pos:end="77:55"><name pos:start="73:13" pos:end="73:18">av_log</name><argument_list pos:start="73:19" pos:end="77:55">(<argument pos:start="73:20" pos:end="73:24"><expr pos:start="73:20" pos:end="73:24"><name pos:start="73:20" pos:end="73:24">codec</name></expr></argument>, <argument pos:start="73:27" pos:end="73:38"><expr pos:start="73:27" pos:end="73:38"><name pos:start="73:27" pos:end="73:38">AV_LOG_DEBUG</name></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:68"><expr pos:start="75:20" pos:end="75:68"><literal type="string" pos:start="75:20" pos:end="75:68">"RTP Profile IDC: %x Profile IOP: %x Level: %x\n"</literal></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:30"><expr pos:start="77:20" pos:end="77:30"><name pos:start="77:20" pos:end="77:30">profile_idc</name></expr></argument>, <argument pos:start="77:33" pos:end="77:43"><expr pos:start="77:33" pos:end="77:43"><name pos:start="77:33" pos:end="77:43">profile_iop</name></expr></argument>, <argument pos:start="77:46" pos:end="77:54"><expr pos:start="77:46" pos:end="77:54"><name pos:start="77:46" pos:end="77:54">level_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:49"><expr pos:start="79:13" pos:end="79:48"><name pos:start="79:13" pos:end="79:34"><name pos:start="79:13" pos:end="79:21">h264_data</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:34">profile_idc</name></name> <operator pos:start="79:36" pos:end="79:36">=</operator> <name pos:start="79:38" pos:end="79:48">profile_idc</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:49"><expr pos:start="81:13" pos:end="81:48"><name pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:21">h264_data</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:34">profile_iop</name></name> <operator pos:start="81:36" pos:end="81:36">=</operator> <name pos:start="81:38" pos:end="81:48">profile_iop</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:45"><expr pos:start="83:13" pos:end="83:44"><name pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:21">h264_data</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:32">level_idc</name></name> <operator pos:start="83:34" pos:end="83:34">=</operator> <name pos:start="83:36" pos:end="83:44">level_idc</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="87:7" pos:end="183:5">else  if <condition pos:start="87:16" pos:end="87:54">(<expr pos:start="87:17" pos:end="87:53"><operator pos:start="87:17" pos:end="87:17">!</operator><call pos:start="87:18" pos:end="87:53"><name pos:start="87:18" pos:end="87:23">strcmp</name><argument_list pos:start="87:24" pos:end="87:53">(<argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><name pos:start="87:25" pos:end="87:28">attr</name></expr></argument>, <argument pos:start="87:31" pos:end="87:52"><expr pos:start="87:31" pos:end="87:52"><literal type="string" pos:start="87:31" pos:end="87:52">"sprop-parameter-sets"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:56" pos:end="183:5">{<block_content pos:start="89:9" pos:end="181:112">

        <decl_stmt pos:start="89:9" pos:end="89:46"><decl pos:start="89:9" pos:end="89:45"><type pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:15">uint8_t</name></type> <name pos:start="89:17" pos:end="89:32"><name pos:start="89:17" pos:end="89:30">start_sequence</name><index pos:start="89:31" pos:end="89:32">[]</index></name><init pos:start="89:33" pos:end="89:45">= <expr pos:start="89:35" pos:end="89:45"><block pos:start="89:35" pos:end="89:45">{ <expr pos:start="89:37" pos:end="89:37"><literal type="number" pos:start="89:37" pos:end="89:37">0</literal></expr>, <expr pos:start="89:40" pos:end="89:40"><literal type="number" pos:start="89:40" pos:end="89:40">0</literal></expr>, <expr pos:start="89:43" pos:end="89:43"><literal type="number" pos:start="89:43" pos:end="89:43">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:29"><name pos:start="91:9" pos:end="91:13">codec</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:29">extradata_size</name></name><operator pos:start="91:30" pos:end="91:30">=</operator> <literal type="number" pos:start="91:32" pos:end="91:32">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:31"><expr pos:start="93:9" pos:end="93:30"><name pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:13">codec</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:24">extradata</name></name><operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:30">NULL</name></expr>;</expr_stmt>



        <while pos:start="97:9" pos:end="179:9">while <condition pos:start="97:15" pos:end="97:22">(<expr pos:start="97:16" pos:end="97:21"><operator pos:start="97:16" pos:end="97:16">*</operator><name pos:start="97:17" pos:end="97:21">value</name></expr>)</condition> <block pos:start="97:24" pos:end="179:9">{<block_content pos:start="99:13" pos:end="177:13">

            <decl_stmt pos:start="99:13" pos:end="99:36"><decl pos:start="99:13" pos:end="99:35"><type pos:start="99:13" pos:end="99:16"><name pos:start="99:13" pos:end="99:16">char</name></type> <name pos:start="99:18" pos:end="99:35"><name pos:start="99:18" pos:end="99:29">base64packet</name><index pos:start="99:30" pos:end="99:35">[<expr pos:start="99:31" pos:end="99:34"><literal type="number" pos:start="99:31" pos:end="99:34">1024</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="101:13" pos:end="101:41"><decl pos:start="101:13" pos:end="101:40"><type pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:19">uint8_t</name></type> <name pos:start="101:21" pos:end="101:40"><name pos:start="101:21" pos:end="101:34">decoded_packet</name><index pos:start="101:35" pos:end="101:40">[<expr pos:start="101:36" pos:end="101:39"><literal type="number" pos:start="101:36" pos:end="101:39">1024</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="103:13" pos:end="103:33"><decl pos:start="103:13" pos:end="103:32"><type pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:20">uint32_t</name></type> <name pos:start="103:22" pos:end="103:32">packet_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:37"><decl pos:start="105:13" pos:end="105:36"><type pos:start="105:13" pos:end="105:18"><name pos:start="105:13" pos:end="105:16">char</name> <modifier pos:start="105:18" pos:end="105:18">*</modifier></type><name pos:start="105:19" pos:end="105:21">dst</name> <init pos:start="105:23" pos:end="105:36">= <expr pos:start="105:25" pos:end="105:36"><name pos:start="105:25" pos:end="105:36">base64packet</name></expr></init></decl>;</decl_stmt>



            <while pos:start="109:13" pos:end="115:13">while <condition pos:start="109:19" pos:end="111:70">(<expr pos:start="109:20" pos:end="111:69"><operator pos:start="109:20" pos:end="109:20">*</operator><name pos:start="109:21" pos:end="109:25">value</name> <operator pos:start="109:27" pos:end="109:28">&amp;&amp;</operator> <operator pos:start="109:30" pos:end="109:30">*</operator><name pos:start="109:31" pos:end="109:35">value</name> <operator pos:start="109:37" pos:end="109:38">!=</operator> <literal type="char" pos:start="109:40" pos:end="109:42">','</literal>

                   <operator pos:start="111:20" pos:end="111:21">&amp;&amp;</operator> <operator pos:start="111:23" pos:end="111:23">(</operator><name pos:start="111:24" pos:end="111:26">dst</name> <operator pos:start="111:28" pos:end="111:28">-</operator> <name pos:start="111:30" pos:end="111:41">base64packet</name><operator pos:start="111:42" pos:end="111:42">)</operator> <operator pos:start="111:44" pos:end="111:44">&lt;</operator> <sizeof pos:start="111:46" pos:end="111:65">sizeof<argument_list pos:start="111:52" pos:end="111:65">(<argument pos:start="111:53" pos:end="111:64"><expr pos:start="111:53" pos:end="111:64"><name pos:start="111:53" pos:end="111:64">base64packet</name></expr></argument>)</argument_list></sizeof> <operator pos:start="111:67" pos:end="111:67">-</operator> <literal type="number" pos:start="111:69" pos:end="111:69">1</literal></expr>)</condition> <block pos:start="111:72" pos:end="115:13">{<block_content pos:start="113:17" pos:end="113:34">

                <expr_stmt pos:start="113:17" pos:end="113:34"><expr pos:start="113:17" pos:end="113:33"><operator pos:start="113:17" pos:end="113:17">*</operator><name pos:start="113:18" pos:end="113:20">dst</name><operator pos:start="113:21" pos:end="113:22">++</operator> <operator pos:start="113:24" pos:end="113:24">=</operator> <operator pos:start="113:26" pos:end="113:26">*</operator><name pos:start="113:27" pos:end="113:31">value</name><operator pos:start="113:32" pos:end="113:33">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="117:13" pos:end="117:26"><expr pos:start="117:13" pos:end="117:25"><operator pos:start="117:13" pos:end="117:13">*</operator><name pos:start="117:14" pos:end="117:16">dst</name><operator pos:start="117:17" pos:end="117:18">++</operator> <operator pos:start="117:20" pos:end="117:20">=</operator> <literal type="char" pos:start="117:22" pos:end="117:25">'\0'</literal></expr>;</expr_stmt>



            <if_stmt pos:start="121:13" pos:end="123:24"><if pos:start="121:13" pos:end="123:24">if <condition pos:start="121:16" pos:end="121:30">(<expr pos:start="121:17" pos:end="121:29"><operator pos:start="121:17" pos:end="121:17">*</operator><name pos:start="121:18" pos:end="121:22">value</name> <operator pos:start="121:24" pos:end="121:25">==</operator> <literal type="char" pos:start="121:27" pos:end="121:29">','</literal></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:24"><block_content pos:start="123:17" pos:end="123:24">

                <expr_stmt pos:start="123:17" pos:end="123:24"><expr pos:start="123:17" pos:end="123:23"><name pos:start="123:17" pos:end="123:21">value</name><operator pos:start="123:22" pos:end="123:23">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="127:13" pos:end="127:96"><expr pos:start="127:13" pos:end="127:95"><name pos:start="127:13" pos:end="127:23">packet_size</name><operator pos:start="127:24" pos:end="127:24">=</operator> <call pos:start="127:26" pos:end="127:95"><name pos:start="127:26" pos:end="127:41">av_base64_decode</name><argument_list pos:start="127:42" pos:end="127:95">(<argument pos:start="127:43" pos:end="127:56"><expr pos:start="127:43" pos:end="127:56"><name pos:start="127:43" pos:end="127:56">decoded_packet</name></expr></argument>, <argument pos:start="127:59" pos:end="127:70"><expr pos:start="127:59" pos:end="127:70"><name pos:start="127:59" pos:end="127:70">base64packet</name></expr></argument>, <argument pos:start="127:73" pos:end="127:94"><expr pos:start="127:73" pos:end="127:94"><sizeof pos:start="127:73" pos:end="127:94">sizeof<argument_list pos:start="127:79" pos:end="127:94">(<argument pos:start="127:80" pos:end="127:93"><expr pos:start="127:80" pos:end="127:93"><name pos:start="127:80" pos:end="127:93">decoded_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="177:13"><if pos:start="129:13" pos:end="177:13">if <condition pos:start="129:16" pos:end="129:28">(<expr pos:start="129:17" pos:end="129:27"><name pos:start="129:17" pos:end="129:27">packet_size</name></expr>)</condition> <block pos:start="129:30" pos:end="177:13">{<block_content pos:start="131:17" pos:end="175:17">

                <decl_stmt pos:start="131:17" pos:end="135:71"><decl pos:start="131:17" pos:end="135:70"><type pos:start="131:17" pos:end="131:25"><name pos:start="131:17" pos:end="131:23">uint8_t</name> <modifier pos:start="131:25" pos:end="131:25">*</modifier></type><name pos:start="131:26" pos:end="131:29">dest</name> <init pos:start="131:31" pos:end="135:70">= <expr pos:start="131:33" pos:end="135:70"><call pos:start="131:33" pos:end="135:70"><name pos:start="131:33" pos:end="131:41">av_malloc</name><argument_list pos:start="131:42" pos:end="135:70">(<argument pos:start="131:43" pos:end="135:69"><expr pos:start="131:43" pos:end="135:69"><name pos:start="131:43" pos:end="131:53">packet_size</name> <operator pos:start="131:55" pos:end="131:55">+</operator> <sizeof pos:start="131:57" pos:end="131:78">sizeof<argument_list pos:start="131:63" pos:end="131:78">(<argument pos:start="131:64" pos:end="131:77"><expr pos:start="131:64" pos:end="131:77"><name pos:start="131:64" pos:end="131:77">start_sequence</name></expr></argument>)</argument_list></sizeof> <operator pos:start="131:80" pos:end="131:80">+</operator>

                                         <name pos:start="133:42" pos:end="133:62"><name pos:start="133:42" pos:end="133:46">codec</name><operator pos:start="133:47" pos:end="133:48">-&gt;</operator><name pos:start="133:49" pos:end="133:62">extradata_size</name></name> <operator pos:start="133:64" pos:end="133:64">+</operator>

                                         <name pos:start="135:42" pos:end="135:69">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="137:17" pos:end="175:17"><if pos:start="137:17" pos:end="169:17">if<condition pos:start="137:19" pos:end="137:24">(<expr pos:start="137:20" pos:end="137:23"><name pos:start="137:20" pos:end="137:23">dest</name></expr>)</condition>

                <block pos:start="139:17" pos:end="169:17">{<block_content pos:start="141:21" pos:end="167:79">

                    <if_stmt pos:start="141:21" pos:end="151:21"><if pos:start="141:21" pos:end="151:21">if<condition pos:start="141:23" pos:end="141:45">(<expr pos:start="141:24" pos:end="141:44"><name pos:start="141:24" pos:end="141:44"><name pos:start="141:24" pos:end="141:28">codec</name><operator pos:start="141:29" pos:end="141:30">-&gt;</operator><name pos:start="141:31" pos:end="141:44">extradata_size</name></name></expr>)</condition>

                    <block pos:start="143:21" pos:end="151:21">{<block_content pos:start="147:25" pos:end="149:50">

                        <comment type="line" pos:start="145:25" pos:end="145:38">// av_realloc?</comment>

                        <expr_stmt pos:start="147:25" pos:end="147:78"><expr pos:start="147:25" pos:end="147:77"><call pos:start="147:25" pos:end="147:77"><name pos:start="147:25" pos:end="147:30">memcpy</name><argument_list pos:start="147:31" pos:end="147:77">(<argument pos:start="147:32" pos:end="147:35"><expr pos:start="147:32" pos:end="147:35"><name pos:start="147:32" pos:end="147:35">dest</name></expr></argument>, <argument pos:start="147:38" pos:end="147:53"><expr pos:start="147:38" pos:end="147:53"><name pos:start="147:38" pos:end="147:53"><name pos:start="147:38" pos:end="147:42">codec</name><operator pos:start="147:43" pos:end="147:44">-&gt;</operator><name pos:start="147:45" pos:end="147:53">extradata</name></name></expr></argument>, <argument pos:start="147:56" pos:end="147:76"><expr pos:start="147:56" pos:end="147:76"><name pos:start="147:56" pos:end="147:76"><name pos:start="147:56" pos:end="147:60">codec</name><operator pos:start="147:61" pos:end="147:62">-&gt;</operator><name pos:start="147:63" pos:end="147:76">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="149:25" pos:end="149:50"><expr pos:start="149:25" pos:end="149:49"><call pos:start="149:25" pos:end="149:49"><name pos:start="149:25" pos:end="149:31">av_free</name><argument_list pos:start="149:32" pos:end="149:49">(<argument pos:start="149:33" pos:end="149:48"><expr pos:start="149:33" pos:end="149:48"><name pos:start="149:33" pos:end="149:48"><name pos:start="149:33" pos:end="149:37">codec</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:48">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="155:21" pos:end="155:95"><expr pos:start="155:21" pos:end="155:94"><call pos:start="155:21" pos:end="155:94"><name pos:start="155:21" pos:end="155:26">memcpy</name><argument_list pos:start="155:27" pos:end="155:94">(<argument pos:start="155:28" pos:end="155:53"><expr pos:start="155:28" pos:end="155:53"><name pos:start="155:28" pos:end="155:31">dest</name><operator pos:start="155:32" pos:end="155:32">+</operator><name pos:start="155:33" pos:end="155:53"><name pos:start="155:33" pos:end="155:37">codec</name><operator pos:start="155:38" pos:end="155:39">-&gt;</operator><name pos:start="155:40" pos:end="155:53">extradata_size</name></name></expr></argument>, <argument pos:start="155:56" pos:end="155:69"><expr pos:start="155:56" pos:end="155:69"><name pos:start="155:56" pos:end="155:69">start_sequence</name></expr></argument>, <argument pos:start="155:72" pos:end="155:93"><expr pos:start="155:72" pos:end="155:93"><sizeof pos:start="155:72" pos:end="155:93">sizeof<argument_list pos:start="155:78" pos:end="155:93">(<argument pos:start="155:79" pos:end="155:92"><expr pos:start="155:79" pos:end="155:92"><name pos:start="155:79" pos:end="155:92">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:107"><expr pos:start="157:21" pos:end="157:106"><call pos:start="157:21" pos:end="157:106"><name pos:start="157:21" pos:end="157:26">memcpy</name><argument_list pos:start="157:27" pos:end="157:106">(<argument pos:start="157:28" pos:end="157:76"><expr pos:start="157:28" pos:end="157:76"><name pos:start="157:28" pos:end="157:31">dest</name><operator pos:start="157:32" pos:end="157:32">+</operator><name pos:start="157:33" pos:end="157:53"><name pos:start="157:33" pos:end="157:37">codec</name><operator pos:start="157:38" pos:end="157:39">-&gt;</operator><name pos:start="157:40" pos:end="157:53">extradata_size</name></name><operator pos:start="157:54" pos:end="157:54">+</operator><sizeof pos:start="157:55" pos:end="157:76">sizeof<argument_list pos:start="157:61" pos:end="157:76">(<argument pos:start="157:62" pos:end="157:75"><expr pos:start="157:62" pos:end="157:75"><name pos:start="157:62" pos:end="157:75">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="157:79" pos:end="157:92"><expr pos:start="157:79" pos:end="157:92"><name pos:start="157:79" pos:end="157:92">decoded_packet</name></expr></argument>, <argument pos:start="157:95" pos:end="157:105"><expr pos:start="157:95" pos:end="157:105"><name pos:start="157:95" pos:end="157:105">packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="159:21" pos:end="161:73"><expr pos:start="159:21" pos:end="161:72"><call pos:start="159:21" pos:end="161:72"><name pos:start="159:21" pos:end="159:26">memset</name><argument_list pos:start="159:27" pos:end="161:72">(<argument pos:start="159:28" pos:end="161:38"><expr pos:start="159:28" pos:end="161:38"><name pos:start="159:28" pos:end="159:31">dest</name><operator pos:start="159:32" pos:end="159:32">+</operator><name pos:start="159:33" pos:end="159:53"><name pos:start="159:33" pos:end="159:37">codec</name><operator pos:start="159:38" pos:end="159:39">-&gt;</operator><name pos:start="159:40" pos:end="159:53">extradata_size</name></name><operator pos:start="159:54" pos:end="159:54">+</operator><sizeof pos:start="159:55" pos:end="159:76">sizeof<argument_list pos:start="159:61" pos:end="159:76">(<argument pos:start="159:62" pos:end="159:75"><expr pos:start="159:62" pos:end="159:75"><name pos:start="159:62" pos:end="159:75">start_sequence</name></expr></argument>)</argument_list></sizeof><operator pos:start="159:77" pos:end="159:77">+</operator>

                           <name pos:start="161:28" pos:end="161:38">packet_size</name></expr></argument>, <argument pos:start="161:41" pos:end="161:41"><expr pos:start="161:41" pos:end="161:41"><literal type="number" pos:start="161:41" pos:end="161:41">0</literal></expr></argument>, <argument pos:start="161:44" pos:end="161:71"><expr pos:start="161:44" pos:end="161:71"><name pos:start="161:44" pos:end="161:71">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="165:21" pos:end="165:43"><expr pos:start="165:21" pos:end="165:42"><name pos:start="165:21" pos:end="165:36"><name pos:start="165:21" pos:end="165:25">codec</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:36">extradata</name></name><operator pos:start="165:37" pos:end="165:37">=</operator> <name pos:start="165:39" pos:end="165:42">dest</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="167:21" pos:end="167:79"><expr pos:start="167:21" pos:end="167:78"><name pos:start="167:21" pos:end="167:41"><name pos:start="167:21" pos:end="167:25">codec</name><operator pos:start="167:26" pos:end="167:27">-&gt;</operator><name pos:start="167:28" pos:end="167:41">extradata_size</name></name><operator pos:start="167:42" pos:end="167:43">+=</operator> <sizeof pos:start="167:45" pos:end="167:66">sizeof<argument_list pos:start="167:51" pos:end="167:66">(<argument pos:start="167:52" pos:end="167:65"><expr pos:start="167:52" pos:end="167:65"><name pos:start="167:52" pos:end="167:65">start_sequence</name></expr></argument>)</argument_list></sizeof><operator pos:start="167:67" pos:end="167:67">+</operator><name pos:start="167:68" pos:end="167:78">packet_size</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="169:19" pos:end="175:17">else <block pos:start="169:24" pos:end="175:17">{<block_content pos:start="171:21" pos:end="173:43">

                    <expr_stmt pos:start="171:21" pos:end="171:92"><expr pos:start="171:21" pos:end="171:91"><call pos:start="171:21" pos:end="171:91"><name pos:start="171:21" pos:end="171:26">av_log</name><argument_list pos:start="171:27" pos:end="171:91">(<argument pos:start="171:28" pos:end="171:32"><expr pos:start="171:28" pos:end="171:32"><name pos:start="171:28" pos:end="171:32">codec</name></expr></argument>, <argument pos:start="171:35" pos:end="171:46"><expr pos:start="171:35" pos:end="171:46"><name pos:start="171:35" pos:end="171:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="171:49" pos:end="171:90"><expr pos:start="171:49" pos:end="171:90"><literal type="string" pos:start="171:49" pos:end="171:90">"Unable to allocate memory for extradata!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="173:21" pos:end="173:43">return <expr pos:start="173:28" pos:end="173:42"><call pos:start="173:28" pos:end="173:42"><name pos:start="173:28" pos:end="173:34">AVERROR</name><argument_list pos:start="173:35" pos:end="173:42">(<argument pos:start="173:36" pos:end="173:41"><expr pos:start="173:36" pos:end="173:41"><name pos:start="173:36" pos:end="173:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="181:9" pos:end="181:112"><expr pos:start="181:9" pos:end="181:111"><call pos:start="181:9" pos:end="181:111"><name pos:start="181:9" pos:end="181:14">av_log</name><argument_list pos:start="181:15" pos:end="181:111">(<argument pos:start="181:16" pos:end="181:20"><expr pos:start="181:16" pos:end="181:20"><name pos:start="181:16" pos:end="181:20">codec</name></expr></argument>, <argument pos:start="181:23" pos:end="181:34"><expr pos:start="181:23" pos:end="181:34"><name pos:start="181:23" pos:end="181:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="181:37" pos:end="181:69"><expr pos:start="181:37" pos:end="181:69"><literal type="string" pos:start="181:37" pos:end="181:69">"Extradata set to %p (size: %d)!"</literal></expr></argument>, <argument pos:start="181:72" pos:end="181:87"><expr pos:start="181:72" pos:end="181:87"><name pos:start="181:72" pos:end="181:87"><name pos:start="181:72" pos:end="181:76">codec</name><operator pos:start="181:77" pos:end="181:78">-&gt;</operator><name pos:start="181:79" pos:end="181:87">extradata</name></name></expr></argument>, <argument pos:start="181:90" pos:end="181:110"><expr pos:start="181:90" pos:end="181:110"><name pos:start="181:90" pos:end="181:110"><name pos:start="181:90" pos:end="181:94">codec</name><operator pos:start="181:95" pos:end="181:96">-&gt;</operator><name pos:start="181:97" pos:end="181:110">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="185:5" pos:end="185:13">return <expr pos:start="185:12" pos:end="185:12"><literal type="number" pos:start="185:12" pos:end="185:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
