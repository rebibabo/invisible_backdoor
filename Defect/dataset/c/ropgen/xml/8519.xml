<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8519.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">h264_handle_packet</name><parameter_list pos:start="1:30" pos:end="7:49">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">ctx</name></decl></parameter>,
                              <parameter pos:start="2:31" pos:end="2:50"><decl pos:start="2:31" pos:end="2:50"><type pos:start="2:31" pos:end="2:50"><name pos:start="2:31" pos:end="2:44">PayloadContext</name> <modifier pos:start="2:46" pos:end="2:46">*</modifier></type><name pos:start="2:47" pos:end="2:50">data</name></decl></parameter>,
                              <parameter pos:start="3:31" pos:end="3:42"><decl pos:start="3:31" pos:end="3:42"><type pos:start="3:31" pos:end="3:42"><name pos:start="3:31" pos:end="3:38">AVStream</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:42">st</name></decl></parameter>,
                              <parameter pos:start="4:31" pos:end="4:44"><decl pos:start="4:31" pos:end="4:44"><type pos:start="4:31" pos:end="4:44"><name pos:start="4:31" pos:end="4:38">AVPacket</name> <modifier pos:start="4:40" pos:end="4:40">*</modifier></type> <name pos:start="4:42" pos:end="4:44">pkt</name></decl></parameter>,
                              <parameter pos:start="5:31" pos:end="5:50"><decl pos:start="5:31" pos:end="5:50"><type pos:start="5:31" pos:end="5:50"><name pos:start="5:31" pos:end="5:38">uint32_t</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type> <name pos:start="5:42" pos:end="5:50">timestamp</name></decl></parameter>,
                              <parameter pos:start="6:31" pos:end="6:49"><decl pos:start="6:31" pos:end="6:49"><type pos:start="6:31" pos:end="6:49"><specifier pos:start="6:31" pos:end="6:35">const</specifier> <name pos:start="6:37" pos:end="6:43">uint8_t</name> <modifier pos:start="6:45" pos:end="6:45">*</modifier></type> <name pos:start="6:47" pos:end="6:49">buf</name></decl></parameter>,
                              <parameter pos:start="7:31" pos:end="7:37"><decl pos:start="7:31" pos:end="7:37"><type pos:start="7:31" pos:end="7:37"><name pos:start="7:31" pos:end="7:33">int</name></type> <name pos:start="7:35" pos:end="7:37">len</name></decl></parameter>, <parameter pos:start="7:40" pos:end="7:48"><decl pos:start="7:40" pos:end="7:48"><type pos:start="7:40" pos:end="7:48"><name pos:start="7:40" pos:end="7:42">int</name></type> <name pos:start="7:44" pos:end="7:48">flags</name></decl></parameter>)</parameter_list>
<block pos:start="8:1" pos:end="135:1">{<block_content pos:start="9:5" pos:end="134:18">
    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:15">nal</name> <init pos:start="9:17" pos:end="9:24">= <expr pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:21">buf</name><index pos:start="9:22" pos:end="9:24">[<expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:32"><decl pos:start="10:5" pos:end="10:31"><type pos:start="10:5" pos:end="10:11"><name pos:start="10:5" pos:end="10:11">uint8_t</name></type> <name pos:start="10:13" pos:end="10:16">type</name> <init pos:start="10:18" pos:end="10:31">= <expr pos:start="10:20" pos:end="10:31"><operator pos:start="10:20" pos:end="10:20">(</operator><name pos:start="10:21" pos:end="10:23">nal</name> <operator pos:start="10:25" pos:end="10:25">&amp;</operator> <literal type="number" pos:start="10:27" pos:end="10:30">0x1f</literal><operator pos:start="10:31" pos:end="10:31">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">result</name><init pos:start="11:15" pos:end="11:17">= <expr pos:start="11:17" pos:end="11:17"><literal type="number" pos:start="11:17" pos:end="11:17">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="14:0"><decl pos:start="12:5" pos:end="12:39"><type pos:start="12:5" pos:end="12:11"><name pos:start="12:5" pos:end="12:11">uint8_t</name></type> <name pos:start="12:13" pos:end="12:28"><name pos:start="12:13" pos:end="12:26">start_sequence</name><index pos:start="12:27" pos:end="12:28">[]</index></name><init pos:start="12:29" pos:end="12:39">= <expr pos:start="12:31" pos:end="12:39"><block pos:start="12:31" pos:end="12:39">{<expr pos:start="12:32" pos:end="12:32"><literal type="number" pos:start="12:32" pos:end="12:32">0</literal></expr>, <expr pos:start="12:35" pos:end="12:35"><literal type="number" pos:start="12:35" pos:end="12:35">0</literal></expr>, <expr pos:start="12:38" pos:end="12:38"><literal type="number" pos:start="12:38" pos:end="12:38">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:ifdef pos:start="13:1" pos:end="13:12">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:12">DEBUG</name></cpp:ifdef>
    <expr_stmt pos:start="14:5" pos:end="14:17"><expr pos:start="14:5" pos:end="14:16"><call pos:start="14:5" pos:end="14:16"><name pos:start="14:5" pos:end="14:10">assert</name><argument_list pos:start="14:11" pos:end="14:16">(<argument pos:start="14:12" pos:end="14:15"><expr pos:start="14:12" pos:end="14:15"><name pos:start="14:12" pos:end="14:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="17:0"><expr pos:start="15:5" pos:end="15:40"><call pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:40">(<argument pos:start="15:12" pos:end="15:39"><expr pos:start="15:12" pos:end="15:39"><name pos:start="15:12" pos:end="15:23"><name pos:start="15:12" pos:end="15:15">data</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:23">cookie</name></name> <operator pos:start="15:25" pos:end="15:26">==</operator> <name pos:start="15:28" pos:end="15:39">MAGIC_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="16:1" pos:end="16:6">#<cpp:directive pos:start="16:2" pos:end="16:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="17:5" pos:end="17:16"><expr pos:start="17:5" pos:end="17:15"><call pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:15">(<argument pos:start="17:12" pos:end="17:14"><expr pos:start="17:12" pos:end="17:14"><name pos:start="17:12" pos:end="17:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="19:17"><if pos:start="18:5" pos:end="19:17">if <condition pos:start="18:8" pos:end="18:32">(<expr pos:start="18:9" pos:end="18:31"><name pos:start="18:9" pos:end="18:12">type</name> <operator pos:start="18:14" pos:end="18:15">&gt;=</operator> <literal type="number" pos:start="18:17" pos:end="18:17">1</literal> <operator pos:start="18:19" pos:end="18:20">&amp;&amp;</operator> <name pos:start="18:22" pos:end="18:25">type</name> <operator pos:start="18:27" pos:end="18:28">&lt;=</operator> <literal type="number" pos:start="18:30" pos:end="18:31">23</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:17"><block_content pos:start="19:9" pos:end="19:17">
        <expr_stmt pos:start="19:9" pos:end="19:17"><expr pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:12">type</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <literal type="number" pos:start="19:16" pos:end="19:16">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>              <comment type="line" pos:start="19:32" pos:end="19:116">// simplify the case. (these are all the nal types used internally by the h264 codec)</comment>
    <switch pos:start="20:5" pos:end="133:5">switch <condition pos:start="20:12" pos:end="20:17">(<expr pos:start="20:13" pos:end="20:16"><name pos:start="20:13" pos:end="20:16">type</name></expr>)</condition> <block pos:start="20:19" pos:end="133:5">{<block_content pos:start="21:5" pos:end="132:14">
    <case pos:start="21:5" pos:end="21:11">case <expr pos:start="21:10" pos:end="21:10"><literal type="number" pos:start="21:10" pos:end="21:10">0</literal></expr>:</case>                    <comment type="line" pos:start="21:32" pos:end="21:44">// undefined;</comment>
        <expr_stmt pos:start="22:9" pos:end="22:19"><expr pos:start="22:9" pos:end="22:18"><name pos:start="22:9" pos:end="22:14">result</name><operator pos:start="22:15" pos:end="22:15">=</operator> <operator pos:start="22:17" pos:end="22:17">-</operator><literal type="number" pos:start="22:18" pos:end="22:18">1</literal></expr>;</expr_stmt>
        <break pos:start="23:9" pos:end="23:14">break;</break>
    <case pos:start="24:5" pos:end="24:11">case <expr pos:start="24:10" pos:end="24:10"><literal type="number" pos:start="24:10" pos:end="24:10">1</literal></expr>:</case>
        <expr_stmt pos:start="25:9" pos:end="25:55"><expr pos:start="25:9" pos:end="25:54"><call pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:21">av_new_packet</name><argument_list pos:start="25:22" pos:end="25:54">(<argument pos:start="25:23" pos:end="25:25"><expr pos:start="25:23" pos:end="25:25"><name pos:start="25:23" pos:end="25:25">pkt</name></expr></argument>, <argument pos:start="25:28" pos:end="25:53"><expr pos:start="25:28" pos:end="25:53"><name pos:start="25:28" pos:end="25:30">len</name><operator pos:start="25:31" pos:end="25:31">+</operator><sizeof pos:start="25:32" pos:end="25:53">sizeof<argument_list pos:start="25:38" pos:end="25:53">(<argument pos:start="25:39" pos:end="25:52"><expr pos:start="25:39" pos:end="25:52"><name pos:start="25:39" pos:end="25:52">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:66"><expr pos:start="26:9" pos:end="26:65"><call pos:start="26:9" pos:end="26:65"><name pos:start="26:9" pos:end="26:14">memcpy</name><argument_list pos:start="26:15" pos:end="26:65">(<argument pos:start="26:16" pos:end="26:24"><expr pos:start="26:16" pos:end="26:24"><name pos:start="26:16" pos:end="26:24"><name pos:start="26:16" pos:end="26:18">pkt</name><operator pos:start="26:19" pos:end="26:20">-&gt;</operator><name pos:start="26:21" pos:end="26:24">data</name></name></expr></argument>, <argument pos:start="26:27" pos:end="26:40"><expr pos:start="26:27" pos:end="26:40"><name pos:start="26:27" pos:end="26:40">start_sequence</name></expr></argument>, <argument pos:start="26:43" pos:end="26:64"><expr pos:start="26:43" pos:end="26:64"><sizeof pos:start="26:43" pos:end="26:64">sizeof<argument_list pos:start="26:49" pos:end="26:64">(<argument pos:start="26:50" pos:end="26:63"><expr pos:start="26:50" pos:end="26:63"><name pos:start="26:50" pos:end="26:63">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="29:0"><expr pos:start="27:9" pos:end="27:58"><call pos:start="27:9" pos:end="27:58"><name pos:start="27:9" pos:end="27:14">memcpy</name><argument_list pos:start="27:15" pos:end="27:58">(<argument pos:start="27:16" pos:end="27:47"><expr pos:start="27:16" pos:end="27:47"><name pos:start="27:16" pos:end="27:24"><name pos:start="27:16" pos:end="27:18">pkt</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:24">data</name></name><operator pos:start="27:25" pos:end="27:25">+</operator><sizeof pos:start="27:26" pos:end="27:47">sizeof<argument_list pos:start="27:32" pos:end="27:47">(<argument pos:start="27:33" pos:end="27:46"><expr pos:start="27:33" pos:end="27:46"><name pos:start="27:33" pos:end="27:46">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="27:50" pos:end="27:52"><expr pos:start="27:50" pos:end="27:52"><name pos:start="27:50" pos:end="27:52">buf</name></expr></argument>, <argument pos:start="27:55" pos:end="27:57"><expr pos:start="27:55" pos:end="27:57"><name pos:start="27:55" pos:end="27:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="28:1" pos:end="28:12">#<cpp:directive pos:start="28:2" pos:end="28:6">ifdef</cpp:directive> <name pos:start="28:8" pos:end="28:12">DEBUG</name></cpp:ifdef>
        <expr_stmt pos:start="29:9" pos:end="31:0"><expr pos:start="29:9" pos:end="29:49"><name pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:12">data</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:35">packet_types_received</name><index pos:start="29:36" pos:end="29:47">[<expr pos:start="29:37" pos:end="29:46"><name pos:start="29:37" pos:end="29:39">nal</name> <operator pos:start="29:41" pos:end="29:41">&amp;</operator> <literal type="number" pos:start="29:43" pos:end="29:46">0x1f</literal></expr>]</index></name><operator pos:start="29:48" pos:end="29:49">++</operator></expr>;</expr_stmt>
<cpp:endif pos:start="30:1" pos:end="30:6">#<cpp:directive pos:start="30:2" pos:end="30:6">endif</cpp:directive></cpp:endif>
        <break pos:start="31:9" pos:end="31:14">break;</break>
    <case pos:start="32:5" pos:end="32:12">case <expr pos:start="32:10" pos:end="32:11"><literal type="number" pos:start="32:10" pos:end="32:11">24</literal></expr>:</case>                   <comment type="line" pos:start="32:32" pos:end="32:68">// STAP-A (one packet, multiple nals)</comment>
        <comment type="line" pos:start="33:9" pos:end="33:33">// consume the STAP-A NAL</comment>
        <expr_stmt pos:start="34:9" pos:end="34:14"><expr pos:start="34:9" pos:end="34:13"><name pos:start="34:9" pos:end="34:11">buf</name><operator pos:start="34:12" pos:end="34:13">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:14"><expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:11">len</name><operator pos:start="35:12" pos:end="35:13">--</operator></expr>;</expr_stmt>
        <comment type="line" pos:start="36:9" pos:end="36:62">// first we are going to figure out the total size....</comment>
        <block pos:start="37:9" pos:end="83:9">{<block_content pos:start="38:13" pos:end="82:13">
            <decl_stmt pos:start="38:13" pos:end="38:24"><decl pos:start="38:13" pos:end="38:23"><type pos:start="38:13" pos:end="38:15"><name pos:start="38:13" pos:end="38:15">int</name></type> <name pos:start="38:17" pos:end="38:20">pass</name><init pos:start="38:21" pos:end="38:23">= <expr pos:start="38:23" pos:end="38:23"><literal type="number" pos:start="38:23" pos:end="38:23">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="39:13" pos:end="39:32"><decl pos:start="39:13" pos:end="39:31"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:28">total_length</name><init pos:start="39:29" pos:end="39:31">= <expr pos:start="39:31" pos:end="39:31"><literal type="number" pos:start="39:31" pos:end="39:31">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="40:13" pos:end="40:31"><decl pos:start="40:13" pos:end="40:30"><type pos:start="40:13" pos:end="40:21"><name pos:start="40:13" pos:end="40:19">uint8_t</name> <modifier pos:start="40:21" pos:end="40:21">*</modifier></type><name pos:start="40:22" pos:end="40:24">dst</name><init pos:start="40:25" pos:end="40:30">= <expr pos:start="40:27" pos:end="40:30"><name pos:start="40:27" pos:end="40:30">NULL</name></expr></init></decl>;</decl_stmt>
            <for pos:start="41:13" pos:end="82:13">for<control pos:start="41:16" pos:end="41:40">(<init pos:start="41:17" pos:end="41:24"><expr pos:start="41:17" pos:end="41:23"><name pos:start="41:17" pos:end="41:20">pass</name><operator pos:start="41:21" pos:end="41:21">=</operator> <literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr>;</init> <condition pos:start="41:26" pos:end="41:32"><expr pos:start="41:26" pos:end="41:31"><name pos:start="41:26" pos:end="41:29">pass</name><operator pos:start="41:30" pos:end="41:30">&lt;</operator><literal type="number" pos:start="41:31" pos:end="41:31">2</literal></expr>;</condition> <incr pos:start="41:34" pos:end="41:39"><expr pos:start="41:34" pos:end="41:39"><name pos:start="41:34" pos:end="41:37">pass</name><operator pos:start="41:38" pos:end="41:39">++</operator></expr></incr>)</control> <block pos:start="41:42" pos:end="82:13">{<block_content pos:start="42:17" pos:end="81:17">
                <decl_stmt pos:start="42:17" pos:end="42:40"><decl pos:start="42:17" pos:end="42:39"><type pos:start="42:17" pos:end="42:31"><specifier pos:start="42:17" pos:end="42:21">const</specifier> <name pos:start="42:23" pos:end="42:29">uint8_t</name> <modifier pos:start="42:31" pos:end="42:31">*</modifier></type><name pos:start="42:32" pos:end="42:34">src</name><init pos:start="42:35" pos:end="42:39">= <expr pos:start="42:37" pos:end="42:39"><name pos:start="42:37" pos:end="42:39">buf</name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="43:17" pos:end="43:33"><decl pos:start="43:17" pos:end="43:32"><type pos:start="43:17" pos:end="43:19"><name pos:start="43:17" pos:end="43:19">int</name></type> <name pos:start="43:21" pos:end="43:27">src_len</name><init pos:start="43:28" pos:end="43:32">= <expr pos:start="43:30" pos:end="43:32"><name pos:start="43:30" pos:end="43:32">len</name></expr></init></decl>;</decl_stmt>
                <do pos:start="44:17" pos:end="74:38">do <block pos:start="44:20" pos:end="74:17">{<block_content pos:start="45:21" pos:end="73:83">
                    <decl_stmt pos:start="45:21" pos:end="45:53"><decl pos:start="45:21" pos:end="45:52"><type pos:start="45:21" pos:end="45:28"><name pos:start="45:21" pos:end="45:28">uint16_t</name></type> <name pos:start="45:30" pos:end="45:37">nal_size</name> <init pos:start="45:39" pos:end="45:52">= <expr pos:start="45:41" pos:end="45:52"><call pos:start="45:41" pos:end="45:52"><name pos:start="45:41" pos:end="45:47">AV_RB16</name><argument_list pos:start="45:48" pos:end="45:52">(<argument pos:start="45:49" pos:end="45:51"><expr pos:start="45:49" pos:end="45:51"><name pos:start="45:49" pos:end="45:51">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="45:55" pos:end="45:109">// this going to be a problem if unaligned (can it be?)</comment>
                    <comment type="line" pos:start="46:21" pos:end="46:61">// consume the length of the aggregate...</comment>
                    <expr_stmt pos:start="47:21" pos:end="47:29"><expr pos:start="47:21" pos:end="47:28"><name pos:start="47:21" pos:end="47:23">src</name> <operator pos:start="47:25" pos:end="47:26">+=</operator> <literal type="number" pos:start="47:28" pos:end="47:28">2</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="48:21" pos:end="48:33"><expr pos:start="48:21" pos:end="48:32"><name pos:start="48:21" pos:end="48:27">src_len</name> <operator pos:start="48:29" pos:end="48:30">-=</operator> <literal type="number" pos:start="48:32" pos:end="48:32">2</literal></expr>;</expr_stmt>
                    <if_stmt pos:start="49:21" pos:end="67:21"><if pos:start="49:21" pos:end="64:21">if <condition pos:start="49:24" pos:end="49:44">(<expr pos:start="49:25" pos:end="49:43"><name pos:start="49:25" pos:end="49:32">nal_size</name> <operator pos:start="49:34" pos:end="49:35">&lt;=</operator> <name pos:start="49:37" pos:end="49:43">src_len</name></expr>)</condition> <block pos:start="49:46" pos:end="64:21">{<block_content pos:start="50:25" pos:end="63:25">
                        <if_stmt pos:start="50:25" pos:end="63:25"><if pos:start="50:25" pos:end="53:25">if<condition pos:start="50:27" pos:end="50:35">(<expr pos:start="50:28" pos:end="50:34"><name pos:start="50:28" pos:end="50:31">pass</name><operator pos:start="50:32" pos:end="50:33">==</operator><literal type="number" pos:start="50:34" pos:end="50:34">0</literal></expr>)</condition> <block pos:start="50:37" pos:end="53:25">{<block_content pos:start="52:29" pos:end="52:75">
                            <comment type="line" pos:start="51:29" pos:end="51:42">// counting...</comment>
                            <expr_stmt pos:start="52:29" pos:end="52:75"><expr pos:start="52:29" pos:end="52:74"><name pos:start="52:29" pos:end="52:40">total_length</name><operator pos:start="52:41" pos:end="52:42">+=</operator> <sizeof pos:start="52:44" pos:end="52:65">sizeof<argument_list pos:start="52:50" pos:end="52:65">(<argument pos:start="52:51" pos:end="52:64"><expr pos:start="52:51" pos:end="52:64"><name pos:start="52:51" pos:end="52:64">start_sequence</name></expr></argument>)</argument_list></sizeof><operator pos:start="52:66" pos:end="52:66">+</operator><name pos:start="52:67" pos:end="52:74">nal_size</name></expr>;</expr_stmt>
                        </block_content>}</block></if> <else pos:start="53:27" pos:end="63:25">else <block pos:start="53:32" pos:end="63:25">{<block_content pos:start="55:29" pos:end="62:43">
                            <comment type="line" pos:start="54:29" pos:end="54:38">// copying</comment>
                            <expr_stmt pos:start="55:29" pos:end="55:40"><expr pos:start="55:29" pos:end="55:39"><call pos:start="55:29" pos:end="55:39"><name pos:start="55:29" pos:end="55:34">assert</name><argument_list pos:start="55:35" pos:end="55:39">(<argument pos:start="55:36" pos:end="55:38"><expr pos:start="55:36" pos:end="55:38"><name pos:start="55:36" pos:end="55:38">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="56:29" pos:end="56:80"><expr pos:start="56:29" pos:end="56:79"><call pos:start="56:29" pos:end="56:79"><name pos:start="56:29" pos:end="56:34">memcpy</name><argument_list pos:start="56:35" pos:end="56:79">(<argument pos:start="56:36" pos:end="56:38"><expr pos:start="56:36" pos:end="56:38"><name pos:start="56:36" pos:end="56:38">dst</name></expr></argument>, <argument pos:start="56:41" pos:end="56:54"><expr pos:start="56:41" pos:end="56:54"><name pos:start="56:41" pos:end="56:54">start_sequence</name></expr></argument>, <argument pos:start="56:57" pos:end="56:78"><expr pos:start="56:57" pos:end="56:78"><sizeof pos:start="56:57" pos:end="56:78">sizeof<argument_list pos:start="56:63" pos:end="56:78">(<argument pos:start="56:64" pos:end="56:77"><expr pos:start="56:64" pos:end="56:77"><name pos:start="56:64" pos:end="56:77">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="57:29" pos:end="57:57"><expr pos:start="57:29" pos:end="57:56"><name pos:start="57:29" pos:end="57:31">dst</name><operator pos:start="57:32" pos:end="57:33">+=</operator> <sizeof pos:start="57:35" pos:end="57:56">sizeof<argument_list pos:start="57:41" pos:end="57:56">(<argument pos:start="57:42" pos:end="57:55"><expr pos:start="57:42" pos:end="57:55"><name pos:start="57:42" pos:end="57:55">start_sequence</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
                            <expr_stmt pos:start="58:29" pos:end="60:0"><expr pos:start="58:29" pos:end="58:54"><call pos:start="58:29" pos:end="58:54"><name pos:start="58:29" pos:end="58:34">memcpy</name><argument_list pos:start="58:35" pos:end="58:54">(<argument pos:start="58:36" pos:end="58:38"><expr pos:start="58:36" pos:end="58:38"><name pos:start="58:36" pos:end="58:38">dst</name></expr></argument>, <argument pos:start="58:41" pos:end="58:43"><expr pos:start="58:41" pos:end="58:43"><name pos:start="58:41" pos:end="58:43">src</name></expr></argument>, <argument pos:start="58:46" pos:end="58:53"><expr pos:start="58:46" pos:end="58:53"><name pos:start="58:46" pos:end="58:53">nal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="59:1" pos:end="59:12">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:12">DEBUG</name></cpp:ifdef>
                            <expr_stmt pos:start="60:29" pos:end="62:0"><expr pos:start="60:29" pos:end="60:70"><name pos:start="60:29" pos:end="60:68"><name pos:start="60:29" pos:end="60:32">data</name><operator pos:start="60:33" pos:end="60:34">-&gt;</operator><name pos:start="60:35" pos:end="60:55">packet_types_received</name><index pos:start="60:56" pos:end="60:68">[<expr pos:start="60:57" pos:end="60:67"><operator pos:start="60:57" pos:end="60:57">*</operator><name pos:start="60:58" pos:end="60:60">src</name> <operator pos:start="60:62" pos:end="60:62">&amp;</operator> <literal type="number" pos:start="60:64" pos:end="60:67">0x1f</literal></expr>]</index></name><operator pos:start="60:69" pos:end="60:70">++</operator></expr>;</expr_stmt>
<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>
                            <expr_stmt pos:start="62:29" pos:end="62:43"><expr pos:start="62:29" pos:end="62:42"><name pos:start="62:29" pos:end="62:31">dst</name><operator pos:start="62:32" pos:end="62:33">+=</operator> <name pos:start="62:35" pos:end="62:42">nal_size</name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if> <else pos:start="64:23" pos:end="67:21">else <block pos:start="64:28" pos:end="67:21">{<block_content pos:start="65:25" pos:end="66:86">
                        <expr_stmt pos:start="65:25" pos:end="66:86"><expr pos:start="65:25" pos:end="66:85"><call pos:start="65:25" pos:end="66:85"><name pos:start="65:25" pos:end="65:30">av_log</name><argument_list pos:start="65:31" pos:end="66:85">(<argument pos:start="65:32" pos:end="65:34"><expr pos:start="65:32" pos:end="65:34"><name pos:start="65:32" pos:end="65:34">ctx</name></expr></argument>, <argument pos:start="65:37" pos:end="65:48"><expr pos:start="65:37" pos:end="65:48"><name pos:start="65:37" pos:end="65:48">AV_LOG_ERROR</name></expr></argument>,
                               <argument pos:start="66:32" pos:end="66:65"><expr pos:start="66:32" pos:end="66:65"><literal type="string" pos:start="66:32" pos:end="66:65">"nal size exceeds length: %d %d\n"</literal></expr></argument>, <argument pos:start="66:68" pos:end="66:75"><expr pos:start="66:68" pos:end="66:75"><name pos:start="66:68" pos:end="66:75">nal_size</name></expr></argument>, <argument pos:start="66:78" pos:end="66:84"><expr pos:start="66:78" pos:end="66:84"><name pos:start="66:78" pos:end="66:84">src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <comment type="line" pos:start="68:21" pos:end="68:45">// eat what we handled...</comment>
                    <expr_stmt pos:start="69:21" pos:end="69:36"><expr pos:start="69:21" pos:end="69:35"><name pos:start="69:21" pos:end="69:23">src</name> <operator pos:start="69:25" pos:end="69:26">+=</operator> <name pos:start="69:28" pos:end="69:35">nal_size</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="70:21" pos:end="70:40"><expr pos:start="70:21" pos:end="70:39"><name pos:start="70:21" pos:end="70:27">src_len</name> <operator pos:start="70:29" pos:end="70:30">-=</operator> <name pos:start="70:32" pos:end="70:39">nal_size</name></expr>;</expr_stmt>
                    <if_stmt pos:start="71:21" pos:end="73:83"><if pos:start="71:21" pos:end="73:83">if <condition pos:start="71:24" pos:end="71:36">(<expr pos:start="71:25" pos:end="71:35"><name pos:start="71:25" pos:end="71:31">src_len</name> <operator pos:start="71:33" pos:end="71:33">&lt;</operator> <literal type="number" pos:start="71:35" pos:end="71:35">0</literal></expr>)</condition><block type="pseudo" pos:start="72:25" pos:end="73:83"><block_content pos:start="72:25" pos:end="73:83">
                        <expr_stmt pos:start="72:25" pos:end="73:83"><expr pos:start="72:25" pos:end="73:82"><call pos:start="72:25" pos:end="73:82"><name pos:start="72:25" pos:end="72:30">av_log</name><argument_list pos:start="72:31" pos:end="73:82">(<argument pos:start="72:32" pos:end="72:34"><expr pos:start="72:32" pos:end="72:34"><name pos:start="72:32" pos:end="72:34">ctx</name></expr></argument>, <argument pos:start="72:37" pos:end="72:48"><expr pos:start="72:37" pos:end="72:48"><name pos:start="72:37" pos:end="72:48">AV_LOG_ERROR</name></expr></argument>,
                               <argument pos:start="73:32" pos:end="73:72"><expr pos:start="73:32" pos:end="73:72"><literal type="string" pos:start="73:32" pos:end="73:72">"Consumed more bytes than we got! (%d)\n"</literal></expr></argument>, <argument pos:start="73:75" pos:end="73:81"><expr pos:start="73:75" pos:end="73:81"><name pos:start="73:75" pos:end="73:81">src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block> while <condition pos:start="74:25" pos:end="74:37">(<expr pos:start="74:26" pos:end="74:36"><name pos:start="74:26" pos:end="74:32">src_len</name> <operator pos:start="74:34" pos:end="74:34">&gt;</operator> <literal type="number" pos:start="74:36" pos:end="74:36">2</literal></expr>)</condition>;</do>      <comment type="line" pos:start="74:45" pos:end="74:83">// because there could be rtp padding..</comment>
                <if_stmt pos:start="75:17" pos:end="81:17"><if pos:start="75:17" pos:end="79:17">if<condition pos:start="75:19" pos:end="75:27">(<expr pos:start="75:20" pos:end="75:26"><name pos:start="75:20" pos:end="75:23">pass</name><operator pos:start="75:24" pos:end="75:25">==</operator><literal type="number" pos:start="75:26" pos:end="75:26">0</literal></expr>)</condition> <block pos:start="75:29" pos:end="79:17">{<block_content pos:start="77:21" pos:end="78:35">
                    <comment type="line" pos:start="76:21" pos:end="76:96">// now we know the total size of the packet (with the start sequences added)</comment>
                    <expr_stmt pos:start="77:21" pos:end="77:53"><expr pos:start="77:21" pos:end="77:52"><call pos:start="77:21" pos:end="77:52"><name pos:start="77:21" pos:end="77:33">av_new_packet</name><argument_list pos:start="77:34" pos:end="77:52">(<argument pos:start="77:35" pos:end="77:37"><expr pos:start="77:35" pos:end="77:37"><name pos:start="77:35" pos:end="77:37">pkt</name></expr></argument>, <argument pos:start="77:40" pos:end="77:51"><expr pos:start="77:40" pos:end="77:51"><name pos:start="77:40" pos:end="77:51">total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="78:21" pos:end="78:35"><expr pos:start="78:21" pos:end="78:34"><name pos:start="78:21" pos:end="78:23">dst</name><operator pos:start="78:24" pos:end="78:24">=</operator> <name pos:start="78:26" pos:end="78:34"><name pos:start="78:26" pos:end="78:28">pkt</name><operator pos:start="78:29" pos:end="78:30">-&gt;</operator><name pos:start="78:31" pos:end="78:34">data</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="79:19" pos:end="81:17">else <block pos:start="79:24" pos:end="81:17">{<block_content pos:start="80:21" pos:end="80:56">
                    <expr_stmt pos:start="80:21" pos:end="80:56"><expr pos:start="80:21" pos:end="80:55"><call pos:start="80:21" pos:end="80:55"><name pos:start="80:21" pos:end="80:26">assert</name><argument_list pos:start="80:27" pos:end="80:55">(<argument pos:start="80:28" pos:end="80:54"><expr pos:start="80:28" pos:end="80:54"><name pos:start="80:28" pos:end="80:30">dst</name><operator pos:start="80:31" pos:end="80:31">-</operator><name pos:start="80:32" pos:end="80:40"><name pos:start="80:32" pos:end="80:34">pkt</name><operator pos:start="80:35" pos:end="80:36">-&gt;</operator><name pos:start="80:37" pos:end="80:40">data</name></name><operator pos:start="80:41" pos:end="80:42">==</operator><name pos:start="80:43" pos:end="80:54">total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <break pos:start="84:9" pos:end="84:14">break;</break>
    <case pos:start="85:5" pos:end="85:12">case <expr pos:start="85:10" pos:end="85:11"><literal type="number" pos:start="85:10" pos:end="85:11">25</literal></expr>:</case>                   <comment type="line" pos:start="85:32" pos:end="85:40">// STAP-B</comment>
    <case pos:start="86:5" pos:end="86:12">case <expr pos:start="86:10" pos:end="86:11"><literal type="number" pos:start="86:10" pos:end="86:11">26</literal></expr>:</case>                   <comment type="line" pos:start="86:32" pos:end="86:41">// MTAP-16</comment>
    <case pos:start="87:5" pos:end="87:12">case <expr pos:start="87:10" pos:end="87:11"><literal type="number" pos:start="87:10" pos:end="87:11">27</literal></expr>:</case>                   <comment type="line" pos:start="87:32" pos:end="87:41">// MTAP-24</comment>
    <case pos:start="88:5" pos:end="88:12">case <expr pos:start="88:10" pos:end="88:11"><literal type="number" pos:start="88:10" pos:end="88:11">29</literal></expr>:</case>                   <comment type="line" pos:start="88:32" pos:end="88:38">// FU-B</comment>
        <expr_stmt pos:start="89:9" pos:end="91:21"><expr pos:start="89:9" pos:end="91:20"><call pos:start="89:9" pos:end="91:20"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="91:20">(<argument pos:start="89:16" pos:end="89:18"><expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ctx</name></expr></argument>, <argument pos:start="89:21" pos:end="89:32"><expr pos:start="89:21" pos:end="89:32"><name pos:start="89:21" pos:end="89:32">AV_LOG_ERROR</name></expr></argument>,
               <argument pos:start="90:16" pos:end="90:74"><expr pos:start="90:16" pos:end="90:74"><literal type="string" pos:start="90:16" pos:end="90:74">"Unhandled type (%d) (See RFC for implementation details\n"</literal></expr></argument>,
               <argument pos:start="91:16" pos:end="91:19"><expr pos:start="91:16" pos:end="91:19"><name pos:start="91:16" pos:end="91:19">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="92:9" pos:end="92:19"><expr pos:start="92:9" pos:end="92:18"><name pos:start="92:9" pos:end="92:14">result</name><operator pos:start="92:15" pos:end="92:15">=</operator> <operator pos:start="92:17" pos:end="92:17">-</operator><literal type="number" pos:start="92:18" pos:end="92:18">1</literal></expr>;</expr_stmt>
        <break pos:start="93:9" pos:end="93:14">break;</break>
    <case pos:start="94:5" pos:end="94:12">case <expr pos:start="94:10" pos:end="94:11"><literal type="number" pos:start="94:10" pos:end="94:11">28</literal></expr>:</case>                   <comment type="line" pos:start="94:32" pos:end="94:55">// FU-A (fragmented nal)</comment>
        <expr_stmt pos:start="95:9" pos:end="95:14"><expr pos:start="95:9" pos:end="95:13"><name pos:start="95:9" pos:end="95:11">buf</name><operator pos:start="95:12" pos:end="95:13">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="96:9" pos:end="96:14"><expr pos:start="96:9" pos:end="96:13"><name pos:start="96:9" pos:end="96:11">len</name><operator pos:start="96:12" pos:end="96:13">--</operator></expr>;</expr_stmt>                  <comment type="line" pos:start="96:33" pos:end="96:56">// skip the fu_indicator</comment>
        <block pos:start="97:9" pos:end="125:9">{<block_content pos:start="99:13" pos:end="124:13">
            <comment type="line" pos:start="98:13" pos:end="98:81">// these are the same as above, we just redo them here for clarity...</comment>
            <decl_stmt pos:start="99:13" pos:end="99:39"><decl pos:start="99:13" pos:end="99:38"><type pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:19">uint8_t</name></type> <name pos:start="99:21" pos:end="99:32">fu_indicator</name> <init pos:start="99:34" pos:end="99:38">= <expr pos:start="99:36" pos:end="99:38"><name pos:start="99:36" pos:end="99:38">nal</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="100:13" pos:end="100:37"><decl pos:start="100:13" pos:end="100:36"><type pos:start="100:13" pos:end="100:19"><name pos:start="100:13" pos:end="100:19">uint8_t</name></type> <name pos:start="100:21" pos:end="100:29">fu_header</name> <init pos:start="100:31" pos:end="100:36">= <expr pos:start="100:33" pos:end="100:36"><operator pos:start="100:33" pos:end="100:33">*</operator><name pos:start="100:34" pos:end="100:36">buf</name></expr></init></decl>;</decl_stmt>   <comment type="line" pos:start="100:41" pos:end="100:62">// read the fu_header.</comment>
            <decl_stmt pos:start="101:13" pos:end="101:47"><decl pos:start="101:13" pos:end="101:46"><type pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:19">uint8_t</name></type> <name pos:start="101:21" pos:end="101:29">start_bit</name> <init pos:start="101:31" pos:end="101:46">= <expr pos:start="101:33" pos:end="101:46"><name pos:start="101:33" pos:end="101:41">fu_header</name> <operator pos:start="101:43" pos:end="101:44">&gt;&gt;</operator> <literal type="number" pos:start="101:46" pos:end="101:46">7</literal></expr></init></decl>;</decl_stmt>
<comment type="line" pos:start="102:1" pos:end="102:56">//            uint8_t end_bit = (fu_header &amp; 0x40) &gt;&gt; 6;</comment>
            <decl_stmt pos:start="103:13" pos:end="103:50"><decl pos:start="103:13" pos:end="103:49"><type pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:19">uint8_t</name></type> <name pos:start="103:21" pos:end="103:28">nal_type</name> <init pos:start="103:30" pos:end="103:49">= <expr pos:start="103:32" pos:end="103:49"><operator pos:start="103:32" pos:end="103:32">(</operator><name pos:start="103:33" pos:end="103:41">fu_header</name> <operator pos:start="103:43" pos:end="103:43">&amp;</operator> <literal type="number" pos:start="103:45" pos:end="103:48">0x1f</literal><operator pos:start="103:49" pos:end="103:49">)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="104:13" pos:end="104:38"><decl pos:start="104:13" pos:end="104:37"><type pos:start="104:13" pos:end="104:19"><name pos:start="104:13" pos:end="104:19">uint8_t</name></type> <name pos:start="104:21" pos:end="104:37">reconstructed_nal</name></decl>;</decl_stmt>
            <comment type="line" pos:start="105:13" pos:end="105:74">// reconstruct this packet's true nal; only the data follows..</comment>
            <expr_stmt pos:start="106:13" pos:end="106:54"><expr pos:start="106:13" pos:end="106:53"><name pos:start="106:13" pos:end="106:29">reconstructed_nal</name> <operator pos:start="106:31" pos:end="106:31">=</operator> <name pos:start="106:33" pos:end="106:44">fu_indicator</name> <operator pos:start="106:46" pos:end="106:46">&amp;</operator> <operator pos:start="106:48" pos:end="106:48">(</operator><literal type="number" pos:start="106:49" pos:end="106:52">0xe0</literal><operator pos:start="106:53" pos:end="106:53">)</operator></expr>;</expr_stmt>  <comment type="line" pos:start="106:57" pos:end="106:130">// the original nal forbidden bit and NRI are stored in this packet's nal;</comment>
            <expr_stmt pos:start="107:13" pos:end="107:42"><expr pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:29">reconstructed_nal</name> <operator pos:start="107:31" pos:end="107:32">|=</operator> <name pos:start="107:34" pos:end="107:41">nal_type</name></expr>;</expr_stmt>
            <comment type="line" pos:start="108:13" pos:end="108:36">// skip the fu_header...</comment>
            <expr_stmt pos:start="109:13" pos:end="109:18"><expr pos:start="109:13" pos:end="109:17"><name pos:start="109:13" pos:end="109:15">buf</name><operator pos:start="109:16" pos:end="109:17">++</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="110:13" pos:end="112:0"><expr pos:start="110:13" pos:end="110:17"><name pos:start="110:13" pos:end="110:15">len</name><operator pos:start="110:16" pos:end="110:17">--</operator></expr>;</expr_stmt>
<cpp:ifdef pos:start="111:1" pos:end="111:12">#<cpp:directive pos:start="111:2" pos:end="111:6">ifdef</cpp:directive> <name pos:start="111:8" pos:end="111:12">DEBUG</name></cpp:ifdef>
            <if_stmt pos:start="112:13" pos:end="115:0"><if pos:start="112:13" pos:end="115:0">if <condition pos:start="112:16" pos:end="112:26">(<expr pos:start="112:17" pos:end="112:25"><name pos:start="112:17" pos:end="112:25">start_bit</name></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="115:0"><block_content pos:start="113:17" pos:end="115:0">
                <expr_stmt pos:start="113:17" pos:end="115:0"><expr pos:start="113:17" pos:end="113:55"><name pos:start="113:17" pos:end="113:53"><name pos:start="113:17" pos:end="113:20">data</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:43">packet_types_received</name><index pos:start="113:44" pos:end="113:53">[<expr pos:start="113:45" pos:end="113:52"><name pos:start="113:45" pos:end="113:52">nal_type</name></expr>]</index></name><operator pos:start="113:54" pos:end="113:55">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="114:1" pos:end="114:6">#<cpp:directive pos:start="114:2" pos:end="114:6">endif</cpp:directive></cpp:endif>
            <if_stmt pos:start="115:13" pos:end="124:13"><if pos:start="115:13" pos:end="121:13">if<condition pos:start="115:15" pos:end="115:25">(<expr pos:start="115:16" pos:end="115:24"><name pos:start="115:16" pos:end="115:24">start_bit</name></expr>)</condition> <block pos:start="115:27" pos:end="121:13">{<block_content pos:start="117:17" pos:end="120:79">
                <comment type="line" pos:start="116:17" pos:end="116:76">// copy in the start sequence, and the reconstructed nal....</comment>
                <expr_stmt pos:start="117:17" pos:end="117:75"><expr pos:start="117:17" pos:end="117:74"><call pos:start="117:17" pos:end="117:74"><name pos:start="117:17" pos:end="117:29">av_new_packet</name><argument_list pos:start="117:30" pos:end="117:74">(<argument pos:start="117:31" pos:end="117:33"><expr pos:start="117:31" pos:end="117:33"><name pos:start="117:31" pos:end="117:33">pkt</name></expr></argument>, <argument pos:start="117:36" pos:end="117:73"><expr pos:start="117:36" pos:end="117:73"><sizeof pos:start="117:36" pos:end="117:57">sizeof<argument_list pos:start="117:42" pos:end="117:57">(<argument pos:start="117:43" pos:end="117:56"><expr pos:start="117:43" pos:end="117:56"><name pos:start="117:43" pos:end="117:56">start_sequence</name></expr></argument>)</argument_list></sizeof><operator pos:start="117:58" pos:end="117:58">+</operator><sizeof pos:start="117:59" pos:end="117:69">sizeof<argument_list pos:start="117:65" pos:end="117:69">(<argument pos:start="117:66" pos:end="117:68"><expr pos:start="117:66" pos:end="117:68"><name pos:start="117:66" pos:end="117:68">nal</name></expr></argument>)</argument_list></sizeof><operator pos:start="117:70" pos:end="117:70">+</operator><name pos:start="117:71" pos:end="117:73">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="118:17" pos:end="118:74"><expr pos:start="118:17" pos:end="118:73"><call pos:start="118:17" pos:end="118:73"><name pos:start="118:17" pos:end="118:22">memcpy</name><argument_list pos:start="118:23" pos:end="118:73">(<argument pos:start="118:24" pos:end="118:32"><expr pos:start="118:24" pos:end="118:32"><name pos:start="118:24" pos:end="118:32"><name pos:start="118:24" pos:end="118:26">pkt</name><operator pos:start="118:27" pos:end="118:28">-&gt;</operator><name pos:start="118:29" pos:end="118:32">data</name></name></expr></argument>, <argument pos:start="118:35" pos:end="118:48"><expr pos:start="118:35" pos:end="118:48"><name pos:start="118:35" pos:end="118:48">start_sequence</name></expr></argument>, <argument pos:start="118:51" pos:end="118:72"><expr pos:start="118:51" pos:end="118:72"><sizeof pos:start="118:51" pos:end="118:72">sizeof<argument_list pos:start="118:57" pos:end="118:72">(<argument pos:start="118:58" pos:end="118:71"><expr pos:start="118:58" pos:end="118:71"><name pos:start="118:58" pos:end="118:71">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="119:17" pos:end="119:69"><expr pos:start="119:17" pos:end="119:68"><name pos:start="119:17" pos:end="119:49"><name pos:start="119:17" pos:end="119:19">pkt</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:25">data</name><index pos:start="119:26" pos:end="119:49">[<expr pos:start="119:27" pos:end="119:48"><sizeof pos:start="119:27" pos:end="119:48">sizeof<argument_list pos:start="119:33" pos:end="119:48">(<argument pos:start="119:34" pos:end="119:47"><expr pos:start="119:34" pos:end="119:47"><name pos:start="119:34" pos:end="119:47">start_sequence</name></expr></argument>)</argument_list></sizeof></expr>]</index></name><operator pos:start="119:50" pos:end="119:50">=</operator> <name pos:start="119:52" pos:end="119:68">reconstructed_nal</name></expr>;</expr_stmt>
                <expr_stmt pos:start="120:17" pos:end="120:79"><expr pos:start="120:17" pos:end="120:78"><call pos:start="120:17" pos:end="120:78"><name pos:start="120:17" pos:end="120:22">memcpy</name><argument_list pos:start="120:23" pos:end="120:78">(<argument pos:start="120:24" pos:end="120:67"><expr pos:start="120:24" pos:end="120:67"><name pos:start="120:24" pos:end="120:32"><name pos:start="120:24" pos:end="120:26">pkt</name><operator pos:start="120:27" pos:end="120:28">-&gt;</operator><name pos:start="120:29" pos:end="120:32">data</name></name><operator pos:start="120:33" pos:end="120:33">+</operator><sizeof pos:start="120:34" pos:end="120:55">sizeof<argument_list pos:start="120:40" pos:end="120:55">(<argument pos:start="120:41" pos:end="120:54"><expr pos:start="120:41" pos:end="120:54"><name pos:start="120:41" pos:end="120:54">start_sequence</name></expr></argument>)</argument_list></sizeof><operator pos:start="120:56" pos:end="120:56">+</operator><sizeof pos:start="120:57" pos:end="120:67">sizeof<argument_list pos:start="120:63" pos:end="120:67">(<argument pos:start="120:64" pos:end="120:66"><expr pos:start="120:64" pos:end="120:66"><name pos:start="120:64" pos:end="120:66">nal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="120:70" pos:end="120:72"><expr pos:start="120:70" pos:end="120:72"><name pos:start="120:70" pos:end="120:72">buf</name></expr></argument>, <argument pos:start="120:75" pos:end="120:77"><expr pos:start="120:75" pos:end="120:77"><name pos:start="120:75" pos:end="120:77">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="121:15" pos:end="124:13">else <block pos:start="121:20" pos:end="124:13">{<block_content pos:start="122:17" pos:end="123:44">
                <expr_stmt pos:start="122:17" pos:end="122:40"><expr pos:start="122:17" pos:end="122:39"><call pos:start="122:17" pos:end="122:39"><name pos:start="122:17" pos:end="122:29">av_new_packet</name><argument_list pos:start="122:30" pos:end="122:39">(<argument pos:start="122:31" pos:end="122:33"><expr pos:start="122:31" pos:end="122:33"><name pos:start="122:31" pos:end="122:33">pkt</name></expr></argument>, <argument pos:start="122:36" pos:end="122:38"><expr pos:start="122:36" pos:end="122:38"><name pos:start="122:36" pos:end="122:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="123:17" pos:end="123:44"><expr pos:start="123:17" pos:end="123:43"><call pos:start="123:17" pos:end="123:43"><name pos:start="123:17" pos:end="123:22">memcpy</name><argument_list pos:start="123:23" pos:end="123:43">(<argument pos:start="123:24" pos:end="123:32"><expr pos:start="123:24" pos:end="123:32"><name pos:start="123:24" pos:end="123:32"><name pos:start="123:24" pos:end="123:26">pkt</name><operator pos:start="123:27" pos:end="123:28">-&gt;</operator><name pos:start="123:29" pos:end="123:32">data</name></name></expr></argument>, <argument pos:start="123:35" pos:end="123:37"><expr pos:start="123:35" pos:end="123:37"><name pos:start="123:35" pos:end="123:37">buf</name></expr></argument>, <argument pos:start="123:40" pos:end="123:42"><expr pos:start="123:40" pos:end="123:42"><name pos:start="123:40" pos:end="123:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <break pos:start="126:9" pos:end="126:14">break;</break>
    <case pos:start="127:5" pos:end="127:12">case <expr pos:start="127:10" pos:end="127:11"><literal type="number" pos:start="127:10" pos:end="127:11">30</literal></expr>:</case>                   <comment type="line" pos:start="127:32" pos:end="127:43">// undefined</comment>
    <case pos:start="128:5" pos:end="128:12">case <expr pos:start="128:10" pos:end="128:11"><literal type="number" pos:start="128:10" pos:end="128:11">31</literal></expr>:</case>                   <comment type="line" pos:start="128:32" pos:end="128:43">// undefined</comment>
    <default pos:start="129:5" pos:end="129:12">default:</default>
        <expr_stmt pos:start="130:9" pos:end="130:63"><expr pos:start="130:9" pos:end="130:62"><call pos:start="130:9" pos:end="130:62"><name pos:start="130:9" pos:end="130:14">av_log</name><argument_list pos:start="130:15" pos:end="130:62">(<argument pos:start="130:16" pos:end="130:18"><expr pos:start="130:16" pos:end="130:18"><name pos:start="130:16" pos:end="130:18">ctx</name></expr></argument>, <argument pos:start="130:21" pos:end="130:32"><expr pos:start="130:21" pos:end="130:32"><name pos:start="130:21" pos:end="130:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="130:35" pos:end="130:55"><expr pos:start="130:35" pos:end="130:55"><literal type="string" pos:start="130:35" pos:end="130:55">"Undefined type (%d)"</literal></expr></argument>, <argument pos:start="130:58" pos:end="130:61"><expr pos:start="130:58" pos:end="130:61"><name pos:start="130:58" pos:end="130:61">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="131:9" pos:end="131:19"><expr pos:start="131:9" pos:end="131:18"><name pos:start="131:9" pos:end="131:14">result</name><operator pos:start="131:15" pos:end="131:15">=</operator> <operator pos:start="131:17" pos:end="131:17">-</operator><literal type="number" pos:start="131:18" pos:end="131:18">1</literal></expr>;</expr_stmt>
        <break pos:start="132:9" pos:end="132:14">break;</break>
    </block_content>}</block></switch>
    <return pos:start="134:5" pos:end="134:18">return <expr pos:start="134:12" pos:end="134:17"><name pos:start="134:12" pos:end="134:17">result</name></expr>;</return>
</block_content>}</block></function></unit>
