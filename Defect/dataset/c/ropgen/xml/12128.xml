<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12128.c" pos:tabs="8"><function pos:start="1:1" pos:end="633:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_eac3_parse_header</name><parameter_list pos:start="1:25" pos:end="1:45">(<parameter pos:start="1:26" pos:end="1:44"><decl pos:start="1:26" pos:end="1:44"><type pos:start="1:26" pos:end="1:43"><name pos:start="1:26" pos:end="1:41">AC3DecodeContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="633:1">{<block_content pos:start="5:5" pos:end="631:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">blk</name></decl>, <decl pos:start="5:17" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:18">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:68"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:29">ac3_exponent_strategy</name></decl>, <decl pos:start="7:32" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:32" pos:end="7:45">parse_aht_info</name></decl>, <decl pos:start="7:48" pos:end="7:67"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:48" pos:end="7:67">parse_spx_atten_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:33">parse_transient_proc_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">num_cpl_blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">GetBitContext</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">gbc</name> <init pos:start="13:24" pos:end="13:32">= <expr pos:start="13:26" pos:end="13:32"><operator pos:start="13:26" pos:end="13:26">&amp;</operator><name pos:start="13:27" pos:end="13:32"><name pos:start="13:27" pos:end="13:27">s</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:32">gbc</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="21:70">/* An E-AC-3 stream can have multiple independent streams which the

       application can select from. each independent stream can also contain

       dependent streams which are used to add or replace channels. */</comment>

    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:51">(<expr pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:21">frame_type</name></name> <operator pos:start="23:23" pos:end="23:24">==</operator> <name pos:start="23:26" pos:end="23:50">EAC3_FRAME_TYPE_DEPENDENT</name></expr>)</condition> <block pos:start="23:53" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:46">

        <expr_stmt pos:start="25:9" pos:end="25:72"><expr pos:start="25:9" pos:end="25:71"><call pos:start="25:9" pos:end="25:71"><name pos:start="25:9" pos:end="25:29">avpriv_request_sample</name><argument_list pos:start="25:30" pos:end="25:71">(<argument pos:start="25:31" pos:end="25:38"><expr pos:start="25:31" pos:end="25:38"><name pos:start="25:31" pos:end="25:38"><name pos:start="25:31" pos:end="25:31">s</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:38">avctx</name></name></expr></argument>, <argument pos:start="25:41" pos:end="25:70"><expr pos:start="25:41" pos:end="25:70"><literal type="string" pos:start="25:41" pos:end="25:70">"Dependent substream decoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:46">return <expr pos:start="27:16" pos:end="27:45"><name pos:start="27:16" pos:end="27:45">AAC_AC3_PARSE_ERROR_FRAME_TYPE</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="35:5">else if <condition pos:start="29:15" pos:end="29:57">(<expr pos:start="29:16" pos:end="29:56"><name pos:start="29:16" pos:end="29:28"><name pos:start="29:16" pos:end="29:16">s</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:28">frame_type</name></name> <operator pos:start="29:30" pos:end="29:31">==</operator> <name pos:start="29:33" pos:end="29:56">EAC3_FRAME_TYPE_RESERVED</name></expr>)</condition> <block pos:start="29:59" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:46">

        <expr_stmt pos:start="31:9" pos:end="31:64"><expr pos:start="31:9" pos:end="31:63"><call pos:start="31:9" pos:end="31:63"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:63">(<argument pos:start="31:16" pos:end="31:23"><expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:16">s</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:23">avctx</name></name></expr></argument>, <argument pos:start="31:26" pos:end="31:37"><expr pos:start="31:26" pos:end="31:37"><name pos:start="31:26" pos:end="31:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:40" pos:end="31:62"><expr pos:start="31:40" pos:end="31:62"><literal type="string" pos:start="31:40" pos:end="31:62">"Reserved frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:46">return <expr pos:start="33:16" pos:end="33:45"><name pos:start="33:16" pos:end="33:45">AAC_AC3_PARSE_ERROR_FRAME_TYPE</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="43:75">/* The substream id indicates which substream this frame belongs to. each

       independent stream has its own substream id, and the dependent streams

       associated to an independent stream have matching substream id's. */</comment>

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:23">(<expr pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:22">substreamid</name></name></expr>)</condition> <block pos:start="45:25" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:46">

        <comment type="block" pos:start="47:9" pos:end="47:78">/* only decode substream with id=0. skip any additional substreams. */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:65"><expr pos:start="49:9" pos:end="49:64"><call pos:start="49:9" pos:end="49:64"><name pos:start="49:9" pos:end="49:29">avpriv_request_sample</name><argument_list pos:start="49:30" pos:end="49:64">(<argument pos:start="49:31" pos:end="49:38"><expr pos:start="49:31" pos:end="49:38"><name pos:start="49:31" pos:end="49:38"><name pos:start="49:31" pos:end="49:31">s</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:38">avctx</name></name></expr></argument>, <argument pos:start="49:41" pos:end="49:63"><expr pos:start="49:41" pos:end="49:63"><literal type="string" pos:start="49:41" pos:end="49:63">"Additional substreams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:46">return <expr pos:start="51:16" pos:end="51:45"><name pos:start="51:16" pos:end="51:45">AAC_AC3_PARSE_ERROR_FRAME_TYPE</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="71:5"><if pos:start="57:5" pos:end="71:5">if <condition pos:start="57:8" pos:end="57:60">(<expr pos:start="57:9" pos:end="57:59"><name pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:27">bit_alloc_params</name><operator pos:start="57:28" pos:end="57:28">.</operator><name pos:start="57:29" pos:end="57:35">sr_code</name></name> <operator pos:start="57:37" pos:end="57:38">==</operator> <name pos:start="57:40" pos:end="57:59">EAC3_SR_CODE_REDUCED</name></expr>)</condition> <block pos:start="57:62" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:36">

        <comment type="block" pos:start="59:9" pos:end="65:49">/* The E-AC-3 specification does not tell how to handle reduced sample

           rates in bit allocation.  The best assumption would be that it is

           handled like AC-3 DolbyNet, but we cannot be sure until we have a

           sample which utilizes this feature. */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:65"><expr pos:start="67:9" pos:end="67:64"><call pos:start="67:9" pos:end="67:64"><name pos:start="67:9" pos:end="67:29">avpriv_request_sample</name><argument_list pos:start="67:30" pos:end="67:64">(<argument pos:start="67:31" pos:end="67:38"><expr pos:start="67:31" pos:end="67:38"><name pos:start="67:31" pos:end="67:38"><name pos:start="67:31" pos:end="67:31">s</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:38">avctx</name></name></expr></argument>, <argument pos:start="67:41" pos:end="67:63"><expr pos:start="67:41" pos:end="67:63"><literal type="string" pos:start="67:41" pos:end="67:63">"Reduced sampling rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:36">return <expr pos:start="69:16" pos:end="69:35"><name pos:start="69:16" pos:end="69:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:22"><expr pos:start="73:5" pos:end="73:21"><call pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:13">skip_bits</name><argument_list pos:start="73:14" pos:end="73:21">(<argument pos:start="73:15" pos:end="73:17"><expr pos:start="73:15" pos:end="73:17"><name pos:start="73:15" pos:end="73:17">gbc</name></expr></argument>, <argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><literal type="number" pos:start="73:20" pos:end="73:20">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="73:24" pos:end="73:43">// skip bitstream id</comment>



    <comment type="block" pos:start="77:5" pos:end="77:31">/* volume control params */</comment>

    <for pos:start="79:5" pos:end="89:5">for <control pos:start="79:9" pos:end="79:51">(<init pos:start="79:10" pos:end="79:15"><expr pos:start="79:10" pos:end="79:14"><name pos:start="79:10" pos:end="79:10">i</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>;</init> <condition pos:start="79:17" pos:end="79:46"><expr pos:start="79:17" pos:end="79:45"><name pos:start="79:17" pos:end="79:17">i</name> <operator pos:start="79:19" pos:end="79:19">&lt;</operator> <operator pos:start="79:21" pos:end="79:21">(</operator><ternary pos:start="79:22" pos:end="79:44"><condition pos:start="79:22" pos:end="79:38"><expr pos:start="79:22" pos:end="79:36"><name pos:start="79:22" pos:end="79:36"><name pos:start="79:22" pos:end="79:22">s</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:36">channel_mode</name></name></expr> ?</condition><then pos:start="79:40" pos:end="79:40"> <expr pos:start="79:40" pos:end="79:40"><literal type="number" pos:start="79:40" pos:end="79:40">1</literal></expr> </then><else pos:start="79:42" pos:end="79:44">: <expr pos:start="79:44" pos:end="79:44"><literal type="number" pos:start="79:44" pos:end="79:44">2</literal></expr></else></ternary><operator pos:start="79:45" pos:end="79:45">)</operator></expr>;</condition> <incr pos:start="79:48" pos:end="79:50"><expr pos:start="79:48" pos:end="79:50"><name pos:start="79:48" pos:end="79:48">i</name><operator pos:start="79:49" pos:end="79:50">++</operator></expr></incr>)</control> <block pos:start="79:53" pos:end="89:5">{<block_content pos:start="81:9" pos:end="87:9">

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><call pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:17">skip_bits</name><argument_list pos:start="81:18" pos:end="81:25">(<argument pos:start="81:19" pos:end="81:21"><expr pos:start="81:19" pos:end="81:21"><name pos:start="81:19" pos:end="81:21">gbc</name></expr></argument>, <argument pos:start="81:24" pos:end="81:24"><expr pos:start="81:24" pos:end="81:24"><literal type="number" pos:start="81:24" pos:end="81:24">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="81:28" pos:end="81:55">// skip dialog normalization</comment>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:27">(<expr pos:start="83:13" pos:end="83:26"><call pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:21">get_bits1</name><argument_list pos:start="83:22" pos:end="83:26">(<argument pos:start="83:23" pos:end="83:25"><expr pos:start="83:23" pos:end="83:25"><name pos:start="83:23" pos:end="83:25">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:29" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:30">

            <expr_stmt pos:start="85:13" pos:end="85:30"><expr pos:start="85:13" pos:end="85:29"><call pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:21">skip_bits</name><argument_list pos:start="85:22" pos:end="85:29">(<argument pos:start="85:23" pos:end="85:25"><expr pos:start="85:23" pos:end="85:25"><name pos:start="85:23" pos:end="85:25">gbc</name></expr></argument>, <argument pos:start="85:28" pos:end="85:28"><expr pos:start="85:28" pos:end="85:28"><literal type="number" pos:start="85:28" pos:end="85:28">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="85:32" pos:end="85:60">// skip compression gain word</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="93:5" pos:end="93:38">/* dependent stream channel map */</comment>

    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:51">(<expr pos:start="95:9" pos:end="95:50"><name pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:21">frame_type</name></name> <operator pos:start="95:23" pos:end="95:24">==</operator> <name pos:start="95:26" pos:end="95:50">EAC3_FRAME_TYPE_DEPENDENT</name></expr>)</condition> <block pos:start="95:53" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:9">

        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:27">(<expr pos:start="97:13" pos:end="97:26"><call pos:start="97:13" pos:end="97:26"><name pos:start="97:13" pos:end="97:21">get_bits1</name><argument_list pos:start="97:22" pos:end="97:26">(<argument pos:start="97:23" pos:end="97:25"><expr pos:start="97:23" pos:end="97:25"><name pos:start="97:23" pos:end="97:25">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:29" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:31">

            <expr_stmt pos:start="99:13" pos:end="99:31"><expr pos:start="99:13" pos:end="99:30"><call pos:start="99:13" pos:end="99:30"><name pos:start="99:13" pos:end="99:21">skip_bits</name><argument_list pos:start="99:22" pos:end="99:30">(<argument pos:start="99:23" pos:end="99:25"><expr pos:start="99:23" pos:end="99:25"><name pos:start="99:23" pos:end="99:25">gbc</name></expr></argument>, <argument pos:start="99:28" pos:end="99:29"><expr pos:start="99:28" pos:end="99:29"><literal type="number" pos:start="99:28" pos:end="99:29">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="99:33" pos:end="99:58">// skip custom channel map</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:25">/* mixing metadata */</comment>

    <if_stmt pos:start="109:5" pos:end="235:5"><if pos:start="109:5" pos:end="235:5">if <condition pos:start="109:8" pos:end="109:23">(<expr pos:start="109:9" pos:end="109:22"><call pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:17">get_bits1</name><argument_list pos:start="109:18" pos:end="109:22">(<argument pos:start="109:19" pos:end="109:21"><expr pos:start="109:19" pos:end="109:21"><name pos:start="109:19" pos:end="109:21">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:25" pos:end="235:5">{<block_content pos:start="113:9" pos:end="233:9">

        <comment type="block" pos:start="111:9" pos:end="111:44">/* center and surround mix levels */</comment>

        <if_stmt pos:start="113:9" pos:end="137:9"><if pos:start="113:9" pos:end="137:9">if <condition pos:start="113:12" pos:end="113:48">(<expr pos:start="113:13" pos:end="113:47"><name pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:27">channel_mode</name></name> <operator pos:start="113:29" pos:end="113:29">&gt;</operator> <name pos:start="113:31" pos:end="113:47">AC3_CHMODE_STEREO</name></expr>)</condition> <block pos:start="113:50" pos:end="137:9">{<block_content pos:start="115:13" pos:end="135:13">

            <expr_stmt pos:start="115:13" pos:end="115:52"><expr pos:start="115:13" pos:end="115:51"><name pos:start="115:13" pos:end="115:32"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:32">preferred_downmix</name></name> <operator pos:start="115:34" pos:end="115:34">=</operator> <call pos:start="115:36" pos:end="115:51"><name pos:start="115:36" pos:end="115:43">get_bits</name><argument_list pos:start="115:44" pos:end="115:51">(<argument pos:start="115:45" pos:end="115:47"><expr pos:start="115:45" pos:end="115:47"><name pos:start="115:45" pos:end="115:47">gbc</name></expr></argument>, <argument pos:start="115:50" pos:end="115:50"><expr pos:start="115:50" pos:end="115:50"><literal type="number" pos:start="115:50" pos:end="115:50">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="125:13"><if pos:start="117:13" pos:end="125:13">if <condition pos:start="117:16" pos:end="117:36">(<expr pos:start="117:17" pos:end="117:35"><name pos:start="117:17" pos:end="117:31"><name pos:start="117:17" pos:end="117:17">s</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:31">channel_mode</name></name> <operator pos:start="117:33" pos:end="117:33">&amp;</operator> <literal type="number" pos:start="117:35" pos:end="117:35">1</literal></expr>)</condition> <block pos:start="117:38" pos:end="125:13">{<block_content pos:start="121:17" pos:end="123:60">

                <comment type="block" pos:start="119:17" pos:end="119:51">/* if three front channels exist */</comment>

                <expr_stmt pos:start="121:17" pos:end="121:60"><expr pos:start="121:17" pos:end="121:59"><name pos:start="121:17" pos:end="121:40"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:40">center_mix_level_ltrt</name></name> <operator pos:start="121:42" pos:end="121:42">=</operator> <call pos:start="121:44" pos:end="121:59"><name pos:start="121:44" pos:end="121:51">get_bits</name><argument_list pos:start="121:52" pos:end="121:59">(<argument pos:start="121:53" pos:end="121:55"><expr pos:start="121:53" pos:end="121:55"><name pos:start="121:53" pos:end="121:55">gbc</name></expr></argument>, <argument pos:start="121:58" pos:end="121:58"><expr pos:start="121:58" pos:end="121:58"><literal type="number" pos:start="121:58" pos:end="121:58">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:60"><expr pos:start="123:17" pos:end="123:59"><name pos:start="123:17" pos:end="123:35"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:35">center_mix_level</name></name>      <operator pos:start="123:42" pos:end="123:42">=</operator> <call pos:start="123:44" pos:end="123:59"><name pos:start="123:44" pos:end="123:51">get_bits</name><argument_list pos:start="123:52" pos:end="123:59">(<argument pos:start="123:53" pos:end="123:55"><expr pos:start="123:53" pos:end="123:55"><name pos:start="123:53" pos:end="123:55">gbc</name></expr></argument>, <argument pos:start="123:58" pos:end="123:58"><expr pos:start="123:58" pos:end="123:58"><literal type="number" pos:start="123:58" pos:end="123:58">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="127:13" pos:end="135:13"><if pos:start="127:13" pos:end="135:13">if <condition pos:start="127:16" pos:end="127:36">(<expr pos:start="127:17" pos:end="127:35"><name pos:start="127:17" pos:end="127:31"><name pos:start="127:17" pos:end="127:17">s</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:31">channel_mode</name></name> <operator pos:start="127:33" pos:end="127:33">&amp;</operator> <literal type="number" pos:start="127:35" pos:end="127:35">4</literal></expr>)</condition> <block pos:start="127:38" pos:end="135:13">{<block_content pos:start="131:17" pos:end="133:77">

                <comment type="block" pos:start="129:17" pos:end="129:50">/* if a surround channel exists */</comment>

                <expr_stmt pos:start="131:17" pos:end="131:77"><expr pos:start="131:17" pos:end="131:76"><name pos:start="131:17" pos:end="131:42"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:42">surround_mix_level_ltrt</name></name> <operator pos:start="131:44" pos:end="131:44">=</operator> <call pos:start="131:46" pos:end="131:76"><name pos:start="131:46" pos:end="131:52">av_clip</name><argument_list pos:start="131:53" pos:end="131:76">(<argument pos:start="131:54" pos:end="131:69"><expr pos:start="131:54" pos:end="131:69"><call pos:start="131:54" pos:end="131:69"><name pos:start="131:54" pos:end="131:61">get_bits</name><argument_list pos:start="131:62" pos:end="131:69">(<argument pos:start="131:63" pos:end="131:65"><expr pos:start="131:63" pos:end="131:65"><name pos:start="131:63" pos:end="131:65">gbc</name></expr></argument>, <argument pos:start="131:68" pos:end="131:68"><expr pos:start="131:68" pos:end="131:68"><literal type="number" pos:start="131:68" pos:end="131:68">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="131:72" pos:end="131:72"><expr pos:start="131:72" pos:end="131:72"><literal type="number" pos:start="131:72" pos:end="131:72">3</literal></expr></argument>, <argument pos:start="131:75" pos:end="131:75"><expr pos:start="131:75" pos:end="131:75"><literal type="number" pos:start="131:75" pos:end="131:75">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:77"><expr pos:start="133:17" pos:end="133:76"><name pos:start="133:17" pos:end="133:37"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:37">surround_mix_level</name></name>      <operator pos:start="133:44" pos:end="133:44">=</operator> <call pos:start="133:46" pos:end="133:76"><name pos:start="133:46" pos:end="133:52">av_clip</name><argument_list pos:start="133:53" pos:end="133:76">(<argument pos:start="133:54" pos:end="133:69"><expr pos:start="133:54" pos:end="133:69"><call pos:start="133:54" pos:end="133:69"><name pos:start="133:54" pos:end="133:61">get_bits</name><argument_list pos:start="133:62" pos:end="133:69">(<argument pos:start="133:63" pos:end="133:65"><expr pos:start="133:63" pos:end="133:65"><name pos:start="133:63" pos:end="133:65">gbc</name></expr></argument>, <argument pos:start="133:68" pos:end="133:68"><expr pos:start="133:68" pos:end="133:68"><literal type="number" pos:start="133:68" pos:end="133:68">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="133:72" pos:end="133:72"><expr pos:start="133:72" pos:end="133:72"><literal type="number" pos:start="133:72" pos:end="133:72">3</literal></expr></argument>, <argument pos:start="133:75" pos:end="133:75"><expr pos:start="133:75" pos:end="133:75"><literal type="number" pos:start="133:75" pos:end="133:75">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="141:9" pos:end="141:27">/* lfe mix level */</comment>

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:68">(<expr pos:start="143:13" pos:end="143:67"><name pos:start="143:13" pos:end="143:21"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:21">lfe_on</name></name> <operator pos:start="143:23" pos:end="143:24">&amp;&amp;</operator> <operator pos:start="143:26" pos:end="143:26">(</operator><name pos:start="143:27" pos:end="143:49"><name pos:start="143:27" pos:end="143:27">s</name><operator pos:start="143:28" pos:end="143:29">-&gt;</operator><name pos:start="143:30" pos:end="143:49">lfe_mix_level_exists</name></name> <operator pos:start="143:51" pos:end="143:51">=</operator> <call pos:start="143:53" pos:end="143:66"><name pos:start="143:53" pos:end="143:61">get_bits1</name><argument_list pos:start="143:62" pos:end="143:66">(<argument pos:start="143:63" pos:end="143:65"><expr pos:start="143:63" pos:end="143:65"><name pos:start="143:63" pos:end="143:65">gbc</name></expr></argument>)</argument_list></call><operator pos:start="143:67" pos:end="143:67">)</operator></expr>)</condition> <block pos:start="143:70" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:48">

            <expr_stmt pos:start="145:13" pos:end="145:48"><expr pos:start="145:13" pos:end="145:47"><name pos:start="145:13" pos:end="145:28"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:28">lfe_mix_level</name></name> <operator pos:start="145:30" pos:end="145:30">=</operator> <call pos:start="145:32" pos:end="145:47"><name pos:start="145:32" pos:end="145:39">get_bits</name><argument_list pos:start="145:40" pos:end="145:47">(<argument pos:start="145:41" pos:end="145:43"><expr pos:start="145:41" pos:end="145:43"><name pos:start="145:41" pos:end="145:43">gbc</name></expr></argument>, <argument pos:start="145:46" pos:end="145:46"><expr pos:start="145:46" pos:end="145:46"><literal type="number" pos:start="145:46" pos:end="145:46">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="151:9" pos:end="151:63">/* info for mixing with other streams and substreams */</comment>

        <if_stmt pos:start="153:9" pos:end="233:9"><if pos:start="153:9" pos:end="233:9">if <condition pos:start="153:12" pos:end="153:57">(<expr pos:start="153:13" pos:end="153:56"><name pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:25">frame_type</name></name> <operator pos:start="153:27" pos:end="153:28">==</operator> <name pos:start="153:30" pos:end="153:56">EAC3_FRAME_TYPE_INDEPENDENT</name></expr>)</condition> <block pos:start="153:59" pos:end="233:9">{<block_content pos:start="155:13" pos:end="231:13">

            <for pos:start="155:13" pos:end="165:13">for <control pos:start="155:17" pos:end="155:59">(<init pos:start="155:18" pos:end="155:23"><expr pos:start="155:18" pos:end="155:22"><name pos:start="155:18" pos:end="155:18">i</name> <operator pos:start="155:20" pos:end="155:20">=</operator> <literal type="number" pos:start="155:22" pos:end="155:22">0</literal></expr>;</init> <condition pos:start="155:25" pos:end="155:54"><expr pos:start="155:25" pos:end="155:53"><name pos:start="155:25" pos:end="155:25">i</name> <operator pos:start="155:27" pos:end="155:27">&lt;</operator> <operator pos:start="155:29" pos:end="155:29">(</operator><ternary pos:start="155:30" pos:end="155:52"><condition pos:start="155:30" pos:end="155:46"><expr pos:start="155:30" pos:end="155:44"><name pos:start="155:30" pos:end="155:44"><name pos:start="155:30" pos:end="155:30">s</name><operator pos:start="155:31" pos:end="155:32">-&gt;</operator><name pos:start="155:33" pos:end="155:44">channel_mode</name></name></expr> ?</condition><then pos:start="155:48" pos:end="155:48"> <expr pos:start="155:48" pos:end="155:48"><literal type="number" pos:start="155:48" pos:end="155:48">1</literal></expr> </then><else pos:start="155:50" pos:end="155:52">: <expr pos:start="155:52" pos:end="155:52"><literal type="number" pos:start="155:52" pos:end="155:52">2</literal></expr></else></ternary><operator pos:start="155:53" pos:end="155:53">)</operator></expr>;</condition> <incr pos:start="155:56" pos:end="155:58"><expr pos:start="155:56" pos:end="155:58"><name pos:start="155:56" pos:end="155:56">i</name><operator pos:start="155:57" pos:end="155:58">++</operator></expr></incr>)</control> <block pos:start="155:61" pos:end="165:13">{<block_content pos:start="159:17" pos:end="163:17">

                <comment type="line" pos:start="157:17" pos:end="157:51">// TODO: apply program scale factor</comment>

                <if_stmt pos:start="159:17" pos:end="163:17"><if pos:start="159:17" pos:end="163:17">if <condition pos:start="159:20" pos:end="159:35">(<expr pos:start="159:21" pos:end="159:34"><call pos:start="159:21" pos:end="159:34"><name pos:start="159:21" pos:end="159:29">get_bits1</name><argument_list pos:start="159:30" pos:end="159:34">(<argument pos:start="159:31" pos:end="159:33"><expr pos:start="159:31" pos:end="159:33"><name pos:start="159:31" pos:end="159:33">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:37" pos:end="163:17">{<block_content pos:start="161:21" pos:end="161:38">

                    <expr_stmt pos:start="161:21" pos:end="161:38"><expr pos:start="161:21" pos:end="161:37"><call pos:start="161:21" pos:end="161:37"><name pos:start="161:21" pos:end="161:29">skip_bits</name><argument_list pos:start="161:30" pos:end="161:37">(<argument pos:start="161:31" pos:end="161:33"><expr pos:start="161:31" pos:end="161:33"><name pos:start="161:31" pos:end="161:33">gbc</name></expr></argument>, <argument pos:start="161:36" pos:end="161:36"><expr pos:start="161:36" pos:end="161:36"><literal type="number" pos:start="161:36" pos:end="161:36">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="161:41" pos:end="161:68">// skip program scale factor</comment>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="167:13" pos:end="171:13"><if pos:start="167:13" pos:end="171:13">if <condition pos:start="167:16" pos:end="167:31">(<expr pos:start="167:17" pos:end="167:30"><call pos:start="167:17" pos:end="167:30"><name pos:start="167:17" pos:end="167:25">get_bits1</name><argument_list pos:start="167:26" pos:end="167:30">(<argument pos:start="167:27" pos:end="167:29"><expr pos:start="167:27" pos:end="167:29"><name pos:start="167:27" pos:end="167:29">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:33" pos:end="171:13">{<block_content pos:start="169:17" pos:end="169:34">

                <expr_stmt pos:start="169:17" pos:end="169:34"><expr pos:start="169:17" pos:end="169:33"><call pos:start="169:17" pos:end="169:33"><name pos:start="169:17" pos:end="169:25">skip_bits</name><argument_list pos:start="169:26" pos:end="169:33">(<argument pos:start="169:27" pos:end="169:29"><expr pos:start="169:27" pos:end="169:29"><name pos:start="169:27" pos:end="169:29">gbc</name></expr></argument>, <argument pos:start="169:32" pos:end="169:32"><expr pos:start="169:32" pos:end="169:32"><literal type="number" pos:start="169:32" pos:end="169:32">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="169:37" pos:end="169:73">// skip external program scale factor</comment>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="173:13" pos:end="173:44">/* skip mixing parameter data */</comment>

            <switch pos:start="175:13" pos:end="191:13">switch<condition pos:start="175:19" pos:end="175:36">(<expr pos:start="175:20" pos:end="175:35"><call pos:start="175:20" pos:end="175:35"><name pos:start="175:20" pos:end="175:27">get_bits</name><argument_list pos:start="175:28" pos:end="175:35">(<argument pos:start="175:29" pos:end="175:31"><expr pos:start="175:29" pos:end="175:31"><name pos:start="175:29" pos:end="175:31">gbc</name></expr></argument>, <argument pos:start="175:34" pos:end="175:34"><expr pos:start="175:34" pos:end="175:34"><literal type="number" pos:start="175:34" pos:end="175:34">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="175:38" pos:end="191:13">{<block_content pos:start="177:17" pos:end="189:17">

                <case pos:start="177:17" pos:end="177:23">case <expr pos:start="177:22" pos:end="177:22"><literal type="number" pos:start="177:22" pos:end="177:22">1</literal></expr>:</case> <expr_stmt pos:start="177:25" pos:end="177:42"><expr pos:start="177:25" pos:end="177:41"><call pos:start="177:25" pos:end="177:41"><name pos:start="177:25" pos:end="177:33">skip_bits</name><argument_list pos:start="177:34" pos:end="177:41">(<argument pos:start="177:35" pos:end="177:37"><expr pos:start="177:35" pos:end="177:37"><name pos:start="177:35" pos:end="177:37">gbc</name></expr></argument>, <argument pos:start="177:40" pos:end="177:40"><expr pos:start="177:40" pos:end="177:40"><literal type="number" pos:start="177:40" pos:end="177:40">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <break pos:start="177:45" pos:end="177:50">break;</break>

                <case pos:start="179:17" pos:end="179:23">case <expr pos:start="179:22" pos:end="179:22"><literal type="number" pos:start="179:22" pos:end="179:22">2</literal></expr>:</case> <expr_stmt pos:start="179:25" pos:end="179:43"><expr pos:start="179:25" pos:end="179:42"><call pos:start="179:25" pos:end="179:42"><name pos:start="179:25" pos:end="179:33">skip_bits</name><argument_list pos:start="179:34" pos:end="179:42">(<argument pos:start="179:35" pos:end="179:37"><expr pos:start="179:35" pos:end="179:37"><name pos:start="179:35" pos:end="179:37">gbc</name></expr></argument>, <argument pos:start="179:40" pos:end="179:41"><expr pos:start="179:40" pos:end="179:41"><literal type="number" pos:start="179:40" pos:end="179:41">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="179:45" pos:end="179:50">break;</break>

                <case pos:start="181:17" pos:end="181:23">case <expr pos:start="181:22" pos:end="181:22"><literal type="number" pos:start="181:22" pos:end="181:22">3</literal></expr>:</case> <block pos:start="181:25" pos:end="189:17">{<block_content pos:start="183:21" pos:end="187:26">

                    <decl_stmt pos:start="183:21" pos:end="183:68"><decl pos:start="183:21" pos:end="183:67"><type pos:start="183:21" pos:end="183:23"><name pos:start="183:21" pos:end="183:23">int</name></type> <name pos:start="183:25" pos:end="183:37">mix_data_size</name> <init pos:start="183:39" pos:end="183:67">= <expr pos:start="183:41" pos:end="183:67"><operator pos:start="183:41" pos:end="183:41">(</operator><call pos:start="183:42" pos:end="183:57"><name pos:start="183:42" pos:end="183:49">get_bits</name><argument_list pos:start="183:50" pos:end="183:57">(<argument pos:start="183:51" pos:end="183:53"><expr pos:start="183:51" pos:end="183:53"><name pos:start="183:51" pos:end="183:53">gbc</name></expr></argument>, <argument pos:start="183:56" pos:end="183:56"><expr pos:start="183:56" pos:end="183:56"><literal type="number" pos:start="183:56" pos:end="183:56">5</literal></expr></argument>)</argument_list></call> <operator pos:start="183:59" pos:end="183:59">+</operator> <literal type="number" pos:start="183:61" pos:end="183:61">2</literal><operator pos:start="183:62" pos:end="183:62">)</operator> <operator pos:start="183:64" pos:end="183:65">&lt;&lt;</operator> <literal type="number" pos:start="183:67" pos:end="183:67">3</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:55"><expr pos:start="185:21" pos:end="185:54"><call pos:start="185:21" pos:end="185:54"><name pos:start="185:21" pos:end="185:34">skip_bits_long</name><argument_list pos:start="185:35" pos:end="185:54">(<argument pos:start="185:36" pos:end="185:38"><expr pos:start="185:36" pos:end="185:38"><name pos:start="185:36" pos:end="185:38">gbc</name></expr></argument>, <argument pos:start="185:41" pos:end="185:53"><expr pos:start="185:41" pos:end="185:53"><name pos:start="185:41" pos:end="185:53">mix_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="187:21" pos:end="187:26">break;</break>

                </block_content>}</block>

            </block_content>}</block></switch>

            <comment type="block" pos:start="193:13" pos:end="193:67">/* skip pan information for mono or dual mono source */</comment>

            <if_stmt pos:start="195:13" pos:end="215:13"><if pos:start="195:13" pos:end="215:13">if <condition pos:start="195:16" pos:end="195:52">(<expr pos:start="195:17" pos:end="195:51"><name pos:start="195:17" pos:end="195:31"><name pos:start="195:17" pos:end="195:17">s</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:31">channel_mode</name></name> <operator pos:start="195:33" pos:end="195:33">&lt;</operator> <name pos:start="195:35" pos:end="195:51">AC3_CHMODE_STEREO</name></expr>)</condition> <block pos:start="195:54" pos:end="215:13">{<block_content pos:start="197:17" pos:end="213:17">

                <for pos:start="197:17" pos:end="213:17">for <control pos:start="197:21" pos:end="197:63">(<init pos:start="197:22" pos:end="197:27"><expr pos:start="197:22" pos:end="197:26"><name pos:start="197:22" pos:end="197:22">i</name> <operator pos:start="197:24" pos:end="197:24">=</operator> <literal type="number" pos:start="197:26" pos:end="197:26">0</literal></expr>;</init> <condition pos:start="197:29" pos:end="197:58"><expr pos:start="197:29" pos:end="197:57"><name pos:start="197:29" pos:end="197:29">i</name> <operator pos:start="197:31" pos:end="197:31">&lt;</operator> <operator pos:start="197:33" pos:end="197:33">(</operator><ternary pos:start="197:34" pos:end="197:56"><condition pos:start="197:34" pos:end="197:50"><expr pos:start="197:34" pos:end="197:48"><name pos:start="197:34" pos:end="197:48"><name pos:start="197:34" pos:end="197:34">s</name><operator pos:start="197:35" pos:end="197:36">-&gt;</operator><name pos:start="197:37" pos:end="197:48">channel_mode</name></name></expr> ?</condition><then pos:start="197:52" pos:end="197:52"> <expr pos:start="197:52" pos:end="197:52"><literal type="number" pos:start="197:52" pos:end="197:52">1</literal></expr> </then><else pos:start="197:54" pos:end="197:56">: <expr pos:start="197:56" pos:end="197:56"><literal type="number" pos:start="197:56" pos:end="197:56">2</literal></expr></else></ternary><operator pos:start="197:57" pos:end="197:57">)</operator></expr>;</condition> <incr pos:start="197:60" pos:end="197:62"><expr pos:start="197:60" pos:end="197:62"><name pos:start="197:60" pos:end="197:60">i</name><operator pos:start="197:61" pos:end="197:62">++</operator></expr></incr>)</control> <block pos:start="197:65" pos:end="213:17">{<block_content pos:start="199:21" pos:end="211:21">

                    <if_stmt pos:start="199:21" pos:end="211:21"><if pos:start="199:21" pos:end="211:21">if <condition pos:start="199:24" pos:end="199:39">(<expr pos:start="199:25" pos:end="199:38"><call pos:start="199:25" pos:end="199:38"><name pos:start="199:25" pos:end="199:33">get_bits1</name><argument_list pos:start="199:34" pos:end="199:38">(<argument pos:start="199:35" pos:end="199:37"><expr pos:start="199:35" pos:end="199:37"><name pos:start="199:35" pos:end="199:37">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:41" pos:end="211:21">{<block_content pos:start="207:25" pos:end="209:42">

                        <comment type="block" pos:start="201:25" pos:end="205:60">/* note: this is not in the ATSC A/52B specification

                           reference: ETSI TS 102 366 V1.1.1

                                      section: E.1.3.1.25 */</comment>

                        <expr_stmt pos:start="207:25" pos:end="207:42"><expr pos:start="207:25" pos:end="207:41"><call pos:start="207:25" pos:end="207:41"><name pos:start="207:25" pos:end="207:33">skip_bits</name><argument_list pos:start="207:34" pos:end="207:41">(<argument pos:start="207:35" pos:end="207:37"><expr pos:start="207:35" pos:end="207:37"><name pos:start="207:35" pos:end="207:37">gbc</name></expr></argument>, <argument pos:start="207:40" pos:end="207:40"><expr pos:start="207:40" pos:end="207:40"><literal type="number" pos:start="207:40" pos:end="207:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="207:45" pos:end="207:76">// skip pan mean direction index</comment>

                        <expr_stmt pos:start="209:25" pos:end="209:42"><expr pos:start="209:25" pos:end="209:41"><call pos:start="209:25" pos:end="209:41"><name pos:start="209:25" pos:end="209:33">skip_bits</name><argument_list pos:start="209:34" pos:end="209:41">(<argument pos:start="209:35" pos:end="209:37"><expr pos:start="209:35" pos:end="209:37"><name pos:start="209:35" pos:end="209:37">gbc</name></expr></argument>, <argument pos:start="209:40" pos:end="209:40"><expr pos:start="209:40" pos:end="209:40"><literal type="number" pos:start="209:40" pos:end="209:40">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="209:45" pos:end="209:73">// skip reserved paninfo bits</comment>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="217:13" pos:end="217:55">/* skip mixing configuration information */</comment>

            <if_stmt pos:start="219:13" pos:end="231:13"><if pos:start="219:13" pos:end="231:13">if <condition pos:start="219:16" pos:end="219:31">(<expr pos:start="219:17" pos:end="219:30"><call pos:start="219:17" pos:end="219:30"><name pos:start="219:17" pos:end="219:25">get_bits1</name><argument_list pos:start="219:26" pos:end="219:30">(<argument pos:start="219:27" pos:end="219:29"><expr pos:start="219:27" pos:end="219:29"><name pos:start="219:27" pos:end="219:29">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="219:33" pos:end="231:13">{<block_content pos:start="221:17" pos:end="229:17">

                <for pos:start="221:17" pos:end="229:17">for <control pos:start="221:21" pos:end="221:57">(<init pos:start="221:22" pos:end="221:29"><expr pos:start="221:22" pos:end="221:28"><name pos:start="221:22" pos:end="221:24">blk</name> <operator pos:start="221:26" pos:end="221:26">=</operator> <literal type="number" pos:start="221:28" pos:end="221:28">0</literal></expr>;</init> <condition pos:start="221:31" pos:end="221:50"><expr pos:start="221:31" pos:end="221:49"><name pos:start="221:31" pos:end="221:33">blk</name> <operator pos:start="221:35" pos:end="221:35">&lt;</operator> <name pos:start="221:37" pos:end="221:49"><name pos:start="221:37" pos:end="221:37">s</name><operator pos:start="221:38" pos:end="221:39">-&gt;</operator><name pos:start="221:40" pos:end="221:49">num_blocks</name></name></expr>;</condition> <incr pos:start="221:52" pos:end="221:56"><expr pos:start="221:52" pos:end="221:56"><name pos:start="221:52" pos:end="221:54">blk</name><operator pos:start="221:55" pos:end="221:56">++</operator></expr></incr>)</control> <block pos:start="221:59" pos:end="229:17">{<block_content pos:start="223:21" pos:end="227:21">

                    <if_stmt pos:start="223:21" pos:end="227:21"><if pos:start="223:21" pos:end="227:21">if <condition pos:start="223:24" pos:end="223:61">(<expr pos:start="223:25" pos:end="223:60"><name pos:start="223:25" pos:end="223:37"><name pos:start="223:25" pos:end="223:25">s</name><operator pos:start="223:26" pos:end="223:27">-&gt;</operator><name pos:start="223:28" pos:end="223:37">num_blocks</name></name> <operator pos:start="223:39" pos:end="223:40">==</operator> <literal type="number" pos:start="223:42" pos:end="223:42">1</literal> <operator pos:start="223:44" pos:end="223:45">||</operator> <call pos:start="223:47" pos:end="223:60"><name pos:start="223:47" pos:end="223:55">get_bits1</name><argument_list pos:start="223:56" pos:end="223:60">(<argument pos:start="223:57" pos:end="223:59"><expr pos:start="223:57" pos:end="223:59"><name pos:start="223:57" pos:end="223:59">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="223:63" pos:end="227:21">{<block_content pos:start="225:25" pos:end="225:42">

                        <expr_stmt pos:start="225:25" pos:end="225:42"><expr pos:start="225:25" pos:end="225:41"><call pos:start="225:25" pos:end="225:41"><name pos:start="225:25" pos:end="225:33">skip_bits</name><argument_list pos:start="225:34" pos:end="225:41">(<argument pos:start="225:35" pos:end="225:37"><expr pos:start="225:35" pos:end="225:37"><name pos:start="225:35" pos:end="225:37">gbc</name></expr></argument>, <argument pos:start="225:40" pos:end="225:40"><expr pos:start="225:40" pos:end="225:40"><literal type="number" pos:start="225:40" pos:end="225:40">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:32">/* informational metadata */</comment>

    <if_stmt pos:start="241:5" pos:end="277:5"><if pos:start="241:5" pos:end="277:5">if <condition pos:start="241:8" pos:end="241:23">(<expr pos:start="241:9" pos:end="241:22"><call pos:start="241:9" pos:end="241:22"><name pos:start="241:9" pos:end="241:17">get_bits1</name><argument_list pos:start="241:18" pos:end="241:22">(<argument pos:start="241:19" pos:end="241:21"><expr pos:start="241:19" pos:end="241:21"><name pos:start="241:19" pos:end="241:21">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="241:25" pos:end="277:5">{<block_content pos:start="243:9" pos:end="275:9">

        <expr_stmt pos:start="243:9" pos:end="243:45"><expr pos:start="243:9" pos:end="243:44"><name pos:start="243:9" pos:end="243:25"><name pos:start="243:9" pos:end="243:9">s</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:25">bitstream_mode</name></name> <operator pos:start="243:27" pos:end="243:27">=</operator> <call pos:start="243:29" pos:end="243:44"><name pos:start="243:29" pos:end="243:36">get_bits</name><argument_list pos:start="243:37" pos:end="243:44">(<argument pos:start="243:38" pos:end="243:40"><expr pos:start="243:38" pos:end="243:40"><name pos:start="243:38" pos:end="243:40">gbc</name></expr></argument>, <argument pos:start="243:43" pos:end="243:43"><expr pos:start="243:43" pos:end="243:43"><literal type="number" pos:start="243:43" pos:end="243:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:26"><expr pos:start="245:9" pos:end="245:25"><call pos:start="245:9" pos:end="245:25"><name pos:start="245:9" pos:end="245:17">skip_bits</name><argument_list pos:start="245:18" pos:end="245:25">(<argument pos:start="245:19" pos:end="245:21"><expr pos:start="245:19" pos:end="245:21"><name pos:start="245:19" pos:end="245:21">gbc</name></expr></argument>, <argument pos:start="245:24" pos:end="245:24"><expr pos:start="245:24" pos:end="245:24"><literal type="number" pos:start="245:24" pos:end="245:24">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="245:28" pos:end="245:75">// skip copyright bit and original bitstream bit</comment>

        <if_stmt pos:start="247:9" pos:end="253:9"><if pos:start="247:9" pos:end="253:9">if <condition pos:start="247:12" pos:end="247:49">(<expr pos:start="247:13" pos:end="247:48"><name pos:start="247:13" pos:end="247:27"><name pos:start="247:13" pos:end="247:13">s</name><operator pos:start="247:14" pos:end="247:15">-&gt;</operator><name pos:start="247:16" pos:end="247:27">channel_mode</name></name> <operator pos:start="247:29" pos:end="247:30">==</operator> <name pos:start="247:32" pos:end="247:48">AC3_CHMODE_STEREO</name></expr>)</condition> <block pos:start="247:51" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:55">

            <expr_stmt pos:start="249:13" pos:end="249:55"><expr pos:start="249:13" pos:end="249:54"><name pos:start="249:13" pos:end="249:34"><name pos:start="249:13" pos:end="249:13">s</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:34">dolby_surround_mode</name></name>  <operator pos:start="249:37" pos:end="249:37">=</operator> <call pos:start="249:39" pos:end="249:54"><name pos:start="249:39" pos:end="249:46">get_bits</name><argument_list pos:start="249:47" pos:end="249:54">(<argument pos:start="249:48" pos:end="249:50"><expr pos:start="249:48" pos:end="249:50"><name pos:start="249:48" pos:end="249:50">gbc</name></expr></argument>, <argument pos:start="249:53" pos:end="249:53"><expr pos:start="249:53" pos:end="249:53"><literal type="number" pos:start="249:53" pos:end="249:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:55"><expr pos:start="251:13" pos:end="251:54"><name pos:start="251:13" pos:end="251:35"><name pos:start="251:13" pos:end="251:13">s</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:35">dolby_headphone_mode</name></name> <operator pos:start="251:37" pos:end="251:37">=</operator> <call pos:start="251:39" pos:end="251:54"><name pos:start="251:39" pos:end="251:46">get_bits</name><argument_list pos:start="251:47" pos:end="251:54">(<argument pos:start="251:48" pos:end="251:50"><expr pos:start="251:48" pos:end="251:50"><name pos:start="251:48" pos:end="251:50">gbc</name></expr></argument>, <argument pos:start="251:53" pos:end="251:53"><expr pos:start="251:53" pos:end="251:53"><literal type="number" pos:start="251:53" pos:end="251:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="255:9" pos:end="259:9"><if pos:start="255:9" pos:end="259:9">if <condition pos:start="255:12" pos:end="255:47">(<expr pos:start="255:13" pos:end="255:46"><name pos:start="255:13" pos:end="255:27"><name pos:start="255:13" pos:end="255:13">s</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:27">channel_mode</name></name> <operator pos:start="255:29" pos:end="255:30">&gt;=</operator> <name pos:start="255:32" pos:end="255:46">AC3_CHMODE_2F2R</name></expr>)</condition> <block pos:start="255:49" pos:end="259:9">{<block_content pos:start="257:13" pos:end="257:57">

            <expr_stmt pos:start="257:13" pos:end="257:57"><expr pos:start="257:13" pos:end="257:56"><name pos:start="257:13" pos:end="257:37"><name pos:start="257:13" pos:end="257:13">s</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:37">dolby_surround_ex_mode</name></name> <operator pos:start="257:39" pos:end="257:39">=</operator> <call pos:start="257:41" pos:end="257:56"><name pos:start="257:41" pos:end="257:48">get_bits</name><argument_list pos:start="257:49" pos:end="257:56">(<argument pos:start="257:50" pos:end="257:52"><expr pos:start="257:50" pos:end="257:52"><name pos:start="257:50" pos:end="257:52">gbc</name></expr></argument>, <argument pos:start="257:55" pos:end="257:55"><expr pos:start="257:55" pos:end="257:55"><literal type="number" pos:start="257:55" pos:end="257:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="261:9" pos:end="269:9">for <control pos:start="261:13" pos:end="261:55">(<init pos:start="261:14" pos:end="261:19"><expr pos:start="261:14" pos:end="261:18"><name pos:start="261:14" pos:end="261:14">i</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <literal type="number" pos:start="261:18" pos:end="261:18">0</literal></expr>;</init> <condition pos:start="261:21" pos:end="261:50"><expr pos:start="261:21" pos:end="261:49"><name pos:start="261:21" pos:end="261:21">i</name> <operator pos:start="261:23" pos:end="261:23">&lt;</operator> <operator pos:start="261:25" pos:end="261:25">(</operator><ternary pos:start="261:26" pos:end="261:48"><condition pos:start="261:26" pos:end="261:42"><expr pos:start="261:26" pos:end="261:40"><name pos:start="261:26" pos:end="261:40"><name pos:start="261:26" pos:end="261:26">s</name><operator pos:start="261:27" pos:end="261:28">-&gt;</operator><name pos:start="261:29" pos:end="261:40">channel_mode</name></name></expr> ?</condition><then pos:start="261:44" pos:end="261:44"> <expr pos:start="261:44" pos:end="261:44"><literal type="number" pos:start="261:44" pos:end="261:44">1</literal></expr> </then><else pos:start="261:46" pos:end="261:48">: <expr pos:start="261:48" pos:end="261:48"><literal type="number" pos:start="261:48" pos:end="261:48">2</literal></expr></else></ternary><operator pos:start="261:49" pos:end="261:49">)</operator></expr>;</condition> <incr pos:start="261:52" pos:end="261:54"><expr pos:start="261:52" pos:end="261:54"><name pos:start="261:52" pos:end="261:52">i</name><operator pos:start="261:53" pos:end="261:54">++</operator></expr></incr>)</control> <block pos:start="261:57" pos:end="269:9">{<block_content pos:start="263:13" pos:end="267:13">

            <if_stmt pos:start="263:13" pos:end="267:13"><if pos:start="263:13" pos:end="267:13">if <condition pos:start="263:16" pos:end="263:31">(<expr pos:start="263:17" pos:end="263:30"><call pos:start="263:17" pos:end="263:30"><name pos:start="263:17" pos:end="263:25">get_bits1</name><argument_list pos:start="263:26" pos:end="263:30">(<argument pos:start="263:27" pos:end="263:29"><expr pos:start="263:27" pos:end="263:29"><name pos:start="263:27" pos:end="263:29">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="263:33" pos:end="267:13">{<block_content pos:start="265:17" pos:end="265:34">

                <expr_stmt pos:start="265:17" pos:end="265:34"><expr pos:start="265:17" pos:end="265:33"><call pos:start="265:17" pos:end="265:33"><name pos:start="265:17" pos:end="265:25">skip_bits</name><argument_list pos:start="265:26" pos:end="265:33">(<argument pos:start="265:27" pos:end="265:29"><expr pos:start="265:27" pos:end="265:29"><name pos:start="265:27" pos:end="265:29">gbc</name></expr></argument>, <argument pos:start="265:32" pos:end="265:32"><expr pos:start="265:32" pos:end="265:32"><literal type="number" pos:start="265:32" pos:end="265:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="265:36" pos:end="265:87">// skip mix level, room type, and A/D converter type</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="271:9" pos:end="275:9"><if pos:start="271:9" pos:end="275:9">if <condition pos:start="271:12" pos:end="271:64">(<expr pos:start="271:13" pos:end="271:63"><name pos:start="271:13" pos:end="271:39"><name pos:start="271:13" pos:end="271:13">s</name><operator pos:start="271:14" pos:end="271:15">-&gt;</operator><name pos:start="271:16" pos:end="271:31">bit_alloc_params</name><operator pos:start="271:32" pos:end="271:32">.</operator><name pos:start="271:33" pos:end="271:39">sr_code</name></name> <operator pos:start="271:41" pos:end="271:42">!=</operator> <name pos:start="271:44" pos:end="271:63">EAC3_SR_CODE_REDUCED</name></expr>)</condition> <block pos:start="271:66" pos:end="275:9">{<block_content pos:start="273:13" pos:end="273:28">

            <expr_stmt pos:start="273:13" pos:end="273:28"><expr pos:start="273:13" pos:end="273:27"><call pos:start="273:13" pos:end="273:27"><name pos:start="273:13" pos:end="273:22">skip_bits1</name><argument_list pos:start="273:23" pos:end="273:27">(<argument pos:start="273:24" pos:end="273:26"><expr pos:start="273:24" pos:end="273:26"><name pos:start="273:24" pos:end="273:26">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="273:30" pos:end="273:60">// skip source sample rate code</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="281:5" pos:end="287:56">/* converter synchronization flag

       If frames are less than six blocks, this bit should be turned on

       once every 6 blocks to indicate the start of a frame set.

       reference: RFC 4598, Section 2.1.3  Frame Sets */</comment>

    <if_stmt pos:start="289:5" pos:end="293:5"><if pos:start="289:5" pos:end="293:5">if <condition pos:start="289:8" pos:end="289:75">(<expr pos:start="289:9" pos:end="289:74"><name pos:start="289:9" pos:end="289:21"><name pos:start="289:9" pos:end="289:9">s</name><operator pos:start="289:10" pos:end="289:11">-&gt;</operator><name pos:start="289:12" pos:end="289:21">frame_type</name></name> <operator pos:start="289:23" pos:end="289:24">==</operator> <name pos:start="289:26" pos:end="289:52">EAC3_FRAME_TYPE_INDEPENDENT</name> <operator pos:start="289:54" pos:end="289:55">&amp;&amp;</operator> <name pos:start="289:57" pos:end="289:69"><name pos:start="289:57" pos:end="289:57">s</name><operator pos:start="289:58" pos:end="289:59">-&gt;</operator><name pos:start="289:60" pos:end="289:69">num_blocks</name></name> <operator pos:start="289:71" pos:end="289:72">!=</operator> <literal type="number" pos:start="289:74" pos:end="289:74">6</literal></expr>)</condition> <block pos:start="289:77" pos:end="293:5">{<block_content pos:start="291:9" pos:end="291:24">

        <expr_stmt pos:start="291:9" pos:end="291:24"><expr pos:start="291:9" pos:end="291:23"><call pos:start="291:9" pos:end="291:23"><name pos:start="291:9" pos:end="291:18">skip_bits1</name><argument_list pos:start="291:19" pos:end="291:23">(<argument pos:start="291:20" pos:end="291:22"><expr pos:start="291:20" pos:end="291:22"><name pos:start="291:20" pos:end="291:22">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="291:26" pos:end="291:63">// skip converter synchronization flag</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="297:5" pos:end="297:73">/* original frame size code if this stream was converted from AC-3 */</comment>

    <if_stmt pos:start="299:5" pos:end="305:5"><if pos:start="299:5" pos:end="305:5">if <condition pos:start="299:8" pos:end="301:51">(<expr pos:start="299:9" pos:end="301:50"><name pos:start="299:9" pos:end="299:21"><name pos:start="299:9" pos:end="299:9">s</name><operator pos:start="299:10" pos:end="299:11">-&gt;</operator><name pos:start="299:12" pos:end="299:21">frame_type</name></name> <operator pos:start="299:23" pos:end="299:24">==</operator> <name pos:start="299:26" pos:end="299:52">EAC3_FRAME_TYPE_AC3_CONVERT</name> <operator pos:start="299:54" pos:end="299:55">&amp;&amp;</operator>

            <operator pos:start="301:13" pos:end="301:13">(</operator><name pos:start="301:14" pos:end="301:26"><name pos:start="301:14" pos:end="301:14">s</name><operator pos:start="301:15" pos:end="301:16">-&gt;</operator><name pos:start="301:17" pos:end="301:26">num_blocks</name></name> <operator pos:start="301:28" pos:end="301:29">==</operator> <literal type="number" pos:start="301:31" pos:end="301:31">6</literal> <operator pos:start="301:33" pos:end="301:34">||</operator> <call pos:start="301:36" pos:end="301:49"><name pos:start="301:36" pos:end="301:44">get_bits1</name><argument_list pos:start="301:45" pos:end="301:49">(<argument pos:start="301:46" pos:end="301:48"><expr pos:start="301:46" pos:end="301:48"><name pos:start="301:46" pos:end="301:48">gbc</name></expr></argument>)</argument_list></call><operator pos:start="301:50" pos:end="301:50">)</operator></expr>)</condition> <block pos:start="301:53" pos:end="305:5">{<block_content pos:start="303:9" pos:end="303:26">

        <expr_stmt pos:start="303:9" pos:end="303:26"><expr pos:start="303:9" pos:end="303:25"><call pos:start="303:9" pos:end="303:25"><name pos:start="303:9" pos:end="303:17">skip_bits</name><argument_list pos:start="303:18" pos:end="303:25">(<argument pos:start="303:19" pos:end="303:21"><expr pos:start="303:19" pos:end="303:21"><name pos:start="303:19" pos:end="303:21">gbc</name></expr></argument>, <argument pos:start="303:24" pos:end="303:24"><expr pos:start="303:24" pos:end="303:24"><literal type="number" pos:start="303:24" pos:end="303:24">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="303:28" pos:end="303:50">// skip frame size code</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="309:5" pos:end="309:35">/* additional bitstream info */</comment>

    <if_stmt pos:start="311:5" pos:end="321:5"><if pos:start="311:5" pos:end="321:5">if <condition pos:start="311:8" pos:end="311:23">(<expr pos:start="311:9" pos:end="311:22"><call pos:start="311:9" pos:end="311:22"><name pos:start="311:9" pos:end="311:17">get_bits1</name><argument_list pos:start="311:18" pos:end="311:22">(<argument pos:start="311:19" pos:end="311:21"><expr pos:start="311:19" pos:end="311:21"><name pos:start="311:19" pos:end="311:21">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="311:25" pos:end="321:5">{<block_content pos:start="313:9" pos:end="319:9">

        <decl_stmt pos:start="313:9" pos:end="313:39"><decl pos:start="313:9" pos:end="313:38"><type pos:start="313:9" pos:end="313:11"><name pos:start="313:9" pos:end="313:11">int</name></type> <name pos:start="313:13" pos:end="313:19">addbsil</name> <init pos:start="313:21" pos:end="313:38">= <expr pos:start="313:23" pos:end="313:38"><call pos:start="313:23" pos:end="313:38"><name pos:start="313:23" pos:end="313:30">get_bits</name><argument_list pos:start="313:31" pos:end="313:38">(<argument pos:start="313:32" pos:end="313:34"><expr pos:start="313:32" pos:end="313:34"><name pos:start="313:32" pos:end="313:34">gbc</name></expr></argument>, <argument pos:start="313:37" pos:end="313:37"><expr pos:start="313:37" pos:end="313:37"><literal type="number" pos:start="313:37" pos:end="313:37">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for pos:start="315:9" pos:end="319:9">for <control pos:start="315:13" pos:end="315:41">(<init pos:start="315:14" pos:end="315:19"><expr pos:start="315:14" pos:end="315:18"><name pos:start="315:14" pos:end="315:14">i</name> <operator pos:start="315:16" pos:end="315:16">=</operator> <literal type="number" pos:start="315:18" pos:end="315:18">0</literal></expr>;</init> <condition pos:start="315:21" pos:end="315:36"><expr pos:start="315:21" pos:end="315:35"><name pos:start="315:21" pos:end="315:21">i</name> <operator pos:start="315:23" pos:end="315:23">&lt;</operator> <name pos:start="315:25" pos:end="315:31">addbsil</name> <operator pos:start="315:33" pos:end="315:33">+</operator> <literal type="number" pos:start="315:35" pos:end="315:35">1</literal></expr>;</condition> <incr pos:start="315:38" pos:end="315:40"><expr pos:start="315:38" pos:end="315:40"><name pos:start="315:38" pos:end="315:38">i</name><operator pos:start="315:39" pos:end="315:40">++</operator></expr></incr>)</control> <block pos:start="315:43" pos:end="319:9">{<block_content pos:start="317:13" pos:end="317:30">

            <expr_stmt pos:start="317:13" pos:end="317:30"><expr pos:start="317:13" pos:end="317:29"><call pos:start="317:13" pos:end="317:29"><name pos:start="317:13" pos:end="317:21">skip_bits</name><argument_list pos:start="317:22" pos:end="317:29">(<argument pos:start="317:23" pos:end="317:25"><expr pos:start="317:23" pos:end="317:25"><name pos:start="317:23" pos:end="317:25">gbc</name></expr></argument>, <argument pos:start="317:28" pos:end="317:28"><expr pos:start="317:28" pos:end="317:28"><literal type="number" pos:start="317:28" pos:end="317:28">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="317:32" pos:end="317:65">// skip additional bit stream info</comment>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="325:5" pos:end="325:69">/* audio frame syntax flags, strategy data, and per-frame data */</comment>



    <if_stmt pos:start="329:5" pos:end="345:5"><if pos:start="329:5" pos:end="335:5">if <condition pos:start="329:8" pos:end="329:27">(<expr pos:start="329:9" pos:end="329:26"><name pos:start="329:9" pos:end="329:21"><name pos:start="329:9" pos:end="329:9">s</name><operator pos:start="329:10" pos:end="329:11">-&gt;</operator><name pos:start="329:12" pos:end="329:21">num_blocks</name></name> <operator pos:start="329:23" pos:end="329:24">==</operator> <literal type="number" pos:start="329:26" pos:end="329:26">6</literal></expr>)</condition> <block pos:start="329:29" pos:end="335:5">{<block_content pos:start="331:9" pos:end="333:47">

        <expr_stmt pos:start="331:9" pos:end="331:47"><expr pos:start="331:9" pos:end="331:46"><name pos:start="331:9" pos:end="331:29">ac3_exponent_strategy</name> <operator pos:start="331:31" pos:end="331:31">=</operator> <call pos:start="331:33" pos:end="331:46"><name pos:start="331:33" pos:end="331:41">get_bits1</name><argument_list pos:start="331:42" pos:end="331:46">(<argument pos:start="331:43" pos:end="331:45"><expr pos:start="331:43" pos:end="331:45"><name pos:start="331:43" pos:end="331:45">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:47"><expr pos:start="333:9" pos:end="333:46"><name pos:start="333:9" pos:end="333:22">parse_aht_info</name>        <operator pos:start="333:31" pos:end="333:31">=</operator> <call pos:start="333:33" pos:end="333:46"><name pos:start="333:33" pos:end="333:41">get_bits1</name><argument_list pos:start="333:42" pos:end="333:46">(<argument pos:start="333:43" pos:end="333:45"><expr pos:start="333:43" pos:end="333:45"><name pos:start="333:43" pos:end="333:45">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="335:7" pos:end="345:5">else <block pos:start="335:12" pos:end="345:5">{<block_content pos:start="341:9" pos:end="343:27">

        <comment type="block" pos:start="337:9" pos:end="339:28">/* less than 6 blocks, so use AC-3-style exponent strategy syntax, and

           do not use AHT */</comment>

        <expr_stmt pos:start="341:9" pos:end="341:34"><expr pos:start="341:9" pos:end="341:33"><name pos:start="341:9" pos:end="341:29">ac3_exponent_strategy</name> <operator pos:start="341:31" pos:end="341:31">=</operator> <literal type="number" pos:start="341:33" pos:end="341:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:27"><expr pos:start="343:9" pos:end="343:26"><name pos:start="343:9" pos:end="343:22">parse_aht_info</name> <operator pos:start="343:24" pos:end="343:24">=</operator> <literal type="number" pos:start="343:26" pos:end="343:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="349:5" pos:end="349:49"><expr pos:start="349:5" pos:end="349:48"><name pos:start="349:5" pos:end="349:26"><name pos:start="349:5" pos:end="349:5">s</name><operator pos:start="349:6" pos:end="349:7">-&gt;</operator><name pos:start="349:8" pos:end="349:26">snr_offset_strategy</name></name>    <operator pos:start="349:31" pos:end="349:31">=</operator> <call pos:start="349:33" pos:end="349:48"><name pos:start="349:33" pos:end="349:40">get_bits</name><argument_list pos:start="349:41" pos:end="349:48">(<argument pos:start="349:42" pos:end="349:44"><expr pos:start="349:42" pos:end="349:44"><name pos:start="349:42" pos:end="349:44">gbc</name></expr></argument>, <argument pos:start="349:47" pos:end="349:47"><expr pos:start="349:47" pos:end="349:47"><literal type="number" pos:start="349:47" pos:end="349:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="351:5" pos:end="351:47"><expr pos:start="351:5" pos:end="351:46"><name pos:start="351:5" pos:end="351:29">parse_transient_proc_info</name> <operator pos:start="351:31" pos:end="351:31">=</operator> <call pos:start="351:33" pos:end="351:46"><name pos:start="351:33" pos:end="351:41">get_bits1</name><argument_list pos:start="351:42" pos:end="351:46">(<argument pos:start="351:43" pos:end="351:45"><expr pos:start="351:43" pos:end="351:45"><name pos:start="351:43" pos:end="351:45">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="355:5" pos:end="355:44"><expr pos:start="355:5" pos:end="355:43"><name pos:start="355:5" pos:end="355:26"><name pos:start="355:5" pos:end="355:5">s</name><operator pos:start="355:6" pos:end="355:7">-&gt;</operator><name pos:start="355:8" pos:end="355:26">block_switch_syntax</name></name> <operator pos:start="355:28" pos:end="355:28">=</operator> <call pos:start="355:30" pos:end="355:43"><name pos:start="355:30" pos:end="355:38">get_bits1</name><argument_list pos:start="355:39" pos:end="355:43">(<argument pos:start="355:40" pos:end="355:42"><expr pos:start="355:40" pos:end="355:42"><name pos:start="355:40" pos:end="355:42">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="357:5" pos:end="359:60"><if pos:start="357:5" pos:end="359:60">if <condition pos:start="357:8" pos:end="357:32">(<expr pos:start="357:9" pos:end="357:31"><operator pos:start="357:9" pos:end="357:9">!</operator><name pos:start="357:10" pos:end="357:31"><name pos:start="357:10" pos:end="357:10">s</name><operator pos:start="357:11" pos:end="357:12">-&gt;</operator><name pos:start="357:13" pos:end="357:31">block_switch_syntax</name></name></expr>)</condition><block type="pseudo" pos:start="359:9" pos:end="359:60"><block_content pos:start="359:9" pos:end="359:60">

        <expr_stmt pos:start="359:9" pos:end="359:60"><expr pos:start="359:9" pos:end="359:59"><call pos:start="359:9" pos:end="359:59"><name pos:start="359:9" pos:end="359:14">memset</name><argument_list pos:start="359:15" pos:end="359:59">(<argument pos:start="359:16" pos:end="359:30"><expr pos:start="359:16" pos:end="359:30"><name pos:start="359:16" pos:end="359:30"><name pos:start="359:16" pos:end="359:16">s</name><operator pos:start="359:17" pos:end="359:18">-&gt;</operator><name pos:start="359:19" pos:end="359:30">block_switch</name></name></expr></argument>, <argument pos:start="359:33" pos:end="359:33"><expr pos:start="359:33" pos:end="359:33"><literal type="number" pos:start="359:33" pos:end="359:33">0</literal></expr></argument>, <argument pos:start="359:36" pos:end="359:58"><expr pos:start="359:36" pos:end="359:58"><sizeof pos:start="359:36" pos:end="359:58">sizeof<argument_list pos:start="359:42" pos:end="359:58">(<argument pos:start="359:43" pos:end="359:57"><expr pos:start="359:43" pos:end="359:57"><name pos:start="359:43" pos:end="359:57"><name pos:start="359:43" pos:end="359:43">s</name><operator pos:start="359:44" pos:end="359:45">-&gt;</operator><name pos:start="359:46" pos:end="359:57">block_switch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="363:5" pos:end="363:43"><expr pos:start="363:5" pos:end="363:42"><name pos:start="363:5" pos:end="363:25"><name pos:start="363:5" pos:end="363:5">s</name><operator pos:start="363:6" pos:end="363:7">-&gt;</operator><name pos:start="363:8" pos:end="363:25">dither_flag_syntax</name></name> <operator pos:start="363:27" pos:end="363:27">=</operator> <call pos:start="363:29" pos:end="363:42"><name pos:start="363:29" pos:end="363:37">get_bits1</name><argument_list pos:start="363:38" pos:end="363:42">(<argument pos:start="363:39" pos:end="363:41"><expr pos:start="363:39" pos:end="363:41"><name pos:start="363:39" pos:end="363:41">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="365:5" pos:end="371:5"><if pos:start="365:5" pos:end="371:5">if <condition pos:start="365:8" pos:end="365:31">(<expr pos:start="365:9" pos:end="365:30"><operator pos:start="365:9" pos:end="365:9">!</operator><name pos:start="365:10" pos:end="365:30"><name pos:start="365:10" pos:end="365:10">s</name><operator pos:start="365:11" pos:end="365:12">-&gt;</operator><name pos:start="365:13" pos:end="365:30">dither_flag_syntax</name></name></expr>)</condition> <block pos:start="365:33" pos:end="371:5">{<block_content pos:start="367:9" pos:end="369:35">

        <for pos:start="367:9" pos:end="369:35">for <control pos:start="367:13" pos:end="367:49">(<init pos:start="367:14" pos:end="367:20"><expr pos:start="367:14" pos:end="367:19"><name pos:start="367:14" pos:end="367:15">ch</name> <operator pos:start="367:17" pos:end="367:17">=</operator> <literal type="number" pos:start="367:19" pos:end="367:19">1</literal></expr>;</init> <condition pos:start="367:22" pos:end="367:43"><expr pos:start="367:22" pos:end="367:42"><name pos:start="367:22" pos:end="367:23">ch</name> <operator pos:start="367:25" pos:end="367:26">&lt;=</operator> <name pos:start="367:28" pos:end="367:42"><name pos:start="367:28" pos:end="367:28">s</name><operator pos:start="367:29" pos:end="367:30">-&gt;</operator><name pos:start="367:31" pos:end="367:42">fbw_channels</name></name></expr>;</condition> <incr pos:start="367:45" pos:end="367:48"><expr pos:start="367:45" pos:end="367:48"><name pos:start="367:45" pos:end="367:46">ch</name><operator pos:start="367:47" pos:end="367:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="369:13" pos:end="369:35"><block_content pos:start="369:13" pos:end="369:35">

            <expr_stmt pos:start="369:13" pos:end="369:35"><expr pos:start="369:13" pos:end="369:34"><name pos:start="369:13" pos:end="369:30"><name pos:start="369:13" pos:end="369:13">s</name><operator pos:start="369:14" pos:end="369:15">-&gt;</operator><name pos:start="369:16" pos:end="369:26">dither_flag</name><index pos:start="369:27" pos:end="369:30">[<expr pos:start="369:28" pos:end="369:29"><name pos:start="369:28" pos:end="369:29">ch</name></expr>]</index></name> <operator pos:start="369:32" pos:end="369:32">=</operator> <literal type="number" pos:start="369:34" pos:end="369:34">1</literal></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="373:5" pos:end="373:59"><expr pos:start="373:5" pos:end="373:58"><name pos:start="373:5" pos:end="373:26"><name pos:start="373:5" pos:end="373:5">s</name><operator pos:start="373:6" pos:end="373:7">-&gt;</operator><name pos:start="373:8" pos:end="373:18">dither_flag</name><index pos:start="373:19" pos:end="373:26">[<expr pos:start="373:20" pos:end="373:25"><name pos:start="373:20" pos:end="373:25">CPL_CH</name></expr>]</index></name> <operator pos:start="373:28" pos:end="373:28">=</operator> <name pos:start="373:30" pos:end="373:54"><name pos:start="373:30" pos:end="373:30">s</name><operator pos:start="373:31" pos:end="373:32">-&gt;</operator><name pos:start="373:33" pos:end="373:43">dither_flag</name><index pos:start="373:44" pos:end="373:54">[<expr pos:start="373:45" pos:end="373:53"><name pos:start="373:45" pos:end="373:53"><name pos:start="373:45" pos:end="373:45">s</name><operator pos:start="373:46" pos:end="373:47">-&gt;</operator><name pos:start="373:48" pos:end="373:53">lfe_ch</name></name></expr>]</index></name> <operator pos:start="373:56" pos:end="373:56">=</operator> <literal type="number" pos:start="373:58" pos:end="373:58">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="377:5" pos:end="377:46"><expr pos:start="377:5" pos:end="377:45"><name pos:start="377:5" pos:end="377:28"><name pos:start="377:5" pos:end="377:5">s</name><operator pos:start="377:6" pos:end="377:7">-&gt;</operator><name pos:start="377:8" pos:end="377:28">bit_allocation_syntax</name></name> <operator pos:start="377:30" pos:end="377:30">=</operator> <call pos:start="377:32" pos:end="377:45"><name pos:start="377:32" pos:end="377:40">get_bits1</name><argument_list pos:start="377:41" pos:end="377:45">(<argument pos:start="377:42" pos:end="377:44"><expr pos:start="377:42" pos:end="377:44"><name pos:start="377:42" pos:end="377:44">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="379:5" pos:end="393:5"><if pos:start="379:5" pos:end="393:5">if <condition pos:start="379:8" pos:end="379:34">(<expr pos:start="379:9" pos:end="379:33"><operator pos:start="379:9" pos:end="379:9">!</operator><name pos:start="379:10" pos:end="379:33"><name pos:start="379:10" pos:end="379:10">s</name><operator pos:start="379:11" pos:end="379:12">-&gt;</operator><name pos:start="379:13" pos:end="379:33">bit_allocation_syntax</name></name></expr>)</condition> <block pos:start="379:36" pos:end="393:5">{<block_content pos:start="383:9" pos:end="391:66">

        <comment type="block" pos:start="381:9" pos:end="381:51">/* set default bit allocation parameters */</comment>

        <expr_stmt pos:start="383:9" pos:end="383:66"><expr pos:start="383:9" pos:end="383:65"><name pos:start="383:9" pos:end="383:38"><name pos:start="383:9" pos:end="383:9">s</name><operator pos:start="383:10" pos:end="383:11">-&gt;</operator><name pos:start="383:12" pos:end="383:27">bit_alloc_params</name><operator pos:start="383:28" pos:end="383:28">.</operator><name pos:start="383:29" pos:end="383:38">slow_decay</name></name> <operator pos:start="383:40" pos:end="383:40">=</operator> <name pos:start="383:42" pos:end="383:65"><name pos:start="383:42" pos:end="383:62">ff_ac3_slow_decay_tab</name><index pos:start="383:63" pos:end="383:65">[<expr pos:start="383:64" pos:end="383:64"><literal type="number" pos:start="383:64" pos:end="383:64">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:66"><expr pos:start="385:9" pos:end="385:65"><name pos:start="385:9" pos:end="385:38"><name pos:start="385:9" pos:end="385:9">s</name><operator pos:start="385:10" pos:end="385:11">-&gt;</operator><name pos:start="385:12" pos:end="385:27">bit_alloc_params</name><operator pos:start="385:28" pos:end="385:28">.</operator><name pos:start="385:29" pos:end="385:38">fast_decay</name></name> <operator pos:start="385:40" pos:end="385:40">=</operator> <name pos:start="385:42" pos:end="385:65"><name pos:start="385:42" pos:end="385:62">ff_ac3_fast_decay_tab</name><index pos:start="385:63" pos:end="385:65">[<expr pos:start="385:64" pos:end="385:64"><literal type="number" pos:start="385:64" pos:end="385:64">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:66"><expr pos:start="387:9" pos:end="387:65"><name pos:start="387:9" pos:end="387:37"><name pos:start="387:9" pos:end="387:9">s</name><operator pos:start="387:10" pos:end="387:11">-&gt;</operator><name pos:start="387:12" pos:end="387:27">bit_alloc_params</name><operator pos:start="387:28" pos:end="387:28">.</operator><name pos:start="387:29" pos:end="387:37">slow_gain</name></name>  <operator pos:start="387:40" pos:end="387:40">=</operator> <name pos:start="387:42" pos:end="387:65"><name pos:start="387:42" pos:end="387:61">ff_ac3_slow_gain_tab</name> <index pos:start="387:63" pos:end="387:65">[<expr pos:start="387:64" pos:end="387:64"><literal type="number" pos:start="387:64" pos:end="387:64">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:66"><expr pos:start="389:9" pos:end="389:65"><name pos:start="389:9" pos:end="389:38"><name pos:start="389:9" pos:end="389:9">s</name><operator pos:start="389:10" pos:end="389:11">-&gt;</operator><name pos:start="389:12" pos:end="389:27">bit_alloc_params</name><operator pos:start="389:28" pos:end="389:28">.</operator><name pos:start="389:29" pos:end="389:38">db_per_bit</name></name> <operator pos:start="389:40" pos:end="389:40">=</operator> <name pos:start="389:42" pos:end="389:65"><name pos:start="389:42" pos:end="389:62">ff_ac3_db_per_bit_tab</name><index pos:start="389:63" pos:end="389:65">[<expr pos:start="389:64" pos:end="389:64"><literal type="number" pos:start="389:64" pos:end="389:64">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:66"><expr pos:start="391:9" pos:end="391:65"><name pos:start="391:9" pos:end="391:33"><name pos:start="391:9" pos:end="391:9">s</name><operator pos:start="391:10" pos:end="391:11">-&gt;</operator><name pos:start="391:12" pos:end="391:27">bit_alloc_params</name><operator pos:start="391:28" pos:end="391:28">.</operator><name pos:start="391:29" pos:end="391:33">floor</name></name>      <operator pos:start="391:40" pos:end="391:40">=</operator> <name pos:start="391:42" pos:end="391:65"><name pos:start="391:42" pos:end="391:57">ff_ac3_floor_tab</name>     <index pos:start="391:63" pos:end="391:65">[<expr pos:start="391:64" pos:end="391:64"><literal type="number" pos:start="391:64" pos:end="391:64">7</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="397:5" pos:end="397:42"><expr pos:start="397:5" pos:end="397:41"><name pos:start="397:5" pos:end="397:23"><name pos:start="397:5" pos:end="397:5">s</name><operator pos:start="397:6" pos:end="397:7">-&gt;</operator><name pos:start="397:8" pos:end="397:23">fast_gain_syntax</name></name>  <operator pos:start="397:26" pos:end="397:26">=</operator> <call pos:start="397:28" pos:end="397:41"><name pos:start="397:28" pos:end="397:36">get_bits1</name><argument_list pos:start="397:37" pos:end="397:41">(<argument pos:start="397:38" pos:end="397:40"><expr pos:start="397:38" pos:end="397:40"><name pos:start="397:38" pos:end="397:40">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:42"><expr pos:start="399:5" pos:end="399:41"><name pos:start="399:5" pos:end="399:17"><name pos:start="399:5" pos:end="399:5">s</name><operator pos:start="399:6" pos:end="399:7">-&gt;</operator><name pos:start="399:8" pos:end="399:17">dba_syntax</name></name>        <operator pos:start="399:26" pos:end="399:26">=</operator> <call pos:start="399:28" pos:end="399:41"><name pos:start="399:28" pos:end="399:36">get_bits1</name><argument_list pos:start="399:37" pos:end="399:41">(<argument pos:start="399:38" pos:end="399:40"><expr pos:start="399:38" pos:end="399:40"><name pos:start="399:38" pos:end="399:40">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:42"><expr pos:start="401:5" pos:end="401:41"><name pos:start="401:5" pos:end="401:18"><name pos:start="401:5" pos:end="401:5">s</name><operator pos:start="401:6" pos:end="401:7">-&gt;</operator><name pos:start="401:8" pos:end="401:18">skip_syntax</name></name>       <operator pos:start="401:26" pos:end="401:26">=</operator> <call pos:start="401:28" pos:end="401:41"><name pos:start="401:28" pos:end="401:36">get_bits1</name><argument_list pos:start="401:37" pos:end="401:41">(<argument pos:start="401:38" pos:end="401:40"><expr pos:start="401:38" pos:end="401:40"><name pos:start="401:38" pos:end="401:40">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:42"><expr pos:start="403:5" pos:end="403:41"><name pos:start="403:5" pos:end="403:24">parse_spx_atten_data</name> <operator pos:start="403:26" pos:end="403:26">=</operator> <call pos:start="403:28" pos:end="403:41"><name pos:start="403:28" pos:end="403:36">get_bits1</name><argument_list pos:start="403:37" pos:end="403:41">(<argument pos:start="403:38" pos:end="403:40"><expr pos:start="403:38" pos:end="403:40"><name pos:start="403:38" pos:end="403:40">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="407:5" pos:end="407:65">/* coupling strategy occurrence and coupling use per block */</comment>

    <expr_stmt pos:start="409:5" pos:end="409:23"><expr pos:start="409:5" pos:end="409:22"><name pos:start="409:5" pos:end="409:18">num_cpl_blocks</name> <operator pos:start="409:20" pos:end="409:20">=</operator> <literal type="number" pos:start="409:22" pos:end="409:22">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="411:5" pos:end="435:5"><if pos:start="411:5" pos:end="431:5">if <condition pos:start="411:8" pos:end="411:28">(<expr pos:start="411:9" pos:end="411:27"><name pos:start="411:9" pos:end="411:23"><name pos:start="411:9" pos:end="411:9">s</name><operator pos:start="411:10" pos:end="411:11">-&gt;</operator><name pos:start="411:12" pos:end="411:23">channel_mode</name></name> <operator pos:start="411:25" pos:end="411:25">&gt;</operator> <literal type="number" pos:start="411:27" pos:end="411:27">1</literal></expr>)</condition> <block pos:start="411:30" pos:end="431:5">{<block_content pos:start="413:9" pos:end="429:9">

        <for pos:start="413:9" pos:end="429:9">for <control pos:start="413:13" pos:end="413:49">(<init pos:start="413:14" pos:end="413:21"><expr pos:start="413:14" pos:end="413:20"><name pos:start="413:14" pos:end="413:16">blk</name> <operator pos:start="413:18" pos:end="413:18">=</operator> <literal type="number" pos:start="413:20" pos:end="413:20">0</literal></expr>;</init> <condition pos:start="413:23" pos:end="413:42"><expr pos:start="413:23" pos:end="413:41"><name pos:start="413:23" pos:end="413:25">blk</name> <operator pos:start="413:27" pos:end="413:27">&lt;</operator> <name pos:start="413:29" pos:end="413:41"><name pos:start="413:29" pos:end="413:29">s</name><operator pos:start="413:30" pos:end="413:31">-&gt;</operator><name pos:start="413:32" pos:end="413:41">num_blocks</name></name></expr>;</condition> <incr pos:start="413:44" pos:end="413:48"><expr pos:start="413:44" pos:end="413:48"><name pos:start="413:44" pos:end="413:46">blk</name><operator pos:start="413:47" pos:end="413:48">++</operator></expr></incr>)</control> <block pos:start="413:51" pos:end="429:9">{<block_content pos:start="415:13" pos:end="427:49">

            <expr_stmt pos:start="415:13" pos:end="415:67"><expr pos:start="415:13" pos:end="415:66"><name pos:start="415:13" pos:end="415:39"><name pos:start="415:13" pos:end="415:13">s</name><operator pos:start="415:14" pos:end="415:15">-&gt;</operator><name pos:start="415:16" pos:end="415:34">cpl_strategy_exists</name><index pos:start="415:35" pos:end="415:39">[<expr pos:start="415:36" pos:end="415:38"><name pos:start="415:36" pos:end="415:38">blk</name></expr>]</index></name> <operator pos:start="415:41" pos:end="415:41">=</operator> <operator pos:start="415:43" pos:end="415:43">(</operator><operator pos:start="415:44" pos:end="415:44">!</operator><name pos:start="415:45" pos:end="415:47">blk</name> <operator pos:start="415:49" pos:end="415:50">||</operator> <call pos:start="415:52" pos:end="415:65"><name pos:start="415:52" pos:end="415:60">get_bits1</name><argument_list pos:start="415:61" pos:end="415:65">(<argument pos:start="415:62" pos:end="415:64"><expr pos:start="415:62" pos:end="415:64"><name pos:start="415:62" pos:end="415:64">gbc</name></expr></argument>)</argument_list></call><operator pos:start="415:66" pos:end="415:66">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="417:13" pos:end="425:13"><if pos:start="417:13" pos:end="421:13">if <condition pos:start="417:16" pos:end="417:44">(<expr pos:start="417:17" pos:end="417:43"><name pos:start="417:17" pos:end="417:43"><name pos:start="417:17" pos:end="417:17">s</name><operator pos:start="417:18" pos:end="417:19">-&gt;</operator><name pos:start="417:20" pos:end="417:38">cpl_strategy_exists</name><index pos:start="417:39" pos:end="417:43">[<expr pos:start="417:40" pos:end="417:42"><name pos:start="417:40" pos:end="417:42">blk</name></expr>]</index></name></expr>)</condition> <block pos:start="417:46" pos:end="421:13">{<block_content pos:start="419:17" pos:end="419:52">

                <expr_stmt pos:start="419:17" pos:end="419:52"><expr pos:start="419:17" pos:end="419:51"><name pos:start="419:17" pos:end="419:34"><name pos:start="419:17" pos:end="419:17">s</name><operator pos:start="419:18" pos:end="419:19">-&gt;</operator><name pos:start="419:20" pos:end="419:29">cpl_in_use</name><index pos:start="419:30" pos:end="419:34">[<expr pos:start="419:31" pos:end="419:33"><name pos:start="419:31" pos:end="419:33">blk</name></expr>]</index></name> <operator pos:start="419:36" pos:end="419:36">=</operator> <call pos:start="419:38" pos:end="419:51"><name pos:start="419:38" pos:end="419:46">get_bits1</name><argument_list pos:start="419:47" pos:end="419:51">(<argument pos:start="419:48" pos:end="419:50"><expr pos:start="419:48" pos:end="419:50"><name pos:start="419:48" pos:end="419:50">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="421:15" pos:end="425:13">else <block pos:start="421:20" pos:end="425:13">{<block_content pos:start="423:17" pos:end="423:58">

                <expr_stmt pos:start="423:17" pos:end="423:58"><expr pos:start="423:17" pos:end="423:57"><name pos:start="423:17" pos:end="423:34"><name pos:start="423:17" pos:end="423:17">s</name><operator pos:start="423:18" pos:end="423:19">-&gt;</operator><name pos:start="423:20" pos:end="423:29">cpl_in_use</name><index pos:start="423:30" pos:end="423:34">[<expr pos:start="423:31" pos:end="423:33"><name pos:start="423:31" pos:end="423:33">blk</name></expr>]</index></name> <operator pos:start="423:36" pos:end="423:36">=</operator> <name pos:start="423:38" pos:end="423:57"><name pos:start="423:38" pos:end="423:38">s</name><operator pos:start="423:39" pos:end="423:40">-&gt;</operator><name pos:start="423:41" pos:end="423:50">cpl_in_use</name><index pos:start="423:51" pos:end="423:57">[<expr pos:start="423:52" pos:end="423:56"><name pos:start="423:52" pos:end="423:54">blk</name><operator pos:start="423:55" pos:end="423:55">-</operator><literal type="number" pos:start="423:56" pos:end="423:56">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:49"><expr pos:start="427:13" pos:end="427:48"><name pos:start="427:13" pos:end="427:26">num_cpl_blocks</name> <operator pos:start="427:28" pos:end="427:29">+=</operator> <name pos:start="427:31" pos:end="427:48"><name pos:start="427:31" pos:end="427:31">s</name><operator pos:start="427:32" pos:end="427:33">-&gt;</operator><name pos:start="427:34" pos:end="427:43">cpl_in_use</name><index pos:start="427:44" pos:end="427:48">[<expr pos:start="427:45" pos:end="427:47"><name pos:start="427:45" pos:end="427:47">blk</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="431:7" pos:end="435:5">else <block pos:start="431:12" pos:end="435:5">{<block_content pos:start="433:9" pos:end="433:56">

        <expr_stmt pos:start="433:9" pos:end="433:56"><expr pos:start="433:9" pos:end="433:55"><call pos:start="433:9" pos:end="433:55"><name pos:start="433:9" pos:end="433:14">memset</name><argument_list pos:start="433:15" pos:end="433:55">(<argument pos:start="433:16" pos:end="433:28"><expr pos:start="433:16" pos:end="433:28"><name pos:start="433:16" pos:end="433:28"><name pos:start="433:16" pos:end="433:16">s</name><operator pos:start="433:17" pos:end="433:18">-&gt;</operator><name pos:start="433:19" pos:end="433:28">cpl_in_use</name></name></expr></argument>, <argument pos:start="433:31" pos:end="433:31"><expr pos:start="433:31" pos:end="433:31"><literal type="number" pos:start="433:31" pos:end="433:31">0</literal></expr></argument>, <argument pos:start="433:34" pos:end="433:54"><expr pos:start="433:34" pos:end="433:54"><sizeof pos:start="433:34" pos:end="433:54">sizeof<argument_list pos:start="433:40" pos:end="433:54">(<argument pos:start="433:41" pos:end="433:53"><expr pos:start="433:41" pos:end="433:53"><name pos:start="433:41" pos:end="433:53"><name pos:start="433:41" pos:end="433:41">s</name><operator pos:start="433:42" pos:end="433:43">-&gt;</operator><name pos:start="433:44" pos:end="433:53">cpl_in_use</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="439:5" pos:end="439:32">/* exponent strategy data */</comment>

    <if_stmt pos:start="441:5" pos:end="471:5"><if pos:start="441:5" pos:end="455:5">if <condition pos:start="441:8" pos:end="441:30">(<expr pos:start="441:9" pos:end="441:29"><name pos:start="441:9" pos:end="441:29">ac3_exponent_strategy</name></expr>)</condition> <block pos:start="441:32" pos:end="455:5">{<block_content pos:start="445:9" pos:end="453:9">

        <comment type="block" pos:start="443:9" pos:end="443:49">/* AC-3-style exponent strategy syntax */</comment>

        <for pos:start="445:9" pos:end="453:9">for <control pos:start="445:13" pos:end="445:49">(<init pos:start="445:14" pos:end="445:21"><expr pos:start="445:14" pos:end="445:20"><name pos:start="445:14" pos:end="445:16">blk</name> <operator pos:start="445:18" pos:end="445:18">=</operator> <literal type="number" pos:start="445:20" pos:end="445:20">0</literal></expr>;</init> <condition pos:start="445:23" pos:end="445:42"><expr pos:start="445:23" pos:end="445:41"><name pos:start="445:23" pos:end="445:25">blk</name> <operator pos:start="445:27" pos:end="445:27">&lt;</operator> <name pos:start="445:29" pos:end="445:41"><name pos:start="445:29" pos:end="445:29">s</name><operator pos:start="445:30" pos:end="445:31">-&gt;</operator><name pos:start="445:32" pos:end="445:41">num_blocks</name></name></expr>;</condition> <incr pos:start="445:44" pos:end="445:48"><expr pos:start="445:44" pos:end="445:48"><name pos:start="445:44" pos:end="445:46">blk</name><operator pos:start="445:47" pos:end="445:48">++</operator></expr></incr>)</control> <block pos:start="445:51" pos:end="453:9">{<block_content pos:start="447:13" pos:end="451:13">

            <for pos:start="447:13" pos:end="451:13">for <control pos:start="447:17" pos:end="447:71">(<init pos:start="447:18" pos:end="447:42"><expr pos:start="447:18" pos:end="447:41"><name pos:start="447:18" pos:end="447:19">ch</name> <operator pos:start="447:21" pos:end="447:21">=</operator> <operator pos:start="447:23" pos:end="447:23">!</operator><name pos:start="447:24" pos:end="447:41"><name pos:start="447:24" pos:end="447:24">s</name><operator pos:start="447:25" pos:end="447:26">-&gt;</operator><name pos:start="447:27" pos:end="447:36">cpl_in_use</name><index pos:start="447:37" pos:end="447:41">[<expr pos:start="447:38" pos:end="447:40"><name pos:start="447:38" pos:end="447:40">blk</name></expr>]</index></name></expr>;</init> <condition pos:start="447:44" pos:end="447:65"><expr pos:start="447:44" pos:end="447:64"><name pos:start="447:44" pos:end="447:45">ch</name> <operator pos:start="447:47" pos:end="447:48">&lt;=</operator> <name pos:start="447:50" pos:end="447:64"><name pos:start="447:50" pos:end="447:50">s</name><operator pos:start="447:51" pos:end="447:52">-&gt;</operator><name pos:start="447:53" pos:end="447:64">fbw_channels</name></name></expr>;</condition> <incr pos:start="447:67" pos:end="447:70"><expr pos:start="447:67" pos:end="447:70"><name pos:start="447:67" pos:end="447:68">ch</name><operator pos:start="447:69" pos:end="447:70">++</operator></expr></incr>)</control> <block pos:start="447:73" pos:end="451:13">{<block_content pos:start="449:17" pos:end="449:60">

                <expr_stmt pos:start="449:17" pos:end="449:60"><expr pos:start="449:17" pos:end="449:59"><name pos:start="449:17" pos:end="449:40"><name pos:start="449:17" pos:end="449:17">s</name><operator pos:start="449:18" pos:end="449:19">-&gt;</operator><name pos:start="449:20" pos:end="449:31">exp_strategy</name><index pos:start="449:32" pos:end="449:36">[<expr pos:start="449:33" pos:end="449:35"><name pos:start="449:33" pos:end="449:35">blk</name></expr>]</index><index pos:start="449:37" pos:end="449:40">[<expr pos:start="449:38" pos:end="449:39"><name pos:start="449:38" pos:end="449:39">ch</name></expr>]</index></name> <operator pos:start="449:42" pos:end="449:42">=</operator> <call pos:start="449:44" pos:end="449:59"><name pos:start="449:44" pos:end="449:51">get_bits</name><argument_list pos:start="449:52" pos:end="449:59">(<argument pos:start="449:53" pos:end="449:55"><expr pos:start="449:53" pos:end="449:55"><name pos:start="449:53" pos:end="449:55">gbc</name></expr></argument>, <argument pos:start="449:58" pos:end="449:58"><expr pos:start="449:58" pos:end="449:58"><literal type="number" pos:start="449:58" pos:end="449:58">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="455:7" pos:end="471:5">else <block pos:start="455:12" pos:end="471:5">{<block_content pos:start="459:9" pos:end="469:9">

        <comment type="block" pos:start="457:9" pos:end="457:48">/* LUT-based exponent strategy syntax */</comment>

        <for pos:start="459:9" pos:end="469:9">for <control pos:start="459:13" pos:end="459:90">(<init pos:start="459:14" pos:end="459:61"><expr pos:start="459:14" pos:end="459:60"><name pos:start="459:14" pos:end="459:15">ch</name> <operator pos:start="459:17" pos:end="459:17">=</operator> <operator pos:start="459:19" pos:end="459:19">!</operator><operator pos:start="459:20" pos:end="459:20">(</operator><operator pos:start="459:21" pos:end="459:21">(</operator><name pos:start="459:22" pos:end="459:36"><name pos:start="459:22" pos:end="459:22">s</name><operator pos:start="459:23" pos:end="459:24">-&gt;</operator><name pos:start="459:25" pos:end="459:36">channel_mode</name></name> <operator pos:start="459:38" pos:end="459:38">&gt;</operator> <literal type="number" pos:start="459:40" pos:end="459:40">1</literal><operator pos:start="459:41" pos:end="459:41">)</operator> <operator pos:start="459:43" pos:end="459:44">&amp;&amp;</operator> <name pos:start="459:46" pos:end="459:59">num_cpl_blocks</name><operator pos:start="459:60" pos:end="459:60">)</operator></expr>;</init> <condition pos:start="459:63" pos:end="459:84"><expr pos:start="459:63" pos:end="459:83"><name pos:start="459:63" pos:end="459:64">ch</name> <operator pos:start="459:66" pos:end="459:67">&lt;=</operator> <name pos:start="459:69" pos:end="459:83"><name pos:start="459:69" pos:end="459:69">s</name><operator pos:start="459:70" pos:end="459:71">-&gt;</operator><name pos:start="459:72" pos:end="459:83">fbw_channels</name></name></expr>;</condition> <incr pos:start="459:86" pos:end="459:89"><expr pos:start="459:86" pos:end="459:89"><name pos:start="459:86" pos:end="459:87">ch</name><operator pos:start="459:88" pos:end="459:89">++</operator></expr></incr>)</control> <block pos:start="459:92" pos:end="469:9">{<block_content pos:start="461:13" pos:end="467:13">

            <decl_stmt pos:start="461:13" pos:end="461:47"><decl pos:start="461:13" pos:end="461:46"><type pos:start="461:13" pos:end="461:15"><name pos:start="461:13" pos:end="461:15">int</name></type> <name pos:start="461:17" pos:end="461:27">frmchexpstr</name> <init pos:start="461:29" pos:end="461:46">= <expr pos:start="461:31" pos:end="461:46"><call pos:start="461:31" pos:end="461:46"><name pos:start="461:31" pos:end="461:38">get_bits</name><argument_list pos:start="461:39" pos:end="461:46">(<argument pos:start="461:40" pos:end="461:42"><expr pos:start="461:40" pos:end="461:42"><name pos:start="461:40" pos:end="461:42">gbc</name></expr></argument>, <argument pos:start="461:45" pos:end="461:45"><expr pos:start="461:45" pos:end="461:45"><literal type="number" pos:start="461:45" pos:end="461:45">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:start="463:13" pos:end="467:13">for <control pos:start="463:17" pos:end="463:41">(<init pos:start="463:18" pos:end="463:25"><expr pos:start="463:18" pos:end="463:24"><name pos:start="463:18" pos:end="463:20">blk</name> <operator pos:start="463:22" pos:end="463:22">=</operator> <literal type="number" pos:start="463:24" pos:end="463:24">0</literal></expr>;</init> <condition pos:start="463:27" pos:end="463:34"><expr pos:start="463:27" pos:end="463:33"><name pos:start="463:27" pos:end="463:29">blk</name> <operator pos:start="463:31" pos:end="463:31">&lt;</operator> <literal type="number" pos:start="463:33" pos:end="463:33">6</literal></expr>;</condition> <incr pos:start="463:36" pos:end="463:40"><expr pos:start="463:36" pos:end="463:40"><name pos:start="463:36" pos:end="463:38">blk</name><operator pos:start="463:39" pos:end="463:40">++</operator></expr></incr>)</control> <block pos:start="463:43" pos:end="467:13">{<block_content pos:start="465:17" pos:end="465:80">

                <expr_stmt pos:start="465:17" pos:end="465:80"><expr pos:start="465:17" pos:end="465:79"><name pos:start="465:17" pos:end="465:40"><name pos:start="465:17" pos:end="465:17">s</name><operator pos:start="465:18" pos:end="465:19">-&gt;</operator><name pos:start="465:20" pos:end="465:31">exp_strategy</name><index pos:start="465:32" pos:end="465:36">[<expr pos:start="465:33" pos:end="465:35"><name pos:start="465:33" pos:end="465:35">blk</name></expr>]</index><index pos:start="465:37" pos:end="465:40">[<expr pos:start="465:38" pos:end="465:39"><name pos:start="465:38" pos:end="465:39">ch</name></expr>]</index></name> <operator pos:start="465:42" pos:end="465:42">=</operator> <name pos:start="465:44" pos:end="465:79"><name pos:start="465:44" pos:end="465:61">ff_eac3_frm_expstr</name><index pos:start="465:62" pos:end="465:74">[<expr pos:start="465:63" pos:end="465:73"><name pos:start="465:63" pos:end="465:73">frmchexpstr</name></expr>]</index><index pos:start="465:75" pos:end="465:79">[<expr pos:start="465:76" pos:end="465:78"><name pos:start="465:76" pos:end="465:78">blk</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="473:5" pos:end="473:31">/* LFE exponent strategy */</comment>

    <if_stmt pos:start="475:5" pos:end="483:5"><if pos:start="475:5" pos:end="483:5">if <condition pos:start="475:8" pos:end="475:18">(<expr pos:start="475:9" pos:end="475:17"><name pos:start="475:9" pos:end="475:17"><name pos:start="475:9" pos:end="475:9">s</name><operator pos:start="475:10" pos:end="475:11">-&gt;</operator><name pos:start="475:12" pos:end="475:17">lfe_on</name></name></expr>)</condition> <block pos:start="475:20" pos:end="483:5">{<block_content pos:start="477:9" pos:end="481:9">

        <for pos:start="477:9" pos:end="481:9">for <control pos:start="477:13" pos:end="477:49">(<init pos:start="477:14" pos:end="477:21"><expr pos:start="477:14" pos:end="477:20"><name pos:start="477:14" pos:end="477:16">blk</name> <operator pos:start="477:18" pos:end="477:18">=</operator> <literal type="number" pos:start="477:20" pos:end="477:20">0</literal></expr>;</init> <condition pos:start="477:23" pos:end="477:42"><expr pos:start="477:23" pos:end="477:41"><name pos:start="477:23" pos:end="477:25">blk</name> <operator pos:start="477:27" pos:end="477:27">&lt;</operator> <name pos:start="477:29" pos:end="477:41"><name pos:start="477:29" pos:end="477:29">s</name><operator pos:start="477:30" pos:end="477:31">-&gt;</operator><name pos:start="477:32" pos:end="477:41">num_blocks</name></name></expr>;</condition> <incr pos:start="477:44" pos:end="477:48"><expr pos:start="477:44" pos:end="477:48"><name pos:start="477:44" pos:end="477:46">blk</name><operator pos:start="477:47" pos:end="477:48">++</operator></expr></incr>)</control> <block pos:start="477:51" pos:end="481:9">{<block_content pos:start="479:13" pos:end="479:61">

            <expr_stmt pos:start="479:13" pos:end="479:61"><expr pos:start="479:13" pos:end="479:60"><name pos:start="479:13" pos:end="479:43"><name pos:start="479:13" pos:end="479:13">s</name><operator pos:start="479:14" pos:end="479:15">-&gt;</operator><name pos:start="479:16" pos:end="479:27">exp_strategy</name><index pos:start="479:28" pos:end="479:32">[<expr pos:start="479:29" pos:end="479:31"><name pos:start="479:29" pos:end="479:31">blk</name></expr>]</index><index pos:start="479:33" pos:end="479:43">[<expr pos:start="479:34" pos:end="479:42"><name pos:start="479:34" pos:end="479:42"><name pos:start="479:34" pos:end="479:34">s</name><operator pos:start="479:35" pos:end="479:36">-&gt;</operator><name pos:start="479:37" pos:end="479:42">lfe_ch</name></name></expr>]</index></name> <operator pos:start="479:45" pos:end="479:45">=</operator> <call pos:start="479:47" pos:end="479:60"><name pos:start="479:47" pos:end="479:55">get_bits1</name><argument_list pos:start="479:56" pos:end="479:60">(<argument pos:start="479:57" pos:end="479:59"><expr pos:start="479:57" pos:end="479:59"><name pos:start="479:57" pos:end="479:59">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="485:5" pos:end="485:77">/* original exponent strategies if this stream was converted from AC-3 */</comment>

    <if_stmt pos:start="487:5" pos:end="493:5"><if pos:start="487:5" pos:end="493:5">if <condition pos:start="487:8" pos:end="489:51">(<expr pos:start="487:9" pos:end="489:50"><name pos:start="487:9" pos:end="487:21"><name pos:start="487:9" pos:end="487:9">s</name><operator pos:start="487:10" pos:end="487:11">-&gt;</operator><name pos:start="487:12" pos:end="487:21">frame_type</name></name> <operator pos:start="487:23" pos:end="487:24">==</operator> <name pos:start="487:26" pos:end="487:52">EAC3_FRAME_TYPE_INDEPENDENT</name> <operator pos:start="487:54" pos:end="487:55">&amp;&amp;</operator>

            <operator pos:start="489:13" pos:end="489:13">(</operator><name pos:start="489:14" pos:end="489:26"><name pos:start="489:14" pos:end="489:14">s</name><operator pos:start="489:15" pos:end="489:16">-&gt;</operator><name pos:start="489:17" pos:end="489:26">num_blocks</name></name> <operator pos:start="489:28" pos:end="489:29">==</operator> <literal type="number" pos:start="489:31" pos:end="489:31">6</literal> <operator pos:start="489:33" pos:end="489:34">||</operator> <call pos:start="489:36" pos:end="489:49"><name pos:start="489:36" pos:end="489:44">get_bits1</name><argument_list pos:start="489:45" pos:end="489:49">(<argument pos:start="489:46" pos:end="489:48"><expr pos:start="489:46" pos:end="489:48"><name pos:start="489:46" pos:end="489:48">gbc</name></expr></argument>)</argument_list></call><operator pos:start="489:50" pos:end="489:50">)</operator></expr>)</condition> <block pos:start="489:53" pos:end="493:5">{<block_content pos:start="491:9" pos:end="491:44">

        <expr_stmt pos:start="491:9" pos:end="491:44"><expr pos:start="491:9" pos:end="491:43"><call pos:start="491:9" pos:end="491:43"><name pos:start="491:9" pos:end="491:17">skip_bits</name><argument_list pos:start="491:18" pos:end="491:43">(<argument pos:start="491:19" pos:end="491:21"><expr pos:start="491:19" pos:end="491:21"><name pos:start="491:19" pos:end="491:21">gbc</name></expr></argument>, <argument pos:start="491:24" pos:end="491:42"><expr pos:start="491:24" pos:end="491:42"><literal type="number" pos:start="491:24" pos:end="491:24">5</literal> <operator pos:start="491:26" pos:end="491:26">*</operator> <name pos:start="491:28" pos:end="491:42"><name pos:start="491:28" pos:end="491:28">s</name><operator pos:start="491:29" pos:end="491:30">-&gt;</operator><name pos:start="491:31" pos:end="491:42">fbw_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="491:46" pos:end="491:88">// skip converter channel exponent strategy</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="497:5" pos:end="497:42">/* determine which channels use AHT */</comment>

    <if_stmt pos:start="499:5" pos:end="537:5"><if pos:start="499:5" pos:end="533:5">if <condition pos:start="499:8" pos:end="499:23">(<expr pos:start="499:9" pos:end="499:22"><name pos:start="499:9" pos:end="499:22">parse_aht_info</name></expr>)</condition> <block pos:start="499:25" pos:end="533:5">{<block_content pos:start="509:9" pos:end="531:9">

        <comment type="block" pos:start="501:9" pos:end="507:23">/* For AHT to be used, all non-zero blocks must reuse exponents from

           the first block.  Furthermore, for AHT to be used in the coupling

           channel, all blocks must use coupling and use the same coupling

           strategy. */</comment>

        <expr_stmt pos:start="509:9" pos:end="509:38"><expr pos:start="509:9" pos:end="509:37"><name pos:start="509:9" pos:end="509:35"><name pos:start="509:9" pos:end="509:9">s</name><operator pos:start="509:10" pos:end="509:11">-&gt;</operator><name pos:start="509:12" pos:end="509:27">channel_uses_aht</name><index pos:start="509:28" pos:end="509:35">[<expr pos:start="509:29" pos:end="509:34"><name pos:start="509:29" pos:end="509:34">CPL_CH</name></expr>]</index></name><operator pos:start="509:36" pos:end="509:36">=</operator><literal type="number" pos:start="509:37" pos:end="509:37">0</literal></expr>;</expr_stmt>

        <for pos:start="511:9" pos:end="531:9">for <control pos:start="511:13" pos:end="511:65">(<init pos:start="511:14" pos:end="511:40"><expr pos:start="511:14" pos:end="511:39"><name pos:start="511:14" pos:end="511:15">ch</name> <operator pos:start="511:17" pos:end="511:17">=</operator> <operator pos:start="511:19" pos:end="511:19">(</operator><name pos:start="511:20" pos:end="511:33">num_cpl_blocks</name> <operator pos:start="511:35" pos:end="511:36">!=</operator> <literal type="number" pos:start="511:38" pos:end="511:38">6</literal><operator pos:start="511:39" pos:end="511:39">)</operator></expr>;</init> <condition pos:start="511:42" pos:end="511:59"><expr pos:start="511:42" pos:end="511:58"><name pos:start="511:42" pos:end="511:43">ch</name> <operator pos:start="511:45" pos:end="511:46">&lt;=</operator> <name pos:start="511:48" pos:end="511:58"><name pos:start="511:48" pos:end="511:48">s</name><operator pos:start="511:49" pos:end="511:50">-&gt;</operator><name pos:start="511:51" pos:end="511:58">channels</name></name></expr>;</condition> <incr pos:start="511:61" pos:end="511:64"><expr pos:start="511:61" pos:end="511:64"><name pos:start="511:61" pos:end="511:62">ch</name><operator pos:start="511:63" pos:end="511:64">++</operator></expr></incr>)</control> <block pos:start="511:67" pos:end="531:9">{<block_content pos:start="513:13" pos:end="529:64">

            <decl_stmt pos:start="513:13" pos:end="513:28"><decl pos:start="513:13" pos:end="513:27"><type pos:start="513:13" pos:end="513:15"><name pos:start="513:13" pos:end="513:15">int</name></type> <name pos:start="513:17" pos:end="513:23">use_aht</name> <init pos:start="513:25" pos:end="513:27">= <expr pos:start="513:27" pos:end="513:27"><literal type="number" pos:start="513:27" pos:end="513:27">1</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="515:13" pos:end="527:13">for <control pos:start="515:17" pos:end="515:41">(<init pos:start="515:18" pos:end="515:25"><expr pos:start="515:18" pos:end="515:24"><name pos:start="515:18" pos:end="515:20">blk</name> <operator pos:start="515:22" pos:end="515:22">=</operator> <literal type="number" pos:start="515:24" pos:end="515:24">1</literal></expr>;</init> <condition pos:start="515:27" pos:end="515:34"><expr pos:start="515:27" pos:end="515:33"><name pos:start="515:27" pos:end="515:29">blk</name> <operator pos:start="515:31" pos:end="515:31">&lt;</operator> <literal type="number" pos:start="515:33" pos:end="515:33">6</literal></expr>;</condition> <incr pos:start="515:36" pos:end="515:40"><expr pos:start="515:36" pos:end="515:40"><name pos:start="515:36" pos:end="515:38">blk</name><operator pos:start="515:39" pos:end="515:40">++</operator></expr></incr>)</control> <block pos:start="515:43" pos:end="527:13">{<block_content pos:start="517:17" pos:end="525:17">

                <if_stmt pos:start="517:17" pos:end="525:17"><if pos:start="517:17" pos:end="525:17">if <condition pos:start="517:20" pos:end="519:61">(<expr pos:start="517:21" pos:end="519:60"><operator pos:start="517:21" pos:end="517:21">(</operator><name pos:start="517:22" pos:end="517:45"><name pos:start="517:22" pos:end="517:22">s</name><operator pos:start="517:23" pos:end="517:24">-&gt;</operator><name pos:start="517:25" pos:end="517:36">exp_strategy</name><index pos:start="517:37" pos:end="517:41">[<expr pos:start="517:38" pos:end="517:40"><name pos:start="517:38" pos:end="517:40">blk</name></expr>]</index><index pos:start="517:42" pos:end="517:45">[<expr pos:start="517:43" pos:end="517:44"><name pos:start="517:43" pos:end="517:44">ch</name></expr>]</index></name> <operator pos:start="517:47" pos:end="517:48">!=</operator> <name pos:start="517:50" pos:end="517:58">EXP_REUSE</name><operator pos:start="517:59" pos:end="517:59">)</operator> <operator pos:start="517:61" pos:end="517:62">||</operator>

                        <operator pos:start="519:25" pos:end="519:25">(</operator><operator pos:start="519:26" pos:end="519:26">!</operator><name pos:start="519:27" pos:end="519:28">ch</name> <operator pos:start="519:30" pos:end="519:31">&amp;&amp;</operator> <name pos:start="519:33" pos:end="519:59"><name pos:start="519:33" pos:end="519:33">s</name><operator pos:start="519:34" pos:end="519:35">-&gt;</operator><name pos:start="519:36" pos:end="519:54">cpl_strategy_exists</name><index pos:start="519:55" pos:end="519:59">[<expr pos:start="519:56" pos:end="519:58"><name pos:start="519:56" pos:end="519:58">blk</name></expr>]</index></name><operator pos:start="519:60" pos:end="519:60">)</operator></expr>)</condition> <block pos:start="519:63" pos:end="525:17">{<block_content pos:start="521:21" pos:end="523:26">

                    <expr_stmt pos:start="521:21" pos:end="521:32"><expr pos:start="521:21" pos:end="521:31"><name pos:start="521:21" pos:end="521:27">use_aht</name> <operator pos:start="521:29" pos:end="521:29">=</operator> <literal type="number" pos:start="521:31" pos:end="521:31">0</literal></expr>;</expr_stmt>

                    <break pos:start="523:21" pos:end="523:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="529:13" pos:end="529:64"><expr pos:start="529:13" pos:end="529:63"><name pos:start="529:13" pos:end="529:35"><name pos:start="529:13" pos:end="529:13">s</name><operator pos:start="529:14" pos:end="529:15">-&gt;</operator><name pos:start="529:16" pos:end="529:31">channel_uses_aht</name><index pos:start="529:32" pos:end="529:35">[<expr pos:start="529:33" pos:end="529:34"><name pos:start="529:33" pos:end="529:34">ch</name></expr>]</index></name> <operator pos:start="529:37" pos:end="529:37">=</operator> <name pos:start="529:39" pos:end="529:45">use_aht</name> <operator pos:start="529:47" pos:end="529:48">&amp;&amp;</operator> <call pos:start="529:50" pos:end="529:63"><name pos:start="529:50" pos:end="529:58">get_bits1</name><argument_list pos:start="529:59" pos:end="529:63">(<argument pos:start="529:60" pos:end="529:62"><expr pos:start="529:60" pos:end="529:62"><name pos:start="529:60" pos:end="529:62">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="533:7" pos:end="537:5">else <block pos:start="533:12" pos:end="537:5">{<block_content pos:start="535:9" pos:end="535:68">

        <expr_stmt pos:start="535:9" pos:end="535:68"><expr pos:start="535:9" pos:end="535:67"><call pos:start="535:9" pos:end="535:67"><name pos:start="535:9" pos:end="535:14">memset</name><argument_list pos:start="535:15" pos:end="535:67">(<argument pos:start="535:16" pos:end="535:34"><expr pos:start="535:16" pos:end="535:34"><name pos:start="535:16" pos:end="535:34"><name pos:start="535:16" pos:end="535:16">s</name><operator pos:start="535:17" pos:end="535:18">-&gt;</operator><name pos:start="535:19" pos:end="535:34">channel_uses_aht</name></name></expr></argument>, <argument pos:start="535:37" pos:end="535:37"><expr pos:start="535:37" pos:end="535:37"><literal type="number" pos:start="535:37" pos:end="535:37">0</literal></expr></argument>, <argument pos:start="535:40" pos:end="535:66"><expr pos:start="535:40" pos:end="535:66"><sizeof pos:start="535:40" pos:end="535:66">sizeof<argument_list pos:start="535:46" pos:end="535:66">(<argument pos:start="535:47" pos:end="535:65"><expr pos:start="535:47" pos:end="535:65"><name pos:start="535:47" pos:end="535:65"><name pos:start="535:47" pos:end="535:47">s</name><operator pos:start="535:48" pos:end="535:49">-&gt;</operator><name pos:start="535:50" pos:end="535:65">channel_uses_aht</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="541:5" pos:end="541:30">/* per-frame SNR offset */</comment>

    <if_stmt pos:start="543:5" pos:end="553:5"><if pos:start="543:5" pos:end="553:5">if <condition pos:start="543:8" pos:end="543:32">(<expr pos:start="543:9" pos:end="543:31"><operator pos:start="543:9" pos:end="543:9">!</operator><name pos:start="543:10" pos:end="543:31"><name pos:start="543:10" pos:end="543:10">s</name><operator pos:start="543:11" pos:end="543:12">-&gt;</operator><name pos:start="543:13" pos:end="543:31">snr_offset_strategy</name></name></expr>)</condition> <block pos:start="543:34" pos:end="553:5">{<block_content pos:start="545:9" pos:end="551:41">

        <decl_stmt pos:start="545:9" pos:end="545:53"><decl pos:start="545:9" pos:end="545:52"><type pos:start="545:9" pos:end="545:11"><name pos:start="545:9" pos:end="545:11">int</name></type> <name pos:start="545:13" pos:end="545:21">csnroffst</name> <init pos:start="545:23" pos:end="545:52">= <expr pos:start="545:25" pos:end="545:52"><operator pos:start="545:25" pos:end="545:25">(</operator><call pos:start="545:26" pos:end="545:41"><name pos:start="545:26" pos:end="545:33">get_bits</name><argument_list pos:start="545:34" pos:end="545:41">(<argument pos:start="545:35" pos:end="545:37"><expr pos:start="545:35" pos:end="545:37"><name pos:start="545:35" pos:end="545:37">gbc</name></expr></argument>, <argument pos:start="545:40" pos:end="545:40"><expr pos:start="545:40" pos:end="545:40"><literal type="number" pos:start="545:40" pos:end="545:40">6</literal></expr></argument>)</argument_list></call> <operator pos:start="545:43" pos:end="545:43">-</operator> <literal type="number" pos:start="545:45" pos:end="545:46">15</literal><operator pos:start="545:47" pos:end="545:47">)</operator> <operator pos:start="545:49" pos:end="545:50">&lt;&lt;</operator> <literal type="number" pos:start="545:52" pos:end="545:52">4</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="547:9" pos:end="547:59"><decl pos:start="547:9" pos:end="547:58"><type pos:start="547:9" pos:end="547:11"><name pos:start="547:9" pos:end="547:11">int</name></type> <name pos:start="547:13" pos:end="547:20">snroffst</name> <init pos:start="547:22" pos:end="547:58">= <expr pos:start="547:24" pos:end="547:58"><operator pos:start="547:24" pos:end="547:24">(</operator><name pos:start="547:25" pos:end="547:33">csnroffst</name> <operator pos:start="547:35" pos:end="547:35">+</operator> <call pos:start="547:37" pos:end="547:52"><name pos:start="547:37" pos:end="547:44">get_bits</name><argument_list pos:start="547:45" pos:end="547:52">(<argument pos:start="547:46" pos:end="547:48"><expr pos:start="547:46" pos:end="547:48"><name pos:start="547:46" pos:end="547:48">gbc</name></expr></argument>, <argument pos:start="547:51" pos:end="547:51"><expr pos:start="547:51" pos:end="547:51"><literal type="number" pos:start="547:51" pos:end="547:51">4</literal></expr></argument>)</argument_list></call><operator pos:start="547:53" pos:end="547:53">)</operator> <operator pos:start="547:55" pos:end="547:56">&lt;&lt;</operator> <literal type="number" pos:start="547:58" pos:end="547:58">2</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="549:9" pos:end="551:41">for <control pos:start="549:13" pos:end="549:45">(<init pos:start="549:14" pos:end="549:20"><expr pos:start="549:14" pos:end="549:19"><name pos:start="549:14" pos:end="549:15">ch</name> <operator pos:start="549:17" pos:end="549:17">=</operator> <literal type="number" pos:start="549:19" pos:end="549:19">0</literal></expr>;</init> <condition pos:start="549:22" pos:end="549:39"><expr pos:start="549:22" pos:end="549:38"><name pos:start="549:22" pos:end="549:23">ch</name> <operator pos:start="549:25" pos:end="549:26">&lt;=</operator> <name pos:start="549:28" pos:end="549:38"><name pos:start="549:28" pos:end="549:28">s</name><operator pos:start="549:29" pos:end="549:30">-&gt;</operator><name pos:start="549:31" pos:end="549:38">channels</name></name></expr>;</condition> <incr pos:start="549:41" pos:end="549:44"><expr pos:start="549:41" pos:end="549:44"><name pos:start="549:41" pos:end="549:42">ch</name><operator pos:start="549:43" pos:end="549:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="551:13" pos:end="551:41"><block_content pos:start="551:13" pos:end="551:41">

            <expr_stmt pos:start="551:13" pos:end="551:41"><expr pos:start="551:13" pos:end="551:40"><name pos:start="551:13" pos:end="551:29"><name pos:start="551:13" pos:end="551:13">s</name><operator pos:start="551:14" pos:end="551:15">-&gt;</operator><name pos:start="551:16" pos:end="551:25">snr_offset</name><index pos:start="551:26" pos:end="551:29">[<expr pos:start="551:27" pos:end="551:28"><name pos:start="551:27" pos:end="551:28">ch</name></expr>]</index></name> <operator pos:start="551:31" pos:end="551:31">=</operator> <name pos:start="551:33" pos:end="551:40">snroffst</name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="557:5" pos:end="557:45">/* transient pre-noise processing data */</comment>

    <if_stmt pos:start="559:5" pos:end="573:5"><if pos:start="559:5" pos:end="573:5">if <condition pos:start="559:8" pos:end="559:34">(<expr pos:start="559:9" pos:end="559:33"><name pos:start="559:9" pos:end="559:33">parse_transient_proc_info</name></expr>)</condition> <block pos:start="559:36" pos:end="573:5">{<block_content pos:start="561:9" pos:end="571:9">

        <for pos:start="561:9" pos:end="571:9">for <control pos:start="561:13" pos:end="561:49">(<init pos:start="561:14" pos:end="561:20"><expr pos:start="561:14" pos:end="561:19"><name pos:start="561:14" pos:end="561:15">ch</name> <operator pos:start="561:17" pos:end="561:17">=</operator> <literal type="number" pos:start="561:19" pos:end="561:19">1</literal></expr>;</init> <condition pos:start="561:22" pos:end="561:43"><expr pos:start="561:22" pos:end="561:42"><name pos:start="561:22" pos:end="561:23">ch</name> <operator pos:start="561:25" pos:end="561:26">&lt;=</operator> <name pos:start="561:28" pos:end="561:42"><name pos:start="561:28" pos:end="561:28">s</name><operator pos:start="561:29" pos:end="561:30">-&gt;</operator><name pos:start="561:31" pos:end="561:42">fbw_channels</name></name></expr>;</condition> <incr pos:start="561:45" pos:end="561:48"><expr pos:start="561:45" pos:end="561:48"><name pos:start="561:45" pos:end="561:46">ch</name><operator pos:start="561:47" pos:end="561:48">++</operator></expr></incr>)</control> <block pos:start="561:51" pos:end="571:9">{<block_content pos:start="563:13" pos:end="569:13">

            <if_stmt pos:start="563:13" pos:end="569:13"><if pos:start="563:13" pos:end="569:13">if <condition pos:start="563:16" pos:end="563:31">(<expr pos:start="563:17" pos:end="563:30"><call pos:start="563:17" pos:end="563:30"><name pos:start="563:17" pos:end="563:25">get_bits1</name><argument_list pos:start="563:26" pos:end="563:30">(<argument pos:start="563:27" pos:end="563:29"><expr pos:start="563:27" pos:end="563:29"><name pos:start="563:27" pos:end="563:29">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="563:33" pos:end="569:13">{<block_content pos:start="565:17" pos:end="567:34"> <comment type="line" pos:start="563:35" pos:end="563:68">// channel in transient processing</comment>

                <expr_stmt pos:start="565:17" pos:end="565:35"><expr pos:start="565:17" pos:end="565:34"><call pos:start="565:17" pos:end="565:34"><name pos:start="565:17" pos:end="565:25">skip_bits</name><argument_list pos:start="565:26" pos:end="565:34">(<argument pos:start="565:27" pos:end="565:29"><expr pos:start="565:27" pos:end="565:29"><name pos:start="565:27" pos:end="565:29">gbc</name></expr></argument>, <argument pos:start="565:32" pos:end="565:33"><expr pos:start="565:32" pos:end="565:33"><literal type="number" pos:start="565:32" pos:end="565:33">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="565:37" pos:end="565:73">// skip transient processing location</comment>

                <expr_stmt pos:start="567:17" pos:end="567:34"><expr pos:start="567:17" pos:end="567:33"><call pos:start="567:17" pos:end="567:33"><name pos:start="567:17" pos:end="567:25">skip_bits</name><argument_list pos:start="567:26" pos:end="567:33">(<argument pos:start="567:27" pos:end="567:29"><expr pos:start="567:27" pos:end="567:29"><name pos:start="567:27" pos:end="567:29">gbc</name></expr></argument>, <argument pos:start="567:32" pos:end="567:32"><expr pos:start="567:32" pos:end="567:32"><literal type="number" pos:start="567:32" pos:end="567:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="567:37" pos:end="567:71">// skip transient processing length</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="577:5" pos:end="577:45">/* spectral extension attenuation data */</comment>

    <for pos:start="579:5" pos:end="591:5">for <control pos:start="579:9" pos:end="579:45">(<init pos:start="579:10" pos:end="579:16"><expr pos:start="579:10" pos:end="579:15"><name pos:start="579:10" pos:end="579:11">ch</name> <operator pos:start="579:13" pos:end="579:13">=</operator> <literal type="number" pos:start="579:15" pos:end="579:15">1</literal></expr>;</init> <condition pos:start="579:18" pos:end="579:39"><expr pos:start="579:18" pos:end="579:38"><name pos:start="579:18" pos:end="579:19">ch</name> <operator pos:start="579:21" pos:end="579:22">&lt;=</operator> <name pos:start="579:24" pos:end="579:38"><name pos:start="579:24" pos:end="579:24">s</name><operator pos:start="579:25" pos:end="579:26">-&gt;</operator><name pos:start="579:27" pos:end="579:38">fbw_channels</name></name></expr>;</condition> <incr pos:start="579:41" pos:end="579:44"><expr pos:start="579:41" pos:end="579:44"><name pos:start="579:41" pos:end="579:42">ch</name><operator pos:start="579:43" pos:end="579:44">++</operator></expr></incr>)</control> <block pos:start="579:47" pos:end="591:5">{<block_content pos:start="581:9" pos:end="589:9">

        <if_stmt pos:start="581:9" pos:end="589:9"><if pos:start="581:9" pos:end="585:9">if <condition pos:start="581:12" pos:end="581:51">(<expr pos:start="581:13" pos:end="581:50"><name pos:start="581:13" pos:end="581:32">parse_spx_atten_data</name> <operator pos:start="581:34" pos:end="581:35">&amp;&amp;</operator> <call pos:start="581:37" pos:end="581:50"><name pos:start="581:37" pos:end="581:45">get_bits1</name><argument_list pos:start="581:46" pos:end="581:50">(<argument pos:start="581:47" pos:end="581:49"><expr pos:start="581:47" pos:end="581:49"><name pos:start="581:47" pos:end="581:49">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="581:53" pos:end="585:9">{<block_content pos:start="583:13" pos:end="583:53">

            <expr_stmt pos:start="583:13" pos:end="583:53"><expr pos:start="583:13" pos:end="583:52"><name pos:start="583:13" pos:end="583:33"><name pos:start="583:13" pos:end="583:13">s</name><operator pos:start="583:14" pos:end="583:15">-&gt;</operator><name pos:start="583:16" pos:end="583:29">spx_atten_code</name><index pos:start="583:30" pos:end="583:33">[<expr pos:start="583:31" pos:end="583:32"><name pos:start="583:31" pos:end="583:32">ch</name></expr>]</index></name> <operator pos:start="583:35" pos:end="583:35">=</operator> <call pos:start="583:37" pos:end="583:52"><name pos:start="583:37" pos:end="583:44">get_bits</name><argument_list pos:start="583:45" pos:end="583:52">(<argument pos:start="583:46" pos:end="583:48"><expr pos:start="583:46" pos:end="583:48"><name pos:start="583:46" pos:end="583:48">gbc</name></expr></argument>, <argument pos:start="583:51" pos:end="583:51"><expr pos:start="583:51" pos:end="583:51"><literal type="number" pos:start="583:51" pos:end="583:51">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="585:11" pos:end="589:9">else <block pos:start="585:16" pos:end="589:9">{<block_content pos:start="587:13" pos:end="587:39">

            <expr_stmt pos:start="587:13" pos:end="587:39"><expr pos:start="587:13" pos:end="587:38"><name pos:start="587:13" pos:end="587:33"><name pos:start="587:13" pos:end="587:13">s</name><operator pos:start="587:14" pos:end="587:15">-&gt;</operator><name pos:start="587:16" pos:end="587:29">spx_atten_code</name><index pos:start="587:30" pos:end="587:33">[<expr pos:start="587:31" pos:end="587:32"><name pos:start="587:31" pos:end="587:32">ch</name></expr>]</index></name> <operator pos:start="587:35" pos:end="587:35">=</operator> <operator pos:start="587:37" pos:end="587:37">-</operator><literal type="number" pos:start="587:38" pos:end="587:38">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="595:5" pos:end="595:33">/* block start information */</comment>

    <if_stmt pos:start="597:5" pos:end="613:5"><if pos:start="597:5" pos:end="613:5">if <condition pos:start="597:8" pos:end="597:44">(<expr pos:start="597:9" pos:end="597:43"><name pos:start="597:9" pos:end="597:21"><name pos:start="597:9" pos:end="597:9">s</name><operator pos:start="597:10" pos:end="597:11">-&gt;</operator><name pos:start="597:12" pos:end="597:21">num_blocks</name></name> <operator pos:start="597:23" pos:end="597:23">&gt;</operator> <literal type="number" pos:start="597:25" pos:end="597:25">1</literal> <operator pos:start="597:27" pos:end="597:28">&amp;&amp;</operator> <call pos:start="597:30" pos:end="597:43"><name pos:start="597:30" pos:end="597:38">get_bits1</name><argument_list pos:start="597:39" pos:end="597:43">(<argument pos:start="597:40" pos:end="597:42"><expr pos:start="597:40" pos:end="597:42"><name pos:start="597:40" pos:end="597:42">gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="597:46" pos:end="613:5">{<block_content pos:start="607:9" pos:end="611:60">

        <comment type="block" pos:start="599:9" pos:end="605:69">/* reference: Section E2.3.2.27

           nblkstrtbits = (numblks - 1) * (4 + ceiling(log2(words_per_frame)))

           The spec does not say what this data is or what it's used for.

           It is likely the offset of each block within the frame. */</comment>

        <decl_stmt pos:start="607:9" pos:end="607:82"><decl pos:start="607:9" pos:end="607:81"><type pos:start="607:9" pos:end="607:11"><name pos:start="607:9" pos:end="607:11">int</name></type> <name pos:start="607:13" pos:end="607:28">block_start_bits</name> <init pos:start="607:30" pos:end="607:81">= <expr pos:start="607:32" pos:end="607:81"><operator pos:start="607:32" pos:end="607:32">(</operator><name pos:start="607:33" pos:end="607:45"><name pos:start="607:33" pos:end="607:33">s</name><operator pos:start="607:34" pos:end="607:35">-&gt;</operator><name pos:start="607:36" pos:end="607:45">num_blocks</name></name><operator pos:start="607:46" pos:end="607:46">-</operator><literal type="number" pos:start="607:47" pos:end="607:47">1</literal><operator pos:start="607:48" pos:end="607:48">)</operator> <operator pos:start="607:50" pos:end="607:50">*</operator> <operator pos:start="607:52" pos:end="607:52">(</operator><literal type="number" pos:start="607:53" pos:end="607:55">4</literal> <operator pos:start="607:55" pos:end="607:55">+</operator> <call pos:start="607:57" pos:end="607:80"><name pos:start="607:57" pos:end="607:63">av_log2</name><argument_list pos:start="607:64" pos:end="607:80">(<argument pos:start="607:65" pos:end="607:79"><expr pos:start="607:65" pos:end="607:79"><name pos:start="607:65" pos:end="607:77"><name pos:start="607:65" pos:end="607:65">s</name><operator pos:start="607:66" pos:end="607:67">-&gt;</operator><name pos:start="607:68" pos:end="607:77">frame_size</name></name><operator pos:start="607:78" pos:end="607:78">-</operator><literal type="number" pos:start="607:79" pos:end="607:79">2</literal></expr></argument>)</argument_list></call><operator pos:start="607:81" pos:end="607:81">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:46"><expr pos:start="609:9" pos:end="609:45"><call pos:start="609:9" pos:end="609:45"><name pos:start="609:9" pos:end="609:22">skip_bits_long</name><argument_list pos:start="609:23" pos:end="609:45">(<argument pos:start="609:24" pos:end="609:26"><expr pos:start="609:24" pos:end="609:26"><name pos:start="609:24" pos:end="609:26">gbc</name></expr></argument>, <argument pos:start="609:29" pos:end="609:44"><expr pos:start="609:29" pos:end="609:44"><name pos:start="609:29" pos:end="609:44">block_start_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="611:9" pos:end="611:60"><expr pos:start="611:9" pos:end="611:59"><call pos:start="611:9" pos:end="611:59"><name pos:start="611:9" pos:end="611:29">avpriv_request_sample</name><argument_list pos:start="611:30" pos:end="611:59">(<argument pos:start="611:31" pos:end="611:38"><expr pos:start="611:31" pos:end="611:38"><name pos:start="611:31" pos:end="611:38"><name pos:start="611:31" pos:end="611:31">s</name><operator pos:start="611:32" pos:end="611:33">-&gt;</operator><name pos:start="611:34" pos:end="611:38">avctx</name></name></expr></argument>, <argument pos:start="611:41" pos:end="611:58"><expr pos:start="611:41" pos:end="611:58"><literal type="string" pos:start="611:41" pos:end="611:58">"Block start info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="617:5" pos:end="617:37">/* syntax state initialization */</comment>

    <for pos:start="619:5" pos:end="625:5">for <control pos:start="619:9" pos:end="619:45">(<init pos:start="619:10" pos:end="619:16"><expr pos:start="619:10" pos:end="619:15"><name pos:start="619:10" pos:end="619:11">ch</name> <operator pos:start="619:13" pos:end="619:13">=</operator> <literal type="number" pos:start="619:15" pos:end="619:15">1</literal></expr>;</init> <condition pos:start="619:18" pos:end="619:39"><expr pos:start="619:18" pos:end="619:38"><name pos:start="619:18" pos:end="619:19">ch</name> <operator pos:start="619:21" pos:end="619:22">&lt;=</operator> <name pos:start="619:24" pos:end="619:38"><name pos:start="619:24" pos:end="619:24">s</name><operator pos:start="619:25" pos:end="619:26">-&gt;</operator><name pos:start="619:27" pos:end="619:38">fbw_channels</name></name></expr>;</condition> <incr pos:start="619:41" pos:end="619:44"><expr pos:start="619:41" pos:end="619:44"><name pos:start="619:41" pos:end="619:42">ch</name><operator pos:start="619:43" pos:end="619:44">++</operator></expr></incr>)</control> <block pos:start="619:47" pos:end="625:5">{<block_content pos:start="621:9" pos:end="623:36">

        <expr_stmt pos:start="621:9" pos:end="621:36"><expr pos:start="621:9" pos:end="621:35"><name pos:start="621:9" pos:end="621:31"><name pos:start="621:9" pos:end="621:9">s</name><operator pos:start="621:10" pos:end="621:11">-&gt;</operator><name pos:start="621:12" pos:end="621:27">first_spx_coords</name><index pos:start="621:28" pos:end="621:31">[<expr pos:start="621:29" pos:end="621:30"><name pos:start="621:29" pos:end="621:30">ch</name></expr>]</index></name> <operator pos:start="621:33" pos:end="621:33">=</operator> <literal type="number" pos:start="621:35" pos:end="621:35">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="623:9" pos:end="623:36"><expr pos:start="623:9" pos:end="623:35"><name pos:start="623:9" pos:end="623:31"><name pos:start="623:9" pos:end="623:9">s</name><operator pos:start="623:10" pos:end="623:11">-&gt;</operator><name pos:start="623:12" pos:end="623:27">first_cpl_coords</name><index pos:start="623:28" pos:end="623:31">[<expr pos:start="623:29" pos:end="623:30"><name pos:start="623:29" pos:end="623:30">ch</name></expr>]</index></name> <operator pos:start="623:33" pos:end="623:33">=</operator> <literal type="number" pos:start="623:35" pos:end="623:35">1</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="627:5" pos:end="627:26"><expr pos:start="627:5" pos:end="627:25"><name pos:start="627:5" pos:end="627:21"><name pos:start="627:5" pos:end="627:5">s</name><operator pos:start="627:6" pos:end="627:7">-&gt;</operator><name pos:start="627:8" pos:end="627:21">first_cpl_leak</name></name> <operator pos:start="627:23" pos:end="627:23">=</operator> <literal type="number" pos:start="627:25" pos:end="627:25">1</literal></expr>;</expr_stmt>



    <return pos:start="631:5" pos:end="631:13">return <expr pos:start="631:12" pos:end="631:12"><literal type="number" pos:start="631:12" pos:end="631:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
