<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8841.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">xen_pt_msgaddr32_reg_write</name><parameter_list pos:start="1:38" pos:end="5:78">(<parameter pos:start="1:39" pos:end="1:63"><decl pos:start="1:39" pos:end="1:63"><type pos:start="1:39" pos:end="1:63"><name pos:start="1:39" pos:end="1:60">XenPCIPassthroughState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">s</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:57"><decl pos:start="3:39" pos:end="3:57"><type pos:start="3:39" pos:end="3:57"><name pos:start="3:39" pos:end="3:46">XenPTReg</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:57">cfg_entry</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:72"><decl pos:start="3:60" pos:end="3:72"><type pos:start="3:60" pos:end="3:72"><name pos:start="3:60" pos:end="3:67">uint32_t</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:72">val</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:56"><decl pos:start="5:39" pos:end="5:56"><type pos:start="5:39" pos:end="5:56"><name pos:start="5:39" pos:end="5:46">uint32_t</name></type> <name pos:start="5:48" pos:end="5:56">dev_value</name></decl></parameter>, <parameter pos:start="5:59" pos:end="5:77"><decl pos:start="5:59" pos:end="5:77"><type pos:start="5:59" pos:end="5:77"><name pos:start="5:59" pos:end="5:66">uint32_t</name></type> <name pos:start="5:68" pos:end="5:77">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="49:1">{<block_content pos:start="9:5" pos:end="47:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:26">writable_mask</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:21">old_addr</name> <init pos:start="13:23" pos:end="13:39">= <expr pos:start="13:25" pos:end="13:39"><name pos:start="13:25" pos:end="13:39"><name pos:start="13:25" pos:end="13:33">cfg_entry</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:39">data</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:63"><expr pos:start="19:5" pos:end="19:62"><name pos:start="19:5" pos:end="19:17">writable_mask</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <name pos:start="19:21" pos:end="19:33"><name pos:start="19:21" pos:end="19:23">reg</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:33">emu_mask</name></name> <operator pos:start="19:35" pos:end="19:35">&amp;</operator> <operator pos:start="19:37" pos:end="19:37">~</operator><name pos:start="19:38" pos:end="19:49"><name pos:start="19:38" pos:end="19:40">reg</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:49">ro_mask</name></name> <operator pos:start="19:51" pos:end="19:51">&amp;</operator> <name pos:start="19:53" pos:end="19:62">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:79"><expr pos:start="21:5" pos:end="21:78"><name pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:13">cfg_entry</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:19">data</name></name> <operator pos:start="21:21" pos:end="21:21">=</operator> <call pos:start="21:23" pos:end="21:78"><name pos:start="21:23" pos:end="21:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="21:41" pos:end="21:78">(<argument pos:start="21:42" pos:end="21:45"><expr pos:start="21:42" pos:end="21:45"><operator pos:start="21:42" pos:end="21:42">*</operator><name pos:start="21:43" pos:end="21:45">val</name></expr></argument>, <argument pos:start="21:48" pos:end="21:62"><expr pos:start="21:48" pos:end="21:62"><name pos:start="21:48" pos:end="21:62"><name pos:start="21:48" pos:end="21:56">cfg_entry</name><operator pos:start="21:57" pos:end="21:58">-&gt;</operator><name pos:start="21:59" pos:end="21:62">data</name></name></expr></argument>, <argument pos:start="21:65" pos:end="21:77"><expr pos:start="21:65" pos:end="21:77"><name pos:start="21:65" pos:end="21:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:10">msi</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:19">addr_lo</name></name> <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:37"><name pos:start="23:23" pos:end="23:31">cfg_entry</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:37">data</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:57">/* create value for writing to I/O device register */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:50"><expr pos:start="29:5" pos:end="29:49"><operator pos:start="29:5" pos:end="29:5">*</operator><name pos:start="29:6" pos:end="29:8">val</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:49"><name pos:start="29:12" pos:end="29:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="29:30" pos:end="29:49">(<argument pos:start="29:31" pos:end="29:34"><expr pos:start="29:31" pos:end="29:34"><operator pos:start="29:31" pos:end="29:31">*</operator><name pos:start="29:32" pos:end="29:34">val</name></expr></argument>, <argument pos:start="29:37" pos:end="29:45"><expr pos:start="29:37" pos:end="29:45"><name pos:start="29:37" pos:end="29:45">dev_value</name></expr></argument>, <argument pos:start="29:48" pos:end="29:48"><expr pos:start="29:48" pos:end="29:48"><literal type="number" pos:start="29:48" pos:end="29:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:20">/* update MSI */</comment>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:36">(<expr pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:17">cfg_entry</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:23">data</name></name> <operator pos:start="35:25" pos:end="35:26">!=</operator> <name pos:start="35:28" pos:end="35:35">old_addr</name></expr>)</condition> <block pos:start="35:38" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:9">

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:27">(<expr pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:18">msi</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:26">mapped</name></name></expr>)</condition> <block pos:start="37:29" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:33">

            <expr_stmt pos:start="39:13" pos:end="39:33"><expr pos:start="39:13" pos:end="39:32"><call pos:start="39:13" pos:end="39:32"><name pos:start="39:13" pos:end="39:29">xen_pt_msi_update</name><argument_list pos:start="39:30" pos:end="39:32">(<argument pos:start="39:31" pos:end="39:31"><expr pos:start="39:31" pos:end="39:31"><name pos:start="39:31" pos:end="39:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="47:5" pos:end="47:13">return <expr pos:start="47:12" pos:end="47:12"><literal type="number" pos:start="47:12" pos:end="47:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
