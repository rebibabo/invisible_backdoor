<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19873.c" pos:tabs="8"><function pos:start="1:1" pos:end="741:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:33">rtl8139_do_receive</name><parameter_list pos:start="1:34" pos:end="1:106">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:49">VLANClientState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">nc</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:73"><decl pos:start="1:56" pos:end="1:73"><type pos:start="1:56" pos:end="1:73"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:68">uint8_t</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">buf</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:87"><decl pos:start="1:76" pos:end="1:87"><type pos:start="1:76" pos:end="1:87"><name pos:start="1:76" pos:end="1:81">size_t</name></type> <name pos:start="1:83" pos:end="1:87">size_</name></decl></parameter>, <parameter pos:start="1:90" pos:end="1:105"><decl pos:start="1:90" pos:end="1:105"><type pos:start="1:90" pos:end="1:105"><name pos:start="1:90" pos:end="1:92">int</name></type> <name pos:start="1:94" pos:end="1:105">do_interrupt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="741:1">{<block_content pos:start="5:5" pos:end="739:17">

    <decl_stmt pos:start="5:5" pos:end="5:58"><decl pos:start="5:5" pos:end="5:57"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">RTL8139State</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:57">= <expr pos:start="5:23" pos:end="5:57"><call pos:start="5:23" pos:end="5:49"><name pos:start="5:23" pos:end="5:31">DO_UPCAST</name><argument_list pos:start="5:32" pos:end="5:49">(<argument pos:start="5:33" pos:end="5:40"><expr pos:start="5:33" pos:end="5:40"><name pos:start="5:33" pos:end="5:40">NICState</name></expr></argument>, <argument pos:start="5:43" pos:end="5:44"><expr pos:start="5:43" pos:end="5:44"><name pos:start="5:43" pos:end="5:44">nc</name></expr></argument>, <argument pos:start="5:47" pos:end="5:48"><expr pos:start="5:47" pos:end="5:48"><name pos:start="5:47" pos:end="5:48">nc</name></expr></argument>)</argument_list></call><operator pos:start="5:50" pos:end="5:51">-&gt;</operator><name pos:start="5:52" pos:end="5:57">opaque</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="7:5" pos:end="7:63">/* size is the length of the buffer passed to the driver */</comment>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">size</name> <init pos:start="9:14" pos:end="9:20">= <expr pos:start="9:16" pos:end="9:20"><name pos:start="9:16" pos:end="9:20">size_</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:28">dot1q_buf</name> <init pos:start="11:30" pos:end="11:35">= <expr pos:start="11:32" pos:end="11:35"><name pos:start="11:32" pos:end="11:35">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:26">packet_header</name> <init pos:start="15:28" pos:end="15:30">= <expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="19:5" pos:end="19:43"><decl pos:start="19:5" pos:end="19:42"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:42"><name pos:start="19:13" pos:end="19:16">buf1</name><index pos:start="19:17" pos:end="19:42">[<expr pos:start="19:18" pos:end="19:41"><name pos:start="19:18" pos:end="19:29">MIN_BUF_SIZE</name> <operator pos:start="19:31" pos:end="19:31">+</operator> <name pos:start="19:33" pos:end="19:41">VLAN_HLEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="23:47"><decl pos:start="21:5" pos:end="23:46"><type pos:start="21:5" pos:end="21:24"><specifier pos:start="21:5" pos:end="21:10">static</specifier> <specifier pos:start="21:12" pos:end="21:16">const</specifier> <name pos:start="21:18" pos:end="21:24">uint8_t</name></type> <name pos:start="21:26" pos:end="21:45"><name pos:start="21:26" pos:end="21:42">broadcast_macaddr</name><index pos:start="21:43" pos:end="21:45">[<expr pos:start="21:44" pos:end="21:44"><literal type="number" pos:start="21:44" pos:end="21:44">6</literal></expr>]</index></name> <init pos:start="21:47" pos:end="23:46">=

        <expr pos:start="23:9" pos:end="23:46"><block pos:start="23:9" pos:end="23:46">{ <expr pos:start="23:11" pos:end="23:14"><literal type="number" pos:start="23:11" pos:end="23:14">0xff</literal></expr>, <expr pos:start="23:17" pos:end="23:20"><literal type="number" pos:start="23:17" pos:end="23:20">0xff</literal></expr>, <expr pos:start="23:23" pos:end="23:26"><literal type="number" pos:start="23:23" pos:end="23:26">0xff</literal></expr>, <expr pos:start="23:29" pos:end="23:32"><literal type="number" pos:start="23:29" pos:end="23:32">0xff</literal></expr>, <expr pos:start="23:35" pos:end="23:38"><literal type="number" pos:start="23:35" pos:end="23:38">0xff</literal></expr>, <expr pos:start="23:41" pos:end="23:44"><literal type="number" pos:start="23:41" pos:end="23:44">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:58"><expr pos:start="27:5" pos:end="27:57"><call pos:start="27:5" pos:end="27:57"><name pos:start="27:5" pos:end="27:15">DEBUG_PRINT</name><argument_list pos:start="27:16" pos:end="27:57">(<argument pos:start="27:17" pos:end="27:56"><expr pos:start="27:17" pos:end="27:56"><operator pos:start="27:17" pos:end="27:17">(</operator><literal type="string" pos:start="27:18" pos:end="27:49">"&gt;&gt;&gt; RTL8139: received len=%d\n"</literal><operator pos:start="27:50" pos:end="27:50">,</operator> <name pos:start="27:52" pos:end="27:55">size</name><operator pos:start="27:56" pos:end="27:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:40">/* test if board clock is stopped */</comment>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:25"><name pos:start="33:10" pos:end="33:10">s</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:25">clock_enabled</name></name></expr>)</condition>

    <block pos:start="35:5" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:71"><expr pos:start="37:9" pos:end="37:70"><call pos:start="37:9" pos:end="37:70"><name pos:start="37:9" pos:end="37:19">DEBUG_PRINT</name><argument_list pos:start="37:20" pos:end="37:70">(<argument pos:start="37:21" pos:end="37:69"><expr pos:start="37:21" pos:end="37:69"><operator pos:start="37:21" pos:end="37:21">(</operator><literal type="string" pos:start="37:22" pos:end="37:68">"RTL8139: stopped ==========================\n"</literal><operator pos:start="37:69" pos:end="37:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:44">/* first check if receiver is enabled */</comment>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:37">(<expr pos:start="49:9" pos:end="49:36"><operator pos:start="49:9" pos:end="49:9">!</operator><call pos:start="49:10" pos:end="49:36"><name pos:start="49:10" pos:end="49:33">rtl8139_receiver_enabled</name><argument_list pos:start="49:34" pos:end="49:36">(<argument pos:start="49:35" pos:end="49:35"><expr pos:start="49:35" pos:end="49:35"><name pos:start="49:35" pos:end="49:35">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="51:5" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><call pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:19">DEBUG_PRINT</name><argument_list pos:start="53:20" pos:end="53:70">(<argument pos:start="53:21" pos:end="53:69"><expr pos:start="53:21" pos:end="53:69"><operator pos:start="53:21" pos:end="53:21">(</operator><literal type="string" pos:start="53:22" pos:end="53:68">"RTL8139: receiver disabled ================\n"</literal><operator pos:start="53:69" pos:end="53:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:18">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:25">/* XXX: check this */</comment>

    <if_stmt pos:start="63:5" pos:end="239:5"><if pos:start="63:5" pos:end="71:5">if <condition pos:start="63:8" pos:end="63:36">(<expr pos:start="63:9" pos:end="63:35"><name pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:19">RxConfig</name></name> <operator pos:start="63:21" pos:end="63:21">&amp;</operator> <name pos:start="63:23" pos:end="63:35">AcceptAllPhys</name></expr>)</condition> <block pos:start="63:38" pos:end="71:5">{<block_content pos:start="67:9" pos:end="67:76">

        <comment type="block" pos:start="65:9" pos:end="65:38">/* promiscuous: receive all */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:76"><expr pos:start="67:9" pos:end="67:75"><call pos:start="67:9" pos:end="67:75"><name pos:start="67:9" pos:end="67:19">DEBUG_PRINT</name><argument_list pos:start="67:20" pos:end="67:75">(<argument pos:start="67:21" pos:end="67:74"><expr pos:start="67:21" pos:end="67:74"><operator pos:start="67:21" pos:end="67:21">(</operator><literal type="string" pos:start="67:22" pos:end="67:73">"&gt;&gt;&gt; RTL8139: packet received in promiscuous mode\n"</literal><operator pos:start="67:74" pos:end="67:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="71:7" pos:end="239:5">else <block pos:start="71:12" pos:end="239:5">{<block_content pos:start="73:9" pos:end="237:9">

        <if_stmt pos:start="73:9" pos:end="237:9"><if pos:start="73:9" pos:end="111:9">if <condition pos:start="73:12" pos:end="73:48">(<expr pos:start="73:13" pos:end="73:47"><operator pos:start="73:13" pos:end="73:13">!</operator><call pos:start="73:14" pos:end="73:47"><name pos:start="73:14" pos:end="73:19">memcmp</name><argument_list pos:start="73:20" pos:end="73:47">(<argument pos:start="73:21" pos:end="73:23"><expr pos:start="73:21" pos:end="73:23"><name pos:start="73:21" pos:end="73:23">buf</name></expr></argument>,  <argument pos:start="73:27" pos:end="73:43"><expr pos:start="73:27" pos:end="73:43"><name pos:start="73:27" pos:end="73:43">broadcast_macaddr</name></expr></argument>, <argument pos:start="73:46" pos:end="73:46"><expr pos:start="73:46" pos:end="73:46"><literal type="number" pos:start="73:46" pos:end="73:46">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:50" pos:end="111:9">{<block_content pos:start="77:13" pos:end="107:40">

            <comment type="block" pos:start="75:13" pos:end="75:35">/* broadcast address */</comment>

            <if_stmt pos:start="77:13" pos:end="93:13"><if pos:start="77:13" pos:end="93:13">if <condition pos:start="77:16" pos:end="77:49">(<expr pos:start="77:17" pos:end="77:48"><operator pos:start="77:17" pos:end="77:17">!</operator><operator pos:start="77:18" pos:end="77:18">(</operator><name pos:start="77:19" pos:end="77:29"><name pos:start="77:19" pos:end="77:19">s</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:29">RxConfig</name></name> <operator pos:start="77:31" pos:end="77:31">&amp;</operator> <name pos:start="77:33" pos:end="77:47">AcceptBroadcast</name><operator pos:start="77:48" pos:end="77:48">)</operator></expr>)</condition>

            <block pos:start="79:13" pos:end="93:13">{<block_content pos:start="81:17" pos:end="91:28">

                <expr_stmt pos:start="81:17" pos:end="81:74"><expr pos:start="81:17" pos:end="81:73"><call pos:start="81:17" pos:end="81:73"><name pos:start="81:17" pos:end="81:27">DEBUG_PRINT</name><argument_list pos:start="81:28" pos:end="81:73">(<argument pos:start="81:29" pos:end="81:72"><expr pos:start="81:29" pos:end="81:72"><operator pos:start="81:29" pos:end="81:29">(</operator><literal type="string" pos:start="81:30" pos:end="81:71">"&gt;&gt;&gt; RTL8139: broadcast packet rejected\n"</literal><operator pos:start="81:72" pos:end="81:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="85:17" pos:end="85:42">/* update tally counter */</comment>

                <expr_stmt pos:start="87:17" pos:end="87:42"><expr pos:start="87:17" pos:end="87:41"><operator pos:start="87:17" pos:end="87:18">++</operator><name pos:start="87:19" pos:end="87:41"><name pos:start="87:19" pos:end="87:19">s</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:35">tally_counters</name><operator pos:start="87:36" pos:end="87:36">.</operator><name pos:start="87:37" pos:end="87:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="91:17" pos:end="91:28">return <expr pos:start="91:24" pos:end="91:27"><name pos:start="91:24" pos:end="91:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="97:13" pos:end="97:41"><expr pos:start="97:13" pos:end="97:40"><name pos:start="97:13" pos:end="97:25">packet_header</name> <operator pos:start="97:27" pos:end="97:28">|=</operator> <name pos:start="97:30" pos:end="97:40">RxBroadcast</name></expr>;</expr_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:70"><expr pos:start="101:13" pos:end="101:69"><call pos:start="101:13" pos:end="101:69"><name pos:start="101:13" pos:end="101:23">DEBUG_PRINT</name><argument_list pos:start="101:24" pos:end="101:69">(<argument pos:start="101:25" pos:end="101:68"><expr pos:start="101:25" pos:end="101:68"><operator pos:start="101:25" pos:end="101:25">(</operator><literal type="string" pos:start="101:26" pos:end="101:67">"&gt;&gt;&gt; RTL8139: broadcast packet received\n"</literal><operator pos:start="101:68" pos:end="101:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="105:13" pos:end="105:38">/* update tally counter */</comment>

            <expr_stmt pos:start="107:13" pos:end="107:40"><expr pos:start="107:13" pos:end="107:39"><operator pos:start="107:13" pos:end="107:14">++</operator><name pos:start="107:15" pos:end="107:39"><name pos:start="107:15" pos:end="107:15">s</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:31">tally_counters</name><operator pos:start="107:32" pos:end="107:32">.</operator><name pos:start="107:33" pos:end="107:39">RxOkBrd</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="111:11" pos:end="173:9">else if <condition pos:start="111:19" pos:end="111:33">(<expr pos:start="111:20" pos:end="111:32"><name pos:start="111:20" pos:end="111:25"><name pos:start="111:20" pos:end="111:22">buf</name><index pos:start="111:23" pos:end="111:25">[<expr pos:start="111:24" pos:end="111:24"><literal type="number" pos:start="111:24" pos:end="111:24">0</literal></expr>]</index></name> <operator pos:start="111:27" pos:end="111:27">&amp;</operator> <literal type="number" pos:start="111:29" pos:end="111:32">0x01</literal></expr>)</condition> <block pos:start="111:35" pos:end="173:9">{<block_content pos:start="115:13" pos:end="169:40">

            <comment type="block" pos:start="113:13" pos:end="113:27">/* multicast */</comment>

            <if_stmt pos:start="115:13" pos:end="131:13"><if pos:start="115:13" pos:end="131:13">if <condition pos:start="115:16" pos:end="115:49">(<expr pos:start="115:17" pos:end="115:48"><operator pos:start="115:17" pos:end="115:17">!</operator><operator pos:start="115:18" pos:end="115:18">(</operator><name pos:start="115:19" pos:end="115:29"><name pos:start="115:19" pos:end="115:19">s</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:29">RxConfig</name></name> <operator pos:start="115:31" pos:end="115:31">&amp;</operator> <name pos:start="115:33" pos:end="115:47">AcceptMulticast</name><operator pos:start="115:48" pos:end="115:48">)</operator></expr>)</condition>

            <block pos:start="117:13" pos:end="131:13">{<block_content pos:start="119:17" pos:end="129:28">

                <expr_stmt pos:start="119:17" pos:end="119:74"><expr pos:start="119:17" pos:end="119:73"><call pos:start="119:17" pos:end="119:73"><name pos:start="119:17" pos:end="119:27">DEBUG_PRINT</name><argument_list pos:start="119:28" pos:end="119:73">(<argument pos:start="119:29" pos:end="119:72"><expr pos:start="119:29" pos:end="119:72"><operator pos:start="119:29" pos:end="119:29">(</operator><literal type="string" pos:start="119:30" pos:end="119:71">"&gt;&gt;&gt; RTL8139: multicast packet rejected\n"</literal><operator pos:start="119:72" pos:end="119:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="123:17" pos:end="123:42">/* update tally counter */</comment>

                <expr_stmt pos:start="125:17" pos:end="125:42"><expr pos:start="125:17" pos:end="125:41"><operator pos:start="125:17" pos:end="125:18">++</operator><name pos:start="125:19" pos:end="125:41"><name pos:start="125:19" pos:end="125:19">s</name><operator pos:start="125:20" pos:end="125:21">-&gt;</operator><name pos:start="125:22" pos:end="125:35">tally_counters</name><operator pos:start="125:36" pos:end="125:36">.</operator><name pos:start="125:37" pos:end="125:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="129:17" pos:end="129:28">return <expr pos:start="129:24" pos:end="129:27"><name pos:start="129:24" pos:end="129:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <decl_stmt pos:start="135:13" pos:end="135:51"><decl pos:start="135:13" pos:end="135:50"><type pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">int</name></type> <name pos:start="135:17" pos:end="135:25">mcast_idx</name> <init pos:start="135:27" pos:end="135:50">= <expr pos:start="135:29" pos:end="135:50"><call pos:start="135:29" pos:end="135:50"><name pos:start="135:29" pos:end="135:45">compute_mcast_idx</name><argument_list pos:start="135:46" pos:end="135:50">(<argument pos:start="135:47" pos:end="135:49"><expr pos:start="135:47" pos:end="135:49"><name pos:start="135:47" pos:end="135:49">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="139:13" pos:end="155:13"><if pos:start="139:13" pos:end="155:13">if <condition pos:start="139:16" pos:end="139:68">(<expr pos:start="139:17" pos:end="139:67"><operator pos:start="139:17" pos:end="139:17">!</operator><operator pos:start="139:18" pos:end="139:18">(</operator><name pos:start="139:19" pos:end="139:41"><name pos:start="139:19" pos:end="139:19">s</name><operator pos:start="139:20" pos:end="139:21">-&gt;</operator><name pos:start="139:22" pos:end="139:25">mult</name><index pos:start="139:26" pos:end="139:41">[<expr pos:start="139:27" pos:end="139:40"><name pos:start="139:27" pos:end="139:35">mcast_idx</name> <operator pos:start="139:37" pos:end="139:38">&gt;&gt;</operator> <literal type="number" pos:start="139:40" pos:end="139:40">3</literal></expr>]</index></name> <operator pos:start="139:43" pos:end="139:43">&amp;</operator> <operator pos:start="139:45" pos:end="139:45">(</operator><literal type="number" pos:start="139:46" pos:end="139:46">1</literal> <operator pos:start="139:48" pos:end="139:49">&lt;&lt;</operator> <operator pos:start="139:51" pos:end="139:51">(</operator><name pos:start="139:52" pos:end="139:60">mcast_idx</name> <operator pos:start="139:62" pos:end="139:62">&amp;</operator> <literal type="number" pos:start="139:64" pos:end="139:64">7</literal><operator pos:start="139:65" pos:end="139:65">)</operator><operator pos:start="139:66" pos:end="139:66">)</operator><operator pos:start="139:67" pos:end="139:67">)</operator></expr>)</condition>

            <block pos:start="141:13" pos:end="155:13">{<block_content pos:start="143:17" pos:end="153:28">

                <expr_stmt pos:start="143:17" pos:end="143:75"><expr pos:start="143:17" pos:end="143:74"><call pos:start="143:17" pos:end="143:74"><name pos:start="143:17" pos:end="143:27">DEBUG_PRINT</name><argument_list pos:start="143:28" pos:end="143:74">(<argument pos:start="143:29" pos:end="143:73"><expr pos:start="143:29" pos:end="143:73"><operator pos:start="143:29" pos:end="143:29">(</operator><literal type="string" pos:start="143:30" pos:end="143:72">"&gt;&gt;&gt; RTL8139: multicast address mismatch\n"</literal><operator pos:start="143:73" pos:end="143:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="147:17" pos:end="147:42">/* update tally counter */</comment>

                <expr_stmt pos:start="149:17" pos:end="149:42"><expr pos:start="149:17" pos:end="149:41"><operator pos:start="149:17" pos:end="149:18">++</operator><name pos:start="149:19" pos:end="149:41"><name pos:start="149:19" pos:end="149:19">s</name><operator pos:start="149:20" pos:end="149:21">-&gt;</operator><name pos:start="149:22" pos:end="149:35">tally_counters</name><operator pos:start="149:36" pos:end="149:36">.</operator><name pos:start="149:37" pos:end="149:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="153:17" pos:end="153:28">return <expr pos:start="153:24" pos:end="153:27"><name pos:start="153:24" pos:end="153:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="159:13" pos:end="159:41"><expr pos:start="159:13" pos:end="159:40"><name pos:start="159:13" pos:end="159:25">packet_header</name> <operator pos:start="159:27" pos:end="159:28">|=</operator> <name pos:start="159:30" pos:end="159:40">RxMulticast</name></expr>;</expr_stmt>



            <expr_stmt pos:start="163:13" pos:end="163:70"><expr pos:start="163:13" pos:end="163:69"><call pos:start="163:13" pos:end="163:69"><name pos:start="163:13" pos:end="163:23">DEBUG_PRINT</name><argument_list pos:start="163:24" pos:end="163:69">(<argument pos:start="163:25" pos:end="163:68"><expr pos:start="163:25" pos:end="163:68"><operator pos:start="163:25" pos:end="163:25">(</operator><literal type="string" pos:start="163:26" pos:end="163:67">"&gt;&gt;&gt; RTL8139: multicast packet received\n"</literal><operator pos:start="163:68" pos:end="163:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="167:13" pos:end="167:38">/* update tally counter */</comment>

            <expr_stmt pos:start="169:13" pos:end="169:40"><expr pos:start="169:13" pos:end="169:39"><operator pos:start="169:13" pos:end="169:14">++</operator><name pos:start="169:15" pos:end="169:39"><name pos:start="169:15" pos:end="169:15">s</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:31">tally_counters</name><operator pos:start="169:32" pos:end="169:32">.</operator><name pos:start="169:33" pos:end="169:39">RxOkMul</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="173:11" pos:end="221:9">else if <condition pos:start="173:19" pos:end="183:40">(<expr pos:start="173:20" pos:end="183:39"><name pos:start="173:20" pos:end="173:29"><name pos:start="173:20" pos:end="173:20">s</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:26">phys</name><index pos:start="173:27" pos:end="173:29">[<expr pos:start="173:28" pos:end="173:28"><literal type="number" pos:start="173:28" pos:end="173:28">0</literal></expr>]</index></name> <operator pos:start="173:31" pos:end="173:32">==</operator> <name pos:start="173:34" pos:end="173:39"><name pos:start="173:34" pos:end="173:36">buf</name><index pos:start="173:37" pos:end="173:39">[<expr pos:start="173:38" pos:end="173:38"><literal type="number" pos:start="173:38" pos:end="173:38">0</literal></expr>]</index></name> <operator pos:start="173:41" pos:end="173:42">&amp;&amp;</operator>

                   <name pos:start="175:20" pos:end="175:29"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:26">phys</name><index pos:start="175:27" pos:end="175:29">[<expr pos:start="175:28" pos:end="175:28"><literal type="number" pos:start="175:28" pos:end="175:28">1</literal></expr>]</index></name> <operator pos:start="175:31" pos:end="175:32">==</operator> <name pos:start="175:34" pos:end="175:39"><name pos:start="175:34" pos:end="175:36">buf</name><index pos:start="175:37" pos:end="175:39">[<expr pos:start="175:38" pos:end="175:38"><literal type="number" pos:start="175:38" pos:end="175:38">1</literal></expr>]</index></name> <operator pos:start="175:41" pos:end="175:42">&amp;&amp;</operator>

                   <name pos:start="177:20" pos:end="177:29"><name pos:start="177:20" pos:end="177:20">s</name><operator pos:start="177:21" pos:end="177:22">-&gt;</operator><name pos:start="177:23" pos:end="177:26">phys</name><index pos:start="177:27" pos:end="177:29">[<expr pos:start="177:28" pos:end="177:28"><literal type="number" pos:start="177:28" pos:end="177:28">2</literal></expr>]</index></name> <operator pos:start="177:31" pos:end="177:32">==</operator> <name pos:start="177:34" pos:end="177:39"><name pos:start="177:34" pos:end="177:36">buf</name><index pos:start="177:37" pos:end="177:39">[<expr pos:start="177:38" pos:end="177:38"><literal type="number" pos:start="177:38" pos:end="177:38">2</literal></expr>]</index></name> <operator pos:start="177:41" pos:end="177:42">&amp;&amp;</operator>

                   <name pos:start="179:20" pos:end="179:29"><name pos:start="179:20" pos:end="179:20">s</name><operator pos:start="179:21" pos:end="179:22">-&gt;</operator><name pos:start="179:23" pos:end="179:26">phys</name><index pos:start="179:27" pos:end="179:29">[<expr pos:start="179:28" pos:end="179:28"><literal type="number" pos:start="179:28" pos:end="179:28">3</literal></expr>]</index></name> <operator pos:start="179:31" pos:end="179:32">==</operator> <name pos:start="179:34" pos:end="179:39"><name pos:start="179:34" pos:end="179:36">buf</name><index pos:start="179:37" pos:end="179:39">[<expr pos:start="179:38" pos:end="179:38"><literal type="number" pos:start="179:38" pos:end="179:38">3</literal></expr>]</index></name> <operator pos:start="179:41" pos:end="179:42">&amp;&amp;</operator>

                   <name pos:start="181:20" pos:end="181:29"><name pos:start="181:20" pos:end="181:20">s</name><operator pos:start="181:21" pos:end="181:22">-&gt;</operator><name pos:start="181:23" pos:end="181:26">phys</name><index pos:start="181:27" pos:end="181:29">[<expr pos:start="181:28" pos:end="181:28"><literal type="number" pos:start="181:28" pos:end="181:28">4</literal></expr>]</index></name> <operator pos:start="181:31" pos:end="181:32">==</operator> <name pos:start="181:34" pos:end="181:39"><name pos:start="181:34" pos:end="181:36">buf</name><index pos:start="181:37" pos:end="181:39">[<expr pos:start="181:38" pos:end="181:38"><literal type="number" pos:start="181:38" pos:end="181:38">4</literal></expr>]</index></name> <operator pos:start="181:41" pos:end="181:42">&amp;&amp;</operator>

                   <name pos:start="183:20" pos:end="183:29"><name pos:start="183:20" pos:end="183:20">s</name><operator pos:start="183:21" pos:end="183:22">-&gt;</operator><name pos:start="183:23" pos:end="183:26">phys</name><index pos:start="183:27" pos:end="183:29">[<expr pos:start="183:28" pos:end="183:28"><literal type="number" pos:start="183:28" pos:end="183:28">5</literal></expr>]</index></name> <operator pos:start="183:31" pos:end="183:32">==</operator> <name pos:start="183:34" pos:end="183:39"><name pos:start="183:34" pos:end="183:36">buf</name><index pos:start="183:37" pos:end="183:39">[<expr pos:start="183:38" pos:end="183:38"><literal type="number" pos:start="183:38" pos:end="183:38">5</literal></expr>]</index></name></expr>)</condition> <block pos:start="183:42" pos:end="221:9">{<block_content pos:start="187:13" pos:end="217:40">

            <comment type="block" pos:start="185:13" pos:end="185:23">/* match */</comment>

            <if_stmt pos:start="187:13" pos:end="203:13"><if pos:start="187:13" pos:end="203:13">if <condition pos:start="187:16" pos:end="187:46">(<expr pos:start="187:17" pos:end="187:45"><operator pos:start="187:17" pos:end="187:17">!</operator><operator pos:start="187:18" pos:end="187:18">(</operator><name pos:start="187:19" pos:end="187:29"><name pos:start="187:19" pos:end="187:19">s</name><operator pos:start="187:20" pos:end="187:21">-&gt;</operator><name pos:start="187:22" pos:end="187:29">RxConfig</name></name> <operator pos:start="187:31" pos:end="187:31">&amp;</operator> <name pos:start="187:33" pos:end="187:44">AcceptMyPhys</name><operator pos:start="187:45" pos:end="187:45">)</operator></expr>)</condition>

            <block pos:start="189:13" pos:end="203:13">{<block_content pos:start="191:17" pos:end="201:28">

                <expr_stmt pos:start="191:17" pos:end="191:91"><expr pos:start="191:17" pos:end="191:90"><call pos:start="191:17" pos:end="191:90"><name pos:start="191:17" pos:end="191:27">DEBUG_PRINT</name><argument_list pos:start="191:28" pos:end="191:90">(<argument pos:start="191:29" pos:end="191:89"><expr pos:start="191:29" pos:end="191:89"><operator pos:start="191:29" pos:end="191:29">(</operator><literal type="string" pos:start="191:30" pos:end="191:88">"&gt;&gt;&gt; RTL8139: rejecting physical address matching packet\n"</literal><operator pos:start="191:89" pos:end="191:89">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="195:17" pos:end="195:42">/* update tally counter */</comment>

                <expr_stmt pos:start="197:17" pos:end="197:42"><expr pos:start="197:17" pos:end="197:41"><operator pos:start="197:17" pos:end="197:18">++</operator><name pos:start="197:19" pos:end="197:41"><name pos:start="197:19" pos:end="197:19">s</name><operator pos:start="197:20" pos:end="197:21">-&gt;</operator><name pos:start="197:22" pos:end="197:35">tally_counters</name><operator pos:start="197:36" pos:end="197:36">.</operator><name pos:start="197:37" pos:end="197:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="201:17" pos:end="201:28">return <expr pos:start="201:24" pos:end="201:27"><name pos:start="201:24" pos:end="201:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:40"><expr pos:start="207:13" pos:end="207:39"><name pos:start="207:13" pos:end="207:25">packet_header</name> <operator pos:start="207:27" pos:end="207:28">|=</operator> <name pos:start="207:30" pos:end="207:39">RxPhysical</name></expr>;</expr_stmt>



            <expr_stmt pos:start="211:13" pos:end="211:86"><expr pos:start="211:13" pos:end="211:85"><call pos:start="211:13" pos:end="211:85"><name pos:start="211:13" pos:end="211:23">DEBUG_PRINT</name><argument_list pos:start="211:24" pos:end="211:85">(<argument pos:start="211:25" pos:end="211:84"><expr pos:start="211:25" pos:end="211:84"><operator pos:start="211:25" pos:end="211:25">(</operator><literal type="string" pos:start="211:26" pos:end="211:83">"&gt;&gt;&gt; RTL8139: physical address matching packet received\n"</literal><operator pos:start="211:84" pos:end="211:84">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="215:13" pos:end="215:38">/* update tally counter */</comment>

            <expr_stmt pos:start="217:13" pos:end="217:40"><expr pos:start="217:13" pos:end="217:39"><operator pos:start="217:13" pos:end="217:14">++</operator><name pos:start="217:15" pos:end="217:39"><name pos:start="217:15" pos:end="217:15">s</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:31">tally_counters</name><operator pos:start="217:32" pos:end="217:32">.</operator><name pos:start="217:33" pos:end="217:39">RxOkPhy</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="221:11" pos:end="237:9">else <block pos:start="221:16" pos:end="237:9">{<block_content pos:start="225:13" pos:end="235:24">



            <expr_stmt pos:start="225:13" pos:end="225:59"><expr pos:start="225:13" pos:end="225:58"><call pos:start="225:13" pos:end="225:58"><name pos:start="225:13" pos:end="225:23">DEBUG_PRINT</name><argument_list pos:start="225:24" pos:end="225:58">(<argument pos:start="225:25" pos:end="225:57"><expr pos:start="225:25" pos:end="225:57"><operator pos:start="225:25" pos:end="225:25">(</operator><literal type="string" pos:start="225:26" pos:end="225:56">"&gt;&gt;&gt; RTL8139: unknown packet\n"</literal><operator pos:start="225:57" pos:end="225:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="229:13" pos:end="229:38">/* update tally counter */</comment>

            <expr_stmt pos:start="231:13" pos:end="231:38"><expr pos:start="231:13" pos:end="231:37"><operator pos:start="231:13" pos:end="231:14">++</operator><name pos:start="231:15" pos:end="231:37"><name pos:start="231:15" pos:end="231:15">s</name><operator pos:start="231:16" pos:end="231:17">-&gt;</operator><name pos:start="231:18" pos:end="231:31">tally_counters</name><operator pos:start="231:32" pos:end="231:32">.</operator><name pos:start="231:33" pos:end="231:37">RxERR</name></name></expr>;</expr_stmt>



            <return pos:start="235:13" pos:end="235:24">return <expr pos:start="235:20" pos:end="235:23"><name pos:start="235:20" pos:end="235:23">size</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="243:5" pos:end="245:68">/* if too small buffer, then expand it

     * Include some tailroom in case a vlan tag is later removed. */</comment>

    <if_stmt pos:start="247:5" pos:end="261:5"><if pos:start="247:5" pos:end="261:5">if <condition pos:start="247:8" pos:end="247:40">(<expr pos:start="247:9" pos:end="247:39"><name pos:start="247:9" pos:end="247:12">size</name> <operator pos:start="247:14" pos:end="247:14">&lt;</operator> <name pos:start="247:16" pos:end="247:27">MIN_BUF_SIZE</name> <operator pos:start="247:29" pos:end="247:29">+</operator> <name pos:start="247:31" pos:end="247:39">VLAN_HLEN</name></expr>)</condition> <block pos:start="247:42" pos:end="261:5">{<block_content pos:start="249:9" pos:end="259:9">

        <expr_stmt pos:start="249:9" pos:end="249:32"><expr pos:start="249:9" pos:end="249:31"><call pos:start="249:9" pos:end="249:31"><name pos:start="249:9" pos:end="249:14">memcpy</name><argument_list pos:start="249:15" pos:end="249:31">(<argument pos:start="249:16" pos:end="249:19"><expr pos:start="249:16" pos:end="249:19"><name pos:start="249:16" pos:end="249:19">buf1</name></expr></argument>, <argument pos:start="249:22" pos:end="249:24"><expr pos:start="249:22" pos:end="249:24"><name pos:start="249:22" pos:end="249:24">buf</name></expr></argument>, <argument pos:start="249:27" pos:end="249:30"><expr pos:start="249:27" pos:end="249:30"><name pos:start="249:27" pos:end="249:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:64"><expr pos:start="251:9" pos:end="251:63"><call pos:start="251:9" pos:end="251:63"><name pos:start="251:9" pos:end="251:14">memset</name><argument_list pos:start="251:15" pos:end="251:63">(<argument pos:start="251:16" pos:end="251:26"><expr pos:start="251:16" pos:end="251:26"><name pos:start="251:16" pos:end="251:19">buf1</name> <operator pos:start="251:21" pos:end="251:21">+</operator> <name pos:start="251:23" pos:end="251:26">size</name></expr></argument>, <argument pos:start="251:29" pos:end="251:29"><expr pos:start="251:29" pos:end="251:29"><literal type="number" pos:start="251:29" pos:end="251:29">0</literal></expr></argument>, <argument pos:start="251:32" pos:end="251:62"><expr pos:start="251:32" pos:end="251:62"><name pos:start="251:32" pos:end="251:43">MIN_BUF_SIZE</name> <operator pos:start="251:45" pos:end="251:45">+</operator> <name pos:start="251:47" pos:end="251:55">VLAN_HLEN</name> <operator pos:start="251:57" pos:end="251:57">-</operator> <name pos:start="251:59" pos:end="251:62">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:19"><expr pos:start="253:9" pos:end="253:18"><name pos:start="253:9" pos:end="253:11">buf</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <name pos:start="253:15" pos:end="253:18">buf1</name></expr>;</expr_stmt>

        <if_stmt pos:start="255:9" pos:end="259:9"><if pos:start="255:9" pos:end="259:9">if <condition pos:start="255:12" pos:end="255:32">(<expr pos:start="255:13" pos:end="255:31"><name pos:start="255:13" pos:end="255:16">size</name> <operator pos:start="255:18" pos:end="255:18">&lt;</operator> <name pos:start="255:20" pos:end="255:31">MIN_BUF_SIZE</name></expr>)</condition> <block pos:start="255:34" pos:end="259:9">{<block_content pos:start="257:13" pos:end="257:32">

            <expr_stmt pos:start="257:13" pos:end="257:32"><expr pos:start="257:13" pos:end="257:31"><name pos:start="257:13" pos:end="257:16">size</name> <operator pos:start="257:18" pos:end="257:18">=</operator> <name pos:start="257:20" pos:end="257:31">MIN_BUF_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="265:5" pos:end="721:5"><if pos:start="265:5" pos:end="635:5">if <condition pos:start="265:8" pos:end="265:39">(<expr pos:start="265:9" pos:end="265:38"><call pos:start="265:9" pos:end="265:38"><name pos:start="265:9" pos:end="265:35">rtl8139_cp_receiver_enabled</name><argument_list pos:start="265:36" pos:end="265:38">(<argument pos:start="265:37" pos:end="265:37"><expr pos:start="265:37" pos:end="265:37"><name pos:start="265:37" pos:end="265:37">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="267:5" pos:end="635:5">{<block_content pos:start="269:9" pos:end="631:69">

        <expr_stmt pos:start="269:9" pos:end="296:0"><expr pos:start="269:9" pos:end="269:66"><call pos:start="269:9" pos:end="269:66"><name pos:start="269:9" pos:end="269:19">DEBUG_PRINT</name><argument_list pos:start="269:20" pos:end="269:66">(<argument pos:start="269:21" pos:end="269:65"><expr pos:start="269:21" pos:end="269:65"><operator pos:start="269:21" pos:end="269:21">(</operator><literal type="string" pos:start="269:22" pos:end="269:64">"RTL8139: in C+ Rx mode ================\n"</literal><operator pos:start="269:65" pos:end="269:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="273:9" pos:end="273:36">/* begin C+ receiver mode */</comment>



<comment type="block" pos:start="277:1" pos:end="277:23">/* w0 ownership flag */</comment>

<cpp:define pos:start="279:1" pos:end="279:25">#<cpp:directive pos:start="279:2" pos:end="279:7">define</cpp:directive> <cpp:macro pos:start="279:9" pos:end="279:17"><name pos:start="279:9" pos:end="279:17">CP_RX_OWN</name></cpp:macro> <cpp:value pos:start="279:19" pos:end="279:25">(1&lt;&lt;31)</cpp:value></cpp:define>

<comment type="block" pos:start="281:1" pos:end="281:25">/* w0 end of ring flag */</comment>

<cpp:define pos:start="283:1" pos:end="283:25">#<cpp:directive pos:start="283:2" pos:end="283:7">define</cpp:directive> <cpp:macro pos:start="283:9" pos:end="283:17"><name pos:start="283:9" pos:end="283:17">CP_RX_EOR</name></cpp:macro> <cpp:value pos:start="283:19" pos:end="283:25">(1&lt;&lt;30)</cpp:value></cpp:define>

<comment type="block" pos:start="285:1" pos:end="285:34">/* w0 bits 0...12 : buffer size */</comment>

<cpp:define pos:start="287:1" pos:end="287:44">#<cpp:directive pos:start="287:2" pos:end="287:7">define</cpp:directive> <cpp:macro pos:start="287:9" pos:end="287:30"><name pos:start="287:9" pos:end="287:30">CP_RX_BUFFER_SIZE_MASK</name></cpp:macro> <cpp:value pos:start="287:32" pos:end="287:44">((1&lt;&lt;13) - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="289:1" pos:end="289:27">/* w1 tag available flag */</comment>

<cpp:define pos:start="291:1" pos:end="291:26">#<cpp:directive pos:start="291:2" pos:end="291:7">define</cpp:directive> <cpp:macro pos:start="291:9" pos:end="291:18"><name pos:start="291:9" pos:end="291:18">CP_RX_TAVA</name></cpp:macro> <cpp:value pos:start="291:20" pos:end="291:26">(1&lt;&lt;16)</cpp:value></cpp:define>

<comment type="block" pos:start="293:1" pos:end="293:31">/* w1 bits 0...15 : VLAN tag */</comment>

<cpp:define pos:start="295:1" pos:end="295:41">#<cpp:directive pos:start="295:2" pos:end="295:7">define</cpp:directive> <cpp:macro pos:start="295:9" pos:end="295:27"><name pos:start="295:9" pos:end="295:27">CP_RX_VLAN_TAG_MASK</name></cpp:macro> <cpp:value pos:start="295:29" pos:end="295:41">((1&lt;&lt;16) - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="297:1" pos:end="297:36">/* w2 low  32bit of Rx buffer ptr */</comment>

<comment type="block" pos:start="299:1" pos:end="299:36">/* w3 high 32bit of Rx buffer ptr */</comment>



        <decl_stmt pos:start="303:9" pos:end="303:44"><decl pos:start="303:9" pos:end="303:43"><type pos:start="303:9" pos:end="303:11"><name pos:start="303:9" pos:end="303:11">int</name></type> <name pos:start="303:13" pos:end="303:22">descriptor</name> <init pos:start="303:24" pos:end="303:43">= <expr pos:start="303:26" pos:end="303:43"><name pos:start="303:26" pos:end="303:43"><name pos:start="303:26" pos:end="303:26">s</name><operator pos:start="303:27" pos:end="303:28">-&gt;</operator><name pos:start="303:29" pos:end="303:43">currCPlusRxDesc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="305:9" pos:end="305:46"><decl pos:start="305:9" pos:end="305:45"><type pos:start="305:9" pos:end="305:26"><name pos:start="305:9" pos:end="305:26">target_phys_addr_t</name></type> <name pos:start="305:28" pos:end="305:45">cplus_rx_ring_desc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="309:9" pos:end="309:78"><expr pos:start="309:9" pos:end="309:77"><name pos:start="309:9" pos:end="309:26">cplus_rx_ring_desc</name> <operator pos:start="309:28" pos:end="309:28">=</operator> <call pos:start="309:30" pos:end="309:77"><name pos:start="309:30" pos:end="309:43">rtl8139_addr64</name><argument_list pos:start="309:44" pos:end="309:77">(<argument pos:start="309:45" pos:end="309:59"><expr pos:start="309:45" pos:end="309:59"><name pos:start="309:45" pos:end="309:59"><name pos:start="309:45" pos:end="309:45">s</name><operator pos:start="309:46" pos:end="309:47">-&gt;</operator><name pos:start="309:48" pos:end="309:59">RxRingAddrLO</name></name></expr></argument>, <argument pos:start="309:62" pos:end="309:76"><expr pos:start="309:62" pos:end="309:76"><name pos:start="309:62" pos:end="309:76"><name pos:start="309:62" pos:end="309:62">s</name><operator pos:start="309:63" pos:end="309:64">-&gt;</operator><name pos:start="309:65" pos:end="309:76">RxRingAddrHI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:46"><expr pos:start="311:9" pos:end="311:45"><name pos:start="311:9" pos:end="311:26">cplus_rx_ring_desc</name> <operator pos:start="311:28" pos:end="311:29">+=</operator> <literal type="number" pos:start="311:31" pos:end="311:32">16</literal> <operator pos:start="311:34" pos:end="311:34">*</operator> <name pos:start="311:36" pos:end="311:45">descriptor</name></expr>;</expr_stmt>



        <expr_stmt pos:start="315:9" pos:end="317:92"><expr pos:start="315:9" pos:end="317:91"><call pos:start="315:9" pos:end="317:91"><name pos:start="315:9" pos:end="315:19">DEBUG_PRINT</name><argument_list pos:start="315:20" pos:end="317:91">(<argument pos:start="315:21" pos:end="317:90"><expr pos:start="315:21" pos:end="317:90"><operator pos:start="315:21" pos:end="315:21">(</operator><literal type="string" pos:start="315:22" pos:end="315:105">"RTL8139: +++ C+ mode reading RX descriptor %d from host memory at %08x %08x = %016"</literal> <name pos:start="315:107" pos:end="315:112">PRIx64</name> <literal type="string" pos:start="315:114" pos:end="315:117">"\n"</literal><operator pos:start="315:118" pos:end="315:118">,</operator>

               <name pos:start="317:16" pos:end="317:25">descriptor</name><operator pos:start="317:26" pos:end="317:26">,</operator> <name pos:start="317:28" pos:end="317:42"><name pos:start="317:28" pos:end="317:28">s</name><operator pos:start="317:29" pos:end="317:30">-&gt;</operator><name pos:start="317:31" pos:end="317:42">RxRingAddrHI</name></name><operator pos:start="317:43" pos:end="317:43">,</operator> <name pos:start="317:45" pos:end="317:59"><name pos:start="317:45" pos:end="317:45">s</name><operator pos:start="317:46" pos:end="317:47">-&gt;</operator><name pos:start="317:48" pos:end="317:59">RxRingAddrLO</name></name><operator pos:start="317:60" pos:end="317:60">,</operator> <operator pos:start="317:62" pos:end="317:62">(</operator><name pos:start="317:63" pos:end="317:70">uint64_t</name><operator pos:start="317:71" pos:end="317:71">)</operator><name pos:start="317:72" pos:end="317:89">cplus_rx_ring_desc</name><operator pos:start="317:90" pos:end="317:90">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <decl_stmt pos:start="321:9" pos:end="321:50"><decl pos:start="321:9" pos:end="321:20"><type pos:start="321:9" pos:end="321:16"><name pos:start="321:9" pos:end="321:16">uint32_t</name></type> <name pos:start="321:18" pos:end="321:20">val</name></decl>, <decl pos:start="321:23" pos:end="321:27"><type ref="prev" pos:start="321:9" pos:end="321:16"/><name pos:start="321:23" pos:end="321:27">rxdw0</name></decl>,<decl pos:start="321:29" pos:end="321:33"><type ref="prev" pos:start="321:9" pos:end="321:16"/><name pos:start="321:29" pos:end="321:33">rxdw1</name></decl>,<decl pos:start="321:35" pos:end="321:41"><type ref="prev" pos:start="321:9" pos:end="321:16"/><name pos:start="321:35" pos:end="321:41">rxbufLO</name></decl>,<decl pos:start="321:43" pos:end="321:49"><type ref="prev" pos:start="321:9" pos:end="321:16"/><name pos:start="321:43" pos:end="321:49">rxbufHI</name></decl>;</decl_stmt>



        <expr_stmt pos:start="325:9" pos:end="325:76"><expr pos:start="325:9" pos:end="325:75"><call pos:start="325:9" pos:end="325:75"><name pos:start="325:9" pos:end="325:32">cpu_physical_memory_read</name><argument_list pos:start="325:33" pos:end="325:75">(<argument pos:start="325:34" pos:end="325:51"><expr pos:start="325:34" pos:end="325:51"><name pos:start="325:34" pos:end="325:51">cplus_rx_ring_desc</name></expr></argument>,    <argument pos:start="325:57" pos:end="325:71"><expr pos:start="325:57" pos:end="325:71"><operator pos:start="325:57" pos:end="325:57">(</operator><name pos:start="325:58" pos:end="325:64">uint8_t</name> <operator pos:start="325:66" pos:end="325:66">*</operator><operator pos:start="325:67" pos:end="325:67">)</operator><operator pos:start="325:68" pos:end="325:68">&amp;</operator><name pos:start="325:69" pos:end="325:71">val</name></expr></argument>, <argument pos:start="325:74" pos:end="325:74"><expr pos:start="325:74" pos:end="325:74"><literal type="number" pos:start="325:74" pos:end="325:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:33"><expr pos:start="327:9" pos:end="327:32"><name pos:start="327:9" pos:end="327:13">rxdw0</name> <operator pos:start="327:15" pos:end="327:15">=</operator> <call pos:start="327:17" pos:end="327:32"><name pos:start="327:17" pos:end="327:27">le32_to_cpu</name><argument_list pos:start="327:28" pos:end="327:32">(<argument pos:start="327:29" pos:end="327:31"><expr pos:start="327:29" pos:end="327:31"><name pos:start="327:29" pos:end="327:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:76"><expr pos:start="329:9" pos:end="329:75"><call pos:start="329:9" pos:end="329:75"><name pos:start="329:9" pos:end="329:32">cpu_physical_memory_read</name><argument_list pos:start="329:33" pos:end="329:75">(<argument pos:start="329:34" pos:end="329:53"><expr pos:start="329:34" pos:end="329:53"><name pos:start="329:34" pos:end="329:51">cplus_rx_ring_desc</name><operator pos:start="329:52" pos:end="329:52">+</operator><literal type="number" pos:start="329:53" pos:end="329:53">4</literal></expr></argument>,  <argument pos:start="329:57" pos:end="329:71"><expr pos:start="329:57" pos:end="329:71"><operator pos:start="329:57" pos:end="329:57">(</operator><name pos:start="329:58" pos:end="329:64">uint8_t</name> <operator pos:start="329:66" pos:end="329:66">*</operator><operator pos:start="329:67" pos:end="329:67">)</operator><operator pos:start="329:68" pos:end="329:68">&amp;</operator><name pos:start="329:69" pos:end="329:71">val</name></expr></argument>, <argument pos:start="329:74" pos:end="329:74"><expr pos:start="329:74" pos:end="329:74"><literal type="number" pos:start="329:74" pos:end="329:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:33"><expr pos:start="331:9" pos:end="331:32"><name pos:start="331:9" pos:end="331:13">rxdw1</name> <operator pos:start="331:15" pos:end="331:15">=</operator> <call pos:start="331:17" pos:end="331:32"><name pos:start="331:17" pos:end="331:27">le32_to_cpu</name><argument_list pos:start="331:28" pos:end="331:32">(<argument pos:start="331:29" pos:end="331:31"><expr pos:start="331:29" pos:end="331:31"><name pos:start="331:29" pos:end="331:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:76"><expr pos:start="333:9" pos:end="333:75"><call pos:start="333:9" pos:end="333:75"><name pos:start="333:9" pos:end="333:32">cpu_physical_memory_read</name><argument_list pos:start="333:33" pos:end="333:75">(<argument pos:start="333:34" pos:end="333:53"><expr pos:start="333:34" pos:end="333:53"><name pos:start="333:34" pos:end="333:51">cplus_rx_ring_desc</name><operator pos:start="333:52" pos:end="333:52">+</operator><literal type="number" pos:start="333:53" pos:end="333:53">8</literal></expr></argument>,  <argument pos:start="333:57" pos:end="333:71"><expr pos:start="333:57" pos:end="333:71"><operator pos:start="333:57" pos:end="333:57">(</operator><name pos:start="333:58" pos:end="333:64">uint8_t</name> <operator pos:start="333:66" pos:end="333:66">*</operator><operator pos:start="333:67" pos:end="333:67">)</operator><operator pos:start="333:68" pos:end="333:68">&amp;</operator><name pos:start="333:69" pos:end="333:71">val</name></expr></argument>, <argument pos:start="333:74" pos:end="333:74"><expr pos:start="333:74" pos:end="333:74"><literal type="number" pos:start="333:74" pos:end="333:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:35"><expr pos:start="335:9" pos:end="335:34"><name pos:start="335:9" pos:end="335:15">rxbufLO</name> <operator pos:start="335:17" pos:end="335:17">=</operator> <call pos:start="335:19" pos:end="335:34"><name pos:start="335:19" pos:end="335:29">le32_to_cpu</name><argument_list pos:start="335:30" pos:end="335:34">(<argument pos:start="335:31" pos:end="335:33"><expr pos:start="335:31" pos:end="335:33"><name pos:start="335:31" pos:end="335:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:76"><expr pos:start="337:9" pos:end="337:75"><call pos:start="337:9" pos:end="337:75"><name pos:start="337:9" pos:end="337:32">cpu_physical_memory_read</name><argument_list pos:start="337:33" pos:end="337:75">(<argument pos:start="337:34" pos:end="337:54"><expr pos:start="337:34" pos:end="337:54"><name pos:start="337:34" pos:end="337:51">cplus_rx_ring_desc</name><operator pos:start="337:52" pos:end="337:52">+</operator><literal type="number" pos:start="337:53" pos:end="337:54">12</literal></expr></argument>, <argument pos:start="337:57" pos:end="337:71"><expr pos:start="337:57" pos:end="337:71"><operator pos:start="337:57" pos:end="337:57">(</operator><name pos:start="337:58" pos:end="337:64">uint8_t</name> <operator pos:start="337:66" pos:end="337:66">*</operator><operator pos:start="337:67" pos:end="337:67">)</operator><operator pos:start="337:68" pos:end="337:68">&amp;</operator><name pos:start="337:69" pos:end="337:71">val</name></expr></argument>, <argument pos:start="337:74" pos:end="337:74"><expr pos:start="337:74" pos:end="337:74"><literal type="number" pos:start="337:74" pos:end="337:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:35"><expr pos:start="339:9" pos:end="339:34"><name pos:start="339:9" pos:end="339:15">rxbufHI</name> <operator pos:start="339:17" pos:end="339:17">=</operator> <call pos:start="339:19" pos:end="339:34"><name pos:start="339:19" pos:end="339:29">le32_to_cpu</name><argument_list pos:start="339:30" pos:end="339:34">(<argument pos:start="339:31" pos:end="339:33"><expr pos:start="339:31" pos:end="339:33"><name pos:start="339:31" pos:end="339:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="343:9" pos:end="347:48"><expr pos:start="343:9" pos:end="347:47"><call pos:start="343:9" pos:end="347:47"><name pos:start="343:9" pos:end="343:19">DEBUG_PRINT</name><argument_list pos:start="343:20" pos:end="347:47">(<argument pos:start="343:21" pos:end="347:46"><expr pos:start="343:21" pos:end="347:46"><operator pos:start="343:21" pos:end="343:21">(</operator><literal type="string" pos:start="343:22" pos:end="343:82">"RTL8139: +++ C+ mode RX descriptor %d %08x %08x %08x %08x\n"</literal><operator pos:start="343:83" pos:end="343:83">,</operator>

               <name pos:start="345:16" pos:end="345:25">descriptor</name><operator pos:start="345:26" pos:end="345:26">,</operator>

               <name pos:start="347:16" pos:end="347:20">rxdw0</name><operator pos:start="347:21" pos:end="347:21">,</operator> <name pos:start="347:23" pos:end="347:27">rxdw1</name><operator pos:start="347:28" pos:end="347:28">,</operator> <name pos:start="347:30" pos:end="347:36">rxbufLO</name><operator pos:start="347:37" pos:end="347:37">,</operator> <name pos:start="347:39" pos:end="347:45">rxbufHI</name><operator pos:start="347:46" pos:end="347:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="351:9" pos:end="377:9"><if pos:start="351:9" pos:end="377:9">if <condition pos:start="351:12" pos:end="351:33">(<expr pos:start="351:13" pos:end="351:32"><operator pos:start="351:13" pos:end="351:13">!</operator><operator pos:start="351:14" pos:end="351:14">(</operator><name pos:start="351:15" pos:end="351:19">rxdw0</name> <operator pos:start="351:21" pos:end="351:21">&amp;</operator> <name pos:start="351:23" pos:end="351:31">CP_RX_OWN</name><operator pos:start="351:32" pos:end="351:32">)</operator></expr>)</condition>

        <block pos:start="353:9" pos:end="377:9">{<block_content pos:start="355:13" pos:end="375:25">

            <expr_stmt pos:start="355:13" pos:end="355:96"><expr pos:start="355:13" pos:end="355:95"><call pos:start="355:13" pos:end="355:95"><name pos:start="355:13" pos:end="355:23">DEBUG_PRINT</name><argument_list pos:start="355:24" pos:end="355:95">(<argument pos:start="355:25" pos:end="355:94"><expr pos:start="355:25" pos:end="355:94"><operator pos:start="355:25" pos:end="355:25">(</operator><literal type="string" pos:start="355:26" pos:end="355:81">"RTL8139: C+ Rx mode : descriptor %d is owned by host\n"</literal><operator pos:start="355:82" pos:end="355:82">,</operator> <name pos:start="355:84" pos:end="355:93">descriptor</name><operator pos:start="355:94" pos:end="355:94">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="359:13" pos:end="359:40"><expr pos:start="359:13" pos:end="359:39"><name pos:start="359:13" pos:end="359:25"><name pos:start="359:13" pos:end="359:13">s</name><operator pos:start="359:14" pos:end="359:15">-&gt;</operator><name pos:start="359:16" pos:end="359:25">IntrStatus</name></name> <operator pos:start="359:27" pos:end="359:28">|=</operator> <name pos:start="359:30" pos:end="359:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:26"><expr pos:start="361:13" pos:end="361:25"><operator pos:start="361:13" pos:end="361:14">++</operator><name pos:start="361:15" pos:end="361:25"><name pos:start="361:15" pos:end="361:15">s</name><operator pos:start="361:16" pos:end="361:17">-&gt;</operator><name pos:start="361:18" pos:end="361:25">RxMissed</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="365:13" pos:end="365:38">/* update tally counter */</comment>

            <expr_stmt pos:start="367:13" pos:end="367:38"><expr pos:start="367:13" pos:end="367:37"><operator pos:start="367:13" pos:end="367:14">++</operator><name pos:start="367:15" pos:end="367:37"><name pos:start="367:15" pos:end="367:15">s</name><operator pos:start="367:16" pos:end="367:17">-&gt;</operator><name pos:start="367:18" pos:end="367:31">tally_counters</name><operator pos:start="367:32" pos:end="367:32">.</operator><name pos:start="367:33" pos:end="367:37">RxERR</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:40"><expr pos:start="369:13" pos:end="369:39"><operator pos:start="369:13" pos:end="369:14">++</operator><name pos:start="369:15" pos:end="369:39"><name pos:start="369:15" pos:end="369:15">s</name><operator pos:start="369:16" pos:end="369:17">-&gt;</operator><name pos:start="369:18" pos:end="369:31">tally_counters</name><operator pos:start="369:32" pos:end="369:32">.</operator><name pos:start="369:33" pos:end="369:39">MissPkt</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="373:13" pos:end="373:34"><expr pos:start="373:13" pos:end="373:33"><call pos:start="373:13" pos:end="373:33"><name pos:start="373:13" pos:end="373:30">rtl8139_update_irq</name><argument_list pos:start="373:31" pos:end="373:33">(<argument pos:start="373:32" pos:end="373:32"><expr pos:start="373:32" pos:end="373:32"><name pos:start="373:32" pos:end="373:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="375:13" pos:end="375:25">return <expr pos:start="375:20" pos:end="375:24"><name pos:start="375:20" pos:end="375:24">size_</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <decl_stmt pos:start="381:9" pos:end="381:59"><decl pos:start="381:9" pos:end="381:58"><type pos:start="381:9" pos:end="381:16"><name pos:start="381:9" pos:end="381:16">uint32_t</name></type> <name pos:start="381:18" pos:end="381:25">rx_space</name> <init pos:start="381:27" pos:end="381:58">= <expr pos:start="381:29" pos:end="381:58"><name pos:start="381:29" pos:end="381:33">rxdw0</name> <operator pos:start="381:35" pos:end="381:35">&amp;</operator> <name pos:start="381:37" pos:end="381:58">CP_RX_BUFFER_SIZE_MASK</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="385:9" pos:end="385:54">/* write VLAN info to descriptor variables. */</comment>

        <if_stmt pos:start="387:9" pos:end="427:9"><if pos:start="387:9" pos:end="421:9">if <condition pos:start="387:12" pos:end="389:57">(<expr pos:start="387:13" pos:end="389:56"><name pos:start="387:13" pos:end="387:20"><name pos:start="387:13" pos:end="387:13">s</name><operator pos:start="387:14" pos:end="387:15">-&gt;</operator><name pos:start="387:16" pos:end="387:20">CpCmd</name></name> <operator pos:start="387:22" pos:end="387:22">&amp;</operator> <name pos:start="387:24" pos:end="387:34">CPlusRxVLAN</name> <operator pos:start="387:36" pos:end="387:37">&amp;&amp;</operator> <call pos:start="387:39" pos:end="389:41"><name pos:start="387:39" pos:end="387:50">be16_to_cpup</name><argument_list pos:start="387:51" pos:end="389:41">(<argument pos:start="387:52" pos:end="389:40"><expr pos:start="387:52" pos:end="389:40"><operator pos:start="387:52" pos:end="387:52">(</operator><name pos:start="387:53" pos:end="387:60">uint16_t</name> <operator pos:start="387:62" pos:end="387:62">*</operator><operator pos:start="387:63" pos:end="387:63">)</operator>

                <operator pos:start="389:17" pos:end="389:17">&amp;</operator><name pos:start="389:18" pos:end="389:40"><name pos:start="389:18" pos:end="389:20">buf</name><index pos:start="389:21" pos:end="389:40">[<expr pos:start="389:22" pos:end="389:39"><name pos:start="389:22" pos:end="389:35">ETHER_ADDR_LEN</name> <operator pos:start="389:37" pos:end="389:37">*</operator> <literal type="number" pos:start="389:39" pos:end="389:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="389:43" pos:end="389:44">==</operator> <name pos:start="389:46" pos:end="389:56">ETH_P_8021Q</name></expr>)</condition> <block pos:start="389:59" pos:end="421:9">{<block_content pos:start="391:13" pos:end="419:54">

            <expr_stmt pos:start="391:13" pos:end="391:49"><expr pos:start="391:13" pos:end="391:48"><name pos:start="391:13" pos:end="391:21">dot1q_buf</name> <operator pos:start="391:23" pos:end="391:23">=</operator> <operator pos:start="391:25" pos:end="391:25">&amp;</operator><name pos:start="391:26" pos:end="391:48"><name pos:start="391:26" pos:end="391:28">buf</name><index pos:start="391:29" pos:end="391:48">[<expr pos:start="391:30" pos:end="391:47"><name pos:start="391:30" pos:end="391:43">ETHER_ADDR_LEN</name> <operator pos:start="391:45" pos:end="391:45">*</operator> <literal type="number" pos:start="391:47" pos:end="391:47">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:30"><expr pos:start="393:13" pos:end="393:29"><name pos:start="393:13" pos:end="393:16">size</name> <operator pos:start="393:18" pos:end="393:19">-=</operator> <name pos:start="393:21" pos:end="393:29">VLAN_HLEN</name></expr>;</expr_stmt>

            <comment type="block" pos:start="395:13" pos:end="395:77">/* if too small buffer, use the tailroom added duing expansion */</comment>

            <if_stmt pos:start="397:13" pos:end="401:13"><if pos:start="397:13" pos:end="401:13">if <condition pos:start="397:16" pos:end="397:36">(<expr pos:start="397:17" pos:end="397:35"><name pos:start="397:17" pos:end="397:20">size</name> <operator pos:start="397:22" pos:end="397:22">&lt;</operator> <name pos:start="397:24" pos:end="397:35">MIN_BUF_SIZE</name></expr>)</condition> <block pos:start="397:38" pos:end="401:13">{<block_content pos:start="399:17" pos:end="399:36">

                <expr_stmt pos:start="399:17" pos:end="399:36"><expr pos:start="399:17" pos:end="399:35"><name pos:start="399:17" pos:end="399:20">size</name> <operator pos:start="399:22" pos:end="399:22">=</operator> <name pos:start="399:24" pos:end="399:35">MIN_BUF_SIZE</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="405:13" pos:end="405:42"><expr pos:start="405:13" pos:end="405:41"><name pos:start="405:13" pos:end="405:17">rxdw1</name> <operator pos:start="405:19" pos:end="405:20">&amp;=</operator> <operator pos:start="405:22" pos:end="405:22">~</operator><name pos:start="405:23" pos:end="405:41">CP_RX_VLAN_TAG_MASK</name></expr>;</expr_stmt>

            <comment type="block" pos:start="407:13" pos:end="407:55">/* BE + ~le_to_cpu()~ + cpu_to_le() = BE */</comment>

            <expr_stmt pos:start="409:13" pos:end="411:44"><expr pos:start="409:13" pos:end="411:43"><name pos:start="409:13" pos:end="409:17">rxdw1</name> <operator pos:start="409:19" pos:end="409:20">|=</operator> <name pos:start="409:22" pos:end="409:31">CP_RX_TAVA</name> <operator pos:start="409:33" pos:end="409:33">|</operator> <call pos:start="409:35" pos:end="411:43"><name pos:start="409:35" pos:end="409:46">le16_to_cpup</name><argument_list pos:start="409:47" pos:end="411:43">(<argument pos:start="409:48" pos:end="411:42"><expr pos:start="409:48" pos:end="411:42"><operator pos:start="409:48" pos:end="409:48">(</operator><name pos:start="409:49" pos:end="409:56">uint16_t</name> <operator pos:start="409:58" pos:end="409:58">*</operator><operator pos:start="409:59" pos:end="409:59">)</operator>

                <operator pos:start="411:17" pos:end="411:17">&amp;</operator><name pos:start="411:18" pos:end="411:42"><name pos:start="411:18" pos:end="411:26">dot1q_buf</name><index pos:start="411:27" pos:end="411:42">[<expr pos:start="411:28" pos:end="411:41"><name pos:start="411:28" pos:end="411:41">ETHER_TYPE_LEN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="415:13" pos:end="419:54"><expr pos:start="415:13" pos:end="419:53"><call pos:start="415:13" pos:end="419:53"><name pos:start="415:13" pos:end="415:23">DEBUG_PRINT</name><argument_list pos:start="415:24" pos:end="419:53">(<argument pos:start="415:25" pos:end="419:52"><expr pos:start="415:25" pos:end="419:52"><operator pos:start="415:25" pos:end="415:25">(</operator><literal type="string" pos:start="415:26" pos:end="415:78">"RTL8139: C+ Rx mode : extracted vlan tag with tci: "</literal>

                    <literal type="string" pos:start="417:21" pos:end="417:26">"%u\n"</literal><operator pos:start="417:27" pos:end="417:27">,</operator> <call pos:start="417:29" pos:end="419:51"><name pos:start="417:29" pos:end="417:40">be16_to_cpup</name><argument_list pos:start="417:41" pos:end="419:51">(<argument pos:start="417:42" pos:end="419:50"><expr pos:start="417:42" pos:end="419:50"><operator pos:start="417:42" pos:end="417:42">(</operator><name pos:start="417:43" pos:end="417:50">uint16_t</name> <operator pos:start="417:52" pos:end="417:52">*</operator><operator pos:start="417:53" pos:end="417:53">)</operator>

                        <operator pos:start="419:25" pos:end="419:25">&amp;</operator><name pos:start="419:26" pos:end="419:50"><name pos:start="419:26" pos:end="419:34">dot1q_buf</name><index pos:start="419:35" pos:end="419:50">[<expr pos:start="419:36" pos:end="419:49"><name pos:start="419:36" pos:end="419:49">ETHER_TYPE_LEN</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="419:52" pos:end="419:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="421:11" pos:end="427:9">else <block pos:start="421:16" pos:end="427:9">{<block_content pos:start="425:13" pos:end="425:33">

            <comment type="block" pos:start="423:13" pos:end="423:37">/* reset VLAN tag flag */</comment>

            <expr_stmt pos:start="425:13" pos:end="425:33"><expr pos:start="425:13" pos:end="425:32"><name pos:start="425:13" pos:end="425:17">rxdw1</name> <operator pos:start="425:19" pos:end="425:20">&amp;=</operator> <operator pos:start="425:22" pos:end="425:22">~</operator><name pos:start="425:23" pos:end="425:32">CP_RX_TAVA</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="431:9" pos:end="431:84">/* TODO: scatter the packet over available receive ring descriptors space */</comment>



        <if_stmt pos:start="435:9" pos:end="463:9"><if pos:start="435:9" pos:end="463:9">if <condition pos:start="435:12" pos:end="435:30">(<expr pos:start="435:13" pos:end="435:29"><name pos:start="435:13" pos:end="435:16">size</name><operator pos:start="435:17" pos:end="435:17">+</operator><literal type="number" pos:start="435:18" pos:end="435:18">4</literal> <operator pos:start="435:20" pos:end="435:20">&gt;</operator> <name pos:start="435:22" pos:end="435:29">rx_space</name></expr>)</condition>

        <block pos:start="437:9" pos:end="463:9">{<block_content pos:start="439:13" pos:end="461:25">

            <expr_stmt pos:start="439:13" pos:end="441:48"><expr pos:start="439:13" pos:end="441:47"><call pos:start="439:13" pos:end="441:47"><name pos:start="439:13" pos:end="439:23">DEBUG_PRINT</name><argument_list pos:start="439:24" pos:end="441:47">(<argument pos:start="439:25" pos:end="441:46"><expr pos:start="439:25" pos:end="441:46"><operator pos:start="439:25" pos:end="439:25">(</operator><literal type="string" pos:start="439:26" pos:end="439:88">"RTL8139: C+ Rx mode : descriptor %d size %d received %d + 4\n"</literal><operator pos:start="439:89" pos:end="439:89">,</operator>

                   <name pos:start="441:20" pos:end="441:29">descriptor</name><operator pos:start="441:30" pos:end="441:30">,</operator> <name pos:start="441:32" pos:end="441:39">rx_space</name><operator pos:start="441:40" pos:end="441:40">,</operator> <name pos:start="441:42" pos:end="441:45">size</name><operator pos:start="441:46" pos:end="441:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="445:13" pos:end="445:40"><expr pos:start="445:13" pos:end="445:39"><name pos:start="445:13" pos:end="445:25"><name pos:start="445:13" pos:end="445:13">s</name><operator pos:start="445:14" pos:end="445:15">-&gt;</operator><name pos:start="445:16" pos:end="445:25">IntrStatus</name></name> <operator pos:start="445:27" pos:end="445:28">|=</operator> <name pos:start="445:30" pos:end="445:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="447:13" pos:end="447:26"><expr pos:start="447:13" pos:end="447:25"><operator pos:start="447:13" pos:end="447:14">++</operator><name pos:start="447:15" pos:end="447:25"><name pos:start="447:15" pos:end="447:15">s</name><operator pos:start="447:16" pos:end="447:17">-&gt;</operator><name pos:start="447:18" pos:end="447:25">RxMissed</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="451:13" pos:end="451:38">/* update tally counter */</comment>

            <expr_stmt pos:start="453:13" pos:end="453:38"><expr pos:start="453:13" pos:end="453:37"><operator pos:start="453:13" pos:end="453:14">++</operator><name pos:start="453:15" pos:end="453:37"><name pos:start="453:15" pos:end="453:15">s</name><operator pos:start="453:16" pos:end="453:17">-&gt;</operator><name pos:start="453:18" pos:end="453:31">tally_counters</name><operator pos:start="453:32" pos:end="453:32">.</operator><name pos:start="453:33" pos:end="453:37">RxERR</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:40"><expr pos:start="455:13" pos:end="455:39"><operator pos:start="455:13" pos:end="455:14">++</operator><name pos:start="455:15" pos:end="455:39"><name pos:start="455:15" pos:end="455:15">s</name><operator pos:start="455:16" pos:end="455:17">-&gt;</operator><name pos:start="455:18" pos:end="455:31">tally_counters</name><operator pos:start="455:32" pos:end="455:32">.</operator><name pos:start="455:33" pos:end="455:39">MissPkt</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="459:13" pos:end="459:34"><expr pos:start="459:13" pos:end="459:33"><call pos:start="459:13" pos:end="459:33"><name pos:start="459:13" pos:end="459:30">rtl8139_update_irq</name><argument_list pos:start="459:31" pos:end="459:33">(<argument pos:start="459:32" pos:end="459:32"><expr pos:start="459:32" pos:end="459:32"><name pos:start="459:32" pos:end="459:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="461:13" pos:end="461:25">return <expr pos:start="461:20" pos:end="461:24"><name pos:start="461:20" pos:end="461:24">size_</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <decl_stmt pos:start="467:9" pos:end="467:70"><decl pos:start="467:9" pos:end="467:69"><type pos:start="467:9" pos:end="467:26"><name pos:start="467:9" pos:end="467:26">target_phys_addr_t</name></type> <name pos:start="467:28" pos:end="467:34">rx_addr</name> <init pos:start="467:36" pos:end="467:69">= <expr pos:start="467:38" pos:end="467:69"><call pos:start="467:38" pos:end="467:69"><name pos:start="467:38" pos:end="467:51">rtl8139_addr64</name><argument_list pos:start="467:52" pos:end="467:69">(<argument pos:start="467:53" pos:end="467:59"><expr pos:start="467:53" pos:end="467:59"><name pos:start="467:53" pos:end="467:59">rxbufLO</name></expr></argument>, <argument pos:start="467:62" pos:end="467:68"><expr pos:start="467:62" pos:end="467:68"><name pos:start="467:62" pos:end="467:68">rxbufHI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="471:9" pos:end="471:43">/* receive/copy to target memory */</comment>

        <if_stmt pos:start="473:9" pos:end="487:9"><if pos:start="473:9" pos:end="483:9">if <condition pos:start="473:12" pos:end="473:22">(<expr pos:start="473:13" pos:end="473:21"><name pos:start="473:13" pos:end="473:21">dot1q_buf</name></expr>)</condition> <block pos:start="473:24" pos:end="483:9">{<block_content pos:start="475:13" pos:end="481:43">

            <expr_stmt pos:start="475:13" pos:end="475:72"><expr pos:start="475:13" pos:end="475:71"><call pos:start="475:13" pos:end="475:71"><name pos:start="475:13" pos:end="475:37">cpu_physical_memory_write</name><argument_list pos:start="475:38" pos:end="475:71">(<argument pos:start="475:39" pos:end="475:45"><expr pos:start="475:39" pos:end="475:45"><name pos:start="475:39" pos:end="475:45">rx_addr</name></expr></argument>, <argument pos:start="475:48" pos:end="475:50"><expr pos:start="475:48" pos:end="475:50"><name pos:start="475:48" pos:end="475:50">buf</name></expr></argument>, <argument pos:start="475:53" pos:end="475:70"><expr pos:start="475:53" pos:end="475:70"><literal type="number" pos:start="475:53" pos:end="475:53">2</literal> <operator pos:start="475:55" pos:end="475:55">*</operator> <name pos:start="475:57" pos:end="475:70">ETHER_ADDR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="477:13" pos:end="481:43"><expr pos:start="477:13" pos:end="481:42"><call pos:start="477:13" pos:end="481:42"><name pos:start="477:13" pos:end="477:37">cpu_physical_memory_write</name><argument_list pos:start="477:38" pos:end="481:42">(<argument pos:start="477:39" pos:end="477:66"><expr pos:start="477:39" pos:end="477:66"><name pos:start="477:39" pos:end="477:45">rx_addr</name> <operator pos:start="477:47" pos:end="477:47">+</operator> <literal type="number" pos:start="477:49" pos:end="477:49">2</literal> <operator pos:start="477:51" pos:end="477:51">*</operator> <name pos:start="477:53" pos:end="477:66">ETHER_ADDR_LEN</name></expr></argument>,

                <argument pos:start="479:17" pos:end="479:52"><expr pos:start="479:17" pos:end="479:52"><name pos:start="479:17" pos:end="479:19">buf</name> <operator pos:start="479:21" pos:end="479:21">+</operator> <literal type="number" pos:start="479:23" pos:end="479:23">2</literal> <operator pos:start="479:25" pos:end="479:25">*</operator> <name pos:start="479:27" pos:end="479:40">ETHER_ADDR_LEN</name> <operator pos:start="479:42" pos:end="479:42">+</operator> <name pos:start="479:44" pos:end="479:52">VLAN_HLEN</name></expr></argument>,

                <argument pos:start="481:17" pos:end="481:41"><expr pos:start="481:17" pos:end="481:41"><name pos:start="481:17" pos:end="481:20">size</name> <operator pos:start="481:22" pos:end="481:22">-</operator> <literal type="number" pos:start="481:24" pos:end="481:24">2</literal> <operator pos:start="481:26" pos:end="481:26">*</operator> <name pos:start="481:28" pos:end="481:41">ETHER_ADDR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="483:11" pos:end="487:9">else <block pos:start="483:16" pos:end="487:9">{<block_content pos:start="485:13" pos:end="485:58">

            <expr_stmt pos:start="485:13" pos:end="485:58"><expr pos:start="485:13" pos:end="485:57"><call pos:start="485:13" pos:end="485:57"><name pos:start="485:13" pos:end="485:37">cpu_physical_memory_write</name><argument_list pos:start="485:38" pos:end="485:57">(<argument pos:start="485:39" pos:end="485:45"><expr pos:start="485:39" pos:end="485:45"><name pos:start="485:39" pos:end="485:45">rx_addr</name></expr></argument>, <argument pos:start="485:48" pos:end="485:50"><expr pos:start="485:48" pos:end="485:50"><name pos:start="485:48" pos:end="485:50">buf</name></expr></argument>, <argument pos:start="485:53" pos:end="485:56"><expr pos:start="485:53" pos:end="485:56"><name pos:start="485:53" pos:end="485:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="491:9" pos:end="497:9"><if pos:start="491:9" pos:end="497:9">if <condition pos:start="491:12" pos:end="491:37">(<expr pos:start="491:13" pos:end="491:36"><name pos:start="491:13" pos:end="491:20"><name pos:start="491:13" pos:end="491:13">s</name><operator pos:start="491:14" pos:end="491:15">-&gt;</operator><name pos:start="491:16" pos:end="491:20">CpCmd</name></name> <operator pos:start="491:22" pos:end="491:22">&amp;</operator> <name pos:start="491:24" pos:end="491:36">CPlusRxChkSum</name></expr>)</condition>

        <block pos:start="493:9" pos:end="497:9">{<block_content>

            <comment type="block" pos:start="495:13" pos:end="495:45">/* do some packet checksumming */</comment>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="501:9" pos:end="501:28">/* write checksum */</comment>

        <expr_stmt pos:start="503:9" pos:end="503:48"><expr pos:start="503:9" pos:end="503:47"><name pos:start="503:9" pos:end="503:11">val</name> <operator pos:start="503:13" pos:end="503:13">=</operator> <call pos:start="503:15" pos:end="503:47"><name pos:start="503:15" pos:end="503:25">cpu_to_le32</name><argument_list pos:start="503:26" pos:end="503:47">(<argument pos:start="503:27" pos:end="503:46"><expr pos:start="503:27" pos:end="503:46"><call pos:start="503:27" pos:end="503:46"><name pos:start="503:27" pos:end="503:31">crc32</name><argument_list pos:start="503:32" pos:end="503:46">(<argument pos:start="503:33" pos:end="503:33"><expr pos:start="503:33" pos:end="503:33"><literal type="number" pos:start="503:33" pos:end="503:33">0</literal></expr></argument>, <argument pos:start="503:36" pos:end="503:38"><expr pos:start="503:36" pos:end="503:38"><name pos:start="503:36" pos:end="503:38">buf</name></expr></argument>, <argument pos:start="503:41" pos:end="503:45"><expr pos:start="503:41" pos:end="503:45"><name pos:start="503:41" pos:end="503:45">size_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="505:9" pos:end="548:0"><expr pos:start="505:9" pos:end="505:68"><call pos:start="505:9" pos:end="505:68"><name pos:start="505:9" pos:end="505:33">cpu_physical_memory_write</name><argument_list pos:start="505:34" pos:end="505:68">( <argument pos:start="505:36" pos:end="505:47"><expr pos:start="505:36" pos:end="505:47"><name pos:start="505:36" pos:end="505:42">rx_addr</name><operator pos:start="505:43" pos:end="505:43">+</operator><name pos:start="505:44" pos:end="505:47">size</name></expr></argument>, <argument pos:start="505:50" pos:end="505:64"><expr pos:start="505:50" pos:end="505:64"><operator pos:start="505:50" pos:end="505:50">(</operator><name pos:start="505:51" pos:end="505:57">uint8_t</name> <operator pos:start="505:59" pos:end="505:59">*</operator><operator pos:start="505:60" pos:end="505:60">)</operator><operator pos:start="505:61" pos:end="505:61">&amp;</operator><name pos:start="505:62" pos:end="505:64">val</name></expr></argument>, <argument pos:start="505:67" pos:end="505:67"><expr pos:start="505:67" pos:end="505:67"><literal type="number" pos:start="505:67" pos:end="505:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<comment type="block" pos:start="509:1" pos:end="509:43">/* first segment of received packet flag */</comment>

<cpp:define pos:start="511:1" pos:end="511:31">#<cpp:directive pos:start="511:2" pos:end="511:7">define</cpp:directive> <cpp:macro pos:start="511:9" pos:end="511:23"><name pos:start="511:9" pos:end="511:23">CP_RX_STATUS_FS</name></cpp:macro> <cpp:value pos:start="511:25" pos:end="511:31">(1&lt;&lt;29)</cpp:value></cpp:define>

<comment type="block" pos:start="513:1" pos:end="513:42">/* last segment of received packet flag */</comment>

<cpp:define pos:start="515:1" pos:end="515:31">#<cpp:directive pos:start="515:2" pos:end="515:7">define</cpp:directive> <cpp:macro pos:start="515:9" pos:end="515:23"><name pos:start="515:9" pos:end="515:23">CP_RX_STATUS_LS</name></cpp:macro> <cpp:value pos:start="515:25" pos:end="515:31">(1&lt;&lt;28)</cpp:value></cpp:define>

<comment type="block" pos:start="517:1" pos:end="517:27">/* multicast packet flag */</comment>

<cpp:define pos:start="519:1" pos:end="519:32">#<cpp:directive pos:start="519:2" pos:end="519:7">define</cpp:directive> <cpp:macro pos:start="519:9" pos:end="519:24"><name pos:start="519:9" pos:end="519:24">CP_RX_STATUS_MAR</name></cpp:macro> <cpp:value pos:start="519:26" pos:end="519:32">(1&lt;&lt;26)</cpp:value></cpp:define>

<comment type="block" pos:start="521:1" pos:end="521:35">/* physical-matching packet flag */</comment>

<cpp:define pos:start="523:1" pos:end="523:32">#<cpp:directive pos:start="523:2" pos:end="523:7">define</cpp:directive> <cpp:macro pos:start="523:9" pos:end="523:24"><name pos:start="523:9" pos:end="523:24">CP_RX_STATUS_PAM</name></cpp:macro> <cpp:value pos:start="523:26" pos:end="523:32">(1&lt;&lt;25)</cpp:value></cpp:define>

<comment type="block" pos:start="525:1" pos:end="525:27">/* broadcast packet flag */</comment>

<cpp:define pos:start="527:1" pos:end="527:32">#<cpp:directive pos:start="527:2" pos:end="527:7">define</cpp:directive> <cpp:macro pos:start="527:9" pos:end="527:24"><name pos:start="527:9" pos:end="527:24">CP_RX_STATUS_BAR</name></cpp:macro> <cpp:value pos:start="527:26" pos:end="527:32">(1&lt;&lt;24)</cpp:value></cpp:define>

<comment type="block" pos:start="529:1" pos:end="529:22">/* runt packet flag */</comment>

<cpp:define pos:start="531:1" pos:end="531:33">#<cpp:directive pos:start="531:2" pos:end="531:7">define</cpp:directive> <cpp:macro pos:start="531:9" pos:end="531:25"><name pos:start="531:9" pos:end="531:25">CP_RX_STATUS_RUNT</name></cpp:macro> <cpp:value pos:start="531:27" pos:end="531:33">(1&lt;&lt;19)</cpp:value></cpp:define>

<comment type="block" pos:start="533:1" pos:end="533:20">/* crc error flag */</comment>

<cpp:define pos:start="535:1" pos:end="535:32">#<cpp:directive pos:start="535:2" pos:end="535:7">define</cpp:directive> <cpp:macro pos:start="535:9" pos:end="535:24"><name pos:start="535:9" pos:end="535:24">CP_RX_STATUS_CRC</name></cpp:macro> <cpp:value pos:start="535:26" pos:end="535:32">(1&lt;&lt;18)</cpp:value></cpp:define>

<comment type="block" pos:start="537:1" pos:end="537:28">/* IP checksum error flag */</comment>

<cpp:define pos:start="539:1" pos:end="539:32">#<cpp:directive pos:start="539:2" pos:end="539:7">define</cpp:directive> <cpp:macro pos:start="539:9" pos:end="539:24"><name pos:start="539:9" pos:end="539:24">CP_RX_STATUS_IPF</name></cpp:macro> <cpp:value pos:start="539:26" pos:end="539:32">(1&lt;&lt;15)</cpp:value></cpp:define>

<comment type="block" pos:start="541:1" pos:end="541:29">/* UDP checksum error flag */</comment>

<cpp:define pos:start="543:1" pos:end="543:33">#<cpp:directive pos:start="543:2" pos:end="543:7">define</cpp:directive> <cpp:macro pos:start="543:9" pos:end="543:25"><name pos:start="543:9" pos:end="543:25">CP_RX_STATUS_UDPF</name></cpp:macro> <cpp:value pos:start="543:27" pos:end="543:33">(1&lt;&lt;14)</cpp:value></cpp:define>

<comment type="block" pos:start="545:1" pos:end="545:29">/* TCP checksum error flag */</comment>

<cpp:define pos:start="547:1" pos:end="547:33">#<cpp:directive pos:start="547:2" pos:end="547:7">define</cpp:directive> <cpp:macro pos:start="547:9" pos:end="547:25"><name pos:start="547:9" pos:end="547:25">CP_RX_STATUS_TCPF</name></cpp:macro> <cpp:value pos:start="547:27" pos:end="547:33">(1&lt;&lt;13)</cpp:value></cpp:define>



        <comment type="block" pos:start="551:9" pos:end="551:42">/* transfer ownership to target */</comment>

        <expr_stmt pos:start="553:9" pos:end="553:28"><expr pos:start="553:9" pos:end="553:27"><name pos:start="553:9" pos:end="553:13">rxdw0</name> <operator pos:start="553:15" pos:end="553:16">&amp;=</operator> <operator pos:start="553:18" pos:end="553:18">~</operator><name pos:start="553:19" pos:end="553:27">CP_RX_OWN</name></expr>;</expr_stmt>



        <comment type="block" pos:start="557:9" pos:end="557:35">/* set first segment bit */</comment>

        <expr_stmt pos:start="559:9" pos:end="559:33"><expr pos:start="559:9" pos:end="559:32"><name pos:start="559:9" pos:end="559:13">rxdw0</name> <operator pos:start="559:15" pos:end="559:16">|=</operator> <name pos:start="559:18" pos:end="559:32">CP_RX_STATUS_FS</name></expr>;</expr_stmt>



        <comment type="block" pos:start="563:9" pos:end="563:34">/* set last segment bit */</comment>

        <expr_stmt pos:start="565:9" pos:end="565:33"><expr pos:start="565:9" pos:end="565:32"><name pos:start="565:9" pos:end="565:13">rxdw0</name> <operator pos:start="565:15" pos:end="565:16">|=</operator> <name pos:start="565:18" pos:end="565:32">CP_RX_STATUS_LS</name></expr>;</expr_stmt>



        <comment type="block" pos:start="569:9" pos:end="569:44">/* set received packet type flags */</comment>

        <if_stmt pos:start="571:9" pos:end="573:38"><if pos:start="571:9" pos:end="573:38">if <condition pos:start="571:12" pos:end="571:40">(<expr pos:start="571:13" pos:end="571:39"><name pos:start="571:13" pos:end="571:25">packet_header</name> <operator pos:start="571:27" pos:end="571:27">&amp;</operator> <name pos:start="571:29" pos:end="571:39">RxBroadcast</name></expr>)</condition><block type="pseudo" pos:start="573:13" pos:end="573:38"><block_content pos:start="573:13" pos:end="573:38">

            <expr_stmt pos:start="573:13" pos:end="573:38"><expr pos:start="573:13" pos:end="573:37"><name pos:start="573:13" pos:end="573:17">rxdw0</name> <operator pos:start="573:19" pos:end="573:20">|=</operator> <name pos:start="573:22" pos:end="573:37">CP_RX_STATUS_BAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="575:9" pos:end="577:38"><if pos:start="575:9" pos:end="577:38">if <condition pos:start="575:12" pos:end="575:40">(<expr pos:start="575:13" pos:end="575:39"><name pos:start="575:13" pos:end="575:25">packet_header</name> <operator pos:start="575:27" pos:end="575:27">&amp;</operator> <name pos:start="575:29" pos:end="575:39">RxMulticast</name></expr>)</condition><block type="pseudo" pos:start="577:13" pos:end="577:38"><block_content pos:start="577:13" pos:end="577:38">

            <expr_stmt pos:start="577:13" pos:end="577:38"><expr pos:start="577:13" pos:end="577:37"><name pos:start="577:13" pos:end="577:17">rxdw0</name> <operator pos:start="577:19" pos:end="577:20">|=</operator> <name pos:start="577:22" pos:end="577:37">CP_RX_STATUS_MAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="579:9" pos:end="581:38"><if pos:start="579:9" pos:end="581:38">if <condition pos:start="579:12" pos:end="579:39">(<expr pos:start="579:13" pos:end="579:38"><name pos:start="579:13" pos:end="579:25">packet_header</name> <operator pos:start="579:27" pos:end="579:27">&amp;</operator> <name pos:start="579:29" pos:end="579:38">RxPhysical</name></expr>)</condition><block type="pseudo" pos:start="581:13" pos:end="581:38"><block_content pos:start="581:13" pos:end="581:38">

            <expr_stmt pos:start="581:13" pos:end="581:38"><expr pos:start="581:13" pos:end="581:37"><name pos:start="581:13" pos:end="581:17">rxdw0</name> <operator pos:start="581:19" pos:end="581:20">|=</operator> <name pos:start="581:22" pos:end="581:37">CP_RX_STATUS_PAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="585:9" pos:end="585:31">/* set received size */</comment>

        <expr_stmt pos:start="587:9" pos:end="587:41"><expr pos:start="587:9" pos:end="587:40"><name pos:start="587:9" pos:end="587:13">rxdw0</name> <operator pos:start="587:15" pos:end="587:16">&amp;=</operator> <operator pos:start="587:18" pos:end="587:18">~</operator><name pos:start="587:19" pos:end="587:40">CP_RX_BUFFER_SIZE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="589:9" pos:end="589:26"><expr pos:start="589:9" pos:end="589:25"><name pos:start="589:9" pos:end="589:13">rxdw0</name> <operator pos:start="589:15" pos:end="589:16">|=</operator> <operator pos:start="589:18" pos:end="589:18">(</operator><name pos:start="589:19" pos:end="589:22">size</name><operator pos:start="589:23" pos:end="589:23">+</operator><literal type="number" pos:start="589:24" pos:end="589:24">4</literal><operator pos:start="589:25" pos:end="589:25">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="593:9" pos:end="593:30">/* update ring data */</comment>

        <expr_stmt pos:start="595:9" pos:end="595:33"><expr pos:start="595:9" pos:end="595:32"><name pos:start="595:9" pos:end="595:11">val</name> <operator pos:start="595:13" pos:end="595:13">=</operator> <call pos:start="595:15" pos:end="595:32"><name pos:start="595:15" pos:end="595:25">cpu_to_le32</name><argument_list pos:start="595:26" pos:end="595:32">(<argument pos:start="595:27" pos:end="595:31"><expr pos:start="595:27" pos:end="595:31"><name pos:start="595:27" pos:end="595:31">rxdw0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="597:9" pos:end="597:77"><expr pos:start="597:9" pos:end="597:76"><call pos:start="597:9" pos:end="597:76"><name pos:start="597:9" pos:end="597:33">cpu_physical_memory_write</name><argument_list pos:start="597:34" pos:end="597:76">(<argument pos:start="597:35" pos:end="597:52"><expr pos:start="597:35" pos:end="597:52"><name pos:start="597:35" pos:end="597:52">cplus_rx_ring_desc</name></expr></argument>,    <argument pos:start="597:58" pos:end="597:72"><expr pos:start="597:58" pos:end="597:72"><operator pos:start="597:58" pos:end="597:58">(</operator><name pos:start="597:59" pos:end="597:65">uint8_t</name> <operator pos:start="597:67" pos:end="597:67">*</operator><operator pos:start="597:68" pos:end="597:68">)</operator><operator pos:start="597:69" pos:end="597:69">&amp;</operator><name pos:start="597:70" pos:end="597:72">val</name></expr></argument>, <argument pos:start="597:75" pos:end="597:75"><expr pos:start="597:75" pos:end="597:75"><literal type="number" pos:start="597:75" pos:end="597:75">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:33"><expr pos:start="599:9" pos:end="599:32"><name pos:start="599:9" pos:end="599:11">val</name> <operator pos:start="599:13" pos:end="599:13">=</operator> <call pos:start="599:15" pos:end="599:32"><name pos:start="599:15" pos:end="599:25">cpu_to_le32</name><argument_list pos:start="599:26" pos:end="599:32">(<argument pos:start="599:27" pos:end="599:31"><expr pos:start="599:27" pos:end="599:31"><name pos:start="599:27" pos:end="599:31">rxdw1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:77"><expr pos:start="601:9" pos:end="601:76"><call pos:start="601:9" pos:end="601:76"><name pos:start="601:9" pos:end="601:33">cpu_physical_memory_write</name><argument_list pos:start="601:34" pos:end="601:76">(<argument pos:start="601:35" pos:end="601:54"><expr pos:start="601:35" pos:end="601:54"><name pos:start="601:35" pos:end="601:52">cplus_rx_ring_desc</name><operator pos:start="601:53" pos:end="601:53">+</operator><literal type="number" pos:start="601:54" pos:end="601:54">4</literal></expr></argument>,  <argument pos:start="601:58" pos:end="601:72"><expr pos:start="601:58" pos:end="601:72"><operator pos:start="601:58" pos:end="601:58">(</operator><name pos:start="601:59" pos:end="601:65">uint8_t</name> <operator pos:start="601:67" pos:end="601:67">*</operator><operator pos:start="601:68" pos:end="601:68">)</operator><operator pos:start="601:69" pos:end="601:69">&amp;</operator><name pos:start="601:70" pos:end="601:72">val</name></expr></argument>, <argument pos:start="601:75" pos:end="601:75"><expr pos:start="601:75" pos:end="601:75"><literal type="number" pos:start="601:75" pos:end="601:75">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="605:9" pos:end="605:34">/* update tally counter */</comment>

        <expr_stmt pos:start="607:9" pos:end="607:33"><expr pos:start="607:9" pos:end="607:32"><operator pos:start="607:9" pos:end="607:10">++</operator><name pos:start="607:11" pos:end="607:32"><name pos:start="607:11" pos:end="607:11">s</name><operator pos:start="607:12" pos:end="607:13">-&gt;</operator><name pos:start="607:14" pos:end="607:27">tally_counters</name><operator pos:start="607:28" pos:end="607:28">.</operator><name pos:start="607:29" pos:end="607:32">RxOk</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="611:9" pos:end="611:40">/* seek to next Rx descriptor */</comment>

        <if_stmt pos:start="613:9" pos:end="627:9"><if pos:start="613:9" pos:end="619:9">if <condition pos:start="613:12" pos:end="613:30">(<expr pos:start="613:13" pos:end="613:29"><name pos:start="613:13" pos:end="613:17">rxdw0</name> <operator pos:start="613:19" pos:end="613:19">&amp;</operator> <name pos:start="613:21" pos:end="613:29">CP_RX_EOR</name></expr>)</condition>

        <block pos:start="615:9" pos:end="619:9">{<block_content pos:start="617:13" pos:end="617:35">

            <expr_stmt pos:start="617:13" pos:end="617:35"><expr pos:start="617:13" pos:end="617:34"><name pos:start="617:13" pos:end="617:30"><name pos:start="617:13" pos:end="617:13">s</name><operator pos:start="617:14" pos:end="617:15">-&gt;</operator><name pos:start="617:16" pos:end="617:30">currCPlusRxDesc</name></name> <operator pos:start="617:32" pos:end="617:32">=</operator> <literal type="number" pos:start="617:34" pos:end="617:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="621:9" pos:end="627:9">else

        <block pos:start="623:9" pos:end="627:9">{<block_content pos:start="625:13" pos:end="625:33">

            <expr_stmt pos:start="625:13" pos:end="625:33"><expr pos:start="625:13" pos:end="625:32"><operator pos:start="625:13" pos:end="625:14">++</operator><name pos:start="625:15" pos:end="625:32"><name pos:start="625:15" pos:end="625:15">s</name><operator pos:start="625:16" pos:end="625:17">-&gt;</operator><name pos:start="625:18" pos:end="625:32">currCPlusRxDesc</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="631:9" pos:end="631:69"><expr pos:start="631:9" pos:end="631:68"><call pos:start="631:9" pos:end="631:68"><name pos:start="631:9" pos:end="631:19">DEBUG_PRINT</name><argument_list pos:start="631:20" pos:end="631:68">(<argument pos:start="631:21" pos:end="631:67"><expr pos:start="631:21" pos:end="631:67"><operator pos:start="631:21" pos:end="631:21">(</operator><literal type="string" pos:start="631:22" pos:end="631:66">"RTL8139: done C+ Rx mode ----------------\n"</literal><operator pos:start="631:67" pos:end="631:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if>

    <else pos:start="637:5" pos:end="721:5">else

    <block pos:start="639:5" pos:end="721:5">{<block_content pos:start="641:9" pos:end="719:60">

        <expr_stmt pos:start="641:9" pos:end="641:69"><expr pos:start="641:9" pos:end="641:68"><call pos:start="641:9" pos:end="641:68"><name pos:start="641:9" pos:end="641:19">DEBUG_PRINT</name><argument_list pos:start="641:20" pos:end="641:68">(<argument pos:start="641:21" pos:end="641:67"><expr pos:start="641:21" pos:end="641:67"><operator pos:start="641:21" pos:end="641:21">(</operator><literal type="string" pos:start="641:22" pos:end="641:66">"RTL8139: in ring Rx mode ================\n"</literal><operator pos:start="641:67" pos:end="641:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="645:9" pos:end="645:38">/* begin ring receiver mode */</comment>

        <decl_stmt pos:start="647:9" pos:end="647:88"><decl pos:start="647:9" pos:end="647:87"><type pos:start="647:9" pos:end="647:11"><name pos:start="647:9" pos:end="647:11">int</name></type> <name pos:start="647:13" pos:end="647:17">avail</name> <init pos:start="647:19" pos:end="647:87">= <expr pos:start="647:21" pos:end="647:87"><call pos:start="647:21" pos:end="647:87"><name pos:start="647:21" pos:end="647:24">MOD2</name><argument_list pos:start="647:25" pos:end="647:87">(<argument pos:start="647:26" pos:end="647:69"><expr pos:start="647:26" pos:end="647:69"><name pos:start="647:26" pos:end="647:40"><name pos:start="647:26" pos:end="647:26">s</name><operator pos:start="647:27" pos:end="647:28">-&gt;</operator><name pos:start="647:29" pos:end="647:40">RxBufferSize</name></name> <operator pos:start="647:42" pos:end="647:42">+</operator> <name pos:start="647:44" pos:end="647:54"><name pos:start="647:44" pos:end="647:44">s</name><operator pos:start="647:45" pos:end="647:46">-&gt;</operator><name pos:start="647:47" pos:end="647:54">RxBufPtr</name></name> <operator pos:start="647:56" pos:end="647:56">-</operator> <name pos:start="647:58" pos:end="647:69"><name pos:start="647:58" pos:end="647:58">s</name><operator pos:start="647:59" pos:end="647:60">-&gt;</operator><name pos:start="647:61" pos:end="647:69">RxBufAddr</name></name></expr></argument>, <argument pos:start="647:72" pos:end="647:86"><expr pos:start="647:72" pos:end="647:86"><name pos:start="647:72" pos:end="647:86"><name pos:start="647:72" pos:end="647:72">s</name><operator pos:start="647:73" pos:end="647:74">-&gt;</operator><name pos:start="647:75" pos:end="647:86">RxBufferSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="651:9" pos:end="651:57">/* if receiver buffer is empty then avail == 0 */</comment>



        <if_stmt pos:start="655:9" pos:end="673:9"><if pos:start="655:9" pos:end="673:9">if <condition pos:start="655:12" pos:end="655:44">(<expr pos:start="655:13" pos:end="655:43"><name pos:start="655:13" pos:end="655:17">avail</name> <operator pos:start="655:19" pos:end="655:20">!=</operator> <literal type="number" pos:start="655:22" pos:end="655:22">0</literal> <operator pos:start="655:24" pos:end="655:25">&amp;&amp;</operator> <name pos:start="655:27" pos:end="655:30">size</name> <operator pos:start="655:32" pos:end="655:32">+</operator> <literal type="number" pos:start="655:34" pos:end="655:34">8</literal> <operator pos:start="655:36" pos:end="655:37">&gt;=</operator> <name pos:start="655:39" pos:end="655:43">avail</name></expr>)</condition>

        <block pos:start="657:9" pos:end="673:9">{<block_content pos:start="659:13" pos:end="671:25">

            <expr_stmt pos:start="659:13" pos:end="661:81"><expr pos:start="659:13" pos:end="661:80"><call pos:start="659:13" pos:end="661:80"><name pos:start="659:13" pos:end="659:23">DEBUG_PRINT</name><argument_list pos:start="659:24" pos:end="661:80">(<argument pos:start="659:25" pos:end="661:79"><expr pos:start="659:25" pos:end="661:79"><operator pos:start="659:25" pos:end="659:25">(</operator><literal type="string" pos:start="659:26" pos:end="659:118">"rx overflow: rx buffer length %d head 0x%04x read 0x%04x === available 0x%04x need 0x%04x\n"</literal><operator pos:start="659:119" pos:end="659:119">,</operator>

                   <name pos:start="661:20" pos:end="661:34"><name pos:start="661:20" pos:end="661:20">s</name><operator pos:start="661:21" pos:end="661:22">-&gt;</operator><name pos:start="661:23" pos:end="661:34">RxBufferSize</name></name><operator pos:start="661:35" pos:end="661:35">,</operator> <name pos:start="661:37" pos:end="661:48"><name pos:start="661:37" pos:end="661:37">s</name><operator pos:start="661:38" pos:end="661:39">-&gt;</operator><name pos:start="661:40" pos:end="661:48">RxBufAddr</name></name><operator pos:start="661:49" pos:end="661:49">,</operator> <name pos:start="661:51" pos:end="661:61"><name pos:start="661:51" pos:end="661:51">s</name><operator pos:start="661:52" pos:end="661:53">-&gt;</operator><name pos:start="661:54" pos:end="661:61">RxBufPtr</name></name><operator pos:start="661:62" pos:end="661:62">,</operator> <name pos:start="661:64" pos:end="661:68">avail</name><operator pos:start="661:69" pos:end="661:69">,</operator> <name pos:start="661:71" pos:end="661:74">size</name> <operator pos:start="661:76" pos:end="661:76">+</operator> <literal type="number" pos:start="661:78" pos:end="661:78">8</literal><operator pos:start="661:79" pos:end="661:79">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="665:13" pos:end="665:40"><expr pos:start="665:13" pos:end="665:39"><name pos:start="665:13" pos:end="665:25"><name pos:start="665:13" pos:end="665:13">s</name><operator pos:start="665:14" pos:end="665:15">-&gt;</operator><name pos:start="665:16" pos:end="665:25">IntrStatus</name></name> <operator pos:start="665:27" pos:end="665:28">|=</operator> <name pos:start="665:30" pos:end="665:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="667:13" pos:end="667:26"><expr pos:start="667:13" pos:end="667:25"><operator pos:start="667:13" pos:end="667:14">++</operator><name pos:start="667:15" pos:end="667:25"><name pos:start="667:15" pos:end="667:15">s</name><operator pos:start="667:16" pos:end="667:17">-&gt;</operator><name pos:start="667:18" pos:end="667:25">RxMissed</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="669:13" pos:end="669:34"><expr pos:start="669:13" pos:end="669:33"><call pos:start="669:13" pos:end="669:33"><name pos:start="669:13" pos:end="669:30">rtl8139_update_irq</name><argument_list pos:start="669:31" pos:end="669:33">(<argument pos:start="669:32" pos:end="669:32"><expr pos:start="669:32" pos:end="669:32"><name pos:start="669:32" pos:end="669:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="671:13" pos:end="671:25">return <expr pos:start="671:20" pos:end="671:24"><name pos:start="671:20" pos:end="671:24">size_</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="677:9" pos:end="677:36"><expr pos:start="677:9" pos:end="677:35"><name pos:start="677:9" pos:end="677:21">packet_header</name> <operator pos:start="677:23" pos:end="677:24">|=</operator> <name pos:start="677:26" pos:end="677:35">RxStatusOK</name></expr>;</expr_stmt>



        <expr_stmt pos:start="681:9" pos:end="681:57"><expr pos:start="681:9" pos:end="681:56"><name pos:start="681:9" pos:end="681:21">packet_header</name> <operator pos:start="681:23" pos:end="681:24">|=</operator> <operator pos:start="681:26" pos:end="681:26">(</operator><operator pos:start="681:27" pos:end="681:27">(</operator><operator pos:start="681:28" pos:end="681:28">(</operator><name pos:start="681:29" pos:end="681:32">size</name><operator pos:start="681:33" pos:end="681:33">+</operator><literal type="number" pos:start="681:34" pos:end="681:34">4</literal><operator pos:start="681:35" pos:end="681:35">)</operator> <operator pos:start="681:37" pos:end="681:38">&lt;&lt;</operator> <literal type="number" pos:start="681:40" pos:end="681:41">16</literal><operator pos:start="681:42" pos:end="681:42">)</operator> <operator pos:start="681:44" pos:end="681:44">&amp;</operator> <literal type="number" pos:start="681:46" pos:end="681:55">0xffff0000</literal><operator pos:start="681:56" pos:end="681:56">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="685:9" pos:end="685:26">/* write header */</comment>

        <decl_stmt pos:start="687:9" pos:end="687:50"><decl pos:start="687:9" pos:end="687:49"><type pos:start="687:9" pos:end="687:16"><name pos:start="687:9" pos:end="687:16">uint32_t</name></type> <name pos:start="687:18" pos:end="687:20">val</name> <init pos:start="687:22" pos:end="687:49">= <expr pos:start="687:24" pos:end="687:49"><call pos:start="687:24" pos:end="687:49"><name pos:start="687:24" pos:end="687:34">cpu_to_le32</name><argument_list pos:start="687:35" pos:end="687:49">(<argument pos:start="687:36" pos:end="687:48"><expr pos:start="687:36" pos:end="687:48"><name pos:start="687:36" pos:end="687:48">packet_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="691:9" pos:end="691:52"><expr pos:start="691:9" pos:end="691:51"><call pos:start="691:9" pos:end="691:51"><name pos:start="691:9" pos:end="691:28">rtl8139_write_buffer</name><argument_list pos:start="691:29" pos:end="691:51">(<argument pos:start="691:30" pos:end="691:30"><expr pos:start="691:30" pos:end="691:30"><name pos:start="691:30" pos:end="691:30">s</name></expr></argument>, <argument pos:start="691:33" pos:end="691:47"><expr pos:start="691:33" pos:end="691:47"><operator pos:start="691:33" pos:end="691:33">(</operator><name pos:start="691:34" pos:end="691:40">uint8_t</name> <operator pos:start="691:42" pos:end="691:42">*</operator><operator pos:start="691:43" pos:end="691:43">)</operator><operator pos:start="691:44" pos:end="691:44">&amp;</operator><name pos:start="691:45" pos:end="691:47">val</name></expr></argument>, <argument pos:start="691:50" pos:end="691:50"><expr pos:start="691:50" pos:end="691:50"><literal type="number" pos:start="691:50" pos:end="691:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="695:9" pos:end="695:43"><expr pos:start="695:9" pos:end="695:42"><call pos:start="695:9" pos:end="695:42"><name pos:start="695:9" pos:end="695:28">rtl8139_write_buffer</name><argument_list pos:start="695:29" pos:end="695:42">(<argument pos:start="695:30" pos:end="695:30"><expr pos:start="695:30" pos:end="695:30"><name pos:start="695:30" pos:end="695:30">s</name></expr></argument>, <argument pos:start="695:33" pos:end="695:35"><expr pos:start="695:33" pos:end="695:35"><name pos:start="695:33" pos:end="695:35">buf</name></expr></argument>, <argument pos:start="695:38" pos:end="695:41"><expr pos:start="695:38" pos:end="695:41"><name pos:start="695:38" pos:end="695:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="699:9" pos:end="699:28">/* write checksum */</comment>

        <expr_stmt pos:start="701:9" pos:end="701:47"><expr pos:start="701:9" pos:end="701:46"><name pos:start="701:9" pos:end="701:11">val</name> <operator pos:start="701:13" pos:end="701:13">=</operator> <call pos:start="701:15" pos:end="701:46"><name pos:start="701:15" pos:end="701:25">cpu_to_le32</name><argument_list pos:start="701:26" pos:end="701:46">(<argument pos:start="701:27" pos:end="701:45"><expr pos:start="701:27" pos:end="701:45"><call pos:start="701:27" pos:end="701:45"><name pos:start="701:27" pos:end="701:31">crc32</name><argument_list pos:start="701:32" pos:end="701:45">(<argument pos:start="701:33" pos:end="701:33"><expr pos:start="701:33" pos:end="701:33"><literal type="number" pos:start="701:33" pos:end="701:33">0</literal></expr></argument>, <argument pos:start="701:36" pos:end="701:38"><expr pos:start="701:36" pos:end="701:38"><name pos:start="701:36" pos:end="701:38">buf</name></expr></argument>, <argument pos:start="701:41" pos:end="701:44"><expr pos:start="701:41" pos:end="701:44"><name pos:start="701:41" pos:end="701:44">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="703:9" pos:end="703:52"><expr pos:start="703:9" pos:end="703:51"><call pos:start="703:9" pos:end="703:51"><name pos:start="703:9" pos:end="703:28">rtl8139_write_buffer</name><argument_list pos:start="703:29" pos:end="703:51">(<argument pos:start="703:30" pos:end="703:30"><expr pos:start="703:30" pos:end="703:30"><name pos:start="703:30" pos:end="703:30">s</name></expr></argument>, <argument pos:start="703:33" pos:end="703:47"><expr pos:start="703:33" pos:end="703:47"><operator pos:start="703:33" pos:end="703:33">(</operator><name pos:start="703:34" pos:end="703:40">uint8_t</name> <operator pos:start="703:42" pos:end="703:42">*</operator><operator pos:start="703:43" pos:end="703:43">)</operator><operator pos:start="703:44" pos:end="703:44">&amp;</operator><name pos:start="703:45" pos:end="703:47">val</name></expr></argument>, <argument pos:start="703:50" pos:end="703:50"><expr pos:start="703:50" pos:end="703:50"><literal type="number" pos:start="703:50" pos:end="703:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="707:9" pos:end="707:42">/* correct buffer write pointer */</comment>

        <expr_stmt pos:start="709:9" pos:end="709:72"><expr pos:start="709:9" pos:end="709:71"><name pos:start="709:9" pos:end="709:20"><name pos:start="709:9" pos:end="709:9">s</name><operator pos:start="709:10" pos:end="709:11">-&gt;</operator><name pos:start="709:12" pos:end="709:20">RxBufAddr</name></name> <operator pos:start="709:22" pos:end="709:22">=</operator> <call pos:start="709:24" pos:end="709:71"><name pos:start="709:24" pos:end="709:27">MOD2</name><argument_list pos:start="709:28" pos:end="709:71">(<argument pos:start="709:29" pos:end="709:53"><expr pos:start="709:29" pos:end="709:53"><operator pos:start="709:29" pos:end="709:29">(</operator><name pos:start="709:30" pos:end="709:41"><name pos:start="709:30" pos:end="709:30">s</name><operator pos:start="709:31" pos:end="709:32">-&gt;</operator><name pos:start="709:33" pos:end="709:41">RxBufAddr</name></name> <operator pos:start="709:43" pos:end="709:43">+</operator> <literal type="number" pos:start="709:45" pos:end="709:45">3</literal><operator pos:start="709:46" pos:end="709:46">)</operator> <operator pos:start="709:48" pos:end="709:48">&amp;</operator> <operator pos:start="709:50" pos:end="709:50">~</operator><literal type="number" pos:start="709:51" pos:end="709:53">0x3</literal></expr></argument>, <argument pos:start="709:56" pos:end="709:70"><expr pos:start="709:56" pos:end="709:70"><name pos:start="709:56" pos:end="709:70"><name pos:start="709:56" pos:end="709:56">s</name><operator pos:start="709:57" pos:end="709:58">-&gt;</operator><name pos:start="709:59" pos:end="709:70">RxBufferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="713:9" pos:end="713:58">/* now we can signal we have received something */</comment>



        <expr_stmt pos:start="717:9" pos:end="719:60"><expr pos:start="717:9" pos:end="719:59"><call pos:start="717:9" pos:end="719:59"><name pos:start="717:9" pos:end="717:19">DEBUG_PRINT</name><argument_list pos:start="717:20" pos:end="719:59">(<argument pos:start="717:21" pos:end="719:58"><expr pos:start="717:21" pos:end="719:58"><operator pos:start="717:21" pos:end="717:21">(</operator><literal type="string" pos:start="717:22" pos:end="717:81">"   received: rx buffer length %d head 0x%04x read 0x%04x\n"</literal><operator pos:start="717:82" pos:end="717:82">,</operator>

               <name pos:start="719:16" pos:end="719:30"><name pos:start="719:16" pos:end="719:16">s</name><operator pos:start="719:17" pos:end="719:18">-&gt;</operator><name pos:start="719:19" pos:end="719:30">RxBufferSize</name></name><operator pos:start="719:31" pos:end="719:31">,</operator> <name pos:start="719:33" pos:end="719:44"><name pos:start="719:33" pos:end="719:33">s</name><operator pos:start="719:34" pos:end="719:35">-&gt;</operator><name pos:start="719:36" pos:end="719:44">RxBufAddr</name></name><operator pos:start="719:45" pos:end="719:45">,</operator> <name pos:start="719:47" pos:end="719:57"><name pos:start="719:47" pos:end="719:47">s</name><operator pos:start="719:48" pos:end="719:49">-&gt;</operator><name pos:start="719:50" pos:end="719:57">RxBufPtr</name></name><operator pos:start="719:58" pos:end="719:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="725:5" pos:end="725:26"><expr pos:start="725:5" pos:end="725:25"><name pos:start="725:5" pos:end="725:17"><name pos:start="725:5" pos:end="725:5">s</name><operator pos:start="725:6" pos:end="725:7">-&gt;</operator><name pos:start="725:8" pos:end="725:17">IntrStatus</name></name> <operator pos:start="725:19" pos:end="725:20">|=</operator> <name pos:start="725:22" pos:end="725:25">RxOK</name></expr>;</expr_stmt>



    <if_stmt pos:start="729:5" pos:end="735:5"><if pos:start="729:5" pos:end="735:5">if <condition pos:start="729:8" pos:end="729:21">(<expr pos:start="729:9" pos:end="729:20"><name pos:start="729:9" pos:end="729:20">do_interrupt</name></expr>)</condition>

    <block pos:start="731:5" pos:end="735:5">{<block_content pos:start="733:9" pos:end="733:30">

        <expr_stmt pos:start="733:9" pos:end="733:30"><expr pos:start="733:9" pos:end="733:29"><call pos:start="733:9" pos:end="733:29"><name pos:start="733:9" pos:end="733:26">rtl8139_update_irq</name><argument_list pos:start="733:27" pos:end="733:29">(<argument pos:start="733:28" pos:end="733:28"><expr pos:start="733:28" pos:end="733:28"><name pos:start="733:28" pos:end="733:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="739:5" pos:end="739:17">return <expr pos:start="739:12" pos:end="739:16"><name pos:start="739:12" pos:end="739:16">size_</name></expr>;</return>

</block_content>}</block></function>
</unit>
