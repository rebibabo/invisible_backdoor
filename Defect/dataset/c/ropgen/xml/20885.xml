<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20885.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">i386_tr_init_disas_context</name><parameter_list pos:start="1:38" pos:end="3:52">(<parameter pos:start="1:39" pos:end="1:62"><decl pos:start="1:39" pos:end="1:62"><type pos:start="1:39" pos:end="1:62"><name pos:start="1:39" pos:end="1:54">DisasContextBase</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:62">dcbase</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:77"><decl pos:start="1:65" pos:end="1:77"><type pos:start="1:65" pos:end="1:77"><name pos:start="1:65" pos:end="1:72">CPUState</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:77">cpu</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:51"><decl pos:start="3:39" pos:end="3:51"><type pos:start="3:39" pos:end="3:51"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:51">max_insns</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="141:1">{<block_content pos:start="7:5" pos:end="139:21">

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">DisasContext</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">dc</name> <init pos:start="7:22" pos:end="7:63">= <expr pos:start="7:24" pos:end="7:63"><call pos:start="7:24" pos:end="7:63"><name pos:start="7:24" pos:end="7:35">container_of</name><argument_list pos:start="7:36" pos:end="7:63">(<argument pos:start="7:37" pos:end="7:42"><expr pos:start="7:37" pos:end="7:42"><name pos:start="7:37" pos:end="7:42">dcbase</name></expr></argument>, <argument pos:start="7:45" pos:end="7:56"><expr pos:start="7:45" pos:end="7:56"><name pos:start="7:45" pos:end="7:56">DisasContext</name></expr></argument>, <argument pos:start="7:59" pos:end="7:62"><expr pos:start="7:59" pos:end="7:62"><name pos:start="7:59" pos:end="7:62">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUX86State</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:35">= <expr pos:start="9:24" pos:end="9:35"><name pos:start="9:24" pos:end="9:35"><name pos:start="9:24" pos:end="9:26">cpu</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:35">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">flags</name> <init pos:start="11:20" pos:end="11:39">= <expr pos:start="11:22" pos:end="11:39"><name pos:start="11:22" pos:end="11:39"><name pos:start="11:22" pos:end="11:23">dc</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:29">base</name><operator pos:start="11:30" pos:end="11:30">.</operator><name pos:start="11:31" pos:end="11:32">tb</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:39">flags</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:48"><decl pos:start="13:5" pos:end="13:47"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:24">cs_base</name> <init pos:start="13:26" pos:end="13:47">= <expr pos:start="13:28" pos:end="13:47"><name pos:start="13:28" pos:end="13:47"><name pos:start="13:28" pos:end="13:29">dc</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:35">base</name><operator pos:start="13:36" pos:end="13:36">.</operator><name pos:start="13:37" pos:end="13:38">tb</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:47">cs_base</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:6">dc</name><operator pos:start="17:7" pos:end="17:8">-&gt;</operator><name pos:start="17:9" pos:end="17:10">pe</name></name> <operator pos:start="17:12" pos:end="17:12">=</operator> <operator pos:start="17:14" pos:end="17:14">(</operator><name pos:start="17:15" pos:end="17:19">flags</name> <operator pos:start="17:21" pos:end="17:22">&gt;&gt;</operator> <name pos:start="17:24" pos:end="17:34">HF_PE_SHIFT</name><operator pos:start="17:35" pos:end="17:35">)</operator> <operator pos:start="17:37" pos:end="17:37">&amp;</operator> <literal type="number" pos:start="17:39" pos:end="17:39">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:46"><expr pos:start="19:5" pos:end="19:45"><name pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:6">dc</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:14">code32</name></name> <operator pos:start="19:16" pos:end="19:16">=</operator> <operator pos:start="19:18" pos:end="19:18">(</operator><name pos:start="19:19" pos:end="19:23">flags</name> <operator pos:start="19:25" pos:end="19:26">&gt;&gt;</operator> <name pos:start="19:28" pos:end="19:40">HF_CS32_SHIFT</name><operator pos:start="19:41" pos:end="19:41">)</operator> <operator pos:start="19:43" pos:end="19:43">&amp;</operator> <literal type="number" pos:start="19:45" pos:end="19:45">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:6">dc</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:12">ss32</name></name> <operator pos:start="21:14" pos:end="21:14">=</operator> <operator pos:start="21:16" pos:end="21:16">(</operator><name pos:start="21:17" pos:end="21:21">flags</name> <operator pos:start="21:23" pos:end="21:24">&gt;&gt;</operator> <name pos:start="21:26" pos:end="21:38">HF_SS32_SHIFT</name><operator pos:start="21:39" pos:end="21:39">)</operator> <operator pos:start="21:41" pos:end="21:41">&amp;</operator> <literal type="number" pos:start="21:43" pos:end="21:43">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:48"><expr pos:start="23:5" pos:end="23:47"><name pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:6">dc</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:14">addseg</name></name> <operator pos:start="23:16" pos:end="23:16">=</operator> <operator pos:start="23:18" pos:end="23:18">(</operator><name pos:start="23:19" pos:end="23:23">flags</name> <operator pos:start="23:25" pos:end="23:26">&gt;&gt;</operator> <name pos:start="23:28" pos:end="23:42">HF_ADDSEG_SHIFT</name><operator pos:start="23:43" pos:end="23:43">)</operator> <operator pos:start="23:45" pos:end="23:45">&amp;</operator> <literal type="number" pos:start="23:47" pos:end="23:47">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:6">dc</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:12">f_st</name></name> <operator pos:start="25:14" pos:end="25:14">=</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:6">dc</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:12">vm86</name></name> <operator pos:start="27:14" pos:end="27:14">=</operator> <operator pos:start="27:16" pos:end="27:16">(</operator><name pos:start="27:17" pos:end="27:21">flags</name> <operator pos:start="27:23" pos:end="27:24">&gt;&gt;</operator> <name pos:start="27:26" pos:end="27:33">VM_SHIFT</name><operator pos:start="27:34" pos:end="27:34">)</operator> <operator pos:start="27:36" pos:end="27:36">&amp;</operator> <literal type="number" pos:start="27:38" pos:end="27:38">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:6">dc</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:11">cpl</name></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <operator pos:start="29:15" pos:end="29:15">(</operator><name pos:start="29:16" pos:end="29:20">flags</name> <operator pos:start="29:22" pos:end="29:23">&gt;&gt;</operator> <name pos:start="29:25" pos:end="29:36">HF_CPL_SHIFT</name><operator pos:start="29:37" pos:end="29:37">)</operator> <operator pos:start="29:39" pos:end="29:39">&amp;</operator> <literal type="number" pos:start="29:41" pos:end="29:41">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:6">dc</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:12">iopl</name></name> <operator pos:start="31:14" pos:end="31:14">=</operator> <operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:21">flags</name> <operator pos:start="31:23" pos:end="31:24">&gt;&gt;</operator> <name pos:start="31:26" pos:end="31:35">IOPL_SHIFT</name><operator pos:start="31:36" pos:end="31:36">)</operator> <operator pos:start="31:38" pos:end="31:38">&amp;</operator> <literal type="number" pos:start="31:40" pos:end="31:40">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:37"><expr pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:10">tf</name></name> <operator pos:start="33:12" pos:end="33:12">=</operator> <operator pos:start="33:14" pos:end="33:14">(</operator><name pos:start="33:15" pos:end="33:19">flags</name> <operator pos:start="33:21" pos:end="33:22">&gt;&gt;</operator> <name pos:start="33:24" pos:end="33:31">TF_SHIFT</name><operator pos:start="33:32" pos:end="33:32">)</operator> <operator pos:start="33:34" pos:end="33:34">&amp;</operator> <literal type="number" pos:start="33:36" pos:end="33:36">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:6">dc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:13">cc_op</name></name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:29">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:19">cc_op_dirty</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <name pos:start="37:23" pos:end="37:27">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:26"><expr pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:6">dc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:15">cs_base</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:25">cs_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:6">dc</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:21">popl_esp_hack</name></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:40">/* select memory access functions */</comment>

    <expr_stmt pos:start="45:5" pos:end="48:0"><expr pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:6">dc</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:17">mem_index</name></name> <operator pos:start="45:19" pos:end="45:19">=</operator> <literal type="number" pos:start="45:21" pos:end="45:21">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="47:1" pos:end="47:21">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:45"><name pos:start="49:5" pos:end="49:17"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:17">mem_index</name></name> <operator pos:start="49:19" pos:end="49:19">=</operator> <call pos:start="49:21" pos:end="49:45"><name pos:start="49:21" pos:end="49:33">cpu_mmu_index</name><argument_list pos:start="49:34" pos:end="49:45">(<argument pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">env</name></expr></argument>, <argument pos:start="49:40" pos:end="49:44"><expr pos:start="49:40" pos:end="49:44"><name pos:start="49:40" pos:end="49:44">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="53:5" pos:end="53:51"><expr pos:start="53:5" pos:end="53:50"><name pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:22">cpuid_features</name></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <name pos:start="53:26" pos:end="53:50"><name pos:start="53:26" pos:end="53:28">env</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:38">features</name><index pos:start="53:39" pos:end="53:50">[<expr pos:start="53:40" pos:end="53:49"><name pos:start="53:40" pos:end="53:49">FEAT_1_EDX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:55"><expr pos:start="55:5" pos:end="55:54"><name pos:start="55:5" pos:end="55:26"><name pos:start="55:5" pos:end="55:6">dc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:26">cpuid_ext_features</name></name> <operator pos:start="55:28" pos:end="55:28">=</operator> <name pos:start="55:30" pos:end="55:54"><name pos:start="55:30" pos:end="55:32">env</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:42">features</name><index pos:start="55:43" pos:end="55:54">[<expr pos:start="55:44" pos:end="55:53"><name pos:start="55:44" pos:end="55:53">FEAT_1_ECX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:64"><expr pos:start="57:5" pos:end="57:63"><name pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:27">cpuid_ext2_features</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:63"><name pos:start="57:31" pos:end="57:33">env</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:43">features</name><index pos:start="57:44" pos:end="57:63">[<expr pos:start="57:45" pos:end="57:62"><name pos:start="57:45" pos:end="57:62">FEAT_8000_0001_EDX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:64"><expr pos:start="59:5" pos:end="59:63"><name pos:start="59:5" pos:end="59:27"><name pos:start="59:5" pos:end="59:6">dc</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:27">cpuid_ext3_features</name></name> <operator pos:start="59:29" pos:end="59:29">=</operator> <name pos:start="59:31" pos:end="59:63"><name pos:start="59:31" pos:end="59:33">env</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:43">features</name><index pos:start="59:44" pos:end="59:63">[<expr pos:start="59:45" pos:end="59:62"><name pos:start="59:45" pos:end="59:62">FEAT_8000_0001_ECX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:61"><expr pos:start="61:5" pos:end="61:60"><name pos:start="61:5" pos:end="61:30"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:30">cpuid_7_0_ebx_features</name></name> <operator pos:start="61:32" pos:end="61:32">=</operator> <name pos:start="61:34" pos:end="61:60"><name pos:start="61:34" pos:end="61:36">env</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:46">features</name><index pos:start="61:47" pos:end="61:60">[<expr pos:start="61:48" pos:end="61:59"><name pos:start="61:48" pos:end="61:59">FEAT_7_0_EBX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="66:0"><expr pos:start="63:5" pos:end="63:56"><name pos:start="63:5" pos:end="63:28"><name pos:start="63:5" pos:end="63:6">dc</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:28">cpuid_xsave_features</name></name> <operator pos:start="63:30" pos:end="63:30">=</operator> <name pos:start="63:32" pos:end="63:56"><name pos:start="63:32" pos:end="63:34">env</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:44">features</name><index pos:start="63:45" pos:end="63:56">[<expr pos:start="63:46" pos:end="63:55"><name pos:start="63:46" pos:end="63:55">FEAT_XSAVE</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="65:1" pos:end="65:20">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:20">TARGET_X86_64</name></cpp:ifdef>

    <expr_stmt pos:start="67:5" pos:end="67:42"><expr pos:start="67:5" pos:end="67:41"><name pos:start="67:5" pos:end="67:11"><name pos:start="67:5" pos:end="67:6">dc</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:11">lma</name></name> <operator pos:start="67:13" pos:end="67:13">=</operator> <operator pos:start="67:15" pos:end="67:15">(</operator><name pos:start="67:16" pos:end="67:20">flags</name> <operator pos:start="67:22" pos:end="67:23">&gt;&gt;</operator> <name pos:start="67:25" pos:end="67:36">HF_LMA_SHIFT</name><operator pos:start="67:37" pos:end="67:37">)</operator> <operator pos:start="67:39" pos:end="67:39">&amp;</operator> <literal type="number" pos:start="67:41" pos:end="67:41">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="72:0"><expr pos:start="69:5" pos:end="69:45"><name pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:6">dc</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:14">code64</name></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <operator pos:start="69:18" pos:end="69:18">(</operator><name pos:start="69:19" pos:end="69:23">flags</name> <operator pos:start="69:25" pos:end="69:26">&gt;&gt;</operator> <name pos:start="69:28" pos:end="69:40">HF_CS64_SHIFT</name><operator pos:start="69:41" pos:end="69:41">)</operator> <operator pos:start="69:43" pos:end="69:43">&amp;</operator> <literal type="number" pos:start="69:45" pos:end="69:45">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="73:5" pos:end="73:22"><expr pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:6">dc</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:13">flags</name></name> <operator pos:start="73:15" pos:end="73:15">=</operator> <name pos:start="73:17" pos:end="73:21">flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="77:51"><expr pos:start="75:5" pos:end="77:50"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:6">dc</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:15">jmp_opt</name></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <operator pos:start="75:19" pos:end="75:19">!</operator><operator pos:start="75:20" pos:end="75:20">(</operator><name pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:22">dc</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:26">tf</name></name> <operator pos:start="75:28" pos:end="75:29">||</operator> <name pos:start="75:31" pos:end="75:57"><name pos:start="75:31" pos:end="75:32">dc</name><operator pos:start="75:33" pos:end="75:34">-&gt;</operator><name pos:start="75:35" pos:end="75:38">base</name><operator pos:start="75:39" pos:end="75:39">.</operator><name pos:start="75:40" pos:end="75:57">singlestep_enabled</name></name> <operator pos:start="75:59" pos:end="75:60">||</operator>

                    <operator pos:start="77:21" pos:end="77:21">(</operator><name pos:start="77:22" pos:end="77:26">flags</name> <operator pos:start="77:28" pos:end="77:28">&amp;</operator> <name pos:start="77:30" pos:end="77:48">HF_INHIBIT_IRQ_MASK</name><operator pos:start="77:49" pos:end="77:49">)</operator><operator pos:start="77:50" pos:end="77:50">)</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="79:5" pos:end="97:7">/* Do not optimize repz jumps at all in icount mode, because

       rep movsS instructions are execured with different paths

       in !repz_opt and repz_opt modes. The first one was used

       always except single step mode. And this setting

       disables jumps optimization and control paths become

       equivalent in run and single step modes.

       Now there will be no jump optimization for repz in

       record/replay modes and there will always be an

       additional step for ecx=0 when icount is enabled.

     */</comment>

    <expr_stmt pos:start="99:5" pos:end="110:0"><expr pos:start="99:5" pos:end="99:73"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:6">dc</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:16">repz_opt</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <operator pos:start="99:20" pos:end="99:20">!</operator><name pos:start="99:21" pos:end="99:31"><name pos:start="99:21" pos:end="99:22">dc</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:31">jmp_opt</name></name> <operator pos:start="99:33" pos:end="99:34">&amp;&amp;</operator> <operator pos:start="99:36" pos:end="99:36">!</operator><operator pos:start="99:37" pos:end="99:37">(</operator><name pos:start="99:38" pos:end="99:56"><name pos:start="99:38" pos:end="99:39">dc</name><operator pos:start="99:40" pos:end="99:41">-&gt;</operator><name pos:start="99:42" pos:end="99:45">base</name><operator pos:start="99:46" pos:end="99:46">.</operator><name pos:start="99:47" pos:end="99:48">tb</name><operator pos:start="99:49" pos:end="99:50">-&gt;</operator><name pos:start="99:51" pos:end="99:56">cflags</name></name> <operator pos:start="99:58" pos:end="99:58">&amp;</operator> <name pos:start="99:60" pos:end="99:72">CF_USE_ICOUNT</name><operator pos:start="99:73" pos:end="99:73">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="101:1" pos:end="101:5">#<cpp:directive pos:start="101:2" pos:end="101:3">if</cpp:directive> <expr pos:start="101:5" pos:end="101:5"><literal type="number" pos:start="101:5" pos:end="101:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="103:5" pos:end="103:28">/* check addseg logic */</comment>

    if (!dc-&gt;addseg &amp;&amp; (dc-&gt;vm86 || !dc-&gt;pe || !dc-&gt;code32))

        printf("ERROR addseg\n");

<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="113:5" pos:end="113:28"><expr pos:start="113:5" pos:end="113:27"><name pos:start="113:5" pos:end="113:10">cpu_T0</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <call pos:start="113:14" pos:end="113:27"><name pos:start="113:14" pos:end="113:25">tcg_temp_new</name><argument_list pos:start="113:26" pos:end="113:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:28"><expr pos:start="115:5" pos:end="115:27"><name pos:start="115:5" pos:end="115:10">cpu_T1</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <call pos:start="115:14" pos:end="115:27"><name pos:start="115:14" pos:end="115:25">tcg_temp_new</name><argument_list pos:start="115:26" pos:end="115:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:28"><expr pos:start="117:5" pos:end="117:27"><name pos:start="117:5" pos:end="117:10">cpu_A0</name> <operator pos:start="117:12" pos:end="117:12">=</operator> <call pos:start="117:14" pos:end="117:27"><name pos:start="117:14" pos:end="117:25">tcg_temp_new</name><argument_list pos:start="117:26" pos:end="117:27">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:30"><expr pos:start="121:5" pos:end="121:29"><name pos:start="121:5" pos:end="121:12">cpu_tmp0</name> <operator pos:start="121:14" pos:end="121:14">=</operator> <call pos:start="121:16" pos:end="121:29"><name pos:start="121:16" pos:end="121:27">tcg_temp_new</name><argument_list pos:start="121:28" pos:end="121:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:38"><expr pos:start="123:5" pos:end="123:37"><name pos:start="123:5" pos:end="123:16">cpu_tmp1_i64</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <call pos:start="123:20" pos:end="123:37"><name pos:start="123:20" pos:end="123:35">tcg_temp_new_i64</name><argument_list pos:start="123:36" pos:end="123:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:38"><expr pos:start="125:5" pos:end="125:37"><name pos:start="125:5" pos:end="125:16">cpu_tmp2_i32</name> <operator pos:start="125:18" pos:end="125:18">=</operator> <call pos:start="125:20" pos:end="125:37"><name pos:start="125:20" pos:end="125:35">tcg_temp_new_i32</name><argument_list pos:start="125:36" pos:end="125:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:38"><expr pos:start="127:5" pos:end="127:37"><name pos:start="127:5" pos:end="127:16">cpu_tmp3_i32</name> <operator pos:start="127:18" pos:end="127:18">=</operator> <call pos:start="127:20" pos:end="127:37"><name pos:start="127:20" pos:end="127:35">tcg_temp_new_i32</name><argument_list pos:start="127:36" pos:end="127:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:30"><expr pos:start="129:5" pos:end="129:29"><name pos:start="129:5" pos:end="129:12">cpu_tmp4</name> <operator pos:start="129:14" pos:end="129:14">=</operator> <call pos:start="129:16" pos:end="129:29"><name pos:start="129:16" pos:end="129:27">tcg_temp_new</name><argument_list pos:start="129:28" pos:end="129:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:34"><expr pos:start="131:5" pos:end="131:33"><name pos:start="131:5" pos:end="131:12">cpu_ptr0</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <call pos:start="131:16" pos:end="131:33"><name pos:start="131:16" pos:end="131:31">tcg_temp_new_ptr</name><argument_list pos:start="131:32" pos:end="131:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:34"><expr pos:start="133:5" pos:end="133:33"><name pos:start="133:5" pos:end="133:12">cpu_ptr1</name> <operator pos:start="133:14" pos:end="133:14">=</operator> <call pos:start="133:16" pos:end="133:33"><name pos:start="133:16" pos:end="133:31">tcg_temp_new_ptr</name><argument_list pos:start="133:32" pos:end="133:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:39"><expr pos:start="135:5" pos:end="135:38"><name pos:start="135:5" pos:end="135:15">cpu_cc_srcT</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <call pos:start="135:19" pos:end="135:38"><name pos:start="135:19" pos:end="135:36">tcg_temp_local_new</name><argument_list pos:start="135:37" pos:end="135:38">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="139:5" pos:end="139:21">return <expr pos:start="139:12" pos:end="139:20"><name pos:start="139:12" pos:end="139:20">max_insns</name></expr>;</return>

</block_content>}</block></function>
</unit>
