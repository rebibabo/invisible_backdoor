<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7085.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">msix_init_exclusive_bar</name><parameter_list pos:start="1:28" pos:end="3:43">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:37">PCIDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:67"><decl pos:start="1:45" pos:end="1:67"><type pos:start="1:45" pos:end="1:67"><name pos:start="1:45" pos:end="1:52">unsigned</name> <name pos:start="1:54" pos:end="1:58">short</name></type> <name pos:start="1:60" pos:end="1:67">nentries</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:35">uint8_t</name></type> <name pos:start="3:37" pos:end="3:42">bar_nr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:13">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="30:0"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:14">name</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="21:7">/*

     * Migration compatibility dictates that this remains a 4k

     * BAR with the vector table in the lower half and PBA in

     * the upper half.  Do not use these elsewhere!

     */</comment>

<cpp:define pos:start="23:1" pos:end="23:36">#<cpp:directive pos:start="23:2" pos:end="23:7">define</cpp:directive> <cpp:macro pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:31">MSIX_EXCLUSIVE_BAR_SIZE</name></cpp:macro> <cpp:value pos:start="23:33" pos:end="23:36">4096</cpp:value></cpp:define>

<cpp:define pos:start="25:1" pos:end="25:41">#<cpp:directive pos:start="25:2" pos:end="25:7">define</cpp:directive> <cpp:macro pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:39">MSIX_EXCLUSIVE_BAR_TABLE_OFFSET</name></cpp:macro> <cpp:value pos:start="25:41" pos:end="25:41">0</cpp:value></cpp:define>

<cpp:define pos:start="27:1" pos:end="27:67">#<cpp:directive pos:start="27:2" pos:end="27:7">define</cpp:directive> <cpp:macro pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:37">MSIX_EXCLUSIVE_BAR_PBA_OFFSET</name></cpp:macro> <cpp:value pos:start="27:39" pos:end="27:67">(MSIX_EXCLUSIVE_BAR_SIZE / 2)</cpp:value></cpp:define>

<cpp:define pos:start="29:1" pos:end="29:35">#<cpp:directive pos:start="29:2" pos:end="29:7">define</cpp:directive> <cpp:macro pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:33">MSIX_EXCLUSIVE_CAP_OFFSET</name></cpp:macro> <cpp:value pos:start="29:35" pos:end="29:35">0</cpp:value></cpp:define>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:71">(<expr pos:start="33:9" pos:end="33:70"><name pos:start="33:9" pos:end="33:16">nentries</name> <operator pos:start="33:18" pos:end="33:18">*</operator> <name pos:start="33:20" pos:end="33:38">PCI_MSIX_ENTRY_SIZE</name> <operator pos:start="33:40" pos:end="33:40">&gt;</operator> <name pos:start="33:42" pos:end="33:70">MSIX_EXCLUSIVE_BAR_PBA_OFFSET</name></expr>)</condition> <block pos:start="33:73" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:23">

        <return pos:start="35:9" pos:end="35:23">return <expr pos:start="35:16" pos:end="35:22"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:49"><expr pos:start="41:5" pos:end="41:48"><name pos:start="41:5" pos:end="41:8">name</name> <operator pos:start="41:10" pos:end="41:10">=</operator> <call pos:start="41:12" pos:end="41:48"><name pos:start="41:12" pos:end="41:26">g_strdup_printf</name><argument_list pos:start="41:27" pos:end="41:48">(<argument pos:start="41:28" pos:end="41:36"><expr pos:start="41:28" pos:end="41:36"><literal type="string" pos:start="41:28" pos:end="41:36">"%s-msix"</literal></expr></argument>, <argument pos:start="41:39" pos:end="41:47"><expr pos:start="41:39" pos:end="41:47"><name pos:start="41:39" pos:end="41:47"><name pos:start="41:39" pos:end="41:41">dev</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:47">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:93"><expr pos:start="43:5" pos:end="43:92"><call pos:start="43:5" pos:end="43:92"><name pos:start="43:5" pos:end="43:22">memory_region_init</name><argument_list pos:start="43:23" pos:end="43:92">(<argument pos:start="43:24" pos:end="43:47"><expr pos:start="43:24" pos:end="43:47"><operator pos:start="43:24" pos:end="43:24">&amp;</operator><name pos:start="43:25" pos:end="43:47"><name pos:start="43:25" pos:end="43:27">dev</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:47">msix_exclusive_bar</name></name></expr></argument>, <argument pos:start="43:50" pos:end="43:60"><expr pos:start="43:50" pos:end="43:60"><call pos:start="43:50" pos:end="43:60"><name pos:start="43:50" pos:end="43:55">OBJECT</name><argument_list pos:start="43:56" pos:end="43:60">(<argument pos:start="43:57" pos:end="43:59"><expr pos:start="43:57" pos:end="43:59"><name pos:start="43:57" pos:end="43:59">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:63" pos:end="43:66"><expr pos:start="43:63" pos:end="43:66"><name pos:start="43:63" pos:end="43:66">name</name></expr></argument>, <argument pos:start="43:69" pos:end="43:91"><expr pos:start="43:69" pos:end="43:91"><name pos:start="43:69" pos:end="43:91">MSIX_EXCLUSIVE_BAR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:17"><expr pos:start="45:5" pos:end="45:16"><call pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:10">g_free</name><argument_list pos:start="45:11" pos:end="45:16">(<argument pos:start="45:12" pos:end="45:15"><expr pos:start="45:12" pos:end="45:15"><name pos:start="45:12" pos:end="45:15">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="55:47"><expr pos:start="49:5" pos:end="55:46"><name pos:start="49:5" pos:end="49:7">ret</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="55:46"><name pos:start="49:11" pos:end="49:19">msix_init</name><argument_list pos:start="49:20" pos:end="55:46">(<argument pos:start="49:21" pos:end="49:23"><expr pos:start="49:21" pos:end="49:23"><name pos:start="49:21" pos:end="49:23">dev</name></expr></argument>, <argument pos:start="49:26" pos:end="49:33"><expr pos:start="49:26" pos:end="49:33"><name pos:start="49:26" pos:end="49:33">nentries</name></expr></argument>, <argument pos:start="49:36" pos:end="49:59"><expr pos:start="49:36" pos:end="49:59"><operator pos:start="49:36" pos:end="49:36">&amp;</operator><name pos:start="49:37" pos:end="49:59"><name pos:start="49:37" pos:end="49:39">dev</name><operator pos:start="49:40" pos:end="49:41">-&gt;</operator><name pos:start="49:42" pos:end="49:59">msix_exclusive_bar</name></name></expr></argument>, <argument pos:start="49:62" pos:end="49:67"><expr pos:start="49:62" pos:end="49:67"><name pos:start="49:62" pos:end="49:67">bar_nr</name></expr></argument>,

                    <argument pos:start="51:21" pos:end="51:51"><expr pos:start="51:21" pos:end="51:51"><name pos:start="51:21" pos:end="51:51">MSIX_EXCLUSIVE_BAR_TABLE_OFFSET</name></expr></argument>, <argument pos:start="51:54" pos:end="51:77"><expr pos:start="51:54" pos:end="51:77"><operator pos:start="51:54" pos:end="51:54">&amp;</operator><name pos:start="51:55" pos:end="51:77"><name pos:start="51:55" pos:end="51:57">dev</name><operator pos:start="51:58" pos:end="51:59">-&gt;</operator><name pos:start="51:60" pos:end="51:77">msix_exclusive_bar</name></name></expr></argument>,

                    <argument pos:start="53:21" pos:end="53:26"><expr pos:start="53:21" pos:end="53:26"><name pos:start="53:21" pos:end="53:26">bar_nr</name></expr></argument>, <argument pos:start="53:29" pos:end="53:57"><expr pos:start="53:29" pos:end="53:57"><name pos:start="53:29" pos:end="53:57">MSIX_EXCLUSIVE_BAR_PBA_OFFSET</name></expr></argument>,

                    <argument pos:start="55:21" pos:end="55:45"><expr pos:start="55:21" pos:end="55:45"><name pos:start="55:21" pos:end="55:45">MSIX_EXCLUSIVE_CAP_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:12">(<expr pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">ret</name></expr>)</condition> <block pos:start="57:14" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:19">

        <return pos:start="59:9" pos:end="59:19">return <expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="67:47"><expr pos:start="65:5" pos:end="67:46"><call pos:start="65:5" pos:end="67:46"><name pos:start="65:5" pos:end="65:20">pci_register_bar</name><argument_list pos:start="65:21" pos:end="67:46">(<argument pos:start="65:22" pos:end="65:24"><expr pos:start="65:22" pos:end="65:24"><name pos:start="65:22" pos:end="65:24">dev</name></expr></argument>, <argument pos:start="65:27" pos:end="65:32"><expr pos:start="65:27" pos:end="65:32"><name pos:start="65:27" pos:end="65:32">bar_nr</name></expr></argument>, <argument pos:start="65:35" pos:end="65:63"><expr pos:start="65:35" pos:end="65:63"><name pos:start="65:35" pos:end="65:63">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>,

                     <argument pos:start="67:22" pos:end="67:45"><expr pos:start="67:22" pos:end="67:45"><operator pos:start="67:22" pos:end="67:22">&amp;</operator><name pos:start="67:23" pos:end="67:45"><name pos:start="67:23" pos:end="67:25">dev</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:45">msix_exclusive_bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
