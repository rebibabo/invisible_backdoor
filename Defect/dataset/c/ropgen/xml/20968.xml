<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20968.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">scsi_flush_complete</name><parameter_list pos:start="1:32" pos:end="1:55">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type> <name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:54"><decl pos:start="1:48" pos:end="1:54"><type pos:start="1:48" pos:end="1:54"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:54">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:5">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:42">= <expr pos:start="5:22" pos:end="5:42"><operator pos:start="5:22" pos:end="5:22">(</operator><name pos:start="5:23" pos:end="5:33">SCSIDiskReq</name> <operator pos:start="5:35" pos:end="5:35">*</operator><operator pos:start="5:36" pos:end="5:36">)</operator><name pos:start="5:37" pos:end="5:42">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:65">= <expr pos:start="7:24" pos:end="7:65"><call pos:start="7:24" pos:end="7:65"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:65">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:64"><expr pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:55">r</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:60">req</name><operator pos:start="7:61" pos:end="7:61">.</operator><name pos:start="7:62" pos:end="7:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:29">(<expr pos:start="11:9" pos:end="11:28"><name pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:9">r</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:14">req</name><operator pos:start="11:15" pos:end="11:15">.</operator><name pos:start="11:16" pos:end="11:20">aiocb</name></name> <operator pos:start="11:22" pos:end="11:23">!=</operator> <name pos:start="11:25" pos:end="11:28">NULL</name></expr>)</condition> <block pos:start="11:31" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:50">

        <expr_stmt pos:start="13:9" pos:end="13:28"><expr pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:9">r</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:14">req</name><operator pos:start="13:15" pos:end="13:15">.</operator><name pos:start="13:16" pos:end="13:20">aiocb</name></name> <operator pos:start="13:22" pos:end="13:22">=</operator> <name pos:start="13:24" pos:end="13:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:50"><expr pos:start="15:9" pos:end="15:49"><call pos:start="15:9" pos:end="15:49"><name pos:start="15:9" pos:end="15:22">bdrv_acct_done</name><argument_list pos:start="15:23" pos:end="15:49">(<argument pos:start="15:24" pos:end="15:38"><expr pos:start="15:24" pos:end="15:38"><name pos:start="15:24" pos:end="15:38"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:30">qdev</name><operator pos:start="15:31" pos:end="15:31">.</operator><name pos:start="15:32" pos:end="15:35">conf</name><operator pos:start="15:36" pos:end="15:36">.</operator><name pos:start="15:37" pos:end="15:38">bs</name></name></expr></argument>, <argument pos:start="15:41" pos:end="15:48"><expr pos:start="15:41" pos:end="15:48"><operator pos:start="15:41" pos:end="15:41">&amp;</operator><name pos:start="15:42" pos:end="15:48"><name pos:start="15:42" pos:end="15:42">r</name><operator pos:start="15:43" pos:end="15:44">-&gt;</operator><name pos:start="15:45" pos:end="15:48">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition> <block pos:start="21:18" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:9">

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:42">(<expr pos:start="23:13" pos:end="23:41"><call pos:start="23:13" pos:end="23:41"><name pos:start="23:13" pos:end="23:32">scsi_handle_rw_error</name><argument_list pos:start="23:33" pos:end="23:41">(<argument pos:start="23:34" pos:end="23:34"><expr pos:start="23:34" pos:end="23:34"><name pos:start="23:34" pos:end="23:34">r</name></expr></argument>, <argument pos:start="23:37" pos:end="23:40"><expr pos:start="23:37" pos:end="23:40"><operator pos:start="23:37" pos:end="23:37">-</operator><name pos:start="23:38" pos:end="23:40">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:44" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:22">

            <goto pos:start="25:13" pos:end="25:22">goto <name pos:start="25:18" pos:end="25:21">done</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:37"><expr pos:start="33:5" pos:end="33:36"><call pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:21">scsi_req_complete</name><argument_list pos:start="33:22" pos:end="33:36">(<argument pos:start="33:23" pos:end="33:29"><expr pos:start="33:23" pos:end="33:29"><operator pos:start="33:23" pos:end="33:23">&amp;</operator><name pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:24">r</name><operator pos:start="33:25" pos:end="33:26">-&gt;</operator><name pos:start="33:27" pos:end="33:29">req</name></name></expr></argument>, <argument pos:start="33:32" pos:end="33:35"><expr pos:start="33:32" pos:end="33:35"><name pos:start="33:32" pos:end="33:35">GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="37:1" pos:end="37:5"><name pos:start="37:1" pos:end="37:4">done</name>:</label>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:28">(<expr pos:start="39:9" pos:end="39:27"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:27"><name pos:start="39:10" pos:end="39:10">r</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:15">req</name><operator pos:start="39:16" pos:end="39:16">.</operator><name pos:start="39:17" pos:end="39:27">io_canceled</name></name></expr>)</condition> <block pos:start="39:30" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:32">

        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><call pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:22">scsi_req_unref</name><argument_list pos:start="41:23" pos:end="41:31">(<argument pos:start="41:24" pos:end="41:30"><expr pos:start="41:24" pos:end="41:30"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:30"><name pos:start="41:25" pos:end="41:25">r</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:30">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
