<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9331.c" pos:tabs="8"><function pos:start="1:1" pos:end="419:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">ppc_prep_init</name><parameter_list pos:start="1:26" pos:end="1:52">(<parameter pos:start="1:27" pos:end="1:51"><decl pos:start="1:27" pos:end="1:51"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:45">QEMUMachineInitArgs</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="419:1">{<block_content pos:start="5:5" pos:end="417:71">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:53">= <expr pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:37">args</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:55">= <expr pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:38">args</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:46">= <expr pos:start="15:31" pos:end="15:46"><name pos:start="15:31" pos:end="15:46"><name pos:start="15:31" pos:end="15:34">args</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:46">boot_order</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">sysmem</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:44">get_system_memory</name><argument_list pos:start="17:45" pos:end="17:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">PowerPCCPU</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">cpu</name> <init pos:start="19:21" pos:end="19:26">= <expr pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUPPCState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">env</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">nvram_t</name></type> <name pos:start="23:13" pos:end="23:17">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:15">M48t59State</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:23">m48t59</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="34:0"><decl pos:start="27:5" pos:end="27:48"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:14">PortioList</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:25">port_list</name> <init pos:start="27:27" pos:end="27:48">= <expr pos:start="27:29" pos:end="27:48"><call pos:start="27:29" pos:end="27:48"><name pos:start="27:29" pos:end="27:33">g_new</name><argument_list pos:start="27:34" pos:end="27:48">(<argument pos:start="27:35" pos:end="27:44"><expr pos:start="27:35" pos:end="27:44"><name pos:start="27:35" pos:end="27:44">PortioList</name></expr></argument>, <argument pos:start="27:47" pos:end="27:47"><expr pos:start="27:47" pos:end="27:47"><literal type="number" pos:start="27:47" pos:end="27:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="29:1" pos:end="29:5">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:5"><literal type="number" pos:start="29:5" pos:end="29:5">0</literal></expr></cpp:if>

    MemoryRegion *xcsr = g_new(MemoryRegion, 1);

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="35:5" pos:end="35:32"><decl pos:start="35:5" pos:end="35:18"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:18">linux_boot</name></decl>, <decl pos:start="35:21" pos:end="35:21"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:21" pos:end="35:21">i</name></decl>, <decl pos:start="35:24" pos:end="35:31"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:24" pos:end="35:31">nb_nics1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:47"><decl pos:start="37:5" pos:end="37:46"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:16">MemoryRegion</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:21">ram</name> <init pos:start="37:23" pos:end="37:46">= <expr pos:start="37:25" pos:end="37:46"><call pos:start="37:25" pos:end="37:46"><name pos:start="37:25" pos:end="37:29">g_new</name><argument_list pos:start="37:30" pos:end="37:46">(<argument pos:start="37:31" pos:end="37:42"><expr pos:start="37:31" pos:end="37:42"><name pos:start="37:31" pos:end="37:42">MemoryRegion</name></expr></argument>, <argument pos:start="37:45" pos:end="37:45"><expr pos:start="37:45" pos:end="37:45"><literal type="number" pos:start="37:45" pos:end="37:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:47"><decl pos:start="39:5" pos:end="39:46"><type pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:16">MemoryRegion</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:21">vga</name> <init pos:start="39:23" pos:end="39:46">= <expr pos:start="39:25" pos:end="39:46"><call pos:start="39:25" pos:end="39:46"><name pos:start="39:25" pos:end="39:29">g_new</name><argument_list pos:start="39:30" pos:end="39:46">(<argument pos:start="39:31" pos:end="39:42"><expr pos:start="39:31" pos:end="39:42"><name pos:start="39:31" pos:end="39:42">MemoryRegion</name></expr></argument>, <argument pos:start="39:45" pos:end="39:45"><expr pos:start="39:45" pos:end="39:45"><literal type="number" pos:start="39:45" pos:end="39:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:38"><decl pos:start="41:5" pos:end="41:24"><type pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:12">uint32_t</name></type> <name pos:start="41:14" pos:end="41:24">kernel_base</name></decl>, <decl pos:start="41:27" pos:end="41:37"><type ref="prev" pos:start="41:5" pos:end="41:12"/><name pos:start="41:27" pos:end="41:37">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:34"><decl pos:start="43:5" pos:end="43:20"><type pos:start="43:5" pos:end="43:8"><name pos:start="43:5" pos:end="43:8">long</name></type> <name pos:start="43:10" pos:end="43:20">kernel_size</name></decl>, <decl pos:start="43:23" pos:end="43:33"><type ref="prev" pos:start="43:5" pos:end="43:8"/><name pos:start="43:23" pos:end="43:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:21"><decl pos:start="45:5" pos:end="45:20"><type pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:15">DeviceState</name> <modifier pos:start="45:17" pos:end="45:17">*</modifier></type><name pos:start="45:18" pos:end="45:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:26"><decl pos:start="47:5" pos:end="47:25"><type pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:16">PCIHostState</name> <modifier pos:start="47:18" pos:end="47:18">*</modifier></type><name pos:start="47:19" pos:end="47:25">pcihost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:20"><decl pos:start="49:5" pos:end="49:19"><type pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:10">PCIBus</name> <modifier pos:start="49:12" pos:end="49:12">*</modifier></type><name pos:start="49:13" pos:end="49:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:19"><decl pos:start="51:5" pos:end="51:18"><type pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:13">PCIDevice</name> <modifier pos:start="51:15" pos:end="51:15">*</modifier></type><name pos:start="51:16" pos:end="51:18">pci</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:20"><decl pos:start="53:5" pos:end="53:19"><type pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:10">ISABus</name> <modifier pos:start="53:12" pos:end="53:12">*</modifier></type><name pos:start="53:13" pos:end="53:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:19"><decl pos:start="55:5" pos:end="55:18"><type pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:13">ISADevice</name> <modifier pos:start="55:15" pos:end="55:15">*</modifier></type><name pos:start="55:16" pos:end="55:18">isa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:27"><decl pos:start="57:5" pos:end="57:26"><type pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:12">qemu_irq</name> <modifier pos:start="57:14" pos:end="57:14">*</modifier></type><name pos:start="57:15" pos:end="57:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:24"><decl pos:start="59:5" pos:end="59:23"><type pos:start="59:5" pos:end="59:7"><name pos:start="59:5" pos:end="59:7">int</name></type> <name pos:start="59:9" pos:end="59:23">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:46"><decl pos:start="61:5" pos:end="61:45"><type pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:13">DriveInfo</name> <modifier pos:start="61:15" pos:end="61:15">*</modifier></type><name pos:start="61:16" pos:end="61:45"><name pos:start="61:16" pos:end="61:17">hd</name><index pos:start="61:18" pos:end="61:45">[<expr pos:start="61:19" pos:end="61:44"><name pos:start="61:19" pos:end="61:29">MAX_IDE_BUS</name> <operator pos:start="61:31" pos:end="61:31">*</operator> <name pos:start="61:33" pos:end="61:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:43"><expr pos:start="65:5" pos:end="65:42"><name pos:start="65:5" pos:end="65:11">sysctrl</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:42"><name pos:start="65:15" pos:end="65:23">g_malloc0</name><argument_list pos:start="65:24" pos:end="65:42">(<argument pos:start="65:25" pos:end="65:41"><expr pos:start="65:25" pos:end="65:41"><sizeof pos:start="65:25" pos:end="65:41">sizeof<argument_list pos:start="65:31" pos:end="65:41">(<argument pos:start="65:32" pos:end="65:40"><expr pos:start="65:32" pos:end="65:40"><name pos:start="65:32" pos:end="65:40">sysctrl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:14">linux_boot</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <operator pos:start="69:18" pos:end="69:18">(</operator><name pos:start="69:19" pos:end="69:33">kernel_filename</name> <operator pos:start="69:35" pos:end="69:36">!=</operator> <name pos:start="69:38" pos:end="69:41">NULL</name><operator pos:start="69:42" pos:end="69:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:19">/* init CPUs */</comment>

    <if_stmt pos:start="75:5" pos:end="77:26"><if pos:start="75:5" pos:end="77:26">if <condition pos:start="75:8" pos:end="75:26">(<expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:17">cpu_model</name> <operator pos:start="75:19" pos:end="75:20">==</operator> <name pos:start="75:22" pos:end="75:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:26"><block_content pos:start="77:9" pos:end="77:26">

        <expr_stmt pos:start="77:9" pos:end="77:26"><expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:17">cpu_model</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="string" pos:start="77:21" pos:end="77:25">"602"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="79:5" pos:end="111:5">for <control pos:start="79:9" pos:end="79:34">(<init pos:start="79:10" pos:end="79:15"><expr pos:start="79:10" pos:end="79:14"><name pos:start="79:10" pos:end="79:10">i</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>;</init> <condition pos:start="79:17" pos:end="79:29"><expr pos:start="79:17" pos:end="79:28"><name pos:start="79:17" pos:end="79:17">i</name> <operator pos:start="79:19" pos:end="79:19">&lt;</operator> <name pos:start="79:21" pos:end="79:28">smp_cpus</name></expr>;</condition> <incr pos:start="79:31" pos:end="79:33"><expr pos:start="79:31" pos:end="79:33"><name pos:start="79:31" pos:end="79:31">i</name><operator pos:start="79:32" pos:end="79:33">++</operator></expr></incr>)</control> <block pos:start="79:36" pos:end="111:5">{<block_content pos:start="81:9" pos:end="109:49">

        <expr_stmt pos:start="81:9" pos:end="81:38"><expr pos:start="81:9" pos:end="81:37"><name pos:start="81:9" pos:end="81:11">cpu</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:37"><name pos:start="81:15" pos:end="81:26">cpu_ppc_init</name><argument_list pos:start="81:27" pos:end="81:37">(<argument pos:start="81:28" pos:end="81:36"><expr pos:start="81:28" pos:end="81:36"><name pos:start="81:28" pos:end="81:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:24">(<expr pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:15">cpu</name> <operator pos:start="83:17" pos:end="83:18">==</operator> <name pos:start="83:20" pos:end="83:23">NULL</name></expr>)</condition> <block pos:start="83:26" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:20">

            <expr_stmt pos:start="85:13" pos:end="85:71"><expr pos:start="85:13" pos:end="85:70"><call pos:start="85:13" pos:end="85:70"><name pos:start="85:13" pos:end="85:19">fprintf</name><argument_list pos:start="85:20" pos:end="85:70">(<argument pos:start="85:21" pos:end="85:26"><expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">stderr</name></expr></argument>, <argument pos:start="85:29" pos:end="85:69"><expr pos:start="85:29" pos:end="85:69"><literal type="string" pos:start="85:29" pos:end="85:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><call pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:16">exit</name><argument_list pos:start="87:17" pos:end="87:19">(<argument pos:start="87:18" pos:end="87:18"><expr pos:start="87:18" pos:end="87:18"><literal type="number" pos:start="87:18" pos:end="87:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:24"><expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:11">env</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <operator pos:start="91:15" pos:end="91:15">&amp;</operator><name pos:start="91:16" pos:end="91:23"><name pos:start="91:16" pos:end="91:18">cpu</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:23">env</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="95:9" pos:end="107:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:46">(<expr pos:start="95:13" pos:end="95:45"><name pos:start="95:13" pos:end="95:22"><name pos:start="95:13" pos:end="95:15">env</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:22">flags</name></name> <operator pos:start="95:24" pos:end="95:24">&amp;</operator> <name pos:start="95:26" pos:end="95:45">POWERPC_FLAG_RTC_CLK</name></expr>)</condition> <block pos:start="95:48" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:44">

            <comment type="block" pos:start="97:13" pos:end="97:71">/* POWER / PowerPC 601 RTC clock frequency is 7.8125 MHz */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:44"><expr pos:start="99:13" pos:end="99:43"><call pos:start="99:13" pos:end="99:43"><name pos:start="99:13" pos:end="99:27">cpu_ppc_tb_init</name><argument_list pos:start="99:28" pos:end="99:43">(<argument pos:start="99:29" pos:end="99:31"><expr pos:start="99:29" pos:end="99:31"><name pos:start="99:29" pos:end="99:31">env</name></expr></argument>, <argument pos:start="99:34" pos:end="99:42"><expr pos:start="99:34" pos:end="99:42"><literal type="number" pos:start="99:34" pos:end="99:42">7812500UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="107:9">else <block pos:start="101:16" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:58">

            <comment type="block" pos:start="103:13" pos:end="103:52">/* Set time-base frequency to 100 Mhz */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:58"><expr pos:start="105:13" pos:end="105:57"><call pos:start="105:13" pos:end="105:57"><name pos:start="105:13" pos:end="105:27">cpu_ppc_tb_init</name><argument_list pos:start="105:28" pos:end="105:57">(<argument pos:start="105:29" pos:end="105:31"><expr pos:start="105:29" pos:end="105:31"><name pos:start="105:29" pos:end="105:31">env</name></expr></argument>, <argument pos:start="105:34" pos:end="105:56"><expr pos:start="105:34" pos:end="105:56"><literal type="number" pos:start="105:34" pos:end="105:38">100UL</literal> <operator pos:start="105:40" pos:end="105:40">*</operator> <literal type="number" pos:start="105:42" pos:end="105:47">1000UL</literal> <operator pos:start="105:49" pos:end="105:49">*</operator> <literal type="number" pos:start="105:51" pos:end="105:56">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:49"><expr pos:start="109:9" pos:end="109:48"><call pos:start="109:9" pos:end="109:48"><name pos:start="109:9" pos:end="109:27">qemu_register_reset</name><argument_list pos:start="109:28" pos:end="109:48">(<argument pos:start="109:29" pos:end="109:42"><expr pos:start="109:29" pos:end="109:42"><name pos:start="109:29" pos:end="109:42">ppc_prep_reset</name></expr></argument>, <argument pos:start="109:45" pos:end="109:47"><expr pos:start="109:45" pos:end="109:47"><name pos:start="109:45" pos:end="109:47">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="115:5" pos:end="115:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:64"><expr pos:start="117:5" pos:end="117:63"><call pos:start="117:5" pos:end="117:63"><name pos:start="117:5" pos:end="117:26">memory_region_init_ram</name><argument_list pos:start="117:27" pos:end="117:63">(<argument pos:start="117:28" pos:end="117:30"><expr pos:start="117:28" pos:end="117:30"><name pos:start="117:28" pos:end="117:30">ram</name></expr></argument>, <argument pos:start="117:33" pos:end="117:36"><expr pos:start="117:33" pos:end="117:36"><name pos:start="117:33" pos:end="117:36">NULL</name></expr></argument>, <argument pos:start="117:39" pos:end="117:52"><expr pos:start="117:39" pos:end="117:52"><literal type="string" pos:start="117:39" pos:end="117:52">"ppc_prep.ram"</literal></expr></argument>, <argument pos:start="117:55" pos:end="117:62"><expr pos:start="117:55" pos:end="117:62"><name pos:start="117:55" pos:end="117:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:37"><expr pos:start="119:5" pos:end="119:36"><call pos:start="119:5" pos:end="119:36"><name pos:start="119:5" pos:end="119:31">vmstate_register_ram_global</name><argument_list pos:start="119:32" pos:end="119:36">(<argument pos:start="119:33" pos:end="119:35"><expr pos:start="119:33" pos:end="119:35"><name pos:start="119:33" pos:end="119:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:48"><expr pos:start="121:5" pos:end="121:47"><call pos:start="121:5" pos:end="121:47"><name pos:start="121:5" pos:end="121:31">memory_region_add_subregion</name><argument_list pos:start="121:32" pos:end="121:47">(<argument pos:start="121:33" pos:end="121:38"><expr pos:start="121:33" pos:end="121:38"><name pos:start="121:33" pos:end="121:38">sysmem</name></expr></argument>, <argument pos:start="121:41" pos:end="121:41"><expr pos:start="121:41" pos:end="121:41"><literal type="number" pos:start="121:41" pos:end="121:41">0</literal></expr></argument>, <argument pos:start="121:44" pos:end="121:46"><expr pos:start="121:44" pos:end="121:46"><name pos:start="121:44" pos:end="121:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="125:5" pos:end="205:5"><if pos:start="125:5" pos:end="171:5">if <condition pos:start="125:8" pos:end="125:19">(<expr pos:start="125:9" pos:end="125:18"><name pos:start="125:9" pos:end="125:18">linux_boot</name></expr>)</condition> <block pos:start="125:21" pos:end="171:5">{<block_content pos:start="127:9" pos:end="169:30">

        <expr_stmt pos:start="127:9" pos:end="127:39"><expr pos:start="127:9" pos:end="127:38"><name pos:start="127:9" pos:end="127:19">kernel_base</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <name pos:start="127:23" pos:end="127:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="129:9" pos:end="129:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="131:9" pos:end="133:66"><expr pos:start="131:9" pos:end="133:65"><name pos:start="131:9" pos:end="131:19">kernel_size</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <call pos:start="131:23" pos:end="133:65"><name pos:start="131:23" pos:end="131:41">load_image_targphys</name><argument_list pos:start="131:42" pos:end="133:65">(<argument pos:start="131:43" pos:end="131:57"><expr pos:start="131:43" pos:end="131:57"><name pos:start="131:43" pos:end="131:57">kernel_filename</name></expr></argument>, <argument pos:start="131:60" pos:end="131:70"><expr pos:start="131:60" pos:end="131:70"><name pos:start="131:60" pos:end="131:70">kernel_base</name></expr></argument>,

                                          <argument pos:start="133:43" pos:end="133:64"><expr pos:start="133:43" pos:end="133:64"><name pos:start="133:43" pos:end="133:50">ram_size</name> <operator pos:start="133:52" pos:end="133:52">-</operator> <name pos:start="133:54" pos:end="133:64">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:28">(<expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:23">kernel_size</name> <operator pos:start="135:25" pos:end="135:25">&lt;</operator> <literal type="number" pos:start="135:27" pos:end="135:27">0</literal></expr>)</condition> <block pos:start="135:30" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:20">

            <expr_stmt pos:start="137:13" pos:end="137:76"><expr pos:start="137:13" pos:end="137:75"><call pos:start="137:13" pos:end="137:75"><name pos:start="137:13" pos:end="137:20">hw_error</name><argument_list pos:start="137:21" pos:end="137:75">(<argument pos:start="137:22" pos:end="137:57"><expr pos:start="137:22" pos:end="137:57"><literal type="string" pos:start="137:22" pos:end="137:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="137:60" pos:end="137:74"><expr pos:start="137:60" pos:end="137:74"><name pos:start="137:60" pos:end="137:74">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:20"><expr pos:start="139:13" pos:end="139:19"><call pos:start="139:13" pos:end="139:19"><name pos:start="139:13" pos:end="139:16">exit</name><argument_list pos:start="139:17" pos:end="139:19">(<argument pos:start="139:18" pos:end="139:18"><expr pos:start="139:18" pos:end="139:18"><literal type="number" pos:start="139:18" pos:end="139:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="143:9" pos:end="143:25">/* load initrd */</comment>

        <if_stmt pos:start="145:9" pos:end="167:9"><if pos:start="145:9" pos:end="161:9">if <condition pos:start="145:12" pos:end="145:28">(<expr pos:start="145:13" pos:end="145:27"><name pos:start="145:13" pos:end="145:27">initrd_filename</name></expr>)</condition> <block pos:start="145:30" pos:end="161:9">{<block_content pos:start="147:13" pos:end="159:13">

            <expr_stmt pos:start="147:13" pos:end="147:43"><expr pos:start="147:13" pos:end="147:42"><name pos:start="147:13" pos:end="147:23">initrd_base</name> <operator pos:start="147:25" pos:end="147:25">=</operator> <name pos:start="147:27" pos:end="147:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="151:70"><expr pos:start="149:13" pos:end="151:69"><name pos:start="149:13" pos:end="149:23">initrd_size</name> <operator pos:start="149:25" pos:end="149:25">=</operator> <call pos:start="149:27" pos:end="151:69"><name pos:start="149:27" pos:end="149:45">load_image_targphys</name><argument_list pos:start="149:46" pos:end="151:69">(<argument pos:start="149:47" pos:end="149:61"><expr pos:start="149:47" pos:end="149:61"><name pos:start="149:47" pos:end="149:61">initrd_filename</name></expr></argument>, <argument pos:start="149:64" pos:end="149:74"><expr pos:start="149:64" pos:end="149:74"><name pos:start="149:64" pos:end="149:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="151:47" pos:end="151:68"><expr pos:start="151:47" pos:end="151:68"><name pos:start="151:47" pos:end="151:54">ram_size</name> <operator pos:start="151:56" pos:end="151:56">-</operator> <name pos:start="151:58" pos:end="151:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="153:13" pos:end="159:13"><if pos:start="153:13" pos:end="159:13">if <condition pos:start="153:16" pos:end="153:32">(<expr pos:start="153:17" pos:end="153:31"><name pos:start="153:17" pos:end="153:27">initrd_size</name> <operator pos:start="153:29" pos:end="153:29">&lt;</operator> <literal type="number" pos:start="153:31" pos:end="153:31">0</literal></expr>)</condition> <block pos:start="153:34" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:43">

                <expr_stmt pos:start="155:17" pos:end="157:43"><expr pos:start="155:17" pos:end="157:42"><call pos:start="155:17" pos:end="157:42"><name pos:start="155:17" pos:end="155:24">hw_error</name><argument_list pos:start="155:25" pos:end="157:42">(<argument pos:start="155:26" pos:end="155:71"><expr pos:start="155:26" pos:end="155:71"><literal type="string" pos:start="155:26" pos:end="155:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                          <argument pos:start="157:27" pos:end="157:41"><expr pos:start="157:27" pos:end="157:41"><name pos:start="157:27" pos:end="157:41">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="161:11" pos:end="167:9">else <block pos:start="161:16" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:28">

            <expr_stmt pos:start="163:13" pos:end="163:28"><expr pos:start="163:13" pos:end="163:27"><name pos:start="163:13" pos:end="163:23">initrd_base</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <literal type="number" pos:start="163:27" pos:end="163:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:28"><expr pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:23">initrd_size</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <literal type="number" pos:start="165:27" pos:end="165:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:30"><expr pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:23">ppc_boot_device</name> <operator pos:start="169:25" pos:end="169:25">=</operator> <literal type="char" pos:start="169:27" pos:end="169:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="171:7" pos:end="205:5">else <block pos:start="171:12" pos:end="205:5">{<block_content pos:start="173:9" pos:end="203:9">

        <expr_stmt pos:start="173:9" pos:end="173:24"><expr pos:start="173:9" pos:end="173:23"><name pos:start="173:9" pos:end="173:19">kernel_base</name> <operator pos:start="173:21" pos:end="173:21">=</operator> <literal type="number" pos:start="173:23" pos:end="173:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:24"><expr pos:start="175:9" pos:end="175:23"><name pos:start="175:9" pos:end="175:19">kernel_size</name> <operator pos:start="175:21" pos:end="175:21">=</operator> <literal type="number" pos:start="175:23" pos:end="175:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:24"><expr pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:19">initrd_base</name> <operator pos:start="177:21" pos:end="177:21">=</operator> <literal type="number" pos:start="177:23" pos:end="177:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:24"><expr pos:start="179:9" pos:end="179:23"><name pos:start="179:9" pos:end="179:19">initrd_size</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <literal type="number" pos:start="179:23" pos:end="179:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:31"><expr pos:start="181:9" pos:end="181:30"><name pos:start="181:9" pos:end="181:23">ppc_boot_device</name> <operator pos:start="181:25" pos:end="181:25">=</operator> <literal type="char" pos:start="181:27" pos:end="181:30">'\0'</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="183:9" pos:end="183:56">/* For now, OHW cannot boot from the network. */</comment>

        <for pos:start="185:9" pos:end="195:9">for <control pos:start="185:13" pos:end="185:48">(<init pos:start="185:14" pos:end="185:19"><expr pos:start="185:14" pos:end="185:18"><name pos:start="185:14" pos:end="185:14">i</name> <operator pos:start="185:16" pos:end="185:16">=</operator> <literal type="number" pos:start="185:18" pos:end="185:18">0</literal></expr>;</init> <condition pos:start="185:21" pos:end="185:43"><expr pos:start="185:21" pos:end="185:42"><name pos:start="185:21" pos:end="185:34"><name pos:start="185:21" pos:end="185:31">boot_device</name><index pos:start="185:32" pos:end="185:34">[<expr pos:start="185:33" pos:end="185:33"><name pos:start="185:33" pos:end="185:33">i</name></expr>]</index></name> <operator pos:start="185:36" pos:end="185:37">!=</operator> <literal type="char" pos:start="185:39" pos:end="185:42">'\0'</literal></expr>;</condition> <incr pos:start="185:45" pos:end="185:47"><expr pos:start="185:45" pos:end="185:47"><name pos:start="185:45" pos:end="185:45">i</name><operator pos:start="185:46" pos:end="185:47">++</operator></expr></incr>)</control> <block pos:start="185:50" pos:end="195:9">{<block_content pos:start="187:13" pos:end="193:13">

            <if_stmt pos:start="187:13" pos:end="193:13"><if pos:start="187:13" pos:end="193:13">if <condition pos:start="187:16" pos:end="187:63">(<expr pos:start="187:17" pos:end="187:62"><name pos:start="187:17" pos:end="187:30"><name pos:start="187:17" pos:end="187:27">boot_device</name><index pos:start="187:28" pos:end="187:30">[<expr pos:start="187:29" pos:end="187:29"><name pos:start="187:29" pos:end="187:29">i</name></expr>]</index></name> <operator pos:start="187:32" pos:end="187:33">&gt;=</operator> <literal type="char" pos:start="187:35" pos:end="187:37">'a'</literal> <operator pos:start="187:39" pos:end="187:40">&amp;&amp;</operator> <name pos:start="187:42" pos:end="187:55"><name pos:start="187:42" pos:end="187:52">boot_device</name><index pos:start="187:53" pos:end="187:55">[<expr pos:start="187:54" pos:end="187:54"><name pos:start="187:54" pos:end="187:54">i</name></expr>]</index></name> <operator pos:start="187:57" pos:end="187:58">&lt;=</operator> <literal type="char" pos:start="187:60" pos:end="187:62">'f'</literal></expr>)</condition> <block pos:start="187:65" pos:end="193:13">{<block_content pos:start="189:17" pos:end="191:22">

                <expr_stmt pos:start="189:17" pos:end="189:49"><expr pos:start="189:17" pos:end="189:48"><name pos:start="189:17" pos:end="189:31">ppc_boot_device</name> <operator pos:start="189:33" pos:end="189:33">=</operator> <name pos:start="189:35" pos:end="189:48"><name pos:start="189:35" pos:end="189:45">boot_device</name><index pos:start="189:46" pos:end="189:48">[<expr pos:start="189:47" pos:end="189:47"><name pos:start="189:47" pos:end="189:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="191:17" pos:end="191:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="197:9" pos:end="203:9"><if pos:start="197:9" pos:end="203:9">if <condition pos:start="197:12" pos:end="197:36">(<expr pos:start="197:13" pos:end="197:35"><name pos:start="197:13" pos:end="197:27">ppc_boot_device</name> <operator pos:start="197:29" pos:end="197:30">==</operator> <literal type="char" pos:start="197:32" pos:end="197:35">'\0'</literal></expr>)</condition> <block pos:start="197:38" pos:end="203:9">{<block_content pos:start="199:13" pos:end="201:20">

            <expr_stmt pos:start="199:13" pos:end="199:72"><expr pos:start="199:13" pos:end="199:71"><call pos:start="199:13" pos:end="199:71"><name pos:start="199:13" pos:end="199:19">fprintf</name><argument_list pos:start="199:20" pos:end="199:71">(<argument pos:start="199:21" pos:end="199:26"><expr pos:start="199:21" pos:end="199:26"><name pos:start="199:21" pos:end="199:26">stderr</name></expr></argument>, <argument pos:start="199:29" pos:end="199:70"><expr pos:start="199:29" pos:end="199:70"><literal type="string" pos:start="199:29" pos:end="199:70">"No valid boot device for Mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:20"><expr pos:start="201:13" pos:end="201:19"><call pos:start="201:13" pos:end="201:19"><name pos:start="201:13" pos:end="201:16">exit</name><argument_list pos:start="201:17" pos:end="201:19">(<argument pos:start="201:18" pos:end="201:18"><expr pos:start="201:18" pos:end="201:18"><literal type="number" pos:start="201:18" pos:end="201:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="209:5" pos:end="213:5"><if pos:start="209:5" pos:end="213:5">if <condition pos:start="209:8" pos:end="209:46">(<expr pos:start="209:9" pos:end="209:45"><call pos:start="209:9" pos:end="209:22"><name pos:start="209:9" pos:end="209:17">PPC_INPUT</name><argument_list pos:start="209:18" pos:end="209:22">(<argument pos:start="209:19" pos:end="209:21"><expr pos:start="209:19" pos:end="209:21"><name pos:start="209:19" pos:end="209:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="209:24" pos:end="209:25">!=</operator> <name pos:start="209:27" pos:end="209:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="209:48" pos:end="213:5">{<block_content pos:start="211:9" pos:end="211:64">

        <expr_stmt pos:start="211:9" pos:end="211:64"><expr pos:start="211:9" pos:end="211:63"><call pos:start="211:9" pos:end="211:63"><name pos:start="211:9" pos:end="211:16">hw_error</name><argument_list pos:start="211:17" pos:end="211:63">(<argument pos:start="211:18" pos:end="211:62"><expr pos:start="211:18" pos:end="211:62"><literal type="string" pos:start="211:18" pos:end="211:62">"Only 6xx bus is supported on PREP machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:45"><expr pos:start="217:5" pos:end="217:44"><name pos:start="217:5" pos:end="217:7">dev</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <call pos:start="217:11" pos:end="217:44"><name pos:start="217:11" pos:end="217:21">qdev_create</name><argument_list pos:start="217:22" pos:end="217:44">(<argument pos:start="217:23" pos:end="217:26"><expr pos:start="217:23" pos:end="217:26"><name pos:start="217:23" pos:end="217:26">NULL</name></expr></argument>, <argument pos:start="217:29" pos:end="217:43"><expr pos:start="217:29" pos:end="217:43"><literal type="string" pos:start="217:29" pos:end="217:43">"raven-pcihost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="223:5"><if pos:start="219:5" pos:end="223:5">if <condition pos:start="219:8" pos:end="219:26">(<expr pos:start="219:9" pos:end="219:25"><name pos:start="219:9" pos:end="219:17">bios_name</name> <operator pos:start="219:19" pos:end="219:20">==</operator> <name pos:start="219:22" pos:end="219:25">NULL</name></expr>)</condition> <block pos:start="219:28" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:34">

        <expr_stmt pos:start="221:9" pos:end="221:34"><expr pos:start="221:9" pos:end="221:33"><name pos:start="221:9" pos:end="221:17">bios_name</name> <operator pos:start="221:19" pos:end="221:19">=</operator> <name pos:start="221:21" pos:end="221:33">BIOS_FILENAME</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:54"><expr pos:start="225:5" pos:end="225:53"><call pos:start="225:5" pos:end="225:53"><name pos:start="225:5" pos:end="225:24">qdev_prop_set_string</name><argument_list pos:start="225:25" pos:end="225:53">(<argument pos:start="225:26" pos:end="225:28"><expr pos:start="225:26" pos:end="225:28"><name pos:start="225:26" pos:end="225:28">dev</name></expr></argument>, <argument pos:start="225:31" pos:end="225:41"><expr pos:start="225:31" pos:end="225:41"><literal type="string" pos:start="225:31" pos:end="225:41">"bios-name"</literal></expr></argument>, <argument pos:start="225:44" pos:end="225:52"><expr pos:start="225:44" pos:end="225:52"><name pos:start="225:44" pos:end="225:52">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:58"><expr pos:start="227:5" pos:end="227:57"><call pos:start="227:5" pos:end="227:57"><name pos:start="227:5" pos:end="227:24">qdev_prop_set_uint32</name><argument_list pos:start="227:25" pos:end="227:57">(<argument pos:start="227:26" pos:end="227:28"><expr pos:start="227:26" pos:end="227:28"><name pos:start="227:26" pos:end="227:28">dev</name></expr></argument>, <argument pos:start="227:31" pos:end="227:43"><expr pos:start="227:31" pos:end="227:43"><literal type="string" pos:start="227:31" pos:end="227:43">"elf-machine"</literal></expr></argument>, <argument pos:start="227:46" pos:end="227:56"><expr pos:start="227:46" pos:end="227:56"><name pos:start="227:46" pos:end="227:56">ELF_MACHINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:35"><expr pos:start="229:5" pos:end="229:34"><name pos:start="229:5" pos:end="229:11">pcihost</name> <operator pos:start="229:13" pos:end="229:13">=</operator> <call pos:start="229:15" pos:end="229:34"><name pos:start="229:15" pos:end="229:29">PCI_HOST_BRIDGE</name><argument_list pos:start="229:30" pos:end="229:34">(<argument pos:start="229:31" pos:end="229:33"><expr pos:start="229:31" pos:end="229:33"><name pos:start="229:31" pos:end="229:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:78"><expr pos:start="231:5" pos:end="231:77"><call pos:start="231:5" pos:end="231:77"><name pos:start="231:5" pos:end="231:29">object_property_add_child</name><argument_list pos:start="231:30" pos:end="231:77">(<argument pos:start="231:31" pos:end="231:48"><expr pos:start="231:31" pos:end="231:48"><call pos:start="231:31" pos:end="231:48"><name pos:start="231:31" pos:end="231:46">qdev_get_machine</name><argument_list pos:start="231:47" pos:end="231:48">()</argument_list></call></expr></argument>, <argument pos:start="231:51" pos:end="231:57"><expr pos:start="231:51" pos:end="231:57"><literal type="string" pos:start="231:51" pos:end="231:57">"raven"</literal></expr></argument>, <argument pos:start="231:60" pos:end="231:70"><expr pos:start="231:60" pos:end="231:70"><call pos:start="231:60" pos:end="231:70"><name pos:start="231:60" pos:end="231:65">OBJECT</name><argument_list pos:start="231:66" pos:end="231:70">(<argument pos:start="231:67" pos:end="231:69"><expr pos:start="231:67" pos:end="231:69"><name pos:start="231:67" pos:end="231:69">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="231:73" pos:end="231:76"><expr pos:start="231:73" pos:end="231:76"><name pos:start="231:73" pos:end="231:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:26"><expr pos:start="233:5" pos:end="233:25"><call pos:start="233:5" pos:end="233:25"><name pos:start="233:5" pos:end="233:20">qdev_init_nofail</name><argument_list pos:start="233:21" pos:end="233:25">(<argument pos:start="233:22" pos:end="233:24"><expr pos:start="233:22" pos:end="233:24"><name pos:start="233:22" pos:end="233:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:57"><expr pos:start="235:5" pos:end="235:56"><name pos:start="235:5" pos:end="235:11">pci_bus</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <operator pos:start="235:15" pos:end="235:15">(</operator><name pos:start="235:16" pos:end="235:21">PCIBus</name> <operator pos:start="235:23" pos:end="235:23">*</operator><operator pos:start="235:24" pos:end="235:24">)</operator><call pos:start="235:25" pos:end="235:56"><name pos:start="235:25" pos:end="235:42">qdev_get_child_bus</name><argument_list pos:start="235:43" pos:end="235:56">(<argument pos:start="235:44" pos:end="235:46"><expr pos:start="235:44" pos:end="235:46"><name pos:start="235:44" pos:end="235:46">dev</name></expr></argument>, <argument pos:start="235:49" pos:end="235:55"><expr pos:start="235:49" pos:end="235:55"><literal type="string" pos:start="235:49" pos:end="235:55">"pci.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="243:5"><if pos:start="237:5" pos:end="243:5">if <condition pos:start="237:8" pos:end="237:24">(<expr pos:start="237:9" pos:end="237:23"><name pos:start="237:9" pos:end="237:15">pci_bus</name> <operator pos:start="237:17" pos:end="237:18">==</operator> <name pos:start="237:20" pos:end="237:23">NULL</name></expr>)</condition> <block pos:start="237:26" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:16">

        <expr_stmt pos:start="239:9" pos:end="239:66"><expr pos:start="239:9" pos:end="239:65"><call pos:start="239:9" pos:end="239:65"><name pos:start="239:9" pos:end="239:15">fprintf</name><argument_list pos:start="239:16" pos:end="239:65">(<argument pos:start="239:17" pos:end="239:22"><expr pos:start="239:17" pos:end="239:22"><name pos:start="239:17" pos:end="239:22">stderr</name></expr></argument>, <argument pos:start="239:25" pos:end="239:64"><expr pos:start="239:25" pos:end="239:64"><literal type="string" pos:start="239:25" pos:end="239:64">"Couldn't create PCI host controller.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:16"><expr pos:start="241:9" pos:end="241:15"><call pos:start="241:9" pos:end="241:15"><name pos:start="241:9" pos:end="241:12">exit</name><argument_list pos:start="241:13" pos:end="241:15">(<argument pos:start="241:14" pos:end="241:14"><expr pos:start="241:14" pos:end="241:14"><literal type="number" pos:start="241:14" pos:end="241:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:59"><expr pos:start="245:5" pos:end="245:58"><name pos:start="245:5" pos:end="245:31"><name pos:start="245:5" pos:end="245:11">sysctrl</name><operator pos:start="245:12" pos:end="245:13">-&gt;</operator><name pos:start="245:14" pos:end="245:31">contiguous_map_irq</name></name> <operator pos:start="245:33" pos:end="245:33">=</operator> <call pos:start="245:35" pos:end="245:58"><name pos:start="245:35" pos:end="245:50">qdev_get_gpio_in</name><argument_list pos:start="245:51" pos:end="245:58">(<argument pos:start="245:52" pos:end="245:54"><expr pos:start="245:52" pos:end="245:54"><name pos:start="245:52" pos:end="245:54">dev</name></expr></argument>, <argument pos:start="245:57" pos:end="245:57"><expr pos:start="245:57" pos:end="245:57"><literal type="number" pos:start="245:57" pos:end="245:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="249:5" pos:end="249:27">/* PCI -&gt; ISA bridge */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:64"><expr pos:start="251:5" pos:end="251:63"><name pos:start="251:5" pos:end="251:7">pci</name> <operator pos:start="251:9" pos:end="251:9">=</operator> <call pos:start="251:11" pos:end="251:63"><name pos:start="251:11" pos:end="251:27">pci_create_simple</name><argument_list pos:start="251:28" pos:end="251:63">(<argument pos:start="251:29" pos:end="251:35"><expr pos:start="251:29" pos:end="251:35"><name pos:start="251:29" pos:end="251:35">pci_bus</name></expr></argument>, <argument pos:start="251:38" pos:end="251:52"><expr pos:start="251:38" pos:end="251:52"><call pos:start="251:38" pos:end="251:52"><name pos:start="251:38" pos:end="251:46">PCI_DEVFN</name><argument_list pos:start="251:47" pos:end="251:52">(<argument pos:start="251:48" pos:end="251:48"><expr pos:start="251:48" pos:end="251:48"><literal type="number" pos:start="251:48" pos:end="251:48">1</literal></expr></argument>, <argument pos:start="251:51" pos:end="251:51"><expr pos:start="251:51" pos:end="251:51"><literal type="number" pos:start="251:51" pos:end="251:51">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="251:55" pos:end="251:62"><expr pos:start="251:55" pos:end="251:62"><literal type="string" pos:start="251:55" pos:end="251:62">"i82378"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:65"><expr pos:start="253:5" pos:end="253:64"><name pos:start="253:5" pos:end="253:16">cpu_exit_irq</name> <operator pos:start="253:18" pos:end="253:18">=</operator> <call pos:start="253:20" pos:end="253:64"><name pos:start="253:20" pos:end="253:37">qemu_allocate_irqs</name><argument_list pos:start="253:38" pos:end="253:64">(<argument pos:start="253:39" pos:end="253:54"><expr pos:start="253:39" pos:end="253:54"><name pos:start="253:39" pos:end="253:54">cpu_request_exit</name></expr></argument>, <argument pos:start="253:57" pos:end="253:60"><expr pos:start="253:57" pos:end="253:60"><name pos:start="253:57" pos:end="253:60">NULL</name></expr></argument>, <argument pos:start="253:63" pos:end="253:63"><expr pos:start="253:63" pos:end="253:63"><literal type="number" pos:start="253:63" pos:end="253:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:33"><expr pos:start="255:5" pos:end="255:32"><name pos:start="255:5" pos:end="255:7">cpu</name> <operator pos:start="255:9" pos:end="255:9">=</operator> <call pos:start="255:11" pos:end="255:32"><name pos:start="255:11" pos:end="255:21">POWERPC_CPU</name><argument_list pos:start="255:22" pos:end="255:32">(<argument pos:start="255:23" pos:end="255:31"><expr pos:start="255:23" pos:end="255:31"><name pos:start="255:23" pos:end="255:31">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="259:65"><expr pos:start="257:5" pos:end="259:64"><call pos:start="257:5" pos:end="259:64"><name pos:start="257:5" pos:end="257:25">qdev_connect_gpio_out</name><argument_list pos:start="257:26" pos:end="259:64">(<argument pos:start="257:27" pos:end="257:36"><expr pos:start="257:27" pos:end="257:36"><operator pos:start="257:27" pos:end="257:27">&amp;</operator><name pos:start="257:28" pos:end="257:36"><name pos:start="257:28" pos:end="257:30">pci</name><operator pos:start="257:31" pos:end="257:32">-&gt;</operator><name pos:start="257:33" pos:end="257:36">qdev</name></name></expr></argument>, <argument pos:start="257:39" pos:end="257:39"><expr pos:start="257:39" pos:end="257:39"><literal type="number" pos:start="257:39" pos:end="257:39">0</literal></expr></argument>,

                          <argument pos:start="259:27" pos:end="259:63"><expr pos:start="259:27" pos:end="259:63"><name pos:start="259:27" pos:end="259:63"><name pos:start="259:27" pos:end="259:29">cpu</name><operator pos:start="259:30" pos:end="259:31">-&gt;</operator><name pos:start="259:32" pos:end="259:34">env</name><operator pos:start="259:35" pos:end="259:35">.</operator><name pos:start="259:36" pos:end="259:45">irq_inputs</name><index pos:start="259:46" pos:end="259:63">[<expr pos:start="259:47" pos:end="259:62"><name pos:start="259:47" pos:end="259:62">PPC6xx_INPUT_INT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:56"><expr pos:start="261:5" pos:end="261:55"><call pos:start="261:5" pos:end="261:55"><name pos:start="261:5" pos:end="261:25">qdev_connect_gpio_out</name><argument_list pos:start="261:26" pos:end="261:55">(<argument pos:start="261:27" pos:end="261:36"><expr pos:start="261:27" pos:end="261:36"><operator pos:start="261:27" pos:end="261:27">&amp;</operator><name pos:start="261:28" pos:end="261:36"><name pos:start="261:28" pos:end="261:30">pci</name><operator pos:start="261:31" pos:end="261:32">-&gt;</operator><name pos:start="261:33" pos:end="261:36">qdev</name></name></expr></argument>, <argument pos:start="261:39" pos:end="261:39"><expr pos:start="261:39" pos:end="261:39"><literal type="number" pos:start="261:39" pos:end="261:39">1</literal></expr></argument>, <argument pos:start="261:42" pos:end="261:54"><expr pos:start="261:42" pos:end="261:54"><operator pos:start="261:42" pos:end="261:42">*</operator><name pos:start="261:43" pos:end="261:54">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:77"><expr pos:start="263:5" pos:end="263:76"><call pos:start="263:5" pos:end="263:76"><name pos:start="263:5" pos:end="263:22">sysbus_connect_irq</name><argument_list pos:start="263:23" pos:end="263:76">(<argument pos:start="263:24" pos:end="263:39"><expr pos:start="263:24" pos:end="263:39"><operator pos:start="263:24" pos:end="263:24">&amp;</operator><name pos:start="263:25" pos:end="263:39"><name pos:start="263:25" pos:end="263:31">pcihost</name><operator pos:start="263:32" pos:end="263:33">-&gt;</operator><name pos:start="263:34" pos:end="263:39">busdev</name></name></expr></argument>, <argument pos:start="263:42" pos:end="263:42"><expr pos:start="263:42" pos:end="263:42"><literal type="number" pos:start="263:42" pos:end="263:42">0</literal></expr></argument>, <argument pos:start="263:45" pos:end="263:75"><expr pos:start="263:45" pos:end="263:75"><call pos:start="263:45" pos:end="263:75"><name pos:start="263:45" pos:end="263:60">qdev_get_gpio_in</name><argument_list pos:start="263:61" pos:end="263:75">(<argument pos:start="263:62" pos:end="263:71"><expr pos:start="263:62" pos:end="263:71"><operator pos:start="263:62" pos:end="263:62">&amp;</operator><name pos:start="263:63" pos:end="263:71"><name pos:start="263:63" pos:end="263:65">pci</name><operator pos:start="263:66" pos:end="263:67">-&gt;</operator><name pos:start="263:68" pos:end="263:71">qdev</name></name></expr></argument>, <argument pos:start="263:74" pos:end="263:74"><expr pos:start="263:74" pos:end="263:74"><literal type="number" pos:start="263:74" pos:end="263:74">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:78"><expr pos:start="265:5" pos:end="265:77"><call pos:start="265:5" pos:end="265:77"><name pos:start="265:5" pos:end="265:22">sysbus_connect_irq</name><argument_list pos:start="265:23" pos:end="265:77">(<argument pos:start="265:24" pos:end="265:39"><expr pos:start="265:24" pos:end="265:39"><operator pos:start="265:24" pos:end="265:24">&amp;</operator><name pos:start="265:25" pos:end="265:39"><name pos:start="265:25" pos:end="265:31">pcihost</name><operator pos:start="265:32" pos:end="265:33">-&gt;</operator><name pos:start="265:34" pos:end="265:39">busdev</name></name></expr></argument>, <argument pos:start="265:42" pos:end="265:42"><expr pos:start="265:42" pos:end="265:42"><literal type="number" pos:start="265:42" pos:end="265:42">1</literal></expr></argument>, <argument pos:start="265:45" pos:end="265:76"><expr pos:start="265:45" pos:end="265:76"><call pos:start="265:45" pos:end="265:76"><name pos:start="265:45" pos:end="265:60">qdev_get_gpio_in</name><argument_list pos:start="265:61" pos:end="265:76">(<argument pos:start="265:62" pos:end="265:71"><expr pos:start="265:62" pos:end="265:71"><operator pos:start="265:62" pos:end="265:62">&amp;</operator><name pos:start="265:63" pos:end="265:71"><name pos:start="265:63" pos:end="265:65">pci</name><operator pos:start="265:66" pos:end="265:67">-&gt;</operator><name pos:start="265:68" pos:end="265:71">qdev</name></name></expr></argument>, <argument pos:start="265:74" pos:end="265:75"><expr pos:start="265:74" pos:end="265:75"><literal type="number" pos:start="265:74" pos:end="265:75">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:77"><expr pos:start="267:5" pos:end="267:76"><call pos:start="267:5" pos:end="267:76"><name pos:start="267:5" pos:end="267:22">sysbus_connect_irq</name><argument_list pos:start="267:23" pos:end="267:76">(<argument pos:start="267:24" pos:end="267:39"><expr pos:start="267:24" pos:end="267:39"><operator pos:start="267:24" pos:end="267:24">&amp;</operator><name pos:start="267:25" pos:end="267:39"><name pos:start="267:25" pos:end="267:31">pcihost</name><operator pos:start="267:32" pos:end="267:33">-&gt;</operator><name pos:start="267:34" pos:end="267:39">busdev</name></name></expr></argument>, <argument pos:start="267:42" pos:end="267:42"><expr pos:start="267:42" pos:end="267:42"><literal type="number" pos:start="267:42" pos:end="267:42">2</literal></expr></argument>, <argument pos:start="267:45" pos:end="267:75"><expr pos:start="267:45" pos:end="267:75"><call pos:start="267:45" pos:end="267:75"><name pos:start="267:45" pos:end="267:60">qdev_get_gpio_in</name><argument_list pos:start="267:61" pos:end="267:75">(<argument pos:start="267:62" pos:end="267:71"><expr pos:start="267:62" pos:end="267:71"><operator pos:start="267:62" pos:end="267:62">&amp;</operator><name pos:start="267:63" pos:end="267:71"><name pos:start="267:63" pos:end="267:65">pci</name><operator pos:start="267:66" pos:end="267:67">-&gt;</operator><name pos:start="267:68" pos:end="267:71">qdev</name></name></expr></argument>, <argument pos:start="267:74" pos:end="267:74"><expr pos:start="267:74" pos:end="267:74"><literal type="number" pos:start="267:74" pos:end="267:74">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:78"><expr pos:start="269:5" pos:end="269:77"><call pos:start="269:5" pos:end="269:77"><name pos:start="269:5" pos:end="269:22">sysbus_connect_irq</name><argument_list pos:start="269:23" pos:end="269:77">(<argument pos:start="269:24" pos:end="269:39"><expr pos:start="269:24" pos:end="269:39"><operator pos:start="269:24" pos:end="269:24">&amp;</operator><name pos:start="269:25" pos:end="269:39"><name pos:start="269:25" pos:end="269:31">pcihost</name><operator pos:start="269:32" pos:end="269:33">-&gt;</operator><name pos:start="269:34" pos:end="269:39">busdev</name></name></expr></argument>, <argument pos:start="269:42" pos:end="269:42"><expr pos:start="269:42" pos:end="269:42"><literal type="number" pos:start="269:42" pos:end="269:42">3</literal></expr></argument>, <argument pos:start="269:45" pos:end="269:76"><expr pos:start="269:45" pos:end="269:76"><call pos:start="269:45" pos:end="269:76"><name pos:start="269:45" pos:end="269:60">qdev_get_gpio_in</name><argument_list pos:start="269:61" pos:end="269:76">(<argument pos:start="269:62" pos:end="269:71"><expr pos:start="269:62" pos:end="269:71"><operator pos:start="269:62" pos:end="269:62">&amp;</operator><name pos:start="269:63" pos:end="269:71"><name pos:start="269:63" pos:end="269:65">pci</name><operator pos:start="269:66" pos:end="269:67">-&gt;</operator><name pos:start="269:68" pos:end="269:71">qdev</name></name></expr></argument>, <argument pos:start="269:74" pos:end="269:75"><expr pos:start="269:74" pos:end="269:75"><literal type="number" pos:start="269:74" pos:end="269:75">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:64"><expr pos:start="271:5" pos:end="271:63"><name pos:start="271:5" pos:end="271:11">isa_bus</name> <operator pos:start="271:13" pos:end="271:13">=</operator> <call pos:start="271:15" pos:end="271:63"><name pos:start="271:15" pos:end="271:21">ISA_BUS</name><argument_list pos:start="271:22" pos:end="271:63">(<argument pos:start="271:23" pos:end="271:62"><expr pos:start="271:23" pos:end="271:62"><call pos:start="271:23" pos:end="271:62"><name pos:start="271:23" pos:end="271:40">qdev_get_child_bus</name><argument_list pos:start="271:41" pos:end="271:62">(<argument pos:start="271:42" pos:end="271:52"><expr pos:start="271:42" pos:end="271:52"><call pos:start="271:42" pos:end="271:52"><name pos:start="271:42" pos:end="271:47">DEVICE</name><argument_list pos:start="271:48" pos:end="271:52">(<argument pos:start="271:49" pos:end="271:51"><expr pos:start="271:49" pos:end="271:51"><name pos:start="271:49" pos:end="271:51">pci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="271:55" pos:end="271:61"><expr pos:start="271:55" pos:end="271:61"><literal type="string" pos:start="271:55" pos:end="271:61">"isa.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="275:5" pos:end="275:45">/* Super I/O (parallel + serial ports) */</comment>

    <expr_stmt pos:start="277:5" pos:end="277:44"><expr pos:start="277:5" pos:end="277:43"><name pos:start="277:5" pos:end="277:7">isa</name> <operator pos:start="277:9" pos:end="277:9">=</operator> <call pos:start="277:11" pos:end="277:43"><name pos:start="277:11" pos:end="277:20">isa_create</name><argument_list pos:start="277:21" pos:end="277:43">(<argument pos:start="277:22" pos:end="277:28"><expr pos:start="277:22" pos:end="277:28"><name pos:start="277:22" pos:end="277:28">isa_bus</name></expr></argument>, <argument pos:start="277:31" pos:end="277:42"><expr pos:start="277:31" pos:end="277:42"><name pos:start="277:31" pos:end="277:42">TYPE_PC87312</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:22"><expr pos:start="279:5" pos:end="279:21"><name pos:start="279:5" pos:end="279:7">dev</name> <operator pos:start="279:9" pos:end="279:9">=</operator> <call pos:start="279:11" pos:end="279:21"><name pos:start="279:11" pos:end="279:16">DEVICE</name><argument_list pos:start="279:17" pos:end="279:21">(<argument pos:start="279:18" pos:end="279:20"><expr pos:start="279:18" pos:end="279:20"><name pos:start="279:18" pos:end="279:20">isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:43"><expr pos:start="281:5" pos:end="281:42"><call pos:start="281:5" pos:end="281:42"><name pos:start="281:5" pos:end="281:23">qdev_prop_set_uint8</name><argument_list pos:start="281:24" pos:end="281:42">(<argument pos:start="281:25" pos:end="281:27"><expr pos:start="281:25" pos:end="281:27"><name pos:start="281:25" pos:end="281:27">dev</name></expr></argument>, <argument pos:start="281:30" pos:end="281:37"><expr pos:start="281:30" pos:end="281:37"><literal type="string" pos:start="281:30" pos:end="281:37">"config"</literal></expr></argument>, <argument pos:start="281:40" pos:end="281:41"><expr pos:start="281:40" pos:end="281:41"><literal type="number" pos:start="281:40" pos:end="281:41">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="281:45" pos:end="281:71">/* fdc, ser0, ser1, par0 */</comment>

    <expr_stmt pos:start="283:5" pos:end="283:26"><expr pos:start="283:5" pos:end="283:25"><call pos:start="283:5" pos:end="283:25"><name pos:start="283:5" pos:end="283:20">qdev_init_nofail</name><argument_list pos:start="283:21" pos:end="283:25">(<argument pos:start="283:22" pos:end="283:24"><expr pos:start="283:22" pos:end="283:24"><name pos:start="283:22" pos:end="283:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="287:5" pos:end="287:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="289:5" pos:end="289:26"><expr pos:start="289:5" pos:end="289:25"><call pos:start="289:5" pos:end="289:25"><name pos:start="289:5" pos:end="289:16">pci_vga_init</name><argument_list pos:start="289:17" pos:end="289:25">(<argument pos:start="289:18" pos:end="289:24"><expr pos:start="289:18" pos:end="289:24"><name pos:start="289:18" pos:end="289:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="291:5" pos:end="299:7">/* Open Hack'Ware hack: PCI BAR#0 is programmed to 0xf0000000.

     * While bios will access framebuffer at 0xf0000000, real physical

     * address is 0xf0000000 + 0xc0000000 (PCI memory base).

     * Alias the wrong memory accesses to the right place.

     */</comment>

    <expr_stmt pos:start="301:5" pos:end="303:52"><expr pos:start="301:5" pos:end="303:51"><call pos:start="301:5" pos:end="303:51"><name pos:start="301:5" pos:end="301:28">memory_region_init_alias</name><argument_list pos:start="301:29" pos:end="303:51">(<argument pos:start="301:30" pos:end="301:32"><expr pos:start="301:30" pos:end="301:32"><name pos:start="301:30" pos:end="301:32">vga</name></expr></argument>, <argument pos:start="301:35" pos:end="301:38"><expr pos:start="301:35" pos:end="301:38"><name pos:start="301:35" pos:end="301:38">NULL</name></expr></argument>, <argument pos:start="301:41" pos:end="301:51"><expr pos:start="301:41" pos:end="301:51"><literal type="string" pos:start="301:41" pos:end="301:51">"vga-alias"</literal></expr></argument>, <argument pos:start="301:54" pos:end="301:75"><expr pos:start="301:54" pos:end="301:75"><call pos:start="301:54" pos:end="301:75"><name pos:start="301:54" pos:end="301:70">pci_address_space</name><argument_list pos:start="301:71" pos:end="301:75">(<argument pos:start="301:72" pos:end="301:74"><expr pos:start="301:72" pos:end="301:74"><name pos:start="301:72" pos:end="301:74">pci</name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="303:30" pos:end="303:39"><expr pos:start="303:30" pos:end="303:39"><literal type="number" pos:start="303:30" pos:end="303:39">0xf0000000</literal></expr></argument>, <argument pos:start="303:42" pos:end="303:50"><expr pos:start="303:42" pos:end="303:50"><literal type="number" pos:start="303:42" pos:end="303:50">0x1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="305:69"><expr pos:start="305:5" pos:end="305:68"><call pos:start="305:5" pos:end="305:68"><name pos:start="305:5" pos:end="305:39">memory_region_add_subregion_overlap</name><argument_list pos:start="305:40" pos:end="305:68">(<argument pos:start="305:41" pos:end="305:46"><expr pos:start="305:41" pos:end="305:46"><name pos:start="305:41" pos:end="305:46">sysmem</name></expr></argument>, <argument pos:start="305:49" pos:end="305:58"><expr pos:start="305:49" pos:end="305:58"><literal type="number" pos:start="305:49" pos:end="305:58">0xf0000000</literal></expr></argument>, <argument pos:start="305:61" pos:end="305:63"><expr pos:start="305:61" pos:end="305:63"><name pos:start="305:61" pos:end="305:63">vga</name></expr></argument>, <argument pos:start="305:66" pos:end="305:67"><expr pos:start="305:66" pos:end="305:67"><literal type="number" pos:start="305:66" pos:end="305:67">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="309:5" pos:end="309:23"><expr pos:start="309:5" pos:end="309:22"><name pos:start="309:5" pos:end="309:12">nb_nics1</name> <operator pos:start="309:14" pos:end="309:14">=</operator> <name pos:start="309:16" pos:end="309:22">nb_nics</name></expr>;</expr_stmt>

    <if_stmt pos:start="311:5" pos:end="313:33"><if pos:start="311:5" pos:end="313:33">if <condition pos:start="311:8" pos:end="311:33">(<expr pos:start="311:9" pos:end="311:32"><name pos:start="311:9" pos:end="311:16">nb_nics1</name> <operator pos:start="311:18" pos:end="311:18">&gt;</operator> <name pos:start="311:20" pos:end="311:32">NE2000_NB_MAX</name></expr>)</condition><block type="pseudo" pos:start="313:9" pos:end="313:33"><block_content pos:start="313:9" pos:end="313:33">

        <expr_stmt pos:start="313:9" pos:end="313:33"><expr pos:start="313:9" pos:end="313:32"><name pos:start="313:9" pos:end="313:16">nb_nics1</name> <operator pos:start="313:18" pos:end="313:18">=</operator> <name pos:start="313:20" pos:end="313:32">NE2000_NB_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="315:5" pos:end="335:5">for<control pos:start="315:8" pos:end="315:33">(<init pos:start="315:9" pos:end="315:14"><expr pos:start="315:9" pos:end="315:13"><name pos:start="315:9" pos:end="315:9">i</name> <operator pos:start="315:11" pos:end="315:11">=</operator> <literal type="number" pos:start="315:13" pos:end="315:13">0</literal></expr>;</init> <condition pos:start="315:16" pos:end="315:28"><expr pos:start="315:16" pos:end="315:27"><name pos:start="315:16" pos:end="315:16">i</name> <operator pos:start="315:18" pos:end="315:18">&lt;</operator> <name pos:start="315:20" pos:end="315:27">nb_nics1</name></expr>;</condition> <incr pos:start="315:30" pos:end="315:32"><expr pos:start="315:30" pos:end="315:32"><name pos:start="315:30" pos:end="315:30">i</name><operator pos:start="315:31" pos:end="315:32">++</operator></expr></incr>)</control> <block pos:start="315:35" pos:end="335:5">{<block_content pos:start="317:9" pos:end="333:9">

        <if_stmt pos:start="317:9" pos:end="321:9"><if pos:start="317:9" pos:end="321:9">if <condition pos:start="317:12" pos:end="317:38">(<expr pos:start="317:13" pos:end="317:37"><name pos:start="317:13" pos:end="317:23"><name pos:start="317:13" pos:end="317:20">nd_table</name><index pos:start="317:21" pos:end="317:23">[<expr pos:start="317:22" pos:end="317:22"><name pos:start="317:22" pos:end="317:22">i</name></expr>]</index></name><operator pos:start="317:24" pos:end="317:24">.</operator><name pos:start="317:25" pos:end="317:29">model</name> <operator pos:start="317:31" pos:end="317:32">==</operator> <name pos:start="317:34" pos:end="317:37">NULL</name></expr>)</condition> <block pos:start="317:40" pos:end="321:9">{<block_content pos:start="319:13" pos:end="319:53">

	    <expr_stmt pos:start="319:13" pos:end="319:53"><expr pos:start="319:13" pos:end="319:52"><name pos:start="319:13" pos:end="319:23"><name pos:start="319:13" pos:end="319:20">nd_table</name><index pos:start="319:21" pos:end="319:23">[<expr pos:start="319:22" pos:end="319:22"><name pos:start="319:22" pos:end="319:22">i</name></expr>]</index></name><operator pos:start="319:24" pos:end="319:24">.</operator><name pos:start="319:25" pos:end="319:29">model</name> <operator pos:start="319:31" pos:end="319:31">=</operator> <call pos:start="319:33" pos:end="319:52"><name pos:start="319:33" pos:end="319:40">g_strdup</name><argument_list pos:start="319:41" pos:end="319:52">(<argument pos:start="319:42" pos:end="319:51"><expr pos:start="319:42" pos:end="319:51"><literal type="string" pos:start="319:42" pos:end="319:51">"ne2k_isa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="323:9" pos:end="333:9"><if pos:start="323:9" pos:end="329:9">if <condition pos:start="323:12" pos:end="323:55">(<expr pos:start="323:13" pos:end="323:54"><call pos:start="323:13" pos:end="323:49"><name pos:start="323:13" pos:end="323:18">strcmp</name><argument_list pos:start="323:19" pos:end="323:49">(<argument pos:start="323:20" pos:end="323:36"><expr pos:start="323:20" pos:end="323:36"><name pos:start="323:20" pos:end="323:30"><name pos:start="323:20" pos:end="323:27">nd_table</name><index pos:start="323:28" pos:end="323:30">[<expr pos:start="323:29" pos:end="323:29"><name pos:start="323:29" pos:end="323:29">i</name></expr>]</index></name><operator pos:start="323:31" pos:end="323:31">.</operator><name pos:start="323:32" pos:end="323:36">model</name></expr></argument>, <argument pos:start="323:39" pos:end="323:48"><expr pos:start="323:39" pos:end="323:48"><literal type="string" pos:start="323:39" pos:end="323:48">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="323:51" pos:end="323:52">==</operator> <literal type="number" pos:start="323:54" pos:end="323:54">0</literal></expr>)</condition> <block pos:start="323:57" pos:end="329:9">{<block_content pos:start="325:13" pos:end="327:42">

            <expr_stmt pos:start="325:13" pos:end="327:42"><expr pos:start="325:13" pos:end="327:41"><call pos:start="325:13" pos:end="327:41"><name pos:start="325:13" pos:end="325:27">isa_ne2000_init</name><argument_list pos:start="325:28" pos:end="327:41">(<argument pos:start="325:29" pos:end="325:35"><expr pos:start="325:29" pos:end="325:35"><name pos:start="325:29" pos:end="325:35">isa_bus</name></expr></argument>, <argument pos:start="325:38" pos:end="325:49"><expr pos:start="325:38" pos:end="325:49"><name pos:start="325:38" pos:end="325:49"><name pos:start="325:38" pos:end="325:46">ne2000_io</name><index pos:start="325:47" pos:end="325:49">[<expr pos:start="325:48" pos:end="325:48"><name pos:start="325:48" pos:end="325:48">i</name></expr>]</index></name></expr></argument>, <argument pos:start="325:52" pos:end="325:64"><expr pos:start="325:52" pos:end="325:64"><name pos:start="325:52" pos:end="325:64"><name pos:start="325:52" pos:end="325:61">ne2000_irq</name><index pos:start="325:62" pos:end="325:64">[<expr pos:start="325:63" pos:end="325:63"><name pos:start="325:63" pos:end="325:63">i</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="327:29" pos:end="327:40"><expr pos:start="327:29" pos:end="327:40"><operator pos:start="327:29" pos:end="327:29">&amp;</operator><name pos:start="327:30" pos:end="327:40"><name pos:start="327:30" pos:end="327:37">nd_table</name><index pos:start="327:38" pos:end="327:40">[<expr pos:start="327:39" pos:end="327:39"><name pos:start="327:39" pos:end="327:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="329:11" pos:end="333:9">else <block pos:start="329:16" pos:end="333:9">{<block_content pos:start="331:13" pos:end="331:73">

            <expr_stmt pos:start="331:13" pos:end="331:73"><expr pos:start="331:13" pos:end="331:72"><call pos:start="331:13" pos:end="331:72"><name pos:start="331:13" pos:end="331:31">pci_nic_init_nofail</name><argument_list pos:start="331:32" pos:end="331:72">(<argument pos:start="331:33" pos:end="331:44"><expr pos:start="331:33" pos:end="331:44"><operator pos:start="331:33" pos:end="331:33">&amp;</operator><name pos:start="331:34" pos:end="331:44"><name pos:start="331:34" pos:end="331:41">nd_table</name><index pos:start="331:42" pos:end="331:44">[<expr pos:start="331:43" pos:end="331:43"><name pos:start="331:43" pos:end="331:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="331:47" pos:end="331:53"><expr pos:start="331:47" pos:end="331:53"><name pos:start="331:47" pos:end="331:53">pci_bus</name></expr></argument>, <argument pos:start="331:56" pos:end="331:65"><expr pos:start="331:56" pos:end="331:65"><literal type="string" pos:start="331:56" pos:end="331:65">"ne2k_pci"</literal></expr></argument>, <argument pos:start="331:68" pos:end="331:71"><expr pos:start="331:68" pos:end="331:71"><name pos:start="331:68" pos:end="331:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="339:5" pos:end="339:35"><expr pos:start="339:5" pos:end="339:34"><call pos:start="339:5" pos:end="339:34"><name pos:start="339:5" pos:end="339:17">ide_drive_get</name><argument_list pos:start="339:18" pos:end="339:34">(<argument pos:start="339:19" pos:end="339:20"><expr pos:start="339:19" pos:end="339:20"><name pos:start="339:19" pos:end="339:20">hd</name></expr></argument>, <argument pos:start="339:23" pos:end="339:33"><expr pos:start="339:23" pos:end="339:33"><name pos:start="339:23" pos:end="339:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="341:5" pos:end="349:5">for<control pos:start="341:8" pos:end="341:36">(<init pos:start="341:9" pos:end="341:14"><expr pos:start="341:9" pos:end="341:13"><name pos:start="341:9" pos:end="341:9">i</name> <operator pos:start="341:11" pos:end="341:11">=</operator> <literal type="number" pos:start="341:13" pos:end="341:13">0</literal></expr>;</init> <condition pos:start="341:16" pos:end="341:31"><expr pos:start="341:16" pos:end="341:30"><name pos:start="341:16" pos:end="341:16">i</name> <operator pos:start="341:18" pos:end="341:18">&lt;</operator> <name pos:start="341:20" pos:end="341:30">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="341:33" pos:end="341:35"><expr pos:start="341:33" pos:end="341:35"><name pos:start="341:33" pos:end="341:33">i</name><operator pos:start="341:34" pos:end="341:35">++</operator></expr></incr>)</control> <block pos:start="341:38" pos:end="349:5">{<block_content pos:start="343:9" pos:end="347:36">

        <expr_stmt pos:start="343:9" pos:end="347:36"><expr pos:start="343:9" pos:end="347:35"><call pos:start="343:9" pos:end="347:35"><name pos:start="343:9" pos:end="343:20">isa_ide_init</name><argument_list pos:start="343:21" pos:end="347:35">(<argument pos:start="343:22" pos:end="343:28"><expr pos:start="343:22" pos:end="343:28"><name pos:start="343:22" pos:end="343:28">isa_bus</name></expr></argument>, <argument pos:start="343:31" pos:end="343:43"><expr pos:start="343:31" pos:end="343:43"><name pos:start="343:31" pos:end="343:43"><name pos:start="343:31" pos:end="343:40">ide_iobase</name><index pos:start="343:41" pos:end="343:43">[<expr pos:start="343:42" pos:end="343:42"><name pos:start="343:42" pos:end="343:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="343:46" pos:end="343:59"><expr pos:start="343:46" pos:end="343:59"><name pos:start="343:46" pos:end="343:59"><name pos:start="343:46" pos:end="343:56">ide_iobase2</name><index pos:start="343:57" pos:end="343:59">[<expr pos:start="343:58" pos:end="343:58"><name pos:start="343:58" pos:end="343:58">i</name></expr>]</index></name></expr></argument>, <argument pos:start="343:62" pos:end="343:71"><expr pos:start="343:62" pos:end="343:71"><name pos:start="343:62" pos:end="343:71"><name pos:start="343:62" pos:end="343:68">ide_irq</name><index pos:start="343:69" pos:end="343:71">[<expr pos:start="343:70" pos:end="343:70"><name pos:start="343:70" pos:end="343:70">i</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="345:22" pos:end="345:30"><expr pos:start="345:22" pos:end="345:30"><name pos:start="345:22" pos:end="345:30"><name pos:start="345:22" pos:end="345:23">hd</name><index pos:start="345:24" pos:end="345:30">[<expr pos:start="345:25" pos:end="345:29"><literal type="number" pos:start="345:25" pos:end="345:25">2</literal> <operator pos:start="345:27" pos:end="345:27">*</operator> <name pos:start="345:29" pos:end="345:29">i</name></expr>]</index></name></expr></argument>,

		     <argument pos:start="347:22" pos:end="347:34"><expr pos:start="347:22" pos:end="347:34"><name pos:start="347:22" pos:end="347:34"><name pos:start="347:22" pos:end="347:23">hd</name><index pos:start="347:24" pos:end="347:34">[<expr pos:start="347:25" pos:end="347:33"><literal type="number" pos:start="347:25" pos:end="347:25">2</literal> <operator pos:start="347:27" pos:end="347:27">*</operator> <name pos:start="347:29" pos:end="347:29">i</name> <operator pos:start="347:31" pos:end="347:31">+</operator> <literal type="number" pos:start="347:33" pos:end="347:33">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="351:5" pos:end="351:40"><expr pos:start="351:5" pos:end="351:39"><call pos:start="351:5" pos:end="351:39"><name pos:start="351:5" pos:end="351:21">isa_create_simple</name><argument_list pos:start="351:22" pos:end="351:39">(<argument pos:start="351:23" pos:end="351:29"><expr pos:start="351:23" pos:end="351:29"><name pos:start="351:23" pos:end="351:29">isa_bus</name></expr></argument>, <argument pos:start="351:32" pos:end="351:38"><expr pos:start="351:32" pos:end="351:38"><literal type="string" pos:start="351:32" pos:end="351:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="355:5" pos:end="355:33"><expr pos:start="355:5" pos:end="355:32"><name pos:start="355:5" pos:end="355:7">cpu</name> <operator pos:start="355:9" pos:end="355:9">=</operator> <call pos:start="355:11" pos:end="355:32"><name pos:start="355:11" pos:end="355:21">POWERPC_CPU</name><argument_list pos:start="355:22" pos:end="355:32">(<argument pos:start="355:23" pos:end="355:31"><expr pos:start="355:23" pos:end="355:31"><name pos:start="355:23" pos:end="355:31">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:66"><expr pos:start="357:5" pos:end="357:65"><name pos:start="357:5" pos:end="357:22"><name pos:start="357:5" pos:end="357:11">sysctrl</name><operator pos:start="357:12" pos:end="357:13">-&gt;</operator><name pos:start="357:14" pos:end="357:22">reset_irq</name></name> <operator pos:start="357:24" pos:end="357:24">=</operator> <name pos:start="357:26" pos:end="357:65"><name pos:start="357:26" pos:end="357:28">cpu</name><operator pos:start="357:29" pos:end="357:30">-&gt;</operator><name pos:start="357:31" pos:end="357:33">env</name><operator pos:start="357:34" pos:end="357:34">.</operator><name pos:start="357:35" pos:end="357:44">irq_inputs</name><index pos:start="357:45" pos:end="357:65">[<expr pos:start="357:46" pos:end="357:64"><name pos:start="357:46" pos:end="357:64">PPC6xx_INPUT_HRESET</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="361:5" pos:end="361:73"><expr pos:start="361:5" pos:end="361:72"><call pos:start="361:5" pos:end="361:72"><name pos:start="361:5" pos:end="361:20">portio_list_init</name><argument_list pos:start="361:21" pos:end="361:72">(<argument pos:start="361:22" pos:end="361:30"><expr pos:start="361:22" pos:end="361:30"><name pos:start="361:22" pos:end="361:30">port_list</name></expr></argument>, <argument pos:start="361:33" pos:end="361:36"><expr pos:start="361:33" pos:end="361:36"><name pos:start="361:33" pos:end="361:36">NULL</name></expr></argument>, <argument pos:start="361:39" pos:end="361:54"><expr pos:start="361:39" pos:end="361:54"><name pos:start="361:39" pos:end="361:54">prep_portio_list</name></expr></argument>, <argument pos:start="361:57" pos:end="361:63"><expr pos:start="361:57" pos:end="361:63"><name pos:start="361:57" pos:end="361:63">sysctrl</name></expr></argument>, <argument pos:start="361:66" pos:end="361:71"><expr pos:start="361:66" pos:end="361:71"><literal type="string" pos:start="361:66" pos:end="361:71">"prep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="376:0"><expr pos:start="363:5" pos:end="363:62"><call pos:start="363:5" pos:end="363:62"><name pos:start="363:5" pos:end="363:19">portio_list_add</name><argument_list pos:start="363:20" pos:end="363:62">(<argument pos:start="363:21" pos:end="363:29"><expr pos:start="363:21" pos:end="363:29"><name pos:start="363:21" pos:end="363:29">port_list</name></expr></argument>, <argument pos:start="363:32" pos:end="363:56"><expr pos:start="363:32" pos:end="363:56"><call pos:start="363:32" pos:end="363:56"><name pos:start="363:32" pos:end="363:51">isa_address_space_io</name><argument_list pos:start="363:52" pos:end="363:56">(<argument pos:start="363:53" pos:end="363:55"><expr pos:start="363:53" pos:end="363:55"><name pos:start="363:53" pos:end="363:55">isa</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="363:59" pos:end="363:61"><expr pos:start="363:59" pos:end="363:61"><literal type="number" pos:start="363:59" pos:end="363:61">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="367:5" pos:end="367:51">/* PowerPC control and status register group */</comment>

<cpp:if pos:start="369:1" pos:end="369:5">#<cpp:directive pos:start="369:2" pos:end="369:3">if</cpp:directive> <expr pos:start="369:5" pos:end="369:5"><literal type="number" pos:start="369:5" pos:end="369:5">0</literal></expr></cpp:if>

    memory_region_init_io(xcsr, NULL, &amp;PPC_XCSR_ops, NULL, "ppc-xcsr", 0x1000);

    memory_region_add_subregion(sysmem, 0xFEFF0000, xcsr);

<cpp:endif pos:start="375:1" pos:end="375:6">#<cpp:directive pos:start="375:2" pos:end="375:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="379:5" pos:end="383:5"><if pos:start="379:5" pos:end="383:5">if <condition pos:start="379:8" pos:end="379:27">(<expr pos:start="379:9" pos:end="379:26"><call pos:start="379:9" pos:end="379:26"><name pos:start="379:9" pos:end="379:19">usb_enabled</name><argument_list pos:start="379:20" pos:end="379:26">(<argument pos:start="379:21" pos:end="379:25"><expr pos:start="379:21" pos:end="379:25"><name pos:start="379:21" pos:end="379:25">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="379:29" pos:end="383:5">{<block_content pos:start="381:9" pos:end="381:51">

        <expr_stmt pos:start="381:9" pos:end="381:51"><expr pos:start="381:9" pos:end="381:50"><call pos:start="381:9" pos:end="381:50"><name pos:start="381:9" pos:end="381:25">pci_create_simple</name><argument_list pos:start="381:26" pos:end="381:50">(<argument pos:start="381:27" pos:end="381:33"><expr pos:start="381:27" pos:end="381:33"><name pos:start="381:27" pos:end="381:33">pci_bus</name></expr></argument>, <argument pos:start="381:36" pos:end="381:37"><expr pos:start="381:36" pos:end="381:37"><operator pos:start="381:36" pos:end="381:36">-</operator><literal type="number" pos:start="381:37" pos:end="381:37">1</literal></expr></argument>, <argument pos:start="381:40" pos:end="381:49"><expr pos:start="381:40" pos:end="381:49"><literal type="string" pos:start="381:40" pos:end="381:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="387:5" pos:end="387:62"><expr pos:start="387:5" pos:end="387:61"><name pos:start="387:5" pos:end="387:10">m48t59</name> <operator pos:start="387:12" pos:end="387:12">=</operator> <call pos:start="387:14" pos:end="387:61"><name pos:start="387:14" pos:end="387:28">m48t59_init_isa</name><argument_list pos:start="387:29" pos:end="387:61">(<argument pos:start="387:30" pos:end="387:36"><expr pos:start="387:30" pos:end="387:36"><name pos:start="387:30" pos:end="387:36">isa_bus</name></expr></argument>, <argument pos:start="387:39" pos:end="387:44"><expr pos:start="387:39" pos:end="387:44"><literal type="number" pos:start="387:39" pos:end="387:44">0x0074</literal></expr></argument>, <argument pos:start="387:47" pos:end="387:56"><expr pos:start="387:47" pos:end="387:56"><name pos:start="387:47" pos:end="387:56">NVRAM_SIZE</name></expr></argument>, <argument pos:start="387:59" pos:end="387:60"><expr pos:start="387:59" pos:end="387:60"><literal type="number" pos:start="387:59" pos:end="387:60">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="389:5" pos:end="391:15"><if pos:start="389:5" pos:end="391:15">if <condition pos:start="389:8" pos:end="389:23">(<expr pos:start="389:9" pos:end="389:22"><name pos:start="389:9" pos:end="389:14">m48t59</name> <operator pos:start="389:16" pos:end="389:17">==</operator> <name pos:start="389:19" pos:end="389:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="391:9" pos:end="391:15"><block_content pos:start="391:9" pos:end="391:15">

        <return pos:start="391:9" pos:end="391:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:28"><expr pos:start="393:5" pos:end="393:27"><name pos:start="393:5" pos:end="393:18"><name pos:start="393:5" pos:end="393:11">sysctrl</name><operator pos:start="393:12" pos:end="393:13">-&gt;</operator><name pos:start="393:14" pos:end="393:18">nvram</name></name> <operator pos:start="393:20" pos:end="393:20">=</operator> <name pos:start="393:22" pos:end="393:27">m48t59</name></expr>;</expr_stmt>



    <comment type="block" pos:start="397:5" pos:end="397:26">/* Initialise NVRAM */</comment>

    <expr_stmt pos:start="399:5" pos:end="399:26"><expr pos:start="399:5" pos:end="399:25"><name pos:start="399:5" pos:end="399:16"><name pos:start="399:5" pos:end="399:9">nvram</name><operator pos:start="399:10" pos:end="399:10">.</operator><name pos:start="399:11" pos:end="399:16">opaque</name></name> <operator pos:start="399:18" pos:end="399:18">=</operator> <name pos:start="399:20" pos:end="399:25">m48t59</name></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:33"><expr pos:start="401:5" pos:end="401:32"><name pos:start="401:5" pos:end="401:17"><name pos:start="401:5" pos:end="401:9">nvram</name><operator pos:start="401:10" pos:end="401:10">.</operator><name pos:start="401:11" pos:end="401:17">read_fn</name></name> <operator pos:start="401:19" pos:end="401:19">=</operator> <operator pos:start="401:21" pos:end="401:21">&amp;</operator><name pos:start="401:22" pos:end="401:32">m48t59_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:35"><expr pos:start="403:5" pos:end="403:34"><name pos:start="403:5" pos:end="403:18"><name pos:start="403:5" pos:end="403:9">nvram</name><operator pos:start="403:10" pos:end="403:10">.</operator><name pos:start="403:11" pos:end="403:18">write_fn</name></name> <operator pos:start="403:20" pos:end="403:20">=</operator> <operator pos:start="403:22" pos:end="403:22">&amp;</operator><name pos:start="403:23" pos:end="403:34">m48t59_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="417:71"><expr pos:start="405:5" pos:end="417:70"><call pos:start="405:5" pos:end="417:70"><name pos:start="405:5" pos:end="405:24">PPC_NVRAM_set_params</name><argument_list pos:start="405:25" pos:end="417:70">(<argument pos:start="405:26" pos:end="405:31"><expr pos:start="405:26" pos:end="405:31"><operator pos:start="405:26" pos:end="405:26">&amp;</operator><name pos:start="405:27" pos:end="405:31">nvram</name></expr></argument>, <argument pos:start="405:34" pos:end="405:43"><expr pos:start="405:34" pos:end="405:43"><name pos:start="405:34" pos:end="405:43">NVRAM_SIZE</name></expr></argument>, <argument pos:start="405:46" pos:end="405:51"><expr pos:start="405:46" pos:end="405:51"><literal type="string" pos:start="405:46" pos:end="405:51">"PREP"</literal></expr></argument>, <argument pos:start="405:54" pos:end="405:61"><expr pos:start="405:54" pos:end="405:61"><name pos:start="405:54" pos:end="405:61">ram_size</name></expr></argument>, <argument pos:start="405:64" pos:end="405:78"><expr pos:start="405:64" pos:end="405:78"><name pos:start="405:64" pos:end="405:78">ppc_boot_device</name></expr></argument>,

                         <argument pos:start="407:26" pos:end="407:36"><expr pos:start="407:26" pos:end="407:36"><name pos:start="407:26" pos:end="407:36">kernel_base</name></expr></argument>, <argument pos:start="407:39" pos:end="407:49"><expr pos:start="407:39" pos:end="407:49"><name pos:start="407:39" pos:end="407:49">kernel_size</name></expr></argument>,

                         <argument pos:start="409:26" pos:end="409:39"><expr pos:start="409:26" pos:end="409:39"><name pos:start="409:26" pos:end="409:39">kernel_cmdline</name></expr></argument>,

                         <argument pos:start="411:26" pos:end="411:36"><expr pos:start="411:26" pos:end="411:36"><name pos:start="411:26" pos:end="411:36">initrd_base</name></expr></argument>, <argument pos:start="411:39" pos:end="411:49"><expr pos:start="411:39" pos:end="411:49"><name pos:start="411:39" pos:end="411:49">initrd_size</name></expr></argument>,

                         <comment type="block" pos:start="413:26" pos:end="413:72">/* XXX: need an option to load a NVRAM image */</comment>

                         <argument pos:start="415:26" pos:end="415:26"><expr pos:start="415:26" pos:end="415:26"><literal type="number" pos:start="415:26" pos:end="415:26">0</literal></expr></argument>,

                         <argument pos:start="417:26" pos:end="417:38"><expr pos:start="417:26" pos:end="417:38"><name pos:start="417:26" pos:end="417:38">graphic_width</name></expr></argument>, <argument pos:start="417:41" pos:end="417:54"><expr pos:start="417:41" pos:end="417:54"><name pos:start="417:41" pos:end="417:54">graphic_height</name></expr></argument>, <argument pos:start="417:57" pos:end="417:69"><expr pos:start="417:57" pos:end="417:69"><name pos:start="417:57" pos:end="417:69">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
