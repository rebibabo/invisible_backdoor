<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26781.c" pos:tabs="8"><function pos:start="1:1" pos:end="273:1"><type pos:start="1:1" pos:end="1:12"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">Aml</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:21">build_crs</name><parameter_list pos:start="1:22" pos:end="3:66">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:34">PCIHostState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">host</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:42"><decl pos:start="3:23" pos:end="3:42"><type pos:start="3:23" pos:end="3:42"><name pos:start="3:23" pos:end="3:31">GPtrArray</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">io_ranges</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:65"><decl pos:start="3:45" pos:end="3:65"><type pos:start="3:45" pos:end="3:65"><name pos:start="3:45" pos:end="3:53">GPtrArray</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:65">mem_ranges</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="273:1">{<block_content pos:start="7:5" pos:end="271:15">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">Aml</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:12">crs</name> <init pos:start="7:14" pos:end="7:38">= <expr pos:start="7:16" pos:end="7:38"><call pos:start="7:16" pos:end="7:38"><name pos:start="7:16" pos:end="7:36">aml_resource_template</name><argument_list pos:start="7:37" pos:end="7:38">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:19">max_bus</name> <init pos:start="9:21" pos:end="9:44">= <expr pos:start="9:23" pos:end="9:44"><call pos:start="9:23" pos:end="9:44"><name pos:start="9:23" pos:end="9:33">pci_bus_num</name><argument_list pos:start="9:34" pos:end="9:44">(<argument pos:start="9:35" pos:end="9:43"><expr pos:start="9:35" pos:end="9:43"><name pos:start="9:35" pos:end="9:43"><name pos:start="9:35" pos:end="9:38">host</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:43">bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:16">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">devfn</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="251:5">for <control pos:start="17:9" pos:end="17:68">(<init pos:start="17:10" pos:end="17:19"><expr pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:14">devfn</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr>;</init> <condition pos:start="17:21" pos:end="17:59"><expr pos:start="17:21" pos:end="17:58"><name pos:start="17:21" pos:end="17:25">devfn</name> <operator pos:start="17:27" pos:end="17:27">&lt;</operator> <call pos:start="17:29" pos:end="17:58"><name pos:start="17:29" pos:end="17:38">ARRAY_SIZE</name><argument_list pos:start="17:39" pos:end="17:58">(<argument pos:start="17:40" pos:end="17:57"><expr pos:start="17:40" pos:end="17:57"><name pos:start="17:40" pos:end="17:57"><name pos:start="17:40" pos:end="17:43">host</name><operator pos:start="17:44" pos:end="17:45">-&gt;</operator><name pos:start="17:46" pos:end="17:48">bus</name><operator pos:start="17:49" pos:end="17:50">-&gt;</operator><name pos:start="17:51" pos:end="17:57">devices</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="17:61" pos:end="17:67"><expr pos:start="17:61" pos:end="17:67"><name pos:start="17:61" pos:end="17:65">devfn</name><operator pos:start="17:66" pos:end="17:67">++</operator></expr></incr>)</control> <block pos:start="17:70" pos:end="251:5">{<block_content pos:start="19:9" pos:end="249:9">

        <decl_stmt pos:start="19:9" pos:end="19:14"><decl pos:start="19:9" pos:end="19:13"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:41"><decl pos:start="21:9" pos:end="21:27"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint64_t</name></type> <name pos:start="21:18" pos:end="21:27">range_base</name></decl>, <decl pos:start="21:30" pos:end="21:40"><type ref="prev" pos:start="21:9" pos:end="21:16"/><name pos:start="21:30" pos:end="21:40">range_limit</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:51"><decl pos:start="23:9" pos:end="23:50"><type pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:17">PCIDevice</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:22">dev</name> <init pos:start="23:24" pos:end="23:50">= <expr pos:start="23:26" pos:end="23:50"><name pos:start="23:26" pos:end="23:50"><name pos:start="23:26" pos:end="23:29">host</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:34">bus</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:43">devices</name><index pos:start="23:44" pos:end="23:50">[<expr pos:start="23:45" pos:end="23:49"><name pos:start="23:45" pos:end="23:49">devfn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:17">(<expr pos:start="27:13" pos:end="27:16"><operator pos:start="27:13" pos:end="27:13">!</operator><name pos:start="27:14" pos:end="27:16">dev</name></expr>)</condition> <block pos:start="27:19" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:21">

            <continue pos:start="29:13" pos:end="29:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <for pos:start="35:9" pos:end="107:9">for <control pos:start="35:13" pos:end="35:45">(<init pos:start="35:14" pos:end="35:19"><expr pos:start="35:14" pos:end="35:18"><name pos:start="35:14" pos:end="35:14">i</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr>;</init> <condition pos:start="35:21" pos:end="35:40"><expr pos:start="35:21" pos:end="35:39"><name pos:start="35:21" pos:end="35:21">i</name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <name pos:start="35:25" pos:end="35:39">PCI_NUM_REGIONS</name></expr>;</condition> <incr pos:start="35:42" pos:end="35:44"><expr pos:start="35:42" pos:end="35:44"><name pos:start="35:42" pos:end="35:42">i</name><operator pos:start="35:43" pos:end="35:44">++</operator></expr></incr>)</control> <block pos:start="35:47" pos:end="107:9">{<block_content pos:start="37:13" pos:end="105:13">

            <decl_stmt pos:start="37:13" pos:end="37:49"><decl pos:start="37:13" pos:end="37:48"><type pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:23">PCIIORegion</name> <modifier pos:start="37:25" pos:end="37:25">*</modifier></type><name pos:start="37:26" pos:end="37:26">r</name> <init pos:start="37:28" pos:end="37:48">= <expr pos:start="37:30" pos:end="37:48"><operator pos:start="37:30" pos:end="37:30">&amp;</operator><name pos:start="37:31" pos:end="37:48"><name pos:start="37:31" pos:end="37:33">dev</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:45">io_regions</name><index pos:start="37:46" pos:end="37:48">[<expr pos:start="37:47" pos:end="37:47"><name pos:start="37:47" pos:end="37:47">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:22">range_base</name> <operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:32"><name pos:start="41:26" pos:end="41:26">r</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:32">addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:48"><expr pos:start="43:13" pos:end="43:47"><name pos:start="43:13" pos:end="43:23">range_limit</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <name pos:start="43:27" pos:end="43:33"><name pos:start="43:27" pos:end="43:27">r</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:33">addr</name></name> <operator pos:start="43:35" pos:end="43:35">+</operator> <name pos:start="43:37" pos:end="43:43"><name pos:start="43:37" pos:end="43:37">r</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:43">size</name></name> <operator pos:start="43:45" pos:end="43:45">-</operator> <literal type="number" pos:start="43:47" pos:end="43:47">1</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="47:13" pos:end="53:15">/*

             * Work-around for old bioses

             * that do not support multiple root buses

             */</comment>

            <if_stmt pos:start="55:13" pos:end="59:13"><if pos:start="55:13" pos:end="59:13">if <condition pos:start="55:16" pos:end="55:56">(<expr pos:start="55:17" pos:end="55:55"><operator pos:start="55:17" pos:end="55:17">!</operator><name pos:start="55:18" pos:end="55:27">range_base</name> <operator pos:start="55:29" pos:end="55:30">||</operator> <name pos:start="55:32" pos:end="55:41">range_base</name> <operator pos:start="55:43" pos:end="55:43">&gt;</operator> <name pos:start="55:45" pos:end="55:55">range_limit</name></expr>)</condition> <block pos:start="55:58" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:25">

                <continue pos:start="57:17" pos:end="57:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="63:13" pos:end="105:13"><if pos:start="63:13" pos:end="83:13">if <condition pos:start="63:16" pos:end="63:52">(<expr pos:start="63:17" pos:end="63:51"><name pos:start="63:17" pos:end="63:23"><name pos:start="63:17" pos:end="63:17">r</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:23">type</name></name> <operator pos:start="63:25" pos:end="63:25">&amp;</operator> <name pos:start="63:27" pos:end="63:51">PCI_BASE_ADDRESS_SPACE_IO</name></expr>)</condition> <block pos:start="63:54" pos:end="83:13">{<block_content pos:start="65:17" pos:end="81:69">

                <expr_stmt pos:start="65:17" pos:end="79:63"><expr pos:start="65:17" pos:end="79:62"><call pos:start="65:17" pos:end="79:62"><name pos:start="65:17" pos:end="65:26">aml_append</name><argument_list pos:start="65:27" pos:end="79:62">(<argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">crs</name></expr></argument>,

                    <argument pos:start="67:21" pos:end="79:61"><expr pos:start="67:21" pos:end="79:61"><call pos:start="67:21" pos:end="79:61"><name pos:start="67:21" pos:end="67:31">aml_word_io</name><argument_list pos:start="67:32" pos:end="79:61">(<argument pos:start="67:33" pos:end="67:45"><expr pos:start="67:33" pos:end="67:45"><name pos:start="67:33" pos:end="67:45">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="67:48" pos:end="67:60"><expr pos:start="67:48" pos:end="67:60"><name pos:start="67:48" pos:end="67:60">AML_MAX_FIXED</name></expr></argument>,

                                <argument pos:start="69:33" pos:end="69:46"><expr pos:start="69:33" pos:end="69:46"><name pos:start="69:33" pos:end="69:46">AML_POS_DECODE</name></expr></argument>, <argument pos:start="69:49" pos:end="69:64"><expr pos:start="69:49" pos:end="69:64"><name pos:start="69:49" pos:end="69:64">AML_ENTIRE_RANGE</name></expr></argument>,

                                <argument pos:start="71:33" pos:end="71:33"><expr pos:start="71:33" pos:end="71:33"><literal type="number" pos:start="71:33" pos:end="71:33">0</literal></expr></argument>,

                                <argument pos:start="73:33" pos:end="73:42"><expr pos:start="73:33" pos:end="73:42"><name pos:start="73:33" pos:end="73:42">range_base</name></expr></argument>,

                                <argument pos:start="75:33" pos:end="75:43"><expr pos:start="75:33" pos:end="75:43"><name pos:start="75:33" pos:end="75:43">range_limit</name></expr></argument>,

                                <argument pos:start="77:33" pos:end="77:33"><expr pos:start="77:33" pos:end="77:33"><literal type="number" pos:start="77:33" pos:end="77:33">0</literal></expr></argument>,

                                <argument pos:start="79:33" pos:end="79:60"><expr pos:start="79:33" pos:end="79:60"><name pos:start="79:33" pos:end="79:43">range_limit</name> <operator pos:start="79:45" pos:end="79:45">-</operator> <name pos:start="79:47" pos:end="79:56">range_base</name> <operator pos:start="79:58" pos:end="79:58">+</operator> <literal type="number" pos:start="79:60" pos:end="79:60">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:69"><expr pos:start="81:17" pos:end="81:68"><call pos:start="81:17" pos:end="81:68"><name pos:start="81:17" pos:end="81:32">crs_range_insert</name><argument_list pos:start="81:33" pos:end="81:68">(<argument pos:start="81:34" pos:end="81:42"><expr pos:start="81:34" pos:end="81:42"><name pos:start="81:34" pos:end="81:42">io_ranges</name></expr></argument>, <argument pos:start="81:45" pos:end="81:54"><expr pos:start="81:45" pos:end="81:54"><name pos:start="81:45" pos:end="81:54">range_base</name></expr></argument>, <argument pos:start="81:57" pos:end="81:67"><expr pos:start="81:57" pos:end="81:67"><name pos:start="81:57" pos:end="81:67">range_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="83:15" pos:end="105:13">else <block pos:start="83:20" pos:end="105:13">{<block_content pos:start="85:17" pos:end="103:70"> <comment type="block" pos:start="83:22" pos:end="83:35">/* "memory" */</comment>

                <expr_stmt pos:start="85:17" pos:end="101:68"><expr pos:start="85:17" pos:end="101:67"><call pos:start="85:17" pos:end="101:67"><name pos:start="85:17" pos:end="85:26">aml_append</name><argument_list pos:start="85:27" pos:end="101:67">(<argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">crs</name></expr></argument>,

                    <argument pos:start="87:21" pos:end="101:66"><expr pos:start="87:21" pos:end="101:66"><call pos:start="87:21" pos:end="101:66"><name pos:start="87:21" pos:end="87:36">aml_dword_memory</name><argument_list pos:start="87:37" pos:end="101:66">(<argument pos:start="87:38" pos:end="87:51"><expr pos:start="87:38" pos:end="87:51"><name pos:start="87:38" pos:end="87:51">AML_POS_DECODE</name></expr></argument>, <argument pos:start="87:54" pos:end="87:66"><expr pos:start="87:54" pos:end="87:66"><name pos:start="87:54" pos:end="87:66">AML_MIN_FIXED</name></expr></argument>,

                                     <argument pos:start="89:38" pos:end="89:50"><expr pos:start="89:38" pos:end="89:50"><name pos:start="89:38" pos:end="89:50">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="89:53" pos:end="89:69"><expr pos:start="89:53" pos:end="89:69"><name pos:start="89:53" pos:end="89:69">AML_NON_CACHEABLE</name></expr></argument>,

                                     <argument pos:start="91:38" pos:end="91:51"><expr pos:start="91:38" pos:end="91:51"><name pos:start="91:38" pos:end="91:51">AML_READ_WRITE</name></expr></argument>,

                                     <argument pos:start="93:38" pos:end="93:38"><expr pos:start="93:38" pos:end="93:38"><literal type="number" pos:start="93:38" pos:end="93:38">0</literal></expr></argument>,

                                     <argument pos:start="95:38" pos:end="95:47"><expr pos:start="95:38" pos:end="95:47"><name pos:start="95:38" pos:end="95:47">range_base</name></expr></argument>,

                                     <argument pos:start="97:38" pos:end="97:48"><expr pos:start="97:38" pos:end="97:48"><name pos:start="97:38" pos:end="97:48">range_limit</name></expr></argument>,

                                     <argument pos:start="99:38" pos:end="99:38"><expr pos:start="99:38" pos:end="99:38"><literal type="number" pos:start="99:38" pos:end="99:38">0</literal></expr></argument>,

                                     <argument pos:start="101:38" pos:end="101:65"><expr pos:start="101:38" pos:end="101:65"><name pos:start="101:38" pos:end="101:48">range_limit</name> <operator pos:start="101:50" pos:end="101:50">-</operator> <name pos:start="101:52" pos:end="101:61">range_base</name> <operator pos:start="101:63" pos:end="101:63">+</operator> <literal type="number" pos:start="101:65" pos:end="101:65">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:70"><expr pos:start="103:17" pos:end="103:69"><call pos:start="103:17" pos:end="103:69"><name pos:start="103:17" pos:end="103:32">crs_range_insert</name><argument_list pos:start="103:33" pos:end="103:69">(<argument pos:start="103:34" pos:end="103:43"><expr pos:start="103:34" pos:end="103:43"><name pos:start="103:34" pos:end="103:43">mem_ranges</name></expr></argument>, <argument pos:start="103:46" pos:end="103:55"><expr pos:start="103:46" pos:end="103:55"><name pos:start="103:46" pos:end="103:55">range_base</name></expr></argument>, <argument pos:start="103:58" pos:end="103:68"><expr pos:start="103:58" pos:end="103:68"><name pos:start="103:58" pos:end="103:68">range_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="111:9" pos:end="111:78"><expr pos:start="111:9" pos:end="111:77"><name pos:start="111:9" pos:end="111:12">type</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <name pos:start="111:16" pos:end="111:43"><name pos:start="111:16" pos:end="111:18">dev</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:26">config</name><index pos:start="111:27" pos:end="111:43">[<expr pos:start="111:28" pos:end="111:42"><name pos:start="111:28" pos:end="111:42">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="111:45" pos:end="111:45">&amp;</operator> <operator pos:start="111:47" pos:end="111:47">~</operator><name pos:start="111:48" pos:end="111:77">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="249:9"><if pos:start="113:9" pos:end="249:9">if <condition pos:start="113:12" pos:end="113:43">(<expr pos:start="113:13" pos:end="113:42"><name pos:start="113:13" pos:end="113:16">type</name> <operator pos:start="113:18" pos:end="113:19">==</operator> <name pos:start="113:21" pos:end="113:42">PCI_HEADER_TYPE_BRIDGE</name></expr>)</condition> <block pos:start="113:45" pos:end="249:9">{<block_content pos:start="115:13" pos:end="247:13">

            <decl_stmt pos:start="115:13" pos:end="115:67"><decl pos:start="115:13" pos:end="115:66"><type pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:19">uint8_t</name></type> <name pos:start="115:21" pos:end="115:31">subordinate</name> <init pos:start="115:33" pos:end="115:66">= <expr pos:start="115:35" pos:end="115:66"><name pos:start="115:35" pos:end="115:66"><name pos:start="115:35" pos:end="115:37">dev</name><operator pos:start="115:38" pos:end="115:39">-&gt;</operator><name pos:start="115:40" pos:end="115:45">config</name><index pos:start="115:46" pos:end="115:66">[<expr pos:start="115:47" pos:end="115:65"><name pos:start="115:47" pos:end="115:65">PCI_SUBORDINATE_BUS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="117:13" pos:end="121:13"><if pos:start="117:13" pos:end="121:13">if <condition pos:start="117:16" pos:end="117:38">(<expr pos:start="117:17" pos:end="117:37"><name pos:start="117:17" pos:end="117:27">subordinate</name> <operator pos:start="117:29" pos:end="117:29">&gt;</operator> <name pos:start="117:31" pos:end="117:37">max_bus</name></expr>)</condition> <block pos:start="117:40" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:38">

                <expr_stmt pos:start="119:17" pos:end="119:38"><expr pos:start="119:17" pos:end="119:37"><name pos:start="119:17" pos:end="119:23">max_bus</name> <operator pos:start="119:25" pos:end="119:25">=</operator> <name pos:start="119:27" pos:end="119:37">subordinate</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="125:13" pos:end="125:77"><expr pos:start="125:13" pos:end="125:76"><name pos:start="125:13" pos:end="125:22">range_base</name> <operator pos:start="125:24" pos:end="125:24">=</operator> <call pos:start="125:26" pos:end="125:76"><name pos:start="125:26" pos:end="125:44">pci_bridge_get_base</name><argument_list pos:start="125:45" pos:end="125:76">(<argument pos:start="125:46" pos:end="125:48"><expr pos:start="125:46" pos:end="125:48"><name pos:start="125:46" pos:end="125:48">dev</name></expr></argument>, <argument pos:start="125:51" pos:end="125:75"><expr pos:start="125:51" pos:end="125:75"><name pos:start="125:51" pos:end="125:75">PCI_BASE_ADDRESS_SPACE_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:79"><expr pos:start="127:13" pos:end="127:78"><name pos:start="127:13" pos:end="127:23">range_limit</name> <operator pos:start="127:25" pos:end="127:25">=</operator> <call pos:start="127:27" pos:end="127:78"><name pos:start="127:27" pos:end="127:46">pci_bridge_get_limit</name><argument_list pos:start="127:47" pos:end="127:78">(<argument pos:start="127:48" pos:end="127:50"><expr pos:start="127:48" pos:end="127:50"><name pos:start="127:48" pos:end="127:50">dev</name></expr></argument>, <argument pos:start="127:53" pos:end="127:77"><expr pos:start="127:53" pos:end="127:77"><name pos:start="127:53" pos:end="127:77">PCI_BASE_ADDRESS_SPACE_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="131:13" pos:end="137:15">/*

             * Work-around for old bioses

             * that do not support multiple root buses

             */</comment>

            <if_stmt pos:start="139:13" pos:end="159:13"><if pos:start="139:13" pos:end="159:13">if <condition pos:start="139:16" pos:end="139:55">(<expr pos:start="139:17" pos:end="139:54"><name pos:start="139:17" pos:end="139:26">range_base</name> <operator pos:start="139:28" pos:end="139:29">||</operator> <name pos:start="139:31" pos:end="139:40">range_base</name> <operator pos:start="139:42" pos:end="139:42">&gt;</operator> <name pos:start="139:44" pos:end="139:54">range_limit</name></expr>)</condition> <block pos:start="139:57" pos:end="159:13">{<block_content pos:start="141:17" pos:end="157:69">

                <expr_stmt pos:start="141:17" pos:end="155:70"><expr pos:start="141:17" pos:end="155:69"><call pos:start="141:17" pos:end="155:69"><name pos:start="141:17" pos:end="141:26">aml_append</name><argument_list pos:start="141:27" pos:end="155:69">(<argument pos:start="141:28" pos:end="141:30"><expr pos:start="141:28" pos:end="141:30"><name pos:start="141:28" pos:end="141:30">crs</name></expr></argument>,

                           <argument pos:start="143:28" pos:end="155:68"><expr pos:start="143:28" pos:end="155:68"><call pos:start="143:28" pos:end="155:68"><name pos:start="143:28" pos:end="143:38">aml_word_io</name><argument_list pos:start="143:39" pos:end="155:68">(<argument pos:start="143:40" pos:end="143:52"><expr pos:start="143:40" pos:end="143:52"><name pos:start="143:40" pos:end="143:52">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="143:55" pos:end="143:67"><expr pos:start="143:55" pos:end="143:67"><name pos:start="143:55" pos:end="143:67">AML_MAX_FIXED</name></expr></argument>,

                                       <argument pos:start="145:40" pos:end="145:53"><expr pos:start="145:40" pos:end="145:53"><name pos:start="145:40" pos:end="145:53">AML_POS_DECODE</name></expr></argument>, <argument pos:start="145:56" pos:end="145:71"><expr pos:start="145:56" pos:end="145:71"><name pos:start="145:56" pos:end="145:71">AML_ENTIRE_RANGE</name></expr></argument>,

                                       <argument pos:start="147:40" pos:end="147:40"><expr pos:start="147:40" pos:end="147:40"><literal type="number" pos:start="147:40" pos:end="147:40">0</literal></expr></argument>,

                                       <argument pos:start="149:40" pos:end="149:49"><expr pos:start="149:40" pos:end="149:49"><name pos:start="149:40" pos:end="149:49">range_base</name></expr></argument>,

                                       <argument pos:start="151:40" pos:end="151:50"><expr pos:start="151:40" pos:end="151:50"><name pos:start="151:40" pos:end="151:50">range_limit</name></expr></argument>,

                                       <argument pos:start="153:40" pos:end="153:40"><expr pos:start="153:40" pos:end="153:40"><literal type="number" pos:start="153:40" pos:end="153:40">0</literal></expr></argument>,

                                       <argument pos:start="155:40" pos:end="155:67"><expr pos:start="155:40" pos:end="155:67"><name pos:start="155:40" pos:end="155:50">range_limit</name> <operator pos:start="155:52" pos:end="155:52">-</operator> <name pos:start="155:54" pos:end="155:63">range_base</name> <operator pos:start="155:65" pos:end="155:65">+</operator> <literal type="number" pos:start="155:67" pos:end="155:67">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:69"><expr pos:start="157:17" pos:end="157:68"><call pos:start="157:17" pos:end="157:68"><name pos:start="157:17" pos:end="157:32">crs_range_insert</name><argument_list pos:start="157:33" pos:end="157:68">(<argument pos:start="157:34" pos:end="157:42"><expr pos:start="157:34" pos:end="157:42"><name pos:start="157:34" pos:end="157:42">io_ranges</name></expr></argument>, <argument pos:start="157:45" pos:end="157:54"><expr pos:start="157:45" pos:end="157:54"><name pos:start="157:45" pos:end="157:54">range_base</name></expr></argument>, <argument pos:start="157:57" pos:end="157:67"><expr pos:start="157:57" pos:end="157:67"><name pos:start="157:57" pos:end="157:67">range_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="163:13" pos:end="165:72"><expr pos:start="163:13" pos:end="165:71"><name pos:start="163:13" pos:end="163:22">range_base</name> <operator pos:start="163:24" pos:end="163:24">=</operator>

                <call pos:start="165:17" pos:end="165:71"><name pos:start="165:17" pos:end="165:35">pci_bridge_get_base</name><argument_list pos:start="165:36" pos:end="165:71">(<argument pos:start="165:37" pos:end="165:39"><expr pos:start="165:37" pos:end="165:39"><name pos:start="165:37" pos:end="165:39">dev</name></expr></argument>, <argument pos:start="165:42" pos:end="165:70"><expr pos:start="165:42" pos:end="165:70"><name pos:start="165:42" pos:end="165:70">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="169:73"><expr pos:start="167:13" pos:end="169:72"><name pos:start="167:13" pos:end="167:23">range_limit</name> <operator pos:start="167:25" pos:end="167:25">=</operator>

                <call pos:start="169:17" pos:end="169:72"><name pos:start="169:17" pos:end="169:36">pci_bridge_get_limit</name><argument_list pos:start="169:37" pos:end="169:72">(<argument pos:start="169:38" pos:end="169:40"><expr pos:start="169:38" pos:end="169:40"><name pos:start="169:38" pos:end="169:40">dev</name></expr></argument>, <argument pos:start="169:43" pos:end="169:71"><expr pos:start="169:43" pos:end="169:71"><name pos:start="169:43" pos:end="169:71">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="173:13" pos:end="179:15">/*

             * Work-around for old bioses

             * that do not support multiple root buses

             */</comment>

            <if_stmt pos:start="181:13" pos:end="203:11"><if pos:start="181:13" pos:end="203:11">if <condition pos:start="181:16" pos:end="181:55">(<expr pos:start="181:17" pos:end="181:54"><name pos:start="181:17" pos:end="181:26">range_base</name> <operator pos:start="181:28" pos:end="181:29">||</operator> <name pos:start="181:31" pos:end="181:40">range_base</name> <operator pos:start="181:42" pos:end="181:42">&gt;</operator> <name pos:start="181:44" pos:end="181:54">range_limit</name></expr>)</condition> <block pos:start="181:57" pos:end="203:11">{<block_content pos:start="183:17" pos:end="201:70">

                <expr_stmt pos:start="183:17" pos:end="199:75"><expr pos:start="183:17" pos:end="199:74"><call pos:start="183:17" pos:end="199:74"><name pos:start="183:17" pos:end="183:26">aml_append</name><argument_list pos:start="183:27" pos:end="199:74">(<argument pos:start="183:28" pos:end="183:30"><expr pos:start="183:28" pos:end="183:30"><name pos:start="183:28" pos:end="183:30">crs</name></expr></argument>,

                           <argument pos:start="185:28" pos:end="199:73"><expr pos:start="185:28" pos:end="199:73"><call pos:start="185:28" pos:end="199:73"><name pos:start="185:28" pos:end="185:43">aml_dword_memory</name><argument_list pos:start="185:44" pos:end="199:73">(<argument pos:start="185:45" pos:end="185:58"><expr pos:start="185:45" pos:end="185:58"><name pos:start="185:45" pos:end="185:58">AML_POS_DECODE</name></expr></argument>, <argument pos:start="185:61" pos:end="185:73"><expr pos:start="185:61" pos:end="185:73"><name pos:start="185:61" pos:end="185:73">AML_MIN_FIXED</name></expr></argument>,

                                            <argument pos:start="187:45" pos:end="187:57"><expr pos:start="187:45" pos:end="187:57"><name pos:start="187:45" pos:end="187:57">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="187:60" pos:end="187:76"><expr pos:start="187:60" pos:end="187:76"><name pos:start="187:60" pos:end="187:76">AML_NON_CACHEABLE</name></expr></argument>,

                                            <argument pos:start="189:45" pos:end="189:58"><expr pos:start="189:45" pos:end="189:58"><name pos:start="189:45" pos:end="189:58">AML_READ_WRITE</name></expr></argument>,

                                            <argument pos:start="191:45" pos:end="191:45"><expr pos:start="191:45" pos:end="191:45"><literal type="number" pos:start="191:45" pos:end="191:45">0</literal></expr></argument>,

                                            <argument pos:start="193:45" pos:end="193:54"><expr pos:start="193:45" pos:end="193:54"><name pos:start="193:45" pos:end="193:54">range_base</name></expr></argument>,

                                            <argument pos:start="195:45" pos:end="195:55"><expr pos:start="195:45" pos:end="195:55"><name pos:start="195:45" pos:end="195:55">range_limit</name></expr></argument>,

                                            <argument pos:start="197:45" pos:end="197:45"><expr pos:start="197:45" pos:end="197:45"><literal type="number" pos:start="197:45" pos:end="197:45">0</literal></expr></argument>,

                                            <argument pos:start="199:45" pos:end="199:72"><expr pos:start="199:45" pos:end="199:72"><name pos:start="199:45" pos:end="199:55">range_limit</name> <operator pos:start="199:57" pos:end="199:57">-</operator> <name pos:start="199:59" pos:end="199:68">range_base</name> <operator pos:start="199:70" pos:end="199:70">+</operator> <literal type="number" pos:start="199:72" pos:end="199:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:70"><expr pos:start="201:17" pos:end="201:69"><call pos:start="201:17" pos:end="201:69"><name pos:start="201:17" pos:end="201:32">crs_range_insert</name><argument_list pos:start="201:33" pos:end="201:69">(<argument pos:start="201:34" pos:end="201:43"><expr pos:start="201:34" pos:end="201:43"><name pos:start="201:34" pos:end="201:43">mem_ranges</name></expr></argument>, <argument pos:start="201:46" pos:end="201:55"><expr pos:start="201:46" pos:end="201:55"><name pos:start="201:46" pos:end="201:55">range_base</name></expr></argument>, <argument pos:start="201:58" pos:end="201:68"><expr pos:start="201:58" pos:end="201:68"><name pos:start="201:58" pos:end="201:68">range_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="207:13" pos:end="209:72"><expr pos:start="207:13" pos:end="209:71"><name pos:start="207:13" pos:end="207:22">range_base</name> <operator pos:start="207:24" pos:end="207:24">=</operator>

                <call pos:start="209:17" pos:end="209:71"><name pos:start="209:17" pos:end="209:35">pci_bridge_get_base</name><argument_list pos:start="209:36" pos:end="209:71">(<argument pos:start="209:37" pos:end="209:39"><expr pos:start="209:37" pos:end="209:39"><name pos:start="209:37" pos:end="209:39">dev</name></expr></argument>, <argument pos:start="209:42" pos:end="209:70"><expr pos:start="209:42" pos:end="209:70"><name pos:start="209:42" pos:end="209:70">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="213:73"><expr pos:start="211:13" pos:end="213:72"><name pos:start="211:13" pos:end="211:23">range_limit</name> <operator pos:start="211:25" pos:end="211:25">=</operator>

                <call pos:start="213:17" pos:end="213:72"><name pos:start="213:17" pos:end="213:36">pci_bridge_get_limit</name><argument_list pos:start="213:37" pos:end="213:72">(<argument pos:start="213:38" pos:end="213:40"><expr pos:start="213:38" pos:end="213:40"><name pos:start="213:38" pos:end="213:40">dev</name></expr></argument>, <argument pos:start="213:43" pos:end="213:71"><expr pos:start="213:43" pos:end="213:71"><name pos:start="213:43" pos:end="213:71">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="217:13" pos:end="223:15">/*

             * Work-around for old bioses

             * that do not support multiple root buses

             */</comment>

            <if_stmt pos:start="225:13" pos:end="247:13"><if pos:start="225:13" pos:end="247:13">if <condition pos:start="225:16" pos:end="225:55">(<expr pos:start="225:17" pos:end="225:54"><name pos:start="225:17" pos:end="225:26">range_base</name> <operator pos:start="225:28" pos:end="225:29">||</operator> <name pos:start="225:31" pos:end="225:40">range_base</name> <operator pos:start="225:42" pos:end="225:42">&gt;</operator> <name pos:start="225:44" pos:end="225:54">range_limit</name></expr>)</condition> <block pos:start="225:57" pos:end="247:13">{<block_content pos:start="227:17" pos:end="245:70">

                <expr_stmt pos:start="227:17" pos:end="243:75"><expr pos:start="227:17" pos:end="243:74"><call pos:start="227:17" pos:end="243:74"><name pos:start="227:17" pos:end="227:26">aml_append</name><argument_list pos:start="227:27" pos:end="243:74">(<argument pos:start="227:28" pos:end="227:30"><expr pos:start="227:28" pos:end="227:30"><name pos:start="227:28" pos:end="227:30">crs</name></expr></argument>,

                           <argument pos:start="229:28" pos:end="243:73"><expr pos:start="229:28" pos:end="243:73"><call pos:start="229:28" pos:end="243:73"><name pos:start="229:28" pos:end="229:43">aml_dword_memory</name><argument_list pos:start="229:44" pos:end="243:73">(<argument pos:start="229:45" pos:end="229:58"><expr pos:start="229:45" pos:end="229:58"><name pos:start="229:45" pos:end="229:58">AML_POS_DECODE</name></expr></argument>, <argument pos:start="229:61" pos:end="229:73"><expr pos:start="229:61" pos:end="229:73"><name pos:start="229:61" pos:end="229:73">AML_MIN_FIXED</name></expr></argument>,

                                            <argument pos:start="231:45" pos:end="231:57"><expr pos:start="231:45" pos:end="231:57"><name pos:start="231:45" pos:end="231:57">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="231:60" pos:end="231:76"><expr pos:start="231:60" pos:end="231:76"><name pos:start="231:60" pos:end="231:76">AML_NON_CACHEABLE</name></expr></argument>,

                                            <argument pos:start="233:45" pos:end="233:58"><expr pos:start="233:45" pos:end="233:58"><name pos:start="233:45" pos:end="233:58">AML_READ_WRITE</name></expr></argument>,

                                            <argument pos:start="235:45" pos:end="235:45"><expr pos:start="235:45" pos:end="235:45"><literal type="number" pos:start="235:45" pos:end="235:45">0</literal></expr></argument>,

                                            <argument pos:start="237:45" pos:end="237:54"><expr pos:start="237:45" pos:end="237:54"><name pos:start="237:45" pos:end="237:54">range_base</name></expr></argument>,

                                            <argument pos:start="239:45" pos:end="239:55"><expr pos:start="239:45" pos:end="239:55"><name pos:start="239:45" pos:end="239:55">range_limit</name></expr></argument>,

                                            <argument pos:start="241:45" pos:end="241:45"><expr pos:start="241:45" pos:end="241:45"><literal type="number" pos:start="241:45" pos:end="241:45">0</literal></expr></argument>,

                                            <argument pos:start="243:45" pos:end="243:72"><expr pos:start="243:45" pos:end="243:72"><name pos:start="243:45" pos:end="243:55">range_limit</name> <operator pos:start="243:57" pos:end="243:57">-</operator> <name pos:start="243:59" pos:end="243:68">range_base</name> <operator pos:start="243:70" pos:end="243:70">+</operator> <literal type="number" pos:start="243:72" pos:end="243:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:70"><expr pos:start="245:17" pos:end="245:69"><call pos:start="245:17" pos:end="245:69"><name pos:start="245:17" pos:end="245:32">crs_range_insert</name><argument_list pos:start="245:33" pos:end="245:69">(<argument pos:start="245:34" pos:end="245:43"><expr pos:start="245:34" pos:end="245:43"><name pos:start="245:34" pos:end="245:43">mem_ranges</name></expr></argument>, <argument pos:start="245:46" pos:end="245:55"><expr pos:start="245:46" pos:end="245:55"><name pos:start="245:46" pos:end="245:55">range_base</name></expr></argument>, <argument pos:start="245:58" pos:end="245:68"><expr pos:start="245:58" pos:end="245:68"><name pos:start="245:58" pos:end="245:68">range_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="255:5" pos:end="267:67"><expr pos:start="255:5" pos:end="267:66"><call pos:start="255:5" pos:end="267:66"><name pos:start="255:5" pos:end="255:14">aml_append</name><argument_list pos:start="255:15" pos:end="267:66">(<argument pos:start="255:16" pos:end="255:18"><expr pos:start="255:16" pos:end="255:18"><name pos:start="255:16" pos:end="255:18">crs</name></expr></argument>,

        <argument pos:start="257:9" pos:end="267:65"><expr pos:start="257:9" pos:end="267:65"><call pos:start="257:9" pos:end="267:65"><name pos:start="257:9" pos:end="257:27">aml_word_bus_number</name><argument_list pos:start="257:28" pos:end="267:65">(<argument pos:start="257:29" pos:end="257:41"><expr pos:start="257:29" pos:end="257:41"><name pos:start="257:29" pos:end="257:41">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="257:44" pos:end="257:56"><expr pos:start="257:44" pos:end="257:56"><name pos:start="257:44" pos:end="257:56">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="257:59" pos:end="257:72"><expr pos:start="257:59" pos:end="257:72"><name pos:start="257:59" pos:end="257:72">AML_POS_DECODE</name></expr></argument>,

                            <argument pos:start="259:29" pos:end="259:29"><expr pos:start="259:29" pos:end="259:29"><literal type="number" pos:start="259:29" pos:end="259:29">0</literal></expr></argument>,

                            <argument pos:start="261:29" pos:end="261:50"><expr pos:start="261:29" pos:end="261:50"><call pos:start="261:29" pos:end="261:50"><name pos:start="261:29" pos:end="261:39">pci_bus_num</name><argument_list pos:start="261:40" pos:end="261:50">(<argument pos:start="261:41" pos:end="261:49"><expr pos:start="261:41" pos:end="261:49"><name pos:start="261:41" pos:end="261:49"><name pos:start="261:41" pos:end="261:44">host</name><operator pos:start="261:45" pos:end="261:46">-&gt;</operator><name pos:start="261:47" pos:end="261:49">bus</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="263:29" pos:end="263:35"><expr pos:start="263:29" pos:end="263:35"><name pos:start="263:29" pos:end="263:35">max_bus</name></expr></argument>,

                            <argument pos:start="265:29" pos:end="265:29"><expr pos:start="265:29" pos:end="265:29"><literal type="number" pos:start="265:29" pos:end="265:29">0</literal></expr></argument>,

                            <argument pos:start="267:29" pos:end="267:64"><expr pos:start="267:29" pos:end="267:64"><name pos:start="267:29" pos:end="267:35">max_bus</name> <operator pos:start="267:37" pos:end="267:37">-</operator> <call pos:start="267:39" pos:end="267:60"><name pos:start="267:39" pos:end="267:49">pci_bus_num</name><argument_list pos:start="267:50" pos:end="267:60">(<argument pos:start="267:51" pos:end="267:59"><expr pos:start="267:51" pos:end="267:59"><name pos:start="267:51" pos:end="267:59"><name pos:start="267:51" pos:end="267:54">host</name><operator pos:start="267:55" pos:end="267:56">-&gt;</operator><name pos:start="267:57" pos:end="267:59">bus</name></name></expr></argument>)</argument_list></call> <operator pos:start="267:62" pos:end="267:62">+</operator> <literal type="number" pos:start="267:64" pos:end="267:64">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="271:5" pos:end="271:15">return <expr pos:start="271:12" pos:end="271:14"><name pos:start="271:12" pos:end="271:14">crs</name></expr>;</return>

</block_content>}</block></function>
</unit>
