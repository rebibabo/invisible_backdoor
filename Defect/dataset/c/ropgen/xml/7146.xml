<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7146.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:24">void</name></type> <name pos:start="1:26" pos:end="1:42">reconnect_to_sdog</name><parameter_list pos:start="1:43" pos:end="1:56">(<parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:49"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">BDRVSheepdogState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:24">s</name> <init pos:start="7:26" pos:end="7:33">= <expr pos:start="7:28" pos:end="7:33"><name pos:start="7:28" pos:end="7:33">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">AIOReq</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:19">aio_req</name></decl>, <decl pos:start="9:22" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:12"><modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:26">next</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:64"><expr pos:start="13:5" pos:end="13:63"><call pos:start="13:5" pos:end="13:63"><name pos:start="13:5" pos:end="13:22">aio_set_fd_handler</name><argument_list pos:start="13:23" pos:end="13:63">(<argument pos:start="13:24" pos:end="13:37"><expr pos:start="13:24" pos:end="13:37"><name pos:start="13:24" pos:end="13:37"><name pos:start="13:24" pos:end="13:24">s</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:37">aio_context</name></name></expr></argument>, <argument pos:start="13:40" pos:end="13:44"><expr pos:start="13:40" pos:end="13:44"><name pos:start="13:40" pos:end="13:44"><name pos:start="13:40" pos:end="13:40">s</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:44">fd</name></name></expr></argument>, <argument pos:start="13:47" pos:end="13:50"><expr pos:start="13:47" pos:end="13:50"><name pos:start="13:47" pos:end="13:50">NULL</name></expr></argument>, <argument pos:start="13:53" pos:end="13:56"><expr pos:start="13:53" pos:end="13:56"><name pos:start="13:53" pos:end="13:56">NULL</name></expr></argument>, <argument pos:start="13:59" pos:end="13:62"><expr pos:start="13:59" pos:end="13:62"><name pos:start="13:59" pos:end="13:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><call pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:9">close</name><argument_list pos:start="15:10" pos:end="15:16">(<argument pos:start="15:11" pos:end="15:15"><expr pos:start="15:11" pos:end="15:15"><name pos:start="15:11" pos:end="15:15"><name pos:start="15:11" pos:end="15:11">s</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:15">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:9">fd</name></name> <operator pos:start="17:11" pos:end="17:11">=</operator> <operator pos:start="17:13" pos:end="17:13">-</operator><literal type="number" pos:start="17:14" pos:end="17:14">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:62">/* Wait for outstanding write requests to be completed. */</comment>

    <while pos:start="23:5" pos:end="27:5">while <condition pos:start="23:11" pos:end="23:30">(<expr pos:start="23:12" pos:end="23:29"><name pos:start="23:12" pos:end="23:21"><name pos:start="23:12" pos:end="23:12">s</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:21">co_send</name></name> <operator pos:start="23:23" pos:end="23:24">!=</operator> <name pos:start="23:26" pos:end="23:29">NULL</name></expr>)</condition> <block pos:start="23:32" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:33">

        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><call pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:24">co_write_request</name><argument_list pos:start="25:25" pos:end="25:32">(<argument pos:start="25:26" pos:end="25:31"><expr pos:start="25:26" pos:end="25:31"><name pos:start="25:26" pos:end="25:31">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="31:5" pos:end="31:64">/* Try to reconnect the sheepdog server every one second. */</comment>

    <while pos:start="33:5" pos:end="51:5">while <condition pos:start="33:11" pos:end="33:21">(<expr pos:start="33:12" pos:end="33:20"><name pos:start="33:12" pos:end="33:16"><name pos:start="33:12" pos:end="33:12">s</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:16">fd</name></name> <operator pos:start="33:18" pos:end="33:18">&lt;</operator> <literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>)</condition> <block pos:start="33:23" pos:end="51:5">{<block_content pos:start="35:9" pos:end="49:9">

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:13">fd</name></name> <operator pos:start="35:15" pos:end="35:15">=</operator> <call pos:start="35:17" pos:end="35:43"><name pos:start="35:17" pos:end="35:28">get_sheep_fd</name><argument_list pos:start="35:29" pos:end="35:43">(<argument pos:start="35:30" pos:end="35:30"><expr pos:start="35:30" pos:end="35:30"><name pos:start="35:30" pos:end="35:30">s</name></expr></argument>, <argument pos:start="35:33" pos:end="35:42"><expr pos:start="35:33" pos:end="35:42"><operator pos:start="35:33" pos:end="35:33">&amp;</operator><name pos:start="35:34" pos:end="35:42">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="49:9"><if pos:start="37:9" pos:end="49:9">if <condition pos:start="37:12" pos:end="37:22">(<expr pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:17"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:17">fd</name></name> <operator pos:start="37:19" pos:end="37:19">&lt;</operator> <literal type="number" pos:start="37:21" pos:end="37:21">0</literal></expr>)</condition> <block pos:start="37:24" pos:end="49:9">{<block_content pos:start="39:13" pos:end="47:43">

            <expr_stmt pos:start="39:13" pos:end="39:63"><expr pos:start="39:13" pos:end="39:62"><call pos:start="39:13" pos:end="39:62"><name pos:start="39:13" pos:end="39:19">DPRINTF</name><argument_list pos:start="39:20" pos:end="39:62">(<argument pos:start="39:21" pos:end="39:61"><expr pos:start="39:21" pos:end="39:61"><literal type="string" pos:start="39:21" pos:end="39:61">"Wait for connection to be established\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:60"><expr pos:start="41:13" pos:end="41:59"><call pos:start="41:13" pos:end="41:59"><name pos:start="41:13" pos:end="41:24">error_report</name><argument_list pos:start="41:25" pos:end="41:59">(<argument pos:start="41:26" pos:end="41:29"><expr pos:start="41:26" pos:end="41:29"><literal type="string" pos:start="41:26" pos:end="41:29">"%s"</literal></expr></argument>, <argument pos:start="41:32" pos:end="41:58"><expr pos:start="41:32" pos:end="41:58"><call pos:start="41:32" pos:end="41:58"><name pos:start="41:32" pos:end="41:47">error_get_pretty</name><argument_list pos:start="41:48" pos:end="41:58">(<argument pos:start="41:49" pos:end="41:57"><expr pos:start="41:49" pos:end="41:57"><name pos:start="41:49" pos:end="41:57">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:34"><expr pos:start="43:13" pos:end="43:33"><call pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:22">error_free</name><argument_list pos:start="43:23" pos:end="43:33">(<argument pos:start="43:24" pos:end="43:32"><expr pos:start="43:24" pos:end="43:32"><name pos:start="43:24" pos:end="43:32">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="47:43"><expr pos:start="45:13" pos:end="47:42"><call pos:start="45:13" pos:end="47:42"><name pos:start="45:13" pos:end="45:27">co_aio_sleep_ns</name><argument_list pos:start="45:28" pos:end="47:42">(<argument pos:start="45:29" pos:end="45:55"><expr pos:start="45:29" pos:end="45:55"><call pos:start="45:29" pos:end="45:55"><name pos:start="45:29" pos:end="45:48">bdrv_get_aio_context</name><argument_list pos:start="45:49" pos:end="45:55">(<argument pos:start="45:50" pos:end="45:54"><expr pos:start="45:50" pos:end="45:54"><name pos:start="45:50" pos:end="45:54"><name pos:start="45:50" pos:end="45:50">s</name><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:54">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="45:58" pos:end="45:76"><expr pos:start="45:58" pos:end="45:76"><name pos:start="45:58" pos:end="45:76">QEMU_CLOCK_REALTIME</name></expr></argument>,

                            <argument pos:start="47:29" pos:end="47:41"><expr pos:start="47:29" pos:end="47:41"><literal type="number" pos:start="47:29" pos:end="47:41">1000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while><empty_stmt pos:start="51:6" pos:end="51:6">;</empty_stmt>



    <comment type="block" pos:start="55:5" pos:end="67:7">/*

     * Now we have to resend all the request in the inflight queue.  However,

     * resend_aioreq() can yield and newly created requests can be added to the

     * inflight queue before the coroutine is resumed.  To avoid mixing them, we

     * have to move all the inflight requests to the failed queue before

     * resend_aioreq() is called.

     */</comment>

    <macro pos:start="69:5" pos:end="69:74"><name pos:start="69:5" pos:end="69:22">QLIST_FOREACH_SAFE</name><argument_list pos:start="69:23" pos:end="69:74">(<argument pos:start="69:24" pos:end="69:30">aio_req</argument>, <argument pos:start="69:33" pos:end="69:53">&amp;s-&gt;inflight_aio_head</argument>, <argument pos:start="69:56" pos:end="69:67">aio_siblings</argument>, <argument pos:start="69:70" pos:end="69:73">next</argument>)</argument_list></macro> <block pos:start="69:76" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:70">

        <expr_stmt pos:start="71:9" pos:end="71:44"><expr pos:start="71:9" pos:end="71:43"><call pos:start="71:9" pos:end="71:43"><name pos:start="71:9" pos:end="71:20">QLIST_REMOVE</name><argument_list pos:start="71:21" pos:end="71:43">(<argument pos:start="71:22" pos:end="71:28"><expr pos:start="71:22" pos:end="71:28"><name pos:start="71:22" pos:end="71:28">aio_req</name></expr></argument>, <argument pos:start="71:31" pos:end="71:42"><expr pos:start="71:31" pos:end="71:42"><name pos:start="71:31" pos:end="71:42">aio_siblings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:70"><expr pos:start="73:9" pos:end="73:69"><call pos:start="73:9" pos:end="73:69"><name pos:start="73:9" pos:end="73:25">QLIST_INSERT_HEAD</name><argument_list pos:start="73:26" pos:end="73:69">(<argument pos:start="73:27" pos:end="73:45"><expr pos:start="73:27" pos:end="73:45"><operator pos:start="73:27" pos:end="73:27">&amp;</operator><name pos:start="73:28" pos:end="73:45"><name pos:start="73:28" pos:end="73:28">s</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:45">failed_aio_head</name></name></expr></argument>, <argument pos:start="73:48" pos:end="73:54"><expr pos:start="73:48" pos:end="73:54"><name pos:start="73:48" pos:end="73:54">aio_req</name></expr></argument>, <argument pos:start="73:57" pos:end="73:68"><expr pos:start="73:57" pos:end="73:68"><name pos:start="73:57" pos:end="73:68">aio_siblings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="79:5" pos:end="79:45">/* Resend all the failed aio requests. */</comment>

    <while pos:start="81:5" pos:end="91:5">while <condition pos:start="81:11" pos:end="81:45">(<expr pos:start="81:12" pos:end="81:44"><operator pos:start="81:12" pos:end="81:12">!</operator><call pos:start="81:13" pos:end="81:44"><name pos:start="81:13" pos:end="81:23">QLIST_EMPTY</name><argument_list pos:start="81:24" pos:end="81:44">(<argument pos:start="81:25" pos:end="81:43"><expr pos:start="81:25" pos:end="81:43"><operator pos:start="81:25" pos:end="81:25">&amp;</operator><name pos:start="81:26" pos:end="81:43"><name pos:start="81:26" pos:end="81:26">s</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:43">failed_aio_head</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:47" pos:end="91:5">{<block_content pos:start="83:9" pos:end="89:34">

        <expr_stmt pos:start="83:9" pos:end="83:51"><expr pos:start="83:9" pos:end="83:50"><name pos:start="83:9" pos:end="83:15">aio_req</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <call pos:start="83:19" pos:end="83:50"><name pos:start="83:19" pos:end="83:29">QLIST_FIRST</name><argument_list pos:start="83:30" pos:end="83:50">(<argument pos:start="83:31" pos:end="83:49"><expr pos:start="83:31" pos:end="83:49"><operator pos:start="83:31" pos:end="83:31">&amp;</operator><name pos:start="83:32" pos:end="83:49"><name pos:start="83:32" pos:end="83:32">s</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:49">failed_aio_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:44"><expr pos:start="85:9" pos:end="85:43"><call pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:20">QLIST_REMOVE</name><argument_list pos:start="85:21" pos:end="85:43">(<argument pos:start="85:22" pos:end="85:28"><expr pos:start="85:22" pos:end="85:28"><name pos:start="85:22" pos:end="85:28">aio_req</name></expr></argument>, <argument pos:start="85:31" pos:end="85:42"><expr pos:start="85:31" pos:end="85:42"><name pos:start="85:31" pos:end="85:42">aio_siblings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:72"><expr pos:start="87:9" pos:end="87:71"><call pos:start="87:9" pos:end="87:71"><name pos:start="87:9" pos:end="87:25">QLIST_INSERT_HEAD</name><argument_list pos:start="87:26" pos:end="87:71">(<argument pos:start="87:27" pos:end="87:47"><expr pos:start="87:27" pos:end="87:47"><operator pos:start="87:27" pos:end="87:27">&amp;</operator><name pos:start="87:28" pos:end="87:47"><name pos:start="87:28" pos:end="87:28">s</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:47">inflight_aio_head</name></name></expr></argument>, <argument pos:start="87:50" pos:end="87:56"><expr pos:start="87:50" pos:end="87:56"><name pos:start="87:50" pos:end="87:56">aio_req</name></expr></argument>, <argument pos:start="87:59" pos:end="87:70"><expr pos:start="87:59" pos:end="87:70"><name pos:start="87:59" pos:end="87:70">aio_siblings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:34"><expr pos:start="89:9" pos:end="89:33"><call pos:start="89:9" pos:end="89:33"><name pos:start="89:9" pos:end="89:21">resend_aioreq</name><argument_list pos:start="89:22" pos:end="89:33">(<argument pos:start="89:23" pos:end="89:23"><expr pos:start="89:23" pos:end="89:23"><name pos:start="89:23" pos:end="89:23">s</name></expr></argument>, <argument pos:start="89:26" pos:end="89:32"><expr pos:start="89:26" pos:end="89:32"><name pos:start="89:26" pos:end="89:32">aio_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
