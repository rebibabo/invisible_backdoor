<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5053.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">QemuOpts</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:26">qemu_opts_create</name><parameter_list pos:start="1:27" pos:end="3:60">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:39">QemuOptsList</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:45">list</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:57">char</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:61">id</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:45"><decl pos:start="3:28" pos:end="3:45"><type pos:start="3:28" pos:end="3:45"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:45">fail_if_exists</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:59"><decl pos:start="3:48" pos:end="3:59"><type pos:start="3:48" pos:end="3:59"><name pos:start="3:48" pos:end="3:52">Error</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier><modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:59">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:16">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">QemuOpts</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">opts</name> <init pos:start="7:20" pos:end="7:25">= <expr pos:start="7:22" pos:end="7:25"><name pos:start="7:22" pos:end="7:25">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="55:5"><if pos:start="11:5" pos:end="45:5">if <condition pos:start="11:8" pos:end="11:11">(<expr pos:start="11:9" pos:end="11:10"><name pos:start="11:9" pos:end="11:10">id</name></expr>)</condition> <block pos:start="11:13" pos:end="45:5">{<block_content pos:start="13:9" pos:end="43:9">

        <if_stmt pos:start="13:9" pos:end="25:9"><if pos:start="13:9" pos:end="25:9">if <condition pos:start="13:12" pos:end="13:31">(<expr pos:start="13:13" pos:end="13:30"><operator pos:start="13:13" pos:end="13:13">!</operator><call pos:start="13:14" pos:end="13:30"><name pos:start="13:14" pos:end="13:26">id_wellformed</name><argument_list pos:start="13:27" pos:end="13:30">(<argument pos:start="13:28" pos:end="13:29"><expr pos:start="13:28" pos:end="13:29"><name pos:start="13:28" pos:end="13:29">id</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:33" pos:end="25:9">{<block_content pos:start="15:13" pos:end="23:24">

            <expr_stmt pos:start="15:13" pos:end="22:0"><expr pos:start="15:13" pos:end="15:79"><call pos:start="15:13" pos:end="15:79"><name pos:start="15:13" pos:end="15:21">error_set</name><argument_list pos:start="15:22" pos:end="15:79">(<argument pos:start="15:23" pos:end="15:26"><expr pos:start="15:23" pos:end="15:26"><name pos:start="15:23" pos:end="15:26">errp</name></expr></argument>,<argument pos:start="15:28" pos:end="15:55"><expr pos:start="15:28" pos:end="15:55"><name pos:start="15:28" pos:end="15:55">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="15:58" pos:end="15:61"><expr pos:start="15:58" pos:end="15:61"><literal type="string" pos:start="15:58" pos:end="15:61">"id"</literal></expr></argument>, <argument pos:start="15:64" pos:end="15:78"><expr pos:start="15:64" pos:end="15:78"><literal type="string" pos:start="15:64" pos:end="15:78">"an identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="17:1" pos:end="17:5">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:5"><literal type="number" pos:start="17:5" pos:end="17:5">0</literal></expr></cpp:if> <comment type="block" pos:start="17:7" pos:end="17:70">/* conversion from qerror_report() to error_set() broke this: */</comment>

            error_printf_unless_qmp("Identifiers consist of letters, digits, '-', '.', '_', starting with a letter.\n");

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

            <return pos:start="23:13" pos:end="23:24">return <expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:40"><expr pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:12">opts</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:39"><name pos:start="27:16" pos:end="27:29">qemu_opts_find</name><argument_list pos:start="27:30" pos:end="27:39">(<argument pos:start="27:31" pos:end="27:34"><expr pos:start="27:31" pos:end="27:34"><name pos:start="27:31" pos:end="27:34">list</name></expr></argument>, <argument pos:start="27:37" pos:end="27:38"><expr pos:start="27:37" pos:end="27:38"><name pos:start="27:37" pos:end="27:38">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="43:9"><if pos:start="29:9" pos:end="43:9">if <condition pos:start="29:12" pos:end="29:25">(<expr pos:start="29:13" pos:end="29:24"><name pos:start="29:13" pos:end="29:16">opts</name> <operator pos:start="29:18" pos:end="29:19">!=</operator> <name pos:start="29:21" pos:end="29:24">NULL</name></expr>)</condition> <block pos:start="29:27" pos:end="43:9">{<block_content pos:start="31:13" pos:end="41:13">

            <if_stmt pos:start="31:13" pos:end="41:13"><if pos:start="31:13" pos:end="37:13">if <condition pos:start="31:16" pos:end="31:53">(<expr pos:start="31:17" pos:end="31:52"><name pos:start="31:17" pos:end="31:30">fail_if_exists</name> <operator pos:start="31:32" pos:end="31:33">&amp;&amp;</operator> <operator pos:start="31:35" pos:end="31:35">!</operator><name pos:start="31:36" pos:end="31:52"><name pos:start="31:36" pos:end="31:39">list</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:52">merge_lists</name></name></expr>)</condition> <block pos:start="31:55" pos:end="37:13">{<block_content pos:start="33:17" pos:end="35:28">

                <expr_stmt pos:start="33:17" pos:end="33:77"><expr pos:start="33:17" pos:end="33:76"><call pos:start="33:17" pos:end="33:76"><name pos:start="33:17" pos:end="33:26">error_setg</name><argument_list pos:start="33:27" pos:end="33:76">(<argument pos:start="33:28" pos:end="33:31"><expr pos:start="33:28" pos:end="33:31"><name pos:start="33:28" pos:end="33:31">errp</name></expr></argument>, <argument pos:start="33:34" pos:end="33:59"><expr pos:start="33:34" pos:end="33:59"><literal type="string" pos:start="33:34" pos:end="33:59">"Duplicate ID '%s' for %s"</literal></expr></argument>, <argument pos:start="33:62" pos:end="33:63"><expr pos:start="33:62" pos:end="33:63"><name pos:start="33:62" pos:end="33:63">id</name></expr></argument>, <argument pos:start="33:66" pos:end="33:75"><expr pos:start="33:66" pos:end="33:75"><name pos:start="33:66" pos:end="33:75"><name pos:start="33:66" pos:end="33:69">list</name><operator pos:start="33:70" pos:end="33:71">-&gt;</operator><name pos:start="33:72" pos:end="33:75">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="35:17" pos:end="35:28">return <expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">NULL</name></expr>;</return>

            </block_content>}</block></if> <else pos:start="37:15" pos:end="41:13">else <block pos:start="37:20" pos:end="41:13">{<block_content pos:start="39:17" pos:end="39:28">

                <return pos:start="39:17" pos:end="39:28">return <expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">opts</name></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="45:7" pos:end="55:5">else if <condition pos:start="45:15" pos:end="45:33">(<expr pos:start="45:16" pos:end="45:32"><name pos:start="45:16" pos:end="45:32"><name pos:start="45:16" pos:end="45:19">list</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:32">merge_lists</name></name></expr>)</condition> <block pos:start="45:35" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:9">

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:12">opts</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:41"><name pos:start="47:16" pos:end="47:29">qemu_opts_find</name><argument_list pos:start="47:30" pos:end="47:41">(<argument pos:start="47:31" pos:end="47:34"><expr pos:start="47:31" pos:end="47:34"><name pos:start="47:31" pos:end="47:34">list</name></expr></argument>, <argument pos:start="47:37" pos:end="47:40"><expr pos:start="47:37" pos:end="47:40"><name pos:start="47:37" pos:end="47:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:17">(<expr pos:start="49:13" pos:end="49:16"><name pos:start="49:13" pos:end="49:16">opts</name></expr>)</condition> <block pos:start="49:19" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:24">

            <return pos:start="51:13" pos:end="51:24">return <expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">opts</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:36"><expr pos:start="57:5" pos:end="57:35"><name pos:start="57:5" pos:end="57:8">opts</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <call pos:start="57:12" pos:end="57:35"><name pos:start="57:12" pos:end="57:20">g_malloc0</name><argument_list pos:start="57:21" pos:end="57:35">(<argument pos:start="57:22" pos:end="57:34"><expr pos:start="57:22" pos:end="57:34"><sizeof pos:start="57:22" pos:end="57:34">sizeof<argument_list pos:start="57:28" pos:end="57:34">(<argument pos:start="57:29" pos:end="57:33"><expr pos:start="57:29" pos:end="57:33"><operator pos:start="57:29" pos:end="57:29">*</operator><name pos:start="57:30" pos:end="57:33">opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:28"><expr pos:start="59:5" pos:end="59:27"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:8">opts</name><operator pos:start="59:9" pos:end="59:10">-&gt;</operator><name pos:start="59:11" pos:end="59:12">id</name></name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="59:27"><name pos:start="59:16" pos:end="59:23">g_strdup</name><argument_list pos:start="59:24" pos:end="59:27">(<argument pos:start="59:25" pos:end="59:26"><expr pos:start="59:25" pos:end="59:26"><name pos:start="59:25" pos:end="59:26">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:22"><expr pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:8">opts</name><operator pos:start="61:9" pos:end="61:10">-&gt;</operator><name pos:start="61:11" pos:end="61:14">list</name></name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:21">list</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><call pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:12">loc_save</name><argument_list pos:start="63:13" pos:end="63:24">(<argument pos:start="63:14" pos:end="63:23"><expr pos:start="63:14" pos:end="63:23"><operator pos:start="63:14" pos:end="63:14">&amp;</operator><name pos:start="63:15" pos:end="63:23"><name pos:start="63:15" pos:end="63:18">opts</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:23">loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:29"><expr pos:start="65:5" pos:end="65:28"><call pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:15">QTAILQ_INIT</name><argument_list pos:start="65:16" pos:end="65:28">(<argument pos:start="65:17" pos:end="65:27"><expr pos:start="65:17" pos:end="65:27"><operator pos:start="65:17" pos:end="65:17">&amp;</operator><name pos:start="65:18" pos:end="65:27"><name pos:start="65:18" pos:end="65:21">opts</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:27">head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:48"><expr pos:start="67:5" pos:end="67:47"><call pos:start="67:5" pos:end="67:47"><name pos:start="67:5" pos:end="67:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="67:23" pos:end="67:47">(<argument pos:start="67:24" pos:end="67:34"><expr pos:start="67:24" pos:end="67:34"><operator pos:start="67:24" pos:end="67:24">&amp;</operator><name pos:start="67:25" pos:end="67:34"><name pos:start="67:25" pos:end="67:28">list</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:34">head</name></name></expr></argument>, <argument pos:start="67:37" pos:end="67:40"><expr pos:start="67:37" pos:end="67:40"><name pos:start="67:37" pos:end="67:40">opts</name></expr></argument>, <argument pos:start="67:43" pos:end="67:46"><expr pos:start="67:43" pos:end="67:46"><name pos:start="67:43" pos:end="67:46">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:16">return <expr pos:start="69:12" pos:end="69:15"><name pos:start="69:12" pos:end="69:15">opts</name></expr>;</return>

</block_content>}</block></function>
</unit>
