<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17650.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">handle_copied</name><parameter_list pos:start="1:25" pos:end="3:59">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:68"><decl pos:start="1:48" pos:end="1:68"><type pos:start="1:48" pos:end="1:68"><name pos:start="1:48" pos:end="1:55">uint64_t</name></type> <name pos:start="1:57" pos:end="1:68">guest_offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:25"><decl pos:start="3:5" pos:end="3:25"><type pos:start="3:5" pos:end="3:25"><name pos:start="3:5" pos:end="3:12">uint64_t</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:25">host_offset</name></decl></parameter>, <parameter pos:start="3:28" pos:end="3:42"><decl pos:start="3:28" pos:end="3:42"><type pos:start="3:28" pos:end="3:42"><name pos:start="3:28" pos:end="3:35">uint64_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:42">bytes</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:54">QCowL2Meta</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:58">m</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="173:1">{<block_content pos:start="7:5" pos:end="171:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVQcow2State</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">l2_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:27">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint64_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:22">l2_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:28">nb_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:30">keep_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="25:38"><expr pos:start="23:5" pos:end="25:37"><call pos:start="23:5" pos:end="25:37"><name pos:start="23:5" pos:end="23:29">trace_qcow2_handle_copied</name><argument_list pos:start="23:30" pos:end="25:37">(<argument pos:start="23:31" pos:end="23:51"><expr pos:start="23:31" pos:end="23:51"><call pos:start="23:31" pos:end="23:51"><name pos:start="23:31" pos:end="23:49">qemu_coroutine_self</name><argument_list pos:start="23:50" pos:end="23:51">()</argument_list></call></expr></argument>, <argument pos:start="23:54" pos:end="23:65"><expr pos:start="23:54" pos:end="23:65"><name pos:start="23:54" pos:end="23:65">guest_offset</name></expr></argument>, <argument pos:start="23:68" pos:end="23:79"><expr pos:start="23:68" pos:end="23:79"><operator pos:start="23:68" pos:end="23:68">*</operator><name pos:start="23:69" pos:end="23:79">host_offset</name></expr></argument>,

                              <argument pos:start="25:31" pos:end="25:36"><expr pos:start="25:31" pos:end="25:36"><operator pos:start="25:31" pos:end="25:31">*</operator><name pos:start="25:32" pos:end="25:36">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="31:73"><expr pos:start="29:5" pos:end="31:72"><call pos:start="29:5" pos:end="31:72"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="31:72">(<argument pos:start="29:12" pos:end="31:71"><expr pos:start="29:12" pos:end="31:71"><operator pos:start="29:12" pos:end="29:12">*</operator><name pos:start="29:13" pos:end="29:23">host_offset</name> <operator pos:start="29:25" pos:end="29:26">==</operator> <literal type="number" pos:start="29:28" pos:end="29:28">0</literal> <operator pos:start="29:30" pos:end="29:31">||</operator>    <call pos:start="29:36" pos:end="29:71"><name pos:start="29:36" pos:end="29:54">offset_into_cluster</name><argument_list pos:start="29:55" pos:end="29:71">(<argument pos:start="29:56" pos:end="29:56"><expr pos:start="29:56" pos:end="29:56"><name pos:start="29:56" pos:end="29:56">s</name></expr></argument>, <argument pos:start="29:59" pos:end="29:70"><expr pos:start="29:59" pos:end="29:70"><name pos:start="29:59" pos:end="29:70">guest_offset</name></expr></argument>)</argument_list></call>

                                <operator pos:start="31:33" pos:end="31:34">==</operator> <call pos:start="31:36" pos:end="31:71"><name pos:start="31:36" pos:end="31:54">offset_into_cluster</name><argument_list pos:start="31:55" pos:end="31:71">(<argument pos:start="31:56" pos:end="31:56"><expr pos:start="31:56" pos:end="31:56"><name pos:start="31:56" pos:end="31:56">s</name></expr></argument>, <argument pos:start="31:59" pos:end="31:70"><expr pos:start="31:59" pos:end="31:70"><operator pos:start="31:59" pos:end="31:59">*</operator><name pos:start="31:60" pos:end="31:70">host_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="41:7">/*

     * Calculate the number of clusters to look for. We stop at L2 table

     * boundaries to keep things simple.

     */</comment>

    <expr_stmt pos:start="43:5" pos:end="45:75"><expr pos:start="43:5" pos:end="45:74"><name pos:start="43:5" pos:end="43:15">nb_clusters</name> <operator pos:start="43:17" pos:end="43:17">=</operator>

        <call pos:start="45:9" pos:end="45:74"><name pos:start="45:9" pos:end="45:24">size_to_clusters</name><argument_list pos:start="45:25" pos:end="45:74">(<argument pos:start="45:26" pos:end="45:26"><expr pos:start="45:26" pos:end="45:26"><name pos:start="45:26" pos:end="45:26">s</name></expr></argument>, <argument pos:start="45:29" pos:end="45:73"><expr pos:start="45:29" pos:end="45:73"><call pos:start="45:29" pos:end="45:64"><name pos:start="45:29" pos:end="45:47">offset_into_cluster</name><argument_list pos:start="45:48" pos:end="45:64">(<argument pos:start="45:49" pos:end="45:49"><expr pos:start="45:49" pos:end="45:49"><name pos:start="45:49" pos:end="45:49">s</name></expr></argument>, <argument pos:start="45:52" pos:end="45:63"><expr pos:start="45:52" pos:end="45:63"><name pos:start="45:52" pos:end="45:63">guest_offset</name></expr></argument>)</argument_list></call> <operator pos:start="45:66" pos:end="45:66">+</operator> <operator pos:start="45:68" pos:end="45:68">*</operator><name pos:start="45:69" pos:end="45:73">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:51"><expr pos:start="49:5" pos:end="49:50"><name pos:start="49:5" pos:end="49:12">l2_index</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:50"><name pos:start="49:16" pos:end="49:33">offset_to_l2_index</name><argument_list pos:start="49:34" pos:end="49:50">(<argument pos:start="49:35" pos:end="49:35"><expr pos:start="49:35" pos:end="49:35"><name pos:start="49:35" pos:end="49:35">s</name></expr></argument>, <argument pos:start="49:38" pos:end="49:49"><expr pos:start="49:38" pos:end="49:49"><name pos:start="49:38" pos:end="49:49">guest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:58"><expr pos:start="51:5" pos:end="51:57"><name pos:start="51:5" pos:end="51:15">nb_clusters</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:57"><name pos:start="51:19" pos:end="51:21">MIN</name><argument_list pos:start="51:22" pos:end="51:57">(<argument pos:start="51:23" pos:end="51:33"><expr pos:start="51:23" pos:end="51:33"><name pos:start="51:23" pos:end="51:33">nb_clusters</name></expr></argument>, <argument pos:start="51:36" pos:end="51:56"><expr pos:start="51:36" pos:end="51:56"><name pos:start="51:36" pos:end="51:45"><name pos:start="51:36" pos:end="51:36">s</name><operator pos:start="51:37" pos:end="51:38">-&gt;</operator><name pos:start="51:39" pos:end="51:45">l2_size</name></name> <operator pos:start="51:47" pos:end="51:47">-</operator> <name pos:start="51:49" pos:end="51:56">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:54">/* Find L2 entry for the first involved cluster */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:68"><expr pos:start="57:5" pos:end="57:67"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:67"><name pos:start="57:11" pos:end="57:27">get_cluster_table</name><argument_list pos:start="57:28" pos:end="57:67">(<argument pos:start="57:29" pos:end="57:30"><expr pos:start="57:29" pos:end="57:30"><name pos:start="57:29" pos:end="57:30">bs</name></expr></argument>, <argument pos:start="57:33" pos:end="57:44"><expr pos:start="57:33" pos:end="57:44"><name pos:start="57:33" pos:end="57:44">guest_offset</name></expr></argument>, <argument pos:start="57:47" pos:end="57:55"><expr pos:start="57:47" pos:end="57:55"><operator pos:start="57:47" pos:end="57:47">&amp;</operator><name pos:start="57:48" pos:end="57:55">l2_table</name></expr></argument>, <argument pos:start="57:58" pos:end="57:66"><expr pos:start="57:58" pos:end="57:66"><operator pos:start="57:58" pos:end="57:58">&amp;</operator><name pos:start="57:59" pos:end="57:66">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:16">(<expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">&lt;</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>)</condition> <block pos:start="59:18" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:19">

        <return pos:start="61:9" pos:end="61:19">return <expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:53"><expr pos:start="67:5" pos:end="67:52"><name pos:start="67:5" pos:end="67:18">cluster_offset</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <call pos:start="67:22" pos:end="67:52"><name pos:start="67:22" pos:end="67:32">be64_to_cpu</name><argument_list pos:start="67:33" pos:end="67:52">(<argument pos:start="67:34" pos:end="67:51"><expr pos:start="67:34" pos:end="67:51"><name pos:start="67:34" pos:end="67:51"><name pos:start="67:34" pos:end="67:41">l2_table</name><index pos:start="67:42" pos:end="67:51">[<expr pos:start="67:43" pos:end="67:50"><name pos:start="67:43" pos:end="67:50">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:74">/* Check how many clusters are already allocated and don't need COW */</comment>

    <if_stmt pos:start="73:5" pos:end="145:5"><if pos:start="73:5" pos:end="141:5">if <condition pos:start="73:8" pos:end="75:48">(<expr pos:start="73:9" pos:end="75:47"><call pos:start="73:9" pos:end="73:46"><name pos:start="73:9" pos:end="73:30">qcow2_get_cluster_type</name><argument_list pos:start="73:31" pos:end="73:46">(<argument pos:start="73:32" pos:end="73:45"><expr pos:start="73:32" pos:end="73:45"><name pos:start="73:32" pos:end="73:45">cluster_offset</name></expr></argument>)</argument_list></call> <operator pos:start="73:48" pos:end="73:49">==</operator> <name pos:start="73:51" pos:end="73:70">QCOW2_CLUSTER_NORMAL</name>

        <operator pos:start="75:9" pos:end="75:10">&amp;&amp;</operator> <operator pos:start="75:12" pos:end="75:12">(</operator><name pos:start="75:13" pos:end="75:26">cluster_offset</name> <operator pos:start="75:28" pos:end="75:28">&amp;</operator> <name pos:start="75:30" pos:end="75:46">QCOW_OFLAG_COPIED</name><operator pos:start="75:47" pos:end="75:47">)</operator></expr>)</condition>

    <block pos:start="77:5" pos:end="141:5">{<block_content pos:start="81:9" pos:end="139:16">

        <comment type="block" pos:start="79:9" pos:end="79:61">/* If a specific host_offset is required, check it */</comment>

        <decl_stmt pos:start="81:9" pos:end="83:63"><decl pos:start="81:9" pos:end="83:62"><type pos:start="81:9" pos:end="81:12"><name pos:start="81:9" pos:end="81:12">bool</name></type> <name pos:start="81:14" pos:end="81:27">offset_matches</name> <init pos:start="81:29" pos:end="83:62">=

            <expr pos:start="83:13" pos:end="83:62"><operator pos:start="83:13" pos:end="83:13">(</operator><name pos:start="83:14" pos:end="83:27">cluster_offset</name> <operator pos:start="83:29" pos:end="83:29">&amp;</operator> <name pos:start="83:31" pos:end="83:45">L2E_OFFSET_MASK</name><operator pos:start="83:46" pos:end="83:46">)</operator> <operator pos:start="83:48" pos:end="83:49">==</operator> <operator pos:start="83:51" pos:end="83:51">*</operator><name pos:start="83:52" pos:end="83:62">host_offset</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="87:9" pos:end="101:9"><if pos:start="87:9" pos:end="101:9">if <condition pos:start="87:12" pos:end="87:69">(<expr pos:start="87:13" pos:end="87:68"><call pos:start="87:13" pos:end="87:68"><name pos:start="87:13" pos:end="87:31">offset_into_cluster</name><argument_list pos:start="87:32" pos:end="87:68">(<argument pos:start="87:33" pos:end="87:33"><expr pos:start="87:33" pos:end="87:33"><name pos:start="87:33" pos:end="87:33">s</name></expr></argument>, <argument pos:start="87:36" pos:end="87:67"><expr pos:start="87:36" pos:end="87:67"><name pos:start="87:36" pos:end="87:49">cluster_offset</name> <operator pos:start="87:51" pos:end="87:51">&amp;</operator> <name pos:start="87:53" pos:end="87:67">L2E_OFFSET_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:71" pos:end="101:9">{<block_content pos:start="89:13" pos:end="99:21">

            <expr_stmt pos:start="89:13" pos:end="95:50"><expr pos:start="89:13" pos:end="95:49"><call pos:start="89:13" pos:end="95:49"><name pos:start="89:13" pos:end="89:35">qcow2_signal_corruption</name><argument_list pos:start="89:36" pos:end="95:49">(<argument pos:start="89:37" pos:end="89:38"><expr pos:start="89:37" pos:end="89:38"><name pos:start="89:37" pos:end="89:38">bs</name></expr></argument>, <argument pos:start="89:41" pos:end="89:44"><expr pos:start="89:41" pos:end="89:44"><name pos:start="89:41" pos:end="89:44">true</name></expr></argument>, <argument pos:start="89:47" pos:end="89:48"><expr pos:start="89:47" pos:end="89:48"><operator pos:start="89:47" pos:end="89:47">-</operator><literal type="number" pos:start="89:48" pos:end="89:48">1</literal></expr></argument>, <argument pos:start="89:51" pos:end="89:52"><expr pos:start="89:51" pos:end="89:52"><operator pos:start="89:51" pos:end="89:51">-</operator><literal type="number" pos:start="89:52" pos:end="89:52">1</literal></expr></argument>, <argument pos:start="89:55" pos:end="93:39"><expr pos:start="89:55" pos:end="93:39"><literal type="string" pos:start="89:55" pos:end="89:76">"Data cluster offset "</literal>

                                    <literal type="string" pos:start="91:37" pos:end="91:71">"%#llx unaligned (guest offset: %#"</literal> <name pos:start="91:73" pos:end="91:78">PRIx64</name>

                                    <literal type="string" pos:start="93:37" pos:end="93:39">")"</literal></expr></argument>, <argument pos:start="93:42" pos:end="93:73"><expr pos:start="93:42" pos:end="93:73"><name pos:start="93:42" pos:end="93:55">cluster_offset</name> <operator pos:start="93:57" pos:end="93:57">&amp;</operator> <name pos:start="93:59" pos:end="93:73">L2E_OFFSET_MASK</name></expr></argument>,

                                    <argument pos:start="95:37" pos:end="95:48"><expr pos:start="95:37" pos:end="95:48"><name pos:start="95:37" pos:end="95:48">guest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:23"><expr pos:start="97:13" pos:end="97:22"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <operator pos:start="97:19" pos:end="97:19">-</operator><name pos:start="97:20" pos:end="97:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="99:13" pos:end="99:21">goto <name pos:start="99:18" pos:end="99:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="105:9" pos:end="113:9"><if pos:start="105:9" pos:end="113:9">if <condition pos:start="105:12" pos:end="105:49">(<expr pos:start="105:13" pos:end="105:48"><operator pos:start="105:13" pos:end="105:13">*</operator><name pos:start="105:14" pos:end="105:24">host_offset</name> <operator pos:start="105:26" pos:end="105:27">!=</operator> <literal type="number" pos:start="105:29" pos:end="105:29">0</literal> <operator pos:start="105:31" pos:end="105:32">&amp;&amp;</operator> <operator pos:start="105:34" pos:end="105:34">!</operator><name pos:start="105:35" pos:end="105:48">offset_matches</name></expr>)</condition> <block pos:start="105:51" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:21">

            <expr_stmt pos:start="107:13" pos:end="107:23"><expr pos:start="107:13" pos:end="107:22"><operator pos:start="107:13" pos:end="107:13">*</operator><name pos:start="107:14" pos:end="107:18">bytes</name> <operator pos:start="107:20" pos:end="107:20">=</operator> <literal type="number" pos:start="107:22" pos:end="107:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:20"><expr pos:start="109:13" pos:end="109:19"><name pos:start="109:13" pos:end="109:15">ret</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>;</expr_stmt>

            <goto pos:start="111:13" pos:end="111:21">goto <name pos:start="111:18" pos:end="111:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="117:9" pos:end="117:52">/* We keep all QCOW_OFLAG_COPIED clusters */</comment>

        <expr_stmt pos:start="119:9" pos:end="125:75"><expr pos:start="119:9" pos:end="125:74"><name pos:start="119:9" pos:end="119:21">keep_clusters</name> <operator pos:start="119:23" pos:end="119:23">=</operator>

            <call pos:start="121:13" pos:end="125:74"><name pos:start="121:13" pos:end="121:37">count_contiguous_clusters</name><argument_list pos:start="121:38" pos:end="125:74">(<argument pos:start="121:39" pos:end="121:49"><expr pos:start="121:39" pos:end="121:49"><name pos:start="121:39" pos:end="121:49">nb_clusters</name></expr></argument>, <argument pos:start="121:52" pos:end="121:66"><expr pos:start="121:52" pos:end="121:66"><name pos:start="121:52" pos:end="121:66"><name pos:start="121:52" pos:end="121:52">s</name><operator pos:start="121:53" pos:end="121:54">-&gt;</operator><name pos:start="121:55" pos:end="121:66">cluster_size</name></name></expr></argument>,

                                      <argument pos:start="123:39" pos:end="123:57"><expr pos:start="123:39" pos:end="123:57"><operator pos:start="123:39" pos:end="123:39">&amp;</operator><name pos:start="123:40" pos:end="123:57"><name pos:start="123:40" pos:end="123:47">l2_table</name><index pos:start="123:48" pos:end="123:57">[<expr pos:start="123:49" pos:end="123:56"><name pos:start="123:49" pos:end="123:56">l2_index</name></expr>]</index></name></expr></argument>,

                                      <argument pos:start="125:39" pos:end="125:73"><expr pos:start="125:39" pos:end="125:73"><name pos:start="125:39" pos:end="125:55">QCOW_OFLAG_COPIED</name> <operator pos:start="125:57" pos:end="125:57">|</operator> <name pos:start="125:59" pos:end="125:73">QCOW_OFLAG_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:45"><expr pos:start="127:9" pos:end="127:44"><call pos:start="127:9" pos:end="127:44"><name pos:start="127:9" pos:end="127:14">assert</name><argument_list pos:start="127:15" pos:end="127:44">(<argument pos:start="127:16" pos:end="127:43"><expr pos:start="127:16" pos:end="127:43"><name pos:start="127:16" pos:end="127:28">keep_clusters</name> <operator pos:start="127:30" pos:end="127:31">&lt;=</operator> <name pos:start="127:33" pos:end="127:43">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="131:9" pos:end="135:57"><expr pos:start="131:9" pos:end="135:56"><operator pos:start="131:9" pos:end="131:9">*</operator><name pos:start="131:10" pos:end="131:14">bytes</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <call pos:start="131:18" pos:end="135:56"><name pos:start="131:18" pos:end="131:20">MIN</name><argument_list pos:start="131:21" pos:end="135:56">(<argument pos:start="131:22" pos:end="131:27"><expr pos:start="131:22" pos:end="131:27"><operator pos:start="131:22" pos:end="131:22">*</operator><name pos:start="131:23" pos:end="131:27">bytes</name></expr></argument>,

                 <argument pos:start="133:18" pos:end="135:55"><expr pos:start="133:18" pos:end="135:55"><name pos:start="133:18" pos:end="133:30">keep_clusters</name> <operator pos:start="133:32" pos:end="133:32">*</operator> <name pos:start="133:34" pos:end="133:48"><name pos:start="133:34" pos:end="133:34">s</name><operator pos:start="133:35" pos:end="133:36">-&gt;</operator><name pos:start="133:37" pos:end="133:48">cluster_size</name></name>

                 <operator pos:start="135:18" pos:end="135:18">-</operator> <call pos:start="135:20" pos:end="135:55"><name pos:start="135:20" pos:end="135:38">offset_into_cluster</name><argument_list pos:start="135:39" pos:end="135:55">(<argument pos:start="135:40" pos:end="135:40"><expr pos:start="135:40" pos:end="135:40"><name pos:start="135:40" pos:end="135:40">s</name></expr></argument>, <argument pos:start="135:43" pos:end="135:54"><expr pos:start="135:43" pos:end="135:54"><name pos:start="135:43" pos:end="135:54">guest_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="139:9" pos:end="139:16"><expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <literal type="number" pos:start="139:15" pos:end="139:15">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="145:5">else <block pos:start="141:12" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:16">

        <expr_stmt pos:start="143:9" pos:end="143:16"><expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="149:5" pos:end="149:17">/* Cleanup */</comment>

<label pos:start="151:1" pos:end="151:4"><name pos:start="151:1" pos:end="151:3">out</name>:</label>

    <expr_stmt pos:start="153:5" pos:end="153:64"><expr pos:start="153:5" pos:end="153:63"><call pos:start="153:5" pos:end="153:63"><name pos:start="153:5" pos:end="153:19">qcow2_cache_put</name><argument_list pos:start="153:20" pos:end="153:63">(<argument pos:start="153:21" pos:end="153:22"><expr pos:start="153:21" pos:end="153:22"><name pos:start="153:21" pos:end="153:22">bs</name></expr></argument>, <argument pos:start="153:25" pos:end="153:41"><expr pos:start="153:25" pos:end="153:41"><name pos:start="153:25" pos:end="153:41"><name pos:start="153:25" pos:end="153:25">s</name><operator pos:start="153:26" pos:end="153:27">-&gt;</operator><name pos:start="153:28" pos:end="153:41">l2_table_cache</name></name></expr></argument>, <argument pos:start="153:44" pos:end="153:62"><expr pos:start="153:44" pos:end="153:62"><operator pos:start="153:44" pos:end="153:44">(</operator><name pos:start="153:45" pos:end="153:48">void</name> <operator pos:start="153:50" pos:end="153:50">*</operator><operator pos:start="153:51" pos:end="153:51">*</operator><operator pos:start="153:52" pos:end="153:52">)</operator> <operator pos:start="153:54" pos:end="153:54">&amp;</operator><name pos:start="153:55" pos:end="153:62">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="157:5" pos:end="159:74">/* Only return a host offset if we actually made progress. Otherwise we

     * would make requirements for handle_alloc() that it can't fulfill */</comment>

    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:16">(<expr pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">&gt;</operator> <literal type="number" pos:start="161:15" pos:end="161:15">0</literal></expr>)</condition> <block pos:start="161:18" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:60">

        <expr_stmt pos:start="163:9" pos:end="165:60"><expr pos:start="163:9" pos:end="165:59"><operator pos:start="163:9" pos:end="163:9">*</operator><name pos:start="163:10" pos:end="163:20">host_offset</name> <operator pos:start="163:22" pos:end="163:22">=</operator> <operator pos:start="163:24" pos:end="163:24">(</operator><name pos:start="163:25" pos:end="163:38">cluster_offset</name> <operator pos:start="163:40" pos:end="163:40">&amp;</operator> <name pos:start="163:42" pos:end="163:56">L2E_OFFSET_MASK</name><operator pos:start="163:57" pos:end="163:57">)</operator>

                     <operator pos:start="165:22" pos:end="165:22">+</operator> <call pos:start="165:24" pos:end="165:59"><name pos:start="165:24" pos:end="165:42">offset_into_cluster</name><argument_list pos:start="165:43" pos:end="165:59">(<argument pos:start="165:44" pos:end="165:44"><expr pos:start="165:44" pos:end="165:44"><name pos:start="165:44" pos:end="165:44">s</name></expr></argument>, <argument pos:start="165:47" pos:end="165:58"><expr pos:start="165:47" pos:end="165:58"><name pos:start="165:47" pos:end="165:58">guest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="171:5" pos:end="171:15">return <expr pos:start="171:12" pos:end="171:14"><name pos:start="171:12" pos:end="171:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
