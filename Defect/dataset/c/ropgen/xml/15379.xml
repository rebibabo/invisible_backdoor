<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15379.c" pos:tabs="8"><function pos:start="1:1" pos:end="207:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">dvbsub_read_2bit_string</name><parameter_list pos:start="1:35" pos:end="5:67">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:42">uint8_t</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">destbuf</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:65">dbuf_len</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:57"><decl pos:start="3:36" pos:end="3:57"><type pos:start="3:36" pos:end="3:57"><specifier pos:start="3:36" pos:end="3:40">const</specifier> <name pos:start="3:42" pos:end="3:48">uint8_t</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier><modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">srcbuf</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:71">buf_size</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:46"><decl pos:start="5:36" pos:end="5:46"><type pos:start="5:36" pos:end="5:46"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:46">non_mod</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:66"><decl pos:start="5:49" pos:end="5:66"><type pos:start="5:49" pos:end="5:66"><name pos:start="5:49" pos:end="5:55">uint8_t</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:66">map_table</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="207:1">{<block_content pos:start="9:5" pos:end="205:23">

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">GetBitContext</name></type> <name pos:start="9:19" pos:end="9:20">gb</name></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">run_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">pixels_read</name> <init pos:start="17:21" pos:end="17:23">= <expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><call pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:17">init_get_bits</name><argument_list pos:start="21:18" pos:end="21:46">(<argument pos:start="21:19" pos:end="21:21"><expr pos:start="21:19" pos:end="21:21"><operator pos:start="21:19" pos:end="21:19">&amp;</operator><name pos:start="21:20" pos:end="21:21">gb</name></expr></argument>, <argument pos:start="21:24" pos:end="21:30"><expr pos:start="21:24" pos:end="21:30"><operator pos:start="21:24" pos:end="21:24">*</operator><name pos:start="21:25" pos:end="21:30">srcbuf</name></expr></argument>, <argument pos:start="21:33" pos:end="21:45"><expr pos:start="21:33" pos:end="21:45"><name pos:start="21:33" pos:end="21:40">buf_size</name> <operator pos:start="21:42" pos:end="21:43">&lt;&lt;</operator> <literal type="number" pos:start="21:45" pos:end="21:45">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="25:5" pos:end="191:5">while <condition pos:start="25:11" pos:end="25:73">(<expr pos:start="25:12" pos:end="25:72"><call pos:start="25:12" pos:end="25:30"><name pos:start="25:12" pos:end="25:25">get_bits_count</name><argument_list pos:start="25:26" pos:end="25:30">(<argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:29">gb</name></expr></argument>)</argument_list></call> <operator pos:start="25:32" pos:end="25:32">&lt;</operator> <name pos:start="25:34" pos:end="25:41">buf_size</name> <operator pos:start="25:43" pos:end="25:44">&lt;&lt;</operator> <literal type="number" pos:start="25:46" pos:end="25:46">3</literal> <operator pos:start="25:48" pos:end="25:49">&amp;&amp;</operator> <name pos:start="25:51" pos:end="25:61">pixels_read</name> <operator pos:start="25:63" pos:end="25:63">&lt;</operator> <name pos:start="25:65" pos:end="25:72">dbuf_len</name></expr>)</condition> <block pos:start="25:75" pos:end="191:5">{<block_content pos:start="27:9" pos:end="189:9">

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:12">bits</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:31"><name pos:start="27:16" pos:end="27:23">get_bits</name><argument_list pos:start="27:24" pos:end="27:31">(<argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><operator pos:start="27:25" pos:end="27:25">&amp;</operator><name pos:start="27:26" pos:end="27:27">gb</name></expr></argument>, <argument pos:start="27:30" pos:end="27:30"><expr pos:start="27:30" pos:end="27:30"><literal type="number" pos:start="27:30" pos:end="27:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="189:9"><if pos:start="31:9" pos:end="47:9">if <condition pos:start="31:12" pos:end="31:17">(<expr pos:start="31:13" pos:end="31:16"><name pos:start="31:13" pos:end="31:16">bits</name></expr>)</condition> <block pos:start="31:19" pos:end="47:9">{<block_content pos:start="33:13" pos:end="45:26">

            <if_stmt pos:start="33:13" pos:end="43:13"><if pos:start="33:13" pos:end="43:13">if <condition pos:start="33:16" pos:end="33:42">(<expr pos:start="33:17" pos:end="33:41"><name pos:start="33:17" pos:end="33:23">non_mod</name> <operator pos:start="33:25" pos:end="33:26">!=</operator> <literal type="number" pos:start="33:28" pos:end="33:28">1</literal> <operator pos:start="33:30" pos:end="33:31">||</operator> <name pos:start="33:33" pos:end="33:36">bits</name> <operator pos:start="33:38" pos:end="33:39">!=</operator> <literal type="number" pos:start="33:41" pos:end="33:41">1</literal></expr>)</condition> <block pos:start="33:44" pos:end="43:13">{<block_content pos:start="35:17" pos:end="41:38">

                <if_stmt pos:start="35:17" pos:end="41:38"><if pos:start="35:17" pos:end="37:49">if <condition pos:start="35:20" pos:end="35:30">(<expr pos:start="35:21" pos:end="35:29"><name pos:start="35:21" pos:end="35:29">map_table</name></expr>)</condition><block type="pseudo" pos:start="37:21" pos:end="37:49"><block_content pos:start="37:21" pos:end="37:49">

                    <expr_stmt pos:start="37:21" pos:end="37:49"><expr pos:start="37:21" pos:end="37:48"><operator pos:start="37:21" pos:end="37:21">*</operator><name pos:start="37:22" pos:end="37:28">destbuf</name><operator pos:start="37:29" pos:end="37:30">++</operator> <operator pos:start="37:32" pos:end="37:32">=</operator> <name pos:start="37:34" pos:end="37:48"><name pos:start="37:34" pos:end="37:42">map_table</name><index pos:start="37:43" pos:end="37:48">[<expr pos:start="37:44" pos:end="37:47"><name pos:start="37:44" pos:end="37:47">bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="39:17" pos:end="41:38">else<block type="pseudo" pos:start="41:21" pos:end="41:38"><block_content pos:start="41:21" pos:end="41:38">

                    <expr_stmt pos:start="41:21" pos:end="41:38"><expr pos:start="41:21" pos:end="41:37"><operator pos:start="41:21" pos:end="41:21">*</operator><name pos:start="41:22" pos:end="41:28">destbuf</name><operator pos:start="41:29" pos:end="41:30">++</operator> <operator pos:start="41:32" pos:end="41:32">=</operator> <name pos:start="41:34" pos:end="41:37">bits</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:26"><expr pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:23">pixels_read</name><operator pos:start="45:24" pos:end="45:25">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="189:9">else <block pos:start="47:16" pos:end="189:9">{<block_content pos:start="49:13" pos:end="187:13">

            <expr_stmt pos:start="49:13" pos:end="49:34"><expr pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:16">bits</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <call pos:start="49:20" pos:end="49:33"><name pos:start="49:20" pos:end="49:28">get_bits1</name><argument_list pos:start="49:29" pos:end="49:33">(<argument pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><operator pos:start="49:30" pos:end="49:30">&amp;</operator><name pos:start="49:31" pos:end="49:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="187:13"><if pos:start="51:13" pos:end="79:13">if <condition pos:start="51:16" pos:end="51:26">(<expr pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:20">bits</name> <operator pos:start="51:22" pos:end="51:23">==</operator> <literal type="number" pos:start="51:25" pos:end="51:25">1</literal></expr>)</condition> <block pos:start="51:28" pos:end="79:13">{<block_content pos:start="53:17" pos:end="77:17">

                <expr_stmt pos:start="53:17" pos:end="53:50"><expr pos:start="53:17" pos:end="53:49"><name pos:start="53:17" pos:end="53:26">run_length</name> <operator pos:start="53:28" pos:end="53:28">=</operator> <call pos:start="53:30" pos:end="53:45"><name pos:start="53:30" pos:end="53:37">get_bits</name><argument_list pos:start="53:38" pos:end="53:45">(<argument pos:start="53:39" pos:end="53:41"><expr pos:start="53:39" pos:end="53:41"><operator pos:start="53:39" pos:end="53:39">&amp;</operator><name pos:start="53:40" pos:end="53:41">gb</name></expr></argument>, <argument pos:start="53:44" pos:end="53:44"><expr pos:start="53:44" pos:end="53:44"><literal type="number" pos:start="53:44" pos:end="53:44">3</literal></expr></argument>)</argument_list></call> <operator pos:start="53:47" pos:end="53:47">+</operator> <literal type="number" pos:start="53:49" pos:end="53:49">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:40"><expr pos:start="55:17" pos:end="55:39"><name pos:start="55:17" pos:end="55:20">bits</name> <operator pos:start="55:22" pos:end="55:22">=</operator> <call pos:start="55:24" pos:end="55:39"><name pos:start="55:24" pos:end="55:31">get_bits</name><argument_list pos:start="55:32" pos:end="55:39">(<argument pos:start="55:33" pos:end="55:35"><expr pos:start="55:33" pos:end="55:35"><operator pos:start="55:33" pos:end="55:33">&amp;</operator><name pos:start="55:34" pos:end="55:35">gb</name></expr></argument>, <argument pos:start="55:38" pos:end="55:38"><expr pos:start="55:38" pos:end="55:38"><literal type="number" pos:start="55:38" pos:end="55:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="59:17" pos:end="77:17"><if pos:start="59:17" pos:end="61:46">if <condition pos:start="59:20" pos:end="59:46">(<expr pos:start="59:21" pos:end="59:45"><name pos:start="59:21" pos:end="59:27">non_mod</name> <operator pos:start="59:29" pos:end="59:30">==</operator> <literal type="number" pos:start="59:32" pos:end="59:32">1</literal> <operator pos:start="59:34" pos:end="59:35">&amp;&amp;</operator> <name pos:start="59:37" pos:end="59:40">bits</name> <operator pos:start="59:42" pos:end="59:43">==</operator> <literal type="number" pos:start="59:45" pos:end="59:45">1</literal></expr>)</condition><block type="pseudo" pos:start="61:21" pos:end="61:46"><block_content pos:start="61:21" pos:end="61:46">

                    <expr_stmt pos:start="61:21" pos:end="61:46"><expr pos:start="61:21" pos:end="61:45"><name pos:start="61:21" pos:end="61:31">pixels_read</name> <operator pos:start="61:33" pos:end="61:34">+=</operator> <name pos:start="61:36" pos:end="61:45">run_length</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="63:17" pos:end="77:17">else <block pos:start="63:22" pos:end="77:17">{<block_content pos:start="65:21" pos:end="75:21">

                    <if_stmt pos:start="65:21" pos:end="67:47"><if pos:start="65:21" pos:end="67:47">if <condition pos:start="65:24" pos:end="65:34">(<expr pos:start="65:25" pos:end="65:33"><name pos:start="65:25" pos:end="65:33">map_table</name></expr>)</condition><block type="pseudo" pos:start="67:25" pos:end="67:47"><block_content pos:start="67:25" pos:end="67:47">

                        <expr_stmt pos:start="67:25" pos:end="67:47"><expr pos:start="67:25" pos:end="67:46"><name pos:start="67:25" pos:end="67:28">bits</name> <operator pos:start="67:30" pos:end="67:30">=</operator> <name pos:start="67:32" pos:end="67:46"><name pos:start="67:32" pos:end="67:40">map_table</name><index pos:start="67:41" pos:end="67:46">[<expr pos:start="67:42" pos:end="67:45"><name pos:start="67:42" pos:end="67:45">bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <while pos:start="69:21" pos:end="75:21">while <condition pos:start="69:27" pos:end="69:70">(<expr pos:start="69:28" pos:end="69:69"><name pos:start="69:28" pos:end="69:37">run_length</name><operator pos:start="69:38" pos:end="69:39">--</operator> <operator pos:start="69:41" pos:end="69:41">&gt;</operator> <literal type="number" pos:start="69:43" pos:end="69:43">0</literal> <operator pos:start="69:45" pos:end="69:46">&amp;&amp;</operator> <name pos:start="69:48" pos:end="69:58">pixels_read</name> <operator pos:start="69:60" pos:end="69:60">&lt;</operator> <name pos:start="69:62" pos:end="69:69">dbuf_len</name></expr>)</condition> <block pos:start="69:72" pos:end="75:21">{<block_content pos:start="71:25" pos:end="73:38">

                        <expr_stmt pos:start="71:25" pos:end="71:42"><expr pos:start="71:25" pos:end="71:41"><operator pos:start="71:25" pos:end="71:25">*</operator><name pos:start="71:26" pos:end="71:32">destbuf</name><operator pos:start="71:33" pos:end="71:34">++</operator> <operator pos:start="71:36" pos:end="71:36">=</operator> <name pos:start="71:38" pos:end="71:41">bits</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="73:25" pos:end="73:38"><expr pos:start="73:25" pos:end="73:37"><name pos:start="73:25" pos:end="73:35">pixels_read</name><operator pos:start="73:36" pos:end="73:37">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></while>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="79:15" pos:end="187:13">else <block pos:start="79:20" pos:end="187:13">{<block_content pos:start="81:17" pos:end="185:17">

                <expr_stmt pos:start="81:17" pos:end="81:38"><expr pos:start="81:17" pos:end="81:37"><name pos:start="81:17" pos:end="81:20">bits</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <call pos:start="81:24" pos:end="81:37"><name pos:start="81:24" pos:end="81:32">get_bits1</name><argument_list pos:start="81:33" pos:end="81:37">(<argument pos:start="81:34" pos:end="81:36"><expr pos:start="81:34" pos:end="81:36"><operator pos:start="81:34" pos:end="81:34">&amp;</operator><name pos:start="81:35" pos:end="81:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="185:17"><if pos:start="83:17" pos:end="171:17">if <condition pos:start="83:20" pos:end="83:30">(<expr pos:start="83:21" pos:end="83:29"><name pos:start="83:21" pos:end="83:24">bits</name> <operator pos:start="83:26" pos:end="83:27">==</operator> <literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>)</condition> <block pos:start="83:32" pos:end="171:17">{<block_content pos:start="85:21" pos:end="169:21">

                    <expr_stmt pos:start="85:21" pos:end="85:44"><expr pos:start="85:21" pos:end="85:43"><name pos:start="85:21" pos:end="85:24">bits</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <call pos:start="85:28" pos:end="85:43"><name pos:start="85:28" pos:end="85:35">get_bits</name><argument_list pos:start="85:36" pos:end="85:43">(<argument pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><operator pos:start="85:37" pos:end="85:37">&amp;</operator><name pos:start="85:38" pos:end="85:39">gb</name></expr></argument>, <argument pos:start="85:42" pos:end="85:42"><expr pos:start="85:42" pos:end="85:42"><literal type="number" pos:start="85:42" pos:end="85:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="87:21" pos:end="169:21"><if pos:start="87:21" pos:end="115:21">if <condition pos:start="87:24" pos:end="87:34">(<expr pos:start="87:25" pos:end="87:33"><name pos:start="87:25" pos:end="87:28">bits</name> <operator pos:start="87:30" pos:end="87:31">==</operator> <literal type="number" pos:start="87:33" pos:end="87:33">2</literal></expr>)</condition> <block pos:start="87:36" pos:end="115:21">{<block_content pos:start="89:25" pos:end="113:25">

                        <expr_stmt pos:start="89:25" pos:end="89:59"><expr pos:start="89:25" pos:end="89:58"><name pos:start="89:25" pos:end="89:34">run_length</name> <operator pos:start="89:36" pos:end="89:36">=</operator> <call pos:start="89:38" pos:end="89:53"><name pos:start="89:38" pos:end="89:45">get_bits</name><argument_list pos:start="89:46" pos:end="89:53">(<argument pos:start="89:47" pos:end="89:49"><expr pos:start="89:47" pos:end="89:49"><operator pos:start="89:47" pos:end="89:47">&amp;</operator><name pos:start="89:48" pos:end="89:49">gb</name></expr></argument>, <argument pos:start="89:52" pos:end="89:52"><expr pos:start="89:52" pos:end="89:52"><literal type="number" pos:start="89:52" pos:end="89:52">4</literal></expr></argument>)</argument_list></call> <operator pos:start="89:55" pos:end="89:55">+</operator> <literal type="number" pos:start="89:57" pos:end="89:58">12</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="91:25" pos:end="91:48"><expr pos:start="91:25" pos:end="91:47"><name pos:start="91:25" pos:end="91:28">bits</name> <operator pos:start="91:30" pos:end="91:30">=</operator> <call pos:start="91:32" pos:end="91:47"><name pos:start="91:32" pos:end="91:39">get_bits</name><argument_list pos:start="91:40" pos:end="91:47">(<argument pos:start="91:41" pos:end="91:43"><expr pos:start="91:41" pos:end="91:43"><operator pos:start="91:41" pos:end="91:41">&amp;</operator><name pos:start="91:42" pos:end="91:43">gb</name></expr></argument>, <argument pos:start="91:46" pos:end="91:46"><expr pos:start="91:46" pos:end="91:46"><literal type="number" pos:start="91:46" pos:end="91:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="95:25" pos:end="113:25"><if pos:start="95:25" pos:end="97:54">if <condition pos:start="95:28" pos:end="95:54">(<expr pos:start="95:29" pos:end="95:53"><name pos:start="95:29" pos:end="95:35">non_mod</name> <operator pos:start="95:37" pos:end="95:38">==</operator> <literal type="number" pos:start="95:40" pos:end="95:40">1</literal> <operator pos:start="95:42" pos:end="95:43">&amp;&amp;</operator> <name pos:start="95:45" pos:end="95:48">bits</name> <operator pos:start="95:50" pos:end="95:51">==</operator> <literal type="number" pos:start="95:53" pos:end="95:53">1</literal></expr>)</condition><block type="pseudo" pos:start="97:29" pos:end="97:54"><block_content pos:start="97:29" pos:end="97:54">

                            <expr_stmt pos:start="97:29" pos:end="97:54"><expr pos:start="97:29" pos:end="97:53"><name pos:start="97:29" pos:end="97:39">pixels_read</name> <operator pos:start="97:41" pos:end="97:42">+=</operator> <name pos:start="97:44" pos:end="97:53">run_length</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="99:25" pos:end="113:25">else <block pos:start="99:30" pos:end="113:25">{<block_content pos:start="101:29" pos:end="111:29">

                            <if_stmt pos:start="101:29" pos:end="103:55"><if pos:start="101:29" pos:end="103:55">if <condition pos:start="101:32" pos:end="101:42">(<expr pos:start="101:33" pos:end="101:41"><name pos:start="101:33" pos:end="101:41">map_table</name></expr>)</condition><block type="pseudo" pos:start="103:33" pos:end="103:55"><block_content pos:start="103:33" pos:end="103:55">

                                <expr_stmt pos:start="103:33" pos:end="103:55"><expr pos:start="103:33" pos:end="103:54"><name pos:start="103:33" pos:end="103:36">bits</name> <operator pos:start="103:38" pos:end="103:38">=</operator> <name pos:start="103:40" pos:end="103:54"><name pos:start="103:40" pos:end="103:48">map_table</name><index pos:start="103:49" pos:end="103:54">[<expr pos:start="103:50" pos:end="103:53"><name pos:start="103:50" pos:end="103:53">bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <while pos:start="105:29" pos:end="111:29">while <condition pos:start="105:35" pos:end="105:78">(<expr pos:start="105:36" pos:end="105:77"><name pos:start="105:36" pos:end="105:45">run_length</name><operator pos:start="105:46" pos:end="105:47">--</operator> <operator pos:start="105:49" pos:end="105:49">&gt;</operator> <literal type="number" pos:start="105:51" pos:end="105:51">0</literal> <operator pos:start="105:53" pos:end="105:54">&amp;&amp;</operator> <name pos:start="105:56" pos:end="105:66">pixels_read</name> <operator pos:start="105:68" pos:end="105:68">&lt;</operator> <name pos:start="105:70" pos:end="105:77">dbuf_len</name></expr>)</condition> <block pos:start="105:80" pos:end="111:29">{<block_content pos:start="107:33" pos:end="109:46">

                                <expr_stmt pos:start="107:33" pos:end="107:50"><expr pos:start="107:33" pos:end="107:49"><operator pos:start="107:33" pos:end="107:33">*</operator><name pos:start="107:34" pos:end="107:40">destbuf</name><operator pos:start="107:41" pos:end="107:42">++</operator> <operator pos:start="107:44" pos:end="107:44">=</operator> <name pos:start="107:46" pos:end="107:49">bits</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="109:33" pos:end="109:46"><expr pos:start="109:33" pos:end="109:45"><name pos:start="109:33" pos:end="109:43">pixels_read</name><operator pos:start="109:44" pos:end="109:45">++</operator></expr>;</expr_stmt>

                            </block_content>}</block></while>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="115:23" pos:end="143:21">else if <condition pos:start="115:31" pos:end="115:41">(<expr pos:start="115:32" pos:end="115:40"><name pos:start="115:32" pos:end="115:35">bits</name> <operator pos:start="115:37" pos:end="115:38">==</operator> <literal type="number" pos:start="115:40" pos:end="115:40">3</literal></expr>)</condition> <block pos:start="115:43" pos:end="143:21">{<block_content pos:start="117:25" pos:end="141:25">

                        <expr_stmt pos:start="117:25" pos:end="117:59"><expr pos:start="117:25" pos:end="117:58"><name pos:start="117:25" pos:end="117:34">run_length</name> <operator pos:start="117:36" pos:end="117:36">=</operator> <call pos:start="117:38" pos:end="117:53"><name pos:start="117:38" pos:end="117:45">get_bits</name><argument_list pos:start="117:46" pos:end="117:53">(<argument pos:start="117:47" pos:end="117:49"><expr pos:start="117:47" pos:end="117:49"><operator pos:start="117:47" pos:end="117:47">&amp;</operator><name pos:start="117:48" pos:end="117:49">gb</name></expr></argument>, <argument pos:start="117:52" pos:end="117:52"><expr pos:start="117:52" pos:end="117:52"><literal type="number" pos:start="117:52" pos:end="117:52">8</literal></expr></argument>)</argument_list></call> <operator pos:start="117:55" pos:end="117:55">+</operator> <literal type="number" pos:start="117:57" pos:end="117:58">29</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="119:25" pos:end="119:48"><expr pos:start="119:25" pos:end="119:47"><name pos:start="119:25" pos:end="119:28">bits</name> <operator pos:start="119:30" pos:end="119:30">=</operator> <call pos:start="119:32" pos:end="119:47"><name pos:start="119:32" pos:end="119:39">get_bits</name><argument_list pos:start="119:40" pos:end="119:47">(<argument pos:start="119:41" pos:end="119:43"><expr pos:start="119:41" pos:end="119:43"><operator pos:start="119:41" pos:end="119:41">&amp;</operator><name pos:start="119:42" pos:end="119:43">gb</name></expr></argument>, <argument pos:start="119:46" pos:end="119:46"><expr pos:start="119:46" pos:end="119:46"><literal type="number" pos:start="119:46" pos:end="119:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="123:25" pos:end="141:25"><if pos:start="123:25" pos:end="125:54">if <condition pos:start="123:28" pos:end="123:54">(<expr pos:start="123:29" pos:end="123:53"><name pos:start="123:29" pos:end="123:35">non_mod</name> <operator pos:start="123:37" pos:end="123:38">==</operator> <literal type="number" pos:start="123:40" pos:end="123:40">1</literal> <operator pos:start="123:42" pos:end="123:43">&amp;&amp;</operator> <name pos:start="123:45" pos:end="123:48">bits</name> <operator pos:start="123:50" pos:end="123:51">==</operator> <literal type="number" pos:start="123:53" pos:end="123:53">1</literal></expr>)</condition><block type="pseudo" pos:start="125:29" pos:end="125:54"><block_content pos:start="125:29" pos:end="125:54">

                            <expr_stmt pos:start="125:29" pos:end="125:54"><expr pos:start="125:29" pos:end="125:53"><name pos:start="125:29" pos:end="125:39">pixels_read</name> <operator pos:start="125:41" pos:end="125:42">+=</operator> <name pos:start="125:44" pos:end="125:53">run_length</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="127:25" pos:end="141:25">else <block pos:start="127:30" pos:end="141:25">{<block_content pos:start="129:29" pos:end="139:29">

                            <if_stmt pos:start="129:29" pos:end="131:55"><if pos:start="129:29" pos:end="131:55">if <condition pos:start="129:32" pos:end="129:42">(<expr pos:start="129:33" pos:end="129:41"><name pos:start="129:33" pos:end="129:41">map_table</name></expr>)</condition><block type="pseudo" pos:start="131:33" pos:end="131:55"><block_content pos:start="131:33" pos:end="131:55">

                                <expr_stmt pos:start="131:33" pos:end="131:55"><expr pos:start="131:33" pos:end="131:54"><name pos:start="131:33" pos:end="131:36">bits</name> <operator pos:start="131:38" pos:end="131:38">=</operator> <name pos:start="131:40" pos:end="131:54"><name pos:start="131:40" pos:end="131:48">map_table</name><index pos:start="131:49" pos:end="131:54">[<expr pos:start="131:50" pos:end="131:53"><name pos:start="131:50" pos:end="131:53">bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <while pos:start="133:29" pos:end="139:29">while <condition pos:start="133:35" pos:end="133:78">(<expr pos:start="133:36" pos:end="133:77"><name pos:start="133:36" pos:end="133:45">run_length</name><operator pos:start="133:46" pos:end="133:47">--</operator> <operator pos:start="133:49" pos:end="133:49">&gt;</operator> <literal type="number" pos:start="133:51" pos:end="133:51">0</literal> <operator pos:start="133:53" pos:end="133:54">&amp;&amp;</operator> <name pos:start="133:56" pos:end="133:66">pixels_read</name> <operator pos:start="133:68" pos:end="133:68">&lt;</operator> <name pos:start="133:70" pos:end="133:77">dbuf_len</name></expr>)</condition> <block pos:start="133:80" pos:end="139:29">{<block_content pos:start="135:33" pos:end="137:46">

                                <expr_stmt pos:start="135:33" pos:end="135:50"><expr pos:start="135:33" pos:end="135:49"><operator pos:start="135:33" pos:end="135:33">*</operator><name pos:start="135:34" pos:end="135:40">destbuf</name><operator pos:start="135:41" pos:end="135:42">++</operator> <operator pos:start="135:44" pos:end="135:44">=</operator> <name pos:start="135:46" pos:end="135:49">bits</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="137:33" pos:end="137:46"><expr pos:start="137:33" pos:end="137:45"><name pos:start="137:33" pos:end="137:43">pixels_read</name><operator pos:start="137:44" pos:end="137:45">++</operator></expr>;</expr_stmt>

                            </block_content>}</block></while>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="143:23" pos:end="163:21">else if <condition pos:start="143:31" pos:end="143:41">(<expr pos:start="143:32" pos:end="143:40"><name pos:start="143:32" pos:end="143:35">bits</name> <operator pos:start="143:37" pos:end="143:38">==</operator> <literal type="number" pos:start="143:40" pos:end="143:40">1</literal></expr>)</condition> <block pos:start="143:43" pos:end="163:21">{<block_content pos:start="145:25" pos:end="161:25">

                        <expr_stmt pos:start="145:25" pos:end="145:41"><expr pos:start="145:25" pos:end="145:40"><name pos:start="145:25" pos:end="145:35">pixels_read</name> <operator pos:start="145:37" pos:end="145:38">+=</operator> <literal type="number" pos:start="145:40" pos:end="145:40">2</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="147:25" pos:end="153:37"><if pos:start="147:25" pos:end="149:48">if <condition pos:start="147:28" pos:end="147:38">(<expr pos:start="147:29" pos:end="147:37"><name pos:start="147:29" pos:end="147:37">map_table</name></expr>)</condition><block type="pseudo" pos:start="149:29" pos:end="149:48"><block_content pos:start="149:29" pos:end="149:48">

                            <expr_stmt pos:start="149:29" pos:end="149:48"><expr pos:start="149:29" pos:end="149:47"><name pos:start="149:29" pos:end="149:32">bits</name> <operator pos:start="149:34" pos:end="149:34">=</operator> <name pos:start="149:36" pos:end="149:47"><name pos:start="149:36" pos:end="149:44">map_table</name><index pos:start="149:45" pos:end="149:47">[<expr pos:start="149:46" pos:end="149:46"><literal type="number" pos:start="149:46" pos:end="149:46">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="151:25" pos:end="153:37">else<block type="pseudo" pos:start="153:29" pos:end="153:37"><block_content pos:start="153:29" pos:end="153:37">

                            <expr_stmt pos:start="153:29" pos:end="153:37"><expr pos:start="153:29" pos:end="153:36"><name pos:start="153:29" pos:end="153:32">bits</name> <operator pos:start="153:34" pos:end="153:34">=</operator> <literal type="number" pos:start="153:36" pos:end="153:36">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <if_stmt pos:start="155:25" pos:end="161:25"><if pos:start="155:25" pos:end="161:25">if <condition pos:start="155:28" pos:end="155:52">(<expr pos:start="155:29" pos:end="155:51"><name pos:start="155:29" pos:end="155:39">pixels_read</name> <operator pos:start="155:41" pos:end="155:42">&lt;=</operator> <name pos:start="155:44" pos:end="155:51">dbuf_len</name></expr>)</condition> <block pos:start="155:54" pos:end="161:25">{<block_content pos:start="157:29" pos:end="159:46">

                            <expr_stmt pos:start="157:29" pos:end="157:46"><expr pos:start="157:29" pos:end="157:45"><operator pos:start="157:29" pos:end="157:29">*</operator><name pos:start="157:30" pos:end="157:36">destbuf</name><operator pos:start="157:37" pos:end="157:38">++</operator> <operator pos:start="157:40" pos:end="157:40">=</operator> <name pos:start="157:42" pos:end="157:45">bits</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="159:29" pos:end="159:46"><expr pos:start="159:29" pos:end="159:45"><operator pos:start="159:29" pos:end="159:29">*</operator><name pos:start="159:30" pos:end="159:36">destbuf</name><operator pos:start="159:37" pos:end="159:38">++</operator> <operator pos:start="159:40" pos:end="159:40">=</operator> <name pos:start="159:42" pos:end="159:45">bits</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="163:23" pos:end="169:21">else <block pos:start="163:28" pos:end="169:21">{<block_content pos:start="165:25" pos:end="167:43">

                        <expr_stmt pos:start="165:25" pos:end="165:68"><expr pos:start="165:25" pos:end="165:67"><operator pos:start="165:25" pos:end="165:25">(</operator><operator pos:start="165:26" pos:end="165:26">*</operator><name pos:start="165:27" pos:end="165:32">srcbuf</name><operator pos:start="165:33" pos:end="165:33">)</operator> <operator pos:start="165:35" pos:end="165:36">+=</operator> <operator pos:start="165:38" pos:end="165:38">(</operator><call pos:start="165:39" pos:end="165:57"><name pos:start="165:39" pos:end="165:52">get_bits_count</name><argument_list pos:start="165:53" pos:end="165:57">(<argument pos:start="165:54" pos:end="165:56"><expr pos:start="165:54" pos:end="165:56"><operator pos:start="165:54" pos:end="165:54">&amp;</operator><name pos:start="165:55" pos:end="165:56">gb</name></expr></argument>)</argument_list></call> <operator pos:start="165:59" pos:end="165:59">+</operator> <literal type="number" pos:start="165:61" pos:end="165:61">7</literal><operator pos:start="165:62" pos:end="165:62">)</operator> <operator pos:start="165:64" pos:end="165:65">&gt;&gt;</operator> <literal type="number" pos:start="165:67" pos:end="165:67">3</literal></expr>;</expr_stmt>

                        <return pos:start="167:25" pos:end="167:43">return <expr pos:start="167:32" pos:end="167:42"><name pos:start="167:32" pos:end="167:42">pixels_read</name></expr>;</return>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="171:19" pos:end="185:17">else <block pos:start="171:24" pos:end="185:17">{<block_content pos:start="173:21" pos:end="183:34">

                    <if_stmt pos:start="173:21" pos:end="179:33"><if pos:start="173:21" pos:end="175:44">if <condition pos:start="173:24" pos:end="173:34">(<expr pos:start="173:25" pos:end="173:33"><name pos:start="173:25" pos:end="173:33">map_table</name></expr>)</condition><block type="pseudo" pos:start="175:25" pos:end="175:44"><block_content pos:start="175:25" pos:end="175:44">

                        <expr_stmt pos:start="175:25" pos:end="175:44"><expr pos:start="175:25" pos:end="175:43"><name pos:start="175:25" pos:end="175:28">bits</name> <operator pos:start="175:30" pos:end="175:30">=</operator> <name pos:start="175:32" pos:end="175:43"><name pos:start="175:32" pos:end="175:40">map_table</name><index pos:start="175:41" pos:end="175:43">[<expr pos:start="175:42" pos:end="175:42"><literal type="number" pos:start="175:42" pos:end="175:42">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="177:21" pos:end="179:33">else<block type="pseudo" pos:start="179:25" pos:end="179:33"><block_content pos:start="179:25" pos:end="179:33">

                        <expr_stmt pos:start="179:25" pos:end="179:33"><expr pos:start="179:25" pos:end="179:32"><name pos:start="179:25" pos:end="179:28">bits</name> <operator pos:start="179:30" pos:end="179:30">=</operator> <literal type="number" pos:start="179:32" pos:end="179:32">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="181:21" pos:end="181:38"><expr pos:start="181:21" pos:end="181:37"><operator pos:start="181:21" pos:end="181:21">*</operator><name pos:start="181:22" pos:end="181:28">destbuf</name><operator pos:start="181:29" pos:end="181:30">++</operator> <operator pos:start="181:32" pos:end="181:32">=</operator> <name pos:start="181:34" pos:end="181:37">bits</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="183:21" pos:end="183:34"><expr pos:start="183:21" pos:end="183:33"><name pos:start="183:21" pos:end="183:31">pixels_read</name><operator pos:start="183:32" pos:end="183:33">++</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="195:5" pos:end="197:65"><if pos:start="195:5" pos:end="197:65">if <condition pos:start="195:8" pos:end="195:25">(<expr pos:start="195:9" pos:end="195:24"><call pos:start="195:9" pos:end="195:24"><name pos:start="195:9" pos:end="195:16">get_bits</name><argument_list pos:start="195:17" pos:end="195:24">(<argument pos:start="195:18" pos:end="195:20"><expr pos:start="195:18" pos:end="195:20"><operator pos:start="195:18" pos:end="195:18">&amp;</operator><name pos:start="195:19" pos:end="195:20">gb</name></expr></argument>, <argument pos:start="195:23" pos:end="195:23"><expr pos:start="195:23" pos:end="195:23"><literal type="number" pos:start="195:23" pos:end="195:23">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="197:9" pos:end="197:65"><block_content pos:start="197:9" pos:end="197:65">

        <expr_stmt pos:start="197:9" pos:end="197:65"><expr pos:start="197:9" pos:end="197:64"><call pos:start="197:9" pos:end="197:64"><name pos:start="197:9" pos:end="197:14">av_log</name><argument_list pos:start="197:15" pos:end="197:64">(<argument pos:start="197:16" pos:end="197:16"><expr pos:start="197:16" pos:end="197:16"><literal type="number" pos:start="197:16" pos:end="197:16">0</literal></expr></argument>, <argument pos:start="197:19" pos:end="197:30"><expr pos:start="197:19" pos:end="197:30"><name pos:start="197:19" pos:end="197:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:33" pos:end="197:63"><expr pos:start="197:33" pos:end="197:63"><literal type="string" pos:start="197:33" pos:end="197:63">"DVBSub error: line overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:48"><expr pos:start="201:5" pos:end="201:47"><operator pos:start="201:5" pos:end="201:5">(</operator><operator pos:start="201:6" pos:end="201:6">*</operator><name pos:start="201:7" pos:end="201:12">srcbuf</name><operator pos:start="201:13" pos:end="201:13">)</operator> <operator pos:start="201:15" pos:end="201:16">+=</operator> <operator pos:start="201:18" pos:end="201:18">(</operator><call pos:start="201:19" pos:end="201:37"><name pos:start="201:19" pos:end="201:32">get_bits_count</name><argument_list pos:start="201:33" pos:end="201:37">(<argument pos:start="201:34" pos:end="201:36"><expr pos:start="201:34" pos:end="201:36"><operator pos:start="201:34" pos:end="201:34">&amp;</operator><name pos:start="201:35" pos:end="201:36">gb</name></expr></argument>)</argument_list></call> <operator pos:start="201:39" pos:end="201:39">+</operator> <literal type="number" pos:start="201:41" pos:end="201:41">7</literal><operator pos:start="201:42" pos:end="201:42">)</operator> <operator pos:start="201:44" pos:end="201:45">&gt;&gt;</operator> <literal type="number" pos:start="201:47" pos:end="201:47">3</literal></expr>;</expr_stmt>



    <return pos:start="205:5" pos:end="205:23">return <expr pos:start="205:12" pos:end="205:22"><name pos:start="205:12" pos:end="205:22">pixels_read</name></expr>;</return>

</block_content>}</block></function>
</unit>
