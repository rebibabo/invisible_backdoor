<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20523.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">usb_hid_handle_control</name><parameter_list pos:start="1:34" pos:end="3:71">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:43">USBDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:61">request</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">value</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:43"><decl pos:start="3:35" pos:end="3:43"><type pos:start="3:35" pos:end="3:43"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:43">index</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:55"><decl pos:start="3:46" pos:end="3:55"><type pos:start="3:46" pos:end="3:55"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:55">length</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:70"><decl pos:start="3:58" pos:end="3:70"><type pos:start="3:58" pos:end="3:70"><name pos:start="3:58" pos:end="3:64">uint8_t</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:70">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="225:1">{<block_content pos:start="7:5" pos:end="223:15">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">USBHIDState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:39">= <expr pos:start="7:22" pos:end="7:39"><operator pos:start="7:22" pos:end="7:22">(</operator><name pos:start="7:23" pos:end="7:33">USBHIDState</name> <operator pos:start="7:35" pos:end="7:35">*</operator><operator pos:start="7:36" pos:end="7:36">)</operator><name pos:start="7:37" pos:end="7:39">dev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:76"><expr pos:start="13:5" pos:end="13:75"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:75"><name pos:start="13:11" pos:end="13:33">usb_desc_handle_control</name><argument_list pos:start="13:34" pos:end="13:75">(<argument pos:start="13:35" pos:end="13:37"><expr pos:start="13:35" pos:end="13:37"><name pos:start="13:35" pos:end="13:37">dev</name></expr></argument>, <argument pos:start="13:40" pos:end="13:46"><expr pos:start="13:40" pos:end="13:46"><name pos:start="13:40" pos:end="13:46">request</name></expr></argument>, <argument pos:start="13:49" pos:end="13:53"><expr pos:start="13:49" pos:end="13:53"><name pos:start="13:49" pos:end="13:53">value</name></expr></argument>, <argument pos:start="13:56" pos:end="13:60"><expr pos:start="13:56" pos:end="13:60"><name pos:start="13:56" pos:end="13:60">index</name></expr></argument>, <argument pos:start="13:63" pos:end="13:68"><expr pos:start="13:63" pos:end="13:68"><name pos:start="13:63" pos:end="13:68">length</name></expr></argument>, <argument pos:start="13:71" pos:end="13:74"><expr pos:start="13:71" pos:end="13:74"><name pos:start="13:71" pos:end="13:74">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:14">&gt;=</operator> <literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>)</condition> <block pos:start="15:19" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:12"><expr pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <literal type="number" pos:start="23:11" pos:end="23:11">0</literal></expr>;</expr_stmt>

    <switch pos:start="25:5" pos:end="221:5">switch<condition pos:start="25:11" pos:end="25:19">(<expr pos:start="25:12" pos:end="25:18"><name pos:start="25:12" pos:end="25:18">request</name></expr>)</condition> <block pos:start="25:21" pos:end="221:5">{<block_content pos:start="27:5" pos:end="219:14">

    <case pos:start="27:5" pos:end="27:44">case <expr pos:start="27:10" pos:end="27:43"><name pos:start="27:10" pos:end="27:22">DeviceRequest</name> <operator pos:start="27:24" pos:end="27:24">|</operator> <name pos:start="27:26" pos:end="27:43">USB_REQ_GET_STATUS</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="31:61"><expr pos:start="29:9" pos:end="31:60"><name pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:12">data</name><index pos:start="29:13" pos:end="29:15">[<expr pos:start="29:14" pos:end="29:14"><literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>]</index></name> <operator pos:start="29:17" pos:end="29:17">=</operator> <operator pos:start="29:19" pos:end="29:19">(</operator><literal type="number" pos:start="29:20" pos:end="29:20">1</literal> <operator pos:start="29:22" pos:end="29:23">&lt;&lt;</operator> <name pos:start="29:25" pos:end="29:47">USB_DEVICE_SELF_POWERED</name><operator pos:start="29:48" pos:end="29:48">)</operator> <operator pos:start="29:50" pos:end="29:50">|</operator>

            <operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:31"><name pos:start="31:14" pos:end="31:16">dev</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:31">remote_wakeup</name></name> <operator pos:start="31:33" pos:end="31:34">&lt;&lt;</operator> <name pos:start="31:36" pos:end="31:59">USB_DEVICE_REMOTE_WAKEUP</name><operator pos:start="31:60" pos:end="31:60">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">data</name><index pos:start="33:13" pos:end="33:15">[<expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr>]</index></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <literal type="number" pos:start="33:19" pos:end="33:22">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <literal type="number" pos:start="35:15" pos:end="35:15">2</literal></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:50">case <expr pos:start="39:10" pos:end="39:49"><name pos:start="39:10" pos:end="39:25">DeviceOutRequest</name> <operator pos:start="39:27" pos:end="39:27">|</operator> <name pos:start="39:29" pos:end="39:49">USB_REQ_CLEAR_FEATURE</name></expr>:</case>

        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:46">(<expr pos:start="41:13" pos:end="41:45"><name pos:start="41:13" pos:end="41:17">value</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:45">USB_DEVICE_REMOTE_WAKEUP</name></expr>)</condition> <block pos:start="41:48" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:35">

            <expr_stmt pos:start="43:13" pos:end="43:35"><expr pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:15">dev</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:30">remote_wakeup</name></name> <operator pos:start="43:32" pos:end="43:32">=</operator> <literal type="number" pos:start="43:34" pos:end="43:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="45:11" pos:end="49:9">else <block pos:start="45:16" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:22">

            <goto pos:start="47:13" pos:end="47:22">goto <name pos:start="47:18" pos:end="47:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:16"><expr pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:48">case <expr pos:start="55:10" pos:end="55:47"><name pos:start="55:10" pos:end="55:25">DeviceOutRequest</name> <operator pos:start="55:27" pos:end="55:27">|</operator> <name pos:start="55:29" pos:end="55:47">USB_REQ_SET_FEATURE</name></expr>:</case>

        <if_stmt pos:start="57:9" pos:end="65:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:46">(<expr pos:start="57:13" pos:end="57:45"><name pos:start="57:13" pos:end="57:17">value</name> <operator pos:start="57:19" pos:end="57:20">==</operator> <name pos:start="57:22" pos:end="57:45">USB_DEVICE_REMOTE_WAKEUP</name></expr>)</condition> <block pos:start="57:48" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:35">

            <expr_stmt pos:start="59:13" pos:end="59:35"><expr pos:start="59:13" pos:end="59:34"><name pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:15">dev</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:30">remote_wakeup</name></name> <operator pos:start="59:32" pos:end="59:32">=</operator> <literal type="number" pos:start="59:34" pos:end="59:34">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="65:9">else <block pos:start="61:16" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:22">

            <goto pos:start="63:13" pos:end="63:22">goto <name pos:start="63:18" pos:end="63:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:16"><expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:51">case <expr pos:start="71:10" pos:end="71:50"><name pos:start="71:10" pos:end="71:22">DeviceRequest</name> <operator pos:start="71:24" pos:end="71:24">|</operator> <name pos:start="71:26" pos:end="71:50">USB_REQ_GET_CONFIGURATION</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:20"><expr pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:12">data</name><index pos:start="73:13" pos:end="73:15">[<expr pos:start="73:14" pos:end="73:14"><literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>]</index></name> <operator pos:start="73:17" pos:end="73:17">=</operator> <literal type="number" pos:start="73:19" pos:end="73:19">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:16"><expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <literal type="number" pos:start="75:15" pos:end="75:15">1</literal></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:54">case <expr pos:start="79:10" pos:end="79:53"><name pos:start="79:10" pos:end="79:25">DeviceOutRequest</name> <operator pos:start="79:27" pos:end="79:27">|</operator> <name pos:start="79:29" pos:end="79:53">USB_REQ_SET_CONFIGURATION</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:16"><expr pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <literal type="number" pos:start="81:15" pos:end="81:15">0</literal></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:47">case <expr pos:start="85:10" pos:end="85:46"><name pos:start="85:10" pos:end="85:22">DeviceRequest</name> <operator pos:start="85:24" pos:end="85:24">|</operator> <name pos:start="85:26" pos:end="85:46">USB_REQ_GET_INTERFACE</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:20"><expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:12">data</name><index pos:start="87:13" pos:end="87:15">[<expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>]</index></name> <operator pos:start="87:17" pos:end="87:17">=</operator> <literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:16"><expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <literal type="number" pos:start="89:15" pos:end="89:15">1</literal></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:50">case <expr pos:start="93:10" pos:end="93:49"><name pos:start="93:10" pos:end="93:25">DeviceOutRequest</name> <operator pos:start="93:27" pos:end="93:27">|</operator> <name pos:start="93:29" pos:end="93:49">USB_REQ_SET_INTERFACE</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:16"><expr pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <literal type="number" pos:start="95:15" pos:end="95:15">0</literal></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

        <comment type="block" pos:start="99:9" pos:end="99:35">/* hid specific requests */</comment>

    <case pos:start="101:5" pos:end="101:51">case <expr pos:start="101:10" pos:end="101:50"><name pos:start="101:10" pos:end="101:25">InterfaceRequest</name> <operator pos:start="101:27" pos:end="101:27">|</operator> <name pos:start="101:29" pos:end="101:50">USB_REQ_GET_DESCRIPTOR</name></expr>:</case>

        <switch pos:start="103:9" pos:end="139:9">switch<condition pos:start="103:15" pos:end="103:26">(<expr pos:start="103:16" pos:end="103:25"><name pos:start="103:16" pos:end="103:20">value</name> <operator pos:start="103:22" pos:end="103:23">&gt;&gt;</operator> <literal type="number" pos:start="103:25" pos:end="103:25">8</literal></expr>)</condition> <block pos:start="103:28" pos:end="139:9">{<block_content pos:start="105:9" pos:end="137:22">

        <case pos:start="105:9" pos:end="105:18">case <expr pos:start="105:14" pos:end="105:17"><literal type="number" pos:start="105:14" pos:end="105:17">0x22</literal></expr>:</case>

	    <if_stmt pos:start="107:13" pos:end="131:13"><if pos:start="107:13" pos:end="115:13">if <condition pos:start="107:16" pos:end="107:37">(<expr pos:start="107:17" pos:end="107:36"><name pos:start="107:17" pos:end="107:23"><name pos:start="107:17" pos:end="107:17">s</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:23">kind</name></name> <operator pos:start="107:25" pos:end="107:26">==</operator> <name pos:start="107:28" pos:end="107:36">USB_MOUSE</name></expr>)</condition> <block pos:start="107:39" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:63">

		<expr_stmt pos:start="109:17" pos:end="111:65"><expr pos:start="109:17" pos:end="111:64"><call pos:start="109:17" pos:end="111:64"><name pos:start="109:17" pos:end="109:22">memcpy</name><argument_list pos:start="109:23" pos:end="111:64">(<argument pos:start="109:24" pos:end="109:27"><expr pos:start="109:24" pos:end="109:27"><name pos:start="109:24" pos:end="109:27">data</name></expr></argument>, <argument pos:start="109:30" pos:end="109:61"><expr pos:start="109:30" pos:end="109:61"><name pos:start="109:30" pos:end="109:61">qemu_mouse_hid_report_descriptor</name></expr></argument>,

		       <argument pos:start="111:24" pos:end="111:63"><expr pos:start="111:24" pos:end="111:63"><sizeof pos:start="111:24" pos:end="111:63">sizeof<argument_list pos:start="111:30" pos:end="111:63">(<argument pos:start="111:31" pos:end="111:62"><expr pos:start="111:31" pos:end="111:62"><name pos:start="111:31" pos:end="111:62">qemu_mouse_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="113:17" pos:end="113:63"><expr pos:start="113:17" pos:end="113:62"><name pos:start="113:17" pos:end="113:19">ret</name> <operator pos:start="113:21" pos:end="113:21">=</operator> <sizeof pos:start="113:23" pos:end="113:62">sizeof<argument_list pos:start="113:29" pos:end="113:62">(<argument pos:start="113:30" pos:end="113:61"><expr pos:start="113:30" pos:end="113:61"><name pos:start="113:30" pos:end="113:61">qemu_mouse_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	    </block_content>}</block></if> <if type="elseif" pos:start="115:15" pos:end="123:13">else if <condition pos:start="115:23" pos:end="115:45">(<expr pos:start="115:24" pos:end="115:44"><name pos:start="115:24" pos:end="115:30"><name pos:start="115:24" pos:end="115:24">s</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:30">kind</name></name> <operator pos:start="115:32" pos:end="115:33">==</operator> <name pos:start="115:35" pos:end="115:44">USB_TABLET</name></expr>)</condition> <block pos:start="115:47" pos:end="123:13">{<block_content pos:start="117:17" pos:end="121:64">

		<expr_stmt pos:start="117:17" pos:end="119:66"><expr pos:start="117:17" pos:end="119:65"><call pos:start="117:17" pos:end="119:65"><name pos:start="117:17" pos:end="117:22">memcpy</name><argument_list pos:start="117:23" pos:end="119:65">(<argument pos:start="117:24" pos:end="117:27"><expr pos:start="117:24" pos:end="117:27"><name pos:start="117:24" pos:end="117:27">data</name></expr></argument>, <argument pos:start="117:30" pos:end="117:62"><expr pos:start="117:30" pos:end="117:62"><name pos:start="117:30" pos:end="117:62">qemu_tablet_hid_report_descriptor</name></expr></argument>,

		       <argument pos:start="119:24" pos:end="119:64"><expr pos:start="119:24" pos:end="119:64"><sizeof pos:start="119:24" pos:end="119:64">sizeof<argument_list pos:start="119:30" pos:end="119:64">(<argument pos:start="119:31" pos:end="119:63"><expr pos:start="119:31" pos:end="119:63"><name pos:start="119:31" pos:end="119:63">qemu_tablet_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="121:17" pos:end="121:64"><expr pos:start="121:17" pos:end="121:63"><name pos:start="121:17" pos:end="121:19">ret</name> <operator pos:start="121:21" pos:end="121:21">=</operator> <sizeof pos:start="121:23" pos:end="121:63">sizeof<argument_list pos:start="121:29" pos:end="121:63">(<argument pos:start="121:30" pos:end="121:62"><expr pos:start="121:30" pos:end="121:62"><name pos:start="121:30" pos:end="121:62">qemu_tablet_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="123:15" pos:end="131:13">else if <condition pos:start="123:23" pos:end="123:47">(<expr pos:start="123:24" pos:end="123:46"><name pos:start="123:24" pos:end="123:30"><name pos:start="123:24" pos:end="123:24">s</name><operator pos:start="123:25" pos:end="123:26">-&gt;</operator><name pos:start="123:27" pos:end="123:30">kind</name></name> <operator pos:start="123:32" pos:end="123:33">==</operator> <name pos:start="123:35" pos:end="123:46">USB_KEYBOARD</name></expr>)</condition> <block pos:start="123:49" pos:end="131:13">{<block_content pos:start="125:17" pos:end="129:66">

                <expr_stmt pos:start="125:17" pos:end="127:68"><expr pos:start="125:17" pos:end="127:67"><call pos:start="125:17" pos:end="127:67"><name pos:start="125:17" pos:end="125:22">memcpy</name><argument_list pos:start="125:23" pos:end="127:67">(<argument pos:start="125:24" pos:end="125:27"><expr pos:start="125:24" pos:end="125:27"><name pos:start="125:24" pos:end="125:27">data</name></expr></argument>, <argument pos:start="125:30" pos:end="125:64"><expr pos:start="125:30" pos:end="125:64"><name pos:start="125:30" pos:end="125:64">qemu_keyboard_hid_report_descriptor</name></expr></argument>,

                       <argument pos:start="127:24" pos:end="127:66"><expr pos:start="127:24" pos:end="127:66"><sizeof pos:start="127:24" pos:end="127:66">sizeof<argument_list pos:start="127:30" pos:end="127:66">(<argument pos:start="127:31" pos:end="127:65"><expr pos:start="127:31" pos:end="127:65"><name pos:start="127:31" pos:end="127:65">qemu_keyboard_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:66"><expr pos:start="129:17" pos:end="129:65"><name pos:start="129:17" pos:end="129:19">ret</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <sizeof pos:start="129:23" pos:end="129:65">sizeof<argument_list pos:start="129:29" pos:end="129:65">(<argument pos:start="129:30" pos:end="129:64"><expr pos:start="129:30" pos:end="129:64"><name pos:start="129:30" pos:end="129:64">qemu_keyboard_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <default pos:start="135:9" pos:end="135:16">default:</default>

            <goto pos:start="137:13" pos:end="137:22">goto <name pos:start="137:18" pos:end="137:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    <case pos:start="143:5" pos:end="143:20">case <expr pos:start="143:10" pos:end="143:19"><name pos:start="143:10" pos:end="143:19">GET_REPORT</name></expr>:</case>

	<if_stmt pos:start="145:9" pos:end="155:59"><if pos:start="145:9" pos:end="147:50">if <condition pos:start="145:12" pos:end="145:33">(<expr pos:start="145:13" pos:end="145:32"><name pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:19">kind</name></name> <operator pos:start="145:21" pos:end="145:22">==</operator> <name pos:start="145:24" pos:end="145:32">USB_MOUSE</name></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="147:50"><block_content pos:start="147:13" pos:end="147:50">

            <expr_stmt pos:start="147:13" pos:end="147:50"><expr pos:start="147:13" pos:end="147:49"><name pos:start="147:13" pos:end="147:15">ret</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <call pos:start="147:19" pos:end="147:49"><name pos:start="147:19" pos:end="147:32">usb_mouse_poll</name><argument_list pos:start="147:33" pos:end="147:49">(<argument pos:start="147:34" pos:end="147:34"><expr pos:start="147:34" pos:end="147:34"><name pos:start="147:34" pos:end="147:34">s</name></expr></argument>, <argument pos:start="147:37" pos:end="147:40"><expr pos:start="147:37" pos:end="147:40"><name pos:start="147:37" pos:end="147:40">data</name></expr></argument>, <argument pos:start="147:43" pos:end="147:48"><expr pos:start="147:43" pos:end="147:48"><name pos:start="147:43" pos:end="147:48">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif" pos:start="149:9" pos:end="151:51">else if <condition pos:start="149:17" pos:end="149:39">(<expr pos:start="149:18" pos:end="149:38"><name pos:start="149:18" pos:end="149:24"><name pos:start="149:18" pos:end="149:18">s</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:24">kind</name></name> <operator pos:start="149:26" pos:end="149:27">==</operator> <name pos:start="149:29" pos:end="149:38">USB_TABLET</name></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:51"><block_content pos:start="151:13" pos:end="151:51">

            <expr_stmt pos:start="151:13" pos:end="151:51"><expr pos:start="151:13" pos:end="151:50"><name pos:start="151:13" pos:end="151:15">ret</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <call pos:start="151:19" pos:end="151:50"><name pos:start="151:19" pos:end="151:33">usb_tablet_poll</name><argument_list pos:start="151:34" pos:end="151:50">(<argument pos:start="151:35" pos:end="151:35"><expr pos:start="151:35" pos:end="151:35"><name pos:start="151:35" pos:end="151:35">s</name></expr></argument>, <argument pos:start="151:38" pos:end="151:41"><expr pos:start="151:38" pos:end="151:41"><name pos:start="151:38" pos:end="151:41">data</name></expr></argument>, <argument pos:start="151:44" pos:end="151:49"><expr pos:start="151:44" pos:end="151:49"><name pos:start="151:44" pos:end="151:49">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="153:9" pos:end="155:59">else if <condition pos:start="153:17" pos:end="153:41">(<expr pos:start="153:18" pos:end="153:40"><name pos:start="153:18" pos:end="153:24"><name pos:start="153:18" pos:end="153:18">s</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:24">kind</name></name> <operator pos:start="153:26" pos:end="153:27">==</operator> <name pos:start="153:29" pos:end="153:40">USB_KEYBOARD</name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:59"><block_content pos:start="155:13" pos:end="155:59">

            <expr_stmt pos:start="155:13" pos:end="155:59"><expr pos:start="155:13" pos:end="155:58"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:58"><name pos:start="155:19" pos:end="155:35">usb_keyboard_poll</name><argument_list pos:start="155:36" pos:end="155:58">(<argument pos:start="155:37" pos:end="155:43"><expr pos:start="155:37" pos:end="155:43"><operator pos:start="155:37" pos:end="155:37">&amp;</operator><name pos:start="155:38" pos:end="155:43"><name pos:start="155:38" pos:end="155:38">s</name><operator pos:start="155:39" pos:end="155:40">-&gt;</operator><name pos:start="155:41" pos:end="155:43">kbd</name></name></expr></argument>, <argument pos:start="155:46" pos:end="155:49"><expr pos:start="155:46" pos:end="155:49"><name pos:start="155:46" pos:end="155:49">data</name></expr></argument>, <argument pos:start="155:52" pos:end="155:57"><expr pos:start="155:52" pos:end="155:57"><name pos:start="155:52" pos:end="155:57">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    <case pos:start="159:5" pos:end="159:20">case <expr pos:start="159:10" pos:end="159:19"><name pos:start="159:10" pos:end="159:19">SET_REPORT</name></expr>:</case>

        <if_stmt pos:start="161:9" pos:end="167:22"><if pos:start="161:9" pos:end="163:60">if <condition pos:start="161:12" pos:end="161:36">(<expr pos:start="161:13" pos:end="161:35"><name pos:start="161:13" pos:end="161:19"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:19">kind</name></name> <operator pos:start="161:21" pos:end="161:22">==</operator> <name pos:start="161:24" pos:end="161:35">USB_KEYBOARD</name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:60"><block_content pos:start="163:13" pos:end="163:60">

            <expr_stmt pos:start="163:13" pos:end="163:60"><expr pos:start="163:13" pos:end="163:59"><name pos:start="163:13" pos:end="163:15">ret</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <call pos:start="163:19" pos:end="163:59"><name pos:start="163:19" pos:end="163:36">usb_keyboard_write</name><argument_list pos:start="163:37" pos:end="163:59">(<argument pos:start="163:38" pos:end="163:44"><expr pos:start="163:38" pos:end="163:44"><operator pos:start="163:38" pos:end="163:38">&amp;</operator><name pos:start="163:39" pos:end="163:44"><name pos:start="163:39" pos:end="163:39">s</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:44">kbd</name></name></expr></argument>, <argument pos:start="163:47" pos:end="163:50"><expr pos:start="163:47" pos:end="163:50"><name pos:start="163:47" pos:end="163:50">data</name></expr></argument>, <argument pos:start="163:53" pos:end="163:58"><expr pos:start="163:53" pos:end="163:58"><name pos:start="163:53" pos:end="163:58">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="165:9" pos:end="167:22">else<block type="pseudo" pos:start="167:13" pos:end="167:22"><block_content pos:start="167:13" pos:end="167:22">

            <goto pos:start="167:13" pos:end="167:22">goto <name pos:start="167:18" pos:end="167:21">fail</name>;</goto></block_content></block></else></if_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    <case pos:start="171:5" pos:end="171:22">case <expr pos:start="171:10" pos:end="171:21"><name pos:start="171:10" pos:end="171:21">GET_PROTOCOL</name></expr>:</case>

        <if_stmt pos:start="173:9" pos:end="175:22"><if pos:start="173:9" pos:end="175:22">if <condition pos:start="173:12" pos:end="173:36">(<expr pos:start="173:13" pos:end="173:35"><name pos:start="173:13" pos:end="173:19"><name pos:start="173:13" pos:end="173:13">s</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:19">kind</name></name> <operator pos:start="173:21" pos:end="173:22">!=</operator> <name pos:start="173:24" pos:end="173:35">USB_KEYBOARD</name></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:22"><block_content pos:start="175:13" pos:end="175:22">

            <goto pos:start="175:13" pos:end="175:22">goto <name pos:start="175:18" pos:end="175:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:16"><expr pos:start="177:9" pos:end="177:15"><name pos:start="177:9" pos:end="177:11">ret</name> <operator pos:start="177:13" pos:end="177:13">=</operator> <literal type="number" pos:start="177:15" pos:end="177:15">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:30"><expr pos:start="179:9" pos:end="179:29"><name pos:start="179:9" pos:end="179:15"><name pos:start="179:9" pos:end="179:12">data</name><index pos:start="179:13" pos:end="179:15">[<expr pos:start="179:14" pos:end="179:14"><literal type="number" pos:start="179:14" pos:end="179:14">0</literal></expr>]</index></name> <operator pos:start="179:17" pos:end="179:17">=</operator> <name pos:start="179:19" pos:end="179:29"><name pos:start="179:19" pos:end="179:19">s</name><operator pos:start="179:20" pos:end="179:21">-&gt;</operator><name pos:start="179:22" pos:end="179:29">protocol</name></name></expr>;</expr_stmt>

        <break pos:start="181:9" pos:end="181:14">break;</break>

    <case pos:start="183:5" pos:end="183:22">case <expr pos:start="183:10" pos:end="183:21"><name pos:start="183:10" pos:end="183:21">SET_PROTOCOL</name></expr>:</case>

        <if_stmt pos:start="185:9" pos:end="187:22"><if pos:start="185:9" pos:end="187:22">if <condition pos:start="185:12" pos:end="185:36">(<expr pos:start="185:13" pos:end="185:35"><name pos:start="185:13" pos:end="185:19"><name pos:start="185:13" pos:end="185:13">s</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:19">kind</name></name> <operator pos:start="185:21" pos:end="185:22">!=</operator> <name pos:start="185:24" pos:end="185:35">USB_KEYBOARD</name></expr>)</condition><block type="pseudo" pos:start="187:13" pos:end="187:22"><block_content pos:start="187:13" pos:end="187:22">

            <goto pos:start="187:13" pos:end="187:22">goto <name pos:start="187:18" pos:end="187:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:16"><expr pos:start="189:9" pos:end="189:15"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <literal type="number" pos:start="189:15" pos:end="189:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:28"><expr pos:start="191:9" pos:end="191:27"><name pos:start="191:9" pos:end="191:19"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:19">protocol</name></name> <operator pos:start="191:21" pos:end="191:21">=</operator> <name pos:start="191:23" pos:end="191:27">value</name></expr>;</expr_stmt>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <case pos:start="195:5" pos:end="195:18">case <expr pos:start="195:10" pos:end="195:17"><name pos:start="195:10" pos:end="195:17">GET_IDLE</name></expr>:</case>

        <expr_stmt pos:start="197:9" pos:end="197:16"><expr pos:start="197:9" pos:end="197:15"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <literal type="number" pos:start="197:15" pos:end="197:15">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:26"><expr pos:start="199:9" pos:end="199:25"><name pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:12">data</name><index pos:start="199:13" pos:end="199:15">[<expr pos:start="199:14" pos:end="199:14"><literal type="number" pos:start="199:14" pos:end="199:14">0</literal></expr>]</index></name> <operator pos:start="199:17" pos:end="199:17">=</operator> <name pos:start="199:19" pos:end="199:25"><name pos:start="199:19" pos:end="199:19">s</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:25">idle</name></name></expr>;</expr_stmt>

        <break pos:start="201:9" pos:end="201:14">break;</break>

    <case pos:start="203:5" pos:end="203:18">case <expr pos:start="203:10" pos:end="203:17"><name pos:start="203:10" pos:end="203:17">SET_IDLE</name></expr>:</case>

        <expr_stmt pos:start="205:9" pos:end="205:41"><expr pos:start="205:9" pos:end="205:40"><name pos:start="205:9" pos:end="205:15"><name pos:start="205:9" pos:end="205:9">s</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:15">idle</name></name> <operator pos:start="205:17" pos:end="205:17">=</operator> <operator pos:start="205:19" pos:end="205:19">(</operator><name pos:start="205:20" pos:end="205:26">uint8_t</name><operator pos:start="205:27" pos:end="205:27">)</operator> <operator pos:start="205:29" pos:end="205:29">(</operator><name pos:start="205:30" pos:end="205:34">value</name> <operator pos:start="205:36" pos:end="205:37">&gt;&gt;</operator> <literal type="number" pos:start="205:39" pos:end="205:39">8</literal><operator pos:start="205:40" pos:end="205:40">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:59"><expr pos:start="207:9" pos:end="207:58"><call pos:start="207:9" pos:end="207:58"><name pos:start="207:9" pos:end="207:29">usb_hid_set_next_idle</name><argument_list pos:start="207:30" pos:end="207:58">(<argument pos:start="207:31" pos:end="207:31"><expr pos:start="207:31" pos:end="207:31"><name pos:start="207:31" pos:end="207:31">s</name></expr></argument>, <argument pos:start="207:34" pos:end="207:57"><expr pos:start="207:34" pos:end="207:57"><call pos:start="207:34" pos:end="207:57"><name pos:start="207:34" pos:end="207:47">qemu_get_clock</name><argument_list pos:start="207:48" pos:end="207:57">(<argument pos:start="207:49" pos:end="207:56"><expr pos:start="207:49" pos:end="207:56"><name pos:start="207:49" pos:end="207:56">vm_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:16"><expr pos:start="209:9" pos:end="209:15"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">=</operator> <literal type="number" pos:start="209:15" pos:end="209:15">0</literal></expr>;</expr_stmt>

        <break pos:start="211:9" pos:end="211:14">break;</break>

    <default pos:start="213:5" pos:end="213:12">default:</default>

    <label pos:start="215:5" pos:end="215:9"><name pos:start="215:5" pos:end="215:8">fail</name>:</label>

        <expr_stmt pos:start="217:9" pos:end="217:28"><expr pos:start="217:9" pos:end="217:27"><name pos:start="217:9" pos:end="217:11">ret</name> <operator pos:start="217:13" pos:end="217:13">=</operator> <name pos:start="217:15" pos:end="217:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="219:9" pos:end="219:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="223:5" pos:end="223:15">return <expr pos:start="223:12" pos:end="223:14"><name pos:start="223:12" pos:end="223:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
