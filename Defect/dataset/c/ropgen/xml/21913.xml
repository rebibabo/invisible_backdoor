<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21913.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:39">iscsi_co_writev</name><parameter_list pos:start="1:40" pos:end="5:58">(<parameter pos:start="1:41" pos:end="1:60"><decl pos:start="1:41" pos:end="1:60"><type pos:start="1:41" pos:end="1:60"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">bs</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><name pos:start="3:41" pos:end="3:47">int64_t</name></type> <name pos:start="3:49" pos:end="3:58">sector_num</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:74"><decl pos:start="3:61" pos:end="3:74"><type pos:start="3:61" pos:end="3:74"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:74">nb_sectors</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:57"><decl pos:start="5:41" pos:end="5:57"><type pos:start="5:41" pos:end="5:57"><name pos:start="5:41" pos:end="5:52">QEMUIOVector</name> <modifier pos:start="5:54" pos:end="5:54">*</modifier></type><name pos:start="5:55" pos:end="5:57">iov</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="147:1">{<block_content pos:start="9:5" pos:end="145:13">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">IscsiLun</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:22">iscsilun</name> <init pos:start="9:24" pos:end="9:35">= <expr pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:27">bs</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:20">IscsiTask</name></name></type> <name pos:start="11:22" pos:end="11:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:16">lba</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:24">num_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:17">data</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">buf</name> <init pos:start="19:18" pos:end="19:23">= <expr pos:start="19:20" pos:end="19:23"><name pos:start="19:20" pos:end="19:23">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:66">(<expr pos:start="23:9" pos:end="23:65"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:65"><name pos:start="23:10" pos:end="23:31">is_request_lun_aligned</name><argument_list pos:start="23:32" pos:end="23:65">(<argument pos:start="23:33" pos:end="23:42"><expr pos:start="23:33" pos:end="23:42"><name pos:start="23:33" pos:end="23:42">sector_num</name></expr></argument>, <argument pos:start="23:45" pos:end="23:54"><expr pos:start="23:45" pos:end="23:54"><name pos:start="23:45" pos:end="23:54">nb_sectors</name></expr></argument>, <argument pos:start="23:57" pos:end="23:64"><expr pos:start="23:57" pos:end="23:64"><name pos:start="23:57" pos:end="23:64">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:68" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:23">

        <return pos:start="25:9" pos:end="25:23">return <expr pos:start="25:16" pos:end="25:22"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:48"><expr pos:start="31:5" pos:end="31:47"><name pos:start="31:5" pos:end="31:7">lba</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:47"><name pos:start="31:11" pos:end="31:25">sector_qemu2lun</name><argument_list pos:start="31:26" pos:end="31:47">(<argument pos:start="31:27" pos:end="31:36"><expr pos:start="31:27" pos:end="31:36"><name pos:start="31:27" pos:end="31:36">sector_num</name></expr></argument>, <argument pos:start="31:39" pos:end="31:46"><expr pos:start="31:39" pos:end="31:46"><name pos:start="31:39" pos:end="31:46">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="36:0"><expr pos:start="33:5" pos:end="33:55"><name pos:start="33:5" pos:end="33:15">num_sectors</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:55"><name pos:start="33:19" pos:end="33:33">sector_qemu2lun</name><argument_list pos:start="33:34" pos:end="33:55">(<argument pos:start="33:35" pos:end="33:44"><expr pos:start="33:35" pos:end="33:44"><name pos:start="33:35" pos:end="33:44">nb_sectors</name></expr></argument>, <argument pos:start="33:47" pos:end="33:54"><expr pos:start="33:47" pos:end="33:54"><name pos:start="33:47" pos:end="33:54">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="35:1" pos:end="35:39">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:39"><operator pos:start="35:5" pos:end="35:5">!</operator><call pos:start="35:6" pos:end="35:39"><name pos:start="35:6" pos:end="35:12">defined</name><argument_list pos:start="35:13" pos:end="35:39">(<argument pos:start="35:14" pos:end="35:38"><expr pos:start="35:14" pos:end="35:38"><name pos:start="35:14" pos:end="35:38">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="37:5" pos:end="37:71">/* if the iovec only contains one buffer we can pass it directly */</comment>

    <if_stmt pos:start="39:5" pos:end="56:0"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:23">(<expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:11">iov</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:17">niov</name></name> <operator pos:start="39:19" pos:end="39:20">==</operator> <literal type="number" pos:start="39:22" pos:end="39:22">1</literal></expr>)</condition> <block pos:start="39:25" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:36">

        <expr_stmt pos:start="41:9" pos:end="41:36"><expr pos:start="41:9" pos:end="41:35"><name pos:start="41:9" pos:end="41:12">data</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:26"><name pos:start="41:16" pos:end="41:18">iov</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:23">iov</name><index pos:start="41:24" pos:end="41:26">[<expr pos:start="41:25" pos:end="41:25"><literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr>]</index></name><operator pos:start="41:27" pos:end="41:27">.</operator><name pos:start="41:28" pos:end="41:35">iov_base</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="56:0">else <block pos:start="43:12" pos:end="56:0">{<block_content pos:start="45:9" pos:end="51:19">

        <decl_stmt pos:start="45:9" pos:end="45:68"><decl pos:start="45:9" pos:end="45:67"><type pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:14">size_t</name></type> <name pos:start="45:16" pos:end="45:19">size</name> <init pos:start="45:21" pos:end="45:67">= <expr pos:start="45:23" pos:end="45:67"><call pos:start="45:23" pos:end="45:67"><name pos:start="45:23" pos:end="45:25">MIN</name><argument_list pos:start="45:26" pos:end="45:67">(<argument pos:start="45:27" pos:end="45:55"><expr pos:start="45:27" pos:end="45:55"><name pos:start="45:27" pos:end="45:36">nb_sectors</name> <operator pos:start="45:38" pos:end="45:38">*</operator> <name pos:start="45:40" pos:end="45:55">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="45:58" pos:end="45:66"><expr pos:start="45:58" pos:end="45:66"><name pos:start="45:58" pos:end="45:66"><name pos:start="45:58" pos:end="45:60">iov</name><operator pos:start="45:61" pos:end="45:62">-&gt;</operator><name pos:start="45:63" pos:end="45:66">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:11">buf</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:28"><name pos:start="47:15" pos:end="47:22">g_malloc</name><argument_list pos:start="47:23" pos:end="47:28">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><call pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:25">qemu_iovec_to_buf</name><argument_list pos:start="49:26" pos:end="49:44">(<argument pos:start="49:27" pos:end="49:29"><expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:29">iov</name></expr></argument>, <argument pos:start="49:32" pos:end="49:32"><expr pos:start="49:32" pos:end="49:32"><literal type="number" pos:start="49:32" pos:end="49:32">0</literal></expr></argument>, <argument pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">buf</name></expr></argument>, <argument pos:start="49:40" pos:end="49:43"><expr pos:start="49:40" pos:end="49:43"><name pos:start="49:40" pos:end="49:43">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:12">data</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:18">buf</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><call pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:27">iscsi_co_init_iscsitask</name><argument_list pos:start="57:28" pos:end="57:45">(<argument pos:start="57:29" pos:end="57:36"><expr pos:start="57:29" pos:end="57:36"><name pos:start="57:29" pos:end="57:36">iscsilun</name></expr></argument>, <argument pos:start="57:39" pos:end="57:44"><expr pos:start="57:39" pos:end="57:44"><operator pos:start="57:39" pos:end="57:39">&amp;</operator><name pos:start="57:40" pos:end="57:44">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="59:1" pos:end="59:6"><name pos:start="59:1" pos:end="59:5">retry</name>:</label>

    <if_stmt pos:start="61:5" pos:end="81:5"><if pos:start="61:5" pos:end="71:5">if <condition pos:start="61:8" pos:end="61:32">(<expr pos:start="61:9" pos:end="61:31"><name pos:start="61:9" pos:end="61:31"><name pos:start="61:9" pos:end="61:16">iscsilun</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:31">use_16_for_rw</name></name></expr>)</condition> <block pos:start="61:34" pos:end="71:5">{<block_content pos:start="63:9" pos:end="69:69">

        <expr_stmt pos:start="63:9" pos:end="69:69"><expr pos:start="63:9" pos:end="69:68"><name pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:13">iTask</name><operator pos:start="63:14" pos:end="63:14">.</operator><name pos:start="63:15" pos:end="63:18">task</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <call pos:start="63:22" pos:end="69:68"><name pos:start="63:22" pos:end="63:39">iscsi_write16_task</name><argument_list pos:start="63:40" pos:end="69:68">(<argument pos:start="63:41" pos:end="63:55"><expr pos:start="63:41" pos:end="63:55"><name pos:start="63:41" pos:end="63:55"><name pos:start="63:41" pos:end="63:48">iscsilun</name><operator pos:start="63:49" pos:end="63:50">-&gt;</operator><name pos:start="63:51" pos:end="63:55">iscsi</name></name></expr></argument>, <argument pos:start="63:58" pos:end="63:70"><expr pos:start="63:58" pos:end="63:70"><name pos:start="63:58" pos:end="63:70"><name pos:start="63:58" pos:end="63:65">iscsilun</name><operator pos:start="63:66" pos:end="63:67">-&gt;</operator><name pos:start="63:68" pos:end="63:70">lun</name></name></expr></argument>, <argument pos:start="63:73" pos:end="63:75"><expr pos:start="63:73" pos:end="63:75"><name pos:start="63:73" pos:end="63:75">lba</name></expr></argument>,

                                        <argument pos:start="65:41" pos:end="65:44"><expr pos:start="65:41" pos:end="65:44"><name pos:start="65:41" pos:end="65:44">data</name></expr></argument>, <argument pos:start="65:47" pos:end="65:80"><expr pos:start="65:47" pos:end="65:80"><name pos:start="65:47" pos:end="65:57">num_sectors</name> <operator pos:start="65:59" pos:end="65:59">*</operator> <name pos:start="65:61" pos:end="65:80"><name pos:start="65:61" pos:end="65:68">iscsilun</name><operator pos:start="65:69" pos:end="65:70">-&gt;</operator><name pos:start="65:71" pos:end="65:80">block_size</name></name></expr></argument>,

                                        <argument pos:start="67:41" pos:end="67:60"><expr pos:start="67:41" pos:end="67:60"><name pos:start="67:41" pos:end="67:60"><name pos:start="67:41" pos:end="67:48">iscsilun</name><operator pos:start="67:49" pos:end="67:50">-&gt;</operator><name pos:start="67:51" pos:end="67:60">block_size</name></name></expr></argument>, <argument pos:start="67:63" pos:end="67:63"><expr pos:start="67:63" pos:end="67:63"><literal type="number" pos:start="67:63" pos:end="67:63">0</literal></expr></argument>, <argument pos:start="67:66" pos:end="67:66"><expr pos:start="67:66" pos:end="67:66"><literal type="number" pos:start="67:66" pos:end="67:66">0</literal></expr></argument>, <argument pos:start="67:69" pos:end="67:69"><expr pos:start="67:69" pos:end="67:69"><literal type="number" pos:start="67:69" pos:end="67:69">0</literal></expr></argument>, <argument pos:start="67:72" pos:end="67:72"><expr pos:start="67:72" pos:end="67:72"><literal type="number" pos:start="67:72" pos:end="67:72">0</literal></expr></argument>, <argument pos:start="67:75" pos:end="67:75"><expr pos:start="67:75" pos:end="67:75"><literal type="number" pos:start="67:75" pos:end="67:75">0</literal></expr></argument>,

                                        <argument pos:start="69:41" pos:end="69:59"><expr pos:start="69:41" pos:end="69:59"><name pos:start="69:41" pos:end="69:59">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="69:62" pos:end="69:67"><expr pos:start="69:62" pos:end="69:67"><operator pos:start="69:62" pos:end="69:62">&amp;</operator><name pos:start="69:63" pos:end="69:67">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="81:5">else <block pos:start="71:12" pos:end="81:5">{<block_content pos:start="73:9" pos:end="79:69">

        <expr_stmt pos:start="73:9" pos:end="79:69"><expr pos:start="73:9" pos:end="79:68"><name pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:13">iTask</name><operator pos:start="73:14" pos:end="73:14">.</operator><name pos:start="73:15" pos:end="73:18">task</name></name> <operator pos:start="73:20" pos:end="73:20">=</operator> <call pos:start="73:22" pos:end="79:68"><name pos:start="73:22" pos:end="73:39">iscsi_write10_task</name><argument_list pos:start="73:40" pos:end="79:68">(<argument pos:start="73:41" pos:end="73:55"><expr pos:start="73:41" pos:end="73:55"><name pos:start="73:41" pos:end="73:55"><name pos:start="73:41" pos:end="73:48">iscsilun</name><operator pos:start="73:49" pos:end="73:50">-&gt;</operator><name pos:start="73:51" pos:end="73:55">iscsi</name></name></expr></argument>, <argument pos:start="73:58" pos:end="73:70"><expr pos:start="73:58" pos:end="73:70"><name pos:start="73:58" pos:end="73:70"><name pos:start="73:58" pos:end="73:65">iscsilun</name><operator pos:start="73:66" pos:end="73:67">-&gt;</operator><name pos:start="73:68" pos:end="73:70">lun</name></name></expr></argument>, <argument pos:start="73:73" pos:end="73:75"><expr pos:start="73:73" pos:end="73:75"><name pos:start="73:73" pos:end="73:75">lba</name></expr></argument>,

                                        <argument pos:start="75:41" pos:end="75:44"><expr pos:start="75:41" pos:end="75:44"><name pos:start="75:41" pos:end="75:44">data</name></expr></argument>, <argument pos:start="75:47" pos:end="75:80"><expr pos:start="75:47" pos:end="75:80"><name pos:start="75:47" pos:end="75:57">num_sectors</name> <operator pos:start="75:59" pos:end="75:59">*</operator> <name pos:start="75:61" pos:end="75:80"><name pos:start="75:61" pos:end="75:68">iscsilun</name><operator pos:start="75:69" pos:end="75:70">-&gt;</operator><name pos:start="75:71" pos:end="75:80">block_size</name></name></expr></argument>,

                                        <argument pos:start="77:41" pos:end="77:60"><expr pos:start="77:41" pos:end="77:60"><name pos:start="77:41" pos:end="77:60"><name pos:start="77:41" pos:end="77:48">iscsilun</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:60">block_size</name></name></expr></argument>, <argument pos:start="77:63" pos:end="77:63"><expr pos:start="77:63" pos:end="77:63"><literal type="number" pos:start="77:63" pos:end="77:63">0</literal></expr></argument>, <argument pos:start="77:66" pos:end="77:66"><expr pos:start="77:66" pos:end="77:66"><literal type="number" pos:start="77:66" pos:end="77:66">0</literal></expr></argument>, <argument pos:start="77:69" pos:end="77:69"><expr pos:start="77:69" pos:end="77:69"><literal type="number" pos:start="77:69" pos:end="77:69">0</literal></expr></argument>, <argument pos:start="77:72" pos:end="77:72"><expr pos:start="77:72" pos:end="77:72"><literal type="number" pos:start="77:72" pos:end="77:72">0</literal></expr></argument>, <argument pos:start="77:75" pos:end="77:75"><expr pos:start="77:75" pos:end="77:75"><literal type="number" pos:start="77:75" pos:end="77:75">0</literal></expr></argument>,

                                        <argument pos:start="79:41" pos:end="79:59"><expr pos:start="79:41" pos:end="79:59"><name pos:start="79:41" pos:end="79:59">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="79:62" pos:end="79:67"><expr pos:start="79:62" pos:end="79:67"><operator pos:start="79:62" pos:end="79:62">&amp;</operator><name pos:start="79:63" pos:end="79:67">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="83:5" pos:end="92:0"><if pos:start="83:5" pos:end="92:0">if <condition pos:start="83:8" pos:end="83:27">(<expr pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:13">iTask</name><operator pos:start="83:14" pos:end="83:14">.</operator><name pos:start="83:15" pos:end="83:18">task</name></name> <operator pos:start="83:20" pos:end="83:21">==</operator> <name pos:start="83:23" pos:end="83:26">NULL</name></expr>)</condition> <block pos:start="83:29" pos:end="92:0">{<block_content pos:start="85:9" pos:end="87:23">

        <expr_stmt pos:start="85:9" pos:end="85:20"><expr pos:start="85:9" pos:end="85:19"><call pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:14">g_free</name><argument_list pos:start="85:15" pos:end="85:19">(<argument pos:start="85:16" pos:end="85:18"><expr pos:start="85:16" pos:end="85:18"><name pos:start="85:16" pos:end="85:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:23">return <expr pos:start="87:16" pos:end="87:22"><operator pos:start="87:16" pos:end="87:16">-</operator><name pos:start="87:17" pos:end="87:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="91:1" pos:end="91:38">#<cpp:directive pos:start="91:2" pos:end="91:3">if</cpp:directive> <expr pos:start="91:5" pos:end="91:38"><call pos:start="91:5" pos:end="91:38"><name pos:start="91:5" pos:end="91:11">defined</name><argument_list pos:start="91:12" pos:end="91:38">(<argument pos:start="91:13" pos:end="91:37"><expr pos:start="91:13" pos:end="91:37"><name pos:start="91:13" pos:end="91:37">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="93:5" pos:end="98:0"><expr pos:start="93:5" pos:end="95:36"><call pos:start="93:5" pos:end="95:36"><name pos:start="93:5" pos:end="93:25">scsi_task_set_iov_out</name><argument_list pos:start="93:26" pos:end="95:36">(<argument pos:start="93:27" pos:end="93:36"><expr pos:start="93:27" pos:end="93:36"><name pos:start="93:27" pos:end="93:36"><name pos:start="93:27" pos:end="93:31">iTask</name><operator pos:start="93:32" pos:end="93:32">.</operator><name pos:start="93:33" pos:end="93:36">task</name></name></expr></argument>, <argument pos:start="93:39" pos:end="93:68"><expr pos:start="93:39" pos:end="93:68"><operator pos:start="93:39" pos:end="93:39">(</operator>struct <name pos:start="93:47" pos:end="93:56">scsi_iovec</name> <operator pos:start="93:58" pos:end="93:58">*</operator><operator pos:start="93:59" pos:end="93:59">)</operator> <name pos:start="93:61" pos:end="93:68"><name pos:start="93:61" pos:end="93:63">iov</name><operator pos:start="93:64" pos:end="93:65">-&gt;</operator><name pos:start="93:66" pos:end="93:68">iov</name></name></expr></argument>,

                          <argument pos:start="95:27" pos:end="95:35"><expr pos:start="95:27" pos:end="95:35"><name pos:start="95:27" pos:end="95:35"><name pos:start="95:27" pos:end="95:29">iov</name><operator pos:start="95:30" pos:end="95:31">-&gt;</operator><name pos:start="95:32" pos:end="95:35">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

    <while pos:start="99:5" pos:end="105:5">while <condition pos:start="99:11" pos:end="99:27">(<expr pos:start="99:12" pos:end="99:26"><operator pos:start="99:12" pos:end="99:12">!</operator><name pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:17">iTask</name><operator pos:start="99:18" pos:end="99:18">.</operator><name pos:start="99:19" pos:end="99:26">complete</name></name></expr>)</condition> <block pos:start="99:29" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:31">

        <expr_stmt pos:start="101:9" pos:end="101:35"><expr pos:start="101:9" pos:end="101:34"><call pos:start="101:9" pos:end="101:34"><name pos:start="101:9" pos:end="101:24">iscsi_set_events</name><argument_list pos:start="101:25" pos:end="101:34">(<argument pos:start="101:26" pos:end="101:33"><expr pos:start="101:26" pos:end="101:33"><name pos:start="101:26" pos:end="101:33">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:31"><expr pos:start="103:9" pos:end="103:30"><call pos:start="103:9" pos:end="103:30"><name pos:start="103:9" pos:end="103:28">qemu_coroutine_yield</name><argument_list pos:start="103:29" pos:end="103:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:27">(<expr pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:13">iTask</name><operator pos:start="109:14" pos:end="109:14">.</operator><name pos:start="109:15" pos:end="109:18">task</name></name> <operator pos:start="109:20" pos:end="109:21">!=</operator> <name pos:start="109:23" pos:end="109:26">NULL</name></expr>)</condition> <block pos:start="109:29" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:26">

        <expr_stmt pos:start="111:9" pos:end="111:40"><expr pos:start="111:9" pos:end="111:39"><call pos:start="111:9" pos:end="111:39"><name pos:start="111:9" pos:end="111:27">scsi_free_scsi_task</name><argument_list pos:start="111:28" pos:end="111:39">(<argument pos:start="111:29" pos:end="111:38"><expr pos:start="111:29" pos:end="111:38"><name pos:start="111:29" pos:end="111:38"><name pos:start="111:29" pos:end="111:33">iTask</name><operator pos:start="111:34" pos:end="111:34">.</operator><name pos:start="111:35" pos:end="111:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:26"><expr pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:18"><name pos:start="113:9" pos:end="113:13">iTask</name><operator pos:start="113:14" pos:end="113:14">.</operator><name pos:start="113:15" pos:end="113:18">task</name></name> <operator pos:start="113:20" pos:end="113:20">=</operator> <name pos:start="113:22" pos:end="113:25">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:23">(<expr pos:start="119:9" pos:end="119:22"><name pos:start="119:9" pos:end="119:22"><name pos:start="119:9" pos:end="119:13">iTask</name><operator pos:start="119:14" pos:end="119:14">.</operator><name pos:start="119:15" pos:end="119:22">do_retry</name></name></expr>)</condition> <block pos:start="119:25" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:19">

        <expr_stmt pos:start="121:9" pos:end="121:27"><expr pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:22"><name pos:start="121:9" pos:end="121:13">iTask</name><operator pos:start="121:14" pos:end="121:14">.</operator><name pos:start="121:15" pos:end="121:22">complete</name></name> <operator pos:start="121:24" pos:end="121:24">=</operator> <literal type="number" pos:start="121:26" pos:end="121:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="123:9" pos:end="123:19">goto <name pos:start="123:14" pos:end="123:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:16"><expr pos:start="129:5" pos:end="129:15"><call pos:start="129:5" pos:end="129:15"><name pos:start="129:5" pos:end="129:10">g_free</name><argument_list pos:start="129:11" pos:end="129:15">(<argument pos:start="129:12" pos:end="129:14"><expr pos:start="129:12" pos:end="129:14"><name pos:start="129:12" pos:end="129:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="137:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:41">(<expr pos:start="133:9" pos:end="133:40"><name pos:start="133:9" pos:end="133:20"><name pos:start="133:9" pos:end="133:13">iTask</name><operator pos:start="133:14" pos:end="133:14">.</operator><name pos:start="133:15" pos:end="133:20">status</name></name> <operator pos:start="133:22" pos:end="133:23">!=</operator> <name pos:start="133:25" pos:end="133:40">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="133:43" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:20">

        <return pos:start="135:9" pos:end="135:20">return <expr pos:start="135:16" pos:end="135:19"><operator pos:start="135:16" pos:end="135:16">-</operator><name pos:start="135:17" pos:end="135:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:62"><expr pos:start="141:5" pos:end="141:61"><call pos:start="141:5" pos:end="141:61"><name pos:start="141:5" pos:end="141:27">iscsi_allocationmap_set</name><argument_list pos:start="141:28" pos:end="141:61">(<argument pos:start="141:29" pos:end="141:36"><expr pos:start="141:29" pos:end="141:36"><name pos:start="141:29" pos:end="141:36">iscsilun</name></expr></argument>, <argument pos:start="141:39" pos:end="141:48"><expr pos:start="141:39" pos:end="141:48"><name pos:start="141:39" pos:end="141:48">sector_num</name></expr></argument>, <argument pos:start="141:51" pos:end="141:60"><expr pos:start="141:51" pos:end="141:60"><name pos:start="141:51" pos:end="141:60">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="145:5" pos:end="145:13">return <expr pos:start="145:12" pos:end="145:12"><literal type="number" pos:start="145:12" pos:end="145:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
