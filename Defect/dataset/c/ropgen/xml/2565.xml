<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2565.c" pos:tabs="8"><function pos:start="1:1" pos:end="381:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">arm_cpu_do_interrupt</name><parameter_list pos:start="1:26" pos:end="1:39">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:36"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">cs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="381:1">{<block_content pos:start="5:5" pos:end="379:50">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">ARMCPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:29">= <expr pos:start="5:19" pos:end="5:29"><call pos:start="5:19" pos:end="5:29"><name pos:start="5:19" pos:end="5:25">ARM_CPU</name><argument_list pos:start="5:26" pos:end="5:29">(<argument pos:start="5:27" pos:end="5:28"><expr pos:start="5:27" pos:end="5:28"><name pos:start="5:27" pos:end="5:28">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUARMState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">new_mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:16">moe</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><call pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:22">(<argument pos:start="21:12" pos:end="21:21"><expr pos:start="21:12" pos:end="21:21"><operator pos:start="21:12" pos:end="21:12">!</operator><call pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:16">IS_M</name><argument_list pos:start="21:17" pos:end="21:21">(<argument pos:start="21:18" pos:end="21:20"><expr pos:start="21:18" pos:end="21:20"><name pos:start="21:18" pos:end="21:20">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:43"><expr pos:start="25:5" pos:end="25:42"><call pos:start="25:5" pos:end="25:42"><name pos:start="25:5" pos:end="25:21">arm_log_exception</name><argument_list pos:start="25:22" pos:end="25:42">(<argument pos:start="25:23" pos:end="25:41"><expr pos:start="25:23" pos:end="25:41"><name pos:start="25:23" pos:end="25:41"><name pos:start="25:23" pos:end="25:24">cs</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:41">exception_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:51">(<expr pos:start="29:9" pos:end="29:50"><call pos:start="29:9" pos:end="29:50"><name pos:start="29:9" pos:end="29:24">arm_is_psci_call</name><argument_list pos:start="29:25" pos:end="29:50">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><name pos:start="29:26" pos:end="29:28">cpu</name></expr></argument>, <argument pos:start="29:31" pos:end="29:49"><expr pos:start="29:31" pos:end="29:49"><name pos:start="29:31" pos:end="29:49"><name pos:start="29:31" pos:end="29:32">cs</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:49">exception_index</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:53" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:15">

        <expr_stmt pos:start="31:9" pos:end="31:34"><expr pos:start="31:9" pos:end="31:33"><call pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:28">arm_handle_psci_call</name><argument_list pos:start="31:29" pos:end="31:33">(<argument pos:start="31:30" pos:end="31:32"><expr pos:start="31:30" pos:end="31:32"><name pos:start="31:30" pos:end="31:32">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:64"><expr pos:start="33:9" pos:end="33:63"><call pos:start="33:9" pos:end="33:63"><name pos:start="33:9" pos:end="33:21">qemu_log_mask</name><argument_list pos:start="33:22" pos:end="33:63">(<argument pos:start="33:23" pos:end="33:33"><expr pos:start="33:23" pos:end="33:33"><name pos:start="33:23" pos:end="33:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="33:36" pos:end="33:62"><expr pos:start="33:36" pos:end="33:62"><literal type="string" pos:start="33:36" pos:end="33:62">"...handled as PSCI call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:74">/* If this is a debug exception we must update the DBGDSCR.MOE bits */</comment>

    <switch pos:start="43:5" pos:end="79:5">switch <condition pos:start="43:12" pos:end="43:55">(<expr pos:start="43:13" pos:end="43:54"><name pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:15">env</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:26">exception</name><operator pos:start="43:27" pos:end="43:27">.</operator><name pos:start="43:28" pos:end="43:35">syndrome</name></name> <operator pos:start="43:37" pos:end="43:38">&gt;&gt;</operator> <name pos:start="43:40" pos:end="43:54">ARM_EL_EC_SHIFT</name></expr>)</condition> <block pos:start="43:57" pos:end="79:5">{<block_content pos:start="45:5" pos:end="77:14">

    <case pos:start="45:5" pos:end="45:23">case <expr pos:start="45:10" pos:end="45:22"><name pos:start="45:10" pos:end="45:22">EC_BREAKPOINT</name></expr>:</case>

    <case pos:start="47:5" pos:end="47:31">case <expr pos:start="47:10" pos:end="47:30"><name pos:start="47:10" pos:end="47:30">EC_BREAKPOINT_SAME_EL</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:16"><expr pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:11">moe</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <literal type="number" pos:start="49:15" pos:end="49:15">1</literal></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:23">case <expr pos:start="53:10" pos:end="53:22"><name pos:start="53:10" pos:end="53:22">EC_WATCHPOINT</name></expr>:</case>

    <case pos:start="55:5" pos:end="55:31">case <expr pos:start="55:10" pos:end="55:30"><name pos:start="55:10" pos:end="55:30">EC_WATCHPOINT_SAME_EL</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:17"><expr pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:11">moe</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <literal type="number" pos:start="57:15" pos:end="57:16">10</literal></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:22">case <expr pos:start="61:10" pos:end="61:21"><name pos:start="61:10" pos:end="61:21">EC_AA32_BKPT</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:16"><expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">moe</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <literal type="number" pos:start="63:15" pos:end="63:15">3</literal></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:24">case <expr pos:start="67:10" pos:end="67:23"><name pos:start="67:10" pos:end="67:23">EC_VECTORCATCH</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:16"><expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:11">moe</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <literal type="number" pos:start="69:15" pos:end="69:15">5</literal></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <default pos:start="73:5" pos:end="73:12">default:</default>

        <expr_stmt pos:start="75:9" pos:end="75:16"><expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">moe</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:12">(<expr pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">moe</name></expr>)</condition> <block pos:start="83:14" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:72">

        <expr_stmt pos:start="85:9" pos:end="85:72"><expr pos:start="85:9" pos:end="85:71"><name pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:11">env</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:17">cp15</name><operator pos:start="85:18" pos:end="85:18">.</operator><name pos:start="85:19" pos:end="85:27">mdscr_el1</name></name> <operator pos:start="85:29" pos:end="85:29">=</operator> <call pos:start="85:31" pos:end="85:71"><name pos:start="85:31" pos:end="85:39">deposit64</name><argument_list pos:start="85:40" pos:end="85:71">(<argument pos:start="85:41" pos:end="85:59"><expr pos:start="85:41" pos:end="85:59"><name pos:start="85:41" pos:end="85:59"><name pos:start="85:41" pos:end="85:43">env</name><operator pos:start="85:44" pos:end="85:45">-&gt;</operator><name pos:start="85:46" pos:end="85:49">cp15</name><operator pos:start="85:50" pos:end="85:50">.</operator><name pos:start="85:51" pos:end="85:59">mdscr_el1</name></name></expr></argument>, <argument pos:start="85:62" pos:end="85:62"><expr pos:start="85:62" pos:end="85:62"><literal type="number" pos:start="85:62" pos:end="85:62">2</literal></expr></argument>, <argument pos:start="85:65" pos:end="85:65"><expr pos:start="85:65" pos:end="85:65"><literal type="number" pos:start="85:65" pos:end="85:65">4</literal></expr></argument>, <argument pos:start="85:68" pos:end="85:70"><expr pos:start="85:68" pos:end="85:70"><name pos:start="85:68" pos:end="85:70">moe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:47">/* TODO: Vectored interrupt controller.  */</comment>

    <switch pos:start="93:5" pos:end="303:5">switch <condition pos:start="93:12" pos:end="93:32">(<expr pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:14">cs</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:31">exception_index</name></name></expr>)</condition> <block pos:start="93:34" pos:end="303:5">{<block_content pos:start="95:5" pos:end="301:15">

    <case pos:start="95:5" pos:end="95:19">case <expr pos:start="95:10" pos:end="95:18"><name pos:start="95:10" pos:end="95:18">EXCP_UDEF</name></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:36"><expr pos:start="97:9" pos:end="97:35"><name pos:start="97:9" pos:end="97:16">new_mode</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <name pos:start="97:20" pos:end="97:35">ARM_CPU_MODE_UND</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:20"><expr pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:12">addr</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <literal type="number" pos:start="99:16" pos:end="99:19">0x04</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:22"><expr pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:12">mask</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <name pos:start="101:16" pos:end="101:21">CPSR_I</name></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="109:23"><if pos:start="103:9" pos:end="105:23">if <condition pos:start="103:12" pos:end="103:23">(<expr pos:start="103:13" pos:end="103:22"><name pos:start="103:13" pos:end="103:22"><name pos:start="103:13" pos:end="103:15">env</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:22">thumb</name></name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:23"><block_content pos:start="105:13" pos:end="105:23">

            <expr_stmt pos:start="105:13" pos:end="105:23"><expr pos:start="105:13" pos:end="105:22"><name pos:start="105:13" pos:end="105:18">offset</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <literal type="number" pos:start="105:22" pos:end="105:22">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="107:9" pos:end="109:23">else<block type="pseudo" pos:start="109:13" pos:end="109:23"><block_content pos:start="109:13" pos:end="109:23">

            <expr_stmt pos:start="109:13" pos:end="109:23"><expr pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:18">offset</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:18">case <expr pos:start="113:10" pos:end="113:17"><name pos:start="113:10" pos:end="113:17">EXCP_SWI</name></expr>:</case>

        <if_stmt pos:start="115:9" pos:end="151:9"><if pos:start="115:9" pos:end="151:9">if <condition pos:start="115:12" pos:end="115:32">(<expr pos:start="115:13" pos:end="115:31"><name pos:start="115:13" pos:end="115:31">semihosting_enabled</name></expr>)</condition> <block pos:start="115:34" pos:end="151:9">{<block_content pos:start="119:13" pos:end="149:13">

            <comment type="block" pos:start="117:13" pos:end="117:51">/* Check for semihosting interrupt.  */</comment>

            <if_stmt pos:start="119:13" pos:end="131:13"><if pos:start="119:13" pos:end="125:13">if <condition pos:start="119:16" pos:end="119:27">(<expr pos:start="119:17" pos:end="119:26"><name pos:start="119:17" pos:end="119:26"><name pos:start="119:17" pos:end="119:19">env</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:26">thumb</name></name></expr>)</condition> <block pos:start="119:29" pos:end="125:13">{<block_content pos:start="121:17" pos:end="123:27">

                <expr_stmt pos:start="121:17" pos:end="123:27"><expr pos:start="121:17" pos:end="123:26"><name pos:start="121:17" pos:end="121:20">mask</name> <operator pos:start="121:22" pos:end="121:22">=</operator> <call pos:start="121:24" pos:end="121:77"><name pos:start="121:24" pos:end="121:36">arm_lduw_code</name><argument_list pos:start="121:37" pos:end="121:77">(<argument pos:start="121:38" pos:end="121:40"><expr pos:start="121:38" pos:end="121:40"><name pos:start="121:38" pos:end="121:40">env</name></expr></argument>, <argument pos:start="121:43" pos:end="121:59"><expr pos:start="121:43" pos:end="121:59"><name pos:start="121:43" pos:end="121:55"><name pos:start="121:43" pos:end="121:45">env</name><operator pos:start="121:46" pos:end="121:47">-&gt;</operator><name pos:start="121:48" pos:end="121:51">regs</name><index pos:start="121:52" pos:end="121:55">[<expr pos:start="121:53" pos:end="121:54"><literal type="number" pos:start="121:53" pos:end="121:54">15</literal></expr>]</index></name> <operator pos:start="121:57" pos:end="121:57">-</operator> <literal type="number" pos:start="121:59" pos:end="121:59">2</literal></expr></argument>, <argument pos:start="121:62" pos:end="121:76"><expr pos:start="121:62" pos:end="121:76"><name pos:start="121:62" pos:end="121:76"><name pos:start="121:62" pos:end="121:64">env</name><operator pos:start="121:65" pos:end="121:66">-&gt;</operator><name pos:start="121:67" pos:end="121:76">bswap_code</name></name></expr></argument>)</argument_list></call>

                    <operator pos:start="123:21" pos:end="123:21">&amp;</operator> <literal type="number" pos:start="123:23" pos:end="123:26">0xff</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="125:15" pos:end="131:13">else <block pos:start="125:20" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:31">

                <expr_stmt pos:start="127:17" pos:end="129:31"><expr pos:start="127:17" pos:end="129:30"><name pos:start="127:17" pos:end="127:20">mask</name> <operator pos:start="127:22" pos:end="127:22">=</operator> <call pos:start="127:24" pos:end="127:76"><name pos:start="127:24" pos:end="127:35">arm_ldl_code</name><argument_list pos:start="127:36" pos:end="127:76">(<argument pos:start="127:37" pos:end="127:39"><expr pos:start="127:37" pos:end="127:39"><name pos:start="127:37" pos:end="127:39">env</name></expr></argument>, <argument pos:start="127:42" pos:end="127:58"><expr pos:start="127:42" pos:end="127:58"><name pos:start="127:42" pos:end="127:54"><name pos:start="127:42" pos:end="127:44">env</name><operator pos:start="127:45" pos:end="127:46">-&gt;</operator><name pos:start="127:47" pos:end="127:50">regs</name><index pos:start="127:51" pos:end="127:54">[<expr pos:start="127:52" pos:end="127:53"><literal type="number" pos:start="127:52" pos:end="127:53">15</literal></expr>]</index></name> <operator pos:start="127:56" pos:end="127:56">-</operator> <literal type="number" pos:start="127:58" pos:end="127:58">4</literal></expr></argument>, <argument pos:start="127:61" pos:end="127:75"><expr pos:start="127:61" pos:end="127:75"><name pos:start="127:61" pos:end="127:75"><name pos:start="127:61" pos:end="127:63">env</name><operator pos:start="127:64" pos:end="127:65">-&gt;</operator><name pos:start="127:66" pos:end="127:75">bswap_code</name></name></expr></argument>)</argument_list></call>

                    <operator pos:start="129:21" pos:end="129:21">&amp;</operator> <literal type="number" pos:start="129:23" pos:end="129:30">0xffffff</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="133:13" pos:end="135:41">/* Only intercept calls from privileged modes, to provide some

               semblance of security.  */</comment>

            <if_stmt pos:start="137:13" pos:end="149:13"><if pos:start="137:13" pos:end="149:13">if <condition pos:start="137:16" pos:end="141:71">(<expr pos:start="137:17" pos:end="141:70"><operator pos:start="137:17" pos:end="137:17">(</operator><operator pos:start="137:18" pos:end="137:18">(</operator><name pos:start="137:19" pos:end="137:22">mask</name> <operator pos:start="137:24" pos:end="137:25">==</operator> <literal type="number" pos:start="137:27" pos:end="137:34">0x123456</literal> <operator pos:start="137:36" pos:end="137:37">&amp;&amp;</operator> <operator pos:start="137:39" pos:end="137:39">!</operator><name pos:start="137:40" pos:end="137:49"><name pos:start="137:40" pos:end="137:42">env</name><operator pos:start="137:43" pos:end="137:44">-&gt;</operator><name pos:start="137:45" pos:end="137:49">thumb</name></name><operator pos:start="137:50" pos:end="137:50">)</operator>

                    <operator pos:start="139:21" pos:end="139:22">||</operator> <operator pos:start="139:24" pos:end="139:24">(</operator><name pos:start="139:25" pos:end="139:28">mask</name> <operator pos:start="139:30" pos:end="139:31">==</operator> <literal type="number" pos:start="139:33" pos:end="139:36">0xab</literal> <operator pos:start="139:38" pos:end="139:39">&amp;&amp;</operator> <name pos:start="139:41" pos:end="139:50"><name pos:start="139:41" pos:end="139:43">env</name><operator pos:start="139:44" pos:end="139:45">-&gt;</operator><name pos:start="139:46" pos:end="139:50">thumb</name></name><operator pos:start="139:51" pos:end="139:51">)</operator><operator pos:start="139:52" pos:end="139:52">)</operator>

                  <operator pos:start="141:19" pos:end="141:20">&amp;&amp;</operator> <operator pos:start="141:22" pos:end="141:22">(</operator><name pos:start="141:23" pos:end="141:40"><name pos:start="141:23" pos:end="141:25">env</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:40">uncached_cpsr</name></name> <operator pos:start="141:42" pos:end="141:42">&amp;</operator> <name pos:start="141:44" pos:end="141:49">CPSR_M</name><operator pos:start="141:50" pos:end="141:50">)</operator> <operator pos:start="141:52" pos:end="141:53">!=</operator> <name pos:start="141:55" pos:end="141:70">ARM_CPU_MODE_USR</name></expr>)</condition> <block pos:start="141:73" pos:end="149:13">{<block_content pos:start="143:17" pos:end="147:23">

                <expr_stmt pos:start="143:17" pos:end="143:55"><expr pos:start="143:17" pos:end="143:54"><name pos:start="143:17" pos:end="143:28"><name pos:start="143:17" pos:end="143:19">env</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:25">regs</name><index pos:start="143:26" pos:end="143:28">[<expr pos:start="143:27" pos:end="143:27"><literal type="number" pos:start="143:27" pos:end="143:27">0</literal></expr>]</index></name> <operator pos:start="143:30" pos:end="143:30">=</operator> <call pos:start="143:32" pos:end="143:54"><name pos:start="143:32" pos:end="143:49">do_arm_semihosting</name><argument_list pos:start="143:50" pos:end="143:54">(<argument pos:start="143:51" pos:end="143:53"><expr pos:start="143:51" pos:end="143:53"><name pos:start="143:51" pos:end="143:53">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:79"><expr pos:start="145:17" pos:end="145:78"><call pos:start="145:17" pos:end="145:78"><name pos:start="145:17" pos:end="145:29">qemu_log_mask</name><argument_list pos:start="145:30" pos:end="145:78">(<argument pos:start="145:31" pos:end="145:41"><expr pos:start="145:31" pos:end="145:41"><name pos:start="145:31" pos:end="145:41">CPU_LOG_INT</name></expr></argument>, <argument pos:start="145:44" pos:end="145:77"><expr pos:start="145:44" pos:end="145:77"><literal type="string" pos:start="145:44" pos:end="145:77">"...handled as semihosting call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="147:17" pos:end="147:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:16">new_mode</name> <operator pos:start="153:18" pos:end="153:18">=</operator> <name pos:start="153:20" pos:end="153:35">ARM_CPU_MODE_SVC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:20"><expr pos:start="155:9" pos:end="155:19"><name pos:start="155:9" pos:end="155:12">addr</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <literal type="number" pos:start="155:16" pos:end="155:19">0x08</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:22"><expr pos:start="157:9" pos:end="157:21"><name pos:start="157:9" pos:end="157:12">mask</name> <operator pos:start="157:14" pos:end="157:14">=</operator> <name pos:start="157:16" pos:end="157:21">CPSR_I</name></expr>;</expr_stmt>

        <comment type="block" pos:start="159:9" pos:end="159:61">/* The PC already points to the next instruction.  */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:19"><expr pos:start="161:9" pos:end="161:18"><name pos:start="161:9" pos:end="161:14">offset</name> <operator pos:start="161:16" pos:end="161:16">=</operator> <literal type="number" pos:start="161:18" pos:end="161:18">0</literal></expr>;</expr_stmt>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <case pos:start="165:5" pos:end="165:19">case <expr pos:start="165:10" pos:end="165:18"><name pos:start="165:10" pos:end="165:18">EXCP_BKPT</name></expr>:</case>

        <comment type="block" pos:start="167:9" pos:end="167:52">/* See if this is a semihosting syscall.  */</comment>

        <if_stmt pos:start="169:9" pos:end="187:9"><if pos:start="169:9" pos:end="187:9">if <condition pos:start="169:12" pos:end="169:46">(<expr pos:start="169:13" pos:end="169:45"><name pos:start="169:13" pos:end="169:22"><name pos:start="169:13" pos:end="169:15">env</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:22">thumb</name></name> <operator pos:start="169:24" pos:end="169:25">&amp;&amp;</operator> <name pos:start="169:27" pos:end="169:45">semihosting_enabled</name></expr>)</condition> <block pos:start="169:48" pos:end="187:9">{<block_content pos:start="171:13" pos:end="185:13">

            <expr_stmt pos:start="171:13" pos:end="171:77"><expr pos:start="171:13" pos:end="171:76"><name pos:start="171:13" pos:end="171:16">mask</name> <operator pos:start="171:18" pos:end="171:18">=</operator> <call pos:start="171:20" pos:end="171:69"><name pos:start="171:20" pos:end="171:32">arm_lduw_code</name><argument_list pos:start="171:33" pos:end="171:69">(<argument pos:start="171:34" pos:end="171:36"><expr pos:start="171:34" pos:end="171:36"><name pos:start="171:34" pos:end="171:36">env</name></expr></argument>, <argument pos:start="171:39" pos:end="171:51"><expr pos:start="171:39" pos:end="171:51"><name pos:start="171:39" pos:end="171:51"><name pos:start="171:39" pos:end="171:41">env</name><operator pos:start="171:42" pos:end="171:43">-&gt;</operator><name pos:start="171:44" pos:end="171:47">regs</name><index pos:start="171:48" pos:end="171:51">[<expr pos:start="171:49" pos:end="171:50"><literal type="number" pos:start="171:49" pos:end="171:50">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="171:54" pos:end="171:68"><expr pos:start="171:54" pos:end="171:68"><name pos:start="171:54" pos:end="171:68"><name pos:start="171:54" pos:end="171:56">env</name><operator pos:start="171:57" pos:end="171:58">-&gt;</operator><name pos:start="171:59" pos:end="171:68">bswap_code</name></name></expr></argument>)</argument_list></call> <operator pos:start="171:71" pos:end="171:71">&amp;</operator> <literal type="number" pos:start="171:73" pos:end="171:76">0xff</literal></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="185:13"><if pos:start="173:13" pos:end="185:13">if <condition pos:start="173:16" pos:end="175:71">(<expr pos:start="173:17" pos:end="175:70"><name pos:start="173:17" pos:end="173:20">mask</name> <operator pos:start="173:22" pos:end="173:23">==</operator> <literal type="number" pos:start="173:25" pos:end="173:28">0xab</literal>

                  <operator pos:start="175:19" pos:end="175:20">&amp;&amp;</operator> <operator pos:start="175:22" pos:end="175:22">(</operator><name pos:start="175:23" pos:end="175:40"><name pos:start="175:23" pos:end="175:25">env</name><operator pos:start="175:26" pos:end="175:27">-&gt;</operator><name pos:start="175:28" pos:end="175:40">uncached_cpsr</name></name> <operator pos:start="175:42" pos:end="175:42">&amp;</operator> <name pos:start="175:44" pos:end="175:49">CPSR_M</name><operator pos:start="175:50" pos:end="175:50">)</operator> <operator pos:start="175:52" pos:end="175:53">!=</operator> <name pos:start="175:55" pos:end="175:70">ARM_CPU_MODE_USR</name></expr>)</condition> <block pos:start="175:73" pos:end="185:13">{<block_content pos:start="177:17" pos:end="183:23">

                <expr_stmt pos:start="177:17" pos:end="177:35"><expr pos:start="177:17" pos:end="177:34"><name pos:start="177:17" pos:end="177:29"><name pos:start="177:17" pos:end="177:19">env</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:25">regs</name><index pos:start="177:26" pos:end="177:29">[<expr pos:start="177:27" pos:end="177:28"><literal type="number" pos:start="177:27" pos:end="177:28">15</literal></expr>]</index></name> <operator pos:start="177:31" pos:end="177:32">+=</operator> <literal type="number" pos:start="177:34" pos:end="177:34">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:55"><expr pos:start="179:17" pos:end="179:54"><name pos:start="179:17" pos:end="179:28"><name pos:start="179:17" pos:end="179:19">env</name><operator pos:start="179:20" pos:end="179:21">-&gt;</operator><name pos:start="179:22" pos:end="179:25">regs</name><index pos:start="179:26" pos:end="179:28">[<expr pos:start="179:27" pos:end="179:27"><literal type="number" pos:start="179:27" pos:end="179:27">0</literal></expr>]</index></name> <operator pos:start="179:30" pos:end="179:30">=</operator> <call pos:start="179:32" pos:end="179:54"><name pos:start="179:32" pos:end="179:49">do_arm_semihosting</name><argument_list pos:start="179:50" pos:end="179:54">(<argument pos:start="179:51" pos:end="179:53"><expr pos:start="179:51" pos:end="179:53"><name pos:start="179:51" pos:end="179:53">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:79"><expr pos:start="181:17" pos:end="181:78"><call pos:start="181:17" pos:end="181:78"><name pos:start="181:17" pos:end="181:29">qemu_log_mask</name><argument_list pos:start="181:30" pos:end="181:78">(<argument pos:start="181:31" pos:end="181:41"><expr pos:start="181:31" pos:end="181:41"><name pos:start="181:31" pos:end="181:41">CPU_LOG_INT</name></expr></argument>, <argument pos:start="181:44" pos:end="181:77"><expr pos:start="181:44" pos:end="181:77"><literal type="string" pos:start="181:44" pos:end="181:77">"...handled as semihosting call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="183:17" pos:end="183:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:31"><expr pos:start="189:9" pos:end="189:30"><name pos:start="189:9" pos:end="189:26"><name pos:start="189:9" pos:end="189:11">env</name><operator pos:start="189:12" pos:end="189:13">-&gt;</operator><name pos:start="189:14" pos:end="189:22">exception</name><operator pos:start="189:23" pos:end="189:23">.</operator><name pos:start="189:24" pos:end="189:26">fsr</name></name> <operator pos:start="189:28" pos:end="189:28">=</operator> <literal type="number" pos:start="189:30" pos:end="189:30">2</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="191:9" pos:end="191:46">/* Fall through to prefetch abort.  */</comment>

    <case pos:start="193:5" pos:end="193:29">case <expr pos:start="193:10" pos:end="193:28"><name pos:start="193:10" pos:end="193:28">EXCP_PREFETCH_ABORT</name></expr>:</case>

        <expr_stmt pos:start="195:9" pos:end="195:48"><expr pos:start="195:9" pos:end="195:47"><name pos:start="195:9" pos:end="195:26"><name pos:start="195:9" pos:end="195:11">env</name><operator pos:start="195:12" pos:end="195:13">-&gt;</operator><name pos:start="195:14" pos:end="195:17">cp15</name><operator pos:start="195:18" pos:end="195:18">.</operator><name pos:start="195:19" pos:end="195:26">ifsr_el2</name></name> <operator pos:start="195:28" pos:end="195:28">=</operator> <name pos:start="195:30" pos:end="195:47"><name pos:start="195:30" pos:end="195:32">env</name><operator pos:start="195:33" pos:end="195:34">-&gt;</operator><name pos:start="195:35" pos:end="195:43">exception</name><operator pos:start="195:44" pos:end="195:44">.</operator><name pos:start="195:45" pos:end="195:47">fsr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="199:65"><expr pos:start="197:9" pos:end="199:64"><name pos:start="197:9" pos:end="197:27"><name pos:start="197:9" pos:end="197:11">env</name><operator pos:start="197:12" pos:end="197:13">-&gt;</operator><name pos:start="197:14" pos:end="197:17">cp15</name><operator pos:start="197:18" pos:end="197:18">.</operator><name pos:start="197:19" pos:end="197:24">far_el</name><index pos:start="197:25" pos:end="197:27">[<expr pos:start="197:26" pos:end="197:26"><literal type="number" pos:start="197:26" pos:end="197:26">1</literal></expr>]</index></name> <operator pos:start="197:29" pos:end="197:29">=</operator> <call pos:start="197:31" pos:end="199:64"><name pos:start="197:31" pos:end="197:39">deposit64</name><argument_list pos:start="197:40" pos:end="199:64">(<argument pos:start="197:41" pos:end="197:59"><expr pos:start="197:41" pos:end="197:59"><name pos:start="197:41" pos:end="197:59"><name pos:start="197:41" pos:end="197:43">env</name><operator pos:start="197:44" pos:end="197:45">-&gt;</operator><name pos:start="197:46" pos:end="197:49">cp15</name><operator pos:start="197:50" pos:end="197:50">.</operator><name pos:start="197:51" pos:end="197:56">far_el</name><index pos:start="197:57" pos:end="197:59">[<expr pos:start="197:58" pos:end="197:58"><literal type="number" pos:start="197:58" pos:end="197:58">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="197:62" pos:end="197:63"><expr pos:start="197:62" pos:end="197:63"><literal type="number" pos:start="197:62" pos:end="197:63">32</literal></expr></argument>, <argument pos:start="197:66" pos:end="197:67"><expr pos:start="197:66" pos:end="197:67"><literal type="number" pos:start="197:66" pos:end="197:67">32</literal></expr></argument>,

                                        <argument pos:start="199:41" pos:end="199:63"><expr pos:start="199:41" pos:end="199:63"><name pos:start="199:41" pos:end="199:63"><name pos:start="199:41" pos:end="199:43">env</name><operator pos:start="199:44" pos:end="199:45">-&gt;</operator><name pos:start="199:46" pos:end="199:54">exception</name><operator pos:start="199:55" pos:end="199:55">.</operator><name pos:start="199:56" pos:end="199:63">vaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="203:77"><expr pos:start="201:9" pos:end="203:76"><call pos:start="201:9" pos:end="203:76"><name pos:start="201:9" pos:end="201:21">qemu_log_mask</name><argument_list pos:start="201:22" pos:end="203:76">(<argument pos:start="201:23" pos:end="201:33"><expr pos:start="201:23" pos:end="201:33"><name pos:start="201:23" pos:end="201:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="201:36" pos:end="201:66"><expr pos:start="201:36" pos:end="201:66"><literal type="string" pos:start="201:36" pos:end="201:66">"...with IFSR 0x%x IFAR 0x%x\n"</literal></expr></argument>,

                      <argument pos:start="203:23" pos:end="203:40"><expr pos:start="203:23" pos:end="203:40"><name pos:start="203:23" pos:end="203:40"><name pos:start="203:23" pos:end="203:25">env</name><operator pos:start="203:26" pos:end="203:27">-&gt;</operator><name pos:start="203:28" pos:end="203:31">cp15</name><operator pos:start="203:32" pos:end="203:32">.</operator><name pos:start="203:33" pos:end="203:40">ifsr_el2</name></name></expr></argument>, <argument pos:start="203:43" pos:end="203:75"><expr pos:start="203:43" pos:end="203:75"><operator pos:start="203:43" pos:end="203:43">(</operator><name pos:start="203:44" pos:end="203:51">uint32_t</name><operator pos:start="203:52" pos:end="203:52">)</operator><name pos:start="203:53" pos:end="203:75"><name pos:start="203:53" pos:end="203:55">env</name><operator pos:start="203:56" pos:end="203:57">-&gt;</operator><name pos:start="203:58" pos:end="203:66">exception</name><operator pos:start="203:67" pos:end="203:67">.</operator><name pos:start="203:68" pos:end="203:75">vaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:36"><expr pos:start="205:9" pos:end="205:35"><name pos:start="205:9" pos:end="205:16">new_mode</name> <operator pos:start="205:18" pos:end="205:18">=</operator> <name pos:start="205:20" pos:end="205:35">ARM_CPU_MODE_ABT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:20"><expr pos:start="207:9" pos:end="207:19"><name pos:start="207:9" pos:end="207:12">addr</name> <operator pos:start="207:14" pos:end="207:14">=</operator> <literal type="number" pos:start="207:16" pos:end="207:19">0x0c</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:31"><expr pos:start="209:9" pos:end="209:30"><name pos:start="209:9" pos:end="209:12">mask</name> <operator pos:start="209:14" pos:end="209:14">=</operator> <name pos:start="209:16" pos:end="209:21">CPSR_A</name> <operator pos:start="209:23" pos:end="209:23">|</operator> <name pos:start="209:25" pos:end="209:30">CPSR_I</name></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:19"><expr pos:start="211:9" pos:end="211:18"><name pos:start="211:9" pos:end="211:14">offset</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <literal type="number" pos:start="211:18" pos:end="211:18">4</literal></expr>;</expr_stmt>

        <break pos:start="213:9" pos:end="213:14">break;</break>

    <case pos:start="215:5" pos:end="215:25">case <expr pos:start="215:10" pos:end="215:24"><name pos:start="215:10" pos:end="215:24">EXCP_DATA_ABORT</name></expr>:</case>

        <expr_stmt pos:start="217:9" pos:end="217:49"><expr pos:start="217:9" pos:end="217:48"><name pos:start="217:9" pos:end="217:27"><name pos:start="217:9" pos:end="217:11">env</name><operator pos:start="217:12" pos:end="217:13">-&gt;</operator><name pos:start="217:14" pos:end="217:17">cp15</name><operator pos:start="217:18" pos:end="217:18">.</operator><name pos:start="217:19" pos:end="217:24">esr_el</name><index pos:start="217:25" pos:end="217:27">[<expr pos:start="217:26" pos:end="217:26"><literal type="number" pos:start="217:26" pos:end="217:26">1</literal></expr>]</index></name> <operator pos:start="217:29" pos:end="217:29">=</operator> <name pos:start="217:31" pos:end="217:48"><name pos:start="217:31" pos:end="217:33">env</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:44">exception</name><operator pos:start="217:45" pos:end="217:45">.</operator><name pos:start="217:46" pos:end="217:48">fsr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="221:65"><expr pos:start="219:9" pos:end="221:64"><name pos:start="219:9" pos:end="219:27"><name pos:start="219:9" pos:end="219:11">env</name><operator pos:start="219:12" pos:end="219:13">-&gt;</operator><name pos:start="219:14" pos:end="219:17">cp15</name><operator pos:start="219:18" pos:end="219:18">.</operator><name pos:start="219:19" pos:end="219:24">far_el</name><index pos:start="219:25" pos:end="219:27">[<expr pos:start="219:26" pos:end="219:26"><literal type="number" pos:start="219:26" pos:end="219:26">1</literal></expr>]</index></name> <operator pos:start="219:29" pos:end="219:29">=</operator> <call pos:start="219:31" pos:end="221:64"><name pos:start="219:31" pos:end="219:39">deposit64</name><argument_list pos:start="219:40" pos:end="221:64">(<argument pos:start="219:41" pos:end="219:59"><expr pos:start="219:41" pos:end="219:59"><name pos:start="219:41" pos:end="219:59"><name pos:start="219:41" pos:end="219:43">env</name><operator pos:start="219:44" pos:end="219:45">-&gt;</operator><name pos:start="219:46" pos:end="219:49">cp15</name><operator pos:start="219:50" pos:end="219:50">.</operator><name pos:start="219:51" pos:end="219:56">far_el</name><index pos:start="219:57" pos:end="219:59">[<expr pos:start="219:58" pos:end="219:58"><literal type="number" pos:start="219:58" pos:end="219:58">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="219:62" pos:end="219:62"><expr pos:start="219:62" pos:end="219:62"><literal type="number" pos:start="219:62" pos:end="219:62">0</literal></expr></argument>, <argument pos:start="219:65" pos:end="219:66"><expr pos:start="219:65" pos:end="219:66"><literal type="number" pos:start="219:65" pos:end="219:66">32</literal></expr></argument>,

                                        <argument pos:start="221:41" pos:end="221:63"><expr pos:start="221:41" pos:end="221:63"><name pos:start="221:41" pos:end="221:63"><name pos:start="221:41" pos:end="221:43">env</name><operator pos:start="221:44" pos:end="221:45">-&gt;</operator><name pos:start="221:46" pos:end="221:54">exception</name><operator pos:start="221:55" pos:end="221:55">.</operator><name pos:start="221:56" pos:end="221:63">vaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="227:57"><expr pos:start="223:9" pos:end="227:56"><call pos:start="223:9" pos:end="227:56"><name pos:start="223:9" pos:end="223:21">qemu_log_mask</name><argument_list pos:start="223:22" pos:end="227:56">(<argument pos:start="223:23" pos:end="223:33"><expr pos:start="223:23" pos:end="223:33"><name pos:start="223:23" pos:end="223:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="223:36" pos:end="223:66"><expr pos:start="223:36" pos:end="223:66"><literal type="string" pos:start="223:36" pos:end="223:66">"...with DFSR 0x%x DFAR 0x%x\n"</literal></expr></argument>,

                      <argument pos:start="225:23" pos:end="225:51"><expr pos:start="225:23" pos:end="225:51"><operator pos:start="225:23" pos:end="225:23">(</operator><name pos:start="225:24" pos:end="225:31">uint32_t</name><operator pos:start="225:32" pos:end="225:32">)</operator><name pos:start="225:33" pos:end="225:51"><name pos:start="225:33" pos:end="225:35">env</name><operator pos:start="225:36" pos:end="225:37">-&gt;</operator><name pos:start="225:38" pos:end="225:41">cp15</name><operator pos:start="225:42" pos:end="225:42">.</operator><name pos:start="225:43" pos:end="225:48">esr_el</name><index pos:start="225:49" pos:end="225:51">[<expr pos:start="225:50" pos:end="225:50"><literal type="number" pos:start="225:50" pos:end="225:50">1</literal></expr>]</index></name></expr></argument>,

                      <argument pos:start="227:23" pos:end="227:55"><expr pos:start="227:23" pos:end="227:55"><operator pos:start="227:23" pos:end="227:23">(</operator><name pos:start="227:24" pos:end="227:31">uint32_t</name><operator pos:start="227:32" pos:end="227:32">)</operator><name pos:start="227:33" pos:end="227:55"><name pos:start="227:33" pos:end="227:35">env</name><operator pos:start="227:36" pos:end="227:37">-&gt;</operator><name pos:start="227:38" pos:end="227:46">exception</name><operator pos:start="227:47" pos:end="227:47">.</operator><name pos:start="227:48" pos:end="227:55">vaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:36"><expr pos:start="229:9" pos:end="229:35"><name pos:start="229:9" pos:end="229:16">new_mode</name> <operator pos:start="229:18" pos:end="229:18">=</operator> <name pos:start="229:20" pos:end="229:35">ARM_CPU_MODE_ABT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:20"><expr pos:start="231:9" pos:end="231:19"><name pos:start="231:9" pos:end="231:12">addr</name> <operator pos:start="231:14" pos:end="231:14">=</operator> <literal type="number" pos:start="231:16" pos:end="231:19">0x10</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:31"><expr pos:start="233:9" pos:end="233:30"><name pos:start="233:9" pos:end="233:12">mask</name> <operator pos:start="233:14" pos:end="233:14">=</operator> <name pos:start="233:16" pos:end="233:21">CPSR_A</name> <operator pos:start="233:23" pos:end="233:23">|</operator> <name pos:start="233:25" pos:end="233:30">CPSR_I</name></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:19"><expr pos:start="235:9" pos:end="235:18"><name pos:start="235:9" pos:end="235:14">offset</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <literal type="number" pos:start="235:18" pos:end="235:18">8</literal></expr>;</expr_stmt>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <case pos:start="239:5" pos:end="239:18">case <expr pos:start="239:10" pos:end="239:17"><name pos:start="239:10" pos:end="239:17">EXCP_IRQ</name></expr>:</case>

        <expr_stmt pos:start="241:9" pos:end="241:36"><expr pos:start="241:9" pos:end="241:35"><name pos:start="241:9" pos:end="241:16">new_mode</name> <operator pos:start="241:18" pos:end="241:18">=</operator> <name pos:start="241:20" pos:end="241:35">ARM_CPU_MODE_IRQ</name></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:20"><expr pos:start="243:9" pos:end="243:19"><name pos:start="243:9" pos:end="243:12">addr</name> <operator pos:start="243:14" pos:end="243:14">=</operator> <literal type="number" pos:start="243:16" pos:end="243:19">0x18</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="245:9" pos:end="245:53">/* Disable IRQ and imprecise data aborts.  */</comment>

        <expr_stmt pos:start="247:9" pos:end="247:31"><expr pos:start="247:9" pos:end="247:30"><name pos:start="247:9" pos:end="247:12">mask</name> <operator pos:start="247:14" pos:end="247:14">=</operator> <name pos:start="247:16" pos:end="247:21">CPSR_A</name> <operator pos:start="247:23" pos:end="247:23">|</operator> <name pos:start="247:25" pos:end="247:30">CPSR_I</name></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:19"><expr pos:start="249:9" pos:end="249:18"><name pos:start="249:9" pos:end="249:14">offset</name> <operator pos:start="249:16" pos:end="249:16">=</operator> <literal type="number" pos:start="249:18" pos:end="249:18">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="259:9"><if pos:start="251:9" pos:end="259:9">if <condition pos:start="251:12" pos:end="251:40">(<expr pos:start="251:13" pos:end="251:39"><name pos:start="251:13" pos:end="251:29"><name pos:start="251:13" pos:end="251:15">env</name><operator pos:start="251:16" pos:end="251:17">-&gt;</operator><name pos:start="251:18" pos:end="251:21">cp15</name><operator pos:start="251:22" pos:end="251:22">.</operator><name pos:start="251:23" pos:end="251:29">scr_el3</name></name> <operator pos:start="251:31" pos:end="251:31">&amp;</operator> <name pos:start="251:33" pos:end="251:39">SCR_IRQ</name></expr>)</condition> <block pos:start="251:42" pos:end="259:9">{<block_content pos:start="255:13" pos:end="257:27">

            <comment type="block" pos:start="253:13" pos:end="253:44">/* IRQ routed to monitor mode */</comment>

            <expr_stmt pos:start="255:13" pos:end="255:40"><expr pos:start="255:13" pos:end="255:39"><name pos:start="255:13" pos:end="255:20">new_mode</name> <operator pos:start="255:22" pos:end="255:22">=</operator> <name pos:start="255:24" pos:end="255:39">ARM_CPU_MODE_MON</name></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:27"><expr pos:start="257:13" pos:end="257:26"><name pos:start="257:13" pos:end="257:16">mask</name> <operator pos:start="257:18" pos:end="257:19">|=</operator> <name pos:start="257:21" pos:end="257:26">CPSR_F</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="261:9" pos:end="261:14">break;</break>

    <case pos:start="263:5" pos:end="263:18">case <expr pos:start="263:10" pos:end="263:17"><name pos:start="263:10" pos:end="263:17">EXCP_FIQ</name></expr>:</case>

        <expr_stmt pos:start="265:9" pos:end="265:36"><expr pos:start="265:9" pos:end="265:35"><name pos:start="265:9" pos:end="265:16">new_mode</name> <operator pos:start="265:18" pos:end="265:18">=</operator> <name pos:start="265:20" pos:end="265:35">ARM_CPU_MODE_FIQ</name></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:20"><expr pos:start="267:9" pos:end="267:19"><name pos:start="267:9" pos:end="267:12">addr</name> <operator pos:start="267:14" pos:end="267:14">=</operator> <literal type="number" pos:start="267:16" pos:end="267:19">0x1c</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="269:9" pos:end="269:58">/* Disable FIQ, IRQ and imprecise data aborts.  */</comment>

        <expr_stmt pos:start="271:9" pos:end="271:40"><expr pos:start="271:9" pos:end="271:39"><name pos:start="271:9" pos:end="271:12">mask</name> <operator pos:start="271:14" pos:end="271:14">=</operator> <name pos:start="271:16" pos:end="271:21">CPSR_A</name> <operator pos:start="271:23" pos:end="271:23">|</operator> <name pos:start="271:25" pos:end="271:30">CPSR_I</name> <operator pos:start="271:32" pos:end="271:32">|</operator> <name pos:start="271:34" pos:end="271:39">CPSR_F</name></expr>;</expr_stmt>

        <if_stmt pos:start="273:9" pos:end="279:9"><if pos:start="273:9" pos:end="279:9">if <condition pos:start="273:12" pos:end="273:40">(<expr pos:start="273:13" pos:end="273:39"><name pos:start="273:13" pos:end="273:29"><name pos:start="273:13" pos:end="273:15">env</name><operator pos:start="273:16" pos:end="273:17">-&gt;</operator><name pos:start="273:18" pos:end="273:21">cp15</name><operator pos:start="273:22" pos:end="273:22">.</operator><name pos:start="273:23" pos:end="273:29">scr_el3</name></name> <operator pos:start="273:31" pos:end="273:31">&amp;</operator> <name pos:start="273:33" pos:end="273:39">SCR_FIQ</name></expr>)</condition> <block pos:start="273:42" pos:end="279:9">{<block_content pos:start="277:13" pos:end="277:40">

            <comment type="block" pos:start="275:13" pos:end="275:44">/* FIQ routed to monitor mode */</comment>

            <expr_stmt pos:start="277:13" pos:end="277:40"><expr pos:start="277:13" pos:end="277:39"><name pos:start="277:13" pos:end="277:20">new_mode</name> <operator pos:start="277:22" pos:end="277:22">=</operator> <name pos:start="277:24" pos:end="277:39">ARM_CPU_MODE_MON</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:19"><expr pos:start="281:9" pos:end="281:18"><name pos:start="281:9" pos:end="281:14">offset</name> <operator pos:start="281:16" pos:end="281:16">=</operator> <literal type="number" pos:start="281:18" pos:end="281:18">4</literal></expr>;</expr_stmt>

        <break pos:start="283:9" pos:end="283:14">break;</break>

    <case pos:start="285:5" pos:end="285:18">case <expr pos:start="285:10" pos:end="285:17"><name pos:start="285:10" pos:end="285:17">EXCP_SMC</name></expr>:</case>

        <expr_stmt pos:start="287:9" pos:end="287:36"><expr pos:start="287:9" pos:end="287:35"><name pos:start="287:9" pos:end="287:16">new_mode</name> <operator pos:start="287:18" pos:end="287:18">=</operator> <name pos:start="287:20" pos:end="287:35">ARM_CPU_MODE_MON</name></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:20"><expr pos:start="289:9" pos:end="289:19"><name pos:start="289:9" pos:end="289:12">addr</name> <operator pos:start="289:14" pos:end="289:14">=</operator> <literal type="number" pos:start="289:16" pos:end="289:19">0x08</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:40"><expr pos:start="291:9" pos:end="291:39"><name pos:start="291:9" pos:end="291:12">mask</name> <operator pos:start="291:14" pos:end="291:14">=</operator> <name pos:start="291:16" pos:end="291:21">CPSR_A</name> <operator pos:start="291:23" pos:end="291:23">|</operator> <name pos:start="291:25" pos:end="291:30">CPSR_I</name> <operator pos:start="291:32" pos:end="291:32">|</operator> <name pos:start="291:34" pos:end="291:39">CPSR_F</name></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:19"><expr pos:start="293:9" pos:end="293:18"><name pos:start="293:9" pos:end="293:14">offset</name> <operator pos:start="293:16" pos:end="293:16">=</operator> <literal type="number" pos:start="293:18" pos:end="293:18">0</literal></expr>;</expr_stmt>

        <break pos:start="295:9" pos:end="295:14">break;</break>

    <default pos:start="297:5" pos:end="297:12">default:</default>

        <expr_stmt pos:start="299:9" pos:end="299:73"><expr pos:start="299:9" pos:end="299:72"><call pos:start="299:9" pos:end="299:72"><name pos:start="299:9" pos:end="299:17">cpu_abort</name><argument_list pos:start="299:18" pos:end="299:72">(<argument pos:start="299:19" pos:end="299:20"><expr pos:start="299:19" pos:end="299:20"><name pos:start="299:19" pos:end="299:20">cs</name></expr></argument>, <argument pos:start="299:23" pos:end="299:50"><expr pos:start="299:23" pos:end="299:50"><literal type="string" pos:start="299:23" pos:end="299:50">"Unhandled exception 0x%x\n"</literal></expr></argument>, <argument pos:start="299:53" pos:end="299:71"><expr pos:start="299:53" pos:end="299:71"><name pos:start="299:53" pos:end="299:71"><name pos:start="299:53" pos:end="299:54">cs</name><operator pos:start="299:55" pos:end="299:56">-&gt;</operator><name pos:start="299:57" pos:end="299:71">exception_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="301:9" pos:end="301:15">return;</return> <comment type="block" pos:start="301:17" pos:end="301:59">/* Never happens.  Keep compiler happy.  */</comment>

    </block_content>}</block></switch>



    <if_stmt pos:start="307:5" pos:end="331:5"><if pos:start="307:5" pos:end="311:5">if <condition pos:start="307:8" pos:end="307:37">(<expr pos:start="307:9" pos:end="307:36"><name pos:start="307:9" pos:end="307:16">new_mode</name> <operator pos:start="307:18" pos:end="307:19">==</operator> <name pos:start="307:21" pos:end="307:36">ARM_CPU_MODE_MON</name></expr>)</condition> <block pos:start="307:39" pos:end="311:5">{<block_content pos:start="309:9" pos:end="309:32">

        <expr_stmt pos:start="309:9" pos:end="309:32"><expr pos:start="309:9" pos:end="309:31"><name pos:start="309:9" pos:end="309:12">addr</name> <operator pos:start="309:14" pos:end="309:15">+=</operator> <name pos:start="309:17" pos:end="309:31"><name pos:start="309:17" pos:end="309:19">env</name><operator pos:start="309:20" pos:end="309:21">-&gt;</operator><name pos:start="309:22" pos:end="309:25">cp15</name><operator pos:start="309:26" pos:end="309:26">.</operator><name pos:start="309:27" pos:end="309:31">mvbar</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="311:7" pos:end="317:5">else if <condition pos:start="311:15" pos:end="311:64">(<expr pos:start="311:16" pos:end="311:63"><call pos:start="311:16" pos:end="311:53"><name pos:start="311:16" pos:end="311:41">A32_BANKED_CURRENT_REG_GET</name><argument_list pos:start="311:42" pos:end="311:53">(<argument pos:start="311:43" pos:end="311:45"><expr pos:start="311:43" pos:end="311:45"><name pos:start="311:43" pos:end="311:45">env</name></expr></argument>, <argument pos:start="311:48" pos:end="311:52"><expr pos:start="311:48" pos:end="311:52"><name pos:start="311:48" pos:end="311:52">sctlr</name></expr></argument>)</argument_list></call> <operator pos:start="311:55" pos:end="311:55">&amp;</operator> <name pos:start="311:57" pos:end="311:63">SCTLR_V</name></expr>)</condition> <block pos:start="311:66" pos:end="317:5">{<block_content pos:start="315:9" pos:end="315:27">

        <comment type="block" pos:start="313:9" pos:end="313:74">/* High vectors. When enabled, base address cannot be remapped. */</comment>

        <expr_stmt pos:start="315:9" pos:end="315:27"><expr pos:start="315:9" pos:end="315:26"><name pos:start="315:9" pos:end="315:12">addr</name> <operator pos:start="315:14" pos:end="315:15">+=</operator> <literal type="number" pos:start="315:17" pos:end="315:26">0xffff0000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="317:7" pos:end="331:5">else <block pos:start="317:12" pos:end="331:5">{<block_content pos:start="329:9" pos:end="329:37">

        <comment type="block" pos:start="319:9" pos:end="327:11">/* ARM v7 architectures provide a vector base address register to remap

         * the interrupt vector table.

         * This register is only followed in non-monitor mode, and is banked.

         * Note: only bits 31:5 are valid.

         */</comment>

        <expr_stmt pos:start="329:9" pos:end="329:37"><expr pos:start="329:9" pos:end="329:36"><name pos:start="329:9" pos:end="329:12">addr</name> <operator pos:start="329:14" pos:end="329:15">+=</operator> <name pos:start="329:17" pos:end="329:36"><name pos:start="329:17" pos:end="329:19">env</name><operator pos:start="329:20" pos:end="329:21">-&gt;</operator><name pos:start="329:22" pos:end="329:25">cp15</name><operator pos:start="329:26" pos:end="329:26">.</operator><name pos:start="329:27" pos:end="329:33">vbar_el</name><index pos:start="329:34" pos:end="329:36">[<expr pos:start="329:35" pos:end="329:35"><literal type="number" pos:start="329:35" pos:end="329:35">1</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="335:5" pos:end="339:5"><if pos:start="335:5" pos:end="339:5">if <condition pos:start="335:8" pos:end="335:58">(<expr pos:start="335:9" pos:end="335:57"><operator pos:start="335:9" pos:end="335:9">(</operator><name pos:start="335:10" pos:end="335:27"><name pos:start="335:10" pos:end="335:12">env</name><operator pos:start="335:13" pos:end="335:14">-&gt;</operator><name pos:start="335:15" pos:end="335:27">uncached_cpsr</name></name> <operator pos:start="335:29" pos:end="335:29">&amp;</operator> <name pos:start="335:31" pos:end="335:36">CPSR_M</name><operator pos:start="335:37" pos:end="335:37">)</operator> <operator pos:start="335:39" pos:end="335:40">==</operator> <name pos:start="335:42" pos:end="335:57">ARM_CPU_MODE_MON</name></expr>)</condition> <block pos:start="335:60" pos:end="339:5">{<block_content pos:start="337:9" pos:end="337:37">

        <expr_stmt pos:start="337:9" pos:end="337:37"><expr pos:start="337:9" pos:end="337:36"><name pos:start="337:9" pos:end="337:25"><name pos:start="337:9" pos:end="337:11">env</name><operator pos:start="337:12" pos:end="337:13">-&gt;</operator><name pos:start="337:14" pos:end="337:17">cp15</name><operator pos:start="337:18" pos:end="337:18">.</operator><name pos:start="337:19" pos:end="337:25">scr_el3</name></name> <operator pos:start="337:27" pos:end="337:28">&amp;=</operator> <operator pos:start="337:30" pos:end="337:30">~</operator><name pos:start="337:31" pos:end="337:36">SCR_NS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:32"><expr pos:start="343:5" pos:end="343:31"><call pos:start="343:5" pos:end="343:31"><name pos:start="343:5" pos:end="343:15">switch_mode</name> <argument_list pos:start="343:17" pos:end="343:31">(<argument pos:start="343:18" pos:end="343:20"><expr pos:start="343:18" pos:end="343:20"><name pos:start="343:18" pos:end="343:20">env</name></expr></argument>, <argument pos:start="343:23" pos:end="343:30"><expr pos:start="343:23" pos:end="343:30"><name pos:start="343:23" pos:end="343:30">new_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="345:5" pos:end="349:7">/* For exceptions taken to AArch32 we must clear the SS bit in both

     * PSTATE and in the old-state value we save to SPSR_&lt;mode&gt;, so zero it now.

     */</comment>

    <expr_stmt pos:start="351:5" pos:end="351:37"><expr pos:start="351:5" pos:end="351:36"><name pos:start="351:5" pos:end="351:22"><name pos:start="351:5" pos:end="351:7">env</name><operator pos:start="351:8" pos:end="351:9">-&gt;</operator><name pos:start="351:10" pos:end="351:22">uncached_cpsr</name></name> <operator pos:start="351:24" pos:end="351:25">&amp;=</operator> <operator pos:start="351:27" pos:end="351:27">~</operator><name pos:start="351:28" pos:end="351:36">PSTATE_SS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:31"><expr pos:start="353:5" pos:end="353:30"><name pos:start="353:5" pos:end="353:13"><name pos:start="353:5" pos:end="353:7">env</name><operator pos:start="353:8" pos:end="353:9">-&gt;</operator><name pos:start="353:10" pos:end="353:13">spsr</name></name> <operator pos:start="353:15" pos:end="353:15">=</operator> <call pos:start="353:17" pos:end="353:30"><name pos:start="353:17" pos:end="353:25">cpsr_read</name><argument_list pos:start="353:26" pos:end="353:30">(<argument pos:start="353:27" pos:end="353:29"><expr pos:start="353:27" pos:end="353:29"><name pos:start="353:27" pos:end="353:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="355:5" pos:end="355:25">/* Clear IT bits.  */</comment>

    <expr_stmt pos:start="357:5" pos:end="357:27"><expr pos:start="357:5" pos:end="357:26"><name pos:start="357:5" pos:end="357:22"><name pos:start="357:5" pos:end="357:7">env</name><operator pos:start="357:8" pos:end="357:9">-&gt;</operator><name pos:start="357:10" pos:end="357:22">condexec_bits</name></name> <operator pos:start="357:24" pos:end="357:24">=</operator> <literal type="number" pos:start="357:26" pos:end="357:26">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="359:5" pos:end="359:70">/* Switch to the new mode, and to the correct instruction set.  */</comment>

    <expr_stmt pos:start="361:5" pos:end="361:67"><expr pos:start="361:5" pos:end="361:66"><name pos:start="361:5" pos:end="361:22"><name pos:start="361:5" pos:end="361:7">env</name><operator pos:start="361:8" pos:end="361:9">-&gt;</operator><name pos:start="361:10" pos:end="361:22">uncached_cpsr</name></name> <operator pos:start="361:24" pos:end="361:24">=</operator> <operator pos:start="361:26" pos:end="361:26">(</operator><name pos:start="361:27" pos:end="361:44"><name pos:start="361:27" pos:end="361:29">env</name><operator pos:start="361:30" pos:end="361:31">-&gt;</operator><name pos:start="361:32" pos:end="361:44">uncached_cpsr</name></name> <operator pos:start="361:46" pos:end="361:46">&amp;</operator> <operator pos:start="361:48" pos:end="361:48">~</operator><name pos:start="361:49" pos:end="361:54">CPSR_M</name><operator pos:start="361:55" pos:end="361:55">)</operator> <operator pos:start="361:57" pos:end="361:57">|</operator> <name pos:start="361:59" pos:end="361:66">new_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:22"><expr pos:start="363:5" pos:end="363:21"><name pos:start="363:5" pos:end="363:13"><name pos:start="363:5" pos:end="363:7">env</name><operator pos:start="363:8" pos:end="363:9">-&gt;</operator><name pos:start="363:10" pos:end="363:13">daif</name></name> <operator pos:start="363:15" pos:end="363:16">|=</operator> <name pos:start="363:18" pos:end="363:21">mask</name></expr>;</expr_stmt>

    <comment type="block" pos:start="365:5" pos:end="367:55">/* this is a lie, as the was no c1_sys on V4T/V5, but who cares

     * and we should just guard the thumb mode on V4 */</comment>

    <if_stmt pos:start="369:5" pos:end="373:5"><if pos:start="369:5" pos:end="373:5">if <condition pos:start="369:8" pos:end="369:42">(<expr pos:start="369:9" pos:end="369:41"><call pos:start="369:9" pos:end="369:41"><name pos:start="369:9" pos:end="369:19">arm_feature</name><argument_list pos:start="369:20" pos:end="369:41">(<argument pos:start="369:21" pos:end="369:23"><expr pos:start="369:21" pos:end="369:23"><name pos:start="369:21" pos:end="369:23">env</name></expr></argument>, <argument pos:start="369:26" pos:end="369:40"><expr pos:start="369:26" pos:end="369:40"><name pos:start="369:26" pos:end="369:40">ARM_FEATURE_V4T</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="369:44" pos:end="373:5">{<block_content pos:start="371:9" pos:end="371:78">

        <expr_stmt pos:start="371:9" pos:end="371:78"><expr pos:start="371:9" pos:end="371:77"><name pos:start="371:9" pos:end="371:18"><name pos:start="371:9" pos:end="371:11">env</name><operator pos:start="371:12" pos:end="371:13">-&gt;</operator><name pos:start="371:14" pos:end="371:18">thumb</name></name> <operator pos:start="371:20" pos:end="371:20">=</operator> <operator pos:start="371:22" pos:end="371:22">(</operator><call pos:start="371:23" pos:end="371:60"><name pos:start="371:23" pos:end="371:48">A32_BANKED_CURRENT_REG_GET</name><argument_list pos:start="371:49" pos:end="371:60">(<argument pos:start="371:50" pos:end="371:52"><expr pos:start="371:50" pos:end="371:52"><name pos:start="371:50" pos:end="371:52">env</name></expr></argument>, <argument pos:start="371:55" pos:end="371:59"><expr pos:start="371:55" pos:end="371:59"><name pos:start="371:55" pos:end="371:59">sctlr</name></expr></argument>)</argument_list></call> <operator pos:start="371:62" pos:end="371:62">&amp;</operator> <name pos:start="371:64" pos:end="371:71">SCTLR_TE</name><operator pos:start="371:72" pos:end="371:72">)</operator> <operator pos:start="371:74" pos:end="371:75">!=</operator> <literal type="number" pos:start="371:77" pos:end="371:77">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:43"><expr pos:start="375:5" pos:end="375:42"><name pos:start="375:5" pos:end="375:17"><name pos:start="375:5" pos:end="375:7">env</name><operator pos:start="375:8" pos:end="375:9">-&gt;</operator><name pos:start="375:10" pos:end="375:13">regs</name><index pos:start="375:14" pos:end="375:17">[<expr pos:start="375:15" pos:end="375:16"><literal type="number" pos:start="375:15" pos:end="375:16">14</literal></expr>]</index></name> <operator pos:start="375:19" pos:end="375:19">=</operator> <name pos:start="375:21" pos:end="375:33"><name pos:start="375:21" pos:end="375:23">env</name><operator pos:start="375:24" pos:end="375:25">-&gt;</operator><name pos:start="375:26" pos:end="375:29">regs</name><index pos:start="375:30" pos:end="375:33">[<expr pos:start="375:31" pos:end="375:32"><literal type="number" pos:start="375:31" pos:end="375:32">15</literal></expr>]</index></name> <operator pos:start="375:35" pos:end="375:35">+</operator> <name pos:start="375:37" pos:end="375:42">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="377:5" pos:end="377:25"><expr pos:start="377:5" pos:end="377:24"><name pos:start="377:5" pos:end="377:17"><name pos:start="377:5" pos:end="377:7">env</name><operator pos:start="377:8" pos:end="377:9">-&gt;</operator><name pos:start="377:10" pos:end="377:13">regs</name><index pos:start="377:14" pos:end="377:17">[<expr pos:start="377:15" pos:end="377:16"><literal type="number" pos:start="377:15" pos:end="377:16">15</literal></expr>]</index></name> <operator pos:start="377:19" pos:end="377:19">=</operator> <name pos:start="377:21" pos:end="377:24">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:50"><expr pos:start="379:5" pos:end="379:49"><name pos:start="379:5" pos:end="379:25"><name pos:start="379:5" pos:end="379:6">cs</name><operator pos:start="379:7" pos:end="379:8">-&gt;</operator><name pos:start="379:9" pos:end="379:25">interrupt_request</name></name> <operator pos:start="379:27" pos:end="379:28">|=</operator> <name pos:start="379:30" pos:end="379:49">CPU_INTERRUPT_EXITTB</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
