<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7370.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">cpu_exit_tb_from_sighandler</name><parameter_list pos:start="1:40" pos:end="1:65">(<parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">CPUState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">cpu</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:64"><decl pos:start="1:56" pos:end="1:64"><type pos:start="1:56" pos:end="1:64"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">puc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="7:5" pos:end="39:38">

<cpp:ifdef pos:start="5:1" pos:end="5:16">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:16">__linux__</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">ucontext</name></name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:23">uc</name> <init pos:start="7:25" pos:end="7:29">= <expr pos:start="7:27" pos:end="7:29"><name pos:start="7:27" pos:end="7:29">puc</name></expr></init></decl>;</decl_stmt>

<cpp:elif pos:start="9:1" pos:end="9:26">#<cpp:directive pos:start="9:2" pos:end="9:5">elif</cpp:directive> <expr pos:start="9:7" pos:end="9:26"><call pos:start="9:7" pos:end="9:26"><name pos:start="9:7" pos:end="9:13">defined</name><argument_list pos:start="9:14" pos:end="9:26">(<argument pos:start="9:15" pos:end="9:25"><expr pos:start="9:15" pos:end="9:25"><name pos:start="9:15" pos:end="9:25">__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <decl_stmt pos:start="11:5" pos:end="22:0"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:21">sigcontext</name></name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:25">uc</name> <init pos:start="11:27" pos:end="11:31">= <expr pos:start="11:29" pos:end="11:31"><name pos:start="11:29" pos:end="11:31">puc</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="17:5" pos:end="17:31">/* XXX: use siglongjmp ? */</comment>

<cpp:ifdef pos:start="19:1" pos:end="19:16">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:16">__linux__</name></cpp:ifdef>

<cpp:ifdef pos:start="21:1" pos:end="21:13">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:13">__ia64</name></cpp:ifdef>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:63"><call pos:start="23:5" pos:end="23:63"><name pos:start="23:5" pos:end="23:15">sigprocmask</name><argument_list pos:start="23:16" pos:end="23:63">(<argument pos:start="23:17" pos:end="23:27"><expr pos:start="23:17" pos:end="23:27"><name pos:start="23:17" pos:end="23:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="23:30" pos:end="23:56"><expr pos:start="23:30" pos:end="23:56"><operator pos:start="23:30" pos:end="23:30">(</operator><name pos:start="23:31" pos:end="23:38">sigset_t</name> <operator pos:start="23:40" pos:end="23:40">*</operator><operator pos:start="23:41" pos:end="23:41">)</operator><operator pos:start="23:42" pos:end="23:42">&amp;</operator><name pos:start="23:43" pos:end="23:56"><name pos:start="23:43" pos:end="23:44">uc</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:56">uc_sigmask</name></name></expr></argument>, <argument pos:start="23:59" pos:end="23:62"><expr pos:start="23:59" pos:end="23:62"><name pos:start="23:59" pos:end="23:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="27:5" pos:end="32:0"><expr pos:start="27:5" pos:end="27:51"><call pos:start="27:5" pos:end="27:51"><name pos:start="27:5" pos:end="27:15">sigprocmask</name><argument_list pos:start="27:16" pos:end="27:51">(<argument pos:start="27:17" pos:end="27:27"><expr pos:start="27:17" pos:end="27:27"><name pos:start="27:17" pos:end="27:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="27:30" pos:end="27:44"><expr pos:start="27:30" pos:end="27:44"><operator pos:start="27:30" pos:end="27:30">&amp;</operator><name pos:start="27:31" pos:end="27:44"><name pos:start="27:31" pos:end="27:32">uc</name><operator pos:start="27:33" pos:end="27:34">-&gt;</operator><name pos:start="27:35" pos:end="27:44">uc_sigmask</name></name></expr></argument>, <argument pos:start="27:47" pos:end="27:50"><expr pos:start="27:47" pos:end="27:50"><name pos:start="27:47" pos:end="27:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

<cpp:elif pos:start="31:1" pos:end="31:26">#<cpp:directive pos:start="31:2" pos:end="31:5">elif</cpp:directive> <expr pos:start="31:7" pos:end="31:26"><call pos:start="31:7" pos:end="31:26"><name pos:start="31:7" pos:end="31:13">defined</name><argument_list pos:start="31:14" pos:end="31:26">(<argument pos:start="31:15" pos:end="31:25"><expr pos:start="31:15" pos:end="31:25"><name pos:start="31:15" pos:end="31:25">__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="33:5" pos:end="36:0"><expr pos:start="33:5" pos:end="33:48"><call pos:start="33:5" pos:end="33:48"><name pos:start="33:5" pos:end="33:15">sigprocmask</name><argument_list pos:start="33:16" pos:end="33:48">(<argument pos:start="33:17" pos:end="33:27"><expr pos:start="33:17" pos:end="33:27"><name pos:start="33:17" pos:end="33:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="33:30" pos:end="33:41"><expr pos:start="33:30" pos:end="33:41"><operator pos:start="33:30" pos:end="33:30">&amp;</operator><name pos:start="33:31" pos:end="33:41"><name pos:start="33:31" pos:end="33:32">uc</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:41">sc_mask</name></name></expr></argument>, <argument pos:start="33:44" pos:end="33:47"><expr pos:start="33:44" pos:end="33:47"><name pos:start="33:44" pos:end="33:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><call pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:26">cpu_resume_from_signal</name><argument_list pos:start="39:27" pos:end="39:37">(<argument pos:start="39:28" pos:end="39:30"><expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">cpu</name></expr></argument>, <argument pos:start="39:33" pos:end="39:36"><expr pos:start="39:33" pos:end="39:36"><name pos:start="39:33" pos:end="39:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
