<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18087.c" pos:tabs="8"><function pos:start="1:1" pos:end="285:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">smka_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:47">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:57">AVPacket</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:64">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="285:1">{<block_content pos:start="7:5" pos:end="283:20">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">frame</name>     <init pos:start="7:24" pos:end="7:29">= <expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15">HuffContext</name></type> <name pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:17">h</name><index pos:start="15:18" pos:end="15:20">[<expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">4</literal></expr>]</index></name> <init pos:start="15:22" pos:end="15:32">= <expr pos:start="15:24" pos:end="15:32"><block pos:start="15:24" pos:end="15:32">{ <expr pos:start="15:26" pos:end="15:30"><block pos:start="15:26" pos:end="15:30">{ <expr pos:start="15:28" pos:end="15:28"><literal type="number" pos:start="15:28" pos:end="15:28">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">VLC</name></type> <name pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:11">vlc</name><index pos:start="17:12" pos:end="17:14">[<expr pos:start="17:13" pos:end="17:13"><literal type="number" pos:start="17:13" pos:end="17:13">4</literal></expr>]</index></name>       <init pos:start="17:22" pos:end="17:32">= <expr pos:start="17:24" pos:end="17:32"><block pos:start="17:24" pos:end="17:32">{ <expr pos:start="17:26" pos:end="17:30"><block pos:start="17:26" pos:end="17:30">{ <expr pos:start="17:28" pos:end="17:28"><literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">int16_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:21">samples8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>, <decl pos:start="25:12" pos:end="25:14"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:12" pos:end="25:14">res</name></decl>, <decl pos:start="25:17" pos:end="25:19"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:17" pos:end="25:19">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:16"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:16">unp_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:12"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:12">bits</name></decl>, <decl pos:start="29:15" pos:end="29:20"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:15" pos:end="29:20">stereo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">pred</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">2</literal></expr>]</index></name> <init pos:start="31:17" pos:end="31:24">= <expr pos:start="31:19" pos:end="31:24"><block pos:start="31:19" pos:end="31:24">{<expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>, <expr pos:start="31:23" pos:end="31:23"><literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:22">(<expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:16">buf_size</name> <operator pos:start="35:18" pos:end="35:19">&lt;=</operator> <literal type="number" pos:start="35:21" pos:end="35:21">4</literal></expr>)</condition> <block pos:start="35:24" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:31">

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:60">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:59"><expr pos:start="37:37" pos:end="37:59"><literal type="string" pos:start="37:37" pos:end="37:59">"packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:31">return <expr pos:start="39:16" pos:end="39:30"><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:30">(<argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:12">unp_size</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:27"><name pos:start="45:16" pos:end="45:22">AV_RL32</name><argument_list pos:start="45:23" pos:end="45:27">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:52"><expr pos:start="49:5" pos:end="49:51"><call pos:start="49:5" pos:end="49:51"><name pos:start="49:5" pos:end="49:17">init_get_bits</name><argument_list pos:start="49:18" pos:end="49:51">(<argument pos:start="49:19" pos:end="49:21"><expr pos:start="49:19" pos:end="49:21"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:21">gb</name></expr></argument>, <argument pos:start="49:24" pos:end="49:30"><expr pos:start="49:24" pos:end="49:30"><name pos:start="49:24" pos:end="49:26">buf</name> <operator pos:start="49:28" pos:end="49:28">+</operator> <literal type="number" pos:start="49:30" pos:end="49:30">4</literal></expr></argument>, <argument pos:start="49:33" pos:end="49:50"><expr pos:start="49:33" pos:end="49:50"><operator pos:start="49:33" pos:end="49:33">(</operator><name pos:start="49:34" pos:end="49:41">buf_size</name> <operator pos:start="49:43" pos:end="49:43">-</operator> <literal type="number" pos:start="49:45" pos:end="49:45">4</literal><operator pos:start="49:46" pos:end="49:46">)</operator> <operator pos:start="49:48" pos:end="49:48">*</operator> <literal type="number" pos:start="49:50" pos:end="49:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if<condition pos:start="53:7" pos:end="53:23">(<expr pos:start="53:8" pos:end="53:22"><operator pos:start="53:8" pos:end="53:8">!</operator><call pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:17">get_bits1</name><argument_list pos:start="53:18" pos:end="53:22">(<argument pos:start="53:19" pos:end="53:21"><expr pos:start="53:19" pos:end="53:21"><operator pos:start="53:19" pos:end="53:19">&amp;</operator><name pos:start="53:20" pos:end="53:21">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="53:24" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:17">

        <expr_stmt pos:start="55:9" pos:end="55:55"><expr pos:start="55:9" pos:end="55:54"><call pos:start="55:9" pos:end="55:54"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:54">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:33"><expr pos:start="55:23" pos:end="55:33"><name pos:start="55:23" pos:end="55:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="55:36" pos:end="55:53"><expr pos:start="55:36" pos:end="55:53"><literal type="string" pos:start="55:36" pos:end="55:53">"Sound: no data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:27"><expr pos:start="57:9" pos:end="57:26"><operator pos:start="57:9" pos:end="57:9">*</operator><name pos:start="57:10" pos:end="57:22">got_frame_ptr</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <literal type="number" pos:start="57:26" pos:end="57:26">0</literal></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:10">stereo</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:27"><name pos:start="63:14" pos:end="63:22">get_bits1</name><argument_list pos:start="63:23" pos:end="63:27">(<argument pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><operator pos:start="63:24" pos:end="63:24">&amp;</operator><name pos:start="63:25" pos:end="63:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:26"><expr pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:8">bits</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <call pos:start="65:12" pos:end="65:25"><name pos:start="65:12" pos:end="65:20">get_bits1</name><argument_list pos:start="65:21" pos:end="65:25">(<argument pos:start="65:22" pos:end="65:24"><expr pos:start="65:22" pos:end="65:24"><operator pos:start="65:22" pos:end="65:22">&amp;</operator><name pos:start="65:23" pos:end="65:24">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:40">(<expr pos:start="67:9" pos:end="67:39"><name pos:start="67:9" pos:end="67:14">stereo</name> <operator pos:start="67:16" pos:end="67:16">^</operator> <operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:33"><name pos:start="67:19" pos:end="67:23">avctx</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:33">channels</name></name> <operator pos:start="67:35" pos:end="67:36">!=</operator> <literal type="number" pos:start="67:38" pos:end="67:38">1</literal><operator pos:start="67:39" pos:end="67:39">)</operator></expr>)</condition> <block pos:start="67:42" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:31">

        <expr_stmt pos:start="69:9" pos:end="69:59"><expr pos:start="69:9" pos:end="69:58"><call pos:start="69:9" pos:end="69:58"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:58">(<argument pos:start="69:16" pos:end="69:20"><expr pos:start="69:16" pos:end="69:20"><name pos:start="69:16" pos:end="69:20">avctx</name></expr></argument>, <argument pos:start="69:23" pos:end="69:34"><expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:37" pos:end="69:57"><expr pos:start="69:37" pos:end="69:57"><literal type="string" pos:start="69:37" pos:end="69:57">"channels mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:31">return <expr pos:start="71:16" pos:end="71:30"><call pos:start="71:16" pos:end="71:30"><name pos:start="71:16" pos:end="71:22">AVERROR</name><argument_list pos:start="71:23" pos:end="71:30">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:54">(<expr pos:start="75:9" pos:end="75:53"><name pos:start="75:9" pos:end="75:12">bits</name> <operator pos:start="75:14" pos:end="75:15">&amp;&amp;</operator> <name pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:21">avctx</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:33">sample_fmt</name></name> <operator pos:start="75:35" pos:end="75:36">==</operator> <name pos:start="75:38" pos:end="75:53">AV_SAMPLE_FMT_U8</name></expr>)</condition> <block pos:start="75:56" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:31">

        <expr_stmt pos:start="77:9" pos:end="77:64"><expr pos:start="77:9" pos:end="77:63"><call pos:start="77:9" pos:end="77:63"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="77:63">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:62"><expr pos:start="77:37" pos:end="77:62"><literal type="string" pos:start="77:37" pos:end="77:62">"sample format mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:31">return <expr pos:start="79:16" pos:end="79:30"><call pos:start="79:16" pos:end="79:30"><name pos:start="79:16" pos:end="79:22">AVERROR</name><argument_list pos:start="79:23" pos:end="79:30">(<argument pos:start="79:24" pos:end="79:29"><expr pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:27">/* get output buffer */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:66"><expr pos:start="87:5" pos:end="87:65"><name pos:start="87:5" pos:end="87:21"><name pos:start="87:5" pos:end="87:9">frame</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:21">nb_samples</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:32">unp_size</name> <operator pos:start="87:34" pos:end="87:34">/</operator> <operator pos:start="87:36" pos:end="87:36">(</operator><name pos:start="87:37" pos:end="87:51"><name pos:start="87:37" pos:end="87:41">avctx</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:51">channels</name></name> <operator pos:start="87:53" pos:end="87:53">*</operator> <operator pos:start="87:55" pos:end="87:55">(</operator><name pos:start="87:56" pos:end="87:59">bits</name> <operator pos:start="87:61" pos:end="87:61">+</operator> <literal type="number" pos:start="87:63" pos:end="87:63">1</literal><operator pos:start="87:64" pos:end="87:64">)</operator><operator pos:start="87:65" pos:end="87:65">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:51">(<expr pos:start="89:9" pos:end="89:50"><operator pos:start="89:9" pos:end="89:9">(</operator><name pos:start="89:10" pos:end="89:12">ret</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <call pos:start="89:16" pos:end="89:45"><name pos:start="89:16" pos:end="89:28">ff_get_buffer</name><argument_list pos:start="89:29" pos:end="89:45">(<argument pos:start="89:30" pos:end="89:34"><expr pos:start="89:30" pos:end="89:34"><name pos:start="89:30" pos:end="89:34">avctx</name></expr></argument>, <argument pos:start="89:37" pos:end="89:41"><expr pos:start="89:37" pos:end="89:41"><name pos:start="89:37" pos:end="89:41">frame</name></expr></argument>, <argument pos:start="89:44" pos:end="89:44"><expr pos:start="89:44" pos:end="89:44"><literal type="number" pos:start="89:44" pos:end="89:44">0</literal></expr></argument>)</argument_list></call><operator pos:start="89:46" pos:end="89:46">)</operator> <operator pos:start="89:48" pos:end="89:48">&lt;</operator> <literal type="number" pos:start="89:50" pos:end="89:50">0</literal></expr>)</condition> <block pos:start="89:53" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:19">

        <expr_stmt pos:start="91:9" pos:end="91:61"><expr pos:start="91:9" pos:end="91:60"><call pos:start="91:9" pos:end="91:60"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="91:60">(<argument pos:start="91:16" pos:end="91:20"><expr pos:start="91:16" pos:end="91:20"><name pos:start="91:16" pos:end="91:20">avctx</name></expr></argument>, <argument pos:start="91:23" pos:end="91:34"><expr pos:start="91:23" pos:end="91:34"><name pos:start="91:23" pos:end="91:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:37" pos:end="91:59"><expr pos:start="91:37" pos:end="91:59"><literal type="string" pos:start="91:37" pos:end="91:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:19">return <expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:41"><expr pos:start="97:5" pos:end="97:40"><name pos:start="97:5" pos:end="97:11">samples</name>  <operator pos:start="97:14" pos:end="97:14">=</operator> <operator pos:start="97:16" pos:end="97:16">(</operator><name pos:start="97:17" pos:end="97:23">int16_t</name> <operator pos:start="97:25" pos:end="97:25">*</operator><operator pos:start="97:26" pos:end="97:26">)</operator><name pos:start="97:27" pos:end="97:40"><name pos:start="97:27" pos:end="97:31">frame</name><operator pos:start="97:32" pos:end="97:33">-&gt;</operator><name pos:start="97:34" pos:end="97:37">data</name><index pos:start="97:38" pos:end="97:40">[<expr pos:start="97:39" pos:end="97:39"><literal type="number" pos:start="97:39" pos:end="97:39">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:41"><expr pos:start="99:5" pos:end="99:40"><name pos:start="99:5" pos:end="99:12">samples8</name> <operator pos:start="99:14" pos:end="99:14">=</operator>            <name pos:start="99:27" pos:end="99:40"><name pos:start="99:27" pos:end="99:31">frame</name><operator pos:start="99:32" pos:end="99:33">-&gt;</operator><name pos:start="99:34" pos:end="99:37">data</name><index pos:start="99:38" pos:end="99:40">[<expr pos:start="99:39" pos:end="99:39"><literal type="number" pos:start="99:39" pos:end="99:39">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="line" pos:start="103:5" pos:end="103:17">// Initialize</comment>

    <for pos:start="105:5" pos:end="143:5">for<control pos:start="105:8" pos:end="105:47">(<init pos:start="105:9" pos:end="105:14"><expr pos:start="105:9" pos:end="105:13"><name pos:start="105:9" pos:end="105:9">i</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <literal type="number" pos:start="105:13" pos:end="105:13">0</literal></expr>;</init> <condition pos:start="105:16" pos:end="105:42"><expr pos:start="105:16" pos:end="105:41"><name pos:start="105:16" pos:end="105:16">i</name> <operator pos:start="105:18" pos:end="105:18">&lt;</operator> <operator pos:start="105:20" pos:end="105:20">(</operator><literal type="number" pos:start="105:21" pos:end="105:21">1</literal> <operator pos:start="105:23" pos:end="105:24">&lt;&lt;</operator> <operator pos:start="105:26" pos:end="105:26">(</operator><name pos:start="105:27" pos:end="105:30">bits</name> <operator pos:start="105:32" pos:end="105:32">+</operator> <name pos:start="105:34" pos:end="105:39">stereo</name><operator pos:start="105:40" pos:end="105:40">)</operator><operator pos:start="105:41" pos:end="105:41">)</operator></expr>;</condition> <incr pos:start="105:44" pos:end="105:46"><expr pos:start="105:44" pos:end="105:46"><name pos:start="105:44" pos:end="105:44">i</name><operator pos:start="105:45" pos:end="105:46">++</operator></expr></incr>)</control> <block pos:start="105:49" pos:end="143:5">{<block_content pos:start="107:9" pos:end="141:9">

        <expr_stmt pos:start="107:9" pos:end="107:26"><expr pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:12"><name pos:start="107:9" pos:end="107:9">h</name><index pos:start="107:10" pos:end="107:12">[<expr pos:start="107:11" pos:end="107:11"><name pos:start="107:11" pos:end="107:11">i</name></expr>]</index></name><operator pos:start="107:13" pos:end="107:13">.</operator><name pos:start="107:14" pos:end="107:19">length</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <literal type="number" pos:start="107:23" pos:end="107:25">256</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:27"><expr pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:12"><name pos:start="109:9" pos:end="109:9">h</name><index pos:start="109:10" pos:end="109:12">[<expr pos:start="109:11" pos:end="109:11"><name pos:start="109:11" pos:end="109:11">i</name></expr>]</index></name><operator pos:start="109:13" pos:end="109:13">.</operator><name pos:start="109:14" pos:end="109:22">maxlength</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <literal type="number" pos:start="109:26" pos:end="109:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:25"><expr pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:12"><name pos:start="111:9" pos:end="111:9">h</name><index pos:start="111:10" pos:end="111:12">[<expr pos:start="111:11" pos:end="111:11"><name pos:start="111:11" pos:end="111:11">i</name></expr>]</index></name><operator pos:start="111:13" pos:end="111:13">.</operator><name pos:start="111:14" pos:end="111:20">current</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <literal type="number" pos:start="111:24" pos:end="111:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:40"><expr pos:start="113:9" pos:end="113:39"><name pos:start="113:9" pos:end="113:12"><name pos:start="113:9" pos:end="113:9">h</name><index pos:start="113:10" pos:end="113:12">[<expr pos:start="113:11" pos:end="113:11"><name pos:start="113:11" pos:end="113:11">i</name></expr>]</index></name><operator pos:start="113:13" pos:end="113:13">.</operator><name pos:start="113:14" pos:end="113:17">bits</name> <operator pos:start="113:19" pos:end="113:19">=</operator> <call pos:start="113:21" pos:end="113:39"><name pos:start="113:21" pos:end="113:30">av_mallocz</name><argument_list pos:start="113:31" pos:end="113:39">(<argument pos:start="113:32" pos:end="113:38"><expr pos:start="113:32" pos:end="113:38"><literal type="number" pos:start="113:32" pos:end="113:34">256</literal> <operator pos:start="113:36" pos:end="113:36">*</operator> <literal type="number" pos:start="113:38" pos:end="113:38">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:53"><expr pos:start="115:9" pos:end="115:52"><name pos:start="115:9" pos:end="115:12"><name pos:start="115:9" pos:end="115:9">h</name><index pos:start="115:10" pos:end="115:12">[<expr pos:start="115:11" pos:end="115:11"><name pos:start="115:11" pos:end="115:11">i</name></expr>]</index></name><operator pos:start="115:13" pos:end="115:13">.</operator><name pos:start="115:14" pos:end="115:20">lengths</name> <operator pos:start="115:22" pos:end="115:22">=</operator> <call pos:start="115:24" pos:end="115:52"><name pos:start="115:24" pos:end="115:33">av_mallocz</name><argument_list pos:start="115:34" pos:end="115:52">(<argument pos:start="115:35" pos:end="115:51"><expr pos:start="115:35" pos:end="115:51"><literal type="number" pos:start="115:35" pos:end="115:37">256</literal> <operator pos:start="115:39" pos:end="115:39">*</operator> <sizeof pos:start="115:41" pos:end="115:51">sizeof<argument_list pos:start="115:47" pos:end="115:51">(<argument pos:start="115:48" pos:end="115:50"><expr pos:start="115:48" pos:end="115:50"><name pos:start="115:48" pos:end="115:50">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:52"><expr pos:start="117:9" pos:end="117:51"><name pos:start="117:9" pos:end="117:12"><name pos:start="117:9" pos:end="117:9">h</name><index pos:start="117:10" pos:end="117:12">[<expr pos:start="117:11" pos:end="117:11"><name pos:start="117:11" pos:end="117:11">i</name></expr>]</index></name><operator pos:start="117:13" pos:end="117:13">.</operator><name pos:start="117:14" pos:end="117:19">values</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:51"><name pos:start="117:23" pos:end="117:32">av_mallocz</name><argument_list pos:start="117:33" pos:end="117:51">(<argument pos:start="117:34" pos:end="117:50"><expr pos:start="117:34" pos:end="117:50"><literal type="number" pos:start="117:34" pos:end="117:36">256</literal> <operator pos:start="117:38" pos:end="117:38">*</operator> <sizeof pos:start="117:40" pos:end="117:50">sizeof<argument_list pos:start="117:46" pos:end="117:50">(<argument pos:start="117:47" pos:end="117:49"><expr pos:start="117:47" pos:end="117:49"><name pos:start="117:47" pos:end="117:49">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:24"><expr pos:start="119:9" pos:end="119:23"><call pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:18">skip_bits1</name><argument_list pos:start="119:19" pos:end="119:23">(<argument pos:start="119:20" pos:end="119:22"><expr pos:start="119:20" pos:end="119:22"><operator pos:start="119:20" pos:end="119:20">&amp;</operator><name pos:start="119:21" pos:end="119:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:46"><expr pos:start="121:9" pos:end="121:45"><call pos:start="121:9" pos:end="121:45"><name pos:start="121:9" pos:end="121:27">smacker_decode_tree</name><argument_list pos:start="121:28" pos:end="121:45">(<argument pos:start="121:29" pos:end="121:31"><expr pos:start="121:29" pos:end="121:31"><operator pos:start="121:29" pos:end="121:29">&amp;</operator><name pos:start="121:30" pos:end="121:31">gb</name></expr></argument>, <argument pos:start="121:34" pos:end="121:38"><expr pos:start="121:34" pos:end="121:38"><operator pos:start="121:34" pos:end="121:34">&amp;</operator><name pos:start="121:35" pos:end="121:38"><name pos:start="121:35" pos:end="121:35">h</name><index pos:start="121:36" pos:end="121:38">[<expr pos:start="121:37" pos:end="121:37"><name pos:start="121:37" pos:end="121:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="121:41" pos:end="121:41"><expr pos:start="121:41" pos:end="121:41"><literal type="number" pos:start="121:41" pos:end="121:41">0</literal></expr></argument>, <argument pos:start="121:44" pos:end="121:44"><expr pos:start="121:44" pos:end="121:44"><literal type="number" pos:start="121:44" pos:end="121:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:24"><expr pos:start="123:9" pos:end="123:23"><call pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:18">skip_bits1</name><argument_list pos:start="123:19" pos:end="123:23">(<argument pos:start="123:20" pos:end="123:22"><expr pos:start="123:20" pos:end="123:22"><operator pos:start="123:20" pos:end="123:20">&amp;</operator><name pos:start="123:21" pos:end="123:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="141:9"><if pos:start="125:9" pos:end="141:9">if<condition pos:start="125:11" pos:end="125:28">(<expr pos:start="125:12" pos:end="125:27"><name pos:start="125:12" pos:end="125:15"><name pos:start="125:12" pos:end="125:12">h</name><index pos:start="125:13" pos:end="125:15">[<expr pos:start="125:14" pos:end="125:14"><name pos:start="125:14" pos:end="125:14">i</name></expr>]</index></name><operator pos:start="125:16" pos:end="125:16">.</operator><name pos:start="125:17" pos:end="125:23">current</name> <operator pos:start="125:25" pos:end="125:25">&gt;</operator> <literal type="number" pos:start="125:27" pos:end="125:27">1</literal></expr>)</condition> <block pos:start="125:30" pos:end="141:9">{<block_content pos:start="127:13" pos:end="139:13">

            <expr_stmt pos:start="127:13" pos:end="131:80"><expr pos:start="127:13" pos:end="131:79"><name pos:start="127:13" pos:end="127:15">res</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="131:79"><name pos:start="127:19" pos:end="127:26">init_vlc</name><argument_list pos:start="127:27" pos:end="131:79">(<argument pos:start="127:28" pos:end="127:34"><expr pos:start="127:28" pos:end="127:34"><operator pos:start="127:28" pos:end="127:28">&amp;</operator><name pos:start="127:29" pos:end="127:34"><name pos:start="127:29" pos:end="127:31">vlc</name><index pos:start="127:32" pos:end="127:34">[<expr pos:start="127:33" pos:end="127:33"><name pos:start="127:33" pos:end="127:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="127:37" pos:end="127:48"><expr pos:start="127:37" pos:end="127:48"><name pos:start="127:37" pos:end="127:48">SMKTREE_BITS</name></expr></argument>, <argument pos:start="127:51" pos:end="127:61"><expr pos:start="127:51" pos:end="127:61"><name pos:start="127:51" pos:end="127:54"><name pos:start="127:51" pos:end="127:51">h</name><index pos:start="127:52" pos:end="127:54">[<expr pos:start="127:53" pos:end="127:53"><name pos:start="127:53" pos:end="127:53">i</name></expr>]</index></name><operator pos:start="127:55" pos:end="127:55">.</operator><name pos:start="127:56" pos:end="127:61">length</name></expr></argument>,

                    <argument pos:start="129:21" pos:end="129:32"><expr pos:start="129:21" pos:end="129:32"><name pos:start="129:21" pos:end="129:24"><name pos:start="129:21" pos:end="129:21">h</name><index pos:start="129:22" pos:end="129:24">[<expr pos:start="129:23" pos:end="129:23"><name pos:start="129:23" pos:end="129:23">i</name></expr>]</index></name><operator pos:start="129:25" pos:end="129:25">.</operator><name pos:start="129:26" pos:end="129:32">lengths</name></expr></argument>, <argument pos:start="129:35" pos:end="129:45"><expr pos:start="129:35" pos:end="129:45"><sizeof pos:start="129:35" pos:end="129:45">sizeof<argument_list pos:start="129:41" pos:end="129:45">(<argument pos:start="129:42" pos:end="129:44"><expr pos:start="129:42" pos:end="129:44"><name pos:start="129:42" pos:end="129:44">int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="129:48" pos:end="129:58"><expr pos:start="129:48" pos:end="129:58"><sizeof pos:start="129:48" pos:end="129:58">sizeof<argument_list pos:start="129:54" pos:end="129:58">(<argument pos:start="129:55" pos:end="129:57"><expr pos:start="129:55" pos:end="129:57"><name pos:start="129:55" pos:end="129:57">int</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                    <argument pos:start="131:21" pos:end="131:29"><expr pos:start="131:21" pos:end="131:29"><name pos:start="131:21" pos:end="131:24"><name pos:start="131:21" pos:end="131:21">h</name><index pos:start="131:22" pos:end="131:24">[<expr pos:start="131:23" pos:end="131:23"><name pos:start="131:23" pos:end="131:23">i</name></expr>]</index></name><operator pos:start="131:25" pos:end="131:25">.</operator><name pos:start="131:26" pos:end="131:29">bits</name></expr></argument>, <argument pos:start="131:32" pos:end="131:47"><expr pos:start="131:32" pos:end="131:47"><sizeof pos:start="131:32" pos:end="131:47">sizeof<argument_list pos:start="131:38" pos:end="131:47">(<argument pos:start="131:39" pos:end="131:46"><expr pos:start="131:39" pos:end="131:46"><name pos:start="131:39" pos:end="131:46">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="131:50" pos:end="131:65"><expr pos:start="131:50" pos:end="131:65"><sizeof pos:start="131:50" pos:end="131:65">sizeof<argument_list pos:start="131:56" pos:end="131:65">(<argument pos:start="131:57" pos:end="131:64"><expr pos:start="131:57" pos:end="131:64"><name pos:start="131:57" pos:end="131:64">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="131:68" pos:end="131:78"><expr pos:start="131:68" pos:end="131:78"><name pos:start="131:68" pos:end="131:78">INIT_VLC_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="139:13"><if pos:start="133:13" pos:end="139:13">if<condition pos:start="133:15" pos:end="133:23">(<expr pos:start="133:16" pos:end="133:22"><name pos:start="133:16" pos:end="133:18">res</name> <operator pos:start="133:20" pos:end="133:20">&lt;</operator> <literal type="number" pos:start="133:22" pos:end="133:22">0</literal></expr>)</condition> <block pos:start="133:25" pos:end="139:13">{<block_content pos:start="135:17" pos:end="137:26">

                <expr_stmt pos:start="135:17" pos:end="135:72"><expr pos:start="135:17" pos:end="135:71"><call pos:start="135:17" pos:end="135:71"><name pos:start="135:17" pos:end="135:22">av_log</name><argument_list pos:start="135:23" pos:end="135:71">(<argument pos:start="135:24" pos:end="135:28"><expr pos:start="135:24" pos:end="135:28"><name pos:start="135:24" pos:end="135:28">avctx</name></expr></argument>, <argument pos:start="135:31" pos:end="135:42"><expr pos:start="135:31" pos:end="135:42"><name pos:start="135:31" pos:end="135:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:45" pos:end="135:70"><expr pos:start="135:45" pos:end="135:70"><literal type="string" pos:start="135:45" pos:end="135:70">"Cannot build VLC table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="137:17" pos:end="137:26">return <expr pos:start="137:24" pos:end="137:25"><operator pos:start="137:24" pos:end="137:24">-</operator><literal type="number" pos:start="137:25" pos:end="137:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="145:5" pos:end="145:67">/* this codec relies on wraparound instead of clipping audio */</comment>

    <if_stmt pos:start="147:5" pos:end="259:5"><if pos:start="147:5" pos:end="215:5">if<condition pos:start="147:7" pos:end="147:12">(<expr pos:start="147:8" pos:end="147:11"><name pos:start="147:8" pos:end="147:11">bits</name></expr>)</condition> <block pos:start="147:14" pos:end="215:5">{<block_content pos:start="149:9" pos:end="213:9"> <comment type="line" pos:start="147:16" pos:end="147:35">//decode 16-bit data</comment>

        <for pos:start="149:9" pos:end="151:69">for<control pos:start="149:12" pos:end="149:36">(<init pos:start="149:13" pos:end="149:23"><expr pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:13">i</name> <operator pos:start="149:15" pos:end="149:15">=</operator> <name pos:start="149:17" pos:end="149:22">stereo</name></expr>;</init> <condition pos:start="149:25" pos:end="149:31"><expr pos:start="149:25" pos:end="149:30"><name pos:start="149:25" pos:end="149:25">i</name> <operator pos:start="149:27" pos:end="149:28">&gt;=</operator> <literal type="number" pos:start="149:30" pos:end="149:30">0</literal></expr>;</condition> <incr pos:start="149:33" pos:end="149:35"><expr pos:start="149:33" pos:end="149:35"><name pos:start="149:33" pos:end="149:33">i</name><operator pos:start="149:34" pos:end="149:35">--</operator></expr></incr>)</control><block type="pseudo" pos:start="151:13" pos:end="151:69"><block_content pos:start="151:13" pos:end="151:69">

            <expr_stmt pos:start="151:13" pos:end="151:69"><expr pos:start="151:13" pos:end="151:68"><name pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:16">pred</name><index pos:start="151:17" pos:end="151:19">[<expr pos:start="151:18" pos:end="151:18"><name pos:start="151:18" pos:end="151:18">i</name></expr>]</index></name> <operator pos:start="151:21" pos:end="151:21">=</operator> <call pos:start="151:23" pos:end="151:68"><name pos:start="151:23" pos:end="151:33">sign_extend</name><argument_list pos:start="151:34" pos:end="151:68">(<argument pos:start="151:35" pos:end="151:63"><expr pos:start="151:35" pos:end="151:63"><call pos:start="151:35" pos:end="151:63"><name pos:start="151:35" pos:end="151:44">av_bswap16</name><argument_list pos:start="151:45" pos:end="151:63">(<argument pos:start="151:46" pos:end="151:62"><expr pos:start="151:46" pos:end="151:62"><call pos:start="151:46" pos:end="151:62"><name pos:start="151:46" pos:end="151:53">get_bits</name><argument_list pos:start="151:54" pos:end="151:62">(<argument pos:start="151:55" pos:end="151:57"><expr pos:start="151:55" pos:end="151:57"><operator pos:start="151:55" pos:end="151:55">&amp;</operator><name pos:start="151:56" pos:end="151:57">gb</name></expr></argument>, <argument pos:start="151:60" pos:end="151:61"><expr pos:start="151:60" pos:end="151:61"><literal type="number" pos:start="151:60" pos:end="151:61">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="151:66" pos:end="151:67"><expr pos:start="151:66" pos:end="151:67"><literal type="number" pos:start="151:66" pos:end="151:67">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="153:9" pos:end="155:33">for<control pos:start="153:12" pos:end="153:36">(<init pos:start="153:13" pos:end="153:18"><expr pos:start="153:13" pos:end="153:17"><name pos:start="153:13" pos:end="153:13">i</name> <operator pos:start="153:15" pos:end="153:15">=</operator> <literal type="number" pos:start="153:17" pos:end="153:17">0</literal></expr>;</init> <condition pos:start="153:20" pos:end="153:31"><expr pos:start="153:20" pos:end="153:30"><name pos:start="153:20" pos:end="153:20">i</name> <operator pos:start="153:22" pos:end="153:23">&lt;=</operator> <name pos:start="153:25" pos:end="153:30">stereo</name></expr>;</condition> <incr pos:start="153:33" pos:end="153:35"><expr pos:start="153:33" pos:end="153:35"><name pos:start="153:33" pos:end="153:33">i</name><operator pos:start="153:34" pos:end="153:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="155:13" pos:end="155:33"><block_content pos:start="155:13" pos:end="155:33">

            <expr_stmt pos:start="155:13" pos:end="155:33"><expr pos:start="155:13" pos:end="155:32"><operator pos:start="155:13" pos:end="155:13">*</operator><name pos:start="155:14" pos:end="155:20">samples</name><operator pos:start="155:21" pos:end="155:22">++</operator> <operator pos:start="155:24" pos:end="155:24">=</operator> <name pos:start="155:26" pos:end="155:32"><name pos:start="155:26" pos:end="155:29">pred</name><index pos:start="155:30" pos:end="155:32">[<expr pos:start="155:31" pos:end="155:31"><name pos:start="155:31" pos:end="155:31">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="157:9" pos:end="213:9">for<control pos:start="157:12" pos:end="157:36">(<init pos:start="157:13" pos:end="157:13">;</init> <condition pos:start="157:15" pos:end="157:31"><expr pos:start="157:15" pos:end="157:30"><name pos:start="157:15" pos:end="157:15">i</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <name pos:start="157:19" pos:end="157:26">unp_size</name> <operator pos:start="157:28" pos:end="157:28">/</operator> <literal type="number" pos:start="157:30" pos:end="157:30">2</literal></expr>;</condition> <incr pos:start="157:33" pos:end="157:35"><expr pos:start="157:33" pos:end="157:35"><name pos:start="157:33" pos:end="157:33">i</name><operator pos:start="157:34" pos:end="157:35">++</operator></expr></incr>)</control> <block pos:start="157:38" pos:end="213:9">{<block_content pos:start="159:13" pos:end="211:13">

            <if_stmt pos:start="159:13" pos:end="211:13"><if pos:start="159:13" pos:end="185:13">if<condition pos:start="159:15" pos:end="159:26">(<expr pos:start="159:16" pos:end="159:25"><name pos:start="159:16" pos:end="159:16">i</name> <operator pos:start="159:18" pos:end="159:18">&amp;</operator> <name pos:start="159:20" pos:end="159:25">stereo</name></expr>)</condition> <block pos:start="159:28" pos:end="185:13">{<block_content pos:start="161:17" pos:end="183:37">

                <if_stmt pos:start="161:17" pos:end="167:28"><if pos:start="161:17" pos:end="163:71">if<condition pos:start="161:19" pos:end="161:32">(<expr pos:start="161:20" pos:end="161:31"><name pos:start="161:20" pos:end="161:25"><name pos:start="161:20" pos:end="161:22">vlc</name><index pos:start="161:23" pos:end="161:25">[<expr pos:start="161:24" pos:end="161:24"><literal type="number" pos:start="161:24" pos:end="161:24">2</literal></expr>]</index></name><operator pos:start="161:26" pos:end="161:26">.</operator><name pos:start="161:27" pos:end="161:31">table</name></expr>)</condition><block type="pseudo" pos:start="163:21" pos:end="163:71"><block_content pos:start="163:21" pos:end="163:71">

                    <expr_stmt pos:start="163:21" pos:end="163:71"><expr pos:start="163:21" pos:end="163:70"><name pos:start="163:21" pos:end="163:23">res</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <call pos:start="163:27" pos:end="163:70"><name pos:start="163:27" pos:end="163:34">get_vlc2</name><argument_list pos:start="163:35" pos:end="163:70">(<argument pos:start="163:36" pos:end="163:38"><expr pos:start="163:36" pos:end="163:38"><operator pos:start="163:36" pos:end="163:36">&amp;</operator><name pos:start="163:37" pos:end="163:38">gb</name></expr></argument>, <argument pos:start="163:41" pos:end="163:52"><expr pos:start="163:41" pos:end="163:52"><name pos:start="163:41" pos:end="163:46"><name pos:start="163:41" pos:end="163:43">vlc</name><index pos:start="163:44" pos:end="163:46">[<expr pos:start="163:45" pos:end="163:45"><literal type="number" pos:start="163:45" pos:end="163:45">2</literal></expr>]</index></name><operator pos:start="163:47" pos:end="163:47">.</operator><name pos:start="163:48" pos:end="163:52">table</name></expr></argument>, <argument pos:start="163:55" pos:end="163:66"><expr pos:start="163:55" pos:end="163:66"><name pos:start="163:55" pos:end="163:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="163:69" pos:end="163:69"><expr pos:start="163:69" pos:end="163:69"><literal type="number" pos:start="163:69" pos:end="163:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="165:17" pos:end="167:28">else<block type="pseudo" pos:start="167:21" pos:end="167:28"><block_content pos:start="167:21" pos:end="167:28">

                    <expr_stmt pos:start="167:21" pos:end="167:28"><expr pos:start="167:21" pos:end="167:27"><name pos:start="167:21" pos:end="167:23">res</name> <operator pos:start="167:25" pos:end="167:25">=</operator> <literal type="number" pos:start="167:27" pos:end="167:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:40"><expr pos:start="169:17" pos:end="169:39"><name pos:start="169:17" pos:end="169:19">val</name>  <operator pos:start="169:22" pos:end="169:22">=</operator> <name pos:start="169:24" pos:end="169:27"><name pos:start="169:24" pos:end="169:24">h</name><index pos:start="169:25" pos:end="169:27">[<expr pos:start="169:26" pos:end="169:26"><literal type="number" pos:start="169:26" pos:end="169:26">2</literal></expr>]</index></name><operator pos:start="169:28" pos:end="169:28">.</operator><name pos:start="169:29" pos:end="169:39"><name pos:start="169:29" pos:end="169:34">values</name><index pos:start="169:35" pos:end="169:39">[<expr pos:start="169:36" pos:end="169:38"><name pos:start="169:36" pos:end="169:38">res</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="171:17" pos:end="177:28"><if pos:start="171:17" pos:end="173:71">if<condition pos:start="171:19" pos:end="171:32">(<expr pos:start="171:20" pos:end="171:31"><name pos:start="171:20" pos:end="171:25"><name pos:start="171:20" pos:end="171:22">vlc</name><index pos:start="171:23" pos:end="171:25">[<expr pos:start="171:24" pos:end="171:24"><literal type="number" pos:start="171:24" pos:end="171:24">3</literal></expr>]</index></name><operator pos:start="171:26" pos:end="171:26">.</operator><name pos:start="171:27" pos:end="171:31">table</name></expr>)</condition><block type="pseudo" pos:start="173:21" pos:end="173:71"><block_content pos:start="173:21" pos:end="173:71">

                    <expr_stmt pos:start="173:21" pos:end="173:71"><expr pos:start="173:21" pos:end="173:70"><name pos:start="173:21" pos:end="173:23">res</name> <operator pos:start="173:25" pos:end="173:25">=</operator> <call pos:start="173:27" pos:end="173:70"><name pos:start="173:27" pos:end="173:34">get_vlc2</name><argument_list pos:start="173:35" pos:end="173:70">(<argument pos:start="173:36" pos:end="173:38"><expr pos:start="173:36" pos:end="173:38"><operator pos:start="173:36" pos:end="173:36">&amp;</operator><name pos:start="173:37" pos:end="173:38">gb</name></expr></argument>, <argument pos:start="173:41" pos:end="173:52"><expr pos:start="173:41" pos:end="173:52"><name pos:start="173:41" pos:end="173:46"><name pos:start="173:41" pos:end="173:43">vlc</name><index pos:start="173:44" pos:end="173:46">[<expr pos:start="173:45" pos:end="173:45"><literal type="number" pos:start="173:45" pos:end="173:45">3</literal></expr>]</index></name><operator pos:start="173:47" pos:end="173:47">.</operator><name pos:start="173:48" pos:end="173:52">table</name></expr></argument>, <argument pos:start="173:55" pos:end="173:66"><expr pos:start="173:55" pos:end="173:66"><name pos:start="173:55" pos:end="173:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="173:69" pos:end="173:69"><expr pos:start="173:69" pos:end="173:69"><literal type="number" pos:start="173:69" pos:end="173:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="175:17" pos:end="177:28">else<block type="pseudo" pos:start="177:21" pos:end="177:28"><block_content pos:start="177:21" pos:end="177:28">

                    <expr_stmt pos:start="177:21" pos:end="177:28"><expr pos:start="177:21" pos:end="177:27"><name pos:start="177:21" pos:end="177:23">res</name> <operator pos:start="177:25" pos:end="177:25">=</operator> <literal type="number" pos:start="177:27" pos:end="177:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:45"><expr pos:start="179:17" pos:end="179:44"><name pos:start="179:17" pos:end="179:19">val</name> <operator pos:start="179:21" pos:end="179:22">|=</operator> <name pos:start="179:24" pos:end="179:27"><name pos:start="179:24" pos:end="179:24">h</name><index pos:start="179:25" pos:end="179:27">[<expr pos:start="179:26" pos:end="179:26"><literal type="number" pos:start="179:26" pos:end="179:26">3</literal></expr>]</index></name><operator pos:start="179:28" pos:end="179:28">.</operator><name pos:start="179:29" pos:end="179:39"><name pos:start="179:29" pos:end="179:34">values</name><index pos:start="179:35" pos:end="179:39">[<expr pos:start="179:36" pos:end="179:38"><name pos:start="179:36" pos:end="179:38">res</name></expr>]</index></name> <operator pos:start="179:41" pos:end="179:42">&lt;&lt;</operator> <literal type="number" pos:start="179:44" pos:end="179:44">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:48"><expr pos:start="181:17" pos:end="181:47"><name pos:start="181:17" pos:end="181:23"><name pos:start="181:17" pos:end="181:20">pred</name><index pos:start="181:21" pos:end="181:23">[<expr pos:start="181:22" pos:end="181:22"><literal type="number" pos:start="181:22" pos:end="181:22">1</literal></expr>]</index></name> <operator pos:start="181:25" pos:end="181:26">+=</operator> <call pos:start="181:28" pos:end="181:47"><name pos:start="181:28" pos:end="181:38">sign_extend</name><argument_list pos:start="181:39" pos:end="181:47">(<argument pos:start="181:40" pos:end="181:42"><expr pos:start="181:40" pos:end="181:42"><name pos:start="181:40" pos:end="181:42">val</name></expr></argument>, <argument pos:start="181:45" pos:end="181:46"><expr pos:start="181:45" pos:end="181:46"><literal type="number" pos:start="181:45" pos:end="181:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:37"><expr pos:start="183:17" pos:end="183:36"><operator pos:start="183:17" pos:end="183:17">*</operator><name pos:start="183:18" pos:end="183:24">samples</name><operator pos:start="183:25" pos:end="183:26">++</operator> <operator pos:start="183:28" pos:end="183:28">=</operator> <name pos:start="183:30" pos:end="183:36"><name pos:start="183:30" pos:end="183:33">pred</name><index pos:start="183:34" pos:end="183:36">[<expr pos:start="183:35" pos:end="183:35"><literal type="number" pos:start="183:35" pos:end="183:35">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="185:15" pos:end="211:13">else <block pos:start="185:20" pos:end="211:13">{<block_content pos:start="187:17" pos:end="209:37">

                <if_stmt pos:start="187:17" pos:end="193:28"><if pos:start="187:17" pos:end="189:71">if<condition pos:start="187:19" pos:end="187:32">(<expr pos:start="187:20" pos:end="187:31"><name pos:start="187:20" pos:end="187:25"><name pos:start="187:20" pos:end="187:22">vlc</name><index pos:start="187:23" pos:end="187:25">[<expr pos:start="187:24" pos:end="187:24"><literal type="number" pos:start="187:24" pos:end="187:24">0</literal></expr>]</index></name><operator pos:start="187:26" pos:end="187:26">.</operator><name pos:start="187:27" pos:end="187:31">table</name></expr>)</condition><block type="pseudo" pos:start="189:21" pos:end="189:71"><block_content pos:start="189:21" pos:end="189:71">

                    <expr_stmt pos:start="189:21" pos:end="189:71"><expr pos:start="189:21" pos:end="189:70"><name pos:start="189:21" pos:end="189:23">res</name> <operator pos:start="189:25" pos:end="189:25">=</operator> <call pos:start="189:27" pos:end="189:70"><name pos:start="189:27" pos:end="189:34">get_vlc2</name><argument_list pos:start="189:35" pos:end="189:70">(<argument pos:start="189:36" pos:end="189:38"><expr pos:start="189:36" pos:end="189:38"><operator pos:start="189:36" pos:end="189:36">&amp;</operator><name pos:start="189:37" pos:end="189:38">gb</name></expr></argument>, <argument pos:start="189:41" pos:end="189:52"><expr pos:start="189:41" pos:end="189:52"><name pos:start="189:41" pos:end="189:46"><name pos:start="189:41" pos:end="189:43">vlc</name><index pos:start="189:44" pos:end="189:46">[<expr pos:start="189:45" pos:end="189:45"><literal type="number" pos:start="189:45" pos:end="189:45">0</literal></expr>]</index></name><operator pos:start="189:47" pos:end="189:47">.</operator><name pos:start="189:48" pos:end="189:52">table</name></expr></argument>, <argument pos:start="189:55" pos:end="189:66"><expr pos:start="189:55" pos:end="189:66"><name pos:start="189:55" pos:end="189:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="189:69" pos:end="189:69"><expr pos:start="189:69" pos:end="189:69"><literal type="number" pos:start="189:69" pos:end="189:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="191:17" pos:end="193:28">else<block type="pseudo" pos:start="193:21" pos:end="193:28"><block_content pos:start="193:21" pos:end="193:28">

                    <expr_stmt pos:start="193:21" pos:end="193:28"><expr pos:start="193:21" pos:end="193:27"><name pos:start="193:21" pos:end="193:23">res</name> <operator pos:start="193:25" pos:end="193:25">=</operator> <literal type="number" pos:start="193:27" pos:end="193:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:40"><expr pos:start="195:17" pos:end="195:39"><name pos:start="195:17" pos:end="195:19">val</name>  <operator pos:start="195:22" pos:end="195:22">=</operator> <name pos:start="195:24" pos:end="195:27"><name pos:start="195:24" pos:end="195:24">h</name><index pos:start="195:25" pos:end="195:27">[<expr pos:start="195:26" pos:end="195:26"><literal type="number" pos:start="195:26" pos:end="195:26">0</literal></expr>]</index></name><operator pos:start="195:28" pos:end="195:28">.</operator><name pos:start="195:29" pos:end="195:39"><name pos:start="195:29" pos:end="195:34">values</name><index pos:start="195:35" pos:end="195:39">[<expr pos:start="195:36" pos:end="195:38"><name pos:start="195:36" pos:end="195:38">res</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="197:17" pos:end="203:28"><if pos:start="197:17" pos:end="199:71">if<condition pos:start="197:19" pos:end="197:32">(<expr pos:start="197:20" pos:end="197:31"><name pos:start="197:20" pos:end="197:25"><name pos:start="197:20" pos:end="197:22">vlc</name><index pos:start="197:23" pos:end="197:25">[<expr pos:start="197:24" pos:end="197:24"><literal type="number" pos:start="197:24" pos:end="197:24">1</literal></expr>]</index></name><operator pos:start="197:26" pos:end="197:26">.</operator><name pos:start="197:27" pos:end="197:31">table</name></expr>)</condition><block type="pseudo" pos:start="199:21" pos:end="199:71"><block_content pos:start="199:21" pos:end="199:71">

                    <expr_stmt pos:start="199:21" pos:end="199:71"><expr pos:start="199:21" pos:end="199:70"><name pos:start="199:21" pos:end="199:23">res</name> <operator pos:start="199:25" pos:end="199:25">=</operator> <call pos:start="199:27" pos:end="199:70"><name pos:start="199:27" pos:end="199:34">get_vlc2</name><argument_list pos:start="199:35" pos:end="199:70">(<argument pos:start="199:36" pos:end="199:38"><expr pos:start="199:36" pos:end="199:38"><operator pos:start="199:36" pos:end="199:36">&amp;</operator><name pos:start="199:37" pos:end="199:38">gb</name></expr></argument>, <argument pos:start="199:41" pos:end="199:52"><expr pos:start="199:41" pos:end="199:52"><name pos:start="199:41" pos:end="199:46"><name pos:start="199:41" pos:end="199:43">vlc</name><index pos:start="199:44" pos:end="199:46">[<expr pos:start="199:45" pos:end="199:45"><literal type="number" pos:start="199:45" pos:end="199:45">1</literal></expr>]</index></name><operator pos:start="199:47" pos:end="199:47">.</operator><name pos:start="199:48" pos:end="199:52">table</name></expr></argument>, <argument pos:start="199:55" pos:end="199:66"><expr pos:start="199:55" pos:end="199:66"><name pos:start="199:55" pos:end="199:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="199:69" pos:end="199:69"><expr pos:start="199:69" pos:end="199:69"><literal type="number" pos:start="199:69" pos:end="199:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="201:17" pos:end="203:28">else<block type="pseudo" pos:start="203:21" pos:end="203:28"><block_content pos:start="203:21" pos:end="203:28">

                    <expr_stmt pos:start="203:21" pos:end="203:28"><expr pos:start="203:21" pos:end="203:27"><name pos:start="203:21" pos:end="203:23">res</name> <operator pos:start="203:25" pos:end="203:25">=</operator> <literal type="number" pos:start="203:27" pos:end="203:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:45"><expr pos:start="205:17" pos:end="205:44"><name pos:start="205:17" pos:end="205:19">val</name> <operator pos:start="205:21" pos:end="205:22">|=</operator> <name pos:start="205:24" pos:end="205:27"><name pos:start="205:24" pos:end="205:24">h</name><index pos:start="205:25" pos:end="205:27">[<expr pos:start="205:26" pos:end="205:26"><literal type="number" pos:start="205:26" pos:end="205:26">1</literal></expr>]</index></name><operator pos:start="205:28" pos:end="205:28">.</operator><name pos:start="205:29" pos:end="205:39"><name pos:start="205:29" pos:end="205:34">values</name><index pos:start="205:35" pos:end="205:39">[<expr pos:start="205:36" pos:end="205:38"><name pos:start="205:36" pos:end="205:38">res</name></expr>]</index></name> <operator pos:start="205:41" pos:end="205:42">&lt;&lt;</operator> <literal type="number" pos:start="205:44" pos:end="205:44">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:48"><expr pos:start="207:17" pos:end="207:47"><name pos:start="207:17" pos:end="207:23"><name pos:start="207:17" pos:end="207:20">pred</name><index pos:start="207:21" pos:end="207:23">[<expr pos:start="207:22" pos:end="207:22"><literal type="number" pos:start="207:22" pos:end="207:22">0</literal></expr>]</index></name> <operator pos:start="207:25" pos:end="207:26">+=</operator> <call pos:start="207:28" pos:end="207:47"><name pos:start="207:28" pos:end="207:38">sign_extend</name><argument_list pos:start="207:39" pos:end="207:47">(<argument pos:start="207:40" pos:end="207:42"><expr pos:start="207:40" pos:end="207:42"><name pos:start="207:40" pos:end="207:42">val</name></expr></argument>, <argument pos:start="207:45" pos:end="207:46"><expr pos:start="207:45" pos:end="207:46"><literal type="number" pos:start="207:45" pos:end="207:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:37"><expr pos:start="209:17" pos:end="209:36"><operator pos:start="209:17" pos:end="209:17">*</operator><name pos:start="209:18" pos:end="209:24">samples</name><operator pos:start="209:25" pos:end="209:26">++</operator> <operator pos:start="209:28" pos:end="209:28">=</operator> <name pos:start="209:30" pos:end="209:36"><name pos:start="209:30" pos:end="209:33">pred</name><index pos:start="209:34" pos:end="209:36">[<expr pos:start="209:35" pos:end="209:35"><literal type="number" pos:start="209:35" pos:end="209:35">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="215:7" pos:end="259:5">else <block pos:start="215:12" pos:end="259:5">{<block_content pos:start="217:9" pos:end="257:9"> <comment type="line" pos:start="215:14" pos:end="215:25">//8-bit data</comment>

        <for pos:start="217:9" pos:end="219:39">for<control pos:start="217:12" pos:end="217:36">(<init pos:start="217:13" pos:end="217:23"><expr pos:start="217:13" pos:end="217:22"><name pos:start="217:13" pos:end="217:13">i</name> <operator pos:start="217:15" pos:end="217:15">=</operator> <name pos:start="217:17" pos:end="217:22">stereo</name></expr>;</init> <condition pos:start="217:25" pos:end="217:31"><expr pos:start="217:25" pos:end="217:30"><name pos:start="217:25" pos:end="217:25">i</name> <operator pos:start="217:27" pos:end="217:28">&gt;=</operator> <literal type="number" pos:start="217:30" pos:end="217:30">0</literal></expr>;</condition> <incr pos:start="217:33" pos:end="217:35"><expr pos:start="217:33" pos:end="217:35"><name pos:start="217:33" pos:end="217:33">i</name><operator pos:start="217:34" pos:end="217:35">--</operator></expr></incr>)</control><block type="pseudo" pos:start="219:13" pos:end="219:39"><block_content pos:start="219:13" pos:end="219:39">

            <expr_stmt pos:start="219:13" pos:end="219:39"><expr pos:start="219:13" pos:end="219:38"><name pos:start="219:13" pos:end="219:19"><name pos:start="219:13" pos:end="219:16">pred</name><index pos:start="219:17" pos:end="219:19">[<expr pos:start="219:18" pos:end="219:18"><name pos:start="219:18" pos:end="219:18">i</name></expr>]</index></name> <operator pos:start="219:21" pos:end="219:21">=</operator> <call pos:start="219:23" pos:end="219:38"><name pos:start="219:23" pos:end="219:30">get_bits</name><argument_list pos:start="219:31" pos:end="219:38">(<argument pos:start="219:32" pos:end="219:34"><expr pos:start="219:32" pos:end="219:34"><operator pos:start="219:32" pos:end="219:32">&amp;</operator><name pos:start="219:33" pos:end="219:34">gb</name></expr></argument>, <argument pos:start="219:37" pos:end="219:37"><expr pos:start="219:37" pos:end="219:37"><literal type="number" pos:start="219:37" pos:end="219:37">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="221:9" pos:end="223:34">for<control pos:start="221:12" pos:end="221:36">(<init pos:start="221:13" pos:end="221:18"><expr pos:start="221:13" pos:end="221:17"><name pos:start="221:13" pos:end="221:13">i</name> <operator pos:start="221:15" pos:end="221:15">=</operator> <literal type="number" pos:start="221:17" pos:end="221:17">0</literal></expr>;</init> <condition pos:start="221:20" pos:end="221:31"><expr pos:start="221:20" pos:end="221:30"><name pos:start="221:20" pos:end="221:20">i</name> <operator pos:start="221:22" pos:end="221:23">&lt;=</operator> <name pos:start="221:25" pos:end="221:30">stereo</name></expr>;</condition> <incr pos:start="221:33" pos:end="221:35"><expr pos:start="221:33" pos:end="221:35"><name pos:start="221:33" pos:end="221:33">i</name><operator pos:start="221:34" pos:end="221:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="223:13" pos:end="223:34"><block_content pos:start="223:13" pos:end="223:34">

            <expr_stmt pos:start="223:13" pos:end="223:34"><expr pos:start="223:13" pos:end="223:33"><operator pos:start="223:13" pos:end="223:13">*</operator><name pos:start="223:14" pos:end="223:21">samples8</name><operator pos:start="223:22" pos:end="223:23">++</operator> <operator pos:start="223:25" pos:end="223:25">=</operator> <name pos:start="223:27" pos:end="223:33"><name pos:start="223:27" pos:end="223:30">pred</name><index pos:start="223:31" pos:end="223:33">[<expr pos:start="223:32" pos:end="223:32"><name pos:start="223:32" pos:end="223:32">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="225:9" pos:end="257:9">for<control pos:start="225:12" pos:end="225:32">(<init pos:start="225:13" pos:end="225:13">;</init> <condition pos:start="225:15" pos:end="225:27"><expr pos:start="225:15" pos:end="225:26"><name pos:start="225:15" pos:end="225:15">i</name> <operator pos:start="225:17" pos:end="225:17">&lt;</operator> <name pos:start="225:19" pos:end="225:26">unp_size</name></expr>;</condition> <incr pos:start="225:29" pos:end="225:31"><expr pos:start="225:29" pos:end="225:31"><name pos:start="225:29" pos:end="225:29">i</name><operator pos:start="225:30" pos:end="225:31">++</operator></expr></incr>)</control> <block pos:start="225:34" pos:end="257:9">{<block_content pos:start="227:13" pos:end="255:13">

            <if_stmt pos:start="227:13" pos:end="255:13"><if pos:start="227:13" pos:end="241:13">if<condition pos:start="227:15" pos:end="227:26">(<expr pos:start="227:16" pos:end="227:25"><name pos:start="227:16" pos:end="227:16">i</name> <operator pos:start="227:18" pos:end="227:18">&amp;</operator> <name pos:start="227:20" pos:end="227:25">stereo</name></expr>)</condition><block pos:start="227:27" pos:end="241:13">{<block_content pos:start="229:17" pos:end="239:38">

                <if_stmt pos:start="229:17" pos:end="235:28"><if pos:start="229:17" pos:end="231:71">if<condition pos:start="229:19" pos:end="229:32">(<expr pos:start="229:20" pos:end="229:31"><name pos:start="229:20" pos:end="229:25"><name pos:start="229:20" pos:end="229:22">vlc</name><index pos:start="229:23" pos:end="229:25">[<expr pos:start="229:24" pos:end="229:24"><literal type="number" pos:start="229:24" pos:end="229:24">1</literal></expr>]</index></name><operator pos:start="229:26" pos:end="229:26">.</operator><name pos:start="229:27" pos:end="229:31">table</name></expr>)</condition><block type="pseudo" pos:start="231:21" pos:end="231:71"><block_content pos:start="231:21" pos:end="231:71">

                    <expr_stmt pos:start="231:21" pos:end="231:71"><expr pos:start="231:21" pos:end="231:70"><name pos:start="231:21" pos:end="231:23">res</name> <operator pos:start="231:25" pos:end="231:25">=</operator> <call pos:start="231:27" pos:end="231:70"><name pos:start="231:27" pos:end="231:34">get_vlc2</name><argument_list pos:start="231:35" pos:end="231:70">(<argument pos:start="231:36" pos:end="231:38"><expr pos:start="231:36" pos:end="231:38"><operator pos:start="231:36" pos:end="231:36">&amp;</operator><name pos:start="231:37" pos:end="231:38">gb</name></expr></argument>, <argument pos:start="231:41" pos:end="231:52"><expr pos:start="231:41" pos:end="231:52"><name pos:start="231:41" pos:end="231:46"><name pos:start="231:41" pos:end="231:43">vlc</name><index pos:start="231:44" pos:end="231:46">[<expr pos:start="231:45" pos:end="231:45"><literal type="number" pos:start="231:45" pos:end="231:45">1</literal></expr>]</index></name><operator pos:start="231:47" pos:end="231:47">.</operator><name pos:start="231:48" pos:end="231:52">table</name></expr></argument>, <argument pos:start="231:55" pos:end="231:66"><expr pos:start="231:55" pos:end="231:66"><name pos:start="231:55" pos:end="231:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="231:69" pos:end="231:69"><expr pos:start="231:69" pos:end="231:69"><literal type="number" pos:start="231:69" pos:end="231:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="233:17" pos:end="235:28">else<block type="pseudo" pos:start="235:21" pos:end="235:28"><block_content pos:start="235:21" pos:end="235:28">

                    <expr_stmt pos:start="235:21" pos:end="235:28"><expr pos:start="235:21" pos:end="235:27"><name pos:start="235:21" pos:end="235:23">res</name> <operator pos:start="235:25" pos:end="235:25">=</operator> <literal type="number" pos:start="235:27" pos:end="235:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:60"><expr pos:start="237:17" pos:end="237:59"><name pos:start="237:17" pos:end="237:23"><name pos:start="237:17" pos:end="237:20">pred</name><index pos:start="237:21" pos:end="237:23">[<expr pos:start="237:22" pos:end="237:22"><literal type="number" pos:start="237:22" pos:end="237:22">1</literal></expr>]</index></name> <operator pos:start="237:25" pos:end="237:26">+=</operator> <call pos:start="237:28" pos:end="237:59"><name pos:start="237:28" pos:end="237:38">sign_extend</name><argument_list pos:start="237:39" pos:end="237:59">(<argument pos:start="237:40" pos:end="237:55"><expr pos:start="237:40" pos:end="237:55"><name pos:start="237:40" pos:end="237:43"><name pos:start="237:40" pos:end="237:40">h</name><index pos:start="237:41" pos:end="237:43">[<expr pos:start="237:42" pos:end="237:42"><literal type="number" pos:start="237:42" pos:end="237:42">1</literal></expr>]</index></name><operator pos:start="237:44" pos:end="237:44">.</operator><name pos:start="237:45" pos:end="237:55"><name pos:start="237:45" pos:end="237:50">values</name><index pos:start="237:51" pos:end="237:55">[<expr pos:start="237:52" pos:end="237:54"><name pos:start="237:52" pos:end="237:54">res</name></expr>]</index></name></expr></argument>, <argument pos:start="237:58" pos:end="237:58"><expr pos:start="237:58" pos:end="237:58"><literal type="number" pos:start="237:58" pos:end="237:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:38"><expr pos:start="239:17" pos:end="239:37"><operator pos:start="239:17" pos:end="239:17">*</operator><name pos:start="239:18" pos:end="239:25">samples8</name><operator pos:start="239:26" pos:end="239:27">++</operator> <operator pos:start="239:29" pos:end="239:29">=</operator> <name pos:start="239:31" pos:end="239:37"><name pos:start="239:31" pos:end="239:34">pred</name><index pos:start="239:35" pos:end="239:37">[<expr pos:start="239:36" pos:end="239:36"><literal type="number" pos:start="239:36" pos:end="239:36">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="241:15" pos:end="255:13">else <block pos:start="241:20" pos:end="255:13">{<block_content pos:start="243:17" pos:end="253:38">

                <if_stmt pos:start="243:17" pos:end="249:28"><if pos:start="243:17" pos:end="245:71">if<condition pos:start="243:19" pos:end="243:32">(<expr pos:start="243:20" pos:end="243:31"><name pos:start="243:20" pos:end="243:25"><name pos:start="243:20" pos:end="243:22">vlc</name><index pos:start="243:23" pos:end="243:25">[<expr pos:start="243:24" pos:end="243:24"><literal type="number" pos:start="243:24" pos:end="243:24">0</literal></expr>]</index></name><operator pos:start="243:26" pos:end="243:26">.</operator><name pos:start="243:27" pos:end="243:31">table</name></expr>)</condition><block type="pseudo" pos:start="245:21" pos:end="245:71"><block_content pos:start="245:21" pos:end="245:71">

                    <expr_stmt pos:start="245:21" pos:end="245:71"><expr pos:start="245:21" pos:end="245:70"><name pos:start="245:21" pos:end="245:23">res</name> <operator pos:start="245:25" pos:end="245:25">=</operator> <call pos:start="245:27" pos:end="245:70"><name pos:start="245:27" pos:end="245:34">get_vlc2</name><argument_list pos:start="245:35" pos:end="245:70">(<argument pos:start="245:36" pos:end="245:38"><expr pos:start="245:36" pos:end="245:38"><operator pos:start="245:36" pos:end="245:36">&amp;</operator><name pos:start="245:37" pos:end="245:38">gb</name></expr></argument>, <argument pos:start="245:41" pos:end="245:52"><expr pos:start="245:41" pos:end="245:52"><name pos:start="245:41" pos:end="245:46"><name pos:start="245:41" pos:end="245:43">vlc</name><index pos:start="245:44" pos:end="245:46">[<expr pos:start="245:45" pos:end="245:45"><literal type="number" pos:start="245:45" pos:end="245:45">0</literal></expr>]</index></name><operator pos:start="245:47" pos:end="245:47">.</operator><name pos:start="245:48" pos:end="245:52">table</name></expr></argument>, <argument pos:start="245:55" pos:end="245:66"><expr pos:start="245:55" pos:end="245:66"><name pos:start="245:55" pos:end="245:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="245:69" pos:end="245:69"><expr pos:start="245:69" pos:end="245:69"><literal type="number" pos:start="245:69" pos:end="245:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="247:17" pos:end="249:28">else<block type="pseudo" pos:start="249:21" pos:end="249:28"><block_content pos:start="249:21" pos:end="249:28">

                    <expr_stmt pos:start="249:21" pos:end="249:28"><expr pos:start="249:21" pos:end="249:27"><name pos:start="249:21" pos:end="249:23">res</name> <operator pos:start="249:25" pos:end="249:25">=</operator> <literal type="number" pos:start="249:27" pos:end="249:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:60"><expr pos:start="251:17" pos:end="251:59"><name pos:start="251:17" pos:end="251:23"><name pos:start="251:17" pos:end="251:20">pred</name><index pos:start="251:21" pos:end="251:23">[<expr pos:start="251:22" pos:end="251:22"><literal type="number" pos:start="251:22" pos:end="251:22">0</literal></expr>]</index></name> <operator pos:start="251:25" pos:end="251:26">+=</operator> <call pos:start="251:28" pos:end="251:59"><name pos:start="251:28" pos:end="251:38">sign_extend</name><argument_list pos:start="251:39" pos:end="251:59">(<argument pos:start="251:40" pos:end="251:55"><expr pos:start="251:40" pos:end="251:55"><name pos:start="251:40" pos:end="251:43"><name pos:start="251:40" pos:end="251:40">h</name><index pos:start="251:41" pos:end="251:43">[<expr pos:start="251:42" pos:end="251:42"><literal type="number" pos:start="251:42" pos:end="251:42">0</literal></expr>]</index></name><operator pos:start="251:44" pos:end="251:44">.</operator><name pos:start="251:45" pos:end="251:55"><name pos:start="251:45" pos:end="251:50">values</name><index pos:start="251:51" pos:end="251:55">[<expr pos:start="251:52" pos:end="251:54"><name pos:start="251:52" pos:end="251:54">res</name></expr>]</index></name></expr></argument>, <argument pos:start="251:58" pos:end="251:58"><expr pos:start="251:58" pos:end="251:58"><literal type="number" pos:start="251:58" pos:end="251:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:38"><expr pos:start="253:17" pos:end="253:37"><operator pos:start="253:17" pos:end="253:17">*</operator><name pos:start="253:18" pos:end="253:25">samples8</name><operator pos:start="253:26" pos:end="253:27">++</operator> <operator pos:start="253:29" pos:end="253:29">=</operator> <name pos:start="253:31" pos:end="253:37"><name pos:start="253:31" pos:end="253:34">pred</name><index pos:start="253:35" pos:end="253:37">[<expr pos:start="253:36" pos:end="253:36"><literal type="number" pos:start="253:36" pos:end="253:36">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <for pos:start="263:5" pos:end="275:5">for<control pos:start="263:8" pos:end="263:26">(<init pos:start="263:9" pos:end="263:14"><expr pos:start="263:9" pos:end="263:13"><name pos:start="263:9" pos:end="263:9">i</name> <operator pos:start="263:11" pos:end="263:11">=</operator> <literal type="number" pos:start="263:13" pos:end="263:13">0</literal></expr>;</init> <condition pos:start="263:16" pos:end="263:21"><expr pos:start="263:16" pos:end="263:20"><name pos:start="263:16" pos:end="263:16">i</name> <operator pos:start="263:18" pos:end="263:18">&lt;</operator> <literal type="number" pos:start="263:20" pos:end="263:20">4</literal></expr>;</condition> <incr pos:start="263:23" pos:end="263:25"><expr pos:start="263:23" pos:end="263:25"><name pos:start="263:23" pos:end="263:23">i</name><operator pos:start="263:24" pos:end="263:25">++</operator></expr></incr>)</control> <block pos:start="263:28" pos:end="275:5">{<block_content pos:start="265:9" pos:end="273:29">

        <if_stmt pos:start="265:9" pos:end="267:33"><if pos:start="265:9" pos:end="267:33">if<condition pos:start="265:11" pos:end="265:24">(<expr pos:start="265:12" pos:end="265:23"><name pos:start="265:12" pos:end="265:17"><name pos:start="265:12" pos:end="265:14">vlc</name><index pos:start="265:15" pos:end="265:17">[<expr pos:start="265:16" pos:end="265:16"><name pos:start="265:16" pos:end="265:16">i</name></expr>]</index></name><operator pos:start="265:18" pos:end="265:18">.</operator><name pos:start="265:19" pos:end="265:23">table</name></expr>)</condition><block type="pseudo" pos:start="267:13" pos:end="267:33"><block_content pos:start="267:13" pos:end="267:33">

            <expr_stmt pos:start="267:13" pos:end="267:33"><expr pos:start="267:13" pos:end="267:32"><call pos:start="267:13" pos:end="267:32"><name pos:start="267:13" pos:end="267:23">ff_free_vlc</name><argument_list pos:start="267:24" pos:end="267:32">(<argument pos:start="267:25" pos:end="267:31"><expr pos:start="267:25" pos:end="267:31"><operator pos:start="267:25" pos:end="267:25">&amp;</operator><name pos:start="267:26" pos:end="267:31"><name pos:start="267:26" pos:end="267:28">vlc</name><index pos:start="267:29" pos:end="267:31">[<expr pos:start="267:30" pos:end="267:30"><name pos:start="267:30" pos:end="267:30">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:27"><expr pos:start="269:9" pos:end="269:26"><call pos:start="269:9" pos:end="269:26"><name pos:start="269:9" pos:end="269:15">av_free</name><argument_list pos:start="269:16" pos:end="269:26">(<argument pos:start="269:17" pos:end="269:25"><expr pos:start="269:17" pos:end="269:25"><name pos:start="269:17" pos:end="269:20"><name pos:start="269:17" pos:end="269:17">h</name><index pos:start="269:18" pos:end="269:20">[<expr pos:start="269:19" pos:end="269:19"><name pos:start="269:19" pos:end="269:19">i</name></expr>]</index></name><operator pos:start="269:21" pos:end="269:21">.</operator><name pos:start="269:22" pos:end="269:25">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:30"><expr pos:start="271:9" pos:end="271:29"><call pos:start="271:9" pos:end="271:29"><name pos:start="271:9" pos:end="271:15">av_free</name><argument_list pos:start="271:16" pos:end="271:29">(<argument pos:start="271:17" pos:end="271:28"><expr pos:start="271:17" pos:end="271:28"><name pos:start="271:17" pos:end="271:20"><name pos:start="271:17" pos:end="271:17">h</name><index pos:start="271:18" pos:end="271:20">[<expr pos:start="271:19" pos:end="271:19"><name pos:start="271:19" pos:end="271:19">i</name></expr>]</index></name><operator pos:start="271:21" pos:end="271:21">.</operator><name pos:start="271:22" pos:end="271:28">lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:29"><expr pos:start="273:9" pos:end="273:28"><call pos:start="273:9" pos:end="273:28"><name pos:start="273:9" pos:end="273:15">av_free</name><argument_list pos:start="273:16" pos:end="273:28">(<argument pos:start="273:17" pos:end="273:27"><expr pos:start="273:17" pos:end="273:27"><name pos:start="273:17" pos:end="273:20"><name pos:start="273:17" pos:end="273:17">h</name><index pos:start="273:18" pos:end="273:20">[<expr pos:start="273:19" pos:end="273:19"><name pos:start="273:19" pos:end="273:19">i</name></expr>]</index></name><operator pos:start="273:21" pos:end="273:21">.</operator><name pos:start="273:22" pos:end="273:27">values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="279:5" pos:end="279:23"><expr pos:start="279:5" pos:end="279:22"><operator pos:start="279:5" pos:end="279:5">*</operator><name pos:start="279:6" pos:end="279:18">got_frame_ptr</name> <operator pos:start="279:20" pos:end="279:20">=</operator> <literal type="number" pos:start="279:22" pos:end="279:22">1</literal></expr>;</expr_stmt>



    <return pos:start="283:5" pos:end="283:20">return <expr pos:start="283:12" pos:end="283:19"><name pos:start="283:12" pos:end="283:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
