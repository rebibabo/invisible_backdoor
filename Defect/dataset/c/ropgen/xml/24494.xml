<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24494.c" pos:tabs="8"><function pos:start="1:1" pos:end="451:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">ppc_prep_init</name> <parameter_list pos:start="1:27" pos:end="11:49">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:37">ram_addr_t</name></type> <name pos:start="1:39" pos:end="1:46">ram_size</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:50"><decl pos:start="3:28" pos:end="3:50"><type pos:start="3:28" pos:end="3:50"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:37">char</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:50">boot_device</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:54"><decl pos:start="5:28" pos:end="5:54"><type pos:start="5:28" pos:end="5:54"><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:37">char</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:54">kernel_filename</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:53"><decl pos:start="7:28" pos:end="7:53"><type pos:start="7:28" pos:end="7:53"><specifier pos:start="7:28" pos:end="7:32">const</specifier> <name pos:start="7:34" pos:end="7:37">char</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:53">kernel_cmdline</name></decl></parameter>,

                           <parameter pos:start="9:28" pos:end="9:54"><decl pos:start="9:28" pos:end="9:54"><type pos:start="9:28" pos:end="9:54"><specifier pos:start="9:28" pos:end="9:32">const</specifier> <name pos:start="9:34" pos:end="9:37">char</name> <modifier pos:start="9:39" pos:end="9:39">*</modifier></type><name pos:start="9:40" pos:end="9:54">initrd_filename</name></decl></parameter>,

                           <parameter pos:start="11:28" pos:end="11:48"><decl pos:start="11:28" pos:end="11:48"><type pos:start="11:28" pos:end="11:48"><specifier pos:start="11:28" pos:end="11:32">const</specifier> <name pos:start="11:34" pos:end="11:37">char</name> <modifier pos:start="11:39" pos:end="11:39">*</modifier></type><name pos:start="11:40" pos:end="11:48">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="451:1">{<block_content pos:start="15:5" pos:end="449:64">

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>, <decl pos:start="15:27" pos:end="15:41"><type ref="prev" pos:start="15:5" pos:end="15:14"><modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:41"><name pos:start="15:28" pos:end="15:31">envs</name><index pos:start="15:32" pos:end="15:41">[<expr pos:start="15:33" pos:end="15:40"><name pos:start="15:33" pos:end="15:40">MAX_CPUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">nvram_t</name></type> <name pos:start="19:13" pos:end="19:17">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">m48t59_t</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:20">m48t59</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:21">PPC_io_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:43"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">linux_boot</name></decl>, <decl pos:start="25:21" pos:end="25:21"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:21" pos:end="25:21">i</name></decl>, <decl pos:start="25:24" pos:end="25:31"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:24" pos:end="25:31">nb_nics1</name></decl>, <decl pos:start="25:34" pos:end="25:42"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:34" pos:end="25:42">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:39"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:14">ram_addr_t</name></type> <name pos:start="27:16" pos:end="27:25">ram_offset</name></decl>, <decl pos:start="27:28" pos:end="27:38"><type ref="prev" pos:start="27:5" pos:end="27:14"/><name pos:start="27:28" pos:end="27:38">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:64"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:24">kernel_base</name></decl>, <decl pos:start="29:27" pos:end="29:37"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:27" pos:end="29:37">kernel_size</name></decl>, <decl pos:start="29:40" pos:end="29:50"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:40" pos:end="29:50">initrd_base</name></decl>, <decl pos:start="29:53" pos:end="29:63"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:53" pos:end="29:63">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:10">PCIBus</name> <modifier pos:start="31:12" pos:end="31:12">*</modifier></type><name pos:start="31:13" pos:end="31:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:23">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:46"><decl pos:start="37:5" pos:end="37:45"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">DriveInfo</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:45"><name pos:start="37:16" pos:end="37:17">hd</name><index pos:start="37:18" pos:end="37:45">[<expr pos:start="37:19" pos:end="37:44"><name pos:start="37:19" pos:end="37:29">MAX_IDE_BUS</name> <operator pos:start="37:31" pos:end="37:31">*</operator> <name pos:start="37:33" pos:end="37:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:26"><decl pos:start="39:5" pos:end="39:25"><type pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">DriveInfo</name> <modifier pos:start="39:15" pos:end="39:15">*</modifier></type><name pos:start="39:16" pos:end="39:25"><name pos:start="39:16" pos:end="39:17">fd</name><index pos:start="39:18" pos:end="39:25">[<expr pos:start="39:19" pos:end="39:24"><name pos:start="39:19" pos:end="39:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:11">sysctrl</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:45"><name pos:start="43:15" pos:end="43:26">qemu_mallocz</name><argument_list pos:start="43:27" pos:end="43:45">(<argument pos:start="43:28" pos:end="43:44"><expr pos:start="43:28" pos:end="43:44"><sizeof pos:start="43:28" pos:end="43:44">sizeof<argument_list pos:start="43:34" pos:end="43:44">(<argument pos:start="43:35" pos:end="43:43"><expr pos:start="43:35" pos:end="43:43"><name pos:start="43:35" pos:end="43:43">sysctrl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:14">linux_boot</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:33">kernel_filename</name> <operator pos:start="47:35" pos:end="47:36">!=</operator> <name pos:start="47:38" pos:end="47:41">NULL</name><operator pos:start="47:42" pos:end="47:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:19">/* init CPUs */</comment>

    <if_stmt pos:start="53:5" pos:end="55:26"><if pos:start="53:5" pos:end="55:26">if <condition pos:start="53:8" pos:end="53:26">(<expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:17">cpu_model</name> <operator pos:start="53:19" pos:end="53:20">==</operator> <name pos:start="53:22" pos:end="53:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:26"><block_content pos:start="55:9" pos:end="55:26">

        <expr_stmt pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:17">cpu_model</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="string" pos:start="55:21" pos:end="55:25">"602"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="57:5" pos:end="87:5">for <control pos:start="57:9" pos:end="57:34">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:29"><expr pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:28">smp_cpus</name></expr>;</condition> <incr pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:31">i</name><operator pos:start="57:32" pos:end="57:33">++</operator></expr></incr>)</control> <block pos:start="57:36" pos:end="87:5">{<block_content pos:start="59:9" pos:end="85:22">

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:11">env</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:33"><name pos:start="59:15" pos:end="59:22">cpu_init</name><argument_list pos:start="59:23" pos:end="59:33">(<argument pos:start="59:24" pos:end="59:32"><expr pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:17">(<expr pos:start="61:13" pos:end="61:16"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:16">env</name></expr>)</condition> <block pos:start="61:19" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:20">

            <expr_stmt pos:start="63:13" pos:end="63:71"><expr pos:start="63:13" pos:end="63:70"><call pos:start="63:13" pos:end="63:70"><name pos:start="63:13" pos:end="63:19">fprintf</name><argument_list pos:start="63:20" pos:end="63:70">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">stderr</name></expr></argument>, <argument pos:start="63:29" pos:end="63:69"><expr pos:start="63:29" pos:end="63:69"><literal type="string" pos:start="63:29" pos:end="63:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:20"><expr pos:start="65:13" pos:end="65:19"><call pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:16">exit</name><argument_list pos:start="65:17" pos:end="65:19">(<argument pos:start="65:18" pos:end="65:18"><expr pos:start="65:18" pos:end="65:18"><literal type="number" pos:start="65:18" pos:end="65:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="81:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:46">(<expr pos:start="69:13" pos:end="69:45"><name pos:start="69:13" pos:end="69:22"><name pos:start="69:13" pos:end="69:15">env</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:22">flags</name></name> <operator pos:start="69:24" pos:end="69:24">&amp;</operator> <name pos:start="69:26" pos:end="69:45">POWERPC_FLAG_RTC_CLK</name></expr>)</condition> <block pos:start="69:48" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:44">

            <comment type="block" pos:start="71:13" pos:end="71:71">/* POWER / PowerPC 601 RTC clock frequency is 7.8125 MHz */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:44"><expr pos:start="73:13" pos:end="73:43"><call pos:start="73:13" pos:end="73:43"><name pos:start="73:13" pos:end="73:27">cpu_ppc_tb_init</name><argument_list pos:start="73:28" pos:end="73:43">(<argument pos:start="73:29" pos:end="73:31"><expr pos:start="73:29" pos:end="73:31"><name pos:start="73:29" pos:end="73:31">env</name></expr></argument>, <argument pos:start="73:34" pos:end="73:42"><expr pos:start="73:34" pos:end="73:42"><literal type="number" pos:start="73:34" pos:end="73:42">7812500UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="81:9">else <block pos:start="75:16" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:58">

            <comment type="block" pos:start="77:13" pos:end="77:52">/* Set time-base frequency to 100 Mhz */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:58"><expr pos:start="79:13" pos:end="79:57"><call pos:start="79:13" pos:end="79:57"><name pos:start="79:13" pos:end="79:27">cpu_ppc_tb_init</name><argument_list pos:start="79:28" pos:end="79:57">(<argument pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:31">env</name></expr></argument>, <argument pos:start="79:34" pos:end="79:56"><expr pos:start="79:34" pos:end="79:56"><literal type="number" pos:start="79:34" pos:end="79:38">100UL</literal> <operator pos:start="79:40" pos:end="79:40">*</operator> <literal type="number" pos:start="79:42" pos:end="79:47">1000UL</literal> <operator pos:start="79:49" pos:end="79:49">*</operator> <literal type="number" pos:start="79:51" pos:end="79:56">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:49"><expr pos:start="83:9" pos:end="83:48"><call pos:start="83:9" pos:end="83:48"><name pos:start="83:9" pos:end="83:27">qemu_register_reset</name><argument_list pos:start="83:28" pos:end="83:48">(<argument pos:start="83:29" pos:end="83:42"><expr pos:start="83:29" pos:end="83:42"><operator pos:start="83:29" pos:end="83:29">&amp;</operator><name pos:start="83:30" pos:end="83:42">cpu_ppc_reset</name></expr></argument>, <argument pos:start="83:45" pos:end="83:47"><expr pos:start="83:45" pos:end="83:47"><name pos:start="83:45" pos:end="83:47">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:12">envs</name><index pos:start="85:13" pos:end="85:15">[<expr pos:start="85:14" pos:end="85:14"><name pos:start="85:14" pos:end="85:14">i</name></expr>]</index></name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:21">env</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="91:5" pos:end="91:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:42"><expr pos:start="93:5" pos:end="93:41"><name pos:start="93:5" pos:end="93:14">ram_offset</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <call pos:start="93:18" pos:end="93:41"><name pos:start="93:18" pos:end="93:31">qemu_ram_alloc</name><argument_list pos:start="93:32" pos:end="93:41">(<argument pos:start="93:33" pos:end="93:40"><expr pos:start="93:33" pos:end="93:40"><name pos:start="93:33" pos:end="93:40">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:58"><expr pos:start="95:5" pos:end="95:57"><call pos:start="95:5" pos:end="95:57"><name pos:start="95:5" pos:end="95:32">cpu_register_physical_memory</name><argument_list pos:start="95:33" pos:end="95:57">(<argument pos:start="95:34" pos:end="95:34"><expr pos:start="95:34" pos:end="95:34"><literal type="number" pos:start="95:34" pos:end="95:34">0</literal></expr></argument>, <argument pos:start="95:37" pos:end="95:44"><expr pos:start="95:37" pos:end="95:44"><name pos:start="95:37" pos:end="95:44">ram_size</name></expr></argument>, <argument pos:start="95:47" pos:end="95:56"><expr pos:start="95:47" pos:end="95:56"><name pos:start="95:47" pos:end="95:56">ram_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:44"><expr pos:start="101:5" pos:end="101:43"><name pos:start="101:5" pos:end="101:15">bios_offset</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:43"><name pos:start="101:19" pos:end="101:32">qemu_ram_alloc</name><argument_list pos:start="101:33" pos:end="101:43">(<argument pos:start="101:34" pos:end="101:42"><expr pos:start="101:34" pos:end="101:42"><name pos:start="101:34" pos:end="101:42">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="105:34"><if pos:start="103:5" pos:end="105:34">if <condition pos:start="103:8" pos:end="103:26">(<expr pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:17">bios_name</name> <operator pos:start="103:19" pos:end="103:20">==</operator> <name pos:start="103:22" pos:end="103:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:34"><block_content pos:start="105:9" pos:end="105:34">

        <expr_stmt pos:start="105:9" pos:end="105:34"><expr pos:start="105:9" pos:end="105:33"><name pos:start="105:9" pos:end="105:17">bios_name</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:62"><expr pos:start="107:5" pos:end="107:61"><name pos:start="107:5" pos:end="107:12">filename</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <call pos:start="107:16" pos:end="107:61"><name pos:start="107:16" pos:end="107:29">qemu_find_file</name><argument_list pos:start="107:30" pos:end="107:61">(<argument pos:start="107:31" pos:end="107:49"><expr pos:start="107:31" pos:end="107:49"><name pos:start="107:31" pos:end="107:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="107:52" pos:end="107:60"><expr pos:start="107:52" pos:end="107:60"><name pos:start="107:52" pos:end="107:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:17">(<expr pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:16">filename</name></expr>)</condition> <block pos:start="109:19" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:45">

        <expr_stmt pos:start="111:9" pos:end="111:45"><expr pos:start="111:9" pos:end="111:44"><name pos:start="111:9" pos:end="111:17">bios_size</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="111:44"><name pos:start="111:21" pos:end="111:34">get_image_size</name><argument_list pos:start="111:35" pos:end="111:44">(<argument pos:start="111:36" pos:end="111:43"><expr pos:start="111:36" pos:end="111:43"><name pos:start="111:36" pos:end="111:43">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="117:5">else <block pos:start="113:12" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:23">

        <expr_stmt pos:start="115:9" pos:end="115:23"><expr pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:17">bios_size</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <operator pos:start="115:21" pos:end="115:21">-</operator><literal type="number" pos:start="115:22" pos:end="115:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="119:5" pos:end="133:5"><if pos:start="119:5" pos:end="133:5">if <condition pos:start="119:8" pos:end="119:48">(<expr pos:start="119:9" pos:end="119:47"><name pos:start="119:9" pos:end="119:17">bios_size</name> <operator pos:start="119:19" pos:end="119:19">&gt;</operator> <literal type="number" pos:start="119:21" pos:end="119:21">0</literal> <operator pos:start="119:23" pos:end="119:24">&amp;&amp;</operator> <name pos:start="119:26" pos:end="119:34">bios_size</name> <operator pos:start="119:36" pos:end="119:37">&lt;=</operator> <name pos:start="119:39" pos:end="119:47">BIOS_SIZE</name></expr>)</condition> <block pos:start="119:50" pos:end="133:5">{<block_content pos:start="121:9" pos:end="131:72">

        <decl_stmt pos:start="121:9" pos:end="121:37"><decl pos:start="121:9" pos:end="121:36"><type pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:26">target_phys_addr_t</name></type> <name pos:start="121:28" pos:end="121:36">bios_addr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:49"><expr pos:start="123:9" pos:end="123:48"><name pos:start="123:9" pos:end="123:17">bios_size</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <operator pos:start="123:21" pos:end="123:21">(</operator><name pos:start="123:22" pos:end="123:30">bios_size</name> <operator pos:start="123:32" pos:end="123:32">+</operator> <literal type="number" pos:start="123:34" pos:end="123:38">0xfff</literal><operator pos:start="123:39" pos:end="123:39">)</operator> <operator pos:start="123:41" pos:end="123:41">&amp;</operator> <operator pos:start="123:43" pos:end="123:43">~</operator><literal type="number" pos:start="123:44" pos:end="123:48">0xfff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:43"><expr pos:start="125:9" pos:end="125:42"><name pos:start="125:9" pos:end="125:17">bios_addr</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <operator pos:start="125:21" pos:end="125:21">(</operator><name pos:start="125:22" pos:end="125:29">uint32_t</name><operator pos:start="125:30" pos:end="125:30">)</operator><operator pos:start="125:31" pos:end="125:31">(</operator><operator pos:start="125:32" pos:end="125:32">-</operator><name pos:start="125:33" pos:end="125:41">bios_size</name><operator pos:start="125:42" pos:end="125:42">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="129:63"><expr pos:start="127:9" pos:end="129:62"><call pos:start="127:9" pos:end="129:62"><name pos:start="127:9" pos:end="127:36">cpu_register_physical_memory</name><argument_list pos:start="127:37" pos:end="129:62">(<argument pos:start="127:38" pos:end="127:46"><expr pos:start="127:38" pos:end="127:46"><name pos:start="127:38" pos:end="127:46">bios_addr</name></expr></argument>, <argument pos:start="127:49" pos:end="127:57"><expr pos:start="127:49" pos:end="127:57"><name pos:start="127:49" pos:end="127:57">bios_size</name></expr></argument>,

                                     <argument pos:start="129:38" pos:end="129:61"><expr pos:start="129:38" pos:end="129:61"><name pos:start="129:38" pos:end="129:48">bios_offset</name> <operator pos:start="129:50" pos:end="129:50">|</operator> <name pos:start="129:52" pos:end="129:61">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:72"><expr pos:start="131:9" pos:end="131:71"><name pos:start="131:9" pos:end="131:17">bios_size</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <call pos:start="131:21" pos:end="131:71"><name pos:start="131:21" pos:end="131:39">load_image_targphys</name><argument_list pos:start="131:40" pos:end="131:71">(<argument pos:start="131:41" pos:end="131:48"><expr pos:start="131:41" pos:end="131:48"><name pos:start="131:41" pos:end="131:48">filename</name></expr></argument>, <argument pos:start="131:51" pos:end="131:59"><expr pos:start="131:51" pos:end="131:59"><name pos:start="131:51" pos:end="131:59">bios_addr</name></expr></argument>, <argument pos:start="131:62" pos:end="131:70"><expr pos:start="131:62" pos:end="131:70"><name pos:start="131:62" pos:end="131:70">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="139:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:47">(<expr pos:start="135:9" pos:end="135:46"><name pos:start="135:9" pos:end="135:36"><name pos:start="135:9" pos:end="135:17">bios_size</name> <argument_list type="generic" pos:start="135:19" pos:end="135:36">&lt; <argument pos:start="135:21" pos:end="135:34"><expr pos:start="135:21" pos:end="135:34"><literal type="number" pos:start="135:21" pos:end="135:21">0</literal> <operator pos:start="135:23" pos:end="135:24">||</operator> <name pos:start="135:26" pos:end="135:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="135:38" pos:end="135:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="135:49" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:73">

        <expr_stmt pos:start="137:9" pos:end="137:73"><expr pos:start="137:9" pos:end="137:72"><call pos:start="137:9" pos:end="137:72"><name pos:start="137:9" pos:end="137:16">hw_error</name><argument_list pos:start="137:17" pos:end="137:72">(<argument pos:start="137:18" pos:end="137:60"><expr pos:start="137:18" pos:end="137:60"><literal type="string" pos:start="137:18" pos:end="137:60">"qemu: could not load PPC PREP bios '%s'\n"</literal></expr></argument>, <argument pos:start="137:63" pos:end="137:71"><expr pos:start="137:63" pos:end="137:71"><name pos:start="137:63" pos:end="137:71">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="141:5" pos:end="145:5"><if pos:start="141:5" pos:end="145:5">if <condition pos:start="141:8" pos:end="141:17">(<expr pos:start="141:9" pos:end="141:16"><name pos:start="141:9" pos:end="141:16">filename</name></expr>)</condition> <block pos:start="141:19" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:28">

        <expr_stmt pos:start="143:9" pos:end="143:28"><expr pos:start="143:9" pos:end="143:27"><call pos:start="143:9" pos:end="143:27"><name pos:start="143:9" pos:end="143:17">qemu_free</name><argument_list pos:start="143:18" pos:end="143:27">(<argument pos:start="143:19" pos:end="143:26"><expr pos:start="143:19" pos:end="143:26"><name pos:start="143:19" pos:end="143:26">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:56">(<expr pos:start="147:9" pos:end="147:55"><name pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:11">env</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:16">nip</name></name> <operator pos:start="147:18" pos:end="147:18">&lt;</operator> <literal type="number" pos:start="147:20" pos:end="147:29">0xFFF80000</literal> <operator pos:start="147:31" pos:end="147:32">&amp;&amp;</operator> <name pos:start="147:34" pos:end="147:42">bios_size</name> <operator pos:start="147:44" pos:end="147:44">&lt;</operator> <literal type="number" pos:start="147:46" pos:end="147:55">0x00100000</literal></expr>)</condition> <block pos:start="147:58" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:62">

        <expr_stmt pos:start="149:9" pos:end="149:62"><expr pos:start="149:9" pos:end="149:61"><call pos:start="149:9" pos:end="149:61"><name pos:start="149:9" pos:end="149:16">hw_error</name><argument_list pos:start="149:17" pos:end="149:61">(<argument pos:start="149:18" pos:end="149:60"><expr pos:start="149:18" pos:end="149:60"><literal type="string" pos:start="149:18" pos:end="149:60">"PowerPC 601 / 620 / 970 need a 1MB BIOS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="155:5" pos:end="235:5"><if pos:start="155:5" pos:end="201:5">if <condition pos:start="155:8" pos:end="155:19">(<expr pos:start="155:9" pos:end="155:18"><name pos:start="155:9" pos:end="155:18">linux_boot</name></expr>)</condition> <block pos:start="155:21" pos:end="201:5">{<block_content pos:start="157:9" pos:end="199:30">

        <expr_stmt pos:start="157:9" pos:end="157:39"><expr pos:start="157:9" pos:end="157:38"><name pos:start="157:9" pos:end="157:19">kernel_base</name> <operator pos:start="157:21" pos:end="157:21">=</operator> <name pos:start="157:23" pos:end="157:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="159:9" pos:end="159:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="161:9" pos:end="163:66"><expr pos:start="161:9" pos:end="163:65"><name pos:start="161:9" pos:end="161:19">kernel_size</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <call pos:start="161:23" pos:end="163:65"><name pos:start="161:23" pos:end="161:41">load_image_targphys</name><argument_list pos:start="161:42" pos:end="163:65">(<argument pos:start="161:43" pos:end="161:57"><expr pos:start="161:43" pos:end="161:57"><name pos:start="161:43" pos:end="161:57">kernel_filename</name></expr></argument>, <argument pos:start="161:60" pos:end="161:70"><expr pos:start="161:60" pos:end="161:70"><name pos:start="161:60" pos:end="161:70">kernel_base</name></expr></argument>,

                                          <argument pos:start="163:43" pos:end="163:64"><expr pos:start="163:43" pos:end="163:64"><name pos:start="163:43" pos:end="163:50">ram_size</name> <operator pos:start="163:52" pos:end="163:52">-</operator> <name pos:start="163:54" pos:end="163:64">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="171:9"><if pos:start="165:9" pos:end="171:9">if <condition pos:start="165:12" pos:end="165:28">(<expr pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:23">kernel_size</name> <operator pos:start="165:25" pos:end="165:25">&lt;</operator> <literal type="number" pos:start="165:27" pos:end="165:27">0</literal></expr>)</condition> <block pos:start="165:30" pos:end="171:9">{<block_content pos:start="167:13" pos:end="169:20">

            <expr_stmt pos:start="167:13" pos:end="167:76"><expr pos:start="167:13" pos:end="167:75"><call pos:start="167:13" pos:end="167:75"><name pos:start="167:13" pos:end="167:20">hw_error</name><argument_list pos:start="167:21" pos:end="167:75">(<argument pos:start="167:22" pos:end="167:57"><expr pos:start="167:22" pos:end="167:57"><literal type="string" pos:start="167:22" pos:end="167:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="167:60" pos:end="167:74"><expr pos:start="167:60" pos:end="167:74"><name pos:start="167:60" pos:end="167:74">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:20"><expr pos:start="169:13" pos:end="169:19"><call pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:16">exit</name><argument_list pos:start="169:17" pos:end="169:19">(<argument pos:start="169:18" pos:end="169:18"><expr pos:start="169:18" pos:end="169:18"><literal type="number" pos:start="169:18" pos:end="169:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="173:9" pos:end="173:25">/* load initrd */</comment>

        <if_stmt pos:start="175:9" pos:end="197:9"><if pos:start="175:9" pos:end="191:9">if <condition pos:start="175:12" pos:end="175:28">(<expr pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:27">initrd_filename</name></expr>)</condition> <block pos:start="175:30" pos:end="191:9">{<block_content pos:start="177:13" pos:end="189:13">

            <expr_stmt pos:start="177:13" pos:end="177:43"><expr pos:start="177:13" pos:end="177:42"><name pos:start="177:13" pos:end="177:23">initrd_base</name> <operator pos:start="177:25" pos:end="177:25">=</operator> <name pos:start="177:27" pos:end="177:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="181:70"><expr pos:start="179:13" pos:end="181:69"><name pos:start="179:13" pos:end="179:23">initrd_size</name> <operator pos:start="179:25" pos:end="179:25">=</operator> <call pos:start="179:27" pos:end="181:69"><name pos:start="179:27" pos:end="179:45">load_image_targphys</name><argument_list pos:start="179:46" pos:end="181:69">(<argument pos:start="179:47" pos:end="179:61"><expr pos:start="179:47" pos:end="179:61"><name pos:start="179:47" pos:end="179:61">initrd_filename</name></expr></argument>, <argument pos:start="179:64" pos:end="179:74"><expr pos:start="179:64" pos:end="179:74"><name pos:start="179:64" pos:end="179:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="181:47" pos:end="181:68"><expr pos:start="181:47" pos:end="181:68"><name pos:start="181:47" pos:end="181:54">ram_size</name> <operator pos:start="181:56" pos:end="181:56">-</operator> <name pos:start="181:58" pos:end="181:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="183:13" pos:end="189:13"><if pos:start="183:13" pos:end="189:13">if <condition pos:start="183:16" pos:end="183:32">(<expr pos:start="183:17" pos:end="183:31"><name pos:start="183:17" pos:end="183:27">initrd_size</name> <operator pos:start="183:29" pos:end="183:29">&lt;</operator> <literal type="number" pos:start="183:31" pos:end="183:31">0</literal></expr>)</condition> <block pos:start="183:34" pos:end="189:13">{<block_content pos:start="185:17" pos:end="187:43">

                <expr_stmt pos:start="185:17" pos:end="187:43"><expr pos:start="185:17" pos:end="187:42"><call pos:start="185:17" pos:end="187:42"><name pos:start="185:17" pos:end="185:24">hw_error</name><argument_list pos:start="185:25" pos:end="187:42">(<argument pos:start="185:26" pos:end="185:71"><expr pos:start="185:26" pos:end="185:71"><literal type="string" pos:start="185:26" pos:end="185:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                          <argument pos:start="187:27" pos:end="187:41"><expr pos:start="187:27" pos:end="187:41"><name pos:start="187:27" pos:end="187:41">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="191:11" pos:end="197:9">else <block pos:start="191:16" pos:end="197:9">{<block_content pos:start="193:13" pos:end="195:28">

            <expr_stmt pos:start="193:13" pos:end="193:28"><expr pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:23">initrd_base</name> <operator pos:start="193:25" pos:end="193:25">=</operator> <literal type="number" pos:start="193:27" pos:end="193:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:28"><expr pos:start="195:13" pos:end="195:27"><name pos:start="195:13" pos:end="195:23">initrd_size</name> <operator pos:start="195:25" pos:end="195:25">=</operator> <literal type="number" pos:start="195:27" pos:end="195:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:30"><expr pos:start="199:9" pos:end="199:29"><name pos:start="199:9" pos:end="199:23">ppc_boot_device</name> <operator pos:start="199:25" pos:end="199:25">=</operator> <literal type="char" pos:start="199:27" pos:end="199:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="201:7" pos:end="235:5">else <block pos:start="201:12" pos:end="235:5">{<block_content pos:start="203:9" pos:end="233:9">

        <expr_stmt pos:start="203:9" pos:end="203:24"><expr pos:start="203:9" pos:end="203:23"><name pos:start="203:9" pos:end="203:19">kernel_base</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <literal type="number" pos:start="203:23" pos:end="203:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:24"><expr pos:start="205:9" pos:end="205:23"><name pos:start="205:9" pos:end="205:19">kernel_size</name> <operator pos:start="205:21" pos:end="205:21">=</operator> <literal type="number" pos:start="205:23" pos:end="205:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:24"><expr pos:start="207:9" pos:end="207:23"><name pos:start="207:9" pos:end="207:19">initrd_base</name> <operator pos:start="207:21" pos:end="207:21">=</operator> <literal type="number" pos:start="207:23" pos:end="207:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:24"><expr pos:start="209:9" pos:end="209:23"><name pos:start="209:9" pos:end="209:19">initrd_size</name> <operator pos:start="209:21" pos:end="209:21">=</operator> <literal type="number" pos:start="209:23" pos:end="209:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:31"><expr pos:start="211:9" pos:end="211:30"><name pos:start="211:9" pos:end="211:23">ppc_boot_device</name> <operator pos:start="211:25" pos:end="211:25">=</operator> <literal type="char" pos:start="211:27" pos:end="211:30">'\0'</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="213:9" pos:end="213:56">/* For now, OHW cannot boot from the network. */</comment>

        <for pos:start="215:9" pos:end="225:9">for <control pos:start="215:13" pos:end="215:48">(<init pos:start="215:14" pos:end="215:19"><expr pos:start="215:14" pos:end="215:18"><name pos:start="215:14" pos:end="215:14">i</name> <operator pos:start="215:16" pos:end="215:16">=</operator> <literal type="number" pos:start="215:18" pos:end="215:18">0</literal></expr>;</init> <condition pos:start="215:21" pos:end="215:43"><expr pos:start="215:21" pos:end="215:42"><name pos:start="215:21" pos:end="215:34"><name pos:start="215:21" pos:end="215:31">boot_device</name><index pos:start="215:32" pos:end="215:34">[<expr pos:start="215:33" pos:end="215:33"><name pos:start="215:33" pos:end="215:33">i</name></expr>]</index></name> <operator pos:start="215:36" pos:end="215:37">!=</operator> <literal type="char" pos:start="215:39" pos:end="215:42">'\0'</literal></expr>;</condition> <incr pos:start="215:45" pos:end="215:47"><expr pos:start="215:45" pos:end="215:47"><name pos:start="215:45" pos:end="215:45">i</name><operator pos:start="215:46" pos:end="215:47">++</operator></expr></incr>)</control> <block pos:start="215:50" pos:end="225:9">{<block_content pos:start="217:13" pos:end="223:13">

            <if_stmt pos:start="217:13" pos:end="223:13"><if pos:start="217:13" pos:end="223:13">if <condition pos:start="217:16" pos:end="217:63">(<expr pos:start="217:17" pos:end="217:62"><name pos:start="217:17" pos:end="217:30"><name pos:start="217:17" pos:end="217:27">boot_device</name><index pos:start="217:28" pos:end="217:30">[<expr pos:start="217:29" pos:end="217:29"><name pos:start="217:29" pos:end="217:29">i</name></expr>]</index></name> <operator pos:start="217:32" pos:end="217:33">&gt;=</operator> <literal type="char" pos:start="217:35" pos:end="217:37">'a'</literal> <operator pos:start="217:39" pos:end="217:40">&amp;&amp;</operator> <name pos:start="217:42" pos:end="217:55"><name pos:start="217:42" pos:end="217:52">boot_device</name><index pos:start="217:53" pos:end="217:55">[<expr pos:start="217:54" pos:end="217:54"><name pos:start="217:54" pos:end="217:54">i</name></expr>]</index></name> <operator pos:start="217:57" pos:end="217:58">&lt;=</operator> <literal type="char" pos:start="217:60" pos:end="217:62">'f'</literal></expr>)</condition> <block pos:start="217:65" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:22">

                <expr_stmt pos:start="219:17" pos:end="219:49"><expr pos:start="219:17" pos:end="219:48"><name pos:start="219:17" pos:end="219:31">ppc_boot_device</name> <operator pos:start="219:33" pos:end="219:33">=</operator> <name pos:start="219:35" pos:end="219:48"><name pos:start="219:35" pos:end="219:45">boot_device</name><index pos:start="219:46" pos:end="219:48">[<expr pos:start="219:47" pos:end="219:47"><name pos:start="219:47" pos:end="219:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="221:17" pos:end="221:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="227:9" pos:end="233:9"><if pos:start="227:9" pos:end="233:9">if <condition pos:start="227:12" pos:end="227:36">(<expr pos:start="227:13" pos:end="227:35"><name pos:start="227:13" pos:end="227:27">ppc_boot_device</name> <operator pos:start="227:29" pos:end="227:30">==</operator> <literal type="char" pos:start="227:32" pos:end="227:35">'\0'</literal></expr>)</condition> <block pos:start="227:38" pos:end="233:9">{<block_content pos:start="229:13" pos:end="231:20">

            <expr_stmt pos:start="229:13" pos:end="229:72"><expr pos:start="229:13" pos:end="229:71"><call pos:start="229:13" pos:end="229:71"><name pos:start="229:13" pos:end="229:19">fprintf</name><argument_list pos:start="229:20" pos:end="229:71">(<argument pos:start="229:21" pos:end="229:26"><expr pos:start="229:21" pos:end="229:26"><name pos:start="229:21" pos:end="229:26">stderr</name></expr></argument>, <argument pos:start="229:29" pos:end="229:70"><expr pos:start="229:29" pos:end="229:70"><literal type="string" pos:start="229:29" pos:end="229:70">"No valid boot device for Mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:20"><expr pos:start="231:13" pos:end="231:19"><call pos:start="231:13" pos:end="231:19"><name pos:start="231:13" pos:end="231:16">exit</name><argument_list pos:start="231:17" pos:end="231:19">(<argument pos:start="231:18" pos:end="231:18"><expr pos:start="231:18" pos:end="231:18"><literal type="number" pos:start="231:18" pos:end="231:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:30"><expr pos:start="239:5" pos:end="239:29"><name pos:start="239:5" pos:end="239:16">isa_mem_base</name> <operator pos:start="239:18" pos:end="239:18">=</operator> <literal type="number" pos:start="239:20" pos:end="239:29">0xc0000000</literal></expr>;</expr_stmt>

    <if_stmt pos:start="241:5" pos:end="245:5"><if pos:start="241:5" pos:end="245:5">if <condition pos:start="241:8" pos:end="241:46">(<expr pos:start="241:9" pos:end="241:45"><call pos:start="241:9" pos:end="241:22"><name pos:start="241:9" pos:end="241:17">PPC_INPUT</name><argument_list pos:start="241:18" pos:end="241:22">(<argument pos:start="241:19" pos:end="241:21"><expr pos:start="241:19" pos:end="241:21"><name pos:start="241:19" pos:end="241:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="241:24" pos:end="241:25">!=</operator> <name pos:start="241:27" pos:end="241:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="241:48" pos:end="245:5">{<block_content pos:start="243:9" pos:end="243:64">

        <expr_stmt pos:start="243:9" pos:end="243:64"><expr pos:start="243:9" pos:end="243:63"><call pos:start="243:9" pos:end="243:63"><name pos:start="243:9" pos:end="243:16">hw_error</name><argument_list pos:start="243:17" pos:end="243:63">(<argument pos:start="243:18" pos:end="243:62"><expr pos:start="243:18" pos:end="243:62"><literal type="string" pos:start="243:18" pos:end="243:62">"Only 6xx bus is supported on PREP machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:64"><expr pos:start="247:5" pos:end="247:63"><name pos:start="247:5" pos:end="247:9">i8259</name> <operator pos:start="247:11" pos:end="247:11">=</operator> <call pos:start="247:13" pos:end="247:63"><name pos:start="247:13" pos:end="247:22">i8259_init</name><argument_list pos:start="247:23" pos:end="247:63">(<argument pos:start="247:24" pos:end="247:62"><expr pos:start="247:24" pos:end="247:62"><name pos:start="247:24" pos:end="247:62"><name pos:start="247:24" pos:end="247:32">first_cpu</name><operator pos:start="247:33" pos:end="247:34">-&gt;</operator><name pos:start="247:35" pos:end="247:44">irq_inputs</name><index pos:start="247:45" pos:end="247:62">[<expr pos:start="247:46" pos:end="247:61"><name pos:start="247:46" pos:end="247:61">PPC6xx_INPUT_INT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:35"><expr pos:start="249:5" pos:end="249:34"><name pos:start="249:5" pos:end="249:11">pci_bus</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <call pos:start="249:15" pos:end="249:34"><name pos:start="249:15" pos:end="249:27">pci_prep_init</name><argument_list pos:start="249:28" pos:end="249:34">(<argument pos:start="249:29" pos:end="249:33"><expr pos:start="249:29" pos:end="249:33"><name pos:start="249:29" pos:end="249:33">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="251:5" pos:end="251:45">/* Hmm, prep has no pci-isa bridge ??? */</comment>

    <expr_stmt pos:start="253:5" pos:end="253:22"><expr pos:start="253:5" pos:end="253:21"><call pos:start="253:5" pos:end="253:21"><name pos:start="253:5" pos:end="253:15">isa_bus_new</name><argument_list pos:start="253:16" pos:end="253:21">(<argument pos:start="253:17" pos:end="253:20"><expr pos:start="253:17" pos:end="253:20"><name pos:start="253:17" pos:end="253:20">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:24"><expr pos:start="255:5" pos:end="255:23"><call pos:start="255:5" pos:end="255:23"><name pos:start="255:5" pos:end="255:16">isa_bus_irqs</name><argument_list pos:start="255:17" pos:end="255:23">(<argument pos:start="255:18" pos:end="255:22"><expr pos:start="255:18" pos:end="255:22"><name pos:start="255:18" pos:end="255:22">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="257:5" pos:end="257:34">//    pci_bus = i440fx_init();</comment>

    <comment type="block" pos:start="259:5" pos:end="259:71">/* Register 8 MB of ISA IO space (needed for non-contiguous map) */</comment>

    <expr_stmt pos:start="261:5" pos:end="263:71"><expr pos:start="261:5" pos:end="263:70"><name pos:start="261:5" pos:end="261:17">PPC_io_memory</name> <operator pos:start="261:19" pos:end="261:19">=</operator> <call pos:start="261:21" pos:end="263:70"><name pos:start="261:21" pos:end="261:42">cpu_register_io_memory</name><argument_list pos:start="261:43" pos:end="263:70">(<argument pos:start="261:44" pos:end="261:59"><expr pos:start="261:44" pos:end="261:59"><name pos:start="261:44" pos:end="261:59">PPC_prep_io_read</name></expr></argument>,

                                           <argument pos:start="263:44" pos:end="263:60"><expr pos:start="263:44" pos:end="263:60"><name pos:start="263:44" pos:end="263:60">PPC_prep_io_write</name></expr></argument>, <argument pos:start="263:63" pos:end="263:69"><expr pos:start="263:63" pos:end="263:69"><name pos:start="263:63" pos:end="263:69">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:72"><expr pos:start="265:5" pos:end="265:71"><call pos:start="265:5" pos:end="265:71"><name pos:start="265:5" pos:end="265:32">cpu_register_physical_memory</name><argument_list pos:start="265:33" pos:end="265:71">(<argument pos:start="265:34" pos:end="265:43"><expr pos:start="265:34" pos:end="265:43"><literal type="number" pos:start="265:34" pos:end="265:43">0x80000000</literal></expr></argument>, <argument pos:start="265:46" pos:end="265:55"><expr pos:start="265:46" pos:end="265:55"><literal type="number" pos:start="265:46" pos:end="265:55">0x00800000</literal></expr></argument>, <argument pos:start="265:58" pos:end="265:70"><expr pos:start="265:58" pos:end="265:70"><name pos:start="265:58" pos:end="265:70">PPC_io_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="269:5" pos:end="269:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="271:5" pos:end="271:32"><expr pos:start="271:5" pos:end="271:31"><call pos:start="271:5" pos:end="271:31"><name pos:start="271:5" pos:end="271:16">pci_vga_init</name><argument_list pos:start="271:17" pos:end="271:31">(<argument pos:start="271:18" pos:end="271:24"><expr pos:start="271:18" pos:end="271:24"><name pos:start="271:18" pos:end="271:24">pci_bus</name></expr></argument>, <argument pos:start="271:27" pos:end="271:27"><expr pos:start="271:27" pos:end="271:27"><literal type="number" pos:start="271:27" pos:end="271:27">0</literal></expr></argument>, <argument pos:start="271:30" pos:end="271:30"><expr pos:start="271:30" pos:end="271:30"><literal type="number" pos:start="271:30" pos:end="271:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="273:5" pos:end="273:60">//    openpic = openpic_init(0x00000000, 0xF0000000, 1);</comment>

    <comment type="line" pos:start="275:5" pos:end="275:41">//    pit = pit_init(0x40, i8259[0]);</comment>

    <expr_stmt pos:start="277:5" pos:end="277:19"><expr pos:start="277:5" pos:end="277:18"><call pos:start="277:5" pos:end="277:18"><name pos:start="277:5" pos:end="277:12">rtc_init</name><argument_list pos:start="277:13" pos:end="277:18">(<argument pos:start="277:14" pos:end="277:17"><expr pos:start="277:14" pos:end="277:17"><literal type="number" pos:start="277:14" pos:end="277:17">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="281:5" pos:end="283:42"><if pos:start="281:5" pos:end="283:42">if <condition pos:start="281:8" pos:end="281:22">(<expr pos:start="281:9" pos:end="281:21"><name pos:start="281:9" pos:end="281:21"><name pos:start="281:9" pos:end="281:18">serial_hds</name><index pos:start="281:19" pos:end="281:21">[<expr pos:start="281:20" pos:end="281:20"><literal type="number" pos:start="281:20" pos:end="281:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="283:9" pos:end="283:42"><block_content pos:start="283:9" pos:end="283:42">

        <expr_stmt pos:start="283:9" pos:end="283:42"><expr pos:start="283:9" pos:end="283:41"><call pos:start="283:9" pos:end="283:41"><name pos:start="283:9" pos:end="283:23">serial_isa_init</name><argument_list pos:start="283:24" pos:end="283:41">(<argument pos:start="283:25" pos:end="283:25"><expr pos:start="283:25" pos:end="283:25"><literal type="number" pos:start="283:25" pos:end="283:25">0</literal></expr></argument>, <argument pos:start="283:28" pos:end="283:40"><expr pos:start="283:28" pos:end="283:40"><name pos:start="283:28" pos:end="283:40"><name pos:start="283:28" pos:end="283:37">serial_hds</name><index pos:start="283:38" pos:end="283:40">[<expr pos:start="283:39" pos:end="283:39"><literal type="number" pos:start="283:39" pos:end="283:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:23"><expr pos:start="285:5" pos:end="285:22"><name pos:start="285:5" pos:end="285:12">nb_nics1</name> <operator pos:start="285:14" pos:end="285:14">=</operator> <name pos:start="285:16" pos:end="285:22">nb_nics</name></expr>;</expr_stmt>

    <if_stmt pos:start="287:5" pos:end="289:33"><if pos:start="287:5" pos:end="289:33">if <condition pos:start="287:8" pos:end="287:33">(<expr pos:start="287:9" pos:end="287:32"><name pos:start="287:9" pos:end="287:16">nb_nics1</name> <operator pos:start="287:18" pos:end="287:18">&gt;</operator> <name pos:start="287:20" pos:end="287:32">NE2000_NB_MAX</name></expr>)</condition><block type="pseudo" pos:start="289:9" pos:end="289:33"><block_content pos:start="289:9" pos:end="289:33">

        <expr_stmt pos:start="289:9" pos:end="289:33"><expr pos:start="289:9" pos:end="289:32"><name pos:start="289:9" pos:end="289:16">nb_nics1</name> <operator pos:start="289:18" pos:end="289:18">=</operator> <name pos:start="289:20" pos:end="289:32">NE2000_NB_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="291:5" pos:end="309:5">for<control pos:start="291:8" pos:end="291:33">(<init pos:start="291:9" pos:end="291:14"><expr pos:start="291:9" pos:end="291:13"><name pos:start="291:9" pos:end="291:9">i</name> <operator pos:start="291:11" pos:end="291:11">=</operator> <literal type="number" pos:start="291:13" pos:end="291:13">0</literal></expr>;</init> <condition pos:start="291:16" pos:end="291:28"><expr pos:start="291:16" pos:end="291:27"><name pos:start="291:16" pos:end="291:16">i</name> <operator pos:start="291:18" pos:end="291:18">&lt;</operator> <name pos:start="291:20" pos:end="291:27">nb_nics1</name></expr>;</condition> <incr pos:start="291:30" pos:end="291:32"><expr pos:start="291:30" pos:end="291:32"><name pos:start="291:30" pos:end="291:30">i</name><operator pos:start="291:31" pos:end="291:32">++</operator></expr></incr>)</control> <block pos:start="291:35" pos:end="309:5">{<block_content pos:start="293:9" pos:end="307:9">

        <if_stmt pos:start="293:9" pos:end="297:9"><if pos:start="293:9" pos:end="297:9">if <condition pos:start="293:12" pos:end="293:38">(<expr pos:start="293:13" pos:end="293:37"><name pos:start="293:13" pos:end="293:23"><name pos:start="293:13" pos:end="293:20">nd_table</name><index pos:start="293:21" pos:end="293:23">[<expr pos:start="293:22" pos:end="293:22"><name pos:start="293:22" pos:end="293:22">i</name></expr>]</index></name><operator pos:start="293:24" pos:end="293:24">.</operator><name pos:start="293:25" pos:end="293:29">model</name> <operator pos:start="293:31" pos:end="293:32">==</operator> <name pos:start="293:34" pos:end="293:37">NULL</name></expr>)</condition> <block pos:start="293:40" pos:end="297:9">{<block_content pos:start="295:13" pos:end="295:43">

	    <expr_stmt pos:start="295:13" pos:end="295:43"><expr pos:start="295:13" pos:end="295:42"><name pos:start="295:13" pos:end="295:23"><name pos:start="295:13" pos:end="295:20">nd_table</name><index pos:start="295:21" pos:end="295:23">[<expr pos:start="295:22" pos:end="295:22"><name pos:start="295:22" pos:end="295:22">i</name></expr>]</index></name><operator pos:start="295:24" pos:end="295:24">.</operator><name pos:start="295:25" pos:end="295:29">model</name> <operator pos:start="295:31" pos:end="295:31">=</operator> <literal type="string" pos:start="295:33" pos:end="295:42">"ne2k_isa"</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="299:9" pos:end="307:9"><if pos:start="299:9" pos:end="303:9">if <condition pos:start="299:12" pos:end="299:55">(<expr pos:start="299:13" pos:end="299:54"><call pos:start="299:13" pos:end="299:49"><name pos:start="299:13" pos:end="299:18">strcmp</name><argument_list pos:start="299:19" pos:end="299:49">(<argument pos:start="299:20" pos:end="299:36"><expr pos:start="299:20" pos:end="299:36"><name pos:start="299:20" pos:end="299:30"><name pos:start="299:20" pos:end="299:27">nd_table</name><index pos:start="299:28" pos:end="299:30">[<expr pos:start="299:29" pos:end="299:29"><name pos:start="299:29" pos:end="299:29">i</name></expr>]</index></name><operator pos:start="299:31" pos:end="299:31">.</operator><name pos:start="299:32" pos:end="299:36">model</name></expr></argument>, <argument pos:start="299:39" pos:end="299:48"><expr pos:start="299:39" pos:end="299:48"><literal type="string" pos:start="299:39" pos:end="299:48">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="299:51" pos:end="299:52">==</operator> <literal type="number" pos:start="299:54" pos:end="299:54">0</literal></expr>)</condition> <block pos:start="299:57" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:71">

            <expr_stmt pos:start="301:13" pos:end="301:71"><expr pos:start="301:13" pos:end="301:70"><call pos:start="301:13" pos:end="301:70"><name pos:start="301:13" pos:end="301:27">isa_ne2000_init</name><argument_list pos:start="301:28" pos:end="301:70">(<argument pos:start="301:29" pos:end="301:40"><expr pos:start="301:29" pos:end="301:40"><name pos:start="301:29" pos:end="301:40"><name pos:start="301:29" pos:end="301:37">ne2000_io</name><index pos:start="301:38" pos:end="301:40">[<expr pos:start="301:39" pos:end="301:39"><name pos:start="301:39" pos:end="301:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="301:43" pos:end="301:55"><expr pos:start="301:43" pos:end="301:55"><name pos:start="301:43" pos:end="301:55"><name pos:start="301:43" pos:end="301:52">ne2000_irq</name><index pos:start="301:53" pos:end="301:55">[<expr pos:start="301:54" pos:end="301:54"><name pos:start="301:54" pos:end="301:54">i</name></expr>]</index></name></expr></argument>, <argument pos:start="301:58" pos:end="301:69"><expr pos:start="301:58" pos:end="301:69"><operator pos:start="301:58" pos:end="301:58">&amp;</operator><name pos:start="301:59" pos:end="301:69"><name pos:start="301:59" pos:end="301:66">nd_table</name><index pos:start="301:67" pos:end="301:69">[<expr pos:start="301:68" pos:end="301:68"><name pos:start="301:68" pos:end="301:68">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="303:11" pos:end="307:9">else <block pos:start="303:16" pos:end="307:9">{<block_content pos:start="305:13" pos:end="305:57">

            <expr_stmt pos:start="305:13" pos:end="305:57"><expr pos:start="305:13" pos:end="305:56"><call pos:start="305:13" pos:end="305:56"><name pos:start="305:13" pos:end="305:24">pci_nic_init</name><argument_list pos:start="305:25" pos:end="305:56">(<argument pos:start="305:26" pos:end="305:37"><expr pos:start="305:26" pos:end="305:37"><operator pos:start="305:26" pos:end="305:26">&amp;</operator><name pos:start="305:27" pos:end="305:37"><name pos:start="305:27" pos:end="305:34">nd_table</name><index pos:start="305:35" pos:end="305:37">[<expr pos:start="305:36" pos:end="305:36"><name pos:start="305:36" pos:end="305:36">i</name></expr>]</index></name></expr></argument>, <argument pos:start="305:40" pos:end="305:49"><expr pos:start="305:40" pos:end="305:49"><literal type="string" pos:start="305:40" pos:end="305:49">"ne2k_pci"</literal></expr></argument>, <argument pos:start="305:52" pos:end="305:55"><expr pos:start="305:52" pos:end="305:55"><name pos:start="305:52" pos:end="305:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="313:5" pos:end="319:5"><if pos:start="313:5" pos:end="319:5">if <condition pos:start="313:8" pos:end="313:49">(<expr pos:start="313:9" pos:end="313:48"><call pos:start="313:9" pos:end="313:33"><name pos:start="313:9" pos:end="313:25">drive_get_max_bus</name><argument_list pos:start="313:26" pos:end="313:33">(<argument pos:start="313:27" pos:end="313:32"><expr pos:start="313:27" pos:end="313:32"><name pos:start="313:27" pos:end="313:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="313:35" pos:end="313:36">&gt;=</operator> <name pos:start="313:38" pos:end="313:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="313:51" pos:end="319:5">{<block_content pos:start="315:9" pos:end="317:16">

        <expr_stmt pos:start="315:9" pos:end="315:52"><expr pos:start="315:9" pos:end="315:51"><call pos:start="315:9" pos:end="315:51"><name pos:start="315:9" pos:end="315:15">fprintf</name><argument_list pos:start="315:16" pos:end="315:51">(<argument pos:start="315:17" pos:end="315:22"><expr pos:start="315:17" pos:end="315:22"><name pos:start="315:17" pos:end="315:22">stderr</name></expr></argument>, <argument pos:start="315:25" pos:end="315:50"><expr pos:start="315:25" pos:end="315:50"><literal type="string" pos:start="315:25" pos:end="315:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:16"><expr pos:start="317:9" pos:end="317:15"><call pos:start="317:9" pos:end="317:15"><name pos:start="317:9" pos:end="317:12">exit</name><argument_list pos:start="317:13" pos:end="317:15">(<argument pos:start="317:14" pos:end="317:14"><expr pos:start="317:14" pos:end="317:14"><literal type="number" pos:start="317:14" pos:end="317:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="323:5" pos:end="327:5">for<control pos:start="323:8" pos:end="323:51">(<init pos:start="323:9" pos:end="323:14"><expr pos:start="323:9" pos:end="323:13"><name pos:start="323:9" pos:end="323:9">i</name> <operator pos:start="323:11" pos:end="323:11">=</operator> <literal type="number" pos:start="323:13" pos:end="323:13">0</literal></expr>;</init> <condition pos:start="323:16" pos:end="323:46"><expr pos:start="323:16" pos:end="323:45"><name pos:start="323:16" pos:end="323:16">i</name> <operator pos:start="323:18" pos:end="323:18">&lt;</operator> <name pos:start="323:20" pos:end="323:30">MAX_IDE_BUS</name> <operator pos:start="323:32" pos:end="323:32">*</operator> <name pos:start="323:34" pos:end="323:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="323:48" pos:end="323:50"><expr pos:start="323:48" pos:end="323:50"><name pos:start="323:48" pos:end="323:48">i</name><operator pos:start="323:49" pos:end="323:50">++</operator></expr></incr>)</control> <block pos:start="323:53" pos:end="327:5">{<block_content pos:start="325:9" pos:end="325:70">

        <expr_stmt pos:start="325:9" pos:end="325:70"><expr pos:start="325:9" pos:end="325:69"><name pos:start="325:9" pos:end="325:13"><name pos:start="325:9" pos:end="325:10">hd</name><index pos:start="325:11" pos:end="325:13">[<expr pos:start="325:12" pos:end="325:12"><name pos:start="325:12" pos:end="325:12">i</name></expr>]</index></name> <operator pos:start="325:15" pos:end="325:15">=</operator> <call pos:start="325:17" pos:end="325:69"><name pos:start="325:17" pos:end="325:25">drive_get</name><argument_list pos:start="325:26" pos:end="325:69">(<argument pos:start="325:27" pos:end="325:32"><expr pos:start="325:27" pos:end="325:32"><name pos:start="325:27" pos:end="325:32">IF_IDE</name></expr></argument>, <argument pos:start="325:35" pos:end="325:50"><expr pos:start="325:35" pos:end="325:50"><name pos:start="325:35" pos:end="325:35">i</name> <operator pos:start="325:37" pos:end="325:37">/</operator> <name pos:start="325:39" pos:end="325:50">MAX_IDE_DEVS</name></expr></argument>, <argument pos:start="325:53" pos:end="325:68"><expr pos:start="325:53" pos:end="325:68"><name pos:start="325:53" pos:end="325:53">i</name> <operator pos:start="325:55" pos:end="325:55">%</operator> <name pos:start="325:57" pos:end="325:68">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="331:5" pos:end="339:5">for<control pos:start="331:8" pos:end="331:36">(<init pos:start="331:9" pos:end="331:14"><expr pos:start="331:9" pos:end="331:13"><name pos:start="331:9" pos:end="331:9">i</name> <operator pos:start="331:11" pos:end="331:11">=</operator> <literal type="number" pos:start="331:13" pos:end="331:13">0</literal></expr>;</init> <condition pos:start="331:16" pos:end="331:31"><expr pos:start="331:16" pos:end="331:30"><name pos:start="331:16" pos:end="331:16">i</name> <operator pos:start="331:18" pos:end="331:18">&lt;</operator> <name pos:start="331:20" pos:end="331:30">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="331:33" pos:end="331:35"><expr pos:start="331:33" pos:end="331:35"><name pos:start="331:33" pos:end="331:33">i</name><operator pos:start="331:34" pos:end="331:35">++</operator></expr></incr>)</control> <block pos:start="331:38" pos:end="339:5">{<block_content pos:start="333:9" pos:end="337:36">

        <expr_stmt pos:start="333:9" pos:end="337:36"><expr pos:start="333:9" pos:end="337:35"><call pos:start="333:9" pos:end="337:35"><name pos:start="333:9" pos:end="333:20">isa_ide_init</name><argument_list pos:start="333:21" pos:end="337:35">(<argument pos:start="333:22" pos:end="333:34"><expr pos:start="333:22" pos:end="333:34"><name pos:start="333:22" pos:end="333:34"><name pos:start="333:22" pos:end="333:31">ide_iobase</name><index pos:start="333:32" pos:end="333:34">[<expr pos:start="333:33" pos:end="333:33"><name pos:start="333:33" pos:end="333:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="333:37" pos:end="333:50"><expr pos:start="333:37" pos:end="333:50"><name pos:start="333:37" pos:end="333:50"><name pos:start="333:37" pos:end="333:47">ide_iobase2</name><index pos:start="333:48" pos:end="333:50">[<expr pos:start="333:49" pos:end="333:49"><name pos:start="333:49" pos:end="333:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="333:53" pos:end="333:62"><expr pos:start="333:53" pos:end="333:62"><name pos:start="333:53" pos:end="333:62"><name pos:start="333:53" pos:end="333:59">ide_irq</name><index pos:start="333:60" pos:end="333:62">[<expr pos:start="333:61" pos:end="333:61"><name pos:start="333:61" pos:end="333:61">i</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="335:22" pos:end="335:30"><expr pos:start="335:22" pos:end="335:30"><name pos:start="335:22" pos:end="335:30"><name pos:start="335:22" pos:end="335:23">hd</name><index pos:start="335:24" pos:end="335:30">[<expr pos:start="335:25" pos:end="335:29"><literal type="number" pos:start="335:25" pos:end="335:25">2</literal> <operator pos:start="335:27" pos:end="335:27">*</operator> <name pos:start="335:29" pos:end="335:29">i</name></expr>]</index></name></expr></argument>,

		     <argument pos:start="337:22" pos:end="337:34"><expr pos:start="337:22" pos:end="337:34"><name pos:start="337:22" pos:end="337:34"><name pos:start="337:22" pos:end="337:23">hd</name><index pos:start="337:24" pos:end="337:34">[<expr pos:start="337:25" pos:end="337:33"><literal type="number" pos:start="337:25" pos:end="337:25">2</literal> <operator pos:start="337:27" pos:end="337:27">*</operator> <name pos:start="337:29" pos:end="337:29">i</name> <operator pos:start="337:31" pos:end="337:31">+</operator> <literal type="number" pos:start="337:33" pos:end="337:33">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="341:5" pos:end="341:31"><expr pos:start="341:5" pos:end="341:30"><call pos:start="341:5" pos:end="341:30"><name pos:start="341:5" pos:end="341:21">isa_create_simple</name><argument_list pos:start="341:22" pos:end="341:30">(<argument pos:start="341:23" pos:end="341:29"><expr pos:start="341:23" pos:end="341:29"><literal type="string" pos:start="341:23" pos:end="341:29">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="343:5" pos:end="343:16"><expr pos:start="343:5" pos:end="343:15"><call pos:start="343:5" pos:end="343:15"><name pos:start="343:5" pos:end="343:12">DMA_init</name><argument_list pos:start="343:13" pos:end="343:15">(<argument pos:start="343:14" pos:end="343:14"><expr pos:start="343:14" pos:end="343:14"><literal type="number" pos:start="343:14" pos:end="343:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="345:5" pos:end="345:22">//    SB16_init();</comment>



    <for pos:start="349:5" pos:end="353:5">for<control pos:start="349:8" pos:end="349:31">(<init pos:start="349:9" pos:end="349:14"><expr pos:start="349:9" pos:end="349:13"><name pos:start="349:9" pos:end="349:9">i</name> <operator pos:start="349:11" pos:end="349:11">=</operator> <literal type="number" pos:start="349:13" pos:end="349:13">0</literal></expr>;</init> <condition pos:start="349:16" pos:end="349:26"><expr pos:start="349:16" pos:end="349:25"><name pos:start="349:16" pos:end="349:16">i</name> <operator pos:start="349:18" pos:end="349:18">&lt;</operator> <name pos:start="349:20" pos:end="349:25">MAX_FD</name></expr>;</condition> <incr pos:start="349:28" pos:end="349:30"><expr pos:start="349:28" pos:end="349:30"><name pos:start="349:28" pos:end="349:28">i</name><operator pos:start="349:29" pos:end="349:30">++</operator></expr></incr>)</control> <block pos:start="349:33" pos:end="353:5">{<block_content pos:start="351:9" pos:end="351:43">

        <expr_stmt pos:start="351:9" pos:end="351:43"><expr pos:start="351:9" pos:end="351:42"><name pos:start="351:9" pos:end="351:13"><name pos:start="351:9" pos:end="351:10">fd</name><index pos:start="351:11" pos:end="351:13">[<expr pos:start="351:12" pos:end="351:12"><name pos:start="351:12" pos:end="351:12">i</name></expr>]</index></name> <operator pos:start="351:15" pos:end="351:15">=</operator> <call pos:start="351:17" pos:end="351:42"><name pos:start="351:17" pos:end="351:25">drive_get</name><argument_list pos:start="351:26" pos:end="351:42">(<argument pos:start="351:27" pos:end="351:35"><expr pos:start="351:27" pos:end="351:35"><name pos:start="351:27" pos:end="351:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="351:38" pos:end="351:38"><expr pos:start="351:38" pos:end="351:38"><literal type="number" pos:start="351:38" pos:end="351:38">0</literal></expr></argument>, <argument pos:start="351:41" pos:end="351:41"><expr pos:start="351:41" pos:end="351:41"><name pos:start="351:41" pos:end="351:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="355:5" pos:end="355:24"><expr pos:start="355:5" pos:end="355:23"><call pos:start="355:5" pos:end="355:23"><name pos:start="355:5" pos:end="355:19">fdctrl_init_isa</name><argument_list pos:start="355:20" pos:end="355:23">(<argument pos:start="355:21" pos:end="355:22"><expr pos:start="355:21" pos:end="355:22"><name pos:start="355:21" pos:end="355:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="359:5" pos:end="359:31">/* Register speaker port */</comment>

    <expr_stmt pos:start="361:5" pos:end="361:64"><expr pos:start="361:5" pos:end="361:63"><call pos:start="361:5" pos:end="361:63"><name pos:start="361:5" pos:end="361:24">register_ioport_read</name><argument_list pos:start="361:25" pos:end="361:63">(<argument pos:start="361:26" pos:end="361:29"><expr pos:start="361:26" pos:end="361:29"><literal type="number" pos:start="361:26" pos:end="361:29">0x61</literal></expr></argument>, <argument pos:start="361:32" pos:end="361:32"><expr pos:start="361:32" pos:end="361:32"><literal type="number" pos:start="361:32" pos:end="361:32">1</literal></expr></argument>, <argument pos:start="361:35" pos:end="361:35"><expr pos:start="361:35" pos:end="361:35"><literal type="number" pos:start="361:35" pos:end="361:35">1</literal></expr></argument>, <argument pos:start="361:38" pos:end="361:56"><expr pos:start="361:38" pos:end="361:56"><name pos:start="361:38" pos:end="361:56">speaker_ioport_read</name></expr></argument>, <argument pos:start="361:59" pos:end="361:62"><expr pos:start="361:59" pos:end="361:62"><name pos:start="361:59" pos:end="361:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:66"><expr pos:start="363:5" pos:end="363:65"><call pos:start="363:5" pos:end="363:65"><name pos:start="363:5" pos:end="363:25">register_ioport_write</name><argument_list pos:start="363:26" pos:end="363:65">(<argument pos:start="363:27" pos:end="363:30"><expr pos:start="363:27" pos:end="363:30"><literal type="number" pos:start="363:27" pos:end="363:30">0x61</literal></expr></argument>, <argument pos:start="363:33" pos:end="363:33"><expr pos:start="363:33" pos:end="363:33"><literal type="number" pos:start="363:33" pos:end="363:33">1</literal></expr></argument>, <argument pos:start="363:36" pos:end="363:36"><expr pos:start="363:36" pos:end="363:36"><literal type="number" pos:start="363:36" pos:end="363:36">1</literal></expr></argument>, <argument pos:start="363:39" pos:end="363:58"><expr pos:start="363:39" pos:end="363:58"><name pos:start="363:39" pos:end="363:58">speaker_ioport_write</name></expr></argument>, <argument pos:start="363:61" pos:end="363:64"><expr pos:start="363:61" pos:end="363:64"><name pos:start="363:61" pos:end="363:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="365:5" pos:end="365:41">/* Register fake IO ports for PREP */</comment>

    <expr_stmt pos:start="367:5" pos:end="367:68"><expr pos:start="367:5" pos:end="367:67"><name pos:start="367:5" pos:end="367:22"><name pos:start="367:5" pos:end="367:11">sysctrl</name><operator pos:start="367:12" pos:end="367:13">-&gt;</operator><name pos:start="367:14" pos:end="367:22">reset_irq</name></name> <operator pos:start="367:24" pos:end="367:24">=</operator> <name pos:start="367:26" pos:end="367:67"><name pos:start="367:26" pos:end="367:34">first_cpu</name><operator pos:start="367:35" pos:end="367:36">-&gt;</operator><name pos:start="367:37" pos:end="367:46">irq_inputs</name><index pos:start="367:47" pos:end="367:67">[<expr pos:start="367:48" pos:end="367:66"><name pos:start="367:48" pos:end="367:66">PPC6xx_INPUT_HRESET</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:62"><expr pos:start="369:5" pos:end="369:61"><call pos:start="369:5" pos:end="369:61"><name pos:start="369:5" pos:end="369:24">register_ioport_read</name><argument_list pos:start="369:25" pos:end="369:61">(<argument pos:start="369:26" pos:end="369:30"><expr pos:start="369:26" pos:end="369:30"><literal type="number" pos:start="369:26" pos:end="369:30">0x398</literal></expr></argument>, <argument pos:start="369:33" pos:end="369:33"><expr pos:start="369:33" pos:end="369:33"><literal type="number" pos:start="369:33" pos:end="369:33">2</literal></expr></argument>, <argument pos:start="369:36" pos:end="369:36"><expr pos:start="369:36" pos:end="369:36"><literal type="number" pos:start="369:36" pos:end="369:36">1</literal></expr></argument>, <argument pos:start="369:39" pos:end="369:51"><expr pos:start="369:39" pos:end="369:51"><operator pos:start="369:39" pos:end="369:39">&amp;</operator><name pos:start="369:40" pos:end="369:51">PREP_io_read</name></expr></argument>, <argument pos:start="369:54" pos:end="369:60"><expr pos:start="369:54" pos:end="369:60"><name pos:start="369:54" pos:end="369:60">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:64"><expr pos:start="371:5" pos:end="371:63"><call pos:start="371:5" pos:end="371:63"><name pos:start="371:5" pos:end="371:25">register_ioport_write</name><argument_list pos:start="371:26" pos:end="371:63">(<argument pos:start="371:27" pos:end="371:31"><expr pos:start="371:27" pos:end="371:31"><literal type="number" pos:start="371:27" pos:end="371:31">0x398</literal></expr></argument>, <argument pos:start="371:34" pos:end="371:34"><expr pos:start="371:34" pos:end="371:34"><literal type="number" pos:start="371:34" pos:end="371:34">2</literal></expr></argument>, <argument pos:start="371:37" pos:end="371:37"><expr pos:start="371:37" pos:end="371:37"><literal type="number" pos:start="371:37" pos:end="371:37">1</literal></expr></argument>, <argument pos:start="371:40" pos:end="371:53"><expr pos:start="371:40" pos:end="371:53"><operator pos:start="371:40" pos:end="371:40">&amp;</operator><name pos:start="371:41" pos:end="371:53">PREP_io_write</name></expr></argument>, <argument pos:start="371:56" pos:end="371:62"><expr pos:start="371:56" pos:end="371:62"><name pos:start="371:56" pos:end="371:62">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="373:5" pos:end="373:30">/* System control ports */</comment>

    <expr_stmt pos:start="375:5" pos:end="375:71"><expr pos:start="375:5" pos:end="375:70"><call pos:start="375:5" pos:end="375:70"><name pos:start="375:5" pos:end="375:24">register_ioport_read</name><argument_list pos:start="375:25" pos:end="375:70">(<argument pos:start="375:26" pos:end="375:31"><expr pos:start="375:26" pos:end="375:31"><literal type="number" pos:start="375:26" pos:end="375:31">0x0092</literal></expr></argument>, <argument pos:start="375:34" pos:end="375:37"><expr pos:start="375:34" pos:end="375:37"><literal type="number" pos:start="375:34" pos:end="375:37">0x01</literal></expr></argument>, <argument pos:start="375:40" pos:end="375:40"><expr pos:start="375:40" pos:end="375:40"><literal type="number" pos:start="375:40" pos:end="375:40">1</literal></expr></argument>, <argument pos:start="375:43" pos:end="375:60"><expr pos:start="375:43" pos:end="375:60"><operator pos:start="375:43" pos:end="375:43">&amp;</operator><name pos:start="375:44" pos:end="375:60">PREP_io_800_readb</name></expr></argument>, <argument pos:start="375:63" pos:end="375:69"><expr pos:start="375:63" pos:end="375:69"><name pos:start="375:63" pos:end="375:69">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="377:5" pos:end="377:73"><expr pos:start="377:5" pos:end="377:72"><call pos:start="377:5" pos:end="377:72"><name pos:start="377:5" pos:end="377:25">register_ioport_write</name><argument_list pos:start="377:26" pos:end="377:72">(<argument pos:start="377:27" pos:end="377:32"><expr pos:start="377:27" pos:end="377:32"><literal type="number" pos:start="377:27" pos:end="377:32">0x0092</literal></expr></argument>, <argument pos:start="377:35" pos:end="377:38"><expr pos:start="377:35" pos:end="377:38"><literal type="number" pos:start="377:35" pos:end="377:38">0x01</literal></expr></argument>, <argument pos:start="377:41" pos:end="377:41"><expr pos:start="377:41" pos:end="377:41"><literal type="number" pos:start="377:41" pos:end="377:41">1</literal></expr></argument>, <argument pos:start="377:44" pos:end="377:62"><expr pos:start="377:44" pos:end="377:62"><operator pos:start="377:44" pos:end="377:44">&amp;</operator><name pos:start="377:45" pos:end="377:62">PREP_io_800_writeb</name></expr></argument>, <argument pos:start="377:65" pos:end="377:71"><expr pos:start="377:65" pos:end="377:71"><name pos:start="377:65" pos:end="377:71">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:71"><expr pos:start="379:5" pos:end="379:70"><call pos:start="379:5" pos:end="379:70"><name pos:start="379:5" pos:end="379:24">register_ioport_read</name><argument_list pos:start="379:25" pos:end="379:70">(<argument pos:start="379:26" pos:end="379:31"><expr pos:start="379:26" pos:end="379:31"><literal type="number" pos:start="379:26" pos:end="379:31">0x0800</literal></expr></argument>, <argument pos:start="379:34" pos:end="379:37"><expr pos:start="379:34" pos:end="379:37"><literal type="number" pos:start="379:34" pos:end="379:37">0x52</literal></expr></argument>, <argument pos:start="379:40" pos:end="379:40"><expr pos:start="379:40" pos:end="379:40"><literal type="number" pos:start="379:40" pos:end="379:40">1</literal></expr></argument>, <argument pos:start="379:43" pos:end="379:60"><expr pos:start="379:43" pos:end="379:60"><operator pos:start="379:43" pos:end="379:43">&amp;</operator><name pos:start="379:44" pos:end="379:60">PREP_io_800_readb</name></expr></argument>, <argument pos:start="379:63" pos:end="379:69"><expr pos:start="379:63" pos:end="379:69"><name pos:start="379:63" pos:end="379:69">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="381:5" pos:end="381:73"><expr pos:start="381:5" pos:end="381:72"><call pos:start="381:5" pos:end="381:72"><name pos:start="381:5" pos:end="381:25">register_ioport_write</name><argument_list pos:start="381:26" pos:end="381:72">(<argument pos:start="381:27" pos:end="381:32"><expr pos:start="381:27" pos:end="381:32"><literal type="number" pos:start="381:27" pos:end="381:32">0x0800</literal></expr></argument>, <argument pos:start="381:35" pos:end="381:38"><expr pos:start="381:35" pos:end="381:38"><literal type="number" pos:start="381:35" pos:end="381:38">0x52</literal></expr></argument>, <argument pos:start="381:41" pos:end="381:41"><expr pos:start="381:41" pos:end="381:41"><literal type="number" pos:start="381:41" pos:end="381:41">1</literal></expr></argument>, <argument pos:start="381:44" pos:end="381:62"><expr pos:start="381:44" pos:end="381:62"><operator pos:start="381:44" pos:end="381:44">&amp;</operator><name pos:start="381:45" pos:end="381:62">PREP_io_800_writeb</name></expr></argument>, <argument pos:start="381:65" pos:end="381:71"><expr pos:start="381:65" pos:end="381:71"><name pos:start="381:65" pos:end="381:71">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="383:5" pos:end="383:29">/* PCI intack location */</comment>

    <expr_stmt pos:start="385:5" pos:end="387:67"><expr pos:start="385:5" pos:end="387:66"><name pos:start="385:5" pos:end="385:17">PPC_io_memory</name> <operator pos:start="385:19" pos:end="385:19">=</operator> <call pos:start="385:21" pos:end="387:66"><name pos:start="385:21" pos:end="385:42">cpu_register_io_memory</name><argument_list pos:start="385:43" pos:end="387:66">(<argument pos:start="385:44" pos:end="385:58"><expr pos:start="385:44" pos:end="385:58"><name pos:start="385:44" pos:end="385:58">PPC_intack_read</name></expr></argument>,

                                           <argument pos:start="387:44" pos:end="387:59"><expr pos:start="387:44" pos:end="387:59"><name pos:start="387:44" pos:end="387:59">PPC_intack_write</name></expr></argument>, <argument pos:start="387:62" pos:end="387:65"><expr pos:start="387:62" pos:end="387:65"><name pos:start="387:62" pos:end="387:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="402:0"><expr pos:start="389:5" pos:end="389:64"><call pos:start="389:5" pos:end="389:64"><name pos:start="389:5" pos:end="389:32">cpu_register_physical_memory</name><argument_list pos:start="389:33" pos:end="389:64">(<argument pos:start="389:34" pos:end="389:43"><expr pos:start="389:34" pos:end="389:43"><literal type="number" pos:start="389:34" pos:end="389:43">0xBFFFFFF0</literal></expr></argument>, <argument pos:start="389:46" pos:end="389:48"><expr pos:start="389:46" pos:end="389:48"><literal type="number" pos:start="389:46" pos:end="389:48">0x4</literal></expr></argument>, <argument pos:start="389:51" pos:end="389:63"><expr pos:start="389:51" pos:end="389:63"><name pos:start="389:51" pos:end="389:63">PPC_io_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="391:5" pos:end="391:51">/* PowerPC control and status register group */</comment>

<cpp:if pos:start="393:1" pos:end="393:5">#<cpp:directive pos:start="393:2" pos:end="393:3">if</cpp:directive> <expr pos:start="393:5" pos:end="393:5"><literal type="number" pos:start="393:5" pos:end="393:5">0</literal></expr></cpp:if>

    PPC_io_memory = cpu_register_io_memory(PPC_XCSR_read, PPC_XCSR_write,

                                           NULL);

    cpu_register_physical_memory(0xFEFF0000, 0x1000, PPC_io_memory);

<cpp:endif pos:start="401:1" pos:end="401:6">#<cpp:directive pos:start="401:2" pos:end="401:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="405:5" pos:end="409:5"><if pos:start="405:5" pos:end="409:5">if <condition pos:start="405:8" pos:end="405:20">(<expr pos:start="405:9" pos:end="405:19"><name pos:start="405:9" pos:end="405:19">usb_enabled</name></expr>)</condition> <block pos:start="405:22" pos:end="409:5">{<block_content pos:start="407:9" pos:end="407:39">

        <expr_stmt pos:start="407:9" pos:end="407:39"><expr pos:start="407:9" pos:end="407:38"><call pos:start="407:9" pos:end="407:38"><name pos:start="407:9" pos:end="407:25">usb_ohci_init_pci</name><argument_list pos:start="407:26" pos:end="407:38">(<argument pos:start="407:27" pos:end="407:33"><expr pos:start="407:27" pos:end="407:33"><name pos:start="407:27" pos:end="407:33">pci_bus</name></expr></argument>, <argument pos:start="407:36" pos:end="407:37"><expr pos:start="407:36" pos:end="407:37"><operator pos:start="407:36" pos:end="407:36">-</operator><literal type="number" pos:start="407:37" pos:end="407:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="413:5" pos:end="413:62"><expr pos:start="413:5" pos:end="413:61"><name pos:start="413:5" pos:end="413:10">m48t59</name> <operator pos:start="413:12" pos:end="413:12">=</operator> <call pos:start="413:14" pos:end="413:61"><name pos:start="413:14" pos:end="413:24">m48t59_init</name><argument_list pos:start="413:25" pos:end="413:61">(<argument pos:start="413:26" pos:end="413:33"><expr pos:start="413:26" pos:end="413:33"><name pos:start="413:26" pos:end="413:33"><name pos:start="413:26" pos:end="413:30">i8259</name><index pos:start="413:31" pos:end="413:33">[<expr pos:start="413:32" pos:end="413:32"><literal type="number" pos:start="413:32" pos:end="413:32">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="413:36" pos:end="413:36"><expr pos:start="413:36" pos:end="413:36"><literal type="number" pos:start="413:36" pos:end="413:36">0</literal></expr></argument>, <argument pos:start="413:39" pos:end="413:44"><expr pos:start="413:39" pos:end="413:44"><literal type="number" pos:start="413:39" pos:end="413:44">0x0074</literal></expr></argument>, <argument pos:start="413:47" pos:end="413:56"><expr pos:start="413:47" pos:end="413:56"><name pos:start="413:47" pos:end="413:56">NVRAM_SIZE</name></expr></argument>, <argument pos:start="413:59" pos:end="413:60"><expr pos:start="413:59" pos:end="413:60"><literal type="number" pos:start="413:59" pos:end="413:60">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="415:5" pos:end="417:15"><if pos:start="415:5" pos:end="417:15">if <condition pos:start="415:8" pos:end="415:23">(<expr pos:start="415:9" pos:end="415:22"><name pos:start="415:9" pos:end="415:14">m48t59</name> <operator pos:start="415:16" pos:end="415:17">==</operator> <name pos:start="415:19" pos:end="415:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="417:9" pos:end="417:15"><block_content pos:start="417:9" pos:end="417:15">

        <return pos:start="417:9" pos:end="417:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="419:5" pos:end="419:28"><expr pos:start="419:5" pos:end="419:27"><name pos:start="419:5" pos:end="419:18"><name pos:start="419:5" pos:end="419:11">sysctrl</name><operator pos:start="419:12" pos:end="419:13">-&gt;</operator><name pos:start="419:14" pos:end="419:18">nvram</name></name> <operator pos:start="419:20" pos:end="419:20">=</operator> <name pos:start="419:22" pos:end="419:27">m48t59</name></expr>;</expr_stmt>



    <comment type="block" pos:start="423:5" pos:end="423:26">/* Initialise NVRAM */</comment>

    <expr_stmt pos:start="425:5" pos:end="425:26"><expr pos:start="425:5" pos:end="425:25"><name pos:start="425:5" pos:end="425:16"><name pos:start="425:5" pos:end="425:9">nvram</name><operator pos:start="425:10" pos:end="425:10">.</operator><name pos:start="425:11" pos:end="425:16">opaque</name></name> <operator pos:start="425:18" pos:end="425:18">=</operator> <name pos:start="425:20" pos:end="425:25">m48t59</name></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:33"><expr pos:start="427:5" pos:end="427:32"><name pos:start="427:5" pos:end="427:17"><name pos:start="427:5" pos:end="427:9">nvram</name><operator pos:start="427:10" pos:end="427:10">.</operator><name pos:start="427:11" pos:end="427:17">read_fn</name></name> <operator pos:start="427:19" pos:end="427:19">=</operator> <operator pos:start="427:21" pos:end="427:21">&amp;</operator><name pos:start="427:22" pos:end="427:32">m48t59_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:35"><expr pos:start="429:5" pos:end="429:34"><name pos:start="429:5" pos:end="429:18"><name pos:start="429:5" pos:end="429:9">nvram</name><operator pos:start="429:10" pos:end="429:10">.</operator><name pos:start="429:11" pos:end="429:18">write_fn</name></name> <operator pos:start="429:20" pos:end="429:20">=</operator> <operator pos:start="429:22" pos:end="429:22">&amp;</operator><name pos:start="429:23" pos:end="429:34">m48t59_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="443:71"><expr pos:start="431:5" pos:end="443:70"><call pos:start="431:5" pos:end="443:70"><name pos:start="431:5" pos:end="431:24">PPC_NVRAM_set_params</name><argument_list pos:start="431:25" pos:end="443:70">(<argument pos:start="431:26" pos:end="431:31"><expr pos:start="431:26" pos:end="431:31"><operator pos:start="431:26" pos:end="431:26">&amp;</operator><name pos:start="431:27" pos:end="431:31">nvram</name></expr></argument>, <argument pos:start="431:34" pos:end="431:43"><expr pos:start="431:34" pos:end="431:43"><name pos:start="431:34" pos:end="431:43">NVRAM_SIZE</name></expr></argument>, <argument pos:start="431:46" pos:end="431:51"><expr pos:start="431:46" pos:end="431:51"><literal type="string" pos:start="431:46" pos:end="431:51">"PREP"</literal></expr></argument>, <argument pos:start="431:54" pos:end="431:61"><expr pos:start="431:54" pos:end="431:61"><name pos:start="431:54" pos:end="431:61">ram_size</name></expr></argument>, <argument pos:start="431:64" pos:end="431:78"><expr pos:start="431:64" pos:end="431:78"><name pos:start="431:64" pos:end="431:78">ppc_boot_device</name></expr></argument>,

                         <argument pos:start="433:26" pos:end="433:36"><expr pos:start="433:26" pos:end="433:36"><name pos:start="433:26" pos:end="433:36">kernel_base</name></expr></argument>, <argument pos:start="433:39" pos:end="433:49"><expr pos:start="433:39" pos:end="433:49"><name pos:start="433:39" pos:end="433:49">kernel_size</name></expr></argument>,

                         <argument pos:start="435:26" pos:end="435:39"><expr pos:start="435:26" pos:end="435:39"><name pos:start="435:26" pos:end="435:39">kernel_cmdline</name></expr></argument>,

                         <argument pos:start="437:26" pos:end="437:36"><expr pos:start="437:26" pos:end="437:36"><name pos:start="437:26" pos:end="437:36">initrd_base</name></expr></argument>, <argument pos:start="437:39" pos:end="437:49"><expr pos:start="437:39" pos:end="437:49"><name pos:start="437:39" pos:end="437:49">initrd_size</name></expr></argument>,

                         <comment type="block" pos:start="439:26" pos:end="439:72">/* XXX: need an option to load a NVRAM image */</comment>

                         <argument pos:start="441:26" pos:end="441:26"><expr pos:start="441:26" pos:end="441:26"><literal type="number" pos:start="441:26" pos:end="441:26">0</literal></expr></argument>,

                         <argument pos:start="443:26" pos:end="443:38"><expr pos:start="443:26" pos:end="443:38"><name pos:start="443:26" pos:end="443:38">graphic_width</name></expr></argument>, <argument pos:start="443:41" pos:end="443:54"><expr pos:start="443:41" pos:end="443:54"><name pos:start="443:41" pos:end="443:54">graphic_height</name></expr></argument>, <argument pos:start="443:57" pos:end="443:69"><expr pos:start="443:57" pos:end="443:69"><name pos:start="443:57" pos:end="443:69">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="447:5" pos:end="447:63">/* Special port to get debug messages from Open-Firmware */</comment>

    <expr_stmt pos:start="449:5" pos:end="449:64"><expr pos:start="449:5" pos:end="449:63"><call pos:start="449:5" pos:end="449:63"><name pos:start="449:5" pos:end="449:25">register_ioport_write</name><argument_list pos:start="449:26" pos:end="449:63">(<argument pos:start="449:27" pos:end="449:32"><expr pos:start="449:27" pos:end="449:32"><literal type="number" pos:start="449:27" pos:end="449:32">0x0F00</literal></expr></argument>, <argument pos:start="449:35" pos:end="449:35"><expr pos:start="449:35" pos:end="449:35"><literal type="number" pos:start="449:35" pos:end="449:35">4</literal></expr></argument>, <argument pos:start="449:38" pos:end="449:38"><expr pos:start="449:38" pos:end="449:38"><literal type="number" pos:start="449:38" pos:end="449:38">1</literal></expr></argument>, <argument pos:start="449:41" pos:end="449:56"><expr pos:start="449:41" pos:end="449:56"><operator pos:start="449:41" pos:end="449:41">&amp;</operator><name pos:start="449:42" pos:end="449:56">PPC_debug_write</name></expr></argument>, <argument pos:start="449:59" pos:end="449:62"><expr pos:start="449:59" pos:end="449:62"><name pos:start="449:59" pos:end="449:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
