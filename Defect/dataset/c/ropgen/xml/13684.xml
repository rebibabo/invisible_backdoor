<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13684.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">vtd_interrupt_remap_msi</name><parameter_list pos:start="1:35" pos:end="5:58">(<parameter pos:start="1:36" pos:end="1:57"><decl pos:start="1:36" pos:end="1:57"><type pos:start="1:36" pos:end="1:57"><name pos:start="1:36" pos:end="1:50">IntelIOMMUState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">iommu</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:53"><decl pos:start="3:36" pos:end="3:53"><type pos:start="3:36" pos:end="3:53"><name pos:start="3:36" pos:end="3:45">MSIMessage</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:53">origin</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:45">MSIMessage</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:57">translated</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="175:1">{<block_content pos:start="9:5" pos:end="173:13">

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:21">VTD_IR_MSIAddress</name></type> <name pos:start="11:23" pos:end="11:26">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:18">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">VTDIrq</name></type> <name pos:start="15:12" pos:end="15:14">irq</name> <init pos:start="15:16" pos:end="15:20">= <expr pos:start="15:18" pos:end="15:20"><block pos:start="15:18" pos:end="15:20">{<expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:33"><expr pos:start="19:5" pos:end="19:32"><call pos:start="19:5" pos:end="19:32"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:32">(<argument pos:start="19:12" pos:end="19:31"><expr pos:start="19:12" pos:end="19:31"><name pos:start="19:12" pos:end="19:17">origin</name> <operator pos:start="19:19" pos:end="19:20">&amp;&amp;</operator> <name pos:start="19:22" pos:end="19:31">translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:39">(<expr pos:start="23:9" pos:end="23:38"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:14">iommu</name> <operator pos:start="23:16" pos:end="23:17">||</operator> <operator pos:start="23:19" pos:end="23:19">!</operator><name pos:start="23:20" pos:end="23:38"><name pos:start="23:20" pos:end="23:24">iommu</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:38">intr_enabled</name></name></expr>)</condition> <block pos:start="23:41" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:30">

        <goto pos:start="25:9" pos:end="25:30">goto <name pos:start="25:14" pos:end="25:29">do_not_translate</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="43:5">if <condition pos:start="31:8" pos:end="31:47">(<expr pos:start="31:9" pos:end="31:46"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:14">origin</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:23">address</name></name> <operator pos:start="31:25" pos:end="31:25">&amp;</operator> <name pos:start="31:27" pos:end="31:46">VTD_MSI_ADDR_HI_MASK</name></expr>)</condition> <block pos:start="31:49" pos:end="43:5">{<block_content pos:start="33:9" pos:end="41:35">

        <expr_stmt pos:start="33:9" pos:end="39:44"><expr pos:start="33:9" pos:end="39:43"><call pos:start="33:9" pos:end="39:43"><name pos:start="33:9" pos:end="33:19">VTD_DPRINTF</name><argument_list pos:start="33:20" pos:end="39:43">(<argument pos:start="33:21" pos:end="33:27"><expr pos:start="33:21" pos:end="33:27"><name pos:start="33:21" pos:end="33:27">GENERAL</name></expr></argument>, <argument pos:start="33:30" pos:end="35:60"><expr pos:start="33:30" pos:end="35:60"><literal type="string" pos:start="33:30" pos:end="33:67">"error: MSI addr high 32 bits nonzero"</literal>

                    <literal type="string" pos:start="35:21" pos:end="35:54">" during interrupt remapping: 0x%"</literal><name pos:start="35:55" pos:end="35:60">PRIx32</name></expr></argument>,

                    <argument pos:start="37:21" pos:end="39:42"><expr pos:start="37:21" pos:end="39:42"><operator pos:start="37:21" pos:end="37:21">(</operator><name pos:start="37:22" pos:end="37:29">uint32_t</name><operator pos:start="37:30" pos:end="37:30">)</operator><operator pos:start="37:31" pos:end="37:31">(</operator><operator pos:start="37:32" pos:end="37:32">(</operator><name pos:start="37:33" pos:end="37:47"><name pos:start="37:33" pos:end="37:38">origin</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:47">address</name></name> <operator pos:start="37:49" pos:end="37:49">&amp;</operator> <name pos:start="37:51" pos:end="37:70">VTD_MSI_ADDR_HI_MASK</name><operator pos:start="37:71" pos:end="37:71">)</operator> <operator pos:start="37:73" pos:end="37:74">&gt;&gt;</operator> \

                    <name pos:start="39:21" pos:end="39:41">VTD_MSI_ADDR_HI_SHIFT</name><operator pos:start="39:42" pos:end="39:42">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:35">return <expr pos:start="41:16" pos:end="41:34"><operator pos:start="41:16" pos:end="41:16">-</operator><name pos:start="41:17" pos:end="41:34">VTD_FR_IR_REQ_RSVD</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:55"><expr pos:start="47:5" pos:end="47:54"><name pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:8">addr</name><operator pos:start="47:9" pos:end="47:9">.</operator><name pos:start="47:10" pos:end="47:13">data</name></name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:31"><name pos:start="47:17" pos:end="47:22">origin</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:31">address</name></name> <operator pos:start="47:33" pos:end="47:33">&amp;</operator> <name pos:start="47:35" pos:end="47:54">VTD_MSI_ADDR_LO_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:42">(<expr pos:start="49:9" pos:end="49:41"><call pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:19">le16_to_cpu</name><argument_list pos:start="49:20" pos:end="49:32">(<argument pos:start="49:21" pos:end="49:31"><expr pos:start="49:21" pos:end="49:31"><name pos:start="49:21" pos:end="49:31"><name pos:start="49:21" pos:end="49:24">addr</name><operator pos:start="49:25" pos:end="49:25">.</operator><name pos:start="49:26" pos:end="49:31">__head</name></name></expr></argument>)</argument_list></call> <operator pos:start="49:34" pos:end="49:35">!=</operator> <literal type="number" pos:start="49:37" pos:end="49:41">0xfee</literal></expr>)</condition> <block pos:start="49:44" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:35">

        <expr_stmt pos:start="51:9" pos:end="53:44"><expr pos:start="51:9" pos:end="53:43"><call pos:start="51:9" pos:end="53:43"><name pos:start="51:9" pos:end="51:19">VTD_DPRINTF</name><argument_list pos:start="51:20" pos:end="53:43">(<argument pos:start="51:21" pos:end="51:27"><expr pos:start="51:21" pos:end="51:27"><name pos:start="51:21" pos:end="51:27">GENERAL</name></expr></argument>, <argument pos:start="51:30" pos:end="53:31"><expr pos:start="51:30" pos:end="53:31"><literal type="string" pos:start="51:30" pos:end="51:68">"error: MSI addr low 32 bits invalid: "</literal>

                    <literal type="string" pos:start="53:21" pos:end="53:25">"0x%"</literal><name pos:start="53:26" pos:end="53:31">PRIx32</name></expr></argument>, <argument pos:start="53:34" pos:end="53:42"><expr pos:start="53:34" pos:end="53:42"><name pos:start="53:34" pos:end="53:42"><name pos:start="53:34" pos:end="53:37">addr</name><operator pos:start="53:38" pos:end="53:38">.</operator><name pos:start="53:39" pos:end="53:42">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:35">return <expr pos:start="55:16" pos:end="55:34"><operator pos:start="55:16" pos:end="55:16">-</operator><name pos:start="55:17" pos:end="55:34">VTD_FR_IR_REQ_RSVD</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:34">/* This is compatible mode. */</comment>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:49">(<expr pos:start="63:9" pos:end="63:48"><name pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:12">addr</name><operator pos:start="63:13" pos:end="63:13">.</operator><name pos:start="63:14" pos:end="63:21">int_mode</name></name> <operator pos:start="63:23" pos:end="63:24">!=</operator> <name pos:start="63:26" pos:end="63:48">VTD_IR_INT_FORMAT_REMAP</name></expr>)</condition> <block pos:start="63:51" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:30">

        <goto pos:start="65:9" pos:end="65:30">goto <name pos:start="65:14" pos:end="65:29">do_not_translate</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="78:0"><expr pos:start="71:5" pos:end="71:58"><name pos:start="71:5" pos:end="71:9">index</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <name pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:16">addr</name><operator pos:start="71:17" pos:end="71:17">.</operator><name pos:start="71:18" pos:end="71:24">index_h</name></name> <operator pos:start="71:26" pos:end="71:27">&lt;&lt;</operator> <literal type="number" pos:start="71:29" pos:end="71:30">15</literal> <operator pos:start="71:32" pos:end="71:32">|</operator> <call pos:start="71:34" pos:end="71:58"><name pos:start="71:34" pos:end="71:44">le16_to_cpu</name><argument_list pos:start="71:45" pos:end="71:58">(<argument pos:start="71:46" pos:end="71:57"><expr pos:start="71:46" pos:end="71:57"><name pos:start="71:46" pos:end="71:57"><name pos:start="71:46" pos:end="71:49">addr</name><operator pos:start="71:50" pos:end="71:50">.</operator><name pos:start="71:51" pos:end="71:57">index_l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:define pos:start="75:1" pos:end="75:53">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive>  <cpp:macro pos:start="75:10" pos:end="75:34"><name pos:start="75:10" pos:end="75:34">VTD_IR_MSI_DATA_SUBHANDLE</name></cpp:macro>       <cpp:value pos:start="75:42" pos:end="75:53">(0x0000ffff)</cpp:value></cpp:define>

<cpp:define pos:start="77:1" pos:end="77:53">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive>  <cpp:macro pos:start="77:10" pos:end="77:33"><name pos:start="77:10" pos:end="77:33">VTD_IR_MSI_DATA_RESERVED</name></cpp:macro>        <cpp:value pos:start="77:42" pos:end="77:53">(0xffff0000)</cpp:value></cpp:define>



    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:23">(<expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:12">addr</name><operator pos:start="81:13" pos:end="81:13">.</operator><name pos:start="81:14" pos:end="81:22">sub_valid</name></name></expr>)</condition> <block pos:start="81:25" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:58">

        <comment type="block" pos:start="83:9" pos:end="83:58">/* See VT-d spec 5.1.2.2 and 5.1.3 on subhandle */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:58"><expr pos:start="85:9" pos:end="85:57"><name pos:start="85:9" pos:end="85:13">index</name> <operator pos:start="85:15" pos:end="85:16">+=</operator> <name pos:start="85:18" pos:end="85:29"><name pos:start="85:18" pos:end="85:23">origin</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:29">data</name></name> <operator pos:start="85:31" pos:end="85:31">&amp;</operator> <name pos:start="85:33" pos:end="85:57">VTD_IR_MSI_DATA_SUBHANDLE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:48"><expr pos:start="91:5" pos:end="91:47"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:47"><name pos:start="91:11" pos:end="91:27">vtd_remap_irq_get</name><argument_list pos:start="91:28" pos:end="91:47">(<argument pos:start="91:29" pos:end="91:33"><expr pos:start="91:29" pos:end="91:33"><name pos:start="91:29" pos:end="91:33">iommu</name></expr></argument>, <argument pos:start="91:36" pos:end="91:40"><expr pos:start="91:36" pos:end="91:40"><name pos:start="91:36" pos:end="91:40">index</name></expr></argument>, <argument pos:start="91:43" pos:end="91:46"><expr pos:start="91:43" pos:end="91:46"><operator pos:start="91:43" pos:end="91:43">&amp;</operator><name pos:start="91:44" pos:end="91:46">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:12">(<expr pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">ret</name></expr>)</condition> <block pos:start="93:14" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:19">

        <return pos:start="95:9" pos:end="95:19">return <expr pos:start="95:16" pos:end="95:18"><name pos:start="95:16" pos:end="95:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="137:5"><if pos:start="101:5" pos:end="117:5">if <condition pos:start="101:8" pos:end="101:23">(<expr pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:12">addr</name><operator pos:start="101:13" pos:end="101:13">.</operator><name pos:start="101:14" pos:end="101:22">sub_valid</name></name></expr>)</condition> <block pos:start="101:25" pos:end="117:5">{<block_content pos:start="103:9" pos:end="115:9">

        <expr_stmt pos:start="103:9" pos:end="103:50"><expr pos:start="103:9" pos:end="103:49"><call pos:start="103:9" pos:end="103:49"><name pos:start="103:9" pos:end="103:19">VTD_DPRINTF</name><argument_list pos:start="103:20" pos:end="103:49">(<argument pos:start="103:21" pos:end="103:22"><expr pos:start="103:21" pos:end="103:22"><name pos:start="103:21" pos:end="103:22">IR</name></expr></argument>, <argument pos:start="103:25" pos:end="103:48"><expr pos:start="103:25" pos:end="103:48"><literal type="string" pos:start="103:25" pos:end="103:48">"received MSI interrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="115:9"><if pos:start="105:9" pos:end="115:9">if <condition pos:start="105:12" pos:end="105:52">(<expr pos:start="105:13" pos:end="105:51"><name pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:18">origin</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:24">data</name></name> <operator pos:start="105:26" pos:end="105:26">&amp;</operator> <name pos:start="105:28" pos:end="105:51">VTD_IR_MSI_DATA_RESERVED</name></expr>)</condition> <block pos:start="105:54" pos:end="115:9">{<block_content pos:start="107:13" pos:end="113:39">

            <expr_stmt pos:start="107:13" pos:end="111:38"><expr pos:start="107:13" pos:end="111:37"><call pos:start="107:13" pos:end="111:37"><name pos:start="107:13" pos:end="107:23">VTD_DPRINTF</name><argument_list pos:start="107:24" pos:end="111:37">(<argument pos:start="107:25" pos:end="107:31"><expr pos:start="107:25" pos:end="107:31"><name pos:start="107:25" pos:end="107:31">GENERAL</name></expr></argument>, <argument pos:start="107:34" pos:end="109:63"><expr pos:start="107:34" pos:end="109:63"><literal type="string" pos:start="107:34" pos:end="107:69">"error: MSI data bits non-zero for "</literal>

                        <literal type="string" pos:start="109:25" pos:end="109:57">"interrupt remappable entry: 0x%"</literal><name pos:start="109:58" pos:end="109:63">PRIx32</name></expr></argument>,

                        <argument pos:start="111:25" pos:end="111:36"><expr pos:start="111:25" pos:end="111:36"><name pos:start="111:25" pos:end="111:36"><name pos:start="111:25" pos:end="111:30">origin</name><operator pos:start="111:31" pos:end="111:32">-&gt;</operator><name pos:start="111:33" pos:end="111:36">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="113:13" pos:end="113:39">return <expr pos:start="113:20" pos:end="113:38"><operator pos:start="113:20" pos:end="113:20">-</operator><name pos:start="113:21" pos:end="113:38">VTD_FR_IR_REQ_RSVD</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="117:7" pos:end="137:5">else <block pos:start="117:12" pos:end="137:5">{<block_content pos:start="119:9" pos:end="135:9">

        <decl_stmt pos:start="119:9" pos:end="119:45"><decl pos:start="119:9" pos:end="119:44"><type pos:start="119:9" pos:end="119:15"><name pos:start="119:9" pos:end="119:15">uint8_t</name></type> <name pos:start="119:17" pos:end="119:22">vector</name> <init pos:start="119:24" pos:end="119:44">= <expr pos:start="119:26" pos:end="119:44"><name pos:start="119:26" pos:end="119:37"><name pos:start="119:26" pos:end="119:31">origin</name><operator pos:start="119:32" pos:end="119:33">-&gt;</operator><name pos:start="119:34" pos:end="119:37">data</name></name> <operator pos:start="119:39" pos:end="119:39">&amp;</operator> <literal type="number" pos:start="119:41" pos:end="119:44">0xff</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:53"><expr pos:start="121:9" pos:end="121:52"><call pos:start="121:9" pos:end="121:52"><name pos:start="121:9" pos:end="121:19">VTD_DPRINTF</name><argument_list pos:start="121:20" pos:end="121:52">(<argument pos:start="121:21" pos:end="121:22"><expr pos:start="121:21" pos:end="121:22"><name pos:start="121:21" pos:end="121:22">IR</name></expr></argument>, <argument pos:start="121:25" pos:end="121:51"><expr pos:start="121:25" pos:end="121:51"><literal type="string" pos:start="121:25" pos:end="121:51">"received IOAPIC interrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="123:9" pos:end="125:38">/* IOAPIC entry vector should be aligned with IRTE vector

         * (see vt-d spec 5.1.5.1). */</comment>

        <if_stmt pos:start="127:9" pos:end="135:9"><if pos:start="127:9" pos:end="135:9">if <condition pos:start="127:12" pos:end="127:33">(<expr pos:start="127:13" pos:end="127:32"><name pos:start="127:13" pos:end="127:18">vector</name> <operator pos:start="127:20" pos:end="127:21">!=</operator> <name pos:start="127:23" pos:end="127:32"><name pos:start="127:23" pos:end="127:25">irq</name><operator pos:start="127:26" pos:end="127:26">.</operator><name pos:start="127:27" pos:end="127:32">vector</name></name></expr>)</condition> <block pos:start="127:35" pos:end="135:9">{<block_content pos:start="129:13" pos:end="133:51">

            <expr_stmt pos:start="129:13" pos:end="133:51"><expr pos:start="129:13" pos:end="133:50"><call pos:start="129:13" pos:end="133:50"><name pos:start="129:13" pos:end="129:23">VTD_DPRINTF</name><argument_list pos:start="129:24" pos:end="133:50">(<argument pos:start="129:25" pos:end="129:31"><expr pos:start="129:25" pos:end="129:31"><name pos:start="129:25" pos:end="129:31">GENERAL</name></expr></argument>, <argument pos:start="129:34" pos:end="131:56"><expr pos:start="129:34" pos:end="131:56"><literal type="string" pos:start="129:34" pos:end="129:63">"IOAPIC vector inconsistent: "</literal>

                        <literal type="string" pos:start="131:25" pos:end="131:56">"entry: %d, IRTE: %d, index: %d"</literal></expr></argument>,

                        <argument pos:start="133:25" pos:end="133:30"><expr pos:start="133:25" pos:end="133:30"><name pos:start="133:25" pos:end="133:30">vector</name></expr></argument>, <argument pos:start="133:33" pos:end="133:42"><expr pos:start="133:33" pos:end="133:42"><name pos:start="133:33" pos:end="133:42"><name pos:start="133:33" pos:end="133:35">irq</name><operator pos:start="133:36" pos:end="133:36">.</operator><name pos:start="133:37" pos:end="133:42">vector</name></name></expr></argument>, <argument pos:start="133:45" pos:end="133:49"><expr pos:start="133:45" pos:end="133:49"><name pos:start="133:45" pos:end="133:49">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="141:5" pos:end="147:7">/*

     * We'd better keep the last two bits, assuming that guest OS

     * might modify it. Keep it does not hurt after all.

     */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:45"><expr pos:start="149:5" pos:end="149:44"><name pos:start="149:5" pos:end="149:26"><name pos:start="149:5" pos:end="149:7">irq</name><operator pos:start="149:8" pos:end="149:8">.</operator><name pos:start="149:9" pos:end="149:26">msi_addr_last_bits</name></name> <operator pos:start="149:28" pos:end="149:28">=</operator> <name pos:start="149:30" pos:end="149:44"><name pos:start="149:30" pos:end="149:33">addr</name><operator pos:start="149:34" pos:end="149:34">.</operator><name pos:start="149:35" pos:end="149:44">__not_care</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:41">/* Translate VTDIrq to MSI message */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:47"><expr pos:start="155:5" pos:end="155:46"><call pos:start="155:5" pos:end="155:46"><name pos:start="155:5" pos:end="155:28">vtd_generate_msi_message</name><argument_list pos:start="155:29" pos:end="155:46">(<argument pos:start="155:30" pos:end="155:33"><expr pos:start="155:30" pos:end="155:33"><operator pos:start="155:30" pos:end="155:30">&amp;</operator><name pos:start="155:31" pos:end="155:33">irq</name></expr></argument>, <argument pos:start="155:36" pos:end="155:45"><expr pos:start="155:36" pos:end="155:45"><name pos:start="155:36" pos:end="155:45">translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="163:55"><expr pos:start="159:5" pos:end="163:54"><call pos:start="159:5" pos:end="163:54"><name pos:start="159:5" pos:end="159:15">VTD_DPRINTF</name><argument_list pos:start="159:16" pos:end="163:54">(<argument pos:start="159:17" pos:end="159:18"><expr pos:start="159:17" pos:end="159:18"><name pos:start="159:17" pos:end="159:18">IR</name></expr></argument>, <argument pos:start="159:21" pos:end="161:39"><expr pos:start="159:21" pos:end="161:39"><literal type="string" pos:start="159:21" pos:end="159:37">"mapping MSI 0x%"</literal><name pos:start="159:38" pos:end="159:43">PRIx64</name><literal type="string" pos:start="159:44" pos:end="159:49">":0x%"</literal><name pos:start="159:50" pos:end="159:55">PRIx32</name> <literal type="string" pos:start="159:57" pos:end="159:62">" -&gt; "</literal>

                <literal type="string" pos:start="161:17" pos:end="161:21">"0x%"</literal><name pos:start="161:22" pos:end="161:27">PRIx64</name><literal type="string" pos:start="161:28" pos:end="161:33">":0x%"</literal><name pos:start="161:34" pos:end="161:39">PRIx32</name></expr></argument>, <argument pos:start="161:42" pos:end="161:56"><expr pos:start="161:42" pos:end="161:56"><name pos:start="161:42" pos:end="161:56"><name pos:start="161:42" pos:end="161:47">origin</name><operator pos:start="161:48" pos:end="161:49">-&gt;</operator><name pos:start="161:50" pos:end="161:56">address</name></name></expr></argument>, <argument pos:start="161:59" pos:end="161:70"><expr pos:start="161:59" pos:end="161:70"><name pos:start="161:59" pos:end="161:70"><name pos:start="161:59" pos:end="161:64">origin</name><operator pos:start="161:65" pos:end="161:66">-&gt;</operator><name pos:start="161:67" pos:end="161:70">data</name></name></expr></argument>,

                <argument pos:start="163:17" pos:end="163:35"><expr pos:start="163:17" pos:end="163:35"><name pos:start="163:17" pos:end="163:35"><name pos:start="163:17" pos:end="163:26">translated</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:35">address</name></name></expr></argument>, <argument pos:start="163:38" pos:end="163:53"><expr pos:start="163:38" pos:end="163:53"><name pos:start="163:38" pos:end="163:53"><name pos:start="163:38" pos:end="163:47">translated</name><operator pos:start="163:48" pos:end="163:49">-&gt;</operator><name pos:start="163:50" pos:end="163:53">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="165:5" pos:end="165:13">return <expr pos:start="165:12" pos:end="165:12"><literal type="number" pos:start="165:12" pos:end="165:12">0</literal></expr>;</return>



<label pos:start="169:1" pos:end="169:17"><name pos:start="169:1" pos:end="169:16">do_not_translate</name>:</label>

    <expr_stmt pos:start="171:5" pos:end="171:48"><expr pos:start="171:5" pos:end="171:47"><call pos:start="171:5" pos:end="171:47"><name pos:start="171:5" pos:end="171:10">memcpy</name><argument_list pos:start="171:11" pos:end="171:47">(<argument pos:start="171:12" pos:end="171:21"><expr pos:start="171:12" pos:end="171:21"><name pos:start="171:12" pos:end="171:21">translated</name></expr></argument>, <argument pos:start="171:24" pos:end="171:29"><expr pos:start="171:24" pos:end="171:29"><name pos:start="171:24" pos:end="171:29">origin</name></expr></argument>, <argument pos:start="171:32" pos:end="171:46"><expr pos:start="171:32" pos:end="171:46"><sizeof pos:start="171:32" pos:end="171:46">sizeof<argument_list pos:start="171:38" pos:end="171:46">(<argument pos:start="171:39" pos:end="171:45"><expr pos:start="171:39" pos:end="171:45"><operator pos:start="171:39" pos:end="171:39">*</operator><name pos:start="171:40" pos:end="171:45">origin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="173:5" pos:end="173:13">return <expr pos:start="173:12" pos:end="173:12"><literal type="number" pos:start="173:12" pos:end="173:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
