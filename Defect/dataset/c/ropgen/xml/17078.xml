<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17078.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">channel_run</name><parameter_list pos:start="1:24" pos:end="1:42">(<parameter pos:start="1:25" pos:end="1:41"><decl pos:start="1:25" pos:end="1:41"><type pos:start="1:25" pos:end="1:39"><name pos:start="1:25" pos:end="1:37">DBDMA_channel</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">ch</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">dbdma_cmd</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:22">current</name> <init pos:start="5:24" pos:end="5:37">= <expr pos:start="5:26" pos:end="5:37"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:37"><name pos:start="5:27" pos:end="5:28">ch</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:37">current</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:16">cmd</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:19" pos:end="7:21">key</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:22">req_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">phy_addr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:35"><expr pos:start="15:5" pos:end="15:34"><call pos:start="15:5" pos:end="15:34"><name pos:start="15:5" pos:end="15:17">DBDMA_DPRINTF</name><argument_list pos:start="15:18" pos:end="15:34">(<argument pos:start="15:19" pos:end="15:33"><expr pos:start="15:19" pos:end="15:33"><literal type="string" pos:start="15:19" pos:end="15:33">"channel_run\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:28"><expr pos:start="17:5" pos:end="17:27"><call pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:18">dump_dbdma_cmd</name><argument_list pos:start="17:19" pos:end="17:27">(<argument pos:start="17:20" pos:end="17:26"><expr pos:start="17:20" pos:end="17:26"><name pos:start="17:20" pos:end="17:26">current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:42">/* clear WAKE flag at command fetch */</comment>



    <expr_stmt pos:start="25:5" pos:end="25:49"><expr pos:start="25:5" pos:end="25:48"><name pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:6">ch</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:12">regs</name><index pos:start="25:13" pos:end="25:26">[<expr pos:start="25:14" pos:end="25:25"><name pos:start="25:14" pos:end="25:25">DBDMA_STATUS</name></expr>]</index></name> <operator pos:start="25:28" pos:end="25:29">&amp;=</operator> <call pos:start="25:31" pos:end="25:48"><name pos:start="25:31" pos:end="25:41">cpu_to_be32</name><argument_list pos:start="25:42" pos:end="25:48">(<argument pos:start="25:43" pos:end="25:47"><expr pos:start="25:43" pos:end="25:47"><operator pos:start="25:43" pos:end="25:43">~</operator><name pos:start="25:44" pos:end="25:47">WAKE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:55"><expr pos:start="29:5" pos:end="29:54"><name pos:start="29:5" pos:end="29:7">cmd</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:39"><name pos:start="29:11" pos:end="29:21">le16_to_cpu</name><argument_list pos:start="29:22" pos:end="29:39">(<argument pos:start="29:23" pos:end="29:38"><expr pos:start="29:23" pos:end="29:38"><name pos:start="29:23" pos:end="29:38"><name pos:start="29:23" pos:end="29:29">current</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:38">command</name></name></expr></argument>)</argument_list></call> <operator pos:start="29:41" pos:end="29:41">&amp;</operator> <name pos:start="29:43" pos:end="29:54">COMMAND_MASK</name></expr>;</expr_stmt>



    <switch pos:start="33:5" pos:end="49:5">switch <condition pos:start="33:12" pos:end="33:16">(<expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">cmd</name></expr>)</condition> <block pos:start="33:18" pos:end="49:5">{<block_content pos:start="35:5" pos:end="47:15">

    <case pos:start="35:5" pos:end="35:19">case <expr pos:start="35:10" pos:end="35:18"><name pos:start="35:10" pos:end="35:18">DBDMA_NOP</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><call pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:11">nop</name><argument_list pos:start="37:12" pos:end="37:15">(<argument pos:start="37:13" pos:end="37:14"><expr pos:start="37:13" pos:end="37:14"><name pos:start="37:13" pos:end="37:14">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="39:9" pos:end="39:15">return;</return>



    <case pos:start="43:5" pos:end="43:20">case <expr pos:start="43:10" pos:end="43:19"><name pos:start="43:10" pos:end="43:19">DBDMA_STOP</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="45:17"><expr pos:start="45:9" pos:end="45:16"><call pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:12">stop</name><argument_list pos:start="45:13" pos:end="45:16">(<argument pos:start="45:14" pos:end="45:15"><expr pos:start="45:14" pos:end="45:15"><name pos:start="45:14" pos:end="45:15">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="53:5" pos:end="53:49"><expr pos:start="53:5" pos:end="53:48"><name pos:start="53:5" pos:end="53:7">key</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:39"><name pos:start="53:11" pos:end="53:21">le16_to_cpu</name><argument_list pos:start="53:22" pos:end="53:39">(<argument pos:start="53:23" pos:end="53:38"><expr pos:start="53:23" pos:end="53:38"><name pos:start="53:23" pos:end="53:38"><name pos:start="53:23" pos:end="53:29">current</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:38">command</name></name></expr></argument>)</argument_list></call> <operator pos:start="53:41" pos:end="53:41">&amp;</operator> <literal type="number" pos:start="53:43" pos:end="53:48">0x0700</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:48"><expr pos:start="55:5" pos:end="55:47"><name pos:start="55:5" pos:end="55:13">req_count</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <call pos:start="55:17" pos:end="55:47"><name pos:start="55:17" pos:end="55:27">le16_to_cpu</name><argument_list pos:start="55:28" pos:end="55:47">(<argument pos:start="55:29" pos:end="55:46"><expr pos:start="55:29" pos:end="55:46"><name pos:start="55:29" pos:end="55:46"><name pos:start="55:29" pos:end="55:35">current</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:46">req_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:12">phy_addr</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <call pos:start="57:16" pos:end="57:45"><name pos:start="57:16" pos:end="57:26">le32_to_cpu</name><argument_list pos:start="57:27" pos:end="57:45">(<argument pos:start="57:28" pos:end="57:44"><expr pos:start="57:28" pos:end="57:44"><name pos:start="57:28" pos:end="57:44"><name pos:start="57:28" pos:end="57:34">current</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:44">phy_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:27">(<expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:11">key</name> <operator pos:start="61:13" pos:end="61:14">==</operator> <name pos:start="61:16" pos:end="61:26">KEY_STREAM4</name></expr>)</condition> <block pos:start="61:29" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:15">

        <expr_stmt pos:start="63:9" pos:end="63:51"><expr pos:start="63:9" pos:end="63:50"><call pos:start="63:9" pos:end="63:50"><name pos:start="63:9" pos:end="63:14">printf</name><argument_list pos:start="63:15" pos:end="63:50">(<argument pos:start="63:16" pos:end="63:44"><expr pos:start="63:16" pos:end="63:44"><literal type="string" pos:start="63:16" pos:end="63:44">"command %x, invalid key 4\n"</literal></expr></argument>, <argument pos:start="63:47" pos:end="63:49"><expr pos:start="63:47" pos:end="63:49"><name pos:start="63:47" pos:end="63:49">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:25"><expr pos:start="65:9" pos:end="65:24"><call pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:20">kill_channel</name><argument_list pos:start="65:21" pos:end="65:24">(<argument pos:start="65:22" pos:end="65:23"><expr pos:start="65:22" pos:end="65:23"><name pos:start="65:22" pos:end="65:23">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="73:5" pos:end="105:5">switch <condition pos:start="73:12" pos:end="73:16">(<expr pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">cmd</name></expr>)</condition> <block pos:start="73:18" pos:end="105:5">{<block_content pos:start="75:5" pos:end="103:15">

    <case pos:start="75:5" pos:end="75:21">case <expr pos:start="75:10" pos:end="75:20"><name pos:start="75:10" pos:end="75:20">OUTPUT_MORE</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:54"><expr pos:start="77:9" pos:end="77:53"><call pos:start="77:9" pos:end="77:53"><name pos:start="77:9" pos:end="77:20">start_output</name><argument_list pos:start="77:21" pos:end="77:53">(<argument pos:start="77:22" pos:end="77:23"><expr pos:start="77:22" pos:end="77:23"><name pos:start="77:22" pos:end="77:23">ch</name></expr></argument>, <argument pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><name pos:start="77:26" pos:end="77:28">key</name></expr></argument>, <argument pos:start="77:31" pos:end="77:38"><expr pos:start="77:31" pos:end="77:38"><name pos:start="77:31" pos:end="77:38">phy_addr</name></expr></argument>, <argument pos:start="77:41" pos:end="77:49"><expr pos:start="77:41" pos:end="77:49"><name pos:start="77:41" pos:end="77:49">req_count</name></expr></argument>, <argument pos:start="77:52" pos:end="77:52"><expr pos:start="77:52" pos:end="77:52"><literal type="number" pos:start="77:52" pos:end="77:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="79:9" pos:end="79:15">return;</return>



    <case pos:start="83:5" pos:end="83:21">case <expr pos:start="83:10" pos:end="83:20"><name pos:start="83:10" pos:end="83:20">OUTPUT_LAST</name></expr>:</case>

        <expr_stmt pos:start="85:9" pos:end="85:54"><expr pos:start="85:9" pos:end="85:53"><call pos:start="85:9" pos:end="85:53"><name pos:start="85:9" pos:end="85:20">start_output</name><argument_list pos:start="85:21" pos:end="85:53">(<argument pos:start="85:22" pos:end="85:23"><expr pos:start="85:22" pos:end="85:23"><name pos:start="85:22" pos:end="85:23">ch</name></expr></argument>, <argument pos:start="85:26" pos:end="85:28"><expr pos:start="85:26" pos:end="85:28"><name pos:start="85:26" pos:end="85:28">key</name></expr></argument>, <argument pos:start="85:31" pos:end="85:38"><expr pos:start="85:31" pos:end="85:38"><name pos:start="85:31" pos:end="85:38">phy_addr</name></expr></argument>, <argument pos:start="85:41" pos:end="85:49"><expr pos:start="85:41" pos:end="85:49"><name pos:start="85:41" pos:end="85:49">req_count</name></expr></argument>, <argument pos:start="85:52" pos:end="85:52"><expr pos:start="85:52" pos:end="85:52"><literal type="number" pos:start="85:52" pos:end="85:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="87:9" pos:end="87:15">return;</return>



    <case pos:start="91:5" pos:end="91:20">case <expr pos:start="91:10" pos:end="91:19"><name pos:start="91:10" pos:end="91:19">INPUT_MORE</name></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:53"><expr pos:start="93:9" pos:end="93:52"><call pos:start="93:9" pos:end="93:52"><name pos:start="93:9" pos:end="93:19">start_input</name><argument_list pos:start="93:20" pos:end="93:52">(<argument pos:start="93:21" pos:end="93:22"><expr pos:start="93:21" pos:end="93:22"><name pos:start="93:21" pos:end="93:22">ch</name></expr></argument>, <argument pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:27"><name pos:start="93:25" pos:end="93:27">key</name></expr></argument>, <argument pos:start="93:30" pos:end="93:37"><expr pos:start="93:30" pos:end="93:37"><name pos:start="93:30" pos:end="93:37">phy_addr</name></expr></argument>, <argument pos:start="93:40" pos:end="93:48"><expr pos:start="93:40" pos:end="93:48"><name pos:start="93:40" pos:end="93:48">req_count</name></expr></argument>, <argument pos:start="93:51" pos:end="93:51"><expr pos:start="93:51" pos:end="93:51"><literal type="number" pos:start="93:51" pos:end="93:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="95:9" pos:end="95:15">return;</return>



    <case pos:start="99:5" pos:end="99:20">case <expr pos:start="99:10" pos:end="99:19"><name pos:start="99:10" pos:end="99:19">INPUT_LAST</name></expr>:</case>

        <expr_stmt pos:start="101:9" pos:end="101:53"><expr pos:start="101:9" pos:end="101:52"><call pos:start="101:9" pos:end="101:52"><name pos:start="101:9" pos:end="101:19">start_input</name><argument_list pos:start="101:20" pos:end="101:52">(<argument pos:start="101:21" pos:end="101:22"><expr pos:start="101:21" pos:end="101:22"><name pos:start="101:21" pos:end="101:22">ch</name></expr></argument>, <argument pos:start="101:25" pos:end="101:27"><expr pos:start="101:25" pos:end="101:27"><name pos:start="101:25" pos:end="101:27">key</name></expr></argument>, <argument pos:start="101:30" pos:end="101:37"><expr pos:start="101:30" pos:end="101:37"><name pos:start="101:30" pos:end="101:37">phy_addr</name></expr></argument>, <argument pos:start="101:40" pos:end="101:48"><expr pos:start="101:40" pos:end="101:48"><name pos:start="101:40" pos:end="101:48">req_count</name></expr></argument>, <argument pos:start="101:51" pos:end="101:51"><expr pos:start="101:51" pos:end="101:51"><literal type="number" pos:start="101:51" pos:end="101:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:23">(<expr pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:11">key</name> <operator pos:start="109:13" pos:end="109:13">&lt;</operator> <name pos:start="109:15" pos:end="109:22">KEY_REGS</name></expr>)</condition> <block pos:start="109:25" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:25">

        <expr_stmt pos:start="111:9" pos:end="111:57"><expr pos:start="111:9" pos:end="111:56"><call pos:start="111:9" pos:end="111:56"><name pos:start="111:9" pos:end="111:14">printf</name><argument_list pos:start="111:15" pos:end="111:56">(<argument pos:start="111:16" pos:end="111:45"><expr pos:start="111:16" pos:end="111:45"><literal type="string" pos:start="111:16" pos:end="111:45">"command %x, invalid key %x\n"</literal></expr></argument>, <argument pos:start="111:48" pos:end="111:50"><expr pos:start="111:48" pos:end="111:50"><name pos:start="111:48" pos:end="111:50">cmd</name></expr></argument>, <argument pos:start="111:53" pos:end="111:55"><expr pos:start="111:53" pos:end="111:55"><name pos:start="111:53" pos:end="111:55">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:25"><expr pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:11">key</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <name pos:start="113:15" pos:end="113:24">KEY_SYSTEM</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="123:7">/* for LOAD_WORD and STORE_WORD, req_count is on 3 bits

     * and BRANCH is invalid

     */</comment>



    <expr_stmt pos:start="127:5" pos:end="127:35"><expr pos:start="127:5" pos:end="127:34"><name pos:start="127:5" pos:end="127:13">req_count</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <name pos:start="127:17" pos:end="127:25">req_count</name> <operator pos:start="127:27" pos:end="127:27">&amp;</operator> <literal type="number" pos:start="127:29" pos:end="127:34">0x0007</literal></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="143:22"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:24">(<expr pos:start="129:9" pos:end="129:23"><name pos:start="129:9" pos:end="129:17">req_count</name> <operator pos:start="129:19" pos:end="129:19">&amp;</operator> <literal type="number" pos:start="129:21" pos:end="129:23">0x4</literal></expr>)</condition> <block pos:start="129:26" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:23">

        <expr_stmt pos:start="131:9" pos:end="131:22"><expr pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:17">req_count</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <literal type="number" pos:start="131:21" pos:end="131:21">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:23"><expr pos:start="133:9" pos:end="133:22"><name pos:start="133:9" pos:end="133:16">phy_addr</name> <operator pos:start="133:18" pos:end="133:19">&amp;=</operator> <operator pos:start="133:21" pos:end="133:21">~</operator><literal type="number" pos:start="133:22" pos:end="133:22">3</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="135:7" pos:end="141:5">else if <condition pos:start="135:15" pos:end="135:31">(<expr pos:start="135:16" pos:end="135:30"><name pos:start="135:16" pos:end="135:24">req_count</name> <operator pos:start="135:26" pos:end="135:26">&amp;</operator> <literal type="number" pos:start="135:28" pos:end="135:30">0x2</literal></expr>)</condition> <block pos:start="135:33" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:23">

        <expr_stmt pos:start="137:9" pos:end="137:22"><expr pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:17">req_count</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <literal type="number" pos:start="137:21" pos:end="137:21">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:23"><expr pos:start="139:9" pos:end="139:22"><name pos:start="139:9" pos:end="139:16">phy_addr</name> <operator pos:start="139:18" pos:end="139:19">&amp;=</operator> <operator pos:start="139:21" pos:end="139:21">~</operator><literal type="number" pos:start="139:22" pos:end="139:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="143:22">else<block type="pseudo" pos:start="143:9" pos:end="143:22"><block_content pos:start="143:9" pos:end="143:22">

        <expr_stmt pos:start="143:9" pos:end="143:22"><expr pos:start="143:9" pos:end="143:21"><name pos:start="143:9" pos:end="143:17">req_count</name> <operator pos:start="143:19" pos:end="143:19">=</operator> <literal type="number" pos:start="143:21" pos:end="143:21">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <switch pos:start="147:5" pos:end="163:5">switch <condition pos:start="147:12" pos:end="147:16">(<expr pos:start="147:13" pos:end="147:15"><name pos:start="147:13" pos:end="147:15">cmd</name></expr>)</condition> <block pos:start="147:18" pos:end="163:5">{<block_content pos:start="149:5" pos:end="161:15">

    <case pos:start="149:5" pos:end="149:19">case <expr pos:start="149:10" pos:end="149:18"><name pos:start="149:10" pos:end="149:18">LOAD_WORD</name></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:48"><expr pos:start="151:9" pos:end="151:47"><call pos:start="151:9" pos:end="151:47"><name pos:start="151:9" pos:end="151:17">load_word</name><argument_list pos:start="151:18" pos:end="151:47">(<argument pos:start="151:19" pos:end="151:20"><expr pos:start="151:19" pos:end="151:20"><name pos:start="151:19" pos:end="151:20">ch</name></expr></argument>, <argument pos:start="151:23" pos:end="151:25"><expr pos:start="151:23" pos:end="151:25"><name pos:start="151:23" pos:end="151:25">key</name></expr></argument>, <argument pos:start="151:28" pos:end="151:35"><expr pos:start="151:28" pos:end="151:35"><name pos:start="151:28" pos:end="151:35">phy_addr</name></expr></argument>, <argument pos:start="151:38" pos:end="151:46"><expr pos:start="151:38" pos:end="151:46"><name pos:start="151:38" pos:end="151:46">req_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="153:9" pos:end="153:15">return;</return>



    <case pos:start="157:5" pos:end="157:20">case <expr pos:start="157:10" pos:end="157:19"><name pos:start="157:10" pos:end="157:19">STORE_WORD</name></expr>:</case>

        <expr_stmt pos:start="159:9" pos:end="159:49"><expr pos:start="159:9" pos:end="159:48"><call pos:start="159:9" pos:end="159:48"><name pos:start="159:9" pos:end="159:18">store_word</name><argument_list pos:start="159:19" pos:end="159:48">(<argument pos:start="159:20" pos:end="159:21"><expr pos:start="159:20" pos:end="159:21"><name pos:start="159:20" pos:end="159:21">ch</name></expr></argument>, <argument pos:start="159:24" pos:end="159:26"><expr pos:start="159:24" pos:end="159:26"><name pos:start="159:24" pos:end="159:26">key</name></expr></argument>, <argument pos:start="159:29" pos:end="159:36"><expr pos:start="159:29" pos:end="159:36"><name pos:start="159:29" pos:end="159:36">phy_addr</name></expr></argument>, <argument pos:start="159:39" pos:end="159:47"><expr pos:start="159:39" pos:end="159:47"><name pos:start="159:39" pos:end="159:47">req_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="161:9" pos:end="161:15">return;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
