<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5717.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:10">ram_addr_t</name></type> <name pos:start="1:12" pos:end="1:34">qemu_ram_alloc_from_ptr</name><parameter_list pos:start="1:35" pos:end="3:52">(<parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><name pos:start="1:36" pos:end="1:45">ram_addr_t</name></type> <name pos:start="1:47" pos:end="1:50">size</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">host</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:51"><decl pos:start="3:36" pos:end="3:51"><type pos:start="3:36" pos:end="3:51"><name pos:start="3:36" pos:end="3:47">MemoryRegion</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:51">mr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:29">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">RAMBlock</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:23">new_block</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:35"><expr pos:start="11:5" pos:end="11:34"><name pos:start="11:5" pos:end="11:8">size</name> <operator pos:start="11:10" pos:end="11:10">=</operator> <call pos:start="11:12" pos:end="11:34"><name pos:start="11:12" pos:end="11:28">TARGET_PAGE_ALIGN</name><argument_list pos:start="11:29" pos:end="11:34">(<argument pos:start="11:30" pos:end="11:33"><expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:46"><expr pos:start="13:5" pos:end="13:45"><name pos:start="13:5" pos:end="13:13">new_block</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <call pos:start="13:17" pos:end="13:45"><name pos:start="13:17" pos:end="13:25">g_malloc0</name><argument_list pos:start="13:26" pos:end="13:45">(<argument pos:start="13:27" pos:end="13:44"><expr pos:start="13:27" pos:end="13:44"><sizeof pos:start="13:27" pos:end="13:44">sizeof<argument_list pos:start="13:33" pos:end="13:44">(<argument pos:start="13:34" pos:end="13:43"><expr pos:start="13:34" pos:end="13:43"><operator pos:start="13:34" pos:end="13:34">*</operator><name pos:start="13:35" pos:end="13:43">new_block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:13">new_block</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:17">mr</name></name> <operator pos:start="17:19" pos:end="17:19">=</operator> <name pos:start="17:21" pos:end="17:22">mr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:46"><expr pos:start="19:5" pos:end="19:45"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:13">new_block</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:21">offset</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <call pos:start="19:25" pos:end="19:45"><name pos:start="19:25" pos:end="19:39">find_ram_offset</name><argument_list pos:start="19:40" pos:end="19:45">(<argument pos:start="19:41" pos:end="19:44"><expr pos:start="19:41" pos:end="19:44"><name pos:start="19:41" pos:end="19:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="73:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><name pos:start="21:9" pos:end="21:12">host</name></expr>)</condition> <block pos:start="21:15" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:46">

        <expr_stmt pos:start="23:9" pos:end="23:31"><expr pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:17">new_block</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:23">host</name></name> <operator pos:start="23:25" pos:end="23:25">=</operator> <name pos:start="23:27" pos:end="23:30">host</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:46"><expr pos:start="25:9" pos:end="25:45"><name pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:17">new_block</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:24">flags</name></name> <operator pos:start="25:26" pos:end="25:27">|=</operator> <name pos:start="25:29" pos:end="25:45">RAM_PREALLOC_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="73:5">else <block pos:start="27:12" pos:end="73:5">{<block_content pos:start="29:9" pos:end="71:9">

        <if_stmt pos:start="29:9" pos:end="71:9"><if pos:start="29:9" pos:end="51:9">if <condition pos:start="29:12" pos:end="29:21">(<expr pos:start="29:13" pos:end="29:20"><name pos:start="29:13" pos:end="29:20">mem_path</name></expr>)</condition> <block pos:start="29:23" pos:end="51:9">{<block_content pos:start="33:13" pos:end="50:0">

<cpp:if pos:start="31:1" pos:end="31:49">#<cpp:directive pos:start="31:2" pos:end="31:3">if</cpp:directive> <expr pos:start="31:5" pos:end="31:49"><call pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:11">defined</name> <argument_list pos:start="31:13" pos:end="31:23">(<argument pos:start="31:14" pos:end="31:22"><expr pos:start="31:14" pos:end="31:22"><name pos:start="31:14" pos:end="31:22">__linux__</name></expr></argument>)</argument_list></call> <operator pos:start="31:25" pos:end="31:26">&amp;&amp;</operator> <operator pos:start="31:28" pos:end="31:28">!</operator><call pos:start="31:29" pos:end="31:49"><name pos:start="31:29" pos:end="31:35">defined</name><argument_list pos:start="31:36" pos:end="31:49">(<argument pos:start="31:37" pos:end="31:48"><expr pos:start="31:37" pos:end="31:48"><name pos:start="31:37" pos:end="31:48">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="33:13" pos:end="33:72"><expr pos:start="33:13" pos:end="33:71"><name pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:21">new_block</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:27">host</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <call pos:start="33:31" pos:end="33:71"><name pos:start="33:31" pos:end="33:44">file_ram_alloc</name><argument_list pos:start="33:45" pos:end="33:71">(<argument pos:start="33:46" pos:end="33:54"><expr pos:start="33:46" pos:end="33:54"><name pos:start="33:46" pos:end="33:54">new_block</name></expr></argument>, <argument pos:start="33:57" pos:end="33:60"><expr pos:start="33:57" pos:end="33:60"><name pos:start="33:57" pos:end="33:60">size</name></expr></argument>, <argument pos:start="33:63" pos:end="33:70"><expr pos:start="33:63" pos:end="33:70"><name pos:start="33:63" pos:end="33:70">mem_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="44:0"><if pos:start="35:13" pos:end="44:0">if <condition pos:start="35:16" pos:end="35:33">(<expr pos:start="35:17" pos:end="35:32"><operator pos:start="35:17" pos:end="35:17">!</operator><name pos:start="35:18" pos:end="35:32"><name pos:start="35:18" pos:end="35:26">new_block</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:32">host</name></name></expr>)</condition> <block pos:start="35:35" pos:end="44:0">{<block_content pos:start="37:17" pos:end="39:73">

                <expr_stmt pos:start="37:17" pos:end="37:53"><expr pos:start="37:17" pos:end="37:52"><name pos:start="37:17" pos:end="37:31"><name pos:start="37:17" pos:end="37:25">new_block</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:31">host</name></name> <operator pos:start="37:33" pos:end="37:33">=</operator> <call pos:start="37:35" pos:end="37:52"><name pos:start="37:35" pos:end="37:46">qemu_vmalloc</name><argument_list pos:start="37:47" pos:end="37:52">(<argument pos:start="37:48" pos:end="37:51"><expr pos:start="37:48" pos:end="37:51"><name pos:start="37:48" pos:end="37:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:73"><expr pos:start="39:17" pos:end="39:72"><call pos:start="39:17" pos:end="39:72"><name pos:start="39:17" pos:end="39:28">qemu_madvise</name><argument_list pos:start="39:29" pos:end="39:72">(<argument pos:start="39:30" pos:end="39:44"><expr pos:start="39:30" pos:end="39:44"><name pos:start="39:30" pos:end="39:44"><name pos:start="39:30" pos:end="39:38">new_block</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:44">host</name></name></expr></argument>, <argument pos:start="39:47" pos:end="39:50"><expr pos:start="39:47" pos:end="39:50"><name pos:start="39:47" pos:end="39:50">size</name></expr></argument>, <argument pos:start="39:53" pos:end="39:71"><expr pos:start="39:53" pos:end="39:71"><name pos:start="39:53" pos:end="39:71">QEMU_MADV_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:else pos:start="43:1" pos:end="43:5">#<cpp:directive pos:start="43:2" pos:end="43:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="45:13" pos:end="45:62"><expr pos:start="45:13" pos:end="45:61"><call pos:start="45:13" pos:end="45:61"><name pos:start="45:13" pos:end="45:19">fprintf</name><argument_list pos:start="45:20" pos:end="45:61">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:26">stderr</name></expr></argument>, <argument pos:start="45:29" pos:end="45:60"><expr pos:start="45:29" pos:end="45:60"><literal type="string" pos:start="45:29" pos:end="45:60">"-mem-path option unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="50:0"><expr pos:start="47:13" pos:end="47:19"><call pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:16">exit</name><argument_list pos:start="47:17" pos:end="47:19">(<argument pos:start="47:18" pos:end="47:18"><expr pos:start="47:18" pos:end="47:18"><literal type="number" pos:start="47:18" pos:end="47:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="51:11" pos:end="71:9">else <block pos:start="51:16" pos:end="71:9">{<block_content pos:start="53:13" pos:end="69:69">

            <if_stmt pos:start="53:13" pos:end="67:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:30">(<expr pos:start="53:17" pos:end="53:29"><call pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:27">xen_enabled</name><argument_list pos:start="53:28" pos:end="53:29">()</argument_list></call></expr>)</condition> <block pos:start="53:32" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:59">

                <expr_stmt pos:start="55:17" pos:end="55:59"><expr pos:start="55:17" pos:end="55:58"><call pos:start="55:17" pos:end="55:58"><name pos:start="55:17" pos:end="55:29">xen_ram_alloc</name><argument_list pos:start="55:30" pos:end="55:58">(<argument pos:start="55:31" pos:end="55:47"><expr pos:start="55:31" pos:end="55:47"><name pos:start="55:31" pos:end="55:47"><name pos:start="55:31" pos:end="55:39">new_block</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:47">offset</name></name></expr></argument>, <argument pos:start="55:50" pos:end="55:53"><expr pos:start="55:50" pos:end="55:53"><name pos:start="55:50" pos:end="55:53">size</name></expr></argument>, <argument pos:start="55:56" pos:end="55:57"><expr pos:start="55:56" pos:end="55:57"><name pos:start="55:56" pos:end="55:57">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="57:15" pos:end="63:13">else if <condition pos:start="57:23" pos:end="57:37">(<expr pos:start="57:24" pos:end="57:36"><call pos:start="57:24" pos:end="57:36"><name pos:start="57:24" pos:end="57:34">kvm_enabled</name><argument_list pos:start="57:35" pos:end="57:36">()</argument_list></call></expr>)</condition> <block pos:start="57:39" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:52">

                <comment type="block" pos:start="59:17" pos:end="59:75">/* some s390/kvm configurations have special constraints */</comment>

                <expr_stmt pos:start="61:17" pos:end="61:52"><expr pos:start="61:17" pos:end="61:51"><name pos:start="61:17" pos:end="61:31"><name pos:start="61:17" pos:end="61:25">new_block</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:31">host</name></name> <operator pos:start="61:33" pos:end="61:33">=</operator> <call pos:start="61:35" pos:end="61:51"><name pos:start="61:35" pos:end="61:45">kvm_vmalloc</name><argument_list pos:start="61:46" pos:end="61:51">(<argument pos:start="61:47" pos:end="61:50"><expr pos:start="61:47" pos:end="61:50"><name pos:start="61:47" pos:end="61:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="63:15" pos:end="67:13">else <block pos:start="63:20" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:53">

                <expr_stmt pos:start="65:17" pos:end="65:53"><expr pos:start="65:17" pos:end="65:52"><name pos:start="65:17" pos:end="65:31"><name pos:start="65:17" pos:end="65:25">new_block</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:31">host</name></name> <operator pos:start="65:33" pos:end="65:33">=</operator> <call pos:start="65:35" pos:end="65:52"><name pos:start="65:35" pos:end="65:46">qemu_vmalloc</name><argument_list pos:start="65:47" pos:end="65:52">(<argument pos:start="65:48" pos:end="65:51"><expr pos:start="65:48" pos:end="65:51"><name pos:start="65:48" pos:end="65:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:69"><expr pos:start="69:13" pos:end="69:68"><call pos:start="69:13" pos:end="69:68"><name pos:start="69:13" pos:end="69:24">qemu_madvise</name><argument_list pos:start="69:25" pos:end="69:68">(<argument pos:start="69:26" pos:end="69:40"><expr pos:start="69:26" pos:end="69:40"><name pos:start="69:26" pos:end="69:40"><name pos:start="69:26" pos:end="69:34">new_block</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:40">host</name></name></expr></argument>, <argument pos:start="69:43" pos:end="69:46"><expr pos:start="69:43" pos:end="69:46"><name pos:start="69:43" pos:end="69:46">size</name></expr></argument>, <argument pos:start="69:49" pos:end="69:67"><expr pos:start="69:49" pos:end="69:67"><name pos:start="69:49" pos:end="69:67">QEMU_MADV_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:21"><name pos:start="75:5" pos:end="75:13">new_block</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:21">length</name></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:28">size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:57"><expr pos:start="79:5" pos:end="79:56"><call pos:start="79:5" pos:end="79:56"><name pos:start="79:5" pos:end="79:21">QLIST_INSERT_HEAD</name><argument_list pos:start="79:22" pos:end="79:56">(<argument pos:start="79:23" pos:end="79:38"><expr pos:start="79:23" pos:end="79:38"><operator pos:start="79:23" pos:end="79:23">&amp;</operator><name pos:start="79:24" pos:end="79:38"><name pos:start="79:24" pos:end="79:31">ram_list</name><operator pos:start="79:32" pos:end="79:32">.</operator><name pos:start="79:33" pos:end="79:38">blocks</name></name></expr></argument>, <argument pos:start="79:41" pos:end="79:49"><expr pos:start="79:41" pos:end="79:49"><name pos:start="79:41" pos:end="79:49">new_block</name></expr></argument>, <argument pos:start="79:52" pos:end="79:55"><expr pos:start="79:52" pos:end="79:55"><name pos:start="79:52" pos:end="79:55">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="85:78"><expr pos:start="83:5" pos:end="85:77"><name pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:12">ram_list</name><operator pos:start="83:13" pos:end="83:13">.</operator><name pos:start="83:14" pos:end="83:23">phys_dirty</name></name> <operator pos:start="83:25" pos:end="83:25">=</operator> <call pos:start="83:27" pos:end="85:77"><name pos:start="83:27" pos:end="83:35">g_realloc</name><argument_list pos:start="83:36" pos:end="85:77">(<argument pos:start="83:37" pos:end="83:55"><expr pos:start="83:37" pos:end="83:55"><name pos:start="83:37" pos:end="83:55"><name pos:start="83:37" pos:end="83:44">ram_list</name><operator pos:start="83:45" pos:end="83:45">.</operator><name pos:start="83:46" pos:end="83:55">phys_dirty</name></name></expr></argument>,

                                       <argument pos:start="85:40" pos:end="85:76"><expr pos:start="85:40" pos:end="85:76"><call pos:start="85:40" pos:end="85:56"><name pos:start="85:40" pos:end="85:54">last_ram_offset</name><argument_list pos:start="85:55" pos:end="85:56">()</argument_list></call> <operator pos:start="85:58" pos:end="85:59">&gt;&gt;</operator> <name pos:start="85:61" pos:end="85:76">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:71"><expr pos:start="89:5" pos:end="89:70"><call pos:start="89:5" pos:end="89:70"><name pos:start="89:5" pos:end="89:39">cpu_physical_memory_set_dirty_range</name><argument_list pos:start="89:40" pos:end="89:70">(<argument pos:start="89:41" pos:end="89:57"><expr pos:start="89:41" pos:end="89:57"><name pos:start="89:41" pos:end="89:57"><name pos:start="89:41" pos:end="89:49">new_block</name><operator pos:start="89:50" pos:end="89:51">-&gt;</operator><name pos:start="89:52" pos:end="89:57">offset</name></name></expr></argument>, <argument pos:start="89:60" pos:end="89:63"><expr pos:start="89:60" pos:end="89:63"><name pos:start="89:60" pos:end="89:63">size</name></expr></argument>, <argument pos:start="89:66" pos:end="89:69"><expr pos:start="89:66" pos:end="89:69"><literal type="number" pos:start="89:66" pos:end="89:69">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="95:54"><if pos:start="93:5" pos:end="95:54">if <condition pos:start="93:8" pos:end="93:22">(<expr pos:start="93:9" pos:end="93:21"><call pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:19">kvm_enabled</name><argument_list pos:start="93:20" pos:end="93:21">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:54"><block_content pos:start="95:9" pos:end="95:54">

        <expr_stmt pos:start="95:9" pos:end="95:54"><expr pos:start="95:9" pos:end="95:53"><call pos:start="95:9" pos:end="95:53"><name pos:start="95:9" pos:end="95:30">kvm_setup_guest_memory</name><argument_list pos:start="95:31" pos:end="95:53">(<argument pos:start="95:32" pos:end="95:46"><expr pos:start="95:32" pos:end="95:46"><name pos:start="95:32" pos:end="95:46"><name pos:start="95:32" pos:end="95:40">new_block</name><operator pos:start="95:41" pos:end="95:42">-&gt;</operator><name pos:start="95:43" pos:end="95:46">host</name></name></expr></argument>, <argument pos:start="95:49" pos:end="95:52"><expr pos:start="95:49" pos:end="95:52"><name pos:start="95:49" pos:end="95:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="99:5" pos:end="99:29">return <expr pos:start="99:12" pos:end="99:28"><name pos:start="99:12" pos:end="99:28"><name pos:start="99:12" pos:end="99:20">new_block</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:28">offset</name></name></expr>;</return>

</block_content>}</block></function></unit>
