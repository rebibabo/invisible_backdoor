<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10371.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:14"><name pos:start="1:1" pos:end="1:12">pp_context_t</name> <modifier pos:start="1:14" pos:end="1:14">*</modifier></type><name pos:start="1:15" pos:end="1:28">pp_get_context</name><parameter_list pos:start="1:29" pos:end="1:64">(<parameter pos:start="1:30" pos:end="1:38"><decl pos:start="1:30" pos:end="1:38"><type pos:start="1:30" pos:end="1:38"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:38">width</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:50"><decl pos:start="1:41" pos:end="1:50"><type pos:start="1:41" pos:end="1:50"><name pos:start="1:41" pos:end="1:43">int</name></type> <name pos:start="1:45" pos:end="1:50">height</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:63"><decl pos:start="1:53" pos:end="1:63"><type pos:start="1:53" pos:end="1:63"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:63">cpuCaps</name></decl></parameter>)</parameter_list><block pos:start="1:65" pos:end="41:1">{<block_content pos:start="3:9" pos:end="39:17">

	<decl_stmt pos:start="3:9" pos:end="3:54"><decl pos:start="3:9" pos:end="3:53"><type pos:start="3:9" pos:end="3:19"><name pos:start="3:9" pos:end="3:17">PPContext</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:20">c</name><init pos:start="3:21" pos:end="3:53">= <expr pos:start="3:23" pos:end="3:53"><call pos:start="3:23" pos:end="3:53"><name pos:start="3:23" pos:end="3:30">memalign</name><argument_list pos:start="3:31" pos:end="3:53">(<argument pos:start="3:32" pos:end="3:33"><expr pos:start="3:32" pos:end="3:33"><literal type="number" pos:start="3:32" pos:end="3:33">32</literal></expr></argument>, <argument pos:start="3:36" pos:end="3:52"><expr pos:start="3:36" pos:end="3:52"><sizeof pos:start="3:36" pos:end="3:52">sizeof<argument_list pos:start="3:42" pos:end="3:52">(<argument pos:start="3:43" pos:end="3:51"><expr pos:start="3:43" pos:end="3:51"><name pos:start="3:43" pos:end="3:51">PPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="5:9" pos:end="5:14"><decl pos:start="5:9" pos:end="5:13"><type pos:start="5:9" pos:end="5:11"><name pos:start="5:9" pos:end="5:11">int</name></type> <name pos:start="5:13" pos:end="5:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:37"><decl pos:start="7:9" pos:end="7:36"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:18">stride</name><init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><operator pos:start="7:21" pos:end="7:21">(</operator><name pos:start="7:22" pos:end="7:26">width</name><operator pos:start="7:27" pos:end="7:27">+</operator><literal type="number" pos:start="7:28" pos:end="7:29">15</literal><operator pos:start="7:30" pos:end="7:30">)</operator><operator pos:start="7:31" pos:end="7:31">&amp;</operator><operator pos:start="7:32" pos:end="7:32">(</operator><operator pos:start="7:33" pos:end="7:33">~</operator><literal type="number" pos:start="7:34" pos:end="7:35">15</literal><operator pos:start="7:36" pos:end="7:36">)</operator></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="7:39" pos:end="7:72">//assumed / will realloc if needed</comment>

        

	<expr_stmt pos:start="11:9" pos:end="11:40"><expr pos:start="11:9" pos:end="11:39"><call pos:start="11:9" pos:end="11:39"><name pos:start="11:9" pos:end="11:14">memset</name><argument_list pos:start="11:15" pos:end="11:39">(<argument pos:start="11:16" pos:end="11:16"><expr pos:start="11:16" pos:end="11:16"><name pos:start="11:16" pos:end="11:16">c</name></expr></argument>, <argument pos:start="11:19" pos:end="11:19"><expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></argument>, <argument pos:start="11:22" pos:end="11:38"><expr pos:start="11:22" pos:end="11:38"><sizeof pos:start="11:22" pos:end="11:38">sizeof<argument_list pos:start="11:28" pos:end="11:38">(<argument pos:start="11:29" pos:end="11:37"><expr pos:start="11:29" pos:end="11:37"><name pos:start="11:29" pos:end="11:37">PPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="13:9" pos:end="13:28"><expr pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:9">c</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:18">cpuCaps</name></name><operator pos:start="13:19" pos:end="13:19">=</operator> <name pos:start="13:21" pos:end="13:27">cpuCaps</name></expr>;</expr_stmt>

	<if_stmt pos:start="15:9" pos:end="27:9"><if pos:start="15:9" pos:end="21:9">if<condition pos:start="15:11" pos:end="15:29">(<expr pos:start="15:12" pos:end="15:28"><name pos:start="15:12" pos:end="15:18">cpuCaps</name><operator pos:start="15:19" pos:end="15:19">&amp;</operator><name pos:start="15:20" pos:end="15:28">PP_FORMAT</name></expr>)</condition><block pos:start="15:30" pos:end="21:9">{<block_content pos:start="17:17" pos:end="19:54">

		<expr_stmt pos:start="17:17" pos:end="17:49"><expr pos:start="17:17" pos:end="17:48"><name pos:start="17:17" pos:end="17:35"><name pos:start="17:17" pos:end="17:17">c</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:35">hChromaSubSample</name></name><operator pos:start="17:36" pos:end="17:36">=</operator> <name pos:start="17:38" pos:end="17:44">cpuCaps</name><operator pos:start="17:45" pos:end="17:45">&amp;</operator><literal type="number" pos:start="17:46" pos:end="17:48">0x3</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="19:17" pos:end="19:54"><expr pos:start="19:17" pos:end="19:53"><name pos:start="19:17" pos:end="19:35"><name pos:start="19:17" pos:end="19:17">c</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:35">vChromaSubSample</name></name><operator pos:start="19:36" pos:end="19:36">=</operator> <operator pos:start="19:38" pos:end="19:38">(</operator><name pos:start="19:39" pos:end="19:45">cpuCaps</name><operator pos:start="19:46" pos:end="19:47">&gt;&gt;</operator><literal type="number" pos:start="19:48" pos:end="19:48">4</literal><operator pos:start="19:49" pos:end="19:49">)</operator><operator pos:start="19:50" pos:end="19:50">&amp;</operator><literal type="number" pos:start="19:51" pos:end="19:53">0x3</literal></expr>;</expr_stmt>

	</block_content>}</block></if><else pos:start="21:10" pos:end="27:9">else<block pos:start="21:14" pos:end="27:9">{<block_content pos:start="23:17" pos:end="25:39">

		<expr_stmt pos:start="23:17" pos:end="23:39"><expr pos:start="23:17" pos:end="23:38"><name pos:start="23:17" pos:end="23:35"><name pos:start="23:17" pos:end="23:17">c</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:35">hChromaSubSample</name></name><operator pos:start="23:36" pos:end="23:36">=</operator> <literal type="number" pos:start="23:38" pos:end="23:38">1</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="25:17" pos:end="25:39"><expr pos:start="25:17" pos:end="25:38"><name pos:start="25:17" pos:end="25:35"><name pos:start="25:17" pos:end="25:17">c</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:35">vChromaSubSample</name></name><operator pos:start="25:36" pos:end="25:36">=</operator> <literal type="number" pos:start="25:38" pos:end="25:38">1</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>



	<expr_stmt pos:start="31:9" pos:end="31:49"><expr pos:start="31:9" pos:end="31:48"><call pos:start="31:9" pos:end="31:48"><name pos:start="31:9" pos:end="31:22">reallocBuffers</name><argument_list pos:start="31:23" pos:end="31:48">(<argument pos:start="31:24" pos:end="31:24"><expr pos:start="31:24" pos:end="31:24"><name pos:start="31:24" pos:end="31:24">c</name></expr></argument>, <argument pos:start="31:27" pos:end="31:31"><expr pos:start="31:27" pos:end="31:31"><name pos:start="31:27" pos:end="31:31">width</name></expr></argument>, <argument pos:start="31:34" pos:end="31:39"><expr pos:start="31:34" pos:end="31:39"><name pos:start="31:34" pos:end="31:39">height</name></expr></argument>, <argument pos:start="31:42" pos:end="31:47"><expr pos:start="31:42" pos:end="31:47"><name pos:start="31:42" pos:end="31:47">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

	<expr_stmt pos:start="35:9" pos:end="35:23"><expr pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:9">c</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:19">frameNum</name></name><operator pos:start="35:20" pos:end="35:20">=</operator><operator pos:start="35:21" pos:end="35:21">-</operator><literal type="number" pos:start="35:22" pos:end="35:22">1</literal></expr>;</expr_stmt>



	<return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><name pos:start="39:16" pos:end="39:16">c</name></expr>;</return>

</block_content>}</block></function>
</unit>
