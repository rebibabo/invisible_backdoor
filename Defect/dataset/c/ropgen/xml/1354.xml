<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1354.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">checkasm_report</name><parameter_list pos:start="1:21" pos:end="1:43">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:33"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:31">char</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:37">name</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:42"><decl pos:start="1:40" pos:end="1:42"><type pos:start="1:40" pos:end="1:42"><modifier pos:start="1:40" pos:end="1:42">...</modifier></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:5">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <name pos:start="5:12" pos:end="5:14">int</name></type> <name pos:start="5:16" pos:end="5:27">prev_checked</name></decl>, <decl pos:start="5:30" pos:end="5:40"><type ref="prev" pos:start="5:5" pos:end="5:14"/><name pos:start="5:30" pos:end="5:40">prev_failed</name></decl>, <decl pos:start="5:43" pos:end="5:52"><type ref="prev" pos:start="5:5" pos:end="5:14"/><name pos:start="5:43" pos:end="5:52">max_length</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="83:5"><if pos:start="9:5" pos:end="55:5">if <condition pos:start="9:8" pos:end="9:41">(<expr pos:start="9:9" pos:end="9:40"><name pos:start="9:9" pos:end="9:25"><name pos:start="9:9" pos:end="9:13">state</name><operator pos:start="9:14" pos:end="9:14">.</operator><name pos:start="9:15" pos:end="9:25">num_checked</name></name> <operator pos:start="9:27" pos:end="9:27">&gt;</operator> <name pos:start="9:29" pos:end="9:40">prev_checked</name></expr>)</condition> <block pos:start="9:43" pos:end="55:5">{<block_content pos:start="11:9" pos:end="53:40">

        <expr_stmt pos:start="11:9" pos:end="11:25"><expr pos:start="11:9" pos:end="11:24"><call pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:22">print_cpu_name</name><argument_list pos:start="11:23" pos:end="11:24">()</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="15:9" pos:end="35:79"><if pos:start="15:9" pos:end="33:9">if <condition pos:start="15:12" pos:end="15:18">(<expr pos:start="15:13" pos:end="15:17"><operator pos:start="15:13" pos:end="15:13">*</operator><name pos:start="15:14" pos:end="15:17">name</name></expr>)</condition> <block pos:start="15:20" pos:end="33:9">{<block_content pos:start="17:13" pos:end="31:66">

            <decl_stmt pos:start="17:13" pos:end="17:40"><decl pos:start="17:13" pos:end="17:39"><type pos:start="17:13" pos:end="17:15"><name pos:start="17:13" pos:end="17:15">int</name></type> <name pos:start="17:17" pos:end="17:26">pad_length</name> <init pos:start="17:28" pos:end="17:39">= <expr pos:start="17:30" pos:end="17:39"><name pos:start="17:30" pos:end="17:39">max_length</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="19:13" pos:end="19:24"><decl pos:start="19:13" pos:end="19:23"><type pos:start="19:13" pos:end="19:19"><name pos:start="19:13" pos:end="19:19">va_list</name></type> <name pos:start="19:21" pos:end="19:23">arg</name></decl>;</decl_stmt>



            <expr_stmt pos:start="23:13" pos:end="23:35"><expr pos:start="23:13" pos:end="23:34"><call pos:start="23:13" pos:end="23:34"><name pos:start="23:13" pos:end="23:19">fprintf</name><argument_list pos:start="23:20" pos:end="23:34">(<argument pos:start="23:21" pos:end="23:26"><expr pos:start="23:21" pos:end="23:26"><name pos:start="23:21" pos:end="23:26">stderr</name></expr></argument>, <argument pos:start="23:29" pos:end="23:33"><expr pos:start="23:29" pos:end="23:33"><literal type="string" pos:start="23:29" pos:end="23:33">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:32"><expr pos:start="25:13" pos:end="25:31"><call pos:start="25:13" pos:end="25:31"><name pos:start="25:13" pos:end="25:20">va_start</name><argument_list pos:start="25:21" pos:end="25:31">(<argument pos:start="25:22" pos:end="25:24"><expr pos:start="25:22" pos:end="25:24"><name pos:start="25:22" pos:end="25:24">arg</name></expr></argument>, <argument pos:start="25:27" pos:end="25:30"><expr pos:start="25:27" pos:end="25:30"><name pos:start="25:27" pos:end="25:30">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:54"><expr pos:start="27:13" pos:end="27:53"><name pos:start="27:13" pos:end="27:22">pad_length</name> <operator pos:start="27:24" pos:end="27:25">-=</operator> <call pos:start="27:27" pos:end="27:53"><name pos:start="27:27" pos:end="27:34">vfprintf</name><argument_list pos:start="27:35" pos:end="27:53">(<argument pos:start="27:36" pos:end="27:41"><expr pos:start="27:36" pos:end="27:41"><name pos:start="27:36" pos:end="27:41">stderr</name></expr></argument>, <argument pos:start="27:44" pos:end="27:47"><expr pos:start="27:44" pos:end="27:47"><name pos:start="27:44" pos:end="27:47">name</name></expr></argument>, <argument pos:start="27:50" pos:end="27:52"><expr pos:start="27:50" pos:end="27:52"><name pos:start="27:50" pos:end="27:52">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:24"><expr pos:start="29:13" pos:end="29:23"><call pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:18">va_end</name><argument_list pos:start="29:19" pos:end="29:23">(<argument pos:start="29:20" pos:end="29:22"><expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:66"><expr pos:start="31:13" pos:end="31:65"><call pos:start="31:13" pos:end="31:65"><name pos:start="31:13" pos:end="31:19">fprintf</name><argument_list pos:start="31:20" pos:end="31:65">(<argument pos:start="31:21" pos:end="31:26"><expr pos:start="31:21" pos:end="31:26"><name pos:start="31:21" pos:end="31:26">stderr</name></expr></argument>, <argument pos:start="31:29" pos:end="31:33"><expr pos:start="31:29" pos:end="31:33"><literal type="string" pos:start="31:29" pos:end="31:33">"%*c"</literal></expr></argument>, <argument pos:start="31:36" pos:end="31:59"><expr pos:start="31:36" pos:end="31:59"><call pos:start="31:36" pos:end="31:55"><name pos:start="31:36" pos:end="31:40">FFMAX</name><argument_list pos:start="31:41" pos:end="31:55">(<argument pos:start="31:42" pos:end="31:51"><expr pos:start="31:42" pos:end="31:51"><name pos:start="31:42" pos:end="31:51">pad_length</name></expr></argument>, <argument pos:start="31:54" pos:end="31:54"><expr pos:start="31:54" pos:end="31:54"><literal type="number" pos:start="31:54" pos:end="31:54">0</literal></expr></argument>)</argument_list></call> <operator pos:start="31:57" pos:end="31:57">+</operator> <literal type="number" pos:start="31:59" pos:end="31:59">2</literal></expr></argument>, <argument pos:start="31:62" pos:end="31:64"><expr pos:start="31:62" pos:end="31:64"><literal type="char" pos:start="31:62" pos:end="31:64">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="35:79">else<block type="pseudo" pos:start="35:13" pos:end="35:79"><block_content pos:start="35:13" pos:end="35:79">

            <expr_stmt pos:start="35:13" pos:end="35:79"><expr pos:start="35:13" pos:end="35:78"><call pos:start="35:13" pos:end="35:78"><name pos:start="35:13" pos:end="35:19">fprintf</name><argument_list pos:start="35:20" pos:end="35:78">(<argument pos:start="35:21" pos:end="35:26"><expr pos:start="35:21" pos:end="35:26"><name pos:start="35:21" pos:end="35:26">stderr</name></expr></argument>, <argument pos:start="35:29" pos:end="35:39"><expr pos:start="35:29" pos:end="35:39"><literal type="string" pos:start="35:29" pos:end="35:39">" - %-*s ["</literal></expr></argument>, <argument pos:start="35:42" pos:end="35:51"><expr pos:start="35:42" pos:end="35:51"><name pos:start="35:42" pos:end="35:51">max_length</name></expr></argument>, <argument pos:start="35:54" pos:end="35:77"><expr pos:start="35:54" pos:end="35:77"><name pos:start="35:54" pos:end="35:77"><name pos:start="35:54" pos:end="35:58">state</name><operator pos:start="35:59" pos:end="35:59">.</operator><name pos:start="35:60" pos:end="35:71">current_func</name><operator pos:start="35:72" pos:end="35:73">-&gt;</operator><name pos:start="35:74" pos:end="35:77">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="39:9" pos:end="45:46"><if pos:start="39:9" pos:end="41:44">if <condition pos:start="39:12" pos:end="39:44">(<expr pos:start="39:13" pos:end="39:43"><name pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:17">state</name><operator pos:start="39:18" pos:end="39:18">.</operator><name pos:start="39:19" pos:end="39:28">num_failed</name></name> <operator pos:start="39:30" pos:end="39:31">==</operator> <name pos:start="39:33" pos:end="39:43">prev_failed</name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:44"><block_content pos:start="41:13" pos:end="41:44">

            <expr_stmt pos:start="41:13" pos:end="41:44"><expr pos:start="41:13" pos:end="41:43"><call pos:start="41:13" pos:end="41:43"><name pos:start="41:13" pos:end="41:24">color_printf</name><argument_list pos:start="41:25" pos:end="41:43">(<argument pos:start="41:26" pos:end="41:36"><expr pos:start="41:26" pos:end="41:36"><name pos:start="41:26" pos:end="41:36">COLOR_GREEN</name></expr></argument>, <argument pos:start="41:39" pos:end="41:42"><expr pos:start="41:39" pos:end="41:42"><literal type="string" pos:start="41:39" pos:end="41:42">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="43:9" pos:end="45:46">else<block type="pseudo" pos:start="45:13" pos:end="45:46"><block_content pos:start="45:13" pos:end="45:46">

            <expr_stmt pos:start="45:13" pos:end="45:46"><expr pos:start="45:13" pos:end="45:45"><call pos:start="45:13" pos:end="45:45"><name pos:start="45:13" pos:end="45:24">color_printf</name><argument_list pos:start="45:25" pos:end="45:45">(<argument pos:start="45:26" pos:end="45:34"><expr pos:start="45:26" pos:end="45:34"><name pos:start="45:26" pos:end="45:34">COLOR_RED</name></expr></argument>, <argument pos:start="45:37" pos:end="45:44"><expr pos:start="45:37" pos:end="45:44"><literal type="string" pos:start="45:37" pos:end="45:44">"FAILED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><call pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="47:30">(<argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">stderr</name></expr></argument>, <argument pos:start="47:25" pos:end="47:29"><expr pos:start="47:25" pos:end="47:29"><literal type="string" pos:start="47:25" pos:end="47:29">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:20">prev_checked</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:40"><name pos:start="51:24" pos:end="51:28">state</name><operator pos:start="51:29" pos:end="51:29">.</operator><name pos:start="51:30" pos:end="51:40">num_checked</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:40"><expr pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:19">prev_failed</name>  <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:39"><name pos:start="53:24" pos:end="53:28">state</name><operator pos:start="53:29" pos:end="53:29">.</operator><name pos:start="53:30" pos:end="53:39">num_failed</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="55:7" pos:end="83:5">else if <condition pos:start="55:15" pos:end="55:31">(<expr pos:start="55:16" pos:end="55:30"><operator pos:start="55:16" pos:end="55:16">!</operator><name pos:start="55:17" pos:end="55:30"><name pos:start="55:17" pos:end="55:21">state</name><operator pos:start="55:22" pos:end="55:22">.</operator><name pos:start="55:23" pos:end="55:30">cpu_flag</name></name></expr>)</condition> <block pos:start="55:33" pos:end="83:5">{<block_content pos:start="57:9" pos:end="81:32">

        <decl_stmt pos:start="57:9" pos:end="57:19"><decl pos:start="57:9" pos:end="57:18"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:18">length</name></decl>;</decl_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:92">/* Calculate the amount of padding required to make the output vertically aligned */</comment>

        <if_stmt pos:start="63:9" pos:end="75:54"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:18">(<expr pos:start="63:13" pos:end="63:17"><operator pos:start="63:13" pos:end="63:13">*</operator><name pos:start="63:14" pos:end="63:17">name</name></expr>)</condition> <block pos:start="63:20" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:24">

            <decl_stmt pos:start="65:13" pos:end="65:24"><decl pos:start="65:13" pos:end="65:23"><type pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:19">va_list</name></type> <name pos:start="65:21" pos:end="65:23">arg</name></decl>;</decl_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:32"><expr pos:start="67:13" pos:end="67:31"><call pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:20">va_start</name><argument_list pos:start="67:21" pos:end="67:31">(<argument pos:start="67:22" pos:end="67:24"><expr pos:start="67:22" pos:end="67:24"><name pos:start="67:22" pos:end="67:24">arg</name></expr></argument>, <argument pos:start="67:27" pos:end="67:30"><expr pos:start="67:27" pos:end="67:30"><name pos:start="67:27" pos:end="67:30">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:51"><expr pos:start="69:13" pos:end="69:50"><name pos:start="69:13" pos:end="69:18">length</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:50"><name pos:start="69:22" pos:end="69:30">vsnprintf</name><argument_list pos:start="69:31" pos:end="69:50">(<argument pos:start="69:32" pos:end="69:35"><expr pos:start="69:32" pos:end="69:35"><name pos:start="69:32" pos:end="69:35">NULL</name></expr></argument>, <argument pos:start="69:38" pos:end="69:38"><expr pos:start="69:38" pos:end="69:38"><literal type="number" pos:start="69:38" pos:end="69:38">0</literal></expr></argument>, <argument pos:start="69:41" pos:end="69:44"><expr pos:start="69:41" pos:end="69:44"><name pos:start="69:41" pos:end="69:44">name</name></expr></argument>, <argument pos:start="69:47" pos:end="69:49"><expr pos:start="69:47" pos:end="69:49"><name pos:start="69:47" pos:end="69:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:24"><expr pos:start="71:13" pos:end="71:23"><call pos:start="71:13" pos:end="71:23"><name pos:start="71:13" pos:end="71:18">va_end</name><argument_list pos:start="71:19" pos:end="71:23">(<argument pos:start="71:20" pos:end="71:22"><expr pos:start="71:20" pos:end="71:22"><name pos:start="71:20" pos:end="71:22">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="75:54">else<block type="pseudo" pos:start="75:13" pos:end="75:54"><block_content pos:start="75:13" pos:end="75:54">

            <expr_stmt pos:start="75:13" pos:end="75:54"><expr pos:start="75:13" pos:end="75:53"><name pos:start="75:13" pos:end="75:18">length</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <call pos:start="75:22" pos:end="75:53"><name pos:start="75:22" pos:end="75:27">strlen</name><argument_list pos:start="75:28" pos:end="75:53">(<argument pos:start="75:29" pos:end="75:52"><expr pos:start="75:29" pos:end="75:52"><name pos:start="75:29" pos:end="75:52"><name pos:start="75:29" pos:end="75:33">state</name><operator pos:start="75:34" pos:end="75:34">.</operator><name pos:start="75:35" pos:end="75:46">current_func</name><operator pos:start="75:47" pos:end="75:48">-&gt;</operator><name pos:start="75:49" pos:end="75:52">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="79:9" pos:end="81:32"><if pos:start="79:9" pos:end="81:32">if <condition pos:start="79:12" pos:end="79:32">(<expr pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:18">length</name> <operator pos:start="79:20" pos:end="79:20">&gt;</operator> <name pos:start="79:22" pos:end="79:31">max_length</name></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:32"><block_content pos:start="81:13" pos:end="81:32">

            <expr_stmt pos:start="81:13" pos:end="81:32"><expr pos:start="81:13" pos:end="81:31"><name pos:start="81:13" pos:end="81:22">max_length</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:31">length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
