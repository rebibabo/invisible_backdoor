<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1062.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:29"><name pos:start="1:1" pos:end="1:14">do_socket_read</name><argument_list pos:start="1:15" pos:end="5:29">(<argument pos:start="1:16" pos:end="1:33">GIOChannel *source</argument>,

               <argument pos:start="3:16" pos:end="3:37">GIOCondition condition</argument>,

               <argument pos:start="5:16" pos:end="5:28">gpointer data</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="269:1">{<block_content pos:start="9:5" pos:end="267:16">

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:20">dwSendLength</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">dwRecvLength</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:37"><name pos:start="15:13" pos:end="15:24">pbRecvBuffer</name><index pos:start="15:25" pos:end="15:37">[<expr pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:36">APDUBufSize</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:45"><decl pos:start="17:5" pos:end="17:44"><type pos:start="17:5" pos:end="17:18"><specifier pos:start="17:5" pos:end="17:10">static</specifier> <name pos:start="17:12" pos:end="17:18">uint8_t</name></type> <name pos:start="17:20" pos:end="17:44"><name pos:start="17:20" pos:end="17:31">pbSendBuffer</name><index pos:start="17:32" pos:end="17:44">[<expr pos:start="17:33" pos:end="17:43"><name pos:start="17:33" pos:end="17:43">APDUBufSize</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17">VReaderStatus</name></type> <name pos:start="19:19" pos:end="19:31">reader_status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">VReader</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:19">reader</name> <init pos:start="21:21" pos:end="21:26">= <expr pos:start="21:23" pos:end="21:26"><name pos:start="21:23" pos:end="21:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:33"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:23"><specifier pos:start="23:5" pos:end="23:10">static</specifier> <name pos:start="23:12" pos:end="23:23">VSCMsgHeader</name></type> <name pos:start="23:25" pos:end="23:32">mhHeader</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:15">VSCMsgError</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:26">error_msg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">GError</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:15">err</name> <init pos:start="27:17" pos:end="27:22">= <expr pos:start="27:19" pos:end="27:22"><name pos:start="27:19" pos:end="27:22">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:18"><specifier pos:start="31:5" pos:end="31:10">static</specifier> <name pos:start="31:12" pos:end="31:16">gchar</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:21">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:29"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:16"><specifier pos:start="33:5" pos:end="33:10">static</specifier> <name pos:start="33:12" pos:end="33:16">gsize</name></type> <name pos:start="33:18" pos:end="33:19">br</name></decl>, <decl pos:start="33:22" pos:end="33:28"><type ref="prev" pos:start="33:5" pos:end="33:16"/><name pos:start="33:22" pos:end="33:28">to_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:36"><decl pos:start="35:5" pos:end="35:35"><type pos:start="35:5" pos:end="35:14"><specifier pos:start="35:5" pos:end="35:10">static</specifier> <name pos:start="35:12" pos:end="35:14">int</name></type> <name pos:start="35:16" pos:end="35:20">state</name> <init pos:start="35:22" pos:end="35:35">= <expr pos:start="35:24" pos:end="35:35"><name pos:start="35:24" pos:end="35:35">STATE_HEADER</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:46">(<expr pos:start="39:9" pos:end="39:45"><name pos:start="39:9" pos:end="39:13">state</name> <operator pos:start="39:15" pos:end="39:16">==</operator> <name pos:start="39:18" pos:end="39:29">STATE_HEADER</name> <operator pos:start="39:31" pos:end="39:32">&amp;&amp;</operator> <name pos:start="39:34" pos:end="39:40">to_read</name> <operator pos:start="39:42" pos:end="39:43">==</operator> <literal type="number" pos:start="39:45" pos:end="39:45">0</literal></expr>)</condition> <block pos:start="39:48" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:35">

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:11">buf</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">(</operator><name pos:start="41:16" pos:end="41:20">gchar</name> <operator pos:start="41:22" pos:end="41:22">*</operator><operator pos:start="41:23" pos:end="41:23">)</operator><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:32">mhHeader</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:35"><expr pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:15">to_read</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <sizeof pos:start="43:19" pos:end="43:34">sizeof<argument_list pos:start="43:25" pos:end="43:34">(<argument pos:start="43:26" pos:end="43:33"><expr pos:start="43:26" pos:end="43:33"><name pos:start="43:26" pos:end="43:33">mhHeader</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="69:5"><if pos:start="49:5" pos:end="69:5">if <condition pos:start="49:8" pos:end="49:20">(<expr pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:15">to_read</name> <operator pos:start="49:17" pos:end="49:17">&gt;</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>)</condition> <block pos:start="49:22" pos:end="69:5">{<block_content pos:start="51:9" pos:end="67:9">

        <expr_stmt pos:start="51:9" pos:end="51:74"><expr pos:start="51:9" pos:end="51:73"><call pos:start="51:9" pos:end="51:73"><name pos:start="51:9" pos:end="51:31">g_io_channel_read_chars</name><argument_list pos:start="51:32" pos:end="51:73">(<argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><name pos:start="51:33" pos:end="51:38">source</name></expr></argument>, <argument pos:start="51:41" pos:end="51:52"><expr pos:start="51:41" pos:end="51:52"><operator pos:start="51:41" pos:end="51:41">(</operator><name pos:start="51:42" pos:end="51:46">gchar</name> <operator pos:start="51:48" pos:end="51:48">*</operator><operator pos:start="51:49" pos:end="51:49">)</operator><name pos:start="51:50" pos:end="51:52">buf</name></expr></argument>, <argument pos:start="51:55" pos:end="51:61"><expr pos:start="51:55" pos:end="51:61"><name pos:start="51:55" pos:end="51:61">to_read</name></expr></argument>, <argument pos:start="51:64" pos:end="51:66"><expr pos:start="51:64" pos:end="51:66"><operator pos:start="51:64" pos:end="51:64">&amp;</operator><name pos:start="51:65" pos:end="51:66">br</name></expr></argument>, <argument pos:start="51:69" pos:end="51:72"><expr pos:start="51:69" pos:end="51:72"><operator pos:start="51:69" pos:end="51:69">&amp;</operator><name pos:start="51:70" pos:end="51:72">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:24">(<expr pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:15">err</name> <operator pos:start="53:17" pos:end="53:18">!=</operator> <name pos:start="53:20" pos:end="53:23">NULL</name></expr>)</condition> <block pos:start="53:26" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:61">

            <expr_stmt pos:start="55:13" pos:end="55:61"><expr pos:start="55:13" pos:end="55:60"><call pos:start="55:13" pos:end="55:60"><name pos:start="55:13" pos:end="55:19">g_error</name><argument_list pos:start="55:20" pos:end="55:60">(<argument pos:start="55:21" pos:end="55:45"><expr pos:start="55:21" pos:end="55:45"><literal type="string" pos:start="55:21" pos:end="55:45">"error while reading: %s"</literal></expr></argument>, <argument pos:start="55:48" pos:end="55:59"><expr pos:start="55:48" pos:end="55:59"><name pos:start="55:48" pos:end="55:59"><name pos:start="55:48" pos:end="55:50">err</name><operator pos:start="55:51" pos:end="55:52">-&gt;</operator><name pos:start="55:53" pos:end="55:59">message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:18"><expr pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:11">buf</name> <operator pos:start="59:13" pos:end="59:14">+=</operator> <name pos:start="59:16" pos:end="59:17">br</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:22"><expr pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:15">to_read</name> <operator pos:start="61:17" pos:end="61:18">-=</operator> <name pos:start="61:20" pos:end="61:21">br</name></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:25">(<expr pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:19">to_read</name> <operator pos:start="63:21" pos:end="63:22">!=</operator> <literal type="number" pos:start="63:24" pos:end="63:24">0</literal></expr>)</condition> <block pos:start="63:27" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:24">

            <return pos:start="65:13" pos:end="65:24">return <expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">TRUE</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="117:5"><if pos:start="73:5" pos:end="117:5">if <condition pos:start="73:8" pos:end="73:30">(<expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:13">state</name> <operator pos:start="73:15" pos:end="73:16">==</operator> <name pos:start="73:18" pos:end="73:29">STATE_HEADER</name></expr>)</condition> <block pos:start="73:32" pos:end="117:5">{<block_content pos:start="75:9" pos:end="115:9">

        <expr_stmt pos:start="75:9" pos:end="75:45"><expr pos:start="75:9" pos:end="75:44"><name pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:16">mhHeader</name><operator pos:start="75:17" pos:end="75:17">.</operator><name pos:start="75:18" pos:end="75:21">type</name></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <call pos:start="75:25" pos:end="75:44"><name pos:start="75:25" pos:end="75:29">ntohl</name><argument_list pos:start="75:30" pos:end="75:44">(<argument pos:start="75:31" pos:end="75:43"><expr pos:start="75:31" pos:end="75:43"><name pos:start="75:31" pos:end="75:43"><name pos:start="75:31" pos:end="75:38">mhHeader</name><operator pos:start="75:39" pos:end="75:39">.</operator><name pos:start="75:40" pos:end="75:43">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:55"><expr pos:start="77:9" pos:end="77:54"><name pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:16">mhHeader</name><operator pos:start="77:17" pos:end="77:17">.</operator><name pos:start="77:18" pos:end="77:26">reader_id</name></name> <operator pos:start="77:28" pos:end="77:28">=</operator> <call pos:start="77:30" pos:end="77:54"><name pos:start="77:30" pos:end="77:34">ntohl</name><argument_list pos:start="77:35" pos:end="77:54">(<argument pos:start="77:36" pos:end="77:53"><expr pos:start="77:36" pos:end="77:53"><name pos:start="77:36" pos:end="77:53"><name pos:start="77:36" pos:end="77:43">mhHeader</name><operator pos:start="77:44" pos:end="77:44">.</operator><name pos:start="77:45" pos:end="77:53">reader_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:49"><expr pos:start="79:9" pos:end="79:48"><name pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:16">mhHeader</name><operator pos:start="79:17" pos:end="79:17">.</operator><name pos:start="79:18" pos:end="79:23">length</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <call pos:start="79:27" pos:end="79:48"><name pos:start="79:27" pos:end="79:31">ntohl</name><argument_list pos:start="79:32" pos:end="79:48">(<argument pos:start="79:33" pos:end="79:47"><expr pos:start="79:33" pos:end="79:47"><name pos:start="79:33" pos:end="79:47"><name pos:start="79:33" pos:end="79:40">mhHeader</name><operator pos:start="79:41" pos:end="79:41">.</operator><name pos:start="79:42" pos:end="79:47">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="81:20">(<expr pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:19">verbose</name></expr>)</condition> <block pos:start="81:22" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:36">

            <expr_stmt pos:start="83:13" pos:end="87:36"><expr pos:start="83:13" pos:end="87:35"><call pos:start="83:13" pos:end="87:35"><name pos:start="83:13" pos:end="83:18">printf</name><argument_list pos:start="83:19" pos:end="87:35">(<argument pos:start="83:20" pos:end="83:69"><expr pos:start="83:20" pos:end="83:69"><literal type="string" pos:start="83:20" pos:end="83:69">"Header: type=%d, reader_id=%u length=%d (0x%x)\n"</literal></expr></argument>,

                   <argument pos:start="85:20" pos:end="85:32"><expr pos:start="85:20" pos:end="85:32"><name pos:start="85:20" pos:end="85:32"><name pos:start="85:20" pos:end="85:27">mhHeader</name><operator pos:start="85:28" pos:end="85:28">.</operator><name pos:start="85:29" pos:end="85:32">type</name></name></expr></argument>, <argument pos:start="85:35" pos:end="85:52"><expr pos:start="85:35" pos:end="85:52"><name pos:start="85:35" pos:end="85:52"><name pos:start="85:35" pos:end="85:42">mhHeader</name><operator pos:start="85:43" pos:end="85:43">.</operator><name pos:start="85:44" pos:end="85:52">reader_id</name></name></expr></argument>, <argument pos:start="85:55" pos:end="85:69"><expr pos:start="85:55" pos:end="85:69"><name pos:start="85:55" pos:end="85:69"><name pos:start="85:55" pos:end="85:62">mhHeader</name><operator pos:start="85:63" pos:end="85:63">.</operator><name pos:start="85:64" pos:end="85:69">length</name></name></expr></argument>,

                   <argument pos:start="87:20" pos:end="87:34"><expr pos:start="87:20" pos:end="87:34"><name pos:start="87:20" pos:end="87:34"><name pos:start="87:20" pos:end="87:27">mhHeader</name><operator pos:start="87:28" pos:end="87:28">.</operator><name pos:start="87:29" pos:end="87:34">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="91:9" pos:end="115:9">switch <condition pos:start="91:16" pos:end="91:30">(<expr pos:start="91:17" pos:end="91:29"><name pos:start="91:17" pos:end="91:29"><name pos:start="91:17" pos:end="91:24">mhHeader</name><operator pos:start="91:25" pos:end="91:25">.</operator><name pos:start="91:26" pos:end="91:29">type</name></name></expr>)</condition> <block pos:start="91:32" pos:end="115:9">{<block_content pos:start="93:9" pos:end="113:25">

        <case pos:start="93:9" pos:end="93:22">case <expr pos:start="93:14" pos:end="93:21"><name pos:start="93:14" pos:end="93:21">VSC_APDU</name></expr>:</case>

        <case pos:start="95:9" pos:end="95:23">case <expr pos:start="95:14" pos:end="95:22"><name pos:start="95:14" pos:end="95:22">VSC_Flush</name></expr>:</case>

        <case pos:start="97:9" pos:end="97:23">case <expr pos:start="97:14" pos:end="97:22"><name pos:start="97:14" pos:end="97:22">VSC_Error</name></expr>:</case>

        <case pos:start="99:9" pos:end="99:22">case <expr pos:start="99:14" pos:end="99:21"><name pos:start="99:14" pos:end="99:21">VSC_Init</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:40"><expr pos:start="101:13" pos:end="101:39"><name pos:start="101:13" pos:end="101:15">buf</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <operator pos:start="101:19" pos:end="101:19">(</operator><name pos:start="101:20" pos:end="101:24">gchar</name> <operator pos:start="101:26" pos:end="101:26">*</operator><operator pos:start="101:27" pos:end="101:27">)</operator><name pos:start="101:28" pos:end="101:39">pbSendBuffer</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:38"><expr pos:start="103:13" pos:end="103:37"><name pos:start="103:13" pos:end="103:19">to_read</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <name pos:start="103:23" pos:end="103:37"><name pos:start="103:23" pos:end="103:30">mhHeader</name><operator pos:start="103:31" pos:end="103:31">.</operator><name pos:start="103:32" pos:end="103:37">length</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:34"><expr pos:start="105:13" pos:end="105:33"><name pos:start="105:13" pos:end="105:17">state</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:33">STATE_MESSAGE</name></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:24">return <expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">TRUE</name></expr>;</return>

        <default pos:start="109:9" pos:end="109:16">default:</default>

            <expr_stmt pos:start="111:13" pos:end="111:80"><expr pos:start="111:13" pos:end="111:79"><call pos:start="111:13" pos:end="111:79"><name pos:start="111:13" pos:end="111:19">fprintf</name><argument_list pos:start="111:20" pos:end="111:79">(<argument pos:start="111:21" pos:end="111:26"><expr pos:start="111:21" pos:end="111:26"><name pos:start="111:21" pos:end="111:26">stderr</name></expr></argument>, <argument pos:start="111:29" pos:end="111:63"><expr pos:start="111:29" pos:end="111:63"><literal type="string" pos:start="111:29" pos:end="111:63">"Unexpected message of type 0x%X\n"</literal></expr></argument>, <argument pos:start="111:66" pos:end="111:78"><expr pos:start="111:66" pos:end="111:78"><name pos:start="111:66" pos:end="111:78"><name pos:start="111:66" pos:end="111:73">mhHeader</name><operator pos:start="111:74" pos:end="111:74">.</operator><name pos:start="111:75" pos:end="111:78">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="113:13" pos:end="113:25">return <expr pos:start="113:20" pos:end="113:24"><name pos:start="113:20" pos:end="113:24">FALSE</name></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="121:5" pos:end="261:5"><if pos:start="121:5" pos:end="261:5">if <condition pos:start="121:8" pos:end="121:31">(<expr pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:13">state</name> <operator pos:start="121:15" pos:end="121:16">==</operator> <name pos:start="121:18" pos:end="121:30">STATE_MESSAGE</name></expr>)</condition> <block pos:start="121:33" pos:end="261:5">{<block_content pos:start="123:9" pos:end="259:29">

        <switch pos:start="123:9" pos:end="255:9">switch <condition pos:start="123:16" pos:end="123:30">(<expr pos:start="123:17" pos:end="123:29"><name pos:start="123:17" pos:end="123:29"><name pos:start="123:17" pos:end="123:24">mhHeader</name><operator pos:start="123:25" pos:end="123:25">.</operator><name pos:start="123:26" pos:end="123:29">type</name></name></expr>)</condition> <block pos:start="123:32" pos:end="255:9">{<block_content pos:start="125:9" pos:end="253:25">

        <case pos:start="125:9" pos:end="125:22">case <expr pos:start="125:14" pos:end="125:21"><name pos:start="125:14" pos:end="125:21">VSC_APDU</name></expr>:</case>

            <if_stmt pos:start="127:13" pos:end="133:13"><if pos:start="127:13" pos:end="133:13">if <condition pos:start="127:16" pos:end="127:24">(<expr pos:start="127:17" pos:end="127:23"><name pos:start="127:17" pos:end="127:23">verbose</name></expr>)</condition> <block pos:start="127:26" pos:end="133:13">{<block_content pos:start="129:17" pos:end="131:64">

                <expr_stmt pos:start="129:17" pos:end="129:39"><expr pos:start="129:17" pos:end="129:38"><call pos:start="129:17" pos:end="129:38"><name pos:start="129:17" pos:end="129:22">printf</name><argument_list pos:start="129:23" pos:end="129:38">(<argument pos:start="129:24" pos:end="129:37"><expr pos:start="129:24" pos:end="129:37"><literal type="string" pos:start="129:24" pos:end="129:37">" recv APDU: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:64"><expr pos:start="131:17" pos:end="131:63"><call pos:start="131:17" pos:end="131:63"><name pos:start="131:17" pos:end="131:32">print_byte_array</name><argument_list pos:start="131:33" pos:end="131:63">(<argument pos:start="131:34" pos:end="131:45"><expr pos:start="131:34" pos:end="131:45"><name pos:start="131:34" pos:end="131:45">pbSendBuffer</name></expr></argument>, <argument pos:start="131:48" pos:end="131:62"><expr pos:start="131:48" pos:end="131:62"><name pos:start="131:48" pos:end="131:62"><name pos:start="131:48" pos:end="131:55">mhHeader</name><operator pos:start="131:56" pos:end="131:56">.</operator><name pos:start="131:57" pos:end="131:62">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="135:13" pos:end="135:40">/* Transmit received APDU */</comment>

            <expr_stmt pos:start="137:13" pos:end="137:43"><expr pos:start="137:13" pos:end="137:42"><name pos:start="137:13" pos:end="137:24">dwSendLength</name> <operator pos:start="137:26" pos:end="137:26">=</operator> <name pos:start="137:28" pos:end="137:42"><name pos:start="137:28" pos:end="137:35">mhHeader</name><operator pos:start="137:36" pos:end="137:36">.</operator><name pos:start="137:37" pos:end="137:42">length</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:48"><expr pos:start="139:13" pos:end="139:47"><name pos:start="139:13" pos:end="139:24">dwRecvLength</name> <operator pos:start="139:26" pos:end="139:26">=</operator> <sizeof pos:start="139:28" pos:end="139:47">sizeof<argument_list pos:start="139:34" pos:end="139:47">(<argument pos:start="139:35" pos:end="139:46"><expr pos:start="139:35" pos:end="139:46"><name pos:start="139:35" pos:end="139:46">pbRecvBuffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:66"><expr pos:start="141:13" pos:end="141:65"><name pos:start="141:13" pos:end="141:18">reader</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <call pos:start="141:22" pos:end="141:65"><name pos:start="141:22" pos:end="141:45">vreader_get_reader_by_id</name><argument_list pos:start="141:46" pos:end="141:65">(<argument pos:start="141:47" pos:end="141:64"><expr pos:start="141:47" pos:end="141:64"><name pos:start="141:47" pos:end="141:64"><name pos:start="141:47" pos:end="141:54">mhHeader</name><operator pos:start="141:55" pos:end="141:55">.</operator><name pos:start="141:56" pos:end="141:64">reader_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="147:75"><expr pos:start="143:13" pos:end="147:74"><name pos:start="143:13" pos:end="143:25">reader_status</name> <operator pos:start="143:27" pos:end="143:27">=</operator> <call pos:start="143:29" pos:end="147:74"><name pos:start="143:29" pos:end="143:45">vreader_xfr_bytes</name><argument_list pos:start="143:46" pos:end="147:74">(<argument pos:start="143:47" pos:end="143:52"><expr pos:start="143:47" pos:end="143:52"><name pos:start="143:47" pos:end="143:52">reader</name></expr></argument>,

                                              <argument pos:start="145:47" pos:end="145:58"><expr pos:start="145:47" pos:end="145:58"><name pos:start="145:47" pos:end="145:58">pbSendBuffer</name></expr></argument>, <argument pos:start="145:61" pos:end="145:72"><expr pos:start="145:61" pos:end="145:72"><name pos:start="145:61" pos:end="145:72">dwSendLength</name></expr></argument>,

                                              <argument pos:start="147:47" pos:end="147:58"><expr pos:start="147:47" pos:end="147:58"><name pos:start="147:47" pos:end="147:58">pbRecvBuffer</name></expr></argument>, <argument pos:start="147:61" pos:end="147:73"><expr pos:start="147:61" pos:end="147:73"><operator pos:start="147:61" pos:end="147:61">&amp;</operator><name pos:start="147:62" pos:end="147:73">dwRecvLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="149:13" pos:end="171:13"><if pos:start="149:13" pos:end="165:13">if <condition pos:start="149:16" pos:end="149:44">(<expr pos:start="149:17" pos:end="149:43"><name pos:start="149:17" pos:end="149:29">reader_status</name> <operator pos:start="149:31" pos:end="149:32">==</operator> <name pos:start="149:34" pos:end="149:43">VREADER_OK</name></expr>)</condition> <block pos:start="149:46" pos:end="165:13">{<block_content pos:start="151:17" pos:end="163:53">

                <expr_stmt pos:start="151:17" pos:end="151:47"><expr pos:start="151:17" pos:end="151:46"><name pos:start="151:17" pos:end="151:31"><name pos:start="151:17" pos:end="151:24">mhHeader</name><operator pos:start="151:25" pos:end="151:25">.</operator><name pos:start="151:26" pos:end="151:31">length</name></name> <operator pos:start="151:33" pos:end="151:33">=</operator> <name pos:start="151:35" pos:end="151:46">dwRecvLength</name></expr>;</expr_stmt>

                <if_stmt pos:start="153:17" pos:end="159:17"><if pos:start="153:17" pos:end="159:17">if <condition pos:start="153:20" pos:end="153:28">(<expr pos:start="153:21" pos:end="153:27"><name pos:start="153:21" pos:end="153:27">verbose</name></expr>)</condition> <block pos:start="153:30" pos:end="159:17">{<block_content pos:start="155:21" pos:end="157:68">

                    <expr_stmt pos:start="155:21" pos:end="155:47"><expr pos:start="155:21" pos:end="155:46"><call pos:start="155:21" pos:end="155:46"><name pos:start="155:21" pos:end="155:26">printf</name><argument_list pos:start="155:27" pos:end="155:46">(<argument pos:start="155:28" pos:end="155:45"><expr pos:start="155:28" pos:end="155:45"><literal type="string" pos:start="155:28" pos:end="155:45">" send response: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:68"><expr pos:start="157:21" pos:end="157:67"><call pos:start="157:21" pos:end="157:67"><name pos:start="157:21" pos:end="157:36">print_byte_array</name><argument_list pos:start="157:37" pos:end="157:67">(<argument pos:start="157:38" pos:end="157:49"><expr pos:start="157:38" pos:end="157:49"><name pos:start="157:38" pos:end="157:49">pbRecvBuffer</name></expr></argument>, <argument pos:start="157:52" pos:end="157:66"><expr pos:start="157:52" pos:end="157:66"><name pos:start="157:52" pos:end="157:66"><name pos:start="157:52" pos:end="157:59">mhHeader</name><operator pos:start="157:60" pos:end="157:60">.</operator><name pos:start="157:61" pos:end="157:66">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="161:17" pos:end="163:53"><expr pos:start="161:17" pos:end="163:52"><call pos:start="161:17" pos:end="163:52"><name pos:start="161:17" pos:end="161:24">send_msg</name><argument_list pos:start="161:25" pos:end="163:52">(<argument pos:start="161:26" pos:end="161:33"><expr pos:start="161:26" pos:end="161:33"><name pos:start="161:26" pos:end="161:33">VSC_APDU</name></expr></argument>, <argument pos:start="161:36" pos:end="161:53"><expr pos:start="161:36" pos:end="161:53"><name pos:start="161:36" pos:end="161:53"><name pos:start="161:36" pos:end="161:43">mhHeader</name><operator pos:start="161:44" pos:end="161:44">.</operator><name pos:start="161:45" pos:end="161:53">reader_id</name></name></expr></argument>,

                         <argument pos:start="163:26" pos:end="163:37"><expr pos:start="163:26" pos:end="163:37"><name pos:start="163:26" pos:end="163:37">pbRecvBuffer</name></expr></argument>, <argument pos:start="163:40" pos:end="163:51"><expr pos:start="163:40" pos:end="163:51"><name pos:start="163:40" pos:end="163:51">dwRecvLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="165:15" pos:end="171:13">else <block pos:start="165:20" pos:end="171:13">{<block_content pos:start="167:17" pos:end="169:79">

                <expr_stmt pos:start="167:17" pos:end="167:35"><expr pos:start="167:17" pos:end="167:34"><name pos:start="167:17" pos:end="167:18">rv</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <name pos:start="167:22" pos:end="167:34">reader_status</name></expr>;</expr_stmt> <comment type="block" pos:start="167:37" pos:end="167:65">/* warning: not meaningful */</comment>

                <expr_stmt pos:start="169:17" pos:end="169:79"><expr pos:start="169:17" pos:end="169:78"><call pos:start="169:17" pos:end="169:78"><name pos:start="169:17" pos:end="169:24">send_msg</name><argument_list pos:start="169:25" pos:end="169:78">(<argument pos:start="169:26" pos:end="169:34"><expr pos:start="169:26" pos:end="169:34"><name pos:start="169:26" pos:end="169:34">VSC_Error</name></expr></argument>, <argument pos:start="169:37" pos:end="169:54"><expr pos:start="169:37" pos:end="169:54"><name pos:start="169:37" pos:end="169:54"><name pos:start="169:37" pos:end="169:44">mhHeader</name><operator pos:start="169:45" pos:end="169:45">.</operator><name pos:start="169:46" pos:end="169:54">reader_id</name></name></expr></argument>, <argument pos:start="169:57" pos:end="169:59"><expr pos:start="169:57" pos:end="169:59"><operator pos:start="169:57" pos:end="169:57">&amp;</operator><name pos:start="169:58" pos:end="169:59">rv</name></expr></argument>, <argument pos:start="169:62" pos:end="169:77"><expr pos:start="169:62" pos:end="169:77"><sizeof pos:start="169:62" pos:end="169:77">sizeof<argument_list pos:start="169:68" pos:end="169:77">(<argument pos:start="169:69" pos:end="169:76"><expr pos:start="169:69" pos:end="169:76"><name pos:start="169:69" pos:end="169:76">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:33"><expr pos:start="173:13" pos:end="173:32"><call pos:start="173:13" pos:end="173:32"><name pos:start="173:13" pos:end="173:24">vreader_free</name><argument_list pos:start="173:25" pos:end="173:32">(<argument pos:start="173:26" pos:end="173:31"><expr pos:start="173:26" pos:end="173:31"><name pos:start="173:26" pos:end="173:31">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:26"><expr pos:start="175:13" pos:end="175:25"><name pos:start="175:13" pos:end="175:18">reader</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <name pos:start="175:22" pos:end="175:25">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="175:28" pos:end="177:38">/* we've freed it, don't use it by accident

                              again */</comment>

            <break pos:start="179:13" pos:end="179:18">break;</break>

        <case pos:start="181:9" pos:end="181:23">case <expr pos:start="181:14" pos:end="181:22"><name pos:start="181:14" pos:end="181:22">VSC_Flush</name></expr>:</case>

            <comment type="block" pos:start="183:13" pos:end="183:38">/* TODO: actually flush */</comment>

            <expr_stmt pos:start="185:13" pos:end="185:69"><expr pos:start="185:13" pos:end="185:68"><call pos:start="185:13" pos:end="185:68"><name pos:start="185:13" pos:end="185:20">send_msg</name><argument_list pos:start="185:21" pos:end="185:68">(<argument pos:start="185:22" pos:end="185:38"><expr pos:start="185:22" pos:end="185:38"><name pos:start="185:22" pos:end="185:38">VSC_FlushComplete</name></expr></argument>, <argument pos:start="185:41" pos:end="185:58"><expr pos:start="185:41" pos:end="185:58"><name pos:start="185:41" pos:end="185:58"><name pos:start="185:41" pos:end="185:48">mhHeader</name><operator pos:start="185:49" pos:end="185:49">.</operator><name pos:start="185:50" pos:end="185:58">reader_id</name></name></expr></argument>, <argument pos:start="185:61" pos:end="185:64"><expr pos:start="185:61" pos:end="185:64"><name pos:start="185:61" pos:end="185:64">NULL</name></expr></argument>, <argument pos:start="185:67" pos:end="185:67"><expr pos:start="185:67" pos:end="185:67"><literal type="number" pos:start="185:67" pos:end="185:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        <case pos:start="189:9" pos:end="189:23">case <expr pos:start="189:14" pos:end="189:22"><name pos:start="189:14" pos:end="189:22">VSC_Error</name></expr>:</case>

            <expr_stmt pos:start="191:13" pos:end="191:53"><expr pos:start="191:13" pos:end="191:52"><name pos:start="191:13" pos:end="191:21">error_msg</name> <operator pos:start="191:23" pos:end="191:23">=</operator> <operator pos:start="191:25" pos:end="191:25">(</operator><name pos:start="191:26" pos:end="191:36">VSCMsgError</name> <operator pos:start="191:38" pos:end="191:38">*</operator><operator pos:start="191:39" pos:end="191:39">)</operator> <name pos:start="191:41" pos:end="191:52">pbSendBuffer</name></expr>;</expr_stmt>

            <if_stmt pos:start="193:13" pos:end="213:13"><if pos:start="193:13" pos:end="213:13">if <condition pos:start="193:16" pos:end="193:47">(<expr pos:start="193:17" pos:end="193:46"><name pos:start="193:17" pos:end="193:31"><name pos:start="193:17" pos:end="193:25">error_msg</name><operator pos:start="193:26" pos:end="193:27">-&gt;</operator><name pos:start="193:28" pos:end="193:31">code</name></name> <operator pos:start="193:33" pos:end="193:34">==</operator> <name pos:start="193:36" pos:end="193:46">VSC_SUCCESS</name></expr>)</condition> <block pos:start="193:49" pos:end="213:13">{<block_content pos:start="195:17" pos:end="211:22">

                <expr_stmt pos:start="195:17" pos:end="195:54"><expr pos:start="195:17" pos:end="195:53"><call pos:start="195:17" pos:end="195:53"><name pos:start="195:17" pos:end="195:31">qemu_mutex_lock</name><argument_list pos:start="195:32" pos:end="195:53">(<argument pos:start="195:33" pos:end="195:52"><expr pos:start="195:33" pos:end="195:52"><operator pos:start="195:33" pos:end="195:33">&amp;</operator><name pos:start="195:34" pos:end="195:52">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="197:17" pos:end="207:17"><if pos:start="197:17" pos:end="207:17">if <condition pos:start="197:20" pos:end="197:35">(<expr pos:start="197:21" pos:end="197:34"><name pos:start="197:21" pos:end="197:34">pending_reader</name></expr>)</condition> <block pos:start="197:37" pos:end="207:17">{<block_content pos:start="199:21" pos:end="205:64">

                    <expr_stmt pos:start="199:21" pos:end="199:71"><expr pos:start="199:21" pos:end="199:70"><call pos:start="199:21" pos:end="199:70"><name pos:start="199:21" pos:end="199:34">vreader_set_id</name><argument_list pos:start="199:35" pos:end="199:70">(<argument pos:start="199:36" pos:end="199:49"><expr pos:start="199:36" pos:end="199:49"><name pos:start="199:36" pos:end="199:49">pending_reader</name></expr></argument>, <argument pos:start="199:52" pos:end="199:69"><expr pos:start="199:52" pos:end="199:69"><name pos:start="199:52" pos:end="199:69"><name pos:start="199:52" pos:end="199:59">mhHeader</name><operator pos:start="199:60" pos:end="199:60">.</operator><name pos:start="199:61" pos:end="199:69">reader_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:49"><expr pos:start="201:21" pos:end="201:48"><call pos:start="201:21" pos:end="201:48"><name pos:start="201:21" pos:end="201:32">vreader_free</name><argument_list pos:start="201:33" pos:end="201:48">(<argument pos:start="201:34" pos:end="201:47"><expr pos:start="201:34" pos:end="201:47"><name pos:start="201:34" pos:end="201:47">pending_reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:42"><expr pos:start="203:21" pos:end="203:41"><name pos:start="203:21" pos:end="203:34">pending_reader</name> <operator pos:start="203:36" pos:end="203:36">=</operator> <name pos:start="203:38" pos:end="203:41">NULL</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="205:21" pos:end="205:64"><expr pos:start="205:21" pos:end="205:63"><call pos:start="205:21" pos:end="205:63"><name pos:start="205:21" pos:end="205:36">qemu_cond_signal</name><argument_list pos:start="205:37" pos:end="205:63">(<argument pos:start="205:38" pos:end="205:62"><expr pos:start="205:38" pos:end="205:62"><operator pos:start="205:38" pos:end="205:38">&amp;</operator><name pos:start="205:39" pos:end="205:62">pending_reader_condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:56"><expr pos:start="209:17" pos:end="209:55"><call pos:start="209:17" pos:end="209:55"><name pos:start="209:17" pos:end="209:33">qemu_mutex_unlock</name><argument_list pos:start="209:34" pos:end="209:55">(<argument pos:start="209:35" pos:end="209:54"><expr pos:start="209:35" pos:end="209:54"><operator pos:start="209:35" pos:end="209:35">&amp;</operator><name pos:start="209:36" pos:end="209:54">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="211:17" pos:end="211:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:60"><expr pos:start="215:13" pos:end="215:59"><call pos:start="215:13" pos:end="215:59"><name pos:start="215:13" pos:end="215:18">printf</name><argument_list pos:start="215:19" pos:end="215:59">(<argument pos:start="215:20" pos:end="215:58"><expr pos:start="215:20" pos:end="215:58"><literal type="string" pos:start="215:20" pos:end="215:58">"warning: qemu refused to add reader\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="217:13" pos:end="235:13"><if pos:start="217:13" pos:end="235:13">if <condition pos:start="217:16" pos:end="217:63">(<expr pos:start="217:17" pos:end="217:62"><name pos:start="217:17" pos:end="217:31"><name pos:start="217:17" pos:end="217:25">error_msg</name><operator pos:start="217:26" pos:end="217:27">-&gt;</operator><name pos:start="217:28" pos:end="217:31">code</name></name> <operator pos:start="217:33" pos:end="217:34">==</operator> <name pos:start="217:36" pos:end="217:62">VSC_CANNOT_ADD_MORE_READERS</name></expr>)</condition> <block pos:start="217:65" pos:end="235:13">{<block_content pos:start="221:17" pos:end="233:56">

                <comment type="block" pos:start="219:17" pos:end="219:70">/* clear pending reader, qemu can't handle any more */</comment>

                <expr_stmt pos:start="221:17" pos:end="221:54"><expr pos:start="221:17" pos:end="221:53"><call pos:start="221:17" pos:end="221:53"><name pos:start="221:17" pos:end="221:31">qemu_mutex_lock</name><argument_list pos:start="221:32" pos:end="221:53">(<argument pos:start="221:33" pos:end="221:52"><expr pos:start="221:33" pos:end="221:52"><operator pos:start="221:33" pos:end="221:33">&amp;</operator><name pos:start="221:34" pos:end="221:52">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="223:17" pos:end="231:17"><if pos:start="223:17" pos:end="231:17">if <condition pos:start="223:20" pos:end="223:35">(<expr pos:start="223:21" pos:end="223:34"><name pos:start="223:21" pos:end="223:34">pending_reader</name></expr>)</condition> <block pos:start="223:37" pos:end="231:17">{<block_content pos:start="225:21" pos:end="229:64">

                    <expr_stmt pos:start="225:21" pos:end="225:42"><expr pos:start="225:21" pos:end="225:41"><name pos:start="225:21" pos:end="225:34">pending_reader</name> <operator pos:start="225:36" pos:end="225:36">=</operator> <name pos:start="225:38" pos:end="225:41">NULL</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="227:21" pos:end="227:63">/* make sure the event loop doesn't hang */</comment>

                    <expr_stmt pos:start="229:21" pos:end="229:64"><expr pos:start="229:21" pos:end="229:63"><call pos:start="229:21" pos:end="229:63"><name pos:start="229:21" pos:end="229:36">qemu_cond_signal</name><argument_list pos:start="229:37" pos:end="229:63">(<argument pos:start="229:38" pos:end="229:62"><expr pos:start="229:38" pos:end="229:62"><operator pos:start="229:38" pos:end="229:38">&amp;</operator><name pos:start="229:39" pos:end="229:62">pending_reader_condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:56"><expr pos:start="233:17" pos:end="233:55"><call pos:start="233:17" pos:end="233:55"><name pos:start="233:17" pos:end="233:33">qemu_mutex_unlock</name><argument_list pos:start="233:34" pos:end="233:55">(<argument pos:start="233:35" pos:end="233:54"><expr pos:start="233:35" pos:end="233:54"><operator pos:start="233:35" pos:end="233:35">&amp;</operator><name pos:start="233:36" pos:end="233:54">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="237:13" pos:end="237:18">break;</break>

        <case pos:start="239:9" pos:end="239:22">case <expr pos:start="239:14" pos:end="239:21"><name pos:start="239:14" pos:end="239:21">VSC_Init</name></expr>:</case>

            <if_stmt pos:start="241:13" pos:end="245:13"><if pos:start="241:13" pos:end="245:13">if <condition pos:start="241:16" pos:end="241:72">(<expr pos:start="241:17" pos:end="241:71"><call pos:start="241:17" pos:end="241:67"><name pos:start="241:17" pos:end="241:28">on_host_init</name><argument_list pos:start="241:29" pos:end="241:67">(<argument pos:start="241:30" pos:end="241:38"><expr pos:start="241:30" pos:end="241:38"><operator pos:start="241:30" pos:end="241:30">&amp;</operator><name pos:start="241:31" pos:end="241:38">mhHeader</name></expr></argument>, <argument pos:start="241:41" pos:end="241:66"><expr pos:start="241:41" pos:end="241:66"><operator pos:start="241:41" pos:end="241:41">(</operator><name pos:start="241:42" pos:end="241:51">VSCMsgInit</name> <operator pos:start="241:53" pos:end="241:53">*</operator><operator pos:start="241:54" pos:end="241:54">)</operator><name pos:start="241:55" pos:end="241:66">pbSendBuffer</name></expr></argument>)</argument_list></call> <operator pos:start="241:69" pos:end="241:69">&lt;</operator> <literal type="number" pos:start="241:71" pos:end="241:71">0</literal></expr>)</condition> <block pos:start="241:74" pos:end="245:13">{<block_content pos:start="243:17" pos:end="243:29">

                <return pos:start="243:17" pos:end="243:29">return <expr pos:start="243:24" pos:end="243:28"><name pos:start="243:24" pos:end="243:28">FALSE</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="247:13" pos:end="247:18">break;</break>

        <default pos:start="249:9" pos:end="249:16">default:</default>

            <expr_stmt pos:start="251:13" pos:end="251:35"><expr pos:start="251:13" pos:end="251:34"><call pos:start="251:13" pos:end="251:34"><name pos:start="251:13" pos:end="251:32">g_assert_not_reached</name><argument_list pos:start="251:33" pos:end="251:34">()</argument_list></call></expr>;</expr_stmt>

            <return pos:start="253:13" pos:end="253:25">return <expr pos:start="253:20" pos:end="253:24"><name pos:start="253:20" pos:end="253:24">FALSE</name></expr>;</return>

        </block_content>}</block></switch>



        <expr_stmt pos:start="259:9" pos:end="259:29"><expr pos:start="259:9" pos:end="259:28"><name pos:start="259:9" pos:end="259:13">state</name> <operator pos:start="259:15" pos:end="259:15">=</operator> <name pos:start="259:17" pos:end="259:28">STATE_HEADER</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





    <return pos:start="267:5" pos:end="267:16">return <expr pos:start="267:12" pos:end="267:15"><name pos:start="267:12" pos:end="267:15">TRUE</name></expr>;</return>

</block_content>}</block>
</unit>
