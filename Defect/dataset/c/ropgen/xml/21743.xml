<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21743.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:26">nic_receive</name><parameter_list pos:start="1:27" pos:end="1:80">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:41">NetClientState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">nc</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:66"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:60">uint8_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type> <name pos:start="1:64" pos:end="1:66">buf</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:79"><decl pos:start="1:69" pos:end="1:79"><type pos:start="1:69" pos:end="1:79"><name pos:start="1:69" pos:end="1:74">size_t</name></type> <name pos:start="1:76" pos:end="1:79">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="303:1">{<block_content pos:start="13:5" pos:end="301:16">

    <comment type="block" pos:start="5:5" pos:end="11:7">/* TODO:

     * - Magic packets should set bit 30 in power management driver register.

     * - Interesting packets should set bit 29 in power management driver register.

     */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">EEPRO100State</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:20">s</name> <init pos:start="13:22" pos:end="13:58">= <expr pos:start="13:24" pos:end="13:58"><call pos:start="13:24" pos:end="13:50"><name pos:start="13:24" pos:end="13:32">DO_UPCAST</name><argument_list pos:start="13:33" pos:end="13:50">(<argument pos:start="13:34" pos:end="13:41"><expr pos:start="13:34" pos:end="13:41"><name pos:start="13:34" pos:end="13:41">NICState</name></expr></argument>, <argument pos:start="13:44" pos:end="13:45"><expr pos:start="13:44" pos:end="13:45"><name pos:start="13:44" pos:end="13:45">nc</name></expr></argument>, <argument pos:start="13:48" pos:end="13:49"><expr pos:start="13:48" pos:end="13:49"><name pos:start="13:48" pos:end="13:49">nc</name></expr></argument>)</argument_list></call><operator pos:start="13:51" pos:end="13:52">-&gt;</operator><name pos:start="13:53" pos:end="13:58">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="18:0"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:23">rfd_status</name> <init pos:start="15:25" pos:end="15:32">= <expr pos:start="15:27" pos:end="15:32"><literal type="number" pos:start="15:27" pos:end="15:32">0xa000</literal></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="17:1" pos:end="17:39">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:39"><call pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:11">defined</name><argument_list pos:start="17:12" pos:end="17:39">(<argument pos:start="17:13" pos:end="17:38"><expr pos:start="17:13" pos:end="17:38"><name pos:start="17:13" pos:end="17:38">CONFIG_PAD_RECEIVED_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="19:5" pos:end="22:0"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:23"><name pos:start="19:13" pos:end="19:19">min_buf</name><index pos:start="19:20" pos:end="19:23">[<expr pos:start="19:21" pos:end="19:22"><literal type="number" pos:start="19:21" pos:end="19:22">60</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="23:5" pos:end="30:0"><decl pos:start="23:5" pos:end="25:46"><type pos:start="23:5" pos:end="23:24"><specifier pos:start="23:5" pos:end="23:10">static</specifier> <specifier pos:start="23:12" pos:end="23:16">const</specifier> <name pos:start="23:18" pos:end="23:24">uint8_t</name></type> <name pos:start="23:26" pos:end="23:45"><name pos:start="23:26" pos:end="23:42">broadcast_macaddr</name><index pos:start="23:43" pos:end="23:45">[<expr pos:start="23:44" pos:end="23:44"><literal type="number" pos:start="23:44" pos:end="23:44">6</literal></expr>]</index></name> <init pos:start="23:47" pos:end="25:46">=

        <expr pos:start="25:9" pos:end="25:46"><block pos:start="25:9" pos:end="25:46">{ <expr pos:start="25:11" pos:end="25:14"><literal type="number" pos:start="25:11" pos:end="25:14">0xff</literal></expr>, <expr pos:start="25:17" pos:end="25:20"><literal type="number" pos:start="25:17" pos:end="25:20">0xff</literal></expr>, <expr pos:start="25:23" pos:end="25:26"><literal type="number" pos:start="25:23" pos:end="25:26">0xff</literal></expr>, <expr pos:start="25:29" pos:end="25:32"><literal type="number" pos:start="25:29" pos:end="25:32">0xff</literal></expr>, <expr pos:start="25:35" pos:end="25:38"><literal type="number" pos:start="25:35" pos:end="25:38">0xff</literal></expr>, <expr pos:start="25:41" pos:end="25:44"><literal type="number" pos:start="25:41" pos:end="25:44">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="29:1" pos:end="29:39">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:39"><call pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:11">defined</name><argument_list pos:start="29:12" pos:end="29:39">(<argument pos:start="29:13" pos:end="29:38"><expr pos:start="29:13" pos:end="29:38"><name pos:start="29:13" pos:end="29:38">CONFIG_PAD_RECEIVED_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="31:5" pos:end="31:46">/* Pad to minimum Ethernet frame length */</comment>

    <if_stmt pos:start="33:5" pos:end="46:0"><if pos:start="33:5" pos:end="46:0">if <condition pos:start="33:8" pos:end="33:31">(<expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:12">size</name> <operator pos:start="33:14" pos:end="33:14">&lt;</operator> <sizeof pos:start="33:16" pos:end="33:30">sizeof<argument_list pos:start="33:22" pos:end="33:30">(<argument pos:start="33:23" pos:end="33:29"><expr pos:start="33:23" pos:end="33:29"><name pos:start="33:23" pos:end="33:29">min_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="33:33" pos:end="46:0">{<block_content pos:start="35:9" pos:end="41:31">

        <expr_stmt pos:start="35:9" pos:end="35:35"><expr pos:start="35:9" pos:end="35:34"><call pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:14">memcpy</name><argument_list pos:start="35:15" pos:end="35:34">(<argument pos:start="35:16" pos:end="35:22"><expr pos:start="35:16" pos:end="35:22"><name pos:start="35:16" pos:end="35:22">min_buf</name></expr></argument>, <argument pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:27">buf</name></expr></argument>, <argument pos:start="35:30" pos:end="35:33"><expr pos:start="35:30" pos:end="35:33"><name pos:start="35:30" pos:end="35:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:58"><expr pos:start="37:9" pos:end="37:57"><call pos:start="37:9" pos:end="37:57"><name pos:start="37:9" pos:end="37:14">memset</name><argument_list pos:start="37:15" pos:end="37:57">(<argument pos:start="37:16" pos:end="37:29"><expr pos:start="37:16" pos:end="37:29"><operator pos:start="37:16" pos:end="37:16">&amp;</operator><name pos:start="37:17" pos:end="37:29"><name pos:start="37:17" pos:end="37:23">min_buf</name><index pos:start="37:24" pos:end="37:29">[<expr pos:start="37:25" pos:end="37:28"><name pos:start="37:25" pos:end="37:28">size</name></expr>]</index></name></expr></argument>, <argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><literal type="number" pos:start="37:32" pos:end="37:32">0</literal></expr></argument>, <argument pos:start="37:35" pos:end="37:56"><expr pos:start="37:35" pos:end="37:56"><sizeof pos:start="37:35" pos:end="37:49">sizeof<argument_list pos:start="37:41" pos:end="37:49">(<argument pos:start="37:42" pos:end="37:48"><expr pos:start="37:42" pos:end="37:48"><name pos:start="37:42" pos:end="37:48">min_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="37:51" pos:end="37:51">-</operator> <name pos:start="37:53" pos:end="37:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:22"><expr pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:11">buf</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:21">min_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:31"><expr pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:12">size</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <sizeof pos:start="41:16" pos:end="41:30">sizeof<argument_list pos:start="41:22" pos:end="41:30">(<argument pos:start="41:23" pos:end="41:29"><expr pos:start="41:23" pos:end="41:29"><name pos:start="41:23" pos:end="41:29">min_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="49:5" pos:end="175:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:35">(<expr pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:24">configuration</name><index pos:start="49:25" pos:end="49:27">[<expr pos:start="49:26" pos:end="49:26"><literal type="number" pos:start="49:26" pos:end="49:26">8</literal></expr>]</index></name> <operator pos:start="49:29" pos:end="49:29">&amp;</operator> <literal type="number" pos:start="49:31" pos:end="49:34">0x80</literal></expr>)</condition> <block pos:start="49:37" pos:end="59:5">{<block_content pos:start="53:9" pos:end="58:0">

        <comment type="block" pos:start="51:9" pos:end="51:31">/* CSMA is disabled. */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:58"><expr pos:start="53:9" pos:end="53:57"><call pos:start="53:9" pos:end="53:57"><name pos:start="53:9" pos:end="53:14">logout</name><argument_list pos:start="53:15" pos:end="53:57">(<argument pos:start="53:16" pos:end="53:53"><expr pos:start="53:16" pos:end="53:53"><literal type="string" pos:start="53:16" pos:end="53:53">"%p received while CSMA is disabled\n"</literal></expr></argument>, <argument pos:start="53:56" pos:end="53:56"><expr pos:start="53:56" pos:end="53:56"><name pos:start="53:56" pos:end="53:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="58:0">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return>

<cpp:if pos:start="57:1" pos:end="57:40">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:40"><operator pos:start="57:5" pos:end="57:5">!</operator><call pos:start="57:6" pos:end="57:40"><name pos:start="57:6" pos:end="57:12">defined</name><argument_list pos:start="57:13" pos:end="57:40">(<argument pos:start="57:14" pos:end="57:39"><expr pos:start="57:14" pos:end="57:39"><name pos:start="57:14" pos:end="57:39">CONFIG_PAD_RECEIVED_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="73:5">else if <condition pos:start="59:15" pos:end="59:59">(<expr pos:start="59:16" pos:end="59:58"><name pos:start="59:16" pos:end="59:19">size</name> <operator pos:start="59:21" pos:end="59:21">&lt;</operator> <literal type="number" pos:start="59:23" pos:end="59:24">64</literal> <operator pos:start="59:26" pos:end="59:27">&amp;&amp;</operator> <operator pos:start="59:29" pos:end="59:29">(</operator><name pos:start="59:30" pos:end="59:48"><name pos:start="59:30" pos:end="59:30">s</name><operator pos:start="59:31" pos:end="59:32">-&gt;</operator><name pos:start="59:33" pos:end="59:45">configuration</name><index pos:start="59:46" pos:end="59:48">[<expr pos:start="59:47" pos:end="59:47"><literal type="number" pos:start="59:47" pos:end="59:47">7</literal></expr>]</index></name> <operator pos:start="59:50" pos:end="59:50">&amp;</operator> <call pos:start="59:52" pos:end="59:57"><name pos:start="59:52" pos:end="59:54">BIT</name><argument_list pos:start="59:55" pos:end="59:57">(<argument pos:start="59:56" pos:end="59:56"><expr pos:start="59:56" pos:end="59:56"><literal type="number" pos:start="59:56" pos:end="59:56">0</literal></expr></argument>)</argument_list></call><operator pos:start="59:58" pos:end="59:58">)</operator></expr>)</condition> <block pos:start="59:61" pos:end="73:5">{<block_content pos:start="65:9" pos:end="72:0">

        <comment type="block" pos:start="61:9" pos:end="63:38">/* Short frame and configuration byte 7/0 (discard short receive) set:

         * Short frame is discarded */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:64"><expr pos:start="65:9" pos:end="65:63"><call pos:start="65:9" pos:end="65:63"><name pos:start="65:9" pos:end="65:14">logout</name><argument_list pos:start="65:15" pos:end="65:63">(<argument pos:start="65:16" pos:end="65:53"><expr pos:start="65:16" pos:end="65:53"><literal type="string" pos:start="65:16" pos:end="65:53">"%p received short frame (%zu byte)\n"</literal></expr></argument>, <argument pos:start="65:56" pos:end="65:56"><expr pos:start="65:56" pos:end="65:56"><name pos:start="65:56" pos:end="65:56">s</name></expr></argument>, <argument pos:start="65:59" pos:end="65:62"><expr pos:start="65:59" pos:end="65:62"><name pos:start="65:59" pos:end="65:62">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:46"><expr pos:start="67:9" pos:end="67:45"><name pos:start="67:9" pos:end="67:43"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:21">statistics</name><operator pos:start="67:22" pos:end="67:22">.</operator><name pos:start="67:23" pos:end="67:43">rx_short_frame_errors</name></name><operator pos:start="67:44" pos:end="67:45">++</operator></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="72:0">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="83:5">else if <condition pos:start="73:15" pos:end="73:83">(<expr pos:start="73:16" pos:end="73:82"><operator pos:start="73:16" pos:end="73:16">(</operator><name pos:start="73:17" pos:end="73:20">size</name> <operator pos:start="73:22" pos:end="73:22">&gt;</operator> <name pos:start="73:24" pos:end="73:41">MAX_ETH_FRAME_SIZE</name> <operator pos:start="73:43" pos:end="73:43">+</operator> <literal type="number" pos:start="73:45" pos:end="73:45">4</literal><operator pos:start="73:46" pos:end="73:46">)</operator> <operator pos:start="73:48" pos:end="73:49">&amp;&amp;</operator> <operator pos:start="73:51" pos:end="73:51">!</operator><operator pos:start="73:52" pos:end="73:52">(</operator><name pos:start="73:53" pos:end="73:72"><name pos:start="73:53" pos:end="73:53">s</name><operator pos:start="73:54" pos:end="73:55">-&gt;</operator><name pos:start="73:56" pos:end="73:68">configuration</name><index pos:start="73:69" pos:end="73:72">[<expr pos:start="73:70" pos:end="73:71"><literal type="number" pos:start="73:70" pos:end="73:71">18</literal></expr>]</index></name> <operator pos:start="73:74" pos:end="73:74">&amp;</operator> <call pos:start="73:76" pos:end="73:81"><name pos:start="73:76" pos:end="73:78">BIT</name><argument_list pos:start="73:79" pos:end="73:81">(<argument pos:start="73:80" pos:end="73:80"><expr pos:start="73:80" pos:end="73:80"><literal type="number" pos:start="73:80" pos:end="73:80">3</literal></expr></argument>)</argument_list></call><operator pos:start="73:82" pos:end="73:82">)</operator></expr>)</condition> <block pos:start="73:85" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:18">

        <comment type="block" pos:start="75:9" pos:end="77:40">/* Long frame and configuration byte 18/3 (long receive ok) not set:

         * Long frames are discarded. */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:72"><expr pos:start="79:9" pos:end="79:71"><call pos:start="79:9" pos:end="79:71"><name pos:start="79:9" pos:end="79:14">logout</name><argument_list pos:start="79:15" pos:end="79:71">(<argument pos:start="79:16" pos:end="79:61"><expr pos:start="79:16" pos:end="79:61"><literal type="string" pos:start="79:16" pos:end="79:61">"%p received long frame (%zu byte), ignored\n"</literal></expr></argument>, <argument pos:start="79:64" pos:end="79:64"><expr pos:start="79:64" pos:end="79:64"><name pos:start="79:64" pos:end="79:64">s</name></expr></argument>, <argument pos:start="79:67" pos:end="79:70"><expr pos:start="79:67" pos:end="79:70"><name pos:start="79:67" pos:end="79:70">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="83:7" pos:end="91:5">else if <condition pos:start="83:15" pos:end="83:54">(<expr pos:start="83:16" pos:end="83:53"><call pos:start="83:16" pos:end="83:48"><name pos:start="83:16" pos:end="83:21">memcmp</name><argument_list pos:start="83:22" pos:end="83:48">(<argument pos:start="83:23" pos:end="83:25"><expr pos:start="83:23" pos:end="83:25"><name pos:start="83:23" pos:end="83:25">buf</name></expr></argument>, <argument pos:start="83:28" pos:end="83:44"><expr pos:start="83:28" pos:end="83:44"><name pos:start="83:28" pos:end="83:44"><name pos:start="83:28" pos:end="83:28">s</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:34">conf</name><operator pos:start="83:35" pos:end="83:35">.</operator><name pos:start="83:36" pos:end="83:42">macaddr</name><operator pos:start="83:43" pos:end="83:43">.</operator><name pos:start="83:44" pos:end="83:44">a</name></name></expr></argument>, <argument pos:start="83:47" pos:end="83:47"><expr pos:start="83:47" pos:end="83:47"><literal type="number" pos:start="83:47" pos:end="83:47">6</literal></expr></argument>)</argument_list></call> <operator pos:start="83:50" pos:end="83:51">==</operator> <literal type="number" pos:start="83:53" pos:end="83:53">0</literal></expr>)</condition> <block pos:start="83:56" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:76">       <comment type="block" pos:start="83:64" pos:end="83:72">/* !!! */</comment>

        <comment type="block" pos:start="85:9" pos:end="85:47">/* Frame matches individual address. */</comment>

        <comment type="block" pos:start="87:9" pos:end="87:63">/* TODO: check configuration byte 15/4 (ignore U/L). */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:76"><expr pos:start="89:9" pos:end="89:75"><call pos:start="89:9" pos:end="89:75"><name pos:start="89:9" pos:end="89:13">TRACE</name><argument_list pos:start="89:14" pos:end="89:75">(<argument pos:start="89:15" pos:end="89:18"><expr pos:start="89:15" pos:end="89:18"><name pos:start="89:15" pos:end="89:18">RXTX</name></expr></argument>, <argument pos:start="89:21" pos:end="89:74"><expr pos:start="89:21" pos:end="89:74"><call pos:start="89:21" pos:end="89:74"><name pos:start="89:21" pos:end="89:26">logout</name><argument_list pos:start="89:27" pos:end="89:74">(<argument pos:start="89:28" pos:end="89:64"><expr pos:start="89:28" pos:end="89:64"><literal type="string" pos:start="89:28" pos:end="89:64">"%p received frame for me, len=%zu\n"</literal></expr></argument>, <argument pos:start="89:67" pos:end="89:67"><expr pos:start="89:67" pos:end="89:67"><name pos:start="89:67" pos:end="89:67">s</name></expr></argument>, <argument pos:start="89:70" pos:end="89:73"><expr pos:start="89:70" pos:end="89:73"><name pos:start="89:70" pos:end="89:73">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="91:7" pos:end="99:5">else if <condition pos:start="91:15" pos:end="91:54">(<expr pos:start="91:16" pos:end="91:53"><call pos:start="91:16" pos:end="91:48"><name pos:start="91:16" pos:end="91:21">memcmp</name><argument_list pos:start="91:22" pos:end="91:48">(<argument pos:start="91:23" pos:end="91:25"><expr pos:start="91:23" pos:end="91:25"><name pos:start="91:23" pos:end="91:25">buf</name></expr></argument>, <argument pos:start="91:28" pos:end="91:44"><expr pos:start="91:28" pos:end="91:44"><name pos:start="91:28" pos:end="91:44">broadcast_macaddr</name></expr></argument>, <argument pos:start="91:47" pos:end="91:47"><expr pos:start="91:47" pos:end="91:47"><literal type="number" pos:start="91:47" pos:end="91:47">6</literal></expr></argument>)</argument_list></call> <operator pos:start="91:50" pos:end="91:51">==</operator> <literal type="number" pos:start="91:53" pos:end="91:53">0</literal></expr>)</condition> <block pos:start="91:56" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:29">

        <comment type="block" pos:start="93:9" pos:end="93:30">/* Broadcast frame. */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:73"><expr pos:start="95:9" pos:end="95:72"><call pos:start="95:9" pos:end="95:72"><name pos:start="95:9" pos:end="95:13">TRACE</name><argument_list pos:start="95:14" pos:end="95:72">(<argument pos:start="95:15" pos:end="95:18"><expr pos:start="95:15" pos:end="95:18"><name pos:start="95:15" pos:end="95:18">RXTX</name></expr></argument>, <argument pos:start="95:21" pos:end="95:71"><expr pos:start="95:21" pos:end="95:71"><call pos:start="95:21" pos:end="95:71"><name pos:start="95:21" pos:end="95:26">logout</name><argument_list pos:start="95:27" pos:end="95:71">(<argument pos:start="95:28" pos:end="95:61"><expr pos:start="95:28" pos:end="95:61"><literal type="string" pos:start="95:28" pos:end="95:61">"%p received broadcast, len=%zu\n"</literal></expr></argument>, <argument pos:start="95:64" pos:end="95:64"><expr pos:start="95:64" pos:end="95:64"><name pos:start="95:64" pos:end="95:64">s</name></expr></argument>, <argument pos:start="95:67" pos:end="95:70"><expr pos:start="95:67" pos:end="95:70"><name pos:start="95:67" pos:end="95:70">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:29"><expr pos:start="97:9" pos:end="97:28"><name pos:start="97:9" pos:end="97:18">rfd_status</name> <operator pos:start="97:20" pos:end="97:21">|=</operator> <literal type="number" pos:start="97:23" pos:end="97:28">0x0002</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="99:7" pos:end="139:5">else if <condition pos:start="99:15" pos:end="99:29">(<expr pos:start="99:16" pos:end="99:28"><name pos:start="99:16" pos:end="99:21"><name pos:start="99:16" pos:end="99:18">buf</name><index pos:start="99:19" pos:end="99:21">[<expr pos:start="99:20" pos:end="99:20"><literal type="number" pos:start="99:20" pos:end="99:20">0</literal></expr>]</index></name> <operator pos:start="99:23" pos:end="99:23">&amp;</operator> <literal type="number" pos:start="99:25" pos:end="99:28">0x01</literal></expr>)</condition> <block pos:start="99:31" pos:end="139:5">{<block_content pos:start="103:9" pos:end="137:29">

        <comment type="block" pos:start="101:9" pos:end="101:30">/* Multicast frame. */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:97"><expr pos:start="103:9" pos:end="103:96"><call pos:start="103:9" pos:end="103:96"><name pos:start="103:9" pos:end="103:13">TRACE</name><argument_list pos:start="103:14" pos:end="103:96">(<argument pos:start="103:15" pos:end="103:18"><expr pos:start="103:15" pos:end="103:18"><name pos:start="103:15" pos:end="103:18">RXTX</name></expr></argument>, <argument pos:start="103:21" pos:end="103:95"><expr pos:start="103:21" pos:end="103:95"><call pos:start="103:21" pos:end="103:95"><name pos:start="103:21" pos:end="103:26">logout</name><argument_list pos:start="103:27" pos:end="103:95">(<argument pos:start="103:28" pos:end="103:64"><expr pos:start="103:28" pos:end="103:64"><literal type="string" pos:start="103:28" pos:end="103:64">"%p received multicast, len=%zu,%s\n"</literal></expr></argument>, <argument pos:start="103:67" pos:end="103:67"><expr pos:start="103:67" pos:end="103:67"><name pos:start="103:67" pos:end="103:67">s</name></expr></argument>, <argument pos:start="103:70" pos:end="103:73"><expr pos:start="103:70" pos:end="103:73"><name pos:start="103:70" pos:end="103:73">size</name></expr></argument>, <argument pos:start="103:76" pos:end="103:94"><expr pos:start="103:76" pos:end="103:94"><call pos:start="103:76" pos:end="103:94"><name pos:start="103:76" pos:end="103:83">nic_dump</name><argument_list pos:start="103:84" pos:end="103:94">(<argument pos:start="103:85" pos:end="103:87"><expr pos:start="103:85" pos:end="103:87"><name pos:start="103:85" pos:end="103:87">buf</name></expr></argument>, <argument pos:start="103:90" pos:end="103:93"><expr pos:start="103:90" pos:end="103:93"><name pos:start="103:90" pos:end="103:93">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="133:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:42">(<expr pos:start="105:13" pos:end="105:41"><name pos:start="105:13" pos:end="105:32"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:28">configuration</name><index pos:start="105:29" pos:end="105:32">[<expr pos:start="105:30" pos:end="105:31"><literal type="number" pos:start="105:30" pos:end="105:31">21</literal></expr>]</index></name> <operator pos:start="105:34" pos:end="105:34">&amp;</operator> <call pos:start="105:36" pos:end="105:41"><name pos:start="105:36" pos:end="105:38">BIT</name><argument_list pos:start="105:39" pos:end="105:41">(<argument pos:start="105:40" pos:end="105:40"><expr pos:start="105:40" pos:end="105:40"><literal type="number" pos:start="105:40" pos:end="105:40">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:44" pos:end="109:9">{<block_content>

          <comment type="block" pos:start="107:11" pos:end="107:71">/* Multicast all bit is set, receive all multicast frames. */</comment>

        </block_content>}</block></if> <else pos:start="109:11" pos:end="133:9">else <block pos:start="109:16" pos:end="133:9">{<block_content pos:start="111:11" pos:end="131:11">

          <decl_stmt pos:start="111:11" pos:end="111:59"><decl pos:start="111:11" pos:end="111:58"><type pos:start="111:11" pos:end="111:18"><name pos:start="111:11" pos:end="111:18">unsigned</name></type> <name pos:start="111:20" pos:end="111:28">mcast_idx</name> <init pos:start="111:30" pos:end="111:58">= <expr pos:start="111:32" pos:end="111:58"><call pos:start="111:32" pos:end="111:58"><name pos:start="111:32" pos:end="111:53">e100_compute_mcast_idx</name><argument_list pos:start="111:54" pos:end="111:58">(<argument pos:start="111:55" pos:end="111:57"><expr pos:start="111:55" pos:end="111:57"><name pos:start="111:55" pos:end="111:57">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt pos:start="113:11" pos:end="113:33"><expr pos:start="113:11" pos:end="113:32"><call pos:start="113:11" pos:end="113:32"><name pos:start="113:11" pos:end="113:16">assert</name><argument_list pos:start="113:17" pos:end="113:32">(<argument pos:start="113:18" pos:end="113:31"><expr pos:start="113:18" pos:end="113:31"><name pos:start="113:18" pos:end="113:26">mcast_idx</name> <operator pos:start="113:28" pos:end="113:28">&lt;</operator> <literal type="number" pos:start="113:30" pos:end="113:31">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt pos:start="115:11" pos:end="131:11"><if pos:start="115:11" pos:end="119:11">if <condition pos:start="115:14" pos:end="115:63">(<expr pos:start="115:15" pos:end="115:62"><name pos:start="115:15" pos:end="115:37"><name pos:start="115:15" pos:end="115:15">s</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:21">mult</name><index pos:start="115:22" pos:end="115:37">[<expr pos:start="115:23" pos:end="115:36"><name pos:start="115:23" pos:end="115:31">mcast_idx</name> <operator pos:start="115:33" pos:end="115:34">&gt;&gt;</operator> <literal type="number" pos:start="115:36" pos:end="115:36">3</literal></expr>]</index></name> <operator pos:start="115:39" pos:end="115:39">&amp;</operator> <operator pos:start="115:41" pos:end="115:41">(</operator><literal type="number" pos:start="115:42" pos:end="115:42">1</literal> <operator pos:start="115:44" pos:end="115:45">&lt;&lt;</operator> <operator pos:start="115:47" pos:end="115:47">(</operator><name pos:start="115:48" pos:end="115:56">mcast_idx</name> <operator pos:start="115:58" pos:end="115:58">&amp;</operator> <literal type="number" pos:start="115:60" pos:end="115:60">7</literal><operator pos:start="115:61" pos:end="115:61">)</operator><operator pos:start="115:62" pos:end="115:62">)</operator></expr>)</condition> <block pos:start="115:65" pos:end="119:11">{<block_content>

            <comment type="block" pos:start="117:13" pos:end="117:59">/* Multicast frame is allowed in hash table. */</comment>

          </block_content>}</block></if> <if type="elseif" pos:start="119:13" pos:end="125:11">else if <condition pos:start="119:21" pos:end="119:51">(<expr pos:start="119:22" pos:end="119:50"><name pos:start="119:22" pos:end="119:41"><name pos:start="119:22" pos:end="119:22">s</name><operator pos:start="119:23" pos:end="119:24">-&gt;</operator><name pos:start="119:25" pos:end="119:37">configuration</name><index pos:start="119:38" pos:end="119:41">[<expr pos:start="119:39" pos:end="119:40"><literal type="number" pos:start="119:39" pos:end="119:40">15</literal></expr>]</index></name> <operator pos:start="119:43" pos:end="119:43">&amp;</operator> <call pos:start="119:45" pos:end="119:50"><name pos:start="119:45" pos:end="119:47">BIT</name><argument_list pos:start="119:48" pos:end="119:50">(<argument pos:start="119:49" pos:end="119:49"><expr pos:start="119:49" pos:end="119:49"><literal type="number" pos:start="119:49" pos:end="119:49">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:53" pos:end="125:11">{<block_content pos:start="123:15" pos:end="123:35">

              <comment type="block" pos:start="121:15" pos:end="121:45">/* Promiscuous: receive all. */</comment>

              <expr_stmt pos:start="123:15" pos:end="123:35"><expr pos:start="123:15" pos:end="123:34"><name pos:start="123:15" pos:end="123:24">rfd_status</name> <operator pos:start="123:26" pos:end="123:27">|=</operator> <literal type="number" pos:start="123:29" pos:end="123:34">0x0004</literal></expr>;</expr_stmt>

          </block_content>}</block></if> <else pos:start="125:13" pos:end="131:11">else <block pos:start="125:18" pos:end="131:11">{<block_content pos:start="127:15" pos:end="129:24">

              <expr_stmt pos:start="127:15" pos:end="127:63"><expr pos:start="127:15" pos:end="127:62"><call pos:start="127:15" pos:end="127:62"><name pos:start="127:15" pos:end="127:19">TRACE</name><argument_list pos:start="127:20" pos:end="127:62">(<argument pos:start="127:21" pos:end="127:24"><expr pos:start="127:21" pos:end="127:24"><name pos:start="127:21" pos:end="127:24">RXTX</name></expr></argument>, <argument pos:start="127:27" pos:end="127:61"><expr pos:start="127:27" pos:end="127:61"><call pos:start="127:27" pos:end="127:61"><name pos:start="127:27" pos:end="127:32">logout</name><argument_list pos:start="127:33" pos:end="127:61">(<argument pos:start="127:34" pos:end="127:57"><expr pos:start="127:34" pos:end="127:57"><literal type="string" pos:start="127:34" pos:end="127:57">"%p multicast ignored\n"</literal></expr></argument>, <argument pos:start="127:60" pos:end="127:60"><expr pos:start="127:60" pos:end="127:60"><name pos:start="127:60" pos:end="127:60">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <return pos:start="129:15" pos:end="129:24">return <expr pos:start="129:22" pos:end="129:23"><operator pos:start="129:22" pos:end="129:22">-</operator><literal type="number" pos:start="129:23" pos:end="129:23">1</literal></expr>;</return>

          </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="135:9" pos:end="135:50">/* TODO: Next not for promiscuous mode? */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:29"><expr pos:start="137:9" pos:end="137:28"><name pos:start="137:9" pos:end="137:18">rfd_status</name> <operator pos:start="137:20" pos:end="137:21">|=</operator> <literal type="number" pos:start="137:23" pos:end="137:28">0x0002</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="147:5">else if <condition pos:start="139:15" pos:end="139:45">(<expr pos:start="139:16" pos:end="139:44"><name pos:start="139:16" pos:end="139:35"><name pos:start="139:16" pos:end="139:16">s</name><operator pos:start="139:17" pos:end="139:18">-&gt;</operator><name pos:start="139:19" pos:end="139:31">configuration</name><index pos:start="139:32" pos:end="139:35">[<expr pos:start="139:33" pos:end="139:34"><literal type="number" pos:start="139:33" pos:end="139:34">15</literal></expr>]</index></name> <operator pos:start="139:37" pos:end="139:37">&amp;</operator> <call pos:start="139:39" pos:end="139:44"><name pos:start="139:39" pos:end="139:41">BIT</name><argument_list pos:start="139:42" pos:end="139:44">(<argument pos:start="139:43" pos:end="139:43"><expr pos:start="139:43" pos:end="139:43"><literal type="number" pos:start="139:43" pos:end="139:43">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:47" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:29">

        <comment type="block" pos:start="141:9" pos:end="141:39">/* Promiscuous: receive all. */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:89"><expr pos:start="143:9" pos:end="143:88"><call pos:start="143:9" pos:end="143:88"><name pos:start="143:9" pos:end="143:13">TRACE</name><argument_list pos:start="143:14" pos:end="143:88">(<argument pos:start="143:15" pos:end="143:18"><expr pos:start="143:15" pos:end="143:18"><name pos:start="143:15" pos:end="143:18">RXTX</name></expr></argument>, <argument pos:start="143:21" pos:end="143:87"><expr pos:start="143:21" pos:end="143:87"><call pos:start="143:21" pos:end="143:87"><name pos:start="143:21" pos:end="143:26">logout</name><argument_list pos:start="143:27" pos:end="143:87">(<argument pos:start="143:28" pos:end="143:77"><expr pos:start="143:28" pos:end="143:77"><literal type="string" pos:start="143:28" pos:end="143:77">"%p received frame in promiscuous mode, len=%zu\n"</literal></expr></argument>, <argument pos:start="143:80" pos:end="143:80"><expr pos:start="143:80" pos:end="143:80"><name pos:start="143:80" pos:end="143:80">s</name></expr></argument>, <argument pos:start="143:83" pos:end="143:86"><expr pos:start="143:83" pos:end="143:86"><name pos:start="143:83" pos:end="143:86">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:29"><expr pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:18">rfd_status</name> <operator pos:start="145:20" pos:end="145:21">|=</operator> <literal type="number" pos:start="145:23" pos:end="145:28">0x0004</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="147:7" pos:end="167:5">else if <condition pos:start="147:15" pos:end="147:45">(<expr pos:start="147:16" pos:end="147:44"><name pos:start="147:16" pos:end="147:35"><name pos:start="147:16" pos:end="147:16">s</name><operator pos:start="147:17" pos:end="147:18">-&gt;</operator><name pos:start="147:19" pos:end="147:31">configuration</name><index pos:start="147:32" pos:end="147:35">[<expr pos:start="147:33" pos:end="147:34"><literal type="number" pos:start="147:33" pos:end="147:34">20</literal></expr>]</index></name> <operator pos:start="147:37" pos:end="147:37">&amp;</operator> <call pos:start="147:39" pos:end="147:44"><name pos:start="147:39" pos:end="147:41">BIT</name><argument_list pos:start="147:42" pos:end="147:44">(<argument pos:start="147:43" pos:end="147:43"><expr pos:start="147:43" pos:end="147:43"><literal type="number" pos:start="147:43" pos:end="147:43">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:47" pos:end="167:5">{<block_content pos:start="151:9" pos:end="165:9">

        <comment type="block" pos:start="149:9" pos:end="149:34">/* Multiple IA bit set. */</comment>

        <decl_stmt pos:start="151:9" pos:end="151:52"><decl pos:start="151:9" pos:end="151:51"><type pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:16">unsigned</name></type> <name pos:start="151:18" pos:end="151:26">mcast_idx</name> <init pos:start="151:28" pos:end="151:51">= <expr pos:start="151:30" pos:end="151:51"><call pos:start="151:30" pos:end="151:51"><name pos:start="151:30" pos:end="151:46">compute_mcast_idx</name><argument_list pos:start="151:47" pos:end="151:51">(<argument pos:start="151:48" pos:end="151:50"><expr pos:start="151:48" pos:end="151:50"><name pos:start="151:48" pos:end="151:50">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:31"><expr pos:start="153:9" pos:end="153:30"><call pos:start="153:9" pos:end="153:30"><name pos:start="153:9" pos:end="153:14">assert</name><argument_list pos:start="153:15" pos:end="153:30">(<argument pos:start="153:16" pos:end="153:29"><expr pos:start="153:16" pos:end="153:29"><name pos:start="153:16" pos:end="153:24">mcast_idx</name> <operator pos:start="153:26" pos:end="153:26">&lt;</operator> <literal type="number" pos:start="153:28" pos:end="153:29">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="165:9"><if pos:start="155:9" pos:end="159:9">if <condition pos:start="155:12" pos:end="155:61">(<expr pos:start="155:13" pos:end="155:60"><name pos:start="155:13" pos:end="155:35"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:19">mult</name><index pos:start="155:20" pos:end="155:35">[<expr pos:start="155:21" pos:end="155:34"><name pos:start="155:21" pos:end="155:29">mcast_idx</name> <operator pos:start="155:31" pos:end="155:32">&gt;&gt;</operator> <literal type="number" pos:start="155:34" pos:end="155:34">3</literal></expr>]</index></name> <operator pos:start="155:37" pos:end="155:37">&amp;</operator> <operator pos:start="155:39" pos:end="155:39">(</operator><literal type="number" pos:start="155:40" pos:end="155:40">1</literal> <operator pos:start="155:42" pos:end="155:43">&lt;&lt;</operator> <operator pos:start="155:45" pos:end="155:45">(</operator><name pos:start="155:46" pos:end="155:54">mcast_idx</name> <operator pos:start="155:56" pos:end="155:56">&amp;</operator> <literal type="number" pos:start="155:58" pos:end="155:58">7</literal><operator pos:start="155:59" pos:end="155:59">)</operator><operator pos:start="155:60" pos:end="155:60">)</operator></expr>)</condition> <block pos:start="155:63" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:73">

            <expr_stmt pos:start="157:13" pos:end="157:73"><expr pos:start="157:13" pos:end="157:72"><call pos:start="157:13" pos:end="157:72"><name pos:start="157:13" pos:end="157:17">TRACE</name><argument_list pos:start="157:18" pos:end="157:72">(<argument pos:start="157:19" pos:end="157:22"><expr pos:start="157:19" pos:end="157:22"><name pos:start="157:19" pos:end="157:22">RXTX</name></expr></argument>, <argument pos:start="157:25" pos:end="157:71"><expr pos:start="157:25" pos:end="157:71"><call pos:start="157:25" pos:end="157:71"><name pos:start="157:25" pos:end="157:30">logout</name><argument_list pos:start="157:31" pos:end="157:71">(<argument pos:start="157:32" pos:end="157:67"><expr pos:start="157:32" pos:end="157:67"><literal type="string" pos:start="157:32" pos:end="157:67">"%p accepted, multiple IA bit set\n"</literal></expr></argument>, <argument pos:start="157:70" pos:end="157:70"><expr pos:start="157:70" pos:end="157:70"><name pos:start="157:70" pos:end="157:70">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="159:11" pos:end="165:9">else <block pos:start="159:16" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:22">

            <expr_stmt pos:start="161:13" pos:end="161:78"><expr pos:start="161:13" pos:end="161:77"><call pos:start="161:13" pos:end="161:77"><name pos:start="161:13" pos:end="161:17">TRACE</name><argument_list pos:start="161:18" pos:end="161:77">(<argument pos:start="161:19" pos:end="161:22"><expr pos:start="161:19" pos:end="161:22"><name pos:start="161:19" pos:end="161:22">RXTX</name></expr></argument>, <argument pos:start="161:25" pos:end="161:76"><expr pos:start="161:25" pos:end="161:76"><call pos:start="161:25" pos:end="161:76"><name pos:start="161:25" pos:end="161:30">logout</name><argument_list pos:start="161:31" pos:end="161:76">(<argument pos:start="161:32" pos:end="161:72"><expr pos:start="161:32" pos:end="161:72"><literal type="string" pos:start="161:32" pos:end="161:72">"%p frame ignored, multiple IA bit set\n"</literal></expr></argument>, <argument pos:start="161:75" pos:end="161:75"><expr pos:start="161:75" pos:end="161:75"><name pos:start="161:75" pos:end="161:75">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="163:13" pos:end="163:22">return <expr pos:start="163:20" pos:end="163:21"><operator pos:start="163:20" pos:end="163:20">-</operator><literal type="number" pos:start="163:21" pos:end="163:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="167:7" pos:end="175:5">else <block pos:start="167:12" pos:end="175:5">{<block_content pos:start="169:9" pos:end="173:20">

        <expr_stmt pos:start="169:9" pos:end="171:36"><expr pos:start="169:9" pos:end="171:35"><call pos:start="169:9" pos:end="171:35"><name pos:start="169:9" pos:end="169:13">TRACE</name><argument_list pos:start="169:14" pos:end="171:35">(<argument pos:start="169:15" pos:end="169:18"><expr pos:start="169:15" pos:end="169:18"><name pos:start="169:15" pos:end="169:18">RXTX</name></expr></argument>, <argument pos:start="169:21" pos:end="171:34"><expr pos:start="169:21" pos:end="171:34"><call pos:start="169:21" pos:end="171:34"><name pos:start="169:21" pos:end="169:26">logout</name><argument_list pos:start="169:27" pos:end="171:34">(<argument pos:start="169:28" pos:end="169:69"><expr pos:start="169:28" pos:end="169:69"><literal type="string" pos:start="169:28" pos:end="169:69">"%p received frame, ignored, len=%zu,%s\n"</literal></expr></argument>, <argument pos:start="169:72" pos:end="169:72"><expr pos:start="169:72" pos:end="169:72"><name pos:start="169:72" pos:end="169:72">s</name></expr></argument>, <argument pos:start="169:75" pos:end="169:78"><expr pos:start="169:75" pos:end="169:78"><name pos:start="169:75" pos:end="169:78">size</name></expr></argument>,

              <argument pos:start="171:15" pos:end="171:33"><expr pos:start="171:15" pos:end="171:33"><call pos:start="171:15" pos:end="171:33"><name pos:start="171:15" pos:end="171:22">nic_dump</name><argument_list pos:start="171:23" pos:end="171:33">(<argument pos:start="171:24" pos:end="171:26"><expr pos:start="171:24" pos:end="171:26"><name pos:start="171:24" pos:end="171:26">buf</name></expr></argument>, <argument pos:start="171:29" pos:end="171:32"><expr pos:start="171:29" pos:end="171:32"><name pos:start="171:29" pos:end="171:32">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="173:9" pos:end="173:20">return <expr pos:start="173:16" pos:end="173:19"><name pos:start="173:16" pos:end="173:19">size</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="179:5" pos:end="199:5"><if pos:start="179:5" pos:end="199:5">if <condition pos:start="179:8" pos:end="179:36">(<expr pos:start="179:9" pos:end="179:35"><call pos:start="179:9" pos:end="179:23"><name pos:start="179:9" pos:end="179:20">get_ru_state</name><argument_list pos:start="179:21" pos:end="179:23">(<argument pos:start="179:22" pos:end="179:22"><expr pos:start="179:22" pos:end="179:22"><name pos:start="179:22" pos:end="179:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="179:25" pos:end="179:26">!=</operator> <name pos:start="179:28" pos:end="179:35">ru_ready</name></expr>)</condition> <block pos:start="179:38" pos:end="199:5">{<block_content pos:start="183:9" pos:end="197:18">

        <comment type="block" pos:start="181:9" pos:end="181:37">/* No resources available. */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:60"><expr pos:start="183:9" pos:end="183:59"><call pos:start="183:9" pos:end="183:59"><name pos:start="183:9" pos:end="183:14">logout</name><argument_list pos:start="183:15" pos:end="183:59">(<argument pos:start="183:16" pos:end="183:41"><expr pos:start="183:16" pos:end="183:41"><literal type="string" pos:start="183:16" pos:end="183:41">"no resources, state=%u\n"</literal></expr></argument>, <argument pos:start="183:44" pos:end="183:58"><expr pos:start="183:44" pos:end="183:58"><call pos:start="183:44" pos:end="183:58"><name pos:start="183:44" pos:end="183:55">get_ru_state</name><argument_list pos:start="183:56" pos:end="183:58">(<argument pos:start="183:57" pos:end="183:57"><expr pos:start="183:57" pos:end="183:57"><name pos:start="183:57" pos:end="183:57">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="185:9" pos:end="185:61">/* TODO: RNR interrupt only at first failed frame? */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:34"><expr pos:start="187:9" pos:end="187:33"><call pos:start="187:9" pos:end="187:33"><name pos:start="187:9" pos:end="187:30">eepro100_rnr_interrupt</name><argument_list pos:start="187:31" pos:end="187:33">(<argument pos:start="187:32" pos:end="187:32"><expr pos:start="187:32" pos:end="187:32"><name pos:start="187:32" pos:end="187:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="196:0"><expr pos:start="189:9" pos:end="189:42"><name pos:start="189:9" pos:end="189:40"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:21">statistics</name><operator pos:start="189:22" pos:end="189:22">.</operator><name pos:start="189:23" pos:end="189:40">rx_resource_errors</name></name><operator pos:start="189:41" pos:end="189:42">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="191:1" pos:end="191:5">#<cpp:directive pos:start="191:2" pos:end="191:3">if</cpp:directive> <expr pos:start="191:5" pos:end="191:5"><literal type="number" pos:start="191:5" pos:end="191:5">0</literal></expr></cpp:if>

        assert(!"no resources");

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

        <return pos:start="197:9" pos:end="197:18">return <expr pos:start="197:16" pos:end="197:17"><operator pos:start="197:16" pos:end="197:16">-</operator><literal type="number" pos:start="197:17" pos:end="197:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="201:5" pos:end="201:13">/* !!! */</comment>

    <decl_stmt pos:start="203:5" pos:end="203:21"><decl pos:start="203:5" pos:end="203:20"><type pos:start="203:5" pos:end="203:17"><name pos:start="203:5" pos:end="203:17">eepro100_rx_t</name></type> <name pos:start="203:19" pos:end="203:20">rx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="205:5" pos:end="207:45"><expr pos:start="205:5" pos:end="207:44"><call pos:start="205:5" pos:end="207:44"><name pos:start="205:5" pos:end="205:16">pci_dma_read</name><argument_list pos:start="205:17" pos:end="207:44">(<argument pos:start="205:18" pos:end="205:24"><expr pos:start="205:18" pos:end="205:24"><operator pos:start="205:18" pos:end="205:18">&amp;</operator><name pos:start="205:19" pos:end="205:24"><name pos:start="205:19" pos:end="205:19">s</name><operator pos:start="205:20" pos:end="205:21">-&gt;</operator><name pos:start="205:22" pos:end="205:24">dev</name></name></expr></argument>, <argument pos:start="205:27" pos:end="205:51"><expr pos:start="205:27" pos:end="205:51"><name pos:start="205:27" pos:end="205:36"><name pos:start="205:27" pos:end="205:27">s</name><operator pos:start="205:28" pos:end="205:29">-&gt;</operator><name pos:start="205:30" pos:end="205:36">ru_base</name></name> <operator pos:start="205:38" pos:end="205:38">+</operator> <name pos:start="205:40" pos:end="205:51"><name pos:start="205:40" pos:end="205:40">s</name><operator pos:start="205:41" pos:end="205:42">-&gt;</operator><name pos:start="205:43" pos:end="205:51">ru_offset</name></name></expr></argument>,

                 <argument pos:start="207:18" pos:end="207:20"><expr pos:start="207:18" pos:end="207:20"><operator pos:start="207:18" pos:end="207:18">&amp;</operator><name pos:start="207:19" pos:end="207:20">rx</name></expr></argument>, <argument pos:start="207:23" pos:end="207:43"><expr pos:start="207:23" pos:end="207:43"><sizeof pos:start="207:23" pos:end="207:43">sizeof<argument_list pos:start="207:29" pos:end="207:43">(<argument pos:start="207:30" pos:end="207:42"><expr pos:start="207:30" pos:end="207:42"><name pos:start="207:30" pos:end="207:42">eepro100_rx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="209:5" pos:end="209:51"><decl pos:start="209:5" pos:end="209:50"><type pos:start="209:5" pos:end="209:12"><name pos:start="209:5" pos:end="209:12">uint16_t</name></type> <name pos:start="209:14" pos:end="209:24">rfd_command</name> <init pos:start="209:26" pos:end="209:50">= <expr pos:start="209:28" pos:end="209:50"><call pos:start="209:28" pos:end="209:50"><name pos:start="209:28" pos:end="209:38">le16_to_cpu</name><argument_list pos:start="209:39" pos:end="209:50">(<argument pos:start="209:40" pos:end="209:49"><expr pos:start="209:40" pos:end="209:49"><name pos:start="209:40" pos:end="209:49"><name pos:start="209:40" pos:end="209:41">rx</name><operator pos:start="209:42" pos:end="209:42">.</operator><name pos:start="209:43" pos:end="209:49">command</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="211:5" pos:end="211:45"><decl pos:start="211:5" pos:end="211:44"><type pos:start="211:5" pos:end="211:12"><name pos:start="211:5" pos:end="211:12">uint16_t</name></type> <name pos:start="211:14" pos:end="211:21">rfd_size</name> <init pos:start="211:23" pos:end="211:44">= <expr pos:start="211:25" pos:end="211:44"><call pos:start="211:25" pos:end="211:44"><name pos:start="211:25" pos:end="211:35">le16_to_cpu</name><argument_list pos:start="211:36" pos:end="211:44">(<argument pos:start="211:37" pos:end="211:43"><expr pos:start="211:37" pos:end="211:43"><name pos:start="211:37" pos:end="211:43"><name pos:start="211:37" pos:end="211:38">rx</name><operator pos:start="211:39" pos:end="211:39">.</operator><name pos:start="211:40" pos:end="211:43">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="215:5" pos:end="226:0"><if pos:start="215:5" pos:end="226:0">if <condition pos:start="215:8" pos:end="215:24">(<expr pos:start="215:9" pos:end="215:23"><name pos:start="215:9" pos:end="215:12">size</name> <operator pos:start="215:14" pos:end="215:14">&gt;</operator> <name pos:start="215:16" pos:end="215:23">rfd_size</name></expr>)</condition> <block pos:start="215:26" pos:end="226:0">{<block_content pos:start="217:9" pos:end="221:24">

        <expr_stmt pos:start="217:9" pos:end="219:61"><expr pos:start="217:9" pos:end="219:60"><call pos:start="217:9" pos:end="219:60"><name pos:start="217:9" pos:end="217:14">logout</name><argument_list pos:start="217:15" pos:end="219:60">(<argument pos:start="217:16" pos:end="219:43"><expr pos:start="217:16" pos:end="219:43"><literal type="string" pos:start="217:16" pos:end="217:34">"Receive buffer (%"</literal> <name pos:start="217:36" pos:end="217:41">PRId16</name> <literal type="string" pos:start="217:43" pos:end="217:71">" bytes) too small for data "</literal>

            <literal type="string" pos:start="219:13" pos:end="219:43">"(%zu bytes); data truncated\n"</literal></expr></argument>, <argument pos:start="219:46" pos:end="219:53"><expr pos:start="219:46" pos:end="219:53"><name pos:start="219:46" pos:end="219:53">rfd_size</name></expr></argument>, <argument pos:start="219:56" pos:end="219:59"><expr pos:start="219:56" pos:end="219:59"><name pos:start="219:56" pos:end="219:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:24"><expr pos:start="221:9" pos:end="221:23"><name pos:start="221:9" pos:end="221:12">size</name> <operator pos:start="221:14" pos:end="221:14">=</operator> <name pos:start="221:16" pos:end="221:23">rfd_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="225:1" pos:end="225:40">#<cpp:directive pos:start="225:2" pos:end="225:3">if</cpp:directive> <expr pos:start="225:5" pos:end="225:40"><operator pos:start="225:5" pos:end="225:5">!</operator><call pos:start="225:6" pos:end="225:40"><name pos:start="225:6" pos:end="225:12">defined</name><argument_list pos:start="225:13" pos:end="225:40">(<argument pos:start="225:14" pos:end="225:39"><expr pos:start="225:14" pos:end="225:39"><name pos:start="225:14" pos:end="225:39">CONFIG_PAD_RECEIVED_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="227:5" pos:end="234:0"><if pos:start="227:5" pos:end="234:0">if <condition pos:start="227:8" pos:end="227:18">(<expr pos:start="227:9" pos:end="227:17"><name pos:start="227:9" pos:end="227:12">size</name> <operator pos:start="227:14" pos:end="227:14">&lt;</operator> <literal type="number" pos:start="227:16" pos:end="227:17">64</literal></expr>)</condition> <block pos:start="227:20" pos:end="234:0">{<block_content pos:start="229:9" pos:end="229:29">

        <expr_stmt pos:start="229:9" pos:end="229:29"><expr pos:start="229:9" pos:end="229:28"><name pos:start="229:9" pos:end="229:18">rfd_status</name> <operator pos:start="229:20" pos:end="229:21">|=</operator> <literal type="number" pos:start="229:23" pos:end="229:28">0x0080</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="233:1" pos:end="233:6">#<cpp:directive pos:start="233:2" pos:end="233:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="235:5" pos:end="237:59"><expr pos:start="235:5" pos:end="237:58"><call pos:start="235:5" pos:end="237:58"><name pos:start="235:5" pos:end="235:9">TRACE</name><argument_list pos:start="235:10" pos:end="237:58">(<argument pos:start="235:11" pos:end="235:15"><expr pos:start="235:11" pos:end="235:15"><name pos:start="235:11" pos:end="235:15">OTHER</name></expr></argument>, <argument pos:start="235:18" pos:end="237:57"><expr pos:start="235:18" pos:end="237:57"><call pos:start="235:18" pos:end="237:57"><name pos:start="235:18" pos:end="235:23">logout</name><argument_list pos:start="235:24" pos:end="237:57">(<argument pos:start="235:25" pos:end="235:77"><expr pos:start="235:25" pos:end="235:77"><literal type="string" pos:start="235:25" pos:end="235:77">"command 0x%04x, link 0x%08x, addr 0x%08x, size %u\n"</literal></expr></argument>,

          <argument pos:start="237:11" pos:end="237:21"><expr pos:start="237:11" pos:end="237:21"><name pos:start="237:11" pos:end="237:21">rfd_command</name></expr></argument>, <argument pos:start="237:24" pos:end="237:30"><expr pos:start="237:24" pos:end="237:30"><name pos:start="237:24" pos:end="237:30"><name pos:start="237:24" pos:end="237:25">rx</name><operator pos:start="237:26" pos:end="237:26">.</operator><name pos:start="237:27" pos:end="237:30">link</name></name></expr></argument>, <argument pos:start="237:33" pos:end="237:46"><expr pos:start="237:33" pos:end="237:46"><name pos:start="237:33" pos:end="237:46"><name pos:start="237:33" pos:end="237:34">rx</name><operator pos:start="237:35" pos:end="237:35">.</operator><name pos:start="237:36" pos:end="237:46">rx_buf_addr</name></name></expr></argument>, <argument pos:start="237:49" pos:end="237:56"><expr pos:start="237:49" pos:end="237:56"><name pos:start="237:49" pos:end="237:56">rfd_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="241:61"><expr pos:start="239:5" pos:end="241:60"><call pos:start="239:5" pos:end="241:60"><name pos:start="239:5" pos:end="239:18">stw_le_pci_dma</name><argument_list pos:start="239:19" pos:end="241:60">(<argument pos:start="239:20" pos:end="239:26"><expr pos:start="239:20" pos:end="239:26"><operator pos:start="239:20" pos:end="239:20">&amp;</operator><name pos:start="239:21" pos:end="239:26"><name pos:start="239:21" pos:end="239:21">s</name><operator pos:start="239:22" pos:end="239:23">-&gt;</operator><name pos:start="239:24" pos:end="239:26">dev</name></name></expr></argument>, <argument pos:start="239:29" pos:end="241:47"><expr pos:start="239:29" pos:end="241:47"><name pos:start="239:29" pos:end="239:38"><name pos:start="239:29" pos:end="239:29">s</name><operator pos:start="239:30" pos:end="239:31">-&gt;</operator><name pos:start="239:32" pos:end="239:38">ru_base</name></name> <operator pos:start="239:40" pos:end="239:40">+</operator> <name pos:start="239:42" pos:end="239:53"><name pos:start="239:42" pos:end="239:42">s</name><operator pos:start="239:43" pos:end="239:44">-&gt;</operator><name pos:start="239:45" pos:end="239:53">ru_offset</name></name> <operator pos:start="239:55" pos:end="239:55">+</operator>

                <call pos:start="241:17" pos:end="241:47"><name pos:start="241:17" pos:end="241:24">offsetof</name><argument_list pos:start="241:25" pos:end="241:47">(<argument pos:start="241:26" pos:end="241:38"><expr pos:start="241:26" pos:end="241:38"><name pos:start="241:26" pos:end="241:38">eepro100_rx_t</name></expr></argument>, <argument pos:start="241:41" pos:end="241:46"><expr pos:start="241:41" pos:end="241:46"><name pos:start="241:41" pos:end="241:46">status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="241:50" pos:end="241:59"><expr pos:start="241:50" pos:end="241:59"><name pos:start="241:50" pos:end="241:59">rfd_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="254:0"><expr pos:start="243:5" pos:end="245:53"><call pos:start="243:5" pos:end="245:53"><name pos:start="243:5" pos:end="243:18">stw_le_pci_dma</name><argument_list pos:start="243:19" pos:end="245:53">(<argument pos:start="243:20" pos:end="243:26"><expr pos:start="243:20" pos:end="243:26"><operator pos:start="243:20" pos:end="243:20">&amp;</operator><name pos:start="243:21" pos:end="243:26"><name pos:start="243:21" pos:end="243:21">s</name><operator pos:start="243:22" pos:end="243:23">-&gt;</operator><name pos:start="243:24" pos:end="243:26">dev</name></name></expr></argument>, <argument pos:start="243:29" pos:end="245:46"><expr pos:start="243:29" pos:end="245:46"><name pos:start="243:29" pos:end="243:38"><name pos:start="243:29" pos:end="243:29">s</name><operator pos:start="243:30" pos:end="243:31">-&gt;</operator><name pos:start="243:32" pos:end="243:38">ru_base</name></name> <operator pos:start="243:40" pos:end="243:40">+</operator> <name pos:start="243:42" pos:end="243:53"><name pos:start="243:42" pos:end="243:42">s</name><operator pos:start="243:43" pos:end="243:44">-&gt;</operator><name pos:start="243:45" pos:end="243:53">ru_offset</name></name> <operator pos:start="243:55" pos:end="243:55">+</operator>

                <call pos:start="245:17" pos:end="245:46"><name pos:start="245:17" pos:end="245:24">offsetof</name><argument_list pos:start="245:25" pos:end="245:46">(<argument pos:start="245:26" pos:end="245:38"><expr pos:start="245:26" pos:end="245:38"><name pos:start="245:26" pos:end="245:38">eepro100_rx_t</name></expr></argument>, <argument pos:start="245:41" pos:end="245:45"><expr pos:start="245:41" pos:end="245:45"><name pos:start="245:41" pos:end="245:45">count</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:49" pos:end="245:52"><expr pos:start="245:49" pos:end="245:52"><name pos:start="245:49" pos:end="245:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="247:5" pos:end="247:48">/* Early receive interrupt not supported. */</comment>

<cpp:if pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:3">if</cpp:directive> <expr pos:start="249:5" pos:end="249:5"><literal type="number" pos:start="249:5" pos:end="249:5">0</literal></expr></cpp:if>

    eepro100_er_interrupt(s);

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="255:5" pos:end="255:45">/* Receive CRC Transfer not supported. */</comment>

    <if_stmt pos:start="257:5" pos:end="272:0"><if pos:start="257:5" pos:end="272:0">if <condition pos:start="257:8" pos:end="257:38">(<expr pos:start="257:9" pos:end="257:37"><name pos:start="257:9" pos:end="257:28"><name pos:start="257:9" pos:end="257:9">s</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:24">configuration</name><index pos:start="257:25" pos:end="257:28">[<expr pos:start="257:26" pos:end="257:27"><literal type="number" pos:start="257:26" pos:end="257:27">18</literal></expr>]</index></name> <operator pos:start="257:30" pos:end="257:30">&amp;</operator> <call pos:start="257:32" pos:end="257:37"><name pos:start="257:32" pos:end="257:34">BIT</name><argument_list pos:start="257:35" pos:end="257:37">(<argument pos:start="257:36" pos:end="257:36"><expr pos:start="257:36" pos:end="257:36"><literal type="number" pos:start="257:36" pos:end="257:36">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="257:40" pos:end="272:0">{<block_content pos:start="259:9" pos:end="261:18">

        <expr_stmt pos:start="259:9" pos:end="259:40"><expr pos:start="259:9" pos:end="259:39"><call pos:start="259:9" pos:end="259:39"><name pos:start="259:9" pos:end="259:15">missing</name><argument_list pos:start="259:16" pos:end="259:39">(<argument pos:start="259:17" pos:end="259:38"><expr pos:start="259:17" pos:end="259:38"><literal type="string" pos:start="259:17" pos:end="259:38">"Receive CRC Transfer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="261:9" pos:end="261:18">return <expr pos:start="261:16" pos:end="261:17"><operator pos:start="261:16" pos:end="261:16">-</operator><literal type="number" pos:start="261:17" pos:end="261:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="265:5" pos:end="265:43">/* TODO: check stripping enable bit. */</comment>

<cpp:if pos:start="267:1" pos:end="267:5">#<cpp:directive pos:start="267:2" pos:end="267:3">if</cpp:directive> <expr pos:start="267:5" pos:end="267:5"><literal type="number" pos:start="267:5" pos:end="267:5">0</literal></expr></cpp:if>

    assert(!(s-&gt;configuration[17] &amp; BIT(0)));

<cpp:endif pos:start="271:1" pos:end="271:6">#<cpp:directive pos:start="271:2" pos:end="271:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="273:5" pos:end="275:52"><expr pos:start="273:5" pos:end="275:51"><call pos:start="273:5" pos:end="275:51"><name pos:start="273:5" pos:end="273:17">pci_dma_write</name><argument_list pos:start="273:18" pos:end="275:51">(<argument pos:start="273:19" pos:end="273:25"><expr pos:start="273:19" pos:end="273:25"><operator pos:start="273:19" pos:end="273:19">&amp;</operator><name pos:start="273:20" pos:end="273:25"><name pos:start="273:20" pos:end="273:20">s</name><operator pos:start="273:21" pos:end="273:22">-&gt;</operator><name pos:start="273:23" pos:end="273:25">dev</name></name></expr></argument>, <argument pos:start="273:28" pos:end="275:39"><expr pos:start="273:28" pos:end="275:39"><name pos:start="273:28" pos:end="273:37"><name pos:start="273:28" pos:end="273:28">s</name><operator pos:start="273:29" pos:end="273:30">-&gt;</operator><name pos:start="273:31" pos:end="273:37">ru_base</name></name> <operator pos:start="273:39" pos:end="273:39">+</operator> <name pos:start="273:41" pos:end="273:52"><name pos:start="273:41" pos:end="273:41">s</name><operator pos:start="273:42" pos:end="273:43">-&gt;</operator><name pos:start="273:44" pos:end="273:52">ru_offset</name></name> <operator pos:start="273:54" pos:end="273:54">+</operator>

                  <sizeof pos:start="275:19" pos:end="275:39">sizeof<argument_list pos:start="275:25" pos:end="275:39">(<argument pos:start="275:26" pos:end="275:38"><expr pos:start="275:26" pos:end="275:38"><name pos:start="275:26" pos:end="275:38">eepro100_rx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="275:42" pos:end="275:44"><expr pos:start="275:42" pos:end="275:44"><name pos:start="275:42" pos:end="275:44">buf</name></expr></argument>, <argument pos:start="275:47" pos:end="275:50"><expr pos:start="275:47" pos:end="275:50"><name pos:start="275:47" pos:end="275:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:35"><expr pos:start="277:5" pos:end="277:34"><name pos:start="277:5" pos:end="277:32"><name pos:start="277:5" pos:end="277:5">s</name><operator pos:start="277:6" pos:end="277:7">-&gt;</operator><name pos:start="277:8" pos:end="277:17">statistics</name><operator pos:start="277:18" pos:end="277:18">.</operator><name pos:start="277:19" pos:end="277:32">rx_good_frames</name></name><operator pos:start="277:33" pos:end="277:34">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:29"><expr pos:start="279:5" pos:end="279:28"><call pos:start="279:5" pos:end="279:28"><name pos:start="279:5" pos:end="279:25">eepro100_fr_interrupt</name><argument_list pos:start="279:26" pos:end="279:28">(<argument pos:start="279:27" pos:end="279:27"><expr pos:start="279:27" pos:end="279:27"><name pos:start="279:27" pos:end="279:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:40"><expr pos:start="281:5" pos:end="281:39"><name pos:start="281:5" pos:end="281:16"><name pos:start="281:5" pos:end="281:5">s</name><operator pos:start="281:6" pos:end="281:7">-&gt;</operator><name pos:start="281:8" pos:end="281:16">ru_offset</name></name> <operator pos:start="281:18" pos:end="281:18">=</operator> <call pos:start="281:20" pos:end="281:39"><name pos:start="281:20" pos:end="281:30">le32_to_cpu</name><argument_list pos:start="281:31" pos:end="281:39">(<argument pos:start="281:32" pos:end="281:38"><expr pos:start="281:32" pos:end="281:38"><name pos:start="281:32" pos:end="281:38"><name pos:start="281:32" pos:end="281:33">rx</name><operator pos:start="281:34" pos:end="281:34">.</operator><name pos:start="281:35" pos:end="281:38">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="283:5" pos:end="291:5"><if pos:start="283:5" pos:end="291:5">if <condition pos:start="283:8" pos:end="283:33">(<expr pos:start="283:9" pos:end="283:32"><name pos:start="283:9" pos:end="283:19">rfd_command</name> <operator pos:start="283:21" pos:end="283:21">&amp;</operator> <name pos:start="283:23" pos:end="283:32">COMMAND_EL</name></expr>)</condition> <block pos:start="283:35" pos:end="291:5">{<block_content pos:start="287:9" pos:end="289:38">

        <comment type="block" pos:start="285:9" pos:end="285:56">/* EL bit is set, so this was the last frame. */</comment>

        <expr_stmt pos:start="287:9" pos:end="287:51"><expr pos:start="287:9" pos:end="287:50"><call pos:start="287:9" pos:end="287:50"><name pos:start="287:9" pos:end="287:14">logout</name><argument_list pos:start="287:15" pos:end="287:50">(<argument pos:start="287:16" pos:end="287:49"><expr pos:start="287:16" pos:end="287:49"><literal type="string" pos:start="287:16" pos:end="287:49">"receive: Running out of frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:38"><expr pos:start="289:9" pos:end="289:37"><call pos:start="289:9" pos:end="289:37"><name pos:start="289:9" pos:end="289:20">set_ru_state</name><argument_list pos:start="289:21" pos:end="289:37">(<argument pos:start="289:22" pos:end="289:22"><expr pos:start="289:22" pos:end="289:22"><name pos:start="289:22" pos:end="289:22">s</name></expr></argument>, <argument pos:start="289:25" pos:end="289:36"><expr pos:start="289:25" pos:end="289:36"><name pos:start="289:25" pos:end="289:36">ru_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:32">(<expr pos:start="293:9" pos:end="293:31"><name pos:start="293:9" pos:end="293:19">rfd_command</name> <operator pos:start="293:21" pos:end="293:21">&amp;</operator> <name pos:start="293:23" pos:end="293:31">COMMAND_S</name></expr>)</condition> <block pos:start="293:34" pos:end="299:5">{<block_content pos:start="297:9" pos:end="297:38">

        <comment type="block" pos:start="295:9" pos:end="295:27">/* S bit is set. */</comment>

        <expr_stmt pos:start="297:9" pos:end="297:38"><expr pos:start="297:9" pos:end="297:37"><call pos:start="297:9" pos:end="297:37"><name pos:start="297:9" pos:end="297:20">set_ru_state</name><argument_list pos:start="297:21" pos:end="297:37">(<argument pos:start="297:22" pos:end="297:22"><expr pos:start="297:22" pos:end="297:22"><name pos:start="297:22" pos:end="297:22">s</name></expr></argument>, <argument pos:start="297:25" pos:end="297:36"><expr pos:start="297:25" pos:end="297:36"><name pos:start="297:25" pos:end="297:36">ru_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="301:5" pos:end="301:16">return <expr pos:start="301:12" pos:end="301:15"><name pos:start="301:12" pos:end="301:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
