<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16764.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ac3_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:61">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:67">int</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">data_size</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:41">uint8_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:46">buf</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:60">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="191:1">{<block_content pos:start="7:5" pos:end="189:25">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">AC3DecodeContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:23">s</name> <init pos:start="7:25" pos:end="7:42">= <expr pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:31">avctx</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">int16_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:24">out_samples</name> <init pos:start="9:26" pos:end="9:42">= <expr pos:start="9:28" pos:end="9:42"><operator pos:start="9:28" pos:end="9:28">(</operator><name pos:start="9:29" pos:end="9:35">int16_t</name> <operator pos:start="9:37" pos:end="9:37">*</operator><operator pos:start="9:38" pos:end="9:38">)</operator><name pos:start="9:39" pos:end="9:42">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">blk</name></decl>, <decl pos:start="11:17" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:18">ch</name></decl>, <decl pos:start="11:21" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:21" pos:end="11:23">err</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:73">/* initialize the GetBitContext with the start of valid AC-3 Frame */</comment>

    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:24">(<expr pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:23">input_buffer</name></name></expr>)</condition> <block pos:start="17:26" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:62">

        <comment type="block" pos:start="19:9" pos:end="21:75">/* copy input buffer to decoder context to avoid reading past the end

           of the buffer, which can be caused by a damaged input stream. */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:74"><expr pos:start="23:9" pos:end="23:73"><call pos:start="23:9" pos:end="23:73"><name pos:start="23:9" pos:end="23:14">memcpy</name><argument_list pos:start="23:15" pos:end="23:73">(<argument pos:start="23:16" pos:end="23:30"><expr pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:16">s</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:30">input_buffer</name></name></expr></argument>, <argument pos:start="23:33" pos:end="23:35"><expr pos:start="23:33" pos:end="23:35"><name pos:start="23:33" pos:end="23:35">buf</name></expr></argument>, <argument pos:start="23:38" pos:end="23:72"><expr pos:start="23:38" pos:end="23:72"><call pos:start="23:38" pos:end="23:72"><name pos:start="23:38" pos:end="23:42">FFMIN</name><argument_list pos:start="23:43" pos:end="23:72">(<argument pos:start="23:44" pos:end="23:51"><expr pos:start="23:44" pos:end="23:51"><name pos:start="23:44" pos:end="23:51">buf_size</name></expr></argument>, <argument pos:start="23:54" pos:end="23:71"><expr pos:start="23:54" pos:end="23:71"><name pos:start="23:54" pos:end="23:71">AC3_MAX_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:62"><expr pos:start="25:9" pos:end="25:61"><call pos:start="25:9" pos:end="25:61"><name pos:start="25:9" pos:end="25:21">init_get_bits</name><argument_list pos:start="25:22" pos:end="25:61">(<argument pos:start="25:23" pos:end="25:29"><expr pos:start="25:23" pos:end="25:29"><operator pos:start="25:23" pos:end="25:23">&amp;</operator><name pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:24">s</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:29">gbc</name></name></expr></argument>, <argument pos:start="25:32" pos:end="25:46"><expr pos:start="25:32" pos:end="25:46"><name pos:start="25:32" pos:end="25:46"><name pos:start="25:32" pos:end="25:32">s</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:46">input_buffer</name></name></expr></argument>, <argument pos:start="25:49" pos:end="25:60"><expr pos:start="25:49" pos:end="25:60"><name pos:start="25:49" pos:end="25:56">buf_size</name> <operator pos:start="25:58" pos:end="25:58">*</operator> <literal type="number" pos:start="25:60" pos:end="25:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="31:5">else <block pos:start="27:12" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:50">

        <expr_stmt pos:start="29:9" pos:end="29:50"><expr pos:start="29:9" pos:end="29:49"><call pos:start="29:9" pos:end="29:49"><name pos:start="29:9" pos:end="29:21">init_get_bits</name><argument_list pos:start="29:22" pos:end="29:49">(<argument pos:start="29:23" pos:end="29:29"><expr pos:start="29:23" pos:end="29:29"><operator pos:start="29:23" pos:end="29:23">&amp;</operator><name pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:24">s</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:29">gbc</name></name></expr></argument>, <argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><name pos:start="29:32" pos:end="29:34">buf</name></expr></argument>, <argument pos:start="29:37" pos:end="29:48"><expr pos:start="29:37" pos:end="29:48"><name pos:start="29:37" pos:end="29:44">buf_size</name> <operator pos:start="29:46" pos:end="29:46">*</operator> <literal type="number" pos:start="29:48" pos:end="29:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:28">/* parse the syncinfo */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:7">err</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:29"><name pos:start="37:11" pos:end="37:26">ac3_parse_header</name><argument_list pos:start="37:27" pos:end="37:29">(<argument pos:start="37:28" pos:end="37:28"><expr pos:start="37:28" pos:end="37:28"><name pos:start="37:28" pos:end="37:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="81:5"><if pos:start="39:5" pos:end="81:5">if<condition pos:start="39:7" pos:end="39:11">(<expr pos:start="39:8" pos:end="39:10"><name pos:start="39:8" pos:end="39:10">err</name></expr>)</condition> <block pos:start="39:13" pos:end="81:5">{<block_content pos:start="41:9" pos:end="79:9">

        <switch pos:start="41:9" pos:end="79:9">switch<condition pos:start="41:15" pos:end="41:19">(<expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">err</name></expr>)</condition> <block pos:start="41:21" pos:end="79:9">{<block_content pos:start="43:13" pos:end="77:22">

            <case pos:start="43:13" pos:end="43:38">case <expr pos:start="43:18" pos:end="43:37"><name pos:start="43:18" pos:end="43:37">AC3_PARSE_ERROR_SYNC</name></expr>:</case>

                <expr_stmt pos:start="45:17" pos:end="45:97"><expr pos:start="45:17" pos:end="45:96"><call pos:start="45:17" pos:end="45:96"><name pos:start="45:17" pos:end="45:22">av_log</name><argument_list pos:start="45:23" pos:end="45:96">(<argument pos:start="45:24" pos:end="45:28"><expr pos:start="45:24" pos:end="45:28"><name pos:start="45:24" pos:end="45:28">avctx</name></expr></argument>, <argument pos:start="45:31" pos:end="45:42"><expr pos:start="45:31" pos:end="45:42"><name pos:start="45:31" pos:end="45:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:45" pos:end="45:95"><expr pos:start="45:45" pos:end="45:95"><literal type="string" pos:start="45:45" pos:end="45:95">"frame sync error : cannot use error concealment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="47:17" pos:end="47:26">return <expr pos:start="47:24" pos:end="47:25"><operator pos:start="47:24" pos:end="47:24">-</operator><literal type="number" pos:start="47:25" pos:end="47:25">1</literal></expr>;</return>

            <case pos:start="49:13" pos:end="49:38">case <expr pos:start="49:18" pos:end="49:37"><name pos:start="49:18" pos:end="49:37">AC3_PARSE_ERROR_BSID</name></expr>:</case>

                <expr_stmt pos:start="51:17" pos:end="51:70"><expr pos:start="51:17" pos:end="51:69"><call pos:start="51:17" pos:end="51:69"><name pos:start="51:17" pos:end="51:22">av_log</name><argument_list pos:start="51:23" pos:end="51:69">(<argument pos:start="51:24" pos:end="51:28"><expr pos:start="51:24" pos:end="51:28"><name pos:start="51:24" pos:end="51:28">avctx</name></expr></argument>, <argument pos:start="51:31" pos:end="51:42"><expr pos:start="51:31" pos:end="51:42"><name pos:start="51:31" pos:end="51:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:45" pos:end="51:68"><expr pos:start="51:45" pos:end="51:68"><literal type="string" pos:start="51:45" pos:end="51:68">"invalid bitstream id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="53:17" pos:end="53:22">break;</break>

            <case pos:start="55:13" pos:end="55:45">case <expr pos:start="55:18" pos:end="55:44"><name pos:start="55:18" pos:end="55:44">AC3_PARSE_ERROR_SAMPLE_RATE</name></expr>:</case>

                <expr_stmt pos:start="57:17" pos:end="57:69"><expr pos:start="57:17" pos:end="57:68"><call pos:start="57:17" pos:end="57:68"><name pos:start="57:17" pos:end="57:22">av_log</name><argument_list pos:start="57:23" pos:end="57:68">(<argument pos:start="57:24" pos:end="57:28"><expr pos:start="57:24" pos:end="57:28"><name pos:start="57:24" pos:end="57:28">avctx</name></expr></argument>, <argument pos:start="57:31" pos:end="57:42"><expr pos:start="57:31" pos:end="57:42"><name pos:start="57:31" pos:end="57:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:45" pos:end="57:67"><expr pos:start="57:45" pos:end="57:67"><literal type="string" pos:start="57:45" pos:end="57:67">"invalid sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            <case pos:start="61:13" pos:end="61:44">case <expr pos:start="61:18" pos:end="61:43"><name pos:start="61:18" pos:end="61:43">AC3_PARSE_ERROR_FRAME_SIZE</name></expr>:</case>

                <expr_stmt pos:start="63:17" pos:end="63:68"><expr pos:start="63:17" pos:end="63:67"><call pos:start="63:17" pos:end="63:67"><name pos:start="63:17" pos:end="63:22">av_log</name><argument_list pos:start="63:23" pos:end="63:67">(<argument pos:start="63:24" pos:end="63:28"><expr pos:start="63:24" pos:end="63:28"><name pos:start="63:24" pos:end="63:28">avctx</name></expr></argument>, <argument pos:start="63:31" pos:end="63:42"><expr pos:start="63:31" pos:end="63:42"><name pos:start="63:31" pos:end="63:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:45" pos:end="63:66"><expr pos:start="63:45" pos:end="63:66"><literal type="string" pos:start="63:45" pos:end="63:66">"invalid frame size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="65:17" pos:end="65:22">break;</break>

            <case pos:start="67:13" pos:end="67:44">case <expr pos:start="67:18" pos:end="67:43"><name pos:start="67:18" pos:end="67:43">AC3_PARSE_ERROR_FRAME_TYPE</name></expr>:</case>

                <expr_stmt pos:start="69:17" pos:end="69:68"><expr pos:start="69:17" pos:end="69:67"><call pos:start="69:17" pos:end="69:67"><name pos:start="69:17" pos:end="69:22">av_log</name><argument_list pos:start="69:23" pos:end="69:67">(<argument pos:start="69:24" pos:end="69:28"><expr pos:start="69:24" pos:end="69:28"><name pos:start="69:24" pos:end="69:28">avctx</name></expr></argument>, <argument pos:start="69:31" pos:end="69:42"><expr pos:start="69:31" pos:end="69:42"><name pos:start="69:31" pos:end="69:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:45" pos:end="69:66"><expr pos:start="69:45" pos:end="69:66"><literal type="string" pos:start="69:45" pos:end="69:66">"invalid frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="71:17" pos:end="71:22">break;</break>

            <default pos:start="73:13" pos:end="73:20">default:</default>

                <expr_stmt pos:start="75:17" pos:end="75:64"><expr pos:start="75:17" pos:end="75:63"><call pos:start="75:17" pos:end="75:63"><name pos:start="75:17" pos:end="75:22">av_log</name><argument_list pos:start="75:23" pos:end="75:63">(<argument pos:start="75:24" pos:end="75:28"><expr pos:start="75:24" pos:end="75:28"><name pos:start="75:24" pos:end="75:28">avctx</name></expr></argument>, <argument pos:start="75:31" pos:end="75:42"><expr pos:start="75:31" pos:end="75:42"><name pos:start="75:31" pos:end="75:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:45" pos:end="75:62"><expr pos:start="75:45" pos:end="75:62"><literal type="string" pos:start="75:45" pos:end="75:62">"invalid header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="77:17" pos:end="77:22">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:61">/* check that reported frame size fits in input buffer */</comment>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if<condition pos:start="87:7" pos:end="87:32">(<expr pos:start="87:8" pos:end="87:31"><name pos:start="87:8" pos:end="87:20"><name pos:start="87:8" pos:end="87:8">s</name><operator pos:start="87:9" pos:end="87:10">-&gt;</operator><name pos:start="87:11" pos:end="87:20">frame_size</name></name> <operator pos:start="87:22" pos:end="87:22">&gt;</operator> <name pos:start="87:24" pos:end="87:31">buf_size</name></expr>)</condition> <block pos:start="87:34" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:18">

        <expr_stmt pos:start="89:9" pos:end="89:58"><expr pos:start="89:9" pos:end="89:57"><call pos:start="89:9" pos:end="89:57"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="89:57">(<argument pos:start="89:16" pos:end="89:20"><expr pos:start="89:16" pos:end="89:20"><name pos:start="89:16" pos:end="89:20">avctx</name></expr></argument>, <argument pos:start="89:23" pos:end="89:34"><expr pos:start="89:23" pos:end="89:34"><name pos:start="89:23" pos:end="89:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:37" pos:end="89:56"><expr pos:start="89:37" pos:end="89:56"><literal type="string" pos:start="89:37" pos:end="89:56">"incomplete frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:18">return <expr pos:start="91:16" pos:end="91:17"><operator pos:start="91:16" pos:end="91:16">-</operator><literal type="number" pos:start="91:17" pos:end="91:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:32">/* check for crc mismatch */</comment>

    <if_stmt pos:start="99:5" pos:end="109:5"><if pos:start="99:5" pos:end="109:5">if<condition pos:start="99:7" pos:end="99:56">(<expr pos:start="99:8" pos:end="99:55"><operator pos:start="99:8" pos:end="99:8">!</operator><name pos:start="99:9" pos:end="99:11">err</name> <operator pos:start="99:13" pos:end="99:14">&amp;&amp;</operator> <name pos:start="99:16" pos:end="99:38"><name pos:start="99:16" pos:end="99:20">avctx</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:38">error_resilience</name></name> <operator pos:start="99:40" pos:end="99:41">&gt;=</operator> <name pos:start="99:43" pos:end="99:55">FF_ER_CAREFUL</name></expr>)</condition> <block pos:start="99:58" pos:end="109:5">{<block_content pos:start="101:9" pos:end="107:9">

        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if<condition pos:start="101:11" pos:end="101:81">(<expr pos:start="101:12" pos:end="101:80"><call pos:start="101:12" pos:end="101:80"><name pos:start="101:12" pos:end="101:17">av_crc</name><argument_list pos:start="101:18" pos:end="101:80">(<argument pos:start="101:19" pos:end="101:50"><expr pos:start="101:19" pos:end="101:50"><call pos:start="101:19" pos:end="101:50"><name pos:start="101:19" pos:end="101:34">av_crc_get_table</name><argument_list pos:start="101:35" pos:end="101:50">(<argument pos:start="101:36" pos:end="101:49"><expr pos:start="101:36" pos:end="101:49"><name pos:start="101:36" pos:end="101:49">AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="101:53" pos:end="101:53"><expr pos:start="101:53" pos:end="101:53"><literal type="number" pos:start="101:53" pos:end="101:53">0</literal></expr></argument>, <argument pos:start="101:56" pos:end="101:62"><expr pos:start="101:56" pos:end="101:62"><operator pos:start="101:56" pos:end="101:56">&amp;</operator><name pos:start="101:57" pos:end="101:62"><name pos:start="101:57" pos:end="101:59">buf</name><index pos:start="101:60" pos:end="101:62">[<expr pos:start="101:61" pos:end="101:61"><literal type="number" pos:start="101:61" pos:end="101:61">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="101:65" pos:end="101:79"><expr pos:start="101:65" pos:end="101:79"><name pos:start="101:65" pos:end="101:77"><name pos:start="101:65" pos:end="101:65">s</name><operator pos:start="101:66" pos:end="101:67">-&gt;</operator><name pos:start="101:68" pos:end="101:77">frame_size</name></name><operator pos:start="101:78" pos:end="101:78">-</operator><literal type="number" pos:start="101:79" pos:end="101:79">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:83" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:20">

            <expr_stmt pos:start="103:13" pos:end="103:64"><expr pos:start="103:13" pos:end="103:63"><call pos:start="103:13" pos:end="103:63"><name pos:start="103:13" pos:end="103:18">av_log</name><argument_list pos:start="103:19" pos:end="103:63">(<argument pos:start="103:20" pos:end="103:24"><expr pos:start="103:20" pos:end="103:24"><name pos:start="103:20" pos:end="103:24">avctx</name></expr></argument>, <argument pos:start="103:27" pos:end="103:38"><expr pos:start="103:27" pos:end="103:38"><name pos:start="103:27" pos:end="103:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:41" pos:end="103:62"><expr pos:start="103:41" pos:end="103:62"><literal type="string" pos:start="103:41" pos:end="103:62">"frame CRC mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:20"><expr pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:15">err</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <literal type="number" pos:start="105:19" pos:end="105:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:46">/* if frame is ok, set audio parameters */</comment>

    <if_stmt pos:start="115:5" pos:end="165:5"><if pos:start="115:5" pos:end="157:5">if <condition pos:start="115:8" pos:end="115:13">(<expr pos:start="115:9" pos:end="115:12"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:12">err</name></expr>)</condition> <block pos:start="115:15" pos:end="157:5">{<block_content pos:start="117:9" pos:end="155:9">

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:13">avctx</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:26">sample_rate</name></name> <operator pos:start="117:28" pos:end="117:28">=</operator> <name pos:start="117:30" pos:end="117:43"><name pos:start="117:30" pos:end="117:30">s</name><operator pos:start="117:31" pos:end="117:32">-&gt;</operator><name pos:start="117:33" pos:end="117:43">sample_rate</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:38"><expr pos:start="119:9" pos:end="119:37"><name pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:13">avctx</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:23">bit_rate</name></name> <operator pos:start="119:25" pos:end="119:25">=</operator> <name pos:start="119:27" pos:end="119:37"><name pos:start="119:27" pos:end="119:27">s</name><operator pos:start="119:28" pos:end="119:29">-&gt;</operator><name pos:start="119:30" pos:end="119:37">bit_rate</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="123:9" pos:end="123:28">/* channel config */</comment>

        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:23"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:23">out_channels</name></name> <operator pos:start="125:25" pos:end="125:25">=</operator> <name pos:start="125:27" pos:end="125:37"><name pos:start="125:27" pos:end="125:27">s</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:37">channels</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:41"><expr pos:start="127:9" pos:end="127:40"><name pos:start="127:9" pos:end="127:22"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:22">output_mode</name></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <name pos:start="127:26" pos:end="127:40"><name pos:start="127:26" pos:end="127:26">s</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:40">channel_mode</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="131:47"><if pos:start="129:9" pos:end="131:47">if<condition pos:start="129:11" pos:end="129:21">(<expr pos:start="129:12" pos:end="129:20"><name pos:start="129:12" pos:end="129:20"><name pos:start="129:12" pos:end="129:12">s</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:20">lfe_on</name></name></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:47"><block_content pos:start="131:13" pos:end="131:47">

            <expr_stmt pos:start="131:13" pos:end="131:47"><expr pos:start="131:13" pos:end="131:46"><name pos:start="131:13" pos:end="131:26"><name pos:start="131:13" pos:end="131:13">s</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:26">output_mode</name></name> <operator pos:start="131:28" pos:end="131:29">|=</operator> <name pos:start="131:31" pos:end="131:46">AC3_OUTPUT_LFEON</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="133:9" pos:end="141:9"><if pos:start="133:9" pos:end="141:9">if <condition pos:start="133:12" pos:end="135:54">(<expr pos:start="133:13" pos:end="135:53"><name pos:start="133:13" pos:end="133:35"><name pos:start="133:13" pos:end="133:17">avctx</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:35">request_channels</name></name> <operator pos:start="133:37" pos:end="133:37">&gt;</operator> <literal type="number" pos:start="133:39" pos:end="133:39">0</literal> <operator pos:start="133:41" pos:end="133:42">&amp;&amp;</operator> <name pos:start="133:44" pos:end="133:66"><name pos:start="133:44" pos:end="133:48">avctx</name><operator pos:start="133:49" pos:end="133:50">-&gt;</operator><name pos:start="133:51" pos:end="133:66">request_channels</name></name> <operator pos:start="133:68" pos:end="133:69">&lt;=</operator> <literal type="number" pos:start="133:71" pos:end="133:71">2</literal> <operator pos:start="133:73" pos:end="133:74">&amp;&amp;</operator>

                <name pos:start="135:17" pos:end="135:39"><name pos:start="135:17" pos:end="135:21">avctx</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:39">request_channels</name></name> <operator pos:start="135:41" pos:end="135:41">&lt;</operator> <name pos:start="135:43" pos:end="135:53"><name pos:start="135:43" pos:end="135:43">s</name><operator pos:start="135:44" pos:end="135:45">-&gt;</operator><name pos:start="135:46" pos:end="135:53">channels</name></name></expr>)</condition> <block pos:start="135:56" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:97">

            <expr_stmt pos:start="137:13" pos:end="137:54"><expr pos:start="137:13" pos:end="137:53"><name pos:start="137:13" pos:end="137:27"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:27">out_channels</name></name> <operator pos:start="137:29" pos:end="137:29">=</operator> <name pos:start="137:31" pos:end="137:53"><name pos:start="137:31" pos:end="137:35">avctx</name><operator pos:start="137:36" pos:end="137:37">-&gt;</operator><name pos:start="137:38" pos:end="137:53">request_channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:97"><expr pos:start="139:13" pos:end="139:96"><name pos:start="139:13" pos:end="139:26"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:26">output_mode</name></name>  <operator pos:start="139:29" pos:end="139:29">=</operator> <ternary pos:start="139:31" pos:end="139:96"><condition pos:start="139:31" pos:end="139:60"><expr pos:start="139:31" pos:end="139:58"><name pos:start="139:31" pos:end="139:53"><name pos:start="139:31" pos:end="139:35">avctx</name><operator pos:start="139:36" pos:end="139:37">-&gt;</operator><name pos:start="139:38" pos:end="139:53">request_channels</name></name> <operator pos:start="139:55" pos:end="139:56">==</operator> <literal type="number" pos:start="139:58" pos:end="139:58">1</literal></expr> ?</condition><then pos:start="139:62" pos:end="139:76"> <expr pos:start="139:62" pos:end="139:76"><name pos:start="139:62" pos:end="139:76">AC3_CHMODE_MONO</name></expr> </then><else pos:start="139:78" pos:end="139:96">: <expr pos:start="139:80" pos:end="139:96"><name pos:start="139:80" pos:end="139:96">AC3_CHMODE_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:42"><expr pos:start="143:9" pos:end="143:41"><name pos:start="143:9" pos:end="143:23"><name pos:start="143:9" pos:end="143:13">avctx</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:23">channels</name></name> <operator pos:start="143:25" pos:end="143:25">=</operator> <name pos:start="143:27" pos:end="143:41"><name pos:start="143:27" pos:end="143:27">s</name><operator pos:start="143:28" pos:end="143:29">-&gt;</operator><name pos:start="143:30" pos:end="143:41">out_channels</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="147:9" pos:end="147:51">/* set downmixing coefficients if needed */</comment>

        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if<condition pos:start="149:11" pos:end="151:52">(<expr pos:start="149:12" pos:end="151:51"><name pos:start="149:12" pos:end="149:22"><name pos:start="149:12" pos:end="149:12">s</name><operator pos:start="149:13" pos:end="149:14">-&gt;</operator><name pos:start="149:15" pos:end="149:22">channels</name></name> <operator pos:start="149:24" pos:end="149:25">!=</operator> <name pos:start="149:27" pos:end="149:41"><name pos:start="149:27" pos:end="149:27">s</name><operator pos:start="149:28" pos:end="149:29">-&gt;</operator><name pos:start="149:30" pos:end="149:41">out_channels</name></name> <operator pos:start="149:43" pos:end="149:44">&amp;&amp;</operator> <operator pos:start="149:46" pos:end="149:46">!</operator><operator pos:start="149:47" pos:end="149:47">(</operator><operator pos:start="149:48" pos:end="149:48">(</operator><name pos:start="149:49" pos:end="149:62"><name pos:start="149:49" pos:end="149:49">s</name><operator pos:start="149:50" pos:end="149:51">-&gt;</operator><name pos:start="149:52" pos:end="149:62">output_mode</name></name> <operator pos:start="149:64" pos:end="149:64">&amp;</operator> <name pos:start="149:66" pos:end="149:81">AC3_OUTPUT_LFEON</name><operator pos:start="149:82" pos:end="149:82">)</operator> <operator pos:start="149:84" pos:end="149:85">&amp;&amp;</operator>

                <name pos:start="151:17" pos:end="151:31"><name pos:start="151:17" pos:end="151:17">s</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:31">fbw_channels</name></name> <operator pos:start="151:33" pos:end="151:34">==</operator> <name pos:start="151:36" pos:end="151:50"><name pos:start="151:36" pos:end="151:36">s</name><operator pos:start="151:37" pos:end="151:38">-&gt;</operator><name pos:start="151:39" pos:end="151:50">out_channels</name></name><operator pos:start="151:51" pos:end="151:51">)</operator></expr>)</condition> <block pos:start="151:54" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:34">

            <expr_stmt pos:start="153:13" pos:end="153:34"><expr pos:start="153:13" pos:end="153:33"><call pos:start="153:13" pos:end="153:33"><name pos:start="153:13" pos:end="153:30">set_downmix_coeffs</name><argument_list pos:start="153:31" pos:end="153:33">(<argument pos:start="153:32" pos:end="153:32"><expr pos:start="153:32" pos:end="153:32"><name pos:start="153:32" pos:end="153:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="157:7" pos:end="165:5">else if <condition pos:start="157:15" pos:end="157:32">(<expr pos:start="157:16" pos:end="157:31"><operator pos:start="157:16" pos:end="157:16">!</operator><name pos:start="157:17" pos:end="157:31"><name pos:start="157:17" pos:end="157:17">s</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:31">out_channels</name></name></expr>)</condition> <block pos:start="157:34" pos:end="165:5">{<block_content pos:start="159:9" pos:end="163:89">

        <expr_stmt pos:start="159:9" pos:end="159:42"><expr pos:start="159:9" pos:end="159:41"><name pos:start="159:9" pos:end="159:23"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:23">out_channels</name></name> <operator pos:start="159:25" pos:end="159:25">=</operator> <name pos:start="159:27" pos:end="159:41"><name pos:start="159:27" pos:end="159:31">avctx</name><operator pos:start="159:32" pos:end="159:33">-&gt;</operator><name pos:start="159:34" pos:end="159:41">channels</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="163:89"><if pos:start="161:9" pos:end="163:89">if<condition pos:start="161:11" pos:end="161:41">(<expr pos:start="161:12" pos:end="161:40"><name pos:start="161:12" pos:end="161:26"><name pos:start="161:12" pos:end="161:12">s</name><operator pos:start="161:13" pos:end="161:14">-&gt;</operator><name pos:start="161:15" pos:end="161:26">out_channels</name></name> <operator pos:start="161:28" pos:end="161:28">&lt;</operator> <name pos:start="161:30" pos:end="161:40"><name pos:start="161:30" pos:end="161:30">s</name><operator pos:start="161:31" pos:end="161:32">-&gt;</operator><name pos:start="161:33" pos:end="161:40">channels</name></name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:89"><block_content pos:start="163:13" pos:end="163:89">

            <expr_stmt pos:start="163:13" pos:end="163:89"><expr pos:start="163:13" pos:end="163:88"><name pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:26">output_mode</name></name>  <operator pos:start="163:29" pos:end="163:29">=</operator> <ternary pos:start="163:31" pos:end="163:88"><condition pos:start="163:31" pos:end="163:52"><expr pos:start="163:31" pos:end="163:50"><name pos:start="163:31" pos:end="163:45"><name pos:start="163:31" pos:end="163:31">s</name><operator pos:start="163:32" pos:end="163:33">-&gt;</operator><name pos:start="163:34" pos:end="163:45">out_channels</name></name> <operator pos:start="163:47" pos:end="163:48">==</operator> <literal type="number" pos:start="163:50" pos:end="163:50">1</literal></expr> ?</condition><then pos:start="163:54" pos:end="163:68"> <expr pos:start="163:54" pos:end="163:68"><name pos:start="163:54" pos:end="163:68">AC3_CHMODE_MONO</name></expr> </then><else pos:start="163:70" pos:end="163:88">: <expr pos:start="163:72" pos:end="163:88"><name pos:start="163:72" pos:end="163:88">AC3_CHMODE_STEREO</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:32">/* parse the audio blocks */</comment>

    <for pos:start="171:5" pos:end="185:5">for <control pos:start="171:9" pos:end="171:41">(<init pos:start="171:10" pos:end="171:17"><expr pos:start="171:10" pos:end="171:16"><name pos:start="171:10" pos:end="171:12">blk</name> <operator pos:start="171:14" pos:end="171:14">=</operator> <literal type="number" pos:start="171:16" pos:end="171:16">0</literal></expr>;</init> <condition pos:start="171:19" pos:end="171:34"><expr pos:start="171:19" pos:end="171:33"><name pos:start="171:19" pos:end="171:21">blk</name> <operator pos:start="171:23" pos:end="171:23">&lt;</operator> <name pos:start="171:25" pos:end="171:33">NB_BLOCKS</name></expr>;</condition> <incr pos:start="171:36" pos:end="171:40"><expr pos:start="171:36" pos:end="171:40"><name pos:start="171:36" pos:end="171:38">blk</name><operator pos:start="171:39" pos:end="171:40">++</operator></expr></incr>)</control> <block pos:start="171:43" pos:end="185:5">{<block_content pos:start="173:9" pos:end="183:56">

        <if_stmt pos:start="173:9" pos:end="177:9"><if pos:start="173:9" pos:end="177:9">if <condition pos:start="173:12" pos:end="173:50">(<expr pos:start="173:13" pos:end="173:49"><operator pos:start="173:13" pos:end="173:13">!</operator><name pos:start="173:14" pos:end="173:16">err</name> <operator pos:start="173:18" pos:end="173:19">&amp;&amp;</operator> <call pos:start="173:21" pos:end="173:49"><name pos:start="173:21" pos:end="173:41">ac3_parse_audio_block</name><argument_list pos:start="173:42" pos:end="173:49">(<argument pos:start="173:43" pos:end="173:43"><expr pos:start="173:43" pos:end="173:43"><name pos:start="173:43" pos:end="173:43">s</name></expr></argument>, <argument pos:start="173:46" pos:end="173:48"><expr pos:start="173:46" pos:end="173:48"><name pos:start="173:46" pos:end="173:48">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="173:52" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:75">

            <expr_stmt pos:start="175:13" pos:end="175:75"><expr pos:start="175:13" pos:end="175:74"><call pos:start="175:13" pos:end="175:74"><name pos:start="175:13" pos:end="175:18">av_log</name><argument_list pos:start="175:19" pos:end="175:74">(<argument pos:start="175:20" pos:end="175:24"><expr pos:start="175:20" pos:end="175:24"><name pos:start="175:20" pos:end="175:24">avctx</name></expr></argument>, <argument pos:start="175:27" pos:end="175:38"><expr pos:start="175:27" pos:end="175:38"><name pos:start="175:27" pos:end="175:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:41" pos:end="175:73"><expr pos:start="175:41" pos:end="175:73"><literal type="string" pos:start="175:41" pos:end="175:73">"error parsing the audio block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="179:9" pos:end="183:56">for <control pos:start="179:13" pos:end="179:33">(<init pos:start="179:14" pos:end="179:19"><expr pos:start="179:14" pos:end="179:18"><name pos:start="179:14" pos:end="179:14">i</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <literal type="number" pos:start="179:18" pos:end="179:18">0</literal></expr>;</init> <condition pos:start="179:21" pos:end="179:28"><expr pos:start="179:21" pos:end="179:27"><name pos:start="179:21" pos:end="179:21">i</name> <operator pos:start="179:23" pos:end="179:23">&lt;</operator> <literal type="number" pos:start="179:25" pos:end="179:27">256</literal></expr>;</condition> <incr pos:start="179:30" pos:end="179:32"><expr pos:start="179:30" pos:end="179:32"><name pos:start="179:30" pos:end="179:30">i</name><operator pos:start="179:31" pos:end="179:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="181:13" pos:end="183:56"><block_content pos:start="181:13" pos:end="183:56">

            <for pos:start="181:13" pos:end="183:56">for <control pos:start="181:17" pos:end="181:52">(<init pos:start="181:18" pos:end="181:24"><expr pos:start="181:18" pos:end="181:23"><name pos:start="181:18" pos:end="181:19">ch</name> <operator pos:start="181:21" pos:end="181:21">=</operator> <literal type="number" pos:start="181:23" pos:end="181:23">0</literal></expr>;</init> <condition pos:start="181:26" pos:end="181:46"><expr pos:start="181:26" pos:end="181:45"><name pos:start="181:26" pos:end="181:27">ch</name> <operator pos:start="181:29" pos:end="181:29">&lt;</operator> <name pos:start="181:31" pos:end="181:45"><name pos:start="181:31" pos:end="181:31">s</name><operator pos:start="181:32" pos:end="181:33">-&gt;</operator><name pos:start="181:34" pos:end="181:45">out_channels</name></name></expr>;</condition> <incr pos:start="181:48" pos:end="181:51"><expr pos:start="181:48" pos:end="181:51"><name pos:start="181:48" pos:end="181:49">ch</name><operator pos:start="181:50" pos:end="181:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="183:17" pos:end="183:56"><block_content pos:start="183:17" pos:end="183:56">

                <expr_stmt pos:start="183:17" pos:end="183:56"><expr pos:start="183:17" pos:end="183:55"><operator pos:start="183:17" pos:end="183:17">*</operator><operator pos:start="183:18" pos:end="183:18">(</operator><name pos:start="183:19" pos:end="183:29">out_samples</name><operator pos:start="183:30" pos:end="183:31">++</operator><operator pos:start="183:32" pos:end="183:32">)</operator> <operator pos:start="183:34" pos:end="183:34">=</operator> <name pos:start="183:36" pos:end="183:55"><name pos:start="183:36" pos:end="183:36">s</name><operator pos:start="183:37" pos:end="183:38">-&gt;</operator><name pos:start="183:39" pos:end="183:48">int_output</name><index pos:start="183:49" pos:end="183:52">[<expr pos:start="183:50" pos:end="183:51"><name pos:start="183:50" pos:end="183:51">ch</name></expr>]</index><index pos:start="183:53" pos:end="183:55">[<expr pos:start="183:54" pos:end="183:54"><name pos:start="183:54" pos:end="183:54">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

    </block_content>}</block></for>

    <expr_stmt pos:start="187:5" pos:end="187:70"><expr pos:start="187:5" pos:end="187:69"><operator pos:start="187:5" pos:end="187:5">*</operator><name pos:start="187:6" pos:end="187:14">data_size</name> <operator pos:start="187:16" pos:end="187:16">=</operator> <name pos:start="187:18" pos:end="187:26">NB_BLOCKS</name> <operator pos:start="187:28" pos:end="187:28">*</operator> <literal type="number" pos:start="187:30" pos:end="187:32">256</literal> <operator pos:start="187:34" pos:end="187:34">*</operator> <name pos:start="187:36" pos:end="187:50"><name pos:start="187:36" pos:end="187:40">avctx</name><operator pos:start="187:41" pos:end="187:42">-&gt;</operator><name pos:start="187:43" pos:end="187:50">channels</name></name> <operator pos:start="187:52" pos:end="187:52">*</operator> <sizeof pos:start="187:54" pos:end="187:69">sizeof <argument_list pos:start="187:61" pos:end="187:69">(<argument pos:start="187:62" pos:end="187:68"><expr pos:start="187:62" pos:end="187:68"><name pos:start="187:62" pos:end="187:68">int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <return pos:start="189:5" pos:end="189:25">return <expr pos:start="189:12" pos:end="189:24"><name pos:start="189:12" pos:end="189:24"><name pos:start="189:12" pos:end="189:12">s</name><operator pos:start="189:13" pos:end="189:14">-&gt;</operator><name pos:start="189:15" pos:end="189:24">frame_size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
