<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11835.c" pos:tabs="8"><function pos:start="1:1" pos:end="21:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">entropy_decode</name><parameter_list pos:start="1:27" pos:end="1:75">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:37">APEContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:62">blockstodecode</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:74"><decl pos:start="1:65" pos:end="1:74"><type pos:start="1:65" pos:end="1:74"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:74">stereo</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="21:1">{<block_content pos:start="5:5" pos:end="19:5">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">int32_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:21">decoded0</name> <init pos:start="5:23" pos:end="5:39">= <expr pos:start="5:25" pos:end="5:39"><name pos:start="5:25" pos:end="5:39"><name pos:start="5:25" pos:end="5:27">ctx</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:36">decoded</name><index pos:start="5:37" pos:end="5:39">[<expr pos:start="5:38" pos:end="5:38"><literal type="number" pos:start="5:38" pos:end="5:38">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">int32_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">decoded1</name> <init pos:start="7:23" pos:end="7:39">= <expr pos:start="7:25" pos:end="7:39"><name pos:start="7:25" pos:end="7:39"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:36">decoded</name><index pos:start="7:37" pos:end="7:39">[<expr pos:start="7:38" pos:end="7:38"><literal type="number" pos:start="7:38" pos:end="7:38">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <while pos:start="11:5" pos:end="19:5">while <condition pos:start="11:11" pos:end="11:28">(<expr pos:start="11:12" pos:end="11:27"><name pos:start="11:12" pos:end="11:25">blockstodecode</name><operator pos:start="11:26" pos:end="11:27">--</operator></expr>)</condition> <block pos:start="11:30" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:61">

        <expr_stmt pos:start="13:9" pos:end="13:57"><expr pos:start="13:9" pos:end="13:56"><operator pos:start="13:9" pos:end="13:9">*</operator><name pos:start="13:10" pos:end="13:17">decoded0</name><operator pos:start="13:18" pos:end="13:19">++</operator> <operator pos:start="13:21" pos:end="13:21">=</operator> <call pos:start="13:23" pos:end="13:56"><name pos:start="13:23" pos:end="13:38">ape_decode_value</name><argument_list pos:start="13:39" pos:end="13:56">(<argument pos:start="13:40" pos:end="13:42"><expr pos:start="13:40" pos:end="13:42"><name pos:start="13:40" pos:end="13:42">ctx</name></expr></argument>, <argument pos:start="13:45" pos:end="13:55"><expr pos:start="13:45" pos:end="13:55"><operator pos:start="13:45" pos:end="13:45">&amp;</operator><name pos:start="13:46" pos:end="13:55"><name pos:start="13:46" pos:end="13:48">ctx</name><operator pos:start="13:49" pos:end="13:50">-&gt;</operator><name pos:start="13:51" pos:end="13:55">riceY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="15:9" pos:end="17:61"><if pos:start="15:9" pos:end="17:61">if <condition pos:start="15:12" pos:end="15:19">(<expr pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:18">stereo</name></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:61"><block_content pos:start="17:13" pos:end="17:61">

            <expr_stmt pos:start="17:13" pos:end="17:61"><expr pos:start="17:13" pos:end="17:60"><operator pos:start="17:13" pos:end="17:13">*</operator><name pos:start="17:14" pos:end="17:21">decoded1</name><operator pos:start="17:22" pos:end="17:23">++</operator> <operator pos:start="17:25" pos:end="17:25">=</operator> <call pos:start="17:27" pos:end="17:60"><name pos:start="17:27" pos:end="17:42">ape_decode_value</name><argument_list pos:start="17:43" pos:end="17:60">(<argument pos:start="17:44" pos:end="17:46"><expr pos:start="17:44" pos:end="17:46"><name pos:start="17:44" pos:end="17:46">ctx</name></expr></argument>, <argument pos:start="17:49" pos:end="17:59"><expr pos:start="17:49" pos:end="17:59"><operator pos:start="17:49" pos:end="17:49">&amp;</operator><name pos:start="17:50" pos:end="17:59"><name pos:start="17:50" pos:end="17:52">ctx</name><operator pos:start="17:53" pos:end="17:54">-&gt;</operator><name pos:start="17:55" pos:end="17:59">riceX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
