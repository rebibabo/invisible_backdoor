<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24411.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:57"><name pos:start="1:1" pos:end="1:8">ip_reass</name><argument_list pos:start="1:9" pos:end="1:57">(<argument pos:start="1:10" pos:end="1:31">register struct ip *ip</argument>, <argument pos:start="1:34" pos:end="1:56">register struct ipq *fp</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="301:1">{<block_content pos:start="5:9" pos:end="299:19">

	<decl_stmt pos:start="5:9" pos:end="5:43"><decl pos:start="5:9" pos:end="5:42"><type pos:start="5:9" pos:end="5:30"><specifier pos:start="5:9" pos:end="5:16">register</specifier> <name pos:start="5:18" pos:end="5:28"><name pos:start="5:18" pos:end="5:23">struct</name> <name pos:start="5:25" pos:end="5:28">mbuf</name></name> <modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:31">m</name> <init pos:start="5:33" pos:end="5:42">= <expr pos:start="5:35" pos:end="5:42"><call pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:38">dtom</name><argument_list pos:start="5:39" pos:end="5:42">(<argument pos:start="5:40" pos:end="5:41"><expr pos:start="5:40" pos:end="5:41"><name pos:start="5:40" pos:end="5:41">ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:36"><decl pos:start="7:9" pos:end="7:35"><type pos:start="7:9" pos:end="7:34"><specifier pos:start="7:9" pos:end="7:16">register</specifier> <name pos:start="7:18" pos:end="7:32"><name pos:start="7:18" pos:end="7:23">struct</name> <name pos:start="7:25" pos:end="7:32">ipasfrag</name></name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:35">q</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:34"><decl pos:start="9:9" pos:end="9:33"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:16">hlen</name> <init pos:start="9:18" pos:end="9:33">= <expr pos:start="9:20" pos:end="9:33"><name pos:start="9:20" pos:end="9:28"><name pos:start="9:20" pos:end="9:21">ip</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:28">ip_hl</name></name> <operator pos:start="9:30" pos:end="9:31">&lt;&lt;</operator> <literal type="number" pos:start="9:33" pos:end="9:33">2</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:20"><decl pos:start="11:9" pos:end="11:13"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">i</name></decl>, <decl pos:start="11:16" pos:end="11:19"><type ref="prev" pos:start="11:9" pos:end="11:11"/><name pos:start="11:16" pos:end="11:19">next</name></decl>;</decl_stmt>



	<expr_stmt pos:start="15:9" pos:end="15:31"><expr pos:start="15:9" pos:end="15:30"><call pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:18">DEBUG_CALL</name><argument_list pos:start="15:19" pos:end="15:30">(<argument pos:start="15:20" pos:end="15:29"><expr pos:start="15:20" pos:end="15:29"><literal type="string" pos:start="15:20" pos:end="15:29">"ip_reass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="17:9" pos:end="17:40"><expr pos:start="17:9" pos:end="17:39"><call pos:start="17:9" pos:end="17:39"><name pos:start="17:9" pos:end="17:17">DEBUG_ARG</name><argument_list pos:start="17:18" pos:end="17:39">(<argument pos:start="17:19" pos:end="17:28"><expr pos:start="17:19" pos:end="17:28"><literal type="string" pos:start="17:19" pos:end="17:28">"ip = %lx"</literal></expr></argument>, <argument pos:start="17:31" pos:end="17:38"><expr pos:start="17:31" pos:end="17:38"><operator pos:start="17:31" pos:end="17:31">(</operator><name pos:start="17:32" pos:end="17:35">long</name><operator pos:start="17:36" pos:end="17:36">)</operator><name pos:start="17:37" pos:end="17:38">ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="19:9" pos:end="19:40"><expr pos:start="19:9" pos:end="19:39"><call pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:17">DEBUG_ARG</name><argument_list pos:start="19:18" pos:end="19:39">(<argument pos:start="19:19" pos:end="19:28"><expr pos:start="19:19" pos:end="19:28"><literal type="string" pos:start="19:19" pos:end="19:28">"fp = %lx"</literal></expr></argument>, <argument pos:start="19:31" pos:end="19:38"><expr pos:start="19:31" pos:end="19:38"><operator pos:start="19:31" pos:end="19:31">(</operator><name pos:start="19:32" pos:end="19:35">long</name><operator pos:start="19:36" pos:end="19:36">)</operator><name pos:start="19:37" pos:end="19:38">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><call pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:17">DEBUG_ARG</name><argument_list pos:start="21:18" pos:end="21:37">(<argument pos:start="21:19" pos:end="21:27"><expr pos:start="21:19" pos:end="21:27"><literal type="string" pos:start="21:19" pos:end="21:27">"m = %lx"</literal></expr></argument>, <argument pos:start="21:30" pos:end="21:36"><expr pos:start="21:30" pos:end="21:36"><operator pos:start="21:30" pos:end="21:30">(</operator><name pos:start="21:31" pos:end="21:34">long</name><operator pos:start="21:35" pos:end="21:35">)</operator><name pos:start="21:36" pos:end="21:36">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="25:9" pos:end="33:11">/*

	 * Presence of header sizes in mbufs

	 * would confuse code below.

         * Fragment m_data is concatenated.

	 */</comment>

	<expr_stmt pos:start="35:9" pos:end="35:26"><expr pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:9">m</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:17">m_data</name></name> <operator pos:start="35:19" pos:end="35:20">+=</operator> <name pos:start="35:22" pos:end="35:25">hlen</name></expr>;</expr_stmt>

	<expr_stmt pos:start="37:9" pos:end="37:25"><expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:9">m</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:16">m_len</name></name> <operator pos:start="37:18" pos:end="37:19">-=</operator> <name pos:start="37:21" pos:end="37:24">hlen</name></expr>;</expr_stmt>



	<comment type="block" pos:start="41:9" pos:end="45:11">/*

	 * If first fragment to arrive, create a reassembly queue.

	 */</comment>

	<if_stmt pos:start="47:9" pos:end="73:9"><if pos:start="47:9" pos:end="73:9">if <condition pos:start="47:12" pos:end="47:20">(<expr pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:14">fp</name> <operator pos:start="47:16" pos:end="47:17">==</operator> <literal type="number" pos:start="47:19" pos:end="47:19">0</literal></expr>)</condition> <block pos:start="47:22" pos:end="73:9">{<block_content pos:start="49:11" pos:end="71:22">

	  <decl_stmt pos:start="49:11" pos:end="49:25"><decl pos:start="49:11" pos:end="49:24"><type pos:start="49:11" pos:end="49:23"><name pos:start="49:11" pos:end="49:21"><name pos:start="49:11" pos:end="49:16">struct</name> <name pos:start="49:18" pos:end="49:21">mbuf</name></name> <modifier pos:start="49:23" pos:end="49:23">*</modifier></type><name pos:start="49:24" pos:end="49:24">t</name></decl>;</decl_stmt>

	  <if_stmt pos:start="51:11" pos:end="51:51"><if pos:start="51:11" pos:end="51:51">if <condition pos:start="51:14" pos:end="51:36">(<expr pos:start="51:15" pos:end="51:35"><operator pos:start="51:15" pos:end="51:15">(</operator><name pos:start="51:16" pos:end="51:16">t</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:26"><name pos:start="51:20" pos:end="51:24">m_get</name><argument_list pos:start="51:25" pos:end="51:26">()</argument_list></call><operator pos:start="51:27" pos:end="51:27">)</operator> <operator pos:start="51:29" pos:end="51:30">==</operator> <name pos:start="51:32" pos:end="51:35">NULL</name></expr>)</condition><block type="pseudo" pos:start="51:38" pos:end="51:51"><block_content pos:start="51:38" pos:end="51:51"> <goto pos:start="51:38" pos:end="51:51">goto <name pos:start="51:43" pos:end="51:50">dropfrag</name>;</goto></block_content></block></if></if_stmt>

	  <expr_stmt pos:start="53:11" pos:end="53:37"><expr pos:start="53:11" pos:end="53:36"><name pos:start="53:11" pos:end="53:12">fp</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:36"><name pos:start="53:16" pos:end="53:19">mtod</name><argument_list pos:start="53:20" pos:end="53:36">(<argument pos:start="53:21" pos:end="53:21"><expr pos:start="53:21" pos:end="53:21"><name pos:start="53:21" pos:end="53:21">t</name></expr></argument>, <argument pos:start="53:24" pos:end="53:35"><expr pos:start="53:24" pos:end="53:35">struct <name pos:start="53:31" pos:end="53:33">ipq</name> <operator pos:start="53:35" pos:end="53:35">*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="55:11" pos:end="55:45"><expr pos:start="55:11" pos:end="55:44"><call pos:start="55:11" pos:end="55:44"><name pos:start="55:11" pos:end="55:16">insque</name><argument_list pos:start="55:17" pos:end="55:44">(<argument pos:start="55:18" pos:end="55:29"><expr pos:start="55:18" pos:end="55:29"><operator pos:start="55:18" pos:end="55:18">&amp;</operator><name pos:start="55:19" pos:end="55:29"><name pos:start="55:19" pos:end="55:20">fp</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:29">ip_link</name></name></expr></argument>, <argument pos:start="55:32" pos:end="55:43"><expr pos:start="55:32" pos:end="55:43"><operator pos:start="55:32" pos:end="55:32">&amp;</operator><name pos:start="55:33" pos:end="55:43"><name pos:start="55:33" pos:end="55:35">ipq</name><operator pos:start="55:36" pos:end="55:36">.</operator><name pos:start="55:37" pos:end="55:43">ip_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="57:11" pos:end="57:34"><expr pos:start="57:11" pos:end="57:33"><name pos:start="57:11" pos:end="57:21"><name pos:start="57:11" pos:end="57:12">fp</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:21">ipq_ttl</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:33">IPFRAGTTL</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="59:11" pos:end="59:31"><expr pos:start="59:11" pos:end="59:30"><name pos:start="59:11" pos:end="59:19"><name pos:start="59:11" pos:end="59:12">fp</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:19">ipq_p</name></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:30"><name pos:start="59:23" pos:end="59:24">ip</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:30">ip_p</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="61:11" pos:end="61:33"><expr pos:start="61:11" pos:end="61:32"><name pos:start="61:11" pos:end="61:20"><name pos:start="61:11" pos:end="61:12">fp</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:20">ipq_id</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:32"><name pos:start="61:24" pos:end="61:25">ip</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:32">ip_id</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="63:11" pos:end="63:67"><expr pos:start="63:11" pos:end="63:66"><name pos:start="63:11" pos:end="63:28"><name pos:start="63:11" pos:end="63:12">fp</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:23">frag_link</name><operator pos:start="63:24" pos:end="63:24">.</operator><name pos:start="63:25" pos:end="63:28">next</name></name> <operator pos:start="63:30" pos:end="63:30">=</operator> <name pos:start="63:32" pos:end="63:49"><name pos:start="63:32" pos:end="63:33">fp</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:44">frag_link</name><operator pos:start="63:45" pos:end="63:45">.</operator><name pos:start="63:46" pos:end="63:49">prev</name></name> <operator pos:start="63:51" pos:end="63:51">=</operator> <operator pos:start="63:53" pos:end="63:53">&amp;</operator><name pos:start="63:54" pos:end="63:66"><name pos:start="63:54" pos:end="63:55">fp</name><operator pos:start="63:56" pos:end="63:57">-&gt;</operator><name pos:start="63:58" pos:end="63:66">frag_link</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="65:11" pos:end="65:35"><expr pos:start="65:11" pos:end="65:34"><name pos:start="65:11" pos:end="65:21"><name pos:start="65:11" pos:end="65:12">fp</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:21">ipq_src</name></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <name pos:start="65:25" pos:end="65:34"><name pos:start="65:25" pos:end="65:26">ip</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:34">ip_src</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="67:11" pos:end="67:35"><expr pos:start="67:11" pos:end="67:34"><name pos:start="67:11" pos:end="67:21"><name pos:start="67:11" pos:end="67:12">fp</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:21">ipq_dst</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:34"><name pos:start="67:25" pos:end="67:26">ip</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:34">ip_dst</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="69:11" pos:end="69:36"><expr pos:start="69:11" pos:end="69:35"><name pos:start="69:11" pos:end="69:11">q</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <operator pos:start="69:15" pos:end="69:15">(</operator>struct <name pos:start="69:23" pos:end="69:30">ipasfrag</name> <operator pos:start="69:32" pos:end="69:32">*</operator><operator pos:start="69:33" pos:end="69:33">)</operator><name pos:start="69:34" pos:end="69:35">fp</name></expr>;</expr_stmt>

	  <goto pos:start="71:11" pos:end="71:22">goto <name pos:start="71:16" pos:end="71:21">insert</name>;</goto>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="77:9" pos:end="81:11">/*

	 * Find a segment which begins after this one does.

	 */</comment>

	<for pos:start="83:9" pos:end="89:30">for <control pos:start="83:13" pos:end="85:28">(<init pos:start="83:14" pos:end="83:36"><expr pos:start="83:14" pos:end="83:35"><name pos:start="83:14" pos:end="83:14">q</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <name pos:start="83:18" pos:end="83:35"><name pos:start="83:18" pos:end="83:19">fp</name><operator pos:start="83:20" pos:end="83:21">-&gt;</operator><name pos:start="83:22" pos:end="83:30">frag_link</name><operator pos:start="83:31" pos:end="83:31">.</operator><name pos:start="83:32" pos:end="83:35">next</name></name></expr>;</init> <condition pos:start="83:38" pos:end="83:76"><expr pos:start="83:38" pos:end="83:75"><name pos:start="83:38" pos:end="83:38">q</name> <operator pos:start="83:40" pos:end="83:41">!=</operator> <operator pos:start="83:43" pos:end="83:43">(</operator>struct <name pos:start="83:51" pos:end="83:58">ipasfrag</name> <operator pos:start="83:60" pos:end="83:60">*</operator><operator pos:start="83:61" pos:end="83:61">)</operator><operator pos:start="83:62" pos:end="83:62">&amp;</operator><name pos:start="83:63" pos:end="83:75"><name pos:start="83:63" pos:end="83:64">fp</name><operator pos:start="83:65" pos:end="83:66">-&gt;</operator><name pos:start="83:67" pos:end="83:75">frag_link</name></name></expr>;</condition>

            <incr pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:13">q</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <name pos:start="85:17" pos:end="85:27"><name pos:start="85:17" pos:end="85:17">q</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:27">ipf_next</name></name></expr></incr>)</control><block type="pseudo" pos:start="87:17" pos:end="89:30"><block_content pos:start="87:17" pos:end="89:30">

		<if_stmt pos:start="87:17" pos:end="89:30"><if pos:start="87:17" pos:end="89:30">if <condition pos:start="87:20" pos:end="87:44">(<expr pos:start="87:21" pos:end="87:43"><name pos:start="87:21" pos:end="87:30"><name pos:start="87:21" pos:end="87:21">q</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:30">ipf_off</name></name> <operator pos:start="87:32" pos:end="87:32">&gt;</operator> <name pos:start="87:34" pos:end="87:43"><name pos:start="87:34" pos:end="87:35">ip</name><operator pos:start="87:36" pos:end="87:37">-&gt;</operator><name pos:start="87:38" pos:end="87:43">ip_off</name></name></expr>)</condition><block type="pseudo" pos:start="89:25" pos:end="89:30"><block_content pos:start="89:25" pos:end="89:30">

			<break pos:start="89:25" pos:end="89:30">break;</break></block_content></block></if></if_stmt></block_content></block></for>



	<comment type="block" pos:start="93:9" pos:end="101:11">/*

	 * If there is a preceding segment, it may provide some of

	 * our data already.  If so, drop the data from the incoming

	 * segment.  If it provides all of our data, drop us.

	 */</comment>

	<if_stmt pos:start="103:9" pos:end="123:9"><if pos:start="103:9" pos:end="123:9">if <condition pos:start="103:12" pos:end="103:42">(<expr pos:start="103:13" pos:end="103:41"><name pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:13">q</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:23">ipf_prev</name></name> <operator pos:start="103:25" pos:end="103:26">!=</operator> <operator pos:start="103:28" pos:end="103:28">&amp;</operator><name pos:start="103:29" pos:end="103:41"><name pos:start="103:29" pos:end="103:30">fp</name><operator pos:start="103:31" pos:end="103:32">-&gt;</operator><name pos:start="103:33" pos:end="103:41">frag_link</name></name></expr>)</condition> <block pos:start="103:44" pos:end="123:9">{<block_content pos:start="105:9" pos:end="121:17">

        <decl_stmt pos:start="105:9" pos:end="105:42"><decl pos:start="105:9" pos:end="105:41"><type pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:14">struct</name> <name pos:start="105:16" pos:end="105:23">ipasfrag</name></name> <modifier pos:start="105:25" pos:end="105:25">*</modifier></type><name pos:start="105:26" pos:end="105:27">pq</name> <init pos:start="105:29" pos:end="105:41">= <expr pos:start="105:31" pos:end="105:41"><name pos:start="105:31" pos:end="105:41"><name pos:start="105:31" pos:end="105:31">q</name><operator pos:start="105:32" pos:end="105:33">-&gt;</operator><name pos:start="105:34" pos:end="105:41">ipf_prev</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="107:17" pos:end="107:59"><expr pos:start="107:17" pos:end="107:58"><name pos:start="107:17" pos:end="107:17">i</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <name pos:start="107:21" pos:end="107:31"><name pos:start="107:21" pos:end="107:22">pq</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:31">ipf_off</name></name> <operator pos:start="107:33" pos:end="107:33">+</operator> <name pos:start="107:35" pos:end="107:45"><name pos:start="107:35" pos:end="107:36">pq</name><operator pos:start="107:37" pos:end="107:38">-&gt;</operator><name pos:start="107:39" pos:end="107:45">ipf_len</name></name> <operator pos:start="107:47" pos:end="107:47">-</operator> <name pos:start="107:49" pos:end="107:58"><name pos:start="107:49" pos:end="107:50">ip</name><operator pos:start="107:51" pos:end="107:52">-&gt;</operator><name pos:start="107:53" pos:end="107:58">ip_off</name></name></expr>;</expr_stmt>

		<if_stmt pos:start="109:17" pos:end="121:17"><if pos:start="109:17" pos:end="121:17">if <condition pos:start="109:20" pos:end="109:26">(<expr pos:start="109:21" pos:end="109:25"><name pos:start="109:21" pos:end="109:21">i</name> <operator pos:start="109:23" pos:end="109:23">&gt;</operator> <literal type="number" pos:start="109:25" pos:end="109:25">0</literal></expr>)</condition> <block pos:start="109:28" pos:end="121:17">{<block_content pos:start="111:25" pos:end="119:40">

			<if_stmt pos:start="111:25" pos:end="113:46"><if pos:start="111:25" pos:end="113:46">if <condition pos:start="111:28" pos:end="111:44">(<expr pos:start="111:29" pos:end="111:43"><name pos:start="111:29" pos:end="111:29">i</name> <operator pos:start="111:31" pos:end="111:32">&gt;=</operator> <name pos:start="111:34" pos:end="111:43"><name pos:start="111:34" pos:end="111:35">ip</name><operator pos:start="111:36" pos:end="111:37">-&gt;</operator><name pos:start="111:38" pos:end="111:43">ip_len</name></name></expr>)</condition><block type="pseudo" pos:start="113:33" pos:end="113:46"><block_content pos:start="113:33" pos:end="113:46">

				<goto pos:start="113:33" pos:end="113:46">goto <name pos:start="113:38" pos:end="113:45">dropfrag</name>;</goto></block_content></block></if></if_stmt>

			<expr_stmt pos:start="115:25" pos:end="115:43"><expr pos:start="115:25" pos:end="115:42"><call pos:start="115:25" pos:end="115:42"><name pos:start="115:25" pos:end="115:29">m_adj</name><argument_list pos:start="115:30" pos:end="115:42">(<argument pos:start="115:31" pos:end="115:38"><expr pos:start="115:31" pos:end="115:38"><call pos:start="115:31" pos:end="115:38"><name pos:start="115:31" pos:end="115:34">dtom</name><argument_list pos:start="115:35" pos:end="115:38">(<argument pos:start="115:36" pos:end="115:37"><expr pos:start="115:36" pos:end="115:37"><name pos:start="115:36" pos:end="115:37">ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:41" pos:end="115:41"><expr pos:start="115:41" pos:end="115:41"><name pos:start="115:41" pos:end="115:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="117:25" pos:end="117:40"><expr pos:start="117:25" pos:end="117:39"><name pos:start="117:25" pos:end="117:34"><name pos:start="117:25" pos:end="117:26">ip</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:34">ip_off</name></name> <operator pos:start="117:36" pos:end="117:37">+=</operator> <name pos:start="117:39" pos:end="117:39">i</name></expr>;</expr_stmt>

			<expr_stmt pos:start="119:25" pos:end="119:40"><expr pos:start="119:25" pos:end="119:39"><name pos:start="119:25" pos:end="119:34"><name pos:start="119:25" pos:end="119:26">ip</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:34">ip_len</name></name> <operator pos:start="119:36" pos:end="119:37">-=</operator> <name pos:start="119:39" pos:end="119:39">i</name></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="127:9" pos:end="133:11">/*

	 * While we overlap succeeding segments trim them or,

	 * if they are completely covered, dequeue them.

	 */</comment>

	<while pos:start="135:9" pos:end="159:9">while <condition pos:start="135:15" pos:end="137:49">(<expr pos:start="135:16" pos:end="137:48"><name pos:start="135:16" pos:end="135:16">q</name> <operator pos:start="135:18" pos:end="135:19">!=</operator> <operator pos:start="135:21" pos:end="135:21">(</operator>struct <name pos:start="135:29" pos:end="135:36">ipasfrag</name><operator pos:start="135:37" pos:end="135:37">*</operator><operator pos:start="135:38" pos:end="135:38">)</operator><operator pos:start="135:39" pos:end="135:39">&amp;</operator><name pos:start="135:40" pos:end="135:52"><name pos:start="135:40" pos:end="135:41">fp</name><operator pos:start="135:42" pos:end="135:43">-&gt;</operator><name pos:start="135:44" pos:end="135:52">frag_link</name></name> <operator pos:start="135:54" pos:end="135:55">&amp;&amp;</operator>

            <name pos:start="137:13" pos:end="137:22"><name pos:start="137:13" pos:end="137:14">ip</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:22">ip_off</name></name> <operator pos:start="137:24" pos:end="137:24">+</operator> <name pos:start="137:26" pos:end="137:35"><name pos:start="137:26" pos:end="137:27">ip</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:35">ip_len</name></name> <operator pos:start="137:37" pos:end="137:37">&gt;</operator> <name pos:start="137:39" pos:end="137:48"><name pos:start="137:39" pos:end="137:39">q</name><operator pos:start="137:40" pos:end="137:41">-&gt;</operator><name pos:start="137:42" pos:end="137:48">ipf_off</name></name></expr>)</condition> <block pos:start="137:51" pos:end="159:9">{<block_content pos:start="139:17" pos:end="157:36">

		<expr_stmt pos:start="139:17" pos:end="139:59"><expr pos:start="139:17" pos:end="139:58"><name pos:start="139:17" pos:end="139:17">i</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <operator pos:start="139:21" pos:end="139:21">(</operator><name pos:start="139:22" pos:end="139:31"><name pos:start="139:22" pos:end="139:23">ip</name><operator pos:start="139:24" pos:end="139:25">-&gt;</operator><name pos:start="139:26" pos:end="139:31">ip_off</name></name> <operator pos:start="139:33" pos:end="139:33">+</operator> <name pos:start="139:35" pos:end="139:44"><name pos:start="139:35" pos:end="139:36">ip</name><operator pos:start="139:37" pos:end="139:38">-&gt;</operator><name pos:start="139:39" pos:end="139:44">ip_len</name></name><operator pos:start="139:45" pos:end="139:45">)</operator> <operator pos:start="139:47" pos:end="139:47">-</operator> <name pos:start="139:49" pos:end="139:58"><name pos:start="139:49" pos:end="139:49">q</name><operator pos:start="139:50" pos:end="139:51">-&gt;</operator><name pos:start="139:52" pos:end="139:58">ipf_off</name></name></expr>;</expr_stmt>

		<if_stmt pos:start="141:17" pos:end="151:17"><if pos:start="141:17" pos:end="151:17">if <condition pos:start="141:20" pos:end="141:35">(<expr pos:start="141:21" pos:end="141:34"><name pos:start="141:21" pos:end="141:21">i</name> <operator pos:start="141:23" pos:end="141:23">&lt;</operator> <name pos:start="141:25" pos:end="141:34"><name pos:start="141:25" pos:end="141:25">q</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:34">ipf_len</name></name></expr>)</condition> <block pos:start="141:37" pos:end="151:17">{<block_content pos:start="143:25" pos:end="149:30">

			<expr_stmt pos:start="143:25" pos:end="143:40"><expr pos:start="143:25" pos:end="143:39"><name pos:start="143:25" pos:end="143:34"><name pos:start="143:25" pos:end="143:25">q</name><operator pos:start="143:26" pos:end="143:27">-&gt;</operator><name pos:start="143:28" pos:end="143:34">ipf_len</name></name> <operator pos:start="143:36" pos:end="143:37">-=</operator> <name pos:start="143:39" pos:end="143:39">i</name></expr>;</expr_stmt>

			<expr_stmt pos:start="145:25" pos:end="145:40"><expr pos:start="145:25" pos:end="145:39"><name pos:start="145:25" pos:end="145:34"><name pos:start="145:25" pos:end="145:25">q</name><operator pos:start="145:26" pos:end="145:27">-&gt;</operator><name pos:start="145:28" pos:end="145:34">ipf_off</name></name> <operator pos:start="145:36" pos:end="145:37">+=</operator> <name pos:start="145:39" pos:end="145:39">i</name></expr>;</expr_stmt>

			<expr_stmt pos:start="147:25" pos:end="147:42"><expr pos:start="147:25" pos:end="147:41"><call pos:start="147:25" pos:end="147:41"><name pos:start="147:25" pos:end="147:29">m_adj</name><argument_list pos:start="147:30" pos:end="147:41">(<argument pos:start="147:31" pos:end="147:37"><expr pos:start="147:31" pos:end="147:37"><call pos:start="147:31" pos:end="147:37"><name pos:start="147:31" pos:end="147:34">dtom</name><argument_list pos:start="147:35" pos:end="147:37">(<argument pos:start="147:36" pos:end="147:36"><expr pos:start="147:36" pos:end="147:36"><name pos:start="147:36" pos:end="147:36">q</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="147:40" pos:end="147:40"><expr pos:start="147:40" pos:end="147:40"><name pos:start="147:40" pos:end="147:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="149:25" pos:end="149:30">break;</break>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="153:17" pos:end="153:32"><expr pos:start="153:17" pos:end="153:31"><name pos:start="153:17" pos:end="153:17">q</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <name pos:start="153:21" pos:end="153:31"><name pos:start="153:21" pos:end="153:21">q</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:31">ipf_next</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="155:17" pos:end="155:43"><expr pos:start="155:17" pos:end="155:42"><call pos:start="155:17" pos:end="155:42"><name pos:start="155:17" pos:end="155:23">m_freem</name><argument_list pos:start="155:24" pos:end="155:42">(<argument pos:start="155:25" pos:end="155:41"><expr pos:start="155:25" pos:end="155:41"><call pos:start="155:25" pos:end="155:41"><name pos:start="155:25" pos:end="155:28">dtom</name><argument_list pos:start="155:29" pos:end="155:41">(<argument pos:start="155:30" pos:end="155:40"><expr pos:start="155:30" pos:end="155:40"><name pos:start="155:30" pos:end="155:40"><name pos:start="155:30" pos:end="155:30">q</name><operator pos:start="155:31" pos:end="155:32">-&gt;</operator><name pos:start="155:33" pos:end="155:40">ipf_prev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="157:17" pos:end="157:36"><expr pos:start="157:17" pos:end="157:35"><call pos:start="157:17" pos:end="157:35"><name pos:start="157:17" pos:end="157:22">ip_deq</name><argument_list pos:start="157:23" pos:end="157:35">(<argument pos:start="157:24" pos:end="157:34"><expr pos:start="157:24" pos:end="157:34"><name pos:start="157:24" pos:end="157:34"><name pos:start="157:24" pos:end="157:24">q</name><operator pos:start="157:25" pos:end="157:26">-&gt;</operator><name pos:start="157:27" pos:end="157:34">ipf_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></while>



<label pos:start="163:1" pos:end="163:7"><name pos:start="163:1" pos:end="163:6">insert</name>:</label>

	<comment type="block" pos:start="165:9" pos:end="171:11">/*

	 * Stick new segment in its place;

	 * check for complete reassembly.

	 */</comment>

	<expr_stmt pos:start="173:9" pos:end="173:42"><expr pos:start="173:9" pos:end="173:41"><call pos:start="173:9" pos:end="173:41"><name pos:start="173:9" pos:end="173:14">ip_enq</name><argument_list pos:start="173:15" pos:end="173:41">(<argument pos:start="173:16" pos:end="173:27"><expr pos:start="173:16" pos:end="173:27"><call pos:start="173:16" pos:end="173:27"><name pos:start="173:16" pos:end="173:23">iptofrag</name><argument_list pos:start="173:24" pos:end="173:27">(<argument pos:start="173:25" pos:end="173:26"><expr pos:start="173:25" pos:end="173:26"><name pos:start="173:25" pos:end="173:26">ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="173:30" pos:end="173:40"><expr pos:start="173:30" pos:end="173:40"><name pos:start="173:30" pos:end="173:40"><name pos:start="173:30" pos:end="173:30">q</name><operator pos:start="173:31" pos:end="173:32">-&gt;</operator><name pos:start="173:33" pos:end="173:40">ipf_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="175:9" pos:end="175:17"><expr pos:start="175:9" pos:end="175:16"><name pos:start="175:9" pos:end="175:12">next</name> <operator pos:start="175:14" pos:end="175:14">=</operator> <literal type="number" pos:start="175:16" pos:end="175:16">0</literal></expr>;</expr_stmt>

	<for pos:start="177:9" pos:end="187:9">for <control pos:start="177:13" pos:end="179:28">(<init pos:start="177:14" pos:end="177:36"><expr pos:start="177:14" pos:end="177:35"><name pos:start="177:14" pos:end="177:14">q</name> <operator pos:start="177:16" pos:end="177:16">=</operator> <name pos:start="177:18" pos:end="177:35"><name pos:start="177:18" pos:end="177:19">fp</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:30">frag_link</name><operator pos:start="177:31" pos:end="177:31">.</operator><name pos:start="177:32" pos:end="177:35">next</name></name></expr>;</init> <condition pos:start="177:38" pos:end="177:75"><expr pos:start="177:38" pos:end="177:74"><name pos:start="177:38" pos:end="177:38">q</name> <operator pos:start="177:40" pos:end="177:41">!=</operator> <operator pos:start="177:43" pos:end="177:43">(</operator>struct <name pos:start="177:51" pos:end="177:58">ipasfrag</name><operator pos:start="177:59" pos:end="177:59">*</operator><operator pos:start="177:60" pos:end="177:60">)</operator><operator pos:start="177:61" pos:end="177:61">&amp;</operator><name pos:start="177:62" pos:end="177:74"><name pos:start="177:62" pos:end="177:63">fp</name><operator pos:start="177:64" pos:end="177:65">-&gt;</operator><name pos:start="177:66" pos:end="177:74">frag_link</name></name></expr>;</condition>

            <incr pos:start="179:13" pos:end="179:27"><expr pos:start="179:13" pos:end="179:27"><name pos:start="179:13" pos:end="179:13">q</name> <operator pos:start="179:15" pos:end="179:15">=</operator> <name pos:start="179:17" pos:end="179:27"><name pos:start="179:17" pos:end="179:17">q</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:27">ipf_next</name></name></expr></incr>)</control> <block pos:start="179:30" pos:end="187:9">{<block_content pos:start="181:17" pos:end="185:35">

		<if_stmt pos:start="181:17" pos:end="183:35"><if pos:start="181:17" pos:end="183:35">if <condition pos:start="181:20" pos:end="181:39">(<expr pos:start="181:21" pos:end="181:38"><name pos:start="181:21" pos:end="181:30"><name pos:start="181:21" pos:end="181:21">q</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:30">ipf_off</name></name> <operator pos:start="181:32" pos:end="181:33">!=</operator> <name pos:start="181:35" pos:end="181:38">next</name></expr>)</condition><block type="pseudo" pos:start="183:25" pos:end="183:35"><block_content pos:start="183:25" pos:end="183:35">

			<return pos:start="183:25" pos:end="183:35">return <expr pos:start="183:32" pos:end="183:34"><operator pos:start="183:32" pos:end="183:32">(</operator><literal type="number" pos:start="183:33" pos:end="183:33">0</literal><operator pos:start="183:34" pos:end="183:34">)</operator></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt pos:start="185:17" pos:end="185:35"><expr pos:start="185:17" pos:end="185:34"><name pos:start="185:17" pos:end="185:20">next</name> <operator pos:start="185:22" pos:end="185:23">+=</operator> <name pos:start="185:25" pos:end="185:34"><name pos:start="185:25" pos:end="185:25">q</name><operator pos:start="185:26" pos:end="185:27">-&gt;</operator><name pos:start="185:28" pos:end="185:34">ipf_len</name></name></expr>;</expr_stmt>

	</block_content>}</block></for>

	<if_stmt pos:start="189:9" pos:end="191:27"><if pos:start="189:9" pos:end="191:27">if <condition pos:start="189:12" pos:end="189:60">(<expr pos:start="189:13" pos:end="189:59"><operator pos:start="189:13" pos:end="189:13">(</operator><operator pos:start="189:14" pos:end="189:14">(</operator>struct <name pos:start="189:22" pos:end="189:29">ipasfrag</name> <operator pos:start="189:31" pos:end="189:31">*</operator><operator pos:start="189:32" pos:end="189:32">)</operator><operator pos:start="189:33" pos:end="189:33">(</operator><name pos:start="189:34" pos:end="189:44"><name pos:start="189:34" pos:end="189:34">q</name><operator pos:start="189:35" pos:end="189:36">-&gt;</operator><name pos:start="189:37" pos:end="189:44">ipf_prev</name></name><operator pos:start="189:45" pos:end="189:45">)</operator><operator pos:start="189:46" pos:end="189:46">)</operator><operator pos:start="189:47" pos:end="189:48">-&gt;</operator><name pos:start="189:49" pos:end="189:55">ipf_tos</name> <operator pos:start="189:57" pos:end="189:57">&amp;</operator> <literal type="number" pos:start="189:59" pos:end="189:59">1</literal></expr>)</condition><block type="pseudo" pos:start="191:17" pos:end="191:27"><block_content pos:start="191:17" pos:end="191:27">

		<return pos:start="191:17" pos:end="191:27">return <expr pos:start="191:24" pos:end="191:26"><operator pos:start="191:24" pos:end="191:24">(</operator><literal type="number" pos:start="191:25" pos:end="191:25">0</literal><operator pos:start="191:26" pos:end="191:26">)</operator></expr>;</return></block_content></block></if></if_stmt>



	<comment type="block" pos:start="195:9" pos:end="199:11">/*

	 * Reassembly is complete; concatenate fragments.

	 */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:27"><expr pos:start="201:5" pos:end="201:26"><name pos:start="201:5" pos:end="201:5">q</name> <operator pos:start="201:7" pos:end="201:7">=</operator> <name pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:10">fp</name><operator pos:start="201:11" pos:end="201:12">-&gt;</operator><name pos:start="201:13" pos:end="201:21">frag_link</name><operator pos:start="201:22" pos:end="201:22">.</operator><name pos:start="201:23" pos:end="201:26">next</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="203:9" pos:end="203:20"><expr pos:start="203:9" pos:end="203:19"><name pos:start="203:9" pos:end="203:9">m</name> <operator pos:start="203:11" pos:end="203:11">=</operator> <call pos:start="203:13" pos:end="203:19"><name pos:start="203:13" pos:end="203:16">dtom</name><argument_list pos:start="203:17" pos:end="203:19">(<argument pos:start="203:18" pos:end="203:18"><expr pos:start="203:18" pos:end="203:18"><name pos:start="203:18" pos:end="203:18">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="207:9" pos:end="207:44"><expr pos:start="207:9" pos:end="207:43"><name pos:start="207:9" pos:end="207:9">q</name> <operator pos:start="207:11" pos:end="207:11">=</operator> <operator pos:start="207:13" pos:end="207:13">(</operator>struct <name pos:start="207:21" pos:end="207:28">ipasfrag</name> <operator pos:start="207:30" pos:end="207:30">*</operator><operator pos:start="207:31" pos:end="207:31">)</operator> <name pos:start="207:33" pos:end="207:43"><name pos:start="207:33" pos:end="207:33">q</name><operator pos:start="207:34" pos:end="207:35">-&gt;</operator><name pos:start="207:36" pos:end="207:43">ipf_next</name></name></expr>;</expr_stmt>

	<while pos:start="209:9" pos:end="217:9">while <condition pos:start="209:15" pos:end="209:53">(<expr pos:start="209:16" pos:end="209:52"><name pos:start="209:16" pos:end="209:16">q</name> <operator pos:start="209:18" pos:end="209:19">!=</operator> <operator pos:start="209:21" pos:end="209:21">(</operator>struct <name pos:start="209:29" pos:end="209:36">ipasfrag</name><operator pos:start="209:37" pos:end="209:37">*</operator><operator pos:start="209:38" pos:end="209:38">)</operator><operator pos:start="209:39" pos:end="209:39">&amp;</operator><name pos:start="209:40" pos:end="209:52"><name pos:start="209:40" pos:end="209:41">fp</name><operator pos:start="209:42" pos:end="209:43">-&gt;</operator><name pos:start="209:44" pos:end="209:52">frag_link</name></name></expr>)</condition> <block pos:start="209:55" pos:end="217:9">{<block_content pos:start="211:11" pos:end="215:22">

	  <decl_stmt pos:start="211:11" pos:end="211:35"><decl pos:start="211:11" pos:end="211:34"><type pos:start="211:11" pos:end="211:23"><name pos:start="211:11" pos:end="211:21"><name pos:start="211:11" pos:end="211:16">struct</name> <name pos:start="211:18" pos:end="211:21">mbuf</name></name> <modifier pos:start="211:23" pos:end="211:23">*</modifier></type><name pos:start="211:24" pos:end="211:24">t</name> <init pos:start="211:26" pos:end="211:34">= <expr pos:start="211:28" pos:end="211:34"><call pos:start="211:28" pos:end="211:34"><name pos:start="211:28" pos:end="211:31">dtom</name><argument_list pos:start="211:32" pos:end="211:34">(<argument pos:start="211:33" pos:end="211:33"><expr pos:start="211:33" pos:end="211:33"><name pos:start="211:33" pos:end="211:33">q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	  <expr_stmt pos:start="213:11" pos:end="213:46"><expr pos:start="213:11" pos:end="213:45"><name pos:start="213:11" pos:end="213:11">q</name> <operator pos:start="213:13" pos:end="213:13">=</operator> <operator pos:start="213:15" pos:end="213:15">(</operator>struct <name pos:start="213:23" pos:end="213:30">ipasfrag</name> <operator pos:start="213:32" pos:end="213:32">*</operator><operator pos:start="213:33" pos:end="213:33">)</operator> <name pos:start="213:35" pos:end="213:45"><name pos:start="213:35" pos:end="213:35">q</name><operator pos:start="213:36" pos:end="213:37">-&gt;</operator><name pos:start="213:38" pos:end="213:45">ipf_next</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="215:11" pos:end="215:22"><expr pos:start="215:11" pos:end="215:21"><call pos:start="215:11" pos:end="215:21"><name pos:start="215:11" pos:end="215:15">m_cat</name><argument_list pos:start="215:16" pos:end="215:21">(<argument pos:start="215:17" pos:end="215:17"><expr pos:start="215:17" pos:end="215:17"><name pos:start="215:17" pos:end="215:17">m</name></expr></argument>, <argument pos:start="215:20" pos:end="215:20"><expr pos:start="215:20" pos:end="215:20"><name pos:start="215:20" pos:end="215:20">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></while>



	<comment type="block" pos:start="221:9" pos:end="231:11">/*

	 * Create header for new ip packet by

	 * modifying header of first packet;

	 * dequeue and discard fragment reassembly header.

	 * Make header visible.

	 */</comment>

	<expr_stmt pos:start="233:9" pos:end="233:31"><expr pos:start="233:9" pos:end="233:30"><name pos:start="233:9" pos:end="233:9">q</name> <operator pos:start="233:11" pos:end="233:11">=</operator> <name pos:start="233:13" pos:end="233:30"><name pos:start="233:13" pos:end="233:14">fp</name><operator pos:start="233:15" pos:end="233:16">-&gt;</operator><name pos:start="233:17" pos:end="233:25">frag_link</name><operator pos:start="233:26" pos:end="233:26">.</operator><name pos:start="233:27" pos:end="233:30">next</name></name></expr>;</expr_stmt>



	<comment type="block" pos:start="237:9" pos:end="249:11">/*

	 * If the fragments concatenated to an mbuf that's

	 * bigger than the total size of the fragment, then and

	 * m_ext buffer was alloced. But fp-&gt;ipq_next points to

	 * the old buffer (in the mbuf), so we must point ip

	 * into the new buffer.

	 */</comment>

	<if_stmt pos:start="251:9" pos:end="259:9"><if pos:start="251:9" pos:end="259:9">if <condition pos:start="251:12" pos:end="251:31">(<expr pos:start="251:13" pos:end="251:30"><name pos:start="251:13" pos:end="251:22"><name pos:start="251:13" pos:end="251:13">m</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:22">m_flags</name></name> <operator pos:start="251:24" pos:end="251:24">&amp;</operator> <name pos:start="251:26" pos:end="251:30">M_EXT</name></expr>)</condition> <block pos:start="251:33" pos:end="259:9">{<block_content pos:start="253:11" pos:end="257:52">

	  <decl_stmt pos:start="253:11" pos:end="253:20"><decl pos:start="253:11" pos:end="253:19"><type pos:start="253:11" pos:end="253:13"><name pos:start="253:11" pos:end="253:13">int</name></type> <name pos:start="253:15" pos:end="253:19">delta</name></decl>;</decl_stmt>

	  <expr_stmt pos:start="255:11" pos:end="255:40"><expr pos:start="255:11" pos:end="255:39"><name pos:start="255:11" pos:end="255:15">delta</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <operator pos:start="255:19" pos:end="255:19">(</operator><name pos:start="255:20" pos:end="255:23">char</name> <operator pos:start="255:25" pos:end="255:25">*</operator><operator pos:start="255:26" pos:end="255:26">)</operator><name pos:start="255:27" pos:end="255:28">ip</name> <operator pos:start="255:30" pos:end="255:30">-</operator> <name pos:start="255:32" pos:end="255:39"><name pos:start="255:32" pos:end="255:32">m</name><operator pos:start="255:33" pos:end="255:34">-&gt;</operator><name pos:start="255:35" pos:end="255:39">m_dat</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="257:11" pos:end="257:52"><expr pos:start="257:11" pos:end="257:51"><name pos:start="257:11" pos:end="257:11">q</name> <operator pos:start="257:13" pos:end="257:13">=</operator> <operator pos:start="257:15" pos:end="257:15">(</operator>struct <name pos:start="257:23" pos:end="257:30">ipasfrag</name> <operator pos:start="257:32" pos:end="257:32">*</operator><operator pos:start="257:33" pos:end="257:33">)</operator><operator pos:start="257:34" pos:end="257:34">(</operator><name pos:start="257:35" pos:end="257:42"><name pos:start="257:35" pos:end="257:35">m</name><operator pos:start="257:36" pos:end="257:37">-&gt;</operator><name pos:start="257:38" pos:end="257:42">m_ext</name></name> <operator pos:start="257:44" pos:end="257:44">+</operator> <name pos:start="257:46" pos:end="257:50">delta</name><operator pos:start="257:51" pos:end="257:51">)</operator></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="263:9" pos:end="265:46">/* DEBUG_ARG("ip = %lx", (long)ip);

	 * ip=(struct ipasfrag *)m-&gt;m_data; */</comment>



    <expr_stmt pos:start="269:5" pos:end="269:21"><expr pos:start="269:5" pos:end="269:20"><name pos:start="269:5" pos:end="269:6">ip</name> <operator pos:start="269:8" pos:end="269:8">=</operator> <call pos:start="269:10" pos:end="269:20"><name pos:start="269:10" pos:end="269:17">fragtoip</name><argument_list pos:start="269:18" pos:end="269:20">(<argument pos:start="269:19" pos:end="269:19"><expr pos:start="269:19" pos:end="269:19"><name pos:start="269:19" pos:end="269:19">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="271:9" pos:end="271:26"><expr pos:start="271:9" pos:end="271:25"><name pos:start="271:9" pos:end="271:18"><name pos:start="271:9" pos:end="271:10">ip</name><operator pos:start="271:11" pos:end="271:12">-&gt;</operator><name pos:start="271:13" pos:end="271:18">ip_len</name></name> <operator pos:start="271:20" pos:end="271:20">=</operator> <name pos:start="271:22" pos:end="271:25">next</name></expr>;</expr_stmt>

	<expr_stmt pos:start="273:9" pos:end="273:25"><expr pos:start="273:9" pos:end="273:24"><name pos:start="273:9" pos:end="273:18"><name pos:start="273:9" pos:end="273:10">ip</name><operator pos:start="273:11" pos:end="273:12">-&gt;</operator><name pos:start="273:13" pos:end="273:18">ip_tos</name></name> <operator pos:start="273:20" pos:end="273:21">&amp;=</operator> <operator pos:start="273:23" pos:end="273:23">~</operator><literal type="number" pos:start="273:24" pos:end="273:24">1</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="275:9" pos:end="275:33"><expr pos:start="275:9" pos:end="275:32"><name pos:start="275:9" pos:end="275:18"><name pos:start="275:9" pos:end="275:10">ip</name><operator pos:start="275:11" pos:end="275:12">-&gt;</operator><name pos:start="275:13" pos:end="275:18">ip_src</name></name> <operator pos:start="275:20" pos:end="275:20">=</operator> <name pos:start="275:22" pos:end="275:32"><name pos:start="275:22" pos:end="275:23">fp</name><operator pos:start="275:24" pos:end="275:25">-&gt;</operator><name pos:start="275:26" pos:end="275:32">ipq_src</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="277:9" pos:end="277:33"><expr pos:start="277:9" pos:end="277:32"><name pos:start="277:9" pos:end="277:18"><name pos:start="277:9" pos:end="277:10">ip</name><operator pos:start="277:11" pos:end="277:12">-&gt;</operator><name pos:start="277:13" pos:end="277:18">ip_dst</name></name> <operator pos:start="277:20" pos:end="277:20">=</operator> <name pos:start="277:22" pos:end="277:32"><name pos:start="277:22" pos:end="277:23">fp</name><operator pos:start="277:24" pos:end="277:25">-&gt;</operator><name pos:start="277:26" pos:end="277:32">ipq_dst</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="279:9" pos:end="279:29"><expr pos:start="279:9" pos:end="279:28"><call pos:start="279:9" pos:end="279:28"><name pos:start="279:9" pos:end="279:14">remque</name><argument_list pos:start="279:15" pos:end="279:28">(<argument pos:start="279:16" pos:end="279:27"><expr pos:start="279:16" pos:end="279:27"><operator pos:start="279:16" pos:end="279:16">&amp;</operator><name pos:start="279:17" pos:end="279:27"><name pos:start="279:17" pos:end="279:18">fp</name><operator pos:start="279:19" pos:end="279:20">-&gt;</operator><name pos:start="279:21" pos:end="279:27">ip_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="281:9" pos:end="281:32"><expr pos:start="281:9" pos:end="281:31"><operator pos:start="281:9" pos:end="281:9">(</operator><name pos:start="281:10" pos:end="281:13">void</name><operator pos:start="281:14" pos:end="281:14">)</operator> <call pos:start="281:16" pos:end="281:31"><name pos:start="281:16" pos:end="281:21">m_free</name><argument_list pos:start="281:22" pos:end="281:31">(<argument pos:start="281:23" pos:end="281:30"><expr pos:start="281:23" pos:end="281:30"><call pos:start="281:23" pos:end="281:30"><name pos:start="281:23" pos:end="281:26">dtom</name><argument_list pos:start="281:27" pos:end="281:30">(<argument pos:start="281:28" pos:end="281:29"><expr pos:start="281:28" pos:end="281:29"><name pos:start="281:28" pos:end="281:29">fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="283:9" pos:end="283:37"><expr pos:start="283:9" pos:end="283:36"><name pos:start="283:9" pos:end="283:16"><name pos:start="283:9" pos:end="283:9">m</name><operator pos:start="283:10" pos:end="283:11">-&gt;</operator><name pos:start="283:12" pos:end="283:16">m_len</name></name> <operator pos:start="283:18" pos:end="283:19">+=</operator> <operator pos:start="283:21" pos:end="283:21">(</operator><name pos:start="283:22" pos:end="283:30"><name pos:start="283:22" pos:end="283:23">ip</name><operator pos:start="283:24" pos:end="283:25">-&gt;</operator><name pos:start="283:26" pos:end="283:30">ip_hl</name></name> <operator pos:start="283:32" pos:end="283:33">&lt;&lt;</operator> <literal type="number" pos:start="283:35" pos:end="283:35">2</literal><operator pos:start="283:36" pos:end="283:36">)</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="285:9" pos:end="285:38"><expr pos:start="285:9" pos:end="285:37"><name pos:start="285:9" pos:end="285:17"><name pos:start="285:9" pos:end="285:9">m</name><operator pos:start="285:10" pos:end="285:11">-&gt;</operator><name pos:start="285:12" pos:end="285:17">m_data</name></name> <operator pos:start="285:19" pos:end="285:20">-=</operator> <operator pos:start="285:22" pos:end="285:22">(</operator><name pos:start="285:23" pos:end="285:31"><name pos:start="285:23" pos:end="285:24">ip</name><operator pos:start="285:25" pos:end="285:26">-&gt;</operator><name pos:start="285:27" pos:end="285:31">ip_hl</name></name> <operator pos:start="285:33" pos:end="285:34">&lt;&lt;</operator> <literal type="number" pos:start="285:36" pos:end="285:36">2</literal><operator pos:start="285:37" pos:end="285:37">)</operator></expr>;</expr_stmt>



	<return pos:start="289:9" pos:end="289:18">return <expr pos:start="289:16" pos:end="289:17"><name pos:start="289:16" pos:end="289:17">ip</name></expr>;</return>



<label pos:start="293:1" pos:end="293:9"><name pos:start="293:1" pos:end="293:8">dropfrag</name>:</label>

	<expr_stmt pos:start="295:9" pos:end="295:39"><expr pos:start="295:9" pos:end="295:38"><call pos:start="295:9" pos:end="295:38"><name pos:start="295:9" pos:end="295:12">STAT</name><argument_list pos:start="295:13" pos:end="295:38">(<argument pos:start="295:14" pos:end="295:37"><expr pos:start="295:14" pos:end="295:37"><name pos:start="295:14" pos:end="295:35"><name pos:start="295:14" pos:end="295:19">ipstat</name><operator pos:start="295:20" pos:end="295:20">.</operator><name pos:start="295:21" pos:end="295:35">ips_fragdropped</name></name><operator pos:start="295:36" pos:end="295:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="297:9" pos:end="297:19"><expr pos:start="297:9" pos:end="297:18"><call pos:start="297:9" pos:end="297:18"><name pos:start="297:9" pos:end="297:15">m_freem</name><argument_list pos:start="297:16" pos:end="297:18">(<argument pos:start="297:17" pos:end="297:17"><expr pos:start="297:17" pos:end="297:17"><name pos:start="297:17" pos:end="297:17">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="299:9" pos:end="299:19">return <expr pos:start="299:16" pos:end="299:18"><operator pos:start="299:16" pos:end="299:16">(</operator><literal type="number" pos:start="299:17" pos:end="299:17">0</literal><operator pos:start="299:18" pos:end="299:18">)</operator></expr>;</return>

</block_content>}</block>
</unit>
