<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25217.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">pcistg_service_call</name><parameter_list pos:start="1:24" pos:end="1:61">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">S390CPU</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">cpu</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:48"><decl pos:start="1:39" pos:end="1:48"><type pos:start="1:39" pos:end="1:48"><name pos:start="1:39" pos:end="1:45">uint8_t</name></type> <name pos:start="1:47" pos:end="1:48">r1</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:60"><decl pos:start="1:51" pos:end="1:60"><type pos:start="1:51" pos:end="1:60"><name pos:start="1:51" pos:end="1:57">uint8_t</name></type> <name pos:start="1:59" pos:end="1:60">r2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="201:1">{<block_content pos:start="5:5" pos:end="199:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUS390XState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">env</name> <init pos:start="5:24" pos:end="5:34">= <expr pos:start="5:26" pos:end="5:34"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:34"><name pos:start="5:27" pos:end="5:29">cpu</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:19">offset</name></decl>, <decl pos:start="7:22" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:25">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">S390PCIBusDevice</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:27">pbdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:15">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:17">pcias</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:36"><expr pos:start="21:5" pos:end="21:35"><call pos:start="21:5" pos:end="21:35"><name pos:start="21:5" pos:end="21:25">cpu_synchronize_state</name><argument_list pos:start="21:26" pos:end="21:35">(<argument pos:start="21:27" pos:end="21:34"><expr pos:start="21:27" pos:end="21:34"><call pos:start="21:27" pos:end="21:34"><name pos:start="21:27" pos:end="21:29">CPU</name><argument_list pos:start="21:30" pos:end="21:34">(<argument pos:start="21:31" pos:end="21:33"><expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:40">(<expr pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:11">env</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:16">psw</name><operator pos:start="25:17" pos:end="25:17">.</operator><name pos:start="25:18" pos:end="25:21">mask</name></name> <operator pos:start="25:23" pos:end="25:23">&amp;</operator> <name pos:start="25:25" pos:end="25:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="25:42" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:50"><expr pos:start="27:9" pos:end="27:49"><call pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:25">program_interrupt</name><argument_list pos:start="27:26" pos:end="27:49">(<argument pos:start="27:27" pos:end="27:29"><expr pos:start="27:27" pos:end="27:29"><name pos:start="27:27" pos:end="27:29">env</name></expr></argument>, <argument pos:start="27:32" pos:end="27:45"><expr pos:start="27:32" pos:end="27:45"><name pos:start="27:32" pos:end="27:45">PGM_PRIVILEGED</name></expr></argument>, <argument pos:start="27:48" pos:end="27:48"><expr pos:start="27:48" pos:end="27:48"><literal type="number" pos:start="27:48" pos:end="27:48">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:10">r2</name> <operator pos:start="35:12" pos:end="35:12">&amp;</operator> <literal type="number" pos:start="35:14" pos:end="35:16">0x1</literal></expr>)</condition> <block pos:start="35:19" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:17">

        <expr_stmt pos:start="37:9" pos:end="37:53"><expr pos:start="37:9" pos:end="37:52"><call pos:start="37:9" pos:end="37:52"><name pos:start="37:9" pos:end="37:25">program_interrupt</name><argument_list pos:start="37:26" pos:end="37:52">(<argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">env</name></expr></argument>, <argument pos:start="37:32" pos:end="37:48"><expr pos:start="37:32" pos:end="37:48"><name pos:start="37:32" pos:end="37:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="37:51" pos:end="37:51"><expr pos:start="37:51" pos:end="37:51"><literal type="number" pos:start="37:51" pos:end="37:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:6">fh</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <name pos:start="45:10" pos:end="45:22"><name pos:start="45:10" pos:end="45:12">env</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:18">regs</name><index pos:start="45:19" pos:end="45:22">[<expr pos:start="45:20" pos:end="45:21"><name pos:start="45:20" pos:end="45:21">r2</name></expr>]</index></name> <operator pos:start="45:24" pos:end="45:25">&gt;&gt;</operator> <literal type="number" pos:start="45:27" pos:end="45:28">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:9">pcias</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:26"><name pos:start="47:14" pos:end="47:16">env</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:22">regs</name><index pos:start="47:23" pos:end="47:26">[<expr pos:start="47:24" pos:end="47:25"><name pos:start="47:24" pos:end="47:25">r2</name></expr>]</index></name> <operator pos:start="47:28" pos:end="47:29">&gt;&gt;</operator> <literal type="number" pos:start="47:31" pos:end="47:32">16</literal><operator pos:start="47:33" pos:end="47:33">)</operator> <operator pos:start="47:35" pos:end="47:35">&amp;</operator> <literal type="number" pos:start="47:37" pos:end="47:39">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:7">len</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <name pos:start="49:11" pos:end="49:23"><name pos:start="49:11" pos:end="49:13">env</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:19">regs</name><index pos:start="49:20" pos:end="49:23">[<expr pos:start="49:21" pos:end="49:22"><name pos:start="49:21" pos:end="49:22">r2</name></expr>]</index></name> <operator pos:start="49:25" pos:end="49:25">&amp;</operator> <literal type="number" pos:start="49:27" pos:end="49:29">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:10">offset</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <name pos:start="51:14" pos:end="51:30"><name pos:start="51:14" pos:end="51:16">env</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:22">regs</name><index pos:start="51:23" pos:end="51:30">[<expr pos:start="51:24" pos:end="51:29"><name pos:start="51:24" pos:end="51:25">r2</name> <operator pos:start="51:27" pos:end="51:27">+</operator> <literal type="number" pos:start="51:29" pos:end="51:29">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:9">pbdev</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <call pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:35">s390_pci_find_dev_by_fh</name><argument_list pos:start="55:36" pos:end="55:39">(<argument pos:start="55:37" pos:end="55:38"><expr pos:start="55:37" pos:end="55:38"><name pos:start="55:37" pos:end="55:38">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:15">(<expr pos:start="57:9" pos:end="57:14"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:14">pbdev</name></expr>)</condition> <block pos:start="57:17" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:17">

        <expr_stmt pos:start="59:9" pos:end="59:39"><expr pos:start="59:9" pos:end="59:38"><call pos:start="59:9" pos:end="59:38"><name pos:start="59:9" pos:end="59:15">DPRINTF</name><argument_list pos:start="59:16" pos:end="59:38">(<argument pos:start="59:17" pos:end="59:37"><expr pos:start="59:17" pos:end="59:37"><literal type="string" pos:start="59:17" pos:end="59:37">"pcistg no pci dev\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><call pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:13">setcc</name><argument_list pos:start="61:14" pos:end="61:44">(<argument pos:start="61:15" pos:end="61:17"><expr pos:start="61:15" pos:end="61:17"><name pos:start="61:15" pos:end="61:17">cpu</name></expr></argument>, <argument pos:start="61:20" pos:end="61:43"><expr pos:start="61:20" pos:end="61:43"><name pos:start="61:20" pos:end="61:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="69:5" pos:end="95:5">switch <condition pos:start="69:12" pos:end="69:25">(<expr pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:17">pbdev</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:24">state</name></name></expr>)</condition> <block pos:start="69:27" pos:end="95:5">{<block_content pos:start="71:5" pos:end="93:14">

    <case pos:start="71:5" pos:end="71:26">case <expr pos:start="71:10" pos:end="71:25"><name pos:start="71:10" pos:end="71:25">ZPCI_FS_RESERVED</name></expr>:</case>

    <case pos:start="73:5" pos:end="73:25">case <expr pos:start="73:10" pos:end="73:24"><name pos:start="73:10" pos:end="73:24">ZPCI_FS_STANDBY</name></expr>:</case>

    <case pos:start="75:5" pos:end="75:26">case <expr pos:start="75:10" pos:end="75:25"><name pos:start="75:10" pos:end="75:25">ZPCI_FS_DISABLED</name></expr>:</case>

    <case pos:start="77:5" pos:end="77:33">case <expr pos:start="77:10" pos:end="77:32"><name pos:start="77:10" pos:end="77:32">ZPCI_FS_PERMANENT_ERROR</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:45"><expr pos:start="79:9" pos:end="79:44"><call pos:start="79:9" pos:end="79:44"><name pos:start="79:9" pos:end="79:13">setcc</name><argument_list pos:start="79:14" pos:end="79:44">(<argument pos:start="79:15" pos:end="79:17"><expr pos:start="79:15" pos:end="79:17"><name pos:start="79:15" pos:end="79:17">cpu</name></expr></argument>, <argument pos:start="79:20" pos:end="79:43"><expr pos:start="79:20" pos:end="79:43"><name pos:start="79:20" pos:end="79:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:17">return <expr pos:start="81:16" pos:end="81:16"><literal type="number" pos:start="81:16" pos:end="81:16">0</literal></expr>;</return>

    <case pos:start="83:5" pos:end="83:23">case <expr pos:start="83:10" pos:end="83:22"><name pos:start="83:10" pos:end="83:22">ZPCI_FS_ERROR</name></expr>:</case>

        <expr_stmt pos:start="85:9" pos:end="85:36"><expr pos:start="85:9" pos:end="85:35"><call pos:start="85:9" pos:end="85:35"><name pos:start="85:9" pos:end="85:13">setcc</name><argument_list pos:start="85:14" pos:end="85:35">(<argument pos:start="85:15" pos:end="85:17"><expr pos:start="85:15" pos:end="85:17"><name pos:start="85:15" pos:end="85:17">cpu</name></expr></argument>, <argument pos:start="85:20" pos:end="85:34"><expr pos:start="85:20" pos:end="85:34"><name pos:start="85:20" pos:end="85:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:59"><expr pos:start="87:9" pos:end="87:58"><call pos:start="87:9" pos:end="87:58"><name pos:start="87:9" pos:end="87:28">s390_set_status_code</name><argument_list pos:start="87:29" pos:end="87:58">(<argument pos:start="87:30" pos:end="87:32"><expr pos:start="87:30" pos:end="87:32"><name pos:start="87:30" pos:end="87:32">env</name></expr></argument>, <argument pos:start="87:35" pos:end="87:36"><expr pos:start="87:35" pos:end="87:36"><name pos:start="87:35" pos:end="87:36">r2</name></expr></argument>, <argument pos:start="87:39" pos:end="87:57"><expr pos:start="87:39" pos:end="87:57"><name pos:start="87:39" pos:end="87:57">ZPCI_PCI_ST_BLOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:17">return <expr pos:start="89:16" pos:end="89:16"><literal type="number" pos:start="89:16" pos:end="89:16">0</literal></expr>;</return>

    <default pos:start="91:5" pos:end="91:12">default:</default>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="99:5" pos:end="99:25"><expr pos:start="99:5" pos:end="99:24"><name pos:start="99:5" pos:end="99:8">data</name> <operator pos:start="99:10" pos:end="99:10">=</operator> <name pos:start="99:12" pos:end="99:24"><name pos:start="99:12" pos:end="99:14">env</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:20">regs</name><index pos:start="99:21" pos:end="99:24">[<expr pos:start="99:22" pos:end="99:23"><name pos:start="99:22" pos:end="99:23">r1</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="193:5"><if pos:start="101:5" pos:end="133:5">if <condition pos:start="101:8" pos:end="101:18">(<expr pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:13">pcias</name> <operator pos:start="101:15" pos:end="101:15">&lt;</operator> <literal type="number" pos:start="101:17" pos:end="101:17">6</literal></expr>)</condition> <block pos:start="101:20" pos:end="133:5">{<block_content pos:start="103:9" pos:end="131:61">

        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:39">(<expr pos:start="103:13" pos:end="103:38"><operator pos:start="103:13" pos:end="103:13">(</operator><literal type="number" pos:start="103:14" pos:end="103:16">8</literal> <operator pos:start="103:16" pos:end="103:16">-</operator> <operator pos:start="103:18" pos:end="103:18">(</operator><name pos:start="103:19" pos:end="103:24">offset</name> <operator pos:start="103:26" pos:end="103:26">&amp;</operator> <literal type="number" pos:start="103:28" pos:end="103:30">0x7</literal><operator pos:start="103:31" pos:end="103:31">)</operator><operator pos:start="103:32" pos:end="103:32">)</operator> <operator pos:start="103:34" pos:end="103:34">&lt;</operator> <name pos:start="103:36" pos:end="103:38">len</name></expr>)</condition> <block pos:start="103:41" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:21">

            <expr_stmt pos:start="105:13" pos:end="105:51"><expr pos:start="105:13" pos:end="105:50"><call pos:start="105:13" pos:end="105:50"><name pos:start="105:13" pos:end="105:29">program_interrupt</name><argument_list pos:start="105:30" pos:end="105:50">(<argument pos:start="105:31" pos:end="105:33"><expr pos:start="105:31" pos:end="105:33"><name pos:start="105:31" pos:end="105:33">env</name></expr></argument>, <argument pos:start="105:36" pos:end="105:46"><expr pos:start="105:36" pos:end="105:46"><name pos:start="105:36" pos:end="105:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="105:49" pos:end="105:49"><expr pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:21">return <expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="113:9" pos:end="125:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:44">(<expr pos:start="113:13" pos:end="113:43"><call pos:start="113:13" pos:end="113:43"><name pos:start="113:13" pos:end="113:21">trap_msix</name><argument_list pos:start="113:22" pos:end="113:43">(<argument pos:start="113:23" pos:end="113:27"><expr pos:start="113:23" pos:end="113:27"><name pos:start="113:23" pos:end="113:27">pbdev</name></expr></argument>, <argument pos:start="113:30" pos:end="113:35"><expr pos:start="113:30" pos:end="113:35"><name pos:start="113:30" pos:end="113:35">offset</name></expr></argument>, <argument pos:start="113:38" pos:end="113:42"><expr pos:start="113:38" pos:end="113:42"><name pos:start="113:38" pos:end="113:42">pcias</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:46" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:66">

            <expr_stmt pos:start="115:13" pos:end="115:55"><expr pos:start="115:13" pos:end="115:54"><name pos:start="115:13" pos:end="115:18">offset</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <name pos:start="115:22" pos:end="115:27">offset</name> <operator pos:start="115:29" pos:end="115:29">-</operator> <name pos:start="115:31" pos:end="115:54"><name pos:start="115:31" pos:end="115:35">pbdev</name><operator pos:start="115:36" pos:end="115:37">-&gt;</operator><name pos:start="115:38" pos:end="115:41">msix</name><operator pos:start="115:42" pos:end="115:42">.</operator><name pos:start="115:43" pos:end="115:54">table_offset</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:47"><expr pos:start="117:13" pos:end="117:46"><name pos:start="117:13" pos:end="117:14">mr</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <operator pos:start="117:18" pos:end="117:18">&amp;</operator><name pos:start="117:19" pos:end="117:46"><name pos:start="117:19" pos:end="117:23">pbdev</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:29">pdev</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:46">msix_table_mmio</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:66"><expr pos:start="119:13" pos:end="119:65"><call pos:start="119:13" pos:end="119:65"><name pos:start="119:13" pos:end="119:38">update_msix_table_msg_data</name><argument_list pos:start="119:39" pos:end="119:65">(<argument pos:start="119:40" pos:end="119:44"><expr pos:start="119:40" pos:end="119:44"><name pos:start="119:40" pos:end="119:44">pbdev</name></expr></argument>, <argument pos:start="119:47" pos:end="119:52"><expr pos:start="119:47" pos:end="119:52"><name pos:start="119:47" pos:end="119:52">offset</name></expr></argument>, <argument pos:start="119:55" pos:end="119:59"><expr pos:start="119:55" pos:end="119:59"><operator pos:start="119:55" pos:end="119:55">&amp;</operator><name pos:start="119:56" pos:end="119:59">data</name></expr></argument>, <argument pos:start="119:62" pos:end="119:64"><expr pos:start="119:62" pos:end="119:64"><name pos:start="119:62" pos:end="119:64">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="125:9">else <block pos:start="121:16" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:55">

            <expr_stmt pos:start="123:13" pos:end="123:55"><expr pos:start="123:13" pos:end="123:54"><name pos:start="123:13" pos:end="123:14">mr</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <name pos:start="123:18" pos:end="123:47"><name pos:start="123:18" pos:end="123:22">pbdev</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:28">pdev</name><operator pos:start="123:29" pos:end="123:30">-&gt;</operator><name pos:start="123:31" pos:end="123:40">io_regions</name><index pos:start="123:41" pos:end="123:47">[<expr pos:start="123:42" pos:end="123:46"><name pos:start="123:42" pos:end="123:46">pcias</name></expr>]</index></name><operator pos:start="123:48" pos:end="123:48">.</operator><name pos:start="123:49" pos:end="123:54">memory</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="131:61"><expr pos:start="129:9" pos:end="131:60"><call pos:start="129:9" pos:end="131:60"><name pos:start="129:9" pos:end="129:36">memory_region_dispatch_write</name><argument_list pos:start="129:37" pos:end="131:60">(<argument pos:start="129:38" pos:end="129:39"><expr pos:start="129:38" pos:end="129:39"><name pos:start="129:38" pos:end="129:39">mr</name></expr></argument>, <argument pos:start="129:42" pos:end="129:47"><expr pos:start="129:42" pos:end="129:47"><name pos:start="129:42" pos:end="129:47">offset</name></expr></argument>, <argument pos:start="129:50" pos:end="129:53"><expr pos:start="129:50" pos:end="129:53"><name pos:start="129:50" pos:end="129:53">data</name></expr></argument>, <argument pos:start="129:56" pos:end="129:58"><expr pos:start="129:56" pos:end="129:58"><name pos:start="129:56" pos:end="129:58">len</name></expr></argument>,

                                     <argument pos:start="131:38" pos:end="131:59"><expr pos:start="131:38" pos:end="131:59"><name pos:start="131:38" pos:end="131:59">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="133:7" pos:end="183:5">else if <condition pos:start="133:15" pos:end="133:27">(<expr pos:start="133:16" pos:end="133:26"><name pos:start="133:16" pos:end="133:20">pcias</name> <operator pos:start="133:22" pos:end="133:23">==</operator> <literal type="number" pos:start="133:25" pos:end="133:26">15</literal></expr>)</condition> <block pos:start="133:29" pos:end="183:5">{<block_content pos:start="135:9" pos:end="181:48">

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:39">(<expr pos:start="135:13" pos:end="135:38"><operator pos:start="135:13" pos:end="135:13">(</operator><literal type="number" pos:start="135:14" pos:end="135:16">4</literal> <operator pos:start="135:16" pos:end="135:16">-</operator> <operator pos:start="135:18" pos:end="135:18">(</operator><name pos:start="135:19" pos:end="135:24">offset</name> <operator pos:start="135:26" pos:end="135:26">&amp;</operator> <literal type="number" pos:start="135:28" pos:end="135:30">0x3</literal><operator pos:start="135:31" pos:end="135:31">)</operator><operator pos:start="135:32" pos:end="135:32">)</operator> <operator pos:start="135:34" pos:end="135:34">&lt;</operator> <name pos:start="135:36" pos:end="135:38">len</name></expr>)</condition> <block pos:start="135:41" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:21">

            <expr_stmt pos:start="137:13" pos:end="137:51"><expr pos:start="137:13" pos:end="137:50"><call pos:start="137:13" pos:end="137:50"><name pos:start="137:13" pos:end="137:29">program_interrupt</name><argument_list pos:start="137:30" pos:end="137:50">(<argument pos:start="137:31" pos:end="137:33"><expr pos:start="137:31" pos:end="137:33"><name pos:start="137:31" pos:end="137:33">env</name></expr></argument>, <argument pos:start="137:36" pos:end="137:46"><expr pos:start="137:36" pos:end="137:46"><name pos:start="137:36" pos:end="137:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="137:49" pos:end="137:49"><expr pos:start="137:49" pos:end="137:49"><literal type="number" pos:start="137:49" pos:end="137:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="139:13" pos:end="139:21">return <expr pos:start="139:20" pos:end="139:20"><literal type="number" pos:start="139:20" pos:end="139:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="143:9" pos:end="173:9">switch <condition pos:start="143:16" pos:end="143:20">(<expr pos:start="143:17" pos:end="143:19"><name pos:start="143:17" pos:end="143:19">len</name></expr>)</condition> <block pos:start="143:22" pos:end="173:9">{<block_content pos:start="145:9" pos:end="171:21">

        <case pos:start="145:9" pos:end="145:15">case <expr pos:start="145:14" pos:end="145:14"><literal type="number" pos:start="145:14" pos:end="145:14">1</literal></expr>:</case>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <case pos:start="149:9" pos:end="149:15">case <expr pos:start="149:14" pos:end="149:14"><literal type="number" pos:start="149:14" pos:end="149:14">2</literal></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:33"><expr pos:start="151:13" pos:end="151:32"><name pos:start="151:13" pos:end="151:16">data</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <call pos:start="151:20" pos:end="151:32"><name pos:start="151:20" pos:end="151:26">bswap16</name><argument_list pos:start="151:27" pos:end="151:32">(<argument pos:start="151:28" pos:end="151:31"><expr pos:start="151:28" pos:end="151:31"><name pos:start="151:28" pos:end="151:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        <case pos:start="155:9" pos:end="155:15">case <expr pos:start="155:14" pos:end="155:14"><literal type="number" pos:start="155:14" pos:end="155:14">4</literal></expr>:</case>

            <expr_stmt pos:start="157:13" pos:end="157:33"><expr pos:start="157:13" pos:end="157:32"><name pos:start="157:13" pos:end="157:16">data</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <call pos:start="157:20" pos:end="157:32"><name pos:start="157:20" pos:end="157:26">bswap32</name><argument_list pos:start="157:27" pos:end="157:32">(<argument pos:start="157:28" pos:end="157:31"><expr pos:start="157:28" pos:end="157:31"><name pos:start="157:28" pos:end="157:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="159:13" pos:end="159:18">break;</break>

        <case pos:start="161:9" pos:end="161:15">case <expr pos:start="161:14" pos:end="161:14"><literal type="number" pos:start="161:14" pos:end="161:14">8</literal></expr>:</case>

            <expr_stmt pos:start="163:13" pos:end="163:33"><expr pos:start="163:13" pos:end="163:32"><name pos:start="163:13" pos:end="163:16">data</name> <operator pos:start="163:18" pos:end="163:18">=</operator> <call pos:start="163:20" pos:end="163:32"><name pos:start="163:20" pos:end="163:26">bswap64</name><argument_list pos:start="163:27" pos:end="163:32">(<argument pos:start="163:28" pos:end="163:31"><expr pos:start="163:28" pos:end="163:31"><name pos:start="163:28" pos:end="163:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <default pos:start="167:9" pos:end="167:16">default:</default>

            <expr_stmt pos:start="169:13" pos:end="169:51"><expr pos:start="169:13" pos:end="169:50"><call pos:start="169:13" pos:end="169:50"><name pos:start="169:13" pos:end="169:29">program_interrupt</name><argument_list pos:start="169:30" pos:end="169:50">(<argument pos:start="169:31" pos:end="169:33"><expr pos:start="169:31" pos:end="169:33"><name pos:start="169:31" pos:end="169:33">env</name></expr></argument>, <argument pos:start="169:36" pos:end="169:46"><expr pos:start="169:36" pos:end="169:46"><name pos:start="169:36" pos:end="169:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="169:49" pos:end="169:49"><expr pos:start="169:49" pos:end="169:49"><literal type="number" pos:start="169:49" pos:end="169:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="171:13" pos:end="171:21">return <expr pos:start="171:20" pos:end="171:20"><literal type="number" pos:start="171:20" pos:end="171:20">0</literal></expr>;</return>

        </block_content>}</block></switch>



        <expr_stmt pos:start="177:9" pos:end="181:48"><expr pos:start="177:9" pos:end="181:47"><call pos:start="177:9" pos:end="181:47"><name pos:start="177:9" pos:end="177:36">pci_host_config_write_common</name><argument_list pos:start="177:37" pos:end="181:47">(<argument pos:start="177:38" pos:end="177:48"><expr pos:start="177:38" pos:end="177:48"><name pos:start="177:38" pos:end="177:48"><name pos:start="177:38" pos:end="177:42">pbdev</name><operator pos:start="177:43" pos:end="177:44">-&gt;</operator><name pos:start="177:45" pos:end="177:48">pdev</name></name></expr></argument>, <argument pos:start="177:51" pos:end="177:56"><expr pos:start="177:51" pos:end="177:56"><name pos:start="177:51" pos:end="177:56">offset</name></expr></argument>,

                                     <argument pos:start="179:38" pos:end="179:65"><expr pos:start="179:38" pos:end="179:65"><call pos:start="179:38" pos:end="179:65"><name pos:start="179:38" pos:end="179:52">pci_config_size</name><argument_list pos:start="179:53" pos:end="179:65">(<argument pos:start="179:54" pos:end="179:64"><expr pos:start="179:54" pos:end="179:64"><name pos:start="179:54" pos:end="179:64"><name pos:start="179:54" pos:end="179:58">pbdev</name><operator pos:start="179:59" pos:end="179:60">-&gt;</operator><name pos:start="179:61" pos:end="179:64">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="181:38" pos:end="181:41"><expr pos:start="181:38" pos:end="181:41"><name pos:start="181:38" pos:end="181:41">data</name></expr></argument>, <argument pos:start="181:44" pos:end="181:46"><expr pos:start="181:44" pos:end="181:46"><name pos:start="181:44" pos:end="181:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="193:5">else <block pos:start="183:12" pos:end="193:5">{<block_content pos:start="185:9" pos:end="191:17">

        <expr_stmt pos:start="185:9" pos:end="185:42"><expr pos:start="185:9" pos:end="185:41"><call pos:start="185:9" pos:end="185:41"><name pos:start="185:9" pos:end="185:15">DPRINTF</name><argument_list pos:start="185:16" pos:end="185:41">(<argument pos:start="185:17" pos:end="185:40"><expr pos:start="185:17" pos:end="185:40"><literal type="string" pos:start="185:17" pos:end="185:40">"pcistg invalid space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:36"><expr pos:start="187:9" pos:end="187:35"><call pos:start="187:9" pos:end="187:35"><name pos:start="187:9" pos:end="187:13">setcc</name><argument_list pos:start="187:14" pos:end="187:35">(<argument pos:start="187:15" pos:end="187:17"><expr pos:start="187:15" pos:end="187:17"><name pos:start="187:15" pos:end="187:17">cpu</name></expr></argument>, <argument pos:start="187:20" pos:end="187:34"><expr pos:start="187:20" pos:end="187:34"><name pos:start="187:20" pos:end="187:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:60"><expr pos:start="189:9" pos:end="189:59"><call pos:start="189:9" pos:end="189:59"><name pos:start="189:9" pos:end="189:28">s390_set_status_code</name><argument_list pos:start="189:29" pos:end="189:59">(<argument pos:start="189:30" pos:end="189:32"><expr pos:start="189:30" pos:end="189:32"><name pos:start="189:30" pos:end="189:32">env</name></expr></argument>, <argument pos:start="189:35" pos:end="189:36"><expr pos:start="189:35" pos:end="189:36"><name pos:start="189:35" pos:end="189:36">r2</name></expr></argument>, <argument pos:start="189:39" pos:end="189:58"><expr pos:start="189:39" pos:end="189:58"><name pos:start="189:39" pos:end="189:58">ZPCI_PCI_ST_INVAL_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="191:9" pos:end="191:17">return <expr pos:start="191:16" pos:end="191:16"><literal type="number" pos:start="191:16" pos:end="191:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:31"><expr pos:start="197:5" pos:end="197:30"><call pos:start="197:5" pos:end="197:30"><name pos:start="197:5" pos:end="197:9">setcc</name><argument_list pos:start="197:10" pos:end="197:30">(<argument pos:start="197:11" pos:end="197:13"><expr pos:start="197:11" pos:end="197:13"><name pos:start="197:11" pos:end="197:13">cpu</name></expr></argument>, <argument pos:start="197:16" pos:end="197:29"><expr pos:start="197:16" pos:end="197:29"><name pos:start="197:16" pos:end="197:29">ZPCI_PCI_LS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="199:5" pos:end="199:13">return <expr pos:start="199:12" pos:end="199:12"><literal type="number" pos:start="199:12" pos:end="199:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
