<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3816.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mirror_iteration_done</name><parameter_list pos:start="1:34" pos:end="1:56">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:42">MirrorOp</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">op</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:55"><decl pos:start="1:49" pos:end="1:55"><type pos:start="1:49" pos:end="1:55"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:55">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MirrorBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:29">= <expr pos:start="5:25" pos:end="5:29"><name pos:start="5:25" pos:end="5:29"><name pos:start="5:25" pos:end="5:26">op</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:16">iovec</name></name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:21">chunk_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:20">nb_chunks</name></decl>, <decl pos:start="11:23" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:23" pos:end="11:39">sectors_per_chunk</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="17:72"><expr pos:start="15:5" pos:end="17:71"><call pos:start="15:5" pos:end="17:71"><name pos:start="15:5" pos:end="15:31">trace_mirror_iteration_done</name><argument_list pos:start="15:32" pos:end="17:71">(<argument pos:start="15:33" pos:end="15:33"><expr pos:start="15:33" pos:end="15:33"><name pos:start="15:33" pos:end="15:33">s</name></expr></argument>, <argument pos:start="15:36" pos:end="15:68"><expr pos:start="15:36" pos:end="15:68"><name pos:start="15:36" pos:end="15:49"><name pos:start="15:36" pos:end="15:37">op</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:49">sector_num</name></name> <operator pos:start="15:51" pos:end="15:51">*</operator> <name pos:start="15:53" pos:end="15:68">BDRV_SECTOR_SIZE</name></expr></argument>,

                                <argument pos:start="17:33" pos:end="17:65"><expr pos:start="17:33" pos:end="17:65"><name pos:start="17:33" pos:end="17:46"><name pos:start="17:33" pos:end="17:34">op</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:46">nb_sectors</name></name> <operator pos:start="17:48" pos:end="17:48">*</operator> <name pos:start="17:50" pos:end="17:65">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="17:68" pos:end="17:70"><expr pos:start="17:68" pos:end="17:70"><name pos:start="17:68" pos:end="17:70">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:19"><expr pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:16">in_flight</name></name><operator pos:start="21:17" pos:end="21:18">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:43"><expr pos:start="23:5" pos:end="23:42"><name pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:24">sectors_in_flight</name></name> <operator pos:start="23:26" pos:end="23:27">-=</operator> <name pos:start="23:29" pos:end="23:42"><name pos:start="23:29" pos:end="23:30">op</name><operator pos:start="23:31" pos:end="23:32">-&gt;</operator><name pos:start="23:33" pos:end="23:42">nb_sectors</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:7">iov</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:22"><name pos:start="25:11" pos:end="25:12">op</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:18">qiov</name><operator pos:start="25:19" pos:end="25:19">.</operator><name pos:start="25:20" pos:end="25:22">iov</name></name></expr>;</expr_stmt>

    <for pos:start="27:5" pos:end="35:5">for <control pos:start="27:9" pos:end="27:39">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:34"><expr pos:start="27:17" pos:end="27:33"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:33"><name pos:start="27:21" pos:end="27:22">op</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:28">qiov</name><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:33">niov</name></name></expr>;</condition> <incr pos:start="27:36" pos:end="27:38"><expr pos:start="27:36" pos:end="27:38"><name pos:start="27:36" pos:end="27:36">i</name><operator pos:start="27:37" pos:end="27:38">++</operator></expr></incr>)</control> <block pos:start="27:41" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:28">

        <decl_stmt pos:start="29:9" pos:end="29:61"><decl pos:start="29:9" pos:end="29:60"><type pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:20">MirrorBuffer</name> <modifier pos:start="29:22" pos:end="29:22">*</modifier></type><name pos:start="29:23" pos:end="29:25">buf</name> <init pos:start="29:27" pos:end="29:60">= <expr pos:start="29:29" pos:end="29:60"><operator pos:start="29:29" pos:end="29:29">(</operator><name pos:start="29:30" pos:end="29:41">MirrorBuffer</name> <operator pos:start="29:43" pos:end="29:43">*</operator><operator pos:start="29:44" pos:end="29:44">)</operator> <name pos:start="29:46" pos:end="29:51"><name pos:start="29:46" pos:end="29:48">iov</name><index pos:start="29:49" pos:end="29:51">[<expr pos:start="29:50" pos:end="29:50"><name pos:start="29:50" pos:end="29:50">i</name></expr>]</index></name><operator pos:start="29:52" pos:end="29:52">.</operator><name pos:start="29:53" pos:end="29:60">iov_base</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:54"><expr pos:start="31:9" pos:end="31:53"><call pos:start="31:9" pos:end="31:53"><name pos:start="31:9" pos:end="31:28">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="31:29" pos:end="31:53">(<argument pos:start="31:30" pos:end="31:41"><expr pos:start="31:30" pos:end="31:41"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:41"><name pos:start="31:31" pos:end="31:31">s</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:41">buf_free</name></name></expr></argument>, <argument pos:start="31:44" pos:end="31:46"><expr pos:start="31:44" pos:end="31:46"><name pos:start="31:44" pos:end="31:46">buf</name></expr></argument>, <argument pos:start="31:49" pos:end="31:52"><expr pos:start="31:49" pos:end="31:52"><name pos:start="31:49" pos:end="31:52">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:28"><expr pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:25">buf_free_count</name></name><operator pos:start="33:26" pos:end="33:27">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="39:5" pos:end="39:59"><expr pos:start="39:5" pos:end="39:58"><name pos:start="39:5" pos:end="39:21">sectors_per_chunk</name> <operator pos:start="39:23" pos:end="39:23">=</operator> <name pos:start="39:25" pos:end="39:38"><name pos:start="39:25" pos:end="39:25">s</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:38">granularity</name></name> <operator pos:start="39:40" pos:end="39:41">&gt;&gt;</operator> <name pos:start="39:43" pos:end="39:58">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:51"><expr pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:13">chunk_num</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:18">op</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:30">sector_num</name></name> <operator pos:start="41:32" pos:end="41:32">/</operator> <name pos:start="41:34" pos:end="41:50">sectors_per_chunk</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:64"><expr pos:start="43:5" pos:end="43:63"><name pos:start="43:5" pos:end="43:13">nb_chunks</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:63"><name pos:start="43:17" pos:end="43:28">DIV_ROUND_UP</name><argument_list pos:start="43:29" pos:end="43:63">(<argument pos:start="43:30" pos:end="43:43"><expr pos:start="43:30" pos:end="43:43"><name pos:start="43:30" pos:end="43:43"><name pos:start="43:30" pos:end="43:31">op</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:43">nb_sectors</name></name></expr></argument>, <argument pos:start="43:46" pos:end="43:62"><expr pos:start="43:46" pos:end="43:62"><name pos:start="43:46" pos:end="43:62">sectors_per_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:60"><expr pos:start="45:5" pos:end="45:59"><call pos:start="45:5" pos:end="45:59"><name pos:start="45:5" pos:end="45:16">bitmap_clear</name><argument_list pos:start="45:17" pos:end="45:59">(<argument pos:start="45:18" pos:end="45:36"><expr pos:start="45:18" pos:end="45:36"><name pos:start="45:18" pos:end="45:36"><name pos:start="45:18" pos:end="45:18">s</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:36">in_flight_bitmap</name></name></expr></argument>, <argument pos:start="45:39" pos:end="45:47"><expr pos:start="45:39" pos:end="45:47"><name pos:start="45:39" pos:end="45:47">chunk_num</name></expr></argument>, <argument pos:start="45:50" pos:end="45:58"><expr pos:start="45:50" pos:end="45:58"><name pos:start="45:50" pos:end="45:58">nb_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="61:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:14">&gt;=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>)</condition> <block pos:start="47:19" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:9">

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:26">(<expr pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:25">cow_bitmap</name></name></expr>)</condition> <block pos:start="49:28" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:60">

            <expr_stmt pos:start="51:13" pos:end="51:60"><expr pos:start="51:13" pos:end="51:59"><call pos:start="51:13" pos:end="51:59"><name pos:start="51:13" pos:end="51:22">bitmap_set</name><argument_list pos:start="51:23" pos:end="51:59">(<argument pos:start="51:24" pos:end="51:36"><expr pos:start="51:24" pos:end="51:36"><name pos:start="51:24" pos:end="51:36"><name pos:start="51:24" pos:end="51:24">s</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:36">cow_bitmap</name></name></expr></argument>, <argument pos:start="51:39" pos:end="51:47"><expr pos:start="51:39" pos:end="51:47"><name pos:start="51:39" pos:end="51:47">chunk_num</name></expr></argument>, <argument pos:start="51:50" pos:end="51:58"><expr pos:start="51:50" pos:end="51:58"><name pos:start="51:50" pos:end="51:58">nb_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:40">(<expr pos:start="55:13" pos:end="55:39"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:39"><name pos:start="55:14" pos:end="55:14">s</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:39">initial_zeroing_ongoing</name></name></expr>)</condition> <block pos:start="55:42" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:76">

            <expr_stmt pos:start="57:13" pos:end="57:76"><expr pos:start="57:13" pos:end="57:75"><name pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:21">common</name><operator pos:start="57:22" pos:end="57:22">.</operator><name pos:start="57:23" pos:end="57:28">offset</name></name> <operator pos:start="57:30" pos:end="57:31">+=</operator> <operator pos:start="57:33" pos:end="57:33">(</operator><name pos:start="57:34" pos:end="57:41">uint64_t</name><operator pos:start="57:42" pos:end="57:42">)</operator><name pos:start="57:43" pos:end="57:56"><name pos:start="57:43" pos:end="57:44">op</name><operator pos:start="57:45" pos:end="57:46">-&gt;</operator><name pos:start="57:47" pos:end="57:56">nb_sectors</name></name> <operator pos:start="57:58" pos:end="57:58">*</operator> <name pos:start="57:60" pos:end="57:75">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:34"><expr pos:start="63:5" pos:end="63:33"><call pos:start="63:5" pos:end="63:33"><name pos:start="63:5" pos:end="63:22">qemu_iovec_destroy</name><argument_list pos:start="63:23" pos:end="63:33">(<argument pos:start="63:24" pos:end="63:32"><expr pos:start="63:24" pos:end="63:32"><operator pos:start="63:24" pos:end="63:24">&amp;</operator><name pos:start="63:25" pos:end="63:32"><name pos:start="63:25" pos:end="63:26">op</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:32">qiov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:15"><expr pos:start="65:5" pos:end="65:14"><call pos:start="65:5" pos:end="65:14"><name pos:start="65:5" pos:end="65:10">g_free</name><argument_list pos:start="65:11" pos:end="65:14">(<argument pos:start="65:12" pos:end="65:13"><expr pos:start="65:12" pos:end="65:13"><name pos:start="65:12" pos:end="65:13">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:26">(<expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:25">waiting_for_io</name></name></expr>)</condition> <block pos:start="69:28" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:43">

        <expr_stmt pos:start="71:9" pos:end="71:43"><expr pos:start="71:9" pos:end="71:42"><call pos:start="71:9" pos:end="71:42"><name pos:start="71:9" pos:end="71:28">qemu_coroutine_enter</name><argument_list pos:start="71:29" pos:end="71:42">(<argument pos:start="71:30" pos:end="71:41"><expr pos:start="71:30" pos:end="71:41"><name pos:start="71:30" pos:end="71:41"><name pos:start="71:30" pos:end="71:30">s</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:38">common</name><operator pos:start="71:39" pos:end="71:39">.</operator><name pos:start="71:40" pos:end="71:41">co</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
