<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24278.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:40"><name pos:start="1:1" pos:end="1:17">mips_mipssim_init</name><argument_list pos:start="1:18" pos:end="1:40">(<argument pos:start="1:19" pos:end="1:39">MachineState *machine</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:5" pos:end="191:56">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:58"><decl pos:start="17:5" pos:end="17:57"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:35">address_space_mem</name> <init pos:start="17:37" pos:end="17:57">= <expr pos:start="17:39" pos:end="17:57"><call pos:start="17:39" pos:end="17:57"><name pos:start="17:39" pos:end="17:55">get_system_memory</name><argument_list pos:start="17:56" pos:end="17:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">isa</name> <init pos:start="19:23" pos:end="19:46">= <expr pos:start="19:25" pos:end="19:46"><call pos:start="19:25" pos:end="19:46"><name pos:start="19:25" pos:end="19:29">g_new</name><argument_list pos:start="19:30" pos:end="19:46">(<argument pos:start="19:31" pos:end="19:42"><expr pos:start="19:31" pos:end="19:42"><name pos:start="19:31" pos:end="19:42">MemoryRegion</name></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:46"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">ram</name> <init pos:start="21:23" pos:end="21:46">= <expr pos:start="21:25" pos:end="21:46"><call pos:start="21:25" pos:end="21:46"><name pos:start="21:25" pos:end="21:29">g_new</name><argument_list pos:start="21:30" pos:end="21:46">(<argument pos:start="21:31" pos:end="21:42"><expr pos:start="21:31" pos:end="21:42"><name pos:start="21:31" pos:end="21:42">MemoryRegion</name></expr></argument>, <argument pos:start="21:45" pos:end="21:45"><expr pos:start="21:45" pos:end="21:45"><literal type="number" pos:start="21:45" pos:end="21:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:48"><decl pos:start="23:5" pos:end="23:47"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:22">bios</name> <init pos:start="23:24" pos:end="23:47">= <expr pos:start="23:26" pos:end="23:47"><call pos:start="23:26" pos:end="23:47"><name pos:start="23:26" pos:end="23:30">g_new</name><argument_list pos:start="23:31" pos:end="23:47">(<argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43">MemoryRegion</name></expr></argument>, <argument pos:start="23:46" pos:end="23:46"><expr pos:start="23:46" pos:end="23:46"><literal type="number" pos:start="23:46" pos:end="23:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">MIPSCPU</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">CPUMIPSState</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:13">ResetData</name> <modifier pos:start="29:15" pos:end="29:15">*</modifier></type><name pos:start="29:16" pos:end="29:25">reset_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:18"><decl pos:start="31:5" pos:end="31:17"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:17">bios_size</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:20">/* Init CPUs. */</comment>

    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="49:5">if <condition pos:start="37:8" pos:end="37:26">(<expr pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:20">==</operator> <name pos:start="37:22" pos:end="37:25">NULL</name></expr>)</condition> <block pos:start="37:28" pos:end="49:5">{<block_content pos:start="41:9" pos:end="48:0">

<cpp:ifdef pos:start="39:1" pos:end="39:20">#<cpp:directive pos:start="39:2" pos:end="39:6">ifdef</cpp:directive> <name pos:start="39:8" pos:end="39:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="41:9" pos:end="44:0"><expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="string" pos:start="41:21" pos:end="41:25">"5Kf"</literal></expr>;</expr_stmt>

<cpp:else pos:start="43:1" pos:end="43:5">#<cpp:directive pos:start="43:2" pos:end="43:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="45:9" pos:end="48:0"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:17">cpu_model</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <literal type="string" pos:start="45:21" pos:end="45:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:35"><expr pos:start="51:5" pos:end="51:34"><name pos:start="51:5" pos:end="51:7">cpu</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:34"><name pos:start="51:11" pos:end="51:23">cpu_mips_init</name><argument_list pos:start="51:24" pos:end="51:34">(<argument pos:start="51:25" pos:end="51:33"><expr pos:start="51:25" pos:end="51:33"><name pos:start="51:25" pos:end="51:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:20">(<expr pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:11">cpu</name> <operator pos:start="53:13" pos:end="53:14">==</operator> <name pos:start="53:16" pos:end="53:19">NULL</name></expr>)</condition> <block pos:start="53:22" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:16">

        <expr_stmt pos:start="55:9" pos:end="55:59"><expr pos:start="55:9" pos:end="55:58"><call pos:start="55:9" pos:end="55:58"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="55:58">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:57"><expr pos:start="55:25" pos:end="55:57"><literal type="string" pos:start="55:25" pos:end="55:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:15">(<argument pos:start="57:14" pos:end="57:14"><expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:20"><expr pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:7">env</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <operator pos:start="61:11" pos:end="61:11">&amp;</operator><name pos:start="61:12" pos:end="61:19"><name pos:start="61:12" pos:end="61:14">cpu</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:46"><expr pos:start="65:5" pos:end="65:45"><name pos:start="65:5" pos:end="65:14">reset_info</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:45"><name pos:start="65:18" pos:end="65:26">g_malloc0</name><argument_list pos:start="65:27" pos:end="65:45">(<argument pos:start="65:28" pos:end="65:44"><expr pos:start="65:28" pos:end="65:44"><sizeof pos:start="65:28" pos:end="65:44">sizeof<argument_list pos:start="65:34" pos:end="65:44">(<argument pos:start="65:35" pos:end="65:43"><expr pos:start="65:35" pos:end="65:43"><name pos:start="65:35" pos:end="65:43">ResetData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:26"><expr pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:14">reset_info</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:19">cpu</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:25">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:22"><name pos:start="69:5" pos:end="69:14">reset_info</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:22">vector</name></name> <operator pos:start="69:24" pos:end="69:24">=</operator> <name pos:start="69:26" pos:end="69:42"><name pos:start="69:26" pos:end="69:28">env</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:39">active_tc</name><operator pos:start="69:40" pos:end="69:40">.</operator><name pos:start="69:41" pos:end="69:42">PC</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:52"><expr pos:start="71:5" pos:end="71:51"><call pos:start="71:5" pos:end="71:51"><name pos:start="71:5" pos:end="71:23">qemu_register_reset</name><argument_list pos:start="71:24" pos:end="71:51">(<argument pos:start="71:25" pos:end="71:38"><expr pos:start="71:25" pos:end="71:38"><name pos:start="71:25" pos:end="71:38">main_cpu_reset</name></expr></argument>, <argument pos:start="71:41" pos:end="71:50"><expr pos:start="71:41" pos:end="71:50"><name pos:start="71:41" pos:end="71:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:23">/* Allocate RAM. */</comment>

    <expr_stmt pos:start="77:5" pos:end="79:51"><expr pos:start="77:5" pos:end="79:50"><call pos:start="77:5" pos:end="79:50"><name pos:start="77:5" pos:end="77:40">memory_region_allocate_system_memory</name><argument_list pos:start="77:41" pos:end="79:50">(<argument pos:start="77:42" pos:end="77:44"><expr pos:start="77:42" pos:end="77:44"><name pos:start="77:42" pos:end="77:44">ram</name></expr></argument>, <argument pos:start="77:47" pos:end="77:50"><expr pos:start="77:47" pos:end="77:50"><name pos:start="77:47" pos:end="77:50">NULL</name></expr></argument>, <argument pos:start="77:53" pos:end="77:70"><expr pos:start="77:53" pos:end="77:70"><literal type="string" pos:start="77:53" pos:end="77:70">"mips_mipssim.ram"</literal></expr></argument>,

                                         <argument pos:start="79:42" pos:end="79:49"><expr pos:start="79:42" pos:end="79:49"><name pos:start="79:42" pos:end="79:49">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:41"><expr pos:start="81:5" pos:end="83:40"><call pos:start="81:5" pos:end="83:40"><name pos:start="81:5" pos:end="81:26">memory_region_init_ram</name><argument_list pos:start="81:27" pos:end="83:40">(<argument pos:start="81:28" pos:end="81:31"><expr pos:start="81:28" pos:end="81:31"><name pos:start="81:28" pos:end="81:31">bios</name></expr></argument>, <argument pos:start="81:34" pos:end="81:37"><expr pos:start="81:34" pos:end="81:37"><name pos:start="81:34" pos:end="81:37">NULL</name></expr></argument>, <argument pos:start="81:40" pos:end="81:58"><expr pos:start="81:40" pos:end="81:58"><literal type="string" pos:start="81:40" pos:end="81:58">"mips_mipssim.bios"</literal></expr></argument>, <argument pos:start="81:61" pos:end="81:69"><expr pos:start="81:61" pos:end="81:69"><name pos:start="81:61" pos:end="81:69">BIOS_SIZE</name></expr></argument>,

                           <argument pos:start="83:28" pos:end="83:39"><expr pos:start="83:28" pos:end="83:39"><operator pos:start="83:28" pos:end="83:28">&amp;</operator><name pos:start="83:29" pos:end="83:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:38"><expr pos:start="85:5" pos:end="85:37"><call pos:start="85:5" pos:end="85:37"><name pos:start="85:5" pos:end="85:31">vmstate_register_ram_global</name><argument_list pos:start="85:32" pos:end="85:37">(<argument pos:start="85:33" pos:end="85:36"><expr pos:start="85:33" pos:end="85:36"><name pos:start="85:33" pos:end="85:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:43"><expr pos:start="87:5" pos:end="87:42"><call pos:start="87:5" pos:end="87:42"><name pos:start="87:5" pos:end="87:30">memory_region_set_readonly</name><argument_list pos:start="87:31" pos:end="87:42">(<argument pos:start="87:32" pos:end="87:35"><expr pos:start="87:32" pos:end="87:35"><name pos:start="87:32" pos:end="87:35">bios</name></expr></argument>, <argument pos:start="87:38" pos:end="87:41"><expr pos:start="87:38" pos:end="87:41"><name pos:start="87:38" pos:end="87:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:59"><expr pos:start="91:5" pos:end="91:58"><call pos:start="91:5" pos:end="91:58"><name pos:start="91:5" pos:end="91:31">memory_region_add_subregion</name><argument_list pos:start="91:32" pos:end="91:58">(<argument pos:start="91:33" pos:end="91:49"><expr pos:start="91:33" pos:end="91:49"><name pos:start="91:33" pos:end="91:49">address_space_mem</name></expr></argument>, <argument pos:start="91:52" pos:end="91:52"><expr pos:start="91:52" pos:end="91:52"><literal type="number" pos:start="91:52" pos:end="91:52">0</literal></expr></argument>, <argument pos:start="91:55" pos:end="91:57"><expr pos:start="91:55" pos:end="91:57"><name pos:start="91:55" pos:end="91:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:48">/* Map the BIOS / boot exception handler. */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:71"><expr pos:start="97:5" pos:end="97:70"><call pos:start="97:5" pos:end="97:70"><name pos:start="97:5" pos:end="97:31">memory_region_add_subregion</name><argument_list pos:start="97:32" pos:end="97:70">(<argument pos:start="97:33" pos:end="97:49"><expr pos:start="97:33" pos:end="97:49"><name pos:start="97:33" pos:end="97:49">address_space_mem</name></expr></argument>, <argument pos:start="97:52" pos:end="97:63"><expr pos:start="97:52" pos:end="97:63"><literal type="number" pos:start="97:52" pos:end="97:63">0x1fc00000LL</literal></expr></argument>, <argument pos:start="97:66" pos:end="97:69"><expr pos:start="97:66" pos:end="97:69"><name pos:start="97:66" pos:end="97:69">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="99:5" pos:end="99:53">/* Load a BIOS / boot exception handler image. */</comment>

    <if_stmt pos:start="101:5" pos:end="103:34"><if pos:start="101:5" pos:end="103:34">if <condition pos:start="101:8" pos:end="101:26">(<expr pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:17">bios_name</name> <operator pos:start="101:19" pos:end="101:20">==</operator> <name pos:start="101:22" pos:end="101:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:34"><block_content pos:start="103:9" pos:end="103:34">

        <expr_stmt pos:start="103:9" pos:end="103:34"><expr pos:start="103:9" pos:end="103:33"><name pos:start="103:9" pos:end="103:17">bios_name</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <name pos:start="103:21" pos:end="103:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:62"><expr pos:start="105:5" pos:end="105:61"><name pos:start="105:5" pos:end="105:12">filename</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="105:61"><name pos:start="105:16" pos:end="105:29">qemu_find_file</name><argument_list pos:start="105:30" pos:end="105:61">(<argument pos:start="105:31" pos:end="105:49"><expr pos:start="105:31" pos:end="105:49"><name pos:start="105:31" pos:end="105:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="105:52" pos:end="105:60"><expr pos:start="105:52" pos:end="105:60"><name pos:start="105:52" pos:end="105:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="117:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:17">(<expr pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:16">filename</name></expr>)</condition> <block pos:start="107:19" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:25">

        <expr_stmt pos:start="109:9" pos:end="109:75"><expr pos:start="109:9" pos:end="109:74"><name pos:start="109:9" pos:end="109:17">bios_size</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <call pos:start="109:21" pos:end="109:74"><name pos:start="109:21" pos:end="109:39">load_image_targphys</name><argument_list pos:start="109:40" pos:end="109:74">(<argument pos:start="109:41" pos:end="109:48"><expr pos:start="109:41" pos:end="109:48"><name pos:start="109:41" pos:end="109:48">filename</name></expr></argument>, <argument pos:start="109:51" pos:end="109:62"><expr pos:start="109:51" pos:end="109:62"><literal type="number" pos:start="109:51" pos:end="109:62">0x1fc00000LL</literal></expr></argument>, <argument pos:start="109:65" pos:end="109:73"><expr pos:start="109:65" pos:end="109:73"><name pos:start="109:65" pos:end="109:73">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:25"><expr pos:start="111:9" pos:end="111:24"><call pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:14">g_free</name><argument_list pos:start="111:15" pos:end="111:24">(<argument pos:start="111:16" pos:end="111:23"><expr pos:start="111:16" pos:end="111:23"><name pos:start="111:16" pos:end="111:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="117:5">else <block pos:start="113:12" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:23">

        <expr_stmt pos:start="115:9" pos:end="115:23"><expr pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:17">bios_size</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <operator pos:start="115:21" pos:end="115:21">-</operator><literal type="number" pos:start="115:22" pos:end="115:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="119:5" pos:end="137:5"><if pos:start="119:5" pos:end="131:5">if <condition pos:start="119:8" pos:end="121:45">(<expr pos:start="119:9" pos:end="121:44"><operator pos:start="119:9" pos:end="119:9">(</operator><name pos:start="119:10" pos:end="119:37"><name pos:start="119:10" pos:end="119:18">bios_size</name> <argument_list type="generic" pos:start="119:20" pos:end="119:37">&lt; <argument pos:start="119:22" pos:end="119:35"><expr pos:start="119:22" pos:end="119:35"><literal type="number" pos:start="119:22" pos:end="119:22">0</literal> <operator pos:start="119:24" pos:end="119:25">||</operator> <name pos:start="119:27" pos:end="119:35">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="119:39" pos:end="119:47">BIOS_SIZE</name><operator pos:start="119:48" pos:end="119:48">)</operator> <operator pos:start="119:50" pos:end="119:51">&amp;&amp;</operator>

        <operator pos:start="121:9" pos:end="121:9">!</operator><name pos:start="121:10" pos:end="121:24">kernel_filename</name> <operator pos:start="121:26" pos:end="121:27">&amp;&amp;</operator> <operator pos:start="121:29" pos:end="121:29">!</operator><call pos:start="121:30" pos:end="121:44"><name pos:start="121:30" pos:end="121:42">qtest_enabled</name><argument_list pos:start="121:43" pos:end="121:44">()</argument_list></call></expr>)</condition> <block pos:start="121:47" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:16">

        <comment type="block" pos:start="123:9" pos:end="123:78">/* Bail out if we have neither a kernel image nor boot vector code. */</comment>

        <expr_stmt pos:start="125:9" pos:end="127:66"><expr pos:start="125:9" pos:end="127:65"><call pos:start="125:9" pos:end="127:65"><name pos:start="125:9" pos:end="125:20">error_report</name><argument_list pos:start="125:21" pos:end="127:65">(<argument pos:start="125:22" pos:end="127:53"><expr pos:start="125:22" pos:end="127:53"><literal type="string" pos:start="125:22" pos:end="125:61">"Could not load MIPS bios '%s', and no "</literal>

                     <literal type="string" pos:start="127:22" pos:end="127:53">"-kernel argument was specified"</literal></expr></argument>, <argument pos:start="127:56" pos:end="127:64"><expr pos:start="127:56" pos:end="127:64"><name pos:start="127:56" pos:end="127:64">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:16"><expr pos:start="129:9" pos:end="129:15"><call pos:start="129:9" pos:end="129:15"><name pos:start="129:9" pos:end="129:12">exit</name><argument_list pos:start="129:13" pos:end="129:15">(<argument pos:start="129:14" pos:end="129:14"><expr pos:start="129:14" pos:end="129:14"><literal type="number" pos:start="129:14" pos:end="129:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="137:5">else <block pos:start="131:12" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:61">

        <comment type="block" pos:start="133:9" pos:end="133:50">/* We have a boot vector start address. */</comment>

        <expr_stmt pos:start="135:9" pos:end="135:61"><expr pos:start="135:9" pos:end="135:60"><name pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:11">env</name><operator pos:start="135:12" pos:end="135:13">-&gt;</operator><name pos:start="135:14" pos:end="135:22">active_tc</name><operator pos:start="135:23" pos:end="135:23">.</operator><name pos:start="135:24" pos:end="135:25">PC</name></name> <operator pos:start="135:27" pos:end="135:27">=</operator> <operator pos:start="135:29" pos:end="135:29">(</operator><name pos:start="135:30" pos:end="135:40">target_long</name><operator pos:start="135:41" pos:end="135:41">)</operator><operator pos:start="135:42" pos:end="135:42">(</operator><name pos:start="135:43" pos:end="135:49">int32_t</name><operator pos:start="135:50" pos:end="135:50">)</operator><literal type="number" pos:start="135:51" pos:end="135:60">0xbfc00000</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="141:5" pos:end="153:5"><if pos:start="141:5" pos:end="153:5">if <condition pos:start="141:8" pos:end="141:24">(<expr pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:23">kernel_filename</name></expr>)</condition> <block pos:start="141:26" pos:end="153:5">{<block_content pos:start="143:9" pos:end="151:43">

        <expr_stmt pos:start="143:9" pos:end="143:41"><expr pos:start="143:9" pos:end="143:40"><name pos:start="143:9" pos:end="143:29"><name pos:start="143:9" pos:end="143:20">loaderparams</name><operator pos:start="143:21" pos:end="143:21">.</operator><name pos:start="143:22" pos:end="143:29">ram_size</name></name> <operator pos:start="143:31" pos:end="143:31">=</operator> <name pos:start="143:33" pos:end="143:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:55"><expr pos:start="145:9" pos:end="145:54"><name pos:start="145:9" pos:end="145:36"><name pos:start="145:9" pos:end="145:20">loaderparams</name><operator pos:start="145:21" pos:end="145:21">.</operator><name pos:start="145:22" pos:end="145:36">kernel_filename</name></name> <operator pos:start="145:38" pos:end="145:38">=</operator> <name pos:start="145:40" pos:end="145:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:53"><expr pos:start="147:9" pos:end="147:52"><name pos:start="147:9" pos:end="147:35"><name pos:start="147:9" pos:end="147:20">loaderparams</name><operator pos:start="147:21" pos:end="147:21">.</operator><name pos:start="147:22" pos:end="147:35">kernel_cmdline</name></name> <operator pos:start="147:37" pos:end="147:37">=</operator> <name pos:start="147:39" pos:end="147:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:55"><expr pos:start="149:9" pos:end="149:54"><name pos:start="149:9" pos:end="149:36"><name pos:start="149:9" pos:end="149:20">loaderparams</name><operator pos:start="149:21" pos:end="149:21">.</operator><name pos:start="149:22" pos:end="149:36">initrd_filename</name></name> <operator pos:start="149:38" pos:end="149:38">=</operator> <name pos:start="149:40" pos:end="149:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:43"><expr pos:start="151:9" pos:end="151:42"><name pos:start="151:9" pos:end="151:26"><name pos:start="151:9" pos:end="151:18">reset_info</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:26">vector</name></name> <operator pos:start="151:28" pos:end="151:28">=</operator> <call pos:start="151:30" pos:end="151:42"><name pos:start="151:30" pos:end="151:40">load_kernel</name><argument_list pos:start="151:41" pos:end="151:42">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:36">/* Init CPU internal devices. */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:31"><expr pos:start="159:5" pos:end="159:30"><call pos:start="159:5" pos:end="159:30"><name pos:start="159:5" pos:end="159:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="159:26" pos:end="159:30">(<argument pos:start="159:27" pos:end="159:29"><expr pos:start="159:27" pos:end="159:29"><name pos:start="159:27" pos:end="159:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:29"><expr pos:start="161:5" pos:end="161:28"><call pos:start="161:5" pos:end="161:28"><name pos:start="161:5" pos:end="161:23">cpu_mips_clock_init</name><argument_list pos:start="161:24" pos:end="161:28">(<argument pos:start="161:25" pos:end="161:27"><expr pos:start="161:25" pos:end="161:27"><name pos:start="161:25" pos:end="161:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:55">/* Register 64 KB of ISA IO space at 0x1fd00000. */</comment>

    <expr_stmt pos:start="167:5" pos:end="169:61"><expr pos:start="167:5" pos:end="169:60"><call pos:start="167:5" pos:end="169:60"><name pos:start="167:5" pos:end="167:28">memory_region_init_alias</name><argument_list pos:start="167:29" pos:end="169:60">(<argument pos:start="167:30" pos:end="167:32"><expr pos:start="167:30" pos:end="167:32"><name pos:start="167:30" pos:end="167:32">isa</name></expr></argument>, <argument pos:start="167:35" pos:end="167:38"><expr pos:start="167:35" pos:end="167:38"><name pos:start="167:35" pos:end="167:38">NULL</name></expr></argument>, <argument pos:start="167:41" pos:end="167:50"><expr pos:start="167:41" pos:end="167:50"><literal type="string" pos:start="167:41" pos:end="167:50">"isa_mmio"</literal></expr></argument>,

                             <argument pos:start="169:30" pos:end="169:44"><expr pos:start="169:30" pos:end="169:44"><call pos:start="169:30" pos:end="169:44"><name pos:start="169:30" pos:end="169:42">get_system_io</name><argument_list pos:start="169:43" pos:end="169:44">()</argument_list></call></expr></argument>, <argument pos:start="169:47" pos:end="169:47"><expr pos:start="169:47" pos:end="169:47"><literal type="number" pos:start="169:47" pos:end="169:47">0</literal></expr></argument>, <argument pos:start="169:50" pos:end="169:59"><expr pos:start="169:50" pos:end="169:59"><literal type="number" pos:start="169:50" pos:end="169:59">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:70"><expr pos:start="171:5" pos:end="171:69"><call pos:start="171:5" pos:end="171:69"><name pos:start="171:5" pos:end="171:31">memory_region_add_subregion</name><argument_list pos:start="171:32" pos:end="171:69">(<argument pos:start="171:33" pos:end="171:51"><expr pos:start="171:33" pos:end="171:51"><call pos:start="171:33" pos:end="171:51"><name pos:start="171:33" pos:end="171:49">get_system_memory</name><argument_list pos:start="171:50" pos:end="171:51">()</argument_list></call></expr></argument>, <argument pos:start="171:54" pos:end="171:63"><expr pos:start="171:54" pos:end="171:63"><literal type="number" pos:start="171:54" pos:end="171:63">0x1fd00000</literal></expr></argument>, <argument pos:start="171:66" pos:end="171:68"><expr pos:start="171:66" pos:end="171:68"><name pos:start="171:66" pos:end="171:68">isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="177:46">/* A single 16450 sits at offset 0x3f8. It is attached to

       MIPS CPU INT2, which is interrupt 4. */</comment>

    <if_stmt pos:start="179:5" pos:end="183:37"><if pos:start="179:5" pos:end="183:37">if <condition pos:start="179:8" pos:end="179:22">(<expr pos:start="179:9" pos:end="179:21"><name pos:start="179:9" pos:end="179:21"><name pos:start="179:9" pos:end="179:18">serial_hds</name><index pos:start="179:19" pos:end="179:21">[<expr pos:start="179:20" pos:end="179:20"><literal type="number" pos:start="179:20" pos:end="179:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="181:9" pos:end="183:37"><block_content pos:start="181:9" pos:end="183:37">

        <expr_stmt pos:start="181:9" pos:end="183:37"><expr pos:start="181:9" pos:end="183:36"><call pos:start="181:9" pos:end="183:36"><name pos:start="181:9" pos:end="181:19">serial_init</name><argument_list pos:start="181:20" pos:end="183:36">(<argument pos:start="181:21" pos:end="181:25"><expr pos:start="181:21" pos:end="181:25"><literal type="number" pos:start="181:21" pos:end="181:25">0x3f8</literal></expr></argument>, <argument pos:start="181:28" pos:end="181:38"><expr pos:start="181:28" pos:end="181:38"><name pos:start="181:28" pos:end="181:38"><name pos:start="181:28" pos:end="181:30">env</name><operator pos:start="181:31" pos:end="181:32">-&gt;</operator><name pos:start="181:33" pos:end="181:35">irq</name><index pos:start="181:36" pos:end="181:38">[<expr pos:start="181:37" pos:end="181:37"><literal type="number" pos:start="181:37" pos:end="181:37">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="181:41" pos:end="181:46"><expr pos:start="181:41" pos:end="181:46"><literal type="number" pos:start="181:41" pos:end="181:46">115200</literal></expr></argument>, <argument pos:start="181:49" pos:end="181:61"><expr pos:start="181:49" pos:end="181:61"><name pos:start="181:49" pos:end="181:61"><name pos:start="181:49" pos:end="181:58">serial_hds</name><index pos:start="181:59" pos:end="181:61">[<expr pos:start="181:60" pos:end="181:60"><literal type="number" pos:start="181:60" pos:end="181:60">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="183:21" pos:end="183:35"><expr pos:start="183:21" pos:end="183:35"><call pos:start="183:21" pos:end="183:35"><name pos:start="183:21" pos:end="183:33">get_system_io</name><argument_list pos:start="183:34" pos:end="183:35">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="191:56"><if pos:start="187:5" pos:end="191:56">if <condition pos:start="187:8" pos:end="187:25">(<expr pos:start="187:9" pos:end="187:24"><name pos:start="187:9" pos:end="187:19"><name pos:start="187:9" pos:end="187:16">nd_table</name><index pos:start="187:17" pos:end="187:19">[<expr pos:start="187:18" pos:end="187:18"><literal type="number" pos:start="187:18" pos:end="187:18">0</literal></expr>]</index></name><operator pos:start="187:20" pos:end="187:20">.</operator><name pos:start="187:21" pos:end="187:24">used</name></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:56"><block_content pos:start="191:9" pos:end="191:56">

        <comment type="block" pos:start="189:9" pos:end="189:67">/* MIPSnet uses the MIPS CPU INT0, which is interrupt 2. */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:56"><expr pos:start="191:9" pos:end="191:55"><call pos:start="191:9" pos:end="191:55"><name pos:start="191:9" pos:end="191:20">mipsnet_init</name><argument_list pos:start="191:21" pos:end="191:55">(<argument pos:start="191:22" pos:end="191:27"><expr pos:start="191:22" pos:end="191:27"><literal type="number" pos:start="191:22" pos:end="191:27">0x4200</literal></expr></argument>, <argument pos:start="191:30" pos:end="191:40"><expr pos:start="191:30" pos:end="191:40"><name pos:start="191:30" pos:end="191:40"><name pos:start="191:30" pos:end="191:32">env</name><operator pos:start="191:33" pos:end="191:34">-&gt;</operator><name pos:start="191:35" pos:end="191:37">irq</name><index pos:start="191:38" pos:end="191:40">[<expr pos:start="191:39" pos:end="191:39"><literal type="number" pos:start="191:39" pos:end="191:39">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="191:43" pos:end="191:54"><expr pos:start="191:43" pos:end="191:54"><operator pos:start="191:43" pos:end="191:43">&amp;</operator><name pos:start="191:44" pos:end="191:54"><name pos:start="191:44" pos:end="191:51">nd_table</name><index pos:start="191:52" pos:end="191:54">[<expr pos:start="191:53" pos:end="191:53"><literal type="number" pos:start="191:53" pos:end="191:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>
</unit>
