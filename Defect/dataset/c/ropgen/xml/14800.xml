<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14800.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">apic_bus_deliver</name><parameter_list pos:start="1:29" pos:end="7:50">(<parameter pos:start="1:30" pos:end="1:60"><decl pos:start="1:30" pos:end="1:60"><type pos:start="1:30" pos:end="1:60"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:43">uint32_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:60">deliver_bitmask</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:50"><decl pos:start="3:30" pos:end="3:50"><type pos:start="3:30" pos:end="3:50"><name pos:start="3:30" pos:end="3:36">uint8_t</name></type> <name pos:start="3:38" pos:end="3:50">delivery_mode</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:47"><decl pos:start="5:30" pos:end="5:47"><type pos:start="5:30" pos:end="5:47"><name pos:start="5:30" pos:end="5:36">uint8_t</name></type> <name pos:start="5:38" pos:end="5:47">vector_num</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:65"><decl pos:start="5:50" pos:end="5:65"><type pos:start="5:50" pos:end="5:65"><name pos:start="5:50" pos:end="5:56">uint8_t</name></type> <name pos:start="5:58" pos:end="5:65">polarity</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:49"><decl pos:start="7:30" pos:end="7:49"><type pos:start="7:30" pos:end="7:49"><name pos:start="7:30" pos:end="7:36">uint8_t</name></type> <name pos:start="7:38" pos:end="7:49">trigger_mode</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="115:1">{<block_content pos:start="11:5" pos:end="113:69">

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">APICState</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:24">apic_iter</name></decl>;</decl_stmt>



    <switch pos:start="15:5" pos:end="107:5">switch <condition pos:start="15:12" pos:end="15:26">(<expr pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:25">delivery_mode</name></expr>)</condition> <block pos:start="15:28" pos:end="107:5">{<block_content pos:start="17:9" pos:end="105:19">

        <case pos:start="17:9" pos:end="17:28">case <expr pos:start="17:14" pos:end="17:27"><name pos:start="17:14" pos:end="17:27">APIC_DM_LOWPRI</name></expr>:</case>

            <comment type="block" pos:start="19:13" pos:end="19:62">/* XXX: search for focus processor, arbitration */</comment>

            <block pos:start="21:13" pos:end="51:13">{<block_content pos:start="23:17" pos:end="49:17">

                <decl_stmt pos:start="23:17" pos:end="23:25"><decl pos:start="23:17" pos:end="23:21"><type pos:start="23:17" pos:end="23:19"><name pos:start="23:17" pos:end="23:19">int</name></type> <name pos:start="23:21" pos:end="23:21">i</name></decl>, <decl pos:start="23:24" pos:end="23:24"><type ref="prev" pos:start="23:17" pos:end="23:19"/><name pos:start="23:24" pos:end="23:24">d</name></decl>;</decl_stmt>

                <expr_stmt pos:start="25:17" pos:end="25:23"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:17">d</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <operator pos:start="25:21" pos:end="25:21">-</operator><literal type="number" pos:start="25:22" pos:end="25:22">1</literal></expr>;</expr_stmt>

                <for pos:start="27:17" pos:end="37:17">for<control pos:start="27:20" pos:end="27:51">(<init pos:start="27:21" pos:end="27:26"><expr pos:start="27:21" pos:end="27:25"><name pos:start="27:21" pos:end="27:21">i</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <literal type="number" pos:start="27:25" pos:end="27:25">0</literal></expr>;</init> <condition pos:start="27:28" pos:end="27:46"><expr pos:start="27:28" pos:end="27:45"><name pos:start="27:28" pos:end="27:28">i</name> <operator pos:start="27:30" pos:end="27:30">&lt;</operator> <name pos:start="27:32" pos:end="27:45">MAX_APIC_WORDS</name></expr>;</condition> <incr pos:start="27:48" pos:end="27:50"><expr pos:start="27:48" pos:end="27:50"><name pos:start="27:48" pos:end="27:48">i</name><operator pos:start="27:49" pos:end="27:50">++</operator></expr></incr>)</control> <block pos:start="27:53" pos:end="37:17">{<block_content pos:start="29:21" pos:end="35:21">

                    <if_stmt pos:start="29:21" pos:end="35:21"><if pos:start="29:21" pos:end="35:21">if <condition pos:start="29:24" pos:end="29:43">(<expr pos:start="29:25" pos:end="29:42"><name pos:start="29:25" pos:end="29:42"><name pos:start="29:25" pos:end="29:39">deliver_bitmask</name><index pos:start="29:40" pos:end="29:42">[<expr pos:start="29:41" pos:end="29:41"><name pos:start="29:41" pos:end="29:41">i</name></expr>]</index></name></expr>)</condition> <block pos:start="29:45" pos:end="35:21">{<block_content pos:start="31:25" pos:end="33:30">

                        <expr_stmt pos:start="31:25" pos:end="31:65"><expr pos:start="31:25" pos:end="31:64"><name pos:start="31:25" pos:end="31:25">d</name> <operator pos:start="31:27" pos:end="31:27">=</operator> <name pos:start="31:29" pos:end="31:29">i</name> <operator pos:start="31:31" pos:end="31:31">*</operator> <literal type="number" pos:start="31:33" pos:end="31:36">32</literal> <operator pos:start="31:36" pos:end="31:36">+</operator> <call pos:start="31:38" pos:end="31:64"><name pos:start="31:38" pos:end="31:44">ffs_bit</name><argument_list pos:start="31:45" pos:end="31:64">(<argument pos:start="31:46" pos:end="31:63"><expr pos:start="31:46" pos:end="31:63"><name pos:start="31:46" pos:end="31:63"><name pos:start="31:46" pos:end="31:60">deliver_bitmask</name><index pos:start="31:61" pos:end="31:63">[<expr pos:start="31:62" pos:end="31:62"><name pos:start="31:62" pos:end="31:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="33:25" pos:end="33:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="39:17" pos:end="49:17"><if pos:start="39:17" pos:end="49:17">if <condition pos:start="39:20" pos:end="39:27">(<expr pos:start="39:21" pos:end="39:26"><name pos:start="39:21" pos:end="39:21">d</name> <operator pos:start="39:23" pos:end="39:24">&gt;=</operator> <literal type="number" pos:start="39:26" pos:end="39:26">0</literal></expr>)</condition> <block pos:start="39:29" pos:end="49:17">{<block_content pos:start="41:21" pos:end="47:21">

                    <expr_stmt pos:start="41:21" pos:end="41:47"><expr pos:start="41:21" pos:end="41:46"><name pos:start="41:21" pos:end="41:29">apic_iter</name> <operator pos:start="41:31" pos:end="41:31">=</operator> <name pos:start="41:33" pos:end="41:46"><name pos:start="41:33" pos:end="41:43">local_apics</name><index pos:start="41:44" pos:end="41:46">[<expr pos:start="41:45" pos:end="41:45"><name pos:start="41:45" pos:end="41:45">d</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="43:21" pos:end="47:21"><if pos:start="43:21" pos:end="47:21">if <condition pos:start="43:24" pos:end="43:34">(<expr pos:start="43:25" pos:end="43:33"><name pos:start="43:25" pos:end="43:33">apic_iter</name></expr>)</condition> <block pos:start="43:36" pos:end="47:21">{<block_content pos:start="45:25" pos:end="45:74">

                        <expr_stmt pos:start="45:25" pos:end="45:74"><expr pos:start="45:25" pos:end="45:73"><call pos:start="45:25" pos:end="45:73"><name pos:start="45:25" pos:end="45:36">apic_set_irq</name><argument_list pos:start="45:37" pos:end="45:73">(<argument pos:start="45:38" pos:end="45:46"><expr pos:start="45:38" pos:end="45:46"><name pos:start="45:38" pos:end="45:46">apic_iter</name></expr></argument>, <argument pos:start="45:49" pos:end="45:58"><expr pos:start="45:49" pos:end="45:58"><name pos:start="45:49" pos:end="45:58">vector_num</name></expr></argument>, <argument pos:start="45:61" pos:end="45:72"><expr pos:start="45:61" pos:end="45:72"><name pos:start="45:61" pos:end="45:72">trigger_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <return pos:start="53:13" pos:end="53:19">return;</return>



        <case pos:start="57:9" pos:end="57:27">case <expr pos:start="57:14" pos:end="57:26"><name pos:start="57:14" pos:end="57:26">APIC_DM_FIXED</name></expr>:</case>

            <break pos:start="59:13" pos:end="59:18">break;</break>



        <case pos:start="63:9" pos:end="63:25">case <expr pos:start="63:14" pos:end="63:24"><name pos:start="63:14" pos:end="63:24">APIC_DM_SMI</name></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="67:71"><expr pos:start="65:13" pos:end="67:70"><call pos:start="65:13" pos:end="67:70"><name pos:start="65:13" pos:end="65:24">foreach_apic</name><argument_list pos:start="65:25" pos:end="67:70">(<argument pos:start="65:26" pos:end="65:34"><expr pos:start="65:26" pos:end="65:34"><name pos:start="65:26" pos:end="65:34">apic_iter</name></expr></argument>, <argument pos:start="65:37" pos:end="65:51"><expr pos:start="65:37" pos:end="65:51"><name pos:start="65:37" pos:end="65:51">deliver_bitmask</name></expr></argument>,

                <argument pos:start="67:17" pos:end="67:68"><expr pos:start="67:17" pos:end="67:68"><call pos:start="67:17" pos:end="67:68"><name pos:start="67:17" pos:end="67:29">cpu_interrupt</name><argument_list pos:start="67:30" pos:end="67:68">(<argument pos:start="67:31" pos:end="67:48"><expr pos:start="67:31" pos:end="67:48"><name pos:start="67:31" pos:end="67:48"><name pos:start="67:31" pos:end="67:39">apic_iter</name><operator pos:start="67:40" pos:end="67:41">-&gt;</operator><name pos:start="67:42" pos:end="67:48">cpu_env</name></name></expr></argument>, <argument pos:start="67:51" pos:end="67:67"><expr pos:start="67:51" pos:end="67:67"><name pos:start="67:51" pos:end="67:67">CPU_INTERRUPT_SMI</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:19">return;</return>



        <case pos:start="73:9" pos:end="73:25">case <expr pos:start="73:14" pos:end="73:24"><name pos:start="73:14" pos:end="73:24">APIC_DM_NMI</name></expr>:</case>

            <expr_stmt pos:start="75:13" pos:end="77:71"><expr pos:start="75:13" pos:end="77:70"><call pos:start="75:13" pos:end="77:70"><name pos:start="75:13" pos:end="75:24">foreach_apic</name><argument_list pos:start="75:25" pos:end="77:70">(<argument pos:start="75:26" pos:end="75:34"><expr pos:start="75:26" pos:end="75:34"><name pos:start="75:26" pos:end="75:34">apic_iter</name></expr></argument>, <argument pos:start="75:37" pos:end="75:51"><expr pos:start="75:37" pos:end="75:51"><name pos:start="75:37" pos:end="75:51">deliver_bitmask</name></expr></argument>,

                <argument pos:start="77:17" pos:end="77:68"><expr pos:start="77:17" pos:end="77:68"><call pos:start="77:17" pos:end="77:68"><name pos:start="77:17" pos:end="77:29">cpu_interrupt</name><argument_list pos:start="77:30" pos:end="77:68">(<argument pos:start="77:31" pos:end="77:48"><expr pos:start="77:31" pos:end="77:48"><name pos:start="77:31" pos:end="77:48"><name pos:start="77:31" pos:end="77:39">apic_iter</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:48">cpu_env</name></name></expr></argument>, <argument pos:start="77:51" pos:end="77:67"><expr pos:start="77:51" pos:end="77:67"><name pos:start="77:51" pos:end="77:67">CPU_INTERRUPT_NMI</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:19">return;</return>



        <case pos:start="83:9" pos:end="83:26">case <expr pos:start="83:14" pos:end="83:25"><name pos:start="83:14" pos:end="83:25">APIC_DM_INIT</name></expr>:</case>

            <comment type="block" pos:start="85:13" pos:end="85:52">/* normal INIT IPI sent to processors */</comment>

            <expr_stmt pos:start="87:13" pos:end="89:52"><expr pos:start="87:13" pos:end="89:51"><call pos:start="87:13" pos:end="89:51"><name pos:start="87:13" pos:end="87:24">foreach_apic</name><argument_list pos:start="87:25" pos:end="89:51">(<argument pos:start="87:26" pos:end="87:34"><expr pos:start="87:26" pos:end="87:34"><name pos:start="87:26" pos:end="87:34">apic_iter</name></expr></argument>, <argument pos:start="87:37" pos:end="87:51"><expr pos:start="87:37" pos:end="87:51"><name pos:start="87:37" pos:end="87:51">deliver_bitmask</name></expr></argument>,

                         <argument pos:start="89:26" pos:end="89:49"><expr pos:start="89:26" pos:end="89:49"><call pos:start="89:26" pos:end="89:49"><name pos:start="89:26" pos:end="89:38">apic_init_ipi</name><argument_list pos:start="89:39" pos:end="89:49">(<argument pos:start="89:40" pos:end="89:48"><expr pos:start="89:40" pos:end="89:48"><name pos:start="89:40" pos:end="89:48">apic_iter</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:19">return;</return>



        <case pos:start="95:9" pos:end="95:28">case <expr pos:start="95:14" pos:end="95:27"><name pos:start="95:14" pos:end="95:27">APIC_DM_EXTINT</name></expr>:</case>

            <comment type="block" pos:start="97:13" pos:end="97:42">/* handled in I/O APIC code */</comment>

            <break pos:start="99:13" pos:end="99:18">break;</break>



        <default pos:start="103:9" pos:end="103:16">default:</default>

            <return pos:start="105:13" pos:end="105:19">return;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="111:5" pos:end="113:69"><expr pos:start="111:5" pos:end="113:68"><call pos:start="111:5" pos:end="113:68"><name pos:start="111:5" pos:end="111:16">foreach_apic</name><argument_list pos:start="111:17" pos:end="113:68">(<argument pos:start="111:18" pos:end="111:26"><expr pos:start="111:18" pos:end="111:26"><name pos:start="111:18" pos:end="111:26">apic_iter</name></expr></argument>, <argument pos:start="111:29" pos:end="111:43"><expr pos:start="111:29" pos:end="111:43"><name pos:start="111:29" pos:end="111:43">deliver_bitmask</name></expr></argument>,

                 <argument pos:start="113:18" pos:end="113:66"><expr pos:start="113:18" pos:end="113:66"><call pos:start="113:18" pos:end="113:66"><name pos:start="113:18" pos:end="113:29">apic_set_irq</name><argument_list pos:start="113:30" pos:end="113:66">(<argument pos:start="113:31" pos:end="113:39"><expr pos:start="113:31" pos:end="113:39"><name pos:start="113:31" pos:end="113:39">apic_iter</name></expr></argument>, <argument pos:start="113:42" pos:end="113:51"><expr pos:start="113:42" pos:end="113:51"><name pos:start="113:42" pos:end="113:51">vector_num</name></expr></argument>, <argument pos:start="113:54" pos:end="113:65"><expr pos:start="113:54" pos:end="113:65"><name pos:start="113:54" pos:end="113:65">trigger_mode</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
