<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9389.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:10">ram_addr_t</name></type> <name pos:start="1:12" pos:end="1:34">qemu_ram_addr_from_host</name><parameter_list pos:start="1:35" pos:end="1:45">(<parameter pos:start="1:36" pos:end="1:44"><decl pos:start="1:36" pos:end="1:44"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ptr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:48">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RAMBlock</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">prev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:12">RAMBlock</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier><modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">prevp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">RAMBlock</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:19">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:17">host</name> <init pos:start="11:19" pos:end="11:23">= <expr pos:start="11:21" pos:end="11:23"><name pos:start="11:21" pos:end="11:23">ptr</name></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="15:1" pos:end="15:19">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:19">CONFIG_KQEMU</name></cpp:ifdef>

    <if_stmt pos:start="17:5" pos:end="24:0"><if pos:start="17:5" pos:end="24:0">if <condition pos:start="17:8" pos:end="17:28">(<expr pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:27">kqemu_phys_ram_base</name></expr>)</condition> <block pos:start="17:30" pos:end="24:0">{<block_content pos:start="19:9" pos:end="19:42">

        <return pos:start="19:9" pos:end="19:42">return <expr pos:start="19:16" pos:end="19:41"><name pos:start="19:16" pos:end="19:19">host</name> <operator pos:start="19:21" pos:end="19:21">-</operator> <name pos:start="19:23" pos:end="19:41">kqemu_phys_ram_base</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:8">prev</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:15">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:9">prevp</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <operator pos:start="29:13" pos:end="29:13">&amp;</operator><name pos:start="29:14" pos:end="29:23">ram_blocks</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:9">block</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <name pos:start="31:13" pos:end="31:22">ram_blocks</name></expr>;</expr_stmt>

    <while pos:start="33:5" pos:end="45:5">while <condition pos:start="33:11" pos:end="35:61">(<expr pos:start="33:12" pos:end="35:60"><name pos:start="33:12" pos:end="33:16">block</name> <operator pos:start="33:18" pos:end="33:19">&amp;&amp;</operator> <operator pos:start="33:21" pos:end="33:21">(</operator><name pos:start="33:22" pos:end="33:32"><name pos:start="33:22" pos:end="33:26">block</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:32">host</name></name> <operator pos:start="33:34" pos:end="33:34">&gt;</operator> <name pos:start="33:36" pos:end="33:39">host</name>

                     <operator pos:start="35:22" pos:end="35:23">||</operator> <name pos:start="35:25" pos:end="35:35"><name pos:start="35:25" pos:end="35:29">block</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:35">host</name></name> <operator pos:start="35:37" pos:end="35:37">+</operator> <name pos:start="35:39" pos:end="35:51"><name pos:start="35:39" pos:end="35:43">block</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:51">length</name></name> <operator pos:start="35:53" pos:end="35:54">&lt;=</operator> <name pos:start="35:56" pos:end="35:59">host</name><operator pos:start="35:60" pos:end="35:60">)</operator></expr>)</condition> <block pos:start="35:63" pos:end="45:5">{<block_content pos:start="37:9" pos:end="43:28">

        <if_stmt pos:start="37:9" pos:end="39:30"><if pos:start="37:9" pos:end="39:30">if <condition pos:start="37:12" pos:end="37:17">(<expr pos:start="37:13" pos:end="37:16"><name pos:start="37:13" pos:end="37:16">prev</name></expr>)</condition><block type="pseudo" pos:start="39:11" pos:end="39:30"><block_content pos:start="39:11" pos:end="39:30">

          <expr_stmt pos:start="39:11" pos:end="39:30"><expr pos:start="39:11" pos:end="39:29"><name pos:start="39:11" pos:end="39:15">prevp</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <operator pos:start="39:19" pos:end="39:19">&amp;</operator><name pos:start="39:20" pos:end="39:29"><name pos:start="39:20" pos:end="39:23">prev</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:29">next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:21"><expr pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:12">prev</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:20">block</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:28"><expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:13">block</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <name pos:start="43:17" pos:end="43:27"><name pos:start="43:17" pos:end="43:21">block</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:27">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:15">(<expr pos:start="47:9" pos:end="47:14"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:14">block</name></expr>)</condition> <block pos:start="47:17" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:16">

        <expr_stmt pos:start="49:9" pos:end="49:53"><expr pos:start="49:9" pos:end="49:52"><call pos:start="49:9" pos:end="49:52"><name pos:start="49:9" pos:end="49:15">fprintf</name><argument_list pos:start="49:16" pos:end="49:52">(<argument pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">stderr</name></expr></argument>, <argument pos:start="49:25" pos:end="49:46"><expr pos:start="49:25" pos:end="49:46"><literal type="string" pos:start="49:25" pos:end="49:46">"Bad ram pointer %p\n"</literal></expr></argument>, <argument pos:start="49:49" pos:end="49:51"><expr pos:start="49:49" pos:end="49:51"><name pos:start="49:49" pos:end="49:51">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:16"><expr pos:start="51:9" pos:end="51:15"><call pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:13">abort</name><argument_list pos:start="51:14" pos:end="51:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="55:5" pos:end="55:48">return <expr pos:start="55:12" pos:end="55:47"><name pos:start="55:12" pos:end="55:24"><name pos:start="55:12" pos:end="55:16">block</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:24">offset</name></name> <operator pos:start="55:26" pos:end="55:26">+</operator> <operator pos:start="55:28" pos:end="55:28">(</operator><name pos:start="55:29" pos:end="55:32">host</name> <operator pos:start="55:34" pos:end="55:34">-</operator> <name pos:start="55:36" pos:end="55:46"><name pos:start="55:36" pos:end="55:40">block</name><operator pos:start="55:41" pos:end="55:42">-&gt;</operator><name pos:start="55:43" pos:end="55:46">host</name></name><operator pos:start="55:47" pos:end="55:47">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
