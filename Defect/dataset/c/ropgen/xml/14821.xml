<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14821.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:46"><name pos:start="1:1" pos:end="1:30">gen_intermediate_code_internal</name> <argument_list pos:start="1:32" pos:end="3:46">(<argument pos:start="1:33" pos:end="1:45">CPUState *env</argument>, <argument pos:start="1:48" pos:end="1:67">TranslationBlock *tb</argument>,

                                <argument pos:start="3:33" pos:end="3:45">int search_pc</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="251:1">{<block_content pos:start="7:5" pos:end="249:13">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">DisasContext</name></type> <name pos:start="7:18" pos:end="7:20">ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint16_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">j</name></decl>, <decl pos:start="13:12" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:13">lj</name> <init pos:start="13:15" pos:end="13:18">= <expr pos:start="13:17" pos:end="13:18"><operator pos:start="13:17" pos:end="13:17">-</operator><literal type="number" pos:start="13:18" pos:end="13:18">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:55"><if pos:start="17:5" pos:end="19:55">if <condition pos:start="17:8" pos:end="17:30">(<expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:17">search_pc</name> <operator pos:start="17:19" pos:end="17:20">&amp;&amp;</operator> <name pos:start="17:22" pos:end="17:29">loglevel</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:55"><block_content pos:start="19:9" pos:end="19:55">

        <expr_stmt pos:start="19:9" pos:end="19:55"><expr pos:start="19:9" pos:end="19:54"><call pos:start="19:9" pos:end="19:54"><name pos:start="19:9" pos:end="19:15">fprintf</name> <argument_list pos:start="19:17" pos:end="19:54">(<argument pos:start="19:18" pos:end="19:24"><expr pos:start="19:18" pos:end="19:24"><name pos:start="19:18" pos:end="19:24">logfile</name></expr></argument>, <argument pos:start="19:27" pos:end="19:42"><expr pos:start="19:27" pos:end="19:42"><literal type="string" pos:start="19:27" pos:end="19:42">"search pc %d\n"</literal></expr></argument>, <argument pos:start="19:45" pos:end="19:53"><expr pos:start="19:45" pos:end="19:53"><name pos:start="19:45" pos:end="19:53">search_pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:22"><expr pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:12">pc_start</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:21"><name pos:start="23:16" pos:end="23:17">tb</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:15">gen_opc_end</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:29">gen_opc_buf</name> <operator pos:start="25:31" pos:end="25:31">+</operator> <name pos:start="25:33" pos:end="25:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:7">ctx</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:10">pc</name></name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:7">ctx</name><operator pos:start="29:8" pos:end="29:8">.</operator><name pos:start="29:9" pos:end="29:16">saved_pc</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <operator pos:start="29:20" pos:end="29:20">-</operator><literal type="number" pos:start="29:21" pos:end="29:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:16"><expr pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:7">ctx</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:10">tb</name></name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:25"><expr pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:7">ctx</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:14">bstate</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:24">BS_NONE</name></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:56">/* Restore delay slot state from the tb context.  */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:7">ctx</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:14">hflags</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <operator pos:start="37:18" pos:end="37:18">(</operator><name pos:start="37:19" pos:end="37:26">uint32_t</name><operator pos:start="37:27" pos:end="37:27">)</operator><name pos:start="37:28" pos:end="37:36"><name pos:start="37:28" pos:end="37:29">tb</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:36">flags</name></name></expr>;</expr_stmt> <comment type="block" pos:start="37:39" pos:end="37:74">/* FIXME: maybe use 64 bits here? */</comment>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:32"><call pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:21">restore_cpu_state</name><argument_list pos:start="39:22" pos:end="39:32">(<argument pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><name pos:start="39:23" pos:end="39:25">env</name></expr></argument>, <argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><operator pos:start="39:28" pos:end="39:28">&amp;</operator><name pos:start="39:29" pos:end="39:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="41:1" pos:end="41:29">#<cpp:directive pos:start="41:2" pos:end="41:3">if</cpp:directive> <expr pos:start="41:5" pos:end="41:29"><call pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:11">defined</name><argument_list pos:start="41:12" pos:end="41:29">(<argument pos:start="41:13" pos:end="41:28"><expr pos:start="41:13" pos:end="41:28"><name pos:start="41:13" pos:end="41:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:31"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:7">ctx</name><operator pos:start="43:8" pos:end="43:8">.</operator><name pos:start="43:9" pos:end="43:15">mem_idx</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:31">MIPS_HFLAG_UM</name></expr>;</expr_stmt>

<cpp:else pos:start="45:1" pos:end="45:5">#<cpp:directive pos:start="45:2" pos:end="45:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="47:5" pos:end="52:0"><expr pos:start="47:5" pos:end="47:45"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:7">ctx</name><operator pos:start="47:8" pos:end="47:8">.</operator><name pos:start="47:9" pos:end="47:15">mem_idx</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:28"><name pos:start="47:19" pos:end="47:21">ctx</name><operator pos:start="47:22" pos:end="47:22">.</operator><name pos:start="47:23" pos:end="47:28">hflags</name></name> <operator pos:start="47:30" pos:end="47:30">&amp;</operator> <name pos:start="47:32" pos:end="47:45">MIPS_HFLAG_KSU</name></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="51:1" pos:end="51:18">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="53:5" pos:end="66:0"><if pos:start="53:5" pos:end="66:0">if <condition pos:start="53:8" pos:end="53:34">(<expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:16">loglevel</name> <operator pos:start="53:18" pos:end="53:18">&amp;</operator> <name pos:start="53:20" pos:end="53:33">CPU_LOG_TB_CPU</name></expr>)</condition> <block pos:start="53:36" pos:end="66:0">{<block_content pos:start="55:9" pos:end="59:49">

        <expr_stmt pos:start="55:9" pos:end="55:79"><expr pos:start="55:9" pos:end="55:78"><call pos:start="55:9" pos:end="55:78"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="55:78">(<argument pos:start="55:17" pos:end="55:23"><expr pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:23">logfile</name></expr></argument>, <argument pos:start="55:26" pos:end="55:77"><expr pos:start="55:26" pos:end="55:77"><literal type="string" pos:start="55:26" pos:end="55:77">"------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="57:9" pos:end="57:64">/* FIXME: This may print out stale hflags from env... */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:49"><expr pos:start="59:9" pos:end="59:48"><call pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:22">cpu_dump_state</name><argument_list pos:start="59:23" pos:end="59:48">(<argument pos:start="59:24" pos:end="59:26"><expr pos:start="59:24" pos:end="59:26"><name pos:start="59:24" pos:end="59:26">env</name></expr></argument>, <argument pos:start="59:29" pos:end="59:35"><expr pos:start="59:29" pos:end="59:35"><name pos:start="59:29" pos:end="59:35">logfile</name></expr></argument>, <argument pos:start="59:38" pos:end="59:44"><expr pos:start="59:38" pos:end="59:44"><name pos:start="59:38" pos:end="59:44">fprintf</name></expr></argument>, <argument pos:start="59:47" pos:end="59:47"><expr pos:start="59:47" pos:end="59:47"><literal type="number" pos:start="59:47" pos:end="59:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="65:1" pos:end="65:23">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:23">MIPS_DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="67:5" pos:end="74:0"><if pos:start="67:5" pos:end="74:0">if <condition pos:start="67:8" pos:end="67:37">(<expr pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:16">loglevel</name> <operator pos:start="67:18" pos:end="67:18">&amp;</operator> <name pos:start="67:20" pos:end="67:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="74:0"><block_content pos:start="69:9" pos:end="74:0">

        <expr_stmt pos:start="69:9" pos:end="74:0"><expr pos:start="69:9" pos:end="71:44"><call pos:start="69:9" pos:end="71:44"><name pos:start="69:9" pos:end="69:15">fprintf</name><argument_list pos:start="69:16" pos:end="71:44">(<argument pos:start="69:17" pos:end="69:23"><expr pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:23">logfile</name></expr></argument>, <argument pos:start="69:26" pos:end="69:55"><expr pos:start="69:26" pos:end="69:55"><literal type="string" pos:start="69:26" pos:end="69:55">"\ntb %p idx %d hflags %04x\n"</literal></expr></argument>,

                <argument pos:start="71:17" pos:end="71:18"><expr pos:start="71:17" pos:end="71:18"><name pos:start="71:17" pos:end="71:18">tb</name></expr></argument>, <argument pos:start="71:21" pos:end="71:31"><expr pos:start="71:21" pos:end="71:31"><name pos:start="71:21" pos:end="71:31"><name pos:start="71:21" pos:end="71:23">ctx</name><operator pos:start="71:24" pos:end="71:24">.</operator><name pos:start="71:25" pos:end="71:31">mem_idx</name></name></expr></argument>, <argument pos:start="71:34" pos:end="71:43"><expr pos:start="71:34" pos:end="71:43"><name pos:start="71:34" pos:end="71:43"><name pos:start="71:34" pos:end="71:36">ctx</name><operator pos:start="71:37" pos:end="71:37">.</operator><name pos:start="71:38" pos:end="71:43">hflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    <while pos:start="75:5" pos:end="153:5">while <condition pos:start="75:11" pos:end="75:62">(<expr pos:start="75:12" pos:end="75:61"><name pos:start="75:12" pos:end="75:21"><name pos:start="75:12" pos:end="75:14">ctx</name><operator pos:start="75:15" pos:end="75:15">.</operator><name pos:start="75:16" pos:end="75:21">bstate</name></name> <operator pos:start="75:23" pos:end="75:24">==</operator> <name pos:start="75:26" pos:end="75:32">BS_NONE</name> <operator pos:start="75:34" pos:end="75:35">&amp;&amp;</operator> <name pos:start="75:37" pos:end="75:47">gen_opc_ptr</name> <operator pos:start="75:49" pos:end="75:49">&lt;</operator> <name pos:start="75:51" pos:end="75:61">gen_opc_end</name></expr>)</condition> <block pos:start="75:64" pos:end="153:5">{<block_content pos:start="77:9" pos:end="152:0">

        <if_stmt pos:start="77:9" pos:end="101:9"><if pos:start="77:9" pos:end="101:9">if <condition pos:start="77:12" pos:end="77:36">(<expr pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:15">env</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:31">nb_breakpoints</name></name> <operator pos:start="77:33" pos:end="77:33">&gt;</operator> <literal type="number" pos:start="77:35" pos:end="77:35">0</literal></expr>)</condition> <block pos:start="77:38" pos:end="101:9">{<block_content pos:start="79:13" pos:end="99:13">

            <for pos:start="79:13" pos:end="99:13">for<control pos:start="79:16" pos:end="79:52">(<init pos:start="79:17" pos:end="79:22"><expr pos:start="79:17" pos:end="79:21"><name pos:start="79:17" pos:end="79:17">j</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <literal type="number" pos:start="79:21" pos:end="79:21">0</literal></expr>;</init> <condition pos:start="79:24" pos:end="79:47"><expr pos:start="79:24" pos:end="79:46"><name pos:start="79:24" pos:end="79:24">j</name> <operator pos:start="79:26" pos:end="79:26">&lt;</operator> <name pos:start="79:28" pos:end="79:46"><name pos:start="79:28" pos:end="79:30">env</name><operator pos:start="79:31" pos:end="79:32">-&gt;</operator><name pos:start="79:33" pos:end="79:46">nb_breakpoints</name></name></expr>;</condition> <incr pos:start="79:49" pos:end="79:51"><expr pos:start="79:49" pos:end="79:51"><name pos:start="79:49" pos:end="79:49">j</name><operator pos:start="79:50" pos:end="79:51">++</operator></expr></incr>)</control> <block pos:start="79:54" pos:end="99:13">{<block_content pos:start="81:17" pos:end="97:17">

                <if_stmt pos:start="81:17" pos:end="97:17"><if pos:start="81:17" pos:end="97:17">if <condition pos:start="81:20" pos:end="81:50">(<expr pos:start="81:21" pos:end="81:49"><name pos:start="81:21" pos:end="81:39"><name pos:start="81:21" pos:end="81:23">env</name><operator pos:start="81:24" pos:end="81:25">-&gt;</operator><name pos:start="81:26" pos:end="81:36">breakpoints</name><index pos:start="81:37" pos:end="81:39">[<expr pos:start="81:38" pos:end="81:38"><name pos:start="81:38" pos:end="81:38">j</name></expr>]</index></name> <operator pos:start="81:41" pos:end="81:42">==</operator> <name pos:start="81:44" pos:end="81:49"><name pos:start="81:44" pos:end="81:46">ctx</name><operator pos:start="81:47" pos:end="81:47">.</operator><name pos:start="81:48" pos:end="81:49">pc</name></name></expr>)</condition> <block pos:start="81:52" pos:end="97:17">{<block_content pos:start="83:21" pos:end="95:41">

                    <expr_stmt pos:start="83:21" pos:end="83:44"><expr pos:start="83:21" pos:end="83:43"><call pos:start="83:21" pos:end="83:43"><name pos:start="83:21" pos:end="83:34">save_cpu_state</name><argument_list pos:start="83:35" pos:end="83:43">(<argument pos:start="83:36" pos:end="83:39"><expr pos:start="83:36" pos:end="83:39"><operator pos:start="83:36" pos:end="83:36">&amp;</operator><name pos:start="83:37" pos:end="83:39">ctx</name></expr></argument>, <argument pos:start="83:42" pos:end="83:42"><expr pos:start="83:42" pos:end="83:42"><literal type="number" pos:start="83:42" pos:end="83:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="85:21" pos:end="85:43"><expr pos:start="85:21" pos:end="85:42"><name pos:start="85:21" pos:end="85:30"><name pos:start="85:21" pos:end="85:23">ctx</name><operator pos:start="85:24" pos:end="85:24">.</operator><name pos:start="85:25" pos:end="85:30">bstate</name></name> <operator pos:start="85:32" pos:end="85:32">=</operator> <name pos:start="85:34" pos:end="85:42">BS_BRANCH</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:35"><expr pos:start="87:21" pos:end="87:34"><call pos:start="87:21" pos:end="87:34"><name pos:start="87:21" pos:end="87:32">gen_op_debug</name><argument_list pos:start="87:33" pos:end="87:34">()</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="89:21" pos:end="91:54">/* Include the breakpoint location or the tb won't

                     * be flushed when it must be.  */</comment>

                    <expr_stmt pos:start="93:21" pos:end="93:32"><expr pos:start="93:21" pos:end="93:31"><name pos:start="93:21" pos:end="93:26"><name pos:start="93:21" pos:end="93:23">ctx</name><operator pos:start="93:24" pos:end="93:24">.</operator><name pos:start="93:25" pos:end="93:26">pc</name></name> <operator pos:start="93:28" pos:end="93:29">+=</operator> <literal type="number" pos:start="93:31" pos:end="93:31">4</literal></expr>;</expr_stmt>

                    <goto pos:start="95:21" pos:end="95:41">goto <name pos:start="95:26" pos:end="95:40">done_generating</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="105:9" pos:end="125:9"><if pos:start="105:9" pos:end="125:9">if <condition pos:start="105:12" pos:end="105:22">(<expr pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:21">search_pc</name></expr>)</condition> <block pos:start="105:24" pos:end="125:9">{<block_content pos:start="107:13" pos:end="123:40">

            <expr_stmt pos:start="107:13" pos:end="107:42"><expr pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:13">j</name> <operator pos:start="107:15" pos:end="107:15">=</operator> <name pos:start="107:17" pos:end="107:27">gen_opc_ptr</name> <operator pos:start="107:29" pos:end="107:29">-</operator> <name pos:start="107:31" pos:end="107:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="117:13"><if pos:start="109:13" pos:end="117:13">if <condition pos:start="109:16" pos:end="109:23">(<expr pos:start="109:17" pos:end="109:22"><name pos:start="109:17" pos:end="109:18">lj</name> <operator pos:start="109:20" pos:end="109:20">&lt;</operator> <name pos:start="109:22" pos:end="109:22">j</name></expr>)</condition> <block pos:start="109:25" pos:end="117:13">{<block_content pos:start="111:17" pos:end="115:50">

                <expr_stmt pos:start="111:17" pos:end="111:21"><expr pos:start="111:17" pos:end="111:20"><name pos:start="111:17" pos:end="111:18">lj</name><operator pos:start="111:19" pos:end="111:20">++</operator></expr>;</expr_stmt>

                <while pos:start="113:17" pos:end="115:50">while <condition pos:start="113:23" pos:end="113:30">(<expr pos:start="113:24" pos:end="113:29"><name pos:start="113:24" pos:end="113:25">lj</name> <operator pos:start="113:27" pos:end="113:27">&lt;</operator> <name pos:start="113:29" pos:end="113:29">j</name></expr>)</condition><block type="pseudo" pos:start="115:21" pos:end="115:50"><block_content pos:start="115:21" pos:end="115:50">

                    <expr_stmt pos:start="115:21" pos:end="115:50"><expr pos:start="115:21" pos:end="115:49"><name pos:start="115:21" pos:end="115:45"><name pos:start="115:21" pos:end="115:39">gen_opc_instr_start</name><index pos:start="115:40" pos:end="115:45">[<expr pos:start="115:41" pos:end="115:44"><name pos:start="115:41" pos:end="115:42">lj</name><operator pos:start="115:43" pos:end="115:44">++</operator></expr>]</index></name> <operator pos:start="115:47" pos:end="115:47">=</operator> <literal type="number" pos:start="115:49" pos:end="115:49">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:36"><expr pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:26"><name pos:start="119:13" pos:end="119:22">gen_opc_pc</name><index pos:start="119:23" pos:end="119:26">[<expr pos:start="119:24" pos:end="119:25"><name pos:start="119:24" pos:end="119:25">lj</name></expr>]</index></name> <operator pos:start="119:28" pos:end="119:28">=</operator> <name pos:start="119:30" pos:end="119:35"><name pos:start="119:30" pos:end="119:32">ctx</name><operator pos:start="119:33" pos:end="119:33">.</operator><name pos:start="119:34" pos:end="119:35">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:63"><expr pos:start="121:13" pos:end="121:62"><name pos:start="121:13" pos:end="121:30"><name pos:start="121:13" pos:end="121:26">gen_opc_hflags</name><index pos:start="121:27" pos:end="121:30">[<expr pos:start="121:28" pos:end="121:29"><name pos:start="121:28" pos:end="121:29">lj</name></expr>]</index></name> <operator pos:start="121:32" pos:end="121:32">=</operator> <name pos:start="121:34" pos:end="121:43"><name pos:start="121:34" pos:end="121:36">ctx</name><operator pos:start="121:37" pos:end="121:37">.</operator><name pos:start="121:38" pos:end="121:43">hflags</name></name> <operator pos:start="121:45" pos:end="121:45">&amp;</operator> <name pos:start="121:47" pos:end="121:62">MIPS_HFLAG_BMASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:40"><expr pos:start="123:13" pos:end="123:39"><name pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:31">gen_opc_instr_start</name><index pos:start="123:32" pos:end="123:35">[<expr pos:start="123:33" pos:end="123:34"><name pos:start="123:33" pos:end="123:34">lj</name></expr>]</index></name> <operator pos:start="123:37" pos:end="123:37">=</operator> <literal type="number" pos:start="123:39" pos:end="123:39">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:38"><expr pos:start="127:9" pos:end="127:37"><name pos:start="127:9" pos:end="127:18"><name pos:start="127:9" pos:end="127:11">ctx</name><operator pos:start="127:12" pos:end="127:12">.</operator><name pos:start="127:13" pos:end="127:18">opcode</name></name> <operator pos:start="127:20" pos:end="127:20">=</operator> <call pos:start="127:22" pos:end="127:37"><name pos:start="127:22" pos:end="127:29">ldl_code</name><argument_list pos:start="127:30" pos:end="127:37">(<argument pos:start="127:31" pos:end="127:36"><expr pos:start="127:31" pos:end="127:36"><name pos:start="127:31" pos:end="127:36"><name pos:start="127:31" pos:end="127:33">ctx</name><operator pos:start="127:34" pos:end="127:34">.</operator><name pos:start="127:35" pos:end="127:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><call pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:18">decode_opc</name><argument_list pos:start="129:19" pos:end="129:29">(<argument pos:start="129:20" pos:end="129:22"><expr pos:start="129:20" pos:end="129:22"><name pos:start="129:20" pos:end="129:22">env</name></expr></argument>, <argument pos:start="129:25" pos:end="129:28"><expr pos:start="129:25" pos:end="129:28"><operator pos:start="129:25" pos:end="129:25">&amp;</operator><name pos:start="129:26" pos:end="129:28">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:20"><expr pos:start="131:9" pos:end="131:19"><name pos:start="131:9" pos:end="131:14"><name pos:start="131:9" pos:end="131:11">ctx</name><operator pos:start="131:12" pos:end="131:12">.</operator><name pos:start="131:13" pos:end="131:14">pc</name></name> <operator pos:start="131:16" pos:end="131:17">+=</operator> <literal type="number" pos:start="131:19" pos:end="131:19">4</literal></expr>;</expr_stmt>



        <if_stmt pos:start="135:9" pos:end="137:18"><if pos:start="135:9" pos:end="137:18">if <condition pos:start="135:12" pos:end="135:36">(<expr pos:start="135:13" pos:end="135:35"><name pos:start="135:13" pos:end="135:35"><name pos:start="135:13" pos:end="135:15">env</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:35">singlestep_enabled</name></name></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:18"><block_content pos:start="137:13" pos:end="137:18">

            <break pos:start="137:13" pos:end="137:18">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="141:9" pos:end="148:0"><if pos:start="141:9" pos:end="148:0">if <condition pos:start="141:12" pos:end="141:51">(<expr pos:start="141:13" pos:end="141:50"><operator pos:start="141:13" pos:end="141:13">(</operator><name pos:start="141:14" pos:end="141:19"><name pos:start="141:14" pos:end="141:16">ctx</name><operator pos:start="141:17" pos:end="141:17">.</operator><name pos:start="141:18" pos:end="141:19">pc</name></name> <operator pos:start="141:21" pos:end="141:21">&amp;</operator> <operator pos:start="141:23" pos:end="141:23">(</operator><name pos:start="141:24" pos:end="141:39">TARGET_PAGE_SIZE</name> <operator pos:start="141:41" pos:end="141:41">-</operator> <literal type="number" pos:start="141:43" pos:end="141:43">1</literal><operator pos:start="141:44" pos:end="141:44">)</operator><operator pos:start="141:45" pos:end="141:45">)</operator> <operator pos:start="141:47" pos:end="141:48">==</operator> <literal type="number" pos:start="141:50" pos:end="141:50">0</literal></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="148:0"><block_content pos:start="143:13" pos:end="148:0">

            <break pos:start="143:13" pos:end="148:0">break;</break></block_content></block></if></if_stmt>



<cpp:if pos:start="147:1" pos:end="147:30">#<cpp:directive pos:start="147:2" pos:end="147:3">if</cpp:directive> <expr pos:start="147:5" pos:end="147:30"><call pos:start="147:5" pos:end="147:30"><name pos:start="147:5" pos:end="147:11">defined</name> <argument_list pos:start="147:13" pos:end="147:30">(<argument pos:start="147:14" pos:end="147:29"><expr pos:start="147:14" pos:end="147:29"><name pos:start="147:14" pos:end="147:29">MIPS_SINGLE_STEP</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <break pos:start="149:9" pos:end="152:0">break;</break>

<cpp:endif pos:start="151:1" pos:end="151:6">#<cpp:directive pos:start="151:2" pos:end="151:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></while>

    <if_stmt pos:start="155:5" pos:end="197:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:32">(<expr pos:start="155:9" pos:end="155:31"><name pos:start="155:9" pos:end="155:31"><name pos:start="155:9" pos:end="155:11">env</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:31">singlestep_enabled</name></name></expr>)</condition> <block pos:start="155:34" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:23">

        <expr_stmt pos:start="157:9" pos:end="157:52"><expr pos:start="157:9" pos:end="157:51"><call pos:start="157:9" pos:end="157:51"><name pos:start="157:9" pos:end="157:22">save_cpu_state</name><argument_list pos:start="157:23" pos:end="157:51">(<argument pos:start="157:24" pos:end="157:27"><expr pos:start="157:24" pos:end="157:27"><operator pos:start="157:24" pos:end="157:24">&amp;</operator><name pos:start="157:25" pos:end="157:27">ctx</name></expr></argument>, <argument pos:start="157:30" pos:end="157:50"><expr pos:start="157:30" pos:end="157:50"><name pos:start="157:30" pos:end="157:39"><name pos:start="157:30" pos:end="157:32">ctx</name><operator pos:start="157:33" pos:end="157:33">.</operator><name pos:start="157:34" pos:end="157:39">bstate</name></name> <operator pos:start="157:41" pos:end="157:42">==</operator> <name pos:start="157:44" pos:end="157:50">BS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:23"><expr pos:start="159:9" pos:end="159:22"><call pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:20">gen_op_debug</name><argument_list pos:start="159:21" pos:end="159:22">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="161:7" pos:end="197:5">else <block pos:start="161:12" pos:end="197:5">{<block_content pos:start="163:9" pos:end="195:9">

	<switch pos:start="163:9" pos:end="195:9">switch <condition pos:start="163:16" pos:end="163:27">(<expr pos:start="163:17" pos:end="163:26"><name pos:start="163:17" pos:end="163:26"><name pos:start="163:17" pos:end="163:19">ctx</name><operator pos:start="163:20" pos:end="163:20">.</operator><name pos:start="163:21" pos:end="163:26">bstate</name></name></expr>)</condition> <block pos:start="163:29" pos:end="195:9">{<block_content pos:start="165:9" pos:end="193:18">

        <case pos:start="165:9" pos:end="165:21">case <expr pos:start="165:14" pos:end="165:20"><name pos:start="165:14" pos:end="165:20">BS_STOP</name></expr>:</case>

            <expr_stmt pos:start="167:13" pos:end="167:53"><expr pos:start="167:13" pos:end="167:52"><call pos:start="167:13" pos:end="167:52"><name pos:start="167:13" pos:end="167:30">tcg_gen_helper_0_0</name><argument_list pos:start="167:31" pos:end="167:52">(<argument pos:start="167:32" pos:end="167:51"><expr pos:start="167:32" pos:end="167:51"><name pos:start="167:32" pos:end="167:51">do_interrupt_restart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:41"><expr pos:start="169:13" pos:end="169:40"><call pos:start="169:13" pos:end="169:40"><name pos:start="169:13" pos:end="169:23">gen_goto_tb</name><argument_list pos:start="169:24" pos:end="169:40">(<argument pos:start="169:25" pos:end="169:28"><expr pos:start="169:25" pos:end="169:28"><operator pos:start="169:25" pos:end="169:25">&amp;</operator><name pos:start="169:26" pos:end="169:28">ctx</name></expr></argument>, <argument pos:start="169:31" pos:end="169:31"><expr pos:start="169:31" pos:end="169:31"><literal type="number" pos:start="169:31" pos:end="169:31">0</literal></expr></argument>, <argument pos:start="169:34" pos:end="169:39"><expr pos:start="169:34" pos:end="169:39"><name pos:start="169:34" pos:end="169:39"><name pos:start="169:34" pos:end="169:36">ctx</name><operator pos:start="169:37" pos:end="169:37">.</operator><name pos:start="169:38" pos:end="169:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="171:13" pos:end="171:18">break;</break>

        <case pos:start="173:9" pos:end="173:21">case <expr pos:start="173:14" pos:end="173:20"><name pos:start="173:14" pos:end="173:20">BS_NONE</name></expr>:</case>

            <expr_stmt pos:start="175:13" pos:end="175:36"><expr pos:start="175:13" pos:end="175:35"><call pos:start="175:13" pos:end="175:35"><name pos:start="175:13" pos:end="175:26">save_cpu_state</name><argument_list pos:start="175:27" pos:end="175:35">(<argument pos:start="175:28" pos:end="175:31"><expr pos:start="175:28" pos:end="175:31"><operator pos:start="175:28" pos:end="175:28">&amp;</operator><name pos:start="175:29" pos:end="175:31">ctx</name></expr></argument>, <argument pos:start="175:34" pos:end="175:34"><expr pos:start="175:34" pos:end="175:34"><literal type="number" pos:start="175:34" pos:end="175:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:41"><expr pos:start="177:13" pos:end="177:40"><call pos:start="177:13" pos:end="177:40"><name pos:start="177:13" pos:end="177:23">gen_goto_tb</name><argument_list pos:start="177:24" pos:end="177:40">(<argument pos:start="177:25" pos:end="177:28"><expr pos:start="177:25" pos:end="177:28"><operator pos:start="177:25" pos:end="177:25">&amp;</operator><name pos:start="177:26" pos:end="177:28">ctx</name></expr></argument>, <argument pos:start="177:31" pos:end="177:31"><expr pos:start="177:31" pos:end="177:31"><literal type="number" pos:start="177:31" pos:end="177:31">0</literal></expr></argument>, <argument pos:start="177:34" pos:end="177:39"><expr pos:start="177:34" pos:end="177:39"><name pos:start="177:34" pos:end="177:39"><name pos:start="177:34" pos:end="177:36">ctx</name><operator pos:start="177:37" pos:end="177:37">.</operator><name pos:start="177:38" pos:end="177:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="179:13" pos:end="179:18">break;</break>

        <case pos:start="181:9" pos:end="181:21">case <expr pos:start="181:14" pos:end="181:20"><name pos:start="181:14" pos:end="181:20">BS_EXCP</name></expr>:</case>

            <expr_stmt pos:start="183:13" pos:end="183:53"><expr pos:start="183:13" pos:end="183:52"><call pos:start="183:13" pos:end="183:52"><name pos:start="183:13" pos:end="183:30">tcg_gen_helper_0_0</name><argument_list pos:start="183:31" pos:end="183:52">(<argument pos:start="183:32" pos:end="183:51"><expr pos:start="183:32" pos:end="183:51"><name pos:start="183:32" pos:end="183:51">do_interrupt_restart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:31"><expr pos:start="185:13" pos:end="185:30"><call pos:start="185:13" pos:end="185:30"><name pos:start="185:13" pos:end="185:27">tcg_gen_exit_tb</name><argument_list pos:start="185:28" pos:end="185:30">(<argument pos:start="185:29" pos:end="185:29"><expr pos:start="185:29" pos:end="185:29"><literal type="number" pos:start="185:29" pos:end="185:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        <case pos:start="189:9" pos:end="189:23">case <expr pos:start="189:14" pos:end="189:22"><name pos:start="189:14" pos:end="189:22">BS_BRANCH</name></expr>:</case>

        <default pos:start="191:9" pos:end="191:16">default:</default>

            <break pos:start="193:13" pos:end="193:18">break;</break>

	</block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

<label pos:start="199:1" pos:end="199:16"><name pos:start="199:1" pos:end="199:15">done_generating</name>:</label>

    <expr_stmt pos:start="201:5" pos:end="201:32"><expr pos:start="201:5" pos:end="201:31"><operator pos:start="201:5" pos:end="201:5">*</operator><name pos:start="201:6" pos:end="201:16">gen_opc_ptr</name> <operator pos:start="201:18" pos:end="201:18">=</operator> <name pos:start="201:20" pos:end="201:31">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="222:0"><if pos:start="203:5" pos:end="213:5">if <condition pos:start="203:8" pos:end="203:18">(<expr pos:start="203:9" pos:end="203:17"><name pos:start="203:9" pos:end="203:17">search_pc</name></expr>)</condition> <block pos:start="203:20" pos:end="213:5">{<block_content pos:start="205:9" pos:end="211:42">

        <expr_stmt pos:start="205:9" pos:end="205:38"><expr pos:start="205:9" pos:end="205:37"><name pos:start="205:9" pos:end="205:9">j</name> <operator pos:start="205:11" pos:end="205:11">=</operator> <name pos:start="205:13" pos:end="205:23">gen_opc_ptr</name> <operator pos:start="205:25" pos:end="205:25">-</operator> <name pos:start="205:27" pos:end="205:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:13"><expr pos:start="207:9" pos:end="207:12"><name pos:start="207:9" pos:end="207:10">lj</name><operator pos:start="207:11" pos:end="207:12">++</operator></expr>;</expr_stmt>

        <while pos:start="209:9" pos:end="211:42">while <condition pos:start="209:15" pos:end="209:23">(<expr pos:start="209:16" pos:end="209:22"><name pos:start="209:16" pos:end="209:17">lj</name> <operator pos:start="209:19" pos:end="209:20">&lt;=</operator> <name pos:start="209:22" pos:end="209:22">j</name></expr>)</condition><block type="pseudo" pos:start="211:13" pos:end="211:42"><block_content pos:start="211:13" pos:end="211:42">

            <expr_stmt pos:start="211:13" pos:end="211:42"><expr pos:start="211:13" pos:end="211:41"><name pos:start="211:13" pos:end="211:37"><name pos:start="211:13" pos:end="211:31">gen_opc_instr_start</name><index pos:start="211:32" pos:end="211:37">[<expr pos:start="211:33" pos:end="211:36"><name pos:start="211:33" pos:end="211:34">lj</name><operator pos:start="211:35" pos:end="211:36">++</operator></expr>]</index></name> <operator pos:start="211:39" pos:end="211:39">=</operator> <literal type="number" pos:start="211:41" pos:end="211:41">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="213:7" pos:end="222:0">else <block pos:start="213:12" pos:end="222:0">{<block_content pos:start="215:9" pos:end="215:37">

        <expr_stmt pos:start="215:9" pos:end="215:37"><expr pos:start="215:9" pos:end="215:36"><name pos:start="215:9" pos:end="215:16"><name pos:start="215:9" pos:end="215:10">tb</name><operator pos:start="215:11" pos:end="215:12">-&gt;</operator><name pos:start="215:13" pos:end="215:16">size</name></name> <operator pos:start="215:18" pos:end="215:18">=</operator> <name pos:start="215:20" pos:end="215:25"><name pos:start="215:20" pos:end="215:22">ctx</name><operator pos:start="215:23" pos:end="215:23">.</operator><name pos:start="215:24" pos:end="215:25">pc</name></name> <operator pos:start="215:27" pos:end="215:27">-</operator> <name pos:start="215:29" pos:end="215:36">pc_start</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="219:1" pos:end="219:18">#<cpp:directive pos:start="219:2" pos:end="219:6">ifdef</cpp:directive> <name pos:start="219:8" pos:end="219:18">DEBUG_DISAS</name></cpp:ifdef>

<cpp:if pos:start="221:1" pos:end="221:28">#<cpp:directive pos:start="221:2" pos:end="221:3">if</cpp:directive> <expr pos:start="221:5" pos:end="221:28"><name pos:start="221:5" pos:end="221:11">defined</name> <name pos:start="221:13" pos:end="221:28">MIPS_DEBUG_DISAS</name></expr></cpp:if>

    <if_stmt pos:start="223:5" pos:end="228:0"><if pos:start="223:5" pos:end="228:0">if <condition pos:start="223:8" pos:end="223:37">(<expr pos:start="223:9" pos:end="223:36"><name pos:start="223:9" pos:end="223:16">loglevel</name> <operator pos:start="223:18" pos:end="223:18">&amp;</operator> <name pos:start="223:20" pos:end="223:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition><block type="pseudo" pos:start="225:9" pos:end="228:0"><block_content pos:start="225:9" pos:end="228:0">

        <expr_stmt pos:start="225:9" pos:end="228:0"><expr pos:start="225:9" pos:end="225:30"><call pos:start="225:9" pos:end="225:30"><name pos:start="225:9" pos:end="225:15">fprintf</name><argument_list pos:start="225:16" pos:end="225:30">(<argument pos:start="225:17" pos:end="225:23"><expr pos:start="225:17" pos:end="225:23"><name pos:start="225:17" pos:end="225:23">logfile</name></expr></argument>, <argument pos:start="225:26" pos:end="225:29"><expr pos:start="225:26" pos:end="225:29"><literal type="string" pos:start="225:26" pos:end="225:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="227:1" pos:end="227:6">#<cpp:directive pos:start="227:2" pos:end="227:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="229:5" pos:end="237:5"><if pos:start="229:5" pos:end="237:5">if <condition pos:start="229:8" pos:end="229:37">(<expr pos:start="229:9" pos:end="229:36"><name pos:start="229:9" pos:end="229:16">loglevel</name> <operator pos:start="229:18" pos:end="229:18">&amp;</operator> <name pos:start="229:20" pos:end="229:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="229:39" pos:end="237:5">{<block_content pos:start="231:9" pos:end="235:31">

        <expr_stmt pos:start="231:9" pos:end="231:62"><expr pos:start="231:9" pos:end="231:61"><call pos:start="231:9" pos:end="231:61"><name pos:start="231:9" pos:end="231:15">fprintf</name><argument_list pos:start="231:16" pos:end="231:61">(<argument pos:start="231:17" pos:end="231:23"><expr pos:start="231:17" pos:end="231:23"><name pos:start="231:17" pos:end="231:23">logfile</name></expr></argument>, <argument pos:start="231:26" pos:end="231:35"><expr pos:start="231:26" pos:end="231:35"><literal type="string" pos:start="231:26" pos:end="231:35">"IN: %s\n"</literal></expr></argument>, <argument pos:start="231:38" pos:end="231:60"><expr pos:start="231:38" pos:end="231:60"><call pos:start="231:38" pos:end="231:60"><name pos:start="231:38" pos:end="231:50">lookup_symbol</name><argument_list pos:start="231:51" pos:end="231:60">(<argument pos:start="231:52" pos:end="231:59"><expr pos:start="231:52" pos:end="231:59"><name pos:start="231:52" pos:end="231:59">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:62"><expr pos:start="233:9" pos:end="233:61"><call pos:start="233:9" pos:end="233:61"><name pos:start="233:9" pos:end="233:20">target_disas</name><argument_list pos:start="233:21" pos:end="233:61">(<argument pos:start="233:22" pos:end="233:28"><expr pos:start="233:22" pos:end="233:28"><name pos:start="233:22" pos:end="233:28">logfile</name></expr></argument>, <argument pos:start="233:31" pos:end="233:38"><expr pos:start="233:31" pos:end="233:38"><name pos:start="233:31" pos:end="233:38">pc_start</name></expr></argument>, <argument pos:start="233:41" pos:end="233:57"><expr pos:start="233:41" pos:end="233:57"><name pos:start="233:41" pos:end="233:46"><name pos:start="233:41" pos:end="233:43">ctx</name><operator pos:start="233:44" pos:end="233:44">.</operator><name pos:start="233:45" pos:end="233:46">pc</name></name> <operator pos:start="233:48" pos:end="233:48">-</operator> <name pos:start="233:50" pos:end="233:57">pc_start</name></expr></argument>, <argument pos:start="233:60" pos:end="233:60"><expr pos:start="233:60" pos:end="233:60"><literal type="number" pos:start="233:60" pos:end="233:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:31"><expr pos:start="235:9" pos:end="235:30"><call pos:start="235:9" pos:end="235:30"><name pos:start="235:9" pos:end="235:15">fprintf</name><argument_list pos:start="235:16" pos:end="235:30">(<argument pos:start="235:17" pos:end="235:23"><expr pos:start="235:17" pos:end="235:23"><name pos:start="235:17" pos:end="235:23">logfile</name></expr></argument>, <argument pos:start="235:26" pos:end="235:29"><expr pos:start="235:26" pos:end="235:29"><literal type="string" pos:start="235:26" pos:end="235:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="239:5" pos:end="246:0"><if pos:start="239:5" pos:end="246:0">if <condition pos:start="239:8" pos:end="239:34">(<expr pos:start="239:9" pos:end="239:33"><name pos:start="239:9" pos:end="239:16">loglevel</name> <operator pos:start="239:18" pos:end="239:18">&amp;</operator> <name pos:start="239:20" pos:end="239:33">CPU_LOG_TB_CPU</name></expr>)</condition> <block pos:start="239:36" pos:end="246:0">{<block_content pos:start="241:9" pos:end="241:79">

        <expr_stmt pos:start="241:9" pos:end="241:79"><expr pos:start="241:9" pos:end="241:78"><call pos:start="241:9" pos:end="241:78"><name pos:start="241:9" pos:end="241:15">fprintf</name><argument_list pos:start="241:16" pos:end="241:78">(<argument pos:start="241:17" pos:end="241:23"><expr pos:start="241:17" pos:end="241:23"><name pos:start="241:17" pos:end="241:23">logfile</name></expr></argument>, <argument pos:start="241:26" pos:end="241:53"><expr pos:start="241:26" pos:end="241:53"><literal type="string" pos:start="241:26" pos:end="241:53">"---------------- %d %08x\n"</literal></expr></argument>, <argument pos:start="241:56" pos:end="241:65"><expr pos:start="241:56" pos:end="241:65"><name pos:start="241:56" pos:end="241:65"><name pos:start="241:56" pos:end="241:58">ctx</name><operator pos:start="241:59" pos:end="241:59">.</operator><name pos:start="241:60" pos:end="241:65">bstate</name></name></expr></argument>, <argument pos:start="241:68" pos:end="241:77"><expr pos:start="241:68" pos:end="241:77"><name pos:start="241:68" pos:end="241:77"><name pos:start="241:68" pos:end="241:70">ctx</name><operator pos:start="241:71" pos:end="241:71">.</operator><name pos:start="241:72" pos:end="241:77">hflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="245:1" pos:end="245:6">#<cpp:directive pos:start="245:2" pos:end="245:6">endif</cpp:directive></cpp:endif>



    <return pos:start="249:5" pos:end="249:13">return <expr pos:start="249:12" pos:end="249:12"><literal type="number" pos:start="249:12" pos:end="249:12">0</literal></expr>;</return>

</block_content>}</block>
</unit>
