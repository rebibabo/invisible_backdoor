<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14797.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">scsi_disk_emulate_unmap</name><parameter_list pos:start="1:36" pos:end="1:67">(<parameter pos:start="1:37" pos:end="1:50"><decl pos:start="1:37" pos:end="1:50"><type pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:47">SCSIDiskReq</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">r</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:66"><decl pos:start="1:53" pos:end="1:66"><type pos:start="1:53" pos:end="1:66"><name pos:start="1:53" pos:end="1:59">uint8_t</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:66">inbuf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:55">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SCSIDiskState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:65">= <expr pos:start="5:24" pos:end="5:65"><call pos:start="5:24" pos:end="5:65"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:65">(<argument pos:start="5:34" pos:end="5:46"><expr pos:start="5:34" pos:end="5:46"><name pos:start="5:34" pos:end="5:46">SCSIDiskState</name></expr></argument>, <argument pos:start="5:49" pos:end="5:52"><expr pos:start="5:49" pos:end="5:52"><name pos:start="5:49" pos:end="5:52">qdev</name></expr></argument>, <argument pos:start="5:55" pos:end="5:64"><expr pos:start="5:55" pos:end="5:64"><name pos:start="5:55" pos:end="5:64"><name pos:start="5:55" pos:end="5:55">r</name><operator pos:start="5:56" pos:end="5:57">-&gt;</operator><name pos:start="5:58" pos:end="5:60">req</name><operator pos:start="5:61" pos:end="5:61">.</operator><name pos:start="5:62" pos:end="5:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">p</name> <init pos:start="7:16" pos:end="7:22">= <expr pos:start="7:18" pos:end="7:22"><name pos:start="7:18" pos:end="7:22">inbuf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name> <init pos:start="9:13" pos:end="9:29">= <expr pos:start="9:15" pos:end="9:29"><name pos:start="9:15" pos:end="9:29"><name pos:start="9:15" pos:end="9:15">r</name><operator pos:start="9:16" pos:end="9:17">-&gt;</operator><name pos:start="9:18" pos:end="9:20">req</name><operator pos:start="9:21" pos:end="9:21">.</operator><name pos:start="9:22" pos:end="9:24">cmd</name><operator pos:start="9:25" pos:end="9:25">.</operator><name pos:start="9:26" pos:end="9:29">xfer</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">UnmapCBData</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">data</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:27">/* Reject ANCHOR=1.  */</comment>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:32">(<expr pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:9">r</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:14">req</name><operator pos:start="17:15" pos:end="17:15">.</operator><name pos:start="17:16" pos:end="17:18">cmd</name><operator pos:start="17:19" pos:end="17:19">.</operator><name pos:start="17:20" pos:end="17:22">buf</name><index pos:start="17:23" pos:end="17:25">[<expr pos:start="17:24" pos:end="17:24"><literal type="number" pos:start="17:24" pos:end="17:24">1</literal></expr>]</index></name> <operator pos:start="17:27" pos:end="17:27">&amp;</operator> <literal type="number" pos:start="17:29" pos:end="17:31">0x1</literal></expr>)</condition> <block pos:start="17:34" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:27">

        <goto pos:start="19:9" pos:end="19:27">goto <name pos:start="19:14" pos:end="19:26">invalid_field</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">len</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">8</literal></expr>)</condition> <block pos:start="25:18" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:31">

        <goto pos:start="27:9" pos:end="27:31">goto <name pos:start="27:14" pos:end="27:30">invalid_param_len</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:35">(<expr pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:11">len</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <call pos:start="31:15" pos:end="31:30"><name pos:start="31:15" pos:end="31:23">lduw_be_p</name><argument_list pos:start="31:24" pos:end="31:30">(<argument pos:start="31:25" pos:end="31:29"><expr pos:start="31:25" pos:end="31:29"><operator pos:start="31:25" pos:end="31:25">&amp;</operator><name pos:start="31:26" pos:end="31:29"><name pos:start="31:26" pos:end="31:26">p</name><index pos:start="31:27" pos:end="31:29">[<expr pos:start="31:28" pos:end="31:28"><literal type="number" pos:start="31:28" pos:end="31:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="31:32" pos:end="31:32">+</operator> <literal type="number" pos:start="31:34" pos:end="31:34">2</literal></expr>)</condition> <block pos:start="31:37" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:31">

        <goto pos:start="33:9" pos:end="33:31">goto <name pos:start="33:14" pos:end="33:30">invalid_param_len</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:35">(<expr pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:11">len</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <call pos:start="37:15" pos:end="37:30"><name pos:start="37:15" pos:end="37:23">lduw_be_p</name><argument_list pos:start="37:24" pos:end="37:30">(<argument pos:start="37:25" pos:end="37:29"><expr pos:start="37:25" pos:end="37:29"><operator pos:start="37:25" pos:end="37:25">&amp;</operator><name pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:26">p</name><index pos:start="37:27" pos:end="37:29">[<expr pos:start="37:28" pos:end="37:28"><literal type="number" pos:start="37:28" pos:end="37:28">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="37:32" pos:end="37:32">+</operator> <literal type="number" pos:start="37:34" pos:end="37:34">8</literal></expr>)</condition> <block pos:start="37:37" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:31">

        <goto pos:start="39:9" pos:end="39:31">goto <name pos:start="39:14" pos:end="39:30">invalid_param_len</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:30">(<expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:17">lduw_be_p</name><argument_list pos:start="43:18" pos:end="43:24">(<argument pos:start="43:19" pos:end="43:23"><expr pos:start="43:19" pos:end="43:23"><operator pos:start="43:19" pos:end="43:19">&amp;</operator><name pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:20">p</name><index pos:start="43:21" pos:end="43:23">[<expr pos:start="43:22" pos:end="43:22"><literal type="number" pos:start="43:22" pos:end="43:22">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="43:26" pos:end="43:26">&amp;</operator> <literal type="number" pos:start="43:28" pos:end="43:29">15</literal></expr>)</condition> <block pos:start="43:32" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:31">

        <goto pos:start="45:9" pos:end="45:31">goto <name pos:start="45:14" pos:end="45:30">invalid_param_len</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:43">(<expr pos:start="51:9" pos:end="51:42"><call pos:start="51:9" pos:end="51:42"><name pos:start="51:9" pos:end="51:25">bdrv_is_read_only</name><argument_list pos:start="51:26" pos:end="51:42">(<argument pos:start="51:27" pos:end="51:41"><expr pos:start="51:27" pos:end="51:41"><name pos:start="51:27" pos:end="51:41"><name pos:start="51:27" pos:end="51:27">s</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:33">qdev</name><operator pos:start="51:34" pos:end="51:34">.</operator><name pos:start="51:35" pos:end="51:38">conf</name><operator pos:start="51:39" pos:end="51:39">.</operator><name pos:start="51:40" pos:end="51:41">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:45" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:15">

        <expr_stmt pos:start="53:9" pos:end="53:61"><expr pos:start="53:9" pos:end="53:60"><call pos:start="53:9" pos:end="53:60"><name pos:start="53:9" pos:end="53:28">scsi_check_condition</name><argument_list pos:start="53:29" pos:end="53:60">(<argument pos:start="53:30" pos:end="53:30"><expr pos:start="53:30" pos:end="53:30"><name pos:start="53:30" pos:end="53:30">r</name></expr></argument>, <argument pos:start="53:33" pos:end="53:59"><expr pos:start="53:33" pos:end="53:59"><call pos:start="53:33" pos:end="53:59"><name pos:start="53:33" pos:end="53:42">SENSE_CODE</name><argument_list pos:start="53:43" pos:end="53:59">(<argument pos:start="53:44" pos:end="53:58"><expr pos:start="53:44" pos:end="53:58"><name pos:start="53:44" pos:end="53:58">WRITE_PROTECTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:34"><expr pos:start="61:5" pos:end="61:33"><name pos:start="61:5" pos:end="61:8">data</name> <operator pos:start="61:10" pos:end="61:10">=</operator> <call pos:start="61:12" pos:end="61:33"><name pos:start="61:12" pos:end="61:17">g_new0</name><argument_list pos:start="61:18" pos:end="61:33">(<argument pos:start="61:19" pos:end="61:29"><expr pos:start="61:19" pos:end="61:29"><name pos:start="61:19" pos:end="61:29">UnmapCBData</name></expr></argument>, <argument pos:start="61:32" pos:end="61:32"><expr pos:start="61:32" pos:end="61:32"><literal type="number" pos:start="61:32" pos:end="61:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:16"><expr pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:11"><name pos:start="63:5" pos:end="63:8">data</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:11">r</name></name> <operator pos:start="63:13" pos:end="63:13">=</operator> <name pos:start="63:15" pos:end="63:15">r</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:24"><expr pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:8">data</name><operator pos:start="65:9" pos:end="65:10">-&gt;</operator><name pos:start="65:11" pos:end="65:15">inbuf</name></name> <operator pos:start="65:17" pos:end="65:17">=</operator> <operator pos:start="65:19" pos:end="65:19">&amp;</operator><name pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:20">p</name><index pos:start="65:21" pos:end="65:23">[<expr pos:start="65:22" pos:end="65:22"><literal type="number" pos:start="65:22" pos:end="65:22">8</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:40"><expr pos:start="67:5" pos:end="67:39"><name pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:8">data</name><operator pos:start="67:9" pos:end="67:10">-&gt;</operator><name pos:start="67:11" pos:end="67:15">count</name></name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:34"><name pos:start="67:19" pos:end="67:27">lduw_be_p</name><argument_list pos:start="67:28" pos:end="67:34">(<argument pos:start="67:29" pos:end="67:33"><expr pos:start="67:29" pos:end="67:33"><operator pos:start="67:29" pos:end="67:29">&amp;</operator><name pos:start="67:30" pos:end="67:33"><name pos:start="67:30" pos:end="67:30">p</name><index pos:start="67:31" pos:end="67:33">[<expr pos:start="67:32" pos:end="67:32"><literal type="number" pos:start="67:32" pos:end="67:32">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="67:36" pos:end="67:37">&gt;&gt;</operator> <literal type="number" pos:start="67:39" pos:end="67:39">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:78">/* The matching unref is in scsi_unmap_complete, before data is freed.  */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><call pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:16">scsi_req_ref</name><argument_list pos:start="73:17" pos:end="73:25">(<argument pos:start="73:18" pos:end="73:24"><expr pos:start="73:18" pos:end="73:24"><operator pos:start="73:18" pos:end="73:18">&amp;</operator><name pos:start="73:19" pos:end="73:24"><name pos:start="73:19" pos:end="73:19">r</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:24">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:33"><expr pos:start="75:5" pos:end="75:32"><call pos:start="75:5" pos:end="75:32"><name pos:start="75:5" pos:end="75:23">scsi_unmap_complete</name><argument_list pos:start="75:24" pos:end="75:32">(<argument pos:start="75:25" pos:end="75:28"><expr pos:start="75:25" pos:end="75:28"><name pos:start="75:25" pos:end="75:28">data</name></expr></argument>, <argument pos:start="75:31" pos:end="75:31"><expr pos:start="75:31" pos:end="75:31"><literal type="number" pos:start="75:31" pos:end="75:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="77:5" pos:end="77:11">return;</return>



<label pos:start="81:1" pos:end="81:18"><name pos:start="81:1" pos:end="81:17">invalid_param_len</name>:</label>

    <expr_stmt pos:start="83:5" pos:end="83:59"><expr pos:start="83:5" pos:end="83:58"><call pos:start="83:5" pos:end="83:58"><name pos:start="83:5" pos:end="83:24">scsi_check_condition</name><argument_list pos:start="83:25" pos:end="83:58">(<argument pos:start="83:26" pos:end="83:26"><expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">r</name></expr></argument>, <argument pos:start="83:29" pos:end="83:57"><expr pos:start="83:29" pos:end="83:57"><call pos:start="83:29" pos:end="83:57"><name pos:start="83:29" pos:end="83:38">SENSE_CODE</name><argument_list pos:start="83:39" pos:end="83:57">(<argument pos:start="83:40" pos:end="83:56"><expr pos:start="83:40" pos:end="83:56"><name pos:start="83:40" pos:end="83:56">INVALID_PARAM_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="85:5" pos:end="85:11">return;</return>



<label pos:start="89:1" pos:end="89:14"><name pos:start="89:1" pos:end="89:13">invalid_field</name>:</label>

    <expr_stmt pos:start="91:5" pos:end="91:55"><expr pos:start="91:5" pos:end="91:54"><call pos:start="91:5" pos:end="91:54"><name pos:start="91:5" pos:end="91:24">scsi_check_condition</name><argument_list pos:start="91:25" pos:end="91:54">(<argument pos:start="91:26" pos:end="91:26"><expr pos:start="91:26" pos:end="91:26"><name pos:start="91:26" pos:end="91:26">r</name></expr></argument>, <argument pos:start="91:29" pos:end="91:53"><expr pos:start="91:29" pos:end="91:53"><call pos:start="91:29" pos:end="91:53"><name pos:start="91:29" pos:end="91:38">SENSE_CODE</name><argument_list pos:start="91:39" pos:end="91:53">(<argument pos:start="91:40" pos:end="91:52"><expr pos:start="91:40" pos:end="91:52"><name pos:start="91:40" pos:end="91:52">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
