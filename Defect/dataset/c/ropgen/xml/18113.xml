<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18113.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">spapr_allocate_irq_block</name><parameter_list pos:start="1:29" pos:end="1:47">(<parameter pos:start="1:30" pos:end="1:36"><decl pos:start="1:30" pos:end="1:36"><type pos:start="1:30" pos:end="1:36"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:36">num</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:46"><decl pos:start="1:39" pos:end="1:46"><type pos:start="1:39" pos:end="1:46"><name pos:start="1:39" pos:end="1:42">bool</name></type> <name pos:start="1:44" pos:end="1:46">lsi</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:17">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">first</name> <init pos:start="5:15" pos:end="5:18">= <expr pos:start="5:17" pos:end="5:18"><operator pos:start="5:17" pos:end="5:17">-</operator><literal type="number" pos:start="5:18" pos:end="5:18">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <for pos:start="11:5" pos:end="41:5">for <control pos:start="11:9" pos:end="11:29">(<init pos:start="11:10" pos:end="11:15"><expr pos:start="11:10" pos:end="11:14"><name pos:start="11:10" pos:end="11:10">i</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr>;</init> <condition pos:start="11:17" pos:end="11:24"><expr pos:start="11:17" pos:end="11:23"><name pos:start="11:17" pos:end="11:17">i</name> <operator pos:start="11:19" pos:end="11:19">&lt;</operator> <name pos:start="11:21" pos:end="11:23">num</name></expr>;</condition> <incr pos:start="11:26" pos:end="11:28"><expr pos:start="11:26" pos:end="11:28"><operator pos:start="11:26" pos:end="11:27">++</operator><name pos:start="11:28" pos:end="11:28">i</name></expr></incr>)</control> <block pos:start="11:31" pos:end="41:5">{<block_content pos:start="13:9" pos:end="39:35">

        <decl_stmt pos:start="13:9" pos:end="13:16"><decl pos:start="13:9" pos:end="13:15"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:15">irq</name></decl>;</decl_stmt>



        <expr_stmt pos:start="17:9" pos:end="17:41"><expr pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:11">irq</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:40"><name pos:start="17:15" pos:end="17:32">spapr_allocate_irq</name><argument_list pos:start="17:33" pos:end="17:40">(<argument pos:start="17:34" pos:end="17:34"><expr pos:start="17:34" pos:end="17:34"><literal type="number" pos:start="17:34" pos:end="17:34">0</literal></expr></argument>, <argument pos:start="17:37" pos:end="17:39"><expr pos:start="17:37" pos:end="17:39"><name pos:start="17:37" pos:end="17:39">lsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:17">(<expr pos:start="19:13" pos:end="19:16"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:16">irq</name></expr>)</condition> <block pos:start="19:19" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:22">

            <return pos:start="21:13" pos:end="21:22">return <expr pos:start="21:20" pos:end="21:21"><operator pos:start="21:20" pos:end="21:20">-</operator><literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:19">(<expr pos:start="27:13" pos:end="27:18"><literal type="number" pos:start="27:13" pos:end="27:13">0</literal> <operator pos:start="27:15" pos:end="27:16">==</operator> <name pos:start="27:18" pos:end="27:18">i</name></expr>)</condition> <block pos:start="27:21" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:24">

            <expr_stmt pos:start="29:13" pos:end="29:24"><expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:17">first</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <name pos:start="29:21" pos:end="29:23">irq</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="35:9" pos:end="37:29">/* If the above doesn't create a consecutive block then that's

         * an internal bug */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:35"><expr pos:start="39:9" pos:end="39:34"><call pos:start="39:9" pos:end="39:34"><name pos:start="39:9" pos:end="39:14">assert</name><argument_list pos:start="39:15" pos:end="39:34">(<argument pos:start="39:16" pos:end="39:33"><expr pos:start="39:16" pos:end="39:33"><name pos:start="39:16" pos:end="39:18">irq</name> <operator pos:start="39:20" pos:end="39:21">==</operator> <operator pos:start="39:23" pos:end="39:23">(</operator><name pos:start="39:24" pos:end="39:28">first</name> <operator pos:start="39:30" pos:end="39:30">+</operator> <name pos:start="39:32" pos:end="39:32">i</name><operator pos:start="39:33" pos:end="39:33">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="45:5" pos:end="45:17">return <expr pos:start="45:12" pos:end="45:16"><name pos:start="45:12" pos:end="45:16">first</name></expr>;</return>

</block_content>}</block></function>
</unit>
