<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11430.c" pos:tabs="8"><function pos:start="1:1" pos:end="235:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">paf_vid_decode</name><parameter_list pos:start="1:26" pos:end="3:56">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:40">AVCodecContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">avctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:53">void</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">data</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:40"><decl pos:start="3:27" pos:end="3:40"><type pos:start="3:27" pos:end="3:40"><name pos:start="3:27" pos:end="3:29">int</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:40">data_size</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:55"><decl pos:start="3:43" pos:end="3:55"><type pos:start="3:43" pos:end="3:55"><name pos:start="3:43" pos:end="3:50">AVPacket</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:55">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="235:1">{<block_content pos:start="7:5" pos:end="233:21">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">PAFVideoDecContext</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">c</name> <init pos:start="7:27" pos:end="7:44">= <expr pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:16">code</name></decl>, <decl pos:start="9:19" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:11"><modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">dst</name></decl>, <decl pos:start="9:25" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:11"><modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:28">src</name></decl>, <decl pos:start="9:31" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:11"><modifier pos:start="9:31" pos:end="9:31">*</modifier></type><name pos:start="9:32" pos:end="9:34">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:16">frame</name></decl>, <decl pos:start="11:19" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:21">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:5">c</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:10">pic</name><operator pos:start="15:11" pos:end="15:11">.</operator><name pos:start="15:12" pos:end="15:20">reference</name></name> <operator pos:start="15:22" pos:end="15:22">=</operator> <literal type="number" pos:start="15:24" pos:end="15:24">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:19"><if pos:start="17:5" pos:end="19:19">if <condition pos:start="17:8" pos:end="17:56">(<expr pos:start="17:9" pos:end="17:55"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:12">ret</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:50"><name pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:20">avctx</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:34">reget_buffer</name></name><argument_list pos:start="17:35" pos:end="17:50">(<argument pos:start="17:36" pos:end="17:40"><expr pos:start="17:36" pos:end="17:40"><name pos:start="17:36" pos:end="17:40">avctx</name></expr></argument>, <argument pos:start="17:43" pos:end="17:49"><expr pos:start="17:43" pos:end="17:49"><operator pos:start="17:43" pos:end="17:43">&amp;</operator><name pos:start="17:44" pos:end="17:49"><name pos:start="17:44" pos:end="17:44">c</name><operator pos:start="17:45" pos:end="17:46">-&gt;</operator><name pos:start="17:47" pos:end="17:49">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="17:51" pos:end="17:51">)</operator> <operator pos:start="17:53" pos:end="17:53">&lt;</operator> <literal type="number" pos:start="17:55" pos:end="17:55">0</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:19"><block_content pos:start="19:9" pos:end="19:19">

        <return pos:start="19:9" pos:end="19:19">return <expr pos:start="19:16" pos:end="19:18"><name pos:start="19:16" pos:end="19:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:51"><expr pos:start="23:5" pos:end="23:50"><call pos:start="23:5" pos:end="23:50"><name pos:start="23:5" pos:end="23:20">bytestream2_init</name><argument_list pos:start="23:21" pos:end="23:50">(<argument pos:start="23:22" pos:end="23:27"><expr pos:start="23:22" pos:end="23:27"><operator pos:start="23:22" pos:end="23:22">&amp;</operator><name pos:start="23:23" pos:end="23:27"><name pos:start="23:23" pos:end="23:23">c</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:27">gb</name></name></expr></argument>, <argument pos:start="23:30" pos:end="23:38"><expr pos:start="23:30" pos:end="23:38"><name pos:start="23:30" pos:end="23:38"><name pos:start="23:30" pos:end="23:32">pkt</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:38">data</name></name></expr></argument>, <argument pos:start="23:41" pos:end="23:49"><expr pos:start="23:41" pos:end="23:49"><name pos:start="23:41" pos:end="23:49"><name pos:start="23:41" pos:end="23:43">pkt</name><operator pos:start="23:44" pos:end="23:45">-&gt;</operator><name pos:start="23:46" pos:end="23:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:8">code</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:39"><name pos:start="27:12" pos:end="27:31">bytestream2_get_byte</name><argument_list pos:start="27:32" pos:end="27:39">(<argument pos:start="27:33" pos:end="27:38"><expr pos:start="27:33" pos:end="27:38"><operator pos:start="27:33" pos:end="27:33">&amp;</operator><name pos:start="27:34" pos:end="27:38"><name pos:start="27:34" pos:end="27:34">c</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:38">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="51:5"><if pos:start="29:5" pos:end="45:5">if <condition pos:start="29:8" pos:end="29:20">(<expr pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:12">code</name> <operator pos:start="29:14" pos:end="29:14">&amp;</operator> <literal type="number" pos:start="29:16" pos:end="29:19">0x20</literal></expr>)</condition> <block pos:start="29:22" pos:end="45:5">{<block_content pos:start="31:9" pos:end="43:45">

        <for pos:start="31:9" pos:end="33:50">for <control pos:start="31:13" pos:end="31:31">(<init pos:start="31:14" pos:end="31:19"><expr pos:start="31:14" pos:end="31:18"><name pos:start="31:14" pos:end="31:14">i</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</init> <condition pos:start="31:21" pos:end="31:26"><expr pos:start="31:21" pos:end="31:25"><name pos:start="31:21" pos:end="31:21">i</name> <operator pos:start="31:23" pos:end="31:23">&lt;</operator> <literal type="number" pos:start="31:25" pos:end="31:25">4</literal></expr>;</condition> <incr pos:start="31:28" pos:end="31:30"><expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:28">i</name><operator pos:start="31:29" pos:end="31:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="33:13" pos:end="33:50"><block_content pos:start="33:13" pos:end="33:50">

            <expr_stmt pos:start="33:13" pos:end="33:50"><expr pos:start="33:13" pos:end="33:49"><call pos:start="33:13" pos:end="33:49"><name pos:start="33:13" pos:end="33:18">memset</name><argument_list pos:start="33:19" pos:end="33:49">(<argument pos:start="33:20" pos:end="33:30"><expr pos:start="33:20" pos:end="33:30"><name pos:start="33:20" pos:end="33:30"><name pos:start="33:20" pos:end="33:20">c</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:27">frame</name><index pos:start="33:28" pos:end="33:30">[<expr pos:start="33:29" pos:end="33:29"><name pos:start="33:29" pos:end="33:29">i</name></expr>]</index></name></expr></argument>, <argument pos:start="33:33" pos:end="33:33"><expr pos:start="33:33" pos:end="33:33"><literal type="number" pos:start="33:33" pos:end="33:33">0</literal></expr></argument>, <argument pos:start="33:36" pos:end="33:48"><expr pos:start="33:36" pos:end="33:48"><name pos:start="33:36" pos:end="33:48"><name pos:start="33:36" pos:end="33:36">c</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:48">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <expr_stmt pos:start="37:9" pos:end="37:50"><expr pos:start="37:9" pos:end="37:49"><call pos:start="37:9" pos:end="37:49"><name pos:start="37:9" pos:end="37:14">memset</name><argument_list pos:start="37:15" pos:end="37:49">(<argument pos:start="37:16" pos:end="37:29"><expr pos:start="37:16" pos:end="37:29"><name pos:start="37:16" pos:end="37:29"><name pos:start="37:16" pos:end="37:16">c</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:21">pic</name><operator pos:start="37:22" pos:end="37:22">.</operator><name pos:start="37:23" pos:end="37:26">data</name><index pos:start="37:27" pos:end="37:29">[<expr pos:start="37:28" pos:end="37:28"><literal type="number" pos:start="37:28" pos:end="37:28">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><literal type="number" pos:start="37:32" pos:end="37:32">0</literal></expr></argument>, <argument pos:start="37:35" pos:end="37:48"><expr pos:start="37:35" pos:end="37:48"><name pos:start="37:35" pos:end="37:48">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:9">c</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:24">current_frame</name></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <literal type="number" pos:start="39:28" pos:end="39:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:9">c</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:14">pic</name><operator pos:start="41:15" pos:end="41:15">.</operator><name pos:start="41:16" pos:end="41:24">key_frame</name></name> <operator pos:start="41:26" pos:end="41:26">=</operator> <literal type="number" pos:start="41:28" pos:end="41:28">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:45"><expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:9">c</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:14">pic</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:24">pict_type</name></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:44">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="51:5">else <block pos:start="45:12" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:45">

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:9">c</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:14">pic</name><operator pos:start="47:15" pos:end="47:15">.</operator><name pos:start="47:16" pos:end="47:24">key_frame</name></name> <operator pos:start="47:26" pos:end="47:26">=</operator> <literal type="number" pos:start="47:28" pos:end="47:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:9">c</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:14">pic</name><operator pos:start="49:15" pos:end="49:15">.</operator><name pos:start="49:16" pos:end="49:24">pict_type</name></name> <operator pos:start="49:26" pos:end="49:26">=</operator> <name pos:start="49:28" pos:end="49:44">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="55:5" pos:end="105:5"><if pos:start="55:5" pos:end="105:5">if <condition pos:start="55:8" pos:end="55:20">(<expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:12">code</name> <operator pos:start="55:14" pos:end="55:14">&amp;</operator> <literal type="number" pos:start="55:16" pos:end="55:19">0x40</literal></expr>)</condition> <block pos:start="55:22" pos:end="105:5">{<block_content pos:start="57:9" pos:end="103:39">

        <decl_stmt pos:start="57:9" pos:end="57:51"><decl pos:start="57:9" pos:end="57:50"><type pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:16">uint32_t</name> <modifier pos:start="57:18" pos:end="57:18">*</modifier></type><name pos:start="57:19" pos:end="57:21">out</name> <init pos:start="57:23" pos:end="57:50">= <expr pos:start="57:25" pos:end="57:50"><operator pos:start="57:25" pos:end="57:25">(</operator><name pos:start="57:26" pos:end="57:33">uint32_t</name> <operator pos:start="57:35" pos:end="57:35">*</operator><operator pos:start="57:36" pos:end="57:36">)</operator><name pos:start="57:37" pos:end="57:50"><name pos:start="57:37" pos:end="57:37">c</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:42">pic</name><operator pos:start="57:43" pos:end="57:43">.</operator><name pos:start="57:44" pos:end="57:47">data</name><index pos:start="57:48" pos:end="57:50">[<expr pos:start="57:49" pos:end="57:49"><literal type="number" pos:start="57:49" pos:end="57:49">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:25"><decl pos:start="59:9" pos:end="59:17"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:17">index</name></decl>, <decl pos:start="59:20" pos:end="59:24"><type ref="prev" pos:start="59:9" pos:end="59:11"/><name pos:start="59:20" pos:end="59:24">count</name></decl>;</decl_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:45"><expr pos:start="63:9" pos:end="63:44"><name pos:start="63:9" pos:end="63:13">index</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:44"><name pos:start="63:17" pos:end="63:36">bytestream2_get_byte</name><argument_list pos:start="63:37" pos:end="63:44">(<argument pos:start="63:38" pos:end="63:43"><expr pos:start="63:38" pos:end="63:43"><operator pos:start="63:38" pos:end="63:38">&amp;</operator><name pos:start="63:39" pos:end="63:43"><name pos:start="63:39" pos:end="63:39">c</name><operator pos:start="63:40" pos:end="63:41">-&gt;</operator><name pos:start="63:42" pos:end="63:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:13">count</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <call pos:start="65:17" pos:end="65:44"><name pos:start="65:17" pos:end="65:36">bytestream2_get_byte</name><argument_list pos:start="65:37" pos:end="65:44">(<argument pos:start="65:38" pos:end="65:43"><expr pos:start="65:38" pos:end="65:43"><operator pos:start="65:38" pos:end="65:38">&amp;</operator><name pos:start="65:39" pos:end="65:43"><name pos:start="65:39" pos:end="65:39">c</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="65:46" pos:end="65:46">+</operator> <literal type="number" pos:start="65:48" pos:end="65:48">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="69:9" pos:end="71:39"><if pos:start="69:9" pos:end="71:39">if <condition pos:start="69:12" pos:end="69:43">(<expr pos:start="69:13" pos:end="69:42"><name pos:start="69:13" pos:end="69:17">index</name> <operator pos:start="69:19" pos:end="69:19">+</operator> <name pos:start="69:21" pos:end="69:25">count</name> <operator pos:start="69:27" pos:end="69:27">&gt;</operator> <name pos:start="69:29" pos:end="69:42">AVPALETTE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:39"><block_content pos:start="71:13" pos:end="71:39">

            <return pos:start="71:13" pos:end="71:39">return <expr pos:start="71:20" pos:end="71:38"><name pos:start="71:20" pos:end="71:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="73:9" pos:end="75:39"><if pos:start="73:9" pos:end="75:39">if <condition pos:start="73:12" pos:end="73:68">(<expr pos:start="73:13" pos:end="73:67"><call pos:start="73:13" pos:end="73:46"><name pos:start="73:13" pos:end="73:38">bytestream2_get_bytes_left</name><argument_list pos:start="73:39" pos:end="73:46">(<argument pos:start="73:40" pos:end="73:45"><expr pos:start="73:40" pos:end="73:45"><operator pos:start="73:40" pos:end="73:40">&amp;</operator><name pos:start="73:41" pos:end="73:45"><name pos:start="73:41" pos:end="73:41">c</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:45">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="73:48" pos:end="73:48">&lt;</operator> <literal type="number" pos:start="73:50" pos:end="73:50">3</literal> <operator pos:start="73:52" pos:end="73:52">*</operator> <name pos:start="73:54" pos:end="73:67">AVPALETTE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:39"><block_content pos:start="75:13" pos:end="75:39">

            <return pos:start="75:13" pos:end="75:39">return <expr pos:start="75:20" pos:end="75:38"><name pos:start="75:20" pos:end="75:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:21"><expr pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:11">out</name> <operator pos:start="79:13" pos:end="79:14">+=</operator> <name pos:start="79:16" pos:end="79:20">index</name></expr>;</expr_stmt>

        <for pos:start="81:9" pos:end="101:9">for <control pos:start="81:13" pos:end="81:35">(<init pos:start="81:14" pos:end="81:19"><expr pos:start="81:14" pos:end="81:18"><name pos:start="81:14" pos:end="81:14">i</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <literal type="number" pos:start="81:18" pos:end="81:18">0</literal></expr>;</init> <condition pos:start="81:21" pos:end="81:30"><expr pos:start="81:21" pos:end="81:29"><name pos:start="81:21" pos:end="81:21">i</name> <operator pos:start="81:23" pos:end="81:23">&lt;</operator> <name pos:start="81:25" pos:end="81:29">count</name></expr>;</condition> <incr pos:start="81:32" pos:end="81:34"><expr pos:start="81:32" pos:end="81:34"><name pos:start="81:32" pos:end="81:32">i</name><operator pos:start="81:33" pos:end="81:34">++</operator></expr></incr>)</control> <block pos:start="81:37" pos:end="101:9">{<block_content pos:start="83:13" pos:end="99:56">

            <decl_stmt pos:start="83:13" pos:end="83:29"><decl pos:start="83:13" pos:end="83:22"><type pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:20">unsigned</name></type> <name pos:start="83:22" pos:end="83:22">r</name></decl>, <decl pos:start="83:25" pos:end="83:25"><type ref="prev" pos:start="83:13" pos:end="83:20"/><name pos:start="83:25" pos:end="83:25">g</name></decl>, <decl pos:start="83:28" pos:end="83:28"><type ref="prev" pos:start="83:13" pos:end="83:20"/><name pos:start="83:28" pos:end="83:28">b</name></decl>;</decl_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:46"><expr pos:start="87:13" pos:end="87:45"><name pos:start="87:13" pos:end="87:13">r</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <call pos:start="87:17" pos:end="87:45"><name pos:start="87:17" pos:end="87:37">bytestream2_get_byteu</name><argument_list pos:start="87:38" pos:end="87:45">(<argument pos:start="87:39" pos:end="87:44"><expr pos:start="87:39" pos:end="87:44"><operator pos:start="87:39" pos:end="87:39">&amp;</operator><name pos:start="87:40" pos:end="87:44"><name pos:start="87:40" pos:end="87:40">c</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:32"><expr pos:start="89:13" pos:end="89:31"><name pos:start="89:13" pos:end="89:13">r</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <name pos:start="89:17" pos:end="89:17">r</name> <operator pos:start="89:19" pos:end="89:20">&lt;&lt;</operator> <literal type="number" pos:start="89:22" pos:end="89:22">2</literal> <operator pos:start="89:24" pos:end="89:24">|</operator> <name pos:start="89:26" pos:end="89:26">r</name> <operator pos:start="89:28" pos:end="89:29">&gt;&gt;</operator> <literal type="number" pos:start="89:31" pos:end="89:31">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:46"><expr pos:start="91:13" pos:end="91:45"><name pos:start="91:13" pos:end="91:13">g</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <call pos:start="91:17" pos:end="91:45"><name pos:start="91:17" pos:end="91:37">bytestream2_get_byteu</name><argument_list pos:start="91:38" pos:end="91:45">(<argument pos:start="91:39" pos:end="91:44"><expr pos:start="91:39" pos:end="91:44"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:44"><name pos:start="91:40" pos:end="91:40">c</name><operator pos:start="91:41" pos:end="91:42">-&gt;</operator><name pos:start="91:43" pos:end="91:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:32"><expr pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:13">g</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <name pos:start="93:17" pos:end="93:17">g</name> <operator pos:start="93:19" pos:end="93:20">&lt;&lt;</operator> <literal type="number" pos:start="93:22" pos:end="93:22">2</literal> <operator pos:start="93:24" pos:end="93:24">|</operator> <name pos:start="93:26" pos:end="93:26">g</name> <operator pos:start="93:28" pos:end="93:29">&gt;&gt;</operator> <literal type="number" pos:start="93:31" pos:end="93:31">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:46"><expr pos:start="95:13" pos:end="95:45"><name pos:start="95:13" pos:end="95:13">b</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <call pos:start="95:17" pos:end="95:45"><name pos:start="95:17" pos:end="95:37">bytestream2_get_byteu</name><argument_list pos:start="95:38" pos:end="95:45">(<argument pos:start="95:39" pos:end="95:44"><expr pos:start="95:39" pos:end="95:44"><operator pos:start="95:39" pos:end="95:39">&amp;</operator><name pos:start="95:40" pos:end="95:44"><name pos:start="95:40" pos:end="95:40">c</name><operator pos:start="95:41" pos:end="95:42">-&gt;</operator><name pos:start="95:43" pos:end="95:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:32"><expr pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:13">b</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <name pos:start="97:17" pos:end="97:17">b</name> <operator pos:start="97:19" pos:end="97:20">&lt;&lt;</operator> <literal type="number" pos:start="97:22" pos:end="97:22">2</literal> <operator pos:start="97:24" pos:end="97:24">|</operator> <name pos:start="97:26" pos:end="97:26">b</name> <operator pos:start="97:28" pos:end="97:29">&gt;&gt;</operator> <literal type="number" pos:start="97:31" pos:end="97:31">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:56"><expr pos:start="99:13" pos:end="99:55"><operator pos:start="99:13" pos:end="99:13">*</operator><name pos:start="99:14" pos:end="99:16">out</name><operator pos:start="99:17" pos:end="99:18">++</operator> <operator pos:start="99:20" pos:end="99:20">=</operator> <literal type="number" pos:start="99:22" pos:end="99:26">0xFFU</literal> <operator pos:start="99:28" pos:end="99:29">&lt;&lt;</operator> <literal type="number" pos:start="99:31" pos:end="99:32">24</literal> <operator pos:start="99:34" pos:end="99:34">|</operator> <name pos:start="99:36" pos:end="99:36">r</name> <operator pos:start="99:38" pos:end="99:39">&lt;&lt;</operator> <literal type="number" pos:start="99:41" pos:end="99:42">16</literal> <operator pos:start="99:44" pos:end="99:44">|</operator> <name pos:start="99:46" pos:end="99:46">g</name> <operator pos:start="99:48" pos:end="99:49">&lt;&lt;</operator> <literal type="number" pos:start="99:51" pos:end="99:51">8</literal> <operator pos:start="99:53" pos:end="99:53">|</operator> <name pos:start="99:55" pos:end="99:55">b</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="103:9" pos:end="103:39"><expr pos:start="103:9" pos:end="103:38"><name pos:start="103:9" pos:end="103:34"><name pos:start="103:9" pos:end="103:9">c</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:14">pic</name><operator pos:start="103:15" pos:end="103:15">.</operator><name pos:start="103:16" pos:end="103:34">palette_has_changed</name></name> <operator pos:start="103:36" pos:end="103:36">=</operator> <literal type="number" pos:start="103:38" pos:end="103:38">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="109:5" pos:end="203:5">switch <condition pos:start="109:12" pos:end="109:24">(<expr pos:start="109:13" pos:end="109:23"><name pos:start="109:13" pos:end="109:16">code</name> <operator pos:start="109:18" pos:end="109:18">&amp;</operator> <literal type="number" pos:start="109:20" pos:end="109:23">0x0F</literal></expr>)</condition> <block pos:start="109:26" pos:end="203:5">{<block_content pos:start="111:5" pos:end="201:35">

    <case pos:start="111:5" pos:end="111:11">case <expr pos:start="111:10" pos:end="111:10"><literal type="number" pos:start="111:10" pos:end="111:10">0</literal></expr>:</case>

        <if_stmt pos:start="113:9" pos:end="115:23"><if pos:start="113:9" pos:end="115:23">if <condition pos:start="113:12" pos:end="113:57">(<expr pos:start="113:13" pos:end="113:56"><operator pos:start="113:13" pos:end="113:13">(</operator><name pos:start="113:14" pos:end="113:16">ret</name> <operator pos:start="113:18" pos:end="113:18">=</operator> <call pos:start="113:20" pos:end="113:51"><name pos:start="113:20" pos:end="113:27">decode_0</name><argument_list pos:start="113:28" pos:end="113:51">(<argument pos:start="113:29" pos:end="113:33"><expr pos:start="113:29" pos:end="113:33"><name pos:start="113:29" pos:end="113:33">avctx</name></expr></argument>, <argument pos:start="113:36" pos:end="113:39"><expr pos:start="113:36" pos:end="113:39"><name pos:start="113:36" pos:end="113:39">code</name></expr></argument>, <argument pos:start="113:42" pos:end="113:50"><expr pos:start="113:42" pos:end="113:50"><name pos:start="113:42" pos:end="113:50"><name pos:start="113:42" pos:end="113:44">pkt</name><operator pos:start="113:45" pos:end="113:46">-&gt;</operator><name pos:start="113:47" pos:end="113:50">data</name></name></expr></argument>)</argument_list></call><operator pos:start="113:52" pos:end="113:52">)</operator> <operator pos:start="113:54" pos:end="113:54">&lt;</operator> <literal type="number" pos:start="113:56" pos:end="113:56">0</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:23"><block_content pos:start="115:13" pos:end="115:23">

            <return pos:start="115:13" pos:end="115:23">return <expr pos:start="115:20" pos:end="115:22"><name pos:start="115:20" pos:end="115:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:11">case <expr pos:start="119:10" pos:end="119:10"><literal type="number" pos:start="119:10" pos:end="119:10">1</literal></expr>:</case>

        <expr_stmt pos:start="121:9" pos:end="121:41"><expr pos:start="121:9" pos:end="121:40"><name pos:start="121:9" pos:end="121:11">dst</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <name pos:start="121:15" pos:end="121:40"><name pos:start="121:15" pos:end="121:15">c</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:22">frame</name><index pos:start="121:23" pos:end="121:40">[<expr pos:start="121:24" pos:end="121:39"><name pos:start="121:24" pos:end="121:39"><name pos:start="121:24" pos:end="121:24">c</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:39">current_frame</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:36"><expr pos:start="123:9" pos:end="123:35"><call pos:start="123:9" pos:end="123:35"><name pos:start="123:9" pos:end="123:24">bytestream2_skip</name><argument_list pos:start="123:25" pos:end="123:35">(<argument pos:start="123:26" pos:end="123:31"><expr pos:start="123:26" pos:end="123:31"><operator pos:start="123:26" pos:end="123:26">&amp;</operator><name pos:start="123:27" pos:end="123:31"><name pos:start="123:27" pos:end="123:27">c</name><operator pos:start="123:28" pos:end="123:29">-&gt;</operator><name pos:start="123:30" pos:end="123:31">gb</name></name></expr></argument>, <argument pos:start="123:34" pos:end="123:34"><expr pos:start="123:34" pos:end="123:34"><literal type="number" pos:start="123:34" pos:end="123:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="127:39"><if pos:start="125:9" pos:end="127:39">if <condition pos:start="125:12" pos:end="125:63">(<expr pos:start="125:13" pos:end="125:62"><call pos:start="125:13" pos:end="125:46"><name pos:start="125:13" pos:end="125:38">bytestream2_get_bytes_left</name><argument_list pos:start="125:39" pos:end="125:46">(<argument pos:start="125:40" pos:end="125:45"><expr pos:start="125:40" pos:end="125:45"><operator pos:start="125:40" pos:end="125:40">&amp;</operator><name pos:start="125:41" pos:end="125:45"><name pos:start="125:41" pos:end="125:41">c</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:45">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:48" pos:end="125:48">&lt;</operator> <name pos:start="125:50" pos:end="125:62"><name pos:start="125:50" pos:end="125:50">c</name><operator pos:start="125:51" pos:end="125:52">-&gt;</operator><name pos:start="125:53" pos:end="125:62">video_size</name></name></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:39"><block_content pos:start="127:13" pos:end="127:39">

            <return pos:start="127:13" pos:end="127:39">return <expr pos:start="127:20" pos:end="127:38"><name pos:start="127:20" pos:end="127:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:60"><expr pos:start="129:9" pos:end="129:59"><call pos:start="129:9" pos:end="129:59"><name pos:start="129:9" pos:end="129:31">bytestream2_get_bufferu</name><argument_list pos:start="129:32" pos:end="129:59">(<argument pos:start="129:33" pos:end="129:38"><expr pos:start="129:33" pos:end="129:38"><operator pos:start="129:33" pos:end="129:33">&amp;</operator><name pos:start="129:34" pos:end="129:38"><name pos:start="129:34" pos:end="129:34">c</name><operator pos:start="129:35" pos:end="129:36">-&gt;</operator><name pos:start="129:37" pos:end="129:38">gb</name></name></expr></argument>, <argument pos:start="129:41" pos:end="129:43"><expr pos:start="129:41" pos:end="129:43"><name pos:start="129:41" pos:end="129:43">dst</name></expr></argument>, <argument pos:start="129:46" pos:end="129:58"><expr pos:start="129:46" pos:end="129:58"><name pos:start="129:46" pos:end="129:58"><name pos:start="129:46" pos:end="129:46">c</name><operator pos:start="129:47" pos:end="129:48">-&gt;</operator><name pos:start="129:49" pos:end="129:58">video_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="131:9" pos:end="131:14">break;</break>

    <case pos:start="133:5" pos:end="133:11">case <expr pos:start="133:10" pos:end="133:10"><literal type="number" pos:start="133:10" pos:end="133:10">2</literal></expr>:</case>

        <expr_stmt pos:start="135:9" pos:end="135:45"><expr pos:start="135:9" pos:end="135:44"><name pos:start="135:9" pos:end="135:13">frame</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <call pos:start="135:17" pos:end="135:44"><name pos:start="135:17" pos:end="135:36">bytestream2_get_byte</name><argument_list pos:start="135:37" pos:end="135:44">(<argument pos:start="135:38" pos:end="135:43"><expr pos:start="135:38" pos:end="135:43"><operator pos:start="135:38" pos:end="135:38">&amp;</operator><name pos:start="135:39" pos:end="135:43"><name pos:start="135:39" pos:end="135:39">c</name><operator pos:start="135:40" pos:end="135:41">-&gt;</operator><name pos:start="135:42" pos:end="135:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="139:39"><if pos:start="137:9" pos:end="139:39">if <condition pos:start="137:12" pos:end="137:22">(<expr pos:start="137:13" pos:end="137:21"><name pos:start="137:13" pos:end="137:17">frame</name> <operator pos:start="137:19" pos:end="137:19">&gt;</operator> <literal type="number" pos:start="137:21" pos:end="137:21">3</literal></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:39"><block_content pos:start="139:13" pos:end="139:39">

            <return pos:start="139:13" pos:end="139:39">return <expr pos:start="139:20" pos:end="139:38"><name pos:start="139:20" pos:end="139:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="141:9" pos:end="143:79"><if pos:start="141:9" pos:end="143:79">if <condition pos:start="141:12" pos:end="141:38">(<expr pos:start="141:13" pos:end="141:37"><name pos:start="141:13" pos:end="141:17">frame</name> <operator pos:start="141:19" pos:end="141:20">!=</operator> <name pos:start="141:22" pos:end="141:37"><name pos:start="141:22" pos:end="141:22">c</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:37">current_frame</name></name></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:79"><block_content pos:start="143:13" pos:end="143:79">

            <expr_stmt pos:start="143:13" pos:end="143:79"><expr pos:start="143:13" pos:end="143:78"><call pos:start="143:13" pos:end="143:78"><name pos:start="143:13" pos:end="143:18">memcpy</name><argument_list pos:start="143:19" pos:end="143:78">(<argument pos:start="143:20" pos:end="143:45"><expr pos:start="143:20" pos:end="143:45"><name pos:start="143:20" pos:end="143:45"><name pos:start="143:20" pos:end="143:20">c</name><operator pos:start="143:21" pos:end="143:22">-&gt;</operator><name pos:start="143:23" pos:end="143:27">frame</name><index pos:start="143:28" pos:end="143:45">[<expr pos:start="143:29" pos:end="143:44"><name pos:start="143:29" pos:end="143:44"><name pos:start="143:29" pos:end="143:29">c</name><operator pos:start="143:30" pos:end="143:31">-&gt;</operator><name pos:start="143:32" pos:end="143:44">current_frame</name></name></expr>]</index></name></expr></argument>, <argument pos:start="143:48" pos:end="143:62"><expr pos:start="143:48" pos:end="143:62"><name pos:start="143:48" pos:end="143:62"><name pos:start="143:48" pos:end="143:48">c</name><operator pos:start="143:49" pos:end="143:50">-&gt;</operator><name pos:start="143:51" pos:end="143:55">frame</name><index pos:start="143:56" pos:end="143:62">[<expr pos:start="143:57" pos:end="143:61"><name pos:start="143:57" pos:end="143:61">frame</name></expr>]</index></name></expr></argument>, <argument pos:start="143:65" pos:end="143:77"><expr pos:start="143:65" pos:end="143:77"><name pos:start="143:65" pos:end="143:77"><name pos:start="143:65" pos:end="143:65">c</name><operator pos:start="143:66" pos:end="143:67">-&gt;</operator><name pos:start="143:68" pos:end="143:77">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:11">case <expr pos:start="147:10" pos:end="147:10"><literal type="number" pos:start="147:10" pos:end="147:10">4</literal></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:41"><expr pos:start="149:9" pos:end="149:40"><name pos:start="149:9" pos:end="149:11">dst</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <name pos:start="149:15" pos:end="149:40"><name pos:start="149:15" pos:end="149:15">c</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:22">frame</name><index pos:start="149:23" pos:end="149:40">[<expr pos:start="149:24" pos:end="149:39"><name pos:start="149:24" pos:end="149:39"><name pos:start="149:24" pos:end="149:24">c</name><operator pos:start="149:25" pos:end="149:26">-&gt;</operator><name pos:start="149:27" pos:end="149:39">current_frame</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:34"><expr pos:start="151:9" pos:end="151:33"><name pos:start="151:9" pos:end="151:11">end</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <name pos:start="151:15" pos:end="151:17">dst</name> <operator pos:start="151:19" pos:end="151:19">+</operator> <name pos:start="151:21" pos:end="151:33"><name pos:start="151:21" pos:end="151:21">c</name><operator pos:start="151:22" pos:end="151:23">-&gt;</operator><name pos:start="151:24" pos:end="151:33">video_size</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:36"><expr pos:start="155:9" pos:end="155:35"><call pos:start="155:9" pos:end="155:35"><name pos:start="155:9" pos:end="155:24">bytestream2_skip</name><argument_list pos:start="155:25" pos:end="155:35">(<argument pos:start="155:26" pos:end="155:31"><expr pos:start="155:26" pos:end="155:31"><operator pos:start="155:26" pos:end="155:26">&amp;</operator><name pos:start="155:27" pos:end="155:31"><name pos:start="155:27" pos:end="155:27">c</name><operator pos:start="155:28" pos:end="155:29">-&gt;</operator><name pos:start="155:30" pos:end="155:31">gb</name></name></expr></argument>, <argument pos:start="155:34" pos:end="155:34"><expr pos:start="155:34" pos:end="155:34"><literal type="number" pos:start="155:34" pos:end="155:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="159:9" pos:end="193:9">while <condition pos:start="159:15" pos:end="159:25">(<expr pos:start="159:16" pos:end="159:24"><name pos:start="159:16" pos:end="159:18">dst</name> <operator pos:start="159:20" pos:end="159:20">&lt;</operator> <name pos:start="159:22" pos:end="159:24">end</name></expr>)</condition> <block pos:start="159:27" pos:end="193:9">{<block_content pos:start="161:13" pos:end="191:25">

            <decl_stmt pos:start="161:13" pos:end="161:24"><decl pos:start="161:13" pos:end="161:23"><type pos:start="161:13" pos:end="161:18"><name pos:start="161:13" pos:end="161:18">int8_t</name></type> <name pos:start="161:20" pos:end="161:23">code</name></decl>;</decl_stmt>

            <decl_stmt pos:start="163:13" pos:end="163:22"><decl pos:start="163:13" pos:end="163:21"><type pos:start="163:13" pos:end="163:15"><name pos:start="163:13" pos:end="163:15">int</name></type> <name pos:start="163:17" pos:end="163:21">count</name></decl>;</decl_stmt>



            <if_stmt pos:start="167:13" pos:end="169:43"><if pos:start="167:13" pos:end="169:43">if <condition pos:start="167:16" pos:end="167:55">(<expr pos:start="167:17" pos:end="167:54"><call pos:start="167:17" pos:end="167:50"><name pos:start="167:17" pos:end="167:42">bytestream2_get_bytes_left</name><argument_list pos:start="167:43" pos:end="167:50">(<argument pos:start="167:44" pos:end="167:49"><expr pos:start="167:44" pos:end="167:49"><operator pos:start="167:44" pos:end="167:44">&amp;</operator><name pos:start="167:45" pos:end="167:49"><name pos:start="167:45" pos:end="167:45">c</name><operator pos:start="167:46" pos:end="167:47">-&gt;</operator><name pos:start="167:48" pos:end="167:49">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="167:52" pos:end="167:52">&lt;</operator> <literal type="number" pos:start="167:54" pos:end="167:54">2</literal></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:43"><block_content pos:start="169:17" pos:end="169:43">

                <return pos:start="169:17" pos:end="169:43">return <expr pos:start="169:24" pos:end="169:42"><name pos:start="169:24" pos:end="169:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="173:13" pos:end="173:50"><expr pos:start="173:13" pos:end="173:49"><name pos:start="173:13" pos:end="173:16">code</name>  <operator pos:start="173:19" pos:end="173:19">=</operator> <call pos:start="173:21" pos:end="173:49"><name pos:start="173:21" pos:end="173:41">bytestream2_get_byteu</name><argument_list pos:start="173:42" pos:end="173:49">(<argument pos:start="173:43" pos:end="173:48"><expr pos:start="173:43" pos:end="173:48"><operator pos:start="173:43" pos:end="173:43">&amp;</operator><name pos:start="173:44" pos:end="173:48"><name pos:start="173:44" pos:end="173:44">c</name><operator pos:start="173:45" pos:end="173:46">-&gt;</operator><name pos:start="173:47" pos:end="173:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:36"><expr pos:start="175:13" pos:end="175:35"><name pos:start="175:13" pos:end="175:17">count</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <call pos:start="175:21" pos:end="175:31"><name pos:start="175:21" pos:end="175:25">FFABS</name><argument_list pos:start="175:26" pos:end="175:31">(<argument pos:start="175:27" pos:end="175:30"><expr pos:start="175:27" pos:end="175:30"><name pos:start="175:27" pos:end="175:30">code</name></expr></argument>)</argument_list></call> <operator pos:start="175:33" pos:end="175:33">+</operator> <literal type="number" pos:start="175:35" pos:end="175:35">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="179:13" pos:end="181:43"><if pos:start="179:13" pos:end="181:43">if <condition pos:start="179:16" pos:end="179:34">(<expr pos:start="179:17" pos:end="179:33"><name pos:start="179:17" pos:end="179:19">dst</name> <operator pos:start="179:21" pos:end="179:21">+</operator> <name pos:start="179:23" pos:end="179:27">count</name> <operator pos:start="179:29" pos:end="179:29">&gt;</operator> <name pos:start="179:31" pos:end="179:33">end</name></expr>)</condition><block type="pseudo" pos:start="181:17" pos:end="181:43"><block_content pos:start="181:17" pos:end="181:43">

                <return pos:start="181:17" pos:end="181:43">return <expr pos:start="181:24" pos:end="181:42"><name pos:start="181:24" pos:end="181:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="183:13" pos:end="189:59"><if pos:start="183:13" pos:end="185:66">if <condition pos:start="183:16" pos:end="183:25">(<expr pos:start="183:17" pos:end="183:24"><name pos:start="183:17" pos:end="183:20">code</name> <operator pos:start="183:22" pos:end="183:22">&lt;</operator> <literal type="number" pos:start="183:24" pos:end="183:24">0</literal></expr>)</condition><block type="pseudo" pos:start="185:17" pos:end="185:66"><block_content pos:start="185:17" pos:end="185:66">

                <expr_stmt pos:start="185:17" pos:end="185:66"><expr pos:start="185:17" pos:end="185:65"><call pos:start="185:17" pos:end="185:65"><name pos:start="185:17" pos:end="185:22">memset</name><argument_list pos:start="185:23" pos:end="185:65">(<argument pos:start="185:24" pos:end="185:26"><expr pos:start="185:24" pos:end="185:26"><name pos:start="185:24" pos:end="185:26">dst</name></expr></argument>, <argument pos:start="185:29" pos:end="185:57"><expr pos:start="185:29" pos:end="185:57"><call pos:start="185:29" pos:end="185:57"><name pos:start="185:29" pos:end="185:49">bytestream2_get_byteu</name><argument_list pos:start="185:50" pos:end="185:57">(<argument pos:start="185:51" pos:end="185:56"><expr pos:start="185:51" pos:end="185:56"><operator pos:start="185:51" pos:end="185:51">&amp;</operator><name pos:start="185:52" pos:end="185:56"><name pos:start="185:52" pos:end="185:52">c</name><operator pos:start="185:53" pos:end="185:54">-&gt;</operator><name pos:start="185:55" pos:end="185:56">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="185:60" pos:end="185:64"><expr pos:start="185:60" pos:end="185:64"><name pos:start="185:60" pos:end="185:64">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="187:13" pos:end="189:59">else<block type="pseudo" pos:start="189:17" pos:end="189:59"><block_content pos:start="189:17" pos:end="189:59">

                <expr_stmt pos:start="189:17" pos:end="189:59"><expr pos:start="189:17" pos:end="189:58"><call pos:start="189:17" pos:end="189:58"><name pos:start="189:17" pos:end="189:38">bytestream2_get_buffer</name><argument_list pos:start="189:39" pos:end="189:58">(<argument pos:start="189:40" pos:end="189:45"><expr pos:start="189:40" pos:end="189:45"><operator pos:start="189:40" pos:end="189:40">&amp;</operator><name pos:start="189:41" pos:end="189:45"><name pos:start="189:41" pos:end="189:41">c</name><operator pos:start="189:42" pos:end="189:43">-&gt;</operator><name pos:start="189:44" pos:end="189:45">gb</name></name></expr></argument>, <argument pos:start="189:48" pos:end="189:50"><expr pos:start="189:48" pos:end="189:50"><name pos:start="189:48" pos:end="189:50">dst</name></expr></argument>, <argument pos:start="189:53" pos:end="189:57"><expr pos:start="189:53" pos:end="189:57"><name pos:start="189:53" pos:end="189:57">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:25"><expr pos:start="191:13" pos:end="191:24"><name pos:start="191:13" pos:end="191:15">dst</name> <operator pos:start="191:17" pos:end="191:18">+=</operator> <name pos:start="191:20" pos:end="191:24">count</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="195:9" pos:end="195:14">break;</break>

    <default pos:start="197:5" pos:end="197:12">default:</default>

        <expr_stmt pos:start="199:9" pos:end="199:63"><expr pos:start="199:9" pos:end="199:62"><call pos:start="199:9" pos:end="199:62"><name pos:start="199:9" pos:end="199:29">av_log_ask_for_sample</name><argument_list pos:start="199:30" pos:end="199:62">(<argument pos:start="199:31" pos:end="199:35"><expr pos:start="199:31" pos:end="199:35"><name pos:start="199:31" pos:end="199:35">avctx</name></expr></argument>, <argument pos:start="199:38" pos:end="199:61"><expr pos:start="199:38" pos:end="199:61"><literal type="string" pos:start="199:38" pos:end="199:61">"unknown/invalid code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="201:9" pos:end="201:35">return <expr pos:start="201:16" pos:end="201:34"><name pos:start="201:16" pos:end="201:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="207:5" pos:end="207:25"><expr pos:start="207:5" pos:end="207:24"><name pos:start="207:5" pos:end="207:7">dst</name> <operator pos:start="207:9" pos:end="207:9">=</operator> <name pos:start="207:11" pos:end="207:24"><name pos:start="207:11" pos:end="207:11">c</name><operator pos:start="207:12" pos:end="207:13">-&gt;</operator><name pos:start="207:14" pos:end="207:16">pic</name><operator pos:start="207:17" pos:end="207:17">.</operator><name pos:start="207:18" pos:end="207:21">data</name><index pos:start="207:22" pos:end="207:24">[<expr pos:start="207:23" pos:end="207:23"><literal type="number" pos:start="207:23" pos:end="207:23">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:37"><expr pos:start="209:5" pos:end="209:36"><name pos:start="209:5" pos:end="209:7">src</name> <operator pos:start="209:9" pos:end="209:9">=</operator> <name pos:start="209:11" pos:end="209:36"><name pos:start="209:11" pos:end="209:11">c</name><operator pos:start="209:12" pos:end="209:13">-&gt;</operator><name pos:start="209:14" pos:end="209:18">frame</name><index pos:start="209:19" pos:end="209:36">[<expr pos:start="209:20" pos:end="209:35"><name pos:start="209:20" pos:end="209:35"><name pos:start="209:20" pos:end="209:20">c</name><operator pos:start="209:21" pos:end="209:22">-&gt;</operator><name pos:start="209:23" pos:end="209:35">current_frame</name></name></expr>]</index></name></expr>;</expr_stmt>

    <for pos:start="211:5" pos:end="219:5">for <control pos:start="211:9" pos:end="211:39">(<init pos:start="211:10" pos:end="211:15"><expr pos:start="211:10" pos:end="211:14"><name pos:start="211:10" pos:end="211:10">i</name> <operator pos:start="211:12" pos:end="211:12">=</operator> <literal type="number" pos:start="211:14" pos:end="211:14">0</literal></expr>;</init> <condition pos:start="211:17" pos:end="211:34"><expr pos:start="211:17" pos:end="211:33"><name pos:start="211:17" pos:end="211:17">i</name> <operator pos:start="211:19" pos:end="211:19">&lt;</operator> <name pos:start="211:21" pos:end="211:33"><name pos:start="211:21" pos:end="211:25">avctx</name><operator pos:start="211:26" pos:end="211:27">-&gt;</operator><name pos:start="211:28" pos:end="211:33">height</name></name></expr>;</condition> <incr pos:start="211:36" pos:end="211:38"><expr pos:start="211:36" pos:end="211:38"><name pos:start="211:36" pos:end="211:36">i</name><operator pos:start="211:37" pos:end="211:38">++</operator></expr></incr>)</control> <block pos:start="211:41" pos:end="219:5">{<block_content pos:start="213:9" pos:end="217:28">

        <expr_stmt pos:start="213:9" pos:end="213:39"><expr pos:start="213:9" pos:end="213:38"><call pos:start="213:9" pos:end="213:38"><name pos:start="213:9" pos:end="213:14">memcpy</name><argument_list pos:start="213:15" pos:end="213:38">(<argument pos:start="213:16" pos:end="213:18"><expr pos:start="213:16" pos:end="213:18"><name pos:start="213:16" pos:end="213:18">dst</name></expr></argument>, <argument pos:start="213:21" pos:end="213:23"><expr pos:start="213:21" pos:end="213:23"><name pos:start="213:21" pos:end="213:23">src</name></expr></argument>, <argument pos:start="213:26" pos:end="213:37"><expr pos:start="213:26" pos:end="213:37"><name pos:start="213:26" pos:end="213:37"><name pos:start="213:26" pos:end="213:30">avctx</name><operator pos:start="213:31" pos:end="213:32">-&gt;</operator><name pos:start="213:33" pos:end="213:37">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:34"><expr pos:start="215:9" pos:end="215:33"><name pos:start="215:9" pos:end="215:11">dst</name> <operator pos:start="215:13" pos:end="215:14">+=</operator> <name pos:start="215:16" pos:end="215:33"><name pos:start="215:16" pos:end="215:16">c</name><operator pos:start="215:17" pos:end="215:18">-&gt;</operator><name pos:start="215:19" pos:end="215:21">pic</name><operator pos:start="215:22" pos:end="215:22">.</operator><name pos:start="215:23" pos:end="215:30">linesize</name><index pos:start="215:31" pos:end="215:33">[<expr pos:start="215:32" pos:end="215:32"><literal type="number" pos:start="215:32" pos:end="215:32">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:28"><expr pos:start="217:9" pos:end="217:27"><name pos:start="217:9" pos:end="217:11">src</name> <operator pos:start="217:13" pos:end="217:14">+=</operator> <name pos:start="217:16" pos:end="217:27"><name pos:start="217:16" pos:end="217:20">avctx</name><operator pos:start="217:21" pos:end="217:22">-&gt;</operator><name pos:start="217:23" pos:end="217:27">width</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="223:5" pos:end="223:50"><expr pos:start="223:5" pos:end="223:49"><name pos:start="223:5" pos:end="223:20"><name pos:start="223:5" pos:end="223:5">c</name><operator pos:start="223:6" pos:end="223:7">-&gt;</operator><name pos:start="223:8" pos:end="223:20">current_frame</name></name> <operator pos:start="223:22" pos:end="223:22">=</operator> <operator pos:start="223:24" pos:end="223:24">(</operator><name pos:start="223:25" pos:end="223:40"><name pos:start="223:25" pos:end="223:25">c</name><operator pos:start="223:26" pos:end="223:27">-&gt;</operator><name pos:start="223:28" pos:end="223:40">current_frame</name></name> <operator pos:start="223:42" pos:end="223:42">+</operator> <literal type="number" pos:start="223:44" pos:end="223:44">1</literal><operator pos:start="223:45" pos:end="223:45">)</operator> <operator pos:start="223:47" pos:end="223:47">&amp;</operator> <literal type="number" pos:start="223:49" pos:end="223:49">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="227:5" pos:end="227:39"><expr pos:start="227:5" pos:end="227:38"><operator pos:start="227:5" pos:end="227:5">*</operator><name pos:start="227:6" pos:end="227:14">data_size</name>       <operator pos:start="227:22" pos:end="227:22">=</operator> <sizeof pos:start="227:24" pos:end="227:38">sizeof<argument_list pos:start="227:30" pos:end="227:38">(<argument pos:start="227:31" pos:end="227:37"><expr pos:start="227:31" pos:end="227:37"><name pos:start="227:31" pos:end="227:37">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:30"><expr pos:start="229:5" pos:end="229:29"><operator pos:start="229:5" pos:end="229:5">*</operator><operator pos:start="229:6" pos:end="229:6">(</operator><name pos:start="229:7" pos:end="229:13">AVFrame</name> <operator pos:start="229:15" pos:end="229:15">*</operator><operator pos:start="229:16" pos:end="229:16">)</operator><name pos:start="229:17" pos:end="229:20">data</name> <operator pos:start="229:22" pos:end="229:22">=</operator> <name pos:start="229:24" pos:end="229:29"><name pos:start="229:24" pos:end="229:24">c</name><operator pos:start="229:25" pos:end="229:26">-&gt;</operator><name pos:start="229:27" pos:end="229:29">pic</name></name></expr>;</expr_stmt>



    <return pos:start="233:5" pos:end="233:21">return <expr pos:start="233:12" pos:end="233:20"><name pos:start="233:12" pos:end="233:20"><name pos:start="233:12" pos:end="233:14">pkt</name><operator pos:start="233:15" pos:end="233:16">-&gt;</operator><name pos:start="233:17" pos:end="233:20">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
