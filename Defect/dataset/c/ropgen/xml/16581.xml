<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16581.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">framebuffer_update_display</name><parameter_list pos:start="1:32" pos:end="27:36">(

    <parameter pos:start="3:5" pos:end="3:20"><decl pos:start="3:5" pos:end="3:20"><type pos:start="3:5" pos:end="3:20"><name pos:start="3:5" pos:end="3:16">DisplayState</name> <modifier pos:start="3:18" pos:end="3:18">*</modifier></type><name pos:start="3:19" pos:end="3:20">ds</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:31"><name pos:start="5:5" pos:end="5:16">MemoryRegion</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:31">address_space</name></decl></parameter>,

    <parameter pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:22">target_phys_addr_t</name></type> <name pos:start="7:24" pos:end="7:27">base</name></decl></parameter>,

    <parameter pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">cols</name></decl></parameter>, <comment type="block" pos:start="9:15" pos:end="9:37">/* Width in pixels.  */</comment>

    <parameter pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">rows</name></decl></parameter>, <comment type="block" pos:start="11:15" pos:end="11:38">/* Height in pixels.  */</comment>

    <parameter pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">src_width</name></decl></parameter>, <comment type="block" pos:start="13:20" pos:end="13:58">/* Length of source line, in bytes.  */</comment>

    <parameter pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:22">dest_row_pitch</name></decl></parameter>, <comment type="block" pos:start="15:25" pos:end="15:79">/* Bytes between adjacent horizontal output pixels.  */</comment>

    <parameter pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:22">dest_col_pitch</name></decl></parameter>, <comment type="block" pos:start="17:25" pos:end="17:77">/* Bytes between adjacent vertical output pixels.  */</comment>

    <parameter pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">invalidate</name></decl></parameter>, <comment type="block" pos:start="19:21" pos:end="19:61">/* nonzero to redraw the whole image.  */</comment>

    <parameter pos:start="21:5" pos:end="21:13"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:10">drawfn</name></type> <name pos:start="21:12" pos:end="21:13">fn</name></decl></parameter>,

    <parameter pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:16">opaque</name></decl></parameter>,

    <parameter pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:7">int</name> <modifier pos:start="25:9" pos:end="25:9">*</modifier></type><name pos:start="25:10" pos:end="25:18">first_row</name></decl></parameter>, <comment type="block" pos:start="25:21" pos:end="25:44">/* Input and output.  */</comment>

    <parameter pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:7">int</name> <modifier pos:start="27:9" pos:end="27:9">*</modifier></type><name pos:start="27:10" pos:end="27:17">last_row</name></decl></parameter> <comment type="block" pos:start="27:19" pos:end="27:35">/* Output only */</comment>)</parameter_list>

<block pos:start="29:1" pos:end="169:1">{<block_content pos:start="31:5" pos:end="167:21">

    <decl_stmt pos:start="31:5" pos:end="31:31"><decl pos:start="31:5" pos:end="31:30"><type pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:22">target_phys_addr_t</name></type> <name pos:start="31:24" pos:end="31:30">src_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:18"><decl pos:start="33:5" pos:end="33:17"><type pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:11">uint8_t</name> <modifier pos:start="33:13" pos:end="33:13">*</modifier></type><name pos:start="33:14" pos:end="33:17">dest</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:17"><decl pos:start="35:5" pos:end="35:16"><type pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:11">uint8_t</name> <modifier pos:start="35:13" pos:end="35:13">*</modifier></type><name pos:start="35:14" pos:end="35:16">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:22"><decl pos:start="37:5" pos:end="37:21"><type pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:11">uint8_t</name> <modifier pos:start="37:13" pos:end="37:13">*</modifier></type><name pos:start="37:14" pos:end="37:21">src_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:24"><decl pos:start="39:5" pos:end="39:13"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:13">first</name></decl>, <decl pos:start="39:16" pos:end="39:23"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:16" pos:end="39:19">last</name> <init pos:start="39:21" pos:end="39:23">= <expr pos:start="39:23" pos:end="39:23"><literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:14"><decl pos:start="41:5" pos:end="41:13"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:13">dirty</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:10"><decl pos:start="43:5" pos:end="43:9"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:20"><decl pos:start="45:5" pos:end="45:19"><type pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:14">ram_addr_t</name></type> <name pos:start="45:16" pos:end="45:19">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:36"><decl pos:start="47:5" pos:end="47:35"><type pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:23">MemoryRegionSection</name></type> <name pos:start="47:25" pos:end="47:35">mem_section</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:22"><decl pos:start="49:5" pos:end="49:21"><type pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:16">MemoryRegion</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:21">mem</name></decl>;</decl_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:19"><expr pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:5">i</name> <operator pos:start="53:7" pos:end="53:7">=</operator> <operator pos:start="53:9" pos:end="53:9">*</operator><name pos:start="53:10" pos:end="53:18">first_row</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><operator pos:start="55:5" pos:end="55:5">*</operator><name pos:start="55:6" pos:end="55:14">first_row</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <operator pos:start="55:18" pos:end="55:18">-</operator><literal type="number" pos:start="55:19" pos:end="55:19">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:11">src_len</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:23">src_width</name> <operator pos:start="57:25" pos:end="57:25">*</operator> <name pos:start="57:27" pos:end="57:30">rows</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:67"><expr pos:start="61:5" pos:end="61:66"><name pos:start="61:5" pos:end="61:15">mem_section</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:66"><name pos:start="61:19" pos:end="61:36">memory_region_find</name><argument_list pos:start="61:37" pos:end="61:66">(<argument pos:start="61:38" pos:end="61:50"><expr pos:start="61:38" pos:end="61:50"><name pos:start="61:38" pos:end="61:50">address_space</name></expr></argument>, <argument pos:start="61:53" pos:end="61:56"><expr pos:start="61:53" pos:end="61:56"><name pos:start="61:53" pos:end="61:56">base</name></expr></argument>, <argument pos:start="61:59" pos:end="61:65"><expr pos:start="61:59" pos:end="61:65"><name pos:start="61:59" pos:end="61:65">src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:77">(<expr pos:start="63:9" pos:end="63:76"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:19">mem_section</name><operator pos:start="63:20" pos:end="63:20">.</operator><name pos:start="63:21" pos:end="63:24">size</name></name> <operator pos:start="63:26" pos:end="63:27">!=</operator> <name pos:start="63:29" pos:end="63:35">src_len</name> <operator pos:start="63:37" pos:end="63:38">||</operator> <operator pos:start="63:40" pos:end="63:40">!</operator><call pos:start="63:41" pos:end="63:76"><name pos:start="63:41" pos:end="63:60">memory_region_is_ram</name><argument_list pos:start="63:61" pos:end="63:76">(<argument pos:start="63:62" pos:end="63:75"><expr pos:start="63:62" pos:end="63:75"><name pos:start="63:62" pos:end="63:75"><name pos:start="63:62" pos:end="63:72">mem_section</name><operator pos:start="63:73" pos:end="63:73">.</operator><name pos:start="63:74" pos:end="63:75">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:79" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:15">

        <return pos:start="65:9" pos:end="65:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:25"><expr pos:start="69:5" pos:end="69:24"><name pos:start="69:5" pos:end="69:7">mem</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <name pos:start="69:11" pos:end="69:24"><name pos:start="69:11" pos:end="69:21">mem_section</name><operator pos:start="69:22" pos:end="69:22">.</operator><name pos:start="69:23" pos:end="69:24">mr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:16"><expr pos:start="71:5" pos:end="71:15"><call pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:10">assert</name><argument_list pos:start="71:11" pos:end="71:15">(<argument pos:start="71:12" pos:end="71:14"><expr pos:start="71:12" pos:end="71:14"><name pos:start="71:12" pos:end="71:14">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:60"><expr pos:start="73:5" pos:end="73:59"><call pos:start="73:5" pos:end="73:59"><name pos:start="73:5" pos:end="73:10">assert</name><argument_list pos:start="73:11" pos:end="73:59">(<argument pos:start="73:12" pos:end="73:58"><expr pos:start="73:12" pos:end="73:58"><name pos:start="73:12" pos:end="73:50"><name pos:start="73:12" pos:end="73:22">mem_section</name><operator pos:start="73:23" pos:end="73:23">.</operator><name pos:start="73:24" pos:end="73:50">offset_within_address_space</name></name> <operator pos:start="73:52" pos:end="73:53">==</operator> <name pos:start="73:55" pos:end="73:58">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:41"><expr pos:start="77:5" pos:end="77:40"><call pos:start="77:5" pos:end="77:40"><name pos:start="77:5" pos:end="77:35">memory_region_sync_dirty_bitmap</name><argument_list pos:start="77:36" pos:end="77:40">(<argument pos:start="77:37" pos:end="77:39"><expr pos:start="77:37" pos:end="77:39"><name pos:start="77:37" pos:end="77:39">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:58"><expr pos:start="79:5" pos:end="79:57"><name pos:start="79:5" pos:end="79:12">src_base</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <call pos:start="79:16" pos:end="79:57"><name pos:start="79:16" pos:end="79:38">cpu_physical_memory_map</name><argument_list pos:start="79:39" pos:end="79:57">(<argument pos:start="79:40" pos:end="79:43"><expr pos:start="79:40" pos:end="79:43"><name pos:start="79:40" pos:end="79:43">base</name></expr></argument>, <argument pos:start="79:46" pos:end="79:53"><expr pos:start="79:46" pos:end="79:53"><operator pos:start="79:46" pos:end="79:46">&amp;</operator><name pos:start="79:47" pos:end="79:53">src_len</name></expr></argument>, <argument pos:start="79:56" pos:end="79:56"><expr pos:start="79:56" pos:end="79:56"><literal type="number" pos:start="79:56" pos:end="79:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="81:5" pos:end="85:37">/* If we can't map the framebuffer then bail.  We could try harder,

       but it's not really worth it as dirty flag tracking will probably

       already have failed above.  */</comment>

    <if_stmt pos:start="87:5" pos:end="89:15"><if pos:start="87:5" pos:end="89:15">if <condition pos:start="87:8" pos:end="87:18">(<expr pos:start="87:9" pos:end="87:17"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:17">src_base</name></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:15"><block_content pos:start="89:9" pos:end="89:15">

        <return pos:start="89:9" pos:end="89:15">return;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:36">(<expr pos:start="91:9" pos:end="91:35"><name pos:start="91:9" pos:end="91:15">src_len</name> <operator pos:start="91:17" pos:end="91:18">!=</operator> <name pos:start="91:20" pos:end="91:28">src_width</name> <operator pos:start="91:30" pos:end="91:30">*</operator> <name pos:start="91:32" pos:end="91:35">rows</name></expr>)</condition> <block pos:start="91:38" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:15">

        <expr_stmt pos:start="93:9" pos:end="93:59"><expr pos:start="93:9" pos:end="93:58"><call pos:start="93:9" pos:end="93:58"><name pos:start="93:9" pos:end="93:33">cpu_physical_memory_unmap</name><argument_list pos:start="93:34" pos:end="93:58">(<argument pos:start="93:35" pos:end="93:42"><expr pos:start="93:35" pos:end="93:42"><name pos:start="93:35" pos:end="93:42">src_base</name></expr></argument>, <argument pos:start="93:45" pos:end="93:51"><expr pos:start="93:45" pos:end="93:51"><name pos:start="93:45" pos:end="93:51">src_len</name></expr></argument>, <argument pos:start="93:54" pos:end="93:54"><expr pos:start="93:54" pos:end="93:54"><literal type="number" pos:start="93:54" pos:end="93:54">0</literal></expr></argument>, <argument pos:start="93:57" pos:end="93:57"><expr pos:start="93:57" pos:end="93:57"><literal type="number" pos:start="93:57" pos:end="93:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:19"><expr pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:7">src</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <name pos:start="99:11" pos:end="99:18">src_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:27"><expr pos:start="101:5" pos:end="101:26"><name pos:start="101:5" pos:end="101:8">dest</name> <operator pos:start="101:10" pos:end="101:10">=</operator> <call pos:start="101:12" pos:end="101:26"><name pos:start="101:12" pos:end="101:22">ds_get_data</name><argument_list pos:start="101:23" pos:end="101:26">(<argument pos:start="101:24" pos:end="101:25"><expr pos:start="101:24" pos:end="101:25"><name pos:start="101:24" pos:end="101:25">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="105:44"><if pos:start="103:5" pos:end="105:44">if <condition pos:start="103:8" pos:end="103:27">(<expr pos:start="103:9" pos:end="103:26"><name pos:start="103:9" pos:end="103:22">dest_col_pitch</name> <operator pos:start="103:24" pos:end="103:24">&lt;</operator> <literal type="number" pos:start="103:26" pos:end="103:26">0</literal></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:44"><block_content pos:start="105:9" pos:end="105:44">

        <expr_stmt pos:start="105:9" pos:end="105:44"><expr pos:start="105:9" pos:end="105:43"><name pos:start="105:9" pos:end="105:12">dest</name> <operator pos:start="105:14" pos:end="105:15">-=</operator> <name pos:start="105:17" pos:end="105:30">dest_col_pitch</name> <operator pos:start="105:32" pos:end="105:32">*</operator> <operator pos:start="105:34" pos:end="105:34">(</operator><name pos:start="105:35" pos:end="105:38">cols</name> <operator pos:start="105:40" pos:end="105:40">-</operator> <literal type="number" pos:start="105:42" pos:end="105:42">1</literal><operator pos:start="105:43" pos:end="105:43">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:27">(<expr pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:22">dest_row_pitch</name> <operator pos:start="107:24" pos:end="107:24">&lt;</operator> <literal type="number" pos:start="107:26" pos:end="107:26">0</literal></expr>)</condition> <block pos:start="107:29" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:44">

        <expr_stmt pos:start="109:9" pos:end="109:44"><expr pos:start="109:9" pos:end="109:43"><name pos:start="109:9" pos:end="109:12">dest</name> <operator pos:start="109:14" pos:end="109:15">-=</operator> <name pos:start="109:17" pos:end="109:30">dest_row_pitch</name> <operator pos:start="109:32" pos:end="109:32">*</operator> <operator pos:start="109:34" pos:end="109:34">(</operator><name pos:start="109:35" pos:end="109:38">rows</name> <operator pos:start="109:40" pos:end="109:40">-</operator> <literal type="number" pos:start="109:42" pos:end="109:42">1</literal><operator pos:start="109:43" pos:end="109:43">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:15"><expr pos:start="113:5" pos:end="113:14"><name pos:start="113:5" pos:end="113:9">first</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <operator pos:start="113:13" pos:end="113:13">-</operator><literal type="number" pos:start="113:14" pos:end="113:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:44"><expr pos:start="115:5" pos:end="115:43"><name pos:start="115:5" pos:end="115:8">addr</name> <operator pos:start="115:10" pos:end="115:10">=</operator> <name pos:start="115:12" pos:end="115:43"><name pos:start="115:12" pos:end="115:22">mem_section</name><operator pos:start="115:23" pos:end="115:23">.</operator><name pos:start="115:24" pos:end="115:43">offset_within_region</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:26"><expr pos:start="119:5" pos:end="119:25"><name pos:start="119:5" pos:end="119:8">addr</name> <operator pos:start="119:10" pos:end="119:11">+=</operator> <name pos:start="119:13" pos:end="119:13">i</name> <operator pos:start="119:15" pos:end="119:15">*</operator> <name pos:start="119:17" pos:end="119:25">src_width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:25"><expr pos:start="121:5" pos:end="121:24"><name pos:start="121:5" pos:end="121:7">src</name> <operator pos:start="121:9" pos:end="121:10">+=</operator> <name pos:start="121:12" pos:end="121:12">i</name> <operator pos:start="121:14" pos:end="121:14">*</operator> <name pos:start="121:16" pos:end="121:24">src_width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:31"><expr pos:start="123:5" pos:end="123:30"><name pos:start="123:5" pos:end="123:8">dest</name> <operator pos:start="123:10" pos:end="123:11">+=</operator> <name pos:start="123:13" pos:end="123:13">i</name> <operator pos:start="123:15" pos:end="123:15">*</operator> <name pos:start="123:17" pos:end="123:30">dest_row_pitch</name></expr>;</expr_stmt>



    <for pos:start="127:5" pos:end="151:5">for <control pos:start="127:9" pos:end="127:25">(<init pos:start="127:10" pos:end="127:10">;</init> <condition pos:start="127:12" pos:end="127:20"><expr pos:start="127:12" pos:end="127:19"><name pos:start="127:12" pos:end="127:12">i</name> <operator pos:start="127:14" pos:end="127:14">&lt;</operator> <name pos:start="127:16" pos:end="127:19">rows</name></expr>;</condition> <incr pos:start="127:22" pos:end="127:24"><expr pos:start="127:22" pos:end="127:24"><name pos:start="127:22" pos:end="127:22">i</name><operator pos:start="127:23" pos:end="127:24">++</operator></expr></incr>)</control> <block pos:start="127:27" pos:end="151:5">{<block_content pos:start="129:9" pos:end="149:31">

        <expr_stmt pos:start="129:9" pos:end="131:63"><expr pos:start="129:9" pos:end="131:62"><name pos:start="129:9" pos:end="129:13">dirty</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <call pos:start="129:17" pos:end="131:62"><name pos:start="129:17" pos:end="129:39">memory_region_get_dirty</name><argument_list pos:start="129:40" pos:end="131:62">(<argument pos:start="129:41" pos:end="129:43"><expr pos:start="129:41" pos:end="129:43"><name pos:start="129:41" pos:end="129:43">mem</name></expr></argument>, <argument pos:start="129:46" pos:end="129:49"><expr pos:start="129:46" pos:end="129:49"><name pos:start="129:46" pos:end="129:49">addr</name></expr></argument>, <argument pos:start="129:52" pos:end="129:60"><expr pos:start="129:52" pos:end="129:60"><name pos:start="129:52" pos:end="129:60">src_width</name></expr></argument>,

                                             <argument pos:start="131:46" pos:end="131:61"><expr pos:start="131:46" pos:end="131:61"><name pos:start="131:46" pos:end="131:61">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="143:9"><if pos:start="133:9" pos:end="143:9">if <condition pos:start="133:12" pos:end="133:32">(<expr pos:start="133:13" pos:end="133:31"><name pos:start="133:13" pos:end="133:17">dirty</name> <operator pos:start="133:19" pos:end="133:20">||</operator> <name pos:start="133:22" pos:end="133:31">invalidate</name></expr>)</condition> <block pos:start="133:34" pos:end="143:9">{<block_content pos:start="135:13" pos:end="141:21">

            <expr_stmt pos:start="135:13" pos:end="135:56"><expr pos:start="135:13" pos:end="135:55"><call pos:start="135:13" pos:end="135:55"><name pos:start="135:13" pos:end="135:14">fn</name><argument_list pos:start="135:15" pos:end="135:55">(<argument pos:start="135:16" pos:end="135:21"><expr pos:start="135:16" pos:end="135:21"><name pos:start="135:16" pos:end="135:21">opaque</name></expr></argument>, <argument pos:start="135:24" pos:end="135:27"><expr pos:start="135:24" pos:end="135:27"><name pos:start="135:24" pos:end="135:27">dest</name></expr></argument>, <argument pos:start="135:30" pos:end="135:32"><expr pos:start="135:30" pos:end="135:32"><name pos:start="135:30" pos:end="135:32">src</name></expr></argument>, <argument pos:start="135:35" pos:end="135:38"><expr pos:start="135:35" pos:end="135:38"><name pos:start="135:35" pos:end="135:38">cols</name></expr></argument>, <argument pos:start="135:41" pos:end="135:54"><expr pos:start="135:41" pos:end="135:54"><name pos:start="135:41" pos:end="135:54">dest_col_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="139:26"><if pos:start="137:13" pos:end="139:26">if <condition pos:start="137:16" pos:end="137:28">(<expr pos:start="137:17" pos:end="137:27"><name pos:start="137:17" pos:end="137:21">first</name> <operator pos:start="137:23" pos:end="137:24">==</operator> <operator pos:start="137:26" pos:end="137:26">-</operator><literal type="number" pos:start="137:27" pos:end="137:27">1</literal></expr>)</condition><block type="pseudo" pos:start="139:17" pos:end="139:26"><block_content pos:start="139:17" pos:end="139:26">

                <expr_stmt pos:start="139:17" pos:end="139:26"><expr pos:start="139:17" pos:end="139:25"><name pos:start="139:17" pos:end="139:21">first</name> <operator pos:start="139:23" pos:end="139:23">=</operator> <name pos:start="139:25" pos:end="139:25">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:21"><expr pos:start="141:13" pos:end="141:20"><name pos:start="141:13" pos:end="141:16">last</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <name pos:start="141:20" pos:end="141:20">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:26"><expr pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:12">addr</name> <operator pos:start="145:14" pos:end="145:15">+=</operator> <name pos:start="145:17" pos:end="145:25">src_width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:25"><expr pos:start="147:9" pos:end="147:24"><name pos:start="147:9" pos:end="147:11">src</name> <operator pos:start="147:13" pos:end="147:14">+=</operator> <name pos:start="147:16" pos:end="147:24">src_width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:31"><expr pos:start="149:9" pos:end="149:30"><name pos:start="149:9" pos:end="149:12">dest</name> <operator pos:start="149:14" pos:end="149:15">+=</operator> <name pos:start="149:17" pos:end="149:30">dest_row_pitch</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="153:5" pos:end="153:55"><expr pos:start="153:5" pos:end="153:54"><call pos:start="153:5" pos:end="153:54"><name pos:start="153:5" pos:end="153:29">cpu_physical_memory_unmap</name><argument_list pos:start="153:30" pos:end="153:54">(<argument pos:start="153:31" pos:end="153:38"><expr pos:start="153:31" pos:end="153:38"><name pos:start="153:31" pos:end="153:38">src_base</name></expr></argument>, <argument pos:start="153:41" pos:end="153:47"><expr pos:start="153:41" pos:end="153:47"><name pos:start="153:41" pos:end="153:47">src_len</name></expr></argument>, <argument pos:start="153:50" pos:end="153:50"><expr pos:start="153:50" pos:end="153:50"><literal type="number" pos:start="153:50" pos:end="153:50">0</literal></expr></argument>, <argument pos:start="153:53" pos:end="153:53"><expr pos:start="153:53" pos:end="153:53"><literal type="number" pos:start="153:53" pos:end="153:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:18">(<expr pos:start="155:9" pos:end="155:17"><name pos:start="155:9" pos:end="155:13">first</name> <operator pos:start="155:15" pos:end="155:15">&lt;</operator> <literal type="number" pos:start="155:17" pos:end="155:17">0</literal></expr>)</condition> <block pos:start="155:20" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:15">

        <return pos:start="157:9" pos:end="157:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="161:5" pos:end="163:48"><expr pos:start="161:5" pos:end="163:47"><call pos:start="161:5" pos:end="163:47"><name pos:start="161:5" pos:end="161:29">memory_region_reset_dirty</name><argument_list pos:start="161:30" pos:end="163:47">(<argument pos:start="161:31" pos:end="161:33"><expr pos:start="161:31" pos:end="161:33"><name pos:start="161:31" pos:end="161:33">mem</name></expr></argument>, <argument pos:start="161:36" pos:end="161:67"><expr pos:start="161:36" pos:end="161:67"><name pos:start="161:36" pos:end="161:67"><name pos:start="161:36" pos:end="161:46">mem_section</name><operator pos:start="161:47" pos:end="161:47">.</operator><name pos:start="161:48" pos:end="161:67">offset_within_region</name></name></expr></argument>, <argument pos:start="161:70" pos:end="161:76"><expr pos:start="161:70" pos:end="161:76"><name pos:start="161:70" pos:end="161:76">src_len</name></expr></argument>,

                              <argument pos:start="163:31" pos:end="163:46"><expr pos:start="163:31" pos:end="163:46"><name pos:start="163:31" pos:end="163:46">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:23"><expr pos:start="165:5" pos:end="165:22"><operator pos:start="165:5" pos:end="165:5">*</operator><name pos:start="165:6" pos:end="165:14">first_row</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <name pos:start="165:18" pos:end="165:22">first</name></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:21"><expr pos:start="167:5" pos:end="167:20"><operator pos:start="167:5" pos:end="167:5">*</operator><name pos:start="167:6" pos:end="167:13">last_row</name> <operator pos:start="167:15" pos:end="167:15">=</operator> <name pos:start="167:17" pos:end="167:20">last</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
