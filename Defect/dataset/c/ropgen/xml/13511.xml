<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13511.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">do_interrupt</name><parameter_list pos:start="1:18" pos:end="3:51">(<parameter pos:start="1:19" pos:end="1:27"><decl pos:start="1:19" pos:end="1:27"><type pos:start="1:19" pos:end="1:27"><name pos:start="1:19" pos:end="1:21">int</name></type> <name pos:start="1:23" pos:end="1:27">intno</name></decl></parameter>, <parameter pos:start="1:30" pos:end="1:39"><decl pos:start="1:30" pos:end="1:39"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:39">is_int</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:55">error_code</name></decl></parameter>, 

                  <parameter pos:start="3:19" pos:end="3:39"><decl pos:start="3:19" pos:end="3:39"><type pos:start="3:19" pos:end="3:39"><name pos:start="3:19" pos:end="3:26">unsigned</name> <name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:39">next_eip</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:50"><decl pos:start="3:42" pos:end="3:50"><type pos:start="3:42" pos:end="3:50"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:50">is_hw</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="9:5" pos:end="57:5">

<cpp:ifdef pos:start="7:1" pos:end="7:18">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:18">DEBUG_PCALL</name></cpp:ifdef>

    <if_stmt pos:start="9:5" pos:end="48:0"><if pos:start="9:5" pos:end="48:0">if <condition pos:start="9:8" pos:end="9:17">(<expr pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">loglevel</name></expr>)</condition> <block pos:start="9:19" pos:end="48:0">{<block_content pos:start="11:9" pos:end="43:16">

        <decl_stmt pos:start="11:9" pos:end="11:25"><decl pos:start="11:9" pos:end="11:24"><type pos:start="11:9" pos:end="11:18"><specifier pos:start="11:9" pos:end="11:14">static</specifier> <name pos:start="11:16" pos:end="11:18">int</name></type> <name pos:start="11:20" pos:end="11:24">count</name></decl>;</decl_stmt>

        <expr_stmt pos:start="13:9" pos:end="15:50"><expr pos:start="13:9" pos:end="15:49"><call pos:start="13:9" pos:end="15:49"><name pos:start="13:9" pos:end="13:15">fprintf</name><argument_list pos:start="13:16" pos:end="15:49">(<argument pos:start="13:17" pos:end="13:23"><expr pos:start="13:17" pos:end="13:23"><name pos:start="13:17" pos:end="13:23">logfile</name></expr></argument>, <argument pos:start="13:26" pos:end="13:78"><expr pos:start="13:26" pos:end="13:78"><literal type="string" pos:start="13:26" pos:end="13:78">"%d: interrupt: vector=%02x error_code=%04x int=%d\n"</literal></expr></argument>,

                <argument pos:start="15:17" pos:end="15:21"><expr pos:start="15:17" pos:end="15:21"><name pos:start="15:17" pos:end="15:21">count</name></expr></argument>, <argument pos:start="15:24" pos:end="15:28"><expr pos:start="15:24" pos:end="15:28"><name pos:start="15:24" pos:end="15:28">intno</name></expr></argument>, <argument pos:start="15:31" pos:end="15:40"><expr pos:start="15:31" pos:end="15:40"><name pos:start="15:31" pos:end="15:40">error_code</name></expr></argument>, <argument pos:start="15:43" pos:end="15:48"><expr pos:start="15:43" pos:end="15:48"><name pos:start="15:43" pos:end="15:48">is_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="42:0"><expr pos:start="17:9" pos:end="17:55"><call pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:26">cpu_x86_dump_state</name><argument_list pos:start="17:27" pos:end="17:55">(<argument pos:start="17:28" pos:end="17:30"><expr pos:start="17:28" pos:end="17:30"><name pos:start="17:28" pos:end="17:30">env</name></expr></argument>, <argument pos:start="17:33" pos:end="17:39"><expr pos:start="17:33" pos:end="17:39"><name pos:start="17:33" pos:end="17:39">logfile</name></expr></argument>, <argument pos:start="17:42" pos:end="17:54"><expr pos:start="17:42" pos:end="17:54"><name pos:start="17:42" pos:end="17:54">X86_DUMP_CCOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:5"><literal type="number" pos:start="19:5" pos:end="19:5">0</literal></expr></cpp:if>

        {

            int i;

            uint8_t *ptr;

            printf("       code=");

            ptr = env-&gt;segs[R_CS].base + env-&gt;eip;

            for(i = 0; i &lt; 16; i++) {

                printf(" %02x", ldub(ptr + i));

            }

            printf("\n");

        }

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="43:9" pos:end="43:16"><expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:13">count</name><operator pos:start="43:14" pos:end="43:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:33">(<expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:11">env</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:15">cr</name><index pos:start="49:16" pos:end="49:18">[<expr pos:start="49:17" pos:end="49:17"><literal type="number" pos:start="49:17" pos:end="49:17">0</literal></expr>]</index></name> <operator pos:start="49:20" pos:end="49:20">&amp;</operator> <name pos:start="49:22" pos:end="49:32">CR0_PE_MASK</name></expr>)</condition> <block pos:start="49:35" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:75">

        <expr_stmt pos:start="51:9" pos:end="51:75"><expr pos:start="51:9" pos:end="51:74"><call pos:start="51:9" pos:end="51:74"><name pos:start="51:9" pos:end="51:30">do_interrupt_protected</name><argument_list pos:start="51:31" pos:end="51:74">(<argument pos:start="51:32" pos:end="51:36"><expr pos:start="51:32" pos:end="51:36"><name pos:start="51:32" pos:end="51:36">intno</name></expr></argument>, <argument pos:start="51:39" pos:end="51:44"><expr pos:start="51:39" pos:end="51:44"><name pos:start="51:39" pos:end="51:44">is_int</name></expr></argument>, <argument pos:start="51:47" pos:end="51:56"><expr pos:start="51:47" pos:end="51:56"><name pos:start="51:47" pos:end="51:56">error_code</name></expr></argument>, <argument pos:start="51:59" pos:end="51:66"><expr pos:start="51:59" pos:end="51:66"><name pos:start="51:59" pos:end="51:66">next_eip</name></expr></argument>, <argument pos:start="51:69" pos:end="51:73"><expr pos:start="51:69" pos:end="51:73"><name pos:start="51:69" pos:end="51:73">is_hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="57:5">else <block pos:start="53:12" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:63">

        <expr_stmt pos:start="55:9" pos:end="55:63"><expr pos:start="55:9" pos:end="55:62"><call pos:start="55:9" pos:end="55:62"><name pos:start="55:9" pos:end="55:25">do_interrupt_real</name><argument_list pos:start="55:26" pos:end="55:62">(<argument pos:start="55:27" pos:end="55:31"><expr pos:start="55:27" pos:end="55:31"><name pos:start="55:27" pos:end="55:31">intno</name></expr></argument>, <argument pos:start="55:34" pos:end="55:39"><expr pos:start="55:34" pos:end="55:39"><name pos:start="55:34" pos:end="55:39">is_int</name></expr></argument>, <argument pos:start="55:42" pos:end="55:51"><expr pos:start="55:42" pos:end="55:51"><name pos:start="55:42" pos:end="55:51">error_code</name></expr></argument>, <argument pos:start="55:54" pos:end="55:61"><expr pos:start="55:54" pos:end="55:61"><name pos:start="55:54" pos:end="55:61">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
