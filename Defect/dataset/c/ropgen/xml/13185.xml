<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13185.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:30">decode_bytes</name><parameter_list pos:start="1:31" pos:end="1:80">(<parameter pos:start="1:32" pos:end="1:54"><decl pos:start="1:32" pos:end="1:54"><type pos:start="1:32" pos:end="1:54"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:44">uint8_t</name><modifier pos:start="1:45" pos:end="1:45">*</modifier></type> <name pos:start="1:47" pos:end="1:54">inbuffer</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:63">uint8_t</name><modifier pos:start="1:64" pos:end="1:64">*</modifier></type> <name pos:start="1:66" pos:end="1:68">out</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:79"><decl pos:start="1:71" pos:end="1:79"><type pos:start="1:71" pos:end="1:79"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:79">bytes</name></decl></parameter>)</parameter_list><block pos:start="1:81" pos:end="39:1">{<block_content pos:start="3:5" pos:end="37:15">

    <decl_stmt pos:start="3:5" pos:end="3:15"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">i</name></decl>, <decl pos:start="3:12" pos:end="3:14"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:12" pos:end="3:14">off</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:14">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:18">uint32_t</name><modifier pos:start="7:19" pos:end="7:19">*</modifier></type> <name pos:start="7:21" pos:end="7:23">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:12">uint32_t</name><modifier pos:start="9:13" pos:end="9:13">*</modifier></type> <name pos:start="9:15" pos:end="9:18">obuf</name> <init pos:start="9:20" pos:end="9:36">= <expr pos:start="9:22" pos:end="9:36"><operator pos:start="9:22" pos:end="9:22">(</operator><name pos:start="9:23" pos:end="9:30">uint32_t</name><operator pos:start="9:31" pos:end="9:31">*</operator><operator pos:start="9:32" pos:end="9:32">)</operator> <name pos:start="9:34" pos:end="9:36">out</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="19:47">/* FIXME: 64 bit platforms would be able to do 64 bits at a time.

     * I'm too lazy though, should be something like

     * for(i=0 ; i&lt;bitamount/64 ; i++)

     *     (int64_t)out[i] = 0x37c511f237c511f2^av_be2ne64(int64_t)in[i]);

     * Buffer alignment needs to be checked. */</comment>



    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:7">off</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <operator pos:start="23:11" pos:end="23:11">(</operator><name pos:start="23:12" pos:end="23:19">intptr_t</name><operator pos:start="23:20" pos:end="23:20">)</operator><name pos:start="23:21" pos:end="23:28">inbuffer</name> <operator pos:start="23:30" pos:end="23:30">&amp;</operator> <literal type="number" pos:start="23:32" pos:end="23:32">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:7">buf</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <operator pos:start="25:11" pos:end="25:11">(</operator><specifier pos:start="25:12" pos:end="25:16">const</specifier> <name pos:start="25:18" pos:end="25:25">uint32_t</name><operator pos:start="25:26" pos:end="25:26">*</operator><operator pos:start="25:27" pos:end="25:27">)</operator> <operator pos:start="25:29" pos:end="25:29">(</operator><name pos:start="25:30" pos:end="25:37">inbuffer</name> <operator pos:start="25:39" pos:end="25:39">-</operator> <name pos:start="25:41" pos:end="25:43">off</name><operator pos:start="25:44" pos:end="25:44">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:75"><expr pos:start="27:5" pos:end="27:74"><name pos:start="27:5" pos:end="27:5">c</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:74"><name pos:start="27:9" pos:end="27:18">av_be2ne32</name><argument_list pos:start="27:19" pos:end="27:74">(<argument pos:start="27:20" pos:end="27:73"><expr pos:start="27:20" pos:end="27:73"><operator pos:start="27:20" pos:end="27:20">(</operator><literal type="number" pos:start="27:21" pos:end="27:30">0x37c511f2</literal> <operator pos:start="27:32" pos:end="27:33">&gt;&gt;</operator> <operator pos:start="27:35" pos:end="27:35">(</operator><name pos:start="27:36" pos:end="27:38">off</name><operator pos:start="27:39" pos:end="27:39">*</operator><literal type="number" pos:start="27:40" pos:end="27:40">8</literal><operator pos:start="27:41" pos:end="27:41">)</operator><operator pos:start="27:42" pos:end="27:42">)</operator> <operator pos:start="27:44" pos:end="27:44">|</operator> <operator pos:start="27:46" pos:end="27:46">(</operator><literal type="number" pos:start="27:47" pos:end="27:56">0x37c511f2</literal> <operator pos:start="27:58" pos:end="27:59">&lt;&lt;</operator> <operator pos:start="27:61" pos:end="27:61">(</operator><literal type="number" pos:start="27:62" pos:end="27:64">32</literal><operator pos:start="27:64" pos:end="27:64">-</operator><operator pos:start="27:65" pos:end="27:65">(</operator><name pos:start="27:66" pos:end="27:68">off</name><operator pos:start="27:69" pos:end="27:69">*</operator><literal type="number" pos:start="27:70" pos:end="27:70">8</literal><operator pos:start="27:71" pos:end="27:71">)</operator><operator pos:start="27:72" pos:end="27:72">)</operator><operator pos:start="27:73" pos:end="27:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:9">bytes</name> <operator pos:start="29:11" pos:end="29:12">+=</operator> <literal type="number" pos:start="29:14" pos:end="29:16">3</literal> <operator pos:start="29:16" pos:end="29:16">+</operator> <name pos:start="29:18" pos:end="29:20">off</name></expr>;</expr_stmt>

    <for pos:start="31:5" pos:end="33:29">for <control pos:start="31:9" pos:end="31:33">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:28"><expr pos:start="31:17" pos:end="31:27"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:25">bytes</name><operator pos:start="31:26" pos:end="31:26">/</operator><literal type="number" pos:start="31:27" pos:end="31:27">4</literal></expr>;</condition> <incr pos:start="31:30" pos:end="31:32"><expr pos:start="31:30" pos:end="31:32"><name pos:start="31:30" pos:end="31:30">i</name><operator pos:start="31:31" pos:end="31:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="33:9" pos:end="33:29"><block_content pos:start="33:9" pos:end="33:29">

        <expr_stmt pos:start="33:9" pos:end="33:29"><expr pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">obuf</name><index pos:start="33:13" pos:end="33:15">[<expr pos:start="33:14" pos:end="33:14"><name pos:start="33:14" pos:end="33:14">i</name></expr>]</index></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:19">c</name> <operator pos:start="33:21" pos:end="33:21">^</operator> <name pos:start="33:23" pos:end="33:28"><name pos:start="33:23" pos:end="33:25">buf</name><index pos:start="33:26" pos:end="33:28">[<expr pos:start="33:27" pos:end="33:27"><name pos:start="33:27" pos:end="33:27">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



    <return pos:start="37:5" pos:end="37:15">return <expr pos:start="37:12" pos:end="37:14"><name pos:start="37:12" pos:end="37:14">off</name></expr>;</return>

</block_content>}</block></function>
</unit>
