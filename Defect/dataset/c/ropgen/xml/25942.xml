<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25942.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">handle_alloc</name><parameter_list pos:start="1:24" pos:end="2:59">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:54">uint64_t</name></type> <name pos:start="1:56" pos:end="1:67">guest_offset</name></decl></parameter>,
    <parameter pos:start="2:5" pos:end="2:25"><decl pos:start="2:5" pos:end="2:25"><type pos:start="2:5" pos:end="2:25"><name pos:start="2:5" pos:end="2:12">uint64_t</name> <modifier pos:start="2:14" pos:end="2:14">*</modifier></type><name pos:start="2:15" pos:end="2:25">host_offset</name></decl></parameter>, <parameter pos:start="2:28" pos:end="2:42"><decl pos:start="2:28" pos:end="2:42"><type pos:start="2:28" pos:end="2:42"><name pos:start="2:28" pos:end="2:35">uint64_t</name> <modifier pos:start="2:37" pos:end="2:37">*</modifier></type><name pos:start="2:38" pos:end="2:42">bytes</name></decl></parameter>, <parameter pos:start="2:45" pos:end="2:58"><decl pos:start="2:45" pos:end="2:58"><type pos:start="2:45" pos:end="2:58"><name pos:start="2:45" pos:end="2:54">QCowL2Meta</name> <modifier pos:start="2:56" pos:end="2:56">*</modifier><modifier pos:start="2:57" pos:end="2:57">*</modifier></type><name pos:start="2:58" pos:end="2:58">m</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="97:15">{<block_content pos:start="4:5" pos:end="97:15">
    <decl_stmt pos:start="4:5" pos:end="4:34"><decl pos:start="4:5" pos:end="4:33"><type pos:start="4:5" pos:end="4:19"><name pos:start="4:5" pos:end="4:17">BDRVQcowState</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:20">s</name> <init pos:start="4:22" pos:end="4:33">= <expr pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:25">bs</name><operator pos:start="4:26" pos:end="4:27">-&gt;</operator><name pos:start="4:28" pos:end="4:33">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">l2_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:23"><decl pos:start="6:5" pos:end="6:22"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">uint64_t</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:22">l2_table</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:18">entry</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:29"><decl pos:start="8:5" pos:end="8:28"><type pos:start="8:5" pos:end="8:16"><name pos:start="8:5" pos:end="8:12">unsigned</name> <name pos:start="8:14" pos:end="8:16">int</name></type> <name pos:start="8:18" pos:end="8:28">nb_clusters</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:34"><decl pos:start="10:5" pos:end="10:33"><type pos:start="10:5" pos:end="10:12"><name pos:start="10:5" pos:end="10:12">uint64_t</name></type> <name pos:start="10:14" pos:end="10:33">alloc_cluster_offset</name></decl>;</decl_stmt>
    <expr_stmt pos:start="11:5" pos:end="12:37"><expr pos:start="11:5" pos:end="12:36"><call pos:start="11:5" pos:end="12:36"><name pos:start="11:5" pos:end="11:28">trace_qcow2_handle_alloc</name><argument_list pos:start="11:29" pos:end="12:36">(<argument pos:start="11:30" pos:end="11:50"><expr pos:start="11:30" pos:end="11:50"><call pos:start="11:30" pos:end="11:50"><name pos:start="11:30" pos:end="11:48">qemu_coroutine_self</name><argument_list pos:start="11:49" pos:end="11:50">()</argument_list></call></expr></argument>, <argument pos:start="11:53" pos:end="11:64"><expr pos:start="11:53" pos:end="11:64"><name pos:start="11:53" pos:end="11:64">guest_offset</name></expr></argument>, <argument pos:start="11:67" pos:end="11:78"><expr pos:start="11:67" pos:end="11:78"><operator pos:start="11:67" pos:end="11:67">*</operator><name pos:start="11:68" pos:end="11:78">host_offset</name></expr></argument>,
                             <argument pos:start="12:30" pos:end="12:35"><expr pos:start="12:30" pos:end="12:35"><operator pos:start="12:30" pos:end="12:30">*</operator><name pos:start="12:31" pos:end="12:35">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:23"><expr pos:start="13:5" pos:end="13:22"><call pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:22">(<argument pos:start="13:12" pos:end="13:21"><expr pos:start="13:12" pos:end="13:21"><operator pos:start="13:12" pos:end="13:12">*</operator><name pos:start="13:13" pos:end="13:17">bytes</name> <operator pos:start="13:19" pos:end="13:19">&gt;</operator> <literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="14:5" pos:end="17:7">/*
     * Calculate the number of clusters to look for. We stop at L2 table
     * boundaries to keep things simple.
     */</comment>
    <expr_stmt pos:start="18:5" pos:end="19:75"><expr pos:start="18:5" pos:end="19:74"><name pos:start="18:5" pos:end="18:15">nb_clusters</name> <operator pos:start="18:17" pos:end="18:17">=</operator>
        <call pos:start="19:9" pos:end="19:74"><name pos:start="19:9" pos:end="19:24">size_to_clusters</name><argument_list pos:start="19:25" pos:end="19:74">(<argument pos:start="19:26" pos:end="19:26"><expr pos:start="19:26" pos:end="19:26"><name pos:start="19:26" pos:end="19:26">s</name></expr></argument>, <argument pos:start="19:29" pos:end="19:73"><expr pos:start="19:29" pos:end="19:73"><call pos:start="19:29" pos:end="19:64"><name pos:start="19:29" pos:end="19:47">offset_into_cluster</name><argument_list pos:start="19:48" pos:end="19:64">(<argument pos:start="19:49" pos:end="19:49"><expr pos:start="19:49" pos:end="19:49"><name pos:start="19:49" pos:end="19:49">s</name></expr></argument>, <argument pos:start="19:52" pos:end="19:63"><expr pos:start="19:52" pos:end="19:63"><name pos:start="19:52" pos:end="19:63">guest_offset</name></expr></argument>)</argument_list></call> <operator pos:start="19:66" pos:end="19:66">+</operator> <operator pos:start="19:68" pos:end="19:68">*</operator><name pos:start="19:69" pos:end="19:73">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:51"><expr pos:start="20:5" pos:end="20:50"><name pos:start="20:5" pos:end="20:12">l2_index</name> <operator pos:start="20:14" pos:end="20:14">=</operator> <call pos:start="20:16" pos:end="20:50"><name pos:start="20:16" pos:end="20:33">offset_to_l2_index</name><argument_list pos:start="20:34" pos:end="20:50">(<argument pos:start="20:35" pos:end="20:35"><expr pos:start="20:35" pos:end="20:35"><name pos:start="20:35" pos:end="20:35">s</name></expr></argument>, <argument pos:start="20:38" pos:end="20:49"><expr pos:start="20:38" pos:end="20:49"><name pos:start="20:38" pos:end="20:49">guest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:58"><expr pos:start="21:5" pos:end="21:57"><name pos:start="21:5" pos:end="21:15">nb_clusters</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:57"><name pos:start="21:19" pos:end="21:21">MIN</name><argument_list pos:start="21:22" pos:end="21:57">(<argument pos:start="21:23" pos:end="21:33"><expr pos:start="21:23" pos:end="21:33"><name pos:start="21:23" pos:end="21:33">nb_clusters</name></expr></argument>, <argument pos:start="21:36" pos:end="21:56"><expr pos:start="21:36" pos:end="21:56"><name pos:start="21:36" pos:end="21:45"><name pos:start="21:36" pos:end="21:36">s</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:45">l2_size</name></name> <operator pos:start="21:47" pos:end="21:47">-</operator> <name pos:start="21:49" pos:end="21:56">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="22:5" pos:end="22:54">/* Find L2 entry for the first involved cluster */</comment>
    <expr_stmt pos:start="23:5" pos:end="23:68"><expr pos:start="23:5" pos:end="23:67"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:67"><name pos:start="23:11" pos:end="23:27">get_cluster_table</name><argument_list pos:start="23:28" pos:end="23:67">(<argument pos:start="23:29" pos:end="23:30"><expr pos:start="23:29" pos:end="23:30"><name pos:start="23:29" pos:end="23:30">bs</name></expr></argument>, <argument pos:start="23:33" pos:end="23:44"><expr pos:start="23:33" pos:end="23:44"><name pos:start="23:33" pos:end="23:44">guest_offset</name></expr></argument>, <argument pos:start="23:47" pos:end="23:55"><expr pos:start="23:47" pos:end="23:55"><operator pos:start="23:47" pos:end="23:47">&amp;</operator><name pos:start="23:48" pos:end="23:55">l2_table</name></expr></argument>, <argument pos:start="23:58" pos:end="23:66"><expr pos:start="23:58" pos:end="23:66"><operator pos:start="23:58" pos:end="23:58">&amp;</operator><name pos:start="23:59" pos:end="23:66">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="24:5" pos:end="97:15"><if pos:start="24:5" pos:end="97:15">if <condition pos:start="24:8" pos:end="24:16">(<expr pos:start="24:9" pos:end="24:15"><name pos:start="24:9" pos:end="24:11">ret</name> <operator pos:start="24:13" pos:end="24:13">&lt;</operator> <literal type="number" pos:start="24:15" pos:end="24:15">0</literal></expr>)</condition> <block pos:start="24:18" pos:end="97:15">{<block_content pos:start="25:9" pos:end="97:15">
        <return pos:start="25:9" pos:end="25:19">return <expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">ret</name></expr>;</return>
    <expr_stmt pos:start="26:5" pos:end="26:44"><expr pos:start="26:5" pos:end="26:43"><name pos:start="26:5" pos:end="26:9">entry</name> <operator pos:start="26:11" pos:end="26:11">=</operator> <call pos:start="26:13" pos:end="26:43"><name pos:start="26:13" pos:end="26:23">be64_to_cpu</name><argument_list pos:start="26:24" pos:end="26:43">(<argument pos:start="26:25" pos:end="26:42"><expr pos:start="26:25" pos:end="26:42"><name pos:start="26:25" pos:end="26:42"><name pos:start="26:25" pos:end="26:32">l2_table</name><index pos:start="26:33" pos:end="26:42">[<expr pos:start="26:34" pos:end="26:41"><name pos:start="26:34" pos:end="26:41">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="27:5" pos:end="27:66">/* For the moment, overwrite compressed clusters one by one */</comment>
    <if_stmt pos:start="28:5" pos:end="97:15"><if pos:start="28:5" pos:end="30:5">if <condition pos:start="28:8" pos:end="28:38">(<expr pos:start="28:9" pos:end="28:37"><name pos:start="28:9" pos:end="28:13">entry</name> <operator pos:start="28:15" pos:end="28:15">&amp;</operator> <name pos:start="28:17" pos:end="28:37">QCOW_OFLAG_COMPRESSED</name></expr>)</condition> <block pos:start="28:40" pos:end="30:5">{<block_content pos:start="29:9" pos:end="29:24">
        <expr_stmt pos:start="29:9" pos:end="29:24"><expr pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:19">nb_clusters</name> <operator pos:start="29:21" pos:end="29:21">=</operator> <literal type="number" pos:start="29:23" pos:end="29:23">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="30:7" pos:end="97:15">else <block pos:start="30:12" pos:end="97:15">{<block_content pos:start="31:9" pos:end="97:15">
        <expr_stmt pos:start="31:9" pos:end="31:77"><expr pos:start="31:9" pos:end="31:76"><name pos:start="31:9" pos:end="31:19">nb_clusters</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:76"><name pos:start="31:23" pos:end="31:40">count_cow_clusters</name><argument_list pos:start="31:41" pos:end="31:76">(<argument pos:start="31:42" pos:end="31:42"><expr pos:start="31:42" pos:end="31:42"><name pos:start="31:42" pos:end="31:42">s</name></expr></argument>, <argument pos:start="31:45" pos:end="31:55"><expr pos:start="31:45" pos:end="31:55"><name pos:start="31:45" pos:end="31:55">nb_clusters</name></expr></argument>, <argument pos:start="31:58" pos:end="31:65"><expr pos:start="31:58" pos:end="31:65"><name pos:start="31:58" pos:end="31:65">l2_table</name></expr></argument>, <argument pos:start="31:68" pos:end="31:75"><expr pos:start="31:68" pos:end="31:75"><name pos:start="31:68" pos:end="31:75">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="32:5" pos:end="34:30">/* This function is only called when there were no non-COW clusters, so if
     * we can't find any unallocated or COW clusters either, something is
     * wrong with our code. */</comment>
    <expr_stmt pos:start="35:5" pos:end="35:28"><expr pos:start="35:5" pos:end="35:27"><call pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:27">(<argument pos:start="35:12" pos:end="35:26"><expr pos:start="35:12" pos:end="35:26"><name pos:start="35:12" pos:end="35:22">nb_clusters</name> <operator pos:start="35:24" pos:end="35:24">&gt;</operator> <literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:69"><expr pos:start="36:5" pos:end="36:68"><name pos:start="36:5" pos:end="36:7">ret</name> <operator pos:start="36:9" pos:end="36:9">=</operator> <call pos:start="36:11" pos:end="36:68"><name pos:start="36:11" pos:end="36:25">qcow2_cache_put</name><argument_list pos:start="36:26" pos:end="36:68">(<argument pos:start="36:27" pos:end="36:28"><expr pos:start="36:27" pos:end="36:28"><name pos:start="36:27" pos:end="36:28">bs</name></expr></argument>, <argument pos:start="36:31" pos:end="36:47"><expr pos:start="36:31" pos:end="36:47"><name pos:start="36:31" pos:end="36:47"><name pos:start="36:31" pos:end="36:31">s</name><operator pos:start="36:32" pos:end="36:33">-&gt;</operator><name pos:start="36:34" pos:end="36:47">l2_table_cache</name></name></expr></argument>, <argument pos:start="36:50" pos:end="36:67"><expr pos:start="36:50" pos:end="36:67"><operator pos:start="36:50" pos:end="36:50">(</operator><name pos:start="36:51" pos:end="36:54">void</name><operator pos:start="36:55" pos:end="36:55">*</operator><operator pos:start="36:56" pos:end="36:56">*</operator><operator pos:start="36:57" pos:end="36:57">)</operator> <operator pos:start="36:59" pos:end="36:59">&amp;</operator><name pos:start="36:60" pos:end="36:67">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="37:5" pos:end="97:15"><if pos:start="37:5" pos:end="97:15">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>)</condition> <block pos:start="37:18" pos:end="97:15">{<block_content pos:start="38:9" pos:end="97:15">
        <return pos:start="38:9" pos:end="38:19">return <expr pos:start="38:16" pos:end="38:18"><name pos:start="38:16" pos:end="38:18">ret</name></expr>;</return>
    <comment type="block" pos:start="39:5" pos:end="39:68">/* Allocate, if necessary at a given offset in the image file */</comment>
    <expr_stmt pos:start="40:5" pos:end="40:61"><expr pos:start="40:5" pos:end="40:60"><name pos:start="40:5" pos:end="40:24">alloc_cluster_offset</name> <operator pos:start="40:26" pos:end="40:26">=</operator> <call pos:start="40:28" pos:end="40:60"><name pos:start="40:28" pos:end="40:43">start_of_cluster</name><argument_list pos:start="40:44" pos:end="40:60">(<argument pos:start="40:45" pos:end="40:45"><expr pos:start="40:45" pos:end="40:45"><name pos:start="40:45" pos:end="40:45">s</name></expr></argument>, <argument pos:start="40:48" pos:end="40:59"><expr pos:start="40:48" pos:end="40:59"><operator pos:start="40:48" pos:end="40:48">*</operator><name pos:start="40:49" pos:end="40:59">host_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="41:5" pos:end="42:48"><expr pos:start="41:5" pos:end="42:47"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="42:47"><name pos:start="41:11" pos:end="41:33">do_alloc_cluster_offset</name><argument_list pos:start="41:34" pos:end="42:47">(<argument pos:start="41:35" pos:end="41:36"><expr pos:start="41:35" pos:end="41:36"><name pos:start="41:35" pos:end="41:36">bs</name></expr></argument>, <argument pos:start="41:39" pos:end="41:50"><expr pos:start="41:39" pos:end="41:50"><name pos:start="41:39" pos:end="41:50">guest_offset</name></expr></argument>, <argument pos:start="41:53" pos:end="41:73"><expr pos:start="41:53" pos:end="41:73"><operator pos:start="41:53" pos:end="41:53">&amp;</operator><name pos:start="41:54" pos:end="41:73">alloc_cluster_offset</name></expr></argument>,
                                  <argument pos:start="42:35" pos:end="42:46"><expr pos:start="42:35" pos:end="42:46"><operator pos:start="42:35" pos:end="42:35">&amp;</operator><name pos:start="42:36" pos:end="42:46">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="43:5" pos:end="97:15"><if pos:start="43:5" pos:end="97:15">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="97:15">{<block_content pos:start="45:5" pos:end="97:15">
    <comment type="block" pos:start="44:5" pos:end="44:44">/* Can't extend contiguous allocation */</comment>
    <if_stmt pos:start="45:5" pos:end="97:15"><if pos:start="45:5" pos:end="97:15">if <condition pos:start="45:8" pos:end="45:25">(<expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:19">nb_clusters</name> <operator pos:start="45:21" pos:end="45:22">==</operator> <literal type="number" pos:start="45:24" pos:end="45:24">0</literal></expr>)</condition> <block pos:start="45:27" pos:end="97:15">{<block_content pos:start="46:9" pos:end="97:15">
        <expr_stmt pos:start="46:9" pos:end="46:19"><expr pos:start="46:9" pos:end="46:18"><operator pos:start="46:9" pos:end="46:9">*</operator><name pos:start="46:10" pos:end="46:14">bytes</name> <operator pos:start="46:16" pos:end="46:16">=</operator> <literal type="number" pos:start="46:18" pos:end="46:18">0</literal></expr>;</expr_stmt>
        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</return>
    <comment type="block" pos:start="48:5" pos:end="61:7">/*
     * Save info needed for meta data update.
     *
     * requested_sectors: Number of sectors from the start of the first
     * newly allocated cluster to the end of the (possibly shortened
     * before) write request.
     *
     * avail_sectors: Number of sectors from the start of the first
     * newly allocated to the end of the last newly allocated cluster.
     *
     * nb_sectors: The number of sectors from the start of the first
     * newly allocated cluster to the end of the area that the write
     * request actually writes to (excluding COW at the end)
     */</comment>
    <decl_stmt pos:start="62:5" pos:end="64:28"><decl pos:start="62:5" pos:end="64:27"><type pos:start="62:5" pos:end="62:7"><name pos:start="62:5" pos:end="62:7">int</name></type> <name pos:start="62:9" pos:end="62:25">requested_sectors</name> <init pos:start="62:27" pos:end="64:27">=
        <expr pos:start="63:9" pos:end="64:27"><operator pos:start="63:9" pos:end="63:9">(</operator><operator pos:start="63:10" pos:end="63:10">*</operator><name pos:start="63:11" pos:end="63:15">bytes</name> <operator pos:start="63:17" pos:end="63:17">+</operator> <call pos:start="63:19" pos:end="63:54"><name pos:start="63:19" pos:end="63:37">offset_into_cluster</name><argument_list pos:start="63:38" pos:end="63:54">(<argument pos:start="63:39" pos:end="63:39"><expr pos:start="63:39" pos:end="63:39"><name pos:start="63:39" pos:end="63:39">s</name></expr></argument>, <argument pos:start="63:42" pos:end="63:53"><expr pos:start="63:42" pos:end="63:53"><name pos:start="63:42" pos:end="63:53">guest_offset</name></expr></argument>)</argument_list></call><operator pos:start="63:55" pos:end="63:55">)</operator>
        <operator pos:start="64:9" pos:end="64:10">&gt;&gt;</operator> <name pos:start="64:12" pos:end="64:27">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="65:5" pos:end="66:64"><decl pos:start="65:5" pos:end="66:63"><type pos:start="65:5" pos:end="65:7"><name pos:start="65:5" pos:end="65:7">int</name></type> <name pos:start="65:9" pos:end="65:21">avail_sectors</name> <init pos:start="65:23" pos:end="66:63">= <expr pos:start="65:25" pos:end="66:63"><name pos:start="65:25" pos:end="65:35">nb_clusters</name>
                        <operator pos:start="66:25" pos:end="66:26">&lt;&lt;</operator> <operator pos:start="66:28" pos:end="66:28">(</operator><name pos:start="66:29" pos:end="66:43"><name pos:start="66:29" pos:end="66:29">s</name><operator pos:start="66:30" pos:end="66:31">-&gt;</operator><name pos:start="66:32" pos:end="66:43">cluster_bits</name></name> <operator pos:start="66:45" pos:end="66:45">-</operator> <name pos:start="66:47" pos:end="66:62">BDRV_SECTOR_BITS</name><operator pos:start="66:63" pos:end="66:63">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="67:5" pos:end="68:44"><decl pos:start="67:5" pos:end="68:43"><type pos:start="67:5" pos:end="67:7"><name pos:start="67:5" pos:end="67:7">int</name></type> <name pos:start="67:9" pos:end="67:21">alloc_n_start</name> <init pos:start="67:23" pos:end="68:43">= <expr pos:start="67:25" pos:end="68:43"><call pos:start="67:25" pos:end="67:60"><name pos:start="67:25" pos:end="67:43">offset_into_cluster</name><argument_list pos:start="67:44" pos:end="67:60">(<argument pos:start="67:45" pos:end="67:45"><expr pos:start="67:45" pos:end="67:45"><name pos:start="67:45" pos:end="67:45">s</name></expr></argument>, <argument pos:start="67:48" pos:end="67:59"><expr pos:start="67:48" pos:end="67:59"><name pos:start="67:48" pos:end="67:59">guest_offset</name></expr></argument>)</argument_list></call>
                        <operator pos:start="68:25" pos:end="68:26">&gt;&gt;</operator> <name pos:start="68:28" pos:end="68:43">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="69:5" pos:end="69:59"><decl pos:start="69:5" pos:end="69:58"><type pos:start="69:5" pos:end="69:7"><name pos:start="69:5" pos:end="69:7">int</name></type> <name pos:start="69:9" pos:end="69:18">nb_sectors</name> <init pos:start="69:20" pos:end="69:58">= <expr pos:start="69:22" pos:end="69:58"><call pos:start="69:22" pos:end="69:58"><name pos:start="69:22" pos:end="69:24">MIN</name><argument_list pos:start="69:25" pos:end="69:58">(<argument pos:start="69:26" pos:end="69:42"><expr pos:start="69:26" pos:end="69:42"><name pos:start="69:26" pos:end="69:42">requested_sectors</name></expr></argument>, <argument pos:start="69:45" pos:end="69:57"><expr pos:start="69:45" pos:end="69:57"><name pos:start="69:45" pos:end="69:57">avail_sectors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="70:5" pos:end="70:27"><decl pos:start="70:5" pos:end="70:26"><type pos:start="70:5" pos:end="70:16"><name pos:start="70:5" pos:end="70:14">QCowL2Meta</name> <modifier pos:start="70:16" pos:end="70:16">*</modifier></type><name pos:start="70:17" pos:end="70:21">old_m</name> <init pos:start="70:23" pos:end="70:26">= <expr pos:start="70:25" pos:end="70:26"><operator pos:start="70:25" pos:end="70:25">*</operator><name pos:start="70:26" pos:end="70:26">m</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="71:5" pos:end="71:32"><expr pos:start="71:5" pos:end="71:31"><operator pos:start="71:5" pos:end="71:5">*</operator><name pos:start="71:6" pos:end="71:6">m</name> <operator pos:start="71:8" pos:end="71:8">=</operator> <call pos:start="71:10" pos:end="71:31"><name pos:start="71:10" pos:end="71:18">g_malloc0</name><argument_list pos:start="71:19" pos:end="71:31">(<argument pos:start="71:20" pos:end="71:30"><expr pos:start="71:20" pos:end="71:30"><sizeof pos:start="71:20" pos:end="71:30">sizeof<argument_list pos:start="71:26" pos:end="71:30">(<argument pos:start="71:27" pos:end="71:29"><expr pos:start="71:27" pos:end="71:29"><operator pos:start="71:27" pos:end="71:27">*</operator><operator pos:start="71:28" pos:end="71:28">*</operator><name pos:start="71:29" pos:end="71:29">m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="72:5" pos:end="86:6"><expr pos:start="72:5" pos:end="86:5"><operator pos:start="72:5" pos:end="72:5">*</operator><operator pos:start="72:6" pos:end="72:6">*</operator><name pos:start="72:7" pos:end="72:7">m</name> <operator pos:start="72:9" pos:end="72:9">=</operator> <operator pos:start="72:11" pos:end="72:11">(</operator><name pos:start="72:12" pos:end="72:21">QCowL2Meta</name><operator pos:start="72:22" pos:end="72:22">)</operator> <block pos:start="72:24" pos:end="86:5">{
        <expr pos:start="73:9" pos:end="73:31"><operator pos:start="73:9" pos:end="73:9">.</operator><name pos:start="73:10" pos:end="73:13">next</name>           <operator pos:start="73:25" pos:end="73:25">=</operator> <name pos:start="73:27" pos:end="73:31">old_m</name></expr>,
        <expr pos:start="74:9" pos:end="74:46"><operator pos:start="74:9" pos:end="74:9">.</operator><name pos:start="74:10" pos:end="74:21">alloc_offset</name>   <operator pos:start="74:25" pos:end="74:25">=</operator> <name pos:start="74:27" pos:end="74:46">alloc_cluster_offset</name></expr>,
        <expr pos:start="75:9" pos:end="75:59"><operator pos:start="75:9" pos:end="75:9">.</operator><name pos:start="75:10" pos:end="75:15">offset</name>         <operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="75:59"><name pos:start="75:27" pos:end="75:42">start_of_cluster</name><argument_list pos:start="75:43" pos:end="75:59">(<argument pos:start="75:44" pos:end="75:44"><expr pos:start="75:44" pos:end="75:44"><name pos:start="75:44" pos:end="75:44">s</name></expr></argument>, <argument pos:start="75:47" pos:end="75:58"><expr pos:start="75:47" pos:end="75:58"><name pos:start="75:47" pos:end="75:58">guest_offset</name></expr></argument>)</argument_list></call></expr>,
        <expr pos:start="76:9" pos:end="76:37"><operator pos:start="76:9" pos:end="76:9">.</operator><name pos:start="76:10" pos:end="76:20">nb_clusters</name>    <operator pos:start="76:25" pos:end="76:25">=</operator> <name pos:start="76:27" pos:end="76:37">nb_clusters</name></expr>,
        <expr pos:start="77:9" pos:end="77:36"><operator pos:start="77:9" pos:end="77:9">.</operator><name pos:start="77:10" pos:end="77:21">nb_available</name>   <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:36">nb_sectors</name></expr>,
        <expr pos:start="78:9" pos:end="81:9"><operator pos:start="78:9" pos:end="78:9">.</operator><name pos:start="78:10" pos:end="78:18">cow_start</name> <operator pos:start="78:20" pos:end="78:20">=</operator> <block pos:start="78:22" pos:end="81:9">{
            <expr pos:start="79:13" pos:end="79:27"><operator pos:start="79:13" pos:end="79:13">.</operator><name pos:start="79:14" pos:end="79:19">offset</name>     <operator pos:start="79:25" pos:end="79:25">=</operator> <literal type="number" pos:start="79:27" pos:end="79:27">0</literal></expr>,
            <expr pos:start="80:13" pos:end="80:39"><operator pos:start="80:13" pos:end="80:13">.</operator><name pos:start="80:14" pos:end="80:23">nb_sectors</name> <operator pos:start="80:25" pos:end="80:25">=</operator> <name pos:start="80:27" pos:end="80:39">alloc_n_start</name></expr>,
        }</block></expr>,
        <expr pos:start="82:9" pos:end="85:9"><operator pos:start="82:9" pos:end="82:9">.</operator><name pos:start="82:10" pos:end="82:16">cow_end</name> <operator pos:start="82:18" pos:end="82:18">=</operator> <block pos:start="82:20" pos:end="85:9">{
            <expr pos:start="83:13" pos:end="83:55"><operator pos:start="83:13" pos:end="83:13">.</operator><name pos:start="83:14" pos:end="83:19">offset</name>     <operator pos:start="83:25" pos:end="83:25">=</operator> <name pos:start="83:27" pos:end="83:36">nb_sectors</name> <operator pos:start="83:38" pos:end="83:38">*</operator> <name pos:start="83:40" pos:end="83:55">BDRV_SECTOR_SIZE</name></expr>,
            <expr pos:start="84:13" pos:end="84:52"><operator pos:start="84:13" pos:end="84:13">.</operator><name pos:start="84:14" pos:end="84:23">nb_sectors</name> <operator pos:start="84:25" pos:end="84:25">=</operator> <name pos:start="84:27" pos:end="84:39">avail_sectors</name> <operator pos:start="84:41" pos:end="84:41">-</operator> <name pos:start="84:43" pos:end="84:52">nb_sectors</name></expr>,
        }</block></expr>,
    }</block></expr>;</expr_stmt>
    <expr_stmt pos:start="87:5" pos:end="87:50"><expr pos:start="87:5" pos:end="87:49"><call pos:start="87:5" pos:end="87:49"><name pos:start="87:5" pos:end="87:22">qemu_co_queue_init</name><argument_list pos:start="87:23" pos:end="87:49">(<argument pos:start="87:24" pos:end="87:48"><expr pos:start="87:24" pos:end="87:48"><operator pos:start="87:24" pos:end="87:24">&amp;</operator><name pos:start="87:25" pos:end="87:48"><operator pos:start="87:25" pos:end="87:25">(</operator><operator pos:start="87:26" pos:end="87:26">*</operator><name pos:start="87:27" pos:end="87:27">m</name><operator pos:start="87:28" pos:end="87:28">)</operator><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:48">dependent_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="88:5" pos:end="88:62"><expr pos:start="88:5" pos:end="88:61"><call pos:start="88:5" pos:end="88:61"><name pos:start="88:5" pos:end="88:21">QLIST_INSERT_HEAD</name><argument_list pos:start="88:22" pos:end="88:61">(<argument pos:start="88:23" pos:end="88:40"><expr pos:start="88:23" pos:end="88:40"><operator pos:start="88:23" pos:end="88:23">&amp;</operator><name pos:start="88:24" pos:end="88:40"><name pos:start="88:24" pos:end="88:24">s</name><operator pos:start="88:25" pos:end="88:26">-&gt;</operator><name pos:start="88:27" pos:end="88:40">cluster_allocs</name></name></expr></argument>, <argument pos:start="88:43" pos:end="88:44"><expr pos:start="88:43" pos:end="88:44"><operator pos:start="88:43" pos:end="88:43">*</operator><name pos:start="88:44" pos:end="88:44">m</name></expr></argument>, <argument pos:start="88:47" pos:end="88:60"><expr pos:start="88:47" pos:end="88:60"><name pos:start="88:47" pos:end="88:60">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="89:5" pos:end="89:79"><expr pos:start="89:5" pos:end="89:78"><operator pos:start="89:5" pos:end="89:5">*</operator><name pos:start="89:6" pos:end="89:16">host_offset</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <name pos:start="89:20" pos:end="89:39">alloc_cluster_offset</name> <operator pos:start="89:41" pos:end="89:41">+</operator> <call pos:start="89:43" pos:end="89:78"><name pos:start="89:43" pos:end="89:61">offset_into_cluster</name><argument_list pos:start="89:62" pos:end="89:78">(<argument pos:start="89:63" pos:end="89:63"><expr pos:start="89:63" pos:end="89:63"><name pos:start="89:63" pos:end="89:63">s</name></expr></argument>, <argument pos:start="89:66" pos:end="89:77"><expr pos:start="89:66" pos:end="89:77"><name pos:start="89:66" pos:end="89:77">guest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="90:5" pos:end="91:65"><expr pos:start="90:5" pos:end="91:64"><operator pos:start="90:5" pos:end="90:5">*</operator><name pos:start="90:6" pos:end="90:10">bytes</name> <operator pos:start="90:12" pos:end="90:12">=</operator> <call pos:start="90:14" pos:end="91:64"><name pos:start="90:14" pos:end="90:16">MIN</name><argument_list pos:start="90:17" pos:end="91:64">(<argument pos:start="90:18" pos:end="90:23"><expr pos:start="90:18" pos:end="90:23"><operator pos:start="90:18" pos:end="90:18">*</operator><name pos:start="90:19" pos:end="90:23">bytes</name></expr></argument>, <argument pos:start="90:26" pos:end="91:63"><expr pos:start="90:26" pos:end="91:63"><operator pos:start="90:26" pos:end="90:26">(</operator><name pos:start="90:27" pos:end="90:36">nb_sectors</name> <operator pos:start="90:38" pos:end="90:38">*</operator> <name pos:start="90:40" pos:end="90:55">BDRV_SECTOR_SIZE</name><operator pos:start="90:56" pos:end="90:56">)</operator>
                         <operator pos:start="91:26" pos:end="91:26">-</operator> <call pos:start="91:28" pos:end="91:63"><name pos:start="91:28" pos:end="91:46">offset_into_cluster</name><argument_list pos:start="91:47" pos:end="91:63">(<argument pos:start="91:48" pos:end="91:48"><expr pos:start="91:48" pos:end="91:48"><name pos:start="91:48" pos:end="91:48">s</name></expr></argument>, <argument pos:start="91:51" pos:end="91:62"><expr pos:start="91:51" pos:end="91:62"><name pos:start="91:51" pos:end="91:62">guest_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:24"><expr pos:start="92:5" pos:end="92:23"><call pos:start="92:5" pos:end="92:23"><name pos:start="92:5" pos:end="92:10">assert</name><argument_list pos:start="92:11" pos:end="92:23">(<argument pos:start="92:12" pos:end="92:22"><expr pos:start="92:12" pos:end="92:22"><operator pos:start="92:12" pos:end="92:12">*</operator><name pos:start="92:13" pos:end="92:17">bytes</name> <operator pos:start="92:19" pos:end="92:20">!=</operator> <literal type="number" pos:start="92:22" pos:end="92:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">1</literal></expr>;</return>
<label pos:start="94:1" pos:end="94:5"><name pos:start="94:1" pos:end="94:4">fail</name>:</label>
    <if_stmt pos:start="95:5" pos:end="97:15"><if pos:start="95:5" pos:end="97:15">if <condition pos:start="95:8" pos:end="95:36">(<expr pos:start="95:9" pos:end="95:35"><operator pos:start="95:9" pos:end="95:9">*</operator><name pos:start="95:10" pos:end="95:10">m</name> <operator pos:start="95:12" pos:end="95:13">&amp;&amp;</operator> <name pos:start="95:15" pos:end="95:31"><operator pos:start="95:15" pos:end="95:15">(</operator><operator pos:start="95:16" pos:end="95:16">*</operator><name pos:start="95:17" pos:end="95:17">m</name><operator pos:start="95:18" pos:end="95:18">)</operator><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:31">nb_clusters</name></name> <operator pos:start="95:33" pos:end="95:33">&gt;</operator> <literal type="number" pos:start="95:35" pos:end="95:35">0</literal></expr>)</condition> <block pos:start="95:38" pos:end="97:15">{<block_content pos:start="96:9" pos:end="97:15">
        <expr_stmt pos:start="96:9" pos:end="96:41"><expr pos:start="96:9" pos:end="96:40"><call pos:start="96:9" pos:end="96:40"><name pos:start="96:9" pos:end="96:20">QLIST_REMOVE</name><argument_list pos:start="96:21" pos:end="96:40">(<argument pos:start="96:22" pos:end="96:23"><expr pos:start="96:22" pos:end="96:23"><operator pos:start="96:22" pos:end="96:22">*</operator><name pos:start="96:23" pos:end="96:23">m</name></expr></argument>, <argument pos:start="96:26" pos:end="96:39"><expr pos:start="96:26" pos:end="96:39"><name pos:start="96:26" pos:end="96:39">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="97:5" pos:end="97:15">return <expr pos:start="97:12" pos:end="97:14"><name pos:start="97:12" pos:end="97:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
