<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12092.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">omap_i2c_init</name><parameter_list pos:start="1:25" pos:end="1:43">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:39"><name pos:start="1:26" pos:end="1:37">SysBusDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">sbd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">DeviceState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">dev</name> <init pos:start="5:22" pos:end="5:34">= <expr pos:start="5:24" pos:end="5:34"><call pos:start="5:24" pos:end="5:34"><name pos:start="5:24" pos:end="5:29">DEVICE</name><argument_list pos:start="5:30" pos:end="5:34">(<argument pos:start="5:31" pos:end="5:33"><expr pos:start="5:31" pos:end="5:33"><name pos:start="5:31" pos:end="5:33">sbd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">OMAPI2CState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:35">= <expr pos:start="7:23" pos:end="7:35"><call pos:start="7:23" pos:end="7:35"><name pos:start="7:23" pos:end="7:30">OMAP_I2C</name><argument_list pos:start="7:31" pos:end="7:35">(<argument pos:start="7:32" pos:end="7:34"><expr pos:start="7:32" pos:end="7:34"><name pos:start="7:32" pos:end="7:34">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:17">(<expr pos:start="11:9" pos:end="11:16"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:16"><name pos:start="11:10" pos:end="11:10">s</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:16">fclk</name></name></expr>)</condition> <block pos:start="11:19" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:51">

        <expr_stmt pos:start="13:9" pos:end="13:51"><expr pos:start="13:9" pos:end="13:50"><call pos:start="13:9" pos:end="13:50"><name pos:start="13:9" pos:end="13:16">hw_error</name><argument_list pos:start="13:17" pos:end="13:50">(<argument pos:start="13:18" pos:end="13:49"><expr pos:start="13:18" pos:end="13:49"><literal type="string" pos:start="13:18" pos:end="13:49">"omap_i2c: fclk not connected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:50">(<expr pos:start="17:9" pos:end="17:49"><name pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:19">revision</name></name> <operator pos:start="17:21" pos:end="17:22">&gt;=</operator> <name pos:start="17:24" pos:end="17:37">OMAP2_INTR_REV</name> <operator pos:start="17:39" pos:end="17:40">&amp;&amp;</operator> <operator pos:start="17:42" pos:end="17:42">!</operator><name pos:start="17:43" pos:end="17:49"><name pos:start="17:43" pos:end="17:43">s</name><operator pos:start="17:44" pos:end="17:45">-&gt;</operator><name pos:start="17:46" pos:end="17:49">iclk</name></name></expr>)</condition> <block pos:start="17:52" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:51">

        <comment type="block" pos:start="19:9" pos:end="19:69">/* Note that OMAP1 doesn't have a separate interface clock */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:51"><expr pos:start="21:9" pos:end="21:50"><call pos:start="21:9" pos:end="21:50"><name pos:start="21:9" pos:end="21:16">hw_error</name><argument_list pos:start="21:17" pos:end="21:50">(<argument pos:start="21:18" pos:end="21:49"><expr pos:start="21:18" pos:end="21:49"><literal type="string" pos:start="21:18" pos:end="21:49">"omap_i2c: iclk not connected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><call pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:19">sysbus_init_irq</name><argument_list pos:start="25:20" pos:end="25:33">(<argument pos:start="25:21" pos:end="25:23"><expr pos:start="25:21" pos:end="25:23"><name pos:start="25:21" pos:end="25:23">sbd</name></expr></argument>, <argument pos:start="25:26" pos:end="25:32"><expr pos:start="25:26" pos:end="25:32"><operator pos:start="25:26" pos:end="25:26">&amp;</operator><name pos:start="25:27" pos:end="25:32"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:32">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><call pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:19">sysbus_init_irq</name><argument_list pos:start="27:20" pos:end="27:36">(<argument pos:start="27:21" pos:end="27:23"><expr pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">sbd</name></expr></argument>, <argument pos:start="27:26" pos:end="27:35"><expr pos:start="27:26" pos:end="27:35"><operator pos:start="27:26" pos:end="27:26">&amp;</operator><name pos:start="27:27" pos:end="27:35"><name pos:start="27:27" pos:end="27:27">s</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:32">drq</name><index pos:start="27:33" pos:end="27:35">[<expr pos:start="27:34" pos:end="27:34"><literal type="number" pos:start="27:34" pos:end="27:34">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><call pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:19">sysbus_init_irq</name><argument_list pos:start="29:20" pos:end="29:36">(<argument pos:start="29:21" pos:end="29:23"><expr pos:start="29:21" pos:end="29:23"><name pos:start="29:21" pos:end="29:23">sbd</name></expr></argument>, <argument pos:start="29:26" pos:end="29:35"><expr pos:start="29:26" pos:end="29:35"><operator pos:start="29:26" pos:end="29:26">&amp;</operator><name pos:start="29:27" pos:end="29:35"><name pos:start="29:27" pos:end="29:27">s</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:32">drq</name><index pos:start="29:33" pos:end="29:35">[<expr pos:start="29:34" pos:end="29:34"><literal type="number" pos:start="29:34" pos:end="29:34">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="33:75"><expr pos:start="31:5" pos:end="33:74"><call pos:start="31:5" pos:end="33:74"><name pos:start="31:5" pos:end="31:25">memory_region_init_io</name><argument_list pos:start="31:26" pos:end="33:74">(<argument pos:start="31:27" pos:end="31:35"><expr pos:start="31:27" pos:end="31:35"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:35"><name pos:start="31:28" pos:end="31:28">s</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:35">iomem</name></name></expr></argument>, <argument pos:start="31:38" pos:end="31:46"><expr pos:start="31:38" pos:end="31:46"><call pos:start="31:38" pos:end="31:46"><name pos:start="31:38" pos:end="31:43">OBJECT</name><argument_list pos:start="31:44" pos:end="31:46">(<argument pos:start="31:45" pos:end="31:45"><expr pos:start="31:45" pos:end="31:45"><name pos:start="31:45" pos:end="31:45">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:49" pos:end="31:61"><expr pos:start="31:49" pos:end="31:61"><operator pos:start="31:49" pos:end="31:49">&amp;</operator><name pos:start="31:50" pos:end="31:61">omap_i2c_ops</name></expr></argument>, <argument pos:start="31:64" pos:end="31:64"><expr pos:start="31:64" pos:end="31:64"><name pos:start="31:64" pos:end="31:64">s</name></expr></argument>, <argument pos:start="31:67" pos:end="31:76"><expr pos:start="31:67" pos:end="31:76"><literal type="string" pos:start="31:67" pos:end="31:76">"omap.i2c"</literal></expr></argument>,

                          <argument pos:start="33:27" pos:end="33:73"><expr pos:start="33:27" pos:end="33:73"><ternary pos:start="33:27" pos:end="33:73"><condition pos:start="33:27" pos:end="33:58"><expr pos:start="33:27" pos:end="33:56"><operator pos:start="33:27" pos:end="33:27">(</operator><name pos:start="33:28" pos:end="33:38"><name pos:start="33:28" pos:end="33:28">s</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:38">revision</name></name> <operator pos:start="33:40" pos:end="33:40">&lt;</operator> <name pos:start="33:42" pos:end="33:55">OMAP2_INTR_REV</name><operator pos:start="33:56" pos:end="33:56">)</operator></expr> ?</condition><then pos:start="33:60" pos:end="33:64"> <expr pos:start="33:60" pos:end="33:64"><literal type="number" pos:start="33:60" pos:end="33:64">0x800</literal></expr> </then><else pos:start="33:66" pos:end="33:73">: <expr pos:start="33:68" pos:end="33:73"><literal type="number" pos:start="33:68" pos:end="33:73">0x1000</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><call pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:20">sysbus_init_mmio</name><argument_list pos:start="35:21" pos:end="35:36">(<argument pos:start="35:22" pos:end="35:24"><expr pos:start="35:22" pos:end="35:24"><name pos:start="35:22" pos:end="35:24">sbd</name></expr></argument>, <argument pos:start="35:27" pos:end="35:35"><expr pos:start="35:27" pos:end="35:35"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:35"><name pos:start="35:28" pos:end="35:28">s</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:35">iomem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:10">bus</name></name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:36"><name pos:start="37:14" pos:end="37:25">i2c_init_bus</name><argument_list pos:start="37:26" pos:end="37:36">(<argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">dev</name></expr></argument>, <argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><name pos:start="37:32" pos:end="37:35">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
