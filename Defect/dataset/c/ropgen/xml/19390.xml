<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19390.c" pos:tabs="8"><function pos:start="1:1" pos:end="439:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:39">gen_intermediate_code_internal_a64</name><parameter_list pos:start="1:40" pos:end="5:55">(<parameter pos:start="1:41" pos:end="1:51"><decl pos:start="1:41" pos:end="1:51"><type pos:start="1:41" pos:end="1:51"><name pos:start="1:41" pos:end="1:46">ARMCPU</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">cpu</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:60"><decl pos:start="3:41" pos:end="3:60"><type pos:start="3:41" pos:end="3:60"><name pos:start="3:41" pos:end="3:56">TranslationBlock</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:60">tb</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:54"><decl pos:start="5:41" pos:end="5:54"><type pos:start="5:41" pos:end="5:54"><name pos:start="5:41" pos:end="5:44">bool</name></type> <name pos:start="5:46" pos:end="5:54">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="439:1">{<block_content pos:start="9:5" pos:end="437:5">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cs</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><call pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:22">CPU</name><argument_list pos:start="9:23" pos:end="9:27">(<argument pos:start="9:24" pos:end="9:26"><expr pos:start="9:24" pos:end="9:26"><name pos:start="9:24" pos:end="9:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUARMState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:32">= <expr pos:start="11:24" pos:end="11:32"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:32"><name pos:start="11:25" pos:end="11:27">cpu</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">DisasContext</name></type> <name pos:start="13:18" pos:end="13:20">dc1</name></decl>, <decl pos:start="13:23" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:25">dc</name> <init pos:start="13:27" pos:end="13:32">= <expr pos:start="13:29" pos:end="13:32"><operator pos:start="13:29" pos:end="13:29">&amp;</operator><name pos:start="13:30" pos:end="13:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">CPUBreakpoint</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">j</name></decl>, <decl pos:start="17:12" pos:end="17:13"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:13">lj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:16">target_ulong</name></type> <name pos:start="19:18" pos:end="19:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:16">target_ulong</name></type> <name pos:start="21:18" pos:end="21:32">next_page_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">max_insns</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:12">pc_start</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:21"><name pos:start="29:16" pos:end="29:17">tb</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:21">pc</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:16"><expr pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:10">tb</name></name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:15">tb</name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:14">is_jmp</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:22"><expr pos:start="39:5" pos:end="39:21"><name pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:6">dc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:10">pc</name></name> <operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:52"><expr pos:start="41:5" pos:end="41:51"><name pos:start="41:5" pos:end="41:26"><name pos:start="41:5" pos:end="41:6">dc</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:26">singlestep_enabled</name></name> <operator pos:start="41:28" pos:end="41:28">=</operator> <name pos:start="41:30" pos:end="41:51"><name pos:start="41:30" pos:end="41:31">cs</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:51">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:20"><expr pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:6">dc</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:15">condjmp</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:6">dc</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:15">aarch64</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <literal type="number" pos:start="47:19" pos:end="47:19">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:45"><expr pos:start="49:5" pos:end="49:44"><name pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:19">el3_is_aa64</name></name> <operator pos:start="49:21" pos:end="49:21">=</operator> <call pos:start="49:23" pos:end="49:44"><name pos:start="49:23" pos:end="49:36">arm_el_is_aa64</name><argument_list pos:start="49:37" pos:end="49:44">(<argument pos:start="49:38" pos:end="49:40"><expr pos:start="49:38" pos:end="49:40"><name pos:start="49:38" pos:end="49:40">env</name></expr></argument>, <argument pos:start="49:43" pos:end="49:43"><expr pos:start="49:43" pos:end="49:43"><literal type="number" pos:start="49:43" pos:end="49:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:18"><expr pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:13"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:13">thumb</name></name> <operator pos:start="51:15" pos:end="51:15">=</operator> <literal type="number" pos:start="51:17" pos:end="51:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:23"><expr pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:18">bswap_code</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:6">dc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:21">condexec_mask</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <literal type="number" pos:start="55:25" pos:end="55:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:21">condexec_cond</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <literal type="number" pos:start="57:25" pos:end="57:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:47"><expr pos:start="59:5" pos:end="59:46"><name pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:6">dc</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:15">mmu_idx</name></name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:46"><name pos:start="59:19" pos:end="59:35">ARM_TBFLAG_MMUIDX</name><argument_list pos:start="59:36" pos:end="59:46">(<argument pos:start="59:37" pos:end="59:45"><expr pos:start="59:37" pos:end="59:45"><name pos:start="59:37" pos:end="59:45"><name pos:start="59:37" pos:end="59:38">tb</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:45">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:51"><name pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:18">current_el</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <call pos:start="61:22" pos:end="61:51"><name pos:start="61:22" pos:end="61:38">arm_mmu_idx_to_el</name><argument_list pos:start="61:39" pos:end="61:51">(<argument pos:start="61:40" pos:end="61:50"><expr pos:start="61:40" pos:end="61:50"><name pos:start="61:40" pos:end="61:50"><name pos:start="61:40" pos:end="61:41">dc</name><operator pos:start="61:42" pos:end="61:43">-&gt;</operator><name pos:start="61:44" pos:end="61:50">mmu_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="63:1" pos:end="63:30">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:30"><operator pos:start="63:5" pos:end="63:5">!</operator><call pos:start="63:6" pos:end="63:30"><name pos:start="63:6" pos:end="63:12">defined</name><argument_list pos:start="63:13" pos:end="63:30">(<argument pos:start="63:14" pos:end="63:29"><expr pos:start="63:14" pos:end="63:29"><name pos:start="63:14" pos:end="63:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="65:5" pos:end="68:0"><expr pos:start="65:5" pos:end="65:36"><name pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:6">dc</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:12">user</name></name> <operator pos:start="65:14" pos:end="65:14">=</operator> <operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:30"><name pos:start="65:17" pos:end="65:18">dc</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:30">current_el</name></name> <operator pos:start="65:32" pos:end="65:33">==</operator> <literal type="number" pos:start="65:35" pos:end="65:35">0</literal><operator pos:start="65:36" pos:end="65:36">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="69:5" pos:end="69:53"><expr pos:start="69:5" pos:end="69:52"><name pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:6">dc</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:18">cpacr_fpen</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:52"><name pos:start="69:22" pos:end="69:41">ARM_TBFLAG_AA64_FPEN</name><argument_list pos:start="69:42" pos:end="69:52">(<argument pos:start="69:43" pos:end="69:51"><expr pos:start="69:43" pos:end="69:51"><name pos:start="69:43" pos:end="69:51"><name pos:start="69:43" pos:end="69:44">tb</name><operator pos:start="69:45" pos:end="69:46">-&gt;</operator><name pos:start="69:47" pos:end="69:51">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:20"><expr pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:6">dc</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:15">vec_len</name></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <literal type="number" pos:start="71:19" pos:end="71:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:23"><expr pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:6">dc</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:18">vec_stride</name></name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:6">dc</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:15">cp_regs</name></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:30"><name pos:start="75:19" pos:end="75:21">cpu</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:30">cp_regs</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:33"><expr pos:start="77:5" pos:end="77:32"><name pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:6">dc</name><operator pos:start="77:7" pos:end="77:8">-&gt;</operator><name pos:start="77:9" pos:end="77:16">features</name></name> <operator pos:start="77:18" pos:end="77:18">=</operator> <name pos:start="77:20" pos:end="77:32"><name pos:start="77:20" pos:end="77:22">env</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:32">features</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="109:7">/* Single step state. The code-generation logic here is:

     *  SS_ACTIVE == 0:

     *   generate code with no special handling for single-stepping (except

     *   that anything that can make us go to SS_ACTIVE == 1 must end the TB;

     *   this happens anyway because those changes are all system register or

     *   PSTATE writes).

     *  SS_ACTIVE == 1, PSTATE.SS == 1: (active-not-pending)

     *   emit code for one insn

     *   emit code to clear PSTATE.SS

     *   emit code to generate software step exception for completed step

     *   end TB (as usual for having generated an exception)

     *  SS_ACTIVE == 1, PSTATE.SS == 0: (active-pending)

     *   emit code to generate a software step exception

     *   end the TB

     */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:52"><expr pos:start="111:5" pos:end="111:51"><name pos:start="111:5" pos:end="111:17"><name pos:start="111:5" pos:end="111:6">dc</name><operator pos:start="111:7" pos:end="111:8">-&gt;</operator><name pos:start="111:9" pos:end="111:17">ss_active</name></name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="111:51"><name pos:start="111:21" pos:end="111:40">ARM_TBFLAG_SS_ACTIVE</name><argument_list pos:start="111:41" pos:end="111:51">(<argument pos:start="111:42" pos:end="111:50"><expr pos:start="111:42" pos:end="111:50"><name pos:start="111:42" pos:end="111:50"><name pos:start="111:42" pos:end="111:43">tb</name><operator pos:start="111:44" pos:end="111:45">-&gt;</operator><name pos:start="111:46" pos:end="111:50">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:52"><expr pos:start="113:5" pos:end="113:51"><name pos:start="113:5" pos:end="113:17"><name pos:start="113:5" pos:end="113:6">dc</name><operator pos:start="113:7" pos:end="113:8">-&gt;</operator><name pos:start="113:9" pos:end="113:17">pstate_ss</name></name> <operator pos:start="113:19" pos:end="113:19">=</operator> <call pos:start="113:21" pos:end="113:51"><name pos:start="113:21" pos:end="113:40">ARM_TBFLAG_PSTATE_SS</name><argument_list pos:start="113:41" pos:end="113:51">(<argument pos:start="113:42" pos:end="113:50"><expr pos:start="113:42" pos:end="113:50"><name pos:start="113:42" pos:end="113:50"><name pos:start="113:42" pos:end="113:43">tb</name><operator pos:start="113:44" pos:end="113:45">-&gt;</operator><name pos:start="113:46" pos:end="113:50">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:24"><expr pos:start="115:5" pos:end="115:23"><name pos:start="115:5" pos:end="115:15"><name pos:start="115:5" pos:end="115:6">dc</name><operator pos:start="115:7" pos:end="115:8">-&gt;</operator><name pos:start="115:9" pos:end="115:15">is_ldex</name></name> <operator pos:start="115:17" pos:end="115:17">=</operator> <name pos:start="115:19" pos:end="115:23">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:66"><expr pos:start="117:5" pos:end="117:65"><name pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:6">dc</name><operator pos:start="117:7" pos:end="117:8">-&gt;</operator><name pos:start="117:9" pos:end="117:18">ss_same_el</name></name> <operator pos:start="117:20" pos:end="117:20">=</operator> <operator pos:start="117:22" pos:end="117:22">(</operator><call pos:start="117:23" pos:end="117:46"><name pos:start="117:23" pos:end="117:41">arm_debug_target_el</name><argument_list pos:start="117:42" pos:end="117:46">(<argument pos:start="117:43" pos:end="117:45"><expr pos:start="117:43" pos:end="117:45"><name pos:start="117:43" pos:end="117:45">env</name></expr></argument>)</argument_list></call> <operator pos:start="117:48" pos:end="117:49">==</operator> <name pos:start="117:51" pos:end="117:64"><name pos:start="117:51" pos:end="117:52">dc</name><operator pos:start="117:53" pos:end="117:54">-&gt;</operator><name pos:start="117:55" pos:end="117:64">current_el</name></name><operator pos:start="117:65" pos:end="117:65">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:27"><expr pos:start="121:5" pos:end="121:26"><call pos:start="121:5" pos:end="121:26"><name pos:start="121:5" pos:end="121:22">init_tmp_a64_array</name><argument_list pos:start="121:23" pos:end="121:26">(<argument pos:start="121:24" pos:end="121:25"><expr pos:start="121:24" pos:end="121:25"><name pos:start="121:24" pos:end="121:25">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:71"><expr pos:start="125:5" pos:end="125:70"><name pos:start="125:5" pos:end="125:19">next_page_start</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <operator pos:start="125:23" pos:end="125:23">(</operator><name pos:start="125:24" pos:end="125:31">pc_start</name> <operator pos:start="125:33" pos:end="125:33">&amp;</operator> <name pos:start="125:35" pos:end="125:50">TARGET_PAGE_MASK</name><operator pos:start="125:51" pos:end="125:51">)</operator> <operator pos:start="125:53" pos:end="125:53">+</operator> <name pos:start="125:55" pos:end="125:70">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:12"><expr pos:start="127:5" pos:end="127:11"><name pos:start="127:5" pos:end="127:6">lj</name> <operator pos:start="127:8" pos:end="127:8">=</operator> <operator pos:start="127:10" pos:end="127:10">-</operator><literal type="number" pos:start="127:11" pos:end="127:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:18"><expr pos:start="129:5" pos:end="129:17"><name pos:start="129:5" pos:end="129:13">num_insns</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <literal type="number" pos:start="129:17" pos:end="129:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:43"><expr pos:start="131:5" pos:end="131:42"><name pos:start="131:5" pos:end="131:13">max_insns</name> <operator pos:start="131:15" pos:end="131:15">=</operator> <name pos:start="131:17" pos:end="131:26"><name pos:start="131:17" pos:end="131:18">tb</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:26">cflags</name></name> <operator pos:start="131:28" pos:end="131:28">&amp;</operator> <name pos:start="131:30" pos:end="131:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="137:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:23">(<expr pos:start="133:9" pos:end="133:22"><name pos:start="133:9" pos:end="133:17">max_insns</name> <operator pos:start="133:19" pos:end="133:20">==</operator> <literal type="number" pos:start="133:22" pos:end="133:22">0</literal></expr>)</condition> <block pos:start="133:25" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:34">

        <expr_stmt pos:start="135:9" pos:end="135:34"><expr pos:start="135:9" pos:end="135:33"><name pos:start="135:9" pos:end="135:17">max_insns</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <name pos:start="135:21" pos:end="135:33">CF_COUNT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:21"><expr pos:start="141:5" pos:end="141:20"><call pos:start="141:5" pos:end="141:20"><name pos:start="141:5" pos:end="141:16">gen_tb_start</name><argument_list pos:start="141:17" pos:end="141:20">(<argument pos:start="141:18" pos:end="141:19"><expr pos:start="141:18" pos:end="141:19"><name pos:start="141:18" pos:end="141:19">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:27"><expr pos:start="145:5" pos:end="145:26"><call pos:start="145:5" pos:end="145:26"><name pos:start="145:5" pos:end="145:24">tcg_clear_temp_count</name><argument_list pos:start="145:25" pos:end="145:26">()</argument_list></call></expr>;</expr_stmt>



    <do pos:start="149:5" pos:end="289:36">do <block pos:start="149:8" pos:end="279:5">{<block_content pos:start="151:9" pos:end="277:20">

        <if_stmt pos:start="151:9" pos:end="171:9"><if pos:start="151:9" pos:end="171:9">if <condition pos:start="151:12" pos:end="151:54">(<expr pos:start="151:13" pos:end="151:53"><call pos:start="151:13" pos:end="151:53"><name pos:start="151:13" pos:end="151:20">unlikely</name><argument_list pos:start="151:21" pos:end="151:53">(<argument pos:start="151:22" pos:end="151:52"><expr pos:start="151:22" pos:end="151:52"><operator pos:start="151:22" pos:end="151:22">!</operator><call pos:start="151:23" pos:end="151:52"><name pos:start="151:23" pos:end="151:34">QTAILQ_EMPTY</name><argument_list pos:start="151:35" pos:end="151:52">(<argument pos:start="151:36" pos:end="151:51"><expr pos:start="151:36" pos:end="151:51"><operator pos:start="151:36" pos:end="151:36">&amp;</operator><name pos:start="151:37" pos:end="151:51"><name pos:start="151:37" pos:end="151:38">cs</name><operator pos:start="151:39" pos:end="151:40">-&gt;</operator><name pos:start="151:41" pos:end="151:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:56" pos:end="171:9">{<block_content pos:start="153:13" pos:end="169:13">

            <macro pos:start="153:13" pos:end="153:55"><name pos:start="153:13" pos:end="153:26">QTAILQ_FOREACH</name><argument_list pos:start="153:27" pos:end="153:55">(<argument pos:start="153:28" pos:end="153:29">bp</argument>, <argument pos:start="153:32" pos:end="153:47">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="153:50" pos:end="153:54">entry</argument>)</argument_list></macro> <block pos:start="153:57" pos:end="169:13">{<block_content pos:start="155:17" pos:end="167:17">

                <if_stmt pos:start="155:17" pos:end="167:17"><if pos:start="155:17" pos:end="167:17">if <condition pos:start="155:20" pos:end="155:37">(<expr pos:start="155:21" pos:end="155:36"><name pos:start="155:21" pos:end="155:26"><name pos:start="155:21" pos:end="155:22">bp</name><operator pos:start="155:23" pos:end="155:24">-&gt;</operator><name pos:start="155:25" pos:end="155:26">pc</name></name> <operator pos:start="155:28" pos:end="155:29">==</operator> <name pos:start="155:31" pos:end="155:36"><name pos:start="155:31" pos:end="155:32">dc</name><operator pos:start="155:33" pos:end="155:34">-&gt;</operator><name pos:start="155:35" pos:end="155:36">pc</name></name></expr>)</condition> <block pos:start="155:39" pos:end="167:17">{<block_content pos:start="157:21" pos:end="165:41">

                    <expr_stmt pos:start="157:21" pos:end="157:67"><expr pos:start="157:21" pos:end="157:66"><call pos:start="157:21" pos:end="157:66"><name pos:start="157:21" pos:end="157:47">gen_exception_internal_insn</name><argument_list pos:start="157:48" pos:end="157:66">(<argument pos:start="157:49" pos:end="157:50"><expr pos:start="157:49" pos:end="157:50"><name pos:start="157:49" pos:end="157:50">dc</name></expr></argument>, <argument pos:start="157:53" pos:end="157:53"><expr pos:start="157:53" pos:end="157:53"><literal type="number" pos:start="157:53" pos:end="157:53">0</literal></expr></argument>, <argument pos:start="157:56" pos:end="157:65"><expr pos:start="157:56" pos:end="157:65"><name pos:start="157:56" pos:end="157:65">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="159:21" pos:end="161:46">/* Advance PC so that clearing the breakpoint will

                       invalidate this TB.  */</comment>

                    <expr_stmt pos:start="163:21" pos:end="163:32"><expr pos:start="163:21" pos:end="163:31"><name pos:start="163:21" pos:end="163:26"><name pos:start="163:21" pos:end="163:22">dc</name><operator pos:start="163:23" pos:end="163:24">-&gt;</operator><name pos:start="163:25" pos:end="163:26">pc</name></name> <operator pos:start="163:28" pos:end="163:29">+=</operator> <literal type="number" pos:start="163:31" pos:end="163:31">2</literal></expr>;</expr_stmt>

                    <goto pos:start="165:21" pos:end="165:41">goto <name pos:start="165:26" pos:end="165:40">done_generating</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="175:9" pos:end="197:9"><if pos:start="175:9" pos:end="197:9">if <condition pos:start="175:12" pos:end="175:22">(<expr pos:start="175:13" pos:end="175:21"><name pos:start="175:13" pos:end="175:21">search_pc</name></expr>)</condition> <block pos:start="175:24" pos:end="197:9">{<block_content pos:start="177:13" pos:end="195:51">

            <expr_stmt pos:start="177:13" pos:end="177:35"><expr pos:start="177:13" pos:end="177:34"><name pos:start="177:13" pos:end="177:13">j</name> <operator pos:start="177:15" pos:end="177:15">=</operator> <call pos:start="177:17" pos:end="177:34"><name pos:start="177:17" pos:end="177:32">tcg_op_buf_count</name><argument_list pos:start="177:33" pos:end="177:34">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="189:13"><if pos:start="179:13" pos:end="189:13">if <condition pos:start="179:16" pos:end="179:23">(<expr pos:start="179:17" pos:end="179:22"><name pos:start="179:17" pos:end="179:18">lj</name> <operator pos:start="179:20" pos:end="179:20">&lt;</operator> <name pos:start="179:22" pos:end="179:22">j</name></expr>)</condition> <block pos:start="179:25" pos:end="189:13">{<block_content pos:start="181:17" pos:end="187:17">

                <expr_stmt pos:start="181:17" pos:end="181:21"><expr pos:start="181:17" pos:end="181:20"><name pos:start="181:17" pos:end="181:18">lj</name><operator pos:start="181:19" pos:end="181:20">++</operator></expr>;</expr_stmt>

                <while pos:start="183:17" pos:end="187:17">while <condition pos:start="183:23" pos:end="183:30">(<expr pos:start="183:24" pos:end="183:29"><name pos:start="183:24" pos:end="183:25">lj</name> <operator pos:start="183:27" pos:end="183:27">&lt;</operator> <name pos:start="183:29" pos:end="183:29">j</name></expr>)</condition> <block pos:start="183:32" pos:end="187:17">{<block_content pos:start="185:21" pos:end="185:58">

                    <expr_stmt pos:start="185:21" pos:end="185:58"><expr pos:start="185:21" pos:end="185:57"><name pos:start="185:21" pos:end="185:53"><name pos:start="185:21" pos:end="185:27">tcg_ctx</name><operator pos:start="185:28" pos:end="185:28">.</operator><name pos:start="185:29" pos:end="185:47">gen_opc_instr_start</name><index pos:start="185:48" pos:end="185:53">[<expr pos:start="185:49" pos:end="185:52"><name pos:start="185:49" pos:end="185:50">lj</name><operator pos:start="185:51" pos:end="185:52">++</operator></expr>]</index></name> <operator pos:start="185:55" pos:end="185:55">=</operator> <literal type="number" pos:start="185:57" pos:end="185:57">0</literal></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:44"><expr pos:start="191:13" pos:end="191:43"><name pos:start="191:13" pos:end="191:34"><name pos:start="191:13" pos:end="191:19">tcg_ctx</name><operator pos:start="191:20" pos:end="191:20">.</operator><name pos:start="191:21" pos:end="191:30">gen_opc_pc</name><index pos:start="191:31" pos:end="191:34">[<expr pos:start="191:32" pos:end="191:33"><name pos:start="191:32" pos:end="191:33">lj</name></expr>]</index></name> <operator pos:start="191:36" pos:end="191:36">=</operator> <name pos:start="191:38" pos:end="191:43"><name pos:start="191:38" pos:end="191:39">dc</name><operator pos:start="191:40" pos:end="191:41">-&gt;</operator><name pos:start="191:42" pos:end="191:43">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:48"><expr pos:start="193:13" pos:end="193:47"><name pos:start="193:13" pos:end="193:43"><name pos:start="193:13" pos:end="193:19">tcg_ctx</name><operator pos:start="193:20" pos:end="193:20">.</operator><name pos:start="193:21" pos:end="193:39">gen_opc_instr_start</name><index pos:start="193:40" pos:end="193:43">[<expr pos:start="193:41" pos:end="193:42"><name pos:start="193:41" pos:end="193:42">lj</name></expr>]</index></name> <operator pos:start="193:45" pos:end="193:45">=</operator> <literal type="number" pos:start="193:47" pos:end="193:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:51"><expr pos:start="195:13" pos:end="195:50"><name pos:start="195:13" pos:end="195:38"><name pos:start="195:13" pos:end="195:19">tcg_ctx</name><operator pos:start="195:20" pos:end="195:20">.</operator><name pos:start="195:21" pos:end="195:34">gen_opc_icount</name><index pos:start="195:35" pos:end="195:38">[<expr pos:start="195:36" pos:end="195:37"><name pos:start="195:36" pos:end="195:37">lj</name></expr>]</index></name> <operator pos:start="195:40" pos:end="195:40">=</operator> <name pos:start="195:42" pos:end="195:50">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="201:9" pos:end="205:9"><if pos:start="201:9" pos:end="205:9">if <condition pos:start="201:12" pos:end="201:68">(<expr pos:start="201:13" pos:end="201:67"><name pos:start="201:13" pos:end="201:21">num_insns</name> <operator pos:start="201:23" pos:end="201:23">+</operator> <literal type="number" pos:start="201:25" pos:end="201:25">1</literal> <operator pos:start="201:27" pos:end="201:28">==</operator> <name pos:start="201:30" pos:end="201:38">max_insns</name> <operator pos:start="201:40" pos:end="201:41">&amp;&amp;</operator> <operator pos:start="201:43" pos:end="201:43">(</operator><name pos:start="201:44" pos:end="201:53"><name pos:start="201:44" pos:end="201:45">tb</name><operator pos:start="201:46" pos:end="201:47">-&gt;</operator><name pos:start="201:48" pos:end="201:53">cflags</name></name> <operator pos:start="201:55" pos:end="201:55">&amp;</operator> <name pos:start="201:57" pos:end="201:66">CF_LAST_IO</name><operator pos:start="201:67" pos:end="201:67">)</operator></expr>)</condition> <block pos:start="201:70" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:27">

            <expr_stmt pos:start="203:13" pos:end="203:27"><expr pos:start="203:13" pos:end="203:26"><call pos:start="203:13" pos:end="203:26"><name pos:start="203:13" pos:end="203:24">gen_io_start</name><argument_list pos:start="203:25" pos:end="203:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="209:9" pos:end="213:9"><if pos:start="209:9" pos:end="213:9">if <condition pos:start="209:12" pos:end="209:76">(<expr pos:start="209:13" pos:end="209:75"><call pos:start="209:13" pos:end="209:75"><name pos:start="209:13" pos:end="209:20">unlikely</name><argument_list pos:start="209:21" pos:end="209:75">(<argument pos:start="209:22" pos:end="209:74"><expr pos:start="209:22" pos:end="209:74"><call pos:start="209:22" pos:end="209:74"><name pos:start="209:22" pos:end="209:39">qemu_loglevel_mask</name><argument_list pos:start="209:40" pos:end="209:74">(<argument pos:start="209:41" pos:end="209:73"><expr pos:start="209:41" pos:end="209:73"><name pos:start="209:41" pos:end="209:53">CPU_LOG_TB_OP</name> <operator pos:start="209:55" pos:end="209:55">|</operator> <name pos:start="209:57" pos:end="209:73">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="209:78" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:45">

            <expr_stmt pos:start="211:13" pos:end="211:45"><expr pos:start="211:13" pos:end="211:44"><call pos:start="211:13" pos:end="211:44"><name pos:start="211:13" pos:end="211:36">tcg_gen_debug_insn_start</name><argument_list pos:start="211:37" pos:end="211:44">(<argument pos:start="211:38" pos:end="211:43"><expr pos:start="211:38" pos:end="211:43"><name pos:start="211:38" pos:end="211:43"><name pos:start="211:38" pos:end="211:39">dc</name><operator pos:start="211:40" pos:end="211:41">-&gt;</operator><name pos:start="211:42" pos:end="211:43">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="217:9" pos:end="249:9"><if pos:start="217:9" pos:end="249:9">if <condition pos:start="217:12" pos:end="217:44">(<expr pos:start="217:13" pos:end="217:43"><name pos:start="217:13" pos:end="217:25"><name pos:start="217:13" pos:end="217:14">dc</name><operator pos:start="217:15" pos:end="217:16">-&gt;</operator><name pos:start="217:17" pos:end="217:25">ss_active</name></name> <operator pos:start="217:27" pos:end="217:28">&amp;&amp;</operator> <operator pos:start="217:30" pos:end="217:30">!</operator><name pos:start="217:31" pos:end="217:43"><name pos:start="217:31" pos:end="217:32">dc</name><operator pos:start="217:33" pos:end="217:34">-&gt;</operator><name pos:start="217:35" pos:end="217:43">pstate_ss</name></name></expr>)</condition> <block pos:start="217:46" pos:end="249:9">{<block_content pos:start="239:13" pos:end="247:18">

            <comment type="block" pos:start="219:13" pos:end="237:15">/* Singlestep state is Active-pending.

             * If we're in this state at the start of a TB then either

             *  a) we just took an exception to an EL which is being debugged

             *     and this is the first insn in the exception handler

             *  b) debug exceptions were masked and we just unmasked them

             *     without changing EL (eg by clearing PSTATE.D)

             * In either case we're going to take a swstep exception in the

             * "did not step an insn" case, and so the syndrome ISV and EX

             * bits should be zero.

             */</comment>

            <expr_stmt pos:start="239:13" pos:end="239:35"><expr pos:start="239:13" pos:end="239:34"><call pos:start="239:13" pos:end="239:34"><name pos:start="239:13" pos:end="239:18">assert</name><argument_list pos:start="239:19" pos:end="239:34">(<argument pos:start="239:20" pos:end="239:33"><expr pos:start="239:20" pos:end="239:33"><name pos:start="239:20" pos:end="239:28">num_insns</name> <operator pos:start="239:30" pos:end="239:31">==</operator> <literal type="number" pos:start="239:33" pos:end="239:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="243:52"><expr pos:start="241:13" pos:end="243:51"><call pos:start="241:13" pos:end="243:51"><name pos:start="241:13" pos:end="241:25">gen_exception</name><argument_list pos:start="241:26" pos:end="243:51">(<argument pos:start="241:27" pos:end="241:35"><expr pos:start="241:27" pos:end="241:35"><name pos:start="241:27" pos:end="241:35">EXCP_UDEF</name></expr></argument>, <argument pos:start="241:38" pos:end="241:69"><expr pos:start="241:38" pos:end="241:69"><call pos:start="241:38" pos:end="241:69"><name pos:start="241:38" pos:end="241:47">syn_swstep</name><argument_list pos:start="241:48" pos:end="241:69">(<argument pos:start="241:49" pos:end="241:62"><expr pos:start="241:49" pos:end="241:62"><name pos:start="241:49" pos:end="241:62"><name pos:start="241:49" pos:end="241:50">dc</name><operator pos:start="241:51" pos:end="241:52">-&gt;</operator><name pos:start="241:53" pos:end="241:62">ss_same_el</name></name></expr></argument>, <argument pos:start="241:65" pos:end="241:65"><expr pos:start="241:65" pos:end="241:65"><literal type="number" pos:start="241:65" pos:end="241:65">0</literal></expr></argument>, <argument pos:start="241:68" pos:end="241:68"><expr pos:start="241:68" pos:end="241:68"><literal type="number" pos:start="241:68" pos:end="241:68">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="243:27" pos:end="243:50"><expr pos:start="243:27" pos:end="243:50"><call pos:start="243:27" pos:end="243:50"><name pos:start="243:27" pos:end="243:46">default_exception_el</name><argument_list pos:start="243:47" pos:end="243:50">(<argument pos:start="243:48" pos:end="243:49"><expr pos:start="243:48" pos:end="243:49"><name pos:start="243:48" pos:end="243:49">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:35"><expr pos:start="245:13" pos:end="245:34"><name pos:start="245:13" pos:end="245:22"><name pos:start="245:13" pos:end="245:14">dc</name><operator pos:start="245:15" pos:end="245:16">-&gt;</operator><name pos:start="245:17" pos:end="245:22">is_jmp</name></name> <operator pos:start="245:24" pos:end="245:24">=</operator> <name pos:start="245:26" pos:end="245:34">DISAS_EXC</name></expr>;</expr_stmt>

            <break pos:start="247:13" pos:end="247:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="253:9" pos:end="253:32"><expr pos:start="253:9" pos:end="253:31"><call pos:start="253:9" pos:end="253:31"><name pos:start="253:9" pos:end="253:22">disas_a64_insn</name><argument_list pos:start="253:23" pos:end="253:31">(<argument pos:start="253:24" pos:end="253:26"><expr pos:start="253:24" pos:end="253:26"><name pos:start="253:24" pos:end="253:26">env</name></expr></argument>, <argument pos:start="253:29" pos:end="253:30"><expr pos:start="253:29" pos:end="253:30"><name pos:start="253:29" pos:end="253:30">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="257:9" pos:end="263:9"><if pos:start="257:9" pos:end="263:9">if <condition pos:start="257:12" pos:end="257:35">(<expr pos:start="257:13" pos:end="257:34"><call pos:start="257:13" pos:end="257:34"><name pos:start="257:13" pos:end="257:32">tcg_check_temp_count</name><argument_list pos:start="257:33" pos:end="257:34">()</argument_list></call></expr>)</condition> <block pos:start="257:37" pos:end="263:9">{<block_content pos:start="259:13" pos:end="261:28">

            <expr_stmt pos:start="259:13" pos:end="261:28"><expr pos:start="259:13" pos:end="261:27"><call pos:start="259:13" pos:end="261:27"><name pos:start="259:13" pos:end="259:19">fprintf</name><argument_list pos:start="259:20" pos:end="261:27">(<argument pos:start="259:21" pos:end="259:26"><expr pos:start="259:21" pos:end="259:26"><name pos:start="259:21" pos:end="259:26">stderr</name></expr></argument>, <argument pos:start="259:29" pos:end="259:73"><expr pos:start="259:29" pos:end="259:73"><literal type="string" pos:start="259:29" pos:end="259:56">"TCG temporary leak before "</literal><name pos:start="259:57" pos:end="259:69">TARGET_FMT_lx</name><literal type="string" pos:start="259:70" pos:end="259:73">"\n"</literal></expr></argument>,

                    <argument pos:start="261:21" pos:end="261:26"><expr pos:start="261:21" pos:end="261:26"><name pos:start="261:21" pos:end="261:26"><name pos:start="261:21" pos:end="261:22">dc</name><operator pos:start="261:23" pos:end="261:24">-&gt;</operator><name pos:start="261:25" pos:end="261:26">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="267:9" pos:end="275:11">/* Translation stops when a conditional branch is encountered.

         * Otherwise the subsequent code could get translated several times.

         * Also stop translation when a page boundary is reached.  This

         * ensures prefetch aborts occur at the right place.

         */</comment>

        <expr_stmt pos:start="277:9" pos:end="277:20"><expr pos:start="277:9" pos:end="277:19"><name pos:start="277:9" pos:end="277:17">num_insns</name><operator pos:start="277:18" pos:end="277:19">++</operator></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="279:13" pos:end="289:35">(<expr pos:start="279:14" pos:end="289:34"><operator pos:start="279:14" pos:end="279:14">!</operator><name pos:start="279:15" pos:end="279:24"><name pos:start="279:15" pos:end="279:16">dc</name><operator pos:start="279:17" pos:end="279:18">-&gt;</operator><name pos:start="279:19" pos:end="279:24">is_jmp</name></name> <operator pos:start="279:26" pos:end="279:27">&amp;&amp;</operator> <operator pos:start="279:29" pos:end="279:29">!</operator><call pos:start="279:30" pos:end="279:46"><name pos:start="279:30" pos:end="279:44">tcg_op_buf_full</name><argument_list pos:start="279:45" pos:end="279:46">()</argument_list></call> <operator pos:start="279:48" pos:end="279:49">&amp;&amp;</operator>

             <operator pos:start="281:14" pos:end="281:14">!</operator><name pos:start="281:15" pos:end="281:36"><name pos:start="281:15" pos:end="281:16">cs</name><operator pos:start="281:17" pos:end="281:18">-&gt;</operator><name pos:start="281:19" pos:end="281:36">singlestep_enabled</name></name> <operator pos:start="281:38" pos:end="281:39">&amp;&amp;</operator>

             <operator pos:start="283:14" pos:end="283:14">!</operator><name pos:start="283:15" pos:end="283:24">singlestep</name> <operator pos:start="283:26" pos:end="283:27">&amp;&amp;</operator>

             <operator pos:start="285:14" pos:end="285:14">!</operator><name pos:start="285:15" pos:end="285:27"><name pos:start="285:15" pos:end="285:16">dc</name><operator pos:start="285:17" pos:end="285:18">-&gt;</operator><name pos:start="285:19" pos:end="285:27">ss_active</name></name> <operator pos:start="285:29" pos:end="285:30">&amp;&amp;</operator>

             <name pos:start="287:14" pos:end="287:19"><name pos:start="287:14" pos:end="287:15">dc</name><operator pos:start="287:16" pos:end="287:17">-&gt;</operator><name pos:start="287:18" pos:end="287:19">pc</name></name> <operator pos:start="287:21" pos:end="287:21">&lt;</operator> <name pos:start="287:23" pos:end="287:37">next_page_start</name> <operator pos:start="287:39" pos:end="287:40">&amp;&amp;</operator>

             <name pos:start="289:14" pos:end="289:22">num_insns</name> <operator pos:start="289:24" pos:end="289:24">&lt;</operator> <name pos:start="289:26" pos:end="289:34">max_insns</name></expr>)</condition>;</do>



    <if_stmt pos:start="293:5" pos:end="297:5"><if pos:start="293:5" pos:end="297:5">if <condition pos:start="293:8" pos:end="293:32">(<expr pos:start="293:9" pos:end="293:31"><name pos:start="293:9" pos:end="293:18"><name pos:start="293:9" pos:end="293:10">tb</name><operator pos:start="293:11" pos:end="293:12">-&gt;</operator><name pos:start="293:13" pos:end="293:18">cflags</name></name> <operator pos:start="293:20" pos:end="293:20">&amp;</operator> <name pos:start="293:22" pos:end="293:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="293:34" pos:end="297:5">{<block_content pos:start="295:9" pos:end="295:21">

        <expr_stmt pos:start="295:9" pos:end="295:21"><expr pos:start="295:9" pos:end="295:20"><call pos:start="295:9" pos:end="295:20"><name pos:start="295:9" pos:end="295:18">gen_io_end</name><argument_list pos:start="295:19" pos:end="295:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="301:5" pos:end="391:5"><if pos:start="301:5" pos:end="333:5">if <condition pos:start="301:8" pos:end="303:35">(<expr pos:start="301:9" pos:end="303:34"><call pos:start="301:9" pos:end="301:57"><name pos:start="301:9" pos:end="301:16">unlikely</name><argument_list pos:start="301:17" pos:end="301:57">(<argument pos:start="301:18" pos:end="301:56"><expr pos:start="301:18" pos:end="301:56"><name pos:start="301:18" pos:end="301:39"><name pos:start="301:18" pos:end="301:19">cs</name><operator pos:start="301:20" pos:end="301:21">-&gt;</operator><name pos:start="301:22" pos:end="301:39">singlestep_enabled</name></name> <operator pos:start="301:41" pos:end="301:42">||</operator> <name pos:start="301:44" pos:end="301:56"><name pos:start="301:44" pos:end="301:45">dc</name><operator pos:start="301:46" pos:end="301:47">-&gt;</operator><name pos:start="301:48" pos:end="301:56">ss_active</name></name></expr></argument>)</argument_list></call>

        <operator pos:start="303:9" pos:end="303:10">&amp;&amp;</operator> <name pos:start="303:12" pos:end="303:21"><name pos:start="303:12" pos:end="303:13">dc</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:21">is_jmp</name></name> <operator pos:start="303:23" pos:end="303:24">!=</operator> <name pos:start="303:26" pos:end="303:34">DISAS_EXC</name></expr>)</condition> <block pos:start="303:37" pos:end="333:5">{<block_content pos:start="315:9" pos:end="331:9">

        <comment type="block" pos:start="305:9" pos:end="313:11">/* Note that this means single stepping WFI doesn't halt the CPU.

         * For conditional branch insns this is harmless unreachable code as

         * gen_goto_tb() has already handled emitting the debug exception

         * (and thus a tb-jump is not possible when singlestepping).

         */</comment>

        <expr_stmt pos:start="315:9" pos:end="315:44"><expr pos:start="315:9" pos:end="315:43"><call pos:start="315:9" pos:end="315:43"><name pos:start="315:9" pos:end="315:14">assert</name><argument_list pos:start="315:15" pos:end="315:43">(<argument pos:start="315:16" pos:end="315:42"><expr pos:start="315:16" pos:end="315:42"><name pos:start="315:16" pos:end="315:25"><name pos:start="315:16" pos:end="315:17">dc</name><operator pos:start="315:18" pos:end="315:19">-&gt;</operator><name pos:start="315:20" pos:end="315:25">is_jmp</name></name> <operator pos:start="315:27" pos:end="315:28">!=</operator> <name pos:start="315:30" pos:end="315:42">DISAS_TB_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="317:9" pos:end="321:9"><if pos:start="317:9" pos:end="321:9">if <condition pos:start="317:12" pos:end="317:37">(<expr pos:start="317:13" pos:end="317:36"><name pos:start="317:13" pos:end="317:22"><name pos:start="317:13" pos:end="317:14">dc</name><operator pos:start="317:15" pos:end="317:16">-&gt;</operator><name pos:start="317:17" pos:end="317:22">is_jmp</name></name> <operator pos:start="317:24" pos:end="317:25">!=</operator> <name pos:start="317:27" pos:end="317:36">DISAS_JUMP</name></expr>)</condition> <block pos:start="317:39" pos:end="321:9">{<block_content pos:start="319:13" pos:end="319:38">

            <expr_stmt pos:start="319:13" pos:end="319:38"><expr pos:start="319:13" pos:end="319:37"><call pos:start="319:13" pos:end="319:37"><name pos:start="319:13" pos:end="319:29">gen_a64_set_pc_im</name><argument_list pos:start="319:30" pos:end="319:37">(<argument pos:start="319:31" pos:end="319:36"><expr pos:start="319:31" pos:end="319:36"><name pos:start="319:31" pos:end="319:36"><name pos:start="319:31" pos:end="319:32">dc</name><operator pos:start="319:33" pos:end="319:34">-&gt;</operator><name pos:start="319:35" pos:end="319:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="323:9" pos:end="331:9"><if pos:start="323:9" pos:end="327:9">if <condition pos:start="323:12" pos:end="323:35">(<expr pos:start="323:13" pos:end="323:34"><name pos:start="323:13" pos:end="323:34"><name pos:start="323:13" pos:end="323:14">cs</name><operator pos:start="323:15" pos:end="323:16">-&gt;</operator><name pos:start="323:17" pos:end="323:34">singlestep_enabled</name></name></expr>)</condition> <block pos:start="323:37" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:47">

            <expr_stmt pos:start="325:13" pos:end="325:47"><expr pos:start="325:13" pos:end="325:46"><call pos:start="325:13" pos:end="325:46"><name pos:start="325:13" pos:end="325:34">gen_exception_internal</name><argument_list pos:start="325:35" pos:end="325:46">(<argument pos:start="325:36" pos:end="325:45"><expr pos:start="325:36" pos:end="325:45"><name pos:start="325:36" pos:end="325:45">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="327:11" pos:end="331:9">else <block pos:start="327:16" pos:end="331:9">{<block_content pos:start="329:13" pos:end="329:44">

            <expr_stmt pos:start="329:13" pos:end="329:44"><expr pos:start="329:13" pos:end="329:43"><call pos:start="329:13" pos:end="329:43"><name pos:start="329:13" pos:end="329:39">gen_step_complete_exception</name><argument_list pos:start="329:40" pos:end="329:43">(<argument pos:start="329:41" pos:end="329:42"><expr pos:start="329:41" pos:end="329:42"><name pos:start="329:41" pos:end="329:42">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="333:7" pos:end="391:5">else <block pos:start="333:12" pos:end="391:5">{<block_content pos:start="335:9" pos:end="389:9">

        <switch pos:start="335:9" pos:end="389:9">switch <condition pos:start="335:16" pos:end="335:27">(<expr pos:start="335:17" pos:end="335:26"><name pos:start="335:17" pos:end="335:26"><name pos:start="335:17" pos:end="335:18">dc</name><operator pos:start="335:19" pos:end="335:20">-&gt;</operator><name pos:start="335:21" pos:end="335:26">is_jmp</name></name></expr>)</condition> <block pos:start="335:29" pos:end="389:9">{<block_content pos:start="337:9" pos:end="387:18">

        <case pos:start="337:9" pos:end="337:24">case <expr pos:start="337:14" pos:end="337:23"><name pos:start="337:14" pos:end="337:23">DISAS_NEXT</name></expr>:</case>

            <expr_stmt pos:start="339:13" pos:end="339:39"><expr pos:start="339:13" pos:end="339:38"><call pos:start="339:13" pos:end="339:38"><name pos:start="339:13" pos:end="339:23">gen_goto_tb</name><argument_list pos:start="339:24" pos:end="339:38">(<argument pos:start="339:25" pos:end="339:26"><expr pos:start="339:25" pos:end="339:26"><name pos:start="339:25" pos:end="339:26">dc</name></expr></argument>, <argument pos:start="339:29" pos:end="339:29"><expr pos:start="339:29" pos:end="339:29"><literal type="number" pos:start="339:29" pos:end="339:29">1</literal></expr></argument>, <argument pos:start="339:32" pos:end="339:37"><expr pos:start="339:32" pos:end="339:37"><name pos:start="339:32" pos:end="339:37"><name pos:start="339:32" pos:end="339:33">dc</name><operator pos:start="339:34" pos:end="339:35">-&gt;</operator><name pos:start="339:36" pos:end="339:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="341:13" pos:end="341:18">break;</break>

        <default pos:start="343:9" pos:end="343:16">default:</default>

        <case pos:start="345:9" pos:end="345:26">case <expr pos:start="345:14" pos:end="345:25"><name pos:start="345:14" pos:end="345:25">DISAS_UPDATE</name></expr>:</case>

            <expr_stmt pos:start="347:13" pos:end="347:38"><expr pos:start="347:13" pos:end="347:37"><call pos:start="347:13" pos:end="347:37"><name pos:start="347:13" pos:end="347:29">gen_a64_set_pc_im</name><argument_list pos:start="347:30" pos:end="347:37">(<argument pos:start="347:31" pos:end="347:36"><expr pos:start="347:31" pos:end="347:36"><name pos:start="347:31" pos:end="347:36"><name pos:start="347:31" pos:end="347:32">dc</name><operator pos:start="347:33" pos:end="347:34">-&gt;</operator><name pos:start="347:35" pos:end="347:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="349:13" pos:end="349:30">/* fall through */</comment>

        <case pos:start="351:9" pos:end="351:24">case <expr pos:start="351:14" pos:end="351:23"><name pos:start="351:14" pos:end="351:23">DISAS_JUMP</name></expr>:</case>

            <comment type="block" pos:start="353:13" pos:end="353:79">/* indicate that the hash table must be used to find the next TB */</comment>

            <expr_stmt pos:start="355:13" pos:end="355:31"><expr pos:start="355:13" pos:end="355:30"><call pos:start="355:13" pos:end="355:30"><name pos:start="355:13" pos:end="355:27">tcg_gen_exit_tb</name><argument_list pos:start="355:28" pos:end="355:30">(<argument pos:start="355:29" pos:end="355:29"><expr pos:start="355:29" pos:end="355:29"><literal type="number" pos:start="355:29" pos:end="355:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="357:13" pos:end="357:18">break;</break>

        <case pos:start="359:9" pos:end="359:27">case <expr pos:start="359:14" pos:end="359:26"><name pos:start="359:14" pos:end="359:26">DISAS_TB_JUMP</name></expr>:</case>

        <case pos:start="361:9" pos:end="361:23">case <expr pos:start="361:14" pos:end="361:22"><name pos:start="361:14" pos:end="361:22">DISAS_EXC</name></expr>:</case>

        <case pos:start="363:9" pos:end="363:23">case <expr pos:start="363:14" pos:end="363:22"><name pos:start="363:14" pos:end="363:22">DISAS_SWI</name></expr>:</case>

            <break pos:start="365:13" pos:end="365:18">break;</break>

        <case pos:start="367:9" pos:end="367:23">case <expr pos:start="367:14" pos:end="367:22"><name pos:start="367:14" pos:end="367:22">DISAS_WFE</name></expr>:</case>

            <expr_stmt pos:start="369:13" pos:end="369:38"><expr pos:start="369:13" pos:end="369:37"><call pos:start="369:13" pos:end="369:37"><name pos:start="369:13" pos:end="369:29">gen_a64_set_pc_im</name><argument_list pos:start="369:30" pos:end="369:37">(<argument pos:start="369:31" pos:end="369:36"><expr pos:start="369:31" pos:end="369:36"><name pos:start="369:31" pos:end="369:36"><name pos:start="369:31" pos:end="369:32">dc</name><operator pos:start="369:33" pos:end="369:34">-&gt;</operator><name pos:start="369:35" pos:end="369:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:36"><expr pos:start="371:13" pos:end="371:35"><call pos:start="371:13" pos:end="371:35"><name pos:start="371:13" pos:end="371:26">gen_helper_wfe</name><argument_list pos:start="371:27" pos:end="371:35">(<argument pos:start="371:28" pos:end="371:34"><expr pos:start="371:28" pos:end="371:34"><name pos:start="371:28" pos:end="371:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="373:13" pos:end="373:18">break;</break>

        <case pos:start="375:9" pos:end="375:23">case <expr pos:start="375:14" pos:end="375:22"><name pos:start="375:14" pos:end="375:22">DISAS_WFI</name></expr>:</case>

            <comment type="block" pos:start="377:13" pos:end="381:15">/* This is a special case because we don't want to just halt the CPU

             * if trying to debug across a WFI.

             */</comment>

            <expr_stmt pos:start="383:13" pos:end="383:38"><expr pos:start="383:13" pos:end="383:37"><call pos:start="383:13" pos:end="383:37"><name pos:start="383:13" pos:end="383:29">gen_a64_set_pc_im</name><argument_list pos:start="383:30" pos:end="383:37">(<argument pos:start="383:31" pos:end="383:36"><expr pos:start="383:31" pos:end="383:36"><name pos:start="383:31" pos:end="383:36"><name pos:start="383:31" pos:end="383:32">dc</name><operator pos:start="383:33" pos:end="383:34">-&gt;</operator><name pos:start="383:35" pos:end="383:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:36"><expr pos:start="385:13" pos:end="385:35"><call pos:start="385:13" pos:end="385:35"><name pos:start="385:13" pos:end="385:26">gen_helper_wfi</name><argument_list pos:start="385:27" pos:end="385:35">(<argument pos:start="385:28" pos:end="385:34"><expr pos:start="385:28" pos:end="385:34"><name pos:start="385:28" pos:end="385:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="387:13" pos:end="387:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



<label pos:start="395:1" pos:end="395:16"><name pos:start="395:1" pos:end="395:15">done_generating</name>:</label>

    <expr_stmt pos:start="397:5" pos:end="402:0"><expr pos:start="397:5" pos:end="397:29"><call pos:start="397:5" pos:end="397:29"><name pos:start="397:5" pos:end="397:14">gen_tb_end</name><argument_list pos:start="397:15" pos:end="397:29">(<argument pos:start="397:16" pos:end="397:17"><expr pos:start="397:16" pos:end="397:17"><name pos:start="397:16" pos:end="397:17">tb</name></expr></argument>, <argument pos:start="397:20" pos:end="397:28"><expr pos:start="397:20" pos:end="397:28"><name pos:start="397:20" pos:end="397:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="401:1" pos:end="401:18">#<cpp:directive pos:start="401:2" pos:end="401:6">ifdef</cpp:directive> <name pos:start="401:8" pos:end="401:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="403:5" pos:end="418:0"><if pos:start="403:5" pos:end="418:0">if <condition pos:start="403:8" pos:end="403:46">(<expr pos:start="403:9" pos:end="403:45"><call pos:start="403:9" pos:end="403:45"><name pos:start="403:9" pos:end="403:26">qemu_loglevel_mask</name><argument_list pos:start="403:27" pos:end="403:45">(<argument pos:start="403:28" pos:end="403:44"><expr pos:start="403:28" pos:end="403:44"><name pos:start="403:28" pos:end="403:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="403:48" pos:end="418:0">{<block_content pos:start="405:9" pos:end="413:23">

        <expr_stmt pos:start="405:9" pos:end="405:39"><expr pos:start="405:9" pos:end="405:38"><call pos:start="405:9" pos:end="405:38"><name pos:start="405:9" pos:end="405:16">qemu_log</name><argument_list pos:start="405:17" pos:end="405:38">(<argument pos:start="405:18" pos:end="405:37"><expr pos:start="405:18" pos:end="405:37"><literal type="string" pos:start="405:18" pos:end="405:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:54"><expr pos:start="407:9" pos:end="407:53"><call pos:start="407:9" pos:end="407:53"><name pos:start="407:9" pos:end="407:16">qemu_log</name><argument_list pos:start="407:17" pos:end="407:53">(<argument pos:start="407:18" pos:end="407:27"><expr pos:start="407:18" pos:end="407:27"><literal type="string" pos:start="407:18" pos:end="407:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="407:30" pos:end="407:52"><expr pos:start="407:30" pos:end="407:52"><call pos:start="407:30" pos:end="407:52"><name pos:start="407:30" pos:end="407:42">lookup_symbol</name><argument_list pos:start="407:43" pos:end="407:52">(<argument pos:start="407:44" pos:end="407:51"><expr pos:start="407:44" pos:end="407:51"><name pos:start="407:44" pos:end="407:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="409:9" pos:end="411:52"><expr pos:start="409:9" pos:end="411:51"><call pos:start="409:9" pos:end="411:51"><name pos:start="409:9" pos:end="409:24">log_target_disas</name><argument_list pos:start="409:25" pos:end="411:51">(<argument pos:start="409:26" pos:end="409:28"><expr pos:start="409:26" pos:end="409:28"><name pos:start="409:26" pos:end="409:28">env</name></expr></argument>, <argument pos:start="409:31" pos:end="409:38"><expr pos:start="409:31" pos:end="409:38"><name pos:start="409:31" pos:end="409:38">pc_start</name></expr></argument>, <argument pos:start="409:41" pos:end="409:57"><expr pos:start="409:41" pos:end="409:57"><name pos:start="409:41" pos:end="409:46"><name pos:start="409:41" pos:end="409:42">dc</name><operator pos:start="409:43" pos:end="409:44">-&gt;</operator><name pos:start="409:45" pos:end="409:46">pc</name></name> <operator pos:start="409:48" pos:end="409:48">-</operator> <name pos:start="409:50" pos:end="409:57">pc_start</name></expr></argument>,

                         <argument pos:start="411:26" pos:end="411:50"><expr pos:start="411:26" pos:end="411:50"><literal type="number" pos:start="411:26" pos:end="411:26">4</literal> <operator pos:start="411:28" pos:end="411:28">|</operator> <operator pos:start="411:30" pos:end="411:30">(</operator><name pos:start="411:31" pos:end="411:44"><name pos:start="411:31" pos:end="411:32">dc</name><operator pos:start="411:33" pos:end="411:34">-&gt;</operator><name pos:start="411:35" pos:end="411:44">bswap_code</name></name> <operator pos:start="411:46" pos:end="411:47">&lt;&lt;</operator> <literal type="number" pos:start="411:49" pos:end="411:49">1</literal><operator pos:start="411:50" pos:end="411:50">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:23"><expr pos:start="413:9" pos:end="413:22"><call pos:start="413:9" pos:end="413:22"><name pos:start="413:9" pos:end="413:16">qemu_log</name><argument_list pos:start="413:17" pos:end="413:22">(<argument pos:start="413:18" pos:end="413:21"><expr pos:start="413:18" pos:end="413:21"><literal type="string" pos:start="413:18" pos:end="413:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="417:1" pos:end="417:6">#<cpp:directive pos:start="417:2" pos:end="417:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="419:5" pos:end="437:5"><if pos:start="419:5" pos:end="431:5">if <condition pos:start="419:8" pos:end="419:18">(<expr pos:start="419:9" pos:end="419:17"><name pos:start="419:9" pos:end="419:17">search_pc</name></expr>)</condition> <block pos:start="419:20" pos:end="431:5">{<block_content pos:start="421:9" pos:end="429:9">

        <expr_stmt pos:start="421:9" pos:end="421:31"><expr pos:start="421:9" pos:end="421:30"><name pos:start="421:9" pos:end="421:9">j</name> <operator pos:start="421:11" pos:end="421:11">=</operator> <call pos:start="421:13" pos:end="421:30"><name pos:start="421:13" pos:end="421:28">tcg_op_buf_count</name><argument_list pos:start="421:29" pos:end="421:30">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="423:9" pos:end="423:13"><expr pos:start="423:9" pos:end="423:12"><name pos:start="423:9" pos:end="423:10">lj</name><operator pos:start="423:11" pos:end="423:12">++</operator></expr>;</expr_stmt>

        <while pos:start="425:9" pos:end="429:9">while <condition pos:start="425:15" pos:end="425:23">(<expr pos:start="425:16" pos:end="425:22"><name pos:start="425:16" pos:end="425:17">lj</name> <operator pos:start="425:19" pos:end="425:20">&lt;=</operator> <name pos:start="425:22" pos:end="425:22">j</name></expr>)</condition> <block pos:start="425:25" pos:end="429:9">{<block_content pos:start="427:13" pos:end="427:50">

            <expr_stmt pos:start="427:13" pos:end="427:50"><expr pos:start="427:13" pos:end="427:49"><name pos:start="427:13" pos:end="427:45"><name pos:start="427:13" pos:end="427:19">tcg_ctx</name><operator pos:start="427:20" pos:end="427:20">.</operator><name pos:start="427:21" pos:end="427:39">gen_opc_instr_start</name><index pos:start="427:40" pos:end="427:45">[<expr pos:start="427:41" pos:end="427:44"><name pos:start="427:41" pos:end="427:42">lj</name><operator pos:start="427:43" pos:end="427:44">++</operator></expr>]</index></name> <operator pos:start="427:47" pos:end="427:47">=</operator> <literal type="number" pos:start="427:49" pos:end="427:49">0</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="431:7" pos:end="437:5">else <block pos:start="431:12" pos:end="437:5">{<block_content pos:start="433:9" pos:end="435:31">

        <expr_stmt pos:start="433:9" pos:end="433:37"><expr pos:start="433:9" pos:end="433:36"><name pos:start="433:9" pos:end="433:16"><name pos:start="433:9" pos:end="433:10">tb</name><operator pos:start="433:11" pos:end="433:12">-&gt;</operator><name pos:start="433:13" pos:end="433:16">size</name></name> <operator pos:start="433:18" pos:end="433:18">=</operator> <name pos:start="433:20" pos:end="433:25"><name pos:start="433:20" pos:end="433:21">dc</name><operator pos:start="433:22" pos:end="433:23">-&gt;</operator><name pos:start="433:24" pos:end="433:25">pc</name></name> <operator pos:start="433:27" pos:end="433:27">-</operator> <name pos:start="433:29" pos:end="433:36">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="435:9" pos:end="435:31"><expr pos:start="435:9" pos:end="435:30"><name pos:start="435:9" pos:end="435:18"><name pos:start="435:9" pos:end="435:10">tb</name><operator pos:start="435:11" pos:end="435:12">-&gt;</operator><name pos:start="435:13" pos:end="435:18">icount</name></name> <operator pos:start="435:20" pos:end="435:20">=</operator> <name pos:start="435:22" pos:end="435:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
