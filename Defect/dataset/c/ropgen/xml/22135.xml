<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22135.c" pos:tabs="8"><function pos:start="1:1" pos:end="505:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ffm2_read_header</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="505:1">{<block_content pos:start="5:5" pos:end="503:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">FFMContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">ffm</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AVStream</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">AVIOContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:19">pb</name> <init pos:start="9:21" pos:end="9:27">= <expr pos:start="9:23" pos:end="9:27"><name pos:start="9:23" pos:end="9:27"><name pos:start="9:23" pos:end="9:23">s</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">AVCodecContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:25">codec</name></decl>, <decl pos:start="11:28" pos:end="11:46"><type ref="prev" pos:start="11:5" pos:end="11:20"><modifier pos:start="11:28" pos:end="11:28">*</modifier></type><name pos:start="11:29" pos:end="11:39">dummy_codec</name> <init pos:start="11:41" pos:end="11:46">= <expr pos:start="11:43" pos:end="11:46"><name pos:start="11:43" pos:end="11:46">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">AVCodecParameters</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:31">codecpar</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:40"><decl pos:start="15:5" pos:end="15:39"><type pos:start="15:5" pos:end="15:29"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:27">AVCodecDescriptor</name> <modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:39">codec_desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:58"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">f_main</name> <init pos:start="19:16" pos:end="19:18">= <expr pos:start="19:18" pos:end="19:18"><literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr></init></decl>, <decl pos:start="19:21" pos:end="19:31"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:21" pos:end="19:26">f_cprv</name> <init pos:start="19:28" pos:end="19:31">= <expr pos:start="19:30" pos:end="19:31"><operator pos:start="19:30" pos:end="19:30">-</operator><literal type="number" pos:start="19:31" pos:end="19:31">1</literal></expr></init></decl>, <decl pos:start="19:34" pos:end="19:44"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:34" pos:end="19:39">f_stvi</name> <init pos:start="19:41" pos:end="19:44">= <expr pos:start="19:43" pos:end="19:44"><operator pos:start="19:43" pos:end="19:43">-</operator><literal type="number" pos:start="19:44" pos:end="19:44">1</literal></expr></init></decl>, <decl pos:start="19:47" pos:end="19:57"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:47" pos:end="19:52">f_stau</name> <init pos:start="19:54" pos:end="19:57">= <expr pos:start="19:56" pos:end="19:57"><operator pos:start="19:56" pos:end="19:56">-</operator><literal type="number" pos:start="19:57" pos:end="19:57">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">AVCodec</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:16">enc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:16">buffer</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:7">ffm</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:20">packet_size</name></name> <operator pos:start="27:22" pos:end="27:22">=</operator> <call pos:start="27:24" pos:end="27:36"><name pos:start="27:24" pos:end="27:32">avio_rb32</name><argument_list pos:start="27:33" pos:end="27:36">(<argument pos:start="27:34" pos:end="27:35"><expr pos:start="27:34" pos:end="27:35"><name pos:start="27:34" pos:end="27:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:44">(<expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:11">ffm</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:24">packet_size</name></name> <operator pos:start="29:26" pos:end="29:27">!=</operator> <name pos:start="29:29" pos:end="29:43">FFM_PACKET_SIZE</name></expr>)</condition> <block pos:start="29:46" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:18">

        <expr_stmt pos:start="31:9" pos:end="33:50"><expr pos:start="31:9" pos:end="33:49"><call pos:start="31:9" pos:end="33:49"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="33:49">(<argument pos:start="31:16" pos:end="31:16"><expr pos:start="31:16" pos:end="31:16"><name pos:start="31:16" pos:end="31:16">s</name></expr></argument>, <argument pos:start="31:19" pos:end="31:30"><expr pos:start="31:19" pos:end="31:30"><name pos:start="31:19" pos:end="31:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:33" pos:end="31:80"><expr pos:start="31:33" pos:end="31:80"><literal type="string" pos:start="31:33" pos:end="31:80">"Invalid packet size %d, expected size was %d\n"</literal></expr></argument>,

               <argument pos:start="33:16" pos:end="33:31"><expr pos:start="33:16" pos:end="33:31"><name pos:start="33:16" pos:end="33:31"><name pos:start="33:16" pos:end="33:18">ffm</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:31">packet_size</name></name></expr></argument>, <argument pos:start="33:34" pos:end="33:48"><expr pos:start="33:34" pos:end="33:48"><name pos:start="33:34" pos:end="33:48">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:7">ffm</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:20">write_index</name></name> <operator pos:start="43:22" pos:end="43:22">=</operator> <call pos:start="43:24" pos:end="43:36"><name pos:start="43:24" pos:end="43:32">avio_rb64</name><argument_list pos:start="43:33" pos:end="43:36">(<argument pos:start="43:34" pos:end="43:35"><expr pos:start="43:34" pos:end="43:35"><name pos:start="43:34" pos:end="43:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:27">/* get also filesize */</comment>

    <if_stmt pos:start="47:5" pos:end="59:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:21">(<expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:10">pb</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:20">seekable</name></name></expr>)</condition> <block pos:start="47:23" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:34">

        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:11">ffm</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:22">file_size</name></name> <operator pos:start="49:24" pos:end="49:24">=</operator> <call pos:start="49:26" pos:end="49:38"><name pos:start="49:26" pos:end="49:34">avio_size</name><argument_list pos:start="49:35" pos:end="49:38">(<argument pos:start="49:36" pos:end="49:37"><expr pos:start="49:36" pos:end="49:37"><name pos:start="49:36" pos:end="49:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="53:34"><if pos:start="51:9" pos:end="53:34">if <condition pos:start="51:12" pos:end="51:34">(<expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:15">ffm</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:28">write_index</name></name> <operator pos:start="51:30" pos:end="51:31">&amp;&amp;</operator> <literal type="number" pos:start="51:33" pos:end="51:33">0</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:34"><block_content pos:start="53:13" pos:end="53:34">

            <expr_stmt pos:start="53:13" pos:end="53:34"><expr pos:start="53:13" pos:end="53:33"><call pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:30">adjust_write_index</name><argument_list pos:start="53:31" pos:end="53:33">(<argument pos:start="53:32" pos:end="53:32"><expr pos:start="53:32" pos:end="53:32"><name pos:start="53:32" pos:end="53:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="59:5">else <block pos:start="55:12" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:49">

        <expr_stmt pos:start="57:9" pos:end="57:49"><expr pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:11">ffm</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:22">file_size</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <operator pos:start="57:26" pos:end="57:26">(</operator><call pos:start="57:27" pos:end="57:37"><name pos:start="57:27" pos:end="57:34">UINT64_C</name><argument_list pos:start="57:35" pos:end="57:37">(<argument pos:start="57:36" pos:end="57:36"><expr pos:start="57:36" pos:end="57:36"><literal type="number" pos:start="57:36" pos:end="57:36">1</literal></expr></argument>)</argument_list></call> <operator pos:start="57:39" pos:end="57:40">&lt;&lt;</operator> <literal type="number" pos:start="57:42" pos:end="57:43">63</literal><operator pos:start="57:44" pos:end="57:44">)</operator> <operator pos:start="57:46" pos:end="57:46">-</operator> <literal type="number" pos:start="57:48" pos:end="57:48">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:47"><expr pos:start="61:5" pos:end="61:46"><name pos:start="61:5" pos:end="61:15">dummy_codec</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:46"><name pos:start="61:19" pos:end="61:40">avcodec_alloc_context3</name><argument_list pos:start="61:41" pos:end="61:46">(<argument pos:start="61:42" pos:end="61:45"><expr pos:start="61:42" pos:end="61:45"><name pos:start="61:42" pos:end="61:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="65:5" pos:end="469:5">while<condition pos:start="65:10" pos:end="65:25">(<expr pos:start="65:11" pos:end="65:24"><operator pos:start="65:11" pos:end="65:11">!</operator><call pos:start="65:12" pos:end="65:24"><name pos:start="65:12" pos:end="65:20">avio_feof</name><argument_list pos:start="65:21" pos:end="65:24">(<argument pos:start="65:22" pos:end="65:23"><expr pos:start="65:22" pos:end="65:23"><name pos:start="65:22" pos:end="65:23">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:27" pos:end="469:5">{<block_content pos:start="67:9" pos:end="467:38">

        <decl_stmt pos:start="67:9" pos:end="67:36"><decl pos:start="67:9" pos:end="67:35"><type pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:16">unsigned</name></type> <name pos:start="67:18" pos:end="67:19">id</name> <init pos:start="67:21" pos:end="67:35">= <expr pos:start="67:23" pos:end="67:35"><call pos:start="67:23" pos:end="67:35"><name pos:start="67:23" pos:end="67:31">avio_rb32</name><argument_list pos:start="67:32" pos:end="67:35">(<argument pos:start="67:33" pos:end="67:34"><expr pos:start="67:33" pos:end="67:34"><name pos:start="67:33" pos:end="67:34">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:38"><decl pos:start="69:9" pos:end="69:37"><type pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:16">unsigned</name></type> <name pos:start="69:18" pos:end="69:21">size</name> <init pos:start="69:23" pos:end="69:37">= <expr pos:start="69:25" pos:end="69:37"><call pos:start="69:25" pos:end="69:37"><name pos:start="69:25" pos:end="69:33">avio_rb32</name><argument_list pos:start="69:34" pos:end="69:37">(<argument pos:start="69:35" pos:end="69:36"><expr pos:start="69:35" pos:end="69:36"><name pos:start="69:35" pos:end="69:36">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:44"><decl pos:start="71:9" pos:end="71:43"><type pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:15">int64_t</name></type> <name pos:start="71:17" pos:end="71:20">next</name> <init pos:start="71:22" pos:end="71:43">= <expr pos:start="71:24" pos:end="71:43"><call pos:start="71:24" pos:end="71:36"><name pos:start="71:24" pos:end="71:32">avio_tell</name><argument_list pos:start="71:33" pos:end="71:36">(<argument pos:start="71:34" pos:end="71:35"><expr pos:start="71:34" pos:end="71:35"><name pos:start="71:34" pos:end="71:35">pb</name></expr></argument>)</argument_list></call> <operator pos:start="71:38" pos:end="71:38">+</operator> <name pos:start="71:40" pos:end="71:43">size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:28"><decl pos:start="73:9" pos:end="73:27"><type pos:start="73:9" pos:end="73:12"><name pos:start="73:9" pos:end="73:12">char</name></type> <name pos:start="73:14" pos:end="73:27"><name pos:start="73:14" pos:end="73:22">rc_eq_buf</name><index pos:start="73:23" pos:end="73:27">[<expr pos:start="73:24" pos:end="73:26"><literal type="number" pos:start="73:24" pos:end="73:26">128</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="77:9" pos:end="79:18"><if pos:start="77:9" pos:end="79:18">if<condition pos:start="77:11" pos:end="77:15">(<expr pos:start="77:12" pos:end="77:14"><operator pos:start="77:12" pos:end="77:12">!</operator><name pos:start="77:13" pos:end="77:14">id</name></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:18"><block_content pos:start="79:13" pos:end="79:18">

            <break pos:start="79:13" pos:end="79:18">break;</break></block_content></block></if></if_stmt>



        <switch pos:start="83:9" pos:end="465:9">switch<condition pos:start="83:15" pos:end="83:18">(<expr pos:start="83:16" pos:end="83:17"><name pos:start="83:16" pos:end="83:17">id</name></expr>)</condition> <block pos:start="83:20" pos:end="465:9">{<block_content pos:start="85:9" pos:end="463:18">

        <case pos:start="85:9" pos:end="85:41">case <expr pos:start="85:14" pos:end="85:40"><call pos:start="85:14" pos:end="85:40"><name pos:start="85:14" pos:end="85:20">MKBETAG</name><argument_list pos:start="85:21" pos:end="85:40">(<argument pos:start="85:22" pos:end="85:24"><expr pos:start="85:22" pos:end="85:24"><literal type="char" pos:start="85:22" pos:end="85:24">'M'</literal></expr></argument>, <argument pos:start="85:27" pos:end="85:29"><expr pos:start="85:27" pos:end="85:29"><literal type="char" pos:start="85:27" pos:end="85:29">'A'</literal></expr></argument>, <argument pos:start="85:32" pos:end="85:34"><expr pos:start="85:32" pos:end="85:34"><literal type="char" pos:start="85:32" pos:end="85:34">'I'</literal></expr></argument>, <argument pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><literal type="char" pos:start="85:37" pos:end="85:39">'N'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="87:13" pos:end="93:13"><if pos:start="87:13" pos:end="93:13">if <condition pos:start="87:16" pos:end="87:25">(<expr pos:start="87:17" pos:end="87:24"><name pos:start="87:17" pos:end="87:22">f_main</name><operator pos:start="87:23" pos:end="87:24">++</operator></expr>)</condition> <block pos:start="87:27" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:26">

                <expr_stmt pos:start="89:17" pos:end="89:38"><expr pos:start="89:17" pos:end="89:37"><name pos:start="89:17" pos:end="89:19">ret</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:37"><name pos:start="89:23" pos:end="89:29">AVERROR</name><argument_list pos:start="89:30" pos:end="89:37">(<argument pos:start="89:31" pos:end="89:36"><expr pos:start="89:31" pos:end="89:36"><name pos:start="89:31" pos:end="89:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="91:17" pos:end="91:26">goto <name pos:start="91:22" pos:end="91:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:26"><expr pos:start="95:13" pos:end="95:25"><call pos:start="95:13" pos:end="95:25"><name pos:start="95:13" pos:end="95:21">avio_rb32</name><argument_list pos:start="95:22" pos:end="95:25">(<argument pos:start="95:23" pos:end="95:24"><expr pos:start="95:23" pos:end="95:24"><name pos:start="95:23" pos:end="95:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="95:28" pos:end="95:43">/* nb_streams */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:26"><expr pos:start="97:13" pos:end="97:25"><call pos:start="97:13" pos:end="97:25"><name pos:start="97:13" pos:end="97:21">avio_rb32</name><argument_list pos:start="97:22" pos:end="97:25">(<argument pos:start="97:23" pos:end="97:24"><expr pos:start="97:23" pos:end="97:24"><name pos:start="97:23" pos:end="97:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="97:28" pos:end="97:46">/* total bitrate */</comment>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <case pos:start="101:9" pos:end="101:41">case <expr pos:start="101:14" pos:end="101:40"><call pos:start="101:14" pos:end="101:40"><name pos:start="101:14" pos:end="101:20">MKBETAG</name><argument_list pos:start="101:21" pos:end="101:40">(<argument pos:start="101:22" pos:end="101:24"><expr pos:start="101:22" pos:end="101:24"><literal type="char" pos:start="101:22" pos:end="101:24">'C'</literal></expr></argument>, <argument pos:start="101:27" pos:end="101:29"><expr pos:start="101:27" pos:end="101:29"><literal type="char" pos:start="101:27" pos:end="101:29">'O'</literal></expr></argument>, <argument pos:start="101:32" pos:end="101:34"><expr pos:start="101:32" pos:end="101:34"><literal type="char" pos:start="101:32" pos:end="101:34">'M'</literal></expr></argument>, <argument pos:start="101:37" pos:end="101:39"><expr pos:start="101:37" pos:end="101:39"><literal type="char" pos:start="101:37" pos:end="101:39">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:41"><expr pos:start="103:13" pos:end="103:40"><name pos:start="103:13" pos:end="103:18">f_cprv</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <name pos:start="103:22" pos:end="103:27">f_stvi</name> <operator pos:start="103:29" pos:end="103:29">=</operator> <name pos:start="103:31" pos:end="103:36">f_stau</name> <operator pos:start="103:38" pos:end="103:38">=</operator> <literal type="number" pos:start="103:40" pos:end="103:40">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:46"><expr pos:start="105:13" pos:end="105:45"><name pos:start="105:13" pos:end="105:14">st</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <call pos:start="105:18" pos:end="105:45"><name pos:start="105:18" pos:end="105:36">avformat_new_stream</name><argument_list pos:start="105:37" pos:end="105:45">(<argument pos:start="105:38" pos:end="105:38"><expr pos:start="105:38" pos:end="105:38"><name pos:start="105:38" pos:end="105:38">s</name></expr></argument>, <argument pos:start="105:41" pos:end="105:44"><expr pos:start="105:41" pos:end="105:44"><name pos:start="105:41" pos:end="105:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="113:13"><if pos:start="107:13" pos:end="113:13">if <condition pos:start="107:16" pos:end="107:20">(<expr pos:start="107:17" pos:end="107:19"><operator pos:start="107:17" pos:end="107:17">!</operator><name pos:start="107:18" pos:end="107:19">st</name></expr>)</condition> <block pos:start="107:22" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:26">

                <expr_stmt pos:start="109:17" pos:end="109:38"><expr pos:start="109:17" pos:end="109:37"><name pos:start="109:17" pos:end="109:19">ret</name> <operator pos:start="109:21" pos:end="109:21">=</operator> <call pos:start="109:23" pos:end="109:37"><name pos:start="109:23" pos:end="109:29">AVERROR</name><argument_list pos:start="109:30" pos:end="109:37">(<argument pos:start="109:31" pos:end="109:36"><expr pos:start="109:31" pos:end="109:36"><name pos:start="109:31" pos:end="109:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="111:17" pos:end="111:26">goto <name pos:start="111:22" pos:end="111:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="117:13" pos:end="117:52"><expr pos:start="117:13" pos:end="117:51"><call pos:start="117:13" pos:end="117:51"><name pos:start="117:13" pos:end="117:31">avpriv_set_pts_info</name><argument_list pos:start="117:32" pos:end="117:51">(<argument pos:start="117:33" pos:end="117:34"><expr pos:start="117:33" pos:end="117:34"><name pos:start="117:33" pos:end="117:34">st</name></expr></argument>, <argument pos:start="117:37" pos:end="117:38"><expr pos:start="117:37" pos:end="117:38"><literal type="number" pos:start="117:37" pos:end="117:38">64</literal></expr></argument>, <argument pos:start="117:41" pos:end="117:41"><expr pos:start="117:41" pos:end="117:41"><literal type="number" pos:start="117:41" pos:end="117:41">1</literal></expr></argument>, <argument pos:start="117:44" pos:end="117:50"><expr pos:start="117:44" pos:end="117:50"><literal type="number" pos:start="117:44" pos:end="117:50">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="121:13" pos:end="121:30"><expr pos:start="121:13" pos:end="121:29"><name pos:start="121:13" pos:end="121:17">codec</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <name pos:start="121:21" pos:end="121:29"><name pos:start="121:21" pos:end="121:22">st</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:29">codec</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:36"><expr pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:20">codecpar</name> <operator pos:start="123:22" pos:end="123:22">=</operator> <name pos:start="123:24" pos:end="123:35"><name pos:start="123:24" pos:end="123:25">st</name><operator pos:start="123:26" pos:end="123:27">-&gt;</operator><name pos:start="123:28" pos:end="123:35">codecpar</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="125:13" pos:end="125:30">/* generic info */</comment>

            <expr_stmt pos:start="127:13" pos:end="127:47"><expr pos:start="127:13" pos:end="127:46"><name pos:start="127:13" pos:end="127:30"><name pos:start="127:13" pos:end="127:20">codecpar</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:30">codec_id</name></name> <operator pos:start="127:32" pos:end="127:32">=</operator> <call pos:start="127:34" pos:end="127:46"><name pos:start="127:34" pos:end="127:42">avio_rb32</name><argument_list pos:start="127:43" pos:end="127:46">(<argument pos:start="127:44" pos:end="127:45"><expr pos:start="127:44" pos:end="127:45"><name pos:start="127:44" pos:end="127:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:68"><expr pos:start="129:13" pos:end="129:67"><name pos:start="129:13" pos:end="129:22">codec_desc</name> <operator pos:start="129:24" pos:end="129:24">=</operator> <call pos:start="129:26" pos:end="129:67"><name pos:start="129:26" pos:end="129:47">avcodec_descriptor_get</name><argument_list pos:start="129:48" pos:end="129:67">(<argument pos:start="129:49" pos:end="129:66"><expr pos:start="129:49" pos:end="129:66"><name pos:start="129:49" pos:end="129:66"><name pos:start="129:49" pos:end="129:56">codecpar</name><operator pos:start="129:57" pos:end="129:58">-&gt;</operator><name pos:start="129:59" pos:end="129:66">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="131:13" pos:end="141:13"><if pos:start="131:13" pos:end="141:13">if <condition pos:start="131:16" pos:end="131:28">(<expr pos:start="131:17" pos:end="131:27"><operator pos:start="131:17" pos:end="131:17">!</operator><name pos:start="131:18" pos:end="131:27">codec_desc</name></expr>)</condition> <block pos:start="131:30" pos:end="141:13">{<block_content pos:start="133:17" pos:end="139:26">

                <expr_stmt pos:start="133:17" pos:end="133:86"><expr pos:start="133:17" pos:end="133:85"><call pos:start="133:17" pos:end="133:85"><name pos:start="133:17" pos:end="133:22">av_log</name><argument_list pos:start="133:23" pos:end="133:85">(<argument pos:start="133:24" pos:end="133:24"><expr pos:start="133:24" pos:end="133:24"><name pos:start="133:24" pos:end="133:24">s</name></expr></argument>, <argument pos:start="133:27" pos:end="133:38"><expr pos:start="133:27" pos:end="133:38"><name pos:start="133:27" pos:end="133:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:41" pos:end="133:64"><expr pos:start="133:41" pos:end="133:64"><literal type="string" pos:start="133:41" pos:end="133:64">"Invalid codec id: %d\n"</literal></expr></argument>, <argument pos:start="133:67" pos:end="133:84"><expr pos:start="133:67" pos:end="133:84"><name pos:start="133:67" pos:end="133:84"><name pos:start="133:67" pos:end="133:74">codecpar</name><operator pos:start="133:75" pos:end="133:76">-&gt;</operator><name pos:start="133:77" pos:end="133:84">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:54"><expr pos:start="135:17" pos:end="135:53"><name pos:start="135:17" pos:end="135:34"><name pos:start="135:17" pos:end="135:24">codecpar</name><operator pos:start="135:25" pos:end="135:26">-&gt;</operator><name pos:start="135:27" pos:end="135:34">codec_id</name></name> <operator pos:start="135:36" pos:end="135:36">=</operator> <name pos:start="135:38" pos:end="135:53">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:42"><expr pos:start="137:17" pos:end="137:41"><name pos:start="137:17" pos:end="137:19">ret</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="139:17" pos:end="139:26">goto <name pos:start="139:22" pos:end="139:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:47"><expr pos:start="143:13" pos:end="143:46"><name pos:start="143:13" pos:end="143:32"><name pos:start="143:13" pos:end="143:20">codecpar</name><operator pos:start="143:21" pos:end="143:22">-&gt;</operator><name pos:start="143:23" pos:end="143:32">codec_type</name></name> <operator pos:start="143:34" pos:end="143:34">=</operator> <call pos:start="143:36" pos:end="143:46"><name pos:start="143:36" pos:end="143:42">avio_r8</name><argument_list pos:start="143:43" pos:end="143:46">(<argument pos:start="143:44" pos:end="143:45"><expr pos:start="143:44" pos:end="143:45"><name pos:start="143:44" pos:end="143:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="159:13"><if pos:start="145:13" pos:end="159:13">if <condition pos:start="145:16" pos:end="145:57">(<expr pos:start="145:17" pos:end="145:56"><name pos:start="145:17" pos:end="145:36"><name pos:start="145:17" pos:end="145:24">codecpar</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:36">codec_type</name></name> <operator pos:start="145:38" pos:end="145:39">!=</operator> <name pos:start="145:41" pos:end="145:56"><name pos:start="145:41" pos:end="145:50">codec_desc</name><operator pos:start="145:51" pos:end="145:52">-&gt;</operator><name pos:start="145:53" pos:end="145:56">type</name></name></expr>)</condition> <block pos:start="145:59" pos:end="159:13">{<block_content pos:start="147:17" pos:end="157:26">

                <expr_stmt pos:start="147:17" pos:end="149:63"><expr pos:start="147:17" pos:end="149:62"><call pos:start="147:17" pos:end="149:62"><name pos:start="147:17" pos:end="147:22">av_log</name><argument_list pos:start="147:23" pos:end="149:62">(<argument pos:start="147:24" pos:end="147:24"><expr pos:start="147:24" pos:end="147:24"><name pos:start="147:24" pos:end="147:24">s</name></expr></argument>, <argument pos:start="147:27" pos:end="147:38"><expr pos:start="147:27" pos:end="147:38"><name pos:start="147:27" pos:end="147:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:41" pos:end="147:86"><expr pos:start="147:41" pos:end="147:86"><literal type="string" pos:start="147:41" pos:end="147:86">"Codec type mismatch: expected %d, found %d\n"</literal></expr></argument>,

                       <argument pos:start="149:24" pos:end="149:39"><expr pos:start="149:24" pos:end="149:39"><name pos:start="149:24" pos:end="149:39"><name pos:start="149:24" pos:end="149:33">codec_desc</name><operator pos:start="149:34" pos:end="149:35">-&gt;</operator><name pos:start="149:36" pos:end="149:39">type</name></name></expr></argument>, <argument pos:start="149:42" pos:end="149:61"><expr pos:start="149:42" pos:end="149:61"><name pos:start="149:42" pos:end="149:61"><name pos:start="149:42" pos:end="149:49">codecpar</name><operator pos:start="149:50" pos:end="149:51">-&gt;</operator><name pos:start="149:52" pos:end="149:61">codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:54"><expr pos:start="151:17" pos:end="151:53"><name pos:start="151:17" pos:end="151:34"><name pos:start="151:17" pos:end="151:24">codecpar</name><operator pos:start="151:25" pos:end="151:26">-&gt;</operator><name pos:start="151:27" pos:end="151:34">codec_id</name></name> <operator pos:start="151:36" pos:end="151:36">=</operator> <name pos:start="151:38" pos:end="151:53">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:60"><expr pos:start="153:17" pos:end="153:59"><name pos:start="153:17" pos:end="153:36"><name pos:start="153:17" pos:end="153:24">codecpar</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:36">codec_type</name></name> <operator pos:start="153:38" pos:end="153:38">=</operator> <name pos:start="153:40" pos:end="153:59">AVMEDIA_TYPE_UNKNOWN</name></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:42"><expr pos:start="155:17" pos:end="155:41"><name pos:start="155:17" pos:end="155:19">ret</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <name pos:start="155:23" pos:end="155:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="157:17" pos:end="157:26">goto <name pos:start="157:22" pos:end="157:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:47"><expr pos:start="161:13" pos:end="161:46"><name pos:start="161:13" pos:end="161:30"><name pos:start="161:13" pos:end="161:20">codecpar</name><operator pos:start="161:21" pos:end="161:22">-&gt;</operator><name pos:start="161:23" pos:end="161:30">bit_rate</name></name> <operator pos:start="161:32" pos:end="161:32">=</operator> <call pos:start="161:34" pos:end="161:46"><name pos:start="161:34" pos:end="161:42">avio_rb32</name><argument_list pos:start="161:43" pos:end="161:46">(<argument pos:start="161:44" pos:end="161:45"><expr pos:start="161:44" pos:end="161:45"><name pos:start="161:44" pos:end="161:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="163:13" pos:end="171:13"><if pos:start="163:13" pos:end="171:13">if <condition pos:start="163:16" pos:end="163:39">(<expr pos:start="163:17" pos:end="163:38"><name pos:start="163:17" pos:end="163:34"><name pos:start="163:17" pos:end="163:24">codecpar</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:34">bit_rate</name></name> <operator pos:start="163:36" pos:end="163:36">&lt;</operator> <literal type="number" pos:start="163:38" pos:end="163:38">0</literal></expr>)</condition> <block pos:start="163:41" pos:end="171:13">{<block_content pos:start="165:17" pos:end="169:26">

                <expr_stmt pos:start="165:17" pos:end="165:96"><expr pos:start="165:17" pos:end="165:95"><call pos:start="165:17" pos:end="165:95"><name pos:start="165:17" pos:end="165:22">av_log</name><argument_list pos:start="165:23" pos:end="165:95">(<argument pos:start="165:24" pos:end="165:28"><expr pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:28">codec</name></expr></argument>, <argument pos:start="165:31" pos:end="165:42"><expr pos:start="165:31" pos:end="165:42"><name pos:start="165:31" pos:end="165:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:45" pos:end="165:74"><expr pos:start="165:45" pos:end="165:74"><literal type="string" pos:start="165:45" pos:end="165:64">"Invalid bit rate %"</literal><name pos:start="165:65" pos:end="165:70">PRId64</name><literal type="string" pos:start="165:71" pos:end="165:74">"\n"</literal></expr></argument>, <argument pos:start="165:77" pos:end="165:94"><expr pos:start="165:77" pos:end="165:94"><name pos:start="165:77" pos:end="165:94"><name pos:start="165:77" pos:end="165:84">codecpar</name><operator pos:start="165:85" pos:end="165:86">-&gt;</operator><name pos:start="165:87" pos:end="165:94">bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:42"><expr pos:start="167:17" pos:end="167:41"><name pos:start="167:17" pos:end="167:19">ret</name> <operator pos:start="167:21" pos:end="167:21">=</operator> <name pos:start="167:23" pos:end="167:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="169:17" pos:end="169:26">goto <name pos:start="169:22" pos:end="169:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:41"><expr pos:start="173:13" pos:end="173:40"><name pos:start="173:13" pos:end="173:24"><name pos:start="173:13" pos:end="173:17">codec</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:24">flags</name></name> <operator pos:start="173:26" pos:end="173:26">=</operator> <call pos:start="173:28" pos:end="173:40"><name pos:start="173:28" pos:end="173:36">avio_rb32</name><argument_list pos:start="173:37" pos:end="173:40">(<argument pos:start="173:38" pos:end="173:39"><expr pos:start="173:38" pos:end="173:39"><name pos:start="173:38" pos:end="173:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:42"><expr pos:start="175:13" pos:end="175:41"><name pos:start="175:13" pos:end="175:25"><name pos:start="175:13" pos:end="175:17">codec</name><operator pos:start="175:18" pos:end="175:19">-&gt;</operator><name pos:start="175:20" pos:end="175:25">flags2</name></name> <operator pos:start="175:27" pos:end="175:27">=</operator> <call pos:start="175:29" pos:end="175:41"><name pos:start="175:29" pos:end="175:37">avio_rb32</name><argument_list pos:start="175:38" pos:end="175:41">(<argument pos:start="175:39" pos:end="175:40"><expr pos:start="175:39" pos:end="175:40"><name pos:start="175:39" pos:end="175:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:41"><expr pos:start="177:13" pos:end="177:40"><name pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:17">codec</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:24">debug</name></name> <operator pos:start="177:26" pos:end="177:26">=</operator> <call pos:start="177:28" pos:end="177:40"><name pos:start="177:28" pos:end="177:36">avio_rb32</name><argument_list pos:start="177:37" pos:end="177:40">(<argument pos:start="177:38" pos:end="177:39"><expr pos:start="177:38" pos:end="177:39"><name pos:start="177:38" pos:end="177:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="203:13"><if pos:start="179:13" pos:end="203:13">if <condition pos:start="179:16" pos:end="179:59">(<expr pos:start="179:17" pos:end="179:58"><name pos:start="179:17" pos:end="179:28"><name pos:start="179:17" pos:end="179:21">codec</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:28">flags</name></name> <operator pos:start="179:30" pos:end="179:30">&amp;</operator> <name pos:start="179:32" pos:end="179:58">AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block pos:start="179:61" pos:end="203:13">{<block_content pos:start="181:17" pos:end="201:57">

                <decl_stmt pos:start="181:17" pos:end="181:41"><decl pos:start="181:17" pos:end="181:40"><type pos:start="181:17" pos:end="181:19"><name pos:start="181:17" pos:end="181:19">int</name></type> <name pos:start="181:21" pos:end="181:24">size</name> <init pos:start="181:26" pos:end="181:40">= <expr pos:start="181:28" pos:end="181:40"><call pos:start="181:28" pos:end="181:40"><name pos:start="181:28" pos:end="181:36">avio_rb32</name><argument_list pos:start="181:37" pos:end="181:40">(<argument pos:start="181:38" pos:end="181:39"><expr pos:start="181:38" pos:end="181:39"><name pos:start="181:38" pos:end="181:39">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="183:17" pos:end="191:17"><if pos:start="183:17" pos:end="191:17">if <condition pos:start="183:20" pos:end="183:62">(<expr pos:start="183:21" pos:end="183:61"><name pos:start="183:21" pos:end="183:24">size</name> <operator pos:start="183:26" pos:end="183:26">&lt;</operator> <literal type="number" pos:start="183:28" pos:end="183:28">0</literal> <operator pos:start="183:30" pos:end="183:31">||</operator> <name pos:start="183:33" pos:end="183:36">size</name> <operator pos:start="183:38" pos:end="183:39">&gt;=</operator> <name pos:start="183:41" pos:end="183:61">FF_MAX_EXTRADATA_SIZE</name></expr>)</condition> <block pos:start="183:64" pos:end="191:17">{<block_content pos:start="185:21" pos:end="189:30">

                    <expr_stmt pos:start="185:21" pos:end="185:81"><expr pos:start="185:21" pos:end="185:80"><call pos:start="185:21" pos:end="185:80"><name pos:start="185:21" pos:end="185:26">av_log</name><argument_list pos:start="185:27" pos:end="185:80">(<argument pos:start="185:28" pos:end="185:28"><expr pos:start="185:28" pos:end="185:28"><name pos:start="185:28" pos:end="185:28">s</name></expr></argument>, <argument pos:start="185:31" pos:end="185:42"><expr pos:start="185:31" pos:end="185:42"><name pos:start="185:31" pos:end="185:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:45" pos:end="185:73"><expr pos:start="185:45" pos:end="185:73"><literal type="string" pos:start="185:45" pos:end="185:73">"Invalid extradata size %d\n"</literal></expr></argument>, <argument pos:start="185:76" pos:end="185:79"><expr pos:start="185:76" pos:end="185:79"><name pos:start="185:76" pos:end="185:79">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="187:21" pos:end="187:46"><expr pos:start="187:21" pos:end="187:45"><name pos:start="187:21" pos:end="187:23">ret</name> <operator pos:start="187:25" pos:end="187:25">=</operator> <name pos:start="187:27" pos:end="187:45">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                    <goto pos:start="189:21" pos:end="189:30">goto <name pos:start="189:26" pos:end="189:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:86"><expr pos:start="193:17" pos:end="193:85"><name pos:start="193:17" pos:end="193:35"><name pos:start="193:17" pos:end="193:24">codecpar</name><operator pos:start="193:25" pos:end="193:26">-&gt;</operator><name pos:start="193:27" pos:end="193:35">extradata</name></name> <operator pos:start="193:37" pos:end="193:37">=</operator> <call pos:start="193:39" pos:end="193:85"><name pos:start="193:39" pos:end="193:48">av_mallocz</name><argument_list pos:start="193:49" pos:end="193:85">(<argument pos:start="193:50" pos:end="193:84"><expr pos:start="193:50" pos:end="193:84"><name pos:start="193:50" pos:end="193:53">size</name> <operator pos:start="193:55" pos:end="193:55">+</operator> <name pos:start="193:57" pos:end="193:84">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="195:17" pos:end="197:43"><if pos:start="195:17" pos:end="197:43">if <condition pos:start="195:20" pos:end="195:41">(<expr pos:start="195:21" pos:end="195:40"><operator pos:start="195:21" pos:end="195:21">!</operator><name pos:start="195:22" pos:end="195:40"><name pos:start="195:22" pos:end="195:29">codecpar</name><operator pos:start="195:30" pos:end="195:31">-&gt;</operator><name pos:start="195:32" pos:end="195:40">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="197:21" pos:end="197:43"><block_content pos:start="197:21" pos:end="197:43">

                    <return pos:start="197:21" pos:end="197:43">return <expr pos:start="197:28" pos:end="197:42"><call pos:start="197:28" pos:end="197:42"><name pos:start="197:28" pos:end="197:34">AVERROR</name><argument_list pos:start="197:35" pos:end="197:42">(<argument pos:start="197:36" pos:end="197:41"><expr pos:start="197:36" pos:end="197:41"><name pos:start="197:36" pos:end="197:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:48"><expr pos:start="199:17" pos:end="199:47"><name pos:start="199:17" pos:end="199:40"><name pos:start="199:17" pos:end="199:24">codecpar</name><operator pos:start="199:25" pos:end="199:26">-&gt;</operator><name pos:start="199:27" pos:end="199:40">extradata_size</name></name> <operator pos:start="199:42" pos:end="199:42">=</operator> <name pos:start="199:44" pos:end="199:47">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:57"><expr pos:start="201:17" pos:end="201:56"><call pos:start="201:17" pos:end="201:56"><name pos:start="201:17" pos:end="201:25">avio_read</name><argument_list pos:start="201:26" pos:end="201:56">(<argument pos:start="201:27" pos:end="201:28"><expr pos:start="201:27" pos:end="201:28"><name pos:start="201:27" pos:end="201:28">pb</name></expr></argument>, <argument pos:start="201:31" pos:end="201:49"><expr pos:start="201:31" pos:end="201:49"><name pos:start="201:31" pos:end="201:49"><name pos:start="201:31" pos:end="201:38">codecpar</name><operator pos:start="201:39" pos:end="201:40">-&gt;</operator><name pos:start="201:41" pos:end="201:49">extradata</name></name></expr></argument>, <argument pos:start="201:52" pos:end="201:55"><expr pos:start="201:52" pos:end="201:55"><name pos:start="201:52" pos:end="201:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="205:13" pos:end="205:18">break;</break>

        <case pos:start="207:9" pos:end="207:41">case <expr pos:start="207:14" pos:end="207:40"><call pos:start="207:14" pos:end="207:40"><name pos:start="207:14" pos:end="207:20">MKBETAG</name><argument_list pos:start="207:21" pos:end="207:40">(<argument pos:start="207:22" pos:end="207:24"><expr pos:start="207:22" pos:end="207:24"><literal type="char" pos:start="207:22" pos:end="207:24">'S'</literal></expr></argument>, <argument pos:start="207:27" pos:end="207:29"><expr pos:start="207:27" pos:end="207:29"><literal type="char" pos:start="207:27" pos:end="207:29">'T'</literal></expr></argument>, <argument pos:start="207:32" pos:end="207:34"><expr pos:start="207:32" pos:end="207:34"><literal type="char" pos:start="207:32" pos:end="207:34">'V'</literal></expr></argument>, <argument pos:start="207:37" pos:end="207:39"><expr pos:start="207:37" pos:end="207:39"><literal type="char" pos:start="207:37" pos:end="207:39">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="209:13" pos:end="215:13"><if pos:start="209:13" pos:end="215:13">if <condition pos:start="209:16" pos:end="209:25">(<expr pos:start="209:17" pos:end="209:24"><name pos:start="209:17" pos:end="209:22">f_stvi</name><operator pos:start="209:23" pos:end="209:24">++</operator></expr>)</condition> <block pos:start="209:27" pos:end="215:13">{<block_content pos:start="211:17" pos:end="213:26">

                <expr_stmt pos:start="211:17" pos:end="211:38"><expr pos:start="211:17" pos:end="211:37"><name pos:start="211:17" pos:end="211:19">ret</name> <operator pos:start="211:21" pos:end="211:21">=</operator> <call pos:start="211:23" pos:end="211:37"><name pos:start="211:23" pos:end="211:29">AVERROR</name><argument_list pos:start="211:30" pos:end="211:37">(<argument pos:start="211:31" pos:end="211:36"><expr pos:start="211:31" pos:end="211:36"><name pos:start="211:31" pos:end="211:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="213:17" pos:end="213:26">goto <name pos:start="213:22" pos:end="213:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:49"><expr pos:start="217:13" pos:end="217:48"><name pos:start="217:13" pos:end="217:32"><name pos:start="217:13" pos:end="217:17">codec</name><operator pos:start="217:18" pos:end="217:19">-&gt;</operator><name pos:start="217:20" pos:end="217:28">time_base</name><operator pos:start="217:29" pos:end="217:29">.</operator><name pos:start="217:30" pos:end="217:32">num</name></name> <operator pos:start="217:34" pos:end="217:34">=</operator> <call pos:start="217:36" pos:end="217:48"><name pos:start="217:36" pos:end="217:44">avio_rb32</name><argument_list pos:start="217:45" pos:end="217:48">(<argument pos:start="217:46" pos:end="217:47"><expr pos:start="217:46" pos:end="217:47"><name pos:start="217:46" pos:end="217:47">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:49"><expr pos:start="219:13" pos:end="219:48"><name pos:start="219:13" pos:end="219:32"><name pos:start="219:13" pos:end="219:17">codec</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:28">time_base</name><operator pos:start="219:29" pos:end="219:29">.</operator><name pos:start="219:30" pos:end="219:32">den</name></name> <operator pos:start="219:34" pos:end="219:34">=</operator> <call pos:start="219:36" pos:end="219:48"><name pos:start="219:36" pos:end="219:44">avio_rb32</name><argument_list pos:start="219:45" pos:end="219:48">(<argument pos:start="219:46" pos:end="219:47"><expr pos:start="219:46" pos:end="219:47"><name pos:start="219:46" pos:end="219:47">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="221:13" pos:end="231:13"><if pos:start="221:13" pos:end="231:13">if <condition pos:start="221:16" pos:end="221:71">(<expr pos:start="221:17" pos:end="221:70"><name pos:start="221:17" pos:end="221:36"><name pos:start="221:17" pos:end="221:21">codec</name><operator pos:start="221:22" pos:end="221:23">-&gt;</operator><name pos:start="221:24" pos:end="221:32">time_base</name><operator pos:start="221:33" pos:end="221:33">.</operator><name pos:start="221:34" pos:end="221:36">num</name></name> <operator pos:start="221:38" pos:end="221:39">&lt;=</operator> <literal type="number" pos:start="221:41" pos:end="221:41">0</literal> <operator pos:start="221:43" pos:end="221:44">||</operator> <name pos:start="221:46" pos:end="221:65"><name pos:start="221:46" pos:end="221:50">codec</name><operator pos:start="221:51" pos:end="221:52">-&gt;</operator><name pos:start="221:53" pos:end="221:61">time_base</name><operator pos:start="221:62" pos:end="221:62">.</operator><name pos:start="221:63" pos:end="221:65">den</name></name> <operator pos:start="221:67" pos:end="221:68">&lt;=</operator> <literal type="number" pos:start="221:70" pos:end="221:70">0</literal></expr>)</condition> <block pos:start="221:73" pos:end="231:13">{<block_content pos:start="223:17" pos:end="229:26">

                <expr_stmt pos:start="223:17" pos:end="225:67"><expr pos:start="223:17" pos:end="225:66"><call pos:start="223:17" pos:end="225:66"><name pos:start="223:17" pos:end="223:22">av_log</name><argument_list pos:start="223:23" pos:end="225:66">(<argument pos:start="223:24" pos:end="223:24"><expr pos:start="223:24" pos:end="223:24"><name pos:start="223:24" pos:end="223:24">s</name></expr></argument>, <argument pos:start="223:27" pos:end="223:38"><expr pos:start="223:27" pos:end="223:38"><name pos:start="223:27" pos:end="223:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="223:41" pos:end="223:67"><expr pos:start="223:41" pos:end="223:67"><literal type="string" pos:start="223:41" pos:end="223:67">"Invalid time base %d/%d\n"</literal></expr></argument>,

                       <argument pos:start="225:24" pos:end="225:43"><expr pos:start="225:24" pos:end="225:43"><name pos:start="225:24" pos:end="225:43"><name pos:start="225:24" pos:end="225:28">codec</name><operator pos:start="225:29" pos:end="225:30">-&gt;</operator><name pos:start="225:31" pos:end="225:39">time_base</name><operator pos:start="225:40" pos:end="225:40">.</operator><name pos:start="225:41" pos:end="225:43">num</name></name></expr></argument>, <argument pos:start="225:46" pos:end="225:65"><expr pos:start="225:46" pos:end="225:65"><name pos:start="225:46" pos:end="225:65"><name pos:start="225:46" pos:end="225:50">codec</name><operator pos:start="225:51" pos:end="225:52">-&gt;</operator><name pos:start="225:53" pos:end="225:61">time_base</name><operator pos:start="225:62" pos:end="225:62">.</operator><name pos:start="225:63" pos:end="225:65">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:42"><expr pos:start="227:17" pos:end="227:41"><name pos:start="227:17" pos:end="227:19">ret</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <name pos:start="227:23" pos:end="227:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="229:17" pos:end="229:26">goto <name pos:start="229:22" pos:end="229:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:44"><expr pos:start="233:13" pos:end="233:43"><name pos:start="233:13" pos:end="233:27"><name pos:start="233:13" pos:end="233:20">codecpar</name><operator pos:start="233:21" pos:end="233:22">-&gt;</operator><name pos:start="233:23" pos:end="233:27">width</name></name> <operator pos:start="233:29" pos:end="233:29">=</operator> <call pos:start="233:31" pos:end="233:43"><name pos:start="233:31" pos:end="233:39">avio_rb16</name><argument_list pos:start="233:40" pos:end="233:43">(<argument pos:start="233:41" pos:end="233:42"><expr pos:start="233:41" pos:end="233:42"><name pos:start="233:41" pos:end="233:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:45"><expr pos:start="235:13" pos:end="235:44"><name pos:start="235:13" pos:end="235:28"><name pos:start="235:13" pos:end="235:20">codecpar</name><operator pos:start="235:21" pos:end="235:22">-&gt;</operator><name pos:start="235:23" pos:end="235:28">height</name></name> <operator pos:start="235:30" pos:end="235:30">=</operator> <call pos:start="235:32" pos:end="235:44"><name pos:start="235:32" pos:end="235:40">avio_rb16</name><argument_list pos:start="235:41" pos:end="235:44">(<argument pos:start="235:42" pos:end="235:43"><expr pos:start="235:42" pos:end="235:43"><name pos:start="235:42" pos:end="235:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:79"><expr pos:start="237:13" pos:end="237:78"><name pos:start="237:13" pos:end="237:15">ret</name> <operator pos:start="237:17" pos:end="237:17">=</operator> <call pos:start="237:19" pos:end="237:78"><name pos:start="237:19" pos:end="237:37">av_image_check_size</name><argument_list pos:start="237:38" pos:end="237:78">(<argument pos:start="237:39" pos:end="237:53"><expr pos:start="237:39" pos:end="237:53"><name pos:start="237:39" pos:end="237:53"><name pos:start="237:39" pos:end="237:46">codecpar</name><operator pos:start="237:47" pos:end="237:48">-&gt;</operator><name pos:start="237:49" pos:end="237:53">width</name></name></expr></argument>, <argument pos:start="237:56" pos:end="237:71"><expr pos:start="237:56" pos:end="237:71"><name pos:start="237:56" pos:end="237:71"><name pos:start="237:56" pos:end="237:63">codecpar</name><operator pos:start="237:64" pos:end="237:65">-&gt;</operator><name pos:start="237:66" pos:end="237:71">height</name></name></expr></argument>, <argument pos:start="237:74" pos:end="237:74"><expr pos:start="237:74" pos:end="237:74"><literal type="number" pos:start="237:74" pos:end="237:74">0</literal></expr></argument>, <argument pos:start="237:77" pos:end="237:77"><expr pos:start="237:77" pos:end="237:77"><name pos:start="237:77" pos:end="237:77">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="239:13" pos:end="241:26"><if pos:start="239:13" pos:end="241:26">if <condition pos:start="239:16" pos:end="239:24">(<expr pos:start="239:17" pos:end="239:23"><name pos:start="239:17" pos:end="239:19">ret</name> <operator pos:start="239:21" pos:end="239:21">&lt;</operator> <literal type="number" pos:start="239:23" pos:end="239:23">0</literal></expr>)</condition><block type="pseudo" pos:start="241:17" pos:end="241:26"><block_content pos:start="241:17" pos:end="241:26">

                <goto pos:start="241:17" pos:end="241:26">goto <name pos:start="241:22" pos:end="241:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:26"><expr pos:start="243:13" pos:end="243:25"><call pos:start="243:13" pos:end="243:25"><name pos:start="243:13" pos:end="243:21">avio_rb16</name><argument_list pos:start="243:22" pos:end="243:25">(<argument pos:start="243:23" pos:end="243:24"><expr pos:start="243:23" pos:end="243:24"><name pos:start="243:23" pos:end="243:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="243:28" pos:end="243:38">// gop_size</comment>

            <expr_stmt pos:start="245:13" pos:end="245:45"><expr pos:start="245:13" pos:end="245:44"><name pos:start="245:13" pos:end="245:28"><name pos:start="245:13" pos:end="245:20">codecpar</name><operator pos:start="245:21" pos:end="245:22">-&gt;</operator><name pos:start="245:23" pos:end="245:28">format</name></name> <operator pos:start="245:30" pos:end="245:30">=</operator> <call pos:start="245:32" pos:end="245:44"><name pos:start="245:32" pos:end="245:40">avio_rb32</name><argument_list pos:start="245:41" pos:end="245:44">(<argument pos:start="245:42" pos:end="245:43"><expr pos:start="245:42" pos:end="245:43"><name pos:start="245:42" pos:end="245:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="247:13" pos:end="255:13"><if pos:start="247:13" pos:end="255:13">if <condition pos:start="247:16" pos:end="247:55">(<expr pos:start="247:17" pos:end="247:54"><operator pos:start="247:17" pos:end="247:17">!</operator><call pos:start="247:18" pos:end="247:54"><name pos:start="247:18" pos:end="247:36">av_pix_fmt_desc_get</name><argument_list pos:start="247:37" pos:end="247:54">(<argument pos:start="247:38" pos:end="247:53"><expr pos:start="247:38" pos:end="247:53"><name pos:start="247:38" pos:end="247:53"><name pos:start="247:38" pos:end="247:45">codecpar</name><operator pos:start="247:46" pos:end="247:47">-&gt;</operator><name pos:start="247:48" pos:end="247:53">format</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="247:57" pos:end="255:13">{<block_content pos:start="249:17" pos:end="253:26">

                <expr_stmt pos:start="249:17" pos:end="249:86"><expr pos:start="249:17" pos:end="249:85"><call pos:start="249:17" pos:end="249:85"><name pos:start="249:17" pos:end="249:22">av_log</name><argument_list pos:start="249:23" pos:end="249:85">(<argument pos:start="249:24" pos:end="249:24"><expr pos:start="249:24" pos:end="249:24"><name pos:start="249:24" pos:end="249:24">s</name></expr></argument>, <argument pos:start="249:27" pos:end="249:38"><expr pos:start="249:27" pos:end="249:38"><name pos:start="249:27" pos:end="249:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="249:41" pos:end="249:66"><expr pos:start="249:41" pos:end="249:66"><literal type="string" pos:start="249:41" pos:end="249:66">"Invalid pix fmt id: %d\n"</literal></expr></argument>, <argument pos:start="249:69" pos:end="249:84"><expr pos:start="249:69" pos:end="249:84"><name pos:start="249:69" pos:end="249:84"><name pos:start="249:69" pos:end="249:76">codecpar</name><operator pos:start="249:77" pos:end="249:78">-&gt;</operator><name pos:start="249:79" pos:end="249:84">format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:51"><expr pos:start="251:17" pos:end="251:50"><name pos:start="251:17" pos:end="251:32"><name pos:start="251:17" pos:end="251:24">codecpar</name><operator pos:start="251:25" pos:end="251:26">-&gt;</operator><name pos:start="251:27" pos:end="251:32">format</name></name> <operator pos:start="251:34" pos:end="251:34">=</operator> <name pos:start="251:36" pos:end="251:50">AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

                <goto pos:start="253:17" pos:end="253:26">goto <name pos:start="253:22" pos:end="253:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:24"><expr pos:start="257:13" pos:end="257:23"><call pos:start="257:13" pos:end="257:23"><name pos:start="257:13" pos:end="257:19">avio_r8</name><argument_list pos:start="257:20" pos:end="257:23">(<argument pos:start="257:21" pos:end="257:22"><expr pos:start="257:21" pos:end="257:22"><name pos:start="257:21" pos:end="257:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="257:28" pos:end="257:34">// qmin</comment>

            <expr_stmt pos:start="259:13" pos:end="259:24"><expr pos:start="259:13" pos:end="259:23"><call pos:start="259:13" pos:end="259:23"><name pos:start="259:13" pos:end="259:19">avio_r8</name><argument_list pos:start="259:20" pos:end="259:23">(<argument pos:start="259:21" pos:end="259:22"><expr pos:start="259:21" pos:end="259:22"><name pos:start="259:21" pos:end="259:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="259:28" pos:end="259:34">// qmax</comment>

            <expr_stmt pos:start="261:13" pos:end="261:24"><expr pos:start="261:13" pos:end="261:23"><call pos:start="261:13" pos:end="261:23"><name pos:start="261:13" pos:end="261:19">avio_r8</name><argument_list pos:start="261:20" pos:end="261:23">(<argument pos:start="261:21" pos:end="261:22"><expr pos:start="261:21" pos:end="261:22"><name pos:start="261:21" pos:end="261:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="261:28" pos:end="261:39">// max_qdiff</comment>

            <expr_stmt pos:start="263:13" pos:end="263:26"><expr pos:start="263:13" pos:end="263:25"><call pos:start="263:13" pos:end="263:25"><name pos:start="263:13" pos:end="263:21">avio_rb16</name><argument_list pos:start="263:22" pos:end="263:25">(<argument pos:start="263:23" pos:end="263:24"><expr pos:start="263:23" pos:end="263:24"><name pos:start="263:23" pos:end="263:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="263:28" pos:end="263:49">// qcompress / 10000.0</comment>

            <expr_stmt pos:start="265:13" pos:end="265:26"><expr pos:start="265:13" pos:end="265:25"><call pos:start="265:13" pos:end="265:25"><name pos:start="265:13" pos:end="265:21">avio_rb16</name><argument_list pos:start="265:22" pos:end="265:25">(<argument pos:start="265:23" pos:end="265:24"><expr pos:start="265:23" pos:end="265:24"><name pos:start="265:23" pos:end="265:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="265:28" pos:end="265:45">// qblur / 10000.0</comment>

            <expr_stmt pos:start="267:13" pos:end="267:26"><expr pos:start="267:13" pos:end="267:25"><call pos:start="267:13" pos:end="267:25"><name pos:start="267:13" pos:end="267:21">avio_rb32</name><argument_list pos:start="267:22" pos:end="267:25">(<argument pos:start="267:23" pos:end="267:24"><expr pos:start="267:23" pos:end="267:24"><name pos:start="267:23" pos:end="267:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="267:28" pos:end="267:48">// bit_rate_tolerance</comment>

            <expr_stmt pos:start="269:13" pos:end="269:68"><expr pos:start="269:13" pos:end="269:67"><call pos:start="269:13" pos:end="269:67"><name pos:start="269:13" pos:end="269:24">avio_get_str</name><argument_list pos:start="269:25" pos:end="269:67">(<argument pos:start="269:26" pos:end="269:27"><expr pos:start="269:26" pos:end="269:27"><name pos:start="269:26" pos:end="269:27">pb</name></expr></argument>, <argument pos:start="269:30" pos:end="269:36"><expr pos:start="269:30" pos:end="269:36"><name pos:start="269:30" pos:end="269:36">INT_MAX</name></expr></argument>, <argument pos:start="269:39" pos:end="269:47"><expr pos:start="269:39" pos:end="269:47"><name pos:start="269:39" pos:end="269:47">rc_eq_buf</name></expr></argument>, <argument pos:start="269:50" pos:end="269:66"><expr pos:start="269:50" pos:end="269:66"><sizeof pos:start="269:50" pos:end="269:66">sizeof<argument_list pos:start="269:56" pos:end="269:66">(<argument pos:start="269:57" pos:end="269:65"><expr pos:start="269:57" pos:end="269:65"><name pos:start="269:57" pos:end="269:65">rc_eq_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="273:13" pos:end="273:26"><expr pos:start="273:13" pos:end="273:25"><call pos:start="273:13" pos:end="273:25"><name pos:start="273:13" pos:end="273:21">avio_rb32</name><argument_list pos:start="273:22" pos:end="273:25">(<argument pos:start="273:23" pos:end="273:24"><expr pos:start="273:23" pos:end="273:24"><name pos:start="273:23" pos:end="273:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="273:28" pos:end="273:41">// rc_max_rate</comment>

            <expr_stmt pos:start="275:13" pos:end="275:26"><expr pos:start="275:13" pos:end="275:25"><call pos:start="275:13" pos:end="275:25"><name pos:start="275:13" pos:end="275:21">avio_rb32</name><argument_list pos:start="275:22" pos:end="275:25">(<argument pos:start="275:23" pos:end="275:24"><expr pos:start="275:23" pos:end="275:24"><name pos:start="275:23" pos:end="275:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="275:28" pos:end="275:41">// rc_min_rate</comment>

            <expr_stmt pos:start="277:13" pos:end="277:26"><expr pos:start="277:13" pos:end="277:25"><call pos:start="277:13" pos:end="277:25"><name pos:start="277:13" pos:end="277:21">avio_rb32</name><argument_list pos:start="277:22" pos:end="277:25">(<argument pos:start="277:23" pos:end="277:24"><expr pos:start="277:23" pos:end="277:24"><name pos:start="277:23" pos:end="277:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="277:28" pos:end="277:44">// rc_buffer_size</comment>

            <expr_stmt pos:start="279:13" pos:end="279:26"><expr pos:start="279:13" pos:end="279:25"><call pos:start="279:13" pos:end="279:25"><name pos:start="279:13" pos:end="279:21">avio_rb64</name><argument_list pos:start="279:22" pos:end="279:25">(<argument pos:start="279:23" pos:end="279:24"><expr pos:start="279:23" pos:end="279:24"><name pos:start="279:23" pos:end="279:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="279:28" pos:end="279:44">// i_quant_factor</comment>

            <expr_stmt pos:start="281:13" pos:end="281:26"><expr pos:start="281:13" pos:end="281:25"><call pos:start="281:13" pos:end="281:25"><name pos:start="281:13" pos:end="281:21">avio_rb64</name><argument_list pos:start="281:22" pos:end="281:25">(<argument pos:start="281:23" pos:end="281:24"><expr pos:start="281:23" pos:end="281:24"><name pos:start="281:23" pos:end="281:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="281:28" pos:end="281:44">// b_quant_factor</comment>

            <expr_stmt pos:start="283:13" pos:end="283:26"><expr pos:start="283:13" pos:end="283:25"><call pos:start="283:13" pos:end="283:25"><name pos:start="283:13" pos:end="283:21">avio_rb64</name><argument_list pos:start="283:22" pos:end="283:25">(<argument pos:start="283:23" pos:end="283:24"><expr pos:start="283:23" pos:end="283:24"><name pos:start="283:23" pos:end="283:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="283:28" pos:end="283:44">// i_quant_offset</comment>

            <expr_stmt pos:start="285:13" pos:end="285:26"><expr pos:start="285:13" pos:end="285:25"><call pos:start="285:13" pos:end="285:25"><name pos:start="285:13" pos:end="285:21">avio_rb64</name><argument_list pos:start="285:22" pos:end="285:25">(<argument pos:start="285:23" pos:end="285:24"><expr pos:start="285:23" pos:end="285:24"><name pos:start="285:23" pos:end="285:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="285:28" pos:end="285:44">// b_quant_offset</comment>

            <expr_stmt pos:start="287:13" pos:end="287:26"><expr pos:start="287:13" pos:end="287:25"><call pos:start="287:13" pos:end="287:25"><name pos:start="287:13" pos:end="287:21">avio_rb32</name><argument_list pos:start="287:22" pos:end="287:25">(<argument pos:start="287:23" pos:end="287:24"><expr pos:start="287:23" pos:end="287:24"><name pos:start="287:23" pos:end="287:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="287:28" pos:end="287:38">// dct_algo</comment>

            <expr_stmt pos:start="289:13" pos:end="289:26"><expr pos:start="289:13" pos:end="289:25"><call pos:start="289:13" pos:end="289:25"><name pos:start="289:13" pos:end="289:21">avio_rb32</name><argument_list pos:start="289:22" pos:end="289:25">(<argument pos:start="289:23" pos:end="289:24"><expr pos:start="289:23" pos:end="289:24"><name pos:start="289:23" pos:end="289:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="289:28" pos:end="289:51">// strict_std_compliance</comment>

            <expr_stmt pos:start="291:13" pos:end="291:26"><expr pos:start="291:13" pos:end="291:25"><call pos:start="291:13" pos:end="291:25"><name pos:start="291:13" pos:end="291:21">avio_rb32</name><argument_list pos:start="291:22" pos:end="291:25">(<argument pos:start="291:23" pos:end="291:24"><expr pos:start="291:23" pos:end="291:24"><name pos:start="291:23" pos:end="291:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="291:28" pos:end="291:42">// max_b_frames</comment>

            <expr_stmt pos:start="293:13" pos:end="293:26"><expr pos:start="293:13" pos:end="293:25"><call pos:start="293:13" pos:end="293:25"><name pos:start="293:13" pos:end="293:21">avio_rb32</name><argument_list pos:start="293:22" pos:end="293:25">(<argument pos:start="293:23" pos:end="293:24"><expr pos:start="293:23" pos:end="293:24"><name pos:start="293:23" pos:end="293:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="293:28" pos:end="293:40">// mpeg_quant</comment>

            <expr_stmt pos:start="295:13" pos:end="295:26"><expr pos:start="295:13" pos:end="295:25"><call pos:start="295:13" pos:end="295:25"><name pos:start="295:13" pos:end="295:21">avio_rb32</name><argument_list pos:start="295:22" pos:end="295:25">(<argument pos:start="295:23" pos:end="295:24"><expr pos:start="295:23" pos:end="295:24"><name pos:start="295:23" pos:end="295:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="295:28" pos:end="295:48">// intra_dc_precision</comment>

            <expr_stmt pos:start="297:13" pos:end="297:26"><expr pos:start="297:13" pos:end="297:25"><call pos:start="297:13" pos:end="297:25"><name pos:start="297:13" pos:end="297:21">avio_rb32</name><argument_list pos:start="297:22" pos:end="297:25">(<argument pos:start="297:23" pos:end="297:24"><expr pos:start="297:23" pos:end="297:24"><name pos:start="297:23" pos:end="297:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="297:28" pos:end="297:39">// me_method</comment>

            <expr_stmt pos:start="299:13" pos:end="299:26"><expr pos:start="299:13" pos:end="299:25"><call pos:start="299:13" pos:end="299:25"><name pos:start="299:13" pos:end="299:21">avio_rb32</name><argument_list pos:start="299:22" pos:end="299:25">(<argument pos:start="299:23" pos:end="299:24"><expr pos:start="299:23" pos:end="299:24"><name pos:start="299:23" pos:end="299:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="299:28" pos:end="299:41">// mb_decision</comment>

            <expr_stmt pos:start="301:13" pos:end="301:26"><expr pos:start="301:13" pos:end="301:25"><call pos:start="301:13" pos:end="301:25"><name pos:start="301:13" pos:end="301:21">avio_rb32</name><argument_list pos:start="301:22" pos:end="301:25">(<argument pos:start="301:23" pos:end="301:24"><expr pos:start="301:23" pos:end="301:24"><name pos:start="301:23" pos:end="301:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="301:28" pos:end="301:41">// nsse_weight</comment>

            <expr_stmt pos:start="303:13" pos:end="303:26"><expr pos:start="303:13" pos:end="303:25"><call pos:start="303:13" pos:end="303:25"><name pos:start="303:13" pos:end="303:21">avio_rb32</name><argument_list pos:start="303:22" pos:end="303:25">(<argument pos:start="303:23" pos:end="303:24"><expr pos:start="303:23" pos:end="303:24"><name pos:start="303:23" pos:end="303:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="303:28" pos:end="303:44">// frame_skip_cmp</comment>

            <expr_stmt pos:start="305:13" pos:end="305:26"><expr pos:start="305:13" pos:end="305:25"><call pos:start="305:13" pos:end="305:25"><name pos:start="305:13" pos:end="305:21">avio_rb64</name><argument_list pos:start="305:22" pos:end="305:25">(<argument pos:start="305:23" pos:end="305:24"><expr pos:start="305:23" pos:end="305:24"><name pos:start="305:23" pos:end="305:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="305:28" pos:end="305:52">// rc_buffer_aggressivity</comment>

            <expr_stmt pos:start="307:13" pos:end="307:48"><expr pos:start="307:13" pos:end="307:47"><name pos:start="307:13" pos:end="307:31"><name pos:start="307:13" pos:end="307:20">codecpar</name><operator pos:start="307:21" pos:end="307:22">-&gt;</operator><name pos:start="307:23" pos:end="307:31">codec_tag</name></name> <operator pos:start="307:33" pos:end="307:33">=</operator> <call pos:start="307:35" pos:end="307:47"><name pos:start="307:35" pos:end="307:43">avio_rb32</name><argument_list pos:start="307:44" pos:end="307:47">(<argument pos:start="307:45" pos:end="307:46"><expr pos:start="307:45" pos:end="307:46"><name pos:start="307:45" pos:end="307:46">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:24"><expr pos:start="309:13" pos:end="309:23"><call pos:start="309:13" pos:end="309:23"><name pos:start="309:13" pos:end="309:19">avio_r8</name><argument_list pos:start="309:20" pos:end="309:23">(<argument pos:start="309:21" pos:end="309:22"><expr pos:start="309:21" pos:end="309:22"><name pos:start="309:21" pos:end="309:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="309:28" pos:end="309:42">// thread_count</comment>

            <expr_stmt pos:start="311:13" pos:end="311:26"><expr pos:start="311:13" pos:end="311:25"><call pos:start="311:13" pos:end="311:25"><name pos:start="311:13" pos:end="311:21">avio_rb32</name><argument_list pos:start="311:22" pos:end="311:25">(<argument pos:start="311:23" pos:end="311:24"><expr pos:start="311:23" pos:end="311:24"><name pos:start="311:23" pos:end="311:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="311:28" pos:end="311:40">// coder_type</comment>

            <expr_stmt pos:start="313:13" pos:end="313:26"><expr pos:start="313:13" pos:end="313:25"><call pos:start="313:13" pos:end="313:25"><name pos:start="313:13" pos:end="313:21">avio_rb32</name><argument_list pos:start="313:22" pos:end="313:25">(<argument pos:start="313:23" pos:end="313:24"><expr pos:start="313:23" pos:end="313:24"><name pos:start="313:23" pos:end="313:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="313:28" pos:end="313:36">// me_cmp</comment>

            <expr_stmt pos:start="315:13" pos:end="315:26"><expr pos:start="315:13" pos:end="315:25"><call pos:start="315:13" pos:end="315:25"><name pos:start="315:13" pos:end="315:21">avio_rb32</name><argument_list pos:start="315:22" pos:end="315:25">(<argument pos:start="315:23" pos:end="315:24"><expr pos:start="315:23" pos:end="315:24"><name pos:start="315:23" pos:end="315:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="315:28" pos:end="315:47">// me_subpel_quality</comment>

            <expr_stmt pos:start="317:13" pos:end="317:26"><expr pos:start="317:13" pos:end="317:25"><call pos:start="317:13" pos:end="317:25"><name pos:start="317:13" pos:end="317:21">avio_rb32</name><argument_list pos:start="317:22" pos:end="317:25">(<argument pos:start="317:23" pos:end="317:24"><expr pos:start="317:23" pos:end="317:24"><name pos:start="317:23" pos:end="317:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="317:28" pos:end="317:38">// me_range</comment>

            <expr_stmt pos:start="319:13" pos:end="319:26"><expr pos:start="319:13" pos:end="319:25"><call pos:start="319:13" pos:end="319:25"><name pos:start="319:13" pos:end="319:21">avio_rb32</name><argument_list pos:start="319:22" pos:end="319:25">(<argument pos:start="319:23" pos:end="319:24"><expr pos:start="319:23" pos:end="319:24"><name pos:start="319:23" pos:end="319:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="319:28" pos:end="319:40">// keyint_min</comment>

            <expr_stmt pos:start="321:13" pos:end="321:26"><expr pos:start="321:13" pos:end="321:25"><call pos:start="321:13" pos:end="321:25"><name pos:start="321:13" pos:end="321:21">avio_rb32</name><argument_list pos:start="321:22" pos:end="321:25">(<argument pos:start="321:23" pos:end="321:24"><expr pos:start="321:23" pos:end="321:24"><name pos:start="321:23" pos:end="321:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="321:28" pos:end="321:51">// scenechange_threshold</comment>

            <expr_stmt pos:start="323:13" pos:end="323:26"><expr pos:start="323:13" pos:end="323:25"><call pos:start="323:13" pos:end="323:25"><name pos:start="323:13" pos:end="323:21">avio_rb32</name><argument_list pos:start="323:22" pos:end="323:25">(<argument pos:start="323:23" pos:end="323:24"><expr pos:start="323:23" pos:end="323:24"><name pos:start="323:23" pos:end="323:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="323:28" pos:end="323:46">// b_frame_strategy</comment>

            <expr_stmt pos:start="325:13" pos:end="325:26"><expr pos:start="325:13" pos:end="325:25"><call pos:start="325:13" pos:end="325:25"><name pos:start="325:13" pos:end="325:21">avio_rb64</name><argument_list pos:start="325:22" pos:end="325:25">(<argument pos:start="325:23" pos:end="325:24"><expr pos:start="325:23" pos:end="325:24"><name pos:start="325:23" pos:end="325:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="325:28" pos:end="325:39">// qcompress</comment>

            <expr_stmt pos:start="327:13" pos:end="327:26"><expr pos:start="327:13" pos:end="327:25"><call pos:start="327:13" pos:end="327:25"><name pos:start="327:13" pos:end="327:21">avio_rb64</name><argument_list pos:start="327:22" pos:end="327:25">(<argument pos:start="327:23" pos:end="327:24"><expr pos:start="327:23" pos:end="327:24"><name pos:start="327:23" pos:end="327:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="327:28" pos:end="327:35">// qblur</comment>

            <expr_stmt pos:start="329:13" pos:end="329:26"><expr pos:start="329:13" pos:end="329:25"><call pos:start="329:13" pos:end="329:25"><name pos:start="329:13" pos:end="329:21">avio_rb32</name><argument_list pos:start="329:22" pos:end="329:25">(<argument pos:start="329:23" pos:end="329:24"><expr pos:start="329:23" pos:end="329:24"><name pos:start="329:23" pos:end="329:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="329:28" pos:end="329:39">// max_qdiff</comment>

            <expr_stmt pos:start="331:13" pos:end="331:26"><expr pos:start="331:13" pos:end="331:25"><call pos:start="331:13" pos:end="331:25"><name pos:start="331:13" pos:end="331:21">avio_rb32</name><argument_list pos:start="331:22" pos:end="331:25">(<argument pos:start="331:23" pos:end="331:24"><expr pos:start="331:23" pos:end="331:24"><name pos:start="331:23" pos:end="331:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="331:28" pos:end="331:34">// refs</comment>

            <break pos:start="333:13" pos:end="333:18">break;</break>

        <case pos:start="335:9" pos:end="335:41">case <expr pos:start="335:14" pos:end="335:40"><call pos:start="335:14" pos:end="335:40"><name pos:start="335:14" pos:end="335:20">MKBETAG</name><argument_list pos:start="335:21" pos:end="335:40">(<argument pos:start="335:22" pos:end="335:24"><expr pos:start="335:22" pos:end="335:24"><literal type="char" pos:start="335:22" pos:end="335:24">'S'</literal></expr></argument>, <argument pos:start="335:27" pos:end="335:29"><expr pos:start="335:27" pos:end="335:29"><literal type="char" pos:start="335:27" pos:end="335:29">'T'</literal></expr></argument>, <argument pos:start="335:32" pos:end="335:34"><expr pos:start="335:32" pos:end="335:34"><literal type="char" pos:start="335:32" pos:end="335:34">'A'</literal></expr></argument>, <argument pos:start="335:37" pos:end="335:39"><expr pos:start="335:37" pos:end="335:39"><literal type="char" pos:start="335:37" pos:end="335:39">'U'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="337:13" pos:end="343:13"><if pos:start="337:13" pos:end="343:13">if <condition pos:start="337:16" pos:end="337:25">(<expr pos:start="337:17" pos:end="337:24"><name pos:start="337:17" pos:end="337:22">f_stau</name><operator pos:start="337:23" pos:end="337:24">++</operator></expr>)</condition> <block pos:start="337:27" pos:end="343:13">{<block_content pos:start="339:17" pos:end="341:26">

                <expr_stmt pos:start="339:17" pos:end="339:38"><expr pos:start="339:17" pos:end="339:37"><name pos:start="339:17" pos:end="339:19">ret</name> <operator pos:start="339:21" pos:end="339:21">=</operator> <call pos:start="339:23" pos:end="339:37"><name pos:start="339:23" pos:end="339:29">AVERROR</name><argument_list pos:start="339:30" pos:end="339:37">(<argument pos:start="339:31" pos:end="339:36"><expr pos:start="339:31" pos:end="339:36"><name pos:start="339:31" pos:end="339:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="341:17" pos:end="341:26">goto <name pos:start="341:22" pos:end="341:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:50"><expr pos:start="345:13" pos:end="345:49"><name pos:start="345:13" pos:end="345:33"><name pos:start="345:13" pos:end="345:20">codecpar</name><operator pos:start="345:21" pos:end="345:22">-&gt;</operator><name pos:start="345:23" pos:end="345:33">sample_rate</name></name> <operator pos:start="345:35" pos:end="345:35">=</operator> <call pos:start="345:37" pos:end="345:49"><name pos:start="345:37" pos:end="345:45">avio_rb32</name><argument_list pos:start="345:46" pos:end="345:49">(<argument pos:start="345:47" pos:end="345:48"><expr pos:start="345:47" pos:end="345:48"><name pos:start="345:47" pos:end="345:48">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro pos:start="347:13" pos:end="347:92"><name pos:start="347:13" pos:end="347:30">VALIDATE_PARAMETER</name><argument_list pos:start="347:31" pos:end="347:92">(<argument pos:start="347:32" pos:end="347:42">sample_rate</argument>, <argument pos:start="347:45" pos:end="347:57"><literal type="string" pos:start="347:45" pos:end="347:57">"sample rate"</literal></argument>,        <argument pos:start="347:67" pos:end="347:91">codecpar-&gt;sample_rate &lt; <literal type="number" pos:start="347:91" pos:end="347:91">0</literal></argument>)</argument_list></macro>

            <expr_stmt pos:start="349:13" pos:end="349:47"><expr pos:start="349:13" pos:end="349:46"><name pos:start="349:13" pos:end="349:30"><name pos:start="349:13" pos:end="349:20">codecpar</name><operator pos:start="349:21" pos:end="349:22">-&gt;</operator><name pos:start="349:23" pos:end="349:30">channels</name></name> <operator pos:start="349:32" pos:end="349:32">=</operator> <call pos:start="349:34" pos:end="349:46"><name pos:start="349:34" pos:end="349:42">avio_rl16</name><argument_list pos:start="349:43" pos:end="349:46">(<argument pos:start="349:44" pos:end="349:45"><expr pos:start="349:44" pos:end="349:45"><name pos:start="349:44" pos:end="349:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro pos:start="351:13" pos:end="351:89"><name pos:start="351:13" pos:end="351:30">VALIDATE_PARAMETER</name><argument_list pos:start="351:31" pos:end="351:89">(<argument pos:start="351:32" pos:end="351:39">channels</argument>,    <argument pos:start="351:45" pos:end="351:64"><literal type="string" pos:start="351:45" pos:end="351:64">"number of channels"</literal></argument>, <argument pos:start="351:67" pos:end="351:88">codecpar-&gt;channels &lt; <literal type="number" pos:start="351:88" pos:end="351:88">0</literal></argument>)</argument_list></macro>

            <expr_stmt pos:start="353:13" pos:end="353:49"><expr pos:start="353:13" pos:end="353:48"><name pos:start="353:13" pos:end="353:32"><name pos:start="353:13" pos:end="353:20">codecpar</name><operator pos:start="353:21" pos:end="353:22">-&gt;</operator><name pos:start="353:23" pos:end="353:32">frame_size</name></name> <operator pos:start="353:34" pos:end="353:34">=</operator> <call pos:start="353:36" pos:end="353:48"><name pos:start="353:36" pos:end="353:44">avio_rl16</name><argument_list pos:start="353:45" pos:end="353:48">(<argument pos:start="353:46" pos:end="353:47"><expr pos:start="353:46" pos:end="353:47"><name pos:start="353:46" pos:end="353:47">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro pos:start="355:13" pos:end="355:91"><name pos:start="355:13" pos:end="355:30">VALIDATE_PARAMETER</name><argument_list pos:start="355:31" pos:end="355:91">(<argument pos:start="355:32" pos:end="355:41">frame_size</argument>,  <argument pos:start="355:45" pos:end="355:56"><literal type="string" pos:start="355:45" pos:end="355:56">"frame size"</literal></argument>,         <argument pos:start="355:67" pos:end="355:90">codecpar-&gt;frame_size &lt; <literal type="number" pos:start="355:90" pos:end="355:90">0</literal></argument>)</argument_list></macro>

            <break pos:start="357:13" pos:end="357:18">break;</break>

        <case pos:start="359:9" pos:end="359:41">case <expr pos:start="359:14" pos:end="359:40"><call pos:start="359:14" pos:end="359:40"><name pos:start="359:14" pos:end="359:20">MKBETAG</name><argument_list pos:start="359:21" pos:end="359:40">(<argument pos:start="359:22" pos:end="359:24"><expr pos:start="359:22" pos:end="359:24"><literal type="char" pos:start="359:22" pos:end="359:24">'C'</literal></expr></argument>, <argument pos:start="359:27" pos:end="359:29"><expr pos:start="359:27" pos:end="359:29"><literal type="char" pos:start="359:27" pos:end="359:29">'P'</literal></expr></argument>, <argument pos:start="359:32" pos:end="359:34"><expr pos:start="359:32" pos:end="359:34"><literal type="char" pos:start="359:32" pos:end="359:34">'R'</literal></expr></argument>, <argument pos:start="359:37" pos:end="359:39"><expr pos:start="359:37" pos:end="359:39"><literal type="char" pos:start="359:37" pos:end="359:39">'V'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="361:13" pos:end="367:13"><if pos:start="361:13" pos:end="367:13">if <condition pos:start="361:16" pos:end="361:25">(<expr pos:start="361:17" pos:end="361:24"><name pos:start="361:17" pos:end="361:22">f_cprv</name><operator pos:start="361:23" pos:end="361:24">++</operator></expr>)</condition> <block pos:start="361:27" pos:end="367:13">{<block_content pos:start="363:17" pos:end="365:26">

                <expr_stmt pos:start="363:17" pos:end="363:38"><expr pos:start="363:17" pos:end="363:37"><name pos:start="363:17" pos:end="363:19">ret</name> <operator pos:start="363:21" pos:end="363:21">=</operator> <call pos:start="363:23" pos:end="363:37"><name pos:start="363:23" pos:end="363:29">AVERROR</name><argument_list pos:start="363:30" pos:end="363:37">(<argument pos:start="363:31" pos:end="363:36"><expr pos:start="363:31" pos:end="363:36"><name pos:start="363:31" pos:end="363:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="365:17" pos:end="365:26">goto <name pos:start="365:22" pos:end="365:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:59"><expr pos:start="369:13" pos:end="369:58"><name pos:start="369:13" pos:end="369:15">enc</name> <operator pos:start="369:17" pos:end="369:17">=</operator> <call pos:start="369:19" pos:end="369:58"><name pos:start="369:19" pos:end="369:38">avcodec_find_encoder</name><argument_list pos:start="369:39" pos:end="369:58">(<argument pos:start="369:40" pos:end="369:57"><expr pos:start="369:40" pos:end="369:57"><name pos:start="369:40" pos:end="369:57"><name pos:start="369:40" pos:end="369:47">codecpar</name><operator pos:start="369:48" pos:end="369:49">-&gt;</operator><name pos:start="369:50" pos:end="369:57">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="371:13" pos:end="389:13"><if pos:start="371:13" pos:end="389:13">if <condition pos:start="371:16" pos:end="371:62">(<expr pos:start="371:17" pos:end="371:61"><name pos:start="371:17" pos:end="371:19">enc</name> <operator pos:start="371:21" pos:end="371:22">&amp;&amp;</operator> <name pos:start="371:24" pos:end="371:42"><name pos:start="371:24" pos:end="371:26">enc</name><operator pos:start="371:27" pos:end="371:28">-&gt;</operator><name pos:start="371:29" pos:end="371:42">priv_data_size</name></name> <operator pos:start="371:44" pos:end="371:45">&amp;&amp;</operator> <name pos:start="371:47" pos:end="371:61"><name pos:start="371:47" pos:end="371:49">enc</name><operator pos:start="371:50" pos:end="371:51">-&gt;</operator><name pos:start="371:52" pos:end="371:61">priv_class</name></name></expr>)</condition> <block pos:start="371:64" pos:end="389:13">{<block_content pos:start="373:17" pos:end="387:30">

                <expr_stmt pos:start="373:17" pos:end="373:45"><expr pos:start="373:17" pos:end="373:44"><name pos:start="373:17" pos:end="373:22">buffer</name> <operator pos:start="373:24" pos:end="373:24">=</operator> <call pos:start="373:26" pos:end="373:44"><name pos:start="373:26" pos:end="373:34">av_malloc</name><argument_list pos:start="373:35" pos:end="373:44">(<argument pos:start="373:36" pos:end="373:43"><expr pos:start="373:36" pos:end="373:43"><name pos:start="373:36" pos:end="373:39">size</name> <operator pos:start="373:41" pos:end="373:41">+</operator> <literal type="number" pos:start="373:43" pos:end="373:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="375:17" pos:end="381:17"><if pos:start="375:17" pos:end="381:17">if <condition pos:start="375:20" pos:end="375:28">(<expr pos:start="375:21" pos:end="375:27"><operator pos:start="375:21" pos:end="375:21">!</operator><name pos:start="375:22" pos:end="375:27">buffer</name></expr>)</condition> <block pos:start="375:30" pos:end="381:17">{<block_content pos:start="377:21" pos:end="379:30">

                    <expr_stmt pos:start="377:21" pos:end="377:42"><expr pos:start="377:21" pos:end="377:41"><name pos:start="377:21" pos:end="377:23">ret</name> <operator pos:start="377:25" pos:end="377:25">=</operator> <call pos:start="377:27" pos:end="377:41"><name pos:start="377:27" pos:end="377:33">AVERROR</name><argument_list pos:start="377:34" pos:end="377:41">(<argument pos:start="377:35" pos:end="377:40"><expr pos:start="377:35" pos:end="377:40"><name pos:start="377:35" pos:end="377:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="379:21" pos:end="379:30">goto <name pos:start="379:26" pos:end="379:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:57"><expr pos:start="383:17" pos:end="383:56"><call pos:start="383:17" pos:end="383:56"><name pos:start="383:17" pos:end="383:28">avio_get_str</name><argument_list pos:start="383:29" pos:end="383:56">(<argument pos:start="383:30" pos:end="383:31"><expr pos:start="383:30" pos:end="383:31"><name pos:start="383:30" pos:end="383:31">pb</name></expr></argument>, <argument pos:start="383:34" pos:end="383:37"><expr pos:start="383:34" pos:end="383:37"><name pos:start="383:34" pos:end="383:37">size</name></expr></argument>, <argument pos:start="383:40" pos:end="383:45"><expr pos:start="383:40" pos:end="383:45"><name pos:start="383:40" pos:end="383:45">buffer</name></expr></argument>, <argument pos:start="383:48" pos:end="383:55"><expr pos:start="383:48" pos:end="383:55"><name pos:start="383:48" pos:end="383:51">size</name> <operator pos:start="383:53" pos:end="383:53">+</operator> <literal type="number" pos:start="383:55" pos:end="383:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="385:17" pos:end="387:30"><if pos:start="385:17" pos:end="387:30">if <condition pos:start="385:20" pos:end="385:82">(<expr pos:start="385:21" pos:end="385:81"><operator pos:start="385:21" pos:end="385:21">(</operator><name pos:start="385:22" pos:end="385:24">ret</name> <operator pos:start="385:26" pos:end="385:26">=</operator> <call pos:start="385:28" pos:end="385:76"><name pos:start="385:28" pos:end="385:63">ffm_append_recommended_configuration</name><argument_list pos:start="385:64" pos:end="385:76">(<argument pos:start="385:65" pos:end="385:66"><expr pos:start="385:65" pos:end="385:66"><name pos:start="385:65" pos:end="385:66">st</name></expr></argument>, <argument pos:start="385:69" pos:end="385:75"><expr pos:start="385:69" pos:end="385:75"><operator pos:start="385:69" pos:end="385:69">&amp;</operator><name pos:start="385:70" pos:end="385:75">buffer</name></expr></argument>)</argument_list></call><operator pos:start="385:77" pos:end="385:77">)</operator> <operator pos:start="385:79" pos:end="385:79">&lt;</operator> <literal type="number" pos:start="385:81" pos:end="385:81">0</literal></expr>)</condition><block type="pseudo" pos:start="387:21" pos:end="387:30"><block_content pos:start="387:21" pos:end="387:30">

                    <goto pos:start="387:21" pos:end="387:30">goto <name pos:start="387:26" pos:end="387:29">fail</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="391:13" pos:end="391:18">break;</break>

        <case pos:start="393:9" pos:end="393:41">case <expr pos:start="393:14" pos:end="393:40"><call pos:start="393:14" pos:end="393:40"><name pos:start="393:14" pos:end="393:20">MKBETAG</name><argument_list pos:start="393:21" pos:end="393:40">(<argument pos:start="393:22" pos:end="393:24"><expr pos:start="393:22" pos:end="393:24"><literal type="char" pos:start="393:22" pos:end="393:24">'S'</literal></expr></argument>, <argument pos:start="393:27" pos:end="393:29"><expr pos:start="393:27" pos:end="393:29"><literal type="char" pos:start="393:27" pos:end="393:29">'2'</literal></expr></argument>, <argument pos:start="393:32" pos:end="393:34"><expr pos:start="393:32" pos:end="393:34"><literal type="char" pos:start="393:32" pos:end="393:34">'V'</literal></expr></argument>, <argument pos:start="393:37" pos:end="393:39"><expr pos:start="393:37" pos:end="393:39"><literal type="char" pos:start="393:37" pos:end="393:39">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="395:13" pos:end="401:13"><if pos:start="395:13" pos:end="401:13">if <condition pos:start="395:16" pos:end="395:34">(<expr pos:start="395:17" pos:end="395:33"><name pos:start="395:17" pos:end="395:22">f_stvi</name><operator pos:start="395:23" pos:end="395:24">++</operator> <operator pos:start="395:26" pos:end="395:27">||</operator> <operator pos:start="395:29" pos:end="395:29">!</operator><name pos:start="395:30" pos:end="395:33">size</name></expr>)</condition> <block pos:start="395:36" pos:end="401:13">{<block_content pos:start="397:17" pos:end="399:26">

                <expr_stmt pos:start="397:17" pos:end="397:38"><expr pos:start="397:17" pos:end="397:37"><name pos:start="397:17" pos:end="397:19">ret</name> <operator pos:start="397:21" pos:end="397:21">=</operator> <call pos:start="397:23" pos:end="397:37"><name pos:start="397:23" pos:end="397:29">AVERROR</name><argument_list pos:start="397:30" pos:end="397:37">(<argument pos:start="397:31" pos:end="397:36"><expr pos:start="397:31" pos:end="397:36"><name pos:start="397:31" pos:end="397:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="399:17" pos:end="399:26">goto <name pos:start="399:22" pos:end="399:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="403:13" pos:end="403:37"><expr pos:start="403:13" pos:end="403:36"><name pos:start="403:13" pos:end="403:18">buffer</name> <operator pos:start="403:20" pos:end="403:20">=</operator> <call pos:start="403:22" pos:end="403:36"><name pos:start="403:22" pos:end="403:30">av_malloc</name><argument_list pos:start="403:31" pos:end="403:36">(<argument pos:start="403:32" pos:end="403:35"><expr pos:start="403:32" pos:end="403:35"><name pos:start="403:32" pos:end="403:35">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="405:13" pos:end="411:13"><if pos:start="405:13" pos:end="411:13">if <condition pos:start="405:16" pos:end="405:24">(<expr pos:start="405:17" pos:end="405:23"><operator pos:start="405:17" pos:end="405:17">!</operator><name pos:start="405:18" pos:end="405:23">buffer</name></expr>)</condition> <block pos:start="405:26" pos:end="411:13">{<block_content pos:start="407:17" pos:end="409:26">

                <expr_stmt pos:start="407:17" pos:end="407:38"><expr pos:start="407:17" pos:end="407:37"><name pos:start="407:17" pos:end="407:19">ret</name> <operator pos:start="407:21" pos:end="407:21">=</operator> <call pos:start="407:23" pos:end="407:37"><name pos:start="407:23" pos:end="407:29">AVERROR</name><argument_list pos:start="407:30" pos:end="407:37">(<argument pos:start="407:31" pos:end="407:36"><expr pos:start="407:31" pos:end="407:36"><name pos:start="407:31" pos:end="407:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="409:17" pos:end="409:26">goto <name pos:start="409:22" pos:end="409:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:52"><expr pos:start="413:13" pos:end="413:51"><call pos:start="413:13" pos:end="413:51"><name pos:start="413:13" pos:end="413:24">avio_get_str</name><argument_list pos:start="413:25" pos:end="413:51">(<argument pos:start="413:26" pos:end="413:27"><expr pos:start="413:26" pos:end="413:27"><name pos:start="413:26" pos:end="413:27">pb</name></expr></argument>, <argument pos:start="413:30" pos:end="413:36"><expr pos:start="413:30" pos:end="413:36"><name pos:start="413:30" pos:end="413:36">INT_MAX</name></expr></argument>, <argument pos:start="413:39" pos:end="413:44"><expr pos:start="413:39" pos:end="413:44"><name pos:start="413:39" pos:end="413:44">buffer</name></expr></argument>, <argument pos:start="413:47" pos:end="413:50"><expr pos:start="413:47" pos:end="413:50"><name pos:start="413:47" pos:end="413:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="415:13" pos:end="415:106">// The lack of AVOptions support in AVCodecParameters makes this back and forth copying needed</comment>

            <expr_stmt pos:start="417:13" pos:end="417:65"><expr pos:start="417:13" pos:end="417:64"><call pos:start="417:13" pos:end="417:64"><name pos:start="417:13" pos:end="417:41">avcodec_parameters_to_context</name><argument_list pos:start="417:42" pos:end="417:64">(<argument pos:start="417:43" pos:end="417:53"><expr pos:start="417:43" pos:end="417:53"><name pos:start="417:43" pos:end="417:53">dummy_codec</name></expr></argument>, <argument pos:start="417:56" pos:end="417:63"><expr pos:start="417:56" pos:end="417:63"><name pos:start="417:56" pos:end="417:63">codecpar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="419:13" pos:end="419:65"><expr pos:start="419:13" pos:end="419:64"><call pos:start="419:13" pos:end="419:64"><name pos:start="419:13" pos:end="419:33">av_set_options_string</name><argument_list pos:start="419:34" pos:end="419:64">(<argument pos:start="419:35" pos:end="419:45"><expr pos:start="419:35" pos:end="419:45"><name pos:start="419:35" pos:end="419:45">dummy_codec</name></expr></argument>, <argument pos:start="419:48" pos:end="419:53"><expr pos:start="419:48" pos:end="419:53"><name pos:start="419:48" pos:end="419:53">buffer</name></expr></argument>, <argument pos:start="419:56" pos:end="419:58"><expr pos:start="419:56" pos:end="419:58"><literal type="string" pos:start="419:56" pos:end="419:58">"="</literal></expr></argument>, <argument pos:start="419:61" pos:end="419:63"><expr pos:start="419:61" pos:end="419:63"><literal type="string" pos:start="419:61" pos:end="419:63">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:67"><expr pos:start="421:13" pos:end="421:66"><call pos:start="421:13" pos:end="421:66"><name pos:start="421:13" pos:end="421:43">avcodec_parameters_from_context</name><argument_list pos:start="421:44" pos:end="421:66">(<argument pos:start="421:45" pos:end="421:52"><expr pos:start="421:45" pos:end="421:52"><name pos:start="421:45" pos:end="421:52">codecpar</name></expr></argument>, <argument pos:start="421:55" pos:end="421:65"><expr pos:start="421:55" pos:end="421:65"><name pos:start="421:55" pos:end="421:65">dummy_codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="423:13" pos:end="425:26"><if pos:start="423:13" pos:end="425:26">if <condition pos:start="423:16" pos:end="423:78">(<expr pos:start="423:17" pos:end="423:77"><operator pos:start="423:17" pos:end="423:17">(</operator><name pos:start="423:18" pos:end="423:20">ret</name> <operator pos:start="423:22" pos:end="423:22">=</operator> <call pos:start="423:24" pos:end="423:72"><name pos:start="423:24" pos:end="423:59">ffm_append_recommended_configuration</name><argument_list pos:start="423:60" pos:end="423:72">(<argument pos:start="423:61" pos:end="423:62"><expr pos:start="423:61" pos:end="423:62"><name pos:start="423:61" pos:end="423:62">st</name></expr></argument>, <argument pos:start="423:65" pos:end="423:71"><expr pos:start="423:65" pos:end="423:71"><operator pos:start="423:65" pos:end="423:65">&amp;</operator><name pos:start="423:66" pos:end="423:71">buffer</name></expr></argument>)</argument_list></call><operator pos:start="423:73" pos:end="423:73">)</operator> <operator pos:start="423:75" pos:end="423:75">&lt;</operator> <literal type="number" pos:start="423:77" pos:end="423:77">0</literal></expr>)</condition><block type="pseudo" pos:start="425:17" pos:end="425:26"><block_content pos:start="425:17" pos:end="425:26">

                <goto pos:start="425:17" pos:end="425:26">goto <name pos:start="425:22" pos:end="425:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="427:13" pos:end="427:18">break;</break>

        <case pos:start="429:9" pos:end="429:41">case <expr pos:start="429:14" pos:end="429:40"><call pos:start="429:14" pos:end="429:40"><name pos:start="429:14" pos:end="429:20">MKBETAG</name><argument_list pos:start="429:21" pos:end="429:40">(<argument pos:start="429:22" pos:end="429:24"><expr pos:start="429:22" pos:end="429:24"><literal type="char" pos:start="429:22" pos:end="429:24">'S'</literal></expr></argument>, <argument pos:start="429:27" pos:end="429:29"><expr pos:start="429:27" pos:end="429:29"><literal type="char" pos:start="429:27" pos:end="429:29">'2'</literal></expr></argument>, <argument pos:start="429:32" pos:end="429:34"><expr pos:start="429:32" pos:end="429:34"><literal type="char" pos:start="429:32" pos:end="429:34">'A'</literal></expr></argument>, <argument pos:start="429:37" pos:end="429:39"><expr pos:start="429:37" pos:end="429:39"><literal type="char" pos:start="429:37" pos:end="429:39">'U'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="431:13" pos:end="437:13"><if pos:start="431:13" pos:end="437:13">if <condition pos:start="431:16" pos:end="431:34">(<expr pos:start="431:17" pos:end="431:33"><name pos:start="431:17" pos:end="431:22">f_stau</name><operator pos:start="431:23" pos:end="431:24">++</operator> <operator pos:start="431:26" pos:end="431:27">||</operator> <operator pos:start="431:29" pos:end="431:29">!</operator><name pos:start="431:30" pos:end="431:33">size</name></expr>)</condition> <block pos:start="431:36" pos:end="437:13">{<block_content pos:start="433:17" pos:end="435:26">

                <expr_stmt pos:start="433:17" pos:end="433:38"><expr pos:start="433:17" pos:end="433:37"><name pos:start="433:17" pos:end="433:19">ret</name> <operator pos:start="433:21" pos:end="433:21">=</operator> <call pos:start="433:23" pos:end="433:37"><name pos:start="433:23" pos:end="433:29">AVERROR</name><argument_list pos:start="433:30" pos:end="433:37">(<argument pos:start="433:31" pos:end="433:36"><expr pos:start="433:31" pos:end="433:36"><name pos:start="433:31" pos:end="433:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="435:17" pos:end="435:26">goto <name pos:start="435:22" pos:end="435:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="439:13" pos:end="439:37"><expr pos:start="439:13" pos:end="439:36"><name pos:start="439:13" pos:end="439:18">buffer</name> <operator pos:start="439:20" pos:end="439:20">=</operator> <call pos:start="439:22" pos:end="439:36"><name pos:start="439:22" pos:end="439:30">av_malloc</name><argument_list pos:start="439:31" pos:end="439:36">(<argument pos:start="439:32" pos:end="439:35"><expr pos:start="439:32" pos:end="439:35"><name pos:start="439:32" pos:end="439:35">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="441:13" pos:end="447:13"><if pos:start="441:13" pos:end="447:13">if <condition pos:start="441:16" pos:end="441:24">(<expr pos:start="441:17" pos:end="441:23"><operator pos:start="441:17" pos:end="441:17">!</operator><name pos:start="441:18" pos:end="441:23">buffer</name></expr>)</condition> <block pos:start="441:26" pos:end="447:13">{<block_content pos:start="443:17" pos:end="445:26">

                <expr_stmt pos:start="443:17" pos:end="443:38"><expr pos:start="443:17" pos:end="443:37"><name pos:start="443:17" pos:end="443:19">ret</name> <operator pos:start="443:21" pos:end="443:21">=</operator> <call pos:start="443:23" pos:end="443:37"><name pos:start="443:23" pos:end="443:29">AVERROR</name><argument_list pos:start="443:30" pos:end="443:37">(<argument pos:start="443:31" pos:end="443:36"><expr pos:start="443:31" pos:end="443:36"><name pos:start="443:31" pos:end="443:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="445:17" pos:end="445:26">goto <name pos:start="445:22" pos:end="445:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="449:13" pos:end="449:52"><expr pos:start="449:13" pos:end="449:51"><call pos:start="449:13" pos:end="449:51"><name pos:start="449:13" pos:end="449:24">avio_get_str</name><argument_list pos:start="449:25" pos:end="449:51">(<argument pos:start="449:26" pos:end="449:27"><expr pos:start="449:26" pos:end="449:27"><name pos:start="449:26" pos:end="449:27">pb</name></expr></argument>, <argument pos:start="449:30" pos:end="449:36"><expr pos:start="449:30" pos:end="449:36"><name pos:start="449:30" pos:end="449:36">INT_MAX</name></expr></argument>, <argument pos:start="449:39" pos:end="449:44"><expr pos:start="449:39" pos:end="449:44"><name pos:start="449:39" pos:end="449:44">buffer</name></expr></argument>, <argument pos:start="449:47" pos:end="449:50"><expr pos:start="449:47" pos:end="449:50"><name pos:start="449:47" pos:end="449:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="451:13" pos:end="451:106">// The lack of AVOptions support in AVCodecParameters makes this back and forth copying needed</comment>

            <expr_stmt pos:start="453:13" pos:end="453:65"><expr pos:start="453:13" pos:end="453:64"><call pos:start="453:13" pos:end="453:64"><name pos:start="453:13" pos:end="453:41">avcodec_parameters_to_context</name><argument_list pos:start="453:42" pos:end="453:64">(<argument pos:start="453:43" pos:end="453:53"><expr pos:start="453:43" pos:end="453:53"><name pos:start="453:43" pos:end="453:53">dummy_codec</name></expr></argument>, <argument pos:start="453:56" pos:end="453:63"><expr pos:start="453:56" pos:end="453:63"><name pos:start="453:56" pos:end="453:63">codecpar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:65"><expr pos:start="455:13" pos:end="455:64"><call pos:start="455:13" pos:end="455:64"><name pos:start="455:13" pos:end="455:33">av_set_options_string</name><argument_list pos:start="455:34" pos:end="455:64">(<argument pos:start="455:35" pos:end="455:45"><expr pos:start="455:35" pos:end="455:45"><name pos:start="455:35" pos:end="455:45">dummy_codec</name></expr></argument>, <argument pos:start="455:48" pos:end="455:53"><expr pos:start="455:48" pos:end="455:53"><name pos:start="455:48" pos:end="455:53">buffer</name></expr></argument>, <argument pos:start="455:56" pos:end="455:58"><expr pos:start="455:56" pos:end="455:58"><literal type="string" pos:start="455:56" pos:end="455:58">"="</literal></expr></argument>, <argument pos:start="455:61" pos:end="455:63"><expr pos:start="455:61" pos:end="455:63"><literal type="string" pos:start="455:61" pos:end="455:63">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:67"><expr pos:start="457:13" pos:end="457:66"><call pos:start="457:13" pos:end="457:66"><name pos:start="457:13" pos:end="457:43">avcodec_parameters_from_context</name><argument_list pos:start="457:44" pos:end="457:66">(<argument pos:start="457:45" pos:end="457:52"><expr pos:start="457:45" pos:end="457:52"><name pos:start="457:45" pos:end="457:52">codecpar</name></expr></argument>, <argument pos:start="457:55" pos:end="457:65"><expr pos:start="457:55" pos:end="457:65"><name pos:start="457:55" pos:end="457:65">dummy_codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="459:13" pos:end="461:26"><if pos:start="459:13" pos:end="461:26">if <condition pos:start="459:16" pos:end="459:78">(<expr pos:start="459:17" pos:end="459:77"><operator pos:start="459:17" pos:end="459:17">(</operator><name pos:start="459:18" pos:end="459:20">ret</name> <operator pos:start="459:22" pos:end="459:22">=</operator> <call pos:start="459:24" pos:end="459:72"><name pos:start="459:24" pos:end="459:59">ffm_append_recommended_configuration</name><argument_list pos:start="459:60" pos:end="459:72">(<argument pos:start="459:61" pos:end="459:62"><expr pos:start="459:61" pos:end="459:62"><name pos:start="459:61" pos:end="459:62">st</name></expr></argument>, <argument pos:start="459:65" pos:end="459:71"><expr pos:start="459:65" pos:end="459:71"><operator pos:start="459:65" pos:end="459:65">&amp;</operator><name pos:start="459:66" pos:end="459:71">buffer</name></expr></argument>)</argument_list></call><operator pos:start="459:73" pos:end="459:73">)</operator> <operator pos:start="459:75" pos:end="459:75">&lt;</operator> <literal type="number" pos:start="459:77" pos:end="459:77">0</literal></expr>)</condition><block type="pseudo" pos:start="461:17" pos:end="461:26"><block_content pos:start="461:17" pos:end="461:26">

                <goto pos:start="461:17" pos:end="461:26">goto <name pos:start="461:22" pos:end="461:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="463:13" pos:end="463:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="467:9" pos:end="467:38"><expr pos:start="467:9" pos:end="467:37"><call pos:start="467:9" pos:end="467:37"><name pos:start="467:9" pos:end="467:17">avio_seek</name><argument_list pos:start="467:18" pos:end="467:37">(<argument pos:start="467:19" pos:end="467:20"><expr pos:start="467:19" pos:end="467:20"><name pos:start="467:19" pos:end="467:20">pb</name></expr></argument>, <argument pos:start="467:23" pos:end="467:26"><expr pos:start="467:23" pos:end="467:26"><name pos:start="467:23" pos:end="467:26">next</name></expr></argument>, <argument pos:start="467:29" pos:end="467:36"><expr pos:start="467:29" pos:end="467:36"><name pos:start="467:29" pos:end="467:36">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="473:5" pos:end="473:40">/* get until end of block reached */</comment>

    <while pos:start="475:5" pos:end="477:20">while <condition pos:start="475:11" pos:end="475:71">(<expr pos:start="475:12" pos:end="475:70"><operator pos:start="475:12" pos:end="475:12">(</operator><call pos:start="475:13" pos:end="475:25"><name pos:start="475:13" pos:end="475:21">avio_tell</name><argument_list pos:start="475:22" pos:end="475:25">(<argument pos:start="475:23" pos:end="475:24"><expr pos:start="475:23" pos:end="475:24"><name pos:start="475:23" pos:end="475:24">pb</name></expr></argument>)</argument_list></call> <operator pos:start="475:27" pos:end="475:27">%</operator> <name pos:start="475:29" pos:end="475:44"><name pos:start="475:29" pos:end="475:31">ffm</name><operator pos:start="475:32" pos:end="475:33">-&gt;</operator><name pos:start="475:34" pos:end="475:44">packet_size</name></name><operator pos:start="475:45" pos:end="475:45">)</operator> <operator pos:start="475:47" pos:end="475:48">!=</operator> <literal type="number" pos:start="475:50" pos:end="475:50">0</literal> <operator pos:start="475:52" pos:end="475:53">&amp;&amp;</operator> <operator pos:start="475:55" pos:end="475:55">!</operator><name pos:start="475:56" pos:end="475:70"><name pos:start="475:56" pos:end="475:57">pb</name><operator pos:start="475:58" pos:end="475:59">-&gt;</operator><name pos:start="475:60" pos:end="475:70">eof_reached</name></name></expr>)</condition><block type="pseudo" pos:start="477:9" pos:end="477:20"><block_content pos:start="477:9" pos:end="477:20">

        <expr_stmt pos:start="477:9" pos:end="477:20"><expr pos:start="477:9" pos:end="477:19"><call pos:start="477:9" pos:end="477:19"><name pos:start="477:9" pos:end="477:15">avio_r8</name><argument_list pos:start="477:16" pos:end="477:19">(<argument pos:start="477:17" pos:end="477:18"><expr pos:start="477:17" pos:end="477:18"><name pos:start="477:17" pos:end="477:18">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



    <comment type="block" pos:start="481:5" pos:end="481:27">/* init packet demux */</comment>

    <expr_stmt pos:start="483:5" pos:end="483:34"><expr pos:start="483:5" pos:end="483:33"><name pos:start="483:5" pos:end="483:19"><name pos:start="483:5" pos:end="483:7">ffm</name><operator pos:start="483:8" pos:end="483:9">-&gt;</operator><name pos:start="483:10" pos:end="483:19">packet_ptr</name></name> <operator pos:start="483:21" pos:end="483:21">=</operator> <name pos:start="483:23" pos:end="483:33"><name pos:start="483:23" pos:end="483:25">ffm</name><operator pos:start="483:26" pos:end="483:27">-&gt;</operator><name pos:start="483:28" pos:end="483:33">packet</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="485:5" pos:end="485:34"><expr pos:start="485:5" pos:end="485:33"><name pos:start="485:5" pos:end="485:19"><name pos:start="485:5" pos:end="485:7">ffm</name><operator pos:start="485:8" pos:end="485:9">-&gt;</operator><name pos:start="485:10" pos:end="485:19">packet_end</name></name> <operator pos:start="485:21" pos:end="485:21">=</operator> <name pos:start="485:23" pos:end="485:33"><name pos:start="485:23" pos:end="485:25">ffm</name><operator pos:start="485:26" pos:end="485:27">-&gt;</operator><name pos:start="485:28" pos:end="485:33">packet</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="487:5" pos:end="487:26"><expr pos:start="487:5" pos:end="487:25"><name pos:start="487:5" pos:end="487:21"><name pos:start="487:5" pos:end="487:7">ffm</name><operator pos:start="487:8" pos:end="487:9">-&gt;</operator><name pos:start="487:10" pos:end="487:21">frame_offset</name></name> <operator pos:start="487:23" pos:end="487:23">=</operator> <literal type="number" pos:start="487:25" pos:end="487:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="489:5" pos:end="489:17"><expr pos:start="489:5" pos:end="489:16"><name pos:start="489:5" pos:end="489:12"><name pos:start="489:5" pos:end="489:7">ffm</name><operator pos:start="489:8" pos:end="489:9">-&gt;</operator><name pos:start="489:10" pos:end="489:12">dts</name></name> <operator pos:start="489:14" pos:end="489:14">=</operator> <literal type="number" pos:start="489:16" pos:end="489:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="491:5" pos:end="491:34"><expr pos:start="491:5" pos:end="491:33"><name pos:start="491:5" pos:end="491:19"><name pos:start="491:5" pos:end="491:7">ffm</name><operator pos:start="491:8" pos:end="491:9">-&gt;</operator><name pos:start="491:10" pos:end="491:19">read_state</name></name> <operator pos:start="491:21" pos:end="491:21">=</operator> <name pos:start="491:23" pos:end="491:33">READ_HEADER</name></expr>;</expr_stmt>

    <expr_stmt pos:start="493:5" pos:end="493:26"><expr pos:start="493:5" pos:end="493:25"><name pos:start="493:5" pos:end="493:21"><name pos:start="493:5" pos:end="493:7">ffm</name><operator pos:start="493:8" pos:end="493:9">-&gt;</operator><name pos:start="493:10" pos:end="493:21">first_packet</name></name> <operator pos:start="493:23" pos:end="493:23">=</operator> <literal type="number" pos:start="493:25" pos:end="493:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="495:5" pos:end="495:39"><expr pos:start="495:5" pos:end="495:38"><call pos:start="495:5" pos:end="495:38"><name pos:start="495:5" pos:end="495:24">avcodec_free_context</name><argument_list pos:start="495:25" pos:end="495:38">(<argument pos:start="495:26" pos:end="495:37"><expr pos:start="495:26" pos:end="495:37"><operator pos:start="495:26" pos:end="495:26">&amp;</operator><name pos:start="495:27" pos:end="495:37">dummy_codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="497:5" pos:end="497:13">return <expr pos:start="497:12" pos:end="497:12"><literal type="number" pos:start="497:12" pos:end="497:12">0</literal></expr>;</return>

 <label pos:start="499:2" pos:end="499:6"><name pos:start="499:2" pos:end="499:5">fail</name>:</label>

    <expr_stmt pos:start="501:5" pos:end="501:39"><expr pos:start="501:5" pos:end="501:38"><call pos:start="501:5" pos:end="501:38"><name pos:start="501:5" pos:end="501:24">avcodec_free_context</name><argument_list pos:start="501:25" pos:end="501:38">(<argument pos:start="501:26" pos:end="501:37"><expr pos:start="501:26" pos:end="501:37"><operator pos:start="501:26" pos:end="501:26">&amp;</operator><name pos:start="501:27" pos:end="501:37">dummy_codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="503:5" pos:end="503:15">return <expr pos:start="503:12" pos:end="503:14"><name pos:start="503:12" pos:end="503:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
