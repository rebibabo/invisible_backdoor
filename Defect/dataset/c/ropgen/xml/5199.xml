<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5199.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">v9fs_read</name><parameter_list pos:start="1:22" pos:end="1:35">(<parameter pos:start="1:23" pos:end="1:34"><decl pos:start="1:23" pos:end="1:34"><type pos:start="1:23" pos:end="1:28"><name pos:start="1:23" pos:end="1:26">void</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:34">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:30">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int32_t</name></type> <name pos:start="5:13" pos:end="5:15">fid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">off</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:15">err</name> <init pos:start="9:17" pos:end="9:19">= <expr pos:start="9:19" pos:end="9:19"><literal type="number" pos:start="9:19" pos:end="9:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int32_t</name></type> <name pos:start="11:13" pos:end="11:17">count</name> <init pos:start="11:19" pos:end="11:21">= <expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:17">offset</name> <init pos:start="13:19" pos:end="13:21">= <expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">7</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:22">max_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">V9fsFidState</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:22">fidp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">V9fsPDU</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">pdu</name> <init pos:start="19:18" pos:end="19:25">= <expr pos:start="19:20" pos:end="19:25"><name pos:start="19:20" pos:end="19:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">V9fsState</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:16">s</name> <init pos:start="21:18" pos:end="21:25">= <expr pos:start="21:20" pos:end="21:25"><name pos:start="21:20" pos:end="21:25"><name pos:start="21:20" pos:end="21:22">pdu</name><operator pos:start="21:23" pos:end="21:24">-&gt;</operator><name pos:start="21:25" pos:end="21:25">s</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:62"><expr pos:start="25:5" pos:end="25:61"><call pos:start="25:5" pos:end="25:61"><name pos:start="25:5" pos:end="25:17">pdu_unmarshal</name><argument_list pos:start="25:18" pos:end="25:61">(<argument pos:start="25:19" pos:end="25:21"><expr pos:start="25:19" pos:end="25:21"><name pos:start="25:19" pos:end="25:21">pdu</name></expr></argument>, <argument pos:start="25:24" pos:end="25:29"><expr pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:29">offset</name></expr></argument>, <argument pos:start="25:32" pos:end="25:36"><expr pos:start="25:32" pos:end="25:36"><literal type="string" pos:start="25:32" pos:end="25:36">"dqd"</literal></expr></argument>, <argument pos:start="25:39" pos:end="25:42"><expr pos:start="25:39" pos:end="25:42"><operator pos:start="25:39" pos:end="25:39">&amp;</operator><name pos:start="25:40" pos:end="25:42">fid</name></expr></argument>, <argument pos:start="25:45" pos:end="25:48"><expr pos:start="25:45" pos:end="25:48"><operator pos:start="25:45" pos:end="25:45">&amp;</operator><name pos:start="25:46" pos:end="25:48">off</name></expr></argument>, <argument pos:start="25:51" pos:end="25:60"><expr pos:start="25:51" pos:end="25:60"><operator pos:start="25:51" pos:end="25:51">&amp;</operator><name pos:start="25:52" pos:end="25:60">max_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:60"><expr pos:start="27:5" pos:end="27:59"><call pos:start="27:5" pos:end="27:59"><name pos:start="27:5" pos:end="27:19">trace_v9fs_read</name><argument_list pos:start="27:20" pos:end="27:59">(<argument pos:start="27:21" pos:end="27:28"><expr pos:start="27:21" pos:end="27:28"><name pos:start="27:21" pos:end="27:28"><name pos:start="27:21" pos:end="27:23">pdu</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:28">tag</name></name></expr></argument>, <argument pos:start="27:31" pos:end="27:37"><expr pos:start="27:31" pos:end="27:37"><name pos:start="27:31" pos:end="27:37"><name pos:start="27:31" pos:end="27:33">pdu</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:37">id</name></name></expr></argument>, <argument pos:start="27:40" pos:end="27:42"><expr pos:start="27:40" pos:end="27:42"><name pos:start="27:40" pos:end="27:42">fid</name></expr></argument>, <argument pos:start="27:45" pos:end="27:47"><expr pos:start="27:45" pos:end="27:47"><name pos:start="27:45" pos:end="27:47">off</name></expr></argument>, <argument pos:start="27:50" pos:end="27:58"><expr pos:start="27:50" pos:end="27:58"><name pos:start="27:50" pos:end="27:58">max_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:8">fidp</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:28"><name pos:start="31:12" pos:end="31:18">get_fid</name><argument_list pos:start="31:19" pos:end="31:28">(<argument pos:start="31:20" pos:end="31:22"><expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">pdu</name></expr></argument>, <argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:21">(<expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:12">fidp</name> <operator pos:start="33:14" pos:end="33:15">==</operator> <name pos:start="33:17" pos:end="33:20">NULL</name></expr>)</condition> <block pos:start="33:23" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:23">

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:11">err</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <operator pos:start="35:15" pos:end="35:15">-</operator><name pos:start="35:16" pos:end="35:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:23">goto <name pos:start="37:14" pos:end="37:22">out_nofid</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="139:5"><if pos:start="41:5" pos:end="67:5">if <condition pos:start="41:8" pos:end="41:37">(<expr pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:12">fidp</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:22">fid_type</name></name> <operator pos:start="41:24" pos:end="41:25">==</operator> <name pos:start="41:27" pos:end="41:36">P9_FID_DIR</name></expr>)</condition> <block pos:start="41:39" pos:end="67:5">{<block_content pos:start="45:9" pos:end="65:21">



        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:21">(<expr pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:15">off</name> <operator pos:start="45:17" pos:end="45:18">==</operator> <literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>)</condition> <block pos:start="45:23" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:41">

            <expr_stmt pos:start="47:13" pos:end="47:41"><expr pos:start="47:13" pos:end="47:40"><call pos:start="47:13" pos:end="47:40"><name pos:start="47:13" pos:end="47:29">v9fs_co_rewinddir</name><argument_list pos:start="47:30" pos:end="47:40">(<argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><name pos:start="47:31" pos:end="47:33">pdu</name></expr></argument>, <argument pos:start="47:36" pos:end="47:39"><expr pos:start="47:36" pos:end="47:39"><name pos:start="47:36" pos:end="47:39">fidp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:64"><expr pos:start="51:9" pos:end="51:63"><name pos:start="51:9" pos:end="51:13">count</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:63"><name pos:start="51:17" pos:end="51:41">v9fs_do_readdir_with_stat</name><argument_list pos:start="51:42" pos:end="51:63">(<argument pos:start="51:43" pos:end="51:45"><expr pos:start="51:43" pos:end="51:45"><name pos:start="51:43" pos:end="51:45">pdu</name></expr></argument>, <argument pos:start="51:48" pos:end="51:51"><expr pos:start="51:48" pos:end="51:51"><name pos:start="51:48" pos:end="51:51">fidp</name></expr></argument>, <argument pos:start="51:54" pos:end="51:62"><expr pos:start="51:54" pos:end="51:62"><name pos:start="51:54" pos:end="51:62">max_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:22">(<expr pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:17">count</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>)</condition> <block pos:start="53:24" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:21">

            <expr_stmt pos:start="55:13" pos:end="55:24"><expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:15">err</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:23">count</name></expr>;</expr_stmt>

            <goto pos:start="57:13" pos:end="57:21">goto <name pos:start="57:18" pos:end="57:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:21"><expr pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:11">err</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <name pos:start="61:15" pos:end="61:20">offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:52"><expr pos:start="63:9" pos:end="63:51"><name pos:start="63:9" pos:end="63:11">err</name> <operator pos:start="63:13" pos:end="63:14">+=</operator> <call pos:start="63:16" pos:end="63:51"><name pos:start="63:16" pos:end="63:26">pdu_marshal</name><argument_list pos:start="63:27" pos:end="63:51">(<argument pos:start="63:28" pos:end="63:30"><expr pos:start="63:28" pos:end="63:30"><name pos:start="63:28" pos:end="63:30">pdu</name></expr></argument>, <argument pos:start="63:33" pos:end="63:38"><expr pos:start="63:33" pos:end="63:38"><name pos:start="63:33" pos:end="63:38">offset</name></expr></argument>, <argument pos:start="63:41" pos:end="63:43"><expr pos:start="63:41" pos:end="63:43"><literal type="string" pos:start="63:41" pos:end="63:43">"d"</literal></expr></argument>, <argument pos:start="63:46" pos:end="63:50"><expr pos:start="63:46" pos:end="63:50"><name pos:start="63:46" pos:end="63:50">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:21"><expr pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:11">err</name> <operator pos:start="65:13" pos:end="65:14">+=</operator> <name pos:start="65:16" pos:end="65:20">count</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="67:7" pos:end="131:5">else if <condition pos:start="67:15" pos:end="67:45">(<expr pos:start="67:16" pos:end="67:44"><name pos:start="67:16" pos:end="67:29"><name pos:start="67:16" pos:end="67:19">fidp</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:29">fid_type</name></name> <operator pos:start="67:31" pos:end="67:32">==</operator> <name pos:start="67:34" pos:end="67:44">P9_FID_FILE</name></expr>)</condition> <block pos:start="67:47" pos:end="131:5">{<block_content pos:start="69:9" pos:end="129:39">

        <decl_stmt pos:start="69:9" pos:end="69:31"><decl pos:start="69:9" pos:end="69:30"><type pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:20">QEMUIOVector</name></type> <name pos:start="69:22" pos:end="69:30">qiov_full</name></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:26"><decl pos:start="71:9" pos:end="71:25"><type pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:20">QEMUIOVector</name></type> <name pos:start="71:22" pos:end="71:25">qiov</name></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:20"><decl pos:start="73:9" pos:end="73:19"><type pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:15">int32_t</name></type> <name pos:start="73:17" pos:end="73:19">len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:79"><expr pos:start="77:9" pos:end="77:78"><call pos:start="77:9" pos:end="77:78"><name pos:start="77:9" pos:end="77:31">v9fs_init_qiov_from_pdu</name><argument_list pos:start="77:32" pos:end="77:78">(<argument pos:start="77:33" pos:end="77:42"><expr pos:start="77:33" pos:end="77:42"><operator pos:start="77:33" pos:end="77:33">&amp;</operator><name pos:start="77:34" pos:end="77:42">qiov_full</name></expr></argument>, <argument pos:start="77:45" pos:end="77:47"><expr pos:start="77:45" pos:end="77:47"><name pos:start="77:45" pos:end="77:47">pdu</name></expr></argument>, <argument pos:start="77:50" pos:end="77:59"><expr pos:start="77:50" pos:end="77:59"><name pos:start="77:50" pos:end="77:55">offset</name> <operator pos:start="77:57" pos:end="77:57">+</operator> <literal type="number" pos:start="77:59" pos:end="77:59">4</literal></expr></argument>, <argument pos:start="77:62" pos:end="77:70"><expr pos:start="77:62" pos:end="77:70"><name pos:start="77:62" pos:end="77:70">max_count</name></expr></argument>, <argument pos:start="77:73" pos:end="77:77"><expr pos:start="77:73" pos:end="77:77"><name pos:start="77:73" pos:end="77:77">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:47"><expr pos:start="79:9" pos:end="79:46"><call pos:start="79:9" pos:end="79:46"><name pos:start="79:9" pos:end="79:23">qemu_iovec_init</name><argument_list pos:start="79:24" pos:end="79:46">(<argument pos:start="79:25" pos:end="79:29"><expr pos:start="79:25" pos:end="79:29"><operator pos:start="79:25" pos:end="79:25">&amp;</operator><name pos:start="79:26" pos:end="79:29">qiov</name></expr></argument>, <argument pos:start="79:32" pos:end="79:45"><expr pos:start="79:32" pos:end="79:45"><name pos:start="79:32" pos:end="79:45"><name pos:start="79:32" pos:end="79:40">qiov_full</name><operator pos:start="79:41" pos:end="79:41">.</operator><name pos:start="79:42" pos:end="79:45">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do pos:start="81:9" pos:end="119:47">do <block pos:start="81:12" pos:end="119:9">{<block_content pos:start="83:13" pos:end="117:13">

            <expr_stmt pos:start="83:13" pos:end="83:36"><expr pos:start="83:13" pos:end="83:35"><call pos:start="83:13" pos:end="83:35"><name pos:start="83:13" pos:end="83:28">qemu_iovec_reset</name><argument_list pos:start="83:29" pos:end="83:35">(<argument pos:start="83:30" pos:end="83:34"><expr pos:start="83:30" pos:end="83:34"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:34">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:78"><expr pos:start="85:13" pos:end="85:77"><call pos:start="85:13" pos:end="85:77"><name pos:start="85:13" pos:end="85:27">qemu_iovec_copy</name><argument_list pos:start="85:28" pos:end="85:77">(<argument pos:start="85:29" pos:end="85:33"><expr pos:start="85:29" pos:end="85:33"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:33">qiov</name></expr></argument>, <argument pos:start="85:36" pos:end="85:45"><expr pos:start="85:36" pos:end="85:45"><operator pos:start="85:36" pos:end="85:36">&amp;</operator><name pos:start="85:37" pos:end="85:45">qiov_full</name></expr></argument>, <argument pos:start="85:48" pos:end="85:52"><expr pos:start="85:48" pos:end="85:52"><name pos:start="85:48" pos:end="85:52">count</name></expr></argument>, <argument pos:start="85:55" pos:end="85:76"><expr pos:start="85:55" pos:end="85:76"><name pos:start="85:55" pos:end="85:68"><name pos:start="85:55" pos:end="85:63">qiov_full</name><operator pos:start="85:64" pos:end="85:64">.</operator><name pos:start="85:65" pos:end="85:68">size</name></name> <operator pos:start="85:70" pos:end="85:70">-</operator> <name pos:start="85:72" pos:end="85:76">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="91:13"><if pos:start="87:13" pos:end="91:13">if <condition pos:start="87:16" pos:end="87:18">(<expr pos:start="87:17" pos:end="87:17"><literal type="number" pos:start="87:17" pos:end="87:17">0</literal></expr>)</condition> <block pos:start="87:20" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:46">

                <expr_stmt pos:start="89:17" pos:end="89:46"><expr pos:start="89:17" pos:end="89:45"><call pos:start="89:17" pos:end="89:45"><name pos:start="89:17" pos:end="89:24">print_sg</name><argument_list pos:start="89:25" pos:end="89:45">(<argument pos:start="89:26" pos:end="89:33"><expr pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:29">qiov</name><operator pos:start="89:30" pos:end="89:30">.</operator><name pos:start="89:31" pos:end="89:33">iov</name></name></expr></argument>, <argument pos:start="89:36" pos:end="89:44"><expr pos:start="89:36" pos:end="89:44"><name pos:start="89:36" pos:end="89:44"><name pos:start="89:36" pos:end="89:39">qiov</name><operator pos:start="89:40" pos:end="89:40">.</operator><name pos:start="89:41" pos:end="89:44">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="93:13" pos:end="93:39">/* Loop in case of EINTR */</comment>

            <do pos:start="95:13" pos:end="107:55">do <block pos:start="95:16" pos:end="107:13">{<block_content pos:start="97:17" pos:end="105:17">

                <expr_stmt pos:start="97:17" pos:end="97:74"><expr pos:start="97:17" pos:end="97:73"><name pos:start="97:17" pos:end="97:19">len</name> <operator pos:start="97:21" pos:end="97:21">=</operator> <call pos:start="97:23" pos:end="97:73"><name pos:start="97:23" pos:end="97:36">v9fs_co_preadv</name><argument_list pos:start="97:37" pos:end="97:73">(<argument pos:start="97:38" pos:end="97:40"><expr pos:start="97:38" pos:end="97:40"><name pos:start="97:38" pos:end="97:40">pdu</name></expr></argument>, <argument pos:start="97:43" pos:end="97:46"><expr pos:start="97:43" pos:end="97:46"><name pos:start="97:43" pos:end="97:46">fidp</name></expr></argument>, <argument pos:start="97:49" pos:end="97:56"><expr pos:start="97:49" pos:end="97:56"><name pos:start="97:49" pos:end="97:56"><name pos:start="97:49" pos:end="97:52">qiov</name><operator pos:start="97:53" pos:end="97:53">.</operator><name pos:start="97:54" pos:end="97:56">iov</name></name></expr></argument>, <argument pos:start="97:59" pos:end="97:67"><expr pos:start="97:59" pos:end="97:67"><name pos:start="97:59" pos:end="97:67"><name pos:start="97:59" pos:end="97:62">qiov</name><operator pos:start="97:63" pos:end="97:63">.</operator><name pos:start="97:64" pos:end="97:67">niov</name></name></expr></argument>, <argument pos:start="97:70" pos:end="97:72"><expr pos:start="97:70" pos:end="97:72"><name pos:start="97:70" pos:end="97:72">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="99:17" pos:end="105:17"><if pos:start="99:17" pos:end="105:17">if <condition pos:start="99:20" pos:end="99:29">(<expr pos:start="99:21" pos:end="99:28"><name pos:start="99:21" pos:end="99:23">len</name> <operator pos:start="99:25" pos:end="99:26">&gt;=</operator> <literal type="number" pos:start="99:28" pos:end="99:28">0</literal></expr>)</condition> <block pos:start="99:31" pos:end="105:17">{<block_content pos:start="101:21" pos:end="103:33">

                    <expr_stmt pos:start="101:21" pos:end="101:33"><expr pos:start="101:21" pos:end="101:32"><name pos:start="101:21" pos:end="101:23">off</name>   <operator pos:start="101:27" pos:end="101:28">+=</operator> <name pos:start="101:30" pos:end="101:32">len</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:33"><expr pos:start="103:21" pos:end="103:32"><name pos:start="103:21" pos:end="103:25">count</name> <operator pos:start="103:27" pos:end="103:28">+=</operator> <name pos:start="103:30" pos:end="103:32">len</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block> while <condition pos:start="107:21" pos:end="107:54">(<expr pos:start="107:22" pos:end="107:53"><name pos:start="107:22" pos:end="107:24">len</name> <operator pos:start="107:26" pos:end="107:27">==</operator> <operator pos:start="107:29" pos:end="107:29">-</operator><name pos:start="107:30" pos:end="107:34">EINTR</name> <operator pos:start="107:36" pos:end="107:37">&amp;&amp;</operator> <operator pos:start="107:39" pos:end="107:39">!</operator><name pos:start="107:40" pos:end="107:53"><name pos:start="107:40" pos:end="107:42">pdu</name><operator pos:start="107:43" pos:end="107:44">-&gt;</operator><name pos:start="107:45" pos:end="107:53">cancelled</name></name></expr>)</condition>;</do>

            <if_stmt pos:start="109:13" pos:end="117:13"><if pos:start="109:13" pos:end="117:13">if <condition pos:start="109:16" pos:end="109:24">(<expr pos:start="109:17" pos:end="109:23"><name pos:start="109:17" pos:end="109:19">len</name> <operator pos:start="109:21" pos:end="109:21">&lt;</operator> <literal type="number" pos:start="109:23" pos:end="109:23">0</literal></expr>)</condition> <block pos:start="109:26" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:25">

                <comment type="block" pos:start="111:17" pos:end="111:47">/* IO error return the error */</comment>

                <expr_stmt pos:start="113:17" pos:end="113:26"><expr pos:start="113:17" pos:end="113:25"><name pos:start="113:17" pos:end="113:19">err</name> <operator pos:start="113:21" pos:end="113:21">=</operator> <name pos:start="113:23" pos:end="113:25">len</name></expr>;</expr_stmt>

                <goto pos:start="115:17" pos:end="115:25">goto <name pos:start="115:22" pos:end="115:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="119:17" pos:end="119:46">(<expr pos:start="119:18" pos:end="119:45"><name pos:start="119:18" pos:end="119:43"><name pos:start="119:18" pos:end="119:22">count</name> <argument_list type="generic" pos:start="119:24" pos:end="119:43">&lt; <argument pos:start="119:26" pos:end="119:41"><expr pos:start="119:26" pos:end="119:41"><name pos:start="119:26" pos:end="119:34">max_count</name> <operator pos:start="119:36" pos:end="119:37">&amp;&amp;</operator> <name pos:start="119:39" pos:end="119:41">len</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="119:45" pos:end="119:45">0</literal></expr>)</condition>;</do>

        <expr_stmt pos:start="121:9" pos:end="121:21"><expr pos:start="121:9" pos:end="121:20"><name pos:start="121:9" pos:end="121:11">err</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <name pos:start="121:15" pos:end="121:20">offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:52"><expr pos:start="123:9" pos:end="123:51"><name pos:start="123:9" pos:end="123:11">err</name> <operator pos:start="123:13" pos:end="123:14">+=</operator> <call pos:start="123:16" pos:end="123:51"><name pos:start="123:16" pos:end="123:26">pdu_marshal</name><argument_list pos:start="123:27" pos:end="123:51">(<argument pos:start="123:28" pos:end="123:30"><expr pos:start="123:28" pos:end="123:30"><name pos:start="123:28" pos:end="123:30">pdu</name></expr></argument>, <argument pos:start="123:33" pos:end="123:38"><expr pos:start="123:33" pos:end="123:38"><name pos:start="123:33" pos:end="123:38">offset</name></expr></argument>, <argument pos:start="123:41" pos:end="123:43"><expr pos:start="123:41" pos:end="123:43"><literal type="string" pos:start="123:41" pos:end="123:43">"d"</literal></expr></argument>, <argument pos:start="123:46" pos:end="123:50"><expr pos:start="123:46" pos:end="123:50"><name pos:start="123:46" pos:end="123:50">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:21"><expr pos:start="125:9" pos:end="125:20"><name pos:start="125:9" pos:end="125:11">err</name> <operator pos:start="125:13" pos:end="125:14">+=</operator> <name pos:start="125:16" pos:end="125:20">count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:34"><expr pos:start="127:9" pos:end="127:33"><call pos:start="127:9" pos:end="127:33"><name pos:start="127:9" pos:end="127:26">qemu_iovec_destroy</name><argument_list pos:start="127:27" pos:end="127:33">(<argument pos:start="127:28" pos:end="127:32"><expr pos:start="127:28" pos:end="127:32"><operator pos:start="127:28" pos:end="127:28">&amp;</operator><name pos:start="127:29" pos:end="127:32">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:39"><expr pos:start="129:9" pos:end="129:38"><call pos:start="129:9" pos:end="129:38"><name pos:start="129:9" pos:end="129:26">qemu_iovec_destroy</name><argument_list pos:start="129:27" pos:end="129:38">(<argument pos:start="129:28" pos:end="129:37"><expr pos:start="129:28" pos:end="129:37"><operator pos:start="129:28" pos:end="129:28">&amp;</operator><name pos:start="129:29" pos:end="129:37">qiov_full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="131:7" pos:end="135:5">else if <condition pos:start="131:15" pos:end="131:46">(<expr pos:start="131:16" pos:end="131:45"><name pos:start="131:16" pos:end="131:29"><name pos:start="131:16" pos:end="131:19">fidp</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:29">fid_type</name></name> <operator pos:start="131:31" pos:end="131:32">==</operator> <name pos:start="131:34" pos:end="131:45">P9_FID_XATTR</name></expr>)</condition> <block pos:start="131:48" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:60">

        <expr_stmt pos:start="133:9" pos:end="133:60"><expr pos:start="133:9" pos:end="133:59"><name pos:start="133:9" pos:end="133:11">err</name> <operator pos:start="133:13" pos:end="133:13">=</operator> <call pos:start="133:15" pos:end="133:59"><name pos:start="133:15" pos:end="133:29">v9fs_xattr_read</name><argument_list pos:start="133:30" pos:end="133:59">(<argument pos:start="133:31" pos:end="133:31"><expr pos:start="133:31" pos:end="133:31"><name pos:start="133:31" pos:end="133:31">s</name></expr></argument>, <argument pos:start="133:34" pos:end="133:36"><expr pos:start="133:34" pos:end="133:36"><name pos:start="133:34" pos:end="133:36">pdu</name></expr></argument>, <argument pos:start="133:39" pos:end="133:42"><expr pos:start="133:39" pos:end="133:42"><name pos:start="133:39" pos:end="133:42">fidp</name></expr></argument>, <argument pos:start="133:45" pos:end="133:47"><expr pos:start="133:45" pos:end="133:47"><name pos:start="133:45" pos:end="133:47">off</name></expr></argument>, <argument pos:start="133:50" pos:end="133:58"><expr pos:start="133:50" pos:end="133:58"><name pos:start="133:50" pos:end="133:58">max_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="135:7" pos:end="139:5">else <block pos:start="135:12" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:22">

        <expr_stmt pos:start="137:9" pos:end="137:22"><expr pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:11">err</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <operator pos:start="137:15" pos:end="137:15">-</operator><name pos:start="137:16" pos:end="137:21">EINVAL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:58"><expr pos:start="141:5" pos:end="141:57"><call pos:start="141:5" pos:end="141:57"><name pos:start="141:5" pos:end="141:26">trace_v9fs_read_return</name><argument_list pos:start="141:27" pos:end="141:57">(<argument pos:start="141:28" pos:end="141:35"><expr pos:start="141:28" pos:end="141:35"><name pos:start="141:28" pos:end="141:35"><name pos:start="141:28" pos:end="141:30">pdu</name><operator pos:start="141:31" pos:end="141:32">-&gt;</operator><name pos:start="141:33" pos:end="141:35">tag</name></name></expr></argument>, <argument pos:start="141:38" pos:end="141:44"><expr pos:start="141:38" pos:end="141:44"><name pos:start="141:38" pos:end="141:44"><name pos:start="141:38" pos:end="141:40">pdu</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:44">id</name></name></expr></argument>, <argument pos:start="141:47" pos:end="141:51"><expr pos:start="141:47" pos:end="141:51"><name pos:start="141:47" pos:end="141:51">count</name></expr></argument>, <argument pos:start="141:54" pos:end="141:56"><expr pos:start="141:54" pos:end="141:56"><name pos:start="141:54" pos:end="141:56">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="143:1" pos:end="143:4"><name pos:start="143:1" pos:end="143:3">out</name>:</label>

    <expr_stmt pos:start="145:5" pos:end="145:23"><expr pos:start="145:5" pos:end="145:22"><call pos:start="145:5" pos:end="145:22"><name pos:start="145:5" pos:end="145:11">put_fid</name><argument_list pos:start="145:12" pos:end="145:22">(<argument pos:start="145:13" pos:end="145:15"><expr pos:start="145:13" pos:end="145:15"><name pos:start="145:13" pos:end="145:15">pdu</name></expr></argument>, <argument pos:start="145:18" pos:end="145:21"><expr pos:start="145:18" pos:end="145:21"><name pos:start="145:18" pos:end="145:21">fidp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="147:1" pos:end="147:10"><name pos:start="147:1" pos:end="147:9">out_nofid</name>:</label>

    <expr_stmt pos:start="149:5" pos:end="149:30"><expr pos:start="149:5" pos:end="149:29"><call pos:start="149:5" pos:end="149:29"><name pos:start="149:5" pos:end="149:16">complete_pdu</name><argument_list pos:start="149:17" pos:end="149:29">(<argument pos:start="149:18" pos:end="149:18"><expr pos:start="149:18" pos:end="149:18"><name pos:start="149:18" pos:end="149:18">s</name></expr></argument>, <argument pos:start="149:21" pos:end="149:23"><expr pos:start="149:21" pos:end="149:23"><name pos:start="149:21" pos:end="149:23">pdu</name></expr></argument>, <argument pos:start="149:26" pos:end="149:28"><expr pos:start="149:26" pos:end="149:28"><name pos:start="149:26" pos:end="149:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
