<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4278.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:23">aio_thread</name><parameter_list pos:start="1:24" pos:end="1:37">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:30"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">unused</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:16">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:9"><name pos:start="5:5" pos:end="5:9">pid_t</name></type> <name pos:start="5:11" pos:end="5:13">pid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">sigset_t</name></type> <name pos:start="7:14" pos:end="7:16">set</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:19"><expr pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:7">pid</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:18"><name pos:start="11:11" pos:end="11:16">getpid</name><argument_list pos:start="11:17" pos:end="11:18">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:27">/* block all signals */</comment>

    <if_stmt pos:start="17:5" pos:end="17:44"><if pos:start="17:5" pos:end="17:44">if <condition pos:start="17:8" pos:end="17:25">(<expr pos:start="17:9" pos:end="17:24"><call pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:18">sigfillset</name><argument_list pos:start="17:19" pos:end="17:24">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><operator pos:start="17:20" pos:end="17:20">&amp;</operator><name pos:start="17:21" pos:end="17:23">set</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="17:27" pos:end="17:44"><block_content pos:start="17:27" pos:end="17:44"> <expr_stmt pos:start="17:27" pos:end="17:44"><expr pos:start="17:27" pos:end="17:43"><call pos:start="17:27" pos:end="17:43"><name pos:start="17:27" pos:end="17:29">die</name><argument_list pos:start="17:30" pos:end="17:43">(<argument pos:start="17:31" pos:end="17:42"><expr pos:start="17:31" pos:end="17:42"><literal type="string" pos:start="17:31" pos:end="17:42">"sigfillset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="19:63"><if pos:start="19:5" pos:end="19:63">if <condition pos:start="19:8" pos:end="19:43">(<expr pos:start="19:9" pos:end="19:42"><call pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:19">sigprocmask</name><argument_list pos:start="19:20" pos:end="19:42">(<argument pos:start="19:21" pos:end="19:29"><expr pos:start="19:21" pos:end="19:29"><name pos:start="19:21" pos:end="19:29">SIG_BLOCK</name></expr></argument>, <argument pos:start="19:32" pos:end="19:35"><expr pos:start="19:32" pos:end="19:35"><operator pos:start="19:32" pos:end="19:32">&amp;</operator><name pos:start="19:33" pos:end="19:35">set</name></expr></argument>, <argument pos:start="19:38" pos:end="19:41"><expr pos:start="19:38" pos:end="19:41"><name pos:start="19:38" pos:end="19:41">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:45" pos:end="19:63"><block_content pos:start="19:45" pos:end="19:63"> <expr_stmt pos:start="19:45" pos:end="19:63"><expr pos:start="19:45" pos:end="19:62"><call pos:start="19:45" pos:end="19:62"><name pos:start="19:45" pos:end="19:47">die</name><argument_list pos:start="19:48" pos:end="19:62">(<argument pos:start="19:49" pos:end="19:61"><expr pos:start="19:49" pos:end="19:61"><literal type="string" pos:start="19:49" pos:end="19:61">"sigprocmask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <while pos:start="23:5" pos:end="115:5">while <condition pos:start="23:11" pos:end="23:13">(<expr pos:start="23:12" pos:end="23:12"><literal type="number" pos:start="23:12" pos:end="23:12">1</literal></expr>)</condition> <block pos:start="23:15" pos:end="115:5">{<block_content pos:start="25:9" pos:end="113:59">

        <decl_stmt pos:start="25:9" pos:end="25:34"><decl pos:start="25:9" pos:end="25:33"><type pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:14">struct</name> <name pos:start="25:16" pos:end="25:26">qemu_paiocb</name></name> <modifier pos:start="25:28" pos:end="25:28">*</modifier></type><name pos:start="25:29" pos:end="25:33">aiocb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:23"><decl pos:start="27:9" pos:end="27:22"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">size_t</name></type> <name pos:start="27:16" pos:end="27:18">ret</name> <init pos:start="27:20" pos:end="27:22">= <expr pos:start="27:22" pos:end="27:22"><literal type="number" pos:start="27:22" pos:end="27:22">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:24"><decl pos:start="29:9" pos:end="29:23"><type pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:20">qemu_timeval</name></type> <name pos:start="29:22" pos:end="29:23">tv</name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:27"><decl pos:start="31:9" pos:end="31:26"><type pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:14">struct</name> <name pos:start="31:16" pos:end="31:23">timespec</name></name></type> <name pos:start="31:25" pos:end="31:26">ts</name></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:31"><expr pos:start="35:9" pos:end="35:30"><call pos:start="35:9" pos:end="35:30"><name pos:start="35:9" pos:end="35:25">qemu_gettimeofday</name><argument_list pos:start="35:26" pos:end="35:30">(<argument pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:29">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:35"><expr pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:10">ts</name><operator pos:start="37:11" pos:end="37:11">.</operator><name pos:start="37:12" pos:end="37:17">tv_sec</name></name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:29"><name pos:start="37:21" pos:end="37:22">tv</name><operator pos:start="37:23" pos:end="37:23">.</operator><name pos:start="37:24" pos:end="37:29">tv_sec</name></name> <operator pos:start="37:31" pos:end="37:31">+</operator> <literal type="number" pos:start="37:33" pos:end="37:34">10</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:23"><expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:10">ts</name><operator pos:start="39:11" pos:end="39:11">.</operator><name pos:start="39:12" pos:end="39:18">tv_nsec</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <literal type="number" pos:start="39:22" pos:end="39:22">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:26"><expr pos:start="43:9" pos:end="43:25"><call pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:18">mutex_lock</name><argument_list pos:start="43:19" pos:end="43:25">(<argument pos:start="43:20" pos:end="43:24"><expr pos:start="43:20" pos:end="43:24"><operator pos:start="43:20" pos:end="43:20">&amp;</operator><name pos:start="43:21" pos:end="43:24">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="47:9" pos:end="53:9">while <condition pos:start="47:15" pos:end="49:35">(<expr pos:start="47:16" pos:end="49:34"><call pos:start="47:16" pos:end="47:41"><name pos:start="47:16" pos:end="47:26">TAILQ_EMPTY</name><argument_list pos:start="47:27" pos:end="47:41">(<argument pos:start="47:28" pos:end="47:40"><expr pos:start="47:28" pos:end="47:40"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:40">request_list</name></expr></argument>)</argument_list></call> <operator pos:start="47:43" pos:end="47:44">&amp;&amp;</operator>

               <operator pos:start="49:16" pos:end="49:16">!</operator><operator pos:start="49:17" pos:end="49:17">(</operator><name pos:start="49:18" pos:end="49:20">ret</name> <operator pos:start="49:22" pos:end="49:23">==</operator> <name pos:start="49:25" pos:end="49:33">ETIMEDOUT</name><operator pos:start="49:34" pos:end="49:34">)</operator></expr>)</condition> <block pos:start="49:37" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:52">

            <expr_stmt pos:start="51:13" pos:end="51:52"><expr pos:start="51:13" pos:end="51:51"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:51"><name pos:start="51:19" pos:end="51:32">cond_timedwait</name><argument_list pos:start="51:33" pos:end="51:51">(<argument pos:start="51:34" pos:end="51:38"><expr pos:start="51:34" pos:end="51:38"><operator pos:start="51:34" pos:end="51:34">&amp;</operator><name pos:start="51:35" pos:end="51:38">cond</name></expr></argument>, <argument pos:start="51:41" pos:end="51:45"><expr pos:start="51:41" pos:end="51:45"><operator pos:start="51:41" pos:end="51:41">&amp;</operator><name pos:start="51:42" pos:end="51:45">lock</name></expr></argument>, <argument pos:start="51:48" pos:end="51:50"><expr pos:start="51:48" pos:end="51:50"><operator pos:start="51:48" pos:end="51:48">&amp;</operator><name pos:start="51:49" pos:end="51:50">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="57:9" pos:end="59:18"><if pos:start="57:9" pos:end="59:18">if <condition pos:start="57:12" pos:end="57:39">(<expr pos:start="57:13" pos:end="57:38"><call pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:23">TAILQ_EMPTY</name><argument_list pos:start="57:24" pos:end="57:38">(<argument pos:start="57:25" pos:end="57:37"><expr pos:start="57:25" pos:end="57:37"><operator pos:start="57:25" pos:end="57:25">&amp;</operator><name pos:start="57:26" pos:end="57:37">request_list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:18"><block_content pos:start="59:13" pos:end="59:18">

            <break pos:start="59:13" pos:end="59:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:43"><expr pos:start="63:9" pos:end="63:42"><name pos:start="63:9" pos:end="63:13">aiocb</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:42"><name pos:start="63:17" pos:end="63:27">TAILQ_FIRST</name><argument_list pos:start="63:28" pos:end="63:42">(<argument pos:start="63:29" pos:end="63:41"><expr pos:start="63:29" pos:end="63:41"><operator pos:start="63:29" pos:end="63:29">&amp;</operator><name pos:start="63:30" pos:end="63:41">request_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><call pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:20">TAILQ_REMOVE</name><argument_list pos:start="65:21" pos:end="65:48">(<argument pos:start="65:22" pos:end="65:34"><expr pos:start="65:22" pos:end="65:34"><operator pos:start="65:22" pos:end="65:22">&amp;</operator><name pos:start="65:23" pos:end="65:34">request_list</name></expr></argument>, <argument pos:start="65:37" pos:end="65:41"><expr pos:start="65:37" pos:end="65:41"><name pos:start="65:37" pos:end="65:41">aiocb</name></expr></argument>, <argument pos:start="65:44" pos:end="65:47"><expr pos:start="65:44" pos:end="65:47"><name pos:start="65:44" pos:end="65:47">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:26"><expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:13">aiocb</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:21">active</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <literal type="number" pos:start="67:25" pos:end="67:25">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:20">idle_threads</name><operator pos:start="69:21" pos:end="69:22">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:28"><expr pos:start="71:9" pos:end="71:27"><call pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:20">mutex_unlock</name><argument_list pos:start="71:21" pos:end="71:27">(<argument pos:start="71:22" pos:end="71:26"><expr pos:start="71:22" pos:end="71:26"><operator pos:start="71:22" pos:end="71:22">&amp;</operator><name pos:start="71:23" pos:end="71:26">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="75:9" pos:end="99:9">switch <condition pos:start="75:16" pos:end="75:32">(<expr pos:start="75:17" pos:end="75:31"><name pos:start="75:17" pos:end="75:31"><name pos:start="75:17" pos:end="75:21">aiocb</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:31">aio_type</name></name></expr>)</condition> <block pos:start="75:34" pos:end="99:9">{<block_content pos:start="77:9" pos:end="97:22">

        <case pos:start="77:9" pos:end="77:28">case <expr pos:start="77:14" pos:end="77:27"><name pos:start="77:14" pos:end="77:27">QEMU_PAIO_READ</name></expr>:</case>

        <case pos:start="79:9" pos:end="79:29">case <expr pos:start="79:14" pos:end="79:28"><name pos:start="79:14" pos:end="79:28">QEMU_PAIO_WRITE</name></expr>:</case>

		<expr_stmt pos:start="81:17" pos:end="81:45"><expr pos:start="81:17" pos:end="81:44"><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:44"><name pos:start="81:23" pos:end="81:37">handle_aiocb_rw</name><argument_list pos:start="81:38" pos:end="81:44">(<argument pos:start="81:39" pos:end="81:43"><expr pos:start="81:39" pos:end="81:43"><name pos:start="81:39" pos:end="81:43">aiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="83:17" pos:end="83:22">break;</break>

        <case pos:start="85:9" pos:end="85:29">case <expr pos:start="85:14" pos:end="85:28"><name pos:start="85:14" pos:end="85:28">QEMU_PAIO_IOCTL</name></expr>:</case>

		<expr_stmt pos:start="87:17" pos:end="87:48"><expr pos:start="87:17" pos:end="87:47"><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="87:47"><name pos:start="87:23" pos:end="87:40">handle_aiocb_ioctl</name><argument_list pos:start="87:41" pos:end="87:47">(<argument pos:start="87:42" pos:end="87:46"><expr pos:start="87:42" pos:end="87:46"><name pos:start="87:42" pos:end="87:46">aiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="89:17" pos:end="89:22">break;</break>

	<default pos:start="91:9" pos:end="91:16">default:</default>

		<expr_stmt pos:start="93:17" pos:end="93:81"><expr pos:start="93:17" pos:end="93:80"><call pos:start="93:17" pos:end="93:80"><name pos:start="93:17" pos:end="93:23">fprintf</name><argument_list pos:start="93:24" pos:end="93:80">(<argument pos:start="93:25" pos:end="93:30"><expr pos:start="93:25" pos:end="93:30"><name pos:start="93:25" pos:end="93:30">stderr</name></expr></argument>, <argument pos:start="93:33" pos:end="93:62"><expr pos:start="93:33" pos:end="93:62"><literal type="string" pos:start="93:33" pos:end="93:62">"invalid aio request (0x%x)\n"</literal></expr></argument>, <argument pos:start="93:65" pos:end="93:79"><expr pos:start="93:65" pos:end="93:79"><name pos:start="93:65" pos:end="93:79"><name pos:start="93:65" pos:end="93:69">aiocb</name><operator pos:start="93:70" pos:end="93:71">-&gt;</operator><name pos:start="93:72" pos:end="93:79">aio_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="95:17" pos:end="95:30"><expr pos:start="95:17" pos:end="95:29"><name pos:start="95:17" pos:end="95:19">ret</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <operator pos:start="95:23" pos:end="95:23">-</operator><name pos:start="95:24" pos:end="95:29">EINVAL</name></expr>;</expr_stmt>

		<break pos:start="97:17" pos:end="97:22">break;</break>

	</block_content>}</block></switch>



        <expr_stmt pos:start="103:9" pos:end="103:26"><expr pos:start="103:9" pos:end="103:25"><call pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:18">mutex_lock</name><argument_list pos:start="103:19" pos:end="103:25">(<argument pos:start="103:20" pos:end="103:24"><expr pos:start="103:20" pos:end="103:24"><operator pos:start="103:20" pos:end="103:20">&amp;</operator><name pos:start="103:21" pos:end="103:24">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:25"><expr pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:13">aiocb</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:18">ret</name></name> <operator pos:start="105:20" pos:end="105:20">=</operator> <name pos:start="105:22" pos:end="105:24">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:23"><expr pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:20">idle_threads</name><operator pos:start="107:21" pos:end="107:22">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:28"><expr pos:start="109:9" pos:end="109:27"><call pos:start="109:9" pos:end="109:27"><name pos:start="109:9" pos:end="109:20">mutex_unlock</name><argument_list pos:start="109:21" pos:end="109:27">(<argument pos:start="109:22" pos:end="109:26"><expr pos:start="109:22" pos:end="109:26"><operator pos:start="109:22" pos:end="109:22">&amp;</operator><name pos:start="109:23" pos:end="109:26">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="113:9" pos:end="113:59"><if pos:start="113:9" pos:end="113:59">if <condition pos:start="113:12" pos:end="113:39">(<expr pos:start="113:13" pos:end="113:38"><call pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:16">kill</name><argument_list pos:start="113:17" pos:end="113:38">(<argument pos:start="113:18" pos:end="113:20"><expr pos:start="113:18" pos:end="113:20"><name pos:start="113:18" pos:end="113:20">pid</name></expr></argument>, <argument pos:start="113:23" pos:end="113:37"><expr pos:start="113:23" pos:end="113:37"><name pos:start="113:23" pos:end="113:37"><name pos:start="113:23" pos:end="113:27">aiocb</name><operator pos:start="113:28" pos:end="113:29">-&gt;</operator><name pos:start="113:30" pos:end="113:37">ev_signo</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="113:41" pos:end="113:59"><block_content pos:start="113:41" pos:end="113:59"> <expr_stmt pos:start="113:41" pos:end="113:59"><expr pos:start="113:41" pos:end="113:58"><call pos:start="113:41" pos:end="113:58"><name pos:start="113:41" pos:end="113:43">die</name><argument_list pos:start="113:44" pos:end="113:58">(<argument pos:start="113:45" pos:end="113:57"><expr pos:start="113:45" pos:end="113:57"><literal type="string" pos:start="113:45" pos:end="113:57">"kill failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="119:5" pos:end="119:19"><expr pos:start="119:5" pos:end="119:18"><name pos:start="119:5" pos:end="119:16">idle_threads</name><operator pos:start="119:17" pos:end="119:18">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:18"><expr pos:start="121:5" pos:end="121:17"><name pos:start="121:5" pos:end="121:15">cur_threads</name><operator pos:start="121:16" pos:end="121:17">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:24"><expr pos:start="123:5" pos:end="123:23"><call pos:start="123:5" pos:end="123:23"><name pos:start="123:5" pos:end="123:16">mutex_unlock</name><argument_list pos:start="123:17" pos:end="123:23">(<argument pos:start="123:18" pos:end="123:22"><expr pos:start="123:18" pos:end="123:22"><operator pos:start="123:18" pos:end="123:18">&amp;</operator><name pos:start="123:19" pos:end="123:22">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="127:5" pos:end="127:16">return <expr pos:start="127:12" pos:end="127:15"><name pos:start="127:12" pos:end="127:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
