<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22843.c" pos:tabs="8"><function pos:start="1:1" pos:end="68:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">spapr_cpu_init</name><parameter_list pos:start="1:27" pos:end="3:40">(<parameter pos:start="1:28" pos:end="1:51"><decl pos:start="1:28" pos:end="1:51"><type pos:start="1:28" pos:end="1:51"><name pos:start="1:28" pos:end="1:44">sPAPRMachineState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">spapr</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:63">PowerPCCPU</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">cpu</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:32">Error</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier><modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="68:1">{<block_content pos:start="7:5" pos:end="66:25">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUPPCState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cs</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><call pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:22">CPU</name><argument_list pos:start="9:23" pos:end="9:27">(<argument pos:start="9:24" pos:end="9:26"><expr pos:start="9:24" pos:end="9:26"><name pos:start="9:24" pos:end="9:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:44">/* Set time-base frequency to 512 MHz */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:46"><expr pos:start="17:5" pos:end="17:45"><call pos:start="17:5" pos:end="17:45"><name pos:start="17:5" pos:end="17:19">cpu_ppc_tb_init</name><argument_list pos:start="17:20" pos:end="17:45">(<argument pos:start="17:21" pos:end="17:23"><expr pos:start="17:21" pos:end="17:23"><name pos:start="17:21" pos:end="17:23">env</name></expr></argument>, <argument pos:start="17:26" pos:end="17:44"><expr pos:start="17:26" pos:end="17:44"><name pos:start="17:26" pos:end="17:44">SPAPR_TIMEBASE_FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:40">/* Enable PAPR mode in TCG or KVM */</comment>


    <expr_stmt pos:start="24:5" pos:end="24:26"><expr pos:start="24:5" pos:end="24:25"><call pos:start="24:5" pos:end="24:25"><name pos:start="24:5" pos:end="24:20">cpu_ppc_set_papr</name><argument_list pos:start="24:21" pos:end="24:25">(<argument pos:start="24:22" pos:end="24:24"><expr pos:start="24:22" pos:end="24:24"><name pos:start="24:22" pos:end="24:24">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="28:5" pos:end="44:5"><if pos:start="28:5" pos:end="44:5">if <condition pos:start="28:8" pos:end="28:24">(<expr pos:start="28:9" pos:end="28:23"><name pos:start="28:9" pos:end="28:23"><name pos:start="28:9" pos:end="28:11">cpu</name><operator pos:start="28:12" pos:end="28:13">-&gt;</operator><name pos:start="28:14" pos:end="28:23">max_compat</name></name></expr>)</condition> <block pos:start="28:26" pos:end="44:5">{<block_content pos:start="30:9" pos:end="42:9">

        <decl_stmt pos:start="30:9" pos:end="30:32"><decl pos:start="30:9" pos:end="30:31"><type pos:start="30:9" pos:end="30:15"><name pos:start="30:9" pos:end="30:13">Error</name> <modifier pos:start="30:15" pos:end="30:15">*</modifier></type><name pos:start="30:16" pos:end="30:24">local_err</name> <init pos:start="30:26" pos:end="30:31">= <expr pos:start="30:28" pos:end="30:31"><name pos:start="30:28" pos:end="30:31">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="34:9" pos:end="34:57"><expr pos:start="34:9" pos:end="34:56"><call pos:start="34:9" pos:end="34:56"><name pos:start="34:9" pos:end="34:22">ppc_set_compat</name><argument_list pos:start="34:23" pos:end="34:56">(<argument pos:start="34:24" pos:end="34:26"><expr pos:start="34:24" pos:end="34:26"><name pos:start="34:24" pos:end="34:26">cpu</name></expr></argument>, <argument pos:start="34:29" pos:end="34:43"><expr pos:start="34:29" pos:end="34:43"><name pos:start="34:29" pos:end="34:43"><name pos:start="34:29" pos:end="34:31">cpu</name><operator pos:start="34:32" pos:end="34:33">-&gt;</operator><name pos:start="34:34" pos:end="34:43">max_compat</name></name></expr></argument>, <argument pos:start="34:46" pos:end="34:55"><expr pos:start="34:46" pos:end="34:55"><operator pos:start="34:46" pos:end="34:46">&amp;</operator><name pos:start="34:47" pos:end="34:55">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="36:9" pos:end="42:9"><if pos:start="36:9" pos:end="42:9">if <condition pos:start="36:12" pos:end="36:22">(<expr pos:start="36:13" pos:end="36:21"><name pos:start="36:13" pos:end="36:21">local_err</name></expr>)</condition> <block pos:start="36:24" pos:end="42:9">{<block_content pos:start="38:13" pos:end="40:19">

            <expr_stmt pos:start="38:13" pos:end="38:45"><expr pos:start="38:13" pos:end="38:44"><call pos:start="38:13" pos:end="38:44"><name pos:start="38:13" pos:end="38:27">error_propagate</name><argument_list pos:start="38:28" pos:end="38:44">(<argument pos:start="38:29" pos:end="38:32"><expr pos:start="38:29" pos:end="38:32"><name pos:start="38:29" pos:end="38:32">errp</name></expr></argument>, <argument pos:start="38:35" pos:end="38:43"><expr pos:start="38:35" pos:end="38:43"><name pos:start="38:35" pos:end="38:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="40:13" pos:end="40:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="48:5" pos:end="48:43">/* Set NUMA node for the added CPUs  */</comment>

    <expr_stmt pos:start="50:5" pos:end="50:45"><expr pos:start="50:5" pos:end="50:44"><name pos:start="50:5" pos:end="50:5">i</name> <operator pos:start="50:7" pos:end="50:7">=</operator> <call pos:start="50:9" pos:end="50:44"><name pos:start="50:9" pos:end="50:29">numa_get_node_for_cpu</name><argument_list pos:start="50:30" pos:end="50:44">(<argument pos:start="50:31" pos:end="50:43"><expr pos:start="50:31" pos:end="50:43"><name pos:start="50:31" pos:end="50:43"><name pos:start="50:31" pos:end="50:32">cs</name><operator pos:start="50:33" pos:end="50:34">-&gt;</operator><name pos:start="50:35" pos:end="50:43">cpu_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="52:5" pos:end="56:5"><if pos:start="52:5" pos:end="56:5">if <condition pos:start="52:8" pos:end="52:26">(<expr pos:start="52:9" pos:end="52:25"><name pos:start="52:9" pos:end="52:9">i</name> <operator pos:start="52:11" pos:end="52:11">&lt;</operator> <name pos:start="52:13" pos:end="52:25">nb_numa_nodes</name></expr>)</condition> <block pos:start="52:28" pos:end="56:5">{<block_content pos:start="54:13" pos:end="54:30">

            <expr_stmt pos:start="54:13" pos:end="54:30"><expr pos:start="54:13" pos:end="54:29"><name pos:start="54:13" pos:end="54:25"><name pos:start="54:13" pos:end="54:14">cs</name><operator pos:start="54:15" pos:end="54:16">-&gt;</operator><name pos:start="54:17" pos:end="54:25">numa_node</name></name> <operator pos:start="54:27" pos:end="54:27">=</operator> <name pos:start="54:29" pos:end="54:29">i</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="60:5" pos:end="60:37"><expr pos:start="60:5" pos:end="60:36"><call pos:start="60:5" pos:end="60:36"><name pos:start="60:5" pos:end="60:18">xics_cpu_setup</name><argument_list pos:start="60:19" pos:end="60:36">(<argument pos:start="60:20" pos:end="60:30"><expr pos:start="60:20" pos:end="60:30"><name pos:start="60:20" pos:end="60:30"><name pos:start="60:20" pos:end="60:24">spapr</name><operator pos:start="60:25" pos:end="60:26">-&gt;</operator><name pos:start="60:27" pos:end="60:30">xics</name></name></expr></argument>, <argument pos:start="60:33" pos:end="60:35"><expr pos:start="60:33" pos:end="60:35"><name pos:start="60:33" pos:end="60:35">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="64:5" pos:end="64:46"><expr pos:start="64:5" pos:end="64:45"><call pos:start="64:5" pos:end="64:45"><name pos:start="64:5" pos:end="64:23">qemu_register_reset</name><argument_list pos:start="64:24" pos:end="64:45">(<argument pos:start="64:25" pos:end="64:39"><expr pos:start="64:25" pos:end="64:39"><name pos:start="64:25" pos:end="64:39">spapr_cpu_reset</name></expr></argument>, <argument pos:start="64:42" pos:end="64:44"><expr pos:start="64:42" pos:end="64:44"><name pos:start="64:42" pos:end="64:44">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="66:5" pos:end="66:25"><expr pos:start="66:5" pos:end="66:24"><call pos:start="66:5" pos:end="66:24"><name pos:start="66:5" pos:end="66:19">spapr_cpu_reset</name><argument_list pos:start="66:20" pos:end="66:24">(<argument pos:start="66:21" pos:end="66:23"><expr pos:start="66:21" pos:end="66:23"><name pos:start="66:21" pos:end="66:23">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
