<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14431.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">test_qga_guest_exec</name><parameter_list pos:start="1:32" pos:end="1:50">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:45">gconstpointer</name></type> <name pos:start="1:47" pos:end="1:49">fix</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:17">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:23"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:21">TestFixture</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:30">fixture</name> <init pos:start="5:32" pos:end="5:36">= <expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">fix</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">QDict</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:14">ret</name></decl>, <decl pos:start="7:17" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:11"><modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:15">gchar</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">out</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">guchar</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:19">decoded</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:15">pid</name></decl>, <decl pos:start="13:18" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:18" pos:end="13:20">now</name></decl>, <decl pos:start="13:23" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:23" pos:end="13:30">exitcode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">gsize</name></type> <name pos:start="15:11" pos:end="15:13">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:15">exited</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:29">/* exec 'echo foo bar' */</comment>

    <expr_stmt pos:start="23:5" pos:end="27:48"><expr pos:start="23:5" pos:end="27:47"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="27:47"><name pos:start="23:11" pos:end="23:16">qmp_fd</name><argument_list pos:start="23:17" pos:end="27:47">(<argument pos:start="23:18" pos:end="23:28"><expr pos:start="23:18" pos:end="23:28"><name pos:start="23:18" pos:end="23:28"><name pos:start="23:18" pos:end="23:24">fixture</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:28">fd</name></name></expr></argument>, <argument pos:start="23:31" pos:end="27:46"><expr pos:start="23:31" pos:end="27:46"><literal type="string" pos:start="23:31" pos:end="23:72">"{'execute': 'guest-exec', 'arguments': {"</literal>

                 <literal type="string" pos:start="25:18" pos:end="25:75">" 'path': '/bin/echo', 'arg': [ '-n', '\" test_str \"' ],"</literal>

                 <literal type="string" pos:start="27:18" pos:end="27:46">" 'capture-output': true } }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:26"><expr pos:start="29:5" pos:end="29:25"><call pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:20">g_assert_nonnull</name><argument_list pos:start="29:21" pos:end="29:25">(<argument pos:start="29:22" pos:end="29:24"><expr pos:start="29:22" pos:end="29:24"><name pos:start="29:22" pos:end="29:24">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><call pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:23">qmp_assert_no_error</name><argument_list pos:start="31:24" pos:end="31:28">(<argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:7">val</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:40"><name pos:start="33:11" pos:end="33:25">qdict_get_qdict</name><argument_list pos:start="33:26" pos:end="33:40">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">ret</name></expr></argument>, <argument pos:start="33:32" pos:end="33:39"><expr pos:start="33:32" pos:end="33:39"><literal type="string" pos:start="33:32" pos:end="33:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:7">pid</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:35"><name pos:start="35:11" pos:end="35:23">qdict_get_int</name><argument_list pos:start="35:24" pos:end="35:35">(<argument pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:27">val</name></expr></argument>, <argument pos:start="35:30" pos:end="35:34"><expr pos:start="35:30" pos:end="35:34"><literal type="string" pos:start="35:30" pos:end="35:34">"pid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><call pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:19">g_assert_cmpint</name><argument_list pos:start="37:20" pos:end="37:30">(<argument pos:start="37:21" pos:end="37:23"><expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">pid</name></expr></argument>, <argument pos:start="37:26" pos:end="37:26"><expr pos:start="37:26" pos:end="37:26"><operator pos:start="37:26" pos:end="37:26">&gt;</operator></expr></argument>, <argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><literal type="number" pos:start="37:29" pos:end="37:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><call pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:11">QDECREF</name><argument_list pos:start="39:12" pos:end="39:16">(<argument pos:start="39:13" pos:end="39:15"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:29">/* wait for completion */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:7">now</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:32"><name pos:start="45:11" pos:end="45:30">g_get_monotonic_time</name><argument_list pos:start="45:31" pos:end="45:32">()</argument_list></call></expr>;</expr_stmt>

    <do pos:start="47:5" pos:end="67:68">do <block pos:start="47:8" pos:end="65:5">{<block_content pos:start="49:9" pos:end="63:9">

        <expr_stmt pos:start="49:9" pos:end="51:69"><expr pos:start="49:9" pos:end="51:68"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="51:68"><name pos:start="49:15" pos:end="49:20">qmp_fd</name><argument_list pos:start="49:21" pos:end="51:68">(<argument pos:start="49:22" pos:end="49:32"><expr pos:start="49:22" pos:end="49:32"><name pos:start="49:22" pos:end="49:32"><name pos:start="49:22" pos:end="49:28">fixture</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:32">fd</name></name></expr></argument>, <argument pos:start="49:35" pos:end="51:62"><expr pos:start="49:35" pos:end="51:62"><literal type="string" pos:start="49:35" pos:end="49:68">"{'execute': 'guest-exec-status',"</literal>

                     <literal type="string" pos:start="51:22" pos:end="51:47">" 'arguments': { 'pid': %"</literal> <name pos:start="51:49" pos:end="51:54">PRId64</name> <literal type="string" pos:start="51:56" pos:end="51:62">"  } }"</literal></expr></argument>, <argument pos:start="51:65" pos:end="51:67"><expr pos:start="51:65" pos:end="51:67"><name pos:start="51:65" pos:end="51:67">pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><call pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:24">g_assert_nonnull</name><argument_list pos:start="53:25" pos:end="53:29">(<argument pos:start="53:26" pos:end="53:28"><expr pos:start="53:26" pos:end="53:28"><name pos:start="53:26" pos:end="53:28">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:45"><expr pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:11">val</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:44"><name pos:start="55:15" pos:end="55:29">qdict_get_qdict</name><argument_list pos:start="55:30" pos:end="55:44">(<argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">ret</name></expr></argument>, <argument pos:start="55:36" pos:end="55:43"><expr pos:start="55:36" pos:end="55:43"><literal type="string" pos:start="55:36" pos:end="55:43">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:14">exited</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:46"><name pos:start="57:18" pos:end="57:31">qdict_get_bool</name><argument_list pos:start="57:32" pos:end="57:46">(<argument pos:start="57:33" pos:end="57:35"><expr pos:start="57:33" pos:end="57:35"><name pos:start="57:33" pos:end="57:35">val</name></expr></argument>, <argument pos:start="57:38" pos:end="57:45"><expr pos:start="57:38" pos:end="57:45"><literal type="string" pos:start="57:38" pos:end="57:45">"exited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:20">(<expr pos:start="59:13" pos:end="59:19"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:19">exited</name></expr>)</condition> <block pos:start="59:22" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:25">

            <expr_stmt pos:start="61:13" pos:end="61:25"><expr pos:start="61:13" pos:end="61:24"><call pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:19">QDECREF</name><argument_list pos:start="61:20" pos:end="61:24">(<argument pos:start="61:21" pos:end="61:23"><expr pos:start="61:21" pos:end="61:23"><name pos:start="61:21" pos:end="61:23">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="65:13" pos:end="67:67">(<expr pos:start="65:14" pos:end="67:66"><operator pos:start="65:14" pos:end="65:14">!</operator><name pos:start="65:15" pos:end="65:20">exited</name> <operator pos:start="65:22" pos:end="65:23">&amp;&amp;</operator>

             <call pos:start="67:14" pos:end="67:35"><name pos:start="67:14" pos:end="67:33">g_get_monotonic_time</name><argument_list pos:start="67:34" pos:end="67:35">()</argument_list></call> <operator pos:start="67:37" pos:end="67:37">&lt;</operator> <name pos:start="67:39" pos:end="67:41">now</name> <operator pos:start="67:43" pos:end="67:43">+</operator> <literal type="number" pos:start="67:45" pos:end="67:45">5</literal> <operator pos:start="67:47" pos:end="67:47">*</operator> <name pos:start="67:49" pos:end="67:66">G_TIME_SPAN_SECOND</name></expr>)</condition>;</do>

    <expr_stmt pos:start="69:5" pos:end="69:21"><expr pos:start="69:5" pos:end="69:20"><call pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:12">g_assert</name><argument_list pos:start="69:13" pos:end="69:20">(<argument pos:start="69:14" pos:end="69:19"><expr pos:start="69:14" pos:end="69:19"><name pos:start="69:14" pos:end="69:19">exited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:22">/* check stdout */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:46"><expr pos:start="75:5" pos:end="75:45"><name pos:start="75:5" pos:end="75:12">exitcode</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <call pos:start="75:16" pos:end="75:45"><name pos:start="75:16" pos:end="75:28">qdict_get_int</name><argument_list pos:start="75:29" pos:end="75:45">(<argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><name pos:start="75:30" pos:end="75:32">val</name></expr></argument>, <argument pos:start="75:35" pos:end="75:44"><expr pos:start="75:35" pos:end="75:44"><literal type="string" pos:start="75:35" pos:end="75:44">"exitcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:37"><expr pos:start="77:5" pos:end="77:36"><call pos:start="77:5" pos:end="77:36"><name pos:start="77:5" pos:end="77:19">g_assert_cmpint</name><argument_list pos:start="77:20" pos:end="77:36">(<argument pos:start="77:21" pos:end="77:28"><expr pos:start="77:21" pos:end="77:28"><name pos:start="77:21" pos:end="77:28">exitcode</name></expr></argument>, <argument pos:start="77:31" pos:end="77:32"><expr pos:start="77:31" pos:end="77:32"><operator pos:start="77:31" pos:end="77:32">==</operator></expr></argument>, <argument pos:start="77:35" pos:end="77:35"><expr pos:start="77:35" pos:end="77:35"><literal type="number" pos:start="77:35" pos:end="77:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:41"><expr pos:start="79:5" pos:end="79:40"><name pos:start="79:5" pos:end="79:7">out</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:40"><name pos:start="79:11" pos:end="79:23">qdict_get_str</name><argument_list pos:start="79:24" pos:end="79:40">(<argument pos:start="79:25" pos:end="79:27"><expr pos:start="79:25" pos:end="79:27"><name pos:start="79:25" pos:end="79:27">val</name></expr></argument>, <argument pos:start="79:30" pos:end="79:39"><expr pos:start="79:30" pos:end="79:39"><literal type="string" pos:start="79:30" pos:end="79:39">"out-data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:41"><expr pos:start="81:5" pos:end="81:40"><name pos:start="81:5" pos:end="81:11">decoded</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:40"><name pos:start="81:15" pos:end="81:29">g_base64_decode</name><argument_list pos:start="81:30" pos:end="81:40">(<argument pos:start="81:31" pos:end="81:33"><expr pos:start="81:31" pos:end="81:33"><name pos:start="81:31" pos:end="81:33">out</name></expr></argument>, <argument pos:start="81:36" pos:end="81:39"><expr pos:start="81:36" pos:end="81:39"><operator pos:start="81:36" pos:end="81:36">&amp;</operator><name pos:start="81:37" pos:end="81:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><call pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:19">g_assert_cmpint</name><argument_list pos:start="83:20" pos:end="83:32">(<argument pos:start="83:21" pos:end="83:23"><expr pos:start="83:21" pos:end="83:23"><name pos:start="83:21" pos:end="83:23">len</name></expr></argument>, <argument pos:start="83:26" pos:end="83:27"><expr pos:start="83:26" pos:end="83:27"><operator pos:start="83:26" pos:end="83:27">==</operator></expr></argument>, <argument pos:start="83:30" pos:end="83:31"><expr pos:start="83:30" pos:end="83:31"><literal type="number" pos:start="83:30" pos:end="83:31">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:59"><expr pos:start="85:5" pos:end="85:58"><call pos:start="85:5" pos:end="85:58"><name pos:start="85:5" pos:end="85:19">g_assert_cmpstr</name><argument_list pos:start="85:20" pos:end="85:58">(<argument pos:start="85:21" pos:end="85:35"><expr pos:start="85:21" pos:end="85:35"><operator pos:start="85:21" pos:end="85:21">(</operator><name pos:start="85:22" pos:end="85:25">char</name> <operator pos:start="85:27" pos:end="85:27">*</operator><operator pos:start="85:28" pos:end="85:28">)</operator><name pos:start="85:29" pos:end="85:35">decoded</name></expr></argument>, <argument pos:start="85:38" pos:end="85:39"><expr pos:start="85:38" pos:end="85:39"><operator pos:start="85:38" pos:end="85:39">==</operator></expr></argument>, <argument pos:start="85:42" pos:end="85:57"><expr pos:start="85:42" pos:end="85:57"><literal type="string" pos:start="85:42" pos:end="85:57">"\" test_str \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:20"><expr pos:start="87:5" pos:end="87:19"><call pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:10">g_free</name><argument_list pos:start="87:11" pos:end="87:19">(<argument pos:start="87:12" pos:end="87:18"><expr pos:start="87:12" pos:end="87:18"><name pos:start="87:12" pos:end="87:18">decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:17"><expr pos:start="89:5" pos:end="89:16"><call pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:11">QDECREF</name><argument_list pos:start="89:12" pos:end="89:16">(<argument pos:start="89:13" pos:end="89:15"><expr pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
