<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5641.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">GuestExec</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:25">qmp_guest_exec</name><parameter_list pos:start="1:26" pos:end="11:35">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">path</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:27">bool</name></type> <name pos:start="3:29" pos:end="3:35">has_arg</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:44">strList</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:49">arg</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:35"><decl pos:start="5:24" pos:end="5:35"><type pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:27">bool</name></type> <name pos:start="5:29" pos:end="5:35">has_env</name></decl></parameter>, <parameter pos:start="5:38" pos:end="5:49"><decl pos:start="5:38" pos:end="5:49"><type pos:start="5:38" pos:end="5:49"><name pos:start="5:38" pos:end="5:44">strList</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:49">env</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:42"><decl pos:start="7:24" pos:end="7:42"><type pos:start="7:24" pos:end="7:42"><name pos:start="7:24" pos:end="7:27">bool</name></type> <name pos:start="7:29" pos:end="7:42">has_input_data</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:66"><decl pos:start="7:45" pos:end="7:66"><type pos:start="7:45" pos:end="7:66"><specifier pos:start="7:45" pos:end="7:49">const</specifier> <name pos:start="7:51" pos:end="7:54">char</name> <modifier pos:start="7:56" pos:end="7:56">*</modifier></type><name pos:start="7:57" pos:end="7:66">input_data</name></decl></parameter>,

                       <parameter pos:start="9:24" pos:end="9:46"><decl pos:start="9:24" pos:end="9:46"><type pos:start="9:24" pos:end="9:46"><name pos:start="9:24" pos:end="9:27">bool</name></type> <name pos:start="9:29" pos:end="9:46">has_capture_output</name></decl></parameter>, <parameter pos:start="9:49" pos:end="9:67"><decl pos:start="9:49" pos:end="9:67"><type pos:start="9:49" pos:end="9:67"><name pos:start="9:49" pos:end="9:52">bool</name></type> <name pos:start="9:54" pos:end="9:67">capture_output</name></decl></parameter>,

                       <parameter pos:start="11:24" pos:end="11:34"><decl pos:start="11:24" pos:end="11:34"><type pos:start="11:24" pos:end="11:34"><name pos:start="11:24" pos:end="11:28">Error</name> <modifier pos:start="11:30" pos:end="11:30">*</modifier><modifier pos:start="11:31" pos:end="11:31">*</modifier></type><name pos:start="11:32" pos:end="11:34">err</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="171:1">{<block_content pos:start="15:5" pos:end="169:14">

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">GPid</name></type> <name pos:start="15:10" pos:end="15:12">pid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">GuestExec</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:17">ge</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">GuestExecInfo</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:22">gei</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier><modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:15">argv</name></decl>, <decl pos:start="21:18" pos:end="21:23"><type ref="prev" pos:start="21:5" pos:end="21:11"><modifier pos:start="21:18" pos:end="21:18">*</modifier><modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:23">envp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">strList</name></type> <name pos:start="23:13" pos:end="23:19">arglist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">gboolean</name></type> <name pos:start="25:14" pos:end="25:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">GError</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:16">gerr</name> <init pos:start="27:18" pos:end="27:23">= <expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:31"><decl pos:start="29:5" pos:end="29:14"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">gint</name></type> <name pos:start="29:10" pos:end="29:14">in_fd</name></decl>, <decl pos:start="29:17" pos:end="29:22"><type ref="prev" pos:start="29:5" pos:end="29:8"/><name pos:start="29:17" pos:end="29:22">out_fd</name></decl>, <decl pos:start="29:25" pos:end="29:30"><type ref="prev" pos:start="29:5" pos:end="29:8"/><name pos:start="29:25" pos:end="29:30">err_fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:40"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:14">GIOChannel</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:21">in_ch</name></decl>, <decl pos:start="31:24" pos:end="31:30"><type ref="prev" pos:start="31:5" pos:end="31:16"><modifier pos:start="31:24" pos:end="31:24">*</modifier></type><name pos:start="31:25" pos:end="31:30">out_ch</name></decl>, <decl pos:start="31:33" pos:end="31:39"><type ref="prev" pos:start="31:5" pos:end="31:16"><modifier pos:start="31:33" pos:end="31:33">*</modifier></type><name pos:start="31:34" pos:end="31:39">err_ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:15">GSpawnFlags</name></type> <name pos:start="33:17" pos:end="33:21">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:61"><decl pos:start="35:5" pos:end="35:60"><type pos:start="35:5" pos:end="35:8"><name pos:start="35:5" pos:end="35:8">bool</name></type> <name pos:start="35:10" pos:end="35:19">has_output</name> <init pos:start="35:21" pos:end="35:60">= <expr pos:start="35:23" pos:end="35:60"><operator pos:start="35:23" pos:end="35:23">(</operator><name pos:start="35:24" pos:end="35:41">has_capture_output</name> <operator pos:start="35:43" pos:end="35:44">&amp;&amp;</operator> <name pos:start="35:46" pos:end="35:59">capture_output</name><operator pos:start="35:60" pos:end="35:60">)</operator></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:11">arglist</name><operator pos:start="39:12" pos:end="39:12">.</operator><name pos:start="39:13" pos:end="39:17">value</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><name pos:start="39:22" pos:end="39:25">char</name> <operator pos:start="39:27" pos:end="39:27">*</operator><operator pos:start="39:28" pos:end="39:28">)</operator><name pos:start="39:29" pos:end="39:32">path</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:11">arglist</name><operator pos:start="41:12" pos:end="41:12">.</operator><name pos:start="41:13" pos:end="41:16">next</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <ternary pos:start="41:20" pos:end="41:39"><condition pos:start="41:20" pos:end="41:28"><expr pos:start="41:20" pos:end="41:26"><name pos:start="41:20" pos:end="41:26">has_arg</name></expr> ?</condition><then pos:start="41:30" pos:end="41:32"> <expr pos:start="41:30" pos:end="41:32"><name pos:start="41:30" pos:end="41:32">arg</name></expr> </then><else pos:start="41:34" pos:end="41:39">: <expr pos:start="41:36" pos:end="41:39"><name pos:start="41:36" pos:end="41:39">NULL</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:47"><expr pos:start="45:5" pos:end="45:46"><name pos:start="45:5" pos:end="45:8">argv</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:46"><name pos:start="45:12" pos:end="45:30">guest_exec_get_args</name><argument_list pos:start="45:31" pos:end="45:46">(<argument pos:start="45:32" pos:end="45:39"><expr pos:start="45:32" pos:end="45:39"><operator pos:start="45:32" pos:end="45:32">&amp;</operator><name pos:start="45:33" pos:end="45:39">arglist</name></expr></argument>, <argument pos:start="45:42" pos:end="45:45"><expr pos:start="45:42" pos:end="45:45"><name pos:start="45:42" pos:end="45:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:60"><expr pos:start="47:5" pos:end="47:59"><name pos:start="47:5" pos:end="47:8">envp</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <ternary pos:start="47:12" pos:end="47:59"><condition pos:start="47:12" pos:end="47:20"><expr pos:start="47:12" pos:end="47:18"><name pos:start="47:12" pos:end="47:18">has_env</name></expr> ?</condition><then pos:start="47:22" pos:end="47:52"> <expr pos:start="47:22" pos:end="47:52"><call pos:start="47:22" pos:end="47:52"><name pos:start="47:22" pos:end="47:40">guest_exec_get_args</name><argument_list pos:start="47:41" pos:end="47:52">(<argument pos:start="47:42" pos:end="47:44"><expr pos:start="47:42" pos:end="47:44"><name pos:start="47:42" pos:end="47:44">env</name></expr></argument>, <argument pos:start="47:47" pos:end="47:51"><expr pos:start="47:47" pos:end="47:51"><name pos:start="47:47" pos:end="47:51">false</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="47:54" pos:end="47:59">: <expr pos:start="47:56" pos:end="47:59"><name pos:start="47:56" pos:end="47:59">NULL</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:59"><name pos:start="51:5" pos:end="51:9">flags</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <name pos:start="51:13" pos:end="51:31">G_SPAWN_SEARCH_PATH</name> <operator pos:start="51:33" pos:end="51:33">|</operator> <name pos:start="51:35" pos:end="51:59">G_SPAWN_DO_NOT_REAP_CHILD</name></expr>;</expr_stmt>

<cpp:if pos:start="53:1" pos:end="53:32">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:32"><call pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:22">GLIB_CHECK_VERSION</name><argument_list pos:start="53:23" pos:end="53:32">(<argument pos:start="53:24" pos:end="53:31"><expr pos:start="53:24" pos:end="53:31"><literal type="number" pos:start="53:24" pos:end="53:24">2</literal><operator pos:start="53:25" pos:end="53:25">,</operator> <literal type="number" pos:start="53:27" pos:end="53:28">33</literal><operator pos:start="53:29" pos:end="53:29">,</operator> <literal type="number" pos:start="53:31" pos:end="53:31">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="55:5" pos:end="58:0"><expr pos:start="55:5" pos:end="55:42"><name pos:start="55:5" pos:end="55:9">flags</name> <operator pos:start="55:11" pos:end="55:12">|=</operator> <name pos:start="55:14" pos:end="55:42">G_SPAWN_SEARCH_PATH_FROM_ENVP</name></expr>;</expr_stmt>

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:20">(<expr pos:start="59:9" pos:end="59:19"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:19">has_output</name></expr>)</condition> <block pos:start="59:22" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:73">

        <expr_stmt pos:start="61:9" pos:end="61:73"><expr pos:start="61:9" pos:end="61:72"><name pos:start="61:9" pos:end="61:13">flags</name> <operator pos:start="61:15" pos:end="61:16">|=</operator> <name pos:start="61:18" pos:end="61:43">G_SPAWN_STDOUT_TO_DEV_NULL</name> <operator pos:start="61:45" pos:end="61:45">|</operator> <name pos:start="61:47" pos:end="61:72">G_SPAWN_STDERR_TO_DEV_NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="71:77"><expr pos:start="67:5" pos:end="71:76"><name pos:start="67:5" pos:end="67:7">ret</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="71:76"><name pos:start="67:11" pos:end="67:34">g_spawn_async_with_pipes</name><argument_list pos:start="67:35" pos:end="71:76">(<argument pos:start="67:36" pos:end="67:39"><expr pos:start="67:36" pos:end="67:39"><name pos:start="67:36" pos:end="67:39">NULL</name></expr></argument>, <argument pos:start="67:42" pos:end="67:45"><expr pos:start="67:42" pos:end="67:45"><name pos:start="67:42" pos:end="67:45">argv</name></expr></argument>, <argument pos:start="67:48" pos:end="67:51"><expr pos:start="67:48" pos:end="67:51"><name pos:start="67:48" pos:end="67:51">envp</name></expr></argument>, <argument pos:start="67:54" pos:end="67:58"><expr pos:start="67:54" pos:end="67:58"><name pos:start="67:54" pos:end="67:58">flags</name></expr></argument>,

            <argument pos:start="69:13" pos:end="69:33"><expr pos:start="69:13" pos:end="69:33"><name pos:start="69:13" pos:end="69:33">guest_exec_task_setup</name></expr></argument>, <argument pos:start="69:36" pos:end="69:39"><expr pos:start="69:36" pos:end="69:39"><name pos:start="69:36" pos:end="69:39">NULL</name></expr></argument>, <argument pos:start="69:42" pos:end="69:45"><expr pos:start="69:42" pos:end="69:45"><operator pos:start="69:42" pos:end="69:42">&amp;</operator><name pos:start="69:43" pos:end="69:45">pid</name></expr></argument>, <argument pos:start="69:48" pos:end="69:77"><expr pos:start="69:48" pos:end="69:77"><ternary pos:start="69:48" pos:end="69:77"><condition pos:start="69:48" pos:end="69:63"><expr pos:start="69:48" pos:end="69:61"><name pos:start="69:48" pos:end="69:61">has_input_data</name></expr> ?</condition><then pos:start="69:65" pos:end="69:70"> <expr pos:start="69:65" pos:end="69:70"><operator pos:start="69:65" pos:end="69:65">&amp;</operator><name pos:start="69:66" pos:end="69:70">in_fd</name></expr> </then><else pos:start="69:72" pos:end="69:77">: <expr pos:start="69:74" pos:end="69:77"><name pos:start="69:74" pos:end="69:77">NULL</name></expr></else></ternary></expr></argument>,

            <argument pos:start="71:13" pos:end="71:39"><expr pos:start="71:13" pos:end="71:39"><ternary pos:start="71:13" pos:end="71:39"><condition pos:start="71:13" pos:end="71:24"><expr pos:start="71:13" pos:end="71:22"><name pos:start="71:13" pos:end="71:22">has_output</name></expr> ?</condition><then pos:start="71:26" pos:end="71:32"> <expr pos:start="71:26" pos:end="71:32"><operator pos:start="71:26" pos:end="71:26">&amp;</operator><name pos:start="71:27" pos:end="71:32">out_fd</name></expr> </then><else pos:start="71:34" pos:end="71:39">: <expr pos:start="71:36" pos:end="71:39"><name pos:start="71:36" pos:end="71:39">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="71:42" pos:end="71:68"><expr pos:start="71:42" pos:end="71:68"><ternary pos:start="71:42" pos:end="71:68"><condition pos:start="71:42" pos:end="71:53"><expr pos:start="71:42" pos:end="71:51"><name pos:start="71:42" pos:end="71:51">has_output</name></expr> ?</condition><then pos:start="71:55" pos:end="71:61"> <expr pos:start="71:55" pos:end="71:61"><operator pos:start="71:55" pos:end="71:55">&amp;</operator><name pos:start="71:56" pos:end="71:61">err_fd</name></expr> </then><else pos:start="71:63" pos:end="71:68">: <expr pos:start="71:65" pos:end="71:68"><name pos:start="71:65" pos:end="71:68">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="71:71" pos:end="71:75"><expr pos:start="71:71" pos:end="71:75"><operator pos:start="71:71" pos:end="71:71">&amp;</operator><name pos:start="71:72" pos:end="71:75">gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:13">(<expr pos:start="73:9" pos:end="73:12"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:12">ret</name></expr>)</condition> <block pos:start="73:15" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:18">

        <expr_stmt pos:start="75:9" pos:end="75:64"><expr pos:start="75:9" pos:end="75:63"><call pos:start="75:9" pos:end="75:63"><name pos:start="75:9" pos:end="75:18">error_setg</name><argument_list pos:start="75:19" pos:end="75:63">(<argument pos:start="75:20" pos:end="75:22"><expr pos:start="75:20" pos:end="75:22"><name pos:start="75:20" pos:end="75:22">err</name></expr></argument>, <argument pos:start="75:25" pos:end="75:47"><expr pos:start="75:25" pos:end="75:47"><name pos:start="75:25" pos:end="75:47">QERR_QGA_COMMAND_FAILED</name></expr></argument>, <argument pos:start="75:50" pos:end="75:62"><expr pos:start="75:50" pos:end="75:62"><name pos:start="75:50" pos:end="75:62"><name pos:start="75:50" pos:end="75:53">gerr</name><operator pos:start="75:54" pos:end="75:55">-&gt;</operator><name pos:start="75:56" pos:end="75:62">message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:27"><expr pos:start="77:9" pos:end="77:26"><call pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:20">g_error_free</name><argument_list pos:start="77:21" pos:end="77:26">(<argument pos:start="77:22" pos:end="77:25"><expr pos:start="77:22" pos:end="77:25"><name pos:start="77:22" pos:end="77:25">gerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:18">goto <name pos:start="79:14" pos:end="79:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:30"><expr pos:start="85:5" pos:end="85:29"><name pos:start="85:5" pos:end="85:6">ge</name> <operator pos:start="85:8" pos:end="85:8">=</operator> <call pos:start="85:10" pos:end="85:29"><name pos:start="85:10" pos:end="85:15">g_new0</name><argument_list pos:start="85:16" pos:end="85:29">(<argument pos:start="85:17" pos:end="85:25"><expr pos:start="85:17" pos:end="85:25"><name pos:start="85:17" pos:end="85:25">GuestExec</name></expr></argument>, <argument pos:start="85:28" pos:end="85:28"><expr pos:start="85:28" pos:end="85:28"><literal type="number" pos:start="85:28" pos:end="85:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:33"><expr pos:start="87:5" pos:end="87:32"><name pos:start="87:5" pos:end="87:11"><name pos:start="87:5" pos:end="87:6">ge</name><operator pos:start="87:7" pos:end="87:8">-&gt;</operator><name pos:start="87:9" pos:end="87:11">pid</name></name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="87:32"><name pos:start="87:15" pos:end="87:27">gpid_to_int64</name><argument_list pos:start="87:28" pos:end="87:32">(<argument pos:start="87:29" pos:end="87:31"><expr pos:start="87:29" pos:end="87:31"><name pos:start="87:29" pos:end="87:31">pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:35"><expr pos:start="91:5" pos:end="91:34"><name pos:start="91:5" pos:end="91:7">gei</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:34"><name pos:start="91:11" pos:end="91:29">guest_exec_info_add</name><argument_list pos:start="91:30" pos:end="91:34">(<argument pos:start="91:31" pos:end="91:33"><expr pos:start="91:31" pos:end="91:33"><name pos:start="91:31" pos:end="91:33">pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:33"><expr pos:start="93:5" pos:end="93:32"><name pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:7">gei</name><operator pos:start="93:8" pos:end="93:9">-&gt;</operator><name pos:start="93:10" pos:end="93:19">has_output</name></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <name pos:start="93:23" pos:end="93:32">has_output</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:56"><expr pos:start="95:5" pos:end="95:55"><call pos:start="95:5" pos:end="95:55"><name pos:start="95:5" pos:end="95:21">g_child_watch_add</name><argument_list pos:start="95:22" pos:end="95:55">(<argument pos:start="95:23" pos:end="95:25"><expr pos:start="95:23" pos:end="95:25"><name pos:start="95:23" pos:end="95:25">pid</name></expr></argument>, <argument pos:start="95:28" pos:end="95:49"><expr pos:start="95:28" pos:end="95:49"><name pos:start="95:28" pos:end="95:49">guest_exec_child_watch</name></expr></argument>, <argument pos:start="95:52" pos:end="95:54"><expr pos:start="95:52" pos:end="95:54"><name pos:start="95:52" pos:end="95:54">gei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="121:5"><if pos:start="99:5" pos:end="121:5">if <condition pos:start="99:8" pos:end="99:23">(<expr pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:22">has_input_data</name></expr>)</condition> <block pos:start="99:25" pos:end="121:5">{<block_content pos:start="101:9" pos:end="119:74">

        <expr_stmt pos:start="101:9" pos:end="104:0"><expr pos:start="101:9" pos:end="101:65"><name pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:11">gei</name><operator pos:start="101:12" pos:end="101:13">-&gt;</operator><name pos:start="101:14" pos:end="101:15">in</name><operator pos:start="101:16" pos:end="101:16">.</operator><name pos:start="101:17" pos:end="101:20">data</name></name> <operator pos:start="101:22" pos:end="101:22">=</operator> <call pos:start="101:24" pos:end="101:65"><name pos:start="101:24" pos:end="101:38">g_base64_decode</name><argument_list pos:start="101:39" pos:end="101:65">(<argument pos:start="101:40" pos:end="101:49"><expr pos:start="101:40" pos:end="101:49"><name pos:start="101:40" pos:end="101:49">input_data</name></expr></argument>, <argument pos:start="101:52" pos:end="101:64"><expr pos:start="101:52" pos:end="101:64"><operator pos:start="101:52" pos:end="101:52">&amp;</operator><name pos:start="101:53" pos:end="101:64"><name pos:start="101:53" pos:end="101:55">gei</name><operator pos:start="101:56" pos:end="101:57">-&gt;</operator><name pos:start="101:58" pos:end="101:59">in</name><operator pos:start="101:60" pos:end="101:60">.</operator><name pos:start="101:61" pos:end="101:64">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="103:1" pos:end="103:17">#<cpp:directive pos:start="103:2" pos:end="103:6">ifdef</cpp:directive> <name pos:start="103:8" pos:end="103:17">G_OS_WIN32</name></cpp:ifdef>

        <expr_stmt pos:start="105:9" pos:end="108:0"><expr pos:start="105:9" pos:end="105:48"><name pos:start="105:9" pos:end="105:13">in_ch</name> <operator pos:start="105:15" pos:end="105:15">=</operator> <call pos:start="105:17" pos:end="105:48"><name pos:start="105:17" pos:end="105:41">g_io_channel_win32_new_fd</name><argument_list pos:start="105:42" pos:end="105:48">(<argument pos:start="105:43" pos:end="105:47"><expr pos:start="105:43" pos:end="105:47"><name pos:start="105:43" pos:end="105:47">in_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="107:1" pos:end="107:5">#<cpp:directive pos:start="107:2" pos:end="107:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="109:9" pos:end="112:0"><expr pos:start="109:9" pos:end="109:44"><name pos:start="109:9" pos:end="109:13">in_ch</name> <operator pos:start="109:15" pos:end="109:15">=</operator> <call pos:start="109:17" pos:end="109:44"><name pos:start="109:17" pos:end="109:37">g_io_channel_unix_new</name><argument_list pos:start="109:38" pos:end="109:44">(<argument pos:start="109:39" pos:end="109:43"><expr pos:start="109:39" pos:end="109:43"><name pos:start="109:39" pos:end="109:43">in_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="113:9" pos:end="113:53"><expr pos:start="113:9" pos:end="113:52"><call pos:start="113:9" pos:end="113:52"><name pos:start="113:9" pos:end="113:33">g_io_channel_set_encoding</name><argument_list pos:start="113:34" pos:end="113:52">(<argument pos:start="113:35" pos:end="113:39"><expr pos:start="113:35" pos:end="113:39"><name pos:start="113:35" pos:end="113:39">in_ch</name></expr></argument>, <argument pos:start="113:42" pos:end="113:45"><expr pos:start="113:42" pos:end="113:45"><name pos:start="113:42" pos:end="113:45">NULL</name></expr></argument>, <argument pos:start="113:48" pos:end="113:51"><expr pos:start="113:48" pos:end="113:51"><name pos:start="113:48" pos:end="113:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:48"><expr pos:start="115:9" pos:end="115:47"><call pos:start="115:9" pos:end="115:47"><name pos:start="115:9" pos:end="115:33">g_io_channel_set_buffered</name><argument_list pos:start="115:34" pos:end="115:47">(<argument pos:start="115:35" pos:end="115:39"><expr pos:start="115:35" pos:end="115:39"><name pos:start="115:35" pos:end="115:39">in_ch</name></expr></argument>, <argument pos:start="115:42" pos:end="115:46"><expr pos:start="115:42" pos:end="115:46"><name pos:start="115:42" pos:end="115:46">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:64"><expr pos:start="117:9" pos:end="117:63"><call pos:start="117:9" pos:end="117:63"><name pos:start="117:9" pos:end="117:30">g_io_channel_set_flags</name><argument_list pos:start="117:31" pos:end="117:63">(<argument pos:start="117:32" pos:end="117:36"><expr pos:start="117:32" pos:end="117:36"><name pos:start="117:32" pos:end="117:36">in_ch</name></expr></argument>, <argument pos:start="117:39" pos:end="117:56"><expr pos:start="117:39" pos:end="117:56"><name pos:start="117:39" pos:end="117:56">G_IO_FLAG_NONBLOCK</name></expr></argument>, <argument pos:start="117:59" pos:end="117:62"><expr pos:start="117:59" pos:end="117:62"><name pos:start="117:59" pos:end="117:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:74"><expr pos:start="119:9" pos:end="119:73"><call pos:start="119:9" pos:end="119:73"><name pos:start="119:9" pos:end="119:22">g_io_add_watch</name><argument_list pos:start="119:23" pos:end="119:73">(<argument pos:start="119:24" pos:end="119:28"><expr pos:start="119:24" pos:end="119:28"><name pos:start="119:24" pos:end="119:28">in_ch</name></expr></argument>, <argument pos:start="119:31" pos:end="119:38"><expr pos:start="119:31" pos:end="119:38"><name pos:start="119:31" pos:end="119:38">G_IO_OUT</name></expr></argument>, <argument pos:start="119:41" pos:end="119:62"><expr pos:start="119:41" pos:end="119:62"><name pos:start="119:41" pos:end="119:62">guest_exec_input_watch</name></expr></argument>, <argument pos:start="119:65" pos:end="119:72"><expr pos:start="119:65" pos:end="119:72"><operator pos:start="119:65" pos:end="119:65">&amp;</operator><name pos:start="119:66" pos:end="119:72"><name pos:start="119:66" pos:end="119:68">gei</name><operator pos:start="119:69" pos:end="119:70">-&gt;</operator><name pos:start="119:71" pos:end="119:72">in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="157:5"><if pos:start="125:5" pos:end="157:5">if <condition pos:start="125:8" pos:end="125:19">(<expr pos:start="125:9" pos:end="125:18"><name pos:start="125:9" pos:end="125:18">has_output</name></expr>)</condition> <block pos:start="125:21" pos:end="157:5">{<block_content pos:start="129:9" pos:end="155:52">

<cpp:ifdef pos:start="127:1" pos:end="127:17">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:17">G_OS_WIN32</name></cpp:ifdef>

        <expr_stmt pos:start="129:9" pos:end="129:51"><expr pos:start="129:9" pos:end="129:50"><name pos:start="129:9" pos:end="129:14">out_ch</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <call pos:start="129:18" pos:end="129:50"><name pos:start="129:18" pos:end="129:42">g_io_channel_win32_new_fd</name><argument_list pos:start="129:43" pos:end="129:50">(<argument pos:start="129:44" pos:end="129:49"><expr pos:start="129:44" pos:end="129:49"><name pos:start="129:44" pos:end="129:49">out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="134:0"><expr pos:start="131:9" pos:end="131:50"><name pos:start="131:9" pos:end="131:14">err_ch</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <call pos:start="131:18" pos:end="131:50"><name pos:start="131:18" pos:end="131:42">g_io_channel_win32_new_fd</name><argument_list pos:start="131:43" pos:end="131:50">(<argument pos:start="131:44" pos:end="131:49"><expr pos:start="131:44" pos:end="131:49"><name pos:start="131:44" pos:end="131:49">err_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="133:1" pos:end="133:5">#<cpp:directive pos:start="133:2" pos:end="133:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="135:9" pos:end="135:47"><expr pos:start="135:9" pos:end="135:46"><name pos:start="135:9" pos:end="135:14">out_ch</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <call pos:start="135:18" pos:end="135:46"><name pos:start="135:18" pos:end="135:38">g_io_channel_unix_new</name><argument_list pos:start="135:39" pos:end="135:46">(<argument pos:start="135:40" pos:end="135:45"><expr pos:start="135:40" pos:end="135:45"><name pos:start="135:40" pos:end="135:45">out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="140:0"><expr pos:start="137:9" pos:end="137:46"><name pos:start="137:9" pos:end="137:14">err_ch</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <call pos:start="137:18" pos:end="137:46"><name pos:start="137:18" pos:end="137:38">g_io_channel_unix_new</name><argument_list pos:start="137:39" pos:end="137:46">(<argument pos:start="137:40" pos:end="137:45"><expr pos:start="137:40" pos:end="137:45"><name pos:start="137:40" pos:end="137:45">err_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="139:1" pos:end="139:6">#<cpp:directive pos:start="139:2" pos:end="139:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="141:9" pos:end="141:54"><expr pos:start="141:9" pos:end="141:53"><call pos:start="141:9" pos:end="141:53"><name pos:start="141:9" pos:end="141:33">g_io_channel_set_encoding</name><argument_list pos:start="141:34" pos:end="141:53">(<argument pos:start="141:35" pos:end="141:40"><expr pos:start="141:35" pos:end="141:40"><name pos:start="141:35" pos:end="141:40">out_ch</name></expr></argument>, <argument pos:start="141:43" pos:end="141:46"><expr pos:start="141:43" pos:end="141:46"><name pos:start="141:43" pos:end="141:46">NULL</name></expr></argument>, <argument pos:start="141:49" pos:end="141:52"><expr pos:start="141:49" pos:end="141:52"><name pos:start="141:49" pos:end="141:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:54"><expr pos:start="143:9" pos:end="143:53"><call pos:start="143:9" pos:end="143:53"><name pos:start="143:9" pos:end="143:33">g_io_channel_set_encoding</name><argument_list pos:start="143:34" pos:end="143:53">(<argument pos:start="143:35" pos:end="143:40"><expr pos:start="143:35" pos:end="143:40"><name pos:start="143:35" pos:end="143:40">err_ch</name></expr></argument>, <argument pos:start="143:43" pos:end="143:46"><expr pos:start="143:43" pos:end="143:46"><name pos:start="143:43" pos:end="143:46">NULL</name></expr></argument>, <argument pos:start="143:49" pos:end="143:52"><expr pos:start="143:49" pos:end="143:52"><name pos:start="143:49" pos:end="143:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:49"><expr pos:start="145:9" pos:end="145:48"><call pos:start="145:9" pos:end="145:48"><name pos:start="145:9" pos:end="145:33">g_io_channel_set_buffered</name><argument_list pos:start="145:34" pos:end="145:48">(<argument pos:start="145:35" pos:end="145:40"><expr pos:start="145:35" pos:end="145:40"><name pos:start="145:35" pos:end="145:40">out_ch</name></expr></argument>, <argument pos:start="145:43" pos:end="145:47"><expr pos:start="145:43" pos:end="145:47"><name pos:start="145:43" pos:end="145:47">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:49"><expr pos:start="147:9" pos:end="147:48"><call pos:start="147:9" pos:end="147:48"><name pos:start="147:9" pos:end="147:33">g_io_channel_set_buffered</name><argument_list pos:start="147:34" pos:end="147:48">(<argument pos:start="147:35" pos:end="147:40"><expr pos:start="147:35" pos:end="147:40"><name pos:start="147:35" pos:end="147:40">err_ch</name></expr></argument>, <argument pos:start="147:43" pos:end="147:47"><expr pos:start="147:43" pos:end="147:47"><name pos:start="147:43" pos:end="147:47">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="151:52"><expr pos:start="149:9" pos:end="151:51"><call pos:start="149:9" pos:end="151:51"><name pos:start="149:9" pos:end="149:22">g_io_add_watch</name><argument_list pos:start="149:23" pos:end="151:51">(<argument pos:start="149:24" pos:end="149:29"><expr pos:start="149:24" pos:end="149:29"><name pos:start="149:24" pos:end="149:29">out_ch</name></expr></argument>, <argument pos:start="149:32" pos:end="149:49"><expr pos:start="149:32" pos:end="149:49"><name pos:start="149:32" pos:end="149:38">G_IO_IN</name> <operator pos:start="149:40" pos:end="149:40">|</operator> <name pos:start="149:42" pos:end="149:49">G_IO_HUP</name></expr></argument>,

                <argument pos:start="151:17" pos:end="151:39"><expr pos:start="151:17" pos:end="151:39"><name pos:start="151:17" pos:end="151:39">guest_exec_output_watch</name></expr></argument>, <argument pos:start="151:42" pos:end="151:50"><expr pos:start="151:42" pos:end="151:50"><operator pos:start="151:42" pos:end="151:42">&amp;</operator><name pos:start="151:43" pos:end="151:50"><name pos:start="151:43" pos:end="151:45">gei</name><operator pos:start="151:46" pos:end="151:47">-&gt;</operator><name pos:start="151:48" pos:end="151:50">out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="155:52"><expr pos:start="153:9" pos:end="155:51"><call pos:start="153:9" pos:end="155:51"><name pos:start="153:9" pos:end="153:22">g_io_add_watch</name><argument_list pos:start="153:23" pos:end="155:51">(<argument pos:start="153:24" pos:end="153:29"><expr pos:start="153:24" pos:end="153:29"><name pos:start="153:24" pos:end="153:29">err_ch</name></expr></argument>, <argument pos:start="153:32" pos:end="153:49"><expr pos:start="153:32" pos:end="153:49"><name pos:start="153:32" pos:end="153:38">G_IO_IN</name> <operator pos:start="153:40" pos:end="153:40">|</operator> <name pos:start="153:42" pos:end="153:49">G_IO_HUP</name></expr></argument>,

                <argument pos:start="155:17" pos:end="155:39"><expr pos:start="155:17" pos:end="155:39"><name pos:start="155:17" pos:end="155:39">guest_exec_output_watch</name></expr></argument>, <argument pos:start="155:42" pos:end="155:50"><expr pos:start="155:42" pos:end="155:50"><operator pos:start="155:42" pos:end="155:42">&amp;</operator><name pos:start="155:43" pos:end="155:50"><name pos:start="155:43" pos:end="155:45">gei</name><operator pos:start="155:46" pos:end="155:47">-&gt;</operator><name pos:start="155:48" pos:end="155:50">err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="161:1" pos:end="161:5"><name pos:start="161:1" pos:end="161:4">done</name>:</label>

    <expr_stmt pos:start="163:5" pos:end="163:17"><expr pos:start="163:5" pos:end="163:16"><call pos:start="163:5" pos:end="163:16"><name pos:start="163:5" pos:end="163:10">g_free</name><argument_list pos:start="163:11" pos:end="163:16">(<argument pos:start="163:12" pos:end="163:15"><expr pos:start="163:12" pos:end="163:15"><name pos:start="163:12" pos:end="163:15">argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:17"><expr pos:start="165:5" pos:end="165:16"><call pos:start="165:5" pos:end="165:16"><name pos:start="165:5" pos:end="165:10">g_free</name><argument_list pos:start="165:11" pos:end="165:16">(<argument pos:start="165:12" pos:end="165:15"><expr pos:start="165:12" pos:end="165:15"><name pos:start="165:12" pos:end="165:15">envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="169:5" pos:end="169:14">return <expr pos:start="169:12" pos:end="169:13"><name pos:start="169:12" pos:end="169:13">ge</name></expr>;</return>

</block_content>}</block></function>
</unit>
