<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13500.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">arm_cpu_initfn</name><parameter_list pos:start="1:27" pos:end="1:39">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:35"><name pos:start="1:28" pos:end="1:33">Object</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">obj</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">ARMCPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name> <init pos:start="7:17" pos:end="7:30">= <expr pos:start="7:19" pos:end="7:30"><call pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:25">ARM_CPU</name><argument_list pos:start="7:26" pos:end="7:30">(<argument pos:start="7:27" pos:end="7:29"><expr pos:start="7:27" pos:end="7:29"><name pos:start="7:27" pos:end="7:29">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:15"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <name pos:start="9:12" pos:end="9:15">bool</name></type> <name pos:start="9:17" pos:end="9:22">inited</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:28"><expr pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:6">cs</name><operator pos:start="13:7" pos:end="13:8">-&gt;</operator><name pos:start="13:9" pos:end="13:15">env_ptr</name></name> <operator pos:start="13:17" pos:end="13:17">=</operator> <operator pos:start="13:19" pos:end="13:19">&amp;</operator><name pos:start="13:20" pos:end="13:27"><name pos:start="13:20" pos:end="13:22">cpu</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:27">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:29"><expr pos:start="15:5" pos:end="15:28"><call pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:17">cpu_exec_init</name><argument_list pos:start="15:18" pos:end="15:28">(<argument pos:start="15:19" pos:end="15:27"><expr pos:start="15:19" pos:end="15:27"><operator pos:start="15:19" pos:end="15:19">&amp;</operator><name pos:start="15:20" pos:end="15:27"><name pos:start="15:20" pos:end="15:22">cpu</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:27">env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="24:0"><expr pos:start="17:5" pos:end="19:56"><name pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:7">cpu</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:16">cp_regs</name></name> <operator pos:start="17:18" pos:end="17:18">=</operator> <call pos:start="17:20" pos:end="19:56"><name pos:start="17:20" pos:end="17:40">g_hash_table_new_full</name><argument_list pos:start="17:41" pos:end="19:56">(<argument pos:start="17:42" pos:end="17:51"><expr pos:start="17:42" pos:end="17:51"><name pos:start="17:42" pos:end="17:51">g_int_hash</name></expr></argument>, <argument pos:start="17:54" pos:end="17:64"><expr pos:start="17:54" pos:end="17:64"><name pos:start="17:54" pos:end="17:64">g_int_equal</name></expr></argument>,

                                         <argument pos:start="19:42" pos:end="19:47"><expr pos:start="19:42" pos:end="19:47"><name pos:start="19:42" pos:end="19:47">g_free</name></expr></argument>, <argument pos:start="19:50" pos:end="19:55"><expr pos:start="19:50" pos:end="19:55"><name pos:start="19:50" pos:end="19:55">g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifndef pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:7">ifndef</cpp:directive> <name pos:start="23:9" pos:end="23:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <comment type="block" pos:start="25:5" pos:end="25:39">/* Our inbound IRQ and FIQ lines */</comment>

    <if_stmt pos:start="27:5" pos:end="41:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:19">kvm_enabled</name><argument_list pos:start="27:20" pos:end="27:21">()</argument_list></call></expr>)</condition> <block pos:start="27:24" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:63">

        <comment type="block" pos:start="29:9" pos:end="33:11">/* VIRQ and VFIQ are unused with KVM but we add them to maintain

         * the same interface as non-KVM CPUs.

         */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:63"><expr pos:start="35:9" pos:end="35:62"><call pos:start="35:9" pos:end="35:62"><name pos:start="35:9" pos:end="35:25">qdev_init_gpio_in</name><argument_list pos:start="35:26" pos:end="35:62">(<argument pos:start="35:27" pos:end="35:37"><expr pos:start="35:27" pos:end="35:37"><call pos:start="35:27" pos:end="35:37"><name pos:start="35:27" pos:end="35:32">DEVICE</name><argument_list pos:start="35:33" pos:end="35:37">(<argument pos:start="35:34" pos:end="35:36"><expr pos:start="35:34" pos:end="35:36"><name pos:start="35:34" pos:end="35:36">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:40" pos:end="35:58"><expr pos:start="35:40" pos:end="35:58"><name pos:start="35:40" pos:end="35:58">arm_cpu_kvm_set_irq</name></expr></argument>, <argument pos:start="35:61" pos:end="35:61"><expr pos:start="35:61" pos:end="35:61"><literal type="number" pos:start="35:61" pos:end="35:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="41:5">else <block pos:start="37:12" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:59">

        <expr_stmt pos:start="39:9" pos:end="39:59"><expr pos:start="39:9" pos:end="39:58"><call pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:25">qdev_init_gpio_in</name><argument_list pos:start="39:26" pos:end="39:58">(<argument pos:start="39:27" pos:end="39:37"><expr pos:start="39:27" pos:end="39:37"><call pos:start="39:27" pos:end="39:37"><name pos:start="39:27" pos:end="39:32">DEVICE</name><argument_list pos:start="39:33" pos:end="39:37">(<argument pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:36">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:40" pos:end="39:54"><expr pos:start="39:40" pos:end="39:54"><name pos:start="39:40" pos:end="39:54">arm_cpu_set_irq</name></expr></argument>, <argument pos:start="39:57" pos:end="39:57"><expr pos:start="39:57" pos:end="39:57"><literal type="number" pos:start="39:57" pos:end="39:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="47:71"><expr pos:start="45:5" pos:end="47:70"><name pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:7">cpu</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:17">gt_timer</name><index pos:start="45:18" pos:end="45:30">[<expr pos:start="45:19" pos:end="45:29"><name pos:start="45:19" pos:end="45:29">GTIMER_PHYS</name></expr>]</index></name> <operator pos:start="45:32" pos:end="45:32">=</operator> <call pos:start="45:34" pos:end="47:70"><name pos:start="45:34" pos:end="45:42">timer_new</name><argument_list pos:start="45:43" pos:end="47:70">(<argument pos:start="45:44" pos:end="45:61"><expr pos:start="45:44" pos:end="45:61"><name pos:start="45:44" pos:end="45:61">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="45:64" pos:end="45:75"><expr pos:start="45:64" pos:end="45:75"><name pos:start="45:64" pos:end="45:75">GTIMER_SCALE</name></expr></argument>,

                                                <argument pos:start="47:49" pos:end="47:64"><expr pos:start="47:49" pos:end="47:64"><name pos:start="47:49" pos:end="47:64">arm_gt_ptimer_cb</name></expr></argument>, <argument pos:start="47:67" pos:end="47:69"><expr pos:start="47:67" pos:end="47:69"><name pos:start="47:67" pos:end="47:69">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:71"><expr pos:start="49:5" pos:end="51:70"><name pos:start="49:5" pos:end="49:30"><name pos:start="49:5" pos:end="49:7">cpu</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:17">gt_timer</name><index pos:start="49:18" pos:end="49:30">[<expr pos:start="49:19" pos:end="49:29"><name pos:start="49:19" pos:end="49:29">GTIMER_VIRT</name></expr>]</index></name> <operator pos:start="49:32" pos:end="49:32">=</operator> <call pos:start="49:34" pos:end="51:70"><name pos:start="49:34" pos:end="49:42">timer_new</name><argument_list pos:start="49:43" pos:end="51:70">(<argument pos:start="49:44" pos:end="49:61"><expr pos:start="49:44" pos:end="49:61"><name pos:start="49:44" pos:end="49:61">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="49:64" pos:end="49:75"><expr pos:start="49:64" pos:end="49:75"><name pos:start="49:64" pos:end="49:75">GTIMER_SCALE</name></expr></argument>,

                                                <argument pos:start="51:49" pos:end="51:64"><expr pos:start="51:49" pos:end="51:64"><name pos:start="51:49" pos:end="51:64">arm_gt_vtimer_cb</name></expr></argument>, <argument pos:start="51:67" pos:end="51:69"><expr pos:start="51:67" pos:end="51:69"><name pos:start="51:67" pos:end="51:69">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="58:0"><expr pos:start="53:5" pos:end="55:57"><call pos:start="53:5" pos:end="55:57"><name pos:start="53:5" pos:end="53:22">qdev_init_gpio_out</name><argument_list pos:start="53:23" pos:end="55:57">(<argument pos:start="53:24" pos:end="53:34"><expr pos:start="53:24" pos:end="53:34"><call pos:start="53:24" pos:end="53:34"><name pos:start="53:24" pos:end="53:29">DEVICE</name><argument_list pos:start="53:30" pos:end="53:34">(<argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:37" pos:end="53:57"><expr pos:start="53:37" pos:end="53:57"><name pos:start="53:37" pos:end="53:57"><name pos:start="53:37" pos:end="53:39">cpu</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:57">gt_timer_outputs</name></name></expr></argument>,

                       <argument pos:start="55:24" pos:end="55:56"><expr pos:start="55:24" pos:end="55:56"><call pos:start="55:24" pos:end="55:56"><name pos:start="55:24" pos:end="55:33">ARRAY_SIZE</name><argument_list pos:start="55:34" pos:end="55:56">(<argument pos:start="55:35" pos:end="55:55"><expr pos:start="55:35" pos:end="55:55"><name pos:start="55:35" pos:end="55:55"><name pos:start="55:35" pos:end="55:37">cpu</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:55">gt_timer_outputs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="61:5" pos:end="67:7">/* DTB consumers generally don't in fact care what the 'compatible'

     * string is, so always provide some string and trust that a hypothetical

     * picky DTB consumer will also provide a helpful error message.

     */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:41"><expr pos:start="69:5" pos:end="69:40"><name pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:7">cpu</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:23">dtb_compatible</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <literal type="string" pos:start="69:27" pos:end="69:40">"qemu,unknown"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:26"><expr pos:start="71:5" pos:end="71:25"><name pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:7">cpu</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:21">psci_version</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <literal type="number" pos:start="71:25" pos:end="71:25">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="71:28" pos:end="71:60">/* By default assume PSCI v0.1 */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:47"><expr pos:start="73:5" pos:end="73:46"><name pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:7">cpu</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:19">kvm_target</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:46">QEMU_KVM_ARM_TARGET_NONE</name></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:33">(<expr pos:start="77:9" pos:end="77:32"><call pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:19">tcg_enabled</name><argument_list pos:start="77:20" pos:end="77:21">()</argument_list></call> <operator pos:start="77:23" pos:end="77:24">&amp;&amp;</operator> <operator pos:start="77:26" pos:end="77:26">!</operator><name pos:start="77:27" pos:end="77:32">inited</name></expr>)</condition> <block pos:start="77:35" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:29">

        <expr_stmt pos:start="79:9" pos:end="79:22"><expr pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:14">inited</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:21">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:29"><expr pos:start="81:9" pos:end="81:28"><call pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:26">arm_translate_init</name><argument_list pos:start="81:27" pos:end="81:28">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
