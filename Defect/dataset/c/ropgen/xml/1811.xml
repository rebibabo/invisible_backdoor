<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1811.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">cuvid_flush</name><parameter_list pos:start="1:24" pos:end="1:46">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:65">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">CuvidContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">ctx</name> <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:76"><decl pos:start="7:5" pos:end="7:75"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">AVHWDeviceContext</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:33">device_ctx</name> <init pos:start="7:35" pos:end="7:75">= <expr pos:start="7:37" pos:end="7:75"><operator pos:start="7:37" pos:end="7:37">(</operator><name pos:start="7:38" pos:end="7:54">AVHWDeviceContext</name><operator pos:start="7:55" pos:end="7:55">*</operator><operator pos:start="7:56" pos:end="7:56">)</operator><name pos:start="7:57" pos:end="7:75"><name pos:start="7:57" pos:end="7:59">ctx</name><operator pos:start="7:60" pos:end="7:61">-&gt;</operator><name pos:start="7:62" pos:end="7:69">hwdevice</name><operator pos:start="7:70" pos:end="7:71">-&gt;</operator><name pos:start="7:72" pos:end="7:75">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:57"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">AVCUDADeviceContext</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:37">device_hwctx</name> <init pos:start="9:39" pos:end="9:57">= <expr pos:start="9:41" pos:end="9:57"><name pos:start="9:41" pos:end="9:57"><name pos:start="9:41" pos:end="9:50">device_ctx</name><operator pos:start="9:51" pos:end="9:52">-&gt;</operator><name pos:start="9:53" pos:end="9:57">hwctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:55"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">CUcontext</name></type> <name pos:start="11:15" pos:end="11:19">dummy</name></decl>, <decl pos:start="11:22" pos:end="11:54"><type ref="prev" pos:start="11:5" pos:end="11:13"/><name pos:start="11:22" pos:end="11:29">cuda_ctx</name> <init pos:start="11:31" pos:end="11:54">= <expr pos:start="11:33" pos:end="11:54"><name pos:start="11:33" pos:end="11:54"><name pos:start="11:33" pos:end="11:44">device_hwctx</name><operator pos:start="11:45" pos:end="11:46">-&gt;</operator><name pos:start="11:47" pos:end="11:54">cuda_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:25">CUVIDSOURCEDATAPACKET</name></type> <name pos:start="13:27" pos:end="13:33">seq_pkt</name> <init pos:start="13:35" pos:end="13:41">= <expr pos:start="13:37" pos:end="13:41"><block pos:start="13:37" pos:end="13:41">{ <expr pos:start="13:39" pos:end="13:39"><literal type="number" pos:start="13:39" pos:end="13:39">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:7">ctx</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:21">ever_flushed</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <literal type="number" pos:start="19:25" pos:end="19:25">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:46"><name pos:start="23:11" pos:end="23:18">CHECK_CU</name><argument_list pos:start="23:19" pos:end="23:46">(<argument pos:start="23:20" pos:end="23:45"><expr pos:start="23:20" pos:end="23:45"><call pos:start="23:20" pos:end="23:45"><name pos:start="23:20" pos:end="23:35">cuCtxPushCurrent</name><argument_list pos:start="23:36" pos:end="23:45">(<argument pos:start="23:37" pos:end="23:44"><expr pos:start="23:37" pos:end="23:44"><name pos:start="23:37" pos:end="23:44">cuda_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:19"><if pos:start="25:5" pos:end="27:19">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:19"><block_content pos:start="27:9" pos:end="27:19">

        <goto pos:start="27:9" pos:end="27:19">goto <name pos:start="27:14" pos:end="27:18">error</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><call pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:17">av_fifo_freep</name><argument_list pos:start="31:18" pos:end="31:36">(<argument pos:start="31:19" pos:end="31:35"><expr pos:start="31:19" pos:end="31:35"><operator pos:start="31:19" pos:end="31:19">&amp;</operator><name pos:start="31:20" pos:end="31:35"><name pos:start="31:20" pos:end="31:22">ctx</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:35">frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:81"><expr pos:start="35:5" pos:end="35:80"><name pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:20">frame_queue</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <call pos:start="35:24" pos:end="35:80"><name pos:start="35:24" pos:end="35:36">av_fifo_alloc</name><argument_list pos:start="35:37" pos:end="35:80">(<argument pos:start="35:38" pos:end="35:79"><expr pos:start="35:38" pos:end="35:79"><name pos:start="35:38" pos:end="35:52">MAX_FRAME_COUNT</name> <operator pos:start="35:54" pos:end="35:54">*</operator> <sizeof pos:start="35:56" pos:end="35:79">sizeof<argument_list pos:start="35:62" pos:end="35:79">(<argument pos:start="35:63" pos:end="35:78"><expr pos:start="35:63" pos:end="35:78"><name pos:start="35:63" pos:end="35:78">CuvidParsedFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:26">(<expr pos:start="37:9" pos:end="37:25"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:25"><name pos:start="37:10" pos:end="37:12">ctx</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:25">frame_queue</name></name></expr>)</condition> <block pos:start="37:28" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:15">

        <expr_stmt pos:start="39:9" pos:end="39:81"><expr pos:start="39:9" pos:end="39:80"><call pos:start="39:9" pos:end="39:80"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:80">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:79"><expr pos:start="39:37" pos:end="39:79"><literal type="string" pos:start="39:37" pos:end="39:79">"Failed to recreate frame queue on flush\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:23">(<expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:11">ctx</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:22">cudecoder</name></name></expr>)</condition> <block pos:start="47:25" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:30">

        <expr_stmt pos:start="49:9" pos:end="49:44"><expr pos:start="49:9" pos:end="49:43"><call pos:start="49:9" pos:end="49:43"><name pos:start="49:9" pos:end="49:27">cuvidDestroyDecoder</name><argument_list pos:start="49:28" pos:end="49:43">(<argument pos:start="49:29" pos:end="49:42"><expr pos:start="49:29" pos:end="49:42"><name pos:start="49:29" pos:end="49:42"><name pos:start="49:29" pos:end="49:31">ctx</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:42">cudecoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:30"><expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:11">ctx</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:22">cudecoder</name></name> <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:29">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:22">(<expr pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:11">ctx</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:21">cuparser</name></name></expr>)</condition> <block pos:start="57:24" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:29">

        <expr_stmt pos:start="59:9" pos:end="59:47"><expr pos:start="59:9" pos:end="59:46"><call pos:start="59:9" pos:end="59:46"><name pos:start="59:9" pos:end="59:31">cuvidDestroyVideoParser</name><argument_list pos:start="59:32" pos:end="59:46">(<argument pos:start="59:33" pos:end="59:45"><expr pos:start="59:33" pos:end="59:45"><name pos:start="59:33" pos:end="59:45"><name pos:start="59:33" pos:end="59:35">ctx</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:45">cuparser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:29"><expr pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:11">ctx</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:21">cuparser</name></name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:28">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:78"><expr pos:start="67:5" pos:end="67:77"><name pos:start="67:5" pos:end="67:7">ret</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:77"><name pos:start="67:11" pos:end="67:18">CHECK_CU</name><argument_list pos:start="67:19" pos:end="67:77">(<argument pos:start="67:20" pos:end="67:76"><expr pos:start="67:20" pos:end="67:76"><call pos:start="67:20" pos:end="67:76"><name pos:start="67:20" pos:end="67:41">cuvidCreateVideoParser</name><argument_list pos:start="67:42" pos:end="67:76">(<argument pos:start="67:43" pos:end="67:56"><expr pos:start="67:43" pos:end="67:56"><operator pos:start="67:43" pos:end="67:43">&amp;</operator><name pos:start="67:44" pos:end="67:56"><name pos:start="67:44" pos:end="67:46">ctx</name><operator pos:start="67:47" pos:end="67:48">-&gt;</operator><name pos:start="67:49" pos:end="67:56">cuparser</name></name></expr></argument>, <argument pos:start="67:59" pos:end="67:75"><expr pos:start="67:59" pos:end="67:75"><operator pos:start="67:59" pos:end="67:59">&amp;</operator><name pos:start="67:60" pos:end="67:75"><name pos:start="67:60" pos:end="67:62">ctx</name><operator pos:start="67:63" pos:end="67:64">-&gt;</operator><name pos:start="67:65" pos:end="67:75">cuparseinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="71:19"><if pos:start="69:5" pos:end="71:19">if <condition pos:start="69:8" pos:end="69:16">(<expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">&lt;</operator> <literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:19"><block_content pos:start="71:9" pos:end="71:19">

        <goto pos:start="71:9" pos:end="71:19">goto <name pos:start="71:14" pos:end="71:18">error</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:55"><expr pos:start="75:5" pos:end="75:54"><name pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:11">seq_pkt</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:19">payload</name></name> <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:54"><name pos:start="75:23" pos:end="75:25">ctx</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:38">cuparse_ext</name><operator pos:start="75:39" pos:end="75:39">.</operator><name pos:start="75:40" pos:end="75:54">raw_seqhdr_data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:70"><expr pos:start="77:5" pos:end="77:69"><name pos:start="77:5" pos:end="77:24"><name pos:start="77:5" pos:end="77:11">seq_pkt</name><operator pos:start="77:12" pos:end="77:12">.</operator><name pos:start="77:13" pos:end="77:24">payload_size</name></name> <operator pos:start="77:26" pos:end="77:26">=</operator> <name pos:start="77:28" pos:end="77:69"><name pos:start="77:28" pos:end="77:30">ctx</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:43">cuparse_ext</name><operator pos:start="77:44" pos:end="77:44">.</operator><name pos:start="77:45" pos:end="77:50">format</name><operator pos:start="77:51" pos:end="77:51">.</operator><name pos:start="77:52" pos:end="77:69">seqhdr_data_length</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:48">(<expr pos:start="81:9" pos:end="81:47"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:15">seq_pkt</name><operator pos:start="81:16" pos:end="81:16">.</operator><name pos:start="81:17" pos:end="81:23">payload</name></name> <operator pos:start="81:25" pos:end="81:26">&amp;&amp;</operator> <name pos:start="81:28" pos:end="81:47"><name pos:start="81:28" pos:end="81:34">seq_pkt</name><operator pos:start="81:35" pos:end="81:35">.</operator><name pos:start="81:36" pos:end="81:47">payload_size</name></name></expr>)</condition> <block pos:start="81:50" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:23">

        <expr_stmt pos:start="83:9" pos:end="83:69"><expr pos:start="83:9" pos:end="83:68"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:68"><name pos:start="83:15" pos:end="83:22">CHECK_CU</name><argument_list pos:start="83:23" pos:end="83:68">(<argument pos:start="83:24" pos:end="83:67"><expr pos:start="83:24" pos:end="83:67"><call pos:start="83:24" pos:end="83:67"><name pos:start="83:24" pos:end="83:42">cuvidParseVideoData</name><argument_list pos:start="83:43" pos:end="83:67">(<argument pos:start="83:44" pos:end="83:56"><expr pos:start="83:44" pos:end="83:56"><name pos:start="83:44" pos:end="83:56"><name pos:start="83:44" pos:end="83:46">ctx</name><operator pos:start="83:47" pos:end="83:48">-&gt;</operator><name pos:start="83:49" pos:end="83:56">cuparser</name></name></expr></argument>, <argument pos:start="83:59" pos:end="83:66"><expr pos:start="83:59" pos:end="83:66"><operator pos:start="83:59" pos:end="83:59">&amp;</operator><name pos:start="83:60" pos:end="83:66">seq_pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="87:23"><if pos:start="85:9" pos:end="87:23">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">&lt;</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:23"><block_content pos:start="87:13" pos:end="87:23">

            <goto pos:start="87:13" pos:end="87:23">goto <name pos:start="87:18" pos:end="87:22">error</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:44"><expr pos:start="93:5" pos:end="93:43"><name pos:start="93:5" pos:end="93:7">ret</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <call pos:start="93:11" pos:end="93:43"><name pos:start="93:11" pos:end="93:18">CHECK_CU</name><argument_list pos:start="93:19" pos:end="93:43">(<argument pos:start="93:20" pos:end="93:42"><expr pos:start="93:20" pos:end="93:42"><call pos:start="93:20" pos:end="93:42"><name pos:start="93:20" pos:end="93:34">cuCtxPopCurrent</name><argument_list pos:start="93:35" pos:end="93:42">(<argument pos:start="93:36" pos:end="93:41"><expr pos:start="93:36" pos:end="93:41"><operator pos:start="93:36" pos:end="93:36">&amp;</operator><name pos:start="93:37" pos:end="93:41">dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="97:19"><if pos:start="95:5" pos:end="97:19">if <condition pos:start="95:8" pos:end="95:16">(<expr pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">&lt;</operator> <literal type="number" pos:start="95:15" pos:end="95:15">0</literal></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:19"><block_content pos:start="97:9" pos:end="97:19">

        <goto pos:start="97:9" pos:end="97:19">goto <name pos:start="97:14" pos:end="97:18">error</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:30"><expr pos:start="101:5" pos:end="101:29"><name pos:start="101:5" pos:end="101:17"><name pos:start="101:5" pos:end="101:7">ctx</name><operator pos:start="101:8" pos:end="101:9">-&gt;</operator><name pos:start="101:10" pos:end="101:17">prev_pts</name></name> <operator pos:start="101:19" pos:end="101:19">=</operator> <name pos:start="101:21" pos:end="101:29">INT64_MIN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:30"><expr pos:start="103:5" pos:end="103:29"><name pos:start="103:5" pos:end="103:25"><name pos:start="103:5" pos:end="103:7">ctx</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:25">decoder_flushing</name></name> <operator pos:start="103:27" pos:end="103:27">=</operator> <literal type="number" pos:start="103:29" pos:end="103:29">0</literal></expr>;</expr_stmt>



    <return pos:start="107:5" pos:end="107:11">return;</return>

 <label pos:start="109:2" pos:end="109:7"><name pos:start="109:2" pos:end="109:6">error</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:65"><expr pos:start="111:5" pos:end="111:64"><call pos:start="111:5" pos:end="111:64"><name pos:start="111:5" pos:end="111:10">av_log</name><argument_list pos:start="111:11" pos:end="111:64">(<argument pos:start="111:12" pos:end="111:16"><expr pos:start="111:12" pos:end="111:16"><name pos:start="111:12" pos:end="111:16">avctx</name></expr></argument>, <argument pos:start="111:19" pos:end="111:30"><expr pos:start="111:19" pos:end="111:30"><name pos:start="111:19" pos:end="111:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:33" pos:end="111:63"><expr pos:start="111:33" pos:end="111:63"><literal type="string" pos:start="111:33" pos:end="111:63">"CUDA reinit on flush failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
