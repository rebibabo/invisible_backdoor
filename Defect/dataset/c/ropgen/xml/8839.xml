<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8839.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:44">ipvideo_decode_format_10_opcodes</name><parameter_list pos:start="1:45" pos:end="1:79">(<parameter pos:start="1:46" pos:end="1:62"><decl pos:start="1:46" pos:end="1:62"><type pos:start="1:46" pos:end="1:62"><name pos:start="1:46" pos:end="1:59">IpvideoContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">s</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:71">AVFrame</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:78">frame</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="155:1">{<block_content pos:start="5:5" pos:end="153:5">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">pass</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">x</name></decl>, <decl pos:start="5:18" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:18">y</name></decl>, <decl pos:start="5:21" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:21" pos:end="5:33">changed_block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int16_t</name></type> <name pos:start="7:13" pos:end="7:18">opcode</name></decl>, <decl pos:start="7:21" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:21" pos:end="7:24">skip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18">GetByteContext</name></type> <name pos:start="9:20" pos:end="9:35">decoding_map_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:18">GetByteContext</name></type> <name pos:start="11:20" pos:end="11:31">skip_map_ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:41"><expr pos:start="15:5" pos:end="15:40"><call pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:20">bytestream2_skip</name><argument_list pos:start="15:21" pos:end="15:40">(<argument pos:start="15:22" pos:end="15:35"><expr pos:start="15:22" pos:end="15:35"><operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:35"><name pos:start="15:23" pos:end="15:23">s</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:35">stream_ptr</name></name></expr></argument>, <argument pos:start="15:38" pos:end="15:39"><expr pos:start="15:38" pos:end="15:39"><literal type="number" pos:start="15:38" pos:end="15:39">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="15:43" pos:end="15:71">/* data starts 14 bytes in */</comment>



    <comment type="block" pos:start="19:5" pos:end="19:53">/* this is PAL8, so make the palette available */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><call pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:10">memcpy</name><argument_list pos:start="21:11" pos:end="21:50">(<argument pos:start="21:12" pos:end="21:25"><expr pos:start="21:12" pos:end="21:25"><name pos:start="21:12" pos:end="21:25"><name pos:start="21:12" pos:end="21:16">frame</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:22">data</name><index pos:start="21:23" pos:end="21:25">[<expr pos:start="21:24" pos:end="21:24"><literal type="number" pos:start="21:24" pos:end="21:24">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="21:28" pos:end="21:33"><expr pos:start="21:28" pos:end="21:33"><name pos:start="21:28" pos:end="21:33"><name pos:start="21:28" pos:end="21:28">s</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:33">pal</name></name></expr></argument>, <argument pos:start="21:36" pos:end="21:49"><expr pos:start="21:36" pos:end="21:49"><name pos:start="21:36" pos:end="21:49">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:35"><expr pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:13">stride</name></name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:34"><name pos:start="23:17" pos:end="23:21">frame</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:31">linesize</name><index pos:start="23:32" pos:end="23:34">[<expr pos:start="23:33" pos:end="23:33"><literal type="number" pos:start="23:33" pos:end="23:33">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:15">line_inc</name></name> <operator pos:start="27:17" pos:end="27:17">=</operator> <name pos:start="27:19" pos:end="27:27"><name pos:start="27:19" pos:end="27:19">s</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:27">stride</name></name> <operator pos:start="27:29" pos:end="27:29">-</operator> <literal type="number" pos:start="27:31" pos:end="27:31">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="31:78"><expr pos:start="29:5" pos:end="31:77"><name pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:32">upper_motion_limit_offset</name></name> <operator pos:start="29:34" pos:end="29:34">=</operator> <operator pos:start="29:36" pos:end="29:36">(</operator><name pos:start="29:37" pos:end="29:52"><name pos:start="29:37" pos:end="29:37">s</name><operator pos:start="29:38" pos:end="29:39">-&gt;</operator><name pos:start="29:40" pos:end="29:44">avctx</name><operator pos:start="29:45" pos:end="29:46">-&gt;</operator><name pos:start="29:47" pos:end="29:52">height</name></name> <operator pos:start="29:54" pos:end="29:54">-</operator> <literal type="number" pos:start="29:56" pos:end="29:56">8</literal><operator pos:start="29:57" pos:end="29:57">)</operator> <operator pos:start="29:59" pos:end="29:59">*</operator> <name pos:start="29:61" pos:end="29:78"><name pos:start="29:61" pos:end="29:65">frame</name><operator pos:start="29:66" pos:end="29:67">-&gt;</operator><name pos:start="29:68" pos:end="29:75">linesize</name><index pos:start="29:76" pos:end="29:78">[<expr pos:start="29:77" pos:end="29:77"><literal type="number" pos:start="29:77" pos:end="29:77">0</literal></expr>]</index></name>

                                  <operator pos:start="31:35" pos:end="31:35">+</operator> <operator pos:start="31:37" pos:end="31:37">(</operator><name pos:start="31:38" pos:end="31:52"><name pos:start="31:38" pos:end="31:38">s</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:45">avctx</name><operator pos:start="31:46" pos:end="31:47">-&gt;</operator><name pos:start="31:48" pos:end="31:52">width</name></name> <operator pos:start="31:54" pos:end="31:54">-</operator> <literal type="number" pos:start="31:56" pos:end="31:56">8</literal><operator pos:start="31:57" pos:end="31:57">)</operator> <operator pos:start="31:59" pos:end="31:59">*</operator> <operator pos:start="31:61" pos:end="31:61">(</operator><literal type="number" pos:start="31:62" pos:end="31:64">1</literal> <operator pos:start="31:64" pos:end="31:64">+</operator> <name pos:start="31:66" pos:end="31:76"><name pos:start="31:66" pos:end="31:66">s</name><operator pos:start="31:67" pos:end="31:68">-&gt;</operator><name pos:start="31:69" pos:end="31:76">is_16bpp</name></name><operator pos:start="31:77" pos:end="31:77">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:79"><expr pos:start="35:5" pos:end="35:78"><call pos:start="35:5" pos:end="35:78"><name pos:start="35:5" pos:end="35:20">bytestream2_init</name><argument_list pos:start="35:21" pos:end="35:78">(<argument pos:start="35:22" pos:end="35:38"><expr pos:start="35:22" pos:end="35:38"><operator pos:start="35:22" pos:end="35:22">&amp;</operator><name pos:start="35:23" pos:end="35:38">decoding_map_ptr</name></expr></argument>, <argument pos:start="35:41" pos:end="35:55"><expr pos:start="35:41" pos:end="35:55"><name pos:start="35:41" pos:end="35:55"><name pos:start="35:41" pos:end="35:41">s</name><operator pos:start="35:42" pos:end="35:43">-&gt;</operator><name pos:start="35:44" pos:end="35:55">decoding_map</name></name></expr></argument>, <argument pos:start="35:58" pos:end="35:77"><expr pos:start="35:58" pos:end="35:77"><name pos:start="35:58" pos:end="35:77"><name pos:start="35:58" pos:end="35:58">s</name><operator pos:start="35:59" pos:end="35:60">-&gt;</operator><name pos:start="35:61" pos:end="35:77">decoding_map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:67"><expr pos:start="37:5" pos:end="37:66"><call pos:start="37:5" pos:end="37:66"><name pos:start="37:5" pos:end="37:20">bytestream2_init</name><argument_list pos:start="37:21" pos:end="37:66">(<argument pos:start="37:22" pos:end="37:34"><expr pos:start="37:22" pos:end="37:34"><operator pos:start="37:22" pos:end="37:22">&amp;</operator><name pos:start="37:23" pos:end="37:34">skip_map_ptr</name></expr></argument>, <argument pos:start="37:37" pos:end="37:47"><expr pos:start="37:37" pos:end="37:47"><name pos:start="37:37" pos:end="37:47"><name pos:start="37:37" pos:end="37:37">s</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:47">skip_map</name></name></expr></argument>, <argument pos:start="37:50" pos:end="37:65"><expr pos:start="37:50" pos:end="37:65"><name pos:start="37:50" pos:end="37:65"><name pos:start="37:50" pos:end="37:50">s</name><operator pos:start="37:51" pos:end="37:52">-&gt;</operator><name pos:start="37:53" pos:end="37:65">skip_map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="41:5" pos:end="81:5">for <control pos:start="41:9" pos:end="41:36">(<init pos:start="41:10" pos:end="41:18"><expr pos:start="41:10" pos:end="41:17"><name pos:start="41:10" pos:end="41:13">pass</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr>;</init> <condition pos:start="41:20" pos:end="41:28"><expr pos:start="41:20" pos:end="41:27"><name pos:start="41:20" pos:end="41:23">pass</name> <operator pos:start="41:25" pos:end="41:25">&lt;</operator> <literal type="number" pos:start="41:27" pos:end="41:27">2</literal></expr>;</condition> <incr pos:start="41:30" pos:end="41:35"><expr pos:start="41:30" pos:end="41:35"><operator pos:start="41:30" pos:end="41:31">++</operator><name pos:start="41:32" pos:end="41:35">pass</name></expr></incr>)</control> <block pos:start="41:38" pos:end="81:5">{<block_content pos:start="43:9" pos:end="79:9">

        <expr_stmt pos:start="43:9" pos:end="43:57"><expr pos:start="43:9" pos:end="43:56"><call pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:24">bytestream2_seek</name><argument_list pos:start="43:25" pos:end="43:56">(<argument pos:start="43:26" pos:end="43:42"><expr pos:start="43:26" pos:end="43:42"><operator pos:start="43:26" pos:end="43:26">&amp;</operator><name pos:start="43:27" pos:end="43:42">decoding_map_ptr</name></expr></argument>, <argument pos:start="43:45" pos:end="43:45"><expr pos:start="43:45" pos:end="43:45"><literal type="number" pos:start="43:45" pos:end="43:45">0</literal></expr></argument>, <argument pos:start="43:48" pos:end="43:55"><expr pos:start="43:48" pos:end="43:55"><name pos:start="43:48" pos:end="43:55">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:53"><expr pos:start="45:9" pos:end="45:52"><call pos:start="45:9" pos:end="45:52"><name pos:start="45:9" pos:end="45:24">bytestream2_seek</name><argument_list pos:start="45:25" pos:end="45:52">(<argument pos:start="45:26" pos:end="45:38"><expr pos:start="45:26" pos:end="45:38"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:38">skip_map_ptr</name></expr></argument>, <argument pos:start="45:41" pos:end="45:41"><expr pos:start="45:41" pos:end="45:41"><literal type="number" pos:start="45:41" pos:end="45:41">0</literal></expr></argument>, <argument pos:start="45:44" pos:end="45:51"><expr pos:start="45:44" pos:end="45:51"><name pos:start="45:44" pos:end="45:51">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:51"><expr pos:start="47:9" pos:end="47:50"><name pos:start="47:9" pos:end="47:12">skip</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:50"><name pos:start="47:16" pos:end="47:35">bytestream2_get_le16</name><argument_list pos:start="47:36" pos:end="47:50">(<argument pos:start="47:37" pos:end="47:49"><expr pos:start="47:37" pos:end="47:49"><operator pos:start="47:37" pos:end="47:37">&amp;</operator><name pos:start="47:38" pos:end="47:49">skip_map_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="51:9" pos:end="79:9">for <control pos:start="51:13" pos:end="51:49">(<init pos:start="51:14" pos:end="51:19"><expr pos:start="51:14" pos:end="51:18"><name pos:start="51:14" pos:end="51:14">y</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr>;</init> <condition pos:start="51:21" pos:end="51:41"><expr pos:start="51:21" pos:end="51:40"><name pos:start="51:21" pos:end="51:21">y</name> <operator pos:start="51:23" pos:end="51:23">&lt;</operator> <name pos:start="51:25" pos:end="51:40"><name pos:start="51:25" pos:end="51:25">s</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:32">avctx</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:40">height</name></name></expr>;</condition> <incr pos:start="51:43" pos:end="51:48"><expr pos:start="51:43" pos:end="51:48"><name pos:start="51:43" pos:end="51:43">y</name> <operator pos:start="51:45" pos:end="51:46">+=</operator> <literal type="number" pos:start="51:48" pos:end="51:48">8</literal></expr></incr>)</control> <block pos:start="51:51" pos:end="79:9">{<block_content pos:start="53:13" pos:end="77:13">

            <for pos:start="53:13" pos:end="77:13">for <control pos:start="53:17" pos:end="53:52">(<init pos:start="53:18" pos:end="53:23"><expr pos:start="53:18" pos:end="53:22"><name pos:start="53:18" pos:end="53:18">x</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr>;</init> <condition pos:start="53:25" pos:end="53:44"><expr pos:start="53:25" pos:end="53:43"><name pos:start="53:25" pos:end="53:25">x</name> <operator pos:start="53:27" pos:end="53:27">&lt;</operator> <name pos:start="53:29" pos:end="53:43"><name pos:start="53:29" pos:end="53:29">s</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:36">avctx</name><operator pos:start="53:37" pos:end="53:38">-&gt;</operator><name pos:start="53:39" pos:end="53:43">width</name></name></expr>;</condition> <incr pos:start="53:46" pos:end="53:51"><expr pos:start="53:46" pos:end="53:51"><name pos:start="53:46" pos:end="53:46">x</name> <operator pos:start="53:48" pos:end="53:49">+=</operator> <literal type="number" pos:start="53:51" pos:end="53:51">8</literal></expr></incr>)</control> <block pos:start="53:54" pos:end="77:13">{<block_content pos:start="55:17" pos:end="75:26">

                <expr_stmt pos:start="55:17" pos:end="55:103"><expr pos:start="55:17" pos:end="55:102"><name pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:28">pixel_ptr</name></name> <operator pos:start="55:30" pos:end="55:30">=</operator> <name pos:start="55:32" pos:end="55:59"><name pos:start="55:32" pos:end="55:32">s</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:50">cur_decode_frame</name><operator pos:start="55:51" pos:end="55:52">-&gt;</operator><name pos:start="55:53" pos:end="55:56">data</name><index pos:start="55:57" pos:end="55:59">[<expr pos:start="55:58" pos:end="55:58"><literal type="number" pos:start="55:58" pos:end="55:58">0</literal></expr>]</index></name> <operator pos:start="55:61" pos:end="55:61">+</operator> <name pos:start="55:63" pos:end="55:63">x</name> <operator pos:start="55:65" pos:end="55:65">+</operator> <name pos:start="55:67" pos:end="55:67">y</name> <operator pos:start="55:69" pos:end="55:69">*</operator> <name pos:start="55:71" pos:end="55:102"><name pos:start="55:71" pos:end="55:71">s</name><operator pos:start="55:72" pos:end="55:73">-&gt;</operator><name pos:start="55:74" pos:end="55:89">cur_decode_frame</name><operator pos:start="55:90" pos:end="55:91">-&gt;</operator><name pos:start="55:92" pos:end="55:99">linesize</name><index pos:start="55:100" pos:end="55:102">[<expr pos:start="55:101" pos:end="55:101"><literal type="number" pos:start="55:101" pos:end="55:101">0</literal></expr>]</index></name></expr>;</expr_stmt>



                <while pos:start="59:17" pos:end="73:17">while <condition pos:start="59:23" pos:end="59:86">(<expr pos:start="59:24" pos:end="59:85"><name pos:start="59:24" pos:end="59:27">skip</name> <operator pos:start="59:29" pos:end="59:30">&lt;=</operator> <literal type="number" pos:start="59:32" pos:end="59:32">0</literal> <operator pos:start="59:34" pos:end="59:35">&amp;&amp;</operator> <call pos:start="59:37" pos:end="59:81"><name pos:start="59:37" pos:end="59:62">bytestream2_get_bytes_left</name><argument_list pos:start="59:63" pos:end="59:81">(<argument pos:start="59:64" pos:end="59:80"><expr pos:start="59:64" pos:end="59:80"><operator pos:start="59:64" pos:end="59:64">&amp;</operator><name pos:start="59:65" pos:end="59:80">decoding_map_ptr</name></expr></argument>)</argument_list></call> <operator pos:start="59:83" pos:end="59:83">&gt;</operator> <literal type="number" pos:start="59:85" pos:end="59:85">1</literal></expr>)</condition>  <block pos:start="59:89" pos:end="73:17">{<block_content pos:start="61:21" pos:end="71:63">

                    <if_stmt pos:start="61:21" pos:end="69:21"><if pos:start="61:21" pos:end="69:21">if <condition pos:start="61:24" pos:end="61:48">(<expr pos:start="61:25" pos:end="61:47"><name pos:start="61:25" pos:end="61:28">skip</name> <operator pos:start="61:30" pos:end="61:31">!=</operator> <operator pos:start="61:33" pos:end="61:33">-</operator><literal type="number" pos:start="61:34" pos:end="61:39">0x8000</literal> <operator pos:start="61:41" pos:end="61:42">&amp;&amp;</operator> <name pos:start="61:44" pos:end="61:47">skip</name></expr>)</condition> <block pos:start="61:50" pos:end="69:21">{<block_content pos:start="63:25" pos:end="67:30">

                        <expr_stmt pos:start="63:25" pos:end="63:73"><expr pos:start="63:25" pos:end="63:72"><name pos:start="63:25" pos:end="63:30">opcode</name> <operator pos:start="63:32" pos:end="63:32">=</operator> <call pos:start="63:34" pos:end="63:72"><name pos:start="63:34" pos:end="63:53">bytestream2_get_le16</name><argument_list pos:start="63:54" pos:end="63:72">(<argument pos:start="63:55" pos:end="63:71"><expr pos:start="63:55" pos:end="63:71"><operator pos:start="63:55" pos:end="63:55">&amp;</operator><name pos:start="63:56" pos:end="63:71">decoding_map_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="65:25" pos:end="65:73"><expr pos:start="65:25" pos:end="65:72"><name pos:start="65:25" pos:end="65:54"><name pos:start="65:25" pos:end="65:48">ipvideo_format_10_passes</name><index pos:start="65:49" pos:end="65:54">[<expr pos:start="65:50" pos:end="65:53"><name pos:start="65:50" pos:end="65:53">pass</name></expr>]</index></name><operator pos:start="65:55" pos:end="65:55">(</operator><name pos:start="65:56" pos:end="65:56">s</name><operator pos:start="65:57" pos:end="65:57">,</operator> <name pos:start="65:59" pos:end="65:63">frame</name><operator pos:start="65:64" pos:end="65:64">,</operator> <name pos:start="65:66" pos:end="65:71">opcode</name><operator pos:start="65:72" pos:end="65:72">)</operator></expr>;</expr_stmt>

                        <break pos:start="67:25" pos:end="67:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="71:21" pos:end="71:63"><expr pos:start="71:21" pos:end="71:62"><name pos:start="71:21" pos:end="71:24">skip</name> <operator pos:start="71:26" pos:end="71:26">=</operator> <call pos:start="71:28" pos:end="71:62"><name pos:start="71:28" pos:end="71:47">bytestream2_get_le16</name><argument_list pos:start="71:48" pos:end="71:62">(<argument pos:start="71:49" pos:end="71:61"><expr pos:start="71:49" pos:end="71:61"><operator pos:start="71:49" pos:end="71:49">&amp;</operator><name pos:start="71:50" pos:end="71:61">skip_map_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="75:17" pos:end="75:26"><expr pos:start="75:17" pos:end="75:25"><name pos:start="75:17" pos:end="75:20">skip</name> <operator pos:start="75:22" pos:end="75:23">*=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">2</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><call pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:20">bytestream2_seek</name><argument_list pos:start="85:21" pos:end="85:48">(<argument pos:start="85:22" pos:end="85:34"><expr pos:start="85:22" pos:end="85:34"><operator pos:start="85:22" pos:end="85:22">&amp;</operator><name pos:start="85:23" pos:end="85:34">skip_map_ptr</name></expr></argument>, <argument pos:start="85:37" pos:end="85:37"><expr pos:start="85:37" pos:end="85:37"><literal type="number" pos:start="85:37" pos:end="85:37">0</literal></expr></argument>, <argument pos:start="85:40" pos:end="85:47"><expr pos:start="85:40" pos:end="85:47"><name pos:start="85:40" pos:end="85:47">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:47"><expr pos:start="87:5" pos:end="87:46"><name pos:start="87:5" pos:end="87:8">skip</name> <operator pos:start="87:10" pos:end="87:10">=</operator> <call pos:start="87:12" pos:end="87:46"><name pos:start="87:12" pos:end="87:31">bytestream2_get_le16</name><argument_list pos:start="87:32" pos:end="87:46">(<argument pos:start="87:33" pos:end="87:45"><expr pos:start="87:33" pos:end="87:45"><operator pos:start="87:33" pos:end="87:33">&amp;</operator><name pos:start="87:34" pos:end="87:45">skip_map_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="89:5" pos:end="137:5">for <control pos:start="89:9" pos:end="89:45">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">y</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:37"><expr pos:start="89:17" pos:end="89:36"><name pos:start="89:17" pos:end="89:17">y</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:36"><name pos:start="89:21" pos:end="89:21">s</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:28">avctx</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:36">height</name></name></expr>;</condition> <incr pos:start="89:39" pos:end="89:44"><expr pos:start="89:39" pos:end="89:44"><name pos:start="89:39" pos:end="89:39">y</name> <operator pos:start="89:41" pos:end="89:42">+=</operator> <literal type="number" pos:start="89:44" pos:end="89:44">8</literal></expr></incr>)</control> <block pos:start="89:47" pos:end="137:5">{<block_content pos:start="91:9" pos:end="135:9">

        <for pos:start="91:9" pos:end="135:9">for <control pos:start="91:13" pos:end="91:48">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">x</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:40"><expr pos:start="91:21" pos:end="91:39"><name pos:start="91:21" pos:end="91:21">x</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <name pos:start="91:25" pos:end="91:39"><name pos:start="91:25" pos:end="91:25">s</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:32">avctx</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:39">width</name></name></expr>;</condition> <incr pos:start="91:42" pos:end="91:47"><expr pos:start="91:42" pos:end="91:47"><name pos:start="91:42" pos:end="91:42">x</name> <operator pos:start="91:44" pos:end="91:45">+=</operator> <literal type="number" pos:start="91:47" pos:end="91:47">8</literal></expr></incr>)</control> <block pos:start="91:50" pos:end="135:9">{<block_content pos:start="93:13" pos:end="133:22">

            <expr_stmt pos:start="93:13" pos:end="93:30"><expr pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:25">changed_block</name> <operator pos:start="93:27" pos:end="93:27">=</operator> <literal type="number" pos:start="93:29" pos:end="93:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:69"><expr pos:start="95:13" pos:end="95:68"><name pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:24">pixel_ptr</name></name> <operator pos:start="95:26" pos:end="95:26">=</operator> <name pos:start="95:28" pos:end="95:41"><name pos:start="95:28" pos:end="95:32">frame</name><operator pos:start="95:33" pos:end="95:34">-&gt;</operator><name pos:start="95:35" pos:end="95:38">data</name><index pos:start="95:39" pos:end="95:41">[<expr pos:start="95:40" pos:end="95:40"><literal type="number" pos:start="95:40" pos:end="95:40">0</literal></expr>]</index></name> <operator pos:start="95:43" pos:end="95:43">+</operator> <name pos:start="95:45" pos:end="95:45">x</name> <operator pos:start="95:47" pos:end="95:47">+</operator> <name pos:start="95:49" pos:end="95:49">y</name><operator pos:start="95:50" pos:end="95:50">*</operator><name pos:start="95:51" pos:end="95:68"><name pos:start="95:51" pos:end="95:55">frame</name><operator pos:start="95:56" pos:end="95:57">-&gt;</operator><name pos:start="95:58" pos:end="95:65">linesize</name><index pos:start="95:66" pos:end="95:68">[<expr pos:start="95:67" pos:end="95:67"><literal type="number" pos:start="95:67" pos:end="95:67">0</literal></expr>]</index></name></expr>;</expr_stmt>



            <while pos:start="99:13" pos:end="115:13">while <condition pos:start="99:19" pos:end="99:29">(<expr pos:start="99:20" pos:end="99:28"><name pos:start="99:20" pos:end="99:23">skip</name> <operator pos:start="99:25" pos:end="99:26">&lt;=</operator> <literal type="number" pos:start="99:28" pos:end="99:28">0</literal></expr>)</condition>  <block pos:start="99:32" pos:end="115:13">{<block_content pos:start="101:17" pos:end="113:59">

                <if_stmt pos:start="101:17" pos:end="107:17"><if pos:start="101:17" pos:end="107:17">if <condition pos:start="101:20" pos:end="101:44">(<expr pos:start="101:21" pos:end="101:43"><name pos:start="101:21" pos:end="101:24">skip</name> <operator pos:start="101:26" pos:end="101:27">!=</operator> <operator pos:start="101:29" pos:end="101:29">-</operator><literal type="number" pos:start="101:30" pos:end="101:35">0x8000</literal> <operator pos:start="101:37" pos:end="101:38">&amp;&amp;</operator> <name pos:start="101:40" pos:end="101:43">skip</name></expr>)</condition> <block pos:start="101:46" pos:end="107:17">{<block_content pos:start="103:21" pos:end="105:26">

                    <expr_stmt pos:start="103:21" pos:end="103:38"><expr pos:start="103:21" pos:end="103:37"><name pos:start="103:21" pos:end="103:33">changed_block</name> <operator pos:start="103:35" pos:end="103:35">=</operator> <literal type="number" pos:start="103:37" pos:end="103:37">1</literal></expr>;</expr_stmt>

                    <break pos:start="105:21" pos:end="105:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="109:17" pos:end="111:27"><if pos:start="109:17" pos:end="111:27">if <condition pos:start="109:20" pos:end="109:66">(<expr pos:start="109:21" pos:end="109:65"><call pos:start="109:21" pos:end="109:61"><name pos:start="109:21" pos:end="109:46">bytestream2_get_bytes_left</name><argument_list pos:start="109:47" pos:end="109:61">(<argument pos:start="109:48" pos:end="109:60"><expr pos:start="109:48" pos:end="109:60"><operator pos:start="109:48" pos:end="109:48">&amp;</operator><name pos:start="109:49" pos:end="109:60">skip_map_ptr</name></expr></argument>)</argument_list></call> <operator pos:start="109:63" pos:end="109:63">&lt;</operator> <literal type="number" pos:start="109:65" pos:end="109:65">2</literal></expr>)</condition><block type="pseudo" pos:start="111:21" pos:end="111:27"><block_content pos:start="111:21" pos:end="111:27">

                    <return pos:start="111:21" pos:end="111:27">return;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:59"><expr pos:start="113:17" pos:end="113:58"><name pos:start="113:17" pos:end="113:20">skip</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <call pos:start="113:24" pos:end="113:58"><name pos:start="113:24" pos:end="113:43">bytestream2_get_le16</name><argument_list pos:start="113:44" pos:end="113:58">(<argument pos:start="113:45" pos:end="113:57"><expr pos:start="113:45" pos:end="113:57"><operator pos:start="113:45" pos:end="113:45">&amp;</operator><name pos:start="113:46" pos:end="113:57">skip_map_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>



            <if_stmt pos:start="119:13" pos:end="131:13"><if pos:start="119:13" pos:end="123:13">if <condition pos:start="119:16" pos:end="119:30">(<expr pos:start="119:17" pos:end="119:29"><name pos:start="119:17" pos:end="119:29">changed_block</name></expr>)</condition> <block pos:start="119:32" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:63">

                <expr_stmt pos:start="121:17" pos:end="121:63"><expr pos:start="121:17" pos:end="121:62"><call pos:start="121:17" pos:end="121:62"><name pos:start="121:17" pos:end="121:25">copy_from</name><argument_list pos:start="121:26" pos:end="121:62">(<argument pos:start="121:27" pos:end="121:27"><expr pos:start="121:27" pos:end="121:27"><name pos:start="121:27" pos:end="121:27">s</name></expr></argument>, <argument pos:start="121:30" pos:end="121:48"><expr pos:start="121:30" pos:end="121:48"><name pos:start="121:30" pos:end="121:48"><name pos:start="121:30" pos:end="121:30">s</name><operator pos:start="121:31" pos:end="121:32">-&gt;</operator><name pos:start="121:33" pos:end="121:48">cur_decode_frame</name></name></expr></argument>, <argument pos:start="121:51" pos:end="121:55"><expr pos:start="121:51" pos:end="121:55"><name pos:start="121:51" pos:end="121:55">frame</name></expr></argument>, <argument pos:start="121:58" pos:end="121:58"><expr pos:start="121:58" pos:end="121:58"><literal type="number" pos:start="121:58" pos:end="121:58">0</literal></expr></argument>, <argument pos:start="121:61" pos:end="121:61"><expr pos:start="121:61" pos:end="121:61"><literal type="number" pos:start="121:61" pos:end="121:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="123:15" pos:end="131:13">else <block pos:start="123:20" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:61">

                <comment type="block" pos:start="125:17" pos:end="125:74">/* Don't try to copy last_frame data on the first frame */</comment>

                <if_stmt pos:start="127:17" pos:end="129:61"><if pos:start="127:17" pos:end="129:61">if <condition pos:start="127:20" pos:end="127:43">(<expr pos:start="127:21" pos:end="127:42"><name pos:start="127:21" pos:end="127:42"><name pos:start="127:21" pos:end="127:21">s</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:28">avctx</name><operator pos:start="127:29" pos:end="127:30">-&gt;</operator><name pos:start="127:31" pos:end="127:42">frame_number</name></name></expr>)</condition><block type="pseudo" pos:start="129:21" pos:end="129:61"><block_content pos:start="129:21" pos:end="129:61">

                    <expr_stmt pos:start="129:21" pos:end="129:61"><expr pos:start="129:21" pos:end="129:60"><call pos:start="129:21" pos:end="129:60"><name pos:start="129:21" pos:end="129:29">copy_from</name><argument_list pos:start="129:30" pos:end="129:60">(<argument pos:start="129:31" pos:end="129:31"><expr pos:start="129:31" pos:end="129:31"><name pos:start="129:31" pos:end="129:31">s</name></expr></argument>, <argument pos:start="129:34" pos:end="129:46"><expr pos:start="129:34" pos:end="129:46"><name pos:start="129:34" pos:end="129:46"><name pos:start="129:34" pos:end="129:34">s</name><operator pos:start="129:35" pos:end="129:36">-&gt;</operator><name pos:start="129:37" pos:end="129:46">last_frame</name></name></expr></argument>, <argument pos:start="129:49" pos:end="129:53"><expr pos:start="129:49" pos:end="129:53"><name pos:start="129:49" pos:end="129:53">frame</name></expr></argument>, <argument pos:start="129:56" pos:end="129:56"><expr pos:start="129:56" pos:end="129:56"><literal type="number" pos:start="129:56" pos:end="129:56">0</literal></expr></argument>, <argument pos:start="129:59" pos:end="129:59"><expr pos:start="129:59" pos:end="129:59"><literal type="number" pos:start="129:59" pos:end="129:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:22"><expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:16">skip</name> <operator pos:start="133:18" pos:end="133:19">*=</operator> <literal type="number" pos:start="133:21" pos:end="133:21">2</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="141:5" pos:end="141:64"><expr pos:start="141:5" pos:end="141:63"><call pos:start="141:5" pos:end="141:63"><name pos:start="141:5" pos:end="141:10">FFSWAP</name><argument_list pos:start="141:11" pos:end="141:63">(<argument pos:start="141:12" pos:end="141:19"><expr pos:start="141:12" pos:end="141:19"><name pos:start="141:12" pos:end="141:18">AVFrame</name><operator pos:start="141:19" pos:end="141:19">*</operator></expr></argument>, <argument pos:start="141:22" pos:end="141:41"><expr pos:start="141:22" pos:end="141:41"><name pos:start="141:22" pos:end="141:41"><name pos:start="141:22" pos:end="141:22">s</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:41">prev_decode_frame</name></name></expr></argument>, <argument pos:start="141:44" pos:end="141:62"><expr pos:start="141:44" pos:end="141:62"><name pos:start="141:44" pos:end="141:62"><name pos:start="141:44" pos:end="141:44">s</name><operator pos:start="141:45" pos:end="141:46">-&gt;</operator><name pos:start="141:47" pos:end="141:62">cur_decode_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="145:5" pos:end="153:5"><if pos:start="145:5" pos:end="153:5">if <condition pos:start="145:8" pos:end="145:55">(<expr pos:start="145:9" pos:end="145:54"><call pos:start="145:9" pos:end="145:50"><name pos:start="145:9" pos:end="145:34">bytestream2_get_bytes_left</name><argument_list pos:start="145:35" pos:end="145:50">(<argument pos:start="145:36" pos:end="145:49"><expr pos:start="145:36" pos:end="145:49"><operator pos:start="145:36" pos:end="145:36">&amp;</operator><name pos:start="145:37" pos:end="145:49"><name pos:start="145:37" pos:end="145:37">s</name><operator pos:start="145:38" pos:end="145:39">-&gt;</operator><name pos:start="145:40" pos:end="145:49">stream_ptr</name></name></expr></argument>)</argument_list></call> <operator pos:start="145:52" pos:end="145:52">&gt;</operator> <literal type="number" pos:start="145:54" pos:end="145:54">1</literal></expr>)</condition> <block pos:start="145:57" pos:end="153:5">{<block_content pos:start="147:9" pos:end="151:59">

        <expr_stmt pos:start="147:9" pos:end="151:59"><expr pos:start="147:9" pos:end="151:58"><call pos:start="147:9" pos:end="151:58"><name pos:start="147:9" pos:end="147:14">av_log</name><argument_list pos:start="147:15" pos:end="151:58">(<argument pos:start="147:16" pos:end="147:23"><expr pos:start="147:16" pos:end="147:23"><name pos:start="147:16" pos:end="147:23"><name pos:start="147:16" pos:end="147:16">s</name><operator pos:start="147:17" pos:end="147:18">-&gt;</operator><name pos:start="147:19" pos:end="147:23">avctx</name></name></expr></argument>, <argument pos:start="147:26" pos:end="147:37"><expr pos:start="147:26" pos:end="147:37"><name pos:start="147:26" pos:end="147:37">AV_LOG_DEBUG</name></expr></argument>,

               <argument pos:start="149:16" pos:end="149:58"><expr pos:start="149:16" pos:end="149:58"><literal type="string" pos:start="149:16" pos:end="149:58">"decode finished with %d bytes left over\n"</literal></expr></argument>,

               <argument pos:start="151:16" pos:end="151:57"><expr pos:start="151:16" pos:end="151:57"><call pos:start="151:16" pos:end="151:57"><name pos:start="151:16" pos:end="151:41">bytestream2_get_bytes_left</name><argument_list pos:start="151:42" pos:end="151:57">(<argument pos:start="151:43" pos:end="151:56"><expr pos:start="151:43" pos:end="151:56"><operator pos:start="151:43" pos:end="151:43">&amp;</operator><name pos:start="151:44" pos:end="151:56"><name pos:start="151:44" pos:end="151:44">s</name><operator pos:start="151:45" pos:end="151:46">-&gt;</operator><name pos:start="151:47" pos:end="151:56">stream_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
