<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17794.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">decode_delta_j</name><parameter_list pos:start="1:27" pos:end="5:63">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:34">uint8_t</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">dst</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:45"><decl pos:start="3:28" pos:end="3:45"><type pos:start="3:28" pos:end="3:45"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:40">uint8_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">buf</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:69"><decl pos:start="3:48" pos:end="3:69"><type pos:start="3:48" pos:end="3:69"><specifier pos:start="3:48" pos:end="3:52">const</specifier> <name pos:start="3:54" pos:end="3:60">uint8_t</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:69">buf_end</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:32"><decl pos:start="5:28" pos:end="5:32"><type pos:start="5:28" pos:end="5:32"><name pos:start="5:28" pos:end="5:30">int</name></type> <name pos:start="5:32" pos:end="5:32">w</name></decl></parameter>, <parameter pos:start="5:35" pos:end="5:39"><decl pos:start="5:35" pos:end="5:39"><type pos:start="5:35" pos:end="5:39"><name pos:start="5:35" pos:end="5:37">int</name></type> <name pos:start="5:39" pos:end="5:39">h</name></decl></parameter>, <parameter pos:start="5:42" pos:end="5:48"><decl pos:start="5:42" pos:end="5:48"><type pos:start="5:42" pos:end="5:48"><name pos:start="5:42" pos:end="5:44">int</name></type> <name pos:start="5:46" pos:end="5:48">bpp</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:62"><decl pos:start="5:51" pos:end="5:62"><type pos:start="5:51" pos:end="5:62"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:62">dst_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="211:1">{<block_content pos:start="9:5" pos:end="209:5">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int32_t</name></type> <name pos:start="9:13" pos:end="9:17">pitch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">type</name></decl>, <decl pos:start="13:20" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:20" pos:end="13:23">flag</name></decl>, <decl pos:start="13:26" pos:end="13:29"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:26" pos:end="13:29">cols</name></decl>, <decl pos:start="13:32" pos:end="13:37"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:32" pos:end="13:37">groups</name></decl>, <decl pos:start="13:40" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:40" pos:end="13:43">rows</name></decl>, <decl pos:start="13:46" pos:end="13:50"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:46" pos:end="13:50">bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:37"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:23">planepitch_byte</name> <init pos:start="17:25" pos:end="17:37">= <expr pos:start="17:27" pos:end="17:37"><operator pos:start="17:27" pos:end="17:27">(</operator><name pos:start="17:28" pos:end="17:28">w</name> <operator pos:start="17:30" pos:end="17:30">+</operator> <literal type="number" pos:start="17:32" pos:end="17:32">7</literal><operator pos:start="17:33" pos:end="17:33">)</operator> <operator pos:start="17:35" pos:end="17:35">/</operator> <literal type="number" pos:start="17:37" pos:end="17:37">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:41"><decl pos:start="19:5" pos:end="19:40"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">planepitch</name> <init pos:start="19:20" pos:end="19:40">= <expr pos:start="19:22" pos:end="19:40"><operator pos:start="19:22" pos:end="19:22">(</operator><operator pos:start="19:23" pos:end="19:23">(</operator><name pos:start="19:24" pos:end="19:24">w</name> <operator pos:start="19:26" pos:end="19:26">+</operator> <literal type="number" pos:start="19:28" pos:end="19:29">15</literal><operator pos:start="19:30" pos:end="19:30">)</operator> <operator pos:start="19:32" pos:end="19:32">/</operator> <literal type="number" pos:start="19:34" pos:end="19:35">16</literal><operator pos:start="19:36" pos:end="19:36">)</operator> <operator pos:start="19:38" pos:end="19:38">*</operator> <literal type="number" pos:start="19:40" pos:end="19:40">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:16">kludge_j</name></decl>, <decl pos:start="21:19" pos:end="21:19"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:19" pos:end="21:19">b</name></decl>, <decl pos:start="21:22" pos:end="21:22"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:22" pos:end="21:22">g</name></decl>, <decl pos:start="21:25" pos:end="21:25"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:25" pos:end="21:25">r</name></decl>, <decl pos:start="21:28" pos:end="21:28"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:28" pos:end="21:28">d</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18">GetByteContext</name></type> <name pos:start="23:20" pos:end="23:21">gb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:9">pitch</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:22">planepitch</name> <operator pos:start="27:24" pos:end="27:24">*</operator> <name pos:start="27:26" pos:end="27:28">bpp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:47"><expr pos:start="29:5" pos:end="29:46"><name pos:start="29:5" pos:end="29:12">kludge_j</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <ternary pos:start="29:16" pos:end="29:46"><condition pos:start="29:16" pos:end="29:24"><expr pos:start="29:16" pos:end="29:22"><name pos:start="29:16" pos:end="29:16">w</name> <operator pos:start="29:18" pos:end="29:18">&lt;</operator> <literal type="number" pos:start="29:20" pos:end="29:22">320</literal></expr> ?</condition><then pos:start="29:26" pos:end="29:42"> <expr pos:start="29:26" pos:end="29:42"><operator pos:start="29:26" pos:end="29:26">(</operator><literal type="number" pos:start="29:27" pos:end="29:31">320</literal> <operator pos:start="29:31" pos:end="29:31">-</operator> <name pos:start="29:33" pos:end="29:33">w</name><operator pos:start="29:34" pos:end="29:34">)</operator> <operator pos:start="29:36" pos:end="29:36">/</operator> <literal type="number" pos:start="29:38" pos:end="29:38">8</literal> <operator pos:start="29:40" pos:end="29:40">/</operator> <literal type="number" pos:start="29:42" pos:end="29:42">2</literal></expr> </then><else pos:start="29:44" pos:end="29:46">: <expr pos:start="29:46" pos:end="29:46"><literal type="number" pos:start="29:46" pos:end="29:46">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><call pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:20">bytestream2_init</name><argument_list pos:start="33:21" pos:end="33:45">(<argument pos:start="33:22" pos:end="33:24"><expr pos:start="33:22" pos:end="33:24"><operator pos:start="33:22" pos:end="33:22">&amp;</operator><name pos:start="33:23" pos:end="33:24">gb</name></expr></argument>, <argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">buf</name></expr></argument>, <argument pos:start="33:32" pos:end="33:44"><expr pos:start="33:32" pos:end="33:44"><name pos:start="33:32" pos:end="33:38">buf_end</name> <operator pos:start="33:40" pos:end="33:40">-</operator> <name pos:start="33:42" pos:end="33:44">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="37:5" pos:end="209:5">while <condition pos:start="37:11" pos:end="37:48">(<expr pos:start="37:12" pos:end="37:47"><call pos:start="37:12" pos:end="37:42"><name pos:start="37:12" pos:end="37:37">bytestream2_get_bytes_left</name><argument_list pos:start="37:38" pos:end="37:42">(<argument pos:start="37:39" pos:end="37:41"><expr pos:start="37:39" pos:end="37:41"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="37:44" pos:end="37:45">&gt;=</operator> <literal type="number" pos:start="37:47" pos:end="37:47">2</literal></expr>)</condition> <block pos:start="37:50" pos:end="209:5">{<block_content pos:start="39:9" pos:end="207:9">

        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:12">type</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:40"><name pos:start="39:16" pos:end="39:35">bytestream2_get_be16</name><argument_list pos:start="39:36" pos:end="39:40">(<argument pos:start="39:37" pos:end="39:39"><expr pos:start="39:37" pos:end="39:39"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="43:9" pos:end="207:9">switch <condition pos:start="43:16" pos:end="43:21">(<expr pos:start="43:17" pos:end="43:20"><name pos:start="43:17" pos:end="43:20">type</name></expr>)</condition> <block pos:start="43:23" pos:end="207:9">{<block_content pos:start="45:9" pos:end="205:19">

        <case pos:start="45:9" pos:end="45:15">case <expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>:</case>

            <return pos:start="47:13" pos:end="47:19">return;</return>

        <case pos:start="49:9" pos:end="49:15">case <expr pos:start="49:14" pos:end="49:14"><literal type="number" pos:start="49:14" pos:end="49:14">1</literal></expr>:</case>

            <expr_stmt pos:start="51:13" pos:end="51:47"><expr pos:start="51:13" pos:end="51:46"><name pos:start="51:13" pos:end="51:16">flag</name>   <operator pos:start="51:20" pos:end="51:20">=</operator> <call pos:start="51:22" pos:end="51:46"><name pos:start="51:22" pos:end="51:41">bytestream2_get_be16</name><argument_list pos:start="51:42" pos:end="51:46">(<argument pos:start="51:43" pos:end="51:45"><expr pos:start="51:43" pos:end="51:45"><operator pos:start="51:43" pos:end="51:43">&amp;</operator><name pos:start="51:44" pos:end="51:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:47"><expr pos:start="53:13" pos:end="53:46"><name pos:start="53:13" pos:end="53:16">cols</name>   <operator pos:start="53:20" pos:end="53:20">=</operator> <call pos:start="53:22" pos:end="53:46"><name pos:start="53:22" pos:end="53:41">bytestream2_get_be16</name><argument_list pos:start="53:42" pos:end="53:46">(<argument pos:start="53:43" pos:end="53:45"><expr pos:start="53:43" pos:end="53:45"><operator pos:start="53:43" pos:end="53:43">&amp;</operator><name pos:start="53:44" pos:end="53:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:47"><expr pos:start="55:13" pos:end="55:46"><name pos:start="55:13" pos:end="55:18">groups</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <call pos:start="55:22" pos:end="55:46"><name pos:start="55:22" pos:end="55:41">bytestream2_get_be16</name><argument_list pos:start="55:42" pos:end="55:46">(<argument pos:start="55:43" pos:end="55:45"><expr pos:start="55:43" pos:end="55:45"><operator pos:start="55:43" pos:end="55:43">&amp;</operator><name pos:start="55:44" pos:end="55:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="59:13" pos:end="117:13">for <control pos:start="59:17" pos:end="59:40">(<init pos:start="59:18" pos:end="59:23"><expr pos:start="59:18" pos:end="59:22"><name pos:start="59:18" pos:end="59:18">g</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>;</init> <condition pos:start="59:25" pos:end="59:35"><expr pos:start="59:25" pos:end="59:34"><name pos:start="59:25" pos:end="59:25">g</name> <operator pos:start="59:27" pos:end="59:27">&lt;</operator> <name pos:start="59:29" pos:end="59:34">groups</name></expr>;</condition> <incr pos:start="59:37" pos:end="59:39"><expr pos:start="59:37" pos:end="59:39"><name pos:start="59:37" pos:end="59:37">g</name><operator pos:start="59:38" pos:end="59:39">++</operator></expr></incr>)</control> <block pos:start="59:42" pos:end="117:13">{<block_content pos:start="61:17" pos:end="115:45">

                <expr_stmt pos:start="61:17" pos:end="61:51"><expr pos:start="61:17" pos:end="61:50"><name pos:start="61:17" pos:end="61:22">offset</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <call pos:start="61:26" pos:end="61:50"><name pos:start="61:26" pos:end="61:45">bytestream2_get_be16</name><argument_list pos:start="61:46" pos:end="61:50">(<argument pos:start="61:47" pos:end="61:49"><expr pos:start="61:47" pos:end="61:49"><operator pos:start="61:47" pos:end="61:47">&amp;</operator><name pos:start="61:48" pos:end="61:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="65:17" pos:end="67:27"><if pos:start="65:17" pos:end="67:27">if <condition pos:start="65:20" pos:end="65:56">(<expr pos:start="65:21" pos:end="65:55"><call pos:start="65:21" pos:end="65:51"><name pos:start="65:21" pos:end="65:46">bytestream2_get_bytes_left</name><argument_list pos:start="65:47" pos:end="65:51">(<argument pos:start="65:48" pos:end="65:50"><expr pos:start="65:48" pos:end="65:50"><operator pos:start="65:48" pos:end="65:48">&amp;</operator><name pos:start="65:49" pos:end="65:50">gb</name></expr></argument>)</argument_list></call> <operator pos:start="65:53" pos:end="65:53">&lt;</operator> <literal type="number" pos:start="65:55" pos:end="65:55">1</literal></expr>)</condition><block type="pseudo" pos:start="67:21" pos:end="67:27"><block_content pos:start="67:21" pos:end="67:27">

                    <return pos:start="67:21" pos:end="67:27">return;</return></block_content></block></if></if_stmt>



                <if_stmt pos:start="71:17" pos:end="77:95"><if pos:start="71:17" pos:end="73:94">if <condition pos:start="71:20" pos:end="71:29">(<expr pos:start="71:21" pos:end="71:28"><name pos:start="71:21" pos:end="71:28">kludge_j</name></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:94"><block_content pos:start="73:21" pos:end="73:94">

                    <expr_stmt pos:start="73:21" pos:end="73:94"><expr pos:start="73:21" pos:end="73:93"><name pos:start="73:21" pos:end="73:26">offset</name> <operator pos:start="73:28" pos:end="73:28">=</operator> <operator pos:start="73:30" pos:end="73:30">(</operator><operator pos:start="73:31" pos:end="73:31">(</operator><name pos:start="73:32" pos:end="73:37">offset</name> <operator pos:start="73:39" pos:end="73:39">/</operator> <operator pos:start="73:41" pos:end="73:41">(</operator><literal type="number" pos:start="73:42" pos:end="73:44">320</literal> <operator pos:start="73:46" pos:end="73:46">/</operator> <literal type="number" pos:start="73:48" pos:end="73:48">8</literal><operator pos:start="73:49" pos:end="73:49">)</operator><operator pos:start="73:50" pos:end="73:50">)</operator> <operator pos:start="73:52" pos:end="73:52">*</operator> <name pos:start="73:54" pos:end="73:58">pitch</name><operator pos:start="73:59" pos:end="73:59">)</operator> <operator pos:start="73:61" pos:end="73:61">+</operator> <operator pos:start="73:63" pos:end="73:63">(</operator><name pos:start="73:64" pos:end="73:69">offset</name> <operator pos:start="73:71" pos:end="73:71">%</operator> <operator pos:start="73:73" pos:end="73:73">(</operator><literal type="number" pos:start="73:74" pos:end="73:76">320</literal> <operator pos:start="73:78" pos:end="73:78">/</operator> <literal type="number" pos:start="73:80" pos:end="73:80">8</literal><operator pos:start="73:81" pos:end="73:81">)</operator><operator pos:start="73:82" pos:end="73:82">)</operator> <operator pos:start="73:84" pos:end="73:84">-</operator> <name pos:start="73:86" pos:end="73:93">kludge_j</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="75:17" pos:end="77:95">else<block type="pseudo" pos:start="77:21" pos:end="77:95"><block_content pos:start="77:21" pos:end="77:95">

                    <expr_stmt pos:start="77:21" pos:end="77:95"><expr pos:start="77:21" pos:end="77:94"><name pos:start="77:21" pos:end="77:26">offset</name> <operator pos:start="77:28" pos:end="77:28">=</operator> <operator pos:start="77:30" pos:end="77:30">(</operator><operator pos:start="77:31" pos:end="77:31">(</operator><name pos:start="77:32" pos:end="77:37">offset</name> <operator pos:start="77:39" pos:end="77:39">/</operator> <name pos:start="77:41" pos:end="77:55">planepitch_byte</name><operator pos:start="77:56" pos:end="77:56">)</operator> <operator pos:start="77:58" pos:end="77:58">*</operator> <name pos:start="77:60" pos:end="77:64">pitch</name><operator pos:start="77:65" pos:end="77:65">)</operator> <operator pos:start="77:67" pos:end="77:67">+</operator> <operator pos:start="77:69" pos:end="77:69">(</operator><name pos:start="77:70" pos:end="77:75">offset</name> <operator pos:start="77:77" pos:end="77:77">%</operator> <name pos:start="77:79" pos:end="77:93">planepitch_byte</name><operator pos:start="77:94" pos:end="77:94">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <for pos:start="81:17" pos:end="111:17">for <control pos:start="81:21" pos:end="81:42">(<init pos:start="81:22" pos:end="81:27"><expr pos:start="81:22" pos:end="81:26"><name pos:start="81:22" pos:end="81:22">b</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <literal type="number" pos:start="81:26" pos:end="81:26">0</literal></expr>;</init> <condition pos:start="81:29" pos:end="81:37"><expr pos:start="81:29" pos:end="81:36"><name pos:start="81:29" pos:end="81:29">b</name> <operator pos:start="81:31" pos:end="81:31">&lt;</operator> <name pos:start="81:33" pos:end="81:36">cols</name></expr>;</condition> <incr pos:start="81:39" pos:end="81:41"><expr pos:start="81:39" pos:end="81:41"><name pos:start="81:39" pos:end="81:39">b</name><operator pos:start="81:40" pos:end="81:41">++</operator></expr></incr>)</control> <block pos:start="81:44" pos:end="111:17">{<block_content pos:start="83:21" pos:end="109:21">

                    <for pos:start="83:21" pos:end="109:21">for <control pos:start="83:25" pos:end="83:45">(<init pos:start="83:26" pos:end="83:31"><expr pos:start="83:26" pos:end="83:30"><name pos:start="83:26" pos:end="83:26">d</name> <operator pos:start="83:28" pos:end="83:28">=</operator> <literal type="number" pos:start="83:30" pos:end="83:30">0</literal></expr>;</init> <condition pos:start="83:33" pos:end="83:40"><expr pos:start="83:33" pos:end="83:39"><name pos:start="83:33" pos:end="83:33">d</name> <operator pos:start="83:35" pos:end="83:35">&lt;</operator> <name pos:start="83:37" pos:end="83:39">bpp</name></expr>;</condition> <incr pos:start="83:42" pos:end="83:44"><expr pos:start="83:42" pos:end="83:44"><name pos:start="83:42" pos:end="83:42">d</name><operator pos:start="83:43" pos:end="83:44">++</operator></expr></incr>)</control> <block pos:start="83:47" pos:end="109:21">{<block_content pos:start="85:25" pos:end="107:45">

                        <decl_stmt pos:start="85:25" pos:end="85:66"><decl pos:start="85:25" pos:end="85:65"><type pos:start="85:25" pos:end="85:31"><name pos:start="85:25" pos:end="85:31">uint8_t</name></type> <name pos:start="85:33" pos:end="85:37">value</name> <init pos:start="85:39" pos:end="85:65">= <expr pos:start="85:41" pos:end="85:65"><call pos:start="85:41" pos:end="85:65"><name pos:start="85:41" pos:end="85:60">bytestream2_get_byte</name><argument_list pos:start="85:61" pos:end="85:65">(<argument pos:start="85:62" pos:end="85:64"><expr pos:start="85:62" pos:end="85:64"><operator pos:start="85:62" pos:end="85:62">&amp;</operator><name pos:start="85:63" pos:end="85:64">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                        <if_stmt pos:start="89:25" pos:end="91:35"><if pos:start="89:25" pos:end="91:35">if <condition pos:start="89:28" pos:end="89:47">(<expr pos:start="89:29" pos:end="89:46"><name pos:start="89:29" pos:end="89:34">offset</name> <operator pos:start="89:36" pos:end="89:37">&gt;=</operator> <name pos:start="89:39" pos:end="89:46">dst_size</name></expr>)</condition><block type="pseudo" pos:start="91:29" pos:end="91:35"><block_content pos:start="91:29" pos:end="91:35">

                            <return pos:start="91:29" pos:end="91:35">return;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="93:25" pos:end="93:43"><expr pos:start="93:25" pos:end="93:42"><name pos:start="93:25" pos:end="93:27">ptr</name> <operator pos:start="93:29" pos:end="93:29">=</operator> <name pos:start="93:31" pos:end="93:33">dst</name> <operator pos:start="93:35" pos:end="93:35">+</operator> <name pos:start="93:37" pos:end="93:42">offset</name></expr>;</expr_stmt>



                        <if_stmt pos:start="97:25" pos:end="103:44"><if pos:start="97:25" pos:end="99:44">if <condition pos:start="97:28" pos:end="97:33">(<expr pos:start="97:29" pos:end="97:32"><name pos:start="97:29" pos:end="97:32">flag</name></expr>)</condition><block type="pseudo" pos:start="99:29" pos:end="99:44"><block_content pos:start="99:29" pos:end="99:44">

                            <expr_stmt pos:start="99:29" pos:end="99:44"><expr pos:start="99:29" pos:end="99:43"><name pos:start="99:29" pos:end="99:34"><name pos:start="99:29" pos:end="99:31">ptr</name><index pos:start="99:32" pos:end="99:34">[<expr pos:start="99:33" pos:end="99:33"><literal type="number" pos:start="99:33" pos:end="99:33">0</literal></expr>]</index></name> <operator pos:start="99:36" pos:end="99:37">^=</operator> <name pos:start="99:39" pos:end="99:43">value</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="101:25" pos:end="103:44">else<block type="pseudo" pos:start="103:29" pos:end="103:44"><block_content pos:start="103:29" pos:end="103:44">

                            <expr_stmt pos:start="103:29" pos:end="103:44"><expr pos:start="103:29" pos:end="103:43"><name pos:start="103:29" pos:end="103:34"><name pos:start="103:29" pos:end="103:31">ptr</name><index pos:start="103:32" pos:end="103:34">[<expr pos:start="103:33" pos:end="103:33"><literal type="number" pos:start="103:33" pos:end="103:33">0</literal></expr>]</index></name>  <operator pos:start="103:37" pos:end="103:37">=</operator> <name pos:start="103:39" pos:end="103:43">value</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                        <expr_stmt pos:start="107:25" pos:end="107:45"><expr pos:start="107:25" pos:end="107:44"><name pos:start="107:25" pos:end="107:30">offset</name> <operator pos:start="107:32" pos:end="107:33">+=</operator> <name pos:start="107:35" pos:end="107:44">planepitch</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

                <if_stmt pos:start="113:17" pos:end="115:45"><if pos:start="113:17" pos:end="115:45">if <condition pos:start="113:20" pos:end="113:37">(<expr pos:start="113:21" pos:end="113:36"><operator pos:start="113:21" pos:end="113:21">(</operator><name pos:start="113:22" pos:end="113:25">cols</name> <operator pos:start="113:27" pos:end="113:27">*</operator> <name pos:start="113:29" pos:end="113:31">bpp</name><operator pos:start="113:32" pos:end="113:32">)</operator> <operator pos:start="113:34" pos:end="113:34">&amp;</operator> <literal type="number" pos:start="113:36" pos:end="113:36">1</literal></expr>)</condition><block type="pseudo" pos:start="115:21" pos:end="115:45"><block_content pos:start="115:21" pos:end="115:45">

                    <expr_stmt pos:start="115:21" pos:end="115:45"><expr pos:start="115:21" pos:end="115:44"><call pos:start="115:21" pos:end="115:44"><name pos:start="115:21" pos:end="115:36">bytestream2_skip</name><argument_list pos:start="115:37" pos:end="115:44">(<argument pos:start="115:38" pos:end="115:40"><expr pos:start="115:38" pos:end="115:40"><operator pos:start="115:38" pos:end="115:38">&amp;</operator><name pos:start="115:39" pos:end="115:40">gb</name></expr></argument>, <argument pos:start="115:43" pos:end="115:43"><expr pos:start="115:43" pos:end="115:43"><literal type="number" pos:start="115:43" pos:end="115:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <break pos:start="119:13" pos:end="119:18">break;</break>

        <case pos:start="121:9" pos:end="121:15">case <expr pos:start="121:14" pos:end="121:14"><literal type="number" pos:start="121:14" pos:end="121:14">2</literal></expr>:</case>

            <expr_stmt pos:start="123:13" pos:end="123:47"><expr pos:start="123:13" pos:end="123:46"><name pos:start="123:13" pos:end="123:16">flag</name>   <operator pos:start="123:20" pos:end="123:20">=</operator> <call pos:start="123:22" pos:end="123:46"><name pos:start="123:22" pos:end="123:41">bytestream2_get_be16</name><argument_list pos:start="123:42" pos:end="123:46">(<argument pos:start="123:43" pos:end="123:45"><expr pos:start="123:43" pos:end="123:45"><operator pos:start="123:43" pos:end="123:43">&amp;</operator><name pos:start="123:44" pos:end="123:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:47"><expr pos:start="125:13" pos:end="125:46"><name pos:start="125:13" pos:end="125:16">rows</name>   <operator pos:start="125:20" pos:end="125:20">=</operator> <call pos:start="125:22" pos:end="125:46"><name pos:start="125:22" pos:end="125:41">bytestream2_get_be16</name><argument_list pos:start="125:42" pos:end="125:46">(<argument pos:start="125:43" pos:end="125:45"><expr pos:start="125:43" pos:end="125:45"><operator pos:start="125:43" pos:end="125:43">&amp;</operator><name pos:start="125:44" pos:end="125:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:47"><expr pos:start="127:13" pos:end="127:46"><name pos:start="127:13" pos:end="127:17">bytes</name>  <operator pos:start="127:20" pos:end="127:20">=</operator> <call pos:start="127:22" pos:end="127:46"><name pos:start="127:22" pos:end="127:41">bytestream2_get_be16</name><argument_list pos:start="127:42" pos:end="127:46">(<argument pos:start="127:43" pos:end="127:45"><expr pos:start="127:43" pos:end="127:45"><operator pos:start="127:43" pos:end="127:43">&amp;</operator><name pos:start="127:44" pos:end="127:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:47"><expr pos:start="129:13" pos:end="129:46"><name pos:start="129:13" pos:end="129:18">groups</name> <operator pos:start="129:20" pos:end="129:20">=</operator> <call pos:start="129:22" pos:end="129:46"><name pos:start="129:22" pos:end="129:41">bytestream2_get_be16</name><argument_list pos:start="129:42" pos:end="129:46">(<argument pos:start="129:43" pos:end="129:45"><expr pos:start="129:43" pos:end="129:45"><operator pos:start="129:43" pos:end="129:43">&amp;</operator><name pos:start="129:44" pos:end="129:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="133:13" pos:end="199:13">for <control pos:start="133:17" pos:end="133:40">(<init pos:start="133:18" pos:end="133:23"><expr pos:start="133:18" pos:end="133:22"><name pos:start="133:18" pos:end="133:18">g</name> <operator pos:start="133:20" pos:end="133:20">=</operator> <literal type="number" pos:start="133:22" pos:end="133:22">0</literal></expr>;</init> <condition pos:start="133:25" pos:end="133:35"><expr pos:start="133:25" pos:end="133:34"><name pos:start="133:25" pos:end="133:25">g</name> <operator pos:start="133:27" pos:end="133:27">&lt;</operator> <name pos:start="133:29" pos:end="133:34">groups</name></expr>;</condition> <incr pos:start="133:37" pos:end="133:39"><expr pos:start="133:37" pos:end="133:39"><name pos:start="133:37" pos:end="133:37">g</name><operator pos:start="133:38" pos:end="133:39">++</operator></expr></incr>)</control> <block pos:start="133:42" pos:end="199:13">{<block_content pos:start="135:17" pos:end="197:45">

                <expr_stmt pos:start="135:17" pos:end="135:51"><expr pos:start="135:17" pos:end="135:50"><name pos:start="135:17" pos:end="135:22">offset</name> <operator pos:start="135:24" pos:end="135:24">=</operator> <call pos:start="135:26" pos:end="135:50"><name pos:start="135:26" pos:end="135:45">bytestream2_get_be16</name><argument_list pos:start="135:46" pos:end="135:50">(<argument pos:start="135:47" pos:end="135:49"><expr pos:start="135:47" pos:end="135:49"><operator pos:start="135:47" pos:end="135:47">&amp;</operator><name pos:start="135:48" pos:end="135:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="139:17" pos:end="145:95"><if pos:start="139:17" pos:end="141:93">if <condition pos:start="139:20" pos:end="139:29">(<expr pos:start="139:21" pos:end="139:28"><name pos:start="139:21" pos:end="139:28">kludge_j</name></expr>)</condition><block type="pseudo" pos:start="141:21" pos:end="141:93"><block_content pos:start="141:21" pos:end="141:93">

                    <expr_stmt pos:start="141:21" pos:end="141:93"><expr pos:start="141:21" pos:end="141:92"><name pos:start="141:21" pos:end="141:26">offset</name> <operator pos:start="141:28" pos:end="141:28">=</operator> <operator pos:start="141:30" pos:end="141:30">(</operator><operator pos:start="141:31" pos:end="141:31">(</operator><name pos:start="141:32" pos:end="141:37">offset</name> <operator pos:start="141:39" pos:end="141:39">/</operator> <operator pos:start="141:41" pos:end="141:41">(</operator><literal type="number" pos:start="141:42" pos:end="141:44">320</literal> <operator pos:start="141:46" pos:end="141:46">/</operator> <literal type="number" pos:start="141:48" pos:end="141:48">8</literal><operator pos:start="141:49" pos:end="141:49">)</operator><operator pos:start="141:50" pos:end="141:50">)</operator> <operator pos:start="141:52" pos:end="141:52">*</operator> <name pos:start="141:54" pos:end="141:58">pitch</name><operator pos:start="141:59" pos:end="141:59">)</operator> <operator pos:start="141:61" pos:end="141:61">+</operator> <operator pos:start="141:63" pos:end="141:63">(</operator><name pos:start="141:64" pos:end="141:69">offset</name> <operator pos:start="141:71" pos:end="141:71">%</operator> <operator pos:start="141:73" pos:end="141:73">(</operator><literal type="number" pos:start="141:74" pos:end="141:76">320</literal><operator pos:start="141:77" pos:end="141:77">/</operator> <literal type="number" pos:start="141:79" pos:end="141:79">8</literal><operator pos:start="141:80" pos:end="141:80">)</operator><operator pos:start="141:81" pos:end="141:81">)</operator> <operator pos:start="141:83" pos:end="141:83">-</operator> <name pos:start="141:85" pos:end="141:92">kludge_j</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="143:17" pos:end="145:95">else<block type="pseudo" pos:start="145:21" pos:end="145:95"><block_content pos:start="145:21" pos:end="145:95">

                    <expr_stmt pos:start="145:21" pos:end="145:95"><expr pos:start="145:21" pos:end="145:94"><name pos:start="145:21" pos:end="145:26">offset</name> <operator pos:start="145:28" pos:end="145:28">=</operator> <operator pos:start="145:30" pos:end="145:30">(</operator><operator pos:start="145:31" pos:end="145:31">(</operator><name pos:start="145:32" pos:end="145:37">offset</name> <operator pos:start="145:39" pos:end="145:39">/</operator> <name pos:start="145:41" pos:end="145:55">planepitch_byte</name><operator pos:start="145:56" pos:end="145:56">)</operator> <operator pos:start="145:58" pos:end="145:58">*</operator> <name pos:start="145:60" pos:end="145:64">pitch</name><operator pos:start="145:65" pos:end="145:65">)</operator> <operator pos:start="145:67" pos:end="145:67">+</operator> <operator pos:start="145:69" pos:end="145:69">(</operator><name pos:start="145:70" pos:end="145:75">offset</name> <operator pos:start="145:77" pos:end="145:77">%</operator> <name pos:start="145:79" pos:end="145:93">planepitch_byte</name><operator pos:start="145:94" pos:end="145:94">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <for pos:start="149:17" pos:end="193:17">for <control pos:start="149:21" pos:end="149:42">(<init pos:start="149:22" pos:end="149:27"><expr pos:start="149:22" pos:end="149:26"><name pos:start="149:22" pos:end="149:22">r</name> <operator pos:start="149:24" pos:end="149:24">=</operator> <literal type="number" pos:start="149:26" pos:end="149:26">0</literal></expr>;</init> <condition pos:start="149:29" pos:end="149:37"><expr pos:start="149:29" pos:end="149:36"><name pos:start="149:29" pos:end="149:29">r</name> <operator pos:start="149:31" pos:end="149:31">&lt;</operator> <name pos:start="149:33" pos:end="149:36">rows</name></expr>;</condition> <incr pos:start="149:39" pos:end="149:41"><expr pos:start="149:39" pos:end="149:41"><name pos:start="149:39" pos:end="149:39">r</name><operator pos:start="149:40" pos:end="149:41">++</operator></expr></incr>)</control> <block pos:start="149:44" pos:end="193:17">{<block_content pos:start="151:21" pos:end="191:21">

                    <for pos:start="151:21" pos:end="191:21">for <control pos:start="151:25" pos:end="151:45">(<init pos:start="151:26" pos:end="151:31"><expr pos:start="151:26" pos:end="151:30"><name pos:start="151:26" pos:end="151:26">d</name> <operator pos:start="151:28" pos:end="151:28">=</operator> <literal type="number" pos:start="151:30" pos:end="151:30">0</literal></expr>;</init> <condition pos:start="151:33" pos:end="151:40"><expr pos:start="151:33" pos:end="151:39"><name pos:start="151:33" pos:end="151:33">d</name> <operator pos:start="151:35" pos:end="151:35">&lt;</operator> <name pos:start="151:37" pos:end="151:39">bpp</name></expr>;</condition> <incr pos:start="151:42" pos:end="151:44"><expr pos:start="151:42" pos:end="151:44"><name pos:start="151:42" pos:end="151:42">d</name><operator pos:start="151:43" pos:end="151:44">++</operator></expr></incr>)</control> <block pos:start="151:47" pos:end="191:21">{<block_content pos:start="153:25" pos:end="189:25">

                        <decl_stmt pos:start="153:25" pos:end="153:81"><decl pos:start="153:25" pos:end="153:80"><type pos:start="153:25" pos:end="153:32"><name pos:start="153:25" pos:end="153:32">unsigned</name></type> <name pos:start="153:34" pos:end="153:40">noffset</name> <init pos:start="153:42" pos:end="153:80">= <expr pos:start="153:44" pos:end="153:80"><name pos:start="153:44" pos:end="153:49">offset</name> <operator pos:start="153:51" pos:end="153:51">+</operator> <operator pos:start="153:53" pos:end="153:53">(</operator><name pos:start="153:54" pos:end="153:54">r</name> <operator pos:start="153:56" pos:end="153:56">*</operator> <name pos:start="153:58" pos:end="153:62">pitch</name><operator pos:start="153:63" pos:end="153:63">)</operator> <operator pos:start="153:65" pos:end="153:65">+</operator> <name pos:start="153:67" pos:end="153:67">d</name> <operator pos:start="153:69" pos:end="153:69">*</operator> <name pos:start="153:71" pos:end="153:80">planepitch</name></expr></init></decl>;</decl_stmt>



                        <if_stmt pos:start="157:25" pos:end="159:35"><if pos:start="157:25" pos:end="159:35">if <condition pos:start="157:28" pos:end="157:64">(<expr pos:start="157:29" pos:end="157:63"><call pos:start="157:29" pos:end="157:59"><name pos:start="157:29" pos:end="157:54">bytestream2_get_bytes_left</name><argument_list pos:start="157:55" pos:end="157:59">(<argument pos:start="157:56" pos:end="157:58"><expr pos:start="157:56" pos:end="157:58"><operator pos:start="157:56" pos:end="157:56">&amp;</operator><name pos:start="157:57" pos:end="157:58">gb</name></expr></argument>)</argument_list></call> <operator pos:start="157:61" pos:end="157:61">&lt;</operator> <literal type="number" pos:start="157:63" pos:end="157:63">1</literal></expr>)</condition><block type="pseudo" pos:start="159:29" pos:end="159:35"><block_content pos:start="159:29" pos:end="159:35">

                            <return pos:start="159:29" pos:end="159:35">return;</return></block_content></block></if></if_stmt>



                        <for pos:start="163:25" pos:end="189:25">for <control pos:start="163:29" pos:end="163:51">(<init pos:start="163:30" pos:end="163:35"><expr pos:start="163:30" pos:end="163:34"><name pos:start="163:30" pos:end="163:30">b</name> <operator pos:start="163:32" pos:end="163:32">=</operator> <literal type="number" pos:start="163:34" pos:end="163:34">0</literal></expr>;</init> <condition pos:start="163:37" pos:end="163:46"><expr pos:start="163:37" pos:end="163:45"><name pos:start="163:37" pos:end="163:37">b</name> <operator pos:start="163:39" pos:end="163:39">&lt;</operator> <name pos:start="163:41" pos:end="163:45">bytes</name></expr>;</condition> <incr pos:start="163:48" pos:end="163:50"><expr pos:start="163:48" pos:end="163:50"><name pos:start="163:48" pos:end="163:48">b</name><operator pos:start="163:49" pos:end="163:50">++</operator></expr></incr>)</control> <block pos:start="163:53" pos:end="189:25">{<block_content pos:start="165:29" pos:end="187:38">

                            <decl_stmt pos:start="165:29" pos:end="165:70"><decl pos:start="165:29" pos:end="165:69"><type pos:start="165:29" pos:end="165:35"><name pos:start="165:29" pos:end="165:35">uint8_t</name></type> <name pos:start="165:37" pos:end="165:41">value</name> <init pos:start="165:43" pos:end="165:69">= <expr pos:start="165:45" pos:end="165:69"><call pos:start="165:45" pos:end="165:69"><name pos:start="165:45" pos:end="165:64">bytestream2_get_byte</name><argument_list pos:start="165:65" pos:end="165:69">(<argument pos:start="165:66" pos:end="165:68"><expr pos:start="165:66" pos:end="165:68"><operator pos:start="165:66" pos:end="165:66">&amp;</operator><name pos:start="165:67" pos:end="165:68">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                            <if_stmt pos:start="169:29" pos:end="171:39"><if pos:start="169:29" pos:end="171:39">if <condition pos:start="169:32" pos:end="169:52">(<expr pos:start="169:33" pos:end="169:51"><name pos:start="169:33" pos:end="169:39">noffset</name> <operator pos:start="169:41" pos:end="169:42">&gt;=</operator> <name pos:start="169:44" pos:end="169:51">dst_size</name></expr>)</condition><block type="pseudo" pos:start="171:33" pos:end="171:39"><block_content pos:start="171:33" pos:end="171:39">

                                <return pos:start="171:33" pos:end="171:39">return;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="173:29" pos:end="173:48"><expr pos:start="173:29" pos:end="173:47"><name pos:start="173:29" pos:end="173:31">ptr</name> <operator pos:start="173:33" pos:end="173:33">=</operator> <name pos:start="173:35" pos:end="173:37">dst</name> <operator pos:start="173:39" pos:end="173:39">+</operator> <name pos:start="173:41" pos:end="173:47">noffset</name></expr>;</expr_stmt>



                            <if_stmt pos:start="177:29" pos:end="183:48"><if pos:start="177:29" pos:end="179:48">if <condition pos:start="177:32" pos:end="177:37">(<expr pos:start="177:33" pos:end="177:36"><name pos:start="177:33" pos:end="177:36">flag</name></expr>)</condition><block type="pseudo" pos:start="179:33" pos:end="179:48"><block_content pos:start="179:33" pos:end="179:48">

                                <expr_stmt pos:start="179:33" pos:end="179:48"><expr pos:start="179:33" pos:end="179:47"><name pos:start="179:33" pos:end="179:38"><name pos:start="179:33" pos:end="179:35">ptr</name><index pos:start="179:36" pos:end="179:38">[<expr pos:start="179:37" pos:end="179:37"><literal type="number" pos:start="179:37" pos:end="179:37">0</literal></expr>]</index></name> <operator pos:start="179:40" pos:end="179:41">^=</operator> <name pos:start="179:43" pos:end="179:47">value</name></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="181:29" pos:end="183:48">else<block type="pseudo" pos:start="183:33" pos:end="183:48"><block_content pos:start="183:33" pos:end="183:48">

                                <expr_stmt pos:start="183:33" pos:end="183:48"><expr pos:start="183:33" pos:end="183:47"><name pos:start="183:33" pos:end="183:38"><name pos:start="183:33" pos:end="183:35">ptr</name><index pos:start="183:36" pos:end="183:38">[<expr pos:start="183:37" pos:end="183:37"><literal type="number" pos:start="183:37" pos:end="183:37">0</literal></expr>]</index></name>  <operator pos:start="183:41" pos:end="183:41">=</operator> <name pos:start="183:43" pos:end="183:47">value</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                            <expr_stmt pos:start="187:29" pos:end="187:38"><expr pos:start="187:29" pos:end="187:37"><name pos:start="187:29" pos:end="187:35">noffset</name><operator pos:start="187:36" pos:end="187:37">++</operator></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></for>

                </block_content>}</block></for>

                <if_stmt pos:start="195:17" pos:end="197:45"><if pos:start="195:17" pos:end="197:45">if <condition pos:start="195:20" pos:end="195:45">(<expr pos:start="195:21" pos:end="195:44"><operator pos:start="195:21" pos:end="195:21">(</operator><name pos:start="195:22" pos:end="195:25">rows</name> <operator pos:start="195:27" pos:end="195:27">*</operator> <name pos:start="195:29" pos:end="195:33">bytes</name> <operator pos:start="195:35" pos:end="195:35">*</operator> <name pos:start="195:37" pos:end="195:39">bpp</name><operator pos:start="195:40" pos:end="195:40">)</operator> <operator pos:start="195:42" pos:end="195:42">&amp;</operator> <literal type="number" pos:start="195:44" pos:end="195:44">1</literal></expr>)</condition><block type="pseudo" pos:start="197:21" pos:end="197:45"><block_content pos:start="197:21" pos:end="197:45">

                    <expr_stmt pos:start="197:21" pos:end="197:45"><expr pos:start="197:21" pos:end="197:44"><call pos:start="197:21" pos:end="197:44"><name pos:start="197:21" pos:end="197:36">bytestream2_skip</name><argument_list pos:start="197:37" pos:end="197:44">(<argument pos:start="197:38" pos:end="197:40"><expr pos:start="197:38" pos:end="197:40"><operator pos:start="197:38" pos:end="197:38">&amp;</operator><name pos:start="197:39" pos:end="197:40">gb</name></expr></argument>, <argument pos:start="197:43" pos:end="197:43"><expr pos:start="197:43" pos:end="197:43"><literal type="number" pos:start="197:43" pos:end="197:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <break pos:start="201:13" pos:end="201:18">break;</break>

        <default pos:start="203:9" pos:end="203:16">default:</default>

            <return pos:start="205:13" pos:end="205:19">return;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
